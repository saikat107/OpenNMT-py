========================================================================
Example Number: 1
Parent Code is: 
( int ) ( ( value - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
-------------------------------------------------------------------------------
Child code is: 
( int ) ( ( v - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (11 (214{val=(}) (39{val=int}) (215{val=)}) (36 (214{val=(}) (27 (27 (36 (214{val=(}) (27 (800{val=value}) (201{val=-}) (22 (315{val=this}) (235{val=.}) (800{val=lowerBound}))) (215{val=)})) (203{val=/}) (36 (214{val=(}) (27 (22 (315{val=this}) (235{val=.}) (800{val=upperBound})) (201{val=-}) (22 (315{val=this}) (235{val=.}) (800{val=lowerBound}))) (215{val=)}))) (202{val=*}) (34{val=NUMBER_CONSTANT})) (215{val=)}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (11 (214{val=(}) (39{val=int}) (215{val=)}) (36 (214{val=(}) (27 (27 (36 (214{val=(}) (27 (800{val=v}) (201{val=-}) (22 (315{val=this}) (235{val=.}) (800{val=lowerBound}))) (215{val=)})) (203{val=/}) (36 (214{val=(}) (27 (22 (315{val=this}) (235{val=.}) (800{val=upperBound})) (201{val=-}) (22 (315{val=this}) (235{val=.}) (800{val=lowerBound}))) (215{val=)}))) (202{val=*}) (34{val=NUMBER_CONSTANT})) (215{val=)}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/24/parent/source_org_jfree_chart_renderer_GrayPaintScale.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	(
Code	(
Distance : 23

1
Tree	rings
Code	rings
Distance : 24

2
Tree	separator
Code	separator
Distance : 24

3
Tree	sampleSize
Code	sampleSize
Distance : 24

4
Tree	mockitoStubber
Code	mockitoStubber
Distance : 24

5
Tree	false
Code	false
Distance : 24

6
Tree	]
Code	]
Distance : 24

7
Tree	step
Code	step
Distance : 24

8
Tree	computeEscapedEs6
Code	computeEscapedEs6
Distance : 24

9
Tree	( value / value - *= )
Code	( value / value - *= )
Distance : 20

10
Tree	tightenNameTypeAndDontWarn
Code	tightenNameTypeAndDontWarn
Distance : 24

11
Tree	String
Code	String
Distance : 24

12
Tree	fireDatasetChanged
Code	fireDatasetChanged
Distance : 24

13
Tree	assertFalse
Code	assertFalse
Distance : 24

14
Tree	}
Code	}
Distance : 24

15
Tree	Streams
Code	Streams
Distance : 24

16
Tree	n
Code	n
Distance : 24

17
Tree	LinkedDurationField
Code	LinkedDurationField
Distance : 24

18
Tree	public
Code	public
Distance : 24

19
Tree	doAnswer
Code	doAnswer
Distance : 24

20
Tree	key
Code	key
Distance : 24

21
Tree	Args
Code	Args
Distance : 24

22
Tree	bp
Code	bp
Distance : 24

23
Tree	double
Code	double
Distance : 24

24
Tree	Object
Code	Object
Distance : 24

25
Tree	RunnerFactory
Code	RunnerFactory
Distance : 24

26
Tree	index
Code	index
Distance : 24

27
Tree	NumberOfInvocationsChecker
Code	NumberOfInvocationsChecker
Distance : 24

28
Tree	mockingProgress
Code	mockingProgress
Distance : 24

29
Tree	assertEquals
Code	assertEquals
Distance : 24

30
Tree	msgNode
Code	msgNode
Distance : 24

31
Tree	getPeriodType
Code	getPeriodType
Distance : 24

32
Tree	catch
Code	catch
Distance : 24

33
Tree	static
Code	static
Distance : 24

34
Tree	fold
Code	fold
Distance : 24

35
Tree	isNullOrEmpty
Code	isNullOrEmpty
Distance : 24

36
Tree	Arguments
Code	Arguments
Distance : 24

37
Tree	Preconditions
Code	Preconditions
Distance : 24

38
Tree	assertPatternsEqual
Code	assertPatternsEqual
Distance : 24

39
Tree	beta
Code	beta
Distance : 24

40
Tree	assertNode
Code	assertNode
Distance : 24

41
Tree	for
Code	for
Distance : 24

42
Tree	class
Code	class
Distance : 24

43
Tree	( lowerBound / value - / )
Code	( lowerBound / value - / )
Distance : 19

44
Tree	parent
Code	parent
Distance : 24

45
Tree	getLastArguments
Code	getLastArguments
Distance : 24

46
Tree	assertTrue
Code	assertTrue
Distance : 24

47
Tree	isMultiline
Code	isMultiline
Distance : 24

48
Tree	shouldAddTypes
Code	shouldAddTypes
Distance : 24

49
Tree	TransformUtils
Code	TransformUtils
Distance : 24

50
Tree	:
Code	:
Distance : 24

51
Tree	( value / lowerBound - / )
Code	( value / lowerBound - / )
Distance : 20

52
Tree	( value / v - / )
Code	( value / v - / )
Distance : 19

53
Tree	!
Code	!
Distance : 24

54
Tree	{
Code	{
Distance : 24

55
Tree	fireChangeEvent
Code	fireChangeEvent
Distance : 24

56
Tree	assertType
Code	assertType
Distance : 24

57
Tree	-
Code	-
Distance : 23

58
Tree	return
Code	return
Distance : 24

59
Tree	<
Code	<
Distance : 24

60
Tree	int
Code	int
Distance : 23

61
Tree	testTypes
Code	testTypes
Distance : 24

62
Tree	preloadEs6RuntimeFunction
Code	preloadEs6RuntimeFunction
Distance : 24

63
Tree	==
Code	==
Distance : 24

64
Tree	SimpleDependencyInfo
Code	SimpleDependencyInfo
Distance : 24

65
Tree	Math
Code	Math
Distance : 24

66
Tree	STRING_CONSTANT
Code	STRING_CONSTANT
Distance : 24

67
Tree	new
Code	new
Distance : 24

68
Tree	null
Code	null
Distance : 24

69
Tree	compiler
Code	compiler
Distance : 24

70
Tree	NUMBER_CONSTANT
Code	NUMBER_CONSTANT
Distance : 23

71
Tree	( v / value - / )
Code	( v / value - / )
Distance : 19

72
Tree	=
Code	=
Distance : 24

73
Tree	( value / value - /= )
Code	( value / value - /= )
Distance : 20

74
Tree	node
Code	node
Distance : 24

75
Tree	( value / value - / )
Code	( value / value - / )
Distance : 20

76
Tree	this
Code	this
Distance : 23

77
Tree	tree
Code	tree
Distance : 24

78
Tree	handleGet
Code	handleGet
Distance : 24

79
Tree	flipAllIfWarranted
Code	flipAllIfWarranted
Distance : 24

80
Tree	testModules
Code	testModules
Distance : 24

81
Tree	deleteWhitespaceBefore
Code	deleteWhitespaceBefore
Distance : 24

82
Tree	try
Code	try
Distance : 24

83
Tree	)
Code	)
Distance : 23

84
Tree	FastFourierTransformer
Code	FastFourierTransformer
Distance : 24

85
Tree	do
Code	do
Distance : 24

86
Tree	if
Code	if
Distance : 24

87
Tree	logBeta
Code	logBeta
Distance : 24

88
Tree	()
Code	()
Distance : 24

89
Tree	>
Code	>
Distance : 24

90
Tree	crossP
Code	crossP
Distance : 24

91
Tree	CompositeFormat
Code	CompositeFormat
Distance : 24

92
Tree	replaceSymbol
Code	replaceSymbol
Distance : 24

93
Tree	( value / value - extends )
Code	( value / value - extends )
Distance : 20

94
Tree	Assert
Code	Assert
Distance : 24

95
Tree	,
Code	,
Distance : 24

96
Tree	setUpInterpolator
Code	setUpInterpolator
Distance : 24

97
Tree	dataRI
Code	dataRI
Distance : 24

98
Tree	isGoogScopeFunctionBody
Code	isGoogScopeFunctionBody
Distance : 24

99
Tree	removeUnusedProperties
Code	removeUnusedProperties
Distance : 24

========================================================================


========================================================================
Example Number: 2
Parent Code is: 
{ super ( paint , stroke , paint , stroke , alpha ) ; this . value = value ; }
-------------------------------------------------------------------------------
Child code is: 
{ super ( paint , stroke , outlinePaint , outlineStroke , alpha ) ; this . value = value ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=paint}) (234{val=,}) (800{val=stroke}) (234{val=,}) (800{val=paint}) (234{val=,}) (800{val=stroke}) (234{val=,}) (800{val=alpha}) (215{val=)}) (227{val=;})) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=value})) (204{val==}) (800{val=value})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=paint}) (234{val=,}) (800{val=stroke}) (234{val=,}) (800{val=outlinePaint}) (234{val=,}) (800{val=outlineStroke}) (234{val=,}) (800{val=alpha}) (215{val=)}) (227{val=;})) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=value})) (204{val==}) (800{val=value})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/20/parent/source_org_jfree_chart_plot_ValueMarker.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ super ( stroke ) ; this . value = value ; disableTypeCheck }
Code	{ super ( stroke ) ; this . value = value ; disableTypeCheck }
Distance : 9

1
Tree	{ super ( LocalizedFormats.NO_REGRESSORS , stroke , paint ) ; this . value = value ; }
Code	{ super ( LocalizedFormats.NO_REGRESSORS , stroke , paint ) ; this . value = value ; }
Distance : 6

2
Tree	{ super ( changeScopeRoot , stroke , paint ) ; this . value = value ; }
Code	{ super ( changeScopeRoot , stroke , paint ) ; this . value = value ; }
Distance : 6

3
Tree	{ super ( paint ) ; this . value = getSentinelObjectLiteral ( value ) ; }
Code	{ super ( paint ) ; this . value = getSentinelObjectLiteral ( value ) ; }
Distance : 11

4
Tree	{ super ( paint ? LocalizedFormats.NUMBER_TOO_SMALL : LocalizedFormats.NUMBER_TOO_SMALL ) ; this . value = value ; }
Code	{ super ( paint ? LocalizedFormats.NUMBER_TOO_SMALL : LocalizedFormats.NUMBER_TOO_SMALL ) ; this . value = value ; }
Distance : 8

5
Tree	{ super ( paint ? imagEigenvalues : LanguageMode.NO_TRANSPILE ) ; this . value = value ; }
Code	{ super ( paint ? imagEigenvalues : LanguageMode.NO_TRANSPILE ) ; this . value = value ; }
Distance : 8

6
Tree	{ super ( pairedTTest , stroke , paint ) ; this . value = value ; }
Code	{ super ( pairedTTest , stroke , paint ) ; this . value = value ; }
Distance : 6

7
Tree	{ super ( paint ) ; this . value = firstNonNull ( value ) ; }
Code	{ super ( paint ) ; this . value = firstNonNull ( value ) ; }
Distance : 11

8
Tree	{ super ( paint ? imaginary : LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED ) ; this . value = value ; }
Code	{ super ( paint ? imaginary : LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED ) ; this . value = value ; }
Distance : 8

9
Tree	{ super ( paint ? LocalizedFormats.NUMBER_TOO_SMALL : System.out ) ; this . value = value ; }
Code	{ super ( paint ? LocalizedFormats.NUMBER_TOO_SMALL : System.out ) ; this . value = value ; }
Distance : 8

10
Tree	{ super ( paint ? LocalizedFormats.NUMBER_TOO_SMALL : definitionsGatherer.definitions ) ; this . value = value ; }
Code	{ super ( paint ? LocalizedFormats.NUMBER_TOO_SMALL : definitionsGatherer.definitions ) ; this . value = value ; }
Distance : 8

11
Tree	{ super ( paint ? LanguageMode.NO_TRANSPILE : LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ) ; this . value = value ; }
Code	{ super ( paint ? LanguageMode.NO_TRANSPILE : LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ) ; this . value = value ; }
Distance : 8

12
Tree	{ super ( paint ) ; this . value = alpha ; }
Code	{ super ( paint ) ; this . value = alpha ; }
Distance : 9

13
Tree	{ super ( leftOfArrow.type , stroke , paint ) ; this . value = value ; }
Code	{ super ( leftOfArrow.type , stroke , paint ) ; this . value = value ; }
Distance : 6

14
Tree	{ super ( LocalizedFormats.PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD , stroke , paint ) ; this . value = value ; }
Code	{ super ( LocalizedFormats.PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD , stroke , paint ) ; this . value = value ; }
Distance : 6

15
Tree	{ super ( paint ) ; this . value = value . toLowerCase () ; }
Code	{ super ( paint ) ; this . value = value . toLowerCase () ; }
Distance : 11

16
Tree	{ super ( JUnitRule.Strictness.WARN , stroke , paint ) ; this . value = value ; }
Code	{ super ( JUnitRule.Strictness.WARN , stroke , paint ) ; this . value = value ; }
Distance : 6

17
Tree	{ super ( stroke ) ; this . value = value . value () ; }
Code	{ super ( stroke ) ; this . value = value . value () ; }
Distance : 11

18
Tree	{ super ( paint ) ; this . value = findDomainAxisIndex ( value ) ; }
Code	{ super ( paint ) ; this . value = findDomainAxisIndex ( value ) ; }
Distance : 11

19
Tree	{ super ( paint , stroke , paint ) ; this . value = value . getToken () ; }
Code	{ super ( paint , stroke , paint ) ; this . value = value . getToken () ; }
Distance : 8

20
Tree	{ super ( stroke , stroke , stroke , alpha ) ; this . value = value ; }
Code	{ super ( stroke , stroke , stroke , alpha ) ; this . value = value ; }
Distance : 4

21
Tree	{ super ( paint , stroke , paint , stroke ) ; this . value = value . valueOf () ; }
Code	{ super ( paint , stroke , paint , stroke ) ; this . value = value . valueOf () ; }
Distance : 7

22
Tree	{ super ( paint , stroke , paint ) ; this . value = value . ofReal () ; }
Code	{ super ( paint , stroke , paint ) ; this . value = value . ofReal () ; }
Distance : 8

23
Tree	{ super ( paint , stroke , paint , alpha ) ; this . value = value . getType () ; }
Code	{ super ( paint , stroke , paint , alpha ) ; this . value = value . getType () ; }
Distance : 6

24
Tree	{ super ( paint , stroke , paint ) ; this . value = value . dotProduct () ; }
Code	{ super ( paint , stroke , paint ) ; this . value = value . dotProduct () ; }
Distance : 8

25
Tree	{ super ( paint ? stroke : LiveVariablesAnalysisEs6.MAX_VARIABLES_TO_ANALYZE ) ; this . value = value ; }
Code	{ super ( paint ? stroke : LiveVariablesAnalysisEs6.MAX_VARIABLES_TO_ANALYZE ) ; this . value = value ; }
Distance : 7

26
Tree	{ super ( null , stroke , paint , stroke , alpha , stroke ) ; this . value = value ; }
Code	{ super ( null , stroke , paint , stroke , alpha , stroke ) ; this . value = value ; }
Distance : 5

27
Tree	{ super ( paint ) ; this . value = getExplodePercent ( value ) ; }
Code	{ super ( paint ) ; this . value = getExplodePercent ( value ) ; }
Distance : 11

28
Tree	{ super ( LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX , stroke , paint ) ; this . value = value ; }
Code	{ super ( LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX , stroke , paint ) ; this . value = value ; }
Distance : 6

29
Tree	{ super ( paint ) ; this . value = stroke ; }
Code	{ super ( paint ) ; this . value = stroke ; }
Distance : 9

30
Tree	{ super ( paint , stroke , paint ) ; this . value = value . getFirstChild () ; }
Code	{ super ( paint , stroke , paint ) ; this . value = value . getFirstChild () ; }
Distance : 8

31
Tree	{ super ( paint ) ; this . value = new byte [] { value } ; }
Code	{ super ( paint ) ; this . value = new byte [] { value } ; }
Distance : 13

32
Tree	{ super ( paint ? relativeAccuracy : <= ) ; this . value = value ; }
Code	{ super ( paint ? relativeAccuracy : <= ) ; this . value = value ; }
Distance : 8

33
Tree	{ super ( LocalizedFormats.ROW_INDEX_OUT_OF_RANGE , stroke , paint ) ; this . value = value ; }
Code	{ super ( LocalizedFormats.ROW_INDEX_OUT_OF_RANGE , stroke , paint ) ; this . value = value ; }
Distance : 6

34
Tree	{ super ( paint ? getEndMillis : LanguageMode.NO_TRANSPILE ) ; this . value = value ; }
Code	{ super ( paint ? getEndMillis : LanguageMode.NO_TRANSPILE ) ; this . value = value ; }
Distance : 8

35
Tree	{ super ( paint ? AbstractCompiler : LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ) ; this . value = value ; }
Code	{ super ( paint ? AbstractCompiler : LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ) ; this . value = value ; }
Distance : 8

36
Tree	{ super ( absoluteAccuracy , stroke , paint ) ; this . value = value ; }
Code	{ super ( absoluteAccuracy , stroke , paint ) ; this . value = value ; }
Distance : 6

37
Tree	{ super ( paint ? transpiledFeatures : LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ) ; this . value = value ; }
Code	{ super ( paint ? transpiledFeatures : LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ) ; this . value = value ; }
Distance : 8

38
Tree	{ super ( outlineStroke , stroke , paint ) ; this . value = new double [] { value } ; }
Code	{ super ( outlineStroke , stroke , paint ) ; this . value = new double [] { value } ; }
Distance : 11

39
Tree	{ super ( paint ? absoluteAccuracy : LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED ) ; this . value = value ; }
Code	{ super ( paint ? absoluteAccuracy : LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED ) ; this . value = value ; }
Distance : 8

40
Tree	{ super ( outlineStroke , stroke ) ; this . value = new double [] { value } ; }
Code	{ super ( outlineStroke , stroke ) ; this . value = new double [] { value } ; }
Distance : 12

41
Tree	{ super ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR , stroke , paint ) ; this . value = value ; }
Code	{ super ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR , stroke , paint ) ; this . value = value ; }
Distance : 6

42
Tree	{ super ( paint ? relativeAccuracy : ComposableFunction.COSH ) ; this . value = value ; }
Code	{ super ( paint ? relativeAccuracy : ComposableFunction.COSH ) ; this . value = value ; }
Distance : 8

43
Tree	{ super ( paint ) ; this . value = value . instance () ; }
Code	{ super ( paint ) ; this . value = value . instance () ; }
Distance : 11

44
Tree	{ super ( LocalizedFormats.OUT_OF_BOUND_SIGNIFICANCE_LEVEL , stroke , paint ) ; this . value = value ; }
Code	{ super ( LocalizedFormats.OUT_OF_BOUND_SIGNIFICANCE_LEVEL , stroke , paint ) ; this . value = value ; }
Distance : 6

45
Tree	{ super ( RectangleInsets , stroke , paint ) ; this . value = value ; }
Code	{ super ( RectangleInsets , stroke , paint ) ; this . value = value ; }
Distance : 6

46
Tree	{ super ( inputs.length , stroke , paint ) ; this . value = value ; }
Code	{ super ( inputs.length , stroke , paint ) ; this . value = value ; }
Distance : 6

47
Tree	{ super ( Node.FREE_CALL , stroke , paint ) ; this . value = value ; }
Code	{ super ( Node.FREE_CALL , stroke , paint ) ; this . value = value ; }
Distance : 6

48
Tree	{ super ( sumDifference , stroke , paint ) ; this . value = value ; }
Code	{ super ( sumDifference , stroke , paint ) ; this . value = value ; }
Distance : 6

49
Tree	{ super ( LocalizedFormats.MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION , stroke , paint ) ; this . value = value ; }
Code	{ super ( LocalizedFormats.MINIMAL_STEPSIZE_REACHED_DURING_INTEGRATION , stroke , paint ) ; this . value = value ; }
Distance : 6

50
Tree	{ super ( paint ? stroke : getObjs ) ; this . value = value ; }
Code	{ super ( paint ? stroke : getObjs ) ; this . value = value ; }
Distance : 7

51
Tree	{ super ( outlinePaint ) ; this . value = value ; }
Code	{ super ( outlinePaint ) ; this . value = value ; }
Distance : 8

52
Tree	{ super ( LocalizedFormats.OVERFLOW_IN_FRACTION , stroke , paint ) ; this . value = value ; }
Code	{ super ( LocalizedFormats.OVERFLOW_IN_FRACTION , stroke , paint ) ; this . value = value ; }
Distance : 6

53
Tree	{ super ( paint ? relativeAccuracy : getTypeParameters ) ; this . value = value ; }
Code	{ super ( paint ? relativeAccuracy : getTypeParameters ) ; this . value = value ; }
Distance : 8

54
Tree	{ super ( LocalizedFormats.NULL_FUNCTION , stroke , paint ) ; this . value = value ; }
Code	{ super ( LocalizedFormats.NULL_FUNCTION , stroke , paint ) ; this . value = value ; }
Distance : 6

55
Tree	{ super ( paint , stroke ) ; this . value = value . getOffset () ; }
Code	{ super ( paint , stroke ) ; this . value = value . getOffset () ; }
Distance : 9

56
Tree	{ super ( paint , stroke , paint ) ; this . value = value . isRest () ; }
Code	{ super ( paint , stroke , paint ) ; this . value = value . isRest () ; }
Distance : 8

57
Tree	{ super ( paint , stroke , paint , alpha ) ; this . value = value . getSecondChild () ; }
Code	{ super ( paint , stroke , paint , alpha ) ; this . value = value . getSecondChild () ; }
Distance : 6

58
Tree	{ super ( paint , stroke , paint , alpha ) ; this . value = value . lineSeparator () ; }
Code	{ super ( paint , stroke , paint , alpha ) ; this . value = value . lineSeparator () ; }
Distance : 6

59
Tree	{ super ( paint , stroke ) ; this . value = value . getEndMillis () ; }
Code	{ super ( paint , stroke ) ; this . value = value . getEndMillis () ; }
Distance : 9

60
Tree	{ super ( paint , stroke ) ; this . value = value . fitness () ; }
Code	{ super ( paint , stroke ) ; this . value = value . fitness () ; }
Distance : 9

61
Tree	{ super ( paint ) ; this . value = value ; addResult }
Code	{ super ( paint ) ; this . value = value ; addResult }
Distance : 9

62
Tree	{ super ( paint , stroke ) ; this . value = value . getFirstFirstChild () ; }
Code	{ super ( paint , stroke ) ; this . value = value . getFirstFirstChild () ; }
Distance : 9

63
Tree	{ super ( paint , stroke , paint , alpha ) ; this . value = value . min () ; }
Code	{ super ( paint , stroke , paint , alpha ) ; this . value = value . min () ; }
Distance : 6

64
Tree	{ super ( paint ) ; this . value = value ; cloned.chars }
Code	{ super ( paint ) ; this . value = value ; cloned.chars }
Distance : 9

65
Tree	{ super ( paint , stroke ) ; this . value = value . getAxis () ; }
Code	{ super ( paint , stroke ) ; this . value = value . getAxis () ; }
Distance : 9

66
Tree	{ super ( alpha ) ; this . value = value ; disableTypeCheck }
Code	{ super ( alpha ) ; this . value = value ; disableTypeCheck }
Distance : 9

67
Tree	{ super ( paint , stroke ) ; this . value = value . getConfiguration () ; }
Code	{ super ( paint , stroke ) ; this . value = value . getConfiguration () ; }
Distance : 9

68
Tree	{ super ( paint , stroke ) ; this . value = value . dotProduct () ; }
Code	{ super ( paint , stroke ) ; this . value = value . dotProduct () ; }
Distance : 9

69
Tree	{ super ( paint , stroke , paint , alpha ) ; this . value = value . getAxis () ; }
Code	{ super ( paint , stroke , paint , alpha ) ; this . value = value . getAxis () ; }
Distance : 6

70
Tree	{ super ( paint , stroke ) ; this . value = value . getScopeRoot () ; }
Code	{ super ( paint , stroke ) ; this . value = value . getScopeRoot () ; }
Distance : 9

71
Tree	{ super ( paint ) ; this . value = value ; UnitSphereSampler }
Code	{ super ( paint ) ; this . value = value ; UnitSphereSampler }
Distance : 9

72
Tree	{ super ( paint ) ; this . value = value ; testSameEs6Strict }
Code	{ super ( paint ) ; this . value = value ; testSameEs6Strict }
Distance : 9

73
Tree	{ super ( paint , outlineStroke ) ; }
Code	{ super ( paint , outlineStroke ) ; }
Distance : 12

74
Tree	{ super ( paint , stroke , paint , alpha ) ; this . value = value . E () ; }
Code	{ super ( paint , stroke , paint , alpha ) ; this . value = value . E () ; }
Distance : 6

75
Tree	{ super ( paint , stroke ) ; this . value = value . ofReal () ; }
Code	{ super ( paint , stroke ) ; this . value = value . ofReal () ; }
Distance : 9

76
Tree	{ super ( paint , stroke ) ; this . value = value . hasTypeCheckingRun () ; }
Code	{ super ( paint , stroke ) ; this . value = value . hasTypeCheckingRun () ; }
Distance : 9

77
Tree	{ super ( paint , stroke ) ; this . value = value . E () ; }
Code	{ super ( paint , stroke ) ; this . value = value . E () ; }
Distance : 9

78
Tree	{ super ( outlineStroke ) ; this . value = value ; for }
Code	{ super ( outlineStroke ) ; this . value = value ; for }
Distance : 9

79
Tree	{ super ( outlineStroke ) ; this . value = value ; this }
Code	{ super ( outlineStroke ) ; this . value = value ; this }
Distance : 9

80
Tree	{ super ( paint , stroke ) ; this . value = value . LinearCombination () ; }
Code	{ super ( paint , stroke ) ; this . value = value . LinearCombination () ; }
Distance : 9

81
Tree	{ super ( alpha , stroke , stroke , alpha ) ; this . value = value ; }
Code	{ super ( alpha , stroke , stroke , alpha ) ; this . value = value ; }
Distance : 4

82
Tree	{ super ( paint , stroke ) ; this . value = value . isName () ; }
Code	{ super ( paint , stroke ) ; this . value = value . isName () ; }
Distance : 9

83
Tree	{ super ( paint ) ; this . value = value ; setMinorTickCount }
Code	{ super ( paint ) ; this . value = value ; setMinorTickCount }
Distance : 9

84
Tree	{ super ( paint , stroke , paint , alpha ) ; this . value = new void [] { value } ; }
Code	{ super ( paint , stroke , paint , alpha ) ; this . value = new void [] { value } ; }
Distance : 8

85
Tree	{ super ( paint ) ; this . value = value ; <= }
Code	{ super ( paint ) ; this . value = value ; <= }
Distance : 9

86
Tree	{ super ( paint , stroke , paint ) ; this . value = value . log () ; }
Code	{ super ( paint , stroke , paint ) ; this . value = value . log () ; }
Distance : 8

87
Tree	{ super ( paint , paint ) ; this . value = new double [] { value } ; }
Code	{ super ( paint , paint ) ; this . value = new double [] { value } ; }
Distance : 12

88
Tree	{ super ( value ) ; this . value = value ; private }
Code	{ super ( value ) ; this . value = value ; private }
Distance : 10

89
Tree	{ super ( paint , stroke , paint , alpha ) ; this . value = value . append () ; }
Code	{ super ( paint , stroke , paint , alpha ) ; this . value = value . append () ; }
Distance : 6

90
Tree	{ super ( paint , stroke , paint , alpha ) ; this . alpha = new double [] { value } ; }
Code	{ super ( paint , stroke , paint , alpha ) ; this . alpha = new double [] { value } ; }
Distance : 9

91
Tree	{ super ( paint , stroke , paint ) ; this . value = value . getConfiguration () ; }
Code	{ super ( paint , stroke , paint ) ; this . value = value . getConfiguration () ; }
Distance : 8

92
Tree	{ super ( paint , stroke , paint ) ; this . value = value . getRandomGenerator () ; }
Code	{ super ( paint , stroke , paint ) ; this . value = value . getRandomGenerator () ; }
Distance : 8

93
Tree	{ super ( paint , stroke , paint , alpha ) ; this . value = value . toHashCode () ; }
Code	{ super ( paint , stroke , paint , alpha ) ; this . value = value . toHashCode () ; }
Distance : 6

94
Tree	{ super ( paint ) ; this . value = value ; checkState }
Code	{ super ( paint ) ; this . value = value ; checkState }
Distance : 9

95
Tree	{ super ( paint , stroke ) ; this . value = value . toHashCode () ; }
Code	{ super ( paint , stroke ) ; this . value = value . toHashCode () ; }
Distance : 9

96
Tree	{ super ( alpha , stroke , paint , alpha ) ; this . value = new int [] { value } ; }
Code	{ super ( alpha , stroke , paint , alpha ) ; this . value = new int [] { value } ; }
Distance : 9

97
Tree	{ super ( paint ) ; this . value = value ; Font }
Code	{ super ( paint ) ; this . value = value ; Font }
Distance : 9

98
Tree	{ super ( paint , stroke , paint ) ; this . value = value . start () ; }
Code	{ super ( paint , stroke , paint ) ; this . value = value . start () ; }
Distance : 8

99
Tree	{ super ( paint , stroke ) ; this . value = value . log () ; }
Code	{ super ( paint , stroke ) ; this . value = value . log () ; }
Distance : 9

========================================================================


========================================================================
Example Number: 3
Parent Code is: 
if ( index < NUMBER_CONSTANT ) { return; }
-------------------------------------------------------------------------------
Child code is: 
if ( index < NUMBER_CONSTANT ) { throw new UnknownKeyException ( STRING_CONSTANT + key + STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=index}) (230{val=<}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (500{val=return;}) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=index}) (230{val=<}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=UnknownKeyException})) (214{val=(}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (800{val=key}) (200{val=+}) (45{val=STRING_CONSTANT})) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/18/parent/source_org_jfree_data_DefaultKeyedValues.java
-------------------------------------------------------------------------------
Edit Distance : 11
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	if ( index < NUMBER_CONSTANT ) { return; }
Code	if ( index < NUMBER_CONSTANT ) { return; }
Distance : 11

1
Tree	if ( key > index ) { default: }
Code	if ( key > index ) { default: }
Distance : 14

2
Tree	if ( key != break; ) { return; }
Code	if ( key != break; ) { return; }
Distance : 14

3
Tree	if ( key <= NUMBER_CONSTANT ) { default: }
Code	if ( key <= NUMBER_CONSTANT ) { default: }
Distance : 13

4
Tree	if ( key != continue; ) { return; }
Code	if ( key != continue; ) { return; }
Distance : 14

5
Tree	if ( index != default: ) { break; }
Code	if ( index != default: ) { break; }
Distance : 13

6
Tree	if ( index != break; ) { default: }
Code	if ( index != break; ) { default: }
Distance : 13

7
Tree	if ( index != continue; ) { default: }
Code	if ( index != continue; ) { default: }
Distance : 13

8
Tree	if ( index != default: ) { super(); }
Code	if ( index != default: ) { super(); }
Distance : 13

9
Tree	if ( index != default: ) { continue; }
Code	if ( index != default: ) { continue; }
Distance : 13

10
Tree	if ( key != key ) { null }
Code	if ( key != key ) { null }
Distance : 14

11
Tree	if ( key != return; ) { break; }
Code	if ( key != return; ) { break; }
Distance : 14

12
Tree	if ( key != return; ) { super(); }
Code	if ( key != return; ) { super(); }
Distance : 14

13
Tree	if ( key != return; ) { continue; }
Code	if ( key != return; ) { continue; }
Distance : 14

14
Tree	if ( index != default: ) { null }
Code	if ( index != default: ) { null }
Distance : 13

15
Tree	if ( key > key ) { break; }
Code	if ( key > key ) { break; }
Distance : 14

16
Tree	if ( key != key ) { default: }
Code	if ( key != key ) { default: }
Distance : 14

17
Tree	if ( index != index ) { return; } m
Code	if ( index != index ) { return; } m
Distance : 14

18
Tree	if ( index <= NUMBER_CONSTANT ) { return; } super
Code	if ( index <= NUMBER_CONSTANT ) { return; } super
Distance : 13

19
Tree	if ( index <= NUMBER_CONSTANT ) { return; } !=
Code	if ( index <= NUMBER_CONSTANT ) { return; } !=
Distance : 13

20
Tree	if ( index <= NUMBER_CONSTANT ) { return; } =
Code	if ( index <= NUMBER_CONSTANT ) { return; } =
Distance : 13

21
Tree	if ( index <= NUMBER_CONSTANT ) { return; } }
Code	if ( index <= NUMBER_CONSTANT ) { return; } }
Distance : 12

22
Tree	if ( index <= NUMBER_CONSTANT ) { return; } ()
Code	if ( index <= NUMBER_CONSTANT ) { return; } ()
Distance : 13

23
Tree	if ( index <= NUMBER_CONSTANT ) { return; } {
Code	if ( index <= NUMBER_CONSTANT ) { return; } {
Distance : 13

24
Tree	if ( key != key ) { continue; }
Code	if ( key != key ) { continue; }
Distance : 14

25
Tree	if ( index <= NUMBER_CONSTANT ) { return; } ;
Code	if ( index <= NUMBER_CONSTANT ) { return; } ;
Distance : 12

26
Tree	if ( index <= NUMBER_CONSTANT ) { return; } .
Code	if ( index <= NUMBER_CONSTANT ) { return; } .
Distance : 13

27
Tree	if ( index <= NUMBER_CONSTANT ) { return; } ,
Code	if ( index <= NUMBER_CONSTANT ) { return; } ,
Distance : 13

28
Tree	if ( index != index ) { return; } result
Code	if ( index != index ) { return; } result
Distance : 14

29
Tree	if ( index != index ) { return; } List
Code	if ( index != index ) { return; } List
Distance : 14

30
Tree	if ( index != index ) { return; } Args
Code	if ( index != index ) { return; } Args
Distance : 14

31
Tree	if ( index != index ) { return; } fail
Code	if ( index != index ) { return; } fail
Distance : 14

32
Tree	if ( index <= NUMBER_CONSTANT ) { return; } )
Code	if ( index <= NUMBER_CONSTANT ) { return; } )
Distance : 12

33
Tree	if ( index != index ) { return; } Object
Code	if ( index != index ) { return; } Object
Distance : 14

34
Tree	if ( key != key ) { super(); }
Code	if ( key != key ) { super(); }
Distance : 14

35
Tree	if ( index > key ) { default: }
Code	if ( index > key ) { default: }
Distance : 13

36
Tree	if ( ! index . tolerance ( index , false ) ) { return; }
Code	if ( ! index . tolerance ( index , false ) ) { return; }
Distance : 15

37
Tree	if ( ! index . booleanValue ( index , false ) ) { return; }
Code	if ( ! index . booleanValue ( index , false ) ) { return; }
Distance : 15

38
Tree	if ( ! index . ArrayRealVector ( index , false ) ) { return; }
Code	if ( ! index . ArrayRealVector ( index , false ) ) { return; }
Distance : 15

39
Tree	if ( ! index . bool () ) { return; }
Code	if ( ! index . bool () ) { return; }
Distance : 15

40
Tree	if ( index . annotation ( index , false ) ) { return; }
Code	if ( index . annotation ( index , false ) ) { return; }
Distance : 14

41
Tree	if ( ! index . exp ( index , false ) ) { return; }
Code	if ( ! index . exp ( index , false ) ) { return; }
Distance : 15

42
Tree	if ( ! returnFalse ( index ) ) { return; }
Code	if ( ! returnFalse ( index ) ) { return; }
Distance : 15

43
Tree	if ( index . getBounds2D ( index ) == null ) { return; }
Code	if ( index . getBounds2D ( index ) == null ) { return; }
Distance : 14

44
Tree	if ( index . dataset ( index ) == null ) { return; }
Code	if ( index . dataset ( index ) == null ) { return; }
Distance : 14

45
Tree	if ( ! index . setFunction () ) { return; }
Code	if ( ! index . setFunction () ) { return; }
Distance : 15

46
Tree	if ( index != compiler.functionNames ) { return; }
Code	if ( index != compiler.functionNames ) { return; }
Distance : 13

47
Tree	if ( ! isSquare ( index ) ) { return; }
Code	if ( ! isSquare ( index ) ) { return; }
Distance : 15

48
Tree	if ( ! explicitMode ( index ) ) { return; }
Code	if ( ! explicitMode ( index ) ) { return; }
Distance : 15

49
Tree	if ( index . mapLookup () ) { return; }
Code	if ( index . mapLookup () ) { return; }
Distance : 14

50
Tree	if ( ! index . forward () ) { return; }
Code	if ( ! index . forward () ) { return; }
Distance : 15

51
Tree	if ( ! index . getParentNode () ) { return; }
Code	if ( ! index . getParentNode () ) { return; }
Distance : 15

52
Tree	if ( ! index . isEmptyType () ) { return; }
Code	if ( ! index . isEmptyType () ) { return; }
Distance : 15

53
Tree	if ( key != key ) { break; }
Code	if ( key != key ) { break; }
Distance : 14

54
Tree	if ( key != super(); ) { return; }
Code	if ( key != super(); ) { return; }
Distance : 14

55
Tree	if ( index != continue; ) { null }
Code	if ( index != continue; ) { null }
Distance : 13

56
Tree	if ( index != break; ) { null }
Code	if ( index != break; ) { null }
Distance : 13

57
Tree	if ( key != index ) { default: }
Code	if ( key != index ) { default: }
Distance : 14

58
Tree	if ( key != null ) { default: }
Code	if ( key != null ) { default: }
Distance : 14

59
Tree	if ( index != super(); ) { default: }
Code	if ( index != super(); ) { default: }
Distance : 13

60
Tree	if ( key > index ) { null }
Code	if ( key > index ) { null }
Distance : 14

61
Tree	if ( ! index . isExprResult ( index , false ) ) { return; }
Code	if ( ! index . isExprResult ( index , false ) ) { return; }
Distance : 15

62
Tree	if ( index . abs ( index ) ) { return; }
Code	if ( index . abs ( index ) ) { return; }
Distance : 14

63
Tree	if ( index . size ( index , false ) ) { return; }
Code	if ( index . size ( index , false ) ) { return; }
Distance : 14

64
Tree	if ( index != isEnhancedFor ) { return; }
Code	if ( index != isEnhancedFor ) { return; }
Distance : 13

65
Tree	if ( index != definitionsGatherer.definitions ) { return; }
Code	if ( index != definitionsGatherer.definitions ) { return; }
Distance : 13

66
Tree	if ( ! index . center ( index , false ) ) { return; }
Code	if ( ! index . center ( index , false ) ) { return; }
Distance : 15

67
Tree	if ( key <= NUMBER_CONSTANT ) { null }
Code	if ( key <= NUMBER_CONSTANT ) { null }
Distance : 13

68
Tree	if ( index != index ) { return; } mock
Code	if ( index != index ) { return; } mock
Distance : 14

69
Tree	if ( index <= NUMBER_CONSTANT ) { return; } return
Code	if ( index <= NUMBER_CONSTANT ) { return; } return
Distance : 13

70
Tree	if ( index != index ) { return; } value
Code	if ( index != index ) { return; } value
Distance : 14

71
Tree	if ( index <= NUMBER_CONSTANT ) { return; } !
Code	if ( index <= NUMBER_CONSTANT ) { return; } !
Distance : 13

72
Tree	if ( index != index ) { return; } }
Code	if ( index != index ) { return; } }
Distance : 13

73
Tree	if ( index != index ) { return; } ()
Code	if ( index != index ) { return; } ()
Distance : 14

74
Tree	if ( index != index ) { return; } {
Code	if ( index != index ) { return; } {
Distance : 14

75
Tree	if ( index != index ) { return; } e
Code	if ( index != index ) { return; } e
Distance : 14

76
Tree	if ( index != index ) { return; } <blank>
Code	if ( index != index ) { return; } <blank>
Distance : 14

77
Tree	if ( index != index ) { return; } ;
Code	if ( index != index ) { return; } ;
Distance : 13

78
Tree	if ( index != index ) { return; } )
Code	if ( index != index ) { return; } )
Distance : 13

79
Tree	if ( index != index ) { return; } .
Code	if ( index != index ) { return; } .
Distance : 14

80
Tree	if ( index != index ) { return; } ,
Code	if ( index != index ) { return; } ,
Distance : 14

81
Tree	if ( index != index ) { return; } compiler
Code	if ( index != index ) { return; } compiler
Distance : 14

82
Tree	if ( index != index ) { return; } String
Code	if ( index != index ) { return; } String
Distance : 14

83
Tree	if ( index != index ) { return; } n
Code	if ( index != index ) { return; } n
Distance : 14

84
Tree	if ( index != index ) { return; } new
Code	if ( index != index ) { return; } new
Distance : 14

85
Tree	if ( index != index ) { return; } throw
Code	if ( index != index ) { return; } throw
Distance : 14

86
Tree	if ( index != index ) { return; } catch
Code	if ( index != index ) { return; } catch
Distance : 14

87
Tree	if ( index != index ) { return; } void
Code	if ( index != index ) { return; } void
Distance : 14

88
Tree	if ( index <= NUMBER_CONSTANT ) { return; } e
Code	if ( index <= NUMBER_CONSTANT ) { return; } e
Distance : 13

89
Tree	if ( index <= NUMBER_CONSTANT ) { return; } String
Code	if ( index <= NUMBER_CONSTANT ) { return; } String
Distance : 13

90
Tree	if ( index <= NUMBER_CONSTANT ) { return; } compiler
Code	if ( index <= NUMBER_CONSTANT ) { return; } compiler
Distance : 13

91
Tree	if ( index <= NUMBER_CONSTANT ) { return; } -
Code	if ( index <= NUMBER_CONSTANT ) { return; } -
Distance : 13

92
Tree	if ( index <= NUMBER_CONSTANT ) { return; } Preconditions
Code	if ( index <= NUMBER_CONSTANT ) { return; } Preconditions
Distance : 13

93
Tree	if ( index <= NUMBER_CONSTANT ) { return; } [
Code	if ( index <= NUMBER_CONSTANT ) { return; } [
Distance : 13

94
Tree	if ( index <= NUMBER_CONSTANT ) { return; } []
Code	if ( index <= NUMBER_CONSTANT ) { return; } []
Distance : 13

95
Tree	if ( index <= NUMBER_CONSTANT ) { return; } parent
Code	if ( index <= NUMBER_CONSTANT ) { return; } parent
Distance : 13

96
Tree	if ( index <= NUMBER_CONSTANT ) { return; } testSame
Code	if ( index <= NUMBER_CONSTANT ) { return; } testSame
Distance : 13

97
Tree	if ( index <= NUMBER_CONSTANT ) { return; } assertEquals
Code	if ( index <= NUMBER_CONSTANT ) { return; } assertEquals
Distance : 13

98
Tree	if ( index != index ) { return; } STRING_CONSTANT
Code	if ( index != index ) { return; } STRING_CONSTANT
Distance : 13

99
Tree	if ( index != index ) { return; } NUMBER_CONSTANT
Code	if ( index != index ) { return; } NUMBER_CONSTANT
Distance : 14

========================================================================


========================================================================
Example Number: 4
Parent Code is: 
if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( categoryKeys.length != getCategoryCount () ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (40{val=categoryKeys.length}) (242{val=!=}) (22 (2 (22 (315{val=this}) (235{val=.}) (801{val=startData})) (221{val=[}) (34{val=NUMBER_CONSTANT}) (222{val=]})) (235{val=.}) (800{val=length}))) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=IllegalArgumentException})) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (40{val=categoryKeys.length}) (242{val=!=}) (32 (802{val=getCategoryCount}) (216{val=()}))) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=IllegalArgumentException})) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/16/parent/source_org_jfree_data_category_DefaultIntervalCategoryDataset.java
-------------------------------------------------------------------------------
Edit Distance : 8
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } class
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } class
Distance : 24

1
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } throw
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } throw
Distance : 19

2
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } e
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } e
Distance : 19

3
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } +
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } +
Distance : 19

4
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } n
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } n
Distance : 19

5
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } assertEquals
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } assertEquals
Distance : 19

6
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } []
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } []
Distance : 19

7
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } <
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } <
Distance : 19

8
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } ==
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } ==
Distance : 19

9
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } str
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } str
Distance : 19

10
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } x
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } x
Distance : 19

11
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } LINE_JOINER
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } LINE_JOINER
Distance : 19

12
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } parent
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } parent
Distance : 19

13
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } ArrayList
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } ArrayList
Distance : 19

14
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } createIllegalArgumentException
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } createIllegalArgumentException
Distance : 19

15
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } testSame
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } testSame
Distance : 19

16
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } expected
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } expected
Distance : 19

17
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } IllegalArgumentException
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } IllegalArgumentException
Distance : 19

18
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } invocation
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } invocation
Distance : 19

19
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } FastMath
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } FastMath
Distance : 19

20
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } t
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } t
Distance : 19

21
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } reportCodeChange
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } reportCodeChange
Distance : 19

22
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } field
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } field
Distance : 19

23
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } boolean
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } boolean
Distance : 19

24
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } fireChangeEvent
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } fireChangeEvent
Distance : 19

25
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } serialised
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } serialised
Distance : 19

26
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } compiler
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } compiler
Distance : 19

27
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } type
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } type
Distance : 19

28
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } void
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } void
Distance : 19

29
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } name
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } name
Distance : 19

30
Tree	if ( length * length . [ ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; } <>
Code	if ( length * length . [ ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; } <>
Distance : 13

31
Tree	if ( length * length . ] ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; } try
Code	if ( length * length . ] ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; } try
Distance : 13

32
Tree	if ( length * length . startData ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; } fail
Code	if ( length * length . startData ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; } fail
Distance : 13

33
Tree	if ( length * length . [ ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; } paint
Code	if ( length * length . [ ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; } paint
Distance : 13

34
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } boolean
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } boolean
Distance : 24

35
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } field
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } field
Distance : 24

36
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } reportCodeChange
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } reportCodeChange
Distance : 24

37
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } @
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } @
Distance : 19

38
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } test
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } test
Distance : 19

39
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } int
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } int
Distance : 19

40
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } Object
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } Object
Distance : 19

41
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } mode
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } mode
Distance : 19

42
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } ]
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } ]
Distance : 19

43
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } true
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } true
Distance : 19

44
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } Preconditions
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } Preconditions
Distance : 19

45
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } &&
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } &&
Distance : 19

46
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } -
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } -
Distance : 19

47
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } [
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } [
Distance : 19

48
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } ParamChecks
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } ParamChecks
Distance : 19

49
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } Override
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } Override
Distance : 19

50
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } MathRuntimeException
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } MathRuntimeException
Distance : 19

51
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } mock
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } mock
Distance : 19

52
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } f
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } f
Distance : 19

53
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } class
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } class
Distance : 19

54
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } array
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } array
Distance : 19

55
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } T
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } T
Distance : 19

56
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } getInstance
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } getInstance
Distance : 19

57
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } double
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } double
Distance : 19

58
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } false
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } false
Distance : 19

59
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } IllegalArgumentException
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } IllegalArgumentException
Distance : 24

60
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } invocation
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } invocation
Distance : 24

61
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } FastMath
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } FastMath
Distance : 24

62
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } data
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } data
Distance : 24

63
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } try
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } try
Distance : 19

64
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } return
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } return
Distance : 19

65
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } i
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } i
Distance : 19

66
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } this
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } this
Distance : 19

67
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } if
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } if
Distance : 19

68
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } public
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } public
Distance : 19

69
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } String
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } String
Distance : 19

70
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } }
Distance : 19

71
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } .
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } .
Distance : 19

72
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } (
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } (
Distance : 19

73
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } ;
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } ;
Distance : 19

74
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } <blank>
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } <blank>
Distance : 19

75
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } throw
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } throw
Distance : 19

76
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } <s>
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } <s>
Distance : 19

77
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } )
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } )
Distance : 19

78
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } STRING_CONSTANT
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } STRING_CONSTANT
Distance : 19

79
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } {
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } {
Distance : 19

80
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } ,
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } ,
Distance : 19

81
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } ()
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } ()
Distance : 19

82
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } new
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } new
Distance : 19

83
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } =
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } =
Distance : 19

84
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } expected
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } expected
Distance : 24

85
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } testSame
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } testSame
Distance : 24

86
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } createIllegalArgumentException
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } createIllegalArgumentException
Distance : 24

87
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } ArrayList
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } ArrayList
Distance : 24

88
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } checkState
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } checkState
Distance : 19

89
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } super
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } super
Distance : 19

90
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } !
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } !
Distance : 19

91
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } nullNotPermitted
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } nullNotPermitted
Distance : 19

92
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } catch
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } catch
Distance : 19

93
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } final
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } final
Distance : 19

94
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } t
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } t
Distance : 24

95
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } checkArgument
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } checkArgument
Distance : 24

96
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } add
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } add
Distance : 24

97
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } paint
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } paint
Distance : 24

98
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } m
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } m
Distance : 24

99
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } join
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } join
Distance : 24

========================================================================


========================================================================
Example Number: 5
Parent Code is: 
this . dataset = dataset ;
-------------------------------------------------------------------------------
Child code is: 
setDataset ( dataset ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=dataset})) (204{val==}) (800{val=dataset})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (32 (802{val=setDataset}) (214{val=(}) (800{val=dataset}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/12/parent/source_org_jfree_chart_plot_MultiplePiePlot.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	dataset = dataset ; paint
Code	dataset = dataset ; paint
Distance : 4

1
Tree	this . dataset = setDataset ( dataset ) ; type
Code	this . dataset = setDataset ( dataset ) ; type
Distance : 5

2
Tree	this . dataset = setDataset ( dataset ) ; serialised
Code	this . dataset = setDataset ( dataset ) ; serialised
Distance : 5

3
Tree	this . dataset = setDataset ( dataset ) ; fireChangeEvent
Code	this . dataset = setDataset ( dataset ) ; fireChangeEvent
Distance : 5

4
Tree	this . dataset = setDataset ( dataset ) ; boolean
Code	this . dataset = setDataset ( dataset ) ; boolean
Distance : 5

5
Tree	this . dataset = setDataset ( dataset ) ; field
Code	this . dataset = setDataset ( dataset ) ; field
Distance : 5

6
Tree	this . dataset = setDataset ( dataset ) ; reportCodeChange
Code	this . dataset = setDataset ( dataset ) ; reportCodeChange
Distance : 5

7
Tree	this . dataset = setDataset ( dataset ) ; t
Code	this . dataset = setDataset ( dataset ) ; t
Distance : 5

8
Tree	this . dataset = setDataset ( dataset ) ; NUMBER_CONSTANT
Code	this . dataset = setDataset ( dataset ) ; NUMBER_CONSTANT
Distance : 5

9
Tree	this . dataset = setDataset ( dataset ) ; null
Code	this . dataset = setDataset ( dataset ) ; null
Distance : 5

10
Tree	this . dataset = setDataset ( dataset ) ; getInstance
Code	this . dataset = setDataset ( dataset ) ; getInstance
Distance : 5

11
Tree	this . dataset = setDataset ( dataset ) ; {}
Code	this . dataset = setDataset ( dataset ) ; {}
Distance : 5

12
Tree	dataset = dataset ; this
Code	dataset = dataset ; this
Distance : 4

13
Tree	dataset = dataset ; >
Code	dataset = dataset ; >
Distance : 4

14
Tree	dataset = dataset ; if
Code	dataset = dataset ; if
Distance : 4

15
Tree	dataset = dataset ; public
Code	dataset = dataset ; public
Distance : 4

16
Tree	dataset = dataset ; String
Code	dataset = dataset ; String
Distance : 4

17
Tree	dataset = dataset ; }
Code	dataset = dataset ; }
Distance : 4

18
Tree	dataset = dataset ; .
Code	dataset = dataset ; .
Distance : 4

19
Tree	dataset = dataset ; (
Code	dataset = dataset ; (
Distance : 4

20
Tree	dataset = dataset ; ;
Code	dataset = dataset ; ;
Distance : 3

21
Tree	dataset = dataset ; final
Code	dataset = dataset ; final
Distance : 4

22
Tree	this . dataset = setDataset ( dataset ) ; double
Code	this . dataset = setDataset ( dataset ) ; double
Distance : 5

23
Tree	this . dataset = setDataset ( dataset ) ; false
Code	this . dataset = setDataset ( dataset ) ; false
Distance : 5

24
Tree	this . dataset = setDataset ( dataset ) ; checkState
Code	this . dataset = setDataset ( dataset ) ; checkState
Distance : 5

25
Tree	this . dataset = setDataset ( dataset ) ; try
Code	this . dataset = setDataset ( dataset ) ; try
Distance : 5

26
Tree	this . dataset = setDataset ( dataset ) ; :
Code	this . dataset = setDataset ( dataset ) ; :
Distance : 5

27
Tree	this . dataset = setDataset ( dataset ) ; Args
Code	this . dataset = setDataset ( dataset ) ; Args
Distance : 5

28
Tree	this . dataset = setDataset ( dataset ) ; <>
Code	this . dataset = setDataset ( dataset ) ; <>
Distance : 5

29
Tree	this . dataset = setDataset ( dataset ) ; List
Code	this . dataset = setDataset ( dataset ) ; List
Distance : 5

30
Tree	this . dataset = setDataset ( dataset ) ; fail
Code	this . dataset = setDataset ( dataset ) ; fail
Distance : 5

31
Tree	this . dataset = setDataset ( dataset ) ; NodeTraversal
Code	this . dataset = setDataset ( dataset ) ; NodeTraversal
Distance : 5

32
Tree	this . dataset = setDataset ( dataset ) ; join
Code	this . dataset = setDataset ( dataset ) ; join
Distance : 5

33
Tree	this . dataset = setDataset ( dataset ) ; m
Code	this . dataset = setDataset ( dataset ) ; m
Distance : 5

34
Tree	this . dataset = setDataset ( dataset ) ; expected
Code	this . dataset = setDataset ( dataset ) ; expected
Distance : 5

35
Tree	this . dataset = setDataset ( dataset ) ; invocation
Code	this . dataset = setDataset ( dataset ) ; invocation
Distance : 5

36
Tree	this . dataset = setDataset ( dataset ) ; int
Code	this . dataset = setDataset ( dataset ) ; int
Distance : 5

37
Tree	this . dataset = setDataset ( dataset ) ; FastMath
Code	this . dataset = setDataset ( dataset ) ; FastMath
Distance : 5

38
Tree	this . dataset = setDataset ( dataset ) ; test
Code	this . dataset = setDataset ( dataset ) ; test
Distance : 5

39
Tree	this . dataset = setDataset ( dataset ) ; assertEquals
Code	this . dataset = setDataset ( dataset ) ; assertEquals
Distance : 5

40
Tree	this . dataset = setDataset ( dataset ) ; @
Code	this . dataset = setDataset ( dataset ) ; @
Distance : 5

41
Tree	this . dataset = setDataset ( dataset ) ; []
Code	this . dataset = setDataset ( dataset ) ; []
Distance : 5

42
Tree	this . dataset = setDataset ( dataset ) ; ==
Code	this . dataset = setDataset ( dataset ) ; ==
Distance : 5

43
Tree	this . dataset = setDataset ( dataset ) ; nullNotPermitted
Code	this . dataset = setDataset ( dataset ) ; nullNotPermitted
Distance : 5

44
Tree	this . dataset = setDataset ( dataset ) ; !
Code	this . dataset = setDataset ( dataset ) ; !
Distance : 5

45
Tree	this . dataset = setDataset ( dataset ) ; super
Code	this . dataset = setDataset ( dataset ) ; super
Distance : 5

46
Tree	dataset = dataset ; <blank>
Code	dataset = dataset ; <blank>
Distance : 4

47
Tree	this . dataset = setDataset ( dataset ) ; result
Code	this . dataset = setDataset ( dataset ) ; result
Distance : 5

48
Tree	dataset = dataset ; this
Code	dataset = dataset ; this
Distance : 4

49
Tree	dataset = dataset ; )
Code	dataset = dataset ; )
Distance : 4

50
Tree	dataset = dataset ; throw
Code	dataset = dataset ; throw
Distance : 4

51
Tree	dataset = dataset ; e
Code	dataset = dataset ; e
Distance : 4

52
Tree	dataset = dataset ; +
Code	dataset = dataset ; +
Distance : 4

53
Tree	dataset = dataset ; n
Code	dataset = dataset ; n
Distance : 4

54
Tree	dataset = dataset ; @
Code	dataset = dataset ; @
Distance : 4

55
Tree	dataset = dataset ; ==
Code	dataset = dataset ; ==
Distance : 4

56
Tree	this . dataset = setDataset ( dataset ) ; value
Code	this . dataset = setDataset ( dataset ) ; value
Distance : 5

57
Tree	dataset = dataset ; LINE_JOINER
Code	dataset = dataset ; LINE_JOINER
Distance : 4

58
Tree	dataset = dataset ; str
Code	dataset = dataset ; str
Distance : 4

59
Tree	dataset = dataset ; compiler
Code	dataset = dataset ; compiler
Distance : 4

60
Tree	dataset = dataset ; assertThat
Code	dataset = dataset ; assertThat
Distance : 4

61
Tree	dataset = dataset ; result
Code	dataset = dataset ; result
Distance : 4

62
Tree	dataset = dataset ; try
Code	dataset = dataset ; try
Distance : 4

63
Tree	dataset = dataset ; :
Code	dataset = dataset ; :
Distance : 4

64
Tree	dataset = dataset ; Args
Code	dataset = dataset ; Args
Distance : 4

65
Tree	dataset = dataset ; <>
Code	dataset = dataset ; <>
Distance : 4

66
Tree	dataset = dataset ; List
Code	dataset = dataset ; List
Distance : 4

67
Tree	dataset = dataset ; fail
Code	dataset = dataset ; fail
Distance : 4

68
Tree	dataset = dataset ; NodeTraversal
Code	dataset = dataset ; NodeTraversal
Distance : 4

69
Tree	dataset = dataset ; join
Code	dataset = dataset ; join
Distance : 4

70
Tree	dataset = dataset ; *
Code	dataset = dataset ; *
Distance : 4

71
Tree	dataset = dataset ; void
Code	dataset = dataset ; void
Distance : 4

72
Tree	dataset = dataset ; T
Code	dataset = dataset ; T
Distance : 4

73
Tree	dataset = dataset ; name
Code	dataset = dataset ; name
Distance : 4

74
Tree	dataset = dataset ; STRING_CONSTANT
Code	dataset = dataset ; STRING_CONSTANT
Distance : 4

75
Tree	dataset = dataset ; mode
Code	dataset = dataset ; mode
Distance : 4

76
Tree	dataset = dataset ; Object
Code	dataset = dataset ; Object
Distance : 4

77
Tree	dataset = dataset ; int
Code	dataset = dataset ; int
Distance : 4

78
Tree	dataset = dataset ; test
Code	dataset = dataset ; test
Distance : 4

79
Tree	dataset = dataset ; assertEquals
Code	dataset = dataset ; assertEquals
Distance : 4

80
Tree	dataset = dataset ; return
Code	dataset = dataset ; return
Distance : 4

81
Tree	dataset = dataset ; <
Code	dataset = dataset ; <
Distance : 4

82
Tree	dataset = dataset ; []
Code	dataset = dataset ; []
Distance : 4

83
Tree	dataset = dataset ; catch
Code	dataset = dataset ; catch
Distance : 4

84
Tree	dataset = dataset ; Preconditions
Code	dataset = dataset ; Preconditions
Distance : 4

85
Tree	dataset = dataset ; &&
Code	dataset = dataset ; &&
Distance : 4

86
Tree	dataset = dataset ; -
Code	dataset = dataset ; -
Distance : 4

87
Tree	dataset = dataset ; [
Code	dataset = dataset ; [
Distance : 4

88
Tree	dataset = dataset ; ParamChecks
Code	dataset = dataset ; ParamChecks
Distance : 4

89
Tree	dataset = dataset ; Override
Code	dataset = dataset ; Override
Distance : 4

90
Tree	dataset = dataset ; MathRuntimeException
Code	dataset = dataset ; MathRuntimeException
Distance : 4

91
Tree	dataset = dataset ; mock
Code	dataset = dataset ; mock
Distance : 4

92
Tree	dataset = dataset ; f
Code	dataset = dataset ; f
Distance : 4

93
Tree	dataset = dataset ; class
Code	dataset = dataset ; class
Distance : 4

94
Tree	dataset = dataset ; array
Code	dataset = dataset ; array
Distance : 4

95
Tree	dataset = dataset ; <s>
Code	dataset = dataset ; <s>
Distance : 4

96
Tree	dataset = dataset ;
Code	dataset = dataset ;
Distance : 3

97
Tree	this . dataset = setDataset ( dataset ) ; *
Code	this . dataset = setDataset ( dataset ) ; *
Distance : 5

98
Tree	this . dataset = setDataset ( dataset ) ; str
Code	this . dataset = setDataset ( dataset ) ; str
Distance : 5

99
Tree	dataset = NUMBER_CONSTANT / dataset ; expected
Code	dataset = NUMBER_CONSTANT / dataset ; expected
Distance : 6

========================================================================


========================================================================
Example Number: 6
Parent Code is: 
PathIterator iterator2 = p1 . getPathIterator ( null ) ;
-------------------------------------------------------------------------------
Child code is: 
PathIterator iterator2 = p2 . getPathIterator ( null ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=PathIterator})) (59 (800{val=iterator2}) (204{val==}) (32 (800{val=p1}) (235{val=.}) (802{val=getPathIterator}) (214{val=(}) (500{val=null}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=PathIterator})) (59 (800{val=iterator2}) (204{val==}) (32 (800{val=p2}) (235{val=.}) (802{val=getPathIterator}) (214{val=(}) (500{val=null}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/11/parent/source_org_jfree_chart_util_ShapeUtilities.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Distance : 1

1
Tree	PathIterator p2 = p2 . getPathIterator ( ( p2 ) break; ) ;
Code	PathIterator p2 = p2 . getPathIterator ( ( p2 ) break; ) ;
Distance : 5

2
Tree	PathIterator p2 = p2 . getPathIterator ( null , default: ) ;
Code	PathIterator p2 = p2 . getPathIterator ( null , default: ) ;
Distance : 3

3
Tree	PathIterator p1 = p1 . getPathIterator ( null , this . p1 ) ;
Code	PathIterator p1 = p1 . getPathIterator ( null , this . p1 ) ;
Distance : 6

4
Tree	PathIterator p2 = p1 . getPathIterator ( ( null ) break; ) ;
Code	PathIterator p2 = p1 . getPathIterator ( ( null ) break; ) ;
Distance : 5

5
Tree	PathIterator p2 = p2 . getPathIterator ( ( null [] ) return; ) ;
Code	PathIterator p2 = p2 . getPathIterator ( ( null [] ) return; ) ;
Distance : 5

6
Tree	PathIterator p2 = p1 . getPathIterator ( ( null ) null ) ;
Code	PathIterator p2 = p1 . getPathIterator ( ( null ) null ) ;
Distance : 5

7
Tree	PathIterator iterator2 = p1 . getPathIterator ( super(); , null ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( super(); , null ) ;
Distance : 3

8
Tree	PathIterator p1 = p1 . getPathIterator ( null ) ;
Code	PathIterator p1 = p1 . getPathIterator ( null ) ;
Distance : 2

9
Tree	PathIterator iterator2 = getPathIterator ( ( null [] ) break; ) ;
Code	PathIterator iterator2 = getPathIterator ( ( null [] ) break; ) ;
Distance : 6

10
Tree	PathIterator p2 = p1 . getPathIterator ( ( null [] ) default: ) ;
Code	PathIterator p2 = p1 . getPathIterator ( ( null [] ) default: ) ;
Distance : 6

11
Tree	PathIterator iterator2 = p1 . getPathIterator ( ( null ) default: ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( ( null ) default: ) ;
Distance : 4

12
Tree	PathIterator p1 = p2 . getPathIterator ( p1 , this . p2 ) ;
Code	PathIterator p1 = p2 . getPathIterator ( p1 , this . p2 ) ;
Distance : 6

13
Tree	PathIterator p1 = p2 . getPathIterator ( ( null [] ) continue; ) ;
Code	PathIterator p1 = p2 . getPathIterator ( ( null [] ) continue; ) ;
Distance : 5

14
Tree	protected PathIterator p2 = p1 . getPathIterator ( ( null [] ) null ) ;
Code	protected PathIterator p2 = p1 . getPathIterator ( ( null [] ) null ) ;
Distance : 7

15
Tree	PathIterator p1 = p2 . getPathIterator ( ( p2 ) break; ) ;
Code	PathIterator p1 = p2 . getPathIterator ( ( p2 ) break; ) ;
Distance : 5

16
Tree	PathIterator iterator2 = p2 . getPathIterator ( ( null ) break; ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( ( null ) break; ) ;
Distance : 3

17
Tree	PathIterator p1 = p2 . getPathIterator ( null , default: ) ;
Code	PathIterator p1 = p2 . getPathIterator ( null , default: ) ;
Distance : 3

18
Tree	PathIterator p1 = p1 . getPathIterator ( ( null ) break; ) ;
Code	PathIterator p1 = p1 . getPathIterator ( ( null ) break; ) ;
Distance : 5

19
Tree	synchronized PathIterator p2 = p2 . getPathIterator ( ( null [] ) null ) ;
Code	synchronized PathIterator p2 = p2 . getPathIterator ( ( null [] ) null ) ;
Distance : 6

20
Tree	PathIterator p2 = p1 . getPathIterator ( null . class ) ;
Code	PathIterator p2 = p1 . getPathIterator ( null . class ) ;
Distance : 4

21
Tree	protected PathIterator iterator2 = p2 . getPathIterator ( ( null [] ) null ) ;
Code	protected PathIterator iterator2 = p2 . getPathIterator ( ( null [] ) null ) ;
Distance : 5

22
Tree	final PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) super(); ) ;
Code	final PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) super(); ) ;
Distance : 6

23
Tree	PathIterator p1 = p2 . getPathIterator ( null . getPathIterator ( null ) ) ;
Code	PathIterator p1 = p2 . getPathIterator ( null . getPathIterator ( null ) ) ;
Distance : 6

24
Tree	PathIterator p2 = p2 . getPathIterator ( default: , null ) ;
Code	PathIterator p2 = p2 . getPathIterator ( default: , null ) ;
Distance : 3

25
Tree	PathIterator p1 = p1 . getPathIterator ( ( p2 ) default: ) ;
Code	PathIterator p1 = p1 . getPathIterator ( ( p2 ) default: ) ;
Distance : 6

26
Tree	PathIterator iterator2 = p2 . getPathIterator ( null , this . p1 ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( null , this . p1 ) ;
Distance : 4

27
Tree	PathIterator p1 = p2 . getPathIterator ( p2 , this . getPathIterator ) ;
Code	PathIterator p1 = p2 . getPathIterator ( p2 , this . getPathIterator ) ;
Distance : 6

28
Tree	PathIterator p1 = p1 . getPathIterator ( p2 , this . p2 ) ;
Code	PathIterator p1 = p1 . getPathIterator ( p2 , this . p2 ) ;
Distance : 7

29
Tree	PathIterator p1 = p2 . getPathIterator ( ( p2 ) return; ) ;
Code	PathIterator p1 = p2 . getPathIterator ( ( p2 ) return; ) ;
Distance : 5

30
Tree	PathIterator p1 = p2 . getPathIterator ( break; , null ) ;
Code	PathIterator p1 = p2 . getPathIterator ( break; , null ) ;
Distance : 3

31
Tree	PathIterator iterator2 = p2 . getPathIterator ( ( null ) return; ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( ( null ) return; ) ;
Distance : 3

32
Tree	PathIterator p2 = p1 . getPathIterator ( ( p2 ) default: ) ;
Code	PathIterator p2 = p1 . getPathIterator ( ( p2 ) default: ) ;
Distance : 6

33
Tree	PathIterator p1 = p1 . getPathIterator ( ( null ) return; ) ;
Code	PathIterator p1 = p1 . getPathIterator ( ( null ) return; ) ;
Distance : 5

34
Tree	PathIterator iterator2 = p1 . getPathIterator ( return; ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( return; ) ;
Distance : 2

35
Tree	PathIterator iterator2 = getPathIterator ( ( null [] ) continue; ) ;
Code	PathIterator iterator2 = getPathIterator ( ( null [] ) continue; ) ;
Distance : 6

36
Tree	PathIterator p2 = p1 . getPathIterator ( null , this . p1 ) ;
Code	PathIterator p2 = p1 . getPathIterator ( null , this . p1 ) ;
Distance : 6

37
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 . getPathIterator ( super(); ) ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 . getPathIterator ( super(); ) ) ;
Distance : 7

38
Tree	PathIterator p1 = p2 . getPathIterator ( return; , null ) ;
Code	PathIterator p1 = p2 . getPathIterator ( return; , null ) ;
Distance : 3

39
Tree	PathIterator p2 = p1 . getPathIterator ( null ) ;
Code	PathIterator p2 = p1 . getPathIterator ( null ) ;
Distance : 2

40
Tree	PathIterator iterator2 = getPathIterator ( ( null [] ) return; ) ;
Code	PathIterator iterator2 = getPathIterator ( ( null [] ) return; ) ;
Distance : 6

41
Tree	abstract PathIterator p1 = p2 . getPathIterator ( ( null [] ) null ) ;
Code	abstract PathIterator p1 = p2 . getPathIterator ( ( null [] ) null ) ;
Distance : 6

42
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 , p2 . getPathIterator ( null ) ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 , p2 . getPathIterator ( null ) ) ;
Distance : 7

43
Tree	PathIterator p1 = p2 . getPathIterator ( ( null [] ) super(); ) ;
Code	PathIterator p1 = p2 . getPathIterator ( ( null [] ) super(); ) ;
Distance : 5

44
Tree	PathIterator p1 = p2 . getPathIterator ( ( p1 ) break; ) ;
Code	PathIterator p1 = p2 . getPathIterator ( ( p1 ) break; ) ;
Distance : 5

45
Tree	PathIterator p2 = p2 . getPathIterator ( p1 , this . p2 ) ;
Code	PathIterator p2 = p2 . getPathIterator ( p1 , this . p2 ) ;
Distance : 6

46
Tree	PathIterator iterator2 = p2 . getPathIterator ( ( p2 ) default: ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( ( p2 ) default: ) ;
Distance : 4

47
Tree	PathIterator p2 = p2 . getPathIterator ( null . getPathIterator ( null ) ) ;
Code	PathIterator p2 = p2 . getPathIterator ( null . getPathIterator ( null ) ) ;
Distance : 6

48
Tree	PathIterator p2 = p2 . getPathIterator ( ( null [] ) continue; ) ;
Code	PathIterator p2 = p2 . getPathIterator ( ( null [] ) continue; ) ;
Distance : 5

49
Tree	static PathIterator p1 = p1 . getPathIterator ( ( null [] ) null ) ;
Code	static PathIterator p1 = p1 . getPathIterator ( ( null [] ) null ) ;
Distance : 7

50
Tree	PathIterator p1 = p1 . getPathIterator ( ( null ) continue; ) ;
Code	PathIterator p1 = p1 . getPathIterator ( ( null ) continue; ) ;
Distance : 5

51
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 . getPathIterator ( null ) ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 . getPathIterator ( null ) ) ;
Distance : 6

52
Tree	PathIterator p2 = p1 . getPathIterator ( continue; ) ;
Code	PathIterator p2 = p1 . getPathIterator ( continue; ) ;
Distance : 3

53
Tree	PathIterator p2 = getPathIterator ( ( null [] ) super(); ) ;
Code	PathIterator p2 = getPathIterator ( ( null [] ) super(); ) ;
Distance : 7

54
Tree	abstract PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) super(); ) ;
Code	abstract PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) super(); ) ;
Distance : 6

55
Tree	PathIterator iterator2 = p2 . getPathIterator ( p1 , iterator2 . getPathIterator ( null ) ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( p1 , iterator2 . getPathIterator ( null ) ) ;
Distance : 7

56
Tree	PathIterator p1 = p1 . getPathIterator ( p1 , iterator2 . getPathIterator ( null ) ) ;
Code	PathIterator p1 = p1 . getPathIterator ( p1 , iterator2 . getPathIterator ( null ) ) ;
Distance : 9

57
Tree	private PathIterator p1 = p2 . getPathIterator ( ( null [] ) null ) ;
Code	private PathIterator p1 = p2 . getPathIterator ( ( null [] ) null ) ;
Distance : 6

58
Tree	PathIterator p2 = p1 . getPathIterator ( break; ) ;
Code	PathIterator p2 = p1 . getPathIterator ( break; ) ;
Distance : 3

59
Tree	PathIterator p2 = p2 . getPathIterator ( p2 , this . p2 ) ;
Code	PathIterator p2 = p2 . getPathIterator ( p2 , this . p2 ) ;
Distance : 6

60
Tree	PathIterator iterator2 = p1 . getPathIterator ( p2 , p2 . getPathIterator ( null ) ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p2 , p2 . getPathIterator ( null ) ) ;
Distance : 7

61
Tree	PathIterator p2 = getPathIterator ( ( null [] ) continue; ) ;
Code	PathIterator p2 = getPathIterator ( ( null [] ) continue; ) ;
Distance : 7

62
Tree	abstract PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) return; ) ;
Code	abstract PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) return; ) ;
Distance : 6

63
Tree	PathIterator p1 = p2 . getPathIterator ( p2 , this . p1 ) ;
Code	PathIterator p1 = p2 . getPathIterator ( p2 , this . p1 ) ;
Distance : 6

64
Tree	PathIterator p2 = p1 . getPathIterator ( return; ) ;
Code	PathIterator p2 = p1 . getPathIterator ( return; ) ;
Distance : 3

65
Tree	public PathIterator p1 = p2 . getPathIterator ( ( null [] ) null ) ;
Code	public PathIterator p1 = p2 . getPathIterator ( ( null [] ) null ) ;
Distance : 6

66
Tree	PathIterator iterator2 = p1 . getPathIterator ( p2 . getPathIterator ( super(); ) ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p2 . getPathIterator ( super(); ) ) ;
Distance : 6

67
Tree	PathIterator iterator2 = p1 . getPathIterator ( super(); , break; ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( super(); , break; ) ;
Distance : 4

68
Tree	PathIterator iterator2 = p1 . getPathIterator ( null , return; ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( null , return; ) ;
Distance : 3

69
Tree	PathIterator iterator2 = p1 . getPathIterator ( null , iterator2 . getPathIterator ( null ) ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( null , iterator2 . getPathIterator ( null ) ) ;
Distance : 8

70
Tree	PathIterator p2 = getPathIterator ( ( null [] ) return; ) ;
Code	PathIterator p2 = getPathIterator ( ( null [] ) return; ) ;
Distance : 7

71
Tree	synchronized PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) super(); ) ;
Code	synchronized PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) super(); ) ;
Distance : 6

72
Tree	PathIterator p2 = p1 . getPathIterator ( p1 , p2 . getPathIterator ( null ) ) ;
Code	PathIterator p2 = p1 . getPathIterator ( p1 , p2 . getPathIterator ( null ) ) ;
Distance : 8

73
Tree	PathIterator p1 = p2 . getPathIterator ( p2 , this . p2 ) ;
Code	PathIterator p1 = p2 . getPathIterator ( p2 , this . p2 ) ;
Distance : 6

74
Tree	PathIterator p1 = p1 . getPathIterator ( break; ) ;
Code	PathIterator p1 = p1 . getPathIterator ( break; ) ;
Distance : 3

75
Tree	PathIterator iterator2 = p1 . getPathIterator ( continue; , null ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( continue; , null ) ;
Distance : 3

76
Tree	PathIterator p1 = p2 . getPathIterator ( ( null [] ) return; ) ;
Code	PathIterator p1 = p2 . getPathIterator ( ( null [] ) return; ) ;
Distance : 5

77
Tree	PathIterator iterator2 = p1 . getPathIterator ( null , super(); ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( null , super(); ) ;
Distance : 3

78
Tree	final PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) return; ) ;
Code	final PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) return; ) ;
Distance : 6

79
Tree	PathIterator p2 = p2 . getPathIterator ( null , this . iterator2 ) ;
Code	PathIterator p2 = p2 . getPathIterator ( null , this . iterator2 ) ;
Distance : 5

80
Tree	PathIterator p1 = p1 . getPathIterator ( ( null ) null ) ;
Code	PathIterator p1 = p1 . getPathIterator ( ( null ) null ) ;
Distance : 5

81
Tree	PathIterator p2 = p1 . getPathIterator ( null , this . p2 ) ;
Code	PathIterator p2 = p1 . getPathIterator ( null , this . p2 ) ;
Distance : 6

82
Tree	PathIterator iterator2 = p1 . getPathIterator ( p2 , iterator2 . getPathIterator ( null ) ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p2 , iterator2 . getPathIterator ( null ) ) ;
Distance : 7

83
Tree	PathIterator iterator2 = p2 . getPathIterator ( ( null [] ) default: ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( ( null [] ) default: ) ;
Distance : 4

84
Tree	PathIterator iterator2 = p1 . getPathIterator ( super(); , super(); ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( super(); , super(); ) ;
Distance : 4

85
Tree	PathIterator p2 = p2 . getPathIterator ( ( null [] ) break; ) ;
Code	PathIterator p2 = p2 . getPathIterator ( ( null [] ) break; ) ;
Distance : 5

86
Tree	PathIterator p1 = p1 . getPathIterator ( ( null [] ) default: ) ;
Code	PathIterator p1 = p1 . getPathIterator ( ( null [] ) default: ) ;
Distance : 6

87
Tree	protected PathIterator p1 = p1 . getPathIterator ( ( null [] ) null ) ;
Code	protected PathIterator p1 = p1 . getPathIterator ( ( null [] ) null ) ;
Distance : 7

88
Tree	PathIterator p2 = p2 . getPathIterator ( p2 , this . p1 ) ;
Code	PathIterator p2 = p2 . getPathIterator ( p2 , this . p1 ) ;
Distance : 6

89
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 , this . iterator2 ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 , this . iterator2 ) ;
Distance : 6

90
Tree	synchronized PathIterator p1 = p2 . getPathIterator ( ( null [] ) null ) ;
Code	synchronized PathIterator p1 = p2 . getPathIterator ( ( null [] ) null ) ;
Distance : 6

91
Tree	PathIterator p1 = p1 . getPathIterator ( null . class ) ;
Code	PathIterator p1 = p1 . getPathIterator ( null . class ) ;
Distance : 4

92
Tree	PathIterator p1 = p2 . getPathIterator ( default: , null ) ;
Code	PathIterator p1 = p2 . getPathIterator ( default: , null ) ;
Distance : 3

93
Tree	final PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) continue; ) ;
Code	final PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) continue; ) ;
Distance : 6

94
Tree	PathIterator p2 = p1 . getPathIterator ( p1 , iterator2 . getPathIterator ( null ) ) ;
Code	PathIterator p2 = p1 . getPathIterator ( p1 , iterator2 . getPathIterator ( null ) ) ;
Distance : 9

95
Tree	PathIterator iterator2 = p2 . getPathIterator ( null , this . p2 ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( null , this . p2 ) ;
Distance : 4

96
Tree	PathIterator p1 = p1 . getPathIterator ( continue; ) ;
Code	PathIterator p1 = p1 . getPathIterator ( continue; ) ;
Distance : 3

97
Tree	PathIterator p1 = p2 . getPathIterator ( null , this . getPathIterator ) ;
Code	PathIterator p1 = p2 . getPathIterator ( null , this . getPathIterator ) ;
Distance : 5

98
Tree	PathIterator p1 = p1 . getPathIterator ( null , this . p2 ) ;
Code	PathIterator p1 = p1 . getPathIterator ( null , this . p2 ) ;
Distance : 6

99
Tree	private PathIterator p2 = p2 . getPathIterator ( ( null [] ) null ) ;
Code	private PathIterator p2 = p2 . getPathIterator ( ( null [] ) null ) ;
Distance : 6

========================================================================


========================================================================
Example Number: 7
Parent Code is: 
{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; }
-------------------------------------------------------------------------------
Child code is: 
{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (800{val=toolTipText}) (200{val=+}) (45{val=STRING_CONSTANT})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (800{val=ImageMapUtilities}) (235{val=.}) (802{val=htmlEscape}) (214{val=(}) (800{val=toolTipText}) (215{val=)})) (200{val=+}) (45{val=STRING_CONSTANT})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/10/parent/source_org_jfree_chart_imagemap_StandardToolTipTagFragmentGenerator.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 100
Correct
========================================================================
True

0
Tree	{ return htmlEscape ( toolTipText , toolTipText ) ; } <blank>
Code	{ return htmlEscape ( toolTipText , toolTipText ) ; } <blank>
Distance : 8

1
Tree	{ return entry.map . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return entry.map . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

2
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , ImageMapUtilities ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , ImageMapUtilities ) + STRING_CONSTANT ; }
Distance : 3

3
Tree	{ return ( char ) ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ( char ) ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 6

4
Tree	{ return ( long ) ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ( long ) ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 6

5
Tree	{ return ( double ) ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ( double ) ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 6

6
Tree	{ return iConverters.length . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return iConverters.length . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

7
Tree	{ return htmlEscape () . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return htmlEscape () . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 6

8
Tree	{ return ( byte ) ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ( byte ) ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 6

9
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Distance : 5

10
Tree	{ return entry.map . htmlEscape ( toolTipText , toolTipText , ImageMapUtilities ) ; }
Code	{ return entry.map . htmlEscape ( toolTipText , toolTipText , ImageMapUtilities ) ; }
Distance : 8

11
Tree	{ return com.google.protobuf.GeneratedMessageV3 . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return com.google.protobuf.GeneratedMessageV3 . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

12
Tree	{ return iConverters.length . htmlEscape ( toolTipText , toolTipText , ImageMapUtilities ) ; }
Code	{ return iConverters.length . htmlEscape ( toolTipText , toolTipText , ImageMapUtilities ) ; }
Distance : 8

13
Tree	{ return ( char ) toolTipText . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Code	{ return ( char ) toolTipText . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Distance : 8

14
Tree	{ return ( long ) toolTipText . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Code	{ return ( long ) toolTipText . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Distance : 8

15
Tree	{ return CompilerOptions.J2clPassMode . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return CompilerOptions.J2clPassMode . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

16
Tree	{ return ( double ) toolTipText . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Code	{ return ( double ) toolTipText . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Distance : 8

17
Tree	{ return ( float ) ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ( float ) ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 6

18
Tree	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Distance : 6

19
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText . htmlEscape ( toolTipText ) ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText . htmlEscape ( toolTipText ) ) ; }
Distance : 9

20
Tree	{ return ( int ) toolTipText . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Code	{ return ( int ) toolTipText . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Distance : 7

21
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
Distance : 0

22
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new UnrecognizedRequire () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new UnrecognizedRequire () ) + STRING_CONSTANT ; }
Distance : 4

23
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new ToStringContext.TO_STRING () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new ToStringContext.TO_STRING () ) + STRING_CONSTANT ; }
Distance : 4

24
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new getLValue () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new getLValue () ) + STRING_CONSTANT ; }
Distance : 4

25
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new isFrozen () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new isFrozen () ) + STRING_CONSTANT ; }
Distance : 4

26
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( ImageMapUtilities , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( ImageMapUtilities , toolTipText ) + STRING_CONSTANT ; }
Distance : 3

27
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new RendererChangeEvent () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new RendererChangeEvent () ) + STRING_CONSTANT ; }
Distance : 4

28
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new Es6SyntacticScopeCreator () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new Es6SyntacticScopeCreator () ) + STRING_CONSTANT ; }
Distance : 4

29
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new TypeAttributeAppender.ForInstrumentedType () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new TypeAttributeAppender.ForInstrumentedType () ) + STRING_CONSTANT ; }
Distance : 4

30
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new NonSquareMatrixException () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new NonSquareMatrixException () ) + STRING_CONSTANT ; }
Distance : 4

31
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new CompilerOptions () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new CompilerOptions () ) + STRING_CONSTANT ; }
Distance : 4

32
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new MarsagliaNormalizedGaussianSampler () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new MarsagliaNormalizedGaussianSampler () ) + STRING_CONSTANT ; }
Distance : 4

33
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new FriendlyReturnValues () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new FriendlyReturnValues () ) + STRING_CONSTANT ; }
Distance : 4

34
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new Tracer () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new Tracer () ) + STRING_CONSTANT ; }
Distance : 4

35
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new > () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new > () ) + STRING_CONSTANT ; }
Distance : 4

36
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new ArrayFieldVector () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new ArrayFieldVector () ) + STRING_CONSTANT ; }
Distance : 4

37
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new InheritedReflectionStaticFieldsFixture () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new InheritedReflectionStaticFieldsFixture () ) + STRING_CONSTANT ; }
Distance : 4

38
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new Returns () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new Returns () ) + STRING_CONSTANT ; }
Distance : 3

39
Tree	{ return StringUtils.EMPTY . htmlEscape ( toolTipText , toolTipText , ImageMapUtilities ) ; }
Code	{ return StringUtils.EMPTY . htmlEscape ( toolTipText , toolTipText , ImageMapUtilities ) ; }
Distance : 8

40
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new Object () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( new Object () ) + STRING_CONSTANT ; }
Distance : 3

41
Tree	{ return com.google.protobuf.GeneratedMessageV3 . htmlEscape ( toolTipText , toolTipText , ImageMapUtilities ) ; }
Code	{ return com.google.protobuf.GeneratedMessageV3 . htmlEscape ( toolTipText , toolTipText , ImageMapUtilities ) ; }
Distance : 8

42
Tree	{ return DecompositionType.UNDECOMPOSABLE . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return DecompositionType.UNDECOMPOSABLE . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

43
Tree	{ return cloneReset . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return cloneReset . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

44
Tree	{ return CompilerTestCase.LINE_JOINER . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return CompilerTestCase.LINE_JOINER . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

45
Tree	{ return RegularizedGamma.P . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return RegularizedGamma.P . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

46
Tree	{ return getShortClassName . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return getShortClassName . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

47
Tree	{ return ( long ) toolTipText . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Code	{ return ( long ) toolTipText . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Distance : 7

48
Tree	{ return LocalizedFormats.NO_DATA . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return LocalizedFormats.NO_DATA . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

49
Tree	{ return rhs.b . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return rhs.b . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

50
Tree	{ return ( double ) toolTipText . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Code	{ return ( double ) toolTipText . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Distance : 7

51
Tree	{ return CallSiteType.DECOMPOSABLE_EXPRESSION . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return CallSiteType.DECOMPOSABLE_EXPRESSION . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

52
Tree	{ return Answers.CALLS_REAL_METHODS . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return Answers.CALLS_REAL_METHODS . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

53
Tree	{ return RemovalType.REMOVE_ALL . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return RemovalType.REMOVE_ALL . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

54
Tree	{ return EscapeUtils.ESCAPE_ECMASCRIPT . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return EscapeUtils.ESCAPE_ECMASCRIPT . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

55
Tree	{ return call.returnTypeInferred . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return call.returnTypeInferred . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

56
Tree	{ return Locale.US . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return Locale.US . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

57
Tree	{ return EscapeUtils.ESCAPE_JAVA . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return EscapeUtils.ESCAPE_JAVA . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

58
Tree	{ return Void.TYPE . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return Void.TYPE . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

59
Tree	{ return DomainOrder.ASCENDING . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return DomainOrder.ASCENDING . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

60
Tree	{ return ImmutableMultiset.Builder . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return ImmutableMultiset.Builder . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

61
Tree	{ return TimeUnit.MILLISECONDS . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return TimeUnit.MILLISECONDS . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

62
Tree	{ return Format.PRETTY . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return Format.PRETTY . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

63
Tree	{ return ( short ) ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ( short ) ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 6

64
Tree	{ return LazyHolder.INSTANCE . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return LazyHolder.INSTANCE . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

65
Tree	{ return ( byte ) toolTipText . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Code	{ return ( byte ) toolTipText . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Distance : 8

66
Tree	{ return Format.TYPED . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return Format.TYPED . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

67
Tree	{ return first.next . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return first.next . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

68
Tree	{ return Reach.LOCAL_ONLY . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return Reach.LOCAL_ONLY . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

69
Tree	{ return sumDifference . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return sumDifference . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

70
Tree	{ return defaultString . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return defaultString . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

71
Tree	{ return Strings . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return Strings . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

72
Tree	{ return System.out . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return System.out . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

73
Tree	{ return MillisDurationField.INSTANCE . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return MillisDurationField.INSTANCE . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

74
Tree	{ return ! ImageMapUtilities . htmlEscape ( ImageMapUtilities ) ; }
Code	{ return ! ImageMapUtilities . htmlEscape ( ImageMapUtilities ) ; }
Distance : 5

75
Tree	{ return call.returnType . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return call.returnType . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

76
Tree	{ return Format.COMPACT . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return Format.COMPACT . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

77
Tree	{ return notEmpty . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return notEmpty . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

78
Tree	{ return getAccessibleMethod . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return getAccessibleMethod . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

79
Tree	{ return Any.ANY . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return Any.ANY . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

80
Tree	{ return ( char ) toolTipText . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Code	{ return ( char ) toolTipText . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Distance : 7

81
Tree	{ return options.removeUnusedPrototypeProperties . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Code	{ return options.removeUnusedPrototypeProperties . htmlEscape ( toolTipText , toolTipText , toolTipText ) ; }
Distance : 8

82
Tree	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities ) ; }
Distance : 5

83
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new ConstructorInjection () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new ConstructorInjection () ) + STRING_CONSTANT ; }
Distance : 4

84
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new NameChangingCallback () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( new NameChangingCallback () ) + STRING_CONSTANT ; }
Distance : 4

85
Tree	{ return toolTipText . htmlEscape ( sourceMapCache ) ; }
Code	{ return toolTipText . htmlEscape ( sourceMapCache ) ; }
Distance : 6

86
Tree	{ return toolTipText . htmlEscape ( v.index ) ; }
Code	{ return toolTipText . htmlEscape ( v.index ) ; }
Distance : 6

87
Tree	{ return toolTipText . htmlEscape ( org.mockito.MockitoAnnotations.Mock , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( org.mockito.MockitoAnnotations.Mock , toolTipText ) ; }
Distance : 7

88
Tree	{ return toolTipText . htmlEscape ( halfdayOfDay ) ; }
Code	{ return toolTipText . htmlEscape ( halfdayOfDay ) ; }
Distance : 6

89
Tree	{ return toolTipText . htmlEscape ( ComposableFunction.LOG , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( ComposableFunction.LOG , toolTipText ) ; }
Distance : 7

90
Tree	{ return toolTipText . htmlEscape ( LocalizedFormats.EVALUATION_FAILED , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( LocalizedFormats.EVALUATION_FAILED , toolTipText ) ; }
Distance : 7

91
Tree	{ return toolTipText . htmlEscape ( LocalizedFormats.UNSUPPORTED_OPERATION , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( LocalizedFormats.UNSUPPORTED_OPERATION , toolTipText ) ; }
Distance : 7

92
Tree	{ return toolTipText . htmlEscape ( p1.vector , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( p1.vector , toolTipText ) ; }
Distance : 7

93
Tree	{ return toolTipText . htmlEscape ( ComposableFunction.TANH , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( ComposableFunction.TANH , toolTipText ) ; }
Distance : 7

94
Tree	{ return toolTipText . htmlEscape ( LocalizedFormats.ASSYMETRIC_EIGEN_NOT_SUPPORTED ) ; }
Code	{ return toolTipText . htmlEscape ( LocalizedFormats.ASSYMETRIC_EIGEN_NOT_SUPPORTED ) ; }
Distance : 6

95
Tree	{ return toolTipText . htmlEscape ( Locale.FRENCH ) ; }
Code	{ return toolTipText . htmlEscape ( Locale.FRENCH ) ; }
Distance : 6

96
Tree	{ return toolTipText . htmlEscape ( v.data , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( v.data , toolTipText ) ; }
Distance : 7

97
Tree	{ return toolTipText . htmlEscape ( commonTypes.BOTTOM_PROPERTY_MAP , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( commonTypes.BOTTOM_PROPERTY_MAP , toolTipText ) ; }
Distance : 7

98
Tree	{ return toolTipText . htmlEscape ( LocalizedFormats.NON_SQUARE_MATRIX ) ; }
Code	{ return toolTipText . htmlEscape ( LocalizedFormats.NON_SQUARE_MATRIX ) ; }
Distance : 6

99
Tree	{ return toolTipText . htmlEscape ( LocalizedFormats.PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD ) ; }
Code	{ return toolTipText . htmlEscape ( LocalizedFormats.PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD ) ; }
Distance : 6

========================================================================


========================================================================
Example Number: 8
Parent Code is: 
{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ this ( time , zone , Locale . getDefault () ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (17 (315{val=this}) (214{val=(}) (800{val=time}) (234{val=,}) (40{val=RegularTimePeriod.DEFAULT_TIME_ZONE}) (234{val=,}) (32 (800{val=Locale}) (235{val=.}) (802{val=getDefault}) (216{val=()})) (215{val=)}) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (17 (315{val=this}) (214{val=(}) (800{val=time}) (234{val=,}) (800{val=zone}) (234{val=,}) (32 (800{val=Locale}) (235{val=.}) (802{val=getDefault}) (216{val=()})) (215{val=)}) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/8/parent/source_org_jfree_data_time_Week.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ super ( zone , Locale . getDefault () ) ; zone = zone ; }
Code	{ super ( zone , Locale . getDefault () ) ; zone = zone ; }
Distance : 7

1
Tree	{ super ( zone , zone . getDefault () ) ; time = zone ; }
Code	{ super ( zone , zone . getDefault () ) ; time = zone ; }
Distance : 8

2
Tree	{ super ( zone , Locale . getDefault () ) ; time = zone ; }
Code	{ super ( zone , Locale . getDefault () ) ; time = zone ; }
Distance : 7

3
Tree	{ super ( zone , zone . getDefault () ) ; zone = time ; }
Code	{ super ( zone , zone . getDefault () ) ; zone = time ; }
Distance : 8

4
Tree	{ super ( zone , Locale . getDefault () ) ; zone = time ; }
Code	{ super ( zone , Locale . getDefault () ) ; zone = time ; }
Distance : 7

5
Tree	{ super ( zone . getDefault () ) ; time = zone ; }
Code	{ super ( zone . getDefault () ) ; time = zone ; }
Distance : 9

6
Tree	{ super ( Locale , time . getDefault () ) ; time = zone ; }
Code	{ super ( Locale , time . getDefault () ) ; time = zone ; }
Distance : 9

7
Tree	{ super ( Locale , time . getDefault () ) ; zone = time ; }
Code	{ super ( Locale , time . getDefault () ) ; zone = time ; }
Distance : 9

8
Tree	{ super ( Locale , zone . getDefault () ) ; time = zone ; }
Code	{ super ( Locale , zone . getDefault () ) ; time = zone ; }
Distance : 8

9
Tree	{ super ( zone , time . getDefault () ) ; zone = time ; }
Code	{ super ( zone , time . getDefault () ) ; zone = time ; }
Distance : 8

10
Tree	{ super ( Locale , zone . getDefault () ) ; zone = time ; }
Code	{ super ( Locale , zone . getDefault () ) ; zone = time ; }
Distance : 8

11
Tree	{ super ( Locale , Locale . getDefault () ) ; zone = time ; }
Code	{ super ( Locale , Locale . getDefault () ) ; zone = time ; }
Distance : 8

12
Tree	{ super ( Locale . getDefault () ) ; time = zone ; }
Code	{ super ( Locale . getDefault () ) ; time = zone ; }
Distance : 9

13
Tree	{ super ( zone , time . getDefault () ) ; time = time ; }
Code	{ super ( zone , time . getDefault () ) ; time = time ; }
Distance : 8

14
Tree	{ super ( zone , zone . getDefault () ) ; time = time ; }
Code	{ super ( zone , zone . getDefault () ) ; time = time ; }
Distance : 8

15
Tree	{ super ( zone , Locale . getDefault () ) ; time = time ; }
Code	{ super ( zone , Locale . getDefault () ) ; time = time ; }
Distance : 7

16
Tree	{ super ( zone . getDefault () ) ; time = time ; }
Code	{ super ( zone . getDefault () ) ; time = time ; }
Distance : 9

17
Tree	{ super ( Locale , time . getDefault () ) ; time = time ; }
Code	{ super ( Locale , time . getDefault () ) ; time = time ; }
Distance : 9

18
Tree	{ super ( Locale , zone . getDefault () ) ; time = time ; }
Code	{ super ( Locale , zone . getDefault () ) ; time = time ; }
Distance : 8

19
Tree	{ super ( Locale , Locale . getDefault () ) ; time = zone ; }
Code	{ super ( Locale , Locale . getDefault () ) ; time = zone ; }
Distance : 8

20
Tree	{ super ( Locale . getDefault () ) ; time = time ; }
Code	{ super ( Locale . getDefault () ) ; time = time ; }
Distance : 9

21
Tree	{ super ( zone , time . getDefault () ) ; time = zone ; }
Code	{ super ( zone , time . getDefault () ) ; time = zone ; }
Distance : 8

22
Tree	{ super ( zone . getDefault () ) ; zone = time ; }
Code	{ super ( zone . getDefault () ) ; zone = time ; }
Distance : 9

23
Tree	{ this ( zone , zone , zone , zone . getDefault () ) ; }
Code	{ this ( zone , zone , zone , zone . getDefault () ) ; }
Distance : 4

24
Tree	{ this ( Locale , zone , zone , time . getDefault () ) ; }
Code	{ this ( Locale , zone , zone , time . getDefault () ) ; }
Distance : 4

25
Tree	{ this ( zone , Locale , zone , zone . getDefault () ) ; }
Code	{ this ( zone , Locale , zone , zone . getDefault () ) ; }
Distance : 4

26
Tree	{ super ( Locale , time . getDefault () ) ; Locale = time ; }
Code	{ super ( Locale , time . getDefault () ) ; Locale = time ; }
Distance : 9

27
Tree	{ this ( Locale , Locale , zone , time . getDefault () ) ; }
Code	{ this ( Locale , Locale , zone , time . getDefault () ) ; }
Distance : 4

28
Tree	{ super ( Locale , zone . getDefault () ) ; Locale = time ; }
Code	{ super ( Locale , zone . getDefault () ) ; Locale = time ; }
Distance : 8

29
Tree	{ this ( Locale , zone . getDefault () , zone . getDefault () ) ; }
Code	{ this ( Locale , zone . getDefault () , zone . getDefault () ) ; }
Distance : 5

30
Tree	{ this ( Locale , time , zone , zone . getDefault () ) ; }
Code	{ this ( Locale , time , zone , zone . getDefault () ) ; }
Distance : 3

31
Tree	{ super ( Locale . getDefault () ) ; zone = time ; }
Code	{ super ( Locale . getDefault () ) ; zone = time ; }
Distance : 9

32
Tree	{ super ( Locale , Locale . getDefault () ) ; Locale = time ; }
Code	{ super ( Locale , Locale . getDefault () ) ; Locale = time ; }
Distance : 8

33
Tree	{ this ( zone , time . getDefault () , time . getDefault () ) ; }
Code	{ this ( zone , time . getDefault () , time . getDefault () ) ; }
Distance : 6

34
Tree	{ super ( zone . getDefault () ) ; zone = zone ; }
Code	{ super ( zone . getDefault () ) ; zone = zone ; }
Distance : 9

35
Tree	{ this ( time , false ) ; }
Code	{ this ( time , false ) ; }
Distance : 6

36
Tree	{ super ( Locale , time . getDefault () ) ; zone = zone ; }
Code	{ super ( Locale , time . getDefault () ) ; zone = zone ; }
Distance : 9

37
Tree	{ this ( Locale , zone . getDefault () , time . getDefault () ) ; }
Code	{ this ( Locale , zone . getDefault () , time . getDefault () ) ; }
Distance : 5

38
Tree	{ this ( Locale , Locale . getDefault () , time . getDefault () ) ; }
Code	{ this ( Locale , Locale . getDefault () , time . getDefault () ) ; }
Distance : 6

39
Tree	{ super ( Locale , zone . getDefault () ) ; zone = zone ; }
Code	{ super ( Locale , zone . getDefault () ) ; zone = zone ; }
Distance : 8

40
Tree	{ super ( Locale , Locale . getDefault () ) ; zone = zone ; }
Code	{ super ( Locale , Locale . getDefault () ) ; zone = zone ; }
Distance : 8

41
Tree	{ this ( Locale , Locale . getDefault () , zone . getDefault () ) ; }
Code	{ this ( Locale , Locale . getDefault () , zone . getDefault () ) ; }
Distance : 6

42
Tree	{ super ( Locale , Locale . getDefault () ) ; time = time ; }
Code	{ super ( Locale , Locale . getDefault () ) ; time = time ; }
Distance : 8

43
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } ,
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } ,
Distance : 9

44
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } void
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } void
Distance : 9

45
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } {
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } {
Distance : 9

46
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } (
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } (
Distance : 9

47
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } compiler
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } compiler
Distance : 9

48
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } ()
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } ()
Distance : 9

49
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } boolean
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } boolean
Distance : 9

50
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } return
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } return
Distance : 9

51
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } Preconditions
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } Preconditions
Distance : 9

52
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } i
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } i
Distance : 9

53
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } )
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } )
Distance : 9

54
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } !=
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } !=
Distance : 9

55
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } super
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } super
Distance : 9

56
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } int
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } int
Distance : 9

57
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } test
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } test
Distance : 9

58
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } false
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } false
Distance : 9

59
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } double
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } double
Distance : 9

60
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } &&
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } &&
Distance : 9

61
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } class
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } class
Distance : 9

62
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } value
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } value
Distance : 9

63
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } checkState
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } checkState
Distance : 9

64
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } throw
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } throw
Distance : 9

65
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } ==
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } ==
Distance : 9

66
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } []
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } []
Distance : 9

67
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } n
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } n
Distance : 9

68
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } nullNotPermitted
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } nullNotPermitted
Distance : 9

69
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } assertEquals
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } assertEquals
Distance : 9

70
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } <blank>
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } <blank>
Distance : 9

71
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } !
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } !
Distance : 9

72
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } null
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } null
Distance : 9

73
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } catch
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } catch
Distance : 9

74
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } STRING_CONSTANT
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } STRING_CONSTANT
Distance : 9

75
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } =
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } =
Distance : 9

76
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } {
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } {
Distance : 9

77
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } }
Distance : 9

78
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } .
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } .
Distance : 9

79
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } ;
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } ;
Distance : 9

80
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } String
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } String
Distance : 9

81
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } this
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } this
Distance : 9

82
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } public
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } public
Distance : 9

83
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } <s>
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } <s>
Distance : 9

84
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } +
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } +
Distance : 9

85
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } e
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } e
Distance : 9

86
Tree	{ this ( Locale , time . getDefault () , zone . getDefault () ) ; }
Code	{ this ( Locale , time . getDefault () , zone . getDefault () ) ; }
Distance : 6

87
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } mode
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; } mode
Distance : 9

88
Tree	{ this ( Locale , Locale , time , zone . getDefault () ) ; }
Code	{ this ( Locale , Locale , time , zone . getDefault () ) ; }
Distance : 5

89
Tree	{ this ( zone . getDefault () , time . getDefault () ) ; }
Code	{ this ( zone . getDefault () , time . getDefault () ) ; }
Distance : 5

90
Tree	{ this ( zone , Locale , Locale , zone . getDefault () ) ; }
Code	{ this ( zone , Locale , Locale , zone . getDefault () ) ; }
Distance : 4

91
Tree	{ break; Locale = zone ; }
Code	{ break; Locale = zone ; }
Distance : 10

92
Tree	{ break; zone = zone ; }
Code	{ break; zone = zone ; }
Distance : 10

93
Tree	{ this ( Locale , zone , zone , Locale . getDefault () ) ; }
Code	{ this ( Locale , zone , zone , Locale . getDefault () ) ; }
Distance : 3

94
Tree	{ super ( zone , zone , zone , zone . getDefault () ) ; }
Code	{ super ( zone , zone , zone , zone . getDefault () ) ; }
Distance : 5

95
Tree	{ this ( Locale , Locale , Locale , time . getDefault () ) ; }
Code	{ this ( Locale , Locale , Locale , time . getDefault () ) ; }
Distance : 4

96
Tree	{ super ( Locale , zone . getDefault () ) ; time = Locale ; }
Code	{ super ( Locale , zone . getDefault () ) ; time = Locale ; }
Distance : 8

97
Tree	{ break; zone = Locale ; }
Code	{ break; zone = Locale ; }
Distance : 9

98
Tree	{ this ( zone . getDefault () , zone . getDefault () ) ; }
Code	{ this ( zone . getDefault () , zone . getDefault () ) ; }
Distance : 5

99
Tree	{ super ( zone , Locale , zone , zone . getDefault () ) ; }
Code	{ super ( zone , Locale , zone , zone . getDefault () ) ; }
Distance : 5

========================================================================


========================================================================
Example Number: 9
Parent Code is: 
if ( dataset != null ) { return result ; }
-------------------------------------------------------------------------------
Child code is: 
if ( dataset == null ) { return result ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=dataset}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=result}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=dataset}) (236{val===}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=result}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/1/parent/source_org_jfree_chart_renderer_category_AbstractCategoryItemRenderer.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	if ( dataset != null ) { return this . result . getBottomObject () ; }
Code	if ( dataset != null ) { return this . result . getBottomObject () ; }
Distance : 6

1
Tree	if ( dataset . getDaysInYearMax ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( dataset . getDaysInYearMax ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 5

2
Tree	if ( isPointInRect ( dataset , dataset ) ) { return result ; }
Code	if ( isPointInRect ( dataset , dataset ) ) { return result ; }
Distance : 5

3
Tree	if ( dataset != null ) { return this . result . checkColumnIndex () ; }
Code	if ( dataset != null ) { return this . result . checkColumnIndex () ; }
Distance : 6

4
Tree	if ( dataset != null ) { return result . getEntry ( dataset ) ; }
Code	if ( dataset != null ) { return result . getEntry ( dataset ) ; }
Distance : 6

5
Tree	if ( dataset . getIndex ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( dataset . getIndex ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 5

6
Tree	if ( ! dataset . hashCode ( dataset ) ) { return result ; }
Code	if ( ! dataset . hashCode ( dataset ) ) { return result ; }
Distance : 6

7
Tree	if ( dataset . isSquare ( dataset ) ) { return this . result . result ; }
Code	if ( dataset . isSquare ( dataset ) ) { return this . result . result ; }
Distance : 9

8
Tree	if ( dataset != null ) { return result ; } else result
Code	if ( dataset != null ) { return result ; } else result
Distance : 3

9
Tree	if ( ! dataset . getRowDimension ( dataset ) ) { return result ; }
Code	if ( ! dataset . getRowDimension ( dataset ) ) { return result ; }
Distance : 6

10
Tree	if ( dataset != null ) { return result ; } else StringBuffer
Code	if ( dataset != null ) { return result ; } else StringBuffer
Distance : 3

11
Tree	if ( ! dataset . containsOnly ( dataset ) ) { return result ; }
Code	if ( ! dataset . containsOnly ( dataset ) ) { return result ; }
Distance : 6

12
Tree	if ( dataset != null ) { return result ; } else Double
Code	if ( dataset != null ) { return result ; } else Double
Distance : 3

13
Tree	if ( dataset != null ) { return result . b ( dataset ) ; }
Code	if ( dataset != null ) { return result . b ( dataset ) ; }
Distance : 6

14
Tree	if ( dataset . isSquare ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( dataset . isSquare ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 5

15
Tree	if ( ! options.checksOnly ( dataset ) ) { return result ; }
Code	if ( ! options.checksOnly ( dataset ) ) { return result ; }
Distance : 5

16
Tree	if ( dataset != null ) { return this . result . isGenericObjectType () ; }
Code	if ( dataset != null ) { return this . result . isGenericObjectType () ; }
Distance : 6

17
Tree	if ( ! dataset . getInverse ( dataset ) ) { return result ; }
Code	if ( ! dataset . getInverse ( dataset ) ) { return result ; }
Distance : 6

18
Tree	if ( dataset != null ) { return this . result . CHAR_CONS () ; }
Code	if ( dataset != null ) { return this . result . CHAR_CONS () ; }
Distance : 6

19
Tree	if ( ! shouldPrintExterns ( dataset ) ) { return result ; }
Code	if ( ! shouldPrintExterns ( dataset ) ) { return result ; }
Distance : 5

20
Tree	if ( dataset . noDefaultConstructor ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( dataset . noDefaultConstructor ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 5

21
Tree	if ( dataset . containsNow ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( dataset . containsNow ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 5

22
Tree	if ( dataset != null ) { return result . isTrue ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return result . isTrue ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

23
Tree	if ( dataset != null ) { return result ; } else formatter
Code	if ( dataset != null ) { return result ; } else formatter
Distance : 3

24
Tree	if ( dataset . canBeCalled ( dataset ) ) { return this . result . result ; }
Code	if ( dataset . canBeCalled ( dataset ) ) { return this . result . result ; }
Distance : 9

25
Tree	if ( dataset . doIntercept ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( dataset . doIntercept ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 5

26
Tree	if ( dataset != null ) { return result . shouldCollapseProperties ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return result . shouldCollapseProperties ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

27
Tree	if ( dataset != null ) { return result ; } else booleanValue
Code	if ( dataset != null ) { return result ; } else booleanValue
Distance : 3

28
Tree	if ( ! isSomeUnknownType ( dataset ) ) { return result ; }
Code	if ( ! isSomeUnknownType ( dataset ) ) { return result ; }
Distance : 5

29
Tree	if ( dataset != null ) { return result . isEnhancedFor ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return result . isEnhancedFor ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

30
Tree	if ( ! pullOngoingStubbing ( dataset ) ) { return result ; }
Code	if ( ! pullOngoingStubbing ( dataset ) ) { return result ; }
Distance : 5

31
Tree	if ( dataset . containsNow ( dataset ) ) { return this . result . result ; }
Code	if ( dataset . containsNow ( dataset ) ) { return this . result . result ; }
Distance : 9

32
Tree	if ( dataset . instantiateGenericsWithUnknown ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( dataset . instantiateGenericsWithUnknown ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 5

33
Tree	if ( dataset != null ) { return result . token ( dataset ) ; }
Code	if ( dataset != null ) { return result . token ( dataset ) ; }
Distance : 6

34
Tree	if ( dataset . noDefaultConstructor ( dataset ) ) { return this . result . result ; }
Code	if ( dataset . noDefaultConstructor ( dataset ) ) { return this . result . result ; }
Distance : 9

35
Tree	if ( dataset . getDaysInYearMax ( dataset ) ) { return this . result . result ; }
Code	if ( dataset . getDaysInYearMax ( dataset ) ) { return this . result . result ; }
Distance : 9

36
Tree	if ( dataset != null ) { return this . result . isBottom () ; }
Code	if ( dataset != null ) { return this . result . isBottom () ; }
Distance : 6

37
Tree	if ( dataset != null ) { return this . result . WRONG_ORDER_ENDPOINTS_MESSAGE () ; }
Code	if ( dataset != null ) { return this . result . WRONG_ORDER_ENDPOINTS_MESSAGE () ; }
Distance : 6

38
Tree	if ( dataset != null ) { return result . shouldCollapseProperties ( dataset ) ; }
Code	if ( dataset != null ) { return result . shouldCollapseProperties ( dataset ) ; }
Distance : 6

39
Tree	if ( dataset . getIndex ( dataset ) ) { return this . result . result ; }
Code	if ( dataset . getIndex ( dataset ) ) { return this . result . result ; }
Distance : 9

40
Tree	if ( dataset != null ) { return result . isScript ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return result . isScript ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

41
Tree	if ( ! dataset . getIndex ( dataset ) ) { return result ; }
Code	if ( ! dataset . getIndex ( dataset ) ) { return result ; }
Distance : 6

42
Tree	if ( dataset . toBooleanObject ( dataset ) ) { return this . result . result ; }
Code	if ( dataset . toBooleanObject ( dataset ) ) { return this . result . result ; }
Distance : 9

43
Tree	if ( dataset != null ) { return this . result . isSubtype () ; }
Code	if ( dataset != null ) { return this . result . isSubtype () ; }
Distance : 6

44
Tree	if ( dataset != null ) { return result . getValue ( dataset ) ; }
Code	if ( dataset != null ) { return result . getValue ( dataset ) ; }
Distance : 6

45
Tree	if ( dataset . isGlobal ( dataset ) ) { return this . result . result ; }
Code	if ( dataset . isGlobal ( dataset ) ) { return this . result . result ; }
Distance : 9

46
Tree	if ( dataset != null ) { return this . result . seriesKey () ; }
Code	if ( dataset != null ) { return this . result . seriesKey () ; }
Distance : 6

47
Tree	if ( dataset . ObjectUtils ( dataset ) ) { return this . result . result ; }
Code	if ( dataset . ObjectUtils ( dataset ) ) { return this . result . result ; }
Distance : 9

48
Tree	if ( dataset != null ) { return result . getMessage ( dataset ) ; }
Code	if ( dataset != null ) { return result . getMessage ( dataset ) ; }
Distance : 6

49
Tree	if ( dataset != null ) { return result ; } else assert
Code	if ( dataset != null ) { return result ; } else assert
Distance : 3

50
Tree	if ( dataset != null ) { return result ; } else buffer
Code	if ( dataset != null ) { return result ; } else buffer
Distance : 3

51
Tree	if ( dataset . isGlobal ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( dataset . isGlobal ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 5

52
Tree	if ( dataset != null ) { return this . result . checkMultiplicationCompatible () ; }
Code	if ( dataset != null ) { return this . result . checkMultiplicationCompatible () ; }
Distance : 6

53
Tree	if ( dataset . ObjectUtils ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( dataset . ObjectUtils ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 5

54
Tree	if ( ! dataset . quote ( dataset ) ) { return result ; }
Code	if ( ! dataset . quote ( dataset ) ) { return result ; }
Distance : 6

55
Tree	if ( ! dataset . getMethod ( dataset ) ) { return result ; }
Code	if ( ! dataset . getMethod ( dataset ) ) { return result ; }
Distance : 6

56
Tree	if ( dataset != null ) { return result . getParser ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return result . getParser ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

57
Tree	if ( fraction () ) { return result ; }
Code	if ( fraction () ) { return result ; }
Distance : 3

58
Tree	if ( dataset != null ) { return this . result . ch () ; }
Code	if ( dataset != null ) { return this . result . ch () ; }
Distance : 6

59
Tree	if ( dataset != null ) { return this . result . isForIn () ; }
Code	if ( dataset != null ) { return this . result . isForIn () ; }
Distance : 6

60
Tree	if ( ! dataset . isVanillaFor ( dataset ) ) { return result ; }
Code	if ( ! dataset . isVanillaFor ( dataset ) ) { return result ; }
Distance : 6

61
Tree	if ( ! isBlank ( dataset ) ) { return result ; }
Code	if ( ! isBlank ( dataset ) ) { return result ; }
Distance : 5

62
Tree	if ( ! dataset . getSolver ( dataset ) ) { return result ; }
Code	if ( ! dataset . getSolver ( dataset ) ) { return result ; }
Distance : 6

63
Tree	if ( ! dataset . toUpperCase ( dataset ) ) { return result ; }
Code	if ( ! dataset . toUpperCase ( dataset ) ) { return result ; }
Distance : 6

64
Tree	if ( isBottom ( dataset , dataset , result ) ) { return result ; }
Code	if ( isBottom ( dataset , dataset , result ) ) { return result ; }
Distance : 7

65
Tree	if ( dataset != null ) { return result ; } else final
Code	if ( dataset != null ) { return result ; } else final
Distance : 3

66
Tree	if ( dataset != null ) { return result . correlation ( dataset ) ; }
Code	if ( dataset != null ) { return result . correlation ( dataset ) ; }
Distance : 6

67
Tree	if ( dataset != null ) { return this . result . toFormatter () ; }
Code	if ( dataset != null ) { return this . result . toFormatter () ; }
Distance : 6

68
Tree	if ( dataset . isSubtypeOf ( dataset ) ) { return this . result . result ; }
Code	if ( dataset . isSubtypeOf ( dataset ) ) { return this . result . result ; }
Distance : 9

69
Tree	if ( dataset != null ) { return result ; } else IllegalArgumentException
Code	if ( dataset != null ) { return result ; } else IllegalArgumentException
Distance : 3

70
Tree	if ( ! dataset . isDeclaredInFunctionBlockOrParameter ( dataset ) ) { return result ; }
Code	if ( ! dataset . isDeclaredInFunctionBlockOrParameter ( dataset ) ) { return result ; }
Distance : 6

71
Tree	if ( dataset . toBooleanObject ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( dataset . toBooleanObject ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 5

72
Tree	if ( dataset != null ) { return this . result . getVarCount () ; }
Code	if ( dataset != null ) { return this . result . getVarCount () ; }
Distance : 6

73
Tree	if ( ! isTheTruthyType ( dataset ) ) { return result ; }
Code	if ( ! isTheTruthyType ( dataset ) ) { return result ; }
Distance : 5

74
Tree	if ( dataset != null ) { return this . result . defaultString () ; }
Code	if ( dataset != null ) { return this . result . defaultString () ; }
Distance : 6

75
Tree	if ( ! dataset . isHoistScope ( dataset ) ) { return result ; }
Code	if ( ! dataset . isHoistScope ( dataset ) ) { return result ; }
Distance : 6

76
Tree	if ( ! startConfiguration.length ( dataset ) ) { return result ; }
Code	if ( ! startConfiguration.length ( dataset ) ) { return result ; }
Distance : 5

77
Tree	if ( dataset . isSubtypeOf ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( dataset . isSubtypeOf ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 5

78
Tree	if ( dataset != null ) { return this . result . getSolver () ; }
Code	if ( dataset != null ) { return this . result . getSolver () ; }
Distance : 6

79
Tree	if ( ! dataset . abs ( dataset ) ) { return result ; }
Code	if ( ! dataset . abs ( dataset ) ) { return result ; }
Distance : 6

80
Tree	if ( ! isAmbiguousObject ( dataset ) ) { return result ; }
Code	if ( ! isAmbiguousObject ( dataset ) ) { return result ; }
Distance : 5

81
Tree	if ( dataset != null ) { return result . stringWriter ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return result . stringWriter ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

82
Tree	if ( isParamList () ) { return result ; }
Code	if ( isParamList () ) { return result ; }
Distance : 3

83
Tree	if ( dataset != null ) { return result . codePointCount ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return result . codePointCount ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

84
Tree	if ( isEmptyType ( dataset , result ) ) { return result ; }
Code	if ( isEmptyType ( dataset , result ) ) { return result ; }
Distance : 5

85
Tree	if ( dataset != null ) { return result . forName ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return result . forName ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

86
Tree	if ( dataset != null ) { return result . size ( dataset ) ; }
Code	if ( dataset != null ) { return result . size ( dataset ) ; }
Distance : 6

87
Tree	if ( dataset != null ) { return result . getRight ( dataset ) ; }
Code	if ( dataset != null ) { return result . getRight ( dataset ) ; }
Distance : 6

88
Tree	if ( dataset != null ) { return result ; } else []
Code	if ( dataset != null ) { return result ; } else []
Distance : 3

89
Tree	if ( dataset != null ) { return result ; } else Float
Code	if ( dataset != null ) { return result ; } else Float
Distance : 3

90
Tree	if ( dataset != null ) { return result . getPeriodType ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return result . getPeriodType ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

91
Tree	if ( dataset != null ) { return result . isGlobal ( dataset ) ; }
Code	if ( dataset != null ) { return result . isGlobal ( dataset ) ; }
Distance : 6

92
Tree	if ( dataset != null ) { return result . hasMessageThat ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return result . hasMessageThat ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

93
Tree	if ( dataset != null ) { return result . isLValue ( dataset ) ; }
Code	if ( dataset != null ) { return result . isLValue ( dataset ) ; }
Distance : 6

94
Tree	if ( dataset != null ) { return result . getYearMonthType ( dataset ) ; }
Code	if ( dataset != null ) { return result . getYearMonthType ( dataset ) ; }
Distance : 6

95
Tree	if ( dataset != null ) { return result ; } else key
Code	if ( dataset != null ) { return result ; } else key
Distance : 3

96
Tree	if ( dataset != null ) { return result ; } else defaultValue
Code	if ( dataset != null ) { return result ; } else defaultValue
Distance : 3

97
Tree	if ( dataset != null ) { return result . primitiveTypeOf ( dataset ) ; }
Code	if ( dataset != null ) { return result . primitiveTypeOf ( dataset ) ; }
Distance : 6

98
Tree	if ( dataset != null ) { return result . ret ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return result . ret ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

99
Tree	if ( dataset != null ) { return result . subtract ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return result . subtract ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

========================================================================


========================================================================
Example Number: 10
Parent Code is: 
name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT
-------------------------------------------------------------------------------
Child code is: 
! name.inExterns && name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (27 (27 (40{val=name.globalSets}) (236{val===}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (40{val=name.localSets}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (249{val=&&}) (27 (40{val=name.aliasingGets}) (231{val=>}) (34{val=NUMBER_CONSTANT}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (27 (27 (38 (207{val=!}) (40{val=name.inExterns})) (249{val=&&}) (27 (40{val=name.globalSets}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (249{val=&&}) (27 (40{val=name.localSets}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (249{val=&&}) (27 (40{val=name.aliasingGets}) (231{val=>}) (34{val=NUMBER_CONSTANT}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/130/parent/src_com_google_javascript_jscomp_CollapseProperties.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	objectMethodsGuru == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	objectMethodsGuru == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

1
Tree	clone.rows == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	clone.rows == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

2
Tree	scopeType == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	scopeType == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

3
Tree	zones == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	zones == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

4
Tree	expectCanAssignTo == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	expectCanAssignTo == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

5
Tree	CompilationLevel == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	CompilationLevel == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

6
Tree	iInteger == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	iInteger == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

7
Tree	microsphereData == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	microsphereData == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

8
Tree	findDeps == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Code	findDeps == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Distance : 10

9
Tree	decompMatrix == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Code	decompMatrix == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Distance : 10

10
Tree	renderer1 == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	renderer1 == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

11
Tree	bundler == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Code	bundler == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Distance : 10

12
Tree	newEmptyClinitMethod == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	newEmptyClinitMethod == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

13
Tree	lhsOfForInLoop == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	lhsOfForInLoop == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

14
Tree	packed == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Code	packed == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Distance : 10

15
Tree	oldRoot == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	oldRoot == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

16
Tree	the_mock_type == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Code	the_mock_type == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Distance : 10

17
Tree	dest.contractionCriterion == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	dest.contractionCriterion == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

18
Tree	objectMethodsGuru == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Code	objectMethodsGuru == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Distance : 10

19
Tree	allSymbols == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	allSymbols == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

20
Tree	bundler == NUMBER_CONSTANT && MILLIS_PER_DAY > MILLIS_PER_DAY
Code	bundler == NUMBER_CONSTANT && MILLIS_PER_DAY > MILLIS_PER_DAY
Distance : 10

21
Tree	visitForIn == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	visitForIn == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

22
Tree	minadj == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	minadj == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

23
Tree	decompMatrix == NUMBER_CONSTANT && MILLIS_PER_DAY > MILLIS_PER_DAY
Code	decompMatrix == NUMBER_CONSTANT && MILLIS_PER_DAY > MILLIS_PER_DAY
Distance : 10

24
Tree	putIfAbsent == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	putIfAbsent == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

25
Tree	namedA == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	namedA == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

26
Tree	inbits == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	inbits == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

27
Tree	oldRoot == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Code	oldRoot == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Distance : 10

28
Tree	messages == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	messages == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

29
Tree	findDeps == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	findDeps == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

30
Tree	decompMatrix == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	decompMatrix == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

31
Tree	bundler == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	bundler == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

32
Tree	packed == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	packed == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

33
Tree	convention == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	convention == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

34
Tree	oos == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	oos == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

35
Tree	astValidationEnabled == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	astValidationEnabled == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

36
Tree	subformats == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	subformats == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

37
Tree	objectMethodsGuru == NUMBER_CONSTANT && MILLIS_PER_DAY > MILLIS_PER_DAY
Code	objectMethodsGuru == NUMBER_CONSTANT && MILLIS_PER_DAY > MILLIS_PER_DAY
Distance : 10

38
Tree	binStats == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	binStats == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

39
Tree	UnmockableHashCodeAndEquals == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	UnmockableHashCodeAndEquals == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

40
Tree	scopeType == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Code	scopeType == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Distance : 10

41
Tree	zones == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Code	zones == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Distance : 10

42
Tree	TimesTest == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	TimesTest == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

43
Tree	saveChartAsJPEG == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	saveChartAsJPEG == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

44
Tree	negativeItemLabelPositionMap == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	negativeItemLabelPositionMap == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

45
Tree	noPrimitives == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	noPrimitives == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

46
Tree	sectionOutlineStrokeMap == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	sectionOutlineStrokeMap == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

47
Tree	findDeps == NUMBER_CONSTANT && MILLIS_PER_DAY > MILLIS_PER_DAY
Code	findDeps == NUMBER_CONSTANT && MILLIS_PER_DAY > MILLIS_PER_DAY
Distance : 10

48
Tree	sgY2 == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	sgY2 == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

49
Tree	expectCanAssignTo == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Code	expectCanAssignTo == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Distance : 10

50
Tree	CompilationLevel == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Code	CompilationLevel == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Distance : 10

51
Tree	iInteger == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Code	iInteger == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Distance : 10

52
Tree	iZoneInfoMap == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	iZoneInfoMap == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

53
Tree	invalidations == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	invalidations == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

54
Tree	isSomeCompileTimeConstStringValue == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	isSomeCompileTimeConstStringValue == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

55
Tree	objectsLevel2 == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	objectsLevel2 == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

56
Tree	microsphereData == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Code	microsphereData == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Distance : 10

57
Tree	preciseType == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	preciseType == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

58
Tree	convention == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Code	convention == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Distance : 10

59
Tree	testAbstractClass == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	testAbstractClass == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

60
Tree	FractionMatrixConverter == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	FractionMatrixConverter == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

61
Tree	variablesToInclude == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	variablesToInclude == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

62
Tree	newInput == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	newInput == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

63
Tree	sourceJarComparator == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	sourceJarComparator == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

64
Tree	StackTraceFilteringTest == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	StackTraceFilteringTest == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

65
Tree	dest.contractionCriterion == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Code	dest.contractionCriterion == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Distance : 10

66
Tree	the_mock_type == NUMBER_CONSTANT && MILLIS_PER_DAY > MILLIS_PER_DAY
Code	the_mock_type == NUMBER_CONSTANT && MILLIS_PER_DAY > MILLIS_PER_DAY
Distance : 10

67
Tree	ListIterator == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	ListIterator == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

68
Tree	newVar == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	newVar == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

69
Tree	loader == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	loader == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

70
Tree	guardA == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	guardA == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

71
Tree	clone.rows == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Code	clone.rows == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Distance : 10

72
Tree	clone.items == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	clone.items == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

73
Tree	q0 == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	q0 == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

74
Tree	candidateDefinition == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	candidateDefinition == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

75
Tree	columnLabels == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	columnLabels == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

76
Tree	the_mock_type == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	the_mock_type == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

77
Tree	typesIndexedByProperty == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	typesIndexedByProperty == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

78
Tree	convention == NUMBER_CONSTANT && MILLIS_PER_DAY > MILLIS_PER_DAY
Code	convention == NUMBER_CONSTANT && MILLIS_PER_DAY > MILLIS_PER_DAY
Distance : 10

79
Tree	jF == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	jF == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

80
Tree	testLocal == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	testLocal == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

81
Tree	subformats == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Code	subformats == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Distance : 10

82
Tree	firstScript == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	firstScript == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

83
Tree	oos == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Code	oos == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Distance : 10

84
Tree	dfs == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	dfs == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

85
Tree	astValidationEnabled == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Code	astValidationEnabled == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Distance : 10

86
Tree	isMarkedConst == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	isMarkedConst == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

87
Tree	assignedAt == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	assignedAt == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

88
Tree	testSameWithInversion == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	testSameWithInversion == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

89
Tree	renderer1 == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Code	renderer1 == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Distance : 10

90
Tree	newEmptyClinitMethod == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Code	newEmptyClinitMethod == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Distance : 10

91
Tree	embedded == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	embedded == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

92
Tree	lhsOfForInLoop == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Code	lhsOfForInLoop == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Distance : 10

93
Tree	BigFractionMatrixConverter == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	BigFractionMatrixConverter == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

94
Tree	NPointCrossover == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	NPointCrossover == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

95
Tree	AtLeastXVerificationTest == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	AtLeastXVerificationTest == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

96
Tree	nextTime == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	nextTime == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

97
Tree	pomComparator == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	pomComparator == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

98
Tree	packed == NUMBER_CONSTANT && MILLIS_PER_DAY > MILLIS_PER_DAY
Code	packed == NUMBER_CONSTANT && MILLIS_PER_DAY > MILLIS_PER_DAY
Distance : 10

99
Tree	scopeToDeclareIn == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	scopeToDeclareIn == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

========================================================================


========================================================================
Example Number: 11
Parent Code is: 
Context rhsContext = Context.OTHER ;
-------------------------------------------------------------------------------
Child code is: 
Context rhsContext = getContextForNoInOperator ( context ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Context})) (59 (800{val=rhsContext}) (204{val==}) (40{val=Context.OTHER})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Context})) (59 (800{val=rhsContext}) (204{val==}) (32 (802{val=getContextForNoInOperator}) (214{val=(}) (800{val=context}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/123/parent/src_com_google_javascript_jscomp_CodeGenerator.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; <s>
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; <s>
Distance : 5

1
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; catch
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; catch
Distance : 5

2
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; throw
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; throw
Distance : 5

3
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; []
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; []
Distance : 5

4
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; Args
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; Args
Distance : 5

5
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; !
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; !
Distance : 5

6
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; assertEquals
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; assertEquals
Distance : 5

7
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; MathRuntimeException
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; MathRuntimeException
Distance : 5

8
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; {}
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; {}
Distance : 5

9
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; true
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; true
Distance : 5

10
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; mode
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; mode
Distance : 5

11
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; value
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; value
Distance : 5

12
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; i
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; i
Distance : 5

13
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; T
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; T
Distance : 5

14
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; &&
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; &&
Distance : 5

15
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; Override
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; Override
Distance : 5

16
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; mock
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; mock
Distance : 5

17
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; Object
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; Object
Distance : 5

18
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; fail
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; fail
Distance : 5

19
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; List
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; List
Distance : 5

20
Tree	Context rhsContext ; >
Code	Context rhsContext ; >
Distance : 6

21
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; result
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; result
Distance : 5

22
Tree	Context rhsContext ; public
Code	Context rhsContext ; public
Distance : 6

23
Tree	Context rhsContext ; mode
Code	Context rhsContext ; mode
Distance : 6

24
Tree	Context rhsContext ; true
Code	Context rhsContext ; true
Distance : 6

25
Tree	Context rhsContext ; super
Code	Context rhsContext ; super
Distance : 6

26
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; void
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; void
Distance : 5

27
Tree	Context rhsContext ; !=
Code	Context rhsContext ; !=
Distance : 6

28
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; ==
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; ==
Distance : 5

29
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; int
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; int
Distance : 5

30
Tree	Context rhsContext ; MathRuntimeException
Code	Context rhsContext ; MathRuntimeException
Distance : 6

31
Tree	Context rhsContext ; @
Code	Context rhsContext ; @
Distance : 6

32
Tree	Context rhsContext ; test
Code	Context rhsContext ; test
Distance : 6

33
Tree	Context rhsContext ; Override
Code	Context rhsContext ; Override
Distance : 6

34
Tree	Context rhsContext ; mock
Code	Context rhsContext ; mock
Distance : 6

35
Tree	Context rhsContext ; [
Code	Context rhsContext ; [
Distance : 6

36
Tree	Context rhsContext ; ]
Code	Context rhsContext ; ]
Distance : 6

37
Tree	Context rhsContext ; &&
Code	Context rhsContext ; &&
Distance : 6

38
Tree	Context rhsContext ; T
Code	Context rhsContext ; T
Distance : 6

39
Tree	Context rhsContext ; Preconditions
Code	Context rhsContext ; Preconditions
Distance : 6

40
Tree	Context rhsContext ; -
Code	Context rhsContext ; -
Distance : 6

41
Tree	Context rhsContext ; class
Code	Context rhsContext ; class
Distance : 6

42
Tree	Context rhsContext ; Object
Code	Context rhsContext ; Object
Distance : 6

43
Tree	Context rhsContext ; {}
Code	Context rhsContext ; {}
Distance : 6

44
Tree	Context rhsContext ; ,
Code	Context rhsContext ; ,
Distance : 6

45
Tree	Context rhsContext ; new
Code	Context rhsContext ; new
Distance : 6

46
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; IllegalArgumentException
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; IllegalArgumentException
Distance : 5

47
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; nullNotPermitted
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; nullNotPermitted
Distance : 5

48
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; try
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; try
Distance : 5

49
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; type
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; type
Distance : 5

50
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; *
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; *
Distance : 5

51
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; paint
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; paint
Distance : 5

52
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; join
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; join
Distance : 5

53
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; test
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; test
Distance : 5

54
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; @
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; @
Distance : 5

55
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; false
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; false
Distance : 5

56
Tree	Context rhsContext ; !
Code	Context rhsContext ; !
Distance : 6

57
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; field
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; field
Distance : 5

58
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; name
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; name
Distance : 5

59
Tree	Context rhsContext = Context.OTHER ; checkState
Code	Context rhsContext = Context.OTHER ; checkState
Distance : 5

60
Tree	Context rhsContext = Context.OTHER ; nullNotPermitted
Code	Context rhsContext = Context.OTHER ; nullNotPermitted
Distance : 5

61
Tree	Context rhsContext = Context.OTHER ; ==
Code	Context rhsContext = Context.OTHER ; ==
Distance : 5

62
Tree	Context rhsContext = Context.OTHER ; assertEquals
Code	Context rhsContext = Context.OTHER ; assertEquals
Distance : 5

63
Tree	Context rhsContext = Context.OTHER ; !
Code	Context rhsContext = Context.OTHER ; !
Distance : 5

64
Tree	Context rhsContext = Context.OTHER ; @
Code	Context rhsContext = Context.OTHER ; @
Distance : 5

65
Tree	Context rhsContext = Context.OTHER ; Override
Code	Context rhsContext = Context.OTHER ; Override
Distance : 5

66
Tree	Context rhsContext = Context.OTHER ; serialised
Code	Context rhsContext = Context.OTHER ; serialised
Distance : 5

67
Tree	Context rhsContext = Context.OTHER ; mock
Code	Context rhsContext = Context.OTHER ; mock
Distance : 5

68
Tree	Context rhsContext = Context.OTHER ; [
Code	Context rhsContext = Context.OTHER ; [
Distance : 5

69
Tree	Context rhsContext = Context.OTHER ; ]
Code	Context rhsContext = Context.OTHER ; ]
Distance : 5

70
Tree	Context rhsContext = Context.OTHER ; &&
Code	Context rhsContext = Context.OTHER ; &&
Distance : 5

71
Tree	Context rhsContext = Context.OTHER ; T
Code	Context rhsContext = Context.OTHER ; T
Distance : 5

72
Tree	Context rhsContext = Context.OTHER ; Preconditions
Code	Context rhsContext = Context.OTHER ; Preconditions
Distance : 5

73
Tree	Context rhsContext = Context.OTHER ; -
Code	Context rhsContext = Context.OTHER ; -
Distance : 5

74
Tree	Context rhsContext = Context.OTHER ; class
Code	Context rhsContext = Context.OTHER ; class
Distance : 5

75
Tree	Context rhsContext = Context.OTHER ; Object
Code	Context rhsContext = Context.OTHER ; Object
Distance : 5

76
Tree	Context rhsContext = Context.OTHER ; {}
Code	Context rhsContext = Context.OTHER ; {}
Distance : 5

77
Tree	Context rhsContext = Context.OTHER ; MathRuntimeException
Code	Context rhsContext = Context.OTHER ; MathRuntimeException
Distance : 5

78
Tree	Context rhsContext = Context.OTHER ; ParamChecks
Code	Context rhsContext = Context.OTHER ; ParamChecks
Distance : 5

79
Tree	Context rhsContext = Context.OTHER ; f
Code	Context rhsContext = Context.OTHER ; f
Distance : 5

80
Tree	Context rhsContext = Context.OTHER ; getInstance
Code	Context rhsContext = Context.OTHER ; getInstance
Distance : 5

81
Tree	Context rhsContext = Context.OTHER ; result
Code	Context rhsContext = Context.OTHER ; result
Distance : 5

82
Tree	Context rhsContext ; invocation
Code	Context rhsContext ; invocation
Distance : 6

83
Tree	Context rhsContext = Context.OTHER ; join
Code	Context rhsContext = Context.OTHER ; join
Distance : 5

84
Tree	Context rhsContext = Context.OTHER ; double
Code	Context rhsContext = Context.OTHER ; double
Distance : 5

85
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; t
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; t
Distance : 5

86
Tree	Context rhsContext = Context.OTHER ; int
Code	Context rhsContext = Context.OTHER ; int
Distance : 5

87
Tree	Context rhsContext = Context.OTHER ; type
Code	Context rhsContext = Context.OTHER ; type
Distance : 5

88
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; add
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; add
Distance : 5

89
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; <>
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; <>
Distance : 5

90
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; array
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; array
Distance : 5

91
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; ParamChecks
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; ParamChecks
Distance : 5

92
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; f
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; f
Distance : 5

93
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; :
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; :
Distance : 5

94
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; str
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; str
Distance : 5

95
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; boolean
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; boolean
Distance : 5

96
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; m
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; m
Distance : 5

97
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; x
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; x
Distance : 5

98
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; testSame
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; testSame
Distance : 5

99
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; parent
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; parent
Distance : 5

========================================================================


========================================================================
Example Number: 12
Parent Code is: 
{ return topType ; }
-------------------------------------------------------------------------------
Child code is: 
{ return topType . isAllType () ? getNativeType ( ARRAY_TYPE ) : topType ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (800{val=topType}) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (16 (32 (800{val=topType}) (235{val=.}) (802{val=isAllType}) (216{val=()})) (233{val=?}) (32 (802{val=getNativeType}) (214{val=(}) (800{val=ARRAY_TYPE}) (215{val=)})) (226{val=:}) (800{val=topType})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/111/parent/src_com_google_javascript_jscomp_type_ClosureReverseAbstractInterpreter.java
-------------------------------------------------------------------------------
Edit Distance : 10
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ return this . topType . isAllType () ; } t
Code	{ return this . topType . isAllType () ; } t
Distance : 10

1
Tree	{ return ARRAY_TYPE ; } checkArgument
Code	{ return ARRAY_TYPE ; } checkArgument
Distance : 11

2
Tree	{ return ARRAY_TYPE ; } data
Code	{ return ARRAY_TYPE ; } data
Distance : 11

3
Tree	{ return ARRAY_TYPE ; } List
Code	{ return ARRAY_TYPE ; } List
Distance : 11

4
Tree	{ return ARRAY_TYPE ; } Args
Code	{ return ARRAY_TYPE ; } Args
Distance : 11

5
Tree	{ return ARRAY_TYPE ; } array
Code	{ return ARRAY_TYPE ; } array
Distance : 11

6
Tree	{ return ARRAY_TYPE ; } <>
Code	{ return ARRAY_TYPE ; } <>
Distance : 11

7
Tree	{ return ARRAY_TYPE ; } try
Code	{ return ARRAY_TYPE ; } try
Distance : 11

8
Tree	{ return ARRAY_TYPE ; } fail
Code	{ return ARRAY_TYPE ; } fail
Distance : 11

9
Tree	{ return ARRAY_TYPE ; } paint
Code	{ return ARRAY_TYPE ; } paint
Distance : 11

10
Tree	{ return ARRAY_TYPE ; } join
Code	{ return ARRAY_TYPE ; } join
Distance : 11

11
Tree	{ return ARRAY_TYPE ; } str
Code	{ return ARRAY_TYPE ; } str
Distance : 11

12
Tree	{ return ARRAY_TYPE ; } nullNotPermitted
Code	{ return ARRAY_TYPE ; } nullNotPermitted
Distance : 11

13
Tree	{ return ARRAY_TYPE ; } []
Code	{ return ARRAY_TYPE ; } []
Distance : 11

14
Tree	{ return ARRAY_TYPE ; } void
Code	{ return ARRAY_TYPE ; } void
Distance : 11

15
Tree	{ return ARRAY_TYPE ; } ==
Code	{ return ARRAY_TYPE ; } ==
Distance : 11

16
Tree	{ return ARRAY_TYPE ; } throw
Code	{ return ARRAY_TYPE ; } throw
Distance : 11

17
Tree	{ return ARRAY_TYPE ; } catch
Code	{ return ARRAY_TYPE ; } catch
Distance : 11

18
Tree	{ return ARRAY_TYPE ; } +
Code	{ return ARRAY_TYPE ; } +
Distance : 11

19
Tree	{ return ARRAY_TYPE ; } null
Code	{ return ARRAY_TYPE ; } null
Distance : 11

20
Tree	{ return ARRAY_TYPE ; } boolean
Code	{ return ARRAY_TYPE ; } boolean
Distance : 11

21
Tree	{ return ARRAY_TYPE ; } m
Code	{ return ARRAY_TYPE ; } m
Distance : 11

22
Tree	{ return ARRAY_TYPE ; } name
Code	{ return ARRAY_TYPE ; } name
Distance : 11

23
Tree	{ return ARRAY_TYPE ; } add
Code	{ return ARRAY_TYPE ; } add
Distance : 11

24
Tree	{ return ARRAY_TYPE ; } reportCodeChange
Code	{ return ARRAY_TYPE ; } reportCodeChange
Distance : 11

25
Tree	{ return ARRAY_TYPE ; } expected
Code	{ return ARRAY_TYPE ; } expected
Distance : 11

26
Tree	{ return ARRAY_TYPE ; } :
Code	{ return ARRAY_TYPE ; } :
Distance : 11

27
Tree	{ return ARRAY_TYPE ; } result
Code	{ return ARRAY_TYPE ; } result
Distance : 11

28
Tree	{ return ARRAY_TYPE ; } serialised
Code	{ return ARRAY_TYPE ; } serialised
Distance : 11

29
Tree	{ return ARRAY_TYPE ; } getInstance
Code	{ return ARRAY_TYPE ; } getInstance
Distance : 11

30
Tree	{ return ARRAY_TYPE ; } *
Code	{ return ARRAY_TYPE ; } *
Distance : 11

31
Tree	{ return ARRAY_TYPE ; } type
Code	{ return ARRAY_TYPE ; } type
Distance : 11

32
Tree	{ return ARRAY_TYPE ; } false
Code	{ return ARRAY_TYPE ; } false
Distance : 11

33
Tree	{ return ARRAY_TYPE ; } String
Code	{ return ARRAY_TYPE ; } String
Distance : 11

34
Tree	{ return ARRAY_TYPE ; } int
Code	{ return ARRAY_TYPE ; } int
Distance : 11

35
Tree	{ return ARRAY_TYPE ; } checkState
Code	{ return ARRAY_TYPE ; } checkState
Distance : 11

36
Tree	{ return ARRAY_TYPE ; } ArrayList
Code	{ return ARRAY_TYPE ; } ArrayList
Distance : 11

37
Tree	{ return ARRAY_TYPE ; } testSame
Code	{ return ARRAY_TYPE ; } testSame
Distance : 11

38
Tree	{ return ARRAY_TYPE ; } <blank>
Code	{ return ARRAY_TYPE ; } <blank>
Distance : 11

39
Tree	{ return ARRAY_TYPE ; } LINE_JOINER
Code	{ return ARRAY_TYPE ; } LINE_JOINER
Distance : 11

40
Tree	{ return ARRAY_TYPE . isAllType () ? null : topType ; } [
Code	{ return ARRAY_TYPE . isAllType () ? null : topType ; } [
Distance : 6

41
Tree	{ return ARRAY_TYPE . isAllType () ? null : topType ; } Preconditions
Code	{ return ARRAY_TYPE . isAllType () ? null : topType ; } Preconditions
Distance : 6

42
Tree	{ return ARRAY_TYPE . isAllType () ? null : topType ; } -
Code	{ return ARRAY_TYPE . isAllType () ? null : topType ; } -
Distance : 6

43
Tree	{ return ARRAY_TYPE . isAllType ( topType ) ; } mode
Code	{ return ARRAY_TYPE . isAllType ( topType ) ; } mode
Distance : 8

44
Tree	{ return ARRAY_TYPE ; } double
Code	{ return ARRAY_TYPE ; } double
Distance : 11

45
Tree	{ return ARRAY_TYPE ; } invocation
Code	{ return ARRAY_TYPE ; } invocation
Distance : 11

46
Tree	{ return ARRAY_TYPE ; } compiler
Code	{ return ARRAY_TYPE ; } compiler
Distance : 11

47
Tree	{ return ARRAY_TYPE ; } this
Code	{ return ARRAY_TYPE ; } this
Distance : 11

48
Tree	{ return ARRAY_TYPE ; } -
Code	{ return ARRAY_TYPE ; } -
Distance : 11

49
Tree	{ return ARRAY_TYPE ; } class
Code	{ return ARRAY_TYPE ; } class
Distance : 11

50
Tree	{ return ARRAY_TYPE ; } Object
Code	{ return ARRAY_TYPE ; } Object
Distance : 11

51
Tree	{ return ARRAY_TYPE ; } {}
Code	{ return ARRAY_TYPE ; } {}
Distance : 11

52
Tree	{ return ARRAY_TYPE ; } MathRuntimeException
Code	{ return ARRAY_TYPE ; } MathRuntimeException
Distance : 11

53
Tree	{ return ARRAY_TYPE ; } ParamChecks
Code	{ return ARRAY_TYPE ; } ParamChecks
Distance : 11

54
Tree	{ return ARRAY_TYPE ; } f
Code	{ return ARRAY_TYPE ; } f
Distance : 11

55
Tree	{ return ARRAY_TYPE . isAllType ( topType ) ; } true
Code	{ return ARRAY_TYPE . isAllType ( topType ) ; } true
Distance : 8

56
Tree	{ return ( topType ) getNativeType ( { ) ; } int
Code	{ return ( topType ) getNativeType ( { ) ; } int
Distance : 9

57
Tree	{ return ARRAY_TYPE . isAllType ( topType ) ; } -
Code	{ return ARRAY_TYPE . isAllType ( topType ) ; } -
Distance : 8

58
Tree	{ return this . topType . isAllType () ; } MathRuntimeException
Code	{ return this . topType . isAllType () ; } MathRuntimeException
Distance : 10

59
Tree	{ return this . topType . isAllType () ; } int
Code	{ return this . topType . isAllType () ; } int
Distance : 10

60
Tree	{ return this . topType . isAllType () ; } false
Code	{ return this . topType . isAllType () ; } false
Distance : 10

61
Tree	{ return this . topType . isAllType () ; } ==
Code	{ return this . topType . isAllType () ; } ==
Distance : 10

62
Tree	{ return this . topType . isAllType () ; } void
Code	{ return this . topType . isAllType () ; } void
Distance : 10

63
Tree	{ return this . topType ; } >
Code	{ return this . topType ; } >
Distance : 10

64
Tree	{ return this . topType . isAllType () ; } catch
Code	{ return this . topType . isAllType () ; } catch
Distance : 10

65
Tree	{ return this . topType . isAllType () ; } throw
Code	{ return this . topType . isAllType () ; } throw
Distance : 10

66
Tree	{ return this . topType . isAllType () ; } nullNotPermitted
Code	{ return this . topType . isAllType () ; } nullNotPermitted
Distance : 10

67
Tree	{ return ARRAY_TYPE ; } Preconditions
Code	{ return ARRAY_TYPE ; } Preconditions
Distance : 11

68
Tree	{ return ARRAY_TYPE ; } t
Code	{ return ARRAY_TYPE ; } t
Distance : 11

69
Tree	{ return ARRAY_TYPE ; } T
Code	{ return ARRAY_TYPE ; } T
Distance : 11

70
Tree	{ return ARRAY_TYPE ; } ]
Code	{ return ARRAY_TYPE ; } ]
Distance : 11

71
Tree	{ return ARRAY_TYPE ; } NUMBER_CONSTANT
Code	{ return ARRAY_TYPE ; } NUMBER_CONSTANT
Distance : 11

72
Tree	{ return ARRAY_TYPE ; } return
Code	{ return ARRAY_TYPE ; } return
Distance : 11

73
Tree	{ return ARRAY_TYPE ; } if
Code	{ return ARRAY_TYPE ; } if
Distance : 11

74
Tree	{ return ARRAY_TYPE ; } <
Code	{ return ARRAY_TYPE ; } <
Distance : 11

75
Tree	{ return ARRAY_TYPE ; } e
Code	{ return ARRAY_TYPE ; } e
Distance : 11

76
Tree	{ return ARRAY_TYPE ; } n
Code	{ return ARRAY_TYPE ; } n
Distance : 11

77
Tree	{ return ARRAY_TYPE ; } {
Code	{ return ARRAY_TYPE ; } {
Distance : 11

78
Tree	{ return ARRAY_TYPE ; } ()
Code	{ return ARRAY_TYPE ; } ()
Distance : 11

79
Tree	{ return ARRAY_TYPE ; } ;
Code	{ return ARRAY_TYPE ; } ;
Distance : 11

80
Tree	{ return ARRAY_TYPE ; } final
Code	{ return ARRAY_TYPE ; } final
Distance : 11

81
Tree	{ return ARRAY_TYPE ; } )
Code	{ return ARRAY_TYPE ; } )
Distance : 11

82
Tree	{ return ARRAY_TYPE ; } i
Code	{ return ARRAY_TYPE ; } i
Distance : 11

83
Tree	{ return ARRAY_TYPE ; } value
Code	{ return ARRAY_TYPE ; } value
Distance : 11

84
Tree	{ return ARRAY_TYPE ; } field
Code	{ return ARRAY_TYPE ; } field
Distance : 11

85
Tree	{ return ARRAY_TYPE ; } &&
Code	{ return ARRAY_TYPE ; } &&
Distance : 11

86
Tree	{ return ARRAY_TYPE ; } assertEquals
Code	{ return ARRAY_TYPE ; } assertEquals
Distance : 11

87
Tree	{ return ARRAY_TYPE ; } !
Code	{ return ARRAY_TYPE ; } !
Distance : 11

88
Tree	{ return ARRAY_TYPE ; } @
Code	{ return ARRAY_TYPE ; } @
Distance : 11

89
Tree	{ return ARRAY_TYPE ; } test
Code	{ return ARRAY_TYPE ; } test
Distance : 11

90
Tree	{ return ARRAY_TYPE ; } [
Code	{ return ARRAY_TYPE ; } [
Distance : 11

91
Tree	{ return ARRAY_TYPE ; } {
Code	{ return ARRAY_TYPE ; } {
Distance : 11

92
Tree	{ return this . topType . isAllType () ; } []
Code	{ return this . topType . isAllType () ; } []
Distance : 10

93
Tree	{ return ARRAY_TYPE ; } assertThat
Code	{ return ARRAY_TYPE ; } assertThat
Distance : 11

94
Tree	{ return ARRAY_TYPE ; } IllegalArgumentException
Code	{ return ARRAY_TYPE ; } IllegalArgumentException
Distance : 11

95
Tree	final long isAllType () { return this . topType ; }
Code	final long isAllType () { return this . topType ; }
Distance : 10

96
Tree	static int getNativeType () { return this . ARRAY_TYPE ; }
Code	static int getNativeType () { return this . ARRAY_TYPE ; }
Distance : 12

97
Tree	static boolean getNativeType () { return this . ARRAY_TYPE ; }
Code	static boolean getNativeType () { return this . ARRAY_TYPE ; }
Distance : 12

98
Tree	final float isAllType () { return this . ARRAY_TYPE ; }
Code	final float isAllType () { return this . ARRAY_TYPE ; }
Distance : 11

99
Tree	protected byte getNativeType () { return this . ARRAY_TYPE ; }
Code	protected byte getNativeType () { return this . ARRAY_TYPE ; }
Distance : 12

========================================================================


========================================================================
Example Number: 13
Parent Code is: 
{ if ( assignLhsChild != null ) { return true ; } return false ; }
-------------------------------------------------------------------------------
Child code is: 
{ if ( assignLhsChild != null ) { return true ; } return parent != null && NodeUtil . isGet ( parent ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (800{val=assignLhsChild}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (9{val=true}) (227{val=;})) (219{val=}}))) (41 (329{val=return}) (9{val=false}) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (800{val=assignLhsChild}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (9{val=true}) (227{val=;})) (219{val=}}))) (41 (329{val=return}) (27 (27 (800{val=parent}) (242{val=!=}) (500{val=null})) (249{val=&&}) (32 (800{val=NodeUtil}) (235{val=.}) (802{val=isGet}) (214{val=(}) (800{val=parent}) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/100/parent/src_com_google_javascript_jscomp_CheckGlobalThis.java
-------------------------------------------------------------------------------
Edit Distance : 10
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ if ( ! assignLhsChild ) { return false ; } return isGet ( NodeUtil , parent . isGet ( } ) ) ; }
Code	{ if ( ! assignLhsChild ) { return false ; } return isGet ( NodeUtil , parent . isGet ( } ) ) ; }
Distance : 11

1
Tree	{ if ( ! isGet ( NodeUtil , NodeUtil , { ) ) { return false ; } return true ; }
Code	{ if ( ! isGet ( NodeUtil , NodeUtil , { ) ) { return false ; } return true ; }
Distance : 20

2
Tree	{ if ( ! parent ) { return false ; } return NodeUtil . isGet ( NodeUtil ) ; }
Code	{ if ( ! parent ) { return false ; } return NodeUtil . isGet ( NodeUtil ) ; }
Distance : 9

3
Tree	{ if ( ! NodeUtil . isGet ( assignLhsChild , null ) ) { return true ; } return true ; }
Code	{ if ( ! NodeUtil . isGet ( assignLhsChild , null ) ) { return true ; } return true ; }
Distance : 17

4
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 11

5
Tree	{ if ( ! NodeUtil . isGet ( NodeUtil , parent ) ) { return false ; } return true ; }
Code	{ if ( ! NodeUtil . isGet ( NodeUtil , parent ) ) { return false ; } return true ; }
Distance : 19

6
Tree	{ if ( ! NodeUtil . isGet ( parent , NodeUtil ) ) { return false ; } return true ; }
Code	{ if ( ! NodeUtil . isGet ( parent , NodeUtil ) ) { return false ; } return true ; }
Distance : 20

7
Tree	{ if ( ! parent . isGet ( parent , parent ) ) { return true ; } return true ; }
Code	{ if ( ! parent . isGet ( parent , parent ) ) { return true ; } return true ; }
Distance : 19

8
Tree	{ if ( ! NodeUtil ) { return false ; } return false . isGet ( parent ) ; }
Code	{ if ( ! NodeUtil ) { return false ; } return false . isGet ( parent ) ; }
Distance : 9

9
Tree	{ if ( assignLhsChild != continue; ) { return false ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( assignLhsChild != continue; ) { return false ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 7

10
Tree	{ if ( ! isGet ( NodeUtil , null , true ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( NodeUtil , null , true ) ) { return true ; } return false ; }
Distance : 18

11
Tree	{ if ( ! parent ) { return true ; } return parent . isGet ( NodeUtil ) ; }
Code	{ if ( ! parent ) { return true ; } return parent . isGet ( NodeUtil ) ; }
Distance : 8

12
Tree	{ if ( ! isGet ( NodeUtil , parent , NodeUtil ) ) { return false ; } return true ; }
Code	{ if ( ! isGet ( NodeUtil , parent , NodeUtil ) ) { return false ; } return true ; }
Distance : 20

13
Tree	{ if ( ! parent . isGet ( assignLhsChild , NodeUtil ) ) { return true ; } return true ; }
Code	{ if ( ! parent . isGet ( assignLhsChild , NodeUtil ) ) { return true ; } return true ; }
Distance : 18

14
Tree	{ if ( assignLhsChild != super(); ) { return false ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( assignLhsChild != super(); ) { return false ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 7

15
Tree	{ if ( ! assignLhsChild ) { return false ; } return parent . isGet ( NodeUtil ) ; }
Code	{ if ( ! assignLhsChild ) { return false ; } return parent . isGet ( NodeUtil ) ; }
Distance : 9

16
Tree	{ if ( ! isGet ( NodeUtil , null , false ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( NodeUtil , null , false ) ) { return true ; } return true ; }
Distance : 18

17
Tree	{ if ( assignLhsChild . isGet ( NodeUtil ) ) { return true ; } return true ; }
Code	{ if ( assignLhsChild . isGet ( NodeUtil ) ) { return true ; } return true ; }
Distance : 15

18
Tree	{ if ( ! NodeUtil . isGet ( parent , false ) ) { return true ; } return true ; }
Code	{ if ( ! NodeUtil . isGet ( parent , false ) ) { return true ; } return true ; }
Distance : 19

19
Tree	{ if ( ! assignLhsChild ) { return false ; } return parent . isGet ( assignLhsChild ) ; }
Code	{ if ( ! assignLhsChild ) { return false ; } return parent . isGet ( assignLhsChild ) ; }
Distance : 9

20
Tree	{ if ( ! isGet ( NodeUtil , parent , parent ) ) { return false ; } return true ; }
Code	{ if ( ! isGet ( NodeUtil , parent , parent ) ) { return false ; } return true ; }
Distance : 19

21
Tree	{ if ( ! isGet ( assignLhsChild , parent , false ) ) { return false ; } return true ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , false ) ) { return false ; } return true ; }
Distance : 19

22
Tree	{ if ( parent != null ) { return false ; } return parent . isGet ( assignLhsChild ) ; }
Code	{ if ( parent != null ) { return false ; } return parent . isGet ( assignLhsChild ) ; }
Distance : 7

23
Tree	{ if ( ! assignLhsChild ) { return true ; } return NodeUtil . isGet ( NodeUtil ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return NodeUtil . isGet ( NodeUtil ) ; }
Distance : 8

24
Tree	{ if ( ! isGet ( parent , parent , true ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( parent , parent , true ) ) { return true ; } return false ; }
Distance : 19

25
Tree	{ if ( parent != null ) { return true ; } return false . isGet ( assignLhsChild ) ; }
Code	{ if ( parent != null ) { return true ; } return false . isGet ( assignLhsChild ) ; }
Distance : 7

26
Tree	{ if ( ! assignLhsChild . isGet ( parent , null ) ) { return false ; } return true ; }
Code	{ if ( ! assignLhsChild . isGet ( parent , null ) ) { return false ; } return true ; }
Distance : 18

27
Tree	{ if ( NodeUtil != null ) { return false ; } return false . isGet ( NodeUtil ) ; }
Code	{ if ( NodeUtil != null ) { return false ; } return false . isGet ( NodeUtil ) ; }
Distance : 8

28
Tree	{ if ( assignLhsChild != return; ) { return true ; } return parent . isGet ( assignLhsChild ) ; }
Code	{ if ( assignLhsChild != return; ) { return true ; } return parent . isGet ( assignLhsChild ) ; }
Distance : 6

29
Tree	{ if ( ! assignLhsChild ) { return false ; } return false . isGet ( NodeUtil ) ; }
Code	{ if ( ! assignLhsChild ) { return false ; } return false . isGet ( NodeUtil ) ; }
Distance : 10

30
Tree	{ if ( ! NodeUtil ) { return false ; } return parent . isGet ( NodeUtil ) ; }
Code	{ if ( ! NodeUtil ) { return false ; } return parent . isGet ( NodeUtil ) ; }
Distance : 9

31
Tree	{ if ( ! NodeUtil . isGet ( parent , NodeUtil ) ) { return true ; } return true ; }
Code	{ if ( ! NodeUtil . isGet ( parent , NodeUtil ) ) { return true ; } return true ; }
Distance : 19

32
Tree	{ if ( ! isGet ( parent , NodeUtil , NodeUtil ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( parent , NodeUtil , NodeUtil ) ) { return true ; } return true ; }
Distance : 19

33
Tree	{ if ( ! NodeUtil . isGet ( NodeUtil , parent ) ) { return true ; } return true ; }
Code	{ if ( ! NodeUtil . isGet ( NodeUtil , parent ) ) { return true ; } return true ; }
Distance : 19

34
Tree	{ if ( parent != continue; ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( parent != continue; ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 7

35
Tree	{ if ( ! isGet ( assignLhsChild , null , NodeUtil ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( assignLhsChild , null , NodeUtil ) ) { return true ; } return true ; }
Distance : 17

36
Tree	{ if ( ! isGet ( parent , null , false ) ) { return false ; } return true ; }
Code	{ if ( ! isGet ( parent , null , false ) ) { return false ; } return true ; }
Distance : 19

37
Tree	{ if ( NodeUtil != continue; ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( NodeUtil != continue; ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 7

38
Tree	{ if ( assignLhsChild != return; ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Code	{ if ( assignLhsChild != return; ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Distance : 5

39
Tree	{ if ( ! assignLhsChild . isGet ( NodeUtil , NodeUtil ) ) { return false ; } return true ; }
Code	{ if ( ! assignLhsChild . isGet ( NodeUtil , NodeUtil ) ) { return false ; } return true ; }
Distance : 19

40
Tree	{ if ( assignLhsChild != continue; ) { return true ; } return parent . isGet ( assignLhsChild ) ; }
Code	{ if ( assignLhsChild != continue; ) { return true ; } return parent . isGet ( assignLhsChild ) ; }
Distance : 6

41
Tree	{ if ( parent != super(); ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( parent != super(); ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 7

42
Tree	{ if ( ! parent . isGet ( assignLhsChild , true ) ) { return false ; } return false ; }
Code	{ if ( ! parent . isGet ( assignLhsChild , true ) ) { return false ; } return false ; }
Distance : 19

43
Tree	{ if ( assignLhsChild != break; ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( assignLhsChild != break; ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 6

44
Tree	{ if ( ! parent ) { return true ; } return false . isGet ( NodeUtil ) ; }
Code	{ if ( ! parent ) { return true ; } return false . isGet ( NodeUtil ) ; }
Distance : 9

45
Tree	{ if ( NodeUtil != super(); ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( NodeUtil != super(); ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 7

46
Tree	{ if ( ! isGet ( parent , NodeUtil , NodeUtil ) ) { return false ; } return true ; }
Code	{ if ( ! isGet ( parent , NodeUtil , NodeUtil ) ) { return false ; } return true ; }
Distance : 20

47
Tree	{ if ( ! parent . isGet ( assignLhsChild , null ) ) { return false ; } return true ; }
Code	{ if ( ! parent . isGet ( assignLhsChild , null ) ) { return false ; } return true ; }
Distance : 18

48
Tree	{ if ( assignLhsChild != super(); ) { return true ; } return parent . isGet ( assignLhsChild ) ; }
Code	{ if ( assignLhsChild != super(); ) { return true ; } return parent . isGet ( assignLhsChild ) ; }
Distance : 6

49
Tree	{ if ( ! parent . isGet ( NodeUtil , true ) ) { return true ; } return false ; }
Code	{ if ( ! parent . isGet ( NodeUtil , true ) ) { return true ; } return false ; }
Distance : 19

50
Tree	{ if ( ! parent ) { return false ; } return parent . isGet ( parent ) ; }
Code	{ if ( ! parent ) { return false ; } return parent . isGet ( parent ) ; }
Distance : 8

51
Tree	{ if ( parent != return; ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( parent != return; ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 7

52
Tree	{ if ( parent != null ) { return false ; } return false . isGet ( NodeUtil ) ; }
Code	{ if ( parent != null ) { return false ; } return false . isGet ( NodeUtil ) ; }
Distance : 8

53
Tree	{ if ( ! isGet ( assignLhsChild , null , NodeUtil ) ) { return false ; } return true ; }
Code	{ if ( ! isGet ( assignLhsChild , null , NodeUtil ) ) { return false ; } return true ; }
Distance : 18

54
Tree	{ if ( ! isGet ( NodeUtil , parent , NodeUtil ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( NodeUtil , parent , NodeUtil ) ) { return true ; } return true ; }
Distance : 19

55
Tree	{ if ( NodeUtil != return; ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( NodeUtil != return; ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 7

56
Tree	{ if ( ! isGet ( NodeUtil , NodeUtil , false ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( NodeUtil , NodeUtil , false ) ) { return true ; } return true ; }
Distance : 19

57
Tree	{ if ( ! assignLhsChild . isGet ( NodeUtil , false ) ) { return false ; } return true ; }
Code	{ if ( ! assignLhsChild . isGet ( NodeUtil , false ) ) { return false ; } return true ; }
Distance : 19

58
Tree	{ if ( ! NodeUtil ) { return true ; } return false . isGet ( assignLhsChild ) ; }
Code	{ if ( ! NodeUtil ) { return true ; } return false . isGet ( assignLhsChild ) ; }
Distance : 9

59
Tree	{ if ( NodeUtil != null ) { return false ; } return parent . isGet ( assignLhsChild ) ; }
Code	{ if ( NodeUtil != null ) { return false ; } return parent . isGet ( assignLhsChild ) ; }
Distance : 7

60
Tree	{ if ( ! NodeUtil . isGet ( assignLhsChild , true ) ) { return false ; } return false ; }
Code	{ if ( ! NodeUtil . isGet ( assignLhsChild , true ) ) { return false ; } return false ; }
Distance : 19

61
Tree	{ if ( ! isGet ( assignLhsChild , NodeUtil , parent ) ) { return false ; } return true ; }
Code	{ if ( ! isGet ( assignLhsChild , NodeUtil , parent ) ) { return false ; } return true ; }
Distance : 19

62
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild , true ) ) { return true ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild , true ) ) { return true ; } return false ; }
Distance : 18

63
Tree	{ if ( ! parent . isGet ( parent ) ) { return true ; } return true ; }
Code	{ if ( ! parent . isGet ( parent ) ) { return true ; } return true ; }
Distance : 17

64
Tree	{ if ( ! assignLhsChild ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Distance : 7

65
Tree	{ if ( ! isGet ( NodeUtil , null , NodeUtil ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( NodeUtil , null , NodeUtil ) ) { return false ; } return false ; }
Distance : 19

66
Tree	{ if ( parent != null ) { return false ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( parent != null ) { return false ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 7

67
Tree	{ if ( ! assignLhsChild . isGet ( NodeUtil ) ) { return false ; } return true ; }
Code	{ if ( ! assignLhsChild . isGet ( NodeUtil ) ) { return false ; } return true ; }
Distance : 17

68
Tree	{ if ( ! isGet ( NodeUtil , null ) ) { return true ; } return true ; }
Code	{ if ( ! isGet ( NodeUtil , null ) ) { return true ; } return true ; }
Distance : 16

69
Tree	{ if ( ! parent . isGet ( NodeUtil , NodeUtil ) ) { return false ; } return false ; }
Code	{ if ( ! parent . isGet ( NodeUtil , NodeUtil ) ) { return false ; } return false ; }
Distance : 20

70
Tree	{ if ( ! isGet ( NodeUtil , NodeUtil , false ) ) { return false ; } return true ; }
Code	{ if ( ! isGet ( NodeUtil , NodeUtil , false ) ) { return false ; } return true ; }
Distance : 20

71
Tree	{ if ( ! assignLhsChild ) { return false ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( ! assignLhsChild ) { return false ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 9

72
Tree	{ if ( NodeUtil != null ) { return true ; } return parent . isGet ( assignLhsChild ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return parent . isGet ( assignLhsChild ) ; }
Distance : 6

73
Tree	{ if ( ! isGet ( assignLhsChild , parent , true ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , true ) ) { return true ; } return false ; }
Distance : 18

74
Tree	{ if ( ! parent . isGet ( assignLhsChild , false ) ) { return false ; } return true ; }
Code	{ if ( ! parent . isGet ( assignLhsChild , false ) ) { return false ; } return true ; }
Distance : 19

75
Tree	{ if ( NodeUtil != null ) { return false ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( NodeUtil != null ) { return false ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 7

76
Tree	{ if ( assignLhsChild != null ) { return false ; } return parent . isGet ( assignLhsChild ) ; }
Code	{ if ( assignLhsChild != null ) { return false ; } return parent . isGet ( assignLhsChild ) ; }
Distance : 6

77
Tree	{ if ( assignLhsChild != null ) { return true ; } return false . isGet ( assignLhsChild ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return false . isGet ( assignLhsChild ) ; }
Distance : 6

78
Tree	{ if ( ! assignLhsChild . isGet ( NodeUtil , null ) ) { return true ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( NodeUtil , null ) ) { return true ; } return false ; }
Distance : 17

79
Tree	{ if ( NodeUtil . isGet ( assignLhsChild ) ) { return false ; } return true ; }
Code	{ if ( NodeUtil . isGet ( assignLhsChild ) ) { return false ; } return true ; }
Distance : 17

80
Tree	{ if ( ! assignLhsChild . isGet ( NodeUtil ) ) { return true ; } return true ; }
Code	{ if ( ! assignLhsChild . isGet ( NodeUtil ) ) { return true ; } return true ; }
Distance : 16

81
Tree	{ if ( ! NodeUtil . isGet ( NodeUtil , NodeUtil ) ) { return true ; } return false ; }
Code	{ if ( ! NodeUtil . isGet ( NodeUtil , NodeUtil ) ) { return true ; } return false ; }
Distance : 19

82
Tree	{ if ( parent . isGet ( assignLhsChild ) ) { return true ; } return true ; }
Code	{ if ( parent . isGet ( assignLhsChild ) ) { return true ; } return true ; }
Distance : 16

83
Tree	{ if ( ! assignLhsChild ) { return true ; } return parent . isGet ( assignLhsChild ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return parent . isGet ( assignLhsChild ) ; }
Distance : 8

84
Tree	{ if ( ! assignLhsChild . isGet ( parent , false ) ) { return false ; } return true ; }
Code	{ if ( ! assignLhsChild . isGet ( parent , false ) ) { return false ; } return true ; }
Distance : 19

85
Tree	{ if ( ! NodeUtil . isGet ( assignLhsChild , false ) ) { return true ; } return true ; }
Code	{ if ( ! NodeUtil . isGet ( assignLhsChild , false ) ) { return true ; } return true ; }
Distance : 18

86
Tree	{ if ( parent . isGet ( assignLhsChild ) ) { return false ; } return true ; }
Code	{ if ( parent . isGet ( assignLhsChild ) ) { return false ; } return true ; }
Distance : 17

87
Tree	{ if ( assignLhsChild != super(); ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Code	{ if ( assignLhsChild != super(); ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Distance : 5

88
Tree	{ if ( ! parent . isGet ( assignLhsChild , false ) ) { return true ; } return true ; }
Code	{ if ( ! parent . isGet ( assignLhsChild , false ) ) { return true ; } return true ; }
Distance : 18

89
Tree	{ if ( assignLhsChild != null ) { return false ; } return false . isGet ( assignLhsChild ) ; }
Code	{ if ( assignLhsChild != null ) { return false ; } return false . isGet ( assignLhsChild ) ; }
Distance : 7

90
Tree	{ if ( NodeUtil != null ) { return true ; } return false . isGet ( assignLhsChild ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return false . isGet ( assignLhsChild ) ; }
Distance : 7

91
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild , parent ) ) { return true ; } return true ; }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild , parent ) ) { return true ; } return true ; }
Distance : 18

92
Tree	{ if ( ! isGet ( assignLhsChild , NodeUtil , true ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , NodeUtil , true ) ) { return true ; } return false ; }
Distance : 18

93
Tree	{ if ( ! isGet ( NodeUtil , null , false ) ) { return false ; } return true ; }
Code	{ if ( ! isGet ( NodeUtil , null , false ) ) { return false ; } return true ; }
Distance : 19

94
Tree	{ if ( ! NodeUtil . isGet ( assignLhsChild , true ) ) { return true ; } return false ; }
Code	{ if ( ! NodeUtil . isGet ( assignLhsChild , true ) ) { return true ; } return false ; }
Distance : 18

95
Tree	{ if ( ! parent . isGet ( NodeUtil , null ) ) { return false ; } return false ; }
Code	{ if ( ! parent . isGet ( NodeUtil , null ) ) { return false ; } return false ; }
Distance : 19

96
Tree	{ if ( ! NodeUtil ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Code	{ if ( ! NodeUtil ) { return true ; } return NodeUtil . isGet ( parent ) ; }
Distance : 7

97
Tree	{ if ( ! assignLhsChild . isGet ( parent , true ) ) { return false ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( parent , true ) ) { return false ; } return false ; }
Distance : 19

98
Tree	{ if ( ! NodeUtil . isGet ( NodeUtil ) ) { return false ; } return true ; }
Code	{ if ( ! NodeUtil . isGet ( NodeUtil ) ) { return false ; } return true ; }
Distance : 18

99
Tree	{ if ( ! isGet ( parent , parent , true ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( parent , parent , true ) ) { return false ; } return false ; }
Distance : 20

========================================================================


========================================================================
Example Number: 14
Parent Code is: 
int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
-------------------------------------------------------------------------------
Child code is: 
int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=indexOfDot}) (204{val==}) (32 (800{val=namespace}) (235{val=.}) (802{val=indexOf}) (214{val=(}) (13{val=CHAR_CONS}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=indexOfDot}) (204{val==}) (32 (800{val=namespace}) (235{val=.}) (802{val=lastIndexOf}) (214{val=(}) (13{val=CHAR_CONS}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/93/parent/src_com_google_javascript_jscomp_ProcessClosurePrimitives.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Correct
========================================================================
True

0
Tree	double namespace = namespace . lastIndexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	double namespace = namespace . lastIndexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

1
Tree	char namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	char namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

2
Tree	short namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	short namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 8

3
Tree	void namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	void namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 8

4
Tree	long namespace = namespace . lastIndexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	long namespace = namespace . lastIndexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

5
Tree	double indexOfDot = namespace . lastIndexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	double indexOfDot = namespace . lastIndexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 6

6
Tree	boolean indexOfDot = namespace . lastIndexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	boolean indexOfDot = namespace . lastIndexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 6

7
Tree	int indexOfDot = return; ;
Code	int indexOfDot = return; ;
Distance : 6

8
Tree	void indexOfDot ;
Code	void indexOfDot ;
Distance : 8

9
Tree	short indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	short indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

10
Tree	int namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	int namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

11
Tree	public boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	public boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

12
Tree	byte indexOfDot = null ;
Code	byte indexOfDot = null ;
Distance : 7

13
Tree	int indexOfDot = namespace . lastIndexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = namespace . lastIndexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 3

14
Tree	long indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	long indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

15
Tree	int indexOfDot = namespace . lastIndexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int indexOfDot = namespace . lastIndexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 5

16
Tree	byte indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	byte indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

17
Tree	byte indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	byte indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

18
Tree	long indexOfDot = this . namespace ;
Code	long indexOfDot = this . namespace ;
Distance : 6

19
Tree	float indexOfDot ;
Code	float indexOfDot ;
Distance : 8

20
Tree	double indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	double indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

21
Tree	double indexOfDot = false ;
Code	double indexOfDot = false ;
Distance : 7

22
Tree	boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

23
Tree	void namespace = namespace ;
Code	void namespace = namespace ;
Distance : 7

24
Tree	short namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	short namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

25
Tree	double indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	double indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

26
Tree	public char indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	public char indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

27
Tree	void indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	void indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

28
Tree	private int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	private int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

29
Tree	void indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	void indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

30
Tree	final int indexOfDot = namespace . lastIndexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int indexOfDot = namespace . lastIndexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 4

31
Tree	int indexOfDot = default: ;
Code	int indexOfDot = default: ;
Distance : 6

32
Tree	float indexOfDot = null ;
Code	float indexOfDot = null ;
Distance : 7

33
Tree	final double indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

34
Tree	void indexOfDot = NUMBER_CONSTANT ;
Code	void indexOfDot = NUMBER_CONSTANT ;
Distance : 7

35
Tree	int indexOfDot = namespace . indexOf ( namespace , null ) ;
Code	int indexOfDot = namespace . indexOf ( namespace , null ) ;
Distance : 4

36
Tree	boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

37
Tree	char indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	char indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

38
Tree	char indexOfDot = namespace ;
Code	char indexOfDot = namespace ;
Distance : 6

39
Tree	float indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	float indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

40
Tree	public boolean indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	public boolean indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

41
Tree	float indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	float indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

42
Tree	final byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	final byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

43
Tree	boolean namespace = namespace . lastIndexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	boolean namespace = namespace . lastIndexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

44
Tree	short namespace = namespace . lastIndexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	short namespace = namespace . lastIndexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 7

45
Tree	char indexOfDot = namespace . indexOf ( this , CHAR_CONS , NUMBER_CONSTANT ) ;
Code	char indexOfDot = namespace . indexOf ( this , CHAR_CONS , NUMBER_CONSTANT ) ;
Distance : 6

46
Tree	boolean namespace = namespace . lastIndexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	boolean namespace = namespace . lastIndexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

47
Tree	double namespace = namespace . lastIndexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	double namespace = namespace . lastIndexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

48
Tree	char indexOfDot = false ;
Code	char indexOfDot = false ;
Distance : 7

49
Tree	void indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	void indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

50
Tree	boolean indexOfDot = false ;
Code	boolean indexOfDot = false ;
Distance : 7

51
Tree	byte indexOfDot = NUMBER_CONSTANT ;
Code	byte indexOfDot = NUMBER_CONSTANT ;
Distance : 7

52
Tree	byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

53
Tree	public int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	public int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

54
Tree	int indexOfDot = this . namespace ;
Code	int indexOfDot = this . namespace ;
Distance : 5

55
Tree	double indexOfDot ;
Code	double indexOfDot ;
Distance : 8

56
Tree	boolean indexOfDot ;
Code	boolean indexOfDot ;
Distance : 8

57
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 4

58
Tree	int indexOfDot = false ;
Code	int indexOfDot = false ;
Distance : 6

59
Tree	int indexOfDot = namespace ;
Code	int indexOfDot = namespace ;
Distance : 5

60
Tree	long indexOfDot ;
Code	long indexOfDot ;
Distance : 8

61
Tree	final int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	final int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

62
Tree	int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 0

63
Tree	double indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	double indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

64
Tree	int indexOfDot = null ;
Code	int indexOfDot = null ;
Distance : 6

65
Tree	int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 4

66
Tree	long indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	long indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

67
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 6

68
Tree	int indexOfDot = NUMBER_CONSTANT ;
Code	int indexOfDot = NUMBER_CONSTANT ;
Distance : 6

69
Tree	int indexOfDot ;
Code	int indexOfDot ;
Distance : 7

70
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 1

71
Tree	long namespace = namespace . lastIndexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	long namespace = namespace . lastIndexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

72
Tree	void namespace = namespace . lastIndexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	void namespace = namespace . lastIndexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 7

73
Tree	long indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	long indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

74
Tree	boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

75
Tree	byte indexOfDot = continue; ;
Code	byte indexOfDot = continue; ;
Distance : 7

76
Tree	byte indexOfDot ;
Code	byte indexOfDot ;
Distance : 8

77
Tree	long indexOfDot = NUMBER_CONSTANT ;
Code	long indexOfDot = NUMBER_CONSTANT ;
Distance : 7

78
Tree	double indexOfDot = namespace ;
Code	double indexOfDot = namespace ;
Distance : 6

79
Tree	boolean indexOfDot = namespace ;
Code	boolean indexOfDot = namespace ;
Distance : 6

80
Tree	double indexOfDot = null ;
Code	double indexOfDot = null ;
Distance : 7

81
Tree	char indexOfDot ;
Code	char indexOfDot ;
Distance : 8

82
Tree	boolean indexOfDot = null ;
Code	boolean indexOfDot = null ;
Distance : 7

83
Tree	long indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	long indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

84
Tree	long indexOfDot = false ;
Code	long indexOfDot = false ;
Distance : 7

85
Tree	long indexOfDot = namespace ;
Code	long indexOfDot = namespace ;
Distance : 6

86
Tree	float indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	float indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

87
Tree	double indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	double indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

88
Tree	final int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

89
Tree	boolean indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	boolean indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

90
Tree	double indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	double indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

91
Tree	boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

92
Tree	public int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	public int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

93
Tree	long indexOfDot = null ;
Code	long indexOfDot = null ;
Distance : 7

94
Tree	double indexOfDot = NUMBER_CONSTANT ;
Code	double indexOfDot = NUMBER_CONSTANT ;
Distance : 7

95
Tree	boolean indexOfDot = NUMBER_CONSTANT ;
Code	boolean indexOfDot = NUMBER_CONSTANT ;
Distance : 7

96
Tree	char indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	char indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

97
Tree	long indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	long indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

98
Tree	long indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	long indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

99
Tree	int indexOfDot = continue; ;
Code	int indexOfDot = continue; ;
Distance : 6

========================================================================


========================================================================
Example Number: 15
Parent Code is: 
int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
-------------------------------------------------------------------------------
Child code is: 
int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=indexOfDot}) (204{val==}) (32 (800{val=namespace}) (235{val=.}) (802{val=indexOf}) (214{val=(}) (13{val=CHAR_CONS}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=indexOfDot}) (204{val==}) (32 (800{val=namespace}) (235{val=.}) (802{val=lastIndexOf}) (214{val=(}) (13{val=CHAR_CONS}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/92/parent/src_com_google_javascript_jscomp_ProcessClosurePrimitives.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Correct
========================================================================
True

0
Tree	double namespace = namespace . lastIndexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	double namespace = namespace . lastIndexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

1
Tree	char namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	char namespace = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 2

2
Tree	short namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	short namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 8

3
Tree	void namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	void namespace = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 8

4
Tree	long namespace = namespace . lastIndexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	long namespace = namespace . lastIndexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

5
Tree	double indexOfDot = namespace . lastIndexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	double indexOfDot = namespace . lastIndexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 6

6
Tree	boolean indexOfDot = namespace . lastIndexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	boolean indexOfDot = namespace . lastIndexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 6

7
Tree	int indexOfDot = return; ;
Code	int indexOfDot = return; ;
Distance : 6

8
Tree	void indexOfDot ;
Code	void indexOfDot ;
Distance : 8

9
Tree	short indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	short indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

10
Tree	int namespace = namespace . indexOf ( CHAR_CONS ) ;
Code	int namespace = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

11
Tree	public boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	public boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

12
Tree	byte indexOfDot = null ;
Code	byte indexOfDot = null ;
Distance : 7

13
Tree	int indexOfDot = namespace . lastIndexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = namespace . lastIndexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 3

14
Tree	long indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	long indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 1

15
Tree	int indexOfDot = namespace . lastIndexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int indexOfDot = namespace . lastIndexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 5

16
Tree	byte indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	byte indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

17
Tree	byte indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	byte indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

18
Tree	long indexOfDot = this . namespace ;
Code	long indexOfDot = this . namespace ;
Distance : 6

19
Tree	float indexOfDot ;
Code	float indexOfDot ;
Distance : 8

20
Tree	double indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	double indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

21
Tree	double indexOfDot = false ;
Code	double indexOfDot = false ;
Distance : 7

22
Tree	boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

23
Tree	void namespace = namespace ;
Code	void namespace = namespace ;
Distance : 7

24
Tree	short namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	short namespace = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

25
Tree	double indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	double indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

26
Tree	public char indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	public char indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

27
Tree	void indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	void indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

28
Tree	private int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	private int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

29
Tree	void indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	void indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

30
Tree	final int indexOfDot = namespace . lastIndexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int indexOfDot = namespace . lastIndexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 4

31
Tree	int indexOfDot = default: ;
Code	int indexOfDot = default: ;
Distance : 6

32
Tree	float indexOfDot = null ;
Code	float indexOfDot = null ;
Distance : 7

33
Tree	final double indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

34
Tree	void indexOfDot = NUMBER_CONSTANT ;
Code	void indexOfDot = NUMBER_CONSTANT ;
Distance : 7

35
Tree	int indexOfDot = namespace . indexOf ( namespace , null ) ;
Code	int indexOfDot = namespace . indexOf ( namespace , null ) ;
Distance : 4

36
Tree	boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

37
Tree	char indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	char indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

38
Tree	char indexOfDot = namespace ;
Code	char indexOfDot = namespace ;
Distance : 6

39
Tree	float indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	float indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

40
Tree	public boolean indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	public boolean indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

41
Tree	float indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	float indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

42
Tree	final byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	final byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

43
Tree	boolean namespace = namespace . lastIndexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	boolean namespace = namespace . lastIndexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

44
Tree	short namespace = namespace . lastIndexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	short namespace = namespace . lastIndexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 7

45
Tree	char indexOfDot = namespace . indexOf ( this , CHAR_CONS , NUMBER_CONSTANT ) ;
Code	char indexOfDot = namespace . indexOf ( this , CHAR_CONS , NUMBER_CONSTANT ) ;
Distance : 6

46
Tree	boolean namespace = namespace . lastIndexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	boolean namespace = namespace . lastIndexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

47
Tree	double namespace = namespace . lastIndexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	double namespace = namespace . lastIndexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

48
Tree	char indexOfDot = false ;
Code	char indexOfDot = false ;
Distance : 7

49
Tree	void indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	void indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

50
Tree	boolean indexOfDot = false ;
Code	boolean indexOfDot = false ;
Distance : 7

51
Tree	byte indexOfDot = NUMBER_CONSTANT ;
Code	byte indexOfDot = NUMBER_CONSTANT ;
Distance : 7

52
Tree	byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

53
Tree	public int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	public int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

54
Tree	int indexOfDot = this . namespace ;
Code	int indexOfDot = this . namespace ;
Distance : 5

55
Tree	double indexOfDot ;
Code	double indexOfDot ;
Distance : 8

56
Tree	boolean indexOfDot ;
Code	boolean indexOfDot ;
Distance : 8

57
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 4

58
Tree	int indexOfDot = false ;
Code	int indexOfDot = false ;
Distance : 6

59
Tree	int indexOfDot = namespace ;
Code	int indexOfDot = namespace ;
Distance : 5

60
Tree	long indexOfDot ;
Code	long indexOfDot ;
Distance : 8

61
Tree	final int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	final int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

62
Tree	int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
Distance : 0

63
Tree	double indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	double indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

64
Tree	int indexOfDot = null ;
Code	int indexOfDot = null ;
Distance : 6

65
Tree	int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 4

66
Tree	long indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	long indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

67
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 6

68
Tree	int indexOfDot = NUMBER_CONSTANT ;
Code	int indexOfDot = NUMBER_CONSTANT ;
Distance : 6

69
Tree	int indexOfDot ;
Code	int indexOfDot ;
Distance : 7

70
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 1

71
Tree	long namespace = namespace . lastIndexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	long namespace = namespace . lastIndexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

72
Tree	void namespace = namespace . lastIndexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	void namespace = namespace . lastIndexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 7

73
Tree	long indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	long indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

74
Tree	boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

75
Tree	byte indexOfDot = continue; ;
Code	byte indexOfDot = continue; ;
Distance : 7

76
Tree	byte indexOfDot ;
Code	byte indexOfDot ;
Distance : 8

77
Tree	long indexOfDot = NUMBER_CONSTANT ;
Code	long indexOfDot = NUMBER_CONSTANT ;
Distance : 7

78
Tree	double indexOfDot = namespace ;
Code	double indexOfDot = namespace ;
Distance : 6

79
Tree	boolean indexOfDot = namespace ;
Code	boolean indexOfDot = namespace ;
Distance : 6

80
Tree	double indexOfDot = null ;
Code	double indexOfDot = null ;
Distance : 7

81
Tree	char indexOfDot ;
Code	char indexOfDot ;
Distance : 8

82
Tree	boolean indexOfDot = null ;
Code	boolean indexOfDot = null ;
Distance : 7

83
Tree	long indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	long indexOfDot = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

84
Tree	long indexOfDot = false ;
Code	long indexOfDot = false ;
Distance : 7

85
Tree	long indexOfDot = namespace ;
Code	long indexOfDot = namespace ;
Distance : 6

86
Tree	float indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	float indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

87
Tree	double indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	double indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

88
Tree	final int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

89
Tree	boolean indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	boolean indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

90
Tree	double indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	double indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

91
Tree	boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

92
Tree	public int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	public int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

93
Tree	long indexOfDot = null ;
Code	long indexOfDot = null ;
Distance : 7

94
Tree	double indexOfDot = NUMBER_CONSTANT ;
Code	double indexOfDot = NUMBER_CONSTANT ;
Distance : 7

95
Tree	boolean indexOfDot = NUMBER_CONSTANT ;
Code	boolean indexOfDot = NUMBER_CONSTANT ;
Distance : 7

96
Tree	char indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	char indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

97
Tree	long indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	long indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

98
Tree	long indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	long indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

99
Tree	int indexOfDot = continue; ;
Code	int indexOfDot = continue; ;
Distance : 6

========================================================================


========================================================================
Example Number: 16
Parent Code is: 
! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
-------------------------------------------------------------------------------
Child code is: 
! type . restrictByNotNullOrUndefined () . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (38 (207{val=!}) (32 (800{val=type}) (235{val=.}) (802{val=isSubtype}) (214{val=(}) (32 (800{val=typeRegistry}) (235{val=.}) (802{val=getNativeType}) (214{val=(}) (800{val=OBJECT_TYPE}) (215{val=)})) (215{val=)}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (38 (207{val=!}) (32 (32 (800{val=type}) (235{val=.}) (802{val=restrictByNotNullOrUndefined}) (216{val=()})) (235{val=.}) (802{val=isSubtype}) (214{val=(}) (32 (800{val=typeRegistry}) (235{val=.}) (802{val=getNativeType}) (214{val=(}) (800{val=OBJECT_TYPE}) (215{val=)})) (215{val=)}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/90/parent/src_com_google_javascript_jscomp_FunctionTypeBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	! OBJECT_TYPE . getNativeType ( getNativeType ( OBJECT_TYPE ) )
Code	! OBJECT_TYPE . getNativeType ( getNativeType ( OBJECT_TYPE ) )
Distance : 7

1
Tree	OBJECT_TYPE . isSubtype ( typeRegistry ) && type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	OBJECT_TYPE . isSubtype ( typeRegistry ) && type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 10

2
Tree	! type . isSubtype ( OBJECT_TYPE . restrictByNotNullOrUndefined ( NUMBER_CONSTANT , OBJECT_TYPE ) )
Code	! type . isSubtype ( OBJECT_TYPE . restrictByNotNullOrUndefined ( NUMBER_CONSTANT , OBJECT_TYPE ) )
Distance : 7

3
Tree	! OBJECT_TYPE . getNativeType ( typeRegistry ) . isSubtype ()
Code	! OBJECT_TYPE . getNativeType ( typeRegistry ) . isSubtype ()
Distance : 11

4
Tree	OBJECT_TYPE . getNativeType ( typeRegistry ) && type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	OBJECT_TYPE . getNativeType ( typeRegistry ) && type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 10

5
Tree	( NUMBER_CONSTANT * type . getNativeType ( type . isSubtype ( typeRegistry ) ) )
Code	( NUMBER_CONSTANT * type . getNativeType ( type . isSubtype ( typeRegistry ) ) )
Distance : 10

6
Tree	! type . getNativeType ( OBJECT_TYPE . getNativeType ( NUMBER_CONSTANT , type ) )
Code	! type . getNativeType ( OBJECT_TYPE . getNativeType ( NUMBER_CONSTANT , type ) )
Distance : 8

7
Tree	type . restrictByNotNullOrUndefined ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) ) < typeRegistry
Code	type . restrictByNotNullOrUndefined ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) ) < typeRegistry
Distance : 7

8
Tree	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE . isSubtype ( type ) )
Code	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE . isSubtype ( type ) )
Distance : 6

9
Tree	typeRegistry . restrictByNotNullOrUndefined ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) ) < OBJECT_TYPE
Code	typeRegistry . restrictByNotNullOrUndefined ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) ) < OBJECT_TYPE
Distance : 8

10
Tree	type . restrictByNotNullOrUndefined ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE . getNativeType ( typeRegistry ) )
Code	type . restrictByNotNullOrUndefined ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE . getNativeType ( typeRegistry ) )
Distance : 8

11
Tree	! OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( type ) )
Code	! OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( type ) )
Distance : 5

12
Tree	OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry ) && type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry ) && type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 8

13
Tree	type . isSubtype ( typeRegistry ) && type . restrictByNotNullOrUndefined ( typeRegistry )
Code	type . isSubtype ( typeRegistry ) && type . restrictByNotNullOrUndefined ( typeRegistry )
Distance : 10

14
Tree	type . getNativeType ( typeRegistry ) && type . restrictByNotNullOrUndefined ( typeRegistry )
Code	type . getNativeType ( typeRegistry ) && type . restrictByNotNullOrUndefined ( typeRegistry )
Distance : 10

15
Tree	OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry ) && type . isSubtype ( typeRegistry )
Code	OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry ) && type . isSubtype ( typeRegistry )
Distance : 10

16
Tree	! type . isSubtype ( type . restrictByNotNullOrUndefined ( typeRegistry ) )
Code	! type . isSubtype ( type . restrictByNotNullOrUndefined ( typeRegistry ) )
Distance : 6

17
Tree	! typeRegistry . restrictByNotNullOrUndefined ( getNativeType ( typeRegistry ) )
Code	! typeRegistry . restrictByNotNullOrUndefined ( getNativeType ( typeRegistry ) )
Distance : 7

18
Tree	type = ( typeRegistry ) typeRegistry . isSubtype ( OBJECT_TYPE )
Code	type = ( typeRegistry ) typeRegistry . isSubtype ( OBJECT_TYPE )
Distance : 9

19
Tree	! type . restrictByNotNullOrUndefined ( type . getNativeType ( NUMBER_CONSTANT , type ) )
Code	! type . restrictByNotNullOrUndefined ( type . getNativeType ( NUMBER_CONSTANT , type ) )
Distance : 7

20
Tree	( NUMBER_CONSTANT * OBJECT_TYPE . getNativeType ( typeRegistry ) )
Code	( NUMBER_CONSTANT * OBJECT_TYPE . getNativeType ( typeRegistry ) )
Distance : 10

21
Tree	type = ( typeRegistry ) typeRegistry . restrictByNotNullOrUndefined ( typeRegistry )
Code	type = ( typeRegistry ) typeRegistry . restrictByNotNullOrUndefined ( typeRegistry )
Distance : 10

22
Tree	type . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Code	type . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Distance : 8

23
Tree	! OBJECT_TYPE . getNativeType ( typeRegistry ) . restrictByNotNullOrUndefined ()
Code	! OBJECT_TYPE . getNativeType ( typeRegistry ) . restrictByNotNullOrUndefined ()
Distance : 11

24
Tree	type . isSubtype ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) )
Code	type . isSubtype ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) )
Distance : 10

25
Tree	type . getNativeType ( typeRegistry . getNativeType ( type ) ) < OBJECT_TYPE
Code	type . getNativeType ( typeRegistry . getNativeType ( type ) ) < OBJECT_TYPE
Distance : 8

26
Tree	type . restrictByNotNullOrUndefined ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	type . restrictByNotNullOrUndefined ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 9

27
Tree	type . isSubtype ( typeRegistry ) && type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	type . isSubtype ( typeRegistry ) && type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 8

28
Tree	! getNativeType ( type . getNativeType ( type ) )
Code	! getNativeType ( type . getNativeType ( type ) )
Distance : 8

29
Tree	type . getNativeType ( typeRegistry ) && type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	type . getNativeType ( typeRegistry ) && type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 8

30
Tree	! restrictByNotNullOrUndefined ( OBJECT_TYPE . isSubtype ( typeRegistry ) )
Code	! restrictByNotNullOrUndefined ( OBJECT_TYPE . isSubtype ( typeRegistry ) )
Distance : 8

31
Tree	type . getNativeType ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) )
Code	type . getNativeType ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) )
Distance : 10

32
Tree	OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry ) && type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry ) && type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 7

33
Tree	OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( typeRegistry ) ) < typeRegistry
Code	OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( typeRegistry ) ) < typeRegistry
Distance : 8

34
Tree	type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Code	type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Distance : 7

35
Tree	type . restrictByNotNullOrUndefined ( type . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Code	type . restrictByNotNullOrUndefined ( type . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Distance : 7

36
Tree	OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < type
Code	OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < type
Distance : 7

37
Tree	typeRegistry . restrictByNotNullOrUndefined ( typeRegistry ) && type . getNativeType ( typeRegistry )
Code	typeRegistry . restrictByNotNullOrUndefined ( typeRegistry ) && type . getNativeType ( typeRegistry )
Distance : 9

38
Tree	type . getNativeType ( typeRegistry . isSubtype ( OBJECT_TYPE ) ) < typeRegistry
Code	type . getNativeType ( typeRegistry . isSubtype ( OBJECT_TYPE ) ) < typeRegistry
Distance : 8

39
Tree	! type . getNativeType ( type . isSubtype ( NUMBER_CONSTANT , OBJECT_TYPE ) )
Code	! type . getNativeType ( type . isSubtype ( NUMBER_CONSTANT , OBJECT_TYPE ) )
Distance : 7

40
Tree	! restrictByNotNullOrUndefined ( type . getNativeType ( type ) )
Code	! restrictByNotNullOrUndefined ( type . getNativeType ( type ) )
Distance : 7

41
Tree	type . isSubtype ( typeRegistry . isSubtype ( OBJECT_TYPE ) ) < typeRegistry
Code	type . isSubtype ( typeRegistry . isSubtype ( OBJECT_TYPE ) ) < typeRegistry
Distance : 7

42
Tree	typeRegistry . restrictByNotNullOrUndefined ( typeRegistry ) && type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	typeRegistry . restrictByNotNullOrUndefined ( typeRegistry ) && type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 9

43
Tree	typeRegistry . isSubtype ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	typeRegistry . isSubtype ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 9

44
Tree	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( type . isSubtype ( typeRegistry ) ) )
Code	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( type . isSubtype ( typeRegistry ) ) )
Distance : 9

45
Tree	! OBJECT_TYPE . getNativeType ( typeRegistry ) . getNativeType ()
Code	! OBJECT_TYPE . getNativeType ( typeRegistry ) . getNativeType ()
Distance : 10

46
Tree	! type . isSubtype ( isSubtype ( typeRegistry ) )
Code	! type . isSubtype ( isSubtype ( typeRegistry ) )
Distance : 7

47
Tree	! isSubtype ( typeRegistry . restrictByNotNullOrUndefined ( type ) )
Code	! isSubtype ( typeRegistry . restrictByNotNullOrUndefined ( type ) )
Distance : 7

48
Tree	( NUMBER_CONSTANT * typeRegistry . getNativeType ( typeRegistry ) )
Code	( NUMBER_CONSTANT * typeRegistry . getNativeType ( typeRegistry ) )
Distance : 9

49
Tree	OBJECT_TYPE . isSubtype ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE )
Code	OBJECT_TYPE . isSubtype ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE )
Distance : 10

50
Tree	type . isSubtype ( typeRegistry ) && type . getNativeType ( typeRegistry )
Code	type . isSubtype ( typeRegistry ) && type . getNativeType ( typeRegistry )
Distance : 9

51
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == rhs.b )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == rhs.b )
Distance : 10

52
Tree	! type . restrictByNotNullOrUndefined ( isStrict . getNativeType ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( isStrict . getNativeType ( OBJECT_TYPE ) )
Distance : 4

53
Tree	OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry ) && type . restrictByNotNullOrUndefined ( OBJECT_TYPE )
Code	OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry ) && type . restrictByNotNullOrUndefined ( OBJECT_TYPE )
Distance : 9

54
Tree	! type . isSubtype ( isUnknownType . getNativeType ( OBJECT_TYPE ) )
Code	! type . isSubtype ( isUnknownType . getNativeType ( OBJECT_TYPE ) )
Distance : 4

55
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( OBJECT_TYPE ) , OBJECT_TYPE )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( OBJECT_TYPE ) , OBJECT_TYPE )
Distance : 6

56
Tree	! type . restrictByNotNullOrUndefined ( params . getNativeType ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( params . getNativeType ( OBJECT_TYPE ) )
Distance : 4

57
Tree	! type . restrictByNotNullOrUndefined ( jsdoc . getNativeType ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( jsdoc . getNativeType ( OBJECT_TYPE ) )
Distance : 4

58
Tree	! getNativeType ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! getNativeType ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 7

59
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) . restrictByNotNullOrUndefined ( FeatureSet.ES5 )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) . restrictByNotNullOrUndefined ( FeatureSet.ES5 )
Distance : 7

60
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( com.google.protobuf.GeneratedMessageV3.BuilderParent )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( com.google.protobuf.GeneratedMessageV3.BuilderParent )
Distance : 6

61
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( options.dartPass )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( options.dartPass )
Distance : 6

62
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( LocalizedFormats.ZERO_NORM )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( LocalizedFormats.ZERO_NORM )
Distance : 6

63
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( typeRegistry ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( typeRegistry ) )
Distance : 5

64
Tree	! type . isSubtype ( type . getNativeType ( NUMBER_CONSTANT , typeRegistry ) )
Code	! type . isSubtype ( type . getNativeType ( NUMBER_CONSTANT , typeRegistry ) )
Distance : 7

65
Tree	! type . isSubtype ( OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE ) , OBJECT_TYPE )
Code	! type . isSubtype ( OBJECT_TYPE . restrictByNotNullOrUndefined ( OBJECT_TYPE ) , OBJECT_TYPE )
Distance : 7

66
Tree	! type . isSubtype ( typeRegistry . restrictByNotNullOrUndefined ( NUMBER_CONSTANT , type ) )
Code	! type . isSubtype ( typeRegistry . restrictByNotNullOrUndefined ( NUMBER_CONSTANT , type ) )
Distance : 7

67
Tree	OBJECT_TYPE . isSubtype ( typeRegistry . isSubtype ( OBJECT_TYPE ) ) < OBJECT_TYPE
Code	OBJECT_TYPE . isSubtype ( typeRegistry . isSubtype ( OBJECT_TYPE ) ) < OBJECT_TYPE
Distance : 8

68
Tree	! type . getNativeType ( OBJECT_TYPE . restrictByNotNullOrUndefined ( NUMBER_CONSTANT , OBJECT_TYPE ) )
Code	! type . getNativeType ( OBJECT_TYPE . restrictByNotNullOrUndefined ( NUMBER_CONSTANT , OBJECT_TYPE ) )
Distance : 8

69
Tree	( NUMBER_CONSTANT * OBJECT_TYPE . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) )
Code	( NUMBER_CONSTANT * OBJECT_TYPE . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) )
Distance : 7

70
Tree	! typeRegistry . isSubtype ( typeRegistry ) . restrictByNotNullOrUndefined ()
Code	! typeRegistry . isSubtype ( typeRegistry ) . restrictByNotNullOrUndefined ()
Distance : 10

71
Tree	OBJECT_TYPE . isSubtype ( typeRegistry ) && type . restrictByNotNullOrUndefined ( OBJECT_TYPE )
Code	OBJECT_TYPE . isSubtype ( typeRegistry ) && type . restrictByNotNullOrUndefined ( OBJECT_TYPE )
Distance : 10

72
Tree	! typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	! typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 6

73
Tree	OBJECT_TYPE . getNativeType ( typeRegistry . isSubtype ( OBJECT_TYPE ) ) < OBJECT_TYPE
Code	OBJECT_TYPE . getNativeType ( typeRegistry . isSubtype ( OBJECT_TYPE ) ) < OBJECT_TYPE
Distance : 9

74
Tree	typeRegistry . getNativeType ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	typeRegistry . getNativeType ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 9

75
Tree	! isSubtype ( type . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	! isSubtype ( type . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 7

76
Tree	! type . restrictByNotNullOrUndefined ( type . restrictByNotNullOrUndefined ( NUMBER_CONSTANT , OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( type . restrictByNotNullOrUndefined ( NUMBER_CONSTANT , OBJECT_TYPE ) )
Distance : 7

77
Tree	OBJECT_TYPE . getNativeType ( typeRegistry ) && type . restrictByNotNullOrUndefined ( OBJECT_TYPE )
Code	OBJECT_TYPE . getNativeType ( typeRegistry ) && type . restrictByNotNullOrUndefined ( OBJECT_TYPE )
Distance : 10

78
Tree	( NUMBER_CONSTANT * type . isSubtype ( typeRegistry . restrictByNotNullOrUndefined ( type ) ) )
Code	( NUMBER_CONSTANT * type . isSubtype ( typeRegistry . restrictByNotNullOrUndefined ( type ) ) )
Distance : 8

79
Tree	OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( OBJECT_TYPE ) ) < OBJECT_TYPE
Code	OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( OBJECT_TYPE ) ) < OBJECT_TYPE
Distance : 8

80
Tree	! OBJECT_TYPE . isSubtype ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Code	! OBJECT_TYPE . isSubtype ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Distance : 5

81
Tree	! type . getNativeType ( typeRegistry . restrictByNotNullOrUndefined ( type ) , OBJECT_TYPE )
Code	! type . getNativeType ( typeRegistry . restrictByNotNullOrUndefined ( type ) , OBJECT_TYPE )
Distance : 8

82
Tree	! type . isSubtype ( OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry ) )
Code	! type . isSubtype ( OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry ) )
Distance : 6

83
Tree	! type . restrictByNotNullOrUndefined ( type . getNativeType ( OBJECT_TYPE ) , type )
Code	! type . restrictByNotNullOrUndefined ( type . getNativeType ( OBJECT_TYPE ) , type )
Distance : 6

84
Tree	OBJECT_TYPE . getNativeType ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	OBJECT_TYPE . getNativeType ( typeRegistry ) && type . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 10

85
Tree	typeRegistry . restrictByNotNullOrUndefined ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	typeRegistry . restrictByNotNullOrUndefined ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 8

86
Tree	typeRegistry . getNativeType ( typeRegistry ) && type . restrictByNotNullOrUndefined ( OBJECT_TYPE )
Code	typeRegistry . getNativeType ( typeRegistry ) && type . restrictByNotNullOrUndefined ( OBJECT_TYPE )
Distance : 10

87
Tree	! type . getNativeType ( isSubtypeOf . getNativeType ( OBJECT_TYPE ) )
Code	! type . getNativeType ( isSubtypeOf . getNativeType ( OBJECT_TYPE ) )
Distance : 5

88
Tree	! getNativeType ( OBJECT_TYPE . isSubtype ( typeRegistry ) )
Code	! getNativeType ( OBJECT_TYPE . isSubtype ( typeRegistry ) )
Distance : 8

89
Tree	OBJECT_TYPE . getNativeType ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) ) < OBJECT_TYPE
Code	OBJECT_TYPE . getNativeType ( typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE ) ) < OBJECT_TYPE
Distance : 9

90
Tree	typeRegistry = ( typeRegistry ) typeRegistry . isSubtype ( typeRegistry )
Code	typeRegistry = ( typeRegistry ) typeRegistry . isSubtype ( typeRegistry )
Distance : 11

91
Tree	! isSubtype ( OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry ) )
Code	! isSubtype ( OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry ) )
Distance : 8

92
Tree	type = ( type ) typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE )
Code	type = ( type ) typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE )
Distance : 9

93
Tree	! type . getNativeType ( OBJECT_TYPE . restrictByNotNullOrUndefined ( NUMBER_CONSTANT , typeRegistry ) )
Code	! type . getNativeType ( OBJECT_TYPE . restrictByNotNullOrUndefined ( NUMBER_CONSTANT , typeRegistry ) )
Distance : 9

94
Tree	OBJECT_TYPE . getNativeType ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) )
Code	OBJECT_TYPE . getNativeType ( typeRegistry ) && type . isSubtype ( OBJECT_TYPE . isSubtype ( OBJECT_TYPE ) )
Distance : 10

95
Tree	type . getNativeType ( typeRegistry ) && type . getNativeType ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Code	type . getNativeType ( typeRegistry ) && type . getNativeType ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Distance : 9

96
Tree	! typeRegistry . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( NUMBER_CONSTANT , type ) )
Code	! typeRegistry . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( NUMBER_CONSTANT , type ) )
Distance : 7

97
Tree	! type . isSubtype ( isSubtype ( type ) )
Code	! type . isSubtype ( isSubtype ( type ) )
Distance : 7

98
Tree	! OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( NUMBER_CONSTANT , OBJECT_TYPE ) )
Code	! OBJECT_TYPE . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( NUMBER_CONSTANT , OBJECT_TYPE ) )
Distance : 7

99
Tree	type . getNativeType ( typeRegistry . restrictByNotNullOrUndefined ( typeRegistry ) ) < OBJECT_TYPE
Code	type . getNativeType ( typeRegistry . restrictByNotNullOrUndefined ( typeRegistry ) ) < OBJECT_TYPE
Distance : 9

========================================================================


========================================================================
Example Number: 17
Parent Code is: 
return true ;
-------------------------------------------------------------------------------
Child code is: 
return false ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (9{val=true}) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (9{val=false}) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/86/parent/src_com_google_javascript_jscomp_NodeUtil.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , callNode , tolerance ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , callNode , tolerance ) ;
Distance : 12

1
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , tolerance , val ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , tolerance , val ) ;
Distance : 12

2
Tree	super ( parent , NameBasedDefinitionProvider , Verification.EXPLICIT , scopeCreator , tolerance ) ;
Code	super ( parent , NameBasedDefinitionProvider , Verification.EXPLICIT , scopeCreator , tolerance ) ;
Distance : 12

3
Tree	super ( parent , NameBasedDefinitionProvider , Verification.EXPLICIT , tolerance , tolerance ) ;
Code	super ( parent , NameBasedDefinitionProvider , Verification.EXPLICIT , tolerance , tolerance ) ;
Distance : 12

4
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , scopeCreator , lower ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , scopeCreator , lower ) ;
Distance : 12

5
Tree	super ( parent , inMemoryClassObjects , i2s2 , tolerance , scopeCreator ) ;
Code	super ( parent , inMemoryClassObjects , i2s2 , tolerance , scopeCreator ) ;
Distance : 12

6
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , TransformUtils , tolerance ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , TransformUtils , tolerance ) ;
Distance : 12

7
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , tolerance , tol ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , tolerance , tol ) ;
Distance : 12

8
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , tolerance , lower ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , tolerance , lower ) ;
Distance : 12

9
Tree	super ( point , NameBasedDefinitionProvider , i2s2 , scopeCreator , scopeCreator ) ;
Code	super ( point , NameBasedDefinitionProvider , i2s2 , scopeCreator , scopeCreator ) ;
Distance : 12

10
Tree	super ( parent , inMemoryClassObjects , i2s2 , scopeCreator , scopeCreator ) ;
Code	super ( parent , inMemoryClassObjects , i2s2 , scopeCreator , scopeCreator ) ;
Distance : 12

11
Tree	super ( parent , inMemoryClassObjects , i2s2 , scopeCreator , tolerance ) ;
Code	super ( parent , inMemoryClassObjects , i2s2 , scopeCreator , tolerance ) ;
Distance : 12

12
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , warningsGuard , scopeCreator ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , warningsGuard , scopeCreator ) ;
Distance : 12

13
Tree	super ( parent , iChronology , i2s2 , tolerance , scopeCreator ) ;
Code	super ( parent , iChronology , i2s2 , tolerance , scopeCreator ) ;
Distance : 12

14
Tree	super ( parent , inMemoryClassObjects , i2s2 , tolerance , tolerance ) ;
Code	super ( parent , inMemoryClassObjects , i2s2 , tolerance , tolerance ) ;
Distance : 12

15
Tree	super ( point , NameBasedDefinitionProvider , i2s2 , tolerance , scopeCreator ) ;
Code	super ( point , NameBasedDefinitionProvider , i2s2 , tolerance , scopeCreator ) ;
Distance : 12

16
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , scopeCreator , SyntacticScopeCreator ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , scopeCreator , SyntacticScopeCreator ) ;
Distance : 12

17
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , SyntacticScopeCreator , scopeCreator ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , SyntacticScopeCreator , scopeCreator ) ;
Distance : 12

18
Tree	super ( parent , n , i2s2 , scopeCreator , scopeCreator ) ;
Code	super ( parent , n , i2s2 , scopeCreator , scopeCreator ) ;
Distance : 12

19
Tree	super ( point , NameBasedDefinitionProvider , i2s2 , scopeCreator , tolerance ) ;
Code	super ( point , NameBasedDefinitionProvider , i2s2 , scopeCreator , tolerance ) ;
Distance : 12

20
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , tolerance , SyntacticScopeCreator ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , tolerance , SyntacticScopeCreator ) ;
Distance : 12

21
Tree	super ( parent , iChronology , i2s2 , scopeCreator , scopeCreator ) ;
Code	super ( parent , iChronology , i2s2 , scopeCreator , scopeCreator ) ;
Distance : 12

22
Tree	super ( parent , iChronology , i2s2 , scopeCreator , tolerance ) ;
Code	super ( parent , iChronology , i2s2 , scopeCreator , tolerance ) ;
Distance : 12

23
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , scopeCreator , tol ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , scopeCreator , tol ) ;
Distance : 12

24
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , scopeCreator , val ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , scopeCreator , val ) ;
Distance : 12

25
Tree	return degreesOfFreedom % NUMBER_CONSTANT ;
Code	return degreesOfFreedom % NUMBER_CONSTANT ;
Distance : 3

26
Tree	return currentDerivative % NUMBER_CONSTANT ;
Code	return currentDerivative % NUMBER_CONSTANT ;
Distance : 3

27
Tree	return parts.length % NUMBER_CONSTANT ;
Code	return parts.length % NUMBER_CONSTANT ;
Distance : 3

28
Tree	return obj % NUMBER_CONSTANT ;
Code	return obj % NUMBER_CONSTANT ;
Distance : 3

29
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , column , tolerance ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , column , tolerance ) ;
Distance : 12

30
Tree	super ( parent , NameBasedDefinitionProvider , obj2 , scopeCreator , scopeCreator ) ;
Code	super ( parent , NameBasedDefinitionProvider , obj2 , scopeCreator , scopeCreator ) ;
Distance : 12

31
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , setKey , tolerance ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , setKey , tolerance ) ;
Distance : 12

32
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , maxIterationCount , scopeCreator ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , maxIterationCount , scopeCreator ) ;
Distance : 12

33
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , callNode , randomData ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , callNode , randomData ) ;
Distance : 12

34
Tree	super ( parent , NameBasedDefinitionProvider , parent , tolerance , tolerance ) ;
Code	super ( parent , NameBasedDefinitionProvider , parent , tolerance , tolerance ) ;
Distance : 12

35
Tree	super ( parent , NameBasedDefinitionProvider , obj2 , tolerance , tolerance ) ;
Code	super ( parent , NameBasedDefinitionProvider , obj2 , tolerance , tolerance ) ;
Distance : 12

36
Tree	super ( parent , NameBasedDefinitionProvider , obj2 , scopeCreator , tolerance ) ;
Code	super ( parent , NameBasedDefinitionProvider , obj2 , scopeCreator , tolerance ) ;
Distance : 12

37
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , maxIterationCount , tolerance ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , maxIterationCount , tolerance ) ;
Distance : 12

38
Tree	super ( parent , NameBasedDefinitionProvider , parent , tolerance , scopeCreator ) ;
Code	super ( parent , NameBasedDefinitionProvider , parent , tolerance , scopeCreator ) ;
Distance : 12

39
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , scopeCreator , height ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , scopeCreator , height ) ;
Distance : 12

40
Tree	super ( parent , NameBasedDefinitionProvider , Verification.EXPLICIT , scopeCreator , scopeCreator ) ;
Code	super ( parent , NameBasedDefinitionProvider , Verification.EXPLICIT , scopeCreator , scopeCreator ) ;
Distance : 12

41
Tree	super ( parent , NameBasedDefinitionProvider , parent , scopeCreator , tolerance ) ;
Code	super ( parent , NameBasedDefinitionProvider , parent , scopeCreator , tolerance ) ;
Distance : 12

42
Tree	super ( parent , NameBasedDefinitionProvider , Verification.EXPLICIT , tolerance , scopeCreator ) ;
Code	super ( parent , NameBasedDefinitionProvider , Verification.EXPLICIT , tolerance , scopeCreator ) ;
Distance : 12

43
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , tolerance , height ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , tolerance , height ) ;
Distance : 12

44
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , TransformUtils , scopeCreator ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , TransformUtils , scopeCreator ) ;
Distance : 12

45
Tree	super ( parent , NameBasedDefinitionProvider , parent , scopeCreator , scopeCreator ) ;
Code	super ( parent , NameBasedDefinitionProvider , parent , scopeCreator , scopeCreator ) ;
Distance : 12

46
Tree	super ( parent , iChronology , i2s2 , tolerance , tolerance ) ;
Code	super ( parent , iChronology , i2s2 , tolerance , tolerance ) ;
Distance : 12

47
Tree	super ( point , NameBasedDefinitionProvider , i2s2 , tolerance , tolerance ) ;
Code	super ( point , NameBasedDefinitionProvider , i2s2 , tolerance , tolerance ) ;
Distance : 12

48
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , warningsGuard , tolerance ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , warningsGuard , tolerance ) ;
Distance : 12

49
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , val , tolerance ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , val , tolerance ) ;
Distance : 12

50
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , FastFourierTransformer , scopeCreator ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , FastFourierTransformer , scopeCreator ) ;
Distance : 12

51
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , scopeCreator , parent ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , scopeCreator , parent ) ;
Distance : 12

52
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , tolerance , parent ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , tolerance , parent ) ;
Distance : 12

53
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , FastFourierTransformer , tolerance ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , FastFourierTransformer , tolerance ) ;
Distance : 12

54
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , scopeCreator , randomData ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , scopeCreator , randomData ) ;
Distance : 12

55
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , forward , scopeCreator ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , forward , scopeCreator ) ;
Distance : 12

56
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , height , scopeCreator ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , height , scopeCreator ) ;
Distance : 12

57
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , tolerance , randomData ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , tolerance , randomData ) ;
Distance : 12

58
Tree	super ( tolerance , NameBasedDefinitionProvider , i2s2 , tolerance , tolerance ) ;
Code	super ( tolerance , NameBasedDefinitionProvider , i2s2 , tolerance , tolerance ) ;
Distance : 12

59
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , height , tolerance ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , height , tolerance ) ;
Distance : 12

60
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , parent , scopeCreator ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , parent , scopeCreator ) ;
Distance : 12

61
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , rawType , scopeCreator ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , rawType , scopeCreator ) ;
Distance : 12

62
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , parent , tolerance ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , parent , tolerance ) ;
Distance : 12

63
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , rawType , tolerance ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , rawType , tolerance ) ;
Distance : 12

64
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , M3 , scopeCreator ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , M3 , scopeCreator ) ;
Distance : 12

65
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , tol , scopeCreator ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , tol , scopeCreator ) ;
Distance : 12

66
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , M3 , tolerance ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , M3 , tolerance ) ;
Distance : 12

67
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , tol , tolerance ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , tol , tolerance ) ;
Distance : 12

68
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , randomData , scopeCreator ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , randomData , scopeCreator ) ;
Distance : 12

69
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , forward , tolerance ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , forward , tolerance ) ;
Distance : 12

70
Tree	super ( tolerance , NameBasedDefinitionProvider , i2s2 , scopeCreator , tolerance ) ;
Code	super ( tolerance , NameBasedDefinitionProvider , i2s2 , scopeCreator , tolerance ) ;
Distance : 12

71
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , val , scopeCreator ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , val , scopeCreator ) ;
Distance : 12

72
Tree	super ( tolerance , NameBasedDefinitionProvider , i2s2 , tolerance , scopeCreator ) ;
Code	super ( tolerance , NameBasedDefinitionProvider , i2s2 , tolerance , scopeCreator ) ;
Distance : 12

73
Tree	super ( parent , n , i2s2 , tolerance , scopeCreator ) ;
Code	super ( parent , n , i2s2 , tolerance , scopeCreator ) ;
Distance : 12

74
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , SyntacticScopeCreator , tolerance ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , SyntacticScopeCreator , tolerance ) ;
Distance : 12

75
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , scopeCreator , FastFourierTransformer ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , scopeCreator , FastFourierTransformer ) ;
Distance : 12

76
Tree	super ( parent , n , i2s2 , scopeCreator , tolerance ) ;
Code	super ( parent , n , i2s2 , scopeCreator , tolerance ) ;
Distance : 12

77
Tree	super ( parent , NameBasedDefinitionProvider , EMPTY , scopeCreator , scopeCreator ) ;
Code	super ( parent , NameBasedDefinitionProvider , EMPTY , scopeCreator , scopeCreator ) ;
Distance : 12

78
Tree	super ( parent , n , i2s2 , tolerance , tolerance ) ;
Code	super ( parent , n , i2s2 , tolerance , tolerance ) ;
Distance : 12

79
Tree	super ( parent , NameBasedDefinitionProvider , EMPTY , tolerance , scopeCreator ) ;
Code	super ( parent , NameBasedDefinitionProvider , EMPTY , tolerance , scopeCreator ) ;
Distance : 12

80
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , tolerance , FastFourierTransformer ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , tolerance , FastFourierTransformer ) ;
Distance : 12

81
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , scopeCreator , obj2 ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , scopeCreator , obj2 ) ;
Distance : 12

82
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , tolerance , obj2 ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , tolerance , obj2 ) ;
Distance : 12

83
Tree	super ( parent , NameBasedDefinitionProvider , EMPTY , scopeCreator , tolerance ) ;
Code	super ( parent , NameBasedDefinitionProvider , EMPTY , scopeCreator , tolerance ) ;
Distance : 12

84
Tree	super ( parent , parent , i2s2 , scopeCreator , scopeCreator ) ;
Code	super ( parent , parent , i2s2 , scopeCreator , scopeCreator ) ;
Distance : 12

85
Tree	super ( parent , NameBasedDefinitionProvider , EMPTY , tolerance , tolerance ) ;
Code	super ( parent , NameBasedDefinitionProvider , EMPTY , tolerance , tolerance ) ;
Distance : 12

86
Tree	super ( parent , parent , i2s2 , tolerance , scopeCreator ) ;
Code	super ( parent , parent , i2s2 , tolerance , scopeCreator ) ;
Distance : 12

87
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , ArithmeticUtils , scopeCreator ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , ArithmeticUtils , scopeCreator ) ;
Distance : 12

88
Tree	super ( parent , parent , i2s2 , scopeCreator , tolerance ) ;
Code	super ( parent , parent , i2s2 , scopeCreator , tolerance ) ;
Distance : 12

89
Tree	super ( parent , parent , i2s2 , tolerance , tolerance ) ;
Code	super ( parent , parent , i2s2 , tolerance , tolerance ) ;
Distance : 12

90
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , scopeCreator , forward ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , scopeCreator , forward ) ;
Distance : 12

91
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , ArithmeticUtils , tolerance ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , ArithmeticUtils , tolerance ) ;
Distance : 12

92
Tree	super ( tolerance , NameBasedDefinitionProvider , i2s2 , scopeCreator , scopeCreator ) ;
Code	super ( tolerance , NameBasedDefinitionProvider , i2s2 , scopeCreator , scopeCreator ) ;
Distance : 12

93
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , tolerance , forward ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , tolerance , forward ) ;
Distance : 12

94
Tree	return restrictToNonNegative % NUMBER_CONSTANT ;
Code	return restrictToNonNegative % NUMBER_CONSTANT ;
Distance : 3

95
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , randomData , tolerance ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , randomData , tolerance ) ;
Distance : 12

96
Tree	return NaN % NUMBER_CONSTANT ;
Code	return NaN % NUMBER_CONSTANT ;
Distance : 3

97
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , callNode , scopeCreator ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , callNode , scopeCreator ) ;
Distance : 12

98
Tree	return RemovalType.REMOVE_RHS ;
Code	return RemovalType.REMOVE_RHS ;
Distance : 1

99
Tree	return TokenType.TYPEOF ;
Code	return TokenType.TYPEOF ;
Distance : 1

========================================================================


========================================================================
Example Number: 18
Parent Code is: 
return TernaryValue.TRUE ;
-------------------------------------------------------------------------------
Child code is: 
return TernaryValue.UNKNOWN ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (40{val=TernaryValue.TRUE}) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (40{val=TernaryValue.UNKNOWN}) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/75/parent/src_com_google_javascript_jscomp_NodeUtil.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	return y2 . compare ( null ) ;
Code	return y2 . compare ( null ) ;
Distance : 6

1
Tree	return DEFAULT_RETURN_VALUES . createsScope ( parent ) ;
Code	return DEFAULT_RETURN_VALUES . createsScope ( parent ) ;
Distance : 6

2
Tree	return returnValues . createsScope ( null ) ;
Code	return returnValues . createsScope ( null ) ;
Distance : 6

3
Tree	return incrementalCheckMode . createsScope ( parent ) ;
Code	return incrementalCheckMode . createsScope ( parent ) ;
Distance : 6

4
Tree	return new PolygonsSet ( STRING_CONSTANT ) ;
Code	return new PolygonsSet ( STRING_CONSTANT ) ;
Distance : 5

5
Tree	return directions . createsScope ( parent ) ;
Code	return directions . createsScope ( parent ) ;
Distance : 6

6
Tree	return new RankDeficientMatrixException ( STRING_CONSTANT ) ;
Code	return new RankDeficientMatrixException ( STRING_CONSTANT ) ;
Distance : 5

7
Tree	return new counts ( STRING_CONSTANT ) ;
Code	return new counts ( STRING_CONSTANT ) ;
Distance : 5

8
Tree	return new isClinitMethod ( STRING_CONSTANT ) ;
Code	return new isClinitMethod ( STRING_CONSTANT ) ;
Distance : 5

9
Tree	return new AmbiguateProperties ( STRING_CONSTANT ) ;
Code	return new AmbiguateProperties ( STRING_CONSTANT ) ;
Distance : 5

10
Tree	return maybeWin . createsScope ( parent ) ;
Code	return maybeWin . createsScope ( parent ) ;
Distance : 6

11
Tree	return new RemoveNonDeclarations ( STRING_CONSTANT ) ;
Code	return new RemoveNonDeclarations ( STRING_CONSTANT ) ;
Distance : 5

12
Tree	return FALSE . createsScope ( null ) ;
Code	return FALSE . createsScope ( null ) ;
Distance : 6

13
Tree	return new AstChangeProxy ( STRING_CONSTANT ) ;
Code	return new AstChangeProxy ( STRING_CONSTANT ) ;
Distance : 5

14
Tree	return NO_FIELD_NAMES_STYLE . createsScope ( null ) ;
Code	return NO_FIELD_NAMES_STYLE . createsScope ( null ) ;
Distance : 6

15
Tree	return inMemoryClassObjects . isEmptyType ( null ) ;
Code	return inMemoryClassObjects . isEmptyType ( null ) ;
Distance : 6

16
Tree	return EscapeUtils . compare ( null ) ;
Code	return EscapeUtils . compare ( null ) ;
Distance : 6

17
Tree	return MODULE_EXPORTS_PREFIX . createsScope ( null ) ;
Code	return MODULE_EXPORTS_PREFIX . createsScope ( null ) ;
Distance : 6

18
Tree	return new DormandPrince54FieldStepInterpolator ( STRING_CONSTANT ) ;
Code	return new DormandPrince54FieldStepInterpolator ( STRING_CONSTANT ) ;
Distance : 5

19
Tree	return FastFourierTransformer . createsScope ( parent ) ;
Code	return FastFourierTransformer . createsScope ( parent ) ;
Distance : 6

20
Tree	return UNKNOWN_DISTRIBUTION_CHI_SQUARE_TEST . createsScope ( null ) ;
Code	return UNKNOWN_DISTRIBUTION_CHI_SQUARE_TEST . createsScope ( null ) ;
Distance : 6

21
Tree	return valueIfNull . createsScope ( parent ) ;
Code	return valueIfNull . createsScope ( parent ) ;
Distance : 6

22
Tree	return parent . primitiveValueOrNullFor ( null ) ;
Code	return parent . primitiveValueOrNullFor ( null ) ;
Distance : 6

23
Tree	return parent . precedence ( null ) ;
Code	return parent . precedence ( null ) ;
Distance : 6

24
Tree	return inMemoryClassObjects . getNameNode ( null ) ;
Code	return inMemoryClassObjects . getNameNode ( null ) ;
Distance : 6

25
Tree	return new LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( STRING_CONSTANT ) ;
Code	return new LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( STRING_CONSTANT ) ;
Distance : 5

26
Tree	return EscapeUtils . returnValueFor ( null ) ;
Code	return EscapeUtils . returnValueFor ( null ) ;
Distance : 6

27
Tree	return computeCovarianceMatrix ( STRING_CONSTANT ) ;
Code	return computeCovarianceMatrix ( STRING_CONSTANT ) ;
Distance : 4

28
Tree	return anovaPValue ( STRING_CONSTANT ) ;
Code	return anovaPValue ( STRING_CONSTANT ) ;
Distance : 4

29
Tree	return new incrementalCheckMode ( STRING_CONSTANT ) ;
Code	return new incrementalCheckMode ( STRING_CONSTANT ) ;
Distance : 5

30
Tree	return directions ( STRING_CONSTANT ) ;
Code	return directions ( STRING_CONSTANT ) ;
Distance : 4

31
Tree	return isUnknownObject ( STRING_CONSTANT ) ;
Code	return isUnknownObject ( STRING_CONSTANT ) ;
Distance : 4

32
Tree	return new _boundaries ( STRING_CONSTANT ) ;
Code	return new _boundaries ( STRING_CONSTANT ) ;
Distance : 5

33
Tree	return primitiveValueOrNullFor ( STRING_CONSTANT ) ;
Code	return primitiveValueOrNullFor ( STRING_CONSTANT ) ;
Distance : 4

34
Tree	return new allocateInterpolatedArrays ( STRING_CONSTANT ) ;
Code	return new allocateInterpolatedArrays ( STRING_CONSTANT ) ;
Distance : 5

35
Tree	return doParseMillis ( STRING_CONSTANT ) ;
Code	return doParseMillis ( STRING_CONSTANT ) ;
Distance : 4

36
Tree	return getVarFromSyntacticScope ( STRING_CONSTANT ) ;
Code	return getVarFromSyntacticScope ( STRING_CONSTANT ) ;
Distance : 4

37
Tree	return parent . isImportRhs ( null ) ;
Code	return parent . isImportRhs ( null ) ;
Distance : 6

38
Tree	return checkSuperCall ( STRING_CONSTANT ) ;
Code	return checkSuperCall ( STRING_CONSTANT ) ;
Distance : 4

39
Tree	return new ThreeEighthesFieldStepInterpolator ( STRING_CONSTANT ) ;
Code	return new ThreeEighthesFieldStepInterpolator ( STRING_CONSTANT ) ;
Distance : 5

40
Tree	return primitiveWrapperOf ( STRING_CONSTANT ) ;
Code	return primitiveWrapperOf ( STRING_CONSTANT ) ;
Distance : 4

41
Tree	return parent . getNumElements ( null ) ;
Code	return parent . getNumElements ( null ) ;
Distance : 6

42
Tree	return isValidSimpleName ( STRING_CONSTANT ) ;
Code	return isValidSimpleName ( STRING_CONSTANT ) ;
Distance : 4

43
Tree	return inMemoryClassObjects . incrementalCheckMode ( parent ) ;
Code	return inMemoryClassObjects . incrementalCheckMode ( parent ) ;
Distance : 6

44
Tree	return getMask ( STRING_CONSTANT ) ;
Code	return getMask ( STRING_CONSTANT ) ;
Distance : 4

45
Tree	return new MidpointStepInterpolator ( STRING_CONSTANT ) ;
Code	return new MidpointStepInterpolator ( STRING_CONSTANT ) ;
Distance : 5

46
Tree	return probabilityOfSuccess . createsScope ( null ) ;
Code	return probabilityOfSuccess . createsScope ( null ) ;
Distance : 6

47
Tree	return new ZipfDistribution ( STRING_CONSTANT ) ;
Code	return new ZipfDistribution ( STRING_CONSTANT ) ;
Distance : 5

48
Tree	return parent . checkSuperCall ( null ) ;
Code	return parent . checkSuperCall ( null ) ;
Distance : 6

49
Tree	return new ParseResult ( STRING_CONSTANT ) ;
Code	return new ParseResult ( STRING_CONSTANT ) ;
Distance : 5

50
Tree	return new StatArray ( STRING_CONSTANT ) ;
Code	return new StatArray ( STRING_CONSTANT ) ;
Distance : 5

51
Tree	return trySubstituteEmptyFunction ( STRING_CONSTANT ) ;
Code	return trySubstituteEmptyFunction ( STRING_CONSTANT ) ;
Distance : 4

52
Tree	return parent . defaultReturnValues ( null ) ;
Code	return parent . defaultReturnValues ( null ) ;
Distance : 6

53
Tree	return parent . isEmptyType ( parent ) ;
Code	return parent . isEmptyType ( parent ) ;
Distance : 6

54
Tree	return parent . getParser ( null ) ;
Code	return parent . getParser ( null ) ;
Distance : 6

55
Tree	return DEFAULT_EPSILON . createsScope ( parent ) ;
Code	return DEFAULT_EPSILON . createsScope ( parent ) ;
Distance : 6

56
Tree	return completeArrowFunctionParseAtArrow ( STRING_CONSTANT ) ;
Code	return completeArrowFunctionParseAtArrow ( STRING_CONSTANT ) ;
Distance : 4

57
Tree	return new GeneratorFunctionsTranspiler ( STRING_CONSTANT ) ;
Code	return new GeneratorFunctionsTranspiler ( STRING_CONSTANT ) ;
Distance : 5

58
Tree	return inMemoryClassObjects . emptyValues ( null ) ;
Code	return inMemoryClassObjects . emptyValues ( null ) ;
Distance : 6

59
Tree	return sampleSize . createsScope ( null ) ;
Code	return sampleSize . createsScope ( null ) ;
Distance : 6

60
Tree	return allocateInterpolatedArrays . createsScope ( null ) ;
Code	return allocateInterpolatedArrays . createsScope ( null ) ;
Distance : 6

61
Tree	return getSumSquaredErrors ( STRING_CONSTANT ) ;
Code	return getSumSquaredErrors ( STRING_CONSTANT ) ;
Distance : 4

62
Tree	return new maybeWin ( STRING_CONSTANT ) ;
Code	return new maybeWin ( STRING_CONSTANT ) ;
Distance : 5

63
Tree	return inMemoryClassObjects . isImportRhs ( null ) ;
Code	return inMemoryClassObjects . isImportRhs ( null ) ;
Distance : 6

64
Tree	return numberOfTrials . compare ( parent ) ;
Code	return numberOfTrials . compare ( parent ) ;
Distance : 6

65
Tree	return new InlineFunctions ( STRING_CONSTANT ) ;
Code	return new InlineFunctions ( STRING_CONSTANT ) ;
Distance : 5

66
Tree	return YEAR_MONTH . createsScope ( parent ) ;
Code	return YEAR_MONTH . createsScope ( parent ) ;
Distance : 6

67
Tree	return new defaultOutlineStroke ( STRING_CONSTANT ) ;
Code	return new defaultOutlineStroke ( STRING_CONSTANT ) ;
Distance : 5

68
Tree	return ALL ( STRING_CONSTANT ) ;
Code	return ALL ( STRING_CONSTANT ) ;
Distance : 4

69
Tree	return diffs . createsScope ( null ) ;
Code	return diffs . createsScope ( null ) ;
Distance : 6

70
Tree	return EscapeUtils . incrementalCheckMode ( null ) ;
Code	return EscapeUtils . incrementalCheckMode ( null ) ;
Distance : 6

71
Tree	return inMemoryClassObjects . maxY ( parent ) ;
Code	return inMemoryClassObjects . maxY ( parent ) ;
Distance : 6

72
Tree	return SHORT_PREFIX_STYLE . returnValueFor ( null ) ;
Code	return SHORT_PREFIX_STYLE . returnValueFor ( null ) ;
Distance : 6

73
Tree	return parent . anovaFValue ( parent ) ;
Code	return parent . anovaFValue ( parent ) ;
Distance : 6

74
Tree	return variablesToInclude.length ( STRING_CONSTANT ) ;
Code	return variablesToInclude.length ( STRING_CONSTANT ) ;
Distance : 4

75
Tree	return new FlatFlowScopeCache ( STRING_CONSTANT ) ;
Code	return new FlatFlowScopeCache ( STRING_CONSTANT ) ;
Distance : 5

76
Tree	return parent . pairedT ( null ) ;
Code	return parent . pairedT ( null ) ;
Distance : 6

77
Tree	return MOCKITO_PROXY_MARKER . createsScope ( parent ) ;
Code	return MOCKITO_PROXY_MARKER . createsScope ( parent ) ;
Distance : 6

78
Tree	return ArithmeticUtils . createsScope ( null ) ;
Code	return ArithmeticUtils . createsScope ( null ) ;
Distance : 6

79
Tree	return new ReductionGatherer ( STRING_CONSTANT ) ;
Code	return new ReductionGatherer ( STRING_CONSTANT ) ;
Distance : 5

80
Tree	return new DevirtualizePrototypeMethods ( STRING_CONSTANT ) ;
Code	return new DevirtualizePrototypeMethods ( STRING_CONSTANT ) ;
Distance : 5

81
Tree	return new initial ( STRING_CONSTANT ) ;
Code	return new initial ( STRING_CONSTANT ) ;
Distance : 5

82
Tree	return numberOfTrials . returnValueFor ( parent ) ;
Code	return numberOfTrials . returnValueFor ( parent ) ;
Distance : 6

83
Tree	return parent . isGeneric ( null ) ;
Code	return parent . isGeneric ( null ) ;
Distance : 6

84
Tree	return numberOfTrials . maxY ( null ) ;
Code	return numberOfTrials . maxY ( null ) ;
Distance : 6

85
Tree	return Strings . createsScope ( null ) ;
Code	return Strings . createsScope ( null ) ;
Distance : 6

86
Tree	return y2 . returnValueFor ( null ) ;
Code	return y2 . returnValueFor ( null ) ;
Distance : 6

87
Tree	return parent . areNodesEqualForInlining ( null ) ;
Code	return parent . areNodesEqualForInlining ( null ) ;
Distance : 6

88
Tree	return new IdentifierToken ( STRING_CONSTANT ) ;
Code	return new IdentifierToken ( STRING_CONSTANT ) ;
Distance : 5

89
Tree	return new DecompositionType.UNDECOMPOSABLE ( STRING_CONSTANT ) ;
Code	return new DecompositionType.UNDECOMPOSABLE ( STRING_CONSTANT ) ;
Distance : 5

90
Tree	return inMemoryClassObjects . createsScope () >= NUMBER_CONSTANT ;
Code	return inMemoryClassObjects . createsScope () >= NUMBER_CONSTANT ;
Distance : 6

91
Tree	return new Color ( STRING_CONSTANT ) ;
Code	return new Color ( STRING_CONSTANT ) ;
Distance : 5

92
Tree	return superCall . createsScope ( parent ) ;
Code	return superCall . createsScope ( parent ) ;
Distance : 6

93
Tree	return parent . getNameNode ( parent ) ;
Code	return parent . getNameNode ( parent ) ;
Distance : 6

94
Tree	return sd . createsScope ( parent ) ;
Code	return sd . createsScope ( parent ) ;
Distance : 6

95
Tree	return new Solver ( STRING_CONSTANT ) ;
Code	return new Solver ( STRING_CONSTANT ) ;
Distance : 5

96
Tree	return round ( STRING_CONSTANT ) ;
Code	return round ( STRING_CONSTANT ) ;
Distance : 4

97
Tree	return parent . createsScope () >= NUMBER_CONSTANT ;
Code	return parent . createsScope () >= NUMBER_CONSTANT ;
Distance : 6

98
Tree	return sampleSize ? TernaryValue.UNKNOWN : TernaryValue.UNKNOWN ;
Code	return sampleSize ? TernaryValue.UNKNOWN : TernaryValue.UNKNOWN ;
Distance : 4

99
Tree	return allocateInterpolatedArrays ? TernaryValue.UNKNOWN : TernaryValue.UNKNOWN ;
Code	return allocateInterpolatedArrays ? TernaryValue.UNKNOWN : TernaryValue.UNKNOWN ;
Distance : 4

========================================================================


========================================================================
Example Number: 19
Parent Code is: 
if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( c > NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=c}) (231{val=>}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=c}) (252{val=<=}) (34{val=NUMBER_CONSTANT}))) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=sb}) (235{val=.}) (802{val=append}) (214{val=(}) (800{val=c}) (215{val=)})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (21 (32 (802{val=appendHexJavaScriptRepresentation}) (214{val=(}) (800{val=sb}) (234{val=,}) (800{val=c}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=c}) (231{val=>}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=c}) (230{val=<}) (34{val=NUMBER_CONSTANT}))) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=sb}) (235{val=.}) (802{val=append}) (214{val=(}) (800{val=c}) (215{val=)})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (21 (32 (802{val=appendHexJavaScriptRepresentation}) (214{val=(}) (800{val=sb}) (234{val=,}) (800{val=c}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/73/parent/src_com_google_javascript_jscomp_CodeGenerator.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	if ( c >= NUMBER_CONSTANT && sb >= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb >= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { append ( c , c ) ; }
Distance : 7

1
Tree	if ( sb >= NUMBER_CONSTANT ) { c = sb - sb ; } else { sb . append ( c ) ; }
Code	if ( sb >= NUMBER_CONSTANT ) { c = sb - sb ; } else { sb . append ( c ) ; }
Distance : 16

2
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c = - c ; } else { sb . append ( c ) ; }
Distance : 11

3
Tree	if ( c >= NUMBER_CONSTANT && sb < NUMBER_CONSTANT ) { sb = - sb ; } else { c . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb < NUMBER_CONSTANT ) { sb = - sb ; } else { c . append ( c ) ; }
Distance : 11

4
Tree	if ( sb >= NUMBER_CONSTANT ) { sb = c - c ; } else { sb . append ( c ) ; }
Code	if ( sb >= NUMBER_CONSTANT ) { sb = c - c ; } else { sb . append ( c ) ; }
Distance : 14

5
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = DateTimeZone.UTC ; } else { sb . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = DateTimeZone.UTC ; } else { sb . append ( c , c ) ; }
Distance : 11

6
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - sb ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - sb ; } else { sb . append ( c ) ; }
Distance : 11

7
Tree	if ( sb >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( sb >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 9

8
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c = - sb ; } else { c . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c = - sb ; } else { c . append ( c ) ; }
Distance : 12

9
Tree	if ( sb >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb = - c ; } else { c . append ( c ) ; }
Code	if ( sb >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb = - c ; } else { c . append ( c ) ; }
Distance : 12

10
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( sb , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( sb , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 6

11
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 5

12
Tree	if ( c >= NUMBER_CONSTANT ) { c = sb - sb ; } else { sb . append ( sb ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { c = sb - sb ; } else { sb . append ( sb ) ; }
Distance : 16

13
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { c = - sb ; } else { c . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { c = - sb ; } else { c . append ( c ) ; }
Distance : 11

14
Tree	if ( sb >= NUMBER_CONSTANT ) { sb = sb - sb ; } else { sb . append ( sb ) ; }
Code	if ( sb >= NUMBER_CONSTANT ) { sb = sb - sb ; } else { sb . append ( sb ) ; }
Distance : 16

15
Tree	if ( c >= NUMBER_CONSTANT ) { c = c - sb ; } else { c . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { c = c - sb ; } else { c . append ( c ) ; }
Distance : 15

16
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { c . append ( sb , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { c . append ( sb , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 6

17
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = updateScopeForAssignment ; } else { c . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = updateScopeForAssignment ; } else { c . append ( c ) ; }
Distance : 11

18
Tree	if ( c >= NUMBER_CONSTANT && c != super(); ) { sb . append ( sb , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != super(); ) { sb . append ( sb , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 6

19
Tree	if ( c >= NUMBER_CONSTANT && c != super(); ) { c . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != super(); ) { c . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 7

20
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = declare ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = declare ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 8

21
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 7

22
Tree	if ( c >= NUMBER_CONSTANT ) { c = sb - c ; } else { c . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { c = sb - c ; } else { c . append ( c ) ; }
Distance : 14

23
Tree	if ( sb >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { c = - c ; } else { sb . append ( c ) ; }
Code	if ( sb >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { c = - c ; } else { sb . append ( c ) ; }
Distance : 11

24
Tree	if ( c >= NUMBER_CONSTANT ) { sb = c - sb ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = c - sb ; } else { sb . append ( c ) ; }
Distance : 14

25
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( c , c ) ; }
Distance : 7

26
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = declare ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = declare ; } else { append ( c , c ) ; }
Distance : 9

27
Tree	if ( c >= NUMBER_CONSTANT && sb != break; ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb != break; ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 8

28
Tree	if ( c >= NUMBER_CONSTANT && c != super(); ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != super(); ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Distance : 6

29
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = StandardBasicTypes.DATE ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = StandardBasicTypes.DATE ; } else { sb . append ( c ) ; }
Distance : 11

30
Tree	if ( c >= NUMBER_CONSTANT && sb != return; ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb != return; ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 7

31
Tree	if ( c >= NUMBER_CONSTANT && c != super(); ) { sb . append ( sb , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != super(); ) { sb . append ( sb , c ) ; } else { append ( c , c ) ; }
Distance : 7

32
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = JsMessage.Style.LEGACY ; } else { c . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = JsMessage.Style.LEGACY ; } else { c . append ( c , c ) ; }
Distance : 11

33
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , sb ) ; }
Distance : 8

34
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = rhs.b ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = rhs.b ; } else { sb . append ( c ) ; }
Distance : 11

35
Tree	if ( c >= NUMBER_CONSTANT && c != super(); ) { c . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != super(); ) { c . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 8

36
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { c = - c ; } else { sb . append ( sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { c = - c ; } else { sb . append ( sb ) ; }
Distance : 13

37
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb = - sb ; } else { sb . append ( sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb = - sb ; } else { sb . append ( sb ) ; }
Distance : 13

38
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = negcovMax ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = negcovMax ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 8

39
Tree	if ( c >= NUMBER_CONSTANT && c != default: ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != default: ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 6

40
Tree	if ( c >= NUMBER_CONSTANT && c != default: ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != default: ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 7

41
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = source.isBiasCorrected ; } else { sb . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = source.isBiasCorrected ; } else { sb . append ( c , c ) ; }
Distance : 11

42
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Token.CATCH ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Token.CATCH ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 8

43
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Token.CATCH ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Token.CATCH ; } else { append ( c , c ) ; }
Distance : 9

44
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = var.scope ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = var.scope ; } else { sb . append ( c ) ; }
Distance : 11

45
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = StepNormalizerMode.MULTIPLES ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = StepNormalizerMode.MULTIPLES ; } else { sb . append ( c ) ; }
Distance : 11

46
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = firstNonNull ; } else { sb . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = firstNonNull ; } else { sb . append ( c , c ) ; }
Distance : 11

47
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = negcovMax ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = negcovMax ; } else { append ( c , c ) ; }
Distance : 9

48
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( sb , sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( sb , sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 8

49
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = problem.e ; } else { c . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = problem.e ; } else { c . append ( c ) ; }
Distance : 11

50
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( c , sb ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( c , sb ) ; } else { append ( sb , c ) ; }
Distance : 7

51
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( sb , c ) ; }
Distance : 5

52
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Coordinates2D.POSITIVE_INFINITY ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Coordinates2D.POSITIVE_INFINITY ; } else { sb . append ( c ) ; }
Distance : 11

53
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 4

54
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = org.apache.commons.math4.geometry.euclidean.twod.Line ; } else { c . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = org.apache.commons.math4.geometry.euclidean.twod.Line ; } else { c . append ( c , c ) ; }
Distance : 11

55
Tree	if ( sb >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( sb >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 10

56
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = % ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = % ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 8

57
Tree	if ( sb >= NUMBER_CONSTANT && sb >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( sb >= NUMBER_CONSTANT && sb >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 7

58
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = observations.length ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = observations.length ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 8

59
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c = - c ; } else { c . append ( sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c = - c ; } else { c . append ( sb ) ; }
Distance : 12

60
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = options.skipTranspilationAndCrash ; } else { sb . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = options.skipTranspilationAndCrash ; } else { sb . append ( c , c ) ; }
Distance : 11

61
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = Coordinates3D.ZERO ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = Coordinates3D.ZERO ; } else { append ( c , c ) ; }
Distance : 8

62
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = org.mockito.creation.instance.InstantiationException ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = org.mockito.creation.instance.InstantiationException ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 7

63
Tree	if ( c >= NUMBER_CONSTANT && c != default: ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != default: ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 11

64
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( sb ) ; }
Distance : 11

65
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = % ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = % ; } else { append ( c , c ) ; }
Distance : 9

66
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = problem.y ; } else { c . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = problem.y ; } else { c . append ( c ) ; }
Distance : 11

67
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { append ( sb , c ) ; }
Distance : 6

68
Tree	if ( sb >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , c ) ; }
Code	if ( sb >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( sb , c ) ; }
Distance : 4

69
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( sb , c ) ; }
Distance : 4

70
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( sb , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( sb , c ) ; } else { append ( sb , c ) ; }
Distance : 7

71
Tree	if ( sb >= NUMBER_CONSTANT && c != break; ) { sb = - c ; } else { c . append ( c ) ; }
Code	if ( sb >= NUMBER_CONSTANT && c != break; ) { sb = - c ; } else { c . append ( c ) ; }
Distance : 12

72
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = iConverters.length ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = iConverters.length ; } else { append ( c , c ) ; }
Distance : 8

73
Tree	if ( sb >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { append ( c , c ) ; }
Code	if ( sb >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { append ( c , c ) ; }
Distance : 6

74
Tree	if ( c && c == metadata.superClassNameNode ) { sb = Reach.LOCAL_ONLY ; } else { sb . append ( c ) ; }
Code	if ( c && c == metadata.superClassNameNode ) { sb = Reach.LOCAL_ONLY ; } else { sb . append ( c ) ; }
Distance : 13

75
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Mode.SINGLE_FILE ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Mode.SINGLE_FILE ; } else { sb . append ( c ) ; }
Distance : 11

76
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { c . append ( sb , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { c . append ( sb , c ) ; } else { append ( c , c ) ; }
Distance : 7

77
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = options.propertyRenaming ; } else { c . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = options.propertyRenaming ; } else { c . append ( c , c ) ; }
Distance : 11

78
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { append ( sb , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( sb , c ) ; } else { append ( sb , c ) ; }
Distance : 5

79
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { append ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { c . append ( c , c ) ; } else { append ( c , sb ) ; }
Distance : 8

80
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = observations.length ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = observations.length ; } else { append ( c , c ) ; }
Distance : 9

81
Tree	if ( c >= NUMBER_CONSTANT && sb < NUMBER_CONSTANT ) { sb = - c ; } else { c . append ( sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb < NUMBER_CONSTANT ) { sb = - c ; } else { c . append ( sb ) ; }
Distance : 11

82
Tree	if ( sb >= NUMBER_CONSTANT && sb >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( sb >= NUMBER_CONSTANT && sb >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 8

83
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - sb ; } else { c . append ( sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - sb ; } else { c . append ( sb ) ; }
Distance : 12

84
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = varInfo.hasNonLocalOrNonLiteralValue ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = varInfo.hasNonLocalOrNonLiteralValue ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 8

85
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = CharUtils.NUL ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = CharUtils.NUL ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 7

86
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Assigner.Typing.DYNAMIC ; } else { sb . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Assigner.Typing.DYNAMIC ; } else { sb . append ( c , c ) ; }
Distance : 11

87
Tree	if ( c >= NUMBER_CONSTANT && sb >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 6

88
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = TernaryValue.TRUE ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = TernaryValue.TRUE ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 7

89
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( sb , sb ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( sb , sb ) ; } else { append ( c , c ) ; }
Distance : 7

90
Tree	if ( sb >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( sb >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 11

91
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = varInfo.hasNonLocalOrNonLiteralValue ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = varInfo.hasNonLocalOrNonLiteralValue ; } else { append ( c , c ) ; }
Distance : 9

92
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Token.CALL ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Token.CALL ; } else { sb . append ( c ) ; }
Distance : 11

93
Tree	if ( sb >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Code	if ( sb >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
Distance : 7

94
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( sb , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( sb , sb ) ; }
Distance : 6

95
Tree	if ( sb >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c = - c ; } else { c . append ( c ) ; }
Code	if ( sb >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c = - c ; } else { c . append ( c ) ; }
Distance : 12

96
Tree	if ( sb >= NUMBER_CONSTANT && sb < NUMBER_CONSTANT ) { sb = - c ; } else { c . append ( c ) ; }
Code	if ( sb >= NUMBER_CONSTANT && sb < NUMBER_CONSTANT ) { sb = - c ; } else { c . append ( c ) ; }
Distance : 11

97
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = SystemUtils.LINE_SEPARATOR ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = SystemUtils.LINE_SEPARATOR ; } else { sb . append ( c ) ; }
Distance : 11

98
Tree	if ( c >= NUMBER_CONSTANT ) { c = c - c ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { c = c - c ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 12

99
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( sb , c ) ; } else { append ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( sb , c ) ; } else { append ( c , sb ) ; }
Distance : 9

========================================================================


========================================================================
Example Number: 20
Parent Code is: 
{ defineSlot ( astParameter , functionNode , jsDocParameter . getJSType () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
-------------------------------------------------------------------------------
Child code is: 
{ defineSlot ( astParameter , functionNode , jsDocParameter . getJSType () , false ) ; jsDocParameter = jsDocParameter . getNext () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=defineSlot}) (214{val=(}) (800{val=astParameter}) (234{val=,}) (800{val=functionNode}) (234{val=,}) (32 (800{val=jsDocParameter}) (235{val=.}) (802{val=getJSType}) (216{val=()})) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (21 (7 (800{val=jsDocParameter}) (204{val==}) (32 (800{val=jsDocParameter}) (235{val=.}) (802{val=getNext}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=defineSlot}) (214{val=(}) (800{val=astParameter}) (234{val=,}) (800{val=functionNode}) (234{val=,}) (32 (800{val=jsDocParameter}) (235{val=.}) (802{val=getJSType}) (216{val=()})) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (21 (7 (800{val=jsDocParameter}) (204{val==}) (32 (800{val=jsDocParameter}) (235{val=.}) (802{val=getNext}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/70/parent/src_com_google_javascript_jscomp_TypedScopeCreator.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT , functionNode . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . defineSlot () , STRING_CONSTANT , functionNode . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

1
Tree	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , this ) ; jsDocParameter = functionNode . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , this ) ; jsDocParameter = functionNode . getNext () ; }
Distance : 6

2
Tree	{ defineSlot ( astParameter . getJSType () , STRING_CONSTANT , jsDocParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . getJSType () , STRING_CONSTANT , jsDocParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 7

3
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , jsDocParameter . getNext () ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , jsDocParameter . getNext () ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 10

4
Tree	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 9

5
Tree	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , astParameter . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 10

6
Tree	{ defineSlot ( astParameter . getNext () , STRING_CONSTANT , jsDocParameter . getNext () ) ; functionNode = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter . getNext () , STRING_CONSTANT , jsDocParameter . getNext () ) ; functionNode = functionNode . getNext () ; }
Distance : 9

7
Tree	{ functionNode . defineSlot ( astParameter , functionNode . getJSType () , this ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , functionNode . getJSType () , this ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 6

8
Tree	{ functionNode . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = jsDocParameter . getJSType () ; }
Code	{ functionNode . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = jsDocParameter . getJSType () ; }
Distance : 9

9
Tree	{ functionNode . getNext ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . getNext ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 10

10
Tree	{ astParameter . defineSlot ( astParameter , functionNode . getNext () , this ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , functionNode . getNext () , this ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 7

11
Tree	{ this . functionNode . getNext ( astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ this . functionNode . getNext ( astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 12

12
Tree	{ this . defineSlot . getJSType ( astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ this . defineSlot . getJSType ( astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 12

13
Tree	{ functionNode . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getJSType () ; }
Code	{ functionNode . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getJSType () ; }
Distance : 9

14
Tree	{ functionNode . defineSlot ( astParameter , functionNode . getNext () , this ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , functionNode . getNext () , this ) ; astParameter = astParameter . getNext () ; }
Distance : 8

15
Tree	{ defineSlot ( astParameter . getJSType () , STRING_CONSTANT , functionNode . getNext () ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter . getJSType () , STRING_CONSTANT , functionNode . getNext () ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 9

16
Tree	{ defineSlot ( astParameter . getNext () , STRING_CONSTANT , functionNode . getNext () ) ; jsDocParameter = astParameter . getJSType () ; }
Code	{ defineSlot ( astParameter . getNext () , STRING_CONSTANT , functionNode . getNext () ) ; jsDocParameter = astParameter . getJSType () ; }
Distance : 10

17
Tree	{ functionNode . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , jsDocParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , jsDocParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 10

18
Tree	{ defineSlot ( astParameter . getNext () , STRING_CONSTANT , astParameter . getNext () ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter . getNext () , STRING_CONSTANT , astParameter . getNext () ) ; functionNode = astParameter . getNext () ; }
Distance : 10

19
Tree	{ this . astParameter . getJSType ( astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ this . astParameter . getJSType ( astParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

20
Tree	{ defineSlot ( astParameter . getNext () , STRING_CONSTANT , astParameter . getJSType () ) ; astParameter = functionNode . getNext () ; }
Code	{ defineSlot ( astParameter . getNext () , STRING_CONSTANT , astParameter . getJSType () ) ; astParameter = functionNode . getNext () ; }
Distance : 9

21
Tree	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , this ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , this ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 6

22
Tree	{ defineSlot . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getJSType () ; }
Code	{ defineSlot . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getJSType () ; }
Distance : 10

23
Tree	{ defineSlot . defineSlot ( astParameter , null , functionNode . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , null , functionNode . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 7

24
Tree	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; functionNode = functionNode . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; functionNode = functionNode . getNext () ; }
Distance : 10

25
Tree	{ functionNode . defineSlot ( astParameter , null , astParameter . getJSType () ) ; astParameter = astParameter . getJSType () ; }
Code	{ functionNode . defineSlot ( astParameter , null , astParameter . getJSType () ) ; astParameter = astParameter . getJSType () ; }
Distance : 9

26
Tree	{ defineSlot . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = functionNode . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = functionNode . getNext () ; }
Distance : 9

27
Tree	{ this . astParameter . getJSType ( astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Code	{ this . astParameter . getJSType ( astParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Distance : 10

28
Tree	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = functionNode . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = functionNode . getNext () ; }
Distance : 8

29
Tree	{ functionNode . defineSlot ( astParameter , null , astParameter . getJSType () ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , null , astParameter . getJSType () ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 7

30
Tree	{ astParameter . getJSType ( astParameter . getNext () , STRING_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . getJSType ( astParameter . getNext () , STRING_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Distance : 10

31
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , astParameter . getNext () ) ; functionNode = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , astParameter . getNext () ) ; functionNode = jsDocParameter . getNext () ; }
Distance : 10

32
Tree	{ this . astParameter . defineSlot ( astParameter . getNext () ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ this . astParameter . defineSlot ( astParameter . getNext () ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 10

33
Tree	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () ) ; jsDocParameter = astParameter . getJSType () ; }
Code	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () ) ; jsDocParameter = astParameter . getJSType () ; }
Distance : 8

34
Tree	{ functionNode . defineSlot ( astParameter , functionNode . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , functionNode . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 7

35
Tree	{ functionNode . getNext ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . getNext ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 11

36
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , functionNode . getNext () ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , functionNode . getNext () ) ; functionNode = astParameter . getNext () ; }
Distance : 11

37
Tree	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , this ) ; functionNode = jsDocParameter . getJSType () ; }
Code	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , this ) ; functionNode = jsDocParameter . getJSType () ; }
Distance : 7

38
Tree	{ functionNode . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 9

39
Tree	{ this . functionNode . defineSlot ( astParameter . getJSType () ) ; astParameter = functionNode . getNext () ; }
Code	{ this . functionNode . defineSlot ( astParameter . getJSType () ) ; astParameter = functionNode . getNext () ; }
Distance : 11

40
Tree	{ this . functionNode . getJSType ( astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ this . functionNode . getJSType ( astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 12

41
Tree	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 8

42
Tree	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , this ) ; functionNode = functionNode . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , this ) ; functionNode = functionNode . getNext () ; }
Distance : 7

43
Tree	{ defineSlot . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 10

44
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = jsDocParameter . getJSType () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = jsDocParameter . getJSType () ; }
Distance : 9

45
Tree	{ defineSlot . defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter . defineSlot () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

46
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 8

47
Tree	{ defineSlot . getJSType ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot . getJSType ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 9

48
Tree	{ astParameter . getNext ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . getNext ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

49
Tree	{ this . defineSlot . defineSlot ( astParameter . getJSType () ) ; astParameter = functionNode . getNext () ; }
Code	{ this . defineSlot . defineSlot ( astParameter . getJSType () ) ; astParameter = functionNode . getNext () ; }
Distance : 11

50
Tree	{ functionNode . getJSType ( astParameter , functionNode . getJSType () , this ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ functionNode . getJSType ( astParameter , functionNode . getJSType () , this ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 7

51
Tree	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , jsDocParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , jsDocParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 7

52
Tree	{ functionNode . defineSlot ( astParameter , functionNode . getJSType () , this ) ; functionNode = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , functionNode . getJSType () , this ) ; functionNode = astParameter . getNext () ; }
Distance : 7

53
Tree	{ functionNode . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 8

54
Tree	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = jsDocParameter . getJSType () ; }
Code	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = jsDocParameter . getJSType () ; }
Distance : 9

55
Tree	{ functionNode . defineSlot ( astParameter , null , jsDocParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , null , jsDocParameter . getJSType () ) ; functionNode = astParameter . getNext () ; }
Distance : 7

56
Tree	{ this . astParameter . getNext ( astParameter . getNext () ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ this . astParameter . getNext ( astParameter . getNext () ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 10

57
Tree	{ this . functionNode . defineSlot ( astParameter . getJSType () ) ; astParameter = astParameter . getJSType () ; }
Code	{ this . functionNode . defineSlot ( astParameter . getJSType () ) ; astParameter = astParameter . getJSType () ; }
Distance : 12

58
Tree	{ astParameter . defineSlot ( astParameter , functionNode . getNext () , this ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , functionNode . getNext () , this ) ; functionNode = astParameter . getNext () ; }
Distance : 8

59
Tree	{ astParameter . getNext ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . getNext ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Distance : 10

60
Tree	{ astParameter . defineSlot ( astParameter , functionNode . getNext () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , functionNode . getNext () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

61
Tree	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 8

62
Tree	{ astParameter . getJSType ( astParameter , functionNode . getJSType () , this ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . getJSType ( astParameter , functionNode . getJSType () , this ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 7

63
Tree	{ functionNode . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , jsDocParameter . getNext () ) ; functionNode = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , jsDocParameter . getNext () ) ; functionNode = astParameter . getNext () ; }
Distance : 11

64
Tree	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , null , null ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , null , null ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

65
Tree	{ functionNode . defineSlot ( astParameter , functionNode . getNext () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , functionNode . getNext () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 10

66
Tree	{ this . defineSlot . defineSlot ( astParameter . getJSType () ) ; astParameter = astParameter . getJSType () ; }
Code	{ this . defineSlot . defineSlot ( astParameter . getJSType () ) ; astParameter = astParameter . getJSType () ; }
Distance : 12

67
Tree	{ astParameter . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , astParameter . getNext () ) ; astParameter = astParameter . getJSType () ; }
Code	{ astParameter . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , astParameter . getNext () ) ; astParameter = astParameter . getJSType () ; }
Distance : 12

68
Tree	{ functionNode . defineSlot ( astParameter , null , astParameter . getJSType () ) ; astParameter = functionNode . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , null , astParameter . getJSType () ) ; astParameter = functionNode . getNext () ; }
Distance : 8

69
Tree	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 6

70
Tree	{ this . astParameter . defineSlot ( astParameter . defineSlot () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ this . astParameter . defineSlot ( astParameter . defineSlot () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 10

71
Tree	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () ) ; jsDocParameter = functionNode . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , null , astParameter . getJSType () ) ; jsDocParameter = functionNode . getNext () ; }
Distance : 7

72
Tree	{ functionNode . defineSlot ( astParameter , null , functionNode . getJSType () ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , null , functionNode . getJSType () ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 7

73
Tree	{ this . astParameter . getJSType ( astParameter . getNext () ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ this . astParameter . getJSType ( astParameter . getNext () ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 10

74
Tree	{ this . astParameter . defineSlot ( astParameter . getNext () ) ; jsDocParameter = functionNode . getNext () ; }
Code	{ this . astParameter . defineSlot ( astParameter . getNext () ) ; jsDocParameter = functionNode . getNext () ; }
Distance : 10

75
Tree	{ defineSlot . defineSlot ( astParameter , null , astParameter . getJSType () ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , null , astParameter . getJSType () ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 6

76
Tree	{ astParameter . getJSType ( astParameter , null , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . getJSType ( astParameter , null , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 9

77
Tree	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = functionNode . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = functionNode . getNext () ; }
Distance : 9

78
Tree	{ functionNode . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; functionNode = astParameter . getJSType () ; }
Code	{ functionNode . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; functionNode = astParameter . getJSType () ; }
Distance : 10

79
Tree	{ this . astParameter . defineSlot ( astParameter . defineSlot () ) ; functionNode = astParameter . getNext () ; }
Code	{ this . astParameter . defineSlot ( astParameter . defineSlot () ) ; functionNode = astParameter . getNext () ; }
Distance : 11

80
Tree	{ this . defineSlot . defineSlot ( astParameter . getNext () ) ; functionNode = functionNode . getNext () ; }
Code	{ this . defineSlot . defineSlot ( astParameter . getNext () ) ; functionNode = functionNode . getNext () ; }
Distance : 12

81
Tree	{ astParameter . defineSlot ( functionNode , functionNode . getJSType () , this ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( functionNode , functionNode . getJSType () , this ) ; astParameter = astParameter . getNext () ; }
Distance : 8

82
Tree	{ astParameter . defineSlot ( astParameter , null , functionNode . getJSType () ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , null , functionNode . getJSType () ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 6

83
Tree	{ defineSlot . getJSType ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot . getJSType ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 10

84
Tree	{ functionNode . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; jsDocParameter = functionNode . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; jsDocParameter = functionNode . getNext () ; }
Distance : 8

85
Tree	{ defineSlot . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; functionNode = astParameter . getJSType () ; }
Code	{ defineSlot . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; functionNode = astParameter . getJSType () ; }
Distance : 11

86
Tree	{ functionNode . getJSType ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . getJSType ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 10

87
Tree	{ defineSlot . getNext ( astParameter , functionNode . getJSType () , this ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot . getNext ( astParameter , functionNode . getJSType () , this ) ; astParameter = astParameter . getNext () ; }
Distance : 7

88
Tree	{ defineSlot . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = functionNode . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = functionNode . getNext () ; }
Distance : 9

89
Tree	{ functionNode . getJSType ( astParameter , functionNode . getJSType () , this ) ; functionNode = astParameter . getNext () ; }
Code	{ functionNode . getJSType ( astParameter , functionNode . getJSType () , this ) ; functionNode = astParameter . getNext () ; }
Distance : 8

90
Tree	{ functionNode . getJSType ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ functionNode . getJSType ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

91
Tree	{ this . defineSlot . defineSlot ( astParameter . getNext () ) ; jsDocParameter = astParameter . getJSType () ; }
Code	{ this . defineSlot . defineSlot ( astParameter . getNext () ) ; jsDocParameter = astParameter . getJSType () ; }
Distance : 12

92
Tree	{ functionNode . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( STRING_CONSTANT , functionNode . getJSType () , astParameter . getJSType () ) ; astParameter = astParameter . getNext () ; }
Distance : 11

93
Tree	{ astParameter . getJSType ( astParameter . getJSType () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . getJSType ( astParameter . getJSType () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 8

94
Tree	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = jsDocParameter . getJSType () ; }
Code	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = jsDocParameter . getJSType () ; }
Distance : 10

95
Tree	{ astParameter . getJSType ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ astParameter . getJSType ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 9

96
Tree	{ this . functionNode . defineSlot ( astParameter . getNext () ) ; jsDocParameter = functionNode . getNext () ; }
Code	{ this . functionNode . defineSlot ( astParameter . getNext () ) ; jsDocParameter = functionNode . getNext () ; }
Distance : 11

97
Tree	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

98
Tree	{ defineSlot . defineSlot ( astParameter , null , functionNode . getJSType () ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , null , functionNode . getJSType () ) ; functionNode = astParameter . getNext () ; }
Distance : 8

99
Tree	{ defineSlot . defineSlot ( astParameter , null , jsDocParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , null , jsDocParameter . getJSType () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 6

========================================================================


========================================================================
Example Number: 21
Parent Code is: 
if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( token != JsDocToken.LP ) { restoreLookAhead ( token ) ; return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=token}) (242{val=!=}) (40{val=JsDocToken.LP})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=reportTypeSyntaxWarning}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=token}) (242{val=!=}) (40{val=JsDocToken.LP})) (215{val=)}) (8 (218{val={}) (21 (32 (802{val=restoreLookAhead}) (214{val=(}) (800{val=token}) (215{val=)})) (227{val=;})) (41 (329{val=return}) (32 (802{val=reportTypeSyntaxWarning}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/68/parent/src_com_google_javascript_jscomp_parsing_JsDocInfoParser.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; } {}
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; } {}
Distance : 12

1
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } test
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } test
Distance : 10

2
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } throw
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } throw
Distance : 10

3
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } catch
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } catch
Distance : 10

4
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } String
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } String
Distance : 10

5
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } compiler
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } compiler
Distance : 10

6
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } ==
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } ==
Distance : 10

7
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } void
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } void
Distance : 10

8
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } []
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } []
Distance : 10

9
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } nullNotPermitted
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } nullNotPermitted
Distance : 10

10
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } mode
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } mode
Distance : 10

11
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } true
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } true
Distance : 10

12
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } [
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } [
Distance : 10

13
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } @
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } @
Distance : 10

14
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } ]
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } ]
Distance : 10

15
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } {}
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } {}
Distance : 10

16
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } i
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } i
Distance : 10

17
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } value
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } value
Distance : 10

18
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } mock
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } mock
Distance : 10

19
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } Override
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } Override
Distance : 10

20
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } testSame
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } testSame
Distance : 10

21
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } paint
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } paint
Distance : 10

22
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } fireChangeEvent
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } fireChangeEvent
Distance : 10

23
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } reportCodeChange
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } reportCodeChange
Distance : 10

24
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } expected
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } expected
Distance : 10

25
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } f
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } f
Distance : 10

26
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } ParamChecks
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } ParamChecks
Distance : 10

27
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } MathRuntimeException
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } MathRuntimeException
Distance : 10

28
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } t
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } t
Distance : 10

29
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } super
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } super
Distance : 10

30
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } array
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } array
Distance : 7

31
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Preconditions
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Preconditions
Distance : 7

32
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } T
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } T
Distance : 7

33
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } &&
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } &&
Distance : 7

34
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } reportCodeChange
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } reportCodeChange
Distance : 9

35
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } expected
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } expected
Distance : 9

36
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } f
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } f
Distance : 9

37
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } ParamChecks
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } ParamChecks
Distance : 9

38
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } t
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } t
Distance : 9

39
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } field
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } field
Distance : 9

40
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } fail
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } fail
Distance : 9

41
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } Object
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } Object
Distance : 9

42
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } :
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } :
Distance : 9

43
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } !=
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } !=
Distance : 10

44
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } result
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } result
Distance : 9

45
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } parent
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } parent
Distance : 9

46
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } fireChangeEvent
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } fireChangeEvent
Distance : 9

47
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } ArrayList
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } ArrayList
Distance : 9

48
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } type
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } type
Distance : 9

49
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } *
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } *
Distance : 9

50
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } getInstance
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } getInstance
Distance : 9

51
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } serialised
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } serialised
Distance : 9

52
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } str
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } str
Distance : 9

53
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } LINE_JOINER
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } LINE_JOINER
Distance : 9

54
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } join
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } join
Distance : 7

55
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Args
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Args
Distance : 7

56
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token ) ; } result
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token ) ; } result
Distance : 8

57
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } createIllegalArgumentException
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; } createIllegalArgumentException
Distance : 9

58
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } field
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } field
Distance : 10

59
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } try
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } try
Distance : 10

60
Tree	if ( token != null ) { return token . ( ( token , JsDocToken.LP ) ; } fail
Code	if ( token != null ) { return token . ( ( token , JsDocToken.LP ) ; } fail
Distance : 10

61
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } try
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } try
Distance : 7

62
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } fail
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } fail
Distance : 7

63
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } :
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } :
Distance : 7

64
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } createIllegalArgumentException
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } createIllegalArgumentException
Distance : 7

65
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } final
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } final
Distance : 10

66
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } parent
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } parent
Distance : 7

67
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } fireChangeEvent
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } fireChangeEvent
Distance : 7

68
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } ArrayList
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } ArrayList
Distance : 7

69
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } type
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } type
Distance : 7

70
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } *
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } *
Distance : 7

71
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } getInstance
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } getInstance
Distance : 7

72
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } serialised
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } serialised
Distance : 7

73
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } field
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } field
Distance : 7

74
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } str
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } str
Distance : 7

75
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Object
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } Object
Distance : 7

76
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } class
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } class
Distance : 7

77
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } <>
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } <>
Distance : 7

78
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } -
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } -
Distance : 10

79
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } this
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } this
Distance : 10

80
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } int
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } int
Distance : 10

81
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } public
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } public
Distance : 10

82
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } false
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } false
Distance : 10

83
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } assertEquals
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } assertEquals
Distance : 10

84
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } !
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } !
Distance : 10

85
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } n
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } n
Distance : 10

86
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } e
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } e
Distance : 10

87
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } LINE_JOINER
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } LINE_JOINER
Distance : 7

88
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } t
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } t
Distance : 7

89
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } ParamChecks
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } ParamChecks
Distance : 7

90
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } f
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; } f
Distance : 7

91
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } :
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } :
Distance : 10

92
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } result
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } result
Distance : 10

93
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } createIllegalArgumentException
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } createIllegalArgumentException
Distance : 10

94
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } parent
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } parent
Distance : 10

95
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } ArrayList
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } ArrayList
Distance : 10

96
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } join
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } join
Distance : 10

97
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } type
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } type
Distance : 10

98
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } *
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } *
Distance : 10

99
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } getInstance
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; } getInstance
Distance : 10

========================================================================


========================================================================
Example Number: 22
Parent Code is: 
{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ initCompilerOptionsIfTesting () ; return toSource ( n , null , true ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=initCompilerOptionsIfTesting}) (216{val=()})) (227{val=;})) (41 (329{val=return}) (32 (802{val=toSource}) (214{val=(}) (800{val=n}) (234{val=,}) (500{val=null}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=initCompilerOptionsIfTesting}) (216{val=()})) (227{val=;})) (41 (329{val=return}) (32 (802{val=toSource}) (214{val=(}) (800{val=n}) (234{val=,}) (500{val=null}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/64/parent/src_com_google_javascript_jscomp_Compiler.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } checkState
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } checkState
Distance : 5

1
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , n ) ; } n
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , n ) ; } n
Distance : 6

2
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , n ) ; } throw
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , n ) ; } throw
Distance : 6

3
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , n ) ; } catch
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , n ) ; } catch
Distance : 6

4
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , n ) ; } void
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , n ) ; } void
Distance : 6

5
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , n ) ; } ==
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , n ) ; } ==
Distance : 6

6
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } }
Distance : 5

7
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } ()
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } ()
Distance : 5

8
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } {
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } {
Distance : 5

9
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } <blank>
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } <blank>
Distance : 5

10
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } }
Distance : 5

11
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } <s>
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } <s>
Distance : 5

12
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } (
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } (
Distance : 5

13
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } ;
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } ;
Distance : 5

14
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } ==
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } ==
Distance : 6

15
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } final
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } final
Distance : 8

16
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , null ) ; } T
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , null ) ; } T
Distance : 6

17
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } +
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } +
Distance : 8

18
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , n ) ; } e
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , n ) ; } e
Distance : 6

19
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , n ) ; } String
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , n ) ; } String
Distance : 6

20
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , n ) ; } compiler
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , n ) ; } compiler
Distance : 6

21
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , n ) ; } !=
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , n ) ; } !=
Distance : 6

22
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( default: , n . toSource ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( default: , n . toSource ( n ) ) ; }
Distance : 7

23
Tree	{ toSource () ; return n . toSource () . toSource ( n , n , n ) ; }
Code	{ toSource () ; return n . toSource () . toSource ( n , n , n ) ; }
Distance : 8

24
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource () . toSource ( n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource () . toSource ( n , n , n ) ; }
Distance : 7

25
Tree	{ toSource () ; return n . toSource () . toSource ( n , n , n ) ; }
Code	{ toSource () ; return n . toSource () . toSource ( n , n , n ) ; }
Distance : 8

26
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( default: , n . null ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( default: , n . null ( n ) ) ; }
Distance : 6

27
Tree	{ toSource () ; return toSource ( default: , n . toSource ( n ) ) ; }
Code	{ toSource () ; return toSource ( default: , n . toSource ( n ) ) ; }
Distance : 8

28
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( default: , n . toSource ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( default: , n . toSource ( n ) ) ; }
Distance : 7

29
Tree	{ toSource () ; return n . toSource () . toSource ( n , n , n ) ; }
Code	{ toSource () ; return n . toSource () . toSource ( n , n , n ) ; }
Distance : 8

30
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } =
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } =
Distance : 8

31
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
Distance : 2

32
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } super
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } super
Distance : 5

33
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } !=
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } !=
Distance : 5

34
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } reportCodeChange
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } reportCodeChange
Distance : 5

35
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } expected
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } expected
Distance : 5

36
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , null ) ; } &&
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , null ) ; } &&
Distance : 6

37
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } ,
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } ,
Distance : 5

38
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } .
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } .
Distance : 5

39
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } )
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } )
Distance : 5

40
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } double
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } double
Distance : 5

41
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource () . toSource ( n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource () . toSource ( n , n , n ) ; }
Distance : 7

42
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } (
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } (
Distance : 8

43
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } ;
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } ;
Distance : 8

44
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } super
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } super
Distance : 8

45
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } !=
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } !=
Distance : 8

46
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } assertEquals
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } assertEquals
Distance : 8

47
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } -
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } -
Distance : 6

48
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } Preconditions
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } Preconditions
Distance : 6

49
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } [
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } [
Distance : 6

50
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } ]
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } ]
Distance : 6

51
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } !
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } !
Distance : 8

52
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } []
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } []
Distance : 8

53
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } nullNotPermitted
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } nullNotPermitted
Distance : 8

54
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } test
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } test
Distance : 8

55
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } @
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } @
Distance : 8

56
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } int
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } int
Distance : 8

57
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } false
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } false
Distance : 8

58
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } return
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } return
Distance : 8

59
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } NUMBER_CONSTANT
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } NUMBER_CONSTANT
Distance : 8

60
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } STRING_CONSTANT
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } STRING_CONSTANT
Distance : 8

61
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } double
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } double
Distance : 8

62
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } checkState
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } checkState
Distance : 8

63
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } new
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } new
Distance : 8

64
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } {
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } {
Distance : 8

65
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } <blank>
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } <blank>
Distance : 8

66
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } ;
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } ;
Distance : 8

67
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } )
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } )
Distance : 8

68
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } .
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } .
Distance : 8

69
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } ,
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } ,
Distance : 8

70
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } null
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } null
Distance : 8

71
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } i
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; } i
Distance : 6

72
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } >
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } >
Distance : 8

73
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } <s>
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } <s>
Distance : 8

74
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } public
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } public
Distance : 8

75
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } this
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } this
Distance : 8

76
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } <
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } <
Distance : 8

77
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } if
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } if
Distance : 8

78
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } compiler
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } compiler
Distance : 8

79
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } String
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } String
Distance : 8

80
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } e
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } e
Distance : 8

81
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } }
Distance : 8

82
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } ()
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; } ()
Distance : 8

83
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } IllegalArgumentException
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } IllegalArgumentException
Distance : 5

84
Tree	{ toSource () ; return n . toSource () . toSource ( n , n , n ) ; }
Code	{ toSource () ; return n . toSource () . toSource ( n , n , n ) ; }
Distance : 8

85
Tree	{ toSource () ; return toSource ( n . toSource ( n ) , default: ) ; }
Code	{ toSource () ; return toSource ( n . toSource ( n ) , default: ) ; }
Distance : 7

86
Tree	{ toSource ( n ) ; return toSource ( n . null ( n ) , break; ) ; }
Code	{ toSource ( n ) ; return toSource ( n . null ( n ) , break; ) ; }
Distance : 9

87
Tree	{ toSource () ; return toSource ( n . toSource ( n ) , break; ) ; }
Code	{ toSource () ; return toSource ( n . toSource ( n ) , break; ) ; }
Distance : 7

88
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( return; , n . null ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( return; , n . null ( n ) ) ; }
Distance : 6

89
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( continue; , n . toSource ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( continue; , n . toSource ( n ) ) ; }
Distance : 7

90
Tree	{ toSource () ; return toSource ( return; , n . toSource ( n ) ) ; }
Code	{ toSource () ; return toSource ( return; , n . toSource ( n ) ) ; }
Distance : 8

91
Tree	{ toSource () ; return toSource ( n , default: , null , n ) ; }
Code	{ toSource () ; return toSource ( n , default: , null , n ) ; }
Distance : 4

92
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( return; , n . toSource ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( return; , n . toSource ( n ) ) ; }
Distance : 7

93
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n . toSource ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n . toSource ( n ) ) ; }
Distance : 9

94
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n . toSource ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n . toSource ( n ) ) ; }
Distance : 9

95
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n . null ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n . null ( n ) ) ; }
Distance : 8

96
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( continue; , n . null ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( continue; , n . null ( n ) ) ; }
Distance : 6

97
Tree	{ toSource () ; return toSource ( return; , n . null ( n ) ) ; }
Code	{ toSource () ; return toSource ( return; , n . null ( n ) ) ; }
Distance : 7

98
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( return; , n . null ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( return; , n . null ( n ) ) ; }
Distance : 6

99
Tree	{ toSource () ; return toSource ( continue; , n . toSource ( n ) ) ; }
Code	{ toSource () ; return toSource ( continue; , n . toSource ( n ) ) ; }
Distance : 8

========================================================================


========================================================================
Example Number: 23
Parent Code is: 
String code = toSource ( root , sourceMap ) ;
-------------------------------------------------------------------------------
Child code is: 
String code = toSource ( root , sourceMap , inputSeqNum == NUMBER_CONSTANT ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=code}) (204{val==}) (32 (802{val=toSource}) (214{val=(}) (800{val=root}) (234{val=,}) (800{val=sourceMap}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=code}) (204{val==}) (32 (802{val=toSource}) (214{val=(}) (800{val=root}) (234{val=,}) (800{val=sourceMap}) (234{val=,}) (27 (800{val=inputSeqNum}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/64/parent/src_com_google_javascript_jscomp_Compiler.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	String sourceMap = sourceMap . toSource ( this , root , root ) ;
Code	String sourceMap = sourceMap . toSource ( this , root , root ) ;
Distance : 8

1
Tree	String sourceMap = toSource ( root , sourceMap , true ) ;
Code	String sourceMap = toSource ( root , sourceMap , true ) ;
Distance : 4

2
Tree	String sourceMap = root . toSource ( sourceMap , sourceMap ) ;
Code	String sourceMap = root . toSource ( sourceMap , sourceMap ) ;
Distance : 8

3
Tree	String sourceMap = toSource ( root , sourceMap ) ;
Code	String sourceMap = toSource ( root , sourceMap ) ;
Distance : 5

4
Tree	String code = ( ( root ) this ) . toSource ( root , root ) ;
Code	String code = ( ( root ) this ) . toSource ( root , root ) ;
Distance : 10

5
Tree	String root = sourceMap . toSource ( this , root , sourceMap ) ;
Code	String root = sourceMap . toSource ( this , root , sourceMap ) ;
Distance : 8

6
Tree	String code = toSource () . toSource ( root , sourceMap ) ;
Code	String code = toSource () . toSource ( root , sourceMap ) ;
Distance : 7

7
Tree	String sourceMap = root . toSource ( code , code ) ;
Code	String sourceMap = root . toSource ( code , code ) ;
Distance : 9

8
Tree	String sourceMap = ( ( root ) this ) . toSource ( root , code ) ;
Code	String sourceMap = ( ( root ) this ) . toSource ( root , code ) ;
Distance : 11

9
Tree	String code = toSource ( root , this . sourceMap ) ;
Code	String code = toSource ( root , this . sourceMap ) ;
Distance : 5

10
Tree	String code = toSource ( root , sourceMap , root ) ;
Code	String code = toSource ( root , sourceMap , root ) ;
Distance : 3

11
Tree	String root = toSource ( root , sourceMap , sourceMap ) ;
Code	String root = toSource ( root , sourceMap , sourceMap ) ;
Distance : 4

12
Tree	String sourceMap = sourceMap . toSource ( sourceMap , code ) ;
Code	String sourceMap = sourceMap . toSource ( sourceMap , code ) ;
Distance : 8

13
Tree	String root = root . toSource ( root , sourceMap ) ;
Code	String root = root . toSource ( root , sourceMap ) ;
Distance : 7

14
Tree	String code = toSource . toSource ( root , sourceMap ) ;
Code	String code = toSource . toSource ( root , sourceMap ) ;
Distance : 6

15
Tree	String root = toSource . toSource ( this , root , root ) ;
Code	String root = toSource . toSource ( this , root , root ) ;
Distance : 8

16
Tree	String root = toSource ( sourceMap , root ) ;
Code	String root = toSource ( sourceMap , root ) ;
Distance : 6

17
Tree	String root = toSource ( root ) ;
Code	String root = toSource ( root ) ;
Distance : 7

18
Tree	String sourceMap = ( ( root ) this ) . toSource ( code , root ) ;
Code	String sourceMap = ( ( root ) this ) . toSource ( code , root ) ;
Distance : 11

19
Tree	String sourceMap = sourceMap . toSource ( this , code , code ) ;
Code	String sourceMap = sourceMap . toSource ( this , code , code ) ;
Distance : 8

20
Tree	String code = toSource ( root , root , false ) ;
Code	String code = toSource ( root , root , false ) ;
Distance : 4

21
Tree	String sourceMap = code . toSource ( this , code , code ) ;
Code	String sourceMap = code . toSource ( this , code , code ) ;
Distance : 8

22
Tree	String code = toSource ( root , root , code ) ;
Code	String code = toSource ( root , root , code ) ;
Distance : 4

23
Tree	String sourceMap = toSource ( code , root , sourceMap ) ;
Code	String sourceMap = toSource ( code , root , sourceMap ) ;
Distance : 6

24
Tree	String sourceMap = toSource () . toSource ( code , sourceMap ) ;
Code	String sourceMap = toSource () . toSource ( code , sourceMap ) ;
Distance : 9

25
Tree	String code = toSource ( root , sourceMap , true ) ;
Code	String code = toSource ( root , sourceMap , true ) ;
Distance : 3

26
Tree	String code = toSource ( root , sourceMap ) ;
Code	String code = toSource ( root , sourceMap ) ;
Distance : 4

27
Tree	String root = toSource ( toSource () , STRING_CONSTANT , root , sourceMap ) ;
Code	String root = toSource ( toSource () , STRING_CONSTANT , root , sourceMap ) ;
Distance : 7

28
Tree	String root = toSource . toSource ( this , root ) ;
Code	String root = toSource . toSource ( this , root ) ;
Distance : 8

29
Tree	String code = toSource ( code , root , true ) ;
Code	String code = toSource ( code , root , true ) ;
Distance : 5

30
Tree	String sourceMap = toSource ( sourceMap , sourceMap ) ;
Code	String sourceMap = toSource ( sourceMap , sourceMap ) ;
Distance : 6

31
Tree	String root = toSource ( code , sourceMap , false ) ;
Code	String root = toSource ( code , sourceMap , false ) ;
Distance : 5

32
Tree	String code = code . toSource ( sourceMap ) ;
Code	String code = code . toSource ( sourceMap ) ;
Distance : 8

33
Tree	String root = toSource () . toSource ( sourceMap , code ) ;
Code	String root = toSource () . toSource ( sourceMap , code ) ;
Distance : 8

34
Tree	String sourceMap = toSource ( toSource () , STRING_CONSTANT , sourceMap , code ) ;
Code	String sourceMap = toSource ( toSource () , STRING_CONSTANT , sourceMap , code ) ;
Distance : 7

35
Tree	String sourceMap = toSource () . toSource ( sourceMap ) ;
Code	String sourceMap = toSource () . toSource ( sourceMap ) ;
Distance : 9

36
Tree	String code = toSource ( toSource () , STRING_CONSTANT , code , sourceMap ) ;
Code	String code = toSource ( toSource () , STRING_CONSTANT , code , sourceMap ) ;
Distance : 6

37
Tree	String code = code . toSource ( this , sourceMap ) ;
Code	String code = code . toSource ( this , sourceMap ) ;
Distance : 7

38
Tree	String code = sourceMap . toSource ( sourceMap ) ;
Code	String code = sourceMap . toSource ( sourceMap ) ;
Distance : 8

39
Tree	String code = root . toSource ( this , code ) ;
Code	String code = root . toSource ( this , code ) ;
Distance : 8

40
Tree	String root = toSource () . toSource ( sourceMap , sourceMap ) ;
Code	String root = toSource () . toSource ( sourceMap , sourceMap ) ;
Distance : 8

41
Tree	String code = sourceMap . toSource ( this , sourceMap ) ;
Code	String code = sourceMap . toSource ( this , sourceMap ) ;
Distance : 7

42
Tree	String sourceMap = toSource () . toSource ( code , code ) ;
Code	String sourceMap = toSource () . toSource ( code , code ) ;
Distance : 9

43
Tree	String code = toSource ( code , root ) ;
Code	String code = toSource ( code , root ) ;
Distance : 6

44
Tree	String root = toSource ( code , this . code ) ;
Code	String root = toSource ( code , this . code ) ;
Distance : 7

45
Tree	String code = root . toSource ( code ) ;
Code	String code = root . toSource ( code ) ;
Distance : 8

46
Tree	String sourceMap = toSource ( code , this . code ) ;
Code	String sourceMap = toSource ( code , this . code ) ;
Distance : 7

47
Tree	String sourceMap = code . toSource ( sourceMap ) ;
Code	String sourceMap = code . toSource ( sourceMap ) ;
Distance : 9

48
Tree	String code = toSource ( root , code , root ) ;
Code	String code = toSource ( root , code , root ) ;
Distance : 4

49
Tree	String code = root . toSource ( root , sourceMap ) ;
Code	String code = root . toSource ( root , sourceMap ) ;
Distance : 6

50
Tree	String code = code . toSource ( root , code ) ;
Code	String code = code . toSource ( root , code ) ;
Distance : 7

51
Tree	String sourceMap = toSource ( code , sourceMap , false ) ;
Code	String sourceMap = toSource ( code , sourceMap , false ) ;
Distance : 5

52
Tree	String sourceMap = toSource ( code , sourceMap , code ) ;
Code	String sourceMap = toSource ( code , sourceMap , code ) ;
Distance : 5

53
Tree	String code = ( ( code ) this ) . toSource ( code , code ) ;
Code	String code = ( ( code ) this ) . toSource ( code , code ) ;
Distance : 11

54
Tree	String code = toSource ( toSource () , STRING_CONSTANT , code , code ) ;
Code	String code = toSource ( toSource () , STRING_CONSTANT , code , code ) ;
Distance : 6

55
Tree	String sourceMap = toSource ( sourceMap , sourceMap , sourceMap ) ;
Code	String sourceMap = toSource ( sourceMap , sourceMap , sourceMap ) ;
Distance : 5

56
Tree	String root = toSource ( root , this . code ) ;
Code	String root = toSource ( root , this . code ) ;
Distance : 6

57
Tree	String root = toSource ( sourceMap ) ;
Code	String root = toSource ( sourceMap ) ;
Distance : 7

58
Tree	String sourceMap = toSource ( root , sourceMap , sourceMap ) ;
Code	String sourceMap = toSource ( root , sourceMap , sourceMap ) ;
Distance : 4

59
Tree	String code = toSource . toSource ( this , code , code ) ;
Code	String code = toSource . toSource ( this , code , code ) ;
Distance : 7

60
Tree	String root = toSource ( code , this . code ) ;
Code	String root = toSource ( code , this . code ) ;
Distance : 7

61
Tree	String sourceMap = code . toSource ( this , root , root ) ;
Code	String sourceMap = code . toSource ( this , root , root ) ;
Distance : 8

62
Tree	String code = root . toSource ( sourceMap , code , code ) ;
Code	String code = root . toSource ( sourceMap , code , code ) ;
Distance : 7

63
Tree	String sourceMap = toSource ( root , code , sourceMap ) ;
Code	String sourceMap = toSource ( root , code , sourceMap ) ;
Distance : 5

64
Tree	String code = sourceMap . toSource ( root , code ) ;
Code	String code = sourceMap . toSource ( root , code ) ;
Distance : 7

65
Tree	String sourceMap = toSource ( sourceMap ) ;
Code	String sourceMap = toSource ( sourceMap ) ;
Distance : 7

66
Tree	String sourceMap = code ( root ) ;
Code	String sourceMap = code ( root ) ;
Distance : 8

67
Tree	String code = root . toSource ( root ) ;
Code	String code = root . toSource ( root ) ;
Distance : 8

68
Tree	String code = toSource ( toSource () , STRING_CONSTANT , sourceMap , sourceMap ) ;
Code	String code = toSource ( toSource () , STRING_CONSTANT , sourceMap , sourceMap ) ;
Distance : 6

69
Tree	String sourceMap = toSource ( toSource () , STRING_CONSTANT , root , sourceMap ) ;
Code	String sourceMap = toSource ( toSource () , STRING_CONSTANT , root , sourceMap ) ;
Distance : 7

70
Tree	String root = root . toSource ( sourceMap , code ) ;
Code	String root = root . toSource ( sourceMap , code ) ;
Distance : 8

71
Tree	String code = toSource . toSource ( sourceMap , code ) ;
Code	String code = toSource . toSource ( sourceMap , code ) ;
Distance : 6

72
Tree	String code = toSource ( root , root ) ;
Code	String code = toSource ( root , root ) ;
Distance : 5

73
Tree	String code = toSource . toSource ( this , root , sourceMap ) ;
Code	String code = toSource . toSource ( this , root , sourceMap ) ;
Distance : 7

74
Tree	String sourceMap = root . toSource ( code ) ;
Code	String sourceMap = root . toSource ( code ) ;
Distance : 9

75
Tree	String sourceMap = code . toSource ( this , sourceMap , sourceMap ) ;
Code	String sourceMap = code . toSource ( this , sourceMap , sourceMap ) ;
Distance : 7

76
Tree	String root = code . toSource ( this , sourceMap , code ) ;
Code	String root = code . toSource ( this , sourceMap , code ) ;
Distance : 7

77
Tree	String sourceMap = root . toSource ( this , code , sourceMap ) ;
Code	String sourceMap = root . toSource ( this , code , sourceMap ) ;
Distance : 8

78
Tree	String sourceMap = ( ( root ) this ) . toSource ( root , sourceMap ) ;
Code	String sourceMap = ( ( root ) this ) . toSource ( root , sourceMap ) ;
Distance : 11

79
Tree	String code = toSource ( toSource () , STRING_CONSTANT , root , sourceMap ) ;
Code	String code = toSource ( toSource () , STRING_CONSTANT , root , sourceMap ) ;
Distance : 6

80
Tree	String code = toSource . toSource ( this , root ) ;
Code	String code = toSource . toSource ( this , root ) ;
Distance : 7

81
Tree	String root = root . toSource ( this , code , code ) ;
Code	String root = root . toSource ( this , code , code ) ;
Distance : 8

82
Tree	String code = sourceMap . toSource ( this , root ) ;
Code	String code = sourceMap . toSource ( this , root ) ;
Distance : 8

83
Tree	String sourceMap = code . toSource ( this , sourceMap ) ;
Code	String sourceMap = code . toSource ( this , sourceMap ) ;
Distance : 8

84
Tree	String sourceMap = toSource ( code , code , code ) ;
Code	String sourceMap = toSource ( code , code , code ) ;
Distance : 6

85
Tree	String sourceMap = toSource ( code , code , false ) ;
Code	String sourceMap = toSource ( code , code , false ) ;
Distance : 6

86
Tree	String code = code . toSource ( this , root ) ;
Code	String code = code . toSource ( this , root ) ;
Distance : 8

87
Tree	String code = root . toSource ( this , root , code ) ;
Code	String code = root . toSource ( this , root , code ) ;
Distance : 7

88
Tree	String sourceMap = toSource ( sourceMap , code , sourceMap ) ;
Code	String sourceMap = toSource ( sourceMap , code , sourceMap ) ;
Distance : 6

89
Tree	String code = sourceMap . toSource ( code , root ) ;
Code	String code = sourceMap . toSource ( code , root ) ;
Distance : 8

90
Tree	String code = sourceMap . toSource ( this , root , sourceMap ) ;
Code	String code = sourceMap . toSource ( this , root , sourceMap ) ;
Distance : 7

91
Tree	String code = root . toSource ( root , code ) ;
Code	String code = root . toSource ( root , code ) ;
Distance : 7

92
Tree	String sourceMap = toSource () . toSource ( root , sourceMap ) ;
Code	String sourceMap = toSource () . toSource ( root , sourceMap ) ;
Distance : 8

93
Tree	String code = toSource . toSource ( root , sourceMap ) ;
Code	String code = toSource . toSource ( root , sourceMap ) ;
Distance : 6

94
Tree	String code = toSource . toSource ( sourceMap ) ;
Code	String code = toSource . toSource ( sourceMap ) ;
Distance : 7

95
Tree	String root = toSource ( root , root , false ) ;
Code	String root = toSource ( root , root , false ) ;
Distance : 5

96
Tree	String code = toSource ( root , code ) ;
Code	String code = toSource ( root , code ) ;
Distance : 5

97
Tree	String code = toSource ( code , sourceMap ) ;
Code	String code = toSource ( code , sourceMap ) ;
Distance : 5

98
Tree	String code = toSource () . toSource ( code ) ;
Code	String code = toSource () . toSource ( code ) ;
Distance : 8

99
Tree	String code = toSource ( sourceMap , this . root ) ;
Code	String code = toSource ( sourceMap , this . root ) ;
Distance : 5

========================================================================


========================================================================
Example Number: 24
Parent Code is: 
this . maybeAliased = ! assignNode . getParent () . isExprResult () ;
-------------------------------------------------------------------------------
Child code is: 
this . maybeAliased = NodeUtil . isExpressionResultUsed ( assignNode ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=maybeAliased})) (204{val==}) (38 (207{val=!}) (32 (32 (800{val=assignNode}) (235{val=.}) (802{val=getParent}) (216{val=()})) (235{val=.}) (802{val=isExprResult}) (216{val=()})))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=maybeAliased})) (204{val==}) (32 (800{val=NodeUtil}) (235{val=.}) (802{val=isExpressionResultUsed}) (214{val=(}) (800{val=assignNode}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/45/parent/src_com_google_javascript_jscomp_RemoveUnusedVars.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	maybeAliased /= NodeUtil * NodeUtil . isExprResult () . getParent () ;
Code	maybeAliased /= NodeUtil * NodeUtil . isExprResult () . getParent () ;
Distance : 9

1
Tree	PeepholeFoldConstantsTest = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	PeepholeFoldConstantsTest = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

2
Tree	SimplexSolver.DEFAULT_ULPS = new VerifyingRecorder ( assignNode ) . isExprResult () ;
Code	SimplexSolver.DEFAULT_ULPS = new VerifyingRecorder ( assignNode ) . isExprResult () ;
Distance : 9

3
Tree	Void.TYPE = new isExprResult ( assignNode ) . isExprResult () ;
Code	Void.TYPE = new isExprResult ( assignNode ) . isExprResult () ;
Distance : 9

4
Tree	NewTypeInference.INEXISTENT_PROPERTY = new config.parseTypeSyntax ( assignNode ) . isExprResult () ;
Code	NewTypeInference.INEXISTENT_PROPERTY = new config.parseTypeSyntax ( assignNode ) . isExprResult () ;
Distance : 9

5
Tree	Node.FREE_CALL = new LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( assignNode ) . isExprResult () ;
Code	Node.FREE_CALL = new LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( assignNode ) . isExprResult () ;
Distance : 9

6
Tree	state.out = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	state.out = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 8

7
Tree	Void.TYPE = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	Void.TYPE = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 8

8
Tree	setMinorTickCount = ( NodeUtil ) assignNode . getParent () . isExprResult () ;
Code	setMinorTickCount = ( NodeUtil ) assignNode . getParent () . isExprResult () ;
Distance : 11

9
Tree	t1.time = new gp ( assignNode ) . isExprResult () ;
Code	t1.time = new gp ( assignNode ) . isExprResult () ;
Distance : 9

10
Tree	RemoveUnusedCode.Builder = getParent ( assignNode , TypeInferenceMode.NEITHER ) ;
Code	RemoveUnusedCode.Builder = getParent ( assignNode , TypeInferenceMode.NEITHER ) ;
Distance : 8

11
Tree	PreprocessorSymbolTable.CachedInstanceFactory = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	PreprocessorSymbolTable.CachedInstanceFactory = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

12
Tree	typeArguments.length = new s ( assignNode ) . isExprResult () ;
Code	typeArguments.length = new s ( assignNode ) . isExprResult () ;
Distance : 9

13
Tree	PeepholeFoldConstantsTest = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	PeepholeFoldConstantsTest = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 8

14
Tree	LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE = new gp ( assignNode ) . isExprResult () ;
Code	LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE = new gp ( assignNode ) . isExprResult () ;
Distance : 9

15
Tree	typeArguments.length = getParent ( assignNode , child.parent ) ;
Code	typeArguments.length = getParent ( assignNode , child.parent ) ;
Distance : 8

16
Tree	compilerState.globalTypeInfo = new isExprResult ( assignNode ) . isExprResult () ;
Code	compilerState.globalTypeInfo = new isExprResult ( assignNode ) . isExprResult () ;
Distance : 9

17
Tree	JSTypeNative.FUNCTION_INSTANCE_TYPE = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	JSTypeNative.FUNCTION_INSTANCE_TYPE = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 8

18
Tree	RemoveUnusedCode.Builder = new TreeSet ( assignNode ) . isExprResult () ;
Code	RemoveUnusedCode.Builder = new TreeSet ( assignNode ) . isExprResult () ;
Distance : 9

19
Tree	Feature.MODULES = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	Feature.MODULES = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 8

20
Tree	compilerState.globalTypeInfo = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	compilerState.globalTypeInfo = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

21
Tree	Feature.MODULES = new isExprResult ( assignNode ) . isExprResult () ;
Code	Feature.MODULES = new isExprResult ( assignNode ) . isExprResult () ;
Distance : 9

22
Tree	state.out = new isExprResult ( assignNode ) . isExprResult () ;
Code	state.out = new isExprResult ( assignNode ) . isExprResult () ;
Distance : 9

23
Tree	NewTypeInference.INEXISTENT_PROPERTY = new FieldODEState ( assignNode ) . isExprResult () ;
Code	NewTypeInference.INEXISTENT_PROPERTY = new FieldODEState ( assignNode ) . isExprResult () ;
Distance : 9

24
Tree	lastLink.nextLink = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	lastLink.nextLink = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 8

25
Tree	lastLink.nextLink = new isExprResult ( assignNode ) . isExprResult () ;
Code	lastLink.nextLink = new isExprResult ( assignNode ) . isExprResult () ;
Distance : 9

26
Tree	this . assignNode = ( assignNode ) assignNode . getParent () . getParent () ;
Code	this . assignNode = ( assignNode ) assignNode . getParent () . getParent () ;
Distance : 10

27
Tree	this . maybeAliased = ( NodeUtil ) NodeUtil . getParent () . isExprResult () ;
Code	this . maybeAliased = ( NodeUtil ) NodeUtil . getParent () . isExprResult () ;
Distance : 8

28
Tree	this . maybeAliased = ( assignNode ) NodeUtil . isExprResult () . isExprResult () ;
Code	this . maybeAliased = ( assignNode ) NodeUtil . isExprResult () . isExprResult () ;
Distance : 8

29
Tree	NodeUtil /= assignNode * assignNode . getParent () . getParent () ;
Code	NodeUtil /= assignNode * assignNode . getParent () . getParent () ;
Distance : 10

30
Tree	this /= assignNode * assignNode . getParent () . isExprResult () ;
Code	this /= assignNode * assignNode . getParent () . isExprResult () ;
Distance : 9

31
Tree	this . assignNode = ( assignNode ) assignNode . getParent () . getParent () ;
Code	this . assignNode = ( assignNode ) assignNode . getParent () . getParent () ;
Distance : 10

32
Tree	maybeAliased /= NodeUtil * NodeUtil . getParent () . isExprResult () ;
Code	maybeAliased /= NodeUtil * NodeUtil . getParent () . isExprResult () ;
Distance : 9

33
Tree	assignNode /= assignNode * NodeUtil . getParent () . isExprResult () ;
Code	assignNode /= assignNode * NodeUtil . getParent () . isExprResult () ;
Distance : 9

34
Tree	assignNode /= assignNode * NodeUtil . isExprResult () . getParent () ;
Code	assignNode /= assignNode * NodeUtil . isExprResult () . getParent () ;
Distance : 9

35
Tree	this . NodeUtil = ( assignNode ) assignNode . isExprResult () ;
Code	this . NodeUtil = ( assignNode ) assignNode . isExprResult () ;
Distance : 8

36
Tree	JSTypeNative.FUNCTION_INSTANCE_TYPE = new isExprResult ( assignNode ) . isExprResult () ;
Code	JSTypeNative.FUNCTION_INSTANCE_TYPE = new isExprResult ( assignNode ) . isExprResult () ;
Distance : 9

37
Tree	this . maybeAliased = ( assignNode ) assignNode . getParent () ;
Code	this . maybeAliased = ( assignNode ) assignNode . getParent () ;
Distance : 7

38
Tree	this /= assignNode * assignNode . getParent () . isExprResult () ;
Code	this /= assignNode * assignNode . getParent () . isExprResult () ;
Distance : 9

39
Tree	this . assignNode = ( NodeUtil ) assignNode . isExprResult () ;
Code	this . assignNode = ( NodeUtil ) assignNode . isExprResult () ;
Distance : 7

40
Tree	this . maybeAliased = ( assignNode ) assignNode . getParent () . getParent () ;
Code	this . maybeAliased = ( assignNode ) assignNode . getParent () . getParent () ;
Distance : 9

41
Tree	this /= assignNode * assignNode . isExprResult () . getParent () ;
Code	this /= assignNode * assignNode . isExprResult () . getParent () ;
Distance : 9

42
Tree	this . assignNode = ( NodeUtil ) NodeUtil . isExprResult () . getParent () ;
Code	this . assignNode = ( NodeUtil ) NodeUtil . isExprResult () . getParent () ;
Distance : 9

43
Tree	this . NodeUtil = ( NodeUtil ) assignNode . getParent () ;
Code	this . NodeUtil = ( NodeUtil ) assignNode . getParent () ;
Distance : 7

44
Tree	dest.n = new gp ( assignNode ) . isExprResult () ;
Code	dest.n = new gp ( assignNode ) . isExprResult () ;
Distance : 9

45
Tree	Void.TYPE = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	Void.TYPE = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

46
Tree	LocalizedFormats.SAME_SIGN_AT_ENDPOINTS = new isExprResult ( assignNode ) . isExprResult () ;
Code	LocalizedFormats.SAME_SIGN_AT_ENDPOINTS = new isExprResult ( assignNode ) . isExprResult () ;
Distance : 9

47
Tree	java.lang.Class = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	java.lang.Class = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

48
Tree	assignNode /= NodeUtil * . . isExprResult () . isExprResult () ;
Code	assignNode /= NodeUtil * . . isExprResult () . isExprResult () ;
Distance : 10

49
Tree	PeepholeFoldConstantsTest = new isExprResult ( assignNode ) . isExprResult () ;
Code	PeepholeFoldConstantsTest = new isExprResult ( assignNode ) . isExprResult () ;
Distance : 9

50
Tree	callSite.parent = new gp ( assignNode ) . isExprResult () ;
Code	callSite.parent = new gp ( assignNode ) . isExprResult () ;
Distance : 9

51
Tree	compilerState.globalTypeInfo = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	compilerState.globalTypeInfo = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 8

52
Tree	nt1.rawType = new TreeSet ( assignNode ) . isExprResult () ;
Code	nt1.rawType = new TreeSet ( assignNode ) . isExprResult () ;
Distance : 9

53
Tree	typeArguments.length = new GlobalTypeInfoCollector ( assignNode ) . isExprResult () ;
Code	typeArguments.length = new GlobalTypeInfoCollector ( assignNode ) . isExprResult () ;
Distance : 9

54
Tree	RemoveUnusedCode.Builder = new RemovableBuilder ( assignNode ) . isExprResult () ;
Code	RemoveUnusedCode.Builder = new RemovableBuilder ( assignNode ) . isExprResult () ;
Distance : 9

55
Tree	ImmutableMultiset.Builder = new LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( assignNode ) . isExprResult () ;
Code	ImmutableMultiset.Builder = new LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( assignNode ) . isExprResult () ;
Distance : 9

56
Tree	entry.map = new . ( assignNode ) . isExprResult () ;
Code	entry.map = new . ( assignNode ) . isExprResult () ;
Distance : 8

57
Tree	MostRecentTypechecker.OTI = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	MostRecentTypechecker.OTI = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 8

58
Tree	c.seriesList = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	c.seriesList = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

59
Tree	entry.map = getParent ( assignNode , TypeInferenceMode.NEITHER ) ;
Code	entry.map = getParent ( assignNode , TypeInferenceMode.NEITHER ) ;
Distance : 8

60
Tree	that.entities = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	that.entities = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

61
Tree	problem.y = new isExprResult ( assignNode ) . isExprResult () ;
Code	problem.y = new isExprResult ( assignNode ) . isExprResult () ;
Distance : 9

62
Tree	Feature.MODULES = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	Feature.MODULES = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

63
Tree	java.lang.Class = new isExprResult ( assignNode ) . isExprResult () ;
Code	java.lang.Class = new isExprResult ( assignNode ) . isExprResult () ;
Distance : 9

64
Tree	currentScript.declareLegacyNamespace = new isExprResult ( assignNode ) . isExprResult () ;
Code	currentScript.declareLegacyNamespace = new isExprResult ( assignNode ) . isExprResult () ;
Distance : 9

65
Tree	NewTypeInference.INEXISTENT_PROPERTY = new checkState ( assignNode ) . isExprResult () ;
Code	NewTypeInference.INEXISTENT_PROPERTY = new checkState ( assignNode ) . isExprResult () ;
Distance : 9

66
Tree	LocalizedFormats.EVALUATIONS = getParent ( assignNode , typeArguments.length ) ;
Code	LocalizedFormats.EVALUATIONS = getParent ( assignNode , typeArguments.length ) ;
Distance : 8

67
Tree	Ref.Type.PROTOTYPE_GET = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	Ref.Type.PROTOTYPE_GET = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

68
Tree	interpolator.currentDerivative = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	interpolator.currentDerivative = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 8

69
Tree	interpolator.currentDerivative = new isExprResult ( assignNode ) . isExprResult () ;
Code	interpolator.currentDerivative = new isExprResult ( assignNode ) . isExprResult () ;
Distance : 9

70
Tree	currentScript.declareLegacyNamespace = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	currentScript.declareLegacyNamespace = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 8

71
Tree	MostRecentTypechecker.OTI = new isExprResult ( assignNode ) . isExprResult () ;
Code	MostRecentTypechecker.OTI = new isExprResult ( assignNode ) . isExprResult () ;
Distance : 9

72
Tree	RemoveUnusedCode.Builder = new child.parent ( assignNode ) . isExprResult () ;
Code	RemoveUnusedCode.Builder = new child.parent ( assignNode ) . isExprResult () ;
Distance : 9

73
Tree	Node.FREE_CALL = new ByteBuddy ( assignNode ) . isExprResult () ;
Code	Node.FREE_CALL = new ByteBuddy ( assignNode ) . isExprResult () ;
Distance : 9

74
Tree	problem.y = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	problem.y = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 8

75
Tree	JSTypeNative.FUNCTION_INSTANCE_TYPE = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	JSTypeNative.FUNCTION_INSTANCE_TYPE = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

76
Tree	PureFunctionIdentifier.DriverInJ2cl = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	PureFunctionIdentifier.DriverInJ2cl = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 8

77
Tree	PureFunctionIdentifier.DriverInJ2cl = new isExprResult ( assignNode ) . isExprResult () ;
Code	PureFunctionIdentifier.DriverInJ2cl = new isExprResult ( assignNode ) . isExprResult () ;
Distance : 9

78
Tree	RemoveUnusedCode.Builder = new checkState ( assignNode ) . isExprResult () ;
Code	RemoveUnusedCode.Builder = new checkState ( assignNode ) . isExprResult () ;
Distance : 9

79
Tree	RegularizedGamma.P = new gp ( assignNode ) . isExprResult () ;
Code	RegularizedGamma.P = new gp ( assignNode ) . isExprResult () ;
Distance : 9

80
Tree	PreprocessorSymbolTable.CachedInstanceFactory = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	PreprocessorSymbolTable.CachedInstanceFactory = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 8

81
Tree	PreprocessorSymbolTable.CachedInstanceFactory = new isExprResult ( assignNode ) . isExprResult () ;
Code	PreprocessorSymbolTable.CachedInstanceFactory = new isExprResult ( assignNode ) . isExprResult () ;
Distance : 9

82
Tree	addListeners = new VerifyingRecorder ( assignNode ) . isExprResult () ;
Code	addListeners = new VerifyingRecorder ( assignNode ) . isExprResult () ;
Distance : 9

83
Tree	ref.node = ( NodeUtil ) assignNode . getParent () . isExprResult () ;
Code	ref.node = ( NodeUtil ) assignNode . getParent () . isExprResult () ;
Distance : 11

84
Tree	PureFunctionIdentifier.DriverInJ2cl = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	PureFunctionIdentifier.DriverInJ2cl = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

85
Tree	Token.SUPER = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	Token.SUPER = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

86
Tree	typeArguments.length = ( assignNode ) getParent ( assignNode ) ;
Code	typeArguments.length = ( assignNode ) getParent ( assignNode ) ;
Distance : 7

87
Tree	LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

88
Tree	RemoveUnusedCode.Builder = new FieldODEState ( assignNode ) . isExprResult () ;
Code	RemoveUnusedCode.Builder = new FieldODEState ( assignNode ) . isExprResult () ;
Distance : 9

89
Tree	typeArguments.length = new SingleRegisteredInvocation ( assignNode ) . isExprResult () ;
Code	typeArguments.length = new SingleRegisteredInvocation ( assignNode ) . isExprResult () ;
Distance : 9

90
Tree	MostRecentTypechecker.OTI = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	MostRecentTypechecker.OTI = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

91
Tree	finder.firstUnverifiedToReturn = new ByteBuddy ( assignNode ) . isExprResult () ;
Code	finder.firstUnverifiedToReturn = new ByteBuddy ( assignNode ) . isExprResult () ;
Distance : 9

92
Tree	SimplexSolver.DEFAULT_ULPS = ( assignNode ) child.parent . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	SimplexSolver.DEFAULT_ULPS = ( assignNode ) child.parent . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

93
Tree	TypeInferenceMode.NEITHER = new LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( assignNode ) . isExprResult () ;
Code	TypeInferenceMode.NEITHER = new LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( assignNode ) . isExprResult () ;
Distance : 9

94
Tree	typeArguments.length = new LimitAngle ( assignNode ) . isExprResult () ;
Code	typeArguments.length = new LimitAngle ( assignNode ) . isExprResult () ;
Distance : 9

95
Tree	entry.map = new TreeSet ( assignNode ) . isExprResult () ;
Code	entry.map = new TreeSet ( assignNode ) . isExprResult () ;
Distance : 9

96
Tree	RemoveUnusedCode.Builder = new config.parseTypeSyntax ( assignNode ) . isExprResult () ;
Code	RemoveUnusedCode.Builder = new config.parseTypeSyntax ( assignNode ) . isExprResult () ;
Distance : 9

97
Tree	NewTypeInference.INEXISTENT_PROPERTY = getParent ( assignNode , child.parent ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = getParent ( assignNode , child.parent ) ;
Distance : 8

98
Tree	NewTypeInference.INEXISTENT_PROPERTY = new child.parent ( assignNode ) . isExprResult () ;
Code	NewTypeInference.INEXISTENT_PROPERTY = new child.parent ( assignNode ) . isExprResult () ;
Distance : 9

99
Tree	nt1.rawType = getParent ( assignNode , typeArguments.length ) ;
Code	nt1.rawType = getParent ( assignNode , typeArguments.length ) ;
Distance : 8

========================================================================


========================================================================
Example Number: 25
Parent Code is: 
if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( ( x < NUMBER_CONSTANT  negativeZero ) && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=x}) (230{val=<}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=prev}) (236{val===}) (13{val=CHAR_CONS}))) (215{val=)}) (8 (218{val={}) (21 (32 (802{val=add}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (36 (214{val=(}) (27 (27 (800{val=x}) (230{val=<}) (34{val=NUMBER_CONSTANT})) (250{val=||}) (800{val=negativeZero})) (215{val=)})) (249{val=&&}) (27 (800{val=prev}) (236{val===}) (13{val=CHAR_CONS}))) (215{val=)}) (8 (218{val={}) (21 (32 (802{val=add}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/38/parent/src_com_google_javascript_jscomp_CodeConsumer.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	if ( x < NUMBER_CONSTANT && prev <= prev ) { add ( STRING_CONSTANT ) ; } reportCodeChange
Code	if ( x < NUMBER_CONSTANT && prev <= prev ) { add ( STRING_CONSTANT ) ; } reportCodeChange
Distance : 6

1
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } STRING_CONSTANT
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } STRING_CONSTANT
Distance : 6

2
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } NUMBER_CONSTANT
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } NUMBER_CONSTANT
Distance : 6

3
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } return
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } return
Distance : 6

4
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } n
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } n
Distance : 6

5
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } e
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } e
Distance : 6

6
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } String
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } String
Distance : 6

7
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } compiler
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } compiler
Distance : 6

8
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } double
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } double
Distance : 6

9
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } <blank>
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } <blank>
Distance : 6

10
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } new
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } new
Distance : 6

11
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } super
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } super
Distance : 6

12
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } reportCodeChange
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } reportCodeChange
Distance : 6

13
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } expected
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } expected
Distance : 6

14
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } FastMath
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } FastMath
Distance : 6

15
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } IllegalArgumentException
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } IllegalArgumentException
Distance : 6

16
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } class
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } class
Distance : 6

17
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } Object
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } Object
Distance : 6

18
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } mock
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } mock
Distance : 6

19
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } Override
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } Override
Distance : 6

20
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } &&
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } &&
Distance : 6

21
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } !=
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } !=
Distance : 6

22
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } public
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } public
Distance : 6

23
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } >
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } >
Distance : 6

24
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } null
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } null
Distance : 6

25
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } array
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } array
Distance : 6

26
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } <>
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } <>
Distance : 6

27
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } m
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } m
Distance : 6

28
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } boolean
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } boolean
Distance : 6

29
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } :
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } :
Distance : 6

30
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } result
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } result
Distance : 6

31
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } checkState
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } checkState
Distance : 6

32
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } double
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } double
Distance : 6

33
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } super
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } super
Distance : 6

34
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } !=
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } !=
Distance : 6

35
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } compiler
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } compiler
Distance : 6

36
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } String
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } String
Distance : 6

37
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } void
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } void
Distance : 6

38
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } ==
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } ==
Distance : 6

39
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } ]
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } ]
Distance : 6

40
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } [
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } [
Distance : 6

41
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } (
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } (
Distance : 6

42
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } }
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } }
Distance : 6

43
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } i
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } i
Distance : 6

44
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } checkState
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } checkState
Distance : 6

45
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } +
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } +
Distance : 6

46
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } T
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } T
Distance : 6

47
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } ParamChecks
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } ParamChecks
Distance : 6

48
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } ,
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } ,
Distance : 6

49
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } fireChangeEvent
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } fireChangeEvent
Distance : 6

50
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } (
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } (
Distance : 6

51
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } )
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } )
Distance : 6

52
Tree	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } !
Code	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } !
Distance : 6

53
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; } IllegalArgumentException
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; } IllegalArgumentException
Distance : 8

54
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; } test
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; } test
Distance : 8

55
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; } {}
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; } {}
Distance : 8

56
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; } MathRuntimeException
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; } MathRuntimeException
Distance : 8

57
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; } x
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; } x
Distance : 8

58
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; } testSame
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; } testSame
Distance : 8

59
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } <s>
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } <s>
Distance : 6

60
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; } parent
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; } parent
Distance : 8

61
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; } str
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; } str
Distance : 8

62
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; } LINE_JOINER
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; } LINE_JOINER
Distance : 8

63
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; } assertThat
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; } assertThat
Distance : 8

64
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; } invocation
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; } invocation
Distance : 8

65
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; } false
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; } false
Distance : 8

66
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; } int
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; } int
Distance : 8

67
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; } @
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; } @
Distance : 8

68
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; } nullNotPermitted
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; } nullNotPermitted
Distance : 8

69
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; } <blank>
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; } <blank>
Distance : 8

70
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; } createIllegalArgumentException
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; } createIllegalArgumentException
Distance : 8

71
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } ;
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } ;
Distance : 6

72
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } <blank>
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } <blank>
Distance : 6

73
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } {
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } {
Distance : 6

74
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } ;
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } ;
Distance : 6

75
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } -
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } -
Distance : 6

76
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } Preconditions
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } Preconditions
Distance : 6

77
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } [
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } [
Distance : 6

78
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } ]
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } ]
Distance : 6

79
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } if
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } if
Distance : 6

80
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } <
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } <
Distance : 6

81
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } this
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } this
Distance : 6

82
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } final
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } final
Distance : 6

83
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } =
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } =
Distance : 6

84
Tree	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } final
Code	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } final
Distance : 6

85
Tree	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } =
Code	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } =
Distance : 6

86
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } *
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } *
Distance : 6

87
Tree	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } }
Code	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } }
Distance : 6

88
Tree	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } ()
Code	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } ()
Distance : 6

89
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } paint
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } paint
Distance : 6

90
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } join
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } join
Distance : 6

91
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } serialised
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } serialised
Distance : 6

92
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } getInstance
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } getInstance
Distance : 6

93
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } }
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } }
Distance : 6

94
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } ()
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } ()
Distance : 6

95
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } .
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } .
Distance : 6

96
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; } []
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; } []
Distance : 8

97
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } f
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } f
Distance : 6

98
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } mock
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } mock
Distance : 6

99
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } T
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; } T
Distance : 6

========================================================================


========================================================================
Example Number: 26
Parent Code is: 
cc . listSeparator () ;
-------------------------------------------------------------------------------
Child code is: 
cc . addOp ( opStr , true ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (32 (800{val=cc}) (235{val=.}) (802{val=listSeparator}) (216{val=()})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (32 (800{val=cc}) (235{val=.}) (802{val=addOp}) (214{val=(}) (800{val=opStr}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/34/parent/src_com_google_javascript_jscomp_CodeGenerator.java
-------------------------------------------------------------------------------
Edit Distance : 6
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ; reportCodeChange
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ; reportCodeChange
Distance : 7

1
Tree	cc . listSeparator ( cc ) ; catch
Code	cc . listSeparator ( cc ) ; catch
Distance : 5

2
Tree	cc . listSeparator ( cc ) ; throw
Code	cc . listSeparator ( cc ) ; throw
Distance : 5

3
Tree	cc . listSeparator ( cc ) ; n
Code	cc . listSeparator ( cc ) ; n
Distance : 5

4
Tree	cc . listSeparator ( cc ) ; e
Code	cc . listSeparator ( cc ) ; e
Distance : 5

5
Tree	cc . listSeparator ( cc ) ; String
Code	cc . listSeparator ( cc ) ; String
Distance : 5

6
Tree	cc . listSeparator ( cc ) ; compiler
Code	cc . listSeparator ( cc ) ; compiler
Distance : 5

7
Tree	cc . listSeparator ( cc ) ; !=
Code	cc . listSeparator ( cc ) ; !=
Distance : 5

8
Tree	cc . listSeparator ( cc ) ; super
Code	cc . listSeparator ( cc ) ; super
Distance : 5

9
Tree	cc . listSeparator ( cc ) ; double
Code	cc . listSeparator ( cc ) ; double
Distance : 5

10
Tree	cc . listSeparator ( cc ) ; checkState
Code	cc . listSeparator ( cc ) ; checkState
Distance : 5

11
Tree	cc . listSeparator ( cc ) ; result
Code	cc . listSeparator ( cc ) ; result
Distance : 5

12
Tree	cc . listSeparator ( cc ) ; :
Code	cc . listSeparator ( cc ) ; :
Distance : 5

13
Tree	cc . listSeparator ( cc ) ; boolean
Code	cc . listSeparator ( cc ) ; boolean
Distance : 5

14
Tree	cc . listSeparator ( cc ) ; Preconditions
Code	cc . listSeparator ( cc ) ; Preconditions
Distance : 5

15
Tree	cc . listSeparator ( cc ) ; mode
Code	cc . listSeparator ( cc ) ; mode
Distance : 5

16
Tree	cc . listSeparator ( cc ) ; <>
Code	cc . listSeparator ( cc ) ; <>
Distance : 5

17
Tree	cc . listSeparator ( cc ) ; true
Code	cc . listSeparator ( cc ) ; true
Distance : 5

18
Tree	cc . listSeparator ( cc ) ; !
Code	cc . listSeparator ( cc ) ; !
Distance : 5

19
Tree	cc . listSeparator ( cc ) ; []
Code	cc . listSeparator ( cc ) ; []
Distance : 5

20
Tree	cc . listSeparator ( cc ) ; ()
Code	cc . listSeparator ( cc ) ; ()
Distance : 5

21
Tree	cc . listSeparator ( cc ) ; }
Code	cc . listSeparator ( cc ) ; }
Distance : 5

22
Tree	cc . listSeparator ( cc ) ; void
Code	cc . listSeparator ( cc ) ; void
Distance : 5

23
Tree	cc . listSeparator ( cc ) ; ==
Code	cc . listSeparator ( cc ) ; ==
Distance : 5

24
Tree	cc . listSeparator ( cc ) ; ]
Code	cc . listSeparator ( cc ) ; ]
Distance : 5

25
Tree	cc . listSeparator ( cc ) ; [
Code	cc . listSeparator ( cc ) ; [
Distance : 5

26
Tree	cc . listSeparator () ; parent
Code	cc . listSeparator () ; parent
Distance : 7

27
Tree	cc () . listSeparator () ; !
Code	cc () . listSeparator () ; !
Distance : 8

28
Tree	cc () . listSeparator () ; assertEquals
Code	cc () . listSeparator () ; assertEquals
Distance : 8

29
Tree	cc () . listSeparator () ; MathRuntimeException
Code	cc () . listSeparator () ; MathRuntimeException
Distance : 8

30
Tree	cc . listSeparator () ; type
Code	cc . listSeparator () ; type
Distance : 7

31
Tree	cc . listSeparator () ; try
Code	cc . listSeparator () ; try
Distance : 7

32
Tree	cc . listSeparator () ; fail
Code	cc . listSeparator () ; fail
Distance : 7

33
Tree	cc . listSeparator () ; Args
Code	cc . listSeparator () ; Args
Distance : 7

34
Tree	cc . listSeparator () ; List
Code	cc . listSeparator () ; List
Distance : 7

35
Tree	cc . listSeparator () ; str
Code	cc . listSeparator () ; str
Distance : 7

36
Tree	cc . listSeparator ( cc ) ; =
Code	cc . listSeparator ( cc ) ; =
Distance : 5

37
Tree	cc . listSeparator () ; LINE_JOINER
Code	cc . listSeparator () ; LINE_JOINER
Distance : 7

38
Tree	cc . listSeparator () ; invocation
Code	cc . listSeparator () ; invocation
Distance : 7

39
Tree	cc . listSeparator () ; ArrayList
Code	cc . listSeparator () ; ArrayList
Distance : 7

40
Tree	cc . listSeparator () ; fireChangeEvent
Code	cc . listSeparator () ; fireChangeEvent
Distance : 7

41
Tree	cc . listSeparator () ; getInstance
Code	cc . listSeparator () ; getInstance
Distance : 7

42
Tree	cc . listSeparator () ; serialised
Code	cc . listSeparator () ; serialised
Distance : 7

43
Tree	cc . listSeparator () ; createIllegalArgumentException
Code	cc . listSeparator () ; createIllegalArgumentException
Distance : 7

44
Tree	listSeparator ( cc ) ; join
Code	listSeparator ( cc ) ; join
Distance : 7

45
Tree	listSeparator ( cc ) ; test
Code	listSeparator ( cc ) ; test
Distance : 7

46
Tree	listSeparator ( cc ) ; @
Code	listSeparator ( cc ) ; @
Distance : 7

47
Tree	cc . listSeparator ( cc ) ; -
Code	cc . listSeparator ( cc ) ; -
Distance : 5

48
Tree	cc . listSeparator () ; assertThat
Code	cc . listSeparator () ; assertThat
Distance : 7

49
Tree	cc . listSeparator ( cc ) ; ,
Code	cc . listSeparator ( cc ) ; ,
Distance : 5

50
Tree	cc . listSeparator ( cc ) ; .
Code	cc . listSeparator ( cc ) ; .
Distance : 5

51
Tree	cc . listSeparator ( cc ) ; )
Code	cc . listSeparator ( cc ) ; )
Distance : 5

52
Tree	listSeparator ( cc ) ; this
Code	listSeparator ( cc ) ; this
Distance : 7

53
Tree	listSeparator ( cc ) ; <
Code	listSeparator ( cc ) ; <
Distance : 7

54
Tree	listSeparator ( cc ) ; if
Code	listSeparator ( cc ) ; if
Distance : 7

55
Tree	listSeparator ( cc ) ; ]
Code	listSeparator ( cc ) ; ]
Distance : 7

56
Tree	cc . listSeparator () ; *
Code	cc . listSeparator () ; *
Distance : 7

57
Tree	cc . listSeparator () ; join
Code	cc . listSeparator () ; join
Distance : 7

58
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ; test
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ; test
Distance : 7

59
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ; final
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ; final
Distance : 7

60
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ; <
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ; <
Distance : 7

61
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ; if
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ; if
Distance : 7

62
Tree	listSeparator ( cc ) ; final
Code	listSeparator ( cc ) ; final
Distance : 7

63
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ; (
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ; (
Distance : 7

64
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ; cc
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ; cc
Distance : 7

65
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ; <blank>
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ; <blank>
Distance : 7

66
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ; ;
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ; ;
Distance : 7

67
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ; )
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ; )
Distance : 7

68
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ; .
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ; .
Distance : 7

69
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ; ,
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ; ,
Distance : 7

70
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ; =
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ; =
Distance : 7

71
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ; }
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ; }
Distance : 7

72
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ; ()
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ; ()
Distance : 7

73
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ; {
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ; {
Distance : 7

74
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ; <s>
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ; <s>
Distance : 7

75
Tree	cc () . listSeparator () ; []
Code	cc () . listSeparator () ; []
Distance : 8

76
Tree	listSeparator ( cc ) ; =
Code	listSeparator ( cc ) ; =
Distance : 7

77
Tree	listSeparator ( cc ) ; [
Code	listSeparator ( cc ) ; [
Distance : 7

78
Tree	cc . listSeparator ( cc ) ; ;
Code	cc . listSeparator ( cc ) ; ;
Distance : 5

79
Tree	cc . listSeparator ( cc ) ; <blank>
Code	cc . listSeparator ( cc ) ; <blank>
Distance : 5

80
Tree	cc . listSeparator ( cc ) ; cc
Code	cc . listSeparator ( cc ) ; cc
Distance : 5

81
Tree	cc . listSeparator ( cc ) ; <s>
Code	cc . listSeparator ( cc ) ; <s>
Distance : 5

82
Tree	cc . listSeparator ( cc ) ; (
Code	cc . listSeparator ( cc ) ; (
Distance : 5

83
Tree	cc . listSeparator ( cc ) ; if
Code	cc . listSeparator ( cc ) ; if
Distance : 5

84
Tree	cc . listSeparator ( cc ) ; <
Code	cc . listSeparator ( cc ) ; <
Distance : 5

85
Tree	cc . listSeparator ( cc ) ; this
Code	cc . listSeparator ( cc ) ; this
Distance : 5

86
Tree	cc . listSeparator ( cc ) ; final
Code	cc . listSeparator ( cc ) ; final
Distance : 5

87
Tree	cc . listSeparator ( cc ) ; public
Code	cc . listSeparator ( cc ) ; public
Distance : 5

88
Tree	listSeparator ( cc ) ; }
Code	listSeparator ( cc ) ; }
Distance : 7

89
Tree	cc . listSeparator ( cc ) ; new
Code	cc . listSeparator ( cc ) ; new
Distance : 5

90
Tree	listSeparator ( cc ) ; Preconditions
Code	listSeparator ( cc ) ; Preconditions
Distance : 7

91
Tree	listSeparator ( cc ) ; {
Code	listSeparator ( cc ) ; {
Distance : 7

92
Tree	listSeparator ( cc ) ; .
Code	listSeparator ( cc ) ; .
Distance : 7

93
Tree	listSeparator ( cc ) ; )
Code	listSeparator ( cc ) ; )
Distance : 7

94
Tree	listSeparator ( cc ) ; ;
Code	listSeparator ( cc ) ; ;
Distance : 7

95
Tree	listSeparator ( cc ) ; (
Code	listSeparator ( cc ) ; (
Distance : 7

96
Tree	listSeparator ( cc ) ; <s>
Code	listSeparator ( cc ) ; <s>
Distance : 7

97
Tree	listSeparator ( cc ) ; cc
Code	listSeparator ( cc ) ; cc
Distance : 7

98
Tree	listSeparator ( cc ) ; <blank>
Code	listSeparator ( cc ) ; <blank>
Distance : 7

99
Tree	listSeparator ( cc ) ; ()
Code	listSeparator ( cc ) ; ()
Distance : 7

========================================================================


========================================================================
Example Number: 27
Parent Code is: 
options.dependencyOptions . needsManagement () && ! options.skipAllPasses && options.closurePass
-------------------------------------------------------------------------------
Child code is: 
options.dependencyOptions . needsManagement () && options.closurePass
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (32 (40{val=options.dependencyOptions}) (235{val=.}) (802{val=needsManagement}) (216{val=()})) (249{val=&&}) (38 (207{val=!}) (40{val=options.skipAllPasses})) (249{val=&&}) (40{val=options.closurePass})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (32 (40{val=options.dependencyOptions}) (235{val=.}) (802{val=needsManagement}) (216{val=()})) (249{val=&&}) (40{val=options.closurePass})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/31/parent/src_com_google_javascript_jscomp_Compiler.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	yield && currentScript . && ( null ) && ^
Code	yield && currentScript . && ( null ) && ^
Distance : 8

1
Tree	typesIndexedByProperty > sideEffectInfo + STRING_CONSTANT
Code	typesIndexedByProperty > sideEffectInfo + STRING_CONSTANT
Distance : 6

2
Tree	NULL_TYPE > transformed + STRING_CONSTANT
Code	NULL_TYPE > transformed + STRING_CONSTANT
Distance : 6

3
Tree	objectMethodsGuru > setFunction + STRING_CONSTANT
Code	objectMethodsGuru > setFunction + STRING_CONSTANT
Distance : 6

4
Tree	findDeps > legacyNamespaceNode + STRING_CONSTANT
Code	findDeps > legacyNamespaceNode + STRING_CONSTANT
Distance : 6

5
Tree	convention > transformed + STRING_CONSTANT
Code	convention > transformed + STRING_CONSTANT
Distance : 6

6
Tree	findDeps > namespaceNode + STRING_CONSTANT
Code	findDeps > namespaceNode + STRING_CONSTANT
Distance : 6

7
Tree	oldRoot > setFunction + STRING_CONSTANT
Code	oldRoot > setFunction + STRING_CONSTANT
Distance : 6

8
Tree	typesIndexedByProperty > setFunction + STRING_CONSTANT
Code	typesIndexedByProperty > setFunction + STRING_CONSTANT
Distance : 6

9
Tree	bundler > MILLIS_PER_DAY + STRING_CONSTANT
Code	bundler > MILLIS_PER_DAY + STRING_CONSTANT
Distance : 6

10
Tree	findDeps > argMismatchStubbings + STRING_CONSTANT
Code	findDeps > argMismatchStubbings + STRING_CONSTANT
Distance : 6

11
Tree	StackTraceFilteringTest > transformed + STRING_CONSTANT
Code	StackTraceFilteringTest > transformed + STRING_CONSTANT
Distance : 6

12
Tree	findDeps > sideEffectInfo + STRING_CONSTANT
Code	findDeps > sideEffectInfo + STRING_CONSTANT
Distance : 6

13
Tree	sourceJarComparator > transformed + STRING_CONSTANT
Code	sourceJarComparator > transformed + STRING_CONSTANT
Distance : 6

14
Tree	AtLeastXVerificationTest > targets + STRING_CONSTANT
Code	AtLeastXVerificationTest > targets + STRING_CONSTANT
Distance : 6

15
Tree	findDeps > setFunction + STRING_CONSTANT
Code	findDeps > setFunction + STRING_CONSTANT
Distance : 6

16
Tree	NULL_TYPE > targets + STRING_CONSTANT
Code	NULL_TYPE > targets + STRING_CONSTANT
Distance : 6

17
Tree	convention > targets + STRING_CONSTANT
Code	convention > targets + STRING_CONSTANT
Distance : 6

18
Tree	oldRoot > scopes + STRING_CONSTANT
Code	oldRoot > scopes + STRING_CONSTANT
Distance : 6

19
Tree	objectMethodsGuru > ResourceBundleWrapper + STRING_CONSTANT
Code	objectMethodsGuru > ResourceBundleWrapper + STRING_CONSTANT
Distance : 6

20
Tree	typesIndexedByProperty > scopes + STRING_CONSTANT
Code	typesIndexedByProperty > scopes + STRING_CONSTANT
Distance : 6

21
Tree	subformats > transformed + STRING_CONSTANT
Code	subformats > transformed + STRING_CONSTANT
Distance : 6

22
Tree	AtLeastXVerificationTest > transformed + STRING_CONSTANT
Code	AtLeastXVerificationTest > transformed + STRING_CONSTANT
Distance : 6

23
Tree	objectMethodsGuru > sideEffectInfo + STRING_CONSTANT
Code	objectMethodsGuru > sideEffectInfo + STRING_CONSTANT
Distance : 6

24
Tree	typesIndexedByProperty > namespaceNode + STRING_CONSTANT
Code	typesIndexedByProperty > namespaceNode + STRING_CONSTANT
Distance : 6

25
Tree	oldRoot > transformed + STRING_CONSTANT
Code	oldRoot > transformed + STRING_CONSTANT
Distance : 6

26
Tree	findDeps > transformed + STRING_CONSTANT
Code	findDeps > transformed + STRING_CONSTANT
Distance : 6

27
Tree	objectMethodsGuru > targets + STRING_CONSTANT
Code	objectMethodsGuru > targets + STRING_CONSTANT
Distance : 6

28
Tree	oldRoot > targets + STRING_CONSTANT
Code	oldRoot > targets + STRING_CONSTANT
Distance : 6

29
Tree	typesIndexedByProperty > targets + STRING_CONSTANT
Code	typesIndexedByProperty > targets + STRING_CONSTANT
Distance : 6

30
Tree	objectMethodsGuru > MILLIS_PER_DAY + STRING_CONSTANT
Code	objectMethodsGuru > MILLIS_PER_DAY + STRING_CONSTANT
Distance : 6

31
Tree	findDeps > targets + STRING_CONSTANT
Code	findDeps > targets + STRING_CONSTANT
Distance : 6

32
Tree	oldRoot > MILLIS_PER_DAY + STRING_CONSTANT
Code	oldRoot > MILLIS_PER_DAY + STRING_CONSTANT
Distance : 6

33
Tree	typesIndexedByProperty > MILLIS_PER_DAY + STRING_CONSTANT
Code	typesIndexedByProperty > MILLIS_PER_DAY + STRING_CONSTANT
Distance : 6

34
Tree	findDeps > MILLIS_PER_DAY + STRING_CONSTANT
Code	findDeps > MILLIS_PER_DAY + STRING_CONSTANT
Distance : 6

35
Tree	bundler > transformed + STRING_CONSTANT
Code	bundler > transformed + STRING_CONSTANT
Distance : 6

36
Tree	objectMethodsGuru > argMismatchStubbings + STRING_CONSTANT
Code	objectMethodsGuru > argMismatchStubbings + STRING_CONSTANT
Distance : 6

37
Tree	objectMethodsGuru > legacyNamespaceNode + STRING_CONSTANT
Code	objectMethodsGuru > legacyNamespaceNode + STRING_CONSTANT
Distance : 6

38
Tree	oldRoot > argMismatchStubbings + STRING_CONSTANT
Code	oldRoot > argMismatchStubbings + STRING_CONSTANT
Distance : 6

39
Tree	typesIndexedByProperty > argMismatchStubbings + STRING_CONSTANT
Code	typesIndexedByProperty > argMismatchStubbings + STRING_CONSTANT
Distance : 6

40
Tree	oldRoot > legacyNamespaceNode + STRING_CONSTANT
Code	oldRoot > legacyNamespaceNode + STRING_CONSTANT
Distance : 6

41
Tree	objectMethodsGuru > namespaceNode + STRING_CONSTANT
Code	objectMethodsGuru > namespaceNode + STRING_CONSTANT
Distance : 6

42
Tree	bundler > targets + STRING_CONSTANT
Code	bundler > targets + STRING_CONSTANT
Distance : 6

43
Tree	typesIndexedByProperty > legacyNamespaceNode + STRING_CONSTANT
Code	typesIndexedByProperty > legacyNamespaceNode + STRING_CONSTANT
Distance : 6

44
Tree	oldRoot > namespaceNode + STRING_CONSTANT
Code	oldRoot > namespaceNode + STRING_CONSTANT
Distance : 6

45
Tree	oldRoot > sideEffectInfo + STRING_CONSTANT
Code	oldRoot > sideEffectInfo + STRING_CONSTANT
Distance : 6

46
Tree	objectMethodsGuru > scopes + STRING_CONSTANT
Code	objectMethodsGuru > scopes + STRING_CONSTANT
Distance : 6

47
Tree	oldRoot > slots + STRING_CONSTANT
Code	oldRoot > slots + STRING_CONSTANT
Distance : 6

48
Tree	oldRoot > ResourceBundleWrapper + STRING_CONSTANT
Code	oldRoot > ResourceBundleWrapper + STRING_CONSTANT
Distance : 6

49
Tree	subformats > targets + STRING_CONSTANT
Code	subformats > targets + STRING_CONSTANT
Distance : 6

50
Tree	bundler > argMismatchStubbings + STRING_CONSTANT
Code	bundler > argMismatchStubbings + STRING_CONSTANT
Distance : 6

51
Tree	sourceJarComparator > MILLIS_PER_DAY + STRING_CONSTANT
Code	sourceJarComparator > MILLIS_PER_DAY + STRING_CONSTANT
Distance : 6

52
Tree	findDeps > isDotPrototype + STRING_CONSTANT
Code	findDeps > isDotPrototype + STRING_CONSTANT
Distance : 6

53
Tree	bundler > legacyNamespaceNode + STRING_CONSTANT
Code	bundler > legacyNamespaceNode + STRING_CONSTANT
Distance : 6

54
Tree	patternParam > transformed + STRING_CONSTANT
Code	patternParam > transformed + STRING_CONSTANT
Distance : 6

55
Tree	oldRoot > lhsOfForInLoop + STRING_CONSTANT
Code	oldRoot > lhsOfForInLoop + STRING_CONSTANT
Distance : 6

56
Tree	objectMethodsGuru > topInterface + STRING_CONSTANT
Code	objectMethodsGuru > topInterface + STRING_CONSTANT
Distance : 6

57
Tree	namedA > targets + STRING_CONSTANT
Code	namedA > targets + STRING_CONSTANT
Distance : 6

58
Tree	typesIndexedByProperty > srcParent + STRING_CONSTANT
Code	typesIndexedByProperty > srcParent + STRING_CONSTANT
Distance : 6

59
Tree	objectMethodsGuru > TokenStream + STRING_CONSTANT
Code	objectMethodsGuru > TokenStream + STRING_CONSTANT
Distance : 6

60
Tree	objectMethodsGuru > methodEquals + STRING_CONSTANT
Code	objectMethodsGuru > methodEquals + STRING_CONSTANT
Distance : 6

61
Tree	findDeps > isGeneratorFunction + STRING_CONSTANT
Code	findDeps > isGeneratorFunction + STRING_CONSTANT
Distance : 6

62
Tree	oldRoot > TokenStream + STRING_CONSTANT
Code	oldRoot > TokenStream + STRING_CONSTANT
Distance : 6

63
Tree	tzId > transformed + STRING_CONSTANT
Code	tzId > transformed + STRING_CONSTANT
Distance : 6

64
Tree	pomComparator > targets + STRING_CONSTANT
Code	pomComparator > targets + STRING_CONSTANT
Distance : 6

65
Tree	objectMethodsGuru > lhsOfForInLoop + STRING_CONSTANT
Code	objectMethodsGuru > lhsOfForInLoop + STRING_CONSTANT
Distance : 6

66
Tree	bundler > namespaceNode + STRING_CONSTANT
Code	bundler > namespaceNode + STRING_CONSTANT
Distance : 6

67
Tree	typesIndexedByProperty > lhsOfForInLoop + STRING_CONSTANT
Code	typesIndexedByProperty > lhsOfForInLoop + STRING_CONSTANT
Distance : 6

68
Tree	the_mock_type > transformed + STRING_CONSTANT
Code	the_mock_type > transformed + STRING_CONSTANT
Distance : 6

69
Tree	objectMethodsGuru > superEquals + STRING_CONSTANT
Code	objectMethodsGuru > superEquals + STRING_CONSTANT
Distance : 6

70
Tree	typesIndexedByProperty > TokenStream + STRING_CONSTANT
Code	typesIndexedByProperty > TokenStream + STRING_CONSTANT
Distance : 6

71
Tree	OngoingVerifyingModeTest > transformed + STRING_CONSTANT
Code	OngoingVerifyingModeTest > transformed + STRING_CONSTANT
Distance : 6

72
Tree	typesIndexedByProperty > transformed + STRING_CONSTANT
Code	typesIndexedByProperty > transformed + STRING_CONSTANT
Distance : 6

73
Tree	guardA > transformed + STRING_CONSTANT
Code	guardA > transformed + STRING_CONSTANT
Distance : 6

74
Tree	StackTraceFilteringTest > MILLIS_PER_DAY + STRING_CONSTANT
Code	StackTraceFilteringTest > MILLIS_PER_DAY + STRING_CONSTANT
Distance : 6

75
Tree	typesIndexedByProperty > ResourceBundleWrapper + STRING_CONSTANT
Code	typesIndexedByProperty > ResourceBundleWrapper + STRING_CONSTANT
Distance : 6

76
Tree	StackTraceFilteringTest > targets + STRING_CONSTANT
Code	StackTraceFilteringTest > targets + STRING_CONSTANT
Distance : 6

77
Tree	namedA > transformed + STRING_CONSTANT
Code	namedA > transformed + STRING_CONSTANT
Distance : 6

78
Tree	objectMethodsGuru > slots + STRING_CONSTANT
Code	objectMethodsGuru > slots + STRING_CONSTANT
Distance : 6

79
Tree	typesIndexedByProperty > slots + STRING_CONSTANT
Code	typesIndexedByProperty > slots + STRING_CONSTANT
Distance : 6

80
Tree	sourceJarComparator > targets + STRING_CONSTANT
Code	sourceJarComparator > targets + STRING_CONSTANT
Distance : 6

81
Tree	AtLeastXVerificationTest > MILLIS_PER_DAY + STRING_CONSTANT
Code	AtLeastXVerificationTest > MILLIS_PER_DAY + STRING_CONSTANT
Distance : 6

82
Tree	objectMethodsGuru > isDotPrototype + STRING_CONSTANT
Code	objectMethodsGuru > isDotPrototype + STRING_CONSTANT
Distance : 6

83
Tree	oldRoot > isDotPrototype + STRING_CONSTANT
Code	oldRoot > isDotPrototype + STRING_CONSTANT
Distance : 6

84
Tree	pomComparator > transformed + STRING_CONSTANT
Code	pomComparator > transformed + STRING_CONSTANT
Distance : 6

85
Tree	NULL_TYPE > MILLIS_PER_DAY + STRING_CONSTANT
Code	NULL_TYPE > MILLIS_PER_DAY + STRING_CONSTANT
Distance : 6

86
Tree	findDeps > ResourceBundleWrapper + STRING_CONSTANT
Code	findDeps > ResourceBundleWrapper + STRING_CONSTANT
Distance : 6

87
Tree	convention > MILLIS_PER_DAY + STRING_CONSTANT
Code	convention > MILLIS_PER_DAY + STRING_CONSTANT
Distance : 6

88
Tree	objectMethodsGuru > isGeneratorFunction + STRING_CONSTANT
Code	objectMethodsGuru > isGeneratorFunction + STRING_CONSTANT
Distance : 6

89
Tree	findDeps > scopes + STRING_CONSTANT
Code	findDeps > scopes + STRING_CONSTANT
Distance : 6

90
Tree	oldRoot > isGeneratorFunction + STRING_CONSTANT
Code	oldRoot > isGeneratorFunction + STRING_CONSTANT
Distance : 6

91
Tree	typesIndexedByProperty > isDotPrototype + STRING_CONSTANT
Code	typesIndexedByProperty > isDotPrototype + STRING_CONSTANT
Distance : 6

92
Tree	findDeps > slots + STRING_CONSTANT
Code	findDeps > slots + STRING_CONSTANT
Distance : 6

93
Tree	objectMethodsGuru > srcParent + STRING_CONSTANT
Code	objectMethodsGuru > srcParent + STRING_CONSTANT
Distance : 6

94
Tree	typesIndexedByProperty > isGeneratorFunction + STRING_CONSTANT
Code	typesIndexedByProperty > isGeneratorFunction + STRING_CONSTANT
Distance : 6

95
Tree	subformats > MILLIS_PER_DAY + STRING_CONSTANT
Code	subformats > MILLIS_PER_DAY + STRING_CONSTANT
Distance : 6

96
Tree	oldRoot > srcParent + STRING_CONSTANT
Code	oldRoot > srcParent + STRING_CONSTANT
Distance : 6

97
Tree	objectMethodsGuru > transformed + STRING_CONSTANT
Code	objectMethodsGuru > transformed + STRING_CONSTANT
Distance : 6

98
Tree	null != this . isMismatchesReported . needsManagement ( path , this . minimum )
Code	null != this . isMismatchesReported . needsManagement ( path , this . minimum )
Distance : 12

99
Tree	options.dependencyOptions < nominalType
Code	options.dependencyOptions < nominalType
Distance : 5

========================================================================


========================================================================
Example Number: 28
Parent Code is: 
{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ ( new NodeTraversal ( compiler , this ) ) . traverseRoots ( externs , root ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (36 (214{val=(}) (14 (304{val=new}) (43 (801{val=NodeTraversal})) (214{val=(}) (800{val=compiler}) (234{val=,}) (315{val=this}) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=traverse}) (214{val=(}) (800{val=root}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (36 (214{val=(}) (14 (304{val=new}) (43 (801{val=NodeTraversal})) (214{val=(}) (800{val=compiler}) (234{val=,}) (315{val=this}) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=traverseRoots}) (214{val=(}) (800{val=externs}) (234{val=,}) (800{val=root}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/30/parent/src_com_google_javascript_jscomp_FlowSensitiveInlineVariables.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( externs , compiler ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( externs , compiler ) , null ) ; }
Distance : 10

1
Tree	{ externs . traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( NUMBER_CONSTANT , externs , root , root ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( NUMBER_CONSTANT , externs , root , root ) , null ) ; }
Distance : 12

2
Tree	{ root . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( NUMBER_CONSTANT , externs , root , root ) , null ) ; }
Code	{ root . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( NUMBER_CONSTANT , externs , root , root ) , null ) ; }
Distance : 13

3
Tree	{ ( new NodeTraversal ( root , this , externs ) ) . traverse ( compiler ) ; }
Code	{ ( new NodeTraversal ( root , this , externs ) ) . traverse ( compiler ) ; }
Distance : 7

4
Tree	{ ( new NodeTraversal ( compiler , null , true ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , null , true ) ) . traverseRoots ( root ) ; }
Distance : 5

5
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( true ) , true ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( true ) , true ) ; }
Distance : 7

6
Tree	{ new NodeTraversal ( compiler , this , externs ) . traverseRoots ( root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , externs ) . traverseRoots ( root ) . traverse ( CHAR_CONS ) ; }
Distance : 9

7
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverseRoots ( NUMBER_CONSTANT , externs , root , root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverseRoots ( NUMBER_CONSTANT , externs , root , root ) , null ) ; }
Distance : 12

8
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( compiler , root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( compiler , root ) , null ) ; }
Distance : 10

9
Tree	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( false ) , true ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( false ) , true ) ; }
Distance : 7

10
Tree	{ ( new NodeTraversal ( compiler , externs , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , externs , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; }
Distance : 5

11
Tree	{ root . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( NUMBER_CONSTANT , externs , root , root ) , null ) ; }
Code	{ root . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( NUMBER_CONSTANT , externs , root , root ) , null ) ; }
Distance : 13

12
Tree	{ ( new NodeTraversal ( compiler , externs , compiler , false ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , externs , compiler , false ) ) . traverse ( externs ) ; }
Distance : 8

13
Tree	{ externs . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( compiler ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( compiler ) , null ) ; }
Distance : 9

14
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( NUMBER_CONSTANT , externs , root , root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( NUMBER_CONSTANT , externs , root , root ) , null ) ; }
Distance : 12

15
Tree	{ externs . traverseRoots ( compiler . traverse ( null , false ) , null ) ; }
Code	{ externs . traverseRoots ( compiler . traverse ( null , false ) , null ) ; }
Distance : 12

16
Tree	{ new NodeTraversal ( compiler , this , root ) . traverseRoots ( externs , root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . traverseRoots ( externs , root ) . traverse ( CHAR_CONS ) ; }
Distance : 8

17
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( externs ) , CHAR_CONS ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( externs ) , CHAR_CONS ) ; }
Distance : 6

18
Tree	{ ( new NodeTraversal ( externs , null , false ) ) . traverseRoots ( compiler ) ; }
Code	{ ( new NodeTraversal ( externs , null , false ) ) . traverseRoots ( compiler ) ; }
Distance : 7

19
Tree	{ root . traverse ( compiler . traverse ( null , true ) , null ) ; }
Code	{ root . traverse ( compiler . traverse ( null , true ) , null ) ; }
Distance : 12

20
Tree	{ externs . traverse ( compiler . traverseRoots ( null , true ) , null ) ; }
Code	{ externs . traverse ( compiler . traverseRoots ( null , true ) , null ) ; }
Distance : 12

21
Tree	{ externs . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( compiler ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( compiler ) , null ) ; }
Distance : 9

22
Tree	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( externs ) , CHAR_CONS ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( externs ) , CHAR_CONS ) ; }
Distance : 6

23
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( false ) , true ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( false ) , true ) ; }
Distance : 7

24
Tree	{ new NodeTraversal ( compiler , this , root ) . traverse ( root ) . traverseRoots ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . traverse ( root ) . traverseRoots ( CHAR_CONS ) ; }
Distance : 10

25
Tree	{ externs . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( compiler , root ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( compiler , root ) , null ) ; }
Distance : 10

26
Tree	{ traverse ( new NodeTraversal ( compiler , this , compiler ) . traverseRoots ( false ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , compiler ) . traverseRoots ( false ) , false ) ; }
Distance : 6

27
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( compiler ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( compiler ) , false ) ; }
Distance : 6

28
Tree	{ externs . traverse ( new NodeTraversal ( compiler , this , externs ) . traverseRoots ( NUMBER_CONSTANT , compiler , root , root ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , this , externs ) . traverseRoots ( NUMBER_CONSTANT , compiler , root , root ) , null ) ; }
Distance : 13

29
Tree	{ externs . traverse ( new NodeTraversal ( compiler , this , compiler ) . traverseRoots ( false ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , this , compiler ) . traverseRoots ( false ) , null ) ; }
Distance : 8

30
Tree	{ ( new NodeTraversal ( root , null , false ) ) . traverse ( compiler ) ; }
Code	{ ( new NodeTraversal ( root , null , false ) ) . traverse ( compiler ) ; }
Distance : 8

31
Tree	{ externs . traverseRoots ( traverse ( NUMBER_CONSTANT , false ) , null ) ; }
Code	{ externs . traverseRoots ( traverse ( NUMBER_CONSTANT , false ) , null ) ; }
Distance : 13

32
Tree	{ root . traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , null ) ; }
Code	{ root . traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , null ) ; }
Distance : 8

33
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , ! ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , ! ) ; }
Distance : 6

34
Tree	{ ( new NodeTraversal ( compiler , return; , false ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , return; , false ) ) . traverse ( root ) ; }
Distance : 6

35
Tree	{ ( new NodeTraversal ( compiler , compiler , externs , false ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , externs , false ) ) . traverseRoots ( root ) ; }
Distance : 7

36
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( false ) , ! ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( false ) , ! ) ; }
Distance : 6

37
Tree	{ new NodeTraversal ( compiler , this , root ) . traverse ( externs , root ) . traverseRoots ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . traverse ( externs , root ) . traverseRoots ( CHAR_CONS ) ; }
Distance : 9

38
Tree	{ externs . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( compiler , root ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( compiler , root ) , null ) ; }
Distance : 10

39
Tree	{ ( new NodeTraversal ( root , compiler , compiler , false ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( root , compiler , compiler , false ) ) . traverse ( externs ) ; }
Distance : 8

40
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( false ) , else ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( false ) , else ) ; }
Distance : 7

41
Tree	{ ( new NodeTraversal ( root , compiler , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( root , compiler , NUMBER_CONSTANT ) ) . traverseRoots ( root ) ; }
Distance : 5

42
Tree	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( true ) , true ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( true ) , true ) ; }
Distance : 7

43
Tree	{ ( new NodeTraversal ( externs , root , NUMBER_CONSTANT ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( externs , root , NUMBER_CONSTANT ) ) . traverse ( root ) ; }
Distance : 7

44
Tree	{ new NodeTraversal ( compiler , this , externs ) . traverseRoots ( root , root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , externs ) . traverseRoots ( root , root ) . traverse ( CHAR_CONS ) ; }
Distance : 9

45
Tree	{ compiler . traverseRoots ( traverse ( NUMBER_CONSTANT , false ) , null ) ; }
Code	{ compiler . traverseRoots ( traverse ( NUMBER_CONSTANT , false ) , null ) ; }
Distance : 13

46
Tree	{ externs . traverse ( new NodeTraversal ( compiler , this , externs ) . traverseRoots ( NUMBER_CONSTANT , externs , root , root ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , this , externs ) . traverseRoots ( NUMBER_CONSTANT , externs , root , root ) , null ) ; }
Distance : 12

47
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( compiler , root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( compiler , root ) , null ) ; }
Distance : 10

48
Tree	{ ( new NodeTraversal ( externs , this , root ) ) . traverseRoots ( compiler ) ; }
Code	{ ( new NodeTraversal ( externs , this , root ) ) . traverseRoots ( compiler ) ; }
Distance : 6

49
Tree	{ externs . traverse ( new NodeTraversal ( compiler , this , compiler ) . traverse ( externs , root ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , this , compiler ) . traverse ( externs , root ) , null ) ; }
Distance : 9

50
Tree	{ ( new NodeTraversal ( externs , compiler , NUMBER_CONSTANT ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( externs , compiler , NUMBER_CONSTANT ) ) . traverseRoots ( externs ) ; }
Distance : 5

51
Tree	{ compiler . traverseRoots ( compiler . traverseRoots ( null , false ) , null ) ; }
Code	{ compiler . traverseRoots ( compiler . traverseRoots ( null , false ) , null ) ; }
Distance : 12

52
Tree	{ externs . traverse ( new NodeTraversal ( compiler , this , compiler ) . traverseRoots ( externs ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , this , compiler ) . traverseRoots ( externs ) , null ) ; }
Distance : 7

53
Tree	{ traverse ( compiler , new NodeTraversal ( root , this , externs ) . traverseRoots ( true ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( root , this , externs ) . traverseRoots ( true ) ) ; }
Distance : 9

54
Tree	{ ( new NodeTraversal ( root , root , NUMBER_CONSTANT ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( root , root , NUMBER_CONSTANT ) ) . traverse ( externs ) ; }
Distance : 7

55
Tree	{ externs . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( NUMBER_CONSTANT , root , compiler , root ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( NUMBER_CONSTANT , root , compiler , root ) , null ) ; }
Distance : 14

56
Tree	{ ( new NodeTraversal ( externs , compiler , root , false ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( externs , compiler , root , false ) ) . traverse ( root ) ; }
Distance : 8

57
Tree	{ externs . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( NUMBER_CONSTANT , root , root , externs ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( NUMBER_CONSTANT , root , root , externs ) , null ) ; }
Distance : 14

58
Tree	{ traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverse ( false ) , CHAR_CONS ) ; }
Code	{ traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverse ( false ) , CHAR_CONS ) ; }
Distance : 7

59
Tree	{ traverseRoots ( new NodeTraversal ( compiler , this , compiler ) . traverse ( false ) , false ) ; }
Code	{ traverseRoots ( new NodeTraversal ( compiler , this , compiler ) . traverse ( false ) , false ) ; }
Distance : 7

60
Tree	{ ( new NodeTraversal ( root , compiler , compiler , false ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( root , compiler , compiler , false ) ) . traverseRoots ( root ) ; }
Distance : 7

61
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( externs , compiler ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( externs , compiler ) , null ) ; }
Distance : 10

62
Tree	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverseRoots ( compiler ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverseRoots ( compiler ) , false ) ; }
Distance : 6

63
Tree	{ ( new NodeTraversal ( root , compiler , NUMBER_CONSTANT ) ) . traverse ( compiler ) ; }
Code	{ ( new NodeTraversal ( root , compiler , NUMBER_CONSTANT ) ) . traverse ( compiler ) ; }
Distance : 7

64
Tree	{ externs . traverseRoots ( new NodeTraversal ( compiler , this , externs ) . traverse ( externs , root ) , null ) ; }
Code	{ externs . traverseRoots ( new NodeTraversal ( compiler , this , externs ) . traverse ( externs , root ) , null ) ; }
Distance : 9

65
Tree	{ traverse ( compiler , new NodeTraversal ( externs , this , externs ) . traverse ( false ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( externs , this , externs ) . traverse ( false ) ) ; }
Distance : 10

66
Tree	{ compiler . traverseRoots ( compiler . traverse ( null , true ) , null ) ; }
Code	{ compiler . traverseRoots ( compiler . traverse ( null , true ) , null ) ; }
Distance : 12

67
Tree	{ compiler . traverseRoots ( traverseRoots ( NUMBER_CONSTANT , false ) , null ) ; }
Code	{ compiler . traverseRoots ( traverseRoots ( NUMBER_CONSTANT , false ) , null ) ; }
Distance : 13

68
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , compiler ) . traverse ( NUMBER_CONSTANT , compiler , root , root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , compiler ) . traverse ( NUMBER_CONSTANT , compiler , root , root ) , null ) ; }
Distance : 14

69
Tree	{ externs . traverse ( traverse ( NUMBER_CONSTANT , true ) , null ) ; }
Code	{ externs . traverse ( traverse ( NUMBER_CONSTANT , true ) , null ) ; }
Distance : 13

70
Tree	{ externs . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( externs , compiler ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( externs , compiler ) , null ) ; }
Distance : 10

71
Tree	{ new NodeTraversal ( compiler , this , externs ) . traverse ( compiler ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , externs ) . traverse ( compiler ) . traverse ( CHAR_CONS ) ; }
Distance : 10

72
Tree	{ root . traverse ( new NodeTraversal ( compiler , this , compiler ) . traverse ( true ) , null ) ; }
Code	{ root . traverse ( new NodeTraversal ( compiler , this , compiler ) . traverse ( true ) , null ) ; }
Distance : 9

73
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( compiler ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( compiler ) , null ) ; }
Distance : 9

74
Tree	{ externs . traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverse ( externs , root ) , null ) ; }
Code	{ externs . traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverse ( externs , root ) , null ) ; }
Distance : 9

75
Tree	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , externs ) . traverse ( externs , root ) , null ) ; }
Code	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , externs ) . traverse ( externs , root ) , null ) ; }
Distance : 9

76
Tree	{ ( new NodeTraversal ( root , this , root ) ) . traverse ( compiler ) ; }
Code	{ ( new NodeTraversal ( root , this , root ) ) . traverse ( compiler ) ; }
Distance : 7

77
Tree	{ new NodeTraversal ( compiler , this , root ) . traverse ( root , root ) . traverse ( super ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . traverse ( root , root ) . traverse ( super ) ; }
Distance : 10

78
Tree	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverse ( externs , root ) , null ) ; }
Code	{ compiler . traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverse ( externs , root ) , null ) ; }
Distance : 9

79
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( NUMBER_CONSTANT , root , root , externs ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( NUMBER_CONSTANT , root , root , externs ) , null ) ; }
Distance : 14

80
Tree	{ compiler . traverse ( traverse ( NUMBER_CONSTANT , true ) , null ) ; }
Code	{ compiler . traverse ( traverse ( NUMBER_CONSTANT , true ) , null ) ; }
Distance : 13

81
Tree	{ traverse ( new NodeTraversal ( compiler , this , compiler ) . traverse ( root ) , super ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , compiler ) . traverse ( root ) , super ) ; }
Distance : 7

82
Tree	{ externs . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( NUMBER_CONSTANT , root , compiler , root ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( NUMBER_CONSTANT , root , compiler , root ) , null ) ; }
Distance : 14

83
Tree	{ externs . traverseRoots ( new NodeTraversal ( compiler , this , externs ) . traverse ( true ) , null ) ; }
Code	{ externs . traverseRoots ( new NodeTraversal ( compiler , this , externs ) . traverse ( true ) , null ) ; }
Distance : 9

84
Tree	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverseRoots ( externs ) , super ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverseRoots ( externs ) , super ) ; }
Distance : 5

85
Tree	{ traverse ( compiler , new NodeTraversal ( externs , this , root ) . traverse ( false ) ) ; }
Code	{ traverse ( compiler , new NodeTraversal ( externs , this , root ) . traverse ( false ) ) ; }
Distance : 10

86
Tree	{ traverseRoots ( new NodeTraversal ( compiler , this , externs ) . traverseRoots ( externs ) , false ) ; }
Code	{ traverseRoots ( new NodeTraversal ( compiler , this , externs ) . traverseRoots ( externs ) , false ) ; }
Distance : 5

87
Tree	{ ( new NodeTraversal ( compiler , root , root , false ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , root , root , false ) ) . traverseRoots ( externs ) ; }
Distance : 7

88
Tree	{ externs . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( NUMBER_CONSTANT , root , root , externs ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( NUMBER_CONSTANT , root , root , externs ) , null ) ; }
Distance : 14

89
Tree	{ ( new NodeTraversal ( externs , compiler , compiler , false ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( externs , compiler , compiler , false ) ) . traverseRoots ( externs ) ; }
Distance : 7

90
Tree	{ root . traverse ( new NodeTraversal ( compiler , this , externs ) . traverseRoots ( externs , root ) , null ) ; }
Code	{ root . traverse ( new NodeTraversal ( compiler , this , externs ) . traverseRoots ( externs , root ) , null ) ; }
Distance : 8

91
Tree	{ new NodeTraversal ( compiler , this , compiler ) . traverse ( root ) . traverseRoots ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , compiler ) . traverse ( root ) . traverseRoots ( CHAR_CONS ) ; }
Distance : 10

92
Tree	{ ( new NodeTraversal ( compiler , break; , false ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , break; , false ) ) . traverse ( externs ) ; }
Distance : 6

93
Tree	{ new NodeTraversal ( compiler , this , root ) . traverse ( root ) . traverse ( super ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . traverse ( root ) . traverse ( super ) ; }
Distance : 10

94
Tree	{ traverseRoots ( new NodeTraversal ( compiler , this , externs ) . traverse ( root ) , super ) ; }
Code	{ traverseRoots ( new NodeTraversal ( compiler , this , externs ) . traverse ( root ) , super ) ; }
Distance : 7

95
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , compiler ) . traverseRoots ( true ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , compiler ) . traverseRoots ( true ) , null ) ; }
Distance : 8

96
Tree	{ new NodeTraversal ( compiler , this , root ) . traverse ( externs , root ) . traverse ( ! ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . traverse ( externs , root ) . traverse ( ! ) ; }
Distance : 9

97
Tree	{ ( new NodeTraversal ( compiler , null , true ) ) . traverse ( compiler ) ; }
Code	{ ( new NodeTraversal ( compiler , null , true ) ) . traverse ( compiler ) ; }
Distance : 7

98
Tree	{ traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverse ( false ) , ! ) ; }
Code	{ traverseRoots ( new NodeTraversal ( compiler , this , root ) . traverse ( false ) , ! ) ; }
Distance : 7

99
Tree	{ new NodeTraversal ( compiler , this , root ) . traverse ( compiler , root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . traverse ( compiler , root ) . traverse ( CHAR_CONS ) ; }
Distance : 10

========================================================================


========================================================================
Example Number: 29
Parent Code is: 
Node catchBody = block ( catchNode ) . copyInformationFrom ( catchNode ) ;
-------------------------------------------------------------------------------
Child code is: 
Node catchBody = blockUnchecked ( catchNode ) . copyInformationFrom ( catchNode ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Node})) (59 (800{val=catchBody}) (204{val==}) (32 (32 (802{val=block}) (214{val=(}) (800{val=catchNode}) (215{val=)})) (235{val=.}) (802{val=copyInformationFrom}) (214{val=(}) (800{val=catchNode}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Node})) (59 (800{val=catchBody}) (204{val==}) (32 (32 (802{val=blockUnchecked}) (214{val=(}) (800{val=catchNode}) (215{val=)})) (235{val=.}) (802{val=copyInformationFrom}) (214{val=(}) (800{val=catchNode}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/27/parent/src_com_google_javascript_rhino_IR.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	Node catchBody = block ( catchBody ) ; value
Code	Node catchBody = block ( catchBody ) ; value
Distance : 8

1
Tree	Node catchBody = copyInformationFrom ( catchNode ) . block ( catchNode ) ;
Code	Node catchBody = copyInformationFrom ( catchNode ) . block ( catchNode ) ;
Distance : 2

2
Tree	Node catchBody = block ( catchNode , catchBody , true ) ;
Code	Node catchBody = block ( catchNode , catchBody , true ) ;
Distance : 6

3
Tree	Node catchBody = catchBody . block ( catchBody , catchNode ) ;
Code	Node catchBody = catchBody . block ( catchBody , catchNode ) ;
Distance : 7

4
Tree	Node catchBody = catchBody . block ( catchNode ( catchBody ) , catchNode ) ;
Code	Node catchBody = catchBody . block ( catchNode ( catchBody ) , catchNode ) ;
Distance : 7

5
Tree	Node catchBody = catchBody . copyInformationFrom () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = catchBody . copyInformationFrom () . copyInformationFrom ( catchBody ) ;
Distance : 5

6
Tree	Node catchBody = copyInformationFrom ( catchBody , catchNode , true ) ;
Code	Node catchBody = copyInformationFrom ( catchBody , catchNode , true ) ;
Distance : 7

7
Tree	Node catchBody = catchBody . block ( copyInformationFrom ( catchBody ) , catchNode ) ;
Code	Node catchBody = catchBody . block ( copyInformationFrom ( catchBody ) , catchNode ) ;
Distance : 8

8
Tree	Node catchBody = catchBody . block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = catchBody . block () . copyInformationFrom ( catchBody ) ;
Distance : 5

9
Tree	Node catchBody = copyInformationFrom ( catchBody ) . block ( catchBody ) ;
Code	Node catchBody = copyInformationFrom ( catchBody ) . block ( catchBody ) ;
Distance : 4

10
Tree	Node catchBody = catchBody . copyInformationFrom () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = catchBody . copyInformationFrom () . copyInformationFrom ( catchBody ) ;
Distance : 5

11
Tree	Node catchBody = copyInformationFrom ( catchNode , catchBody , true ) ;
Code	Node catchBody = copyInformationFrom ( catchNode , catchBody , true ) ;
Distance : 6

12
Tree	Node catchBody = catchBody . copyInformationFrom () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = catchBody . copyInformationFrom () . copyInformationFrom ( catchBody ) ;
Distance : 5

13
Tree	Node catchBody = block . block ( block ( catchBody ) , catchNode ) ;
Code	Node catchBody = block . block ( block ( catchBody ) , catchNode ) ;
Distance : 8

14
Tree	Node catchBody = catchBody . block ( catchNode ( catchNode ) , catchNode ) ;
Code	Node catchBody = catchBody . block ( catchNode ( catchNode ) , catchNode ) ;
Distance : 7

15
Tree	Node catchBody = catchBody . copyInformationFrom ( catchNode , catchBody ) ;
Code	Node catchBody = catchBody . copyInformationFrom ( catchNode , catchBody ) ;
Distance : 6

16
Tree	Node catchBody = catchBody . block ( block ( catchBody ) , catchBody ) ;
Code	Node catchBody = catchBody . block ( block ( catchBody ) , catchBody ) ;
Distance : 9

17
Tree	Node catchBody = block . copyInformationFrom () . block ( catchBody ) ;
Code	Node catchBody = block . copyInformationFrom () . block ( catchBody ) ;
Distance : 6

18
Tree	Node catchBody = catchBody . copyInformationFrom () . block ( catchNode ) ;
Code	Node catchBody = catchBody . copyInformationFrom () . block ( catchNode ) ;
Distance : 5

19
Tree	Node catchBody = catchBody . block ( catchNode , catchBody ) ;
Code	Node catchBody = catchBody . block ( catchNode , catchBody ) ;
Distance : 7

20
Tree	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchNode ) ;
Distance : 1

21
Tree	Node catchBody = block . block () . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block . block () . copyInformationFrom ( catchNode ) ;
Distance : 4

22
Tree	Node catchBody = block . block () . block ( catchNode ) ;
Code	Node catchBody = block . block () . block ( catchNode ) ;
Distance : 5

23
Tree	Node catchBody = catchBody . block ( catchNode ( catchBody ) , catchBody ) ;
Code	Node catchBody = catchBody . block ( catchNode ( catchBody ) , catchBody ) ;
Distance : 8

24
Tree	Node catchBody = catchBody . block () . block ( catchBody ) ;
Code	Node catchBody = catchBody . block () . block ( catchBody ) ;
Distance : 6

25
Tree	Node catchBody = block . copyInformationFrom ( catchNode , catchBody ) ;
Code	Node catchBody = block . copyInformationFrom ( catchNode , catchBody ) ;
Distance : 6

26
Tree	Node catchBody = copyInformationFrom ( catchNode ) . block ( catchBody ) ;
Code	Node catchBody = copyInformationFrom ( catchNode ) . block ( catchBody ) ;
Distance : 3

27
Tree	Node catchBody = catchBody . copyInformationFrom ( catchBody , catchBody ) ;
Code	Node catchBody = catchBody . copyInformationFrom ( catchBody , catchBody ) ;
Distance : 7

28
Tree	Node catchBody = catchBody . block ( copyInformationFrom ( catchBody ) , catchBody ) ;
Code	Node catchBody = catchBody . block ( copyInformationFrom ( catchBody ) , catchBody ) ;
Distance : 9

29
Tree	Node catchBody = block . block ( catchNode , catchBody ) ;
Code	Node catchBody = block . block ( catchNode , catchBody ) ;
Distance : 7

30
Tree	Node catchBody = block . copyInformationFrom () . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block . copyInformationFrom () . copyInformationFrom ( catchNode ) ;
Distance : 4

31
Tree	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchNode ) ;
Distance : 1

32
Tree	Node catchBody = catchBody . block ( block ( catchNode ) , catchNode ) ;
Code	Node catchBody = catchBody . block ( block ( catchNode ) , catchNode ) ;
Distance : 8

33
Tree	Node catchBody = catchBody . block ( catchBody , catchBody ) ;
Code	Node catchBody = catchBody . block ( catchBody , catchBody ) ;
Distance : 8

34
Tree	Node catchBody = block . block () . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block . block () . copyInformationFrom ( catchNode ) ;
Distance : 4

35
Tree	Node catchBody = copyInformationFrom ( catchNode ) . block () ;
Code	Node catchBody = copyInformationFrom ( catchNode ) . block () ;
Distance : 5

36
Tree	Node catchBody = block . block ( catchNode ( catchNode ) , catchNode ) ;
Code	Node catchBody = block . block ( catchNode ( catchNode ) , catchNode ) ;
Distance : 7

37
Tree	Node catchBody = block . copyInformationFrom () . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block . copyInformationFrom () . copyInformationFrom ( catchNode ) ;
Distance : 4

38
Tree	Node catchBody = block . block ( block ( catchBody ) , catchBody ) ;
Code	Node catchBody = block . block ( block ( catchBody ) , catchBody ) ;
Distance : 9

39
Tree	Node catchBody = block . block ( copyInformationFrom ( catchNode ) , catchNode ) ;
Code	Node catchBody = block . block ( copyInformationFrom ( catchNode ) , catchNode ) ;
Distance : 8

40
Tree	Node catchBody = catchBody . block ( copyInformationFrom ( catchNode ) , catchNode ) ;
Code	Node catchBody = catchBody . block ( copyInformationFrom ( catchNode ) , catchNode ) ;
Distance : 8

41
Tree	Node catchBody = block . block ( catchNode ( catchBody ) , catchBody ) ;
Code	Node catchBody = block . block ( catchNode ( catchBody ) , catchBody ) ;
Distance : 8

42
Tree	Node catchBody = catchBody . copyInformationFrom () . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = catchBody . copyInformationFrom () . copyInformationFrom ( catchNode ) ;
Distance : 4

43
Tree	Node catchBody = catchBody . block ( block ( catchBody ) , catchNode ) ;
Code	Node catchBody = catchBody . block ( block ( catchBody ) , catchNode ) ;
Distance : 8

44
Tree	Node catchBody = block . copyInformationFrom ( catchBody , catchNode ) ;
Code	Node catchBody = block . copyInformationFrom ( catchBody , catchNode ) ;
Distance : 6

45
Tree	Node catchBody = catchBody . copyInformationFrom ( catchNode ( catchNode ) , catchBody ) ;
Code	Node catchBody = catchBody . copyInformationFrom ( catchNode ( catchNode ) , catchBody ) ;
Distance : 8

46
Tree	Node catchBody = block ( catchNode ) . block ( catchBody ) ;
Code	Node catchBody = block ( catchNode ) . block ( catchBody ) ;
Distance : 3

47
Tree	Node catchBody = block . block ( catchNode ( catchBody ) , catchNode ) ;
Code	Node catchBody = block . block ( catchNode ( catchBody ) , catchNode ) ;
Distance : 7

48
Tree	Node catchBody = block . block ( catchBody , catchNode ) ;
Code	Node catchBody = block . block ( catchBody , catchNode ) ;
Distance : 7

49
Tree	Node catchBody = catchBody . block ( catchNode ( catchNode ) , catchBody ) ;
Code	Node catchBody = catchBody . block ( catchNode ( catchNode ) , catchBody ) ;
Distance : 8

50
Tree	Node catchBody = catchBody . copyInformationFrom ( copyInformationFrom ( catchNode ) , catchBody ) ;
Code	Node catchBody = catchBody . copyInformationFrom ( copyInformationFrom ( catchNode ) , catchBody ) ;
Distance : 8

51
Tree	Node catchBody = block . copyInformationFrom () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block . copyInformationFrom () . copyInformationFrom ( catchBody ) ;
Distance : 5

52
Tree	Node catchBody = block . block ( copyInformationFrom ( catchBody ) , catchNode ) ;
Code	Node catchBody = block . block ( copyInformationFrom ( catchBody ) , catchNode ) ;
Distance : 8

53
Tree	Node catchBody = catchBody . block ( copyInformationFrom ( catchNode ) , catchBody ) ;
Code	Node catchBody = catchBody . block ( copyInformationFrom ( catchNode ) , catchBody ) ;
Distance : 8

54
Tree	Node catchBody = copyInformationFrom ( catchNode , catchNode , true ) ;
Code	Node catchBody = copyInformationFrom ( catchNode , catchNode , true ) ;
Distance : 6

55
Tree	Node catchBody = block . block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block . block () . copyInformationFrom ( catchBody ) ;
Distance : 5

56
Tree	Node catchBody = block . copyInformationFrom () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block . copyInformationFrom () . copyInformationFrom ( catchBody ) ;
Distance : 5

57
Tree	Node catchBody = copyInformationFrom ( catchNode ) . block ( catchBody ) ;
Code	Node catchBody = copyInformationFrom ( catchNode ) . block ( catchBody ) ;
Distance : 3

58
Tree	Node catchBody = block . block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block . block () . copyInformationFrom ( catchBody ) ;
Distance : 5

59
Tree	Node catchBody = catchBody . block ( block ( catchNode ) , catchNode ) ;
Code	Node catchBody = catchBody . block ( block ( catchNode ) , catchNode ) ;
Distance : 8

60
Tree	Node catchBody = block ( catchNode , catchNode , true ) ;
Code	Node catchBody = block ( catchNode , catchNode , true ) ;
Distance : 6

61
Tree	Node catchBody = catchBody . block ( catchNode , catchNode ) ;
Code	Node catchBody = catchBody . block ( catchNode , catchNode ) ;
Distance : 7

62
Tree	Node catchBody = catchBody . block ( copyInformationFrom ( catchBody ) , catchBody ) ;
Code	Node catchBody = catchBody . block ( copyInformationFrom ( catchBody ) , catchBody ) ;
Distance : 9

63
Tree	Node catchBody = catchBody . copyInformationFrom ( catchNode , catchNode ) ;
Code	Node catchBody = catchBody . copyInformationFrom ( catchNode , catchNode ) ;
Distance : 6

64
Tree	Node catchBody = block . block () . block ( catchBody ) ;
Code	Node catchBody = block . block () . block ( catchBody ) ;
Distance : 6

65
Tree	Node catchBody = block ( catchBody ) . block ( catchNode ) ;
Code	Node catchBody = block ( catchBody ) . block ( catchNode ) ;
Distance : 3

66
Tree	Node catchBody = catchBody . block () . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = catchBody . block () . copyInformationFrom ( catchNode ) ;
Distance : 4

67
Tree	Node catchBody = block . block ( copyInformationFrom ( catchBody ) , catchBody ) ;
Code	Node catchBody = block . block ( copyInformationFrom ( catchBody ) , catchBody ) ;
Distance : 9

68
Tree	Node catchBody = block . copyInformationFrom ( catchBody , catchBody ) ;
Code	Node catchBody = block . copyInformationFrom ( catchBody , catchBody ) ;
Distance : 7

69
Tree	Node catchBody = catchBody . copyInformationFrom () . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = catchBody . copyInformationFrom () . copyInformationFrom ( catchNode ) ;
Distance : 4

70
Tree	Node catchBody = block . block ( block ( catchNode ) , catchNode ) ;
Code	Node catchBody = block . block ( block ( catchNode ) , catchNode ) ;
Distance : 8

71
Tree	Node catchBody = block . block ( catchBody , catchBody ) ;
Code	Node catchBody = block . block ( catchBody , catchBody ) ;
Distance : 8

72
Tree	Node catchBody = block ( catchNode ) . block () ;
Code	Node catchBody = block ( catchNode ) . block () ;
Distance : 5

73
Tree	Node catchBody = catchBody . block () . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = catchBody . block () . copyInformationFrom ( catchNode ) ;
Distance : 4

74
Tree	Node catchBody = copyInformationFrom ( catchBody ) . block ( catchNode ) ;
Code	Node catchBody = copyInformationFrom ( catchBody ) . block ( catchNode ) ;
Distance : 3

75
Tree	Node catchBody = catchBody . copyInformationFrom ( catchNode ( catchBody ) , catchBody ) ;
Code	Node catchBody = catchBody . copyInformationFrom ( catchNode ( catchBody ) , catchBody ) ;
Distance : 8

76
Tree	Node catchBody = block . block ( catchNode ( catchNode ) , catchBody ) ;
Code	Node catchBody = block . block ( catchNode ( catchNode ) , catchBody ) ;
Distance : 8

77
Tree	Node catchBody = block . copyInformationFrom () . block ( catchNode ) ;
Code	Node catchBody = block . copyInformationFrom () . block ( catchNode ) ;
Distance : 5

78
Tree	Node catchBody = catchBody . block ( catchNode ( catchBody ) , catchBody ) ;
Code	Node catchBody = catchBody . block ( catchNode ( catchBody ) , catchBody ) ;
Distance : 8

79
Tree	Node catchBody = catchBody . copyInformationFrom ( copyInformationFrom ( catchBody ) , catchBody ) ;
Code	Node catchBody = catchBody . copyInformationFrom ( copyInformationFrom ( catchBody ) , catchBody ) ;
Distance : 9

80
Tree	Node catchBody = block . block () . block ( catchNode ) ;
Code	Node catchBody = block . block () . block ( catchNode ) ;
Distance : 5

81
Tree	Node catchBody = block . block ( copyInformationFrom ( catchNode ) , catchBody ) ;
Code	Node catchBody = block . block ( copyInformationFrom ( catchNode ) , catchBody ) ;
Distance : 8

82
Tree	Node catchBody = catchBody . block ( block ( catchNode ) , catchBody ) ;
Code	Node catchBody = catchBody . block ( block ( catchNode ) , catchBody ) ;
Distance : 9

83
Tree	Node catchBody = block . block ( copyInformationFrom ( catchBody ) , catchNode ) ;
Code	Node catchBody = block . block ( copyInformationFrom ( catchBody ) , catchNode ) ;
Distance : 8

84
Tree	Node catchBody = copyInformationFrom ( catchNode ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = copyInformationFrom ( catchNode ) . copyInformationFrom ( catchBody ) ;
Distance : 2

85
Tree	Node catchBody = catchBody . copyInformationFrom () . block ( catchBody ) ;
Code	Node catchBody = catchBody . copyInformationFrom () . block ( catchBody ) ;
Distance : 6

86
Tree	Node catchBody = copyInformationFrom ( catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = copyInformationFrom ( catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 3

87
Tree	Node catchBody = block ( catchBody ) . block () ;
Code	Node catchBody = block ( catchBody ) . block () ;
Distance : 6

88
Tree	Node catchBody = copyInformationFrom () . block ( catchBody ) ;
Code	Node catchBody = copyInformationFrom () . block ( catchBody ) ;
Distance : 6

89
Tree	Node catchBody = copyInformationFrom ( block ( catchBody ) ) ;
Code	Node catchBody = copyInformationFrom ( block ( catchBody ) ) ;
Distance : 7

90
Tree	Node catchBody = catchBody . block ( copyInformationFrom ( catchBody ) , catchNode ) ;
Code	Node catchBody = catchBody . block ( copyInformationFrom ( catchBody ) , catchNode ) ;
Distance : 8

91
Tree	Node catchBody = copyInformationFrom ( catchBody ) . block ( catchBody ) ;
Code	Node catchBody = copyInformationFrom ( catchBody ) . block ( catchBody ) ;
Distance : 4

92
Tree	Node catchBody = catchBody . block () . block ( catchNode ) ;
Code	Node catchBody = catchBody . block () . block ( catchNode ) ;
Distance : 5

93
Tree	Node catchBody = catchBody . copyInformationFrom ( catchNode , catchBody ) ;
Code	Node catchBody = catchBody . copyInformationFrom ( catchNode , catchBody ) ;
Distance : 6

94
Tree	Node catchBody = copyInformationFrom ( catchNode , catchBody , true ) ;
Code	Node catchBody = copyInformationFrom ( catchNode , catchBody , true ) ;
Distance : 6

95
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchNode ) ;
Distance : 2

96
Tree	Node catchBody = catchBody . block ( catchNode , catchBody ) ;
Code	Node catchBody = catchBody . block ( catchNode , catchBody ) ;
Distance : 7

97
Tree	Node catchBody = catchBody . copyInformationFrom () . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = catchBody . copyInformationFrom () . copyInformationFrom ( catchNode ) ;
Distance : 4

98
Tree	Node catchBody = block ( catchNode ) . block ( catchNode ) ;
Code	Node catchBody = block ( catchNode ) . block ( catchNode ) ;
Distance : 2

99
Tree	Node catchBody = copyInformationFrom ( catchBody ) . block () ;
Code	Node catchBody = copyInformationFrom ( catchBody ) . block () ;
Distance : 6

========================================================================


========================================================================
Example Number: 30
Parent Code is: 
{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
-------------------------------------------------------------------------------
Child code is: 
{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.ON_EX , finallyNode ) ; } }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (70 (303{val=for}) (214{val=(}) (44 (43 (801{val=Node})) (800{val=finallyNode})) (226{val=:}) (32 (40{val=cfa.finallyMap}) (235{val=.}) (802{val=get}) (214{val=(}) (800{val=parent}) (215{val=)})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=cfa}) (235{val=.}) (802{val=createEdge}) (214{val=(}) (800{val=fromNode}) (234{val=,}) (40{val=Branch.UNCOND}) (234{val=,}) (800{val=finallyNode}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (70 (303{val=for}) (214{val=(}) (44 (43 (801{val=Node})) (800{val=finallyNode})) (226{val=:}) (32 (40{val=cfa.finallyMap}) (235{val=.}) (802{val=get}) (214{val=(}) (800{val=parent}) (215{val=)})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=cfa}) (235{val=.}) (802{val=createEdge}) (214{val=(}) (800{val=fromNode}) (234{val=,}) (40{val=Branch.ON_EX}) (234{val=,}) (800{val=finallyNode}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/14/parent/src_com_google_javascript_jscomp_ControlFlowAnalysis.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { this . parent . createEdge ( parent , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { this . parent . createEdge ( parent , fromNode ) ; } }
Distance : 10

1
Tree	{ for ( Node parent : fromNode . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node parent : fromNode . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 10

2
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . get ( false ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . get ( false ) ; } }
Distance : 8

3
Tree	{ for ( Node fromNode : parent . get ( parent ) ) { get ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : parent . get ( parent ) ) { get ( fromNode , null ) ; } }
Distance : 8

4
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { get ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { get ( fromNode , null ) ; } }
Distance : 7

5
Tree	{ for ( Node parent : parent . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node parent : parent . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 7

6
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 6

7
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { get ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { get ( fromNode , null ) ; } }
Distance : 7

8
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

9
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { fromNode . get ( false ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { fromNode . get ( false ) ; } }
Distance : 8

10
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . get ( false ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . get ( false ) ; } }
Distance : 7

11
Tree	{ for ( final Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 10

12
Tree	{ for ( Node finallyNode : fromNode . get () ) { get ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : fromNode . get () ) { get ( fromNode , null ) ; } }
Distance : 10

13
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { cfa . get ( false ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { cfa . get ( false ) ; } }
Distance : 7

14
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . get ( false ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . get ( false ) ; } }
Distance : 6

15
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . get ( false ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . get ( false ) ; } }
Distance : 9

16
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { get ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { get ( fromNode , null ) ; } }
Distance : 8

17
Tree	{ for ( Node parent : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node parent : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 7

18
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . get ( false ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . get ( false ) ; } }
Distance : 9

19
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . get ( false ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { fromNode . get ( false ) ; } }
Distance : 8

20
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

21
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { get ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { get ( fromNode , null ) ; } }
Distance : 6

22
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { this . fromNode . get ( fromNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { this . fromNode . get ( fromNode , finallyNode ) ; } }
Distance : 7

23
Tree	{ for ( Node finallyNode : parent . get ( fromNode ) ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : parent . get ( fromNode ) ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 5

24
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { parent . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { parent . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Distance : 6

25
Tree	{ for ( Node finallyNode : cfa.finallyMap . createEdge () ) { cfa . get ( false ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . createEdge () ) { cfa . get ( false ) ; } }
Distance : 10

26
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { this . fromNode . get ( fromNode , finallyNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { this . fromNode . get ( fromNode , finallyNode ) ; } }
Distance : 8

27
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Distance : 7

28
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { get ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { get ( fromNode , null ) ; } }
Distance : 8

29
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( false ) ; } }
Distance : 10

30
Tree	{ for ( Node parent : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node parent : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 7

31
Tree	{ for ( Node parent : parent . get ( parent ) ) { cfa . createEdge ( false ) ; } }
Code	{ for ( Node parent : parent . get ( parent ) ) { cfa . createEdge ( false ) ; } }
Distance : 7

32
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

33
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( false ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( false ) ; } }
Distance : 6

34
Tree	{ for ( final Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( final Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 10

35
Tree	{ for ( Node fromNode : parent . get ( parent ) ) { parent . createEdge ( true ) ; } }
Code	{ for ( Node fromNode : parent . get ( parent ) ) { parent . createEdge ( true ) ; } }
Distance : 8

36
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . get ( false ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . get ( false ) ; } }
Distance : 8

37
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . get ( false ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . get ( false ) ; } }
Distance : 7

38
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { get ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { get ( fromNode , null ) ; } }
Distance : 7

39
Tree	{ for ( Node parent : parent . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node parent : parent . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 10

40
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( fromNode ) ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( fromNode ) ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 4

41
Tree	{ for ( Node fromNode : parent . get ( parent ) ) { fromNode . get ( false ) ; } }
Code	{ for ( Node fromNode : parent . get ( parent ) ) { fromNode . get ( false ) ; } }
Distance : 9

42
Tree	{ for ( Node parent : parent . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node parent : parent . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 10

43
Tree	{ for ( Node parent : fromNode . get ( parent ) ) { parent . createEdge ( false ) ; } }
Code	{ for ( Node parent : fromNode . get ( parent ) ) { parent . createEdge ( false ) ; } }
Distance : 8

44
Tree	{ for ( Node parent : fromNode . get ( parent ) ) { cfa . createEdge ( true ) ; } }
Code	{ for ( Node parent : fromNode . get ( parent ) ) { cfa . createEdge ( true ) ; } }
Distance : 7

45
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { get ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { get ( fromNode , null ) ; } }
Distance : 10

46
Tree	{ for ( Node fromNode : fromNode . get () ) { get ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : fromNode . get () ) { get ( fromNode , null ) ; } }
Distance : 11

47
Tree	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { get ( fromNode , null ) ; } }
Code	{ for ( final Node finallyNode : cfa.finallyMap . get () ) { get ( fromNode , null ) ; } }
Distance : 10

48
Tree	{ for ( Node finallyNode : parent . get () ) { get ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : parent . get () ) { get ( fromNode , null ) ; } }
Distance : 10

49
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { get ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { get ( fromNode , null ) ; } }
Distance : 9

50
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { get ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { get ( fromNode , null ) ; } }
Distance : 9

51
Tree	{ for ( final Node fromNode : cfa.finallyMap . get () ) { get ( fromNode , null ) ; } }
Code	{ for ( final Node fromNode : cfa.finallyMap . get () ) { get ( fromNode , null ) ; } }
Distance : 11

52
Tree	{ for ( Node parent : parent . get ( parent ) ) { fromNode . createEdge ( true ) ; } }
Code	{ for ( Node parent : parent . get ( parent ) ) { fromNode . createEdge ( true ) ; } }
Distance : 8

53
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( true ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( true ) ; } }
Distance : 7

54
Tree	{ for ( Node parent : parent . get ( parent ) ) { parent . createEdge ( false ) ; } }
Code	{ for ( Node parent : parent . get ( parent ) ) { parent . createEdge ( false ) ; } }
Distance : 8

55
Tree	{ for ( Node parent : parent . get ( parent ) ) { cfa . createEdge ( true ) ; } }
Code	{ for ( Node parent : parent . get ( parent ) ) { cfa . createEdge ( true ) ; } }
Distance : 7

56
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( false ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( false ) ; } }
Distance : 7

57
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . get ( true ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . get ( true ) ; } }
Distance : 8

58
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { parent . createEdge ( false ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { parent . createEdge ( false ) ; } }
Distance : 10

59
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( true ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( true ) ; } }
Distance : 6

60
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { get ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { get ( fromNode , null ) ; } }
Distance : 10

61
Tree	{ for ( Node fromNode : fromNode . get () ) { get ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : fromNode . get () ) { get ( fromNode , null ) ; } }
Distance : 11

62
Tree	{ for ( Node fromNode : parent . get () ) { get ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : parent . get () ) { get ( fromNode , null ) ; } }
Distance : 11

63
Tree	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 6

64
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

65
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . get ( false ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { cfa . get ( false ) ; } }
Distance : 7

66
Tree	{ for ( Node fromNode : parent . get ( parent ) ) { cfa . get ( false ) ; } }
Code	{ for ( Node fromNode : parent . get ( parent ) ) { cfa . get ( false ) ; } }
Distance : 8

67
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { get ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { get ( fromNode , null ) ; } }
Distance : 7

68
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { get ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { get ( fromNode , null ) ; } }
Distance : 6

69
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . get ( false ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . get ( false ) ; } }
Distance : 10

70
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . get ( false ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . get ( false ) ; } }
Distance : 10

71
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { cfa . createEdge ( true ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { cfa . createEdge ( true ) ; } }
Distance : 9

72
Tree	{ for ( Node finallyNode : parent . get () ) { get ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : parent . get () ) { get ( fromNode , null ) ; } }
Distance : 10

73
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { get ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { get ( fromNode , null ) ; } }
Distance : 9

74
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { get ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { get ( fromNode , null ) ; } }
Distance : 9

75
Tree	{ for ( Node finallyNode : fromNode . get () ) { get ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : fromNode . get () ) { get ( fromNode , null ) ; } }
Distance : 10

76
Tree	{ for ( Node fromNode : parent . get ( parent ) ) { get ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : parent . get ( parent ) ) { get ( fromNode , null ) ; } }
Distance : 8

77
Tree	{ for ( Node parent : parent . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node parent : parent . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 7

78
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { get ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { get ( fromNode , null ) ; } }
Distance : 7

79
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . get ( false ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { fromNode . get ( false ) ; } }
Distance : 11

80
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( true ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { fromNode . createEdge ( true ) ; } }
Distance : 10

81
Tree	{ for ( Node parent : fromNode . get ( parent ) ) { fromNode . createEdge ( true ) ; } }
Code	{ for ( Node parent : fromNode . get ( parent ) ) { fromNode . createEdge ( true ) ; } }
Distance : 8

82
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { get () . createEdge ( Node , Branch.UNCOND ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { get () . createEdge ( Node , Branch.UNCOND ) ; } }
Distance : 10

83
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( true ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( true ) ; } }
Distance : 7

84
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { this . parent . createEdge ( fromNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { this . parent . createEdge ( fromNode , finallyNode ) ; } }
Distance : 6

85
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { this . fromNode . get ( fromNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { this . fromNode . get ( fromNode , finallyNode ) ; } }
Distance : 6

86
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { this . fromNode . get ( fromNode , parent ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { this . fromNode . get ( fromNode , parent ) ; } }
Distance : 10

87
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { this . fromNode . createEdge ( parent , finallyNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { this . fromNode . createEdge ( parent , finallyNode ) ; } }
Distance : 10

88
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { this . parent . get ( fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { this . parent . get ( fromNode , fromNode ) ; } }
Distance : 11

89
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { this . cfa . createEdge ( fromNode , parent ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { this . cfa . createEdge ( fromNode , parent ) ; } }
Distance : 8

90
Tree	{ for ( Node parent : cfa.finallyMap . get () ) { this . cfa . createEdge ( fromNode , fromNode ) ; } }
Code	{ for ( Node parent : cfa.finallyMap . get () ) { this . cfa . createEdge ( fromNode , fromNode ) ; } }
Distance : 9

91
Tree	{ for ( Node parent : fromNode . get ( parent ) ) { get () . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Code	{ for ( Node parent : fromNode . get ( parent ) ) { get () . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Distance : 8

92
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { this . cfa . createEdge ( parent , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { this . cfa . createEdge ( parent , fromNode ) ; } }
Distance : 10

93
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 4

94
Tree	{ for ( Node fromNode : parent . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND ) ; } }
Code	{ for ( Node fromNode : parent . get ( parent ) ) { parent . createEdge ( fromNode , Branch.UNCOND ) ; } }
Distance : 6

95
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 4

96
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , fromNode ) ; } }
Distance : 5

97
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { parent . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Distance : 6

98
Tree	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 4

99
Tree	{ for ( Node fromNode : parent . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Code	{ for ( Node fromNode : parent . get ( parent ) ) { createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
Distance : 5

========================================================================


========================================================================
Example Number: 31
Parent Code is: 
{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
-------------------------------------------------------------------------------
Child code is: 
{ if ( recurse ) { return anyResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (800{val=recurse}) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=allResultsMatch}) (214{val=(}) (800{val=n}) (234{val=,}) (800{val=MAY_BE_STRING_PREDICATE}) (215{val=)})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=mayBeStringHelper}) (214{val=(}) (800{val=n}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (800{val=recurse}) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=anyResultsMatch}) (214{val=(}) (800{val=n}) (234{val=,}) (800{val=MAY_BE_STRING_PREDICATE}) (215{val=)})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=mayBeStringHelper}) (214{val=(}) (800{val=n}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/10/parent/src_com_google_javascript_jscomp_NodeUtil.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } } MathRuntimeException
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } } MathRuntimeException
Distance : 4

1
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } nullNotPermitted
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } nullNotPermitted
Distance : 6

2
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } f
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } f
Distance : 6

3
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } ParamChecks
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } ParamChecks
Distance : 6

4
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } array
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } array
Distance : 6

5
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } <>
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } <>
Distance : 6

6
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } MathRuntimeException
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } MathRuntimeException
Distance : 6

7
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } STRING_CONSTANT
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } STRING_CONSTANT
Distance : 6

8
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } new
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } new
Distance : 6

9
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } {
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } {
Distance : 6

10
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } ()
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } ()
Distance : 6

11
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } STRING_CONSTANT
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } STRING_CONSTANT
Distance : 8

12
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } NUMBER_CONSTANT
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } NUMBER_CONSTANT
Distance : 8

13
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } return
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } return
Distance : 8

14
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } <>
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } <>
Distance : 8

15
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } array
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } array
Distance : 8

16
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } ParamChecks
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } ParamChecks
Distance : 8

17
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } true
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } true
Distance : 8

18
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } new
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } new
Distance : 5

19
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } {
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } {
Distance : 5

20
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } } final
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } } final
Distance : 8

21
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } } public
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } } public
Distance : 8

22
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } } >
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } } >
Distance : 8

23
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } } null
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } } null
Distance : 8

24
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } []
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } []
Distance : 6

25
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } } +
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } } +
Distance : 8

26
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } } .
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } } .
Distance : 8

27
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } } )
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } } )
Distance : 8

28
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } } ;
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } } ;
Distance : 8

29
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } } else
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } } else
Distance : 8

30
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } } throw
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } } throw
Distance : 6

31
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } } (
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } } (
Distance : 8

32
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } } ,
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } } ,
Distance : 8

33
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } !
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } !
Distance : 6

34
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } assertEquals
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } assertEquals
Distance : 6

35
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } !=
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } !=
Distance : 6

36
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } class
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } class
Distance : 6

37
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } ]
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } ]
Distance : 6

38
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } [
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } [
Distance : 6

39
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } Preconditions
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } Preconditions
Distance : 6

40
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } T
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } T
Distance : 6

41
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } &&
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } &&
Distance : 6

42
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } Object
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } Object
Distance : 6

43
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } m
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } m
Distance : 6

44
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } n
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } n
Distance : 6

45
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } e
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } e
Distance : 6

46
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } String
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } String
Distance : 6

47
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } compiler
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } compiler
Distance : 6

48
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } if
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } if
Distance : 6

49
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } <
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } <
Distance : 6

50
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } this
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } this
Distance : 6

51
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } STRING_CONSTANT
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } STRING_CONSTANT
Distance : 5

52
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } mock
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } mock
Distance : 6

53
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } Override
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } Override
Distance : 6

54
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } double
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } double
Distance : 6

55
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } checkState
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } checkState
Distance : 6

56
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } value
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } value
Distance : 6

57
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } i
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } i
Distance : 6

58
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } {}
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } {}
Distance : 6

59
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } true
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } true
Distance : 6

60
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } -
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } -
Distance : 6

61
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } mode
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } mode
Distance : 6

62
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } } value
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } } value
Distance : 8

63
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } } i
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } } i
Distance : 8

64
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } } T
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } } T
Distance : 8

65
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } createIllegalArgumentException
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } createIllegalArgumentException
Distance : 6

66
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } parent
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } parent
Distance : 6

67
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } testSame
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } testSame
Distance : 6

68
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } x
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } x
Distance : 6

69
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } NUMBER_CONSTANT
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } NUMBER_CONSTANT
Distance : 5

70
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } return
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } return
Distance : 5

71
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } <>
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } <>
Distance : 5

72
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } } catch
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } } catch
Distance : 4

73
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } } void
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } } void
Distance : 4

74
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } } ==
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } } ==
Distance : 4

75
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } throw
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } throw
Distance : 5

76
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } catch
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } catch
Distance : 5

77
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } }
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } }
Distance : 5

78
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } } throw
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } } throw
Distance : 4

79
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } n
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } n
Distance : 5

80
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } } compiler
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } } compiler
Distance : 8

81
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } } if
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } } if
Distance : 8

82
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } } <
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } } <
Distance : 8

83
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } } this
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } } this
Distance : 8

84
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } assertEquals
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } assertEquals
Distance : 5

85
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } !
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } !
Distance : 5

86
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } } e
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } } e
Distance : 8

87
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } []
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } } []
Distance : 5

88
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } } n
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } } n
Distance : 4

89
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } } String
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } } String
Distance : 4

90
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } } Preconditions
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } } Preconditions
Distance : 4

91
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } } ParamChecks
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } } ParamChecks
Distance : 4

92
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } } [
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } } [
Distance : 4

93
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } } array
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } } array
Distance : 4

94
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } } <>
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } } <>
Distance : 4

95
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } } m
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } } m
Distance : 4

96
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } } e
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } } e
Distance : 4

97
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } } boolean
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } } boolean
Distance : 4

98
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } } result
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } } result
Distance : 4

99
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } } checkState
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } } checkState
Distance : 4

========================================================================


========================================================================
Example Number: 32
Parent Code is: 
String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
-------------------------------------------------------------------------------
Child code is: 
String moduleName = guessCJSModuleName ( script . getSourceFileName () ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=moduleName}) (204{val==}) (32 (802{val=guessCJSModuleName}) (214{val=(}) (32 (802{val=normalizeSourceName}) (214{val=(}) (32 (800{val=script}) (235{val=.}) (802{val=getSourceFileName}) (216{val=()})) (215{val=)})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=moduleName}) (204{val==}) (32 (802{val=guessCJSModuleName}) (214{val=(}) (32 (800{val=script}) (235{val=.}) (802{val=getSourceFileName}) (216{val=()})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/9/parent/src_com_google_javascript_jscomp_ProcessCommonJSModules.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	String moduleName = guessCJSModuleName ( token.type , script ) ;
Code	String moduleName = guessCJSModuleName ( token.type , script ) ;
Distance : 4

1
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , script , script ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , script , script ) ;
Distance : 9

2
Tree	String script = getSourceFileName ( moduleName , script , moduleName ) ;
Code	String script = getSourceFileName ( moduleName , script , moduleName ) ;
Distance : 7

3
Tree	String script = getSourceFileName ( normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Code	String script = getSourceFileName ( normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 14

4
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , moduleName , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , moduleName , moduleName ) ;
Distance : 9

5
Tree	String moduleName = moduleName . guessCJSModuleName ( moduleName , script , moduleName ) ;
Code	String moduleName = moduleName . guessCJSModuleName ( moduleName , script , moduleName ) ;
Distance : 7

6
Tree	String script = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String script = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

7
Tree	String script = guessCJSModuleName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String script = guessCJSModuleName ( script , getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 6

8
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , script ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , script ) ;
Distance : 12

9
Tree	String script = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , script ) ;
Code	String script = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , script ) ;
Distance : 14

10
Tree	String moduleName = moduleName . getSourceFileName ( moduleName , script , script ) ;
Code	String moduleName = moduleName . getSourceFileName ( moduleName , script , script ) ;
Distance : 8

11
Tree	String script = guessCJSModuleName ( moduleName , script , moduleName ) ;
Code	String script = guessCJSModuleName ( moduleName , script , moduleName ) ;
Distance : 6

12
Tree	String script = guessCJSModuleName ( normalizeSourceName ( moduleName . getSourceFileName () ) ) ;
Code	String script = guessCJSModuleName ( normalizeSourceName ( moduleName . getSourceFileName () ) ) ;
Distance : 5

13
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , moduleName , moduleName ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , moduleName , moduleName ) ;
Distance : 10

14
Tree	String script = getSourceFileName ( getSourceFileName ( script . getSourceFileName ( moduleName . getSourceFileName () ) ) ) ;
Code	String script = getSourceFileName ( getSourceFileName ( script . getSourceFileName ( moduleName . getSourceFileName () ) ) ) ;
Distance : 10

15
Tree	String script = guessCJSModuleName ( normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Code	String script = guessCJSModuleName ( normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 13

16
Tree	String script = getSourceFileName ( script , getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Code	String script = getSourceFileName ( script , getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Distance : 7

17
Tree	String moduleName = getSourceFileName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = getSourceFileName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

18
Tree	String moduleName = getSourceFileName ( getSourceFileName ( moduleName . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( moduleName . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 11

19
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

20
Tree	String script = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , script ) ;
Code	String script = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , script ) ;
Distance : 13

21
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , moduleName , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , moduleName , moduleName ) ;
Distance : 9

22
Tree	String script = getSourceFileName ( normalizeSourceName ( moduleName . getSourceFileName () ) ) ;
Code	String script = getSourceFileName ( normalizeSourceName ( moduleName . getSourceFileName () ) ) ;
Distance : 6

23
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , script ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , script ) ;
Distance : 13

24
Tree	String script = guessCJSModuleName ( script , moduleName , moduleName ) ;
Code	String script = guessCJSModuleName ( script , moduleName , moduleName ) ;
Distance : 5

25
Tree	String moduleName = guessCJSModuleName ( moduleName , getSourceFileName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( moduleName , getSourceFileName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ) ;
Distance : 9

26
Tree	String moduleName = getSourceFileName ( moduleName , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = getSourceFileName ( moduleName , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

27
Tree	String moduleName = guessCJSModuleName ( moduleName , getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( moduleName , getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Distance : 6

28
Tree	String moduleName = moduleName . guessCJSModuleName ( script , moduleName , script ) ;
Code	String moduleName = moduleName . guessCJSModuleName ( script , moduleName , script ) ;
Distance : 6

29
Tree	String script = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String script = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

30
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script , script ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script , script ) ;
Distance : 10

31
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 13

32
Tree	String moduleName = script . guessCJSModuleName ( script , script , script ) ;
Code	String moduleName = script . guessCJSModuleName ( script , script , script ) ;
Distance : 6

33
Tree	String moduleName = getSourceFileName ( moduleName . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Code	String moduleName = getSourceFileName ( moduleName . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Distance : 7

34
Tree	String script = getSourceFileName ( getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String script = getSourceFileName ( getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 10

35
Tree	String script = getSourceFileName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Code	String script = getSourceFileName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Distance : 7

36
Tree	String script = getSourceFileName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String script = getSourceFileName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 10

37
Tree	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , script ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , script ) ;
Distance : 13

38
Tree	String script = getSourceFileName ( normalizeSourceName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String script = getSourceFileName ( normalizeSourceName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 10

39
Tree	String script = getSourceFileName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Code	String script = getSourceFileName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Distance : 6

40
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script , script ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script , script ) ;
Distance : 9

41
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 12

42
Tree	String script = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Code	String script = getSourceFileName ( getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 14

43
Tree	String moduleName = guessCJSModuleName ( moduleName . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Code	String moduleName = guessCJSModuleName ( moduleName . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Distance : 6

44
Tree	String script = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String script = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

45
Tree	String script = guessCJSModuleName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Code	String script = guessCJSModuleName ( script . getSourceFileName () ) . getSourceFileName ( STRING_CONSTANT ) ;
Distance : 6

46
Tree	String script = getSourceFileName ( script , moduleName , moduleName ) ;
Code	String script = getSourceFileName ( script , moduleName , moduleName ) ;
Distance : 6

47
Tree	String moduleName = getSourceFileName ( moduleName , getSourceFileName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ) ;
Code	String moduleName = getSourceFileName ( moduleName , getSourceFileName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ) ;
Distance : 10

48
Tree	String moduleName = guessCJSModuleName ( moduleName , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( moduleName , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 8

49
Tree	String script = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName ( moduleName . getSourceFileName () ) ) ) ;
Code	String script = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName ( moduleName . getSourceFileName () ) ) ) ;
Distance : 9

50
Tree	String script = getSourceFileName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String script = getSourceFileName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 10

51
Tree	String script = guessCJSModuleName ( script , getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Code	String script = guessCJSModuleName ( script , getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Distance : 6

52
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; null
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; null
Distance : 5

53
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; >
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; >
Distance : 5

54
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; public
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; public
Distance : 5

55
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; final
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; final
Distance : 5

56
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; this
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; this
Distance : 5

57
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; if
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; if
Distance : 5

58
Tree	String moduleName = getSourceFileName ( script , script , moduleName ) ; Preconditions
Code	String moduleName = getSourceFileName ( script , script , moduleName ) ; Preconditions
Distance : 6

59
Tree	String moduleName = getSourceFileName ( script , script , moduleName ) ; (
Code	String moduleName = getSourceFileName ( script , script , moduleName ) ; (
Distance : 6

60
Tree	String moduleName = getSourceFileName ( script , script , moduleName ) ; mode
Code	String moduleName = getSourceFileName ( script , script , moduleName ) ; mode
Distance : 6

61
Tree	String moduleName = getSourceFileName ( script ) ; boolean
Code	String moduleName = getSourceFileName ( script ) ; boolean
Distance : 5

62
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; +
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; +
Distance : 5

63
Tree	String moduleName = getSourceFileName ( script ) ; :
Code	String moduleName = getSourceFileName ( script ) ; :
Distance : 5

64
Tree	String moduleName = getSourceFileName ( script ) ; checkState
Code	String moduleName = getSourceFileName ( script ) ; checkState
Distance : 5

65
Tree	String moduleName = getSourceFileName ( script ) ; double
Code	String moduleName = getSourceFileName ( script ) ; double
Distance : 5

66
Tree	String moduleName = getSourceFileName ( script ) ; super
Code	String moduleName = getSourceFileName ( script ) ; super
Distance : 5

67
Tree	String moduleName = getSourceFileName ( script ) ; !=
Code	String moduleName = getSourceFileName ( script ) ; !=
Distance : 5

68
Tree	String moduleName = getSourceFileName ( script ) ; compiler
Code	String moduleName = getSourceFileName ( script ) ; compiler
Distance : 5

69
Tree	String moduleName = getSourceFileName ( script ) ; String
Code	String moduleName = getSourceFileName ( script ) ; String
Distance : 5

70
Tree	String moduleName = getSourceFileName ( script ) ; e
Code	String moduleName = getSourceFileName ( script ) ; e
Distance : 5

71
Tree	String moduleName = getSourceFileName ( script ) ; n
Code	String moduleName = getSourceFileName ( script ) ; n
Distance : 5

72
Tree	String moduleName = getSourceFileName ( script ) ; throw
Code	String moduleName = getSourceFileName ( script ) ; throw
Distance : 5

73
Tree	String moduleName = getSourceFileName ( script ) ; catch
Code	String moduleName = getSourceFileName ( script ) ; catch
Distance : 5

74
Tree	String moduleName = getSourceFileName ( script ) ; result
Code	String moduleName = getSourceFileName ( script ) ; result
Distance : 5

75
Tree	String script = guessCJSModuleName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String script = guessCJSModuleName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

76
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; ,
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; ,
Distance : 5

77
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; )
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; )
Distance : 5

78
Tree	String moduleName = getSourceFileName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( moduleName . getSourceFileName () ) ) ;
Distance : 5

79
Tree	String moduleName = guessCJSModuleName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( script , getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 8

80
Tree	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( moduleName ) ) ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( moduleName ) ) ) ;
Distance : 7

81
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( moduleName . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( moduleName . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 10

82
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 8

83
Tree	String script = getSourceFileName ( normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , script ) ;
Code	String script = getSourceFileName ( normalizeSourceName ( getSourceFileName ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , script ) ;
Distance : 14

84
Tree	String script = getSourceFileName ( normalizeSourceName ( script . getSourceFileName ( moduleName . getSourceFileName () ) ) ) ;
Code	String script = getSourceFileName ( normalizeSourceName ( script . getSourceFileName ( moduleName . getSourceFileName () ) ) ) ;
Distance : 10

85
Tree	String moduleName = getSourceFileName ( source.n ) ;
Code	String moduleName = getSourceFileName ( source.n ) ;
Distance : 5

86
Tree	String moduleName = getSourceFileName ( low ) ;
Code	String moduleName = getSourceFileName ( low ) ;
Distance : 5

87
Tree	String moduleName = guessCJSModuleName ( TickUnits ) ;
Code	String moduleName = guessCJSModuleName ( TickUnits ) ;
Distance : 4

88
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; .
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; .
Distance : 5

89
Tree	String moduleName = guessCJSModuleName ( OPTION.semiColonRequired , script ) ;
Code	String moduleName = guessCJSModuleName ( OPTION.semiColonRequired , script ) ;
Distance : 4

90
Tree	String moduleName = getSourceFileName ( XYPointerAnnotation , script ) ;
Code	String moduleName = getSourceFileName ( XYPointerAnnotation , script ) ;
Distance : 5

91
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; {
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; {
Distance : 5

92
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; ()
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; ()
Distance : 5

93
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; }
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; }
Distance : 5

94
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; =
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; =
Distance : 5

95
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; (
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; (
Distance : 5

96
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; <s>
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; <s>
Distance : 5

97
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; ;
Distance : 5

98
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; <blank>
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; <blank>
Distance : 5

99
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ; ;
Distance : 5

========================================================================


========================================================================
Example Number: 33
Parent Code is: 
c . canInline ()
-------------------------------------------------------------------------------
Child code is: 
c . canInline ( t . getScope () )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (32 (800{val=c}) (235{val=.}) (802{val=canInline}) (216{val=()})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (32 (800{val=c}) (235{val=.}) (802{val=canInline}) (214{val=(}) (32 (800{val=t}) (235{val=.}) (802{val=getScope}) (216{val=()})) (215{val=)})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/3/parent/src_com_google_javascript_jscomp_FlowSensitiveInlineVariables.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	this . c . canInline () Override
Code	this . c . canInline () Override
Distance : 6

1
Tree	c . canInline () <s>
Code	c . canInline () <s>
Distance : 5

2
Tree	c . canInline () c
Code	c . canInline () c
Distance : 5

3
Tree	c . canInline () <blank>
Code	c . canInline () <blank>
Distance : 5

4
Tree	c . canInline ( c ) List
Code	c . canInline ( c ) List
Distance : 5

5
Tree	c . canInline ( c ) reportCodeChange
Code	c . canInline ( c ) reportCodeChange
Distance : 5

6
Tree	c . canInline ( c ) expected
Code	c . canInline ( c ) expected
Distance : 5

7
Tree	c . canInline ( c ) FastMath
Code	c . canInline ( c ) FastMath
Distance : 5

8
Tree	c . canInline ( c ) IllegalArgumentException
Code	c . canInline ( c ) IllegalArgumentException
Distance : 5

9
Tree	c . canInline () -
Code	c . canInline () -
Distance : 5

10
Tree	c . canInline () Preconditions
Code	c . canInline () Preconditions
Distance : 5

11
Tree	c . canInline () (
Code	c . canInline () (
Distance : 5

12
Tree	c . canInline () [
Code	c . canInline () [
Distance : 5

13
Tree	c . canInline () if
Code	c . canInline () if
Distance : 5

14
Tree	c . canInline () <
Code	c . canInline () <
Distance : 5

15
Tree	c . canInline () this
Code	c . canInline () this
Distance : 5

16
Tree	c . canInline () final
Code	c . canInline () final
Distance : 5

17
Tree	c . canInline () =
Code	c . canInline () =
Distance : 5

18
Tree	c . canInline () }
Code	c . canInline () }
Distance : 5

19
Tree	c . canInline () ()
Code	c . canInline () ()
Distance : 5

20
Tree	c . canInline () {
Code	c . canInline () {
Distance : 5

21
Tree	canInline () name
Code	canInline () name
Distance : 7

22
Tree	canInline () m
Code	canInline () m
Distance : 7

23
Tree	c . canInline () ]
Code	c . canInline () ]
Distance : 5

24
Tree	canInline () boolean
Code	canInline () boolean
Distance : 7

25
Tree	canInline () add
Code	canInline () add
Distance : 7

26
Tree	c . canInline () compiler
Code	c . canInline () compiler
Distance : 5

27
Tree	( ( c ) c ) . canInline () LINE_JOINER
Code	( ( c ) c ) . canInline () LINE_JOINER
Distance : 8

28
Tree	( ( c ) c ) . canInline () str
Code	( ( c ) c ) . canInline () str
Distance : 8

29
Tree	( ( c ) c ) . canInline () createIllegalArgumentException
Code	( ( c ) c ) . canInline () createIllegalArgumentException
Distance : 8

30
Tree	c . canInline () assertEquals
Code	c . canInline () assertEquals
Distance : 5

31
Tree	c . canInline ( c ) str
Code	c . canInline ( c ) str
Distance : 5

32
Tree	c . canInline () {}
Code	c . canInline () {}
Distance : 5

33
Tree	c . canInline () new
Code	c . canInline () new
Distance : 5

34
Tree	c . canInline () ;
Code	c . canInline () ;
Distance : 5

35
Tree	c . canInline () )
Code	c . canInline () )
Distance : 4

36
Tree	c . canInline () .
Code	c . canInline () .
Distance : 5

37
Tree	c . canInline () checkState
Code	c . canInline () checkState
Distance : 5

38
Tree	c . canInline () ,
Code	c . canInline () ,
Distance : 5

39
Tree	c . canInline () null
Code	c . canInline () null
Distance : 5

40
Tree	c . canInline () >
Code	c . canInline () >
Distance : 5

41
Tree	c . canInline () public
Code	c . canInline () public
Distance : 5

42
Tree	c . canInline () STRING_CONSTANT
Code	c . canInline () STRING_CONSTANT
Distance : 5

43
Tree	c . canInline ( c ) fail
Code	c . canInline ( c ) fail
Distance : 5

44
Tree	c . canInline () NUMBER_CONSTANT
Code	c . canInline () NUMBER_CONSTANT
Distance : 5

45
Tree	c . canInline () return
Code	c . canInline () return
Distance : 5

46
Tree	c . canInline () n
Code	c . canInline () n
Distance : 5

47
Tree	c . canInline () e
Code	c . canInline () e
Distance : 5

48
Tree	c . canInline () String
Code	c . canInline () String
Distance : 5

49
Tree	c . canInline () +
Code	c . canInline () +
Distance : 5

50
Tree	( ( c ) c ) . canInline () assertThat
Code	( ( c ) c ) . canInline () assertThat
Distance : 8

51
Tree	canInline () assertThat
Code	canInline () assertThat
Distance : 7

52
Tree	canInline () expected
Code	canInline () expected
Distance : 7

53
Tree	canInline () parent
Code	canInline () parent
Distance : 7

54
Tree	canInline () createIllegalArgumentException
Code	canInline () createIllegalArgumentException
Distance : 7

55
Tree	c . canInline ( c ) Args
Code	c . canInline ( c ) Args
Distance : 5

56
Tree	c . canInline ( c ) try
Code	c . canInline ( c ) try
Distance : 5

57
Tree	c . canInline () true
Code	c . canInline () true
Distance : 5

58
Tree	c . canInline ( c ) {
Code	c . canInline ( c ) {
Distance : 5

59
Tree	c . canInline ( c ) <blank>
Code	c . canInline ( c ) <blank>
Distance : 5

60
Tree	c . canInline ( c ) ;
Code	c . canInline ( c ) ;
Distance : 5

61
Tree	c . canInline ( c ) )
Code	c . canInline ( c ) )
Distance : 4

62
Tree	c . canInline ( c ) .
Code	c . canInline ( c ) .
Distance : 5

63
Tree	canInline () fireChangeEvent
Code	canInline () fireChangeEvent
Distance : 7

64
Tree	c . canInline ( c ) ,
Code	c . canInline ( c ) ,
Distance : 5

65
Tree	c . canInline ( c ) }
Code	c . canInline ( c ) }
Distance : 5

66
Tree	c . canInline ( c ) ()
Code	c . canInline ( c ) ()
Distance : 4

67
Tree	c . canInline ( c ) new
Code	c . canInline ( c ) new
Distance : 5

68
Tree	c . canInline ( c ) ArrayList
Code	c . canInline ( c ) ArrayList
Distance : 5

69
Tree	c . canInline ( c ) STRING_CONSTANT
Code	c . canInline ( c ) STRING_CONSTANT
Distance : 5

70
Tree	c . canInline ( c ) NUMBER_CONSTANT
Code	c . canInline ( c ) NUMBER_CONSTANT
Distance : 5

71
Tree	c . canInline ( c ) return
Code	c . canInline ( c ) return
Distance : 5

72
Tree	c . canInline ( c ) &&
Code	c . canInline ( c ) &&
Distance : 5

73
Tree	c . canInline ( c ) T
Code	c . canInline ( c ) T
Distance : 5

74
Tree	c . canInline ( c ) i
Code	c . canInline ( c ) i
Distance : 5

75
Tree	c . canInline ( c ) =
Code	c . canInline ( c ) =
Distance : 5

76
Tree	canInline () reportCodeChange
Code	canInline () reportCodeChange
Distance : 7

77
Tree	canInline () ArrayList
Code	canInline () ArrayList
Distance : 7

78
Tree	canInline () testSame
Code	canInline () testSame
Distance : 7

79
Tree	canInline () :
Code	canInline () :
Distance : 7

80
Tree	canInline () result
Code	canInline () result
Distance : 7

81
Tree	canInline () serialised
Code	canInline () serialised
Distance : 7

82
Tree	canInline () getInstance
Code	canInline () getInstance
Distance : 7

83
Tree	canInline () *
Code	canInline () *
Distance : 7

84
Tree	canInline () type
Code	canInline () type
Distance : 7

85
Tree	canInline () false
Code	canInline () false
Distance : 7

86
Tree	canInline () int
Code	canInline () int
Distance : 7

87
Tree	canInline () double
Code	canInline () double
Distance : 7

88
Tree	canInline ( c ) *
Code	canInline ( c ) *
Distance : 7

89
Tree	canInline () x
Code	canInline () x
Distance : 7

90
Tree	canInline () checkState
Code	canInline () checkState
Distance : 7

91
Tree	canInline () []
Code	canInline () []
Distance : 7

92
Tree	canInline () void
Code	canInline () void
Distance : 7

93
Tree	canInline () ==
Code	canInline () ==
Distance : 7

94
Tree	canInline () invocation
Code	canInline () invocation
Distance : 7

95
Tree	canInline () FastMath
Code	canInline () FastMath
Distance : 7

96
Tree	canInline () fail
Code	canInline () fail
Distance : 7

97
Tree	canInline () paint
Code	canInline () paint
Distance : 7

98
Tree	canInline () join
Code	canInline () join
Distance : 7

99
Tree	canInline () str
Code	canInline () str
Distance : 7

========================================================================


========================================================================
Example Number: 34
Parent Code is: 
int len = thisBuf.length - strLen ;
-------------------------------------------------------------------------------
Child code is: 
int len = size - strLen + NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=len}) (204{val==}) (27 (40{val=thisBuf.length}) (201{val=-}) (800{val=strLen}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=len}) (204{val==}) (27 (27 (800{val=size}) (201{val=-}) (800{val=strLen})) (200{val=+}) (34{val=NUMBER_CONSTANT}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/61/parent/src_java_org_apache_commons_lang_text_StrBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	boolean len = strLen / strLen - strLen ;
Code	boolean len = strLen / strLen - strLen ;
Distance : 5

1
Tree	int len = NUMBER_CONSTANT * strLen * size * thisBuf.length ;
Code	int len = NUMBER_CONSTANT * strLen * size * thisBuf.length ;
Distance : 6

2
Tree	boolean strLen = STRING_CONSTANT + STRING_CONSTANT - strLen ;
Code	boolean strLen = STRING_CONSTANT + STRING_CONSTANT - strLen ;
Distance : 7

3
Tree	int strLen = size / strLen - strLen ;
Code	int strLen = size / strLen - strLen ;
Distance : 4

4
Tree	void len = size % NUMBER_CONSTANT ;
Code	void len = size % NUMBER_CONSTANT ;
Distance : 4

5
Tree	boolean len = len - size ;
Code	boolean len = len - size ;
Distance : 5

6
Tree	int len = size / size ;
Code	int len = size / size ;
Distance : 4

7
Tree	double len = size / len - strLen ;
Code	double len = size / len - strLen ;
Distance : 5

8
Tree	byte len = size - size ;
Code	byte len = size - size ;
Distance : 4

9
Tree	boolean len = strLen % NUMBER_CONSTANT ;
Code	boolean len = strLen % NUMBER_CONSTANT ;
Distance : 4

10
Tree	void strLen = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	void strLen = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 14

11
Tree	double size = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	double size = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 14

12
Tree	double len = strLen / strLen - strLen ;
Code	double len = strLen / strLen - strLen ;
Distance : 5

13
Tree	char len = len - size ;
Code	char len = len - size ;
Distance : 5

14
Tree	byte strLen = STRING_CONSTANT + len ;
Code	byte strLen = STRING_CONSTANT + len ;
Distance : 6

15
Tree	short len = len - len ;
Code	short len = len - len ;
Distance : 5

16
Tree	long len = strLen - len ;
Code	long len = strLen - len ;
Distance : 5

17
Tree	char strLen = STRING_CONSTANT + STRING_CONSTANT - strLen ;
Code	char strLen = STRING_CONSTANT + STRING_CONSTANT - strLen ;
Distance : 7

18
Tree	double strLen = len % NUMBER_CONSTANT ;
Code	double strLen = len % NUMBER_CONSTANT ;
Distance : 6

19
Tree	char len = strLen % NUMBER_CONSTANT ;
Code	char len = strLen % NUMBER_CONSTANT ;
Distance : 4

20
Tree	byte len = strLen ;
Code	byte len = strLen ;
Distance : 5

21
Tree	int len = getProperNumerator () - strLen ;
Code	int len = getProperNumerator () - strLen ;
Distance : 4

22
Tree	long len = len + STRING_CONSTANT + thisBuf.length ;
Code	long len = len + STRING_CONSTANT + thisBuf.length ;
Distance : 5

23
Tree	char strLen = strLen & NUMBER_CONSTANT ;
Code	char strLen = strLen & NUMBER_CONSTANT ;
Distance : 5

24
Tree	boolean strLen = strLen ;
Code	boolean strLen = strLen ;
Distance : 6

25
Tree	void len = len / strLen - strLen ;
Code	void len = len / strLen - strLen ;
Distance : 5

26
Tree	int strLen = size / len ;
Code	int strLen = size / len ;
Distance : 5

27
Tree	boolean size = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	boolean size = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 14

28
Tree	double strLen = strLen & NUMBER_CONSTANT ;
Code	double strLen = strLen & NUMBER_CONSTANT ;
Distance : 5

29
Tree	char len = len / len - strLen ;
Code	char len = len / len - strLen ;
Distance : 6

30
Tree	byte strLen = len % NUMBER_CONSTANT ;
Code	byte strLen = len % NUMBER_CONSTANT ;
Distance : 6

31
Tree	short len = len - size ;
Code	short len = len - size ;
Distance : 5

32
Tree	boolean len = size / len - strLen ;
Code	boolean len = size / len - strLen ;
Distance : 5

33
Tree	double strLen = strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	double strLen = strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 14

34
Tree	short len = strLen % NUMBER_CONSTANT ;
Code	short len = strLen % NUMBER_CONSTANT ;
Distance : 4

35
Tree	int strLen = strLen / strLen ;
Code	int strLen = strLen / strLen ;
Distance : 5

36
Tree	char size = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	char size = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 14

37
Tree	void len = size / strLen - strLen ;
Code	void len = size / strLen - strLen ;
Distance : 4

38
Tree	long size = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	long size = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 16

39
Tree	long strLen = STRING_CONSTANT + size ;
Code	long strLen = STRING_CONSTANT + size ;
Distance : 6

40
Tree	double len = strLen / len ;
Code	double len = strLen / len ;
Distance : 5

41
Tree	double len = strLen / strLen - len ;
Code	double len = strLen / strLen - len ;
Distance : 5

42
Tree	char strLen = strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	char strLen = strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 14

43
Tree	float len = STRING_CONSTANT + size ;
Code	float len = STRING_CONSTANT + size ;
Distance : 5

44
Tree	boolean strLen = size - strLen ;
Code	boolean strLen = size - strLen ;
Distance : 4

45
Tree	float len = len - len ;
Code	float len = len - len ;
Distance : 5

46
Tree	int strLen = len / strLen ;
Code	int strLen = len / strLen ;
Distance : 5

47
Tree	short strLen = STRING_CONSTANT + STRING_CONSTANT - len ;
Code	short strLen = STRING_CONSTANT + STRING_CONSTANT - len ;
Distance : 7

48
Tree	double len = len / len ;
Code	double len = len / len ;
Distance : 6

49
Tree	short len = len % NUMBER_CONSTANT ;
Code	short len = len % NUMBER_CONSTANT ;
Distance : 5

50
Tree	long len = len - size ;
Code	long len = len - size ;
Distance : 5

51
Tree	double len = size / strLen - len ;
Code	double len = size / strLen - len ;
Distance : 4

52
Tree	long strLen = STRING_CONSTANT + STRING_CONSTANT - strLen ;
Code	long strLen = STRING_CONSTANT + STRING_CONSTANT - strLen ;
Distance : 7

53
Tree	char len = strLen ;
Code	char len = strLen ;
Distance : 5

54
Tree	char len = strLen + strLen + strLen + strLen ;
Code	char len = strLen + strLen + strLen + strLen ;
Distance : 6

55
Tree	float strLen = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	float strLen = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 16

56
Tree	boolean len = len / strLen - strLen ;
Code	boolean len = len / strLen - strLen ;
Distance : 5

57
Tree	int strLen = NUMBER_CONSTANT - size ;
Code	int strLen = NUMBER_CONSTANT - size ;
Distance : 5

58
Tree	double strLen = len ;
Code	double strLen = len ;
Distance : 7

59
Tree	int strLen = size / strLen ;
Code	int strLen = size / strLen ;
Distance : 4

60
Tree	double strLen = size & NUMBER_CONSTANT ;
Code	double strLen = size & NUMBER_CONSTANT ;
Distance : 5

61
Tree	byte len = NUMBER_CONSTANT * strLen * strLen * thisBuf.length ;
Code	byte len = NUMBER_CONSTANT * strLen * strLen * thisBuf.length ;
Distance : 7

62
Tree	double len = size / len ;
Code	double len = size / len ;
Distance : 5

63
Tree	double len = len + strLen + size + strLen ;
Code	double len = len + strLen + size + strLen ;
Distance : 6

64
Tree	boolean len = strLen & NUMBER_CONSTANT ;
Code	boolean len = strLen & NUMBER_CONSTANT ;
Distance : 4

65
Tree	double strLen = len + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	double strLen = len + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 14

66
Tree	long len = strLen % NUMBER_CONSTANT ;
Code	long len = strLen % NUMBER_CONSTANT ;
Distance : 4

67
Tree	void len = size & NUMBER_CONSTANT ;
Code	void len = size & NUMBER_CONSTANT ;
Distance : 4

68
Tree	boolean len = strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	boolean len = strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

69
Tree	void len = len ;
Code	void len = len ;
Distance : 6

70
Tree	int len = len / strLen - size ;
Code	int len = len / strLen - size ;
Distance : 4

71
Tree	boolean strLen = NUMBER_CONSTANT - len ;
Code	boolean strLen = NUMBER_CONSTANT - len ;
Distance : 6

72
Tree	void len = size + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	void len = size + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 12

73
Tree	char len = strLen & NUMBER_CONSTANT ;
Code	char len = strLen & NUMBER_CONSTANT ;
Distance : 4

74
Tree	char strLen = size - strLen ;
Code	char strLen = size - strLen ;
Distance : 4

75
Tree	double strLen = len & NUMBER_CONSTANT ;
Code	double strLen = len & NUMBER_CONSTANT ;
Distance : 6

76
Tree	char len = strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	char len = strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

77
Tree	int len = size / strLen - size ;
Code	int len = size / strLen - size ;
Distance : 3

78
Tree	byte len = len / strLen - strLen ;
Code	byte len = len / strLen - strLen ;
Distance : 5

79
Tree	int strLen = thisBuf.length + NUMBER_CONSTANT ;
Code	int strLen = thisBuf.length + NUMBER_CONSTANT ;
Distance : 4

80
Tree	char strLen = NUMBER_CONSTANT - len ;
Code	char strLen = NUMBER_CONSTANT - len ;
Distance : 6

81
Tree	void len = size ;
Code	void len = size ;
Distance : 5

82
Tree	byte len = size / strLen - strLen ;
Code	byte len = size / strLen - strLen ;
Distance : 4

83
Tree	double len = len / strLen - len ;
Code	double len = len / strLen - len ;
Distance : 5

84
Tree	void len = NUMBER_CONSTANT * thisBuf.length ;
Code	void len = NUMBER_CONSTANT * thisBuf.length ;
Distance : 6

85
Tree	boolean len = strLen ;
Code	boolean len = strLen ;
Distance : 5

86
Tree	boolean len = size / strLen - strLen ;
Code	boolean len = size / strLen - strLen ;
Distance : 4

87
Tree	byte len = NUMBER_CONSTANT * strLen * size * thisBuf.length ;
Code	byte len = NUMBER_CONSTANT * strLen * size * thisBuf.length ;
Distance : 7

88
Tree	void strLen = size + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	void strLen = size + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

89
Tree	double len = NUMBER_CONSTANT * size * len * thisBuf.length ;
Code	double len = NUMBER_CONSTANT * size * len * thisBuf.length ;
Distance : 7

90
Tree	boolean size = size & NUMBER_CONSTANT ;
Code	boolean size = size & NUMBER_CONSTANT ;
Distance : 5

91
Tree	char size = len ;
Code	char size = len ;
Distance : 7

92
Tree	boolean size = size + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	boolean size = size + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

93
Tree	long strLen = NUMBER_CONSTANT * len * strLen * thisBuf.length ;
Code	long strLen = NUMBER_CONSTANT * len * strLen * thisBuf.length ;
Distance : 8

94
Tree	char size = size + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	char size = size + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

95
Tree	char size = size & NUMBER_CONSTANT ;
Code	char size = size & NUMBER_CONSTANT ;
Distance : 5

96
Tree	short strLen = strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	short strLen = strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 14

97
Tree	float size = STRING_CONSTANT + STRING_CONSTANT - strLen ;
Code	float size = STRING_CONSTANT + STRING_CONSTANT - strLen ;
Distance : 7

98
Tree	short strLen = strLen & NUMBER_CONSTANT ;
Code	short strLen = strLen & NUMBER_CONSTANT ;
Distance : 5

99
Tree	long size = len % NUMBER_CONSTANT ;
Code	long size = len % NUMBER_CONSTANT ;
Distance : 6

========================================================================


========================================================================
Example Number: 35
Parent Code is: 
i < thisBuf.length
-------------------------------------------------------------------------------
Child code is: 
i < size
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (800{val=i}) (230{val=<}) (40{val=thisBuf.length})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (800{val=i}) (230{val=<}) (800{val=size})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/60/parent/src_java_org_apache_commons_lang_text_StrBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	i == thisBuf.length < Exception
Code	i == thisBuf.length < Exception
Distance : 3

1
Tree	i > NUMBER_CONSTANT new
Code	i > NUMBER_CONSTANT new
Distance : 3

2
Tree	i < thisBuf.length array
Code	i < thisBuf.length array
Distance : 2

3
Tree	i < thisBuf.length Args
Code	i < thisBuf.length Args
Distance : 2

4
Tree	i < thisBuf.length List
Code	i < thisBuf.length List
Distance : 2

5
Tree	i < thisBuf.length data
Code	i < thisBuf.length data
Distance : 2

6
Tree	i < thisBuf.length checkArgument
Code	i < thisBuf.length checkArgument
Distance : 2

7
Tree	i < thisBuf.length boolean
Code	i < thisBuf.length boolean
Distance : 2

8
Tree	i < thisBuf.length m
Code	i < thisBuf.length m
Distance : 2

9
Tree	i < thisBuf.length name
Code	i < thisBuf.length name
Distance : 2

10
Tree	i < thisBuf.length add
Code	i < thisBuf.length add
Distance : 2

11
Tree	i > NUMBER_CONSTANT !=
Code	i > NUMBER_CONSTANT !=
Distance : 3

12
Tree	i > NUMBER_CONSTANT super
Code	i > NUMBER_CONSTANT super
Distance : 3

13
Tree	i > NUMBER_CONSTANT true
Code	i > NUMBER_CONSTANT true
Distance : 3

14
Tree	i > NUMBER_CONSTANT mode
Code	i > NUMBER_CONSTANT mode
Distance : 3

15
Tree	i > NUMBER_CONSTANT public
Code	i > NUMBER_CONSTANT public
Distance : 3

16
Tree	i > NUMBER_CONSTANT >
Code	i > NUMBER_CONSTANT >
Distance : 3

17
Tree	i < thisBuf.length try
Code	i < thisBuf.length try
Distance : 2

18
Tree	i == thisBuf.length !=
Code	i == thisBuf.length !=
Distance : 3

19
Tree	i == thisBuf.length ==
Code	i == thisBuf.length ==
Distance : 3

20
Tree	i == i fail
Code	i == i fail
Distance : 3

21
Tree	i == i name
Code	i == i name
Distance : 3

22
Tree	i == i t
Code	i == i t
Distance : 3

23
Tree	i == i field
Code	i == i field
Distance : 3

24
Tree	this . i == i field
Code	this . i == i field
Distance : 5

25
Tree	this . i == i t
Code	this . i == i t
Distance : 5

26
Tree	this . i == i name
Code	this . i == i name
Distance : 5

27
Tree	this . i == i add
Code	this . i == i add
Distance : 5

28
Tree	this . i == i <>
Code	this . i == i <>
Distance : 5

29
Tree	i == i add
Code	i == i add
Distance : 3

30
Tree	i > NUMBER_CONSTANT STRING_CONSTANT
Code	i > NUMBER_CONSTANT STRING_CONSTANT
Distance : 3

31
Tree	i > NUMBER_CONSTANT ,
Code	i > NUMBER_CONSTANT ,
Distance : 3

32
Tree	i > NUMBER_CONSTANT ;
Code	i > NUMBER_CONSTANT ;
Distance : 3

33
Tree	i > NUMBER_CONSTANT if
Code	i > NUMBER_CONSTANT if
Distance : 3

34
Tree	i == thisBuf.length ]
Code	i == thisBuf.length ]
Distance : 3

35
Tree	i == thisBuf.length [
Code	i == thisBuf.length [
Distance : 3

36
Tree	i == thisBuf.length mock
Code	i == thisBuf.length mock
Distance : 3

37
Tree	i == thisBuf.length Override
Code	i == thisBuf.length Override
Distance : 3

38
Tree	i == thisBuf.length test
Code	i == thisBuf.length test
Distance : 3

39
Tree	i == thisBuf.length @
Code	i == thisBuf.length @
Distance : 3

40
Tree	i == thisBuf.length t
Code	i == thisBuf.length t
Distance : 3

41
Tree	i == thisBuf.length super
Code	i == thisBuf.length super
Distance : 3

42
Tree	i < thisBuf.length [
Code	i < thisBuf.length [
Distance : 2

43
Tree	i < thisBuf.length Override
Code	i < thisBuf.length Override
Distance : 2

44
Tree	i > NUMBER_CONSTANT &&
Code	i > NUMBER_CONSTANT &&
Distance : 3

45
Tree	i > NUMBER_CONSTANT ]
Code	i > NUMBER_CONSTANT ]
Distance : 3

46
Tree	i > NUMBER_CONSTANT [
Code	i > NUMBER_CONSTANT [
Distance : 3

47
Tree	i > NUMBER_CONSTANT mock
Code	i > NUMBER_CONSTANT mock
Distance : 3

48
Tree	this . i == i array
Code	this . i == i array
Distance : 5

49
Tree	i > NUMBER_CONSTANT Override
Code	i > NUMBER_CONSTANT Override
Distance : 3

50
Tree	i > NUMBER_CONSTANT T
Code	i > NUMBER_CONSTANT T
Distance : 3

51
Tree	i > NUMBER_CONSTANT @
Code	i > NUMBER_CONSTANT @
Distance : 3

52
Tree	i > NUMBER_CONSTANT assertEquals
Code	i > NUMBER_CONSTANT assertEquals
Distance : 3

53
Tree	i > NUMBER_CONSTANT ==
Code	i > NUMBER_CONSTANT ==
Distance : 3

54
Tree	i > NUMBER_CONSTANT void
Code	i > NUMBER_CONSTANT void
Distance : 3

55
Tree	i > NUMBER_CONSTANT []
Code	i > NUMBER_CONSTANT []
Distance : 3

56
Tree	i > NUMBER_CONSTANT i
Code	i > NUMBER_CONSTANT i
Distance : 3

57
Tree	i > NUMBER_CONSTANT .
Code	i > NUMBER_CONSTANT .
Distance : 3

58
Tree	i > NUMBER_CONSTANT )
Code	i > NUMBER_CONSTANT )
Distance : 3

59
Tree	i > NUMBER_CONSTANT ()
Code	i > NUMBER_CONSTANT ()
Distance : 3

60
Tree	i > NUMBER_CONSTANT {
Code	i > NUMBER_CONSTANT {
Distance : 3

61
Tree	i > NUMBER_CONSTANT n
Code	i > NUMBER_CONSTANT n
Distance : 3

62
Tree	i > NUMBER_CONSTANT e
Code	i > NUMBER_CONSTANT e
Distance : 3

63
Tree	i > NUMBER_CONSTANT <
Code	i > NUMBER_CONSTANT <
Distance : 3

64
Tree	i > NUMBER_CONSTANT test
Code	i > NUMBER_CONSTANT test
Distance : 3

65
Tree	i == thisBuf.length &&
Code	i == thisBuf.length &&
Distance : 3

66
Tree	this . i == i f
Code	this . i == i f
Distance : 5

67
Tree	this . i == i :
Code	this . i == i :
Distance : 5

68
Tree	this . i == i !
Code	this . i == i !
Distance : 5

69
Tree	this . i == i []
Code	this . i == i []
Distance : 5

70
Tree	this . i == i nullNotPermitted
Code	this . i == i nullNotPermitted
Distance : 5

71
Tree	this . i == i fail
Code	this . i == i fail
Distance : 5

72
Tree	this . i == i try
Code	this . i == i try
Distance : 5

73
Tree	this . i == i true
Code	this . i == i true
Distance : 5

74
Tree	this . i == i type
Code	this . i == i type
Distance : 5

75
Tree	this . i == i paint
Code	this . i == i paint
Distance : 5

76
Tree	this . i == i join
Code	this . i == i join
Distance : 5

77
Tree	this . i == i test
Code	this . i == i test
Distance : 5

78
Tree	this . i == i @
Code	this . i == i @
Distance : 5

79
Tree	this . i == i int
Code	this . i == i int
Distance : 5

80
Tree	this . i == i false
Code	this . i == i false
Distance : 5

81
Tree	this . i == i ==
Code	this . i == i ==
Distance : 5

82
Tree	this . i == i void
Code	this . i == i void
Distance : 5

83
Tree	this . i == i *
Code	this . i == i *
Distance : 5

84
Tree	this . i == i mode
Code	this . i == i mode
Distance : 5

85
Tree	this . i == i assertThat
Code	this . i == i assertThat
Distance : 5

86
Tree	this . i == i LINE_JOINER
Code	this . i == i LINE_JOINER
Distance : 5

87
Tree	this . i == i str
Code	this . i == i str
Distance : 5

88
Tree	this . i == i List
Code	this . i == i List
Distance : 5

89
Tree	this . i == i Args
Code	this . i == i Args
Distance : 5

90
Tree	this . i == i super
Code	this . i == i super
Distance : 5

91
Tree	this . i == i !=
Code	this . i == i !=
Distance : 5

92
Tree	this . i == i reportCodeChange
Code	this . i == i reportCodeChange
Distance : 5

93
Tree	this . i == i expected
Code	this . i == i expected
Distance : 5

94
Tree	this . i == i FastMath
Code	this . i == i FastMath
Distance : 5

95
Tree	this . i == i IllegalArgumentException
Code	this . i == i IllegalArgumentException
Distance : 5

96
Tree	this . i == i class
Code	this . i == i class
Distance : 5

97
Tree	this . i == i assertEquals
Code	this . i == i assertEquals
Distance : 5

98
Tree	this . i == i MathRuntimeException
Code	this . i == i MathRuntimeException
Distance : 5

99
Tree	this . i == i {}
Code	this . i == i {}
Distance : 5

========================================================================


========================================================================
Example Number: 36
Parent Code is: 
i < thisBuf.length
-------------------------------------------------------------------------------
Child code is: 
i < this . size
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (800{val=i}) (230{val=<}) (40{val=thisBuf.length})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (800{val=i}) (230{val=<}) (22 (315{val=this}) (235{val=.}) (800{val=size}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/60/parent/src_java_org_apache_commons_lang_text_StrBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	i == thisBuf.length < Exception
Code	i == thisBuf.length < Exception
Distance : 4

1
Tree	i > NUMBER_CONSTANT new
Code	i > NUMBER_CONSTANT new
Distance : 4

2
Tree	i < thisBuf.length array
Code	i < thisBuf.length array
Distance : 3

3
Tree	i < thisBuf.length Args
Code	i < thisBuf.length Args
Distance : 3

4
Tree	i < thisBuf.length List
Code	i < thisBuf.length List
Distance : 3

5
Tree	i < thisBuf.length data
Code	i < thisBuf.length data
Distance : 3

6
Tree	i < thisBuf.length checkArgument
Code	i < thisBuf.length checkArgument
Distance : 3

7
Tree	i < thisBuf.length boolean
Code	i < thisBuf.length boolean
Distance : 3

8
Tree	i < thisBuf.length m
Code	i < thisBuf.length m
Distance : 3

9
Tree	i < thisBuf.length name
Code	i < thisBuf.length name
Distance : 3

10
Tree	i < thisBuf.length add
Code	i < thisBuf.length add
Distance : 3

11
Tree	i > NUMBER_CONSTANT !=
Code	i > NUMBER_CONSTANT !=
Distance : 4

12
Tree	i > NUMBER_CONSTANT super
Code	i > NUMBER_CONSTANT super
Distance : 4

13
Tree	i > NUMBER_CONSTANT true
Code	i > NUMBER_CONSTANT true
Distance : 4

14
Tree	i > NUMBER_CONSTANT mode
Code	i > NUMBER_CONSTANT mode
Distance : 4

15
Tree	i > NUMBER_CONSTANT public
Code	i > NUMBER_CONSTANT public
Distance : 4

16
Tree	i > NUMBER_CONSTANT >
Code	i > NUMBER_CONSTANT >
Distance : 4

17
Tree	i < thisBuf.length try
Code	i < thisBuf.length try
Distance : 3

18
Tree	i == thisBuf.length !=
Code	i == thisBuf.length !=
Distance : 4

19
Tree	i == thisBuf.length ==
Code	i == thisBuf.length ==
Distance : 4

20
Tree	i == i fail
Code	i == i fail
Distance : 4

21
Tree	i == i name
Code	i == i name
Distance : 4

22
Tree	i == i t
Code	i == i t
Distance : 4

23
Tree	i == i field
Code	i == i field
Distance : 4

24
Tree	this . i == i field
Code	this . i == i field
Distance : 6

25
Tree	this . i == i t
Code	this . i == i t
Distance : 6

26
Tree	this . i == i name
Code	this . i == i name
Distance : 6

27
Tree	this . i == i add
Code	this . i == i add
Distance : 6

28
Tree	this . i == i <>
Code	this . i == i <>
Distance : 6

29
Tree	i == i add
Code	i == i add
Distance : 4

30
Tree	i > NUMBER_CONSTANT STRING_CONSTANT
Code	i > NUMBER_CONSTANT STRING_CONSTANT
Distance : 4

31
Tree	i > NUMBER_CONSTANT ,
Code	i > NUMBER_CONSTANT ,
Distance : 4

32
Tree	i > NUMBER_CONSTANT ;
Code	i > NUMBER_CONSTANT ;
Distance : 4

33
Tree	i > NUMBER_CONSTANT if
Code	i > NUMBER_CONSTANT if
Distance : 4

34
Tree	i == thisBuf.length ]
Code	i == thisBuf.length ]
Distance : 4

35
Tree	i == thisBuf.length [
Code	i == thisBuf.length [
Distance : 4

36
Tree	i == thisBuf.length mock
Code	i == thisBuf.length mock
Distance : 4

37
Tree	i == thisBuf.length Override
Code	i == thisBuf.length Override
Distance : 4

38
Tree	i == thisBuf.length test
Code	i == thisBuf.length test
Distance : 4

39
Tree	i == thisBuf.length @
Code	i == thisBuf.length @
Distance : 4

40
Tree	i == thisBuf.length t
Code	i == thisBuf.length t
Distance : 4

41
Tree	i == thisBuf.length super
Code	i == thisBuf.length super
Distance : 4

42
Tree	i < thisBuf.length [
Code	i < thisBuf.length [
Distance : 3

43
Tree	i < thisBuf.length Override
Code	i < thisBuf.length Override
Distance : 3

44
Tree	i > NUMBER_CONSTANT &&
Code	i > NUMBER_CONSTANT &&
Distance : 4

45
Tree	i > NUMBER_CONSTANT ]
Code	i > NUMBER_CONSTANT ]
Distance : 4

46
Tree	i > NUMBER_CONSTANT [
Code	i > NUMBER_CONSTANT [
Distance : 4

47
Tree	i > NUMBER_CONSTANT mock
Code	i > NUMBER_CONSTANT mock
Distance : 4

48
Tree	this . i == i array
Code	this . i == i array
Distance : 6

49
Tree	i > NUMBER_CONSTANT Override
Code	i > NUMBER_CONSTANT Override
Distance : 4

50
Tree	i > NUMBER_CONSTANT T
Code	i > NUMBER_CONSTANT T
Distance : 4

51
Tree	i > NUMBER_CONSTANT @
Code	i > NUMBER_CONSTANT @
Distance : 4

52
Tree	i > NUMBER_CONSTANT assertEquals
Code	i > NUMBER_CONSTANT assertEquals
Distance : 4

53
Tree	i > NUMBER_CONSTANT ==
Code	i > NUMBER_CONSTANT ==
Distance : 4

54
Tree	i > NUMBER_CONSTANT void
Code	i > NUMBER_CONSTANT void
Distance : 4

55
Tree	i > NUMBER_CONSTANT []
Code	i > NUMBER_CONSTANT []
Distance : 4

56
Tree	i > NUMBER_CONSTANT i
Code	i > NUMBER_CONSTANT i
Distance : 4

57
Tree	i > NUMBER_CONSTANT .
Code	i > NUMBER_CONSTANT .
Distance : 3

58
Tree	i > NUMBER_CONSTANT )
Code	i > NUMBER_CONSTANT )
Distance : 4

59
Tree	i > NUMBER_CONSTANT ()
Code	i > NUMBER_CONSTANT ()
Distance : 4

60
Tree	i > NUMBER_CONSTANT {
Code	i > NUMBER_CONSTANT {
Distance : 4

61
Tree	i > NUMBER_CONSTANT n
Code	i > NUMBER_CONSTANT n
Distance : 4

62
Tree	i > NUMBER_CONSTANT e
Code	i > NUMBER_CONSTANT e
Distance : 4

63
Tree	i > NUMBER_CONSTANT <
Code	i > NUMBER_CONSTANT <
Distance : 4

64
Tree	i > NUMBER_CONSTANT test
Code	i > NUMBER_CONSTANT test
Distance : 4

65
Tree	i == thisBuf.length &&
Code	i == thisBuf.length &&
Distance : 4

66
Tree	this . i == i f
Code	this . i == i f
Distance : 6

67
Tree	this . i == i :
Code	this . i == i :
Distance : 6

68
Tree	this . i == i !
Code	this . i == i !
Distance : 6

69
Tree	this . i == i []
Code	this . i == i []
Distance : 6

70
Tree	this . i == i nullNotPermitted
Code	this . i == i nullNotPermitted
Distance : 6

71
Tree	this . i == i fail
Code	this . i == i fail
Distance : 6

72
Tree	this . i == i try
Code	this . i == i try
Distance : 6

73
Tree	this . i == i true
Code	this . i == i true
Distance : 6

74
Tree	this . i == i type
Code	this . i == i type
Distance : 6

75
Tree	this . i == i paint
Code	this . i == i paint
Distance : 6

76
Tree	this . i == i join
Code	this . i == i join
Distance : 6

77
Tree	this . i == i test
Code	this . i == i test
Distance : 6

78
Tree	this . i == i @
Code	this . i == i @
Distance : 6

79
Tree	this . i == i int
Code	this . i == i int
Distance : 6

80
Tree	this . i == i false
Code	this . i == i false
Distance : 6

81
Tree	this . i == i ==
Code	this . i == i ==
Distance : 6

82
Tree	this . i == i void
Code	this . i == i void
Distance : 6

83
Tree	this . i == i *
Code	this . i == i *
Distance : 6

84
Tree	this . i == i mode
Code	this . i == i mode
Distance : 6

85
Tree	this . i == i assertThat
Code	this . i == i assertThat
Distance : 6

86
Tree	this . i == i LINE_JOINER
Code	this . i == i LINE_JOINER
Distance : 6

87
Tree	this . i == i str
Code	this . i == i str
Distance : 6

88
Tree	this . i == i List
Code	this . i == i List
Distance : 6

89
Tree	this . i == i Args
Code	this . i == i Args
Distance : 6

90
Tree	this . i == i super
Code	this . i == i super
Distance : 6

91
Tree	this . i == i !=
Code	this . i == i !=
Distance : 6

92
Tree	this . i == i reportCodeChange
Code	this . i == i reportCodeChange
Distance : 6

93
Tree	this . i == i expected
Code	this . i == i expected
Distance : 6

94
Tree	this . i == i FastMath
Code	this . i == i FastMath
Distance : 6

95
Tree	this . i == i IllegalArgumentException
Code	this . i == i IllegalArgumentException
Distance : 6

96
Tree	this . i == i class
Code	this . i == i class
Distance : 6

97
Tree	this . i == i assertEquals
Code	this . i == i assertEquals
Distance : 6

98
Tree	this . i == i MathRuntimeException
Code	this . i == i MathRuntimeException
Distance : 6

99
Tree	this . i == i {}
Code	this . i == i {}
Distance : 6

========================================================================


========================================================================
Example Number: 37
Parent Code is: 
{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ str . getChars ( NUMBER_CONSTANT , width , buffer , size ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=str}) (235{val=.}) (802{val=getChars}) (214{val=(}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (800{val=strLen}) (234{val=,}) (800{val=buffer}) (234{val=,}) (800{val=size}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=str}) (235{val=.}) (802{val=getChars}) (214{val=(}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (800{val=width}) (234{val=,}) (800{val=buffer}) (234{val=,}) (800{val=size}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/59/parent/src_java_org_apache_commons_lang_text_StrBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } i
Code	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } i
Distance : 5

1
Tree	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } checkState
Code	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } checkState
Distance : 5

2
Tree	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } false
Code	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } false
Distance : 5

3
Tree	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } double
Code	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } double
Distance : 5

4
Tree	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } !=
Code	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } !=
Distance : 5

5
Tree	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } value
Code	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } value
Distance : 5

6
Tree	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } true
Code	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } true
Distance : 5

7
Tree	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } super
Code	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } super
Distance : 5

8
Tree	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } ]
Code	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } ]
Distance : 5

9
Tree	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } {}
Code	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } {}
Distance : 5

10
Tree	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } *
Code	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } *
Distance : 5

11
Tree	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } -
Code	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } -
Distance : 5

12
Tree	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } T
Code	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } T
Distance : 5

13
Tree	str . getChars ( NUMBER_CONSTANT , strLen , strLen , str ) ;
Code	str . getChars ( NUMBER_CONSTANT , strLen , strLen , str ) ;
Distance : 5

14
Tree	size . getChars ( NUMBER_CONSTANT , str , buffer , size ) ;
Code	size . getChars ( NUMBER_CONSTANT , str , buffer , size ) ;
Distance : 4

15
Tree	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } mode
Code	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } mode
Distance : 5

16
Tree	{ str . getChars ( buffer , buffer , size , STRING_CONSTANT ) ; }
Code	{ str . getChars ( buffer , buffer , size , STRING_CONSTANT ) ; }
Distance : 4

17
Tree	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } [
Code	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } [
Distance : 5

18
Tree	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } &&
Code	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } &&
Distance : 5

19
Tree	{ width . getChars ( width , getChars () , this ) ; }
Code	{ width . getChars ( width , getChars () , this ) ; }
Distance : 6

20
Tree	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } test
Code	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } test
Distance : 5

21
Tree	{ str . getChars ( str , getChars () , this ) ; } [
Code	{ str . getChars ( str , getChars () , this ) ; } [
Distance : 6

22
Tree	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } paint
Code	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } paint
Distance : 5

23
Tree	{ str . getChars ( str , getChars () , this ) ; } assertEquals
Code	{ str . getChars ( str , getChars () , this ) ; } assertEquals
Distance : 6

24
Tree	{ str . getChars ( str , getChars () , this ) ; } int
Code	{ str . getChars ( str , getChars () , this ) ; } int
Distance : 6

25
Tree	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } int
Code	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } int
Distance : 5

26
Tree	{ str . getChars ( str , getChars () , this ) ; } double
Code	{ str . getChars ( str , getChars () , this ) ; } double
Distance : 6

27
Tree	{ str . getChars ( str , getChars () , this ) ; } checkState
Code	{ str . getChars ( str , getChars () , this ) ; } checkState
Distance : 6

28
Tree	{ str . getChars ( str , getChars () , this ) ; } false
Code	{ str . getChars ( str , getChars () , this ) ; } false
Distance : 6

29
Tree	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } m
Code	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } m
Distance : 5

30
Tree	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } join
Code	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } join
Distance : 5

31
Tree	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } Preconditions
Code	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } Preconditions
Distance : 5

32
Tree	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } assertEquals
Code	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } assertEquals
Distance : 5

33
Tree	{ str . getChars ( str , getChars () , this ) ; } super
Code	{ str . getChars ( str , getChars () , this ) ; } super
Distance : 6

34
Tree	{ width . getChars ( size , strLen . getChars () , this ) ; }
Code	{ width . getChars ( size , strLen . getChars () , this ) ; }
Distance : 7

35
Tree	{ getChars ( str , buffer , size , str ) ; }
Code	{ getChars ( str , buffer , size , str ) ; }
Distance : 6

36
Tree	{ getChars ( STRING_CONSTANT , str , buffer , strLen ) ; }
Code	{ getChars ( STRING_CONSTANT , str , buffer , strLen ) ; }
Distance : 5

37
Tree	{ getChars ( strLen , size , buffer , size ) ; }
Code	{ getChars ( strLen , size , buffer , size ) ; }
Distance : 4

38
Tree	{ str . getChars ( null , str , size , buffer ) ; }
Code	{ str . getChars ( null , str , size , buffer ) ; }
Distance : 4

39
Tree	{ str . getChars ( this , buffer , str , size ) ; }
Code	{ str . getChars ( this , buffer , str , size ) ; }
Distance : 3

40
Tree	{ str . getChars ( NUMBER_CONSTANT , buffer , buffer , buffer ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , buffer , buffer , buffer ) ; }
Distance : 2

41
Tree	size . getChars ( NUMBER_CONSTANT , strLen , buffer , str ) ;
Code	size . getChars ( NUMBER_CONSTANT , strLen , buffer , str ) ;
Distance : 5

42
Tree	str . getChars ( NUMBER_CONSTANT , buffer , buffer , buffer ) ;
Code	str . getChars ( NUMBER_CONSTANT , buffer , buffer , buffer ) ;
Distance : 4

43
Tree	{ str . getChars ( this , str , str , buffer ) ; }
Code	{ str . getChars ( this , str , str , buffer ) ; }
Distance : 4

44
Tree	{ size . getChars ( null , strLen , size , size ) ; }
Code	{ size . getChars ( null , strLen , size , size ) ; }
Distance : 4

45
Tree	{ getChars ( STRING_CONSTANT , strLen , strLen , str ) ; }
Code	{ getChars ( STRING_CONSTANT , strLen , strLen , str ) ; }
Distance : 6

46
Tree	{ str . getChars ( width , strLen , size , STRING_CONSTANT ) ; }
Code	{ str . getChars ( width , strLen , size , STRING_CONSTANT ) ; }
Distance : 4

47
Tree	buffer . getChars ( NUMBER_CONSTANT , str , buffer , size ) ;
Code	buffer . getChars ( NUMBER_CONSTANT , str , buffer , size ) ;
Distance : 4

48
Tree	{ getChars ( str , strLen , str , str ) ; }
Code	{ getChars ( str , strLen , str , str ) ; }
Distance : 6

49
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , size , str ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , size , str ) ; }
Distance : 3

50
Tree	{ str . getChars ( null , buffer , strLen , size ) ; }
Code	{ str . getChars ( null , buffer , strLen , size ) ; }
Distance : 3

51
Tree	{ str . getChars ( super(); , strLen , buffer , buffer ) ; }
Code	{ str . getChars ( super(); , strLen , buffer , buffer ) ; }
Distance : 3

52
Tree	{ getChars ( strLen , strLen , strLen , size ) ; }
Code	{ getChars ( strLen , strLen , strLen , size ) ; }
Distance : 5

53
Tree	{ size . getChars ( NUMBER_CONSTANT , str , buffer , size ) ; }
Code	{ size . getChars ( NUMBER_CONSTANT , str , buffer , size ) ; }
Distance : 2

54
Tree	{ str . getChars ( this , size , buffer , size ) ; }
Code	{ str . getChars ( this , size , buffer , size ) ; }
Distance : 2

55
Tree	{ getChars ( STRING_CONSTANT , str , str , str ) ; }
Code	{ getChars ( STRING_CONSTANT , str , str , str ) ; }
Distance : 6

56
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , strLen , buffer ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , strLen , buffer ) ; }
Distance : 3

57
Tree	str . getChars ( NUMBER_CONSTANT , buffer , buffer , str ) ;
Code	str . getChars ( NUMBER_CONSTANT , buffer , buffer , str ) ;
Distance : 4

58
Tree	{ buffer . getChars ( null , strLen , str , size ) ; }
Code	{ buffer . getChars ( null , strLen , str , size ) ; }
Distance : 4

59
Tree	{ str . getChars ( NUMBER_CONSTANT , buffer , buffer , str ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , buffer , buffer , str ) ; }
Distance : 2

60
Tree	{ str . getChars ( null , str , size , str ) ; }
Code	{ str . getChars ( null , str , size , str ) ; }
Distance : 4

61
Tree	{ getChars ( str , strLen , size , strLen ) ; }
Code	{ getChars ( str , strLen , size , strLen ) ; }
Distance : 6

62
Tree	{ str . getChars ( width , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( width , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

63
Tree	{ str . getChars ( super(); , str , buffer , size ) ; }
Code	{ str . getChars ( super(); , str , buffer , size ) ; }
Distance : 2

64
Tree	{ str . getChars ( this , str , str , str ) ; }
Code	{ str . getChars ( this , str , str , str ) ; }
Distance : 4

65
Tree	str . getChars ( NUMBER_CONSTANT , strLen , strLen , buffer ) ;
Code	str . getChars ( NUMBER_CONSTANT , strLen , strLen , buffer ) ;
Distance : 5

66
Tree	{ getChars ( str , buffer , size , buffer ) ; }
Code	{ getChars ( str , buffer , size , buffer ) ; }
Distance : 6

67
Tree	{ getChars ( STRING_CONSTANT , str , str , buffer ) ; }
Code	{ getChars ( STRING_CONSTANT , str , str , buffer ) ; }
Distance : 6

68
Tree	strLen . getChars ( NUMBER_CONSTANT , str , buffer , size ) ;
Code	strLen . getChars ( NUMBER_CONSTANT , str , buffer , size ) ;
Distance : 4

69
Tree	{ str . getChars ( super(); , strLen , buffer , str ) ; }
Code	{ str . getChars ( super(); , strLen , buffer , str ) ; }
Distance : 3

70
Tree	{ strLen . getChars ( NUMBER_CONSTANT , str , buffer , size ) ; }
Code	{ strLen . getChars ( NUMBER_CONSTANT , str , buffer , size ) ; }
Distance : 2

71
Tree	{ buffer . getChars ( size , width . getChars () , this ) ; }
Code	{ buffer . getChars ( size , width . getChars () , this ) ; }
Distance : 6

72
Tree	{ size . getChars ( width , size . getChars () , this ) ; }
Code	{ size . getChars ( width , size . getChars () , this ) ; }
Distance : 7

73
Tree	{ size . getChars ( buffer , str . getChars () , this ) ; }
Code	{ size . getChars ( buffer , str . getChars () , this ) ; }
Distance : 7

74
Tree	{ str . getChars ( width , size . getChars () , this ) ; }
Code	{ str . getChars ( width , size . getChars () , this ) ; }
Distance : 6

75
Tree	{ strLen . getChars ( size , str . getChars () , this ) ; }
Code	{ strLen . getChars ( size , str . getChars () , this ) ; }
Distance : 7

76
Tree	{ size . getChars ( size , buffer . getChars () , this ) ; }
Code	{ size . getChars ( size , buffer . getChars () , this ) ; }
Distance : 7

77
Tree	{ buffer . getChars ( width , getChars () , this ) ; }
Code	{ buffer . getChars ( width , getChars () , this ) ; }
Distance : 6

78
Tree	{ size . getChars ( buffer , buffer . getChars () , this ) ; }
Code	{ size . getChars ( buffer , buffer . getChars () , this ) ; }
Distance : 7

79
Tree	{ size . getChars ( size , str . getChars () , this ) ; }
Code	{ size . getChars ( size , str . getChars () , this ) ; }
Distance : 7

80
Tree	{ strLen . getChars ( buffer , str . getChars () , this ) ; }
Code	{ strLen . getChars ( buffer , str . getChars () , this ) ; }
Distance : 7

81
Tree	{ strLen . getChars ( buffer , buffer . getChars () , this ) ; }
Code	{ strLen . getChars ( buffer , buffer . getChars () , this ) ; }
Distance : 7

82
Tree	{ width . getChars ( str , getChars () , this ) ; }
Code	{ width . getChars ( str , getChars () , this ) ; }
Distance : 6

83
Tree	{ size . getChars ( width , strLen . getChars () , this ) ; }
Code	{ size . getChars ( width , strLen . getChars () , this ) ; }
Distance : 7

84
Tree	{ buffer . getChars ( size , str . getChars () , this ) ; }
Code	{ buffer . getChars ( size , str . getChars () , this ) ; }
Distance : 7

85
Tree	{ buffer . getChars ( buffer , str . getChars () , this ) ; }
Code	{ buffer . getChars ( buffer , str . getChars () , this ) ; }
Distance : 7

86
Tree	{ strLen . getChars ( width , strLen . getChars () , this ) ; }
Code	{ strLen . getChars ( width , strLen . getChars () , this ) ; }
Distance : 7

87
Tree	{ strLen . getChars ( size , buffer . getChars () , this ) ; }
Code	{ strLen . getChars ( size , buffer . getChars () , this ) ; }
Distance : 7

88
Tree	{ buffer . getChars ( size , buffer . getChars () , this ) ; }
Code	{ buffer . getChars ( size , buffer . getChars () , this ) ; }
Distance : 7

89
Tree	{ str . getChars ( buffer , width . getChars () , this ) ; }
Code	{ str . getChars ( buffer , width . getChars () , this ) ; }
Distance : 5

90
Tree	{ str . getChars ( size , width . getChars () , this ) ; }
Code	{ str . getChars ( size , width . getChars () , this ) ; }
Distance : 5

91
Tree	{ str . getChars ( break; , strLen , buffer , size ) ; }
Code	{ str . getChars ( break; , strLen , buffer , size ) ; }
Distance : 2

92
Tree	{ getChars ( buffer , strLen , size , buffer ) ; }
Code	{ getChars ( buffer , strLen , size , buffer ) ; }
Distance : 6

93
Tree	{ str . getChars ( NUMBER_CONSTANT , size , buffer , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , size , buffer , size ) ; }
Distance : 1

94
Tree	{ str . getChars ( buffer , str , size , STRING_CONSTANT ) ; }
Code	{ str . getChars ( buffer , str , size , STRING_CONSTANT ) ; }
Distance : 4

95
Tree	{ str . getChars ( this , str , strLen , size ) ; }
Code	{ str . getChars ( this , str , strLen , size ) ; }
Distance : 3

96
Tree	{ size . getChars ( this , strLen , size , size ) ; }
Code	{ size . getChars ( this , strLen , size , size ) ; }
Distance : 4

97
Tree	{ width . getChars ( width , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ width . getChars ( width , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 5

98
Tree	{ str . getChars ( null , buffer , size , size ) ; }
Code	{ str . getChars ( null , buffer , size , size ) ; }
Distance : 3

99
Tree	str . getChars ( NUMBER_CONSTANT , size , buffer , size ) ;
Code	str . getChars ( NUMBER_CONSTANT , size , buffer , size ) ;
Distance : 3

========================================================================


========================================================================
Example Number: 38
Parent Code is: 
{ return cAvailableLocaleSet . contains ( locale ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return availableLocaleList () . contains ( locale ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (800{val=cAvailableLocaleSet}) (235{val=.}) (802{val=contains}) (214{val=(}) (800{val=locale}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=availableLocaleList}) (216{val=()})) (235{val=.}) (802{val=contains}) (214{val=(}) (800{val=locale}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/57/parent/src_java_org_apache_commons_lang_LocaleUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } null
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } null
Distance : 3

1
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains ( UnescapeUtils.UNESCAPE_ECMASCRIPT ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains ( UnescapeUtils.UNESCAPE_ECMASCRIPT ) ; }
Distance : 7

2
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; } >
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; } >
Distance : 4

3
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; } null
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; } null
Distance : 4

4
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; } +
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; } +
Distance : 4

5
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; } return
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; } return
Distance : 4

6
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; } NUMBER_CONSTANT
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; } NUMBER_CONSTANT
Distance : 4

7
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; } STRING_CONSTANT
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; } STRING_CONSTANT
Distance : 4

8
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return null ; } void
Code	{ cAvailableLocaleSet . contains ( locale ) ; return null ; } void
Distance : 7

9
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } value
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } value
Distance : 3

10
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return null ; } !=
Code	{ cAvailableLocaleSet . contains ( locale ) ; return null ; } !=
Distance : 7

11
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } compiler
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } compiler
Distance : 3

12
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } <>
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } <>
Distance : 3

13
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } m
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } m
Distance : 3

14
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } boolean
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } boolean
Distance : 3

15
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } :
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } :
Distance : 3

16
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } result
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } result
Distance : 3

17
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } checkState
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } checkState
Distance : 3

18
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } double
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } double
Distance : 3

19
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } super
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } super
Distance : 3

20
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } !=
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } !=
Distance : 3

21
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } String
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } String
Distance : 3

22
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains ( setValues ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains ( setValues ) ; }
Distance : 7

23
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } ParamChecks
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } ParamChecks
Distance : 3

24
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains ( currentScript.defaultExportLocalName ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains ( currentScript.defaultExportLocalName ) ; }
Distance : 7

25
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains ( returnMap ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains ( returnMap ) ; }
Distance : 7

26
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; } =
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; } =
Distance : 4

27
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; } (
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; } (
Distance : 4

28
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; } <s>
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; } <s>
Distance : 4

29
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; } {
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; } {
Distance : 4

30
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; } <blank>
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; } <blank>
Distance : 4

31
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; } ;
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; } ;
Distance : 4

32
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; } )
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; } )
Distance : 4

33
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; } .
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; } .
Distance : 4

34
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; } ,
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; } ,
Distance : 4

35
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; } int
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; } int
Distance : 4

36
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; } ArrayList
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; } ArrayList
Distance : 4

37
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; } @
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; } @
Distance : 4

38
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; } test
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; } test
Distance : 4

39
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return null ; } ==
Code	{ cAvailableLocaleSet . contains ( locale ) ; return null ; } ==
Distance : 7

40
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return null ; } &&
Code	{ cAvailableLocaleSet . contains ( locale ) ; return null ; } &&
Distance : 7

41
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return null ; } T
Code	{ cAvailableLocaleSet . contains ( locale ) ; return null ; } T
Distance : 7

42
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return null ; } i
Code	{ cAvailableLocaleSet . contains ( locale ) ; return null ; } i
Distance : 7

43
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return null ; } value
Code	{ cAvailableLocaleSet . contains ( locale ) ; return null ; } value
Distance : 7

44
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return null ; } checkState
Code	{ cAvailableLocaleSet . contains ( locale ) ; return null ; } checkState
Distance : 7

45
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return null ; } double
Code	{ cAvailableLocaleSet . contains ( locale ) ; return null ; } double
Distance : 7

46
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; } }
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; } }
Distance : 4

47
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains ( stat.aggregateStatistics ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains ( stat.aggregateStatistics ) ; }
Distance : 7

48
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } e
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } e
Distance : 3

49
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } n
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } n
Distance : 3

50
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } throw
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } throw
Distance : 3

51
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } type
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } type
Distance : 3

52
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } class
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } class
Distance : 3

53
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } Object
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } Object
Distance : 3

54
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } mock
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } mock
Distance : 3

55
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } -
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } -
Distance : 3

56
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } mode
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } mode
Distance : 3

57
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } true
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } true
Distance : 3

58
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } ,
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } ,
Distance : 3

59
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } <
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } <
Distance : 3

60
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } if
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } if
Distance : 3

61
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } (
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } (
Distance : 3

62
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } <s>
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } <s>
Distance : 3

63
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } {
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } {
Distance : 3

64
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } <blank>
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } <blank>
Distance : 3

65
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } ;
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } ;
Distance : 3

66
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } )
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } )
Distance : 3

67
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } .
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } .
Distance : 3

68
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } =
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } =
Distance : 3

69
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } {}
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } {}
Distance : 3

70
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } }
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } }
Distance : 3

71
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } ()
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } ()
Distance : 3

72
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } *
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } *
Distance : 3

73
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } paint
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } paint
Distance : 3

74
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } join
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } join
Distance : 3

75
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } serialised
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } serialised
Distance : 3

76
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } catch
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } catch
Distance : 3

77
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } void
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } void
Distance : 3

78
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } ==
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } ==
Distance : 3

79
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } ]
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } ]
Distance : 3

80
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } [
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } [
Distance : 3

81
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } Preconditions
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } Preconditions
Distance : 3

82
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } array
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } array
Distance : 3

83
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } f
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } f
Distance : 3

84
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } i
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } i
Distance : 3

85
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } ArrayList
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } ArrayList
Distance : 3

86
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; } false
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; } false
Distance : 4

87
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return null ; } throw
Code	{ cAvailableLocaleSet . contains ( locale ) ; return null ; } throw
Distance : 7

88
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } FastMath
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } FastMath
Distance : 3

89
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } expected
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } expected
Distance : 3

90
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } reportCodeChange
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } reportCodeChange
Distance : 3

91
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } List
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } List
Distance : 3

92
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } Args
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } Args
Distance : 3

93
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } fail
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } fail
Distance : 3

94
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } try
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } try
Distance : 3

95
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } fireChangeEvent
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } fireChangeEvent
Distance : 3

96
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } Override
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } Override
Distance : 3

97
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } getInstance
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } getInstance
Distance : 3

98
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } IllegalArgumentException
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } IllegalArgumentException
Distance : 3

99
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; } {
Code	{ return cAvailableLocaleSet . contains ( locale ) ; } {
Distance : 3

========================================================================


========================================================================
Example Number: 39
Parent Code is: 
{ escapeJavaStyleString ( out , str , true ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ escapeJavaStyleString ( out , str , true , true ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=out}) (234{val=,}) (800{val=str}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=out}) (234{val=,}) (800{val=str}) (234{val=,}) (9{val=true}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/46/parent/src_java_org_apache_commons_lang_StringEscapeUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ str . escapeJavaStyleString ( str ) ; } &&
Code	{ str . escapeJavaStyleString ( str ) ; } &&
Distance : 9

1
Tree	{ str . escapeJavaStyleString ( str ) ; } STRING_CONSTANT
Code	{ str . escapeJavaStyleString ( str ) ; } STRING_CONSTANT
Distance : 9

2
Tree	{ escapeJavaStyleString ( out , out , out , false ) ; } (
Code	{ escapeJavaStyleString ( out , out , out , false ) ; } (
Distance : 4

3
Tree	{ str . escapeJavaStyleString ( str ) ; } return
Code	{ str . escapeJavaStyleString ( str ) ; } return
Distance : 9

4
Tree	{ escapeJavaStyleString ( out , out , false ) ; } ArrayList
Code	{ escapeJavaStyleString ( out , out , false ) ; } ArrayList
Distance : 5

5
Tree	{ str . escapeJavaStyleString ( str , out ) ; } if
Code	{ str . escapeJavaStyleString ( str , out ) ; } if
Distance : 8

6
Tree	{ escapeJavaStyleString ( out , out , false ) ; } IllegalArgumentException
Code	{ escapeJavaStyleString ( out , out , false ) ; } IllegalArgumentException
Distance : 5

7
Tree	{ escapeJavaStyleString ( out , out , false ) ; } FastMath
Code	{ escapeJavaStyleString ( out , out , false ) ; } FastMath
Distance : 5

8
Tree	{ escapeJavaStyleString ( out , out , false ) ; } expected
Code	{ escapeJavaStyleString ( out , out , false ) ; } expected
Distance : 5

9
Tree	{ escapeJavaStyleString ( out , out , false ) ; } reportCodeChange
Code	{ escapeJavaStyleString ( out , out , false ) ; } reportCodeChange
Distance : 5

10
Tree	{ escapeJavaStyleString ( out , out , false ) ; } List
Code	{ escapeJavaStyleString ( out , out , false ) ; } List
Distance : 5

11
Tree	{ escapeJavaStyleString ( out , out , false ) ; } Args
Code	{ escapeJavaStyleString ( out , out , false ) ; } Args
Distance : 5

12
Tree	{ escapeJavaStyleString ( out , out , false ) ; } fail
Code	{ escapeJavaStyleString ( out , out , false ) ; } fail
Distance : 5

13
Tree	{ escapeJavaStyleString ( out , out , false ) ; } try
Code	{ escapeJavaStyleString ( out , out , false ) ; } try
Distance : 5

14
Tree	{ escapeJavaStyleString ( out , out , false ) ; } fireChangeEvent
Code	{ escapeJavaStyleString ( out , out , false ) ; } fireChangeEvent
Distance : 5

15
Tree	{ escapeJavaStyleString ( out , out ) ; } >
Code	{ escapeJavaStyleString ( out , out ) ; } >
Distance : 6

16
Tree	{ escapeJavaStyleString ( out , out , false ) ; } getInstance
Code	{ escapeJavaStyleString ( out , out , false ) ; } getInstance
Distance : 5

17
Tree	{ escapeJavaStyleString ( out , out , false ) ; } serialised
Code	{ escapeJavaStyleString ( out , out , false ) ; } serialised
Distance : 5

18
Tree	{ escapeJavaStyleString ( out , out , false ) ; } join
Code	{ escapeJavaStyleString ( out , out , false ) ; } join
Distance : 5

19
Tree	{ escapeJavaStyleString ( out , out , false ) ; } paint
Code	{ escapeJavaStyleString ( out , out , false ) ; } paint
Distance : 5

20
Tree	{ escapeJavaStyleString ( out , out , false ) ; } *
Code	{ escapeJavaStyleString ( out , out , false ) ; } *
Distance : 5

21
Tree	{ escapeJavaStyleString ( out , out , false ) ; } type
Code	{ escapeJavaStyleString ( out , out , false ) ; } type
Distance : 5

22
Tree	{ escapeJavaStyleString ( out , out , false ) ; } class
Code	{ escapeJavaStyleString ( out , out , false ) ; } class
Distance : 5

23
Tree	{ escapeJavaStyleString ( out , out , false ) ; } Object
Code	{ escapeJavaStyleString ( out , out , false ) ; } Object
Distance : 5

24
Tree	{ escapeJavaStyleString ( out , out , out ) ; } invocation
Code	{ escapeJavaStyleString ( out , out , out ) ; } invocation
Distance : 5

25
Tree	{ escapeJavaStyleString ( out , out , false ) ; } mock
Code	{ escapeJavaStyleString ( out , out , false ) ; } mock
Distance : 5

26
Tree	{ escapeJavaStyleString ( out , out , out ) ; } false
Code	{ escapeJavaStyleString ( out , out , out ) ; } false
Distance : 5

27
Tree	{ escapeJavaStyleString ( out , out , out ) ; } @
Code	{ escapeJavaStyleString ( out , out , out ) ; } @
Distance : 5

28
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } array
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } array
Distance : 10

29
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } ParamChecks
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } ParamChecks
Distance : 10

30
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } f
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } f
Distance : 10

31
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } Override
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } Override
Distance : 10

32
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } mock
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } mock
Distance : 10

33
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } Object
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } Object
Distance : 10

34
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } class
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } class
Distance : 10

35
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } type
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } type
Distance : 10

36
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } *
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } *
Distance : 10

37
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } paint
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } paint
Distance : 10

38
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } join
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } join
Distance : 10

39
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } serialised
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } serialised
Distance : 10

40
Tree	{ escapeJavaStyleString ( out , out , out ) ; } assertThat
Code	{ escapeJavaStyleString ( out , out , out ) ; } assertThat
Distance : 5

41
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } getInstance
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } getInstance
Distance : 10

42
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } fireChangeEvent
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } fireChangeEvent
Distance : 10

43
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } ArrayList
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } ArrayList
Distance : 10

44
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } try
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } try
Distance : 10

45
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } fail
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } fail
Distance : 10

46
Tree	{ escapeJavaStyleString ( out , out , out ) ; } !
Code	{ escapeJavaStyleString ( out , out , out ) ; } !
Distance : 5

47
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } Args
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } Args
Distance : 10

48
Tree	{ escapeJavaStyleString ( out , out , out ) ; } []
Code	{ escapeJavaStyleString ( out , out , out ) ; } []
Distance : 5

49
Tree	{ escapeJavaStyleString ( out , out , out ) ; } nullNotPermitted
Code	{ escapeJavaStyleString ( out , out , out ) ; } nullNotPermitted
Distance : 5

50
Tree	{ escapeJavaStyleString ( out , out , out ) ; } test
Code	{ escapeJavaStyleString ( out , out , out ) ; } test
Distance : 5

51
Tree	{ escapeJavaStyleString ( out , out , out ) ; } int
Code	{ escapeJavaStyleString ( out , out , out ) ; } int
Distance : 5

52
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } <>
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } <>
Distance : 10

53
Tree	{ str . escapeJavaStyleString ( str , out ) ; } (
Code	{ str . escapeJavaStyleString ( str , out ) ; } (
Distance : 8

54
Tree	{ escapeJavaStyleString ( out , out ) ; } -
Code	{ escapeJavaStyleString ( out , out ) ; } -
Distance : 6

55
Tree	{ escapeJavaStyleString ( out , out , false ) ; } []
Code	{ escapeJavaStyleString ( out , out , false ) ; } []
Distance : 5

56
Tree	{ escapeJavaStyleString ( out , out , false ) ; } !
Code	{ escapeJavaStyleString ( out , out , false ) ; } !
Distance : 5

57
Tree	{ escapeJavaStyleString ( out , out , false ) ; } assertEquals
Code	{ escapeJavaStyleString ( out , out , false ) ; } assertEquals
Distance : 5

58
Tree	{ escapeJavaStyleString ( out , out , false ) ; } +
Code	{ escapeJavaStyleString ( out , out , false ) ; } +
Distance : 5

59
Tree	{ escapeJavaStyleString ( out , out , false ) ; } true
Code	{ escapeJavaStyleString ( out , out , false ) ; } true
Distance : 5

60
Tree	{ escapeJavaStyleString ( out , out , false ) ; } -
Code	{ escapeJavaStyleString ( out , out , false ) ; } -
Distance : 5

61
Tree	{ escapeJavaStyleString ( out , out , false ) ; } array
Code	{ escapeJavaStyleString ( out , out , false ) ; } array
Distance : 5

62
Tree	{ escapeJavaStyleString ( out , out , false ) ; } Preconditions
Code	{ escapeJavaStyleString ( out , out , false ) ; } Preconditions
Distance : 5

63
Tree	{ escapeJavaStyleString ( out , out , false ) ; } <>
Code	{ escapeJavaStyleString ( out , out , false ) ; } <>
Distance : 5

64
Tree	{ escapeJavaStyleString ( out , out , false ) ; } m
Code	{ escapeJavaStyleString ( out , out , false ) ; } m
Distance : 5

65
Tree	{ escapeJavaStyleString ( out , out , false ) ; } boolean
Code	{ escapeJavaStyleString ( out , out , false ) ; } boolean
Distance : 5

66
Tree	{ escapeJavaStyleString ( out , out , false ) ; } :
Code	{ escapeJavaStyleString ( out , out , false ) ; } :
Distance : 5

67
Tree	{ escapeJavaStyleString ( out , out , false ) ; } result
Code	{ escapeJavaStyleString ( out , out , false ) ; } result
Distance : 5

68
Tree	{ escapeJavaStyleString ( out , out , false ) ; } checkState
Code	{ escapeJavaStyleString ( out , out , false ) ; } checkState
Distance : 5

69
Tree	{ escapeJavaStyleString ( out , out , false ) ; } double
Code	{ escapeJavaStyleString ( out , out , false ) ; } double
Distance : 5

70
Tree	{ escapeJavaStyleString ( out , out , false ) ; } super
Code	{ escapeJavaStyleString ( out , out , false ) ; } super
Distance : 5

71
Tree	{ escapeJavaStyleString ( out , out , false ) ; } !=
Code	{ escapeJavaStyleString ( out , out , false ) ; } !=
Distance : 5

72
Tree	{ escapeJavaStyleString ( out , out , false ) ; } compiler
Code	{ escapeJavaStyleString ( out , out , false ) ; } compiler
Distance : 5

73
Tree	{ escapeJavaStyleString ( out , out , false ) ; } String
Code	{ escapeJavaStyleString ( out , out , false ) ; } String
Distance : 5

74
Tree	{ escapeJavaStyleString ( out , out , false ) ; } e
Code	{ escapeJavaStyleString ( out , out , false ) ; } e
Distance : 5

75
Tree	{ escapeJavaStyleString ( out , out , false ) ; } n
Code	{ escapeJavaStyleString ( out , out , false ) ; } n
Distance : 5

76
Tree	{ escapeJavaStyleString ( out , out , false ) ; } throw
Code	{ escapeJavaStyleString ( out , out , false ) ; } throw
Distance : 5

77
Tree	{ escapeJavaStyleString ( out , out , false ) ; } catch
Code	{ escapeJavaStyleString ( out , out , false ) ; } catch
Distance : 5

78
Tree	{ escapeJavaStyleString ( out , out , false ) ; } nullNotPermitted
Code	{ escapeJavaStyleString ( out , out , false ) ; } nullNotPermitted
Distance : 5

79
Tree	{ str . escapeJavaStyleString ( str , out ) ; } <s>
Code	{ str . escapeJavaStyleString ( str , out ) ; } <s>
Distance : 8

80
Tree	{ escapeJavaStyleString ( out , out , false ) ; } test
Code	{ escapeJavaStyleString ( out , out , false ) ; } test
Distance : 5

81
Tree	{ escapeJavaStyleString ( out , out , false ) ; } int
Code	{ escapeJavaStyleString ( out , out , false ) ; } int
Distance : 5

82
Tree	{ escapeJavaStyleString ( out , out ) ; } Preconditions
Code	{ escapeJavaStyleString ( out , out ) ; } Preconditions
Distance : 6

83
Tree	{ escapeJavaStyleString ( out , out ) ; } =
Code	{ escapeJavaStyleString ( out , out ) ; } =
Distance : 6

84
Tree	{ escapeJavaStyleString ( out , out ) ; } final
Code	{ escapeJavaStyleString ( out , out ) ; } final
Distance : 6

85
Tree	{ escapeJavaStyleString ( out , out ) ; } this
Code	{ escapeJavaStyleString ( out , out ) ; } this
Distance : 6

86
Tree	{ escapeJavaStyleString ( out , out ) ; } <
Code	{ escapeJavaStyleString ( out , out ) ; } <
Distance : 6

87
Tree	{ escapeJavaStyleString ( out , out ) ; } if
Code	{ escapeJavaStyleString ( out , out ) ; } if
Distance : 6

88
Tree	{ escapeJavaStyleString ( out , out ) ; } ]
Code	{ escapeJavaStyleString ( out , out ) ; } ]
Distance : 6

89
Tree	{ escapeJavaStyleString ( out , out ) ; } [
Code	{ escapeJavaStyleString ( out , out ) ; } [
Distance : 6

90
Tree	{ escapeJavaStyleString ( out , out , false ) ; } Override
Code	{ escapeJavaStyleString ( out , out , false ) ; } Override
Distance : 5

91
Tree	{ escapeJavaStyleString ( out , out , false ) ; } f
Code	{ escapeJavaStyleString ( out , out , false ) ; } f
Distance : 5

92
Tree	{ escapeJavaStyleString ( out , out , false ) ; } ParamChecks
Code	{ escapeJavaStyleString ( out , out , false ) ; } ParamChecks
Distance : 5

93
Tree	{ escapeJavaStyleString ( out , out , false ) ; } mode
Code	{ escapeJavaStyleString ( out , out , false ) ; } mode
Distance : 5

94
Tree	{ escapeJavaStyleString ( out , out , false ) ; } {}
Code	{ escapeJavaStyleString ( out , out , false ) ; } {}
Distance : 5

95
Tree	{ escapeJavaStyleString ( out , out , false ) ; } MathRuntimeException
Code	{ escapeJavaStyleString ( out , out , false ) ; } MathRuntimeException
Distance : 5

96
Tree	{ escapeJavaStyleString ( out , out , false ) ; } x
Code	{ escapeJavaStyleString ( out , out , false ) ; } x
Distance : 5

97
Tree	{ escapeJavaStyleString ( out , out , false ) ; } testSame
Code	{ escapeJavaStyleString ( out , out , false ) ; } testSame
Distance : 5

98
Tree	{ escapeJavaStyleString ( out , out , false ) ; } parent
Code	{ escapeJavaStyleString ( out , out , false ) ; } parent
Distance : 5

99
Tree	{ escapeJavaStyleString ( out , out , false ) ; } createIllegalArgumentException
Code	{ escapeJavaStyleString ( out , out , false ) ; } createIllegalArgumentException
Distance : 5

========================================================================


========================================================================
Example Number: 40
Parent Code is: 
{ return escapeJavaStyleString ( str , true ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return escapeJavaStyleString ( str , true , true ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=str}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=str}) (234{val=,}) (9{val=true}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/46/parent/src_java_org_apache_commons_lang_StringEscapeUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ this . str = str ; super }
Code	{ this . str = str ; super }
Distance : 9

1
Tree	{ return MillisDuration . escapeJavaStyleString ( str ) ; }
Code	{ return MillisDuration . escapeJavaStyleString ( str ) ; }
Distance : 6

2
Tree	{ return FitnessFunction . escapeJavaStyleString ( str ) ; }
Code	{ return FitnessFunction . escapeJavaStyleString ( str ) ; }
Distance : 6

3
Tree	{ return work.length . escapeJavaStyleString ( str ) ; }
Code	{ return work.length . escapeJavaStyleString ( str ) ; }
Distance : 6

4
Tree	{ return addRetType . escapeJavaStyleString ( str ) ; }
Code	{ return addRetType . escapeJavaStyleString ( str ) ; }
Distance : 6

5
Tree	{ return FastDateParser . escapeJavaStyleString ( str ) ; }
Code	{ return FastDateParser . escapeJavaStyleString ( str ) ; }
Distance : 6

6
Tree	{ return setSeriesItemLabelsVisible . escapeJavaStyleString ( str ) ; }
Code	{ return setSeriesItemLabelsVisible . escapeJavaStyleString ( str ) ; }
Distance : 6

7
Tree	{ return parseObject . escapeJavaStyleString ( str ) ; }
Code	{ return parseObject . escapeJavaStyleString ( str ) ; }
Distance : 6

8
Tree	{ return helperExposeExpression . escapeJavaStyleString ( str ) ; }
Code	{ return helperExposeExpression . escapeJavaStyleString ( str ) ; }
Distance : 6

9
Tree	{ return resetMock . escapeJavaStyleString ( str ) ; }
Code	{ return resetMock . escapeJavaStyleString ( str ) ; }
Distance : 6

10
Tree	{ return vals . escapeJavaStyleString ( str ) ; }
Code	{ return vals . escapeJavaStyleString ( str ) ; }
Distance : 6

11
Tree	{ return getThrowableCount . escapeJavaStyleString ( str ) ; }
Code	{ return getThrowableCount . escapeJavaStyleString ( str ) ; }
Distance : 6

12
Tree	{ escapeJavaStyleString ( str ) ; continue; }
Code	{ escapeJavaStyleString ( str ) ; continue; }
Distance : 6

13
Tree	{ return smallestIndexOfDiff . escapeJavaStyleString ( str ) ; }
Code	{ return smallestIndexOfDiff . escapeJavaStyleString ( str ) ; }
Distance : 6

14
Tree	{ return ModifyType.ROUND . escapeJavaStyleString ( str ) ; }
Code	{ return ModifyType.ROUND . escapeJavaStyleString ( str ) ; }
Distance : 6

15
Tree	{ return GEOMETRIC_MEAN . escapeJavaStyleString ( str ) ; }
Code	{ return GEOMETRIC_MEAN . escapeJavaStyleString ( str ) ; }
Distance : 6

16
Tree	{ return dest.sumOfLogs . escapeJavaStyleString ( str ) ; }
Code	{ return dest.sumOfLogs . escapeJavaStyleString ( str ) ; }
Distance : 6

17
Tree	{ return someUnusedStubbingThatQualifiesForWarning . escapeJavaStyleString ( str ) ; }
Code	{ return someUnusedStubbingThatQualifiesForWarning . escapeJavaStyleString ( str ) ; }
Distance : 6

18
Tree	{ return indexOfDifference . escapeJavaStyleString ( str ) ; }
Code	{ return indexOfDifference . escapeJavaStyleString ( str ) ; }
Distance : 6

19
Tree	{ return getAccessibleConstructor . escapeJavaStyleString ( str ) ; }
Code	{ return getAccessibleConstructor . escapeJavaStyleString ( str ) ; }
Distance : 6

20
Tree	{ return escapeJavaStyleString ( str , false ) ; } throw
Code	{ return escapeJavaStyleString ( str , false ) ; } throw
Distance : 4

21
Tree	{ return escapeJavaStyleString ( str , false ) ; } catch
Code	{ return escapeJavaStyleString ( str , false ) ; } catch
Distance : 4

22
Tree	{ return escapeJavaStyleString ( str , false ) ; } +
Code	{ return escapeJavaStyleString ( str , false ) ; } +
Distance : 4

23
Tree	{ return escapeJavaStyleString ( str , str , str , str , null ) ; } fail
Code	{ return escapeJavaStyleString ( str , str , str , str , null ) ; } fail
Distance : 7

24
Tree	{ return getRight . escapeJavaStyleString ( str ) ; }
Code	{ return getRight . escapeJavaStyleString ( str ) ; }
Distance : 6

25
Tree	{ this . str = str ; if }
Code	{ this . str = str ; if }
Distance : 9

26
Tree	{ return initialize . escapeJavaStyleString ( str ) ; }
Code	{ return initialize . escapeJavaStyleString ( str ) ; }
Distance : 6

27
Tree	{ return Hibernate.DATE . escapeJavaStyleString ( str ) ; }
Code	{ return Hibernate.DATE . escapeJavaStyleString ( str ) ; }
Distance : 6

28
Tree	{ return tStart . escapeJavaStyleString ( str ) ; }
Code	{ return tStart . escapeJavaStyleString ( str ) ; }
Distance : 6

29
Tree	{ return Method.REGULA_FALSI . escapeJavaStyleString ( str ) ; }
Code	{ return Method.REGULA_FALSI . escapeJavaStyleString ( str ) ; }
Distance : 6

30
Tree	{ return stdDev . escapeJavaStyleString ( str ) ; }
Code	{ return stdDev . escapeJavaStyleString ( str ) ; }
Distance : 6

31
Tree	{ return regex . escapeJavaStyleString ( str ) ; }
Code	{ return regex . escapeJavaStyleString ( str ) ; }
Distance : 6

32
Tree	{ return thisBuf . escapeJavaStyleString ( str ) ; }
Code	{ return thisBuf . escapeJavaStyleString ( str ) ; }
Distance : 6

33
Tree	{ return appendDigits . escapeJavaStyleString ( str ) ; }
Code	{ return appendDigits . escapeJavaStyleString ( str ) ; }
Distance : 6

34
Tree	{ return fixUnitializedVarDeclarations . escapeJavaStyleString ( str ) ; }
Code	{ return fixUnitializedVarDeclarations . escapeJavaStyleString ( str ) ; }
Distance : 6

35
Tree	{ return internalArray.length . escapeJavaStyleString ( str ) ; }
Code	{ return internalArray.length . escapeJavaStyleString ( str ) ; }
Distance : 6

36
Tree	{ return StrSubstitutor . escapeJavaStyleString ( str ) ; }
Code	{ return StrSubstitutor . escapeJavaStyleString ( str ) ; }
Distance : 6

37
Tree	{ escapeJavaStyleString ( str ) ; enableTypeCheck }
Code	{ escapeJavaStyleString ( str ) ; enableTypeCheck }
Distance : 6

38
Tree	{ escapeJavaStyleString ( str ) ; ++ }
Code	{ escapeJavaStyleString ( str ) ; ++ }
Distance : 6

39
Tree	{ return padChar . escapeJavaStyleString ( str ) ; }
Code	{ return padChar . escapeJavaStyleString ( str ) ; }
Distance : 6

40
Tree	{ escapeJavaStyleString ( str ) ; try }
Code	{ escapeJavaStyleString ( str ) ; try }
Distance : 6

41
Tree	{ return checkTokenized . escapeJavaStyleString ( str ) ; }
Code	{ return checkTokenized . escapeJavaStyleString ( str ) ; }
Distance : 6

42
Tree	{ escapeJavaStyleString ( str ) ; for }
Code	{ escapeJavaStyleString ( str ) ; for }
Distance : 6

43
Tree	{ return getLInfDistance . escapeJavaStyleString ( str ) ; }
Code	{ return getLInfDistance . escapeJavaStyleString ( str ) ; }
Distance : 6

44
Tree	{ return StandardBasicTypes.TIME . escapeJavaStyleString ( str ) ; }
Code	{ return StandardBasicTypes.TIME . escapeJavaStyleString ( str ) ; }
Distance : 6

45
Tree	{ return cacheEntry.input . escapeJavaStyleString ( str ) ; }
Code	{ return cacheEntry.input . escapeJavaStyleString ( str ) ; }
Distance : 6

46
Tree	{ return ebeMultiply . escapeJavaStyleString ( str ) ; }
Code	{ return ebeMultiply . escapeJavaStyleString ( str ) ; }
Distance : 6

47
Tree	{ return Mockito.mockitoState . escapeJavaStyleString ( str ) ; }
Code	{ return Mockito.mockitoState . escapeJavaStyleString ( str ) ; }
Distance : 6

48
Tree	{ return Pair . escapeJavaStyleString ( str ) ; }
Code	{ return Pair . escapeJavaStyleString ( str ) ; }
Distance : 6

49
Tree	{ return com.google.protobuf.GeneratedMessageV3 . escapeJavaStyleString ( str ) ; }
Code	{ return com.google.protobuf.GeneratedMessageV3 . escapeJavaStyleString ( str ) ; }
Distance : 6

50
Tree	{ return bool . escapeJavaStyleString ( str ) ; }
Code	{ return bool . escapeJavaStyleString ( str ) ; }
Distance : 6

51
Tree	{ return pads . escapeJavaStyleString ( str ) ; }
Code	{ return pads . escapeJavaStyleString ( str ) ; }
Distance : 6

52
Tree	{ return splitByWholeSeparatorWorker . escapeJavaStyleString ( str ) ; }
Code	{ return splitByWholeSeparatorWorker . escapeJavaStyleString ( str ) ; }
Distance : 6

53
Tree	{ return validIndex . escapeJavaStyleString ( str ) ; }
Code	{ return validIndex . escapeJavaStyleString ( str ) ; }
Distance : 6

54
Tree	{ return computeCorrelationMatrix . escapeJavaStyleString ( str ) ; }
Code	{ return computeCorrelationMatrix . escapeJavaStyleString ( str ) ; }
Distance : 6

55
Tree	{ return MillisDurationField.INSTANCE . escapeJavaStyleString ( str ) ; }
Code	{ return MillisDurationField.INSTANCE . escapeJavaStyleString ( str ) ; }
Distance : 6

56
Tree	{ return strLen . escapeJavaStyleString ( str ) ; }
Code	{ return strLen . escapeJavaStyleString ( str ) ; }
Distance : 6

57
Tree	{ return INSTRUMENTATION . escapeJavaStyleString ( str ) ; }
Code	{ return INSTRUMENTATION . escapeJavaStyleString ( str ) ; }
Distance : 6

58
Tree	{ escapeJavaStyleString ( str ) ; break; }
Code	{ escapeJavaStyleString ( str ) ; break; }
Distance : 6

59
Tree	{ return isTheObjectType . escapeJavaStyleString ( str ) ; }
Code	{ return isTheObjectType . escapeJavaStyleString ( str ) ; }
Distance : 6

60
Tree	{ return divide . escapeJavaStyleString ( str ) ; }
Code	{ return divide . escapeJavaStyleString ( str ) ; }
Distance : 6

61
Tree	{ return parseDouble . escapeJavaStyleString ( str ) ; }
Code	{ return parseDouble . escapeJavaStyleString ( str ) ; }
Distance : 6

62
Tree	{ return actualbyName . escapeJavaStyleString ( str ) ; }
Code	{ return actualbyName . escapeJavaStyleString ( str ) ; }
Distance : 6

63
Tree	{ return Locale.ENGLISH . escapeJavaStyleString ( str ) ; }
Code	{ return Locale.ENGLISH . escapeJavaStyleString ( str ) ; }
Distance : 6

64
Tree	{ escapeJavaStyleString ( str ) ; disableTypeCheck }
Code	{ escapeJavaStyleString ( str ) ; disableTypeCheck }
Distance : 6

65
Tree	{ return escapeJavaStyleString ( str , false ) ; } :
Code	{ return escapeJavaStyleString ( str , false ) ; } :
Distance : 4

66
Tree	{ return Boolean . escapeJavaStyleString ( str ) ; }
Code	{ return Boolean . escapeJavaStyleString ( str ) ; }
Distance : 6

67
Tree	{ return LutherFieldStepInterpolator . escapeJavaStyleString ( str ) ; }
Code	{ return LutherFieldStepInterpolator . escapeJavaStyleString ( str ) ; }
Distance : 6

68
Tree	{ return substring . escapeJavaStyleString ( str ) ; }
Code	{ return substring . escapeJavaStyleString ( str ) ; }
Distance : 6

69
Tree	{ return Format.PRETTY . escapeJavaStyleString ( str ) ; }
Code	{ return Format.PRETTY . escapeJavaStyleString ( str ) ; }
Distance : 6

70
Tree	{ return subtract . escapeJavaStyleString ( str ) ; }
Code	{ return subtract . escapeJavaStyleString ( str ) ; }
Distance : 6

71
Tree	{ return Format.TYPED . escapeJavaStyleString ( str ) ; }
Code	{ return Format.TYPED . escapeJavaStyleString ( str ) ; }
Distance : 6

72
Tree	{ escapeJavaStyleString ( str ) ; checkArgument }
Code	{ escapeJavaStyleString ( str ) ; checkArgument }
Distance : 6

73
Tree	{ escapeJavaStyleString ( str ) ; += }
Code	{ escapeJavaStyleString ( str ) ; += }
Distance : 6

74
Tree	{ return defaultString . escapeJavaStyleString ( str ) ; }
Code	{ return defaultString . escapeJavaStyleString ( str ) ; }
Distance : 6

75
Tree	{ return escapeJavaStyleString ( str , false ) ; } expected
Code	{ return escapeJavaStyleString ( str , false ) ; } expected
Distance : 4

76
Tree	{ return escapeJavaStyleString ( str , false ) ; } reportCodeChange
Code	{ return escapeJavaStyleString ( str , false ) ; } reportCodeChange
Distance : 4

77
Tree	{ return escapeJavaStyleString ( str , false ) ; } invocation
Code	{ return escapeJavaStyleString ( str , false ) ; } invocation
Distance : 4

78
Tree	{ super . escapeJavaStyleString ( str ) ; return null ; } ()
Code	{ super . escapeJavaStyleString ( str ) ; return null ; } ()
Distance : 8

79
Tree	{ return escapeJavaStyleString ( str , false ) ; } nullNotPermitted
Code	{ return escapeJavaStyleString ( str , false ) ; } nullNotPermitted
Distance : 4

80
Tree	{ return escapeJavaStyleString ( str , false ) ; } checkState
Code	{ return escapeJavaStyleString ( str , false ) ; } checkState
Distance : 4

81
Tree	{ return escapeJavaStyleString ( str , false ) ; } double
Code	{ return escapeJavaStyleString ( str , false ) ; } double
Distance : 4

82
Tree	{ return escapeJavaStyleString ( str , false ) ; } int
Code	{ return escapeJavaStyleString ( str , false ) ; } int
Distance : 4

83
Tree	{ return escapeJavaStyleString ( str , false ) ; } false
Code	{ return escapeJavaStyleString ( str , false ) ; } false
Distance : 4

84
Tree	{ return escapeJavaStyleString ( str , false ) ; } type
Code	{ return escapeJavaStyleString ( str , false ) ; } type
Distance : 4

85
Tree	{ return escapeJavaStyleString ( str , false ) ; } mock
Code	{ return escapeJavaStyleString ( str , false ) ; } mock
Distance : 4

86
Tree	{ return escapeJavaStyleString ( str , false ) ; } [
Code	{ return escapeJavaStyleString ( str , false ) ; } [
Distance : 4

87
Tree	{ return escapeJavaStyleString ( str , false ) ; } ]
Code	{ return escapeJavaStyleString ( str , false ) ; } ]
Distance : 4

88
Tree	{ return escapeJavaStyleString ( str , false ) ; } &&
Code	{ return escapeJavaStyleString ( str , false ) ; } &&
Distance : 4

89
Tree	{ return escapeJavaStyleString ( str , false ) ; } T
Code	{ return escapeJavaStyleString ( str , false ) ; } T
Distance : 4

90
Tree	{ return escapeJavaStyleString ( str , false ) ; } Preconditions
Code	{ return escapeJavaStyleString ( str , false ) ; } Preconditions
Distance : 4

91
Tree	{ return escapeJavaStyleString ( str , false ) ; } -
Code	{ return escapeJavaStyleString ( str , false ) ; } -
Distance : 4

92
Tree	{ return escapeJavaStyleString ( str , false ) ; } class
Code	{ return escapeJavaStyleString ( str , false ) ; } class
Distance : 4

93
Tree	{ return escapeJavaStyleString ( str , false ) ; } []
Code	{ return escapeJavaStyleString ( str , false ) ; } []
Distance : 4

94
Tree	{ return escapeJavaStyleString ( str , false ) ; } ==
Code	{ return escapeJavaStyleString ( str , false ) ; } ==
Distance : 4

95
Tree	{ return escapeJavaStyleString ( str , false ) ; } assertEquals
Code	{ return escapeJavaStyleString ( str , false ) ; } assertEquals
Distance : 4

96
Tree	{ return escapeJavaStyleString ( str , false ) ; } !
Code	{ return escapeJavaStyleString ( str , false ) ; } !
Distance : 4

97
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } compiler
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } compiler
Distance : 8

98
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } String
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } String
Distance : 8

99
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } null
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } null
Distance : 8

========================================================================


========================================================================
Example Number: 41
Parent Code is: 
{ escapeJavaStyleString ( out , str , false ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ escapeJavaStyleString ( out , str , false , false ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=out}) (234{val=,}) (800{val=str}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=out}) (234{val=,}) (800{val=str}) (234{val=,}) (9{val=false}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/46/parent/src_java_org_apache_commons_lang_StringEscapeUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ str . escapeJavaStyleString ( str ) ; } class
Code	{ str . escapeJavaStyleString ( str ) ; } class
Distance : 9

1
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } [
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } [
Distance : 10

2
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } Preconditions
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } Preconditions
Distance : 10

3
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } -
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } -
Distance : 10

4
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } mode
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } mode
Distance : 10

5
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } true
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } true
Distance : 10

6
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } {}
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } {}
Distance : 10

7
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } MathRuntimeException
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } MathRuntimeException
Distance : 10

8
Tree	{ str . escapeJavaStyleString ( str ) ; } ,
Code	{ str . escapeJavaStyleString ( str ) ; } ,
Distance : 9

9
Tree	{ str . escapeJavaStyleString ( str ) ; } name
Code	{ str . escapeJavaStyleString ( str ) ; } name
Distance : 9

10
Tree	{ str . escapeJavaStyleString ( str ) ; } null
Code	{ str . escapeJavaStyleString ( str ) ; } null
Distance : 9

11
Tree	{ escapeJavaStyleString ( out , out ) ; } -
Code	{ escapeJavaStyleString ( out , out ) ; } -
Distance : 6

12
Tree	{ escapeJavaStyleString ( out , out , false ) ; } FastMath
Code	{ escapeJavaStyleString ( out , out , false ) ; } FastMath
Distance : 4

13
Tree	{ escapeJavaStyleString ( out , out , false ) ; } expected
Code	{ escapeJavaStyleString ( out , out , false ) ; } expected
Distance : 4

14
Tree	{ escapeJavaStyleString ( out , out , false ) ; } reportCodeChange
Code	{ escapeJavaStyleString ( out , out , false ) ; } reportCodeChange
Distance : 4

15
Tree	{ escapeJavaStyleString ( out , out , false ) ; } List
Code	{ escapeJavaStyleString ( out , out , false ) ; } List
Distance : 4

16
Tree	{ escapeJavaStyleString ( out , out , false ) ; } Args
Code	{ escapeJavaStyleString ( out , out , false ) ; } Args
Distance : 4

17
Tree	{ escapeJavaStyleString ( out , out , false ) ; } fail
Code	{ escapeJavaStyleString ( out , out , false ) ; } fail
Distance : 4

18
Tree	{ escapeJavaStyleString ( out , out , false ) ; } try
Code	{ escapeJavaStyleString ( out , out , false ) ; } try
Distance : 4

19
Tree	{ escapeJavaStyleString ( out , out , false ) ; } ArrayList
Code	{ escapeJavaStyleString ( out , out , false ) ; } ArrayList
Distance : 4

20
Tree	{ escapeJavaStyleString ( out , out , false ) ; } fireChangeEvent
Code	{ escapeJavaStyleString ( out , out , false ) ; } fireChangeEvent
Distance : 4

21
Tree	{ escapeJavaStyleString ( out , out , false ) ; } getInstance
Code	{ escapeJavaStyleString ( out , out , false ) ; } getInstance
Distance : 4

22
Tree	{ escapeJavaStyleString ( out , out , false ) ; } serialised
Code	{ escapeJavaStyleString ( out , out , false ) ; } serialised
Distance : 4

23
Tree	{ escapeJavaStyleString ( out , out , false ) ; } join
Code	{ escapeJavaStyleString ( out , out , false ) ; } join
Distance : 4

24
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } ]
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } ]
Distance : 10

25
Tree	{ escapeJavaStyleString ( out , out , false ) ; } paint
Code	{ escapeJavaStyleString ( out , out , false ) ; } paint
Distance : 4

26
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } ==
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } ==
Distance : 10

27
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } catch
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } catch
Distance : 10

28
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } LINE_JOINER
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } LINE_JOINER
Distance : 10

29
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } assertThat
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } assertThat
Distance : 10

30
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } invocation
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } invocation
Distance : 10

31
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } false
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } false
Distance : 10

32
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } int
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } int
Distance : 10

33
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } @
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } @
Distance : 10

34
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } nullNotPermitted
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } nullNotPermitted
Distance : 10

35
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } compiler
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } compiler
Distance : 10

36
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } []
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } []
Distance : 10

37
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } !
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } !
Distance : 10

38
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } assertEquals
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } assertEquals
Distance : 10

39
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } +
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } +
Distance : 10

40
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } null
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } null
Distance : 10

41
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } >
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } >
Distance : 10

42
Tree	{ escapeJavaStyleString ( out , out , out ) ; } Override
Code	{ escapeJavaStyleString ( out , out , out ) ; } Override
Distance : 5

43
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } createIllegalArgumentException
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } createIllegalArgumentException
Distance : 10

44
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } parent
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } parent
Distance : 10

45
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } testSame
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } testSame
Distance : 10

46
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } x
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } x
Distance : 10

47
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } String
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } String
Distance : 10

48
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } e
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } e
Distance : 10

49
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } n
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } n
Distance : 10

50
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } throw
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } throw
Distance : 10

51
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } void
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } void
Distance : 10

52
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } str
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; } str
Distance : 10

53
Tree	{ escapeJavaStyleString ( out , out , false ) ; } *
Code	{ escapeJavaStyleString ( out , out , false ) ; } *
Distance : 4

54
Tree	{ escapeJavaStyleString ( out , out , false ) ; } class
Code	{ escapeJavaStyleString ( out , out , false ) ; } class
Distance : 4

55
Tree	{ escapeJavaStyleString ( out , out , false ) ; } invocation
Code	{ escapeJavaStyleString ( out , out , false ) ; } invocation
Distance : 4

56
Tree	{ escapeJavaStyleString ( out , out , false ) ; } false
Code	{ escapeJavaStyleString ( out , out , false ) ; } false
Distance : 4

57
Tree	{ escapeJavaStyleString ( out , out , false ) ; } int
Code	{ escapeJavaStyleString ( out , out , false ) ; } int
Distance : 4

58
Tree	{ escapeJavaStyleString ( out , out , false ) ; } @
Code	{ escapeJavaStyleString ( out , out , false ) ; } @
Distance : 4

59
Tree	{ escapeJavaStyleString ( out , out , false ) ; } test
Code	{ escapeJavaStyleString ( out , out , false ) ; } test
Distance : 4

60
Tree	{ escapeJavaStyleString ( out , out , false ) ; } nullNotPermitted
Code	{ escapeJavaStyleString ( out , out , false ) ; } nullNotPermitted
Distance : 4

61
Tree	{ escapeJavaStyleString ( out , out , false ) ; } []
Code	{ escapeJavaStyleString ( out , out , false ) ; } []
Distance : 4

62
Tree	{ escapeJavaStyleString ( out , out , false ) ; } !
Code	{ escapeJavaStyleString ( out , out , false ) ; } !
Distance : 4

63
Tree	{ escapeJavaStyleString ( out , out , false ) ; } assertEquals
Code	{ escapeJavaStyleString ( out , out , false ) ; } assertEquals
Distance : 4

64
Tree	{ escapeJavaStyleString ( out , out , false ) ; } +
Code	{ escapeJavaStyleString ( out , out , false ) ; } +
Distance : 4

65
Tree	{ escapeJavaStyleString ( out , out , false ) ; } true
Code	{ escapeJavaStyleString ( out , out , false ) ; } true
Distance : 4

66
Tree	{ escapeJavaStyleString ( out , out , false ) ; } mode
Code	{ escapeJavaStyleString ( out , out , false ) ; } mode
Distance : 4

67
Tree	{ escapeJavaStyleString ( out , out , false ) ; } -
Code	{ escapeJavaStyleString ( out , out , false ) ; } -
Distance : 4

68
Tree	{ escapeJavaStyleString ( out , out , false ) ; } compiler
Code	{ escapeJavaStyleString ( out , out , false ) ; } compiler
Distance : 4

69
Tree	{ escapeJavaStyleString ( out , out , false ) ; } m
Code	{ escapeJavaStyleString ( out , out , false ) ; } m
Distance : 4

70
Tree	{ escapeJavaStyleString ( out , out , false ) ; } boolean
Code	{ escapeJavaStyleString ( out , out , false ) ; } boolean
Distance : 4

71
Tree	{ escapeJavaStyleString ( out , out , false ) ; } :
Code	{ escapeJavaStyleString ( out , out , false ) ; } :
Distance : 4

72
Tree	{ escapeJavaStyleString ( out , out , false ) ; } result
Code	{ escapeJavaStyleString ( out , out , false ) ; } result
Distance : 4

73
Tree	{ escapeJavaStyleString ( out , out , false ) ; } checkState
Code	{ escapeJavaStyleString ( out , out , false ) ; } checkState
Distance : 4

74
Tree	{ escapeJavaStyleString ( out , out , false ) ; } double
Code	{ escapeJavaStyleString ( out , out , false ) ; } double
Distance : 4

75
Tree	{ escapeJavaStyleString ( out , out , false ) ; } super
Code	{ escapeJavaStyleString ( out , out , false ) ; } super
Distance : 4

76
Tree	{ escapeJavaStyleString ( out , out , false ) ; } !=
Code	{ escapeJavaStyleString ( out , out , false ) ; } !=
Distance : 4

77
Tree	{ escapeJavaStyleString ( out , out , false ) ; } String
Code	{ escapeJavaStyleString ( out , out , false ) ; } String
Distance : 4

78
Tree	{ escapeJavaStyleString ( out , out , false ) ; } assertThat
Code	{ escapeJavaStyleString ( out , out , false ) ; } assertThat
Distance : 4

79
Tree	{ escapeJavaStyleString ( out , out , false ) ; } type
Code	{ escapeJavaStyleString ( out , out , false ) ; } type
Distance : 4

80
Tree	{ escapeJavaStyleString ( out , out , false ) ; } LINE_JOINER
Code	{ escapeJavaStyleString ( out , out , false ) ; } LINE_JOINER
Distance : 4

81
Tree	{ escapeJavaStyleString ( out , out , false ) ; } createIllegalArgumentException
Code	{ escapeJavaStyleString ( out , out , false ) ; } createIllegalArgumentException
Distance : 4

82
Tree	{ escapeJavaStyleString ( out , out , false ) ; } Object
Code	{ escapeJavaStyleString ( out , out , false ) ; } Object
Distance : 4

83
Tree	{ escapeJavaStyleString ( out , out ) ; } (
Code	{ escapeJavaStyleString ( out , out ) ; } (
Distance : 6

84
Tree	{ escapeJavaStyleString ( out , out ) ; } <s>
Code	{ escapeJavaStyleString ( out , out ) ; } <s>
Distance : 6

85
Tree	{ escapeJavaStyleString ( out , out ) ; } escapeJavaStyleString
Code	{ escapeJavaStyleString ( out , out ) ; } escapeJavaStyleString
Distance : 6

86
Tree	{ escapeJavaStyleString ( out , out ) ; } <blank>
Code	{ escapeJavaStyleString ( out , out ) ; } <blank>
Distance : 6

87
Tree	{ escapeJavaStyleString ( out , out ) ; } {
Code	{ escapeJavaStyleString ( out , out ) ; } {
Distance : 6

88
Tree	{ escapeJavaStyleString ( out , out ) ; } ()
Code	{ escapeJavaStyleString ( out , out ) ; } ()
Distance : 6

89
Tree	{ escapeJavaStyleString ( out , out ) ; } }
Code	{ escapeJavaStyleString ( out , out ) ; } }
Distance : 6

90
Tree	{ escapeJavaStyleString ( out , out ) ; } =
Code	{ escapeJavaStyleString ( out , out ) ; } =
Distance : 6

91
Tree	{ escapeJavaStyleString ( out , out ) ; } final
Code	{ escapeJavaStyleString ( out , out ) ; } final
Distance : 6

92
Tree	{ escapeJavaStyleString ( out , out ) ; } this
Code	{ escapeJavaStyleString ( out , out ) ; } this
Distance : 6

93
Tree	{ escapeJavaStyleString ( out , out ) ; } <
Code	{ escapeJavaStyleString ( out , out ) ; } <
Distance : 6

94
Tree	{ escapeJavaStyleString ( out , out ) ; } if
Code	{ escapeJavaStyleString ( out , out ) ; } if
Distance : 6

95
Tree	{ escapeJavaStyleString ( out , out ) ; } ]
Code	{ escapeJavaStyleString ( out , out ) ; } ]
Distance : 6

96
Tree	{ escapeJavaStyleString ( out , out , false ) ; } f
Code	{ escapeJavaStyleString ( out , out , false ) ; } f
Distance : 4

97
Tree	{ escapeJavaStyleString ( out , out , false ) ; } ParamChecks
Code	{ escapeJavaStyleString ( out , out , false ) ; } ParamChecks
Distance : 4

98
Tree	{ escapeJavaStyleString ( out , out , false ) ; } array
Code	{ escapeJavaStyleString ( out , out , false ) ; } array
Distance : 4

99
Tree	{ escapeJavaStyleString ( out , out , false ) ; } <>
Code	{ escapeJavaStyleString ( out , out , false ) ; } <>
Distance : 4

========================================================================


========================================================================
Example Number: 42
Parent Code is: 
{ return escapeJavaStyleString ( str , false ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return escapeJavaStyleString ( str , false , false ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=str}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=str}) (234{val=,}) (9{val=false}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/46/parent/src_java_org_apache_commons_lang_StringEscapeUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ this . str = str ; super }
Code	{ this . str = str ; super }
Distance : 9

1
Tree	{ return helperExposeExpression . escapeJavaStyleString ( str ) ; }
Code	{ return helperExposeExpression . escapeJavaStyleString ( str ) ; }
Distance : 6

2
Tree	{ return resetMock . escapeJavaStyleString ( str ) ; }
Code	{ return resetMock . escapeJavaStyleString ( str ) ; }
Distance : 6

3
Tree	{ return vals . escapeJavaStyleString ( str ) ; }
Code	{ return vals . escapeJavaStyleString ( str ) ; }
Distance : 6

4
Tree	{ escapeJavaStyleString ( str ) ; continue; }
Code	{ escapeJavaStyleString ( str ) ; continue; }
Distance : 6

5
Tree	{ return FastDateParser . escapeJavaStyleString ( str ) ; }
Code	{ return FastDateParser . escapeJavaStyleString ( str ) ; }
Distance : 6

6
Tree	{ return someUnusedStubbingThatQualifiesForWarning . escapeJavaStyleString ( str ) ; }
Code	{ return someUnusedStubbingThatQualifiesForWarning . escapeJavaStyleString ( str ) ; }
Distance : 6

7
Tree	{ return super . escapeJavaStyleString ( str , str , str , new false ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new false ( str ) ) ; }
Distance : 9

8
Tree	{ return getThrowableCount . escapeJavaStyleString ( str ) ; }
Code	{ return getThrowableCount . escapeJavaStyleString ( str ) ; }
Distance : 6

9
Tree	{ this ( str , str , str , continue; ) ; }
Code	{ this ( str , str , str , continue; ) ; }
Distance : 6

10
Tree	{ return smallestIndexOfDiff . escapeJavaStyleString ( str ) ; }
Code	{ return smallestIndexOfDiff . escapeJavaStyleString ( str ) ; }
Distance : 6

11
Tree	{ return isTheObjectType . escapeJavaStyleString ( str ) ; }
Code	{ return isTheObjectType . escapeJavaStyleString ( str ) ; }
Distance : 6

12
Tree	{ return StrSubstitutor . escapeJavaStyleString ( str ) ; }
Code	{ return StrSubstitutor . escapeJavaStyleString ( str ) ; }
Distance : 6

13
Tree	{ escapeJavaStyleString ( str ) ; += }
Code	{ escapeJavaStyleString ( str ) ; += }
Distance : 6

14
Tree	{ escapeJavaStyleString ( str ) ; try }
Code	{ escapeJavaStyleString ( str ) ; try }
Distance : 6

15
Tree	{ return Locale.ENGLISH . escapeJavaStyleString ( str ) ; }
Code	{ return Locale.ENGLISH . escapeJavaStyleString ( str ) ; }
Distance : 6

16
Tree	{ return setSeriesItemLabelsVisible . escapeJavaStyleString ( str ) ; }
Code	{ return setSeriesItemLabelsVisible . escapeJavaStyleString ( str ) ; }
Distance : 6

17
Tree	{ return LocalizedFormats.OVERFLOW_IN_ADDITION . escapeJavaStyleString ( str ) ; }
Code	{ return LocalizedFormats.OVERFLOW_IN_ADDITION . escapeJavaStyleString ( str ) ; }
Distance : 6

18
Tree	{ return MillisDuration . escapeJavaStyleString ( str ) ; }
Code	{ return MillisDuration . escapeJavaStyleString ( str ) ; }
Distance : 6

19
Tree	{ return super . escapeJavaStyleString ( str , str , str , new FunctionEvaluationException ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new FunctionEvaluationException ( str ) ) ; }
Distance : 10

20
Tree	{ return chars . escapeJavaStyleString ( str ) ; }
Code	{ return chars . escapeJavaStyleString ( str ) ; }
Distance : 6

21
Tree	{ return stdDev . escapeJavaStyleString ( str ) ; }
Code	{ return stdDev . escapeJavaStyleString ( str ) ; }
Distance : 6

22
Tree	{ return initialize . escapeJavaStyleString ( str ) ; }
Code	{ return initialize . escapeJavaStyleString ( str ) ; }
Distance : 6

23
Tree	{ return getAccessibleConstructor . escapeJavaStyleString ( str ) ; }
Code	{ return getAccessibleConstructor . escapeJavaStyleString ( str ) ; }
Distance : 6

24
Tree	{ return thisBuf . escapeJavaStyleString ( str ) ; }
Code	{ return thisBuf . escapeJavaStyleString ( str ) ; }
Distance : 6

25
Tree	{ return internalArray.length . escapeJavaStyleString ( str ) ; }
Code	{ return internalArray.length . escapeJavaStyleString ( str ) ; }
Distance : 6

26
Tree	{ return appendDigits . escapeJavaStyleString ( str ) ; }
Code	{ return appendDigits . escapeJavaStyleString ( str ) ; }
Distance : 6

27
Tree	{ return rawArguments . escapeJavaStyleString ( str ) ; }
Code	{ return rawArguments . escapeJavaStyleString ( str ) ; }
Distance : 6

28
Tree	{ return regex . escapeJavaStyleString ( str ) ; }
Code	{ return regex . escapeJavaStyleString ( str ) ; }
Distance : 6

29
Tree	{ return dest.sumOfLogs . escapeJavaStyleString ( str ) ; }
Code	{ return dest.sumOfLogs . escapeJavaStyleString ( str ) ; }
Distance : 6

30
Tree	{ return fixUnitializedVarDeclarations . escapeJavaStyleString ( str ) ; }
Code	{ return fixUnitializedVarDeclarations . escapeJavaStyleString ( str ) ; }
Distance : 6

31
Tree	{ return work.length . escapeJavaStyleString ( str ) ; }
Code	{ return work.length . escapeJavaStyleString ( str ) ; }
Distance : 6

32
Tree	{ return addRetType . escapeJavaStyleString ( str ) ; }
Code	{ return addRetType . escapeJavaStyleString ( str ) ; }
Distance : 6

33
Tree	{ return FitnessFunction . escapeJavaStyleString ( str ) ; }
Code	{ return FitnessFunction . escapeJavaStyleString ( str ) ; }
Distance : 6

34
Tree	{ return indexOfDifference . escapeJavaStyleString ( str ) ; }
Code	{ return indexOfDifference . escapeJavaStyleString ( str ) ; }
Distance : 6

35
Tree	{ return parseObject . escapeJavaStyleString ( str ) ; }
Code	{ return parseObject . escapeJavaStyleString ( str ) ; }
Distance : 6

36
Tree	{ escapeJavaStyleString ( str ) ; disableTypeCheck }
Code	{ escapeJavaStyleString ( str ) ; disableTypeCheck }
Distance : 6

37
Tree	{ return ModifyType.ROUND . escapeJavaStyleString ( str ) ; }
Code	{ return ModifyType.ROUND . escapeJavaStyleString ( str ) ; }
Distance : 6

38
Tree	{ escapeJavaStyleString ( str ) ; for }
Code	{ escapeJavaStyleString ( str ) ; for }
Distance : 6

39
Tree	{ return Mockito.mockitoState . escapeJavaStyleString ( str ) ; }
Code	{ return Mockito.mockitoState . escapeJavaStyleString ( str ) ; }
Distance : 6

40
Tree	{ return cacheEntry.input . escapeJavaStyleString ( str ) ; }
Code	{ return cacheEntry.input . escapeJavaStyleString ( str ) ; }
Distance : 6

41
Tree	{ return com.google.protobuf.GeneratedMessageV3 . escapeJavaStyleString ( str ) ; }
Code	{ return com.google.protobuf.GeneratedMessageV3 . escapeJavaStyleString ( str ) ; }
Distance : 6

42
Tree	{ return strLen . escapeJavaStyleString ( str ) ; }
Code	{ return strLen . escapeJavaStyleString ( str ) ; }
Distance : 6

43
Tree	{ return getLInfDistance . escapeJavaStyleString ( str ) ; }
Code	{ return getLInfDistance . escapeJavaStyleString ( str ) ; }
Distance : 6

44
Tree	{ return splitByWholeSeparatorWorker . escapeJavaStyleString ( str ) ; }
Code	{ return splitByWholeSeparatorWorker . escapeJavaStyleString ( str ) ; }
Distance : 6

45
Tree	{ return ebeMultiply . escapeJavaStyleString ( str ) ; }
Code	{ return ebeMultiply . escapeJavaStyleString ( str ) ; }
Distance : 6

46
Tree	{ return StandardBasicTypes.TIME . escapeJavaStyleString ( str ) ; }
Code	{ return StandardBasicTypes.TIME . escapeJavaStyleString ( str ) ; }
Distance : 6

47
Tree	{ return Pair . escapeJavaStyleString ( str ) ; }
Code	{ return Pair . escapeJavaStyleString ( str ) ; }
Distance : 6

48
Tree	{ return validIndex . escapeJavaStyleString ( str ) ; }
Code	{ return validIndex . escapeJavaStyleString ( str ) ; }
Distance : 6

49
Tree	{ return source.sumOfLogs . escapeJavaStyleString ( str ) ; }
Code	{ return source.sumOfLogs . escapeJavaStyleString ( str ) ; }
Distance : 6

50
Tree	{ return bool . escapeJavaStyleString ( str ) ; }
Code	{ return bool . escapeJavaStyleString ( str ) ; }
Distance : 6

51
Tree	{ return entry.map . escapeJavaStyleString ( str ) ; }
Code	{ return entry.map . escapeJavaStyleString ( str ) ; }
Distance : 6

52
Tree	{ return centered . escapeJavaStyleString ( str ) ; }
Code	{ return centered . escapeJavaStyleString ( str ) ; }
Distance : 6

53
Tree	{ return padChar . escapeJavaStyleString ( str ) ; }
Code	{ return padChar . escapeJavaStyleString ( str ) ; }
Distance : 6

54
Tree	{ return computeCorrelationMatrix . escapeJavaStyleString ( str ) ; }
Code	{ return computeCorrelationMatrix . escapeJavaStyleString ( str ) ; }
Distance : 6

55
Tree	{ return checkTokenized . escapeJavaStyleString ( str ) ; }
Code	{ return checkTokenized . escapeJavaStyleString ( str ) ; }
Distance : 6

56
Tree	{ escapeJavaStyleString ( str ) ; checkArgument }
Code	{ escapeJavaStyleString ( str ) ; checkArgument }
Distance : 6

57
Tree	{ escapeJavaStyleString ( str ) ; break; }
Code	{ escapeJavaStyleString ( str ) ; break; }
Distance : 6

58
Tree	{ return parseDouble . escapeJavaStyleString ( str ) ; }
Code	{ return parseDouble . escapeJavaStyleString ( str ) ; }
Distance : 6

59
Tree	{ escapeJavaStyleString ( str ) ; ++ }
Code	{ escapeJavaStyleString ( str ) ; ++ }
Distance : 6

60
Tree	{ escapeJavaStyleString ( str ) ; false }
Code	{ escapeJavaStyleString ( str ) ; false }
Distance : 6

61
Tree	{ return defaultString . escapeJavaStyleString ( str ) ; }
Code	{ return defaultString . escapeJavaStyleString ( str ) ; }
Distance : 6

62
Tree	{ return Format.PRETTY . escapeJavaStyleString ( str ) ; }
Code	{ return Format.PRETTY . escapeJavaStyleString ( str ) ; }
Distance : 6

63
Tree	{ return INSTRUMENTATION . escapeJavaStyleString ( str ) ; }
Code	{ return INSTRUMENTATION . escapeJavaStyleString ( str ) ; }
Distance : 6

64
Tree	{ escapeJavaStyleString ( str ) ; enableTypeCheck }
Code	{ escapeJavaStyleString ( str ) ; enableTypeCheck }
Distance : 6

65
Tree	{ return tStart . escapeJavaStyleString ( str ) ; }
Code	{ return tStart . escapeJavaStyleString ( str ) ; }
Distance : 6

66
Tree	{ return LutherFieldStepInterpolator . escapeJavaStyleString ( str ) ; }
Code	{ return LutherFieldStepInterpolator . escapeJavaStyleString ( str ) ; }
Distance : 6

67
Tree	{ return MillisDurationField.INSTANCE . escapeJavaStyleString ( str ) ; }
Code	{ return MillisDurationField.INSTANCE . escapeJavaStyleString ( str ) ; }
Distance : 6

68
Tree	{ return str . escapeJavaStyleString ( str , null , null ) ; }
Code	{ return str . escapeJavaStyleString ( str , null , null ) ; }
Distance : 4

69
Tree	{ return substring . escapeJavaStyleString ( str ) ; }
Code	{ return substring . escapeJavaStyleString ( str ) ; }
Distance : 6

70
Tree	{ return actualbyName . escapeJavaStyleString ( str ) ; }
Code	{ return actualbyName . escapeJavaStyleString ( str ) ; }
Distance : 6

71
Tree	{ return Format.TYPED . escapeJavaStyleString ( str ) ; }
Code	{ return Format.TYPED . escapeJavaStyleString ( str ) ; }
Distance : 6

72
Tree	{ return Boolean . escapeJavaStyleString ( str ) ; }
Code	{ return Boolean . escapeJavaStyleString ( str ) ; }
Distance : 6

73
Tree	{ return subtract . escapeJavaStyleString ( str ) ; }
Code	{ return subtract . escapeJavaStyleString ( str ) ; }
Distance : 6

74
Tree	{ return GEOMETRIC_MEAN . escapeJavaStyleString ( str ) ; }
Code	{ return GEOMETRIC_MEAN . escapeJavaStyleString ( str ) ; }
Distance : 6

75
Tree	{ super . escapeJavaStyleString ( str ) ; return super(); ; }
Code	{ super . escapeJavaStyleString ( str ) ; return super(); ; }
Distance : 7

76
Tree	{ this ( str , str , str , null ) ; }
Code	{ this ( str , str , str , null ) ; }
Distance : 6

77
Tree	{ return getRight . escapeJavaStyleString ( str ) ; }
Code	{ return getRight . escapeJavaStyleString ( str ) ; }
Distance : 6

78
Tree	{ return escapeJavaStyleString ( str , false ) ; } Preconditions
Code	{ return escapeJavaStyleString ( str , false ) ; } Preconditions
Distance : 3

79
Tree	{ return escapeJavaStyleString ( str , false ) ; } -
Code	{ return escapeJavaStyleString ( str , false ) ; } -
Distance : 3

80
Tree	{ return escapeJavaStyleString ( str , false ) ; } class
Code	{ return escapeJavaStyleString ( str , false ) ; } class
Distance : 3

81
Tree	{ return escapeJavaStyleString ( str , false ) ; } Object
Code	{ return escapeJavaStyleString ( str , false ) ; } Object
Distance : 3

82
Tree	{ return escapeJavaStyleString ( str , false ) ; } {}
Code	{ return escapeJavaStyleString ( str , false ) ; } {}
Distance : 3

83
Tree	{ return escapeJavaStyleString ( str , false ) ; } MathRuntimeException
Code	{ return escapeJavaStyleString ( str , false ) ; } MathRuntimeException
Distance : 3

84
Tree	{ return escapeJavaStyleString ( str , false ) ; } ParamChecks
Code	{ return escapeJavaStyleString ( str , false ) ; } ParamChecks
Distance : 3

85
Tree	{ return escapeJavaStyleString ( str , false ) ; } f
Code	{ return escapeJavaStyleString ( str , false ) ; } f
Distance : 3

86
Tree	{ return escapeJavaStyleString ( str , false ) ; } t
Code	{ return escapeJavaStyleString ( str , false ) ; } t
Distance : 3

87
Tree	{ return escapeJavaStyleString ( str , false ) ; } field
Code	{ return escapeJavaStyleString ( str , false ) ; } field
Distance : 3

88
Tree	{ return escapeJavaStyleString ( str , false ) ; } value
Code	{ return escapeJavaStyleString ( str , false ) ; } value
Distance : 3

89
Tree	{ super . escapeJavaStyleString ( str ) ; return null ; } &&
Code	{ super . escapeJavaStyleString ( str ) ; return null ; } &&
Distance : 8

90
Tree	{ super . escapeJavaStyleString ( str ) ; return null ; } T
Code	{ super . escapeJavaStyleString ( str ) ; return null ; } T
Distance : 8

91
Tree	{ super . escapeJavaStyleString ( str ) ; return null ; } Preconditions
Code	{ super . escapeJavaStyleString ( str ) ; return null ; } Preconditions
Distance : 8

92
Tree	{ return escapeJavaStyleString ( str , false ) ; } false
Code	{ return escapeJavaStyleString ( str , false ) ; } false
Distance : 3

93
Tree	{ return escapeJavaStyleString ( str , false ) ; } T
Code	{ return escapeJavaStyleString ( str , false ) ; } T
Distance : 3

94
Tree	{ return escapeJavaStyleString ( str , false ) ; } &&
Code	{ return escapeJavaStyleString ( str , false ) ; } &&
Distance : 3

95
Tree	{ return escapeJavaStyleString ( str , false ) ; } ]
Code	{ return escapeJavaStyleString ( str , false ) ; } ]
Distance : 3

96
Tree	{ return escapeJavaStyleString ( str , false ) ; } int
Code	{ return escapeJavaStyleString ( str , false ) ; } int
Distance : 3

97
Tree	{ return escapeJavaStyleString ( str , str , str , str , null ) ; } expected
Code	{ return escapeJavaStyleString ( str , str , str , str , null ) ; } expected
Distance : 7

98
Tree	{ super . escapeJavaStyleString ( str ) ; return null ; } <
Code	{ super . escapeJavaStyleString ( str ) ; return null ; } <
Distance : 8

99
Tree	{ return escapeJavaStyleString ( str , false ) ; } assertEquals
Code	{ return escapeJavaStyleString ( str , false ) ; } assertEquals
Distance : 3

========================================================================


========================================================================
Example Number: 43
Parent Code is: 
if ( element != null ) { type = element . getClass () ; } else { type = Object . class ; }
-------------------------------------------------------------------------------
Child code is: 
if ( element != null ) { type = element . getClass () ; } else { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=element}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=type}) (204{val==}) (32 (800{val=element}) (235{val=.}) (802{val=getClass}) (216{val=()}))) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (21 (7 (800{val=type}) (204{val==}) (57 (43 (800{val=Object})) (235{val=.}) (341{val=class}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=element}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=type}) (204{val==}) (32 (800{val=element}) (235{val=.}) (802{val=getClass}) (216{val=()}))) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=IllegalArgumentException})) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/35/parent/src_main_java_org_apache_commons_lang3_ArrayUtils.java
-------------------------------------------------------------------------------
Edit Distance : 6
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	if ( element != null ) { type = LocalizedFormats.NOT_POSITIVE_SAMPLE_SIZE ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = LocalizedFormats.NOT_POSITIVE_SAMPLE_SIZE ; } else { type = Object . getClass () ; }
Distance : 10

1
Tree	if ( element != null ) { type = TypeParameters.EMPTY ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = TypeParameters.EMPTY ; } else { type = Object . getClass () ; }
Distance : 10

2
Tree	if ( element != null ) { call.returnType = false ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { call.returnType = false ; } else { type = Object . getClass () ; }
Distance : 11

3
Tree	if ( element != null ) { type = StringUtils.EMPTY ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = StringUtils.EMPTY ; } else { type = element . getClass () ; }
Distance : 10

4
Tree	if ( element != null ) { type = ThaiBuddhistEraDateTimeField.INSTANCE ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = ThaiBuddhistEraDateTimeField.INSTANCE ; } else { type = Object . getClass () ; }
Distance : 10

5
Tree	if ( element != null ) { type = SystemUtils.LINE_SEPARATOR ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = SystemUtils.LINE_SEPARATOR ; } else { type = Object . getClass () ; }
Distance : 10

6
Tree	if ( element != null ) { type = LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE ; } else { type = Object . getClass () ; }
Distance : 10

7
Tree	if ( element != null ) { type = that.cache.functionScope ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = that.cache.functionScope ; } else { type = Object . getClass () ; }
Distance : 10

8
Tree	if ( element != null ) { type = IncrementalCheckMode.OFF ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = IncrementalCheckMode.OFF ; } else { type = Object . getClass () ; }
Distance : 10

9
Tree	if ( element != null ) { type = element . getClass () ; } else { if = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { if = Object . getClass () ; }
Distance : 6

10
Tree	if ( element != null ) { type = Reach.LOCAL_ONLY ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = Reach.LOCAL_ONLY ; } else { type = Object . getClass () ; }
Distance : 10

11
Tree	if ( element != null ) { options.removeUnusedVars = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { options.removeUnusedVars = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 7

12
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = this . Object ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = this . Object ; }
Distance : 9

13
Tree	if ( type != null ) { type = false ; } else { element = type . getClass () ; }
Code	if ( type != null ) { type = false ; } else { element = type . getClass () ; }
Distance : 11

14
Tree	if ( element != return; ) { element = false ; } else { type = Object . getClass () ; }
Code	if ( element != return; ) { element = false ; } else { type = Object . getClass () ; }
Distance : 12

15
Tree	if ( type != null ) { type = type . getClass () ; } else { type = true ; }
Code	if ( type != null ) { type = type . getClass () ; } else { type = true ; }
Distance : 8

16
Tree	if ( element != null ) { type = RealMethod.IsIllegal.INSTANCE ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = RealMethod.IsIllegal.INSTANCE ; } else { type = Object . getClass () ; }
Distance : 10

17
Tree	if ( element != return; ) { element = ( element ) element . getClass () ; } else { type = this . type ; }
Code	if ( element != return; ) { element = ( element ) element . getClass () ; } else { type = this . type ; }
Distance : 11

18
Tree	if ( element != null ) { type = Calendar.ZONE_OFFSET ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = Calendar.ZONE_OFFSET ; } else { type = Object . getClass () ; }
Distance : 10

19
Tree	if ( element != null ) { Sin = false ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { Sin = false ; } else { type = Object . getClass () ; }
Distance : 11

20
Tree	if ( element != null ) { isEnumElementType = false ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { isEnumElementType = false ; } else { type = Object . getClass () ; }
Distance : 11

21
Tree	if ( element != null ) { type = clinitsCalledAtBranch.parent ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = clinitsCalledAtBranch.parent ; } else { type = Object . getClass () ; }
Distance : 10

22
Tree	if ( type != super(); ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( type != super(); ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 8

23
Tree	if ( element != null ) { type = tStart ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = tStart ; } else { type = Object . getClass () ; }
Distance : 10

24
Tree	if ( element != null ) { type = AllowedSolutions.ANY_SIDE ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = AllowedSolutions.ANY_SIDE ; } else { type = Object . getClass () ; }
Distance : 10

25
Tree	if ( element != continue; ) { type = type . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != continue; ) { type = type . getClass () ; } else { type = element . getClass () ; }
Distance : 8

26
Tree	if ( element != null ) { type = StandardBasicTypes.INTEGER ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = StandardBasicTypes.INTEGER ; } else { type = Object . getClass () ; }
Distance : 10

27
Tree	if ( element != null ) { element = ( element ) type . getClass () ; } else { type = this . element ; }
Code	if ( element != null ) { element = ( element ) type . getClass () ; } else { type = this . element ; }
Distance : 10

28
Tree	if ( element != null ) { type = true ; } else { Object = type . getClass () ; }
Code	if ( element != null ) { type = true ; } else { Object = type . getClass () ; }
Distance : 10

29
Tree	if ( element != super(); ) { type = type . getClass () ; } else { type = type . getClass () ; }
Code	if ( element != super(); ) { type = type . getClass () ; } else { type = type . getClass () ; }
Distance : 8

30
Tree	if ( element != break; ) { type = type . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != break; ) { type = type . getClass () ; } else { type = Object . getClass () ; }
Distance : 8

31
Tree	if ( element != default: ) { type = type . getClass () ; } else { type = false ; }
Code	if ( element != default: ) { type = type . getClass () ; } else { type = false ; }
Distance : 8

32
Tree	if ( Object != null ) { type = type . getClass () ; } else { type = element . getClass () ; }
Code	if ( Object != null ) { type = type . getClass () ; } else { type = element . getClass () ; }
Distance : 8

33
Tree	if ( Object != super(); ) { type = false ; } else { type = Object . getClass () ; }
Code	if ( Object != super(); ) { type = false ; } else { type = Object . getClass () ; }
Distance : 12

34
Tree	if ( element != super(); ) { element = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != super(); ) { element = element . getClass () ; } else { type = element . getClass () ; }
Distance : 8

35
Tree	if ( element != null ) { type = Coordinates1D.NaN ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = Coordinates1D.NaN ; } else { type = Object . getClass () ; }
Distance : 10

36
Tree	if ( element != null ) { type = ( element ) type . getClass () ; } else { element = this . Object ; }
Code	if ( element != null ) { type = ( element ) type . getClass () ; } else { element = this . Object ; }
Distance : 9

37
Tree	if ( element != null ) { type = val.length ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = val.length ; } else { type = element . getClass () ; }
Distance : 10

38
Tree	if ( Object != super(); ) { type = ( element ) element . getClass () ; } else { type = this . type ; }
Code	if ( Object != super(); ) { type = ( element ) element . getClass () ; } else { type = this . type ; }
Distance : 11

39
Tree	if ( element != null ) { type = element . getClass () ; } else { if = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { if = Object . getClass () ; }
Distance : 6

40
Tree	if ( element != super(); ) { type = element . getClass () ; } else { element = element . getClass () ; }
Code	if ( element != super(); ) { type = element . getClass () ; } else { element = element . getClass () ; }
Distance : 7

41
Tree	if ( element != super(); ) { type = ( Object ) element . getClass () ; } else { type = this . type ; }
Code	if ( element != super(); ) { type = ( Object ) element . getClass () ; } else { type = this . type ; }
Distance : 10

42
Tree	if ( element != break; ) { type = ( type ) element . getClass () ; } else { type = this . type ; }
Code	if ( element != break; ) { type = ( type ) element . getClass () ; } else { type = this . type ; }
Distance : 10

43
Tree	if ( element != null ) { type = ( type ) type . getClass () ; } else { type = this . Object ; }
Code	if ( element != null ) { type = ( type ) type . getClass () ; } else { type = this . Object ; }
Distance : 10

44
Tree	if ( element != continue; ) { element = false ; } else { type = element . getClass () ; }
Code	if ( element != continue; ) { element = false ; } else { type = element . getClass () ; }
Distance : 12

45
Tree	if ( element != null ) { type = TernaryValue.TRUE ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = TernaryValue.TRUE ; } else { type = Object . getClass () ; }
Distance : 10

46
Tree	if ( element != null ) { type = Double.MAX_VALUE ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = Double.MAX_VALUE ; } else { type = Object . getClass () ; }
Distance : 10

47
Tree	if ( element != null ) { type = TypeInferenceMode.BOTH ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = TypeInferenceMode.BOTH ; } else { type = Object . getClass () ; }
Distance : 10

48
Tree	if ( element != null ) { type = set.length ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = set.length ; } else { type = Object . getClass () ; }
Distance : 10

49
Tree	if ( element != null ) { type = ( type ) Object . getClass () ; } else { type = this . type ; }
Code	if ( element != null ) { type = ( type ) Object . getClass () ; } else { type = this . type ; }
Distance : 10

50
Tree	if ( element != null ) { type = element . getClass () ; } else { notAnException = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { notAnException = Object . getClass () ; }
Distance : 6

51
Tree	if ( element != null ) { type = that.data ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = that.data ; } else { type = Object . getClass () ; }
Distance : 10

52
Tree	if ( element != null ) { type = element . getClass () ; } else { type = RemovalType.REMOVE_RHS ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = RemovalType.REMOVE_RHS ; }
Distance : 6

53
Tree	if ( element != null ) { Double.NEGATIVE_INFINITY = element . getClass () ; } else { type = ( Object ) Object . getClass () ; }
Code	if ( element != null ) { Double.NEGATIVE_INFINITY = element . getClass () ; } else { type = ( Object ) Object . getClass () ; }
Distance : 9

54
Tree	if ( element != null ) { this . type = element . getClass () ; } else { Name = getClass () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { Name = getClass () ; }
Distance : 8

55
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = source.sumOfLogs ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = source.sumOfLogs ; }
Distance : 10

56
Tree	if ( element != null ) { type = ModuleType.ES6 ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = ModuleType.ES6 ; } else { type = Object . getClass () ; }
Distance : 10

57
Tree	if ( element != null ) { type = DecompositionType.UNDECOMPOSABLE ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = DecompositionType.UNDECOMPOSABLE ; } else { type = Object . getClass () ; }
Distance : 10

58
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = val.length ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = val.length ; }
Distance : 8

59
Tree	if ( element != null ) { type = element . getClass () ; } else { source.m1 = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { source.m1 = Object . getClass () ; }
Distance : 6

60
Tree	if ( element != null ) { type = compilerState.functionNames ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = compilerState.functionNames ; } else { type = Object . getClass () ; }
Distance : 10

61
Tree	if ( element != null ) { type = ( element ) Object . getClass () ; } else { element = this . type ; }
Code	if ( element != null ) { type = ( element ) Object . getClass () ; } else { element = this . type ; }
Distance : 9

62
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { if = source.nDev . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { if = source.nDev . getClass () ; }
Distance : 9

63
Tree	if ( element != null ) { type = element . getClass () ; } else { type = Reach.ALL ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = Reach.ALL ; }
Distance : 6

64
Tree	if ( element != null ) { type = element . getClass () ; } else { clone.data = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { clone.data = Object . getClass () ; }
Distance : 6

65
Tree	if ( element != break; ) { type = ( element ) element . getClass () ; } else { element = this . type ; }
Code	if ( element != break; ) { type = ( element ) element . getClass () ; } else { element = this . type ; }
Distance : 10

66
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = source.isBiasCorrected ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = source.isBiasCorrected ; }
Distance : 8

67
Tree	if ( element != null ) { type = element . getClass () ; } else { type = Boolean.FALSE ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = Boolean.FALSE ; }
Distance : 6

68
Tree	if ( element != null ) { type = TypeCache.WithInlineExpunction ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = TypeCache.WithInlineExpunction ; } else { type = Object . getClass () ; }
Distance : 10

69
Tree	if ( type != null ) { type = type . getClass () ; } else { type = type . getClass () ; }
Code	if ( type != null ) { type = type . getClass () ; } else { type = type . getClass () ; }
Distance : 8

70
Tree	if ( Object != null ) { element = false ; } else { type = element . getClass () ; }
Code	if ( Object != null ) { element = false ; } else { type = element . getClass () ; }
Distance : 12

71
Tree	if ( element != null ) { type = element . getClass () ; } else { scopedNameTable = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { scopedNameTable = Object . getClass () ; }
Distance : 6

72
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { private = StringUtils.EMPTY . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { private = StringUtils.EMPTY . getClass () ; }
Distance : 9

73
Tree	if ( element != null ) { tmp = false ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { tmp = false ; } else { type = Object . getClass () ; }
Distance : 11

74
Tree	if ( element != null ) { type = element . getClass () ; } else { if = type . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { if = type . getClass () ; }
Distance : 6

75
Tree	if ( Object != return; ) { type = element . getClass () ; } else { type = false ; }
Code	if ( Object != return; ) { type = element . getClass () ; } else { type = false ; }
Distance : 8

76
Tree	if ( element != null ) { type = element . getClass () ; } else { type = source.m1 ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = source.m1 ; }
Distance : 6

77
Tree	if ( element != null ) { type = element . getClass () ; } else { type = Name.Type.OTHER ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = Name.Type.OTHER ; }
Distance : 6

78
Tree	if ( element != null ) { type = false ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = Object . getClass () ; }
Distance : 10

79
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { CheckLevel.WARNING = Object . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { CheckLevel.WARNING = Object . getClass () ; }
Distance : 9

80
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ArrayUtils.EMPTY_STRING_ARRAY ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ArrayUtils.EMPTY_STRING_ARRAY ; }
Distance : 6

81
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = CheckLevel.WARNING ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = CheckLevel.WARNING ; }
Distance : 8

82
Tree	if ( element != null ) { type = element . getClass () == TracerMode.ALL ; } else { type = values.length ; }
Code	if ( element != null ) { type = element . getClass () == TracerMode.ALL ; } else { type = values.length ; }
Distance : 8

83
Tree	if ( element != super(); ) { element = false ; } else { type = type . getClass () ; }
Code	if ( element != super(); ) { element = false ; } else { type = type . getClass () ; }
Distance : 12

84
Tree	if ( element != null ) { type = element . getClass () ; } else { type = Node.FLAG_LOCAL_RESULTS ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = Node.FLAG_LOCAL_RESULTS ; }
Distance : 6

85
Tree	if ( element != null ) { type = element . getClass () == options.assumeClosuresOnlyCaptureReferences ; } else { type = StringUtils.EMPTY ; }
Code	if ( element != null ) { type = element . getClass () == options.assumeClosuresOnlyCaptureReferences ; } else { type = StringUtils.EMPTY ; }
Distance : 8

86
Tree	if ( type != continue; ) { type = false ; } else { type = Object . getClass () ; }
Code	if ( type != continue; ) { type = false ; } else { type = Object . getClass () ; }
Distance : 12

87
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { defineSlot = Object . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { defineSlot = Object . getClass () ; }
Distance : 9

88
Tree	if ( element != return; ) { element = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != return; ) { element = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 8

89
Tree	if ( element != null ) { Var.ARGUMENTS = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { Var.ARGUMENTS = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 7

90
Tree	if ( type != null ) { element = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( type != null ) { element = element . getClass () ; } else { type = element . getClass () ; }
Distance : 8

91
Tree	if ( type != break; ) { type = element . getClass () ; } else { type = false ; }
Code	if ( type != break; ) { type = element . getClass () ; } else { type = false ; }
Distance : 8

92
Tree	if ( element != null ) { type = element . getClass () ; } else { dest.dev = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { dest.dev = Object . getClass () ; }
Distance : 6

93
Tree	if ( element != null ) { type = element . getClass () ; } else { type = compilerState.typeCheckingHasRun ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = compilerState.typeCheckingHasRun ; }
Distance : 6

94
Tree	if ( element != super(); ) { type = ( element ) element . getClass () ; } else { element = this . element ; }
Code	if ( element != super(); ) { type = ( element ) element . getClass () ; } else { element = this . element ; }
Distance : 10

95
Tree	if ( element != super(); ) { type = ( type ) element . getClass () ; } else { type = this . element ; }
Code	if ( element != super(); ) { type = ( type ) element . getClass () ; } else { type = this . element ; }
Distance : 10

96
Tree	if ( element != null ) { type = element . getClass () ; } else { type = source.incMoment ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = source.incMoment ; }
Distance : 6

97
Tree	if ( element != null ) { type = source.variance ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = source.variance ; } else { type = Object . getClass () ; }
Distance : 10

98
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { TypeInferenceMode.DISABLED = FeatureSet.ES3 . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { TypeInferenceMode.DISABLED = FeatureSet.ES3 . getClass () ; }
Distance : 9

99
Tree	if ( element != null ) { type = element . getClass () ; } else { Format.COMPACT = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { Format.COMPACT = Object . getClass () ; }
Distance : 6

========================================================================


========================================================================
Example Number: 44
Parent Code is: 
return m . containsKey ( value ) ;
-------------------------------------------------------------------------------
Child code is: 
return m != null && m . containsKey ( value ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=m}) (235{val=.}) (802{val=containsKey}) (214{val=(}) (800{val=value}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (27 (27 (800{val=m}) (242{val=!=}) (500{val=null})) (249{val=&&}) (32 (800{val=m}) (235{val=.}) (802{val=containsKey}) (214{val=(}) (800{val=value}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/34/parent/src_main_java_org_apache_commons_lang3_builder_ToStringStyle.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	return containsKey ( value ) ; Override
Code	return containsKey ( value ) ; Override
Distance : 7

1
Tree	return this . m . containsKey ( value ) ; i
Code	return this . m . containsKey ( value ) ; i
Distance : 5

2
Tree	return this . m . containsKey ( value ) ; null
Code	return this . m . containsKey ( value ) ; null
Distance : 5

3
Tree	return this . m . containsKey ( value ) ; +
Code	return this . m . containsKey ( value ) ; +
Distance : 5

4
Tree	return this . m . containsKey ( value ) ; ,
Code	return this . m . containsKey ( value ) ; ,
Distance : 5

5
Tree	return this . m . containsKey ( value ) ; .
Code	return this . m . containsKey ( value ) ; .
Distance : 5

6
Tree	return this . m . containsKey ( value ) ; )
Code	return this . m . containsKey ( value ) ; )
Distance : 5

7
Tree	return this . m . containsKey ( value ) ; ;
Code	return this . m . containsKey ( value ) ; ;
Distance : 5

8
Tree	return this . m . containsKey ( value ) ; (
Code	return this . m . containsKey ( value ) ; (
Distance : 5

9
Tree	return this . m . containsKey ( value ) ; <s>
Code	return this . m . containsKey ( value ) ; <s>
Distance : 5

10
Tree	return this . m . containsKey ( value ) ; ;
Code	return this . m . containsKey ( value ) ; ;
Distance : 5

11
Tree	return this . m . containsKey ( value ) ; <blank>
Code	return this . m . containsKey ( value ) ; <blank>
Distance : 5

12
Tree	return containsKey ( value ) ; add
Code	return containsKey ( value ) ; add
Distance : 7

13
Tree	return this . m . containsKey ( value ) ; {
Code	return this . m . containsKey ( value ) ; {
Distance : 5

14
Tree	return this . m . containsKey ( value ) ; }
Code	return this . m . containsKey ( value ) ; }
Distance : 5

15
Tree	return this . m . containsKey ( value ) ; =
Code	return this . m . containsKey ( value ) ; =
Distance : 5

16
Tree	return this . m . containsKey ( value ) ; final
Code	return this . m . containsKey ( value ) ; final
Distance : 5

17
Tree	return this . m . containsKey ( value ) ; this
Code	return this . m . containsKey ( value ) ; this
Distance : 5

18
Tree	return this . m . containsKey ( value ) ; <
Code	return this . m . containsKey ( value ) ; <
Distance : 5

19
Tree	return this . m . containsKey ( value ) ; if
Code	return this . m . containsKey ( value ) ; if
Distance : 5

20
Tree	return this . m . containsKey ( value ) ; ]
Code	return this . m . containsKey ( value ) ; ]
Distance : 5

21
Tree	return this . m . containsKey ( value ) ; [
Code	return this . m . containsKey ( value ) ; [
Distance : 5

22
Tree	return this . m . containsKey ( value ) ; Preconditions
Code	return this . m . containsKey ( value ) ; Preconditions
Distance : 5

23
Tree	return this . m . containsKey ( value ) ; >
Code	return this . m . containsKey ( value ) ; >
Distance : 5

24
Tree	return this . m . containsKey ( value ) ; public
Code	return this . m . containsKey ( value ) ; public
Distance : 5

25
Tree	return this . m . containsKey ( value ) ; ()
Code	return this . m . containsKey ( value ) ; ()
Distance : 5

26
Tree	return this . m . containsKey ( value ) ; value
Code	return this . m . containsKey ( value ) ; value
Distance : 5

27
Tree	return this . m . containsKey ( value ) ; true
Code	return this . m . containsKey ( value ) ; true
Distance : 5

28
Tree	return this . m . containsKey ( value ) ; invocation
Code	return this . m . containsKey ( value ) ; invocation
Distance : 5

29
Tree	return this . m . containsKey ( value ) ; MathRuntimeException
Code	return this . m . containsKey ( value ) ; MathRuntimeException
Distance : 5

30
Tree	return this . m . containsKey ( value ) ; {}
Code	return this . m . containsKey ( value ) ; {}
Distance : 5

31
Tree	return this . m . containsKey ( value ) ; List
Code	return this . m . containsKey ( value ) ; List
Distance : 5

32
Tree	return this . m . containsKey ( value ) ; str
Code	return this . m . containsKey ( value ) ; str
Distance : 5

33
Tree	return this . m . containsKey ( value ) ; LINE_JOINER
Code	return this . m . containsKey ( value ) ; LINE_JOINER
Distance : 5

34
Tree	return this . m . containsKey ( value ) ; boolean
Code	return this . m . containsKey ( value ) ; boolean
Distance : 5

35
Tree	return this . m . containsKey ( value ) ; t
Code	return this . m . containsKey ( value ) ; t
Distance : 5

36
Tree	return this . m . containsKey ( value ) ; name
Code	return this . m . containsKey ( value ) ; name
Distance : 5

37
Tree	return this . m . containsKey ( value ) ; add
Code	return this . m . containsKey ( value ) ; add
Distance : 5

38
Tree	return this . m . containsKey ( value ) ; <>
Code	return this . m . containsKey ( value ) ; <>
Distance : 5

39
Tree	return this . m . containsKey ( value ) ; array
Code	return this . m . containsKey ( value ) ; array
Distance : 5

40
Tree	return this . m . containsKey ( value ) ; ParamChecks
Code	return this . m . containsKey ( value ) ; ParamChecks
Distance : 5

41
Tree	return this . m . containsKey ( value ) ; f
Code	return this . m . containsKey ( value ) ; f
Distance : 5

42
Tree	return this . m . containsKey ( value ) ; result
Code	return this . m . containsKey ( value ) ; result
Distance : 5

43
Tree	return this . m . containsKey ( value ) ; :
Code	return this . m . containsKey ( value ) ; :
Distance : 5

44
Tree	return this . m . containsKey ( value ) ; m
Code	return this . m . containsKey ( value ) ; m
Distance : 5

45
Tree	return this . m . containsKey ( value ) ; assertThat
Code	return this . m . containsKey ( value ) ; assertThat
Distance : 5

46
Tree	return this . m . containsKey ( value ) ; x
Code	return this . m . containsKey ( value ) ; x
Distance : 5

47
Tree	return this . m . containsKey ( value ) ; testSame
Code	return this . m . containsKey ( value ) ; testSame
Distance : 5

48
Tree	return this . m . containsKey ( value ) ; parent
Code	return this . m . containsKey ( value ) ; parent
Distance : 5

49
Tree	return this . m . containsKey ( value ) ; createIllegalArgumentException
Code	return this . m . containsKey ( value ) ; createIllegalArgumentException
Distance : 5

50
Tree	return this . m . containsKey ( value ) ; serialised
Code	return this . m . containsKey ( value ) ; serialised
Distance : 5

51
Tree	return this . m . containsKey ( value ) ; getInstance
Code	return this . m . containsKey ( value ) ; getInstance
Distance : 5

52
Tree	return this . m . containsKey ( value ) ; fireChangeEvent
Code	return this . m . containsKey ( value ) ; fireChangeEvent
Distance : 5

53
Tree	return this . m . containsKey ( value ) ; ArrayList
Code	return this . m . containsKey ( value ) ; ArrayList
Distance : 5

54
Tree	return this . m . containsKey ( value ) ; new
Code	return this . m . containsKey ( value ) ; new
Distance : 5

55
Tree	return this . m . containsKey ( value ) ; reportCodeChange
Code	return this . m . containsKey ( value ) ; reportCodeChange
Distance : 5

56
Tree	return this . m . containsKey ( value ) ; T
Code	return this . m . containsKey ( value ) ; T
Distance : 5

57
Tree	return this . m . containsKey ( value ) ; &&
Code	return this . m . containsKey ( value ) ; &&
Distance : 5

58
Tree	return m . containsKey ( value ) ; throw
Code	return m . containsKey ( value ) ; throw
Distance : 5

59
Tree	return m . containsKey ( value ) ; nullNotPermitted
Code	return m . containsKey ( value ) ; nullNotPermitted
Distance : 5

60
Tree	return m . containsKey ( value ) ; []
Code	return m . containsKey ( value ) ; []
Distance : 5

61
Tree	return m . containsKey ( value ) ; !
Code	return m . containsKey ( value ) ; !
Distance : 5

62
Tree	return m . containsKey ( value ) ; assertEquals
Code	return m . containsKey ( value ) ; assertEquals
Distance : 5

63
Tree	return m . containsKey ( value ) ; MathRuntimeException
Code	return m . containsKey ( value ) ; MathRuntimeException
Distance : 5

64
Tree	return m . containsKey ( value ) ; str
Code	return m . containsKey ( value ) ; str
Distance : 5

65
Tree	return m . containsKey ( value ) ; LINE_JOINER
Code	return m . containsKey ( value ) ; LINE_JOINER
Distance : 5

66
Tree	return m . containsKey ( value ) ; assertThat
Code	return m . containsKey ( value ) ; assertThat
Distance : 5

67
Tree	return m . containsKey ( value ) ; :
Code	return m . containsKey ( value ) ; :
Distance : 5

68
Tree	return m . containsKey ( value ) ; field
Code	return m . containsKey ( value ) ; field
Distance : 5

69
Tree	return m . containsKey ( value ) ; t
Code	return m . containsKey ( value ) ; t
Distance : 5

70
Tree	return m . containsKey ( value ) ; name
Code	return m . containsKey ( value ) ; name
Distance : 5

71
Tree	return m . containsKey ( value ) ; add
Code	return m . containsKey ( value ) ; add
Distance : 5

72
Tree	return m . containsKey ( value ) ; <>
Code	return m . containsKey ( value ) ; <>
Distance : 5

73
Tree	return m . containsKey ( value ) ; array
Code	return m . containsKey ( value ) ; array
Distance : 5

74
Tree	return m . containsKey ( value ) ; ParamChecks
Code	return m . containsKey ( value ) ; ParamChecks
Distance : 5

75
Tree	return m . containsKey ( value ) ; f
Code	return m . containsKey ( value ) ; f
Distance : 5

76
Tree	return m . containsKey ( value ) ; result
Code	return m . containsKey ( value ) ; result
Distance : 5

77
Tree	return m . containsKey ( value ) ; boolean
Code	return m . containsKey ( value ) ; boolean
Distance : 5

78
Tree	return m . containsKey ( value ) ; invocation
Code	return m . containsKey ( value ) ; invocation
Distance : 5

79
Tree	return m . containsKey ( value ) ; m
Code	return m . containsKey ( value ) ; m
Distance : 5

80
Tree	return m . containsKey ( value ) ; x
Code	return m . containsKey ( value ) ; x
Distance : 5

81
Tree	return m . containsKey ( value ) ; testSame
Code	return m . containsKey ( value ) ; testSame
Distance : 5

82
Tree	return m . containsKey ( value ) ; parent
Code	return m . containsKey ( value ) ; parent
Distance : 5

83
Tree	return m . containsKey ( value ) ; catch
Code	return m . containsKey ( value ) ; catch
Distance : 5

84
Tree	return this . m . containsKey ( value ) ; assertEquals
Code	return this . m . containsKey ( value ) ; assertEquals
Distance : 5

85
Tree	return m . containsKey ( value ) ; *
Code	return m . containsKey ( value ) ; *
Distance : 5

86
Tree	return m . containsKey ( value ) ; try
Code	return m . containsKey ( value ) ; try
Distance : 5

87
Tree	return this . m . containsKey ( value ) ; Override
Code	return this . m . containsKey ( value ) ; Override
Distance : 5

88
Tree	return this . m . containsKey ( value ) ; mock
Code	return this . m . containsKey ( value ) ; mock
Distance : 5

89
Tree	return this . m . containsKey ( value ) ; Object
Code	return this . m . containsKey ( value ) ; Object
Distance : 5

90
Tree	return this . m . containsKey ( value ) ; class
Code	return this . m . containsKey ( value ) ; class
Distance : 5

91
Tree	return this . m . containsKey ( value ) ; IllegalArgumentException
Code	return this . m . containsKey ( value ) ; IllegalArgumentException
Distance : 5

92
Tree	return this . m . containsKey ( value ) ; FastMath
Code	return this . m . containsKey ( value ) ; FastMath
Distance : 5

93
Tree	return this . m . containsKey ( value ) ; expected
Code	return this . m . containsKey ( value ) ; expected
Distance : 5

94
Tree	return this . m . containsKey ( value ) ; !=
Code	return this . m . containsKey ( value ) ; !=
Distance : 5

95
Tree	return this . m . containsKey ( value ) ; STRING_CONSTANT
Code	return this . m . containsKey ( value ) ; STRING_CONSTANT
Distance : 5

96
Tree	return this . m . containsKey ( value ) ; super
Code	return this . m . containsKey ( value ) ; super
Distance : 5

97
Tree	return this . m . containsKey ( value ) ; double
Code	return this . m . containsKey ( value ) ; double
Distance : 5

98
Tree	return this . m . containsKey ( value ) ; checkState
Code	return this . m . containsKey ( value ) ; checkState
Distance : 5

99
Tree	return this . m . containsKey ( value ) ; compiler
Code	return this . m . containsKey ( value ) ; compiler
Distance : 5

========================================================================


========================================================================
Example Number: 45
Parent Code is: 
CharSequence cs
-------------------------------------------------------------------------------
Child code is: 
String cs
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (44 (43 (801{val=CharSequence})) (800{val=cs})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (44 (43 (801{val=String})) (800{val=cs})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/30/parent/src_main_java_org_apache_commons_lang3_StringUtils.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	char cs array
Code	char cs array
Distance : 2

1
Tree	cs < cs > cs array
Code	cs < cs > cs array
Distance : 5

2
Tree	cs < cs > cs @
Code	cs < cs > cs @
Distance : 5

3
Tree	cs < cs > cs []
Code	cs < cs > cs []
Distance : 5

4
Tree	cs < cs > cs ==
Code	cs < cs > cs ==
Distance : 5

5
Tree	cs < cs > cs nullNotPermitted
Code	cs < cs > cs nullNotPermitted
Distance : 5

6
Tree	cs < cs > cs expected
Code	cs < cs > cs expected
Distance : 5

7
Tree	cs < cs > cs IllegalArgumentException
Code	cs < cs > cs IllegalArgumentException
Distance : 5

8
Tree	cs < cs > cs invocation
Code	cs < cs > cs invocation
Distance : 5

9
Tree	cs < cs > cs FastMath
Code	cs < cs > cs FastMath
Distance : 5

10
Tree	cs < cs > cs t
Code	cs < cs > cs t
Distance : 5

11
Tree	cs < cs > cs reportCodeChange
Code	cs < cs > cs reportCodeChange
Distance : 5

12
Tree	cs < cs > cs class
Code	cs < cs > cs class
Distance : 5

13
Tree	cs < cs > cs field
Code	cs < cs > cs field
Distance : 5

14
Tree	cs < cs > cs fireChangeEvent
Code	cs < cs > cs fireChangeEvent
Distance : 5

15
Tree	cs < cs > cs serialised
Code	cs < cs > cs serialised
Distance : 5

16
Tree	cs < cs > cs type
Code	cs < cs > cs type
Distance : 5

17
Tree	cs < cs > cs getInstance
Code	cs < cs > cs getInstance
Distance : 5

18
Tree	cs < cs > cs double
Code	cs < cs > cs double
Distance : 5

19
Tree	cs < cs > cs false
Code	cs < cs > cs false
Distance : 5

20
Tree	cs < cs > cs super
Code	cs < cs > cs super
Distance : 5

21
Tree	cs < cs > cs !
Code	cs < cs > cs !
Distance : 5

22
Tree	cs < cs > cs name
Code	cs < cs > cs name
Distance : 5

23
Tree	cs < cs > cs void
Code	cs < cs > cs void
Distance : 5

24
Tree	CharSequence cs !
Code	CharSequence cs !
Distance : 2

25
Tree	cs < cs > cs boolean
Code	cs < cs > cs boolean
Distance : 5

26
Tree	cs < cs > cs null
Code	cs < cs > cs null
Distance : 5

27
Tree	cs < cs > cs f
Code	cs < cs > cs f
Distance : 5

28
Tree	cs < cs > cs MathRuntimeException
Code	cs < cs > cs MathRuntimeException
Distance : 5

29
Tree	final cs < cs > cs invocation
Code	final cs < cs > cs invocation
Distance : 6

30
Tree	final cs < cs > cs FastMath
Code	final cs < cs > cs FastMath
Distance : 6

31
Tree	final cs < cs > cs double
Code	final cs < cs > cs double
Distance : 6

32
Tree	final cs < cs > cs false
Code	final cs < cs > cs false
Distance : 6

33
Tree	final cs < cs > cs test
Code	final cs < cs > cs test
Distance : 6

34
Tree	final cs < cs > cs int
Code	final cs < cs > cs int
Distance : 6

35
Tree	final cs < cs > cs !
Code	final cs < cs > cs !
Distance : 6

36
Tree	char cs String
Code	char cs String
Distance : 2

37
Tree	char cs super
Code	char cs super
Distance : 2

38
Tree	char cs nullNotPermitted
Code	char cs nullNotPermitted
Distance : 2

39
Tree	cs < cs > cs &&
Code	cs < cs > cs &&
Distance : 5

40
Tree	cs < cs > cs mock
Code	cs < cs > cs mock
Distance : 5

41
Tree	cs < cs > cs assertEquals
Code	cs < cs > cs assertEquals
Distance : 5

42
Tree	cs < cs > cs int
Code	cs < cs > cs int
Distance : 5

43
Tree	cs < cs > cs Object
Code	cs < cs > cs Object
Distance : 5

44
Tree	cs < cs > cs mode
Code	cs < cs > cs mode
Distance : 5

45
Tree	cs < cs > cs ]
Code	cs < cs > cs ]
Distance : 5

46
Tree	cs < cs > cs true
Code	cs < cs > cs true
Distance : 5

47
Tree	cs < cs > cs Preconditions
Code	cs < cs > cs Preconditions
Distance : 5

48
Tree	cs < cs > cs -
Code	cs < cs > cs -
Distance : 5

49
Tree	cs < cs > cs T
Code	cs < cs > cs T
Distance : 5

50
Tree	cs < cs > cs [
Code	cs < cs > cs [
Distance : 5

51
Tree	cs < cs > cs ParamChecks
Code	cs < cs > cs ParamChecks
Distance : 5

52
Tree	cs < cs > cs Override
Code	cs < cs > cs Override
Distance : 5

53
Tree	cs < cs > cs test
Code	cs < cs > cs test
Distance : 5

54
Tree	final cs < cs > cs str
Code	final cs < cs > cs str
Distance : 6

55
Tree	cs < cs > cs )
Code	cs < cs > cs )
Distance : 5

56
Tree	cs < cs > cs {
Code	cs < cs > cs {
Distance : 5

57
Tree	cs < cs > cs this
Code	cs < cs > cs this
Distance : 5

58
Tree	cs < cs > cs >
Code	cs < cs > cs >
Distance : 5

59
Tree	cs < cs > cs if
Code	cs < cs > cs if
Distance : 5

60
Tree	cs < cs > cs public
Code	cs < cs > cs public
Distance : 5

61
Tree	cs < cs > cs String
Code	cs < cs > cs String
Distance : 5

62
Tree	cs < cs > cs }
Code	cs < cs > cs }
Distance : 5

63
Tree	cs < cs > cs .
Code	cs < cs > cs .
Distance : 5

64
Tree	cs < cs > cs (
Code	cs < cs > cs (
Distance : 5

65
Tree	cs < cs > cs testSame
Code	cs < cs > cs testSame
Distance : 5

66
Tree	cs < cs > cs createIllegalArgumentException
Code	cs < cs > cs createIllegalArgumentException
Distance : 5

67
Tree	cs < cs > cs ArrayList
Code	cs < cs > cs ArrayList
Distance : 5

68
Tree	cs < cs > cs return
Code	cs < cs > cs return
Distance : 5

69
Tree	@ CharSequence CharSequence cs true
Code	@ CharSequence CharSequence cs true
Distance : 4

70
Tree	@ CharSequence CharSequence cs mock
Code	@ CharSequence CharSequence cs mock
Distance : 4

71
Tree	@ CharSequence CharSequence cs Override
Code	@ CharSequence CharSequence cs Override
Distance : 4

72
Tree	@ CharSequence CharSequence cs &&
Code	@ CharSequence CharSequence cs &&
Distance : 4

73
Tree	@ CharSequence CharSequence cs T
Code	@ CharSequence CharSequence cs T
Distance : 4

74
Tree	@ CharSequence CharSequence cs i
Code	@ CharSequence CharSequence cs i
Distance : 4

75
Tree	@ CharSequence CharSequence cs value
Code	@ CharSequence CharSequence cs value
Distance : 4

76
Tree	@ CharSequence CharSequence cs mode
Code	@ CharSequence CharSequence cs mode
Distance : 4

77
Tree	@ CharSequence CharSequence cs {}
Code	@ CharSequence CharSequence cs {}
Distance : 4

78
Tree	cs < cs > cs parent
Code	cs < cs > cs parent
Distance : 5

79
Tree	@ CharSequence CharSequence cs MathRuntimeException
Code	@ CharSequence CharSequence cs MathRuntimeException
Distance : 4

80
Tree	@ CharSequence CharSequence cs assertEquals
Code	@ CharSequence CharSequence cs assertEquals
Distance : 4

81
Tree	@ CharSequence CharSequence cs Object
Code	@ CharSequence CharSequence cs Object
Distance : 4

82
Tree	cs < cs > cs STRING_CONSTANT
Code	cs < cs > cs STRING_CONSTANT
Distance : 5

83
Tree	@ CharSequence CharSequence cs throw
Code	@ CharSequence CharSequence cs throw
Distance : 4

84
Tree	cs < cs > cs <
Code	cs < cs > cs <
Distance : 5

85
Tree	cs < cs > cs ,
Code	cs < cs > cs ,
Distance : 5

86
Tree	cs < cs > cs ()
Code	cs < cs > cs ()
Distance : 5

87
Tree	cs < cs > cs new
Code	cs < cs > cs new
Distance : 5

88
Tree	cs < cs > cs =
Code	cs < cs > cs =
Distance : 5

89
Tree	cs < cs > cs NUMBER_CONSTANT
Code	cs < cs > cs NUMBER_CONSTANT
Distance : 5

90
Tree	cs < cs > cs {}
Code	cs < cs > cs {}
Distance : 5

91
Tree	cs < cs > cs compiler
Code	cs < cs > cs compiler
Distance : 5

92
Tree	cs < cs > cs value
Code	cs < cs > cs value
Distance : 5

93
Tree	cs < cs > cs !=
Code	cs < cs > cs !=
Distance : 5

94
Tree	cs < cs > cs i
Code	cs < cs > cs i
Distance : 5

95
Tree	CharSequence cs ]
Code	CharSequence cs ]
Distance : 2

96
Tree	cs < cs > cs final
Code	cs < cs > cs final
Distance : 5

97
Tree	CharSequence cs [
Code	CharSequence cs [
Distance : 2

98
Tree	CharSequence cs Override
Code	CharSequence cs Override
Distance : 2

99
Tree	CharSequence cs test
Code	CharSequence cs test
Distance : 2

========================================================================


========================================================================
Example Number: 46
Parent Code is: 
Calendar c = new GregorianCalendar ( mTimeZone ) ;
-------------------------------------------------------------------------------
Child code is: 
Calendar c = new GregorianCalendar ( mTimeZone , mLocale ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Calendar})) (59 (800{val=c}) (204{val==}) (14 (304{val=new}) (43 (801{val=GregorianCalendar})) (214{val=(}) (800{val=mTimeZone}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Calendar})) (59 (800{val=c}) (204{val==}) (14 (304{val=new}) (43 (801{val=GregorianCalendar})) (214{val=(}) (800{val=mTimeZone}) (234{val=,}) (800{val=mLocale}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/26/parent/src_main_java_org_apache_commons_lang3_time_FastDateFormat.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	Calendar c = mLocale . getName ( mTimeZone , mLocale ) ;
Code	Calendar c = mLocale . getName ( mTimeZone , mLocale ) ;
Distance : 3

1
Tree	GregorianCalendar c = new Calendar ( mTimeZone , new Calendar [ NUMBER_CONSTANT ] ) ;
Code	GregorianCalendar c = new Calendar ( mTimeZone , new Calendar [ NUMBER_CONSTANT ] ) ;
Distance : 7

2
Tree	Calendar c = mTimeZone . describe ( mTimeZone ) ;
Code	Calendar c = mTimeZone . describe ( mTimeZone ) ;
Distance : 5

3
Tree	Calendar c = new GregorianCalendar ( mLocale , new Calendar [ NUMBER_CONSTANT ] ) ;
Code	Calendar c = new GregorianCalendar ( mLocale , new Calendar [ NUMBER_CONSTANT ] ) ;
Distance : 6

4
Tree	GregorianCalendar c = new GregorianCalendar ( mTimeZone , c ) ;
Code	GregorianCalendar c = new GregorianCalendar ( mTimeZone , c ) ;
Distance : 2

5
Tree	Calendar c = findFirstUnverified () ;
Code	Calendar c = findFirstUnverified () ;
Distance : 7

6
Tree	Calendar c = getFunctionCallParameterMap () ;
Code	Calendar c = getFunctionCallParameterMap () ;
Distance : 7

7
Tree	Calendar c = new Calendar ( mTimeZone , mLocale . getBytes ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale . getBytes ( STRING_CONSTANT ) ) ;
Distance : 6

8
Tree	Calendar c = getFormatter () ;
Code	Calendar c = getFormatter () ;
Distance : 7

9
Tree	GregorianCalendar c = new Calendar ( mTimeZone , mLocale . newBuilder ( STRING_CONSTANT ) ) ;
Code	GregorianCalendar c = new Calendar ( mTimeZone , mLocale . newBuilder ( STRING_CONSTANT ) ) ;
Distance : 7

10
Tree	Calendar c = getShortNameForRequire () ;
Code	Calendar c = getShortNameForRequire () ;
Distance : 7

11
Tree	Calendar c = StandardBasicTypes.DATE () ;
Code	Calendar c = StandardBasicTypes.DATE () ;
Distance : 7

12
Tree	Calendar c = mLocale . forPattern ( mTimeZone ) ;
Code	Calendar c = mLocale . forPattern ( mTimeZone ) ;
Distance : 5

13
Tree	GregorianCalendar c = new Calendar ( mTimeZone , mLocale . getInstance ( STRING_CONSTANT ) ) ;
Code	GregorianCalendar c = new Calendar ( mTimeZone , mLocale . getInstance ( STRING_CONSTANT ) ) ;
Distance : 7

14
Tree	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . getRightElement ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . getRightElement ( STRING_CONSTANT ) ) ;
Distance : 5

15
Tree	Calendar c = new GregorianCalendar ( mLocale , mLocale . newBuilder ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mLocale , mLocale . newBuilder ( STRING_CONSTANT ) ) ;
Distance : 6

16
Tree	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . getSourceFileName ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . getSourceFileName ( STRING_CONSTANT ) ) ;
Distance : 5

17
Tree	Calendar c = new GregorianCalendar ( mLocale , mLocale . getInstance ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mLocale , mLocale . getInstance ( STRING_CONSTANT ) ) ;
Distance : 6

18
Tree	Calendar c = new Calendar ( mTimeZone , mLocale . getGJ ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale . getGJ ( STRING_CONSTANT ) ) ;
Distance : 6

19
Tree	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . getDefault ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . getDefault ( STRING_CONSTANT ) ) ;
Distance : 5

20
Tree	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . getMethod ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . getMethod ( STRING_CONSTANT ) ) ;
Distance : 5

21
Tree	Calendar c = greatestCommonDivisor () ;
Code	Calendar c = greatestCommonDivisor () ;
Distance : 7

22
Tree	Calendar c = mapToSelf () ;
Code	Calendar c = mapToSelf () ;
Distance : 7

23
Tree	GregorianCalendar c = createSymbolTable () ;
Code	GregorianCalendar c = createSymbolTable () ;
Distance : 8

24
Tree	Calendar c = fromSources () ;
Code	Calendar c = fromSources () ;
Distance : 7

25
Tree	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . years ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . years ( STRING_CONSTANT ) ) ;
Distance : 5

26
Tree	GregorianCalendar c = new GregorianCalendar ( c ) ;
Code	GregorianCalendar c = new GregorianCalendar ( c ) ;
Distance : 4

27
Tree	Calendar c = new GregorianCalendar ( c , false ) ;
Code	Calendar c = new GregorianCalendar ( c , false ) ;
Distance : 2

28
Tree	Calendar c = mLocale . newCalendar ( mTimeZone ) ;
Code	Calendar c = mLocale . newCalendar ( mTimeZone ) ;
Distance : 5

29
Tree	Calendar c = mLocale . getPattern ( mTimeZone ) ;
Code	Calendar c = mLocale . getPattern ( mTimeZone ) ;
Distance : 5

30
Tree	Calendar c = mLocale . getTimeZone ( mTimeZone ) ;
Code	Calendar c = mLocale . getTimeZone ( mTimeZone ) ;
Distance : 5

31
Tree	Calendar mLocale = new Calendar ( mTimeZone ) ;
Code	Calendar mLocale = new Calendar ( mTimeZone ) ;
Distance : 4

32
Tree	Calendar c = mLocale . nextInt ( mTimeZone ) ;
Code	Calendar c = mLocale . nextInt ( mTimeZone ) ;
Distance : 5

33
Tree	Calendar c = mLocale . getLastInvocation ( mTimeZone ) ;
Code	Calendar c = mLocale . getLastInvocation ( mTimeZone ) ;
Distance : 5

34
Tree	Calendar c = mLocale . GregorianCalendar ( mTimeZone ) ;
Code	Calendar c = mLocale . GregorianCalendar ( mTimeZone ) ;
Distance : 4

35
Tree	Calendar c = mLocale . hourMinuteSecondFraction ( mTimeZone ) ;
Code	Calendar c = mLocale . hourMinuteSecondFraction ( mTimeZone ) ;
Distance : 5

36
Tree	Calendar c = mLocale . get ( mTimeZone ) ;
Code	Calendar c = mLocale . get ( mTimeZone ) ;
Distance : 5

37
Tree	static Calendar c = new GregorianCalendar ( mTimeZone ) ;
Code	static Calendar c = new GregorianCalendar ( mTimeZone ) ;
Distance : 3

38
Tree	Calendar c = mTimeZone . forPattern ( mTimeZone ) ;
Code	Calendar c = mTimeZone . forPattern ( mTimeZone ) ;
Distance : 5

39
Tree	Calendar c = mLocale . millis ( mTimeZone ) ;
Code	Calendar c = mLocale . millis ( mTimeZone ) ;
Distance : 5

40
Tree	Calendar c = new GregorianCalendar ( mTimeZone , true ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , true ) ;
Distance : 1

41
Tree	abstract Calendar c = new GregorianCalendar ( mTimeZone ) ;
Code	abstract Calendar c = new GregorianCalendar ( mTimeZone ) ;
Distance : 3

42
Tree	Calendar c = new Calendar ( mLocale , mTimeZone ) ;
Code	Calendar c = new Calendar ( mLocale , mTimeZone ) ;
Distance : 3

43
Tree	Calendar c = c . toString ( mTimeZone ) ;
Code	Calendar c = c . toString ( mTimeZone ) ;
Distance : 5

44
Tree	Calendar c = c . getInstance ( mTimeZone , mLocale ) ;
Code	Calendar c = c . getInstance ( mTimeZone , mLocale ) ;
Distance : 3

45
Tree	Calendar c = mLocale . getWanted ( mTimeZone ) ;
Code	Calendar c = mLocale . getWanted ( mTimeZone ) ;
Distance : 5

46
Tree	Calendar c = mTimeZone . getDateFormatSymbols ( mTimeZone ) ;
Code	Calendar c = mTimeZone . getDateFormatSymbols ( mTimeZone ) ;
Distance : 5

47
Tree	public Calendar c = new GregorianCalendar ( mTimeZone ) ;
Code	public Calendar c = new GregorianCalendar ( mTimeZone ) ;
Distance : 3

48
Tree	Calendar c = mLocale . getOne ( mTimeZone ) ;
Code	Calendar c = mLocale . getOne ( mTimeZone ) ;
Distance : 5

49
Tree	GregorianCalendar c = c . getInstance ( mTimeZone ) ;
Code	GregorianCalendar c = c . getInstance ( mTimeZone ) ;
Distance : 6

50
Tree	Calendar c = mLocale . getTime ( mTimeZone ) ;
Code	Calendar c = mLocale . getTime ( mTimeZone ) ;
Distance : 5

51
Tree	Calendar c = mLocale . standard ( mTimeZone ) ;
Code	Calendar c = mLocale . standard ( mTimeZone ) ;
Distance : 5

52
Tree	Calendar c = mLocale . getFragmentInHours ( mTimeZone ) ;
Code	Calendar c = mLocale . getFragmentInHours ( mTimeZone ) ;
Distance : 5

53
Tree	Calendar c = mLocale . argumentsToMatchers ( mTimeZone ) ;
Code	Calendar c = mLocale . argumentsToMatchers ( mTimeZone ) ;
Distance : 5

54
Tree	Calendar c = printInvocations () ;
Code	Calendar c = printInvocations () ;
Distance : 7

55
Tree	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . getLocalizedMessage ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . getLocalizedMessage ( STRING_CONSTANT ) ) ;
Distance : 5

56
Tree	Calendar c = initialize () ;
Code	Calendar c = initialize () ;
Distance : 7

57
Tree	Calendar c = GregorianCalendar () ;
Code	Calendar c = GregorianCalendar () ;
Distance : 6

58
Tree	Calendar c = createShorthandFunctionInObjLit () ;
Code	Calendar c = createShorthandFunctionInObjLit () ;
Distance : 7

59
Tree	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . i2s2 ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . i2s2 ( STRING_CONSTANT ) ) ;
Distance : 5

60
Tree	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . getPattern ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . getPattern ( STRING_CONSTANT ) ) ;
Distance : 5

61
Tree	Calendar c = anyObject () ;
Code	Calendar c = anyObject () ;
Distance : 7

62
Tree	Calendar c = hourMinuteSecondFraction () ;
Code	Calendar c = hourMinuteSecondFraction () ;
Distance : 7

63
Tree	Calendar c = getTickLength () ;
Code	Calendar c = getTickLength () ;
Distance : 7

64
Tree	Calendar c = mLocale . getInstance ( mTimeZone ) ;
Code	Calendar c = mLocale . getInstance ( mTimeZone ) ;
Distance : 5

65
Tree	Calendar c = printTimeZone () ;
Code	Calendar c = printTimeZone () ;
Distance : 7

66
Tree	GregorianCalendar c = new GregorianCalendar ( mTimeZone , mLocale . valueOf ( STRING_CONSTANT ) ) ;
Code	GregorianCalendar c = new GregorianCalendar ( mTimeZone , mLocale . valueOf ( STRING_CONSTANT ) ) ;
Distance : 6

67
Tree	GregorianCalendar c = describe () ;
Code	GregorianCalendar c = describe () ;
Distance : 8

68
Tree	Calendar c = findObjectWithNonStringifiableKey () ;
Code	Calendar c = findObjectWithNonStringifiableKey () ;
Distance : 7

69
Tree	Calendar c = new GregorianCalendar ( mTimeZone . argumentsToMatchers ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone . argumentsToMatchers ( STRING_CONSTANT ) ) ;
Distance : 5

70
Tree	Calendar c = new Calendar ( mTimeZone . dayOfWeek ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone . dayOfWeek ( STRING_CONSTANT ) ) ;
Distance : 6

71
Tree	Calendar c = new GregorianCalendar ( mTimeZone . getPreciseYearWeekType ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone . getPreciseYearWeekType ( STRING_CONSTANT ) ) ;
Distance : 5

72
Tree	Calendar c = new Calendar ( mTimeZone . lineSeparator ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone . lineSeparator ( STRING_CONSTANT ) ) ;
Distance : 6

73
Tree	Calendar c = new GregorianCalendar ( mTimeZone . getClass ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone . getClass ( STRING_CONSTANT ) ) ;
Distance : 5

74
Tree	Calendar c = new GregorianCalendar ( mTimeZone . getSimpleName ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone . getSimpleName ( STRING_CONSTANT ) ) ;
Distance : 5

75
Tree	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . getBytes ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . getBytes ( STRING_CONSTANT ) ) ;
Distance : 5

76
Tree	Calendar c = new GregorianCalendar ( mTimeZone , new int [ indirect ] ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , new int [ indirect ] ) ;
Distance : 5

77
Tree	GregorianCalendar c = new GregorianCalendar ( mTimeZone , mLocale . newBuilder ( STRING_CONSTANT ) ) ;
Code	GregorianCalendar c = new GregorianCalendar ( mTimeZone , mLocale . newBuilder ( STRING_CONSTANT ) ) ;
Distance : 6

78
Tree	Calendar c = new Calendar ( mTimeZone . create ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone . create ( STRING_CONSTANT ) ) ;
Distance : 6

79
Tree	Calendar c = new GregorianCalendar ( mTimeZone , new int [ Mockito.RETURNS_SMART_NULLS ] ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , new int [ Mockito.RETURNS_SMART_NULLS ] ) ;
Distance : 5

80
Tree	Calendar c = new Calendar ( mTimeZone . getString ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone . getString ( STRING_CONSTANT ) ) ;
Distance : 6

81
Tree	Calendar c = new GregorianCalendar ( mTimeZone . getInvocations ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone . getInvocations ( STRING_CONSTANT ) ) ;
Distance : 5

82
Tree	Calendar c = new GregorianCalendar ( mTimeZone . getGmtTimeZone ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone . getGmtTimeZone ( STRING_CONSTANT ) ) ;
Distance : 5

83
Tree	Calendar c = computeWeightedJacobian () ;
Code	Calendar c = computeWeightedJacobian () ;
Distance : 7

84
Tree	protected Calendar c = new GregorianCalendar ( mLocale ) ;
Code	protected Calendar c = new GregorianCalendar ( mLocale ) ;
Distance : 3

85
Tree	Calendar c = newParserConfig () ;
Code	Calendar c = newParserConfig () ;
Distance : 7

86
Tree	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . create ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . create ( STRING_CONSTANT ) ) ;
Distance : 5

87
Tree	Calendar c = trim () ;
Code	Calendar c = trim () ;
Distance : 7

88
Tree	Calendar c = getField () ;
Code	Calendar c = getField () ;
Distance : 7

89
Tree	protected GregorianCalendar c = new GregorianCalendar ( mTimeZone ) ;
Code	protected GregorianCalendar c = new GregorianCalendar ( mTimeZone ) ;
Distance : 4

90
Tree	Calendar c = newlineJoin () ;
Code	Calendar c = newlineJoin () ;
Distance : 7

91
Tree	Calendar c = getTime () ;
Code	Calendar c = getTime () ;
Distance : 7

92
Tree	Calendar c = new Calendar ( mTimeZone , mLocale . getChronology ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale . getChronology ( STRING_CONSTANT ) ) ;
Distance : 6

93
Tree	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . Verification.EXPLICIT ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . Verification.EXPLICIT ( STRING_CONSTANT ) ) ;
Distance : 5

94
Tree	Calendar c = lines () ;
Code	Calendar c = lines () ;
Distance : 7

95
Tree	Calendar c = createPattern () ;
Code	Calendar c = createPattern () ;
Distance : 7

96
Tree	Calendar c = getOne () ;
Code	Calendar c = getOne () ;
Distance : 7

97
Tree	Calendar c = new GregorianCalendar ( mTimeZone , new Calendar [ NUMBER_CONSTANT ] ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , new Calendar [ NUMBER_CONSTANT ] ) ;
Distance : 5

98
Tree	Calendar c = new Calendar ( mLocale , mLocale ) ;
Code	Calendar c = new Calendar ( mLocale , mLocale ) ;
Distance : 2

99
Tree	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . getString ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , mLocale . getString ( STRING_CONSTANT ) ) ;
Distance : 5

========================================================================


========================================================================
Example Number: 47
Parent Code is: 
if ( chars [ i ] == CHAR_CONS  chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
-------------------------------------------------------------------------------
Child code is: 
if ( chars [ i ] == CHAR_CONS  chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp && ! hasDecPoint ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (2 (801{val=chars}) (221{val=[}) (800{val=i}) (222{val=]})) (236{val===}) (13{val=CHAR_CONS})) (250{val=||}) (27 (2 (801{val=chars}) (221{val=[}) (800{val=i}) (222{val=]})) (236{val===}) (13{val=CHAR_CONS}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (27 (800{val=foundDigit}) (249{val=&&}) (38 (207{val=!}) (800{val=hasExp}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (2 (801{val=chars}) (221{val=[}) (800{val=i}) (222{val=]})) (236{val===}) (13{val=CHAR_CONS})) (250{val=||}) (27 (2 (801{val=chars}) (221{val=[}) (800{val=i}) (222{val=]})) (236{val===}) (13{val=CHAR_CONS}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (27 (800{val=foundDigit}) (249{val=&&}) (38 (207{val=!}) (800{val=hasExp})) (249{val=&&}) (38 (207{val=!}) (800{val=hasDecPoint}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/24/parent/src_main_java_org_apache_commons_lang3_math_NumberUtils.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } test
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } test
Distance : 5

1
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } i
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } i
Distance : 5

2
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } T
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } T
Distance : 5

3
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } &&
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } &&
Distance : 5

4
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } <>
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } <>
Distance : 5

5
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } array
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } array
Distance : 5

6
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } ]
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } ]
Distance : 5

7
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } MathRuntimeException
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } MathRuntimeException
Distance : 5

8
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } Object
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } Object
Distance : 5

9
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } createIllegalArgumentException
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } createIllegalArgumentException
Distance : 5

10
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } parent
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } parent
Distance : 5

11
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } testSame
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } testSame
Distance : 5

12
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } x
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } x
Distance : 5

13
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } Override
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } Override
Distance : 5

14
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } mock
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } mock
Distance : 5

15
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } class
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } class
Distance : 5

16
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } {}
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } {}
Distance : 5

17
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } @
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } @
Distance : 5

18
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } [
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } [
Distance : 5

19
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } Preconditions
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } Preconditions
Distance : 5

20
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } -
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } -
Distance : 5

21
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } mode
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } mode
Distance : 5

22
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } checkState
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } checkState
Distance : 5

23
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } true
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } true
Distance : 5

24
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } double
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } double
Distance : 5

25
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } value
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } value
Distance : 5

26
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! i ; }
Distance : 5

27
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! hasExp ; }
Distance : 5

28
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Distance : 4

29
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! i ; }
Distance : 6

30
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! i ; }
Distance : 5

31
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! hasExp ; }
Distance : 5

32
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! i ; }
Distance : 6

33
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Distance : 4

34
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! hasExp ; }
Distance : 5

35
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Distance : 4

36
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! i ; }
Distance : 6

37
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! i ; }
Distance : 5

38
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! hasExp ; }
Distance : 5

39
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! i ; }
Distance : 5

40
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } !=
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } !=
Distance : 5

41
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } ParamChecks
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } ParamChecks
Distance : 5

42
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } f
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } f
Distance : 5

43
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } nullNotPermitted
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } nullNotPermitted
Distance : 5

44
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } []
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } []
Distance : 5

45
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } !
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } !
Distance : 5

46
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } assertEquals
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } assertEquals
Distance : 5

47
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } super
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } super
Distance : 5

48
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } m
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } m
Distance : 5

49
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Distance : 4

50
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } :
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } :
Distance : 5

51
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } .
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } .
Distance : 5

52
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } ,
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } ,
Distance : 5

53
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } false
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } false
Distance : 5

54
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } int
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } int
Distance : 5

55
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } public
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } public
Distance : 5

56
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! i ; }
Distance : 6

57
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } )
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } )
Distance : 5

58
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } result
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } result
Distance : 5

59
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } List
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } List
Distance : 5

60
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } Args
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } Args
Distance : 5

61
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } fail
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } fail
Distance : 5

62
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } try
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } try
Distance : 5

63
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } type
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } type
Distance : 5

64
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } *
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } *
Distance : 5

65
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } <
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } <
Distance : 5

66
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } ;
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } ;
Distance : 5

67
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } this
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } this
Distance : 5

68
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } }
Distance : 5

69
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } <blank>
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } <blank>
Distance : 5

70
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } final
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } final
Distance : 5

71
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } >
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } >
Distance : 5

72
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } null
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } null
Distance : 5

73
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } return
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } return
Distance : 5

74
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } NUMBER_CONSTANT
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } NUMBER_CONSTANT
Distance : 5

75
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } STRING_CONSTANT
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } STRING_CONSTANT
Distance : 5

76
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } +
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } +
Distance : 5

77
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } {
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } {
Distance : 5

78
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } ()
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } ()
Distance : 5

79
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } }
Distance : 5

80
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } =
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } =
Distance : 5

81
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } (
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } (
Distance : 5

82
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } <s>
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } <s>
Distance : 5

83
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } new
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } new
Distance : 5

84
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } throw
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } throw
Distance : 5

85
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } if
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } if
Distance : 5

86
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } compiler
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } compiler
Distance : 5

87
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } String
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } String
Distance : 5

88
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } e
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } e
Distance : 5

89
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } n
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } n
Distance : 5

90
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } catch
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } catch
Distance : 5

91
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } paint
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } paint
Distance : 5

92
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } ==
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } ==
Distance : 5

93
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } ArrayList
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } ArrayList
Distance : 5

94
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } fireChangeEvent
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } fireChangeEvent
Distance : 5

95
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } getInstance
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } getInstance
Distance : 5

96
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } serialised
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } serialised
Distance : 5

97
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } join
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } join
Distance : 5

98
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } void
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } void
Distance : 5

99
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } boolean
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; } boolean
Distance : 5

========================================================================


========================================================================
Example Number: 48
Parent Code is: 
cal1 . get ( Calendar.HOUR ) == cal2 . get ( Calendar.HOUR )
-------------------------------------------------------------------------------
Child code is: 
cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (32 (800{val=cal1}) (235{val=.}) (802{val=get}) (214{val=(}) (40{val=Calendar.HOUR}) (215{val=)})) (236{val===}) (32 (800{val=cal2}) (235{val=.}) (802{val=get}) (214{val=(}) (40{val=Calendar.HOUR}) (215{val=)}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (32 (800{val=cal1}) (235{val=.}) (802{val=get}) (214{val=(}) (40{val=Calendar.HOUR_OF_DAY}) (215{val=)})) (236{val===}) (32 (800{val=cal2}) (235{val=.}) (802{val=get}) (214{val=(}) (40{val=Calendar.HOUR_OF_DAY}) (215{val=)}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/21/parent/src_main_java_org_apache_commons_lang3_time_DateUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	get . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY getInstance
Code	get . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY getInstance
Distance : 8

1
Tree	get . get ( Calendar.HOUR ) . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY ( get
Code	get . get ( Calendar.HOUR ) . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY ( get
Distance : 9

2
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR ) cal2 get . Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR ) cal2 get . Calendar.HOUR_OF_DAY
Distance : 7

3
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR ) cal2 get ( Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR ) cal2 get ( Calendar.HOUR_OF_DAY
Distance : 8

4
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 get ( get
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 get ( get
Distance : 6

5
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) cal2 get get get
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) cal2 get get get
Distance : 7

6
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR ) cal2 get get get
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR ) cal2 get get get
Distance : 7

7
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR ) cal2 get get get
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR ) cal2 get get get
Distance : 8

8
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) )
Distance : 2

9
Tree	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) fail
Code	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) fail
Distance : 7

10
Tree	get < cal2 . get ( Calendar.HOUR_OF_DAY ) checkArgument
Code	get < cal2 . get ( Calendar.HOUR_OF_DAY ) checkArgument
Distance : 7

11
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY get get
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY get get
Distance : 7

12
Tree	get < cal2 . get ( Calendar.HOUR_OF_DAY ) data
Code	get < cal2 . get ( Calendar.HOUR_OF_DAY ) data
Distance : 7

13
Tree	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) Args
Code	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) Args
Distance : 7

14
Tree	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) array
Code	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) array
Distance : 7

15
Tree	. < cal2 . get ( Calendar.HOUR_OF_DAY ) <>
Code	. < cal2 . get ( Calendar.HOUR_OF_DAY ) <>
Distance : 7

16
Tree	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) try
Code	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) try
Distance : 7

17
Tree	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) paint
Code	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) paint
Distance : 7

18
Tree	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) m
Code	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) m
Distance : 7

19
Tree	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) join
Code	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) join
Distance : 7

20
Tree	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) str
Code	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) str
Distance : 7

21
Tree	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) LINE_JOINER
Code	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) LINE_JOINER
Distance : 7

22
Tree	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) testSame
Code	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) testSame
Distance : 7

23
Tree	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) List
Code	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) List
Distance : 7

24
Tree	get < cal2 . get ( Calendar.HOUR_OF_DAY ) x
Code	get < cal2 . get ( Calendar.HOUR_OF_DAY ) x
Distance : 7

25
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) cal2 get get Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) cal2 get get Calendar.HOUR_OF_DAY
Distance : 7

26
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( get
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( get
Distance : 7

27
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 get + continue;
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 get + continue;
Distance : 6

28
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + sample
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + sample
Distance : 6

29
Tree	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + values
Code	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + values
Distance : 7

30
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + locale
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + locale
Distance : 6

31
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get get
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get get
Distance : 6

32
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 get cal2 Calendar.HOUR_OF_DAY + Printable
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 get cal2 Calendar.HOUR_OF_DAY + Printable
Distance : 5

33
Tree	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + expected
Code	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + expected
Distance : 7

34
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + TypeParameters
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + TypeParameters
Distance : 6

35
Tree	get . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 get + Printable
Code	get . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 get + Printable
Distance : 8

36
Tree	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + MISSING_PROVIDE_WARNING
Code	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + MISSING_PROVIDE_WARNING
Distance : 7

37
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 get ( Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 get ( Calendar.HOUR_OF_DAY
Distance : 6

38
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + actual
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + actual
Distance : 6

39
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + args
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + args
Distance : 6

40
Tree	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + residualsWeights
Code	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + residualsWeights
Distance : 7

41
Tree	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + methodProxy
Code	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + methodProxy
Distance : 7

42
Tree	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + extends
Code	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + extends
Distance : 7

43
Tree	get . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + Var
Code	get . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + Var
Distance : 7

44
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + throws
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + throws
Distance : 6

45
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + /
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + /
Distance : 6

46
Tree	get . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + next
Code	get . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + next
Distance : 8

47
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 get + ?
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 get + ?
Distance : 6

48
Tree	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 get + continue;
Code	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 get + continue;
Distance : 7

49
Tree	get . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + ++
Code	get . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + ++
Distance : 8

50
Tree	boolean cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ; true
Code	boolean cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ; true
Distance : 9

51
Tree	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) ArrayList
Code	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) ArrayList
Distance : 7

52
Tree	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) boolean
Code	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) boolean
Distance : 7

53
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) e
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) e
Distance : 2

54
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) n
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) n
Distance : 2

55
Tree	get . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) return
Code	get . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) return
Distance : 3

56
Tree	get . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) NUMBER_CONSTANT
Code	get . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) NUMBER_CONSTANT
Distance : 3

57
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) STRING_CONSTANT
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) STRING_CONSTANT
Distance : 2

58
Tree	. . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) new
Code	. . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) new
Distance : 3

59
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) public
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) public
Distance : 2

60
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) >
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) >
Distance : 2

61
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) null
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) null
Distance : 2

62
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) +
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) +
Distance : 2

63
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) String
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) String
Distance : 2

64
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) &&
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) &&
Distance : 2

65
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) i
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) i
Distance : 2

66
Tree	get . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) value
Code	get . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) value
Distance : 3

67
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) List
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) List
Distance : 2

68
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) Args
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) Args
Distance : 2

69
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) fail
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) fail
Distance : 2

70
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) try
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) try
Distance : 2

71
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) type
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) type
Distance : 2

72
Tree	get . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) *
Code	get . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) *
Distance : 3

73
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) paint
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) paint
Distance : 2

74
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) join
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) join
Distance : 2

75
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) T
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) T
Distance : 2

76
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) str
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) str
Distance : 2

77
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) compiler
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) compiler
Distance : 2

78
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) double
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) double
Distance : 2

79
Tree	get < cal2 . get ( Calendar.HOUR_OF_DAY ) name
Code	get < cal2 . get ( Calendar.HOUR_OF_DAY ) name
Distance : 7

80
Tree	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) parent
Code	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) parent
Distance : 7

81
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) =
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) =
Distance : 2

82
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) (
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) (
Distance : 2

83
Tree	get . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) <s>
Code	get . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) <s>
Distance : 3

84
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) )
Distance : 2

85
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) <blank>
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) <blank>
Distance : 2

86
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) add
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) add
Distance : 2

87
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) <>
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) <>
Distance : 2

88
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) invocation
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) invocation
Distance : 2

89
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) LINE_JOINER
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) LINE_JOINER
Distance : 2

90
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) ,
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) ,
Distance : 2

91
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) checkState
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) checkState
Distance : 2

92
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) Override
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) Override
Distance : 2

93
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) mock
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) mock
Distance : 2

94
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) Object
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) Object
Distance : 2

95
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) class
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) class
Distance : 2

96
Tree	get . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) IllegalArgumentException
Code	get . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) IllegalArgumentException
Distance : 3

97
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) FastMath
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) FastMath
Distance : 2

98
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) expected
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) expected
Distance : 2

99
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) reportCodeChange
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) reportCodeChange
Distance : 2

========================================================================


========================================================================
Example Number: 49
Parent Code is: 
{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ pos += Character . charCount ( Character . codePointAt ( input , pt ) ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (7 (800{val=pos}) (237{val=+=}) (32 (800{val=Character}) (235{val=.}) (802{val=charCount}) (214{val=(}) (32 (800{val=Character}) (235{val=.}) (802{val=codePointAt}) (214{val=(}) (800{val=input}) (234{val=,}) (800{val=pos}) (215{val=)})) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (7 (800{val=pos}) (237{val=+=}) (32 (800{val=Character}) (235{val=.}) (802{val=charCount}) (214{val=(}) (32 (800{val=Character}) (235{val=.}) (802{val=codePointAt}) (214{val=(}) (800{val=input}) (234{val=,}) (800{val=pt}) (215{val=)})) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/6/parent/src_main_java_org_apache_commons_lang3_text_translate_CharSequenceTranslator.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ pos = Character . charCount ( input . codePointAt ( pos , pos ) ) ; }
Code	{ pos = Character . charCount ( input . codePointAt ( pos , pos ) ) ; }
Distance : 4

1
Tree	{ pos = Character . charCount ( pt . codePointAt ( pos , pos ) ) ; }
Code	{ pos = Character . charCount ( pt . codePointAt ( pos , pos ) ) ; }
Distance : 4

2
Tree	{ pos = Character . codePointAt ( Character . codePointAt ( Character , input ) ) ; }
Code	{ pos = Character . codePointAt ( Character . codePointAt ( Character , input ) ) ; }
Distance : 4

3
Tree	{ pos = Character . codePointAt ( Character . charCount ( pos , pos ) ) ; }
Code	{ pos = Character . codePointAt ( Character . charCount ( pos , pos ) ) ; }
Distance : 5

4
Tree	{ pos . charCount ( pt . codePointAt ( input , input ) ) ; }
Code	{ pos . charCount ( pt . codePointAt ( input , input ) ) ; }
Distance : 4

5
Tree	{ pos . codePointAt ( input . charCount ( input , pos ) ) ; }
Code	{ pos . codePointAt ( input . charCount ( input , pos ) ) ; }
Distance : 6

6
Tree	{ pt = Character . charCount ( input . codePointAt ( Character , pos ) ) ; }
Code	{ pt = Character . charCount ( input . codePointAt ( Character , pos ) ) ; }
Distance : 5

7
Tree	{ pos . charCount ( Character . codePointAt ( pt , pt ) ) ; }
Code	{ pos . charCount ( Character . codePointAt ( pt , pt ) ) ; }
Distance : 3

8
Tree	{ pos . codePointAt ( Character . charCount ( input , input ) ) ; }
Code	{ pos . codePointAt ( Character . charCount ( input , input ) ) ; }
Distance : 5

9
Tree	{ pos . charCount ( pos . charCount ( input , pos ) ) ; }
Code	{ pos . charCount ( pos . charCount ( input , pos ) ) ; }
Distance : 5

10
Tree	{ pt . codePointAt ( Character . codePointAt ( input , input ) ) ; }
Code	{ pt . codePointAt ( Character . codePointAt ( input , input ) ) ; }
Distance : 5

11
Tree	{ pt = Character . codePointAt ( input . codePointAt ( input , pos ) ) ; }
Code	{ pt = Character . codePointAt ( input . codePointAt ( input , pos ) ) ; }
Distance : 5

12
Tree	{ pt . codePointAt ( input . codePointAt ( input , pos ) ) ; }
Code	{ pt . codePointAt ( input . codePointAt ( input , pos ) ) ; }
Distance : 6

13
Tree	{ pt = Character . codePointAt ( Character . codePointAt ( pos , pos ) ) ; }
Code	{ pt = Character . codePointAt ( Character . codePointAt ( pos , pos ) ) ; }
Distance : 5

14
Tree	{ pt . charCount ( Character . charCount ( pos , pos ) ) ; }
Code	{ pt . charCount ( Character . charCount ( pos , pos ) ) ; }
Distance : 6

15
Tree	{ pos . codePointAt ( Character . codePointAt ( Character , Character ) ) ; }
Code	{ pos . codePointAt ( Character . codePointAt ( Character , Character ) ) ; }
Distance : 5

16
Tree	{ pos = pt . codePointAt ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ pos = pt . codePointAt ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 5

17
Tree	{ pt = Character . charCount ( pos . codePointAt ( input , pos ) ) ; }
Code	{ pt = Character . charCount ( pos . codePointAt ( input , pos ) ) ; }
Distance : 4

18
Tree	{ throw pos . charCount ( input , pos . codePointAt ( pos , pos ) , Character ) ; }
Code	{ throw pos . charCount ( input , pos . codePointAt ( pos , pos ) , Character ) ; }
Distance : 10

19
Tree	{ throw input . charCount ( Character , pos . codePointAt ( Character , pos ) , Character ) ; }
Code	{ throw input . charCount ( Character , pos . codePointAt ( Character , pos ) , Character ) ; }
Distance : 9

20
Tree	{ throw pos . codePointAt ( Character , pos . charCount ( input , pos ) , pos ) ; }
Code	{ throw pos . codePointAt ( Character , pos . charCount ( input , pos ) , pos ) ; }
Distance : 10

21
Tree	{ pt = Character . charCount ( Character . charCount ( Character , pos ) ) ; }
Code	{ pt = Character . charCount ( Character . charCount ( Character , pos ) ) ; }
Distance : 5

22
Tree	{ throw pos . charCount ( input , pos . codePointAt ( input , pos ) , pt ) ; }
Code	{ throw pos . charCount ( input , pos . codePointAt ( input , pos ) , pt ) ; }
Distance : 9

23
Tree	{ throw pt . charCount ( Character , input . codePointAt ( input , pos ) , Character ) ; }
Code	{ throw pt . charCount ( Character , input . codePointAt ( input , pos ) , Character ) ; }
Distance : 8

24
Tree	{ throw pos . charCount ( Character , Character . charCount ( input , pos ) , Character ) ; }
Code	{ throw pos . charCount ( Character , Character . charCount ( input , pos ) , Character ) ; }
Distance : 9

25
Tree	{ pos . charCount ( pos . codePointAt ( Character , pos ) ) ; }
Code	{ pos . charCount ( pos . codePointAt ( Character , pos ) ) ; }
Distance : 5

26
Tree	{ throw pos . charCount ( Character , pos . charCount ( pt , pos ) , Character ) ; }
Code	{ throw pos . charCount ( Character , pos . charCount ( pt , pos ) , Character ) ; }
Distance : 10

27
Tree	{ throw pos . charCount ( Character , pos . codePointAt ( input , pt ) , pos ) ; }
Code	{ throw pos . charCount ( Character , pos . codePointAt ( input , pt ) , pos ) ; }
Distance : 7

28
Tree	{ throw pos . charCount ( pt , pos . charCount ( input , pos ) , Character ) ; }
Code	{ throw pos . charCount ( pt , pos . charCount ( input , pos ) , Character ) ; }
Distance : 10

29
Tree	{ pos . codePointAt ( input . codePointAt ( Character , pos ) ) ; }
Code	{ pos . codePointAt ( input . codePointAt ( Character , pos ) ) ; }
Distance : 6

30
Tree	{ throw pos . charCount ( Character , pos . charCount ( input , input ) , Character ) ; }
Code	{ throw pos . charCount ( Character , pos . charCount ( input , input ) , Character ) ; }
Distance : 9

31
Tree	{ pos = Character . charCount ( pt . charCount ( input , pos ) ) ; }
Code	{ pos = Character . charCount ( pt . charCount ( input , pos ) ) ; }
Distance : 4

32
Tree	{ pos . codePointAt ( Character . codePointAt ( Character , input ) ) ; }
Code	{ pos . codePointAt ( Character . codePointAt ( Character , input ) ) ; }
Distance : 5

33
Tree	{ pt = pos . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pt = pos . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 4

34
Tree	{ throw pos . codePointAt ( input , pos . codePointAt ( Character , pos ) , Character ) ; }
Code	{ throw pos . codePointAt ( input , pos . codePointAt ( Character , pos ) , Character ) ; }
Distance : 11

35
Tree	{ throw Character . codePointAt ( Character , pos . codePointAt ( input , pos ) , Character ) ; }
Code	{ throw Character . codePointAt ( Character , pos . codePointAt ( input , pos ) , Character ) ; }
Distance : 8

36
Tree	{ throw pos . codePointAt ( Character , pt . codePointAt ( Character , pos ) , Character ) ; }
Code	{ throw pos . codePointAt ( Character , pt . codePointAt ( Character , pos ) , Character ) ; }
Distance : 10

37
Tree	{ pos = input . charCount ( Character . codePointAt ( input , pt ) ) ; }
Code	{ pos = input . charCount ( Character . codePointAt ( input , pt ) ) ; }
Distance : 2

38
Tree	{ Character . charCount ( Character . codePointAt ( pos , pos ) ) ; }
Code	{ Character . charCount ( Character . codePointAt ( pos , pos ) ) ; }
Distance : 4

39
Tree	{ pt . charCount ( pos . codePointAt ( input , pos ) ) ; }
Code	{ pt . charCount ( pos . codePointAt ( input , pos ) ) ; }
Distance : 5

40
Tree	{ pos = input . charCount ( Character . charCount ( Character , pos ) ) ; }
Code	{ pos = input . charCount ( Character . charCount ( Character , pos ) ) ; }
Distance : 5

41
Tree	{ pos = Character . charCount ( input . codePointAt ( input , input ) ) ; }
Code	{ pos = Character . charCount ( input . codePointAt ( input , input ) ) ; }
Distance : 3

42
Tree	{ pos = Character . charCount ( input . codePointAt ( input , pt ) ) ; }
Code	{ pos = Character . charCount ( input . codePointAt ( input , pt ) ) ; }
Distance : 2

43
Tree	{ pos . charCount ( Character . charCount ( Character , pt ) ) ; }
Code	{ pos . charCount ( Character . charCount ( Character , pt ) ) ; }
Distance : 4

44
Tree	{ pt = Character . charCount ( Character . codePointAt ( pt , pos ) ) ; }
Code	{ pt = Character . charCount ( Character . codePointAt ( pt , pos ) ) ; }
Distance : 4

45
Tree	{ pos = Character . charCount ( Character . codePointAt ( pos , pt ) ) ; }
Code	{ pos = Character . charCount ( Character . codePointAt ( pos , pt ) ) ; }
Distance : 2

46
Tree	{ pos = input . charCount ( Character . codePointAt ( input , input ) ) ; }
Code	{ pos = input . charCount ( Character . codePointAt ( input , input ) ) ; }
Distance : 3

47
Tree	{ input = Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ input = Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 4

48
Tree	{ pt = Character . charCount ( Character . codePointAt ( input , Character ) ) ; }
Code	{ pt = Character . charCount ( Character . codePointAt ( input , Character ) ) ; }
Distance : 3

49
Tree	{ pos . codePointAt ( Character . charCount ( pos , pos ) ) ; }
Code	{ pos . codePointAt ( Character . charCount ( pos , pos ) ) ; }
Distance : 6

50
Tree	{ pos . charCount ( pt . codePointAt ( pos , pos ) ) ; }
Code	{ pos . charCount ( pt . codePointAt ( pos , pos ) ) ; }
Distance : 5

51
Tree	{ pt . charCount ( Character . codePointAt ( Character , pt ) ) ; }
Code	{ pt . charCount ( Character . codePointAt ( Character , pt ) ) ; }
Distance : 4

52
Tree	{ pos = Character . charCount ( pos . codePointAt ( Character , pos ) ) ; }
Code	{ pos = Character . charCount ( pos . codePointAt ( Character , pos ) ) ; }
Distance : 4

53
Tree	{ input = Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Code	{ input = Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Distance : 4

54
Tree	{ pos . codePointAt ( pos . codePointAt ( input , pos ) ) ; }
Code	{ pos . codePointAt ( pos . codePointAt ( input , pos ) ) ; }
Distance : 5

55
Tree	{ pos = Character . codePointAt ( input . codePointAt ( Character , pos ) ) ; }
Code	{ pos = Character . codePointAt ( input . codePointAt ( Character , pos ) ) ; }
Distance : 5

56
Tree	{ input . charCount ( Character . charCount ( input , pos ) ) ; }
Code	{ input . charCount ( Character . charCount ( input , pos ) ) ; }
Distance : 5

57
Tree	{ pos = pos . charCount ( Character . charCount ( input , pos ) ) ; }
Code	{ pos = pos . charCount ( Character . charCount ( input , pos ) ) ; }
Distance : 4

58
Tree	{ pt . codePointAt ( Character . codePointAt ( pos , pos ) ) ; }
Code	{ pt . codePointAt ( Character . codePointAt ( pos , pos ) ) ; }
Distance : 6

59
Tree	{ pos . charCount ( input . codePointAt ( input , input ) ) ; }
Code	{ pos . charCount ( input . codePointAt ( input , input ) ) ; }
Distance : 4

60
Tree	{ throw pos . codePointAt ( Character , pos . codePointAt ( input , input ) , Character ) ; }
Code	{ throw pos . codePointAt ( Character , pos . codePointAt ( input , input ) , Character ) ; }
Distance : 9

61
Tree	{ pos = Character . charCount ( Character . charCount ( input , Character ) ) ; }
Code	{ pos = Character . charCount ( Character . charCount ( input , Character ) ) ; }
Distance : 3

62
Tree	{ pt = input . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pt = input . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Distance : 5

63
Tree	{ pos . codePointAt ( Character . charCount ( input , pt ) ) ; }
Code	{ pos . codePointAt ( Character . charCount ( input , pt ) ) ; }
Distance : 4

64
Tree	{ pos . charCount ( pt . codePointAt ( input , pt ) ) ; }
Code	{ pos . charCount ( pt . codePointAt ( input , pt ) ) ; }
Distance : 3

65
Tree	{ pos = Character . charCount ( Character . codePointAt ( pos , input ) ) ; }
Code	{ pos = Character . charCount ( Character . codePointAt ( pos , input ) ) ; }
Distance : 3

66
Tree	{ pos = Character . codePointAt ( Character . codePointAt ( Character , pt ) ) ; }
Code	{ pos = Character . codePointAt ( Character . codePointAt ( Character , pt ) ) ; }
Distance : 3

67
Tree	{ pos = input . charCount ( pt . codePointAt ( input , pos ) ) ; }
Code	{ pos = input . charCount ( pt . codePointAt ( input , pos ) ) ; }
Distance : 4

68
Tree	{ pos . charCount ( Character . charCount ( Character , input ) ) ; }
Code	{ pos . charCount ( Character . charCount ( Character , input ) ) ; }
Distance : 5

69
Tree	{ pos = input . codePointAt ( Character . charCount ( input , pos ) ) ; }
Code	{ pos = input . codePointAt ( Character . charCount ( input , pos ) ) ; }
Distance : 5

70
Tree	{ Character = Character . charCount ( Character . charCount ( input , pos ) ) ; }
Code	{ Character = Character . charCount ( Character . charCount ( input , pos ) ) ; }
Distance : 4

71
Tree	{ pos . charCount ( input . charCount ( Character , pos ) ) ; }
Code	{ pos . charCount ( input . charCount ( Character , pos ) ) ; }
Distance : 6

72
Tree	{ pt = input . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ pt = input . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 5

73
Tree	{ pt . codePointAt ( Character . codePointAt ( input , pt ) ) ; }
Code	{ pt . codePointAt ( Character . codePointAt ( input , pt ) ) ; }
Distance : 4

74
Tree	{ pos = Character . charCount ( Character . charCount ( pt , pos ) ) ; }
Code	{ pos = Character . charCount ( Character . charCount ( pt , pos ) ) ; }
Distance : 4

75
Tree	{ pos . charCount ( Character . codePointAt ( pos , Character ) ) ; }
Code	{ pos . charCount ( Character . codePointAt ( pos , Character ) ) ; }
Distance : 4

76
Tree	{ pt . charCount ( Character . codePointAt ( Character , input ) ) ; }
Code	{ pt . charCount ( Character . codePointAt ( Character , input ) ) ; }
Distance : 5

77
Tree	{ pos = pt . charCount ( input . codePointAt ( input , pos ) ) ; }
Code	{ pos = pt . charCount ( input . codePointAt ( input , pos ) ) ; }
Distance : 4

78
Tree	{ pos . codePointAt ( pt . codePointAt ( Character , pos ) ) ; }
Code	{ pos . codePointAt ( pt . codePointAt ( Character , pos ) ) ; }
Distance : 6

79
Tree	{ pt . charCount ( input . codePointAt ( Character , pos ) ) ; }
Code	{ pt . charCount ( input . codePointAt ( Character , pos ) ) ; }
Distance : 6

80
Tree	{ pos = pt . charCount ( Character . codePointAt ( pos , pos ) ) ; }
Code	{ pos = pt . charCount ( Character . codePointAt ( pos , pos ) ) ; }
Distance : 4

81
Tree	{ pos = Character . codePointAt ( pos . codePointAt ( input , pos ) ) ; }
Code	{ pos = Character . codePointAt ( pos . codePointAt ( input , pos ) ) ; }
Distance : 4

82
Tree	{ pos . charCount ( input . codePointAt ( input , pt ) ) ; }
Code	{ pos . charCount ( input . codePointAt ( input , pt ) ) ; }
Distance : 3

83
Tree	{ throw pos . charCount ( Character , pt . codePointAt ( input , pos ) , pt ) ; }
Code	{ throw pos . charCount ( Character , pt . codePointAt ( input , pos ) , pt ) ; }
Distance : 8

84
Tree	{ throw pos . codePointAt ( Character , pos . codePointAt ( pt , pos ) , Character ) ; }
Code	{ throw pos . codePointAt ( Character , pos . codePointAt ( pt , pos ) , Character ) ; }
Distance : 10

85
Tree	{ pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; Character . codePointAt ( input ) ; }
Code	{ pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; Character . codePointAt ( input ) ; }
Distance : 9

86
Tree	{ pos = input . codePointAt ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ pos = input . codePointAt ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 5

87
Tree	{ throw pt . charCount ( Character , pos . codePointAt ( Character , pos ) , pt ) ; }
Code	{ throw pt . charCount ( Character , pos . codePointAt ( Character , pos ) , pt ) ; }
Distance : 9

88
Tree	{ throw pt . charCount ( Character , pos . codePointAt ( Character , pos ) , input ) ; }
Code	{ throw pt . charCount ( Character , pos . codePointAt ( Character , pos ) , input ) ; }
Distance : 9

89
Tree	{ Character = Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ Character = Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 4

90
Tree	{ throw pos . codePointAt ( pt , pos . codePointAt ( input , pos ) , Character ) ; }
Code	{ throw pos . codePointAt ( pt , pos . codePointAt ( input , pos ) , Character ) ; }
Distance : 10

91
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pt ) ) ; Character . charCount ( input ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pt ) ) ; Character . charCount ( input ) ; }
Distance : 7

92
Tree	{ throw pos . charCount ( input , pos . codePointAt ( input , pos ) , input ) ; }
Code	{ throw pos . charCount ( input , pos . codePointAt ( input , pos ) , input ) ; }
Distance : 9

93
Tree	{ throw pt . charCount ( Character , pos . codePointAt ( input , pt ) , Character ) ; }
Code	{ throw pt . charCount ( Character , pos . codePointAt ( input , pt ) , Character ) ; }
Distance : 7

94
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; input . charCount ( pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; input . charCount ( pos ) ; }
Distance : 8

95
Tree	{ throw pos . charCount ( Character , pt . codePointAt ( input , pos ) , input ) ; }
Code	{ throw pos . charCount ( Character , pt . codePointAt ( input , pos ) , input ) ; }
Distance : 8

96
Tree	{ pt += Character . charCount ( Character . codePointAt ( input , pos ) ) ; input . charCount ( Character ) ; }
Code	{ pt += Character . charCount ( Character . codePointAt ( input , pos ) ) ; input . charCount ( Character ) ; }
Distance : 9

97
Tree	{ throw pos . charCount ( Character , Character . codePointAt ( Character , pos ) , Character ) ; }
Code	{ throw pos . charCount ( Character , Character . codePointAt ( Character , pos ) , Character ) ; }
Distance : 9

98
Tree	{ pos += Character . charCount ( Character . charCount ( input , pos ) ) ; pt . charCount ( Character , pos ) ; }
Code	{ pos += Character . charCount ( Character . charCount ( input , pos ) ) ; pt . charCount ( Character , pos ) ; }
Distance : 11

99
Tree	{ pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; Character . codePointAt ( Character , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; Character . codePointAt ( Character , pos ) ; }
Distance : 11

========================================================================


========================================================================
Example Number: 50
Parent Code is: 
final CharSequence result = lookupMap . get ( subSeq ) ;
-------------------------------------------------------------------------------
Child code is: 
final CharSequence result = lookupMap . get ( subSeq . toString () ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (43 (801{val=CharSequence})) (59 (800{val=result}) (204{val==}) (32 (800{val=lookupMap}) (235{val=.}) (802{val=get}) (214{val=(}) (800{val=subSeq}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (43 (801{val=CharSequence})) (59 (800{val=result}) (204{val==}) (32 (800{val=lookupMap}) (235{val=.}) (802{val=get}) (214{val=(}) (32 (800{val=subSeq}) (235{val=.}) (802{val=toString}) (216{val=()})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/4/parent/src_main_java_org_apache_commons_lang3_text_translate_LookupTranslator.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	final CharSequence result = lookupMap . get () ;
Code	final CharSequence result = lookupMap . get () ;
Distance : 5

1
Tree	protected CharSequence result = lookupMap . get ( toString ( result ) ) ;
Code	protected CharSequence result = lookupMap . get ( toString ( result ) ) ;
Distance : 5

2
Tree	public CharSequence result = result . get ( ( subSeq < result > ) result ) ;
Code	public CharSequence result = result . get ( ( subSeq < result > ) result ) ;
Distance : 8

3
Tree	private CharSequence result = lookupMap . toString ( subSeq , result ) ;
Code	private CharSequence result = lookupMap . toString ( subSeq , result ) ;
Distance : 5

4
Tree	protected CharSequence result = lookupMap . get ( get () ) ;
Code	protected CharSequence result = lookupMap . get ( get () ) ;
Distance : 4

5
Tree	synchronized CharSequence result = lookupMap . get ( result ) ;
Code	synchronized CharSequence result = lookupMap . get ( result ) ;
Distance : 5

6
Tree	private CharSequence result = result . get ( ( subSeq < result > ) result ) ;
Code	private CharSequence result = result . get ( ( subSeq < result > ) result ) ;
Distance : 8

7
Tree	abstract CharSequence result = lookupMap . get ( ( result < lookupMap > ) = ) ;
Code	abstract CharSequence result = lookupMap . get ( ( result < lookupMap > ) = ) ;
Distance : 8

8
Tree	public CharSequence result = this . result . toString ( result ) ;
Code	public CharSequence result = this . result . toString ( result ) ;
Distance : 7

9
Tree	synchronized CharSequence result = lookupMap . get ( toString ( result ) ) ;
Code	synchronized CharSequence result = lookupMap . get ( toString ( result ) ) ;
Distance : 5

10
Tree	final CharSequence result = toString () . toString ( result ) ;
Code	final CharSequence result = toString () . toString ( result ) ;
Distance : 7

11
Tree	synchronized CharSequence result = lookupMap . get ( get () ) ;
Code	synchronized CharSequence result = lookupMap . get ( get () ) ;
Distance : 4

12
Tree	public CharSequence result = result . get ( result ) ;
Code	public CharSequence result = result . get ( result ) ;
Distance : 6

13
Tree	abstract CharSequence result = toString () . get ( result ) ;
Code	abstract CharSequence result = toString () . get ( result ) ;
Distance : 7

14
Tree	public CharSequence result = result . get ( toString ( result ) ) ;
Code	public CharSequence result = result . get ( toString ( result ) ) ;
Distance : 6

15
Tree	protected CharSequence result = result . get ( toString ( subSeq ) ) ;
Code	protected CharSequence result = result . get ( toString ( subSeq ) ) ;
Distance : 6

16
Tree	final CharSequence result = result . toString ( ( result < lookupMap > ) lookupMap ) ;
Code	final CharSequence result = result . toString ( ( result < lookupMap > ) lookupMap ) ;
Distance : 9

17
Tree	final CharSequence result = lookupMap . get ( null ) ;
Code	final CharSequence result = lookupMap . get ( null ) ;
Distance : 4

18
Tree	public CharSequence result = result . get ( subSeq . get ( subSeq ) ) ;
Code	public CharSequence result = result . get ( subSeq . get ( subSeq ) ) ;
Distance : 6

19
Tree	abstract CharSequence result = lookupMap . toString ( result . get () . get () ) ;
Code	abstract CharSequence result = lookupMap . toString ( result . get () . get () ) ;
Distance : 7

20
Tree	abstract CharSequence result = lookupMap . toString ( subSeq . toString () ) ;
Code	abstract CharSequence result = lookupMap . toString ( subSeq . toString () ) ;
Distance : 2

21
Tree	static CharSequence result = result . toString ( subSeq . get () . get () ) ;
Code	static CharSequence result = result . toString ( subSeq . get () . get () ) ;
Distance : 7

22
Tree	abstract CharSequence result = result . get ( subSeq , result . get () ) ;
Code	abstract CharSequence result = result . get ( subSeq , result . get () ) ;
Distance : 5

23
Tree	protected CharSequence result = lookupMap . get ( result . toString () . get () ) ;
Code	protected CharSequence result = lookupMap . get ( result . toString () . get () ) ;
Distance : 5

24
Tree	private CharSequence result = result . get ( subSeq . get ( subSeq ) ) ;
Code	private CharSequence result = result . get ( subSeq . get ( subSeq ) ) ;
Distance : 6

25
Tree	abstract CharSequence result = lookupMap . get ( result , lookupMap . get () ) ;
Code	abstract CharSequence result = lookupMap . get ( result , lookupMap . get () ) ;
Distance : 5

26
Tree	static CharSequence result = result . get ( subSeq , lookupMap . get () ) ;
Code	static CharSequence result = result . get ( subSeq , lookupMap . get () ) ;
Distance : 5

27
Tree	abstract CharSequence result = result . toString () ;
Code	abstract CharSequence result = result . toString () ;
Distance : 7

28
Tree	private CharSequence result = lookupMap . result ( result ) ;
Code	private CharSequence result = lookupMap . result ( result ) ;
Distance : 6

29
Tree	private CharSequence result = result . toString ( get ( subSeq ) ) ;
Code	private CharSequence result = result . toString ( get ( subSeq ) ) ;
Distance : 7

30
Tree	private CharSequence result = result . result ( subSeq ) ;
Code	private CharSequence result = result . result ( subSeq ) ;
Distance : 6

31
Tree	final CharSequence result = lookupMap . get ( toString ( result ) ) ;
Code	final CharSequence result = lookupMap . get ( toString ( result ) ) ;
Distance : 4

32
Tree	protected CharSequence result = result . get ( ( subSeq < lookupMap > ) result ) ;
Code	protected CharSequence result = result . get ( ( subSeq < lookupMap > ) result ) ;
Distance : 8

33
Tree	static CharSequence result = this . result . get ( subSeq ) ;
Code	static CharSequence result = this . result . get ( subSeq ) ;
Distance : 7

34
Tree	private CharSequence result = result . get ( ( subSeq < lookupMap > ) lookupMap ) ;
Code	private CharSequence result = result . get ( ( subSeq < lookupMap > ) lookupMap ) ;
Distance : 8

35
Tree	private CharSequence result = lookupMap . toString ( subSeq , lookupMap ) ;
Code	private CharSequence result = lookupMap . toString ( subSeq , lookupMap ) ;
Distance : 5

36
Tree	protected CharSequence result = lookupMap . toString ( get ( subSeq ) ) ;
Code	protected CharSequence result = lookupMap . toString ( get ( subSeq ) ) ;
Distance : 6

37
Tree	static CharSequence result = lookupMap . toString ( result , result ) ;
Code	static CharSequence result = lookupMap . toString ( result , result ) ;
Distance : 6

38
Tree	public CharSequence result = lookupMap . get ( ( result < result > ) result ) ;
Code	public CharSequence result = lookupMap . get ( ( result < result > ) result ) ;
Distance : 8

39
Tree	private CharSequence result = lookupMap . toString ( get ( result ) ) ;
Code	private CharSequence result = lookupMap . toString ( get ( result ) ) ;
Distance : 6

40
Tree	synchronized CharSequence result = result . get ( subSeq ) ;
Code	synchronized CharSequence result = result . get ( subSeq ) ;
Distance : 5

41
Tree	synchronized CharSequence result = toString () . get ( subSeq ) ;
Code	synchronized CharSequence result = toString () . get ( subSeq ) ;
Distance : 6

42
Tree	static CharSequence result = result . get ( ( subSeq < result > ) lookupMap ) ;
Code	static CharSequence result = result . get ( ( subSeq < result > ) lookupMap ) ;
Distance : 8

43
Tree	final CharSequence result = result . get ( result , result ) ;
Code	final CharSequence result = result . get ( result , result ) ;
Distance : 5

44
Tree	private CharSequence result = lookupMap . get ( ( result < result > ) result ) ;
Code	private CharSequence result = lookupMap . get ( ( result < result > ) result ) ;
Distance : 8

45
Tree	synchronized CharSequence result = lookupMap . result ( subSeq ) ;
Code	synchronized CharSequence result = lookupMap . result ( subSeq ) ;
Distance : 5

46
Tree	protected CharSequence result = lookupMap . get ( ( subSeq < result > ) result ) ;
Code	protected CharSequence result = lookupMap . get ( ( subSeq < result > ) result ) ;
Distance : 7

47
Tree	synchronized CharSequence result = lookupMap . toString ( get ( subSeq ) ) ;
Code	synchronized CharSequence result = lookupMap . toString ( get ( subSeq ) ) ;
Distance : 6

48
Tree	public CharSequence result = result . result ( subSeq ) ;
Code	public CharSequence result = result . result ( subSeq ) ;
Distance : 6

49
Tree	final CharSequence result = lookupMap . get ( subSeq ) ;
Code	final CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 3

50
Tree	final CharSequence result = this . subSeq . toString ( result ) ;
Code	final CharSequence result = this . subSeq . toString ( result ) ;
Distance : 5

51
Tree	static CharSequence result = result . get ( ( result < lookupMap > ) result ) ;
Code	static CharSequence result = result . get ( ( result < lookupMap > ) result ) ;
Distance : 9

52
Tree	public CharSequence result = result . toString ( get ( subSeq ) ) ;
Code	public CharSequence result = result . toString ( get ( subSeq ) ) ;
Distance : 7

53
Tree	public CharSequence result = lookupMap . result ( result ) ;
Code	public CharSequence result = lookupMap . result ( result ) ;
Distance : 6

54
Tree	synchronized CharSequence result = lookupMap . get ( ( subSeq < result > ) result ) ;
Code	synchronized CharSequence result = lookupMap . get ( ( subSeq < result > ) result ) ;
Distance : 7

55
Tree	protected CharSequence result = lookupMap . get ( result ) ;
Code	protected CharSequence result = lookupMap . get ( result ) ;
Distance : 5

56
Tree	static CharSequence result = new CharSequence ( this , result ) ;
Code	static CharSequence result = new CharSequence ( this , result ) ;
Distance : 8

57
Tree	public CharSequence result = lookupMap . toString ( subSeq , result ) ;
Code	public CharSequence result = lookupMap . toString ( subSeq , result ) ;
Distance : 5

58
Tree	static CharSequence result = lookupMap . get ( toString ( subSeq ) ) ;
Code	static CharSequence result = lookupMap . get ( toString ( subSeq ) ) ;
Distance : 5

59
Tree	private CharSequence result = result . get ( ( result < lookupMap > ) result ) ;
Code	private CharSequence result = result . get ( ( result < lookupMap > ) result ) ;
Distance : 9

60
Tree	abstract CharSequence result = result . toString ( result . get () ) ;
Code	abstract CharSequence result = result . toString ( result . get () ) ;
Distance : 5

61
Tree	final CharSequence result = result . toString ( result , lookupMap . get () ) ;
Code	final CharSequence result = result . toString ( result , lookupMap . get () ) ;
Distance : 6

62
Tree	synchronized CharSequence result = lookupMap . get () ;
Code	synchronized CharSequence result = lookupMap . get () ;
Distance : 6

63
Tree	protected CharSequence result = result . toString ( subSeq ) ;
Code	protected CharSequence result = result . toString ( subSeq ) ;
Distance : 6

64
Tree	static CharSequence result = result . toString ( result . get () ) ;
Code	static CharSequence result = result . toString ( result . get () ) ;
Distance : 5

65
Tree	final CharSequence result = result . toString ( result , result . get () ) ;
Code	final CharSequence result = result . toString ( result , result . get () ) ;
Distance : 6

66
Tree	protected CharSequence result = lookupMap . toString ( subSeq . get () ) ;
Code	protected CharSequence result = lookupMap . toString ( subSeq . get () ) ;
Distance : 3

67
Tree	static CharSequence result = lookupMap . get ( subSeq . get ( result ) ) ;
Code	static CharSequence result = lookupMap . get ( subSeq . get ( result ) ) ;
Distance : 5

68
Tree	static CharSequence result = lookupMap . get ( result , lookupMap ) ;
Code	static CharSequence result = lookupMap . get ( result , lookupMap ) ;
Distance : 5

69
Tree	static CharSequence result = lookupMap . get ( subSeq . get () . toString () ) ;
Code	static CharSequence result = lookupMap . get ( subSeq . get () . toString () ) ;
Distance : 4

70
Tree	final CharSequence result = result . get ( subSeq . toString () ) ;
Code	final CharSequence result = result . get ( subSeq . toString () ) ;
Distance : 1

71
Tree	synchronized CharSequence result = this . result . get ( result ) ;
Code	synchronized CharSequence result = this . result . get ( result ) ;
Distance : 8

72
Tree	private CharSequence result = this . subSeq . toString ( subSeq ) ;
Code	private CharSequence result = this . subSeq . toString ( subSeq ) ;
Distance : 6

73
Tree	static CharSequence result = result . get ( subSeq , result ) ;
Code	static CharSequence result = result . get ( subSeq , result ) ;
Distance : 5

74
Tree	public CharSequence result = this . subSeq . toString ( subSeq ) ;
Code	public CharSequence result = this . subSeq . toString ( subSeq ) ;
Distance : 6

75
Tree	CharSequence result = result . get ( result ) ;
Code	CharSequence result = result . get ( result ) ;
Distance : 6

76
Tree	public CharSequence result = lookupMap . toString ( subSeq . get () . get () ) ;
Code	public CharSequence result = lookupMap . toString ( subSeq . get () . get () ) ;
Distance : 6

77
Tree	public CharSequence result = result . get () ;
Code	public CharSequence result = result . get () ;
Distance : 7

78
Tree	final CharSequence result = lookupMap . toString ( result . get () . toString () ) ;
Code	final CharSequence result = lookupMap . toString ( result . get () . toString () ) ;
Distance : 5

79
Tree	final CharSequence result = lookupMap . toString ( result . get ( result ) ) ;
Code	final CharSequence result = lookupMap . toString ( result . get ( result ) ) ;
Distance : 6

80
Tree	private CharSequence result = lookupMap . toString ( result , lookupMap ) ;
Code	private CharSequence result = lookupMap . toString ( result , lookupMap ) ;
Distance : 6

81
Tree	synchronized CharSequence result = result . toString ( subSeq ) ;
Code	synchronized CharSequence result = result . toString ( subSeq ) ;
Distance : 6

82
Tree	final CharSequence result = result . toString ( result , result ) ;
Code	final CharSequence result = result . toString ( result , result ) ;
Distance : 6

83
Tree	synchronized CharSequence result = lookupMap . toString ( subSeq . get () ) ;
Code	synchronized CharSequence result = lookupMap . toString ( subSeq . get () ) ;
Distance : 3

84
Tree	private CharSequence result = result . get () ;
Code	private CharSequence result = result . get () ;
Distance : 7

85
Tree	private CharSequence result = lookupMap . toString ( subSeq . get () . get () ) ;
Code	private CharSequence result = lookupMap . toString ( subSeq . get () . get () ) ;
Distance : 6

86
Tree	public CharSequence result = lookupMap . get ( subSeq , lookupMap . get () ) ;
Code	public CharSequence result = lookupMap . get ( subSeq , lookupMap . get () ) ;
Distance : 4

87
Tree	public CharSequence result = toString () . toString ( subSeq ) ;
Code	public CharSequence result = toString () . toString ( subSeq ) ;
Distance : 7

88
Tree	abstract CharSequence result = lookupMap . get ( result , result ) ;
Code	abstract CharSequence result = lookupMap . get ( result , result ) ;
Distance : 5

89
Tree	abstract CharSequence result = get ( result ) ;
Code	abstract CharSequence result = get ( result ) ;
Distance : 7

90
Tree	private CharSequence result = lookupMap . get ( result . get ( subSeq ) ) ;
Code	private CharSequence result = lookupMap . get ( result . get ( subSeq ) ) ;
Distance : 6

91
Tree	abstract CharSequence result = lookupMap . get ( result , result . get () ) ;
Code	abstract CharSequence result = lookupMap . get ( result , result . get () ) ;
Distance : 5

92
Tree	static CharSequence result = result . get ( subSeq , lookupMap ) ;
Code	static CharSequence result = result . get ( subSeq , lookupMap ) ;
Distance : 5

93
Tree	abstract CharSequence result = lookupMap . get ( result , lookupMap ) ;
Code	abstract CharSequence result = lookupMap . get ( result , lookupMap ) ;
Distance : 5

94
Tree	abstract CharSequence result = lookupMap . get ( subSeq . get () . toString () ) ;
Code	abstract CharSequence result = lookupMap . get ( subSeq . get () . toString () ) ;
Distance : 4

95
Tree	final CharSequence result = lookupMap . toString ( ( subSeq < lookupMap > ) result ) ;
Code	final CharSequence result = lookupMap . toString ( ( subSeq < lookupMap > ) result ) ;
Distance : 7

96
Tree	abstract CharSequence result = result . get ( subSeq , result ) ;
Code	abstract CharSequence result = result . get ( subSeq , result ) ;
Distance : 5

97
Tree	static CharSequence result = lookupMap . toString ( toString () ) ;
Code	static CharSequence result = lookupMap . toString ( toString () ) ;
Distance : 4

98
Tree	synchronized CharSequence result = lookupMap . get ( result . toString () . get () ) ;
Code	synchronized CharSequence result = lookupMap . get ( result . toString () . get () ) ;
Distance : 5

99
Tree	protected CharSequence result = result . get ( result . toString () ) ;
Code	protected CharSequence result = result . get ( result . toString () ) ;
Distance : 3

========================================================================


========================================================================
Example Number: 51
Parent Code is: 
final int cols = problem . getAllParameters () . length ;
-------------------------------------------------------------------------------
Child code is: 
final int cols = problem . getUnboundParameters () . length ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (39{val=int}) (59 (800{val=cols}) (204{val==}) (22 (32 (800{val=problem}) (235{val=.}) (802{val=getAllParameters}) (216{val=()})) (235{val=.}) (800{val=length}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (39{val=int}) (59 (800{val=cols}) (204{val==}) (22 (32 (800{val=problem}) (235{val=.}) (802{val=getUnboundParameters}) (216{val=()})) (235{val=.}) (800{val=length}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/100/parent/src_java_org_apache_commons_math_estimation_AbstractEstimator.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	final int problem = problem . cols ( problem . getAllParameters () , length () ) ;
Code	final int problem = problem . cols ( problem . getAllParameters () , length () ) ;
Distance : 9

1
Tree	final double cols = problem . cols ( problem . getAllParameters () , final () ) ;
Code	final double cols = problem . cols ( problem . getAllParameters () , final () ) ;
Distance : 10

2
Tree	final double length = problem . getAllParameters ( new problem [ NUMBER_CONSTANT ] ) ;
Code	final double length = problem . getAllParameters ( new problem [ NUMBER_CONSTANT ] ) ;
Distance : 10

3
Tree	static length length = problem . getAllParameters () ;
Code	static length length = problem . getAllParameters () ;
Distance : 6

4
Tree	float [] length = cols . getAllParameters () ;
Code	float [] length = cols . getAllParameters () ;
Distance : 7

5
Tree	double [] [] length = length . getAllParameters () ;
Code	double [] [] length = length . getAllParameters () ;
Distance : 8

6
Tree	final boolean problem = problem . getAllParameters ( new problem [ NUMBER_CONSTANT ] ) ;
Code	final boolean problem = problem . getAllParameters ( new problem [ NUMBER_CONSTANT ] ) ;
Distance : 10

7
Tree	final char problem = problem . getAllParameters ( new length [ NUMBER_CONSTANT ] ) ;
Code	final char problem = problem . getAllParameters ( new length [ NUMBER_CONSTANT ] ) ;
Distance : 9

8
Tree	static byte cols = problem . getAllParameters ( new length [ NUMBER_CONSTANT ] ) ;
Code	static byte cols = problem . getAllParameters ( new length [ NUMBER_CONSTANT ] ) ;
Distance : 9

9
Tree	static problem problem = cols . getAllParameters () ;
Code	static problem problem = cols . getAllParameters () ;
Distance : 7

10
Tree	abstract int problem = problem . getAllParameters ( new cols [ NUMBER_CONSTANT ] ) ;
Code	abstract int problem = problem . getAllParameters ( new cols [ NUMBER_CONSTANT ] ) ;
Distance : 10

11
Tree	final int [] [] cols = problem . getAllParameters ( rValues ) ;
Code	final int [] [] cols = problem . getAllParameters ( rValues ) ;
Distance : 6

12
Tree	final int cols = problem . getAllParameters ( currentCase.caseBlock ) ;
Code	final int cols = problem . getAllParameters ( currentCase.caseBlock ) ;
Distance : 4

13
Tree	final int cols = problem . getAllParameters ( getNodeCount ) ;
Code	final int cols = problem . getAllParameters ( getNodeCount ) ;
Distance : 4

14
Tree	final int cols = problem . getAllParameters ( JSTypeNative.NULL_VOID ) ;
Code	final int cols = problem . getAllParameters ( JSTypeNative.NULL_VOID ) ;
Distance : 4

15
Tree	final int cols = problem . getAllParameters ( getFunctionMap ) ;
Code	final int cols = problem . getAllParameters ( getFunctionMap ) ;
Distance : 4

16
Tree	final int cols = problem . getAllParameters ( DiagnosticGroups.UNUSED_LOCAL_VARIABLE ) ;
Code	final int cols = problem . getAllParameters ( DiagnosticGroups.UNUSED_LOCAL_VARIABLE ) ;
Distance : 4

17
Tree	final int cols = problem . getAllParameters ( actualInvocationStackTrace ) ;
Code	final int cols = problem . getAllParameters ( actualInvocationStackTrace ) ;
Distance : 4

18
Tree	final int cols = problem . getAllParameters ( Token.GETELEM ) ;
Code	final int cols = problem . getAllParameters ( Token.GETELEM ) ;
Distance : 4

19
Tree	final int cols = problem . getAllParameters ( LocalizedFormats.OVERFLOW_IN_FRACTION ) ;
Code	final int cols = problem . getAllParameters ( LocalizedFormats.OVERFLOW_IN_FRACTION ) ;
Distance : 4

20
Tree	final int cols = problem . getAllParameters ( Node.TRANSPILED ) ;
Code	final int cols = problem . getAllParameters ( Node.TRANSPILED ) ;
Distance : 4

21
Tree	double cols = ( problem ) problem ;
Code	double cols = ( problem ) problem ;
Distance : 8

22
Tree	final int cols = problem . getAllParameters ( str.buffer ) ;
Code	final int cols = problem . getAllParameters ( str.buffer ) ;
Distance : 4

23
Tree	final int cols = problem . getAllParameters ( elementCompareTo ) ;
Code	final int cols = problem . getAllParameters ( elementCompareTo ) ;
Distance : 4

24
Tree	final int cols = problem . getAllParameters ( Cartesian1D.NEGATIVE_INFINITY ) ;
Code	final int cols = problem . getAllParameters ( Cartesian1D.NEGATIVE_INFINITY ) ;
Distance : 4

25
Tree	long [] problem = problem . getAllParameters () ;
Code	long [] problem = problem . getAllParameters () ;
Distance : 6

26
Tree	final int cols = problem . getAllParameters ( newSecantSolver ) ;
Code	final int cols = problem . getAllParameters ( newSecantSolver ) ;
Distance : 4

27
Tree	final int [] [] cols = problem . getAllParameters ( source.n ) ;
Code	final int [] [] cols = problem . getAllParameters ( source.n ) ;
Distance : 6

28
Tree	final int [] [] cols = problem . getAllParameters ( LocalizedFormats.NOT_POSITIVE_BETA ) ;
Code	final int [] [] cols = problem . getAllParameters ( LocalizedFormats.NOT_POSITIVE_BETA ) ;
Distance : 6

29
Tree	final int cols = problem . getAllParameters ( toURI ) ;
Code	final int cols = problem . getAllParameters ( toURI ) ;
Distance : 4

30
Tree	abstract byte cols = problem . getAllParameters ( new problem [ NUMBER_CONSTANT ] ) ;
Code	abstract byte cols = problem . getAllParameters ( new problem [ NUMBER_CONSTANT ] ) ;
Distance : 10

31
Tree	final char problem = problem . getAllParameters ( new problem [ NUMBER_CONSTANT ] ) ;
Code	final char problem = problem . getAllParameters ( new problem [ NUMBER_CONSTANT ] ) ;
Distance : 10

32
Tree	final boolean problem = problem . getAllParameters ( new length [ NUMBER_CONSTANT ] ) ;
Code	final boolean problem = problem . getAllParameters ( new length [ NUMBER_CONSTANT ] ) ;
Distance : 9

33
Tree	final problem length = cols . getAllParameters () ;
Code	final problem length = cols . getAllParameters () ;
Distance : 6

34
Tree	static boolean cols = problem . getAllParameters ( false , length ) ;
Code	static boolean cols = problem . getAllParameters ( false , length ) ;
Distance : 7

35
Tree	private double [] problem = problem . getAllParameters () ;
Code	private double [] problem = problem . getAllParameters () ;
Distance : 7

36
Tree	final short [] problem = problem . getAllParameters () ;
Code	final short [] problem = problem . getAllParameters () ;
Distance : 6

37
Tree	abstract int problem = problem . getAllParameters () - NUMBER_CONSTANT ;
Code	abstract int problem = problem . getAllParameters () - NUMBER_CONSTANT ;
Distance : 5

38
Tree	final int length = problem . getAllParameters ( false , cols ) ;
Code	final int length = problem . getAllParameters ( false , cols ) ;
Distance : 7

39
Tree	protected problem length = problem . getAllParameters () ;
Code	protected problem length = problem . getAllParameters () ;
Distance : 6

40
Tree	abstract int problem = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	abstract int problem = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

41
Tree	abstract byte cols = problem . getAllParameters () . length ;
Code	abstract byte cols = problem . getAllParameters () . length ;
Distance : 3

42
Tree	final char [] [] cols = cols . getAllParameters () ;
Code	final char [] [] cols = cols . getAllParameters () ;
Distance : 7

43
Tree	final double problem = problem . getAllParameters ( false , cols ) ;
Code	final double problem = problem . getAllParameters ( false , cols ) ;
Distance : 8

44
Tree	abstract double [] cols = problem . getAllParameters () ;
Code	abstract double [] cols = problem . getAllParameters () ;
Distance : 6

45
Tree	abstract char [] problem = problem . getAllParameters () ;
Code	abstract char [] problem = problem . getAllParameters () ;
Distance : 7

46
Tree	final boolean problem = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final boolean problem = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

47
Tree	final boolean problem = problem . getAllParameters () - NUMBER_CONSTANT ;
Code	final boolean problem = problem . getAllParameters () - NUMBER_CONSTANT ;
Distance : 5

48
Tree	final char cols = problem . getAllParameters ( false , cols ) ;
Code	final char cols = problem . getAllParameters ( false , cols ) ;
Distance : 7

49
Tree	float [] problem = cols . getAllParameters () ;
Code	float [] problem = cols . getAllParameters () ;
Distance : 7

50
Tree	void cols = cols . getAllParameters () ;
Code	void cols = cols . getAllParameters () ;
Distance : 6

51
Tree	private byte [] [] problem = problem . getAllParameters () ;
Code	private byte [] [] problem = problem . getAllParameters () ;
Distance : 8

52
Tree	final double length = problem . getAllParameters ( new cols [ NUMBER_CONSTANT ] ) ;
Code	final double length = problem . getAllParameters ( new cols [ NUMBER_CONSTANT ] ) ;
Distance : 10

53
Tree	static byte cols = problem . getAllParameters ( new cols [ NUMBER_CONSTANT ] ) ;
Code	static byte cols = problem . getAllParameters ( new cols [ NUMBER_CONSTANT ] ) ;
Distance : 10

54
Tree	final int cols = problem . problem ( problem . getAllParameters () , final () ) ;
Code	final int cols = problem . problem ( problem . getAllParameters () , final () ) ;
Distance : 9

55
Tree	int length = cols . getAllParameters () ;
Code	int length = cols . getAllParameters () ;
Distance : 6

56
Tree	static int problem = problem . getAllParameters ( true , length ) ;
Code	static int problem = problem . getAllParameters ( true , length ) ;
Distance : 7

57
Tree	final int length = problem . getAllParameters () ;
Code	final int length = problem . getAllParameters () ;
Distance : 4

58
Tree	final boolean cols = problem . getAllParameters () ;
Code	final boolean cols = problem . getAllParameters () ;
Distance : 4

59
Tree	float problem = ( problem ) length ;
Code	float problem = ( problem ) length ;
Distance : 8

60
Tree	static int problem = ( problem ) length ;
Code	static int problem = ( problem ) length ;
Distance : 7

61
Tree	long cols = ( problem ) problem ;
Code	long cols = ( problem ) problem ;
Distance : 8

62
Tree	boolean cols = ( problem ) cols ;
Code	boolean cols = ( problem ) cols ;
Distance : 8

63
Tree	byte cols = problem . getAllParameters () ;
Code	byte cols = problem . getAllParameters () ;
Distance : 5

64
Tree	final short cols = problem ;
Code	final short cols = problem ;
Distance : 6

65
Tree	short cols = problem . getAllParameters () ;
Code	short cols = problem . getAllParameters () ;
Distance : 5

66
Tree	synchronized int cols = ( problem ) length ;
Code	synchronized int cols = ( problem ) length ;
Distance : 6

67
Tree	protected int cols = problem ;
Code	protected int cols = problem ;
Distance : 6

68
Tree	long [] [] cols = problem . getAllParameters () ;
Code	long [] [] cols = problem . getAllParameters () ;
Distance : 6

69
Tree	final int problem = problem . getAllParameters ( false , length ) ;
Code	final int problem = problem . getAllParameters ( false , length ) ;
Distance : 6

70
Tree	abstract double cols = ( problem ) length ;
Code	abstract double cols = ( problem ) length ;
Distance : 7

71
Tree	char [] problem = problem . getAllParameters () ;
Code	char [] problem = problem . getAllParameters () ;
Distance : 6

72
Tree	final double cols = problem . getAllParameters ( false , length ) ;
Code	final double cols = problem . getAllParameters ( false , length ) ;
Distance : 6

73
Tree	long length = ( problem ) length ;
Code	long length = ( problem ) length ;
Distance : 8

74
Tree	final double length = ( problem ) length ;
Code	final double length = ( problem ) length ;
Distance : 7

75
Tree	final char problem = ( problem ) length ;
Code	final char problem = ( problem ) length ;
Distance : 7

76
Tree	boolean [] problem = problem . getAllParameters () ;
Code	boolean [] problem = problem . getAllParameters () ;
Distance : 6

77
Tree	final void cols = problem ;
Code	final void cols = problem ;
Distance : 6

78
Tree	final boolean problem = ( problem ) length ;
Code	final boolean problem = ( problem ) length ;
Distance : 7

79
Tree	final byte problem = problem ;
Code	final byte problem = problem ;
Distance : 7

80
Tree	final int problem = problem . getAllParameters () . length ;
Code	final int problem = problem . getAllParameters () . length ;
Distance : 2

81
Tree	final int problem = cols ;
Code	final int problem = cols ;
Distance : 7

82
Tree	abstract int problem = ( problem ) length ;
Code	abstract int problem = ( problem ) length ;
Distance : 7

83
Tree	char cols = ( problem ) problem ;
Code	char cols = ( problem ) problem ;
Distance : 8

84
Tree	final double cols = problem . getAllParameters () . length ;
Code	final double cols = problem . getAllParameters () . length ;
Distance : 2

85
Tree	double cols = ( cols ) length ;
Code	double cols = ( cols ) length ;
Distance : 7

86
Tree	int problem = ( problem ) problem ;
Code	int problem = ( problem ) problem ;
Distance : 8

87
Tree	float cols = problem . getAllParameters () ;
Code	float cols = problem . getAllParameters () ;
Distance : 5

88
Tree	final double cols = cols ;
Code	final double cols = cols ;
Distance : 7

89
Tree	byte cols = ( problem ) cols ;
Code	byte cols = ( problem ) cols ;
Distance : 8

90
Tree	static double cols = problem ;
Code	static double cols = problem ;
Distance : 7

91
Tree	static byte cols = ( problem ) length ;
Code	static byte cols = ( problem ) length ;
Distance : 7

92
Tree	short cols = ( problem ) cols ;
Code	short cols = ( problem ) cols ;
Distance : 8

93
Tree	final long problem = problem ;
Code	final long problem = problem ;
Distance : 7

94
Tree	final int cols = length ;
Code	final int cols = length ;
Distance : 5

95
Tree	boolean cols = ( problem ) problem ;
Code	boolean cols = ( problem ) problem ;
Distance : 8

96
Tree	public int cols = problem . getAllParameters () ;
Code	public int cols = problem . getAllParameters () ;
Distance : 4

97
Tree	static int problem = problem ;
Code	static int problem = problem ;
Distance : 7

98
Tree	char [] [] cols = problem . getAllParameters () ;
Code	char [] [] cols = problem . getAllParameters () ;
Distance : 6

99
Tree	final int problem = problem . getAllParameters () - NUMBER_CONSTANT ;
Code	final int problem = problem . getAllParameters () - NUMBER_CONSTANT ;
Distance : 4

========================================================================


========================================================================
Example Number: 52
Parent Code is: 
final BigDecimal [] out = new BigDecimal [ v.length ] ;
-------------------------------------------------------------------------------
Child code is: 
final BigDecimal [] out = new BigDecimal [ nRows ] ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (5 (43 (801{val=BigDecimal})) (85{val=[]})) (59 (800{val=out}) (204{val==}) (3 (304{val=new}) (5 (43 (801{val=BigDecimal})) (221{val=[})) (40{val=v.length}) (222{val=]}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (5 (43 (801{val=BigDecimal})) (85{val=[]})) (59 (800{val=out}) (204{val==}) (3 (304{val=new}) (5 (43 (801{val=BigDecimal})) (221{val=[})) (800{val=nRows}) (222{val=]}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/98/parent/src_java_org_apache_commons_math_linear_BigMatrixImpl.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Correct
========================================================================
True

0
Tree	final BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Distance : 1

1
Tree	final BigDecimal [] out = new BigDecimal [] Double ;
Code	final BigDecimal [] out = new BigDecimal [] Double ;
Distance : 3

2
Tree	final BigDecimal [] out = new BigDecimal [] boolean ;
Code	final BigDecimal [] out = new BigDecimal [] boolean ;
Distance : 3

3
Tree	final BigDecimal [] out = new BigDecimal [] isReturnTypeNullable ;
Code	final BigDecimal [] out = new BigDecimal [] isReturnTypeNullable ;
Distance : 3

4
Tree	final BigDecimal [] out = new BigDecimal [] FastDatePrinter ;
Code	final BigDecimal [] out = new BigDecimal [] FastDatePrinter ;
Distance : 3

5
Tree	final BigDecimal [] out = new BigDecimal [] getRowDimension ;
Code	final BigDecimal [] out = new BigDecimal [] getRowDimension ;
Distance : 3

6
Tree	final BigDecimal [] out = new BigDecimal [] assert ;
Code	final BigDecimal [] out = new BigDecimal [] assert ;
Distance : 3

7
Tree	final BigDecimal [] out = new BigDecimal [] InvocationImpl ;
Code	final BigDecimal [] out = new BigDecimal [] InvocationImpl ;
Distance : 3

8
Tree	final BigDecimal [] out = new BigDecimal [] LocalizedFormats.DIMENSIONS_MISMATCH_2x2 ;
Code	final BigDecimal [] out = new BigDecimal [] LocalizedFormats.DIMENSIONS_MISMATCH_2x2 ;
Distance : 3

9
Tree	final BigDecimal [] out = new BigDecimal [] deepClone ;
Code	final BigDecimal [] out = new BigDecimal [] deepClone ;
Distance : 3

10
Tree	final BigDecimal [] out = new BigDecimal [] public ;
Code	final BigDecimal [] out = new BigDecimal [] public ;
Distance : 3

11
Tree	final BigDecimal [] out = new BigDecimal [] getArguments ;
Code	final BigDecimal [] out = new BigDecimal [] getArguments ;
Distance : 3

12
Tree	final BigDecimal [] out = new BigDecimal [] method ;
Code	final BigDecimal [] out = new BigDecimal [] method ;
Distance : 3

13
Tree	final BigDecimal [] out = new BigDecimal [] else ;
Code	final BigDecimal [] out = new BigDecimal [] else ;
Distance : 3

14
Tree	final BigDecimal [] out = new BigDecimal [] floatValue ;
Code	final BigDecimal [] out = new BigDecimal [] floatValue ;
Distance : 3

15
Tree	final BigDecimal [] out = new BigDecimal [] doubleValue ;
Code	final BigDecimal [] out = new BigDecimal [] doubleValue ;
Distance : 3

16
Tree	final BigDecimal [] out = new BigDecimal [] - ;
Code	final BigDecimal [] out = new BigDecimal [] - ;
Distance : 3

17
Tree	final BigDecimal [] out = new BigDecimal [] v.length ;
Code	final BigDecimal [] out = new BigDecimal [] v.length ;
Distance : 3

18
Tree	final BigDecimal [] out = new BigDecimal [] toString ;
Code	final BigDecimal [] out = new BigDecimal [] toString ;
Distance : 3

19
Tree	final BigDecimal [] out = new BigDecimal [] continue; ;
Code	final BigDecimal [] out = new BigDecimal [] continue; ;
Distance : 3

20
Tree	final BigDecimal [] out = new BigDecimal [] other.value ;
Code	final BigDecimal [] out = new BigDecimal [] other.value ;
Distance : 3

21
Tree	final BigDecimal [] out = new BigDecimal [] searchStr ;
Code	final BigDecimal [] out = new BigDecimal [] searchStr ;
Distance : 3

22
Tree	final BigDecimal [] out = new BigDecimal [] denominator ;
Code	final BigDecimal [] out = new BigDecimal [] denominator ;
Distance : 3

23
Tree	final BigDecimal [] out = new BigDecimal [] / ;
Code	final BigDecimal [] out = new BigDecimal [] / ;
Distance : 3

24
Tree	final BigDecimal [] out = new BigDecimal [] Locale ;
Code	final BigDecimal [] out = new BigDecimal [] Locale ;
Distance : 3

25
Tree	final BigDecimal [] out = new BigDecimal [] TypeI ;
Code	final BigDecimal [] out = new BigDecimal [] TypeI ;
Distance : 3

26
Tree	final BigDecimal [] out = new BigDecimal [] MockitoMethod ;
Code	final BigDecimal [] out = new BigDecimal [] MockitoMethod ;
Distance : 3

27
Tree	final BigDecimal [] out = new BigDecimal [] LocalizedFormats.VECTOR_LENGTH_MISMATCH ;
Code	final BigDecimal [] out = new BigDecimal [] LocalizedFormats.VECTOR_LENGTH_MISMATCH ;
Distance : 3

28
Tree	final BigDecimal [] out = new BigDecimal [] isFunctionPrototypeType ;
Code	final BigDecimal [] out = new BigDecimal [] isFunctionPrototypeType ;
Distance : 3

29
Tree	final BigDecimal [] out = new BigDecimal [] values.length ;
Code	final BigDecimal [] out = new BigDecimal [] values.length ;
Distance : 3

30
Tree	final BigDecimal [] out = new BigDecimal [] with ;
Code	final BigDecimal [] out = new BigDecimal [] with ;
Distance : 3

31
Tree	final BigDecimal [] out = new BigDecimal [] diff ;
Code	final BigDecimal [] out = new BigDecimal [] diff ;
Distance : 3

32
Tree	final BigDecimal [] out = new BigDecimal [] case ;
Code	final BigDecimal [] out = new BigDecimal [] case ;
Distance : 3

33
Tree	final BigDecimal [] out = new BigDecimal [] ReadablePartial ;
Code	final BigDecimal [] out = new BigDecimal [] ReadablePartial ;
Distance : 3

34
Tree	final BigDecimal [] out = new BigDecimal [] break; ;
Code	final BigDecimal [] out = new BigDecimal [] break; ;
Distance : 3

35
Tree	final BigDecimal [] out = new BigDecimal [] resolve ;
Code	final BigDecimal [] out = new BigDecimal [] resolve ;
Distance : 3

36
Tree	final BigDecimal [] out = new BigDecimal [] factorial ;
Code	final BigDecimal [] out = new BigDecimal [] factorial ;
Distance : 3

37
Tree	final BigDecimal [] out = new BigDecimal [] min ;
Code	final BigDecimal [] out = new BigDecimal [] min ;
Distance : 3

38
Tree	final BigDecimal [] out = new BigDecimal [] createIllegalArgumentException ;
Code	final BigDecimal [] out = new BigDecimal [] createIllegalArgumentException ;
Distance : 3

39
Tree	final BigDecimal [] out = new BigDecimal [] N ;
Code	final BigDecimal [] out = new BigDecimal [] N ;
Distance : 3

40
Tree	final BigDecimal [] out = new BigDecimal [] final ;
Code	final BigDecimal [] out = new BigDecimal [] final ;
Distance : 3

41
Tree	final BigDecimal [] out = new BigDecimal [] JAVA_1_5 ;
Code	final BigDecimal [] out = new BigDecimal [] JAVA_1_5 ;
Distance : 3

42
Tree	final BigDecimal [] out = new BigDecimal [] DimensionMismatchException ;
Code	final BigDecimal [] out = new BigDecimal [] DimensionMismatchException ;
Distance : 3

43
Tree	final BigDecimal [] out = new BigDecimal [] j ;
Code	final BigDecimal [] out = new BigDecimal [] j ;
Distance : 3

44
Tree	final BigDecimal [] out = new BigDecimal [] hashCode ;
Code	final BigDecimal [] out = new BigDecimal [] hashCode ;
Distance : 3

45
Tree	final BigDecimal [] out = new BigDecimal [] &= ;
Code	final BigDecimal [] out = new BigDecimal [] &= ;
Distance : 3

46
Tree	final BigDecimal [] out = new BigDecimal [] doubleToRawLongBits ;
Code	final BigDecimal [] out = new BigDecimal [] doubleToRawLongBits ;
Distance : 3

47
Tree	final BigDecimal [] out = new BigDecimal [] + ;
Code	final BigDecimal [] out = new BigDecimal [] + ;
Distance : 3

48
Tree	final BigDecimal [] out = new BigDecimal [] throws ;
Code	final BigDecimal [] out = new BigDecimal [] throws ;
Distance : 3

49
Tree	final BigDecimal [] out = new BigDecimal [ nRows ] ;
Code	final BigDecimal [] out = new BigDecimal [ nRows ] ;
Distance : 0

50
Tree	final BigDecimal [] out = new BigDecimal [] Date ;
Code	final BigDecimal [] out = new BigDecimal [] Date ;
Distance : 3

51
Tree	final BigDecimal [] out = new BigDecimal [] /= ;
Code	final BigDecimal [] out = new BigDecimal [] /= ;
Distance : 3

52
Tree	final BigDecimal [] out = new BigDecimal [] *= ;
Code	final BigDecimal [] out = new BigDecimal [] *= ;
Distance : 3

53
Tree	final BigDecimal [] out = new BigDecimal [] * ;
Code	final BigDecimal [] out = new BigDecimal [] * ;
Distance : 3

54
Tree	final BigDecimal [] out = new BigDecimal [] & ;
Code	final BigDecimal [] out = new BigDecimal [] & ;
Distance : 3

55
Tree	final BigDecimal [] out = new BigDecimal [] += ;
Code	final BigDecimal [] out = new BigDecimal [] += ;
Distance : 3

56
Tree	final BigDecimal [] out = new BigDecimal [] out ] ;
Code	final BigDecimal [] out = new BigDecimal [] out ] ;
Distance : 2

57
Tree	final BigDecimal [] out = new BigDecimal [] CHAR_CONS ;
Code	final BigDecimal [] out = new BigDecimal [] CHAR_CONS ;
Distance : 3

58
Tree	final BigDecimal [] out = new BigDecimal [] % ;
Code	final BigDecimal [] out = new BigDecimal [] % ;
Distance : 3

59
Tree	final BigDecimal [] out = new BigDecimal [] >= ;
Code	final BigDecimal [] out = new BigDecimal [] >= ;
Distance : 3

60
Tree	final BigDecimal [] out = new BigDecimal [] ++ ;
Code	final BigDecimal [] out = new BigDecimal [] ++ ;
Distance : 3

61
Tree	final BigDecimal [] out = new BigDecimal [] <> ;
Code	final BigDecimal [] out = new BigDecimal [] <> ;
Distance : 3

62
Tree	final BigDecimal [] out = new BigDecimal [] equals ;
Code	final BigDecimal [] out = new BigDecimal [] equals ;
Distance : 3

63
Tree	final BigDecimal [] out = new BigDecimal [] super ;
Code	final BigDecimal [] out = new BigDecimal [] super ;
Distance : 3

64
Tree	final BigDecimal [] out = new BigDecimal [] isNaN ;
Code	final BigDecimal [] out = new BigDecimal [] isNaN ;
Distance : 3

65
Tree	final BigDecimal [] out = new BigDecimal [] ^ ;
Code	final BigDecimal [] out = new BigDecimal [] ^ ;
Distance : 3

66
Tree	final BigDecimal [] out = new BigDecimal [] extends ;
Code	final BigDecimal [] out = new BigDecimal [] extends ;
Distance : 3

67
Tree	final BigDecimal [] out = new BigDecimal [] @ ;
Code	final BigDecimal [] out = new BigDecimal [] @ ;
Distance : 3

68
Tree	final BigDecimal [] out = new BigDecimal [] %= ;
Code	final BigDecimal [] out = new BigDecimal [] %= ;
Distance : 3

69
Tree	final BigDecimal [] out = new BigDecimal [] getDimension ;
Code	final BigDecimal [] out = new BigDecimal [] getDimension ;
Distance : 3

70
Tree	final BigDecimal [] out = new BigDecimal [] [] ;
Code	final BigDecimal [] out = new BigDecimal [] [] ;
Distance : 3

71
Tree	final BigDecimal [] out = new BigDecimal [] ^= ;
Code	final BigDecimal [] out = new BigDecimal [] ^= ;
Distance : 3

72
Tree	final BigDecimal [] out = new BigDecimal [] nRows ] ;
Code	final BigDecimal [] out = new BigDecimal [] nRows ] ;
Distance : 1

73
Tree	final BigDecimal [] out = new BigDecimal [] ? ;
Code	final BigDecimal [] out = new BigDecimal [] ? ;
Distance : 3

74
Tree	final BigDecimal [] out = new BigDecimal [] {} ;
Code	final BigDecimal [] out = new BigDecimal [] {} ;
Distance : 3

75
Tree	final BigDecimal [] out = new BigDecimal [] numerator ;
Code	final BigDecimal [] out = new BigDecimal [] numerator ;
Distance : 3

76
Tree	final BigDecimal [] out = new BigDecimal [] getNumRepetitions ;
Code	final BigDecimal [] out = new BigDecimal [] getNumRepetitions ;
Distance : 3

77
Tree	final BigDecimal [] out = new BigDecimal [] <= ;
Code	final BigDecimal [] out = new BigDecimal [] <= ;
Distance : 3

78
Tree	final BigDecimal [] out = new BigDecimal [] -- ;
Code	final BigDecimal [] out = new BigDecimal [] -- ;
Distance : 3

79
Tree	final BigDecimal [] out = new BigDecimal [] int ;
Code	final BigDecimal [] out = new BigDecimal [] int ;
Distance : 3

80
Tree	final BigDecimal [] out = new BigDecimal [] end ;
Code	final BigDecimal [] out = new BigDecimal [] end ;
Distance : 3

81
Tree	final BigDecimal [] out = new BigDecimal [] CharRange ;
Code	final BigDecimal [] out = new BigDecimal [] CharRange ;
Distance : 3

82
Tree	final BigDecimal [] out = new BigDecimal [] binomialCoefficient ;
Code	final BigDecimal [] out = new BigDecimal [] binomialCoefficient ;
Distance : 3

83
Tree	final BigDecimal [] out = new BigDecimal [] instanceof ;
Code	final BigDecimal [] out = new BigDecimal [] instanceof ;
Distance : 3

84
Tree	final BigDecimal [] out = new BigDecimal [] mask ;
Code	final BigDecimal [] out = new BigDecimal [] mask ;
Distance : 3

85
Tree	final BigDecimal [] out = new BigDecimal [] -= ;
Code	final BigDecimal [] out = new BigDecimal [] -= ;
Distance : 3

86
Tree	final BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ; parent
Code	final BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ; parent
Distance : 2

87
Tree	final BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ; fireChangeEvent
Code	final BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ; fireChangeEvent
Distance : 2

88
Tree	final BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ; ArrayList
Code	final BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ; ArrayList
Distance : 2

89
Tree	final BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ; type
Code	final BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ; type
Distance : 2

90
Tree	final BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ; *
Code	final BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ; *
Distance : 2

91
Tree	final BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ; getInstance
Code	final BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ; getInstance
Distance : 2

92
Tree	final BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ; -
Code	final BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ; -
Distance : 2

93
Tree	final BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ; result
Code	final BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ; result
Distance : 2

94
Tree	final BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ; :
Code	final BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ; :
Distance : 2

95
Tree	final BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ; Preconditions
Code	final BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ; Preconditions
Distance : 2

96
Tree	final BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ; try
Code	final BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ; try
Distance : 2

97
Tree	final BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ; m
Code	final BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ; m
Distance : 2

98
Tree	final BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ; boolean
Code	final BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ; boolean
Distance : 2

99
Tree	final BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ; createIllegalArgumentException
Code	final BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ; createIllegalArgumentException
Distance : 2

========================================================================


========================================================================
Example Number: 53
Parent Code is: 
final double [] out = new double [ v.length ] ;
-------------------------------------------------------------------------------
Child code is: 
final double [] out = new double [ nRows ] ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (5 (39{val=double}) (85{val=[]})) (59 (800{val=out}) (204{val==}) (3 (304{val=new}) (5 (39{val=double}) (221{val=[})) (40{val=v.length}) (222{val=]}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (5 (39{val=double}) (85{val=[]})) (59 (800{val=out}) (204{val==}) (3 (304{val=new}) (5 (39{val=double}) (221{val=[})) (800{val=nRows}) (222{val=]}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/98/parent/src_java_org_apache_commons_math_linear_RealMatrixImpl.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Correct
========================================================================
True

0
Tree	final double [] out = new double [ nRows . toString ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ nRows . toString ( NUMBER_CONSTANT ) ] ;
Distance : 5

1
Tree	final double [] out = CosAngle [ nRows ] ;
Code	final double [] out = CosAngle [ nRows ] ;
Distance : 2

2
Tree	final double [] out = getColumnDimension [ nRows ] ;
Code	final double [] out = getColumnDimension [ nRows ] ;
Distance : 2

3
Tree	final double [] out = other.value ( out ) ;
Code	final double [] out = other.value ( out ) ;
Distance : 5

4
Tree	final double [] out = w [ nRows ] . length () ;
Code	final double [] out = w [ nRows ] . length () ;
Distance : 5

5
Tree	final double [] out = new byte [ v.length ] ;
Code	final double [] out = new byte [ v.length ] ;
Distance : 2

6
Tree	final double [] out = transform [ nRows ] ;
Code	final double [] out = transform [ nRows ] ;
Distance : 2

7
Tree	final double [] out = out . getAndIncrement ( NUMBER_CONSTANT ) ;
Code	final double [] out = out . getAndIncrement ( NUMBER_CONSTANT ) ;
Distance : 6

8
Tree	final double [] out = nRows . currentTimeMillis ( NUMBER_CONSTANT ) ;
Code	final double [] out = nRows . currentTimeMillis ( NUMBER_CONSTANT ) ;
Distance : 6

9
Tree	final double [] out = / [ nRows ] . intValue () ;
Code	final double [] out = / [ nRows ] . intValue () ;
Distance : 5

10
Tree	final double [] out = y0 [ nRows ] . getDataRef () ;
Code	final double [] out = y0 [ nRows ] . getDataRef () ;
Distance : 5

11
Tree	final double [] out = val.length ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = val.length ( out , NUMBER_CONSTANT ) ;
Distance : 6

12
Tree	final double [] out = out . intern ( NUMBER_CONSTANT ) ;
Code	final double [] out = out . intern ( NUMBER_CONSTANT ) ;
Distance : 6

13
Tree	final double [] out = Coordinates3D [ nRows ] . parseMillis () ;
Code	final double [] out = Coordinates3D [ nRows ] . parseMillis () ;
Distance : 5

14
Tree	final float [] out = new double [ v.length ] ;
Code	final float [] out = new double [ v.length ] ;
Distance : 2

15
Tree	final double [] out = RealVector [ nRows ] . getDataRef () ;
Code	final double [] out = RealVector [ nRows ] . getDataRef () ;
Distance : 5

16
Tree	final double [] out = pb [ nRows ] ;
Code	final double [] out = pb [ nRows ] ;
Distance : 2

17
Tree	final double [] out = Coordinates3D [ nRows ] . min () ;
Code	final double [] out = Coordinates3D [ nRows ] . min () ;
Distance : 5

18
Tree	final double [] out = out . max ( NUMBER_CONSTANT ) ;
Code	final double [] out = out . max ( NUMBER_CONSTANT ) ;
Distance : 6

19
Tree	final double [] out = FastFourierTransformer [ nRows ] . hashCode () ;
Code	final double [] out = FastFourierTransformer [ nRows ] . hashCode () ;
Distance : 5

20
Tree	final double [] out = LogGamma [ nRows ] ;
Code	final double [] out = LogGamma [ nRows ] ;
Distance : 2

21
Tree	final double [] out = y0 [ nRows ] . toString () ;
Code	final double [] out = y0 [ nRows ] . toString () ;
Distance : 5

22
Tree	final double [] out = MathArrays [ nRows ] . clone () ;
Code	final double [] out = MathArrays [ nRows ] . clone () ;
Distance : 5

23
Tree	final double [] out = FastFourierTransformer [ nRows ] . doubleValue () ;
Code	final double [] out = FastFourierTransformer [ nRows ] . doubleValue () ;
Distance : 5

24
Tree	final double [] out = loop [ nRows ] ;
Code	final double [] out = loop [ nRows ] ;
Distance : 2

25
Tree	final double [] out = FastMath [ nRows ] . hashCode () ;
Code	final double [] out = FastMath [ nRows ] . hashCode () ;
Distance : 5

26
Tree	final double [] out = FastMath [ nRows ] . doubleValue () ;
Code	final double [] out = FastMath [ nRows ] . doubleValue () ;
Distance : 5

27
Tree	final long [] out = null ;
Code	final long [] out = null ;
Distance : 6

28
Tree	final double [] out = RealVector [ nRows ] . getColumnDimension () ;
Code	final double [] out = RealVector [ nRows ] . getColumnDimension () ;
Distance : 5

29
Tree	final double [] out = out . nextAfter () ;
Code	final double [] out = out . nextAfter () ;
Distance : 5

30
Tree	final double [] out = RealVector [ nRows ] . toString () ;
Code	final double [] out = RealVector [ nRows ] . toString () ;
Distance : 5

31
Tree	final double [] out = out . toSpace () ;
Code	final double [] out = out . toSpace () ;
Distance : 5

32
Tree	final double [] out = MathArrays [ nRows ] . doubleToRawLongBits () ;
Code	final double [] out = MathArrays [ nRows ] . doubleToRawLongBits () ;
Distance : 5

33
Tree	final double [] out = out . decrementAndGet () ;
Code	final double [] out = out . decrementAndGet () ;
Distance : 5

34
Tree	final double [] out = nRows . linearCombination ( NUMBER_CONSTANT ) ;
Code	final double [] out = nRows . linearCombination ( NUMBER_CONSTANT ) ;
Distance : 6

35
Tree	final double [] out = FastFourierTransformer [ nRows ] . floatValue () ;
Code	final double [] out = FastFourierTransformer [ nRows ] . floatValue () ;
Distance : 5

36
Tree	final double [] out = point ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = point ( out , NUMBER_CONSTANT ) ;
Distance : 6

37
Tree	final double [] out = Coordinates3D [ nRows ] . IEEEremainder () ;
Code	final double [] out = Coordinates3D [ nRows ] . IEEEremainder () ;
Distance : 5

38
Tree	final double [] out = nRows . getInstance ( NUMBER_CONSTANT ) ;
Code	final double [] out = nRows . getInstance ( NUMBER_CONSTANT ) ;
Distance : 6

39
Tree	final double [] out = new double [ nRows . length ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ nRows . length ( NUMBER_CONSTANT ) ] ;
Distance : 5

40
Tree	final double [] out = out . exp () ;
Code	final double [] out = out . exp () ;
Distance : 5

41
Tree	final double [] out = out . fitness () ;
Code	final double [] out = out . fitness () ;
Distance : 5

42
Tree	final double [] out = point [ nRows ] . floatValue () ;
Code	final double [] out = point [ nRows ] . floatValue () ;
Distance : 5

43
Tree	final double [] out = out . min ( NUMBER_CONSTANT ) ;
Code	final double [] out = out . min ( NUMBER_CONSTANT ) ;
Distance : 6

44
Tree	final double [] out = Math [ nRows ] ;
Code	final double [] out = Math [ nRows ] ;
Distance : 2

45
Tree	final double [] out = new double [ nRows . floatValue ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ nRows . floatValue ( NUMBER_CONSTANT ) ] ;
Distance : 5

46
Tree	final double [] out = FunctionUtils [ nRows ] . length () ;
Code	final double [] out = FunctionUtils [ nRows ] . length () ;
Distance : 5

47
Tree	final double [] out = out . log ( NUMBER_CONSTANT ) ;
Code	final double [] out = out . log ( NUMBER_CONSTANT ) ;
Distance : 6

48
Tree	final double [] out = nRows . getAndIncrement () ;
Code	final double [] out = nRows . getAndIncrement () ;
Distance : 5

49
Tree	final double [] out = out . CosAngle () ;
Code	final double [] out = out . CosAngle () ;
Distance : 5

50
Tree	final double [] out = nRows ;
Code	final double [] out = nRows ;
Distance : 4

51
Tree	final double [] out = d [ nRows ] ;
Code	final double [] out = d [ nRows ] ;
Distance : 2

52
Tree	final double [] out = y0 [ nRows ] . IEEEremainder () ;
Code	final double [] out = y0 [ nRows ] . IEEEremainder () ;
Distance : 5

53
Tree	final double [] out = out . append ( NUMBER_CONSTANT ) ;
Code	final double [] out = out . append ( NUMBER_CONSTANT ) ;
Distance : 6

54
Tree	final double [] out = nRows . intern () ;
Code	final double [] out = nRows . intern () ;
Distance : 5

55
Tree	final double [] out = out . getAndDecrement () ;
Code	final double [] out = out . getAndDecrement () ;
Distance : 5

56
Tree	final double [] out = MathArrays [ nRows ] . hashCode () ;
Code	final double [] out = MathArrays [ nRows ] . hashCode () ;
Distance : 5

57
Tree	final double [] out = out . doubleValue ( NUMBER_CONSTANT ) ;
Code	final double [] out = out . doubleValue ( NUMBER_CONSTANT ) ;
Distance : 6

58
Tree	final double [] out = out . combine () ;
Code	final double [] out = out . combine () ;
Distance : 5

59
Tree	final double [] out = MathArrays [ nRows ] . doubleValue () ;
Code	final double [] out = MathArrays [ nRows ] . doubleValue () ;
Distance : 5

60
Tree	final double [] out = nRows . max () ;
Code	final double [] out = nRows . max () ;
Distance : 5

61
Tree	final double [] out = height [ nRows ] ;
Code	final double [] out = height [ nRows ] ;
Distance : 2

62
Tree	final double [] out = RealVector [ nRows ] . IEEEremainder () ;
Code	final double [] out = RealVector [ nRows ] . IEEEremainder () ;
Distance : 5

63
Tree	final double [] out = FastMath [ nRows ] . intValue () ;
Code	final double [] out = FastMath [ nRows ] . intValue () ;
Distance : 5

64
Tree	final double [] out = / [ nRows ] . clone () ;
Code	final double [] out = / [ nRows ] . clone () ;
Distance : 5

65
Tree	final double [] out = out . nextAfter ( nRows , v.length ) ;
Code	final double [] out = out . nextAfter ( nRows , v.length ) ;
Distance : 7

66
Tree	final double [] out = out . decrementAndGet ( nRows , v.length ) ;
Code	final double [] out = out . decrementAndGet ( nRows , v.length ) ;
Distance : 7

67
Tree	final double [] out = new double [ v.length ] ;
Code	final double [] out = new double [ v.length ] ;
Distance : 1

68
Tree	final byte [] out = nRows ;
Code	final byte [] out = nRows ;
Distance : 5

69
Tree	final double [] out = out . toSpace ( nRows , v.length ) ;
Code	final double [] out = out . toSpace ( nRows , v.length ) ;
Distance : 7

70
Tree	static byte [] out = new double [ v.length ] ;
Code	static byte [] out = new double [ v.length ] ;
Distance : 3

71
Tree	final double [] out = new double [ v.length () ] ;
Code	final double [] out = new double [ v.length () ] ;
Distance : 2

72
Tree	final double [] out = computeWeightedJacobian ( out ) ;
Code	final double [] out = computeWeightedJacobian ( out ) ;
Distance : 5

73
Tree	final double [] out = Coordinates3D [ nRows ] . toLowerCase () ;
Code	final double [] out = Coordinates3D [ nRows ] . toLowerCase () ;
Distance : 5

74
Tree	final double [] out = ExponentialDistribution [ nRows ] ;
Code	final double [] out = ExponentialDistribution [ nRows ] ;
Distance : 2

75
Tree	final double [] out = out . exp ( nRows , v.length ) ;
Code	final double [] out = out . exp ( nRows , v.length ) ;
Distance : 7

76
Tree	final double [] out = null ;
Code	final double [] out = null ;
Distance : 5

77
Tree	final double [] out = out . fitness ( nRows , v.length ) ;
Code	final double [] out = out . fitness ( nRows , v.length ) ;
Distance : 7

78
Tree	final boolean [] out = super(); ;
Code	final boolean [] out = super(); ;
Distance : 6

79
Tree	final double [] out = out . CosAngle ( nRows , v.length ) ;
Code	final double [] out = out . CosAngle ( nRows , v.length ) ;
Distance : 7

80
Tree	final int [] out = new char [ v.length ] ;
Code	final int [] out = new char [ v.length ] ;
Distance : 3

81
Tree	final double [] out = new double [ getColumnDimension () ] ;
Code	final double [] out = new double [ getColumnDimension () ] ;
Distance : 2

82
Tree	final double [] out = BicubicSplineInterpolator [ nRows ] ;
Code	final double [] out = BicubicSplineInterpolator [ nRows ] ;
Distance : 2

83
Tree	final double [] [] ( final double . . . out ) { return out ; }
Code	final double [] [] ( final double . . . out ) { return out ; }
Distance : 12

84
Tree	final double [] out = out . combine ( nRows , v.length ) ;
Code	final double [] out = out . combine ( nRows , v.length ) ;
Distance : 7

85
Tree	final double [] out = nRows . getAndIncrement ( nRows , v.length ) ;
Code	final double [] out = nRows . getAndIncrement ( nRows , v.length ) ;
Distance : 7

86
Tree	final double [] out = out . getAndDecrement ( nRows , v.length ) ;
Code	final double [] out = out . getAndDecrement ( nRows , v.length ) ;
Distance : 7

87
Tree	final boolean [] out = out ;
Code	final boolean [] out = out ;
Distance : 6

88
Tree	final double [] out = nRows . max ( nRows , v.length ) ;
Code	final double [] out = nRows . max ( nRows , v.length ) ;
Distance : 7

89
Tree	final double [] out = new double [ omega () ] ;
Code	final double [] out = new double [ omega () ] ;
Distance : 2

90
Tree	final double [] out = nRows . intern ( nRows , v.length ) ;
Code	final double [] out = nRows . intern ( nRows , v.length ) ;
Distance : 7

91
Tree	final double [] out = TypeInferenceMode.CHECKED [ nRows ] . intValue () ;
Code	final double [] out = TypeInferenceMode.CHECKED [ nRows ] . intValue () ;
Distance : 5

92
Tree	static boolean [] out = new double [ v.length ] ;
Code	static boolean [] out = new double [ v.length ] ;
Distance : 3

93
Tree	final double [] out = out . getPopulationSize ( nRows , v.length ) ;
Code	final double [] out = out . getPopulationSize ( nRows , v.length ) ;
Distance : 7

94
Tree	abstract long [] out = null ;
Code	abstract long [] out = null ;
Distance : 7

95
Tree	final double [] out = new double [ getDimension () ] ;
Code	final double [] out = new double [ getDimension () ] ;
Distance : 2

96
Tree	final double [] out = new double [ / () ] ;
Code	final double [] out = new double [ / () ] ;
Distance : 2

97
Tree	final double [] out = out . length ( nRows , v.length ) ;
Code	final double [] out = out . length ( nRows , v.length ) ;
Distance : 7

98
Tree	final double [] out = new double [ nRows ] ;
Code	final double [] out = new double [ nRows ] ;
Distance : 0

99
Tree	final double [] out = coefficients [ nRows ] ;
Code	final double [] out = coefficients [ nRows ] ;
Distance : 2

========================================================================


========================================================================
Example Number: 54
Parent Code is: 
int start = getNumObjectiveFunctions () ;
-------------------------------------------------------------------------------
Child code is: 
int start = ignoreObjectiveRows ? getNumObjectiveFunctions () : NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=start}) (204{val==}) (32 (802{val=getNumObjectiveFunctions}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=start}) (204{val==}) (16 (800{val=ignoreObjectiveRows}) (233{val=?}) (32 (802{val=getNumObjectiveFunctions}) (216{val=()})) (226{val=:}) (34{val=NUMBER_CONSTANT}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/83/parent/src_main_java_org_apache_commons_math_optimization_linear_SimplexTableau.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	float start = getNumObjectiveFunctions () . start ;
Code	float start = getNumObjectiveFunctions () . start ;
Distance : 5

1
Tree	final SphericalCoordinates [] start = getNumObjectiveFunctions () ;
Code	final SphericalCoordinates [] start = getNumObjectiveFunctions () ;
Distance : 7

2
Tree	final ParameterizedType [] start = getNumObjectiveFunctions () ;
Code	final ParameterizedType [] start = getNumObjectiveFunctions () ;
Distance : 7

3
Tree	final IllegalArgumentException [] start = getNumObjectiveFunctions () ;
Code	final IllegalArgumentException [] start = getNumObjectiveFunctions () ;
Distance : 7

4
Tree	final Reporter [] start = getNumObjectiveFunctions () ;
Code	final Reporter [] start = getNumObjectiveFunctions () ;
Distance : 7

5
Tree	final InvocationMatcher [] start = getNumObjectiveFunctions () ;
Code	final InvocationMatcher [] start = getNumObjectiveFunctions () ;
Distance : 7

6
Tree	final Type [] start = getNumObjectiveFunctions () ;
Code	final Type [] start = getNumObjectiveFunctions () ;
Distance : 7

7
Tree	final Percentile [] start = getNumObjectiveFunctions () ;
Code	final Percentile [] start = getNumObjectiveFunctions () ;
Distance : 7

8
Tree	final Throwable [] start = getNumObjectiveFunctions () ;
Code	final Throwable [] start = getNumObjectiveFunctions () ;
Distance : 7

9
Tree	final TestSubObject [] start = getNumObjectiveFunctions () ;
Code	final TestSubObject [] start = getNumObjectiveFunctions () ;
Distance : 7

10
Tree	final HashSet [] start = getNumObjectiveFunctions () ;
Code	final HashSet [] start = getNumObjectiveFunctions () ;
Distance : 7

11
Tree	final CompilerOptions [] start = getNumObjectiveFunctions () ;
Code	final CompilerOptions [] start = getNumObjectiveFunctions () ;
Distance : 7

12
Tree	final StrBuilder [] start = getNumObjectiveFunctions () ;
Code	final StrBuilder [] start = getNumObjectiveFunctions () ;
Distance : 7

13
Tree	final PeriodFormatterBuilder [] start = getNumObjectiveFunctions () ;
Code	final PeriodFormatterBuilder [] start = getNumObjectiveFunctions () ;
Distance : 7

14
Tree	final FieldODEState [] start = getNumObjectiveFunctions () ;
Code	final FieldODEState [] start = getNumObjectiveFunctions () ;
Distance : 7

15
Tree	final ResolutionMode [] start = getNumObjectiveFunctions () ;
Code	final ResolutionMode [] start = getNumObjectiveFunctions () ;
Distance : 7

16
Tree	final ImmutablePair [] start = getNumObjectiveFunctions () ;
Code	final ImmutablePair [] start = getNumObjectiveFunctions () ;
Distance : 7

17
Tree	final IntervalsSet [] start = getNumObjectiveFunctions () ;
Code	final IntervalsSet [] start = getNumObjectiveFunctions () ;
Distance : 7

18
Tree	final IllegalStateException [] start = getNumObjectiveFunctions () ;
Code	final IllegalStateException [] start = getNumObjectiveFunctions () ;
Distance : 7

19
Tree	final MutablePeriod [] start = getNumObjectiveFunctions () ;
Code	final MutablePeriod [] start = getNumObjectiveFunctions () ;
Distance : 7

20
Tree	double [] start = getNumObjectiveFunctions () ;
Code	double [] start = getNumObjectiveFunctions () ;
Distance : 6

21
Tree	Object [] start = getNumObjectiveFunctions () ;
Code	Object [] start = getNumObjectiveFunctions () ;
Distance : 6

22
Tree	final JDKRandomAdaptor [] start = getNumObjectiveFunctions () ;
Code	final JDKRandomAdaptor [] start = getNumObjectiveFunctions () ;
Distance : 7

23
Tree	final ToStringStyle [] start = getNumObjectiveFunctions () ;
Code	final ToStringStyle [] start = getNumObjectiveFunctions () ;
Distance : 7

24
Tree	final OctalUnescaper [] start = getNumObjectiveFunctions () ;
Code	final OctalUnescaper [] start = getNumObjectiveFunctions () ;
Distance : 7

25
Tree	final BitSet [] start = getNumObjectiveFunctions () ;
Code	final BitSet [] start = getNumObjectiveFunctions () ;
Distance : 7

26
Tree	final InternalError [] start = getNumObjectiveFunctions () ;
Code	final InternalError [] start = getNumObjectiveFunctions () ;
Distance : 7

27
Tree	void start = default: ;
Code	void start = default: ;
Distance : 7

28
Tree	final Double [] start = getNumObjectiveFunctions () ;
Code	final Double [] start = getNumObjectiveFunctions () ;
Distance : 7

29
Tree	final TDistribution [] start = getNumObjectiveFunctions () ;
Code	final TDistribution [] start = getNumObjectiveFunctions () ;
Distance : 7

30
Tree	final RandomDataGenerator [] start = getNumObjectiveFunctions () ;
Code	final RandomDataGenerator [] start = getNumObjectiveFunctions () ;
Distance : 7

31
Tree	final MutableDouble [] start = getNumObjectiveFunctions () ;
Code	final MutableDouble [] start = getNumObjectiveFunctions () ;
Distance : 7

32
Tree	final ThrowsException [] start = getNumObjectiveFunctions () ;
Code	final ThrowsException [] start = getNumObjectiveFunctions () ;
Distance : 7

33
Tree	final SimpleReflectionStaticFieldsFixture [] start = getNumObjectiveFunctions () ;
Code	final SimpleReflectionStaticFieldsFixture [] start = getNumObjectiveFunctions () ;
Distance : 7

34
Tree	final TDistributionImpl [] start = getNumObjectiveFunctions () ;
Code	final TDistributionImpl [] start = getNumObjectiveFunctions () ;
Distance : 7

35
Tree	final StrSubstitutor [] start = getNumObjectiveFunctions () ;
Code	final StrSubstitutor [] start = getNumObjectiveFunctions () ;
Distance : 7

36
Tree	InvocationImpl [] start = getNumObjectiveFunctions () ;
Code	InvocationImpl [] start = getNumObjectiveFunctions () ;
Distance : 6

37
Tree	final Line [] start = getNumObjectiveFunctions () ;
Code	final Line [] start = getNumObjectiveFunctions () ;
Distance : 7

38
Tree	final TestObject [] start = getNumObjectiveFunctions () ;
Code	final TestObject [] start = getNumObjectiveFunctions () ;
Distance : 7

39
Tree	short start = getNumObjectiveFunctions ;
Code	short start = getNumObjectiveFunctions ;
Distance : 6

40
Tree	final BicubicSplineInterpolator [] start = getNumObjectiveFunctions () ;
Code	final BicubicSplineInterpolator [] start = getNumObjectiveFunctions () ;
Distance : 7

41
Tree	final long start = getNumObjectiveFunctions () ;
Code	final long start = getNumObjectiveFunctions () ;
Distance : 6

42
Tree	final ScheduledThreadPoolExecutor [] start = getNumObjectiveFunctions () ;
Code	final ScheduledThreadPoolExecutor [] start = getNumObjectiveFunctions () ;
Distance : 7

43
Tree	final MultiBackgroundInitializer.MultiBackgroundInitializerResults [] start = getNumObjectiveFunctions () ;
Code	final MultiBackgroundInitializer.MultiBackgroundInitializerResults [] start = getNumObjectiveFunctions () ;
Distance : 7

44
Tree	long start = getNumObjectiveFunctions () ;
Code	long start = getNumObjectiveFunctions () ;
Distance : 5

45
Tree	Date [] start = getNumObjectiveFunctions () ;
Code	Date [] start = getNumObjectiveFunctions () ;
Distance : 6

46
Tree	final UniformRealDistribution [] start = getNumObjectiveFunctions () ;
Code	final UniformRealDistribution [] start = getNumObjectiveFunctions () ;
Distance : 7

47
Tree	static int start ;
Code	static int start ;
Distance : 8

48
Tree	boolean start = getNumObjectiveFunctions () ;
Code	boolean start = getNumObjectiveFunctions () ;
Distance : 5

49
Tree	char start = getNumObjectiveFunctions () ;
Code	char start = getNumObjectiveFunctions () ;
Distance : 5

50
Tree	final InheritedReflectionStaticFieldsFixture [] start = getNumObjectiveFunctions () ;
Code	final InheritedReflectionStaticFieldsFixture [] start = getNumObjectiveFunctions () ;
Distance : 7

51
Tree	final BackgroundInitializerTestImpl [] start = getNumObjectiveFunctions () ;
Code	final BackgroundInitializerTestImpl [] start = getNumObjectiveFunctions () ;
Distance : 7

52
Tree	final JSType [] start = getNumObjectiveFunctions () ;
Code	final JSType [] start = getNumObjectiveFunctions () ;
Distance : 7

53
Tree	final CompareToBuilder [] start = getNumObjectiveFunctions () ;
Code	final CompareToBuilder [] start = getNumObjectiveFunctions () ;
Distance : 7

54
Tree	final DeclaredTypeRegistry [] start = getNumObjectiveFunctions () ;
Code	final DeclaredTypeRegistry [] start = getNumObjectiveFunctions () ;
Distance : 7

55
Tree	coeff [] start = getNumObjectiveFunctions () ;
Code	coeff [] start = getNumObjectiveFunctions () ;
Distance : 6

56
Tree	JUnitRule [] start = getNumObjectiveFunctions () ;
Code	JUnitRule [] start = getNumObjectiveFunctions () ;
Distance : 6

57
Tree	BackgroundInitializerTestImpl [] start = getNumObjectiveFunctions () ;
Code	BackgroundInitializerTestImpl [] start = getNumObjectiveFunctions () ;
Distance : 6

58
Tree	CharRange [] start = getNumObjectiveFunctions () ;
Code	CharRange [] start = getNumObjectiveFunctions () ;
Distance : 6

59
Tree	NUMBER_CONSTANT [] start = getNumObjectiveFunctions () ;
Code	NUMBER_CONSTANT [] start = getNumObjectiveFunctions () ;
Distance : 6

60
Tree	value [] start = getNumObjectiveFunctions () ;
Code	value [] start = getNumObjectiveFunctions () ;
Distance : 6

61
Tree	VerificationMode [] start = getNumObjectiveFunctions () ;
Code	VerificationMode [] start = getNumObjectiveFunctions () ;
Distance : 6

62
Tree	MockitoMethod [] start = getNumObjectiveFunctions () ;
Code	MockitoMethod [] start = getNumObjectiveFunctions () ;
Distance : 6

63
Tree	ArrayDeque [] start = getNumObjectiveFunctions () ;
Code	ArrayDeque [] start = getNumObjectiveFunctions () ;
Distance : 6

64
Tree	StrMatcher [] start = getNumObjectiveFunctions () ;
Code	StrMatcher [] start = getNumObjectiveFunctions () ;
Distance : 6

65
Tree	Add [] start = getNumObjectiveFunctions () ;
Code	Add [] start = getNumObjectiveFunctions () ;
Distance : 6

66
Tree	long start = start + NUMBER_CONSTANT ;
Code	long start = start + NUMBER_CONSTANT ;
Distance : 6

67
Tree	getDimension [] start = getNumObjectiveFunctions () ;
Code	getDimension [] start = getNumObjectiveFunctions () ;
Distance : 6

68
Tree	Locale [] start = getNumObjectiveFunctions () ;
Code	Locale [] start = getNumObjectiveFunctions () ;
Distance : 6

69
Tree	den [] start = getNumObjectiveFunctions () ;
Code	den [] start = getNumObjectiveFunctions () ;
Distance : 6

70
Tree	IntervalsSet [] start = getNumObjectiveFunctions () ;
Code	IntervalsSet [] start = getNumObjectiveFunctions () ;
Distance : 6

71
Tree	PeriodFormatterBuilder [] start = getNumObjectiveFunctions () ;
Code	PeriodFormatterBuilder [] start = getNumObjectiveFunctions () ;
Distance : 6

72
Tree	SphericalCoordinates [] start = getNumObjectiveFunctions () ;
Code	SphericalCoordinates [] start = getNumObjectiveFunctions () ;
Distance : 6

73
Tree	ContinuousDistribution [] start = getNumObjectiveFunctions () ;
Code	ContinuousDistribution [] start = getNumObjectiveFunctions () ;
Distance : 6

74
Tree	abstract byte start ;
Code	abstract byte start ;
Distance : 9

75
Tree	Vector2D [] start = getNumObjectiveFunctions () ;
Code	Vector2D [] start = getNumObjectiveFunctions () ;
Distance : 6

76
Tree	boolean start = start + NUMBER_CONSTANT ;
Code	boolean start = start + NUMBER_CONSTANT ;
Distance : 6

77
Tree	V [] start = getNumObjectiveFunctions () ;
Code	V [] start = getNumObjectiveFunctions () ;
Distance : 6

78
Tree	HashSet [] start = getNumObjectiveFunctions () ;
Code	HashSet [] start = getNumObjectiveFunctions () ;
Distance : 6

79
Tree	Percentile [] start = getNumObjectiveFunctions () ;
Code	Percentile [] start = getNumObjectiveFunctions () ;
Distance : 6

80
Tree	GregorianCalendar [] start = getNumObjectiveFunctions () ;
Code	GregorianCalendar [] start = getNumObjectiveFunctions () ;
Distance : 6

81
Tree	setSeedInternal [] start = getNumObjectiveFunctions () ;
Code	setSeedInternal [] start = getNumObjectiveFunctions () ;
Distance : 6

82
Tree	final byte start = getNumObjectiveFunctions () ;
Code	final byte start = getNumObjectiveFunctions () ;
Distance : 6

83
Tree	int start = source.moment ;
Code	int start = source.moment ;
Distance : 6

84
Tree	final ToStringStyle [] start ;
Code	final ToStringStyle [] start ;
Distance : 9

85
Tree	OpenIntToDoubleHashMap [] start = getNumObjectiveFunctions () ;
Code	OpenIntToDoubleHashMap [] start = getNumObjectiveFunctions () ;
Distance : 6

86
Tree	NumericEntityUnescaper [] start = getNumObjectiveFunctions () ;
Code	NumericEntityUnescaper [] start = getNumObjectiveFunctions () ;
Distance : 6

87
Tree	BivariateFunction [] start = getNumObjectiveFunctions () ;
Code	BivariateFunction [] start = getNumObjectiveFunctions () ;
Distance : 6

88
Tree	TestObject [] start = getNumObjectiveFunctions () ;
Code	TestObject [] start = getNumObjectiveFunctions () ;
Distance : 6

89
Tree	long [] start = getNumObjectiveFunctions () ;
Code	long [] start = getNumObjectiveFunctions () ;
Distance : 6

90
Tree	Class [] start = getNumObjectiveFunctions () ;
Code	Class [] start = getNumObjectiveFunctions () ;
Distance : 6

91
Tree	float start = getNumObjectiveFunctions () ;
Code	float start = getNumObjectiveFunctions () ;
Distance : 5

92
Tree	synchronized int start ;
Code	synchronized int start ;
Distance : 8

93
Tree	Coordinates3D [] start = getNumObjectiveFunctions () ;
Code	Coordinates3D [] start = getNumObjectiveFunctions () ;
Distance : 6

94
Tree	MultiBackgroundInitializer.MultiBackgroundInitializerResults [] start = getNumObjectiveFunctions () ;
Code	MultiBackgroundInitializer.MultiBackgroundInitializerResults [] start = getNumObjectiveFunctions () ;
Distance : 6

95
Tree	Throwable [] start = getNumObjectiveFunctions () ;
Code	Throwable [] start = getNumObjectiveFunctions () ;
Distance : 6

96
Tree	LocationImpl [] start = getNumObjectiveFunctions () ;
Code	LocationImpl [] start = getNumObjectiveFunctions () ;
Distance : 6

97
Tree	StrSubstitutor [] start = getNumObjectiveFunctions () ;
Code	StrSubstitutor [] start = getNumObjectiveFunctions () ;
Distance : 6

98
Tree	BinomialDistribution [] start = getNumObjectiveFunctions () ;
Code	BinomialDistribution [] start = getNumObjectiveFunctions () ;
Distance : 6

99
Tree	ReflectionStaticFieldsFixture [] start = getNumObjectiveFunctions () ;
Code	ReflectionStaticFieldsFixture [] start = getNumObjectiveFunctions () ;
Distance : 6

========================================================================


========================================================================
Example Number: 55
Parent Code is: 
int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Child code is: 
int j = NUMBER_CONSTANT * ( n - NUMBER_CONSTANT ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=j}) (204{val==}) (27 (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (800{val=n})) (201{val=-}) (34{val=NUMBER_CONSTANT}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=j}) (204{val==}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (36 (214{val=(}) (27 (800{val=n}) (201{val=-}) (34{val=NUMBER_CONSTANT})) (215{val=)})))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/80/parent/src_main_java_org_apache_commons_math_linear_EigenDecompositionImpl.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	int j = n < Boolean.TRUE - n ;
Code	int j = n < Boolean.TRUE - n ;
Distance : 6

1
Tree	char n = n * j - n ;
Code	char n = n * j - n ;
Distance : 7

2
Tree	char j = ( j < < NUMBER_CONSTANT ) + j - n ;
Code	char j = ( j < < NUMBER_CONSTANT ) + j - n ;
Distance : 10

3
Tree	short j = NUMBER_CONSTANT * j - n - j ;
Code	short j = NUMBER_CONSTANT * j - n - j ;
Distance : 5

4
Tree	float j = j - n - j ;
Code	float j = j - n - j ;
Distance : 6

5
Tree	boolean n = n == NUMBER_CONSTANT - j ;
Code	boolean n = n == NUMBER_CONSTANT - j ;
Distance : 8

6
Tree	byte n = n + n - j ;
Code	byte n = n + n - j ;
Distance : 7

7
Tree	byte n = n + j - j ;
Code	byte n = n + j - j ;
Distance : 8

8
Tree	int j = n + n . intValue ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n + n . intValue ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

9
Tree	int j = n + j . clone ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n + j . clone ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

10
Tree	int j = n + n . natural ( j , n , NUMBER_CONSTANT ) - j ;
Code	int j = n + n . natural ( j , n , NUMBER_CONSTANT ) - j ;
Distance : 10

11
Tree	int j = n + n . getAndDecrement ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n + n . getAndDecrement ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

12
Tree	int j = n + j . intValue ( j , n , NUMBER_CONSTANT ) - j ;
Code	int j = n + j . intValue ( j , n , NUMBER_CONSTANT ) - j ;
Distance : 10

13
Tree	long j = n == NUMBER_CONSTANT - j ;
Code	long j = n == NUMBER_CONSTANT - j ;
Distance : 7

14
Tree	char n = n * n - n ;
Code	char n = n * n - n ;
Distance : 6

15
Tree	int j = n + j . getAndDecrement ( j , n , NUMBER_CONSTANT ) - j ;
Code	int j = n + j . getAndDecrement ( j , n , NUMBER_CONSTANT ) - j ;
Distance : 10

16
Tree	int j = getDimension ( n , n , n ) >= NUMBER_CONSTANT ;
Code	int j = getDimension ( n , n , n ) >= NUMBER_CONSTANT ;
Distance : 8

17
Tree	long j = ( int ) n * <= ;
Code	long j = ( int ) n * <= ;
Distance : 7

18
Tree	int j = n + j . getAndIncrement ( j , n , NUMBER_CONSTANT ) - j ;
Code	int j = n + j . getAndIncrement ( j , n , NUMBER_CONSTANT ) - j ;
Distance : 10

19
Tree	int j = n + n . getInstance ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n + n . getInstance ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

20
Tree	long j = ( long ) n * CHAR_CONS ;
Code	long j = ( long ) n * CHAR_CONS ;
Distance : 7

21
Tree	int j = n + n . getAndIncrement ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n + n . getAndIncrement ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

22
Tree	int j = replaceObject ( n , n , n ) >= NUMBER_CONSTANT ;
Code	int j = replaceObject ( n , n , n ) >= NUMBER_CONSTANT ;
Distance : 8

23
Tree	int j = n + n . normalize ( j , n , NUMBER_CONSTANT ) - j ;
Code	int j = n + n . normalize ( j , n , NUMBER_CONSTANT ) - j ;
Distance : 10

24
Tree	int j = n + n . currentTimeMillis ( j , n , n ) + n - j ;
Code	int j = n + n . currentTimeMillis ( j , n , n ) + n - j ;
Distance : 13

25
Tree	int j = n + j . min ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n + j . min ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

26
Tree	int j = n + j . getInstance ( j , n , NUMBER_CONSTANT ) - j ;
Code	int j = n + j . getInstance ( j , n , NUMBER_CONSTANT ) - j ;
Distance : 10

27
Tree	int j = n + j . abs ( j , n , n ) + n - j ;
Code	int j = n + j . abs ( j , n , n ) + n - j ;
Distance : 13

28
Tree	char j = n / n - j ;
Code	char j = n / n - j ;
Distance : 6

29
Tree	double j = n + n - n ;
Code	double j = n + n - n ;
Distance : 6

30
Tree	int j = getLeftmostProp ( n , n , n ) >= NUMBER_CONSTANT ;
Code	int j = getLeftmostProp ( n , n , n ) >= NUMBER_CONSTANT ;
Distance : 8

31
Tree	double j = ( long ) n * throws ;
Code	double j = ( long ) n * throws ;
Distance : 7

32
Tree	int j = n < SourceMap.LocationMapping - n ;
Code	int j = n < SourceMap.LocationMapping - n ;
Distance : 6

33
Tree	byte n = ( n < < NUMBER_CONSTANT ) + n - n ;
Code	byte n = ( n < < NUMBER_CONSTANT ) + n - n ;
Distance : 10

34
Tree	boolean j = j ^ n - j ;
Code	boolean j = j ^ n - j ;
Distance : 6

35
Tree	long j = j ^ n - n ;
Code	long j = j ^ n - n ;
Distance : 6

36
Tree	int j = ( int ) currentState.length * Percentile.EstimationType - n ;
Code	int j = ( int ) currentState.length * Percentile.EstimationType - n ;
Distance : 8

37
Tree	float j = NUMBER_CONSTANT * j - j - n ;
Code	float j = NUMBER_CONSTANT * j - j - n ;
Distance : 6

38
Tree	int j = n < LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED - j ;
Code	int j = n < LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED - j ;
Distance : 6

39
Tree	int j = ( long ) currentState.length * FastMath.PI - j ;
Code	int j = ( long ) currentState.length * FastMath.PI - j ;
Distance : 8

40
Tree	int j = n < line.originOffset - n ;
Code	int j = n < line.originOffset - n ;
Distance : 6

41
Tree	long j = ( long ) n * ^ ;
Code	long j = ( long ) n * ^ ;
Distance : 7

42
Tree	long j = n + n - j ;
Code	long j = n + n - j ;
Distance : 6

43
Tree	int j = ( int ) currentState.length * LocalizedFormats.INVALID_BINARY_DIGIT - j ;
Code	int j = ( int ) currentState.length * LocalizedFormats.INVALID_BINARY_DIGIT - j ;
Distance : 8

44
Tree	long j = ( int ) n * % ;
Code	long j = ( int ) n * % ;
Distance : 7

45
Tree	char j = NUMBER_CONSTANT * n - j ;
Code	char j = NUMBER_CONSTANT * n - j ;
Distance : 4

46
Tree	int j = n < NoDataException - n ;
Code	int j = n < NoDataException - n ;
Distance : 6

47
Tree	int j = ( int ) currentState.length * observed1.length - n ;
Code	int j = ( int ) currentState.length * observed1.length - n ;
Distance : 8

48
Tree	int j = ( int ) currentState.length * other.liveSet - j ;
Code	int j = ( int ) currentState.length * other.liveSet - j ;
Distance : 8

49
Tree	int j = ( int ) currentState.length * v.length - n ;
Code	int j = ( int ) currentState.length * v.length - n ;
Distance : 8

50
Tree	int j = ( int ) observed1.length * currentState.length - n ;
Code	int j = ( int ) observed1.length * currentState.length - n ;
Distance : 8

51
Tree	int j = ( int ) currentState.length * moment.m3 - n ;
Code	int j = ( int ) currentState.length * moment.m3 - n ;
Distance : 8

52
Tree	int j = ( long ) currentState.length * tx.amount - j ;
Code	int j = ( long ) currentState.length * tx.amount - j ;
Distance : 8

53
Tree	int j = n < MathUtils.TWO_PI - n ;
Code	int j = n < MathUtils.TWO_PI - n ;
Distance : 6

54
Tree	int j = ( int ) toBeExposed.realMethod * currentState.length - j ;
Code	int j = ( int ) toBeExposed.realMethod * currentState.length - j ;
Distance : 8

55
Tree	int j = ( int ) Integer.MAX_VALUE * currentState.length - n ;
Code	int j = ( int ) Integer.MAX_VALUE * currentState.length - n ;
Distance : 8

56
Tree	int j = ( int ) currentState.length * y.length - n ;
Code	int j = ( int ) currentState.length * y.length - n ;
Distance : 8

57
Tree	int j = ( long ) currentState.length * moment.m2 - n ;
Code	int j = ( long ) currentState.length * moment.m2 - n ;
Distance : 8

58
Tree	int j = n < cov.length - j ;
Code	int j = n < cov.length - j ;
Distance : 6

59
Tree	int j = n < DisposalCheckingPolicy.OFF - j ;
Code	int j = n < DisposalCheckingPolicy.OFF - j ;
Distance : 6

60
Tree	int j = n < Reach.NONE - n ;
Code	int j = n < Reach.NONE - n ;
Distance : 6

61
Tree	int j = n < sb.buffer.length - n ;
Code	int j = n < sb.buffer.length - n ;
Distance : 6

62
Tree	boolean n = n - j - j ;
Code	boolean n = n - j - j ;
Distance : 8

63
Tree	int j = getThrowables ( n , n , n ) >= NUMBER_CONSTANT ;
Code	int j = getThrowables ( n , n , n ) >= NUMBER_CONSTANT ;
Distance : 8

64
Tree	int j = n + n . natural ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n + n . natural ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

65
Tree	long j = n - j - j ;
Code	long j = n - j - j ;
Distance : 7

66
Tree	int j = n + n . size ( j , n , NUMBER_CONSTANT ) - j ;
Code	int j = n + n . size ( j , n , NUMBER_CONSTANT ) - j ;
Distance : 10

67
Tree	int j = varargs ( n , n , n ) >= NUMBER_CONSTANT ;
Code	int j = varargs ( n , n , n ) >= NUMBER_CONSTANT ;
Distance : 8

68
Tree	float j = n / n - j ;
Code	float j = n / n - j ;
Distance : 6

69
Tree	double j = NUMBER_CONSTANT + NUMBER_CONSTANT - j ;
Code	double j = NUMBER_CONSTANT + NUMBER_CONSTANT - j ;
Distance : 6

70
Tree	int j = n + j . IEEEremainder ( n , n , n ) + n - j ;
Code	int j = n + j . IEEEremainder ( n , n , n ) + n - j ;
Distance : 13

71
Tree	int j = n + j . linearCombination ( j , n , NUMBER_CONSTANT ) - j ;
Code	int j = n + j . linearCombination ( j , n , NUMBER_CONSTANT ) - j ;
Distance : 10

72
Tree	long n = n - j - n ;
Code	long n = n - j - n ;
Distance : 8

73
Tree	int n = ( j < < NUMBER_CONSTANT ) + n - n ;
Code	int n = ( j < < NUMBER_CONSTANT ) + n - n ;
Distance : 9

74
Tree	void j = j == NUMBER_CONSTANT - n ;
Code	void j = j == NUMBER_CONSTANT - n ;
Distance : 7

75
Tree	byte j = NUMBER_CONSTANT * j - n - n ;
Code	byte j = NUMBER_CONSTANT * j - n - n ;
Distance : 5

76
Tree	char j = j - n - j ;
Code	char j = j - n - j ;
Distance : 6

77
Tree	float j = ( j < < NUMBER_CONSTANT ) + j - j ;
Code	float j = ( j < < NUMBER_CONSTANT ) + j - j ;
Distance : 10

78
Tree	int j = n + j . is ( j , n , n ) + n - j ;
Code	int j = n + j . is ( j , n , n ) + n - j ;
Distance : 13

79
Tree	double j = j ^ n - n ;
Code	double j = j ^ n - n ;
Distance : 6

80
Tree	short j = j == NUMBER_CONSTANT - n ;
Code	short j = j == NUMBER_CONSTANT - n ;
Distance : 7

81
Tree	double n = n - j - n ;
Code	double n = n - j - n ;
Distance : 8

82
Tree	long n = NUMBER_CONSTANT * n - j - j ;
Code	long n = NUMBER_CONSTANT * n - j - j ;
Distance : 6

83
Tree	int n = n ^ j - n ;
Code	int n = n ^ j - n ;
Distance : 7

84
Tree	byte j = j - j - n ;
Code	byte j = j - j - n ;
Distance : 7

85
Tree	void j = j + n - j ;
Code	void j = j + n - j ;
Distance : 6

86
Tree	float j = j + n - n ;
Code	float j = j + n - n ;
Distance : 6

87
Tree	float j = j + j - n ;
Code	float j = j + j - n ;
Distance : 7

88
Tree	char j = ( j < < NUMBER_CONSTANT ) + j - j ;
Code	char j = ( j < < NUMBER_CONSTANT ) + j - j ;
Distance : 10

89
Tree	void j = j + j - j ;
Code	void j = j + j - j ;
Distance : 7

90
Tree	byte n = n & NUMBER_CONSTANT ;
Code	byte n = n & NUMBER_CONSTANT ;
Distance : 7

91
Tree	float n = n / j - n ;
Code	float n = n / j - n ;
Distance : 8

92
Tree	boolean n = NUMBER_CONSTANT * j - j ;
Code	boolean n = NUMBER_CONSTANT * j - j ;
Distance : 6

93
Tree	byte n = ( n < < NUMBER_CONSTANT ) + n - j ;
Code	byte n = ( n < < NUMBER_CONSTANT ) + n - j ;
Distance : 10

94
Tree	int j = n + j . natural ( j , n , NUMBER_CONSTANT ) - j ;
Code	int j = n + j . natural ( j , n , NUMBER_CONSTANT ) - j ;
Distance : 10

95
Tree	int j = getInstance ( n , n , j ) >= NUMBER_CONSTANT ;
Code	int j = getInstance ( n , n , j ) >= NUMBER_CONSTANT ;
Distance : 8

96
Tree	int j = n + n . linearCombination ( j , n , NUMBER_CONSTANT ) - j ;
Code	int j = n + n . linearCombination ( j , n , NUMBER_CONSTANT ) - j ;
Distance : 10

97
Tree	double j = n + j - n ;
Code	double j = n + j - n ;
Distance : 7

98
Tree	int j = n + j . intValue ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n + j . intValue ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

99
Tree	int j = n + j . getAndDecrement ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n + j . getAndDecrement ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

========================================================================


========================================================================
Example Number: 56
Parent Code is: 
{ return getCumPct ( ( Comparable < > ) v ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return getPct ( ( Comparable < > ) v ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=getCumPct}) (214{val=(}) (11 (214{val=(}) (74 (43 (800{val=Comparable})) (230{val=<}) (76{val=?}) (231{val=>})) (215{val=)}) (800{val=v})) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=getPct}) (214{val=(}) (11 (214{val=(}) (74 (43 (800{val=Comparable})) (230{val=<}) (76{val=?}) (231{val=>})) (215{val=)}) (800{val=v})) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/75/parent/src_main_java_org_apache_commons_math_stat_Frequency.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ return getCumPct ( ( ( Comparable ) v ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v ) . v ) ; }
Distance : 5

1
Tree	{ return getCumPct ( Comparable , v . getCumPct () , AllowedSolution.ANY_SIDE ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , AllowedSolution.ANY_SIDE ) ; }
Distance : 9

2
Tree	{ return getCumPct ( Comparable , v . getPct () , Verification.NO_MORE_WANTED ) ; }
Code	{ return getCumPct ( Comparable , v . getPct () , Verification.NO_MORE_WANTED ) ; }
Distance : 9

3
Tree	{ return getCumPct ( Comparable , v . getCumPct () , finderStub.actualToReturn ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , finderStub.actualToReturn ) ; }
Distance : 9

4
Tree	{ return getCumPct ( Comparable , v . getCumPct () , thisContext ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , thisContext ) ; }
Distance : 9

5
Tree	{ return getCumPct ( Comparable , v . getCumPct () , iMinDaysInFirstWeek ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , iMinDaysInFirstWeek ) ; }
Distance : 9

6
Tree	{ return getCumPct ( Comparable , v . getCumPct () , Format.PRETTY ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , Format.PRETTY ) ; }
Distance : 9

7
Tree	{ return getCumPct ( Comparable , v . getPct () , Locale.US ) ; }
Code	{ return getCumPct ( Comparable , v . getPct () , Locale.US ) ; }
Distance : 9

8
Tree	{ return getCumPct ( Comparable , v . getCumPct () , Color.green ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , Color.green ) ; }
Distance : 9

9
Tree	{ return getCumPct ( Comparable , v . getCumPct () , Format.TYPED ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , Format.TYPED ) ; }
Distance : 9

10
Tree	{ return getCumPct ( Comparable , v . getCumPct () , Token.DEFAULT_CASE ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , Token.DEFAULT_CASE ) ; }
Distance : 9

11
Tree	{ return getCumPct ( Comparable , v . getCumPct () , error.node ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , error.node ) ; }
Distance : 9

12
Tree	{ return getPct ( ( ( v ) Comparable ) . v ) ; }
Code	{ return getPct ( ( ( v ) Comparable ) . v ) ; }
Distance : 5

13
Tree	{ return Comparable ( false , false ) ; }
Code	{ return Comparable ( false , false ) ; }
Distance : 7

14
Tree	{ return getCumPct ( ( ( v ) v . getPct () ) . v ) ; }
Code	{ return getCumPct ( ( ( v ) v . getPct () ) . v ) ; }
Distance : 9

15
Tree	{ return getCumPct ( v ) . < Comparable > getCumPct () ; }
Code	{ return getCumPct ( v ) . < Comparable > getCumPct () ; }
Distance : 8

16
Tree	{ return getCumPct ( ( ( Comparable ) Comparable ) . Comparable ) ; }
Code	{ return getCumPct ( ( ( Comparable ) Comparable ) . Comparable ) ; }
Distance : 6

17
Tree	{ return getCumPct ( ( Comparable ) v . getPct ( v , ( T [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getPct ( v , ( T [] ) null ) ) ; }
Distance : 13

18
Tree	{ return getCumPct ( ( Comparable ) v . getCumPct ( v , ( T [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getCumPct ( v , ( T [] ) null ) ) ; }
Distance : 13

19
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct ( NUMBER_CONSTANT ) ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getPct ( NUMBER_CONSTANT ) ) . v ) ; }
Distance : 10

20
Tree	{ return getPct ( ( Comparable ) v . getPct ( v , ( Object [] ) null ) ) ; }
Code	{ return getPct ( ( Comparable ) v . getPct ( v , ( Object [] ) null ) ) ; }
Distance : 12

21
Tree	{ return getPct ( v ) . < v > getPct () ; }
Code	{ return getPct ( v ) . < v > getPct () ; }
Distance : 7

22
Tree	{ return getPct ( ( Comparable ) getPct ( v ) ) ; }
Code	{ return getPct ( ( Comparable ) getPct ( v ) ) ; }
Distance : 4

23
Tree	{ return Comparable ( super , false ) ; }
Code	{ return Comparable ( super , false ) ; }
Distance : 7

24
Tree	{ return getCumPct ( Comparable , v . getPct () , SimpleDependencyInfo.EMPTY ) ; }
Code	{ return getCumPct ( Comparable , v . getPct () , SimpleDependencyInfo.EMPTY ) ; }
Distance : 9

25
Tree	{ return getCumPct ( ( ( v ) v . getCumPct () ) . v ) ; }
Code	{ return getCumPct ( ( ( v ) v . getCumPct () ) . v ) ; }
Distance : 9

26
Tree	{ return getCumPct ( ( Comparable ) v . getPct ( v , ( ArrayRealVector [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getPct ( v , ( ArrayRealVector [] ) null ) ) ; }
Distance : 13

27
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct ( v ) ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getPct ( v ) ) . v ) ; }
Distance : 10

28
Tree	{ return getCumPct ( v ) . < Comparable > getPct () ; }
Code	{ return getCumPct ( v ) . < Comparable > getPct () ; }
Distance : 8

29
Tree	{ return getPct ( v ) . < v > getCumPct () ; }
Code	{ return getPct ( v ) . < v > getCumPct () ; }
Distance : 7

30
Tree	{ return v ( false , false ) ; }
Code	{ return v ( false , false ) ; }
Distance : 7

31
Tree	{ return Comparable ( ! , false ) ; }
Code	{ return Comparable ( ! , false ) ; }
Distance : 7

32
Tree	{ return v ( ! , false ) ; }
Code	{ return v ( ! , false ) ; }
Distance : 7

33
Tree	{ return getCumPct ( Comparable , v . getPct () , getTypeValidator ) ; }
Code	{ return getCumPct ( Comparable , v . getPct () , getTypeValidator ) ; }
Distance : 9

34
Tree	{ return getCumPct ( Comparable , v . getCumPct () , performOptimizations ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , performOptimizations ) ; }
Distance : 9

35
Tree	{ return getCumPct ( Comparable , v . getPct () , dest.sumOfLogs ) ; }
Code	{ return getCumPct ( Comparable , v . getPct () , dest.sumOfLogs ) ; }
Distance : 9

36
Tree	{ return getCumPct ( ( Comparable < Comparable > ) CHAR_CONS ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) CHAR_CONS ) ; }
Distance : 3

37
Tree	{ return getCumPct ( ( Comparable < ? super v > ) Font ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) Font ) ; }
Distance : 5

38
Tree	{ return getCumPct ( ( Comparable < ? super v > ) isScript ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) isScript ) ; }
Distance : 5

39
Tree	{ return getPct ( ( Comparable < ? super v > ) ^ ) ; }
Code	{ return getPct ( ( Comparable < ? super v > ) ^ ) ; }
Distance : 4

40
Tree	{ return getCumPct ( ( Comparable < Comparable > ) [] ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) [] ) ; }
Distance : 3

41
Tree	{ return getCumPct ( ( Comparable < ? super v > ) += ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) += ) ; }
Distance : 5

42
Tree	{ return getCumPct ( ( Comparable < Comparable > ) AbstractScope ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) AbstractScope ) ; }
Distance : 3

43
Tree	{ return getCumPct ( ( Comparable < ? super v > ) v.length ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) v.length ) ; }
Distance : 5

44
Tree	{ return getCumPct ( v ) . < v > getCumPct () ; }
Code	{ return getCumPct ( v ) . < v > getCumPct () ; }
Distance : 8

45
Tree	{ return getCumPct ( ( Comparable < v > ) throws ) ; }
Code	{ return getCumPct ( ( Comparable < v > ) throws ) ; }
Distance : 3

46
Tree	{ return getPct ( ( Comparable < Comparable > ) &= ) ; }
Code	{ return getPct ( ( Comparable < Comparable > ) &= ) ; }
Distance : 2

47
Tree	{ return getCumPct ( ( Comparable < ? super v > ) Matcher ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) Matcher ) ; }
Distance : 5

48
Tree	{ return getPct ( ( Comparable < Comparable > ) % ) ; }
Code	{ return getPct ( ( Comparable < Comparable > ) % ) ; }
Distance : 2

49
Tree	{ return getCumPct ( ( Comparable < ? super v > ) TypeI ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) TypeI ) ; }
Distance : 5

50
Tree	{ return getPct ( ( Comparable < Comparable > ) throws ) ; }
Code	{ return getPct ( ( Comparable < Comparable > ) throws ) ; }
Distance : 2

51
Tree	{ return getCumPct ( ( Comparable ) getPct ( ( Comparable ) v , v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getPct ( ( Comparable ) v , v ) ) ; }
Distance : 9

52
Tree	{ return getCumPct ( ( Comparable < v > ) instanceof ) ; }
Code	{ return getCumPct ( ( Comparable < v > ) instanceof ) ; }
Distance : 3

53
Tree	{ return getCumPct ( Comparable , v . getCumPct () , Cartesian3D.ZERO ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , Cartesian3D.ZERO ) ; }
Distance : 9

54
Tree	{ return getCumPct ( Comparable , v . getCumPct () , TimeUnit.MINUTES ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , TimeUnit.MINUTES ) ; }
Distance : 9

55
Tree	{ return getCumPct ( Comparable , v . getCumPct () , originalLine.tolerance ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , originalLine.tolerance ) ; }
Distance : 9

56
Tree	{ return getCumPct ( Comparable , v . getPct () , isUnionType ) ; }
Code	{ return getCumPct ( Comparable , v . getPct () , isUnionType ) ; }
Distance : 9

57
Tree	{ return getCumPct ( Comparable , v . getCumPct () , declar.node ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , declar.node ) ; }
Distance : 9

58
Tree	{ return getCumPct ( Comparable , v . getCumPct () , GlobalTypeInfoCollector.REDECLARED_PROPERTY ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , GlobalTypeInfoCollector.REDECLARED_PROPERTY ) ; }
Distance : 9

59
Tree	{ return getCumPct ( Comparable , v . getPct () , options.appNameStr ) ; }
Code	{ return getCumPct ( Comparable , v . getPct () , options.appNameStr ) ; }
Distance : 9

60
Tree	{ return getCumPct ( Comparable , v . getPct () , Ref.Type.ALIASING_GET ) ; }
Code	{ return getCumPct ( Comparable , v . getPct () , Ref.Type.ALIASING_GET ) ; }
Distance : 9

61
Tree	{ return getCumPct ( Comparable , v . getPct () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ; }
Code	{ return getCumPct ( Comparable , v . getPct () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ; }
Distance : 9

62
Tree	{ return getCumPct ( Comparable , v . getPct () , mock.value ) ; }
Code	{ return getCumPct ( Comparable , v . getPct () , mock.value ) ; }
Distance : 9

63
Tree	{ return getCumPct ( Comparable , v . getCumPct () , Reach.ALL ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , Reach.ALL ) ; }
Distance : 9

64
Tree	{ return getCumPct ( Comparable , v . getCumPct () , Format.COMPACT ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , Format.COMPACT ) ; }
Distance : 9

65
Tree	{ return getCumPct ( Comparable , v . getCumPct () , Coordinates3D.ZERO ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , Coordinates3D.ZERO ) ; }
Distance : 9

66
Tree	{ return getCumPct ( Comparable , v . getCumPct () , setShapeInternal ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , setShapeInternal ) ; }
Distance : 9

67
Tree	{ return getCumPct ( Comparable , v . getCumPct () , aList ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , aList ) ; }
Distance : 9

68
Tree	{ return getCumPct ( v , v . getCumPct () , PropertyCollapseLevel.NONE ) ; }
Code	{ return getCumPct ( v , v . getCumPct () , PropertyCollapseLevel.NONE ) ; }
Distance : 9

69
Tree	{ return Comparable ( false , super ) ; }
Code	{ return Comparable ( false , super ) ; }
Distance : 7

70
Tree	{ return getPct ( ( Comparable ) v . getPct ( NUMBER_CONSTANT ) ) ; }
Code	{ return getPct ( ( Comparable ) v . getPct ( NUMBER_CONSTANT ) ) ; }
Distance : 7

71
Tree	{ return getPct ( ( Comparable ) v . getPct ( v ) ) ; }
Code	{ return getPct ( ( Comparable ) v . getPct ( v ) ) ; }
Distance : 6

72
Tree	{ return getPct ( ( Comparable < Comparable > ) ^ ) ; }
Code	{ return getPct ( ( Comparable < Comparable > ) ^ ) ; }
Distance : 2

73
Tree	{ return getCumPct ( ( Comparable < Comparable > ) CHAR_CONS ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) CHAR_CONS ) ; }
Distance : 3

74
Tree	{ return getCumPct ( ( Comparable < ? super v > ) synchronized ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) synchronized ) ; }
Distance : 5

75
Tree	{ return getCumPct ( ( Comparable < v > ) instanceof ) ; }
Code	{ return getCumPct ( ( Comparable < v > ) instanceof ) ; }
Distance : 3

76
Tree	{ return getCumPct ( ( Comparable < v > ) *= ) ; }
Code	{ return getCumPct ( ( Comparable < v > ) *= ) ; }
Distance : 3

77
Tree	{ return getCumPct ( ( Comparable < Comparable > ) != ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) != ) ; }
Distance : 3

78
Tree	{ return getCumPct ( ( Comparable < Comparable > ) [] ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) [] ) ; }
Distance : 3

79
Tree	{ return getCumPct ( ( Comparable < Comparable > ) returnChar ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) returnChar ) ; }
Distance : 3

80
Tree	{ return getPct ( ( Comparable < Comparable > ) instanceof ) ; }
Code	{ return getPct ( ( Comparable < Comparable > ) instanceof ) ; }
Distance : 2

81
Tree	{ return getCumPct ( ( Comparable < v > ) >= ) ; }
Code	{ return getCumPct ( ( Comparable < v > ) >= ) ; }
Distance : 3

82
Tree	{ return getCumPct ( ( Comparable < Comparable > ) + ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) + ) ; }
Distance : 3

83
Tree	{ return getCumPct ( ( Comparable < ? super v > ) static ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) static ) ; }
Distance : 5

84
Tree	{ return getPct ( ( Comparable < Comparable > ) >= ) ; }
Code	{ return getPct ( ( Comparable < Comparable > ) >= ) ; }
Distance : 2

85
Tree	{ return getCumPct ( ( ( v ) v . getPct ( NUMBER_CONSTANT ) ) . v ) ; }
Code	{ return getCumPct ( ( ( v ) v . getPct ( NUMBER_CONSTANT ) ) . v ) ; }
Distance : 11

86
Tree	{ return getPct ( ( Comparable < Comparable > ) *= ) ; }
Code	{ return getPct ( ( Comparable < Comparable > ) *= ) ; }
Distance : 2

87
Tree	{ return getCumPct ( ( Comparable ) v . getPct ( v , ( S2Point [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getPct ( v , ( S2Point [] ) null ) ) ; }
Distance : 13

88
Tree	{ return getPct ( ( Comparable < Comparable > ) {} ) ; }
Code	{ return getPct ( ( Comparable < Comparable > ) {} ) ; }
Distance : 2

89
Tree	{ return getPct ( ( Comparable < Comparable > ) throws ) ; }
Code	{ return getPct ( ( Comparable < Comparable > ) throws ) ; }
Distance : 2

90
Tree	{ return getPct ( ( Comparable < Comparable > ) * ) ; }
Code	{ return getPct ( ( Comparable < Comparable > ) * ) ; }
Distance : 2

91
Tree	{ return getCumPct ( ( Comparable < Comparable > ) Cartesian2D ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) Cartesian2D ) ; }
Distance : 3

92
Tree	{ return getCumPct ( ( ( v ) Comparable ) . v ) ; }
Code	{ return getCumPct ( ( ( v ) Comparable ) . v ) ; }
Distance : 6

93
Tree	{ return getCumPct ( ( Comparable < v > ) % ) ; }
Code	{ return getCumPct ( ( Comparable < v > ) % ) ; }
Distance : 3

94
Tree	{ return getCumPct ( ( Comparable < v > ) {} ) ; }
Code	{ return getCumPct ( ( Comparable < v > ) {} ) ; }
Distance : 3

95
Tree	{ return getCumPct ( ( Comparable < v > ) &= ) ; }
Code	{ return getCumPct ( ( Comparable < v > ) &= ) ; }
Distance : 3

96
Tree	{ return getCumPct ( ( Comparable < v > ) ^ ) ; }
Code	{ return getCumPct ( ( Comparable < v > ) ^ ) ; }
Distance : 3

97
Tree	{ return getCumPct ( ( Comparable < Comparable > ) Matcher ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) Matcher ) ; }
Distance : 3

98
Tree	{ return getCumPct ( ( Comparable < ? super v > ) InvocationOnMock ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) InvocationOnMock ) ; }
Distance : 5

99
Tree	{ return getCumPct ( ( Comparable < ? super v > ) throws ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) throws ) ; }
Distance : 5

========================================================================


========================================================================
Example Number: 57
Parent Code is: 
{ return solve ( min , max ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return solve ( f , min , max ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=solve}) (214{val=(}) (800{val=min}) (234{val=,}) (800{val=max}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=solve}) (214{val=(}) (800{val=f}) (234{val=,}) (800{val=min}) (234{val=,}) (800{val=max}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/70/parent/src_main_java_org_apache_commons_math_analysis_solvers_BisectionSolver.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ return solve ( min , null ) ; } }
Code	{ return solve ( min , null ) ; } }
Distance : 4

1
Tree	{ return solve ( min , null ) ; } null
Code	{ return solve ( min , null ) ; } null
Distance : 4

2
Tree	{ return solve ( min , null ) ; } e
Code	{ return solve ( min , null ) ; } e
Distance : 4

3
Tree	{ return solve ( min , null ) ; } n
Code	{ return solve ( min , null ) ; } n
Distance : 4

4
Tree	{ return solve ( min , null ) ; } final
Code	{ return solve ( min , null ) ; } final
Distance : 4

5
Tree	{ return solve ( min , null ) ; } this
Code	{ return solve ( min , null ) ; } this
Distance : 4

6
Tree	{ return solve ( min , null ) ; } NUMBER_CONSTANT
Code	{ return solve ( min , null ) ; } NUMBER_CONSTANT
Distance : 4

7
Tree	{ return solve ( min , null ) ; } return
Code	{ return solve ( min , null ) ; } return
Distance : 4

8
Tree	{ return solve ( min , null ) ; } if
Code	{ return solve ( min , null ) ; } if
Distance : 4

9
Tree	{ return solve ( min , max ) ; } NUMBER_CONSTANT
Code	{ return solve ( min , max ) ; } NUMBER_CONSTANT
Distance : 3

10
Tree	{ return solve ( min , max ) ; } new
Code	{ return solve ( min , max ) ; } new
Distance : 3

11
Tree	{ return solve ( min , max ) ; } =
Code	{ return solve ( min , max ) ; } =
Distance : 3

12
Tree	{ return solve ( min , max ) ; } :
Code	{ return solve ( min , max ) ; } :
Distance : 3

13
Tree	{ return solve ( min , max ) ; } MathRuntimeException
Code	{ return solve ( min , max ) ; } MathRuntimeException
Distance : 3

14
Tree	{ return solve ( min , max ) ; } mock
Code	{ return solve ( min , max ) ; } mock
Distance : 3

15
Tree	{ return solve ( min , max ) ; } ParamChecks
Code	{ return solve ( min , max ) ; } ParamChecks
Distance : 3

16
Tree	{ return solve ( min , max ) ; } class
Code	{ return solve ( min , max ) ; } class
Distance : 3

17
Tree	{ return solve ( min , max ) ; } f
Code	{ return solve ( min , max ) ; } f
Distance : 3

18
Tree	{ return solve ( min , null ) ; } +
Code	{ return solve ( min , null ) ; } +
Distance : 4

19
Tree	{ return solve ( min , max ) ; } array
Code	{ return solve ( min , max ) ; } array
Distance : 3

20
Tree	{ return solve ( min , null ) ; } compiler
Code	{ return solve ( min , null ) ; } compiler
Distance : 4

21
Tree	{ return solve ( min , null ) ; } catch
Code	{ return solve ( min , null ) ; } catch
Distance : 4

22
Tree	{ return solve ( min , null ) ; } {
Code	{ return solve ( min , null ) ; } {
Distance : 4

23
Tree	{ return solve ( min , null ) ; } checkState
Code	{ return solve ( min , null ) ; } checkState
Distance : 4

24
Tree	{ return solve ( min , null ) ; } double
Code	{ return solve ( min , null ) ; } double
Distance : 4

25
Tree	{ return solve ( min , null ) ; } !
Code	{ return solve ( min , null ) ; } !
Distance : 4

26
Tree	{ return solve ( min , null ) ; } assertEquals
Code	{ return solve ( min , null ) ; } assertEquals
Distance : 4

27
Tree	{ return solve ( solve () , solve ( max ) ) ; } =
Code	{ return solve ( solve () , solve ( max ) ) ; } =
Distance : 6

28
Tree	{ return solve ( min , null ) ; } test
Code	{ return solve ( min , null ) ; } test
Distance : 4

29
Tree	{ return solve ( min , null ) ; } public
Code	{ return solve ( min , null ) ; } public
Distance : 4

30
Tree	{ return solve ( min , null ) ; } >
Code	{ return solve ( min , null ) ; } >
Distance : 4

31
Tree	{ return solve ( min , null ) ; } <
Code	{ return solve ( min , null ) ; } <
Distance : 4

32
Tree	{ return solve ( min , null ) ; } boolean
Code	{ return solve ( min , null ) ; } boolean
Distance : 4

33
Tree	{ return solve ( min , null ) ; } m
Code	{ return solve ( min , null ) ; } m
Distance : 4

34
Tree	{ return solve ( min , null ) ; } type
Code	{ return solve ( min , null ) ; } type
Distance : 4

35
Tree	{ return solve ( min , null ) ; } *
Code	{ return solve ( min , null ) ; } *
Distance : 4

36
Tree	{ return solve ( min , null ) ; } getInstance
Code	{ return solve ( min , null ) ; } getInstance
Distance : 4

37
Tree	{ return solve ( min , null ) ; } serialised
Code	{ return solve ( min , null ) ; } serialised
Distance : 4

38
Tree	{ return solve ( min , null ) ; } throw
Code	{ return solve ( min , null ) ; } throw
Distance : 4

39
Tree	{ return solve ( min , null ) ; } String
Code	{ return solve ( min , null ) ; } String
Distance : 4

40
Tree	{ return solve ( min , max ) ; } boolean
Code	{ return solve ( min , max ) ; } boolean
Distance : 3

41
Tree	{ return solve ( min , max ) ; } result
Code	{ return solve ( min , max ) ; } result
Distance : 3

42
Tree	{ return solve ( min , max ) ; } try
Code	{ return solve ( min , max ) ; } try
Distance : 3

43
Tree	{ return Ref.Type.ALIASING_GET . solve ( min ) ; }
Code	{ return Ref.Type.ALIASING_GET . solve ( min ) ; }
Distance : 6

44
Tree	{ return solve ( min , max ) ; } ;
Code	{ return solve ( min , max ) ; } ;
Distance : 3

45
Tree	{ return solve ( min , max ) ; } (
Code	{ return solve ( min , max ) ; } (
Distance : 3

46
Tree	{ return solve ( min , max ) ; } .
Code	{ return solve ( min , max ) ; } .
Distance : 3

47
Tree	{ return solve ( min , max ) ; } <
Code	{ return solve ( min , max ) ; } <
Distance : 3

48
Tree	{ return solve ( min , max ) ; } }
Code	{ return solve ( min , max ) ; } }
Distance : 3

49
Tree	{ return solve ( min , max ) ; } {
Code	{ return solve ( min , max ) ; } {
Distance : 3

50
Tree	{ return solve ( min , max ) ; } ,
Code	{ return solve ( min , max ) ; } ,
Distance : 3

51
Tree	{ return solve ( min , max ) ; } ()
Code	{ return solve ( min , max ) ; } ()
Distance : 3

52
Tree	{ return solve ( min , max ) ; } String
Code	{ return solve ( min , max ) ; } String
Distance : 3

53
Tree	{ return solve ( min , max ) ; } nullNotPermitted
Code	{ return solve ( min , max ) ; } nullNotPermitted
Distance : 3

54
Tree	{ return solve ( min , max ) ; } -
Code	{ return solve ( min , max ) ; } -
Distance : 3

55
Tree	{ return solve ( min , max ) ; } ==
Code	{ return solve ( min , max ) ; } ==
Distance : 3

56
Tree	{ return solve ( min , max ) ; } &&
Code	{ return solve ( min , max ) ; } &&
Distance : 3

57
Tree	{ return solve ( min , max ) ; } Preconditions
Code	{ return solve ( min , max ) ; } Preconditions
Distance : 3

58
Tree	{ return solve ( min , max ) ; } mode
Code	{ return solve ( min , max ) ; } mode
Distance : 3

59
Tree	{ return solve ( min , max ) ; } ]
Code	{ return solve ( min , max ) ; } ]
Distance : 3

60
Tree	{ return solve ( min , max ) ; } FastMath
Code	{ return solve ( min , max ) ; } FastMath
Distance : 3

61
Tree	{ return solve ( solve () , solve ( max ) ) ; } if
Code	{ return solve ( solve () , solve ( max ) ) ; } if
Distance : 6

62
Tree	{ return solve ( solve () , solve ( max ) ) ; } >
Code	{ return solve ( solve () , solve ( max ) ) ; } >
Distance : 6

63
Tree	{ return solve ( solve () , solve ( max ) ) ; } true
Code	{ return solve ( solve () , solve ( max ) ) ; } true
Distance : 6

64
Tree	{ return solve ( min , max ) ; } double
Code	{ return solve ( min , max ) ; } double
Distance : 3

65
Tree	{ return solve ( min , max ) ; } STRING_CONSTANT
Code	{ return solve ( min , max ) ; } STRING_CONSTANT
Distance : 3

66
Tree	{ return solve ( min , max ) ; } false
Code	{ return solve ( min , max ) ; } false
Distance : 3

67
Tree	{ return solve ( min , max ) ; } checkState
Code	{ return solve ( min , max ) ; } checkState
Distance : 3

68
Tree	{ return solve ( min , max ) ; } super
Code	{ return solve ( min , max ) ; } super
Distance : 3

69
Tree	{ return solve ( min , max ) ; } [
Code	{ return solve ( min , max ) ; } [
Distance : 3

70
Tree	{ return solve ( min , max ) ; } n
Code	{ return solve ( min , max ) ; } n
Distance : 3

71
Tree	{ return solve ( min , max ) ; } +
Code	{ return solve ( min , max ) ; } +
Distance : 3

72
Tree	{ return solve ( min , null ) ; } ()
Code	{ return solve ( min , null ) ; } ()
Distance : 4

73
Tree	{ return solve ( min , max ) ; } e
Code	{ return solve ( min , max ) ; } e
Distance : 3

74
Tree	{ return solve ( min , max ) ; } compiler
Code	{ return solve ( min , max ) ; } compiler
Distance : 3

75
Tree	{ return solve ( min , max ) ; } Override
Code	{ return solve ( min , max ) ; } Override
Distance : 3

76
Tree	{ return solve ( min , max ) ; } Object
Code	{ return solve ( min , max ) ; } Object
Distance : 3

77
Tree	{ return solve ( min , max ) ; } fail
Code	{ return solve ( min , max ) ; } fail
Distance : 3

78
Tree	{ return solve ( min , max ) ; } join
Code	{ return solve ( min , max ) ; } join
Distance : 3

79
Tree	{ return solve ( solve () , solve ( max ) ) ; } super
Code	{ return solve ( solve () , solve ( max ) ) ; } super
Distance : 6

80
Tree	{ return solve ( solve () , solve ( max ) ) ; } -
Code	{ return solve ( solve () , solve ( max ) ) ; } -
Distance : 6

81
Tree	{ return solve ( solve () , solve ( max ) ) ; } ]
Code	{ return solve ( solve () , solve ( max ) ) ; } ]
Distance : 6

82
Tree	{ return solve ( min , max ) ; } catch
Code	{ return solve ( min , max ) ; } catch
Distance : 3

83
Tree	{ return solve ( min , max ) ; } {}
Code	{ return solve ( min , max ) ; } {}
Distance : 3

84
Tree	{ return solve ( min , null ) ; } ;
Code	{ return solve ( min , null ) ; } ;
Distance : 4

85
Tree	{ return solve ( min , null ) ; } paint
Code	{ return solve ( min , null ) ; } paint
Distance : 4

86
Tree	{ return PlotOrientation.VERTICAL . solve ( min , max , max ) ; }
Code	{ return PlotOrientation.VERTICAL . solve ( min , max , max ) ; }
Distance : 4

87
Tree	{ return wrap . solve ( min , max , max ) ; }
Code	{ return wrap . solve ( min , max , max ) ; }
Distance : 4

88
Tree	{ return solve ( min . solve ( min ) , max ) ; } f
Code	{ return solve ( min . solve ( min ) , max ) ; } f
Distance : 6

89
Tree	{ return solve ( min . solve ( min ) , max ) ; } array
Code	{ return solve ( min . solve ( min ) , max ) ; } array
Distance : 6

90
Tree	{ return solve ( min . solve ( min ) , max ) ; } fail
Code	{ return solve ( min . solve ( min ) , max ) ; } fail
Distance : 6

91
Tree	{ return solve ( min . solve ( min ) , max ) ; } List
Code	{ return solve ( min . solve ( min ) , max ) ; } List
Distance : 6

92
Tree	{ return solve ( min . solve ( min ) , max ) ; } try
Code	{ return solve ( min . solve ( min ) , max ) ; } try
Distance : 6

93
Tree	{ return solve ( min . solve ( min ) , max ) ; } :
Code	{ return solve ( min . solve ( min ) , max ) ; } :
Distance : 6

94
Tree	{ return solve ( min . solve ( min ) , max ) ; } >
Code	{ return solve ( min . solve ( min ) , max ) ; } >
Distance : 6

95
Tree	{ return solve ( min . solve ( min ) , max ) ; } if
Code	{ return solve ( min . solve ( min ) , max ) ; } if
Distance : 6

96
Tree	{ return solve ( min . solve ( min ) , max ) ; } final
Code	{ return solve ( min . solve ( min ) , max ) ; } final
Distance : 6

97
Tree	{ return solve ( min . solve ( min ) , max ) ; } <
Code	{ return solve ( min . solve ( min ) , max ) ; } <
Distance : 6

98
Tree	{ return solve ( min . solve ( min ) , max ) ; } NUMBER_CONSTANT
Code	{ return solve ( min . solve ( min ) , max ) ; } NUMBER_CONSTANT
Distance : 6

99
Tree	{ return solve ( min . solve ( min ) , max ) ; } new
Code	{ return solve ( min . solve ( min ) , max ) ; } new
Distance : 6

========================================================================


========================================================================
Example Number: 58
Parent Code is: 
out [ i ] [ j ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - tDistribution . cumulativeProbability ( t ) ) ;
-------------------------------------------------------------------------------
Child code is: 
out [ i ] [ j ] = NUMBER_CONSTANT * tDistribution . cumulativeProbability ( - t ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (7 (2 (2 (801{val=out}) (221{val=[}) (800{val=i}) (222{val=]})) (221{val=[}) (800{val=j}) (222{val=]})) (204{val==}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (36 (214{val=(}) (27 (34{val=NUMBER_CONSTANT}) (201{val=-}) (32 (800{val=tDistribution}) (235{val=.}) (802{val=cumulativeProbability}) (214{val=(}) (800{val=t}) (215{val=)}))) (215{val=)})))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (7 (2 (2 (801{val=out}) (221{val=[}) (800{val=i}) (222{val=]})) (221{val=[}) (800{val=j}) (222{val=]})) (204{val==}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (32 (800{val=tDistribution}) (235{val=.}) (802{val=cumulativeProbability}) (214{val=(}) (38 (201{val=-}) (800{val=t})) (215{val=)})))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/69/parent/src_main_java_org_apache_commons_math_stat_correlation_PearsonsCorrelation.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	tDistribution += i / ( j . cumulativeProbability ( t ) - j ) ;
Code	tDistribution += i / ( j . cumulativeProbability ( t ) - j ) ;
Distance : 12

1
Tree	j = ( ( LanguageMode.ECMASCRIPT_2016 == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( LanguageMode.ECMASCRIPT_2016 == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

2
Tree	t = ( ( verifierStub.invocations == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	t = ( ( verifierStub.invocations == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

3
Tree	j = ( ( MathUtils.TWO_PI == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Code	j = ( ( MathUtils.TWO_PI == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Distance : 16

4
Tree	t = ( ( config.parseTypeSyntax == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	t = ( ( config.parseTypeSyntax == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

5
Tree	j = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

6
Tree	j = ( ( CompilerOptions.J2clPassMode == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( CompilerOptions.J2clPassMode == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

7
Tree	i = ( ( ArrayRealVectorTest.RealVectorTestImpl == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( ArrayRealVectorTest.RealVectorTestImpl == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

8
Tree	tDistribution = ( ( RandomSource.MT == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	tDistribution = ( ( RandomSource.MT == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

9
Tree	j = ( ( LocalizedFormats.NON_SQUARE_MATRIX == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Code	j = ( ( LocalizedFormats.NON_SQUARE_MATRIX == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Distance : 16

10
Tree	i = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * -= * / * tDistribution ) ;
Code	i = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * -= * / * tDistribution ) ;
Distance : 19

11
Tree	i += j / ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( j ) ) ;
Code	i += j / ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( j ) ) ;
Distance : 9

12
Tree	t = ( ( FastMath.PI == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Code	t = ( ( FastMath.PI == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Distance : 16

13
Tree	i += i / ( t . cumulativeProbability ( t ) - i ) ;
Code	i += i / ( t . cumulativeProbability ( t ) - i ) ;
Distance : 13

14
Tree	i = ( ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

15
Tree	j += i && ( j != t . cumulativeProbability ( t ) ) ;
Code	j += i && ( j != t . cumulativeProbability ( t ) ) ;
Distance : 11

16
Tree	j += j / ( t . cumulativeProbability ( tDistribution ) > > > NUMBER_CONSTANT ) ;
Code	j += j / ( t . cumulativeProbability ( tDistribution ) > > > NUMBER_CONSTANT ) ;
Distance : 15

17
Tree	j = ( ( expected.length == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( expected.length == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

18
Tree	tDistribution += j / ( t . cumulativeProbability ( i ) > > > NUMBER_CONSTANT ) ;
Code	tDistribution += j / ( t . cumulativeProbability ( i ) > > > NUMBER_CONSTANT ) ;
Distance : 16

19
Tree	tDistribution = ( ( LocalizedFormats.ROW_INDEX_OUT_OF_RANGE == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	tDistribution = ( ( LocalizedFormats.ROW_INDEX_OUT_OF_RANGE == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

20
Tree	t += j / ( NUMBER_CONSTANT + t . cumulativeProbability ( t ) ) ;
Code	t += j / ( NUMBER_CONSTANT + t . cumulativeProbability ( t ) ) ;
Distance : 11

21
Tree	tDistribution = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	tDistribution = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 18

22
Tree	tDistribution = ( ( CompilerOptions.J2clPassMode == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	tDistribution = ( ( CompilerOptions.J2clPassMode == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 18

23
Tree	i = ( ( LanguageMode.ECMASCRIPT_2016 == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( LanguageMode.ECMASCRIPT_2016 == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

24
Tree	j = ( ( RandomSource.State == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	j = ( ( RandomSource.State == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 18

25
Tree	t = ( ( Boolean.TRUE == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	t = ( ( Boolean.TRUE == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 18

26
Tree	i = ( ( MathUtils.TWO_PI == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Code	i = ( ( MathUtils.TWO_PI == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Distance : 16

27
Tree	j = ( ( verifierStub.invocations == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Code	j = ( ( verifierStub.invocations == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Distance : 16

28
Tree	i = ( ( CompilerOptions.J2clPassMode == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( CompilerOptions.J2clPassMode == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

29
Tree	i = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

30
Tree	i += j / ( t . cumulativeProbability ( tDistribution ) > > > NUMBER_CONSTANT ) ;
Code	i += j / ( t . cumulativeProbability ( tDistribution ) > > > NUMBER_CONSTANT ) ;
Distance : 15

31
Tree	i += i && ( j . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	i += i && ( j . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 14

32
Tree	i = ( ( LocalizedFormats.NON_SQUARE_MATRIX == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Code	i = ( ( LocalizedFormats.NON_SQUARE_MATRIX == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Distance : 16

33
Tree	tDistribution = ( ( i != i . cumulativeProbability ( t ) ) * *= * / * tDistribution ) ;
Code	tDistribution = ( ( i != i . cumulativeProbability ( t ) ) * *= * / * tDistribution ) ;
Distance : 18

34
Tree	j = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * & * / * tDistribution ) ;
Code	j = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * & * / * tDistribution ) ;
Distance : 19

35
Tree	j = ( ( config.parseTypeSyntax == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Code	j = ( ( config.parseTypeSyntax == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Distance : 16

36
Tree	j = ( ( Any.ANY == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( Any.ANY == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

37
Tree	i += j / ( NUMBER_CONSTANT + j . cumulativeProbability ( t ) ) ;
Code	i += j / ( NUMBER_CONSTANT + j . cumulativeProbability ( t ) ) ;
Distance : 10

38
Tree	i = ( ( com.google.protobuf.InvalidProtocolBufferException == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	i = ( ( com.google.protobuf.InvalidProtocolBufferException == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 18

39
Tree	j = ( ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	j = ( ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 18

40
Tree	t = ( t != i . cumulativeProbability ( t . cumulativeProbability ( t ) - j ) ) ;
Code	t = ( t != i . cumulativeProbability ( t . cumulativeProbability ( t ) - j ) ) ;
Distance : 15

41
Tree	j = ( ( metadata.superClassNameNode == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	j = ( ( metadata.superClassNameNode == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 18

42
Tree	tDistribution = ( ( expected.length == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	tDistribution = ( ( expected.length == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 18

43
Tree	j = ( ( LocalizedFormats.FAILED_FRACTION_CONVERSION == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	j = ( ( LocalizedFormats.FAILED_FRACTION_CONVERSION == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 18

44
Tree	j = ( ( ThrowsException == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	j = ( ( ThrowsException == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 18

45
Tree	tDistribution += i / ( t . cumulativeProbability ( i ) > > > NUMBER_CONSTANT ) ;
Code	tDistribution += i / ( t . cumulativeProbability ( i ) > > > NUMBER_CONSTANT ) ;
Distance : 15

46
Tree	i = ( ( expected.length == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( expected.length == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

47
Tree	i = ( ( FastMath.PI == j ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	i = ( ( FastMath.PI == j ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 17

48
Tree	i += i / ( t . cumulativeProbability ( j ) - tDistribution ) ;
Code	i += i / ( t . cumulativeProbability ( j ) - tDistribution ) ;
Distance : 13

49
Tree	t = ( ( obj1.props == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	t = ( ( obj1.props == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

50
Tree	j = ( ( ComposableFunction.COSH == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( ComposableFunction.COSH == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

51
Tree	j = ( ( LocalizedFormats.RANDOMKEY_MUTATION_WRONG_CLASS == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( LocalizedFormats.RANDOMKEY_MUTATION_WRONG_CLASS == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

52
Tree	i = ( ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	i = ( ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 18

53
Tree	j += j / ( t != t . cumulativeProbability ( j ) ) ;
Code	j += j / ( t != t . cumulativeProbability ( j ) ) ;
Distance : 12

54
Tree	i += j && ( NUMBER_CONSTANT + j . cumulativeProbability ( t ) ) ;
Code	i += j && ( NUMBER_CONSTANT + j . cumulativeProbability ( t ) ) ;
Distance : 10

55
Tree	t += i / ( NUMBER_CONSTANT + t . cumulativeProbability ( t ) ) ;
Code	t += i / ( NUMBER_CONSTANT + t . cumulativeProbability ( t ) ) ;
Distance : 11

56
Tree	i = ( ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	i = ( ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 18

57
Tree	j += tDistribution / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	j += tDistribution / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 16

58
Tree	j = ( ( FastMath.PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	j = ( ( FastMath.PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

59
Tree	t = ( ( j . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * % * tDistribution ) ;
Code	t = ( ( j . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * % * tDistribution ) ;
Distance : 20

60
Tree	tDistribution = ( ( ArrayRealVectorTest.RealVectorTestImpl == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	tDistribution = ( ( ArrayRealVectorTest.RealVectorTestImpl == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

61
Tree	t = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * % * / * tDistribution ) ;
Code	t = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * % * / * tDistribution ) ;
Distance : 19

62
Tree	i = ( ( verifierStub.invocations == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Code	i = ( ( verifierStub.invocations == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Distance : 16

63
Tree	j = ( ( com.google.protobuf.InvalidProtocolBufferException == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( com.google.protobuf.InvalidProtocolBufferException == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

64
Tree	i += j / ( t != t . cumulativeProbability ( j ) ) ;
Code	i += j / ( t != t . cumulativeProbability ( j ) ) ;
Distance : 11

65
Tree	i += j / ( t . cumulativeProbability ( t ) - j ) ;
Code	i += j / ( t . cumulativeProbability ( t ) - j ) ;
Distance : 12

66
Tree	j = ( ( TimePeriodValue == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	j = ( ( TimePeriodValue == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 18

67
Tree	tDistribution += i / ( t . cumulativeProbability ( t ) - i ) ;
Code	tDistribution += i / ( t . cumulativeProbability ( t ) - i ) ;
Distance : 13

68
Tree	t = ( ( RandomSource.MT == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	t = ( ( RandomSource.MT == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 18

69
Tree	j += i / ( t . cumulativeProbability ( tDistribution ) > > > NUMBER_CONSTANT ) ;
Code	j += i / ( t . cumulativeProbability ( tDistribution ) > > > NUMBER_CONSTANT ) ;
Distance : 14

70
Tree	tDistribution = ( ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	tDistribution = ( ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

71
Tree	tDistribution = ( ( i != i . cumulativeProbability ( t ) ) * & * / * tDistribution ) ;
Code	tDistribution = ( ( i != i . cumulativeProbability ( t ) ) * & * / * tDistribution ) ;
Distance : 18

72
Tree	j = ( ( i != i . cumulativeProbability ( t ) ) * % * % * tDistribution ) ;
Code	j = ( ( i != i . cumulativeProbability ( t ) ) * % * % * tDistribution ) ;
Distance : 18

73
Tree	tDistribution = ( ( i != i . cumulativeProbability ( t ) ) * / * % * tDistribution ) ;
Code	tDistribution = ( ( i != i . cumulativeProbability ( t ) ) * / * % * tDistribution ) ;
Distance : 18

74
Tree	j = ( ( FastMath.PI == j ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( FastMath.PI == j ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 16

75
Tree	i += i / ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( j ) ) ;
Code	i += i / ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( j ) ) ;
Distance : 10

76
Tree	tDistribution = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * -= * / * tDistribution ) ;
Code	tDistribution = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * -= * / * tDistribution ) ;
Distance : 19

77
Tree	j = ( ( RandomSource.TWO_CMRES == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	j = ( ( RandomSource.TWO_CMRES == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 18

78
Tree	j += i && ( NUMBER_CONSTANT + j . cumulativeProbability ( t ) ) ;
Code	j += i && ( NUMBER_CONSTANT + j . cumulativeProbability ( t ) ) ;
Distance : 11

79
Tree	t = ( ( LocalizedFormats.ROW_INDEX_OUT_OF_RANGE == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	t = ( ( LocalizedFormats.ROW_INDEX_OUT_OF_RANGE == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 18

80
Tree	j = ( ( j != i . cumulativeProbability ( t ) ) * * * / * tDistribution ) ;
Code	j = ( ( j != i . cumulativeProbability ( t ) ) * * * / * tDistribution ) ;
Distance : 18

81
Tree	i = ( ( Any.ANY == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( Any.ANY == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

82
Tree	j += j / ( j != t . cumulativeProbability ( t ) ) ;
Code	j += j / ( j != t . cumulativeProbability ( t ) ) ;
Distance : 12

83
Tree	i = ( ( config.parseTypeSyntax == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Code	i = ( ( config.parseTypeSyntax == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Distance : 16

84
Tree	j = ( ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

85
Tree	i = ( ( RandomSource.State == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	i = ( ( RandomSource.State == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 18

86
Tree	j = ( ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

87
Tree	tDistribution += j && ( t != t . cumulativeProbability ( t ) ) ;
Code	tDistribution += j && ( t != t . cumulativeProbability ( t ) ) ;
Distance : 12

88
Tree	tDistribution += j && ( NUMBER_CONSTANT + j . cumulativeProbability ( t ) ) ;
Code	tDistribution += j && ( NUMBER_CONSTANT + j . cumulativeProbability ( t ) ) ;
Distance : 11

89
Tree	tDistribution += j / ( t . cumulativeProbability ( j ) - tDistribution ) ;
Code	tDistribution += j / ( t . cumulativeProbability ( j ) - tDistribution ) ;
Distance : 13

90
Tree	i = ( ( ComposableFunction.COSH == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( ComposableFunction.COSH == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

91
Tree	tDistribution += j / ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( j ) ) ;
Code	tDistribution += j / ( NUMBER_CONSTANT + tDistribution . cumulativeProbability ( j ) ) ;
Distance : 10

92
Tree	j = ( ( obj1.props == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Code	j = ( ( obj1.props == tDistribution ) * ( NUMBER_CONSTANT / tDistribution ) * / * tDistribution ) ;
Distance : 16

93
Tree	j = ( ( v.data == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	j = ( ( v.data == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 18

94
Tree	i = ( ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	i = ( ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 18

95
Tree	i = ( ( metadata.superClassNameNode == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	i = ( ( metadata.superClassNameNode == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 18

96
Tree	j = ( ( i != i . cumulativeProbability ( t ) ) * ++ * / * tDistribution ) ;
Code	j = ( ( i != i . cumulativeProbability ( t ) ) * ++ * / * tDistribution ) ;
Distance : 18

97
Tree	i = ( ( LocalizedFormats.FAILED_FRACTION_CONVERSION == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	i = ( ( LocalizedFormats.FAILED_FRACTION_CONVERSION == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 18

98
Tree	i = ( ( ThrowsException == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	i = ( ( ThrowsException == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 18

99
Tree	t = ( ( callSite.parent == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	t = ( ( callSite.parent == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

========================================================================


========================================================================
Example Number: 59
Parent Code is: 
if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.MEAN , p ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=p}) (252{val=<=}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (32 (800{val=MathRuntimeException}) (235{val=.}) (802{val=createIllegalArgumentException}) (214{val=(}) (40{val=LocalizedFormats.NOT_POSITIVE_POISSON_MEAN}) (234{val=,}) (800{val=p}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=p}) (252{val=<=}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=NotStrictlyPositiveException})) (214{val=(}) (40{val=LocalizedFormats.MEAN}) (234{val=,}) (800{val=p}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/61/parent/src_main_java_org_apache_commons_math_distribution_PoissonDistributionImpl.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , false ) ; } join
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , false ) ; } join
Distance : 5

1
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } type
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } type
Distance : 3

2
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } double
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } double
Distance : 2

3
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } !=
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } !=
Distance : 2

4
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } compiler
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } compiler
Distance : 2

5
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } String
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } String
Distance : 2

6
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } e
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } e
Distance : 2

7
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } n
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } n
Distance : 2

8
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } throw
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } throw
Distance : 2

9
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } catch
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } catch
Distance : 2

10
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } void
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } void
Distance : 2

11
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } ==
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } ==
Distance : 2

12
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } ]
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } ]
Distance : 2

13
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } [
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } [
Distance : 2

14
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } Preconditions
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } Preconditions
Distance : 2

15
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } -
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } -
Distance : 2

16
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } mode
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } mode
Distance : 2

17
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } true
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } true
Distance : 2

18
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } {}
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } {}
Distance : 2

19
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } MathRuntimeException
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } MathRuntimeException
Distance : 2

20
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } x
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } x
Distance : 2

21
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } testSame
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } testSame
Distance : 2

22
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } parent
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } parent
Distance : 2

23
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } createIllegalArgumentException
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } createIllegalArgumentException
Distance : 2

24
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } *
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } *
Distance : 3

25
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } paint
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } paint
Distance : 3

26
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } <>
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } <>
Distance : 6

27
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } array
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } array
Distance : 6

28
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } Preconditions
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } Preconditions
Distance : 3

29
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } -
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } -
Distance : 3

30
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } IllegalArgumentException
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } IllegalArgumentException
Distance : 6

31
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } FastMath
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } FastMath
Distance : 6

32
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } expected
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } expected
Distance : 6

33
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } reportCodeChange
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } reportCodeChange
Distance : 6

34
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } List
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } List
Distance : 6

35
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } Args
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } Args
Distance : 6

36
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } fail
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } fail
Distance : 6

37
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } try
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } try
Distance : 6

38
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } ArrayList
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } ArrayList
Distance : 6

39
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } str
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } str
Distance : 2

40
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } fireChangeEvent
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } fireChangeEvent
Distance : 6

41
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } serialised
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } serialised
Distance : 6

42
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } join
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } join
Distance : 6

43
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } paint
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } paint
Distance : 6

44
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } *
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } *
Distance : 6

45
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } type
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } type
Distance : 6

46
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } class
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } class
Distance : 6

47
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } Object
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } Object
Distance : 6

48
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } mock
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } mock
Distance : 6

49
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } Override
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } Override
Distance : 6

50
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } f
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } f
Distance : 6

51
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } ParamChecks
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } ParamChecks
Distance : 6

52
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } getInstance
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } getInstance
Distance : 6

53
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } LINE_JOINER
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } LINE_JOINER
Distance : 2

54
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } assertThat
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } assertThat
Distance : 2

55
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } invocation
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } invocation
Distance : 2

56
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } []
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } []
Distance : 2

57
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } field
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } field
Distance : 3

58
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } t
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } t
Distance : 3

59
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } name
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } name
Distance : 3

60
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } add
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } add
Distance : 3

61
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } <>
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } <>
Distance : 3

62
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } array
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } array
Distance : 3

63
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } ParamChecks
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } ParamChecks
Distance : 3

64
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } f
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } f
Distance : 3

65
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } result
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } result
Distance : 3

66
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } :
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } :
Distance : 3

67
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } ParamChecks
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } ParamChecks
Distance : 2

68
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } boolean
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } boolean
Distance : 3

69
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } x
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } x
Distance : 3

70
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } testSame
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } testSame
Distance : 3

71
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } parent
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } parent
Distance : 3

72
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } createIllegalArgumentException
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } createIllegalArgumentException
Distance : 3

73
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } serialised
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } serialised
Distance : 3

74
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } getInstance
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } getInstance
Distance : 3

75
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } fireChangeEvent
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } fireChangeEvent
Distance : 3

76
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } ArrayList
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } ArrayList
Distance : 3

77
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } invocation
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } invocation
Distance : 3

78
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } assertThat
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } assertThat
Distance : 3

79
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } LINE_JOINER
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } LINE_JOINER
Distance : 3

80
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } m
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } m
Distance : 3

81
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } [
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } [
Distance : 3

82
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } f
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } f
Distance : 2

83
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } mock
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } mock
Distance : 2

84
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } false
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } false
Distance : 2

85
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } int
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } int
Distance : 2

86
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } super
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } super
Distance : 2

87
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } checkState
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } checkState
Distance : 2

88
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } try
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } try
Distance : 3

89
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } result
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } result
Distance : 2

90
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } IllegalArgumentException
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } IllegalArgumentException
Distance : 2

91
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } FastMath
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } FastMath
Distance : 2

92
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } expected
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } expected
Distance : 2

93
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } reportCodeChange
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } reportCodeChange
Distance : 2

94
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } List
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } List
Distance : 2

95
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } Override
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } Override
Distance : 2

96
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } Args
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } Args
Distance : 2

97
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } try
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } try
Distance : 2

98
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } ArrayList
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } ArrayList
Distance : 2

99
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } fireChangeEvent
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } fireChangeEvent
Distance : 2

========================================================================


========================================================================
Example Number: 60
Parent Code is: 
{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (16 (36 (214{val=(}) (27 (800{val=a}) (252{val=<=}) (800{val=b})) (215{val=)})) (233{val=?}) (800{val=b}) (226{val=:}) (36 (214{val=(}) (16 (32 (800{val=Float}) (235{val=.}) (802{val=isNaN}) (214{val=(}) (27 (800{val=a}) (200{val=+}) (800{val=b})) (215{val=)})) (233{val=?}) (40{val=Float.NaN}) (226{val=:}) (800{val=b})) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (16 (36 (214{val=(}) (27 (800{val=a}) (252{val=<=}) (800{val=b})) (215{val=)})) (233{val=?}) (800{val=b}) (226{val=:}) (36 (214{val=(}) (16 (32 (800{val=Float}) (235{val=.}) (802{val=isNaN}) (214{val=(}) (27 (800{val=a}) (200{val=+}) (800{val=b})) (215{val=)})) (233{val=?}) (40{val=Float.NaN}) (226{val=:}) (800{val=a})) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/59/parent/src_main_java_org_apache_commons_math_util_FastMath.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

1
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( byte ) isNaN ( ( a ) a , b ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( byte ) isNaN ( ( a ) a , b ) , a ) ; }
Distance : 16

2
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( char ) isNaN ( ( a ) a , a ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( char ) isNaN ( ( a ) a , a ) , b ) ; }
Distance : 17

3
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( char ) isNaN ( ( a ) a , b ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( char ) isNaN ( ( a ) a , b ) , a ) ; }
Distance : 16

4
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( long ) isNaN ( ( b ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( long ) isNaN ( ( b ) b , b ) , b ) ; }
Distance : 17

5
Tree	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( boolean ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( boolean ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

6
Tree	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( byte ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( byte ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

7
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( float ) isNaN ( ( b ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( float ) isNaN ( ( b ) b , b ) , b ) ; }
Distance : 17

8
Tree	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( long ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( long ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 17

9
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( b ) b , a ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( b ) b , a ) , b ) ; }
Distance : 17

10
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( b ) b , b ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( b ) b , b ) , a ) ; }
Distance : 16

11
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( a ) a , a ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( a ) a , a ) , b ) ; }
Distance : 17

12
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( a ) a , b ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( a ) a , b ) , a ) ; }
Distance : 16

13
Tree	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( char ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( char ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

14
Tree	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) b , a ) , b ) ; }
Code	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) b , a ) , b ) ; }
Distance : 17

15
Tree	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) b , b ) , a ) ; }
Code	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) b , b ) , a ) ; }
Distance : 16

16
Tree	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( float ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( float ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 17

17
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) Float , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) Float , b ) , b ) ; }
Distance : 17

18
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( boolean ) isNaN ( ( b ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( boolean ) isNaN ( ( b ) b , b ) , b ) ; }
Distance : 17

19
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( void ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( void ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

20
Tree	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( double ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( double ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

21
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( byte ) isNaN ( ( b ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( byte ) isNaN ( ( b ) b , b ) , b ) ; }
Distance : 17

22
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( byte ) isNaN ( ( a ) a , a ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( byte ) isNaN ( ( a ) a , a ) , b ) ; }
Distance : 17

23
Tree	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( int ) isNaN ( ( a ) a , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( int ) isNaN ( ( a ) a , b ) , b ) ; }
Distance : 17

24
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( boolean ) isNaN ( ( a ) a , b ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( boolean ) isNaN ( ( a ) a , b ) , a ) ; }
Distance : 16

25
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( boolean ) isNaN ( ( a ) a , a ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( boolean ) isNaN ( ( a ) a , a ) , b ) ; }
Distance : 17

26
Tree	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( char ) isNaN ( ( a ) a , b ) , b ) ; }
Code	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( char ) isNaN ( ( a ) a , b ) , b ) ; }
Distance : 18

27
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) Float , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) Float , b ) , b ) ; }
Distance : 17

28
Tree	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( short ) isNaN ( ( a ) a , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( short ) isNaN ( ( a ) a , b ) , b ) ; }
Distance : 17

29
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( b ) a , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( b ) a , b ) , b ) ; }
Distance : 17

30
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( char ) isNaN ( ( a ) b , a ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( char ) isNaN ( ( a ) b , a ) , a ) ; }
Distance : 15

31
Tree	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( b ) b , b ) , b ) ; }
Code	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( b ) b , b ) , b ) ; }
Distance : 18

32
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( long ) isNaN ( ( a ) a , a ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( long ) isNaN ( ( a ) a , a ) , b ) ; }
Distance : 17

33
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( long ) isNaN ( ( a ) a , b ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( long ) isNaN ( ( a ) a , b ) , a ) ; }
Distance : 16

34
Tree	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( a ) a , b ) , b ) ; }
Code	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( a ) a , b ) , b ) ; }
Distance : 18

35
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( Float ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( Float ) b , b ) , b ) ; }
Distance : 17

36
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( a ) b , a ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( a ) b , a ) , a ) ; }
Distance : 15

37
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) a , a ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) a , a ) , a ) ; }
Distance : 16

38
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( float ) isNaN ( ( a ) a , a ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( float ) isNaN ( ( a ) a , a ) , b ) ; }
Distance : 17

39
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( float ) isNaN ( ( a ) a , b ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( float ) isNaN ( ( a ) a , b ) , a ) ; }
Distance : 16

40
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( b ) a , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( b ) a , b ) , b ) ; }
Distance : 17

41
Tree	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( long ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( long ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

42
Tree	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) a , b ) , b ) ; }
Code	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) a , b ) , b ) ; }
Distance : 18

43
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) b , b ) , Float ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) b , b ) , Float ) ; }
Distance : 16

44
Tree	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( int ) isNaN ( ( a ) b , a ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( int ) isNaN ( ( a ) b , a ) , b ) ; }
Distance : 16

45
Tree	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( float ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( float ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

46
Tree	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( int ) isNaN ( ( a ) b , b ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( int ) isNaN ( ( a ) b , b ) , a ) ; }
Distance : 15

47
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) b , a ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) b , a ) , a ) ; }
Distance : 15

48
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) a , a ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) a , a ) , b ) ; }
Distance : 17

49
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) a , b ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) a , b ) , a ) ; }
Distance : 16

50
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( char ) isNaN ( ( b ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( char ) isNaN ( ( b ) b , b ) , b ) ; }
Distance : 17

51
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( float ) isNaN ( ( a ) a , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( float ) isNaN ( ( a ) a , b ) , b ) ; }
Distance : 17

52
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) a , b ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) a , b ) , a ) ; }
Distance : 16

53
Tree	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( int ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( int ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

54
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( boolean ) isNaN ( ( a ) a , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( boolean ) isNaN ( ( a ) a , b ) , b ) ; }
Distance : 17

55
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( byte ) isNaN ( ( a ) a , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( byte ) isNaN ( ( a ) a , b ) , b ) ; }
Distance : 17

56
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) b , a ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) b , a ) , b ) ; }
Distance : 16

57
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) b , b ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) b , b ) , a ) ; }
Distance : 15

58
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( char ) isNaN ( ( a ) a , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( char ) isNaN ( ( a ) a , b ) , b ) ; }
Distance : 17

59
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( b ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( b ) b , b ) , b ) ; }
Distance : 17

60
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( a ) a , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( a ) a , b ) , b ) ; }
Distance : 17

61
Tree	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 17

62
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) a , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) a , b ) , b ) ; }
Distance : 17

63
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( long ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( long ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

64
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) b , a ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) b , a ) , b ) ; }
Distance : 16

65
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) b , b ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) b , b ) , a ) ; }
Distance : 15

66
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( float ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( float ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

67
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( boolean ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( boolean ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

68
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( byte ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( byte ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

69
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( char ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( char ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

70
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

71
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) a , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) a , b ) , b ) ; }
Distance : 17

72
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) a , a ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) a , a ) , b ) ; }
Distance : 17

73
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( a ) b , b ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( a ) b , b ) , a ) ; }
Distance : 15

74
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( a ) b , a ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( a ) b , a ) , b ) ; }
Distance : 16

75
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( long ) isNaN ( ( a ) a , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( long ) isNaN ( ( a ) a , b ) , b ) ; }
Distance : 17

76
Tree	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( boolean ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( boolean ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 17

77
Tree	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( byte ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( byte ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 17

78
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( Float ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( Float ) b , b ) , b ) ; }
Distance : 17

79
Tree	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( char ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( char ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 17

80
Tree	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( short ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( short ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

81
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( b ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( b ) b , b ) , b ) ; }
Distance : 17

82
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( b ) a , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( b ) a , b ) , b ) ; }
Distance : 17

83
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( long ) isNaN ( ( a ) b , a ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( long ) isNaN ( ( a ) b , a ) , b ) ; }
Distance : 16

84
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( long ) isNaN ( ( a ) b , b ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( long ) isNaN ( ( a ) b , b ) , a ) ; }
Distance : 15

85
Tree	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 17

86
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( byte ) isNaN ( ( a ) b , a ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( byte ) isNaN ( ( a ) b , a ) , a ) ; }
Distance : 15

87
Tree	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) a , b ) , b ) ; }
Code	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) a , b ) , b ) ; }
Distance : 18

88
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( float ) isNaN ( ( a ) b , a ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( float ) isNaN ( ( a ) b , a ) , b ) ; }
Distance : 16

89
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( float ) isNaN ( ( a ) b , b ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( float ) isNaN ( ( a ) b , b ) , a ) ; }
Distance : 15

90
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( b ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( b ) b , b ) , b ) ; }
Distance : 17

91
Tree	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return b == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 17

92
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( boolean ) isNaN ( ( a ) b , a ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( boolean ) isNaN ( ( a ) b , a ) , b ) ; }
Distance : 16

93
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( boolean ) isNaN ( ( a ) b , b ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( boolean ) isNaN ( ( a ) b , b ) , a ) ; }
Distance : 15

94
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( byte ) isNaN ( ( a ) b , a ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( byte ) isNaN ( ( a ) b , a ) , b ) ; }
Distance : 16

95
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( byte ) isNaN ( ( a ) b , b ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( byte ) isNaN ( ( a ) b , b ) , a ) ; }
Distance : 15

96
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( char ) isNaN ( ( a ) b , a ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( char ) isNaN ( ( a ) b , a ) , b ) ; }
Distance : 16

97
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( char ) isNaN ( ( a ) b , b ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( char ) isNaN ( ( a ) b , b ) , a ) ; }
Distance : 15

98
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) b , a ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) b , a ) , a ) ; }
Distance : 15

99
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

========================================================================


========================================================================
Example Number: 61
Parent Code is: 
return fit ( new Gaussian.Parametric () , guess ) ;
-------------------------------------------------------------------------------
Child code is: 
return fit ( guess ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=fit}) (214{val=(}) (14 (304{val=new}) (43 (40{val=Gaussian.Parametric})) (216{val=()})) (234{val=,}) (800{val=guess}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=fit}) (214{val=(}) (800{val=guess}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/58/parent/src_main_java_org_apache_commons_math_optimization_fitting_GaussianFitter.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	return fit ( null ) ;
Code	return fit ( null ) ;
Distance : 1

1
Tree	return fit ( new UnfinishedStubbingStatement < guess > ( guess ) , guess ) ;
Code	return fit ( new UnfinishedStubbingStatement < guess > ( guess ) , guess ) ;
Distance : 9

2
Tree	return fit ( new PropertyAndSetterInjection < guess > ( guess ) , guess ) ;
Code	return fit ( new PropertyAndSetterInjection < guess > ( guess ) , guess ) ;
Distance : 9

3
Tree	return fit ( new CGLIBProxyRealMethod < guess > ( guess ) , guess ) ;
Code	return fit ( new CGLIBProxyRealMethod < guess > ( guess ) , guess ) ;
Distance : 9

4
Tree	return fit ( new TypeAttributeAppender.ForInstrumentedType < guess > ( guess ) , guess ) ;
Code	return fit ( new TypeAttributeAppender.ForInstrumentedType < guess > ( guess ) , guess ) ;
Distance : 9

5
Tree	return fit ( new CombinedCompilerPass < guess > ( new ) , guess ) ;
Code	return fit ( new CombinedCompilerPass < guess > ( new ) , guess ) ;
Distance : 9

6
Tree	return fit ( new actualInvocationStackTrace < guess > ( new ) , guess ) ;
Code	return fit ( new actualInvocationStackTrace < guess > ( new ) , guess ) ;
Distance : 9

7
Tree	return fit ( new FlatFlowScopeCache < guess > ( guess ) , guess ) ;
Code	return fit ( new FlatFlowScopeCache < guess > ( guess ) , guess ) ;
Distance : 9

8
Tree	return fit ( new BooleanOutcomePair < guess > ( guess ) , guess ) ;
Code	return fit ( new BooleanOutcomePair < guess > ( guess ) , guess ) ;
Distance : 9

9
Tree	return fit ( new DevNull.out < guess > ( new ) , guess ) ;
Code	return fit ( new DevNull.out < guess > ( new ) , guess ) ;
Distance : 9

10
Tree	return fit ( new MockitoLoggerImpl < guess > ( , ) , guess ) ;
Code	return fit ( new MockitoLoggerImpl < guess > ( , ) , guess ) ;
Distance : 9

11
Tree	return fit ( new AstValidator < guess > ( guess ) , guess ) ;
Code	return fit ( new AstValidator < guess > ( guess ) , guess ) ;
Distance : 9

12
Tree	return fit ( new NestedLoops < guess > ( new ) , guess ) ;
Code	return fit ( new NestedLoops < guess > ( new ) , guess ) ;
Distance : 9

13
Tree	return fit ( new EndsWith < guess > ( new ) , guess ) ;
Code	return fit ( new EndsWith < guess > ( new ) , guess ) ;
Distance : 9

14
Tree	return fit ( new ClassNotFoundSerialization < guess > ( guess ) , guess ) ;
Code	return fit ( new ClassNotFoundSerialization < guess > ( guess ) , guess ) ;
Distance : 9

15
Tree	return fit ( new VariableStepHandler < guess > ( guess ) , guess ) ;
Code	return fit ( new VariableStepHandler < guess > ( guess ) , guess ) ;
Distance : 9

16
Tree	return fit ( new StepInterpolatorWrapper < guess > ( guess ) , guess ) ;
Code	return fit ( new StepInterpolatorWrapper < guess > ( guess ) , guess ) ;
Distance : 9

17
Tree	return fit ( new SerializableMockitoMethod < guess > ( , ) , guess ) ;
Code	return fit ( new SerializableMockitoMethod < guess > ( , ) , guess ) ;
Distance : 9

18
Tree	return fit ( new getStringBuffer < guess > ( guess ) , guess ) ;
Code	return fit ( new getStringBuffer < guess > ( guess ) , guess ) ;
Distance : 9

19
Tree	return fit ( new createUnionType < guess > ( guess ) , guess ) ;
Code	return fit ( new createUnionType < guess > ( guess ) , guess ) ;
Distance : 9

20
Tree	return fit ( new BasicBlock < guess > ( new ) , guess ) ;
Code	return fit ( new BasicBlock < guess > ( new ) , guess ) ;
Distance : 9

21
Tree	return fit ( new openStream < guess > ( guess ) , guess ) ;
Code	return fit ( new openStream < guess > ( guess ) , guess ) ;
Distance : 9

22
Tree	return fit ( new TestPeriodType < guess > ( guess ) , guess ) ;
Code	return fit ( new TestPeriodType < guess > ( guess ) , guess ) ;
Distance : 9

23
Tree	return fit ( new cumulativeTestPoints < guess > ( guess ) , guess ) ;
Code	return fit ( new cumulativeTestPoints < guess > ( guess ) , guess ) ;
Distance : 9

24
Tree	return fit ( new SoftReference < guess > ( guess ) , guess ) ;
Code	return fit ( new SoftReference < guess > ( guess ) , guess ) ;
Distance : 9

25
Tree	return fit ( new readFully < guess > ( guess ) , guess ) ;
Code	return fit ( new readFully < guess > ( guess ) , guess ) ;
Distance : 9

26
Tree	return fit ( new minuendYear < guess > ( guess ) , guess ) ;
Code	return fit ( new minuendYear < guess > ( guess ) , guess ) ;
Distance : 9

27
Tree	return fit ( new MappedNameSupplier < guess > ( guess ) , guess ) ;
Code	return fit ( new MappedNameSupplier < guess > ( guess ) , guess ) ;
Distance : 9

28
Tree	return fit ( new StatArray < guess > ( new ) , guess ) ;
Code	return fit ( new StatArray < guess > ( new ) , guess ) ;
Distance : 9

29
Tree	return fit ( new valuesFileURL < guess > ( guess ) , guess ) ;
Code	return fit ( new valuesFileURL < guess > ( guess ) , guess ) ;
Distance : 9

30
Tree	return fit ( new HamcrestArgumentMatcher < guess > ( guess ) , guess ) ;
Code	return fit ( new HamcrestArgumentMatcher < guess > ( guess ) , guess ) ;
Distance : 9

31
Tree	return fit ( new CharacterCodingException < guess > ( new ) , guess ) ;
Code	return fit ( new CharacterCodingException < guess > ( new ) , guess ) ;
Distance : 9

32
Tree	return fit ( new CallsRealMethods < guess > ( guess ) , guess ) ;
Code	return fit ( new CallsRealMethods < guess > ( guess ) , guess ) ;
Distance : 9

33
Tree	return fit ( new Discrepancy < guess > ( new ) , guess ) ;
Code	return fit ( new Discrepancy < guess > ( new ) , guess ) ;
Distance : 9

34
Tree	return fit ( new NameContext < guess > ( guess ) , guess ) ;
Code	return fit ( new NameContext < guess > ( guess ) , guess ) ;
Distance : 9

35
Tree	return fit ( new InstantiatorProviderAdapter < guess > ( new ) , guess ) ;
Code	return fit ( new InstantiatorProviderAdapter < guess > ( new ) , guess ) ;
Distance : 9

36
Tree	return fit ( new DefineCallbackReturnCallback < guess > ( , ) , guess ) ;
Code	return fit ( new DefineCallbackReturnCallback < guess > ( , ) , guess ) ;
Distance : 9

37
Tree	return fit ( new StandardXYURLGenerator < guess > ( guess ) , guess ) ;
Code	return fit ( new StandardXYURLGenerator < guess > ( guess ) , guess ) ;
Distance : 9

38
Tree	return fit ( new getItemShape < guess > ( guess ) , guess ) ;
Code	return fit ( new getItemShape < guess > ( guess ) , guess ) ;
Distance : 9

39
Tree	return fit ( new GitLogProvider < guess > ( guess ) , guess ) ;
Code	return fit ( new GitLogProvider < guess > ( guess ) , guess ) ;
Distance : 9

40
Tree	return fit ( new Scanner < guess > ( guess ) , guess ) ;
Code	return fit ( new Scanner < guess > ( guess ) , guess ) ;
Distance : 9

41
Tree	return fit ( new astValidationEnabled < guess > ( guess ) , guess ) ;
Code	return fit ( new astValidationEnabled < guess > ( guess ) , guess ) ;
Distance : 9

42
Tree	return fit ( new PropertyWrite < guess > ( guess ) , guess ) ;
Code	return fit ( new PropertyWrite < guess > ( guess ) , guess ) ;
Distance : 9

43
Tree	return fit ( new TestFixture < guess > ( guess ) , guess ) ;
Code	return fit ( new TestFixture < guess > ( guess ) , guess ) ;
Distance : 9

44
Tree	return fit ( new UniformContinuousDistribution < guess > ( guess ) , guess ) ;
Code	return fit ( new UniformContinuousDistribution < guess > ( guess ) , guess ) ;
Distance : 9

45
Tree	return fit ( new TestObjectReference < guess > ( new ) , guess ) ;
Code	return fit ( new TestObjectReference < guess > ( new ) , guess ) ;
Distance : 9

46
Tree	return fit ( new isUnknownObject < guess > ( guess ) , guess ) ;
Code	return fit ( new isUnknownObject < guess > ( guess ) , guess ) ;
Distance : 9

47
Tree	return fit ( new MarsagliaLogNormalSampler < guess > ( guess ) , guess ) ;
Code	return fit ( new MarsagliaLogNormalSampler < guess > ( guess ) , guess ) ;
Distance : 9

48
Tree	return fit ( new ConstructorInjection < guess > ( guess ) , guess ) ;
Code	return fit ( new ConstructorInjection < guess > ( guess ) , guess ) ;
Distance : 9

49
Tree	return fit ( new UnicodeUnescaper < guess > ( guess ) , guess ) ;
Code	return fit ( new UnicodeUnescaper < guess > ( guess ) , guess ) ;
Distance : 9

50
Tree	return fit ( new WeakHashMap < guess > ( guess ) , guess ) ;
Code	return fit ( new WeakHashMap < guess > ( guess ) , guess ) ;
Distance : 9

51
Tree	return fit ( new NordsieckInitializer < guess > ( guess ) , guess ) ;
Code	return fit ( new NordsieckInitializer < guess > ( guess ) , guess ) ;
Distance : 9

52
Tree	return this . fit . fit ( new . fit () ) ;
Code	return this . fit . fit ( new . fit () ) ;
Distance : 8

53
Tree	return fit ( new SimpleAffix < guess > ( guess ) , guess ) ;
Code	return fit ( new SimpleAffix < guess > ( guess ) , guess ) ;
Distance : 9

54
Tree	return fit ( new UnrecognizedRequire < guess > ( guess ) , guess ) ;
Code	return fit ( new UnrecognizedRequire < guess > ( guess ) , guess ) ;
Distance : 9

55
Tree	return fit ( new MethodAttributeAppender.ForInstrumentedMethod < guess > ( guess ) , guess ) ;
Code	return fit ( new MethodAttributeAppender.ForInstrumentedMethod < guess > ( guess ) , guess ) ;
Distance : 9

56
Tree	return fit ( new SuppressDocWarningsGuard < guess > ( new ) , guess ) ;
Code	return fit ( new SuppressDocWarningsGuard < guess > ( new ) , guess ) ;
Distance : 9

57
Tree	return fit ( new InputStreamReader < guess > ( guess ) , guess ) ;
Code	return fit ( new InputStreamReader < guess > ( guess ) , guess ) ;
Distance : 9

58
Tree	return fit ( new TimeZoneOffset < guess > ( guess ) , guess ) ;
Code	return fit ( new TimeZoneOffset < guess > ( guess ) , guess ) ;
Distance : 9

59
Tree	return fit ( new TextListener < guess > ( new ) , guess ) ;
Code	return fit ( new TextListener < guess > ( new ) , guess ) ;
Distance : 9

60
Tree	return fit ( new MinimizeExitPoints < guess > ( guess ) , guess ) ;
Code	return fit ( new MinimizeExitPoints < guess > ( guess ) , guess ) ;
Distance : 9

61
Tree	return fit . fit () . guess . fit ( CHAR_CONS ) ;
Code	return fit . fit () . guess . fit ( CHAR_CONS ) ;
Distance : 8

62
Tree	return fit ( new . fit () , STRING_CONSTANT , guess ) ;
Code	return fit ( new . fit () , STRING_CONSTANT , guess ) ;
Distance : 7

63
Tree	return fit ( new HttpSessionBindingEvent <> ( guess ) , guess ) ;
Code	return fit ( new HttpSessionBindingEvent <> ( guess ) , guess ) ;
Distance : 7

64
Tree	return fit ( new TableXYDataset <> ( guess ) , guess ) ;
Code	return fit ( new TableXYDataset <> ( guess ) , guess ) ;
Distance : 7

65
Tree	return fit ( new withMockFeatures <> ( guess ) , guess ) ;
Code	return fit ( new withMockFeatures <> ( guess ) , guess ) ;
Distance : 7

66
Tree	return fit ( new InOrderWrapper <> ( guess ) , guess ) ;
Code	return fit ( new InOrderWrapper <> ( guess ) , guess ) ;
Distance : 7

67
Tree	return fit ( new HasCGLIBMethodProxy <> ( guess ) , guess ) ;
Code	return fit ( new HasCGLIBMethodProxy <> ( guess ) , guess ) ;
Distance : 7

68
Tree	return fit ( new DormandPrince54FieldStepInterpolator <> ( guess ) , guess ) ;
Code	return fit ( new DormandPrince54FieldStepInterpolator <> ( guess ) , guess ) ;
Distance : 7

69
Tree	return fit ( new NodeMetadata <> ( guess ) , guess ) ;
Code	return fit ( new NodeMetadata <> ( guess ) , guess ) ;
Distance : 7

70
Tree	return fit ( super(); ) ;
Code	return fit ( super(); ) ;
Distance : 1

71
Tree	return fit ( new BeanPropertySetter < guess > ( guess ) , guess ) ;
Code	return fit ( new BeanPropertySetter < guess > ( guess ) , guess ) ;
Distance : 9

72
Tree	return fit ( new HarmonicFunction < guess > ( guess ) , guess ) ;
Code	return fit ( new HarmonicFunction < guess > ( guess ) , guess ) ;
Distance : 9

73
Tree	return fit ( new MockAwareVerificationMode < guess > ( guess ) , guess ) ;
Code	return fit ( new MockAwareVerificationMode < guess > ( guess ) , guess ) ;
Distance : 9

74
Tree	return fit ( new LocalMeasurement < guess > ( guess ) , guess ) ;
Code	return fit ( new LocalMeasurement < guess > ( guess ) , guess ) ;
Distance : 9

75
Tree	return fit ( new FriendlyReturnValues < guess > ( new ) , guess ) ;
Code	return fit ( new FriendlyReturnValues < guess > ( new ) , guess ) ;
Distance : 9

76
Tree	return fit ( new DummyStatement < guess > ( new ) , guess ) ;
Code	return fit ( new DummyStatement < guess > ( new ) , guess ) ;
Distance : 9

77
Tree	return fit ( new ParseResult < guess > ( new ) , guess ) ;
Code	return fit ( new ParseResult < guess > ( new ) , guess ) ;
Distance : 9

78
Tree	return fit ( new ForwardsInvocations < guess > ( guess ) , guess ) ;
Code	return fit ( new ForwardsInvocations < guess > ( guess ) , guess ) ;
Distance : 9

79
Tree	return fit ( new Constant < guess > ( guess ) , guess ) ;
Code	return fit ( new Constant < guess > ( guess ) , guess ) ;
Distance : 9

80
Tree	return fit ( new GeneralPath < guess > ( guess ) , guess ) ;
Code	return fit ( new GeneralPath < guess > ( guess ) , guess ) ;
Distance : 9

81
Tree	return fit ( new StreamDataAdapter < guess > ( guess ) , guess ) ;
Code	return fit ( new StreamDataAdapter < guess > ( guess ) , guess ) ;
Distance : 9

82
Tree	return fit ( new stubbedInvocation < guess > ( guess ) , guess ) ;
Code	return fit ( new stubbedInvocation < guess > ( guess ) , guess ) ;
Distance : 9

83
Tree	return fit ( new SerializableTypeVariable < guess > ( new ) , guess ) ;
Code	return fit ( new SerializableTypeVariable < guess > ( new ) , guess ) ;
Distance : 9

84
Tree	return fit ( new ExceptionStatement < guess > ( new ) , guess ) ;
Code	return fit ( new ExceptionStatement < guess > ( new ) , guess ) ;
Distance : 9

85
Tree	return fit ( new InterpolatingMicrosphere < guess > ( new ) , guess ) ;
Code	return fit ( new InterpolatingMicrosphere < guess > ( new ) , guess ) ;
Distance : 9

86
Tree	return fit ( new File < guess > ( guess ) , guess ) ;
Code	return fit ( new File < guess > ( guess ) , guess ) ;
Distance : 9

87
Tree	return fit ( new MaybeReachingVariableUse < guess > ( , ) , guess ) ;
Code	return fit ( new MaybeReachingVariableUse < guess > ( , ) , guess ) ;
Distance : 9

88
Tree	return fit ( new ToStringBuilder < guess > ( guess ) , guess ) ;
Code	return fit ( new ToStringBuilder < guess > ( guess ) , guess ) ;
Distance : 9

89
Tree	return fit ( new TypeVarBoundedType < guess > ( guess ) , guess ) ;
Code	return fit ( new TypeVarBoundedType < guess > ( guess ) , guess ) ;
Distance : 9

90
Tree	return fit ( new InstantiatorProvider2Adapter < guess > ( new ) , guess ) ;
Code	return fit ( new InstantiatorProvider2Adapter < guess > ( new ) , guess ) ;
Distance : 9

91
Tree	return fit ( new ModuleLoader < guess > ( guess ) , guess ) ;
Code	return fit ( new ModuleLoader < guess > ( guess ) , guess ) ;
Distance : 9

92
Tree	return fit ( new NominalTypeBuilderNti < guess > ( guess ) , guess ) ;
Code	return fit ( new NominalTypeBuilderNti < guess > ( guess ) , guess ) ;
Distance : 9

93
Tree	return fit ( new injectee < guess > ( guess ) , guess ) ;
Code	return fit ( new injectee < guess > ( guess ) , guess ) ;
Distance : 9

94
Tree	return fit . fit ( this . guess . guess ) ;
Code	return fit . fit ( this . guess . guess ) ;
Distance : 6

95
Tree	return fit ( new ComposeWarningsGuard < guess > ( guess ) , guess ) ;
Code	return fit ( new ComposeWarningsGuard < guess > ( guess ) , guess ) ;
Distance : 9

96
Tree	return fit ( new ConstantInitializer < guess > ( guess ) , guess ) ;
Code	return fit ( new ConstantInitializer < guess > ( guess ) , guess ) ;
Distance : 9

97
Tree	return fit ( new SerializableBoundedType < guess > ( guess ) , guess ) ;
Code	return fit ( new SerializableBoundedType < guess > ( guess ) , guess ) ;
Distance : 9

98
Tree	return fit ( new VersionBumper < guess > ( guess ) , guess ) ;
Code	return fit ( new VersionBumper < guess > ( guess ) , guess ) ;
Distance : 9

99
Tree	return fit . fit ( Gaussian.Parametric . fit () . guess ) ; ArrayList
Code	return fit . fit ( Gaussian.Parametric . fit () . guess ) ; ArrayList
Distance : 8

========================================================================


========================================================================
Example Number: 62
Parent Code is: 
int sum = NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Child code is: 
double sum = NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=sum}) (204{val==}) (34{val=NUMBER_CONSTANT})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=double}) (59 (800{val=sum}) (204{val==}) (34{val=NUMBER_CONSTANT})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/57/parent/src_main_java_org_apache_commons_math_stat_clustering_KMeansPlusPlusClusterer.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	int dev [] = sum ;
Code	int dev [] = sum ;
Distance : 4

1
Tree	int sum [] = getRemoveUnusedCode () ;
Code	int sum [] = getRemoveUnusedCode () ;
Distance : 4

2
Tree	int sum = new LinkedHashSet () ;
Code	int sum = new LinkedHashSet () ;
Distance : 4

3
Tree	int sum = new SerializableBoundedType () ;
Code	int sum = new SerializableBoundedType () ;
Distance : 4

4
Tree	final int sum = NUMBER_CONSTANT ; n
Code	final int sum = NUMBER_CONSTANT ; n
Distance : 3

5
Tree	final int sum = NUMBER_CONSTANT ; compiler
Code	final int sum = NUMBER_CONSTANT ; compiler
Distance : 3

6
Tree	final int sum = NUMBER_CONSTANT ; catch
Code	final int sum = NUMBER_CONSTANT ; catch
Distance : 3

7
Tree	final int sum = NUMBER_CONSTANT ; >
Code	final int sum = NUMBER_CONSTANT ; >
Distance : 3

8
Tree	final int sum = NUMBER_CONSTANT ; if
Code	final int sum = NUMBER_CONSTANT ; if
Distance : 3

9
Tree	final int sum = NUMBER_CONSTANT ; final
Code	final int sum = NUMBER_CONSTANT ; final
Distance : 3

10
Tree	final int sum = NUMBER_CONSTANT ; <
Code	final int sum = NUMBER_CONSTANT ; <
Distance : 3

11
Tree	final int sum = NUMBER_CONSTANT ; null
Code	final int sum = NUMBER_CONSTANT ; null
Distance : 3

12
Tree	int sum = else ;
Code	int sum = else ;
Distance : 2

13
Tree	int sum = sum ; FastMath
Code	int sum = sum ; FastMath
Distance : 3

14
Tree	int sum = sum ; IllegalArgumentException
Code	int sum = sum ; IllegalArgumentException
Distance : 3

15
Tree	int sum = sum ; Args
Code	int sum = sum ; Args
Distance : 3

16
Tree	int sum = sum ; <>
Code	int sum = sum ; <>
Distance : 3

17
Tree	int sum = sum ; List
Code	int sum = sum ; List
Distance : 3

18
Tree	int sum = sum ; expected
Code	int sum = sum ; expected
Distance : 3

19
Tree	int sum = sum ; fireChangeEvent
Code	int sum = sum ; fireChangeEvent
Distance : 3

20
Tree	int sum = sum ; serialised
Code	int sum = sum ; serialised
Distance : 3

21
Tree	int sum = sum ; type
Code	int sum = sum ; type
Distance : 3

22
Tree	int sum = sum ; getInstance
Code	int sum = sum ; getInstance
Distance : 3

23
Tree	int sum = sum ; paint
Code	int sum = sum ; paint
Distance : 3

24
Tree	int sum = sum ; m
Code	int sum = sum ; m
Distance : 3

25
Tree	int sum ; T
Code	int sum ; T
Distance : 4

26
Tree	int sum [] = getRank () ;
Code	int sum [] = getRank () ;
Distance : 4

27
Tree	int sum [] = computeCorrelationMatrix () ;
Code	int sum [] = computeCorrelationMatrix () ;
Distance : 4

28
Tree	int index [] = getTickLength () ;
Code	int index [] = getTickLength () ;
Distance : 5

29
Tree	int sum = NUMBER_CONSTANT ; type
Code	int sum = NUMBER_CONSTANT ; type
Distance : 2

30
Tree	int sum = NUMBER_CONSTANT ; getInstance
Code	int sum = NUMBER_CONSTANT ; getInstance
Distance : 2

31
Tree	final int sum = NUMBER_CONSTANT ; .
Code	final int sum = NUMBER_CONSTANT ; .
Distance : 3

32
Tree	int sum = sum ; mock
Code	int sum = sum ; mock
Distance : 3

33
Tree	int sum = sum ; MathRuntimeException
Code	int sum = sum ; MathRuntimeException
Distance : 3

34
Tree	int sum = sum ; Override
Code	int sum = sum ; Override
Distance : 3

35
Tree	int sum ; result
Code	int sum ; result
Distance : 4

36
Tree	int sum ; try
Code	int sum ; try
Distance : 4

37
Tree	int sum ; :
Code	int sum ; :
Distance : 4

38
Tree	int sum ; double
Code	int sum ; double
Distance : 4

39
Tree	int sum ; false
Code	int sum ; false
Distance : 4

40
Tree	int sum ; checkState
Code	int sum ; checkState
Distance : 4

41
Tree	int sum ; super
Code	int sum ; super
Distance : 4

42
Tree	int sum ; [
Code	int sum ; [
Distance : 4

43
Tree	int sum ; n
Code	int sum ; n
Distance : 4

44
Tree	int sum ; +
Code	int sum ; +
Distance : 4

45
Tree	int sum ; e
Code	int sum ; e
Distance : 4

46
Tree	int sum ; catch
Code	int sum ; catch
Distance : 4

47
Tree	int sum ; compiler
Code	int sum ; compiler
Distance : 4

48
Tree	int sum ; boolean
Code	int sum ; boolean
Distance : 4

49
Tree	boolean sum = sum ;
Code	boolean sum = sum ;
Distance : 2

50
Tree	int sum [] = findMatching () ;
Code	int sum [] = findMatching () ;
Distance : 4

51
Tree	int sum [] = getEntry () ;
Code	int sum [] = getEntry () ;
Distance : 4

52
Tree	int mean [] = getTickLength () ;
Code	int mean [] = getTickLength () ;
Distance : 5

53
Tree	int Euclidean3D [] = getTickLength () ;
Code	int Euclidean3D [] = getTickLength () ;
Distance : 5

54
Tree	int sum = sum ; join
Code	int sum = sum ; join
Distance : 3

55
Tree	int sum = NUMBER_CONSTANT ; serialised
Code	int sum = NUMBER_CONSTANT ; serialised
Distance : 2

56
Tree	int sum = sum ; fail
Code	int sum = sum ; fail
Distance : 3

57
Tree	int sum = sum ; invocation
Code	int sum = sum ; invocation
Distance : 3

58
Tree	int sum = new NormalDistribution () ;
Code	int sum = new NormalDistribution () ;
Distance : 4

59
Tree	int sum = new Power () ;
Code	int sum = new Power () ;
Distance : 4

60
Tree	int sum = new ConsecutiveStubbing () ;
Code	int sum = new ConsecutiveStubbing () ;
Distance : 4

61
Tree	int sum = new ParameterizedType () ;
Code	int sum = new ParameterizedType () ;
Distance : 4

62
Tree	int sum = checkInitialize ;
Code	int sum = checkInitialize ;
Distance : 2

63
Tree	int sum = f ;
Code	int sum = f ;
Distance : 2

64
Tree	int sum = right ;
Code	int sum = right ;
Distance : 2

65
Tree	int sum = FastMath.PI ;
Code	int sum = FastMath.PI ;
Distance : 2

66
Tree	int sum = ! ;
Code	int sum = ! ;
Distance : 2

67
Tree	int sum = Double.NaN ;
Code	int sum = Double.NaN ;
Distance : 2

68
Tree	double sum = <= ;
Code	double sum = <= ;
Distance : 1

69
Tree	char sum = this . sum ;
Code	char sum = this . sum ;
Distance : 4

70
Tree	byte += ;
Code	byte += ;
Distance : 4

71
Tree	int sum = chars.length ;
Code	int sum = chars.length ;
Distance : 2

72
Tree	int sum = loop ;
Code	int sum = loop ;
Distance : 2

73
Tree	int sum = CHAR_CONS ;
Code	int sum = CHAR_CONS ;
Distance : 2

74
Tree	int sum = missingEntries ;
Code	int sum = missingEntries ;
Distance : 2

75
Tree	int sum = Cartesian2D.NEGATIVE_INFINITY ;
Code	int sum = Cartesian2D.NEGATIVE_INFINITY ;
Distance : 2

76
Tree	int sum = point ;
Code	int sum = point ;
Distance : 2

77
Tree	char sum = null ;
Code	char sum = null ;
Distance : 2

78
Tree	int sum = FastFourierTransformer ;
Code	int sum = FastFourierTransformer ;
Distance : 2

79
Tree	int sum = : ;
Code	int sum = : ;
Distance : 2

80
Tree	int sum = val.length ;
Code	int sum = val.length ;
Distance : 2

81
Tree	int sum = end ;
Code	int sum = end ;
Distance : 2

82
Tree	private int sum ;
Code	private int sum ;
Distance : 4

83
Tree	int sum = - ;
Code	int sum = - ;
Distance : 2

84
Tree	int sum = other.value ;
Code	int sum = other.value ;
Distance : 2

85
Tree	int sum = new SelfInstanceVarReflectionTestFixture () ;
Code	int sum = new SelfInstanceVarReflectionTestFixture () ;
Distance : 4

86
Tree	int sum ; assertThat
Code	int sum ; assertThat
Distance : 4

87
Tree	int sum ; NUMBER_CONSTANT
Code	int sum ; NUMBER_CONSTANT
Distance : 3

88
Tree	int sum ; =
Code	int sum ; =
Distance : 4

89
Tree	int sum ; test
Code	int sum ; test
Distance : 4

90
Tree	int sum ; assertEquals
Code	int sum ; assertEquals
Distance : 4

91
Tree	int sum ; @
Code	int sum ; @
Distance : 4

92
Tree	int sum ; []
Code	int sum ; []
Distance : 4

93
Tree	int sum ; ==
Code	int sum ; ==
Distance : 4

94
Tree	int sum ; nullNotPermitted
Code	int sum ; nullNotPermitted
Distance : 4

95
Tree	int sum ; !
Code	int sum ; !
Distance : 4

96
Tree	int sum ; String
Code	int sum ; String
Distance : 4

97
Tree	int sum ; null
Code	int sum ; null
Distance : 4

98
Tree	int sum ; if
Code	int sum ; if
Distance : 4

99
Tree	int sum ; public
Code	int sum ; public
Distance : 4

========================================================================


========================================================================
Example Number: 63
Parent Code is: 
Iterator iter = res.entries . iterator () ;
-------------------------------------------------------------------------------
Child code is: 
Iterator iter = entries . iterator () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (40{val=res.entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (800{val=entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/49/parent/src_main_java_org_apache_commons_math_linear_OpenMapRealVector.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; x
Code	Iterator iter = iterator ( res.entries ) . iterator () ; x
Distance : 5

1
Tree	Iterator iter = iterator ( res.entries ) ; checkState
Code	Iterator iter = iterator ( res.entries ) ; checkState
Distance : 5

2
Tree	Iterator iter = iterator ( res.entries ) ; nullNotPermitted
Code	Iterator iter = iterator ( res.entries ) ; nullNotPermitted
Distance : 5

3
Tree	Iterator iter = iterator ( res.entries ) ; []
Code	Iterator iter = iterator ( res.entries ) ; []
Distance : 5

4
Tree	Iterator iter = iterator ( res.entries ) ; void
Code	Iterator iter = iterator ( res.entries ) ; void
Distance : 5

5
Tree	Iterator iter = iterator ( res.entries ) ; ==
Code	Iterator iter = iterator ( res.entries ) ; ==
Distance : 5

6
Tree	Iterator iter = iterator ( res.entries ) ; assertEquals
Code	Iterator iter = iterator ( res.entries ) ; assertEquals
Distance : 5

7
Tree	Iterator iter = iterator ( res.entries ) ; !
Code	Iterator iter = iterator ( res.entries ) ; !
Distance : 5

8
Tree	Iterator iter = iterator ( res.entries ) ; @
Code	Iterator iter = iterator ( res.entries ) ; @
Distance : 5

9
Tree	Iterator iter = iterator ( res.entries ) ; test
Code	Iterator iter = iterator ( res.entries ) ; test
Distance : 5

10
Tree	Iterator iter = iterator ( res.entries ) ; Override
Code	Iterator iter = iterator ( res.entries ) ; Override
Distance : 5

11
Tree	Iterator iter = iterator ( res.entries ) ; mock
Code	Iterator iter = iterator ( res.entries ) ; mock
Distance : 5

12
Tree	Iterator iter = iterator ( res.entries ) ; [
Code	Iterator iter = iterator ( res.entries ) ; [
Distance : 5

13
Tree	Iterator iter = iterator ( res.entries ) ; double
Code	Iterator iter = iterator ( res.entries ) ; double
Distance : 5

14
Tree	Iterator iter = iterator ( res.entries ) ; ]
Code	Iterator iter = iterator ( res.entries ) ; ]
Distance : 5

15
Tree	Iterator iter = iterator ( res.entries ) ; T
Code	Iterator iter = iterator ( res.entries ) ; T
Distance : 5

16
Tree	Iterator iter = iterator ( res.entries ) ; Preconditions
Code	Iterator iter = iterator ( res.entries ) ; Preconditions
Distance : 5

17
Tree	Iterator iter = iterator ( res.entries ) ; -
Code	Iterator iter = iterator ( res.entries ) ; -
Distance : 5

18
Tree	Iterator iter = iterator ( res.entries ) ; class
Code	Iterator iter = iterator ( res.entries ) ; class
Distance : 5

19
Tree	Iterator iter = iterator ( res.entries ) ; Object
Code	Iterator iter = iterator ( res.entries ) ; Object
Distance : 5

20
Tree	Iterator iter = iterator ( res.entries ) ; {}
Code	Iterator iter = iterator ( res.entries ) ; {}
Distance : 5

21
Tree	Iterator iter = iterator ( res.entries ) ; MathRuntimeException
Code	Iterator iter = iterator ( res.entries ) ; MathRuntimeException
Distance : 5

22
Tree	Iterator iter = iterator ( res.entries ) ; serialised
Code	Iterator iter = iterator ( res.entries ) ; serialised
Distance : 5

23
Tree	Iterator iter = iterator ( res.entries ) ; :
Code	Iterator iter = iterator ( res.entries ) ; :
Distance : 5

24
Tree	Iterator iter = iterator ( res.entries ) ; f
Code	Iterator iter = iterator ( res.entries ) ; f
Distance : 5

25
Tree	Iterator iter = iterator ( res.entries ) ; expected
Code	Iterator iter = iterator ( res.entries ) ; expected
Distance : 5

26
Tree	Iterator iter = iterator ( res.entries ) ; add
Code	Iterator iter = iterator ( res.entries ) ; add
Distance : 5

27
Tree	Iterator iter = iterator ( res.entries ) ; &&
Code	Iterator iter = iterator ( res.entries ) ; &&
Distance : 5

28
Tree	Iterator iter = iterator ( res.entries ) ; name
Code	Iterator iter = iterator ( res.entries ) ; name
Distance : 5

29
Tree	Iterator iter = iterator ( res.entries ) ; int
Code	Iterator iter = iterator ( res.entries ) ; int
Distance : 5

30
Tree	Iterator iter = iterator ( res.entries ) ; type
Code	Iterator iter = iterator ( res.entries ) ; type
Distance : 5

31
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; super
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; super
Distance : 5

32
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; !=
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; !=
Distance : 5

33
Tree	Iterator iter = res.entries . iterator () ; add
Code	Iterator iter = res.entries . iterator () ; add
Distance : 2

34
Tree	Iterator iter = res.entries . iterator () ; name
Code	Iterator iter = res.entries . iterator () ; name
Distance : 2

35
Tree	Iterator iter = res.entries . iterator () ; m
Code	Iterator iter = res.entries . iterator () ; m
Distance : 2

36
Tree	Iterator iter = res.entries . iterator () ; boolean
Code	Iterator iter = res.entries . iterator () ; boolean
Distance : 2

37
Tree	Iterator iter = res.entries . iterator () ; checkArgument
Code	Iterator iter = res.entries . iterator () ; checkArgument
Distance : 2

38
Tree	Iterator iter = res.entries . iterator () ; data
Code	Iterator iter = res.entries . iterator () ; data
Distance : 2

39
Tree	Iterator iter = res.entries . iterator () ; List
Code	Iterator iter = res.entries . iterator () ; List
Distance : 2

40
Tree	Iterator iter = res.entries . iterator () ; Args
Code	Iterator iter = res.entries . iterator () ; Args
Distance : 2

41
Tree	Iterator iter = res.entries . iterator () ; array
Code	Iterator iter = res.entries . iterator () ; array
Distance : 2

42
Tree	Iterator iter = res.entries . iterator () ; <>
Code	Iterator iter = res.entries . iterator () ; <>
Distance : 2

43
Tree	Iterator iter = iterator ( res.entries ) ; false
Code	Iterator iter = iterator ( res.entries ) ; false
Distance : 5

44
Tree	Iterator iter = res.entries . iterator () ; try
Code	Iterator iter = res.entries . iterator () ; try
Distance : 2

45
Tree	Iterator iter = res.entries . iterator () ; paint
Code	Iterator iter = res.entries . iterator () ; paint
Distance : 2

46
Tree	Iterator iter = res.entries . iterator () ; join
Code	Iterator iter = res.entries . iterator () ; join
Distance : 2

47
Tree	Iterator iter = res.entries . iterator () ; str
Code	Iterator iter = res.entries . iterator () ; str
Distance : 2

48
Tree	Iterator iter = res.entries . iterator () ; LINE_JOINER
Code	Iterator iter = res.entries . iterator () ; LINE_JOINER
Distance : 2

49
Tree	Iterator iter = res.entries . iterator () ; testSame
Code	Iterator iter = res.entries . iterator () ; testSame
Distance : 2

50
Tree	Iterator iter = res.entries . iterator () ; x
Code	Iterator iter = res.entries . iterator () ; x
Distance : 2

51
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; invocation
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; invocation
Distance : 5

52
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; assertThat
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; assertThat
Distance : 5

53
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; FastMath
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; FastMath
Distance : 5

54
Tree	Iterator iter = iterator ( res.entries ) ; result
Code	Iterator iter = iterator ( res.entries ) ; result
Distance : 5

55
Tree	Iterator iter = iterator ( res.entries ) ; getInstance
Code	Iterator iter = iterator ( res.entries ) ; getInstance
Distance : 5

56
Tree	Iterator iter = iterator ( res.entries ) ; *
Code	Iterator iter = iterator ( res.entries ) ; *
Distance : 5

57
Tree	Iterator iter = res.entries . iterator () ; fail
Code	Iterator iter = res.entries . iterator () ; fail
Distance : 2

58
Tree	Iterator iter = iterator ( res.entries ) ; m
Code	Iterator iter = iterator ( res.entries ) ; m
Distance : 5

59
Tree	Iterator iter = iterator ( res.entries ) ; boolean
Code	Iterator iter = iterator ( res.entries ) ; boolean
Distance : 5

60
Tree	Iterator iter = iterator ( res.entries ) ; checkArgument
Code	Iterator iter = iterator ( res.entries ) ; checkArgument
Distance : 5

61
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; m
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; m
Distance : 5

62
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; boolean
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; boolean
Distance : 5

63
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; checkArgument
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; checkArgument
Distance : 5

64
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; data
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; data
Distance : 5

65
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; List
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; List
Distance : 5

66
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Args
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Args
Distance : 5

67
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; array
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; array
Distance : 5

68
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; <>
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; <>
Distance : 5

69
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; try
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; try
Distance : 5

70
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; fail
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; fail
Distance : 5

71
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; paint
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; paint
Distance : 5

72
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; join
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; join
Distance : 5

73
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; name
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; name
Distance : 5

74
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; str
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; str
Distance : 5

75
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; testSame
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; testSame
Distance : 5

76
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; x
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; x
Distance : 5

77
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; ArrayList
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; ArrayList
Distance : 5

78
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; fireChangeEvent
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; fireChangeEvent
Distance : 5

79
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; parent
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; parent
Distance : 5

80
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; createIllegalArgumentException
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; createIllegalArgumentException
Distance : 5

81
Tree	Iterator iter = iterator ( res.entries ) ; >
Code	Iterator iter = iterator ( res.entries ) ; >
Distance : 5

82
Tree	Iterator iter = iterator ( res.entries ) ; STRING_CONSTANT
Code	Iterator iter = iterator ( res.entries ) ; STRING_CONSTANT
Distance : 5

83
Tree	Iterator iter = iterator ( res.entries ) ; field
Code	Iterator iter = iterator ( res.entries ) ; field
Distance : 5

84
Tree	Iterator iter = iterator ( res.entries ) ; ,
Code	Iterator iter = iterator ( res.entries ) ; ,
Distance : 5

85
Tree	Iterator iter = iterator ( res.entries ) ; value
Code	Iterator iter = iterator ( res.entries ) ; value
Distance : 5

86
Tree	Iterator iter = iterator ( res.entries ) ; i
Code	Iterator iter = iterator ( res.entries ) ; i
Distance : 5

87
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; LINE_JOINER
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; LINE_JOINER
Distance : 5

88
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; add
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; add
Distance : 5

89
Tree	Iterator iter = iterator ( res.entries ) ; !=
Code	Iterator iter = iterator ( res.entries ) ; !=
Distance : 5

90
Tree	Iterator iter = iterator ( res.entries ) ; super
Code	Iterator iter = iterator ( res.entries ) ; super
Distance : 5

91
Tree	Iterator iter = iterator ( res.entries ) ; data
Code	Iterator iter = iterator ( res.entries ) ; data
Distance : 5

92
Tree	Iterator iter = iterator ( res.entries ) ; List
Code	Iterator iter = iterator ( res.entries ) ; List
Distance : 5

93
Tree	Iterator iter = iterator ( res.entries ) ; Args
Code	Iterator iter = iterator ( res.entries ) ; Args
Distance : 5

94
Tree	Iterator iter = iterator ( res.entries ) ; array
Code	Iterator iter = iterator ( res.entries ) ; array
Distance : 5

95
Tree	Iterator iter = iterator ( res.entries ) ; fail
Code	Iterator iter = iterator ( res.entries ) ; fail
Distance : 5

96
Tree	Iterator iter = iterator ( res.entries ) ; paint
Code	Iterator iter = iterator ( res.entries ) ; paint
Distance : 5

97
Tree	Iterator iter = iterator ( res.entries ) ; join
Code	Iterator iter = iterator ( res.entries ) ; join
Distance : 5

98
Tree	Iterator iter = iterator ( res.entries ) ; str
Code	Iterator iter = iterator ( res.entries ) ; str
Distance : 5

99
Tree	Iterator iter = iterator ( res.entries ) ; LINE_JOINER
Code	Iterator iter = iterator ( res.entries ) ; LINE_JOINER
Distance : 5

========================================================================


========================================================================
Example Number: 64
Parent Code is: 
Iterator iter = res.entries . iterator () ;
-------------------------------------------------------------------------------
Child code is: 
Iterator iter = entries . iterator () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (40{val=res.entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (800{val=entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/49/parent/src_main_java_org_apache_commons_math_linear_OpenMapRealVector.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; x
Code	Iterator iter = iterator ( res.entries ) . iterator () ; x
Distance : 5

1
Tree	Iterator iter = iterator ( res.entries ) ; checkState
Code	Iterator iter = iterator ( res.entries ) ; checkState
Distance : 5

2
Tree	Iterator iter = iterator ( res.entries ) ; nullNotPermitted
Code	Iterator iter = iterator ( res.entries ) ; nullNotPermitted
Distance : 5

3
Tree	Iterator iter = iterator ( res.entries ) ; []
Code	Iterator iter = iterator ( res.entries ) ; []
Distance : 5

4
Tree	Iterator iter = iterator ( res.entries ) ; void
Code	Iterator iter = iterator ( res.entries ) ; void
Distance : 5

5
Tree	Iterator iter = iterator ( res.entries ) ; ==
Code	Iterator iter = iterator ( res.entries ) ; ==
Distance : 5

6
Tree	Iterator iter = iterator ( res.entries ) ; assertEquals
Code	Iterator iter = iterator ( res.entries ) ; assertEquals
Distance : 5

7
Tree	Iterator iter = iterator ( res.entries ) ; !
Code	Iterator iter = iterator ( res.entries ) ; !
Distance : 5

8
Tree	Iterator iter = iterator ( res.entries ) ; @
Code	Iterator iter = iterator ( res.entries ) ; @
Distance : 5

9
Tree	Iterator iter = iterator ( res.entries ) ; test
Code	Iterator iter = iterator ( res.entries ) ; test
Distance : 5

10
Tree	Iterator iter = iterator ( res.entries ) ; Override
Code	Iterator iter = iterator ( res.entries ) ; Override
Distance : 5

11
Tree	Iterator iter = iterator ( res.entries ) ; mock
Code	Iterator iter = iterator ( res.entries ) ; mock
Distance : 5

12
Tree	Iterator iter = iterator ( res.entries ) ; [
Code	Iterator iter = iterator ( res.entries ) ; [
Distance : 5

13
Tree	Iterator iter = iterator ( res.entries ) ; double
Code	Iterator iter = iterator ( res.entries ) ; double
Distance : 5

14
Tree	Iterator iter = iterator ( res.entries ) ; ]
Code	Iterator iter = iterator ( res.entries ) ; ]
Distance : 5

15
Tree	Iterator iter = iterator ( res.entries ) ; T
Code	Iterator iter = iterator ( res.entries ) ; T
Distance : 5

16
Tree	Iterator iter = iterator ( res.entries ) ; Preconditions
Code	Iterator iter = iterator ( res.entries ) ; Preconditions
Distance : 5

17
Tree	Iterator iter = iterator ( res.entries ) ; -
Code	Iterator iter = iterator ( res.entries ) ; -
Distance : 5

18
Tree	Iterator iter = iterator ( res.entries ) ; class
Code	Iterator iter = iterator ( res.entries ) ; class
Distance : 5

19
Tree	Iterator iter = iterator ( res.entries ) ; Object
Code	Iterator iter = iterator ( res.entries ) ; Object
Distance : 5

20
Tree	Iterator iter = iterator ( res.entries ) ; {}
Code	Iterator iter = iterator ( res.entries ) ; {}
Distance : 5

21
Tree	Iterator iter = iterator ( res.entries ) ; MathRuntimeException
Code	Iterator iter = iterator ( res.entries ) ; MathRuntimeException
Distance : 5

22
Tree	Iterator iter = iterator ( res.entries ) ; serialised
Code	Iterator iter = iterator ( res.entries ) ; serialised
Distance : 5

23
Tree	Iterator iter = iterator ( res.entries ) ; :
Code	Iterator iter = iterator ( res.entries ) ; :
Distance : 5

24
Tree	Iterator iter = iterator ( res.entries ) ; f
Code	Iterator iter = iterator ( res.entries ) ; f
Distance : 5

25
Tree	Iterator iter = iterator ( res.entries ) ; expected
Code	Iterator iter = iterator ( res.entries ) ; expected
Distance : 5

26
Tree	Iterator iter = iterator ( res.entries ) ; add
Code	Iterator iter = iterator ( res.entries ) ; add
Distance : 5

27
Tree	Iterator iter = iterator ( res.entries ) ; &&
Code	Iterator iter = iterator ( res.entries ) ; &&
Distance : 5

28
Tree	Iterator iter = iterator ( res.entries ) ; name
Code	Iterator iter = iterator ( res.entries ) ; name
Distance : 5

29
Tree	Iterator iter = iterator ( res.entries ) ; int
Code	Iterator iter = iterator ( res.entries ) ; int
Distance : 5

30
Tree	Iterator iter = iterator ( res.entries ) ; type
Code	Iterator iter = iterator ( res.entries ) ; type
Distance : 5

31
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; super
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; super
Distance : 5

32
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; !=
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; !=
Distance : 5

33
Tree	Iterator iter = res.entries . iterator () ; add
Code	Iterator iter = res.entries . iterator () ; add
Distance : 2

34
Tree	Iterator iter = res.entries . iterator () ; name
Code	Iterator iter = res.entries . iterator () ; name
Distance : 2

35
Tree	Iterator iter = res.entries . iterator () ; m
Code	Iterator iter = res.entries . iterator () ; m
Distance : 2

36
Tree	Iterator iter = res.entries . iterator () ; boolean
Code	Iterator iter = res.entries . iterator () ; boolean
Distance : 2

37
Tree	Iterator iter = res.entries . iterator () ; checkArgument
Code	Iterator iter = res.entries . iterator () ; checkArgument
Distance : 2

38
Tree	Iterator iter = res.entries . iterator () ; data
Code	Iterator iter = res.entries . iterator () ; data
Distance : 2

39
Tree	Iterator iter = res.entries . iterator () ; List
Code	Iterator iter = res.entries . iterator () ; List
Distance : 2

40
Tree	Iterator iter = res.entries . iterator () ; Args
Code	Iterator iter = res.entries . iterator () ; Args
Distance : 2

41
Tree	Iterator iter = res.entries . iterator () ; array
Code	Iterator iter = res.entries . iterator () ; array
Distance : 2

42
Tree	Iterator iter = res.entries . iterator () ; <>
Code	Iterator iter = res.entries . iterator () ; <>
Distance : 2

43
Tree	Iterator iter = iterator ( res.entries ) ; false
Code	Iterator iter = iterator ( res.entries ) ; false
Distance : 5

44
Tree	Iterator iter = res.entries . iterator () ; try
Code	Iterator iter = res.entries . iterator () ; try
Distance : 2

45
Tree	Iterator iter = res.entries . iterator () ; paint
Code	Iterator iter = res.entries . iterator () ; paint
Distance : 2

46
Tree	Iterator iter = res.entries . iterator () ; join
Code	Iterator iter = res.entries . iterator () ; join
Distance : 2

47
Tree	Iterator iter = res.entries . iterator () ; str
Code	Iterator iter = res.entries . iterator () ; str
Distance : 2

48
Tree	Iterator iter = res.entries . iterator () ; LINE_JOINER
Code	Iterator iter = res.entries . iterator () ; LINE_JOINER
Distance : 2

49
Tree	Iterator iter = res.entries . iterator () ; testSame
Code	Iterator iter = res.entries . iterator () ; testSame
Distance : 2

50
Tree	Iterator iter = res.entries . iterator () ; x
Code	Iterator iter = res.entries . iterator () ; x
Distance : 2

51
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; invocation
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; invocation
Distance : 5

52
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; assertThat
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; assertThat
Distance : 5

53
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; FastMath
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; FastMath
Distance : 5

54
Tree	Iterator iter = iterator ( res.entries ) ; result
Code	Iterator iter = iterator ( res.entries ) ; result
Distance : 5

55
Tree	Iterator iter = iterator ( res.entries ) ; getInstance
Code	Iterator iter = iterator ( res.entries ) ; getInstance
Distance : 5

56
Tree	Iterator iter = iterator ( res.entries ) ; *
Code	Iterator iter = iterator ( res.entries ) ; *
Distance : 5

57
Tree	Iterator iter = res.entries . iterator () ; fail
Code	Iterator iter = res.entries . iterator () ; fail
Distance : 2

58
Tree	Iterator iter = iterator ( res.entries ) ; m
Code	Iterator iter = iterator ( res.entries ) ; m
Distance : 5

59
Tree	Iterator iter = iterator ( res.entries ) ; boolean
Code	Iterator iter = iterator ( res.entries ) ; boolean
Distance : 5

60
Tree	Iterator iter = iterator ( res.entries ) ; checkArgument
Code	Iterator iter = iterator ( res.entries ) ; checkArgument
Distance : 5

61
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; m
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; m
Distance : 5

62
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; boolean
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; boolean
Distance : 5

63
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; checkArgument
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; checkArgument
Distance : 5

64
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; data
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; data
Distance : 5

65
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; List
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; List
Distance : 5

66
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Args
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Args
Distance : 5

67
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; array
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; array
Distance : 5

68
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; <>
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; <>
Distance : 5

69
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; try
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; try
Distance : 5

70
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; fail
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; fail
Distance : 5

71
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; paint
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; paint
Distance : 5

72
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; join
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; join
Distance : 5

73
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; name
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; name
Distance : 5

74
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; str
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; str
Distance : 5

75
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; testSame
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; testSame
Distance : 5

76
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; x
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; x
Distance : 5

77
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; ArrayList
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; ArrayList
Distance : 5

78
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; fireChangeEvent
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; fireChangeEvent
Distance : 5

79
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; parent
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; parent
Distance : 5

80
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; createIllegalArgumentException
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; createIllegalArgumentException
Distance : 5

81
Tree	Iterator iter = iterator ( res.entries ) ; >
Code	Iterator iter = iterator ( res.entries ) ; >
Distance : 5

82
Tree	Iterator iter = iterator ( res.entries ) ; STRING_CONSTANT
Code	Iterator iter = iterator ( res.entries ) ; STRING_CONSTANT
Distance : 5

83
Tree	Iterator iter = iterator ( res.entries ) ; field
Code	Iterator iter = iterator ( res.entries ) ; field
Distance : 5

84
Tree	Iterator iter = iterator ( res.entries ) ; ,
Code	Iterator iter = iterator ( res.entries ) ; ,
Distance : 5

85
Tree	Iterator iter = iterator ( res.entries ) ; value
Code	Iterator iter = iterator ( res.entries ) ; value
Distance : 5

86
Tree	Iterator iter = iterator ( res.entries ) ; i
Code	Iterator iter = iterator ( res.entries ) ; i
Distance : 5

87
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; LINE_JOINER
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; LINE_JOINER
Distance : 5

88
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; add
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; add
Distance : 5

89
Tree	Iterator iter = iterator ( res.entries ) ; !=
Code	Iterator iter = iterator ( res.entries ) ; !=
Distance : 5

90
Tree	Iterator iter = iterator ( res.entries ) ; super
Code	Iterator iter = iterator ( res.entries ) ; super
Distance : 5

91
Tree	Iterator iter = iterator ( res.entries ) ; data
Code	Iterator iter = iterator ( res.entries ) ; data
Distance : 5

92
Tree	Iterator iter = iterator ( res.entries ) ; List
Code	Iterator iter = iterator ( res.entries ) ; List
Distance : 5

93
Tree	Iterator iter = iterator ( res.entries ) ; Args
Code	Iterator iter = iterator ( res.entries ) ; Args
Distance : 5

94
Tree	Iterator iter = iterator ( res.entries ) ; array
Code	Iterator iter = iterator ( res.entries ) ; array
Distance : 5

95
Tree	Iterator iter = iterator ( res.entries ) ; fail
Code	Iterator iter = iterator ( res.entries ) ; fail
Distance : 5

96
Tree	Iterator iter = iterator ( res.entries ) ; paint
Code	Iterator iter = iterator ( res.entries ) ; paint
Distance : 5

97
Tree	Iterator iter = iterator ( res.entries ) ; join
Code	Iterator iter = iterator ( res.entries ) ; join
Distance : 5

98
Tree	Iterator iter = iterator ( res.entries ) ; str
Code	Iterator iter = iterator ( res.entries ) ; str
Distance : 5

99
Tree	Iterator iter = iterator ( res.entries ) ; LINE_JOINER
Code	Iterator iter = iterator ( res.entries ) ; LINE_JOINER
Distance : 5

========================================================================


========================================================================
Example Number: 65
Parent Code is: 
Iterator iter = res.entries . iterator () ;
-------------------------------------------------------------------------------
Child code is: 
Iterator iter = entries . iterator () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (40{val=res.entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (800{val=entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/49/parent/src_main_java_org_apache_commons_math_linear_OpenMapRealVector.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; x
Code	Iterator iter = iterator ( res.entries ) . iterator () ; x
Distance : 5

1
Tree	Iterator iter = iterator ( res.entries ) ; checkState
Code	Iterator iter = iterator ( res.entries ) ; checkState
Distance : 5

2
Tree	Iterator iter = iterator ( res.entries ) ; nullNotPermitted
Code	Iterator iter = iterator ( res.entries ) ; nullNotPermitted
Distance : 5

3
Tree	Iterator iter = iterator ( res.entries ) ; []
Code	Iterator iter = iterator ( res.entries ) ; []
Distance : 5

4
Tree	Iterator iter = iterator ( res.entries ) ; void
Code	Iterator iter = iterator ( res.entries ) ; void
Distance : 5

5
Tree	Iterator iter = iterator ( res.entries ) ; ==
Code	Iterator iter = iterator ( res.entries ) ; ==
Distance : 5

6
Tree	Iterator iter = iterator ( res.entries ) ; assertEquals
Code	Iterator iter = iterator ( res.entries ) ; assertEquals
Distance : 5

7
Tree	Iterator iter = iterator ( res.entries ) ; !
Code	Iterator iter = iterator ( res.entries ) ; !
Distance : 5

8
Tree	Iterator iter = iterator ( res.entries ) ; @
Code	Iterator iter = iterator ( res.entries ) ; @
Distance : 5

9
Tree	Iterator iter = iterator ( res.entries ) ; test
Code	Iterator iter = iterator ( res.entries ) ; test
Distance : 5

10
Tree	Iterator iter = iterator ( res.entries ) ; Override
Code	Iterator iter = iterator ( res.entries ) ; Override
Distance : 5

11
Tree	Iterator iter = iterator ( res.entries ) ; mock
Code	Iterator iter = iterator ( res.entries ) ; mock
Distance : 5

12
Tree	Iterator iter = iterator ( res.entries ) ; [
Code	Iterator iter = iterator ( res.entries ) ; [
Distance : 5

13
Tree	Iterator iter = iterator ( res.entries ) ; double
Code	Iterator iter = iterator ( res.entries ) ; double
Distance : 5

14
Tree	Iterator iter = iterator ( res.entries ) ; ]
Code	Iterator iter = iterator ( res.entries ) ; ]
Distance : 5

15
Tree	Iterator iter = iterator ( res.entries ) ; T
Code	Iterator iter = iterator ( res.entries ) ; T
Distance : 5

16
Tree	Iterator iter = iterator ( res.entries ) ; Preconditions
Code	Iterator iter = iterator ( res.entries ) ; Preconditions
Distance : 5

17
Tree	Iterator iter = iterator ( res.entries ) ; -
Code	Iterator iter = iterator ( res.entries ) ; -
Distance : 5

18
Tree	Iterator iter = iterator ( res.entries ) ; class
Code	Iterator iter = iterator ( res.entries ) ; class
Distance : 5

19
Tree	Iterator iter = iterator ( res.entries ) ; Object
Code	Iterator iter = iterator ( res.entries ) ; Object
Distance : 5

20
Tree	Iterator iter = iterator ( res.entries ) ; {}
Code	Iterator iter = iterator ( res.entries ) ; {}
Distance : 5

21
Tree	Iterator iter = iterator ( res.entries ) ; MathRuntimeException
Code	Iterator iter = iterator ( res.entries ) ; MathRuntimeException
Distance : 5

22
Tree	Iterator iter = iterator ( res.entries ) ; serialised
Code	Iterator iter = iterator ( res.entries ) ; serialised
Distance : 5

23
Tree	Iterator iter = iterator ( res.entries ) ; :
Code	Iterator iter = iterator ( res.entries ) ; :
Distance : 5

24
Tree	Iterator iter = iterator ( res.entries ) ; f
Code	Iterator iter = iterator ( res.entries ) ; f
Distance : 5

25
Tree	Iterator iter = iterator ( res.entries ) ; expected
Code	Iterator iter = iterator ( res.entries ) ; expected
Distance : 5

26
Tree	Iterator iter = iterator ( res.entries ) ; add
Code	Iterator iter = iterator ( res.entries ) ; add
Distance : 5

27
Tree	Iterator iter = iterator ( res.entries ) ; &&
Code	Iterator iter = iterator ( res.entries ) ; &&
Distance : 5

28
Tree	Iterator iter = iterator ( res.entries ) ; name
Code	Iterator iter = iterator ( res.entries ) ; name
Distance : 5

29
Tree	Iterator iter = iterator ( res.entries ) ; int
Code	Iterator iter = iterator ( res.entries ) ; int
Distance : 5

30
Tree	Iterator iter = iterator ( res.entries ) ; type
Code	Iterator iter = iterator ( res.entries ) ; type
Distance : 5

31
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; super
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; super
Distance : 5

32
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; !=
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; !=
Distance : 5

33
Tree	Iterator iter = res.entries . iterator () ; add
Code	Iterator iter = res.entries . iterator () ; add
Distance : 2

34
Tree	Iterator iter = res.entries . iterator () ; name
Code	Iterator iter = res.entries . iterator () ; name
Distance : 2

35
Tree	Iterator iter = res.entries . iterator () ; m
Code	Iterator iter = res.entries . iterator () ; m
Distance : 2

36
Tree	Iterator iter = res.entries . iterator () ; boolean
Code	Iterator iter = res.entries . iterator () ; boolean
Distance : 2

37
Tree	Iterator iter = res.entries . iterator () ; checkArgument
Code	Iterator iter = res.entries . iterator () ; checkArgument
Distance : 2

38
Tree	Iterator iter = res.entries . iterator () ; data
Code	Iterator iter = res.entries . iterator () ; data
Distance : 2

39
Tree	Iterator iter = res.entries . iterator () ; List
Code	Iterator iter = res.entries . iterator () ; List
Distance : 2

40
Tree	Iterator iter = res.entries . iterator () ; Args
Code	Iterator iter = res.entries . iterator () ; Args
Distance : 2

41
Tree	Iterator iter = res.entries . iterator () ; array
Code	Iterator iter = res.entries . iterator () ; array
Distance : 2

42
Tree	Iterator iter = res.entries . iterator () ; <>
Code	Iterator iter = res.entries . iterator () ; <>
Distance : 2

43
Tree	Iterator iter = iterator ( res.entries ) ; false
Code	Iterator iter = iterator ( res.entries ) ; false
Distance : 5

44
Tree	Iterator iter = res.entries . iterator () ; try
Code	Iterator iter = res.entries . iterator () ; try
Distance : 2

45
Tree	Iterator iter = res.entries . iterator () ; paint
Code	Iterator iter = res.entries . iterator () ; paint
Distance : 2

46
Tree	Iterator iter = res.entries . iterator () ; join
Code	Iterator iter = res.entries . iterator () ; join
Distance : 2

47
Tree	Iterator iter = res.entries . iterator () ; str
Code	Iterator iter = res.entries . iterator () ; str
Distance : 2

48
Tree	Iterator iter = res.entries . iterator () ; LINE_JOINER
Code	Iterator iter = res.entries . iterator () ; LINE_JOINER
Distance : 2

49
Tree	Iterator iter = res.entries . iterator () ; testSame
Code	Iterator iter = res.entries . iterator () ; testSame
Distance : 2

50
Tree	Iterator iter = res.entries . iterator () ; x
Code	Iterator iter = res.entries . iterator () ; x
Distance : 2

51
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; invocation
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; invocation
Distance : 5

52
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; assertThat
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; assertThat
Distance : 5

53
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; FastMath
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; FastMath
Distance : 5

54
Tree	Iterator iter = iterator ( res.entries ) ; result
Code	Iterator iter = iterator ( res.entries ) ; result
Distance : 5

55
Tree	Iterator iter = iterator ( res.entries ) ; getInstance
Code	Iterator iter = iterator ( res.entries ) ; getInstance
Distance : 5

56
Tree	Iterator iter = iterator ( res.entries ) ; *
Code	Iterator iter = iterator ( res.entries ) ; *
Distance : 5

57
Tree	Iterator iter = res.entries . iterator () ; fail
Code	Iterator iter = res.entries . iterator () ; fail
Distance : 2

58
Tree	Iterator iter = iterator ( res.entries ) ; m
Code	Iterator iter = iterator ( res.entries ) ; m
Distance : 5

59
Tree	Iterator iter = iterator ( res.entries ) ; boolean
Code	Iterator iter = iterator ( res.entries ) ; boolean
Distance : 5

60
Tree	Iterator iter = iterator ( res.entries ) ; checkArgument
Code	Iterator iter = iterator ( res.entries ) ; checkArgument
Distance : 5

61
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; m
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; m
Distance : 5

62
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; boolean
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; boolean
Distance : 5

63
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; checkArgument
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; checkArgument
Distance : 5

64
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; data
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; data
Distance : 5

65
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; List
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; List
Distance : 5

66
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Args
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Args
Distance : 5

67
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; array
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; array
Distance : 5

68
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; <>
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; <>
Distance : 5

69
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; try
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; try
Distance : 5

70
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; fail
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; fail
Distance : 5

71
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; paint
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; paint
Distance : 5

72
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; join
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; join
Distance : 5

73
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; name
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; name
Distance : 5

74
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; str
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; str
Distance : 5

75
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; testSame
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; testSame
Distance : 5

76
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; x
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; x
Distance : 5

77
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; ArrayList
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; ArrayList
Distance : 5

78
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; fireChangeEvent
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; fireChangeEvent
Distance : 5

79
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; parent
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; parent
Distance : 5

80
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; createIllegalArgumentException
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; createIllegalArgumentException
Distance : 5

81
Tree	Iterator iter = iterator ( res.entries ) ; >
Code	Iterator iter = iterator ( res.entries ) ; >
Distance : 5

82
Tree	Iterator iter = iterator ( res.entries ) ; STRING_CONSTANT
Code	Iterator iter = iterator ( res.entries ) ; STRING_CONSTANT
Distance : 5

83
Tree	Iterator iter = iterator ( res.entries ) ; field
Code	Iterator iter = iterator ( res.entries ) ; field
Distance : 5

84
Tree	Iterator iter = iterator ( res.entries ) ; ,
Code	Iterator iter = iterator ( res.entries ) ; ,
Distance : 5

85
Tree	Iterator iter = iterator ( res.entries ) ; value
Code	Iterator iter = iterator ( res.entries ) ; value
Distance : 5

86
Tree	Iterator iter = iterator ( res.entries ) ; i
Code	Iterator iter = iterator ( res.entries ) ; i
Distance : 5

87
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; LINE_JOINER
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; LINE_JOINER
Distance : 5

88
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; add
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; add
Distance : 5

89
Tree	Iterator iter = iterator ( res.entries ) ; !=
Code	Iterator iter = iterator ( res.entries ) ; !=
Distance : 5

90
Tree	Iterator iter = iterator ( res.entries ) ; super
Code	Iterator iter = iterator ( res.entries ) ; super
Distance : 5

91
Tree	Iterator iter = iterator ( res.entries ) ; data
Code	Iterator iter = iterator ( res.entries ) ; data
Distance : 5

92
Tree	Iterator iter = iterator ( res.entries ) ; List
Code	Iterator iter = iterator ( res.entries ) ; List
Distance : 5

93
Tree	Iterator iter = iterator ( res.entries ) ; Args
Code	Iterator iter = iterator ( res.entries ) ; Args
Distance : 5

94
Tree	Iterator iter = iterator ( res.entries ) ; array
Code	Iterator iter = iterator ( res.entries ) ; array
Distance : 5

95
Tree	Iterator iter = iterator ( res.entries ) ; fail
Code	Iterator iter = iterator ( res.entries ) ; fail
Distance : 5

96
Tree	Iterator iter = iterator ( res.entries ) ; paint
Code	Iterator iter = iterator ( res.entries ) ; paint
Distance : 5

97
Tree	Iterator iter = iterator ( res.entries ) ; join
Code	Iterator iter = iterator ( res.entries ) ; join
Distance : 5

98
Tree	Iterator iter = iterator ( res.entries ) ; str
Code	Iterator iter = iterator ( res.entries ) ; str
Distance : 5

99
Tree	Iterator iter = iterator ( res.entries ) ; LINE_JOINER
Code	Iterator iter = iterator ( res.entries ) ; LINE_JOINER
Distance : 5

========================================================================


========================================================================
Example Number: 66
Parent Code is: 
Iterator iter = res.entries . iterator () ;
-------------------------------------------------------------------------------
Child code is: 
Iterator iter = entries . iterator () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (40{val=res.entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (800{val=entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/49/parent/src_main_java_org_apache_commons_math_linear_OpenMapRealVector.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; x
Code	Iterator iter = iterator ( res.entries ) . iterator () ; x
Distance : 5

1
Tree	Iterator iter = iterator ( res.entries ) ; checkState
Code	Iterator iter = iterator ( res.entries ) ; checkState
Distance : 5

2
Tree	Iterator iter = iterator ( res.entries ) ; nullNotPermitted
Code	Iterator iter = iterator ( res.entries ) ; nullNotPermitted
Distance : 5

3
Tree	Iterator iter = iterator ( res.entries ) ; []
Code	Iterator iter = iterator ( res.entries ) ; []
Distance : 5

4
Tree	Iterator iter = iterator ( res.entries ) ; void
Code	Iterator iter = iterator ( res.entries ) ; void
Distance : 5

5
Tree	Iterator iter = iterator ( res.entries ) ; ==
Code	Iterator iter = iterator ( res.entries ) ; ==
Distance : 5

6
Tree	Iterator iter = iterator ( res.entries ) ; assertEquals
Code	Iterator iter = iterator ( res.entries ) ; assertEquals
Distance : 5

7
Tree	Iterator iter = iterator ( res.entries ) ; !
Code	Iterator iter = iterator ( res.entries ) ; !
Distance : 5

8
Tree	Iterator iter = iterator ( res.entries ) ; @
Code	Iterator iter = iterator ( res.entries ) ; @
Distance : 5

9
Tree	Iterator iter = iterator ( res.entries ) ; test
Code	Iterator iter = iterator ( res.entries ) ; test
Distance : 5

10
Tree	Iterator iter = iterator ( res.entries ) ; Override
Code	Iterator iter = iterator ( res.entries ) ; Override
Distance : 5

11
Tree	Iterator iter = iterator ( res.entries ) ; mock
Code	Iterator iter = iterator ( res.entries ) ; mock
Distance : 5

12
Tree	Iterator iter = iterator ( res.entries ) ; [
Code	Iterator iter = iterator ( res.entries ) ; [
Distance : 5

13
Tree	Iterator iter = iterator ( res.entries ) ; double
Code	Iterator iter = iterator ( res.entries ) ; double
Distance : 5

14
Tree	Iterator iter = iterator ( res.entries ) ; ]
Code	Iterator iter = iterator ( res.entries ) ; ]
Distance : 5

15
Tree	Iterator iter = iterator ( res.entries ) ; T
Code	Iterator iter = iterator ( res.entries ) ; T
Distance : 5

16
Tree	Iterator iter = iterator ( res.entries ) ; Preconditions
Code	Iterator iter = iterator ( res.entries ) ; Preconditions
Distance : 5

17
Tree	Iterator iter = iterator ( res.entries ) ; -
Code	Iterator iter = iterator ( res.entries ) ; -
Distance : 5

18
Tree	Iterator iter = iterator ( res.entries ) ; class
Code	Iterator iter = iterator ( res.entries ) ; class
Distance : 5

19
Tree	Iterator iter = iterator ( res.entries ) ; Object
Code	Iterator iter = iterator ( res.entries ) ; Object
Distance : 5

20
Tree	Iterator iter = iterator ( res.entries ) ; {}
Code	Iterator iter = iterator ( res.entries ) ; {}
Distance : 5

21
Tree	Iterator iter = iterator ( res.entries ) ; MathRuntimeException
Code	Iterator iter = iterator ( res.entries ) ; MathRuntimeException
Distance : 5

22
Tree	Iterator iter = iterator ( res.entries ) ; serialised
Code	Iterator iter = iterator ( res.entries ) ; serialised
Distance : 5

23
Tree	Iterator iter = iterator ( res.entries ) ; :
Code	Iterator iter = iterator ( res.entries ) ; :
Distance : 5

24
Tree	Iterator iter = iterator ( res.entries ) ; f
Code	Iterator iter = iterator ( res.entries ) ; f
Distance : 5

25
Tree	Iterator iter = iterator ( res.entries ) ; expected
Code	Iterator iter = iterator ( res.entries ) ; expected
Distance : 5

26
Tree	Iterator iter = iterator ( res.entries ) ; add
Code	Iterator iter = iterator ( res.entries ) ; add
Distance : 5

27
Tree	Iterator iter = iterator ( res.entries ) ; &&
Code	Iterator iter = iterator ( res.entries ) ; &&
Distance : 5

28
Tree	Iterator iter = iterator ( res.entries ) ; name
Code	Iterator iter = iterator ( res.entries ) ; name
Distance : 5

29
Tree	Iterator iter = iterator ( res.entries ) ; int
Code	Iterator iter = iterator ( res.entries ) ; int
Distance : 5

30
Tree	Iterator iter = iterator ( res.entries ) ; type
Code	Iterator iter = iterator ( res.entries ) ; type
Distance : 5

31
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; super
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; super
Distance : 5

32
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; !=
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; !=
Distance : 5

33
Tree	Iterator iter = res.entries . iterator () ; add
Code	Iterator iter = res.entries . iterator () ; add
Distance : 2

34
Tree	Iterator iter = res.entries . iterator () ; name
Code	Iterator iter = res.entries . iterator () ; name
Distance : 2

35
Tree	Iterator iter = res.entries . iterator () ; m
Code	Iterator iter = res.entries . iterator () ; m
Distance : 2

36
Tree	Iterator iter = res.entries . iterator () ; boolean
Code	Iterator iter = res.entries . iterator () ; boolean
Distance : 2

37
Tree	Iterator iter = res.entries . iterator () ; checkArgument
Code	Iterator iter = res.entries . iterator () ; checkArgument
Distance : 2

38
Tree	Iterator iter = res.entries . iterator () ; data
Code	Iterator iter = res.entries . iterator () ; data
Distance : 2

39
Tree	Iterator iter = res.entries . iterator () ; List
Code	Iterator iter = res.entries . iterator () ; List
Distance : 2

40
Tree	Iterator iter = res.entries . iterator () ; Args
Code	Iterator iter = res.entries . iterator () ; Args
Distance : 2

41
Tree	Iterator iter = res.entries . iterator () ; array
Code	Iterator iter = res.entries . iterator () ; array
Distance : 2

42
Tree	Iterator iter = res.entries . iterator () ; <>
Code	Iterator iter = res.entries . iterator () ; <>
Distance : 2

43
Tree	Iterator iter = iterator ( res.entries ) ; false
Code	Iterator iter = iterator ( res.entries ) ; false
Distance : 5

44
Tree	Iterator iter = res.entries . iterator () ; try
Code	Iterator iter = res.entries . iterator () ; try
Distance : 2

45
Tree	Iterator iter = res.entries . iterator () ; paint
Code	Iterator iter = res.entries . iterator () ; paint
Distance : 2

46
Tree	Iterator iter = res.entries . iterator () ; join
Code	Iterator iter = res.entries . iterator () ; join
Distance : 2

47
Tree	Iterator iter = res.entries . iterator () ; str
Code	Iterator iter = res.entries . iterator () ; str
Distance : 2

48
Tree	Iterator iter = res.entries . iterator () ; LINE_JOINER
Code	Iterator iter = res.entries . iterator () ; LINE_JOINER
Distance : 2

49
Tree	Iterator iter = res.entries . iterator () ; testSame
Code	Iterator iter = res.entries . iterator () ; testSame
Distance : 2

50
Tree	Iterator iter = res.entries . iterator () ; x
Code	Iterator iter = res.entries . iterator () ; x
Distance : 2

51
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; invocation
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; invocation
Distance : 5

52
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; assertThat
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; assertThat
Distance : 5

53
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; FastMath
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; FastMath
Distance : 5

54
Tree	Iterator iter = iterator ( res.entries ) ; result
Code	Iterator iter = iterator ( res.entries ) ; result
Distance : 5

55
Tree	Iterator iter = iterator ( res.entries ) ; getInstance
Code	Iterator iter = iterator ( res.entries ) ; getInstance
Distance : 5

56
Tree	Iterator iter = iterator ( res.entries ) ; *
Code	Iterator iter = iterator ( res.entries ) ; *
Distance : 5

57
Tree	Iterator iter = res.entries . iterator () ; fail
Code	Iterator iter = res.entries . iterator () ; fail
Distance : 2

58
Tree	Iterator iter = iterator ( res.entries ) ; m
Code	Iterator iter = iterator ( res.entries ) ; m
Distance : 5

59
Tree	Iterator iter = iterator ( res.entries ) ; boolean
Code	Iterator iter = iterator ( res.entries ) ; boolean
Distance : 5

60
Tree	Iterator iter = iterator ( res.entries ) ; checkArgument
Code	Iterator iter = iterator ( res.entries ) ; checkArgument
Distance : 5

61
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; m
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; m
Distance : 5

62
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; boolean
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; boolean
Distance : 5

63
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; checkArgument
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; checkArgument
Distance : 5

64
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; data
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; data
Distance : 5

65
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; List
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; List
Distance : 5

66
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Args
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Args
Distance : 5

67
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; array
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; array
Distance : 5

68
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; <>
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; <>
Distance : 5

69
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; try
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; try
Distance : 5

70
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; fail
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; fail
Distance : 5

71
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; paint
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; paint
Distance : 5

72
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; join
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; join
Distance : 5

73
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; name
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; name
Distance : 5

74
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; str
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; str
Distance : 5

75
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; testSame
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; testSame
Distance : 5

76
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; x
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; x
Distance : 5

77
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; ArrayList
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; ArrayList
Distance : 5

78
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; fireChangeEvent
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; fireChangeEvent
Distance : 5

79
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; parent
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; parent
Distance : 5

80
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; createIllegalArgumentException
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; createIllegalArgumentException
Distance : 5

81
Tree	Iterator iter = iterator ( res.entries ) ; >
Code	Iterator iter = iterator ( res.entries ) ; >
Distance : 5

82
Tree	Iterator iter = iterator ( res.entries ) ; STRING_CONSTANT
Code	Iterator iter = iterator ( res.entries ) ; STRING_CONSTANT
Distance : 5

83
Tree	Iterator iter = iterator ( res.entries ) ; field
Code	Iterator iter = iterator ( res.entries ) ; field
Distance : 5

84
Tree	Iterator iter = iterator ( res.entries ) ; ,
Code	Iterator iter = iterator ( res.entries ) ; ,
Distance : 5

85
Tree	Iterator iter = iterator ( res.entries ) ; value
Code	Iterator iter = iterator ( res.entries ) ; value
Distance : 5

86
Tree	Iterator iter = iterator ( res.entries ) ; i
Code	Iterator iter = iterator ( res.entries ) ; i
Distance : 5

87
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; LINE_JOINER
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; LINE_JOINER
Distance : 5

88
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; add
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; add
Distance : 5

89
Tree	Iterator iter = iterator ( res.entries ) ; !=
Code	Iterator iter = iterator ( res.entries ) ; !=
Distance : 5

90
Tree	Iterator iter = iterator ( res.entries ) ; super
Code	Iterator iter = iterator ( res.entries ) ; super
Distance : 5

91
Tree	Iterator iter = iterator ( res.entries ) ; data
Code	Iterator iter = iterator ( res.entries ) ; data
Distance : 5

92
Tree	Iterator iter = iterator ( res.entries ) ; List
Code	Iterator iter = iterator ( res.entries ) ; List
Distance : 5

93
Tree	Iterator iter = iterator ( res.entries ) ; Args
Code	Iterator iter = iterator ( res.entries ) ; Args
Distance : 5

94
Tree	Iterator iter = iterator ( res.entries ) ; array
Code	Iterator iter = iterator ( res.entries ) ; array
Distance : 5

95
Tree	Iterator iter = iterator ( res.entries ) ; fail
Code	Iterator iter = iterator ( res.entries ) ; fail
Distance : 5

96
Tree	Iterator iter = iterator ( res.entries ) ; paint
Code	Iterator iter = iterator ( res.entries ) ; paint
Distance : 5

97
Tree	Iterator iter = iterator ( res.entries ) ; join
Code	Iterator iter = iterator ( res.entries ) ; join
Distance : 5

98
Tree	Iterator iter = iterator ( res.entries ) ; str
Code	Iterator iter = iterator ( res.entries ) ; str
Distance : 5

99
Tree	Iterator iter = iterator ( res.entries ) ; LINE_JOINER
Code	Iterator iter = iterator ( res.entries ) ; LINE_JOINER
Distance : 5

========================================================================


========================================================================
Example Number: 67
Parent Code is: 
if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
-------------------------------------------------------------------------------
Child code is: 
if ( divisor == NUMBER_CONSTANT ) { return isZero ? NaN : INF ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=divisor}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=NaN}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=divisor}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (16 (800{val=isZero}) (233{val=?}) (800{val=NaN}) (226{val=:}) (800{val=INF})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/47/parent/src_main_java_org_apache_commons_math_complex_Complex.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } checkState
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } checkState
Distance : 5

1
Tree	if ( divisor . getVertices ( JSTypeNative.FUNCTION_INSTANCE_TYPE ) ) { return NaN ; }
Code	if ( divisor . getVertices ( JSTypeNative.FUNCTION_INSTANCE_TYPE ) ) { return NaN ; }
Distance : 9

2
Tree	if ( divisor . getBytes ( CHAR_CONS ) ) { return NaN ; }
Code	if ( divisor . getBytes ( CHAR_CONS ) ) { return NaN ; }
Distance : 9

3
Tree	if ( this . printExterns () ) { return NaN ; }
Code	if ( this . printExterns () ) { return NaN ; }
Distance : 8

4
Tree	if ( this . tickPaint () ) { return NaN ; }
Code	if ( this . tickPaint () ) { return NaN ; }
Distance : 8

5
Tree	if ( this . costEvaluations () ) { return NaN ; }
Code	if ( this . costEvaluations () ) { return NaN ; }
Distance : 8

6
Tree	if ( new NordsieckInitializer () . length ( divisor ) ) { return NaN ; }
Code	if ( new NordsieckInitializer () . length ( divisor ) ) { return NaN ; }
Distance : 12

7
Tree	if ( new GlobalTypeInfoCollector () . getName ( divisor ) ) { return NaN ; }
Code	if ( new GlobalTypeInfoCollector () . getName ( divisor ) ) { return NaN ; }
Distance : 12

8
Tree	if ( STRING_CONSTANT . isEquivalentTo ( divisor ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . isEquivalentTo ( divisor ) ) { return NaN ; }
Distance : 10

9
Tree	if ( divisor . typeMockabilityOf ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . typeMockabilityOf ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

10
Tree	if ( this . getInstrumentForCoverageOnly () ) { return NaN ; }
Code	if ( this . getInstrumentForCoverageOnly () ) { return NaN ; }
Distance : 8

11
Tree	if ( this . newLineStr () ) { return NaN ; }
Code	if ( this . newLineStr () ) { return NaN ; }
Distance : 8

12
Tree	if ( STRING_CONSTANT . SCOPE_NAMESPACE ( divisor ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . SCOPE_NAMESPACE ( divisor ) ) { return NaN ; }
Distance : 10

13
Tree	if ( config.tracerMode ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( config.tracerMode ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

14
Tree	if ( STRING_CONSTANT . appendDays ( divisor ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . appendDays ( divisor ) ) { return NaN ; }
Distance : 10

15
Tree	if ( new ThreadSafeMockingProgress () . getName ( divisor ) ) { return NaN ; }
Code	if ( new ThreadSafeMockingProgress () . getName ( divisor ) ) { return NaN ; }
Distance : 12

16
Tree	if ( AbstractIntegerDistribution ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( AbstractIntegerDistribution ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

17
Tree	if ( getTypesToSkipForType ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( getTypesToSkipForType ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

18
Tree	if ( this . labelLinkMargin () ) { return NaN ; }
Code	if ( this . labelLinkMargin () ) { return NaN ; }
Distance : 8

19
Tree	if ( deflatedEnd ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( deflatedEnd ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

20
Tree	if ( this . parseMutableTimePeriod () ) { return NaN ; }
Code	if ( this . parseMutableTimePeriod () ) { return NaN ; }
Distance : 8

21
Tree	if ( new InterpolatingMicrosphere () . getName ( divisor ) ) { return NaN ; }
Code	if ( new InterpolatingMicrosphere () . getName ( divisor ) ) { return NaN ; }
Distance : 12

22
Tree	if ( new ChineseRings () . contains ( divisor ) ) { return NaN ; }
Code	if ( new ChineseRings () . contains ( divisor ) ) { return NaN ; }
Distance : 12

23
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } []
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } []
Distance : 5

24
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } !
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } !
Distance : 5

25
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } assertEquals
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } assertEquals
Distance : 5

26
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } !=
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } !=
Distance : 5

27
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } super
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } super
Distance : 5

28
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } double
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } double
Distance : 5

29
Tree	if ( divisor . containsNow ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . containsNow ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

30
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } value
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } value
Distance : 5

31
Tree	if ( this . regionMatches () ) { return NaN ; }
Code	if ( this . regionMatches () ) { return NaN ; }
Distance : 8

32
Tree	if ( divisor . forThisVm ( divisor , false ) ) { return NaN ; }
Code	if ( divisor . forThisVm ( divisor , false ) ) { return NaN ; }
Distance : 11

33
Tree	if ( new EndsWith () . getName ( divisor ) ) { return NaN ; }
Code	if ( new EndsWith () . getName ( divisor ) ) { return NaN ; }
Distance : 12

34
Tree	if ( this . booleanReturningMethod () ) { return NaN ; }
Code	if ( this . booleanReturningMethod () ) { return NaN ; }
Distance : 8

35
Tree	if ( isRegistered ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isRegistered ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

36
Tree	if ( divisor . getClass ( CHAR_CONS ) ) { return NaN ; }
Code	if ( divisor . getClass ( CHAR_CONS ) ) { return NaN ; }
Distance : 9

37
Tree	if ( this . cumulativeTestPoints () ) { return NaN ; }
Code	if ( this . cumulativeTestPoints () ) { return NaN ; }
Distance : 8

38
Tree	if ( this . fix1stArgument () ) { return NaN ; }
Code	if ( this . fix1stArgument () ) { return NaN ; }
Distance : 8

39
Tree	if ( this . updateFormula () ) { return NaN ; }
Code	if ( this . updateFormula () ) { return NaN ; }
Distance : 8

40
Tree	if ( new NestedLoops () . contains ( divisor ) ) { return NaN ; }
Code	if ( new NestedLoops () . contains ( divisor ) ) { return NaN ; }
Distance : 12

41
Tree	if ( this . typeMockabilityOf () ) { return NaN ; }
Code	if ( this . typeMockabilityOf () ) { return NaN ; }
Distance : 8

42
Tree	if ( STRING_CONSTANT . contains ( divisor ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . contains ( divisor ) ) { return NaN ; }
Distance : 10

43
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } nullNotPermitted
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } nullNotPermitted
Distance : 5

44
Tree	if ( divisor . getClass ( divisor , false ) ) { return NaN ; }
Code	if ( divisor . getClass ( divisor , false ) ) { return NaN ; }
Distance : 11

45
Tree	if ( divisor . canBeCalled ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . canBeCalled ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

46
Tree	if ( otherPropNames ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( otherPropNames ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

47
Tree	if ( divisor . getDaysInYearMax ( CHAR_CONS ) ) { return NaN ; }
Code	if ( divisor . getDaysInYearMax ( CHAR_CONS ) ) { return NaN ; }
Distance : 9

48
Tree	if ( leftOfArrow.type ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( leftOfArrow.type ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

49
Tree	if ( divisor . isAliasDefinition ( FeatureSet.ES6 ) ) { return NaN ; }
Code	if ( divisor . isAliasDefinition ( FeatureSet.ES6 ) ) { return NaN ; }
Distance : 9

50
Tree	if ( new NordsieckInitializer () . getName ( divisor ) ) { return NaN ; }
Code	if ( new NordsieckInitializer () . getName ( divisor ) ) { return NaN ; }
Distance : 12

51
Tree	if ( execFinally ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( execFinally ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

52
Tree	if ( AbstractObjectList ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( AbstractObjectList ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

53
Tree	if ( this . validateUnusedStubs () ) { return NaN ; }
Code	if ( this . validateUnusedStubs () ) { return NaN ; }
Distance : 8

54
Tree	if ( STRING_CONSTANT . containsNow ( divisor ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . containsNow ( divisor ) ) { return NaN ; }
Distance : 10

55
Tree	if ( divisor . isChromePassEnabled ( divisor , false ) ) { return NaN ; }
Code	if ( divisor . isChromePassEnabled ( divisor , false ) ) { return NaN ; }
Distance : 11

56
Tree	if ( this . showBase () ) { return NaN ; }
Code	if ( this . showBase () ) { return NaN ; }
Distance : 8

57
Tree	if ( wantedArgumentPositionIsValidForInvocation ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( wantedArgumentPositionIsValidForInvocation ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

58
Tree	if ( new StreamDataAdapter () . getName ( divisor ) ) { return NaN ; }
Code	if ( new StreamDataAdapter () . getName ( divisor ) ) { return NaN ; }
Distance : 12

59
Tree	if ( divisor . getDaysInYearMax ( divisor , false ) ) { return NaN ; }
Code	if ( divisor . getDaysInYearMax ( divisor , false ) ) { return NaN ; }
Distance : 11

60
Tree	if ( divisor . isAsciiPrintable ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . isAsciiPrintable ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

61
Tree	if ( divisor . isDeclaredInFunctionBlockOrParameter ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . isDeclaredInFunctionBlockOrParameter ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

62
Tree	if ( this . serializeAndBack () ) { return NaN ; }
Code	if ( this . serializeAndBack () ) { return NaN ; }
Distance : 8

63
Tree	if ( this . canBeCalled () ) { return NaN ; }
Code	if ( this . canBeCalled () ) { return NaN ; }
Distance : 8

64
Tree	if ( ready ( getSlope () ) ) { return NaN ; }
Code	if ( ready ( getSlope () ) ) { return NaN ; }
Distance : 9

65
Tree	if ( divisor . isChromePassEnabled ( CHAR_CONS ) ) { return NaN ; }
Code	if ( divisor . isChromePassEnabled ( CHAR_CONS ) ) { return NaN ; }
Distance : 9

66
Tree	if ( this . isSame () ) { return NaN ; }
Code	if ( this . isSame () ) { return NaN ; }
Distance : 8

67
Tree	if ( this . positiveBarPaint () ) { return NaN ; }
Code	if ( this . positiveBarPaint () ) { return NaN ; }
Distance : 8

68
Tree	if ( new DefaultMockingDetails () . getName ( divisor ) ) { return NaN ; }
Code	if ( new DefaultMockingDetails () . getName ( divisor ) ) { return NaN ; }
Distance : 12

69
Tree	if ( new Object () . length ( divisor ) ) { return NaN ; }
Code	if ( new Object () . length ( divisor ) ) { return NaN ; }
Distance : 12

70
Tree	if ( divisor . shouldCollapseProperties ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . shouldCollapseProperties ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

71
Tree	if ( divisor . getVertices ( FeatureSet.ES6 ) ) { return NaN ; }
Code	if ( divisor . getVertices ( FeatureSet.ES6 ) ) { return NaN ; }
Distance : 9

72
Tree	if ( this . isCounting () ) { return NaN ; }
Code	if ( this . isCounting () ) { return NaN ; }
Distance : 8

73
Tree	if ( this . divisor . get () ) { return NaN ; }
Code	if ( this . divisor . get () ) { return NaN ; }
Distance : 9

74
Tree	if ( STRING_CONSTANT . appendSuffix ( divisor ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . appendSuffix ( divisor ) ) { return NaN ; }
Distance : 10

75
Tree	if ( com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

76
Tree	if ( divisor . getSigners ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . getSigners ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

77
Tree	if ( divisor . getTree ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . getTree ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

78
Tree	if ( new ConstructorInstantiator () . length ( divisor ) ) { return NaN ; }
Code	if ( new ConstructorInstantiator () . length ( divisor ) ) { return NaN ; }
Distance : 12

79
Tree	if ( this . setTypeValidationEnabled () ) { return NaN ; }
Code	if ( this . setTypeValidationEnabled () ) { return NaN ; }
Distance : 8

80
Tree	if ( STRING_CONSTANT . isNonSingular ( divisor ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . isNonSingular ( divisor ) ) { return NaN ; }
Distance : 10

81
Tree	if ( new Converter () . getString ( divisor ) ) { return NaN ; }
Code	if ( new Converter () . getString ( divisor ) ) { return NaN ; }
Distance : 12

82
Tree	if ( this . maxX () ) { return NaN ; }
Code	if ( this . maxX () ) { return NaN ; }
Distance : 8

83
Tree	if ( JsonFileSpec ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( JsonFileSpec ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

84
Tree	if ( divisor . isAssignableFrom ( config.tracerMode ) ) { return NaN ; }
Code	if ( divisor . isAssignableFrom ( config.tracerMode ) ) { return NaN ; }
Distance : 9

85
Tree	if ( new DefaultMockingDetails () . length ( divisor ) ) { return NaN ; }
Code	if ( new DefaultMockingDetails () . length ( divisor ) ) { return NaN ; }
Distance : 12

86
Tree	if ( new EndsWith () . length ( divisor ) ) { return NaN ; }
Code	if ( new EndsWith () . length ( divisor ) ) { return NaN ; }
Distance : 12

87
Tree	if ( this . ThreadFactory () ) { return NaN ; }
Code	if ( this . ThreadFactory () ) { return NaN ; }
Distance : 8

88
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } (
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } (
Distance : 5

89
Tree	if ( divisor . containsNone ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . containsNone ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

90
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } if
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } if
Distance : 5

91
Tree	if ( divisor ) { return NaN ; } if
Code	if ( divisor ) { return NaN ; } if
Distance : 7

92
Tree	if ( divisor ) { return NaN ; } <s>
Code	if ( divisor ) { return NaN ; } <s>
Distance : 7

93
Tree	if ( divisor ) { return NaN ; } (
Code	if ( divisor ) { return NaN ; } (
Distance : 7

94
Tree	if ( divisor ) { return NaN ; } =
Code	if ( divisor ) { return NaN ; } =
Distance : 7

95
Tree	if ( divisor ) { return NaN ; } }
Code	if ( divisor ) { return NaN ; } }
Distance : 7

96
Tree	if ( divisor ) { return NaN ; } ()
Code	if ( divisor ) { return NaN ; } ()
Distance : 7

97
Tree	if ( divisor ) { return NaN ; } {
Code	if ( divisor ) { return NaN ; } {
Distance : 7

98
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } <blank>
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; } <blank>
Distance : 5

99
Tree	if ( divisor ) { return NaN ; } new
Code	if ( divisor ) { return NaN ; } new
Distance : 7

========================================================================


========================================================================
Example Number: 68
Parent Code is: 
if ( divisor == NUMBER_CONSTANT ) { return isZero ? NaN : INF ; }
-------------------------------------------------------------------------------
Child code is: 
if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=divisor}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (16 (800{val=isZero}) (233{val=?}) (800{val=NaN}) (226{val=:}) (800{val=INF})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=divisor}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=NaN}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/46/parent/src_main_java_org_apache_commons_math_complex_Complex.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? java.util.Locale.US : FunctionFlavor.NORMAL ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? java.util.Locale.US : FunctionFlavor.NORMAL ; }
Distance : 7

1
Tree	if ( NaN == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 5

2
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isVanillaFunction ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isVanillaFunction ( CHAR_CONS ) : divisor ; }
Distance : 9

3
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isMismatchesReported ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isMismatchesReported ( CHAR_CONS ) : divisor ; }
Distance : 9

4
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . withLoose ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . withLoose ( CHAR_CONS ) : divisor ; }
Distance : 9

5
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isFunctionPrototypeType ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isFunctionPrototypeType ( CHAR_CONS ) : divisor ; }
Distance : 9

6
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isNullable ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isNullable ( CHAR_CONS ) : divisor ; }
Distance : 9

7
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getNumberInstance ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getNumberInstance ( CHAR_CONS ) : divisor ; }
Distance : 9

8
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isInstanceofObject ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isInstanceofObject ( CHAR_CONS ) : divisor ; }
Distance : 9

9
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . get () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . get () : divisor ; }
Distance : 9

10
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getRunCount ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getRunCount ( CHAR_CONS ) : divisor ; }
Distance : 9

11
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isAllType ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isAllType ( CHAR_CONS ) : divisor ; }
Distance : 9

12
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getBottomObject ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getBottomObject ( CHAR_CONS ) : divisor ; }
Distance : 9

13
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . getBottomObject () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . getBottomObject () : divisor ; }
Distance : 9

14
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . mayHaveNonStrayProp ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . mayHaveNonStrayProp ( CHAR_CONS ) : divisor ; }
Distance : 9

15
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . copySelf ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . copySelf ( CHAR_CONS ) : divisor ; }
Distance : 9

16
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . getBeta () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . getBeta () : divisor ; }
Distance : 9

17
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 5

18
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isSynthetic ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isSynthetic ( CHAR_CONS ) : divisor ; }
Distance : 9

19
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ; }
Distance : 1

20
Tree	if ( divisor == NUMBER_CONSTANT ) { return default: ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return default: ; }
Distance : 1

21
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . linearCombination ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . linearCombination ( CHAR_CONS ) : divisor ; }
Distance : 9

22
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . getConstructor () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . getConstructor () : divisor ; }
Distance : 9

23
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getPackage ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getPackage ( CHAR_CONS ) : divisor ; }
Distance : 9

24
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getInterfaces ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getInterfaces ( CHAR_CONS ) : divisor ; }
Distance : 9

25
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getPropType ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getPropType ( CHAR_CONS ) : divisor ; }
Distance : 9

26
Tree	if ( divisor == NUMBER_CONSTANT ) { return divisor ? NaN . of ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return divisor ? NaN . of ( CHAR_CONS ) : divisor ; }
Distance : 9

27
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isPublic ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isPublic ( CHAR_CONS ) : divisor ; }
Distance : 9

28
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . getDaysInYearMax () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . getDaysInYearMax () : divisor ; }
Distance : 9

29
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . isPropDefinedOnSubtype () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . isPropDefinedOnSubtype () : divisor ; }
Distance : 9

30
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isSomeUnknownType ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isSomeUnknownType ( CHAR_CONS ) : divisor ; }
Distance : 9

31
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getSourceMapURL ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getSourceMapURL ( CHAR_CONS ) : divisor ; }
Distance : 9

32
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . latest () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . latest () : divisor ; }
Distance : 9

33
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . cumulativeProbability ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . cumulativeProbability ( CHAR_CONS ) : divisor ; }
Distance : 9

34
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isNamedProperty ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isNamedProperty ( CHAR_CONS ) : divisor ; }
Distance : 9

35
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . getRMS () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . getRMS () : divisor ; }
Distance : 9

36
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . primitiveTypeOf ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . primitiveTypeOf ( CHAR_CONS ) : divisor ; }
Distance : 9

37
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getMatchers ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getMatchers ( CHAR_CONS ) : divisor ; }
Distance : 9

38
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . getNumberInstance () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . getNumberInstance () : divisor ; }
Distance : 9

39
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getRMS ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getRMS ( CHAR_CONS ) : divisor ; }
Distance : 9

40
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isModifiableClass ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isModifiableClass ( CHAR_CONS ) : divisor ; }
Distance : 9

41
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( getSlope () , FeatureSet.ES6 , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( getSlope () , FeatureSet.ES6 , divisor ) ; }
Distance : 10

42
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( getOutputFeatureSet () , options.checksOnly , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( getOutputFeatureSet () , options.checksOnly , divisor ) ; }
Distance : 10

43
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( isNamedType () , reporterStub.location , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( isNamedType () , reporterStub.location , divisor ) ; }
Distance : 10

44
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . getBeta ( divisor . escapeJson () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . getBeta ( divisor . escapeJson () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Distance : 12

45
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 5

46
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( getY () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( getY () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Distance : 10

47
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( divisor . toString () , result.success , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( divisor . toString () , result.success , divisor ) ; }
Distance : 12

48
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isModifiableClass ( getRemoveUnusedCode () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isModifiableClass ( getRemoveUnusedCode () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Distance : 10

49
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( divisor . toString () , Locale.US , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( divisor . toString () , Locale.US , divisor ) ; }
Distance : 12

50
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( getOutputFeatureSet () , options.removeUnusedPrototypePropertiesInExterns , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( getOutputFeatureSet () , options.removeUnusedPrototypePropertiesInExterns , divisor ) ; }
Distance : 10

51
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( isNamedType () , Boolean.FALSE , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( isNamedType () , Boolean.FALSE , divisor ) ; }
Distance : 10

52
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . getTopDefiningInterface ( divisor . escapeJson () , reporterStub.location , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . getTopDefiningInterface ( divisor . escapeJson () , reporterStub.location , divisor ) ; }
Distance : 12

53
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( isNamedType () , LanguageMode.TYPESCRIPT , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( isNamedType () , LanguageMode.TYPESCRIPT , divisor ) ; }
Distance : 10

54
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? isNamedType : FunctionFlavor.NORMAL ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? isNamedType : FunctionFlavor.NORMAL ; }
Distance : 7

55
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? Locale.US : FunctionFlavor.NORMAL ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping () ? Locale.US : FunctionFlavor.NORMAL ; }
Distance : 7

56
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Distance : 7

57
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( estimateErrorVariance () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( estimateErrorVariance () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Distance : 10

58
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isModifiableClass ( isNamedType () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isModifiableClass ( isNamedType () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Distance : 10

59
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( getRemoveUnusedCode () , reporterStub.location , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( getRemoveUnusedCode () , reporterStub.location , divisor ) ; }
Distance : 10

60
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( getOutputFeatureSet () , Context.OTHER , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( getOutputFeatureSet () , Context.OTHER , divisor ) ; }
Distance : 10

61
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . voidMethodStubbable ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . voidMethodStubbable ( CHAR_CONS ) : divisor ; }
Distance : 9

62
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ; }
Distance : 1

63
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isConstVar ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isConstVar ( CHAR_CONS ) : divisor ; }
Distance : 9

64
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getVertices ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getVertices ( CHAR_CONS ) : divisor ; }
Distance : 9

65
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . findZBounds ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . findZBounds ( CHAR_CONS ) : divisor ; }
Distance : 9

66
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 5

67
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . withLoose () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . NaN . withLoose () : divisor ; }
Distance : 9

68
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isRest ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isRest ( CHAR_CONS ) : divisor ; }
Distance : 9

69
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isEmptyType ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isEmptyType ( CHAR_CONS ) : divisor ; }
Distance : 9

70
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getDaysInYearMax ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getDaysInYearMax ( CHAR_CONS ) : divisor ; }
Distance : 9

71
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . enumLiteralHasKey ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . enumLiteralHasKey ( CHAR_CONS ) : divisor ; }
Distance : 9

72
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . dereference ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . dereference ( CHAR_CONS ) : divisor ; }
Distance : 9

73
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . getConstructor ( getOutputFeatureSet () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . getConstructor ( getOutputFeatureSet () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Distance : 10

74
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . primitiveTypeOf ( getOutputFeatureSet () , startPoint.length , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . primitiveTypeOf ( getOutputFeatureSet () , startPoint.length , divisor ) ; }
Distance : 10

75
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( getRemoveUnusedCode () , System.out , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( getRemoveUnusedCode () , System.out , divisor ) ; }
Distance : 10

76
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( isNamedType () , System.out , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( isNamedType () , System.out , divisor ) ; }
Distance : 10

77
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( getReferenceName () , IncrementalCheckMode.GENERATE_IJS , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( getReferenceName () , IncrementalCheckMode.GENERATE_IJS , divisor ) ; }
Distance : 10

78
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isInvalidating ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . isInvalidating ( CHAR_CONS ) : divisor ; }
Distance : 9

79
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . forName ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . forName ( CHAR_CONS ) : divisor ; }
Distance : 9

80
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getMaxArity ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getMaxArity ( CHAR_CONS ) : divisor ; }
Distance : 9

81
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getAncestorInterfaces ( CHAR_CONS ) : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getAncestorInterfaces ( CHAR_CONS ) : divisor ; }
Distance : 9

82
Tree	if ( divisor == NUMBER_CONSTANT ) { return isAfterNow ( divisor , NaN , divisor , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isAfterNow ( divisor , NaN , divisor , divisor , divisor ) ; }
Distance : 11

83
Tree	if ( divisor == NUMBER_CONSTANT ) { return isDeclaredSloppy ( NaN , NaN , divisor , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isDeclaredSloppy ( NaN , NaN , divisor , divisor , divisor ) ; }
Distance : 11

84
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ( NaN , NaN , isZero , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ( NaN , NaN , isZero , divisor , divisor ) ; }
Distance : 11

85
Tree	if ( divisor == NUMBER_CONSTANT ) { return Format.PRETTY ( NaN , NaN , divisor , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return Format.PRETTY ( NaN , NaN , divisor , divisor , divisor ) ; }
Distance : 11

86
Tree	if ( divisor == NUMBER_CONSTANT ) { return getLeftmostProp ( NaN , NaN , divisor , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return getLeftmostProp ( NaN , NaN , divisor , divisor , divisor ) ; }
Distance : 11

87
Tree	if ( divisor == NUMBER_CONSTANT ) { return getSentinelObjectLiteral ( NaN , NaN , divisor , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return getSentinelObjectLiteral ( NaN , NaN , divisor , divisor , divisor ) ; }
Distance : 11

88
Tree	if ( divisor == NUMBER_CONSTANT ) { return indexOf ( NaN , NaN , divisor , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return indexOf ( NaN , NaN , divisor , divisor , divisor ) ; }
Distance : 11

89
Tree	if ( divisor == NUMBER_CONSTANT ) { return varInfo.hasNonLocalOrNonLiteralValue ( NaN , NaN , divisor , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return varInfo.hasNonLocalOrNonLiteralValue ( NaN , NaN , divisor , divisor , divisor ) ; }
Distance : 11

90
Tree	if ( divisor == NUMBER_CONSTANT ) { return createInternalError ( NaN , NaN , divisor , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return createInternalError ( NaN , NaN , divisor , divisor , divisor ) ; }
Distance : 11

91
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ( NaN , NaN , divisor , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ( NaN , NaN , divisor , divisor , divisor ) ; }
Distance : 11

92
Tree	if ( divisor == NUMBER_CONSTANT ) { return getCategoryIndex ( NaN , NaN , divisor , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return getCategoryIndex ( NaN , NaN , divisor , divisor , divisor ) ; }
Distance : 11

93
Tree	if ( divisor == NUMBER_CONSTANT ) { return equalsIgnoreCase ( NaN , NaN , divisor , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return equalsIgnoreCase ( NaN , NaN , divisor , divisor , divisor ) ; }
Distance : 11

94
Tree	if ( divisor == NUMBER_CONSTANT ) { return createCompiler ( NaN , NaN , divisor , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return createCompiler ( NaN , NaN , divisor , divisor , divisor ) ; }
Distance : 11

95
Tree	if ( divisor == NUMBER_CONSTANT ) { return addOldTypeCheckerPasses ( NaN , NaN , divisor , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return addOldTypeCheckerPasses ( NaN , NaN , divisor , divisor , divisor ) ; }
Distance : 11

96
Tree	if ( divisor == NUMBER_CONSTANT ) { return typei ( NaN , NaN , divisor , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return typei ( NaN , NaN , divisor , divisor , divisor ) ; }
Distance : 11

97
Tree	if ( divisor == NUMBER_CONSTANT ) { return isNameReferenced ( NaN , NaN , divisor , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isNameReferenced ( NaN , NaN , divisor , divisor , divisor ) ; }
Distance : 11

98
Tree	if ( divisor == NUMBER_CONSTANT ) { return stubValue ( NaN , NaN , divisor , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return stubValue ( NaN , NaN , divisor , divisor , divisor ) ; }
Distance : 11

99
Tree	if ( divisor == NUMBER_CONSTANT ) { return FALSE ( NaN , NaN , divisor , divisor , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return FALSE ( NaN , NaN , divisor , divisor , divisor ) ; }
Distance : 11

========================================================================


========================================================================
Example Number: 69
Parent Code is: 
if ( divisor.isZero ) { return isZero ? NaN : INF ; }
-------------------------------------------------------------------------------
Child code is: 
if ( divisor.isZero ) { return NaN ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (40{val=divisor.isZero}) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (16 (800{val=isZero}) (233{val=?}) (800{val=NaN}) (226{val=:}) (800{val=INF})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (40{val=divisor.isZero}) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=NaN}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/46/parent/src_main_java_org_apache_commons_math_complex_Complex.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	if ( this . radiusGridlinesVisible () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . radiusGridlinesVisible () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

1
Tree	if ( this . getTracerMode () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . getTracerMode () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

2
Tree	if ( this . isTopLevel () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . isTopLevel () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

3
Tree	if ( this . getStringBuffer () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . getStringBuffer () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

4
Tree	if ( this . isSame () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . isSame () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

5
Tree	if ( this . subtypes () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . subtypes () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

6
Tree	if ( this . isUnknownObject () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . isUnknownObject () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

7
Tree	if ( this . verticalTickLabels () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . verticalTickLabels () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

8
Tree	if ( this . labelLinkMargin () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . labelLinkMargin () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

9
Tree	if ( this . resetBuilder () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . resetBuilder () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

10
Tree	if ( this . astValidationEnabled () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . astValidationEnabled () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

11
Tree	if ( this . isAliasDefinition () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . isAliasDefinition () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

12
Tree	if ( this . isTypeCompatible () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . isTypeCompatible () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

13
Tree	if ( this . containsAny () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . containsAny () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

14
Tree	if ( this . bg () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . bg () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

15
Tree	if ( this . nextTime () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . nextTime () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

16
Tree	if ( this . isPrimitiveWrapper () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . isPrimitiveWrapper () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

17
Tree	if ( this . maximumCategoryLabelLines () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . maximumCategoryLabelLines () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

18
Tree	if ( this . changed () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . changed () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

19
Tree	if ( this . getRhs () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . getRhs () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

20
Tree	if ( this . q0 () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . q0 () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

21
Tree	if ( this . rangeCrosshairLockedOnData () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . rangeCrosshairLockedOnData () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

22
Tree	if ( this . zeroInteractionsWanted () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . zeroInteractionsWanted () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

23
Tree	if ( this . primitiveType () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . primitiveType () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

24
Tree	if ( this . defaultOutlinePaint () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . defaultOutlinePaint () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

25
Tree	if ( this . DEFAULT_INITIAL_CAPACITY () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . DEFAULT_INITIAL_CAPACITY () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

26
Tree	if ( this . paletteName () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . paletteName () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

27
Tree	if ( this . options.removeUnusedLocalVars () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . options.removeUnusedLocalVars () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

28
Tree	if ( this . showBase () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . showBase () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

29
Tree	if ( this . runMode () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . runMode () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

30
Tree	if ( this . domainCrosshairVisible () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . domainCrosshairVisible () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

31
Tree	if ( this . radiusGridlinesVisible () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . radiusGridlinesVisible () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 8

32
Tree	if ( this . incrementalCheckMode () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . incrementalCheckMode () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

33
Tree	if ( this . getTracerMode () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . getTracerMode () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 8

34
Tree	if ( this . shouldExtract () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . shouldExtract () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

35
Tree	if ( this . isZero . equals () ) { return null ; }
Code	if ( this . isZero . equals () ) { return null ; }
Distance : 7

36
Tree	if ( this . toMaybeUnionType () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . toMaybeUnionType () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

37
Tree	if ( this . setUpRan () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . setUpRan () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

38
Tree	if ( this . unescape () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . unescape () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

39
Tree	if ( this . isTopLevel () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . isTopLevel () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 8

40
Tree	if ( this . variablesToInclude () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . variablesToInclude () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

41
Tree	if ( this . getStringBuffer () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . getStringBuffer () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 8

42
Tree	if ( this . isSame () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . isSame () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 8

43
Tree	if ( this . thermometerStroke () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . thermometerStroke () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

44
Tree	if ( this . isEquivalentWithSideEffectsToShallow () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . isEquivalentWithSideEffectsToShallow () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

45
Tree	if ( this . domainGridlinePosition () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . domainGridlinePosition () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

46
Tree	if ( this . injectee () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . injectee () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

47
Tree	if ( this . smallFont () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . smallFont () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

48
Tree	if ( this . addPeriod () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . addPeriod () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

49
Tree	if ( this . subtypes () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . subtypes () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 8

50
Tree	if ( this . isNot () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . isNot () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

51
Tree	if ( this . isZero . equals () ) { return false ; }
Code	if ( this . isZero . equals () ) { return false ; }
Distance : 7

52
Tree	if ( this . iterations () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . iterations () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

53
Tree	if ( this . isUnknownObject () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . isUnknownObject () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 8

54
Tree	if ( this . gridStrokeSample () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . gridStrokeSample () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

55
Tree	if ( this . isAdd () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . isAdd () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

56
Tree	if ( this . centerTextFormatter () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . centerTextFormatter () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

57
Tree	if ( this . nextCauchy () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . nextCauchy () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

58
Tree	if ( this . invalidUseOfMatchers () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . invalidUseOfMatchers () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

59
Tree	if ( this . isAlpha () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . isAlpha () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

60
Tree	if ( this . rewriteShortObjectKey () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . rewriteShortObjectKey () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

61
Tree	if ( this . seriesShapesFilled () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . seriesShapesFilled () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

62
Tree	if ( this . legendLabelURLGenerator () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . legendLabelURLGenerator () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

63
Tree	if ( this . multistageSerializeAndDeserialize () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . multistageSerializeAndDeserialize () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

64
Tree	if ( this . numberOfVariables () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . numberOfVariables () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

65
Tree	if ( this . matchesPrototype () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . matchesPrototype () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

66
Tree	if ( this . isNotEqualTo () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . isNotEqualTo () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

67
Tree	if ( this . sectionOutlineStrokeMap () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . sectionOutlineStrokeMap () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

68
Tree	if ( this . standardTickUnits () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . standardTickUnits () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

69
Tree	if ( this . addEs2018Passes () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . addEs2018Passes () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

70
Tree	if ( this . regionMatches () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . regionMatches () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

71
Tree	if ( this . getTotalMillis () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . getTotalMillis () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

72
Tree	if ( this . stubInfo () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . stubInfo () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

73
Tree	if ( this . isChromePassEnabled () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . isChromePassEnabled () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

74
Tree	if ( this . verticalTickLabels () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . verticalTickLabels () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 8

75
Tree	if ( this . ancestors.length () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . ancestors.length () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

76
Tree	if ( this . isSpecializedOnlyWithUnknown () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . isSpecializedOnlyWithUnknown () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

77
Tree	if ( this . labelType () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . labelType () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

78
Tree	if ( this . gridBandsVisible () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . gridBandsVisible () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

79
Tree	if ( this . flatten () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . flatten () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

80
Tree	if ( this . showValueLines () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . showValueLines () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

81
Tree	if ( this . _boundaries () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . _boundaries () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

82
Tree	if ( this . isSpy () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . isSpy () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

83
Tree	if ( this . valueClass () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . valueClass () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

84
Tree	if ( this . labelLinkMargin () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . labelLinkMargin () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 8

85
Tree	if ( this . aClass () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . aClass () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

86
Tree	if ( this . angleGridlineStroke () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . angleGridlineStroke () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

87
Tree	if ( this . CLEANER () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . CLEANER () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

88
Tree	if ( this . setValidityCheck () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . setValidityCheck () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

89
Tree	if ( this . resetBuilder () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . resetBuilder () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 8

90
Tree	if ( this . Functions () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . Functions () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

91
Tree	if ( this . isDestructuringDeclaration () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . isDestructuringDeclaration () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

92
Tree	if ( this . astValidationEnabled () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . astValidationEnabled () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 8

93
Tree	if ( this . shouldRunRemoveUnusedCode () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . shouldRunRemoveUnusedCode () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

94
Tree	if ( this . isNoOp () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . isNoOp () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

95
Tree	if ( this . definitionNodes () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . definitionNodes () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

96
Tree	if ( this . defaultStroke () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . defaultStroke () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

97
Tree	if ( this . canRecoverFromFailure () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . canRecoverFromFailure () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

98
Tree	if ( this . itemLabelPaint () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . itemLabelPaint () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

99
Tree	if ( divisor.isZero . isAliasDefinition ( isZero ) ) { return false ; }
Code	if ( divisor.isZero . isAliasDefinition ( isZero ) ) { return false ; }
Distance : 6

========================================================================


========================================================================
Example Number: 70
Parent Code is: 
{ super ( populationLimit ) ; this . elitismRate = elitismRate ; }
-------------------------------------------------------------------------------
Child code is: 
{ super ( populationLimit ) ; setElitismRate ( elitismRate ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=populationLimit}) (215{val=)}) (227{val=;})) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=elitismRate})) (204{val==}) (800{val=elitismRate})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=populationLimit}) (215{val=)}) (227{val=;})) (21 (32 (802{val=setElitismRate}) (214{val=(}) (800{val=elitismRate}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/35/parent/src_main_java_org_apache_commons_math3_genetics_ElitisticListPopulation.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ this ( populationLimit , false ) ; } <>
Code	{ this ( populationLimit , false ) ; } <>
Distance : 7

1
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; setParamsAccuracy }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; setParamsAccuracy }
Distance : 10

2
Tree	{ super ( populationLimit ) ; this . elitismRate = new EarlyEs6ToEs3Converter [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new EarlyEs6ToEs3Converter [] { elitismRate } ; }
Distance : 9

3
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; -- }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; -- }
Distance : 10

4
Tree	{ super ( populationLimit ) ; this . elitismRate = new ClosureBundler [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ClosureBundler [ NUMBER_CONSTANT ] ; }
Distance : 8

5
Tree	{ super ( populationLimit ) ; this . elitismRate = new StatementFusion [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new StatementFusion [] { elitismRate } ; }
Distance : 9

6
Tree	{ super ( populationLimit ) ; this . elitismRate = new EndsWith [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new EndsWith [ NUMBER_CONSTANT ] ; }
Distance : 8

7
Tree	{ super ( populationLimit ) ; this . elitismRate = new Sigmoid [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new Sigmoid [ NUMBER_CONSTANT ] ; }
Distance : 8

8
Tree	{ super ( populationLimit ) ; this . elitismRate = new TDistributionImpl [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new TDistributionImpl [ NUMBER_CONSTANT ] ; }
Distance : 8

9
Tree	{ super ( populationLimit ) ; this . elitismRate = new ConstructorInjection [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ConstructorInjection [ NUMBER_CONSTANT ] ; }
Distance : 8

10
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; setLanguage }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; setLanguage }
Distance : 10

11
Tree	{ super ( populationLimit ) ; this . elitismRate = new CallSiteOptimizer [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new CallSiteOptimizer [ NUMBER_CONSTANT ] ; }
Distance : 8

12
Tree	{ super ( populationLimit ) ; this . elitismRate = new MapStrLookup [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new MapStrLookup [ NUMBER_CONSTANT ] ; }
Distance : 8

13
Tree	{ super ( populationLimit ) ; this . elitismRate = new Sin [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new Sin [] { elitismRate } ; }
Distance : 9

14
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; testTypes }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; testTypes }
Distance : 10

15
Tree	{ super ( populationLimit ) ; this . elitismRate = new ConsecutiveStubbing [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ConsecutiveStubbing [] { elitismRate } ; }
Distance : 9

16
Tree	{ super ( populationLimit ) ; this . elitismRate = new TransformAMDModulesCallback [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new TransformAMDModulesCallback [ NUMBER_CONSTANT ] ; }
Distance : 8

17
Tree	{ super ( populationLimit ) ; this . elitismRate = new IgnoreCiSkip [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new IgnoreCiSkip [ NUMBER_CONSTANT ] ; }
Distance : 8

18
Tree	{ super ( populationLimit ) ; this . elitismRate = new GeneratorFunctionsTranspiler [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new GeneratorFunctionsTranspiler [] { elitismRate } ; }
Distance : 9

19
Tree	{ super ( populationLimit ) ; this . elitismRate = new BrentSolver [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new BrentSolver [ NUMBER_CONSTANT ] ; }
Distance : 8

20
Tree	{ super ( populationLimit ) ; this . elitismRate = new AxisChangeEvent [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new AxisChangeEvent [ NUMBER_CONSTANT ] ; }
Distance : 8

21
Tree	{ super ( populationLimit ) ; this . elitismRate = new GeneralPath [] CHAR_CONS ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new GeneralPath [] CHAR_CONS ; super }
Distance : 8

22
Tree	{ super ( populationLimit ) ; this . elitismRate = new ConsecutiveStubbing [] [] ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new ConsecutiveStubbing [] [] ; super }
Distance : 8

23
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; initializeRegistry }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; initializeRegistry }
Distance : 10

24
Tree	{ super ( populationLimit ) ; this . elitismRate = new MockitoLoggerImpl [] [] ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new MockitoLoggerImpl [] [] ; super }
Distance : 8

25
Tree	{ super ( populationLimit ) ; this . elitismRate = new StatArray [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new StatArray [] { elitismRate } ; }
Distance : 9

26
Tree	{ super ( populationLimit ) ; this . elitismRate = new Compiler [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new Compiler [] { elitismRate } ; }
Distance : 9

27
Tree	{ super ( populationLimit ) ; this . elitismRate = new DefaultVersionTool [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new DefaultVersionTool [] { elitismRate } ; }
Distance : 9

28
Tree	{ super ( populationLimit ) ; this . elitismRate = new MarsagliaLogNormalSampler [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new MarsagliaLogNormalSampler [] { elitismRate } ; }
Distance : 9

29
Tree	{ super(); this . populationLimit = this ( populationLimit ) ; validateChildCount }
Code	{ super(); this . populationLimit = this ( populationLimit ) ; validateChildCount }
Distance : 8

30
Tree	{ default: this . populationLimit = elitismRate ; this . elitismRate = new long [] { populationLimit } ; }
Code	{ default: this . populationLimit = elitismRate ; this . elitismRate = new long [] { populationLimit } ; }
Distance : 14

31
Tree	{ super ( populationLimit ) ; this . elitismRate = new LinkedHashSet [] extends ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new LinkedHashSet [] extends ; super }
Distance : 8

32
Tree	{ super ( populationLimit ) ; this . elitismRate = new ArrayDeque [] CHAR_CONS ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new ArrayDeque [] CHAR_CONS ; super }
Distance : 8

33
Tree	{ super ( populationLimit ) ; this . elitismRate = new MonotoneChain [] {} ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new MonotoneChain [] {} ; super }
Distance : 8

34
Tree	{ super ( populationLimit ) ; this . elitismRate = new PoissonDistributionImpl [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new PoissonDistributionImpl [ NUMBER_CONSTANT ] ; }
Distance : 8

35
Tree	{ super ( populationLimit , elitismRate ) ; } parent
Code	{ super ( populationLimit , elitismRate ) ; } parent
Distance : 5

36
Tree	{ super ( populationLimit , elitismRate ) ; } createIllegalArgumentException
Code	{ super ( populationLimit , elitismRate ) ; } createIllegalArgumentException
Distance : 5

37
Tree	{ super ( populationLimit , elitismRate ) ; } serialised
Code	{ super ( populationLimit , elitismRate ) ; } serialised
Distance : 5

38
Tree	{ super ( populationLimit , elitismRate ) ; } getInstance
Code	{ super ( populationLimit , elitismRate ) ; } getInstance
Distance : 5

39
Tree	{ super ( populationLimit , elitismRate ) ; } <>
Code	{ super ( populationLimit , elitismRate ) ; } <>
Distance : 5

40
Tree	{ super ( populationLimit ) ; this . elitismRate = new CachingTranspiler [] [] ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new CachingTranspiler [] [] ; super }
Distance : 8

41
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; process }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; process }
Distance : 10

42
Tree	{ super ( populationLimit ) ; this . elitismRate = new Coordinates3D [] <> ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new Coordinates3D [] <> ; super }
Distance : 8

43
Tree	{ super ( populationLimit ) ; this . elitismRate = new Localized [] <> ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new Localized [] <> ; super }
Distance : 8

44
Tree	{ super ( populationLimit ) ; this . elitismRate = new GeneralPath [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new GeneralPath [] { elitismRate } ; }
Distance : 9

45
Tree	{ super ( populationLimit ) ; this . elitismRate = new InitialGuess [] {} ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new InitialGuess [] {} ; super }
Distance : 8

46
Tree	{ super ( populationLimit ) ; this . elitismRate = new Median [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new Median [ NUMBER_CONSTANT ] ; }
Distance : 8

47
Tree	{ super ( populationLimit ) ; this . elitismRate = new DefineCallbackReturnCallback [] {} ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new DefineCallbackReturnCallback [] {} ; super }
Distance : 8

48
Tree	{ super ( populationLimit ) ; this . elitismRate = new Es6SyntacticScopeCreator [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new Es6SyntacticScopeCreator [ NUMBER_CONSTANT ] ; }
Distance : 8

49
Tree	{ super ( populationLimit ) ; this . elitismRate = new PeepholeCollectPropertyAssignments [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new PeepholeCollectPropertyAssignments [ NUMBER_CONSTANT ] ; }
Distance : 8

50
Tree	{ super ( populationLimit ) ; this . elitismRate = new java.util.ArrayList [] {} ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new java.util.ArrayList [] {} ; super }
Distance : 8

51
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; char }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; char }
Distance : 10

52
Tree	{ super ( populationLimit ) ; this . elitismRate = new Coordinates3D [] [] ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new Coordinates3D [] [] ; super }
Distance : 8

53
Tree	{ super ( populationLimit ) ; this . elitismRate = new ArrayDeque [] {} ; if }
Code	{ super ( populationLimit ) ; this . elitismRate = new ArrayDeque [] {} ; if }
Distance : 8

54
Tree	{ super ( populationLimit ) ; this . elitismRate = new HashSet [] <> ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new HashSet [] <> ; super }
Distance : 8

55
Tree	{ super ( populationLimit ) ; this . elitismRate = new Localized [] [] ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new Localized [] [] ; super }
Distance : 8

56
Tree	{ super ( populationLimit ) ; this . elitismRate = new IdentityPreconditioner [] <> ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new IdentityPreconditioner [] <> ; super }
Distance : 8

57
Tree	{ super ( populationLimit ) ; this . elitismRate = new GeneratorFunctionsTranspiler [] <> ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new GeneratorFunctionsTranspiler [] <> ; super }
Distance : 8

58
Tree	{ super(); this . populationLimit = this ( populationLimit ) ; Matcher }
Code	{ super(); this . populationLimit = this ( populationLimit ) ; Matcher }
Distance : 8

59
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; disableTypeCheck }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; disableTypeCheck }
Distance : 10

60
Tree	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] &= ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] &= ; super }
Distance : 8

61
Tree	{ super ( populationLimit ) ; this . elitismRate = new StreamDataAdapter [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new StreamDataAdapter [ NUMBER_CONSTANT ] ; }
Distance : 8

62
Tree	{ super ( populationLimit ) ; this . elitismRate = new RombergIntegrator [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new RombergIntegrator [ NUMBER_CONSTANT ] ; }
Distance : 8

63
Tree	{ super ( populationLimit ) ; this . elitismRate = new MockitoLoggerImpl [] {} ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new MockitoLoggerImpl [] {} ; super }
Distance : 8

64
Tree	{ super ( populationLimit ) ; this . elitismRate = new VerifyingRecorder [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new VerifyingRecorder [ NUMBER_CONSTANT ] ; }
Distance : 8

65
Tree	{ super ( populationLimit ) ; this . elitismRate = new Power [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new Power [ NUMBER_CONSTANT ] ; }
Distance : 8

66
Tree	{ super ( populationLimit ) ; this . elitismRate = new Localized [] extends ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new Localized [] extends ; super }
Distance : 8

67
Tree	{ super ( populationLimit , elitismRate ) ; } testSame
Code	{ super ( populationLimit , elitismRate ) ; } testSame
Distance : 5

68
Tree	{ super ( populationLimit , elitismRate ) ; } FastMath
Code	{ super ( populationLimit , elitismRate ) ; } FastMath
Distance : 5

69
Tree	{ super ( populationLimit , elitismRate ) ; } reportCodeChange
Code	{ super ( populationLimit , elitismRate ) ; } reportCodeChange
Distance : 5

70
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } <
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } <
Distance : 5

71
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } if
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } if
Distance : 5

72
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } mode
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } mode
Distance : 5

73
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } -
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } -
Distance : 5

74
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } Preconditions
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } Preconditions
Distance : 5

75
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } [
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } [
Distance : 5

76
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } paint
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } paint
Distance : 5

77
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } *
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } *
Distance : 5

78
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } type
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } type
Distance : 5

79
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } class
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } class
Distance : 5

80
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } Object
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } Object
Distance : 5

81
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } mock
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } mock
Distance : 5

82
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } Override
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } Override
Distance : 5

83
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } f
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } f
Distance : 5

84
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } this
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } this
Distance : 5

85
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } ParamChecks
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } ParamChecks
Distance : 5

86
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } <>
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } <>
Distance : 5

87
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } m
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } m
Distance : 5

88
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } boolean
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } boolean
Distance : 5

89
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } (
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } (
Distance : 5

90
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } :
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } :
Distance : 5

91
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } checkState
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } checkState
Distance : 5

92
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } double
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } double
Distance : 5

93
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } super
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } super
Distance : 5

94
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } !=
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } !=
Distance : 5

95
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } compiler
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } compiler
Distance : 5

96
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } String
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } String
Distance : 5

97
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } e
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } e
Distance : 5

98
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } n
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } n
Distance : 5

99
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } throw
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } throw
Distance : 5

========================================================================


========================================================================
Example Number: 71
Parent Code is: 
{ super ( chromosomes , populationLimit ) ; this . elitismRate = elitismRate ; }
-------------------------------------------------------------------------------
Child code is: 
{ super ( chromosomes , populationLimit ) ; setElitismRate ( elitismRate ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=chromosomes}) (234{val=,}) (800{val=populationLimit}) (215{val=)}) (227{val=;})) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=elitismRate})) (204{val==}) (800{val=elitismRate})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=chromosomes}) (234{val=,}) (800{val=populationLimit}) (215{val=)}) (227{val=;})) (21 (32 (802{val=setElitismRate}) (214{val=(}) (800{val=elitismRate}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/35/parent/src_main_java_org_apache_commons_math3_genetics_ElitisticListPopulation.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ super ( populationLimit , populationLimit ) ; this . elitismRate = new int [] { elitismRate } ; }
Code	{ super ( populationLimit , populationLimit ) ; this . elitismRate = new int [] { elitismRate } ; }
Distance : 10

1
Tree	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 12

2
Tree	{ super ( chromosomes , chromosomes ) ; this . elitismRate = new int [] { chromosomes } ; }
Code	{ super ( chromosomes , chromosomes ) ; this . elitismRate = new int [] { chromosomes } ; }
Distance : 10

3
Tree	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new short [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new short [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 12

4
Tree	{ super ( chromosomes , chromosomes ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , chromosomes ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 16

5
Tree	{ super ( chromosomes ) ; this . chromosomes = new short [] { chromosomes } ; }
Code	{ super ( chromosomes ) ; this . chromosomes = new short [] { chromosomes } ; }
Distance : 12

6
Tree	{ super ( chromosomes ) ; this . chromosomes = new byte [] { chromosomes } ; }
Code	{ super ( chromosomes ) ; this . chromosomes = new byte [] { chromosomes } ; }
Distance : 12

7
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new byte [] { populationLimit } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new byte [] { populationLimit } ; }
Distance : 9

8
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new short [] { populationLimit } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new short [] { populationLimit } ; }
Distance : 9

9
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new float [] { chromosomes } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new float [] { chromosomes } ; }
Distance : 10

10
Tree	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new boolean [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new boolean [] { chromosomes } ; }
Distance : 10

11
Tree	{ super ( elitismRate , populationLimit ) ; this . elitismRate = new int [] { chromosomes } ; }
Code	{ super ( elitismRate , populationLimit ) ; this . elitismRate = new int [] { chromosomes } ; }
Distance : 10

12
Tree	{ super ( elitismRate , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( elitismRate , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 16

13
Tree	{ super ( chromosomes , populationLimit ) ; this . populationLimit = new byte [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . populationLimit = new byte [] { chromosomes } ; }
Distance : 10

14
Tree	{ super ( chromosomes , populationLimit ) ; this . populationLimit = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . populationLimit = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 12

15
Tree	{ super ( chromosomes , populationLimit ) ; this . populationLimit = new short [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . populationLimit = new short [] { chromosomes } ; }
Distance : 10

16
Tree	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new float [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new float [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 12

17
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new float [] { populationLimit } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new float [] { populationLimit } ; }
Distance : 9

18
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new short [] { chromosomes } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new short [] { chromosomes } ; }
Distance : 10

19
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 12

20
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new byte [] { chromosomes } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new byte [] { chromosomes } ; }
Distance : 10

21
Tree	{ super ( populationLimit , populationLimit ) ; this . elitismRate = elitismRate ; }
Code	{ super ( populationLimit , populationLimit ) ; this . elitismRate = elitismRate ; }
Distance : 5

22
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = elitismRate ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = elitismRate ; }
Distance : 5

23
Tree	{ super ( chromosomes ) ; this . elitismRate = new int [] { populationLimit } ; }
Code	{ super ( chromosomes ) ; this . elitismRate = new int [] { populationLimit } ; }
Distance : 11

24
Tree	{ super ( chromosomes ) ; this . elitismRate = new double [] { elitismRate } ; }
Code	{ super ( chromosomes ) ; this . elitismRate = new double [] { elitismRate } ; }
Distance : 11

25
Tree	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new long [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new long [] { chromosomes } ; }
Distance : 10

26
Tree	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 16

27
Tree	{ this ( chromosomes , ( populationLimit ) default: ) ; }
Code	{ this ( chromosomes , ( populationLimit ) default: ) ; }
Distance : 6

28
Tree	{ super ( chromosomes , chromosomes ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , chromosomes ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 12

29
Tree	{ super ( populationLimit , populationLimit ) ; this . elitismRate = new int [] { chromosomes } ; }
Code	{ super ( populationLimit , populationLimit ) ; this . elitismRate = new int [] { chromosomes } ; }
Distance : 10

30
Tree	{ super ( chromosomes ) ; this . chromosomes = new float [] { chromosomes } ; }
Code	{ super ( chromosomes ) ; this . chromosomes = new float [] { chromosomes } ; }
Distance : 12

31
Tree	{ super ( populationLimit , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 16

32
Tree	{ super ( elitismRate , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( elitismRate , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 12

33
Tree	{ super ( chromosomes , populationLimit ) ; this . populationLimit = elitismRate ; }
Code	{ super ( chromosomes , populationLimit ) ; this . populationLimit = elitismRate ; }
Distance : 5

34
Tree	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new double [] { elitismRate } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new double [] { elitismRate } ; }
Distance : 9

35
Tree	{ super ( chromosomes , populationLimit , chromosomes ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit , chromosomes ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 11

36
Tree	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new void [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new void [] { chromosomes } ; }
Distance : 10

37
Tree	{ super ( elitismRate ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( elitismRate ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 12

38
Tree	{ this ( populationLimit , populationLimit , true ) ; }
Code	{ this ( populationLimit , populationLimit , true ) ; }
Distance : 7

39
Tree	{ this . chromosomes = populationLimit ; this . elitismRate = chromosomes ; }
Code	{ this . chromosomes = populationLimit ; this . elitismRate = chromosomes ; }
Distance : 8

40
Tree	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new char [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new char [] { chromosomes } ; }
Distance : 10

41
Tree	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new int [] { elitismRate } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new int [] { elitismRate } ; }
Distance : 9

42
Tree	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new boolean [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new boolean [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 16

43
Tree	{ super ( chromosomes , chromosomes ) ; this . elitismRate = new short [] { chromosomes } ; }
Code	{ super ( chromosomes , chromosomes ) ; this . elitismRate = new short [] { chromosomes } ; }
Distance : 10

44
Tree	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new boolean [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new boolean [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 12

45
Tree	{ this . populationLimit = populationLimit ; this . elitismRate = populationLimit ; }
Code	{ this . populationLimit = populationLimit ; this . elitismRate = populationLimit ; }
Distance : 9

46
Tree	{ super ( chromosomes , chromosomes ) ; this . chromosomes = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , chromosomes ) ; this . chromosomes = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 17

47
Tree	{ this ( elitismRate , chromosomes , true ) ; }
Code	{ this ( elitismRate , chromosomes , true ) ; }
Distance : 8

48
Tree	{ super ( elitismRate , elitismRate ) ; this . elitismRate = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( elitismRate , elitismRate ) ; this . elitismRate = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 17

49
Tree	{ super ( chromosomes , populationLimit , elitismRate ) ; this . chromosomes = new void [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit , elitismRate ) ; this . chromosomes = new void [] { chromosomes } ; }
Distance : 12

50
Tree	{ this ( populationLimit , ( elitismRate ) super(); ) ; }
Code	{ this ( populationLimit , ( elitismRate ) super(); ) ; }
Distance : 8

51
Tree	{ super ( populationLimit , populationLimit , chromosomes ) ; this . elitismRate = new int [] { chromosomes } ; }
Code	{ super ( populationLimit , populationLimit , chromosomes ) ; this . elitismRate = new int [] { chromosomes } ; }
Distance : 12

52
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new float [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new float [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 12

53
Tree	{ super ( elitismRate , populationLimit , populationLimit ) ; this . elitismRate = new int [] { chromosomes } ; }
Code	{ super ( elitismRate , populationLimit , populationLimit ) ; this . elitismRate = new int [] { chromosomes } ; }
Distance : 12

54
Tree	{ super ( chromosomes , populationLimit , chromosomes ) ; this . chromosomes = new long [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit , chromosomes ) ; this . chromosomes = new long [] { chromosomes } ; }
Distance : 12

55
Tree	{ super ( chromosomes , chromosomes , populationLimit ) ; this . elitismRate = new int [] { chromosomes } ; }
Code	{ super ( chromosomes , chromosomes , populationLimit ) ; this . elitismRate = new int [] { chromosomes } ; }
Distance : 11

56
Tree	{ super ( chromosomes , populationLimit , elitismRate ) ; this . chromosomes = new char [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit , elitismRate ) ; this . chromosomes = new char [] { chromosomes } ; }
Distance : 12

57
Tree	{ super ( chromosomes , elitismRate ) ; this . chromosomes = new void [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . chromosomes = new void [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 17

58
Tree	{ super ( chromosomes ) ; this . chromosomes = new byte [] { elitismRate } ; }
Code	{ super ( chromosomes ) ; this . chromosomes = new byte [] { elitismRate } ; }
Distance : 11

59
Tree	{ super ( populationLimit ) ; this . chromosomes = new char [] { chromosomes } ; }
Code	{ super ( populationLimit ) ; this . chromosomes = new char [] { chromosomes } ; }
Distance : 12

60
Tree	{ super ( chromosomes , populationLimit , chromosomes ) ; this . chromosomes = new float [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit , chromosomes ) ; this . chromosomes = new float [] { chromosomes } ; }
Distance : 12

61
Tree	{ super ( chromosomes , populationLimit , chromosomes ) ; this . chromosomes = new short [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit , chromosomes ) ; this . chromosomes = new short [] { chromosomes } ; }
Distance : 12

62
Tree	{ super ( elitismRate , chromosomes ) ; this . elitismRate = elitismRate ; }
Code	{ super ( elitismRate , chromosomes ) ; this . elitismRate = elitismRate ; }
Distance : 6

63
Tree	{ super ( chromosomes , populationLimit ) ; this . populationLimit = new int [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . populationLimit = new int [] { chromosomes } ; }
Distance : 10

64
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new void [] { elitismRate } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new void [] { elitismRate } ; }
Distance : 9

65
Tree	{ super ( elitismRate , populationLimit ) ; this . elitismRate = new float [] { chromosomes } ; }
Code	{ super ( elitismRate , populationLimit ) ; this . elitismRate = new float [] { chromosomes } ; }
Distance : 10

66
Tree	{ super ( elitismRate , populationLimit ) ; this . elitismRate = new byte [] { chromosomes } ; }
Code	{ super ( elitismRate , populationLimit ) ; this . elitismRate = new byte [] { chromosomes } ; }
Distance : 10

67
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new long [] { elitismRate } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new long [] { elitismRate } ; }
Distance : 9

68
Tree	{ this ( chromosomes , ( elitismRate ) super(); ) ; }
Code	{ this ( chromosomes , ( elitismRate ) super(); ) ; }
Distance : 7

69
Tree	{ super ( elitismRate , populationLimit ) ; this . elitismRate = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( elitismRate , populationLimit ) ; this . elitismRate = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 12

70
Tree	{ super ( chromosomes ) ; this . chromosomes = new void [] { chromosomes } ; }
Code	{ super ( chromosomes ) ; this . chromosomes = new void [] { chromosomes } ; }
Distance : 12

71
Tree	{ super ( chromosomes , populationLimit , chromosomes ) ; this . elitismRate = new int [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit , chromosomes ) ; this . elitismRate = new int [] { chromosomes } ; }
Distance : 11

72
Tree	{ super ( populationLimit , populationLimit ) ; this . elitismRate = new char [] { chromosomes } ; }
Code	{ super ( populationLimit , populationLimit ) ; this . elitismRate = new char [] { chromosomes } ; }
Distance : 10

73
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 12

74
Tree	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new char [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new char [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 16

75
Tree	{ super ( elitismRate , populationLimit ) ; this . elitismRate = new short [] { chromosomes } ; }
Code	{ super ( elitismRate , populationLimit ) ; this . elitismRate = new short [] { chromosomes } ; }
Distance : 10

76
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new short [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new short [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 12

77
Tree	{ this ( chromosomes , ( chromosomes ) super(); ) ; }
Code	{ this ( chromosomes , ( chromosomes ) super(); ) ; }
Distance : 7

78
Tree	{ super ( chromosomes , chromosomes ) ; this . elitismRate = new float [] { chromosomes } ; }
Code	{ super ( chromosomes , chromosomes ) ; this . elitismRate = new float [] { chromosomes } ; }
Distance : 10

79
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new boolean [] { chromosomes } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new boolean [] { chromosomes } ; }
Distance : 10

80
Tree	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new long [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . chromosomes = new long [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 16

81
Tree	{ super ( elitismRate ) ; this . elitismRate = new int [] { chromosomes } ; }
Code	{ super ( elitismRate ) ; this . elitismRate = new int [] { chromosomes } ; }
Distance : 12

82
Tree	{ super ( chromosomes ) ; this . elitismRate = new float [] { populationLimit } ; }
Code	{ super ( chromosomes ) ; this . elitismRate = new float [] { populationLimit } ; }
Distance : 11

83
Tree	{ super ( populationLimit , populationLimit ) ; this . elitismRate = new void [] { chromosomes } ; }
Code	{ super ( populationLimit , populationLimit ) ; this . elitismRate = new void [] { chromosomes } ; }
Distance : 10

84
Tree	{ this ( populationLimit , ( populationLimit ) super(); ) ; }
Code	{ this ( populationLimit , ( populationLimit ) super(); ) ; }
Distance : 7

85
Tree	{ super ( chromosomes , populationLimit , elitismRate ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit , elitismRate ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 11

86
Tree	{ this ( chromosomes , elitismRate , true ) ; }
Code	{ this ( chromosomes , elitismRate , true ) ; }
Distance : 7

87
Tree	{ super ( chromosomes , populationLimit ) ; this . populationLimit = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . populationLimit = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 16

88
Tree	{ this ( chromosomes , false ) ; } !=
Code	{ this ( chromosomes , false ) ; } !=
Distance : 8

89
Tree	{ this ( chromosomes , false ) ; } @
Code	{ this ( chromosomes , false ) ; } @
Distance : 8

90
Tree	{ this ( chromosomes , false ) ; } testSame
Code	{ this ( chromosomes , false ) ; } testSame
Distance : 8

91
Tree	{ this ( chromosomes , false ) ; } Override
Code	{ this ( chromosomes , false ) ; } Override
Distance : 8

92
Tree	{ this ( chromosomes , false ) ; } mock
Code	{ this ( chromosomes , false ) ; } mock
Distance : 8

93
Tree	{ this ( chromosomes , false ) ; } value
Code	{ this ( chromosomes , false ) ; } value
Distance : 8

94
Tree	{ this ( chromosomes , false ) ; } i
Code	{ this ( chromosomes , false ) ; } i
Distance : 8

95
Tree	{ this ( chromosomes , false ) ; } {}
Code	{ this ( chromosomes , false ) ; } {}
Distance : 8

96
Tree	{ this ( chromosomes , false ) ; } :
Code	{ this ( chromosomes , false ) ; } :
Distance : 8

97
Tree	{ this ( chromosomes , false ) ; } MathRuntimeException
Code	{ this ( chromosomes , false ) ; } MathRuntimeException
Distance : 8

98
Tree	{ this ( chromosomes , false ) ; } [
Code	{ this ( chromosomes , false ) ; } [
Distance : 8

99
Tree	{ this ( chromosomes , false ) ; } super
Code	{ this ( chromosomes , false ) ; } super
Distance : 8

========================================================================


========================================================================
Example Number: 72
Parent Code is: 
{ return chromosomes . iterator () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return getChromosomes () . iterator () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (800{val=chromosomes}) (235{val=.}) (802{val=iterator}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=getChromosomes}) (216{val=()})) (235{val=.}) (802{val=iterator}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/34/parent/src_main_java_org_apache_commons_math3_genetics_ListPopulation.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } []
Code	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } []
Distance : 5

1
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } new
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } new
Distance : 10

2
Tree	{ return chromosomes . iterator () () chromosomes . iterator () ; } -
Code	{ return chromosomes . iterator () () chromosomes . iterator () ; } -
Distance : 6

3
Tree	{ return chromosomes . iterator () ; } add
Code	{ return chromosomes . iterator () ; } add
Distance : 3

4
Tree	{ return chromosomes . iterator () ; } name
Code	{ return chromosomes . iterator () ; } name
Distance : 3

5
Tree	{ return chromosomes . iterator () ; } m
Code	{ return chromosomes . iterator () ; } m
Distance : 3

6
Tree	{ return chromosomes . iterator () ; } boolean
Code	{ return chromosomes . iterator () ; } boolean
Distance : 3

7
Tree	{ return chromosomes . iterator () ; } checkArgument
Code	{ return chromosomes . iterator () ; } checkArgument
Distance : 3

8
Tree	{ return chromosomes . iterator () ; } data
Code	{ return chromosomes . iterator () ; } data
Distance : 3

9
Tree	{ return chromosomes . iterator () ; } Args
Code	{ return chromosomes . iterator () ; } Args
Distance : 3

10
Tree	{ return chromosomes . iterator () ; } fireChangeEvent
Code	{ return chromosomes . iterator () ; } fireChangeEvent
Distance : 3

11
Tree	{ return chromosomes . iterator () ; } array
Code	{ return chromosomes . iterator () ; } array
Distance : 3

12
Tree	{ return chromosomes . iterator () ; } <>
Code	{ return chromosomes . iterator () ; } <>
Distance : 3

13
Tree	{ return chromosomes . iterator () ; } try
Code	{ return chromosomes . iterator () ; } try
Distance : 3

14
Tree	{ return chromosomes . iterator () ; } fail
Code	{ return chromosomes . iterator () ; } fail
Distance : 3

15
Tree	{ return chromosomes . iterator () ; } paint
Code	{ return chromosomes . iterator () ; } paint
Distance : 3

16
Tree	{ return chromosomes . iterator () ; } join
Code	{ return chromosomes . iterator () ; } join
Distance : 3

17
Tree	{ return chromosomes . iterator () ; } str
Code	{ return chromosomes . iterator () ; } str
Distance : 3

18
Tree	{ return chromosomes . iterator () ; } LINE_JOINER
Code	{ return chromosomes . iterator () ; } LINE_JOINER
Distance : 3

19
Tree	{ return chromosomes . iterator () ; } testSame
Code	{ return chromosomes . iterator () ; } testSame
Distance : 3

20
Tree	{ return chromosomes . iterator () ; } x
Code	{ return chromosomes . iterator () ; } x
Distance : 3

21
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } return
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } return
Distance : 10

22
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } (
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } (
Distance : 10

23
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } <s>
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } <s>
Distance : 10

24
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } STRING_CONSTANT
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } STRING_CONSTANT
Distance : 10

25
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } NUMBER_CONSTANT
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } NUMBER_CONSTANT
Distance : 10

26
Tree	{ return chromosomes . iterator () ; } List
Code	{ return chromosomes . iterator () ; } List
Distance : 3

27
Tree	{ return chromosomes . iterator () ; } final
Code	{ return chromosomes . iterator () ; } final
Distance : 3

28
Tree	{ return chromosomes . iterator ( chromosomes ) ; } catch
Code	{ return chromosomes . iterator ( chromosomes ) ; } catch
Distance : 6

29
Tree	{ return chromosomes . iterator ( chromosomes ) ; } +
Code	{ return chromosomes . iterator ( chromosomes ) ; } +
Distance : 6

30
Tree	{ return chromosomes . iterator ( chromosomes ) ; } null
Code	{ return chromosomes . iterator ( chromosomes ) ; } null
Distance : 6

31
Tree	{ return chromosomes . iterator ( chromosomes ) ; } String
Code	{ return chromosomes . iterator ( chromosomes ) ; } String
Distance : 6

32
Tree	{ return chromosomes . iterator ( chromosomes ) ; } compiler
Code	{ return chromosomes . iterator ( chromosomes ) ; } compiler
Distance : 6

33
Tree	{ return chromosomes . iterator ( chromosomes ) ; } final
Code	{ return chromosomes . iterator ( chromosomes ) ; } final
Distance : 6

34
Tree	{ return chromosomes . iterator ( chromosomes ) ; } this
Code	{ return chromosomes . iterator ( chromosomes ) ; } this
Distance : 6

35
Tree	{ return chromosomes . iterator ( chromosomes ) ; } NUMBER_CONSTANT
Code	{ return chromosomes . iterator ( chromosomes ) ; } NUMBER_CONSTANT
Distance : 6

36
Tree	{ return chromosomes . iterator ( chromosomes ) ; } return
Code	{ return chromosomes . iterator ( chromosomes ) ; } return
Distance : 6

37
Tree	{ return chromosomes . iterator ( chromosomes ) ; } T
Code	{ return chromosomes . iterator ( chromosomes ) ; } T
Distance : 6

38
Tree	{ return chromosomes . iterator ( chromosomes ) ; } &&
Code	{ return chromosomes . iterator ( chromosomes ) ; } &&
Distance : 6

39
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } {
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } {
Distance : 10

40
Tree	{ return chromosomes . iterator ( chromosomes ) ; } ]
Code	{ return chromosomes . iterator ( chromosomes ) ; } ]
Distance : 6

41
Tree	{ return chromosomes . iterator ( chromosomes ) ; } []
Code	{ return chromosomes . iterator ( chromosomes ) ; } []
Distance : 6

42
Tree	{ return chromosomes . iterator ( chromosomes ) ; } void
Code	{ return chromosomes . iterator ( chromosomes ) ; } void
Distance : 6

43
Tree	{ return chromosomes . iterator ( chromosomes ) ; } ==
Code	{ return chromosomes . iterator ( chromosomes ) ; } ==
Distance : 6

44
Tree	{ return chromosomes . iterator ( chromosomes ) ; } assertEquals
Code	{ return chromosomes . iterator ( chromosomes ) ; } assertEquals
Distance : 6

45
Tree	{ return chromosomes . iterator ( chromosomes ) ; } !
Code	{ return chromosomes . iterator ( chromosomes ) ; } !
Distance : 6

46
Tree	{ return chromosomes . iterator ( chromosomes ) ; } @
Code	{ return chromosomes . iterator ( chromosomes ) ; } @
Distance : 6

47
Tree	{ return chromosomes . iterator ( chromosomes ) ; } test
Code	{ return chromosomes . iterator ( chromosomes ) ; } test
Distance : 6

48
Tree	{ return chromosomes . iterator ( chromosomes ) ; } Override
Code	{ return chromosomes . iterator ( chromosomes ) ; } Override
Distance : 6

49
Tree	{ return chromosomes . iterator ( chromosomes ) ; } mock
Code	{ return chromosomes . iterator ( chromosomes ) ; } mock
Distance : 6

50
Tree	{ return chromosomes . iterator () ; } NUMBER_CONSTANT
Code	{ return chromosomes . iterator () ; } NUMBER_CONSTANT
Distance : 3

51
Tree	{ return chromosomes . iterator () ; } this
Code	{ return chromosomes . iterator () ; } this
Distance : 3

52
Tree	{ return chromosomes . iterator ( chromosomes ) ; } nullNotPermitted
Code	{ return chromosomes . iterator ( chromosomes ) ; } nullNotPermitted
Distance : 6

53
Tree	{ return chromosomes . iterator ( chromosomes ) ; } throw
Code	{ return chromosomes . iterator ( chromosomes ) ; } throw
Distance : 6

54
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } n
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } n
Distance : 10

55
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } String
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } String
Distance : 10

56
Tree	{ return chromosomes . iterator () ; } -
Code	{ return chromosomes . iterator () ; } -
Distance : 3

57
Tree	{ return chromosomes . iterator () ; } class
Code	{ return chromosomes . iterator () ; } class
Distance : 3

58
Tree	{ return chromosomes . iterator () ; } Object
Code	{ return chromosomes . iterator () ; } Object
Distance : 3

59
Tree	{ return chromosomes . iterator () ; } {}
Code	{ return chromosomes . iterator () ; } {}
Distance : 3

60
Tree	{ return chromosomes . iterator () ; } ParamChecks
Code	{ return chromosomes . iterator () ; } ParamChecks
Distance : 3

61
Tree	{ return chromosomes . iterator () ; } createIllegalArgumentException
Code	{ return chromosomes . iterator () ; } createIllegalArgumentException
Distance : 3

62
Tree	{ return chromosomes . iterator () ; } f
Code	{ return chromosomes . iterator () ; } f
Distance : 3

63
Tree	{ return chromosomes . iterator () ; } t
Code	{ return chromosomes . iterator () ; } t
Distance : 3

64
Tree	{ return chromosomes . iterator () ; } field
Code	{ return chromosomes . iterator () ; } field
Distance : 3

65
Tree	{ return chromosomes . iterator () ; } value
Code	{ return chromosomes . iterator () ; } value
Distance : 3

66
Tree	{ return chromosomes . iterator () ; } i
Code	{ return chromosomes . iterator () ; } i
Distance : 3

67
Tree	{ return chromosomes . iterator () ; } throw
Code	{ return chromosomes . iterator () ; } throw
Distance : 3

68
Tree	{ return chromosomes . iterator () ; } catch
Code	{ return chromosomes . iterator () ; } catch
Distance : 3

69
Tree	{ return chromosomes . iterator () ; } +
Code	{ return chromosomes . iterator () ; } +
Distance : 3

70
Tree	{ return chromosomes . iterator () ; } null
Code	{ return chromosomes . iterator () ; } null
Distance : 3

71
Tree	{ return chromosomes . iterator () ; } String
Code	{ return chromosomes . iterator () ; } String
Distance : 3

72
Tree	{ return chromosomes . iterator () ; } Override
Code	{ return chromosomes . iterator () ; } Override
Distance : 3

73
Tree	{ return chromosomes . iterator () ; } test
Code	{ return chromosomes . iterator () ; } test
Distance : 3

74
Tree	{ return chromosomes . iterator () ; } @
Code	{ return chromosomes . iterator () ; } @
Distance : 3

75
Tree	{ return chromosomes . iterator () ; } !
Code	{ return chromosomes . iterator () ; } !
Distance : 3

76
Tree	{ return chromosomes . iterator () ; } IllegalArgumentException
Code	{ return chromosomes . iterator () ; } IllegalArgumentException
Distance : 3

77
Tree	{ return chromosomes . iterator () ; } FastMath
Code	{ return chromosomes . iterator () ; } FastMath
Distance : 3

78
Tree	{ return chromosomes . iterator () ; } assertThat
Code	{ return chromosomes . iterator () ; } assertThat
Distance : 3

79
Tree	{ return chromosomes . iterator () ; } Preconditions
Code	{ return chromosomes . iterator () ; } Preconditions
Distance : 3

80
Tree	{ return chromosomes . iterator () ; } T
Code	{ return chromosomes . iterator () ; } T
Distance : 3

81
Tree	{ return chromosomes . iterator () ; } &&
Code	{ return chromosomes . iterator () ; } &&
Distance : 3

82
Tree	{ return chromosomes . iterator () ; } ]
Code	{ return chromosomes . iterator () ; } ]
Distance : 3

83
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } compiler
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } compiler
Distance : 10

84
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } {
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } {
Distance : 10

85
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } ()
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } ()
Distance : 10

86
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } }
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } }
Distance : 10

87
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } =
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } =
Distance : 10

88
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } if
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } if
Distance : 10

89
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } <
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } <
Distance : 10

90
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } this
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } this
Distance : 10

91
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } final
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } final
Distance : 10

92
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } public
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } public
Distance : 10

93
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } >
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } >
Distance : 10

94
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } e
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } e
Distance : 10

95
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } null
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } null
Distance : 10

96
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } ,
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } ,
Distance : 10

97
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } .
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } .
Distance : 10

98
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } )
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } )
Distance : 10

99
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } ;
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; } ;
Distance : 10

========================================================================


========================================================================
Example Number: 73
Parent Code is: 
if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( Precision . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (32 (800{val=Precision}) (235{val=.}) (802{val=compareTo}) (214{val=(}) (800{val=entry}) (234{val=,}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (800{val=maxUlps}) (215{val=)})) (231{val=>}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=columnsToDrop}) (235{val=.}) (802{val=add}) (214{val=(}) (800{val=i}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (32 (800{val=Precision}) (235{val=.}) (802{val=compareTo}) (214{val=(}) (800{val=entry}) (234{val=,}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (800{val=epsilon}) (215{val=)})) (231{val=>}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=columnsToDrop}) (235{val=.}) (802{val=add}) (214{val=(}) (800{val=i}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/33/parent/src_main_java_org_apache_commons_math3_optimization_linear_SimplexTableau.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	if ( entry . entry ( entry ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( entry . entry ( entry ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 7

1
Tree	if ( entry . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( entry ) ; }
Code	if ( entry . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( entry ) ; }
Distance : 12

2
Tree	if ( Precision . maxUlps ( entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . maxUlps ( entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

3
Tree	if ( maxUlps . add ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( maxUlps . add ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

4
Tree	if ( compareTo ( return; , STRING_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Code	if ( compareTo ( return; , STRING_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Distance : 7

5
Tree	if ( entry . Precision ( i ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . Precision ( i ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 8

6
Tree	if ( compareTo ( super(); , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( compareTo ( super(); , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 7

7
Tree	if ( maxUlps . Precision ( entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( maxUlps . Precision ( entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 7

8
Tree	if ( compareTo ( continue; , STRING_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Code	if ( compareTo ( continue; , STRING_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Distance : 7

9
Tree	if ( i . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { i . add ( i ) ; }
Code	if ( i . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { i . add ( i ) ; }
Distance : 11

10
Tree	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { entry . add ( columnsToDrop ) ; }
Code	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { entry . add ( columnsToDrop ) ; }
Distance : 8

11
Tree	if ( Precision . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( maxUlps ) ; }
Code	if ( Precision . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( maxUlps ) ; }
Distance : 6

12
Tree	if ( maxUlps . add ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( maxUlps . add ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 11

13
Tree	if ( maxUlps . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( entry ) ; }
Code	if ( maxUlps . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( entry ) ; }
Distance : 7

14
Tree	if ( Precision . entry ( maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . entry ( maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

15
Tree	if ( entry . i ( entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . i ( entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 7

16
Tree	if ( entry . columnsToDrop ( entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . columnsToDrop ( entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 7

17
Tree	if ( epsilon . Precision ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( epsilon . Precision ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

18
Tree	if ( compareTo ( return; , STRING_CONSTANT ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( compareTo ( return; , STRING_CONSTANT ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 7

19
Tree	if ( epsilon . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( epsilon . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 6

20
Tree	if ( maxUlps . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( maxUlps ) ; }
Code	if ( maxUlps . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( maxUlps ) ; }
Distance : 12

21
Tree	if ( add ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( columnsToDrop ) ; }
Code	if ( add ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( columnsToDrop ) ; }
Distance : 8

22
Tree	if ( epsilon . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( epsilon . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 11

23
Tree	if ( entry . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( maxUlps ) ; }
Code	if ( entry . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( maxUlps ) ; }
Distance : 12

24
Tree	if ( entry . epsilon ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . epsilon ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

25
Tree	if ( Precision . entry ( entry ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Code	if ( Precision . entry ( entry ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Distance : 6

26
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . compareTo ( entry ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . compareTo ( entry ) ; }
Distance : 8

27
Tree	if ( entry . add ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( entry . add ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 12

28
Tree	if ( compareTo ( continue; , STRING_CONSTANT ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( compareTo ( continue; , STRING_CONSTANT ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 7

29
Tree	if ( entry . compareTo ( null , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( i ) ; }
Code	if ( entry . compareTo ( null , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( i ) ; }
Distance : 6

30
Tree	if ( entry . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( maxUlps ) ; }
Code	if ( entry . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( maxUlps ) ; }
Distance : 7

31
Tree	if ( entry . compareTo ( entry / columnsToDrop , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry / columnsToDrop , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

32
Tree	if ( i . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( i . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 5

33
Tree	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 7

34
Tree	if ( Precision . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( columnsToDrop ) ; }
Code	if ( Precision . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( columnsToDrop ) ; }
Distance : 5

35
Tree	if ( entry . compareTo ( entry , entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( entry , entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 4

36
Tree	if ( maxUlps . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( i ) ; }
Code	if ( maxUlps . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( i ) ; }
Distance : 11

37
Tree	if ( entry . compareTo ( i , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( i , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

38
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Distance : 5

39
Tree	if ( Precision . compareTo ( entry , columnsToDrop , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , columnsToDrop , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 3

40
Tree	if ( entry . compareTo ( entry / maxUlps , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry / maxUlps , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

41
Tree	if ( maxUlps . compareTo ( entry , epsilon , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( maxUlps . compareTo ( entry , epsilon , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

42
Tree	if ( Precision . compareTo ( entry / i , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( entry / i , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 4

43
Tree	if ( maxUlps . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( maxUlps . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 1

44
Tree	if ( compareTo ( maxUlps . add ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( maxUlps . add ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

45
Tree	if ( entry . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( entry ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( entry ) ; }
Distance : 7

46
Tree	if ( i . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { i . add ( i ) ; }
Code	if ( i . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { i . add ( i ) ; }
Distance : 6

47
Tree	if ( compareTo ( entry . add ( entry , NUMBER_CONSTANT , entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . add ( entry , NUMBER_CONSTANT , entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

48
Tree	if ( entry . compareTo ( entry / entry , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry / entry , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

49
Tree	if ( Precision . compareTo ( entry , this . entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , this . entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 4

50
Tree	if ( entry . add ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . add ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 11

51
Tree	if ( epsilon . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( epsilon . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

52
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( entry ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( entry ) ; }
Distance : 4

53
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( columnsToDrop ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( columnsToDrop ) ; }
Distance : 2

54
Tree	if ( maxUlps . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( maxUlps . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

55
Tree	if ( Precision . compareTo ( entry , this . epsilon ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , this . epsilon ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 3

56
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( entry ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( entry ) ; }
Distance : 7

57
Tree	if ( Precision . compareTo ( entry , epsilon , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , epsilon , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

58
Tree	if ( compareTo ( i , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Code	if ( compareTo ( i , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Distance : 6

59
Tree	if ( maxUlps . compareTo ( null , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( maxUlps . compareTo ( null , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

60
Tree	if ( entry . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( entry . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 5

61
Tree	if ( Precision . compareTo ( null , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( null , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

62
Tree	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( maxUlps ) ; }
Code	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( maxUlps ) ; }
Distance : 9

63
Tree	if ( maxUlps . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( maxUlps . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

64
Tree	if ( compareTo ( entry . add ( entry , NUMBER_CONSTANT , columnsToDrop ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . add ( entry , NUMBER_CONSTANT , columnsToDrop ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

65
Tree	if ( Precision . Precision ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( Precision . Precision ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 6

66
Tree	if ( Precision . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { epsilon . add ( columnsToDrop ) ; }
Code	if ( Precision . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { epsilon . add ( columnsToDrop ) ; }
Distance : 11

67
Tree	if ( entry . compareTo ( entry , i , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( entry , i , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 4

68
Tree	if ( compareTo ( break; , STRING_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Code	if ( compareTo ( break; , STRING_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Distance : 7

69
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 2

70
Tree	if ( entry . compareTo ( null , null ) > NUMBER_CONSTANT ) { maxUlps . add ( entry ) ; }
Code	if ( entry . compareTo ( null , null ) > NUMBER_CONSTANT ) { maxUlps . add ( entry ) ; }
Distance : 7

71
Tree	if ( entry . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( i ) ; }
Code	if ( entry . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . compareTo ( i ) ; }
Distance : 6

72
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Distance : 2

73
Tree	if ( Precision . compareTo ( null , epsilon ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( null , epsilon ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 4

74
Tree	if ( entry . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( maxUlps ) ; }
Code	if ( entry . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( maxUlps ) ; }
Distance : 12

75
Tree	if ( compareTo ( entry , i , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( columnsToDrop ) ; }
Code	if ( compareTo ( entry , i , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( columnsToDrop ) ; }
Distance : 5

76
Tree	if ( i . compareTo ( null , maxUlps ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( i . compareTo ( null , maxUlps ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 6

77
Tree	if ( maxUlps . compareTo ( null , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( maxUlps . compareTo ( null , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

78
Tree	if ( add ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( add ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 7

79
Tree	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , i ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , i ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 8

80
Tree	if ( entry . Precision ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( maxUlps ) ; }
Code	if ( entry . Precision ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( maxUlps ) ; }
Distance : 7

81
Tree	if ( entry . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( entry ) ; }
Code	if ( entry . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( entry ) ; }
Distance : 5

82
Tree	if ( compareTo ( entry . compareTo ( maxUlps , NUMBER_CONSTANT , entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( compareTo ( entry . compareTo ( maxUlps , NUMBER_CONSTANT , entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 9

83
Tree	if ( Precision . compareTo ( i , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( i , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 3

84
Tree	if ( maxUlps . compareTo ( null , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( maxUlps . compareTo ( null , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

85
Tree	if ( add ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( columnsToDrop ) ; }
Code	if ( add ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( columnsToDrop ) ; }
Distance : 8

86
Tree	if ( entry . add ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . add ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

87
Tree	if ( columnsToDrop . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( columnsToDrop . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

88
Tree	if ( Precision . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( columnsToDrop ) ; }
Code	if ( Precision . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( columnsToDrop ) ; }
Distance : 10

89
Tree	if ( Precision . compareTo ( maxUlps , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( maxUlps , NUMBER_CONSTANT , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

90
Tree	if ( entry . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { entry . add ( entry ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { entry . add ( entry ) ; }
Distance : 7

91
Tree	if ( epsilon . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( epsilon . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

92
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( maxUlps ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( maxUlps ) ; }
Distance : 4

93
Tree	if ( Precision . add ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . add ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

94
Tree	if ( entry . add ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . add ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

95
Tree	if ( maxUlps . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( maxUlps . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 10

96
Tree	if ( maxUlps . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Code	if ( maxUlps . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Distance : 11

97
Tree	if ( compareTo ( entry , entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( columnsToDrop ) ; }
Code	if ( compareTo ( entry , entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( columnsToDrop ) ; }
Distance : 5

98
Tree	if ( Precision . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { entry . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { entry . add ( i ) ; }
Distance : 3

99
Tree	if ( entry . compareTo ( maxUlps , this . maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( maxUlps , this . maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

========================================================================


========================================================================
Example Number: 74
Parent Code is: 
final int n1n2prod = n1 * n2 ;
-------------------------------------------------------------------------------
Child code is: 
final double n1n2prod = n1 * n2 ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (39{val=int}) (59 (800{val=n1n2prod}) (204{val==}) (27 (800{val=n1}) (202{val=*}) (800{val=n2}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (39{val=double}) (59 (800{val=n1n2prod}) (204{val==}) (27 (800{val=n1}) (202{val=*}) (800{val=n2}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/30/parent/src_main_java_org_apache_commons_math3_stat_inference_MannWhitneyUTest.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	final int n1n2prod = v2 [ n1 ] + STRING_CONSTANT + Object [ n2 ] ;
Code	final int n1n2prod = v2 [ n1 ] + STRING_CONSTANT + Object [ n2 ] ;
Distance : 10

1
Tree	final double n1 = n2 * n2 ;
Code	final double n1 = n2 * n2 ;
Distance : 2

2
Tree	final int n1n2prod = n1 [ n2 ] + STRING_CONSTANT + d [ n2 ] ;
Code	final int n1n2prod = n1 [ n2 ] + STRING_CONSTANT + d [ n2 ] ;
Distance : 10

3
Tree	final int n1n2prod = <= * n2 * n2 ;
Code	final int n1n2prod = <= * n2 * n2 ;
Distance : 4

4
Tree	final int n1n2prod = edge [ n2 ] + STRING_CONSTANT + Object [ n2 ] ;
Code	final int n1n2prod = edge [ n2 ] + STRING_CONSTANT + Object [ n2 ] ;
Distance : 11

5
Tree	final int n1n2prod = <= / n1 ;
Code	final int n1n2prod = <= / n1 ;
Distance : 4

6
Tree	final int n1n2prod = n2 [ n2 ] + STRING_CONSTANT + CHAR_CONS [ n2 ] ;
Code	final int n1n2prod = n2 [ n2 ] + STRING_CONSTANT + CHAR_CONS [ n2 ] ;
Distance : 11

7
Tree	final int n1n2prod = * * n2 * n1 ;
Code	final int n1n2prod = * * n2 * n1 ;
Distance : 4

8
Tree	final int n2 = n1 - ^ ;
Code	final int n2 = n1 - ^ ;
Distance : 4

9
Tree	final int n1n2prod = R [ n1 ] + STRING_CONSTANT + Object [ n2 ] ;
Code	final int n1n2prod = R [ n1 ] + STRING_CONSTANT + Object [ n2 ] ;
Distance : 10

10
Tree	final int n1n2prod = throws * n1 * n1 ;
Code	final int n1n2prod = throws * n1 * n1 ;
Distance : 4

11
Tree	abstract int n1n2prod = n1 - / ;
Code	abstract int n1n2prod = n1 - / ;
Distance : 4

12
Tree	final double n1n2prod = / * n1 ;
Code	final double n1n2prod = / * n1 ;
Distance : 2

13
Tree	final int n1n2prod = InternalParser * n2 ;
Code	final int n1n2prod = InternalParser * n2 ;
Distance : 2

14
Tree	public int n1n2prod = n1 + NUMBER_CONSTANT ;
Code	public int n1n2prod = n1 + NUMBER_CONSTANT ;
Distance : 4

15
Tree	final int n1n2prod = += * n1 ;
Code	final int n1n2prod = += * n1 ;
Distance : 3

16
Tree	final int n1n2prod = &= * n1 * n2 ;
Code	final int n1n2prod = &= * n1 * n2 ;
Distance : 3

17
Tree	final int n1n2prod = n1 [ n1 ] + STRING_CONSTANT + Printable [ n2 ] ;
Code	final int n1n2prod = n1 [ n1 ] + STRING_CONSTANT + Printable [ n2 ] ;
Distance : 10

18
Tree	final int n1n2prod = class * n1 ;
Code	final int n1n2prod = class * n1 ;
Distance : 3

19
Tree	final int n1n2prod = location [ n2 ] + STRING_CONSTANT + getName [ n2 ] ;
Code	final int n1n2prod = location [ n2 ] + STRING_CONSTANT + getName [ n2 ] ;
Distance : 11

20
Tree	final int n1n2prod = n1 [ n1 ] + STRING_CONSTANT + getName [ n2 ] ;
Code	final int n1n2prod = n1 [ n1 ] + STRING_CONSTANT + getName [ n2 ] ;
Distance : 10

21
Tree	final int n2 = NUMBER_CONSTANT - n1 ;
Code	final int n2 = NUMBER_CONSTANT - n1 ;
Distance : 5

22
Tree	final int n1n2prod = NUMBER_CONSTANT * model.steps ;
Code	final int n1n2prod = NUMBER_CONSTANT * model.steps ;
Distance : 3

23
Tree	final int n1n2prod = range [ n2 ] + STRING_CONSTANT + getColumnDimension [ n2 ] ;
Code	final int n1n2prod = range [ n2 ] + STRING_CONSTANT + getColumnDimension [ n2 ] ;
Distance : 11

24
Tree	final double n1n2prod = super * n2 * n1 ;
Code	final double n1n2prod = super * n2 * n1 ;
Distance : 3

25
Tree	final int n1n2prod = <= / n2 ;
Code	final int n1n2prod = <= / n2 ;
Distance : 3

26
Tree	final int n1n2prod = Color.BLACK . get () - NUMBER_CONSTANT ;
Code	final int n1n2prod = Color.BLACK . get () - NUMBER_CONSTANT ;
Distance : 7

27
Tree	final int n1n2prod = location [ n2 ] + STRING_CONSTANT + Printable [ n2 ] ;
Code	final int n1n2prod = location [ n2 ] + STRING_CONSTANT + Printable [ n2 ] ;
Distance : 11

28
Tree	final int n1 = n2 == CHAR_CONS ;
Code	final int n1 = n2 == CHAR_CONS ;
Distance : 5

29
Tree	final double n1n2prod = n2 > n1 ;
Code	final double n1n2prod = n2 > n1 ;
Distance : 3

30
Tree	final int n1n2prod = SimplexSolver.DEFAULT_ULPS . get () - NUMBER_CONSTANT ;
Code	final int n1n2prod = SimplexSolver.DEFAULT_ULPS . get () - NUMBER_CONSTANT ;
Distance : 7

31
Tree	final byte n1n2prod = n1 - / ;
Code	final byte n1n2prod = n1 - / ;
Distance : 3

32
Tree	final int n1n2prod = n1 - facetB [ n2 ] ;
Code	final int n1n2prod = n1 - facetB [ n2 ] ;
Distance : 5

33
Tree	final int n1n2prod = SubHyperplane . get () - NUMBER_CONSTANT ;
Code	final int n1n2prod = SubHyperplane . get () - NUMBER_CONSTANT ;
Distance : 7

34
Tree	final int n1n2prod = NUMBER_CONSTANT * ModuleLoader.ResolutionMode.BROWSER ;
Code	final int n1n2prod = NUMBER_CONSTANT * ModuleLoader.ResolutionMode.BROWSER ;
Distance : 3

35
Tree	final int n1n2prod = ++ * n2 ;
Code	final int n1n2prod = ++ * n2 ;
Distance : 2

36
Tree	final char n1n2prod = n2 * n1 ;
Code	final char n1n2prod = n2 * n1 ;
Distance : 3

37
Tree	final int n1n2prod = NUMBER_CONSTANT * toBeExposed.realMethod ;
Code	final int n1n2prod = NUMBER_CONSTANT * toBeExposed.realMethod ;
Distance : 3

38
Tree	final int n1n2prod = NUMBER_CONSTANT * Evaluation ;
Code	final int n1n2prod = NUMBER_CONSTANT * Evaluation ;
Distance : 3

39
Tree	final int n1n2prod = n1 [ n2 ] + STRING_CONSTANT + String [ n2 ] ;
Code	final int n1n2prod = n1 [ n2 ] + STRING_CONSTANT + String [ n2 ] ;
Distance : 10

40
Tree	final double n1n2prod = / * n1 * n2 ;
Code	final double n1n2prod = / * n1 * n2 ;
Distance : 2

41
Tree	static int n1n2prod = n1 > > NUMBER_CONSTANT ;
Code	static int n1n2prod = n1 > > NUMBER_CONSTANT ;
Distance : 5

42
Tree	final double n1n2prod = n1 + NUMBER_CONSTANT ;
Code	final double n1n2prod = n1 + NUMBER_CONSTANT ;
Distance : 2

43
Tree	final int n1n2prod = NUMBER_CONSTANT * n2 * n2 * SourceMap.LocationMapping ;
Code	final int n1n2prod = NUMBER_CONSTANT * n2 * n2 * SourceMap.LocationMapping ;
Distance : 6

44
Tree	final int n1n2prod = NUMBER_CONSTANT * n2 * n2 * LocalizedFormats.EULER_ANGLES_SINGULARITY ;
Code	final int n1n2prod = NUMBER_CONSTANT * n2 * n2 * LocalizedFormats.EULER_ANGLES_SINGULARITY ;
Distance : 6

45
Tree	final int n1n2prod = n2 - extends ;
Code	final int n1n2prod = n2 - extends ;
Distance : 4

46
Tree	final int n1n2prod = ! * n2 * n1 ;
Code	final int n1n2prod = ! * n2 * n1 ;
Distance : 4

47
Tree	final int n1n2prod = InternalParser * n2 * n2 ;
Code	final int n1n2prod = InternalParser * n2 * n2 ;
Distance : 4

48
Tree	final int n1n2prod = NUMBER_CONSTANT * n2 * n1 * Vector1D.ZERO ;
Code	final int n1n2prod = NUMBER_CONSTANT * n2 * n1 * Vector1D.ZERO ;
Distance : 6

49
Tree	final int n1n2prod = n2 - += ;
Code	final int n1n2prod = n2 - += ;
Distance : 4

50
Tree	final int n1n2prod = += * n1 * n2 ;
Code	final int n1n2prod = += * n1 * n2 ;
Distance : 3

51
Tree	final int n1n2prod = f.length . clone () - NUMBER_CONSTANT ;
Code	final int n1n2prod = f.length . clone () - NUMBER_CONSTANT ;
Distance : 7

52
Tree	final double n1n2prod = n2 * n1 / n2 ;
Code	final double n1n2prod = n2 * n1 / n2 ;
Distance : 3

53
Tree	final int n1n2prod = NUMBER_CONSTANT * n1 * n1 * FunctionFlavor.NORMAL ;
Code	final int n1n2prod = NUMBER_CONSTANT * n1 * n1 * FunctionFlavor.NORMAL ;
Distance : 6

54
Tree	final int n1n2prod = NUMBER_CONSTANT * definitionsGatherer.definitions ;
Code	final int n1n2prod = NUMBER_CONSTANT * definitionsGatherer.definitions ;
Distance : 3

55
Tree	final int n1n2prod = n2 - n1 [ n2 ] ;
Code	final int n1n2prod = n2 - n1 [ n2 ] ;
Distance : 5

56
Tree	final int n1n2prod = n1 . getGeneratorUpperBounds () - NUMBER_CONSTANT ;
Code	final int n1n2prod = n1 . getGeneratorUpperBounds () - NUMBER_CONSTANT ;
Distance : 6

57
Tree	final int n1n2prod = NUMBER_CONSTANT * getHistogram1 ;
Code	final int n1n2prod = NUMBER_CONSTANT * getHistogram1 ;
Distance : 3

58
Tree	final int n1n2prod = n2 - / ;
Code	final int n1n2prod = n2 - / ;
Distance : 4

59
Tree	final int n1 = ^ * n2 ;
Code	final int n1 = ^ * n2 ;
Distance : 3

60
Tree	final int n1n2prod = NUMBER_CONSTANT * n2 * n1 * FunctionFlavor.NORMAL ;
Code	final int n1n2prod = NUMBER_CONSTANT * n2 * n1 * FunctionFlavor.NORMAL ;
Distance : 6

61
Tree	final double n1n2prod = CHAR_CONS * n1 ;
Code	final double n1n2prod = CHAR_CONS * n1 ;
Distance : 2

62
Tree	final int n1n2prod = DstNormalization.STANDARD_DST_I . is () - NUMBER_CONSTANT ;
Code	final int n1n2prod = DstNormalization.STANDARD_DST_I . is () - NUMBER_CONSTANT ;
Distance : 7

63
Tree	final int n1n2prod = location [ n2 ] + STRING_CONSTANT + Object [ n1 ] ;
Code	final int n1n2prod = location [ n2 ] + STRING_CONSTANT + Object [ n1 ] ;
Distance : 11

64
Tree	final int n1n2prod = RandomSource.TWO_CMRES . intValue () - NUMBER_CONSTANT ;
Code	final int n1n2prod = RandomSource.TWO_CMRES . intValue () - NUMBER_CONSTANT ;
Distance : 7

65
Tree	final int n1n2prod = NUMBER_CONSTANT * other.nominalType ;
Code	final int n1n2prod = NUMBER_CONSTANT * other.nominalType ;
Distance : 3

66
Tree	final int n1n2prod = MatchableInvocation * n2 ;
Code	final int n1n2prod = MatchableInvocation * n2 ;
Distance : 2

67
Tree	final int n1n2prod = NUMBER_CONSTANT * DstNormalization.STANDARD_DST_I ;
Code	final int n1n2prod = NUMBER_CONSTANT * DstNormalization.STANDARD_DST_I ;
Distance : 3

68
Tree	final int n1n2prod = location . is () - NUMBER_CONSTANT ;
Code	final int n1n2prod = location . is () - NUMBER_CONSTANT ;
Distance : 7

69
Tree	final int n1n2prod = n2 * n2 / n1 ;
Code	final int n1n2prod = n2 * n2 / n1 ;
Distance : 4

70
Tree	final int n1n2prod = NUMBER_CONSTANT * var.scope ;
Code	final int n1n2prod = NUMBER_CONSTANT * var.scope ;
Distance : 3

71
Tree	final int n1n2prod = RandomSource.TWO_CMRES . is () - NUMBER_CONSTANT ;
Code	final int n1n2prod = RandomSource.TWO_CMRES . is () - NUMBER_CONSTANT ;
Distance : 7

72
Tree	final int n1 = n1 * n1 ;
Code	final int n1 = n1 * n1 ;
Distance : 3

73
Tree	final int n1n2prod = PivotSelectionRule.DANTZIG . intValue () - NUMBER_CONSTANT ;
Code	final int n1n2prod = PivotSelectionRule.DANTZIG . intValue () - NUMBER_CONSTANT ;
Distance : 7

74
Tree	final int n1n2prod = NUMBER_CONSTANT * EvalMode.NORMAL ;
Code	final int n1n2prod = NUMBER_CONSTANT * EvalMode.NORMAL ;
Distance : 3

75
Tree	final int n1n2prod = n1 [ n2 ] + STRING_CONSTANT + numberOfTrials [ n2 ] ;
Code	final int n1n2prod = n1 [ n2 ] + STRING_CONSTANT + numberOfTrials [ n2 ] ;
Distance : 10

76
Tree	final int n1n2prod = NUMBER_CONSTANT * EvalMode.EVAL ;
Code	final int n1n2prod = NUMBER_CONSTANT * EvalMode.EVAL ;
Distance : 3

77
Tree	final byte n1n2prod = n1 * n2 / n1 ;
Code	final byte n1n2prod = n1 * n2 / n1 ;
Distance : 3

78
Tree	final int n2 = n2 ^ n1 ;
Code	final int n2 = n2 ^ n1 ;
Distance : 5

79
Tree	final int n1n2prod = InternalParser / n1 ;
Code	final int n1n2prod = InternalParser / n1 ;
Distance : 4

80
Tree	final int n1n2prod = else * n2 ;
Code	final int n1n2prod = else * n2 ;
Distance : 2

81
Tree	final int n1n2prod = NUMBER_CONSTANT * DateTimeConstants.MILLIS_PER_DAY ;
Code	final int n1n2prod = NUMBER_CONSTANT * DateTimeConstants.MILLIS_PER_DAY ;
Distance : 3

82
Tree	final int n1n2prod = NUMBER_CONSTANT * n2 * n2 * Boolean.FALSE ;
Code	final int n1n2prod = NUMBER_CONSTANT * n2 * n2 * Boolean.FALSE ;
Distance : 6

83
Tree	final int n1n2prod = MathUtils.TWO_PI . clone () - NUMBER_CONSTANT ;
Code	final int n1n2prod = MathUtils.TWO_PI . clone () - NUMBER_CONSTANT ;
Distance : 7

84
Tree	final int n1n2prod = NUMBER_CONSTANT * *= ;
Code	final int n1n2prod = NUMBER_CONSTANT * *= ;
Distance : 3

85
Tree	final long n1n2prod = ( long ) n1 * n2 ;
Code	final long n1n2prod = ( long ) n1 * n2 ;
Distance : 4

86
Tree	final int n2 = super * n2 * n2 ;
Code	final int n2 = super * n2 * n2 ;
Distance : 5

87
Tree	final int n1n2prod = textAnchor . get () - NUMBER_CONSTANT ;
Code	final int n1n2prod = textAnchor . get () - NUMBER_CONSTANT ;
Distance : 7

88
Tree	final int n1n2prod = n1 . get () - NUMBER_CONSTANT ;
Code	final int n1n2prod = n1 . get () - NUMBER_CONSTANT ;
Distance : 6

89
Tree	final int n1n2prod = n1 - a.dfwg [ n2 ] ;
Code	final int n1n2prod = n1 - a.dfwg [ n2 ] ;
Distance : 5

90
Tree	final int n1n2prod = NUMBER_CONSTANT * n2 * n2 * iChronology.MILLIS_PER_DAY ;
Code	final int n1n2prod = NUMBER_CONSTANT * n2 * n2 * iChronology.MILLIS_PER_DAY ;
Distance : 6

91
Tree	final int n2 = NUMBER_CONSTANT * f.length ;
Code	final int n2 = NUMBER_CONSTANT * f.length ;
Distance : 4

92
Tree	final int n1n2prod = NUMBER_CONSTANT * matchLabel ;
Code	final int n1n2prod = NUMBER_CONSTANT * matchLabel ;
Distance : 3

93
Tree	final int n1n2prod = TreeSet [ n2 ] + STRING_CONSTANT + Object [ n2 ] ;
Code	final int n1n2prod = TreeSet [ n2 ] + STRING_CONSTANT + Object [ n2 ] ;
Distance : 11

94
Tree	final byte n1n2prod = CHAR_CONS + n1 ;
Code	final byte n1n2prod = CHAR_CONS + n1 ;
Distance : 4

95
Tree	final int n2 = n1 > n1 ;
Code	final int n2 = n1 > n1 ;
Distance : 4

96
Tree	final double n1n2prod = {} * n2 ;
Code	final double n1n2prod = {} * n2 ;
Distance : 1

97
Tree	final int n1 = n1 - ^ ;
Code	final int n1 = n1 - ^ ;
Distance : 4

98
Tree	final int n1n2prod = NUMBER_CONSTANT * tx.amount ;
Code	final int n1n2prod = NUMBER_CONSTANT * tx.amount ;
Distance : 3

99
Tree	final int n1n2prod = NUMBER_CONSTANT * SimplexSolver.DEFAULT_ULPS ;
Code	final int n1n2prod = NUMBER_CONSTANT * SimplexSolver.DEFAULT_ULPS ;
Distance : 3

========================================================================


========================================================================
Example Number: 75
Parent Code is: 
if ( y >= TWO_POWER_52  y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( y >= TWO_POWER_53  y <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=y}) (251{val=>=}) (800{val=TWO_POWER_52})) (250{val=||}) (27 (800{val=y}) (252{val=<=}) (38 (201{val=-}) (800{val=TWO_POWER_52})))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=pow}) (214{val=(}) (38 (201{val=-}) (800{val=x})) (234{val=,}) (800{val=y}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=y}) (251{val=>=}) (800{val=TWO_POWER_53})) (250{val=||}) (27 (800{val=y}) (252{val=<=}) (38 (201{val=-}) (800{val=TWO_POWER_53})))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=pow}) (214{val=(}) (38 (201{val=-}) (800{val=x})) (234{val=,}) (800{val=y}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/15/parent/src_main_java_org_apache_commons_math3_util_FastMath.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	if ( y != - TWO_POWER_52 y TWO_POWER_52 < current.parent.scopes ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y TWO_POWER_52 < current.parent.scopes ) { return pow ( - x , y ) ; }
Distance : 6

1
Tree	if ( y != - TWO_POWER_52 y y < Integer.MAX_VALUE ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y y < Integer.MAX_VALUE ) { return pow ( - x , y ) ; }
Distance : 6

2
Tree	if ( y != - TWO_POWER_52 y TWO_POWER_52 < options.skipTranspilationAndCrash ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y TWO_POWER_52 < options.skipTranspilationAndCrash ) { return pow ( - x , y ) ; }
Distance : 6

3
Tree	if ( y != - TWO_POWER_52 y TWO_POWER_52 < Edge ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y TWO_POWER_52 < Edge ) { return pow ( - x , y ) ; }
Distance : 6

4
Tree	if ( y > - TWO_POWER_52 y TWO_POWER_52 < startConfiguration.length ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y TWO_POWER_52 < startConfiguration.length ) { return pow ( - x , y ) ; }
Distance : 6

5
Tree	if ( y > - TWO_POWER_52 y TWO_POWER_52 < ArrayIndexOutOfBoundsException ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y TWO_POWER_52 < ArrayIndexOutOfBoundsException ) { return pow ( - x , y ) ; }
Distance : 6

6
Tree	if ( y == CHAR_CONS TWO_POWER_52 TWO_POWER_52 <= - y ) { return pow ( - x , y ) ; }
Code	if ( y == CHAR_CONS TWO_POWER_52 TWO_POWER_52 <= - y ) { return pow ( - x , y ) ; }
Distance : 5

7
Tree	if ( y >= x y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= x y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

8
Tree	if ( y > - y y TWO_POWER_52 < sample2.length ) { return pow ( - x , y ) ; }
Code	if ( y > - y y TWO_POWER_52 < sample2.length ) { return pow ( - x , y ) ; }
Distance : 6

9
Tree	if ( y != - TWO_POWER_52 y TWO_POWER_52 < LocalizedFormats.OVERFLOW_IN_ADDITION ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y TWO_POWER_52 < LocalizedFormats.OVERFLOW_IN_ADDITION ) { return pow ( - x , y ) ; }
Distance : 6

10
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 4

11
Tree	if ( y != - TWO_POWER_52 y x < x.length ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y x < x.length ) { return pow ( - x , y ) ; }
Distance : 6

12
Tree	if ( y != - TWO_POWER_52 y TWO_POWER_52 < LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y TWO_POWER_52 < LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ) { return pow ( - x , y ) ; }
Distance : 6

13
Tree	if ( y > - TWO_POWER_52 y TWO_POWER_52 < Precision.EPSILON ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y TWO_POWER_52 < Precision.EPSILON ) { return pow ( - x , y ) ; }
Distance : 6

14
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 x != - NUMBER_CONSTANT ) { return pow ( - x , TWO_POWER_52 ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 x != - NUMBER_CONSTANT ) { return pow ( - x , TWO_POWER_52 ) ; }
Distance : 6

15
Tree	if ( y > - TWO_POWER_52 y TWO_POWER_52 < LiveVariablesAnalysisEs6.MAX_VARIABLES_TO_ANALYZE ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y TWO_POWER_52 < LiveVariablesAnalysisEs6.MAX_VARIABLES_TO_ANALYZE ) { return pow ( - x , y ) ; }
Distance : 6

16
Tree	if ( y != - TWO_POWER_52 y TWO_POWER_52 < sample1.length ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y TWO_POWER_52 < sample1.length ) { return pow ( - x , y ) ; }
Distance : 6

17
Tree	if ( y > - TWO_POWER_52 - TWO_POWER_52 < getAbstractScope ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 - TWO_POWER_52 < getAbstractScope ) { return pow ( - x , y ) ; }
Distance : 7

18
Tree	if ( y != - TWO_POWER_52 y TWO_POWER_52 < omega ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y TWO_POWER_52 < omega ) { return pow ( - x , y ) ; }
Distance : 6

19
Tree	if ( y != - TWO_POWER_52 y TWO_POWER_52 < Double.MIN_VALUE ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y TWO_POWER_52 < Double.MIN_VALUE ) { return pow ( - x , y ) ; }
Distance : 6

20
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 4

21
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - y ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - y ) { return pow ( - x , y ) ; }
Distance : 4

22
Tree	if ( x >= NUMBER_CONSTANT y TWO_POWER_52 <= - y ) { return pow ( - x , y ) ; }
Code	if ( x >= NUMBER_CONSTANT y TWO_POWER_52 <= - y ) { return pow ( - x , y ) ; }
Distance : 4

23
Tree	if ( y == CHAR_CONS TWO_POWER_52 y <= - TWO_POWER_52 ) { return pow ( - x , TWO_POWER_52 ) ; }
Code	if ( y == CHAR_CONS TWO_POWER_52 y <= - TWO_POWER_52 ) { return pow ( - x , TWO_POWER_52 ) ; }
Distance : 5

24
Tree	if ( y >= NUMBER_CONSTANT y y != - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Code	if ( y >= NUMBER_CONSTANT y y != - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Distance : 5

25
Tree	if ( TWO_POWER_52 >= NUMBER_CONSTANT y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , TWO_POWER_52 ) ; }
Code	if ( TWO_POWER_52 >= NUMBER_CONSTANT y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , TWO_POWER_52 ) ; }
Distance : 5

26
Tree	if ( y >= NUMBER_CONSTANT y y != - NUMBER_CONSTANT ) { return pow ( - TWO_POWER_52 , x ) ; }
Code	if ( y >= NUMBER_CONSTANT y y != - NUMBER_CONSTANT ) { return pow ( - TWO_POWER_52 , x ) ; }
Distance : 6

27
Tree	if ( TWO_POWER_52 >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

28
Tree	if ( y == CHAR_CONS y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y == CHAR_CONS y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 5

29
Tree	if ( y >= NUMBER_CONSTANT y y <= - TWO_POWER_52 ) { return pow ( - x , TWO_POWER_52 ) ; }
Code	if ( y >= NUMBER_CONSTANT y y <= - TWO_POWER_52 ) { return pow ( - x , TWO_POWER_52 ) ; }
Distance : 4

30
Tree	if ( y != - TWO_POWER_52 y TWO_POWER_52 < getDimension ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y TWO_POWER_52 < getDimension ) { return pow ( - x , y ) ; }
Distance : 6

31
Tree	if ( y >= NUMBER_CONSTANT y y != - NUMBER_CONSTANT ) { return pow ( - y , x ) ; }
Code	if ( y >= NUMBER_CONSTANT y y != - NUMBER_CONSTANT ) { return pow ( - y , x ) ; }
Distance : 6

32
Tree	if ( y != - TWO_POWER_52 y TWO_POWER_52 < other.nominalType ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y TWO_POWER_52 < other.nominalType ) { return pow ( - x , y ) ; }
Distance : 6

33
Tree	if ( x >= NUMBER_CONSTANT y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - y , y ) ; }
Code	if ( x >= NUMBER_CONSTANT y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - y , y ) ; }
Distance : 5

34
Tree	if ( y != - TWO_POWER_52 y TWO_POWER_52 < v1.y ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y TWO_POWER_52 < v1.y ) { return pow ( - x , y ) ; }
Distance : 6

35
Tree	if ( TWO_POWER_52 >= TWO_POWER_52 y x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= TWO_POWER_52 y x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

36
Tree	if ( x >= NUMBER_CONSTANT y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - TWO_POWER_52 , y ) ; }
Code	if ( x >= NUMBER_CONSTANT y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - TWO_POWER_52 , y ) ; }
Distance : 5

37
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - y ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - y ) { return pow ( - x , x ) ; }
Distance : 4

38
Tree	if ( TWO_POWER_52 >= x - TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= x - TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

39
Tree	if ( y >= x y x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= x y x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

40
Tree	if ( TWO_POWER_52 >= NUMBER_CONSTANT y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= NUMBER_CONSTANT y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 5

41
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 y != - x ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 y != - x ) { return pow ( - x , y ) ; }
Distance : 4

42
Tree	if ( x >= NUMBER_CONSTANT y y != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( x >= NUMBER_CONSTANT y y != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 5

43
Tree	if ( isPrototypeObject != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( isPrototypeObject != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

44
Tree	if ( y != - TWO_POWER_52 y TWO_POWER_52 < f.length ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y TWO_POWER_52 < f.length ) { return pow ( - x , y ) ; }
Distance : 6

45
Tree	if ( options.propertyRenaming != null y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( options.propertyRenaming != null y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

46
Tree	if ( x >= NUMBER_CONSTANT y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( x >= NUMBER_CONSTANT y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 6

47
Tree	if ( y.length != null TWO_POWER_52 y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y.length != null TWO_POWER_52 y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 5

48
Tree	if ( TWO_POWER_52 >= x y x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= x y x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

49
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - x ) { return pow ( - x , x ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - x ) { return pow ( - x , x ) ; }
Distance : 4

50
Tree	if ( y >= NUMBER_CONSTANT y x != - NUMBER_CONSTANT ) { return pow ( - TWO_POWER_52 , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y x != - NUMBER_CONSTANT ) { return pow ( - TWO_POWER_52 , y ) ; }
Distance : 5

51
Tree	if ( org.mockito.creation.instance.InstantiationException != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( org.mockito.creation.instance.InstantiationException != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

52
Tree	if ( x >= NUMBER_CONSTANT TWO_POWER_52 y != - y ) { return pow ( - x , y ) ; }
Code	if ( x >= NUMBER_CONSTANT TWO_POWER_52 y != - y ) { return pow ( - x , y ) ; }
Distance : 5

53
Tree	if ( y != - TWO_POWER_52 y TWO_POWER_52 < iChronology.MILLIS_PER_DAY ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y TWO_POWER_52 < iChronology.MILLIS_PER_DAY ) { return pow ( - x , y ) ; }
Distance : 6

54
Tree	if ( LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT != null y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( LocalizedFormats.LOWER_ENDPOINT_ABOVE_UPPER_ENDPOINT != null y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

55
Tree	if ( y >= NUMBER_CONSTANT y x != - NUMBER_CONSTANT ) { return pow ( - y , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y x != - NUMBER_CONSTANT ) { return pow ( - y , y ) ; }
Distance : 5

56
Tree	if ( TWO_POWER_52 >= NUMBER_CONSTANT TWO_POWER_52 TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( TWO_POWER_52 >= NUMBER_CONSTANT TWO_POWER_52 TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 6

57
Tree	if ( callSite.parent != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( callSite.parent != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

58
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 x != - TWO_POWER_52 ) { return pow ( - x , TWO_POWER_52 ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 x != - TWO_POWER_52 ) { return pow ( - x , TWO_POWER_52 ) ; }
Distance : 6

59
Tree	if ( v.length != null TWO_POWER_52 TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Code	if ( v.length != null TWO_POWER_52 TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Distance : 7

60
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - y ) { return pow ( - x , x ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - y ) { return pow ( - x , x ) ; }
Distance : 4

61
Tree	if ( x >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( x >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

62
Tree	if ( x >= TWO_POWER_52 y x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( x >= TWO_POWER_52 y x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

63
Tree	if ( MathUtils.SAFE_MIN != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( MathUtils.SAFE_MIN != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

64
Tree	if ( y != - TWO_POWER_52 y TWO_POWER_52 < Verification.EXPLICIT ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y TWO_POWER_52 < Verification.EXPLICIT ) { return pow ( - x , y ) ; }
Distance : 6

65
Tree	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 4

66
Tree	if ( y == CHAR_CONS TWO_POWER_52 TWO_POWER_52 <= - y ) { return pow ( - x , x ) ; }
Code	if ( y == CHAR_CONS TWO_POWER_52 TWO_POWER_52 <= - y ) { return pow ( - x , x ) ; }
Distance : 6

67
Tree	if ( y != - TWO_POWER_52 y x < y.length ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y x < y.length ) { return pow ( - x , y ) ; }
Distance : 6

68
Tree	if ( y >= x - TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= x - TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 5

69
Tree	if ( y >= CHAR_CONS y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= CHAR_CONS y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

70
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return y . pow ( x , x.length , y , MathUtils.TWO_PI ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return y . pow ( x , x.length , y , MathUtils.TWO_PI ) ; }
Distance : 10

71
Tree	if ( y != - TWO_POWER_52 y y < MathUtils.TWO_PI ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y y < MathUtils.TWO_PI ) { return pow ( - x , y ) ; }
Distance : 6

72
Tree	if ( Precision.SAFE_MIN != null y y <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Code	if ( Precision.SAFE_MIN != null y y <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Distance : 6

73
Tree	if ( LiveVariablesAnalysisEs6.MAX_VARIABLES_TO_ANALYZE != null y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( LiveVariablesAnalysisEs6.MAX_VARIABLES_TO_ANALYZE != null y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

74
Tree	if ( MathUtils.TWO_PI != null TWO_POWER_52 x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( MathUtils.TWO_PI != null TWO_POWER_52 x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 6

75
Tree	if ( TWO_POWER_52 >= NUMBER_CONSTANT TWO_POWER_52 x != - NUMBER_CONSTANT ) { return pow ( - x , TWO_POWER_52 ) ; }
Code	if ( TWO_POWER_52 >= NUMBER_CONSTANT TWO_POWER_52 x != - NUMBER_CONSTANT ) { return pow ( - x , TWO_POWER_52 ) ; }
Distance : 7

76
Tree	if ( v.length != null TWO_POWER_52 y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( v.length != null TWO_POWER_52 y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 5

77
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 y != - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 y != - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Distance : 5

78
Tree	if ( x >= NUMBER_CONSTANT TWO_POWER_52 TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( x >= NUMBER_CONSTANT TWO_POWER_52 TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

79
Tree	if ( x >= NUMBER_CONSTANT y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( x >= NUMBER_CONSTANT y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

80
Tree	if ( y >= x y x <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Code	if ( y >= x y x <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Distance : 4

81
Tree	if ( y >= x - x != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= x - x != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

82
Tree	if ( x.length != null TWO_POWER_52 TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( x.length != null TWO_POWER_52 TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 6

83
Tree	if ( y >= NUMBER_CONSTANT y x != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y x != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

84
Tree	if ( Integer.MAX_VALUE != null TWO_POWER_52 y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( Integer.MAX_VALUE != null TWO_POWER_52 y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 5

85
Tree	if ( TWO_POWER_52 >= TWO_POWER_52 y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Code	if ( TWO_POWER_52 >= TWO_POWER_52 y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Distance : 6

86
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return y . pow ( x , x.length , y , Double.NaN ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return y . pow ( x , x.length , y , Double.NaN ) ; }
Distance : 10

87
Tree	if ( y != - TWO_POWER_52 y TWO_POWER_52 < JDKRandomAdaptor ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y TWO_POWER_52 < JDKRandomAdaptor ) { return pow ( - x , y ) ; }
Distance : 6

88
Tree	if ( x >= TWO_POWER_52 y x <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Code	if ( x >= TWO_POWER_52 y x <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Distance : 5

89
Tree	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

90
Tree	if ( MathUtils.TWO_PI != null TWO_POWER_52 y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( MathUtils.TWO_PI != null TWO_POWER_52 y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 5

91
Tree	if ( y >= y y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= y y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

92
Tree	if ( x >= TWO_POWER_52 y x != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( x >= TWO_POWER_52 y x != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

93
Tree	if ( TWO_POWER_52 >= TWO_POWER_52 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Code	if ( TWO_POWER_52 >= TWO_POWER_52 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Distance : 5

94
Tree	if ( x >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( x >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 5

95
Tree	if ( y == CHAR_CONS TWO_POWER_52 y <= - TWO_POWER_52 ) { return pow ( - TWO_POWER_52 , x ) ; }
Code	if ( y == CHAR_CONS TWO_POWER_52 y <= - TWO_POWER_52 ) { return pow ( - TWO_POWER_52 , x ) ; }
Distance : 6

96
Tree	if ( y >= NUMBER_CONSTANT y y <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Code	if ( y >= NUMBER_CONSTANT y y <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Distance : 4

97
Tree	if ( x >= NUMBER_CONSTANT TWO_POWER_52 y <= - y ) { return pow ( - x , y ) ; }
Code	if ( x >= NUMBER_CONSTANT TWO_POWER_52 y <= - y ) { return pow ( - x , y ) ; }
Distance : 4

98
Tree	if ( y != - TWO_POWER_52 y TWO_POWER_52 < Math.PI ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y TWO_POWER_52 < Math.PI ) { return pow ( - x , y ) ; }
Distance : 6

99
Tree	if ( y >= x y TWO_POWER_52 <= - y ) { return pow ( - x , x ) ; }
Code	if ( y >= x y TWO_POWER_52 <= - y ) { return pow ( - x , x ) ; }
Distance : 4

========================================================================


========================================================================
Example Number: 76
Parent Code is: 
FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
-------------------------------------------------------------------------------
Child code is: 
FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - NUMBER_CONSTANT * dim ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (32 (800{val=FastMath}) (235{val=.}) (802{val=pow}) (214{val=(}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (40{val=FastMath.PI})) (234{val=,}) (27 (38 (201{val=-}) (800{val=dim})) (203{val=/}) (34{val=NUMBER_CONSTANT})) (215{val=)})) (202{val=*}) (32 (800{val=FastMath}) (235{val=.}) (802{val=pow}) (214{val=(}) (800{val=covarianceMatrixDeterminant}) (234{val=,}) (38 (201{val=-}) (34{val=NUMBER_CONSTANT})) (215{val=)})) (202{val=*}) (32 (802{val=getExponentTerm}) (214{val=(}) (800{val=vals}) (215{val=)}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (32 (800{val=FastMath}) (235{val=.}) (802{val=pow}) (214{val=(}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (40{val=FastMath.PI})) (234{val=,}) (27 (38 (201{val=-}) (34{val=NUMBER_CONSTANT})) (202{val=*}) (800{val=dim})) (215{val=)})) (202{val=*}) (32 (800{val=FastMath}) (235{val=.}) (802{val=pow}) (214{val=(}) (800{val=covarianceMatrixDeterminant}) (234{val=,}) (38 (201{val=-}) (34{val=NUMBER_CONSTANT})) (215{val=)})) (202{val=*}) (32 (802{val=getExponentTerm}) (214{val=(}) (800{val=vals}) (215{val=)}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/11/parent/src_main_java_org_apache_commons_math3_distribution_MultivariateNormalDistribution.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - dim
Distance : 16

1
Tree	FastMath . pow ( NUMBER_CONSTANT , FastMath ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - FastMath
Code	FastMath . pow ( NUMBER_CONSTANT , FastMath ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - FastMath
Distance : 16

2
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - dim
Distance : 15

3
Tree	FastMath . pow ( NUMBER_CONSTANT , vals ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , vals ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - dim
Distance : 16

4
Tree	FastMath . pow ( NUMBER_CONSTANT , FastMath ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( dim ) - getExponentTerm
Code	FastMath . pow ( NUMBER_CONSTANT , FastMath ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( dim ) - getExponentTerm
Distance : 15

5
Tree	FastMath . pow ( NUMBER_CONSTANT , FastMath ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - vals
Code	FastMath . pow ( NUMBER_CONSTANT , FastMath ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - vals
Distance : 15

6
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - getExponentTerm
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - getExponentTerm
Distance : 15

7
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - dim
Distance : 16

8
Tree	vals . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - dim
Code	vals . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - dim
Distance : 17

9
Tree	FastMath . pow ( NUMBER_CONSTANT , vals ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , vals ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - dim
Distance : 15

10
Tree	FastMath . pow ( NUMBER_CONSTANT , FastMath ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( dim ) - FastMath
Code	FastMath . pow ( NUMBER_CONSTANT , FastMath ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( dim ) - FastMath
Distance : 16

11
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - FastMath
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - FastMath
Distance : 16

12
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - getExponentTerm
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - getExponentTerm
Distance : 14

13
Tree	FastMath . pow ( NUMBER_CONSTANT , vals ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - getExponentTerm
Code	FastMath . pow ( NUMBER_CONSTANT , vals ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - getExponentTerm
Distance : 15

14
Tree	vals . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - dim
Code	vals . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - dim
Distance : 16

15
Tree	FastMath . pow ( NUMBER_CONSTANT , FastMath ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( dim ) - vals
Code	FastMath . pow ( NUMBER_CONSTANT , FastMath ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( dim ) - vals
Distance : 15

16
Tree	FastMath . pow ( NUMBER_CONSTANT , vals ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , vals ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - dim
Distance : 16

17
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( dim ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( dim ) - dim
Distance : 16

18
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - vals
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - vals
Distance : 15

19
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - dim
Distance : 16

20
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - FastMath
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - FastMath
Distance : 15

21
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - getExponentTerm
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - getExponentTerm
Distance : 15

22
Tree	FastMath . pow ( NUMBER_CONSTANT , FastMath ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - vals
Code	FastMath . pow ( NUMBER_CONSTANT , FastMath ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - vals
Distance : 14

23
Tree	vals . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - getExponentTerm
Code	vals . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - getExponentTerm
Distance : 16

24
Tree	FastMath . pow ( NUMBER_CONSTANT , FastMath ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - getExponentTerm
Code	FastMath . pow ( NUMBER_CONSTANT , FastMath ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - getExponentTerm
Distance : 15

25
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - dim
Distance : 16

26
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - dim
Distance : 16

27
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - FastMath
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - FastMath
Distance : 16

28
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - getExponentTerm
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - getExponentTerm
Distance : 14

29
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( dim ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( dim ) - dim
Distance : 16

30
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - vals
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - vals
Distance : 15

31
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - FastMath
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - FastMath
Distance : 15

32
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - getExponentTerm
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - getExponentTerm
Distance : 15

33
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - vals
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - vals
Distance : 14

34
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - FastMath
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - FastMath
Distance : 16

35
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( dim ) - getExponentTerm
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( dim ) - getExponentTerm
Distance : 15

36
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - vals
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - vals
Distance : 15

37
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( dim ) - FastMath
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( dim ) - FastMath
Distance : 16

38
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( dim ) - vals
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( dim ) - vals
Distance : 15

39
Tree	FastMath . pow ( NUMBER_CONSTANT , FastMath ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , FastMath ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - dim
Distance : 16

40
Tree	FastMath . pow ( NUMBER_CONSTANT , FastMath ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , FastMath ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - dim
Distance : 15

41
Tree	FastMath . pow ( NUMBER_CONSTANT , FastMath ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - getExponentTerm
Code	FastMath . pow ( NUMBER_CONSTANT , FastMath ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - getExponentTerm
Distance : 15

42
Tree	FastMath . pow ( NUMBER_CONSTANT , FastMath ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , FastMath ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - dim
Distance : 16

43
Tree	FastMath . pow ( NUMBER_CONSTANT , FastMath ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - FastMath
Code	FastMath . pow ( NUMBER_CONSTANT , FastMath ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - FastMath
Distance : 16

44
Tree	FastMath . pow ( NUMBER_CONSTANT , FastMath ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - getExponentTerm
Code	FastMath . pow ( NUMBER_CONSTANT , FastMath ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - getExponentTerm
Distance : 14

45
Tree	FastMath . pow ( NUMBER_CONSTANT , FastMath ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( dim ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , FastMath ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( dim ) - dim
Distance : 16

46
Tree	FastMath . pow ( NUMBER_CONSTANT , FastMath ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - vals
Code	FastMath . pow ( NUMBER_CONSTANT , FastMath ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - vals
Distance : 15

47
Tree	FastMath . pow ( NUMBER_CONSTANT , FastMath ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - FastMath
Code	FastMath . pow ( NUMBER_CONSTANT , FastMath ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - FastMath
Distance : 15

48
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - getExponentTerm
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - getExponentTerm
Distance : 15

49
Tree	vals . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - dim
Code	vals . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - dim
Distance : 17

50
Tree	FastMath . pow ( NUMBER_CONSTANT , vals ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - FastMath
Code	FastMath . pow ( NUMBER_CONSTANT , vals ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - FastMath
Distance : 16

51
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - vals + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - vals + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - dim
Distance : 15

52
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( dim ) - FastMath
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( dim ) - FastMath
Distance : 16

53
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * dim . pow ( covarianceMatrixDeterminant ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * dim . pow ( covarianceMatrixDeterminant ) - dim
Distance : 16

54
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - dim + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - dim + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - dim
Distance : 15

55
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - FastMath
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - FastMath
Distance : 16

56
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - getExponentTerm
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - getExponentTerm
Distance : 15

57
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - dim
Distance : 16

58
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - getExponentTerm
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - getExponentTerm
Distance : 14

59
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - dim
Distance : 16

60
Tree	vals . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - vals
Code	vals . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - vals
Distance : 15

61
Tree	FastMath . pow ( NUMBER_CONSTANT , vals ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( dim ) - getExponentTerm
Code	FastMath . pow ( NUMBER_CONSTANT , vals ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( dim ) - getExponentTerm
Distance : 15

62
Tree	FastMath . pow ( NUMBER_CONSTANT , vals ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - vals
Code	FastMath . pow ( NUMBER_CONSTANT , vals ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - vals
Distance : 15

63
Tree	vals . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - FastMath
Code	vals . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - FastMath
Distance : 17

64
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - dim
Distance : 16

65
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - vals + NUMBER_CONSTANT * FastMath . pow ( vals ) - getExponentTerm
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - vals + NUMBER_CONSTANT * FastMath . pow ( vals ) - getExponentTerm
Distance : 15

66
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - vals + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - vals + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - dim
Distance : 16

67
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( dim ) - vals
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( dim ) - vals
Distance : 15

68
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * dim . pow ( vals ) - getExponentTerm
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * dim . pow ( vals ) - getExponentTerm
Distance : 16

69
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - dim + NUMBER_CONSTANT * FastMath . pow ( vals ) - getExponentTerm
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - dim + NUMBER_CONSTANT * FastMath . pow ( vals ) - getExponentTerm
Distance : 15

70
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - dim + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - dim + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - dim
Distance : 16

71
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * dim . pow ( FastMath ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * dim . pow ( FastMath ) - dim
Distance : 17

72
Tree	FastMath . pow ( NUMBER_CONSTANT , vals ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - FastMath
Code	FastMath . pow ( NUMBER_CONSTANT , vals ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - FastMath
Distance : 16

73
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - dim
Distance : 15

74
Tree	FastMath . pow ( NUMBER_CONSTANT , vals ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - vals
Code	FastMath . pow ( NUMBER_CONSTANT , vals ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - vals
Distance : 14

75
Tree	vals . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - getExponentTerm
Code	vals . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - getExponentTerm
Distance : 16

76
Tree	FastMath . pow ( NUMBER_CONSTANT , vals ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - getExponentTerm
Code	FastMath . pow ( NUMBER_CONSTANT , vals ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - getExponentTerm
Distance : 14

77
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - vals
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - vals
Distance : 14

78
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - FastMath
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - FastMath
Distance : 16

79
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - dim
Distance : 16

80
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - dim
Distance : 15

81
Tree	FastMath . pow ( NUMBER_CONSTANT , vals ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( dim ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , vals ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( dim ) - dim
Distance : 16

82
Tree	FastMath . pow ( NUMBER_CONSTANT , vals ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - vals
Code	FastMath . pow ( NUMBER_CONSTANT , vals ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - vals
Distance : 15

83
Tree	vals . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - FastMath
Code	vals . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - FastMath
Distance : 17

84
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - vals + NUMBER_CONSTANT * FastMath . pow ( vals ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - vals + NUMBER_CONSTANT * FastMath . pow ( vals ) - dim
Distance : 16

85
Tree	vals . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - getExponentTerm
Code	vals . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - getExponentTerm
Distance : 15

86
Tree	FastMath . pow ( NUMBER_CONSTANT , vals ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - FastMath
Code	FastMath . pow ( NUMBER_CONSTANT , vals ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - FastMath
Distance : 15

87
Tree	FastMath . pow ( NUMBER_CONSTANT , vals ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - getExponentTerm
Code	FastMath . pow ( NUMBER_CONSTANT , vals ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - getExponentTerm
Distance : 15

88
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * dim . pow ( vals ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * dim . pow ( vals ) - dim
Distance : 17

89
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - dim + NUMBER_CONSTANT * FastMath . pow ( vals ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - dim + NUMBER_CONSTANT * FastMath . pow ( vals ) - dim
Distance : 16

90
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( dim ) - getExponentTerm
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( dim ) - getExponentTerm
Distance : 15

91
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - vals
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - vals
Distance : 15

92
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - getExponentTerm
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - getExponentTerm
Distance : 15

93
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - dim
Distance : 16

94
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - dim
Distance : 15

95
Tree	vals . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( dim ) - dim
Code	vals . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( dim ) - dim
Distance : 17

96
Tree	vals . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - vals
Code	vals . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - vals
Distance : 16

97
Tree	vals . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - FastMath
Code	vals . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - FastMath
Distance : 16

98
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( dim ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( dim ) - dim
Distance : 16

99
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - vals
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - vals
Distance : 15

========================================================================


========================================================================
Example Number: 77
Parent Code is: 
iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ;
-------------------------------------------------------------------------------
Child code is: 
iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (7 (800{val=iterations}) (204{val==}) (14 (304{val=new}) (43 (801{val=Incrementor})) (214{val=(}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (14 (304{val=new}) (43 (801{val=MaxIterCallback})) (216{val=()})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (7 (800{val=iterations}) (204{val==}) (14 (304{val=new}) (43 (801{val=Incrementor})) (214{val=(}) (40{val=Integer.MAX_VALUE}) (234{val=,}) (14 (304{val=new}) (43 (801{val=MaxIterCallback})) (216{val=()})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/6/parent/src_main_java_org_apache_commons_math3_optim_BaseOptimizer.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	iterations = new Incrementor ( new Incrementor ( null ) ) ; this
Code	iterations = new Incrementor ( new Incrementor ( null ) ) ; this
Distance : 6

1
Tree	iterations = new Incrementor ( new Incrementor () ) ; boolean
Code	iterations = new Incrementor ( new Incrementor () ) ; boolean
Distance : 4

2
Tree	iterations = new Incrementor ( new Incrementor () ) ; fireChangeEvent
Code	iterations = new Incrementor ( new Incrementor () ) ; fireChangeEvent
Distance : 4

3
Tree	iterations = new Incrementor ( new Incrementor () ) ; serialised
Code	iterations = new Incrementor ( new Incrementor () ) ; serialised
Distance : 4

4
Tree	iterations = new Incrementor ( new Incrementor () ) ; type
Code	iterations = new Incrementor ( new Incrementor () ) ; type
Distance : 4

5
Tree	iterations = new Incrementor ( new Incrementor () ) ; getInstance
Code	iterations = new Incrementor ( new Incrementor () ) ; getInstance
Distance : 4

6
Tree	iterations = new Incrementor ( new Incrementor () ) ; double
Code	iterations = new Incrementor ( new Incrementor () ) ; double
Distance : 4

7
Tree	iterations = new Incrementor ( new Incrementor () ) ; false
Code	iterations = new Incrementor ( new Incrementor () ) ; false
Distance : 4

8
Tree	iterations = new Incrementor ( new Incrementor () ) ; field
Code	iterations = new Incrementor ( new Incrementor () ) ; field
Distance : 4

9
Tree	iterations = new Incrementor ( new Incrementor () ) ; parent
Code	iterations = new Incrementor ( new Incrementor () ) ; parent
Distance : 4

10
Tree	iterations = new Incrementor ( new Incrementor () ) ; x
Code	iterations = new Incrementor ( new Incrementor () ) ; x
Distance : 4

11
Tree	iterations = new Incrementor ( new Incrementor () ) ; fail
Code	iterations = new Incrementor ( new Incrementor () ) ; fail
Distance : 4

12
Tree	iterations = new Incrementor ( new Incrementor () ) ; checkArgument
Code	iterations = new Incrementor ( new Incrementor () ) ; checkArgument
Distance : 4

13
Tree	iterations = new Incrementor ( new Incrementor () ) ; data
Code	iterations = new Incrementor ( new Incrementor () ) ; data
Distance : 4

14
Tree	iterations = new Incrementor ( new Incrementor () ) ; add
Code	iterations = new Incrementor ( new Incrementor () ) ; add
Distance : 4

15
Tree	iterations = new Incrementor ( new Incrementor () ) ; paint
Code	iterations = new Incrementor ( new Incrementor () ) ; paint
Distance : 4

16
Tree	iterations = new Incrementor ( new Incrementor () ) ; m
Code	iterations = new Incrementor ( new Incrementor () ) ; m
Distance : 4

17
Tree	iterations = new Incrementor ( new Incrementor () ) ; LINE_JOINER
Code	iterations = new Incrementor ( new Incrementor () ) ; LINE_JOINER
Distance : 4

18
Tree	iterations = new Incrementor ( new Incrementor () ) ; join
Code	iterations = new Incrementor ( new Incrementor () ) ; join
Distance : 4

19
Tree	iterations = new Incrementor ( new Incrementor () ) ; reportCodeChange
Code	iterations = new Incrementor ( new Incrementor () ) ; reportCodeChange
Distance : 4

20
Tree	iterations = new Incrementor ( new Incrementor () ) ; FastMath
Code	iterations = new Incrementor ( new Incrementor () ) ; FastMath
Distance : 4

21
Tree	iterations = new Incrementor < iterations > ( null ) ; int
Code	iterations = new Incrementor < iterations > ( null ) ; int
Distance : 7

22
Tree	iterations = new Incrementor < iterations > ( null ) ; double
Code	iterations = new Incrementor < iterations > ( null ) ; double
Distance : 7

23
Tree	iterations = new Incrementor < iterations > ( null ) ; checkState
Code	iterations = new Incrementor < iterations > ( null ) ; checkState
Distance : 7

24
Tree	iterations = new Incrementor < iterations > ( null ) ; IllegalArgumentException
Code	iterations = new Incrementor < iterations > ( null ) ; IllegalArgumentException
Distance : 7

25
Tree	iterations = new Incrementor < iterations > ( null ) ; FastMath
Code	iterations = new Incrementor < iterations > ( null ) ; FastMath
Distance : 7

26
Tree	iterations = new Incrementor < iterations > ( null ) ; assertThat
Code	iterations = new Incrementor < iterations > ( null ) ; assertThat
Distance : 7

27
Tree	iterations = new Incrementor ( new Incrementor () ) ; .
Code	iterations = new Incrementor ( new Incrementor () ) ; .
Distance : 4

28
Tree	iterations = new Incrementor ( new Incrementor () ) ; t
Code	iterations = new Incrementor ( new Incrementor () ) ; t
Distance : 4

29
Tree	iterations = new Incrementor ( new Incrementor () ) ; }
Code	iterations = new Incrementor ( new Incrementor () ) ; }
Distance : 4

30
Tree	iterations = new Incrementor ( new Incrementor () ) ; public
Code	iterations = new Incrementor ( new Incrementor () ) ; public
Distance : 4

31
Tree	iterations = new Incrementor ( new Incrementor () ) ; ArrayList
Code	iterations = new Incrementor ( new Incrementor () ) ; ArrayList
Distance : 4

32
Tree	iterations = new Incrementor ( new Incrementor () ) ; createIllegalArgumentException
Code	iterations = new Incrementor ( new Incrementor () ) ; createIllegalArgumentException
Distance : 4

33
Tree	iterations = new Incrementor ( new Incrementor () ) ; testSame
Code	iterations = new Incrementor ( new Incrementor () ) ; testSame
Distance : 4

34
Tree	iterations = new Incrementor ( new Incrementor () ) ; expected
Code	iterations = new Incrementor ( new Incrementor () ) ; expected
Distance : 4

35
Tree	iterations = new Incrementor ( new Incrementor () ) ; IllegalArgumentException
Code	iterations = new Incrementor ( new Incrementor () ) ; IllegalArgumentException
Distance : 4

36
Tree	iterations = new Incrementor ( new Incrementor () ) ; invocation
Code	iterations = new Incrementor ( new Incrementor () ) ; invocation
Distance : 4

37
Tree	iterations = new Incrementor ( new Incrementor () ) ; String
Code	iterations = new Incrementor ( new Incrementor () ) ; String
Distance : 4

38
Tree	iterations = new Incrementor < iterations > ( null ) ; false
Code	iterations = new Incrementor < iterations > ( null ) ; false
Distance : 7

39
Tree	iterations = new Incrementor ( new Incrementor () ) ; NodeTraversal
Code	iterations = new Incrementor ( new Incrementor () ) ; NodeTraversal
Distance : 4

40
Tree	iterations = new Incrementor ( new Incrementor () ) ; str
Code	iterations = new Incrementor ( new Incrementor () ) ; str
Distance : 4

41
Tree	iterations = new Incrementor ( new Incrementor () ) ; catch
Code	iterations = new Incrementor ( new Incrementor () ) ; catch
Distance : 4

42
Tree	iterations = new Incrementor ( new Incrementor () ) ; <
Code	iterations = new Incrementor ( new Incrementor () ) ; <
Distance : 4

43
Tree	iterations = new Incrementor ( new Incrementor () ) ; final
Code	iterations = new Incrementor ( new Incrementor () ) ; final
Distance : 4

44
Tree	iterations = new Incrementor ( new Incrementor () ) ; return
Code	iterations = new Incrementor ( new Incrementor () ) ; return
Distance : 4

45
Tree	iterations = new Incrementor ( new Incrementor () ) ; this
Code	iterations = new Incrementor ( new Incrementor () ) ; this
Distance : 4

46
Tree	iterations = new Incrementor ( new Incrementor () ) ; >
Code	iterations = new Incrementor ( new Incrementor () ) ; >
Distance : 4

47
Tree	iterations = new Incrementor ( new Incrementor () ) ; if
Code	iterations = new Incrementor ( new Incrementor () ) ; if
Distance : 4

48
Tree	iterations = new Incrementor ( new Incrementor () ) ; f
Code	iterations = new Incrementor ( new Incrementor () ) ; f
Distance : 4

49
Tree	iterations = new Incrementor ( new Incrementor () ) ; class
Code	iterations = new Incrementor ( new Incrementor () ) ; class
Distance : 4

50
Tree	iterations = new Incrementor ( new Incrementor () ) ; nullNotPermitted
Code	iterations = new Incrementor ( new Incrementor () ) ; nullNotPermitted
Distance : 4

51
Tree	iterations = new Incrementor ( new Incrementor () ) ; mode
Code	iterations = new Incrementor ( new Incrementor () ) ; mode
Distance : 4

52
Tree	iterations = new Incrementor ( new Incrementor () ) ; ==
Code	iterations = new Incrementor ( new Incrementor () ) ; ==
Distance : 4

53
Tree	iterations = new Incrementor ( new Incrementor () ) ; []
Code	iterations = new Incrementor ( new Incrementor () ) ; []
Distance : 4

54
Tree	iterations = new Incrementor ( new Incrementor () ) ; @
Code	iterations = new Incrementor ( new Incrementor () ) ; @
Distance : 4

55
Tree	iterations = new Incrementor ( new Incrementor () ) ; assertEquals
Code	iterations = new Incrementor ( new Incrementor () ) ; assertEquals
Distance : 4

56
Tree	iterations = new Incrementor ( new Incrementor () ) ; test
Code	iterations = new Incrementor ( new Incrementor () ) ; test
Distance : 4

57
Tree	iterations = new Incrementor ( new Incrementor () ) ; mock
Code	iterations = new Incrementor ( new Incrementor () ) ; mock
Distance : 4

58
Tree	iterations = new Incrementor ( new Incrementor () ) ; List
Code	iterations = new Incrementor ( new Incrementor () ) ; List
Distance : 4

59
Tree	iterations = new Incrementor ( new Incrementor () ) ; n
Code	iterations = new Incrementor ( new Incrementor () ) ; n
Distance : 4

60
Tree	iterations = new Incrementor ( new Incrementor () ) ; throw
Code	iterations = new Incrementor ( new Incrementor () ) ; throw
Distance : 4

61
Tree	iterations = new Incrementor ( new Incrementor () ) ; <>
Code	iterations = new Incrementor ( new Incrementor () ) ; <>
Distance : 4

62
Tree	iterations = new Incrementor ( new Incrementor () ) ; Args
Code	iterations = new Incrementor ( new Incrementor () ) ; Args
Distance : 4

63
Tree	iterations = new Incrementor ( new Incrementor () ) ; :
Code	iterations = new Incrementor ( new Incrementor () ) ; :
Distance : 4

64
Tree	iterations = new Incrementor ( new Incrementor () ) ; try
Code	iterations = new Incrementor ( new Incrementor () ) ; try
Distance : 4

65
Tree	iterations = new Incrementor ( new Incrementor () ) ; result
Code	iterations = new Incrementor ( new Incrementor () ) ; result
Distance : 4

66
Tree	iterations = new Incrementor ( new MaxIterCallback () ) ; *
Code	iterations = new Incrementor ( new MaxIterCallback () ) ; *
Distance : 3

67
Tree	iterations = new Incrementor ( new Incrementor () ) ; assertThat
Code	iterations = new Incrementor ( new Incrementor () ) ; assertThat
Distance : 4

68
Tree	iterations = new Incrementor ( new Incrementor () ) ; e
Code	iterations = new Incrementor ( new Incrementor () ) ; e
Distance : 4

69
Tree	iterations = new Incrementor ( new Incrementor () ) ; checkState
Code	iterations = new Incrementor ( new Incrementor () ) ; checkState
Distance : 4

70
Tree	iterations = new Incrementor ( new Incrementor () ) ; !
Code	iterations = new Incrementor ( new Incrementor () ) ; !
Distance : 4

71
Tree	iterations = new Incrementor ( new Incrementor () ) ; +
Code	iterations = new Incrementor ( new Incrementor () ) ; +
Distance : 4

72
Tree	iterations = new Incrementor ( new Incrementor () ) ; array
Code	iterations = new Incrementor ( new Incrementor () ) ; array
Distance : 4

73
Tree	iterations = new Incrementor ( new Incrementor () ) ; name
Code	iterations = new Incrementor ( new Incrementor () ) ; name
Distance : 4

74
Tree	iterations = new Incrementor ( new Incrementor () ) ; T
Code	iterations = new Incrementor ( new Incrementor () ) ; T
Distance : 4

75
Tree	iterations = new Incrementor ( new Incrementor () ) ; void
Code	iterations = new Incrementor ( new Incrementor () ) ; void
Distance : 4

76
Tree	iterations = new Incrementor ( new Incrementor () ) ; compiler
Code	iterations = new Incrementor ( new Incrementor () ) ; compiler
Distance : 4

77
Tree	iterations = new Incrementor ( new Incrementor () ) ; super
Code	iterations = new Incrementor ( new Incrementor () ) ; super
Distance : 4

78
Tree	iterations = new Incrementor ( new Incrementor () ) ; int
Code	iterations = new Incrementor ( new Incrementor () ) ; int
Distance : 4

79
Tree	iterations = new Incrementor < iterations > ( null ) ; invocation
Code	iterations = new Incrementor < iterations > ( null ) ; invocation
Distance : 7

80
Tree	iterations = new Incrementor < iterations > ( null ) ; n
Code	iterations = new Incrementor < iterations > ( null ) ; n
Distance : 7

81
Tree	iterations = new Incrementor < iterations > ( null ) ; ;
Code	iterations = new Incrementor < iterations > ( null ) ; ;
Distance : 7

82
Tree	iterations = new Incrementor < iterations > ( null ) ; <blank>
Code	iterations = new Incrementor < iterations > ( null ) ; <blank>
Distance : 7

83
Tree	iterations = new Incrementor < iterations > ( null ) ; .
Code	iterations = new Incrementor < iterations > ( null ) ; .
Distance : 7

84
Tree	iterations = new Incrementor < iterations > ( null ) ; ,
Code	iterations = new Incrementor < iterations > ( null ) ; ,
Distance : 7

85
Tree	iterations = new Incrementor < iterations > ( null ) ; (
Code	iterations = new Incrementor < iterations > ( null ) ; (
Distance : 7

86
Tree	iterations = new Incrementor < iterations > ( null ) ; <s>
Code	iterations = new Incrementor < iterations > ( null ) ; <s>
Distance : 7

87
Tree	iterations = new Incrementor < iterations > ( null ) ; )
Code	iterations = new Incrementor < iterations > ( null ) ; )
Distance : 7

88
Tree	iterations = new Incrementor < iterations > ( null ) ; ()
Code	iterations = new Incrementor < iterations > ( null ) ; ()
Distance : 7

89
Tree	iterations = new Incrementor < iterations > ( null ) ; T
Code	iterations = new Incrementor < iterations > ( null ) ; T
Distance : 7

90
Tree	iterations = new Incrementor ( new Incrementor () ) ; i
Code	iterations = new Incrementor ( new Incrementor () ) ; i
Distance : 4

91
Tree	iterations = new Incrementor ( new Incrementor () ) ; {
Code	iterations = new Incrementor ( new Incrementor () ) ; {
Distance : 4

92
Tree	iterations = new Incrementor ( new Incrementor () ) ; (
Code	iterations = new Incrementor ( new Incrementor () ) ; (
Distance : 4

93
Tree	iterations = new Incrementor ( new Incrementor () ) ; ;
Code	iterations = new Incrementor ( new Incrementor () ) ; ;
Distance : 4

94
Tree	iterations = new Incrementor ( new Incrementor () ) ; <blank>
Code	iterations = new Incrementor ( new Incrementor () ) ; <blank>
Distance : 4

95
Tree	iterations = new Incrementor ( new Incrementor () ) ; ;
Code	iterations = new Incrementor ( new Incrementor () ) ; ;
Distance : 4

96
Tree	iterations = new Incrementor ( new Incrementor () ) ; <s>
Code	iterations = new Incrementor ( new Incrementor () ) ; <s>
Distance : 4

97
Tree	iterations = new Incrementor < iterations > ( null ) ; &&
Code	iterations = new Incrementor < iterations > ( null ) ; &&
Distance : 7

98
Tree	iterations = new Incrementor ( new Incrementor () ) ; )
Code	iterations = new Incrementor ( new Incrementor () ) ; )
Distance : 4

99
Tree	iterations = new Incrementor < iterations > ( null ) ; {
Code	iterations = new Incrementor < iterations > ( null ) ; {
Distance : 7

========================================================================


========================================================================
Example Number: 78
Parent Code is: 
if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
-------------------------------------------------------------------------------
Child code is: 
if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=real}) (236{val===}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=imaginary}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=NaN}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=real}) (236{val===}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=imaginary}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=INF}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/5/parent/src_main_java_org_apache_commons_math3_complex_Complex.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	if ( imaginary == NUMBER_CONSTANT && real < NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && real < NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 5

1
Tree	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + NaN ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + NaN ) { return NaN ; }
Distance : 4

2
Tree	if ( real == NUMBER_CONSTANT && NaN == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

3
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary && imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary && imaginary ) { return NaN ; }
Distance : 4

4
Tree	if ( real == NUMBER_CONSTANT && NaN == STRING_CONSTANT + imaginary ) { return imaginary ; }
Code	if ( real == NUMBER_CONSTANT && NaN == STRING_CONSTANT + imaginary ) { return imaginary ; }
Distance : 5

5
Tree	if ( NaN == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return real ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return real ; }
Distance : 3

6
Tree	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 5

7
Tree	if ( imaginary == NUMBER_CONSTANT && NaN > real ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && NaN > real ) { return NaN ; }
Distance : 5

8
Tree	if ( real == NUMBER_CONSTANT && imaginary <= imaginary ) { return imaginary ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= imaginary ) { return imaginary ; }
Distance : 3

9
Tree	if ( real == NUMBER_CONSTANT && real == real == NUMBER_CONSTANT ) { return real ; }
Code	if ( real == NUMBER_CONSTANT && real == real == NUMBER_CONSTANT ) { return real ; }
Distance : 4

10
Tree	if ( real == NUMBER_CONSTANT && NaN < STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN < STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 6

11
Tree	if ( real == NUMBER_CONSTANT && imaginary <= imaginary ) { return imaginary ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= imaginary ) { return imaginary ; }
Distance : 3

12
Tree	if ( imaginary == NUMBER_CONSTANT && real < imaginary == NUMBER_CONSTANT ) { return real ; }
Code	if ( imaginary == NUMBER_CONSTANT && real < imaginary == NUMBER_CONSTANT ) { return real ; }
Distance : 4

13
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 1

14
Tree	if ( real == NUMBER_CONSTANT && imaginary <= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= imaginary ) { return NaN ; }
Distance : 3

15
Tree	if ( real == NUMBER_CONSTANT && imaginary == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

16
Tree	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return imaginary ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return imaginary ; }
Distance : 3

17
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary == real == NUMBER_CONSTANT ) { return real ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary == real == NUMBER_CONSTANT ) { return real ; }
Distance : 4

18
Tree	if ( real == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return imaginary ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return imaginary ; }
Distance : 3

19
Tree	if ( imaginary == NUMBER_CONSTANT && real > imaginary ) { return real ; }
Code	if ( imaginary == NUMBER_CONSTANT && real > imaginary ) { return real ; }
Distance : 5

20
Tree	if ( real == NUMBER_CONSTANT && real < real == NUMBER_CONSTANT ) { return real ; }
Code	if ( real == NUMBER_CONSTANT && real < real == NUMBER_CONSTANT ) { return real ; }
Distance : 4

21
Tree	if ( NaN == NUMBER_CONSTANT && NaN < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && NaN < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

22
Tree	if ( real == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return NaN ; }
Distance : 2

23
Tree	if ( real == NUMBER_CONSTANT && imaginary == imaginary == NUMBER_CONSTANT ) { return imaginary ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == imaginary == NUMBER_CONSTANT ) { return imaginary ; }
Distance : 3

24
Tree	if ( NaN == NUMBER_CONSTANT && imaginary && NaN ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary && NaN ) { return NaN ; }
Distance : 4

25
Tree	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return real ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return real ; }
Distance : 4

26
Tree	if ( NaN == NUMBER_CONSTANT && imaginary >= imaginary ) { return real ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary >= imaginary ) { return real ; }
Distance : 4

27
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return imaginary ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return imaginary ; }
Distance : 1

28
Tree	if ( NaN == NUMBER_CONSTANT && imaginary && imaginary ) { return real ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary && imaginary ) { return real ; }
Distance : 4

29
Tree	if ( NaN == NUMBER_CONSTANT && imaginary <= real ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary <= real ) { return NaN ; }
Distance : 4

30
Tree	if ( real == NUMBER_CONSTANT && NaN > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN > imaginary ) { return NaN ; }
Distance : 4

31
Tree	if ( real == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

32
Tree	if ( NaN == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

33
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary != imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary != imaginary ) { return NaN ; }
Distance : 4

34
Tree	if ( imaginary == NUMBER_CONSTANT && real <= NaN ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && real <= NaN ) { return NaN ; }
Distance : 5

35
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary <= real ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary <= real ) { return NaN ; }
Distance : 4

36
Tree	if ( NaN == NUMBER_CONSTANT && real == STRING_CONSTANT + imaginary ) { return real ; }
Code	if ( NaN == NUMBER_CONSTANT && real == STRING_CONSTANT + imaginary ) { return real ; }
Distance : 6

37
Tree	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + real ) { return NaN ; }
Distance : 5

38
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return imaginary ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return imaginary ; }
Distance : 2

39
Tree	if ( NaN == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 5

40
Tree	if ( real == NUMBER_CONSTANT && this == real ) { return real ; }
Code	if ( real == NUMBER_CONSTANT && this == real ) { return real ; }
Distance : 3

41
Tree	if ( NaN == NUMBER_CONSTANT && real < STRING_CONSTANT + imaginary ) { return real ; }
Code	if ( NaN == NUMBER_CONSTANT && real < STRING_CONSTANT + imaginary ) { return real ; }
Distance : 7

42
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return NaN ; }
Distance : 3

43
Tree	if ( real == NUMBER_CONSTANT && imaginary >= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary >= imaginary ) { return NaN ; }
Distance : 3

44
Tree	if ( real == NUMBER_CONSTANT && real == STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real == STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 5

45
Tree	if ( imaginary == NUMBER_CONSTANT && NaN == STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && NaN == STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 6

46
Tree	if ( real == NUMBER_CONSTANT && imaginary && imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary && imaginary ) { return NaN ; }
Distance : 3

47
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 5

48
Tree	if ( NaN == NUMBER_CONSTANT && imaginary >= real ) { return real ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary >= real ) { return real ; }
Distance : 4

49
Tree	if ( real == NUMBER_CONSTANT && imaginary && NaN ) { return imaginary ; }
Code	if ( real == NUMBER_CONSTANT && imaginary && NaN ) { return imaginary ; }
Distance : 3

50
Tree	if ( NaN == NUMBER_CONSTANT && imaginary != real ) { return real ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary != real ) { return real ; }
Distance : 4

51
Tree	if ( NaN == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

52
Tree	if ( imaginary == NUMBER_CONSTANT && this == imaginary ) { return imaginary ; }
Code	if ( imaginary == NUMBER_CONSTANT && this == imaginary ) { return imaginary ; }
Distance : 4

53
Tree	if ( real == NUMBER_CONSTANT && NaN < STRING_CONSTANT + imaginary ) { return imaginary ; }
Code	if ( real == NUMBER_CONSTANT && NaN < STRING_CONSTANT + imaginary ) { return imaginary ; }
Distance : 6

54
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + NaN ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + NaN ) { return NaN ; }
Distance : 5

55
Tree	if ( real == NUMBER_CONSTANT && imaginary != imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != imaginary ) { return NaN ; }
Distance : 3

56
Tree	if ( real == NUMBER_CONSTANT && real >= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real >= imaginary ) { return NaN ; }
Distance : 4

57
Tree	if ( NaN == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 6

58
Tree	if ( real == NUMBER_CONSTANT && NaN == CHAR_CONS ) { return imaginary ; }
Code	if ( real == NUMBER_CONSTANT && NaN == CHAR_CONS ) { return imaginary ; }
Distance : 3

59
Tree	if ( imaginary == NUMBER_CONSTANT && this == NaN ) { return real ; }
Code	if ( imaginary == NUMBER_CONSTANT && this == NaN ) { return real ; }
Distance : 4

60
Tree	if ( real == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

61
Tree	if ( NaN == NUMBER_CONSTANT && real >= imaginary ) { return real ; }
Code	if ( NaN == NUMBER_CONSTANT && real >= imaginary ) { return real ; }
Distance : 5

62
Tree	if ( NaN == NUMBER_CONSTANT && this == real ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && this == real ) { return NaN ; }
Distance : 4

63
Tree	if ( NaN == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + real ) { return real ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + real ) { return real ; }
Distance : 6

64
Tree	if ( NaN == NUMBER_CONSTANT && real == CHAR_CONS ) { return real ; }
Code	if ( NaN == NUMBER_CONSTANT && real == CHAR_CONS ) { return real ; }
Distance : 4

65
Tree	if ( imaginary == NUMBER_CONSTANT && NaN < STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && NaN < STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 7

66
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 6

67
Tree	if ( real == NUMBER_CONSTANT && real == STRING_CONSTANT + imaginary ) { return real ; }
Code	if ( real == NUMBER_CONSTANT && real == STRING_CONSTANT + imaginary ) { return real ; }
Distance : 5

68
Tree	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + real ) { return NaN ; }
Distance : 4

69
Tree	if ( real == NUMBER_CONSTANT && real < STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real < STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 6

70
Tree	if ( NaN == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return real ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return real ; }
Distance : 6

71
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary && imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary && imaginary ) { return NaN ; }
Distance : 4

72
Tree	if ( real == NUMBER_CONSTANT && disallowGlobalThis () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && disallowGlobalThis () == null ) { return NaN ; }
Distance : 4

73
Tree	if ( real == NUMBER_CONSTANT && imaginary < currentScript.rootNode ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < currentScript.rootNode ) { return NaN ; }
Distance : 3

74
Tree	if ( real == NUMBER_CONSTANT && intValue () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && intValue () == null ) { return NaN ; }
Distance : 4

75
Tree	if ( real == NUMBER_CONSTANT && sequence == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && sequence == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

76
Tree	if ( real == NUMBER_CONSTANT && Beta () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && Beta () == null ) { return NaN ; }
Distance : 4

77
Tree	if ( real == NUMBER_CONSTANT && getFunTypeIfSingletonObj () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && getFunTypeIfSingletonObj () == null ) { return NaN ; }
Distance : 4

78
Tree	if ( real == NUMBER_CONSTANT && imaginary < DecompositionType.UNDECOMPOSABLE ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < DecompositionType.UNDECOMPOSABLE ) { return NaN ; }
Distance : 3

79
Tree	if ( real == NUMBER_CONSTANT && format () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && format () == null ) { return NaN ; }
Distance : 4

80
Tree	if ( real == NUMBER_CONSTANT && normalizeChildren () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && normalizeChildren () == null ) { return NaN ; }
Distance : 4

81
Tree	if ( real == NUMBER_CONSTANT && imaginary < TracerMode.ALL ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < TracerMode.ALL ) { return NaN ; }
Distance : 3

82
Tree	if ( real == NUMBER_CONSTANT && imaginary == toMaybeTemplatizedType () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == toMaybeTemplatizedType () ) { return NaN ; }
Distance : 3

83
Tree	if ( real == NUMBER_CONSTANT && imaginary < CallSiteType.UNSUPPORTED ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < CallSiteType.UNSUPPORTED ) { return NaN ; }
Distance : 3

84
Tree	if ( real == NUMBER_CONSTANT && toArrayPropagatingType () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && toArrayPropagatingType () == null ) { return NaN ; }
Distance : 4

85
Tree	if ( real == NUMBER_CONSTANT && imaginary != startPoint.length ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != startPoint.length ) { return NaN ; }
Distance : 3

86
Tree	if ( real == NUMBER_CONSTANT && imaginary < objType.nominalType ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < objType.nominalType ) { return NaN ; }
Distance : 3

87
Tree	if ( real == NUMBER_CONSTANT && ref.node == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && ref.node == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

88
Tree	if ( real == NUMBER_CONSTANT && imaginary == getPackageName () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == getPackageName () ) { return NaN ; }
Distance : 3

89
Tree	if ( real == NUMBER_CONSTANT && JsDocToken.PIPE == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && JsDocToken.PIPE == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

90
Tree	if ( real == NUMBER_CONSTANT && model.steps == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && model.steps == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

91
Tree	if ( real == NUMBER_CONSTANT && imaginary <= LocalizedFormats.NUMBER_TOO_SMALL () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= LocalizedFormats.NUMBER_TOO_SMALL () ) { return NaN ; }
Distance : 4

92
Tree	if ( real == NUMBER_CONSTANT && imaginary == containsNow () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == containsNow () ) { return NaN ; }
Distance : 3

93
Tree	if ( real == NUMBER_CONSTANT && imaginary == getNumberOfEquations () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == getNumberOfEquations () ) { return NaN ; }
Distance : 3

94
Tree	if ( real == NUMBER_CONSTANT && loadExpIntB () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && loadExpIntB () == null ) { return NaN ; }
Distance : 4

95
Tree	if ( real == NUMBER_CONSTANT && LiveVariablesAnalysisEs6.MAX_VARIABLES_TO_ANALYZE == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && LiveVariablesAnalysisEs6.MAX_VARIABLES_TO_ANALYZE == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

96
Tree	if ( real == NUMBER_CONSTANT && getNumberOfEquations () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && getNumberOfEquations () == null ) { return NaN ; }
Distance : 4

97
Tree	if ( real == NUMBER_CONSTANT && other.isLoose () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && other.isLoose () == null ) { return NaN ; }
Distance : 4

98
Tree	if ( real == NUMBER_CONSTANT && isRead () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && isRead () == null ) { return NaN ; }
Distance : 4

99
Tree	if ( real == NUMBER_CONSTANT && isConstructorStack () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && isConstructorStack () == null ) { return NaN ; }
Distance : 4

========================================================================


========================================================================
Example Number: 79
Parent Code is: 
new Reporter () . smartNullPointerException ( location ) ;
-------------------------------------------------------------------------------
Child code is: 
new Reporter () . smartNullPointerException ( obj , location ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (32 (14 (304{val=new}) (43 (801{val=Reporter})) (216{val=()})) (235{val=.}) (802{val=smartNullPointerException}) (214{val=(}) (800{val=location}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (32 (14 (304{val=new}) (43 (801{val=Reporter})) (216{val=()})) (235{val=.}) (802{val=smartNullPointerException}) (214{val=(}) (800{val=obj}) (234{val=,}) (800{val=location}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/30/parent/src_org_mockito_internal_stubbing_defaultanswers_ReturnsSmartNulls.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	location . smartNullPointerException () . smartNullPointerException ( location ) ; fireChangeEvent
Code	location . smartNullPointerException () . smartNullPointerException ( location ) ; fireChangeEvent
Distance : 6

1
Tree	new Reporter () . smartNullPointerException ( location ) ; int
Code	new Reporter () . smartNullPointerException ( location ) ; int
Distance : 3

2
Tree	new Reporter () . smartNullPointerException ( location ) ; double
Code	new Reporter () . smartNullPointerException ( location ) ; double
Distance : 3

3
Tree	new Reporter () . smartNullPointerException ( location ) ; checkState
Code	new Reporter () . smartNullPointerException ( location ) ; checkState
Distance : 3

4
Tree	new Reporter () . smartNullPointerException ( location ) ; nullNotPermitted
Code	new Reporter () . smartNullPointerException ( location ) ; nullNotPermitted
Distance : 3

5
Tree	new Reporter () . smartNullPointerException ( location ) ; []
Code	new Reporter () . smartNullPointerException ( location ) ; []
Distance : 3

6
Tree	new Reporter () . smartNullPointerException ( location ) ; void
Code	new Reporter () . smartNullPointerException ( location ) ; void
Distance : 3

7
Tree	new Reporter () . smartNullPointerException ( location ) ; ==
Code	new Reporter () . smartNullPointerException ( location ) ; ==
Distance : 3

8
Tree	new Reporter () . smartNullPointerException ( location ) ; assertEquals
Code	new Reporter () . smartNullPointerException ( location ) ; assertEquals
Distance : 3

9
Tree	new Reporter () . smartNullPointerException ( location ) ; !
Code	new Reporter () . smartNullPointerException ( location ) ; !
Distance : 3

10
Tree	new Reporter () . smartNullPointerException ( location ) ; @
Code	new Reporter () . smartNullPointerException ( location ) ; @
Distance : 3

11
Tree	new Reporter () . smartNullPointerException ( location ) ; test
Code	new Reporter () . smartNullPointerException ( location ) ; test
Distance : 3

12
Tree	new Reporter () . smartNullPointerException ( location ) ; Override
Code	new Reporter () . smartNullPointerException ( location ) ; Override
Distance : 3

13
Tree	new Reporter () . smartNullPointerException ( location ) ; false
Code	new Reporter () . smartNullPointerException ( location ) ; false
Distance : 3

14
Tree	new Reporter () . smartNullPointerException ( location ) ; mock
Code	new Reporter () . smartNullPointerException ( location ) ; mock
Distance : 3

15
Tree	new Reporter () . smartNullPointerException ( location ) ; ]
Code	new Reporter () . smartNullPointerException ( location ) ; ]
Distance : 3

16
Tree	new Reporter () . smartNullPointerException ( location ) ; &&
Code	new Reporter () . smartNullPointerException ( location ) ; &&
Distance : 3

17
Tree	new Reporter () . smartNullPointerException ( location ) ; T
Code	new Reporter () . smartNullPointerException ( location ) ; T
Distance : 3

18
Tree	new Reporter () . smartNullPointerException ( location ) ; Preconditions
Code	new Reporter () . smartNullPointerException ( location ) ; Preconditions
Distance : 3

19
Tree	new Reporter () . smartNullPointerException ( location ) ; -
Code	new Reporter () . smartNullPointerException ( location ) ; -
Distance : 3

20
Tree	new Reporter () . smartNullPointerException ( location ) ; class
Code	new Reporter () . smartNullPointerException ( location ) ; class
Distance : 3

21
Tree	new Reporter () . smartNullPointerException ( location ) ; Object
Code	new Reporter () . smartNullPointerException ( location ) ; Object
Distance : 3

22
Tree	new Reporter () . smartNullPointerException ( location ) ; boolean
Code	new Reporter () . smartNullPointerException ( location ) ; boolean
Distance : 3

23
Tree	new Reporter () . smartNullPointerException ( location ) ; checkArgument
Code	new Reporter () . smartNullPointerException ( location ) ; checkArgument
Distance : 3

24
Tree	new Reporter () . smartNullPointerException ( location ) ; data
Code	new Reporter () . smartNullPointerException ( location ) ; data
Distance : 3

25
Tree	new Reporter () . smartNullPointerException ( location ) ; List
Code	new Reporter () . smartNullPointerException ( location ) ; List
Distance : 3

26
Tree	new Reporter () . smartNullPointerException ( location ) ; Args
Code	new Reporter () . smartNullPointerException ( location ) ; Args
Distance : 3

27
Tree	new Reporter () . smartNullPointerException ( location ) ; [
Code	new Reporter () . smartNullPointerException ( location ) ; [
Distance : 3

28
Tree	new Reporter () . smartNullPointerException ( location ) ; array
Code	new Reporter () . smartNullPointerException ( location ) ; array
Distance : 3

29
Tree	new Reporter () . smartNullPointerException ( location ) ; type
Code	new Reporter () . smartNullPointerException ( location ) ; type
Distance : 3

30
Tree	new Reporter () . smartNullPointerException ( location ) ; getInstance
Code	new Reporter () . smartNullPointerException ( location ) ; getInstance
Distance : 3

31
Tree	location . smartNullPointerException ( location , new Reporter () ) ; this
Code	location . smartNullPointerException ( location , new Reporter () ) ; this
Distance : 8

32
Tree	location . smartNullPointerException ( location , new Reporter () ) ; <
Code	location . smartNullPointerException ( location , new Reporter () ) ; <
Distance : 8

33
Tree	location . smartNullPointerException ( location , new Reporter () ) ; if
Code	location . smartNullPointerException ( location , new Reporter () ) ; if
Distance : 8

34
Tree	location . smartNullPointerException ( location , new Reporter () ) ; ]
Code	location . smartNullPointerException ( location , new Reporter () ) ; ]
Distance : 8

35
Tree	location . smartNullPointerException ( location , new Reporter () ) ; [
Code	location . smartNullPointerException ( location , new Reporter () ) ; [
Distance : 8

36
Tree	location . smartNullPointerException ( location , new Reporter () ) ; Preconditions
Code	location . smartNullPointerException ( location , new Reporter () ) ; Preconditions
Distance : 8

37
Tree	location . smartNullPointerException ( location , new Reporter () ) ; -
Code	location . smartNullPointerException ( location , new Reporter () ) ; -
Distance : 8

38
Tree	smartNullPointerException ( location , obj , obj ) ; FastMath
Code	smartNullPointerException ( location , obj , obj ) ; FastMath
Distance : 8

39
Tree	smartNullPointerException ( location , obj , obj ) ; *
Code	smartNullPointerException ( location , obj , obj ) ; *
Distance : 8

40
Tree	smartNullPointerException ( location , obj , obj ) ; expected
Code	smartNullPointerException ( location , obj , obj ) ; expected
Distance : 8

41
Tree	smartNullPointerException ( location , obj , obj ) ; reportCodeChange
Code	smartNullPointerException ( location , obj , obj ) ; reportCodeChange
Distance : 8

42
Tree	smartNullPointerException ( location , obj , obj ) ; List
Code	smartNullPointerException ( location , obj , obj ) ; List
Distance : 8

43
Tree	new Reporter () . smartNullPointerException ( location ) ; *
Code	new Reporter () . smartNullPointerException ( location ) ; *
Distance : 3

44
Tree	smartNullPointerException ( location , obj , obj ) ; Args
Code	smartNullPointerException ( location , obj , obj ) ; Args
Distance : 8

45
Tree	smartNullPointerException ( location , obj , obj ) ; try
Code	smartNullPointerException ( location , obj , obj ) ; try
Distance : 8

46
Tree	smartNullPointerException ( location , obj , obj ) ; ArrayList
Code	smartNullPointerException ( location , obj , obj ) ; ArrayList
Distance : 8

47
Tree	smartNullPointerException ( location , obj , obj ) ; fireChangeEvent
Code	smartNullPointerException ( location , obj , obj ) ; fireChangeEvent
Distance : 8

48
Tree	smartNullPointerException ( location , obj , obj ) ; getInstance
Code	smartNullPointerException ( location , obj , obj ) ; getInstance
Distance : 8

49
Tree	smartNullPointerException ( location , obj , obj ) ; serialised
Code	smartNullPointerException ( location , obj , obj ) ; serialised
Distance : 8

50
Tree	smartNullPointerException ( location , obj , obj ) ; join
Code	smartNullPointerException ( location , obj , obj ) ; join
Distance : 8

51
Tree	smartNullPointerException ( location , obj , obj ) ; paint
Code	smartNullPointerException ( location , obj , obj ) ; paint
Distance : 8

52
Tree	location . smartNullPointerException ( location , new Reporter () ) ; LINE_JOINER
Code	location . smartNullPointerException ( location , new Reporter () ) ; LINE_JOINER
Distance : 8

53
Tree	location . smartNullPointerException ( location , new Reporter () ) ; assertThat
Code	location . smartNullPointerException ( location , new Reporter () ) ; assertThat
Distance : 8

54
Tree	location . smartNullPointerException ( location , new Reporter () ) ; invocation
Code	location . smartNullPointerException ( location , new Reporter () ) ; invocation
Distance : 8

55
Tree	location . smartNullPointerException ( location , new Reporter () ) ; ArrayList
Code	location . smartNullPointerException ( location , new Reporter () ) ; ArrayList
Distance : 8

56
Tree	new Reporter () . smartNullPointerException ( location ) ; serialised
Code	new Reporter () . smartNullPointerException ( location ) ; serialised
Distance : 3

57
Tree	smartNullPointerException ( location , obj , obj ) ; fail
Code	smartNullPointerException ( location , obj , obj ) ; fail
Distance : 8

58
Tree	new Reporter () . smartNullPointerException ( location ) ; <>
Code	new Reporter () . smartNullPointerException ( location ) ; <>
Distance : 3

59
Tree	new Reporter () . smartNullPointerException ( location ) ; try
Code	new Reporter () . smartNullPointerException ( location ) ; try
Distance : 3

60
Tree	new Reporter () . smartNullPointerException ( location ) ; fail
Code	new Reporter () . smartNullPointerException ( location ) ; fail
Distance : 3

61
Tree	new Reporter () . smartNullPointerException ( location ) ; ,
Code	new Reporter () . smartNullPointerException ( location ) ; ,
Distance : 3

62
Tree	location . smartNullPointerException ( location , new Reporter () ) ; f
Code	location . smartNullPointerException ( location , new Reporter () ) ; f
Distance : 8

63
Tree	location . smartNullPointerException ( location , new Reporter () ) ; result
Code	location . smartNullPointerException ( location , new Reporter () ) ; result
Distance : 8

64
Tree	location . smartNullPointerException ( location , new Reporter () ) ; :
Code	location . smartNullPointerException ( location , new Reporter () ) ; :
Distance : 8

65
Tree	location . smartNullPointerException ( location , new Reporter () ) ; boolean
Code	location . smartNullPointerException ( location , new Reporter () ) ; boolean
Distance : 8

66
Tree	location . smartNullPointerException ( location , new Reporter () ) ; m
Code	location . smartNullPointerException ( location , new Reporter () ) ; m
Distance : 8

67
Tree	location . smartNullPointerException ( location , new Reporter () ) ; x
Code	location . smartNullPointerException ( location , new Reporter () ) ; x
Distance : 8

68
Tree	location . smartNullPointerException ( location , new Reporter () ) ; testSame
Code	location . smartNullPointerException ( location , new Reporter () ) ; testSame
Distance : 8

69
Tree	location . smartNullPointerException ( location , new Reporter () ) ; parent
Code	location . smartNullPointerException ( location , new Reporter () ) ; parent
Distance : 8

70
Tree	location . smartNullPointerException ( location , new Reporter () ) ; createIllegalArgumentException
Code	location . smartNullPointerException ( location , new Reporter () ) ; createIllegalArgumentException
Distance : 8

71
Tree	location . smartNullPointerException ( location , new Reporter () ) ; serialised
Code	location . smartNullPointerException ( location , new Reporter () ) ; serialised
Distance : 8

72
Tree	location . smartNullPointerException ( location , new Reporter () ) ; getInstance
Code	location . smartNullPointerException ( location , new Reporter () ) ; getInstance
Distance : 8

73
Tree	location . smartNullPointerException ( location , new Reporter () ) ; ParamChecks
Code	location . smartNullPointerException ( location , new Reporter () ) ; ParamChecks
Distance : 8

74
Tree	location . smartNullPointerException ( location , new Reporter () ) ; fireChangeEvent
Code	location . smartNullPointerException ( location , new Reporter () ) ; fireChangeEvent
Distance : 8

75
Tree	new Reporter () . smartNullPointerException ( location ) ; .
Code	new Reporter () . smartNullPointerException ( location ) ; .
Distance : 3

76
Tree	new Reporter () . smartNullPointerException ( location ) ; t
Code	new Reporter () . smartNullPointerException ( location ) ; t
Distance : 3

77
Tree	new Reporter () . smartNullPointerException ( location ) ; return
Code	new Reporter () . smartNullPointerException ( location ) ; return
Distance : 3

78
Tree	new Reporter () . smartNullPointerException ( location ) ; field
Code	new Reporter () . smartNullPointerException ( location ) ; field
Distance : 3

79
Tree	new Reporter () . smartNullPointerException ( location ) ; value
Code	new Reporter () . smartNullPointerException ( location ) ; value
Distance : 3

80
Tree	new Reporter () . smartNullPointerException ( location ) ; i
Code	new Reporter () . smartNullPointerException ( location ) ; i
Distance : 3

81
Tree	new Reporter () . smartNullPointerException ( location ) ; throw
Code	new Reporter () . smartNullPointerException ( location ) ; throw
Distance : 3

82
Tree	new Reporter () . smartNullPointerException ( location ) ; catch
Code	new Reporter () . smartNullPointerException ( location ) ; catch
Distance : 3

83
Tree	new Reporter () . smartNullPointerException ( location ) ; +
Code	new Reporter () . smartNullPointerException ( location ) ; +
Distance : 3

84
Tree	new Reporter () . smartNullPointerException ( location ) ; null
Code	new Reporter () . smartNullPointerException ( location ) ; null
Distance : 3

85
Tree	new Reporter () . smartNullPointerException ( location ) ; String
Code	new Reporter () . smartNullPointerException ( location ) ; String
Distance : 3

86
Tree	new Reporter () . smartNullPointerException ( location ) ; compiler
Code	new Reporter () . smartNullPointerException ( location ) ; compiler
Distance : 3

87
Tree	new Reporter () . smartNullPointerException ( location ) ; STRING_CONSTANT
Code	new Reporter () . smartNullPointerException ( location ) ; STRING_CONSTANT
Distance : 3

88
Tree	location . smartNullPointerException ( location , new Reporter () ) ; <>
Code	location . smartNullPointerException ( location , new Reporter () ) ; <>
Distance : 8

89
Tree	location . smartNullPointerException ( location , new Reporter () ) ; add
Code	location . smartNullPointerException ( location , new Reporter () ) ; add
Distance : 8

90
Tree	location . smartNullPointerException ( location , new Reporter () ) ; name
Code	location . smartNullPointerException ( location , new Reporter () ) ; name
Distance : 8

91
Tree	new Reporter () . smartNullPointerException ( location ) ; join
Code	new Reporter () . smartNullPointerException ( location ) ; join
Distance : 3

92
Tree	new Reporter () . smartNullPointerException ( location ) ; reportCodeChange
Code	new Reporter () . smartNullPointerException ( location ) ; reportCodeChange
Distance : 3

93
Tree	new Reporter () . smartNullPointerException ( location ) ; str
Code	new Reporter () . smartNullPointerException ( location ) ; str
Distance : 3

94
Tree	new Reporter () . smartNullPointerException ( location ) ; LINE_JOINER
Code	new Reporter () . smartNullPointerException ( location ) ; LINE_JOINER
Distance : 3

95
Tree	new Reporter () . smartNullPointerException ( location ) ; testSame
Code	new Reporter () . smartNullPointerException ( location ) ; testSame
Distance : 3

96
Tree	new Reporter () . smartNullPointerException ( location ) ; x
Code	new Reporter () . smartNullPointerException ( location ) ; x
Distance : 3

97
Tree	new Reporter () . smartNullPointerException ( location ) ; ArrayList
Code	new Reporter () . smartNullPointerException ( location ) ; ArrayList
Distance : 3

98
Tree	new Reporter () . smartNullPointerException ( location ) ; fireChangeEvent
Code	new Reporter () . smartNullPointerException ( location ) ; fireChangeEvent
Distance : 3

99
Tree	new Reporter () . smartNullPointerException ( location ) ; parent
Code	new Reporter () . smartNullPointerException ( location ) ; parent
Distance : 3

========================================================================


========================================================================
Example Number: 80
Parent Code is: 
return getMock ( invocation ) ;
-------------------------------------------------------------------------------
Child code is: 
return getMock ( invocation , returnTypeGenericMetadata ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=getMock}) (214{val=(}) (800{val=invocation}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=getMock}) (214{val=(}) (800{val=invocation}) (234{val=,}) (800{val=returnTypeGenericMetadata}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/25/parent/src_org_mockito_internal_stubbing_defaultanswers_ReturnsDeepStubs.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	return returnTypeGenericMetadata + invocation . getMock ( invocation , NUMBER_CONSTANT , invocation . getMock () ) ; parent
Code	return returnTypeGenericMetadata + invocation . getMock ( invocation , NUMBER_CONSTANT , invocation . getMock () ) ; parent
Distance : 11

1
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ; String
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ; String
Distance : 5

2
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ; e
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ; e
Distance : 5

3
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ; :
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ; :
Distance : 5

4
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; .
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; .
Distance : 7

5
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ; f
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ; f
Distance : 5

6
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; !
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; !
Distance : 7

7
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; double
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; double
Distance : 7

8
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; super
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; super
Distance : 7

9
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; !=
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; !=
Distance : 7

10
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ; compiler
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ; compiler
Distance : 5

11
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; reportCodeChange
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; reportCodeChange
Distance : 7

12
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; FastMath
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; FastMath
Distance : 7

13
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; IllegalArgumentException
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; IllegalArgumentException
Distance : 7

14
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; class
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; class
Distance : 7

15
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; Object
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; Object
Distance : 7

16
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; mock
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; mock
Distance : 7

17
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; Override
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; Override
Distance : 7

18
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; &&
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; &&
Distance : 7

19
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; T
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; T
Distance : 7

20
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; i
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; i
Distance : 7

21
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; expected
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; expected
Distance : 7

22
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ; checkState
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ; checkState
Distance : 5

23
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ; double
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ; double
Distance : 5

24
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ; super
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ; super
Distance : 5

25
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; createIllegalArgumentException
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; createIllegalArgumentException
Distance : 7

26
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; parent
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; parent
Distance : 7

27
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; testSame
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; testSame
Distance : 7

28
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; x
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; x
Distance : 7

29
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; m
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; m
Distance : 7

30
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ; STRING_CONSTANT
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ; STRING_CONSTANT
Distance : 5

31
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ; return
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ; return
Distance : 5

32
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ; mode
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ; mode
Distance : 5

33
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ; FastMath
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ; FastMath
Distance : 5

34
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ; value
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ; value
Distance : 5

35
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ; i
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ; i
Distance : 5

36
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ; T
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ; T
Distance : 5

37
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ; Override
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ; Override
Distance : 5

38
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ; mock
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ; mock
Distance : 5

39
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ; Object
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ; Object
Distance : 5

40
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ; class
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ; class
Distance : 5

41
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ; IllegalArgumentException
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ; IllegalArgumentException
Distance : 5

42
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ; expected
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ; expected
Distance : 5

43
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ; n
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ; n
Distance : 5

44
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ; reportCodeChange
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ; reportCodeChange
Distance : 5

45
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ; !=
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ; !=
Distance : 5

46
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; value
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; value
Distance : 7

47
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ; <blank>
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ; <blank>
Distance : 5

48
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; mode
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; mode
Distance : 7

49
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; {}
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; {}
Distance : 7

50
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ; ParamChecks
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ; ParamChecks
Distance : 5

51
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; nullNotPermitted
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; nullNotPermitted
Distance : 7

52
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; ArrayList
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; ArrayList
Distance : 7

53
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; fireChangeEvent
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; fireChangeEvent
Distance : 7

54
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; getInstance
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; getInstance
Distance : 7

55
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; serialised
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; serialised
Distance : 7

56
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; =
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; =
Distance : 7

57
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; final
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; final
Distance : 7

58
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; this
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; this
Distance : 7

59
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; []
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; []
Distance : 7

60
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; <
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; <
Distance : 7

61
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; ]
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; ]
Distance : 7

62
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; [
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; [
Distance : 7

63
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; Preconditions
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; Preconditions
Distance : 7

64
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ; t
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ; t
Distance : 5

65
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ; name
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ; name
Distance : 5

66
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ; add
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ; add
Distance : 5

67
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ; <>
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ; <>
Distance : 5

68
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ; array
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ; array
Distance : 5

69
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; invocation
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; invocation
Distance : 7

70
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; if
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; if
Distance : 7

71
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; assertEquals
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; assertEquals
Distance : 7

72
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; n
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; n
Distance : 7

73
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; return
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; return
Distance : 7

74
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; MathRuntimeException
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; MathRuntimeException
Distance : 7

75
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; checkState
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; checkState
Distance : 7

76
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; compiler
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; compiler
Distance : 7

77
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; String
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; String
Distance : 7

78
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; ,
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; ,
Distance : 7

79
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; result
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; result
Distance : 7

80
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; )
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; )
Distance : 7

81
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; ;
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; ;
Distance : 7

82
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; (
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; (
Distance : 7

83
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; <s>
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; <s>
Distance : 7

84
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; ;
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; ;
Distance : 7

85
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; <blank>
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; <blank>
Distance : 7

86
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; {
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; {
Distance : 7

87
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; +
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; +
Distance : 7

88
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; e
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; e
Distance : 7

89
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; null
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; null
Distance : 7

90
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; >
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; >
Distance : 7

91
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; public
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; public
Distance : 7

92
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; new
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; new
Distance : 7

93
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; STRING_CONSTANT
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; STRING_CONSTANT
Distance : 7

94
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; NUMBER_CONSTANT
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; NUMBER_CONSTANT
Distance : 7

95
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; true
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; true
Distance : 7

96
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ; ;
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ; ;
Distance : 5

97
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ; <s>
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ; <s>
Distance : 5

98
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ; NUMBER_CONSTANT
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ; NUMBER_CONSTANT
Distance : 5

99
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( callSite.parent , invocation , invocation ) ;
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( callSite.parent , invocation , invocation ) ;
Distance : 9

========================================================================


========================================================================
Example Number: 81
Parent Code is: 
return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
-------------------------------------------------------------------------------
Child code is: 
return mockSettings . serializable () . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=mockSettings}) (235{val=.}) (802{val=defaultAnswer}) (214{val=(}) (32 (802{val=returnsDeepStubsAnswerUsing}) (214{val=(}) (800{val=returnTypeGenericMetadata}) (215{val=)})) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (32 (800{val=mockSettings}) (235{val=.}) (802{val=serializable}) (216{val=()})) (235{val=.}) (802{val=defaultAnswer}) (214{val=(}) (32 (802{val=returnsDeepStubsAnswerUsing}) (214{val=(}) (800{val=returnTypeGenericMetadata}) (215{val=)})) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/23/parent/src_org_mockito_internal_stubbing_defaultanswers_ReturnsDeepStubs.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	return serializable ( mockSettings , returnTypeGenericMetadata ) && returnTypeGenericMetadata . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return serializable ( mockSettings , returnTypeGenericMetadata ) && returnTypeGenericMetadata . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 8

1
Tree	return returnTypeGenericMetadata . serializable ( serializable ( returnTypeGenericMetadata ) , mockSettings ) ;
Code	return returnTypeGenericMetadata . serializable ( serializable ( returnTypeGenericMetadata ) , mockSettings ) ;
Distance : 7

2
Tree	return ( returnTypeGenericMetadata ) mockSettings . serializable ( serializable ( returnTypeGenericMetadata ) ) ;
Code	return ( returnTypeGenericMetadata ) mockSettings . serializable ( serializable ( returnTypeGenericMetadata ) ) ;
Distance : 6

3
Tree	return mockSettings . returnsDeepStubsAnswerUsing ( serializable ( mockSettings ) , STRING_CONSTANT , returnTypeGenericMetadata ) ;
Code	return mockSettings . returnsDeepStubsAnswerUsing ( serializable ( mockSettings ) , STRING_CONSTANT , returnTypeGenericMetadata ) ;
Distance : 9

4
Tree	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( defaultAnswer ( mockSettings ) , STRING_CONSTANT , mockSettings ) ;
Code	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( defaultAnswer ( mockSettings ) , STRING_CONSTANT , mockSettings ) ;
Distance : 10

5
Tree	return serializable ( returnTypeGenericMetadata , mockSettings ) && serializable ( mockSettings ) ;
Code	return serializable ( returnTypeGenericMetadata , mockSettings ) && serializable ( mockSettings ) ;
Distance : 10

6
Tree	return returnsDeepStubsAnswerUsing ( serializable ( mockSettings ) , mockSettings ) ;
Code	return returnsDeepStubsAnswerUsing ( serializable ( mockSettings ) , mockSettings ) ;
Distance : 9

7
Tree	return returnTypeGenericMetadata . serializable ( serializable ( mockSettings ) ) ;
Code	return returnTypeGenericMetadata . serializable ( serializable ( mockSettings ) ) ;
Distance : 6

8
Tree	return returnsDeepStubsAnswerUsing ( break; , returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Code	return returnsDeepStubsAnswerUsing ( break; , returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Distance : 8

9
Tree	return serializable ( mockSettings ) . serializable ( mockSettings ) ;
Code	return serializable ( mockSettings ) . serializable ( mockSettings ) ;
Distance : 9

10
Tree	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( serializable ( mockSettings ) , returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( serializable ( mockSettings ) , returnTypeGenericMetadata ) ;
Distance : 9

11
Tree	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( defaultAnswer ( returnTypeGenericMetadata ) , STRING_CONSTANT , returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( defaultAnswer ( returnTypeGenericMetadata ) , STRING_CONSTANT , returnTypeGenericMetadata ) ;
Distance : 10

12
Tree	return ( returnTypeGenericMetadata ) returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( serializable ( mockSettings ) ) ;
Code	return ( returnTypeGenericMetadata ) returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( serializable ( mockSettings ) ) ;
Distance : 7

13
Tree	return serializable ( returnTypeGenericMetadata , mockSettings ) && defaultAnswer ( mockSettings ) ;
Code	return serializable ( returnTypeGenericMetadata , mockSettings ) && defaultAnswer ( mockSettings ) ;
Distance : 10

14
Tree	return ! returnTypeGenericMetadata . serializable ( defaultAnswer ( mockSettings ) ) ;
Code	return ! returnTypeGenericMetadata . serializable ( defaultAnswer ( mockSettings ) ) ;
Distance : 7

15
Tree	return serializable ( super(); , defaultAnswer ( mockSettings ) ) ;
Code	return serializable ( super(); , defaultAnswer ( mockSettings ) ) ;
Distance : 8

16
Tree	return returnTypeGenericMetadata . defaultAnswer ( mockSettings ) && returnsDeepStubsAnswerUsing ( mockSettings ) ;
Code	return returnTypeGenericMetadata . defaultAnswer ( mockSettings ) && returnsDeepStubsAnswerUsing ( mockSettings ) ;
Distance : 8

17
Tree	return returnTypeGenericMetadata . serializable ( serializable ( returnTypeGenericMetadata ) ) < mockSettings ;
Code	return returnTypeGenericMetadata . serializable ( serializable ( returnTypeGenericMetadata ) ) < mockSettings ;
Distance : 7

18
Tree	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( mockSettings ) ) < returnTypeGenericMetadata ;
Code	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( mockSettings ) ) < returnTypeGenericMetadata ;
Distance : 8

19
Tree	return returnTypeGenericMetadata . serializable ( mockSettings ) && defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata . serializable ( mockSettings ) && defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 7

20
Tree	return serializable ( return; , returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Code	return serializable ( return; , returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Distance : 7

21
Tree	return ( returnTypeGenericMetadata ) returnTypeGenericMetadata . serializable ( defaultAnswer ( mockSettings ) ) ;
Code	return ( returnTypeGenericMetadata ) returnTypeGenericMetadata . serializable ( defaultAnswer ( mockSettings ) ) ;
Distance : 7

22
Tree	return returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata , mockSettings ) && serializable ( mockSettings ) ;
Code	return returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata , mockSettings ) && serializable ( mockSettings ) ;
Distance : 10

23
Tree	return returnsDeepStubsAnswerUsing ( continue; , defaultAnswer ( mockSettings ) ) ;
Code	return returnsDeepStubsAnswerUsing ( continue; , defaultAnswer ( mockSettings ) ) ;
Distance : 8

24
Tree	return returnTypeGenericMetadata . defaultAnswer ( defaultAnswer ( mockSettings ) , STRING_CONSTANT , returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata . defaultAnswer ( defaultAnswer ( mockSettings ) , STRING_CONSTANT , returnTypeGenericMetadata ) ;
Distance : 10

25
Tree	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( mockSettings ) && returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( mockSettings ) && returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ;
Distance : 7

26
Tree	return returnTypeGenericMetadata . serializable ( returnsDeepStubsAnswerUsing ( mockSettings ) ) < returnTypeGenericMetadata ;
Code	return returnTypeGenericMetadata . serializable ( returnsDeepStubsAnswerUsing ( mockSettings ) ) < returnTypeGenericMetadata ;
Distance : 7

27
Tree	return returnsDeepStubsAnswerUsing ( break; , defaultAnswer ( mockSettings ) ) ;
Code	return returnsDeepStubsAnswerUsing ( break; , defaultAnswer ( mockSettings ) ) ;
Distance : 8

28
Tree	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( defaultAnswer ( mockSettings ) ) < returnTypeGenericMetadata ;
Code	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( defaultAnswer ( mockSettings ) ) < returnTypeGenericMetadata ;
Distance : 9

29
Tree	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) && serializable ( mockSettings ) ;
Code	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) && serializable ( mockSettings ) ;
Distance : 9

30
Tree	return ! returnTypeGenericMetadata . serializable ( serializable ( mockSettings ) ) ;
Code	return ! returnTypeGenericMetadata . serializable ( serializable ( mockSettings ) ) ;
Distance : 7

31
Tree	return returnTypeGenericMetadata . defaultAnswer ( serializable ( mockSettings ) , STRING_CONSTANT , returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata . defaultAnswer ( serializable ( mockSettings ) , STRING_CONSTANT , returnTypeGenericMetadata ) ;
Distance : 10

32
Tree	return returnsDeepStubsAnswerUsing ( default: , returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Code	return returnsDeepStubsAnswerUsing ( default: , returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Distance : 8

33
Tree	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( mockSettings ) , mockSettings ) ;
Code	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( mockSettings ) , mockSettings ) ;
Distance : 8

34
Tree	return serializable ( returnTypeGenericMetadata , mockSettings ) && returnsDeepStubsAnswerUsing ( mockSettings ) ;
Code	return serializable ( returnTypeGenericMetadata , mockSettings ) && returnsDeepStubsAnswerUsing ( mockSettings ) ;
Distance : 9

35
Tree	return returnTypeGenericMetadata . serializable ( mockSettings ) && returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata . serializable ( mockSettings ) && returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ;
Distance : 6

36
Tree	return returnsDeepStubsAnswerUsing ( super(); , serializable ( mockSettings ) ) ;
Code	return returnsDeepStubsAnswerUsing ( super(); , serializable ( mockSettings ) ) ;
Distance : 9

37
Tree	return returnsDeepStubsAnswerUsing ( return; , defaultAnswer ( mockSettings ) ) ;
Code	return returnsDeepStubsAnswerUsing ( return; , defaultAnswer ( mockSettings ) ) ;
Distance : 8

38
Tree	return serializable ( return; , defaultAnswer ( mockSettings ) ) ;
Code	return serializable ( return; , defaultAnswer ( mockSettings ) ) ;
Distance : 8

39
Tree	return mockSettings . serializable ( serializable ( mockSettings ) , STRING_CONSTANT , returnTypeGenericMetadata ) ;
Code	return mockSettings . serializable ( serializable ( mockSettings ) , STRING_CONSTANT , returnTypeGenericMetadata ) ;
Distance : 9

40
Tree	return ! returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( serializable ( mockSettings ) ) ;
Code	return ! returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( serializable ( mockSettings ) ) ;
Distance : 7

41
Tree	return returnTypeGenericMetadata . serializable ( defaultAnswer ( mockSettings ) , STRING_CONSTANT , mockSettings ) ;
Code	return returnTypeGenericMetadata . serializable ( defaultAnswer ( mockSettings ) , STRING_CONSTANT , mockSettings ) ;
Distance : 9

42
Tree	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( mockSettings ) ) < mockSettings ;
Code	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( mockSettings ) ) < mockSettings ;
Distance : 8

43
Tree	return ( returnTypeGenericMetadata ) returnTypeGenericMetadata . serializable ( serializable ( mockSettings ) ) ;
Code	return ( returnTypeGenericMetadata ) returnTypeGenericMetadata . serializable ( serializable ( mockSettings ) ) ;
Distance : 7

44
Tree	return returnTypeGenericMetadata . serializable ( serializable ( mockSettings ) , returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata . serializable ( serializable ( mockSettings ) , returnTypeGenericMetadata ) ;
Distance : 8

45
Tree	return serializable ( serializable ( mockSettings ) , mockSettings ) ;
Code	return serializable ( serializable ( mockSettings ) , mockSettings ) ;
Distance : 9

46
Tree	return serializable ( break; , returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Code	return serializable ( break; , returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Distance : 7

47
Tree	return returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata , mockSettings ) && returnsDeepStubsAnswerUsing ( mockSettings ) ;
Code	return returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata , mockSettings ) && returnsDeepStubsAnswerUsing ( mockSettings ) ;
Distance : 9

48
Tree	return serializable ( continue; , defaultAnswer ( mockSettings ) ) ;
Code	return serializable ( continue; , defaultAnswer ( mockSettings ) ) ;
Distance : 8

49
Tree	return returnTypeGenericMetadata . serializable ( defaultAnswer ( returnTypeGenericMetadata ) , STRING_CONSTANT , returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata . serializable ( defaultAnswer ( returnTypeGenericMetadata ) , STRING_CONSTANT , returnTypeGenericMetadata ) ;
Distance : 9

50
Tree	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( serializable ( returnTypeGenericMetadata ) , mockSettings ) ;
Code	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( serializable ( returnTypeGenericMetadata ) , mockSettings ) ;
Distance : 8

51
Tree	return returnsDeepStubsAnswerUsing ( mockSettings ) . serializable ( mockSettings ) ;
Code	return returnsDeepStubsAnswerUsing ( mockSettings ) . serializable ( mockSettings ) ;
Distance : 9

52
Tree	return ( returnTypeGenericMetadata ) mockSettings . defaultAnswer ( serializable ( mockSettings ) ) ;
Code	return ( returnTypeGenericMetadata ) mockSettings . defaultAnswer ( serializable ( mockSettings ) ) ;
Distance : 6

53
Tree	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( defaultAnswer ( mockSettings ) ) ;
Code	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( defaultAnswer ( mockSettings ) ) ;
Distance : 7

54
Tree	return returnTypeGenericMetadata . defaultAnswer ( returnTypeGenericMetadata ) && returnsDeepStubsAnswerUsing ( mockSettings ) ;
Code	return returnTypeGenericMetadata . defaultAnswer ( returnTypeGenericMetadata ) && returnsDeepStubsAnswerUsing ( mockSettings ) ;
Distance : 8

55
Tree	return serializable ( mockSettings , returnTypeGenericMetadata ) && defaultAnswer ( mockSettings ) ;
Code	return serializable ( mockSettings , returnTypeGenericMetadata ) && defaultAnswer ( mockSettings ) ;
Distance : 10

56
Tree	return returnsDeepStubsAnswerUsing ( mockSettings , mockSettings ) && returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ;
Code	return returnsDeepStubsAnswerUsing ( mockSettings , mockSettings ) && returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ;
Distance : 8

57
Tree	return returnTypeGenericMetadata . serializable ( serializable ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Code	return returnTypeGenericMetadata . serializable ( serializable ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Distance : 9

58
Tree	return returnTypeGenericMetadata . serializable ( returnTypeGenericMetadata ) && defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata . serializable ( returnTypeGenericMetadata ) && defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 7

59
Tree	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( mockSettings ) , STRING_CONSTANT , returnTypeGenericMetadata ) ;
Code	return mockSettings . serializable ( returnsDeepStubsAnswerUsing ( mockSettings ) , STRING_CONSTANT , returnTypeGenericMetadata ) ;
Distance : 8

60
Tree	return returnTypeGenericMetadata . defaultAnswer ( serializable ( mockSettings ) ) < returnTypeGenericMetadata ;
Code	return returnTypeGenericMetadata . defaultAnswer ( serializable ( mockSettings ) ) < returnTypeGenericMetadata ;
Distance : 8

61
Tree	return ( returnTypeGenericMetadata ) mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return ( returnTypeGenericMetadata ) mockSettings . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 5

62
Tree	return returnsDeepStubsAnswerUsing ( mockSettings , returnTypeGenericMetadata ) && serializable ( mockSettings ) ;
Code	return returnsDeepStubsAnswerUsing ( mockSettings , returnTypeGenericMetadata ) && serializable ( mockSettings ) ;
Distance : 10

63
Tree	return serializable ( break; , serializable ( returnTypeGenericMetadata ) ) ;
Code	return serializable ( break; , serializable ( returnTypeGenericMetadata ) ) ;
Distance : 7

64
Tree	return serializable ( returnsDeepStubsAnswerUsing ( mockSettings ) , mockSettings ) ;
Code	return serializable ( returnsDeepStubsAnswerUsing ( mockSettings ) , mockSettings ) ;
Distance : 8

65
Tree	return defaultAnswer ( break; , serializable ( mockSettings ) ) ;
Code	return defaultAnswer ( break; , serializable ( mockSettings ) ) ;
Distance : 9

66
Tree	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( defaultAnswer ( returnTypeGenericMetadata ) ) < mockSettings ;
Code	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( defaultAnswer ( returnTypeGenericMetadata ) ) < mockSettings ;
Distance : 8

67
Tree	return defaultAnswer ( mockSettings , returnTypeGenericMetadata ) && returnsDeepStubsAnswerUsing ( serializable ( mockSettings ) ) ;
Code	return defaultAnswer ( mockSettings , returnTypeGenericMetadata ) && returnsDeepStubsAnswerUsing ( serializable ( mockSettings ) ) ;
Distance : 9

68
Tree	return defaultAnswer ( returnTypeGenericMetadata , mockSettings ) && serializable ( defaultAnswer ( mockSettings ) ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , mockSettings ) && serializable ( defaultAnswer ( mockSettings ) ) ;
Distance : 10

69
Tree	return returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) . serializable ( mockSettings ) ;
Code	return returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) . serializable ( mockSettings ) ;
Distance : 9

70
Tree	return returnTypeGenericMetadata . serializable ( returnsDeepStubsAnswerUsing ( mockSettings ) , returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata . serializable ( returnsDeepStubsAnswerUsing ( mockSettings ) , returnTypeGenericMetadata ) ;
Distance : 7

71
Tree	return mockSettings . returnsDeepStubsAnswerUsing ( serializable ( mockSettings ) ) < mockSettings ;
Code	return mockSettings . returnsDeepStubsAnswerUsing ( serializable ( mockSettings ) ) < mockSettings ;
Distance : 8

72
Tree	return serializable ( mockSettings , returnTypeGenericMetadata ) && serializable ( serializable ( returnTypeGenericMetadata ) ) ;
Code	return serializable ( mockSettings , returnTypeGenericMetadata ) && serializable ( serializable ( returnTypeGenericMetadata ) ) ;
Distance : 8

73
Tree	return serializable ( returnTypeGenericMetadata ) . returnsDeepStubsAnswerUsing ( mockSettings ) ;
Code	return serializable ( returnTypeGenericMetadata ) . returnsDeepStubsAnswerUsing ( mockSettings ) ;
Distance : 8

74
Tree	return serializable ( mockSettings , mockSettings ) && serializable ( returnTypeGenericMetadata ) ;
Code	return serializable ( mockSettings , mockSettings ) && serializable ( returnTypeGenericMetadata ) ;
Distance : 9

75
Tree	return mockSettings . serializable ( mockSettings ) && serializable ( mockSettings ) ;
Code	return mockSettings . serializable ( mockSettings ) && serializable ( mockSettings ) ;
Distance : 7

76
Tree	return mockSettings . returnsDeepStubsAnswerUsing ( serializable ( mockSettings ) , mockSettings ) ;
Code	return mockSettings . returnsDeepStubsAnswerUsing ( serializable ( mockSettings ) , mockSettings ) ;
Distance : 8

77
Tree	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( defaultAnswer ( returnTypeGenericMetadata ) , mockSettings ) ;
Code	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( defaultAnswer ( returnTypeGenericMetadata ) , mockSettings ) ;
Distance : 8

78
Tree	return returnTypeGenericMetadata . defaultAnswer ( mockSettings ) && serializable ( mockSettings ) ;
Code	return returnTypeGenericMetadata . defaultAnswer ( mockSettings ) && serializable ( mockSettings ) ;
Distance : 9

79
Tree	return ( returnTypeGenericMetadata ) mockSettings . returnsDeepStubsAnswerUsing ( serializable ( returnTypeGenericMetadata ) ) ;
Code	return ( returnTypeGenericMetadata ) mockSettings . returnsDeepStubsAnswerUsing ( serializable ( returnTypeGenericMetadata ) ) ;
Distance : 6

80
Tree	return serializable ( mockSettings ) . returnsDeepStubsAnswerUsing ( mockSettings ) ;
Code	return serializable ( mockSettings ) . returnsDeepStubsAnswerUsing ( mockSettings ) ;
Distance : 8

81
Tree	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( serializable ( mockSettings ) ) ;
Code	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( serializable ( mockSettings ) ) ;
Distance : 7

82
Tree	return ! returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( defaultAnswer ( mockSettings ) ) ;
Code	return ! returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( defaultAnswer ( mockSettings ) ) ;
Distance : 7

83
Tree	return mockSettings . serializable ( mockSettings ) && returnsDeepStubsAnswerUsing ( mockSettings ) ;
Code	return mockSettings . serializable ( mockSettings ) && returnsDeepStubsAnswerUsing ( mockSettings ) ;
Distance : 6

84
Tree	return returnsDeepStubsAnswerUsing ( super(); , defaultAnswer ( mockSettings ) ) ;
Code	return returnsDeepStubsAnswerUsing ( super(); , defaultAnswer ( mockSettings ) ) ;
Distance : 8

85
Tree	return returnTypeGenericMetadata . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , STRING_CONSTANT , returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata . serializable ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , STRING_CONSTANT , returnTypeGenericMetadata ) ;
Distance : 8

86
Tree	return returnTypeGenericMetadata . serializable ( returnsDeepStubsAnswerUsing ( mockSettings ) , STRING_CONSTANT , mockSettings ) ;
Code	return returnTypeGenericMetadata . serializable ( returnsDeepStubsAnswerUsing ( mockSettings ) , STRING_CONSTANT , mockSettings ) ;
Distance : 9

87
Tree	return serializable ( continue; , returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Code	return serializable ( continue; , returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Distance : 7

88
Tree	return serializable ( defaultAnswer ( mockSettings ) , mockSettings ) ;
Code	return serializable ( defaultAnswer ( mockSettings ) , mockSettings ) ;
Distance : 8

89
Tree	return returnTypeGenericMetadata . serializable ( mockSettings ) && serializable ( returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata . serializable ( mockSettings ) && serializable ( returnTypeGenericMetadata ) ;
Distance : 7

90
Tree	return mockSettings . serializable ( defaultAnswer ( mockSettings ) , STRING_CONSTANT , returnTypeGenericMetadata ) ;
Code	return mockSettings . serializable ( defaultAnswer ( mockSettings ) , STRING_CONSTANT , returnTypeGenericMetadata ) ;
Distance : 8

91
Tree	return ( returnTypeGenericMetadata ) mockSettings . serializable ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return ( returnTypeGenericMetadata ) mockSettings . serializable ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 6

92
Tree	return returnsDeepStubsAnswerUsing ( return; , returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Code	return returnsDeepStubsAnswerUsing ( return; , returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Distance : 8

93
Tree	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( serializable ( returnTypeGenericMetadata ) ) < mockSettings ;
Code	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( serializable ( returnTypeGenericMetadata ) ) < mockSettings ;
Distance : 8

94
Tree	return ( mockSettings ) mockSettings . serializable ( serializable ( mockSettings ) ) ;
Code	return ( mockSettings ) mockSettings . serializable ( serializable ( mockSettings ) ) ;
Distance : 7

95
Tree	return returnTypeGenericMetadata . serializable ( returnTypeGenericMetadata ) && returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata . serializable ( returnTypeGenericMetadata ) && returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ;
Distance : 6

96
Tree	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( mockSettings ) && defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( mockSettings ) && defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 8

97
Tree	return returnTypeGenericMetadata . serializable ( defaultAnswer ( mockSettings ) , returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata . serializable ( defaultAnswer ( mockSettings ) , returnTypeGenericMetadata ) ;
Distance : 7

98
Tree	return returnsDeepStubsAnswerUsing ( mockSettings ) . returnsDeepStubsAnswerUsing ( mockSettings ) ;
Code	return returnsDeepStubsAnswerUsing ( mockSettings ) . returnsDeepStubsAnswerUsing ( mockSettings ) ;
Distance : 8

99
Tree	return ! returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Code	return ! returnTypeGenericMetadata . returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Distance : 6

========================================================================


========================================================================
Example Number: 82
Parent Code is: 
{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withParams ( cls , outerClassInstance ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (800{val=outerClassInstance}) (236{val===}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=noArgConstructor}) (214{val=(}) (800{val=cls}) (215{val=)})) (227{val=;})) (219{val=}}))) (41 (329{val=return}) (32 (802{val=withOuterClass}) (214{val=(}) (800{val=cls}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (800{val=outerClassInstance}) (236{val===}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=noArgConstructor}) (214{val=(}) (800{val=cls}) (215{val=)})) (227{val=;})) (219{val=}}))) (41 (329{val=return}) (32 (802{val=withParams}) (214{val=(}) (800{val=cls}) (234{val=,}) (800{val=outerClassInstance}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/21/parent/src_org_mockito_internal_creation_instance_ConstructorInstantiator.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 7

1
Tree	{ if ( outerClassInstance == return; ) { return noArgConstructor ( outerClassInstance ) ; } return outerClassInstance . withOuterClass ( cls ) . withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == return; ) { return noArgConstructor ( outerClassInstance ) ; } return outerClassInstance . withOuterClass ( cls ) . withOuterClass ( cls ) ; }
Distance : 10

2
Tree	{ if ( cls == return; ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( this , outerClassInstance ) ; }
Code	{ if ( cls == return; ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( this , outerClassInstance ) ; }
Distance : 5

3
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , outerClassInstance ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , outerClassInstance ) ; }
Distance : 3

4
Tree	{ if ( cls == break; ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) ; }
Code	{ if ( cls == break; ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) ; }
Distance : 7

5
Tree	{ if ( cls == continue; ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls , cls ) ; }
Code	{ if ( cls == continue; ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls , cls ) ; }
Distance : 6

6
Tree	{ if ( cls == continue; ) { return this . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == continue; ) { return this . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 7

7
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , line.sin ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , line.sin ) ; }
Distance : 2

8
Tree	{ if ( outerClassInstance == return; ) { return noArgConstructor ( outerClassInstance ) . withOuterClass ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == return; ) { return noArgConstructor ( outerClassInstance ) . withOuterClass ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 9

9
Tree	{ if ( cls == default: ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( cls == default: ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 6

10
Tree	{ if ( outerClassInstance == return; ) { return noArgConstructor ( outerClassInstance , outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == return; ) { return noArgConstructor ( outerClassInstance , outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 7

11
Tree	{ if ( outerClassInstance == break; ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance . ) ( cls ) ) ; }
Code	{ if ( outerClassInstance == break; ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance . ) ( cls ) ) ; }
Distance : 9

12
Tree	{ if ( outerClassInstance == default: ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == default: ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 5

13
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , outerClassInstance . ( ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , outerClassInstance . ( ( cls ) ) ; }
Distance : 6

14
Tree	{ if ( outerClassInstance == default: ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls , cls ) ; }
Code	{ if ( outerClassInstance == default: ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls , cls ) ; }
Distance : 5

15
Tree	{ if ( outerClassInstance == default: ) { return this . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == default: ) { return this . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 6

16
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls . ( ( cls ) ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls . ( ( cls ) ) ; }
Distance : 8

17
Tree	{ if ( cls == break; ) { return noArgConstructor ( outerClassInstance , cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( cls == break; ) { return noArgConstructor ( outerClassInstance , cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 7

18
Tree	{ if ( cls == return; ) { return this . noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( cls == return; ) { return this . noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 8

19
Tree	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( outerClassInstance ) ; } return cls . withOuterClass ( outerClassInstance ) . withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( outerClassInstance ) ; } return cls . withOuterClass ( outerClassInstance ) . withOuterClass ( cls ) ; }
Distance : 11

20
Tree	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( cls ) ; } return outerClassInstance . withOuterClass ( outerClassInstance ) . withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( cls ) ; } return outerClassInstance . withOuterClass ( outerClassInstance ) . withOuterClass ( cls ) ; }
Distance : 10

21
Tree	{ if ( cls == default: ) { return cls . noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == default: ) { return cls . noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 8

22
Tree	{ if ( cls == return; ) { return noArgConstructor ( outerClassInstance ) ; } return outerClassInstance . withOuterClass ( cls ) ; }
Code	{ if ( cls == return; ) { return noArgConstructor ( outerClassInstance ) ; } return outerClassInstance . withOuterClass ( cls ) ; }
Distance : 8

23
Tree	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( cls ) ; } return outerClassInstance . withOuterClass ( cls ) . withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( cls ) ; } return outerClassInstance . withOuterClass ( cls ) . withOuterClass ( outerClassInstance ) ; }
Distance : 8

24
Tree	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( outerClassInstance ) ; } return cls . withOuterClass ( cls ) . withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( outerClassInstance ) ; } return cls . withOuterClass ( cls ) . withOuterClass ( outerClassInstance ) ; }
Distance : 9

25
Tree	{ if ( outerClassInstance == return; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance . ) ( outerClassInstance ) ) ; }
Code	{ if ( outerClassInstance == return; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance . ) ( outerClassInstance ) ) ; }
Distance : 7

26
Tree	{ if ( outerClassInstance == break; ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( outerClassInstance ) . withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == break; ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( outerClassInstance ) . withOuterClass ( outerClassInstance ) ; }
Distance : 9

27
Tree	{ if ( outerClassInstance == return; ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls . ) ( outerClassInstance ) ) ; }
Code	{ if ( outerClassInstance == return; ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls . ) ( outerClassInstance ) ) ; }
Distance : 7

28
Tree	{ if ( outerClassInstance == break; ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls , outerClassInstance . ( ( cls ) ) ; }
Code	{ if ( outerClassInstance == break; ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls , outerClassInstance . ( ( cls ) ) ; }
Distance : 8

29
Tree	{ if ( outerClassInstance == break; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance , outerClassInstance . ( ( cls ) ) ; }
Code	{ if ( outerClassInstance == break; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance , outerClassInstance . ( ( cls ) ) ; }
Distance : 8

30
Tree	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance , cls . ( ( cls ) ) ; }
Code	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance , cls . ( ( cls ) ) ; }
Distance : 10

31
Tree	{ if ( cls == return; ) { return noArgConstructor ( cls , outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( cls == return; ) { return noArgConstructor ( cls , outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 7

32
Tree	{ if ( cls == return; ) { return noArgConstructor ( outerClassInstance , outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == return; ) { return noArgConstructor ( outerClassInstance , outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 8

33
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( outerClassInstance ) ; } return outerClassInstance . withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( outerClassInstance ) ; } return outerClassInstance . withOuterClass ( outerClassInstance ) ; }
Distance : 6

34
Tree	{ if ( cls == break; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance . == ( cls ) ) ; }
Code	{ if ( cls == break; ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance . == ( cls ) ) ; }
Distance : 9

35
Tree	{ if ( cls == default: ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , outerClassInstance . ( ( cls ) ) ; }
Code	{ if ( cls == default: ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , outerClassInstance . ( ( cls ) ) ; }
Distance : 8

36
Tree	{ if ( cls == break; ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls . ) ( cls ) ) ; }
Code	{ if ( cls == break; ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls . ) ( cls ) ) ; }
Distance : 9

37
Tree	{ if ( outerClassInstance == default: ) { return outerClassInstance . noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == default: ) { return outerClassInstance . noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 7

38
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , typeArguments.length ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , typeArguments.length ) ; }
Distance : 2

39
Tree	{ if ( cls == break; ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( cls == break; ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 6

40
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; } STRING_CONSTANT
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; } STRING_CONSTANT
Distance : 4

41
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; } @
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; } @
Distance : 4

42
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } this
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } this
Distance : 4

43
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } final
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } final
Distance : 4

44
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } public
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } public
Distance : 4

45
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } >
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } >
Distance : 4

46
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } null
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } null
Distance : 4

47
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } +
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } +
Distance : 4

48
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } ,
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } ,
Distance : 4

49
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } <
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } <
Distance : 4

50
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } .
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } .
Distance : 4

51
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } ;
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } ;
Distance : 4

52
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } <blank>
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } <blank>
Distance : 4

53
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } ;
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } ;
Distance : 4

54
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } <s>
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } <s>
Distance : 4

55
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } (
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } (
Distance : 4

56
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } =
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } =
Distance : 4

57
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } }
Distance : 4

58
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } )
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } )
Distance : 4

59
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; } e
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; } e
Distance : 4

60
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; } n
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; } n
Distance : 4

61
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; } ]
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; } ]
Distance : 4

62
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; } false
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; } false
Distance : 4

63
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , getTotalMillis ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , getTotalMillis ) ; }
Distance : 2

64
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , LocalizedFormats.NUMBER_TOO_LARGE ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , LocalizedFormats.NUMBER_TOO_LARGE ) ; }
Distance : 2

65
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } {
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } {
Distance : 4

66
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; } String
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; } String
Distance : 4

67
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } Preconditions
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } Preconditions
Distance : 4

68
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } if
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } if
Distance : 4

69
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } compiler
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } compiler
Distance : 4

70
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } String
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } String
Distance : 4

71
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } n
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } n
Distance : 4

72
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } ]
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } ]
Distance : 4

73
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } [
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } [
Distance : 4

74
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } -
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } -
Distance : 4

75
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } ()
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; } ()
Distance : 4

76
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; } -
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; } -
Distance : 4

77
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; } Preconditions
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; } Preconditions
Distance : 4

78
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; } [
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; } [
Distance : 4

79
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; } NUMBER_CONSTANT
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , cls ) ; } NUMBER_CONSTANT
Distance : 4

80
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance . ) ( cls ) ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance . ) ( cls ) ) ; }
Distance : 9

81
Tree	{ if ( cls == continue; ) { return noArgConstructor ( outerClassInstance ) ; } return cls . withOuterClass ( outerClassInstance ) ; }
Code	{ if ( cls == continue; ) { return noArgConstructor ( outerClassInstance ) ; } return cls . withOuterClass ( outerClassInstance ) ; }
Distance : 7

82
Tree	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( outerClassInstance ) . withOuterClass ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( outerClassInstance ) . withOuterClass ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 10

83
Tree	{ if ( cls == continue; ) { return outerClassInstance . noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( cls == continue; ) { return outerClassInstance . noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 7

84
Tree	{ if ( cls == super(); ) { return noArgConstructor ( cls ) . withOuterClass ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == super(); ) { return noArgConstructor ( cls ) . withOuterClass ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 10

85
Tree	{ if ( outerClassInstance == default: ) { return noArgConstructor ( outerClassInstance ) ; } return cls . withOuterClass ( cls ) . withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == default: ) { return noArgConstructor ( outerClassInstance ) ; } return cls . withOuterClass ( cls ) . withOuterClass ( cls ) ; }
Distance : 10

86
Tree	{ if ( cls == return; ) { return outerClassInstance . noArgConstructor () ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( cls == return; ) { return outerClassInstance . noArgConstructor () ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 9

87
Tree	{ if ( outerClassInstance == default: ) { return noArgConstructor ( cls ) ; } return outerClassInstance . withOuterClass ( cls ) . withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == default: ) { return noArgConstructor ( cls ) ; } return outerClassInstance . withOuterClass ( cls ) . withOuterClass ( cls ) ; }
Distance : 9

88
Tree	{ if ( outerClassInstance == default: ) { return cls . noArgConstructor ( cls , cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == default: ) { return cls . noArgConstructor ( cls , cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 8

89
Tree	{ if ( cls == default: ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , outerClassInstance ) ; }
Code	{ if ( cls == default: ) { return noArgConstructor ( cls ) ; } return withOuterClass ( this , outerClassInstance ) ; }
Distance : 4

90
Tree	{ if ( cls == null ) { return cls . noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( cls == null ) { return cls . noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 7

91
Tree	{ if ( outerClassInstance == default: ) { return noArgConstructor ( outerClassInstance ) . withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == default: ) { return noArgConstructor ( outerClassInstance ) . withOuterClass ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 9

92
Tree	{ if ( cls == break; ) { return outerClassInstance . noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == break; ) { return outerClassInstance . noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 8

93
Tree	{ if ( cls == default: ) { return this . noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == default: ) { return this . noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 8

94
Tree	{ if ( outerClassInstance == break; ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( this , outerClassInstance ) ; }
Code	{ if ( outerClassInstance == break; ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( this , outerClassInstance ) ; }
Distance : 4

95
Tree	{ if ( cls == default: ) { return noArgConstructor ( cls , outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == default: ) { return noArgConstructor ( cls , outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 7

96
Tree	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( outerClassInstance , cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == continue; ) { return noArgConstructor ( outerClassInstance , cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 6

97
Tree	{ if ( outerClassInstance == break; ) { return this . noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == break; ) { return this . noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 7

98
Tree	{ if ( cls == return; ) { return outerClassInstance . noArgConstructor ( outerClassInstance , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == return; ) { return outerClassInstance . noArgConstructor ( outerClassInstance , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 9

99
Tree	{ if ( outerClassInstance == default: ) { return noArgConstructor ( cls ) . withOuterClass ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == default: ) { return noArgConstructor ( cls ) . withOuterClass ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 9

========================================================================


========================================================================
Example Number: 83
Parent Code is: 
Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
-------------------------------------------------------------------------------
Child code is: 
Object injected = mockCandidateFilter . filterCandidate ( mocks , field , orderedInstanceFields , instance ) . thenInject () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Object})) (59 (800{val=injected}) (204{val==}) (32 (32 (800{val=mockCandidateFilter}) (235{val=.}) (802{val=filterCandidate}) (214{val=(}) (800{val=mocks}) (234{val=,}) (800{val=field}) (234{val=,}) (800{val=instance}) (215{val=)})) (235{val=.}) (802{val=thenInject}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Object})) (59 (800{val=injected}) (204{val==}) (32 (32 (800{val=mockCandidateFilter}) (235{val=.}) (802{val=filterCandidate}) (214{val=(}) (800{val=mocks}) (234{val=,}) (800{val=field}) (234{val=,}) (800{val=orderedInstanceFields}) (234{val=,}) (800{val=instance}) (215{val=)})) (235{val=.}) (802{val=thenInject}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/19/parent/src_org_mockito_internal_configuration_injection_PropertyAndSetterInjection.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	Object injected = injected . filterCandidate ( NUMBER_CONSTANT , mocks , instance , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( NUMBER_CONSTANT , mocks , instance , instance ) . thenInject () ;
Distance : 4

1
Tree	Object injected = injected . filterCandidate ( mocks , mocks , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , mocks , instance ) . thenInject () ;
Distance : 4

2
Tree	Object injected = filterCandidate ( mocks , instance ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , instance ) . thenInject () ;
Distance : 6

3
Tree	Object mocks = injected . filterCandidate ( mocks , instance ) . thenInject () ;
Code	Object mocks = injected . filterCandidate ( mocks , instance ) . thenInject () ;
Distance : 6

4
Tree	Object injected = filterCandidate ( mocks , mocks , instance , instance ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , mocks , instance , instance ) . thenInject () ;
Distance : 4

5
Tree	Object injected = ( ( mocks ) this ) . thenInject ( mocks , field , instance ) . thenInject () ;
Code	Object injected = ( ( mocks ) this ) . thenInject ( mocks , field , instance ) . thenInject () ;
Distance : 9

6
Tree	Object injected = filterCandidate ( field , instance ) . thenInject () ;
Code	Object injected = filterCandidate ( field , instance ) . thenInject () ;
Distance : 6

7
Tree	Object injected = ( ( mocks ) this ) . thenInject ( field , field , field ) . thenInject () ;
Code	Object injected = ( ( mocks ) this ) . thenInject ( field , field , field ) . thenInject () ;
Distance : 11

8
Tree	Object injected = field . filterCandidate ( mocks , field ) . thenInject () ;
Code	Object injected = field . filterCandidate ( mocks , field ) . thenInject () ;
Distance : 5

9
Tree	Object mocks = filterCandidate ( injected , field , field ) . thenInject () ;
Code	Object mocks = filterCandidate ( injected , field , field ) . thenInject () ;
Distance : 7

10
Tree	Object field = ( ( mocks ) this ) . thenInject ( mocks , mocks , instance ) . thenInject () ;
Code	Object field = ( ( mocks ) this ) . thenInject ( mocks , mocks , instance ) . thenInject () ;
Distance : 11

11
Tree	Object mocks = ( ( mocks ) field ) . thenInject ( mocks , field , instance ) . thenInject () ;
Code	Object mocks = ( ( mocks ) field ) . thenInject ( mocks , field , instance ) . thenInject () ;
Distance : 10

12
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks . filterCandidate () , field , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks . filterCandidate () , field , instance ) . thenInject () ;
Distance : 4

13
Tree	Object injected = filterCandidate ( mocks , field , mocks , field ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , field , mocks , field ) . thenInject () ;
Distance : 4

14
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , instance , field ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , instance , field ) . thenInject () ;
Distance : 4

15
Tree	Object injected = mockCandidateFilter . filterCandidate () . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate () . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 5

16
Tree	Object instance = ( ( mocks ) field ) . thenInject ( mocks , field , mocks ) . thenInject () ;
Code	Object instance = ( ( mocks ) field ) . thenInject ( mocks , field , mocks ) . thenInject () ;
Distance : 11

17
Tree	Object mocks = filterCandidate ( mocks , instance , injected ) . thenInject () ;
Code	Object mocks = filterCandidate ( mocks , instance , injected ) . thenInject () ;
Distance : 7

18
Tree	Object mocks = filterCandidate ( mocks , instance , instance , injected ) . thenInject () ;
Code	Object mocks = filterCandidate ( mocks , instance , instance , injected ) . thenInject () ;
Distance : 6

19
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance . instance () ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance . instance () ) . thenInject () ;
Distance : 3

20
Tree	Object injected = ( ( mocks ) field ) . thenInject ( field , field , field ) . thenInject () ;
Code	Object injected = ( ( mocks ) field ) . thenInject ( field , field , field ) . thenInject () ;
Distance : 11

21
Tree	Object field = ( ( injected ) field ) . thenInject ( mocks , field , instance ) . thenInject () ;
Code	Object field = ( ( injected ) field ) . thenInject ( mocks , field , instance ) . thenInject () ;
Distance : 10

22
Tree	Object field = instance . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object field = instance . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 4

23
Tree	Object mocks = injected . filterCandidate ( mocks , mocks , instance ) . thenInject () ;
Code	Object mocks = injected . filterCandidate ( mocks , mocks , instance ) . thenInject () ;
Distance : 5

24
Tree	Object injected = ( ( mocks ) field ) . thenInject ( mocks , instance , instance ) . thenInject () ;
Code	Object injected = ( ( mocks ) field ) . thenInject ( mocks , instance , instance ) . thenInject () ;
Distance : 10

25
Tree	Object injected = mockCandidateFilter . filterCandidate ( NUMBER_CONSTANT , field , instance , injected ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( NUMBER_CONSTANT , field , instance , injected ) . thenInject () ;
Distance : 3

26
Tree	Object mocks = field . filterCandidate ( mocks , field ) . thenInject () ;
Code	Object mocks = field . filterCandidate ( mocks , field ) . thenInject () ;
Distance : 6

27
Tree	Object mocks = ( ( mocks ) this ) . thenInject ( mocks , field , instance ) . thenInject () ;
Code	Object mocks = ( ( mocks ) this ) . thenInject ( mocks , field , instance ) . thenInject () ;
Distance : 10

28
Tree	Object mocks = filterCandidate ( mocks , mocks , instance , instance ) . thenInject () ;
Code	Object mocks = filterCandidate ( mocks , mocks , instance , instance ) . thenInject () ;
Distance : 5

29
Tree	Object injected = filterCandidate ( instance , field , field ) . thenInject () ;
Code	Object injected = filterCandidate ( instance , field , field ) . thenInject () ;
Distance : 6

30
Tree	Object injected = ( ( mocks ) field ) . thenInject ( field , field , instance ) . thenInject () ;
Code	Object injected = ( ( mocks ) field ) . thenInject ( field , field , instance ) . thenInject () ;
Distance : 10

31
Tree	Object injected = injected . filterCandidate ( mocks , mocks , NUMBER_CONSTANT ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , mocks , NUMBER_CONSTANT ) . thenInject () ;
Distance : 5

32
Tree	Object instance = injected . filterCandidate ( NUMBER_CONSTANT , field , instance , field ) . thenInject () ;
Code	Object instance = injected . filterCandidate ( NUMBER_CONSTANT , field , instance , field ) . thenInject () ;
Distance : 5

33
Tree	Object instance = ( ( mocks ) this ) . thenInject ( mocks , field , mocks ) . thenInject () ;
Code	Object instance = ( ( mocks ) this ) . thenInject ( mocks , field , mocks ) . thenInject () ;
Distance : 11

34
Tree	Object injected = mockCandidateFilter . filterCandidate ( NUMBER_CONSTANT , field , instance , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( NUMBER_CONSTANT , field , instance , instance ) . thenInject () ;
Distance : 2

35
Tree	Object injected = injected . filterCandidate ( instance , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( instance , field , instance ) . thenInject () ;
Distance : 4

36
Tree	Object injected = injected . filterCandidate ( NUMBER_CONSTANT , field , mocks , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( NUMBER_CONSTANT , field , mocks , instance ) . thenInject () ;
Distance : 3

37
Tree	Object injected = ( ( mocks ) field ) . thenInject ( mocks , instance , injected ) . thenInject () ;
Code	Object injected = ( ( mocks ) field ) . thenInject ( mocks , instance , injected ) . thenInject () ;
Distance : 11

38
Tree	Object instance = injected . filterCandidate ( mocks , instance , instance ) . thenInject () ;
Code	Object instance = injected . filterCandidate ( mocks , instance , instance ) . thenInject () ;
Distance : 5

39
Tree	Object field = filterCandidate ( injected , NUMBER_CONSTANT ) . thenInject () ;
Code	Object field = filterCandidate ( injected , NUMBER_CONSTANT ) . thenInject () ;
Distance : 9

40
Tree	Object instance = ( ( mocks ) mocks ) . thenInject ( mocks , field , instance ) . thenInject () ;
Code	Object instance = ( ( mocks ) mocks ) . thenInject ( mocks , field , instance ) . thenInject () ;
Distance : 10

41
Tree	Object injected = filterCandidate ( mocks , instance , instance ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , instance , instance ) . thenInject () ;
Distance : 5

42
Tree	Object field = mocks . filterCandidate ( mocks , field , NUMBER_CONSTANT ) . thenInject () ;
Code	Object field = mocks . filterCandidate ( mocks , field , NUMBER_CONSTANT ) . thenInject () ;
Distance : 5

43
Tree	Object injected = filterCandidate ( injected , field , field ) . thenInject () ;
Code	Object injected = filterCandidate ( injected , field , field ) . thenInject () ;
Distance : 6

44
Tree	Object mocks = mockCandidateFilter . filterCandidate ( NUMBER_CONSTANT , field , field , instance ) . thenInject () ;
Code	Object mocks = mockCandidateFilter . filterCandidate ( NUMBER_CONSTANT , field , field , instance ) . thenInject () ;
Distance : 3

45
Tree	Object injected = ( ( mocks ) field ) . thenInject ( mocks , field , instance ) . thenInject () ;
Code	Object injected = ( ( mocks ) field ) . thenInject ( mocks , field , instance ) . thenInject () ;
Distance : 9

46
Tree	Object injected = filterCandidate ( instance , field , instance , instance ) . thenInject () ;
Code	Object injected = filterCandidate ( instance , field , instance , instance ) . thenInject () ;
Distance : 4

47
Tree	Object injected = filterCandidate ( mocks , field , mocks , thenInject ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , field , mocks , thenInject ) . thenInject () ;
Distance : 4

48
Tree	Object injected = mockCandidateFilter . filterCandidate ( NUMBER_CONSTANT , field , field , field ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( NUMBER_CONSTANT , field , field , field ) . thenInject () ;
Distance : 3

49
Tree	Object injected = filterCandidate ( mocks , instance , injected ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , instance , injected ) . thenInject () ;
Distance : 6

50
Tree	Object instance = filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object instance = filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 5

51
Tree	Object mocks = field . filterCandidate ( mocks , field , NUMBER_CONSTANT ) . thenInject () ;
Code	Object mocks = field . filterCandidate ( mocks , field , NUMBER_CONSTANT ) . thenInject () ;
Distance : 5

52
Tree	Object field = ( ( mocks ) this ) . thenInject ( mocks , field , instance ) . thenInject () ;
Code	Object field = ( ( mocks ) this ) . thenInject ( mocks , field , instance ) . thenInject () ;
Distance : 10

53
Tree	Object injected = injected . filterCandidate ( mocks , mocks , field ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , mocks , field ) . thenInject () ;
Distance : 5

54
Tree	Object injected = filterCandidate ( mocks , instance , instance ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , instance , instance ) . thenInject () ;
Distance : 5

55
Tree	Object instance = filterCandidate ( mocks , injected , instance ) . thenInject () ;
Code	Object instance = filterCandidate ( mocks , injected , instance ) . thenInject () ;
Distance : 6

56
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 2

57
Tree	Object field = filterCandidate ( mocks , field , field , instance ) . thenInject () ;
Code	Object field = filterCandidate ( mocks , field , field , instance ) . thenInject () ;
Distance : 4

58
Tree	Object instance = ( ( injected ) this ) . thenInject ( mocks , field , instance ) . thenInject () ;
Code	Object instance = ( ( injected ) this ) . thenInject ( mocks , field , instance ) . thenInject () ;
Distance : 10

59
Tree	Object injected = ( ( mocks ) this ) . thenInject ( mocks , field , field ) . thenInject () ;
Code	Object injected = ( ( mocks ) this ) . thenInject ( mocks , field , field ) . thenInject () ;
Distance : 10

60
Tree	Object instance = ( ( mocks ) this ) . thenInject ( injected , field , instance ) . thenInject () ;
Code	Object instance = ( ( mocks ) this ) . thenInject ( injected , field , instance ) . thenInject () ;
Distance : 11

61
Tree	Object injected = mockCandidateFilter . filterCandidate ( NUMBER_CONSTANT , instance , instance , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( NUMBER_CONSTANT , instance , instance , instance ) . thenInject () ;
Distance : 3

62
Tree	Object injected = filterCandidate ( injected , field , instance , injected ) . thenInject () ;
Code	Object injected = filterCandidate ( injected , field , instance , injected ) . thenInject () ;
Distance : 5

63
Tree	Object injected = filterCandidate ( mocks , mocks , instance , thenInject ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , mocks , instance , thenInject ) . thenInject () ;
Distance : 5

64
Tree	Object mocks = filterCandidate ( mocks , instance , instance ) . thenInject () ;
Code	Object mocks = filterCandidate ( mocks , instance , instance ) . thenInject () ;
Distance : 6

65
Tree	Object injected = injected . filterCandidate ( mocks . filterCandidate ( mocks , field , instance ) , thenInject , field ) ;
Code	Object injected = injected . filterCandidate ( mocks . filterCandidate ( mocks , field , instance ) , thenInject , field ) ;
Distance : 10

66
Tree	Object injected = filterCandidate ( field , instance , instance ) . thenInject () ;
Code	Object injected = filterCandidate ( field , instance , instance ) . thenInject () ;
Distance : 5

67
Tree	Object mocks = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object mocks = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 3

68
Tree	Object injected = filterCandidate ( mocks , instance , instance , injected ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , instance , instance , injected ) . thenInject () ;
Distance : 5

69
Tree	Object mocks = filterCandidate ( mocks , instance , instance , field ) . thenInject () ;
Code	Object mocks = filterCandidate ( mocks , instance , instance , field ) . thenInject () ;
Distance : 6

70
Tree	Object instance = filterCandidate ( mocks , field ) . thenInject () ;
Code	Object instance = filterCandidate ( mocks , field ) . thenInject () ;
Distance : 7

71
Tree	Object field = ( ( mocks ) instance ) . thenInject ( mocks , field , field ) . thenInject () ;
Code	Object field = ( ( mocks ) instance ) . thenInject ( mocks , field , field ) . thenInject () ;
Distance : 11

72
Tree	Object injected = mockCandidateFilter . filterCandidate ( injected , field , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( injected , field , instance ) . thenInject () ;
Distance : 3

73
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks . filterCandidate ( mocks , field , instance ) , thenInject , instance ) ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks . filterCandidate ( mocks , field , instance ) , thenInject , instance ) ;
Distance : 9

74
Tree	Object instance = filterCandidate ( mocks , injected ) . thenInject () ;
Code	Object instance = filterCandidate ( mocks , injected ) . thenInject () ;
Distance : 8

75
Tree	Object mocks = ( ( mocks ) field ) . thenInject ( mocks , field , instance ) . thenInject () ;
Code	Object mocks = ( ( mocks ) field ) . thenInject ( mocks , field , instance ) . thenInject () ;
Distance : 10

76
Tree	Object mocks = filterCandidate ( mocks , field , mocks , instance ) . thenInject () ;
Code	Object mocks = filterCandidate ( mocks , field , mocks , instance ) . thenInject () ;
Distance : 4

77
Tree	Object injected = injected . filterCandidate ( mocks , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , instance ) . thenInject () ;
Distance : 5

78
Tree	Object injected = mocks . filterCandidate ( mocks . filterCandidate ( mocks , field , instance ) , injected , instance ) ;
Code	Object injected = mocks . filterCandidate ( mocks . filterCandidate ( mocks , field , instance ) , injected , instance ) ;
Distance : 11

79
Tree	Object field = filterCandidate ( mocks , field , field , field ) . thenInject () ;
Code	Object field = filterCandidate ( mocks , field , field , field ) . thenInject () ;
Distance : 5

80
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks . filterCandidate ( mocks , field , instance ) , injected , field ) ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks . filterCandidate ( mocks , field , instance ) , injected , field ) ;
Distance : 10

81
Tree	Object injected = injected . filterCandidate ( injected , field ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( injected , field ) . thenInject () ;
Distance : 6

82
Tree	Object mocks = mockCandidateFilter . filterCandidate ( mocks , field , injected ) . thenInject () ;
Code	Object mocks = mockCandidateFilter . filterCandidate ( mocks , field , injected ) . thenInject () ;
Distance : 4

83
Tree	Object injected = filterCandidate ( mocks , instance , instance , field ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , instance , instance , field ) . thenInject () ;
Distance : 5

84
Tree	Object field = injected . filterCandidate ( NUMBER_CONSTANT , field , field , instance ) . thenInject () ;
Code	Object field = injected . filterCandidate ( NUMBER_CONSTANT , field , field , instance ) . thenInject () ;
Distance : 4

85
Tree	Object injected = filterCandidate ( mocks , mocks , instance , field ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , mocks , instance , field ) . thenInject () ;
Distance : 5

86
Tree	Object injected = injected . filterCandidate ( mocks , field , field ) ;
Code	Object injected = injected . filterCandidate ( mocks , field , field ) ;
Distance : 7

87
Tree	Object field = injected ( mocks , field ) . thenInject () ;
Code	Object field = injected ( mocks , field ) . thenInject () ;
Distance : 8

88
Tree	Object injected = filterCandidate ( mocks , field , field ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , field , field ) . thenInject () ;
Distance : 5

89
Tree	Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 3

90
Tree	Object mocks = mockCandidateFilter ( mocks , field ) . thenInject () ;
Code	Object mocks = mockCandidateFilter ( mocks , field ) . thenInject () ;
Distance : 7

91
Tree	Object injected = mockCandidateFilter ( mocks , field ) . thenInject () ;
Code	Object injected = mockCandidateFilter ( mocks , field ) . thenInject () ;
Distance : 6

92
Tree	Object injected = filterCandidate ( mocks , field , instance , instance ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , field , instance , instance ) . thenInject () ;
Distance : 3

93
Tree	Object injected = injected ( mocks , field , field ) . thenInject () ;
Code	Object injected = injected ( mocks , field , field ) . thenInject () ;
Distance : 6

94
Tree	Object instance = injected ( mocks , field ) . thenInject () ;
Code	Object instance = injected ( mocks , field ) . thenInject () ;
Distance : 8

95
Tree	Object injected = mocks . filterCandidate ( mocks , field , instance ) ;
Code	Object injected = mocks . filterCandidate ( mocks , field , instance ) ;
Distance : 6

96
Tree	Object field = filterCandidate ( mocks , field ) . thenInject () ;
Code	Object field = filterCandidate ( mocks , field ) . thenInject () ;
Distance : 7

97
Tree	Object injected = mocks ( mocks , field , instance ) . thenInject () ;
Code	Object injected = mocks ( mocks , field , instance ) . thenInject () ;
Distance : 5

98
Tree	Object injected = injected ( mocks , instance ) . thenInject () ;
Code	Object injected = injected ( mocks , instance ) . thenInject () ;
Distance : 7

99
Tree	Object field = filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object field = filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 5

========================================================================


========================================================================
Example Number: 84
Parent Code is: 
{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return MOCKITO_CORE . mock ( classToMock , mockSettings , true ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (800{val=MOCKITO_CORE}) (235{val=.}) (802{val=mock}) (214{val=(}) (800{val=classToMock}) (234{val=,}) (800{val=mockSettings}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (800{val=MOCKITO_CORE}) (235{val=.}) (802{val=mock}) (214{val=(}) (800{val=classToMock}) (234{val=,}) (800{val=mockSettings}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/16/parent/src_org_mockito_Mockito.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ return mock ( classToMock , mockSettings ) ; } ==
Code	{ return mock ( classToMock , mockSettings ) ; } ==
Distance : 5

1
Tree	{ return classToMock . mock ( MOCKITO_CORE ) . mock ( MOCKITO_CORE , classToMock ) ; }
Code	{ return classToMock . mock ( MOCKITO_CORE ) . mock ( MOCKITO_CORE , classToMock ) ; }
Distance : 8

2
Tree	{ return mockSettings . mock ( classToMock , MOCKITO_CORE . mock ( MOCKITO_CORE ) ) ; }
Code	{ return mockSettings . mock ( classToMock , MOCKITO_CORE . mock ( MOCKITO_CORE ) ) ; }
Distance : 7

3
Tree	{ return mockSettings . mock ( MOCKITO_CORE , classToMock . mock ( classToMock ) ) ; }
Code	{ return mockSettings . mock ( MOCKITO_CORE , classToMock . mock ( classToMock ) ) ; }
Distance : 8

4
Tree	{ return classToMock . mock ( mockSettings , classToMock . mock ( classToMock ) ) ; }
Code	{ return classToMock . mock ( mockSettings , classToMock . mock ( classToMock ) ) ; }
Distance : 8

5
Tree	{ return mock ( mockSettings , break; , MOCKITO_CORE ) ; }
Code	{ return mock ( mockSettings , break; , MOCKITO_CORE ) ; }
Distance : 5

6
Tree	{ return mockSettings . mock ( MOCKITO_CORE ) . mock ( mockSettings , classToMock ) ; }
Code	{ return mockSettings . mock ( MOCKITO_CORE ) . mock ( mockSettings , classToMock ) ; }
Distance : 7

7
Tree	{ return mock ( MOCKITO_CORE , break; , MOCKITO_CORE ) ; }
Code	{ return mock ( MOCKITO_CORE , break; , MOCKITO_CORE ) ; }
Distance : 5

8
Tree	{ return classToMock . mock ( mockSettings ) . mock ( mockSettings , classToMock ) ; }
Code	{ return classToMock . mock ( mockSettings ) . mock ( mockSettings , classToMock ) ; }
Distance : 7

9
Tree	{ return classToMock . mock ( mockSettings ) . mock ( MOCKITO_CORE , classToMock ) ; }
Code	{ return classToMock . mock ( mockSettings ) . mock ( MOCKITO_CORE , classToMock ) ; }
Distance : 8

10
Tree	{ return mock ( MOCKITO_CORE , default: , classToMock ) ; }
Code	{ return mock ( MOCKITO_CORE , default: , classToMock ) ; }
Distance : 5

11
Tree	{ return mock ( classToMock , mockSettings ) ; } !
Code	{ return mock ( classToMock , mockSettings ) ; } !
Distance : 5

12
Tree	{ return mock ( classToMock , mockSettings ) ; } mode
Code	{ return mock ( classToMock , mockSettings ) ; } mode
Distance : 5

13
Tree	{ return mock ( classToMock , mockSettings ) ; } LINE_JOINER
Code	{ return mock ( classToMock , mockSettings ) ; } LINE_JOINER
Distance : 5

14
Tree	{ return mock ( classToMock , mockSettings ) ; } parent
Code	{ return mock ( classToMock , mockSettings ) ; } parent
Distance : 5

15
Tree	{ return mockSettings . mock ( MOCKITO_CORE ) . mock ( MOCKITO_CORE , classToMock ) ; }
Code	{ return mockSettings . mock ( MOCKITO_CORE ) . mock ( MOCKITO_CORE , classToMock ) ; }
Distance : 8

16
Tree	{ return classToMock . mock ( MOCKITO_CORE ) . mock ( mockSettings , classToMock ) ; }
Code	{ return classToMock . mock ( MOCKITO_CORE ) . mock ( mockSettings , classToMock ) ; }
Distance : 7

17
Tree	{ return classToMock . mock ( MOCKITO_CORE , classToMock . mock ( classToMock ) ) ; }
Code	{ return classToMock . mock ( MOCKITO_CORE , classToMock . mock ( classToMock ) ) ; }
Distance : 8

18
Tree	{ return mockSettings . mock ( classToMock , MOCKITO_CORE . mock ( mockSettings ) ) ; }
Code	{ return mockSettings . mock ( classToMock , MOCKITO_CORE . mock ( mockSettings ) ) ; }
Distance : 7

19
Tree	{ return mock ( MOCKITO_CORE . mock ( MOCKITO_CORE ) , MOCKITO_CORE ) ; }
Code	{ return mock ( MOCKITO_CORE . mock ( MOCKITO_CORE ) , MOCKITO_CORE ) ; }
Distance : 6

20
Tree	{ return mockSettings . mock ( mockSettings , classToMock , mockSettings . mock () ) ; }
Code	{ return mockSettings . mock ( mockSettings , classToMock , mockSettings . mock () ) ; }
Distance : 6

21
Tree	{ return mockSettings . mock ( mockSettings , mockSettings , classToMock . mock () ) ; }
Code	{ return mockSettings . mock ( mockSettings , mockSettings , classToMock . mock () ) ; }
Distance : 6

22
Tree	{ return mockSettings . mock ( mockSettings , null , MOCKITO_CORE ) ; }
Code	{ return mockSettings . mock ( mockSettings , null , MOCKITO_CORE ) ; }
Distance : 4

23
Tree	{ return classToMock . mock ( classToMock , super(); , classToMock ) ; }
Code	{ return classToMock . mock ( classToMock , super(); , classToMock ) ; }
Distance : 3

24
Tree	{ return mockSettings . mock ( classToMock ) . mock ( MOCKITO_CORE , MOCKITO_CORE ) ; }
Code	{ return mockSettings . mock ( classToMock ) . mock ( MOCKITO_CORE , MOCKITO_CORE ) ; }
Distance : 7

25
Tree	{ return classToMock . mock ( MOCKITO_CORE , MOCKITO_CORE , mockSettings . mock () ) ; }
Code	{ return classToMock . mock ( MOCKITO_CORE , MOCKITO_CORE , mockSettings . mock () ) ; }
Distance : 7

26
Tree	{ return MOCKITO_CORE . mock ( mockSettings , MOCKITO_CORE , classToMock . mock () ) ; }
Code	{ return MOCKITO_CORE . mock ( mockSettings , MOCKITO_CORE , classToMock . mock () ) ; }
Distance : 6

27
Tree	{ return MOCKITO_CORE . mock ( mockSettings , classToMock , MOCKITO_CORE . mock () ) ; }
Code	{ return MOCKITO_CORE . mock ( mockSettings , classToMock , MOCKITO_CORE . mock () ) ; }
Distance : 6

28
Tree	{ return classToMock . mock ( MOCKITO_CORE , mockSettings , MOCKITO_CORE . mock () ) ; }
Code	{ return classToMock . mock ( MOCKITO_CORE , mockSettings , MOCKITO_CORE . mock () ) ; }
Distance : 6

29
Tree	{ return MOCKITO_CORE . mock ( mockSettings , MOCKITO_CORE . mock ( MOCKITO_CORE ) ) ; }
Code	{ return MOCKITO_CORE . mock ( mockSettings , MOCKITO_CORE . mock ( MOCKITO_CORE ) ) ; }
Distance : 7

30
Tree	{ return MOCKITO_CORE . mock ( mockSettings , continue; , MOCKITO_CORE ) ; }
Code	{ return MOCKITO_CORE . mock ( mockSettings , continue; , MOCKITO_CORE ) ; }
Distance : 3

31
Tree	{ return classToMock . mock ( MOCKITO_CORE , break; , mockSettings ) ; }
Code	{ return classToMock . mock ( MOCKITO_CORE , break; , mockSettings ) ; }
Distance : 4

32
Tree	{ return classToMock . mock ( classToMock , break; , classToMock ) ; }
Code	{ return classToMock . mock ( classToMock , break; , classToMock ) ; }
Distance : 3

33
Tree	{ return classToMock . mock ( classToMock , MOCKITO_CORE . mock ( MOCKITO_CORE ) ) ; }
Code	{ return classToMock . mock ( classToMock , MOCKITO_CORE . mock ( MOCKITO_CORE ) ) ; }
Distance : 7

34
Tree	{ return mock ( classToMock , mockSettings ) ; } ArrayList
Code	{ return mock ( classToMock , mockSettings ) ; } ArrayList
Distance : 5

35
Tree	{ return classToMock . mock ( mockSettings ) . mock ( classToMock , classToMock ) ; }
Code	{ return classToMock . mock ( mockSettings ) . mock ( classToMock , classToMock ) ; }
Distance : 8

36
Tree	{ return mock ( classToMock , mockSettings ) ; } createIllegalArgumentException
Code	{ return mock ( classToMock , mockSettings ) ; } createIllegalArgumentException
Distance : 5

37
Tree	{ return mock ( classToMock , mockSettings ) ; } *
Code	{ return mock ( classToMock , mockSettings ) ; } *
Distance : 5

38
Tree	{ return mock () . mock ( classToMock , mockSettings ) ; } false
Code	{ return mock () . mock ( classToMock , mockSettings ) ; } false
Distance : 5

39
Tree	{ return mock () . mock ( classToMock , mockSettings ) ; } double
Code	{ return mock () . mock ( classToMock , mockSettings ) ; } double
Distance : 5

40
Tree	{ return mock () . mock ( classToMock , mockSettings ) ; } :
Code	{ return mock () . mock ( classToMock , mockSettings ) ; } :
Distance : 5

41
Tree	{ return mock () . mock ( classToMock , mockSettings ) ; } try
Code	{ return mock () . mock ( classToMock , mockSettings ) ; } try
Distance : 5

42
Tree	{ return mock () . mock ( classToMock , mockSettings ) ; } result
Code	{ return mock () . mock ( classToMock , mockSettings ) ; } result
Distance : 5

43
Tree	{ return mock () . mock ( classToMock , mockSettings ) ; } boolean
Code	{ return mock () . mock ( classToMock , mockSettings ) ; } boolean
Distance : 5

44
Tree	{ return mock () . mock ( classToMock , mockSettings ) ; } checkState
Code	{ return mock () . mock ( classToMock , mockSettings ) ; } checkState
Distance : 5

45
Tree	{ return mock () . mock ( classToMock , mockSettings ) ; } array
Code	{ return mock () . mock ( classToMock , mockSettings ) ; } array
Distance : 5

46
Tree	{ return mock () . mock ( classToMock , mockSettings ) ; } class
Code	{ return mock () . mock ( classToMock , mockSettings ) ; } class
Distance : 5

47
Tree	{ return mock () . mock ( classToMock , mockSettings ) ; } ParamChecks
Code	{ return mock () . mock ( classToMock , mockSettings ) ; } ParamChecks
Distance : 5

48
Tree	{ return mock () . mock ( classToMock , mockSettings ) ; } mock
Code	{ return mock () . mock ( classToMock , mockSettings ) ; } mock
Distance : 5

49
Tree	{ return mock () . mock ( classToMock , mockSettings ) ; } MathRuntimeException
Code	{ return mock () . mock ( classToMock , mockSettings ) ; } MathRuntimeException
Distance : 5

50
Tree	{ return mock () . mock ( classToMock , mockSettings ) ; } Preconditions
Code	{ return mock () . mock ( classToMock , mockSettings ) ; } Preconditions
Distance : 5

51
Tree	{ return mock () . mock ( classToMock , mockSettings ) ; } mode
Code	{ return mock () . mock ( classToMock , mockSettings ) ; } mode
Distance : 5

52
Tree	{ return mock () . mock ( classToMock , mockSettings ) ; } f
Code	{ return mock () . mock ( classToMock , mockSettings ) ; } f
Distance : 5

53
Tree	{ return mock () . mock ( classToMock , mockSettings ) ; } super
Code	{ return mock () . mock ( classToMock , mockSettings ) ; } super
Distance : 5

54
Tree	{ return mock () . mock ( classToMock , mockSettings ) ; } [
Code	{ return mock () . mock ( classToMock , mockSettings ) ; } [
Distance : 5

55
Tree	{ return mock () . mock ( classToMock , mockSettings ) ; } n
Code	{ return mock () . mock ( classToMock , mockSettings ) ; } n
Distance : 5

56
Tree	{ return mock ( classToMock , mockSettings ) ; } {}
Code	{ return mock ( classToMock , mockSettings ) ; } {}
Distance : 5

57
Tree	{ return mock () . mock ( classToMock , mockSettings ) ; } <s>
Code	{ return mock () . mock ( classToMock , mockSettings ) ; } <s>
Distance : 5

58
Tree	{ return mock () . mock ( classToMock , mockSettings ) ; } MOCKITO_CORE
Code	{ return mock () . mock ( classToMock , mockSettings ) ; } MOCKITO_CORE
Distance : 5

59
Tree	{ return mock () . mock ( classToMock , mockSettings ) ; } assertEquals
Code	{ return mock () . mock ( classToMock , mockSettings ) ; } assertEquals
Distance : 5

60
Tree	{ return mock () . mock ( classToMock , mockSettings ) ; } )
Code	{ return mock () . mock ( classToMock , mockSettings ) ; } )
Distance : 5

61
Tree	{ return mock () . mock ( classToMock , mockSettings ) ; } >
Code	{ return mock () . mock ( classToMock , mockSettings ) ; } >
Distance : 5

62
Tree	{ return mock () . mock ( classToMock , mockSettings ) ; } &&
Code	{ return mock () . mock ( classToMock , mockSettings ) ; } &&
Distance : 5

63
Tree	{ return mock () . mock ( classToMock , mockSettings ) ; } -
Code	{ return mock () . mock ( classToMock , mockSettings ) ; } -
Distance : 5

64
Tree	{ return mock () . mock ( classToMock , mockSettings ) ; } true
Code	{ return mock () . mock ( classToMock , mockSettings ) ; } true
Distance : 5

65
Tree	{ return mock () . mock ( classToMock , mockSettings ) ; } void
Code	{ return mock () . mock ( classToMock , mockSettings ) ; } void
Distance : 5

66
Tree	{ return mock () . mock ( classToMock , mockSettings ) ; } throw
Code	{ return mock () . mock ( classToMock , mockSettings ) ; } throw
Distance : 5

67
Tree	{ return mock () . mock ( classToMock , mockSettings ) ; } compiler
Code	{ return mock () . mock ( classToMock , mockSettings ) ; } compiler
Distance : 5

68
Tree	{ return mock () . mock ( classToMock , mockSettings ) ; } catch
Code	{ return mock () . mock ( classToMock , mockSettings ) ; } catch
Distance : 5

69
Tree	{ return mock () . mock ( classToMock , mockSettings ) ; } e
Code	{ return mock () . mock ( classToMock , mockSettings ) ; } e
Distance : 5

70
Tree	{ return mock () . mock ( classToMock , mockSettings ) ; } +
Code	{ return mock () . mock ( classToMock , mockSettings ) ; } +
Distance : 5

71
Tree	{ return mock ( classToMock , mockSettings ) ; } testSame
Code	{ return mock ( classToMock , mockSettings ) ; } testSame
Distance : 5

72
Tree	{ return mock () . mock ( classToMock , mockSettings ) ; } ]
Code	{ return mock () . mock ( classToMock , mockSettings ) ; } ]
Distance : 5

73
Tree	{ return classToMock . mock ( MOCKITO_CORE , super(); , mockSettings ) ; }
Code	{ return classToMock . mock ( MOCKITO_CORE , super(); , mockSettings ) ; }
Distance : 4

74
Tree	{ return mockSettings . mock ( MOCKITO_CORE ) . mock ( classToMock , classToMock ) ; }
Code	{ return mockSettings . mock ( MOCKITO_CORE ) . mock ( classToMock , classToMock ) ; }
Distance : 8

75
Tree	{ return MOCKITO_CORE . mock ( MOCKITO_CORE ) . mock ( mockSettings , MOCKITO_CORE ) ; }
Code	{ return MOCKITO_CORE . mock ( MOCKITO_CORE ) . mock ( mockSettings , MOCKITO_CORE ) ; }
Distance : 6

76
Tree	{ return mockSettings . mock ( classToMock , classToMock . mock ( classToMock ) ) ; }
Code	{ return mockSettings . mock ( classToMock , classToMock . mock ( classToMock ) ) ; }
Distance : 7

77
Tree	{ return mock ( MOCKITO_CORE , classToMock , MOCKITO_CORE ) ; }
Code	{ return mock ( MOCKITO_CORE , classToMock , MOCKITO_CORE ) ; }
Distance : 5

78
Tree	{ return mockSettings . mock () . mock ( mockSettings , MOCKITO_CORE ) ; }
Code	{ return mockSettings . mock () . mock ( mockSettings , MOCKITO_CORE ) ; }
Distance : 6

79
Tree	{ return mock ( mockSettings . mock ( mockSettings ) , classToMock ) ; }
Code	{ return mock ( mockSettings . mock ( mockSettings ) , classToMock ) ; }
Distance : 7

80
Tree	{ return MOCKITO_CORE . mock ( MOCKITO_CORE ) . mock ( MOCKITO_CORE , MOCKITO_CORE ) ; }
Code	{ return MOCKITO_CORE . mock ( MOCKITO_CORE ) . mock ( MOCKITO_CORE , MOCKITO_CORE ) ; }
Distance : 7

81
Tree	{ return mock ( MOCKITO_CORE , MOCKITO_CORE , classToMock ) ; }
Code	{ return mock ( MOCKITO_CORE , MOCKITO_CORE , classToMock ) ; }
Distance : 5

82
Tree	{ return mockSettings . mock ( classToMock ) . mock ( mockSettings , classToMock ) ; }
Code	{ return mockSettings . mock ( classToMock ) . mock ( mockSettings , classToMock ) ; }
Distance : 6

83
Tree	{ return mock ( MOCKITO_CORE . mock ( MOCKITO_CORE ) , classToMock ) ; }
Code	{ return mock ( MOCKITO_CORE . mock ( MOCKITO_CORE ) , classToMock ) ; }
Distance : 6

84
Tree	{ return mockSettings . mock ( classToMock ) . mock ( MOCKITO_CORE , classToMock ) ; }
Code	{ return mockSettings . mock ( classToMock ) . mock ( MOCKITO_CORE , classToMock ) ; }
Distance : 7

85
Tree	{ return mockSettings . mock ( mockSettings ) . mock ( mockSettings , mockSettings ) ; }
Code	{ return mockSettings . mock ( mockSettings ) . mock ( mockSettings , mockSettings ) ; }
Distance : 7

86
Tree	{ return mockSettings . mock ( mockSettings , mockSettings . mock ( classToMock ) ) ; }
Code	{ return mockSettings . mock ( mockSettings , mockSettings . mock ( classToMock ) ) ; }
Distance : 7

87
Tree	{ return classToMock . mock ( MOCKITO_CORE , classToMock , mockSettings . mock () ) ; }
Code	{ return classToMock . mock ( MOCKITO_CORE , classToMock , mockSettings . mock () ) ; }
Distance : 6

88
Tree	{ return mock ( mockSettings , MOCKITO_CORE , classToMock ) ; }
Code	{ return mock ( mockSettings , MOCKITO_CORE , classToMock ) ; }
Distance : 5

89
Tree	{ return mock ( classToMock , break; , MOCKITO_CORE ) ; }
Code	{ return mock ( classToMock , break; , MOCKITO_CORE ) ; }
Distance : 4

90
Tree	{ return mockSettings . mock ( mockSettings , null , classToMock ) ; }
Code	{ return mockSettings . mock ( mockSettings , null , classToMock ) ; }
Distance : 4

91
Tree	{ return mockSettings . mock ( mockSettings , MOCKITO_CORE ) ; }
Code	{ return mockSettings . mock ( mockSettings , MOCKITO_CORE ) ; }
Distance : 4

92
Tree	{ return mockSettings . mock () . mock ( MOCKITO_CORE , MOCKITO_CORE ) ; }
Code	{ return mockSettings . mock () . mock ( MOCKITO_CORE , MOCKITO_CORE ) ; }
Distance : 7

93
Tree	{ return classToMock . mock ( classToMock , classToMock . mock ( classToMock ) ) ; }
Code	{ return classToMock . mock ( classToMock , classToMock . mock ( classToMock ) ) ; }
Distance : 7

94
Tree	{ return classToMock . mock () . mock ( mockSettings , MOCKITO_CORE ) ; }
Code	{ return classToMock . mock () . mock ( mockSettings , MOCKITO_CORE ) ; }
Distance : 6

95
Tree	{ return mockSettings . mock ( classToMock , break; , mockSettings ) ; }
Code	{ return mockSettings . mock ( classToMock , break; , mockSettings ) ; }
Distance : 3

96
Tree	{ return classToMock . mock ( classToMock ) . mock ( mockSettings , classToMock ) ; }
Code	{ return classToMock . mock ( classToMock ) . mock ( mockSettings , classToMock ) ; }
Distance : 6

97
Tree	{ return mock ( MOCKITO_CORE . mock ( mockSettings ) , classToMock ) ; }
Code	{ return mock ( MOCKITO_CORE . mock ( mockSettings ) , classToMock ) ; }
Distance : 6

98
Tree	{ return classToMock . mock ( classToMock ) . mock ( MOCKITO_CORE , classToMock ) ; }
Code	{ return classToMock . mock ( classToMock ) . mock ( MOCKITO_CORE , classToMock ) ; }
Distance : 7

99
Tree	{ return mockSettings . mock ( MOCKITO_CORE ) . mock ( mockSettings , mockSettings ) ; }
Code	{ return mockSettings . mock ( MOCKITO_CORE ) . mock ( mockSettings , mockSettings ) ; }
Distance : 7

========================================================================


========================================================================
Example Number: 85
Parent Code is: 
mockingProgress . verificationStarted ( mode ) ;
-------------------------------------------------------------------------------
Child code is: 
mockingProgress . verificationStarted ( new MockAwareVerificationMode ( mock , mode ) ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (32 (800{val=mockingProgress}) (235{val=.}) (802{val=verificationStarted}) (214{val=(}) (800{val=mode}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (32 (800{val=mockingProgress}) (235{val=.}) (802{val=verificationStarted}) (214{val=(}) (14 (304{val=new}) (43 (801{val=MockAwareVerificationMode})) (214{val=(}) (800{val=mock}) (234{val=,}) (800{val=mode}) (215{val=)})) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/14/parent/src_org_mockito_internal_MockitoCore.java
-------------------------------------------------------------------------------
Edit Distance : 6
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	verificationStarted ( mode , mockingProgress ) ; @
Code	verificationStarted ( mode , mockingProgress ) ; @
Distance : 9

1
Tree	verificationStarted ( mode ) ; +
Code	verificationStarted ( mode ) ; +
Distance : 9

2
Tree	verificationStarted ( mode ) ; e
Code	verificationStarted ( mode ) ; e
Distance : 9

3
Tree	verificationStarted ( mode ) ; ()
Code	verificationStarted ( mode ) ; ()
Distance : 9

4
Tree	verificationStarted ( mode ) ; ,
Code	verificationStarted ( mode ) ; ,
Distance : 9

5
Tree	verificationStarted ( mode ) ; ;
Code	verificationStarted ( mode ) ; ;
Distance : 8

6
Tree	verificationStarted ( mode ) ; ;
Code	verificationStarted ( mode ) ; ;
Distance : 8

7
Tree	verificationStarted ( mode ) ; >
Code	verificationStarted ( mode ) ; >
Distance : 9

8
Tree	verificationStarted ( mode ) ; (
Code	verificationStarted ( mode ) ; (
Distance : 9

9
Tree	verificationStarted ( mode ) ; <blank>
Code	verificationStarted ( mode ) ; <blank>
Distance : 9

10
Tree	verificationStarted ( mode ) ; <s>
Code	verificationStarted ( mode ) ; <s>
Distance : 9

11
Tree	verificationStarted ( mode ) ; }
Code	verificationStarted ( mode ) ; }
Distance : 9

12
Tree	verificationStarted ( mode ) ; {
Code	verificationStarted ( mode ) ; {
Distance : 9

13
Tree	verificationStarted ( mode ) ; =
Code	verificationStarted ( mode ) ; =
Distance : 9

14
Tree	verificationStarted ( mode ) ; .
Code	verificationStarted ( mode ) ; .
Distance : 9

15
Tree	verificationStarted ( mode ) ; STRING_CONSTANT
Code	verificationStarted ( mode ) ; STRING_CONSTANT
Distance : 9

16
Tree	verificationStarted ( mode ) ; final
Code	verificationStarted ( mode ) ; final
Distance : 9

17
Tree	verificationStarted ( mode ) ; if
Code	verificationStarted ( mode ) ; if
Distance : 9

18
Tree	verificationStarted ( mode ) ; createIllegalArgumentException
Code	verificationStarted ( mode ) ; createIllegalArgumentException
Distance : 9

19
Tree	mockingProgress . verificationStarted ( mode ) ; +
Code	mockingProgress . verificationStarted ( mode ) ; +
Distance : 7

20
Tree	mockingProgress . verificationStarted ( mode ) ; e
Code	mockingProgress . verificationStarted ( mode ) ; e
Distance : 7

21
Tree	mockingProgress . verificationStarted ( mode ) ; catch
Code	mockingProgress . verificationStarted ( mode ) ; catch
Distance : 7

22
Tree	mockingProgress . verificationStarted ( mode ) ; compiler
Code	mockingProgress . verificationStarted ( mode ) ; compiler
Distance : 7

23
Tree	mockingProgress . verificationStarted ( mode ) ; throw
Code	mockingProgress . verificationStarted ( mode ) ; throw
Distance : 7

24
Tree	verificationStarted ( mode ) ; public
Code	verificationStarted ( mode ) ; public
Distance : 9

25
Tree	verificationStarted ( mode ) ; <
Code	verificationStarted ( mode ) ; <
Distance : 9

26
Tree	verificationStarted ( mode ) ; NUMBER_CONSTANT
Code	verificationStarted ( mode ) ; NUMBER_CONSTANT
Distance : 9

27
Tree	verificationStarted ( mode ) ; new
Code	verificationStarted ( mode ) ; new
Distance : 9

28
Tree	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ; m
Code	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ; m
Distance : 5

29
Tree	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ; paint
Code	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ; paint
Distance : 5

30
Tree	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ; true
Code	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ; true
Distance : 5

31
Tree	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ; ]
Code	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ; ]
Distance : 5

32
Tree	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ; -
Code	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ; -
Distance : 5

33
Tree	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ; [
Code	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ; [
Distance : 5

34
Tree	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ; @
Code	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ; @
Distance : 5

35
Tree	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ; value
Code	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ; value
Distance : 5

36
Tree	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ; &&
Code	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ; &&
Distance : 5

37
Tree	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ; Preconditions
Code	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ; Preconditions
Distance : 5

38
Tree	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ; double
Code	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ; double
Distance : 5

39
Tree	mockingProgress . verificationStarted ( mode ) ; void
Code	mockingProgress . verificationStarted ( mode ) ; void
Distance : 7

40
Tree	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ; false
Code	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ; false
Distance : 5

41
Tree	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ; int
Code	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ; int
Distance : 5

42
Tree	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ; super
Code	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ; super
Distance : 5

43
Tree	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ; checkState
Code	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ; checkState
Distance : 5

44
Tree	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ; !=
Code	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ; !=
Distance : 5

45
Tree	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ; i
Code	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ; i
Distance : 5

46
Tree	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ; ParamChecks
Code	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ; ParamChecks
Distance : 5

47
Tree	verificationStarted ( mode ) ; -
Code	verificationStarted ( mode ) ; -
Distance : 9

48
Tree	verificationStarted ( mode ) ; ]
Code	verificationStarted ( mode ) ; ]
Distance : 9

49
Tree	verificationStarted ( mode ) ; true
Code	verificationStarted ( mode ) ; true
Distance : 9

50
Tree	verificationStarted ( mode ) ; )
Code	verificationStarted ( mode ) ; )
Distance : 9

51
Tree	verificationStarted ( mode ) ; return
Code	verificationStarted ( mode ) ; return
Distance : 9

52
Tree	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ; test
Code	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ; test
Distance : 5

53
Tree	mockingProgress . verificationStarted ( mode ) ; true
Code	mockingProgress . verificationStarted ( mode ) ; true
Distance : 7

54
Tree	mockingProgress . verificationStarted ( mode ) ; -
Code	mockingProgress . verificationStarted ( mode ) ; -
Distance : 7

55
Tree	mockingProgress . verificationStarted ( mode ) ; &&
Code	mockingProgress . verificationStarted ( mode ) ; &&
Distance : 7

56
Tree	mockingProgress . verificationStarted ( mode ) ; Override
Code	mockingProgress . verificationStarted ( mode ) ; Override
Distance : 7

57
Tree	mockingProgress . verificationStarted ( mode ) ; MathRuntimeException
Code	mockingProgress . verificationStarted ( mode ) ; MathRuntimeException
Distance : 7

58
Tree	mockingProgress . verificationStarted ( mode ) ; mock
Code	mockingProgress . verificationStarted ( mode ) ; mock
Distance : 7

59
Tree	mockingProgress . verificationStarted ( mode ) ; ParamChecks
Code	mockingProgress . verificationStarted ( mode ) ; ParamChecks
Distance : 7

60
Tree	mockingProgress . verificationStarted ( mode ) ; class
Code	mockingProgress . verificationStarted ( mode ) ; class
Distance : 7

61
Tree	mockingProgress . verificationStarted ( mode ) ; f
Code	mockingProgress . verificationStarted ( mode ) ; f
Distance : 7

62
Tree	mockingProgress . verificationStarted ( mode ) ; array
Code	mockingProgress . verificationStarted ( mode ) ; array
Distance : 7

63
Tree	mockingProgress . verificationStarted ( mode ) ; parent
Code	mockingProgress . verificationStarted ( mode ) ; parent
Distance : 7

64
Tree	mockingProgress . verificationStarted ( mode ) ; LINE_JOINER
Code	mockingProgress . verificationStarted ( mode ) ; LINE_JOINER
Distance : 7

65
Tree	mockingProgress . verificationStarted ( mode ) ; x
Code	mockingProgress . verificationStarted ( mode ) ; x
Distance : 7

66
Tree	mockingProgress . verificationStarted ( mode ) ; str
Code	mockingProgress . verificationStarted ( mode ) ; str
Distance : 7

67
Tree	mockingProgress . verificationStarted ( mode ) ; Object
Code	mockingProgress . verificationStarted ( mode ) ; Object
Distance : 7

68
Tree	mockingProgress . verificationStarted ( mode ) ; {
Code	mockingProgress . verificationStarted ( mode ) ; {
Distance : 7

69
Tree	mockingProgress . verificationStarted ( mode ) ; ()
Code	mockingProgress . verificationStarted ( mode ) ; ()
Distance : 7

70
Tree	mockingProgress . verificationStarted ( mode ) ; STRING_CONSTANT
Code	mockingProgress . verificationStarted ( mode ) ; STRING_CONSTANT
Distance : 7

71
Tree	mockingProgress . verificationStarted ( mode ) ; =
Code	mockingProgress . verificationStarted ( mode ) ; =
Distance : 7

72
Tree	mockingProgress . verificationStarted ( mode ) ; new
Code	mockingProgress . verificationStarted ( mode ) ; new
Distance : 7

73
Tree	mockingProgress . verificationStarted ( mode ) ; NUMBER_CONSTANT
Code	mockingProgress . verificationStarted ( mode ) ; NUMBER_CONSTANT
Distance : 7

74
Tree	mockingProgress . verificationStarted ( mode ) ; T
Code	mockingProgress . verificationStarted ( mode ) ; T
Distance : 7

75
Tree	mockingProgress . verificationStarted ( mode ) ; value
Code	mockingProgress . verificationStarted ( mode ) ; value
Distance : 7

76
Tree	mockingProgress . verificationStarted ( mode ) ; !=
Code	mockingProgress . verificationStarted ( mode ) ; !=
Distance : 7

77
Tree	mockingProgress . verificationStarted ( mode ) ; i
Code	mockingProgress . verificationStarted ( mode ) ; i
Distance : 7

78
Tree	verificationStarted ( mode ) ; name
Code	verificationStarted ( mode ) ; name
Distance : 9

79
Tree	verificationStarted ( mode ) ; boolean
Code	verificationStarted ( mode ) ; boolean
Distance : 9

80
Tree	mockingProgress . verificationStarted ( mode ) ; ,
Code	mockingProgress . verificationStarted ( mode ) ; ,
Distance : 7

81
Tree	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ; result
Code	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ; result
Distance : 5

82
Tree	mockingProgress . verificationStarted ( mode ) ; fail
Code	mockingProgress . verificationStarted ( mode ) ; fail
Distance : 7

83
Tree	mockingProgress . verificationStarted ( mode ) ; m
Code	mockingProgress . verificationStarted ( mode ) ; m
Distance : 7

84
Tree	mockingProgress . verificationStarted ( mode ) ; Preconditions
Code	mockingProgress . verificationStarted ( mode ) ; Preconditions
Distance : 7

85
Tree	mockingProgress . verificationStarted ( mode ) ; mode
Code	mockingProgress . verificationStarted ( mode ) ; mode
Distance : 7

86
Tree	mockingProgress . verificationStarted ( mode ) ; ]
Code	mockingProgress . verificationStarted ( mode ) ; ]
Distance : 7

87
Tree	mockingProgress . verificationStarted ( mode ) ; {}
Code	mockingProgress . verificationStarted ( mode ) ; {}
Distance : 7

88
Tree	mockingProgress . verificationStarted ( mode ) ; *
Code	mockingProgress . verificationStarted ( mode ) ; *
Distance : 7

89
Tree	mockingProgress . verificationStarted ( mode ) ; testSame
Code	mockingProgress . verificationStarted ( mode ) ; testSame
Distance : 7

90
Tree	mockingProgress . verificationStarted ( mode ) ; createIllegalArgumentException
Code	mockingProgress . verificationStarted ( mode ) ; createIllegalArgumentException
Distance : 7

91
Tree	mockingProgress . verificationStarted ( mode ) ; ArrayList
Code	mockingProgress . verificationStarted ( mode ) ; ArrayList
Distance : 7

92
Tree	mockingProgress . verificationStarted ( mode ) ; :
Code	mockingProgress . verificationStarted ( mode ) ; :
Distance : 7

93
Tree	mockingProgress . verificationStarted ( mode ) ; result
Code	mockingProgress . verificationStarted ( mode ) ; result
Distance : 7

94
Tree	verificationStarted ( mode ) ; paint
Code	verificationStarted ( mode ) ; paint
Distance : 9

95
Tree	mockingProgress . verificationStarted ( mode ) ; join
Code	mockingProgress . verificationStarted ( mode ) ; join
Distance : 7

96
Tree	mockingProgress . verificationStarted ( mode ) ; boolean
Code	mockingProgress . verificationStarted ( mode ) ; boolean
Distance : 7

97
Tree	mockingProgress . verificationStarted ( mode ) ; IllegalArgumentException
Code	mockingProgress . verificationStarted ( mode ) ; IllegalArgumentException
Distance : 7

98
Tree	mockingProgress . verificationStarted ( mode ) ; invocation
Code	mockingProgress . verificationStarted ( mode ) ; invocation
Distance : 7

99
Tree	mockingProgress . verificationStarted ( mode ) ; Args
Code	mockingProgress . verificationStarted ( mode ) ; Args
Distance : 7

========================================================================


========================================================================
Example Number: 86
Parent Code is: 
return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
-------------------------------------------------------------------------------
Child code is: 
return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata , invocation . getMock () ) , container ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=recordDeepStubAnswer}) (214{val=(}) (32 (802{val=newDeepStubMock}) (214{val=(}) (800{val=returnTypeGenericMetadata}) (215{val=)})) (234{val=,}) (800{val=container}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=recordDeepStubAnswer}) (214{val=(}) (32 (802{val=newDeepStubMock}) (214{val=(}) (800{val=returnTypeGenericMetadata}) (234{val=,}) (32 (800{val=invocation}) (235{val=.}) (802{val=getMock}) (216{val=()})) (215{val=)})) (234{val=,}) (800{val=container}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/10/parent/src_org_mockito_internal_stubbing_defaultanswers_ReturnsDeepStubs.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata ) < container ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata ) < container ;
Distance : 9

1
Tree	return container . getMock ( getMock ( returnTypeGenericMetadata ) ) < returnTypeGenericMetadata ;
Code	return container . getMock ( getMock ( returnTypeGenericMetadata ) ) < returnTypeGenericMetadata ;
Distance : 12

2
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( container . getMock () , returnTypeGenericMetadata ) < container ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( container . getMock () , returnTypeGenericMetadata ) < container ;
Distance : 10

3
Tree	return invocation . getMock ( getMock ( container ) , container ) ;
Code	return invocation . getMock ( getMock ( container ) , container ) ;
Distance : 9

4
Tree	container . recordDeepStubAnswer ( getMock ( invocation ) , returnTypeGenericMetadata )
Code	container . recordDeepStubAnswer ( getMock ( invocation ) , returnTypeGenericMetadata )
Distance : 10

5
Tree	return container . recordDeepStubAnswer ( getMock ( invocation ) , returnTypeGenericMetadata ) ;
Code	return container . recordDeepStubAnswer ( getMock ( invocation ) , returnTypeGenericMetadata ) ;
Distance : 9

6
Tree	return returnTypeGenericMetadata . getMock ( getMock ( returnTypeGenericMetadata ) , container ) < returnTypeGenericMetadata ;
Code	return returnTypeGenericMetadata . getMock ( getMock ( returnTypeGenericMetadata ) , container ) < returnTypeGenericMetadata ;
Distance : 11

7
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( container , false ) , container ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( container , false ) , container ) ;
Distance : 7

8
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( container ) ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( container ) ) ;
Distance : 10

9
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( invocation . getMock () , returnTypeGenericMetadata ) < container ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( invocation . getMock () , returnTypeGenericMetadata ) < container ;
Distance : 9

10
Tree	return invocation . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) < container ;
Code	return invocation . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) < container ;
Distance : 10

11
Tree	return container . getMock ( newDeepStubMock ( invocation ) , container ) < container ;
Code	return container . getMock ( newDeepStubMock ( invocation ) , container ) < container ;
Distance : 10

12
Tree	return invocation . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , invocation ) ;
Code	return invocation . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , invocation ) ;
Distance : 9

13
Tree	returnTypeGenericMetadata . getMock ( newDeepStubMock ( invocation ) , returnTypeGenericMetadata )
Code	returnTypeGenericMetadata . getMock ( newDeepStubMock ( invocation ) , returnTypeGenericMetadata )
Distance : 10

14
Tree	return ( container ) getMock ( getMock ( container ) , container ) ;
Code	return ( container ) getMock ( getMock ( container ) , container ) ;
Distance : 9

15
Tree	return returnTypeGenericMetadata . getMock ( returnTypeGenericMetadata . getMock () , invocation ) < container ;
Code	return returnTypeGenericMetadata . getMock ( returnTypeGenericMetadata . getMock () , invocation ) < container ;
Distance : 9

16
Tree	return returnTypeGenericMetadata . getMock ( returnTypeGenericMetadata , invocation + getMock ( returnTypeGenericMetadata ) ) ;
Code	return returnTypeGenericMetadata . getMock ( returnTypeGenericMetadata , invocation + getMock ( returnTypeGenericMetadata ) ) ;
Distance : 8

17
Tree	return getMock ( invocation , returnTypeGenericMetadata ) && getMock ( invocation ) ;
Code	return getMock ( invocation , returnTypeGenericMetadata ) && getMock ( invocation ) ;
Distance : 10

18
Tree	return container . getMock ( returnTypeGenericMetadata , invocation + getMock ( returnTypeGenericMetadata ) ) ;
Code	return container . getMock ( returnTypeGenericMetadata , invocation + getMock ( returnTypeGenericMetadata ) ) ;
Distance : 8

19
Tree	return container . getMock ( returnTypeGenericMetadata . getMock () , invocation ) < container ;
Code	return container . getMock ( returnTypeGenericMetadata . getMock () , invocation ) < container ;
Distance : 9

20
Tree	return container . recordDeepStubAnswer ( newDeepStubMock ( container ) ) ;
Code	return container . recordDeepStubAnswer ( newDeepStubMock ( container ) ) ;
Distance : 10

21
Tree	return getMock ( returnTypeGenericMetadata , invocation ) && getMock ( container ) ;
Code	return getMock ( returnTypeGenericMetadata , invocation ) && getMock ( container ) ;
Distance : 8

22
Tree	return container . getMock ( getMock ( returnTypeGenericMetadata ) , container ) < returnTypeGenericMetadata ;
Code	return container . getMock ( getMock ( returnTypeGenericMetadata ) , container ) < returnTypeGenericMetadata ;
Distance : 11

23
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( invocation , returnTypeGenericMetadata + getMock ( returnTypeGenericMetadata ) ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( invocation , returnTypeGenericMetadata + getMock ( returnTypeGenericMetadata ) ) ;
Distance : 10

24
Tree	return returnTypeGenericMetadata . getMock ( newDeepStubMock ( invocation ) , returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata . getMock ( newDeepStubMock ( invocation ) , returnTypeGenericMetadata ) ;
Distance : 9

25
Tree	container . getMock ( newDeepStubMock ( invocation ) , returnTypeGenericMetadata )
Code	container . getMock ( newDeepStubMock ( invocation ) , returnTypeGenericMetadata )
Distance : 10

26
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( container , returnTypeGenericMetadata + getMock ( returnTypeGenericMetadata ) ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( container , returnTypeGenericMetadata + getMock ( returnTypeGenericMetadata ) ) ;
Distance : 10

27
Tree	return invocation . recordDeepStubAnswer ( invocation , container + ) ( returnTypeGenericMetadata ) ) ;
Code	return invocation . recordDeepStubAnswer ( invocation , container + ) ( returnTypeGenericMetadata ) ) ;
Distance : 11

28
Tree	return invocation . recordDeepStubAnswer ( container , container + ) ( returnTypeGenericMetadata ) ) ;
Code	return invocation . recordDeepStubAnswer ( container , container + ) ( returnTypeGenericMetadata ) ) ;
Distance : 11

29
Tree	return returnTypeGenericMetadata . getMock ( returnTypeGenericMetadata , container + ) ( invocation ) ) ;
Code	return returnTypeGenericMetadata . getMock ( returnTypeGenericMetadata , container + ) ( invocation ) ) ;
Distance : 10

30
Tree	return invocation . recordDeepStubAnswer ( newDeepStubMock ( invocation ) ) < container ;
Code	return invocation . recordDeepStubAnswer ( newDeepStubMock ( invocation ) ) < container ;
Distance : 9

31
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( container . returnTypeGenericMetadata () , container ) < container ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( container . returnTypeGenericMetadata () , container ) < container ;
Distance : 10

32
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( invocation . returnTypeGenericMetadata () , container ) < container ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( invocation . returnTypeGenericMetadata () , container ) < container ;
Distance : 9

33
Tree	return getMock ( getMock ( container ) , container ) < returnTypeGenericMetadata ;
Code	return getMock ( getMock ( container ) , container ) < returnTypeGenericMetadata ;
Distance : 10

34
Tree	return container . recordDeepStubAnswer ( invocation . getMock () , returnTypeGenericMetadata ) < container ;
Code	return container . recordDeepStubAnswer ( invocation . getMock () , returnTypeGenericMetadata ) < container ;
Distance : 9

35
Tree	return recordDeepStubAnswer ( invocation . getMock () , invocation ) < container ;
Code	return recordDeepStubAnswer ( invocation . getMock () , invocation ) < container ;
Distance : 8

36
Tree	return ( container ) getMock ( returnTypeGenericMetadata ) ; T
Code	return ( container ) getMock ( returnTypeGenericMetadata ) ; T
Distance : 12

37
Tree	return ( container ) getMock ( returnTypeGenericMetadata ) ; true
Code	return ( container ) getMock ( returnTypeGenericMetadata ) ; true
Distance : 12

38
Tree	return ( container ) getMock ( returnTypeGenericMetadata ) ; value
Code	return ( container ) getMock ( returnTypeGenericMetadata ) ; value
Distance : 12

39
Tree	return ( container ) getMock ( returnTypeGenericMetadata ) ; i
Code	return ( container ) getMock ( returnTypeGenericMetadata ) ; i
Distance : 12

40
Tree	return ( container ) getMock ( returnTypeGenericMetadata ) ; false
Code	return ( container ) getMock ( returnTypeGenericMetadata ) ; false
Distance : 12

41
Tree	return ( container ) getMock ( returnTypeGenericMetadata ) ; fail
Code	return ( container ) getMock ( returnTypeGenericMetadata ) ; fail
Distance : 12

42
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata , container ) < container ; throw
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata , container ) < container ; throw
Distance : 9

43
Tree	return ( container ) getMock ( returnTypeGenericMetadata ) ; mode
Code	return ( container ) getMock ( returnTypeGenericMetadata ) ; mode
Distance : 12

44
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) ; mode
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) ; mode
Distance : 8

45
Tree	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) ; array
Code	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) ; array
Distance : 10

46
Tree	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) ; ParamChecks
Code	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) ; ParamChecks
Distance : 10

47
Tree	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) ; f
Code	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) ; f
Distance : 10

48
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; checkState
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; checkState
Distance : 6

49
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; double
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; double
Distance : 6

50
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; super
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ; super
Distance : 6

51
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) ; {}
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) ; {}
Distance : 8

52
Tree	invocation . getMock ( newDeepStubMock ( invocation ) , returnTypeGenericMetadata )
Code	invocation . getMock ( newDeepStubMock ( invocation ) , returnTypeGenericMetadata )
Distance : 10

53
Tree	return ( container ) getMock ( returnTypeGenericMetadata ) ; result
Code	return ( container ) getMock ( returnTypeGenericMetadata ) ; result
Distance : 12

54
Tree	return ( container ) getMock ( returnTypeGenericMetadata ) ; try
Code	return ( container ) getMock ( returnTypeGenericMetadata ) ; try
Distance : 12

55
Tree	return ( container ) getMock ( returnTypeGenericMetadata ) ; Preconditions
Code	return ( container ) getMock ( returnTypeGenericMetadata ) ; Preconditions
Distance : 12

56
Tree	return ( container ) getMock ( returnTypeGenericMetadata ) ; -
Code	return ( container ) getMock ( returnTypeGenericMetadata ) ; -
Distance : 12

57
Tree	return ( container ) getMock ( returnTypeGenericMetadata ) ; nullNotPermitted
Code	return ( container ) getMock ( returnTypeGenericMetadata ) ; nullNotPermitted
Distance : 12

58
Tree	return ( container ) getMock ( returnTypeGenericMetadata ) ; !=
Code	return ( container ) getMock ( returnTypeGenericMetadata ) ; !=
Distance : 12

59
Tree	return ( container ) getMock ( returnTypeGenericMetadata ) ; super
Code	return ( container ) getMock ( returnTypeGenericMetadata ) ; super
Distance : 12

60
Tree	return ( container ) getMock ( returnTypeGenericMetadata ) ; int
Code	return ( container ) getMock ( returnTypeGenericMetadata ) ; int
Distance : 12

61
Tree	return ( container ) getMock ( returnTypeGenericMetadata ) ; :
Code	return ( container ) getMock ( returnTypeGenericMetadata ) ; :
Distance : 12

62
Tree	return ( container ) getMock ( returnTypeGenericMetadata ) ; boolean
Code	return ( container ) getMock ( returnTypeGenericMetadata ) ; boolean
Distance : 12

63
Tree	return ( container ) getMock ( returnTypeGenericMetadata ) ; join
Code	return ( container ) getMock ( returnTypeGenericMetadata ) ; join
Distance : 12

64
Tree	return ( container ) getMock ( returnTypeGenericMetadata ) ; List
Code	return ( container ) getMock ( returnTypeGenericMetadata ) ; List
Distance : 12

65
Tree	return ( container ) getMock ( returnTypeGenericMetadata ) ; Args
Code	return ( container ) getMock ( returnTypeGenericMetadata ) ; Args
Distance : 12

66
Tree	return ( container ) getMock ( returnTypeGenericMetadata ) ; array
Code	return ( container ) getMock ( returnTypeGenericMetadata ) ; array
Distance : 12

67
Tree	return ( container ) getMock ( returnTypeGenericMetadata ) ; <>
Code	return ( container ) getMock ( returnTypeGenericMetadata ) ; <>
Distance : 12

68
Tree	return ( container ) getMock ( returnTypeGenericMetadata ) ; type
Code	return ( container ) getMock ( returnTypeGenericMetadata ) ; type
Distance : 12

69
Tree	return ( container ) getMock ( returnTypeGenericMetadata ) ; paint
Code	return ( container ) getMock ( returnTypeGenericMetadata ) ; paint
Distance : 12

70
Tree	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) ; <>
Code	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) ; <>
Distance : 10

71
Tree	return getMock ( container . newDeepStubMock () , container ) < invocation ;
Code	return getMock ( container . newDeepStubMock () , container ) < invocation ;
Distance : 10

72
Tree	return container . recordDeepStubAnswer ( newDeepStubMock ( container , false ) , container ) ;
Code	return container . recordDeepStubAnswer ( newDeepStubMock ( container , false ) , container ) ;
Distance : 7

73
Tree	return container . recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () , invocation ) < container ;
Code	return container . recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () , invocation ) < container ;
Distance : 9

74
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( invocation ) , returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( invocation ) , returnTypeGenericMetadata ) ;
Distance : 8

75
Tree	return returnTypeGenericMetadata . getMock ( invocation , container + getMock ( returnTypeGenericMetadata ) ) ;
Code	return returnTypeGenericMetadata . getMock ( invocation , container + getMock ( returnTypeGenericMetadata ) ) ;
Distance : 10

76
Tree	return invocation . getMock ( getMock ( returnTypeGenericMetadata ) ) < container ;
Code	return invocation . getMock ( getMock ( returnTypeGenericMetadata ) ) < container ;
Distance : 11

77
Tree	return returnTypeGenericMetadata . getMock ( container , container + getMock ( returnTypeGenericMetadata ) ) ;
Code	return returnTypeGenericMetadata . getMock ( container , container + getMock ( returnTypeGenericMetadata ) ) ;
Distance : 10

78
Tree	return getMock ( newDeepStubMock ( container ) , returnTypeGenericMetadata ) < container ;
Code	return getMock ( newDeepStubMock ( container ) , returnTypeGenericMetadata ) < container ;
Distance : 9

79
Tree	return returnTypeGenericMetadata . getMock ( returnTypeGenericMetadata , returnTypeGenericMetadata + ) ( returnTypeGenericMetadata ) ) ;
Code	return returnTypeGenericMetadata . getMock ( returnTypeGenericMetadata , returnTypeGenericMetadata + ) ( returnTypeGenericMetadata ) ) ;
Distance : 10

80
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata , invocation ) && container ( invocation ) ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata , invocation ) && container ( invocation ) ;
Distance : 8

81
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata , container + ) ( invocation ) ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata , container + ) ( invocation ) ) ;
Distance : 10

82
Tree	return container . recordDeepStubAnswer ( returnTypeGenericMetadata , invocation + getMock ( returnTypeGenericMetadata ) ) ;
Code	return container . recordDeepStubAnswer ( returnTypeGenericMetadata , invocation + getMock ( returnTypeGenericMetadata ) ) ;
Distance : 8

83
Tree	returnTypeGenericMetadata . getMock ( getMock ( invocation ) , container )
Code	returnTypeGenericMetadata . getMock ( getMock ( invocation ) , container )
Distance : 10

84
Tree	return container . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) ) < returnTypeGenericMetadata ;
Code	return container . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) ) < returnTypeGenericMetadata ;
Distance : 11

85
Tree	return invocation . recordDeepStubAnswer ( getMock ( container ) , container ) ;
Code	return invocation . recordDeepStubAnswer ( getMock ( container ) , container ) ;
Distance : 9

86
Tree	invocation . getMock ( getMock ( invocation ) , container )
Code	invocation . getMock ( getMock ( invocation ) , container )
Distance : 10

87
Tree	return recordDeepStubAnswer ( invocation . newDeepStubMock () , container ) < invocation ;
Code	return recordDeepStubAnswer ( invocation . newDeepStubMock () , container ) < invocation ;
Distance : 8

88
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , container ) < returnTypeGenericMetadata ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , container ) < returnTypeGenericMetadata ;
Distance : 10

89
Tree	return ( container ) container ( getMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return ( container ) container ( getMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 10

90
Tree	return container . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , container ) < returnTypeGenericMetadata ;
Code	return container . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , container ) < returnTypeGenericMetadata ;
Distance : 10

91
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) ; <s>
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) ; <s>
Distance : 8

92
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) ; ;
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) ; ;
Distance : 8

93
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) ; <blank>
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) ; <blank>
Distance : 8

94
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) ; final
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) ; final
Distance : 8

95
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) ; this
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) ; this
Distance : 8

96
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) ; <
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) ; <
Distance : 8

97
Tree	return getMock ( invocation . getMock () , container ) < returnTypeGenericMetadata ;
Code	return getMock ( invocation . getMock () , container ) < returnTypeGenericMetadata ;
Distance : 8

98
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) ; if
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) ; if
Distance : 8

99
Tree	return container . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata , true ) , container ) ;
Code	return container . recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata , true ) , container ) ;
Distance : 7

========================================================================


========================================================================
Example Number: 87
Parent Code is: 
{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return anyCollection () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=Collection})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=anyCollection}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 9
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ return ( Collection ) reportMatcher ( Collection ) ; } ()
Code	{ return ( Collection ) reportMatcher ( Collection ) ; } ()
Distance : 8

1
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } expected
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } expected
Distance : 8

2
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } List
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } List
Distance : 8

3
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } try
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } try
Distance : 8

4
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } :
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } :
Distance : 8

5
Tree	{ return reportMatcher () ; } ==
Code	{ return reportMatcher () ; } ==
Distance : 2

6
Tree	{ return reportMatcher () ; } []
Code	{ return reportMatcher () ; } []
Distance : 2

7
Tree	{ return reportMatcher () ; } double
Code	{ return reportMatcher () ; } double
Distance : 2

8
Tree	{ return reportMatcher () ; } false
Code	{ return reportMatcher () ; } false
Distance : 2

9
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } result
Code	{ reportMatcher ( Any.ANY ) ; return null ; } result
Distance : 8

10
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } :
Code	{ reportMatcher ( Any.ANY ) ; return null ; } :
Distance : 8

11
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Distance : 8

12
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } try
Code	{ reportMatcher ( Any.ANY ) ; return null ; } try
Distance : 8

13
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } assertThat
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } assertThat
Distance : 8

14
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Distance : 8

15
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Distance : 8

16
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } List
Code	{ reportMatcher ( Any.ANY ) ; return null ; } List
Distance : 8

17
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } join
Code	{ reportMatcher ( Any.ANY ) ; return null ; } join
Distance : 8

18
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Code	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Distance : 8

19
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Code	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Distance : 8

20
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } m
Code	{ reportMatcher ( Any.ANY ) ; return null ; } m
Distance : 8

21
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } type
Code	{ reportMatcher ( Any.ANY ) ; return null ; } type
Distance : 8

22
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } *
Code	{ reportMatcher ( Any.ANY ) ; return null ; } *
Distance : 8

23
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Code	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Distance : 8

24
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Code	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Distance : 8

25
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Code	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Distance : 8

26
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Code	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Distance : 8

27
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } array
Code	{ reportMatcher ( Any.ANY ) ; return null ; } array
Distance : 8

28
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } String
Code	{ reportMatcher ( Any.ANY ) ; return null ; } String
Distance : 8

29
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } str
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } str
Distance : 8

30
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } FastMath
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } FastMath
Distance : 8

31
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } {}
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } {}
Distance : 8

32
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } ParamChecks
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } ParamChecks
Distance : 8

33
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } IllegalArgumentException
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } IllegalArgumentException
Distance : 8

34
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } reportCodeChange
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } reportCodeChange
Distance : 8

35
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } *
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } *
Distance : 8

36
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } join
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } join
Distance : 8

37
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } type
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } type
Distance : 8

38
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } createIllegalArgumentException
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } createIllegalArgumentException
Distance : 8

39
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } add
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } add
Distance : 8

40
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } checkArgument
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } checkArgument
Distance : 8

41
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } Args
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } Args
Distance : 8

42
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } <>
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } <>
Distance : 8

43
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } invocation
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } invocation
Distance : 8

44
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } f
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } f
Distance : 8

45
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } fail
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } fail
Distance : 8

46
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } result
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } result
Distance : 8

47
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } m
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } m
Distance : 8

48
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } paint
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } paint
Distance : 8

49
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } LINE_JOINER
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } LINE_JOINER
Distance : 8

50
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } x
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } x
Distance : 8

51
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } testSame
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } testSame
Distance : 8

52
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } getInstance
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } getInstance
Distance : 8

53
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } fireChangeEvent
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } fireChangeEvent
Distance : 8

54
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } serialised
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } serialised
Distance : 8

55
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } ArrayList
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } ArrayList
Distance : 8

56
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } parent
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } parent
Distance : 8

57
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } array
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } array
Distance : 8

58
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } class
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } class
Distance : 8

59
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } e
Code	{ reportMatcher ( Any.ANY ) ; return null ; } e
Distance : 8

60
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } final
Code	{ reportMatcher ( Any.ANY ) ; return null ; } final
Distance : 8

61
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } int
Code	{ reportMatcher ( Any.ANY ) ; return null ; } int
Distance : 8

62
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } false
Code	{ reportMatcher ( Any.ANY ) ; return null ; } false
Distance : 8

63
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } return
Code	{ reportMatcher ( Any.ANY ) ; return null ; } return
Distance : 8

64
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } if
Code	{ reportMatcher ( Any.ANY ) ; return null ; } if
Distance : 8

65
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <
Distance : 8

66
Tree	{ return reportMatcher () ; } FastMath
Code	{ return reportMatcher () ; } FastMath
Distance : 2

67
Tree	{ return reportMatcher () ; } fail
Code	{ return reportMatcher () ; } fail
Distance : 2

68
Tree	{ return reportMatcher () ; } result
Code	{ return reportMatcher () ; } result
Distance : 2

69
Tree	{ return reportMatcher () ; } m
Code	{ return reportMatcher () ; } m
Distance : 2

70
Tree	{ return reportMatcher () ; } paint
Code	{ return reportMatcher () ; } paint
Distance : 2

71
Tree	{ return reportMatcher () ; } LINE_JOINER
Code	{ return reportMatcher () ; } LINE_JOINER
Distance : 2

72
Tree	{ return reportMatcher () ; } x
Code	{ return reportMatcher () ; } x
Distance : 2

73
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } super
Code	{ reportMatcher ( Any.ANY ) ; return null ; } super
Distance : 8

74
Tree	{ return reportMatcher () ; } createIllegalArgumentException
Code	{ return reportMatcher () ; } createIllegalArgumentException
Distance : 2

75
Tree	{ return reportMatcher () ; } fireChangeEvent
Code	{ return reportMatcher () ; } fireChangeEvent
Distance : 2

76
Tree	{ return reportMatcher () ; } serialised
Code	{ return reportMatcher () ; } serialised
Distance : 2

77
Tree	{ return reportMatcher () ; } ArrayList
Code	{ return reportMatcher () ; } ArrayList
Distance : 2

78
Tree	{ return reportMatcher () ; } parent
Code	{ return reportMatcher () ; } parent
Distance : 2

79
Tree	{ return reportMatcher () ; } invocation
Code	{ return reportMatcher () ; } invocation
Distance : 2

80
Tree	{ return reportMatcher () ; } f
Code	{ return reportMatcher () ; } f
Distance : 2

81
Tree	{ return reportMatcher () ; } str
Code	{ return reportMatcher () ; } str
Distance : 2

82
Tree	{ return reportMatcher () ; } assertThat
Code	{ return reportMatcher () ; } assertThat
Distance : 2

83
Tree	{ return reportMatcher () ; } expected
Code	{ return reportMatcher () ; } expected
Distance : 2

84
Tree	{ return reportMatcher () ; } List
Code	{ return reportMatcher () ; } List
Distance : 2

85
Tree	{ return reportMatcher () ; } try
Code	{ return reportMatcher () ; } try
Distance : 2

86
Tree	{ return reportMatcher () ; } :
Code	{ return reportMatcher () ; } :
Distance : 2

87
Tree	{ return reportMatcher () ; } testSame
Code	{ return reportMatcher () ; } testSame
Distance : 2

88
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } n
Code	{ reportMatcher ( Any.ANY ) ; return null ; } n
Distance : 8

89
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Distance : 8

90
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } []
Code	{ reportMatcher ( Any.ANY ) ; return null ; } []
Distance : 8

91
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } this
Code	{ reportMatcher ( Any.ANY ) ; return null ; } this
Distance : 8

92
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } NUMBER_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } NUMBER_CONSTANT
Distance : 8

93
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Distance : 8

94
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } true
Code	{ reportMatcher ( Any.ANY ) ; return null ; } true
Distance : 8

95
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } value
Code	{ reportMatcher ( Any.ANY ) ; return null ; } value
Distance : 8

96
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Distance : 8

97
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Distance : 8

98
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Distance : 8

99
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Distance : 8

========================================================================


========================================================================
Example Number: 88
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnList () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Collection . class ) ) . returnList () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Collection})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ return this . Collection ; } checkState
Code	{ return this . Collection ; } checkState
Distance : 13

1
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } class
Code	{ reportMatcher ( Any.ANY ) ; return null ; } class
Distance : 12

2
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } try
Code	{ reportMatcher ( Any.ANY ) ; return null ; } try
Distance : 12

3
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Distance : 12

4
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Distance : 12

5
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } List
Code	{ reportMatcher ( Any.ANY ) ; return null ; } List
Distance : 12

6
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } test
Code	{ reportMatcher ( Any.ANY ) ; return null ; } test
Distance : 12

7
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } @
Code	{ reportMatcher ( Any.ANY ) ; return null ; } @
Distance : 12

8
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } int
Code	{ reportMatcher ( Any.ANY ) ; return null ; } int
Distance : 12

9
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } false
Code	{ reportMatcher ( Any.ANY ) ; return null ; } false
Distance : 12

10
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } +
Code	{ reportMatcher ( Any.ANY ) ; return null ; } +
Distance : 12

11
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } >
Code	{ reportMatcher ( Any.ANY ) ; return null ; } >
Distance : 12

12
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } ==
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } ==
Distance : 8

13
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } assertThat
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } assertThat
Distance : 8

14
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } result
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } result
Distance : 8

15
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } :
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } :
Distance : 8

16
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } boolean
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } boolean
Distance : 8

17
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } m
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } m
Distance : 8

18
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } x
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } x
Distance : 8

19
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } testSame
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } testSame
Distance : 8

20
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } parent
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } parent
Distance : 8

21
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } createIllegalArgumentException
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } createIllegalArgumentException
Distance : 8

22
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } serialised
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } serialised
Distance : 8

23
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } getInstance
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } getInstance
Distance : 8

24
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } fireChangeEvent
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } fireChangeEvent
Distance : 8

25
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } ArrayList
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } ArrayList
Distance : 8

26
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Distance : 12

27
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } invocation
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } invocation
Distance : 8

28
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Distance : 12

29
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Distance : 12

30
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } []
Code	{ reportMatcher ( Any.ANY ) ; return null ; } []
Distance : 12

31
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Distance : 12

32
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Code	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Distance : 12

33
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Code	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Distance : 12

34
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } void
Code	{ reportMatcher ( Any.ANY ) ; return null ; } void
Distance : 12

35
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Distance : 12

36
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } value
Code	{ reportMatcher ( Any.ANY ) ; return null ; } value
Distance : 12

37
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } T
Code	{ reportMatcher ( Any.ANY ) ; return null ; } T
Distance : 12

38
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } null
Code	{ reportMatcher ( Any.ANY ) ; return null ; } null
Distance : 12

39
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Distance : 12

40
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } str
Code	{ reportMatcher ( Any.ANY ) ; return null ; } str
Distance : 12

41
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Code	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Distance : 12

42
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Distance : 12

43
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Code	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Distance : 12

44
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } type
Code	{ reportMatcher ( Any.ANY ) ; return null ; } type
Distance : 12

45
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } *
Code	{ reportMatcher ( Any.ANY ) ; return null ; } *
Distance : 12

46
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Code	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Distance : 12

47
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } join
Code	{ reportMatcher ( Any.ANY ) ; return null ; } join
Distance : 12

48
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } f
Code	{ reportMatcher ( Any.ANY ) ; return null ; } f
Distance : 12

49
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Distance : 12

50
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } array
Code	{ reportMatcher ( Any.ANY ) ; return null ; } array
Distance : 12

51
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Distance : 12

52
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Distance : 12

53
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } true
Code	{ reportMatcher ( Any.ANY ) ; return null ; } true
Distance : 12

54
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Distance : 12

55
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Distance : 12

56
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !
Distance : 12

57
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } LINE_JOINER
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } LINE_JOINER
Distance : 8

58
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } str
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } str
Distance : 8

59
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } super
Code	{ reportMatcher ( Any.ANY ) ; return null ; } super
Distance : 12

60
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } double
Code	{ reportMatcher ( Any.ANY ) ; return null ; } double
Distance : 12

61
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Code	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Distance : 12

62
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } field
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } field
Distance : 8

63
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } t
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } t
Distance : 8

64
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } name
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } name
Distance : 8

65
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } add
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } add
Distance : 8

66
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) . returnList () ; } NUMBER_CONSTANT
Code	{ super ( Collection ) ; returnList ( Any.ANY ) . returnList () ; } NUMBER_CONSTANT
Distance : 10

67
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) . returnList () ; } STRING_CONSTANT
Code	{ super ( Collection ) ; returnList ( Any.ANY ) . returnList () ; } STRING_CONSTANT
Distance : 10

68
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) . returnList () ; } new
Code	{ super ( Collection ) ; returnList ( Any.ANY ) . returnList () ; } new
Distance : 10

69
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } T
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } T
Distance : 12

70
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } nullNotPermitted
Distance : 12

71
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } []
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } []
Distance : 12

72
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } void
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } void
Distance : 12

73
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ==
Distance : 12

74
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } assertEquals
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } assertEquals
Distance : 12

75
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } !
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } !
Distance : 12

76
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } @
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } @
Distance : 12

77
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } test
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } test
Distance : 12

78
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Override
Distance : 12

79
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } mock
Distance : 12

80
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } [
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } [
Distance : 12

81
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ]
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ]
Distance : 12

82
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } &&
Distance : 12

83
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Distance : 12

84
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Distance : 12

85
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } ParamChecks
Distance : 8

86
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } return
Code	{ reportMatcher ( Any.ANY ) ; return null ; } return
Distance : 12

87
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Distance : 12

88
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } List
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } List
Distance : 8

89
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } Args
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } Args
Distance : 8

90
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } fail
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } fail
Distance : 8

91
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } try
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } try
Distance : 8

92
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } type
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } type
Distance : 8

93
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } *
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } *
Distance : 8

94
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } paint
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } paint
Distance : 8

95
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } join
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } join
Distance : 8

96
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } test
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } test
Distance : 8

97
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } @
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } @
Distance : 8

98
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } int
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } int
Distance : 8

99
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } false
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } false
Distance : 8

========================================================================


========================================================================
Example Number: 89
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnMap () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return anyMap () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnMap}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=anyMap}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 6
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 7

1
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ]
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ]
Distance : 8

2
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } [
Code	{ reportMatcher ( Any.ANY ) ; return null ; } [
Distance : 8

3
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Distance : 8

4
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Distance : 8

5
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } f
Code	{ reportMatcher ( Any.ANY ) ; return null ; } f
Distance : 8

6
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Distance : 8

7
Tree	{ return reportMatcher ( Any.ANY ) ; } final
Code	{ return reportMatcher ( Any.ANY ) ; } final
Distance : 5

8
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } array
Code	{ reportMatcher ( Any.ANY ) ; return null ; } array
Distance : 8

9
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {
Distance : 8

10
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Distance : 8

11
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } join
Code	{ reportMatcher ( Any.ANY ) ; return null ; } join
Distance : 8

12
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } >
Code	{ reportMatcher ( Any.ANY ) ; return null ; } >
Distance : 8

13
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } public
Code	{ reportMatcher ( Any.ANY ) ; return null ; } public
Distance : 8

14
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } test
Code	{ reportMatcher ( Any.ANY ) ; return null ; } test
Distance : 8

15
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } @
Code	{ reportMatcher ( Any.ANY ) ; return null ; } @
Distance : 8

16
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } new
Code	{ reportMatcher ( Any.ANY ) ; return null ; } new
Distance : 8

17
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Distance : 8

18
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Distance : 8

19
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ,
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ,
Distance : 8

20
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } T
Code	{ reportMatcher ( Any.ANY ) ; return null ; } T
Distance : 8

21
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } -
Code	{ reportMatcher ( Any.ANY ) ; return null ; } -
Distance : 8

22
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } true
Code	{ reportMatcher ( Any.ANY ) ; return null ; } true
Distance : 8

23
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Distance : 8

24
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } result
Code	{ reportMatcher ( Any.ANY ) ; return null ; } result
Distance : 8

25
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } :
Code	{ reportMatcher ( Any.ANY ) ; return null ; } :
Distance : 8

26
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Distance : 8

27
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } try
Code	{ reportMatcher ( Any.ANY ) ; return null ; } try
Distance : 8

28
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Distance : 8

29
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } value
Code	{ reportMatcher ( Any.ANY ) ; return null ; } value
Distance : 8

30
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } class
Code	{ reportMatcher ( Any.ANY ) ; return null ; } class
Distance : 8

31
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Distance : 8

32
Tree	{ return reportMatcher ( Any.ANY ) ; } if
Code	{ return reportMatcher ( Any.ANY ) ; } if
Distance : 5

33
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Distance : 8

34
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Distance : 8

35
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Distance : 8

36
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Distance : 8

37
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } parent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } parent
Distance : 8

38
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } createIllegalArgumentException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } createIllegalArgumentException
Distance : 8

39
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Preconditions
Distance : 8

40
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <
Distance : 8

41
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } .
Code	{ reportMatcher ( Any.ANY ) ; return null ; } .
Distance : 8

42
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } =
Code	{ reportMatcher ( Any.ANY ) ; return null ; } =
Distance : 8

43
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } null
Code	{ reportMatcher ( Any.ANY ) ; return null ; } null
Distance : 8

44
Tree	{ reportMatcher ( Any.ANY ) ; this . numeratorFormat = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . numeratorFormat = Any.ANY ; }
Distance : 10

45
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; stopWatch = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; stopWatch = false ; }
Distance : 10

46
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; this . stepPoint = map ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; this . stepPoint = map ; }
Distance : 12

47
Tree	{ super ( Object ) ; }
Code	{ super ( Object ) ; }
Distance : 4

48
Tree	{ super ( DateTimeParser ) ; }
Code	{ super ( DateTimeParser ) ; }
Distance : 4

49
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; author = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; author = false ; }
Distance : 10

50
Tree	{ super ( HandyReturnValues ) ; }
Code	{ super ( HandyReturnValues ) ; }
Distance : 4

51
Tree	{ super ( METHOD_NAME ) ; }
Code	{ super ( METHOD_NAME ) ; }
Distance : 4

52
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; commits = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; commits = false ; }
Distance : 10

53
Tree	{ super ( label ) ; }
Code	{ super ( label ) ; }
Distance : 4

54
Tree	{ reportMatcher ( Any.ANY ) . returnMap () ; injected = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnMap () ; injected = false ; }
Distance : 10

55
Tree	{ super ( Map ) ; }
Code	{ super ( Map ) ; }
Distance : 4

56
Tree	{ super ( Any.ANY ) ; }
Code	{ super ( Any.ANY ) ; }
Distance : 4

57
Tree	{ super ( Set ) ; returnMap ( Any.ANY ) ; }
Code	{ super ( Set ) ; returnMap ( Any.ANY ) ; }
Distance : 9

58
Tree	{ return ( locale ) returnMap ( Any.ANY ) ; }
Code	{ return ( locale ) returnMap ( Any.ANY ) ; }
Distance : 7

59
Tree	{ return ( TimeSeries ) returnMap () ; }
Code	{ return ( TimeSeries ) returnMap () ; }
Distance : 4

60
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } +
Code	{ reportMatcher ( Any.ANY ) ; return null ; } +
Distance : 8

61
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } compiler
Code	{ reportMatcher ( Any.ANY ) ; return null ; } compiler
Distance : 8

62
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } String
Code	{ reportMatcher ( Any.ANY ) ; return null ; } String
Distance : 8

63
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Code	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Distance : 8

64
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } (
Code	{ reportMatcher ( Any.ANY ) ; return null ; } (
Distance : 8

65
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <s>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <s>
Distance : 8

66
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <blank>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <blank>
Distance : 8

67
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {
Distance : 8

68
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } )
Code	{ reportMatcher ( Any.ANY ) ; return null ; } )
Distance : 8

69
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ;
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ;
Distance : 8

70
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } }
Code	{ reportMatcher ( Any.ANY ) ; return null ; } }
Distance : 8

71
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } if
Code	{ reportMatcher ( Any.ANY ) ; return null ; } if
Distance : 8

72
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } i
Code	{ reportMatcher ( Any.ANY ) ; return null ; } i
Distance : 8

73
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } return
Code	{ reportMatcher ( Any.ANY ) ; return null ; } return
Distance : 8

74
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Code	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Distance : 8

75
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Code	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Distance : 8

76
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } m
Code	{ reportMatcher ( Any.ANY ) ; return null ; } m
Distance : 8

77
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } type
Code	{ reportMatcher ( Any.ANY ) ; return null ; } type
Distance : 8

78
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } *
Code	{ reportMatcher ( Any.ANY ) ; return null ; } *
Distance : 8

79
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Code	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Distance : 8

80
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Code	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Distance : 8

81
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Code	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Distance : 8

82
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } NUMBER_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } NUMBER_CONSTANT
Distance : 8

83
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Distance : 8

84
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } false
Code	{ reportMatcher ( Any.ANY ) ; return null ; } false
Distance : 8

85
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } int
Code	{ reportMatcher ( Any.ANY ) ; return null ; } int
Distance : 8

86
Tree	{ return reportMatcher ( Any.ANY ) . < JAVA_1_8 > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < JAVA_1_8 > reportMatcher () ; }
Distance : 9

87
Tree	{ return this . typeVariable ; }
Code	{ return this . typeVariable ; }
Distance : 3

88
Tree	{ return this . gap ; }
Code	{ return this . gap ; }
Distance : 3

89
Tree	{ return this . millis ; }
Code	{ return this . millis ; }
Distance : 3

90
Tree	{ reportMatcher ( Any.ANY ) ; this . angleTickUnit = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . angleTickUnit = Any.ANY ; }
Distance : 10

91
Tree	{ return reportMatcher ( Any.ANY ) . < TokenType.STRING > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < TokenType.STRING > reportMatcher () ; }
Distance : 9

92
Tree	{ return this . value ; }
Code	{ return this . value ; }
Distance : 3

93
Tree	{ reportMatcher ( Any.ANY ) ; this . daySuffix = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . daySuffix = Any.ANY ; }
Distance : 10

94
Tree	{ return ( T ) returnMap () ; }
Code	{ return ( T ) returnMap () ; }
Distance : 4

95
Tree	{ return this . GitContributionsProvider ; }
Code	{ return this . GitContributionsProvider ; }
Distance : 3

96
Tree	{ reportMatcher ( Any.ANY ) ; this . disambiguateProperties = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . disambiguateProperties = Any.ANY ; }
Distance : 10

97
Tree	{ return this . getOptions ; }
Code	{ return this . getOptions ; }
Distance : 3

98
Tree	{ return this . NotNull.NOT_NULL ; }
Code	{ return this . NotNull.NOT_NULL ; }
Distance : 3

99
Tree	{ reportMatcher ( Any.ANY ) ; this . getZoneStrings = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . getZoneStrings = Any.ANY ; }
Distance : 10

========================================================================


========================================================================
Example Number: 90
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnMap () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Map . class ) ) . returnMap () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnMap}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Map})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnMap}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ return this . Map ; } checkState
Code	{ return this . Map ; } checkState
Distance : 13

1
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } class
Code	{ reportMatcher ( Any.ANY ) ; return null ; } class
Distance : 12

2
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } try
Code	{ reportMatcher ( Any.ANY ) ; return null ; } try
Distance : 12

3
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Distance : 12

4
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Distance : 12

5
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } List
Code	{ reportMatcher ( Any.ANY ) ; return null ; } List
Distance : 12

6
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } test
Code	{ reportMatcher ( Any.ANY ) ; return null ; } test
Distance : 12

7
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } @
Code	{ reportMatcher ( Any.ANY ) ; return null ; } @
Distance : 12

8
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } int
Code	{ reportMatcher ( Any.ANY ) ; return null ; } int
Distance : 12

9
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } false
Code	{ reportMatcher ( Any.ANY ) ; return null ; } false
Distance : 12

10
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } +
Code	{ reportMatcher ( Any.ANY ) ; return null ; } +
Distance : 12

11
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } >
Code	{ reportMatcher ( Any.ANY ) ; return null ; } >
Distance : 12

12
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } ==
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } ==
Distance : 8

13
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } assertThat
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } assertThat
Distance : 8

14
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } result
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } result
Distance : 8

15
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } :
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } :
Distance : 8

16
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } boolean
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } boolean
Distance : 8

17
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } m
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } m
Distance : 8

18
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } x
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } x
Distance : 8

19
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } testSame
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } testSame
Distance : 8

20
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } parent
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } parent
Distance : 8

21
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } createIllegalArgumentException
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } createIllegalArgumentException
Distance : 8

22
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } serialised
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } serialised
Distance : 8

23
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } getInstance
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } getInstance
Distance : 8

24
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } fireChangeEvent
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } fireChangeEvent
Distance : 8

25
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } ArrayList
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } ArrayList
Distance : 8

26
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Distance : 12

27
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } invocation
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } invocation
Distance : 8

28
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Distance : 12

29
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Distance : 12

30
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } []
Code	{ reportMatcher ( Any.ANY ) ; return null ; } []
Distance : 12

31
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Distance : 12

32
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Code	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Distance : 12

33
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Code	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Distance : 12

34
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } void
Code	{ reportMatcher ( Any.ANY ) ; return null ; } void
Distance : 12

35
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Distance : 12

36
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } value
Code	{ reportMatcher ( Any.ANY ) ; return null ; } value
Distance : 12

37
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } T
Code	{ reportMatcher ( Any.ANY ) ; return null ; } T
Distance : 12

38
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } null
Code	{ reportMatcher ( Any.ANY ) ; return null ; } null
Distance : 12

39
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Distance : 12

40
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } str
Code	{ reportMatcher ( Any.ANY ) ; return null ; } str
Distance : 12

41
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Code	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Distance : 12

42
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Distance : 12

43
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Code	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Distance : 12

44
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } type
Code	{ reportMatcher ( Any.ANY ) ; return null ; } type
Distance : 12

45
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } *
Code	{ reportMatcher ( Any.ANY ) ; return null ; } *
Distance : 12

46
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Code	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Distance : 12

47
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } join
Code	{ reportMatcher ( Any.ANY ) ; return null ; } join
Distance : 12

48
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } f
Code	{ reportMatcher ( Any.ANY ) ; return null ; } f
Distance : 12

49
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Distance : 12

50
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } array
Code	{ reportMatcher ( Any.ANY ) ; return null ; } array
Distance : 12

51
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Distance : 12

52
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Distance : 12

53
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } true
Code	{ reportMatcher ( Any.ANY ) ; return null ; } true
Distance : 12

54
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Distance : 12

55
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Distance : 12

56
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !
Distance : 12

57
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } LINE_JOINER
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } LINE_JOINER
Distance : 8

58
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } str
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } str
Distance : 8

59
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } super
Code	{ reportMatcher ( Any.ANY ) ; return null ; } super
Distance : 12

60
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } double
Code	{ reportMatcher ( Any.ANY ) ; return null ; } double
Distance : 12

61
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Code	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Distance : 12

62
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } field
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } field
Distance : 8

63
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } t
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } t
Distance : 8

64
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } name
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } name
Distance : 8

65
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } add
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } add
Distance : 8

66
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) . returnMap () ; } NUMBER_CONSTANT
Code	{ super ( Map ) ; returnMap ( Any.ANY ) . returnMap () ; } NUMBER_CONSTANT
Distance : 10

67
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) . returnMap () ; } STRING_CONSTANT
Code	{ super ( Map ) ; returnMap ( Any.ANY ) . returnMap () ; } STRING_CONSTANT
Distance : 10

68
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) . returnMap () ; } new
Code	{ super ( Map ) ; returnMap ( Any.ANY ) . returnMap () ; } new
Distance : 10

69
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } T
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } T
Distance : 12

70
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } nullNotPermitted
Distance : 12

71
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } []
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } []
Distance : 12

72
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } void
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } void
Distance : 12

73
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ==
Distance : 12

74
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } assertEquals
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } assertEquals
Distance : 12

75
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } !
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } !
Distance : 12

76
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } @
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } @
Distance : 12

77
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } test
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } test
Distance : 12

78
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Override
Distance : 12

79
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } mock
Distance : 12

80
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } [
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } [
Distance : 12

81
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ]
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ]
Distance : 12

82
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } &&
Distance : 12

83
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Distance : 12

84
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Distance : 12

85
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } ParamChecks
Distance : 8

86
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } return
Code	{ reportMatcher ( Any.ANY ) ; return null ; } return
Distance : 12

87
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Distance : 12

88
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } List
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } List
Distance : 8

89
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Args
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } Args
Distance : 8

90
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } fail
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } fail
Distance : 8

91
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } try
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } try
Distance : 8

92
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } type
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } type
Distance : 8

93
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } *
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } *
Distance : 8

94
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } paint
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } paint
Distance : 8

95
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } join
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } join
Distance : 8

96
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } test
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } test
Distance : 8

97
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } @
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } @
Distance : 8

98
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } int
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } int
Distance : 8

99
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } false
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } false
Distance : 8

========================================================================


========================================================================
Example Number: 91
Parent Code is: 
{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return anySet () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=Set})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnSet}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=anySet}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 9
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ return ( Set ) reportMatcher ( Set ) ; } expected
Code	{ return ( Set ) reportMatcher ( Set ) ; } expected
Distance : 8

1
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ]
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ]
Distance : 8

2
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } result
Code	{ reportMatcher ( Any.ANY ) ; return null ; } result
Distance : 8

3
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } :
Code	{ reportMatcher ( Any.ANY ) ; return null ; } :
Distance : 8

4
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Code	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Distance : 8

5
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } m
Code	{ reportMatcher ( Any.ANY ) ; return null ; } m
Distance : 8

6
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Distance : 8

7
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Distance : 8

8
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Code	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Distance : 8

9
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Code	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Distance : 8

10
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } createIllegalArgumentException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } createIllegalArgumentException
Distance : 8

11
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } parent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } parent
Distance : 8

12
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } testSame
Code	{ reportMatcher ( Any.ANY ) ; return null ; } testSame
Distance : 8

13
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } [
Code	{ reportMatcher ( Any.ANY ) ; return null ; } [
Distance : 8

14
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } x
Code	{ reportMatcher ( Any.ANY ) ; return null ; } x
Distance : 8

15
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !
Distance : 8

16
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } []
Code	{ reportMatcher ( Any.ANY ) ; return null ; } []
Distance : 8

17
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Distance : 8

18
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Code	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Distance : 8

19
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } T
Code	{ reportMatcher ( Any.ANY ) ; return null ; } T
Distance : 8

20
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Distance : 8

21
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } false
Code	{ reportMatcher ( Any.ANY ) ; return null ; } false
Distance : 8

22
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Distance : 8

23
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } str
Code	{ reportMatcher ( Any.ANY ) ; return null ; } str
Distance : 8

24
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Code	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Distance : 8

25
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Distance : 8

26
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Code	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Distance : 8

27
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertEquals
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertEquals
Distance : 8

28
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Preconditions
Distance : 8

29
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } -
Code	{ reportMatcher ( Any.ANY ) ; return null ; } -
Distance : 8

30
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } compiler
Code	{ reportMatcher ( Any.ANY ) ; return null ; } compiler
Distance : 8

31
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } List
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } List
Distance : 8

32
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } Args
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } Args
Distance : 8

33
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } array
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } array
Distance : 8

34
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } <>
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } <>
Distance : 8

35
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } fail
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } fail
Distance : 8

36
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } assertThat
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } assertThat
Distance : 8

37
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } paint
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } paint
Distance : 8

38
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } join
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } join
Distance : 8

39
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } str
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } str
Distance : 8

40
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } LINE_JOINER
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } LINE_JOINER
Distance : 8

41
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } testSame
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } testSame
Distance : 8

42
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } x
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } x
Distance : 8

43
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } ArrayList
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } ArrayList
Distance : 8

44
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } fireChangeEvent
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } fireChangeEvent
Distance : 8

45
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } parent
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } parent
Distance : 8

46
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } createIllegalArgumentException
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } createIllegalArgumentException
Distance : 8

47
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } IllegalArgumentException
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } IllegalArgumentException
Distance : 8

48
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } FastMath
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } FastMath
Distance : 8

49
Tree	{ return reportMatcher () ; } type
Code	{ return reportMatcher () ; } type
Distance : 2

50
Tree	{ return reportMatcher () ; } *
Code	{ return reportMatcher () ; } *
Distance : 2

51
Tree	{ return reportMatcher () ; } getInstance
Code	{ return reportMatcher () ; } getInstance
Distance : 2

52
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } void
Code	{ reportMatcher ( Any.ANY ) ; return null ; } void
Distance : 8

53
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } i
Code	{ reportMatcher ( Any.ANY ) ; return null ; } i
Distance : 8

54
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } value
Code	{ reportMatcher ( Any.ANY ) ; return null ; } value
Distance : 8

55
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } n
Code	{ reportMatcher ( Any.ANY ) ; return null ; } n
Distance : 8

56
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } e
Code	{ reportMatcher ( Any.ANY ) ; return null ; } e
Distance : 8

57
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } String
Code	{ reportMatcher ( Any.ANY ) ; return null ; } String
Distance : 8

58
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } type
Code	{ reportMatcher ( Any.ANY ) ; return null ; } type
Distance : 8

59
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } data
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } data
Distance : 8

60
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } *
Code	{ reportMatcher ( Any.ANY ) ; return null ; } *
Distance : 8

61
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } join
Code	{ reportMatcher ( Any.ANY ) ; return null ; } join
Distance : 8

62
Tree	{ return reportMatcher () ; } str
Code	{ return reportMatcher () ; } str
Distance : 2

63
Tree	{ return reportMatcher () ; } LINE_JOINER
Code	{ return reportMatcher () ; } LINE_JOINER
Distance : 2

64
Tree	{ return reportMatcher () ; } testSame
Code	{ return reportMatcher () ; } testSame
Distance : 2

65
Tree	{ return reportMatcher () ; } x
Code	{ return reportMatcher () ; } x
Distance : 2

66
Tree	{ return reportMatcher () ; } ArrayList
Code	{ return reportMatcher () ; } ArrayList
Distance : 2

67
Tree	{ return reportMatcher () ; } fireChangeEvent
Code	{ return reportMatcher () ; } fireChangeEvent
Distance : 2

68
Tree	{ return reportMatcher () ; } parent
Code	{ return reportMatcher () ; } parent
Distance : 2

69
Tree	{ return reportMatcher () ; } createIllegalArgumentException
Code	{ return reportMatcher () ; } createIllegalArgumentException
Distance : 2

70
Tree	{ return reportMatcher () ; } IllegalArgumentException
Code	{ return reportMatcher () ; } IllegalArgumentException
Distance : 2

71
Tree	{ return reportMatcher () ; } FastMath
Code	{ return reportMatcher () ; } FastMath
Distance : 2

72
Tree	{ return reportMatcher () ; } assertThat
Code	{ return reportMatcher () ; } assertThat
Distance : 2

73
Tree	{ return reportMatcher () ; } invocation
Code	{ return reportMatcher () ; } invocation
Distance : 2

74
Tree	{ return reportMatcher () ; } join
Code	{ return reportMatcher () ; } join
Distance : 2

75
Tree	{ return reportMatcher () ; } reportCodeChange
Code	{ return reportMatcher () ; } reportCodeChange
Distance : 2

76
Tree	{ return reportMatcher () ; } :
Code	{ return reportMatcher () ; } :
Distance : 2

77
Tree	{ return reportMatcher () ; } result
Code	{ return reportMatcher () ; } result
Distance : 2

78
Tree	{ return reportMatcher () ; } m
Code	{ return reportMatcher () ; } m
Distance : 2

79
Tree	{ return reportMatcher () ; } name
Code	{ return reportMatcher () ; } name
Distance : 2

80
Tree	{ return reportMatcher () ; } add
Code	{ return reportMatcher () ; } add
Distance : 2

81
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Distance : 8

82
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } null
Code	{ reportMatcher ( Any.ANY ) ; return null ; } null
Distance : 8

83
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } >
Code	{ reportMatcher ( Any.ANY ) ; return null ; } >
Distance : 8

84
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } public
Code	{ reportMatcher ( Any.ANY ) ; return null ; } public
Distance : 8

85
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } if
Code	{ reportMatcher ( Any.ANY ) ; return null ; } if
Distance : 8

86
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <
Distance : 8

87
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } this
Code	{ reportMatcher ( Any.ANY ) ; return null ; } this
Distance : 8

88
Tree	{ return reportMatcher () ; } expected
Code	{ return reportMatcher () ; } expected
Distance : 2

89
Tree	{ return reportMatcher () ; } paint
Code	{ return reportMatcher () ; } paint
Distance : 2

90
Tree	{ return reportMatcher () ; } fail
Code	{ return reportMatcher () ; } fail
Distance : 2

91
Tree	{ return reportMatcher () ; } try
Code	{ return reportMatcher () ; } try
Distance : 2

92
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } f
Code	{ reportMatcher ( Any.ANY ) ; return null ; } f
Distance : 8

93
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Distance : 8

94
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Distance : 8

95
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } int
Code	{ reportMatcher ( Any.ANY ) ; return null ; } int
Distance : 8

96
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } true
Code	{ reportMatcher ( Any.ANY ) ; return null ; } true
Distance : 8

97
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Distance : 8

98
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Distance : 8

99
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Distance : 8

========================================================================


========================================================================
Example Number: 92
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnSet () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Set . class ) ) . returnSet () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnSet}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Set})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnSet}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ return this . Set ; } checkState
Code	{ return this . Set ; } checkState
Distance : 13

1
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } class
Code	{ reportMatcher ( Any.ANY ) ; return null ; } class
Distance : 12

2
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } try
Code	{ reportMatcher ( Any.ANY ) ; return null ; } try
Distance : 12

3
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Distance : 12

4
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Distance : 12

5
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } List
Code	{ reportMatcher ( Any.ANY ) ; return null ; } List
Distance : 12

6
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } test
Code	{ reportMatcher ( Any.ANY ) ; return null ; } test
Distance : 12

7
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } @
Code	{ reportMatcher ( Any.ANY ) ; return null ; } @
Distance : 12

8
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } int
Code	{ reportMatcher ( Any.ANY ) ; return null ; } int
Distance : 12

9
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } false
Code	{ reportMatcher ( Any.ANY ) ; return null ; } false
Distance : 12

10
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } +
Code	{ reportMatcher ( Any.ANY ) ; return null ; } +
Distance : 12

11
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } >
Code	{ reportMatcher ( Any.ANY ) ; return null ; } >
Distance : 12

12
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } ==
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } ==
Distance : 9

13
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } assertThat
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } assertThat
Distance : 9

14
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } result
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } result
Distance : 9

15
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } :
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } :
Distance : 9

16
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } boolean
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } boolean
Distance : 9

17
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } m
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } m
Distance : 9

18
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } x
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } x
Distance : 9

19
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } testSame
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } testSame
Distance : 9

20
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } parent
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } parent
Distance : 9

21
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } createIllegalArgumentException
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } createIllegalArgumentException
Distance : 9

22
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } serialised
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } serialised
Distance : 9

23
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } getInstance
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } getInstance
Distance : 9

24
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } fireChangeEvent
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } fireChangeEvent
Distance : 9

25
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } ArrayList
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } ArrayList
Distance : 9

26
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Distance : 12

27
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } invocation
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } invocation
Distance : 9

28
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Distance : 12

29
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Distance : 12

30
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } []
Code	{ reportMatcher ( Any.ANY ) ; return null ; } []
Distance : 12

31
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Distance : 12

32
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Code	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Distance : 12

33
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Code	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Distance : 12

34
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } void
Code	{ reportMatcher ( Any.ANY ) ; return null ; } void
Distance : 12

35
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Distance : 12

36
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } value
Code	{ reportMatcher ( Any.ANY ) ; return null ; } value
Distance : 12

37
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } T
Code	{ reportMatcher ( Any.ANY ) ; return null ; } T
Distance : 12

38
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } null
Code	{ reportMatcher ( Any.ANY ) ; return null ; } null
Distance : 12

39
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Distance : 12

40
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } str
Code	{ reportMatcher ( Any.ANY ) ; return null ; } str
Distance : 12

41
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Code	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Distance : 12

42
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Distance : 12

43
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Code	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Distance : 12

44
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } type
Code	{ reportMatcher ( Any.ANY ) ; return null ; } type
Distance : 12

45
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } *
Code	{ reportMatcher ( Any.ANY ) ; return null ; } *
Distance : 12

46
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Code	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Distance : 12

47
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } join
Code	{ reportMatcher ( Any.ANY ) ; return null ; } join
Distance : 12

48
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } f
Code	{ reportMatcher ( Any.ANY ) ; return null ; } f
Distance : 12

49
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Distance : 12

50
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } array
Code	{ reportMatcher ( Any.ANY ) ; return null ; } array
Distance : 12

51
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Distance : 12

52
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Distance : 12

53
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } true
Code	{ reportMatcher ( Any.ANY ) ; return null ; } true
Distance : 12

54
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Distance : 12

55
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Distance : 12

56
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !
Distance : 12

57
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } LINE_JOINER
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } LINE_JOINER
Distance : 9

58
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } str
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } str
Distance : 9

59
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } super
Code	{ reportMatcher ( Any.ANY ) ; return null ; } super
Distance : 12

60
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } double
Code	{ reportMatcher ( Any.ANY ) ; return null ; } double
Distance : 12

61
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Code	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Distance : 12

62
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } field
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } field
Distance : 9

63
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } t
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } t
Distance : 9

64
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } name
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } name
Distance : 9

65
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } add
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } add
Distance : 9

66
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) . returnSet () ; } NUMBER_CONSTANT
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) . returnSet () ; } NUMBER_CONSTANT
Distance : 10

67
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) . returnSet () ; } STRING_CONSTANT
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) . returnSet () ; } STRING_CONSTANT
Distance : 10

68
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) . returnSet () ; } new
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) . returnSet () ; } new
Distance : 10

69
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } T
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } T
Distance : 12

70
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } nullNotPermitted
Distance : 12

71
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } []
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } []
Distance : 12

72
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } void
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } void
Distance : 12

73
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ==
Distance : 12

74
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } assertEquals
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } assertEquals
Distance : 12

75
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } !
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } !
Distance : 12

76
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } @
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } @
Distance : 12

77
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } test
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } test
Distance : 12

78
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Override
Distance : 12

79
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } mock
Distance : 12

80
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } [
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } [
Distance : 12

81
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ]
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ]
Distance : 12

82
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } &&
Distance : 12

83
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Distance : 12

84
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Distance : 12

85
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } ParamChecks
Distance : 9

86
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } return
Code	{ reportMatcher ( Any.ANY ) ; return null ; } return
Distance : 12

87
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Distance : 12

88
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } List
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } List
Distance : 9

89
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } Args
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } Args
Distance : 9

90
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } fail
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } fail
Distance : 9

91
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } try
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } try
Distance : 9

92
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } type
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } type
Distance : 9

93
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } *
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } *
Distance : 9

94
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } paint
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } paint
Distance : 9

95
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } join
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } join
Distance : 9

96
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } test
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } test
Distance : 9

97
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } @
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } @
Distance : 9

98
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } int
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } int
Distance : 9

99
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } false
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } false
Distance : 9

========================================================================


========================================================================
Example Number: 93
Parent Code is: 
{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return anyList () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=List})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=anyList}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 9
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ return ( List ) reportMatcher ( List ) ; } ()
Code	{ return ( List ) reportMatcher ( List ) ; } ()
Distance : 8

1
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } expected
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } expected
Distance : 8

2
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } List
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } List
Distance : 8

3
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } try
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } try
Distance : 8

4
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } :
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } :
Distance : 8

5
Tree	{ return reportMatcher () ; } ==
Code	{ return reportMatcher () ; } ==
Distance : 2

6
Tree	{ return reportMatcher () ; } []
Code	{ return reportMatcher () ; } []
Distance : 2

7
Tree	{ return reportMatcher () ; } double
Code	{ return reportMatcher () ; } double
Distance : 2

8
Tree	{ return reportMatcher () ; } false
Code	{ return reportMatcher () ; } false
Distance : 2

9
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } result
Code	{ reportMatcher ( Any.ANY ) ; return null ; } result
Distance : 8

10
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } :
Code	{ reportMatcher ( Any.ANY ) ; return null ; } :
Distance : 8

11
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Distance : 8

12
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } try
Code	{ reportMatcher ( Any.ANY ) ; return null ; } try
Distance : 8

13
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } assertThat
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } assertThat
Distance : 8

14
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Distance : 8

15
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Distance : 8

16
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } List
Code	{ reportMatcher ( Any.ANY ) ; return null ; } List
Distance : 8

17
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } join
Code	{ reportMatcher ( Any.ANY ) ; return null ; } join
Distance : 8

18
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Code	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Distance : 8

19
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Code	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Distance : 8

20
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } m
Code	{ reportMatcher ( Any.ANY ) ; return null ; } m
Distance : 8

21
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } type
Code	{ reportMatcher ( Any.ANY ) ; return null ; } type
Distance : 8

22
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } *
Code	{ reportMatcher ( Any.ANY ) ; return null ; } *
Distance : 8

23
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Code	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Distance : 8

24
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Code	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Distance : 8

25
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Code	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Distance : 8

26
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Code	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Distance : 8

27
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } array
Code	{ reportMatcher ( Any.ANY ) ; return null ; } array
Distance : 8

28
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } String
Code	{ reportMatcher ( Any.ANY ) ; return null ; } String
Distance : 8

29
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } str
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } str
Distance : 8

30
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } FastMath
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } FastMath
Distance : 8

31
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } {}
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } {}
Distance : 8

32
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } ParamChecks
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } ParamChecks
Distance : 8

33
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } IllegalArgumentException
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } IllegalArgumentException
Distance : 8

34
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } reportCodeChange
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } reportCodeChange
Distance : 8

35
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } *
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } *
Distance : 8

36
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } join
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } join
Distance : 8

37
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } type
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } type
Distance : 8

38
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } createIllegalArgumentException
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } createIllegalArgumentException
Distance : 8

39
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } add
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } add
Distance : 8

40
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } checkArgument
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } checkArgument
Distance : 8

41
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } Args
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } Args
Distance : 8

42
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } <>
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } <>
Distance : 8

43
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } invocation
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } invocation
Distance : 8

44
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } f
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } f
Distance : 8

45
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } fail
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } fail
Distance : 8

46
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } result
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } result
Distance : 8

47
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } m
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } m
Distance : 8

48
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } paint
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } paint
Distance : 8

49
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } LINE_JOINER
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } LINE_JOINER
Distance : 8

50
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } x
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } x
Distance : 8

51
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } testSame
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } testSame
Distance : 8

52
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } getInstance
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } getInstance
Distance : 8

53
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } fireChangeEvent
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } fireChangeEvent
Distance : 8

54
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } serialised
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } serialised
Distance : 8

55
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } ArrayList
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } ArrayList
Distance : 8

56
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } parent
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } parent
Distance : 8

57
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } array
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } array
Distance : 8

58
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } class
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } class
Distance : 8

59
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } e
Code	{ reportMatcher ( Any.ANY ) ; return null ; } e
Distance : 8

60
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } final
Code	{ reportMatcher ( Any.ANY ) ; return null ; } final
Distance : 8

61
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } int
Code	{ reportMatcher ( Any.ANY ) ; return null ; } int
Distance : 8

62
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } false
Code	{ reportMatcher ( Any.ANY ) ; return null ; } false
Distance : 8

63
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } return
Code	{ reportMatcher ( Any.ANY ) ; return null ; } return
Distance : 8

64
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } if
Code	{ reportMatcher ( Any.ANY ) ; return null ; } if
Distance : 8

65
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <
Distance : 8

66
Tree	{ return reportMatcher () ; } FastMath
Code	{ return reportMatcher () ; } FastMath
Distance : 2

67
Tree	{ return reportMatcher () ; } fail
Code	{ return reportMatcher () ; } fail
Distance : 2

68
Tree	{ return reportMatcher () ; } result
Code	{ return reportMatcher () ; } result
Distance : 2

69
Tree	{ return reportMatcher () ; } m
Code	{ return reportMatcher () ; } m
Distance : 2

70
Tree	{ return reportMatcher () ; } paint
Code	{ return reportMatcher () ; } paint
Distance : 2

71
Tree	{ return reportMatcher () ; } LINE_JOINER
Code	{ return reportMatcher () ; } LINE_JOINER
Distance : 2

72
Tree	{ return reportMatcher () ; } x
Code	{ return reportMatcher () ; } x
Distance : 2

73
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } super
Code	{ reportMatcher ( Any.ANY ) ; return null ; } super
Distance : 8

74
Tree	{ return reportMatcher () ; } createIllegalArgumentException
Code	{ return reportMatcher () ; } createIllegalArgumentException
Distance : 2

75
Tree	{ return reportMatcher () ; } fireChangeEvent
Code	{ return reportMatcher () ; } fireChangeEvent
Distance : 2

76
Tree	{ return reportMatcher () ; } serialised
Code	{ return reportMatcher () ; } serialised
Distance : 2

77
Tree	{ return reportMatcher () ; } ArrayList
Code	{ return reportMatcher () ; } ArrayList
Distance : 2

78
Tree	{ return reportMatcher () ; } parent
Code	{ return reportMatcher () ; } parent
Distance : 2

79
Tree	{ return reportMatcher () ; } invocation
Code	{ return reportMatcher () ; } invocation
Distance : 2

80
Tree	{ return reportMatcher () ; } f
Code	{ return reportMatcher () ; } f
Distance : 2

81
Tree	{ return reportMatcher () ; } str
Code	{ return reportMatcher () ; } str
Distance : 2

82
Tree	{ return reportMatcher () ; } assertThat
Code	{ return reportMatcher () ; } assertThat
Distance : 2

83
Tree	{ return reportMatcher () ; } expected
Code	{ return reportMatcher () ; } expected
Distance : 2

84
Tree	{ return reportMatcher () ; } List
Code	{ return reportMatcher () ; } List
Distance : 2

85
Tree	{ return reportMatcher () ; } try
Code	{ return reportMatcher () ; } try
Distance : 2

86
Tree	{ return reportMatcher () ; } :
Code	{ return reportMatcher () ; } :
Distance : 2

87
Tree	{ return reportMatcher () ; } testSame
Code	{ return reportMatcher () ; } testSame
Distance : 2

88
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } n
Code	{ reportMatcher ( Any.ANY ) ; return null ; } n
Distance : 8

89
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Distance : 8

90
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } []
Code	{ reportMatcher ( Any.ANY ) ; return null ; } []
Distance : 8

91
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } this
Code	{ reportMatcher ( Any.ANY ) ; return null ; } this
Distance : 8

92
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } NUMBER_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } NUMBER_CONSTANT
Distance : 8

93
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Distance : 8

94
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } true
Code	{ reportMatcher ( Any.ANY ) ; return null ; } true
Distance : 8

95
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } value
Code	{ reportMatcher ( Any.ANY ) ; return null ; } value
Distance : 8

96
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Distance : 8

97
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Distance : 8

98
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Distance : 8

99
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Distance : 8

========================================================================


========================================================================
Example Number: 94
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnList () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( List . class ) ) . returnList () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=List})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ return this . List ; } checkState
Code	{ return this . List ; } checkState
Distance : 13

1
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } class
Code	{ reportMatcher ( Any.ANY ) ; return null ; } class
Distance : 12

2
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } try
Code	{ reportMatcher ( Any.ANY ) ; return null ; } try
Distance : 12

3
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Distance : 12

4
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Distance : 12

5
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } List
Code	{ reportMatcher ( Any.ANY ) ; return null ; } List
Distance : 12

6
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } test
Code	{ reportMatcher ( Any.ANY ) ; return null ; } test
Distance : 12

7
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } @
Code	{ reportMatcher ( Any.ANY ) ; return null ; } @
Distance : 12

8
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } int
Code	{ reportMatcher ( Any.ANY ) ; return null ; } int
Distance : 12

9
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } false
Code	{ reportMatcher ( Any.ANY ) ; return null ; } false
Distance : 12

10
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } +
Code	{ reportMatcher ( Any.ANY ) ; return null ; } +
Distance : 12

11
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } >
Code	{ reportMatcher ( Any.ANY ) ; return null ; } >
Distance : 12

12
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } ==
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } ==
Distance : 8

13
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } assertThat
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } assertThat
Distance : 8

14
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } result
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } result
Distance : 8

15
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } :
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } :
Distance : 8

16
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } boolean
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } boolean
Distance : 8

17
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } m
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } m
Distance : 8

18
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } x
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } x
Distance : 8

19
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } testSame
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } testSame
Distance : 8

20
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } parent
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } parent
Distance : 8

21
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } createIllegalArgumentException
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } createIllegalArgumentException
Distance : 8

22
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } serialised
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } serialised
Distance : 8

23
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } getInstance
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } getInstance
Distance : 8

24
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } fireChangeEvent
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } fireChangeEvent
Distance : 8

25
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } ArrayList
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } ArrayList
Distance : 8

26
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Distance : 12

27
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } invocation
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } invocation
Distance : 8

28
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Distance : 12

29
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Distance : 12

30
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } []
Code	{ reportMatcher ( Any.ANY ) ; return null ; } []
Distance : 12

31
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Distance : 12

32
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Code	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Distance : 12

33
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Code	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Distance : 12

34
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } void
Code	{ reportMatcher ( Any.ANY ) ; return null ; } void
Distance : 12

35
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Distance : 12

36
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } value
Code	{ reportMatcher ( Any.ANY ) ; return null ; } value
Distance : 12

37
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } T
Code	{ reportMatcher ( Any.ANY ) ; return null ; } T
Distance : 12

38
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } null
Code	{ reportMatcher ( Any.ANY ) ; return null ; } null
Distance : 12

39
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Distance : 12

40
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } str
Code	{ reportMatcher ( Any.ANY ) ; return null ; } str
Distance : 12

41
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Code	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Distance : 12

42
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Distance : 12

43
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Code	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Distance : 12

44
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } type
Code	{ reportMatcher ( Any.ANY ) ; return null ; } type
Distance : 12

45
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } *
Code	{ reportMatcher ( Any.ANY ) ; return null ; } *
Distance : 12

46
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Code	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Distance : 12

47
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } join
Code	{ reportMatcher ( Any.ANY ) ; return null ; } join
Distance : 12

48
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } f
Code	{ reportMatcher ( Any.ANY ) ; return null ; } f
Distance : 12

49
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Distance : 12

50
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } array
Code	{ reportMatcher ( Any.ANY ) ; return null ; } array
Distance : 12

51
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Distance : 12

52
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Distance : 12

53
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } true
Code	{ reportMatcher ( Any.ANY ) ; return null ; } true
Distance : 12

54
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Distance : 12

55
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Distance : 12

56
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !
Distance : 12

57
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } LINE_JOINER
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } LINE_JOINER
Distance : 8

58
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } str
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } str
Distance : 8

59
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } super
Code	{ reportMatcher ( Any.ANY ) ; return null ; } super
Distance : 12

60
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } double
Code	{ reportMatcher ( Any.ANY ) ; return null ; } double
Distance : 12

61
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Code	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Distance : 12

62
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } field
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } field
Distance : 8

63
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } t
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } t
Distance : 8

64
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } name
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } name
Distance : 8

65
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } add
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } add
Distance : 8

66
Tree	{ super ( List ) ; returnList ( Any.ANY ) . returnList () ; } NUMBER_CONSTANT
Code	{ super ( List ) ; returnList ( Any.ANY ) . returnList () ; } NUMBER_CONSTANT
Distance : 10

67
Tree	{ super ( List ) ; returnList ( Any.ANY ) . returnList () ; } STRING_CONSTANT
Code	{ super ( List ) ; returnList ( Any.ANY ) . returnList () ; } STRING_CONSTANT
Distance : 10

68
Tree	{ super ( List ) ; returnList ( Any.ANY ) . returnList () ; } new
Code	{ super ( List ) ; returnList ( Any.ANY ) . returnList () ; } new
Distance : 10

69
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } T
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } T
Distance : 12

70
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } nullNotPermitted
Distance : 12

71
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } []
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } []
Distance : 12

72
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } void
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } void
Distance : 12

73
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ==
Distance : 12

74
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } assertEquals
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } assertEquals
Distance : 12

75
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } !
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } !
Distance : 12

76
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } @
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } @
Distance : 12

77
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } test
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } test
Distance : 12

78
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Override
Distance : 12

79
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } mock
Distance : 12

80
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } [
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } [
Distance : 12

81
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ]
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ]
Distance : 12

82
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } &&
Distance : 12

83
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Distance : 12

84
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Distance : 12

85
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } ParamChecks
Distance : 8

86
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } return
Code	{ reportMatcher ( Any.ANY ) ; return null ; } return
Distance : 12

87
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Distance : 12

88
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } List
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } List
Distance : 8

89
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } Args
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } Args
Distance : 8

90
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } fail
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } fail
Distance : 8

91
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } try
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } try
Distance : 8

92
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } type
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } type
Distance : 8

93
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } *
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } *
Distance : 8

94
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } paint
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } paint
Distance : 8

95
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } join
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } join
Distance : 8

96
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } test
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } test
Distance : 8

97
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } @
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } @
Distance : 8

98
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } int
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } int
Distance : 8

99
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } false
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } false
Distance : 8

========================================================================


========================================================================
Example Number: 95
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnString () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( String . class ) ) . returnString () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnString}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=String})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnString}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ return this . String ; } checkState
Code	{ return this . String ; } checkState
Distance : 13

1
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } class
Code	{ reportMatcher ( Any.ANY ) ; return null ; } class
Distance : 12

2
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } try
Code	{ reportMatcher ( Any.ANY ) ; return null ; } try
Distance : 12

3
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Distance : 12

4
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Distance : 12

5
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } List
Code	{ reportMatcher ( Any.ANY ) ; return null ; } List
Distance : 12

6
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } test
Code	{ reportMatcher ( Any.ANY ) ; return null ; } test
Distance : 12

7
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } @
Code	{ reportMatcher ( Any.ANY ) ; return null ; } @
Distance : 12

8
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } int
Code	{ reportMatcher ( Any.ANY ) ; return null ; } int
Distance : 12

9
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } false
Code	{ reportMatcher ( Any.ANY ) ; return null ; } false
Distance : 12

10
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } +
Code	{ reportMatcher ( Any.ANY ) ; return null ; } +
Distance : 12

11
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } >
Code	{ reportMatcher ( Any.ANY ) ; return null ; } >
Distance : 12

12
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } ==
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } ==
Distance : 8

13
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } assertThat
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } assertThat
Distance : 8

14
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } result
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } result
Distance : 8

15
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } :
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } :
Distance : 8

16
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } boolean
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } boolean
Distance : 8

17
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } m
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } m
Distance : 8

18
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } x
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } x
Distance : 8

19
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } testSame
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } testSame
Distance : 8

20
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } parent
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } parent
Distance : 8

21
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } createIllegalArgumentException
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } createIllegalArgumentException
Distance : 8

22
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } serialised
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } serialised
Distance : 8

23
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } getInstance
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } getInstance
Distance : 8

24
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } fireChangeEvent
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } fireChangeEvent
Distance : 8

25
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } ArrayList
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } ArrayList
Distance : 8

26
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Distance : 12

27
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } invocation
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } invocation
Distance : 8

28
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Distance : 12

29
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Distance : 12

30
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } []
Code	{ reportMatcher ( Any.ANY ) ; return null ; } []
Distance : 12

31
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Distance : 12

32
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Code	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Distance : 12

33
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Code	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Distance : 12

34
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } void
Code	{ reportMatcher ( Any.ANY ) ; return null ; } void
Distance : 12

35
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Distance : 12

36
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } value
Code	{ reportMatcher ( Any.ANY ) ; return null ; } value
Distance : 12

37
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } T
Code	{ reportMatcher ( Any.ANY ) ; return null ; } T
Distance : 12

38
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } null
Code	{ reportMatcher ( Any.ANY ) ; return null ; } null
Distance : 12

39
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Distance : 12

40
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } str
Code	{ reportMatcher ( Any.ANY ) ; return null ; } str
Distance : 12

41
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Code	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Distance : 12

42
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Distance : 12

43
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Code	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Distance : 12

44
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } type
Code	{ reportMatcher ( Any.ANY ) ; return null ; } type
Distance : 12

45
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } *
Code	{ reportMatcher ( Any.ANY ) ; return null ; } *
Distance : 12

46
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Code	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Distance : 12

47
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } join
Code	{ reportMatcher ( Any.ANY ) ; return null ; } join
Distance : 12

48
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } f
Code	{ reportMatcher ( Any.ANY ) ; return null ; } f
Distance : 12

49
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Distance : 12

50
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } array
Code	{ reportMatcher ( Any.ANY ) ; return null ; } array
Distance : 12

51
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Distance : 12

52
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Distance : 12

53
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } true
Code	{ reportMatcher ( Any.ANY ) ; return null ; } true
Distance : 12

54
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Distance : 12

55
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Distance : 12

56
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !
Distance : 12

57
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } LINE_JOINER
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } LINE_JOINER
Distance : 8

58
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } str
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } str
Distance : 8

59
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } super
Code	{ reportMatcher ( Any.ANY ) ; return null ; } super
Distance : 12

60
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } double
Code	{ reportMatcher ( Any.ANY ) ; return null ; } double
Distance : 12

61
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Code	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Distance : 12

62
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } field
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } field
Distance : 8

63
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } t
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } t
Distance : 8

64
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } name
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } name
Distance : 8

65
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } add
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } add
Distance : 8

66
Tree	{ super ( String ) ; reportMatcher ( Any.ANY ) . returnString () ; } NUMBER_CONSTANT
Code	{ super ( String ) ; reportMatcher ( Any.ANY ) . returnString () ; } NUMBER_CONSTANT
Distance : 10

67
Tree	{ super ( String ) ; reportMatcher ( Any.ANY ) . returnString () ; } STRING_CONSTANT
Code	{ super ( String ) ; reportMatcher ( Any.ANY ) . returnString () ; } STRING_CONSTANT
Distance : 10

68
Tree	{ super ( String ) ; reportMatcher ( Any.ANY ) . returnString () ; } new
Code	{ super ( String ) ; reportMatcher ( Any.ANY ) . returnString () ; } new
Distance : 10

69
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } T
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } T
Distance : 12

70
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } nullNotPermitted
Distance : 12

71
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } []
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } []
Distance : 12

72
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } void
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } void
Distance : 12

73
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ==
Distance : 12

74
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } assertEquals
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } assertEquals
Distance : 12

75
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } !
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } !
Distance : 12

76
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } @
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } @
Distance : 12

77
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } test
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } test
Distance : 12

78
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Override
Distance : 12

79
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } mock
Distance : 12

80
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } [
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } [
Distance : 12

81
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ]
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ]
Distance : 12

82
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } &&
Distance : 12

83
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Distance : 12

84
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Distance : 12

85
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } ParamChecks
Distance : 8

86
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } return
Code	{ reportMatcher ( Any.ANY ) ; return null ; } return
Distance : 12

87
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Distance : 12

88
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } List
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } List
Distance : 8

89
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } Args
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } Args
Distance : 8

90
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } fail
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } fail
Distance : 8

91
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } try
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } try
Distance : 8

92
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } type
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } type
Distance : 8

93
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } *
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } *
Distance : 8

94
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } paint
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } paint
Distance : 8

95
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } join
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } join
Distance : 8

96
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } test
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } test
Distance : 8

97
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } @
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } @
Distance : 8

98
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } int
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } int
Distance : 8

99
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } false
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } false
Distance : 8

========================================================================


========================================================================
Example Number: 96
Parent Code is: 
{ return ( T ) anyObject () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (802{val=anyObject}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnNull}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 6
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher () ; } double
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher () ; } double
Distance : 2

1
Tree	{ return reportMatcher () ; } try
Code	{ return reportMatcher () ; } try
Distance : 9

2
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } super
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } super
Distance : 5

3
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } checkState
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } checkState
Distance : 5

4
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } false
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } false
Distance : 5

5
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } @
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } @
Distance : 5

6
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } super
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } super
Distance : 5

7
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } [
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } [
Distance : 5

8
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } n
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } n
Distance : 5

9
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } +
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } +
Distance : 5

10
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } e
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } e
Distance : 5

11
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } catch
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } catch
Distance : 5

12
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } compiler
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } compiler
Distance : 5

13
Tree	{ return reportMatcher () ; } List
Code	{ return reportMatcher () ; } List
Distance : 9

14
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } throw
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } throw
Distance : 5

15
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } true
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } true
Distance : 5

16
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } -
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } -
Distance : 5

17
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } &&
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } &&
Distance : 5

18
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } Preconditions
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } Preconditions
Distance : 5

19
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } mode
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } mode
Distance : 5

20
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } ]
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } ]
Distance : 5

21
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } {}
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } {}
Distance : 5

22
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } *
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } *
Distance : 5

23
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } testSame
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } testSame
Distance : 5

24
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } createIllegalArgumentException
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } createIllegalArgumentException
Distance : 5

25
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } ArrayList
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } ArrayList
Distance : 5

26
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } parent
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } parent
Distance : 5

27
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } void
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } void
Distance : 5

28
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } LINE_JOINER
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } LINE_JOINER
Distance : 5

29
Tree	{ return reportMatcher () ; } expected
Code	{ return reportMatcher () ; } expected
Distance : 9

30
Tree	{ return reportMatcher () ; } str
Code	{ return reportMatcher () ; } str
Distance : 9

31
Tree	{ return reportMatcher () ; } IllegalArgumentException
Code	{ return reportMatcher () ; } IllegalArgumentException
Distance : 9

32
Tree	{ return reportMatcher () ; } join
Code	{ return reportMatcher () ; } join
Distance : 9

33
Tree	{ return reportMatcher () ; } type
Code	{ return reportMatcher () ; } type
Distance : 9

34
Tree	{ return reportMatcher () ; } getInstance
Code	{ return reportMatcher () ; } getInstance
Distance : 9

35
Tree	{ return reportMatcher () ; } x
Code	{ return reportMatcher () ; } x
Distance : 9

36
Tree	{ return reportMatcher () ; } field
Code	{ return reportMatcher () ; } field
Distance : 9

37
Tree	{ return reportMatcher () ; } add
Code	{ return reportMatcher () ; } add
Distance : 9

38
Tree	{ return reportMatcher () ; } checkArgument
Code	{ return reportMatcher () ; } checkArgument
Distance : 9

39
Tree	{ return reportMatcher () ; } Args
Code	{ return reportMatcher () ; } Args
Distance : 9

40
Tree	{ return reportMatcher () ; } <>
Code	{ return reportMatcher () ; } <>
Distance : 9

41
Tree	{ return reportMatcher () ; } f
Code	{ return reportMatcher () ; } f
Distance : 9

42
Tree	{ return reportMatcher () ; } array
Code	{ return reportMatcher () ; } array
Distance : 9

43
Tree	{ return reportMatcher () ; } assertThat
Code	{ return reportMatcher () ; } assertThat
Distance : 9

44
Tree	{ return reportMatcher () ; } fail
Code	{ return reportMatcher () ; } fail
Distance : 9

45
Tree	{ return reportMatcher () ; } m
Code	{ return reportMatcher () ; } m
Distance : 9

46
Tree	{ return reportMatcher () ; } paint
Code	{ return reportMatcher () ; } paint
Distance : 9

47
Tree	{ return reportMatcher () ; } LINE_JOINER
Code	{ return reportMatcher () ; } LINE_JOINER
Distance : 9

48
Tree	{ return reportMatcher () ; } createIllegalArgumentException
Code	{ return reportMatcher () ; } createIllegalArgumentException
Distance : 9

49
Tree	{ return reportMatcher () ; } :
Code	{ return reportMatcher () ; } :
Distance : 9

50
Tree	{ return reportMatcher () ; } testSame
Code	{ return reportMatcher () ; } testSame
Distance : 9

51
Tree	{ return reportMatcher () ; } fireChangeEvent
Code	{ return reportMatcher () ; } fireChangeEvent
Distance : 9

52
Tree	{ return reportMatcher () ; } serialised
Code	{ return reportMatcher () ; } serialised
Distance : 9

53
Tree	{ return reportMatcher () ; } ArrayList
Code	{ return reportMatcher () ; } ArrayList
Distance : 9

54
Tree	{ return reportMatcher () ; } parent
Code	{ return reportMatcher () ; } parent
Distance : 9

55
Tree	{ return reportMatcher () ; } FastMath
Code	{ return reportMatcher () ; } FastMath
Distance : 9

56
Tree	{ return reportMatcher () ; } invocation
Code	{ return reportMatcher () ; } invocation
Distance : 9

57
Tree	{ return reportMatcher () ; } result
Code	{ return reportMatcher () ; } result
Distance : 9

58
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } x
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } x
Distance : 5

59
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } str
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } str
Distance : 5

60
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } assertThat
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } assertThat
Distance : 5

61
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } <>
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } <>
Distance : 5

62
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } List
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } List
Distance : 5

63
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } expected
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } expected
Distance : 5

64
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } fireChangeEvent
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } fireChangeEvent
Distance : 5

65
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } serialised
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } serialised
Distance : 5

66
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } type
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } type
Distance : 5

67
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } getInstance
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } getInstance
Distance : 5

68
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } paint
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } paint
Distance : 5

69
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } m
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } m
Distance : 5

70
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } join
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } join
Distance : 5

71
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } fail
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } fail
Distance : 5

72
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } Object
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } Object
Distance : 5

73
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } Args
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } Args
Distance : 5

74
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } Override
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } Override
Distance : 5

75
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } mock
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } mock
Distance : 5

76
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } ParamChecks
Distance : 5

77
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } class
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } class
Distance : 5

78
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } f
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } f
Distance : 5

79
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } array
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } array
Distance : 5

80
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } boolean
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } boolean
Distance : 5

81
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } result
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } result
Distance : 5

82
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } try
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } try
Distance : 5

83
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } :
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } :
Distance : 5

84
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } i
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } i
Distance : 5

85
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } !=
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } !=
Distance : 5

86
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } value
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } value
Distance : 5

87
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } MathRuntimeException
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } MathRuntimeException
Distance : 5

88
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } invocation
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } invocation
Distance : 5

89
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } IllegalArgumentException
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } IllegalArgumentException
Distance : 5

90
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } FastMath
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } FastMath
Distance : 5

91
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } int
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } int
Distance : 5

92
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } test
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } test
Distance : 5

93
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } List
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } List
Distance : 5

94
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } expected
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } expected
Distance : 5

95
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } fireChangeEvent
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } fireChangeEvent
Distance : 5

96
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } serialised
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } serialised
Distance : 5

97
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } type
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } type
Distance : 5

98
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } getInstance
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } getInstance
Distance : 5

99
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } paint
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; } paint
Distance : 5

========================================================================


========================================================================
Example Number: 97
Parent Code is: 
{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return ( T ) reportMatcher ( new InstanceOf ( clazz ) ) . returnFor ( clazz ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnFor}) (214{val=(}) (800{val=clazz}) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (800{val=clazz}) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnFor}) (214{val=(}) (800{val=clazz}) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } createIllegalArgumentException
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } createIllegalArgumentException
Distance : 11

1
Tree	{ return reportMatcher ( Any.ANY ) ; } !=
Code	{ return reportMatcher ( Any.ANY ) ; } !=
Distance : 14

2
Tree	{ return reportMatcher ( Any.ANY ) ; } super
Code	{ return reportMatcher ( Any.ANY ) ; } super
Distance : 14

3
Tree	{ return reportMatcher ( Any.ANY ) ; } true
Code	{ return reportMatcher ( Any.ANY ) ; } true
Distance : 14

4
Tree	{ return reportMatcher ( Any.ANY ) ; } mode
Code	{ return reportMatcher ( Any.ANY ) ; } mode
Distance : 14

5
Tree	{ return reportMatcher ( Any.ANY ) ; } public
Code	{ return reportMatcher ( Any.ANY ) ; } public
Distance : 14

6
Tree	{ return reportMatcher ( Any.ANY ) ; } >
Code	{ return reportMatcher ( Any.ANY ) ; } >
Distance : 14

7
Tree	{ return reportMatcher ( Any.ANY ) ; } new
Code	{ return reportMatcher ( Any.ANY ) ; } new
Distance : 14

8
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } assertEquals
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } assertEquals
Distance : 11

9
Tree	{ return reportMatcher ( this , T ) ; } FastMath
Code	{ return reportMatcher ( this , T ) ; } FastMath
Distance : 14

10
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } []
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } []
Distance : 11

11
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } (
Code	{ reportMatcher ( Any.ANY ) ; return null ; } (
Distance : 15

12
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } void
Code	{ reportMatcher ( Any.ANY ) ; return null ; } void
Distance : 15

13
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Distance : 15

14
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } +
Code	{ reportMatcher ( Any.ANY ) ; return null ; } +
Distance : 15

15
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } null
Code	{ reportMatcher ( Any.ANY ) ; return null ; } null
Distance : 15

16
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } >
Code	{ reportMatcher ( Any.ANY ) ; return null ; } >
Distance : 15

17
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } public
Code	{ reportMatcher ( Any.ANY ) ; return null ; } public
Distance : 15

18
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } if
Code	{ reportMatcher ( Any.ANY ) ; return null ; } if
Distance : 15

19
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <
Distance : 15

20
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } this
Code	{ reportMatcher ( Any.ANY ) ; return null ; } this
Distance : 15

21
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } return
Code	{ reportMatcher ( Any.ANY ) ; return null ; } return
Distance : 15

22
Tree	{ return this . T . returnFor ( T ) ; } IllegalArgumentException
Code	{ return this . T . returnFor ( T ) ; } IllegalArgumentException
Distance : 13

23
Tree	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } IllegalArgumentException
Code	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } IllegalArgumentException
Distance : 9

24
Tree	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } FastMath
Code	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } FastMath
Distance : 9

25
Tree	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } expected
Code	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } expected
Distance : 9

26
Tree	{ return reportMatcher ( Any.ANY ) ; } .
Code	{ return reportMatcher ( Any.ANY ) ; } .
Distance : 14

27
Tree	{ return reportMatcher ( Any.ANY ) ; } ,
Code	{ return reportMatcher ( Any.ANY ) ; } ,
Distance : 14

28
Tree	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } try
Code	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } try
Distance : 9

29
Tree	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } ParamChecks
Distance : 9

30
Tree	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } f
Code	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } f
Distance : 9

31
Tree	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } Override
Code	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } Override
Distance : 9

32
Tree	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } mock
Code	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } mock
Distance : 9

33
Tree	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } Object
Code	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } Object
Distance : 9

34
Tree	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } class
Code	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } class
Distance : 9

35
Tree	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } type
Code	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } type
Distance : 9

36
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ,
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ,
Distance : 15

37
Tree	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } *
Code	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } *
Distance : 9

38
Tree	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } join
Code	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } join
Distance : 9

39
Tree	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } serialised
Code	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } serialised
Distance : 9

40
Tree	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } getInstance
Code	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } getInstance
Distance : 9

41
Tree	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } fireChangeEvent
Code	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } fireChangeEvent
Distance : 9

42
Tree	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } ArrayList
Code	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } ArrayList
Distance : 9

43
Tree	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } fail
Code	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } fail
Distance : 9

44
Tree	{ return reportMatcher ( Any.ANY ) ; } STRING_CONSTANT
Code	{ return reportMatcher ( Any.ANY ) ; } STRING_CONSTANT
Distance : 14

45
Tree	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } Args
Code	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } Args
Distance : 9

46
Tree	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } List
Code	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } List
Distance : 9

47
Tree	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } reportCodeChange
Code	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } reportCodeChange
Distance : 9

48
Tree	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } paint
Code	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; } paint
Distance : 9

49
Tree	{ return reportMatcher ( Any.ANY ) ; } }
Code	{ return reportMatcher ( Any.ANY ) ; } }
Distance : 14

50
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } .
Code	{ reportMatcher ( Any.ANY ) ; return null ; } .
Distance : 15

51
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ;
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ;
Distance : 15

52
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } m
Code	{ reportMatcher ( Any.ANY ) ; return null ; } m
Distance : 15

53
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Distance : 15

54
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Distance : 15

55
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Code	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Distance : 15

56
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Code	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Distance : 15

57
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } createIllegalArgumentException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } createIllegalArgumentException
Distance : 15

58
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } parent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } parent
Distance : 15

59
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } testSame
Code	{ reportMatcher ( Any.ANY ) ; return null ; } testSame
Distance : 15

60
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } x
Code	{ reportMatcher ( Any.ANY ) ; return null ; } x
Distance : 15

61
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertEquals
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertEquals
Distance : 15

62
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !
Distance : 15

63
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } double
Code	{ reportMatcher ( Any.ANY ) ; return null ; } double
Distance : 15

64
Tree	{ return ( T ) reportMatcher ( clazz ) ; } IllegalArgumentException
Code	{ return ( T ) reportMatcher ( clazz ) ; } IllegalArgumentException
Distance : 10

65
Tree	{ return ( T ) reportMatcher ( clazz ) ; } !
Code	{ return ( T ) reportMatcher ( clazz ) ; } !
Distance : 10

66
Tree	{ return ( T ) reportMatcher ( clazz ) ; } {}
Code	{ return ( T ) reportMatcher ( clazz ) ; } {}
Distance : 10

67
Tree	{ return ( T ) reportMatcher ( clazz ) ; } String
Code	{ return ( T ) reportMatcher ( clazz ) ; } String
Distance : 10

68
Tree	{ return ( T ) reportMatcher ( clazz ) ; } e
Code	{ return ( T ) reportMatcher ( clazz ) ; } e
Distance : 10

69
Tree	{ return ( T ) reportMatcher ( clazz ) ; } n
Code	{ return ( T ) reportMatcher ( clazz ) ; } n
Distance : 10

70
Tree	{ return ( T ) reportMatcher ( clazz ) ; } throw
Code	{ return ( T ) reportMatcher ( clazz ) ; } throw
Distance : 10

71
Tree	{ return ( T ) reportMatcher ( clazz ) ; } catch
Code	{ return ( T ) reportMatcher ( clazz ) ; } catch
Distance : 10

72
Tree	{ return ( T ) reportMatcher ( clazz ) ; } void
Code	{ return ( T ) reportMatcher ( clazz ) ; } void
Distance : 10

73
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Code	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Distance : 15

74
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } :
Code	{ reportMatcher ( Any.ANY ) ; return null ; } :
Distance : 15

75
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } result
Code	{ reportMatcher ( Any.ANY ) ; return null ; } result
Distance : 15

76
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ]
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ]
Distance : 15

77
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {
Distance : 15

78
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ()
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ()
Distance : 15

79
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } }
Code	{ reportMatcher ( Any.ANY ) ; return null ; } }
Distance : 15

80
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } =
Code	{ reportMatcher ( Any.ANY ) ; return null ; } =
Distance : 15

81
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Distance : 15

82
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } super
Code	{ reportMatcher ( Any.ANY ) ; return null ; } super
Distance : 15

83
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Code	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Distance : 15

84
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Code	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Distance : 15

85
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Distance : 15

86
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } []
Code	{ reportMatcher ( Any.ANY ) ; return null ; } []
Distance : 15

87
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } )
Code	{ reportMatcher ( Any.ANY ) ; return null ; } )
Distance : 15

88
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } false
Code	{ reportMatcher ( Any.ANY ) ; return null ; } false
Distance : 15

89
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } T
Code	{ reportMatcher ( Any.ANY ) ; return null ; } T
Distance : 15

90
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } i
Code	{ reportMatcher ( Any.ANY ) ; return null ; } i
Distance : 15

91
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } value
Code	{ reportMatcher ( Any.ANY ) ; return null ; } value
Distance : 15

92
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } n
Code	{ reportMatcher ( Any.ANY ) ; return null ; } n
Distance : 15

93
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } e
Code	{ reportMatcher ( Any.ANY ) ; return null ; } e
Distance : 15

94
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } String
Code	{ reportMatcher ( Any.ANY ) ; return null ; } String
Distance : 15

95
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } compiler
Code	{ reportMatcher ( Any.ANY ) ; return null ; } compiler
Distance : 15

96
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } -
Code	{ reportMatcher ( Any.ANY ) ; return null ; } -
Distance : 15

97
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Preconditions
Distance : 15

98
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } [
Code	{ reportMatcher ( Any.ANY ) ; return null ; } [
Distance : 15

99
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Distance : 15

========================================================================


========================================================================
Example Number: 98
Parent Code is: 
{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return ( T ) reportMatcher ( new InstanceOf ( Object . class ) ) . returnNull () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnNull}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Object})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnNull}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ return ( T ) reportMatcher ( T ) ; } @
Code	{ return ( T ) reportMatcher ( T ) ; } @
Distance : 11

1
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } array
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } array
Distance : 11

2
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } ParamChecks
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } ParamChecks
Distance : 11

3
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } result
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } result
Distance : 11

4
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } assertThat
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } assertThat
Distance : 11

5
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } :
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } :
Distance : 11

6
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } boolean
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } boolean
Distance : 11

7
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } m
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } m
Distance : 11

8
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } x
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } x
Distance : 11

9
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } testSame
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } testSame
Distance : 11

10
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } parent
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } parent
Distance : 11

11
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } createIllegalArgumentException
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } createIllegalArgumentException
Distance : 11

12
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } serialised
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } serialised
Distance : 11

13
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } getInstance
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } getInstance
Distance : 11

14
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } fireChangeEvent
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } fireChangeEvent
Distance : 11

15
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } ArrayList
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } ArrayList
Distance : 11

16
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } invocation
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } invocation
Distance : 11

17
Tree	{ return reportMatcher () ; } getInstance
Code	{ return reportMatcher () ; } getInstance
Distance : 15

18
Tree	{ return reportMatcher () ; } serialised
Code	{ return reportMatcher () ; } serialised
Distance : 15

19
Tree	{ return reportMatcher () ; } result
Code	{ return reportMatcher () ; } result
Distance : 15

20
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Code	{ reportMatcher ( Any.ANY ) ; return null ; } boolean
Distance : 15

21
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } i
Code	{ reportMatcher ( Any.ANY ) ; return null ; } i
Distance : 15

22
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ]
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ]
Distance : 15

23
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } result
Code	{ reportMatcher ( Any.ANY ) ; return null ; } result
Distance : 15

24
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } :
Code	{ reportMatcher ( Any.ANY ) ; return null ; } :
Distance : 15

25
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } m
Code	{ reportMatcher ( Any.ANY ) ; return null ; } m
Distance : 15

26
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } <>
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } <>
Distance : 11

27
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } add
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } add
Distance : 11

28
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } name
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } name
Distance : 11

29
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } t
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } t
Distance : 11

30
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } false
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } false
Distance : 11

31
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } ==
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } ==
Distance : 11

32
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } catch
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } catch
Distance : 11

33
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } str
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } str
Distance : 11

34
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } throw
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } throw
Distance : 11

35
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } nullNotPermitted
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } nullNotPermitted
Distance : 11

36
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } []
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } []
Distance : 11

37
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } !
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } !
Distance : 11

38
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } assertEquals
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } assertEquals
Distance : 11

39
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } MathRuntimeException
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } MathRuntimeException
Distance : 11

40
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } {}
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } {}
Distance : 11

41
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } true
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } true
Distance : 11

42
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Distance : 15

43
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } mode
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } mode
Distance : 11

44
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } i
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } i
Distance : 11

45
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } T
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } T
Distance : 11

46
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } List
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } List
Distance : 11

47
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } LINE_JOINER
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } LINE_JOINER
Distance : 11

48
Tree	{ return reportMatcher () ; } >
Code	{ return reportMatcher () ; } >
Distance : 15

49
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } f
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } f
Distance : 11

50
Tree	{ return reportMatcher () ; } public
Code	{ return reportMatcher () ; } public
Distance : 15

51
Tree	{ return reportMatcher () ; } mode
Code	{ return reportMatcher () ; } mode
Distance : 15

52
Tree	{ return reportMatcher () ; } true
Code	{ return reportMatcher () ; } true
Distance : 15

53
Tree	{ return reportMatcher () ; } super
Code	{ return reportMatcher () ; } super
Distance : 15

54
Tree	{ return reportMatcher () ; } !=
Code	{ return reportMatcher () ; } !=
Distance : 15

55
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } field
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } field
Distance : 11

56
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } value
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } value
Distance : 11

57
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ArrayList
Distance : 15

58
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fireChangeEvent
Distance : 15

59
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Code	{ reportMatcher ( Any.ANY ) ; return null ; } getInstance
Distance : 15

60
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Distance : 15

61
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Distance : 15

62
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } class
Code	{ reportMatcher ( Any.ANY ) ; return null ; } class
Distance : 15

63
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } try
Code	{ reportMatcher ( Any.ANY ) ; return null ; } try
Distance : 15

64
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Distance : 15

65
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Distance : 15

66
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } List
Code	{ reportMatcher ( Any.ANY ) ; return null ; } List
Distance : 15

67
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } test
Code	{ reportMatcher ( Any.ANY ) ; return null ; } test
Distance : 15

68
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } @
Code	{ reportMatcher ( Any.ANY ) ; return null ; } @
Distance : 15

69
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Code	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Distance : 15

70
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } void
Code	{ reportMatcher ( Any.ANY ) ; return null ; } void
Distance : 15

71
Tree	{ return reportMatcher () ; } :
Code	{ return reportMatcher () ; } :
Distance : 15

72
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Distance : 15

73
Tree	{ return reportMatcher () ; } str
Code	{ return reportMatcher () ; } str
Distance : 15

74
Tree	{ return reportMatcher () ; } boolean
Code	{ return reportMatcher () ; } boolean
Distance : 15

75
Tree	{ return reportMatcher () ; } checkArgument
Code	{ return reportMatcher () ; } checkArgument
Distance : 15

76
Tree	{ return reportMatcher () ; } data
Code	{ return reportMatcher () ; } data
Distance : 15

77
Tree	{ return reportMatcher () ; } List
Code	{ return reportMatcher () ; } List
Distance : 15

78
Tree	{ return reportMatcher () ; } Args
Code	{ return reportMatcher () ; } Args
Distance : 15

79
Tree	{ return reportMatcher () ; } array
Code	{ return reportMatcher () ; } array
Distance : 15

80
Tree	{ return reportMatcher () ; } <>
Code	{ return reportMatcher () ; } <>
Distance : 15

81
Tree	{ return reportMatcher () ; } try
Code	{ return reportMatcher () ; } try
Distance : 15

82
Tree	{ return reportMatcher () ; } fail
Code	{ return reportMatcher () ; } fail
Distance : 15

83
Tree	{ return reportMatcher () ; } paint
Code	{ return reportMatcher () ; } paint
Distance : 15

84
Tree	{ return reportMatcher () ; } join
Code	{ return reportMatcher () ; } join
Distance : 15

85
Tree	{ return reportMatcher () ; } LINE_JOINER
Code	{ return reportMatcher () ; } LINE_JOINER
Distance : 15

86
Tree	{ return reportMatcher () ; } m
Code	{ return reportMatcher () ; } m
Distance : 15

87
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } int
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } int
Distance : 11

88
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Distance : 15

89
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } int
Code	{ reportMatcher ( Any.ANY ) ; return null ; } int
Distance : 15

90
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Code	{ reportMatcher ( Any.ANY ) ; return null ; } serialised
Distance : 15

91
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } createIllegalArgumentException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } createIllegalArgumentException
Distance : 15

92
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } parent
Code	{ reportMatcher ( Any.ANY ) ; return null ; } parent
Distance : 15

93
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } testSame
Code	{ reportMatcher ( Any.ANY ) ; return null ; } testSame
Distance : 15

94
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } x
Code	{ reportMatcher ( Any.ANY ) ; return null ; } x
Distance : 15

95
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertEquals
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertEquals
Distance : 15

96
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !
Distance : 15

97
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } []
Code	{ reportMatcher ( Any.ANY ) ; return null ; } []
Distance : 15

98
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Distance : 15

99
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } T
Code	{ reportMatcher ( Any.ANY ) ; return null ; } T
Distance : 15

========================================================================


========================================================================
Example Number: 99
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Short . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Short})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ return this . Short ; } checkState
Code	{ return this . Short ; } checkState
Distance : 13

1
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } class
Code	{ reportMatcher ( Any.ANY ) ; return null ; } class
Distance : 12

2
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } try
Code	{ reportMatcher ( Any.ANY ) ; return null ; } try
Distance : 12

3
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Distance : 12

4
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Distance : 12

5
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } List
Code	{ reportMatcher ( Any.ANY ) ; return null ; } List
Distance : 12

6
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } test
Code	{ reportMatcher ( Any.ANY ) ; return null ; } test
Distance : 12

7
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } @
Code	{ reportMatcher ( Any.ANY ) ; return null ; } @
Distance : 12

8
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } int
Code	{ reportMatcher ( Any.ANY ) ; return null ; } int
Distance : 12

9
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } false
Code	{ reportMatcher ( Any.ANY ) ; return null ; } false
Distance : 12

10
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } +
Code	{ reportMatcher ( Any.ANY ) ; return null ; } +
Distance : 12

11
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } >
Code	{ reportMatcher ( Any.ANY ) ; return null ; } >
Distance : 12

12
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ==
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ==
Distance : 8

13
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertThat
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertThat
Distance : 8

14
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } result
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } result
Distance : 8

15
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } :
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } :
Distance : 8

16
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } boolean
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } boolean
Distance : 8

17
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } m
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } m
Distance : 8

18
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } x
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } x
Distance : 8

19
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } testSame
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } testSame
Distance : 8

20
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } parent
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } parent
Distance : 8

21
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } createIllegalArgumentException
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } createIllegalArgumentException
Distance : 8

22
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } serialised
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } serialised
Distance : 8

23
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getInstance
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getInstance
Distance : 8

24
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fireChangeEvent
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fireChangeEvent
Distance : 8

25
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ArrayList
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ArrayList
Distance : 8

26
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Distance : 12

27
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } invocation
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } invocation
Distance : 8

28
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Distance : 12

29
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Distance : 12

30
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } []
Code	{ reportMatcher ( Any.ANY ) ; return null ; } []
Distance : 12

31
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Distance : 12

32
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Code	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Distance : 12

33
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Code	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Distance : 12

34
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } void
Code	{ reportMatcher ( Any.ANY ) ; return null ; } void
Distance : 12

35
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Distance : 12

36
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } value
Code	{ reportMatcher ( Any.ANY ) ; return null ; } value
Distance : 12

37
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } T
Code	{ reportMatcher ( Any.ANY ) ; return null ; } T
Distance : 12

38
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } null
Code	{ reportMatcher ( Any.ANY ) ; return null ; } null
Distance : 12

39
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Distance : 12

40
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } str
Code	{ reportMatcher ( Any.ANY ) ; return null ; } str
Distance : 12

41
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Code	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Distance : 12

42
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Distance : 12

43
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Code	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Distance : 12

44
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } type
Code	{ reportMatcher ( Any.ANY ) ; return null ; } type
Distance : 12

45
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } *
Code	{ reportMatcher ( Any.ANY ) ; return null ; } *
Distance : 12

46
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Code	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Distance : 12

47
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } join
Code	{ reportMatcher ( Any.ANY ) ; return null ; } join
Distance : 12

48
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } f
Code	{ reportMatcher ( Any.ANY ) ; return null ; } f
Distance : 12

49
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Distance : 12

50
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } array
Code	{ reportMatcher ( Any.ANY ) ; return null ; } array
Distance : 12

51
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Distance : 12

52
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Distance : 12

53
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } true
Code	{ reportMatcher ( Any.ANY ) ; return null ; } true
Distance : 12

54
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Distance : 12

55
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Distance : 12

56
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !
Distance : 12

57
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LINE_JOINER
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LINE_JOINER
Distance : 8

58
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } str
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } str
Distance : 8

59
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } super
Code	{ reportMatcher ( Any.ANY ) ; return null ; } super
Distance : 12

60
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } double
Code	{ reportMatcher ( Any.ANY ) ; return null ; } double
Distance : 12

61
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Code	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Distance : 12

62
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } field
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } field
Distance : 8

63
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } t
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } t
Distance : 8

64
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } name
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } name
Distance : 8

65
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } add
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } add
Distance : 8

66
Tree	{ super ( Short ) ; reportMatcher ( Any.ANY ) . returnZero () ; } NUMBER_CONSTANT
Code	{ super ( Short ) ; reportMatcher ( Any.ANY ) . returnZero () ; } NUMBER_CONSTANT
Distance : 10

67
Tree	{ super ( Short ) ; reportMatcher ( Any.ANY ) . returnZero () ; } STRING_CONSTANT
Code	{ super ( Short ) ; reportMatcher ( Any.ANY ) . returnZero () ; } STRING_CONSTANT
Distance : 10

68
Tree	{ super ( Short ) ; reportMatcher ( Any.ANY ) . returnZero () ; } new
Code	{ super ( Short ) ; reportMatcher ( Any.ANY ) . returnZero () ; } new
Distance : 10

69
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } T
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } T
Distance : 12

70
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } nullNotPermitted
Distance : 12

71
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } []
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } []
Distance : 12

72
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } void
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } void
Distance : 12

73
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ==
Distance : 12

74
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } assertEquals
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } assertEquals
Distance : 12

75
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } !
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } !
Distance : 12

76
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } @
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } @
Distance : 12

77
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } test
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } test
Distance : 12

78
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Override
Distance : 12

79
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } mock
Distance : 12

80
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } [
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } [
Distance : 12

81
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ]
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ]
Distance : 12

82
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } &&
Distance : 12

83
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Distance : 12

84
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Distance : 12

85
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ParamChecks
Distance : 8

86
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } return
Code	{ reportMatcher ( Any.ANY ) ; return null ; } return
Distance : 12

87
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Distance : 12

88
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } List
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } List
Distance : 8

89
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Args
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Args
Distance : 8

90
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fail
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fail
Distance : 8

91
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } try
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } try
Distance : 8

92
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } type
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } type
Distance : 8

93
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } *
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } *
Distance : 8

94
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } paint
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } paint
Distance : 8

95
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } join
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } join
Distance : 8

96
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } test
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } test
Distance : 8

97
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } @
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } @
Distance : 8

98
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } int
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } int
Distance : 8

99
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } false
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } false
Distance : 8

========================================================================


========================================================================
Example Number: 100
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Double . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Double})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ return this . Double ; } checkState
Code	{ return this . Double ; } checkState
Distance : 13

1
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } class
Code	{ reportMatcher ( Any.ANY ) ; return null ; } class
Distance : 12

2
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } try
Code	{ reportMatcher ( Any.ANY ) ; return null ; } try
Distance : 12

3
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Distance : 12

4
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Distance : 12

5
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } List
Code	{ reportMatcher ( Any.ANY ) ; return null ; } List
Distance : 12

6
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } test
Code	{ reportMatcher ( Any.ANY ) ; return null ; } test
Distance : 12

7
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } @
Code	{ reportMatcher ( Any.ANY ) ; return null ; } @
Distance : 12

8
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } int
Code	{ reportMatcher ( Any.ANY ) ; return null ; } int
Distance : 12

9
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } false
Code	{ reportMatcher ( Any.ANY ) ; return null ; } false
Distance : 12

10
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } +
Code	{ reportMatcher ( Any.ANY ) ; return null ; } +
Distance : 12

11
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } >
Code	{ reportMatcher ( Any.ANY ) ; return null ; } >
Distance : 12

12
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ==
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ==
Distance : 8

13
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertThat
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertThat
Distance : 8

14
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } result
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } result
Distance : 8

15
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } :
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } :
Distance : 8

16
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } boolean
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } boolean
Distance : 8

17
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } m
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } m
Distance : 8

18
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } x
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } x
Distance : 8

19
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } testSame
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } testSame
Distance : 8

20
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } parent
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } parent
Distance : 8

21
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } createIllegalArgumentException
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } createIllegalArgumentException
Distance : 8

22
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } serialised
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } serialised
Distance : 8

23
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getInstance
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getInstance
Distance : 8

24
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fireChangeEvent
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fireChangeEvent
Distance : 8

25
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ArrayList
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ArrayList
Distance : 8

26
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Distance : 12

27
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } invocation
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } invocation
Distance : 8

28
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Distance : 12

29
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Distance : 12

30
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } []
Code	{ reportMatcher ( Any.ANY ) ; return null ; } []
Distance : 12

31
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Distance : 12

32
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Code	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Distance : 12

33
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Code	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Distance : 12

34
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } void
Code	{ reportMatcher ( Any.ANY ) ; return null ; } void
Distance : 12

35
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Distance : 12

36
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } value
Code	{ reportMatcher ( Any.ANY ) ; return null ; } value
Distance : 12

37
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } T
Code	{ reportMatcher ( Any.ANY ) ; return null ; } T
Distance : 12

38
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } null
Code	{ reportMatcher ( Any.ANY ) ; return null ; } null
Distance : 12

39
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Distance : 12

40
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } str
Code	{ reportMatcher ( Any.ANY ) ; return null ; } str
Distance : 12

41
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Code	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Distance : 12

42
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Distance : 12

43
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Code	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Distance : 12

44
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } type
Code	{ reportMatcher ( Any.ANY ) ; return null ; } type
Distance : 12

45
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } *
Code	{ reportMatcher ( Any.ANY ) ; return null ; } *
Distance : 12

46
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Code	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Distance : 12

47
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } join
Code	{ reportMatcher ( Any.ANY ) ; return null ; } join
Distance : 12

48
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } f
Code	{ reportMatcher ( Any.ANY ) ; return null ; } f
Distance : 12

49
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Distance : 12

50
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } array
Code	{ reportMatcher ( Any.ANY ) ; return null ; } array
Distance : 12

51
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Distance : 12

52
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Distance : 12

53
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } true
Code	{ reportMatcher ( Any.ANY ) ; return null ; } true
Distance : 12

54
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Distance : 12

55
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Distance : 12

56
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !
Distance : 12

57
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LINE_JOINER
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LINE_JOINER
Distance : 8

58
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } str
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } str
Distance : 8

59
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } super
Code	{ reportMatcher ( Any.ANY ) ; return null ; } super
Distance : 12

60
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } double
Code	{ reportMatcher ( Any.ANY ) ; return null ; } double
Distance : 12

61
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Code	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Distance : 12

62
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } field
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } field
Distance : 8

63
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } t
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } t
Distance : 8

64
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } name
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } name
Distance : 8

65
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } add
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } add
Distance : 8

66
Tree	{ super ( Double ) ; reportMatcher ( Any.ANY ) . returnZero () ; } NUMBER_CONSTANT
Code	{ super ( Double ) ; reportMatcher ( Any.ANY ) . returnZero () ; } NUMBER_CONSTANT
Distance : 10

67
Tree	{ super ( Double ) ; reportMatcher ( Any.ANY ) . returnZero () ; } STRING_CONSTANT
Code	{ super ( Double ) ; reportMatcher ( Any.ANY ) . returnZero () ; } STRING_CONSTANT
Distance : 10

68
Tree	{ super ( Double ) ; reportMatcher ( Any.ANY ) . returnZero () ; } new
Code	{ super ( Double ) ; reportMatcher ( Any.ANY ) . returnZero () ; } new
Distance : 10

69
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } T
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } T
Distance : 12

70
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } nullNotPermitted
Distance : 12

71
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } []
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } []
Distance : 12

72
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } void
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } void
Distance : 12

73
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ==
Distance : 12

74
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } assertEquals
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } assertEquals
Distance : 12

75
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } !
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } !
Distance : 12

76
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } @
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } @
Distance : 12

77
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } test
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } test
Distance : 12

78
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Override
Distance : 12

79
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } mock
Distance : 12

80
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } [
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } [
Distance : 12

81
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ]
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ]
Distance : 12

82
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } &&
Distance : 12

83
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Distance : 12

84
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Distance : 12

85
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ParamChecks
Distance : 8

86
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } return
Code	{ reportMatcher ( Any.ANY ) ; return null ; } return
Distance : 12

87
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Distance : 12

88
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } List
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } List
Distance : 8

89
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Args
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Args
Distance : 8

90
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fail
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fail
Distance : 8

91
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } try
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } try
Distance : 8

92
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } type
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } type
Distance : 8

93
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } *
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } *
Distance : 8

94
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } paint
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } paint
Distance : 8

95
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } join
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } join
Distance : 8

96
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } test
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } test
Distance : 8

97
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } @
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } @
Distance : 8

98
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } int
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } int
Distance : 8

99
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } false
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } false
Distance : 8

========================================================================


========================================================================
Example Number: 101
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Float . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Float})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ return this . Float ; } checkState
Code	{ return this . Float ; } checkState
Distance : 13

1
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } class
Code	{ reportMatcher ( Any.ANY ) ; return null ; } class
Distance : 12

2
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } try
Code	{ reportMatcher ( Any.ANY ) ; return null ; } try
Distance : 12

3
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Distance : 12

4
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Distance : 12

5
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } List
Code	{ reportMatcher ( Any.ANY ) ; return null ; } List
Distance : 12

6
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } test
Code	{ reportMatcher ( Any.ANY ) ; return null ; } test
Distance : 12

7
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } @
Code	{ reportMatcher ( Any.ANY ) ; return null ; } @
Distance : 12

8
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } int
Code	{ reportMatcher ( Any.ANY ) ; return null ; } int
Distance : 12

9
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } false
Code	{ reportMatcher ( Any.ANY ) ; return null ; } false
Distance : 12

10
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } +
Code	{ reportMatcher ( Any.ANY ) ; return null ; } +
Distance : 12

11
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } >
Code	{ reportMatcher ( Any.ANY ) ; return null ; } >
Distance : 12

12
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ==
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ==
Distance : 8

13
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertThat
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertThat
Distance : 8

14
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } result
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } result
Distance : 8

15
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } :
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } :
Distance : 8

16
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } boolean
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } boolean
Distance : 8

17
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } m
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } m
Distance : 8

18
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } x
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } x
Distance : 8

19
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } testSame
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } testSame
Distance : 8

20
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } parent
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } parent
Distance : 8

21
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } createIllegalArgumentException
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } createIllegalArgumentException
Distance : 8

22
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } serialised
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } serialised
Distance : 8

23
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getInstance
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getInstance
Distance : 8

24
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fireChangeEvent
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fireChangeEvent
Distance : 8

25
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ArrayList
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ArrayList
Distance : 8

26
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Distance : 12

27
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } invocation
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } invocation
Distance : 8

28
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Distance : 12

29
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Distance : 12

30
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } []
Code	{ reportMatcher ( Any.ANY ) ; return null ; } []
Distance : 12

31
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Distance : 12

32
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Code	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Distance : 12

33
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Code	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Distance : 12

34
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } void
Code	{ reportMatcher ( Any.ANY ) ; return null ; } void
Distance : 12

35
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Distance : 12

36
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } value
Code	{ reportMatcher ( Any.ANY ) ; return null ; } value
Distance : 12

37
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } T
Code	{ reportMatcher ( Any.ANY ) ; return null ; } T
Distance : 12

38
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } null
Code	{ reportMatcher ( Any.ANY ) ; return null ; } null
Distance : 12

39
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Distance : 12

40
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } str
Code	{ reportMatcher ( Any.ANY ) ; return null ; } str
Distance : 12

41
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Code	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Distance : 12

42
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Distance : 12

43
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Code	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Distance : 12

44
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } type
Code	{ reportMatcher ( Any.ANY ) ; return null ; } type
Distance : 12

45
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } *
Code	{ reportMatcher ( Any.ANY ) ; return null ; } *
Distance : 12

46
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Code	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Distance : 12

47
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } join
Code	{ reportMatcher ( Any.ANY ) ; return null ; } join
Distance : 12

48
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } f
Code	{ reportMatcher ( Any.ANY ) ; return null ; } f
Distance : 12

49
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Distance : 12

50
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } array
Code	{ reportMatcher ( Any.ANY ) ; return null ; } array
Distance : 12

51
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Distance : 12

52
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Distance : 12

53
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } true
Code	{ reportMatcher ( Any.ANY ) ; return null ; } true
Distance : 12

54
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Distance : 12

55
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Distance : 12

56
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !
Distance : 12

57
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LINE_JOINER
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LINE_JOINER
Distance : 8

58
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } str
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } str
Distance : 8

59
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } super
Code	{ reportMatcher ( Any.ANY ) ; return null ; } super
Distance : 12

60
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } double
Code	{ reportMatcher ( Any.ANY ) ; return null ; } double
Distance : 12

61
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Code	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Distance : 12

62
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } field
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } field
Distance : 8

63
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } t
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } t
Distance : 8

64
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } name
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } name
Distance : 8

65
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } add
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } add
Distance : 8

66
Tree	{ super ( Float ) ; reportMatcher ( Any.ANY ) . returnZero () ; } NUMBER_CONSTANT
Code	{ super ( Float ) ; reportMatcher ( Any.ANY ) . returnZero () ; } NUMBER_CONSTANT
Distance : 10

67
Tree	{ super ( Float ) ; reportMatcher ( Any.ANY ) . returnZero () ; } STRING_CONSTANT
Code	{ super ( Float ) ; reportMatcher ( Any.ANY ) . returnZero () ; } STRING_CONSTANT
Distance : 10

68
Tree	{ super ( Float ) ; reportMatcher ( Any.ANY ) . returnZero () ; } new
Code	{ super ( Float ) ; reportMatcher ( Any.ANY ) . returnZero () ; } new
Distance : 10

69
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } T
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } T
Distance : 12

70
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } nullNotPermitted
Distance : 12

71
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } []
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } []
Distance : 12

72
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } void
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } void
Distance : 12

73
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ==
Distance : 12

74
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } assertEquals
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } assertEquals
Distance : 12

75
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } !
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } !
Distance : 12

76
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } @
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } @
Distance : 12

77
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } test
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } test
Distance : 12

78
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Override
Distance : 12

79
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } mock
Distance : 12

80
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } [
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } [
Distance : 12

81
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ]
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ]
Distance : 12

82
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } &&
Distance : 12

83
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Distance : 12

84
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Distance : 12

85
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ParamChecks
Distance : 8

86
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } return
Code	{ reportMatcher ( Any.ANY ) ; return null ; } return
Distance : 12

87
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Distance : 12

88
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } List
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } List
Distance : 8

89
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Args
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Args
Distance : 8

90
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fail
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fail
Distance : 8

91
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } try
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } try
Distance : 8

92
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } type
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } type
Distance : 8

93
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } *
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } *
Distance : 8

94
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } paint
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } paint
Distance : 8

95
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } join
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } join
Distance : 8

96
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } test
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } test
Distance : 8

97
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } @
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } @
Distance : 8

98
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } int
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } int
Distance : 8

99
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } false
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } false
Distance : 8

========================================================================


========================================================================
Example Number: 102
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Long . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Long})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ return this . Long ; } checkState
Code	{ return this . Long ; } checkState
Distance : 13

1
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } class
Code	{ reportMatcher ( Any.ANY ) ; return null ; } class
Distance : 12

2
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } try
Code	{ reportMatcher ( Any.ANY ) ; return null ; } try
Distance : 12

3
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Distance : 12

4
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Distance : 12

5
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } List
Code	{ reportMatcher ( Any.ANY ) ; return null ; } List
Distance : 12

6
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } test
Code	{ reportMatcher ( Any.ANY ) ; return null ; } test
Distance : 12

7
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } @
Code	{ reportMatcher ( Any.ANY ) ; return null ; } @
Distance : 12

8
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } int
Code	{ reportMatcher ( Any.ANY ) ; return null ; } int
Distance : 12

9
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } false
Code	{ reportMatcher ( Any.ANY ) ; return null ; } false
Distance : 12

10
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } +
Code	{ reportMatcher ( Any.ANY ) ; return null ; } +
Distance : 12

11
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } >
Code	{ reportMatcher ( Any.ANY ) ; return null ; } >
Distance : 12

12
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ==
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ==
Distance : 8

13
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertThat
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertThat
Distance : 8

14
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } result
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } result
Distance : 8

15
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } :
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } :
Distance : 8

16
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } boolean
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } boolean
Distance : 8

17
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } m
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } m
Distance : 8

18
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } x
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } x
Distance : 8

19
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } testSame
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } testSame
Distance : 8

20
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } parent
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } parent
Distance : 8

21
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } createIllegalArgumentException
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } createIllegalArgumentException
Distance : 8

22
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } serialised
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } serialised
Distance : 8

23
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getInstance
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getInstance
Distance : 8

24
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fireChangeEvent
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fireChangeEvent
Distance : 8

25
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ArrayList
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ArrayList
Distance : 8

26
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Distance : 12

27
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } invocation
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } invocation
Distance : 8

28
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Distance : 12

29
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Distance : 12

30
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } []
Code	{ reportMatcher ( Any.ANY ) ; return null ; } []
Distance : 12

31
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Distance : 12

32
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Code	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Distance : 12

33
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Code	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Distance : 12

34
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } void
Code	{ reportMatcher ( Any.ANY ) ; return null ; } void
Distance : 12

35
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Distance : 12

36
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } value
Code	{ reportMatcher ( Any.ANY ) ; return null ; } value
Distance : 12

37
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } T
Code	{ reportMatcher ( Any.ANY ) ; return null ; } T
Distance : 12

38
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } null
Code	{ reportMatcher ( Any.ANY ) ; return null ; } null
Distance : 12

39
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Distance : 12

40
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } str
Code	{ reportMatcher ( Any.ANY ) ; return null ; } str
Distance : 12

41
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Code	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Distance : 12

42
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Distance : 12

43
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Code	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Distance : 12

44
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } type
Code	{ reportMatcher ( Any.ANY ) ; return null ; } type
Distance : 12

45
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } *
Code	{ reportMatcher ( Any.ANY ) ; return null ; } *
Distance : 12

46
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Code	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Distance : 12

47
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } join
Code	{ reportMatcher ( Any.ANY ) ; return null ; } join
Distance : 12

48
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } f
Code	{ reportMatcher ( Any.ANY ) ; return null ; } f
Distance : 12

49
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Distance : 12

50
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } array
Code	{ reportMatcher ( Any.ANY ) ; return null ; } array
Distance : 12

51
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Distance : 12

52
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Distance : 12

53
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } true
Code	{ reportMatcher ( Any.ANY ) ; return null ; } true
Distance : 12

54
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Distance : 12

55
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Distance : 12

56
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !
Distance : 12

57
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LINE_JOINER
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LINE_JOINER
Distance : 8

58
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } str
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } str
Distance : 8

59
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } super
Code	{ reportMatcher ( Any.ANY ) ; return null ; } super
Distance : 12

60
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } double
Code	{ reportMatcher ( Any.ANY ) ; return null ; } double
Distance : 12

61
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Code	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Distance : 12

62
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } field
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } field
Distance : 8

63
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } t
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } t
Distance : 8

64
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } name
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } name
Distance : 8

65
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } add
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } add
Distance : 8

66
Tree	{ super ( Long ) ; reportMatcher ( Any.ANY ) . returnZero () ; } NUMBER_CONSTANT
Code	{ super ( Long ) ; reportMatcher ( Any.ANY ) . returnZero () ; } NUMBER_CONSTANT
Distance : 10

67
Tree	{ super ( Long ) ; reportMatcher ( Any.ANY ) . returnZero () ; } STRING_CONSTANT
Code	{ super ( Long ) ; reportMatcher ( Any.ANY ) . returnZero () ; } STRING_CONSTANT
Distance : 10

68
Tree	{ super ( Long ) ; reportMatcher ( Any.ANY ) . returnZero () ; } new
Code	{ super ( Long ) ; reportMatcher ( Any.ANY ) . returnZero () ; } new
Distance : 10

69
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } T
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } T
Distance : 12

70
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } nullNotPermitted
Distance : 12

71
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } []
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } []
Distance : 12

72
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } void
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } void
Distance : 12

73
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ==
Distance : 12

74
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } assertEquals
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } assertEquals
Distance : 12

75
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } !
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } !
Distance : 12

76
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } @
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } @
Distance : 12

77
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } test
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } test
Distance : 12

78
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Override
Distance : 12

79
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } mock
Distance : 12

80
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } [
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } [
Distance : 12

81
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ]
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ]
Distance : 12

82
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } &&
Distance : 12

83
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Distance : 12

84
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Distance : 12

85
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ParamChecks
Distance : 8

86
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } return
Code	{ reportMatcher ( Any.ANY ) ; return null ; } return
Distance : 12

87
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Distance : 12

88
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } List
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } List
Distance : 8

89
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Args
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Args
Distance : 8

90
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fail
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fail
Distance : 8

91
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } try
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } try
Distance : 8

92
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } type
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } type
Distance : 8

93
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } *
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } *
Distance : 8

94
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } paint
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } paint
Distance : 8

95
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } join
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } join
Distance : 8

96
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } test
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } test
Distance : 8

97
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } @
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } @
Distance : 8

98
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } int
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } int
Distance : 8

99
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } false
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } false
Distance : 8

========================================================================


========================================================================
Example Number: 103
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Integer . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Integer})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ return this . Integer ; } checkState
Code	{ return this . Integer ; } checkState
Distance : 13

1
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } class
Code	{ reportMatcher ( Any.ANY ) ; return null ; } class
Distance : 12

2
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } try
Code	{ reportMatcher ( Any.ANY ) ; return null ; } try
Distance : 12

3
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Distance : 12

4
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Distance : 12

5
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } List
Code	{ reportMatcher ( Any.ANY ) ; return null ; } List
Distance : 12

6
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } test
Code	{ reportMatcher ( Any.ANY ) ; return null ; } test
Distance : 12

7
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } @
Code	{ reportMatcher ( Any.ANY ) ; return null ; } @
Distance : 12

8
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } int
Code	{ reportMatcher ( Any.ANY ) ; return null ; } int
Distance : 12

9
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } false
Code	{ reportMatcher ( Any.ANY ) ; return null ; } false
Distance : 12

10
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } +
Code	{ reportMatcher ( Any.ANY ) ; return null ; } +
Distance : 12

11
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } >
Code	{ reportMatcher ( Any.ANY ) ; return null ; } >
Distance : 12

12
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ==
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ==
Distance : 8

13
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertThat
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertThat
Distance : 8

14
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } result
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } result
Distance : 8

15
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } :
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } :
Distance : 8

16
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } boolean
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } boolean
Distance : 8

17
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } m
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } m
Distance : 8

18
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } x
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } x
Distance : 8

19
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } testSame
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } testSame
Distance : 8

20
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } parent
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } parent
Distance : 8

21
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } createIllegalArgumentException
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } createIllegalArgumentException
Distance : 8

22
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } serialised
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } serialised
Distance : 8

23
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getInstance
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getInstance
Distance : 8

24
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fireChangeEvent
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fireChangeEvent
Distance : 8

25
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ArrayList
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ArrayList
Distance : 8

26
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Distance : 12

27
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } invocation
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } invocation
Distance : 8

28
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Distance : 12

29
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Distance : 12

30
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } []
Code	{ reportMatcher ( Any.ANY ) ; return null ; } []
Distance : 12

31
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Distance : 12

32
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Code	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Distance : 12

33
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Code	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Distance : 12

34
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } void
Code	{ reportMatcher ( Any.ANY ) ; return null ; } void
Distance : 12

35
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Distance : 12

36
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } value
Code	{ reportMatcher ( Any.ANY ) ; return null ; } value
Distance : 12

37
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } T
Code	{ reportMatcher ( Any.ANY ) ; return null ; } T
Distance : 12

38
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } null
Code	{ reportMatcher ( Any.ANY ) ; return null ; } null
Distance : 12

39
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Distance : 12

40
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } str
Code	{ reportMatcher ( Any.ANY ) ; return null ; } str
Distance : 12

41
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Code	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Distance : 12

42
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Distance : 12

43
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Code	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Distance : 12

44
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } type
Code	{ reportMatcher ( Any.ANY ) ; return null ; } type
Distance : 12

45
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } *
Code	{ reportMatcher ( Any.ANY ) ; return null ; } *
Distance : 12

46
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Code	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Distance : 12

47
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } join
Code	{ reportMatcher ( Any.ANY ) ; return null ; } join
Distance : 12

48
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } f
Code	{ reportMatcher ( Any.ANY ) ; return null ; } f
Distance : 12

49
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Distance : 12

50
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } array
Code	{ reportMatcher ( Any.ANY ) ; return null ; } array
Distance : 12

51
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Distance : 12

52
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Distance : 12

53
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } true
Code	{ reportMatcher ( Any.ANY ) ; return null ; } true
Distance : 12

54
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Distance : 12

55
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Distance : 12

56
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !
Distance : 12

57
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LINE_JOINER
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LINE_JOINER
Distance : 8

58
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } str
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } str
Distance : 8

59
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } super
Code	{ reportMatcher ( Any.ANY ) ; return null ; } super
Distance : 12

60
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } double
Code	{ reportMatcher ( Any.ANY ) ; return null ; } double
Distance : 12

61
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Code	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Distance : 12

62
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } field
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } field
Distance : 8

63
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } t
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } t
Distance : 8

64
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } name
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } name
Distance : 8

65
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } add
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } add
Distance : 8

66
Tree	{ super ( Integer ) ; reportMatcher ( Any.ANY ) . returnZero () ; } NUMBER_CONSTANT
Code	{ super ( Integer ) ; reportMatcher ( Any.ANY ) . returnZero () ; } NUMBER_CONSTANT
Distance : 10

67
Tree	{ super ( Integer ) ; reportMatcher ( Any.ANY ) . returnZero () ; } STRING_CONSTANT
Code	{ super ( Integer ) ; reportMatcher ( Any.ANY ) . returnZero () ; } STRING_CONSTANT
Distance : 10

68
Tree	{ super ( Integer ) ; reportMatcher ( Any.ANY ) . returnZero () ; } new
Code	{ super ( Integer ) ; reportMatcher ( Any.ANY ) . returnZero () ; } new
Distance : 10

69
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } T
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } T
Distance : 12

70
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } nullNotPermitted
Distance : 12

71
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } []
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } []
Distance : 12

72
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } void
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } void
Distance : 12

73
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ==
Distance : 12

74
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } assertEquals
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } assertEquals
Distance : 12

75
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } !
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } !
Distance : 12

76
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } @
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } @
Distance : 12

77
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } test
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } test
Distance : 12

78
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Override
Distance : 12

79
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } mock
Distance : 12

80
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } [
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } [
Distance : 12

81
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ]
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ]
Distance : 12

82
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } &&
Distance : 12

83
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Distance : 12

84
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Distance : 12

85
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ParamChecks
Distance : 8

86
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } return
Code	{ reportMatcher ( Any.ANY ) ; return null ; } return
Distance : 12

87
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Distance : 12

88
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } List
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } List
Distance : 8

89
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Args
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Args
Distance : 8

90
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fail
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fail
Distance : 8

91
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } try
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } try
Distance : 8

92
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } type
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } type
Distance : 8

93
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } *
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } *
Distance : 8

94
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } paint
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } paint
Distance : 8

95
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } join
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } join
Distance : 8

96
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } test
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } test
Distance : 8

97
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } @
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } @
Distance : 8

98
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } int
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } int
Distance : 8

99
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } false
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } false
Distance : 8

========================================================================


========================================================================
Example Number: 104
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnChar () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Character . class ) ) . returnChar () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnChar}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Character})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnChar}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ return this . Character ; } checkState
Code	{ return this . Character ; } checkState
Distance : 13

1
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } class
Code	{ reportMatcher ( Any.ANY ) ; return null ; } class
Distance : 12

2
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } try
Code	{ reportMatcher ( Any.ANY ) ; return null ; } try
Distance : 12

3
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Distance : 12

4
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Distance : 12

5
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } List
Code	{ reportMatcher ( Any.ANY ) ; return null ; } List
Distance : 12

6
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } test
Code	{ reportMatcher ( Any.ANY ) ; return null ; } test
Distance : 12

7
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } @
Code	{ reportMatcher ( Any.ANY ) ; return null ; } @
Distance : 12

8
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } int
Code	{ reportMatcher ( Any.ANY ) ; return null ; } int
Distance : 12

9
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } false
Code	{ reportMatcher ( Any.ANY ) ; return null ; } false
Distance : 12

10
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } +
Code	{ reportMatcher ( Any.ANY ) ; return null ; } +
Distance : 12

11
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } >
Code	{ reportMatcher ( Any.ANY ) ; return null ; } >
Distance : 12

12
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } ==
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } ==
Distance : 8

13
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } assertThat
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } assertThat
Distance : 8

14
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } result
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } result
Distance : 8

15
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } :
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } :
Distance : 8

16
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } boolean
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } boolean
Distance : 8

17
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } m
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } m
Distance : 8

18
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } x
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } x
Distance : 8

19
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } testSame
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } testSame
Distance : 8

20
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } parent
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } parent
Distance : 8

21
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } createIllegalArgumentException
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } createIllegalArgumentException
Distance : 8

22
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } serialised
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } serialised
Distance : 8

23
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } getInstance
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } getInstance
Distance : 8

24
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } fireChangeEvent
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } fireChangeEvent
Distance : 8

25
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } ArrayList
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } ArrayList
Distance : 8

26
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Distance : 12

27
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } invocation
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } invocation
Distance : 8

28
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Distance : 12

29
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Distance : 12

30
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } []
Code	{ reportMatcher ( Any.ANY ) ; return null ; } []
Distance : 12

31
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Distance : 12

32
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Code	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Distance : 12

33
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Code	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Distance : 12

34
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } void
Code	{ reportMatcher ( Any.ANY ) ; return null ; } void
Distance : 12

35
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Distance : 12

36
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } value
Code	{ reportMatcher ( Any.ANY ) ; return null ; } value
Distance : 12

37
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } T
Code	{ reportMatcher ( Any.ANY ) ; return null ; } T
Distance : 12

38
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } null
Code	{ reportMatcher ( Any.ANY ) ; return null ; } null
Distance : 12

39
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Distance : 12

40
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } str
Code	{ reportMatcher ( Any.ANY ) ; return null ; } str
Distance : 12

41
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Code	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Distance : 12

42
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Distance : 12

43
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Code	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Distance : 12

44
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } type
Code	{ reportMatcher ( Any.ANY ) ; return null ; } type
Distance : 12

45
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } *
Code	{ reportMatcher ( Any.ANY ) ; return null ; } *
Distance : 12

46
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Code	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Distance : 12

47
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } join
Code	{ reportMatcher ( Any.ANY ) ; return null ; } join
Distance : 12

48
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } f
Code	{ reportMatcher ( Any.ANY ) ; return null ; } f
Distance : 12

49
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Distance : 12

50
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } array
Code	{ reportMatcher ( Any.ANY ) ; return null ; } array
Distance : 12

51
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Distance : 12

52
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Distance : 12

53
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } true
Code	{ reportMatcher ( Any.ANY ) ; return null ; } true
Distance : 12

54
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Distance : 12

55
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Distance : 12

56
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !
Distance : 12

57
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } LINE_JOINER
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } LINE_JOINER
Distance : 8

58
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } str
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } str
Distance : 8

59
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } super
Code	{ reportMatcher ( Any.ANY ) ; return null ; } super
Distance : 12

60
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } double
Code	{ reportMatcher ( Any.ANY ) ; return null ; } double
Distance : 12

61
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Code	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Distance : 12

62
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } field
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } field
Distance : 8

63
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } t
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } t
Distance : 8

64
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } name
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } name
Distance : 8

65
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } add
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } add
Distance : 8

66
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) . returnChar () ; } NUMBER_CONSTANT
Code	{ super ( Character ) ; returnChar ( Any.ANY ) . returnChar () ; } NUMBER_CONSTANT
Distance : 10

67
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) . returnChar () ; } STRING_CONSTANT
Code	{ super ( Character ) ; returnChar ( Any.ANY ) . returnChar () ; } STRING_CONSTANT
Distance : 10

68
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) . returnChar () ; } new
Code	{ super ( Character ) ; returnChar ( Any.ANY ) . returnChar () ; } new
Distance : 10

69
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } T
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } T
Distance : 12

70
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } nullNotPermitted
Distance : 12

71
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } []
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } []
Distance : 12

72
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } void
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } void
Distance : 12

73
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ==
Distance : 12

74
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } assertEquals
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } assertEquals
Distance : 12

75
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } !
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } !
Distance : 12

76
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } @
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } @
Distance : 12

77
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } test
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } test
Distance : 12

78
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Override
Distance : 12

79
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } mock
Distance : 12

80
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } [
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } [
Distance : 12

81
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ]
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ]
Distance : 12

82
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } &&
Distance : 12

83
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Distance : 12

84
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Distance : 12

85
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } ParamChecks
Distance : 8

86
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } return
Code	{ reportMatcher ( Any.ANY ) ; return null ; } return
Distance : 12

87
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Distance : 12

88
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } List
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } List
Distance : 8

89
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } Args
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } Args
Distance : 8

90
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } fail
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } fail
Distance : 8

91
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } try
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } try
Distance : 8

92
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } type
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } type
Distance : 8

93
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } *
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } *
Distance : 8

94
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } paint
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } paint
Distance : 8

95
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } join
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } join
Distance : 8

96
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } test
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } test
Distance : 8

97
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } @
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } @
Distance : 8

98
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } int
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } int
Distance : 8

99
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } false
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } false
Distance : 8

========================================================================


========================================================================
Example Number: 105
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Byte . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Byte})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ return this . Byte ; } checkState
Code	{ return this . Byte ; } checkState
Distance : 13

1
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } class
Code	{ reportMatcher ( Any.ANY ) ; return null ; } class
Distance : 12

2
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } try
Code	{ reportMatcher ( Any.ANY ) ; return null ; } try
Distance : 12

3
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Distance : 12

4
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Distance : 12

5
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } List
Code	{ reportMatcher ( Any.ANY ) ; return null ; } List
Distance : 12

6
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } test
Code	{ reportMatcher ( Any.ANY ) ; return null ; } test
Distance : 12

7
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } @
Code	{ reportMatcher ( Any.ANY ) ; return null ; } @
Distance : 12

8
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } int
Code	{ reportMatcher ( Any.ANY ) ; return null ; } int
Distance : 12

9
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } false
Code	{ reportMatcher ( Any.ANY ) ; return null ; } false
Distance : 12

10
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } +
Code	{ reportMatcher ( Any.ANY ) ; return null ; } +
Distance : 12

11
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } >
Code	{ reportMatcher ( Any.ANY ) ; return null ; } >
Distance : 12

12
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ==
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ==
Distance : 8

13
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertThat
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } assertThat
Distance : 8

14
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } result
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } result
Distance : 8

15
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } :
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } :
Distance : 8

16
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } boolean
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } boolean
Distance : 8

17
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } m
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } m
Distance : 8

18
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } x
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } x
Distance : 8

19
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } testSame
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } testSame
Distance : 8

20
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } parent
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } parent
Distance : 8

21
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } createIllegalArgumentException
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } createIllegalArgumentException
Distance : 8

22
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } serialised
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } serialised
Distance : 8

23
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getInstance
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } getInstance
Distance : 8

24
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fireChangeEvent
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fireChangeEvent
Distance : 8

25
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ArrayList
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ArrayList
Distance : 8

26
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Distance : 12

27
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } invocation
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } invocation
Distance : 8

28
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Distance : 12

29
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Distance : 12

30
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } []
Code	{ reportMatcher ( Any.ANY ) ; return null ; } []
Distance : 12

31
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Distance : 12

32
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Code	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Distance : 12

33
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Code	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Distance : 12

34
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } void
Code	{ reportMatcher ( Any.ANY ) ; return null ; } void
Distance : 12

35
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Distance : 12

36
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } value
Code	{ reportMatcher ( Any.ANY ) ; return null ; } value
Distance : 12

37
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } T
Code	{ reportMatcher ( Any.ANY ) ; return null ; } T
Distance : 12

38
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } null
Code	{ reportMatcher ( Any.ANY ) ; return null ; } null
Distance : 12

39
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Distance : 12

40
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } str
Code	{ reportMatcher ( Any.ANY ) ; return null ; } str
Distance : 12

41
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Code	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Distance : 12

42
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Distance : 12

43
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Code	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Distance : 12

44
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } type
Code	{ reportMatcher ( Any.ANY ) ; return null ; } type
Distance : 12

45
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } *
Code	{ reportMatcher ( Any.ANY ) ; return null ; } *
Distance : 12

46
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Code	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Distance : 12

47
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } join
Code	{ reportMatcher ( Any.ANY ) ; return null ; } join
Distance : 12

48
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } f
Code	{ reportMatcher ( Any.ANY ) ; return null ; } f
Distance : 12

49
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Distance : 12

50
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } array
Code	{ reportMatcher ( Any.ANY ) ; return null ; } array
Distance : 12

51
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Distance : 12

52
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Distance : 12

53
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } true
Code	{ reportMatcher ( Any.ANY ) ; return null ; } true
Distance : 12

54
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Distance : 12

55
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Distance : 12

56
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !
Distance : 12

57
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LINE_JOINER
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } LINE_JOINER
Distance : 8

58
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } str
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } str
Distance : 8

59
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } super
Code	{ reportMatcher ( Any.ANY ) ; return null ; } super
Distance : 12

60
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } double
Code	{ reportMatcher ( Any.ANY ) ; return null ; } double
Distance : 12

61
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Code	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Distance : 12

62
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } field
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } field
Distance : 8

63
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } t
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } t
Distance : 8

64
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } name
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } name
Distance : 8

65
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } add
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } add
Distance : 8

66
Tree	{ super ( Byte ) ; reportMatcher ( Any.ANY ) . returnZero () ; } NUMBER_CONSTANT
Code	{ super ( Byte ) ; reportMatcher ( Any.ANY ) . returnZero () ; } NUMBER_CONSTANT
Distance : 10

67
Tree	{ super ( Byte ) ; reportMatcher ( Any.ANY ) . returnZero () ; } STRING_CONSTANT
Code	{ super ( Byte ) ; reportMatcher ( Any.ANY ) . returnZero () ; } STRING_CONSTANT
Distance : 10

68
Tree	{ super ( Byte ) ; reportMatcher ( Any.ANY ) . returnZero () ; } new
Code	{ super ( Byte ) ; reportMatcher ( Any.ANY ) . returnZero () ; } new
Distance : 10

69
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } T
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } T
Distance : 12

70
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } nullNotPermitted
Distance : 12

71
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } []
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } []
Distance : 12

72
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } void
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } void
Distance : 12

73
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ==
Distance : 12

74
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } assertEquals
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } assertEquals
Distance : 12

75
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } !
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } !
Distance : 12

76
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } @
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } @
Distance : 12

77
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } test
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } test
Distance : 12

78
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Override
Distance : 12

79
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } mock
Distance : 12

80
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } [
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } [
Distance : 12

81
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ]
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ]
Distance : 12

82
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } &&
Distance : 12

83
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Distance : 12

84
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Distance : 12

85
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } ParamChecks
Distance : 8

86
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } return
Code	{ reportMatcher ( Any.ANY ) ; return null ; } return
Distance : 12

87
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Distance : 12

88
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } List
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } List
Distance : 8

89
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Args
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } Args
Distance : 8

90
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fail
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } fail
Distance : 8

91
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } try
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } try
Distance : 8

92
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } type
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } type
Distance : 8

93
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } *
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } *
Distance : 8

94
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } paint
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } paint
Distance : 8

95
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } join
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } join
Distance : 8

96
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } test
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } test
Distance : 8

97
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } @
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } @
Distance : 8

98
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } int
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } int
Distance : 8

99
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } false
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } false
Distance : 8

========================================================================


========================================================================
Example Number: 106
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnFalse () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Boolean . class ) ) . returnFalse () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnFalse}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Boolean})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnFalse}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	{ return this . Boolean ; } checkState
Code	{ return this . Boolean ; } checkState
Distance : 13

1
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } class
Code	{ reportMatcher ( Any.ANY ) ; return null ; } class
Distance : 12

2
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } try
Code	{ reportMatcher ( Any.ANY ) ; return null ; } try
Distance : 12

3
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Code	{ reportMatcher ( Any.ANY ) ; return null ; } fail
Distance : 12

4
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Args
Distance : 12

5
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } List
Code	{ reportMatcher ( Any.ANY ) ; return null ; } List
Distance : 12

6
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } test
Code	{ reportMatcher ( Any.ANY ) ; return null ; } test
Distance : 12

7
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } @
Code	{ reportMatcher ( Any.ANY ) ; return null ; } @
Distance : 12

8
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } int
Code	{ reportMatcher ( Any.ANY ) ; return null ; } int
Distance : 12

9
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } false
Code	{ reportMatcher ( Any.ANY ) ; return null ; } false
Distance : 12

10
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } +
Code	{ reportMatcher ( Any.ANY ) ; return null ; } +
Distance : 12

11
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } >
Code	{ reportMatcher ( Any.ANY ) ; return null ; } >
Distance : 12

12
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } ==
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } ==
Distance : 8

13
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } assertThat
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } assertThat
Distance : 8

14
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } result
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } result
Distance : 8

15
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } :
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } :
Distance : 8

16
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } boolean
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } boolean
Distance : 8

17
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } m
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } m
Distance : 8

18
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } x
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } x
Distance : 8

19
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } testSame
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } testSame
Distance : 8

20
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } parent
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } parent
Distance : 8

21
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } createIllegalArgumentException
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } createIllegalArgumentException
Distance : 8

22
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } serialised
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } serialised
Distance : 8

23
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } getInstance
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } getInstance
Distance : 8

24
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } fireChangeEvent
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } fireChangeEvent
Distance : 8

25
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } ArrayList
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } ArrayList
Distance : 8

26
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Object
Distance : 12

27
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } invocation
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } invocation
Distance : 8

28
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mock
Distance : 12

29
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Code	{ reportMatcher ( Any.ANY ) ; return null ; } mode
Distance : 12

30
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } []
Code	{ reportMatcher ( Any.ANY ) ; return null ; } []
Distance : 12

31
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return null ; } nullNotPermitted
Distance : 12

32
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Code	{ reportMatcher ( Any.ANY ) ; return null ; } throw
Distance : 12

33
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Code	{ reportMatcher ( Any.ANY ) ; return null ; } catch
Distance : 12

34
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } void
Code	{ reportMatcher ( Any.ANY ) ; return null ; } void
Distance : 12

35
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ==
Distance : 12

36
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } value
Code	{ reportMatcher ( Any.ANY ) ; return null ; } value
Distance : 12

37
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } T
Code	{ reportMatcher ( Any.ANY ) ; return null ; } T
Distance : 12

38
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } null
Code	{ reportMatcher ( Any.ANY ) ; return null ; } null
Distance : 12

39
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Code	{ reportMatcher ( Any.ANY ) ; return null ; } {}
Distance : 12

40
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } str
Code	{ reportMatcher ( Any.ANY ) ; return null ; } str
Distance : 12

41
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Code	{ reportMatcher ( Any.ANY ) ; return null ; } LINE_JOINER
Distance : 12

42
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Code	{ reportMatcher ( Any.ANY ) ; return null ; } assertThat
Distance : 12

43
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Code	{ reportMatcher ( Any.ANY ) ; return null ; } invocation
Distance : 12

44
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } type
Code	{ reportMatcher ( Any.ANY ) ; return null ; } type
Distance : 12

45
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } *
Code	{ reportMatcher ( Any.ANY ) ; return null ; } *
Distance : 12

46
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Code	{ reportMatcher ( Any.ANY ) ; return null ; } paint
Distance : 12

47
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } join
Code	{ reportMatcher ( Any.ANY ) ; return null ; } join
Distance : 12

48
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } f
Code	{ reportMatcher ( Any.ANY ) ; return null ; } f
Distance : 12

49
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Code	{ reportMatcher ( Any.ANY ) ; return null ; } ParamChecks
Distance : 12

50
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } array
Code	{ reportMatcher ( Any.ANY ) ; return null ; } array
Distance : 12

51
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Code	{ reportMatcher ( Any.ANY ) ; return null ; } <>
Distance : 12

52
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Code	{ reportMatcher ( Any.ANY ) ; return null ; } MathRuntimeException
Distance : 12

53
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } true
Code	{ reportMatcher ( Any.ANY ) ; return null ; } true
Distance : 12

54
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return null ; } &&
Distance : 12

55
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return null ; } Override
Distance : 12

56
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !
Distance : 12

57
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } LINE_JOINER
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } LINE_JOINER
Distance : 8

58
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } str
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } str
Distance : 8

59
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } super
Code	{ reportMatcher ( Any.ANY ) ; return null ; } super
Distance : 12

60
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } double
Code	{ reportMatcher ( Any.ANY ) ; return null ; } double
Distance : 12

61
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Code	{ reportMatcher ( Any.ANY ) ; return null ; } checkState
Distance : 12

62
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } field
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } field
Distance : 8

63
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } t
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } t
Distance : 8

64
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } name
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } name
Distance : 8

65
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } add
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } add
Distance : 8

66
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) . returnFalse () ; } NUMBER_CONSTANT
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) . returnFalse () ; } NUMBER_CONSTANT
Distance : 10

67
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) . returnFalse () ; } STRING_CONSTANT
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) . returnFalse () ; } STRING_CONSTANT
Distance : 10

68
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) . returnFalse () ; } new
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) . returnFalse () ; } new
Distance : 10

69
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } T
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } T
Distance : 12

70
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } nullNotPermitted
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } nullNotPermitted
Distance : 12

71
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } []
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } []
Distance : 12

72
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } void
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } void
Distance : 12

73
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ==
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ==
Distance : 12

74
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } assertEquals
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } assertEquals
Distance : 12

75
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } !
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } !
Distance : 12

76
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } @
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } @
Distance : 12

77
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } test
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } test
Distance : 12

78
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Override
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Override
Distance : 12

79
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } mock
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } mock
Distance : 12

80
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } [
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } [
Distance : 12

81
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ]
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } ]
Distance : 12

82
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } &&
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } &&
Distance : 12

83
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } Preconditions
Distance : 12

84
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Code	{ reportMatcher ( Any.ANY ) ; return null ; } !=
Distance : 12

85
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } ParamChecks
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } ParamChecks
Distance : 8

86
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } return
Code	{ reportMatcher ( Any.ANY ) ; return null ; } return
Distance : 12

87
Tree	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Code	{ reportMatcher ( Any.ANY ) ; return null ; } STRING_CONSTANT
Distance : 12

88
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } List
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } List
Distance : 8

89
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } Args
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } Args
Distance : 8

90
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } fail
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } fail
Distance : 8

91
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } try
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } try
Distance : 8

92
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } type
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } type
Distance : 8

93
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } *
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } *
Distance : 8

94
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } paint
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } paint
Distance : 8

95
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } join
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } join
Distance : 8

96
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } test
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } test
Distance : 8

97
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } @
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } @
Distance : 8

98
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } int
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } int
Distance : 8

99
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } false
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } false
Distance : 8

========================================================================


========================================================================
Example Number: 107
Parent Code is: 
catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
-------------------------------------------------------------------------------
Child code is: 
catch ( AssertionError e ) { error = handleVerifyException ( e ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (12 (331{val=catch}) (214{val=(}) (44 (43 (40{val=org.mockito.exceptions.verification.junit.ArgumentsAreDifferent})) (800{val=e})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=error}) (204{val==}) (32 (802{val=handleVerifyException}) (214{val=(}) (800{val=e}) (215{val=)}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (12 (331{val=catch}) (214{val=(}) (44 (43 (801{val=AssertionError})) (800{val=e})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=error}) (204{val==}) (32 (802{val=handleVerifyException}) (214{val=(}) (800{val=e}) (215{val=)}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/5/parent/src_org_mockito_internal_verification_VerificationOverTimeImpl.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException ( e , e ) ; } checkState
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException ( e , e ) ; } checkState
Distance : 6

1
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } FastMath
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } FastMath
Distance : 2

2
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } invocation
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } invocation
Distance : 4

3
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } false
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } false
Distance : 4

4
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } @
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } @
Distance : 4

5
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException ( e , e ) ; } MathRuntimeException
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException ( e , e ) ; } MathRuntimeException
Distance : 6

6
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } test
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } test
Distance : 4

7
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } nullNotPermitted
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } nullNotPermitted
Distance : 4

8
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } []
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } []
Distance : 4

9
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } !
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } !
Distance : 4

10
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } assertEquals
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } assertEquals
Distance : 4

11
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } expected
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } expected
Distance : 2

12
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } +
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } +
Distance : 4

13
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } >
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } >
Distance : 4

14
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } public
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } public
Distance : 4

15
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } final
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } final
Distance : 4

16
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } this
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } this
Distance : 4

17
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } parent
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } parent
Distance : 4

18
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } testSame
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } testSame
Distance : 4

19
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } x
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } x
Distance : 4

20
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } MathRuntimeException
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } MathRuntimeException
Distance : 4

21
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } m
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } m
Distance : 4

22
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } boolean
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } boolean
Distance : 4

23
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } null
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } null
Distance : 4

24
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } reportCodeChange
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } reportCodeChange
Distance : 2

25
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } List
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } List
Distance : 2

26
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } Args
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } Args
Distance : 2

27
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } Preconditions
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } Preconditions
Distance : 6

28
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e ) ; } <s>
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e ) ; } <s>
Distance : 3

29
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e ) ; } }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e ) ; } }
Distance : 3

30
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e ) ; } <blank>
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e ) ; } <blank>
Distance : 3

31
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e ) ; } ;
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e ) ; } ;
Distance : 3

32
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e ) ; } )
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e ) ; } )
Distance : 3

33
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e ) ; } .
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e ) ; } .
Distance : 3

34
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e ) ; } ,
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e ) ; } ,
Distance : 3

35
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e ) ; } false
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e ) ; } false
Distance : 3

36
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e ) ; } int
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e ) ; } int
Distance : 3

37
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e ) ; } @
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e ) ; } @
Distance : 3

38
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e ) ; } test
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e ) ; } test
Distance : 3

39
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } double
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } double
Distance : 6

40
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } super
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } super
Distance : 6

41
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } !=
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } !=
Distance : 6

42
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException ( e , e ) ; } mode
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException ( e , e ) ; } mode
Distance : 6

43
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , handleVerifyException ( e ) ) ; } =
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , handleVerifyException ( e ) ) ; } =
Distance : 7

44
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException ( e , e ) ; } {}
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException ( e , e ) ; } {}
Distance : 6

45
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } int
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } int
Distance : 4

46
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } createIllegalArgumentException
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } createIllegalArgumentException
Distance : 4

47
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } str
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } str
Distance : 4

48
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } LINE_JOINER
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } LINE_JOINER
Distance : 4

49
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } assertThat
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } assertThat
Distance : 4

50
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } :
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } :
Distance : 4

51
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } mode
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; } mode
Distance : 6

52
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } result
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } result
Distance : 4

53
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } double
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } double
Distance : 4

54
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException () ; } join
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException () ; } join
Distance : 6

55
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException () ; } paint
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException () ; } paint
Distance : 6

56
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException () ; } *
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException () ; } *
Distance : 6

57
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException () ; } type
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException () ; } type
Distance : 6

58
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException () ; } class
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException () ; } class
Distance : 6

59
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } error
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } error
Distance : 4

60
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } <blank>
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } <blank>
Distance : 4

61
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } ;
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } ;
Distance : 4

62
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } )
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } )
Distance : 4

63
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } .
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } .
Distance : 4

64
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException () ; } serialised
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException () ; } serialised
Distance : 6

65
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } ,
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } ,
Distance : 4

66
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } }
Distance : 4

67
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } ()
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } ()
Distance : 4

68
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ) org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } {
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ) org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } {
Distance : 4

69
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } new
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } new
Distance : 4

70
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } STRING_CONSTANT
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } STRING_CONSTANT
Distance : 4

71
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } NUMBER_CONSTANT
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } NUMBER_CONSTANT
Distance : 4

72
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } return
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } return
Distance : 4

73
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } &&
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } &&
Distance : 4

74
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } T
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } T
Distance : 4

75
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } i
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } i
Distance : 4

76
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } =
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } =
Distance : 4

77
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException () ; } getInstance
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException () ; } getInstance
Distance : 6

78
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException () ; } fireChangeEvent
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException () ; } fireChangeEvent
Distance : 6

79
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException () ; } ArrayList
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException () ; } ArrayList
Distance : 6

80
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } super
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } super
Distance : 4

81
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } !=
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } !=
Distance : 4

82
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } compiler
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } compiler
Distance : 4

83
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } String
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } String
Distance : 4

84
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } e
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } e
Distance : 4

85
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } n
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } n
Distance : 4

86
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } throw
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } throw
Distance : 4

87
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } catch
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } catch
Distance : 4

88
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } void
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } void
Distance : 4

89
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } ==
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } ==
Distance : 4

90
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } ]
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } ]
Distance : 4

91
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } [
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } [
Distance : 4

92
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } Preconditions
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } Preconditions
Distance : 4

93
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } -
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } -
Distance : 4

94
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } mode
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } mode
Distance : 4

95
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } true
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } true
Distance : 4

96
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } {}
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } {}
Distance : 4

97
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } <
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } <
Distance : 4

98
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } if
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } if
Distance : 4

99
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } (
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; } (
Distance : 4

========================================================================


========================================================================
Example Number: 108
Parent Code is: 
new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
-------------------------------------------------------------------------------
Child code is: 
new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + safelyGetMockName ( undesired . getMock () ) + STRING_CONSTANT , undesired . getLocation () ) )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (14 (304{val=new}) (43 (801{val=VerificationInOrderFailure})) (214{val=(}) (32 (802{val=join}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (14 (304{val=new}) (43 (801{val=LocationImpl})) (216{val=()})) (234{val=,}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (800{val=undesired}) (235{val=.}) (802{val=getMock}) (216{val=()})) (200{val=+}) (45{val=STRING_CONSTANT})) (234{val=,}) (32 (800{val=undesired}) (235{val=.}) (802{val=getLocation}) (216{val=()})) (215{val=)})) (215{val=)})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (14 (304{val=new}) (43 (801{val=VerificationInOrderFailure})) (214{val=(}) (32 (802{val=join}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (14 (304{val=new}) (43 (801{val=LocationImpl})) (216{val=()})) (234{val=,}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (802{val=safelyGetMockName}) (214{val=(}) (32 (800{val=undesired}) (235{val=.}) (802{val=getMock}) (216{val=()})) (215{val=)})) (200{val=+}) (45{val=STRING_CONSTANT})) (234{val=,}) (32 (800{val=undesired}) (235{val=.}) (802{val=getLocation}) (216{val=()})) (215{val=)})) (215{val=)})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/4/parent/src_org_mockito_exceptions_Reporter.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 10

1
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . getLocation ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . getLocation ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 14

2
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getMock () , undesired . safelyGetMockName () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getMock () , undesired . safelyGetMockName () ) , undesired ) )
Distance : 11

3
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . join ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . join ( STRING_CONSTANT ) , undesired ) )
Distance : 13

4
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . safelyGetMockName ( ConvertToTypedInterface.CONSTANT_WITHOUT_EXPLICIT_TYPE ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . safelyGetMockName ( ConvertToTypedInterface.CONSTANT_WITHOUT_EXPLICIT_TYPE ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 14

5
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . getMock ( join ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . getMock ( join ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 14

6
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . safelyGetMockName ( join ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . safelyGetMockName ( join ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 14

7
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . getLocation ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . getLocation ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

8
Tree	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Distance : 12

9
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Distance : 11

10
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Distance : 13

11
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getMock ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getMock ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Distance : 12

12
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 11

13
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . getMock ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . getMock ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

14
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . getLocation ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . getLocation ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 14

15
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . join ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . join ( STRING_CONSTANT ) , undesired ) )
Distance : 12

16
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT , undesired . safelyGetMockName ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT , undesired . safelyGetMockName ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 10

17
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Distance : 13

18
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( new LocationImpl () . join ( undesired , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( new LocationImpl () . join ( undesired , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 12

19
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . safelyGetMockName ( ConvertToTypedInterface.CONSTANT_WITHOUT_EXPLICIT_TYPE ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . safelyGetMockName ( ConvertToTypedInterface.CONSTANT_WITHOUT_EXPLICIT_TYPE ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 14

20
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . join () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . join () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Distance : 11

21
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 11

22
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . join ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . join ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 11

23
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . getMock ( ConvertToTypedInterface.CONSTANT_WITHOUT_EXPLICIT_TYPE ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . getMock ( ConvertToTypedInterface.CONSTANT_WITHOUT_EXPLICIT_TYPE ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 14

24
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . getMock ( ConvertToTypedInterface.CONSTANT_WITHOUT_EXPLICIT_TYPE ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . getMock ( ConvertToTypedInterface.CONSTANT_WITHOUT_EXPLICIT_TYPE ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 14

25
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . safelyGetMockName ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . safelyGetMockName ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

26
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . join () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . join () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 10

27
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT , undesired . getLocation ( undesired . join () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT , undesired . getLocation ( undesired . join () , undesired . getLocation () ) , undesired ) )
Distance : 12

28
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT , undesired . getLocation ( undesired . safelyGetMockName () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT , undesired . getLocation ( undesired . safelyGetMockName () , undesired . getLocation () ) , undesired ) )
Distance : 12

29
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Distance : 13

30
Tree	new VerificationInOrderFailure ( new VerificationInOrderFailure [] { undesired . join () , STRING_CONSTANT } , undesired . getLocation () )
Code	new VerificationInOrderFailure ( new VerificationInOrderFailure [] { undesired . join () , STRING_CONSTANT } , undesired . getLocation () )
Distance : 16

31
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 15

32
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Distance : 13

33
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT , undesired . join ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT , undesired . join ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 11

34
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Distance : 13

35
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 11

36
Tree	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT , undesired . getLocation ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT , undesired . getLocation ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 12

37
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . safelyGetMockName ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . safelyGetMockName ( STRING_CONSTANT ) , undesired ) )
Distance : 12

38
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . join () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . join () , undesired ) )
Distance : 9

39
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( new VerificationInOrderFailure () . getLocation ( undesired , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( new VerificationInOrderFailure () . getLocation ( undesired , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 12

40
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT , undesired . getMock ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT , undesired . getMock ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Distance : 12

41
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 10

42
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . safelyGetMockName ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . safelyGetMockName ( STRING_CONSTANT ) , undesired ) )
Distance : 13

43
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( new LocationImpl () . getLocation ( undesired , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( new LocationImpl () . getLocation ( undesired , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

44
Tree	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 11

45
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . join () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . join () , undesired ) )
Distance : 10

46
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired . join () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired . join () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Distance : 17

47
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 11

48
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . safelyGetMockName ( join ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . safelyGetMockName ( join ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 14

49
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Distance : 14

50
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getLocation ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getLocation ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 15

51
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . safelyGetMockName ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . safelyGetMockName ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Distance : 10

52
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . getMock ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . getMock ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

53
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . safelyGetMockName () , undesired . getLocation () ) , undesired ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . safelyGetMockName () , undesired . getLocation () ) , undesired ) )
Distance : 12

54
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . join ( undesired . join () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . join ( undesired . join () , undesired . getLocation () ) , undesired ) )
Distance : 11

55
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Distance : 10

56
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . safelyGetMockName ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . safelyGetMockName ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 12

57
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . safelyGetMockName ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . safelyGetMockName ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 14

58
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . getMock ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . getMock ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 14

59
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getLocation ( undesired ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getLocation ( undesired ) , undesired ) )
Distance : 11

60
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 11

61
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . safelyGetMockName () , undesired ) )
Distance : 10

62
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . safelyGetMockName ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . safelyGetMockName ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 14

63
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getMock ( undesired . join () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getMock ( undesired . join () , undesired . getLocation () ) , undesired ) )
Distance : 11

64
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Distance : 16

65
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 11

66
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . join () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . join () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Distance : 14

67
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 16

68
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . getMock ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . getMock ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

69
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . getMock ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . getMock ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 14

70
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . safelyGetMockName ( undesired ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . safelyGetMockName ( undesired ) , undesired ) )
Distance : 13

71
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . safelyGetMockName ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . safelyGetMockName ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 12

72
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . safelyGetMockName ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . safelyGetMockName ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 14

73
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 15

74
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . join () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . join () ) , undesired ) )
Distance : 12

75
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getMock () , undesired . getMock () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getMock () , undesired . getMock () ) , undesired ) )
Distance : 11

76
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Distance : 16

77
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getMock () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getMock () ) , undesired ) )
Distance : 12

78
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getLocation ( undesired ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getLocation ( undesired ) , undesired ) )
Distance : 12

79
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getMock ( undesired . safelyGetMockName () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getMock ( undesired . safelyGetMockName () , undesired . getLocation () ) , undesired ) )
Distance : 11

80
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 9

81
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getLocation ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getLocation ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 15

82
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 9

83
Tree	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( safelyGetMockName ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 10

84
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . join () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . join () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 16

85
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . join () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . join () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Distance : 14

86
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 11

87
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT , undesired . join ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT , undesired . join ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Distance : 12

88
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getLocation ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getLocation ( STRING_CONSTANT ) , undesired ) )
Distance : 11

89
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Distance : 13

90
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getMock () , undesired . join () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getMock () , undesired . join () ) , undesired ) )
Distance : 11

91
Tree	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Distance : 13

92
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Distance : 13

93
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getLocation ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getLocation ( STRING_CONSTANT ) , undesired ) )
Distance : 12

94
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Distance : 13

95
Tree	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( getLocation ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Distance : 12

96
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . getMock ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . getMock ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

97
Tree	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( getMock ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 11

98
Tree	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . join () , undesired . getLocation () ) , undesired ) )
Code	new LocationImpl ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . join () , undesired . getLocation () ) , undesired ) )
Distance : 12

99
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . join ( undesired . safelyGetMockName () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . join ( undesired . safelyGetMockName () , undesired . getLocation () ) , undesired ) )
Distance : 11

========================================================================


========================================================================
Example Number: 109
Parent Code is: 
join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () , scenario )
-------------------------------------------------------------------------------
Child code is: 
join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + safelyGetMockName ( undesired . getMock () ) + STRING_CONSTANT , undesired . getLocation () , scenario )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (32 (802{val=join}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (14 (304{val=new}) (43 (801{val=LocationImpl})) (216{val=()})) (234{val=,}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (800{val=undesired}) (235{val=.}) (802{val=getMock}) (216{val=()})) (200{val=+}) (45{val=STRING_CONSTANT})) (234{val=,}) (32 (800{val=undesired}) (235{val=.}) (802{val=getLocation}) (216{val=()})) (234{val=,}) (800{val=scenario}) (215{val=)})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (32 (802{val=join}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (14 (304{val=new}) (43 (801{val=LocationImpl})) (216{val=()})) (234{val=,}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (802{val=safelyGetMockName}) (214{val=(}) (32 (800{val=undesired}) (235{val=.}) (802{val=getMock}) (216{val=()})) (215{val=)})) (200{val=+}) (45{val=STRING_CONSTANT})) (234{val=,}) (32 (800{val=undesired}) (235{val=.}) (802{val=getLocation}) (216{val=()})) (234{val=,}) (800{val=scenario}) (215{val=)})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/4/parent/src_org_mockito_exceptions_Reporter.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	getLocation ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	getLocation ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 18

1
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . safelyGetMockName () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . safelyGetMockName () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 19

2
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , getMock ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , getMock ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 17

3
Tree	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( scenario ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( scenario ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 22

4
Tree	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , scenario . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , scenario . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 20

5
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getMock ( undesired ) , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getMock ( undesired ) , scenario . getLocation () , STRING_CONSTANT )
Distance : 21

6
Tree	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 19

7
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . safelyGetMockName ( scenario ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . safelyGetMockName ( scenario ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 20

8
Tree	getLocation ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	getLocation ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

9
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , undesired . getLocation () ) , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , undesired . getLocation () ) , super , STRING_CONSTANT )
Distance : 18

10
Tree	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( scenario ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( scenario ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 22

11
Tree	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , scenario . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , scenario . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 20

12
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , scenario . < scenario > getLocation ( undesired ) , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , scenario . < scenario > getLocation ( undesired ) , scenario . getLocation () , STRING_CONSTANT )
Distance : 21

13
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , getMock ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , getMock ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 17

14
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < undesired > getLocation ( undesired ) , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < undesired > getLocation ( undesired ) , scenario . getLocation () , STRING_CONSTANT )
Distance : 21

15
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getMock ( undesired ) , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getMock ( undesired ) , scenario . getLocation () , STRING_CONSTANT )
Distance : 21

16
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , join ( undesired . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , join ( undesired . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 16

17
Tree	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 20

18
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Distance : 17

19
Tree	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , scenario . join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , scenario . join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

20
Tree	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName ( undesired ) , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName ( undesired ) , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

21
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . safelyGetMockName () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . safelyGetMockName () , scenario . getLocation () , STRING_CONSTANT )
Distance : 19

22
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getMock () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getMock () , STRING_CONSTANT )
Distance : 17

23
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , join ( scenario . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , join ( scenario . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 17

24
Tree	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . join ( scenario ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . join ( scenario ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 22

25
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , scenario . < scenario > getLocation ( undesired ) , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , scenario . < scenario > getLocation ( undesired ) , scenario . getLocation () , STRING_CONSTANT )
Distance : 21

26
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < undesired > getLocation ( undesired ) , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < undesired > getLocation ( undesired ) , scenario . getLocation () , STRING_CONSTANT )
Distance : 21

27
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( scenario ) , new LocationImpl () , STRING_CONSTANT , join ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( scenario ) , new LocationImpl () , STRING_CONSTANT , join ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 19

28
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , join ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , join ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 18

29
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join ( undesired ) , new LocationImpl () , STRING_CONSTANT , join ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join ( undesired ) , new LocationImpl () , STRING_CONSTANT , join ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 19

30
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getMock () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getMock () , STRING_CONSTANT )
Distance : 17

31
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . safelyGetMockName () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . safelyGetMockName () , scenario . getLocation () , STRING_CONSTANT )
Distance : 19

32
Tree	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , scenario . getLocation () , STRING_CONSTANT )
Code	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , scenario . getLocation () , STRING_CONSTANT )
Distance : 22

33
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getMock () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getMock () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

34
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( scenario . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( scenario . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 18

35
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , join ( scenario . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , join ( scenario . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 17

36
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , join ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , join ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 18

37
Tree	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName ( undesired ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName ( undesired ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 21

38
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( scenario ) , new LocationImpl () , STRING_CONSTANT , join ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( scenario ) , new LocationImpl () , STRING_CONSTANT , join ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 19

39
Tree	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , scenario . getLocation () , STRING_CONSTANT )
Code	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( scenario ) , scenario . getLocation () , STRING_CONSTANT )
Distance : 22

40
Tree	getMock ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	getMock ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

41
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( undesired ) , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( undesired ) , undesired . getLocation () , STRING_CONSTANT )
Distance : 18

42
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join ( undesired ) , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join ( undesired ) , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 17

43
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( scenario ) , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( scenario ) , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 17

44
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , getLocation ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , getLocation ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 17

45
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . join () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . join () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 16

46
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getMock () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getMock () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

47
Tree	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , scenario . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , scenario . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 16

48
Tree	getMock ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	getMock ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 16

49
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( undesired ) , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , scenario . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( undesired ) , undesired . getLocation () , STRING_CONSTANT )
Distance : 18

50
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > join ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > join ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Distance : 18

51
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( scenario . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( scenario . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 18

52
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , join ( undesired . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , join ( undesired . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 16

53
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . join () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . join () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

54
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( scenario ) , new LocationImpl () , STRING_CONSTANT , undesired . join () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( scenario ) , new LocationImpl () , STRING_CONSTANT , undesired . join () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

55
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( scenario ) , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( scenario ) , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 17

56
Tree	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 20

57
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . join () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . join () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 16

58
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName ( undesired ) , new LocationImpl () , STRING_CONSTANT , join ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName ( undesired ) , new LocationImpl () , STRING_CONSTANT , join ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 19

59
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > safelyGetMockName ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > safelyGetMockName ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Distance : 18

60
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getMock () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getMock () , scenario . getLocation () , STRING_CONSTANT )
Distance : 13

61
Tree	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , scenario . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , scenario . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 16

62
Tree	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName ( scenario ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName ( scenario ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 21

63
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) , STRING_CONSTANT , false , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) , STRING_CONSTANT , false , false , STRING_CONSTANT )
Distance : 22

64
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( undesired . getLocation () , scenario . getLocation () ) , STRING_CONSTANT , CHAR_CONS , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( undesired . getLocation () , scenario . getLocation () ) , STRING_CONSTANT , CHAR_CONS , false , STRING_CONSTANT )
Distance : 23

65
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) , STRING_CONSTANT , super , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) , STRING_CONSTANT , super , super , STRING_CONSTANT )
Distance : 22

66
Tree	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

67
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > join ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > join ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Distance : 18

68
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) , STRING_CONSTANT , false , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) , STRING_CONSTANT , false , false , STRING_CONSTANT )
Distance : 22

69
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) , STRING_CONSTANT , false , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) , STRING_CONSTANT , false , CHAR_CONS , STRING_CONSTANT )
Distance : 22

70
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , super , final , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , super , final , STRING_CONSTANT )
Distance : 22

71
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( undesired ) , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( undesired ) , undesired . getLocation () , STRING_CONSTANT )
Distance : 18

72
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( undesired . getLocation () , scenario . getLocation () ) , STRING_CONSTANT , CHAR_CONS , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( undesired . getLocation () , scenario . getLocation () ) , STRING_CONSTANT , CHAR_CONS , CHAR_CONS , STRING_CONSTANT )
Distance : 23

73
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , scenario . getLocation () ) , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , scenario . getLocation () ) , super , STRING_CONSTANT )
Distance : 17

74
Tree	getLocation ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	getLocation ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 19

75
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , super , final , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , super , final , STRING_CONSTANT )
Distance : 22

76
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , class , class , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , class , class , STRING_CONSTANT )
Distance : 22

77
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( undesired . getLocation () , scenario . getLocation () ) , STRING_CONSTANT , CHAR_CONS , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( undesired . getLocation () , scenario . getLocation () ) , STRING_CONSTANT , CHAR_CONS , CHAR_CONS , STRING_CONSTANT )
Distance : 23

78
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( scenario ) , new LocationImpl () , STRING_CONSTANT , undesired . join () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( scenario ) , new LocationImpl () , STRING_CONSTANT , undesired . join () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

79
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 19

80
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( scenario . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , super , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( scenario . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , super , super , STRING_CONSTANT )
Distance : 22

81
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) , STRING_CONSTANT , false , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( undesired . getMock () , undesired . getLocation () ) , STRING_CONSTANT , false , CHAR_CONS , STRING_CONSTANT )
Distance : 22

82
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , class , class , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , class , class , STRING_CONSTANT )
Distance : 22

83
Tree	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , scenario . safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , scenario . safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

84
Tree	getLocation ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	getLocation ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , scenario . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 19

85
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( undesired . getLocation () , scenario . getLocation () ) , STRING_CONSTANT , false , class , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( undesired . getLocation () , scenario . getLocation () ) , STRING_CONSTANT , false , class , STRING_CONSTANT )
Distance : 23

86
Tree	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 16

87
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , scenario . getLocation () ) , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , scenario . getLocation () ) , super , STRING_CONSTANT )
Distance : 17

88
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName ( undesired ) , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName ( undesired ) , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 17

89
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > safelyGetMockName ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > safelyGetMockName ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Distance : 18

90
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( undesired ) , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getLocation ( undesired ) , undesired . getLocation () , STRING_CONSTANT )
Distance : 18

91
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , safelyGetMockName ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , safelyGetMockName ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 15

92
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , extends , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( undesired . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , false , extends , STRING_CONSTANT )
Distance : 22

93
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( scenario . getLocation () , scenario . getLocation () ) , false , STRING_CONSTANT )
Distance : 21

94
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . join () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . join () , undesired . getLocation () , STRING_CONSTANT )
Distance : 17

95
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( scenario . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 19

96
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getMock ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , undesired . < scenario > getMock ( scenario ) , undesired . getLocation () , STRING_CONSTANT )
Distance : 18

97
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( scenario . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , super , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( scenario . getLocation () , undesired . getLocation () ) , STRING_CONSTANT , super , super , STRING_CONSTANT )
Distance : 22

98
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( undesired . getLocation () , scenario . getLocation () ) , STRING_CONSTANT , false , class , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( undesired . getLocation () , scenario . getLocation () ) , STRING_CONSTANT , false , class , STRING_CONSTANT )
Distance : 23

99
Tree	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	safelyGetMockName ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 16

========================================================================


========================================================================
Example Number: 110
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Code	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Distance : 9

1
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; join
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; join
Distance : 3

2
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; boolean
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; boolean
Distance : 3

3
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; <
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; <
Distance : 3

4
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; +
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; +
Distance : 3

5
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; return
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; return
Distance : 3

6
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; NUMBER_CONSTANT
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; NUMBER_CONSTANT
Distance : 3

7
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; !=
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; !=
Distance : 3

8
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; this
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; this
Distance : 3

9
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; n
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; n
Distance : 3

10
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; e
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; e
Distance : 3

11
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; null
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; null
Distance : 3

12
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; compiler
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; compiler
Distance : 3

13
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; m
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; m
Distance : 3

14
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; String
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; String
Distance : 3

15
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; final
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; final
Distance : 3

16
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; catch
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; catch
Distance : 3

17
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; super
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; super
Distance : 3

18
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; false
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; false
Distance : 3

19
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

20
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; result
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; result
Distance : 3

21
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; List
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; List
Distance : 3

22
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; Args
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; Args
Distance : 3

23
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; array
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; array
Distance : 3

24
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; <>
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; <>
Distance : 3

25
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; int
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; int
Distance : 3

26
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; try
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; try
Distance : 3

27
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; :
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; :
Distance : 3

28
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; mode
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; mode
Distance : 3

29
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; paint
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; paint
Distance : 3

30
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; true
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; true
Distance : 3

31
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; value
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; value
Distance : 3

32
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; i
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; i
Distance : 3

33
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; fail
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; fail
Distance : 3

34
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; throw
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; throw
Distance : 3

35
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; serialised
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; serialised
Distance : 3

36
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; getInstance
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; getInstance
Distance : 3

37
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; final
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; final
Distance : 5

38
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; >
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; >
Distance : 5

39
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; )
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; )
Distance : 5

40
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ArrayList
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ArrayList
Distance : 3

41
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; fireChangeEvent
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; fireChangeEvent
Distance : 3

42
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; MathRuntimeException
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; MathRuntimeException
Distance : 3

43
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; return
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; return
Distance : 5

44
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; {}
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; {}
Distance : 3

45
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; Object
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; Object
Distance : 3

46
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ParamChecks
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ParamChecks
Distance : 3

47
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; f
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; f
Distance : 3

48
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; Override
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; Override
Distance : 3

49
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; mock
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; mock
Distance : 3

50
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; [
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; [
Distance : 3

51
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; class
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; class
Distance : 3

52
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; this
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; this
Distance : 5

53
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; public
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; public
Distance : 5

54
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; if
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; if
Distance : 5

55
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; *
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; *
Distance : 3

56
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; type
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; type
Distance : 3

57
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; nullNotPermitted
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; nullNotPermitted
Distance : 3

58
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; []
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; []
Distance : 3

59
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; void
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; void
Distance : 3

60
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; String
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; String
Distance : 5

61
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; test
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; test
Distance : 5

62
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; assertEquals
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; assertEquals
Distance : 5

63
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; @
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; @
Distance : 5

64
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; []
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; []
Distance : 5

65
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; ==
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; ==
Distance : 5

66
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; nullNotPermitted
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; nullNotPermitted
Distance : 5

67
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; !
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; !
Distance : 5

68
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; null
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; null
Distance : 5

69
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ==
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ==
Distance : 3

70
Tree	return NUMBER_CONSTANT / iZone ;
Code	return NUMBER_CONSTANT / iZone ;
Distance : 10

71
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ]
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ]
Distance : 3

72
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

73
Tree	return iZone != coefficients.length ;
Code	return iZone != coefficients.length ;
Distance : 9

74
Tree	return iZone != offsetFormatter ;
Code	return iZone != offsetFormatter ;
Distance : 9

75
Tree	return iZone != PRIMITIVE_OR_WRAPPER_DEFAULT_VALUES ;
Code	return iZone != PRIMITIVE_OR_WRAPPER_DEFAULT_VALUES ;
Distance : 9

76
Tree	return iZone != TimeUnit.MILLISECONDS ;
Code	return iZone != TimeUnit.MILLISECONDS ;
Distance : 9

77
Tree	return iZone != exprResultNode ;
Code	return iZone != exprResultNode ;
Distance : 9

78
Tree	return iZone != MidpointFieldStepInterpolator ;
Code	return iZone != MidpointFieldStepInterpolator ;
Distance : 9

79
Tree	return iZone != mRule ;
Code	return iZone != mRule ;
Distance : 9

80
Tree	return iZone != EvalMode.NORMAL ;
Code	return iZone != EvalMode.NORMAL ;
Distance : 9

81
Tree	return iZone != Locale.US ;
Code	return iZone != Locale.US ;
Distance : 9

82
Tree	return iZone != INSTRUMENTATION ;
Code	return iZone != INSTRUMENTATION ;
Distance : 9

83
Tree	return iZone != MatchedNodeInfo ;
Code	return iZone != MatchedNodeInfo ;
Distance : 9

84
Tree	return iZone != hyperplaneThickness ;
Code	return iZone != hyperplaneThickness ;
Distance : 9

85
Tree	return iZone != invocationListener ;
Code	return iZone != invocationListener ;
Distance : 9

86
Tree	return iZone != YieldFinder ;
Code	return iZone != YieldFinder ;
Distance : 9

87
Tree	return iZone != num1 ;
Code	return iZone != num1 ;
Distance : 9

88
Tree	return iZone != TracerMode.ALL ;
Code	return iZone != TracerMode.ALL ;
Distance : 9

89
Tree	return iZone != bundler ;
Code	return iZone != bundler ;
Distance : 9

90
Tree	return iZone != LanguageMode.ECMASCRIPT_2016 ;
Code	return iZone != LanguageMode.ECMASCRIPT_2016 ;
Distance : 9

91
Tree	return iZone != StandardBasicTypes.LONG ;
Code	return iZone != StandardBasicTypes.LONG ;
Distance : 9

92
Tree	return iZone != Node.FLAG_LOCAL_RESULTS ;
Code	return iZone != Node.FLAG_LOCAL_RESULTS ;
Distance : 9

93
Tree	return iZone != entry.map ;
Code	return iZone != entry.map ;
Distance : 9

94
Tree	return iZone != iChronology.MILLIS_PER_DAY ;
Code	return iZone != iChronology.MILLIS_PER_DAY ;
Distance : 9

95
Tree	return iZone != MultiBackgroundInitializer.MultiBackgroundInitializerResults ;
Code	return iZone != MultiBackgroundInitializer.MultiBackgroundInitializerResults ;
Distance : 9

96
Tree	return iZone != ExceptionFactory ;
Code	return iZone != ExceptionFactory ;
Distance : 9

97
Tree	return iZone != GillFieldIntegrator ;
Code	return iZone != GillFieldIntegrator ;
Distance : 9

98
Tree	return iZone != createCompilerOptions ;
Code	return iZone != createCompilerOptions ;
Distance : 9

99
Tree	return iZone != StandardBasicTypes.STRING ;
Code	return iZone != StandardBasicTypes.STRING ;
Distance : 9

========================================================================


========================================================================
Example Number: 111
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Code	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Distance : 9

1
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; join
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; join
Distance : 3

2
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; boolean
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; boolean
Distance : 3

3
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; <
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; <
Distance : 3

4
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; +
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; +
Distance : 3

5
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; return
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; return
Distance : 3

6
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; NUMBER_CONSTANT
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; NUMBER_CONSTANT
Distance : 3

7
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; !=
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; !=
Distance : 3

8
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; this
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; this
Distance : 3

9
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; n
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; n
Distance : 3

10
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; e
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; e
Distance : 3

11
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; null
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; null
Distance : 3

12
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; compiler
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; compiler
Distance : 3

13
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; m
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; m
Distance : 3

14
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; String
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; String
Distance : 3

15
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; final
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; final
Distance : 3

16
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; catch
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; catch
Distance : 3

17
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; super
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; super
Distance : 3

18
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; false
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; false
Distance : 3

19
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

20
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; result
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; result
Distance : 3

21
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; List
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; List
Distance : 3

22
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; Args
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; Args
Distance : 3

23
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; array
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; array
Distance : 3

24
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; <>
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; <>
Distance : 3

25
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; int
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; int
Distance : 3

26
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; try
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; try
Distance : 3

27
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; :
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; :
Distance : 3

28
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; mode
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; mode
Distance : 3

29
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; paint
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; paint
Distance : 3

30
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; true
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; true
Distance : 3

31
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; value
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; value
Distance : 3

32
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; i
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; i
Distance : 3

33
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; fail
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; fail
Distance : 3

34
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; throw
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; throw
Distance : 3

35
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; serialised
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; serialised
Distance : 3

36
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; getInstance
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; getInstance
Distance : 3

37
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; final
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; final
Distance : 5

38
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; >
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; >
Distance : 5

39
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; )
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; )
Distance : 5

40
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ArrayList
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ArrayList
Distance : 3

41
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; fireChangeEvent
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; fireChangeEvent
Distance : 3

42
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; MathRuntimeException
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; MathRuntimeException
Distance : 3

43
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; return
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; return
Distance : 5

44
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; {}
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; {}
Distance : 3

45
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; Object
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; Object
Distance : 3

46
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ParamChecks
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ParamChecks
Distance : 3

47
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; f
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; f
Distance : 3

48
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; Override
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; Override
Distance : 3

49
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; mock
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; mock
Distance : 3

50
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; [
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; [
Distance : 3

51
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; class
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; class
Distance : 3

52
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; this
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; this
Distance : 5

53
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; public
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; public
Distance : 5

54
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; if
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; if
Distance : 5

55
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; *
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; *
Distance : 3

56
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; type
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; type
Distance : 3

57
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; nullNotPermitted
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; nullNotPermitted
Distance : 3

58
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; []
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; []
Distance : 3

59
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; void
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; void
Distance : 3

60
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; String
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; String
Distance : 5

61
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; test
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; test
Distance : 5

62
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; assertEquals
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; assertEquals
Distance : 5

63
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; @
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; @
Distance : 5

64
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; []
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; []
Distance : 5

65
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; ==
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; ==
Distance : 5

66
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; nullNotPermitted
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; nullNotPermitted
Distance : 5

67
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; !
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; !
Distance : 5

68
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; null
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; null
Distance : 5

69
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ==
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ==
Distance : 3

70
Tree	return NUMBER_CONSTANT / iZone ;
Code	return NUMBER_CONSTANT / iZone ;
Distance : 10

71
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ]
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ]
Distance : 3

72
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

73
Tree	return iZone != coefficients.length ;
Code	return iZone != coefficients.length ;
Distance : 9

74
Tree	return iZone != offsetFormatter ;
Code	return iZone != offsetFormatter ;
Distance : 9

75
Tree	return iZone != PRIMITIVE_OR_WRAPPER_DEFAULT_VALUES ;
Code	return iZone != PRIMITIVE_OR_WRAPPER_DEFAULT_VALUES ;
Distance : 9

76
Tree	return iZone != TimeUnit.MILLISECONDS ;
Code	return iZone != TimeUnit.MILLISECONDS ;
Distance : 9

77
Tree	return iZone != exprResultNode ;
Code	return iZone != exprResultNode ;
Distance : 9

78
Tree	return iZone != MidpointFieldStepInterpolator ;
Code	return iZone != MidpointFieldStepInterpolator ;
Distance : 9

79
Tree	return iZone != mRule ;
Code	return iZone != mRule ;
Distance : 9

80
Tree	return iZone != EvalMode.NORMAL ;
Code	return iZone != EvalMode.NORMAL ;
Distance : 9

81
Tree	return iZone != Locale.US ;
Code	return iZone != Locale.US ;
Distance : 9

82
Tree	return iZone != INSTRUMENTATION ;
Code	return iZone != INSTRUMENTATION ;
Distance : 9

83
Tree	return iZone != MatchedNodeInfo ;
Code	return iZone != MatchedNodeInfo ;
Distance : 9

84
Tree	return iZone != hyperplaneThickness ;
Code	return iZone != hyperplaneThickness ;
Distance : 9

85
Tree	return iZone != invocationListener ;
Code	return iZone != invocationListener ;
Distance : 9

86
Tree	return iZone != YieldFinder ;
Code	return iZone != YieldFinder ;
Distance : 9

87
Tree	return iZone != num1 ;
Code	return iZone != num1 ;
Distance : 9

88
Tree	return iZone != TracerMode.ALL ;
Code	return iZone != TracerMode.ALL ;
Distance : 9

89
Tree	return iZone != bundler ;
Code	return iZone != bundler ;
Distance : 9

90
Tree	return iZone != LanguageMode.ECMASCRIPT_2016 ;
Code	return iZone != LanguageMode.ECMASCRIPT_2016 ;
Distance : 9

91
Tree	return iZone != StandardBasicTypes.LONG ;
Code	return iZone != StandardBasicTypes.LONG ;
Distance : 9

92
Tree	return iZone != Node.FLAG_LOCAL_RESULTS ;
Code	return iZone != Node.FLAG_LOCAL_RESULTS ;
Distance : 9

93
Tree	return iZone != entry.map ;
Code	return iZone != entry.map ;
Distance : 9

94
Tree	return iZone != iChronology.MILLIS_PER_DAY ;
Code	return iZone != iChronology.MILLIS_PER_DAY ;
Distance : 9

95
Tree	return iZone != MultiBackgroundInitializer.MultiBackgroundInitializerResults ;
Code	return iZone != MultiBackgroundInitializer.MultiBackgroundInitializerResults ;
Distance : 9

96
Tree	return iZone != ExceptionFactory ;
Code	return iZone != ExceptionFactory ;
Distance : 9

97
Tree	return iZone != GillFieldIntegrator ;
Code	return iZone != GillFieldIntegrator ;
Distance : 9

98
Tree	return iZone != createCompilerOptions ;
Code	return iZone != createCompilerOptions ;
Distance : 9

99
Tree	return iZone != StandardBasicTypes.STRING ;
Code	return iZone != StandardBasicTypes.STRING ;
Distance : 9

========================================================================


========================================================================
Example Number: 112
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Code	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Distance : 9

1
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; join
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; join
Distance : 3

2
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; boolean
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; boolean
Distance : 3

3
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; <
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; <
Distance : 3

4
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; +
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; +
Distance : 3

5
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; return
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; return
Distance : 3

6
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; NUMBER_CONSTANT
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; NUMBER_CONSTANT
Distance : 3

7
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; !=
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; !=
Distance : 3

8
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; this
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; this
Distance : 3

9
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; n
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; n
Distance : 3

10
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; e
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; e
Distance : 3

11
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; null
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; null
Distance : 3

12
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; compiler
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; compiler
Distance : 3

13
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; m
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; m
Distance : 3

14
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; String
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; String
Distance : 3

15
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; final
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; final
Distance : 3

16
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; catch
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; catch
Distance : 3

17
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; super
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; super
Distance : 3

18
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; false
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; false
Distance : 3

19
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

20
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; result
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; result
Distance : 3

21
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; List
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; List
Distance : 3

22
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; Args
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; Args
Distance : 3

23
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; array
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; array
Distance : 3

24
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; <>
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; <>
Distance : 3

25
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; int
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; int
Distance : 3

26
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; try
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; try
Distance : 3

27
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; :
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; :
Distance : 3

28
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; mode
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; mode
Distance : 3

29
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; paint
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; paint
Distance : 3

30
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; true
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; true
Distance : 3

31
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; value
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; value
Distance : 3

32
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; i
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; i
Distance : 3

33
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; fail
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; fail
Distance : 3

34
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; throw
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; throw
Distance : 3

35
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; serialised
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; serialised
Distance : 3

36
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; getInstance
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; getInstance
Distance : 3

37
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; final
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; final
Distance : 5

38
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; >
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; >
Distance : 5

39
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; )
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; )
Distance : 5

40
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ArrayList
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ArrayList
Distance : 3

41
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; fireChangeEvent
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; fireChangeEvent
Distance : 3

42
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; MathRuntimeException
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; MathRuntimeException
Distance : 3

43
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; return
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; return
Distance : 5

44
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; {}
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; {}
Distance : 3

45
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; Object
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; Object
Distance : 3

46
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ParamChecks
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ParamChecks
Distance : 3

47
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; f
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; f
Distance : 3

48
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; Override
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; Override
Distance : 3

49
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; mock
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; mock
Distance : 3

50
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; [
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; [
Distance : 3

51
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; class
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; class
Distance : 3

52
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; this
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; this
Distance : 5

53
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; public
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; public
Distance : 5

54
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; if
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; if
Distance : 5

55
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; *
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; *
Distance : 3

56
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; type
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; type
Distance : 3

57
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; nullNotPermitted
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; nullNotPermitted
Distance : 3

58
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; []
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; []
Distance : 3

59
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; void
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; void
Distance : 3

60
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; String
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; String
Distance : 5

61
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; test
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; test
Distance : 5

62
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; assertEquals
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; assertEquals
Distance : 5

63
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; @
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; @
Distance : 5

64
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; []
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; []
Distance : 5

65
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; ==
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; ==
Distance : 5

66
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; nullNotPermitted
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; nullNotPermitted
Distance : 5

67
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; !
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; !
Distance : 5

68
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; null
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; null
Distance : 5

69
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ==
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ==
Distance : 3

70
Tree	return NUMBER_CONSTANT / iZone ;
Code	return NUMBER_CONSTANT / iZone ;
Distance : 10

71
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ]
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ]
Distance : 3

72
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

73
Tree	return iZone != coefficients.length ;
Code	return iZone != coefficients.length ;
Distance : 9

74
Tree	return iZone != offsetFormatter ;
Code	return iZone != offsetFormatter ;
Distance : 9

75
Tree	return iZone != PRIMITIVE_OR_WRAPPER_DEFAULT_VALUES ;
Code	return iZone != PRIMITIVE_OR_WRAPPER_DEFAULT_VALUES ;
Distance : 9

76
Tree	return iZone != TimeUnit.MILLISECONDS ;
Code	return iZone != TimeUnit.MILLISECONDS ;
Distance : 9

77
Tree	return iZone != exprResultNode ;
Code	return iZone != exprResultNode ;
Distance : 9

78
Tree	return iZone != MidpointFieldStepInterpolator ;
Code	return iZone != MidpointFieldStepInterpolator ;
Distance : 9

79
Tree	return iZone != mRule ;
Code	return iZone != mRule ;
Distance : 9

80
Tree	return iZone != EvalMode.NORMAL ;
Code	return iZone != EvalMode.NORMAL ;
Distance : 9

81
Tree	return iZone != Locale.US ;
Code	return iZone != Locale.US ;
Distance : 9

82
Tree	return iZone != INSTRUMENTATION ;
Code	return iZone != INSTRUMENTATION ;
Distance : 9

83
Tree	return iZone != MatchedNodeInfo ;
Code	return iZone != MatchedNodeInfo ;
Distance : 9

84
Tree	return iZone != hyperplaneThickness ;
Code	return iZone != hyperplaneThickness ;
Distance : 9

85
Tree	return iZone != invocationListener ;
Code	return iZone != invocationListener ;
Distance : 9

86
Tree	return iZone != YieldFinder ;
Code	return iZone != YieldFinder ;
Distance : 9

87
Tree	return iZone != num1 ;
Code	return iZone != num1 ;
Distance : 9

88
Tree	return iZone != TracerMode.ALL ;
Code	return iZone != TracerMode.ALL ;
Distance : 9

89
Tree	return iZone != bundler ;
Code	return iZone != bundler ;
Distance : 9

90
Tree	return iZone != LanguageMode.ECMASCRIPT_2016 ;
Code	return iZone != LanguageMode.ECMASCRIPT_2016 ;
Distance : 9

91
Tree	return iZone != StandardBasicTypes.LONG ;
Code	return iZone != StandardBasicTypes.LONG ;
Distance : 9

92
Tree	return iZone != Node.FLAG_LOCAL_RESULTS ;
Code	return iZone != Node.FLAG_LOCAL_RESULTS ;
Distance : 9

93
Tree	return iZone != entry.map ;
Code	return iZone != entry.map ;
Distance : 9

94
Tree	return iZone != iChronology.MILLIS_PER_DAY ;
Code	return iZone != iChronology.MILLIS_PER_DAY ;
Distance : 9

95
Tree	return iZone != MultiBackgroundInitializer.MultiBackgroundInitializerResults ;
Code	return iZone != MultiBackgroundInitializer.MultiBackgroundInitializerResults ;
Distance : 9

96
Tree	return iZone != ExceptionFactory ;
Code	return iZone != ExceptionFactory ;
Distance : 9

97
Tree	return iZone != GillFieldIntegrator ;
Code	return iZone != GillFieldIntegrator ;
Distance : 9

98
Tree	return iZone != createCompilerOptions ;
Code	return iZone != createCompilerOptions ;
Distance : 9

99
Tree	return iZone != StandardBasicTypes.STRING ;
Code	return iZone != StandardBasicTypes.STRING ;
Distance : 9

========================================================================


========================================================================
Example Number: 113
Parent Code is: 
long result = iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
long result = iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=long}) (59 (800{val=result}) (204{val==}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=long}) (59 (800{val=result}) (204{val==}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	byte result = iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Code	byte result = iZone . convertLocalToUTC ( convertLocalToUTC ) ;
Distance : 6

1
Tree	private long localInstant = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	private long localInstant = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

2
Tree	byte result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	byte result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

3
Tree	int result = localInstant . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Code	int result = localInstant . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Distance : 6

4
Tree	double result = convertLocalToUTC ( localInstant , localInstant , iZone , iZone , null ) ;
Code	double result = convertLocalToUTC ( localInstant , localInstant , iZone , iZone , null ) ;
Distance : 9

5
Tree	double result = iZone . localInstant ( iZone ) ;
Code	double result = iZone . localInstant ( iZone ) ;
Distance : 7

6
Tree	byte result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , instant ) ;
Code	byte result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , instant ) ;
Distance : 4

7
Tree	double result = iZone . convertLocalToUTC ( iZone , localInstant ) ;
Code	double result = iZone . convertLocalToUTC ( iZone , localInstant ) ;
Distance : 5

8
Tree	long result = instant . convertLocalToUTC ( localInstant , result ) ;
Code	long result = instant . convertLocalToUTC ( localInstant , result ) ;
Distance : 4

9
Tree	protected byte iZone = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	protected byte iZone = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 5

10
Tree	boolean result = iZone . convertLocalToUTC ( localInstant , instant ) ;
Code	boolean result = iZone . convertLocalToUTC ( localInstant , instant ) ;
Distance : 3

11
Tree	final double result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	final double result = localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 5

12
Tree	char result = iZone . convertLocalToUTC ( iZone , false ) ;
Code	char result = iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 4

13
Tree	int result = iZone . convertLocalToUTC ( this , iZone ) ;
Code	int result = iZone . convertLocalToUTC ( this , iZone ) ;
Distance : 5

14
Tree	final boolean result = instant . convertLocalToUTC ( localInstant , false ) ;
Code	final boolean result = instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 5

15
Tree	public long result = result . convertLocalToUTC ( localInstant , false ) ;
Code	public long result = result . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

16
Tree	float result = iZone . convertLocalToUTC ( this , iZone , NUMBER_CONSTANT ) ;
Code	float result = iZone . convertLocalToUTC ( this , iZone , NUMBER_CONSTANT ) ;
Distance : 4

17
Tree	protected long localInstant = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	protected long localInstant = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

18
Tree	double result = localInstant . convertLocalToUTC ( this , localInstant , NUMBER_CONSTANT ) ;
Code	double result = localInstant . convertLocalToUTC ( this , localInstant , NUMBER_CONSTANT ) ;
Distance : 5

19
Tree	double instant = iZone ;
Code	double instant = iZone ;
Distance : 11

20
Tree	boolean result = iZone . convertLocalToUTC ( instant ) ;
Code	boolean result = iZone . convertLocalToUTC ( instant ) ;
Distance : 5

21
Tree	float result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , result ) ;
Code	float result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , result ) ;
Distance : 5

22
Tree	public long result = iZone . convertLocalToUTC ( result , false ) ;
Code	public long result = iZone . convertLocalToUTC ( result , false ) ;
Distance : 4

23
Tree	abstract boolean instant = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	abstract boolean instant = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 5

24
Tree	void result = instant . convertLocalToUTC ( localInstant , false ) ;
Code	void result = instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

25
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , result , iZone . convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , result , iZone . convertLocalToUTC () ) ;
Distance : 7

26
Tree	abstract byte iZone = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	abstract byte iZone = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 5

27
Tree	final int result = iZone . convertLocalToUTC ( iZone , false ) ;
Code	final int result = iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 5

28
Tree	long result = result . convertLocalToUTC ( instant , false ) ;
Code	long result = result . convertLocalToUTC ( instant , false ) ;
Distance : 4

29
Tree	abstract long localInstant = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	abstract long localInstant = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

30
Tree	private byte iZone = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	private byte iZone = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 5

31
Tree	byte result = iZone . convertLocalToUTC ( this , iZone , NUMBER_CONSTANT ) ;
Code	byte result = iZone . convertLocalToUTC ( this , iZone , NUMBER_CONSTANT ) ;
Distance : 4

32
Tree	float result = localInstant . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Code	float result = localInstant . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Distance : 6

33
Tree	byte result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , result ) ;
Code	byte result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , result ) ;
Distance : 5

34
Tree	public void result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	public void result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

35
Tree	float result = iZone . convertLocalToUTC ( iZone ) ;
Code	float result = iZone . convertLocalToUTC ( iZone ) ;
Distance : 6

36
Tree	public char result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	public char result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

37
Tree	double result = iZone . convertLocalToUTC ( localInstant , result ) ;
Code	double result = iZone . convertLocalToUTC ( localInstant , result ) ;
Distance : 4

38
Tree	long result = localInstant . convertLocalToUTC ( localInstant . convertLocalToUTC () , NUMBER_CONSTANT ) ;
Code	long result = localInstant . convertLocalToUTC ( localInstant . convertLocalToUTC () , NUMBER_CONSTANT ) ;
Distance : 5

39
Tree	char result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , iZone ) ;
Code	char result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

40
Tree	protected int iZone = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	protected int iZone = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 5

41
Tree	long result = result . convertLocalToUTC ( this , instant ) ;
Code	long result = result . convertLocalToUTC ( this , instant ) ;
Distance : 4

42
Tree	int result = iZone . iZone ( localInstant ) ;
Code	int result = iZone . iZone ( localInstant ) ;
Distance : 6

43
Tree	int result = iZone . convertLocalToUTC ( this , instant , NUMBER_CONSTANT ) ;
Code	int result = iZone . convertLocalToUTC ( this , instant , NUMBER_CONSTANT ) ;
Distance : 4

44
Tree	boolean result = convertLocalToUTC ( iZone , localInstant , false ) ;
Code	boolean result = convertLocalToUTC ( iZone , localInstant , false ) ;
Distance : 6

45
Tree	abstract boolean result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	abstract boolean result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

46
Tree	byte result = localInstant . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Code	byte result = localInstant . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Distance : 6

47
Tree	int result = convertLocalToUTC ( localInstant , localInstant , false ) ;
Code	int result = convertLocalToUTC ( localInstant , localInstant , false ) ;
Distance : 5

48
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , createCompilerOptions ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , createCompilerOptions ) ;
Distance : 5

49
Tree	protected long iZone = localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	protected long iZone = localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 5

50
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , DiagnosticGroups.MISSING_OVERRIDE ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , DiagnosticGroups.MISSING_OVERRIDE ) ;
Distance : 5

51
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , FeatureSet.ES3 ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , FeatureSet.ES3 ) ;
Distance : 5

52
Tree	long result = convertLocalToUTC ( localInstant , localInstant , localInstant , iZone , return; ) ;
Code	long result = convertLocalToUTC ( localInstant , localInstant , localInstant , iZone , return; ) ;
Distance : 8

53
Tree	byte result = iZone . convertLocalToUTC ( iZone ) ;
Code	byte result = iZone . convertLocalToUTC ( iZone ) ;
Distance : 6

54
Tree	abstract boolean iZone = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	abstract boolean iZone = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 5

55
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , PropAccess.STRUCT ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , PropAccess.STRUCT ) ;
Distance : 5

56
Tree	double result = convertLocalToUTC ( localInstant , localInstant , result , iZone , null ) ;
Code	double result = convertLocalToUTC ( localInstant , localInstant , result , iZone , null ) ;
Distance : 9

57
Tree	float result = convertLocalToUTC ( localInstant , localInstant , false ) ;
Code	float result = convertLocalToUTC ( localInstant , localInstant , false ) ;
Distance : 5

58
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , iZone , convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , iZone , convertLocalToUTC () ) ;
Distance : 5

59
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , LazyHolder.INSTANCE ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , LazyHolder.INSTANCE ) ;
Distance : 5

60
Tree	float result = iZone . localInstant ( localInstant ) ;
Code	float result = iZone . localInstant ( localInstant ) ;
Distance : 6

61
Tree	public double result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	public double result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

62
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , reporterStub.previousLocation ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , reporterStub.previousLocation ) ;
Distance : 5

63
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , MONTH_OF_YEAR_TYPE ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , MONTH_OF_YEAR_TYPE ) ;
Distance : 5

64
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , iChrono ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , iChrono ) ;
Distance : 5

65
Tree	protected boolean instant = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	protected boolean instant = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 5

66
Tree	float result = iZone . convertLocalToUTC ( localInstant , localInstant ) ;
Code	float result = iZone . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 4

67
Tree	double result = result ;
Code	double result = result ;
Distance : 11

68
Tree	public boolean result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	public boolean result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

69
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , ContinuousOutputFieldModel ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , ContinuousOutputFieldModel ) ;
Distance : 5

70
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , Boolean.TRUE ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , Boolean.TRUE ) ;
Distance : 5

71
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , Feature.STRING_CONTINUATION ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , Feature.STRING_CONTINUATION ) ;
Distance : 5

72
Tree	private long instant = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	private long instant = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

73
Tree	long result = convertLocalToUTC ( localInstant , iZone , instant , iZone , null ) ;
Code	long result = convertLocalToUTC ( localInstant , iZone , instant , iZone , null ) ;
Distance : 7

74
Tree	byte result = result ;
Code	byte result = result ;
Distance : 11

75
Tree	float result = iZone . convertLocalToUTC ( this , iZone ) ;
Code	float result = iZone . convertLocalToUTC ( this , iZone ) ;
Distance : 5

76
Tree	private boolean iZone = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	private boolean iZone = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 5

77
Tree	long result = instant . convertLocalToUTC ( result , false ) ;
Code	long result = instant . convertLocalToUTC ( result , false ) ;
Distance : 4

78
Tree	long result = localInstant . convertLocalToUTC ( this , instant ) ;
Code	long result = localInstant . convertLocalToUTC ( this , instant ) ;
Distance : 4

79
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , GJChronology ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , GJChronology ) ;
Distance : 5

80
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , RotationConvention.FRAME_TRANSFORM ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , RotationConvention.FRAME_TRANSFORM ) ;
Distance : 5

81
Tree	byte result = iZone . localInstant ( localInstant ) ;
Code	byte result = iZone . localInstant ( localInstant ) ;
Distance : 6

82
Tree	private long result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	private long result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

83
Tree	static boolean iZone = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	static boolean iZone = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 5

84
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , getChronologyUTC ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , getChronologyUTC ) ;
Distance : 5

85
Tree	private double iZone = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	private double iZone = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 5

86
Tree	double result = localInstant . convertLocalToUTC ( this , localInstant ) ;
Code	double result = localInstant . convertLocalToUTC ( this , localInstant ) ;
Distance : 6

87
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , options.appNameStr ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , options.appNameStr ) ;
Distance : 5

88
Tree	long result = convertLocalToUTC ( iZone , localInstant , instant , iZone , null ) ;
Code	long result = convertLocalToUTC ( iZone , localInstant , instant , iZone , null ) ;
Distance : 8

89
Tree	byte result = convertLocalToUTC ( localInstant , localInstant , false ) ;
Code	byte result = convertLocalToUTC ( localInstant , localInstant , false ) ;
Distance : 5

90
Tree	byte result = iZone . convertLocalToUTC ( localInstant , localInstant ) ;
Code	byte result = iZone . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 4

91
Tree	private long iZone = iZone . convertLocalToUTC ( iZone , false ) ;
Code	private long iZone = iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 5

92
Tree	long result = convertLocalToUTC ( iZone , localInstant , localInstant , iZone , null ) ;
Code	long result = convertLocalToUTC ( iZone , localInstant , localInstant , iZone , null ) ;
Distance : 7

93
Tree	public long result = iZone . convertLocalToUTC ( iZone , false ) ;
Code	public long result = iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 4

94
Tree	boolean result = iZone . convertLocalToUTC ( this , result , NUMBER_CONSTANT ) ;
Code	boolean result = iZone . convertLocalToUTC ( this , result , NUMBER_CONSTANT ) ;
Distance : 4

95
Tree	abstract double iZone = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	abstract double iZone = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 5

96
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , AnswerFactoryTest ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , AnswerFactoryTest ) ;
Distance : 5

97
Tree	void result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , iZone ) ;
Code	void result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

98
Tree	abstract long iZone = iZone . convertLocalToUTC ( iZone , false ) ;
Code	abstract long iZone = iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 5

99
Tree	char result = iZone . convertLocalToUTC ( this , localInstant , NUMBER_CONSTANT ) ;
Code	char result = iZone . convertLocalToUTC ( this , localInstant , NUMBER_CONSTANT ) ;
Distance : 4

========================================================================


========================================================================
Example Number: 114
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Code	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Distance : 9

1
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; join
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; join
Distance : 3

2
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; boolean
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; boolean
Distance : 3

3
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; <
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; <
Distance : 3

4
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; +
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; +
Distance : 3

5
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; return
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; return
Distance : 3

6
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; NUMBER_CONSTANT
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; NUMBER_CONSTANT
Distance : 3

7
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; !=
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; !=
Distance : 3

8
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; this
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; this
Distance : 3

9
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; n
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; n
Distance : 3

10
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; e
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; e
Distance : 3

11
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; null
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; null
Distance : 3

12
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; compiler
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; compiler
Distance : 3

13
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; m
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; m
Distance : 3

14
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; String
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; String
Distance : 3

15
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; final
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; final
Distance : 3

16
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; catch
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; catch
Distance : 3

17
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; super
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; super
Distance : 3

18
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; false
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; false
Distance : 3

19
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

20
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; result
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; result
Distance : 3

21
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; List
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; List
Distance : 3

22
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; Args
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; Args
Distance : 3

23
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; array
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; array
Distance : 3

24
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; <>
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; <>
Distance : 3

25
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; int
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; int
Distance : 3

26
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; try
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; try
Distance : 3

27
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; :
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; :
Distance : 3

28
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; mode
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; mode
Distance : 3

29
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; paint
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; paint
Distance : 3

30
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; true
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; true
Distance : 3

31
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; value
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; value
Distance : 3

32
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; i
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; i
Distance : 3

33
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; fail
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; fail
Distance : 3

34
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; throw
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; throw
Distance : 3

35
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; serialised
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; serialised
Distance : 3

36
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; getInstance
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; getInstance
Distance : 3

37
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; final
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; final
Distance : 5

38
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; >
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; >
Distance : 5

39
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; )
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; )
Distance : 5

40
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ArrayList
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ArrayList
Distance : 3

41
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; fireChangeEvent
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; fireChangeEvent
Distance : 3

42
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; MathRuntimeException
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; MathRuntimeException
Distance : 3

43
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; return
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; return
Distance : 5

44
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; {}
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; {}
Distance : 3

45
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; Object
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; Object
Distance : 3

46
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ParamChecks
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ParamChecks
Distance : 3

47
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; f
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; f
Distance : 3

48
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; Override
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; Override
Distance : 3

49
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; mock
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; mock
Distance : 3

50
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; [
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; [
Distance : 3

51
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; class
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; class
Distance : 3

52
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; this
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; this
Distance : 5

53
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; public
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; public
Distance : 5

54
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; if
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; if
Distance : 5

55
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; *
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; *
Distance : 3

56
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; type
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; type
Distance : 3

57
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; nullNotPermitted
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; nullNotPermitted
Distance : 3

58
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; []
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; []
Distance : 3

59
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; void
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; void
Distance : 3

60
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; String
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; String
Distance : 5

61
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; test
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; test
Distance : 5

62
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; assertEquals
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; assertEquals
Distance : 5

63
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; @
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; @
Distance : 5

64
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; []
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; []
Distance : 5

65
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; ==
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; ==
Distance : 5

66
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; nullNotPermitted
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; nullNotPermitted
Distance : 5

67
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; !
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; !
Distance : 5

68
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; null
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; null
Distance : 5

69
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ==
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ==
Distance : 3

70
Tree	return NUMBER_CONSTANT / iZone ;
Code	return NUMBER_CONSTANT / iZone ;
Distance : 10

71
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ]
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ]
Distance : 3

72
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

73
Tree	return iZone != coefficients.length ;
Code	return iZone != coefficients.length ;
Distance : 9

74
Tree	return iZone != offsetFormatter ;
Code	return iZone != offsetFormatter ;
Distance : 9

75
Tree	return iZone != PRIMITIVE_OR_WRAPPER_DEFAULT_VALUES ;
Code	return iZone != PRIMITIVE_OR_WRAPPER_DEFAULT_VALUES ;
Distance : 9

76
Tree	return iZone != TimeUnit.MILLISECONDS ;
Code	return iZone != TimeUnit.MILLISECONDS ;
Distance : 9

77
Tree	return iZone != exprResultNode ;
Code	return iZone != exprResultNode ;
Distance : 9

78
Tree	return iZone != MidpointFieldStepInterpolator ;
Code	return iZone != MidpointFieldStepInterpolator ;
Distance : 9

79
Tree	return iZone != mRule ;
Code	return iZone != mRule ;
Distance : 9

80
Tree	return iZone != EvalMode.NORMAL ;
Code	return iZone != EvalMode.NORMAL ;
Distance : 9

81
Tree	return iZone != Locale.US ;
Code	return iZone != Locale.US ;
Distance : 9

82
Tree	return iZone != INSTRUMENTATION ;
Code	return iZone != INSTRUMENTATION ;
Distance : 9

83
Tree	return iZone != MatchedNodeInfo ;
Code	return iZone != MatchedNodeInfo ;
Distance : 9

84
Tree	return iZone != hyperplaneThickness ;
Code	return iZone != hyperplaneThickness ;
Distance : 9

85
Tree	return iZone != invocationListener ;
Code	return iZone != invocationListener ;
Distance : 9

86
Tree	return iZone != YieldFinder ;
Code	return iZone != YieldFinder ;
Distance : 9

87
Tree	return iZone != num1 ;
Code	return iZone != num1 ;
Distance : 9

88
Tree	return iZone != TracerMode.ALL ;
Code	return iZone != TracerMode.ALL ;
Distance : 9

89
Tree	return iZone != bundler ;
Code	return iZone != bundler ;
Distance : 9

90
Tree	return iZone != LanguageMode.ECMASCRIPT_2016 ;
Code	return iZone != LanguageMode.ECMASCRIPT_2016 ;
Distance : 9

91
Tree	return iZone != StandardBasicTypes.LONG ;
Code	return iZone != StandardBasicTypes.LONG ;
Distance : 9

92
Tree	return iZone != Node.FLAG_LOCAL_RESULTS ;
Code	return iZone != Node.FLAG_LOCAL_RESULTS ;
Distance : 9

93
Tree	return iZone != entry.map ;
Code	return iZone != entry.map ;
Distance : 9

94
Tree	return iZone != iChronology.MILLIS_PER_DAY ;
Code	return iZone != iChronology.MILLIS_PER_DAY ;
Distance : 9

95
Tree	return iZone != MultiBackgroundInitializer.MultiBackgroundInitializerResults ;
Code	return iZone != MultiBackgroundInitializer.MultiBackgroundInitializerResults ;
Distance : 9

96
Tree	return iZone != ExceptionFactory ;
Code	return iZone != ExceptionFactory ;
Distance : 9

97
Tree	return iZone != GillFieldIntegrator ;
Code	return iZone != GillFieldIntegrator ;
Distance : 9

98
Tree	return iZone != createCompilerOptions ;
Code	return iZone != createCompilerOptions ;
Distance : 9

99
Tree	return iZone != StandardBasicTypes.STRING ;
Code	return iZone != StandardBasicTypes.STRING ;
Distance : 9

========================================================================


========================================================================
Example Number: 115
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Code	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Distance : 9

1
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; join
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; join
Distance : 3

2
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; boolean
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; boolean
Distance : 3

3
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; <
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; <
Distance : 3

4
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; +
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; +
Distance : 3

5
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; return
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; return
Distance : 3

6
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; NUMBER_CONSTANT
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; NUMBER_CONSTANT
Distance : 3

7
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; !=
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; !=
Distance : 3

8
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; this
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; this
Distance : 3

9
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; n
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; n
Distance : 3

10
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; e
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; e
Distance : 3

11
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; null
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; null
Distance : 3

12
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; compiler
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; compiler
Distance : 3

13
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; m
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; m
Distance : 3

14
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; String
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; String
Distance : 3

15
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; final
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; final
Distance : 3

16
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; catch
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; catch
Distance : 3

17
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; super
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; super
Distance : 3

18
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; false
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; false
Distance : 3

19
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

20
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; result
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; result
Distance : 3

21
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; List
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; List
Distance : 3

22
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; Args
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; Args
Distance : 3

23
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; array
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; array
Distance : 3

24
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; <>
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; <>
Distance : 3

25
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; int
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; int
Distance : 3

26
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; try
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; try
Distance : 3

27
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; :
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; :
Distance : 3

28
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; mode
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; mode
Distance : 3

29
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; paint
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; paint
Distance : 3

30
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; true
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; true
Distance : 3

31
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; value
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; value
Distance : 3

32
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; i
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; i
Distance : 3

33
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; fail
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; fail
Distance : 3

34
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; throw
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; throw
Distance : 3

35
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; serialised
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; serialised
Distance : 3

36
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; getInstance
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; getInstance
Distance : 3

37
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; final
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; final
Distance : 5

38
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; >
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; >
Distance : 5

39
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; )
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; )
Distance : 5

40
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ArrayList
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ArrayList
Distance : 3

41
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; fireChangeEvent
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; fireChangeEvent
Distance : 3

42
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; MathRuntimeException
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; MathRuntimeException
Distance : 3

43
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; return
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; return
Distance : 5

44
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; {}
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; {}
Distance : 3

45
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; Object
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; Object
Distance : 3

46
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ParamChecks
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ParamChecks
Distance : 3

47
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; f
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; f
Distance : 3

48
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; Override
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; Override
Distance : 3

49
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; mock
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; mock
Distance : 3

50
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; [
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; [
Distance : 3

51
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; class
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; class
Distance : 3

52
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; this
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; this
Distance : 5

53
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; public
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; public
Distance : 5

54
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; if
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; if
Distance : 5

55
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; *
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; *
Distance : 3

56
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; type
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; type
Distance : 3

57
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; nullNotPermitted
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; nullNotPermitted
Distance : 3

58
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; []
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; []
Distance : 3

59
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; void
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; void
Distance : 3

60
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; String
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; String
Distance : 5

61
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; test
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; test
Distance : 5

62
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; assertEquals
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; assertEquals
Distance : 5

63
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; @
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; @
Distance : 5

64
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; []
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; []
Distance : 5

65
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; ==
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; ==
Distance : 5

66
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; nullNotPermitted
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; nullNotPermitted
Distance : 5

67
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; !
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; !
Distance : 5

68
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; null
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; null
Distance : 5

69
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ==
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ==
Distance : 3

70
Tree	return NUMBER_CONSTANT / iZone ;
Code	return NUMBER_CONSTANT / iZone ;
Distance : 10

71
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ]
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ]
Distance : 3

72
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

73
Tree	return iZone != coefficients.length ;
Code	return iZone != coefficients.length ;
Distance : 9

74
Tree	return iZone != offsetFormatter ;
Code	return iZone != offsetFormatter ;
Distance : 9

75
Tree	return iZone != PRIMITIVE_OR_WRAPPER_DEFAULT_VALUES ;
Code	return iZone != PRIMITIVE_OR_WRAPPER_DEFAULT_VALUES ;
Distance : 9

76
Tree	return iZone != TimeUnit.MILLISECONDS ;
Code	return iZone != TimeUnit.MILLISECONDS ;
Distance : 9

77
Tree	return iZone != exprResultNode ;
Code	return iZone != exprResultNode ;
Distance : 9

78
Tree	return iZone != MidpointFieldStepInterpolator ;
Code	return iZone != MidpointFieldStepInterpolator ;
Distance : 9

79
Tree	return iZone != mRule ;
Code	return iZone != mRule ;
Distance : 9

80
Tree	return iZone != EvalMode.NORMAL ;
Code	return iZone != EvalMode.NORMAL ;
Distance : 9

81
Tree	return iZone != Locale.US ;
Code	return iZone != Locale.US ;
Distance : 9

82
Tree	return iZone != INSTRUMENTATION ;
Code	return iZone != INSTRUMENTATION ;
Distance : 9

83
Tree	return iZone != MatchedNodeInfo ;
Code	return iZone != MatchedNodeInfo ;
Distance : 9

84
Tree	return iZone != hyperplaneThickness ;
Code	return iZone != hyperplaneThickness ;
Distance : 9

85
Tree	return iZone != invocationListener ;
Code	return iZone != invocationListener ;
Distance : 9

86
Tree	return iZone != YieldFinder ;
Code	return iZone != YieldFinder ;
Distance : 9

87
Tree	return iZone != num1 ;
Code	return iZone != num1 ;
Distance : 9

88
Tree	return iZone != TracerMode.ALL ;
Code	return iZone != TracerMode.ALL ;
Distance : 9

89
Tree	return iZone != bundler ;
Code	return iZone != bundler ;
Distance : 9

90
Tree	return iZone != LanguageMode.ECMASCRIPT_2016 ;
Code	return iZone != LanguageMode.ECMASCRIPT_2016 ;
Distance : 9

91
Tree	return iZone != StandardBasicTypes.LONG ;
Code	return iZone != StandardBasicTypes.LONG ;
Distance : 9

92
Tree	return iZone != Node.FLAG_LOCAL_RESULTS ;
Code	return iZone != Node.FLAG_LOCAL_RESULTS ;
Distance : 9

93
Tree	return iZone != entry.map ;
Code	return iZone != entry.map ;
Distance : 9

94
Tree	return iZone != iChronology.MILLIS_PER_DAY ;
Code	return iZone != iChronology.MILLIS_PER_DAY ;
Distance : 9

95
Tree	return iZone != MultiBackgroundInitializer.MultiBackgroundInitializerResults ;
Code	return iZone != MultiBackgroundInitializer.MultiBackgroundInitializerResults ;
Distance : 9

96
Tree	return iZone != ExceptionFactory ;
Code	return iZone != ExceptionFactory ;
Distance : 9

97
Tree	return iZone != GillFieldIntegrator ;
Code	return iZone != GillFieldIntegrator ;
Distance : 9

98
Tree	return iZone != createCompilerOptions ;
Code	return iZone != createCompilerOptions ;
Distance : 9

99
Tree	return iZone != StandardBasicTypes.STRING ;
Code	return iZone != StandardBasicTypes.STRING ;
Distance : 9

========================================================================


========================================================================
Example Number: 116
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Code	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Distance : 9

1
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; join
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; join
Distance : 3

2
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; boolean
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; boolean
Distance : 3

3
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; <
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; <
Distance : 3

4
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; +
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; +
Distance : 3

5
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; return
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; return
Distance : 3

6
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; NUMBER_CONSTANT
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; NUMBER_CONSTANT
Distance : 3

7
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; !=
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; !=
Distance : 3

8
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; this
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; this
Distance : 3

9
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; n
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; n
Distance : 3

10
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; e
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; e
Distance : 3

11
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; null
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; null
Distance : 3

12
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; compiler
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; compiler
Distance : 3

13
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; m
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; m
Distance : 3

14
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; String
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; String
Distance : 3

15
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; final
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; final
Distance : 3

16
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; catch
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; catch
Distance : 3

17
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; super
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; super
Distance : 3

18
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; false
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; false
Distance : 3

19
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

20
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; result
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; result
Distance : 3

21
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; List
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; List
Distance : 3

22
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; Args
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; Args
Distance : 3

23
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; array
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; array
Distance : 3

24
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; <>
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; <>
Distance : 3

25
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; int
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; int
Distance : 3

26
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; try
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; try
Distance : 3

27
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; :
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; :
Distance : 3

28
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; mode
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; mode
Distance : 3

29
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; paint
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; paint
Distance : 3

30
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; true
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; true
Distance : 3

31
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; value
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; value
Distance : 3

32
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; i
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; i
Distance : 3

33
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; fail
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; fail
Distance : 3

34
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; throw
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; throw
Distance : 3

35
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; serialised
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; serialised
Distance : 3

36
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; getInstance
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; getInstance
Distance : 3

37
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; final
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; final
Distance : 5

38
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; >
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; >
Distance : 5

39
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; )
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; )
Distance : 5

40
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ArrayList
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ArrayList
Distance : 3

41
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; fireChangeEvent
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; fireChangeEvent
Distance : 3

42
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; MathRuntimeException
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; MathRuntimeException
Distance : 3

43
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; return
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; return
Distance : 5

44
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; {}
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; {}
Distance : 3

45
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; Object
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; Object
Distance : 3

46
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ParamChecks
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ParamChecks
Distance : 3

47
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; f
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; f
Distance : 3

48
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; Override
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; Override
Distance : 3

49
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; mock
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; mock
Distance : 3

50
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; [
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; [
Distance : 3

51
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; class
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; class
Distance : 3

52
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; this
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; this
Distance : 5

53
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; public
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; public
Distance : 5

54
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; if
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; if
Distance : 5

55
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; *
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; *
Distance : 3

56
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; type
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; type
Distance : 3

57
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; nullNotPermitted
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; nullNotPermitted
Distance : 3

58
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; []
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; []
Distance : 3

59
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; void
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; void
Distance : 3

60
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; String
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; String
Distance : 5

61
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; test
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; test
Distance : 5

62
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; assertEquals
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; assertEquals
Distance : 5

63
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; @
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; @
Distance : 5

64
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; []
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; []
Distance : 5

65
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; ==
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; ==
Distance : 5

66
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; nullNotPermitted
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; nullNotPermitted
Distance : 5

67
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; !
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; !
Distance : 5

68
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ; null
Code	return iZone . convertLocalToUTC ( this , localInstant ) ; null
Distance : 5

69
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ==
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ==
Distance : 3

70
Tree	return NUMBER_CONSTANT / iZone ;
Code	return NUMBER_CONSTANT / iZone ;
Distance : 10

71
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ; ]
Code	return iZone . convertLocalToUTC ( localInstant , false ) ; ]
Distance : 3

72
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

73
Tree	return iZone != coefficients.length ;
Code	return iZone != coefficients.length ;
Distance : 9

74
Tree	return iZone != offsetFormatter ;
Code	return iZone != offsetFormatter ;
Distance : 9

75
Tree	return iZone != PRIMITIVE_OR_WRAPPER_DEFAULT_VALUES ;
Code	return iZone != PRIMITIVE_OR_WRAPPER_DEFAULT_VALUES ;
Distance : 9

76
Tree	return iZone != TimeUnit.MILLISECONDS ;
Code	return iZone != TimeUnit.MILLISECONDS ;
Distance : 9

77
Tree	return iZone != exprResultNode ;
Code	return iZone != exprResultNode ;
Distance : 9

78
Tree	return iZone != MidpointFieldStepInterpolator ;
Code	return iZone != MidpointFieldStepInterpolator ;
Distance : 9

79
Tree	return iZone != mRule ;
Code	return iZone != mRule ;
Distance : 9

80
Tree	return iZone != EvalMode.NORMAL ;
Code	return iZone != EvalMode.NORMAL ;
Distance : 9

81
Tree	return iZone != Locale.US ;
Code	return iZone != Locale.US ;
Distance : 9

82
Tree	return iZone != INSTRUMENTATION ;
Code	return iZone != INSTRUMENTATION ;
Distance : 9

83
Tree	return iZone != MatchedNodeInfo ;
Code	return iZone != MatchedNodeInfo ;
Distance : 9

84
Tree	return iZone != hyperplaneThickness ;
Code	return iZone != hyperplaneThickness ;
Distance : 9

85
Tree	return iZone != invocationListener ;
Code	return iZone != invocationListener ;
Distance : 9

86
Tree	return iZone != YieldFinder ;
Code	return iZone != YieldFinder ;
Distance : 9

87
Tree	return iZone != num1 ;
Code	return iZone != num1 ;
Distance : 9

88
Tree	return iZone != TracerMode.ALL ;
Code	return iZone != TracerMode.ALL ;
Distance : 9

89
Tree	return iZone != bundler ;
Code	return iZone != bundler ;
Distance : 9

90
Tree	return iZone != LanguageMode.ECMASCRIPT_2016 ;
Code	return iZone != LanguageMode.ECMASCRIPT_2016 ;
Distance : 9

91
Tree	return iZone != StandardBasicTypes.LONG ;
Code	return iZone != StandardBasicTypes.LONG ;
Distance : 9

92
Tree	return iZone != Node.FLAG_LOCAL_RESULTS ;
Code	return iZone != Node.FLAG_LOCAL_RESULTS ;
Distance : 9

93
Tree	return iZone != entry.map ;
Code	return iZone != entry.map ;
Distance : 9

94
Tree	return iZone != iChronology.MILLIS_PER_DAY ;
Code	return iZone != iChronology.MILLIS_PER_DAY ;
Distance : 9

95
Tree	return iZone != MultiBackgroundInitializer.MultiBackgroundInitializerResults ;
Code	return iZone != MultiBackgroundInitializer.MultiBackgroundInitializerResults ;
Distance : 9

96
Tree	return iZone != ExceptionFactory ;
Code	return iZone != ExceptionFactory ;
Distance : 9

97
Tree	return iZone != GillFieldIntegrator ;
Code	return iZone != GillFieldIntegrator ;
Distance : 9

98
Tree	return iZone != createCompilerOptions ;
Code	return iZone != createCompilerOptions ;
Distance : 9

99
Tree	return iZone != StandardBasicTypes.STRING ;
Code	return iZone != StandardBasicTypes.STRING ;
Distance : 9

========================================================================


========================================================================
Example Number: 117
Parent Code is: 
Partial newPartial = new Partial ( iChronology , newTypes , newValues ) ;
-------------------------------------------------------------------------------
Child code is: 
Partial newPartial = new Partial ( newTypes , newValues , iChronology ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Partial})) (59 (800{val=newPartial}) (204{val==}) (14 (304{val=new}) (43 (801{val=Partial})) (214{val=(}) (800{val=iChronology}) (234{val=,}) (800{val=newTypes}) (234{val=,}) (800{val=newValues}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Partial})) (59 (800{val=newPartial}) (204{val==}) (14 (304{val=new}) (43 (801{val=Partial})) (214{val=(}) (800{val=newTypes}) (234{val=,}) (800{val=newValues}) (234{val=,}) (800{val=iChronology}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/4/parent/src_main_java_org_joda_time_Partial.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , this . iChronology . getNumElements () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , this . iChronology . getNumElements () ) ;
Distance : 9

1
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getLocalizedMessage ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getLocalizedMessage ( iChronology ) ) ;
Distance : 9

2
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . invocationListeners ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . invocationListeners ( iChronology ) ) ;
Distance : 9

3
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . pullVerificationMode ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . pullVerificationMode ( iChronology ) ) ;
Distance : 9

4
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . readStroke ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . readStroke ( iChronology ) ) ;
Distance : 9

5
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . toCharArray ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . toCharArray ( iChronology ) ) ;
Distance : 9

6
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . DEFAULT_COLUMN_SEPARATOR ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . DEFAULT_COLUMN_SEPARATOR ( iChronology ) ) ;
Distance : 9

7
Tree	Partial newPartial = new Partial ( iChronology , newValues , newValues , newValues . getScopeCreator ( iChronology ) ) ;
Code	Partial newPartial = new Partial ( iChronology , newValues , newValues , newValues . getScopeCreator ( iChronology ) ) ;
Distance : 8

8
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getLastInvocation ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getLastInvocation ( iChronology ) ) ;
Distance : 9

9
Tree	Partial newValues = new Partial ( iChronology , newValues , iChronology ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , iChronology ) ;
Distance : 2

10
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getDefaultNumberFormat ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getDefaultNumberFormat ( iChronology ) ) ;
Distance : 9

11
Tree	Partial newPartial = new Partial ( iChronology , newTypes , newValues , newValues . of ( iChronology ) ) ;
Code	Partial newPartial = new Partial ( iChronology , newTypes , newValues , newValues . of ( iChronology ) ) ;
Distance : 7

12
Tree	Partial newPartial = new Partial ( iChronology , newValues , newValues , newValues . getInstance ( iChronology ) ) ;
Code	Partial newPartial = new Partial ( iChronology , newValues , newValues , newValues . getInstance ( iChronology ) ) ;
Distance : 8

13
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . mockCandidates ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . mockCandidates ( iChronology ) ) ;
Distance : 9

14
Tree	Partial newPartial = new Partial ( iChronology , newValues , newValues , newValues . getRightElement ( iChronology ) ) ;
Code	Partial newPartial = new Partial ( iChronology , newValues , newValues , newValues . getRightElement ( iChronology ) ) ;
Distance : 8

15
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . getBytes ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . getBytes ( iChronology ) ) ;
Distance : 8

16
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . iso ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . iso ( iChronology ) ) ;
Distance : 9

17
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getVisibleSeriesArray ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getVisibleSeriesArray ( iChronology ) ) ;
Distance : 9

18
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getFunctionNames ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getFunctionNames ( iChronology ) ) ;
Distance : 9

19
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , this . iChronology . of () ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , this . iChronology . of () ) ;
Distance : 8

20
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . in ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . in ( iChronology ) ) ;
Distance : 9

21
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . valueOf ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . valueOf ( iChronology ) ) ;
Distance : 9

22
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . MILLISECONDS ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . MILLISECONDS ( iChronology ) ) ;
Distance : 9

23
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . getNameNode ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . getNameNode ( iChronology ) ) ;
Distance : 8

24
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . returnValueFor ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . returnValueFor ( iChronology ) ) ;
Distance : 9

25
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . lineno ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . lineno ( iChronology ) ) ;
Distance : 9

26
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . latest ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . latest ( iChronology ) ) ;
Distance : 8

27
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . p3 ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . p3 ( iChronology ) ) ;
Distance : 9

28
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . getSourceMapURL ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . getSourceMapURL ( iChronology ) ) ;
Distance : 8

29
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . urlText ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . urlText ( iChronology ) ) ;
Distance : 9

30
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getTypeToMock ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getTypeToMock ( iChronology ) ) ;
Distance : 9

31
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getMethod ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getMethod ( iChronology ) ) ;
Distance : 9

32
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getInvocationListeners ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getInvocationListeners ( iChronology ) ) ;
Distance : 9

33
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . typeMockabilityOf ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . typeMockabilityOf ( iChronology ) ) ;
Distance : 9

34
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . nullToEmpty ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . nullToEmpty ( iChronology ) ) ;
Distance : 9

35
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getFirstUnverified ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getFirstUnverified ( iChronology ) ) ;
Distance : 9

36
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . primitiveTypeOf ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . primitiveTypeOf ( iChronology ) ) ;
Distance : 9

37
Tree	Partial newPartial = new Partial ( iChronology , newTypes , newValues , newValues . verificationListeners ( iChronology ) ) ;
Code	Partial newPartial = new Partial ( iChronology , newTypes , newValues , newValues . verificationListeners ( iChronology ) ) ;
Distance : 7

38
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . findZBounds ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . findZBounds ( iChronology ) ) ;
Distance : 9

39
Tree	Partial newPartial = new Partial ( iChronology , newValues , newValues , newValues . getBytes ( iChronology ) ) ;
Code	Partial newPartial = new Partial ( iChronology , newValues , newValues , newValues . getBytes ( iChronology ) ) ;
Distance : 8

40
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getRawNominalType ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getRawNominalType ( iChronology ) ) ;
Distance : 9

41
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getPrinter ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getPrinter ( iChronology ) ) ;
Distance : 9

42
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . getScopeCreator ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . getScopeCreator ( iChronology ) ) ;
Distance : 8

43
Tree	Partial newPartial = new Partial ( iChronology , newValues , newValues , newValues . getParser ( iChronology ) ) ;
Code	Partial newPartial = new Partial ( iChronology , newValues , newValues , newValues . getParser ( iChronology ) ) ;
Distance : 8

44
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . yearOfEra ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . yearOfEra ( iChronology ) ) ;
Distance : 9

45
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . voidMethodStubbable ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . voidMethodStubbable ( iChronology ) ) ;
Distance : 9

46
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . createLong ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . createLong ( iChronology ) ) ;
Distance : 9

47
Tree	Partial newPartial = new Partial ( this , iChronology , newValues , newValues ) ;
Code	Partial newPartial = new Partial ( this , iChronology , newValues , newValues ) ;
Distance : 4

48
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . noMoreInteractions ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . noMoreInteractions ( iChronology ) ) ;
Distance : 9

49
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . safeMultiply ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . safeMultiply ( iChronology ) ) ;
Distance : 9

50
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getChangedScopeNodesForPass ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getChangedScopeNodesForPass ( iChronology ) ) ;
Distance : 9

51
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getNameNode ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getNameNode ( iChronology ) ) ;
Distance : 9

52
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getNumElements ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getNumElements ( iChronology ) ) ;
Distance : 9

53
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . latest ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . latest ( iChronology ) ) ;
Distance : 9

54
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getSourceMapURL ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getSourceMapURL ( iChronology ) ) ;
Distance : 9

55
Tree	Partial newValues = new Partial ( iChronology , NUMBER_CONSTANT , newValues , newValues ) ;
Code	Partial newValues = new Partial ( iChronology , NUMBER_CONSTANT , newValues , newValues ) ;
Distance : 5

56
Tree	Partial newPartial = new Partial ( iChronology , newValues , newValues , newValues . verificationListeners ( iChronology ) ) ;
Code	Partial newPartial = new Partial ( iChronology , newValues , newValues , newValues . verificationListeners ( iChronology ) ) ;
Distance : 8

57
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , this . iChronology . of () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , this . iChronology . of () ) ;
Distance : 9

58
Tree	Partial newPartial = new Partial ( iChronology , newTypes , newValues , newValues ) ;
Code	Partial newPartial = new Partial ( iChronology , newTypes , newValues , newValues ) ;
Distance : 3

59
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues . getRunCount () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues . getRunCount () ) ;
Distance : 6

60
Tree	Partial newPartial = new Partial ( iChronology , newValues , newValues . values.length () ) ;
Code	Partial newPartial = new Partial ( iChronology , newValues , newValues . values.length () ) ;
Distance : 5

61
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues . getMultiple () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues . getMultiple () ) ;
Distance : 6

62
Tree	Partial newValues = new Partial ( iChronology , iChronology , newValues , null ) ;
Code	Partial newValues = new Partial ( iChronology , iChronology , newValues , null ) ;
Distance : 5

63
Tree	Partial newPartial = new Partial ( iChronology , newValues , newValues , this . iChronology . of () ) ;
Code	Partial newPartial = new Partial ( iChronology , newValues , newValues , this . iChronology . of () ) ;
Distance : 8

64
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . yy ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . yy ( iChronology ) ) ;
Distance : 9

65
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getRunCount ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getRunCount ( iChronology ) ) ;
Distance : 9

66
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . returnFor ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . returnFor ( iChronology ) ) ;
Distance : 9

67
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . readPaint ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . readPaint ( iChronology ) ) ;
Distance : 9

68
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getFontMetrics ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getFontMetrics ( iChronology ) ) ;
Distance : 9

69
Tree	Partial newValues = new Partial ( iChronology , iChronology , newValues , newValues ) ;
Code	Partial newValues = new Partial ( iChronology , iChronology , newValues , newValues ) ;
Distance : 5

70
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . getInstance ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . getInstance ( iChronology ) ) ;
Distance : 8

71
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getRoughMillisPerMonth ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getRoughMillisPerMonth ( iChronology ) ) ;
Distance : 9

72
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getWrappedValue ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getWrappedValue ( iChronology ) ) ;
Distance : 9

73
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getVertices ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getVertices ( iChronology ) ) ;
Distance : 9

74
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . createBigInteger ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . createBigInteger ( iChronology ) ) ;
Distance : 9

75
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . getRightElement ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . getRightElement ( iChronology ) ) ;
Distance : 8

76
Tree	Partial newPartial = new Partial ( iChronology , newValues , newValues , newValues . timeParser ( iChronology ) ) ;
Code	Partial newPartial = new Partial ( iChronology , newValues , newValues , newValues . timeParser ( iChronology ) ) ;
Distance : 8

77
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . isSynthetic ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . isSynthetic ( iChronology ) ) ;
Distance : 9

78
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . isStarted ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . isStarted ( iChronology ) ) ;
Distance : 9

79
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . getParser ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . getParser ( iChronology ) ) ;
Distance : 8

80
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getDaysInYearMax ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getDaysInYearMax ( iChronology ) ) ;
Distance : 9

81
Tree	Partial newPartial = new Partial ( iChronology , iChronology ) ;
Code	Partial newPartial = new Partial ( iChronology , iChronology ) ;
Distance : 3

82
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . dateParser ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . dateParser ( iChronology ) ) ;
Distance : 9

83
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . delimMatcher ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . delimMatcher ( iChronology ) ) ;
Distance : 9

84
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . parseMillis ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . parseMillis ( iChronology ) ) ;
Distance : 9

85
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues . NumericEntityUnescaper () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues . NumericEntityUnescaper () ) ;
Distance : 6

86
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . getChangedScopeNodesForPass ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues . getChangedScopeNodesForPass ( iChronology ) ) ;
Distance : 8

87
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . allowEmpty ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . allowEmpty ( iChronology ) ) ;
Distance : 9

88
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , this . iChronology . verificationListeners () ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , this . iChronology . verificationListeners () ) ;
Distance : 8

89
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , this . iChronology . getConfiguration () ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , this . iChronology . getConfiguration () ) ;
Distance : 8

90
Tree	Partial newValues = new Partial ( newValues , newTypes ) ;
Code	Partial newValues = new Partial ( newValues , newTypes ) ;
Distance : 4

91
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , this . iChronology . getModifiers () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , this . iChronology . getModifiers () ) ;
Distance : 9

92
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , this . iChronology . longValue () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , this . iChronology . longValue () ) ;
Distance : 9

93
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , this . iChronology . timeParser () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , this . iChronology . timeParser () ) ;
Distance : 9

94
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , this . iChronology . getVisibleSeriesArray () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , this . iChronology . getVisibleSeriesArray () ) ;
Distance : 9

95
Tree	Partial newPartial = new Partial ( newValues , NUMBER_CONSTANT , iChronology , newValues ) ;
Code	Partial newPartial = new Partial ( newValues , NUMBER_CONSTANT , iChronology , newValues ) ;
Distance : 4

96
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , this . iChronology . getDefaultNumberFormat () ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , this . iChronology . getDefaultNumberFormat () ) ;
Distance : 8

97
Tree	Partial newPartial = new Partial ( iChronology , newTypes , iChronology ) ;
Code	Partial newPartial = new Partial ( iChronology , newTypes , iChronology ) ;
Distance : 2

98
Tree	Partial iChronology = new Partial ( iChronology , NUMBER_CONSTANT , iChronology , newValues ) ;
Code	Partial iChronology = new Partial ( iChronology , NUMBER_CONSTANT , iChronology , newValues ) ;
Distance : 5

99
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , this . iChronology . nextInt () ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , this . iChronology . nextInt () ) ;
Distance : 8

========================================================================


