========================================================================
Example Number: 1
Parent Code is: 
final int cols = problem . getAllParameters () . length ;
-------------------------------------------------------------------------------
Child code is: 
final int cols = problem . getUnboundParameters () . length ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (39{val=int}) (59 (800{val=cols}) (204{val==}) (22 (32 (800{val=problem}) (235{val=.}) (802{val=getAllParameters}) (216{val=()})) (235{val=.}) (800{val=length}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (39{val=int}) (59 (800{val=cols}) (204{val==}) (22 (32 (800{val=problem}) (235{val=.}) (802{val=getUnboundParameters}) (216{val=()})) (235{val=.}) (800{val=length}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/100/parent/src_java_org_apache_commons_math_estimation_AbstractEstimator.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	final int cols = problem ;
Code	final int cols = problem ;
Distance : 5

1
Tree	final int cols = problem . getAllParameters () ;
Code	final int cols = problem . getAllParameters () ;
Distance : 3

2
Tree	double cols = ( problem ) problem ;
Code	double cols = ( problem ) problem ;
Distance : 8

3
Tree	final int cols = ( problem ) problem ;
Code	final int cols = ( problem ) problem ;
Distance : 6

4
Tree	final long cols = ( problem ) problem ;
Code	final long cols = ( problem ) problem ;
Distance : 7

5
Tree	final int cols = ( problem ) cols ;
Code	final int cols = ( problem ) cols ;
Distance : 6

6
Tree	boolean cols = ( problem ) problem ;
Code	boolean cols = ( problem ) problem ;
Distance : 8

7
Tree	final int cols = problem . getAllParameters ( length , PivotSelectionRule.BLAND ) ;
Code	final int cols = problem . getAllParameters ( length , PivotSelectionRule.BLAND ) ;
Distance : 6

8
Tree	final cols cols = problem . getAllParameters () ;
Code	final cols cols = problem . getAllParameters () ;
Distance : 4

9
Tree	void cols = problem . getAllParameters () ;
Code	void cols = problem . getAllParameters () ;
Distance : 5

10
Tree	void cols = ( problem ) problem ;
Code	void cols = ( problem ) problem ;
Distance : 8

11
Tree	final int cols = problem . getAllParameters ( true , problem ) ;
Code	final int cols = problem . getAllParameters ( true , problem ) ;
Distance : 6

12
Tree	final boolean cols = problem ;
Code	final boolean cols = problem ;
Distance : 6

13
Tree	final int cols = problem . getAllParameters ( Cartesian1D.ZERO ) ;
Code	final int cols = problem . getAllParameters ( Cartesian1D.ZERO ) ;
Distance : 4

14
Tree	final double cols = problem ;
Code	final double cols = problem ;
Distance : 6

15
Tree	final int cols = problem . getAllParameters ( dRow.length ) ;
Code	final int cols = problem . getAllParameters ( dRow.length ) ;
Distance : 4

16
Tree	final long cols = problem ;
Code	final long cols = problem ;
Distance : 6

17
Tree	final int cols = problem . getAllParameters () - NUMBER_CONSTANT ;
Code	final int cols = problem . getAllParameters () - NUMBER_CONSTANT ;
Distance : 3

18
Tree	final double cols = problem . getAllParameters () . length ;
Code	final double cols = problem . getAllParameters () . length ;
Distance : 2

19
Tree	final int cols = problem . getAllParameters ( length , seed.length ) ;
Code	final int cols = problem . getAllParameters ( length , seed.length ) ;
Distance : 6

20
Tree	final int [] [] cols = problem . getAllParameters ( Cartesian1D.ZERO ) ;
Code	final int [] [] cols = problem . getAllParameters ( Cartesian1D.ZERO ) ;
Distance : 6

21
Tree	final double cols = problem . getAllParameters () ;
Code	final double cols = problem . getAllParameters () ;
Distance : 4

22
Tree	final int [] [] cols = problem . getAllParameters ( LocalizedFormats.CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS ) ;
Code	final int [] [] cols = problem . getAllParameters ( LocalizedFormats.CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS ) ;
Distance : 6

23
Tree	void [] [] cols = problem . getAllParameters () ;
Code	void [] [] cols = problem . getAllParameters () ;
Distance : 6

24
Tree	problem = problem . getAllParameters ()
Code	problem = problem . getAllParameters ()
Distance : 7

25
Tree	final int cols = problem . cols ( length . cols () , cols () ) ;
Code	final int cols = problem . cols ( length . cols () , cols () ) ;
Distance : 9

26
Tree	final boolean cols = problem . getAllParameters () ;
Code	final boolean cols = problem . getAllParameters () ;
Distance : 4

27
Tree	length = problem . getAllParameters ()
Code	length = problem . getAllParameters ()
Distance : 7

28
Tree	final int [] cols = problem . getAllParameters () ;
Code	final int [] cols = problem . getAllParameters () ;
Distance : 4

29
Tree	final int cols = problem . cols ( length . getAllParameters () , length . cols () ) ;
Code	final int cols = problem . cols ( length . getAllParameters () , length . cols () ) ;
Distance : 10

30
Tree	double cols = problem . getAllParameters () ;
Code	double cols = problem . getAllParameters () ;
Distance : 5

31
Tree	final int cols = problem . getAllParameters ( length , natural.length ) ;
Code	final int cols = problem . getAllParameters ( length , natural.length ) ;
Distance : 6

32
Tree	final int cols = problem . getAllParameters ( length , v2.x ) ;
Code	final int cols = problem . getAllParameters ( length , v2.x ) ;
Distance : 6

33
Tree	final double cols = ( problem ) problem ;
Code	final double cols = ( problem ) problem ;
Distance : 7

34
Tree	final int cols = problem . getAllParameters ( false , cols ) ;
Code	final int cols = problem . getAllParameters ( false , cols ) ;
Distance : 6

35
Tree	final int cols = problem . length ( length . cols () , cols () ) ;
Code	final int cols = problem . length ( length . cols () , cols () ) ;
Distance : 9

36
Tree	final double [] [] cols = problem . getAllParameters () ;
Code	final double [] [] cols = problem . getAllParameters () ;
Distance : 6

37
Tree	long cols = ( problem ) problem ;
Code	long cols = ( problem ) problem ;
Distance : 8

38
Tree	final int [] [] cols = problem . getAllParameters () ;
Code	final int [] [] cols = problem . getAllParameters () ;
Distance : 5

39
Tree	final double cols = problem . getAllParameters ( new cols [ NUMBER_CONSTANT ] ) ;
Code	final double cols = problem . getAllParameters ( new cols [ NUMBER_CONSTANT ] ) ;
Distance : 9

40
Tree	final boolean [] [] cols = problem . getAllParameters ( length , NUMBER_CONSTANT ) ;
Code	final boolean [] [] cols = problem . getAllParameters ( length , NUMBER_CONSTANT ) ;
Distance : 9

41
Tree	final boolean cols = problem . getAllParameters () . length ;
Code	final boolean cols = problem . getAllParameters () . length ;
Distance : 2

42
Tree	final long [] [] cols = problem . getAllParameters () ;
Code	final long [] [] cols = problem . getAllParameters () ;
Distance : 6

43
Tree	final int cols = problem . getAllParameters ( FACT.length ) ;
Code	final int cols = problem . getAllParameters ( FACT.length ) ;
Distance : 4

44
Tree	length = cols . getAllParameters ()
Code	length = cols . getAllParameters ()
Distance : 8

45
Tree	double [] cols = problem . getAllParameters () ;
Code	double [] cols = problem . getAllParameters () ;
Distance : 5

46
Tree	final int cols = ( ( length ) problem ) . cols () ;
Code	final int cols = ( ( length ) problem ) . cols () ;
Distance : 8

47
Tree	final long cols = problem . getAllParameters () ;
Code	final long cols = problem . getAllParameters () ;
Distance : 4

48
Tree	final int cols = problem . getAllParameters ( false , problem ) ;
Code	final int cols = problem . getAllParameters ( false , problem ) ;
Distance : 6

49
Tree	final double [] cols = problem . getAllParameters () ;
Code	final double [] cols = problem . getAllParameters () ;
Distance : 5

50
Tree	final int cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

51
Tree	final long cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final long cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

52
Tree	long [] [] cols = problem . getAllParameters () ;
Code	long [] [] cols = problem . getAllParameters () ;
Distance : 6

53
Tree	final length cols = problem . getAllParameters () ;
Code	final length cols = problem . getAllParameters () ;
Distance : 4

54
Tree	boolean [] cols = problem . getAllParameters () ;
Code	boolean [] cols = problem . getAllParameters () ;
Distance : 5

55
Tree	final int cols = ( ( cols ) problem ) . cols () ;
Code	final int cols = ( ( cols ) problem ) . cols () ;
Distance : 8

56
Tree	final int cols = ( ( cols ) cols ) . cols () ;
Code	final int cols = ( ( cols ) cols ) . cols () ;
Distance : 8

57
Tree	boolean cols = problem . getAllParameters () ;
Code	boolean cols = problem . getAllParameters () ;
Distance : 5

58
Tree	final int cols = problem . getAllParameters () . length ;
Code	final int cols = problem . getAllParameters () . length ;
Distance : 1

59
Tree	final double cols = problem . getAllParameters ( false , problem ) ;
Code	final double cols = problem . getAllParameters ( false , problem ) ;
Distance : 7

60
Tree	final long cols = problem . getAllParameters () . length ;
Code	final long cols = problem . getAllParameters () . length ;
Distance : 2

61
Tree	final boolean cols = problem . getAllParameters ( new cols [ NUMBER_CONSTANT ] ) ;
Code	final boolean cols = problem . getAllParameters ( new cols [ NUMBER_CONSTANT ] ) ;
Distance : 9

62
Tree	boolean [] [] cols = problem . getAllParameters () ;
Code	boolean [] [] cols = problem . getAllParameters () ;
Distance : 6

63
Tree	final int cols = problem . getAllParameters ( coefficients.length ) ;
Code	final int cols = problem . getAllParameters ( coefficients.length ) ;
Distance : 4

64
Tree	final long cols = problem . getAllParameters ( new cols [ NUMBER_CONSTANT ] ) ;
Code	final long cols = problem . getAllParameters ( new cols [ NUMBER_CONSTANT ] ) ;
Distance : 9

65
Tree	final long cols = problem . cols ( length . cols () , cols () ) ;
Code	final long cols = problem . cols ( length . cols () , cols () ) ;
Distance : 10

66
Tree	cols cols = problem . getAllParameters () ;
Code	cols cols = problem . getAllParameters () ;
Distance : 5

67
Tree	final int [] [] cols = problem . getAllParameters ( LocalizedFormats.NOT_POSITIVE_POPULATION_SIZE ) ;
Code	final int [] [] cols = problem . getAllParameters ( LocalizedFormats.NOT_POSITIVE_POPULATION_SIZE ) ;
Distance : 6

68
Tree	final int cols = problem . cols ( length . cols () , cols . cols () ) ;
Code	final int cols = problem . cols ( length . cols () , cols . cols () ) ;
Distance : 10

69
Tree	final double cols = problem . cols ( length . cols () , cols () ) ;
Code	final double cols = problem . cols ( length . cols () , cols () ) ;
Distance : 10

70
Tree	final int cols = problem . getAllParameters ( new cols [ NUMBER_CONSTANT ] ) ;
Code	final int cols = problem . getAllParameters ( new cols [ NUMBER_CONSTANT ] ) ;
Distance : 8

71
Tree	final double cols = problem . getAllParameters () - NUMBER_CONSTANT ;
Code	final double cols = problem . getAllParameters () - NUMBER_CONSTANT ;
Distance : 4

72
Tree	final double cols = problem . cols ( length . cols () , length . cols () ) ;
Code	final double cols = problem . cols ( length . cols () , length . cols () ) ;
Distance : 11

73
Tree	final double cols = ( ( cols ) problem ) . cols () ;
Code	final double cols = ( ( cols ) problem ) . cols () ;
Distance : 9

74
Tree	final boolean cols = problem . getAllParameters () - NUMBER_CONSTANT ;
Code	final boolean cols = problem . getAllParameters () - NUMBER_CONSTANT ;
Distance : 4

75
Tree	final long cols = problem . getAllParameters () . length ;
Code	final long cols = problem . getAllParameters () . length ;
Distance : 2

76
Tree	long cols = problem . getAllParameters () ;
Code	long cols = problem . getAllParameters () ;
Distance : 5

77
Tree	final double cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

78
Tree	final int [] [] cols = problem . getAllParameters ( length , NUMBER_CONSTANT ) ;
Code	final int [] [] cols = problem . getAllParameters ( length , NUMBER_CONSTANT ) ;
Distance : 8

79
Tree	final boolean cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final boolean cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

80
Tree	final int [] [] problem = problem . getAllParameters () ;
Code	final int [] [] problem = problem . getAllParameters () ;
Distance : 6

81
Tree	void [] cols = problem . getAllParameters () ;
Code	void [] cols = problem . getAllParameters () ;
Distance : 5

82
Tree	final int cols = problem . length ( length . getAllParameters () , length . cols () ) ;
Code	final int cols = problem . length ( length . getAllParameters () , length . cols () ) ;
Distance : 10

83
Tree	protected cols cols = problem . getAllParameters () ;
Code	protected cols cols = problem . getAllParameters () ;
Distance : 5

84
Tree	final int cols = problem . getAllParameters () . length ;
Code	final int cols = problem . getAllParameters () . length ;
Distance : 1

85
Tree	length length = problem . getAllParameters () ;
Code	length length = problem . getAllParameters () ;
Distance : 6

86
Tree	final double cols = problem . getAllParameters () . length ;
Code	final double cols = problem . getAllParameters () . length ;
Distance : 2

87
Tree	final int [] [] cols = problem . getAllParameters ( dRow.length ) ;
Code	final int [] [] cols = problem . getAllParameters ( dRow.length ) ;
Distance : 6

88
Tree	length cols = problem . getAllParameters () ;
Code	length cols = problem . getAllParameters () ;
Distance : 5

89
Tree	long [] cols = problem . getAllParameters () ;
Code	long [] cols = problem . getAllParameters () ;
Distance : 5

90
Tree	private cols cols = problem . getAllParameters () ;
Code	private cols cols = problem . getAllParameters () ;
Distance : 5

91
Tree	final double [] [] cols = problem . getAllParameters ( length , NUMBER_CONSTANT ) ;
Code	final double [] [] cols = problem . getAllParameters ( length , NUMBER_CONSTANT ) ;
Distance : 9

92
Tree	final long cols = problem . getAllParameters () - NUMBER_CONSTANT ;
Code	final long cols = problem . getAllParameters () - NUMBER_CONSTANT ;
Distance : 4

93
Tree	problem cols = problem . getAllParameters () ;
Code	problem cols = problem . getAllParameters () ;
Distance : 5

94
Tree	cols = problem . getAllParameters ()
Code	cols = problem . getAllParameters ()
Distance : 6

95
Tree	double [] [] cols = problem . getAllParameters () ;
Code	double [] [] cols = problem . getAllParameters () ;
Distance : 6

96
Tree	final boolean [] cols = problem . getAllParameters () ;
Code	final boolean [] cols = problem . getAllParameters () ;
Distance : 5

97
Tree	final boolean cols = problem . getAllParameters () . length ;
Code	final boolean cols = problem . getAllParameters () . length ;
Distance : 2

98
Tree	final long [] [] cols = problem . getAllParameters ( length , NUMBER_CONSTANT ) ;
Code	final long [] [] cols = problem . getAllParameters ( length , NUMBER_CONSTANT ) ;
Distance : 9

99
Tree	final long [] cols = problem . getAllParameters () ;
Code	final long [] cols = problem . getAllParameters () ;
Distance : 5

========================================================================


========================================================================
Example Number: 2
Parent Code is: 
final BigDecimal [] out = new BigDecimal [ v.length ] ;
-------------------------------------------------------------------------------
Child code is: 
final BigDecimal [] out = new BigDecimal [ nRows ] ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (5 (43 (801{val=BigDecimal})) (85{val=[]})) (59 (800{val=out}) (204{val==}) (3 (304{val=new}) (5 (43 (801{val=BigDecimal})) (221{val=[})) (40{val=v.length}) (222{val=]}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (5 (43 (801{val=BigDecimal})) (85{val=[]})) (59 (800{val=out}) (204{val==}) (3 (304{val=new}) (5 (43 (801{val=BigDecimal})) (221{val=[})) (800{val=nRows}) (222{val=]}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/98/parent/src_java_org_apache_commons_math_linear_BigMatrixImpl.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 16
Correct
========================================================================
True

0
Tree	final BigDecimal [] out = out . clone ( out , null ) ;
Code	final BigDecimal [] out = out . clone ( out , null ) ;
Distance : 8

1
Tree	final BigDecimal [] out = nRows . hashCode ( out , null ) ;
Code	final BigDecimal [] out = nRows . hashCode ( out , null ) ;
Distance : 8

2
Tree	final BigDecimal [] out = nRows . clone ( out , null ) ;
Code	final BigDecimal [] out = nRows . clone ( out , null ) ;
Distance : 8

3
Tree	final BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Distance : 1

4
Tree	final BigDecimal [] out = out . hashCode ( out , null ) ;
Code	final BigDecimal [] out = out . hashCode ( out , null ) ;
Distance : 8

5
Tree	final BigDecimal [] out = new BigDecimal [ out ] ;
Code	final BigDecimal [] out = new BigDecimal [ out ] ;
Distance : 1

6
Tree	protected BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Code	protected BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Distance : 2

7
Tree	private BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Code	private BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Distance : 2

8
Tree	public BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Code	public BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Distance : 2

9
Tree	public BigDecimal [] out = new BigDecimal [ out ] ;
Code	public BigDecimal [] out = new BigDecimal [ out ] ;
Distance : 2

10
Tree	final BigDecimal [] out = new BigDecimal [ nRows ] ;
Code	final BigDecimal [] out = new BigDecimal [ nRows ] ;
Distance : 0

11
Tree	private BigDecimal [] out = new BigDecimal [ v.length ] ;
Code	private BigDecimal [] out = new BigDecimal [ v.length ] ;
Distance : 2

12
Tree	protected BigDecimal [] out = new BigDecimal [ v.length ] ;
Code	protected BigDecimal [] out = new BigDecimal [ v.length ] ;
Distance : 2

13
Tree	public BigDecimal [] out = new BigDecimal [ v.length ] ;
Code	public BigDecimal [] out = new BigDecimal [ v.length ] ;
Distance : 2

14
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ;
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ;
Distance : 1

15
Tree	protected BigDecimal [] out = new BigDecimal [ out ] ;
Code	protected BigDecimal [] out = new BigDecimal [ out ] ;
Distance : 2

========================================================================


========================================================================
Example Number: 3
Parent Code is: 
final double [] out = new double [ v.length ] ;
-------------------------------------------------------------------------------
Child code is: 
final double [] out = new double [ nRows ] ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (5 (39{val=double}) (85{val=[]})) (59 (800{val=out}) (204{val==}) (3 (304{val=new}) (5 (39{val=double}) (221{val=[})) (40{val=v.length}) (222{val=]}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (5 (39{val=double}) (85{val=[]})) (59 (800{val=out}) (204{val==}) (3 (304{val=new}) (5 (39{val=double}) (221{val=[})) (800{val=nRows}) (222{val=]}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/98/parent/src_java_org_apache_commons_math_linear_RealMatrixImpl.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 108
Correct
========================================================================
True

0
Tree	final double [] out = new double [ getField () ] ;
Code	final double [] out = new double [ getField () ] ;
Distance : 2

1
Tree	final double [] out = residualsWeights [ NUMBER_CONSTANT ] . getField () ;
Code	final double [] out = residualsWeights [ NUMBER_CONSTANT ] . getField () ;
Distance : 6

2
Tree	final double [] out = null ;
Code	final double [] out = null ;
Distance : 5

3
Tree	final double [] out = new double [ cov.length () ] ;
Code	final double [] out = new double [ cov.length () ] ;
Distance : 2

4
Tree	final double [] getStartPoint ( final double . . . out ) { return out ; }
Code	final double [] getStartPoint ( final double . . . out ) { return out ; }
Distance : 12

5
Tree	final double [] out = out . computeCovariances ( NUMBER_CONSTANT ) ;
Code	final double [] out = out . computeCovariances ( NUMBER_CONSTANT ) ;
Distance : 6

6
Tree	final double [] out = y0 [ out ] . clone () ;
Code	final double [] out = y0 [ out ] . clone () ;
Distance : 6

7
Tree	final double [] out = out . clone ( NUMBER_CONSTANT ) ;
Code	final double [] out = out . clone ( NUMBER_CONSTANT ) ;
Distance : 6

8
Tree	final double [] out = point ( out , false ) ;
Code	final double [] out = point ( out , false ) ;
Distance : 6

9
Tree	final double [] out = STRING_CONSTANT + out ;
Code	final double [] out = STRING_CONSTANT + out ;
Distance : 5

10
Tree	final double [] out = out . computeCovariances ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = out . computeCovariances ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

11
Tree	final double [] out = clone ( out , v.length ) ;
Code	final double [] out = clone ( out , v.length ) ;
Distance : 6

12
Tree	final double [] out = getInterpolatedState ( out , out ) ;
Code	final double [] out = getInterpolatedState ( out , out ) ;
Distance : 6

13
Tree	final double [] out = nRows ;
Code	final double [] out = nRows ;
Distance : 4

14
Tree	final long [] out = out ;
Code	final long [] out = out ;
Distance : 6

15
Tree	final double [] out = out . computeCovariances ( NUMBER_CONSTANT , v.length ) ;
Code	final double [] out = out . computeCovariances ( NUMBER_CONSTANT , v.length ) ;
Distance : 8

16
Tree	final double [] out = currentResiduals [ out ] ;
Code	final double [] out = currentResiduals [ out ] ;
Distance : 3

17
Tree	final double [] out = clone ( out ) ;
Code	final double [] out = clone ( out ) ;
Distance : 5

18
Tree	final double [] out = currentResiduals [ out ] . clone () ;
Code	final double [] out = currentResiduals [ out ] . clone () ;
Distance : 6

19
Tree	final double [] out = clone ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = clone ( out , NUMBER_CONSTANT ) ;
Distance : 6

20
Tree	final double [] out = out . getInterpolatedState () ;
Code	final double [] out = out . getInterpolatedState () ;
Distance : 5

21
Tree	final double [] out = getStartPoint ( out ) ;
Code	final double [] out = getStartPoint ( out ) ;
Distance : 5

22
Tree	final double [] out = nRows . out ( NUMBER_CONSTANT ) ;
Code	final double [] out = nRows . out ( NUMBER_CONSTANT ) ;
Distance : 6

23
Tree	final long [] out = new double [ out ] ;
Code	final long [] out = new double [ out ] ;
Distance : 2

24
Tree	final double [] out = STRING_CONSTANT + nRows ;
Code	final double [] out = STRING_CONSTANT + nRows ;
Distance : 4

25
Tree	double [] out = new double [ out ] ;
Code	double [] out = new double [ out ] ;
Distance : 2

26
Tree	final long [] out = STRING_CONSTANT + out ;
Code	final long [] out = STRING_CONSTANT + out ;
Distance : 6

27
Tree	long [] out = out . clone () ;
Code	long [] out = out . clone () ;
Distance : 7

28
Tree	protected double [] out = STRING_CONSTANT + out ;
Code	protected double [] out = STRING_CONSTANT + out ;
Distance : 6

29
Tree	final double [] out = getInterpolatedState ( out ) ;
Code	final double [] out = getInterpolatedState ( out ) ;
Distance : 5

30
Tree	final double [] out = residualsWeights [ out ] . clone () ;
Code	final double [] out = residualsWeights [ out ] . clone () ;
Distance : 6

31
Tree	final double [] out = clone ( out , false ) ;
Code	final double [] out = clone ( out , false ) ;
Distance : 6

32
Tree	final double [] out = point ( out , out ) ;
Code	final double [] out = point ( out , out ) ;
Distance : 6

33
Tree	final double [] out = new double [ out . normalize ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ out . normalize ( NUMBER_CONSTANT ) ] ;
Distance : 6

34
Tree	boolean [] out = out . clone () ;
Code	boolean [] out = out . clone () ;
Distance : 7

35
Tree	double [] out = new double [ nRows ] ;
Code	double [] out = new double [ nRows ] ;
Distance : 1

36
Tree	double [] out = out . getInterpolatedState () ;
Code	double [] out = out . getInterpolatedState () ;
Distance : 6

37
Tree	final double [] out = out . clone ( NUMBER_CONSTANT , v.length ) ;
Code	final double [] out = out . clone ( NUMBER_CONSTANT , v.length ) ;
Distance : 8

38
Tree	final double [] out = new double [ v.length ] ;
Code	final double [] out = new double [ v.length ] ;
Distance : 1

39
Tree	final double [] out = out . vertices ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = out . vertices ( out , NUMBER_CONSTANT ) ;
Distance : 8

40
Tree	public double [] out = {} ;
Code	public double [] out = {} ;
Distance : 6

41
Tree	protected double [] out = new double [ out ] ;
Code	protected double [] out = new double [ out ] ;
Distance : 2

42
Tree	final double [] out = out . vertices ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = out . vertices ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

43
Tree	public double [] out = out ;
Code	public double [] out = out ;
Distance : 6

44
Tree	final double [] out = new double [ out . min ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ out . min ( NUMBER_CONSTANT ) ] ;
Distance : 6

45
Tree	final double [] out = getStartPoint ( out , v.length ) ;
Code	final double [] out = getStartPoint ( out , v.length ) ;
Distance : 6

46
Tree	final double [] out = getStartPoint ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = getStartPoint ( out , NUMBER_CONSTANT ) ;
Distance : 6

47
Tree	boolean [] out = new double [ out ] ;
Code	boolean [] out = new double [ out ] ;
Distance : 3

48
Tree	final double [] out = out . computeCovariances ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = out . computeCovariances ( out , NUMBER_CONSTANT ) ;
Distance : 8

49
Tree	protected double [] out = null ;
Code	protected double [] out = null ;
Distance : 6

50
Tree	final double [] out = out . getInterpolatedState ( out , v.length ) ;
Code	final double [] out = out . getInterpolatedState ( out , v.length ) ;
Distance : 8

51
Tree	final double [] out = out . nRows ( NUMBER_CONSTANT ) ;
Code	final double [] out = out . nRows ( NUMBER_CONSTANT ) ;
Distance : 6

52
Tree	final double [] out = getStartPoint ( out , false ) ;
Code	final double [] out = getStartPoint ( out , false ) ;
Distance : 6

53
Tree	protected double [] out = {} ;
Code	protected double [] out = {} ;
Distance : 6

54
Tree	final double [] getOrderOfRegressors ( final double . . . out ) { return out ; }
Code	final double [] getOrderOfRegressors ( final double . . . out ) { return out ; }
Distance : 12

55
Tree	final double [] out = buildArray ( out , v.length ) ;
Code	final double [] out = buildArray ( out , v.length ) ;
Distance : 6

56
Tree	final double [] out = weightedResidualJacobian [ out ] . clone () ;
Code	final double [] out = weightedResidualJacobian [ out ] . clone () ;
Distance : 6

57
Tree	final double [] out = new double [ out ] ;
Code	final double [] out = new double [ out ] ;
Distance : 1

58
Tree	final double [] out = out . getInterpolatedState ( NUMBER_CONSTANT ) ;
Code	final double [] out = out . getInterpolatedState ( NUMBER_CONSTANT ) ;
Distance : 6

59
Tree	final double [] out = new double [ nRows ] ;
Code	final double [] out = new double [ nRows ] ;
Distance : 0

60
Tree	final double [] out = out . clone () ;
Code	final double [] out = out . clone () ;
Distance : 5

61
Tree	final double [] out = out . clone ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = out . clone ( out , NUMBER_CONSTANT ) ;
Distance : 8

62
Tree	final double [] out = out . vertices ( out , v.length ) ;
Code	final double [] out = out . vertices ( out , v.length ) ;
Distance : 8

63
Tree	final double [] out = out . vertices ( NUMBER_CONSTANT ) ;
Code	final double [] out = out . vertices ( NUMBER_CONSTANT ) ;
Distance : 6

64
Tree	final double [] out = out . getInterpolatedState ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = out . getInterpolatedState ( out , NUMBER_CONSTANT ) ;
Distance : 8

65
Tree	final double [] out = out . computeCovariances ( out , v.length ) ;
Code	final double [] out = out . computeCovariances ( out , v.length ) ;
Distance : 8

66
Tree	final double [] out = out . clone ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = out . clone ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

67
Tree	final double [] out = y0 [ out ] ;
Code	final double [] out = y0 [ out ] ;
Distance : 3

68
Tree	final long [] out = null ;
Code	final long [] out = null ;
Distance : 6

69
Tree	final double [] out = new double [ out . getPole ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ out . getPole ( NUMBER_CONSTANT ) ] ;
Distance : 6

70
Tree	final double [] out = out . out ( NUMBER_CONSTANT ) ;
Code	final double [] out = out . out ( NUMBER_CONSTANT ) ;
Distance : 6

71
Tree	final double [] out = out . getInterpolatedState ( NUMBER_CONSTANT , v.length ) ;
Code	final double [] out = out . getInterpolatedState ( NUMBER_CONSTANT , v.length ) ;
Distance : 8

72
Tree	final double [] out = residualsWeights [ NUMBER_CONSTANT ] . clone () ;
Code	final double [] out = residualsWeights [ NUMBER_CONSTANT ] . clone () ;
Distance : 6

73
Tree	final double [] out = new double [ mainSetDimension () ] ;
Code	final double [] out = new double [ mainSetDimension () ] ;
Distance : 2

74
Tree	final double [] out = out ;
Code	final double [] out = out ;
Distance : 5

75
Tree	long [] out = new double [ out ] ;
Code	long [] out = new double [ out ] ;
Distance : 3

76
Tree	final long [] out = new double [ v.length ] ;
Code	final long [] out = new double [ v.length ] ;
Distance : 2

77
Tree	final long [] out = out . out ( NUMBER_CONSTANT ) ;
Code	final long [] out = out . out ( NUMBER_CONSTANT ) ;
Distance : 7

78
Tree	final double [] out = weightedResidualJacobian [ out ] ;
Code	final double [] out = weightedResidualJacobian [ out ] ;
Distance : 3

79
Tree	double [] out = out . clone () ;
Code	double [] out = out . clone () ;
Distance : 6

80
Tree	final double [] getEigenvalues ( final double . . . out ) { return out ; }
Code	final double [] getEigenvalues ( final double . . . out ) { return out ; }
Distance : 12

81
Tree	public double [] out = new double [ v.length ] ;
Code	public double [] out = new double [ v.length ] ;
Distance : 2

82
Tree	final double [] out = out . getInterpolatedState ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = out . getInterpolatedState ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

83
Tree	final double [] out = new double [ getUpperBound () ] ;
Code	final double [] out = new double [ getUpperBound () ] ;
Distance : 2

84
Tree	final double [] out = point ( out ) ;
Code	final double [] out = point ( out ) ;
Distance : 5

85
Tree	final double [] out = new double [ v.length ] ;
Code	final double [] out = new double [ v.length ] ;
Distance : 1

86
Tree	final double [] out = getInterpolatedState ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = getInterpolatedState ( out , NUMBER_CONSTANT ) ;
Distance : 6

87
Tree	final double [] getUpperBound ( final double . . . out ) { return out ; }
Code	final double [] getUpperBound ( final double . . . out ) { return out ; }
Distance : 12

88
Tree	final double [] out = point ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = point ( out , NUMBER_CONSTANT ) ;
Distance : 6

89
Tree	final double [] out = getInterpolatedState ( out , false ) ;
Code	final double [] out = getInterpolatedState ( out , false ) ;
Distance : 6

90
Tree	final long [] out = new double [ v.length ] ;
Code	final long [] out = new double [ v.length ] ;
Distance : 2

91
Tree	final double [] out = weightedResidualJacobian [ NUMBER_CONSTANT ] . getField () ;
Code	final double [] out = weightedResidualJacobian [ NUMBER_CONSTANT ] . getField () ;
Distance : 6

92
Tree	final double [] out = new double [ out . clone ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ out . clone ( NUMBER_CONSTANT ) ] ;
Distance : 6

93
Tree	final double [] out = out . computeCovariances () ;
Code	final double [] out = out . computeCovariances () ;
Distance : 5

94
Tree	final double [] out = weightedResidualJacobian [ NUMBER_CONSTANT ] . clone () ;
Code	final double [] out = weightedResidualJacobian [ NUMBER_CONSTANT ] . clone () ;
Distance : 6

95
Tree	final double [] out = out . vertices ( NUMBER_CONSTANT , v.length ) ;
Code	final double [] out = out . vertices ( NUMBER_CONSTANT , v.length ) ;
Distance : 8

96
Tree	final double [] out = getStartPoint ( out , out ) ;
Code	final double [] out = getStartPoint ( out , out ) ;
Distance : 6

97
Tree	final double [] out = clone ( out , out ) ;
Code	final double [] out = clone ( out , out ) ;
Distance : 6

98
Tree	final double [] out = point ( out , v.length ) ;
Code	final double [] out = point ( out , v.length ) ;
Distance : 6

99
Tree	final double [] out = out . clone ( out , v.length ) ;
Code	final double [] out = out . clone ( out , v.length ) ;
Distance : 8

100
Tree	final double [] out = residualsWeights [ out ] ;
Code	final double [] out = residualsWeights [ out ] ;
Distance : 3

101
Tree	public double [] out = new double [ v.length ] ;
Code	public double [] out = new double [ v.length ] ;
Distance : 2

102
Tree	final double [] out = out . vertices () ;
Code	final double [] out = out . vertices () ;
Distance : 5

103
Tree	protected double [] out = new double [ v.length ] ;
Code	protected double [] out = new double [ v.length ] ;
Distance : 2

104
Tree	final double [] out = {} ;
Code	final double [] out = {} ;
Distance : 5

105
Tree	protected double [] out = new double [ v.length ] ;
Code	protected double [] out = new double [ v.length ] ;
Distance : 2

106
Tree	public double [] out = null ;
Code	public double [] out = null ;
Distance : 6

107
Tree	final long [] out = {} ;
Code	final long [] out = {} ;
Distance : 6

========================================================================


========================================================================
Example Number: 4
Parent Code is: 
int start = getNumObjectiveFunctions () ;
-------------------------------------------------------------------------------
Child code is: 
int start = ignoreObjectiveRows ? getNumObjectiveFunctions () : NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=start}) (204{val==}) (32 (802{val=getNumObjectiveFunctions}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=start}) (204{val==}) (16 (800{val=ignoreObjectiveRows}) (233{val=?}) (32 (802{val=getNumObjectiveFunctions}) (216{val=()})) (226{val=:}) (34{val=NUMBER_CONSTANT}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/83/parent/src_main_java_org_apache_commons_math_optimization_linear_SimplexTableau.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 100
Wrong
========================================================================
False

0
Tree	int start ;
Code	int start ;
Distance : 7

1
Tree	int += ;
Code	int += ;
Distance : 8

2
Tree	int start = NUMBER_CONSTANT ;
Code	int start = NUMBER_CONSTANT ;
Distance : 5

3
Tree	int double ;
Code	int double ;
Distance : 8

4
Tree	int start = getNumObjectiveFunctions ;
Code	int start = getNumObjectiveFunctions ;
Distance : 5

5
Tree	long start = NUMBER_CONSTANT ;
Code	long start = NUMBER_CONSTANT ;
Distance : 6

6
Tree	final City [] start ;
Code	final City [] start ;
Distance : 9

7
Tree	int [] start = getNumObjectiveFunctions () ;
Code	int [] start = getNumObjectiveFunctions () ;
Distance : 5

8
Tree	i [] start = getNumObjectiveFunctions () ;
Code	i [] start = getNumObjectiveFunctions () ;
Distance : 6

9
Tree	final divisor.mant [] start ;
Code	final divisor.mant [] start ;
Distance : 9

10
Tree	int start = null ;
Code	int start = null ;
Distance : 6

11
Tree	final int start = getNumObjectiveFunctions () ;
Code	final int start = getNumObjectiveFunctions () ;
Distance : 5

12
Tree	int start = start ;
Code	int start = start ;
Distance : 6

13
Tree	int start = PivotSelectionRule.DANTZIG ;
Code	int start = PivotSelectionRule.DANTZIG ;
Distance : 6

14
Tree	long start = this . start ;
Code	long start = this . start ;
Distance : 7

15
Tree	long += ;
Code	long += ;
Distance : 9

16
Tree	start start = getNumObjectiveFunctions () ;
Code	start start = getNumObjectiveFunctions () ;
Distance : 5

17
Tree	int [] start = getNumObjectiveFunctions () ;
Code	int [] start = getNumObjectiveFunctions () ;
Distance : 5

18
Tree	int start = getNumObjectiveFunctions () . start ;
Code	int start = getNumObjectiveFunctions () . start ;
Distance : 4

19
Tree	double start = start + NUMBER_CONSTANT ;
Code	double start = start + NUMBER_CONSTANT ;
Distance : 6

20
Tree	final double start ;
Code	final double start ;
Distance : 9

21
Tree	final long start = start ;
Code	final long start = start ;
Distance : 8

22
Tree	int start = getNumObjectiveFunctions + NUMBER_CONSTANT ;
Code	int start = getNumObjectiveFunctions + NUMBER_CONSTANT ;
Distance : 4

23
Tree	int
Code	int
Distance : 9

24
Tree	final double start = getNumObjectiveFunctions () ;
Code	final double start = getNumObjectiveFunctions () ;
Distance : 6

25
Tree	double start = getNumObjectiveFunctions () . start ;
Code	double start = getNumObjectiveFunctions () . start ;
Distance : 5

26
Tree	double start = null ;
Code	double start = null ;
Distance : 7

27
Tree	Coordinates3D [] start = getNumObjectiveFunctions () ;
Code	Coordinates3D [] start = getNumObjectiveFunctions () ;
Distance : 6

28
Tree	final start < start > start = getNumObjectiveFunctions () ;
Code	final start < start > start = getNumObjectiveFunctions () ;
Distance : 8

29
Tree	int start = getNumObjectiveFunctions () ;
Code	int start = getNumObjectiveFunctions () ;
Distance : 4

30
Tree	long start = getNumObjectiveFunctions () ;
Code	long start = getNumObjectiveFunctions () ;
Distance : 5

31
Tree	boolean start = getNumObjectiveFunctions () . start ;
Code	boolean start = getNumObjectiveFunctions () . start ;
Distance : 5

32
Tree	int start = getNumObjectiveFunctions () ;
Code	int start = getNumObjectiveFunctions () ;
Distance : 4

33
Tree	int start = start + NUMBER_CONSTANT ;
Code	int start = start + NUMBER_CONSTANT ;
Distance : 5

34
Tree	long start = getNumObjectiveFunctions () ;
Code	long start = getNumObjectiveFunctions () ;
Distance : 5

35
Tree	double start = start ;
Code	double start = start ;
Distance : 7

36
Tree	final City [] start = getNumObjectiveFunctions () ;
Code	final City [] start = getNumObjectiveFunctions () ;
Distance : 7

37
Tree	long start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Code	long start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Distance : 4

38
Tree	int ! ;
Code	int ! ;
Distance : 8

39
Tree	long [] start = getNumObjectiveFunctions () ;
Code	long [] start = getNumObjectiveFunctions () ;
Distance : 6

40
Tree	boolean start = getNumObjectiveFunctions () ;
Code	boolean start = getNumObjectiveFunctions () ;
Distance : 5

41
Tree	final long start = getNumObjectiveFunctions () ;
Code	final long start = getNumObjectiveFunctions () ;
Distance : 6

42
Tree	double start = getNumObjectiveFunctions () ;
Code	double start = getNumObjectiveFunctions () ;
Distance : 5

43
Tree	final divisor.mant [] start = getNumObjectiveFunctions () ;
Code	final divisor.mant [] start = getNumObjectiveFunctions () ;
Distance : 7

44
Tree	final start < getNumObjectiveFunctions > start = getNumObjectiveFunctions () ;
Code	final start < getNumObjectiveFunctions > start = getNumObjectiveFunctions () ;
Distance : 8

45
Tree	final int start = getNumObjectiveFunctions ;
Code	final int start = getNumObjectiveFunctions ;
Distance : 6

46
Tree	final double start = start ;
Code	final double start = start ;
Distance : 8

47
Tree	final boolean start = getNumObjectiveFunctions () ;
Code	final boolean start = getNumObjectiveFunctions () ;
Distance : 6

48
Tree	double start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Code	double start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Distance : 4

49
Tree	double start = getNumObjectiveFunctions () ;
Code	double start = getNumObjectiveFunctions () ;
Distance : 5

50
Tree	final long start ;
Code	final long start ;
Distance : 9

51
Tree	Coordinates3D
Code	Coordinates3D
Distance : 10

52
Tree	int start = source.contractionCriterion ;
Code	int start = source.contractionCriterion ;
Distance : 6

53
Tree	boolean start = null ;
Code	boolean start = null ;
Distance : 7

54
Tree	final start start = getNumObjectiveFunctions () ;
Code	final start start = getNumObjectiveFunctions () ;
Distance : 6

55
Tree	final ScalarPointValuePair [] start = getNumObjectiveFunctions () ;
Code	final ScalarPointValuePair [] start = getNumObjectiveFunctions () ;
Distance : 7

56
Tree	int start = StepNormalizerMode.MULTIPLES ;
Code	int start = StepNormalizerMode.MULTIPLES ;
Distance : 6

57
Tree	double start ;
Code	double start ;
Distance : 8

58
Tree	final boolean start ;
Code	final boolean start ;
Distance : 9

59
Tree	final int start = start ;
Code	final int start = start ;
Distance : 7

60
Tree	boolean start = this . start ;
Code	boolean start = this . start ;
Distance : 7

61
Tree	boolean start = NUMBER_CONSTANT ;
Code	boolean start = NUMBER_CONSTANT ;
Distance : 6

62
Tree	boolean start = getNumObjectiveFunctions () ;
Code	boolean start = getNumObjectiveFunctions () ;
Distance : 5

63
Tree	public start < start > start = getNumObjectiveFunctions () ;
Code	public start < start > start = getNumObjectiveFunctions () ;
Distance : 8

64
Tree	start < start > start = getNumObjectiveFunctions () ;
Code	start < start > start = getNumObjectiveFunctions () ;
Distance : 7

65
Tree	long start = start + NUMBER_CONSTANT ;
Code	long start = start + NUMBER_CONSTANT ;
Distance : 6

66
Tree	final ScalarPointValuePair [] start ;
Code	final ScalarPointValuePair [] start ;
Distance : 9

67
Tree	UnivariateFunction
Code	UnivariateFunction
Distance : 10

68
Tree	final int start ;
Code	final int start ;
Distance : 8

69
Tree	start < start > start = getNumObjectiveFunctions () ;
Code	start < start > start = getNumObjectiveFunctions () ;
Distance : 7

70
Tree	final
Code	final
Distance : 10

71
Tree	final [] start = getNumObjectiveFunctions () ;
Code	final [] start = getNumObjectiveFunctions () ;
Distance : 6

72
Tree	final UnivariateStatistic [] start ;
Code	final UnivariateStatistic [] start ;
Distance : 9

73
Tree	public start start = getNumObjectiveFunctions () ;
Code	public start start = getNumObjectiveFunctions () ;
Distance : 6

74
Tree	long start = null ;
Code	long start = null ;
Distance : 7

75
Tree	int start = new VanishingToLeaf () ;
Code	int start = new VanishingToLeaf () ;
Distance : 5

76
Tree	start start = getNumObjectiveFunctions () ;
Code	start start = getNumObjectiveFunctions () ;
Distance : 5

77
Tree	long start = start ;
Code	long start = start ;
Distance : 7

78
Tree	int start = new MicrosphereInterpolator () ;
Code	int start = new MicrosphereInterpolator () ;
Distance : 5

79
Tree	start start = getNumObjectiveFunctions () ;
Code	start start = getNumObjectiveFunctions () ;
Distance : 5

80
Tree	long start ;
Code	long start ;
Distance : 8

81
Tree	boolean start ;
Code	boolean start ;
Distance : 8

82
Tree	int start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Code	int start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Distance : 3

83
Tree	final start start = getNumObjectiveFunctions () ;
Code	final start start = getNumObjectiveFunctions () ;
Distance : 6

84
Tree	int start = new RealVectorFormat () ;
Code	int start = new RealVectorFormat () ;
Distance : 5

85
Tree	int start = this . start ;
Code	int start = this . start ;
Distance : 6

86
Tree	int start = ExpansionMode.MULTIPLICATIVE ;
Code	int start = ExpansionMode.MULTIPLICATIVE ;
Distance : 6

87
Tree	start < start > start = getNumObjectiveFunctions () ;
Code	start < start > start = getNumObjectiveFunctions () ;
Distance : 7

88
Tree	double [] start = getNumObjectiveFunctions () ;
Code	double [] start = getNumObjectiveFunctions () ;
Distance : 6

89
Tree	long start = getNumObjectiveFunctions () . start ;
Code	long start = getNumObjectiveFunctions () . start ;
Distance : 5

90
Tree	int start = getNumObjectiveFunctions () ;
Code	int start = getNumObjectiveFunctions () ;
Distance : 4

91
Tree	final UnivariateStatistic [] start = getNumObjectiveFunctions () ;
Code	final UnivariateStatistic [] start = getNumObjectiveFunctions () ;
Distance : 7

92
Tree	start < getNumObjectiveFunctions > start = getNumObjectiveFunctions () ;
Code	start < getNumObjectiveFunctions > start = getNumObjectiveFunctions () ;
Distance : 8

93
Tree	double start = NUMBER_CONSTANT ;
Code	double start = NUMBER_CONSTANT ;
Distance : 6

94
Tree	int start = new MinpackMeasurement () ;
Code	int start = new MinpackMeasurement () ;
Distance : 5

95
Tree	double start = this . start ;
Code	double start = this . start ;
Distance : 7

96
Tree	boolean start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Code	boolean start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Distance : 4

97
Tree	final start start = getNumObjectiveFunctions () ;
Code	final start start = getNumObjectiveFunctions () ;
Distance : 6

98
Tree	boolean [] start = getNumObjectiveFunctions () ;
Code	boolean [] start = getNumObjectiveFunctions () ;
Distance : 6

99
Tree	final start < start > start = getNumObjectiveFunctions () ;
Code	final start < start > start = getNumObjectiveFunctions () ;
Distance : 8

========================================================================


========================================================================
Example Number: 5
Parent Code is: 
int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Child code is: 
int j = NUMBER_CONSTANT * ( n - NUMBER_CONSTANT ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=j}) (204{val==}) (27 (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (800{val=n})) (201{val=-}) (34{val=NUMBER_CONSTANT}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=j}) (204{val==}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (36 (214{val=(}) (27 (800{val=n}) (201{val=-}) (34{val=NUMBER_CONSTANT})) (215{val=)})))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/80/parent/src_main_java_org_apache_commons_math_linear_EigenDecompositionImpl.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 124
Wrong
========================================================================
False

0
Tree	int j = n / j - j ;
Code	int j = n / j - j ;
Distance : 6

1
Tree	int j = NUMBER_CONSTANT * n - n ;
Code	int j = NUMBER_CONSTANT * n - n ;
Distance : 3

2
Tree	int j = n * n - n ;
Code	int j = n * n - n ;
Distance : 4

3
Tree	int j = NUMBER_CONSTANT * n - j ;
Code	int j = NUMBER_CONSTANT * n - j ;
Distance : 3

4
Tree	int j = ( int ) n * xbar ;
Code	int j = ( int ) n * xbar ;
Distance : 6

5
Tree	int j = ( int ) n * columns ;
Code	int j = ( int ) n * columns ;
Distance : 6

6
Tree	int j = n == NUMBER_CONSTANT - n ;
Code	int j = n == NUMBER_CONSTANT - n ;
Distance : 6

7
Tree	int j = n + j - n ;
Code	int j = n + j - n ;
Distance : 6

8
Tree	int j = n < FACT.length - j ;
Code	int j = n < FACT.length - j ;
Distance : 6

9
Tree	boolean j = n / j - NUMBER_CONSTANT ;
Code	boolean j = n / j - NUMBER_CONSTANT ;
Distance : 6

10
Tree	int j = n != NUMBER_CONSTANT ;
Code	int j = n != NUMBER_CONSTANT ;
Distance : 5

11
Tree	double j = n & NUMBER_CONSTANT - n ;
Code	double j = n & NUMBER_CONSTANT - n ;
Distance : 7

12
Tree	int j = val.length - Cartesian1D.ZERO - n ;
Code	int j = val.length - Cartesian1D.ZERO - n ;
Distance : 6

13
Tree	int j = coefficients.length - Cartesian1D.ZERO - n ;
Code	int j = coefficients.length - Cartesian1D.ZERO - n ;
Distance : 6

14
Tree	int j = val.length int LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED - n ;
Code	int j = val.length int LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED - n ;
Distance : 6

15
Tree	int j = ( int ) n * Factorial ;
Code	int j = ( int ) n * Factorial ;
Distance : 6

16
Tree	long j = n ^ n - n ;
Code	long j = n ^ n - n ;
Distance : 6

17
Tree	double j = n & NUMBER_CONSTANT ;
Code	double j = n & NUMBER_CONSTANT ;
Distance : 6

18
Tree	int j = n == Double.MAX_VALUE - j ;
Code	int j = n == Double.MAX_VALUE - j ;
Distance : 6

19
Tree	int j = NUMBER_CONSTANT * currentState.length - j ;
Code	int j = NUMBER_CONSTANT * currentState.length - j ;
Distance : 4

20
Tree	int j = n == val.length - j ;
Code	int j = n == val.length - j ;
Distance : 6

21
Tree	int j = n . getDimension ( j , n , n ) >= NUMBER_CONSTANT ;
Code	int j = n . getDimension ( j , n , n ) >= NUMBER_CONSTANT ;
Distance : 9

22
Tree	int j = ( int ) observed1.length * v2.x - j ;
Code	int j = ( int ) observed1.length * v2.x - j ;
Distance : 8

23
Tree	long j = n / j - j ;
Code	long j = n / j - j ;
Distance : 7

24
Tree	double j = getDimension ( n , n , n ) / n ;
Code	double j = getDimension ( n , n , n ) / n ;
Distance : 9

25
Tree	long j = n / j - NUMBER_CONSTANT ;
Code	long j = n / j - NUMBER_CONSTANT ;
Distance : 6

26
Tree	int j = n + j . clone ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n + j . clone ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

27
Tree	int j = n / j - NUMBER_CONSTANT ;
Code	int j = n / j - NUMBER_CONSTANT ;
Distance : 5

28
Tree	int j = getDimension ( n , n , j ) >= NUMBER_CONSTANT ;
Code	int j = getDimension ( n , n , j ) >= NUMBER_CONSTANT ;
Distance : 8

29
Tree	double j = getDimension ( n , n , n ) >= NUMBER_CONSTANT ;
Code	double j = getDimension ( n , n , n ) >= NUMBER_CONSTANT ;
Distance : 9

30
Tree	int j = n ^ n - j ;
Code	int j = n ^ n - j ;
Distance : 5

31
Tree	int j = n . abs ( j , n , n ) >= NUMBER_CONSTANT ;
Code	int j = n . abs ( j , n , n ) >= NUMBER_CONSTANT ;
Distance : 9

32
Tree	long j = n + j - n ;
Code	long j = n + j - n ;
Distance : 7

33
Tree	int j = ( int ) observed1.length * y.length - j ;
Code	int j = ( int ) observed1.length * y.length - j ;
Distance : 8

34
Tree	long j = n == NUMBER_CONSTANT - n ;
Code	long j = n == NUMBER_CONSTANT - n ;
Distance : 7

35
Tree	int j = n < Double.MAX_VALUE - j ;
Code	int j = n < Double.MAX_VALUE - j ;
Distance : 6

36
Tree	int j = n + j . getDimension ( j , n , NUMBER_CONSTANT ) + n - j ;
Code	int j = n + j . getDimension ( j , n , NUMBER_CONSTANT ) + n - j ;
Distance : 12

37
Tree	int j = n - j - n ;
Code	int j = n - j - n ;
Distance : 6

38
Tree	int j = ( int ) observed1.length * LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED - j ;
Code	int j = ( int ) observed1.length * LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED - j ;
Distance : 8

39
Tree	int j = n * n - j ;
Code	int j = n * n - j ;
Distance : 4

40
Tree	double j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Code	double j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Distance : 6

41
Tree	int j = coefficients.length + LocalizedFormats.NUMBER_TOO_SMALL - j ;
Code	int j = coefficients.length + LocalizedFormats.NUMBER_TOO_SMALL - j ;
Distance : 6

42
Tree	double j = n != NUMBER_CONSTANT ;
Code	double j = n != NUMBER_CONSTANT ;
Distance : 6

43
Tree	long j = n * n - n ;
Code	long j = n * n - n ;
Distance : 5

44
Tree	long j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	long j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 3

45
Tree	long j = n & NUMBER_CONSTANT ;
Code	long j = n & NUMBER_CONSTANT ;
Distance : 6

46
Tree	int j = NUMBER_CONSTANT + NUMBER_CONSTANT - j ;
Code	int j = NUMBER_CONSTANT + NUMBER_CONSTANT - j ;
Distance : 5

47
Tree	int j = getDimension ( n , n , j ) / n ;
Code	int j = getDimension ( n , n , j ) / n ;
Distance : 8

48
Tree	int j = n / j - n ;
Code	int j = n / j - n ;
Distance : 6

49
Tree	int j = n + j . value ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n + j . value ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

50
Tree	int j = coefficients.length - LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED - n ;
Code	int j = coefficients.length - LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED - n ;
Distance : 6

51
Tree	int j = n + j . clone ( j , n , n ) + n - j ;
Code	int j = n + j . clone ( j , n , n ) + n - j ;
Distance : 13

52
Tree	double j = NUMBER_CONSTANT * n - n ;
Code	double j = NUMBER_CONSTANT * n - n ;
Distance : 4

53
Tree	long j = n - j - n ;
Code	long j = n - j - n ;
Distance : 7

54
Tree	int j = n + j - j ;
Code	int j = n + j - j ;
Distance : 6

55
Tree	int j = coefficients.length + Vector1D.ZERO - j ;
Code	int j = coefficients.length + Vector1D.ZERO - j ;
Distance : 6

56
Tree	double j = STRING_CONSTANT + j + STRING_CONSTANT + STRING_CONSTANT - j ;
Code	double j = STRING_CONSTANT + j + STRING_CONSTANT + STRING_CONSTANT - j ;
Distance : 10

57
Tree	long j = n & NUMBER_CONSTANT - n ;
Code	long j = n & NUMBER_CONSTANT - n ;
Distance : 7

58
Tree	int j = n + j . getOffset ( j , n , n ) + n - j ;
Code	int j = n + j . getOffset ( j , n , n ) + n - j ;
Distance : 13

59
Tree	int j = getDimension ( j , n , n ) >= NUMBER_CONSTANT ;
Code	int j = getDimension ( j , n , n ) >= NUMBER_CONSTANT ;
Distance : 8

60
Tree	int j = n == NUMBER_CONSTANT - j ;
Code	int j = n == NUMBER_CONSTANT - j ;
Distance : 6

61
Tree	int j = n n n . getDimension ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n n n . getDimension ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

62
Tree	int j = NUMBER_CONSTANT * coefficients.length - j ;
Code	int j = NUMBER_CONSTANT * coefficients.length - j ;
Distance : 4

63
Tree	int j = getDimension ( j , n , n ) / n ;
Code	int j = getDimension ( j , n , n ) / n ;
Distance : 8

64
Tree	int j = n + j . clone ( j , n , NUMBER_CONSTANT ) + n - j ;
Code	int j = n + j . clone ( j , n , NUMBER_CONSTANT ) + n - j ;
Distance : 12

65
Tree	int j = FACT.length + Vector1D.ZERO - j ;
Code	int j = FACT.length + Vector1D.ZERO - j ;
Distance : 6

66
Tree	int j = NUMBER_CONSTANT * n - j - j ;
Code	int j = NUMBER_CONSTANT * n - j - j ;
Distance : 4

67
Tree	int j = getDimension ( n , n , n ) / n ;
Code	int j = getDimension ( n , n , n ) / n ;
Distance : 8

68
Tree	int j = NUMBER_CONSTANT * n - j - n ;
Code	int j = NUMBER_CONSTANT * n - j - n ;
Distance : 4

69
Tree	long j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	long j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 3

70
Tree	int j = n ^ n - n ;
Code	int j = n ^ n - n ;
Distance : 5

71
Tree	int j = NUMBER_CONSTANT * Double.MIN_VALUE - j ;
Code	int j = NUMBER_CONSTANT * Double.MIN_VALUE - j ;
Distance : 4

72
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 2

73
Tree	double j = n / j - j ;
Code	double j = n / j - j ;
Distance : 7

74
Tree	int j = n + j . getDimension ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n + j . getDimension ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

75
Tree	boolean j = n & NUMBER_CONSTANT ;
Code	boolean j = n & NUMBER_CONSTANT ;
Distance : 6

76
Tree	int j = n + j . getOffset ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n + j . getOffset ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

77
Tree	int j = getDimension ( n , n , n ) >= NUMBER_CONSTANT ;
Code	int j = getDimension ( n , n , n ) >= NUMBER_CONSTANT ;
Distance : 8

78
Tree	int j = n n n . get ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n n n . get ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

79
Tree	int j = ( n < < NUMBER_CONSTANT ) + n - j ;
Code	int j = ( n < < NUMBER_CONSTANT ) + n - j ;
Distance : 8

80
Tree	int j = STRING_CONSTANT + j + STRING_CONSTANT + STRING_CONSTANT - j ;
Code	int j = STRING_CONSTANT + j + STRING_CONSTANT + STRING_CONSTANT - j ;
Distance : 9

81
Tree	int j = val.length + Vector1D.ZERO - j ;
Code	int j = val.length + Vector1D.ZERO - j ;
Distance : 6

82
Tree	double j = n / j - NUMBER_CONSTANT ;
Code	double j = n / j - NUMBER_CONSTANT ;
Distance : 6

83
Tree	int j = n . getRealEigenvalues ( j , n , n ) >= NUMBER_CONSTANT ;
Code	int j = n . getRealEigenvalues ( j , n , n ) >= NUMBER_CONSTANT ;
Distance : 9

84
Tree	int j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Code	int j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Distance : 5

85
Tree	int j = n . getEpsilon ( j , n , n ) >= NUMBER_CONSTANT ;
Code	int j = n . getEpsilon ( j , n , n ) >= NUMBER_CONSTANT ;
Distance : 9

86
Tree	int j = ( int ) n * double ;
Code	int j = ( int ) n * double ;
Distance : 6

87
Tree	int j = n + j . getOffset ( j , n , NUMBER_CONSTANT ) + n - j ;
Code	int j = n + j . getOffset ( j , n , NUMBER_CONSTANT ) + n - j ;
Distance : 12

88
Tree	double j = n * n - n ;
Code	double j = n * n - n ;
Distance : 5

89
Tree	double j = ( n < < NUMBER_CONSTANT ) + n - j ;
Code	double j = ( n < < NUMBER_CONSTANT ) + n - j ;
Distance : 9

90
Tree	int j = n == FACT.length - j ;
Code	int j = n == FACT.length - j ;
Distance : 6

91
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 2

92
Tree	int j = n + j . getDimension ( j , n , n ) + n - j ;
Code	int j = n + j . getDimension ( j , n , n ) + n - j ;
Distance : 13

93
Tree	int j = n < coefficients.length - j ;
Code	int j = n < coefficients.length - j ;
Distance : 6

94
Tree	double j = NUMBER_CONSTANT * n - j ;
Code	double j = NUMBER_CONSTANT * n - j ;
Distance : 4

95
Tree	int j = n == coefficients.length - j ;
Code	int j = n == coefficients.length - j ;
Distance : 6

96
Tree	double j = n == NUMBER_CONSTANT - n ;
Code	double j = n == NUMBER_CONSTANT - n ;
Distance : 7

97
Tree	double j = n - j - n ;
Code	double j = n - j - n ;
Distance : 7

98
Tree	double j = n + j - n ;
Code	double j = n + j - n ;
Distance : 7

99
Tree	int j = n n n . dotProduct ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n n n . dotProduct ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

100
Tree	int j = n & NUMBER_CONSTANT - n ;
Code	int j = n & NUMBER_CONSTANT - n ;
Distance : 6

101
Tree	int j = n & NUMBER_CONSTANT ;
Code	int j = n & NUMBER_CONSTANT ;
Distance : 5

102
Tree	long j = STRING_CONSTANT + j + STRING_CONSTANT + STRING_CONSTANT - j ;
Code	long j = STRING_CONSTANT + j + STRING_CONSTANT + STRING_CONSTANT - j ;
Distance : 10

103
Tree	int j = n + j . value ( j , n , NUMBER_CONSTANT ) + n - j ;
Code	int j = n + j . value ( j , n , NUMBER_CONSTANT ) + n - j ;
Distance : 12

104
Tree	int j = NUMBER_CONSTANT * n - n - j ;
Code	int j = NUMBER_CONSTANT * n - n - j ;
Distance : 4

105
Tree	long j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Code	long j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Distance : 6

106
Tree	long j = ( n < < NUMBER_CONSTANT ) + n - j ;
Code	long j = ( n < < NUMBER_CONSTANT ) + n - j ;
Distance : 9

107
Tree	int j = NUMBER_CONSTANT * val.length - j ;
Code	int j = NUMBER_CONSTANT * val.length - j ;
Distance : 4

108
Tree	int j = n - j - j ;
Code	int j = n - j - j ;
Distance : 6

109
Tree	int j = NUMBER_CONSTANT * n - n - n ;
Code	int j = NUMBER_CONSTANT * n - n - n ;
Distance : 4

110
Tree	double j = n ^ n - n ;
Code	double j = n ^ n - n ;
Distance : 6

111
Tree	boolean j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	boolean j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 3

112
Tree	int j = n < PivotSelectionRule.BLAND - j ;
Code	int j = n < PivotSelectionRule.BLAND - j ;
Distance : 6

113
Tree	int j = STRING_CONSTANT + n + STRING_CONSTANT + STRING_CONSTANT - j ;
Code	int j = STRING_CONSTANT + n + STRING_CONSTANT + STRING_CONSTANT - j ;
Distance : 9

114
Tree	int j = n + j . value ( j , n , n ) + n - j ;
Code	int j = n + j . value ( j , n , n ) + n - j ;
Distance : 13

115
Tree	boolean j = ( n < < NUMBER_CONSTANT ) + n - j ;
Code	boolean j = ( n < < NUMBER_CONSTANT ) + n - j ;
Distance : 9

116
Tree	int j = ( int ) observed1.length * FastMath.PI - j ;
Code	int j = ( int ) observed1.length * FastMath.PI - j ;
Distance : 8

117
Tree	boolean j = n != NUMBER_CONSTANT ;
Code	boolean j = n != NUMBER_CONSTANT ;
Distance : 6

118
Tree	double j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	double j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 3

119
Tree	long j = n != NUMBER_CONSTANT ;
Code	long j = n != NUMBER_CONSTANT ;
Distance : 6

120
Tree	int j = n & NUMBER_CONSTANT - j ;
Code	int j = n & NUMBER_CONSTANT - j ;
Distance : 6

121
Tree	double j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	double j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 3

122
Tree	boolean j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	boolean j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 3

123
Tree	int j = n n n . normalize ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n n n . normalize ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

========================================================================


========================================================================
Example Number: 6
Parent Code is: 
{ return getCumPct ( ( Comparable < > ) v ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return getPct ( ( Comparable < > ) v ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=getCumPct}) (214{val=(}) (11 (214{val=(}) (74 (43 (800{val=Comparable})) (230{val=<}) (76{val=?}) (231{val=>})) (215{val=)}) (800{val=v})) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=getPct}) (214{val=(}) (11 (214{val=(}) (74 (43 (800{val=Comparable})) (230{val=<}) (76{val=?}) (231{val=>})) (215{val=)}) (800{val=v})) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/75/parent/src_main_java_org_apache_commons_math_stat_Frequency.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 92
Wrong
========================================================================
False

0
Tree	{ return getCumPct ( Comparable ) . < v > getCumPct () ; }
Code	{ return getCumPct ( Comparable ) . < v > getCumPct () ; }
Distance : 8

1
Tree	{ return getCumPct ( ( Comparable < v > ) >= ) ; }
Code	{ return getCumPct ( ( Comparable < v > ) >= ) ; }
Distance : 3

2
Tree	{ return getCumPct ( ( Comparable < v > ) ? ) ; }
Code	{ return getCumPct ( ( Comparable < v > ) ? ) ; }
Distance : 3

3
Tree	{ return getCumPct ( ( Comparable < v > ) {} ) ; }
Code	{ return getCumPct ( ( Comparable < v > ) {} ) ; }
Distance : 3

4
Tree	{ return getPct ( ( Comparable ) v . getCumPct ( null ) ) ; }
Code	{ return getPct ( ( Comparable ) v . getCumPct ( null ) ) ; }
Distance : 7

5
Tree	{ return getCumPct ( Comparable , v . getCumPct () , originalLine.tolerance ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , originalLine.tolerance ) ; }
Distance : 9

6
Tree	{ return getCumPct ( Comparable , v . getCumPct () , line.originOffset ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , line.originOffset ) ; }
Distance : 9

7
Tree	{ return getCumPct ( ( Comparable ) getCumPct ( v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getCumPct ( v ) ) ; }
Distance : 5

8
Tree	{ return getPct ( ( ( Comparable ) v ) . v ) ; }
Code	{ return getPct ( ( ( Comparable ) v ) . v ) ; }
Distance : 4

9
Tree	{ return getCumPct ( ( Comparable ) v . getCumPct ( v , ( false [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getCumPct ( v , ( false [] ) null ) ) ; }
Distance : 13

10
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct ( NUMBER_CONSTANT ) ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getPct ( NUMBER_CONSTANT ) ) . v ) ; }
Distance : 10

11
Tree	{ return ( ( Comparable ) v . getCumPct () ) . v . getPct () ; }
Code	{ return ( ( Comparable ) v . getCumPct () ) . v . getPct () ; }
Distance : 10

12
Tree	{ return getCumPct ( Comparable , v . getCumPct () , Precision.EPSILON ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , Precision.EPSILON ) ; }
Distance : 9

13
Tree	{ return ( ( Comparable ) v . getPct () ) . v . getCumPct () ; }
Code	{ return ( ( Comparable ) v . getPct () ) . v . getCumPct () ; }
Distance : 10

14
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct ( v ) ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getPct ( v ) ) . v ) ; }
Distance : 10

15
Tree	{ return getPct ( ( ( Comparable ) v . getCumPct ( NUMBER_CONSTANT ) ) . v ) ; }
Code	{ return getPct ( ( ( Comparable ) v . getCumPct ( NUMBER_CONSTANT ) ) . v ) ; }
Distance : 9

16
Tree	{ return getCumPct ( ( Comparable < v > ) {} ) ; }
Code	{ return getCumPct ( ( Comparable < v > ) {} ) ; }
Distance : 3

17
Tree	{ return getCumPct ( ( Comparable < v > ) >= ) ; }
Code	{ return getCumPct ( ( Comparable < v > ) >= ) ; }
Distance : 3

18
Tree	{ return getCumPct ( ( Comparable < v > ) % ) ; }
Code	{ return getCumPct ( ( Comparable < v > ) % ) ; }
Distance : 3

19
Tree	{ return getPct ( ( ( Comparable ) v . getCumPct ( v ) ) . v ) ; }
Code	{ return getPct ( ( ( Comparable ) v . getCumPct ( v ) ) . v ) ; }
Distance : 9

20
Tree	{ return getCumPct ( ( Comparable < v > ) ? ) ; }
Code	{ return getCumPct ( ( Comparable < v > ) ? ) ; }
Distance : 3

21
Tree	{ return getCumPct ( ( Comparable ) getPct ( ( Comparable ) v , v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getPct ( ( Comparable ) v , v ) ) ; }
Distance : 9

22
Tree	{ return getCumPct ( ( ( Comparable ) v . getCumPct () ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getCumPct () ) . v ) ; }
Distance : 8

23
Tree	{ return v . getCumPct ( Comparable ) . < v > getCumPct () ; }
Code	{ return v . getCumPct ( Comparable ) . < v > getCumPct () ; }
Distance : 9

24
Tree	{ return Comparable . getCumPct ( Comparable ) . < v > getPct () ; }
Code	{ return Comparable . getCumPct ( Comparable ) . < v > getPct () ; }
Distance : 9

25
Tree	{ return getCumPct ( ( Comparable ) v . getCumPct ( null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getCumPct ( null ) ) ; }
Distance : 8

26
Tree	{ return getCumPct ( ( Comparable ) getPct ( v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getPct ( v ) ) ; }
Distance : 5

27
Tree	{ return Comparable . getCumPct ( Comparable , OrderDirection.INCREASING , v , line.sin ) ; }
Code	{ return Comparable . getCumPct ( Comparable , OrderDirection.INCREASING , v , line.sin ) ; }
Distance : 8

28
Tree	{ return getCumPct ( ( Comparable ) v . getPct ( v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getPct ( v ) ) ; }
Distance : 7

29
Tree	{ return Comparable ( ! , null ) ; }
Code	{ return Comparable ( ! , null ) ; }
Distance : 7

30
Tree	{ return Comparable ( ! , false ) ; }
Code	{ return Comparable ( ! , false ) ; }
Distance : 7

31
Tree	{ return Comparable . getCumPct ( Comparable ) . getCumPct ( this ) ; }
Code	{ return Comparable . getCumPct ( Comparable ) . getCumPct ( this ) ; }
Distance : 8

32
Tree	{ return v . getCumPct ( ( ( Comparable ) v ) . v ) ; }
Code	{ return v . getCumPct ( ( ( Comparable ) v ) . v ) ; }
Distance : 7

33
Tree	{ return v . getCumPct ( Comparable ) . getCumPct ( this ) ; }
Code	{ return v . getCumPct ( Comparable ) . getCumPct ( this ) ; }
Distance : 8

34
Tree	{ return Comparable . getCumPct ( Comparable ) . < ? > getCumPct () ; }
Code	{ return Comparable . getCumPct ( Comparable ) . < ? > getCumPct () ; }
Distance : 9

35
Tree	{ return Comparable . getCumPct ( Comparable ) . < <= > getCumPct () ; }
Code	{ return Comparable . getCumPct ( Comparable ) . < <= > getCumPct () ; }
Distance : 9

36
Tree	{ return getCumPct ( ( ( Comparable ) v . getCumPct () ) . Comparable ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getCumPct () ) . Comparable ) ; }
Distance : 9

37
Tree	{ return getPct ( Comparable ) . < v > getCumPct () ; }
Code	{ return getPct ( Comparable ) . < v > getCumPct () ; }
Distance : 7

38
Tree	{ return getCumPct ( Comparable ) . < Comparable > getCumPct () ; }
Code	{ return getCumPct ( Comparable ) . < Comparable > getCumPct () ; }
Distance : 8

39
Tree	{ return getPct ( ( Comparable ) getCumPct ( v ) ) ; }
Code	{ return getPct ( ( Comparable ) getCumPct ( v ) ) ; }
Distance : 4

40
Tree	{ return ( ( Comparable ) v . getCumPct () ) . v . getCumPct () ; }
Code	{ return ( ( Comparable ) v . getCumPct () ) . v . getCumPct () ; }
Distance : 10

41
Tree	{ return Comparable . getCumPct ( Comparable , line.cos , v , line.sin ) ; }
Code	{ return Comparable . getCumPct ( Comparable , line.cos , v , line.sin ) ; }
Distance : 8

42
Tree	{ return getCumPct ( ( Comparable < v > ) % ) ; }
Code	{ return getCumPct ( ( Comparable < v > ) % ) ; }
Distance : 3

43
Tree	{ return getCumPct ( ( ( Comparable ) v ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v ) . v ) ; }
Distance : 5

44
Tree	{ return getCumPct ( ( Comparable ) getPct ( ( v ) v , v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getPct ( ( v ) v , v ) ) ; }
Distance : 9

45
Tree	public double += ( null < null > -= , double : , double : , null < line.originOffset > : ) throws null ;
Code	public double += ( null < null > -= , double : , double : , null < line.originOffset > : ) throws null ;
Distance : 21

46
Tree	{ return getCumPct ( ( Comparable < ? super v > ) ? ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) ? ) ; }
Distance : 5

47
Tree	{ return getPct ( ( ( Comparable ) v ) . Comparable ) ; }
Code	{ return getPct ( ( ( Comparable ) v ) . Comparable ) ; }
Distance : 5

48
Tree	{ return Comparable . getCumPct ( Comparable ) . < false > getCumPct () ; }
Code	{ return Comparable . getCumPct ( Comparable ) . < false > getCumPct () ; }
Distance : 9

49
Tree	{ return getPct ( ( Comparable ) v . getCumPct ( NUMBER_CONSTANT ) ) ; }
Code	{ return getPct ( ( Comparable ) v . getCumPct ( NUMBER_CONSTANT ) ) ; }
Distance : 7

50
Tree	{ return Comparable ( ? , null ) ; }
Code	{ return Comparable ( ? , null ) ; }
Distance : 7

51
Tree	{ return getCumPct ( ( ( Comparable ) v . getCumPct ( NUMBER_CONSTANT ) ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getCumPct ( NUMBER_CONSTANT ) ) . v ) ; }
Distance : 10

52
Tree	{ return getCumPct ( ( ( Comparable ) v ) . Comparable ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v ) . Comparable ) ; }
Distance : 6

53
Tree	{ return Comparable ( ? , false ) ; }
Code	{ return Comparable ( ? , false ) ; }
Distance : 7

54
Tree	{ return getPct ( ( Comparable ) getPct ( ( v ) v , v ) ) ; }
Code	{ return getPct ( ( Comparable ) getPct ( ( v ) v , v ) ) ; }
Distance : 8

55
Tree	{ return getCumPct ( ( Comparable < ? super v > ) {} ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) {} ) ; }
Distance : 5

56
Tree	{ return getCumPct ( ( ( Comparable ) v . getCumPct ( v ) ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getCumPct ( v ) ) . v ) ; }
Distance : 10

57
Tree	{ return Comparable . getPct ( Comparable ) . < v > getCumPct () ; }
Code	{ return Comparable . getPct ( Comparable ) . < v > getCumPct () ; }
Distance : 9

58
Tree	{ return Comparable . getCumPct ( Comparable , line.cos , v , line.originOffset ) ; }
Code	{ return Comparable . getCumPct ( Comparable , line.cos , v , line.originOffset ) ; }
Distance : 8

59
Tree	{ return Comparable . getCumPct ( Comparable ) . < v > getCumPct () ; }
Code	{ return Comparable . getCumPct ( Comparable ) . < v > getCumPct () ; }
Distance : 9

60
Tree	{ return getCumPct ( Comparable ) . < v > getPct () ; }
Code	{ return getCumPct ( Comparable ) . < v > getPct () ; }
Distance : 8

61
Tree	{ return getCumPct ( ( Comparable ) v . getPct ( NUMBER_CONSTANT ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getPct ( NUMBER_CONSTANT ) ) ; }
Distance : 8

62
Tree	{ return getCumPct ( ( Comparable < ? super v > ) >= ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) >= ) ; }
Distance : 5

63
Tree	{ return v . getCumPct ( Comparable , line.cos , v , line.sin ) ; }
Code	{ return v . getCumPct ( Comparable , line.cos , v , line.sin ) ; }
Distance : 8

64
Tree	public double += ( null < null > -= , double : , double : , false < line.originOffset > : ) throws null ;
Code	public double += ( null < null > -= , double : , double : , false < line.originOffset > : ) throws null ;
Distance : 21

65
Tree	{ return getCumPct ( ( Comparable ) v . getCumPct ( v , ( Object [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getCumPct ( v , ( Object [] ) null ) ) ; }
Distance : 13

66
Tree	{ return getCumPct ( Comparable , v . getCumPct () , line.sin ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , line.sin ) ; }
Distance : 9

67
Tree	{ return getCumPct ( ( Comparable ) v . getCumPct ( Comparable , ( Object [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getCumPct ( Comparable , ( Object [] ) null ) ) ; }
Distance : 13

68
Tree	{ return getCumPct ( ( Comparable ) v . getCumPct ( v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getCumPct ( v ) ) ; }
Distance : 7

69
Tree	{ return getCumPct ( ( Comparable ) v . getCumPct ( v , ( tolerance [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getCumPct ( v , ( tolerance [] ) null ) ) ; }
Distance : 13

70
Tree	{ return getCumPct ( ( Comparable ) v . getCumPct ( NUMBER_CONSTANT ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getCumPct ( NUMBER_CONSTANT ) ) ; }
Distance : 8

71
Tree	{ return getPct ( ( Comparable ) getPct ( v ) ) ; }
Code	{ return getPct ( ( Comparable ) getPct ( v ) ) ; }
Distance : 4

72
Tree	public double += ( ! < null > -= , double : , double : , false < line.originOffset > : ) throws null ;
Code	public double += ( ! < null > -= , double : , double : , false < line.originOffset > : ) throws null ;
Distance : 21

73
Tree	{ return ( ( Comparable ) v . getCumPct () ) . Comparable . getCumPct () ; }
Code	{ return ( ( Comparable ) v . getCumPct () ) . Comparable . getCumPct () ; }
Distance : 11

74
Tree	{ return getCumPct ( ( Comparable ) v . getCumPct ( Comparable ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getCumPct ( Comparable ) ) ; }
Distance : 8

75
Tree	{ return getPct ( ( Comparable ) v . getPct ( NUMBER_CONSTANT ) ) ; }
Code	{ return getPct ( ( Comparable ) v . getPct ( NUMBER_CONSTANT ) ) ; }
Distance : 7

76
Tree	{ return getPct ( ( ( Comparable ) v . getCumPct () ) . v ) ; }
Code	{ return getPct ( ( ( Comparable ) v . getCumPct () ) . v ) ; }
Distance : 7

77
Tree	{ return getPct ( ( Comparable ) v . getPct ( null ) ) ; }
Code	{ return getPct ( ( Comparable ) v . getPct ( null ) ) ; }
Distance : 7

78
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; }
Distance : 8

79
Tree	{ return getCumPct ( ( Comparable < ? super v > ) % ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) % ) ; }
Distance : 5

80
Tree	{ return getCumPct ( ( Comparable ) v . getPct ( null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getPct ( null ) ) ; }
Distance : 8

81
Tree	{ return Comparable . getCumPct ( ( ( Comparable ) v ) . v ) ; }
Code	{ return Comparable . getCumPct ( ( ( Comparable ) v ) . v ) ; }
Distance : 7

82
Tree	{ return getCumPct ( ( ( Comparable ) v . getCumPct ( Comparable ) ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getCumPct ( Comparable ) ) . v ) ; }
Distance : 10

83
Tree	{ return getCumPct ( ( Comparable ) v . getPct ( Comparable ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getPct ( Comparable ) ) ; }
Distance : 8

84
Tree	public double += ( null < null > v , double : , double : , false < line.originOffset > : ) throws null ;
Code	public double += ( null < null > v , double : , double : , false < line.originOffset > : ) throws null ;
Distance : 21

85
Tree	{ return Comparable . getCumPct ( Comparable ) . getPct ( this ) ; }
Code	{ return Comparable . getCumPct ( Comparable ) . getPct ( this ) ; }
Distance : 8

86
Tree	{ return getCumPct ( ( ( Comparable ) v . getCumPct ( NUMBER_CONSTANT ) ) . Comparable ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getCumPct ( NUMBER_CONSTANT ) ) . Comparable ) ; }
Distance : 11

87
Tree	{ return getCumPct ( ( Comparable ) getCumPct ( ( v ) v , v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getCumPct ( ( v ) v , v ) ) ; }
Distance : 9

88
Tree	{ return Comparable . getPct ( ( ( Comparable ) v ) . v ) ; }
Code	{ return Comparable . getPct ( ( ( Comparable ) v ) . v ) ; }
Distance : 6

89
Tree	{ return v . getCumPct ( Comparable ) . getPct ( this ) ; }
Code	{ return v . getCumPct ( Comparable ) . getPct ( this ) ; }
Distance : 8

90
Tree	{ return Comparable . getCumPct ( ( ( Comparable ) v ) . Comparable ) ; }
Code	{ return Comparable . getCumPct ( ( ( Comparable ) v ) . Comparable ) ; }
Distance : 8

91
Tree	{ return Comparable . getCumPct ( Comparable ) . < tolerance > getCumPct () ; }
Code	{ return Comparable . getCumPct ( Comparable ) . < tolerance > getCumPct () ; }
Distance : 9

========================================================================


========================================================================
Example Number: 7
Parent Code is: 
{ return solve ( min , max ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return solve ( f , min , max ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=solve}) (214{val=(}) (800{val=min}) (234{val=,}) (800{val=max}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=solve}) (214{val=(}) (800{val=f}) (234{val=,}) (800{val=min}) (234{val=,}) (800{val=max}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/70/parent/src_main_java_org_apache_commons_math_analysis_solvers_BisectionSolver.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 184
Wrong
========================================================================
False

0
Tree	{ return solve ( min , max ) ; }
Code	{ return solve ( min , max ) ; }
Distance : 2

1
Tree	{ return f . solve ( min , v1.length ) ; }
Code	{ return f . solve ( min , v1.length ) ; }
Distance : 5

2
Tree	{ return false . solve ( this ) ; }
Code	{ return false . solve ( this ) ; }
Distance : 7

3
Tree	{ return solve ( min , max , min ) ; }
Code	{ return solve ( min , max , min ) ; }
Distance : 3

4
Tree	{ return solve ( this , min ) ; }
Code	{ return solve ( this , min ) ; }
Distance : 3

5
Tree	{ return solve . solve ( min , max ) ; }
Code	{ return solve . solve ( min , max ) ; }
Distance : 3

6
Tree	{ return solve ( min , null ) ; }
Code	{ return solve ( min , null ) ; }
Distance : 3

7
Tree	{ return ( ( max ) this ) . solve ( min , max ) ; }
Code	{ return ( ( max ) this ) . solve ( min , max ) ; }
Distance : 8

8
Tree	{ return this . min . solve ( max ) ; }
Code	{ return this . min . solve ( max ) ; }
Distance : 6

9
Tree	{ return solve ( min , max , max ) ; }
Code	{ return solve ( min , max , max ) ; }
Distance : 2

10
Tree	{ return solve ( min , max - NUMBER_CONSTANT ) ; }
Code	{ return solve ( min , max - NUMBER_CONSTANT ) ; }
Distance : 4

11
Tree	{ return this . max . solve ( min ) ; }
Code	{ return this . max . solve ( min ) ; }
Distance : 7

12
Tree	{ return solve ( min , max < Vector1D.ZERO ) ; }
Code	{ return solve ( min , max < Vector1D.ZERO ) ; }
Distance : 4

13
Tree	{ return ( ( min ) this ) . solve ( min , max ) ; }
Code	{ return ( ( min ) this ) . solve ( min , max ) ; }
Distance : 8

14
Tree	{ return solve ( min , max , null ) ; }
Code	{ return solve ( min , max , null ) ; }
Distance : 3

15
Tree	{ return solve ( min , max , max , false ) ; }
Code	{ return solve ( min , max , max , false ) ; }
Distance : 4

16
Tree	{ return solve ( min , null , max ) ; }
Code	{ return solve ( min , null , max ) ; }
Distance : 2

17
Tree	{ return solve ( min , max , max , null ) ; }
Code	{ return solve ( min , max , max , null ) ; }
Distance : 4

18
Tree	{ return solve ( this == max , max ) ; }
Code	{ return solve ( this == max , max ) ; }
Distance : 3

19
Tree	{ return f . solve ( min , null , max , null ) ; }
Code	{ return f . solve ( min , null , max , null ) ; }
Distance : 6

20
Tree	{ return this . max . solve ( max ) ; }
Code	{ return this . max . solve ( max ) ; }
Distance : 6

21
Tree	{ return this . min . solve ( min ) ; }
Code	{ return this . min . solve ( min ) ; }
Distance : 7

22
Tree	{ return f . solve ( null , max , max , null ) ; }
Code	{ return f . solve ( null , max , max , null ) ; }
Distance : 6

23
Tree	{ return coefficients . solve ( min , max , max ) ; }
Code	{ return coefficients . solve ( min , max , max ) ; }
Distance : 4

24
Tree	{ return min . solve () . solve ( min ) ; }
Code	{ return min . solve () . solve ( min ) ; }
Distance : 8

25
Tree	{ return f . solve ( min , x.length ) ; }
Code	{ return f . solve ( min , x.length ) ; }
Distance : 5

26
Tree	{ return f . solve ( max , max ) ; }
Code	{ return f . solve ( max , max ) ; }
Distance : 5

27
Tree	{ return f ( min , max ) ; }
Code	{ return f ( min , max ) ; }
Distance : 3

28
Tree	{ return f . solve () . solve ( min , max , max ) ; }
Code	{ return f . solve () . solve ( min , max , max ) ; }
Distance : 7

29
Tree	{ return max . solve ( min , max ) ; }
Code	{ return max . solve ( min , max ) ; }
Distance : 4

30
Tree	{ return solve . solve ( min , max , max ) ; }
Code	{ return solve . solve ( min , max , max ) ; }
Distance : 4

31
Tree	{ return solve ( max , null , max ) ; }
Code	{ return solve ( max , null , max ) ; }
Distance : 2

32
Tree	{ return solve ( f , null ) ; }
Code	{ return solve ( f , null ) ; }
Distance : 3

33
Tree	{ return f . solve ( max ) ; }
Code	{ return f . solve ( max ) ; }
Distance : 5

34
Tree	{ return f . solve ( min , AllowedSolution.ANY_SIDE ) ; }
Code	{ return f . solve ( min , AllowedSolution.ANY_SIDE ) ; }
Distance : 5

35
Tree	{ return min . solve ( min , max , null ) ; }
Code	{ return min . solve ( min , max , null ) ; }
Distance : 5

36
Tree	{ return solve ( min , max , true ) ; }
Code	{ return solve ( min , max , true ) ; }
Distance : 3

37
Tree	{ return solve ( solve () , solve ( min ) ) ; }
Code	{ return solve ( solve () , solve ( min ) ) ; }
Distance : 6

38
Tree	{ return solve ( min - NUMBER_CONSTANT , max ) ; }
Code	{ return solve ( min - NUMBER_CONSTANT , max ) ; }
Distance : 3

39
Tree	{ return f . solve ( solve () , NUMBER_CONSTANT / line.originOffset ) ; }
Code	{ return f . solve ( solve () , NUMBER_CONSTANT / line.originOffset ) ; }
Distance : 7

40
Tree	{ return f . solve ( min , null , max ) ; }
Code	{ return f . solve ( min , null , max ) ; }
Distance : 4

41
Tree	{ return solve ( f == null , ! solve () , max ) ; }
Code	{ return solve ( f == null , ! solve () , max ) ; }
Distance : 5

42
Tree	{ return solve ( max , max ) ; }
Code	{ return solve ( max , max ) ; }
Distance : 3

43
Tree	{ return LazyHolder.FACTORY . solve ( min ) ; }
Code	{ return LazyHolder.FACTORY . solve ( min ) ; }
Distance : 6

44
Tree	{ return solve ( max , max - NUMBER_CONSTANT ) ; }
Code	{ return solve ( max , max - NUMBER_CONSTANT ) ; }
Distance : 4

45
Tree	{ return solve ( solve () , solve ( f ) ) ; } k
Code	{ return solve ( solve () , solve ( f ) ) ; } k
Distance : 7

46
Tree	{ return solve ( max . solve () ) ; }
Code	{ return solve ( max . solve () ) ; }
Distance : 5

47
Tree	{ return f . solve ( max . solve () , max ) ; }
Code	{ return f . solve ( max . solve () , max ) ; }
Distance : 6

48
Tree	{ return solve ( solve ( min , min ) ) ; }
Code	{ return solve ( solve ( min , min ) ) ; }
Distance : 4

49
Tree	{ return solve ( f , max - NUMBER_CONSTANT ) ; }
Code	{ return solve ( f , max - NUMBER_CONSTANT ) ; }
Distance : 3

50
Tree	{ return solve ( min - NUMBER_CONSTANT , min ) ; }
Code	{ return solve ( min - NUMBER_CONSTANT , min ) ; }
Distance : 4

51
Tree	{ return f . solve ( this , max , max ) ; }
Code	{ return f . solve ( this , max , max ) ; }
Distance : 4

52
Tree	{ return solve ( min , max ) ; }
Code	{ return solve ( min , max ) ; }
Distance : 2

53
Tree	{ return f . solve () . solve ( min , max ) ; }
Code	{ return f . solve () . solve ( min , max ) ; }
Distance : 6

54
Tree	{ return solve ( min . solve ( min ) ) ; }
Code	{ return solve ( min . solve ( min ) ) ; }
Distance : 6

55
Tree	{ return min . solve ( min . solve () , max ) ; }
Code	{ return min . solve ( min . solve () , max ) ; }
Distance : 6

56
Tree	{ return solve ( min , max , false ) ; }
Code	{ return solve ( min , max , false ) ; }
Distance : 3

57
Tree	{ return solve ( this == min , max ) ; }
Code	{ return solve ( this == min , max ) ; }
Distance : 2

58
Tree	{ return solve ( this , max ) ; }
Code	{ return solve ( this , max ) ; }
Distance : 3

59
Tree	{ return solve ( max , max , max , false ) ; }
Code	{ return solve ( max , max , max , false ) ; }
Distance : 4

60
Tree	{ return min . solve ( min , max ) ; }
Code	{ return min . solve ( min , max ) ; }
Distance : 4

61
Tree	{ return solve ( min , min - NUMBER_CONSTANT ) ; }
Code	{ return solve ( min , min - NUMBER_CONSTANT ) ; }
Distance : 3

62
Tree	{ return solve ( max , max , max , null ) ; }
Code	{ return solve ( max , max , max , null ) ; }
Distance : 4

63
Tree	{ return solve ( min , max , min , null ) ; }
Code	{ return solve ( min , max , min , null ) ; }
Distance : 4

64
Tree	{ return null . solve ( this ) ; }
Code	{ return null . solve ( this ) ; }
Distance : 7

65
Tree	{ return f . solve ( max , null , max , null ) ; }
Code	{ return f . solve ( max , null , max , null ) ; }
Distance : 6

66
Tree	{ return solve ( f , max ) ; }
Code	{ return solve ( f , max ) ; }
Distance : 2

67
Tree	{ return max . solve ( this , max , max ) ; }
Code	{ return max . solve ( this , max , max ) ; }
Distance : 4

68
Tree	{ return solve ( this , f ) ; }
Code	{ return solve ( this , f ) ; }
Distance : 4

69
Tree	{ return solve ( min , null , min ) ; }
Code	{ return solve ( min , null , min ) ; }
Distance : 3

70
Tree	{ return f . solve () . solve ( min ) ; }
Code	{ return f . solve () . solve ( min ) ; }
Distance : 8

71
Tree	{ return min ( min , max ) ; }
Code	{ return min ( min , max ) ; }
Distance : 3

72
Tree	{ return max . solve ( min ) ; }
Code	{ return max . solve ( min ) ; }
Distance : 6

73
Tree	{ return min . solve () . solve ( min , max ) ; }
Code	{ return min . solve () . solve ( min , max ) ; }
Distance : 6

74
Tree	{ return super . solve ( this ) ; }
Code	{ return super . solve ( this ) ; }
Distance : 7

75
Tree	{ return solve ( min . solve ( f ) ) ; }
Code	{ return solve ( min . solve ( f ) ) ; }
Distance : 6

76
Tree	{ return solve () . solve ( solve () ) ; }
Code	{ return solve () . solve ( solve () ) ; }
Distance : 6

77
Tree	{ return solve ( min , max , min , false ) ; }
Code	{ return solve ( min , max , min , false ) ; }
Distance : 4

78
Tree	{ return min . solve ( min ) ; }
Code	{ return min . solve ( min ) ; }
Distance : 6

79
Tree	{ return solve ( solve () , solve ( max ) ) ; }
Code	{ return solve ( solve () , solve ( max ) ) ; }
Distance : 5

80
Tree	{ return solve ( min . solve ( max ) , max ) ; }
Code	{ return solve ( min . solve ( max ) , max ) ; }
Distance : 6

81
Tree	{ return solve ( min , max == null solve : ) ; }
Code	{ return solve ( min , max == null solve : ) ; }
Distance : 6

82
Tree	{ return f . solve ( solve () , max == AllowedSolution.ANY_SIDE ) ; }
Code	{ return f . solve ( solve () , max == AllowedSolution.ANY_SIDE ) ; }
Distance : 7

83
Tree	{ return solve ( max . solve () , max ) ; }
Code	{ return solve ( max . solve () , max ) ; }
Distance : 4

84
Tree	{ return solve ( min , min , max , false ) ; }
Code	{ return solve ( min , min , max , false ) ; }
Distance : 3

85
Tree	{ return solve ( min , min , max , null ) ; }
Code	{ return solve ( min , min , max , null ) ; }
Distance : 3

86
Tree	{ return f . solve ( min , a.value ) ; }
Code	{ return f . solve ( min , a.value ) ; }
Distance : 5

87
Tree	{ return solve ( min , max < x.length ) ; }
Code	{ return solve ( min , max < x.length ) ; }
Distance : 4

88
Tree	{ return min . solve ( this , max , max ) ; }
Code	{ return min . solve ( this , max , max ) ; }
Distance : 4

89
Tree	{ return max . solve ( min , max , null ) ; }
Code	{ return max . solve ( min , max , null ) ; }
Distance : 5

90
Tree	{ return f . solve ( this , min ) ; }
Code	{ return f . solve ( this , min ) ; }
Distance : 5

91
Tree	{ return f . solve ( solve () , max == GammaDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY ) ; }
Code	{ return f . solve ( solve () , max == GammaDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY ) ; }
Distance : 7

92
Tree	{ return solve ( min , max == null solve += ) ; }
Code	{ return solve ( min , max == null solve += ) ; }
Distance : 6

93
Tree	{ return min . solve ( solve () , NUMBER_CONSTANT / FastMath.PI ) ; }
Code	{ return min . solve ( solve () , NUMBER_CONSTANT / FastMath.PI ) ; }
Distance : 7

94
Tree	{ return solve () . solve ( solve ( f ) ) ; }
Code	{ return solve () . solve ( solve ( f ) ) ; }
Distance : 8

95
Tree	{ return solve () . solve ( solve ( max ) ) ; }
Code	{ return solve () . solve ( solve ( max ) ) ; }
Distance : 7

96
Tree	{ return solve ( min , min , max ) ; }
Code	{ return solve ( min , min , max ) ; }
Distance : 1

97
Tree	{ return solve ( max , max , false ) ; }
Code	{ return solve ( max , max , false ) ; }
Distance : 3

98
Tree	{ return solve ( this == max , min ) ; }
Code	{ return solve ( this == max , min ) ; }
Distance : 4

99
Tree	{ return solve ( solve ( min , max ) ) ; }
Code	{ return solve ( solve ( min , max ) ) ; }
Distance : 3

100
Tree	{ return solve () . solve ( solve ( min ) ) ; }
Code	{ return solve () . solve ( solve ( min ) ) ; }
Distance : 7

101
Tree	{ return solve ( max . solve ( min ) ) ; }
Code	{ return solve ( max . solve ( min ) ) ; }
Distance : 6

102
Tree	{ return solve ( max , null ) ; }
Code	{ return solve ( max , null ) ; }
Distance : 4

103
Tree	{ return solve ( solve ( max , max ) ) ; }
Code	{ return solve ( solve ( max , max ) ) ; }
Distance : 4

104
Tree	{ return solve ( min . solve () , min ) ; }
Code	{ return solve ( min . solve () , min ) ; }
Distance : 5

105
Tree	{ return ( ( min ) this ) . solve ( f , max ) ; }
Code	{ return ( ( min ) this ) . solve ( f , max ) ; }
Distance : 9

106
Tree	{ return solve ( f , null , max ) ; }
Code	{ return solve ( f , null , max ) ; }
Distance : 1

107
Tree	{ return f ( max , max ) ; }
Code	{ return f ( max , max ) ; }
Distance : 4

108
Tree	{ return solve ( min , max , super(); ) ; }
Code	{ return solve ( min , max , super(); ) ; }
Distance : 3

109
Tree	{ return solve ( min . solve ( f ) , max ) ; }
Code	{ return solve ( min . solve ( f ) , max ) ; }
Distance : 6

110
Tree	{ return min . solve ( solve () , max == AllowedSolution.ANY_SIDE ) ; }
Code	{ return min . solve ( solve () , max == AllowedSolution.ANY_SIDE ) ; }
Distance : 7

111
Tree	{ return solve ( f - NUMBER_CONSTANT , max ) ; }
Code	{ return solve ( f - NUMBER_CONSTANT , max ) ; }
Distance : 2

112
Tree	{ return f . solve ( min . solve () , max ) ; }
Code	{ return f . solve ( min . solve () , max ) ; }
Distance : 6

113
Tree	{ return solve ( min , min ) ; }
Code	{ return solve ( min , min ) ; }
Distance : 3

114
Tree	{ return max . solve ( null , max , max , null ) ; }
Code	{ return max . solve ( null , max , max , null ) ; }
Distance : 6

115
Tree	{ return f . solve ( max , null , max ) ; }
Code	{ return f . solve ( max , null , max ) ; }
Distance : 4

116
Tree	{ return solve () . solve ( solve () ) ; } Complex
Code	{ return solve () . solve ( solve () ) ; } Complex
Distance : 7

117
Tree	{ return solve ( min . solve ( max ) ) ; }
Code	{ return solve ( min . solve ( max ) ) ; }
Distance : 5

118
Tree	{ return solve ( max , max == null solve : ) ; }
Code	{ return solve ( max , max == null solve : ) ; }
Distance : 6

119
Tree	{ return solve ( min , super(); ) ; }
Code	{ return solve ( min , super(); ) ; }
Distance : 3

120
Tree	{ return solve ( solve ( f , max ) ) ; }
Code	{ return solve ( solve ( f , max ) ) ; }
Distance : 4

121
Tree	{ return max . solve ( min , null , max ) ; }
Code	{ return max . solve ( min , null , max ) ; }
Distance : 4

122
Tree	{ return f . solve ( min , max ) ; }
Code	{ return f . solve ( min , max ) ; }
Distance : 4

123
Tree	{ return f . solve ( solve () , max == getY ) ; }
Code	{ return f . solve ( solve () , max == getY ) ; }
Distance : 7

124
Tree	{ return f . solve ( min . solve () , f ) ; }
Code	{ return f . solve ( min . solve () , f ) ; }
Distance : 7

125
Tree	{ return f . solve () . solve ( max , max ) ; }
Code	{ return f . solve () . solve ( max , max ) ; }
Distance : 7

126
Tree	{ return solve ( min . solve () ) ; } k
Code	{ return solve ( min . solve () ) ; } k
Distance : 6

127
Tree	{ return solve ( min == null ( ! solve () , max ) ; }
Code	{ return solve ( min == null ( ! solve () , max ) ; }
Distance : 7

128
Tree	{ return min . solve ( this , max ) ; }
Code	{ return min . solve ( this , max ) ; }
Distance : 5

129
Tree	{ return LazyHolder.FACTORY . solve ( min , max , max ) ; }
Code	{ return LazyHolder.FACTORY . solve ( min , max , max ) ; }
Distance : 4

130
Tree	{ return max ( min , max ) ; }
Code	{ return max ( min , max ) ; }
Distance : 3

131
Tree	{ return Coordinates3D.ZERO . solve ( min , max , max ) ; }
Code	{ return Coordinates3D.ZERO . solve ( min , max , max ) ; }
Distance : 4

132
Tree	{ return solve ( max == null , ! solve () , max ) ; }
Code	{ return solve ( max == null , ! solve () , max ) ; }
Distance : 6

133
Tree	{ return solve ( min . solve () , max ) ; }
Code	{ return solve ( min . solve () , max ) ; }
Distance : 4

134
Tree	{ return solve ( max , max , max ) ; }
Code	{ return solve ( max , max , max ) ; }
Distance : 2

135
Tree	{ return solve ( max - NUMBER_CONSTANT , max ) ; }
Code	{ return solve ( max - NUMBER_CONSTANT , max ) ; }
Distance : 3

136
Tree	{ return min . solve ( min , null , max ) ; }
Code	{ return min . solve ( min , null , max ) ; }
Distance : 4

137
Tree	{ return solve ( max , max ) ; }
Code	{ return solve ( max , max ) ; }
Distance : 3

138
Tree	{ return max . solve () . solve ( min , max ) ; }
Code	{ return max . solve () . solve ( min , max ) ; }
Distance : 6

139
Tree	{ return coefficients . solve ( min ) ; }
Code	{ return coefficients . solve ( min ) ; }
Distance : 6

140
Tree	{ return solve ( max , max , null ) ; }
Code	{ return solve ( max , max , null ) ; }
Distance : 3

141
Tree	{ return min . solve ( null , max , max , null ) ; }
Code	{ return min . solve ( null , max , max , null ) ; }
Distance : 6

142
Tree	{ return f . solve ( this , max ) ; }
Code	{ return f . solve ( this , max ) ; }
Distance : 5

143
Tree	{ return Coordinates3D.ZERO . solve ( min , max ) ; }
Code	{ return Coordinates3D.ZERO . solve ( min , max ) ; }
Distance : 4

144
Tree	{ return solve ( min . solve ( min ) , f ) ; }
Code	{ return solve ( min . solve ( min ) , f ) ; }
Distance : 6

145
Tree	{ return solve ( this , max ) ; } k
Code	{ return solve ( this , max ) ; } k
Distance : 4

146
Tree	{ return solve ( solve () , solve ( f ) ) ; }
Code	{ return solve ( solve () , solve ( f ) ) ; }
Distance : 6

147
Tree	{ return solve ( this == min , min ) ; }
Code	{ return solve ( this == min , min ) ; }
Distance : 3

148
Tree	{ return solve () . solve ( solve () ) ; } false
Code	{ return solve () . solve ( solve () ) ; } false
Distance : 7

149
Tree	{ return solve ( f . solve () ) ; }
Code	{ return solve ( f . solve () ) ; }
Distance : 4

150
Tree	{ return solve () . solve ( solve () ) ; } try
Code	{ return solve () . solve ( solve () ) ; } try
Distance : 7

151
Tree	{ return solve ( min , min == null solve : ) ; }
Code	{ return solve ( min , min == null solve : ) ; }
Distance : 5

152
Tree	{ return f . solve ( min , max , null ) ; }
Code	{ return f . solve ( min , max , null ) ; }
Distance : 5

153
Tree	{ return solve ( min . solve () , f ) ; }
Code	{ return solve ( min . solve () , f ) ; }
Distance : 5

154
Tree	{ return LazyHolder.FACTORY . solve ( min , max ) ; }
Code	{ return LazyHolder.FACTORY . solve ( min , max ) ; }
Distance : 4

155
Tree	{ return f . solve ( min ) ; }
Code	{ return f . solve ( min ) ; }
Distance : 6

156
Tree	{ return Coordinates3D.ZERO . solve ( min ) ; }
Code	{ return Coordinates3D.ZERO . solve ( min ) ; }
Distance : 6

157
Tree	{ return solve ( min , min , false ) ; }
Code	{ return solve ( min , min , false ) ; }
Distance : 2

158
Tree	{ return true . solve ( this ) ; }
Code	{ return true . solve ( this ) ; }
Distance : 7

159
Tree	{ return ( ( min ) this ) . solve ( max , max ) ; }
Code	{ return ( ( min ) this ) . solve ( max , max ) ; }
Distance : 9

160
Tree	{ return f . solve ( this , min , max ) ; }
Code	{ return f . solve ( this , min , max ) ; }
Distance : 3

161
Tree	{ return solve ( min , max < AllowedSolution.ANY_SIDE ) ; }
Code	{ return solve ( min , max < AllowedSolution.ANY_SIDE ) ; }
Distance : 4

162
Tree	{ return solve ( min . solve ( min ) , max ) ; }
Code	{ return solve ( min . solve ( min ) , max ) ; }
Distance : 5

163
Tree	{ return solve ( min . solve () ) ; }
Code	{ return solve ( min . solve () ) ; }
Distance : 5

164
Tree	{ return f . solve ( null , min , max , null ) ; }
Code	{ return f . solve ( null , min , max , null ) ; }
Distance : 5

165
Tree	{ return coefficients . solve ( min , max ) ; }
Code	{ return coefficients . solve ( min , max ) ; }
Distance : 4

166
Tree	{ return min . solve () . solve ( min , max , max ) ; }
Code	{ return min . solve () . solve ( min , max , max ) ; }
Distance : 7

167
Tree	{ return max . solve () . solve ( min , max , max ) ; }
Code	{ return max . solve () . solve ( min , max , max ) ; }
Distance : 7

168
Tree	{ return max . solve ( this , max ) ; }
Code	{ return max . solve ( this , max ) ; }
Distance : 5

169
Tree	{ return f . solve () . solve ( max ) ; }
Code	{ return f . solve () . solve ( max ) ; }
Distance : 7

170
Tree	{ return f . solve ( max , max , null ) ; }
Code	{ return f . solve ( max , max , null ) ; }
Distance : 5

171
Tree	{ return solve ( min , min ) ; }
Code	{ return solve ( min , min ) ; }
Distance : 3

172
Tree	{ return max . solve () . solve ( min ) ; }
Code	{ return max . solve () . solve ( min ) ; }
Distance : 8

173
Tree	{ return solve . solve ( min ) ; }
Code	{ return solve . solve ( min ) ; }
Distance : 5

174
Tree	{ return solve ( min , max < coefficients ) ; }
Code	{ return solve ( min , max < coefficients ) ; }
Distance : 4

175
Tree	{ return min . solve ( min , null , max , null ) ; }
Code	{ return min . solve ( min , null , max , null ) ; }
Distance : 6

176
Tree	{ return max . solve ( min , null , max , null ) ; }
Code	{ return max . solve ( min , null , max , null ) ; }
Distance : 6

177
Tree	{ return solve ( min , min , null ) ; }
Code	{ return solve ( min , min , null ) ; }
Distance : 2

178
Tree	{ return f . solve () . solve ( max , max , max ) ; }
Code	{ return f . solve () . solve ( max , max , max ) ; }
Distance : 7

179
Tree	{ return f . solve ( solve () , NUMBER_CONSTANT / FastMath.PI ) ; }
Code	{ return f . solve ( solve () , NUMBER_CONSTANT / FastMath.PI ) ; }
Distance : 7

180
Tree	{ return f . solve ( solve () , NUMBER_CONSTANT / v2.length ) ; }
Code	{ return f . solve ( solve () , NUMBER_CONSTANT / v2.length ) ; }
Distance : 7

181
Tree	{ return solve ( min == null ( ! solve () , min ) ; }
Code	{ return solve ( min == null ( ! solve () , min ) ; }
Distance : 8

182
Tree	{ return solve () . solve ( solve ( min ) ) ; } k
Code	{ return solve () . solve ( solve ( min ) ) ; } k
Distance : 8

183
Tree	{ return solve ( f , max ) ; }
Code	{ return solve ( f , max ) ; }
Distance : 2

========================================================================


========================================================================
Example Number: 8
Parent Code is: 
out [ i ] [ j ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - tDistribution . cumulativeProbability ( t ) ) ;
-------------------------------------------------------------------------------
Child code is: 
out [ i ] [ j ] = NUMBER_CONSTANT * tDistribution . cumulativeProbability ( - t ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (7 (2 (2 (801{val=out}) (221{val=[}) (800{val=i}) (222{val=]})) (221{val=[}) (800{val=j}) (222{val=]})) (204{val==}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (36 (214{val=(}) (27 (34{val=NUMBER_CONSTANT}) (201{val=-}) (32 (800{val=tDistribution}) (235{val=.}) (802{val=cumulativeProbability}) (214{val=(}) (800{val=t}) (215{val=)}))) (215{val=)})))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (7 (2 (2 (801{val=out}) (221{val=[}) (800{val=i}) (222{val=]})) (221{val=[}) (800{val=j}) (222{val=]})) (204{val==}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (32 (800{val=tDistribution}) (235{val=.}) (802{val=cumulativeProbability}) (214{val=(}) (38 (201{val=-}) (800{val=t})) (215{val=)})))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/69/parent/src_main_java_org_apache_commons_math_stat_correlation_PearsonsCorrelation.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 52
Wrong
========================================================================
False

0
Tree	t += i && ( tDistribution . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	t += i && ( tDistribution . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

1
Tree	j += i && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	j += i && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

2
Tree	t += i && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	t += i && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

3
Tree	i += i && ( tDistribution . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	i += i && ( tDistribution . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

4
Tree	t += i && ( t != tDistribution . cumulativeProbability ( t ) ) ;
Code	t += i && ( t != tDistribution . cumulativeProbability ( t ) ) ;
Distance : 11

5
Tree	t = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( t - NUMBER_CONSTANT ) * MathIllegalArgumentException * tDistribution ) ;
Code	t = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( t - NUMBER_CONSTANT ) * MathIllegalArgumentException * tDistribution ) ;
Distance : 18

6
Tree	t = ( ( source.moment == tDistribution ) * ( t + t ) * t * tDistribution ) ;
Code	t = ( ( source.moment == tDistribution ) * ( t + t ) * t * tDistribution ) ;
Distance : 17

7
Tree	i += i && ( t != tDistribution . cumulativeProbability ( t ) ) ;
Code	i += i && ( t != tDistribution . cumulativeProbability ( t ) ) ;
Distance : 11

8
Tree	t = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * continue; * imaginary * t ) ;
Code	t = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * continue; * imaginary * t ) ;
Distance : 18

9
Tree	t = ( ( org.apache.commons.math4.geometry.euclidean.twod.Line == tDistribution ) * ( t + t ) * t * tDistribution ) ;
Code	t = ( ( org.apache.commons.math4.geometry.euclidean.twod.Line == tDistribution ) * ( t + t ) * t * tDistribution ) ;
Distance : 17

10
Tree	i = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( t - NUMBER_CONSTANT ) * MathIllegalArgumentException * tDistribution ) ;
Code	i = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( t - NUMBER_CONSTANT ) * MathIllegalArgumentException * tDistribution ) ;
Distance : 18

11
Tree	t = ( ( source.moment == tDistribution ) * ( t - NUMBER_CONSTANT ) * MathIllegalArgumentException * tDistribution ) ;
Code	t = ( ( source.moment == tDistribution ) * ( t - NUMBER_CONSTANT ) * MathIllegalArgumentException * tDistribution ) ;
Distance : 18

12
Tree	t = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * continue; * Double.POSITIVE_INFINITY * t ) ;
Code	t = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * continue; * Double.POSITIVE_INFINITY * t ) ;
Distance : 18

13
Tree	t += i / ( tDistribution != t . cumulativeProbability ( t ) ) ;
Code	t += i / ( tDistribution != t . cumulativeProbability ( t ) ) ;
Distance : 12

14
Tree	i = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * continue; * imaginary * t ) ;
Code	i = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * continue; * imaginary * t ) ;
Distance : 18

15
Tree	t += i / ( tDistribution . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	t += i / ( tDistribution . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

16
Tree	t += i / ( tDistribution != tDistribution . cumulativeProbability ( t ) ) ;
Code	t += i / ( tDistribution != tDistribution . cumulativeProbability ( t ) ) ;
Distance : 11

17
Tree	i += i / ( tDistribution != tDistribution . cumulativeProbability ( t ) ) ;
Code	i += i / ( tDistribution != tDistribution . cumulativeProbability ( t ) ) ;
Distance : 11

18
Tree	i += i && ( tDistribution != tDistribution . cumulativeProbability ( t ) ) ;
Code	i += i && ( tDistribution != tDistribution . cumulativeProbability ( t ) ) ;
Distance : 11

19
Tree	t += i && ( tDistribution != tDistribution . cumulativeProbability ( t ) ) ;
Code	t += i && ( tDistribution != tDistribution . cumulativeProbability ( t ) ) ;
Distance : 11

20
Tree	t += i / ( tDistribution . cumulativeProbability ( t ) - tDistribution ) ;
Code	t += i / ( tDistribution . cumulativeProbability ( t ) - tDistribution ) ;
Distance : 12

21
Tree	i += i / ( tDistribution . cumulativeProbability ( t ) - tDistribution ) ;
Code	i += i / ( tDistribution . cumulativeProbability ( t ) - tDistribution ) ;
Distance : 12

22
Tree	i = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * continue; * Double.POSITIVE_INFINITY * t ) ;
Code	i = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * continue; * Double.POSITIVE_INFINITY * t ) ;
Distance : 18

23
Tree	i += i / ( tDistribution . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	i += i / ( tDistribution . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

24
Tree	t = ( ( i != tDistribution . cumulativeProbability ( t ) ) * t * cumulativeProbability * t ) ;
Code	t = ( ( i != tDistribution . cumulativeProbability ( t ) ) * t * cumulativeProbability * t ) ;
Distance : 16

25
Tree	t = ( ( i != tDistribution . cumulativeProbability ( t ) ) * NullArgumentException * cumulativeProbability * tDistribution ) ;
Code	t = ( ( i != tDistribution . cumulativeProbability ( t ) ) * NullArgumentException * cumulativeProbability * tDistribution ) ;
Distance : 17

26
Tree	t = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( Coordinates3D.ZERO == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	t = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( Coordinates3D.ZERO == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

27
Tree	t = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	t = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

28
Tree	i = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( Coordinates3D.ZERO == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	i = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( Coordinates3D.ZERO == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

29
Tree	i = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	i = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

30
Tree	t = ( ( i . cumulativeProbability ( t ) - tDistribution ) * MathIllegalArgumentException * cumulativeProbability * t ) ;
Code	t = ( ( i . cumulativeProbability ( t ) - tDistribution ) * MathIllegalArgumentException * cumulativeProbability * t ) ;
Distance : 16

31
Tree	t = ( ( source.moment == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	t = ( ( source.moment == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

32
Tree	out [ i ] [ j ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - j . cumulativeProbability ( t ) ) ;
Code	out [ i ] [ j ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - j . cumulativeProbability ( t ) ) ;
Distance : 6

33
Tree	t = ( ( org.apache.commons.math4.geometry.euclidean.twod.Line == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	t = ( ( org.apache.commons.math4.geometry.euclidean.twod.Line == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

34
Tree	i = ( ( i != tDistribution . cumulativeProbability ( t ) ) * t * cumulativeProbability * t ) ;
Code	i = ( ( i != tDistribution . cumulativeProbability ( t ) ) * t * cumulativeProbability * t ) ;
Distance : 16

35
Tree	out [ i ] [ j ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - t . cumulativeProbability ( t ) ) ;
Code	out [ i ] [ j ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - t . cumulativeProbability ( t ) ) ;
Distance : 6

36
Tree	out [ i ] [ j ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - tDistribution . cumulativeProbability ( t ) ) ;
Code	out [ i ] [ j ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - tDistribution . cumulativeProbability ( t ) ) ;
Distance : 5

37
Tree	t = ( ( i . cumulativeProbability ( t ) - tDistribution ) * ballOnSupport * cumulativeProbability * t ) ;
Code	t = ( ( i . cumulativeProbability ( t ) - tDistribution ) * ballOnSupport * cumulativeProbability * t ) ;
Distance : 16

38
Tree	out [ i ] [ j ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - i . cumulativeProbability ( t ) ) ;
Code	out [ i ] [ j ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - i . cumulativeProbability ( t ) ) ;
Distance : 6

39
Tree	t = ( ( source.moment == tDistribution ) * ( Coordinates3D.ZERO == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	t = ( ( source.moment == tDistribution ) * ( Coordinates3D.ZERO == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

40
Tree	i = ( ( source.moment == tDistribution ) * ( Coordinates3D.ZERO == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	i = ( ( source.moment == tDistribution ) * ( Coordinates3D.ZERO == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

41
Tree	t += i / ( tDistribution . cumulativeProbability ( t ) - t ) ;
Code	t += i / ( tDistribution . cumulativeProbability ( t ) - t ) ;
Distance : 11

42
Tree	i += i / ( tDistribution . cumulativeProbability ( t ) - t ) ;
Code	i += i / ( tDistribution . cumulativeProbability ( t ) - t ) ;
Distance : 11

43
Tree	t = ( ( i != tDistribution . cumulativeProbability ( t ) ) * getSolver * cumulativeProbability * t ) ;
Code	t = ( ( i != tDistribution . cumulativeProbability ( t ) ) * getSolver * cumulativeProbability * t ) ;
Distance : 16

44
Tree	i += i / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	i += i / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

45
Tree	t += i / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	t += i / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

46
Tree	i = ( ( i . cumulativeProbability ( t ) - tDistribution ) * MathIllegalArgumentException * cumulativeProbability * t ) ;
Code	i = ( ( i . cumulativeProbability ( t ) - tDistribution ) * MathIllegalArgumentException * cumulativeProbability * t ) ;
Distance : 16

47
Tree	t = ( ( i . cumulativeProbability ( t ) - tDistribution ) * NullArgumentException * cumulativeProbability * t ) ;
Code	t = ( ( i . cumulativeProbability ( t ) - tDistribution ) * NullArgumentException * cumulativeProbability * t ) ;
Distance : 16

48
Tree	t = ( ( org.apache.commons.math4.geometry.euclidean.twod.Line == tDistribution ) * ( t - NUMBER_CONSTANT ) * MathIllegalArgumentException * tDistribution ) ;
Code	t = ( ( org.apache.commons.math4.geometry.euclidean.twod.Line == tDistribution ) * ( t - NUMBER_CONSTANT ) * MathIllegalArgumentException * tDistribution ) ;
Distance : 18

49
Tree	t = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( t + t ) * t * tDistribution ) ;
Code	t = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( t + t ) * t * tDistribution ) ;
Distance : 17

50
Tree	i += i / ( t != tDistribution . cumulativeProbability ( t ) ) ;
Code	i += i / ( t != tDistribution . cumulativeProbability ( t ) ) ;
Distance : 11

51
Tree	i = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( t + t ) * t * tDistribution ) ;
Code	i = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( t + t ) * t * tDistribution ) ;
Distance : 17

========================================================================


========================================================================
Example Number: 9
Parent Code is: 
if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.MEAN , p ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=p}) (252{val=<=}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (32 (800{val=MathRuntimeException}) (235{val=.}) (802{val=createIllegalArgumentException}) (214{val=(}) (40{val=LocalizedFormats.NOT_POSITIVE_POISSON_MEAN}) (234{val=,}) (800{val=p}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=p}) (252{val=<=}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=NotStrictlyPositiveException})) (214{val=(}) (40{val=LocalizedFormats.MEAN}) (234{val=,}) (800{val=p}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/61/parent/src_main_java_org_apache_commons_math_distribution_PoissonDistributionImpl.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 164
Wrong
========================================================================
False

0
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; }
Distance : 2

1
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; }
Distance : 3

2
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( p ) ; }
Distance : 4

3
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( MathRuntimeException ) ; }
Distance : 5

4
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( null , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( null , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 9

5
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , true ) ; }
Distance : 4

6
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; }
Distance : 2

7
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Distance : 3

8
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Distance : 2

9
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT ) ; }
Distance : 3

10
Tree	p = new NotStrictlyPositiveException < MathRuntimeException > ( MathRuntimeException , p , p ) ;
Code	p = new NotStrictlyPositiveException < MathRuntimeException > ( MathRuntimeException , p , p ) ;
Distance : 13

11
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 4

12
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , null ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , null ) ; }
Distance : 2

13
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , null ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , null ) ; }
Distance : 2

14
Tree	p = new NotStrictlyPositiveException <> ( p , p , MathRuntimeException ) ;
Code	p = new NotStrictlyPositiveException <> ( p , p , MathRuntimeException ) ;
Distance : 12

15
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException <> ( p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException <> ( p ) ; }
Distance : 4

16
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( MathRuntimeException , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( MathRuntimeException , p ) ; }
Distance : 4

17
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; }
Distance : 1

18
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , true ) ; }
Distance : 5

19
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , true , false , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , true , false , true ) ; }
Distance : 6

20
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , null ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , null ) ; }
Distance : 2

21
Tree	p = new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , true ) ;
Code	p = new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , true ) ;
Distance : 12

22
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false ) ; }
Distance : 2

23
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , true ) ; }
Distance : 5

24
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT + STRING_CONSTANT , <= , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT + STRING_CONSTANT , <= , true ) ; }
Distance : 8

25
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException <> ( MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException <> ( MathRuntimeException ) ; }
Distance : 4

26
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( MathRuntimeException ) ; }
Distance : 5

27
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , p , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , p , NUMBER_CONSTANT ) ; }
Distance : 7

28
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException ( <= , p ) ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException ( <= , p ) ) ; }
Distance : 8

29
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false , true , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false , true , true ) ; }
Distance : 6

30
Tree	p = new NotStrictlyPositiveException <> ( p , p , p ) ;
Code	p = new NotStrictlyPositiveException <> ( p , p , p ) ;
Distance : 12

31
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT ) ; }
Distance : 4

32
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p ) ; }
Distance : 3

33
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , p , p ) ; }
Distance : 5

34
Tree	MathRuntimeException = new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , false ) ;
Code	MathRuntimeException = new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , false ) ;
Distance : 13

35
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; }
Distance : 1

36
Tree	MathRuntimeException = new NotStrictlyPositiveException <> ( p , p , MathRuntimeException ) ;
Code	MathRuntimeException = new NotStrictlyPositiveException <> ( p , p , MathRuntimeException ) ;
Distance : 13

37
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException ) ; }
Distance : 4

38
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Distance : 3

39
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , false ) ; }
Distance : 2

40
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , true , true , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , true , true , true ) ; }
Distance : 6

41
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , STRING_CONSTANT ) ; }
Distance : 2

42
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , p , p ) ; }
Distance : 7

43
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( p , p ) ; }
Distance : 4

44
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } k
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } k
Distance : 4

45
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p ) ; }
Distance : 5

46
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , super(); ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , super(); ) ; }
Distance : 2

47
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p , NUMBER_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p , NUMBER_CONSTANT , p ) ; }
Distance : 7

48
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , STRING_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , STRING_CONSTANT ) ; }
Distance : 3

49
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p ) ; }
Distance : 5

50
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Distance : 3

51
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , MathRuntimeException ) ; }
Distance : 8

52
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT ) ; } nCols
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT ) ; } nCols
Distance : 4

53
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p , NUMBER_CONSTANT ) ; }
Distance : 7

54
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; }
Distance : 2

55
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException , true ) ; }
Distance : 5

56
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p , NUMBER_CONSTANT ) ; }
Distance : 7

57
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException . createIllegalArgumentException () ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException . createIllegalArgumentException () ) ; }
Distance : 5

58
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 5

59
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , p ) ; }
Distance : 1

60
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Distance : 4

61
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , STRING_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , STRING_CONSTANT ) ; }
Distance : 3

62
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; }
Distance : 1

63
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , p , STRING_CONSTANT , p , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , p , STRING_CONSTANT , p , STRING_CONSTANT ) ; }
Distance : 9

64
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( null , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , <= , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( null , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , <= , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 9

65
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( null , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , <= , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( null , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , <= , p ) ; }
Distance : 9

66
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.OUT_OF_BOUNDS_QUANTILE_VALUE , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.OUT_OF_BOUNDS_QUANTILE_VALUE , p ) ; }
Distance : 1

67
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; }
Distance : 2

68
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , NUMBER_CONSTANT , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , NUMBER_CONSTANT , true ) ; }
Distance : 4

69
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , p , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , p , p , p ) ; }
Distance : 7

70
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ) ; }
Distance : 8

71
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException , STRING_CONSTANT , p , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException , STRING_CONSTANT , p , STRING_CONSTANT ) ; }
Distance : 9

72
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( p , p ) ; }
Distance : 4

73
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException ) ; }
Distance : 2

74
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; }
Distance : 2

75
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , MathRuntimeException ) ; }
Distance : 2

76
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( <= , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( <= , p ) ; }
Distance : 4

77
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Distance : 2

78
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , p ) ; }
Distance : 3

79
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException <> ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException <> ( p ) ; }
Distance : 3

80
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , p ) ; }
Distance : 1

81
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 6

82
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( null , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( null , p ) ; }
Distance : 1

83
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; }
Distance : 3

84
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , p , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , p , true ) ; }
Distance : 5

85
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ) ; }
Distance : 8

86
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , continue; ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , continue; ) ; }
Distance : 2

87
Tree	p = new NotStrictlyPositiveException < p > ( p , p , p ) ;
Code	p = new NotStrictlyPositiveException < p > ( p , p , p ) ;
Distance : 13

88
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Distance : 3

89
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ) ; }
Distance : 8

90
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException () ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException () ) ; }
Distance : 5

91
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 5

92
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 1

93
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , NUMBER_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , NUMBER_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p ) ; }
Distance : 7

94
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , <= ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , <= ) ; }
Distance : 2

95
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException ) ; }
Distance : 3

96
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT + STRING_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT + STRING_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , true ) ; }
Distance : 8

97
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException , p , p ) ; }
Distance : 5

98
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , false ) ; }
Distance : 4

99
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , p , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , p , MathRuntimeException ) ; }
Distance : 5

100
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p . createIllegalArgumentException () ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p . createIllegalArgumentException () ) ; }
Distance : 4

101
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Distance : 2

102
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , MathRuntimeException ) ; }
Distance : 4

103
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( MathRuntimeException , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( MathRuntimeException , p ) ; }
Distance : 4

104
Tree	if ( p <= NUMBER_CONSTANT ) { throw p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 4

105
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , true ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , true ) ; }
Distance : 5

106
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p . createIllegalArgumentException ( p ) ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p . createIllegalArgumentException ( p ) ) ; }
Distance : 6

107
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , NUMBER_CONSTANT ) ; }
Distance : 3

108
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT + STRING_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT + STRING_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , false ) ; }
Distance : 8

109
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , <= ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , <= ) ; }
Distance : 2

110
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , MathRuntimeException , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , MathRuntimeException , NUMBER_CONSTANT ) ; }
Distance : 8

111
Tree	p = new NotStrictlyPositiveException < p > ( MathRuntimeException , p , p ) ;
Code	p = new NotStrictlyPositiveException < p > ( MathRuntimeException , p , p ) ;
Distance : 13

112
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException () ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException () ) ; }
Distance : 4

113
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , return; ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , return; ) ; }
Distance : 2

114
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException <> ( MathRuntimeException ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException <> ( MathRuntimeException ) ; }
Distance : 5

115
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , false ) ; }
Distance : 5

116
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException , NUMBER_CONSTANT ) ; }
Distance : 4

117
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , STRING_CONSTANT , p , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , STRING_CONSTANT , p , STRING_CONSTANT ) ; }
Distance : 9

118
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } nCols
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } nCols
Distance : 4

119
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false , false , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false , false , true ) ; }
Distance : 6

120
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException , p , p ) ; }
Distance : 7

121
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , true ) ; }
Distance : 6

122
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException ( p ) ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException ( p ) ) ; }
Distance : 6

123
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException ) ; }
Distance : 5

124
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , super(); ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , super(); ) ; }
Distance : 2

125
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT + STRING_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT + STRING_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , true ) ; }
Distance : 8

126
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; }
Distance : 3

127
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; }
Distance : 2

128
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException ) ; }
Distance : 3

129
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , MathRuntimeException , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , MathRuntimeException , p ) ; }
Distance : 5

130
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , p ) ; }
Distance : 2

131
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , <= , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , <= , p , p ) ; }
Distance : 5

132
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException ) ; }
Distance : 2

133
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Distance : 4

134
Tree	MathRuntimeException = new NotStrictlyPositiveException <> ( p , p , p ) ;
Code	MathRuntimeException = new NotStrictlyPositiveException <> ( p , p , p ) ;
Distance : 13

135
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , NUMBER_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , NUMBER_CONSTANT ) ; }
Distance : 4

136
Tree	p = new NotStrictlyPositiveException < MathRuntimeException > ( p , p , p ) ;
Code	p = new NotStrictlyPositiveException < MathRuntimeException > ( p , p , p ) ;
Distance : 13

137
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException . createIllegalArgumentException ( p ) ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException . createIllegalArgumentException ( p ) ) ; }
Distance : 6

138
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException ( MathRuntimeException ) ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException ( MathRuntimeException ) ) ; }
Distance : 6

139
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p ) ; }
Distance : 7

140
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , MathRuntimeException , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , MathRuntimeException , p ) ; }
Distance : 7

141
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , true ) ; }
Distance : 2

142
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Distance : 2

143
Tree	MathRuntimeException = new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , true ) ;
Code	MathRuntimeException = new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , true ) ;
Distance : 13

144
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( p ) ; }
Distance : 4

145
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , MathRuntimeException ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , MathRuntimeException ) ; }
Distance : 3

146
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , STRING_CONSTANT , MathRuntimeException , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , STRING_CONSTANT , MathRuntimeException , STRING_CONSTANT ) ; }
Distance : 9

147
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , p , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , p , NUMBER_CONSTANT ) ; }
Distance : 3

148
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Distance : 4

149
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( true , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( true , p ) ; }
Distance : 1

150
Tree	p = new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , false ) ;
Code	p = new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , false ) ;
Distance : 12

151
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , true ) ; }
Distance : 6

152
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 5

153
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 2

154
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , continue; ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , continue; ) ; }
Distance : 2

155
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( null , <= , p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( null , <= , p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 9

156
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , false ) ; }
Distance : 6

157
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , true ) ; }
Distance : 2

158
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 6

159
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , MathRuntimeException ) ; }
Distance : 3

160
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p ) ; }
Distance : 1

161
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; }
Distance : 3

162
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , MathRuntimeException ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , MathRuntimeException ) ; }
Distance : 5

163
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT ) ; } k
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT ) ; } k
Distance : 4

========================================================================


========================================================================
Example Number: 10
Parent Code is: 
{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (16 (36 (214{val=(}) (27 (800{val=a}) (252{val=<=}) (800{val=b})) (215{val=)})) (233{val=?}) (800{val=b}) (226{val=:}) (36 (214{val=(}) (16 (32 (800{val=Float}) (235{val=.}) (802{val=isNaN}) (214{val=(}) (27 (800{val=a}) (200{val=+}) (800{val=b})) (215{val=)})) (233{val=?}) (40{val=Float.NaN}) (226{val=:}) (800{val=b})) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (16 (36 (214{val=(}) (27 (800{val=a}) (252{val=<=}) (800{val=b})) (215{val=)})) (233{val=?}) (800{val=b}) (226{val=:}) (36 (214{val=(}) (16 (32 (800{val=Float}) (235{val=.}) (802{val=isNaN}) (214{val=(}) (27 (800{val=a}) (200{val=+}) (800{val=b})) (215{val=)})) (233{val=?}) (40{val=Float.NaN}) (226{val=:}) (800{val=a})) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/59/parent/src_main_java_org_apache_commons_math_util_FastMath.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 8
Correct
========================================================================
True

0
Tree	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( byte ) isNaN ( ( b ) a , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( byte ) isNaN ( ( b ) a , b ) , b ) ; }
Distance : 17

1
Tree	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( float ) isNaN ( ( b ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( float ) isNaN ( ( b ) b , b ) , b ) ; }
Distance : 17

2
Tree	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( byte ) isNaN ( ( b ) b , b ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( byte ) isNaN ( ( b ) b , b ) , a ) ; }
Distance : 16

3
Tree	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( byte ) isNaN ( ( b ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( byte ) isNaN ( ( b ) b , b ) , b ) ; }
Distance : 17

4
Tree	{ return ( a <= a ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= a ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 2

5
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( b + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( b + b ) ? Float.NaN : b ) ; }
Distance : 2

6
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Distance : 0

7
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 1

========================================================================


========================================================================
Example Number: 11
Parent Code is: 
return fit ( new Gaussian.Parametric () , guess ) ;
-------------------------------------------------------------------------------
Child code is: 
return fit ( guess ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=fit}) (214{val=(}) (14 (304{val=new}) (43 (40{val=Gaussian.Parametric})) (216{val=()})) (234{val=,}) (800{val=guess}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=fit}) (214{val=(}) (800{val=guess}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/58/parent/src_main_java_org_apache_commons_math_optimization_fitting_GaussianFitter.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 96
Wrong
========================================================================
False

0
Tree	return fit ( null ) ;
Code	return fit ( null ) ;
Distance : 1

1
Tree	return fit . fit ( NUMBER_CONSTANT , boundDifference [ NUMBER_CONSTANT ] ) ;
Code	return fit . fit ( NUMBER_CONSTANT , boundDifference [ NUMBER_CONSTANT ] ) ;
Distance : 8

2
Tree	return fit ( super(); ) ;
Code	return fit ( super(); ) ;
Distance : 1

3
Tree	return fit . fit ( fit , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; Complex
Code	return fit . fit ( fit , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; Complex
Distance : 13

4
Tree	return fit . fit ( new . fit () . guess ) ; false
Code	return fit . fit ( new . fit () . guess ) ; false
Distance : 8

5
Tree	return fit . fit ( ( . fit () . guess ) ; try
Code	return fit . fit ( ( . fit () . guess ) ; try
Distance : 8

6
Tree	return fit . fit () . fit ( guess , false , guess ) ; k
Code	return fit . fit () . fit ( guess , false , guess ) ; k
Distance : 10

7
Tree	return fit . fit ( new , guess , fit , new fit < Gaussian.Parametric > ( guess ) ) ;
Code	return fit . fit ( new , guess , fit , new fit < Gaussian.Parametric > ( guess ) ) ;
Distance : 15

8
Tree	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , guess ) ;
Code	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , guess ) ;
Distance : 11

9
Tree	return fit . fit ( fit , STRING_CONSTANT , guess , guess . fit () ) ;
Code	return fit . fit ( fit , STRING_CONSTANT , guess , guess . fit () ) ;
Distance : 11

10
Tree	return fit . fit () . fit ( guess , true , guess ) ;
Code	return fit . fit () . fit ( guess , true , guess ) ;
Distance : 9

11
Tree	return fit . fit ( Gaussian.Parametric . fit () , guess , NUMBER_CONSTANT ) ;
Code	return fit . fit ( Gaussian.Parametric . fit () , guess , NUMBER_CONSTANT ) ;
Distance : 9

12
Tree	return fit . fit ( new . fit () , NUMBER_CONSTANT , false ) ;
Code	return fit . fit ( new . fit () , NUMBER_CONSTANT , false ) ;
Distance : 10

13
Tree	return fit . fit ( Gaussian.Parametric . fit () , NUMBER_CONSTANT , ? ) ;
Code	return fit . fit ( Gaussian.Parametric . fit () , NUMBER_CONSTANT , ? ) ;
Distance : 10

14
Tree	return fit . fit () . fit ( guess , false , guess ) ;
Code	return fit . fit () . fit ( guess , false , guess ) ;
Distance : 9

15
Tree	return fit ( new Gaussian.Parametric < fit > ( guess ) , guess ) ;
Code	return fit ( new Gaussian.Parametric < fit > ( guess ) , guess ) ;
Distance : 9

16
Tree	return fit . fit ( ( . fit () , NUMBER_CONSTANT , true ) ;
Code	return fit . fit ( ( . fit () , NUMBER_CONSTANT , true ) ;
Distance : 10

17
Tree	return fit . fit ( this . guess . Gaussian.Parametric ) ;
Code	return fit . fit ( this . guess . Gaussian.Parametric ) ;
Distance : 6

18
Tree	return fit . fit () . guess . fit ( byte ) ;
Code	return fit . fit () . guess . fit ( byte ) ;
Distance : 8

19
Tree	return fit . fit () . guess . fit ( false ) ;
Code	return fit . fit () . guess . fit ( false ) ;
Distance : 8

20
Tree	return this . Gaussian.Parametric . fit ( guess . fit () ) ;
Code	return this . Gaussian.Parametric . fit ( guess . fit () ) ;
Distance : 7

21
Tree	return fit ( new . fit () , STRING_CONSTANT , guess ) ;
Code	return fit ( new . fit () , STRING_CONSTANT , guess ) ;
Distance : 7

22
Tree	return fit ( new NordsieckInitializer < ( > ( guess ) , guess ) ;
Code	return fit ( new NordsieckInitializer < ( > ( guess ) , guess ) ;
Distance : 9

23
Tree	return fit . fit () . guess . fit ( true ) ;
Code	return fit . fit () . guess . fit ( true ) ;
Distance : 8

24
Tree	return fit ( new ZigguratNormalizedGaussianSampler <> ( ( ) , guess ) ;
Code	return fit ( new ZigguratNormalizedGaussianSampler <> ( ( ) , guess ) ;
Distance : 7

25
Tree	return fit ( new NordsieckInitializer <> ( ( ) , guess ) ;
Code	return fit ( new NordsieckInitializer <> ( ( ) , guess ) ;
Distance : 7

26
Tree	return fit ( new RandomPivotingStrategy <> ( ( ) , guess ) ;
Code	return fit ( new RandomPivotingStrategy <> ( ( ) , guess ) ;
Distance : 7

27
Tree	return fit . fit ( NUMBER_CONSTANT , currentNeighbourhood [ NUMBER_CONSTANT ] ) ;
Code	return fit . fit ( NUMBER_CONSTANT , currentNeighbourhood [ NUMBER_CONSTANT ] ) ;
Distance : 8

28
Tree	return fit . fit ( NUMBER_CONSTANT , initialNorm [ NUMBER_CONSTANT ] ) ;
Code	return fit . fit ( NUMBER_CONSTANT , initialNorm [ NUMBER_CONSTANT ] ) ;
Distance : 8

29
Tree	return fit . fit ( NUMBER_CONSTANT , yA [ NUMBER_CONSTANT ] ) ;
Code	return fit . fit ( NUMBER_CONSTANT , yA [ NUMBER_CONSTANT ] ) ;
Distance : 8

30
Tree	return fit ( continue; ) ;
Code	return fit ( continue; ) ;
Distance : 1

31
Tree	return fit . fit ( fit , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; false
Code	return fit . fit ( fit , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; false
Distance : 16

32
Tree	return fit . fit ( this . guess . Gaussian.Parametric ) ; false
Code	return fit . fit ( this . guess . Gaussian.Parametric ) ; false
Distance : 7

33
Tree	return fit . fit ( new . fit () . guess ) ; Complex
Code	return fit . fit ( new . fit () . guess ) ; Complex
Distance : 8

34
Tree	return fit . fit ( this . Gaussian.Parametric ) ; try
Code	return fit . fit ( this . Gaussian.Parametric ) ; try
Distance : 6

35
Tree	return fit . fit ( guess . fit () , guess , NUMBER_CONSTANT ) ; try
Code	return fit . fit ( guess . fit () , guess , NUMBER_CONSTANT ) ; try
Distance : 10

36
Tree	return fit . fit ( new . fit () , guess , NUMBER_CONSTANT ) ; false
Code	return fit . fit ( new . fit () , guess , NUMBER_CONSTANT ) ; false
Distance : 10

37
Tree	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , guess ) ; Complex
Code	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , guess ) ; Complex
Distance : 12

38
Tree	return fit ( ( . fit () , STRING_CONSTANT , guess ) ; false
Code	return fit ( ( . fit () , STRING_CONSTANT , guess ) ; false
Distance : 8

39
Tree	return fit ( new . fit () , STRING_CONSTANT , guess ) ; try
Code	return fit ( new . fit () , STRING_CONSTANT , guess ) ; try
Distance : 8

40
Tree	return fit . fit ( new , guess . fit () , NUMBER_CONSTANT ) ; Complex
Code	return fit . fit ( new , guess . fit () , NUMBER_CONSTANT ) ; Complex
Distance : 10

41
Tree	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; try
Code	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; try
Distance : 11

42
Tree	return fit ( fit , guess , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; false
Code	return fit ( fit , guess , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; false
Distance : 13

43
Tree	return fit . fit ( new , guess . fit () , NUMBER_CONSTANT ) ; false
Code	return fit . fit ( new , guess . fit () , NUMBER_CONSTANT ) ; false
Distance : 10

44
Tree	return fit ( fit , guess , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; Complex
Code	return fit ( fit , guess , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; Complex
Distance : 13

45
Tree	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; try
Code	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; try
Distance : 10

46
Tree	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; Complex
Code	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; Complex
Distance : 10

47
Tree	return fit . fit ( this . guess . Gaussian.Parametric ) ; try
Code	return fit . fit ( this . guess . Gaussian.Parametric ) ; try
Distance : 7

48
Tree	return fit . fit ( this . guess ) ; false
Code	return fit . fit ( this . guess ) ; false
Distance : 5

49
Tree	return fit ( new Gaussian.Parametric () , guess ) ; try
Code	return fit ( new Gaussian.Parametric () , guess ) ; try
Distance : 5

50
Tree	return fit ( new Gaussian.Parametric () , guess ) ; Complex
Code	return fit ( new Gaussian.Parametric () , guess ) ; Complex
Distance : 5

51
Tree	return fit ( new Gaussian.Parametric () , guess ) ;
Code	return fit ( new Gaussian.Parametric () , guess ) ;
Distance : 4

52
Tree	return fit ( fit , guess , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; try
Code	return fit ( fit , guess , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; try
Distance : 13

53
Tree	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; false
Code	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; false
Distance : 11

54
Tree	return fit . fit () . guess . fit ( null ) ;
Code	return fit . fit () . guess . fit ( null ) ;
Distance : 8

55
Tree	return fit . fit ( guess . fit () , NUMBER_CONSTANT , null ) ;
Code	return fit . fit ( guess . fit () , NUMBER_CONSTANT , null ) ;
Distance : 9

56
Tree	return fit . fit ( new , guess . fit () , NUMBER_CONSTANT ) ; try
Code	return fit . fit ( new , guess . fit () , NUMBER_CONSTANT ) ; try
Distance : 10

57
Tree	return fit ( new Gaussian.Parametric () , guess ) ; false
Code	return fit ( new Gaussian.Parametric () , guess ) ; false
Distance : 5

58
Tree	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; Complex
Code	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; Complex
Distance : 11

59
Tree	return fit ( return; ) ;
Code	return fit ( return; ) ;
Distance : 1

60
Tree	return fit . fit ( Gaussian.Parametric . fit () , guess , NUMBER_CONSTANT ) ; Complex
Code	return fit . fit ( Gaussian.Parametric . fit () , guess , NUMBER_CONSTANT ) ; Complex
Distance : 10

61
Tree	return fit ( new Gaussian.Parametric < ( > ( guess ) , guess ) ; try
Code	return fit ( new Gaussian.Parametric < ( > ( guess ) , guess ) ; try
Distance : 10

62
Tree	return fit . fit ( this . guess . Gaussian.Parametric ) ; Complex
Code	return fit . fit ( this . guess . Gaussian.Parametric ) ; Complex
Distance : 7

63
Tree	return fit ( new Constant <> ( guess ) , guess ) ;
Code	return fit ( new Constant <> ( guess ) , guess ) ;
Distance : 7

64
Tree	return fit . fit ( fit , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Code	return fit . fit ( fit , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Distance : 15

65
Tree	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ;
Code	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ;
Distance : 10

66
Tree	return fit . fit ( this . guess ) ;
Code	return fit . fit ( this . guess ) ;
Distance : 4

67
Tree	return fit . fit ( guess , guess , fit , new fit < guess > ( guess ) ) ; false
Code	return fit . fit ( guess , guess , fit , new fit < guess > ( guess ) ) ; false
Distance : 16

68
Tree	return fit ( new Constant < ( > ( guess ) , guess ) ;
Code	return fit ( new Constant < ( > ( guess ) , guess ) ;
Distance : 9

69
Tree	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; false
Code	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; false
Distance : 10

70
Tree	return fit ( new RandomPivotingStrategy < ( > ( guess ) , guess ) ;
Code	return fit ( new RandomPivotingStrategy < ( > ( guess ) , guess ) ;
Distance : 9

71
Tree	return fit ( new Gaussian.Parametric < ( > ( guess ) , guess ) ; Complex
Code	return fit ( new Gaussian.Parametric < ( > ( guess ) , guess ) ; Complex
Distance : 10

72
Tree	return fit . fit ( fit , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; try
Code	return fit . fit ( fit , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; try
Distance : 16

73
Tree	return fit . fit ( fit , STRING_CONSTANT , guess , guess . fit () ) ; Complex
Code	return fit . fit ( fit , STRING_CONSTANT , guess , guess . fit () ) ; Complex
Distance : 12

74
Tree	return fit . fit ( fit , STRING_CONSTANT , guess , fit . fit () ) ; try
Code	return fit . fit ( fit , STRING_CONSTANT , guess , fit . fit () ) ; try
Distance : 12

75
Tree	return fit ( new . fit () , STRING_CONSTANT , guess ) ; Complex
Code	return fit ( new . fit () , STRING_CONSTANT , guess ) ; Complex
Distance : 8

76
Tree	return fit . fit ( new , guess , guess , new fit < ( > ( guess ) ) ; try
Code	return fit . fit ( new , guess , guess , new fit < ( > ( guess ) ) ; try
Distance : 16

77
Tree	return fit ( fit , guess , guess . fit () , fit ( NUMBER_CONSTANT ) ) ;
Code	return fit ( fit , guess , guess . fit () , fit ( NUMBER_CONSTANT ) ) ;
Distance : 12

78
Tree	return fit . fit ( guess , guess , guess , new fit < ( > ( guess ) ) ; Complex
Code	return fit . fit ( guess , guess , guess , new fit < ( > ( guess ) ) ; Complex
Distance : 16

79
Tree	return fit . fit ( fit , STRING_CONSTANT , guess , guess . fit () ) ; false
Code	return fit . fit ( fit , STRING_CONSTANT , guess , guess . fit () ) ; false
Distance : 12

80
Tree	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , return ) ; false
Code	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , return ) ; false
Distance : 12

81
Tree	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , ) ) ; try
Code	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , ) ) ; try
Distance : 12

82
Tree	return fit . fit ( this . guess ) ; Complex
Code	return fit . fit ( this . guess ) ; Complex
Distance : 5

83
Tree	return fit ( new ZigguratNormalizedGaussianSampler < guess > ( guess ) , guess ) ;
Code	return fit ( new ZigguratNormalizedGaussianSampler < guess > ( guess ) , guess ) ;
Distance : 9

84
Tree	return fit . fit ( Gaussian.Parametric , guess . fit () , NUMBER_CONSTANT ) ;
Code	return fit . fit ( Gaussian.Parametric , guess . fit () , NUMBER_CONSTANT ) ;
Distance : 9

85
Tree	return fit . fit ( fit , STRING_CONSTANT , guess , fit . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; Complex
Code	return fit . fit ( fit , STRING_CONSTANT , guess , fit . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; Complex
Distance : 16

86
Tree	return fit ( new Gaussian.Parametric < Gaussian.Parametric > ( guess ) , guess ) ; false
Code	return fit ( new Gaussian.Parametric < Gaussian.Parametric > ( guess ) , guess ) ; false
Distance : 10

87
Tree	return fit . fit () . fit ( guess , false , guess ) ; nCols
Code	return fit . fit () . fit ( guess , false , guess ) ; nCols
Distance : 10

88
Tree	return fit . fit ( fit , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; false
Code	return fit . fit ( fit , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; false
Distance : 13

89
Tree	return this . Gaussian.Parametric . fit ( guess . fit () ) ; Complex
Code	return this . Gaussian.Parametric . fit ( guess . fit () ) ; Complex
Distance : 8

90
Tree	return this . Gaussian.Parametric . fit ( guess . fit () ) ; try
Code	return this . Gaussian.Parametric . fit ( guess . fit () ) ; try
Distance : 8

91
Tree	return this . Gaussian.Parametric . fit ( Gaussian.Parametric . fit () ) ; false
Code	return this . Gaussian.Parametric . fit ( Gaussian.Parametric . fit () ) ; false
Distance : 9

92
Tree	return fit . fit ( ( . fit () . guess ) ;
Code	return fit . fit ( ( . fit () . guess ) ;
Distance : 7

93
Tree	return fit . fit ( fit , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; try
Code	return fit . fit ( fit , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; try
Distance : 13

94
Tree	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ;
Code	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ;
Distance : 9

95
Tree	return fit . fit ( fit , guess . fit () , fit ( NUMBER_CONSTANT ) ) ;
Code	return fit . fit ( fit , guess . fit () , fit ( NUMBER_CONSTANT ) ) ;
Distance : 12

========================================================================


========================================================================
Example Number: 12
Parent Code is: 
int sum = NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Child code is: 
double sum = NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=sum}) (204{val==}) (34{val=NUMBER_CONSTANT})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=double}) (59 (800{val=sum}) (204{val==}) (34{val=NUMBER_CONSTANT})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/57/parent/src_main_java_org_apache_commons_math_stat_clustering_KMeansPlusPlusClusterer.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 124
Correct
========================================================================
True

0
Tree	int sum ;
Code	int sum ;
Distance : 3

1
Tree	final int sum ;
Code	final int sum ;
Distance : 4

2
Tree	int sum = iterator () ;
Code	int sum = iterator () ;
Distance : 3

3
Tree	int sum = NUMBER_CONSTANT ;
Code	int sum = NUMBER_CONSTANT ;
Distance : 1

4
Tree	int sum = Coordinates3D.NEGATIVE_INFINITY () ;
Code	int sum = Coordinates3D.NEGATIVE_INFINITY () ;
Distance : 3

5
Tree	int sum = Coordinates3D.NEGATIVE_INFINITY ;
Code	int sum = Coordinates3D.NEGATIVE_INFINITY ;
Distance : 2

6
Tree	int sum = floor () ;
Code	int sum = floor () ;
Distance : 3

7
Tree	int sum = iterator () . sum ;
Code	int sum = iterator () . sum ;
Distance : 5

8
Tree	int sum = ( sum - NUMBER_CONSTANT ) ? null : Double.MIN_VALUE ;
Code	int sum = ( sum - NUMBER_CONSTANT ) ? null : Double.MIN_VALUE ;
Distance : 9

9
Tree	int sum = false ;
Code	int sum = false ;
Distance : 2

10
Tree	boolean sum = null ;
Code	boolean sum = null ;
Distance : 2

11
Tree	int sum = new RankDeficientMatrixException () ;
Code	int sum = new RankDeficientMatrixException () ;
Distance : 4

12
Tree	int sum = false ;
Code	int sum = false ;
Distance : 2

13
Tree	boolean sum = NUMBER_CONSTANT ;
Code	boolean sum = NUMBER_CONSTANT ;
Distance : 1

14
Tree	int int ;
Code	int int ;
Distance : 4

15
Tree	int sum = coefficients.length ;
Code	int sum = coefficients.length ;
Distance : 2

16
Tree	final double sum ;
Code	final double sum ;
Distance : 3

17
Tree	int sum [] = sum ;
Code	int sum [] = sum ;
Distance : 3

18
Tree	int sum = ( sum ) sum ;
Code	int sum = ( sum ) sum ;
Distance : 5

19
Tree	int sum = null ;
Code	int sum = null ;
Distance : 2

20
Tree	final int sum = getV () ;
Code	final int sum = getV () ;
Distance : 4

21
Tree	int sum = sum ;
Code	int sum = sum ;
Distance : 2

22
Tree	int sum = Coordinates3D.NaN () - NUMBER_CONSTANT ;
Code	int sum = Coordinates3D.NaN () - NUMBER_CONSTANT ;
Distance : 4

23
Tree	int sum = true ;
Code	int sum = true ;
Distance : 2

24
Tree	int sum = null ;
Code	int sum = null ;
Distance : 2

25
Tree	int sum [] = floor () ;
Code	int sum [] = floor () ;
Distance : 4

26
Tree	int sum = true ;
Code	int sum = true ;
Distance : 2

27
Tree	long sum = ( sum ) sum ;
Code	long sum = ( sum ) sum ;
Distance : 5

28
Tree	final int sum = iterator () ;
Code	final int sum = iterator () ;
Distance : 4

29
Tree	int sum = Coordinates3D.NaN ;
Code	int sum = Coordinates3D.NaN ;
Distance : 2

30
Tree	int sum = this . sum ;
Code	int sum = this . sum ;
Distance : 4

31
Tree	boolean sum = this . sum . sum ;
Code	boolean sum = this . sum . sum ;
Distance : 6

32
Tree	double sum = ( sum ) sum ;
Code	double sum = ( sum ) sum ;
Distance : 4

33
Tree	boolean sum ;
Code	boolean sum ;
Distance : 3

34
Tree	final int sum = sign () ;
Code	final int sum = sign () ;
Distance : 4

35
Tree	int sum = null ;
Code	int sum = null ;
Distance : 2

36
Tree	boolean sum = sum ;
Code	boolean sum = sum ;
Distance : 2

37
Tree	int sum = this . sum . sum ;
Code	int sum = this . sum . sum ;
Distance : 6

38
Tree	double sum = sum ;
Code	double sum = sum ;
Distance : 1

39
Tree	long sum ;
Code	long sum ;
Distance : 3

40
Tree	int sum [] = iterator () ;
Code	int sum [] = iterator () ;
Distance : 4

41
Tree	int sum = false ;
Code	int sum = false ;
Distance : 2

42
Tree	int sum = sum ? LocalizedFormats.NUMBER_TOO_SMALL : scale.length ;
Code	int sum = sum ? LocalizedFormats.NUMBER_TOO_SMALL : scale.length ;
Distance : 6

43
Tree	int sum = true ;
Code	int sum = true ;
Distance : 2

44
Tree	int sum = Coordinates3D.NaN () ;
Code	int sum = Coordinates3D.NaN () ;
Distance : 3

45
Tree	public int sum ;
Code	public int sum ;
Distance : 4

46
Tree	double sum = NUMBER_CONSTANT ;
Code	double sum = NUMBER_CONSTANT ;
Distance : 0

47
Tree	int sum = NUMBER_CONSTANT * Double.MIN_VALUE ;
Code	int sum = NUMBER_CONSTANT * Double.MIN_VALUE ;
Distance : 3

48
Tree	long int ;
Code	long int ;
Distance : 4

49
Tree	long sum = true ;
Code	long sum = true ;
Distance : 2

50
Tree	double sum = null ;
Code	double sum = null ;
Distance : 1

51
Tree	int sum = sum ? LocalizedFormats.NUMBER_TOO_SMALL : FastMath.PI ;
Code	int sum = sum ? LocalizedFormats.NUMBER_TOO_SMALL : FastMath.PI ;
Distance : 6

52
Tree	public int sum = NUMBER_CONSTANT ;
Code	public int sum = NUMBER_CONSTANT ;
Distance : 2

53
Tree	double sum ;
Code	double sum ;
Distance : 2

54
Tree	long sum = true ;
Code	long sum = true ;
Distance : 2

55
Tree	int sum = null ;
Code	int sum = null ;
Distance : 2

56
Tree	boolean sum = this . sum ;
Code	boolean sum = this . sum ;
Distance : 4

57
Tree	long sum = sum + NUMBER_CONSTANT ;
Code	long sum = sum + NUMBER_CONSTANT ;
Distance : 3

58
Tree	int isLastStep [] = sum ;
Code	int isLastStep [] = sum ;
Distance : 4

59
Tree	int sum = new sum () ;
Code	int sum = new sum () ;
Distance : 4

60
Tree	int sum = Coordinates3D.NEGATIVE_INFINITY () - NUMBER_CONSTANT ;
Code	int sum = Coordinates3D.NEGATIVE_INFINITY () - NUMBER_CONSTANT ;
Distance : 4

61
Tree	long sum = NUMBER_CONSTANT ;
Code	long sum = NUMBER_CONSTANT ;
Distance : 1

62
Tree	int sum = Coordinates3D.NaN () . sum ;
Code	int sum = Coordinates3D.NaN () . sum ;
Distance : 5

63
Tree	int sum = sum ? LocalizedFormats.NUMBER_TOO_SMALL : sample2.length ;
Code	int sum = sum ? LocalizedFormats.NUMBER_TOO_SMALL : sample2.length ;
Distance : 6

64
Tree	final int [] [] sum ;
Code	final int [] [] sum ;
Distance : 5

65
Tree	long sum = true ;
Code	long sum = true ;
Distance : 2

66
Tree	final int sum = NUMBER_CONSTANT ;
Code	final int sum = NUMBER_CONSTANT ;
Distance : 2

67
Tree	int sum = floor () . sum ;
Code	int sum = floor () . sum ;
Distance : 5

68
Tree	int LocalizedFormats.ARRAY_SUMS_TO_ZERO [] = sum ;
Code	int LocalizedFormats.ARRAY_SUMS_TO_ZERO [] = sum ;
Distance : 4

69
Tree	int sum [] = getSampleSize () ;
Code	int sum [] = getSampleSize () ;
Distance : 4

70
Tree	int += ;
Code	int += ;
Distance : 4

71
Tree	int sum = NUMBER_CONSTANT * FastMath.PI ;
Code	int sum = NUMBER_CONSTANT * FastMath.PI ;
Distance : 3

72
Tree	long sum = null ;
Code	long sum = null ;
Distance : 2

73
Tree	int sum = new ArrayList () ;
Code	int sum = new ArrayList () ;
Distance : 4

74
Tree	int sum = floor () - NUMBER_CONSTANT ;
Code	int sum = floor () - NUMBER_CONSTANT ;
Distance : 4

75
Tree	double sum = sum + NUMBER_CONSTANT ;
Code	double sum = sum + NUMBER_CONSTANT ;
Distance : 2

76
Tree	int sum = iterator () - NUMBER_CONSTANT ;
Code	int sum = iterator () - NUMBER_CONSTANT ;
Distance : 4

77
Tree	boolean sum = ( sum ) sum ;
Code	boolean sum = ( sum ) sum ;
Distance : 5

78
Tree	int sum = false ;
Code	int sum = false ;
Distance : 2

79
Tree	int sum = NUMBER_CONSTANT * Precision.EPSILON ;
Code	int sum = NUMBER_CONSTANT * Precision.EPSILON ;
Distance : 3

80
Tree	int sum = Coordinates3D.NEGATIVE_INFINITY () . sum ;
Code	int sum = Coordinates3D.NEGATIVE_INFINITY () . sum ;
Distance : 5

81
Tree	double sum = NUMBER_CONSTANT ;
Code	double sum = NUMBER_CONSTANT ;
Distance : 0

82
Tree	int sum [] = Coordinates3D.NaN () ;
Code	int sum [] = Coordinates3D.NaN () ;
Distance : 4

83
Tree	int sum = true ;
Code	int sum = true ;
Distance : 2

84
Tree	int sum = null ;
Code	int sum = null ;
Distance : 2

85
Tree	long sum = true ;
Code	long sum = true ;
Distance : 2

86
Tree	int sum = true ;
Code	int sum = true ;
Distance : 2

87
Tree	int sum = null ;
Code	int sum = null ;
Distance : 2

88
Tree	long sum = true ;
Code	long sum = true ;
Distance : 2

89
Tree	int sum = PivotSelectionRule.DANTZIG ;
Code	int sum = PivotSelectionRule.DANTZIG ;
Distance : 2

90
Tree	int sum = sum + NUMBER_CONSTANT ;
Code	int sum = sum + NUMBER_CONSTANT ;
Distance : 3

91
Tree	int sum = true ;
Code	int sum = true ;
Distance : 2

92
Tree	int sum = NUMBER_CONSTANT * Coordinates3D.NaN ;
Code	int sum = NUMBER_CONSTANT * Coordinates3D.NaN ;
Distance : 3

93
Tree	int sum = new OpenIntToDoubleHashMap () ;
Code	int sum = new OpenIntToDoubleHashMap () ;
Distance : 4

94
Tree	int sum = false ;
Code	int sum = false ;
Distance : 2

95
Tree	final int sum = floor () ;
Code	final int sum = floor () ;
Distance : 4

96
Tree	final long sum ;
Code	final long sum ;
Distance : 4

97
Tree	int sum = false ;
Code	int sum = false ;
Distance : 2

98
Tree	int sum = ( sum - NUMBER_CONSTANT ) ? null : sample2.length ;
Code	int sum = ( sum - NUMBER_CONSTANT ) ? null : sample2.length ;
Distance : 9

99
Tree	boolean sum = STRING_CONSTANT + sum ;
Code	boolean sum = STRING_CONSTANT + sum ;
Distance : 4

100
Tree	final double sum = NUMBER_CONSTANT ;
Code	final double sum = NUMBER_CONSTANT ;
Distance : 1

101
Tree	double sum = true ;
Code	double sum = true ;
Distance : 1

102
Tree	long sum = this . sum ;
Code	long sum = this . sum ;
Distance : 4

103
Tree	long sum = this . sum . sum ;
Code	long sum = this . sum . sum ;
Distance : 6

104
Tree	int double ;
Code	int double ;
Distance : 4

105
Tree	int sum = STRING_CONSTANT + sum ;
Code	int sum = STRING_CONSTANT + sum ;
Distance : 4

106
Tree	int sum = NUMBER_CONSTANT ;
Code	int sum = NUMBER_CONSTANT ;
Distance : 1

107
Tree	int sum = ( sum - NUMBER_CONSTANT ) ? null : FastMath.PI ;
Code	int sum = ( sum - NUMBER_CONSTANT ) ? null : FastMath.PI ;
Distance : 9

108
Tree	double sum = this . sum ;
Code	double sum = this . sum ;
Distance : 3

109
Tree	int sum = ( sum - NUMBER_CONSTANT ) ? null : scale.length ;
Code	int sum = ( sum - NUMBER_CONSTANT ) ? null : scale.length ;
Distance : 9

110
Tree	final double [] [] sum ;
Code	final double [] [] sum ;
Distance : 4

111
Tree	long sum = true ;
Code	long sum = true ;
Distance : 2

112
Tree	long sum = sum ;
Code	long sum = sum ;
Distance : 2

113
Tree	public int [] [] sum ;
Code	public int [] [] sum ;
Distance : 5

114
Tree	double sum = this . sum . sum ;
Code	double sum = this . sum . sum ;
Distance : 5

115
Tree	final long [] [] sum ;
Code	final long [] [] sum ;
Distance : 5

116
Tree	double sum = STRING_CONSTANT + sum ;
Code	double sum = STRING_CONSTANT + sum ;
Distance : 3

117
Tree	long sum = NUMBER_CONSTANT ;
Code	long sum = NUMBER_CONSTANT ;
Distance : 1

118
Tree	int sum = sum ? LocalizedFormats.NUMBER_TOO_SMALL : Double.NaN ;
Code	int sum = sum ? LocalizedFormats.NUMBER_TOO_SMALL : Double.NaN ;
Distance : 6

119
Tree	final long sum = NUMBER_CONSTANT ;
Code	final long sum = NUMBER_CONSTANT ;
Distance : 2

120
Tree	long sum [] = sum ;
Code	long sum [] = sum ;
Distance : 3

121
Tree	long sum = STRING_CONSTANT + sum ;
Code	long sum = STRING_CONSTANT + sum ;
Distance : 4

122
Tree	boolean sum = sum + NUMBER_CONSTANT ;
Code	boolean sum = sum + NUMBER_CONSTANT ;
Distance : 3

123
Tree	boolean sum = NUMBER_CONSTANT ;
Code	boolean sum = NUMBER_CONSTANT ;
Distance : 1

========================================================================


========================================================================
Example Number: 13
Parent Code is: 
Iterator iter = res.entries . iterator () ;
-------------------------------------------------------------------------------
Child code is: 
Iterator iter = entries . iterator () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (40{val=res.entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (800{val=entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/49/parent/src_main_java_org_apache_commons_math_linear_OpenMapRealVector.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 184
Correct
========================================================================
True

0
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

1
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

2
Tree	Iterator iter = entries . iterator ( iter , null ) ;
Code	Iterator iter = entries . iterator ( iter , null ) ;
Distance : 5

3
Tree	Iterator entries = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ;
Distance : 10

4
Tree	Iterator entries = iterator ( STRING_CONSTANT , Iterator . iterator () ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , Iterator . iterator () ) ;
Distance : 7

5
Tree	Iterator iter = iterator ( iter . class ) ;
Code	Iterator iter = iterator ( iter . class ) ;
Distance : 5

6
Tree	Iterator entries = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ;
Distance : 8

7
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Distance : 8

8
Tree	Iterator iter = iterator ( this . iter ) ;
Code	Iterator iter = iterator ( this . iter ) ;
Distance : 5

9
Tree	Iterator entries = this . entries . iterator ( Iterator ) ;
Code	Iterator entries = this . entries . iterator ( Iterator ) ;
Distance : 6

10
Tree	Iterator iter = iterator ( Iterator , Iterator ) ;
Code	Iterator iter = iterator ( Iterator , Iterator ) ;
Distance : 6

11
Tree	Iterator entries = iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iterator ( NUMBER_CONSTANT ) ;
Distance : 5

12
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 7

13
Tree	Iterator entries = iterator ( entries . class ) ;
Code	Iterator entries = iterator ( entries . class ) ;
Distance : 5

14
Tree	Iterator iter = this . entries . iterator ( Iterator ) ;
Code	Iterator iter = this . entries . iterator ( Iterator ) ;
Distance : 5

15
Tree	Iterator iter = res.entries . iterator () . iterator () ;
Code	Iterator iter = res.entries . iterator () . iterator () ;
Distance : 4

16
Tree	Iterator entries = this . iter . iterator () ;
Code	Iterator entries = this . iter . iterator () ;
Distance : 4

17
Tree	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 7

18
Tree	Iterator entries = new Iterator () . iterator () ;
Code	Iterator entries = new Iterator () . iterator () ;
Distance : 4

19
Tree	Iterator entries = iterator ( iter . class ) ;
Code	Iterator entries = iterator ( iter . class ) ;
Distance : 6

20
Tree	Iterator entries = iter . iterator ( Iterator , NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( Iterator , NUMBER_CONSTANT ) ;
Distance : 7

21
Tree	Iterator iter = this . entries . iterator () . iterator () ;
Code	Iterator iter = this . entries . iterator () . iterator () ;
Distance : 5

22
Tree	Iterator entries = new Iterator ( STRING_CONSTANT ) . iterator () ;
Code	Iterator entries = new Iterator ( STRING_CONSTANT ) . iterator () ;
Distance : 6

23
Tree	Iterator entries = res.entries . iterator () ;
Code	Iterator entries = res.entries . iterator () ;
Distance : 2

24
Tree	Iterator iter = iter . iterator ( entries , this . iter ) ;
Code	Iterator iter = iter . iterator ( entries , this . iter ) ;
Distance : 8

25
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 12

26
Tree	Iterator iter = iter . iterator ( iter , null ) ;
Code	Iterator iter = iter . iterator ( iter , null ) ;
Distance : 6

27
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 11

28
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; k
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; k
Distance : 11

29
Tree	Iterator iter = new Iterator () . iterator () ; nCols
Code	Iterator iter = new Iterator () . iterator () ; nCols
Distance : 4

30
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 14

31
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; nCols
Distance : 5

32
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; nCols
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; nCols
Distance : 11

33
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ;
Distance : 4

34
Tree	Iterator iter = iterator () ;
Code	Iterator iter = iterator () ;
Distance : 2

35
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; k
Distance : 7

36
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; k
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; k
Distance : 8

37
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; k
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; k
Distance : 5

38
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

39
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 11

40
Tree	Iterator iter = iterator () ; k
Code	Iterator iter = iterator () ; k
Distance : 3

41
Tree	Iterator iter = iterator () ; nCols
Code	Iterator iter = iterator () ; nCols
Distance : 3

42
Tree	Iterator iter = iter . iterator () ;
Code	Iterator iter = iter . iterator () ;
Distance : 1

43
Tree	Iterator iter = iter . iterator ( null ) ;
Code	Iterator iter = iter . iterator ( null ) ;
Distance : 4

44
Tree	Iterator iter = iterator ( Iterator , Iterator ) ; nCols
Code	Iterator iter = iterator ( Iterator , Iterator ) ; nCols
Distance : 7

45
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; k
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; k
Distance : 6

46
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Distance : 15

47
Tree	Iterator iter = iterator ( null , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( null , STRING_CONSTANT ) ;
Distance : 6

48
Tree	Iterator entries = this . iter . iterator ( Iterator ) ;
Code	Iterator entries = this . iter . iterator ( Iterator ) ;
Distance : 7

49
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

50
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

51
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 7

52
Tree	Iterator iter = iter . iterator ( entries , null ) ;
Code	Iterator iter = iter . iterator ( entries , null ) ;
Distance : 6

53
Tree	Iterator iter = iter . iterator ( break; ) ;
Code	Iterator iter = iter . iterator ( break; ) ;
Distance : 4

54
Tree	Iterator entries = iterator ( STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT ) ;
Distance : 5

55
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 6

56
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Distance : 7

57
Tree	Iterator iter = iter . iterator ( iter . class ) ;
Code	Iterator iter = iter . iterator ( iter . class ) ;
Distance : 6

58
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

59
Tree	Iterator entries = iterator ( Iterator , Iterator ) ;
Code	Iterator entries = iterator ( Iterator , Iterator ) ;
Distance : 7

60
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 11

61
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Distance : 7

62
Tree	Iterator entries = iter . iterator ( null ) ;
Code	Iterator entries = iter . iterator ( null ) ;
Distance : 5

63
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT ) ;
Distance : 4

64
Tree	Iterator iter = iter . iterator ( entries . class ) ;
Code	Iterator iter = iter . iterator ( entries . class ) ;
Distance : 6

65
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 3

66
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 10

67
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; k
Distance : 7

68
Tree	Iterator iter = this . iter . iterator () ;
Code	Iterator iter = this . iter . iterator () ;
Distance : 3

69
Tree	Iterator iter = iter ( iter . class , entries ) ;
Code	Iterator iter = iter ( iter . class , entries ) ;
Distance : 7

70
Tree	Iterator entries = iterator ( null , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( null , STRING_CONSTANT ) ;
Distance : 7

71
Tree	Iterator iter = iterator ( Iterator ) ;
Code	Iterator iter = iterator ( Iterator ) ;
Distance : 4

72
Tree	Iterator iter = iterator ( this . entries ) ;
Code	Iterator iter = iterator ( this . entries ) ;
Distance : 5

73
Tree	Iterator iter = this . entries . iterator () ;
Code	Iterator iter = this . entries . iterator () ;
Distance : 2

74
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

75
Tree	Iterator entries = iterator ( this . entries ) ;
Code	Iterator entries = iterator ( this . entries ) ;
Distance : 6

76
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; nCols
Distance : 8

77
Tree	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ;
Distance : 6

78
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Distance : 9

79
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ;
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ;
Distance : 5

80
Tree	Iterator iter = res.entries . iterator () ; nCols
Code	Iterator iter = res.entries . iterator () ; nCols
Distance : 2

81
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT , Iterator ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT , Iterator ) ;
Distance : 5

82
Tree	Iterator iter = iterator ( Iterator ) . iterator () ; nCols
Code	Iterator iter = iterator ( Iterator ) . iterator () ; nCols
Distance : 5

83
Tree	Iterator iter = entries ( iter . class , entries ) ;
Code	Iterator iter = entries ( iter . class , entries ) ;
Distance : 6

84
Tree	Iterator entries = res.entries . iterator () . iterator () ;
Code	Iterator entries = res.entries . iterator () . iterator () ;
Distance : 5

85
Tree	Iterator entries ;
Code	Iterator entries ;
Distance : 5

86
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; nCols
Distance : 7

87
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ;
Distance : 7

88
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 15

89
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

90
Tree	Iterator iter = entries . iterator ( Iterator , NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( Iterator , NUMBER_CONSTANT ) ;
Distance : 5

91
Tree	static Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	static Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

92
Tree	Iterator iter = iterator ( entries . class ) ;
Code	Iterator iter = iterator ( entries . class ) ;
Distance : 4

93
Tree	Iterator iter = entries . iterator ( entries , null ) ;
Code	Iterator iter = entries . iterator ( entries , null ) ;
Distance : 5

94
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Distance : 11

95
Tree	Iterator iter = iter . iterator ( entries , this . entries ) ;
Code	Iterator iter = iter . iterator ( entries , this . entries ) ;
Distance : 8

96
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT , Iterator ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT , Iterator ) ;
Distance : 6

97
Tree	Iterator iter = iterator ( break; , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( break; , STRING_CONSTANT ) ;
Distance : 6

98
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

99
Tree	Iterator entries = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator entries = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 11

100
Tree	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ;
Distance : 8

101
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT , Iterator ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT , Iterator ) ;
Distance : 7

102
Tree	Iterator iter = iterator ( super(); , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( super(); , STRING_CONSTANT ) ;
Distance : 6

103
Tree	Iterator iter = iterator ( Iterator ) ; nCols
Code	Iterator iter = iterator ( Iterator ) ; nCols
Distance : 5

104
Tree	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

105
Tree	Iterator entries = iterator () ;
Code	Iterator entries = iterator () ;
Distance : 3

106
Tree	Iterator entries = entries . iterator () ;
Code	Iterator entries = entries . iterator () ;
Distance : 1

107
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; nCols
Distance : 5

108
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; k
Distance : 10

109
Tree	Iterator iter = entries . iterator ( null ) ;
Code	Iterator iter = entries . iterator ( null ) ;
Distance : 3

110
Tree	Iterator iter = iter ( entries . class , entries ) ;
Code	Iterator iter = iter ( entries . class , entries ) ;
Distance : 6

111
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 9

112
Tree	Iterator iter = res.entries . iterator () ;
Code	Iterator iter = res.entries . iterator () ;
Distance : 1

113
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

114
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

115
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 11

116
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ;
Distance : 9

117
Tree	Iterator iter = res.entries . iterator () . iterator () ; k
Code	Iterator iter = res.entries . iterator () . iterator () ; k
Distance : 5

118
Tree	Iterator entries = this . entries . iterator () . iterator () ;
Code	Iterator entries = this . entries . iterator () . iterator () ;
Distance : 6

119
Tree	Iterator iter = entries . iterator ( entries . class ) ;
Code	Iterator iter = entries . iterator ( entries . class ) ;
Distance : 5

120
Tree	Iterator iter ; k
Code	Iterator iter ; k
Distance : 6

121
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Distance : 11

122
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; nCols
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; nCols
Distance : 6

123
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Distance : 8

124
Tree	Iterator iter = iter ( iter . class , iter ) ;
Code	Iterator iter = iter ( iter . class , iter ) ;
Distance : 7

125
Tree	Iterator iter = this . iter . iterator () . iterator () ;
Code	Iterator iter = this . iter . iterator () . iterator () ;
Distance : 6

126
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 12

127
Tree	Iterator entries = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 13

128
Tree	Iterator entries = iterator ( STRING_CONSTANT , iter , iter ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , iter , iter ) ;
Distance : 9

129
Tree	Iterator iter = res.entries . iterator () ; k
Code	Iterator iter = res.entries . iterator () ; k
Distance : 2

130
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; nCols
Distance : 10

131
Tree	Iterator entries = iterator ( Iterator ) ;
Code	Iterator entries = iterator ( Iterator ) ;
Distance : 5

132
Tree	Iterator iter = new Iterator () . iterator () ; k
Code	Iterator iter = new Iterator () . iterator () ; k
Distance : 4

133
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; k
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; k
Distance : 7

134
Tree	Iterator iter = entries . iterator ( entries , this . iter ) ;
Code	Iterator iter = entries . iterator ( entries , this . iter ) ;
Distance : 7

135
Tree	Iterator iter = iterator ( Iterator ) . iterator () ; k
Code	Iterator iter = iterator ( Iterator ) . iterator () ; k
Distance : 5

136
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Distance : 9

137
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ;
Distance : 6

138
Tree	Iterator iter = new Iterator () . iterator () ;
Code	Iterator iter = new Iterator () . iterator () ;
Distance : 3

139
Tree	protected Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	protected Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

140
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

141
Tree	Iterator iter = iterator ( STRING_CONSTANT , entries , iter ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , entries , iter ) ;
Distance : 7

142
Tree	Iterator entries = res.entries . iterator () ;
Code	Iterator entries = res.entries . iterator () ;
Distance : 2

143
Tree	final Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	final Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

144
Tree	Iterator iter = iterator ( Iterator ) ; k
Code	Iterator iter = iterator ( Iterator ) ; k
Distance : 5

145
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , true ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , true ) ;
Distance : 5

146
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

147
Tree	Iterator iter = res.entries . iterator () . iterator () ; nCols
Code	Iterator iter = res.entries . iterator () . iterator () ; nCols
Distance : 5

148
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

149
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

150
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Distance : 9

151
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , true ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , true ) ;
Distance : 7

152
Tree	Iterator iter = this . iter . iterator ( Iterator ) ;
Code	Iterator iter = this . iter . iterator ( Iterator ) ;
Distance : 6

153
Tree	Iterator iter ;
Code	Iterator iter ;
Distance : 5

154
Tree	Iterator entries = this . entries . iterator () ;
Code	Iterator entries = this . entries . iterator () ;
Distance : 3

155
Tree	Iterator iter = entries . iterator () ;
Code	Iterator iter = entries . iterator () ;
Distance : 0

156
Tree	Iterator iter = entries . iterator ( iter . class ) ;
Code	Iterator iter = entries . iterator ( iter . class ) ;
Distance : 5

157
Tree	Iterator iter = res.entries . iterator () ;
Code	Iterator iter = res.entries . iterator () ;
Distance : 1

158
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 10

159
Tree	Iterator iter ; nCols
Code	Iterator iter ; nCols
Distance : 6

160
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; k
Distance : 13

161
Tree	Iterator entries = entries . iterator ( Iterator , NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( Iterator , NUMBER_CONSTANT ) ;
Distance : 6

162
Tree	Iterator iter = iterator ( Iterator , Iterator ) ; k
Code	Iterator iter = iterator ( Iterator , Iterator ) ; k
Distance : 7

163
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; nCols
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; nCols
Distance : 5

164
Tree	Iterator iter = res.entries . iterator () ; nCols
Code	Iterator iter = res.entries . iterator () ; nCols
Distance : 2

165
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; nCols
Distance : 13

166
Tree	Iterator iter = iter . iterator ( iter , this . iter ) ;
Code	Iterator iter = iter . iterator ( iter , this . iter ) ;
Distance : 8

167
Tree	abstract Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	abstract Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

168
Tree	Iterator entries = iterator ( this . iter ) ;
Code	Iterator entries = iterator ( this . iter ) ;
Distance : 6

169
Tree	Iterator iter = iterator ( Iterator ) . iterator () ;
Code	Iterator iter = iterator ( Iterator ) . iterator () ;
Distance : 4

170
Tree	Iterator entries = iterator ( Iterator ) . iterator () ;
Code	Iterator entries = iterator ( Iterator ) . iterator () ;
Distance : 5

171
Tree	Iterator entries = iterator ( STRING_CONSTANT , entries , iter ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , entries , iter ) ;
Distance : 8

172
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

173
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; k
Distance : 5

174
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; nCols
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; nCols
Distance : 7

175
Tree	Iterator entries = iter . iterator () ;
Code	Iterator entries = iter . iterator () ;
Distance : 2

176
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , true ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , true ) ;
Distance : 6

177
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

178
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , false ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , false ) ;
Distance : 6

179
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ;
Distance : 6

180
Tree	Iterator entries = this . iter . iterator () . iterator () ;
Code	Iterator entries = this . iter . iterator () . iterator () ;
Distance : 7

181
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; k
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; k
Distance : 5

182
Tree	Iterator iter = res.entries . iterator () ; k
Code	Iterator iter = res.entries . iterator () ; k
Distance : 2

183
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Distance : 15

========================================================================


========================================================================
Example Number: 14
Parent Code is: 
Iterator iter = res.entries . iterator () ;
-------------------------------------------------------------------------------
Child code is: 
Iterator iter = entries . iterator () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (40{val=res.entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (800{val=entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/49/parent/src_main_java_org_apache_commons_math_linear_OpenMapRealVector.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 184
Correct
========================================================================
True

0
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

1
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

2
Tree	Iterator iter = entries . iterator ( iter , null ) ;
Code	Iterator iter = entries . iterator ( iter , null ) ;
Distance : 5

3
Tree	Iterator entries = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ;
Distance : 10

4
Tree	Iterator entries = iterator ( STRING_CONSTANT , Iterator . iterator () ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , Iterator . iterator () ) ;
Distance : 7

5
Tree	Iterator iter = iterator ( iter . class ) ;
Code	Iterator iter = iterator ( iter . class ) ;
Distance : 5

6
Tree	Iterator entries = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ;
Distance : 8

7
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Distance : 8

8
Tree	Iterator iter = iterator ( this . iter ) ;
Code	Iterator iter = iterator ( this . iter ) ;
Distance : 5

9
Tree	Iterator entries = this . entries . iterator ( Iterator ) ;
Code	Iterator entries = this . entries . iterator ( Iterator ) ;
Distance : 6

10
Tree	Iterator iter = iterator ( Iterator , Iterator ) ;
Code	Iterator iter = iterator ( Iterator , Iterator ) ;
Distance : 6

11
Tree	Iterator entries = iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iterator ( NUMBER_CONSTANT ) ;
Distance : 5

12
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 7

13
Tree	Iterator entries = iterator ( entries . class ) ;
Code	Iterator entries = iterator ( entries . class ) ;
Distance : 5

14
Tree	Iterator iter = this . entries . iterator ( Iterator ) ;
Code	Iterator iter = this . entries . iterator ( Iterator ) ;
Distance : 5

15
Tree	Iterator iter = res.entries . iterator () . iterator () ;
Code	Iterator iter = res.entries . iterator () . iterator () ;
Distance : 4

16
Tree	Iterator entries = this . iter . iterator () ;
Code	Iterator entries = this . iter . iterator () ;
Distance : 4

17
Tree	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 7

18
Tree	Iterator entries = new Iterator () . iterator () ;
Code	Iterator entries = new Iterator () . iterator () ;
Distance : 4

19
Tree	Iterator entries = iterator ( iter . class ) ;
Code	Iterator entries = iterator ( iter . class ) ;
Distance : 6

20
Tree	Iterator entries = iter . iterator ( Iterator , NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( Iterator , NUMBER_CONSTANT ) ;
Distance : 7

21
Tree	Iterator iter = this . entries . iterator () . iterator () ;
Code	Iterator iter = this . entries . iterator () . iterator () ;
Distance : 5

22
Tree	Iterator entries = new Iterator ( STRING_CONSTANT ) . iterator () ;
Code	Iterator entries = new Iterator ( STRING_CONSTANT ) . iterator () ;
Distance : 6

23
Tree	Iterator entries = res.entries . iterator () ;
Code	Iterator entries = res.entries . iterator () ;
Distance : 2

24
Tree	Iterator iter = iter . iterator ( entries , this . iter ) ;
Code	Iterator iter = iter . iterator ( entries , this . iter ) ;
Distance : 8

25
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 12

26
Tree	Iterator iter = iter . iterator ( iter , null ) ;
Code	Iterator iter = iter . iterator ( iter , null ) ;
Distance : 6

27
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 11

28
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; k
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; k
Distance : 11

29
Tree	Iterator iter = new Iterator () . iterator () ; nCols
Code	Iterator iter = new Iterator () . iterator () ; nCols
Distance : 4

30
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 14

31
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; nCols
Distance : 5

32
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; nCols
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; nCols
Distance : 11

33
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ;
Distance : 4

34
Tree	Iterator iter = iterator () ;
Code	Iterator iter = iterator () ;
Distance : 2

35
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; k
Distance : 7

36
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; k
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; k
Distance : 8

37
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; k
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; k
Distance : 5

38
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

39
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 11

40
Tree	Iterator iter = iterator () ; k
Code	Iterator iter = iterator () ; k
Distance : 3

41
Tree	Iterator iter = iterator () ; nCols
Code	Iterator iter = iterator () ; nCols
Distance : 3

42
Tree	Iterator iter = iter . iterator () ;
Code	Iterator iter = iter . iterator () ;
Distance : 1

43
Tree	Iterator iter = iter . iterator ( null ) ;
Code	Iterator iter = iter . iterator ( null ) ;
Distance : 4

44
Tree	Iterator iter = iterator ( Iterator , Iterator ) ; nCols
Code	Iterator iter = iterator ( Iterator , Iterator ) ; nCols
Distance : 7

45
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; k
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; k
Distance : 6

46
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Distance : 15

47
Tree	Iterator iter = iterator ( null , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( null , STRING_CONSTANT ) ;
Distance : 6

48
Tree	Iterator entries = this . iter . iterator ( Iterator ) ;
Code	Iterator entries = this . iter . iterator ( Iterator ) ;
Distance : 7

49
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

50
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

51
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 7

52
Tree	Iterator iter = iter . iterator ( entries , null ) ;
Code	Iterator iter = iter . iterator ( entries , null ) ;
Distance : 6

53
Tree	Iterator iter = iter . iterator ( break; ) ;
Code	Iterator iter = iter . iterator ( break; ) ;
Distance : 4

54
Tree	Iterator entries = iterator ( STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT ) ;
Distance : 5

55
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 6

56
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Distance : 7

57
Tree	Iterator iter = iter . iterator ( iter . class ) ;
Code	Iterator iter = iter . iterator ( iter . class ) ;
Distance : 6

58
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

59
Tree	Iterator entries = iterator ( Iterator , Iterator ) ;
Code	Iterator entries = iterator ( Iterator , Iterator ) ;
Distance : 7

60
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 11

61
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Distance : 7

62
Tree	Iterator entries = iter . iterator ( null ) ;
Code	Iterator entries = iter . iterator ( null ) ;
Distance : 5

63
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT ) ;
Distance : 4

64
Tree	Iterator iter = iter . iterator ( entries . class ) ;
Code	Iterator iter = iter . iterator ( entries . class ) ;
Distance : 6

65
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 3

66
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 10

67
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; k
Distance : 7

68
Tree	Iterator iter = this . iter . iterator () ;
Code	Iterator iter = this . iter . iterator () ;
Distance : 3

69
Tree	Iterator iter = iter ( iter . class , entries ) ;
Code	Iterator iter = iter ( iter . class , entries ) ;
Distance : 7

70
Tree	Iterator entries = iterator ( null , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( null , STRING_CONSTANT ) ;
Distance : 7

71
Tree	Iterator iter = iterator ( Iterator ) ;
Code	Iterator iter = iterator ( Iterator ) ;
Distance : 4

72
Tree	Iterator iter = iterator ( this . entries ) ;
Code	Iterator iter = iterator ( this . entries ) ;
Distance : 5

73
Tree	Iterator iter = this . entries . iterator () ;
Code	Iterator iter = this . entries . iterator () ;
Distance : 2

74
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

75
Tree	Iterator entries = iterator ( this . entries ) ;
Code	Iterator entries = iterator ( this . entries ) ;
Distance : 6

76
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; nCols
Distance : 8

77
Tree	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ;
Distance : 6

78
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Distance : 9

79
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ;
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ;
Distance : 5

80
Tree	Iterator iter = res.entries . iterator () ; nCols
Code	Iterator iter = res.entries . iterator () ; nCols
Distance : 2

81
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT , Iterator ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT , Iterator ) ;
Distance : 5

82
Tree	Iterator iter = iterator ( Iterator ) . iterator () ; nCols
Code	Iterator iter = iterator ( Iterator ) . iterator () ; nCols
Distance : 5

83
Tree	Iterator iter = entries ( iter . class , entries ) ;
Code	Iterator iter = entries ( iter . class , entries ) ;
Distance : 6

84
Tree	Iterator entries = res.entries . iterator () . iterator () ;
Code	Iterator entries = res.entries . iterator () . iterator () ;
Distance : 5

85
Tree	Iterator entries ;
Code	Iterator entries ;
Distance : 5

86
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; nCols
Distance : 7

87
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ;
Distance : 7

88
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 15

89
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

90
Tree	Iterator iter = entries . iterator ( Iterator , NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( Iterator , NUMBER_CONSTANT ) ;
Distance : 5

91
Tree	static Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	static Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

92
Tree	Iterator iter = iterator ( entries . class ) ;
Code	Iterator iter = iterator ( entries . class ) ;
Distance : 4

93
Tree	Iterator iter = entries . iterator ( entries , null ) ;
Code	Iterator iter = entries . iterator ( entries , null ) ;
Distance : 5

94
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Distance : 11

95
Tree	Iterator iter = iter . iterator ( entries , this . entries ) ;
Code	Iterator iter = iter . iterator ( entries , this . entries ) ;
Distance : 8

96
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT , Iterator ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT , Iterator ) ;
Distance : 6

97
Tree	Iterator iter = iterator ( break; , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( break; , STRING_CONSTANT ) ;
Distance : 6

98
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

99
Tree	Iterator entries = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator entries = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 11

100
Tree	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ;
Distance : 8

101
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT , Iterator ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT , Iterator ) ;
Distance : 7

102
Tree	Iterator iter = iterator ( super(); , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( super(); , STRING_CONSTANT ) ;
Distance : 6

103
Tree	Iterator iter = iterator ( Iterator ) ; nCols
Code	Iterator iter = iterator ( Iterator ) ; nCols
Distance : 5

104
Tree	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

105
Tree	Iterator entries = iterator () ;
Code	Iterator entries = iterator () ;
Distance : 3

106
Tree	Iterator entries = entries . iterator () ;
Code	Iterator entries = entries . iterator () ;
Distance : 1

107
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; nCols
Distance : 5

108
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; k
Distance : 10

109
Tree	Iterator iter = entries . iterator ( null ) ;
Code	Iterator iter = entries . iterator ( null ) ;
Distance : 3

110
Tree	Iterator iter = iter ( entries . class , entries ) ;
Code	Iterator iter = iter ( entries . class , entries ) ;
Distance : 6

111
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 9

112
Tree	Iterator iter = res.entries . iterator () ;
Code	Iterator iter = res.entries . iterator () ;
Distance : 1

113
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

114
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

115
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 11

116
Tree	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator ( NUMBER_CONSTANT ) ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator ( NUMBER_CONSTANT ) ) ;
Distance : 9

117
Tree	Iterator iter = res.entries . iterator () . iterator () ; k
Code	Iterator iter = res.entries . iterator () . iterator () ; k
Distance : 5

118
Tree	Iterator entries = this . entries . iterator () . iterator () ;
Code	Iterator entries = this . entries . iterator () . iterator () ;
Distance : 6

119
Tree	Iterator iter = entries . iterator ( entries . class ) ;
Code	Iterator iter = entries . iterator ( entries . class ) ;
Distance : 5

120
Tree	Iterator iter ; k
Code	Iterator iter ; k
Distance : 6

121
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Distance : 11

122
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; nCols
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; nCols
Distance : 6

123
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Distance : 8

124
Tree	Iterator iter = iter ( iter . class , iter ) ;
Code	Iterator iter = iter ( iter . class , iter ) ;
Distance : 7

125
Tree	Iterator iter = this . iter . iterator () . iterator () ;
Code	Iterator iter = this . iter . iterator () . iterator () ;
Distance : 6

126
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 12

127
Tree	Iterator entries = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 13

128
Tree	Iterator entries = iterator ( STRING_CONSTANT , iter , iter ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , iter , iter ) ;
Distance : 9

129
Tree	Iterator iter = res.entries . iterator () ; k
Code	Iterator iter = res.entries . iterator () ; k
Distance : 2

130
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; nCols
Distance : 10

131
Tree	Iterator entries = iterator ( Iterator ) ;
Code	Iterator entries = iterator ( Iterator ) ;
Distance : 5

132
Tree	Iterator iter = new Iterator () . iterator () ; k
Code	Iterator iter = new Iterator () . iterator () ; k
Distance : 4

133
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; k
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; k
Distance : 7

134
Tree	Iterator iter = entries . iterator ( entries , this . iter ) ;
Code	Iterator iter = entries . iterator ( entries , this . iter ) ;
Distance : 7

135
Tree	Iterator iter = iterator ( Iterator ) . iterator () ; k
Code	Iterator iter = iterator ( Iterator ) . iterator () ; k
Distance : 5

136
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Distance : 9

137
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ;
Distance : 6

138
Tree	Iterator iter = new Iterator () . iterator () ;
Code	Iterator iter = new Iterator () . iterator () ;
Distance : 3

139
Tree	protected Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	protected Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

140
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

141
Tree	Iterator iter = iterator ( STRING_CONSTANT , entries , iter ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , entries , iter ) ;
Distance : 7

142
Tree	Iterator entries = res.entries . iterator () ;
Code	Iterator entries = res.entries . iterator () ;
Distance : 2

143
Tree	final Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	final Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

144
Tree	Iterator iter = iterator ( Iterator ) ; k
Code	Iterator iter = iterator ( Iterator ) ; k
Distance : 5

145
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , true ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , true ) ;
Distance : 5

146
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

147
Tree	Iterator iter = res.entries . iterator () . iterator () ; nCols
Code	Iterator iter = res.entries . iterator () . iterator () ; nCols
Distance : 5

148
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

149
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

150
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Distance : 9

151
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , true ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , true ) ;
Distance : 7

152
Tree	Iterator iter = this . iter . iterator ( Iterator ) ;
Code	Iterator iter = this . iter . iterator ( Iterator ) ;
Distance : 6

153
Tree	Iterator iter ;
Code	Iterator iter ;
Distance : 5

154
Tree	Iterator entries = this . entries . iterator () ;
Code	Iterator entries = this . entries . iterator () ;
Distance : 3

155
Tree	Iterator iter = entries . iterator () ;
Code	Iterator iter = entries . iterator () ;
Distance : 0

156
Tree	Iterator iter = entries . iterator ( iter . class ) ;
Code	Iterator iter = entries . iterator ( iter . class ) ;
Distance : 5

157
Tree	Iterator iter = res.entries . iterator () ;
Code	Iterator iter = res.entries . iterator () ;
Distance : 1

158
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 10

159
Tree	Iterator iter ; nCols
Code	Iterator iter ; nCols
Distance : 6

160
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; k
Distance : 13

161
Tree	Iterator entries = entries . iterator ( Iterator , NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( Iterator , NUMBER_CONSTANT ) ;
Distance : 6

162
Tree	Iterator iter = iterator ( Iterator , Iterator ) ; k
Code	Iterator iter = iterator ( Iterator , Iterator ) ; k
Distance : 7

163
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; nCols
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; nCols
Distance : 5

164
Tree	Iterator iter = res.entries . iterator () ; nCols
Code	Iterator iter = res.entries . iterator () ; nCols
Distance : 2

165
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; nCols
Distance : 13

166
Tree	Iterator iter = iter . iterator ( iter , this . iter ) ;
Code	Iterator iter = iter . iterator ( iter , this . iter ) ;
Distance : 8

167
Tree	abstract Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	abstract Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

168
Tree	Iterator entries = iterator ( this . iter ) ;
Code	Iterator entries = iterator ( this . iter ) ;
Distance : 6

169
Tree	Iterator iter = iterator ( Iterator ) . iterator () ;
Code	Iterator iter = iterator ( Iterator ) . iterator () ;
Distance : 4

170
Tree	Iterator entries = iterator ( Iterator ) . iterator () ;
Code	Iterator entries = iterator ( Iterator ) . iterator () ;
Distance : 5

171
Tree	Iterator entries = iterator ( STRING_CONSTANT , entries , iter ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , entries , iter ) ;
Distance : 8

172
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

173
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; k
Distance : 5

174
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; nCols
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; nCols
Distance : 7

175
Tree	Iterator entries = iter . iterator () ;
Code	Iterator entries = iter . iterator () ;
Distance : 2

176
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , true ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , true ) ;
Distance : 6

177
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

178
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , false ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , false ) ;
Distance : 6

179
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ;
Distance : 6

180
Tree	Iterator entries = this . iter . iterator () . iterator () ;
Code	Iterator entries = this . iter . iterator () . iterator () ;
Distance : 7

181
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; k
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; k
Distance : 5

182
Tree	Iterator iter = res.entries . iterator () ; k
Code	Iterator iter = res.entries . iterator () ; k
Distance : 2

183
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Distance : 15

========================================================================


========================================================================
Example Number: 15
Parent Code is: 
Iterator iter = res.entries . iterator () ;
-------------------------------------------------------------------------------
Child code is: 
Iterator iter = entries . iterator () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (40{val=res.entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (800{val=entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/49/parent/src_main_java_org_apache_commons_math_linear_OpenMapRealVector.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 184
Correct
========================================================================
True

0
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

1
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

2
Tree	Iterator iter = entries . iterator ( iter , null ) ;
Code	Iterator iter = entries . iterator ( iter , null ) ;
Distance : 5

3
Tree	Iterator entries = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ;
Distance : 10

4
Tree	Iterator entries = iterator ( STRING_CONSTANT , Iterator . iterator () ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , Iterator . iterator () ) ;
Distance : 7

5
Tree	Iterator iter = iterator ( iter . class ) ;
Code	Iterator iter = iterator ( iter . class ) ;
Distance : 5

6
Tree	Iterator entries = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ;
Distance : 8

7
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Distance : 8

8
Tree	Iterator iter = iterator ( this . iter ) ;
Code	Iterator iter = iterator ( this . iter ) ;
Distance : 5

9
Tree	Iterator entries = this . entries . iterator ( Iterator ) ;
Code	Iterator entries = this . entries . iterator ( Iterator ) ;
Distance : 6

10
Tree	Iterator iter = iterator ( Iterator , Iterator ) ;
Code	Iterator iter = iterator ( Iterator , Iterator ) ;
Distance : 6

11
Tree	Iterator entries = iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iterator ( NUMBER_CONSTANT ) ;
Distance : 5

12
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 7

13
Tree	Iterator entries = iterator ( entries . class ) ;
Code	Iterator entries = iterator ( entries . class ) ;
Distance : 5

14
Tree	Iterator iter = this . entries . iterator ( Iterator ) ;
Code	Iterator iter = this . entries . iterator ( Iterator ) ;
Distance : 5

15
Tree	Iterator iter = res.entries . iterator () . iterator () ;
Code	Iterator iter = res.entries . iterator () . iterator () ;
Distance : 4

16
Tree	Iterator entries = this . iter . iterator () ;
Code	Iterator entries = this . iter . iterator () ;
Distance : 4

17
Tree	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 7

18
Tree	Iterator entries = new Iterator () . iterator () ;
Code	Iterator entries = new Iterator () . iterator () ;
Distance : 4

19
Tree	Iterator entries = iterator ( iter . class ) ;
Code	Iterator entries = iterator ( iter . class ) ;
Distance : 6

20
Tree	Iterator entries = iter . iterator ( Iterator , NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( Iterator , NUMBER_CONSTANT ) ;
Distance : 7

21
Tree	Iterator iter = this . entries . iterator () . iterator () ;
Code	Iterator iter = this . entries . iterator () . iterator () ;
Distance : 5

22
Tree	Iterator entries = new Iterator ( STRING_CONSTANT ) . iterator () ;
Code	Iterator entries = new Iterator ( STRING_CONSTANT ) . iterator () ;
Distance : 6

23
Tree	Iterator entries = res.entries . iterator () ;
Code	Iterator entries = res.entries . iterator () ;
Distance : 2

24
Tree	Iterator iter = iter . iterator ( entries , this . iter ) ;
Code	Iterator iter = iter . iterator ( entries , this . iter ) ;
Distance : 8

25
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 12

26
Tree	Iterator iter = iter . iterator ( iter , null ) ;
Code	Iterator iter = iter . iterator ( iter , null ) ;
Distance : 6

27
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 11

28
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; k
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; k
Distance : 11

29
Tree	Iterator iter = new Iterator () . iterator () ; nCols
Code	Iterator iter = new Iterator () . iterator () ; nCols
Distance : 4

30
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 14

31
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; nCols
Distance : 5

32
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; nCols
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; nCols
Distance : 11

33
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ;
Distance : 4

34
Tree	Iterator iter = iterator () ;
Code	Iterator iter = iterator () ;
Distance : 2

35
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; k
Distance : 7

36
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; k
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; k
Distance : 8

37
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; k
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; k
Distance : 5

38
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

39
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 11

40
Tree	Iterator iter = iterator () ; k
Code	Iterator iter = iterator () ; k
Distance : 3

41
Tree	Iterator iter = iterator () ; nCols
Code	Iterator iter = iterator () ; nCols
Distance : 3

42
Tree	Iterator iter = iter . iterator () ;
Code	Iterator iter = iter . iterator () ;
Distance : 1

43
Tree	Iterator iter = iter . iterator ( null ) ;
Code	Iterator iter = iter . iterator ( null ) ;
Distance : 4

44
Tree	Iterator iter = iterator ( Iterator , Iterator ) ; nCols
Code	Iterator iter = iterator ( Iterator , Iterator ) ; nCols
Distance : 7

45
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; k
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; k
Distance : 6

46
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Distance : 15

47
Tree	Iterator iter = iterator ( null , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( null , STRING_CONSTANT ) ;
Distance : 6

48
Tree	Iterator entries = this . iter . iterator ( Iterator ) ;
Code	Iterator entries = this . iter . iterator ( Iterator ) ;
Distance : 7

49
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

50
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

51
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 7

52
Tree	Iterator iter = iter . iterator ( entries , null ) ;
Code	Iterator iter = iter . iterator ( entries , null ) ;
Distance : 6

53
Tree	Iterator iter = iter . iterator ( break; ) ;
Code	Iterator iter = iter . iterator ( break; ) ;
Distance : 4

54
Tree	Iterator entries = iterator ( STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT ) ;
Distance : 5

55
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 6

56
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Distance : 7

57
Tree	Iterator iter = iter . iterator ( iter . class ) ;
Code	Iterator iter = iter . iterator ( iter . class ) ;
Distance : 6

58
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

59
Tree	Iterator entries = iterator ( Iterator , Iterator ) ;
Code	Iterator entries = iterator ( Iterator , Iterator ) ;
Distance : 7

60
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 11

61
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Distance : 7

62
Tree	Iterator entries = iter . iterator ( null ) ;
Code	Iterator entries = iter . iterator ( null ) ;
Distance : 5

63
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT ) ;
Distance : 4

64
Tree	Iterator iter = iter . iterator ( entries . class ) ;
Code	Iterator iter = iter . iterator ( entries . class ) ;
Distance : 6

65
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 3

66
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 10

67
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; k
Distance : 7

68
Tree	Iterator iter = this . iter . iterator () ;
Code	Iterator iter = this . iter . iterator () ;
Distance : 3

69
Tree	Iterator iter = iter ( iter . class , entries ) ;
Code	Iterator iter = iter ( iter . class , entries ) ;
Distance : 7

70
Tree	Iterator entries = iterator ( null , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( null , STRING_CONSTANT ) ;
Distance : 7

71
Tree	Iterator iter = iterator ( Iterator ) ;
Code	Iterator iter = iterator ( Iterator ) ;
Distance : 4

72
Tree	Iterator iter = iterator ( this . entries ) ;
Code	Iterator iter = iterator ( this . entries ) ;
Distance : 5

73
Tree	Iterator iter = this . entries . iterator () ;
Code	Iterator iter = this . entries . iterator () ;
Distance : 2

74
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

75
Tree	Iterator entries = iterator ( this . entries ) ;
Code	Iterator entries = iterator ( this . entries ) ;
Distance : 6

76
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; nCols
Distance : 8

77
Tree	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ;
Distance : 6

78
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Distance : 9

79
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ;
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ;
Distance : 5

80
Tree	Iterator iter = res.entries . iterator () ; nCols
Code	Iterator iter = res.entries . iterator () ; nCols
Distance : 2

81
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT , Iterator ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT , Iterator ) ;
Distance : 5

82
Tree	Iterator iter = iterator ( Iterator ) . iterator () ; nCols
Code	Iterator iter = iterator ( Iterator ) . iterator () ; nCols
Distance : 5

83
Tree	Iterator iter = entries ( iter . class , entries ) ;
Code	Iterator iter = entries ( iter . class , entries ) ;
Distance : 6

84
Tree	Iterator entries = res.entries . iterator () . iterator () ;
Code	Iterator entries = res.entries . iterator () . iterator () ;
Distance : 5

85
Tree	Iterator entries ;
Code	Iterator entries ;
Distance : 5

86
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; nCols
Distance : 7

87
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ;
Distance : 7

88
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 15

89
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

90
Tree	Iterator iter = entries . iterator ( Iterator , NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( Iterator , NUMBER_CONSTANT ) ;
Distance : 5

91
Tree	static Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	static Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

92
Tree	Iterator iter = iterator ( entries . class ) ;
Code	Iterator iter = iterator ( entries . class ) ;
Distance : 4

93
Tree	Iterator iter = entries . iterator ( entries , null ) ;
Code	Iterator iter = entries . iterator ( entries , null ) ;
Distance : 5

94
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Distance : 11

95
Tree	Iterator iter = iter . iterator ( entries , this . entries ) ;
Code	Iterator iter = iter . iterator ( entries , this . entries ) ;
Distance : 8

96
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT , Iterator ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT , Iterator ) ;
Distance : 6

97
Tree	Iterator iter = iterator ( break; , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( break; , STRING_CONSTANT ) ;
Distance : 6

98
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

99
Tree	Iterator entries = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator entries = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 11

100
Tree	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ;
Distance : 8

101
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT , Iterator ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT , Iterator ) ;
Distance : 7

102
Tree	Iterator iter = iterator ( super(); , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( super(); , STRING_CONSTANT ) ;
Distance : 6

103
Tree	Iterator iter = iterator ( Iterator ) ; nCols
Code	Iterator iter = iterator ( Iterator ) ; nCols
Distance : 5

104
Tree	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

105
Tree	Iterator entries = iterator () ;
Code	Iterator entries = iterator () ;
Distance : 3

106
Tree	Iterator entries = entries . iterator () ;
Code	Iterator entries = entries . iterator () ;
Distance : 1

107
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; nCols
Distance : 5

108
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; k
Distance : 10

109
Tree	Iterator iter = entries . iterator ( null ) ;
Code	Iterator iter = entries . iterator ( null ) ;
Distance : 3

110
Tree	Iterator iter = iter ( entries . class , entries ) ;
Code	Iterator iter = iter ( entries . class , entries ) ;
Distance : 6

111
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 9

112
Tree	Iterator iter = res.entries . iterator () ;
Code	Iterator iter = res.entries . iterator () ;
Distance : 1

113
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

114
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

115
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 11

116
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ;
Distance : 9

117
Tree	Iterator iter = res.entries . iterator () . iterator () ; k
Code	Iterator iter = res.entries . iterator () . iterator () ; k
Distance : 5

118
Tree	Iterator entries = this . entries . iterator () . iterator () ;
Code	Iterator entries = this . entries . iterator () . iterator () ;
Distance : 6

119
Tree	Iterator iter = entries . iterator ( entries . class ) ;
Code	Iterator iter = entries . iterator ( entries . class ) ;
Distance : 5

120
Tree	Iterator iter ; k
Code	Iterator iter ; k
Distance : 6

121
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Distance : 11

122
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; nCols
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; nCols
Distance : 6

123
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Distance : 8

124
Tree	Iterator iter = iter ( iter . class , iter ) ;
Code	Iterator iter = iter ( iter . class , iter ) ;
Distance : 7

125
Tree	Iterator iter = this . iter . iterator () . iterator () ;
Code	Iterator iter = this . iter . iterator () . iterator () ;
Distance : 6

126
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 12

127
Tree	Iterator entries = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 13

128
Tree	Iterator entries = iterator ( STRING_CONSTANT , iter , iter ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , iter , iter ) ;
Distance : 9

129
Tree	Iterator iter = res.entries . iterator () ; k
Code	Iterator iter = res.entries . iterator () ; k
Distance : 2

130
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; nCols
Distance : 10

131
Tree	Iterator entries = iterator ( Iterator ) ;
Code	Iterator entries = iterator ( Iterator ) ;
Distance : 5

132
Tree	Iterator iter = new Iterator () . iterator () ; k
Code	Iterator iter = new Iterator () . iterator () ; k
Distance : 4

133
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; k
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; k
Distance : 7

134
Tree	Iterator iter = entries . iterator ( entries , this . iter ) ;
Code	Iterator iter = entries . iterator ( entries , this . iter ) ;
Distance : 7

135
Tree	Iterator iter = iterator ( Iterator ) . iterator () ; k
Code	Iterator iter = iterator ( Iterator ) . iterator () ; k
Distance : 5

136
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Distance : 9

137
Tree	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator () ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator () ) ;
Distance : 6

138
Tree	Iterator iter = new Iterator () . iterator () ;
Code	Iterator iter = new Iterator () . iterator () ;
Distance : 3

139
Tree	protected Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	protected Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

140
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

141
Tree	Iterator iter = iterator ( STRING_CONSTANT , entries , iter ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , entries , iter ) ;
Distance : 7

142
Tree	Iterator entries = res.entries . iterator () ;
Code	Iterator entries = res.entries . iterator () ;
Distance : 2

143
Tree	final Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	final Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

144
Tree	Iterator iter = iterator ( Iterator ) ; k
Code	Iterator iter = iterator ( Iterator ) ; k
Distance : 5

145
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , true ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , true ) ;
Distance : 5

146
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

147
Tree	Iterator iter = res.entries . iterator () . iterator () ; nCols
Code	Iterator iter = res.entries . iterator () . iterator () ; nCols
Distance : 5

148
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

149
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

150
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Distance : 9

151
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , true ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , true ) ;
Distance : 7

152
Tree	Iterator iter = this . iter . iterator ( Iterator ) ;
Code	Iterator iter = this . iter . iterator ( Iterator ) ;
Distance : 6

153
Tree	Iterator iter ;
Code	Iterator iter ;
Distance : 5

154
Tree	Iterator entries = this . entries . iterator () ;
Code	Iterator entries = this . entries . iterator () ;
Distance : 3

155
Tree	Iterator iter = entries . iterator () ;
Code	Iterator iter = entries . iterator () ;
Distance : 0

156
Tree	Iterator iter = entries . iterator ( iter . class ) ;
Code	Iterator iter = entries . iterator ( iter . class ) ;
Distance : 5

157
Tree	Iterator iter = res.entries . iterator () ;
Code	Iterator iter = res.entries . iterator () ;
Distance : 1

158
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 10

159
Tree	Iterator iter ; nCols
Code	Iterator iter ; nCols
Distance : 6

160
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; k
Distance : 13

161
Tree	Iterator entries = entries . iterator ( Iterator , NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( Iterator , NUMBER_CONSTANT ) ;
Distance : 6

162
Tree	Iterator iter = iterator ( Iterator , Iterator ) ; k
Code	Iterator iter = iterator ( Iterator , Iterator ) ; k
Distance : 7

163
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; nCols
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; nCols
Distance : 5

164
Tree	Iterator iter = res.entries . iterator () ; nCols
Code	Iterator iter = res.entries . iterator () ; nCols
Distance : 2

165
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; nCols
Distance : 13

166
Tree	Iterator iter = iter . iterator ( iter , this . iter ) ;
Code	Iterator iter = iter . iterator ( iter , this . iter ) ;
Distance : 8

167
Tree	abstract Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	abstract Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

168
Tree	Iterator entries = iterator ( this . iter ) ;
Code	Iterator entries = iterator ( this . iter ) ;
Distance : 6

169
Tree	Iterator iter = iterator ( Iterator ) . iterator () ;
Code	Iterator iter = iterator ( Iterator ) . iterator () ;
Distance : 4

170
Tree	Iterator entries = iterator ( Iterator ) . iterator () ;
Code	Iterator entries = iterator ( Iterator ) . iterator () ;
Distance : 5

171
Tree	Iterator entries = iterator ( STRING_CONSTANT , entries , iter ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , entries , iter ) ;
Distance : 8

172
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

173
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; k
Distance : 5

174
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; nCols
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; nCols
Distance : 7

175
Tree	Iterator entries = iter . iterator () ;
Code	Iterator entries = iter . iterator () ;
Distance : 2

176
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , true ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , true ) ;
Distance : 6

177
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

178
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , false ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , false ) ;
Distance : 6

179
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ;
Distance : 6

180
Tree	Iterator entries = this . iter . iterator () . iterator () ;
Code	Iterator entries = this . iter . iterator () . iterator () ;
Distance : 7

181
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; k
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; k
Distance : 5

182
Tree	Iterator iter = res.entries . iterator () ; k
Code	Iterator iter = res.entries . iterator () ; k
Distance : 2

183
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Distance : 15

========================================================================


========================================================================
Example Number: 16
Parent Code is: 
Iterator iter = res.entries . iterator () ;
-------------------------------------------------------------------------------
Child code is: 
Iterator iter = entries . iterator () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (40{val=res.entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (800{val=entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/49/parent/src_main_java_org_apache_commons_math_linear_OpenMapRealVector.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 184
Correct
========================================================================
True

0
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

1
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

2
Tree	Iterator iter = entries . iterator ( iter , null ) ;
Code	Iterator iter = entries . iterator ( iter , null ) ;
Distance : 5

3
Tree	Iterator entries = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ;
Distance : 10

4
Tree	Iterator entries = iterator ( STRING_CONSTANT , Iterator . iterator () ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , Iterator . iterator () ) ;
Distance : 7

5
Tree	Iterator iter = iterator ( iter . class ) ;
Code	Iterator iter = iterator ( iter . class ) ;
Distance : 5

6
Tree	Iterator entries = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ;
Distance : 8

7
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Distance : 8

8
Tree	Iterator iter = iterator ( this . iter ) ;
Code	Iterator iter = iterator ( this . iter ) ;
Distance : 5

9
Tree	Iterator entries = this . entries . iterator ( Iterator ) ;
Code	Iterator entries = this . entries . iterator ( Iterator ) ;
Distance : 6

10
Tree	Iterator iter = iterator ( Iterator , Iterator ) ;
Code	Iterator iter = iterator ( Iterator , Iterator ) ;
Distance : 6

11
Tree	Iterator entries = iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iterator ( NUMBER_CONSTANT ) ;
Distance : 5

12
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 7

13
Tree	Iterator entries = iterator ( entries . class ) ;
Code	Iterator entries = iterator ( entries . class ) ;
Distance : 5

14
Tree	Iterator iter = this . entries . iterator ( Iterator ) ;
Code	Iterator iter = this . entries . iterator ( Iterator ) ;
Distance : 5

15
Tree	Iterator iter = res.entries . iterator () . iterator () ;
Code	Iterator iter = res.entries . iterator () . iterator () ;
Distance : 4

16
Tree	Iterator entries = this . iter . iterator () ;
Code	Iterator entries = this . iter . iterator () ;
Distance : 4

17
Tree	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 7

18
Tree	Iterator entries = new Iterator () . iterator () ;
Code	Iterator entries = new Iterator () . iterator () ;
Distance : 4

19
Tree	Iterator entries = iterator ( iter . class ) ;
Code	Iterator entries = iterator ( iter . class ) ;
Distance : 6

20
Tree	Iterator entries = iter . iterator ( Iterator , NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( Iterator , NUMBER_CONSTANT ) ;
Distance : 7

21
Tree	Iterator iter = this . entries . iterator () . iterator () ;
Code	Iterator iter = this . entries . iterator () . iterator () ;
Distance : 5

22
Tree	Iterator entries = new Iterator ( STRING_CONSTANT ) . iterator () ;
Code	Iterator entries = new Iterator ( STRING_CONSTANT ) . iterator () ;
Distance : 6

23
Tree	Iterator entries = res.entries . iterator () ;
Code	Iterator entries = res.entries . iterator () ;
Distance : 2

24
Tree	Iterator iter = iter . iterator ( entries , this . iter ) ;
Code	Iterator iter = iter . iterator ( entries , this . iter ) ;
Distance : 8

25
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 12

26
Tree	Iterator iter = iter . iterator ( iter , null ) ;
Code	Iterator iter = iter . iterator ( iter , null ) ;
Distance : 6

27
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 11

28
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; k
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; k
Distance : 11

29
Tree	Iterator iter = new Iterator () . iterator () ; nCols
Code	Iterator iter = new Iterator () . iterator () ; nCols
Distance : 4

30
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 14

31
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; nCols
Distance : 5

32
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; nCols
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; nCols
Distance : 11

33
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ;
Distance : 4

34
Tree	Iterator iter = iterator () ;
Code	Iterator iter = iterator () ;
Distance : 2

35
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; k
Distance : 7

36
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; k
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; k
Distance : 8

37
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; k
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; k
Distance : 5

38
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

39
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 11

40
Tree	Iterator iter = iterator () ; k
Code	Iterator iter = iterator () ; k
Distance : 3

41
Tree	Iterator iter = iterator () ; nCols
Code	Iterator iter = iterator () ; nCols
Distance : 3

42
Tree	Iterator iter = iter . iterator () ;
Code	Iterator iter = iter . iterator () ;
Distance : 1

43
Tree	Iterator iter = iter . iterator ( null ) ;
Code	Iterator iter = iter . iterator ( null ) ;
Distance : 4

44
Tree	Iterator iter = iterator ( Iterator , Iterator ) ; nCols
Code	Iterator iter = iterator ( Iterator , Iterator ) ; nCols
Distance : 7

45
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; k
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; k
Distance : 6

46
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Distance : 15

47
Tree	Iterator iter = iterator ( null , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( null , STRING_CONSTANT ) ;
Distance : 6

48
Tree	Iterator entries = this . iter . iterator ( Iterator ) ;
Code	Iterator entries = this . iter . iterator ( Iterator ) ;
Distance : 7

49
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

50
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

51
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 7

52
Tree	Iterator iter = iter . iterator ( entries , null ) ;
Code	Iterator iter = iter . iterator ( entries , null ) ;
Distance : 6

53
Tree	Iterator iter = iter . iterator ( break; ) ;
Code	Iterator iter = iter . iterator ( break; ) ;
Distance : 4

54
Tree	Iterator entries = iterator ( STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT ) ;
Distance : 5

55
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 6

56
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Distance : 7

57
Tree	Iterator iter = iter . iterator ( iter . class ) ;
Code	Iterator iter = iter . iterator ( iter . class ) ;
Distance : 6

58
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

59
Tree	Iterator entries = iterator ( Iterator , Iterator ) ;
Code	Iterator entries = iterator ( Iterator , Iterator ) ;
Distance : 7

60
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 11

61
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Distance : 7

62
Tree	Iterator entries = iter . iterator ( null ) ;
Code	Iterator entries = iter . iterator ( null ) ;
Distance : 5

63
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT ) ;
Distance : 4

64
Tree	Iterator iter = iter . iterator ( entries . class ) ;
Code	Iterator iter = iter . iterator ( entries . class ) ;
Distance : 6

65
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 3

66
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 10

67
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; k
Distance : 7

68
Tree	Iterator iter = this . iter . iterator () ;
Code	Iterator iter = this . iter . iterator () ;
Distance : 3

69
Tree	Iterator iter = iter ( iter . class , entries ) ;
Code	Iterator iter = iter ( iter . class , entries ) ;
Distance : 7

70
Tree	Iterator entries = iterator ( null , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( null , STRING_CONSTANT ) ;
Distance : 7

71
Tree	Iterator iter = iterator ( Iterator ) ;
Code	Iterator iter = iterator ( Iterator ) ;
Distance : 4

72
Tree	Iterator iter = iterator ( this . entries ) ;
Code	Iterator iter = iterator ( this . entries ) ;
Distance : 5

73
Tree	Iterator iter = this . entries . iterator () ;
Code	Iterator iter = this . entries . iterator () ;
Distance : 2

74
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

75
Tree	Iterator entries = iterator ( this . entries ) ;
Code	Iterator entries = iterator ( this . entries ) ;
Distance : 6

76
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; nCols
Distance : 8

77
Tree	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ;
Distance : 6

78
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Distance : 9

79
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ;
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ;
Distance : 5

80
Tree	Iterator iter = res.entries . iterator () ; nCols
Code	Iterator iter = res.entries . iterator () ; nCols
Distance : 2

81
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT , Iterator ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT , Iterator ) ;
Distance : 5

82
Tree	Iterator iter = iterator ( Iterator ) . iterator () ; nCols
Code	Iterator iter = iterator ( Iterator ) . iterator () ; nCols
Distance : 5

83
Tree	Iterator iter = entries ( iter . class , entries ) ;
Code	Iterator iter = entries ( iter . class , entries ) ;
Distance : 6

84
Tree	Iterator entries = res.entries . iterator () . iterator () ;
Code	Iterator entries = res.entries . iterator () . iterator () ;
Distance : 5

85
Tree	Iterator entries ;
Code	Iterator entries ;
Distance : 5

86
Tree	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator () ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator () ) ; nCols
Distance : 7

87
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ;
Distance : 7

88
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 15

89
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

90
Tree	Iterator iter = entries . iterator ( Iterator , NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( Iterator , NUMBER_CONSTANT ) ;
Distance : 5

91
Tree	static Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	static Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

92
Tree	Iterator iter = iterator ( entries . class ) ;
Code	Iterator iter = iterator ( entries . class ) ;
Distance : 4

93
Tree	Iterator iter = entries . iterator ( entries , null ) ;
Code	Iterator iter = entries . iterator ( entries , null ) ;
Distance : 5

94
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Distance : 11

95
Tree	Iterator iter = iter . iterator ( entries , this . entries ) ;
Code	Iterator iter = iter . iterator ( entries , this . entries ) ;
Distance : 8

96
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT , Iterator ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT , Iterator ) ;
Distance : 6

97
Tree	Iterator iter = iterator ( break; , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( break; , STRING_CONSTANT ) ;
Distance : 6

98
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

99
Tree	Iterator entries = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator entries = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 11

100
Tree	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ;
Distance : 8

101
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT , Iterator ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT , Iterator ) ;
Distance : 7

102
Tree	Iterator iter = iterator ( super(); , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( super(); , STRING_CONSTANT ) ;
Distance : 6

103
Tree	Iterator iter = iterator ( Iterator ) ; nCols
Code	Iterator iter = iterator ( Iterator ) ; nCols
Distance : 5

104
Tree	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

105
Tree	Iterator entries = iterator () ;
Code	Iterator entries = iterator () ;
Distance : 3

106
Tree	Iterator entries = entries . iterator () ;
Code	Iterator entries = entries . iterator () ;
Distance : 1

107
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; nCols
Distance : 5

108
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; k
Distance : 10

109
Tree	Iterator iter = entries . iterator ( null ) ;
Code	Iterator iter = entries . iterator ( null ) ;
Distance : 3

110
Tree	Iterator iter = iter ( entries . class , entries ) ;
Code	Iterator iter = iter ( entries . class , entries ) ;
Distance : 6

111
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 9

112
Tree	Iterator iter = res.entries . iterator () ;
Code	Iterator iter = res.entries . iterator () ;
Distance : 1

113
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

114
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

115
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 11

116
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ;
Distance : 9

117
Tree	Iterator iter = res.entries . iterator () . iterator () ; k
Code	Iterator iter = res.entries . iterator () . iterator () ; k
Distance : 5

118
Tree	Iterator entries = this . entries . iterator () . iterator () ;
Code	Iterator entries = this . entries . iterator () . iterator () ;
Distance : 6

119
Tree	Iterator iter = entries . iterator ( entries . class ) ;
Code	Iterator iter = entries . iterator ( entries . class ) ;
Distance : 5

120
Tree	Iterator iter ; k
Code	Iterator iter ; k
Distance : 6

121
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Distance : 11

122
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; nCols
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; nCols
Distance : 6

123
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Distance : 8

124
Tree	Iterator iter = iter ( iter . class , iter ) ;
Code	Iterator iter = iter ( iter . class , iter ) ;
Distance : 7

125
Tree	Iterator iter = this . iter . iterator () . iterator () ;
Code	Iterator iter = this . iter . iterator () . iterator () ;
Distance : 6

126
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 12

127
Tree	Iterator entries = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 13

128
Tree	Iterator entries = iterator ( STRING_CONSTANT , iter , iter ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , iter , iter ) ;
Distance : 9

129
Tree	Iterator iter = res.entries . iterator () ; k
Code	Iterator iter = res.entries . iterator () ; k
Distance : 2

130
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; nCols
Distance : 10

131
Tree	Iterator entries = iterator ( Iterator ) ;
Code	Iterator entries = iterator ( Iterator ) ;
Distance : 5

132
Tree	Iterator iter = new Iterator () . iterator () ; k
Code	Iterator iter = new Iterator () . iterator () ; k
Distance : 4

133
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; k
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; k
Distance : 7

134
Tree	Iterator iter = entries . iterator ( entries , this . iter ) ;
Code	Iterator iter = entries . iterator ( entries , this . iter ) ;
Distance : 7

135
Tree	Iterator iter = iterator ( Iterator ) . iterator () ; k
Code	Iterator iter = iterator ( Iterator ) . iterator () ; k
Distance : 5

136
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Distance : 9

137
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ;
Distance : 6

138
Tree	Iterator iter = new Iterator () . iterator () ;
Code	Iterator iter = new Iterator () . iterator () ;
Distance : 3

139
Tree	protected Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	protected Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

140
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

141
Tree	Iterator iter = iterator ( STRING_CONSTANT , entries , iter ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , entries , iter ) ;
Distance : 7

142
Tree	Iterator entries = res.entries . iterator () ;
Code	Iterator entries = res.entries . iterator () ;
Distance : 2

143
Tree	final Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	final Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

144
Tree	Iterator iter = iterator ( Iterator ) ; k
Code	Iterator iter = iterator ( Iterator ) ; k
Distance : 5

145
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , true ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , true ) ;
Distance : 5

146
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

147
Tree	Iterator iter = res.entries . iterator () . iterator () ; nCols
Code	Iterator iter = res.entries . iterator () . iterator () ; nCols
Distance : 5

148
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

149
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

150
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Distance : 9

151
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , true ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , true ) ;
Distance : 7

152
Tree	Iterator iter = this . iter . iterator ( Iterator ) ;
Code	Iterator iter = this . iter . iterator ( Iterator ) ;
Distance : 6

153
Tree	Iterator iter ;
Code	Iterator iter ;
Distance : 5

154
Tree	Iterator entries = this . entries . iterator () ;
Code	Iterator entries = this . entries . iterator () ;
Distance : 3

155
Tree	Iterator iter = entries . iterator () ;
Code	Iterator iter = entries . iterator () ;
Distance : 0

156
Tree	Iterator iter = entries . iterator ( iter . class ) ;
Code	Iterator iter = entries . iterator ( iter . class ) ;
Distance : 5

157
Tree	Iterator iter = res.entries . iterator () ;
Code	Iterator iter = res.entries . iterator () ;
Distance : 1

158
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 10

159
Tree	Iterator iter ; nCols
Code	Iterator iter ; nCols
Distance : 6

160
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; k
Distance : 13

161
Tree	Iterator entries = entries . iterator ( Iterator , NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( Iterator , NUMBER_CONSTANT ) ;
Distance : 6

162
Tree	Iterator iter = iterator ( Iterator , Iterator ) ; k
Code	Iterator iter = iterator ( Iterator , Iterator ) ; k
Distance : 7

163
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; nCols
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; nCols
Distance : 5

164
Tree	Iterator iter = res.entries . iterator () ; nCols
Code	Iterator iter = res.entries . iterator () ; nCols
Distance : 2

165
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; nCols
Distance : 13

166
Tree	Iterator iter = iter . iterator ( iter , this . iter ) ;
Code	Iterator iter = iter . iterator ( iter , this . iter ) ;
Distance : 8

167
Tree	abstract Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	abstract Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

168
Tree	Iterator entries = iterator ( this . iter ) ;
Code	Iterator entries = iterator ( this . iter ) ;
Distance : 6

169
Tree	Iterator iter = iterator ( Iterator ) . iterator () ;
Code	Iterator iter = iterator ( Iterator ) . iterator () ;
Distance : 4

170
Tree	Iterator entries = iterator ( Iterator ) . iterator () ;
Code	Iterator entries = iterator ( Iterator ) . iterator () ;
Distance : 5

171
Tree	Iterator entries = iterator ( STRING_CONSTANT , entries , iter ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , entries , iter ) ;
Distance : 8

172
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

173
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; k
Distance : 5

174
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; nCols
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; nCols
Distance : 7

175
Tree	Iterator entries = iter . iterator () ;
Code	Iterator entries = iter . iterator () ;
Distance : 2

176
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , true ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , true ) ;
Distance : 6

177
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

178
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , false ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , false ) ;
Distance : 6

179
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ;
Distance : 6

180
Tree	Iterator entries = this . iter . iterator () . iterator () ;
Code	Iterator entries = this . iter . iterator () . iterator () ;
Distance : 7

181
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; k
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; k
Distance : 5

182
Tree	Iterator iter = res.entries . iterator () ; k
Code	Iterator iter = res.entries . iterator () ; k
Distance : 2

183
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Distance : 15

========================================================================


========================================================================
Example Number: 17
Parent Code is: 
if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
-------------------------------------------------------------------------------
Child code is: 
if ( divisor == NUMBER_CONSTANT ) { return isZero ? NaN : INF ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=divisor}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=NaN}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=divisor}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (16 (800{val=isZero}) (233{val=?}) (800{val=NaN}) (226{val=:}) (800{val=INF})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/47/parent/src_main_java_org_apache_commons_math_complex_Complex.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 140
Wrong
========================================================================
False

0
Tree	if ( isZero () ) { return NaN ; }
Code	if ( isZero () ) { return NaN ; }
Distance : 7

1
Tree	if ( isZero ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isZero ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

2
Tree	if ( computeWeightedJacobian () ) { return NaN ; }
Code	if ( computeWeightedJacobian () ) { return NaN ; }
Distance : 7

3
Tree	if ( this . isSame () ) { return NaN ; }
Code	if ( this . isSame () ) { return NaN ; }
Distance : 8

4
Tree	if ( ! copySign ( isZero ) ) { return NaN ; }
Code	if ( ! copySign ( isZero ) ) { return NaN ; }
Distance : 9

5
Tree	if ( this . hasNext () ) { return NaN ; }
Code	if ( this . hasNext () ) { return NaN ; }
Distance : 8

6
Tree	if ( isZero ( isZero , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isZero ( isZero , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

7
Tree	if ( isZero ( this , isZero ) ) { return NaN ; }
Code	if ( isZero ( this , isZero ) ) { return NaN ; }
Distance : 10

8
Tree	if ( ! ) {}
Code	if ( ! ) {}
Distance : 12

9
Tree	if ( isZero () == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( isZero () == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

10
Tree	if ( isZero ( Math.PI ) ) { return NaN ; }
Code	if ( isZero ( Math.PI ) ) { return NaN ; }
Distance : 8

11
Tree	if ( isZero . logDensity ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isZero . logDensity ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

12
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ; }
Distance : 5

13
Tree	if ( this . isZero . isOptimal () ) { return NaN ; }
Code	if ( this . isZero . isOptimal () ) { return NaN ; }
Distance : 10

14
Tree	if ( isZero . getVertices ( true ) ) { return NaN ; }
Code	if ( isZero . getVertices ( true ) ) { return NaN ; }
Distance : 10

15
Tree	if ( isZero . isSame ( true ) ) { return NaN ; }
Code	if ( isZero . isSame ( true ) ) { return NaN ; }
Distance : 10

16
Tree	if ( isZero . isAssignableFrom ( true ) ) { return NaN ; }
Code	if ( isZero . isAssignableFrom ( true ) ) { return NaN ; }
Distance : 10

17
Tree	if ( isZero . getVertices ( stat.aggregateStatistics ) ) { return NaN ; }
Code	if ( isZero . getVertices ( stat.aggregateStatistics ) ) { return NaN ; }
Distance : 10

18
Tree	if ( isDefaultValue () ) { return NaN ; }
Code	if ( isDefaultValue () ) { return NaN ; }
Distance : 7

19
Tree	if ( isIncludedColumn () ) { return NaN ; }
Code	if ( isIncludedColumn () ) { return NaN ; }
Distance : 7

20
Tree	if ( this . logDensity ( isZero ) ) { return NaN ; }
Code	if ( this . logDensity ( isZero ) ) { return NaN ; }
Distance : 10

21
Tree	if ( computeWeightedJacobian ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( computeWeightedJacobian ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

22
Tree	if ( isDefaultValue ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isDefaultValue ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

23
Tree	if ( new variablesToInclude.length ( NUMBER_CONSTANT ) . isSame ( isZero ) ) { return NaN ; }
Code	if ( new variablesToInclude.length ( NUMBER_CONSTANT ) . isSame ( isZero ) ) { return NaN ; }
Distance : 11

24
Tree	if ( this . isAssignableFrom ( isZero ) ) { return NaN ; }
Code	if ( this . isAssignableFrom ( isZero ) ) { return NaN ; }
Distance : 10

25
Tree	if ( this . hasNext ( isZero ) ) { return NaN ; }
Code	if ( this . hasNext ( isZero ) ) { return NaN ; }
Distance : 10

26
Tree	if ( new variablesToInclude.length ( NUMBER_CONSTANT ) . hashCode ( isZero ) ) { return NaN ; }
Code	if ( new variablesToInclude.length ( NUMBER_CONSTANT ) . hashCode ( isZero ) ) { return NaN ; }
Distance : 11

27
Tree	if ( this . isSame ( isZero ) ) { return NaN ; }
Code	if ( this . isSame ( isZero ) ) { return NaN ; }
Distance : 10

28
Tree	if ( NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 5

29
Tree	if ( isZero . logDensity ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isZero . logDensity ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 12

30
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

31
Tree	if ( ! isDefaultValue ( isZero ) ) { return NaN ; }
Code	if ( ! isDefaultValue ( isZero ) ) { return NaN ; }
Distance : 9

32
Tree	if ( this . isZero . isSame () ) { return NaN ; }
Code	if ( this . isZero . isSame () ) { return NaN ; }
Distance : 10

33
Tree	if ( isZero . logDensity () ) { return NaN ; }
Code	if ( isZero . logDensity () ) { return NaN ; }
Distance : 8

34
Tree	if ( this . isZero . getVertices () ) { return NaN ; }
Code	if ( this . isZero . getVertices () ) { return NaN ; }
Distance : 10

35
Tree	if ( isZero . isZero ( NaN ) ) { return NaN ; }
Code	if ( isZero . isZero ( NaN ) ) { return NaN ; }
Distance : 10

36
Tree	if ( isIncludedColumn ( Math.PI ) ) { return NaN ; }
Code	if ( isIncludedColumn ( Math.PI ) ) { return NaN ; }
Distance : 8

37
Tree	if ( isZero ) { return NaN ; }
Code	if ( isZero ) { return NaN ; }
Distance : 7

38
Tree	if ( isZero ( isIncludedColumn () ) ) { return NaN ; }
Code	if ( isZero ( isIncludedColumn () ) ) { return NaN ; }
Distance : 9

39
Tree	if ( isZero () . length ( Math.PI ) ) { return NaN ; }
Code	if ( isZero () . length ( Math.PI ) ) { return NaN ; }
Distance : 11

40
Tree	if ( isZero ( isZero ) ) { return NaN ; }
Code	if ( isZero ( isZero ) ) { return NaN ; }
Distance : 8

41
Tree	if ( isZero . == ( isZero ) ) { return NaN ; }
Code	if ( isZero . == ( isZero ) ) { return NaN ; }
Distance : 9

42
Tree	if ( isZero . compareTo ( isZero , NUMBER_CONSTANT , NaN ) ) { return NaN ; }
Code	if ( isZero . compareTo ( isZero , NUMBER_CONSTANT , NaN ) ) { return NaN ; }
Distance : 13

43
Tree	if ( isZero ) { return NaN ; }
Code	if ( isZero ) { return NaN ; }
Distance : 7

44
Tree	if ( isZero ( computeWeightedJacobian () ) ) { return NaN ; }
Code	if ( isZero ( computeWeightedJacobian () ) ) { return NaN ; }
Distance : 9

45
Tree	if ( isZero ( getSlope () ) ) { return NaN ; }
Code	if ( isZero ( getSlope () ) ) { return NaN ; }
Distance : 9

46
Tree	if ( isZero . isAssignableFrom ( stat.aggregateStatistics ) ) { return NaN ; }
Code	if ( isZero . isAssignableFrom ( stat.aggregateStatistics ) ) { return NaN ; }
Distance : 10

47
Tree	if ( computeWeightedJacobian () == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( computeWeightedJacobian () == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

48
Tree	if ( computeWeightedJacobian ( this , isZero ) ) { return NaN ; }
Code	if ( computeWeightedJacobian ( this , isZero ) ) { return NaN ; }
Distance : 10

49
Tree	if ( isIncludedColumn ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isIncludedColumn ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

50
Tree	if ( isZero . isAssignableFrom ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isZero . isAssignableFrom ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 12

51
Tree	if ( isZero ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isZero ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

52
Tree	if ( isZero . getVertices ( Coordinates1D.ZERO ) ) { return NaN ; }
Code	if ( isZero . getVertices ( Coordinates1D.ZERO ) ) { return NaN ; }
Distance : 10

53
Tree	if ( new variablesToInclude.length () . copy ( isZero ) ) { return NaN ; }
Code	if ( new variablesToInclude.length () . copy ( isZero ) ) { return NaN ; }
Distance : 11

54
Tree	if ( isIncludedColumn ( this , isZero ) ) { return NaN ; }
Code	if ( isIncludedColumn ( this , isZero ) ) { return NaN ; }
Distance : 10

55
Tree	if ( this . logDensity () ) { return NaN ; }
Code	if ( this . logDensity () ) { return NaN ; }
Distance : 8

56
Tree	if ( NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 5

57
Tree	if ( isDefaultValue () == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( isDefaultValue () == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

58
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

59
Tree	if ( computeWeightedJacobian ( Math.PI ) ) { return NaN ; }
Code	if ( computeWeightedJacobian ( Math.PI ) ) { return NaN ; }
Distance : 8

60
Tree	if ( computeWeightedJacobian ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( computeWeightedJacobian ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

61
Tree	if ( target.length . isSame ( isZero ) ) { return NaN ; }
Code	if ( target.length . isSame ( isZero ) ) { return NaN ; }
Distance : 10

62
Tree	if ( STRING_CONSTANT . isSequence ( isZero ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . isSequence ( isZero ) ) { return NaN ; }
Distance : 10

63
Tree	if ( interpolator.nordsieck . isSame ( isZero ) ) { return NaN ; }
Code	if ( interpolator.nordsieck . isSame ( isZero ) ) { return NaN ; }
Distance : 10

64
Tree	if ( isZero . getVertices ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isZero . getVertices ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

65
Tree	if ( isDefaultValue ( this , isZero ) ) { return NaN ; }
Code	if ( isDefaultValue ( this , isZero ) ) { return NaN ; }
Distance : 10

66
Tree	if ( isZero . isSame ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isZero . isSame ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

67
Tree	if ( isZero () ) { return this . NaN . NaN ; }
Code	if ( isZero () ) { return this . NaN . NaN ; }
Distance : 7

68
Tree	if ( ! createAlien ( isZero ) ) { return NaN ; }
Code	if ( ! createAlien ( isZero ) ) { return NaN ; }
Distance : 9

69
Tree	if ( isZero . getVertices ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isZero . getVertices ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 12

70
Tree	if ( isZero . isSame ( stat.aggregateStatistics ) ) { return NaN ; }
Code	if ( isZero . isSame ( stat.aggregateStatistics ) ) { return NaN ; }
Distance : 10

71
Tree	if ( StepNormalizerMode.MULTIPLES . isSame ( isZero ) ) { return NaN ; }
Code	if ( StepNormalizerMode.MULTIPLES . isSame ( isZero ) ) { return NaN ; }
Distance : 10

72
Tree	if ( new StreamDataAdapter () . copy ( isZero ) ) { return NaN ; }
Code	if ( new StreamDataAdapter () . copy ( isZero ) ) { return NaN ; }
Distance : 11

73
Tree	if ( computeWeightedJacobian ( computeWeightedJacobian () ) ) { return NaN ; }
Code	if ( computeWeightedJacobian ( computeWeightedJacobian () ) ) { return NaN ; }
Distance : 9

74
Tree	if ( this . isZero . valueOf () ) { return NaN ; }
Code	if ( this . isZero . valueOf () ) { return NaN ; }
Distance : 10

75
Tree	if ( isIncludedColumn ( isZero , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isIncludedColumn ( isZero , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

76
Tree	if ( isZero . isSame ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isZero . isSame ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 12

77
Tree	if ( isIncludedColumn () == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( isIncludedColumn () == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

78
Tree	if ( isDefaultValue ( isZero , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isDefaultValue ( isZero , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

79
Tree	if ( isDefaultValue ( Math.PI ) ) { return NaN ; }
Code	if ( isDefaultValue ( Math.PI ) ) { return NaN ; }
Distance : 8

80
Tree	if ( isZero . getVertices ( ! ) ) { return NaN ; }
Code	if ( isZero . getVertices ( ! ) ) { return NaN ; }
Distance : 10

81
Tree	if ( isZero . compareTo ( isZero ) ) { return NaN ; }
Code	if ( isZero . compareTo ( isZero ) ) { return NaN ; }
Distance : 10

82
Tree	if ( isZero . isAssignableFrom ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isZero . isAssignableFrom ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

83
Tree	if ( computeWeightedJacobian ( isZero , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( computeWeightedJacobian ( isZero , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

84
Tree	if ( STRING_CONSTANT . isAssignableFrom ( isZero ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . isAssignableFrom ( isZero ) ) { return NaN ; }
Distance : 10

85
Tree	if ( STRING_CONSTANT . costEvaluations ( isZero ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . costEvaluations ( isZero ) ) { return NaN ; }
Distance : 10

86
Tree	if ( new StreamDataAdapter ( NUMBER_CONSTANT ) . hashCode ( isZero ) ) { return NaN ; }
Code	if ( new StreamDataAdapter ( NUMBER_CONSTANT ) . hashCode ( isZero ) ) { return NaN ; }
Distance : 11

87
Tree	if ( NaN ) { return NaN ; }
Code	if ( NaN ) { return NaN ; }
Distance : 7

88
Tree	if ( computeWeightedJacobian () ) { return this . NaN . NaN ; }
Code	if ( computeWeightedJacobian () ) { return this . NaN . NaN ; }
Distance : 7

89
Tree	if ( isZero . getVertices ( getCoefficients () , v2.y ( NaN ) ) ) { return NaN ; }
Code	if ( isZero . getVertices ( getCoefficients () , v2.y ( NaN ) ) ) { return NaN ; }
Distance : 15

90
Tree	if ( isDefaultValue () ) { return this . NaN . NaN ; }
Code	if ( isDefaultValue () ) { return this . NaN . NaN ; }
Distance : 7

91
Tree	if ( isIncludedColumn () ) { return this . NaN . NaN ; }
Code	if ( isIncludedColumn () ) { return this . NaN . NaN ; }
Distance : 7

92
Tree	if ( new StreamDataAdapter ( NUMBER_CONSTANT ) . isSame ( isZero ) ) { return NaN ; }
Code	if ( new StreamDataAdapter ( NUMBER_CONSTANT ) . isSame ( isZero ) ) { return NaN ; }
Distance : 11

93
Tree	if ( isZero . getVertices ( getCoefficients () , emptyList ( NaN ) ) ) { return NaN ; }
Code	if ( isZero . getVertices ( getCoefficients () , emptyList ( NaN ) ) ) { return NaN ; }
Distance : 15

94
Tree	if ( new variablesToInclude.length ( isZero ) . getAttribute ( isZero ) ) { return NaN ; }
Code	if ( new variablesToInclude.length ( isZero ) . getAttribute ( isZero ) ) { return NaN ; }
Distance : 12

95
Tree	if ( isZero . isSame ( getCoefficients () , v2.y ( NaN ) ) ) { return NaN ; }
Code	if ( isZero . isSame ( getCoefficients () , v2.y ( NaN ) ) ) { return NaN ; }
Distance : 15

96
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ; }
Distance : 5

97
Tree	if ( isZero . isZero ( divisor ) ) { return NaN ; }
Code	if ( isZero . isZero ( divisor ) ) { return NaN ; }
Distance : 10

98
Tree	if ( isZero . getVertices ( isZero , NUMBER_CONSTANT , NaN ) ) { return NaN ; }
Code	if ( isZero . getVertices ( isZero , NUMBER_CONSTANT , NaN ) ) { return NaN ; }
Distance : 13

99
Tree	if ( isDefaultValue ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isDefaultValue ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

100
Tree	if ( isZero . isSame ( isZero , NUMBER_CONSTANT , NaN ) ) { return NaN ; }
Code	if ( isZero . isSame ( isZero , NUMBER_CONSTANT , NaN ) ) { return NaN ; }
Distance : 13

101
Tree	if ( isZero . isAssignableFrom () ) { return NaN ; }
Code	if ( isZero . isAssignableFrom () ) { return NaN ; }
Distance : 8

102
Tree	if ( isZero () . intValue ( Math.PI ) ) { return NaN ; }
Code	if ( isZero () . intValue ( Math.PI ) ) { return NaN ; }
Distance : 11

103
Tree	if ( new StreamDataAdapter ( isZero ) . hashCode ( isZero ) ) { return NaN ; }
Code	if ( new StreamDataAdapter ( isZero ) . hashCode ( isZero ) ) { return NaN ; }
Distance : 12

104
Tree	if ( computeWeightedJacobian () . length ( Math.PI ) ) { return NaN ; }
Code	if ( computeWeightedJacobian () . length ( Math.PI ) ) { return NaN ; }
Distance : 11

105
Tree	if ( new variablesToInclude.length ( isZero ) . hashCode ( isZero ) ) { return NaN ; }
Code	if ( new variablesToInclude.length ( isZero ) . hashCode ( isZero ) ) { return NaN ; }
Distance : 12

106
Tree	if ( isIncludedColumn ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isIncludedColumn ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

107
Tree	if ( isZero == NUMBER_CONSTANT ) { return isZero ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return isZero ; }
Distance : 5

108
Tree	if ( isZero . isAssignableFrom ( isZero , NUMBER_CONSTANT , NaN ) ) { return NaN ; }
Code	if ( isZero . isAssignableFrom ( isZero , NUMBER_CONSTANT , NaN ) ) { return NaN ; }
Distance : 13

109
Tree	if ( computeWeightedJacobian ( isZero ) ) { return NaN ; }
Code	if ( computeWeightedJacobian ( isZero ) ) { return NaN ; }
Distance : 8

110
Tree	if ( new StreamDataAdapter () . addMessage ( isZero ) ) { return NaN ; }
Code	if ( new StreamDataAdapter () . addMessage ( isZero ) ) { return NaN ; }
Distance : 11

111
Tree	if ( true ) {}
Code	if ( true ) {}
Distance : 12

112
Tree	if ( isIncludedColumn ( isZero ) ) { return NaN ; }
Code	if ( isIncludedColumn ( isZero ) ) { return NaN ; }
Distance : 8

113
Tree	if ( isZero . getVertices () ) { return NaN ; }
Code	if ( isZero . getVertices () ) { return NaN ; }
Distance : 8

114
Tree	if ( STRING_CONSTANT . isSame ( isZero ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . isSame ( isZero ) ) { return NaN ; }
Distance : 10

115
Tree	if ( ! ) !=
Code	if ( ! ) !=
Distance : 12

116
Tree	if ( isDefaultValue ( isZero ) ) { return NaN ; }
Code	if ( isDefaultValue ( isZero ) ) { return NaN ; }
Distance : 8

117
Tree	if ( isZero . isSame () ) { return NaN ; }
Code	if ( isZero . isSame () ) { return NaN ; }
Distance : 8

118
Tree	if ( new variablesToInclude.length () . addMessage ( isZero ) ) { return NaN ; }
Code	if ( new variablesToInclude.length () . addMessage ( isZero ) ) { return NaN ; }
Distance : 11

119
Tree	if ( ! isSequence ( isZero ) ) { return NaN ; }
Code	if ( ! isSequence ( isZero ) ) { return NaN ; }
Distance : 9

120
Tree	if ( ! ) :
Code	if ( ! ) :
Distance : 11

121
Tree	if ( isZero () . getOne ( Math.PI ) ) { return NaN ; }
Code	if ( isZero () . getOne ( Math.PI ) ) { return NaN ; }
Distance : 11

122
Tree	if ( this . isAssignableFrom () ) { return NaN ; }
Code	if ( this . isAssignableFrom () ) { return NaN ; }
Distance : 8

123
Tree	if ( isZero . isSame ( getCoefficients () , emptyList ( NaN ) ) ) { return NaN ; }
Code	if ( isZero . isSame ( getCoefficients () , emptyList ( NaN ) ) ) { return NaN ; }
Distance : 15

124
Tree	if ( divisor ) { return NaN ; }
Code	if ( divisor ) { return NaN ; }
Distance : 6

125
Tree	if ( isZero . getVertices ( isZero ) ) { return NaN ; }
Code	if ( isZero . getVertices ( isZero ) ) { return NaN ; }
Distance : 10

126
Tree	if ( isZero . isSame ( isZero ) ) { return NaN ; }
Code	if ( isZero . isSame ( isZero ) ) { return NaN ; }
Distance : 10

127
Tree	if ( isZero == NUMBER_CONSTANT ) { return isZero ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return isZero ; }
Distance : 5

128
Tree	if ( isZero . isAssignableFrom ( isZero ) ) { return NaN ; }
Code	if ( isZero . isAssignableFrom ( isZero ) ) { return NaN ; }
Distance : 10

129
Tree	if ( isZero . getVertices ( isZero , false ) ) { return NaN ; }
Code	if ( isZero . getVertices ( isZero , false ) ) { return NaN ; }
Distance : 12

130
Tree	if ( Math.PI . isSame ( isZero ) ) { return NaN ; }
Code	if ( Math.PI . isSame ( isZero ) ) { return NaN ; }
Distance : 10

131
Tree	if ( isZero . isAssignableFrom ( isZero , false ) ) { return NaN ; }
Code	if ( isZero . isAssignableFrom ( isZero , false ) ) { return NaN ; }
Distance : 12

132
Tree	if ( this . isZero . isSame ( isZero ) ) { return NaN ; }
Code	if ( this . isZero . isSame ( isZero ) ) { return NaN ; }
Distance : 11

133
Tree	if ( this . isZero . getVertices ( isZero ) ) { return NaN ; }
Code	if ( this . isZero . getVertices ( isZero ) ) { return NaN ; }
Distance : 11

134
Tree	if ( this . isZero . valueOf ( isZero ) ) { return NaN ; }
Code	if ( this . isZero . valueOf ( isZero ) ) { return NaN ; }
Distance : 11

135
Tree	if ( this . isZero . isOptimal ( isZero ) ) { return NaN ; }
Code	if ( this . isZero . isOptimal ( isZero ) ) { return NaN ; }
Distance : 11

136
Tree	if ( isZero . isSame ( isZero , false ) ) { return NaN ; }
Code	if ( isZero . isSame ( isZero , false ) ) { return NaN ; }
Distance : 12

137
Tree	if ( isZero . isZero ( isZero ) ) { return NaN ; }
Code	if ( isZero . isZero ( isZero ) ) { return NaN ; }
Distance : 10

138
Tree	if ( isZero . compareTo ( isZero , false ) ) { return NaN ; }
Code	if ( isZero . compareTo ( isZero , false ) ) { return NaN ; }
Distance : 12

139
Tree	if ( new StreamDataAdapter ( isZero ) . getAttribute ( isZero ) ) { return NaN ; }
Code	if ( new StreamDataAdapter ( isZero ) . getAttribute ( isZero ) ) { return NaN ; }
Distance : 12

========================================================================


========================================================================
Example Number: 18
Parent Code is: 
if ( divisor == NUMBER_CONSTANT ) { return isZero ? NaN : INF ; }
-------------------------------------------------------------------------------
Child code is: 
if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=divisor}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (16 (800{val=isZero}) (233{val=?}) (800{val=NaN}) (226{val=:}) (800{val=INF})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=divisor}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=NaN}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/46/parent/src_main_java_org_apache_commons_math_complex_Complex.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 56
Wrong
========================================================================
False

0
Tree	if ( isZero == NUMBER_CONSTANT ) { return null ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return null ; }
Distance : 2

1
Tree	if ( isZero == NUMBER_CONSTANT ) { return Double.NEGATIVE_INFINITY ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return Double.NEGATIVE_INFINITY ; }
Distance : 2

2
Tree	if ( isZero == NUMBER_CONSTANT ) { return Double.NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return Double.NaN ; }
Distance : 2

3
Tree	if ( isZero == NUMBER_CONSTANT ) { return Double.POSITIVE_INFINITY ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return Double.POSITIVE_INFINITY ; }
Distance : 2

4
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( getCoefficients () , beta.length , NaN ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( getCoefficients () , beta.length , NaN ) ; }
Distance : 11

5
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( getCoefficients () , Precision.EPSILON , NaN ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( getCoefficients () , Precision.EPSILON , NaN ) ; }
Distance : 11

6
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? emptyList () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? emptyList () : NaN ; }
Distance : 6

7
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( getCoefficients () , originalLine.tolerance , NaN ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( getCoefficients () , originalLine.tolerance , NaN ) ; }
Distance : 11

8
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN : INF ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN : INF ; }
Distance : 5

9
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN : NaN ; }
Distance : 5

10
Tree	if ( isZero == NUMBER_CONSTANT ) { return isZero ? NaN : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return isZero ? NaN : NaN ; }
Distance : 5

11
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( Math.PI , target.length ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( Math.PI , target.length ) ; }
Distance : 8

12
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( Math.PI , data.length ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( Math.PI , data.length ) ; }
Distance : 8

13
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( LocalizedFormats.URL_CONTAINS_NO_DATA , target.length ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( LocalizedFormats.URL_CONTAINS_NO_DATA , target.length ) ; }
Distance : 8

14
Tree	if ( divisor == NUMBER_CONSTANT ) { return null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return null ; }
Distance : 1

15
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( NaN . real2Complex () , Precision.EPSILON , NaN ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( NaN . real2Complex () , Precision.EPSILON , NaN ) ; }
Distance : 13

16
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( LocalizedFormats.URL_CONTAINS_NO_DATA , data.length ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( LocalizedFormats.URL_CONTAINS_NO_DATA , data.length ) ; }
Distance : 8

17
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? this . copySign () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? this . copySign () : NaN ; }
Distance : 8

18
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? Precision.EPSILON : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? Precision.EPSILON : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Distance : 5

19
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? Precision.EPSILON : LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? Precision.EPSILON : LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ; }
Distance : 5

20
Tree	if ( NaN == NUMBER_CONSTANT ) { return null ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return null ; }
Distance : 2

21
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN . hashCode () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN . hashCode () : NaN ; }
Distance : 8

22
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN : isZero ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN : isZero ; }
Distance : 5

23
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( NaN . isSame () , Precision.EPSILON , NaN ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( NaN . isSame () , Precision.EPSILON , NaN ) ; }
Distance : 13

24
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? copySign () : INF ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? copySign () : INF ; }
Distance : 6

25
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( NaN . real2Complex () , originalLine.tolerance , NaN ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( NaN . real2Complex () , originalLine.tolerance , NaN ) ; }
Distance : 13

26
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( this . isSame () , Precision.EPSILON , isZero ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( this . isSame () , Precision.EPSILON , isZero ) ; }
Distance : 13

27
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN . hashCode () : INF ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN . hashCode () : INF ; }
Distance : 8

28
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? this . IEEEremainder () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? this . IEEEremainder () : NaN ; }
Distance : 8

29
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN . copySign () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN . copySign () : NaN ; }
Distance : 8

30
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( this . isSame () , Precision.EPSILON , NaN ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( this . isSame () , Precision.EPSILON , NaN ) ; }
Distance : 13

31
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN . getDefaultNumberFormat () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN . getDefaultNumberFormat () : NaN ; }
Distance : 8

32
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( NaN . valueOf () , Precision.EPSILON , NaN ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( NaN . valueOf () , Precision.EPSILON , NaN ) ; }
Distance : 13

33
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 5

34
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? startPoint.length . hashCode () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? startPoint.length . hashCode () : NaN ; }
Distance : 8

35
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? ExpansionMode.MULTIPLICATIVE . hashCode () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? ExpansionMode.MULTIPLICATIVE . hashCode () : NaN ; }
Distance : 8

36
Tree	if ( isZero == NUMBER_CONSTANT ) { return distance ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return distance ; }
Distance : 2

37
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? Precision.EPSILON : Math.PI ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? Precision.EPSILON : Math.PI ; }
Distance : 5

38
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? Precision.EPSILON : startPoint.length ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? Precision.EPSILON : startPoint.length ; }
Distance : 5

39
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? this . hashCode () : INF ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? this . hashCode () : INF ; }
Distance : 8

40
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( this . isSame () , originalLine.tolerance , NaN ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( this . isSame () , originalLine.tolerance , NaN ) ; }
Distance : 13

41
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( this . real2Complex () , Precision.EPSILON , NaN ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( this . real2Complex () , Precision.EPSILON , NaN ) ; }
Distance : 13

42
Tree	if ( isZero == NUMBER_CONSTANT ) { return isZero ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return isZero ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 6

43
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode () ? Precision.EPSILON : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode () ? Precision.EPSILON : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Distance : 8

44
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? Precision.EPSILON . hashCode () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? Precision.EPSILON . hashCode () : NaN ; }
Distance : 8

45
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? copySign () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? copySign () : NaN ; }
Distance : 6

46
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode () ? Precision.EPSILON : LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode () ? Precision.EPSILON : LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ; }
Distance : 8

47
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode () ? Precision.EPSILON : startPoint.length ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode () ? Precision.EPSILON : startPoint.length ; }
Distance : 8

48
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? moment.m3 . hashCode () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? moment.m3 . hashCode () : NaN ; }
Distance : 8

49
Tree	if ( isZero == NUMBER_CONSTANT ) { return continue; ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return continue; ; }
Distance : 2

50
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 4

51
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? ( () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? ( () : NaN ; }
Distance : 6

52
Tree	if ( NaN == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 5

53
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode () ? moment.m2 : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode () ? moment.m2 : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Distance : 8

54
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? this . hashCode () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? this . hashCode () : NaN ; }
Distance : 8

55
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( getCoefficients () , LocalizedFormats.UNPARSEABLE_REAL_VECTOR , NaN ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( getCoefficients () , LocalizedFormats.UNPARSEABLE_REAL_VECTOR , NaN ) ; }
Distance : 11

========================================================================


========================================================================
Example Number: 19
Parent Code is: 
if ( divisor.isZero ) { return isZero ? NaN : INF ; }
-------------------------------------------------------------------------------
Child code is: 
if ( divisor.isZero ) { return NaN ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (40{val=divisor.isZero}) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (16 (800{val=isZero}) (233{val=?}) (800{val=NaN}) (226{val=:}) (800{val=INF})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (40{val=divisor.isZero}) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=NaN}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/46/parent/src_main_java_org_apache_commons_math_complex_Complex.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 188
Wrong
========================================================================
False

0
Tree	if ( this . isAssignableFrom () ) { return true ; }
Code	if ( this . isAssignableFrom () ) { return true ; }
Distance : 5

1
Tree	if ( this . isSequence () ) { return true ; }
Code	if ( this . isSequence () ) { return true ; }
Distance : 5

2
Tree	if ( this . isOptimal () ) { return true ; }
Code	if ( this . isOptimal () ) { return true ; }
Distance : 5

3
Tree	if ( this . compareTo () ) { return true ; }
Code	if ( this . compareTo () ) { return true ; }
Distance : 5

4
Tree	if ( divisor.isZero . hasNext ( isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . hasNext ( isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 6

5
Tree	if ( divisor.isZero . hasNext ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . hasNext ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

6
Tree	if ( divisor.isZero . isPowerOfTwo ( isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isPowerOfTwo ( isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 6

7
Tree	if ( divisor.isZero . isPowerOfTwo ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isPowerOfTwo ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

8
Tree	if ( divisor.isZero . isAssignableFrom ( isZero ) ) { return divisor.isZero ; }
Code	if ( divisor.isZero . isAssignableFrom ( isZero ) ) { return divisor.isZero ; }
Distance : 6

9
Tree	if ( divisor.isZero . isOptimal ( isZero ) ) { return isZero ; }
Code	if ( divisor.isZero . isOptimal ( isZero ) ) { return isZero ; }
Distance : 6

10
Tree	if ( this . isSequence () ) { return NUMBER_CONSTANT ; }
Code	if ( this . isSequence () ) { return NUMBER_CONSTANT ; }
Distance : 5

11
Tree	if ( isZero . getVertices ( STRING_CONSTANT ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isZero . getVertices ( STRING_CONSTANT ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 10

12
Tree	if ( isZero . isPowerOfTwo ( ! ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isZero . isPowerOfTwo ( ! ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 10

13
Tree	if ( this . isOptimal () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . isOptimal () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

14
Tree	if ( this . compareTo () ) { return NUMBER_CONSTANT ; }
Code	if ( this . compareTo () ) { return NUMBER_CONSTANT ; }
Distance : 5

15
Tree	if ( this . isOptimal () ) { return NUMBER_CONSTANT ; }
Code	if ( this . isOptimal () ) { return NUMBER_CONSTANT ; }
Distance : 5

16
Tree	if ( isZero . isAssignableFrom ( ! ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . isAssignableFrom ( ! ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

17
Tree	if ( isZero . compareTo ( STRING_CONSTANT ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . compareTo ( STRING_CONSTANT ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

18
Tree	if ( isZero . getVertices ( STRING_CONSTANT ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . getVertices ( STRING_CONSTANT ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

19
Tree	if ( STRING_CONSTANT . isSequence ( isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . isSequence ( isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 7

20
Tree	if ( isZero . isPowerOfTwo ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . isPowerOfTwo ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

21
Tree	if ( isZero . compareTo ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . compareTo ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

22
Tree	if ( divisor.isZero . hasNext ( isZero ) ) { return null ; }
Code	if ( divisor.isZero . hasNext ( isZero ) ) { return null ; }
Distance : 6

23
Tree	if ( isZero . getVertices ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . getVertices ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

24
Tree	if ( divisor.isZero . isPowerOfTwo ( divisor.isZero ) ) { return null ; }
Code	if ( divisor.isZero . isPowerOfTwo ( divisor.isZero ) ) { return null ; }
Distance : 6

25
Tree	if ( divisor.isZero . isOptimal ( divisor.isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isOptimal ( divisor.isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 6

26
Tree	if ( divisor.isZero . hasNext ( divisor.isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . hasNext ( divisor.isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 6

27
Tree	if ( computeWeightedJacobian ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( computeWeightedJacobian ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 7

28
Tree	if ( isValidPivotColumn ( divisor.isZero ) ) { return true ; }
Code	if ( isValidPivotColumn ( divisor.isZero ) ) { return true ; }
Distance : 4

29
Tree	if ( this . isAssignableFrom () ) { return null ; }
Code	if ( this . isAssignableFrom () ) { return null ; }
Distance : 5

30
Tree	if ( divisor.isZero . isPowerOfTwo ( divisor.isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isPowerOfTwo ( divisor.isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 6

31
Tree	if ( this . isSequence () ) { return null ; }
Code	if ( this . isSequence () ) { return null ; }
Distance : 5

32
Tree	if ( this . compareTo () ) { return null ; }
Code	if ( this . compareTo () ) { return null ; }
Distance : 5

33
Tree	if ( STRING_CONSTANT . isAssignableFrom ( isZero ) ) { return true ; }
Code	if ( STRING_CONSTANT . isAssignableFrom ( isZero ) ) { return true ; }
Distance : 7

34
Tree	if ( this . isSequence () ) { return isZero ; }
Code	if ( this . isSequence () ) { return isZero ; }
Distance : 5

35
Tree	if ( this . compareTo () ) { return isZero ; }
Code	if ( this . compareTo () ) { return isZero ; }
Distance : 5

36
Tree	if ( isZero . isAssignableFrom ( byte ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . isAssignableFrom ( byte ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

37
Tree	if ( this . isOptimal () ) { return null ; }
Code	if ( this . isOptimal () ) { return null ; }
Distance : 5

38
Tree	if ( STRING_CONSTANT . isNonSingular ( isZero ) ) { return null ; }
Code	if ( STRING_CONSTANT . isNonSingular ( isZero ) ) { return null ; }
Distance : 7

39
Tree	if ( STRING_CONSTANT . isPowerOfTwo ( isZero ) ) { return null ; }
Code	if ( STRING_CONSTANT . isPowerOfTwo ( isZero ) ) { return null ; }
Distance : 7

40
Tree	if ( isZero . isPowerOfTwo ( STRING_CONSTANT ) ) { return true ; }
Code	if ( isZero . isPowerOfTwo ( STRING_CONSTANT ) ) { return true ; }
Distance : 7

41
Tree	if ( isZero . compareTo ( ! ) ) { return null ; }
Code	if ( isZero . compareTo ( ! ) ) { return null ; }
Distance : 7

42
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; }
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; }
Distance : 4

43
Tree	if ( divisor.isZero ) { return NaN ? NaN : NaN ; }
Code	if ( divisor.isZero ) { return NaN ? NaN : NaN ; }
Distance : 4

44
Tree	if ( divisor.isZero ) { return NaN ? NaN : isZero ; }
Code	if ( divisor.isZero ) { return NaN ? NaN : isZero ; }
Distance : 4

45
Tree	if ( divisor.isZero ) { return isZero ? NaN : NaN ; }
Code	if ( divisor.isZero ) { return isZero ? NaN : NaN ; }
Distance : 4

46
Tree	if ( isZero . compareTo ( STRING_CONSTANT ) ) { return true ; }
Code	if ( isZero . compareTo ( STRING_CONSTANT ) ) { return true ; }
Distance : 7

47
Tree	if ( isZero . isAssignableFrom ( STRING_CONSTANT ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . isAssignableFrom ( STRING_CONSTANT ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

48
Tree	if ( divisor.isZero . isAssignableFrom ( divisor.isZero ) ) { return null ; }
Code	if ( divisor.isZero . isAssignableFrom ( divisor.isZero ) ) { return null ; }
Distance : 6

49
Tree	if ( divisor.isZero . isOptimal ( divisor.isZero ) ) { return null ; }
Code	if ( divisor.isZero . isOptimal ( divisor.isZero ) ) { return null ; }
Distance : 6

50
Tree	if ( divisor.isZero . hasNext ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor.isZero . hasNext ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

51
Tree	if ( divisor.isZero . isPowerOfTwo ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor.isZero . isPowerOfTwo ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

52
Tree	if ( STRING_CONSTANT . isAssignableFrom ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . isAssignableFrom ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

53
Tree	if ( STRING_CONSTANT . isNonSingular ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( STRING_CONSTANT . isNonSingular ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 10

54
Tree	if ( STRING_CONSTANT . isPowerOfTwo ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( STRING_CONSTANT . isPowerOfTwo ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 10

55
Tree	if ( divisor.isZero . isAssignableFrom ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isAssignableFrom ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

56
Tree	if ( STRING_CONSTANT . isAssignableFrom ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( STRING_CONSTANT . isAssignableFrom ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 10

57
Tree	if ( divisor.isZero . isOptimal ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isOptimal ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

58
Tree	if ( divisor.isZero . isPowerOfTwo ( isZero ) ) { return isZero ; }
Code	if ( divisor.isZero . isPowerOfTwo ( isZero ) ) { return isZero ; }
Distance : 6

59
Tree	if ( STRING_CONSTANT . isNonSingular ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( STRING_CONSTANT . isNonSingular ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 10

60
Tree	if ( isZero . isAssignableFrom ( divisor.isZero ) ) { return true ; }
Code	if ( isZero . isAssignableFrom ( divisor.isZero ) ) { return true ; }
Distance : 6

61
Tree	if ( isZero . isAssignableFrom ( ! ) ) { return isZero ; }
Code	if ( isZero . isAssignableFrom ( ! ) ) { return isZero ; }
Distance : 7

62
Tree	if ( divisor.isZero . hasNext ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . hasNext ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

63
Tree	if ( divisor.isZero . isPowerOfTwo ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isPowerOfTwo ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

64
Tree	if ( STRING_CONSTANT . isPowerOfTwo ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( STRING_CONSTANT . isPowerOfTwo ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 10

65
Tree	if ( STRING_CONSTANT . isAssignableFrom ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( STRING_CONSTANT . isAssignableFrom ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 10

66
Tree	if ( isZero . isPowerOfTwo ( divisor.isZero ) ) { return true ; }
Code	if ( isZero . isPowerOfTwo ( divisor.isZero ) ) { return true ; }
Distance : 6

67
Tree	if ( isZero . isPowerOfTwo ( ! ) ) { return isZero ; }
Code	if ( isZero . isPowerOfTwo ( ! ) ) { return isZero ; }
Distance : 7

68
Tree	if ( isZero . isAssignableFrom ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isZero . isAssignableFrom ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 9

69
Tree	if ( new StreamDataAdapter () . getOne () ) { return true ; }
Code	if ( new StreamDataAdapter () . getOne () ) { return true ; }
Distance : 7

70
Tree	if ( isZero . isPowerOfTwo ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isZero . isPowerOfTwo ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 9

71
Tree	if ( this . isOptimal () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . isOptimal () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 8

72
Tree	if ( this . isZero . isOptimal () ) { return true ; }
Code	if ( this . isZero . isOptimal () ) { return true ; }
Distance : 7

73
Tree	if ( divisor.isZero . isAssignableFrom ( isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isAssignableFrom ( isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 6

74
Tree	if ( this . isZero . isAssignableFrom () ) { return null ; }
Code	if ( this . isZero . isAssignableFrom () ) { return null ; }
Distance : 7

75
Tree	if ( this . isZero . isPowerOfTwo () ) { return null ; }
Code	if ( this . isZero . isPowerOfTwo () ) { return null ; }
Distance : 7

76
Tree	if ( this . isAssignableFrom () ) { return NaN ? NaN . hashCode () : NaN ; }
Code	if ( this . isAssignableFrom () ) { return NaN ? NaN . hashCode () : NaN ; }
Distance : 11

77
Tree	if ( divisor.isZero . isAssignableFrom ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isAssignableFrom ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

78
Tree	if ( isZero . compareTo ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isZero . compareTo ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 9

79
Tree	if ( divisor.isZero . isAssignableFrom ( isZero ) ) { return true ; }
Code	if ( divisor.isZero . isAssignableFrom ( isZero ) ) { return true ; }
Distance : 6

80
Tree	if ( new StreamDataAdapter () . getZero () ) { return true ; }
Code	if ( new StreamDataAdapter () . getZero () ) { return true ; }
Distance : 7

81
Tree	if ( divisor.isZero . isAssignableFrom ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( divisor.isZero . isAssignableFrom ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 9

82
Tree	if ( this . isZero . isAssignableFrom () ) { return true ; }
Code	if ( this . isZero . isAssignableFrom () ) { return true ; }
Distance : 7

83
Tree	if ( new variablesToInclude.length () . kolmogorovSmirnovTest () ) { return true ; }
Code	if ( new variablesToInclude.length () . kolmogorovSmirnovTest () ) { return true ; }
Distance : 7

84
Tree	if ( STRING_CONSTANT . isNonSingular ( isZero ) ) { return true ; }
Code	if ( STRING_CONSTANT . isNonSingular ( isZero ) ) { return true ; }
Distance : 7

85
Tree	if ( divisor.isZero . isOptimal ( isZero ) ) { return true ; }
Code	if ( divisor.isZero . isOptimal ( isZero ) ) { return true ; }
Distance : 6

86
Tree	if ( STRING_CONSTANT . isSequence ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . isSequence ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

87
Tree	if ( STRING_CONSTANT . isPowerOfTwo ( isZero ) ) { return true ; }
Code	if ( STRING_CONSTANT . isPowerOfTwo ( isZero ) ) { return true ; }
Distance : 7

88
Tree	if ( this . compareTo () ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( this . compareTo () ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 8

89
Tree	if ( this . isOptimal () ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( this . isOptimal () ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 8

90
Tree	if ( isZero . isAssignableFrom ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . isAssignableFrom ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

91
Tree	if ( STRING_CONSTANT . isSequence ( isZero ) ) { return isZero ; }
Code	if ( STRING_CONSTANT . isSequence ( isZero ) ) { return isZero ; }
Distance : 7

92
Tree	if ( divisor.isZero . isOptimal ( isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isOptimal ( isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 6

93
Tree	if ( isZero . isPowerOfTwo ( ! ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . isPowerOfTwo ( ! ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

94
Tree	if ( divisor.isZero . hasNext ( divisor.isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor.isZero . hasNext ( divisor.isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

95
Tree	if ( divisor.isZero . isPowerOfTwo ( divisor.isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor.isZero . isPowerOfTwo ( divisor.isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

96
Tree	if ( this . isAssignableFrom () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . isAssignableFrom () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

97
Tree	if ( this . isAssignableFrom () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . isAssignableFrom () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 8

98
Tree	if ( this . isAssignableFrom () ) { return NUMBER_CONSTANT ; }
Code	if ( this . isAssignableFrom () ) { return NUMBER_CONSTANT ; }
Distance : 5

99
Tree	if ( this . isSequence () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . isSequence () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 8

100
Tree	if ( this . isSequence () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . isSequence () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

101
Tree	if ( this . compareTo () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . compareTo () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 8

102
Tree	if ( this . compareTo () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . compareTo () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

103
Tree	if ( new StreamDataAdapter () . kolmogorovSmirnovTest () ) { return true ; }
Code	if ( new StreamDataAdapter () . kolmogorovSmirnovTest () ) { return true ; }
Distance : 7

104
Tree	if ( divisor.isZero . isAssignableFrom ( isZero ) ) { return null ; }
Code	if ( divisor.isZero . isAssignableFrom ( isZero ) ) { return null ; }
Distance : 6

105
Tree	if ( divisor.isZero . isOptimal ( isZero ) ) { return null ; }
Code	if ( divisor.isZero . isOptimal ( isZero ) ) { return null ; }
Distance : 6

106
Tree	if ( divisor.isZero . isPowerOfTwo ( isZero ) ) { return null ; }
Code	if ( divisor.isZero . isPowerOfTwo ( isZero ) ) { return null ; }
Distance : 6

107
Tree	if ( divisor.isZero . hasNext ( isZero ) ) { return true ; }
Code	if ( divisor.isZero . hasNext ( isZero ) ) { return true ; }
Distance : 6

108
Tree	if ( divisor.isZero . isOptimal ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isOptimal ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

109
Tree	if ( STRING_CONSTANT . isNonSingular ( isZero ) ) { return isZero ; }
Code	if ( STRING_CONSTANT . isNonSingular ( isZero ) ) { return isZero ; }
Distance : 7

110
Tree	if ( computeWeightedJacobian ( divisor.isZero ) ) { return true ; }
Code	if ( computeWeightedJacobian ( divisor.isZero ) ) { return true ; }
Distance : 4

111
Tree	if ( divisor.isZero . isPowerOfTwo ( isZero ) ) { return true ; }
Code	if ( divisor.isZero . isPowerOfTwo ( isZero ) ) { return true ; }
Distance : 6

112
Tree	if ( STRING_CONSTANT . isPowerOfTwo ( isZero ) ) { return isZero ; }
Code	if ( STRING_CONSTANT . isPowerOfTwo ( isZero ) ) { return isZero ; }
Distance : 7

113
Tree	if ( isZero ( divisor.isZero ) ) { return true ; }
Code	if ( isZero ( divisor.isZero ) ) { return true ; }
Distance : 4

114
Tree	if ( isDefaultValue ( divisor.isZero ) ) { return true ; }
Code	if ( isDefaultValue ( divisor.isZero ) ) { return true ; }
Distance : 4

115
Tree	if ( this . isAssignableFrom () ) { return isZero ; }
Code	if ( this . isAssignableFrom () ) { return isZero ; }
Distance : 5

116
Tree	if ( isZero ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 7

117
Tree	if ( this . isOptimal () ) { return isZero ; }
Code	if ( this . isOptimal () ) { return isZero ; }
Distance : 5

118
Tree	if ( isDefaultValue ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isDefaultValue ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 7

119
Tree	if ( computeWeightedJacobian ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( computeWeightedJacobian ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 7

120
Tree	if ( STRING_CONSTANT . isSequence ( isZero ) ) { return true ; }
Code	if ( STRING_CONSTANT . isSequence ( isZero ) ) { return true ; }
Distance : 7

121
Tree	if ( isZero ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isZero ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 7

122
Tree	if ( isDefaultValue ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isDefaultValue ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 7

123
Tree	if ( isZero . getVertices ( STRING_CONSTANT ) ) { return true ; }
Code	if ( isZero . getVertices ( STRING_CONSTANT ) ) { return true ; }
Distance : 7

124
Tree	if ( STRING_CONSTANT . isSequence ( isZero ) ) { return null ; }
Code	if ( STRING_CONSTANT . isSequence ( isZero ) ) { return null ; }
Distance : 7

125
Tree	if ( isIncludedColumn ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isIncludedColumn ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 7

126
Tree	if ( divisor.isZero . isAssignableFrom ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor.isZero . isAssignableFrom ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

127
Tree	if ( this . isZero . getVertices () ) { return null ; }
Code	if ( this . isZero . getVertices () ) { return null ; }
Distance : 7

128
Tree	if ( divisor.isZero . isOptimal ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor.isZero . isOptimal ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

129
Tree	if ( divisor.isZero . isAssignableFrom ( divisor.isZero ) ) { return true ; }
Code	if ( divisor.isZero . isAssignableFrom ( divisor.isZero ) ) { return true ; }
Distance : 6

130
Tree	if ( this . isZero . getVertices () ) { return true ; }
Code	if ( this . isZero . getVertices () ) { return true ; }
Distance : 7

131
Tree	if ( isZero . isAssignableFrom ( STRING_CONSTANT ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isZero . isAssignableFrom ( STRING_CONSTANT ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 10

132
Tree	if ( this . isZero . isOptimal () ) { return null ; }
Code	if ( this . isZero . isOptimal () ) { return null ; }
Distance : 7

133
Tree	if ( isZero . isPowerOfTwo ( STRING_CONSTANT ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isZero . isPowerOfTwo ( STRING_CONSTANT ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 10

134
Tree	if ( isValidPivotColumn ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isValidPivotColumn ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 7

135
Tree	if ( isZero . isAssignableFrom ( ! ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isZero . isAssignableFrom ( ! ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 10

136
Tree	if ( isZero . isPowerOfTwo ( STRING_CONSTANT ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . isPowerOfTwo ( STRING_CONSTANT ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

137
Tree	if ( isZero . compareTo ( divisor.isZero ) ) { return true ; }
Code	if ( isZero . compareTo ( divisor.isZero ) ) { return true ; }
Distance : 6

138
Tree	if ( isZero . isAssignableFrom ( byte ) ) { return isZero ; }
Code	if ( isZero . isAssignableFrom ( byte ) ) { return isZero ; }
Distance : 7

139
Tree	if ( isZero . isAssignableFrom ( ! ) ) { return true ; }
Code	if ( isZero . isAssignableFrom ( ! ) ) { return true ; }
Distance : 7

140
Tree	if ( isZero . getVertices ( divisor.isZero ) ) { return true ; }
Code	if ( isZero . getVertices ( divisor.isZero ) ) { return true ; }
Distance : 6

141
Tree	if ( divisor.isZero . isOptimal ( divisor.isZero ) ) { return true ; }
Code	if ( divisor.isZero . isOptimal ( divisor.isZero ) ) { return true ; }
Distance : 6

142
Tree	if ( isZero . isAssignableFrom ( STRING_CONSTANT ) ) { return true ; }
Code	if ( isZero . isAssignableFrom ( STRING_CONSTANT ) ) { return true ; }
Distance : 7

143
Tree	if ( isZero . compareTo ( STRING_CONSTANT ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isZero . compareTo ( STRING_CONSTANT ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 10

144
Tree	if ( isZero . compareTo ( ! ) ) { return isZero ; }
Code	if ( isZero . compareTo ( ! ) ) { return isZero ; }
Distance : 7

145
Tree	if ( isZero . compareTo ( ! ) ) { return true ; }
Code	if ( isZero . compareTo ( ! ) ) { return true ; }
Distance : 7

146
Tree	if ( isZero . compareTo ( ! ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . compareTo ( ! ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

147
Tree	if ( isZero . isPowerOfTwo ( ! ) ) { return null ; }
Code	if ( isZero . isPowerOfTwo ( ! ) ) { return null ; }
Distance : 7

148
Tree	if ( STRING_CONSTANT . isAssignableFrom ( isZero ) ) { return null ; }
Code	if ( STRING_CONSTANT . isAssignableFrom ( isZero ) ) { return null ; }
Distance : 7

149
Tree	if ( STRING_CONSTANT . isSequence ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( STRING_CONSTANT . isSequence ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 10

150
Tree	if ( this . isSequence () ) { return NaN ? NaN . hashCode () : NaN ; }
Code	if ( this . isSequence () ) { return NaN ? NaN . hashCode () : NaN ; }
Distance : 11

151
Tree	if ( isZero . isAssignableFrom ( byte ) ) { return null ; }
Code	if ( isZero . isAssignableFrom ( byte ) ) { return null ; }
Distance : 7

152
Tree	if ( this . compareTo () ) { return NaN ? NaN . hashCode () : NaN ; }
Code	if ( this . compareTo () ) { return NaN ? NaN . hashCode () : NaN ; }
Distance : 11

153
Tree	if ( divisor.isZero . isAssignableFrom ( divisor.isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor.isZero . isAssignableFrom ( divisor.isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

154
Tree	if ( STRING_CONSTANT . isAssignableFrom ( isZero ) ) { return isZero ; }
Code	if ( STRING_CONSTANT . isAssignableFrom ( isZero ) ) { return isZero ; }
Distance : 7

155
Tree	if ( STRING_CONSTANT . isNonSingular ( isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . isNonSingular ( isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 7

156
Tree	if ( divisor.isZero . isOptimal ( divisor.isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor.isZero . isOptimal ( divisor.isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

157
Tree	if ( isZero . isAssignableFrom ( byte ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isZero . isAssignableFrom ( byte ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 10

158
Tree	if ( STRING_CONSTANT . isSequence ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( STRING_CONSTANT . isSequence ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 10

159
Tree	if ( this . isAssignableFrom () ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( this . isAssignableFrom () ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 8

160
Tree	if ( this . isOptimal () ) { return NaN ? NaN . hashCode () : NaN ; }
Code	if ( this . isOptimal () ) { return NaN ? NaN . hashCode () : NaN ; }
Distance : 11

161
Tree	if ( isZero . compareTo ( ! ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isZero . compareTo ( ! ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 10

162
Tree	if ( this . isSequence () ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( this . isSequence () ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 8

163
Tree	if ( divisor.isZero . hasNext ( isZero ) ) { return isZero ; }
Code	if ( divisor.isZero . hasNext ( isZero ) ) { return isZero ; }
Distance : 6

164
Tree	if ( isZero . isAssignableFrom ( ! ) ) { return null ; }
Code	if ( isZero . isAssignableFrom ( ! ) ) { return null ; }
Distance : 7

165
Tree	if ( isZero . isPowerOfTwo ( ! ) ) { return true ; }
Code	if ( isZero . isPowerOfTwo ( ! ) ) { return true ; }
Distance : 7

166
Tree	if ( divisor.isZero . hasNext ( divisor.isZero ) ) { return true ; }
Code	if ( divisor.isZero . hasNext ( divisor.isZero ) ) { return true ; }
Distance : 6

167
Tree	if ( this . isZero . isPowerOfTwo () ) { return true ; }
Code	if ( this . isZero . isPowerOfTwo () ) { return true ; }
Distance : 7

168
Tree	if ( isZero . isAssignableFrom ( byte ) ) { return true ; }
Code	if ( isZero . isAssignableFrom ( byte ) ) { return true ; }
Distance : 7

169
Tree	if ( divisor.isZero . isPowerOfTwo ( divisor.isZero ) ) { return true ; }
Code	if ( divisor.isZero . isPowerOfTwo ( divisor.isZero ) ) { return true ; }
Distance : 6

170
Tree	if ( divisor.isZero . hasNext ( divisor.isZero ) ) { return null ; }
Code	if ( divisor.isZero . hasNext ( divisor.isZero ) ) { return null ; }
Distance : 6

171
Tree	if ( divisor.isZero . isAssignableFrom ( divisor.isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isAssignableFrom ( divisor.isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 6

172
Tree	if ( STRING_CONSTANT . isPowerOfTwo ( isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . isPowerOfTwo ( isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 7

173
Tree	if ( STRING_CONSTANT . isNonSingular ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . isNonSingular ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

174
Tree	if ( divisor.isZero . isAssignableFrom ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( divisor.isZero . isAssignableFrom ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 9

175
Tree	if ( STRING_CONSTANT . isPowerOfTwo ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . isPowerOfTwo ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

176
Tree	if ( divisor.isZero . isOptimal ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( divisor.isZero . isOptimal ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 9

177
Tree	if ( divisor.isZero . hasNext ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( divisor.isZero . hasNext ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 9

178
Tree	if ( STRING_CONSTANT . isAssignableFrom ( isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . isAssignableFrom ( isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 7

179
Tree	if ( divisor.isZero . isPowerOfTwo ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( divisor.isZero . isPowerOfTwo ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 9

180
Tree	if ( divisor.isZero . isAssignableFrom ( divisor.isZero ) ) { return divisor.isZero ; }
Code	if ( divisor.isZero . isAssignableFrom ( divisor.isZero ) ) { return divisor.isZero ; }
Distance : 6

181
Tree	if ( divisor.isZero . isOptimal ( divisor.isZero ) ) { return isZero ; }
Code	if ( divisor.isZero . isOptimal ( divisor.isZero ) ) { return isZero ; }
Distance : 6

182
Tree	if ( divisor.isZero . hasNext ( divisor.isZero ) ) { return isZero ; }
Code	if ( divisor.isZero . hasNext ( divisor.isZero ) ) { return isZero ; }
Distance : 6

183
Tree	if ( divisor.isZero . isPowerOfTwo ( divisor.isZero ) ) { return divisor.isZero ; }
Code	if ( divisor.isZero . isPowerOfTwo ( divisor.isZero ) ) { return divisor.isZero ; }
Distance : 6

184
Tree	if ( divisor.isZero . isOptimal ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( divisor.isZero . isOptimal ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 9

185
Tree	if ( isZero . getVertices ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isZero . getVertices ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 9

186
Tree	if ( divisor.isZero . hasNext ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( divisor.isZero . hasNext ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 9

187
Tree	if ( divisor.isZero . isPowerOfTwo ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( divisor.isZero . isPowerOfTwo ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 9

========================================================================


========================================================================
Example Number: 20
Parent Code is: 
{ super ( populationLimit ) ; this . elitismRate = elitismRate ; }
-------------------------------------------------------------------------------
Child code is: 
{ super ( populationLimit ) ; setElitismRate ( elitismRate ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=populationLimit}) (215{val=)}) (227{val=;})) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=elitismRate})) (204{val==}) (800{val=elitismRate})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=populationLimit}) (215{val=)}) (227{val=;})) (21 (32 (802{val=setElitismRate}) (214{val=(}) (800{val=elitismRate}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/35/parent/src_main_java_org_apache_commons_math3_genetics_ElitisticListPopulation.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 104
Wrong
========================================================================
False

0
Tree	{ this ( elitismRate , false ) ; }
Code	{ this ( elitismRate , false ) ; }
Distance : 7

1
Tree	{ this ( populationLimit , false ) ; }
Code	{ this ( populationLimit , false ) ; }
Distance : 6

2
Tree	{ super ( populationLimit ) ; }
Code	{ super ( populationLimit ) ; }
Distance : 5

3
Tree	{ ; }
Code	{ ; }
Distance : 9

4
Tree	{ this ( populationLimit , ( populationLimit ) null ) ; }
Code	{ this ( populationLimit , ( populationLimit ) null ) ; }
Distance : 6

5
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] elitismRate ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] elitismRate ; }
Distance : 7

6
Tree	{ this ( populationLimit , true ) ; }
Code	{ this ( populationLimit , true ) ; }
Distance : 6

7
Tree	{ super ( elitismRate ) ; }
Code	{ super ( elitismRate ) ; }
Distance : 5

8
Tree	{ super ( populationLimit ) ; this . populationLimit = elitismRate ; }
Code	{ super ( populationLimit ) ; this . populationLimit = elitismRate ; }
Distance : 5

9
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ( elitismRate ) ; }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ( elitismRate ) ; }
Distance : 5

10
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate . populationLimit () ; }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate . populationLimit () ; }
Distance : 7

11
Tree	{ super ( populationLimit , elitismRate ) ; }
Code	{ super ( populationLimit , elitismRate ) ; }
Distance : 4

12
Tree	{ this . elitismRate = populationLimit ; }
Code	{ this . elitismRate = populationLimit ; }
Distance : 9

13
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { Method.REGULA_FALSI , b3.value , b3.value , b3.value , b3.value , b3.value , b3.value , } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { Method.REGULA_FALSI , b3.value , b3.value , b3.value , b3.value , b3.value , b3.value , } ; }
Distance : 22

14
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { b3.value , b3.value , b3.value , b3.value , b3.value , } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { b3.value , b3.value , b3.value , b3.value , b3.value , } ; }
Distance : 18

15
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED , b3.value , b3.value , b3.value , b3.value , } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED , b3.value , b3.value , b3.value , b3.value , } ; }
Distance : 18

16
Tree	{ super(); this . elitismRate = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ super(); this . elitismRate = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 10

17
Tree	{ this ( populationLimit , ( elitismRate ) null ) ; }
Code	{ this ( populationLimit , ( elitismRate ) null ) ; }
Distance : 6

18
Tree	{ super ( populationLimit ) ; this . elitismRate = new byte [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new byte [] { elitismRate } ; }
Distance : 9

19
Tree	{ super(); this . elitismRate = elitismRate ; this . populationLimit = elitismRate ; }
Code	{ super(); this . elitismRate = elitismRate ; this . populationLimit = elitismRate ; }
Distance : 11

20
Tree	{ super ( populationLimit ) ; this . elitismRate = populationLimit ; }
Code	{ super ( populationLimit ) ; this . elitismRate = populationLimit ; }
Distance : 4

21
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

22
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { interpolator.currentDerivative , b3.value , b3.value , b3.value , b3.value , b3.value , b3.value , } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { interpolator.currentDerivative , b3.value , b3.value , b3.value , b3.value , b3.value , b3.value , } ; }
Distance : 22

23
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; rescale }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; rescale }
Distance : 5

24
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { interpolator.currentDerivative , b3.value , b3.value , b3.value , b3.value , } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { interpolator.currentDerivative , b3.value , b3.value , b3.value , b3.value , } ; }
Distance : 18

25
Tree	{ this . elitismRate = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ this . elitismRate = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 9

26
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { Method.REGULA_FALSI , b3.value , b3.value , b3.value , b3.value , } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { Method.REGULA_FALSI , b3.value , b3.value , b3.value , b3.value , } ; }
Distance : 18

27
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] elitismRate ; else }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] elitismRate ; else }
Distance : 8

28
Tree	{ this ( elitismRate , ( populationLimit ) null ) ; }
Code	{ this ( elitismRate , ( populationLimit ) null ) ; }
Distance : 7

29
Tree	{ ; } try
Code	{ ; } try
Distance : 10

30
Tree	{ this . elitismRate = elitismRate ; this . populationLimit = elitismRate ; }
Code	{ this . elitismRate = elitismRate ; this . populationLimit = elitismRate ; }
Distance : 10

31
Tree	{ super ( populationLimit ) ; this . elitismRate = new void [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new void [] { elitismRate } ; }
Distance : 9

32
Tree	{ super ( populationLimit , elitismRate ) ; this . elitismRate = new int [] { elitismRate } ; }
Code	{ super ( populationLimit , elitismRate ) ; this . elitismRate = new int [] { elitismRate } ; }
Distance : 11

33
Tree	{ this . elitismRate = populationLimit ( elitismRate ) ; }
Code	{ this . elitismRate = populationLimit ( elitismRate ) ; }
Distance : 6

34
Tree	{ super ( populationLimit ) ; this . elitismRate = new NotPositiveException [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new NotPositiveException [] { elitismRate } ; }
Distance : 9

35
Tree	{ this . populationLimit = elitismRate ; }
Code	{ this . populationLimit = elitismRate ; }
Distance : 7

36
Tree	{ super ( populationLimit ) ; this . elitismRate = new LUDecompositionImpl [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new LUDecompositionImpl [] { elitismRate } ; }
Distance : 9

37
Tree	{ super ( populationLimit , elitismRate ) ; this . elitismRate = new void [] { elitismRate } ; }
Code	{ super ( populationLimit , elitismRate ) ; this . elitismRate = new void [] { elitismRate } ; }
Distance : 11

38
Tree	{ super ( populationLimit , elitismRate ) ; this . elitismRate = new byte [] { elitismRate } ; }
Code	{ super ( populationLimit , elitismRate ) ; this . elitismRate = new byte [] { elitismRate } ; }
Distance : 11

39
Tree	{ super ( populationLimit ) ; this . populationLimit = elitismRate ( elitismRate ) ; }
Code	{ super ( populationLimit ) ; this . populationLimit = elitismRate ( elitismRate ) ; }
Distance : 5

40
Tree	{ super ( populationLimit ) ; this . elitismRate = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

41
Tree	{ super ( populationLimit ) ; this . elitismRate = new int [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new int [] { elitismRate } ; }
Distance : 9

42
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] elitismRate ; if }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] elitismRate ; if }
Distance : 8

43
Tree	{ super ( populationLimit ) ; this . elitismRate = new void [] { elitismRate } ; if }
Code	{ super ( populationLimit ) ; this . elitismRate = new void [] { elitismRate } ; if }
Distance : 10

44
Tree	{ super ( populationLimit ) ; this . elitismRate = new NotPositiveException [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new NotPositiveException [ NUMBER_CONSTANT ] ; }
Distance : 8

45
Tree	{ super ( elitismRate ) ; this . elitismRate = elitismRate ; }
Code	{ super ( elitismRate ) ; this . elitismRate = elitismRate ; }
Distance : 5

46
Tree	{ super ( populationLimit ) ; this . elitismRate = new byte [] { elitismRate } ; if }
Code	{ super ( populationLimit ) ; this . elitismRate = new byte [] { elitismRate } ; if }
Distance : 10

47
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; }
Distance : 4

48
Tree	{ this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 8

49
Tree	{ super ( populationLimit ) ; this . populationLimit = elitismRate . populationLimit () ; }
Code	{ super ( populationLimit ) ; this . populationLimit = elitismRate . populationLimit () ; }
Distance : 7

50
Tree	{ super(); this . elitismRate = populationLimit ( populationLimit ) ; if }
Code	{ super(); this . elitismRate = populationLimit ( populationLimit ) ; if }
Distance : 8

51
Tree	{ super ( populationLimit ) ; this . elitismRate = populationLimit ; }
Code	{ super ( populationLimit ) ; this . elitismRate = populationLimit ; }
Distance : 4

52
Tree	{ super(); this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ super(); this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 9

53
Tree	{ super ( populationLimit ) ; this . elitismRate = new MullerSolver2 [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new MullerSolver2 [ NUMBER_CONSTANT ] ; }
Distance : 8

54
Tree	{}
Code	{}
Distance : 12

55
Tree	{ this . elitismRate = populationLimit ( populationLimit ) ; }
Code	{ this . elitismRate = populationLimit ( populationLimit ) ; }
Distance : 7

56
Tree	{ super ( elitismRate , populationLimit ) ; }
Code	{ super ( elitismRate , populationLimit ) ; }
Distance : 6

57
Tree	{ this . elitismRate = elitismRate ; }
Code	{ this . elitismRate = elitismRate ; }
Distance : 8

58
Tree	{ super ( populationLimit ) ; } nCols
Code	{ super ( populationLimit ) ; } nCols
Distance : 6

59
Tree	{ this . populationLimit = populationLimit ; }
Code	{ this . populationLimit = populationLimit ; }
Distance : 8

60
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] eventsStates ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] eventsStates ; }
Distance : 7

61
Tree	{ super ( elitismRate ) ; this . elitismRate = elitismRate ; }
Code	{ super ( elitismRate ) ; this . elitismRate = elitismRate ; }
Distance : 5

62
Tree	{ null this . elitismRate = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ null this . elitismRate = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 10

63
Tree	{ super(); this . elitismRate = populationLimit ( populationLimit ) ; && }
Code	{ super(); this . elitismRate = populationLimit ( populationLimit ) ; && }
Distance : 8

64
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] subTestData ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] subTestData ; }
Distance : 7

65
Tree	{ super ( populationLimit , populationLimit ) ; }
Code	{ super ( populationLimit , populationLimit ) ; }
Distance : 5

66
Tree	{ super ( populationLimit ) ; this . elitismRate = new MullerSolver2 [] elitismRate ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new MullerSolver2 [] elitismRate ; }
Distance : 7

67
Tree	{ super ( elitismRate , elitismRate ) ; }
Code	{ super ( elitismRate , elitismRate ) ; }
Distance : 5

68
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; if }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; if }
Distance : 5

69
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { elitismRate } ; }
Distance : 9

70
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] eventsStates ; if }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] eventsStates ; if }
Distance : 8

71
Tree	{ this . elitismRate = populationLimit ; this . elitismRate = elitismRate ; }
Code	{ this . elitismRate = populationLimit ; this . elitismRate = elitismRate ; }
Distance : 9

72
Tree	{ this ( populationLimit , ( populationLimit ) continue; ) ; }
Code	{ this ( populationLimit , ( populationLimit ) continue; ) ; }
Distance : 6

73
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { elitismRate } ; }
Distance : 9

74
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED , b3.value , b3.value , b3.value , b3.value , b3.value , b3.value , } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED , b3.value , b3.value , b3.value , b3.value , b3.value , b3.value , } ; }
Distance : 22

75
Tree	{ super(); this . elitismRate = populationLimit ( populationLimit ) ; catch }
Code	{ super(); this . elitismRate = populationLimit ( populationLimit ) ; catch }
Distance : 8

76
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] subTestData ; if }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] subTestData ; if }
Distance : 8

77
Tree	{} false
Code	{} false
Distance : 12

78
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { elitismRate } ; if }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { elitismRate } ; if }
Distance : 10

79
Tree	{ super ( populationLimit ) ; this . elitismRate = new void [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new void [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

80
Tree	{ super ( populationLimit ) ; this . elitismRate = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

81
Tree	{ super ( populationLimit ) ; this . elitismRate = new LUDecompositionImpl [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new LUDecompositionImpl [ NUMBER_CONSTANT ] ; }
Distance : 8

82
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [ NUMBER_CONSTANT ] ; }
Distance : 8

83
Tree	{} Complex
Code	{} Complex
Distance : 12

84
Tree	{ this ( elitismRate , true ) ; }
Code	{ this ( elitismRate , true ) ; }
Distance : 7

85
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; else }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; else }
Distance : 5

86
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { b3.value , b3.value , b3.value , b3.value , b3.value , b3.value , b3.value , } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { b3.value , b3.value , b3.value , b3.value , b3.value , b3.value , b3.value , } ; }
Distance : 22

87
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; }
Distance : 4

88
Tree	{ this . populationLimit = populationLimit ( populationLimit ) ; }
Code	{ this . populationLimit = populationLimit ( populationLimit ) ; }
Distance : 6

89
Tree	{ super ( populationLimit ) ; this . populationLimit = elitismRate ; }
Code	{ super ( populationLimit ) ; this . populationLimit = elitismRate ; }
Distance : 5

90
Tree	{ super ( elitismRate ) ; this . elitismRate = elitismRate ( elitismRate ) ; }
Code	{ super ( elitismRate ) ; this . elitismRate = elitismRate ( elitismRate ) ; }
Distance : 6

91
Tree	{ super ( elitismRate ) ; this . elitismRate = elitismRate . populationLimit () ; }
Code	{ super ( elitismRate ) ; this . elitismRate = elitismRate . populationLimit () ; }
Distance : 8

92
Tree	{ super ( populationLimit ) ; this . elitismRate = new MullerSolver2 [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new MullerSolver2 [] { elitismRate } ; }
Distance : 9

93
Tree	{ super ( populationLimit ) ; this . elitismRate = populationLimit . elitismRate () ; }
Code	{ super ( populationLimit ) ; this . elitismRate = populationLimit . elitismRate () ; }
Distance : 7

94
Tree	{ super ( populationLimit , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Code	{ super ( populationLimit , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Distance : 11

95
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ( populationLimit ) ; }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ( populationLimit ) ; }
Distance : 6

96
Tree	{ ; } false
Code	{ ; } false
Distance : 10

97
Tree	{ this . populationLimit = populationLimit ( elitismRate ) ; }
Code	{ this . populationLimit = populationLimit ( elitismRate ) ; }
Distance : 5

98
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; ret }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; ret }
Distance : 5

99
Tree	{ super ( populationLimit ) ; this . elitismRate = new int [] { elitismRate } ; if }
Code	{ super ( populationLimit ) ; this . elitismRate = new int [] { elitismRate } ; if }
Distance : 10

100
Tree	{ super(); this . elitismRate = populationLimit ( populationLimit ) ; else }
Code	{ super(); this . elitismRate = populationLimit ( populationLimit ) ; else }
Distance : 8

101
Tree	{ super ( populationLimit ) ; } k
Code	{ super ( populationLimit ) ; } k
Distance : 6

102
Tree	{ ; } Complex
Code	{ ; } Complex
Distance : 10

103
Tree	{} try
Code	{} try
Distance : 12

========================================================================


========================================================================
Example Number: 21
Parent Code is: 
{ super ( chromosomes , populationLimit ) ; this . elitismRate = elitismRate ; }
-------------------------------------------------------------------------------
Child code is: 
{ super ( chromosomes , populationLimit ) ; setElitismRate ( elitismRate ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=chromosomes}) (234{val=,}) (800{val=populationLimit}) (215{val=)}) (227{val=;})) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=elitismRate})) (204{val==}) (800{val=elitismRate})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=chromosomes}) (234{val=,}) (800{val=populationLimit}) (215{val=)}) (227{val=;})) (21 (32 (802{val=setElitismRate}) (214{val=(}) (800{val=elitismRate}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/35/parent/src_main_java_org_apache_commons_math3_genetics_ElitisticListPopulation.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 108
Wrong
========================================================================
False

0
Tree	{ this ( chromosomes , false ) ; }
Code	{ this ( chromosomes , false ) ; }
Distance : 7

1
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Distance : 10

2
Tree	{ this ( LocalizedFormats.MAX_COUNT_EXCEEDED , elitismRate ) ; }
Code	{ this ( LocalizedFormats.MAX_COUNT_EXCEEDED , elitismRate ) ; }
Distance : 7

3
Tree	{ super ( chromosomes , elitismRate ) ; }
Code	{ super ( chromosomes , elitismRate ) ; }
Distance : 5

4
Tree	{ super ( LocalizedFormats.FAILED_FRACTION_CONVERSION , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Code	{ super ( LocalizedFormats.FAILED_FRACTION_CONVERSION , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Distance : 11

5
Tree	{ super ( chromosomes ) ; this . elitismRate = new double [] { elitismRate } ; }
Code	{ super ( chromosomes ) ; this . elitismRate = new double [] { elitismRate } ; }
Distance : 11

6
Tree	{ this ( chromosomes , populationLimit , populationLimit , elitismRate , false ) ; }
Code	{ this ( chromosomes , populationLimit , populationLimit , elitismRate , false ) ; }
Distance : 7

7
Tree	{ super ( chromosomes , elitismRate ) ; this . populationLimit = elitismRate ; }
Code	{ super ( chromosomes , elitismRate ) ; this . populationLimit = elitismRate ; }
Distance : 6

8
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new void [] { elitismRate } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new void [] { elitismRate } ; }
Distance : 10

9
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new void [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new void [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 16

10
Tree	{ super ( chromosomes , elitismRate , populationLimit ) ; this . elitismRate = new int [] { elitismRate } ; }
Code	{ super ( chromosomes , elitismRate , populationLimit ) ; this . elitismRate = new int [] { elitismRate } ; }
Distance : 11

11
Tree	{ this ( chromosomes , elitismRate , null ) ; }
Code	{ this ( chromosomes , elitismRate , null ) ; }
Distance : 7

12
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = populationLimit ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = populationLimit ; }
Distance : 5

13
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new int [] { elitismRate } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new int [] { elitismRate } ; }
Distance : 10

14
Tree	{ this ( new MullerSolver2 ( chromosomes ) , elitismRate ) ; }
Code	{ this ( new MullerSolver2 ( chromosomes ) , elitismRate ) ; }
Distance : 8

15
Tree	{ super ( populationLimit , elitismRate ) ; }
Code	{ super ( populationLimit , elitismRate ) ; }
Distance : 6

16
Tree	{ this ( chromosomes , ( populationLimit ) continue; ) ; }
Code	{ this ( chromosomes , ( populationLimit ) continue; ) ; }
Distance : 6

17
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 16

18
Tree	{ this ( chromosomes , true ) ; }
Code	{ this ( chromosomes , true ) ; }
Distance : 7

19
Tree	{ this ( populationLimit , false ) ; }
Code	{ this ( populationLimit , false ) ; }
Distance : 8

20
Tree	{ super ( chromosomes , elitismRate ) ; populationLimit = NUMBER_CONSTANT / elitismRate ; }
Code	{ super ( chromosomes , elitismRate ) ; populationLimit = NUMBER_CONSTANT / elitismRate ; }
Distance : 6

21
Tree	{ super ( chromosomes ) ; this . elitismRate = new void [] { elitismRate } ; }
Code	{ super ( chromosomes ) ; this . elitismRate = new void [] { elitismRate } ; }
Distance : 11

22
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = elitismRate ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = elitismRate ; }
Distance : 5

23
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = elitismRate ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = elitismRate ; }
Distance : 4

24
Tree	{ this ( LocalizedFormats.EVALUATION_FAILED , elitismRate ) ; }
Code	{ this ( LocalizedFormats.EVALUATION_FAILED , elitismRate ) ; }
Distance : 7

25
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new byte [] { elitismRate } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new byte [] { elitismRate } ; }
Distance : 10

26
Tree	{ this ( new remove ( chromosomes ) , elitismRate ) ; }
Code	{ this ( new remove ( chromosomes ) , elitismRate ) ; }
Distance : 8

27
Tree	{ this . populationLimit = elitismRate ; elitismRate () ; }
Code	{ this . populationLimit = elitismRate ; elitismRate () ; }
Distance : 9

28
Tree	{ this ( new LUDecompositionImpl ( chromosomes ) , elitismRate ) ; }
Code	{ this ( new LUDecompositionImpl ( chromosomes ) , elitismRate ) ; }
Distance : 8

29
Tree	{ this . chromosomes = new boolean [] { elitismRate } ; }
Code	{ this . chromosomes = new boolean [] { elitismRate } ; }
Distance : 9

30
Tree	{ this ( Sum , elitismRate ) ; }
Code	{ this ( Sum , elitismRate ) ; }
Distance : 7

31
Tree	{ null this . chromosomes = populationLimit ; this . elitismRate = elitismRate ; }
Code	{ null this . chromosomes = populationLimit ; this . elitismRate = elitismRate ; }
Distance : 9

32
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new beta [] scale.length ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new beta [] scale.length ; }
Distance : 8

33
Tree	{ super ( chromosomes , elitismRate , populationLimit ) ; this . elitismRate = new byte [] { elitismRate } ; }
Code	{ super ( chromosomes , elitismRate , populationLimit ) ; this . elitismRate = new byte [] { elitismRate } ; }
Distance : 11

34
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new byte [] { elitismRate } ; if }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new byte [] { elitismRate } ; if }
Distance : 11

35
Tree	{ this ( chromosomes , elitismRate , populationLimit , elitismRate , false ) ; }
Code	{ this ( chromosomes , elitismRate , populationLimit , elitismRate , false ) ; }
Distance : 8

36
Tree	{ this ( chromosomes , elitismRate , populationLimit , elitismRate , true ) ; }
Code	{ this ( chromosomes , elitismRate , populationLimit , elitismRate , true ) ; }
Distance : 8

37
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new LUDecompositionImpl [] scale.length ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new LUDecompositionImpl [] scale.length ; }
Distance : 8

38
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new LUDecompositionImpl [ NUMBER_CONSTANT ] ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new LUDecompositionImpl [ NUMBER_CONSTANT ] ; }
Distance : 9

39
Tree	{ this . chromosomes = elitismRate ; this . populationLimit = elitismRate ; }
Code	{ this . chromosomes = elitismRate ; this . populationLimit = elitismRate ; }
Distance : 10

40
Tree	{ super ( x.length , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Code	{ super ( x.length , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Distance : 11

41
Tree	{ this ( x.length , elitismRate ) ; }
Code	{ this ( x.length , elitismRate ) ; }
Distance : 7

42
Tree	{ super ( x.length , elitismRate ) ; this . elitismRate = elitismRate ; }
Code	{ super ( x.length , elitismRate ) ; this . elitismRate = elitismRate ; }
Distance : 6

43
Tree	{ this ( chromosomes , ( populationLimit ) null ) ; }
Code	{ this ( chromosomes , ( populationLimit ) null ) ; }
Distance : 6

44
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 12

45
Tree	{ this . chromosomes = elitismRate ; elitismRate () ; }
Code	{ this . chromosomes = elitismRate ; elitismRate () ; }
Distance : 8

46
Tree	{ this . populationLimit = elitismRate ; }
Code	{ this . populationLimit = elitismRate ; }
Distance : 9

47
Tree	{ super ( LocalizedFormats.EVALUATION_FAILED , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Code	{ super ( LocalizedFormats.EVALUATION_FAILED , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Distance : 11

48
Tree	{ super ( chromosomes , elitismRate ) ; elitismRate = NUMBER_CONSTANT / elitismRate ; }
Code	{ super ( chromosomes , elitismRate ) ; elitismRate = NUMBER_CONSTANT / elitismRate ; }
Distance : 6

49
Tree	{ super ( LocalizedFormats.MAX_COUNT_EXCEEDED , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Code	{ super ( LocalizedFormats.MAX_COUNT_EXCEEDED , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Distance : 11

50
Tree	{ super ( chromosomes , elitismRate , populationLimit ) ; this . elitismRate = new double [] { elitismRate } ; }
Code	{ super ( chromosomes , elitismRate , populationLimit ) ; this . elitismRate = new double [] { elitismRate } ; }
Distance : 11

51
Tree	{ super ( chromosomes ) ; this . elitismRate = new int [] { elitismRate } ; }
Code	{ super ( chromosomes ) ; this . elitismRate = new int [] { elitismRate } ; }
Distance : 11

52
Tree	{ super(); this . chromosomes = populationLimit ; this . elitismRate = elitismRate ; }
Code	{ super(); this . chromosomes = populationLimit ; this . elitismRate = elitismRate ; }
Distance : 9

53
Tree	{ this ( new setWindowSize ( chromosomes ) , elitismRate ) ; }
Code	{ this ( new setWindowSize ( chromosomes ) , elitismRate ) ; }
Distance : 8

54
Tree	{ this ( chromosomes , elitismRate , true ) ; }
Code	{ this ( chromosomes , elitismRate , true ) ; }
Distance : 7

55
Tree	{ super(); this . chromosomes = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ super(); this . chromosomes = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 10

56
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new Array2DRowFieldMatrix [ NUMBER_CONSTANT ] ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new Array2DRowFieldMatrix [ NUMBER_CONSTANT ] ; }
Distance : 9

57
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new void [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new void [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 12

58
Tree	{ super ( LocalizedFormats.EVALUATION_FAILED , elitismRate ) ; this . elitismRate = elitismRate ; }
Code	{ super ( LocalizedFormats.EVALUATION_FAILED , elitismRate ) ; this . elitismRate = elitismRate ; }
Distance : 6

59
Tree	{ this ( chromosomes , elitismRate , false ) ; }
Code	{ this ( chromosomes , elitismRate , false ) ; }
Distance : 7

60
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new LUDecompositionImpl [] minExpectedCount ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new LUDecompositionImpl [] minExpectedCount ; }
Distance : 8

61
Tree	{ super ( chromosomes ) ; this . elitismRate = new byte [] { elitismRate } ; }
Code	{ super ( chromosomes ) ; this . elitismRate = new byte [] { elitismRate } ; }
Distance : 11

62
Tree	{ this ( chromosomes , ( chromosomes ) null ) ; }
Code	{ this ( chromosomes , ( chromosomes ) null ) ; }
Distance : 7

63
Tree	{ super ( LocalizedFormats.FAILED_FRACTION_CONVERSION , elitismRate ) ; this . elitismRate = elitismRate ; }
Code	{ super ( LocalizedFormats.FAILED_FRACTION_CONVERSION , elitismRate ) ; this . elitismRate = elitismRate ; }
Distance : 6

64
Tree	{ this ( chromosomes , ( elitismRate ) null ) ; }
Code	{ this ( chromosomes , ( elitismRate ) null ) ; }
Distance : 7

65
Tree	{ this . chromosomes = populationLimit ; }
Code	{ this . chromosomes = populationLimit ; }
Distance : 9

66
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 16

67
Tree	{ super ( LocalizedFormats.MAX_COUNT_EXCEEDED , elitismRate ) ; this . elitismRate = elitismRate ; }
Code	{ super ( LocalizedFormats.MAX_COUNT_EXCEEDED , elitismRate ) ; this . elitismRate = elitismRate ; }
Distance : 6

68
Tree	{ this ( chromosomes , populationLimit , false ) ; }
Code	{ this ( chromosomes , populationLimit , false ) ; }
Distance : 6

69
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 12

70
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new elitismRate [ NUMBER_CONSTANT ] ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new elitismRate [ NUMBER_CONSTANT ] ; }
Distance : 9

71
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 12

72
Tree	{ super(); this . chromosomes = populationLimit ; this . populationLimit = elitismRate ; }
Code	{ super(); this . chromosomes = populationLimit ; this . populationLimit = elitismRate ; }
Distance : 10

73
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new beta [] minExpectedCount ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new beta [] minExpectedCount ; }
Distance : 8

74
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new int [] { elitismRate } ; if }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new int [] { elitismRate } ; if }
Distance : 11

75
Tree	{ this ( chromosomes , populationLimit , super(); ) ; }
Code	{ this ( chromosomes , populationLimit , super(); ) ; }
Distance : 6

76
Tree	{ this ( chromosomes , populationLimit , populationLimit , elitismRate , true ) ; }
Code	{ this ( chromosomes , populationLimit , populationLimit , elitismRate , true ) ; }
Distance : 7

77
Tree	{ this . chromosomes = new void [] { elitismRate } ; }
Code	{ this . chromosomes = new void [] { elitismRate } ; }
Distance : 9

78
Tree	{ super ( chromosomes , populationLimit ) ; }
Code	{ super ( chromosomes , populationLimit ) ; }
Distance : 5

79
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; else }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; else }
Distance : 11

80
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = elitismRate ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = elitismRate ; }
Distance : 4

81
Tree	{ this . chromosomes = elitismRate ; }
Code	{ this . chromosomes = elitismRate ; }
Distance : 9

82
Tree	{ super ( chromosomes , elitismRate , populationLimit ) ; this . elitismRate = new void [] { elitismRate } ; }
Code	{ super ( chromosomes , elitismRate , populationLimit ) ; this . elitismRate = new void [] { elitismRate } ; }
Distance : 11

83
Tree	{ this . elitismRate = elitismRate ; elitismRate () ; }
Code	{ this . elitismRate = elitismRate ; elitismRate () ; }
Distance : 9

84
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; if }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; if }
Distance : 11

85
Tree	{ super ( chromosomes , elitismRate ) ; elitismRate = NUMBER_CONSTANT / populationLimit ; }
Code	{ super ( chromosomes , elitismRate ) ; elitismRate = NUMBER_CONSTANT / populationLimit ; }
Distance : 6

86
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 16

87
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = elitismRate ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = elitismRate ; }
Distance : 5

88
Tree	{ this . chromosomes = new byte [] { elitismRate } ; }
Code	{ this . chromosomes = new byte [] { elitismRate } ; }
Distance : 9

89
Tree	{ this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 10

90
Tree	{ this ( chromosomes , populationLimit , null ) ; }
Code	{ this ( chromosomes , populationLimit , null ) ; }
Distance : 6

91
Tree	{ super ( chromosomes . populationLimit () , elitismRate ) ; this . elitismRate = new byte [] { elitismRate } ; }
Code	{ super ( chromosomes . populationLimit () , elitismRate ) ; this . elitismRate = new byte [] { elitismRate } ; }
Distance : 13

92
Tree	{ this . chromosomes = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ this . chromosomes = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 9

93
Tree	{ super ( chromosomes . super () , elitismRate ) ; this . elitismRate = new int [] { elitismRate } ; }
Code	{ super ( chromosomes . super () , elitismRate ) ; this . elitismRate = new int [] { elitismRate } ; }
Distance : 13

94
Tree	{ this ( chromosomes , populationLimit , true ) ; }
Code	{ this ( chromosomes , populationLimit , true ) ; }
Distance : 6

95
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new beta [ NUMBER_CONSTANT ] ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new beta [ NUMBER_CONSTANT ] ; }
Distance : 9

96
Tree	{ super ( chromosomes . populationLimit () , elitismRate ) ; this . elitismRate = new void [] { elitismRate } ; }
Code	{ super ( chromosomes . populationLimit () , elitismRate ) ; this . elitismRate = new void [] { elitismRate } ; }
Distance : 13

97
Tree	{ super ( chromosomes , elitismRate ) ; this . populationLimit = elitismRate ; }
Code	{ super ( chromosomes , elitismRate ) ; this . populationLimit = elitismRate ; }
Distance : 6

98
Tree	{ this . chromosomes = populationLimit ; this . elitismRate = elitismRate ; }
Code	{ this . chromosomes = populationLimit ; this . elitismRate = elitismRate ; }
Distance : 8

99
Tree	{ this . chromosomes = populationLimit ; elitismRate () ; }
Code	{ this . chromosomes = populationLimit ; elitismRate () ; }
Distance : 7

100
Tree	{ super ( chromosomes , populationLimit ) ; elitismRate = NUMBER_CONSTANT / elitismRate ; }
Code	{ super ( chromosomes , populationLimit ) ; elitismRate = NUMBER_CONSTANT / elitismRate ; }
Distance : 5

101
Tree	{ this ( chromosomes , populationLimit , break; ) ; }
Code	{ this ( chromosomes , populationLimit , break; ) ; }
Distance : 6

102
Tree	{ this . chromosomes = new int [] { elitismRate } ; }
Code	{ this . chromosomes = new int [] { elitismRate } ; }
Distance : 9

103
Tree	{ this . elitismRate = elitismRate ; }
Code	{ this . elitismRate = elitismRate ; }
Distance : 10

104
Tree	{ this ( populationLimit , true ) ; }
Code	{ this ( populationLimit , true ) ; }
Distance : 8

105
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = populationLimit ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = populationLimit ; }
Distance : 5

106
Tree	{ super ( elitismRate , elitismRate ) ; }
Code	{ super ( elitismRate , elitismRate ) ; }
Distance : 6

107
Tree	{ super ( chromosomes . super () , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Code	{ super ( chromosomes . super () , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Distance : 13

========================================================================


========================================================================
Example Number: 22
Parent Code is: 
{ return chromosomes . iterator () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return getChromosomes () . iterator () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (800{val=chromosomes}) (235{val=.}) (802{val=iterator}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=getChromosomes}) (216{val=()})) (235{val=.}) (802{val=iterator}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/34/parent/src_main_java_org_apache_commons_math3_genetics_ListPopulation.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 168
Wrong
========================================================================
False

0
Tree	{ return chromosomes . iterator () ; }
Code	{ return chromosomes . iterator () ; }
Distance : 2

1
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; }
Distance : 9

2
Tree	{ return ( chromosomes == null ? super(); : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == null ? super(); : chromosomes . iterator () ) ; }
Distance : 9

3
Tree	{ return ( byte [] ) chromosomes . iterator () ; }
Code	{ return ( byte [] ) chromosomes . iterator () ; }
Distance : 5

4
Tree	{ return chromosomes . getChromosomes () . < chromosomes > iterator () ; }
Code	{ return chromosomes . getChromosomes () . < chromosomes > iterator () ; }
Distance : 5

5
Tree	{ return chromosomes . getChromosomes ( chromosomes , chromosomes ) ; }
Code	{ return chromosomes . getChromosomes ( chromosomes , chromosomes ) ; }
Distance : 7

6
Tree	{ return iterator ( chromosomes . getChromosomes () , chromosomes . iterator () ) ; }
Code	{ return iterator ( chromosomes . getChromosomes () , chromosomes . iterator () ) ; }
Distance : 7

7
Tree	{ return chromosomes . iterator () && chromosomes . getChromosomes () ; }
Code	{ return chromosomes . iterator () && chromosomes . getChromosomes () ; }
Distance : 6

8
Tree	{ return chromosomes == null iterator chromosomes . iterator () ; }
Code	{ return chromosomes == null iterator chromosomes . iterator () ; }
Distance : 5

9
Tree	{ return chromosomes . getChromosomes () && chromosomes . iterator () ; }
Code	{ return chromosomes . getChromosomes () && chromosomes . iterator () ; }
Distance : 4

10
Tree	{ return iterator ( chromosomes . iterator () , chromosomes . getChromosomes () ) ; }
Code	{ return iterator ( chromosomes . iterator () , chromosomes . getChromosomes () ) ; }
Distance : 9

11
Tree	{ return chromosomes . iterator () () chromosomes . iterator () ; }
Code	{ return chromosomes . iterator () () chromosomes . iterator () ; }
Distance : 5

12
Tree	{ return chromosomes . iterator () iterator chromosomes . getChromosomes () ; }
Code	{ return chromosomes . iterator () iterator chromosomes . getChromosomes () ; }
Distance : 6

13
Tree	{ return chromosomes == null iterator chromosomes . getChromosomes () ; }
Code	{ return chromosomes == null iterator chromosomes . getChromosomes () ; }
Distance : 6

14
Tree	{ return chromosomes . getChromosomes () && chromosomes . getChromosomes () ; }
Code	{ return chromosomes . getChromosomes () && chromosomes . getChromosomes () ; }
Distance : 5

15
Tree	{ return new chromosomes () ; } try
Code	{ return new chromosomes () ; } try
Distance : 5

16
Tree	{ return new chromosomes () ; } Complex
Code	{ return new chromosomes () ; } Complex
Distance : 5

17
Tree	{ return chromosomes . iterator () ; } k
Code	{ return chromosomes . iterator () ; } k
Distance : 3

18
Tree	{ return chromosomes . iterator ( chromosomes . iterator () ) . iterator () ; }
Code	{ return chromosomes . iterator ( chromosomes . iterator () ) . iterator () ; }
Distance : 8

19
Tree	{ return getChromosomes () ; }
Code	{ return getChromosomes () ; }
Distance : 3

20
Tree	{ return chromosomes . iterator () . getChromosomes ( chromosomes ) ; }
Code	{ return chromosomes . iterator () . getChromosomes ( chromosomes ) ; }
Distance : 7

21
Tree	{ return chromosomes . iterator ( chromosomes . getChromosomes () ) ; }
Code	{ return chromosomes . iterator ( chromosomes . getChromosomes () ) ; }
Distance : 7

22
Tree	{ return iterator () ; }
Code	{ return iterator () ; }
Distance : 3

23
Tree	{ return chromosomes . iterator () - NUMBER_CONSTANT ; }
Code	{ return chromosomes . iterator () - NUMBER_CONSTANT ; }
Distance : 4

24
Tree	{ return true ; }
Code	{ return true ; }
Distance : 5

25
Tree	{ return Order.MINUS_SUB_PLUS ; }
Code	{ return Order.MINUS_SUB_PLUS ; }
Distance : 5

26
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 5

27
Tree	{ return this . chromosomes ; }
Code	{ return this . chromosomes ; }
Distance : 4

28
Tree	{ return Double.NaN ; }
Code	{ return Double.NaN ; }
Distance : 5

29
Tree	{ return new SubPlane ( chromosomes ) ; }
Code	{ return new SubPlane ( chromosomes ) ; }
Distance : 5

30
Tree	{ return ! chromosomes . iterator () ; } k
Code	{ return ! chromosomes . iterator () ; } k
Distance : 3

31
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 5

32
Tree	{ return new ExponentialDistribution ( chromosomes ) ; }
Code	{ return new ExponentialDistribution ( chromosomes ) ; }
Distance : 5

33
Tree	{ return new chromosomes () ; }
Code	{ return new chromosomes () ; }
Distance : 4

34
Tree	{ return chromosomes . iterator () . getChromosomes () ; }
Code	{ return chromosomes . iterator () . getChromosomes () ; }
Distance : 4

35
Tree	{ return ( ( chromosomes ) chromosomes ) . iterator () ; }
Code	{ return ( ( chromosomes ) chromosomes ) . iterator () ; }
Distance : 6

36
Tree	{ return iterator ( chromosomes . getChromosomes () ) ; }
Code	{ return iterator ( chromosomes . getChromosomes () ) ; }
Distance : 5

37
Tree	{ return ( void [] ) chromosomes . iterator () ; }
Code	{ return ( void [] ) chromosomes . iterator () ; }
Distance : 5

38
Tree	{ return chromosomes . getChromosomes ( chromosomes ) ; }
Code	{ return chromosomes . getChromosomes ( chromosomes ) ; }
Distance : 6

39
Tree	{ return ( int [] ) chromosomes . iterator () ; }
Code	{ return ( int [] ) chromosomes . iterator () ; }
Distance : 5

40
Tree	{ return chromosomes - NUMBER_CONSTANT ; }
Code	{ return chromosomes - NUMBER_CONSTANT ; }
Distance : 5

41
Tree	{ return STRING_CONSTANT ; } false
Code	{ return STRING_CONSTANT ; } false
Distance : 6

42
Tree	{ return chromosomes . iterator () && chromosomes . iterator () ; }
Code	{ return chromosomes . iterator () && chromosomes . iterator () ; }
Distance : 5

43
Tree	{ return chromosomes . iterator () ; }
Code	{ return chromosomes . iterator () ; }
Distance : 2

44
Tree	{ return new chromosomes ( chromosomes ) ; } false
Code	{ return new chromosomes ( chromosomes ) ; } false
Distance : 6

45
Tree	{ return this . chromosomes ; } false
Code	{ return this . chromosomes ; } false
Distance : 5

46
Tree	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; } k
Code	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; } k
Distance : 6

47
Tree	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; } nCols
Code	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; } nCols
Distance : 6

48
Tree	{ return chromosomes ; } false
Code	{ return chromosomes ; } false
Distance : 6

49
Tree	{ return STRING_CONSTANT ; } Complex
Code	{ return STRING_CONSTANT ; } Complex
Distance : 6

50
Tree	{ return new chromosomes ( chromosomes ) ; } try
Code	{ return new chromosomes ( chromosomes ) ; } try
Distance : 6

51
Tree	{ return chromosomes . getChromosomes () ; }
Code	{ return chromosomes . getChromosomes () ; }
Distance : 3

52
Tree	{ return this . chromosomes . iterator () ; } k
Code	{ return this . chromosomes . iterator () ; } k
Distance : 4

53
Tree	{ return ( ( chromosomes ) chromosomes ) . iterator () ; } k
Code	{ return ( ( chromosomes ) chromosomes ) . iterator () ; } k
Distance : 7

54
Tree	{ return true ; } k
Code	{ return true ; } k
Distance : 6

55
Tree	{ return chromosomes - NUMBER_CONSTANT ; } false
Code	{ return chromosomes - NUMBER_CONSTANT ; } false
Distance : 6

56
Tree	{ return chromosomes - NUMBER_CONSTANT ; } try
Code	{ return chromosomes - NUMBER_CONSTANT ; } try
Distance : 6

57
Tree	{ return chromosomes . iterator ( chromosomes , chromosomes ) ; } nCols
Code	{ return chromosomes . iterator ( chromosomes , chromosomes ) ; } nCols
Distance : 8

58
Tree	{ return ! chromosomes . iterator () ; } nCols
Code	{ return ! chromosomes . iterator () ; } nCols
Distance : 3

59
Tree	{ return chromosomes . iterator ( chromosomes ) ; } k
Code	{ return chromosomes . iterator ( chromosomes ) ; } k
Distance : 6

60
Tree	{ return chromosomes == null ? super(); : chromosomes . iterator () ; }
Code	{ return chromosomes == null ? super(); : chromosomes . iterator () ; }
Distance : 7

61
Tree	{ return chromosomes . iterator () . < chromosomes > getChromosomes () ; }
Code	{ return chromosomes . iterator () . < chromosomes > getChromosomes () ; }
Distance : 7

62
Tree	{ return iterator () ; } nCols
Code	{ return iterator () ; } nCols
Distance : 4

63
Tree	{ return chromosomes . iterator () ; } nCols
Code	{ return chromosomes . iterator () ; } nCols
Distance : 3

64
Tree	{ return SubPlane ; }
Code	{ return SubPlane ; }
Distance : 5

65
Tree	{ return getChromosomes ( chromosomes . iterator () ) ; }
Code	{ return getChromosomes ( chromosomes . iterator () ) ; }
Distance : 3

66
Tree	{ return ! chromosomes . getChromosomes () ; }
Code	{ return ! chromosomes . getChromosomes () ; }
Distance : 3

67
Tree	{ return new ExponentialDistribution () ; }
Code	{ return new ExponentialDistribution () ; }
Distance : 4

68
Tree	{ return chromosomes () ; }
Code	{ return chromosomes () ; }
Distance : 4

69
Tree	{ return ( chromosomes ) chromosomes . iterator () ; } nCols
Code	{ return ( chromosomes ) chromosomes . iterator () ; } nCols
Distance : 5

70
Tree	{ return new chromosomes () ; } false
Code	{ return new chromosomes () ; } false
Distance : 5

71
Tree	{ return ( chromosomes ) chromosomes . iterator () ; } k
Code	{ return ( chromosomes ) chromosomes . iterator () ; } k
Distance : 5

72
Tree	{ return chromosomes - NUMBER_CONSTANT ; } Complex
Code	{ return chromosomes - NUMBER_CONSTANT ; } Complex
Distance : 6

73
Tree	{ return chromosomes . getChromosomes () . iterator ( chromosomes ) ; }
Code	{ return chromosomes . getChromosomes () . iterator ( chromosomes ) ; }
Distance : 5

74
Tree	{ return new GoalType () ; }
Code	{ return new GoalType () ; }
Distance : 4

75
Tree	{ return chromosomes . iterator () . iterator () ; }
Code	{ return chromosomes . iterator () . iterator () ; }
Distance : 3

76
Tree	{ return new chromosomes () . getChromosomes () ; }
Code	{ return new chromosomes () . getChromosomes () ; }
Distance : 3

77
Tree	{ return false ; }
Code	{ return false ; }
Distance : 5

78
Tree	{ return chromosomes . getChromosomes ( chromosomes . getChromosomes () ) ; }
Code	{ return chromosomes . getChromosomes ( chromosomes . getChromosomes () ) ; }
Distance : 6

79
Tree	{ return new GoalType ( chromosomes ) ; }
Code	{ return new GoalType ( chromosomes ) ; }
Distance : 5

80
Tree	{ return chromosomes . getChromosomes () . getChromosomes ( chromosomes ) ; }
Code	{ return chromosomes . getChromosomes () . getChromosomes ( chromosomes ) ; }
Distance : 6

81
Tree	{ return super . iterator () ; }
Code	{ return super . iterator () ; }
Distance : 2

82
Tree	{ return ( chromosomes ) chromosomes . getChromosomes () ; }
Code	{ return ( chromosomes ) chromosomes . getChromosomes () ; }
Distance : 5

83
Tree	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } nCols
Code	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } nCols
Distance : 5

84
Tree	{ return chromosomes . iterator ( LocalizedFormats.EVALUATIONS ) ; }
Code	{ return chromosomes . iterator ( LocalizedFormats.EVALUATIONS ) ; }
Distance : 5

85
Tree	{ return STRING_CONSTANT + chromosomes . getChromosomes () ; }
Code	{ return STRING_CONSTANT + chromosomes . getChromosomes () ; }
Distance : 4

86
Tree	{ return STRING_CONSTANT + chromosomes . getChromosomes () + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + chromosomes . getChromosomes () + STRING_CONSTANT ; }
Distance : 6

87
Tree	{ return new chromosomes () . iterator () ; } nCols
Code	{ return new chromosomes () . iterator () ; } nCols
Distance : 3

88
Tree	{ return new chromosomes () . iterator () ; } k
Code	{ return new chromosomes () . iterator () ; } k
Distance : 3

89
Tree	{ return new chromosomes ( chromosomes ) ; }
Code	{ return new chromosomes ( chromosomes ) ; }
Distance : 5

90
Tree	{ return ! chromosomes . iterator () ; }
Code	{ return ! chromosomes . iterator () ; }
Distance : 2

91
Tree	{ return chromosomes . iterator () . iterator ( chromosomes ) ; }
Code	{ return chromosomes . iterator () . iterator ( chromosomes ) ; }
Distance : 6

92
Tree	{ return STRING_CONSTANT + chromosomes . iterator () ; }
Code	{ return STRING_CONSTANT + chromosomes . iterator () ; }
Distance : 3

93
Tree	{ return chromosomes . iterator ( chromosomes , chromosomes ) ; } k
Code	{ return chromosomes . iterator ( chromosomes , chromosomes ) ; } k
Distance : 8

94
Tree	{ return chromosomes . iterator ( stat.aggregateStatistics ) ; }
Code	{ return chromosomes . iterator ( stat.aggregateStatistics ) ; }
Distance : 5

95
Tree	{ return chromosomes . iterator ( chromosomes ) ; }
Code	{ return chromosomes . iterator ( chromosomes ) ; }
Distance : 5

96
Tree	{ return iterator ( chromosomes ) ; } k
Code	{ return iterator ( chromosomes ) ; } k
Distance : 6

97
Tree	{ return iterator ( chromosomes . getChromosomes () , getChromosomes () ) ; }
Code	{ return iterator ( chromosomes . getChromosomes () , getChromosomes () ) ; }
Distance : 7

98
Tree	{ return this . chromosomes . iterator () ; } nCols
Code	{ return this . chromosomes . iterator () ; } nCols
Distance : 4

99
Tree	{ return iterator ( chromosomes . iterator () , getChromosomes () ) ; }
Code	{ return iterator ( chromosomes . iterator () , getChromosomes () ) ; }
Distance : 7

100
Tree	{ return ( double [] ) chromosomes . iterator () ; }
Code	{ return ( double [] ) chromosomes . iterator () ; }
Distance : 5

101
Tree	{ return chromosomes () ; } false
Code	{ return chromosomes () ; } false
Distance : 5

102
Tree	{ return chromosomes . getChromosomes () - NUMBER_CONSTANT ; }
Code	{ return chromosomes . getChromosomes () - NUMBER_CONSTANT ; }
Distance : 5

103
Tree	{ return chromosomes . iterator ( DfpField.FLAG_INVALID ) ; }
Code	{ return chromosomes . iterator ( DfpField.FLAG_INVALID ) ; }
Distance : 5

104
Tree	{ return GoalType ; }
Code	{ return GoalType ; }
Distance : 5

105
Tree	{ return chromosomes () ; } Complex
Code	{ return chromosomes () ; } Complex
Distance : 5

106
Tree	{ return STRING_CONSTANT + chromosomes . iterator () ; } nCols
Code	{ return STRING_CONSTANT + chromosomes . iterator () ; } nCols
Distance : 4

107
Tree	{ return iterator ( chromosomes ) ; }
Code	{ return iterator ( chromosomes ) ; }
Distance : 5

108
Tree	{ return this . chromosomes . iterator () ; }
Code	{ return this . chromosomes . iterator () ; }
Distance : 3

109
Tree	{ return super . iterator () ; } nCols
Code	{ return super . iterator () ; } nCols
Distance : 3

110
Tree	{ return ( chromosomes ) chromosomes . iterator () ; }
Code	{ return ( chromosomes ) chromosomes . iterator () ; }
Distance : 4

111
Tree	{ return this . chromosomes ; } Complex
Code	{ return this . chromosomes ; } Complex
Distance : 5

112
Tree	{ return chromosomes . getChromosomes () . getChromosomes () ; }
Code	{ return chromosomes . getChromosomes () . getChromosomes () ; }
Distance : 3

113
Tree	{ return super . iterator () ; } k
Code	{ return super . iterator () ; } k
Distance : 3

114
Tree	{ return chromosomes == null ? null : chromosomes . iterator () ; }
Code	{ return chromosomes == null ? null : chromosomes . iterator () ; }
Distance : 7

115
Tree	{ return chromosomes . iterator ( chromosomes , chromosomes ) ; }
Code	{ return chromosomes . iterator ( chromosomes , chromosomes ) ; }
Distance : 7

116
Tree	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; }
Distance : 5

117
Tree	{ return chromosomes . iterator ( chromosomes . getChromosomes () ) . iterator () ; }
Code	{ return chromosomes . iterator ( chromosomes . getChromosomes () ) . iterator () ; }
Distance : 7

118
Tree	{ return chromosomes . getChromosomes () ; }
Code	{ return chromosomes . getChromosomes () ; }
Distance : 3

119
Tree	{ return NUMBER_CONSTANT ; } Complex
Code	{ return NUMBER_CONSTANT ; } Complex
Distance : 6

120
Tree	{ return new chromosomes () . iterator () ; }
Code	{ return new chromosomes () . iterator () ; }
Distance : 2

121
Tree	{ return chromosomes ; } Complex
Code	{ return chromosomes ; } Complex
Distance : 6

122
Tree	{ return new PolygonsSet ( chromosomes ) ; }
Code	{ return new PolygonsSet ( chromosomes ) ; }
Distance : 5

123
Tree	{ return NUMBER_CONSTANT ; } try
Code	{ return NUMBER_CONSTANT ; } try
Distance : 6

124
Tree	{ return chromosomes . iterator ( Boolean.FALSE ) ; }
Code	{ return chromosomes . iterator ( Boolean.FALSE ) ; }
Distance : 5

125
Tree	{ return chromosomes . getChromosomes () . < chromosomes > getChromosomes () ; }
Code	{ return chromosomes . getChromosomes () . < chromosomes > getChromosomes () ; }
Distance : 6

126
Tree	{ return chromosomes . iterator ( chromosomes . iterator () ) ; }
Code	{ return chromosomes . iterator ( chromosomes . iterator () ) ; }
Distance : 6

127
Tree	{ return chromosomes . getChromosomes () . iterator () ; }
Code	{ return chromosomes . getChromosomes () . iterator () ; }
Distance : 2

128
Tree	{ return chromosomes . iterator () . < chromosomes > iterator () ; }
Code	{ return chromosomes . iterator () . < chromosomes > iterator () ; }
Distance : 6

129
Tree	{ return ( ( chromosomes ) chromosomes ) . getChromosomes () ; }
Code	{ return ( ( chromosomes ) chromosomes ) . getChromosomes () ; }
Distance : 7

130
Tree	{ return this . chromosomes . getChromosomes () ; }
Code	{ return this . chromosomes . getChromosomes () ; }
Distance : 4

131
Tree	{ return chromosomes . getChromosomes () () chromosomes . iterator () ; }
Code	{ return chromosomes . getChromosomes () () chromosomes . iterator () ; }
Distance : 4

132
Tree	{ return ( chromosomes == null ? null : chromosomes . getChromosomes () ) ; }
Code	{ return ( chromosomes == null ? null : chromosomes . getChromosomes () ) ; }
Distance : 10

133
Tree	{ return chromosomes () ; } try
Code	{ return chromosomes () ; } try
Distance : 5

134
Tree	{ return chromosomes == break; iterator chromosomes . iterator () ; }
Code	{ return chromosomes == break; iterator chromosomes . iterator () ; }
Distance : 5

135
Tree	{ return this . chromosomes ; } try
Code	{ return this . chromosomes ; } try
Distance : 5

136
Tree	{ return STRING_CONSTANT ; } try
Code	{ return STRING_CONSTANT ; } try
Distance : 6

137
Tree	{ return chromosomes == null ? null : chromosomes . getChromosomes () ; }
Code	{ return chromosomes == null ? null : chromosomes . getChromosomes () ; }
Distance : 8

138
Tree	{ return iterator ( chromosomes . getChromosomes () , iterator () ) ; }
Code	{ return iterator ( chromosomes . getChromosomes () , iterator () ) ; }
Distance : 6

139
Tree	{ return chromosomes == super(); iterator chromosomes . iterator () ; }
Code	{ return chromosomes == super(); iterator chromosomes . iterator () ; }
Distance : 5

140
Tree	{ return new PolygonsSet () ; }
Code	{ return new PolygonsSet () ; }
Distance : 4

141
Tree	{ return iterator ( chromosomes . iterator () , chromosomes . iterator () ) ; }
Code	{ return iterator ( chromosomes . iterator () , chromosomes . iterator () ) ; }
Distance : 8

142
Tree	{ return new SubPlane () ; }
Code	{ return new SubPlane () ; }
Distance : 4

143
Tree	{ return getChromosomes ( chromosomes ) ; }
Code	{ return getChromosomes ( chromosomes ) ; }
Distance : 4

144
Tree	{ return iterator ( chromosomes . iterator () , iterator () ) ; }
Code	{ return iterator ( chromosomes . iterator () , iterator () ) ; }
Distance : 7

145
Tree	{ return ( chromosomes == null ? break; : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == null ? break; : chromosomes . iterator () ) ; }
Distance : 9

146
Tree	{ return new chromosomes ( chromosomes ) ; } Complex
Code	{ return new chromosomes ( chromosomes ) ; } Complex
Distance : 6

147
Tree	{ return chromosomes . getChromosomes ( chromosomes . getChromosomes () ) . iterator () ; }
Code	{ return chromosomes . getChromosomes ( chromosomes . getChromosomes () ) . iterator () ; }
Distance : 7

148
Tree	{ return chromosomes == null ? break; : chromosomes . iterator () ; }
Code	{ return chromosomes == null ? break; : chromosomes . iterator () ; }
Distance : 7

149
Tree	{ return iterator ( chromosomes . iterator () ) ; }
Code	{ return iterator ( chromosomes . iterator () ) ; }
Distance : 4

150
Tree	{ return super . getChromosomes () ; }
Code	{ return super . getChromosomes () ; }
Distance : 3

151
Tree	{ return chromosomes ; }
Code	{ return chromosomes ; }
Distance : 5

152
Tree	{ return chromosomes . getChromosomes ( chromosomes . iterator () ) ; }
Code	{ return chromosomes . getChromosomes ( chromosomes . iterator () ) ; }
Distance : 5

153
Tree	{ return getChromosomes ( chromosomes . getChromosomes () ) ; }
Code	{ return getChromosomes ( chromosomes . getChromosomes () ) ; }
Distance : 4

154
Tree	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } k
Code	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } k
Distance : 5

155
Tree	{ return iterator ( chromosomes . getChromosomes () , chromosomes . getChromosomes () ) ; }
Code	{ return iterator ( chromosomes . getChromosomes () , chromosomes . getChromosomes () ) ; }
Distance : 8

156
Tree	{ return chromosomes . iterator () ; } nCols
Code	{ return chromosomes . iterator () ; } nCols
Distance : 3

157
Tree	{ return chromosomes . getChromosomes () () chromosomes . getChromosomes () ; }
Code	{ return chromosomes . getChromosomes () () chromosomes . getChromosomes () ; }
Distance : 5

158
Tree	{ return true ; } nCols
Code	{ return true ; } nCols
Distance : 6

159
Tree	{ return NUMBER_CONSTANT ; } false
Code	{ return NUMBER_CONSTANT ; } false
Distance : 6

160
Tree	{ return chromosomes . iterator ( chromosomes ) ; } nCols
Code	{ return chromosomes . iterator ( chromosomes ) ; } nCols
Distance : 6

161
Tree	{ return chromosomes . getChromosomes ( chromosomes . iterator () ) . iterator () ; }
Code	{ return chromosomes . getChromosomes ( chromosomes . iterator () ) . iterator () ; }
Distance : 7

162
Tree	{ return iterator () ; } k
Code	{ return iterator () ; } k
Distance : 4

163
Tree	{ return ( ( chromosomes ) chromosomes ) . iterator () ; } nCols
Code	{ return ( ( chromosomes ) chromosomes ) . iterator () ; } nCols
Distance : 7

164
Tree	{ return chromosomes ; } try
Code	{ return chromosomes ; } try
Distance : 6

165
Tree	{ return STRING_CONSTANT + chromosomes . iterator () ; } k
Code	{ return STRING_CONSTANT + chromosomes . iterator () ; } k
Distance : 4

166
Tree	{ return chromosomes . iterator () ; } k
Code	{ return chromosomes . iterator () ; } k
Distance : 3

167
Tree	{ return iterator ( chromosomes ) ; } nCols
Code	{ return iterator ( chromosomes ) ; } nCols
Distance : 6

========================================================================


========================================================================
Example Number: 23
Parent Code is: 
if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( Precision . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (32 (800{val=Precision}) (235{val=.}) (802{val=compareTo}) (214{val=(}) (800{val=entry}) (234{val=,}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (800{val=maxUlps}) (215{val=)})) (231{val=>}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=columnsToDrop}) (235{val=.}) (802{val=add}) (214{val=(}) (800{val=i}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (32 (800{val=Precision}) (235{val=.}) (802{val=compareTo}) (214{val=(}) (800{val=entry}) (234{val=,}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (800{val=epsilon}) (215{val=)})) (231{val=>}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=columnsToDrop}) (235{val=.}) (802{val=add}) (214{val=(}) (800{val=i}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/33/parent/src_main_java_org_apache_commons_math3_optimization_linear_SimplexTableau.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 136
Wrong
========================================================================
False

0
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

1
Tree	if ( entry . compareTo ( null , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( null , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

2
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 1

3
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

4
Tree	if ( entry . Precision ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . Precision ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

5
Tree	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , mean.length , i , absolutePositivityThreshold ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , mean.length , i , absolutePositivityThreshold ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 9

6
Tree	if ( mean.length ) { columnsToDrop . add ( i ) ; }
Code	if ( mean.length ) { columnsToDrop . add ( i ) ; }
Distance : 12

7
Tree	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , d.length , i , Precision.EPSILON ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , d.length , i , Precision.EPSILON ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 9

8
Tree	if ( compareTo ( entry , entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry , entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

9
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 5

10
Tree	if ( entry . compareTo ( entry / i , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry / i , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

11
Tree	if ( entry . compareTo ( null , STRING_CONSTANT , true ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( null , STRING_CONSTANT , true ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

12
Tree	if ( compareTo ( STRING_CONSTANT , fraction.numerator , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , fraction.numerator , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

13
Tree	if ( Precision . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

14
Tree	if ( entry . compareTo ( NUMBER_CONSTANT ) . add ( fraction.numerator ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT ) . add ( fraction.numerator ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

15
Tree	if ( Precision . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

16
Tree	if ( entry . compareTo ( null , STRING_CONSTANT , true ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( entry . compareTo ( null , STRING_CONSTANT , true ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 5

17
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) - maxUlps ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) - maxUlps ) { columnsToDrop . add ( i ) ; }
Distance : 4

18
Tree	if ( entry . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

19
Tree	if ( entry . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

20
Tree	if ( entry Precision compareTo ) { columnsToDrop . add ( i ) ; }
Code	if ( entry Precision compareTo ) { columnsToDrop . add ( i ) ; }
Distance : 11

21
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , MathUtils.TWO_PI ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , MathUtils.TWO_PI ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

22
Tree	if ( i . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 10

23
Tree	if ( Precision . compareTo ( entry , this . entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , this . entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

24
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

25
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , seed.length ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , seed.length ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

26
Tree	if ( entry . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

27
Tree	if ( Precision . compareTo ( null , STRING_CONSTANT , true ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( null , STRING_CONSTANT , true ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

28
Tree	if ( Precision . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

29
Tree	if ( i . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

30
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , natural.length ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , natural.length ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

31
Tree	if ( i . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

32
Tree	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , Precision.EPSILON , i , Precision.EPSILON ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , Precision.EPSILON , i , Precision.EPSILON ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 9

33
Tree	if ( Precision . entry ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . entry ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

34
Tree	if ( entry . compareTo ( entry / entry , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry / entry , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

35
Tree	if ( Precision . compareTo ( ! ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( ! ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

36
Tree	if ( add ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( add ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

37
Tree	if ( entry . maxUlps ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . maxUlps ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

38
Tree	if ( STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 12

39
Tree	if ( Precision Precision compareTo ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision Precision compareTo ) { columnsToDrop . add ( i ) ; }
Distance : 10

40
Tree	if ( compareTo ( STRING_CONSTANT , v1.data , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , v1.data , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

41
Tree	if ( entry . entry ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . entry ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

42
Tree	if ( v.length . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( v.length . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

43
Tree	if ( entry . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( entry . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 6

44
Tree	if ( entry . compareTo ( entry / maxUlps , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry / maxUlps , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

45
Tree	if ( BigInteger.ZERO ) { columnsToDrop . add ( i ) ; }
Code	if ( BigInteger.ZERO ) { columnsToDrop . add ( i ) ; }
Distance : 12

46
Tree	if ( entry . compareTo ( ! ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( ! ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

47
Tree	if ( entry . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

48
Tree	if ( i . compareTo ( null , STRING_CONSTANT , true ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( null , STRING_CONSTANT , true ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

49
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , mean.length ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , mean.length ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

50
Tree	if ( BigInteger.ZERO != null ) { columnsToDrop . add ( i ) ; }
Code	if ( BigInteger.ZERO != null ) { columnsToDrop . add ( i ) ; }
Distance : 12

51
Tree	if ( entry Precision BigInteger.ZERO ) { columnsToDrop . add ( i ) ; }
Code	if ( entry Precision BigInteger.ZERO ) { columnsToDrop . add ( i ) ; }
Distance : 11

52
Tree	if ( entry . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

53
Tree	if ( Precision . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 9

54
Tree	if ( d.length != null ) { columnsToDrop . add ( i ) ; }
Code	if ( d.length != null ) { columnsToDrop . add ( i ) ; }
Distance : 12

55
Tree	if ( mean.length . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( mean.length . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

56
Tree	if ( Precision . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

57
Tree	if ( entry . compareTo ( STRING_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( STRING_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

58
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) - columnsToDrop ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) - columnsToDrop ) { columnsToDrop . add ( i ) ; }
Distance : 3

59
Tree	if ( STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Code	if ( STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Distance : 13

60
Tree	if ( i . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) - columnsToDrop ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) - columnsToDrop ) { columnsToDrop . add ( i ) ; }
Distance : 4

61
Tree	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , otherL.cos ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , otherL.cos ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

62
Tree	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

63
Tree	if ( compareTo ( entry . entry ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . entry ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

64
Tree	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 8

65
Tree	if ( entry . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( entry . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 6

66
Tree	if ( entry . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( entry . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 6

67
Tree	if ( STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 13

68
Tree	if ( i . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

69
Tree	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

70
Tree	if ( Precision . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

71
Tree	if ( entry . compareTo ( entry / entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry / entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

72
Tree	if ( BigInteger.ZERO . compareTo ( entry , maxUlps / columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( BigInteger.ZERO . compareTo ( entry , maxUlps / columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

73
Tree	if ( entry . compareTo ( <= ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( <= ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

74
Tree	if ( entry . compareTo ( null , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( null , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

75
Tree	if ( i . compareTo ( STRING_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( STRING_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

76
Tree	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , d.length ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , d.length ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

77
Tree	if ( entry . compareTo ( entry , entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

78
Tree	if ( entry . compareTo ( entry / maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry / maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

79
Tree	if ( entry . compareTo ( entry , this . entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , this . entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

80
Tree	if ( BigInteger.ZERO . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( BigInteger.ZERO . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

81
Tree	if ( d.length ) { columnsToDrop . add ( i ) ; }
Code	if ( d.length ) { columnsToDrop . add ( i ) ; }
Distance : 12

82
Tree	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , Precision.EPSILON ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , Precision.EPSILON ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

83
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 3

84
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) - columnsToDrop ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) - columnsToDrop ) { columnsToDrop . add ( i ) ; }
Distance : 4

85
Tree	if ( mean.length != null ) { columnsToDrop . add ( i ) ; }
Code	if ( mean.length != null ) { columnsToDrop . add ( i ) ; }
Distance : 12

86
Tree	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , mean.length ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , mean.length ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

87
Tree	if ( entry . compareTo ( entry / Precision , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry / Precision , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

88
Tree	if ( d.length . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( d.length . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

89
Tree	if ( Precision . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

90
Tree	if ( entry . compareTo ( NUMBER_CONSTANT ) . add ( NaNStrategy.FAILED ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT ) . add ( NaNStrategy.FAILED ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

91
Tree	if ( entry . compareTo ( entry / Precision , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry / Precision , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

92
Tree	if ( entry . compareTo ( entry , epsilon , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , epsilon , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

93
Tree	if ( compareTo ( entry . Precision ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . Precision ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

94
Tree	if ( BigInteger.ZERO ) { columnsToDrop . add ( entry ) ; }
Code	if ( BigInteger.ZERO ) { columnsToDrop . add ( entry ) ; }
Distance : 13

95
Tree	if ( compareTo ( STRING_CONSTANT , mean.length , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , mean.length , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

96
Tree	if ( Precision . compareTo ( null , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( null , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

97
Tree	if ( entry . compareTo ( NUMBER_CONSTANT ) . add ( Coordinates3D.ZERO ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT ) . add ( Coordinates3D.ZERO ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

98
Tree	if ( compareTo ( entry . maxUlps ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . maxUlps ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

99
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 6

100
Tree	if ( BigInteger.ZERO . compareTo ( entry , maxUlps / Precision ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( BigInteger.ZERO . compareTo ( entry , maxUlps / Precision ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

101
Tree	if ( entry . compareTo ( NUMBER_CONSTANT ) . add ( Integer.MAX_VALUE ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT ) . add ( Integer.MAX_VALUE ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

102
Tree	if ( i . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

103
Tree	if ( compareTo ( entry , epsilon , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry , epsilon , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

104
Tree	if ( add ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( add ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

105
Tree	if ( compareTo ( STRING_CONSTANT , standardDeviation.length , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , standardDeviation.length , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

106
Tree	if ( entry . compareTo ( entry / i , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry / i , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

107
Tree	if ( entry . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 10

108
Tree	if ( entry . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

109
Tree	if ( Precision . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

110
Tree	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , mean.length , i , Precision.EPSILON ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , mean.length , i , Precision.EPSILON ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 9

111
Tree	if ( entry . compareTo ( null , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( null , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

112
Tree	if ( compareTo ( entry . i ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . i ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

113
Tree	if ( entry . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 6

114
Tree	if ( Precision . compareTo ( STRING_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( STRING_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

115
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 1

116
Tree	if ( entry . compareTo ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

117
Tree	if ( BigInteger.ZERO != null ) { columnsToDrop . add ( entry ) ; }
Code	if ( BigInteger.ZERO != null ) { columnsToDrop . add ( entry ) ; }
Distance : 13

118
Tree	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

119
Tree	if ( entry Precision compareTo ) { columnsToDrop . add ( entry ) ; }
Code	if ( entry Precision compareTo ) { columnsToDrop . add ( entry ) ; }
Distance : 12

120
Tree	if ( i . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

121
Tree	if ( mean.length . compareTo ( entry , maxUlps / columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( mean.length . compareTo ( entry , maxUlps / columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

122
Tree	if ( i . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

123
Tree	if ( compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

124
Tree	if ( i . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

125
Tree	if ( entry . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( entry . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 11

126
Tree	if ( STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { Precision . add ( i ) ; }
Code	if ( STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { Precision . add ( i ) ; }
Distance : 13

127
Tree	if ( BigInteger.ZERO . compareTo ( entry , maxUlps / entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( BigInteger.ZERO . compareTo ( entry , maxUlps / entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

128
Tree	if ( entry . compareTo ( STRING_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( entry . compareTo ( STRING_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 5

129
Tree	if ( compareTo ( entry , i , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry , i , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

130
Tree	if ( add ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( add ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

131
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Distance : 6

132
Tree	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 7

133
Tree	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Code	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Distance : 7

134
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

135
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 3

========================================================================


========================================================================
Example Number: 24
Parent Code is: 
final int n1n2prod = n1 * n2 ;
-------------------------------------------------------------------------------
Child code is: 
final double n1n2prod = n1 * n2 ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (39{val=int}) (59 (800{val=n1n2prod}) (204{val==}) (27 (800{val=n1}) (202{val=*}) (800{val=n2}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (39{val=double}) (59 (800{val=n1n2prod}) (204{val==}) (27 (800{val=n1}) (202{val=*}) (800{val=n2}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/30/parent/src_main_java_org_apache_commons_math3_stat_inference_MannWhitneyUTest.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 152
Wrong
========================================================================
False

0
Tree	final long n1n2prod = ( long ) n1 * n2 ;
Code	final long n1n2prod = ( long ) n1 * n2 ;
Distance : 4

1
Tree	final long n1n2prod = n1 + NUMBER_CONSTANT ;
Code	final long n1n2prod = n1 + NUMBER_CONSTANT ;
Distance : 3

2
Tree	final long n1n2prod = NUMBER_CONSTANT * currentState.length ;
Code	final long n1n2prod = NUMBER_CONSTANT * currentState.length ;
Distance : 3

3
Tree	final long n1n2prod = n1 * n2 ;
Code	final long n1n2prod = n1 * n2 ;
Distance : 1

4
Tree	final long n1n2prod = n1 == null ;
Code	final long n1n2prod = n1 == null ;
Distance : 3

5
Tree	final long n1n2prod = null - NUMBER_CONSTANT ;
Code	final long n1n2prod = null - NUMBER_CONSTANT ;
Distance : 4

6
Tree	final long n1n2prod = ( long ) residuals.length . getTolerance () * n2 ;
Code	final long n1n2prod = ( long ) residuals.length . getTolerance () * n2 ;
Distance : 8

7
Tree	final long n1n2prod = n1 - n2 ;
Code	final long n1n2prod = n1 - n2 ;
Distance : 2

8
Tree	final long n1n2prod = n2 + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	final long n1n2prod = n2 + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 14

9
Tree	final long n1n2prod = n2 * n2 / n2 ;
Code	final long n1n2prod = n2 * n2 / n2 ;
Distance : 4

10
Tree	final long n1n2prod = NUMBER_CONSTANT - n2 ;
Code	final long n1n2prod = NUMBER_CONSTANT - n2 ;
Distance : 3

11
Tree	final long n1n2prod = FACT.length / NUMBER_CONSTANT ;
Code	final long n1n2prod = FACT.length / NUMBER_CONSTANT ;
Distance : 4

12
Tree	final long n1n2prod = long * n2 ;
Code	final long n1n2prod = long * n2 ;
Distance : 2

13
Tree	final long n1n2prod = ( long ) n2 * n2 ;
Code	final long n1n2prod = ( long ) n2 * n2 ;
Distance : 5

14
Tree	final long n1n2prod = n1 - INDEX_OFFSET ;
Code	final long n1n2prod = n1 - INDEX_OFFSET ;
Distance : 3

15
Tree	final long n1n2prod = n1 - BLOCK_SIZE ;
Code	final long n1n2prod = n1 - BLOCK_SIZE ;
Distance : 3

16
Tree	final long n1n2prod = n1 - long [ NUMBER_CONSTANT ] ;
Code	final long n1n2prod = n1 - long [ NUMBER_CONSTANT ] ;
Distance : 6

17
Tree	final long n1n2prod = coefficients.length - NUMBER_CONSTANT ;
Code	final long n1n2prod = coefficients.length - NUMBER_CONSTANT ;
Distance : 4

18
Tree	final long n1n2prod = null / n2 ;
Code	final long n1n2prod = null / n2 ;
Distance : 3

19
Tree	final long n1n2prod = long - NUMBER_CONSTANT ;
Code	final long n1n2prod = long - NUMBER_CONSTANT ;
Distance : 4

20
Tree	final long n1n2prod = n1 > n2 ;
Code	final long n1n2prod = n1 > n2 ;
Distance : 2

21
Tree	final long n1n2prod = n1 == currentState ;
Code	final long n1n2prod = n1 == currentState ;
Distance : 3

22
Tree	final long n1n2prod = n1 + n2 ;
Code	final long n1n2prod = n1 + n2 ;
Distance : 2

23
Tree	final long n1n2prod = false - n2 ;
Code	final long n1n2prod = false - n2 ;
Distance : 3

24
Tree	final long n1n2prod = n2 ;
Code	final long n1n2prod = n2 ;
Distance : 3

25
Tree	final long n1n2prod = n1 - currentState [ NUMBER_CONSTANT ] ;
Code	final long n1n2prod = n1 - currentState [ NUMBER_CONSTANT ] ;
Distance : 6

26
Tree	final long n1n2prod = long [ n2 ] - NUMBER_CONSTANT ;
Code	final long n1n2prod = long [ n2 ] - NUMBER_CONSTANT ;
Distance : 6

27
Tree	final long n1n2prod = n1 * n2 * n2 ;
Code	final long n1n2prod = n1 * n2 * n2 ;
Distance : 3

28
Tree	final long n1n2prod = n1 - BoundaryProjector [ NUMBER_CONSTANT ] ;
Code	final long n1n2prod = n1 - BoundaryProjector [ NUMBER_CONSTANT ] ;
Distance : 6

29
Tree	final long n1n2prod = false - NUMBER_CONSTANT ;
Code	final long n1n2prod = false - NUMBER_CONSTANT ;
Distance : 4

30
Tree	final long n1n2prod = n1n2prod + NUMBER_CONSTANT ;
Code	final long n1n2prod = n1n2prod + NUMBER_CONSTANT ;
Distance : 4

31
Tree	final long n1n2prod = n1 * n2 * n2 ;
Code	final long n1n2prod = n1 * n2 * n2 ;
Distance : 3

32
Tree	final long n1n2prod = NUMBER_CONSTANT * ResizableDoubleArray.ExpansionMode.ADDITIVE ;
Code	final long n1n2prod = NUMBER_CONSTANT * ResizableDoubleArray.ExpansionMode.ADDITIVE ;
Distance : 3

33
Tree	final int n1n2prod = n1 * n2 / n2 ;
Code	final int n1n2prod = n1 * n2 / n2 ;
Distance : 3

34
Tree	final long n1n2prod = n1n2prod * n2 / n2 ;
Code	final long n1n2prod = n1n2prod * n2 / n2 ;
Distance : 4

35
Tree	final long n1n2prod = NUMBER_CONSTANT ;
Code	final long n1n2prod = NUMBER_CONSTANT ;
Distance : 4

36
Tree	final long n1n2prod = n2 * n2 ;
Code	final long n1n2prod = n2 * n2 ;
Distance : 2

37
Tree	final int n1n2prod = ( long ) n1 * n2 ;
Code	final int n1n2prod = ( long ) n1 * n2 ;
Distance : 4

38
Tree	final long n1n2prod = null * n2 * n2 ;
Code	final long n1n2prod = null * n2 * n2 ;
Distance : 4

39
Tree	final long n1n2prod = n1 * n2 / n2 ;
Code	final long n1n2prod = n1 * n2 / n2 ;
Distance : 3

40
Tree	final long n1n2prod = n1 - BoundaryProjector [ n2 ] ;
Code	final long n1n2prod = n1 - BoundaryProjector [ n2 ] ;
Distance : 5

41
Tree	final long n1n2prod = n1 ;
Code	final long n1n2prod = n1 ;
Distance : 3

42
Tree	final long n1n2prod = ( long ) observed1.length . get () * n2 ;
Code	final long n1n2prod = ( long ) observed1.length . get () * n2 ;
Distance : 8

43
Tree	final long n1n2prod = n1 - currentState ;
Code	final long n1n2prod = n1 - currentState ;
Distance : 3

44
Tree	final long n1n2prod = NUMBER_CONSTANT * n2 * n2 * currentState.length ;
Code	final long n1n2prod = NUMBER_CONSTANT * n2 * n2 * currentState.length ;
Distance : 6

45
Tree	final long n1n2prod = NUMBER_CONSTANT * n2 * n2 * restrictToNonNegative ;
Code	final long n1n2prod = NUMBER_CONSTANT * n2 * n2 * restrictToNonNegative ;
Distance : 6

46
Tree	final long n1n2prod = long [ n2 ] + STRING_CONSTANT + ^ [ n1n2prod ] ;
Code	final long n1n2prod = long [ n2 ] + STRING_CONSTANT + ^ [ n1n2prod ] ;
Distance : 11

47
Tree	final long n1n2prod = n2 > n2 ;
Code	final long n1n2prod = n2 > n2 ;
Distance : 3

48
Tree	final long n1n2prod = n1 > > NUMBER_CONSTANT ;
Code	final long n1n2prod = n1 > > NUMBER_CONSTANT ;
Distance : 4

49
Tree	final long n1n2prod = NUMBER_CONSTANT + n1 ;
Code	final long n1n2prod = NUMBER_CONSTANT + n1 ;
Distance : 4

50
Tree	final long n1n2prod = n1 == n2 ;
Code	final long n1n2prod = n1 == n2 ;
Distance : 2

51
Tree	final long n1n2prod = n1 - long [ n2 ] ;
Code	final long n1n2prod = n1 - long [ n2 ] ;
Distance : 5

52
Tree	final long n1n2prod = n1n2prod ;
Code	final long n1n2prod = n1n2prod ;
Distance : 4

53
Tree	final int n1n2prod = n1 + NUMBER_CONSTANT ;
Code	final int n1n2prod = n1 + NUMBER_CONSTANT ;
Distance : 3

54
Tree	final long n1n2prod = n1 == currentState.length ;
Code	final long n1n2prod = n1 == currentState.length ;
Distance : 3

55
Tree	final long n1n2prod = long [ n2 ] ;
Code	final long n1n2prod = long [ n2 ] ;
Distance : 4

56
Tree	final long n1n2prod = n1n2prod * n2 ;
Code	final long n1n2prod = n1n2prod * n2 ;
Distance : 2

57
Tree	final long n1n2prod = org.apache.commons.math4.linear.SingularMatrixException / NUMBER_CONSTANT ;
Code	final long n1n2prod = org.apache.commons.math4.linear.SingularMatrixException / NUMBER_CONSTANT ;
Distance : 4

58
Tree	final long n1n2prod = n1n2prod - n2 ;
Code	final long n1n2prod = n1n2prod - n2 ;
Distance : 3

59
Tree	final long n1n2prod = NUMBER_CONSTANT * natural.length ;
Code	final long n1n2prod = NUMBER_CONSTANT * natural.length ;
Distance : 3

60
Tree	final long n1n2prod = incrementAndGet - NUMBER_CONSTANT ;
Code	final long n1n2prod = incrementAndGet - NUMBER_CONSTANT ;
Distance : 4

61
Tree	final long n1n2prod = long / n1n2prod ;
Code	final long n1n2prod = long / n1n2prod ;
Distance : 4

62
Tree	final long n1n2prod = coefficients.length / NUMBER_CONSTANT ;
Code	final long n1n2prod = coefficients.length / NUMBER_CONSTANT ;
Distance : 4

63
Tree	final long n1n2prod = coefficients.length . get () - NUMBER_CONSTANT ;
Code	final long n1n2prod = coefficients.length . get () - NUMBER_CONSTANT ;
Distance : 7

64
Tree	final long n1n2prod = false + n2 ;
Code	final long n1n2prod = false + n2 ;
Distance : 3

65
Tree	final long n1n2prod = n1 - n2 ;
Code	final long n1n2prod = n1 - n2 ;
Distance : 2

66
Tree	final long n1n2prod = n2 > > NUMBER_CONSTANT ;
Code	final long n1n2prod = n2 > > NUMBER_CONSTANT ;
Distance : 5

67
Tree	final long n1n2prod = FACT.length - NUMBER_CONSTANT ;
Code	final long n1n2prod = FACT.length - NUMBER_CONSTANT ;
Distance : 4

68
Tree	final long n1n2prod = n1 - gcd [ NUMBER_CONSTANT ] ;
Code	final long n1n2prod = n1 - gcd [ NUMBER_CONSTANT ] ;
Distance : 6

69
Tree	final int n1n2prod = n1 * n2 ;
Code	final int n1n2prod = n1 * n2 ;
Distance : 1

70
Tree	final long n1n2prod = n1 [ n2 ] - NUMBER_CONSTANT ;
Code	final long n1n2prod = n1 [ n2 ] - NUMBER_CONSTANT ;
Distance : 5

71
Tree	final long n1n2prod = NUMBER_CONSTANT - n1n2prod ;
Code	final long n1n2prod = NUMBER_CONSTANT - n1n2prod ;
Distance : 4

72
Tree	final long n1n2prod = long - n2 ;
Code	final long n1n2prod = long - n2 ;
Distance : 3

73
Tree	final long n1n2prod = false * n2 * n2 ;
Code	final long n1n2prod = false * n2 * n2 ;
Distance : 4

74
Tree	final long n1n2prod = false + n2 ;
Code	final long n1n2prod = false + n2 ;
Distance : 3

75
Tree	final long n1n2prod = n1n2prod > n2 ;
Code	final long n1n2prod = n1n2prod > n2 ;
Distance : 3

76
Tree	final long n1n2prod = null + n2 ;
Code	final long n1n2prod = null + n2 ;
Distance : 3

77
Tree	final long n1n2prod = n1 [ n2 ] - long [ n2 ] ;
Code	final long n1n2prod = n1 [ n2 ] - long [ n2 ] ;
Distance : 8

78
Tree	final long n1n2prod = NUMBER_CONSTANT / n2 ;
Code	final long n1n2prod = NUMBER_CONSTANT / n2 ;
Distance : 3

79
Tree	final long n1n2prod = n1 [ n2 ] - long [ n1n2prod ] ;
Code	final long n1n2prod = n1 [ n2 ] - long [ n1n2prod ] ;
Distance : 8

80
Tree	final long n1n2prod = long [ n2 ] - long [ n1n2prod ] ;
Code	final long n1n2prod = long [ n2 ] - long [ n1n2prod ] ;
Distance : 9

81
Tree	final long n1n2prod = NUMBER_CONSTANT / n1n2prod ;
Code	final long n1n2prod = NUMBER_CONSTANT / n1n2prod ;
Distance : 4

82
Tree	final long n1n2prod = n1n2prod ^ n2 ;
Code	final long n1n2prod = n1n2prod ^ n2 ;
Distance : 3

83
Tree	final long n1n2prod = n1n2prod + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	final long n1n2prod = n1n2prod + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 14

84
Tree	final long n1n2prod = long + n2 ;
Code	final long n1n2prod = long + n2 ;
Distance : 3

85
Tree	final long n1n2prod = n1 + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	final long n1n2prod = n1 + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

86
Tree	final long n1n2prod = n1 - long ;
Code	final long n1n2prod = n1 - long ;
Distance : 3

87
Tree	final long n1n2prod = n1n2prod > > NUMBER_CONSTANT ;
Code	final long n1n2prod = n1n2prod > > NUMBER_CONSTANT ;
Distance : 5

88
Tree	final long n1n2prod = n1n2prod * n2 ;
Code	final long n1n2prod = n1n2prod * n2 ;
Distance : 2

89
Tree	final int n1n2prod = n1 + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	final int n1n2prod = n1 + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

90
Tree	final long n1n2prod = NUMBER_CONSTANT + n2 ;
Code	final long n1n2prod = NUMBER_CONSTANT + n2 ;
Distance : 3

91
Tree	final long n1n2prod = ( long ) residuals.length . get () * n2 ;
Code	final long n1n2prod = ( long ) residuals.length . get () * n2 ;
Distance : 8

92
Tree	final long n1n2prod = null * n2 ;
Code	final long n1n2prod = null * n2 ;
Distance : 2

93
Tree	final long n1n2prod = n2 - n2 ;
Code	final long n1n2prod = n2 - n2 ;
Distance : 3

94
Tree	final long n1n2prod = ( long ) residuals.length . getRandomGenerator () * n2 ;
Code	final long n1n2prod = ( long ) residuals.length . getRandomGenerator () * n2 ;
Distance : 8

95
Tree	final long n1n2prod = n2 + NUMBER_CONSTANT ;
Code	final long n1n2prod = n2 + NUMBER_CONSTANT ;
Distance : 4

96
Tree	final long n1n2prod = incrementAndGet / NUMBER_CONSTANT ;
Code	final long n1n2prod = incrementAndGet / NUMBER_CONSTANT ;
Distance : 4

97
Tree	final long n1n2prod = n2 * n2 * n2 ;
Code	final long n1n2prod = n2 * n2 * n2 ;
Distance : 4

98
Tree	final int n1n2prod = NUMBER_CONSTANT / n2 ;
Code	final int n1n2prod = NUMBER_CONSTANT / n2 ;
Distance : 3

99
Tree	final long n1n2prod = n1 [ n2 ] ;
Code	final long n1n2prod = n1 [ n2 ] ;
Distance : 3

100
Tree	final long n1n2prod = NUMBER_CONSTANT / n1 ;
Code	final long n1n2prod = NUMBER_CONSTANT / n1 ;
Distance : 4

101
Tree	final int n1n2prod = n1 > > NUMBER_CONSTANT ;
Code	final int n1n2prod = n1 > > NUMBER_CONSTANT ;
Distance : 4

102
Tree	final long n1n2prod = n1 + n2 ;
Code	final long n1n2prod = n1 + n2 ;
Distance : 2

103
Tree	final long n1n2prod = Gaussian [ n2 ] ;
Code	final long n1n2prod = Gaussian [ n2 ] ;
Distance : 4

104
Tree	final long n1n2prod = coefficients.length . getDefaultNumberFormat () - NUMBER_CONSTANT ;
Code	final long n1n2prod = coefficients.length . getDefaultNumberFormat () - NUMBER_CONSTANT ;
Distance : 7

105
Tree	final long n1n2prod = NUMBER_CONSTANT * n2 * n2 * residuals.length ;
Code	final long n1n2prod = NUMBER_CONSTANT * n2 * n2 * residuals.length ;
Distance : 6

106
Tree	final long n1n2prod = coefficients.length . gcd () - NUMBER_CONSTANT ;
Code	final long n1n2prod = coefficients.length . gcd () - NUMBER_CONSTANT ;
Distance : 7

107
Tree	final long n1n2prod = n1 * n2 ;
Code	final long n1n2prod = n1 * n2 ;
Distance : 1

108
Tree	final long n1n2prod = NUMBER_CONSTANT + n1n2prod ;
Code	final long n1n2prod = NUMBER_CONSTANT + n1n2prod ;
Distance : 4

109
Tree	final long n1n2prod = null + n2 ;
Code	final long n1n2prod = null + n2 ;
Distance : 3

110
Tree	final long n1n2prod = NUMBER_CONSTANT * FACT.length ;
Code	final long n1n2prod = NUMBER_CONSTANT * FACT.length ;
Distance : 3

111
Tree	final long n1n2prod = ( long ) n1 * n1n2prod ;
Code	final long n1n2prod = ( long ) n1 * n1n2prod ;
Distance : 5

112
Tree	final long n1n2prod = long * n2 * n2 ;
Code	final long n1n2prod = long * n2 * n2 ;
Distance : 4

113
Tree	final long n1n2prod = NUMBER_CONSTANT / currentState.length . gcd () ;
Code	final long n1n2prod = NUMBER_CONSTANT / currentState.length . gcd () ;
Distance : 7

114
Tree	final long n1n2prod = long + n2 ;
Code	final long n1n2prod = long + n2 ;
Distance : 3

115
Tree	final long n1n2prod = FACT.length . gcd () - NUMBER_CONSTANT ;
Code	final long n1n2prod = FACT.length . gcd () - NUMBER_CONSTANT ;
Distance : 7

116
Tree	final long n1n2prod = n1 ^ n2 ;
Code	final long n1n2prod = n1 ^ n2 ;
Distance : 2

117
Tree	final long n1n2prod = n1 - gcd [ n2 ] ;
Code	final long n1n2prod = n1 - gcd [ n2 ] ;
Distance : 5

118
Tree	final long n1n2prod = NUMBER_CONSTANT * n2 * n2 * n1n2prod ;
Code	final long n1n2prod = NUMBER_CONSTANT * n2 * n2 * n1n2prod ;
Distance : 6

119
Tree	final long n1n2prod = n1 * n2 ;
Code	final long n1n2prod = n1 * n2 ;
Distance : 1

120
Tree	final long n1n2prod = n1 [ n2 ] + STRING_CONSTANT + dataV [ n1n2prod ] ;
Code	final long n1n2prod = n1 [ n2 ] + STRING_CONSTANT + dataV [ n1n2prod ] ;
Distance : 10

121
Tree	final long n1n2prod = org.apache.commons.math4.linear.SingularMatrixException - NUMBER_CONSTANT ;
Code	final long n1n2prod = org.apache.commons.math4.linear.SingularMatrixException - NUMBER_CONSTANT ;
Distance : 4

122
Tree	final long n1n2prod = long [ n2 ] - long [ n2 ] ;
Code	final long n1n2prod = long [ n2 ] - long [ n2 ] ;
Distance : 9

123
Tree	final long n1n2prod = long [ n2 ] + STRING_CONSTANT + dataV [ n1n2prod ] ;
Code	final long n1n2prod = long [ n2 ] + STRING_CONSTANT + dataV [ n1n2prod ] ;
Distance : 11

124
Tree	final long n1n2prod = NUMBER_CONSTANT / currentState.length . getRandomGenerator () ;
Code	final long n1n2prod = NUMBER_CONSTANT / currentState.length . getRandomGenerator () ;
Distance : 7

125
Tree	final long n1n2prod = coefficients.length [ n2 ] - NUMBER_CONSTANT ;
Code	final long n1n2prod = coefficients.length [ n2 ] - NUMBER_CONSTANT ;
Distance : 6

126
Tree	final long n1n2prod = NUMBER_CONSTANT / currentState.length . derivative () ;
Code	final long n1n2prod = NUMBER_CONSTANT / currentState.length . derivative () ;
Distance : 7

127
Tree	final long n1n2prod = false * n2 ;
Code	final long n1n2prod = false * n2 ;
Distance : 2

128
Tree	final int n1n2prod = NUMBER_CONSTANT ;
Code	final int n1n2prod = NUMBER_CONSTANT ;
Distance : 4

129
Tree	final long n1n2prod = null - n2 ;
Code	final long n1n2prod = null - n2 ;
Distance : 3

130
Tree	final long n1n2prod = long / n2 ;
Code	final long n1n2prod = long / n2 ;
Distance : 3

131
Tree	final long n1n2prod = null / n1n2prod ;
Code	final long n1n2prod = null / n1n2prod ;
Distance : 4

132
Tree	final long n1n2prod = coefficients.length [ n2 ] ;
Code	final long n1n2prod = coefficients.length [ n2 ] ;
Distance : 4

133
Tree	final long n1n2prod = n1 - NUMBER_CONSTANT ;
Code	final long n1n2prod = n1 - NUMBER_CONSTANT ;
Distance : 3

134
Tree	final long n1n2prod = NUMBER_CONSTANT / currentState.length . get () ;
Code	final long n1n2prod = NUMBER_CONSTANT / currentState.length . get () ;
Distance : 7

135
Tree	final long n1n2prod = n1 - n1n2prod ;
Code	final long n1n2prod = n1 - n1n2prod ;
Distance : 3

136
Tree	final long n1n2prod = n1 - currentState [ n2 ] ;
Code	final long n1n2prod = n1 - currentState [ n2 ] ;
Distance : 5

137
Tree	final long n1n2prod = Gaussian [ n2 ] - NUMBER_CONSTANT ;
Code	final long n1n2prod = Gaussian [ n2 ] - NUMBER_CONSTANT ;
Distance : 6

138
Tree	final int n1n2prod = n1 ^ n2 ;
Code	final int n1n2prod = n1 ^ n2 ;
Distance : 2

139
Tree	final long n1n2prod = NUMBER_CONSTANT - n1 ;
Code	final long n1n2prod = NUMBER_CONSTANT - n1 ;
Distance : 4

140
Tree	final long n1n2prod = long [ n2 ] + STRING_CONSTANT + RandomGenerator [ n1n2prod ] ;
Code	final long n1n2prod = long [ n2 ] + STRING_CONSTANT + RandomGenerator [ n1n2prod ] ;
Distance : 11

141
Tree	final int n1n2prod = NUMBER_CONSTANT + n2 ;
Code	final int n1n2prod = NUMBER_CONSTANT + n2 ;
Distance : 3

142
Tree	final long n1n2prod = n1n2prod * n2 * n2 ;
Code	final long n1n2prod = n1n2prod * n2 * n2 ;
Distance : 4

143
Tree	final long n1n2prod = n2 ^ n2 ;
Code	final long n1n2prod = n2 ^ n2 ;
Distance : 3

144
Tree	final int n1n2prod = n1 > n2 ;
Code	final int n1n2prod = n1 > n2 ;
Distance : 2

145
Tree	final int n1n2prod = n1 ;
Code	final int n1n2prod = n1 ;
Distance : 3

146
Tree	final long n1n2prod = n2 * n2 ;
Code	final long n1n2prod = n2 * n2 ;
Distance : 2

147
Tree	final long n2 = NUMBER_CONSTANT ;
Code	final long n2 = NUMBER_CONSTANT ;
Distance : 5

148
Tree	final long n1n2prod = n1 * n2 * n1n2prod ;
Code	final long n1n2prod = n1 * n2 * n1n2prod ;
Distance : 3

149
Tree	final int n1n2prod = NUMBER_CONSTANT - n1n2prod ;
Code	final int n1n2prod = NUMBER_CONSTANT - n1n2prod ;
Distance : 4

150
Tree	final long n1 = NUMBER_CONSTANT ;
Code	final long n1 = NUMBER_CONSTANT ;
Distance : 5

151
Tree	final int n1n2prod = n1 * n2 ;
Code	final int n1n2prod = n1 * n2 ;
Distance : 1

========================================================================


========================================================================
Example Number: 25
Parent Code is: 
if ( y >= TWO_POWER_52  y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( y >= TWO_POWER_53  y <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=y}) (251{val=>=}) (800{val=TWO_POWER_52})) (250{val=||}) (27 (800{val=y}) (252{val=<=}) (38 (201{val=-}) (800{val=TWO_POWER_52})))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=pow}) (214{val=(}) (38 (201{val=-}) (800{val=x})) (234{val=,}) (800{val=y}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=y}) (251{val=>=}) (800{val=TWO_POWER_53})) (250{val=||}) (27 (800{val=y}) (252{val=<=}) (38 (201{val=-}) (800{val=TWO_POWER_53})))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=pow}) (214{val=(}) (38 (201{val=-}) (800{val=x})) (234{val=,}) (800{val=y}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/15/parent/src_main_java_org_apache_commons_math3_util_FastMath.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 84
Wrong
========================================================================
False

0
Tree	if ( b.length != null y x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( b.length != null y x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

1
Tree	if ( y != null TWO_POWER_52 x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y != null TWO_POWER_52 x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

2
Tree	if ( y >= NUMBER_CONSTANT y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

3
Tree	if ( d.length != null TWO_POWER_52 x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( d.length != null TWO_POWER_52 x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 6

4
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

5
Tree	if ( y >= NUMBER_CONSTANT y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

6
Tree	if ( y != - TWO_POWER_52 y x < Coordinates3D.ZERO ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y x < Coordinates3D.ZERO ) { return pow ( - x , y ) ; }
Distance : 6

7
Tree	if ( y >= TWO_POWER_52 y x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

8
Tree	if ( y >= MACH_PREC y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= MACH_PREC y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

9
Tree	if ( y >= countSum2 y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= countSum2 y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

10
Tree	if ( y >= NUMBER_CONSTANT y x != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y x != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

11
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

12
Tree	if ( y != - StepNormalizerMode.MULTIPLES y x < StepNormalizerMode.MULTIPLES ) { return pow ( - x , y ) ; }
Code	if ( y != - StepNormalizerMode.MULTIPLES y x < StepNormalizerMode.MULTIPLES ) { return pow ( - x , y ) ; }
Distance : 6

13
Tree	if ( y > - StepNormalizerMode.MULTIPLES y x < Double.MIN_VALUE ) { return pow ( - x , y ) ; }
Code	if ( y > - StepNormalizerMode.MULTIPLES y x < Double.MIN_VALUE ) { return pow ( - x , y ) ; }
Distance : 6

14
Tree	if ( y >= TWO_POWER_52 y y != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y y != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

15
Tree	if ( y != - Precision.SAFE_MIN y x < StepNormalizerMode.MULTIPLES ) { return pow ( - x , y ) ; }
Code	if ( y != - Precision.SAFE_MIN y x < StepNormalizerMode.MULTIPLES ) { return pow ( - x , y ) ; }
Distance : 6

16
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

17
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

18
Tree	if ( y > - Double.MIN_VALUE y x < Double.MIN_VALUE ) { return pow ( - x , y ) ; }
Code	if ( y > - Double.MIN_VALUE y x < Double.MIN_VALUE ) { return pow ( - x , y ) ; }
Distance : 6

19
Tree	if ( y != null >= x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y != null >= x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 5

20
Tree	if ( y == StepNormalizerMode.MULTIPLES y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y == StepNormalizerMode.MULTIPLES y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

21
Tree	if ( y >= TWO_POWER_52 y x != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y x != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

22
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

23
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

24
Tree	if ( y != - TWO_POWER_52 y x < StepNormalizerMode.MULTIPLES ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y x < StepNormalizerMode.MULTIPLES ) { return pow ( - x , y ) ; }
Distance : 6

25
Tree	if ( y > - StepNormalizerMode.MULTIPLES y x < StepNormalizerMode.MULTIPLES ) { return pow ( - x , y ) ; }
Code	if ( y > - StepNormalizerMode.MULTIPLES y x < StepNormalizerMode.MULTIPLES ) { return pow ( - x , y ) ; }
Distance : 6

26
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

27
Tree	if ( y >= pow ( y , NUMBER_CONSTANT , y ) y x < pow ( - x , y ) * y ) {}
Code	if ( y >= pow ( y , NUMBER_CONSTANT , y ) y x < pow ( - x , y ) * y ) {}
Distance : 13

28
Tree	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - x ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - x ) { return pow ( - x , y ) ; }
Distance : 3

29
Tree	if ( y > - TWO_POWER_52 y x < StepNormalizerMode.MULTIPLES ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y x < StepNormalizerMode.MULTIPLES ) { return pow ( - x , y ) ; }
Distance : 6

30
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

31
Tree	if ( y == sumObserved y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y == sumObserved y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

32
Tree	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

33
Tree	if ( unequalCounts != null y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( unequalCounts != null y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 5

34
Tree	if ( y > - TWO_POWER_52 y x < Coordinates3D.ZERO ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y x < Coordinates3D.ZERO ) { return pow ( - x , y ) ; }
Distance : 6

35
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

36
Tree	if ( x >= NUMBER_CONSTANT y x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( x >= NUMBER_CONSTANT y x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

37
Tree	if ( y != - StepNormalizerMode.MULTIPLES y x < Double.MIN_VALUE ) { return pow ( - x , y ) ; }
Code	if ( y != - StepNormalizerMode.MULTIPLES y x < Double.MIN_VALUE ) { return pow ( - x , y ) ; }
Distance : 6

38
Tree	if ( y != - PivotSelectionRule.BLAND y x < StepNormalizerMode.MULTIPLES ) { return pow ( - x , y ) ; }
Code	if ( y != - PivotSelectionRule.BLAND y x < StepNormalizerMode.MULTIPLES ) { return pow ( - x , y ) ; }
Distance : 6

39
Tree	if ( y == null y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y == null y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

40
Tree	if ( y >= pow ( y , NUMBER_CONSTANT , y ) <= x < pow ( - x , y ) * y ) %
Code	if ( y >= pow ( y , NUMBER_CONSTANT , y ) <= x < pow ( - x , y ) * y ) %
Distance : 13

41
Tree	if ( y == ! y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y == ! y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

42
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

43
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

44
Tree	if ( y >= TWO_POWER_52 y y != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y y != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

45
Tree	if ( y >= TWO_POWER_52 y x != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y x != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

46
Tree	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

47
Tree	if ( y >= NUMBER_CONSTANT y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

48
Tree	if ( y >= pow ( y , NUMBER_CONSTANT , y ) <= x < pow ( - x , y ) * y ) ^
Code	if ( y >= pow ( y , NUMBER_CONSTANT , y ) <= x < pow ( - x , y ) * y ) ^
Distance : 13

49
Tree	if ( y >= NUMBER_CONSTANT y y != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y y != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

50
Tree	if ( y >= NUMBER_CONSTANT y y != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y y != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

51
Tree	if ( y > - Double.MIN_VALUE y x < StepNormalizerMode.MULTIPLES ) { return pow ( - x , y ) ; }
Code	if ( y > - Double.MIN_VALUE y x < StepNormalizerMode.MULTIPLES ) { return pow ( - x , y ) ; }
Distance : 6

52
Tree	if ( y >= NUMBER_CONSTANT y x != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y x != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

53
Tree	if ( y != - TWO_POWER_52 y x < countSum2 ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y x < countSum2 ) { return pow ( - x , y ) ; }
Distance : 6

54
Tree	if ( unequalCounts != null >= x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( unequalCounts != null >= x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 6

55
Tree	if ( y >= NUMBER_CONSTANT y x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

56
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

57
Tree	if ( b.length != null TWO_POWER_52 x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( b.length != null TWO_POWER_52 x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 6

58
Tree	if ( y > - TWO_POWER_52 y x < countSum2 ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y x < countSum2 ) { return pow ( - x , y ) ; }
Distance : 6

59
Tree	if ( y >= TWO_POWER_52 y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

60
Tree	if ( x >= TWO_POWER_52 y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( x >= TWO_POWER_52 y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

61
Tree	if ( d.length != null y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( d.length != null y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 5

62
Tree	if ( y >= TWO_POWER_52 y y != - NUMBER_CONSTANT ) { return pow ( - TWO_POWER_52 , y ) ; }
Code	if ( y >= TWO_POWER_52 y y != - NUMBER_CONSTANT ) { return pow ( - TWO_POWER_52 , y ) ; }
Distance : 5

63
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

64
Tree	if ( y > - TWO_POWER_52 y x < Double.MIN_VALUE ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y x < Double.MIN_VALUE ) { return pow ( - x , y ) ; }
Distance : 6

65
Tree	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

66
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

67
Tree	if ( y >= TWO_POWER_52 y y != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y y != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

68
Tree	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

69
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return x . pow ( x , d.length , y , LocalizedFormats.OVERFLOW_IN_ADDITION ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return x . pow ( x , d.length , y , LocalizedFormats.OVERFLOW_IN_ADDITION ) ; }
Distance : 10

70
Tree	if ( x >= NUMBER_CONSTANT y x != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( x >= NUMBER_CONSTANT y x != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

71
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return x . pow ( x , d.length , y , line.sin ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return x . pow ( x , d.length , y , line.sin ) ; }
Distance : 10

72
Tree	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

73
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return x . pow ( x , d.length , y , v2.y ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return x . pow ( x , d.length , y , v2.y ) ; }
Distance : 10

74
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

75
Tree	if ( y != - TWO_POWER_52 y x < Double.MIN_VALUE ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y x < Double.MIN_VALUE ) { return pow ( - x , y ) ; }
Distance : 6

76
Tree	if ( y >= pow ( y , NUMBER_CONSTANT , y ) y x < pow ( - x , y ) * y ) ?
Code	if ( y >= pow ( y , NUMBER_CONSTANT , y ) y x < pow ( - x , y ) * y ) ?
Distance : 13

77
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return x . pow ( x , d.length , y , GoalType.MAXIMIZE ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return x . pow ( x , d.length , y , GoalType.MAXIMIZE ) ; }
Distance : 10

78
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

79
Tree	if ( y >= NUMBER_CONSTANT y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

80
Tree	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - y ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - y ) { return pow ( - x , y ) ; }
Distance : 3

81
Tree	if ( y >= variablesToInclude.length y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= variablesToInclude.length y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

82
Tree	if ( y >= degree y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= degree y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

83
Tree	if ( y >= NUMBER_CONSTANT y y != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y y != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

========================================================================


========================================================================
Example Number: 26
Parent Code is: 
FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
-------------------------------------------------------------------------------
Child code is: 
FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - NUMBER_CONSTANT * dim ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (32 (800{val=FastMath}) (235{val=.}) (802{val=pow}) (214{val=(}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (40{val=FastMath.PI})) (234{val=,}) (27 (38 (201{val=-}) (800{val=dim})) (203{val=/}) (34{val=NUMBER_CONSTANT})) (215{val=)})) (202{val=*}) (32 (800{val=FastMath}) (235{val=.}) (802{val=pow}) (214{val=(}) (800{val=covarianceMatrixDeterminant}) (234{val=,}) (38 (201{val=-}) (34{val=NUMBER_CONSTANT})) (215{val=)})) (202{val=*}) (32 (802{val=getExponentTerm}) (214{val=(}) (800{val=vals}) (215{val=)}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (32 (800{val=FastMath}) (235{val=.}) (802{val=pow}) (214{val=(}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (40{val=FastMath.PI})) (234{val=,}) (27 (38 (201{val=-}) (34{val=NUMBER_CONSTANT})) (202{val=*}) (800{val=dim})) (215{val=)})) (202{val=*}) (32 (800{val=FastMath}) (235{val=.}) (802{val=pow}) (214{val=(}) (800{val=covarianceMatrixDeterminant}) (234{val=,}) (38 (201{val=-}) (34{val=NUMBER_CONSTANT})) (215{val=)})) (202{val=*}) (32 (802{val=getExponentTerm}) (214{val=(}) (800{val=vals}) (215{val=)}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/11/parent/src_main_java_org_apache_commons_math3_distribution_MultivariateNormalDistribution.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 4
Wrong
========================================================================
False

0
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 3

1
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( FastMath , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( FastMath , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

2
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

3
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

========================================================================


========================================================================
Example Number: 27
Parent Code is: 
iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ;
-------------------------------------------------------------------------------
Child code is: 
iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (7 (800{val=iterations}) (204{val==}) (14 (304{val=new}) (43 (801{val=Incrementor})) (214{val=(}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (14 (304{val=new}) (43 (801{val=MaxIterCallback})) (216{val=()})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (7 (800{val=iterations}) (204{val==}) (14 (304{val=new}) (43 (801{val=Incrementor})) (214{val=(}) (40{val=Integer.MAX_VALUE}) (234{val=,}) (14 (304{val=new}) (43 (801{val=MaxIterCallback})) (216{val=()})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/6/parent/src_main_java_org_apache_commons_math3_optim_BaseOptimizer.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 112
Correct
========================================================================
True

0
Tree	iterations = new Incrementor ( true ) ;
Code	iterations = new Incrementor ( true ) ;
Distance : 5

1
Tree	iterations = new Incrementor ( this , Integer.MAX_VALUE ) ;
Code	iterations = new Incrementor ( this , Integer.MAX_VALUE ) ;
Distance : 4

2
Tree	iterations = new Incrementor ( false ) ;
Code	iterations = new Incrementor ( false ) ;
Distance : 5

3
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback < iterations > () , super(); ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback < iterations > () , super(); ) ;
Distance : 6

4
Tree	iterations = new Incrementor ( new MaxIterCallback ( continue; ) , Integer.MAX_VALUE ) ;
Code	iterations = new Incrementor ( new MaxIterCallback ( continue; ) , Integer.MAX_VALUE ) ;
Distance : 7

5
Tree	iterations = new Incrementor < iterations > ( iterations , true ) ;
Code	iterations = new Incrementor < iterations > ( iterations , true ) ;
Distance : 7

6
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback < iterations > () , false ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback < iterations > () , false ) ;
Distance : 6

7
Tree	iterations = new Incrementor ( new MaxIterCallback ( continue; ) ) ;
Code	iterations = new Incrementor ( new MaxIterCallback ( continue; ) ) ;
Distance : 5

8
Tree	iterations = new Incrementor ( new MaxIterCallback < iterations > () , Integer.MAX_VALUE ) ;
Code	iterations = new Incrementor ( new MaxIterCallback < iterations > () , Integer.MAX_VALUE ) ;
Distance : 7

9
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , false ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , false ) ;
Distance : 3

10
Tree	iterations = new Incrementor ( new MaxIterCallback () , false , NUMBER_CONSTANT ) ;
Code	iterations = new Incrementor ( new MaxIterCallback () , false , NUMBER_CONSTANT ) ;
Distance : 6

11
Tree	iterations = new Incrementor ( iterations , getNaNStrategy () , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( iterations , getNaNStrategy () , new MaxIterCallback () ) ;
Distance : 4

12
Tree	iterations = new iterations ( iterations , getUT () , new MaxIterCallback () ) ;
Code	iterations = new iterations ( iterations , getUT () , new MaxIterCallback () ) ;
Distance : 5

13
Tree	iterations = new Incrementor ( STRING_CONSTANT , new MaxIterCallback () , getRank ) ;
Code	iterations = new Incrementor ( STRING_CONSTANT , new MaxIterCallback () , getRank ) ;
Distance : 3

14
Tree	iterations = new Incrementor ( STRING_CONSTANT , new MaxIterCallback () , getNumber ) ;
Code	iterations = new Incrementor ( STRING_CONSTANT , new MaxIterCallback () , getNumber ) ;
Distance : 3

15
Tree	iterations = new Incrementor ( new MaxIterCallback () , true , true ) ;
Code	iterations = new Incrementor ( new MaxIterCallback () , true , true ) ;
Distance : 6

16
Tree	iterations = new Incrementor ( null , iterations , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( null , iterations , new MaxIterCallback () ) ;
Distance : 3

17
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ;
Distance : 0

18
Tree	iterations = new Incrementor ( new MaxIterCallback () , null , false ) ;
Code	iterations = new Incrementor ( new MaxIterCallback () , null , false ) ;
Distance : 6

19
Tree	iterations = new Incrementor ( STRING_CONSTANT , new MaxIterCallback () , null ) ;
Code	iterations = new Incrementor ( STRING_CONSTANT , new MaxIterCallback () , null ) ;
Distance : 3

20
Tree	iterations = new Incrementor ( new MaxIterCallback () , true , NUMBER_CONSTANT ) ;
Code	iterations = new Incrementor ( new MaxIterCallback () , true , NUMBER_CONSTANT ) ;
Distance : 6

21
Tree	iterations = new Incrementor ( new MaxIterCallback () , Integer.MAX_VALUE ) ;
Code	iterations = new Incrementor ( new MaxIterCallback () , Integer.MAX_VALUE ) ;
Distance : 4

22
Tree	iterations = new Incrementor ( new MaxIterCallback ( null ) , Integer.MAX_VALUE ) ;
Code	iterations = new Incrementor ( new MaxIterCallback ( null ) , Integer.MAX_VALUE ) ;
Distance : 7

23
Tree	iterations = new Incrementor ( STRING_CONSTANT , new MaxIterCallback () , true ) ;
Code	iterations = new Incrementor ( STRING_CONSTANT , new MaxIterCallback () , true ) ;
Distance : 3

24
Tree	iterations = new Incrementor < iterations > () ;
Code	iterations = new Incrementor < iterations > () ;
Distance : 6

25
Tree	iterations = new Incrementor ( new MaxIterCallback () ) ; Complex
Code	iterations = new Incrementor ( new MaxIterCallback () ) ; Complex
Distance : 3

26
Tree	iterations = new Incrementor ( new MaxIterCallback () ) ; try
Code	iterations = new Incrementor ( new MaxIterCallback () ) ; try
Distance : 3

27
Tree	iterations = new Incrementor ( null , iterations , new MaxIterCallback () , continue; ) ;
Code	iterations = new Incrementor ( null , iterations , new MaxIterCallback () , continue; ) ;
Distance : 5

28
Tree	iterations = new Incrementor ( this , new MaxIterCallback () ) ; false
Code	iterations = new Incrementor ( this , new MaxIterCallback () ) ; false
Distance : 2

29
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; Complex
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; Complex
Distance : 2

30
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , iterations , iterations ) ; Complex
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , iterations , iterations ) ; Complex
Distance : 6

31
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ; try
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ; try
Distance : 1

32
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ; Complex
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ; Complex
Distance : 1

33
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , iterations , iterations ) ; try
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , iterations , iterations ) ; try
Distance : 6

34
Tree	iterations = new Incrementor < iterations > ( iterations , false ) ; k
Code	iterations = new Incrementor < iterations > ( iterations , false ) ; k
Distance : 8

35
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ; false
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ; false
Distance : 1

36
Tree	iterations = new Incrementor ( true ) ; nCols
Code	iterations = new Incrementor ( true ) ; nCols
Distance : 6

37
Tree	iterations = new Incrementor ( true ) ; k
Code	iterations = new Incrementor ( true ) ; k
Distance : 6

38
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; try
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; try
Distance : 2

39
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; Complex
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; Complex
Distance : 2

40
Tree	iterations = new Incrementor ( new MaxIterCallback () , iterations ) ;
Code	iterations = new Incrementor ( new MaxIterCallback () , iterations ) ;
Distance : 4

41
Tree	iterations = new Incrementor ( new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( new MaxIterCallback () ) ;
Distance : 2

42
Tree	iterations = new Incrementor < iterations > () ; false
Code	iterations = new Incrementor < iterations > () ; false
Distance : 7

43
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , means ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , means ) ;
Distance : 3

44
Tree	iterations = new Incrementor < iterations > () ; try
Code	iterations = new Incrementor < iterations > () ; try
Distance : 7

45
Tree	iterations = new Incrementor < iterations > ( null ) ;
Code	iterations = new Incrementor < iterations > ( null ) ;
Distance : 6

46
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , true , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , true , iterations ) ;
Distance : 4

47
Tree	iterations = new Incrementor ( new MaxIterCallback () , Integer.MAX_VALUE ) ; try
Code	iterations = new Incrementor ( new MaxIterCallback () , Integer.MAX_VALUE ) ; try
Distance : 5

48
Tree	iterations = new Incrementor ( new MaxIterCallback () , Integer.MAX_VALUE ) ; Complex
Code	iterations = new Incrementor ( new MaxIterCallback () , Integer.MAX_VALUE ) ; Complex
Distance : 5

49
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , null , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , null , iterations ) ;
Distance : 7

50
Tree	iterations = new Incrementor ( new MaxIterCallback () , Integer.MAX_VALUE ) ; false
Code	iterations = new Incrementor ( new MaxIterCallback () , Integer.MAX_VALUE ) ; false
Distance : 5

51
Tree	iterations = new Incrementor ( new MaxIterCallback () ) ; false
Code	iterations = new Incrementor ( new MaxIterCallback () ) ; false
Distance : 3

52
Tree	iterations = new Incrementor ( this , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( this , new MaxIterCallback () ) ;
Distance : 1

53
Tree	iterations = new Incrementor ( new MaxIterCallback ( null ) ) ;
Code	iterations = new Incrementor ( new MaxIterCallback ( null ) ) ;
Distance : 5

54
Tree	iterations = new Incrementor ( this , Integer.MAX_VALUE ) ; try
Code	iterations = new Incrementor ( this , Integer.MAX_VALUE ) ; try
Distance : 5

55
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , false , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , false , iterations ) ;
Distance : 7

56
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , null ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , null ) ;
Distance : 3

57
Tree	iterations = new Incrementor ( this , Integer.MAX_VALUE ) ; Complex
Code	iterations = new Incrementor ( this , Integer.MAX_VALUE ) ; Complex
Distance : 5

58
Tree	iterations = new Incrementor ( new MaxIterCallback () , true , NUMBER_CONSTANT ) ; k
Code	iterations = new Incrementor ( new MaxIterCallback () , true , NUMBER_CONSTANT ) ; k
Distance : 7

59
Tree	iterations = new iterations ( iterations , getExpansionFactor () , new MaxIterCallback () ) ;
Code	iterations = new iterations ( iterations , getExpansionFactor () , new MaxIterCallback () ) ;
Distance : 5

60
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , null , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , null , iterations ) ;
Distance : 4

61
Tree	iterations = new Incrementor < iterations > ( continue; ) ;
Code	iterations = new Incrementor < iterations > ( continue; ) ;
Distance : 6

62
Tree	iterations = new Incrementor ( new MaxIterCallback ( return; ) ) ;
Code	iterations = new Incrementor ( new MaxIterCallback ( return; ) ) ;
Distance : 5

63
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , unsupported , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , unsupported , iterations ) ;
Distance : 4

64
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , means , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , means , iterations ) ;
Distance : 4

65
Tree	iterations = new Incrementor ( new MaxIterCallback < iterations > () , Integer.MAX_VALUE ) ; false
Code	iterations = new Incrementor ( new MaxIterCallback < iterations > () , Integer.MAX_VALUE ) ; false
Distance : 8

66
Tree	iterations = new Incrementor ( new MaxIterCallback () , true , false ) ;
Code	iterations = new Incrementor ( new MaxIterCallback () , true , false ) ;
Distance : 6

67
Tree	iterations = new Incrementor ( new MaxIterCallback < iterations > () , Integer.MAX_VALUE ) ; try
Code	iterations = new Incrementor ( new MaxIterCallback < iterations > () , Integer.MAX_VALUE ) ; try
Distance : 8

68
Tree	iterations = new Incrementor ( iterations , getExpansionFactor () , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( iterations , getExpansionFactor () , new MaxIterCallback () ) ;
Distance : 4

69
Tree	iterations = new Incrementor ( new MaxIterCallback ( super(); ) ) ;
Code	iterations = new Incrementor ( new MaxIterCallback ( super(); ) ) ;
Distance : 5

70
Tree	iterations = new Incrementor ( null , iterations , new MaxIterCallback () , super(); ) ;
Code	iterations = new Incrementor ( null , iterations , new MaxIterCallback () , super(); ) ;
Distance : 5

71
Tree	iterations = new Incrementor < iterations > ( return; ) ;
Code	iterations = new Incrementor < iterations > ( return; ) ;
Distance : 6

72
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , true , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , true , iterations ) ;
Distance : 7

73
Tree	iterations = new Incrementor ( this , new MaxIterCallback () ) ; try
Code	iterations = new Incrementor ( this , new MaxIterCallback () ) ; try
Distance : 2

74
Tree	iterations = new Incrementor ( iterations , getUT () , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( iterations , getUT () , new MaxIterCallback () ) ;
Distance : 4

75
Tree	iterations = new Incrementor ( new MaxIterCallback < iterations > () , Integer.MAX_VALUE ) ; Complex
Code	iterations = new Incrementor ( new MaxIterCallback < iterations > () , Integer.MAX_VALUE ) ; Complex
Distance : 8

76
Tree	iterations = new Incrementor ( return; , iterations , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( return; , iterations , new MaxIterCallback () ) ;
Distance : 3

77
Tree	iterations = new Incrementor ( super(); , iterations , new MaxIterCallback () , null ) ;
Code	iterations = new Incrementor ( super(); , iterations , new MaxIterCallback () , null ) ;
Distance : 5

78
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , iterations , iterations ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , iterations , iterations ) ;
Distance : 5

79
Tree	iterations = new Incrementor ( this , new MaxIterCallback () ) ; Complex
Code	iterations = new Incrementor ( this , new MaxIterCallback () ) ; Complex
Distance : 2

80
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ;
Distance : 1

81
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , null ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , null ) ;
Distance : 2

82
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; false
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; false
Distance : 2

83
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ;
Distance : 1

84
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , unsupported ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , unsupported ) ;
Distance : 2

85
Tree	iterations = new Incrementor ( iterations , getTolerance () , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( iterations , getTolerance () , new MaxIterCallback () ) ;
Distance : 4

86
Tree	iterations = new Incrementor ( new MaxIterCallback () , true , null ) ;
Code	iterations = new Incrementor ( new MaxIterCallback () , true , null ) ;
Distance : 6

87
Tree	iterations = new Incrementor ( super(); , iterations , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( super(); , iterations , new MaxIterCallback () ) ;
Distance : 3

88
Tree	iterations = new Incrementor ( this , Integer.MAX_VALUE ) ; false
Code	iterations = new Incrementor ( this , Integer.MAX_VALUE ) ; false
Distance : 5

89
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , means ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , means ) ;
Distance : 2

90
Tree	iterations = new Incrementor ( new MaxIterCallback ( return; ) , Integer.MAX_VALUE ) ;
Code	iterations = new Incrementor ( new MaxIterCallback ( return; ) , Integer.MAX_VALUE ) ;
Distance : 7

91
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; try
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; try
Distance : 2

92
Tree	iterations = new Incrementor < iterations > ( super(); ) ;
Code	iterations = new Incrementor < iterations > ( super(); ) ;
Distance : 6

93
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback < iterations > () , true ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback < iterations > () , true ) ;
Distance : 6

94
Tree	iterations = new Incrementor ( new MaxIterCallback () , iterations ) ; false
Code	iterations = new Incrementor ( new MaxIterCallback () , iterations ) ; false
Distance : 5

95
Tree	iterations = new iterations ( iterations , getNaNStrategy () , new MaxIterCallback () ) ;
Code	iterations = new iterations ( iterations , getNaNStrategy () , new MaxIterCallback () ) ;
Distance : 5

96
Tree	iterations = new Incrementor ( continue; , iterations , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( continue; , iterations , new MaxIterCallback () ) ;
Distance : 3

97
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , RandomGenerator , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , RandomGenerator , iterations ) ;
Distance : 7

98
Tree	iterations = new iterations ( iterations , getTolerance () , new MaxIterCallback () ) ;
Code	iterations = new iterations ( iterations , getTolerance () , new MaxIterCallback () ) ;
Distance : 5

99
Tree	iterations = new Incrementor ( null , iterations , new MaxIterCallback () , null ) ;
Code	iterations = new Incrementor ( null , iterations , new MaxIterCallback () , null ) ;
Distance : 5

100
Tree	iterations = new Incrementor ( new MaxIterCallback ( super(); ) , Integer.MAX_VALUE ) ;
Code	iterations = new Incrementor ( new MaxIterCallback ( super(); ) , Integer.MAX_VALUE ) ;
Distance : 7

101
Tree	iterations = new Incrementor < iterations > ( iterations , false ) ; nCols
Code	iterations = new Incrementor < iterations > ( iterations , false ) ; nCols
Distance : 8

102
Tree	iterations = new Incrementor < iterations > () ; Complex
Code	iterations = new Incrementor < iterations > () ; Complex
Distance : 7

103
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , true ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , true ) ;
Distance : 3

104
Tree	iterations = new Incrementor ( new MaxIterCallback () , true , NUMBER_CONSTANT ) ; nCols
Code	iterations = new Incrementor ( new MaxIterCallback () , true , NUMBER_CONSTANT ) ; nCols
Distance : 7

105
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback < iterations > () , null ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback < iterations > () , null ) ;
Distance : 6

106
Tree	iterations = new Incrementor < iterations > ( iterations , false ) ;
Code	iterations = new Incrementor < iterations > ( iterations , false ) ;
Distance : 7

107
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; false
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; false
Distance : 2

108
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , iterations , iterations ) ; false
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , iterations , iterations ) ; false
Distance : 6

109
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , true ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , true ) ;
Distance : 2

110
Tree	iterations = new Incrementor ( new MaxIterCallback () , iterations ) ; Complex
Code	iterations = new Incrementor ( new MaxIterCallback () , iterations ) ; Complex
Distance : 5

111
Tree	iterations = new Incrementor ( new MaxIterCallback () , iterations ) ; try
Code	iterations = new Incrementor ( new MaxIterCallback () , iterations ) ; try
Distance : 5

========================================================================


========================================================================
Example Number: 28
Parent Code is: 
if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
-------------------------------------------------------------------------------
Child code is: 
if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=real}) (236{val===}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=imaginary}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=NaN}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=real}) (236{val===}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=imaginary}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=INF}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/5/parent/src_main_java_org_apache_commons_math3_complex_Complex.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 84
Wrong
========================================================================
False

0
Tree	if ( real == NUMBER_CONSTANT && isValidPivotColumn () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && isValidPivotColumn () == null ) { return NaN ; }
Distance : 4

1
Tree	if ( real == NUMBER_CONSTANT && fval.length () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && fval.length () == null ) { return NaN ; }
Distance : 4

2
Tree	if ( real == NUMBER_CONSTANT && copy () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && copy () == null ) { return NaN ; }
Distance : 4

3
Tree	if ( real == NUMBER_CONSTANT && && == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && && == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

4
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

5
Tree	if ( real == NUMBER_CONSTANT && imaginary != imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != imaginary ) { return NaN ; }
Distance : 3

6
Tree	if ( real == NUMBER_CONSTANT && imaginary > real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > real ) { return NaN ; }
Distance : 3

7
Tree	if ( real == NUMBER_CONSTANT && NaN < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

8
Tree	if ( real == NUMBER_CONSTANT && zval.length () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && zval.length () == null ) { return NaN ; }
Distance : 4

9
Tree	if ( real == NUMBER_CONSTANT && problem.a == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && problem.a == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

10
Tree	if ( real . logDensity ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . logDensity ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

11
Tree	if ( real . equals ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . equals ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

12
Tree	if ( real == NUMBER_CONSTANT && imaginary < LocalizedFormats.NUMBER_TOO_SMALL ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < LocalizedFormats.NUMBER_TOO_SMALL ) { return NaN ; }
Distance : 3

13
Tree	if ( real . logDensity ( real ) imaginary NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . logDensity ( real ) imaginary NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

14
Tree	if ( real == NUMBER_CONSTANT && NaN && real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN && real ) { return NaN ; }
Distance : 4

15
Tree	if ( real == NUMBER_CONSTANT && imaginary == scale ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == scale ) { return NaN ; }
Distance : 2

16
Tree	if ( real == NUMBER_CONSTANT && NaN != imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN != imaginary ) { return NaN ; }
Distance : 4

17
Tree	if ( real == NUMBER_CONSTANT && FastMath.PI == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && FastMath.PI == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

18
Tree	if ( real == NUMBER_CONSTANT && imaginary == Integer.MIN_VALUE () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == Integer.MIN_VALUE () ) { return NaN ; }
Distance : 3

19
Tree	if ( real == NUMBER_CONSTANT && imaginary <= Integer.MIN_VALUE () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= Integer.MIN_VALUE () ) { return NaN ; }
Distance : 4

20
Tree	if ( real == NUMBER_CONSTANT && NaN >= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN >= imaginary ) { return NaN ; }
Distance : 4

21
Tree	if ( real . logDensity ( imaginary ) imaginary NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . logDensity ( imaginary ) imaginary NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

22
Tree	if ( real == NUMBER_CONSTANT && Double.NEGATIVE_INFINITY == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && Double.NEGATIVE_INFINITY == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

23
Tree	if ( real == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

24
Tree	if ( real == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

25
Tree	if ( real == NUMBER_CONSTANT && NaN != real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN != real ) { return NaN ; }
Distance : 4

26
Tree	if ( real == NUMBER_CONSTANT && imaginary >= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary >= imaginary ) { return NaN ; }
Distance : 3

27
Tree	if ( real . logDensity ( imaginary ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . logDensity ( imaginary ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

28
Tree	if ( real == NUMBER_CONSTANT && NaN < STRING_CONSTANT + NaN ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN < STRING_CONSTANT + NaN ) { return NaN ; }
Distance : 6

29
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 1

30
Tree	if ( real == NUMBER_CONSTANT && NaN < STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN < STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 6

31
Tree	if ( real . isPowerOfTwo ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . isPowerOfTwo ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

32
Tree	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 4

33
Tree	if ( real == NUMBER_CONSTANT && imaginary == real == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == real == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

34
Tree	if ( real == NUMBER_CONSTANT && this == real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && this == real ) { return NaN ; }
Distance : 3

35
Tree	if ( real == NUMBER_CONSTANT && imaginary == NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

36
Tree	if ( real == NUMBER_CONSTANT && imaginary < real == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < real == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

37
Tree	if ( real == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

38
Tree	if ( real == NUMBER_CONSTANT && imaginary != LocalizedFormats.NUMBER_TOO_SMALL ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != LocalizedFormats.NUMBER_TOO_SMALL ) { return NaN ; }
Distance : 3

39
Tree	if ( real == NUMBER_CONSTANT && imaginary > NaN ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > NaN ) { return NaN ; }
Distance : 3

40
Tree	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + NaN ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + NaN ) { return NaN ; }
Distance : 4

41
Tree	if ( real == NUMBER_CONSTANT && imaginary != startPoint.length ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != startPoint.length ) { return NaN ; }
Distance : 3

42
Tree	if ( real == NUMBER_CONSTANT && imaginary == Integer.MIN_VALUE ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == Integer.MIN_VALUE ) { return NaN ; }
Distance : 2

43
Tree	if ( real == NUMBER_CONSTANT && real && real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real && real ) { return NaN ; }
Distance : 4

44
Tree	if ( real . equals ( real ) imaginary NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . equals ( real ) imaginary NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

45
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

46
Tree	if ( real == NUMBER_CONSTANT && NaN == STRING_CONSTANT + NaN ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN == STRING_CONSTANT + NaN ) { return NaN ; }
Distance : 5

47
Tree	if ( real == NUMBER_CONSTANT && NaN == STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN == STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 5

48
Tree	if ( imaginary == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Distance : 4

49
Tree	if ( real == NUMBER_CONSTANT && imaginary == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

50
Tree	if ( real == NUMBER_CONSTANT && imaginary && real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary && real ) { return NaN ; }
Distance : 3

51
Tree	if ( real == NUMBER_CONSTANT && imaginary < Precision.SAFE_MIN ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < Precision.SAFE_MIN ) { return NaN ; }
Distance : 3

52
Tree	if ( real == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Distance : 3

53
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 1

54
Tree	if ( real == NUMBER_CONSTANT && imaginary <= values.length () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= values.length () ) { return NaN ; }
Distance : 4

55
Tree	if ( real . verifyValues ( real ) imaginary NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . verifyValues ( real ) imaginary NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

56
Tree	if ( real == NUMBER_CONSTANT && imaginary < Integer.MIN_VALUE ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < Integer.MIN_VALUE ) { return NaN ; }
Distance : 3

57
Tree	if ( real == NUMBER_CONSTANT && imaginary >= real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary >= real ) { return NaN ; }
Distance : 3

58
Tree	if ( real == NUMBER_CONSTANT && imaginary < values.length ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < values.length ) { return NaN ; }
Distance : 3

59
Tree	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + NaN ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + NaN ) { return NaN ; }
Distance : 5

60
Tree	if ( real == NUMBER_CONSTANT && imaginary <= copySign () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= copySign () ) { return NaN ; }
Distance : 4

61
Tree	if ( real == NUMBER_CONSTANT && imaginary == b ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == b ) { return NaN ; }
Distance : 2

62
Tree	if ( real == NUMBER_CONSTANT && imaginary != real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != real ) { return NaN ; }
Distance : 3

63
Tree	if ( real == NUMBER_CONSTANT && imaginary == null () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == null () ) { return NaN ; }
Distance : 3

64
Tree	if ( real == NUMBER_CONSTANT && imaginary != LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ) { return NaN ; }
Distance : 3

65
Tree	if ( real == NUMBER_CONSTANT && NaN <= real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN <= real ) { return NaN ; }
Distance : 4

66
Tree	if ( real == NUMBER_CONSTANT && imaginary == % ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == % ) { return NaN ; }
Distance : 2

67
Tree	if ( real == NUMBER_CONSTANT && NaN > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN > imaginary ) { return NaN ; }
Distance : 4

68
Tree	if ( real == NUMBER_CONSTANT && imaginary != values.length ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != values.length ) { return NaN ; }
Distance : 3

69
Tree	if ( real == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

70
Tree	if ( real == NUMBER_CONSTANT && NaN <= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN <= imaginary ) { return NaN ; }
Distance : 4

71
Tree	if ( real == NUMBER_CONSTANT && NaN == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

72
Tree	if ( real == NUMBER_CONSTANT && imaginary <= getDimension () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= getDimension () ) { return NaN ; }
Distance : 4

73
Tree	if ( real == NUMBER_CONSTANT && imaginary == regularizedGammaP () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == regularizedGammaP () ) { return NaN ; }
Distance : 3

74
Tree	if ( real == NUMBER_CONSTANT && imaginary == getDimension () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == getDimension () ) { return NaN ; }
Distance : 3

75
Tree	if ( real == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

76
Tree	if ( real == NUMBER_CONSTANT && imaginary <= real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= real ) { return NaN ; }
Distance : 3

77
Tree	if ( real == NUMBER_CONSTANT && imaginary <= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= imaginary ) { return NaN ; }
Distance : 3

78
Tree	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Distance : 3

79
Tree	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 5

80
Tree	if ( real == NUMBER_CONSTANT && real < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

81
Tree	if ( real == NUMBER_CONSTANT && this == NaN ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && this == NaN ) { return NaN ; }
Distance : 3

82
Tree	if ( real == NUMBER_CONSTANT && imaginary >= NaN ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary >= NaN ) { return NaN ; }
Distance : 3

83
Tree	if ( real == NUMBER_CONSTANT && imaginary && imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary && imaginary ) { return NaN ; }
Distance : 3

========================================================================


