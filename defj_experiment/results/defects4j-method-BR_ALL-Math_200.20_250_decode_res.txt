========================================================================
Example Number: 1
Parent Code is: 
final int cols = problem . getAllParameters () . length ;
-------------------------------------------------------------------------------
Child code is: 
final int cols = problem . getUnboundParameters () . length ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (39{val=int}) (59 (800{val=cols}) (204{val==}) (22 (32 (800{val=problem}) (235{val=.}) (802{val=getAllParameters}) (216{val=()})) (235{val=.}) (800{val=length}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (39{val=int}) (59 (800{val=cols}) (204{val==}) (22 (32 (800{val=problem}) (235{val=.}) (802{val=getUnboundParameters}) (216{val=()})) (235{val=.}) (800{val=length}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/100/parent/src_java_org_apache_commons_math_estimation_AbstractEstimator.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 250
Wrong
========================================================================
False

0
Tree	final int cols = problem ;
Code	final int cols = problem ;
Distance : 5

1
Tree	final int cols = problem . getAllParameters () ;
Code	final int cols = problem . getAllParameters () ;
Distance : 3

2
Tree	double cols = ( problem ) problem ;
Code	double cols = ( problem ) problem ;
Distance : 8

3
Tree	final double cols = problem ;
Code	final double cols = problem ;
Distance : 6

4
Tree	final long cols = problem ;
Code	final long cols = problem ;
Distance : 6

5
Tree	final double cols = ( problem ) problem ;
Code	final double cols = ( problem ) problem ;
Distance : 7

6
Tree	final boolean cols = problem . getAllParameters () ;
Code	final boolean cols = problem . getAllParameters () ;
Distance : 4

7
Tree	final int cols = ( problem ) problem ;
Code	final int cols = ( problem ) problem ;
Distance : 6

8
Tree	final int cols = ( problem ) cols ;
Code	final int cols = ( problem ) cols ;
Distance : 6

9
Tree	final long cols = ( problem ) problem ;
Code	final long cols = ( problem ) problem ;
Distance : 7

10
Tree	long cols = ( problem ) problem ;
Code	long cols = ( problem ) problem ;
Distance : 8

11
Tree	private int cols = problem ;
Code	private int cols = problem ;
Distance : 6

12
Tree	byte cols = ( problem ) problem ;
Code	byte cols = ( problem ) problem ;
Distance : 8

13
Tree	double [] [] cols = problem . getAllParameters () ;
Code	double [] [] cols = problem . getAllParameters () ;
Distance : 6

14
Tree	protected int cols = ( problem ) problem ;
Code	protected int cols = ( problem ) problem ;
Distance : 7

15
Tree	private int cols = ( problem ) problem ;
Code	private int cols = ( problem ) problem ;
Distance : 7

16
Tree	final double cols = problem . getAllParameters () ;
Code	final double cols = problem . getAllParameters () ;
Distance : 4

17
Tree	final long [] cols = problem . getAllParameters () ;
Code	final long [] cols = problem . getAllParameters () ;
Distance : 5

18
Tree	float cols = problem . getAllParameters () ;
Code	float cols = problem . getAllParameters () ;
Distance : 5

19
Tree	final double cols = problem . getAllParameters () . length ;
Code	final double cols = problem . getAllParameters () . length ;
Distance : 2

20
Tree	final int [] [] cols = problem . getAllParameters ( Cartesian1D.ZERO ) ;
Code	final int [] [] cols = problem . getAllParameters ( Cartesian1D.ZERO ) ;
Distance : 6

21
Tree	final int [] [] cols = problem . getAllParameters ( LocalizedFormats.CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS ) ;
Code	final int [] [] cols = problem . getAllParameters ( LocalizedFormats.CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS ) ;
Distance : 6

22
Tree	final void cols = problem ;
Code	final void cols = problem ;
Distance : 6

23
Tree	final int [] cols = problem . getAllParameters () ;
Code	final int [] cols = problem . getAllParameters () ;
Distance : 4

24
Tree	float cols = ( problem ) problem ;
Code	float cols = ( problem ) problem ;
Distance : 8

25
Tree	final long cols = problem . getAllParameters () ;
Code	final long cols = problem . getAllParameters () ;
Distance : 4

26
Tree	final long cols = problem . getAllParameters () . length ;
Code	final long cols = problem . getAllParameters () . length ;
Distance : 2

27
Tree	final int [] [] cols = problem . getAllParameters ( LocalizedFormats.NOT_POSITIVE_POPULATION_SIZE ) ;
Code	final int [] [] cols = problem . getAllParameters ( LocalizedFormats.NOT_POSITIVE_POPULATION_SIZE ) ;
Distance : 6

28
Tree	final int [] [] cols = problem . getAllParameters ( FACT.length ) ;
Code	final int [] [] cols = problem . getAllParameters ( FACT.length ) ;
Distance : 6

29
Tree	final void cols = ( problem ) problem ;
Code	final void cols = ( problem ) problem ;
Distance : 7

30
Tree	final int [] [] cols = problem . getAllParameters ( coefficients.length ) ;
Code	final int [] [] cols = problem . getAllParameters ( coefficients.length ) ;
Distance : 6

31
Tree	final int length = problem . getAllParameters () ;
Code	final int length = problem . getAllParameters () ;
Distance : 4

32
Tree	final int cols = problem . getAllParameters ( dRow.length ) ;
Code	final int cols = problem . getAllParameters ( dRow.length ) ;
Distance : 4

33
Tree	double cols = problem . getAllParameters () ;
Code	double cols = problem . getAllParameters () ;
Distance : 5

34
Tree	final int cols = problem . getAllParameters ( FACT.length ) ;
Code	final int cols = problem . getAllParameters ( FACT.length ) ;
Distance : 4

35
Tree	public int cols = problem ;
Code	public int cols = problem ;
Distance : 6

36
Tree	double length = ( problem ) problem ;
Code	double length = ( problem ) problem ;
Distance : 9

37
Tree	final int cols = problem . getAllParameters ( false , problem ) ;
Code	final int cols = problem . getAllParameters ( false , problem ) ;
Distance : 6

38
Tree	final int cols = problem . getAllParameters () . length ;
Code	final int cols = problem . getAllParameters () . length ;
Distance : 1

39
Tree	final int cols = problem . getAllParameters ( seed.length ) ;
Code	final int cols = problem . getAllParameters ( seed.length ) ;
Distance : 4

40
Tree	long cols = problem . getAllParameters () ;
Code	long cols = problem . getAllParameters () ;
Distance : 5

41
Tree	final int cols = problem . getAllParameters ( length , natural.length ) ;
Code	final int cols = problem . getAllParameters ( length , natural.length ) ;
Distance : 6

42
Tree	final void cols = problem . getAllParameters () ;
Code	final void cols = problem . getAllParameters () ;
Distance : 4

43
Tree	final int cols = problem . getAllParameters ( coefficients.length ) ;
Code	final int cols = problem . getAllParameters ( coefficients.length ) ;
Distance : 4

44
Tree	double cols = ( problem ) cols ;
Code	double cols = ( problem ) cols ;
Distance : 8

45
Tree	problem cols = problem . getAllParameters () ;
Code	problem cols = problem . getAllParameters () ;
Distance : 5

46
Tree	boolean cols = ( problem ) problem ;
Code	boolean cols = ( problem ) problem ;
Distance : 8

47
Tree	void cols = ( problem ) problem ;
Code	void cols = ( problem ) problem ;
Distance : 8

48
Tree	final int cols = problem . getAllParameters ( Float.MAX_VALUE ) ;
Code	final int cols = problem . getAllParameters ( Float.MAX_VALUE ) ;
Distance : 4

49
Tree	final double [] [] cols = problem . getAllParameters () ;
Code	final double [] [] cols = problem . getAllParameters () ;
Distance : 6

50
Tree	final boolean cols = problem . getAllParameters () . length ;
Code	final boolean cols = problem . getAllParameters () . length ;
Distance : 2

51
Tree	final int cols = problem . getAllParameters ( length , v2.x ) ;
Code	final int cols = problem . getAllParameters ( length , v2.x ) ;
Distance : 6

52
Tree	final int cols = problem . getAllParameters ( natural.length ) ;
Code	final int cols = problem . getAllParameters ( natural.length ) ;
Distance : 4

53
Tree	final boolean cols = problem ;
Code	final boolean cols = problem ;
Distance : 6

54
Tree	final int [] [] cols = problem . getAllParameters () ;
Code	final int [] [] cols = problem . getAllParameters () ;
Distance : 5

55
Tree	final int cols = problem . getAllParameters ( Cartesian1D.ZERO ) ;
Code	final int cols = problem . getAllParameters ( Cartesian1D.ZERO ) ;
Distance : 4

56
Tree	long cols = ( problem ) cols ;
Code	long cols = ( problem ) cols ;
Distance : 8

57
Tree	final int cols = problem . getAllParameters ( true , problem ) ;
Code	final int cols = problem . getAllParameters ( true , problem ) ;
Distance : 6

58
Tree	final long cols = problem . getAllParameters ( false , problem ) ;
Code	final long cols = problem . getAllParameters ( false , problem ) ;
Distance : 7

59
Tree	final int cols = ( ( length ) problem ) . cols () ;
Code	final int cols = ( ( length ) problem ) . cols () ;
Distance : 8

60
Tree	int cols = ( problem ) problem ;
Code	int cols = ( problem ) problem ;
Distance : 7

61
Tree	final int length = problem ;
Code	final int length = problem ;
Distance : 6

62
Tree	final boolean cols = ( problem ) problem ;
Code	final boolean cols = ( problem ) problem ;
Distance : 7

63
Tree	length = problem . getAllParameters ()
Code	length = problem . getAllParameters ()
Distance : 7

64
Tree	final int length = ( problem ) problem ;
Code	final int length = ( problem ) problem ;
Distance : 7

65
Tree	private int [] [] cols = problem . getAllParameters () ;
Code	private int [] [] cols = problem . getAllParameters () ;
Distance : 6

66
Tree	public cols cols = problem . getAllParameters () ;
Code	public cols cols = problem . getAllParameters () ;
Distance : 5

67
Tree	final int cols = problem . getAllParameters ( RandomSource.MT_64 ) ;
Code	final int cols = problem . getAllParameters ( RandomSource.MT_64 ) ;
Distance : 4

68
Tree	final int [] [] length = problem . getAllParameters () ;
Code	final int [] [] length = problem . getAllParameters () ;
Distance : 6

69
Tree	final int cols = cols ;
Code	final int cols = cols ;
Distance : 6

70
Tree	boolean [] [] cols = problem . getAllParameters () ;
Code	boolean [] [] cols = problem . getAllParameters () ;
Distance : 6

71
Tree	boolean cols = problem . getAllParameters () ;
Code	boolean cols = problem . getAllParameters () ;
Distance : 5

72
Tree	double length = problem . getAllParameters () ;
Code	double length = problem . getAllParameters () ;
Distance : 6

73
Tree	final int [] cols = cols . getAllParameters () ;
Code	final int [] cols = cols . getAllParameters () ;
Distance : 5

74
Tree	public int cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	public int cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

75
Tree	final int cols = problem . getAllParameters ( length , PivotSelectionRule.BLAND ) ;
Code	final int cols = problem . getAllParameters ( length , PivotSelectionRule.BLAND ) ;
Distance : 6

76
Tree	final int [] [] cols = length . getAllParameters () ;
Code	final int [] [] cols = length . getAllParameters () ;
Distance : 6

77
Tree	final int cols = problem . cols ( length . cols () , length . cols () ) ;
Code	final int cols = problem . cols ( length . cols () , length . cols () ) ;
Distance : 10

78
Tree	void cols = problem . getAllParameters () ;
Code	void cols = problem . getAllParameters () ;
Distance : 5

79
Tree	final int cols = problem . length ( length . cols () , cols () ) ;
Code	final int cols = problem . length ( length . cols () , cols () ) ;
Distance : 9

80
Tree	final int cols = problem . getAllParameters ( new cols [ NUMBER_CONSTANT ] ) ;
Code	final int cols = problem . getAllParameters ( new cols [ NUMBER_CONSTANT ] ) ;
Distance : 8

81
Tree	final double cols = problem . cols ( length . cols () , cols () ) ;
Code	final double cols = problem . cols ( length . cols () , cols () ) ;
Distance : 10

82
Tree	static cols cols = problem . getAllParameters () ;
Code	static cols cols = problem . getAllParameters () ;
Distance : 5

83
Tree	public int cols = problem . getAllParameters () ;
Code	public int cols = problem . getAllParameters () ;
Distance : 4

84
Tree	final int cols = problem . getAllParameters ( length , line.direction ) ;
Code	final int cols = problem . getAllParameters ( length , line.direction ) ;
Distance : 6

85
Tree	final int length = problem . getAllParameters () . length ;
Code	final int length = problem . getAllParameters () . length ;
Distance : 2

86
Tree	final double cols = problem . getAllParameters () - NUMBER_CONSTANT ;
Code	final double cols = problem . getAllParameters () - NUMBER_CONSTANT ;
Distance : 4

87
Tree	final long cols = problem . cols ( length . cols () , cols () ) ;
Code	final long cols = problem . cols ( length . cols () , cols () ) ;
Distance : 10

88
Tree	final double cols = problem . getAllParameters ( new cols [ NUMBER_CONSTANT ] ) ;
Code	final double cols = problem . getAllParameters ( new cols [ NUMBER_CONSTANT ] ) ;
Distance : 9

89
Tree	final int cols = problem . getAllParameters () - NUMBER_CONSTANT ;
Code	final int cols = problem . getAllParameters () - NUMBER_CONSTANT ;
Distance : 3

90
Tree	final void cols = problem . getAllParameters () - NUMBER_CONSTANT ;
Code	final void cols = problem . getAllParameters () - NUMBER_CONSTANT ;
Distance : 4

91
Tree	void [] [] cols = problem . getAllParameters () ;
Code	void [] [] cols = problem . getAllParameters () ;
Distance : 6

92
Tree	final void cols = problem . getAllParameters ( new cols [ NUMBER_CONSTANT ] ) ;
Code	final void cols = problem . getAllParameters ( new cols [ NUMBER_CONSTANT ] ) ;
Distance : 9

93
Tree	double [] cols = problem . getAllParameters () ;
Code	double [] cols = problem . getAllParameters () ;
Distance : 5

94
Tree	abstract cols cols = problem . getAllParameters () ;
Code	abstract cols cols = problem . getAllParameters () ;
Distance : 5

95
Tree	protected int cols = problem . getAllParameters () ;
Code	protected int cols = problem . getAllParameters () ;
Distance : 4

96
Tree	protected int cols = problem . getAllParameters () - NUMBER_CONSTANT ;
Code	protected int cols = problem . getAllParameters () - NUMBER_CONSTANT ;
Distance : 4

97
Tree	private int cols = problem . getAllParameters () ;
Code	private int cols = problem . getAllParameters () ;
Distance : 4

98
Tree	final double cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

99
Tree	length cols = problem . getAllParameters () ;
Code	length cols = problem . getAllParameters () ;
Distance : 5

100
Tree	private int [] [] cols = problem . getAllParameters ( length , NUMBER_CONSTANT ) ;
Code	private int [] [] cols = problem . getAllParameters ( length , NUMBER_CONSTANT ) ;
Distance : 9

101
Tree	final int cols = problem . cols ( length . cols () , cols . cols () ) ;
Code	final int cols = problem . cols ( length . cols () , cols . cols () ) ;
Distance : 10

102
Tree	final int length = problem . cols ( length . getAllParameters () , cols () ) ;
Code	final int length = problem . cols ( length . getAllParameters () , cols () ) ;
Distance : 10

103
Tree	final long [] [] cols = problem . getAllParameters ( length , NUMBER_CONSTANT ) ;
Code	final long [] [] cols = problem . getAllParameters ( length , NUMBER_CONSTANT ) ;
Distance : 9

104
Tree	final boolean [] [] cols = problem . getAllParameters ( length , NUMBER_CONSTANT ) ;
Code	final boolean [] [] cols = problem . getAllParameters ( length , NUMBER_CONSTANT ) ;
Distance : 9

105
Tree	final int [] [] problem = problem . getAllParameters ( length , NUMBER_CONSTANT ) ;
Code	final int [] [] problem = problem . getAllParameters ( length , NUMBER_CONSTANT ) ;
Distance : 9

106
Tree	final int cols = cols . getAllParameters ( new cols [ NUMBER_CONSTANT ] ) ;
Code	final int cols = cols . getAllParameters ( new cols [ NUMBER_CONSTANT ] ) ;
Distance : 9

107
Tree	cols cols = cols . getAllParameters () ;
Code	cols cols = cols . getAllParameters () ;
Distance : 6

108
Tree	final int length = ( ( cols ) problem ) . cols () ;
Code	final int length = ( ( cols ) problem ) . cols () ;
Distance : 9

109
Tree	private int cols = problem . getAllParameters () - NUMBER_CONSTANT ;
Code	private int cols = problem . getAllParameters () - NUMBER_CONSTANT ;
Distance : 4

110
Tree	protected int cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	protected int cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

111
Tree	final double cols = problem . cols ( length . getAllParameters () , length . cols () ) ;
Code	final double cols = problem . cols ( length . getAllParameters () , length . cols () ) ;
Distance : 11

112
Tree	final int cols = problem . length ( length . cols () , length . cols () ) ;
Code	final int cols = problem . length ( length . cols () , length . cols () ) ;
Distance : 10

113
Tree	length = length . getAllParameters ()
Code	length = length . getAllParameters ()
Distance : 8

114
Tree	final boolean cols = ( ( cols ) problem ) . cols () ;
Code	final boolean cols = ( ( cols ) problem ) . cols () ;
Distance : 9

115
Tree	problem = cols . getAllParameters ()
Code	problem = cols . getAllParameters ()
Distance : 8

116
Tree	final int cols = problem . getAllParameters ( length , RotationConvention.FRAME_TRANSFORM ) ;
Code	final int cols = problem . getAllParameters ( length , RotationConvention.FRAME_TRANSFORM ) ;
Distance : 6

117
Tree	long [] cols = problem . getAllParameters () ;
Code	long [] cols = problem . getAllParameters () ;
Distance : 5

118
Tree	long [] length = problem . getAllParameters () ;
Code	long [] length = problem . getAllParameters () ;
Distance : 6

119
Tree	final void cols = problem . getAllParameters () . length ;
Code	final void cols = problem . getAllParameters () . length ;
Distance : 2

120
Tree	byte cols = problem . getAllParameters () ;
Code	byte cols = problem . getAllParameters () ;
Distance : 5

121
Tree	final int cols = problem . getAllParameters ( length , v2.y ) ;
Code	final int cols = problem . getAllParameters ( length , v2.y ) ;
Distance : 6

122
Tree	final int [] [] cols = problem . getAllParameters ( currentState.length ) ;
Code	final int [] [] cols = problem . getAllParameters ( currentState.length ) ;
Distance : 6

123
Tree	private int cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	private int cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

124
Tree	final int cols = problem . cols ( cols . cols () , cols () ) ;
Code	final int cols = problem . cols ( cols . cols () , cols () ) ;
Distance : 9

125
Tree	int cols = problem . getAllParameters () ;
Code	int cols = problem . getAllParameters () ;
Distance : 4

126
Tree	final long cols = problem . getAllParameters () - NUMBER_CONSTANT ;
Code	final long cols = problem . getAllParameters () - NUMBER_CONSTANT ;
Distance : 4

127
Tree	final int cols = problem . getAllParameters ( length , seed.length ) ;
Code	final int cols = problem . getAllParameters ( length , seed.length ) ;
Distance : 6

128
Tree	final long cols = problem . cols ( length . cols () , length . cols () ) ;
Code	final long cols = problem . cols ( length . cols () , length . cols () ) ;
Distance : 11

129
Tree	final int cols = problem . getAllParameters ( LocalizedFormats.CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS ) ;
Code	final int cols = problem . getAllParameters ( LocalizedFormats.CANNOT_INCREMENT_STATISTIC_CONSTRUCTED_FROM_EXTERNAL_MOMENTS ) ;
Distance : 4

130
Tree	final void cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final void cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

131
Tree	final double [] cols = problem . getAllParameters () ;
Code	final double [] cols = problem . getAllParameters () ;
Distance : 5

132
Tree	final cols length = problem . getAllParameters () ;
Code	final cols length = problem . getAllParameters () ;
Distance : 5

133
Tree	problem length = problem . getAllParameters () ;
Code	problem length = problem . getAllParameters () ;
Distance : 6

134
Tree	final int cols = cols . cols ( length . getAllParameters () , cols () ) ;
Code	final int cols = cols . cols ( length . getAllParameters () , cols () ) ;
Distance : 10

135
Tree	final int [] [] cols = problem . getAllParameters ( length , NUMBER_CONSTANT ) ;
Code	final int [] [] cols = problem . getAllParameters ( length , NUMBER_CONSTANT ) ;
Distance : 8

136
Tree	final int cols = ( cols ) problem ;
Code	final int cols = ( cols ) problem ;
Distance : 6

137
Tree	cols length = problem . getAllParameters () ;
Code	cols length = problem . getAllParameters () ;
Distance : 6

138
Tree	byte [] [] cols = problem . getAllParameters () ;
Code	byte [] [] cols = problem . getAllParameters () ;
Distance : 6

139
Tree	final boolean cols = problem . cols ( length . cols () , cols () ) ;
Code	final boolean cols = problem . cols ( length . cols () , cols () ) ;
Distance : 10

140
Tree	float [] [] cols = problem . getAllParameters () ;
Code	float [] [] cols = problem . getAllParameters () ;
Distance : 6

141
Tree	protected int cols = problem ;
Code	protected int cols = problem ;
Distance : 6

142
Tree	final int [] [] cols = problem . getAllParameters ( dRow.length ) ;
Code	final int [] [] cols = problem . getAllParameters ( dRow.length ) ;
Distance : 6

143
Tree	length cols = cols . getAllParameters () ;
Code	length cols = cols . getAllParameters () ;
Distance : 6

144
Tree	cols = length . getAllParameters ()
Code	cols = length . getAllParameters ()
Distance : 7

145
Tree	long [] [] cols = cols . getAllParameters () ;
Code	long [] [] cols = cols . getAllParameters () ;
Distance : 7

146
Tree	private int cols = problem . getAllParameters () . length ;
Code	private int cols = problem . getAllParameters () . length ;
Distance : 2

147
Tree	final double cols = problem . getAllParameters ( true , problem ) ;
Code	final double cols = problem . getAllParameters ( true , problem ) ;
Distance : 7

148
Tree	final void [] cols = problem . getAllParameters () ;
Code	final void [] cols = problem . getAllParameters () ;
Distance : 5

149
Tree	final cols cols = cols . getAllParameters () ;
Code	final cols cols = cols . getAllParameters () ;
Distance : 5

150
Tree	final long cols = problem . getAllParameters ( new cols [ NUMBER_CONSTANT ] ) ;
Code	final long cols = problem . getAllParameters ( new cols [ NUMBER_CONSTANT ] ) ;
Distance : 9

151
Tree	final int cols = problem . getAllParameters ( length , otherC.pole ) ;
Code	final int cols = problem . getAllParameters ( length , otherC.pole ) ;
Distance : 6

152
Tree	length cols = length . getAllParameters () ;
Code	length cols = length . getAllParameters () ;
Distance : 6

153
Tree	final boolean [] cols = problem . getAllParameters () ;
Code	final boolean [] cols = problem . getAllParameters () ;
Distance : 5

154
Tree	final int cols = problem . getAllParameters ( true , cols ) ;
Code	final int cols = problem . getAllParameters ( true , cols ) ;
Distance : 6

155
Tree	protected int [] [] cols = problem . getAllParameters () ;
Code	protected int [] [] cols = problem . getAllParameters () ;
Distance : 6

156
Tree	final int cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

157
Tree	final int cols = problem . getAllParameters ( length , FACT.length ) ;
Code	final int cols = problem . getAllParameters ( length , FACT.length ) ;
Distance : 6

158
Tree	final long cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final long cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

159
Tree	final cols cols = problem . getAllParameters () ;
Code	final cols cols = problem . getAllParameters () ;
Distance : 4

160
Tree	protected cols cols = problem . getAllParameters () ;
Code	protected cols cols = problem . getAllParameters () ;
Distance : 5

161
Tree	private cols cols = problem . getAllParameters () ;
Code	private cols cols = problem . getAllParameters () ;
Distance : 5

162
Tree	byte [] cols = problem . getAllParameters () ;
Code	byte [] cols = problem . getAllParameters () ;
Distance : 5

163
Tree	public int [] cols = problem . getAllParameters () ;
Code	public int [] cols = problem . getAllParameters () ;
Distance : 5

164
Tree	long length = problem . getAllParameters () ;
Code	long length = problem . getAllParameters () ;
Distance : 6

165
Tree	final int [] [] cols = cols . getAllParameters () ;
Code	final int [] [] cols = cols . getAllParameters () ;
Distance : 6

166
Tree	final double [] [] cols = problem . getAllParameters ( length , NUMBER_CONSTANT ) ;
Code	final double [] [] cols = problem . getAllParameters ( length , NUMBER_CONSTANT ) ;
Distance : 9

167
Tree	final boolean cols = problem . cols ( length . getAllParameters () , length . cols () ) ;
Code	final boolean cols = problem . cols ( length . getAllParameters () , length . cols () ) ;
Distance : 11

168
Tree	problem cols = cols . getAllParameters () ;
Code	problem cols = cols . getAllParameters () ;
Distance : 6

169
Tree	cols = problem . getAllParameters ()
Code	cols = problem . getAllParameters ()
Distance : 6

170
Tree	final int cols = cols . getAllParameters () ;
Code	final int cols = cols . getAllParameters () ;
Distance : 4

171
Tree	final int cols = cols . getAllParameters ( false , problem ) ;
Code	final int cols = cols . getAllParameters ( false , problem ) ;
Distance : 7

172
Tree	int [] cols = problem . getAllParameters () ;
Code	int [] cols = problem . getAllParameters () ;
Distance : 5

173
Tree	problem = length . getAllParameters ()
Code	problem = length . getAllParameters ()
Distance : 8

174
Tree	final int cols = problem . problem ( length . cols () , length . cols () ) ;
Code	final int cols = problem . problem ( length . cols () , length . cols () ) ;
Distance : 10

175
Tree	public int cols = problem . getAllParameters () - NUMBER_CONSTANT ;
Code	public int cols = problem . getAllParameters () - NUMBER_CONSTANT ;
Distance : 4

176
Tree	final double cols = problem . getAllParameters () . length ;
Code	final double cols = problem . getAllParameters () . length ;
Distance : 2

177
Tree	final int cols = problem . getAllParameters ( mapper.start ) ;
Code	final int cols = problem . getAllParameters ( mapper.start ) ;
Distance : 4

178
Tree	protected int cols = problem . getAllParameters ( new cols [ NUMBER_CONSTANT ] ) ;
Code	protected int cols = problem . getAllParameters ( new cols [ NUMBER_CONSTANT ] ) ;
Distance : 9

179
Tree	final int cols = problem . getAllParameters () . length ;
Code	final int cols = problem . getAllParameters () . length ;
Distance : 1

180
Tree	problem = problem . getAllParameters ()
Code	problem = problem . getAllParameters ()
Distance : 7

181
Tree	final long [] [] cols = problem . getAllParameters () ;
Code	final long [] [] cols = problem . getAllParameters () ;
Distance : 6

182
Tree	cols cols = problem . getAllParameters () ;
Code	cols cols = problem . getAllParameters () ;
Distance : 5

183
Tree	final int length = problem . cols ( length . cols () , length . cols () ) ;
Code	final int length = problem . cols ( length . cols () , length . cols () ) ;
Distance : 11

184
Tree	final boolean cols = problem . getAllParameters () - NUMBER_CONSTANT ;
Code	final boolean cols = problem . getAllParameters () - NUMBER_CONSTANT ;
Distance : 4

185
Tree	final boolean cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final boolean cols = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

186
Tree	private int cols = problem . getAllParameters () . length ;
Code	private int cols = problem . getAllParameters () . length ;
Distance : 2

187
Tree	length = problem . getAllParameters () v.length
Code	length = problem . getAllParameters () v.length
Distance : 7

188
Tree	double cols = cols . getAllParameters () ;
Code	double cols = cols . getAllParameters () ;
Distance : 6

189
Tree	protected int cols = problem . cols ( length . cols () , cols () ) ;
Code	protected int cols = problem . cols ( length . cols () , cols () ) ;
Distance : 10

190
Tree	final int [] [] cols = cols . getAllParameters ( length , NUMBER_CONSTANT ) ;
Code	final int [] [] cols = cols . getAllParameters ( length , NUMBER_CONSTANT ) ;
Distance : 9

191
Tree	final int cols = cols . getAllParameters () . length ;
Code	final int cols = cols . getAllParameters () . length ;
Distance : 2

192
Tree	final int cols = problem . cols ( cols . cols () , length . cols () ) ;
Code	final int cols = problem . cols ( cols . cols () , length . cols () ) ;
Distance : 10

193
Tree	final int cols = problem . getAllParameters () . cols ;
Code	final int cols = problem . getAllParameters () . cols ;
Distance : 2

194
Tree	final int cols = problem . problem ( length . cols () , cols () ) ;
Code	final int cols = problem . problem ( length . cols () , cols () ) ;
Distance : 9

195
Tree	final int length = problem . getAllParameters () - NUMBER_CONSTANT ;
Code	final int length = problem . getAllParameters () - NUMBER_CONSTANT ;
Distance : 4

196
Tree	final double cols = ( ( cols ) problem ) . cols () ;
Code	final double cols = ( ( cols ) problem ) . cols () ;
Distance : 9

197
Tree	final int length = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int length = problem . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

198
Tree	final int cols = cols . cols ( length . cols () , length . cols () ) ;
Code	final int cols = cols . cols ( length . cols () , length . cols () ) ;
Distance : 11

199
Tree	double [] length = problem . getAllParameters () ;
Code	double [] length = problem . getAllParameters () ;
Distance : 6

200
Tree	length = cols . getAllParameters ()
Code	length = cols . getAllParameters ()
Distance : 8

201
Tree	final boolean cols = problem . getAllParameters () . length ;
Code	final boolean cols = problem . getAllParameters () . length ;
Distance : 2

202
Tree	double [] cols = cols . getAllParameters () ;
Code	double [] cols = cols . getAllParameters () ;
Distance : 6

203
Tree	synchronized cols cols = problem . getAllParameters () ;
Code	synchronized cols cols = problem . getAllParameters () ;
Distance : 5

204
Tree	final int cols = ( ( cols ) cols ) . cols () ;
Code	final int cols = ( ( cols ) cols ) . cols () ;
Distance : 8

205
Tree	private int cols = problem . getAllParameters ( new cols [ NUMBER_CONSTANT ] ) ;
Code	private int cols = problem . getAllParameters ( new cols [ NUMBER_CONSTANT ] ) ;
Distance : 9

206
Tree	final boolean cols = problem . getAllParameters ( false , problem ) ;
Code	final boolean cols = problem . getAllParameters ( false , problem ) ;
Distance : 7

207
Tree	double [] [] cols = cols . getAllParameters () ;
Code	double [] [] cols = cols . getAllParameters () ;
Distance : 7

208
Tree	final int length = problem . getAllParameters () . length ;
Code	final int length = problem . getAllParameters () . length ;
Distance : 2

209
Tree	final int cols = cols . getAllParameters () . length ;
Code	final int cols = cols . getAllParameters () . length ;
Distance : 2

210
Tree	final int cols = problem . getAllParameters ( length , residuals.length ) ;
Code	final int cols = problem . getAllParameters ( length , residuals.length ) ;
Distance : 6

211
Tree	int [] [] cols = problem . getAllParameters () ;
Code	int [] [] cols = problem . getAllParameters () ;
Distance : 6

212
Tree	final length cols = problem . getAllParameters () ;
Code	final length cols = problem . getAllParameters () ;
Distance : 4

213
Tree	final long cols = ( ( cols ) problem ) . cols () ;
Code	final long cols = ( ( cols ) problem ) . cols () ;
Distance : 9

214
Tree	final int cols = cols . getAllParameters () - NUMBER_CONSTANT ;
Code	final int cols = cols . getAllParameters () - NUMBER_CONSTANT ;
Distance : 4

215
Tree	final int cols = ( ( length ) cols ) . cols () ;
Code	final int cols = ( ( length ) cols ) . cols () ;
Distance : 8

216
Tree	float [] cols = problem . getAllParameters () ;
Code	float [] cols = problem . getAllParameters () ;
Distance : 5

217
Tree	boolean [] cols = problem . getAllParameters () ;
Code	boolean [] cols = problem . getAllParameters () ;
Distance : 5

218
Tree	final long cols = problem . getAllParameters () . length ;
Code	final long cols = problem . getAllParameters () . length ;
Distance : 2

219
Tree	final double cols = ( ( length ) problem ) . cols () ;
Code	final double cols = ( ( length ) problem ) . cols () ;
Distance : 9

220
Tree	final int [] [] cols = problem . getAllParameters ( cols , NUMBER_CONSTANT ) ;
Code	final int [] [] cols = problem . getAllParameters ( cols , NUMBER_CONSTANT ) ;
Distance : 8

221
Tree	final int cols = problem . getAllParameters () . cols ;
Code	final int cols = problem . getAllParameters () . cols ;
Distance : 2

222
Tree	final int cols = cols . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int cols = cols . getAllParameters ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

223
Tree	final int cols = problem . cols ( length . cols () , cols () ) ;
Code	final int cols = problem . cols ( length . cols () , cols () ) ;
Distance : 9

224
Tree	final int [] [] cols = problem . getAllParameters ( getVariance ) ;
Code	final int [] [] cols = problem . getAllParameters ( getVariance ) ;
Distance : 6

225
Tree	protected int cols = problem . getAllParameters () . length ;
Code	protected int cols = problem . getAllParameters () . length ;
Distance : 2

226
Tree	final int [] [] length = problem . getAllParameters ( length , NUMBER_CONSTANT ) ;
Code	final int [] [] length = problem . getAllParameters ( length , NUMBER_CONSTANT ) ;
Distance : 9

227
Tree	double [] [] length = problem . getAllParameters () ;
Code	double [] [] length = problem . getAllParameters () ;
Distance : 7

228
Tree	protected int [] cols = problem . getAllParameters () ;
Code	protected int [] cols = problem . getAllParameters () ;
Distance : 5

229
Tree	final int [] [] cols = problem . getAllParameters ( Float.MAX_VALUE ) ;
Code	final int [] [] cols = problem . getAllParameters ( Float.MAX_VALUE ) ;
Distance : 6

230
Tree	final int [] [] cols = problem . getAllParameters ( next ) ;
Code	final int [] [] cols = problem . getAllParameters ( next ) ;
Distance : 6

231
Tree	final boolean cols = problem . getAllParameters ( new cols [ NUMBER_CONSTANT ] ) ;
Code	final boolean cols = problem . getAllParameters ( new cols [ NUMBER_CONSTANT ] ) ;
Distance : 9

232
Tree	final double cols = problem . getAllParameters ( false , problem ) ;
Code	final double cols = problem . getAllParameters ( false , problem ) ;
Distance : 7

233
Tree	length length = problem . getAllParameters () ;
Code	length length = problem . getAllParameters () ;
Distance : 6

234
Tree	final int length = problem . getAllParameters ( new cols [ NUMBER_CONSTANT ] ) ;
Code	final int length = problem . getAllParameters ( new cols [ NUMBER_CONSTANT ] ) ;
Distance : 9

235
Tree	final int [] length = problem . getAllParameters () ;
Code	final int [] length = problem . getAllParameters () ;
Distance : 5

236
Tree	final int length = problem . getAllParameters ( false , problem ) ;
Code	final int length = problem . getAllParameters ( false , problem ) ;
Distance : 7

237
Tree	final int cols = problem . getAllParameters ( false , cols ) ;
Code	final int cols = problem . getAllParameters ( false , cols ) ;
Distance : 6

238
Tree	private int [] cols = problem . getAllParameters () ;
Code	private int [] cols = problem . getAllParameters () ;
Distance : 5

239
Tree	final int [] [] problem = problem . getAllParameters () ;
Code	final int [] [] problem = problem . getAllParameters () ;
Distance : 6

240
Tree	final long cols = ( ( length ) problem ) . cols () ;
Code	final long cols = ( ( length ) problem ) . cols () ;
Distance : 9

241
Tree	cols = cols . getAllParameters ()
Code	cols = cols . getAllParameters ()
Distance : 7

242
Tree	final boolean [] [] cols = problem . getAllParameters () ;
Code	final boolean [] [] cols = problem . getAllParameters () ;
Distance : 6

243
Tree	final int cols = problem . getAllParameters ( new length [ NUMBER_CONSTANT ] ) ;
Code	final int cols = problem . getAllParameters ( new length [ NUMBER_CONSTANT ] ) ;
Distance : 7

244
Tree	long [] [] cols = problem . getAllParameters () ;
Code	long [] [] cols = problem . getAllParameters () ;
Distance : 6

245
Tree	final int cols = ( ( cols ) problem ) . cols () ;
Code	final int cols = ( ( cols ) problem ) . cols () ;
Distance : 8

246
Tree	protected int cols = problem . getAllParameters () . length ;
Code	protected int cols = problem . getAllParameters () . length ;
Distance : 2

247
Tree	final void cols = problem . getAllParameters () . length ;
Code	final void cols = problem . getAllParameters () . length ;
Distance : 2

248
Tree	protected int [] [] cols = problem . getAllParameters ( length , NUMBER_CONSTANT ) ;
Code	protected int [] [] cols = problem . getAllParameters ( length , NUMBER_CONSTANT ) ;
Distance : 9

249
Tree	void [] cols = problem . getAllParameters () ;
Code	void [] cols = problem . getAllParameters () ;
Distance : 5

========================================================================


========================================================================
Example Number: 2
Parent Code is: 
final BigDecimal [] out = new BigDecimal [ v.length ] ;
-------------------------------------------------------------------------------
Child code is: 
final BigDecimal [] out = new BigDecimal [ nRows ] ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (5 (43 (801{val=BigDecimal})) (85{val=[]})) (59 (800{val=out}) (204{val==}) (3 (304{val=new}) (5 (43 (801{val=BigDecimal})) (221{val=[})) (40{val=v.length}) (222{val=]}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (5 (43 (801{val=BigDecimal})) (85{val=[]})) (59 (800{val=out}) (204{val==}) (3 (304{val=new}) (5 (43 (801{val=BigDecimal})) (221{val=[})) (800{val=nRows}) (222{val=]}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/98/parent/src_java_org_apache_commons_math_linear_BigMatrixImpl.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 40
Correct
========================================================================
True

0
Tree	final BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Distance : 1

1
Tree	final BigDecimal [] out = nRows . hashCode ( out , null ) ;
Code	final BigDecimal [] out = nRows . hashCode ( out , null ) ;
Distance : 8

2
Tree	final BigDecimal [] out = out . clone ( out , null ) ;
Code	final BigDecimal [] out = out . clone ( out , null ) ;
Distance : 8

3
Tree	final BigDecimal [] out = out . hashCode ( out , null ) ;
Code	final BigDecimal [] out = out . hashCode ( out , null ) ;
Distance : 8

4
Tree	final BigDecimal [] out = new BigDecimal [ out ] ;
Code	final BigDecimal [] out = new BigDecimal [ out ] ;
Distance : 1

5
Tree	final BigDecimal [] out = nRows . getField ( out , null ) ;
Code	final BigDecimal [] out = nRows . getField ( out , null ) ;
Distance : 8

6
Tree	final BigDecimal [] out = nRows . toSpace ( out , null ) ;
Code	final BigDecimal [] out = nRows . toSpace ( out , null ) ;
Distance : 8

7
Tree	final BigDecimal [] out = nRows . vertices ( out , null ) ;
Code	final BigDecimal [] out = nRows . vertices ( out , null ) ;
Distance : 8

8
Tree	final BigDecimal [] out = nRows . buildArray ( out , null ) ;
Code	final BigDecimal [] out = nRows . buildArray ( out , null ) ;
Distance : 8

9
Tree	final BigDecimal [] out = nRows . clone ( out , null ) ;
Code	final BigDecimal [] out = nRows . clone ( out , null ) ;
Distance : 8

10
Tree	public BigDecimal [] out = new BigDecimal [ out ] ;
Code	public BigDecimal [] out = new BigDecimal [ out ] ;
Distance : 2

11
Tree	protected BigDecimal [] out = new BigDecimal [ out ] ;
Code	protected BigDecimal [] out = new BigDecimal [ out ] ;
Distance : 2

12
Tree	final BigDecimal [] out = out . getField ( out , null ) ;
Code	final BigDecimal [] out = out . getField ( out , null ) ;
Distance : 8

13
Tree	final BigDecimal [] out = nRows . getEpsilon ( out , null ) ;
Code	final BigDecimal [] out = nRows . getEpsilon ( out , null ) ;
Distance : 8

14
Tree	public BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Code	public BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Distance : 2

15
Tree	final BigDecimal [] out = new BigDecimal [ nRows ] ;
Code	final BigDecimal [] out = new BigDecimal [ nRows ] ;
Distance : 0

16
Tree	protected BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Code	protected BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Distance : 2

17
Tree	private BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Code	private BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Distance : 2

18
Tree	abstract BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Code	abstract BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Distance : 2

19
Tree	static BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Code	static BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Distance : 2

20
Tree	private BigDecimal [] out = new BigDecimal [ out ] ;
Code	private BigDecimal [] out = new BigDecimal [ out ] ;
Distance : 2

21
Tree	abstract BigDecimal [] out = new BigDecimal [ out ] ;
Code	abstract BigDecimal [] out = new BigDecimal [ out ] ;
Distance : 2

22
Tree	static BigDecimal [] out = new BigDecimal [ out ] ;
Code	static BigDecimal [] out = new BigDecimal [ out ] ;
Distance : 2

23
Tree	public BigDecimal [] out = new BigDecimal [ nRows ] ;
Code	public BigDecimal [] out = new BigDecimal [ nRows ] ;
Distance : 1

24
Tree	protected BigDecimal [] out = new BigDecimal [ nRows ] ;
Code	protected BigDecimal [] out = new BigDecimal [ nRows ] ;
Distance : 1

25
Tree	final BigDecimal [] nRows = new BigDecimal [ out ] ;
Code	final BigDecimal [] nRows = new BigDecimal [ out ] ;
Distance : 2

26
Tree	final BigDecimal [] nRows = new BigDecimal [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] nRows = new BigDecimal [ NUMBER_CONSTANT ] ;
Distance : 2

27
Tree	public BigDecimal [] nRows = new BigDecimal [ NUMBER_CONSTANT ] ;
Code	public BigDecimal [] nRows = new BigDecimal [ NUMBER_CONSTANT ] ;
Distance : 3

28
Tree	public BigDecimal [] nRows = new BigDecimal [ v.length ] ;
Code	public BigDecimal [] nRows = new BigDecimal [ v.length ] ;
Distance : 3

29
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ;
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ;
Distance : 1

30
Tree	public BigDecimal [] out = new BigDecimal [ v.length ] ;
Code	public BigDecimal [] out = new BigDecimal [ v.length ] ;
Distance : 2

31
Tree	protected BigDecimal [] out = new BigDecimal [ v.length ] ;
Code	protected BigDecimal [] out = new BigDecimal [ v.length ] ;
Distance : 2

32
Tree	private BigDecimal [] out = new BigDecimal [ v.length ] ;
Code	private BigDecimal [] out = new BigDecimal [ v.length ] ;
Distance : 2

33
Tree	abstract BigDecimal [] out = new BigDecimal [ v.length ] ;
Code	abstract BigDecimal [] out = new BigDecimal [ v.length ] ;
Distance : 2

34
Tree	synchronized BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Code	synchronized BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Distance : 2

35
Tree	static BigDecimal [] out = new BigDecimal [ v.length ] ;
Code	static BigDecimal [] out = new BigDecimal [ v.length ] ;
Distance : 2

36
Tree	final BigDecimal [] nRows = new BigDecimal [ v.length ] ;
Code	final BigDecimal [] nRows = new BigDecimal [ v.length ] ;
Distance : 2

37
Tree	synchronized BigDecimal [] out = new BigDecimal [ v.length ] ;
Code	synchronized BigDecimal [] out = new BigDecimal [ v.length ] ;
Distance : 2

38
Tree	protected BigDecimal [] nRows = new BigDecimal [ v.length ] ;
Code	protected BigDecimal [] nRows = new BigDecimal [ v.length ] ;
Distance : 3

39
Tree	protected BigDecimal [] nRows = new BigDecimal [ NUMBER_CONSTANT ] ;
Code	protected BigDecimal [] nRows = new BigDecimal [ NUMBER_CONSTANT ] ;
Distance : 3

========================================================================


========================================================================
Example Number: 3
Parent Code is: 
final double [] out = new double [ v.length ] ;
-------------------------------------------------------------------------------
Child code is: 
final double [] out = new double [ nRows ] ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (5 (39{val=double}) (85{val=[]})) (59 (800{val=out}) (204{val==}) (3 (304{val=new}) (5 (39{val=double}) (221{val=[})) (40{val=v.length}) (222{val=]}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (5 (39{val=double}) (85{val=[]})) (59 (800{val=out}) (204{val==}) (3 (304{val=new}) (5 (39{val=double}) (221{val=[})) (800{val=nRows}) (222{val=]}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/98/parent/src_java_org_apache_commons_math_linear_RealMatrixImpl.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 270
Correct
========================================================================
True

0
Tree	final double [] out = new double [ getField () ] ;
Code	final double [] out = new double [ getField () ] ;
Distance : 2

1
Tree	final double [] out = residualsWeights [ NUMBER_CONSTANT ] . clone () ;
Code	final double [] out = residualsWeights [ NUMBER_CONSTANT ] . clone () ;
Distance : 6

2
Tree	final double [] out = out . clone () ;
Code	final double [] out = out . clone () ;
Distance : 5

3
Tree	final double [] out = null ;
Code	final double [] out = null ;
Distance : 5

4
Tree	final double [] out = new double [ mainSetDimension () ] ;
Code	final double [] out = new double [ mainSetDimension () ] ;
Distance : 2

5
Tree	final double [] out = weightedResidualJacobian [ NUMBER_CONSTANT ] . getField () ;
Code	final double [] out = weightedResidualJacobian [ NUMBER_CONSTANT ] . getField () ;
Distance : 6

6
Tree	final double [] out = new double [ FastMath.PI () ] ;
Code	final double [] out = new double [ FastMath.PI () ] ;
Distance : 2

7
Tree	final double [] out = new double [ cov.length () ] ;
Code	final double [] out = new double [ cov.length () ] ;
Distance : 2

8
Tree	final double [] out = residualsWeights [ NUMBER_CONSTANT ] . getField () ;
Code	final double [] out = residualsWeights [ NUMBER_CONSTANT ] . getField () ;
Distance : 6

9
Tree	final double [] out = new double [ getUpperBound () ] ;
Code	final double [] out = new double [ getUpperBound () ] ;
Distance : 2

10
Tree	final double [] out = new double [ out . clone ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ out . clone ( NUMBER_CONSTANT ) ] ;
Distance : 6

11
Tree	final double [] out = CosAngle [ out ] . clone () ;
Code	final double [] out = CosAngle [ out ] . clone () ;
Distance : 6

12
Tree	final double [] out = Coordinates3D [ out ] ;
Code	final double [] out = Coordinates3D [ out ] ;
Distance : 3

13
Tree	final double [] out = out . copyOf ( NUMBER_CONSTANT ) ;
Code	final double [] out = out . copyOf ( NUMBER_CONSTANT ) ;
Distance : 6

14
Tree	final double [] out = RealVector [ out ] . clone () ;
Code	final double [] out = RealVector [ out ] . clone () ;
Distance : 6

15
Tree	final double [] getSizes ( final double . . . out ) { return out ; }
Code	final double [] getSizes ( final double . . . out ) { return out ; }
Distance : 12

16
Tree	final double [] out = point ( out , v.length ) ;
Code	final double [] out = point ( out , v.length ) ;
Distance : 6

17
Tree	final double [] out = out . ceil ( NUMBER_CONSTANT ) ;
Code	final double [] out = out . ceil ( NUMBER_CONSTANT ) ;
Distance : 6

18
Tree	final double [] out = new double [ nRows ] ;
Code	final double [] out = new double [ nRows ] ;
Distance : 0

19
Tree	final double [] out = getStartPoint ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = getStartPoint ( out , NUMBER_CONSTANT ) ;
Distance : 6

20
Tree	final double [] out = getStartPoint ( out , false ) ;
Code	final double [] out = getStartPoint ( out , false ) ;
Distance : 6

21
Tree	final double [] out = clone ( out ) ;
Code	final double [] out = clone ( out ) ;
Distance : 5

22
Tree	final double [] out = clone ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = clone ( out , NUMBER_CONSTANT ) ;
Distance : 6

23
Tree	final double [] out = out . getInterpolatedState () ;
Code	final double [] out = out . getInterpolatedState () ;
Distance : 5

24
Tree	final double [] out = clone ( out , false ) ;
Code	final double [] out = clone ( out , false ) ;
Distance : 6

25
Tree	static double [] out = null ;
Code	static double [] out = null ;
Distance : 6

26
Tree	final double [] out = getOffset ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = getOffset ( out , NUMBER_CONSTANT ) ;
Distance : 6

27
Tree	final double [] out = fft ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = fft ( out , NUMBER_CONSTANT ) ;
Distance : 6

28
Tree	final double [] out = getStartPoint ( out , out ) ;
Code	final double [] out = getStartPoint ( out , out ) ;
Distance : 6

29
Tree	int [] out = out . clone () ;
Code	int [] out = out . clone () ;
Distance : 7

30
Tree	final double [] out = residualsWeights [ out ] ;
Code	final double [] out = residualsWeights [ out ] ;
Distance : 3

31
Tree	final double [] out = computeSigma ( out , v.length ) ;
Code	final double [] out = computeSigma ( out , v.length ) ;
Distance : 6

32
Tree	final double [] out = copyOf ( out , v.length ) ;
Code	final double [] out = copyOf ( out , v.length ) ;
Distance : 6

33
Tree	final double [] out = getInterpolatedState ( out , false ) ;
Code	final double [] out = getInterpolatedState ( out , false ) ;
Distance : 6

34
Tree	final double [] out = out . vertices () ;
Code	final double [] out = out . vertices () ;
Distance : 5

35
Tree	final double [] out = new double [ out . size ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ out . size ( NUMBER_CONSTANT ) ] ;
Distance : 6

36
Tree	final double [] out = buildArray ( out , false ) ;
Code	final double [] out = buildArray ( out , false ) ;
Distance : 6

37
Tree	final double [] out ( final double . . . out ) { return out ; }
Code	final double [] out ( final double . . . out ) { return out ; }
Distance : 11

38
Tree	private double [] out = {} ;
Code	private double [] out = {} ;
Distance : 6

39
Tree	double [] out = out . natural () ;
Code	double [] out = out . natural () ;
Distance : 6

40
Tree	final double [] getLineSegments ( final double . . . out ) { return out ; }
Code	final double [] getLineSegments ( final double . . . out ) { return out ; }
Distance : 12

41
Tree	protected double [] out = STRING_CONSTANT + out ;
Code	protected double [] out = STRING_CONSTANT + out ;
Distance : 6

42
Tree	abstract double [] out = null ;
Code	abstract double [] out = null ;
Distance : 6

43
Tree	final double [] out = out . ceil ( NUMBER_CONSTANT , v.length ) ;
Code	final double [] out = out . ceil ( NUMBER_CONSTANT , v.length ) ;
Distance : 8

44
Tree	private double [] out = new double [ out ] ;
Code	private double [] out = new double [ out ] ;
Distance : 2

45
Tree	final double [] out = nRows . out ( NUMBER_CONSTANT ) ;
Code	final double [] out = nRows . out ( NUMBER_CONSTANT ) ;
Distance : 6

46
Tree	final double [] out = out . nRows ( NUMBER_CONSTANT ) ;
Code	final double [] out = out . nRows ( NUMBER_CONSTANT ) ;
Distance : 6

47
Tree	private double [] out = out ;
Code	private double [] out = out ;
Distance : 6

48
Tree	final double [] out = out . getInterpolatedState ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = out . getInterpolatedState ( out , NUMBER_CONSTANT ) ;
Distance : 8

49
Tree	final long [] out = out . out ( NUMBER_CONSTANT ) ;
Code	final long [] out = out . out ( NUMBER_CONSTANT ) ;
Distance : 7

50
Tree	void [] out = new double [ out ] ;
Code	void [] out = new double [ out ] ;
Distance : 3

51
Tree	final double [] getSingularValues ( final double . . . out ) { return out ; }
Code	final double [] getSingularValues ( final double . . . out ) { return out ; }
Distance : 12

52
Tree	final double [] loadExpIntA ( final double . . . out ) { return out ; }
Code	final double [] loadExpIntA ( final double . . . out ) { return out ; }
Distance : 12

53
Tree	final double [] out = new double [ out . getOffset ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ out . getOffset ( NUMBER_CONSTANT ) ] ;
Distance : 6

54
Tree	final double [] out = clone ( out , out ) ;
Code	final double [] out = clone ( out , out ) ;
Distance : 6

55
Tree	final long [] out = null ;
Code	final long [] out = null ;
Distance : 6

56
Tree	final double [] out = out . getInterpolatedState ( NUMBER_CONSTANT ) ;
Code	final double [] out = out . getInterpolatedState ( NUMBER_CONSTANT ) ;
Distance : 6

57
Tree	final void [] out = {} ;
Code	final void [] out = {} ;
Distance : 6

58
Tree	public double [] out = out . out ( NUMBER_CONSTANT ) ;
Code	public double [] out = out . out ( NUMBER_CONSTANT ) ;
Distance : 7

59
Tree	final double [] out = out . getInterpolatedState ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = out . getInterpolatedState ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

60
Tree	int [] out = new double [ out ] ;
Code	int [] out = new double [ out ] ;
Distance : 3

61
Tree	final double [] out = out . getInterpolatedState ( out , v.length ) ;
Code	final double [] out = out . getInterpolatedState ( out , v.length ) ;
Distance : 8

62
Tree	final boolean [] out = STRING_CONSTANT + out ;
Code	final boolean [] out = STRING_CONSTANT + out ;
Distance : 6

63
Tree	protected double [] out = out . out ( NUMBER_CONSTANT ) ;
Code	protected double [] out = out . out ( NUMBER_CONSTANT ) ;
Distance : 7

64
Tree	private double [] out = out . out ( NUMBER_CONSTANT ) ;
Code	private double [] out = out . out ( NUMBER_CONSTANT ) ;
Distance : 7

65
Tree	final double [] out = copyOf ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = copyOf ( out , NUMBER_CONSTANT ) ;
Distance : 6

66
Tree	final double [] out = new double [ out . min ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ out . min ( NUMBER_CONSTANT ) ] ;
Distance : 6

67
Tree	final double [] out = out . clone ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = out . clone ( out , NUMBER_CONSTANT ) ;
Distance : 8

68
Tree	final double [] out = getStartPoint ( out , v.length ) ;
Code	final double [] out = getStartPoint ( out , v.length ) ;
Distance : 6

69
Tree	final double [] out = getOffset ( out , false ) ;
Code	final double [] out = getOffset ( out , false ) ;
Distance : 6

70
Tree	final double [] out = new int [ v.length ] ;
Code	final double [] out = new int [ v.length ] ;
Distance : 2

71
Tree	final long [] out = {} ;
Code	final long [] out = {} ;
Distance : 6

72
Tree	final double [] out = fft ( out , false ) ;
Code	final double [] out = fft ( out , false ) ;
Distance : 6

73
Tree	final double [] out = {} ;
Code	final double [] out = {} ;
Distance : 5

74
Tree	final double [] out = nRows . nRows ( NUMBER_CONSTANT ) ;
Code	final double [] out = nRows . nRows ( NUMBER_CONSTANT ) ;
Distance : 6

75
Tree	final double [] out = out . out ( NUMBER_CONSTANT ) ;
Code	final double [] out = out . out ( NUMBER_CONSTANT ) ;
Distance : 6

76
Tree	final void [] out = new double [ v.length ] ;
Code	final void [] out = new double [ v.length ] ;
Distance : 2

77
Tree	protected double [] out = null ;
Code	protected double [] out = null ;
Distance : 6

78
Tree	final long [] out = out ;
Code	final long [] out = out ;
Distance : 6

79
Tree	final double [] getOrderOfRegressors ( final double . . . out ) { return out ; }
Code	final double [] getOrderOfRegressors ( final double . . . out ) { return out ; }
Distance : 12

80
Tree	final double [] out = weightedResidualJacobian [ out ] . clone () ;
Code	final double [] out = weightedResidualJacobian [ out ] . clone () ;
Distance : 6

81
Tree	final double [] out = out . vertices ( NUMBER_CONSTANT ) ;
Code	final double [] out = out . vertices ( NUMBER_CONSTANT ) ;
Distance : 6

82
Tree	final long [] out = new double [ out ] ;
Code	final long [] out = new double [ out ] ;
Distance : 2

83
Tree	final double [] out = out . clone ( NUMBER_CONSTANT , v.length ) ;
Code	final double [] out = out . clone ( NUMBER_CONSTANT , v.length ) ;
Distance : 8

84
Tree	long [] out = new double [ out ] ;
Code	long [] out = new double [ out ] ;
Distance : 3

85
Tree	final double [] out = computeSigma ( out , false ) ;
Code	final double [] out = computeSigma ( out , false ) ;
Distance : 6

86
Tree	final double [] out = new double [ out . reciprocal ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ out . reciprocal ( NUMBER_CONSTANT ) ] ;
Distance : 6

87
Tree	final int [] out = new double [ v.length ] ;
Code	final int [] out = new double [ v.length ] ;
Distance : 2

88
Tree	final double [] out = y0 [ out ] ;
Code	final double [] out = y0 [ out ] ;
Distance : 3

89
Tree	double [] out = out . computeSigma () ;
Code	double [] out = out . computeSigma () ;
Distance : 6

90
Tree	final void [] out = new double [ out ] ;
Code	final void [] out = new double [ out ] ;
Distance : 2

91
Tree	final boolean [] out = {} ;
Code	final boolean [] out = {} ;
Distance : 6

92
Tree	final double [] out = out . hashCode ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = out . hashCode ( out , NUMBER_CONSTANT ) ;
Distance : 8

93
Tree	final double [] getStartPoint ( final double . . . out ) { return out ; }
Code	final double [] getStartPoint ( final double . . . out ) { return out ; }
Distance : 12

94
Tree	public double [] out = STRING_CONSTANT + out ;
Code	public double [] out = STRING_CONSTANT + out ;
Distance : 6

95
Tree	final int [] out = out ;
Code	final int [] out = out ;
Distance : 6

96
Tree	final double [] out = getInterpolatedState ( out ) ;
Code	final double [] out = getInterpolatedState ( out ) ;
Distance : 5

97
Tree	final double [] out = residualsWeights [ out ] . clone () ;
Code	final double [] out = residualsWeights [ out ] . clone () ;
Distance : 6

98
Tree	final long [] out = new double [ v.length ] ;
Code	final long [] out = new double [ v.length ] ;
Distance : 2

99
Tree	final boolean [] out = null ;
Code	final boolean [] out = null ;
Distance : 6

100
Tree	final double [] out = new double [ out ] ;
Code	final double [] out = new double [ out ] ;
Distance : 1

101
Tree	final double [] out = copyOf ( out , false ) ;
Code	final double [] out = copyOf ( out , false ) ;
Distance : 6

102
Tree	final double [] out = out . clone ( out , v.length ) ;
Code	final double [] out = out . clone ( out , v.length ) ;
Distance : 8

103
Tree	final double [] out = getOffset ( out , v.length ) ;
Code	final double [] out = getOffset ( out , v.length ) ;
Distance : 6

104
Tree	final int [] out = new double [ out ] ;
Code	final int [] out = new double [ out ] ;
Distance : 2

105
Tree	final double [] out = out . natural ( out , v.length ) ;
Code	final double [] out = out . natural ( out , v.length ) ;
Distance : 8

106
Tree	final double [] out = fft ( out , v.length ) ;
Code	final double [] out = fft ( out , v.length ) ;
Distance : 6

107
Tree	final double [] out = new int [ out ] ;
Code	final double [] out = new int [ out ] ;
Distance : 2

108
Tree	final double [] out = buildArray ( out ) ;
Code	final double [] out = buildArray ( out ) ;
Distance : 5

109
Tree	final double [] out = out . computeCovariances () ;
Code	final double [] out = out . computeCovariances () ;
Distance : 5

110
Tree	private double [] out = STRING_CONSTANT + out ;
Code	private double [] out = STRING_CONSTANT + out ;
Distance : 6

111
Tree	public double [] out = new double [ v.length ] ;
Code	public double [] out = new double [ v.length ] ;
Distance : 2

112
Tree	final boolean [] out = out ;
Code	final boolean [] out = out ;
Distance : 6

113
Tree	static double [] out = out ;
Code	static double [] out = out ;
Distance : 6

114
Tree	final double [] out = computeCovariances ( out ) ;
Code	final double [] out = computeCovariances ( out ) ;
Distance : 5

115
Tree	final double [] out = out ;
Code	final double [] out = out ;
Distance : 5

116
Tree	final double [] out = getInterpolatedState ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = getInterpolatedState ( out , NUMBER_CONSTANT ) ;
Distance : 6

117
Tree	final double [] out = new double [ out . getField ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ out . getField ( NUMBER_CONSTANT ) ] ;
Distance : 6

118
Tree	final double [] out = out . hashCode ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = out . hashCode ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

119
Tree	abstract double [] out = {} ;
Code	abstract double [] out = {} ;
Distance : 6

120
Tree	final double [] out = buildArray ( out , v.length ) ;
Code	final double [] out = buildArray ( out , v.length ) ;
Distance : 6

121
Tree	final double [] out = out . copyOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = out . copyOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

122
Tree	protected double [] out = new double [ v.length ] ;
Code	protected double [] out = new double [ v.length ] ;
Distance : 2

123
Tree	final double [] out = getInterpolatedState ( out , v.length ) ;
Code	final double [] out = getInterpolatedState ( out , v.length ) ;
Distance : 6

124
Tree	final double [] out = out . ceil ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = out . ceil ( out , NUMBER_CONSTANT ) ;
Distance : 8

125
Tree	long [] out = new double [ nRows ] ;
Code	long [] out = new double [ nRows ] ;
Distance : 2

126
Tree	final double [] out = out . computeSigma ( out , v.length ) ;
Code	final double [] out = out . computeSigma ( out , v.length ) ;
Distance : 8

127
Tree	private double [] out = new double [ v.length ] ;
Code	private double [] out = new double [ v.length ] ;
Distance : 2

128
Tree	final double [] out = new double [ out . normalizeBetweenZeroAndTwoPi ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ out . normalizeBetweenZeroAndTwoPi ( NUMBER_CONSTANT ) ] ;
Distance : 6

129
Tree	final boolean [] out = new double [ out ] ;
Code	final boolean [] out = new double [ out ] ;
Distance : 2

130
Tree	final void [] out = STRING_CONSTANT + out ;
Code	final void [] out = STRING_CONSTANT + out ;
Distance : 6

131
Tree	final double [] out = out . getInterpolatedState ( NUMBER_CONSTANT , v.length ) ;
Code	final double [] out = out . getInterpolatedState ( NUMBER_CONSTANT , v.length ) ;
Distance : 8

132
Tree	final int [] out = {} ;
Code	final int [] out = {} ;
Distance : 6

133
Tree	final double [] out = buildArray ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = buildArray ( out , NUMBER_CONSTANT ) ;
Distance : 6

134
Tree	final double [] out = out . ceil ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = out . ceil ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

135
Tree	final double [] out = out . vertices ( out , v.length ) ;
Code	final double [] out = out . vertices ( out , v.length ) ;
Distance : 8

136
Tree	double [] out = new double [ out ] ;
Code	double [] out = new double [ out ] ;
Distance : 2

137
Tree	boolean [] out = new double [ nRows ] ;
Code	boolean [] out = new double [ nRows ] ;
Distance : 2

138
Tree	double [] out = out . computeCovariances () ;
Code	double [] out = out . computeCovariances () ;
Distance : 6

139
Tree	final double [] out = nRows . clone ( out , v.length ) ;
Code	final double [] out = nRows . clone ( out , v.length ) ;
Distance : 8

140
Tree	final double [] out = out . copyOf ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = out . copyOf ( out , NUMBER_CONSTANT ) ;
Distance : 8

141
Tree	final double [] out = new double [ nRows . clone ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ nRows . clone ( NUMBER_CONSTANT ) ] ;
Distance : 5

142
Tree	final double [] out = getOffset ( out ) ;
Code	final double [] out = getOffset ( out ) ;
Distance : 5

143
Tree	final double [] out = out . computeCovariances ( out , v.length ) ;
Code	final double [] out = out . computeCovariances ( out , v.length ) ;
Distance : 8

144
Tree	final long [] out = STRING_CONSTANT + out ;
Code	final long [] out = STRING_CONSTANT + out ;
Distance : 6

145
Tree	double [] out = out . vertices () ;
Code	double [] out = out . vertices () ;
Distance : 6

146
Tree	final double [] out = computeSigma ( out , out ) ;
Code	final double [] out = computeSigma ( out , out ) ;
Distance : 6

147
Tree	final double [] out = out . hashCode ( out , v.length ) ;
Code	final double [] out = out . hashCode ( out , v.length ) ;
Distance : 8

148
Tree	final double [] getUpperBound ( final double . . . out ) { return out ; }
Code	final double [] getUpperBound ( final double . . . out ) { return out ; }
Distance : 12

149
Tree	final double [] out = copyOf ( out , out ) ;
Code	final double [] out = copyOf ( out , out ) ;
Distance : 6

150
Tree	final double [] out = CosAngle [ out ] ;
Code	final double [] out = CosAngle [ out ] ;
Distance : 3

151
Tree	final void [] out = out . out ( NUMBER_CONSTANT ) ;
Code	final void [] out = out . out ( NUMBER_CONSTANT ) ;
Distance : 7

152
Tree	final double [] out = out . copyOf ( out , v.length ) ;
Code	final double [] out = out . copyOf ( out , v.length ) ;
Distance : 8

153
Tree	final double [] out = fft ( out ) ;
Code	final double [] out = fft ( out ) ;
Distance : 5

154
Tree	final double [] out = out . hashCode ( NUMBER_CONSTANT ) ;
Code	final double [] out = out . hashCode ( NUMBER_CONSTANT ) ;
Distance : 6

155
Tree	final double [] out = out . natural ( NUMBER_CONSTANT ) ;
Code	final double [] out = out . natural ( NUMBER_CONSTANT ) ;
Distance : 6

156
Tree	final double [] out = out . computeCovariances ( NUMBER_CONSTANT , v.length ) ;
Code	final double [] out = out . computeCovariances ( NUMBER_CONSTANT , v.length ) ;
Distance : 8

157
Tree	final double [] out = new double [ out . normalize ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ out . normalize ( NUMBER_CONSTANT ) ] ;
Distance : 6

158
Tree	final double [] out = AINV [ out ] ;
Code	final double [] out = AINV [ out ] ;
Distance : 3

159
Tree	static double [] out = {} ;
Code	static double [] out = {} ;
Distance : 6

160
Tree	final double [] out = out . natural ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = out . natural ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

161
Tree	final double [] out = STRING_CONSTANT + nRows ;
Code	final double [] out = STRING_CONSTANT + nRows ;
Distance : 4

162
Tree	boolean [] out = out . clone () ;
Code	boolean [] out = out . clone () ;
Distance : 7

163
Tree	final double [] out = point [ out ] . clone () ;
Code	final double [] out = point [ out ] . clone () ;
Distance : 6

164
Tree	final double [] getLowerBound ( final double . . . out ) { return out ; }
Code	final double [] getLowerBound ( final double . . . out ) { return out ; }
Distance : 12

165
Tree	void [] out = new double [ nRows ] ;
Code	void [] out = new double [ nRows ] ;
Distance : 2

166
Tree	final double [] out = out . computeSigma ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = out . computeSigma ( out , NUMBER_CONSTANT ) ;
Distance : 8

167
Tree	final double [] out = new double [ MACH_PREC () ] ;
Code	final double [] out = new double [ MACH_PREC () ] ;
Distance : 2

168
Tree	final double [] out = residualsWeights [ out ] . intValue () ;
Code	final double [] out = residualsWeights [ out ] . intValue () ;
Distance : 6

169
Tree	final double [] out = new double [ getStartPoint () ] ;
Code	final double [] out = new double [ getStartPoint () ] ;
Distance : 2

170
Tree	final int [] out = STRING_CONSTANT + out ;
Code	final int [] out = STRING_CONSTANT + out ;
Distance : 6

171
Tree	byte [] out = new double [ out ] ;
Code	byte [] out = new double [ out ] ;
Distance : 3

172
Tree	final double [] out = RealVector [ out ] ;
Code	final double [] out = RealVector [ out ] ;
Distance : 3

173
Tree	final double [] out = out . ceil ( out , v.length ) ;
Code	final double [] out = out . ceil ( out , v.length ) ;
Distance : 8

174
Tree	final double [] out = computeCovariances ( out , out ) ;
Code	final double [] out = computeCovariances ( out , out ) ;
Distance : 6

175
Tree	final double [] out = point ( out ) ;
Code	final double [] out = point ( out ) ;
Distance : 5

176
Tree	final double [] out = AINV [ out ] . clone () ;
Code	final double [] out = AINV [ out ] . clone () ;
Distance : 6

177
Tree	final double [] out = out . hashCode () ;
Code	final double [] out = out . hashCode () ;
Distance : 5

178
Tree	final double [] out = nRows . clone ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = nRows . clone ( out , NUMBER_CONSTANT ) ;
Distance : 8

179
Tree	final double [] out = out . natural ( NUMBER_CONSTANT , v.length ) ;
Code	final double [] out = out . natural ( NUMBER_CONSTANT , v.length ) ;
Distance : 8

180
Tree	final double [] out = out . computeSigma ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = out . computeSigma ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

181
Tree	protected double [] out = new double [ v.length ] ;
Code	protected double [] out = new double [ v.length ] ;
Distance : 2

182
Tree	final double [] out = new double [ isSequence () ] ;
Code	final double [] out = new double [ isSequence () ] ;
Distance : 2

183
Tree	final double [] out = out . computeSigma ( NUMBER_CONSTANT ) ;
Code	final double [] out = out . computeSigma ( NUMBER_CONSTANT ) ;
Distance : 6

184
Tree	final void [] out = new double [ v.length ] ;
Code	final void [] out = new double [ v.length ] ;
Distance : 2

185
Tree	final double [] out = point ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = point ( out , NUMBER_CONSTANT ) ;
Distance : 6

186
Tree	final double [] out = weightedResidualJacobian [ NUMBER_CONSTANT ] . clone () ;
Code	final double [] out = weightedResidualJacobian [ NUMBER_CONSTANT ] . clone () ;
Distance : 6

187
Tree	final void [] out = null ;
Code	final void [] out = null ;
Distance : 6

188
Tree	final double [] out = y0 [ NUMBER_CONSTANT ] . getField () ;
Code	final double [] out = y0 [ NUMBER_CONSTANT ] . getField () ;
Distance : 6

189
Tree	final double [] getEigenvalues ( final double . . . out ) { return out ; }
Code	final double [] getEigenvalues ( final double . . . out ) { return out ; }
Distance : 12

190
Tree	final double [] out = nRows . clone ( NUMBER_CONSTANT , v.length ) ;
Code	final double [] out = nRows . clone ( NUMBER_CONSTANT , v.length ) ;
Distance : 8

191
Tree	final int [] out = new double [ v.length ] ;
Code	final int [] out = new double [ v.length ] ;
Distance : 2

192
Tree	final double [] out = point ( out , false ) ;
Code	final double [] out = point ( out , false ) ;
Distance : 6

193
Tree	final double [] out = residualsWeights [ out ] . getField () ;
Code	final double [] out = residualsWeights [ out ] . getField () ;
Distance : 6

194
Tree	double [] out = out . getInterpolatedState () ;
Code	double [] out = out . getInterpolatedState () ;
Distance : 6

195
Tree	final double [] out = y0 [ NUMBER_CONSTANT ] . clone () ;
Code	final double [] out = y0 [ NUMBER_CONSTANT ] . clone () ;
Distance : 6

196
Tree	final double [] out = out . computeSigma ( NUMBER_CONSTANT , v.length ) ;
Code	final double [] out = out . computeSigma ( NUMBER_CONSTANT , v.length ) ;
Distance : 8

197
Tree	final double [] out = nRows . clone ( NUMBER_CONSTANT ) ;
Code	final double [] out = nRows . clone ( NUMBER_CONSTANT ) ;
Distance : 6

198
Tree	final double [] out = data [ out ] ;
Code	final double [] out = data [ out ] ;
Distance : 3

199
Tree	final double [] out = y0 [ out ] . clone () ;
Code	final double [] out = y0 [ out ] . clone () ;
Distance : 6

200
Tree	final double [] out = currentResiduals [ NUMBER_CONSTANT ] . getField () ;
Code	final double [] out = currentResiduals [ NUMBER_CONSTANT ] . getField () ;
Distance : 6

201
Tree	final double [] out = new double [ v.length ] ;
Code	final double [] out = new double [ v.length ] ;
Distance : 1

202
Tree	final double [] out = getInterpolatedState ( out , out ) ;
Code	final double [] out = getInterpolatedState ( out , out ) ;
Distance : 6

203
Tree	public double [] out = new double [ v.length ] ;
Code	public double [] out = new double [ v.length ] ;
Distance : 2

204
Tree	final double [] out = out . vertices ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = out . vertices ( out , NUMBER_CONSTANT ) ;
Distance : 8

205
Tree	final double [] out = nRows . clone ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = nRows . clone ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

206
Tree	final double [] out = out . vertices ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = out . vertices ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

207
Tree	final double [] out = currentResiduals [ out ] ;
Code	final double [] out = currentResiduals [ out ] ;
Distance : 3

208
Tree	final double [] out = computeCovariances ( out , v.length ) ;
Code	final double [] out = computeCovariances ( out , v.length ) ;
Distance : 6

209
Tree	final long [] out = new double [ v.length ] ;
Code	final long [] out = new double [ v.length ] ;
Distance : 2

210
Tree	final double [] out = out . computeCovariances ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = out . computeCovariances ( out , NUMBER_CONSTANT ) ;
Distance : 8

211
Tree	final double [] out = currentResiduals [ NUMBER_CONSTANT ] . clone () ;
Code	final double [] out = currentResiduals [ NUMBER_CONSTANT ] . clone () ;
Distance : 6

212
Tree	final double [] out = STRING_CONSTANT + out ;
Code	final double [] out = STRING_CONSTANT + out ;
Distance : 5

213
Tree	final double [] out = out . vertices ( NUMBER_CONSTANT , v.length ) ;
Code	final double [] out = out . vertices ( NUMBER_CONSTANT , v.length ) ;
Distance : 8

214
Tree	final double [] out = out . hashCode ( NUMBER_CONSTANT , v.length ) ;
Code	final double [] out = out . hashCode ( NUMBER_CONSTANT , v.length ) ;
Distance : 8

215
Tree	final double [] out = new double [ y.length () ] ;
Code	final double [] out = new double [ y.length () ] ;
Distance : 2

216
Tree	final double [] out = point [ NUMBER_CONSTANT ] . getField () ;
Code	final double [] out = point [ NUMBER_CONSTANT ] . getField () ;
Distance : 6

217
Tree	final double [] out = AINV [ NUMBER_CONSTANT ] . getField () ;
Code	final double [] out = AINV [ NUMBER_CONSTANT ] . getField () ;
Distance : 6

218
Tree	final double [] out = fft ( out , out ) ;
Code	final double [] out = fft ( out , out ) ;
Distance : 6

219
Tree	final double [] out = getOffset ( out , out ) ;
Code	final double [] out = getOffset ( out , out ) ;
Distance : 6

220
Tree	private double [] out = null ;
Code	private double [] out = null ;
Distance : 6

221
Tree	final double [] out = new double [ out . getPole ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ out . getPole ( NUMBER_CONSTANT ) ] ;
Distance : 6

222
Tree	final double [] out = out . copyOf () ;
Code	final double [] out = out . copyOf () ;
Distance : 5

223
Tree	final double [] out = currentResiduals [ out ] . clone () ;
Code	final double [] out = currentResiduals [ out ] . clone () ;
Distance : 6

224
Tree	final void [] out = out ;
Code	final void [] out = out ;
Distance : 6

225
Tree	final boolean [] out = new double [ v.length ] ;
Code	final boolean [] out = new double [ v.length ] ;
Distance : 2

226
Tree	final double [] out = out . computeCovariances ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = out . computeCovariances ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

227
Tree	final int [] out = out . out ( NUMBER_CONSTANT ) ;
Code	final int [] out = out . out ( NUMBER_CONSTANT ) ;
Distance : 7

228
Tree	double [] out = out . clone () ;
Code	double [] out = out . clone () ;
Distance : 6

229
Tree	final double [] out = clone ( out , v.length ) ;
Code	final double [] out = clone ( out , v.length ) ;
Distance : 6

230
Tree	public double [] out = null ;
Code	public double [] out = null ;
Distance : 6

231
Tree	final double [] out = new int [ v.length ] ;
Code	final double [] out = new int [ v.length ] ;
Distance : 2

232
Tree	final int [] out = null ;
Code	final int [] out = null ;
Distance : 6

233
Tree	final double [] out = new double [ source.moment () ] ;
Code	final double [] out = new double [ source.moment () ] ;
Distance : 2

234
Tree	final double [] out = getStartPoint ( out ) ;
Code	final double [] out = getStartPoint ( out ) ;
Distance : 5

235
Tree	private double [] out = new double [ v.length ] ;
Code	private double [] out = new double [ v.length ] ;
Distance : 2

236
Tree	final double [] out = buildArray ( out , out ) ;
Code	final double [] out = buildArray ( out , out ) ;
Distance : 6

237
Tree	final double [] out = nRows ;
Code	final double [] out = nRows ;
Distance : 4

238
Tree	final double [] out = point ( out , out ) ;
Code	final double [] out = point ( out , out ) ;
Distance : 6

239
Tree	final double [] out = out . ceil () ;
Code	final double [] out = out . ceil () ;
Distance : 5

240
Tree	final boolean [] out = new double [ v.length ] ;
Code	final boolean [] out = new double [ v.length ] ;
Distance : 2

241
Tree	final double [] out = out . clone ( NUMBER_CONSTANT ) ;
Code	final double [] out = out . clone ( NUMBER_CONSTANT ) ;
Distance : 6

242
Tree	final double [] out = out . natural ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = out . natural ( out , NUMBER_CONSTANT ) ;
Distance : 8

243
Tree	final double [] out = out . natural () ;
Code	final double [] out = out . natural () ;
Distance : 5

244
Tree	final double [] out = out . clone ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = out . clone ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

245
Tree	final double [] out = out . computeCovariances ( NUMBER_CONSTANT ) ;
Code	final double [] out = out . computeCovariances ( NUMBER_CONSTANT ) ;
Distance : 6

246
Tree	final double [] out = computeCovariances ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = computeCovariances ( out , NUMBER_CONSTANT ) ;
Distance : 6

247
Tree	final double [] out = computeSigma ( out ) ;
Code	final double [] out = computeSigma ( out ) ;
Distance : 5

248
Tree	final double [] out = weightedResidualJacobian [ out ] ;
Code	final double [] out = weightedResidualJacobian [ out ] ;
Distance : 3

249
Tree	final double [] out = new double [ v.length ] ;
Code	final double [] out = new double [ v.length ] ;
Distance : 1

250
Tree	final double [] out = out . copyOf ( NUMBER_CONSTANT , v.length ) ;
Code	final double [] out = out . copyOf ( NUMBER_CONSTANT , v.length ) ;
Distance : 8

251
Tree	double [] out = new double [ nRows ] ;
Code	double [] out = new double [ nRows ] ;
Distance : 1

252
Tree	public double [] out = {} ;
Code	public double [] out = {} ;
Distance : 6

253
Tree	final double [] out = copyOf ( out ) ;
Code	final double [] out = copyOf ( out ) ;
Distance : 5

254
Tree	final double [] out = out . computeSigma () ;
Code	final double [] out = out . computeSigma () ;
Distance : 5

255
Tree	final double [] out = point [ out ] ;
Code	final double [] out = point [ out ] ;
Distance : 3

256
Tree	boolean [] out = new double [ out ] ;
Code	boolean [] out = new double [ out ] ;
Distance : 3

257
Tree	long [] out = out . clone () ;
Code	long [] out = out . clone () ;
Distance : 7

258
Tree	protected double [] out = {} ;
Code	protected double [] out = {} ;
Distance : 6

259
Tree	static double [] out = STRING_CONSTANT + out ;
Code	static double [] out = STRING_CONSTANT + out ;
Distance : 6

260
Tree	protected double [] out = new double [ out ] ;
Code	protected double [] out = new double [ out ] ;
Distance : 2

261
Tree	public double [] out = new double [ out ] ;
Code	public double [] out = new double [ out ] ;
Distance : 2

262
Tree	final double [] out = computeSigma ( out , NUMBER_CONSTANT ) ;
Code	final double [] out = computeSigma ( out , NUMBER_CONSTANT ) ;
Distance : 6

263
Tree	final double [] out = new long [ v.length ] ;
Code	final double [] out = new long [ v.length ] ;
Distance : 2

264
Tree	final double [] out = nRows . clone () ;
Code	final double [] out = nRows . clone () ;
Distance : 5

265
Tree	final double [] out = new long [ v.length ] ;
Code	final double [] out = new long [ v.length ] ;
Distance : 2

266
Tree	final double [] out = computeCovariances ( out , false ) ;
Code	final double [] out = computeCovariances ( out , false ) ;
Distance : 6

267
Tree	public double [] out = out ;
Code	public double [] out = out ;
Distance : 6

268
Tree	void [] out = out . clone () ;
Code	void [] out = out . clone () ;
Distance : 7

269
Tree	protected double [] out = out ;
Code	protected double [] out = out ;
Distance : 6

========================================================================


========================================================================
Example Number: 4
Parent Code is: 
int start = getNumObjectiveFunctions () ;
-------------------------------------------------------------------------------
Child code is: 
int start = ignoreObjectiveRows ? getNumObjectiveFunctions () : NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=start}) (204{val==}) (32 (802{val=getNumObjectiveFunctions}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=start}) (204{val==}) (16 (800{val=ignoreObjectiveRows}) (233{val=?}) (32 (802{val=getNumObjectiveFunctions}) (216{val=()})) (226{val=:}) (34{val=NUMBER_CONSTANT}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/83/parent/src_main_java_org_apache_commons_math_optimization_linear_SimplexTableau.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 250
Wrong
========================================================================
False

0
Tree	int start ;
Code	int start ;
Distance : 7

1
Tree	int start = start ;
Code	int start = start ;
Distance : 6

2
Tree	int start = null ;
Code	int start = null ;
Distance : 6

3
Tree	long start ;
Code	long start ;
Distance : 8

4
Tree	boolean start ;
Code	boolean start ;
Distance : 8

5
Tree	final UnivariateStatistic [] start ;
Code	final UnivariateStatistic [] start ;
Distance : 9

6
Tree	final
Code	final
Distance : 10

7
Tree	final int start ;
Code	final int start ;
Distance : 8

8
Tree	int double ;
Code	int double ;
Distance : 8

9
Tree	int start = NUMBER_CONSTANT ;
Code	int start = NUMBER_CONSTANT ;
Distance : 5

10
Tree	long double ;
Code	long double ;
Distance : 9

11
Tree	int += ;
Code	int += ;
Distance : 8

12
Tree	long start = getNumObjectiveFunctions ;
Code	long start = getNumObjectiveFunctions ;
Distance : 6

13
Tree	void start = start ;
Code	void start = start ;
Distance : 7

14
Tree	long start = start + NUMBER_CONSTANT ;
Code	long start = start + NUMBER_CONSTANT ;
Distance : 6

15
Tree	int start = NUMBER_CONSTANT ;
Code	int start = NUMBER_CONSTANT ;
Distance : 5

16
Tree	public int start ;
Code	public int start ;
Distance : 8

17
Tree	final [] start = getNumObjectiveFunctions () ;
Code	final [] start = getNumObjectiveFunctions () ;
Distance : 6

18
Tree	int start = this . start ;
Code	int start = this . start ;
Distance : 6

19
Tree	int Percentile ;
Code	int Percentile ;
Distance : 8

20
Tree	float start = start + NUMBER_CONSTANT ;
Code	float start = start + NUMBER_CONSTANT ;
Distance : 6

21
Tree	long start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Code	long start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Distance : 4

22
Tree	int start = ExpansionMode.MULTIPLICATIVE ;
Code	int start = ExpansionMode.MULTIPLICATIVE ;
Distance : 6

23
Tree	double start = NUMBER_CONSTANT ;
Code	double start = NUMBER_CONSTANT ;
Distance : 6

24
Tree	int this ;
Code	int this ;
Distance : 8

25
Tree	final UnivariateStatistic [] start = getNumObjectiveFunctions () ;
Code	final UnivariateStatistic [] start = getNumObjectiveFunctions () ;
Distance : 7

26
Tree	long [] start = getNumObjectiveFunctions () ;
Code	long [] start = getNumObjectiveFunctions () ;
Distance : 6

27
Tree	int start = source.contractionCriterion ;
Code	int start = source.contractionCriterion ;
Distance : 6

28
Tree	public int start = getNumObjectiveFunctions () ;
Code	public int start = getNumObjectiveFunctions () ;
Distance : 5

29
Tree	int start = StepNormalizerMode.MULTIPLES ;
Code	int start = StepNormalizerMode.MULTIPLES ;
Distance : 6

30
Tree	boolean start = getNumObjectiveFunctions () ;
Code	boolean start = getNumObjectiveFunctions () ;
Distance : 5

31
Tree	long start = this . start ;
Code	long start = this . start ;
Distance : 7

32
Tree	final getCumPct [] start ;
Code	final getCumPct [] start ;
Distance : 9

33
Tree	final void start = getNumObjectiveFunctions () ;
Code	final void start = getNumObjectiveFunctions () ;
Distance : 6

34
Tree	final hashData [] start ;
Code	final hashData [] start ;
Distance : 9

35
Tree	final int start = getNumObjectiveFunctions () ;
Code	final int start = getNumObjectiveFunctions () ;
Distance : 5

36
Tree	final Percentile [] start ;
Code	final Percentile [] start ;
Distance : 9

37
Tree	int start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Code	int start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Distance : 3

38
Tree	final dest.contractionCriterion [] start ;
Code	final dest.contractionCriterion [] start ;
Distance : 9

39
Tree	final long start ;
Code	final long start ;
Distance : 9

40
Tree	Cartesian3D [] start = getNumObjectiveFunctions () ;
Code	Cartesian3D [] start = getNumObjectiveFunctions () ;
Distance : 6

41
Tree	final IndexOutOfBoundsException [] start ;
Code	final IndexOutOfBoundsException [] start ;
Distance : 9

42
Tree	float start = NUMBER_CONSTANT ;
Code	float start = NUMBER_CONSTANT ;
Distance : 6

43
Tree	final double start = getNumObjectiveFunctions ;
Code	final double start = getNumObjectiveFunctions ;
Distance : 7

44
Tree	float start = getNumObjectiveFunctions () . start ;
Code	float start = getNumObjectiveFunctions () . start ;
Distance : 5

45
Tree	public int start = start ;
Code	public int start = start ;
Distance : 7

46
Tree	int [] start = getNumObjectiveFunctions () ;
Code	int [] start = getNumObjectiveFunctions () ;
Distance : 5

47
Tree	start < getNumObjectiveFunctions > start = getNumObjectiveFunctions () ;
Code	start < getNumObjectiveFunctions > start = getNumObjectiveFunctions () ;
Distance : 8

48
Tree	int start = coefficients.length ;
Code	int start = coefficients.length ;
Distance : 6

49
Tree	i [] start = getNumObjectiveFunctions () ;
Code	i [] start = getNumObjectiveFunctions () ;
Distance : 6

50
Tree	boolean start = this . start ;
Code	boolean start = this . start ;
Distance : 7

51
Tree	UnivariateFunction [] start = getNumObjectiveFunctions () ;
Code	UnivariateFunction [] start = getNumObjectiveFunctions () ;
Distance : 6

52
Tree	int epsilon ;
Code	int epsilon ;
Distance : 8

53
Tree	final void start ;
Code	final void start ;
Distance : 9

54
Tree	double += ;
Code	double += ;
Distance : 9

55
Tree	boolean start = NUMBER_CONSTANT ;
Code	boolean start = NUMBER_CONSTANT ;
Distance : 6

56
Tree	double start = getNumObjectiveFunctions ;
Code	double start = getNumObjectiveFunctions ;
Distance : 6

57
Tree	final iter [] start ;
Code	final iter [] start ;
Distance : 9

58
Tree	int start = this . start ;
Code	int start = this . start ;
Distance : 6

59
Tree	final boolean start ;
Code	final boolean start ;
Distance : 9

60
Tree	int start = super(); ;
Code	int start = super(); ;
Distance : 6

61
Tree	List [] start = getNumObjectiveFunctions () ;
Code	List [] start = getNumObjectiveFunctions () ;
Distance : 6

62
Tree	long start = getNumObjectiveFunctions () ;
Code	long start = getNumObjectiveFunctions () ;
Distance : 5

63
Tree	double start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Code	double start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Distance : 4

64
Tree	byte start = null ;
Code	byte start = null ;
Distance : 7

65
Tree	double start = NUMBER_CONSTANT ;
Code	double start = NUMBER_CONSTANT ;
Distance : 6

66
Tree	int start = getNumObjectiveFunctions () . start ;
Code	int start = getNumObjectiveFunctions () . start ;
Distance : 4

67
Tree	if
Code	if
Distance : 10

68
Tree	RandomGenerator [] start = getNumObjectiveFunctions () ;
Code	RandomGenerator [] start = getNumObjectiveFunctions () ;
Distance : 6

69
Tree	int start = getNumObjectiveFunctions () ;
Code	int start = getNumObjectiveFunctions () ;
Distance : 4

70
Tree	float start = getNumObjectiveFunctions () ;
Code	float start = getNumObjectiveFunctions () ;
Distance : 5

71
Tree	final void start = start ;
Code	final void start = start ;
Distance : 8

72
Tree	double [] start = getNumObjectiveFunctions () ;
Code	double [] start = getNumObjectiveFunctions () ;
Distance : 6

73
Tree	int start = getNumObjectiveFunctions () . start ;
Code	int start = getNumObjectiveFunctions () . start ;
Distance : 4

74
Tree	start start = getNumObjectiveFunctions () ;
Code	start start = getNumObjectiveFunctions () ;
Distance : 5

75
Tree	void start = getNumObjectiveFunctions () ;
Code	void start = getNumObjectiveFunctions () ;
Distance : 5

76
Tree	double start = getNumObjectiveFunctions () ;
Code	double start = getNumObjectiveFunctions () ;
Distance : 5

77
Tree	Coordinates2D
Code	Coordinates2D
Distance : 10

78
Tree	final float start ;
Code	final float start ;
Distance : 9

79
Tree	int start = this . start ;
Code	int start = this . start ;
Distance : 6

80
Tree	byte start = start ;
Code	byte start = start ;
Distance : 7

81
Tree	public double start ;
Code	public double start ;
Distance : 9

82
Tree	byte start = getNumObjectiveFunctions () ;
Code	byte start = getNumObjectiveFunctions () ;
Distance : 5

83
Tree	boolean start = getNumObjectiveFunctions () ;
Code	boolean start = getNumObjectiveFunctions () ;
Distance : 5

84
Tree	double start = null ;
Code	double start = null ;
Distance : 7

85
Tree	long start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Code	long start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Distance : 4

86
Tree	start < start > start = getNumObjectiveFunctions () ; MathArrays
Code	start < start > start = getNumObjectiveFunctions () ; MathArrays
Distance : 8

87
Tree	i
Code	i
Distance : 10

88
Tree	d [] start = getNumObjectiveFunctions () ;
Code	d [] start = getNumObjectiveFunctions () ;
Distance : 6

89
Tree	final boolean start = start ;
Code	final boolean start = start ;
Distance : 8

90
Tree	long [] start = getNumObjectiveFunctions () ;
Code	long [] start = getNumObjectiveFunctions () ;
Distance : 6

91
Tree	long start ;
Code	long start ;
Distance : 8

92
Tree	byte start = start + NUMBER_CONSTANT ;
Code	byte start = start + NUMBER_CONSTANT ;
Distance : 6

93
Tree	double start = getNumObjectiveFunctions () ;
Code	double start = getNumObjectiveFunctions () ;
Distance : 5

94
Tree	long start = getNumObjectiveFunctions () ;
Code	long start = getNumObjectiveFunctions () ;
Distance : 5

95
Tree	int start = null ;
Code	int start = null ;
Distance : 6

96
Tree	abstract start start = getNumObjectiveFunctions () ;
Code	abstract start start = getNumObjectiveFunctions () ;
Distance : 6

97
Tree	final double start = getNumObjectiveFunctions () ;
Code	final double start = getNumObjectiveFunctions () ;
Distance : 6

98
Tree	final int start = start ;
Code	final int start = start ;
Distance : 7

99
Tree	boolean start = start + NUMBER_CONSTANT ;
Code	boolean start = start + NUMBER_CONSTANT ;
Distance : 6

100
Tree	long start = getNumObjectiveFunctions () . start ;
Code	long start = getNumObjectiveFunctions () . start ;
Distance : 5

101
Tree	boolean start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Code	boolean start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Distance : 4

102
Tree	final int start ;
Code	final int start ;
Distance : 8

103
Tree	byte start = this . start ;
Code	byte start = this . start ;
Distance : 7

104
Tree	boolean [] start = getNumObjectiveFunctions () ;
Code	boolean [] start = getNumObjectiveFunctions () ;
Distance : 6

105
Tree	double [] start = getNumObjectiveFunctions () ;
Code	double [] start = getNumObjectiveFunctions () ;
Distance : 6

106
Tree	final getCumPct [] start = getNumObjectiveFunctions () ;
Code	final getCumPct [] start = getNumObjectiveFunctions () ;
Distance : 7

107
Tree	byte start = getNumObjectiveFunctions () ;
Code	byte start = getNumObjectiveFunctions () ;
Distance : 5

108
Tree	int start = getNumObjectiveFunctions () . start ;
Code	int start = getNumObjectiveFunctions () . start ;
Distance : 4

109
Tree	final byte start = getNumObjectiveFunctions () ;
Code	final byte start = getNumObjectiveFunctions () ;
Distance : 6

110
Tree	long start = getNumObjectiveFunctions + NUMBER_CONSTANT ;
Code	long start = getNumObjectiveFunctions + NUMBER_CONSTANT ;
Distance : 5

111
Tree	double start = start ;
Code	double start = start ;
Distance : 7

112
Tree	float start = null ;
Code	float start = null ;
Distance : 7

113
Tree	long start = getNumObjectiveFunctions () ;
Code	long start = getNumObjectiveFunctions () ;
Distance : 5

114
Tree	double start = getNumObjectiveFunctions () . start ;
Code	double start = getNumObjectiveFunctions () . start ;
Distance : 5

115
Tree	int start = getNumObjectiveFunctions ;
Code	int start = getNumObjectiveFunctions ;
Distance : 5

116
Tree	void start = getNumObjectiveFunctions () ;
Code	void start = getNumObjectiveFunctions () ;
Distance : 5

117
Tree	void start = null ;
Code	void start = null ;
Distance : 7

118
Tree	void start = start + NUMBER_CONSTANT ;
Code	void start = start + NUMBER_CONSTANT ;
Distance : 6

119
Tree	++ [] start = getNumObjectiveFunctions () ;
Code	++ [] start = getNumObjectiveFunctions () ;
Distance : 6

120
Tree	final float start = getNumObjectiveFunctions () ;
Code	final float start = getNumObjectiveFunctions () ;
Distance : 6

121
Tree	start < start > start = getNumObjectiveFunctions () ;
Code	start < start > start = getNumObjectiveFunctions () ;
Distance : 7

122
Tree	byte start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Code	byte start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Distance : 4

123
Tree	synchronized start start = getNumObjectiveFunctions () ;
Code	synchronized start start = getNumObjectiveFunctions () ;
Distance : 6

124
Tree	byte [] start = getNumObjectiveFunctions () ;
Code	byte [] start = getNumObjectiveFunctions () ;
Distance : 6

125
Tree	float start = start ;
Code	float start = start ;
Distance : 7

126
Tree	float start = getNumObjectiveFunctions () ;
Code	float start = getNumObjectiveFunctions () ;
Distance : 5

127
Tree	final int start = getNumObjectiveFunctions () ;
Code	final int start = getNumObjectiveFunctions () ;
Distance : 5

128
Tree	void start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Code	void start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Distance : 4

129
Tree	void [] start = getNumObjectiveFunctions () ;
Code	void [] start = getNumObjectiveFunctions () ;
Distance : 6

130
Tree	final start < getNumObjectiveFunctions > start = getNumObjectiveFunctions () ;
Code	final start < getNumObjectiveFunctions > start = getNumObjectiveFunctions () ;
Distance : 8

131
Tree	int start = new MinpackMeasurement () ;
Code	int start = new MinpackMeasurement () ;
Distance : 5

132
Tree	int start = getNumObjectiveFunctions () ;
Code	int start = getNumObjectiveFunctions () ;
Distance : 4

133
Tree	byte start = getNumObjectiveFunctions () . start ;
Code	byte start = getNumObjectiveFunctions () . start ;
Distance : 5

134
Tree	final start < start > start = getNumObjectiveFunctions () ;
Code	final start < start > start = getNumObjectiveFunctions () ;
Distance : 8

135
Tree	Coordinates3D [] start = getNumObjectiveFunctions () ;
Code	Coordinates3D [] start = getNumObjectiveFunctions () ;
Distance : 6

136
Tree	int start = getNumObjectiveFunctions () ;
Code	int start = getNumObjectiveFunctions () ;
Distance : 4

137
Tree	final hashData [] start = getNumObjectiveFunctions () ;
Code	final hashData [] start = getNumObjectiveFunctions () ;
Distance : 7

138
Tree	public start < getNumObjectiveFunctions > start = getNumObjectiveFunctions () ;
Code	public start < getNumObjectiveFunctions > start = getNumObjectiveFunctions () ;
Distance : 8

139
Tree	final long start = getNumObjectiveFunctions () ;
Code	final long start = getNumObjectiveFunctions () ;
Distance : 6

140
Tree	final boolean start = getNumObjectiveFunctions () ;
Code	final boolean start = getNumObjectiveFunctions () ;
Distance : 6

141
Tree	double start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Code	double start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Distance : 4

142
Tree	final City [] start = getNumObjectiveFunctions () ;
Code	final City [] start = getNumObjectiveFunctions () ;
Distance : 7

143
Tree	float start = this . start ;
Code	float start = this . start ;
Distance : 7

144
Tree	final divisor.mant [] start = getNumObjectiveFunctions () ;
Code	final divisor.mant [] start = getNumObjectiveFunctions () ;
Distance : 7

145
Tree	long start = this . start ;
Code	long start = this . start ;
Distance : 7

146
Tree	boolean start = getNumObjectiveFunctions () . start ;
Code	boolean start = getNumObjectiveFunctions () . start ;
Distance : 5

147
Tree	start < start > start = getNumObjectiveFunctions () ;
Code	start < start > start = getNumObjectiveFunctions () ;
Distance : 7

148
Tree	int start = start + NUMBER_CONSTANT ;
Code	int start = start + NUMBER_CONSTANT ;
Distance : 5

149
Tree	int [] start = getNumObjectiveFunctions () ;
Code	int [] start = getNumObjectiveFunctions () ;
Distance : 5

150
Tree	final Percentile [] start = getNumObjectiveFunctions () ;
Code	final Percentile [] start = getNumObjectiveFunctions () ;
Distance : 7

151
Tree	start < getNumObjectiveFunctions > start = getNumObjectiveFunctions () ;
Code	start < getNumObjectiveFunctions > start = getNumObjectiveFunctions () ;
Distance : 8

152
Tree	void start = this . start ;
Code	void start = this . start ;
Distance : 7

153
Tree	float start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Code	float start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Distance : 4

154
Tree	abstract int start = getNumObjectiveFunctions () ;
Code	abstract int start = getNumObjectiveFunctions () ;
Distance : 5

155
Tree	double start = start + NUMBER_CONSTANT ;
Code	double start = start + NUMBER_CONSTANT ;
Distance : 6

156
Tree	final start start = getNumObjectiveFunctions () ;
Code	final start start = getNumObjectiveFunctions () ;
Distance : 6

157
Tree	start start = getNumObjectiveFunctions () ; Array2DRowFieldMatrix
Code	start start = getNumObjectiveFunctions () ; Array2DRowFieldMatrix
Distance : 6

158
Tree	start start = getNumObjectiveFunctions () ; MatrixUtils
Code	start start = getNumObjectiveFunctions () ; MatrixUtils
Distance : 6

159
Tree	long start = getNumObjectiveFunctions () . start ;
Code	long start = getNumObjectiveFunctions () . start ;
Distance : 5

160
Tree	final byte start ;
Code	final byte start ;
Distance : 9

161
Tree	int start = FACT.length ;
Code	int start = FACT.length ;
Distance : 6

162
Tree	start start = getNumObjectiveFunctions () ; +
Code	start start = getNumObjectiveFunctions () ; +
Distance : 6

163
Tree	int start = new MicrosphereInterpolator () ;
Code	int start = new MicrosphereInterpolator () ;
Distance : 5

164
Tree	long start = null ;
Code	long start = null ;
Distance : 7

165
Tree	final dest.contractionCriterion [] start = getNumObjectiveFunctions () ;
Code	final dest.contractionCriterion [] start = getNumObjectiveFunctions () ;
Distance : 7

166
Tree	int start = continue; ;
Code	int start = continue; ;
Distance : 6

167
Tree	byte start = NUMBER_CONSTANT ;
Code	byte start = NUMBER_CONSTANT ;
Distance : 6

168
Tree	private start start = getNumObjectiveFunctions () ;
Code	private start start = getNumObjectiveFunctions () ;
Distance : 6

169
Tree	int start = getNumObjectiveFunctions + NUMBER_CONSTANT ;
Code	int start = getNumObjectiveFunctions + NUMBER_CONSTANT ;
Distance : 4

170
Tree	int start = new VanishingToLeaf () ;
Code	int start = new VanishingToLeaf () ;
Distance : 5

171
Tree	final byte start = start ;
Code	final byte start = start ;
Distance : 8

172
Tree	start < start > start = getNumObjectiveFunctions () ;
Code	start < start > start = getNumObjectiveFunctions () ;
Distance : 7

173
Tree	long start = start ;
Code	long start = start ;
Distance : 7

174
Tree	double start = getNumObjectiveFunctions + NUMBER_CONSTANT ;
Code	double start = getNumObjectiveFunctions + NUMBER_CONSTANT ;
Distance : 5

175
Tree	int start = Cartesian2D.NaN ;
Code	int start = Cartesian2D.NaN ;
Distance : 6

176
Tree	Coordinates3D
Code	Coordinates3D
Distance : 10

177
Tree	int start = new RealVectorFormat () ;
Code	int start = new RealVectorFormat () ;
Distance : 5

178
Tree	final start < getNumObjectiveFunctions > start = getNumObjectiveFunctions () ;
Code	final start < getNumObjectiveFunctions > start = getNumObjectiveFunctions () ;
Distance : 8

179
Tree	final start < start > start = getNumObjectiveFunctions () ;
Code	final start < start > start = getNumObjectiveFunctions () ;
Distance : 8

180
Tree	start start = getNumObjectiveFunctions () ; point
Code	start start = getNumObjectiveFunctions () ; point
Distance : 6

181
Tree	long start = NUMBER_CONSTANT ;
Code	long start = NUMBER_CONSTANT ;
Distance : 6

182
Tree	int start = new StreamDataAdapter () ;
Code	int start = new StreamDataAdapter () ;
Distance : 5

183
Tree	static start start = getNumObjectiveFunctions () ;
Code	static start start = getNumObjectiveFunctions () ;
Distance : 6

184
Tree	final ScalarPointValuePair [] start = getNumObjectiveFunctions () ;
Code	final ScalarPointValuePair [] start = getNumObjectiveFunctions () ;
Distance : 7

185
Tree	boolean start = null ;
Code	boolean start = null ;
Distance : 7

186
Tree	double start = getNumObjectiveFunctions () ;
Code	double start = getNumObjectiveFunctions () ;
Distance : 5

187
Tree	start start = getNumObjectiveFunctions () ; UnivariateRealFunction
Code	start start = getNumObjectiveFunctions () ; UnivariateRealFunction
Distance : 6

188
Tree	start start = getNumObjectiveFunctions () ; super
Code	start start = getNumObjectiveFunctions () ; super
Distance : 6

189
Tree	final IndexOutOfBoundsException [] start = getNumObjectiveFunctions () ;
Code	final IndexOutOfBoundsException [] start = getNumObjectiveFunctions () ;
Distance : 7

190
Tree	start start = getNumObjectiveFunctions () ;
Code	start start = getNumObjectiveFunctions () ;
Distance : 5

191
Tree	int start = new InitialGuess () ;
Code	int start = new InitialGuess () ;
Distance : 5

192
Tree	public start start = getNumObjectiveFunctions () ;
Code	public start start = getNumObjectiveFunctions () ;
Distance : 6

193
Tree	int start = getNumObjectiveFunctions () ;
Code	int start = getNumObjectiveFunctions () ;
Distance : 4

194
Tree	long += ;
Code	long += ;
Distance : 9

195
Tree	void start = NUMBER_CONSTANT ;
Code	void start = NUMBER_CONSTANT ;
Distance : 6

196
Tree	int ! ;
Code	int ! ;
Distance : 8

197
Tree	long start = NUMBER_CONSTANT ;
Code	long start = NUMBER_CONSTANT ;
Distance : 6

198
Tree	final City [] start ;
Code	final City [] start ;
Distance : 9

199
Tree	float start ;
Code	float start ;
Distance : 8

200
Tree	UnivariateFunction
Code	UnivariateFunction
Distance : 10

201
Tree	final divisor.mant [] start ;
Code	final divisor.mant [] start ;
Distance : 9

202
Tree	int start = PivotSelectionRule.DANTZIG ;
Code	int start = PivotSelectionRule.DANTZIG ;
Distance : 6

203
Tree	double start ;
Code	double start ;
Distance : 8

204
Tree	double start = this . start ;
Code	double start = this . start ;
Distance : 7

205
Tree	long start = getNumObjectiveFunctions () ;
Code	long start = getNumObjectiveFunctions () ;
Distance : 5

206
Tree	final int start = start ;
Code	final int start = start ;
Distance : 7

207
Tree	double start ;
Code	double start ;
Distance : 8

208
Tree	int - ;
Code	int - ;
Distance : 8

209
Tree	Cartesian3D
Code	Cartesian3D
Distance : 10

210
Tree	public start < start > start = getNumObjectiveFunctions () ;
Code	public start < start > start = getNumObjectiveFunctions () ;
Distance : 8

211
Tree	final int start = getNumObjectiveFunctions ;
Code	final int start = getNumObjectiveFunctions ;
Distance : 6

212
Tree	long
Code	long
Distance : 10

213
Tree	int start ;
Code	int start ;
Distance : 7

214
Tree	protected start start = getNumObjectiveFunctions () ;
Code	protected start start = getNumObjectiveFunctions () ;
Distance : 6

215
Tree	final double start = start ;
Code	final double start = start ;
Distance : 8

216
Tree	float [] start = getNumObjectiveFunctions () ;
Code	float [] start = getNumObjectiveFunctions () ;
Distance : 6

217
Tree	boolean start = start ;
Code	boolean start = start ;
Distance : 7

218
Tree	start < getNumObjectiveFunctions > start = getNumObjectiveFunctions () ;
Code	start < getNumObjectiveFunctions > start = getNumObjectiveFunctions () ;
Distance : 8

219
Tree	void start = getNumObjectiveFunctions () . start ;
Code	void start = getNumObjectiveFunctions () . start ;
Distance : 5

220
Tree	final ScalarPointValuePair [] start ;
Code	final ScalarPointValuePair [] start ;
Distance : 9

221
Tree	int start = line.originOffset ;
Code	int start = line.originOffset ;
Distance : 6

222
Tree	public start start = getNumObjectiveFunctions () ;
Code	public start start = getNumObjectiveFunctions () ;
Distance : 6

223
Tree	start start = getNumObjectiveFunctions () ;
Code	start start = getNumObjectiveFunctions () ;
Distance : 5

224
Tree	int start = new ScalarPointValuePair () ;
Code	int start = new ScalarPointValuePair () ;
Distance : 5

225
Tree	int start = new IdentityPreconditioner () ;
Code	int start = new IdentityPreconditioner () ;
Distance : 5

226
Tree	int start = new MaxCountExceededException () ;
Code	int start = new MaxCountExceededException () ;
Distance : 5

227
Tree	int start = withStart ;
Code	int start = withStart ;
Distance : 6

228
Tree	int start = new MathIllegalStateException () ;
Code	int start = new MathIllegalStateException () ;
Distance : 5

229
Tree	start < start > start = getNumObjectiveFunctions () ;
Code	start < start > start = getNumObjectiveFunctions () ;
Distance : 7

230
Tree	final double start ;
Code	final double start ;
Distance : 9

231
Tree	final start start = getNumObjectiveFunctions () ;
Code	final start start = getNumObjectiveFunctions () ;
Distance : 6

232
Tree	double start = getNumObjectiveFunctions () ;
Code	double start = getNumObjectiveFunctions () ;
Distance : 5

233
Tree	start < getNumObjectiveFunctions > start = getNumObjectiveFunctions () ;
Code	start < getNumObjectiveFunctions > start = getNumObjectiveFunctions () ;
Distance : 8

234
Tree	List
Code	List
Distance : 10

235
Tree	byte start ;
Code	byte start ;
Distance : 8

236
Tree	int
Code	int
Distance : 9

237
Tree	final start < start > start = getNumObjectiveFunctions () ;
Code	final start < start > start = getNumObjectiveFunctions () ;
Distance : 8

238
Tree	start start = getNumObjectiveFunctions () ;
Code	start start = getNumObjectiveFunctions () ;
Distance : 5

239
Tree	final start start = getNumObjectiveFunctions () ;
Code	final start start = getNumObjectiveFunctions () ;
Distance : 6

240
Tree	start < start > start = getNumObjectiveFunctions () ; v.length
Code	start < start > start = getNumObjectiveFunctions () ; v.length
Distance : 8

241
Tree	final iter [] start = getNumObjectiveFunctions () ;
Code	final iter [] start = getNumObjectiveFunctions () ;
Distance : 7

242
Tree	abstract start < start > start = getNumObjectiveFunctions () ;
Code	abstract start < start > start = getNumObjectiveFunctions () ;
Distance : 8

243
Tree	void start ;
Code	void start ;
Distance : 8

244
Tree	int start = mant.length ;
Code	int start = mant.length ;
Distance : 6

245
Tree	final long start = start ;
Code	final long start = start ;
Distance : 8

246
Tree	int start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Code	int start = getNumObjectiveFunctions () - NUMBER_CONSTANT ;
Distance : 3

247
Tree	final start < getNumObjectiveFunctions > start = getNumObjectiveFunctions () ;
Code	final start < getNumObjectiveFunctions > start = getNumObjectiveFunctions () ;
Distance : 8

248
Tree	int [] start = getNumObjectiveFunctions () ;
Code	int [] start = getNumObjectiveFunctions () ;
Distance : 5

249
Tree	synchronized start < start > start = getNumObjectiveFunctions () ;
Code	synchronized start < start > start = getNumObjectiveFunctions () ;
Distance : 8

========================================================================


========================================================================
Example Number: 5
Parent Code is: 
int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Child code is: 
int j = NUMBER_CONSTANT * ( n - NUMBER_CONSTANT ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=j}) (204{val==}) (27 (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (800{val=n})) (201{val=-}) (34{val=NUMBER_CONSTANT}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=j}) (204{val==}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (36 (214{val=(}) (27 (800{val=n}) (201{val=-}) (34{val=NUMBER_CONSTANT})) (215{val=)})))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/80/parent/src_main_java_org_apache_commons_math_linear_EigenDecompositionImpl.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 310
Wrong
========================================================================
False

0
Tree	int j = n / j - j ;
Code	int j = n / j - j ;
Distance : 6

1
Tree	int j = NUMBER_CONSTANT * n - n ;
Code	int j = NUMBER_CONSTANT * n - n ;
Distance : 3

2
Tree	int j = n * n - n ;
Code	int j = n * n - n ;
Distance : 4

3
Tree	int j = ( n < < NUMBER_CONSTANT ) + n - j ;
Code	int j = ( n < < NUMBER_CONSTANT ) + n - j ;
Distance : 8

4
Tree	int j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Code	int j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Distance : 5

5
Tree	int j = ( int ) n * double ;
Code	int j = ( int ) n * double ;
Distance : 6

6
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 2

7
Tree	int j = n < FACT.length - j ;
Code	int j = n < FACT.length - j ;
Distance : 6

8
Tree	int j = n != NUMBER_CONSTANT ;
Code	int j = n != NUMBER_CONSTANT ;
Distance : 5

9
Tree	int j = NUMBER_CONSTANT * n - j ;
Code	int j = NUMBER_CONSTANT * n - j ;
Distance : 3

10
Tree	int j = val.length - LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED - n ;
Code	int j = val.length - LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED - n ;
Distance : 6

11
Tree	int j = NUMBER_CONSTANT * currentState.length - j ;
Code	int j = NUMBER_CONSTANT * currentState.length - j ;
Distance : 4

12
Tree	int j = getDimension ( n , n , n ) >= NUMBER_CONSTANT ;
Code	int j = getDimension ( n , n , n ) >= NUMBER_CONSTANT ;
Distance : 8

13
Tree	int j = n + j . clone ( j , n , NUMBER_CONSTANT ) + n - j ;
Code	int j = n + j . clone ( j , n , NUMBER_CONSTANT ) + n - j ;
Distance : 12

14
Tree	int j = getDimension ( n , n , n ) / n ;
Code	int j = getDimension ( n , n , n ) / n ;
Distance : 8

15
Tree	int j = coefficients.length int LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED - n ;
Code	int j = coefficients.length int LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED - n ;
Distance : 6

16
Tree	int j = STRING_CONSTANT + j + STRING_CONSTANT + STRING_CONSTANT - j ;
Code	int j = STRING_CONSTANT + j + STRING_CONSTANT + STRING_CONSTANT - j ;
Distance : 9

17
Tree	int j = ( int ) n * ArrayList ;
Code	int j = ( int ) n * ArrayList ;
Distance : 6

18
Tree	int j = n + j . intValue ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n + j . intValue ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

19
Tree	int j = n + j . value ( j , n , NUMBER_CONSTANT ) + n - j ;
Code	int j = n + j . value ( j , n , NUMBER_CONSTANT ) + n - j ;
Distance : 12

20
Tree	int j = n < Double.MAX_VALUE - j ;
Code	int j = n < Double.MAX_VALUE - j ;
Distance : 6

21
Tree	int j = ( int ) n * n ;
Code	int j = ( int ) n * n ;
Distance : 6

22
Tree	int j = n == val.length - j ;
Code	int j = n == val.length - j ;
Distance : 6

23
Tree	int j = n + j . value ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n + j . value ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

24
Tree	int j = n < startConfiguration.length - j ;
Code	int j = n < startConfiguration.length - j ;
Distance : 6

25
Tree	int j = ( int ) n * delta ;
Code	int j = ( int ) n * delta ;
Distance : 6

26
Tree	int n = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	int n = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 3

27
Tree	int j = coefficients.length - Cartesian1D.ZERO - j ;
Code	int j = coefficients.length - Cartesian1D.ZERO - j ;
Distance : 6

28
Tree	int j = ( int ) observed1.length * v2.x - j ;
Code	int j = ( int ) observed1.length * v2.x - j ;
Distance : 8

29
Tree	int j = FACT.length n Cartesian1D.ZERO - j ;
Code	int j = FACT.length n Cartesian1D.ZERO - j ;
Distance : 6

30
Tree	int n = n != NUMBER_CONSTANT ;
Code	int n = n != NUMBER_CONSTANT ;
Distance : 6

31
Tree	int j = n < PivotSelectionRule.BLAND - j ;
Code	int j = n < PivotSelectionRule.BLAND - j ;
Distance : 6

32
Tree	int j = n + j . dotProduct ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n + j . dotProduct ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

33
Tree	double j = n / j - j ;
Code	double j = n / j - j ;
Distance : 7

34
Tree	double j = ( n < < NUMBER_CONSTANT ) + n - j ;
Code	double j = ( n < < NUMBER_CONSTANT ) + n - j ;
Distance : 9

35
Tree	void j = n ^ n - n ;
Code	void j = n ^ n - n ;
Distance : 6

36
Tree	int j = n + j . getDimension ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n + j . getDimension ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

37
Tree	int j = n + j . getDimension ( j , n , NUMBER_CONSTANT ) + n - j ;
Code	int j = n + j . getDimension ( j , n , NUMBER_CONSTANT ) + n - j ;
Distance : 12

38
Tree	int j = coefficients.length - Coordinates2D.ZERO - j ;
Code	int j = coefficients.length - Coordinates2D.ZERO - j ;
Distance : 6

39
Tree	int j = val.length - Coordinates2D.ZERO - n ;
Code	int j = val.length - Coordinates2D.ZERO - n ;
Distance : 6

40
Tree	int j = ( int ) n * singularValues ;
Code	int j = ( int ) n * singularValues ;
Distance : 6

41
Tree	double j = STRING_CONSTANT + n + STRING_CONSTANT + STRING_CONSTANT - j ;
Code	double j = STRING_CONSTANT + n + STRING_CONSTANT + STRING_CONSTANT - j ;
Distance : 10

42
Tree	long j = n & NUMBER_CONSTANT - n ;
Code	long j = n & NUMBER_CONSTANT - n ;
Distance : 7

43
Tree	int j = ( int ) observed1.length * currentState.length - j ;
Code	int j = ( int ) observed1.length * currentState.length - j ;
Distance : 8

44
Tree	int j = ( int ) observed1.length * LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED - j ;
Code	int j = ( int ) observed1.length * LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED - j ;
Distance : 8

45
Tree	boolean j = n & NUMBER_CONSTANT ;
Code	boolean j = n & NUMBER_CONSTANT ;
Distance : 6

46
Tree	double j = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Code	double j = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Distance : 4

47
Tree	int j = n ^ n - j ;
Code	int j = n ^ n - j ;
Distance : 5

48
Tree	int j = n & NUMBER_CONSTANT - j ;
Code	int j = n & NUMBER_CONSTANT - j ;
Distance : 6

49
Tree	int j = n n n . getDimension ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n n n . getDimension ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

50
Tree	int j = ( int ) observed1.length * SimplexSolver.DEFAULT_CUT_OFF - j ;
Code	int j = ( int ) observed1.length * SimplexSolver.DEFAULT_CUT_OFF - j ;
Distance : 8

51
Tree	int j = j / j - j ;
Code	int j = j / j - j ;
Distance : 6

52
Tree	boolean j = n & NUMBER_CONSTANT - n ;
Code	boolean j = n & NUMBER_CONSTANT - n ;
Distance : 7

53
Tree	void j = n & NUMBER_CONSTANT ;
Code	void j = n & NUMBER_CONSTANT ;
Distance : 6

54
Tree	int j = n + j . clone ( j , n , n ) + n - j ;
Code	int j = n + j . clone ( j , n , n ) + n - j ;
Distance : 13

55
Tree	int j = n + j . getOffset ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n + j . getOffset ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

56
Tree	boolean j = n - j - n ;
Code	boolean j = n - j - n ;
Distance : 7

57
Tree	int j = FACT.length n Cartesian1D.ZERO - n ;
Code	int j = FACT.length n Cartesian1D.ZERO - n ;
Distance : 6

58
Tree	int j = n + j . get ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n + j . get ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

59
Tree	int j = n < absolutePositivityThreshold - j ;
Code	int j = n < absolutePositivityThreshold - j ;
Distance : 6

60
Tree	double j = n ^ n - j ;
Code	double j = n ^ n - j ;
Distance : 6

61
Tree	long j = NUMBER_CONSTANT * n - j - n ;
Code	long j = NUMBER_CONSTANT * n - j - n ;
Distance : 5

62
Tree	double j = getDimension ( j , n , n ) >= NUMBER_CONSTANT ;
Code	double j = getDimension ( j , n , n ) >= NUMBER_CONSTANT ;
Distance : 9

63
Tree	int j = n + j . getDimension ( j , n , n ) + n - j ;
Code	int j = n + j . getDimension ( j , n , n ) + n - j ;
Distance : 13

64
Tree	double j = getDimension ( n , n , n ) / n ;
Code	double j = getDimension ( n , n , n ) / n ;
Distance : 9

65
Tree	long j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	long j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 3

66
Tree	boolean j = n ^ n - n ;
Code	boolean j = n ^ n - n ;
Distance : 6

67
Tree	int j = n < TDistributionImpl - j ;
Code	int j = n < TDistributionImpl - j ;
Distance : 6

68
Tree	int j = n == coefficients.length - j ;
Code	int j = n == coefficients.length - j ;
Distance : 6

69
Tree	byte j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	byte j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 3

70
Tree	float j = n == NUMBER_CONSTANT - n ;
Code	float j = n == NUMBER_CONSTANT - n ;
Distance : 7

71
Tree	double j = STRING_CONSTANT + j + STRING_CONSTANT + STRING_CONSTANT - j ;
Code	double j = STRING_CONSTANT + j + STRING_CONSTANT + STRING_CONSTANT - j ;
Distance : 10

72
Tree	double j = NUMBER_CONSTANT * n - n ;
Code	double j = NUMBER_CONSTANT * n - n ;
Distance : 4

73
Tree	int j = n == PivotSelectionRule.DANTZIG - j ;
Code	int j = n == PivotSelectionRule.DANTZIG - j ;
Distance : 6

74
Tree	int j = ( j < < NUMBER_CONSTANT ) + n - j ;
Code	int j = ( j < < NUMBER_CONSTANT ) + n - j ;
Distance : 8

75
Tree	long j = n ^ n - n ;
Code	long j = n ^ n - n ;
Distance : 6

76
Tree	int j = ( int ) observed1.length * LocalizedFormats.INVALID_BINARY_DIGIT - j ;
Code	int j = ( int ) observed1.length * LocalizedFormats.INVALID_BINARY_DIGIT - j ;
Distance : 8

77
Tree	int j = ( int ) observed1.length * Vector1D.ZERO - j ;
Code	int j = ( int ) observed1.length * Vector1D.ZERO - j ;
Distance : 8

78
Tree	int j = n ( j , n , n ) >= NUMBER_CONSTANT ;
Code	int j = n ( j , n , n ) >= NUMBER_CONSTANT ;
Distance : 8

79
Tree	double j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Code	double j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Distance : 6

80
Tree	long j = n != NUMBER_CONSTANT ;
Code	long j = n != NUMBER_CONSTANT ;
Distance : 6

81
Tree	double j = n * n - j ;
Code	double j = n * n - j ;
Distance : 5

82
Tree	int j = n + j . getOffset ( j , n , n ) + n - j ;
Code	int j = n + j . getOffset ( j , n , n ) + n - j ;
Distance : 13

83
Tree	int j = n ^ j - n ;
Code	int j = n ^ j - n ;
Distance : 6

84
Tree	int j = n + j . intValue ( j , n , NUMBER_CONSTANT ) + n - j ;
Code	int j = n + j . intValue ( j , n , NUMBER_CONSTANT ) + n - j ;
Distance : 12

85
Tree	double j = n + j - j ;
Code	double j = n + j - j ;
Distance : 7

86
Tree	long j = n ^ n - j ;
Code	long j = n ^ n - j ;
Distance : 6

87
Tree	int j = ( int ) observed1.length * FastMath.PI - j ;
Code	int j = ( int ) observed1.length * FastMath.PI - j ;
Distance : 8

88
Tree	int j = NUMBER_CONSTANT * coefficients.length - j ;
Code	int j = NUMBER_CONSTANT * coefficients.length - j ;
Distance : 4

89
Tree	int j = NUMBER_CONSTANT * n - n - n ;
Code	int j = NUMBER_CONSTANT * n - n - n ;
Distance : 4

90
Tree	int j = n + j - j ;
Code	int j = n + j - j ;
Distance : 6

91
Tree	void j = n != NUMBER_CONSTANT ;
Code	void j = n != NUMBER_CONSTANT ;
Distance : 6

92
Tree	int j = n / n - j ;
Code	int j = n / n - j ;
Distance : 5

93
Tree	double j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	double j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 3

94
Tree	int j = coefficients.length - dRow.length - n ;
Code	int j = coefficients.length - dRow.length - n ;
Distance : 6

95
Tree	double j = getDimension ( j , n , n ) / n ;
Code	double j = getDimension ( j , n , n ) / n ;
Distance : 9

96
Tree	void j = ( n < < NUMBER_CONSTANT ) + n - j ;
Code	void j = ( n < < NUMBER_CONSTANT ) + n - j ;
Distance : 9

97
Tree	float j = ( n < < NUMBER_CONSTANT ) + n - j ;
Code	float j = ( n < < NUMBER_CONSTANT ) + n - j ;
Distance : 9

98
Tree	void j = n - j - n ;
Code	void j = n - j - n ;
Distance : 7

99
Tree	int j = NUMBER_CONSTANT * PivotSelectionRule.DANTZIG - j ;
Code	int j = NUMBER_CONSTANT * PivotSelectionRule.DANTZIG - j ;
Distance : 4

100
Tree	float j = n != NUMBER_CONSTANT ;
Code	float j = n != NUMBER_CONSTANT ;
Distance : 6

101
Tree	float j = n & NUMBER_CONSTANT ;
Code	float j = n & NUMBER_CONSTANT ;
Distance : 6

102
Tree	double j = n != NUMBER_CONSTANT ;
Code	double j = n != NUMBER_CONSTANT ;
Distance : 6

103
Tree	double j = j != NUMBER_CONSTANT ;
Code	double j = j != NUMBER_CONSTANT ;
Distance : 7

104
Tree	int j = n + j . value ( j , n , n ) + n - j ;
Code	int j = n + j . value ( j , n , n ) + n - j ;
Distance : 13

105
Tree	int j = n + j . getOffset ( j , n , NUMBER_CONSTANT ) + n - j ;
Code	int j = n + j . getOffset ( j , n , NUMBER_CONSTANT ) + n - j ;
Distance : 12

106
Tree	int j = n . getRealEigenvalues ( j , n , n ) >= NUMBER_CONSTANT ;
Code	int j = n . getRealEigenvalues ( j , n , n ) >= NUMBER_CONSTANT ;
Distance : 9

107
Tree	void j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Code	void j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Distance : 6

108
Tree	void j = n + j - n ;
Code	void j = n + j - n ;
Distance : 7

109
Tree	boolean j = STRING_CONSTANT + j + STRING_CONSTANT + STRING_CONSTANT - j ;
Code	boolean j = STRING_CONSTANT + j + STRING_CONSTANT + STRING_CONSTANT - j ;
Distance : 10

110
Tree	int j = n ( j , n , n ) / n ;
Code	int j = n ( j , n , n ) / n ;
Distance : 8

111
Tree	int j = j & NUMBER_CONSTANT ;
Code	int j = j & NUMBER_CONSTANT ;
Distance : 6

112
Tree	int j = STRING_CONSTANT + j + STRING_CONSTANT + STRING_CONSTANT - n ;
Code	int j = STRING_CONSTANT + j + STRING_CONSTANT + STRING_CONSTANT - n ;
Distance : 9

113
Tree	byte j = ( n < < NUMBER_CONSTANT ) + n - j ;
Code	byte j = ( n < < NUMBER_CONSTANT ) + n - j ;
Distance : 9

114
Tree	int j = n + j . getStateEstimation ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n + j . getStateEstimation ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

115
Tree	float j = n - j - n ;
Code	float j = n - j - n ;
Distance : 7

116
Tree	int j = NUMBER_CONSTANT * n - j - n ;
Code	int j = NUMBER_CONSTANT * n - j - n ;
Distance : 4

117
Tree	double j = n & NUMBER_CONSTANT ;
Code	double j = n & NUMBER_CONSTANT ;
Distance : 6

118
Tree	int j = n == FACT.length - j ;
Code	int j = n == FACT.length - j ;
Distance : 6

119
Tree	long j = n * n - n ;
Code	long j = n * n - n ;
Distance : 5

120
Tree	byte j = n & NUMBER_CONSTANT ;
Code	byte j = n & NUMBER_CONSTANT ;
Distance : 6

121
Tree	int j = n ( n , n , n ) >= NUMBER_CONSTANT ;
Code	int j = n ( n , n , n ) >= NUMBER_CONSTANT ;
Distance : 8

122
Tree	int n = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	int n = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 3

123
Tree	int j = n . dotProduct ( j , n , n ) >= NUMBER_CONSTANT ;
Code	int j = n . dotProduct ( j , n , n ) >= NUMBER_CONSTANT ;
Distance : 9

124
Tree	long j = getDimension ( n , n , n ) / n ;
Code	long j = getDimension ( n , n , n ) / n ;
Distance : 9

125
Tree	void j = n / j - NUMBER_CONSTANT ;
Code	void j = n / j - NUMBER_CONSTANT ;
Distance : 6

126
Tree	int j = NUMBER_CONSTANT * Coordinates3D.NEGATIVE_INFINITY - j ;
Code	int j = NUMBER_CONSTANT * Coordinates3D.NEGATIVE_INFINITY - j ;
Distance : 4

127
Tree	void j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	void j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 3

128
Tree	float j = n + j - n ;
Code	float j = n + j - n ;
Distance : 7

129
Tree	int j = ( int ) observed1.length * startPoint.length - j ;
Code	int j = ( int ) observed1.length * startPoint.length - j ;
Distance : 8

130
Tree	double j = n * n - n ;
Code	double j = n * n - n ;
Distance : 5

131
Tree	int j = NUMBER_CONSTANT * n - n - j ;
Code	int j = NUMBER_CONSTANT * n - n - j ;
Distance : 4

132
Tree	int j = n < Precision.SAFE_MIN - j ;
Code	int j = n < Precision.SAFE_MIN - j ;
Distance : 6

133
Tree	int j = ( int ) n * RealVector ;
Code	int j = ( int ) n * RealVector ;
Distance : 6

134
Tree	boolean j = ( n < < NUMBER_CONSTANT ) + n - j ;
Code	boolean j = ( n < < NUMBER_CONSTANT ) + n - j ;
Distance : 9

135
Tree	int j = n . IEEEremainder ( j , n , n ) >= NUMBER_CONSTANT ;
Code	int j = n . IEEEremainder ( j , n , n ) >= NUMBER_CONSTANT ;
Distance : 9

136
Tree	int j = n n n . normalize ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n n n . normalize ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

137
Tree	void j = n & NUMBER_CONSTANT - n ;
Code	void j = n & NUMBER_CONSTANT - n ;
Distance : 7

138
Tree	double j = n ^ n - n ;
Code	double j = n ^ n - n ;
Distance : 6

139
Tree	int j = n n n . regularizedGammaP ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n n n . regularizedGammaP ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

140
Tree	int j = j * n - n ;
Code	int j = j * n - n ;
Distance : 4

141
Tree	int j = n n n . abs ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n n n . abs ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

142
Tree	boolean j = n / j - j ;
Code	boolean j = n / j - j ;
Distance : 7

143
Tree	int j = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Code	int j = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Distance : 3

144
Tree	double j = NUMBER_CONSTANT * n - j - n ;
Code	double j = NUMBER_CONSTANT * n - j - n ;
Distance : 5

145
Tree	int j = n n n . get ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n n n . get ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

146
Tree	int j = n & NUMBER_CONSTANT - n ;
Code	int j = n & NUMBER_CONSTANT - n ;
Distance : 6

147
Tree	long j = n / j - NUMBER_CONSTANT ;
Code	long j = n / j - NUMBER_CONSTANT ;
Distance : 6

148
Tree	float j = n / j - NUMBER_CONSTANT ;
Code	float j = n / j - NUMBER_CONSTANT ;
Distance : 6

149
Tree	void j = n / j - j ;
Code	void j = n / j - j ;
Distance : 7

150
Tree	int j = n n n . getOffset ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n n n . getOffset ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

151
Tree	int j = j != NUMBER_CONSTANT ;
Code	int j = j != NUMBER_CONSTANT ;
Distance : 6

152
Tree	int n = n & NUMBER_CONSTANT ;
Code	int n = n & NUMBER_CONSTANT ;
Distance : 6

153
Tree	int j = n + j . dotProduct ( j , n , NUMBER_CONSTANT ) + n - j ;
Code	int j = n + j . dotProduct ( j , n , NUMBER_CONSTANT ) + n - j ;
Distance : 12

154
Tree	int j = n . min ( j , n , n ) >= NUMBER_CONSTANT ;
Code	int j = n . min ( j , n , n ) >= NUMBER_CONSTANT ;
Distance : 9

155
Tree	int j = FACT.length + LocalizedFormats.NUMBER_TOO_SMALL - j ;
Code	int j = FACT.length + LocalizedFormats.NUMBER_TOO_SMALL - j ;
Distance : 6

156
Tree	long j = getDimension ( j , n , n ) >= NUMBER_CONSTANT ;
Code	long j = getDimension ( j , n , n ) >= NUMBER_CONSTANT ;
Distance : 9

157
Tree	int j = ( int ) n * xi ;
Code	int j = ( int ) n * xi ;
Distance : 6

158
Tree	double j = n / j - NUMBER_CONSTANT ;
Code	double j = n / j - NUMBER_CONSTANT ;
Distance : 6

159
Tree	long j = NUMBER_CONSTANT * n - n ;
Code	long j = NUMBER_CONSTANT * n - n ;
Distance : 4

160
Tree	long j = STRING_CONSTANT + j + STRING_CONSTANT + STRING_CONSTANT - j ;
Code	long j = STRING_CONSTANT + j + STRING_CONSTANT + STRING_CONSTANT - j ;
Distance : 10

161
Tree	int j = n . getAxis ( j , n , n ) >= NUMBER_CONSTANT ;
Code	int j = n . getAxis ( j , n , n ) >= NUMBER_CONSTANT ;
Distance : 9

162
Tree	long j = getDimension ( j , n , n ) / n ;
Code	long j = getDimension ( j , n , n ) / n ;
Distance : 9

163
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 2

164
Tree	void j = NUMBER_CONSTANT * n - j ;
Code	void j = NUMBER_CONSTANT * n - j ;
Distance : 4

165
Tree	float j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Code	float j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Distance : 6

166
Tree	double j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	double j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 3

167
Tree	int n = n / j - NUMBER_CONSTANT ;
Code	int n = n / j - NUMBER_CONSTANT ;
Distance : 6

168
Tree	byte j = n != NUMBER_CONSTANT ;
Code	byte j = n != NUMBER_CONSTANT ;
Distance : 6

169
Tree	void j = n * n - n ;
Code	void j = n * n - n ;
Distance : 5

170
Tree	long j = n + j - n ;
Code	long j = n + j - n ;
Distance : 7

171
Tree	long j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	long j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 3

172
Tree	int j = n < StepHandler - j ;
Code	int j = n < StepHandler - j ;
Distance : 6

173
Tree	float j = n & NUMBER_CONSTANT - n ;
Code	float j = n & NUMBER_CONSTANT - n ;
Distance : 7

174
Tree	int j = n + j . getChromosomes ( j , n , NUMBER_CONSTANT ) + n - j ;
Code	int j = n + j . getChromosomes ( j , n , NUMBER_CONSTANT ) + n - j ;
Distance : 12

175
Tree	boolean j = NUMBER_CONSTANT * n - j ;
Code	boolean j = NUMBER_CONSTANT * n - j ;
Distance : 4

176
Tree	int j = j == NUMBER_CONSTANT - n ;
Code	int j = j == NUMBER_CONSTANT - n ;
Distance : 6

177
Tree	long j = getDimension ( n , n , n ) >= NUMBER_CONSTANT ;
Code	long j = getDimension ( n , n , n ) >= NUMBER_CONSTANT ;
Distance : 9

178
Tree	int j = n . getEpsilon ( j , n , n ) >= NUMBER_CONSTANT ;
Code	int j = n . getEpsilon ( j , n , n ) >= NUMBER_CONSTANT ;
Distance : 9

179
Tree	boolean j = NUMBER_CONSTANT * n - j - n ;
Code	boolean j = NUMBER_CONSTANT * n - j - n ;
Distance : 5

180
Tree	int j = NUMBER_CONSTANT * FastMath.PI - j ;
Code	int j = NUMBER_CONSTANT * FastMath.PI - j ;
Distance : 4

181
Tree	int j = n + j . incrementAndGet ( j , n , n ) + n - j ;
Code	int j = n + j . incrementAndGet ( j , n , n ) + n - j ;
Distance : 13

182
Tree	int j = n . abs ( j , n , n ) >= NUMBER_CONSTANT ;
Code	int j = n . abs ( j , n , n ) >= NUMBER_CONSTANT ;
Distance : 9

183
Tree	boolean j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	boolean j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 3

184
Tree	int j = ( int ) observed1.length * y.length - j ;
Code	int j = ( int ) observed1.length * y.length - j ;
Distance : 8

185
Tree	int j = n n n . value ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n n n . value ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

186
Tree	int j = n / j - n ;
Code	int j = n / j - n ;
Distance : 6

187
Tree	int j = n n n . dotProduct ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n n n . dotProduct ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

188
Tree	double j = n - j - n ;
Code	double j = n - j - n ;
Distance : 7

189
Tree	int j = n == getDimension - j ;
Code	int j = n == getDimension - j ;
Distance : 6

190
Tree	int j = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Code	int j = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Distance : 3

191
Tree	int j = NUMBER_CONSTANT * natural.length - j ;
Code	int j = NUMBER_CONSTANT * natural.length - j ;
Distance : 4

192
Tree	int j = n + j . get ( j , n , n ) + n - j ;
Code	int j = n + j . get ( j , n , n ) + n - j ;
Distance : 13

193
Tree	int j = ( int ) observed1.length * PivotSelectionRule.BLAND - j ;
Code	int j = ( int ) observed1.length * PivotSelectionRule.BLAND - j ;
Distance : 8

194
Tree	int j = FACT.length + Vector1D.ZERO - j ;
Code	int j = FACT.length + Vector1D.ZERO - j ;
Distance : 6

195
Tree	byte j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Code	byte j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Distance : 6

196
Tree	double j = n + j - n ;
Code	double j = n + j - n ;
Distance : 7

197
Tree	int j = n & NUMBER_CONSTANT ;
Code	int j = n & NUMBER_CONSTANT ;
Distance : 5

198
Tree	boolean j = NUMBER_CONSTANT * n - n ;
Code	boolean j = NUMBER_CONSTANT * n - n ;
Distance : 4

199
Tree	long j = ( n < < NUMBER_CONSTANT ) + n - j ;
Code	long j = ( n < < NUMBER_CONSTANT ) + n - j ;
Distance : 9

200
Tree	int j = n * n - j ;
Code	int j = n * n - j ;
Distance : 4

201
Tree	int j = n == Integer.MIN_VALUE - j ;
Code	int j = n == Integer.MIN_VALUE - j ;
Distance : 6

202
Tree	int j = getDimension ( n , n , j ) >= NUMBER_CONSTANT ;
Code	int j = getDimension ( n , n , j ) >= NUMBER_CONSTANT ;
Distance : 8

203
Tree	int j = coefficients.length + LocalizedFormats.NUMBER_TOO_SMALL - j ;
Code	int j = coefficients.length + LocalizedFormats.NUMBER_TOO_SMALL - j ;
Distance : 6

204
Tree	int j = ( int ) n * Factorial ;
Code	int j = ( int ) n * Factorial ;
Distance : 6

205
Tree	int j = n n n . getAxis ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n n n . getAxis ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

206
Tree	int j = NUMBER_CONSTANT * j - n ;
Code	int j = NUMBER_CONSTANT * j - n ;
Distance : 4

207
Tree	int j = NUMBER_CONSTANT * TDistributionImpl - j ;
Code	int j = NUMBER_CONSTANT * TDistributionImpl - j ;
Distance : 4

208
Tree	int j = n == NUMBER_CONSTANT - j ;
Code	int j = n == NUMBER_CONSTANT - j ;
Distance : 6

209
Tree	int j = n + j . getStateEstimation ( j , n , NUMBER_CONSTANT ) + n - j ;
Code	int j = n + j . getStateEstimation ( j , n , NUMBER_CONSTANT ) + n - j ;
Distance : 12

210
Tree	int j = NUMBER_CONSTANT * n - j - j ;
Code	int j = NUMBER_CONSTANT * n - j - j ;
Distance : 4

211
Tree	int j = val.length + Vector1D.ZERO - j ;
Code	int j = val.length + Vector1D.ZERO - j ;
Distance : 6

212
Tree	int j = n / j - NUMBER_CONSTANT ;
Code	int j = n / j - NUMBER_CONSTANT ;
Distance : 5

213
Tree	int j = n + j . get ( j , n , NUMBER_CONSTANT ) + n - j ;
Code	int j = n + j . get ( j , n , NUMBER_CONSTANT ) + n - j ;
Distance : 12

214
Tree	int j = getDimension ( j , n , n ) / n ;
Code	int j = getDimension ( j , n , n ) / n ;
Distance : 8

215
Tree	int j = ( int ) n * xbar ;
Code	int j = ( int ) n * xbar ;
Distance : 6

216
Tree	int j = NUMBER_CONSTANT * val.length - j ;
Code	int j = NUMBER_CONSTANT * val.length - j ;
Distance : 4

217
Tree	int j = n == Double.MAX_VALUE - j ;
Code	int j = n == Double.MAX_VALUE - j ;
Distance : 6

218
Tree	long j = NUMBER_CONSTANT * n - j ;
Code	long j = NUMBER_CONSTANT * n - j ;
Distance : 4

219
Tree	int j = n + j . incrementAndGet ( j , n , NUMBER_CONSTANT ) + n - j ;
Code	int j = n + j . incrementAndGet ( j , n , NUMBER_CONSTANT ) + n - j ;
Distance : 12

220
Tree	long j = n == NUMBER_CONSTANT - n ;
Code	long j = n == NUMBER_CONSTANT - n ;
Distance : 7

221
Tree	int j = n ^ n - n ;
Code	int j = n ^ n - n ;
Distance : 5

222
Tree	long j = n / j - j ;
Code	long j = n / j - j ;
Distance : 7

223
Tree	void j = n == NUMBER_CONSTANT - n ;
Code	void j = n == NUMBER_CONSTANT - n ;
Distance : 7

224
Tree	int j = coefficients.length + FastMath.PI - j ;
Code	int j = coefficients.length + FastMath.PI - j ;
Distance : 6

225
Tree	double j = getDimension ( n , n , n ) >= NUMBER_CONSTANT ;
Code	double j = getDimension ( n , n , n ) >= NUMBER_CONSTANT ;
Distance : 9

226
Tree	int j = ( int ) n * columns ;
Code	int j = ( int ) n * columns ;
Distance : 6

227
Tree	void j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	void j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 3

228
Tree	int j = getDimension ( n , n , j ) / n ;
Code	int j = getDimension ( n , n , j ) / n ;
Distance : 8

229
Tree	long j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Code	long j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Distance : 6

230
Tree	float j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	float j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 3

231
Tree	int j = n == NUMBER_CONSTANT - n ;
Code	int j = n == NUMBER_CONSTANT - n ;
Distance : 6

232
Tree	int j = n + j . getChromosomes ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n + j . getChromosomes ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

233
Tree	int j = n + j . intValue ( j , n , n ) + n - j ;
Code	int j = n + j . intValue ( j , n , n ) + n - j ;
Distance : 13

234
Tree	int j = val.length + LocalizedFormats.NUMBER_TOO_SMALL - j ;
Code	int j = val.length + LocalizedFormats.NUMBER_TOO_SMALL - j ;
Distance : 6

235
Tree	int j = coefficients.length + Vector1D.ZERO - j ;
Code	int j = coefficients.length + Vector1D.ZERO - j ;
Distance : 6

236
Tree	int j = n + j - n ;
Code	int j = n + j - n ;
Distance : 6

237
Tree	int j = j & NUMBER_CONSTANT - n ;
Code	int j = j & NUMBER_CONSTANT - n ;
Distance : 6

238
Tree	int j = n + j . incrementAndGet ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n + j . incrementAndGet ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

239
Tree	int j = NUMBER_CONSTANT + NUMBER_CONSTANT - j ;
Code	int j = NUMBER_CONSTANT + NUMBER_CONSTANT - j ;
Distance : 5

240
Tree	boolean j = n * n - n ;
Code	boolean j = n * n - n ;
Distance : 5

241
Tree	boolean j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	boolean j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 3

242
Tree	int j = n + j . dotProduct ( j , n , n ) + n - j ;
Code	int j = n + j . dotProduct ( j , n , n ) + n - j ;
Distance : 13

243
Tree	int j = getDimension ( j , n , j ) >= NUMBER_CONSTANT ;
Code	int j = getDimension ( j , n , j ) >= NUMBER_CONSTANT ;
Distance : 8

244
Tree	int j = STRING_CONSTANT + n + STRING_CONSTANT + STRING_CONSTANT - j ;
Code	int j = STRING_CONSTANT + n + STRING_CONSTANT + STRING_CONSTANT - j ;
Distance : 9

245
Tree	int j = n n n . getEpsilon ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n n n . getEpsilon ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

246
Tree	int j = n . getDimension ( j , n , n ) >= NUMBER_CONSTANT ;
Code	int j = n . getDimension ( j , n , n ) >= NUMBER_CONSTANT ;
Distance : 9

247
Tree	int j = n == MathUtils.TWO_PI - j ;
Code	int j = n == MathUtils.TWO_PI - j ;
Distance : 6

248
Tree	int j = n . floor ( j , n , n ) >= NUMBER_CONSTANT ;
Code	int j = n . floor ( j , n , n ) >= NUMBER_CONSTANT ;
Distance : 9

249
Tree	int j = coefficients.length + LocalizedFormats.INVALID_BINARY_DIGIT - j ;
Code	int j = coefficients.length + LocalizedFormats.INVALID_BINARY_DIGIT - j ;
Distance : 6

250
Tree	boolean j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Code	boolean j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Distance : 6

251
Tree	byte j = n + j - n ;
Code	byte j = n + j - n ;
Distance : 7

252
Tree	int j = n == currentState.length - j ;
Code	int j = n == currentState.length - j ;
Distance : 6

253
Tree	int j = ( n < < NUMBER_CONSTANT ) + j - j ;
Code	int j = ( n < < NUMBER_CONSTANT ) + j - j ;
Distance : 8

254
Tree	int j = FACT.length + FastMath.PI - j ;
Code	int j = FACT.length + FastMath.PI - j ;
Distance : 6

255
Tree	long j = n - j - n ;
Code	long j = n - j - n ;
Distance : 7

256
Tree	int j = n + j . clone ( j , n , NUMBER_CONSTANT ) - n ;
Code	int j = n + j . clone ( j , n , NUMBER_CONSTANT ) - n ;
Distance : 10

257
Tree	byte j = n / j - NUMBER_CONSTANT ;
Code	byte j = n / j - NUMBER_CONSTANT ;
Distance : 6

258
Tree	int j = getDimension ( j , n , j ) / n ;
Code	int j = getDimension ( j , n , j ) / n ;
Distance : 8

259
Tree	void j = STRING_CONSTANT + j + STRING_CONSTANT + STRING_CONSTANT - j ;
Code	void j = STRING_CONSTANT + j + STRING_CONSTANT + STRING_CONSTANT - j ;
Distance : 10

260
Tree	int j = j / j - NUMBER_CONSTANT ;
Code	int j = j / j - NUMBER_CONSTANT ;
Distance : 5

261
Tree	float j = STRING_CONSTANT + j + STRING_CONSTANT + STRING_CONSTANT - j ;
Code	float j = STRING_CONSTANT + j + STRING_CONSTANT + STRING_CONSTANT - j ;
Distance : 10

262
Tree	boolean j = NUMBER_CONSTANT * n - n - n ;
Code	boolean j = NUMBER_CONSTANT * n - n - n ;
Distance : 5

263
Tree	int j = n - j - n ;
Code	int j = n - j - n ;
Distance : 6

264
Tree	int j = val.length + FastMath.PI - j ;
Code	int j = val.length + FastMath.PI - j ;
Distance : 6

265
Tree	byte j = n / j - j ;
Code	byte j = n / j - j ;
Distance : 7

266
Tree	double j = n == NUMBER_CONSTANT - j ;
Code	double j = n == NUMBER_CONSTANT - j ;
Distance : 7

267
Tree	boolean j = n != NUMBER_CONSTANT ;
Code	boolean j = n != NUMBER_CONSTANT ;
Distance : 6

268
Tree	int j = n - j - j ;
Code	int j = n - j - j ;
Distance : 6

269
Tree	int j = n == TDistributionImpl - j ;
Code	int j = n == TDistributionImpl - j ;
Distance : 6

270
Tree	boolean j = n + j - n ;
Code	boolean j = n + j - n ;
Distance : 7

271
Tree	byte j = n == NUMBER_CONSTANT - n ;
Code	byte j = n == NUMBER_CONSTANT - n ;
Distance : 7

272
Tree	int j = n < coefficients.length - j ;
Code	int j = n < coefficients.length - j ;
Distance : 6

273
Tree	int j = NUMBER_CONSTANT * Double.MIN_VALUE - j ;
Code	int j = NUMBER_CONSTANT * Double.MIN_VALUE - j ;
Distance : 4

274
Tree	boolean j = n / j - NUMBER_CONSTANT ;
Code	boolean j = n / j - NUMBER_CONSTANT ;
Distance : 6

275
Tree	long j = n & NUMBER_CONSTANT ;
Code	long j = n & NUMBER_CONSTANT ;
Distance : 6

276
Tree	int j = n < sample2.length - j ;
Code	int j = n < sample2.length - j ;
Distance : 6

277
Tree	int j = n . getOffset ( j , n , n ) >= NUMBER_CONSTANT ;
Code	int j = n . getOffset ( j , n , n ) >= NUMBER_CONSTANT ;
Distance : 9

278
Tree	int j = n + j . getChromosomes ( j , n , n ) + n - j ;
Code	int j = n + j . getChromosomes ( j , n , n ) + n - j ;
Distance : 13

279
Tree	int j = n * j - n ;
Code	int j = n * j - n ;
Distance : 5

280
Tree	double j = n - j - j ;
Code	double j = n - j - j ;
Distance : 7

281
Tree	double j = NUMBER_CONSTANT * n - n - n ;
Code	double j = NUMBER_CONSTANT * n - n - n ;
Distance : 5

282
Tree	int j = n - n - n ;
Code	int j = n - n - n ;
Distance : 5

283
Tree	double j = n & NUMBER_CONSTANT - j ;
Code	double j = n & NUMBER_CONSTANT - j ;
Distance : 7

284
Tree	int j = n / n - NUMBER_CONSTANT ;
Code	int j = n / n - NUMBER_CONSTANT ;
Distance : 4

285
Tree	double j = n & NUMBER_CONSTANT - n ;
Code	double j = n & NUMBER_CONSTANT - n ;
Distance : 7

286
Tree	long j = n * n - j ;
Code	long j = n * n - j ;
Distance : 5

287
Tree	byte j = STRING_CONSTANT + j + STRING_CONSTANT + STRING_CONSTANT - j ;
Code	byte j = STRING_CONSTANT + j + STRING_CONSTANT + STRING_CONSTANT - j ;
Distance : 10

288
Tree	double j = NUMBER_CONSTANT + NUMBER_CONSTANT - j ;
Code	double j = NUMBER_CONSTANT + NUMBER_CONSTANT - j ;
Distance : 6

289
Tree	double j = NUMBER_CONSTANT * n - j ;
Code	double j = NUMBER_CONSTANT * n - j ;
Distance : 4

290
Tree	byte j = n - j - n ;
Code	byte j = n - j - n ;
Distance : 7

291
Tree	long j = NUMBER_CONSTANT * n - n - n ;
Code	long j = NUMBER_CONSTANT * n - n - n ;
Distance : 5

292
Tree	boolean j = n == NUMBER_CONSTANT - n ;
Code	boolean j = n == NUMBER_CONSTANT - n ;
Distance : 7

293
Tree	int j = NUMBER_CONSTANT * sample2.length - j ;
Code	int j = NUMBER_CONSTANT * sample2.length - j ;
Distance : 4

294
Tree	long j = n + j - j ;
Code	long j = n + j - j ;
Distance : 7

295
Tree	float j = n / j - j ;
Code	float j = n / j - j ;
Distance : 7

296
Tree	int j = val.length n Cartesian1D.ZERO - n ;
Code	int j = val.length n Cartesian1D.ZERO - n ;
Distance : 6

297
Tree	int j = coefficients.length - Cartesian1D.ZERO - n ;
Code	int j = coefficients.length - Cartesian1D.ZERO - n ;
Distance : 6

298
Tree	int j = getDimension ( j , n , n ) >= NUMBER_CONSTANT ;
Code	int j = getDimension ( j , n , n ) >= NUMBER_CONSTANT ;
Distance : 8

299
Tree	long j = NUMBER_CONSTANT + NUMBER_CONSTANT - j ;
Code	long j = NUMBER_CONSTANT + NUMBER_CONSTANT - j ;
Distance : 6

300
Tree	int j = n + j . getStateEstimation ( j , n , n ) + n - j ;
Code	int j = n + j . getStateEstimation ( j , n , n ) + n - j ;
Distance : 13

301
Tree	int j = ( n < < NUMBER_CONSTANT ) + n - n ;
Code	int j = ( n < < NUMBER_CONSTANT ) + n - n ;
Distance : 8

302
Tree	double j = n == NUMBER_CONSTANT - n ;
Code	double j = n == NUMBER_CONSTANT - n ;
Distance : 7

303
Tree	boolean j = n ^ n - j ;
Code	boolean j = n ^ n - j ;
Distance : 6

304
Tree	int j = n ( n , n , n ) / n ;
Code	int j = n ( n , n , n ) / n ;
Distance : 8

305
Tree	float j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	float j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 3

306
Tree	byte j = n & NUMBER_CONSTANT - n ;
Code	byte j = n & NUMBER_CONSTANT - n ;
Distance : 7

307
Tree	byte j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	byte j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 3

308
Tree	double j = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Code	double j = NUMBER_CONSTANT * j - NUMBER_CONSTANT ;
Distance : 4

309
Tree	double j = j & NUMBER_CONSTANT ;
Code	double j = j & NUMBER_CONSTANT ;
Distance : 7

========================================================================


========================================================================
Example Number: 6
Parent Code is: 
{ return getCumPct ( ( Comparable < > ) v ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return getPct ( ( Comparable < > ) v ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=getCumPct}) (214{val=(}) (11 (214{val=(}) (74 (43 (800{val=Comparable})) (230{val=<}) (76{val=?}) (231{val=>})) (215{val=)}) (800{val=v})) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=getPct}) (214{val=(}) (11 (214{val=(}) (74 (43 (800{val=Comparable})) (230{val=<}) (76{val=?}) (231{val=>})) (215{val=)}) (800{val=v})) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/75/parent/src_main_java_org_apache_commons_math_stat_Frequency.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 230
Wrong
========================================================================
False

0
Tree	{ return getCumPct ( Comparable ) . < v > getCumPct () ; }
Code	{ return getCumPct ( Comparable ) . < v > getCumPct () ; }
Distance : 8

1
Tree	{ return getCumPct ( ( Comparable < v > ) >= ) ; }
Code	{ return getCumPct ( ( Comparable < v > ) >= ) ; }
Distance : 3

2
Tree	{ return getCumPct ( ( Comparable < v > ) ? ) ; }
Code	{ return getCumPct ( ( Comparable < v > ) ? ) ; }
Distance : 3

3
Tree	{ return getCumPct ( ( Comparable < v > ) {} ) ; }
Code	{ return getCumPct ( ( Comparable < v > ) {} ) ; }
Distance : 3

4
Tree	{ return getCumPct ( ( Comparable < v > ) >= ) ; }
Code	{ return getCumPct ( ( Comparable < v > ) >= ) ; }
Distance : 3

5
Tree	{ return getCumPct ( ( Comparable < v > ) % ) ; }
Code	{ return getCumPct ( ( Comparable < v > ) % ) ; }
Distance : 3

6
Tree	{ return getCumPct ( ( ( Comparable ) v . getCumPct () ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getCumPct () ) . v ) ; }
Distance : 8

7
Tree	{ return getCumPct ( ( Comparable < v > ) ? ) ; }
Code	{ return getCumPct ( ( Comparable < v > ) ? ) ; }
Distance : 3

8
Tree	{ return getCumPct ( ( Comparable < v > ) : ) ; }
Code	{ return getCumPct ( ( Comparable < v > ) : ) ; }
Distance : 3

9
Tree	{ return getCumPct ( ( Comparable < v > ) {} ) ; }
Code	{ return getCumPct ( ( Comparable < v > ) {} ) ; }
Distance : 3

10
Tree	{ return ( ( Comparable ) v . getPct () ) . v . getCumPct () ; }
Code	{ return ( ( Comparable ) v . getPct () ) . v . getCumPct () ; }
Distance : 10

11
Tree	{ return getPct ( ( ( Comparable ) v . getCumPct ( v ) ) . v ) ; }
Code	{ return getPct ( ( ( Comparable ) v . getCumPct ( v ) ) . v ) ; }
Distance : 9

12
Tree	{ return getPct ( ( Comparable ) v . getCumPct ( Comparable ) ) ; }
Code	{ return getPct ( ( Comparable ) v . getCumPct ( Comparable ) ) ; }
Distance : 7

13
Tree	{ return Comparable . getCumPct ( Comparable ) . < v > getCumPct () ; }
Code	{ return Comparable . getCumPct ( Comparable ) . < v > getCumPct () ; }
Distance : 9

14
Tree	{ return getPct ( ( Comparable ) getPct ( v ) ) ; }
Code	{ return getPct ( ( Comparable ) getPct ( v ) ) ; }
Distance : 4

15
Tree	{ return getPct ( ( Comparable ) v . getPct ( NUMBER_CONSTANT ) ) ; }
Code	{ return getPct ( ( Comparable ) v . getPct ( NUMBER_CONSTANT ) ) ; }
Distance : 7

16
Tree	{ return getCumPct ( ( Comparable ) v . getPct ( v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getPct ( v ) ) ; }
Distance : 7

17
Tree	{ return getPct ( ( Comparable ) v . getPct ( null ) ) ; }
Code	{ return getPct ( ( Comparable ) v . getPct ( null ) ) ; }
Distance : 7

18
Tree	{ return getCumPct ( v ) . < v > getCumPct () ; }
Code	{ return getCumPct ( v ) . < v > getCumPct () ; }
Distance : 8

19
Tree	{ return getCumPct ( ( ( Comparable ) v . getCumPct ( Comparable ) ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getCumPct ( Comparable ) ) . v ) ; }
Distance : 10

20
Tree	{ return getCumPct ( ( v ) v . getCumPct ( v ) ) ; }
Code	{ return getCumPct ( ( v ) v . getCumPct ( v ) ) ; }
Distance : 8

21
Tree	{ return v . getCumPct ( Comparable ) . < <= > getCumPct () ; }
Code	{ return v . getCumPct ( Comparable ) . < <= > getCumPct () ; }
Distance : 9

22
Tree	{ return Comparable . getCumPct ( Comparable ) . < tolerance > getCumPct () ; }
Code	{ return Comparable . getCumPct ( Comparable ) . < tolerance > getCumPct () ; }
Distance : 9

23
Tree	{ return getPct ( ( ( Comparable ) Comparable ) . v ) ; }
Code	{ return getPct ( ( ( Comparable ) Comparable ) . v ) ; }
Distance : 4

24
Tree	{ return getCumPct ( ( ( Comparable ) v . getCumPct ( v ) ) . Comparable ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getCumPct ( v ) ) . Comparable ) ; }
Distance : 11

25
Tree	{ return Comparable ( byte , null ) ; }
Code	{ return Comparable ( byte , null ) ; }
Distance : 7

26
Tree	{ return getCumPct ( ( Comparable ) Comparable . getCumPct ( NUMBER_CONSTANT ) ) ; }
Code	{ return getCumPct ( ( Comparable ) Comparable . getCumPct ( NUMBER_CONSTANT ) ) ; }
Distance : 8

27
Tree	{ return getCumPct ( ( Comparable ) v . getPct ( Comparable ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getPct ( Comparable ) ) ; }
Distance : 8

28
Tree	{ return Comparable ( byte , false ) ; }
Code	{ return Comparable ( byte , false ) ; }
Distance : 7

29
Tree	{ return getCumPct ( ( Comparable ) Comparable . getCumPct ( null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) Comparable . getCumPct ( null ) ) ; }
Distance : 8

30
Tree	{ return v . getCumPct ( Comparable ) . getCumPct ( this ) ; }
Code	{ return v . getCumPct ( Comparable ) . getCumPct ( this ) ; }
Distance : 8

31
Tree	{ return getCumPct ( ( v ) v . getPct ( NUMBER_CONSTANT ) ) ; }
Code	{ return getCumPct ( ( v ) v . getPct ( NUMBER_CONSTANT ) ) ; }
Distance : 9

32
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct ( v ) ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getPct ( v ) ) . v ) ; }
Distance : 10

33
Tree	{ return getCumPct ( ( Comparable < v > ) ^ ) ; }
Code	{ return getCumPct ( ( Comparable < v > ) ^ ) ; }
Distance : 3

34
Tree	{ return Comparable . getCumPct ( Comparable , line.cos , v , line.sin ) ; }
Code	{ return Comparable . getCumPct ( Comparable , line.cos , v , line.sin ) ; }
Distance : 8

35
Tree	{ return Comparable ( double , null ) ; }
Code	{ return Comparable ( double , null ) ; }
Distance : 7

36
Tree	{ return getPct ( ( Comparable ) Comparable . getCumPct ( NUMBER_CONSTANT ) ) ; }
Code	{ return getPct ( ( Comparable ) Comparable . getCumPct ( NUMBER_CONSTANT ) ) ; }
Distance : 7

37
Tree	{ return getCumPct ( ( ( Comparable ) v . getCumPct ( NUMBER_CONSTANT ) ) . Comparable ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getCumPct ( NUMBER_CONSTANT ) ) . Comparable ) ; }
Distance : 11

38
Tree	{ return getCumPct ( Comparable , v . getCumPct () , getCumPct ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , getCumPct ) ; }
Distance : 9

39
Tree	{ return getPct ( ( ( Comparable ) v . getPct () ) . v ) ; }
Code	{ return getPct ( ( ( Comparable ) v . getPct () ) . v ) ; }
Distance : 7

40
Tree	{ return getPct ( ( Comparable ) Comparable . getCumPct ( null ) ) ; }
Code	{ return getPct ( ( Comparable ) Comparable . getCumPct ( null ) ) ; }
Distance : 7

41
Tree	{ return v . getCumPct ( Comparable ) . < false > getCumPct () ; }
Code	{ return v . getCumPct ( Comparable ) . < false > getCumPct () ; }
Distance : 9

42
Tree	{ return getCumPct ( ( Comparable < v > ) <= ) ; }
Code	{ return getCumPct ( ( Comparable < v > ) <= ) ; }
Distance : 3

43
Tree	{ return getCumPct ( ( Comparable ) getPct ( v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getPct ( v ) ) ; }
Distance : 5

44
Tree	{ return Comparable ( ++ , null ) ; }
Code	{ return Comparable ( ++ , null ) ; }
Distance : 7

45
Tree	{ return Comparable . getCumPct ( Comparable ) . getPct ( this ) ; }
Code	{ return Comparable . getCumPct ( Comparable ) . getPct ( this ) ; }
Distance : 8

46
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; }
Distance : 8

47
Tree	{ return getCumPct ( ( Comparable ) v . getCumPct ( v , ( ? [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getCumPct ( v , ( ? [] ) null ) ) ; }
Distance : 13

48
Tree	{ return getCumPct ( ( v ) getCumPct ( v ) ) ; }
Code	{ return getCumPct ( ( v ) getCumPct ( v ) ) ; }
Distance : 6

49
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct ( NUMBER_CONSTANT ) ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getPct ( NUMBER_CONSTANT ) ) . v ) ; }
Distance : 10

50
Tree	{ return Comparable . getCumPct ( Comparable ) . < double > getCumPct () ; }
Code	{ return Comparable . getCumPct ( Comparable ) . < double > getCumPct () ; }
Distance : 9

51
Tree	{ return getCumPct ( ( ( Comparable ) Comparable . getCumPct () ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) Comparable . getCumPct () ) . v ) ; }
Distance : 8

52
Tree	{ return ( ( Comparable ) v . getCumPct () ) . Comparable . getCumPct () ; }
Code	{ return ( ( Comparable ) v . getCumPct () ) . Comparable . getCumPct () ; }
Distance : 11

53
Tree	{ return getCumPct ( ( Comparable < v > ) &= ) ; }
Code	{ return getCumPct ( ( Comparable < v > ) &= ) ; }
Distance : 3

54
Tree	{ return getCumPct ( ( ( Comparable ) Comparable ) . Comparable ) ; }
Code	{ return getCumPct ( ( ( Comparable ) Comparable ) . Comparable ) ; }
Distance : 6

55
Tree	{ return getCumPct ( ( Comparable < v > ) *= ) ; }
Code	{ return getCumPct ( ( Comparable < v > ) *= ) ; }
Distance : 3

56
Tree	{ return getCumPct ( ( ( Comparable ) v . getCumPct ( NUMBER_CONSTANT ) ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getCumPct ( NUMBER_CONSTANT ) ) . v ) ; }
Distance : 10

57
Tree	{ return getPct ( ( ( Comparable ) v . getPct ( NUMBER_CONSTANT ) ) . v ) ; }
Code	{ return getPct ( ( ( Comparable ) v . getPct ( NUMBER_CONSTANT ) ) . v ) ; }
Distance : 9

58
Tree	{ return getCumPct ( ( Comparable ) getCumPct ( ( v ) v , v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getCumPct ( ( v ) v , v ) ) ; }
Distance : 9

59
Tree	{ return getCumPct ( Comparable ) . < Comparable > getCumPct () ; }
Code	{ return getCumPct ( Comparable ) . < Comparable > getCumPct () ; }
Distance : 8

60
Tree	{ return getCumPct ( Comparable , v . getCumPct () , BetaDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , BetaDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY ) ; }
Distance : 9

61
Tree	{ return ( ( Comparable ) v . getCumPct () ) . v . getCumPct () ; }
Code	{ return ( ( Comparable ) v . getCumPct () ) . v . getCumPct () ; }
Distance : 10

62
Tree	{ return getCumPct ( ( Comparable ) getCumPct ( ( v ) v , Comparable ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getCumPct ( ( v ) v , Comparable ) ) ; }
Distance : 9

63
Tree	{ return getPct ( ( ( Comparable ) v . getPct ( v ) ) . v ) ; }
Code	{ return getPct ( ( ( Comparable ) v . getPct ( v ) ) . v ) ; }
Distance : 9

64
Tree	{ return getCumPct ( ( Comparable < ? super v > ) {} ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) {} ) ; }
Distance : 5

65
Tree	public double += ( null < null > -= , double : , double : , false < line.originOffset > {} ) throws null ;
Code	public double += ( null < null > -= , double : , double : , false < line.originOffset > {} ) throws null ;
Distance : 21

66
Tree	{ return getPct ( ( Comparable ) getCumPct ( v ) ) ; }
Code	{ return getPct ( ( Comparable ) getCumPct ( v ) ) ; }
Distance : 4

67
Tree	{ return v . getCumPct ( Comparable ) . < v > getCumPct () ; }
Code	{ return v . getCumPct ( Comparable ) . < v > getCumPct () ; }
Distance : 9

68
Tree	{ return getCumPct ( ( Comparable < v > ) <= ) ; }
Code	{ return getCumPct ( ( Comparable < v > ) <= ) ; }
Distance : 3

69
Tree	{ return Comparable ( ++ , false ) ; }
Code	{ return Comparable ( ++ , false ) ; }
Distance : 7

70
Tree	{ return getPct ( ( Comparable ) v . getCumPct ( NUMBER_CONSTANT ) ) ; }
Code	{ return getPct ( ( Comparable ) v . getCumPct ( NUMBER_CONSTANT ) ) ; }
Distance : 7

71
Tree	{ return getCumPct ( ( Comparable ) v . getPct ( NUMBER_CONSTANT ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getPct ( NUMBER_CONSTANT ) ) ; }
Distance : 8

72
Tree	{ return getPct ( ( ( Comparable ) v ) . Comparable ) ; }
Code	{ return getPct ( ( ( Comparable ) v ) . Comparable ) ; }
Distance : 5

73
Tree	{ return getCumPct ( ( Comparable ) Comparable . getPct ( null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) Comparable . getPct ( null ) ) ; }
Distance : 8

74
Tree	{ return getCumPct ( ( ( Comparable ) v ) . Comparable ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v ) . Comparable ) ; }
Distance : 6

75
Tree	{ return getPct ( ( Comparable ) getCumPct ( ( v ) v , v ) ) ; }
Code	{ return getPct ( ( Comparable ) getCumPct ( ( v ) v , v ) ) ; }
Distance : 8

76
Tree	{ return Comparable . getCumPct ( Comparable ) . getCumPct ( this ) ; }
Code	{ return Comparable . getCumPct ( Comparable ) . getCumPct ( this ) ; }
Distance : 8

77
Tree	{ return getCumPct ( ( Comparable < v > ) % ) ; }
Code	{ return getCumPct ( ( Comparable < v > ) % ) ; }
Distance : 3

78
Tree	{ return ( ( Comparable ) Comparable . getCumPct () ) . v . getCumPct () ; }
Code	{ return ( ( Comparable ) Comparable . getCumPct () ) . v . getCumPct () ; }
Distance : 10

79
Tree	{ return getCumPct ( ( ( Comparable ) v ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v ) . v ) ; }
Distance : 5

80
Tree	{ return getCumPct ( Comparable , v . getCumPct () , line.sin ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , line.sin ) ; }
Distance : 9

81
Tree	{ return getCumPct ( ( Comparable < v > ) & ) ; }
Code	{ return getCumPct ( ( Comparable < v > ) & ) ; }
Distance : 3

82
Tree	{ return getCumPct ( ( Comparable ) v . getCumPct ( v , ( Object [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getCumPct ( v , ( Object [] ) null ) ) ; }
Distance : 13

83
Tree	{ return getPct ( ( Comparable ) getPct ( ( Comparable ) v , v ) ) ; }
Code	{ return getPct ( ( Comparable ) getPct ( ( Comparable ) v , v ) ) ; }
Distance : 8

84
Tree	{ return getCumPct ( ( Comparable < v > ) ^ ) ; }
Code	{ return getCumPct ( ( Comparable < v > ) ^ ) ; }
Distance : 3

85
Tree	{ return getCumPct ( ( Comparable < ? super v > ) : ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) : ) ; }
Distance : 5

86
Tree	{ return v ( ! , null ) ; }
Code	{ return v ( ! , null ) ; }
Distance : 7

87
Tree	{ return getCumPct ( ( Comparable ) v . getCumPct ( NUMBER_CONSTANT ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getCumPct ( NUMBER_CONSTANT ) ) ; }
Distance : 8

88
Tree	{ return getCumPct ( ( Comparable < v > ) : ) ; }
Code	{ return getCumPct ( ( Comparable < v > ) : ) ; }
Distance : 3

89
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . Comparable ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . Comparable ) ; }
Distance : 9

90
Tree	{ return getCumPct ( ( Comparable ) v . getPct ( null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getPct ( null ) ) ; }
Distance : 8

91
Tree	{ return getCumPct ( ( Comparable ) v . getCumPct ( null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getCumPct ( null ) ) ; }
Distance : 8

92
Tree	{ return getCumPct ( ( Comparable < ? super v > ) <= ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) <= ) ; }
Distance : 5

93
Tree	public double += ( null < null > -= , double : , double : , false < line.originOffset > : ) throws null ;
Code	public double += ( null < null > -= , double : , double : , false < line.originOffset > : ) throws null ;
Distance : 21

94
Tree	{ return getCumPct ( ( Comparable < v > ) &= ) ; }
Code	{ return getCumPct ( ( Comparable < v > ) &= ) ; }
Distance : 3

95
Tree	{ return getCumPct ( ( Comparable ) getPct ( ( v ) v , Comparable ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getPct ( ( v ) v , Comparable ) ) ; }
Distance : 9

96
Tree	{ return v . getCumPct ( Comparable ) . < Comparable > getCumPct () ; }
Code	{ return v . getCumPct ( Comparable ) . < Comparable > getCumPct () ; }
Distance : 9

97
Tree	{ return getCumPct ( ( Comparable < v > ) *= ) ; }
Code	{ return getCumPct ( ( Comparable < v > ) *= ) ; }
Distance : 3

98
Tree	{ return Comparable . getPct ( ( ( Comparable ) v ) . v ) ; }
Code	{ return Comparable . getPct ( ( ( Comparable ) v ) . v ) ; }
Distance : 6

99
Tree	{ return ( ( Comparable ) v . getPct () ) . Comparable . getCumPct () ; }
Code	{ return ( ( Comparable ) v . getPct () ) . Comparable . getCumPct () ; }
Distance : 11

100
Tree	{ return getCumPct ( Comparable ) . < v > getPct () ; }
Code	{ return getCumPct ( Comparable ) . < v > getPct () ; }
Distance : 8

101
Tree	public double += ( ! < null > -= , double : , double : , false < line.originOffset > : ) throws null ;
Code	public double += ( ! < null > -= , double : , double : , false < line.originOffset > : ) throws null ;
Distance : 21

102
Tree	{ return getCumPct ( ( ( v ) v . getCumPct () ) . v ) ; }
Code	{ return getCumPct ( ( ( v ) v . getCumPct () ) . v ) ; }
Distance : 9

103
Tree	{ return ( ( Comparable ) v . getCumPct () ) . Comparable . getPct () ; }
Code	{ return ( ( Comparable ) v . getCumPct () ) . Comparable . getPct () ; }
Distance : 11

104
Tree	{ return getCumPct ( ( Comparable < ? super v > ) % ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) % ) ; }
Distance : 5

105
Tree	{ return v . getCumPct ( Comparable ) . getPct ( this ) ; }
Code	{ return v . getCumPct ( Comparable ) . getPct ( this ) ; }
Distance : 8

106
Tree	{ return Comparable . getPct ( Comparable ) . < v > getPct () ; }
Code	{ return Comparable . getPct ( Comparable ) . < v > getPct () ; }
Distance : 9

107
Tree	{ return getCumPct ( ( Comparable ) v . getCumPct ( v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getCumPct ( v ) ) ; }
Distance : 7

108
Tree	{ return getPct ( ( ( Comparable ) v . getCumPct ( NUMBER_CONSTANT ) ) . v ) ; }
Code	{ return getPct ( ( ( Comparable ) v . getCumPct ( NUMBER_CONSTANT ) ) . v ) ; }
Distance : 9

109
Tree	{ return Comparable . getCumPct ( ( ( Comparable ) v ) . Comparable ) ; }
Code	{ return Comparable . getCumPct ( ( ( Comparable ) v ) . Comparable ) ; }
Distance : 8

110
Tree	{ return getCumPct ( ( Comparable ) getPct ( ( v ) Comparable , v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getPct ( ( v ) Comparable , v ) ) ; }
Distance : 9

111
Tree	{ return Comparable . getPct ( Comparable ) . getCumPct ( this ) ; }
Code	{ return Comparable . getPct ( Comparable ) . getCumPct ( this ) ; }
Distance : 8

112
Tree	public double += ( null < null > -= , double : , double : , null < line.originOffset > : ) throws null ;
Code	public double += ( null < null > -= , double : , double : , null < line.originOffset > : ) throws null ;
Distance : 21

113
Tree	{ return getCumPct ( ( Comparable ) getPct ( ( Comparable ) v , v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getPct ( ( Comparable ) v , v ) ) ; }
Distance : 9

114
Tree	{ return ( ( Comparable ) Comparable . getCumPct () ) . v . getPct () ; }
Code	{ return ( ( Comparable ) Comparable . getCumPct () ) . v . getPct () ; }
Distance : 10

115
Tree	{ return Comparable . getCumPct ( Comparable , a.value , v , line.sin ) ; }
Code	{ return Comparable . getCumPct ( Comparable , a.value , v , line.sin ) ; }
Distance : 8

116
Tree	{ return getCumPct ( Comparable , v . getCumPct () , originalLine.tolerance ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , originalLine.tolerance ) ; }
Distance : 9

117
Tree	{ return Comparable . getCumPct ( Comparable , line.cos , v , b3.value ) ; }
Code	{ return Comparable . getCumPct ( Comparable , line.cos , v , b3.value ) ; }
Distance : 8

118
Tree	{ return getPct ( ( Comparable ) getPct ( ( v ) v , v ) ) ; }
Code	{ return getPct ( ( Comparable ) getPct ( ( v ) v , v ) ) ; }
Distance : 8

119
Tree	{ return getCumPct ( ( Comparable < v > ) & ) ; }
Code	{ return getCumPct ( ( Comparable < v > ) & ) ; }
Distance : 3

120
Tree	{ return getCumPct ( ( ( Comparable ) Comparable . getPct ( NUMBER_CONSTANT ) ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) Comparable . getPct ( NUMBER_CONSTANT ) ) . v ) ; }
Distance : 10

121
Tree	public double += ( null < null > v , double : , double : , false < line.originOffset > : ) throws null ;
Code	public double += ( null < null > v , double : , double : , false < line.originOffset > : ) throws null ;
Distance : 21

122
Tree	{ return getCumPct ( ( v ) v . getCumPct ( NUMBER_CONSTANT ) ) ; }
Code	{ return getCumPct ( ( v ) v . getCumPct ( NUMBER_CONSTANT ) ) ; }
Distance : 9

123
Tree	{ return Comparable . getCumPct ( Comparable , line.cos , v , orders ) ; }
Code	{ return Comparable . getCumPct ( Comparable , line.cos , v , orders ) ; }
Distance : 8

124
Tree	{ return getPct ( ( Comparable ) getPct ( Comparable ) ) ; }
Code	{ return getPct ( ( Comparable ) getPct ( Comparable ) ) ; }
Distance : 5

125
Tree	{ return getCumPct ( ( Comparable < ? super v > ) >= ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) >= ) ; }
Distance : 5

126
Tree	{ return getPct ( Comparable ) . < v > getPct () ; }
Code	{ return getPct ( Comparable ) . < v > getPct () ; }
Distance : 7

127
Tree	{ return getCumPct ( ( Comparable ) v . getCumPct ( return; ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getCumPct ( return; ) ) ; }
Distance : 8

128
Tree	{ return ( ( Comparable ) v . getPct () ) . v . getPct () ; }
Code	{ return ( ( Comparable ) v . getPct () ) . v . getPct () ; }
Distance : 10

129
Tree	{ return getCumPct ( ( Comparable < ? super v > ) *= ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) *= ) ; }
Distance : 5

130
Tree	{ return getCumPct ( ( ( v ) v ) . v ) ; }
Code	{ return getCumPct ( ( ( v ) v ) . v ) ; }
Distance : 6

131
Tree	{ return getCumPct ( ( v ) v . getCumPct ( null ) ) ; }
Code	{ return getCumPct ( ( v ) v . getCumPct ( null ) ) ; }
Distance : 9

132
Tree	{ return v . getPct ( ( ( Comparable ) v ) . v ) ; }
Code	{ return v . getPct ( ( ( Comparable ) v ) . v ) ; }
Distance : 6

133
Tree	{ return Comparable . getPct ( Comparable ) . < Comparable > getCumPct () ; }
Code	{ return Comparable . getPct ( Comparable ) . < Comparable > getCumPct () ; }
Distance : 9

134
Tree	{ return getPct ( ( Comparable ) getCumPct ( Comparable ) ) ; }
Code	{ return getPct ( ( Comparable ) getCumPct ( Comparable ) ) ; }
Distance : 5

135
Tree	{ return Comparable . getCumPct ( Comparable , v.data , v , line.sin ) ; }
Code	{ return Comparable . getCumPct ( Comparable , v.data , v , line.sin ) ; }
Distance : 8

136
Tree	{ return getPct ( ( Comparable ) v . getPct ( v ) ) ; }
Code	{ return getPct ( ( Comparable ) v . getPct ( v ) ) ; }
Distance : 6

137
Tree	{ return getCumPct ( ( Comparable ) v . getCumPct ( v , ( tolerance [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getCumPct ( v , ( tolerance [] ) null ) ) ; }
Distance : 13

138
Tree	{ return Comparable . getPct ( Comparable ) . < v > getCumPct () ; }
Code	{ return Comparable . getPct ( Comparable ) . < v > getCumPct () ; }
Distance : 9

139
Tree	{ return Comparable . getCumPct ( ( ( Comparable ) v ) . v ) ; }
Code	{ return Comparable . getCumPct ( ( ( Comparable ) v ) . v ) ; }
Distance : 7

140
Tree	{ return v . getCumPct ( Comparable ) . < ? > getCumPct () ; }
Code	{ return v . getCumPct ( Comparable ) . < ? > getCumPct () ; }
Distance : 9

141
Tree	public double += ( ! < null > v , double : , double : , false < line.originOffset > : ) throws null ;
Code	public double += ( ! < null > v , double : , double : , false < line.originOffset > : ) throws null ;
Distance : 21

142
Tree	{ return getCumPct ( ( Comparable < ? super v > ) ^ ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) ^ ) ; }
Distance : 5

143
Tree	{ return getPct ( ( Comparable ) v . getCumPct ( null ) ) ; }
Code	{ return getPct ( ( Comparable ) v . getCumPct ( null ) ) ; }
Distance : 7

144
Tree	{ return getCumPct ( ( Comparable ) getCumPct ( Comparable ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getCumPct ( Comparable ) ) ; }
Distance : 6

145
Tree	{ return ( ( v ) v . getCumPct () ) . v . getCumPct () ; }
Code	{ return ( ( v ) v . getCumPct () ) . v . getCumPct () ; }
Distance : 11

146
Tree	{ return getCumPct ( ( ( Comparable ) Comparable . getPct () ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) Comparable . getPct () ) . v ) ; }
Distance : 8

147
Tree	{ return getCumPct ( Comparable , v . getCumPct () , line.originOffset ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , line.originOffset ) ; }
Distance : 9

148
Tree	{ return v . getPct ( Comparable ) . < v > getCumPct () ; }
Code	{ return v . getPct ( Comparable ) . < v > getCumPct () ; }
Distance : 9

149
Tree	{ return getPct ( Comparable ) . < v > getCumPct () ; }
Code	{ return getPct ( Comparable ) . < v > getCumPct () ; }
Distance : 7

150
Tree	{ return getCumPct ( ( Comparable < ? super v > ) ? ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) ? ) ; }
Distance : 5

151
Tree	{ return getCumPct ( ( ( Comparable ) Comparable ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) Comparable ) . v ) ; }
Distance : 5

152
Tree	public double += ( null < null > -= , double : , double : , false < getCumPct > : ) throws null ;
Code	public double += ( null < null > -= , double : , double : , false < getCumPct > : ) throws null ;
Distance : 21

153
Tree	{ return getCumPct ( ( ( v ) v . getCumPct ( NUMBER_CONSTANT ) ) . v ) ; }
Code	{ return getCumPct ( ( ( v ) v . getCumPct ( NUMBER_CONSTANT ) ) . v ) ; }
Distance : 11

154
Tree	{ return getCumPct ( ( Comparable < ? super v > ) & ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) & ) ; }
Distance : 5

155
Tree	{ return getCumPct ( Comparable , v . getCumPct () , Precision.EPSILON ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , Precision.EPSILON ) ; }
Distance : 9

156
Tree	{ return Comparable . getCumPct ( Comparable , getCumPct , v , line.sin ) ; }
Code	{ return Comparable . getCumPct ( Comparable , getCumPct , v , line.sin ) ; }
Distance : 8

157
Tree	{ return getCumPct ( Comparable ) . < Comparable > getPct () ; }
Code	{ return getCumPct ( Comparable ) . < Comparable > getPct () ; }
Distance : 8

158
Tree	{ return getCumPct ( v ) . < v > getPct () ; }
Code	{ return getCumPct ( v ) . < v > getPct () ; }
Distance : 8

159
Tree	{ return v . getCumPct ( ( ( Comparable ) v ) . v ) ; }
Code	{ return v . getCumPct ( ( ( Comparable ) v ) . v ) ; }
Distance : 7

160
Tree	{ return getPct ( Comparable ) . < Comparable > getCumPct () ; }
Code	{ return getPct ( Comparable ) . < Comparable > getCumPct () ; }
Distance : 7

161
Tree	{ return Comparable . getCumPct ( Comparable , otherL.sin , v , line.sin ) ; }
Code	{ return Comparable . getCumPct ( Comparable , otherL.sin , v , line.sin ) ; }
Distance : 8

162
Tree	{ return getPct ( ( Comparable ) v . getCumPct ( v ) ) ; }
Code	{ return getPct ( ( Comparable ) v . getCumPct ( v ) ) ; }
Distance : 6

163
Tree	{ return getPct ( ( ( Comparable ) v . getCumPct ( Comparable ) ) . v ) ; }
Code	{ return getPct ( ( ( Comparable ) v . getCumPct ( Comparable ) ) . v ) ; }
Distance : 9

164
Tree	{ return getPct ( v ) . < v > getCumPct () ; }
Code	{ return getPct ( v ) . < v > getCumPct () ; }
Distance : 7

165
Tree	{ return Comparable ( ! , null ) ; }
Code	{ return Comparable ( ! , null ) ; }
Distance : 7

166
Tree	{ return getCumPct ( ( Comparable ) Comparable . getCumPct ( Comparable ) ) ; }
Code	{ return getCumPct ( ( Comparable ) Comparable . getCumPct ( Comparable ) ) ; }
Distance : 8

167
Tree	{ return Comparable ( ! , false ) ; }
Code	{ return Comparable ( ! , false ) ; }
Distance : 7

168
Tree	{ return getCumPct ( ( Comparable < ? super v > ) &= ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) &= ) ; }
Distance : 5

169
Tree	{ return getPct ( ( ( Comparable ) v . getCumPct ( v ) ) . Comparable ) ; }
Code	{ return getPct ( ( ( Comparable ) v . getCumPct ( v ) ) . Comparable ) ; }
Distance : 10

170
Tree	{ return Comparable . getCumPct ( Comparable ) . < ? > getCumPct () ; }
Code	{ return Comparable . getCumPct ( Comparable ) . < ? > getCumPct () ; }
Distance : 9

171
Tree	{ return Comparable . getCumPct ( Comparable ) . < <= > getCumPct () ; }
Code	{ return Comparable . getCumPct ( Comparable ) . < <= > getCumPct () ; }
Distance : 9

172
Tree	{ return getCumPct ( ( Comparable ) getCumPct ( ( Comparable ) v , v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getCumPct ( ( Comparable ) v , v ) ) ; }
Distance : 9

173
Tree	{ return getCumPct ( ( Comparable ) v . getCumPct ( Comparable , ( Object [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getCumPct ( Comparable , ( Object [] ) null ) ) ; }
Distance : 13

174
Tree	{ return Comparable . getCumPct ( Comparable ) . < false > getCumPct () ; }
Code	{ return Comparable . getCumPct ( Comparable ) . < false > getCumPct () ; }
Distance : 9

175
Tree	{ return getCumPct ( ( Comparable ) v . getCumPct ( Comparable , ( tolerance [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getCumPct ( Comparable , ( tolerance [] ) null ) ) ; }
Distance : 13

176
Tree	{ return getPct ( ( ( Comparable ) v . getCumPct ( NUMBER_CONSTANT ) ) . Comparable ) ; }
Code	{ return getPct ( ( ( Comparable ) v . getCumPct ( NUMBER_CONSTANT ) ) . Comparable ) ; }
Distance : 10

177
Tree	{ return getPct ( ( v ) v . getCumPct ( NUMBER_CONSTANT ) ) ; }
Code	{ return getPct ( ( v ) v . getCumPct ( NUMBER_CONSTANT ) ) ; }
Distance : 8

178
Tree	{ return getCumPct ( ( ( Comparable ) v . getCumPct () ) . Comparable ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getCumPct () ) . Comparable ) ; }
Distance : 9

179
Tree	{ return getCumPct ( ( Comparable ) getCumPct ( v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getCumPct ( v ) ) ; }
Distance : 5

180
Tree	{ return getPct ( ( ( v ) v ) . v ) ; }
Code	{ return getPct ( ( ( v ) v ) . v ) ; }
Distance : 5

181
Tree	{ return v . getCumPct ( Comparable ) . < v > getPct () ; }
Code	{ return v . getCumPct ( Comparable ) . < v > getPct () ; }
Distance : 9

182
Tree	{ return getCumPct ( Comparable , v . getCumPct () , orders ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , orders ) ; }
Distance : 9

183
Tree	{ return getCumPct ( ( Comparable ) v . getCumPct ( v , ( alpha [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getCumPct ( v , ( alpha [] ) null ) ) ; }
Distance : 13

184
Tree	{ return getPct ( ( Comparable ) v . getPct ( Comparable ) ) ; }
Code	{ return getPct ( ( Comparable ) v . getPct ( Comparable ) ) ; }
Distance : 7

185
Tree	{ return getCumPct ( Comparable , v . getCumPct () , getNumElements ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , getNumElements ) ; }
Distance : 9

186
Tree	{ return getCumPct ( ( Comparable ) v . getCumPct ( Comparable ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getCumPct ( Comparable ) ) ; }
Distance : 8

187
Tree	{ return getCumPct ( ( Comparable ) getPct ( ( v ) v , v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getPct ( ( v ) v , v ) ) ; }
Distance : 9

188
Tree	{ return getCumPct ( Comparable , v . getCumPct () , PoissonDistribution.DEFAULT_MAX_ITERATIONS ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , PoissonDistribution.DEFAULT_MAX_ITERATIONS ) ; }
Distance : 9

189
Tree	{ return getCumPct ( ( v ) getPct ( v ) ) ; }
Code	{ return getCumPct ( ( v ) getPct ( v ) ) ; }
Distance : 6

190
Tree	public double += ( ! < null > -= , double : , double : , null < line.originOffset > : ) throws null ;
Code	public double += ( ! < null > -= , double : , double : , null < line.originOffset > : ) throws null ;
Distance : 21

191
Tree	{ return getCumPct ( ( Comparable ) v . getCumPct ( v , ( false [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getCumPct ( v , ( false [] ) null ) ) ; }
Distance : 13

192
Tree	{ return Comparable ( ? , null ) ; }
Code	{ return Comparable ( ? , null ) ; }
Distance : 7

193
Tree	{ return getCumPct ( ( Comparable ) v . getCumPct ( Comparable , ( InitialGuess [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getCumPct ( Comparable , ( InitialGuess [] ) null ) ) ; }
Distance : 13

194
Tree	{ return getCumPct ( ( Comparable ) v . getCumPct ( v , ( InitialGuess [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getCumPct ( v , ( InitialGuess [] ) null ) ) ; }
Distance : 13

195
Tree	{ return Comparable ( ? , false ) ; }
Code	{ return Comparable ( ? , false ) ; }
Distance : 7

196
Tree	{ return getCumPct ( ( ( Comparable ) v . getCumPct ( v ) ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getCumPct ( v ) ) . v ) ; }
Distance : 10

197
Tree	{ return Comparable . getCumPct ( Comparable ) . < v > getPct () ; }
Code	{ return Comparable . getCumPct ( Comparable ) . < v > getPct () ; }
Distance : 9

198
Tree	public double += ( null < S > -= , double : , double : , false < line.originOffset > : ) throws null ;
Code	public double += ( null < S > -= , double : , double : , false < line.originOffset > : ) throws null ;
Distance : 21

199
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct ( Comparable ) ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getPct ( Comparable ) ) . v ) ; }
Distance : 10

200
Tree	{ return Comparable . getCumPct ( Comparable ) . < Comparable > getCumPct () ; }
Code	{ return Comparable . getCumPct ( Comparable ) . < Comparable > getCumPct () ; }
Distance : 9

201
Tree	{ return getCumPct ( Comparable , v . getCumPct () , beta.length ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , beta.length ) ; }
Distance : 9

202
Tree	{ return getCumPct ( ( Comparable ) getPct ( Comparable ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getPct ( Comparable ) ) ; }
Distance : 6

203
Tree	{ return getCumPct ( ( Comparable ) v . getCumPct ( Comparable , ( false [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getCumPct ( Comparable , ( false [] ) null ) ) ; }
Distance : 13

204
Tree	{ return getCumPct ( ( Comparable ) v . getCumPct ( super(); ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getCumPct ( super(); ) ) ; }
Distance : 8

205
Tree	{ return v . getPct ( Comparable ) . getCumPct ( this ) ; }
Code	{ return v . getPct ( Comparable ) . getCumPct ( this ) ; }
Distance : 8

206
Tree	{ return getPct ( ( ( Comparable ) v ) . v ) ; }
Code	{ return getPct ( ( ( Comparable ) v ) . v ) ; }
Distance : 4

207
Tree	{ return Comparable . getCumPct ( Comparable ) . < null > getCumPct () ; }
Code	{ return Comparable . getCumPct ( Comparable ) . < null > getCumPct () ; }
Distance : 9

208
Tree	{ return Comparable . getCumPct ( Comparable , OrderDirection.INCREASING , v , line.sin ) ; }
Code	{ return Comparable . getCumPct ( Comparable , OrderDirection.INCREASING , v , line.sin ) ; }
Distance : 8

209
Tree	{ return v . getCumPct ( Comparable ) . < tolerance > getCumPct () ; }
Code	{ return v . getCumPct ( Comparable ) . < tolerance > getCumPct () ; }
Distance : 9

210
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct ( v ) ) . Comparable ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getPct ( v ) ) . Comparable ) ; }
Distance : 11

211
Tree	{ return Comparable . getPct ( Comparable ) . getPct ( this ) ; }
Code	{ return Comparable . getPct ( Comparable ) . getPct ( this ) ; }
Distance : 8

212
Tree	{ return v . getCumPct ( ( ( Comparable ) v ) . Comparable ) ; }
Code	{ return v . getCumPct ( ( ( Comparable ) v ) . Comparable ) ; }
Distance : 8

213
Tree	{ return getPct ( ( ( Comparable ) v . getCumPct () ) . v ) ; }
Code	{ return getPct ( ( ( Comparable ) v . getCumPct () ) . v ) ; }
Distance : 7

214
Tree	{ return Comparable . getCumPct ( Comparable , line.cos , v , line.originOffset ) ; }
Code	{ return Comparable . getCumPct ( Comparable , line.cos , v , line.originOffset ) ; }
Distance : 8

215
Tree	{ return ( ( Comparable ) v . getCumPct () ) . v . getPct () ; }
Code	{ return ( ( Comparable ) v . getCumPct () ) . v . getPct () ; }
Distance : 10

216
Tree	{ return v . getPct ( Comparable ) . getPct ( this ) ; }
Code	{ return v . getPct ( Comparable ) . getPct ( this ) ; }
Distance : 8

217
Tree	{ return Comparable . getPct ( ( ( Comparable ) v ) . Comparable ) ; }
Code	{ return Comparable . getPct ( ( ( Comparable ) v ) . Comparable ) ; }
Distance : 7

218
Tree	{ return getCumPct ( ( ( v ) v ) . Comparable ) ; }
Code	{ return getCumPct ( ( ( v ) v ) . Comparable ) ; }
Distance : 7

219
Tree	{ return getPct ( ( ( Comparable ) v . getCumPct () ) . Comparable ) ; }
Code	{ return getPct ( ( ( Comparable ) v . getCumPct () ) . Comparable ) ; }
Distance : 8

220
Tree	{ return Comparable . getCumPct ( ( ( Comparable ) Comparable ) . v ) ; }
Code	{ return Comparable . getCumPct ( ( ( Comparable ) Comparable ) . v ) ; }
Distance : 7

221
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct ( NUMBER_CONSTANT ) ) . Comparable ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getPct ( NUMBER_CONSTANT ) ) . Comparable ) ; }
Distance : 11

222
Tree	public double += ( null < null > -= , double : , double : , false < orders > : ) throws null ;
Code	public double += ( null < null > -= , double : , double : , false < orders > : ) throws null ;
Distance : 21

223
Tree	{ return v . getPct ( ( ( Comparable ) v ) . Comparable ) ; }
Code	{ return v . getPct ( ( ( Comparable ) v ) . Comparable ) ; }
Distance : 7

224
Tree	{ return v . getCumPct ( Comparable , line.cos , v , line.sin ) ; }
Code	{ return v . getCumPct ( Comparable , line.cos , v , line.sin ) ; }
Distance : 8

225
Tree	{ return getCumPct ( ( ( Comparable ) Comparable . getCumPct ( NUMBER_CONSTANT ) ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) Comparable . getCumPct ( NUMBER_CONSTANT ) ) . v ) ; }
Distance : 10

226
Tree	{ return Comparable . getCumPct ( ( ( v ) v ) . v ) ; }
Code	{ return Comparable . getCumPct ( ( ( v ) v ) . v ) ; }
Distance : 8

227
Tree	{ return Comparable . getCumPct ( v ) . getCumPct ( this ) ; }
Code	{ return Comparable . getCumPct ( v ) . getCumPct ( this ) ; }
Distance : 9

228
Tree	{ return Comparable . getCumPct ( v ) . getPct ( this ) ; }
Code	{ return Comparable . getCumPct ( v ) . getPct ( this ) ; }
Distance : 9

229
Tree	{ return getCumPct ( ( Comparable ) Comparable . getPct ( NUMBER_CONSTANT ) ) ; }
Code	{ return getCumPct ( ( Comparable ) Comparable . getPct ( NUMBER_CONSTANT ) ) ; }
Distance : 8

========================================================================


========================================================================
Example Number: 7
Parent Code is: 
{ return solve ( min , max ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return solve ( f , min , max ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=solve}) (214{val=(}) (800{val=min}) (234{val=,}) (800{val=max}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=solve}) (214{val=(}) (800{val=f}) (234{val=,}) (800{val=min}) (234{val=,}) (800{val=max}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/70/parent/src_main_java_org_apache_commons_math_analysis_solvers_BisectionSolver.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 460
Wrong
========================================================================
False

0
Tree	{ return solve ( min , max ) ; }
Code	{ return solve ( min , max ) ; }
Distance : 2

1
Tree	{ return min . solve () . solve ( min , max ) ; }
Code	{ return min . solve () . solve ( min , max ) ; }
Distance : 6

2
Tree	{ return solve ( this == min , max ) ; }
Code	{ return solve ( this == min , max ) ; }
Distance : 2

3
Tree	{ return solve ( min . solve ( min ) ) ; }
Code	{ return solve ( min . solve ( min ) ) ; }
Distance : 6

4
Tree	{ return min . solve ( min , null , max ) ; }
Code	{ return min . solve ( min , null , max ) ; }
Distance : 4

5
Tree	{ return f . solve ( min , otherL.sin ) ; }
Code	{ return f . solve ( min , otherL.sin ) ; }
Distance : 5

6
Tree	{ return solve ( max , max , false ) ; }
Code	{ return solve ( max , max , false ) ; }
Distance : 3

7
Tree	{ return super(); . solve ( this ) ; }
Code	{ return super(); . solve ( this ) ; }
Distance : 7

8
Tree	{ return f . solve ( min , a ) ; }
Code	{ return f . solve ( min , a ) ; }
Distance : 5

9
Tree	{ return solve ( min , max , min , null ) ; }
Code	{ return solve ( min , max , min , null ) ; }
Distance : 4

10
Tree	{ return solve ( max - NUMBER_CONSTANT , max ) ; }
Code	{ return solve ( max - NUMBER_CONSTANT , max ) ; }
Distance : 3

11
Tree	{ return solve ( min , max , max , true ) ; }
Code	{ return solve ( min , max , max , true ) ; }
Distance : 4

12
Tree	{ return f . solve ( min , p2.vector ) ; }
Code	{ return f . solve ( min , p2.vector ) ; }
Distance : 5

13
Tree	{ return solve ( min == return; solve ! solve () , max ) ; }
Code	{ return solve ( min == return; solve ! solve () , max ) ; }
Distance : 7

14
Tree	{ return min . solve ( min , max ) ; }
Code	{ return min . solve ( min , max ) ; }
Distance : 4

15
Tree	{ return ! . solve ( this ) ; }
Code	{ return ! . solve ( this ) ; }
Distance : 7

16
Tree	{ return f . solve ( min , null , max , null ) ; }
Code	{ return f . solve ( min , null , max , null ) ; }
Distance : 6

17
Tree	{ return solve ( this == max , max ) ; }
Code	{ return solve ( this == max , max ) ; }
Distance : 3

18
Tree	{ return min . solve ( this , max ) ; }
Code	{ return min . solve ( this , max ) ; }
Distance : 5

19
Tree	{ return solve ( this , min ) ; }
Code	{ return solve ( this , min ) ; }
Distance : 3

20
Tree	{ return solve ( min , min , false ) ; }
Code	{ return solve ( min , min , false ) ; }
Distance : 2

21
Tree	{ return solve ( f . solve () , f ) ; }
Code	{ return solve ( f . solve () , f ) ; }
Distance : 4

22
Tree	{ return solve ( max . solve () ) ; }
Code	{ return solve ( max . solve () ) ; }
Distance : 5

23
Tree	{ return solve ( max , min , false ) ; }
Code	{ return solve ( max , min , false ) ; }
Distance : 2

24
Tree	{ return solve ( solve () , solve ( f ) ) ; }
Code	{ return solve ( solve () , solve ( f ) ) ; }
Distance : 6

25
Tree	{ return solve ( f - NUMBER_CONSTANT , min ) ; }
Code	{ return solve ( f - NUMBER_CONSTANT , min ) ; }
Distance : 3

26
Tree	{ return solve ( max . solve ( min ) ) ; }
Code	{ return solve ( max . solve ( min ) ) ; }
Distance : 6

27
Tree	{ return max . solve ( max , null , max , null ) ; }
Code	{ return max . solve ( max , null , max , null ) ; }
Distance : 6

28
Tree	{ return min . solve ( this , max , min ) ; }
Code	{ return min . solve ( this , max , min ) ; }
Distance : 5

29
Tree	{ return solve ( this == f , max ) ; }
Code	{ return solve ( this == f , max ) ; }
Distance : 3

30
Tree	{ return solve ( min , null ) ; }
Code	{ return solve ( min , null ) ; }
Distance : 3

31
Tree	{ return f . solve () . solve ( max , max , max ) ; }
Code	{ return f . solve () . solve ( max , max , max ) ; }
Distance : 7

32
Tree	{ return solve ( min , max , super(); ) ; }
Code	{ return solve ( min , max , super(); ) ; }
Distance : 3

33
Tree	{ return f . solve ( max , null , max , null ) ; }
Code	{ return f . solve ( max , null , max , null ) ; }
Distance : 6

34
Tree	{ return this . max . solve ( f ) ; }
Code	{ return this . max . solve ( f ) ; }
Distance : 7

35
Tree	{ return solve ( min , max , true ) ; }
Code	{ return solve ( min , max , true ) ; }
Distance : 3

36
Tree	{ return solve ( f , max , max , false ) ; }
Code	{ return solve ( f , max , max , false ) ; }
Distance : 3

37
Tree	{ return min . solve ( min , max , null ) ; }
Code	{ return min . solve ( min , max , null ) ; }
Distance : 5

38
Tree	{ return min . solve () . solve ( min ) ; }
Code	{ return min . solve () . solve ( min ) ; }
Distance : 8

39
Tree	{ return ( ( min ) this ) . solve ( max , max ) ; }
Code	{ return ( ( min ) this ) . solve ( max , max ) ; }
Distance : 9

40
Tree	{ return f . solve ( this , max ) ; }
Code	{ return f . solve ( this , max ) ; }
Distance : 5

41
Tree	{ return solve ( min , min , max , false ) ; }
Code	{ return solve ( min , min , max , false ) ; }
Distance : 3

42
Tree	{ return solve () . solve ( solve () ) ; } Complex
Code	{ return solve () . solve ( solve () ) ; } Complex
Distance : 7

43
Tree	{ return solve ( min , max - NUMBER_CONSTANT ) ; }
Code	{ return solve ( min , max - NUMBER_CONSTANT ) ; }
Distance : 4

44
Tree	{ return solve ( min , max , max ) ; }
Code	{ return solve ( min , max , max ) ; }
Distance : 2

45
Tree	{ return solve ( min , max , max , false ) ; }
Code	{ return solve ( min , max , max , false ) ; }
Distance : 4

46
Tree	{ return solve ( min , null , max ) ; }
Code	{ return solve ( min , null , max ) ; }
Distance : 2

47
Tree	{ return solve ( min , max , max , null ) ; }
Code	{ return solve ( min , max , max , null ) ; }
Distance : 4

48
Tree	{ return solve ( min - NUMBER_CONSTANT , max ) ; }
Code	{ return solve ( min - NUMBER_CONSTANT , max ) ; }
Distance : 3

49
Tree	{ return solve ( min , max , false ) ; }
Code	{ return solve ( min , max , false ) ; }
Distance : 3

50
Tree	{ return solve () . solve ( solve ( min ) ) ; } Array2DRowFieldMatrix
Code	{ return solve () . solve ( solve ( min ) ) ; } Array2DRowFieldMatrix
Distance : 8

51
Tree	{ return solve ( this , max ) ; }
Code	{ return solve ( this , max ) ; }
Distance : 3

52
Tree	{ return solve ( max , null ) ; }
Code	{ return solve ( max , null ) ; }
Distance : 4

53
Tree	{ return LazyHolder.FACTORY . solve ( min , max ) ; }
Code	{ return LazyHolder.FACTORY . solve ( min , max ) ; }
Distance : 4

54
Tree	{ return solve ( solve () , solve ( f ) ) ; } super
Code	{ return solve ( solve () , solve ( f ) ) ; } super
Distance : 7

55
Tree	{ return min . solve ( solve () , max == AllowedSolution.ANY_SIDE ) ; }
Code	{ return min . solve ( solve () , max == AllowedSolution.ANY_SIDE ) ; }
Distance : 7

56
Tree	{ return f . solve () . solve ( min , max ) ; }
Code	{ return f . solve () . solve ( min , max ) ; }
Distance : 6

57
Tree	{ return f . solve ( min , null , max ) ; }
Code	{ return f . solve ( min , null , max ) ; }
Distance : 4

58
Tree	{ return this . min . solve ( max ) ; }
Code	{ return this . min . solve ( max ) ; }
Distance : 6

59
Tree	{ return f . solve ( this , max , max ) ; }
Code	{ return f . solve ( this , max , max ) ; }
Distance : 4

60
Tree	{ return f . solve ( null , max , max , null ) ; }
Code	{ return f . solve ( null , max , max , null ) ; }
Distance : 6

61
Tree	{ return f ( min , max ) ; }
Code	{ return f ( min , max ) ; }
Distance : 3

62
Tree	{ return f . solve () . solve ( min , max , max ) ; }
Code	{ return f . solve () . solve ( min , max , max ) ; }
Distance : 7

63
Tree	{ return solve ( max , max - NUMBER_CONSTANT ) ; }
Code	{ return solve ( max , max - NUMBER_CONSTANT ) ; }
Distance : 4

64
Tree	{ return null . solve ( this ) ; }
Code	{ return null . solve ( this ) ; }
Distance : 7

65
Tree	{ return solve ( min , null , min ) ; }
Code	{ return solve ( min , null , min ) ; }
Distance : 3

66
Tree	{ return solve ( min , max , min , false ) ; }
Code	{ return solve ( min , max , min , false ) ; }
Distance : 4

67
Tree	{ return f . solve () . solve ( min ) ; }
Code	{ return f . solve () . solve ( min ) ; }
Distance : 8

68
Tree	{ return solve ( f , max , false ) ; }
Code	{ return solve ( f , max , false ) ; }
Distance : 2

69
Tree	{ return max . solve () . solve ( min , max , max ) ; }
Code	{ return max . solve () . solve ( min , max , max ) ; }
Distance : 7

70
Tree	{ return solve ( min . solve () , max ) ; }
Code	{ return solve ( min . solve () , max ) ; }
Distance : 4

71
Tree	{ return f . solve ( min , max , null ) ; }
Code	{ return f . solve ( min , max , null ) ; }
Distance : 5

72
Tree	{ return super . solve ( this ) ; }
Code	{ return super . solve ( this ) ; }
Distance : 7

73
Tree	{ return LazyHolder.FACTORY . solve ( min , max , max ) ; }
Code	{ return LazyHolder.FACTORY . solve ( min , max , max ) ; }
Distance : 4

74
Tree	{ return this . min . solve ( min ) ; }
Code	{ return this . min . solve ( min ) ; }
Distance : 7

75
Tree	{ return coefficients . solve ( min , max , max ) ; }
Code	{ return coefficients . solve ( min , max , max ) ; }
Distance : 4

76
Tree	{ return solve ( solve () , solve ( f ) ) ; } assertEquals
Code	{ return solve ( solve () , solve ( f ) ) ; } assertEquals
Distance : 7

77
Tree	{ return solve . solve ( min , max , max ) ; }
Code	{ return solve . solve ( min , max , max ) ; }
Distance : 4

78
Tree	{ return ( ( min ) this ) . solve ( min , min ) ; }
Code	{ return ( ( min ) this ) . solve ( min , min ) ; }
Distance : 9

79
Tree	{ return solve ( this , max ) ; } Array2DRowFieldMatrix
Code	{ return solve ( this , max ) ; } Array2DRowFieldMatrix
Distance : 4

80
Tree	{ return solve ( max , min ) ; }
Code	{ return solve ( max , min ) ; }
Distance : 3

81
Tree	{ return f . solve ( min , x.length ) ; }
Code	{ return f . solve ( min , x.length ) ; }
Distance : 5

82
Tree	{ return f . solve () . solve ( max ) ; }
Code	{ return f . solve () . solve ( max ) ; }
Distance : 7

83
Tree	{ return solve ( max , max == null solve : ) ; }
Code	{ return solve ( max , max == null solve : ) ; }
Distance : 6

84
Tree	{ return solve () . solve ( solve () ) ; } false
Code	{ return solve () . solve ( solve () ) ; } false
Distance : 7

85
Tree	{ return LazyHolder.FACTORY . solve ( min ) ; }
Code	{ return LazyHolder.FACTORY . solve ( min ) ; }
Distance : 6

86
Tree	{ return Coordinates3D.ZERO . solve ( min , max , max ) ; }
Code	{ return Coordinates3D.ZERO . solve ( min , max , max ) ; }
Distance : 4

87
Tree	{ return coefficients . solve ( min ) ; }
Code	{ return coefficients . solve ( min ) ; }
Distance : 6

88
Tree	{ return solve ( min , max < AllowedSolution.ANY_SIDE ) ; }
Code	{ return solve ( min , max < AllowedSolution.ANY_SIDE ) ; }
Distance : 4

89
Tree	{ return solve ( solve () , solve ( f ) ) ; } Override
Code	{ return solve ( solve () , solve ( f ) ) ; } Override
Distance : 7

90
Tree	{ return f . solve () . solve ( f , max , max ) ; }
Code	{ return f . solve () . solve ( f , max , max ) ; }
Distance : 6

91
Tree	{ return solve ( max , null , max ) ; }
Code	{ return solve ( max , null , max ) ; }
Distance : 2

92
Tree	{ return solve ( solve () , solve ( f ) ) ; } UnivariateRealFunction
Code	{ return solve ( solve () , solve ( f ) ) ; } UnivariateRealFunction
Distance : 7

93
Tree	{ return solve ( max , min - NUMBER_CONSTANT ) ; }
Code	{ return solve ( max , min - NUMBER_CONSTANT ) ; }
Distance : 3

94
Tree	{ return solve ( min , min == null solve : ) ; }
Code	{ return solve ( min , min == null solve : ) ; }
Distance : 5

95
Tree	{ return solve ( min , super(); , max ) ; }
Code	{ return solve ( min , super(); , max ) ; }
Distance : 2

96
Tree	{ return solve ( min . solve () ) ; } super
Code	{ return solve ( min . solve () ) ; } super
Distance : 6

97
Tree	{ return f . solve ( this , f , max ) ; }
Code	{ return f . solve ( this , f , max ) ; }
Distance : 4

98
Tree	{ return solve ( min . solve ( min ) , min ) ; }
Code	{ return solve ( min . solve ( min ) , min ) ; }
Distance : 6

99
Tree	{ return min . solve ( null , min , max , null ) ; }
Code	{ return min . solve ( null , min , max , null ) ; }
Distance : 5

100
Tree	{ return solve ( this , max ) ; } Assert
Code	{ return solve ( this , max ) ; } Assert
Distance : 4

101
Tree	{ return solve ( min , max == null solve += ) ; }
Code	{ return solve ( min , max == null solve += ) ; }
Distance : 6

102
Tree	{ return min . solve ( f ) ; }
Code	{ return min . solve ( f ) ; }
Distance : 6

103
Tree	{ return solve ( solve ( max , f ) ) ; }
Code	{ return solve ( solve ( max , f ) ) ; }
Distance : 5

104
Tree	{ return solve ( this , max ) ; } k
Code	{ return solve ( this , max ) ; } k
Distance : 4

105
Tree	{ return problem.a . solve ( min ) ; }
Code	{ return problem.a . solve ( min ) ; }
Distance : 6

106
Tree	{ return solve ( min , max < coefficients ) ; }
Code	{ return solve ( min , max < coefficients ) ; }
Distance : 4

107
Tree	{ return f . solve ( min , DfpField.FLAG_INVALID ) ; }
Code	{ return f . solve ( min , DfpField.FLAG_INVALID ) ; }
Distance : 5

108
Tree	{ return f . solve ( f , null , max ) ; }
Code	{ return f . solve ( f , null , max ) ; }
Distance : 3

109
Tree	{ return AllowedSolution.ANY_SIDE . solve ( min , max , max ) ; }
Code	{ return AllowedSolution.ANY_SIDE . solve ( min , max , max ) ; }
Distance : 4

110
Tree	{ return f . solve ( this , min , max ) ; }
Code	{ return f . solve ( this , min , max ) ; }
Distance : 3

111
Tree	{ return solve ( solve ( f , f ) ) ; }
Code	{ return solve ( solve ( f , f ) ) ; }
Distance : 5

112
Tree	{ return this . max . solve ( min ) ; }
Code	{ return this . max . solve ( min ) ; }
Distance : 7

113
Tree	{ return solve ( solve () , solve ( f ) ) ; } Array2DRowFieldMatrix
Code	{ return solve ( solve () , solve ( f ) ) ; } Array2DRowFieldMatrix
Distance : 7

114
Tree	{ return solve () . solve ( solve ( min ) ) ; } Assert
Code	{ return solve () . solve ( solve ( min ) ) ; } Assert
Distance : 8

115
Tree	{ return solve ( min , max < Vector1D.ZERO ) ; }
Code	{ return solve ( min , max < Vector1D.ZERO ) ; }
Distance : 4

116
Tree	{ return f . solve ( max , null , max ) ; }
Code	{ return f . solve ( max , null , max ) ; }
Distance : 4

117
Tree	{ return f . solve ( min , yDotK ) ; }
Code	{ return f . solve ( min , yDotK ) ; }
Distance : 5

118
Tree	{ return solve ( max , max , null ) ; }
Code	{ return solve ( max , max , null ) ; }
Distance : 3

119
Tree	{ return solve ( min , max == continue; solve : ) ; }
Code	{ return solve ( min , max == continue; solve : ) ; }
Distance : 6

120
Tree	{ return Coordinates3D.ZERO . solve ( min ) ; }
Code	{ return Coordinates3D.ZERO . solve ( min ) ; }
Distance : 6

121
Tree	{ return solve ( min . solve () ) ; }
Code	{ return solve ( min . solve () ) ; }
Distance : 5

122
Tree	{ return f . solve ( max , max ) ; }
Code	{ return f . solve ( max , max ) ; }
Distance : 5

123
Tree	{ return solve ( f , super(); ) ; }
Code	{ return solve ( f , super(); ) ; }
Distance : 3

124
Tree	{ return int . solve ( this ) ; }
Code	{ return int . solve ( this ) ; }
Distance : 7

125
Tree	{ return solve ( min , super(); ) ; }
Code	{ return solve ( min , super(); ) ; }
Distance : 3

126
Tree	{ return this . min . solve ( min ) ; } v.length
Code	{ return this . min . solve ( min ) ; } v.length
Distance : 8

127
Tree	{ return solve ( min . solve () ) ; } assertEquals
Code	{ return solve ( min . solve () ) ; } assertEquals
Distance : 6

128
Tree	{ return ArrayRealVector . solve ( min ) ; }
Code	{ return ArrayRealVector . solve ( min ) ; }
Distance : 6

129
Tree	{ return Coordinates1D.NEGATIVE_INFINITY . solve ( min , max , max ) ; }
Code	{ return Coordinates1D.NEGATIVE_INFINITY . solve ( min , max , max ) ; }
Distance : 4

130
Tree	{ return max . solve ( min , max ) ; }
Code	{ return max . solve ( min , max ) ; }
Distance : 4

131
Tree	{ return solve ( min , min - NUMBER_CONSTANT ) ; }
Code	{ return solve ( min , min - NUMBER_CONSTANT ) ; }
Distance : 3

132
Tree	{ return / . solve ( this ) ; }
Code	{ return / . solve ( this ) ; }
Distance : 7

133
Tree	{ return f . solve ( max ) ; }
Code	{ return f . solve ( max ) ; }
Distance : 5

134
Tree	{ return solve ( f == null solve ! solve () , min ) ; }
Code	{ return solve ( f == null solve ! solve () , min ) ; }
Distance : 7

135
Tree	{ return max ( max , max ) ; }
Code	{ return max ( max , max ) ; }
Distance : 4

136
Tree	{ return ( ( min ) this ) . solve ( min , max ) ; }
Code	{ return ( ( min ) this ) . solve ( min , max ) ; }
Distance : 8

137
Tree	{ return solve ( min , max , max , super(); ) ; }
Code	{ return solve ( min , max , max , super(); ) ; }
Distance : 4

138
Tree	{ return solve ( solve () , solve ( min ) ) ; }
Code	{ return solve ( solve () , solve ( min ) ) ; }
Distance : 6

139
Tree	{ return max . solve ( min , null , max ) ; }
Code	{ return max . solve ( min , null , max ) ; }
Distance : 4

140
Tree	{ return solve ( solve () , solve ( f ) ) ; } Assert
Code	{ return solve ( solve () , solve ( f ) ) ; } Assert
Distance : 7

141
Tree	{ return f . solve ( solve () , max == FastMath.PI ) ; }
Code	{ return f . solve ( solve () , max == FastMath.PI ) ; }
Distance : 7

142
Tree	{ return solve ( this == max , max ) ; } v.length
Code	{ return solve ( this == max , max ) ; } v.length
Distance : 4

143
Tree	{ return max . solve ( min ) ; }
Code	{ return max . solve ( min ) ; }
Distance : 6

144
Tree	{ return f . solve () . solve ( min , min , max ) ; }
Code	{ return f . solve () . solve ( min , min , max ) ; }
Distance : 6

145
Tree	{ return solve ( min , f - NUMBER_CONSTANT ) ; }
Code	{ return solve ( min , f - NUMBER_CONSTANT ) ; }
Distance : 4

146
Tree	{ return solve ( max == null ( ! solve () , max ) ; }
Code	{ return solve ( max == null ( ! solve () , max ) ; }
Distance : 7

147
Tree	{ return max . solve ( max ) ; }
Code	{ return max . solve ( max ) ; }
Distance : 6

148
Tree	{ return f . solve () . solve ( min , max , min ) ; }
Code	{ return f . solve () . solve ( min , max , min ) ; }
Distance : 8

149
Tree	{ return true . solve ( this ) ; }
Code	{ return true . solve ( this ) ; }
Distance : 7

150
Tree	{ return this . min . solve ( f ) ; }
Code	{ return this . min . solve ( f ) ; }
Distance : 7

151
Tree	{ return solve ( f , max - NUMBER_CONSTANT ) ; }
Code	{ return solve ( f , max - NUMBER_CONSTANT ) ; }
Distance : 3

152
Tree	{ return min ( min , min ) ; }
Code	{ return min ( min , min ) ; }
Distance : 4

153
Tree	{ return solve ( this == f , f ) ; }
Code	{ return solve ( this == f , f ) ; }
Distance : 4

154
Tree	{ return solve ( max , return; ) ; }
Code	{ return solve ( max , return; ) ; }
Distance : 4

155
Tree	{ return max . solve ( this , min , max ) ; }
Code	{ return max . solve ( this , min , max ) ; }
Distance : 3

156
Tree	{ return solve ( f , null , max ) ; }
Code	{ return solve ( f , null , max ) ; }
Distance : 1

157
Tree	{ return source.moment . solve ( min ) ; }
Code	{ return source.moment . solve ( min ) ; }
Distance : 6

158
Tree	{ return solve ( this , max ) ; } super
Code	{ return solve ( this , max ) ; } super
Distance : 4

159
Tree	{ return f . solve ( solve () , max == getY ) ; }
Code	{ return f . solve ( solve () , max == getY ) ; }
Distance : 7

160
Tree	{ return solve ( solve () , solve ( max ) ) ; }
Code	{ return solve ( solve () , solve ( max ) ) ; }
Distance : 5

161
Tree	{ return f . solve ( min , null , min , null ) ; }
Code	{ return f . solve ( min , null , min , null ) ; }
Distance : 6

162
Tree	{ return solve ( min . solve () ) ; } Override
Code	{ return solve ( min . solve () ) ; } Override
Distance : 6

163
Tree	{ return coefficients . solve ( min , max ) ; }
Code	{ return coefficients . solve ( min , max ) ; }
Distance : 4

164
Tree	{ return min . solve ( this , min ) ; }
Code	{ return min . solve ( this , min ) ; }
Distance : 5

165
Tree	{ return f . solve ( max , max , null ) ; }
Code	{ return f . solve ( max , max , null ) ; }
Distance : 5

166
Tree	{ return min . solve () . solve ( f , max , max ) ; }
Code	{ return min . solve () . solve ( f , max , max ) ; }
Distance : 6

167
Tree	{ return solve ( max , f - NUMBER_CONSTANT ) ; }
Code	{ return solve ( max , f - NUMBER_CONSTANT ) ; }
Distance : 4

168
Tree	{ return min . solve ( min . solve () , f ) ; }
Code	{ return min . solve ( min . solve () , f ) ; }
Distance : 7

169
Tree	{ return f . solve ( max , min ) ; }
Code	{ return f . solve ( max , min ) ; }
Distance : 5

170
Tree	{ return f . solve () . solve ( f ) ; }
Code	{ return f . solve () . solve ( f ) ; }
Distance : 8

171
Tree	{ return solve () . solve ( solve ( min ) ) ; } k
Code	{ return solve () . solve ( solve ( min ) ) ; } k
Distance : 8

172
Tree	{ return solve ( min . solve ( f ) ) ; }
Code	{ return solve ( min . solve ( f ) ) ; }
Distance : 6

173
Tree	{ return solve ( f , max , max , null ) ; }
Code	{ return solve ( f , max , max , null ) ; }
Distance : 3

174
Tree	{ return solve ( min , min , true ) ; }
Code	{ return solve ( min , min , true ) ; }
Distance : 2

175
Tree	{ return solve ( min , f ) ; }
Code	{ return solve ( min , f ) ; }
Distance : 3

176
Tree	{ return solve ( min == null , ! solve () , min ) ; }
Code	{ return solve ( min == null , ! solve () , min ) ; }
Distance : 7

177
Tree	{ return f . solve () . solve ( max , max ) ; }
Code	{ return f . solve () . solve ( max , max ) ; }
Distance : 7

178
Tree	{ return solve ( f == null solve ! solve () , max ) ; }
Code	{ return solve ( f == null solve ! solve () , max ) ; }
Distance : 6

179
Tree	{ return f . solve ( min , null , min ) ; }
Code	{ return f . solve ( min , null , min ) ; }
Distance : 5

180
Tree	{ return solve ( f - NUMBER_CONSTANT , f ) ; }
Code	{ return solve ( f - NUMBER_CONSTANT , f ) ; }
Distance : 3

181
Tree	{ return solve ( f , max , max ) ; }
Code	{ return solve ( f , max , max ) ; }
Distance : 1

182
Tree	{ return f ( f , max ) ; }
Code	{ return f ( f , max ) ; }
Distance : 3

183
Tree	{ return f ( min , min ) ; }
Code	{ return f ( min , min ) ; }
Distance : 4

184
Tree	{ return min . solve () . solve ( f , max ) ; }
Code	{ return min . solve () . solve ( f , max ) ; }
Distance : 7

185
Tree	{ return solve ( min . solve ( f ) , f ) ; }
Code	{ return solve ( min . solve ( f ) , f ) ; }
Distance : 7

186
Tree	{ return solve ( f . solve ( max ) ) ; }
Code	{ return solve ( f . solve ( max ) ) ; }
Distance : 4

187
Tree	{ return min ( max , max ) ; }
Code	{ return min ( max , max ) ; }
Distance : 4

188
Tree	{ return ( ( f ) this ) . solve ( min , max ) ; }
Code	{ return ( ( f ) this ) . solve ( min , max ) ; }
Distance : 7

189
Tree	{ return solve ( f , null ) ; }
Code	{ return solve ( f , null ) ; }
Distance : 3

190
Tree	{ return solve . solve ( min ) ; }
Code	{ return solve . solve ( min ) ; }
Distance : 5

191
Tree	{ return f . solve ( max , null , min , null ) ; }
Code	{ return f . solve ( max , null , min , null ) ; }
Distance : 6

192
Tree	{ return solve ( min == null solve ! solve () , f ) ; }
Code	{ return solve ( min == null solve ! solve () , f ) ; }
Distance : 8

193
Tree	{ return solve ( max - NUMBER_CONSTANT , min ) ; }
Code	{ return solve ( max - NUMBER_CONSTANT , min ) ; }
Distance : 4

194
Tree	{ return f . solve ( solve () , max == Method.REGULA_FALSI ) ; }
Code	{ return f . solve ( solve () , max == Method.REGULA_FALSI ) ; }
Distance : 7

195
Tree	{ return f . solve ( solve () , max == GammaDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY ) ; }
Code	{ return f . solve ( solve () , max == GammaDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY ) ; }
Distance : 7

196
Tree	{ return f . solve ( f , null , max , null ) ; }
Code	{ return f . solve ( f , null , max , null ) ; }
Distance : 5

197
Tree	{ return solve ( min . solve ( min ) , f ) ; }
Code	{ return solve ( min . solve ( min ) , f ) ; }
Distance : 6

198
Tree	{ return min . solve () . solve ( min , min ) ; }
Code	{ return min . solve () . solve ( min , min ) ; }
Distance : 7

199
Tree	{ return f . solve ( min . solve () , f ) ; }
Code	{ return f . solve ( min . solve () , f ) ; }
Distance : 7

200
Tree	{ return solve ( f . solve ( min ) ) ; }
Code	{ return solve ( f . solve ( min ) ) ; }
Distance : 5

201
Tree	{ return min . solve ( this , f ) ; }
Code	{ return min . solve ( this , f ) ; }
Distance : 6

202
Tree	{ return f . solve ( this , min ) ; }
Code	{ return f . solve ( this , min ) ; }
Distance : 5

203
Tree	{ return solve ( f , max ) ; }
Code	{ return solve ( f , max ) ; }
Distance : 2

204
Tree	{ return problem.a . solve ( min , max , max ) ; }
Code	{ return problem.a . solve ( min , max , max ) ; }
Distance : 4

205
Tree	{ return max . solve ( min , max , null ) ; }
Code	{ return max . solve ( min , max , null ) ; }
Distance : 5

206
Tree	{ return solve ( solve () , solve ( f ) ) ; } k
Code	{ return solve ( solve () , solve ( f ) ) ; } k
Distance : 7

207
Tree	{ return solve ( f . solve () ) ; }
Code	{ return solve ( f . solve () ) ; }
Distance : 4

208
Tree	{ return min . solve ( max . solve () , max ) ; }
Code	{ return min . solve ( max . solve () , max ) ; }
Distance : 6

209
Tree	{ return f . solve ( min , max , super(); ) ; }
Code	{ return f . solve ( min , max , super(); ) ; }
Distance : 5

210
Tree	{ return f . solve ( null , max , min , null ) ; }
Code	{ return f . solve ( null , max , min , null ) ; }
Distance : 6

211
Tree	{ return f . solve ( min . solve () , min ) ; }
Code	{ return f . solve ( min . solve () , min ) ; }
Distance : 7

212
Tree	{ return solve () . solve ( solve ( f ) ) ; }
Code	{ return solve () . solve ( solve ( f ) ) ; }
Distance : 8

213
Tree	{ return solve ( min - NUMBER_CONSTANT , max ) ; } v.length
Code	{ return solve ( min - NUMBER_CONSTANT , max ) ; } v.length
Distance : 4

214
Tree	{ return source.incMoment . solve ( min , max , max ) ; }
Code	{ return source.incMoment . solve ( min , max , max ) ; }
Distance : 4

215
Tree	{ return f ( max , max ) ; }
Code	{ return f ( max , max ) ; }
Distance : 4

216
Tree	{ return solve ( solve ( f , min ) ) ; }
Code	{ return solve ( solve ( f , min ) ) ; }
Distance : 4

217
Tree	{ return solve ( min , min , min ) ; }
Code	{ return solve ( min , min , min ) ; }
Distance : 2

218
Tree	{ return max . solve () . solve ( min , max ) ; }
Code	{ return max . solve () . solve ( min , max ) ; }
Distance : 6

219
Tree	{ return solve ( max , max ) ; }
Code	{ return solve ( max , max ) ; }
Distance : 3

220
Tree	{ return void . solve ( this ) ; }
Code	{ return void . solve ( this ) ; }
Distance : 7

221
Tree	{ return solve () . solve ( solve ( max ) ) ; }
Code	{ return solve () . solve ( solve ( max ) ) ; }
Distance : 7

222
Tree	{ return solve ( min , max == null solve ? ) ; }
Code	{ return solve ( min , max == null solve ? ) ; }
Distance : 6

223
Tree	{ return min . solve () . solve ( max , max , max ) ; }
Code	{ return min . solve () . solve ( max , max , max ) ; }
Distance : 7

224
Tree	{ return solve () . solve ( solve () ) ; } Fraction
Code	{ return solve () . solve ( solve () ) ; } Fraction
Distance : 7

225
Tree	{ return solve ( f . solve () , min ) ; }
Code	{ return solve ( f . solve () , min ) ; }
Distance : 4

226
Tree	{ return solve ( min . solve ( min ) , max ) ; }
Code	{ return solve ( min . solve ( min ) , max ) ; }
Distance : 5

227
Tree	{ return solve ( this , max ) ; } assertEquals
Code	{ return solve ( this , max ) ; } assertEquals
Distance : 4

228
Tree	{ return solve ( f , null , min ) ; }
Code	{ return solve ( f , null , min ) ; }
Distance : 2

229
Tree	{ return f . solve ( min ) ; } v.length
Code	{ return f . solve ( min ) ; } v.length
Distance : 7

230
Tree	{ return solve ( min , min ) ; }
Code	{ return solve ( min , min ) ; }
Distance : 3

231
Tree	{ return solve . solve ( min , max ) ; }
Code	{ return solve . solve ( min , max ) ; }
Distance : 3

232
Tree	{ return solve () . solve ( solve ( min ) ) ; }
Code	{ return solve () . solve ( solve ( min ) ) ; }
Distance : 7

233
Tree	{ return solve ( f - NUMBER_CONSTANT , max ) ; }
Code	{ return solve ( f - NUMBER_CONSTANT , max ) ; }
Distance : 2

234
Tree	{ return solve ( min , min , null ) ; }
Code	{ return solve ( min , min , null ) ; }
Distance : 2

235
Tree	{ return f . solve ( solve () , max == Coordinates1D.NaN ) ; }
Code	{ return f . solve ( solve () , max == Coordinates1D.NaN ) ; }
Distance : 7

236
Tree	{ return solve ( min , max , continue; ) ; }
Code	{ return solve ( min , max , continue; ) ; }
Distance : 3

237
Tree	{ return f . solve ( min , min , null ) ; }
Code	{ return f . solve ( min , min , null ) ; }
Distance : 4

238
Tree	{ return solve ( min . solve () ) ; } UnivariateRealFunction
Code	{ return solve ( min . solve () ) ; } UnivariateRealFunction
Distance : 6

239
Tree	{ return max . solve ( this , max , max ) ; }
Code	{ return max . solve ( this , max , max ) ; }
Distance : 4

240
Tree	{ return solve ( f , max , min ) ; }
Code	{ return solve ( f , max , min ) ; }
Distance : 2

241
Tree	{ return solve ( solve ( min , max ) ) ; }
Code	{ return solve ( solve ( min , max ) ) ; }
Distance : 3

242
Tree	{ return solve ( max , max , min ) ; }
Code	{ return solve ( max , max , min ) ; }
Distance : 3

243
Tree	{ return f . solve ( solve () , max == Array2DRowRealMatrix ) ; }
Code	{ return f . solve ( solve () , max == Array2DRowRealMatrix ) ; }
Distance : 7

244
Tree	{ return solve ( solve ( min , f ) ) ; }
Code	{ return solve ( solve ( min , f ) ) ; }
Distance : 4

245
Tree	{ return solve ( min == super(); solve ! solve () , max ) ; }
Code	{ return solve ( min == super(); solve ! solve () , max ) ; }
Distance : 7

246
Tree	{ return solve ( f , f - NUMBER_CONSTANT ) ; }
Code	{ return solve ( f , f - NUMBER_CONSTANT ) ; }
Distance : 3

247
Tree	{ return solve ( min , max , return; ) ; }
Code	{ return solve ( min , max , return; ) ; }
Distance : 3

248
Tree	{ return solve ( this == max , min ) ; }
Code	{ return solve ( this == max , min ) ; }
Distance : 4

249
Tree	{ return solve ( f , max ) ; }
Code	{ return solve ( f , max ) ; }
Distance : 2

250
Tree	{ return ( ( min ) this ) . solve ( f , max ) ; }
Code	{ return ( ( min ) this ) . solve ( f , max ) ; }
Distance : 9

251
Tree	{ return f . solve ( this , max ) ; } v.length
Code	{ return f . solve ( this , max ) ; } v.length
Distance : 6

252
Tree	{ return solve ( solve ( max , max ) ) ; }
Code	{ return solve ( solve ( max , max ) ) ; }
Distance : 4

253
Tree	{ return solve ( min , f ) ; }
Code	{ return solve ( min , f ) ; }
Distance : 3

254
Tree	{ return solve ( min . solve () , max ) ; } v.length
Code	{ return solve ( min . solve () , max ) ; } v.length
Distance : 5

255
Tree	{ return solve ( min , break; ) ; }
Code	{ return solve ( min , break; ) ; }
Distance : 3

256
Tree	{ return min . solve ( min , null , max , null ) ; }
Code	{ return min . solve ( min , null , max , null ) ; }
Distance : 6

257
Tree	{ return max . solve ( this , min ) ; }
Code	{ return max . solve ( this , min ) ; }
Distance : 5

258
Tree	{ return solve ( max == null solve ! solve () , min ) ; }
Code	{ return solve ( max == null solve ! solve () , min ) ; }
Distance : 8

259
Tree	{ return solve ( min , f , null ) ; }
Code	{ return solve ( min , f , null ) ; }
Distance : 3

260
Tree	{ return solve ( f , min , false ) ; }
Code	{ return solve ( f , min , false ) ; }
Distance : 1

261
Tree	{ return f ( max , min ) ; }
Code	{ return f ( max , min ) ; }
Distance : 4

262
Tree	{ return solve ( max , min ) ; }
Code	{ return solve ( max , min ) ; }
Distance : 3

263
Tree	{ return max . solve ( max , max ) ; }
Code	{ return max . solve ( max , max ) ; }
Distance : 5

264
Tree	{ return f . solve () . solve ( min , min ) ; }
Code	{ return f . solve () . solve ( min , min ) ; }
Distance : 7

265
Tree	{ return solve ( min , break; , max ) ; }
Code	{ return solve ( min , break; , max ) ; }
Distance : 2

266
Tree	{ return min . solve ( max ) ; }
Code	{ return min . solve ( max ) ; }
Distance : 6

267
Tree	{ return solve ( min , min , max , null ) ; }
Code	{ return solve ( min , min , max , null ) ; }
Distance : 3

268
Tree	{ return f . solve ( this , max , min ) ; }
Code	{ return f . solve ( this , max , min ) ; }
Distance : 5

269
Tree	{ return solve ( max - NUMBER_CONSTANT , f ) ; }
Code	{ return solve ( max - NUMBER_CONSTANT , f ) ; }
Distance : 4

270
Tree	{ return extends . solve ( this ) ; }
Code	{ return extends . solve ( this ) ; }
Distance : 7

271
Tree	{ return solve ( f . solve ( f ) ) ; }
Code	{ return solve ( f . solve ( f ) ) ; }
Distance : 5

272
Tree	{ return solve ( min , max == null solve -= ) ; }
Code	{ return solve ( min , max == null solve -= ) ; }
Distance : 6

273
Tree	{ return solve ( min . solve ( min ) ) ; } v.length
Code	{ return solve ( min . solve ( min ) ) ; } v.length
Distance : 7

274
Tree	{ return min . solve ( this , min , max ) ; }
Code	{ return min . solve ( this , min , max ) ; }
Distance : 3

275
Tree	{ return f . solve ( min , v2.x ) ; }
Code	{ return f . solve ( min , v2.x ) ; }
Distance : 5

276
Tree	{ return solve ( this , f ) ; }
Code	{ return solve ( this , f ) ; }
Distance : 4

277
Tree	{ return f . solve ( f , max ) ; }
Code	{ return f . solve ( f , max ) ; }
Distance : 4

278
Tree	{ return solve ( this == max , f ) ; }
Code	{ return solve ( this == max , f ) ; }
Distance : 4

279
Tree	{ return f . solve ( solve () , NUMBER_CONSTANT / Vector1D.ZERO ) ; }
Code	{ return f . solve ( solve () , NUMBER_CONSTANT / Vector1D.ZERO ) ; }
Distance : 7

280
Tree	{ return solve ( min , max < x.length ) ; }
Code	{ return solve ( min , max < x.length ) ; }
Distance : 4

281
Tree	{ return solve ( min , f , max , null ) ; }
Code	{ return solve ( min , f , max , null ) ; }
Distance : 4

282
Tree	{ return f . solve ( solve () , max == AllowedSolution.ANY_SIDE ) ; }
Code	{ return f . solve ( solve () , max == AllowedSolution.ANY_SIDE ) ; }
Distance : 7

283
Tree	{ return solve ( min . solve () ) ; } Array2DRowFieldMatrix
Code	{ return solve ( min . solve () ) ; } Array2DRowFieldMatrix
Distance : 6

284
Tree	{ return ArrayRealVector . solve ( min , max , max ) ; }
Code	{ return ArrayRealVector . solve ( min , max , max ) ; }
Distance : 4

285
Tree	{ return solve () . solve ( solve () ) ; } p
Code	{ return solve () . solve ( solve () ) ; } p
Distance : 7

286
Tree	{ return max . solve ( f ) ; }
Code	{ return max . solve ( f ) ; }
Distance : 6

287
Tree	{ return max . solve ( null , max , max , null ) ; }
Code	{ return max . solve ( null , max , max , null ) ; }
Distance : 6

288
Tree	{ return solve ( f , min ) ; }
Code	{ return solve ( f , min ) ; }
Distance : 2

289
Tree	{ return max ( min , max ) ; }
Code	{ return max ( min , max ) ; }
Distance : 3

290
Tree	{ return f . solve ( min , a.value ) ; }
Code	{ return f . solve ( min , a.value ) ; }
Distance : 5

291
Tree	{ return ( ( max ) this ) . solve ( f , max ) ; }
Code	{ return ( ( max ) this ) . solve ( f , max ) ; }
Distance : 9

292
Tree	{ return f . solve ( null , min , max , null ) ; }
Code	{ return f . solve ( null , min , max , null ) ; }
Distance : 5

293
Tree	{ return solve ( min . solve () , f ) ; }
Code	{ return solve ( min . solve () , f ) ; }
Distance : 5

294
Tree	{ return f . solve ( min . solve () , max ) ; }
Code	{ return f . solve ( min . solve () , max ) ; }
Distance : 6

295
Tree	{ return f . solve ( min , min ) ; }
Code	{ return f . solve ( min , min ) ; }
Distance : 5

296
Tree	{ return max . solve () . solve ( max , max , max ) ; }
Code	{ return max . solve () . solve ( max , max , max ) ; }
Distance : 7

297
Tree	{ return min . solve () . solve ( min , max , max ) ; }
Code	{ return min . solve () . solve ( min , max , max ) ; }
Distance : 7

298
Tree	{ return f . solve ( null , min , min , null ) ; }
Code	{ return f . solve ( null , min , min , null ) ; }
Distance : 6

299
Tree	{ return solve ( max . solve ( min ) , max ) ; }
Code	{ return solve ( max . solve ( min ) , max ) ; }
Distance : 5

300
Tree	{ return solve ( max . solve () , max ) ; }
Code	{ return solve ( max . solve () , max ) ; }
Distance : 4

301
Tree	{ return solve ( min , continue; ) ; }
Code	{ return solve ( min , continue; ) ; }
Distance : 3

302
Tree	{ return min ( min , max ) ; }
Code	{ return min ( min , max ) ; }
Distance : 3

303
Tree	{ return min . solve ( this , max , max ) ; }
Code	{ return min . solve ( this , max , max ) ; }
Distance : 4

304
Tree	{ return solve ( max , max , min , false ) ; }
Code	{ return solve ( max , max , min , false ) ; }
Distance : 4

305
Tree	{ return solve ( max , max , max ) ; }
Code	{ return solve ( max , max , max ) ; }
Distance : 2

306
Tree	{ return min . solve ( max , null , max , null ) ; }
Code	{ return min . solve ( max , null , max , null ) ; }
Distance : 6

307
Tree	{ return f . solve ( solve () , max == v2.y ) ; }
Code	{ return f . solve ( solve () , max == v2.y ) ; }
Distance : 7

308
Tree	{ return f . solve ( f ) ; }
Code	{ return f . solve ( f ) ; }
Distance : 6

309
Tree	{ return source.moment . solve ( min , max , max ) ; }
Code	{ return source.moment . solve ( min , max , max ) ; }
Distance : 4

310
Tree	{ return min . solve ( solve () , NUMBER_CONSTANT / FastMath.PI ) ; }
Code	{ return min . solve ( solve () , NUMBER_CONSTANT / FastMath.PI ) ; }
Distance : 7

311
Tree	{ return solve ( max . solve ( f ) ) ; }
Code	{ return solve ( max . solve ( f ) ) ; }
Distance : 6

312
Tree	{ return solve ( min - NUMBER_CONSTANT , f ) ; }
Code	{ return solve ( min - NUMBER_CONSTANT , f ) ; }
Distance : 4

313
Tree	{ return solve ( min , f , max ) ; }
Code	{ return solve ( min , f , max ) ; }
Distance : 2

314
Tree	{ return solve ( min == continue; solve ! solve () , max ) ; }
Code	{ return solve ( min == continue; solve ! solve () , max ) ; }
Distance : 7

315
Tree	{ return f . solve ( f . solve () , max ) ; }
Code	{ return f . solve ( f . solve () , max ) ; }
Distance : 5

316
Tree	{ return solve ( min , max == null solve /= ) ; }
Code	{ return solve ( min , max == null solve /= ) ; }
Distance : 6

317
Tree	{ return solve ( max . solve () , min ) ; }
Code	{ return solve ( max . solve () , min ) ; }
Distance : 5

318
Tree	{ return solve ( max . solve ( min ) , f ) ; }
Code	{ return solve ( max . solve ( min ) , f ) ; }
Distance : 6

319
Tree	{ return solve ( min , return; , max ) ; }
Code	{ return solve ( min , return; , max ) ; }
Distance : 2

320
Tree	{ return f . solve () . solve ( f , max ) ; }
Code	{ return f . solve () . solve ( f , max ) ; }
Distance : 7

321
Tree	{ return min . solve ( max , max ) ; }
Code	{ return min . solve ( max , max ) ; }
Distance : 5

322
Tree	{ return max . solve ( this , max ) ; }
Code	{ return max . solve ( this , max ) ; }
Distance : 5

323
Tree	{ return solve ( f , min ) ; }
Code	{ return solve ( f , min ) ; }
Distance : 2

324
Tree	{ return solve ( min - NUMBER_CONSTANT , min ) ; }
Code	{ return solve ( min - NUMBER_CONSTANT , min ) ; }
Distance : 4

325
Tree	{ return max . solve ( max , null , max ) ; }
Code	{ return max . solve ( max , null , max ) ; }
Distance : 4

326
Tree	{ return f . solve ( solve () , NUMBER_CONSTANT / AllowedSolution.ANY_SIDE ) ; }
Code	{ return f . solve ( solve () , NUMBER_CONSTANT / AllowedSolution.ANY_SIDE ) ; }
Distance : 7

327
Tree	{ return max . solve () . solve ( min ) ; }
Code	{ return max . solve () . solve ( min ) ; }
Distance : 8

328
Tree	{ return solve () . solve ( solve () ) ; } void
Code	{ return solve () . solve ( solve () ) ; } void
Distance : 7

329
Tree	{ return f . solve () . solve ( min ) ; } v.length
Code	{ return f . solve () . solve ( min ) ; } v.length
Distance : 9

330
Tree	{ return solve ( min , max < v2.length ) ; }
Code	{ return solve ( min , max < v2.length ) ; }
Distance : 4

331
Tree	{ return solve ( min . solve () ) ; } Assert
Code	{ return solve ( min . solve () ) ; } Assert
Distance : 6

332
Tree	{ return solve ( min , max , min ) ; }
Code	{ return solve ( min , max , min ) ; }
Distance : 3

333
Tree	{ return solve ( this , max ) ; } Override
Code	{ return solve ( this , max ) ; } Override
Distance : 4

334
Tree	{ return solve ( min , max < Precision.SAFE_MIN ) ; }
Code	{ return solve ( min , max < Precision.SAFE_MIN ) ; }
Distance : 4

335
Tree	{ return solve ( max , f ) ; }
Code	{ return solve ( max , f ) ; }
Distance : 4

336
Tree	{ return AllowedSolution.ANY_SIDE . solve ( min ) ; }
Code	{ return AllowedSolution.ANY_SIDE . solve ( min ) ; }
Distance : 6

337
Tree	{ return solve ( min , max - NUMBER_CONSTANT ) ; } v.length
Code	{ return solve ( min , max - NUMBER_CONSTANT ) ; } v.length
Distance : 5

338
Tree	{ return max . solve ( min , null , max , null ) ; }
Code	{ return max . solve ( min , null , max , null ) ; }
Distance : 6

339
Tree	{ return solve ( min , f , max , false ) ; }
Code	{ return solve ( min , f , max , false ) ; }
Distance : 4

340
Tree	{ return solve ( min , max , null ) ; }
Code	{ return solve ( min , max , null ) ; }
Distance : 3

341
Tree	{ return this . f . solve ( f ) ; }
Code	{ return this . f . solve ( f ) ; }
Distance : 6

342
Tree	{ return solve ( max , min , max ) ; }
Code	{ return solve ( max , min , max ) ; }
Distance : 1

343
Tree	{ return f . solve ( solve () , NUMBER_CONSTANT / v2.data.length ) ; }
Code	{ return f . solve ( solve () , NUMBER_CONSTANT / v2.data.length ) ; }
Distance : 7

344
Tree	{ return solve ( this == f , min ) ; }
Code	{ return solve ( this == f , min ) ; }
Distance : 4

345
Tree	{ return solve ( max , max , max , null ) ; }
Code	{ return solve ( max , max , max , null ) ; }
Distance : 4

346
Tree	{ return solve ( solve ( max , min ) ) ; }
Code	{ return solve ( solve ( max , min ) ) ; }
Distance : 5

347
Tree	{ return solve ( max . solve ( max ) ) ; }
Code	{ return solve ( max . solve ( max ) ) ; }
Distance : 5

348
Tree	{ return f . solve ( min , max , return; ) ; }
Code	{ return f . solve ( min , max , return; ) ; }
Distance : 5

349
Tree	{ return min . solve ( min , null , min ) ; }
Code	{ return min . solve ( min , null , min ) ; }
Distance : 5

350
Tree	{ return max . solve () . solve ( max ) ; }
Code	{ return max . solve () . solve ( max ) ; }
Distance : 7

351
Tree	{ return max . solve () . solve ( max , max ) ; }
Code	{ return max . solve () . solve ( max , max ) ; }
Distance : 7

352
Tree	{ return solve ( max , min , max , false ) ; }
Code	{ return solve ( max , min , max , false ) ; }
Distance : 3

353
Tree	{ return problem.a . solve ( min , max ) ; }
Code	{ return problem.a . solve ( min , max ) ; }
Distance : 4

354
Tree	{ return solve ( min . solve () , min ) ; }
Code	{ return solve ( min . solve () , min ) ; }
Distance : 5

355
Tree	{ return solve ( f , min - NUMBER_CONSTANT ) ; }
Code	{ return solve ( f , min - NUMBER_CONSTANT ) ; }
Distance : 2

356
Tree	{ return min . solve ( null , max , min , null ) ; }
Code	{ return min . solve ( null , max , min , null ) ; }
Distance : 6

357
Tree	{ return solve ( f , f ) ; }
Code	{ return solve ( f , f ) ; }
Distance : 3

358
Tree	{ return max . solve ( null , min , max , null ) ; }
Code	{ return max . solve ( null , min , max , null ) ; }
Distance : 5

359
Tree	{ return solve ( max . solve () , f ) ; }
Code	{ return solve ( max . solve () , f ) ; }
Distance : 5

360
Tree	{ return solve ( min , max ) ; }
Code	{ return solve ( min , max ) ; }
Distance : 2

361
Tree	{ return solve ( solve ( f , max ) ) ; }
Code	{ return solve ( solve ( f , max ) ) ; }
Distance : 4

362
Tree	{ return min . solve () . solve ( max ) ; }
Code	{ return min . solve () . solve ( max ) ; }
Distance : 7

363
Tree	{ return f . solve ( solve () , NUMBER_CONSTANT / coefficients ) ; }
Code	{ return f . solve ( solve () , NUMBER_CONSTANT / coefficients ) ; }
Distance : 7

364
Tree	{ return solve () . solve ( solve ( min ) ) ; } assertEquals
Code	{ return solve () . solve ( solve ( min ) ) ; } assertEquals
Distance : 8

365
Tree	{ return ( ( min ) this ) . solve ( min , f ) ; }
Code	{ return ( ( min ) this ) . solve ( min , f ) ; }
Distance : 9

366
Tree	{ return this . f . solve ( max ) ; }
Code	{ return this . f . solve ( max ) ; }
Distance : 5

367
Tree	{ return solve () . solve ( solve () ) ; } try
Code	{ return solve () . solve ( solve () ) ; } try
Distance : 7

368
Tree	{ return f . solve ( solve () , max == source.incMoment ) ; }
Code	{ return f . solve ( solve () , max == source.incMoment ) ; }
Distance : 7

369
Tree	{ return solve () . solve ( solve ( min ) ) ; } super
Code	{ return solve () . solve ( solve ( min ) ) ; } super
Distance : 8

370
Tree	{ return solve ( min . solve ( f ) , min ) ; }
Code	{ return solve ( min . solve ( f ) , min ) ; }
Distance : 7

371
Tree	{ return solve ( f , max == null solve : ) ; }
Code	{ return solve ( f , max == null solve : ) ; }
Distance : 5

372
Tree	{ return solve ( this == min , min ) ; }
Code	{ return solve ( this == min , min ) ; }
Distance : 3

373
Tree	{ return this . max . solve ( max ) ; }
Code	{ return this . max . solve ( max ) ; }
Distance : 6

374
Tree	{ return solve ( min , max == null solve &= ) ; }
Code	{ return solve ( min , max == null solve &= ) ; }
Distance : 6

375
Tree	{ return solve ( min == null , ! solve () , max ) ; }
Code	{ return solve ( min == null , ! solve () , max ) ; }
Distance : 6

376
Tree	{ return solve ( max , max , min , null ) ; }
Code	{ return solve ( max , max , min , null ) ; }
Distance : 4

377
Tree	{ return solve () . solve ( solve () ) ; } data
Code	{ return solve () . solve ( solve () ) ; } data
Distance : 7

378
Tree	{ return solve ( min . solve () ) ; } k
Code	{ return solve ( min . solve () ) ; } k
Distance : 6

379
Tree	{ return Coordinates1D.NEGATIVE_INFINITY . solve ( min ) ; }
Code	{ return Coordinates1D.NEGATIVE_INFINITY . solve ( min ) ; }
Distance : 6

380
Tree	{ return solve ( min , max , break; ) ; }
Code	{ return solve ( min , max , break; ) ; }
Distance : 3

381
Tree	{ return Coordinates3D.ZERO . solve ( min , max ) ; }
Code	{ return Coordinates3D.ZERO . solve ( min , max ) ; }
Distance : 4

382
Tree	{ return f . solve ( solve () , NUMBER_CONSTANT / v2.length ) ; }
Code	{ return f . solve ( solve () , NUMBER_CONSTANT / v2.length ) ; }
Distance : 7

383
Tree	{ return solve ( min , max < FastMath.PI ) ; }
Code	{ return solve ( min , max < FastMath.PI ) ; }
Distance : 4

384
Tree	{ return solve ( solve ( min , max ) ) ; } v.length
Code	{ return solve ( solve ( min , max ) ) ; } v.length
Distance : 4

385
Tree	{ return this . f . solve ( min ) ; }
Code	{ return this . f . solve ( min ) ; }
Distance : 6

386
Tree	{ return ( ( max ) this ) . solve ( min , max ) ; }
Code	{ return ( ( max ) this ) . solve ( min , max ) ; }
Distance : 8

387
Tree	{ return solve () . solve ( solve () ) ; }
Code	{ return solve () . solve ( solve () ) ; }
Distance : 6

388
Tree	{ return f . solve ( this , f ) ; }
Code	{ return f . solve ( this , f ) ; }
Distance : 6

389
Tree	{ return f . solve ( min , AllowedSolution.ANY_SIDE ) ; }
Code	{ return f . solve ( min , AllowedSolution.ANY_SIDE ) ; }
Distance : 5

390
Tree	{ return solve ( min , min , min , false ) ; }
Code	{ return solve ( min , min , min , false ) ; }
Distance : 4

391
Tree	{ return source.incMoment . solve ( min ) ; }
Code	{ return source.incMoment . solve ( min ) ; }
Distance : 6

392
Tree	{ return solve ( max , f ) ; }
Code	{ return solve ( max , f ) ; }
Distance : 4

393
Tree	{ return f . solve ( this , min , min ) ; }
Code	{ return f . solve ( this , min , min ) ; }
Distance : 4

394
Tree	{ return min . solve ( min ) ; }
Code	{ return min . solve ( min ) ; }
Distance : 6

395
Tree	{ return false . solve ( this ) ; }
Code	{ return false . solve ( this ) ; }
Distance : 7

396
Tree	{ return max . solve () . solve ( f ) ; }
Code	{ return max . solve () . solve ( f ) ; }
Distance : 8

397
Tree	{ return solve () . solve ( solve ( min ) ) ; } Override
Code	{ return solve () . solve ( solve ( min ) ) ; } Override
Distance : 8

398
Tree	{ return f . solve ( max . solve () , f ) ; }
Code	{ return f . solve ( max . solve () , f ) ; }
Distance : 7

399
Tree	{ return solve ( max , super(); ) ; }
Code	{ return solve ( max , super(); ) ; }
Distance : 4

400
Tree	{ return solve () . solve ( solve () ) ; } field
Code	{ return solve () . solve ( solve () ) ; } field
Distance : 7

401
Tree	{ return f . solve ( min , max ) ; }
Code	{ return f . solve ( min , max ) ; }
Distance : 4

402
Tree	{ return solve ( min , max < Euclidean3D ) ; }
Code	{ return solve ( min , max < Euclidean3D ) ; }
Distance : 4

403
Tree	{ return min . solve ( min , min ) ; }
Code	{ return min . solve ( min , min ) ; }
Distance : 5

404
Tree	{ return solve ( min , max ) ; } v.length
Code	{ return solve ( min , max ) ; } v.length
Distance : 3

405
Tree	{ return f . solve ( null , f , max , null ) ; }
Code	{ return f . solve ( null , f , max , null ) ; }
Distance : 6

406
Tree	{ return solve () . solve ( solve () ) ; } int
Code	{ return solve () . solve ( solve () ) ; } int
Distance : 7

407
Tree	{ return f . solve ( min , max , continue; ) ; }
Code	{ return f . solve ( min , max , continue; ) ; }
Distance : 5

408
Tree	{ return AllowedSolution.ANY_SIDE . solve ( min , max ) ; }
Code	{ return AllowedSolution.ANY_SIDE . solve ( min , max ) ; }
Distance : 4

409
Tree	{ return solve ( this , max ) ; } UnivariateRealFunction
Code	{ return solve ( this , max ) ; } UnivariateRealFunction
Distance : 4

410
Tree	{ return min . solve () . solve ( max , max ) ; }
Code	{ return min . solve () . solve ( max , max ) ; }
Distance : 7

411
Tree	{ return solve ( min . solve ( f ) , max ) ; }
Code	{ return solve ( min . solve ( f ) , max ) ; }
Distance : 6

412
Tree	{ return solve ( min , null , f ) ; }
Code	{ return solve ( min , null , f ) ; }
Distance : 3

413
Tree	{ return solve ( max , max ) ; }
Code	{ return solve ( max , max ) ; }
Distance : 3

414
Tree	{ return solve ( max , min , max , null ) ; }
Code	{ return solve ( max , min , max , null ) ; }
Distance : 3

415
Tree	{ return solve ( min . solve ( max ) ) ; }
Code	{ return solve ( min . solve ( max ) ) ; }
Distance : 5

416
Tree	{ return min . solve ( null , max , max , null ) ; }
Code	{ return min . solve ( null , max , max , null ) ; }
Distance : 6

417
Tree	{ return min . solve ( max , max , null ) ; }
Code	{ return min . solve ( max , max , null ) ; }
Distance : 5

418
Tree	{ return Coordinates1D.NEGATIVE_INFINITY . solve ( min , max ) ; }
Code	{ return Coordinates1D.NEGATIVE_INFINITY . solve ( min , max ) ; }
Distance : 4

419
Tree	{ return f . solve ( min ) ; }
Code	{ return f . solve ( min ) ; }
Distance : 6

420
Tree	{ return min . solve () . solve ( f ) ; }
Code	{ return min . solve () . solve ( f ) ; }
Distance : 8

421
Tree	{ return min . solve ( min , null , min , null ) ; }
Code	{ return min . solve ( min , null , min , null ) ; }
Distance : 6

422
Tree	{ return f . solve ( solve () , NUMBER_CONSTANT / getY ) ; }
Code	{ return f . solve ( solve () , NUMBER_CONSTANT / getY ) ; }
Distance : 7

423
Tree	{ return f . solve ( max . solve () , max ) ; }
Code	{ return f . solve ( max . solve () , max ) ; }
Distance : 6

424
Tree	{ return ( ( max ) this ) . solve ( max , max ) ; }
Code	{ return ( ( max ) this ) . solve ( max , max ) ; }
Distance : 9

425
Tree	{ return source.incMoment . solve ( min , max ) ; }
Code	{ return source.incMoment . solve ( min , max ) ; }
Distance : 4

426
Tree	{ return solve ( min , min , max ) ; }
Code	{ return solve ( min , min , max ) ; }
Distance : 1

427
Tree	{ return solve ( max , max , true ) ; }
Code	{ return solve ( max , max , true ) ; }
Distance : 3

428
Tree	{ return solve ( min , max < upperBound ) ; }
Code	{ return solve ( min , max < upperBound ) ; }
Distance : 4

429
Tree	{ return f . solve ( max , null , min ) ; }
Code	{ return f . solve ( max , null , min ) ; }
Distance : 5

430
Tree	{ return min . solve ( max , null , max ) ; }
Code	{ return min . solve ( max , null , max ) ; }
Distance : 4

431
Tree	{ return solve ( min . solve ( max ) , f ) ; }
Code	{ return solve ( min . solve ( max ) , f ) ; }
Distance : 7

432
Tree	{ return solve ( solve ( min , min ) ) ; }
Code	{ return solve ( solve ( min , min ) ) ; }
Distance : 4

433
Tree	{ return solve ( min , max < Coordinates1D.NaN ) ; }
Code	{ return solve ( min , max < Coordinates1D.NaN ) ; }
Distance : 4

434
Tree	{ return solve ( min , f , false ) ; }
Code	{ return solve ( min , f , false ) ; }
Distance : 3

435
Tree	{ return max . solve ( min . solve () , max ) ; }
Code	{ return max . solve ( min . solve () , max ) ; }
Distance : 6

436
Tree	{ return solve ( f , max , null ) ; }
Code	{ return solve ( f , max , null ) ; }
Distance : 2

437
Tree	{ return ArrayRealVector . solve ( min , max ) ; }
Code	{ return ArrayRealVector . solve ( min , max ) ; }
Distance : 4

438
Tree	{ return f . solve ( f , max , null ) ; }
Code	{ return f . solve ( f , max , null ) ; }
Distance : 4

439
Tree	{ return solve ( max , null , min ) ; }
Code	{ return solve ( max , null , min ) ; }
Distance : 3

440
Tree	{ return solve ( min . solve ( max ) , max ) ; }
Code	{ return solve ( min . solve ( max ) , max ) ; }
Distance : 6

441
Tree	{ return solve ( min , min ) ; }
Code	{ return solve ( min , min ) ; }
Distance : 3

442
Tree	{ return solve ( min , min , min , null ) ; }
Code	{ return solve ( min , min , min , null ) ; }
Distance : 4

443
Tree	{ return solve ( max , max , super(); ) ; }
Code	{ return solve ( max , max , super(); ) ; }
Distance : 3

444
Tree	{ return solve ( min , max == null solve : ) ; }
Code	{ return solve ( min , max == null solve : ) ; }
Distance : 6

445
Tree	{ return solve ( min , return; ) ; }
Code	{ return solve ( min , return; ) ; }
Distance : 3

446
Tree	{ return max . solve ( this , f ) ; }
Code	{ return max . solve ( this , f ) ; }
Distance : 6

447
Tree	{ return solve ( max , max , max , false ) ; }
Code	{ return solve ( max , max , max , false ) ; }
Distance : 4

448
Tree	{ return solve ( f . solve () , max ) ; }
Code	{ return solve ( f . solve () , max ) ; }
Distance : 3

449
Tree	{ return source.moment . solve ( min , max ) ; }
Code	{ return source.moment . solve ( min , max ) ; }
Distance : 4

450
Tree	{ return f . solve ( min , v1.length ) ; }
Code	{ return f . solve ( min , v1.length ) ; }
Distance : 5

451
Tree	{ return f . solve ( solve () , NUMBER_CONSTANT / FastMath.PI ) ; }
Code	{ return f . solve ( solve () , NUMBER_CONSTANT / FastMath.PI ) ; }
Distance : 7

452
Tree	{ return min . solve ( min . solve () , max ) ; }
Code	{ return min . solve ( min . solve () , max ) ; }
Distance : 6

453
Tree	{ return ( ( min ) this ) . solve ( max , min ) ; }
Code	{ return ( ( min ) this ) . solve ( max , min ) ; }
Distance : 10

454
Tree	{ return f . solve ( solve () , NUMBER_CONSTANT / line.originOffset ) ; }
Code	{ return f . solve ( solve () , NUMBER_CONSTANT / line.originOffset ) ; }
Distance : 7

455
Tree	{ return f . solve ( solve () , NUMBER_CONSTANT / currentState.length ) ; }
Code	{ return f . solve ( solve () , NUMBER_CONSTANT / currentState.length ) ; }
Distance : 7

456
Tree	{ return solve ( this == min , f ) ; }
Code	{ return solve ( this == min , f ) ; }
Distance : 3

457
Tree	{ return solve ( f , f ) ; }
Code	{ return solve ( f , f ) ; }
Distance : 3

458
Tree	{ return solve () . solve ( solve ( min ) ) ; } UnivariateRealFunction
Code	{ return solve () . solve ( solve ( min ) ) ; } UnivariateRealFunction
Distance : 8

459
Tree	{ return solve ( min , max ) ; } v.length
Code	{ return solve ( min , max ) ; } v.length
Distance : 3

========================================================================


========================================================================
Example Number: 8
Parent Code is: 
out [ i ] [ j ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - tDistribution . cumulativeProbability ( t ) ) ;
-------------------------------------------------------------------------------
Child code is: 
out [ i ] [ j ] = NUMBER_CONSTANT * tDistribution . cumulativeProbability ( - t ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (7 (2 (2 (801{val=out}) (221{val=[}) (800{val=i}) (222{val=]})) (221{val=[}) (800{val=j}) (222{val=]})) (204{val==}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (36 (214{val=(}) (27 (34{val=NUMBER_CONSTANT}) (201{val=-}) (32 (800{val=tDistribution}) (235{val=.}) (802{val=cumulativeProbability}) (214{val=(}) (800{val=t}) (215{val=)}))) (215{val=)})))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (7 (2 (2 (801{val=out}) (221{val=[}) (800{val=i}) (222{val=]})) (221{val=[}) (800{val=j}) (222{val=]})) (204{val==}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (32 (800{val=tDistribution}) (235{val=.}) (802{val=cumulativeProbability}) (214{val=(}) (38 (201{val=-}) (800{val=t})) (215{val=)})))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/69/parent/src_main_java_org_apache_commons_math_stat_correlation_PearsonsCorrelation.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 130
Wrong
========================================================================
False

0
Tree	t += i && ( tDistribution . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	t += i && ( tDistribution . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

1
Tree	t += i && ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	t += i && ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

2
Tree	tDistribution += i && ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	tDistribution += i && ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

3
Tree	t += i && ( j . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	t += i && ( j . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 14

4
Tree	j += i && ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	j += i && ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

5
Tree	t += i && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	t += i && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

6
Tree	tDistribution += i && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	tDistribution += i && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

7
Tree	j += i && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	j += i && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

8
Tree	i += i && ( tDistribution . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	i += i && ( tDistribution . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

9
Tree	i += i && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	i += i && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

10
Tree	t = ( ( MathUtils.TWO_PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * MathIllegalArgumentException * tDistribution ) ;
Code	t = ( ( MathUtils.TWO_PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * MathIllegalArgumentException * tDistribution ) ;
Distance : 18

11
Tree	i = ( ( MathUtils.TWO_PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * MathIllegalArgumentException * tDistribution ) ;
Code	i = ( ( MathUtils.TWO_PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * MathIllegalArgumentException * tDistribution ) ;
Distance : 18

12
Tree	i = ( ( org.apache.commons.math4.geometry.euclidean.twod.Line == tDistribution ) * ( t - NUMBER_CONSTANT ) * MathIllegalArgumentException * tDistribution ) ;
Code	i = ( ( org.apache.commons.math4.geometry.euclidean.twod.Line == tDistribution ) * ( t - NUMBER_CONSTANT ) * MathIllegalArgumentException * tDistribution ) ;
Distance : 18

13
Tree	t = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( t + t ) * t * tDistribution ) ;
Code	t = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( t + t ) * t * tDistribution ) ;
Distance : 17

14
Tree	t = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( t - NUMBER_CONSTANT ) * continue; * tDistribution ) ;
Code	t = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( t - NUMBER_CONSTANT ) * continue; * tDistribution ) ;
Distance : 18

15
Tree	i += i / ( t != tDistribution . cumulativeProbability ( t ) ) ;
Code	i += i / ( t != tDistribution . cumulativeProbability ( t ) ) ;
Distance : 11

16
Tree	i = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( t + t ) * t * tDistribution ) ;
Code	i = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( t + t ) * t * tDistribution ) ;
Distance : 17

17
Tree	t = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( t + t ) * MathIllegalArgumentException * tDistribution ) ;
Code	t = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( t + t ) * MathIllegalArgumentException * tDistribution ) ;
Distance : 18

18
Tree	i += i / ( tDistribution != t . cumulativeProbability ( t ) ) ;
Code	i += i / ( tDistribution != t . cumulativeProbability ( t ) ) ;
Distance : 12

19
Tree	i = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * continue; * Double.POSITIVE_INFINITY * t ) ;
Code	i = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * continue; * Double.POSITIVE_INFINITY * t ) ;
Distance : 18

20
Tree	t = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * continue; * mueff * t ) ;
Code	t = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * continue; * mueff * t ) ;
Distance : 18

21
Tree	t = ( ( Coordinates3D.ZERO == tDistribution ) * ( t + t ) * t * tDistribution ) ;
Code	t = ( ( Coordinates3D.ZERO == tDistribution ) * ( t + t ) * t * tDistribution ) ;
Distance : 17

22
Tree	t = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * continue; * orders * t ) ;
Code	t = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * continue; * orders * t ) ;
Distance : 18

23
Tree	t = ( ( Coordinates3D.ZERO == tDistribution ) * ( t - NUMBER_CONSTANT ) * MathIllegalArgumentException * tDistribution ) ;
Code	t = ( ( Coordinates3D.ZERO == tDistribution ) * ( t - NUMBER_CONSTANT ) * MathIllegalArgumentException * tDistribution ) ;
Distance : 18

24
Tree	t = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * continue; * OutOfRangeException * t ) ;
Code	t = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * continue; * OutOfRangeException * t ) ;
Distance : 18

25
Tree	t = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * continue; * cumulativeProbability * t ) ;
Code	t = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * continue; * cumulativeProbability * t ) ;
Distance : 17

26
Tree	t = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * continue; * scale * t ) ;
Code	t = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * continue; * scale * t ) ;
Distance : 18

27
Tree	i = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * continue; * mueff * t ) ;
Code	i = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * continue; * mueff * t ) ;
Distance : 18

28
Tree	t = ( ( source.moment == tDistribution ) * ( t + t ) * t * tDistribution ) ;
Code	t = ( ( source.moment == tDistribution ) * ( t + t ) * t * tDistribution ) ;
Distance : 17

29
Tree	tDistribution += i / ( tDistribution != tDistribution . cumulativeProbability ( t ) ) ;
Code	tDistribution += i / ( tDistribution != tDistribution . cumulativeProbability ( t ) ) ;
Distance : 11

30
Tree	t += i / ( tDistribution != j . cumulativeProbability ( t ) ) ;
Code	t += i / ( tDistribution != j . cumulativeProbability ( t ) ) ;
Distance : 12

31
Tree	tDistribution += i && ( t != tDistribution . cumulativeProbability ( t ) ) ;
Code	tDistribution += i && ( t != tDistribution . cumulativeProbability ( t ) ) ;
Distance : 11

32
Tree	j += i && ( t != tDistribution . cumulativeProbability ( t ) ) ;
Code	j += i && ( t != tDistribution . cumulativeProbability ( t ) ) ;
Distance : 11

33
Tree	i += i && ( t != tDistribution . cumulativeProbability ( t ) ) ;
Code	i += i && ( t != tDistribution . cumulativeProbability ( t ) ) ;
Distance : 11

34
Tree	t += i / ( t != tDistribution . cumulativeProbability ( t ) ) ;
Code	t += i / ( t != tDistribution . cumulativeProbability ( t ) ) ;
Distance : 11

35
Tree	j += i / ( tDistribution != tDistribution . cumulativeProbability ( t ) ) ;
Code	j += i / ( tDistribution != tDistribution . cumulativeProbability ( t ) ) ;
Distance : 11

36
Tree	i += i / ( tDistribution != j . cumulativeProbability ( t ) ) ;
Code	i += i / ( tDistribution != j . cumulativeProbability ( t ) ) ;
Distance : 12

37
Tree	i += i / ( tDistribution . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	i += i / ( tDistribution . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

38
Tree	t += i && ( j != tDistribution . cumulativeProbability ( t ) ) ;
Code	t += i && ( j != tDistribution . cumulativeProbability ( t ) ) ;
Distance : 10

39
Tree	t = ( ( i != tDistribution . cumulativeProbability ( t ) ) * t * cumulativeProbability * t ) ;
Code	t = ( ( i != tDistribution . cumulativeProbability ( t ) ) * t * cumulativeProbability * t ) ;
Distance : 16

40
Tree	i = ( ( i . cumulativeProbability ( t ) - tDistribution ) * getDeterminant * cumulativeProbability * t ) ;
Code	i = ( ( i . cumulativeProbability ( t ) - tDistribution ) * getDeterminant * cumulativeProbability * t ) ;
Distance : 16

41
Tree	i += i / ( tDistribution . cumulativeProbability ( t ) - tDistribution ) ;
Code	i += i / ( tDistribution . cumulativeProbability ( t ) - tDistribution ) ;
Distance : 12

42
Tree	t += i / ( tDistribution != tDistribution . cumulativeProbability ( t ) ) ;
Code	t += i / ( tDistribution != tDistribution . cumulativeProbability ( t ) ) ;
Distance : 11

43
Tree	i += i / ( tDistribution != tDistribution . cumulativeProbability ( t ) ) ;
Code	i += i / ( tDistribution != tDistribution . cumulativeProbability ( t ) ) ;
Distance : 11

44
Tree	i += i && ( tDistribution != tDistribution . cumulativeProbability ( t ) ) ;
Code	i += i && ( tDistribution != tDistribution . cumulativeProbability ( t ) ) ;
Distance : 11

45
Tree	t += i && ( tDistribution != tDistribution . cumulativeProbability ( t ) ) ;
Code	t += i && ( tDistribution != tDistribution . cumulativeProbability ( t ) ) ;
Distance : 11

46
Tree	t += i && ( t != tDistribution . cumulativeProbability ( t ) ) ;
Code	t += i && ( t != tDistribution . cumulativeProbability ( t ) ) ;
Distance : 11

47
Tree	t = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( t - NUMBER_CONSTANT ) * MathIllegalArgumentException * tDistribution ) ;
Code	t = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( t - NUMBER_CONSTANT ) * MathIllegalArgumentException * tDistribution ) ;
Distance : 18

48
Tree	i = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( t - NUMBER_CONSTANT ) * MathIllegalArgumentException * tDistribution ) ;
Code	i = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( t - NUMBER_CONSTANT ) * MathIllegalArgumentException * tDistribution ) ;
Distance : 18

49
Tree	t = ( ( source.moment == tDistribution ) * ( t - NUMBER_CONSTANT ) * MathIllegalArgumentException * tDistribution ) ;
Code	t = ( ( source.moment == tDistribution ) * ( t - NUMBER_CONSTANT ) * MathIllegalArgumentException * tDistribution ) ;
Distance : 18

50
Tree	t = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( Coordinates3D.ZERO == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	t = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( Coordinates3D.ZERO == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

51
Tree	i = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( Coordinates3D.ZERO == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	i = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( Coordinates3D.ZERO == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

52
Tree	t = ( ( org.apache.commons.math4.geometry.euclidean.twod.Line == tDistribution ) * ( t - NUMBER_CONSTANT ) * MathIllegalArgumentException * tDistribution ) ;
Code	t = ( ( org.apache.commons.math4.geometry.euclidean.twod.Line == tDistribution ) * ( t - NUMBER_CONSTANT ) * MathIllegalArgumentException * tDistribution ) ;
Distance : 18

53
Tree	i = ( ( source.moment == tDistribution ) * ( t - NUMBER_CONSTANT ) * MathIllegalArgumentException * tDistribution ) ;
Code	i = ( ( source.moment == tDistribution ) * ( t - NUMBER_CONSTANT ) * MathIllegalArgumentException * tDistribution ) ;
Distance : 18

54
Tree	t = ( ( source.moment == tDistribution ) * ( Coordinates3D.ZERO == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	t = ( ( source.moment == tDistribution ) * ( Coordinates3D.ZERO == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

55
Tree	i = ( ( source.moment == tDistribution ) * ( Coordinates3D.ZERO == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	i = ( ( source.moment == tDistribution ) * ( Coordinates3D.ZERO == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

56
Tree	t += i / ( tDistribution . cumulativeProbability ( t ) - t ) ;
Code	t += i / ( tDistribution . cumulativeProbability ( t ) - t ) ;
Distance : 11

57
Tree	t = ( ( org.apache.commons.math4.geometry.euclidean.twod.Line == tDistribution ) * ( Coordinates3D.ZERO == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	t = ( ( org.apache.commons.math4.geometry.euclidean.twod.Line == tDistribution ) * ( Coordinates3D.ZERO == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

58
Tree	t += i && ( i != tDistribution . cumulativeProbability ( t ) ) ;
Code	t += i && ( i != tDistribution . cumulativeProbability ( t ) ) ;
Distance : 11

59
Tree	j += i && ( i != tDistribution . cumulativeProbability ( t ) ) ;
Code	j += i && ( i != tDistribution . cumulativeProbability ( t ) ) ;
Distance : 11

60
Tree	tDistribution += i && ( i != tDistribution . cumulativeProbability ( t ) ) ;
Code	tDistribution += i && ( i != tDistribution . cumulativeProbability ( t ) ) ;
Distance : 11

61
Tree	t = ( ( i != tDistribution . cumulativeProbability ( t ) ) * NullArgumentException * cumulativeProbability * tDistribution ) ;
Code	t = ( ( i != tDistribution . cumulativeProbability ( t ) ) * NullArgumentException * cumulativeProbability * tDistribution ) ;
Distance : 17

62
Tree	i = ( ( i != tDistribution . cumulativeProbability ( t ) ) * t * cumulativeProbability * t ) ;
Code	i = ( ( i != tDistribution . cumulativeProbability ( t ) ) * t * cumulativeProbability * t ) ;
Distance : 16

63
Tree	t = ( ( i != tDistribution . cumulativeProbability ( t ) ) * getSolver * cumulativeProbability * t ) ;
Code	t = ( ( i != tDistribution . cumulativeProbability ( t ) ) * getSolver * cumulativeProbability * t ) ;
Distance : 16

64
Tree	t = ( ( i != tDistribution . cumulativeProbability ( t ) ) * getSolver * cumulativeProbability * tDistribution ) ;
Code	t = ( ( i != tDistribution . cumulativeProbability ( t ) ) * getSolver * cumulativeProbability * tDistribution ) ;
Distance : 17

65
Tree	t = ( ( i != tDistribution . cumulativeProbability ( t ) ) * MathIllegalArgumentException * cumulativeProbability * t ) ;
Code	t = ( ( i != tDistribution . cumulativeProbability ( t ) ) * MathIllegalArgumentException * cumulativeProbability * t ) ;
Distance : 16

66
Tree	i = ( ( i != tDistribution . cumulativeProbability ( t ) ) * NullArgumentException * cumulativeProbability * tDistribution ) ;
Code	i = ( ( i != tDistribution . cumulativeProbability ( t ) ) * NullArgumentException * cumulativeProbability * tDistribution ) ;
Distance : 17

67
Tree	t = ( ( i != tDistribution . cumulativeProbability ( t ) ) * preMultTest * cumulativeProbability * t ) ;
Code	t = ( ( i != tDistribution . cumulativeProbability ( t ) ) * preMultTest * cumulativeProbability * t ) ;
Distance : 16

68
Tree	t = ( ( i != tDistribution . cumulativeProbability ( t ) ) * t * cumulativeProbability * tDistribution ) ;
Code	t = ( ( i != tDistribution . cumulativeProbability ( t ) ) * t * cumulativeProbability * tDistribution ) ;
Distance : 17

69
Tree	i += i / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	i += i / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

70
Tree	t = ( ( i != tDistribution . cumulativeProbability ( t ) ) * NullArgumentException * cumulativeProbability * t ) ;
Code	t = ( ( i != tDistribution . cumulativeProbability ( t ) ) * NullArgumentException * cumulativeProbability * t ) ;
Distance : 16

71
Tree	t += i / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	t += i / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

72
Tree	t = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( model.steps == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	t = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( model.steps == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

73
Tree	t = ( ( i . cumulativeProbability ( t ) - tDistribution ) * MathIllegalArgumentException * cumulativeProbability * t ) ;
Code	t = ( ( i . cumulativeProbability ( t ) - tDistribution ) * MathIllegalArgumentException * cumulativeProbability * t ) ;
Distance : 16

74
Tree	t = ( ( i . cumulativeProbability ( t ) - tDistribution ) * ballOnSupport * cumulativeProbability * t ) ;
Code	t = ( ( i . cumulativeProbability ( t ) - tDistribution ) * ballOnSupport * cumulativeProbability * t ) ;
Distance : 16

75
Tree	i = ( ( i . cumulativeProbability ( t ) - tDistribution ) * MathIllegalArgumentException * cumulativeProbability * t ) ;
Code	i = ( ( i . cumulativeProbability ( t ) - tDistribution ) * MathIllegalArgumentException * cumulativeProbability * t ) ;
Distance : 16

76
Tree	j += i / ( tDistribution . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	j += i / ( tDistribution . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

77
Tree	tDistribution += i / ( tDistribution . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	tDistribution += i / ( tDistribution . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

78
Tree	t = ( ( i . cumulativeProbability ( t ) - tDistribution ) * NullArgumentException * cumulativeProbability * t ) ;
Code	t = ( ( i . cumulativeProbability ( t ) - tDistribution ) * NullArgumentException * cumulativeProbability * t ) ;
Distance : 16

79
Tree	i = ( ( i . cumulativeProbability ( t ) - tDistribution ) * ballOnSupport * cumulativeProbability * t ) ;
Code	i = ( ( i . cumulativeProbability ( t ) - tDistribution ) * ballOnSupport * cumulativeProbability * t ) ;
Distance : 16

80
Tree	t = ( ( source.moment == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	t = ( ( source.moment == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

81
Tree	t = ( ( org.apache.commons.math4.geometry.euclidean.twod.Line == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	t = ( ( org.apache.commons.math4.geometry.euclidean.twod.Line == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

82
Tree	i = ( ( source.moment == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	i = ( ( source.moment == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

83
Tree	t = ( ( MathUtils.TWO_PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	t = ( ( MathUtils.TWO_PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

84
Tree	i = ( ( MathUtils.TWO_PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	i = ( ( MathUtils.TWO_PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

85
Tree	out [ i ] [ i ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - tDistribution . cumulativeProbability ( t ) ) ;
Code	out [ i ] [ i ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - tDistribution . cumulativeProbability ( t ) ) ;
Distance : 6

86
Tree	i = ( ( org.apache.commons.math4.geometry.euclidean.twod.Line == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	i = ( ( org.apache.commons.math4.geometry.euclidean.twod.Line == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

87
Tree	t = ( ( Coordinates3D.ZERO == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	t = ( ( Coordinates3D.ZERO == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

88
Tree	i = ( ( i . cumulativeProbability ( t ) - tDistribution ) * NullArgumentException * cumulativeProbability * t ) ;
Code	i = ( ( i . cumulativeProbability ( t ) - tDistribution ) * NullArgumentException * cumulativeProbability * t ) ;
Distance : 16

89
Tree	out [ i ] [ i ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - i . cumulativeProbability ( t ) ) ;
Code	out [ i ] [ i ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - i . cumulativeProbability ( t ) ) ;
Distance : 7

90
Tree	out [ i ] [ i ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - t . cumulativeProbability ( t ) ) ;
Code	out [ i ] [ i ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - t . cumulativeProbability ( t ) ) ;
Distance : 7

91
Tree	t = ( ( MathUtils.TWO_PI == tDistribution ) * ( Coordinates3D.ZERO == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	t = ( ( MathUtils.TWO_PI == tDistribution ) * ( Coordinates3D.ZERO == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

92
Tree	i = ( ( Coordinates3D.ZERO == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	i = ( ( Coordinates3D.ZERO == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

93
Tree	out [ i ] [ i ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - j . cumulativeProbability ( t ) ) ;
Code	out [ i ] [ i ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - j . cumulativeProbability ( t ) ) ;
Distance : 7

94
Tree	t += i / ( tDistribution . cumulativeProbability ( t ) - tDistribution ) ;
Code	t += i / ( tDistribution . cumulativeProbability ( t ) - tDistribution ) ;
Distance : 12

95
Tree	j += i / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	j += i / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

96
Tree	out [ i ] [ t ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - tDistribution . cumulativeProbability ( t ) ) ;
Code	out [ i ] [ t ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - tDistribution . cumulativeProbability ( t ) ) ;
Distance : 6

97
Tree	out [ i ] [ j ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - i . cumulativeProbability ( t ) ) ;
Code	out [ i ] [ j ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - i . cumulativeProbability ( t ) ) ;
Distance : 6

98
Tree	out [ i ] [ j ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - t . cumulativeProbability ( t ) ) ;
Code	out [ i ] [ j ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - t . cumulativeProbability ( t ) ) ;
Distance : 6

99
Tree	tDistribution += i / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	tDistribution += i / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

100
Tree	t = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	t = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

101
Tree	out [ i ] [ j ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - j . cumulativeProbability ( t ) ) ;
Code	out [ i ] [ j ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - j . cumulativeProbability ( t ) ) ;
Distance : 6

102
Tree	i = ( ( MathUtils.TWO_PI == tDistribution ) * ( Coordinates3D.ZERO == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	i = ( ( MathUtils.TWO_PI == tDistribution ) * ( Coordinates3D.ZERO == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

103
Tree	out [ i ] [ j ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - tDistribution . cumulativeProbability ( t ) ) ;
Code	out [ i ] [ j ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - tDistribution . cumulativeProbability ( t ) ) ;
Distance : 5

104
Tree	t = ( ( i . cumulativeProbability ( t ) - tDistribution ) * getDeterminant * cumulativeProbability * t ) ;
Code	t = ( ( i . cumulativeProbability ( t ) - tDistribution ) * getDeterminant * cumulativeProbability * t ) ;
Distance : 16

105
Tree	i = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( model.steps == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	i = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( model.steps == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

106
Tree	out [ i ] [ tDistribution ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - tDistribution . cumulativeProbability ( t ) ) ;
Code	out [ i ] [ tDistribution ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - tDistribution . cumulativeProbability ( t ) ) ;
Distance : 6

107
Tree	t = ( ( source.moment == tDistribution ) * ( model.steps == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	t = ( ( source.moment == tDistribution ) * ( model.steps == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

108
Tree	i += i / ( tDistribution . cumulativeProbability ( t ) - t ) ;
Code	i += i / ( tDistribution . cumulativeProbability ( t ) - t ) ;
Distance : 11

109
Tree	i += i / ( t . cumulativeProbability ( t ) - tDistribution ) ;
Code	i += i / ( t . cumulativeProbability ( t ) - tDistribution ) ;
Distance : 13

110
Tree	t += i / ( t . cumulativeProbability ( t ) - tDistribution ) ;
Code	t += i / ( t . cumulativeProbability ( t ) - tDistribution ) ;
Distance : 13

111
Tree	t += i / ( tDistribution . cumulativeProbability ( t ) - j ) ;
Code	t += i / ( tDistribution . cumulativeProbability ( t ) - j ) ;
Distance : 12

112
Tree	j += i / ( tDistribution . cumulativeProbability ( t ) - tDistribution ) ;
Code	j += i / ( tDistribution . cumulativeProbability ( t ) - tDistribution ) ;
Distance : 12

113
Tree	tDistribution += i / ( tDistribution . cumulativeProbability ( t ) - tDistribution ) ;
Code	tDistribution += i / ( tDistribution . cumulativeProbability ( t ) - tDistribution ) ;
Distance : 12

114
Tree	i += i / ( tDistribution . cumulativeProbability ( t ) - j ) ;
Code	i += i / ( tDistribution . cumulativeProbability ( t ) - j ) ;
Distance : 12

115
Tree	i = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	i = ( ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED == tDistribution ) * ( t - NUMBER_CONSTANT ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 17

116
Tree	t += i / ( j . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	t += i / ( j . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 14

117
Tree	i += i / ( j . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	i += i / ( j . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 14

118
Tree	t = ( ( i . cumulativeProbability ( t ) - tDistribution ) * getSolver * cumulativeProbability * t ) ;
Code	t = ( ( i . cumulativeProbability ( t ) - tDistribution ) * getSolver * cumulativeProbability * t ) ;
Distance : 16

119
Tree	t = ( ( i . cumulativeProbability ( t ) - tDistribution ) * MathIllegalArgumentException * scale * t ) ;
Code	t = ( ( i . cumulativeProbability ( t ) - tDistribution ) * MathIllegalArgumentException * scale * t ) ;
Distance : 17

120
Tree	t = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * continue; * imaginary * t ) ;
Code	t = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * continue; * imaginary * t ) ;
Distance : 18

121
Tree	t = ( ( org.apache.commons.math4.geometry.euclidean.twod.Line == tDistribution ) * ( t + t ) * t * tDistribution ) ;
Code	t = ( ( org.apache.commons.math4.geometry.euclidean.twod.Line == tDistribution ) * ( t + t ) * t * tDistribution ) ;
Distance : 17

122
Tree	i = ( ( source.moment == tDistribution ) * ( t + t ) * t * tDistribution ) ;
Code	i = ( ( source.moment == tDistribution ) * ( t + t ) * t * tDistribution ) ;
Distance : 17

123
Tree	t = ( ( MathUtils.TWO_PI == tDistribution ) * ( t + t ) * t * tDistribution ) ;
Code	t = ( ( MathUtils.TWO_PI == tDistribution ) * ( t + t ) * t * tDistribution ) ;
Distance : 17

124
Tree	t = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * continue; * Double.POSITIVE_INFINITY * t ) ;
Code	t = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * continue; * Double.POSITIVE_INFINITY * t ) ;
Distance : 18

125
Tree	t += i / ( tDistribution != t . cumulativeProbability ( t ) ) ;
Code	t += i / ( tDistribution != t . cumulativeProbability ( t ) ) ;
Distance : 12

126
Tree	i = ( ( MathUtils.TWO_PI == tDistribution ) * ( t + t ) * t * tDistribution ) ;
Code	i = ( ( MathUtils.TWO_PI == tDistribution ) * ( t + t ) * t * tDistribution ) ;
Distance : 17

127
Tree	i = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * continue; * imaginary * t ) ;
Code	i = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * continue; * imaginary * t ) ;
Distance : 18

128
Tree	t += i / ( tDistribution . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	t += i / ( tDistribution . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

129
Tree	i = ( ( org.apache.commons.math4.geometry.euclidean.twod.Line == tDistribution ) * ( t + t ) * t * tDistribution ) ;
Code	i = ( ( org.apache.commons.math4.geometry.euclidean.twod.Line == tDistribution ) * ( t + t ) * t * tDistribution ) ;
Distance : 17

========================================================================


========================================================================
Example Number: 9
Parent Code is: 
if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.MEAN , p ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=p}) (252{val=<=}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (32 (800{val=MathRuntimeException}) (235{val=.}) (802{val=createIllegalArgumentException}) (214{val=(}) (40{val=LocalizedFormats.NOT_POSITIVE_POISSON_MEAN}) (234{val=,}) (800{val=p}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=p}) (252{val=<=}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=NotStrictlyPositiveException})) (214{val=(}) (40{val=LocalizedFormats.MEAN}) (234{val=,}) (800{val=p}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/61/parent/src_main_java_org_apache_commons_math_distribution_PoissonDistributionImpl.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 410
Wrong
========================================================================
False

0
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; }
Distance : 2

1
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException <> ( p ) ; } point
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException <> ( p ) ; } point
Distance : 4

2
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException <> ( p ) ; } MatrixUtils
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException <> ( p ) ; } MatrixUtils
Distance : 4

3
Tree	MathRuntimeException = new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , false ) ;
Code	MathRuntimeException = new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , false ) ;
Distance : 13

4
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , p , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , p , NUMBER_CONSTANT ) ; }
Distance : 7

5
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( return; , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( return; , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 9

6
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , false ) ; }
Distance : 6

7
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException ) ; }
Distance : 2

8
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( null , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , <= , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( null , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , <= , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 9

9
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p , NUMBER_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p , NUMBER_CONSTANT , p ) ; }
Distance : 7

10
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } super
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } super
Distance : 3

11
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } UnivariateRealFunction
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } UnivariateRealFunction
Distance : 3

12
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } point
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } point
Distance : 3

13
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } MathArrays
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } MathArrays
Distance : 6

14
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } v.length
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } v.length
Distance : 6

15
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } MatrixUtils
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } MatrixUtils
Distance : 3

16
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException <> ( p ) ; } +
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException <> ( p ) ; } +
Distance : 4

17
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } +
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } +
Distance : 3

18
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( p ) ; }
Distance : 4

19
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( null , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( null , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 9

20
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 4

21
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( <= , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( <= , p ) ; }
Distance : 4

22
Tree	if ( p <= NUMBER_CONSTANT ) { throw p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 4

23
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } v.length
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } v.length
Distance : 2

24
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , true ) ; } v.length
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , true ) ; } v.length
Distance : 5

25
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , true ) ; } MathArrays
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , true ) ; } MathArrays
Distance : 5

26
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; } Array2DRowFieldMatrix
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; } Array2DRowFieldMatrix
Distance : 3

27
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , p ) ; } UnivariateRealFunction
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , p ) ; } UnivariateRealFunction
Distance : 2

28
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p . createIllegalArgumentException ( <= , p ) ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p . createIllegalArgumentException ( <= , p ) ) ; }
Distance : 8

29
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , NUMBER_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , NUMBER_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , MathRuntimeException ) ; }
Distance : 8

30
Tree	MathRuntimeException = new NotStrictlyPositiveException < p > ( MathRuntimeException , p , p ) ;
Code	MathRuntimeException = new NotStrictlyPositiveException < p > ( MathRuntimeException , p , p ) ;
Distance : 13

31
Tree	MathRuntimeException = new NotStrictlyPositiveException <> ( p , MathRuntimeException , p ) ;
Code	MathRuntimeException = new NotStrictlyPositiveException <> ( p , MathRuntimeException , p ) ;
Distance : 13

32
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException , p ) ; }
Distance : 3

33
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException () ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException () ) ; }
Distance : 5

34
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , MathRuntimeException , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , MathRuntimeException , p ) ; }
Distance : 6

35
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException ) ; }
Distance : 3

36
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , <= , NUMBER_CONSTANT , p , NUMBER_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , <= , NUMBER_CONSTANT , p , NUMBER_CONSTANT ) ; }
Distance : 8

37
Tree	MathRuntimeException = new NotStrictlyPositiveException ( MathRuntimeException , NUMBER_CONSTANT , true ) ;
Code	MathRuntimeException = new NotStrictlyPositiveException ( MathRuntimeException , NUMBER_CONSTANT , true ) ;
Distance : 13

38
Tree	p = new NotStrictlyPositiveException ( MathRuntimeException , NUMBER_CONSTANT , false ) ;
Code	p = new NotStrictlyPositiveException ( MathRuntimeException , NUMBER_CONSTANT , false ) ;
Distance : 12

39
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , p ) ; } super
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , p ) ; } super
Distance : 2

40
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( p ) ; }
Distance : 5

41
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException ( MathRuntimeException ) ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException ( MathRuntimeException ) ) ; }
Distance : 6

42
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , p , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , p , p ) ; }
Distance : 8

43
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , <= , NUMBER_CONSTANT , p , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , <= , NUMBER_CONSTANT , p , NUMBER_CONSTANT ) ; }
Distance : 7

44
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException , p , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException , p , true ) ; }
Distance : 5

45
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p . createIllegalArgumentException ( p ) ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p . createIllegalArgumentException ( p ) ) ; }
Distance : 6

46
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( MathRuntimeException , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( MathRuntimeException , p ) ; }
Distance : 4

47
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException . createIllegalArgumentException ( MathRuntimeException ) ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException . createIllegalArgumentException ( MathRuntimeException ) ) ; }
Distance : 7

48
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , <= ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , <= ) ; }
Distance : 3

49
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Distance : 3

50
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , p , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , p , MathRuntimeException ) ; }
Distance : 7

51
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , true ) ; }
Distance : 6

52
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , true ) ; }
Distance : 4

53
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , p ) ; } Array2DRowFieldMatrix
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , p ) ; } Array2DRowFieldMatrix
Distance : 2

54
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , true , true , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , true , true , false ) ; }
Distance : 6

55
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , STRING_CONSTANT , p , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , STRING_CONSTANT , p , STRING_CONSTANT ) ; }
Distance : 9

56
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT ) ; } assertEquals
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT ) ; } assertEquals
Distance : 4

57
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , NUMBER_CONSTANT ) ; }
Distance : 3

58
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , null ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , null ) ; }
Distance : 2

59
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , null ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , null ) ; }
Distance : 2

60
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( msg , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( msg , p ) ; }
Distance : 1

61
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( OUT_OF_RANGE_POINT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( OUT_OF_RANGE_POINT , p ) ; }
Distance : 1

62
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , p ) ; } point
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , p ) ; } point
Distance : 2

63
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( ! , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( ! , p ) ; }
Distance : 1

64
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } field
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } field
Distance : 4

65
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; } MatrixUtils
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; } MatrixUtils
Distance : 4

66
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; } Array2DRowFieldMatrix
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; } Array2DRowFieldMatrix
Distance : 4

67
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } k
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } k
Distance : 4

68
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } nCols
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } nCols
Distance : 4

69
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , p ) ; } MatrixUtils
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , p ) ; } MatrixUtils
Distance : 2

70
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } Assert
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } Assert
Distance : 4

71
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Distance : 3

72
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT ) ; } Fraction
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT ) ; } Fraction
Distance : 4

73
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; }
Distance : 1

74
Tree	p = new NotStrictlyPositiveException <> ( p , p , p ) ;
Code	p = new NotStrictlyPositiveException <> ( p , p , p ) ;
Distance : 12

75
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; }
Distance : 2

76
Tree	p = new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , true ) ; MathArrays
Code	p = new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , true ) ; MathArrays
Distance : 12

77
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; } MathArrays
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; } MathArrays
Distance : 2

78
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; } v.length
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; } v.length
Distance : 2

79
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; } v.length
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; } v.length
Distance : 3

80
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false ) ; }
Distance : 2

81
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; } MathArrays
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; } MathArrays
Distance : 3

82
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Distance : 3

83
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( reference , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( reference , p ) ; }
Distance : 1

84
Tree	p = new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , true ) ;
Code	p = new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , true ) ;
Distance : 12

85
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( % , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( % , p ) ; }
Distance : 1

86
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; } MatrixUtils
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; } MatrixUtils
Distance : 4

87
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( p ) ; } MathArrays
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( p ) ; } MathArrays
Distance : 5

88
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException () ) ; } v.length
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException () ) ; } v.length
Distance : 5

89
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT + STRING_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT + STRING_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , true ) ; }
Distance : 8

90
Tree	p = new NotStrictlyPositiveException < p > ( MathRuntimeException , p , p ) ;
Code	p = new NotStrictlyPositiveException < p > ( MathRuntimeException , p , p ) ;
Distance : 13

91
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , <= , p , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , <= , p , MathRuntimeException ) ; }
Distance : 5

92
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException ( MathRuntimeException ) ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException ( MathRuntimeException ) ) ; }
Distance : 7

93
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException , p ) ; }
Distance : 5

94
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; } +
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; } +
Distance : 3

95
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException , MathRuntimeException ) ; }
Distance : 4

96
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT ) ; } Override
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT ) ; } Override
Distance : 4

97
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , p , p ) ; }
Distance : 5

98
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Distance : 4

99
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.OUT_OF_BOUNDS_QUANTILE_VALUE , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.OUT_OF_BOUNDS_QUANTILE_VALUE , p ) ; }
Distance : 1

100
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException ) ; }
Distance : 2

101
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException <> ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException <> ( p ) ; }
Distance : 3

102
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( p , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( p , p ) ; }
Distance : 5

103
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false , true , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false , true , true ) ; }
Distance : 6

104
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false , false , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false , false , true ) ; }
Distance : 6

105
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 1

106
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , p , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , p , true ) ; }
Distance : 5

107
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; } v.length
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; } v.length
Distance : 3

108
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException , p , STRING_CONSTANT , p , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException , p , STRING_CONSTANT , p , STRING_CONSTANT ) ; }
Distance : 9

109
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; } super
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; } super
Distance : 3

110
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException ( p ) ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException ( p ) ) ; }
Distance : 6

111
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT ) ; }
Distance : 3

112
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT ) ; } void
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT ) ; } void
Distance : 4

113
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , continue; ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , continue; ) ; }
Distance : 2

114
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , <= , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , <= , p , p ) ; }
Distance : 5

115
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , MathRuntimeException , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , MathRuntimeException , p , p ) ; }
Distance : 7

116
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( p , p ) ; }
Distance : 4

117
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p ) ; }
Distance : 8

118
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p ) ; }
Distance : 3

119
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , true ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , true ) ; }
Distance : 6

120
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( null , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( null , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException ) ; }
Distance : 9

121
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException , NUMBER_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException , NUMBER_CONSTANT ) ; }
Distance : 5

122
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Distance : 2

123
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , MathRuntimeException , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , MathRuntimeException , true ) ; }
Distance : 5

124
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , MathRuntimeException ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , MathRuntimeException ) ; }
Distance : 3

125
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , <= , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , <= , NUMBER_CONSTANT , false ) ; }
Distance : 6

126
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , MathRuntimeException , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , MathRuntimeException , MathRuntimeException ) ; }
Distance : 5

127
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException . createIllegalArgumentException ( p ) ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException . createIllegalArgumentException ( p ) ) ; }
Distance : 6

128
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( p ) ; }
Distance : 4

129
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , <= ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , <= ) ; }
Distance : 3

130
Tree	p = new NotStrictlyPositiveException <> ( MathRuntimeException , p , MathRuntimeException ) ;
Code	p = new NotStrictlyPositiveException <> ( MathRuntimeException , p , MathRuntimeException ) ;
Distance : 12

131
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( MathRuntimeException ) ; }
Distance : 5

132
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException () ) ; } MathArrays
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException () ) ; } MathArrays
Distance : 5

133
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; }
Distance : 1

134
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p ) ; }
Distance : 6

135
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false ) ; } MathArrays
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false ) ; } MathArrays
Distance : 3

136
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( null , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( null , p ) ; }
Distance : 1

137
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ) ; }
Distance : 8

138
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , p ) ; }
Distance : 3

139
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , MathRuntimeException ) ; }
Distance : 8

140
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Distance : 3

141
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( p , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( p , MathRuntimeException ) ; }
Distance : 5

142
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , MathRuntimeException , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , MathRuntimeException , p ) ; }
Distance : 7

143
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } void
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } void
Distance : 4

144
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; } point
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; } point
Distance : 3

145
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 7

146
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException , MathRuntimeException , STRING_CONSTANT , p , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException , MathRuntimeException , STRING_CONSTANT , p , STRING_CONSTANT ) ; }
Distance : 9

147
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 7

148
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p . createIllegalArgumentException () ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p . createIllegalArgumentException () ) ; }
Distance : 5

149
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , false ) ; }
Distance : 4

150
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; } UnivariateRealFunction
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; } UnivariateRealFunction
Distance : 3

151
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , p ) ; }
Distance : 1

152
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT + STRING_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT + STRING_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , false ) ; }
Distance : 8

153
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException <> ( MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException <> ( MathRuntimeException ) ; }
Distance : 4

154
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , true ) ; }
Distance : 2

155
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , MathRuntimeException ) ; }
Distance : 2

156
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException , p , p ) ; }
Distance : 7

157
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , NUMBER_CONSTANT , false ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , NUMBER_CONSTANT , false ) ; }
Distance : 5

158
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; } super
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; } super
Distance : 3

159
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , <= ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , <= ) ; }
Distance : 2

160
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException <> ( p ) ; } Array2DRowFieldMatrix
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException <> ( p ) ; } Array2DRowFieldMatrix
Distance : 4

161
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( MathRuntimeException , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( MathRuntimeException , MathRuntimeException ) ; }
Distance : 5

162
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( continue; , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( continue; , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 9

163
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 6

164
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , MathRuntimeException ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , MathRuntimeException ) ; }
Distance : 5

165
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; } Array2DRowFieldMatrix
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; } Array2DRowFieldMatrix
Distance : 4

166
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; }
Distance : 1

167
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; } +
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; } +
Distance : 3

168
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Distance : 2

169
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 6

170
Tree	p = new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , false ) ;
Code	p = new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , false ) ;
Distance : 12

171
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Distance : 2

172
Tree	MathRuntimeException = new NotStrictlyPositiveException <> ( p , p , p ) ;
Code	MathRuntimeException = new NotStrictlyPositiveException <> ( p , p , p ) ;
Distance : 13

173
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; }
Distance : 3

174
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException , true ) ; }
Distance : 5

175
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p ) ; }
Distance : 4

176
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p , NUMBER_CONSTANT ) ; }
Distance : 7

177
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , null ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , null ) ; }
Distance : 3

178
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; } UnivariateRealFunction
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; } UnivariateRealFunction
Distance : 3

179
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , return; ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , return; ) ; }
Distance : 2

180
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , p , STRING_CONSTANT , p , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , p , STRING_CONSTANT , p , STRING_CONSTANT ) ; }
Distance : 9

181
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT ) ; } Assert
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT ) ; } Assert
Distance : 4

182
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( null , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , <= , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( null , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , <= , p ) ; }
Distance : 9

183
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException ) ; }
Distance : 2

184
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , MathRuntimeException ) ; }
Distance : 2

185
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , super(); ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , super(); ) ; }
Distance : 2

186
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; }
Distance : 1

187
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , true ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , true ) ; }
Distance : 7

188
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; } point
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; } point
Distance : 3

189
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; }
Distance : 3

190
Tree	p = new NotStrictlyPositiveException ( MathRuntimeException , NUMBER_CONSTANT , true ) ;
Code	p = new NotStrictlyPositiveException ( MathRuntimeException , NUMBER_CONSTANT , true ) ;
Distance : 12

191
Tree	p = new NotStrictlyPositiveException < p > ( MathRuntimeException , p , MathRuntimeException ) ;
Code	p = new NotStrictlyPositiveException < p > ( MathRuntimeException , p , MathRuntimeException ) ;
Distance : 13

192
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Distance : 4

193
Tree	p = new NotStrictlyPositiveException <> ( p , MathRuntimeException , MathRuntimeException ) ;
Code	p = new NotStrictlyPositiveException <> ( p , MathRuntimeException , MathRuntimeException ) ;
Distance : 13

194
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , <= , NUMBER_CONSTANT , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , <= , NUMBER_CONSTANT , MathRuntimeException ) ; }
Distance : 8

195
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , STRING_CONSTANT + STRING_CONSTANT , <= , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , STRING_CONSTANT + STRING_CONSTANT , <= , false ) ; }
Distance : 8

196
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , NUMBER_CONSTANT , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , NUMBER_CONSTANT , true ) ; }
Distance : 4

197
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT ) ; } field
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT ) ; } field
Distance : 4

198
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT + STRING_CONSTANT , <= , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT + STRING_CONSTANT , <= , false ) ; }
Distance : 8

199
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , <= ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , <= ) ; }
Distance : 2

200
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , p , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , p , p , p ) ; }
Distance : 7

201
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , p , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , p , NUMBER_CONSTANT ) ; }
Distance : 3

202
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , STRING_CONSTANT , MathRuntimeException , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , STRING_CONSTANT , MathRuntimeException , STRING_CONSTANT ) ; }
Distance : 9

203
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException ) ; }
Distance : 5

204
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , STRING_CONSTANT + STRING_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , STRING_CONSTANT + STRING_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , true ) ; }
Distance : 8

205
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , p , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , p , p , p ) ; }
Distance : 5

206
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException , STRING_CONSTANT , MathRuntimeException , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException , STRING_CONSTANT , MathRuntimeException , STRING_CONSTANT ) ; }
Distance : 9

207
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , null ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , null ) ; }
Distance : 2

208
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; }
Distance : 2

209
Tree	MathRuntimeException = new NotStrictlyPositiveException ( MathRuntimeException , NUMBER_CONSTANT , false ) ;
Code	MathRuntimeException = new NotStrictlyPositiveException ( MathRuntimeException , NUMBER_CONSTANT , false ) ;
Distance : 13

210
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 6

211
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( MathRuntimeException ) ; }
Distance : 5

212
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( p , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( p , MathRuntimeException ) ; }
Distance : 5

213
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( MathRuntimeException , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( MathRuntimeException , p ) ; }
Distance : 4

214
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , p , false ) ; }
Distance : 5

215
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , break; ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , break; ) ; }
Distance : 2

216
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , return; ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , return; ) ; }
Distance : 2

217
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , continue; ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , continue; ) ; }
Distance : 2

218
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( p , p ) ; }
Distance : 4

219
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( p ) ; }
Distance : 5

220
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , <= , NUMBER_CONSTANT , MathRuntimeException , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , <= , NUMBER_CONSTANT , MathRuntimeException , NUMBER_CONSTANT ) ; }
Distance : 8

221
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ) ; }
Distance : 9

222
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( null , <= , p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( null , <= , p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 9

223
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException ( p ) ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException ( p ) ) ; }
Distance : 7

224
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException . createIllegalArgumentException ( p ) ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException . createIllegalArgumentException ( p ) ) ; }
Distance : 6

225
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , p ) ; }
Distance : 4

226
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , true , true , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , true , true , true ) ; }
Distance : 6

227
Tree	p = new NotStrictlyPositiveException <> ( p , p , MathRuntimeException ) ;
Code	p = new NotStrictlyPositiveException <> ( p , p , MathRuntimeException ) ;
Distance : 12

228
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , false ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , false ) ; }
Distance : 5

229
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException ) ; }
Distance : 4

230
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , p ) ; } +
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , p ) ; } +
Distance : 2

231
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException . createIllegalArgumentException () ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException . createIllegalArgumentException () ) ; }
Distance : 5

232
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( <= , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( <= , p ) ; }
Distance : 5

233
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false ) ; } v.length
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false ) ; } v.length
Distance : 3

234
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( super(); , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( super(); , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 9

235
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p ) ; }
Distance : 8

236
Tree	p = new NotStrictlyPositiveException < p > ( p , p , MathRuntimeException ) ;
Code	p = new NotStrictlyPositiveException < p > ( p , p , MathRuntimeException ) ;
Distance : 13

237
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 5

238
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , true , false , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , true , false , true ) ; }
Distance : 6

239
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , <= , NUMBER_CONSTANT , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , <= , NUMBER_CONSTANT , true ) ; }
Distance : 6

240
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException . createIllegalArgumentException ( p , p ) ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException . createIllegalArgumentException ( p , p ) ) ; }
Distance : 8

241
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT + STRING_CONSTANT , <= , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT + STRING_CONSTANT , <= , true ) ; }
Distance : 8

242
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , false ) ; }
Distance : 5

243
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , true , true , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , true , true , true ) ; }
Distance : 6

244
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 2

245
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , <= ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , <= ) ; }
Distance : 2

246
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException , MathRuntimeException , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException , MathRuntimeException , p ) ; }
Distance : 5

247
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p , NUMBER_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p , NUMBER_CONSTANT ) ; }
Distance : 8

248
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , MathRuntimeException , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , MathRuntimeException , p ) ; }
Distance : 5

249
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , NUMBER_CONSTANT , true ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , NUMBER_CONSTANT , true ) ; }
Distance : 5

250
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT ) ; }
Distance : 4

251
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , p , p ) ; }
Distance : 7

252
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; }
Distance : 2

253
Tree	if ( p <= NUMBER_CONSTANT ) { throw p . createIllegalArgumentException ( <= , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw p . createIllegalArgumentException ( <= , p ) ; }
Distance : 4

254
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; }
Distance : 2

255
Tree	p = new NotStrictlyPositiveException < p > ( p , p , p ) ;
Code	p = new NotStrictlyPositiveException < p > ( p , p , p ) ;
Distance : 13

256
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; } point
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; } point
Distance : 4

257
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 5

258
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , <= , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , <= , NUMBER_CONSTANT , false ) ; }
Distance : 6

259
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , <= , NUMBER_CONSTANT , true ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , <= , NUMBER_CONSTANT , true ) ; }
Distance : 7

260
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Distance : 3

261
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; } MathArrays
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; } MathArrays
Distance : 3

262
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , true ) ; }
Distance : 6

263
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , p ) ; }
Distance : 1

264
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException , STRING_CONSTANT , p , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException , STRING_CONSTANT , p , STRING_CONSTANT ) ; }
Distance : 9

265
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; }
Distance : 3

266
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT ) ; } k
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT ) ; } k
Distance : 4

267
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( break; , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( break; , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 9

268
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( null , <= , p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , <= , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( null , <= , p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , <= , p ) ; }
Distance : 9

269
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException ) ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException ) ) ; }
Distance : 8

270
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException ( <= , p ) ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException ( <= , p ) ) ; }
Distance : 8

271
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , STRING_CONSTANT , p , STRING_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , STRING_CONSTANT , p , STRING_CONSTANT ) ; }
Distance : 10

272
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; } UnivariateRealFunction
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; } UnivariateRealFunction
Distance : 4

273
Tree	p = new NotStrictlyPositiveException < MathRuntimeException > ( p , p , MathRuntimeException ) ;
Code	p = new NotStrictlyPositiveException < MathRuntimeException > ( p , p , MathRuntimeException ) ;
Distance : 13

274
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , p ) ; }
Distance : 2

275
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException . createIllegalArgumentException () ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException . createIllegalArgumentException () ) ; }
Distance : 6

276
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false ) ; }
Distance : 3

277
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException <> ( p ) ; } super
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException <> ( p ) ; } super
Distance : 4

278
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; } Array2DRowFieldMatrix
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; } Array2DRowFieldMatrix
Distance : 3

279
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , <= , MathRuntimeException , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , <= , MathRuntimeException , p ) ; }
Distance : 5

280
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , STRING_CONSTANT + STRING_CONSTANT , <= , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , STRING_CONSTANT + STRING_CONSTANT , <= , true ) ; }
Distance : 8

281
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Distance : 4

282
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , MathRuntimeException , STRING_CONSTANT , p , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , MathRuntimeException , STRING_CONSTANT , p , STRING_CONSTANT ) ; }
Distance : 9

283
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; }
Distance : 2

284
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , p , NUMBER_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , p , NUMBER_CONSTANT ) ; }
Distance : 4

285
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , p , NUMBER_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , p , NUMBER_CONSTANT , p ) ; }
Distance : 7

286
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p ) ; }
Distance : 5

287
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , NUMBER_CONSTANT ) ; } v.length
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , NUMBER_CONSTANT ) ; } v.length
Distance : 4

288
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p ) ; }
Distance : 7

289
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false , true , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false , true , false ) ; }
Distance : 6

290
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , continue; ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , continue; ) ; }
Distance : 3

291
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException <> ( MathRuntimeException ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException <> ( MathRuntimeException ) ; }
Distance : 5

292
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; } +
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; } +
Distance : 4

293
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , true ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , true ) ; }
Distance : 5

294
Tree	p = new NotStrictlyPositiveException <> ( MathRuntimeException , p , p ) ;
Code	p = new NotStrictlyPositiveException <> ( MathRuntimeException , p , p ) ;
Distance : 12

295
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , p , MathRuntimeException , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , p , MathRuntimeException , p ) ; }
Distance : 7

296
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException , p , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException , p , p , p ) ; }
Distance : 7

297
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT + STRING_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , true ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT + STRING_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , true ) ; }
Distance : 9

298
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , MathRuntimeException , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , MathRuntimeException , NUMBER_CONSTANT ) ; }
Distance : 8

299
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException () ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException () ) ; }
Distance : 4

300
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , p , STRING_CONSTANT , MathRuntimeException , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , p , STRING_CONSTANT , MathRuntimeException , STRING_CONSTANT ) ; }
Distance : 9

301
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p ) ; }
Distance : 5

302
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p , NUMBER_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p , NUMBER_CONSTANT ) ; }
Distance : 8

303
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( p , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( p , MathRuntimeException ) ; }
Distance : 5

304
Tree	p = new NotStrictlyPositiveException < MathRuntimeException > ( p , p , p ) ;
Code	p = new NotStrictlyPositiveException < MathRuntimeException > ( p , p , p ) ;
Distance : 13

305
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , MathRuntimeException ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , MathRuntimeException ) ; }
Distance : 3

306
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; }
Distance : 3

307
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , false , true , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , false , true , true ) ; }
Distance : 6

308
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException ) ; }
Distance : 5

309
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 6

310
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT + STRING_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , false ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT + STRING_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , false ) ; }
Distance : 9

311
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } Override
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } Override
Distance : 4

312
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , <= ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , <= ) ; }
Distance : 3

313
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , MathRuntimeException ) ; }
Distance : 3

314
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , true , false , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , true , false , false ) ; }
Distance : 6

315
Tree	MathRuntimeException = new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , true ) ;
Code	MathRuntimeException = new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , true ) ;
Distance : 13

316
Tree	MathRuntimeException = new NotStrictlyPositiveException < MathRuntimeException > ( p , p , p ) ;
Code	MathRuntimeException = new NotStrictlyPositiveException < MathRuntimeException > ( p , p , p ) ;
Distance : 13

317
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , MathRuntimeException , NUMBER_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , MathRuntimeException , NUMBER_CONSTANT ) ; }
Distance : 5

318
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ) ; }
Distance : 8

319
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , MathRuntimeException , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , MathRuntimeException , NUMBER_CONSTANT ) ; }
Distance : 4

320
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , <= , NUMBER_CONSTANT , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , <= , NUMBER_CONSTANT , true ) ; }
Distance : 6

321
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , NUMBER_CONSTANT ) ; } MathArrays
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , NUMBER_CONSTANT ) ; } MathArrays
Distance : 4

322
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ) ; }
Distance : 8

323
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( MathRuntimeException ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( MathRuntimeException ) ; }
Distance : 6

324
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException ) ; }
Distance : 3

325
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p . createIllegalArgumentException () ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p . createIllegalArgumentException () ) ; }
Distance : 4

326
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; } super
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; } super
Distance : 4

327
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , super(); ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , super(); ) ; }
Distance : 2

328
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , p ) ; }
Distance : 1

329
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , p , MathRuntimeException , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , p , MathRuntimeException , p ) ; }
Distance : 5

330
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException , p , p ) ; }
Distance : 5

331
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , p ) ; }
Distance : 2

332
Tree	p = new NotStrictlyPositiveException <> ( p , MathRuntimeException , p ) ;
Code	p = new NotStrictlyPositiveException <> ( p , MathRuntimeException , p ) ;
Distance : 12

333
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , STRING_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , STRING_CONSTANT ) ; }
Distance : 3

334
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , MathRuntimeException ) ; }
Distance : 4

335
Tree	MathRuntimeException = new NotStrictlyPositiveException < p > ( p , p , p ) ;
Code	MathRuntimeException = new NotStrictlyPositiveException < p > ( p , p , p ) ;
Distance : 13

336
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p . createIllegalArgumentException ( p ) ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p . createIllegalArgumentException ( p ) ) ; }
Distance : 7

337
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , <= ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , <= ) ; }
Distance : 3

338
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , NUMBER_CONSTANT , false ) ; }
Distance : 4

339
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } MathArrays
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; } MathArrays
Distance : 2

340
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } Fraction
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } Fraction
Distance : 4

341
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ) ; }
Distance : 9

342
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 5

343
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( true , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( true , p ) ; }
Distance : 1

344
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , p , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , p , p ) ; }
Distance : 6

345
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , MathRuntimeException , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , MathRuntimeException , false ) ; }
Distance : 5

346
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; } MatrixUtils
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; } MatrixUtils
Distance : 3

347
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT ) ; } nCols
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT ) ; } nCols
Distance : 4

348
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , NUMBER_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , NUMBER_CONSTANT ) ; }
Distance : 4

349
Tree	MathRuntimeException = new NotStrictlyPositiveException <> ( MathRuntimeException , p , p ) ;
Code	MathRuntimeException = new NotStrictlyPositiveException <> ( MathRuntimeException , p , p ) ;
Distance : 13

350
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; } super
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; } super
Distance : 4

351
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , true ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , true ) ; }
Distance : 3

352
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , true ) ; }
Distance : 2

353
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; }
Distance : 2

354
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , STRING_CONSTANT ) ; }
Distance : 2

355
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; } MatrixUtils
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; } MatrixUtils
Distance : 3

356
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 5

357
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException <> ( p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException <> ( p ) ; }
Distance : 4

358
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException , MathRuntimeException , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException , MathRuntimeException , p ) ; }
Distance : 7

359
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException , p ) ; }
Distance : 3

360
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , MathRuntimeException ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , MathRuntimeException ) ; }
Distance : 3

361
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p . createIllegalArgumentException ( MathRuntimeException ) ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p . createIllegalArgumentException ( MathRuntimeException ) ) ; }
Distance : 6

362
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , MathRuntimeException , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , MathRuntimeException , NUMBER_CONSTANT ) ; }
Distance : 8

363
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , <= ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , <= ) ; }
Distance : 2

364
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , super(); ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , super(); ) ; }
Distance : 3

365
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Distance : 3

366
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException ) ; }
Distance : 3

367
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , true ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , true ) ; }
Distance : 3

368
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , break; ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , break; ) ; }
Distance : 2

369
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( MathRuntimeException ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( MathRuntimeException ) ; }
Distance : 6

370
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( p , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < MathRuntimeException > ( p , p ) ; }
Distance : 5

371
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException . createIllegalArgumentException () ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException . createIllegalArgumentException () ) ; }
Distance : 5

372
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , <= , NUMBER_CONSTANT , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , <= , NUMBER_CONSTANT , p ) ; }
Distance : 8

373
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } Array2DRowFieldMatrix
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } Array2DRowFieldMatrix
Distance : 3

374
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , p , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , p , MathRuntimeException ) ; }
Distance : 5

375
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT + STRING_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT + STRING_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , false ) ; }
Distance : 8

376
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException , NUMBER_CONSTANT ) ; }
Distance : 4

377
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , <= , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , <= , p , p ) ; }
Distance : 5

378
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Distance : 2

379
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , p ) ; }
Distance : 1

380
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , continue; ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , continue; ) ; }
Distance : 2

381
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Distance : 3

382
Tree	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException ) ; }
Distance : 5

383
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; } UnivariateRealFunction
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; } UnivariateRealFunction
Distance : 4

384
Tree	p = new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , true ) ; v.length
Code	p = new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , true ) ; v.length
Distance : 12

385
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , super(); ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , super(); ) ; }
Distance : 2

386
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException ) ; }
Distance : 3

387
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p , true ) ; }
Distance : 5

388
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , false ) ; }
Distance : 2

389
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , null ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , null ) ; }
Distance : 3

390
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p , NUMBER_CONSTANT ) ; }
Distance : 7

391
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; } +
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; } +
Distance : 4

392
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ) ; }
Distance : 8

393
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; }
Distance : 3

394
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , false ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , false ) ; }
Distance : 3

395
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false , false , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false , false , false ) ; }
Distance : 6

396
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException , false ) ; }
Distance : 5

397
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , p ) ; }
Distance : 7

398
Tree	if ( p <= NUMBER_CONSTANT ) { throw p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw p . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException ) ; }
Distance : 5

399
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( MathRuntimeException , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( MathRuntimeException , MathRuntimeException ) ; }
Distance : 5

400
Tree	MathRuntimeException = new NotStrictlyPositiveException <> ( p , p , MathRuntimeException ) ;
Code	MathRuntimeException = new NotStrictlyPositiveException <> ( p , p , MathRuntimeException ) ;
Distance : 13

401
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , NUMBER_CONSTANT , false ) ; }
Distance : 6

402
Tree	p = new NotStrictlyPositiveException < MathRuntimeException > ( MathRuntimeException , p , p ) ;
Code	p = new NotStrictlyPositiveException < MathRuntimeException > ( MathRuntimeException , p , p ) ;
Distance : 13

403
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException ) ; }
Distance : 4

404
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , return; ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , return; ) ; }
Distance : 3

405
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException . createIllegalArgumentException () ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException . createIllegalArgumentException () ) ; }
Distance : 6

406
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException <> ( p ) ; } UnivariateRealFunction
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException <> ( p ) ; } UnivariateRealFunction
Distance : 4

407
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( p ) ; } v.length
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException < p > ( p ) ; } v.length
Distance : 5

408
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; } point
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; } point
Distance : 4

409
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } assertEquals
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } assertEquals
Distance : 4

========================================================================


========================================================================
Example Number: 10
Parent Code is: 
{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (16 (36 (214{val=(}) (27 (800{val=a}) (252{val=<=}) (800{val=b})) (215{val=)})) (233{val=?}) (800{val=b}) (226{val=:}) (36 (214{val=(}) (16 (32 (800{val=Float}) (235{val=.}) (802{val=isNaN}) (214{val=(}) (27 (800{val=a}) (200{val=+}) (800{val=b})) (215{val=)})) (233{val=?}) (40{val=Float.NaN}) (226{val=:}) (800{val=b})) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (16 (36 (214{val=(}) (27 (800{val=a}) (252{val=<=}) (800{val=b})) (215{val=)})) (233{val=?}) (800{val=b}) (226{val=:}) (36 (214{val=(}) (16 (32 (800{val=Float}) (235{val=.}) (802{val=isNaN}) (214{val=(}) (27 (800{val=a}) (200{val=+}) (800{val=b})) (215{val=)})) (233{val=?}) (40{val=Float.NaN}) (226{val=:}) (800{val=a})) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/59/parent/src_main_java_org_apache_commons_math_util_FastMath.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 20
Correct
========================================================================
True

0
Tree	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( byte ) isNaN ( ( b ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( byte ) isNaN ( ( b ) b , b ) , b ) ; }
Distance : 17

1
Tree	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( float ) isNaN ( ( b ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( float ) isNaN ( ( b ) b , b ) , b ) ; }
Distance : 17

2
Tree	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( byte ) isNaN ( ( b ) a , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( byte ) isNaN ( ( b ) a , b ) , b ) ; }
Distance : 17

3
Tree	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( int ) isNaN ( ( b ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( int ) isNaN ( ( b ) b , b ) , b ) ; }
Distance : 17

4
Tree	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( float ) isNaN ( ( b ) b , b ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( float ) isNaN ( ( b ) b , b ) , a ) ; }
Distance : 16

5
Tree	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( long ) isNaN ( ( b ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( long ) isNaN ( ( b ) b , b ) , b ) ; }
Distance : 17

6
Tree	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( byte ) isNaN ( ( b ) a , b ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( byte ) isNaN ( ( b ) a , b ) , a ) ; }
Distance : 16

7
Tree	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( double ) isNaN ( ( b ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( double ) isNaN ( ( b ) b , b ) , b ) ; }
Distance : 17

8
Tree	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( byte ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( byte ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

9
Tree	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( byte ) isNaN ( ( b ) b , b ) , a ) ; }
Code	{ return a == NUMBER_CONSTANT ? true : isNaN ( ( byte ) isNaN ( ( b ) b , b ) , a ) ; }
Distance : 16

10
Tree	{ return ( a <= b ) ? b : ( a . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? b : ( a . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 2

11
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 1

12
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Distance : 0

13
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( b + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( b + b ) ? Float.NaN : b ) ; }
Distance : 2

14
Tree	{ return ( a <= a ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= a ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 2

15
Tree	{ return ( b <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( b <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 2

16
Tree	{ return ( a <= b ) ? a : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? a : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 2

17
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : b ) ; }
Distance : 2

18
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( b + b ) ? Float.NaN : a ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( b + b ) ? Float.NaN : a ) ; }
Distance : 1

19
Tree	{ return ( a <= a ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Code	{ return ( a <= a ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Distance : 1

========================================================================


========================================================================
Example Number: 11
Parent Code is: 
return fit ( new Gaussian.Parametric () , guess ) ;
-------------------------------------------------------------------------------
Child code is: 
return fit ( guess ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=fit}) (214{val=(}) (14 (304{val=new}) (43 (40{val=Gaussian.Parametric})) (216{val=()})) (234{val=,}) (800{val=guess}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=fit}) (214{val=(}) (800{val=guess}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/58/parent/src_main_java_org_apache_commons_math_optimization_fitting_GaussianFitter.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 240
Wrong
========================================================================
False

0
Tree	return fit ( null ) ;
Code	return fit ( null ) ;
Distance : 1

1
Tree	return fit . fit ( NUMBER_CONSTANT , boundDifference [ NUMBER_CONSTANT ] ) ;
Code	return fit . fit ( NUMBER_CONSTANT , boundDifference [ NUMBER_CONSTANT ] ) ;
Distance : 8

2
Tree	return fit ( continue; ) ;
Code	return fit ( continue; ) ;
Distance : 1

3
Tree	return fit . fit ( NUMBER_CONSTANT , yA [ NUMBER_CONSTANT ] ) ;
Code	return fit . fit ( NUMBER_CONSTANT , yA [ NUMBER_CONSTANT ] ) ;
Distance : 8

4
Tree	return fit . fit ( NUMBER_CONSTANT , initialNorm [ NUMBER_CONSTANT ] ) ;
Code	return fit . fit ( NUMBER_CONSTANT , initialNorm [ NUMBER_CONSTANT ] ) ;
Distance : 8

5
Tree	return fit . fit ( NUMBER_CONSTANT , currentNeighbourhood [ NUMBER_CONSTANT ] ) ;
Code	return fit . fit ( NUMBER_CONSTANT , currentNeighbourhood [ NUMBER_CONSTANT ] ) ;
Distance : 8

6
Tree	return fit ( new Constant <> ( new ) , guess ) ;
Code	return fit ( new Constant <> ( new ) , guess ) ;
Distance : 7

7
Tree	return fit ( new RandomPivotingStrategy <> ( guess ) , guess ) ;
Code	return fit ( new RandomPivotingStrategy <> ( guess ) , guess ) ;
Distance : 7

8
Tree	return fit ( super(); ) ;
Code	return fit ( super(); ) ;
Distance : 1

9
Tree	return fit . fit ( this . guess ) ; data
Code	return fit . fit ( this . guess ) ; data
Distance : 5

10
Tree	return fit ( new Gaussian.Parametric < ( > ( guess ) , guess ) ; try
Code	return fit ( new Gaussian.Parametric < ( > ( guess ) , guess ) ; try
Distance : 10

11
Tree	return fit . fit ( guess . fit () . guess ) ; void
Code	return fit . fit ( guess . fit () . guess ) ; void
Distance : 8

12
Tree	return fit ( new Gaussian.Parametric < guess > ( guess ) , guess ) ; false
Code	return fit ( new Gaussian.Parametric < guess > ( guess ) , guess ) ; false
Distance : 10

13
Tree	return fit . fit ( new . fit () . guess ) ; Fraction
Code	return fit . fit ( new . fit () . guess ) ; Fraction
Distance : 8

14
Tree	return fit . fit ( this . guess ) ; p
Code	return fit . fit ( this . guess ) ; p
Distance : 5

15
Tree	return fit . fit ( Gaussian.Parametric . fit () . guess ) ; p
Code	return fit . fit ( Gaussian.Parametric . fit () . guess ) ; p
Distance : 8

16
Tree	return fit . fit ( this . Gaussian.Parametric ) ; Fraction
Code	return fit . fit ( this . Gaussian.Parametric ) ; Fraction
Distance : 6

17
Tree	return fit . fit ( ( , guess , guess , new Gaussian.Parametric < ( > ( guess ) ) ;
Code	return fit . fit ( ( , guess , guess , new Gaussian.Parametric < ( > ( guess ) ) ;
Distance : 15

18
Tree	return fit . fit ( this . guess ) ; field
Code	return fit . fit ( this . guess ) ; field
Distance : 5

19
Tree	return fit . fit () . fit ( guess , false , guess ) ; Assert
Code	return fit . fit () . fit ( guess , false , guess ) ; Assert
Distance : 10

20
Tree	return this . Gaussian.Parametric . fit ( new . fit () ) ; try
Code	return this . Gaussian.Parametric . fit ( new . fit () ) ; try
Distance : 9

21
Tree	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , guess ) ;
Code	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , guess ) ;
Distance : 11

22
Tree	return fit . fit ( fit , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Code	return fit . fit ( fit , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Distance : 15

23
Tree	return fit . fit ( fit , STRING_CONSTANT , guess , fit . fit () ) ;
Code	return fit . fit ( fit , STRING_CONSTANT , guess , fit . fit () ) ;
Distance : 11

24
Tree	return fit . fit ( guess . fit () , guess , NUMBER_CONSTANT ) ;
Code	return fit . fit ( guess . fit () , guess , NUMBER_CONSTANT ) ;
Distance : 9

25
Tree	return fit . fit ( fit , guess . fit () , fit ( NUMBER_CONSTANT ) ) ;
Code	return fit . fit ( fit , guess . fit () , fit ( NUMBER_CONSTANT ) ) ;
Distance : 12

26
Tree	return fit ( new Gaussian.Parametric < guess > ( guess ) , guess ) ; Complex
Code	return fit ( new Gaussian.Parametric < guess > ( guess ) , guess ) ; Complex
Distance : 10

27
Tree	return fit . fit ( fit , STRING_CONSTANT , guess , fit . fit () ) ; void
Code	return fit . fit ( fit , STRING_CONSTANT , guess , fit . fit () ) ; void
Distance : 12

28
Tree	return fit . fit ( fit , STRING_CONSTANT , guess , guess . fit () ) ; field
Code	return fit . fit ( fit , STRING_CONSTANT , guess , guess . fit () ) ; field
Distance : 12

29
Tree	return fit . fit ( fit , STRING_CONSTANT , guess , fit . fit () ) ; try
Code	return fit . fit ( fit , STRING_CONSTANT , guess , fit . fit () ) ; try
Distance : 12

30
Tree	return this . Gaussian.Parametric . fit ( Gaussian.Parametric . fit () ) ; data
Code	return this . Gaussian.Parametric . fit ( Gaussian.Parametric . fit () ) ; data
Distance : 9

31
Tree	return fit . fit () . fit ( guess , false , guess ) ; Override
Code	return fit . fit () . fit ( guess , false , guess ) ; Override
Distance : 10

32
Tree	return fit . fit () . fit ( guess , false , guess ) ; Fraction
Code	return fit . fit () . fit ( guess , false , guess ) ; Fraction
Distance : 10

33
Tree	return fit . fit () . fit ( guess , false , guess ) ; assertEquals
Code	return fit . fit () . fit ( guess , false , guess ) ; assertEquals
Distance : 10

34
Tree	return fit . fit ( fit , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; Complex
Code	return fit . fit ( fit , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; Complex
Distance : 13

35
Tree	return fit . fit ( fit , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; try
Code	return fit . fit ( fit , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; try
Distance : 13

36
Tree	return this . Gaussian.Parametric . fit ( guess . fit () ) ; Complex
Code	return this . Gaussian.Parametric . fit ( guess . fit () ) ; Complex
Distance : 8

37
Tree	return fit . fit ( guess . fit () . guess ) ; field
Code	return fit . fit ( guess . fit () . guess ) ; field
Distance : 8

38
Tree	return fit . fit ( fit , STRING_CONSTANT , guess , guess . fit () ) ; Complex
Code	return fit . fit ( fit , STRING_CONSTANT , guess , guess . fit () ) ; Complex
Distance : 12

39
Tree	return fit . fit ( ( . fit () . guess ) ; int
Code	return fit . fit ( ( . fit () . guess ) ; int
Distance : 8

40
Tree	return fit . fit ( new . fit () . guess ) ; try
Code	return fit . fit ( new . fit () . guess ) ; try
Distance : 8

41
Tree	return fit . fit ( new . fit () . guess ) ; Complex
Code	return fit . fit ( new . fit () . guess ) ; Complex
Distance : 8

42
Tree	return fit . fit ( fit , STRING_CONSTANT , guess , guess . fit () ) ; Fraction
Code	return fit . fit ( fit , STRING_CONSTANT , guess , guess . fit () ) ; Fraction
Distance : 12

43
Tree	return fit . fit ( ( . fit () . guess ) ; data
Code	return fit . fit ( ( . fit () . guess ) ; data
Distance : 8

44
Tree	return fit . fit ( fit , STRING_CONSTANT , guess , guess . fit () ) ; p
Code	return fit . fit ( fit , STRING_CONSTANT , guess , guess . fit () ) ; p
Distance : 12

45
Tree	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ;
Code	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ;
Distance : 9

46
Tree	return fit . fit ( fit , STRING_CONSTANT , guess , guess . fit () ) ; int
Code	return fit . fit ( fit , STRING_CONSTANT , guess , guess . fit () ) ; int
Distance : 12

47
Tree	return fit . fit ( fit , STRING_CONSTANT , guess , guess . fit () ) ; false
Code	return fit . fit ( fit , STRING_CONSTANT , guess , guess . fit () ) ; false
Distance : 12

48
Tree	return fit . fit ( Gaussian.Parametric . fit () . guess ) ; false
Code	return fit . fit ( Gaussian.Parametric . fit () . guess ) ; false
Distance : 8

49
Tree	return fit . fit ( new . fit () . guess ) ;
Code	return fit . fit ( new . fit () . guess ) ;
Distance : 7

50
Tree	return fit . fit ( new . fit () , NUMBER_CONSTANT , subMatrix.length ) ;
Code	return fit . fit ( new . fit () , NUMBER_CONSTANT , subMatrix.length ) ;
Distance : 10

51
Tree	return fit ( fit , guess , guess . fit () , fit ( NUMBER_CONSTANT ) ) ;
Code	return fit ( fit , guess , guess . fit () , fit ( NUMBER_CONSTANT ) ) ;
Distance : 12

52
Tree	return fit ( ( ) ;
Code	return fit ( ( ) ;
Distance : 1

53
Tree	return fit . fit ( this . guess ) ;
Code	return fit . fit ( this . guess ) ;
Distance : 4

54
Tree	return fit ( break; ) ;
Code	return fit ( break; ) ;
Distance : 1

55
Tree	return fit ( new Random <> ( ( ) , guess ) ;
Code	return fit ( new Random <> ( ( ) , guess ) ;
Distance : 7

56
Tree	return fit ( new CentralPivotingStrategy <> ( ( ) , guess ) ;
Code	return fit ( new CentralPivotingStrategy <> ( ( ) , guess ) ;
Distance : 7

57
Tree	return fit ( new cov.length <> ( ( ) , guess ) ;
Code	return fit ( new cov.length <> ( ( ) , guess ) ;
Distance : 7

58
Tree	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ;
Code	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ;
Distance : 10

59
Tree	return fit ( new S2Point <> ( ( ) , guess ) ;
Code	return fit ( new S2Point <> ( ( ) , guess ) ;
Distance : 7

60
Tree	return fit ( new Constant < Gaussian.Parametric > ( guess ) , guess ) ;
Code	return fit ( new Constant < Gaussian.Parametric > ( guess ) , guess ) ;
Distance : 9

61
Tree	return fit ( new LocalMeasurement <> ( guess ) , guess ) ;
Code	return fit ( new LocalMeasurement <> ( guess ) , guess ) ;
Distance : 7

62
Tree	return fit . fit ( NUMBER_CONSTANT , partials [ NUMBER_CONSTANT ] ) ;
Code	return fit . fit ( NUMBER_CONSTANT , partials [ NUMBER_CONSTANT ] ) ;
Distance : 8

63
Tree	return fit . fit ( NUMBER_CONSTANT , sh [ NUMBER_CONSTANT ] ) ;
Code	return fit . fit ( NUMBER_CONSTANT , sh [ NUMBER_CONSTANT ] ) ;
Distance : 8

64
Tree	return fit . fit ( NUMBER_CONSTANT , betaVariance [ NUMBER_CONSTANT ] ) ;
Code	return fit . fit ( NUMBER_CONSTANT , betaVariance [ NUMBER_CONSTANT ] ) ;
Distance : 8

65
Tree	return fit . fit ( NUMBER_CONSTANT , changes [ NUMBER_CONSTANT ] ) ;
Code	return fit . fit ( NUMBER_CONSTANT , changes [ NUMBER_CONSTANT ] ) ;
Distance : 8

66
Tree	return fit ( new InputStreamReader <> ( ( ) , guess ) ;
Code	return fit ( new InputStreamReader <> ( ( ) , guess ) ;
Distance : 7

67
Tree	return fit . fit ( NUMBER_CONSTANT , pivotsHeap [ NUMBER_CONSTANT ] ) ;
Code	return fit . fit ( NUMBER_CONSTANT , pivotsHeap [ NUMBER_CONSTANT ] ) ;
Distance : 8

68
Tree	return fit ( new ZigguratNormalizedGaussianSampler <> ( ( ) , guess ) ;
Code	return fit ( new ZigguratNormalizedGaussianSampler <> ( ( ) , guess ) ;
Distance : 7

69
Tree	return fit ( new NordsieckInitializer <> ( ( ) , guess ) ;
Code	return fit ( new NordsieckInitializer <> ( ( ) , guess ) ;
Distance : 7

70
Tree	return fit . fit ( NUMBER_CONSTANT , f.length [ NUMBER_CONSTANT ] ) ;
Code	return fit . fit ( NUMBER_CONSTANT , f.length [ NUMBER_CONSTANT ] ) ;
Distance : 8

71
Tree	return fit . fit ( new , guess . fit () , NUMBER_CONSTANT ) ;
Code	return fit . fit ( new , guess . fit () , NUMBER_CONSTANT ) ;
Distance : 9

72
Tree	return this . Gaussian.Parametric . fit ( Gaussian.Parametric . fit () ) ;
Code	return this . Gaussian.Parametric . fit ( Gaussian.Parametric . fit () ) ;
Distance : 8

73
Tree	return fit . fit () . guess . fit ( byte ) ;
Code	return fit . fit () . guess . fit ( byte ) ;
Distance : 8

74
Tree	return fit . fit ( new . fit () , NUMBER_CONSTANT , getSlopeStdErr ) ;
Code	return fit . fit ( new . fit () , NUMBER_CONSTANT , getSlopeStdErr ) ;
Distance : 10

75
Tree	return fit . fit ( fit , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; p
Code	return fit . fit ( fit , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; p
Distance : 13

76
Tree	return fit . fit ( guess . fit () , NUMBER_CONSTANT , -= ) ;
Code	return fit . fit ( guess . fit () , NUMBER_CONSTANT , -= ) ;
Distance : 9

77
Tree	return fit . fit ( ( . fit () , NUMBER_CONSTANT , >= ) ;
Code	return fit . fit ( ( . fit () , NUMBER_CONSTANT , >= ) ;
Distance : 10

78
Tree	return fit . fit ( new . fit () , NUMBER_CONSTANT , blockColumns ) ;
Code	return fit . fit ( new . fit () , NUMBER_CONSTANT , blockColumns ) ;
Distance : 10

79
Tree	return fit . fit ( ( . fit () , NUMBER_CONSTANT , false ) ;
Code	return fit . fit ( ( . fit () , NUMBER_CONSTANT , false ) ;
Distance : 10

80
Tree	return fit . fit ( new . fit () , NUMBER_CONSTANT , ? ) ;
Code	return fit . fit ( new . fit () , NUMBER_CONSTANT , ? ) ;
Distance : 10

81
Tree	return fit . fit () . fit ( guess , false , guess ) ;
Code	return fit . fit () . fit ( guess , false , guess ) ;
Distance : 9

82
Tree	return fit . fit () . guess . fit ( false ) ;
Code	return fit . fit () . guess . fit ( false ) ;
Distance : 8

83
Tree	return fit . fit ( new . fit () , NUMBER_CONSTANT , null ) ;
Code	return fit . fit ( new . fit () , NUMBER_CONSTANT , null ) ;
Distance : 10

84
Tree	return fit ( new Gaussian.Parametric < ( > ( guess ) , guess ) ;
Code	return fit ( new Gaussian.Parametric < ( > ( guess ) , guess ) ;
Distance : 9

85
Tree	return fit . fit () . guess . fit ( super ) ;
Code	return fit . fit () . guess . fit ( super ) ;
Distance : 8

86
Tree	return fit . fit ( ( . fit () , NUMBER_CONSTANT , true ) ;
Code	return fit . fit ( ( . fit () , NUMBER_CONSTANT , true ) ;
Distance : 10

87
Tree	return fit . fit ( this . guess . Gaussian.Parametric ) ;
Code	return fit . fit ( this . guess . Gaussian.Parametric ) ;
Distance : 6

88
Tree	return fit . fit () . guess . fit ( - ) ;
Code	return fit . fit () . guess . fit ( - ) ;
Distance : 8

89
Tree	return fit . fit () . guess . fit ( double ) ;
Code	return fit . fit () . guess . fit ( double ) ;
Distance : 8

90
Tree	return fit . fit () . guess . fit ( ! ) ;
Code	return fit . fit () . guess . fit ( ! ) ;
Distance : 8

91
Tree	return fit . fit () . guess . fit ( null ) ;
Code	return fit . fit () . guess . fit ( null ) ;
Distance : 8

92
Tree	return fit . fit () . guess . fit ( boolean ) ;
Code	return fit . fit () . guess . fit ( boolean ) ;
Distance : 8

93
Tree	return fit . fit () . fit ( guess , false , guess ) ; field
Code	return fit . fit () . fit ( guess , false , guess ) ; field
Distance : 10

94
Tree	return fit . fit () . fit ( guess , false , guess ) ; k
Code	return fit . fit () . fit ( guess , false , guess ) ; k
Distance : 10

95
Tree	return fit . fit ( new . fit () , guess , NUMBER_CONSTANT ) ; data
Code	return fit . fit ( new . fit () , guess , NUMBER_CONSTANT ) ; data
Distance : 10

96
Tree	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , guess ) ; field
Code	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , guess ) ; field
Distance : 12

97
Tree	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; Fraction
Code	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; Fraction
Distance : 11

98
Tree	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; void
Code	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; void
Distance : 11

99
Tree	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , guess ) ; void
Code	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , guess ) ; void
Distance : 12

100
Tree	return fit . fit ( this . guess . Gaussian.Parametric ) ; try
Code	return fit . fit ( this . guess . Gaussian.Parametric ) ; try
Distance : 7

101
Tree	return fit . fit ( this . guess . Gaussian.Parametric ) ; p
Code	return fit . fit ( this . guess . Gaussian.Parametric ) ; p
Distance : 7

102
Tree	return fit ( new Gaussian.Parametric () , guess ) ;
Code	return fit ( new Gaussian.Parametric () , guess ) ;
Distance : 4

103
Tree	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , guess ) ; Fraction
Code	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , guess ) ; Fraction
Distance : 12

104
Tree	return fit . fit ( new , guess , guess , new fit < guess > ( guess ) ) ; try
Code	return fit . fit ( new , guess , guess , new fit < guess > ( guess ) ) ; try
Distance : 16

105
Tree	return fit . fit ( ( , guess , guess , new fit < ( > ( guess ) ) ; false
Code	return fit . fit ( ( , guess , guess , new fit < ( > ( guess ) ) ; false
Distance : 16

106
Tree	return fit . fit ( this . guess . Gaussian.Parametric ) ; void
Code	return fit . fit ( this . guess . Gaussian.Parametric ) ; void
Distance : 7

107
Tree	return fit . fit ( ( , guess , guess , new Gaussian.Parametric < ( > ( guess ) ) ; field
Code	return fit . fit ( ( , guess , guess , new Gaussian.Parametric < ( > ( guess ) ) ; field
Distance : 16

108
Tree	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; p
Code	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; p
Distance : 11

109
Tree	return fit . fit ( new , guess , guess , new fit < guess > ( guess ) ) ; data
Code	return fit . fit ( new , guess , guess , new fit < guess > ( guess ) ) ; data
Distance : 16

110
Tree	return fit . fit ( Gaussian.Parametric , guess , guess , new fit < ( > ( guess ) ) ; Complex
Code	return fit . fit ( Gaussian.Parametric , guess , guess , new fit < ( > ( guess ) ) ; Complex
Distance : 16

111
Tree	return fit . fit ( new . fit () , guess , NUMBER_CONSTANT ) ; int
Code	return fit . fit ( new . fit () , guess , NUMBER_CONSTANT ) ; int
Distance : 10

112
Tree	return fit . fit ( new , guess . fit () , NUMBER_CONSTANT ) ; Fraction
Code	return fit . fit ( new , guess . fit () , NUMBER_CONSTANT ) ; Fraction
Distance : 10

113
Tree	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; Complex
Code	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; Complex
Distance : 10

114
Tree	return fit . fit ( Gaussian.Parametric . fit () , guess , NUMBER_CONSTANT ) ; void
Code	return fit . fit ( Gaussian.Parametric . fit () , guess , NUMBER_CONSTANT ) ; void
Distance : 10

115
Tree	return fit . fit ( ( . fit () , guess , NUMBER_CONSTANT ) ; p
Code	return fit . fit ( ( . fit () , guess , NUMBER_CONSTANT ) ; p
Distance : 10

116
Tree	return fit . fit ( new . fit () , guess , NUMBER_CONSTANT ) ; Fraction
Code	return fit . fit ( new . fit () , guess , NUMBER_CONSTANT ) ; Fraction
Distance : 10

117
Tree	return fit . fit ( guess , guess . fit () , NUMBER_CONSTANT ) ; Complex
Code	return fit . fit ( guess , guess . fit () , NUMBER_CONSTANT ) ; Complex
Distance : 10

118
Tree	return fit . fit ( new , guess . fit () , NUMBER_CONSTANT ) ; false
Code	return fit . fit ( new , guess . fit () , NUMBER_CONSTANT ) ; false
Distance : 10

119
Tree	return fit . fit ( new . fit () , guess , NUMBER_CONSTANT ) ; false
Code	return fit . fit ( new . fit () , guess , NUMBER_CONSTANT ) ; false
Distance : 10

120
Tree	return fit . fit ( new , guess . fit () , NUMBER_CONSTANT ) ; p
Code	return fit . fit ( new , guess . fit () , NUMBER_CONSTANT ) ; p
Distance : 10

121
Tree	return fit . fit ( ( , guess . fit () , NUMBER_CONSTANT ) ; int
Code	return fit . fit ( ( , guess . fit () , NUMBER_CONSTANT ) ; int
Distance : 10

122
Tree	return fit . fit ( new , guess . fit () , NUMBER_CONSTANT ) ; data
Code	return fit . fit ( new , guess . fit () , NUMBER_CONSTANT ) ; data
Distance : 10

123
Tree	return fit . fit ( new , guess . fit () , NUMBER_CONSTANT ) ; void
Code	return fit . fit ( new , guess . fit () , NUMBER_CONSTANT ) ; void
Distance : 10

124
Tree	return fit . fit ( new . fit () , guess , NUMBER_CONSTANT ) ; try
Code	return fit . fit ( new . fit () , guess , NUMBER_CONSTANT ) ; try
Distance : 10

125
Tree	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; false
Code	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; false
Distance : 10

126
Tree	return fit ( fit , guess , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; field
Code	return fit ( fit , guess , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; field
Distance : 13

127
Tree	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; try
Code	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; try
Distance : 10

128
Tree	return fit . fit ( guess , guess . fit () , NUMBER_CONSTANT ) ; field
Code	return fit . fit ( guess , guess . fit () , NUMBER_CONSTANT ) ; field
Distance : 10

129
Tree	return fit . fit ( this . guess . Gaussian.Parametric ) ; data
Code	return fit . fit ( this . guess . Gaussian.Parametric ) ; data
Distance : 7

130
Tree	return fit . fit ( guess , guess , guess , new fit < ( > ( guess ) ) ; p
Code	return fit . fit ( guess , guess , guess , new fit < ( > ( guess ) ) ; p
Distance : 16

131
Tree	return fit . fit ( this . Gaussian.Parametric . Gaussian.Parametric ) ; int
Code	return fit . fit ( this . Gaussian.Parametric . Gaussian.Parametric ) ; int
Distance : 8

132
Tree	return fit ( null ) ; point
Code	return fit ( null ) ; point
Distance : 2

133
Tree	return fit ( ( . fit () , STRING_CONSTANT , guess ) ; Complex
Code	return fit ( ( . fit () , STRING_CONSTANT , guess ) ; Complex
Distance : 8

134
Tree	return fit ( fit , guess , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; Fraction
Code	return fit ( fit , guess , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; Fraction
Distance : 13

135
Tree	return fit ( null ) ; UnivariateRealFunction
Code	return fit ( null ) ; UnivariateRealFunction
Distance : 2

136
Tree	return fit ( fit , guess , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; p
Code	return fit ( fit , guess , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; p
Distance : 13

137
Tree	return fit ( null ) ; n
Code	return fit ( null ) ; n
Distance : 2

138
Tree	return fit ( new . fit () , STRING_CONSTANT , guess ) ; try
Code	return fit ( new . fit () , STRING_CONSTANT , guess ) ; try
Distance : 8

139
Tree	return fit ( new Gaussian.Parametric () , guess ) ; p
Code	return fit ( new Gaussian.Parametric () , guess ) ; p
Distance : 5

140
Tree	return fit ( new Gaussian.Parametric () , guess ) ; try
Code	return fit ( new Gaussian.Parametric () , guess ) ; try
Distance : 5

141
Tree	return fit ( new Gaussian.Parametric () , guess ) ; false
Code	return fit ( new Gaussian.Parametric () , guess ) ; false
Distance : 5

142
Tree	return fit ( new Gaussian.Parametric () , guess ) ; int
Code	return fit ( new Gaussian.Parametric () , guess ) ; int
Distance : 5

143
Tree	return fit ( new Gaussian.Parametric () , guess ) ; field
Code	return fit ( new Gaussian.Parametric () , guess ) ; field
Distance : 5

144
Tree	return fit ( new Gaussian.Parametric () , guess ) ; data
Code	return fit ( new Gaussian.Parametric () , guess ) ; data
Distance : 5

145
Tree	return fit ( new Gaussian.Parametric () , guess ) ; void
Code	return fit ( new Gaussian.Parametric () , guess ) ; void
Distance : 5

146
Tree	return fit ( new Gaussian.Parametric () , guess ) ; Complex
Code	return fit ( new Gaussian.Parametric () , guess ) ; Complex
Distance : 5

147
Tree	return fit . fit ( this . guess . Gaussian.Parametric ) ; field
Code	return fit . fit ( this . guess . Gaussian.Parametric ) ; field
Distance : 7

148
Tree	return fit ( new . fit () , STRING_CONSTANT , guess ) ; data
Code	return fit ( new . fit () , STRING_CONSTANT , guess ) ; data
Distance : 8

149
Tree	return fit ( ( . fit () , STRING_CONSTANT , guess ) ; field
Code	return fit ( ( . fit () , STRING_CONSTANT , guess ) ; field
Distance : 8

150
Tree	return fit ( fit , guess , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; int
Code	return fit ( fit , guess , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; int
Distance : 13

151
Tree	return fit ( fit , guess , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; Complex
Code	return fit ( fit , guess , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; Complex
Distance : 13

152
Tree	return fit ( fit , guess , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; data
Code	return fit ( fit , guess , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; data
Distance : 13

153
Tree	return fit ( new . fit () , STRING_CONSTANT , guess ) ; false
Code	return fit ( new . fit () , STRING_CONSTANT , guess ) ; false
Distance : 8

154
Tree	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , guess ) ; try
Code	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , guess ) ; try
Distance : 12

155
Tree	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , guess ) ; Complex
Code	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , guess ) ; Complex
Distance : 12

156
Tree	return fit ( new . fit () , STRING_CONSTANT , guess ) ; Fraction
Code	return fit ( new . fit () , STRING_CONSTANT , guess ) ; Fraction
Distance : 8

157
Tree	return fit ( ( . fit () , STRING_CONSTANT , guess ) ; int
Code	return fit ( ( . fit () , STRING_CONSTANT , guess ) ; int
Distance : 8

158
Tree	return fit ( new . fit () , STRING_CONSTANT , guess ) ; p
Code	return fit ( new . fit () , STRING_CONSTANT , guess ) ; p
Distance : 8

159
Tree	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; Complex
Code	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; Complex
Distance : 11

160
Tree	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; try
Code	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; try
Distance : 11

161
Tree	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; false
Code	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; false
Distance : 11

162
Tree	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; int
Code	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; int
Distance : 11

163
Tree	return fit ( new . fit () , STRING_CONSTANT , guess ) ; void
Code	return fit ( new . fit () , STRING_CONSTANT , guess ) ; void
Distance : 8

164
Tree	return fit . fit ( new , guess , guess , new Gaussian.Parametric < fit > ( guess ) ) ; Fraction
Code	return fit . fit ( new , guess , guess , new Gaussian.Parametric < fit > ( guess ) ) ; Fraction
Distance : 16

165
Tree	return fit . fit ( ( . fit () , guess , NUMBER_CONSTANT ) ; field
Code	return fit . fit ( ( . fit () , guess , NUMBER_CONSTANT ) ; field
Distance : 10

166
Tree	return fit . fit ( new . fit () , NUMBER_CONSTANT , RotationConvention.FRAME_TRANSFORM ) ;
Code	return fit . fit ( new . fit () , NUMBER_CONSTANT , RotationConvention.FRAME_TRANSFORM ) ;
Distance : 10

167
Tree	return fit . fit () . fit ( guess , true , guess ) ;
Code	return fit . fit () . fit ( guess , true , guess ) ;
Distance : 9

168
Tree	return fit . fit ( ( , guess . fit () , NUMBER_CONSTANT ) ; try
Code	return fit . fit ( ( , guess . fit () , NUMBER_CONSTANT ) ; try
Distance : 10

169
Tree	return fit ( new Gaussian.Parametric () , guess ) ; Fraction
Code	return fit ( new Gaussian.Parametric () , guess ) ; Fraction
Distance : 5

170
Tree	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , guess ) ; data
Code	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , guess ) ; data
Distance : 12

171
Tree	return fit ( new RandomPivotingStrategy < guess > ( guess ) , guess ) ;
Code	return fit ( new RandomPivotingStrategy < guess > ( guess ) , guess ) ;
Distance : 9

172
Tree	return fit . fit ( guess . fit () , guess , NUMBER_CONSTANT ) ; Complex
Code	return fit . fit ( guess . fit () , guess , NUMBER_CONSTANT ) ; Complex
Distance : 10

173
Tree	return fit . fit ( this . guess ) ; int
Code	return fit . fit ( this . guess ) ; int
Distance : 5

174
Tree	return fit ( null ) ; Math
Code	return fit ( null ) ; Math
Distance : 2

175
Tree	return fit ( return; ) ;
Code	return fit ( return; ) ;
Distance : 1

176
Tree	return fit . fit ( fit , STRING_CONSTANT , guess , fit . fit () ) ; data
Code	return fit . fit ( fit , STRING_CONSTANT , guess , fit . fit () ) ; data
Distance : 12

177
Tree	return fit . fit () . guess . fit ( true ) ;
Code	return fit . fit () . guess . fit ( true ) ;
Distance : 8

178
Tree	return fit ( new NordsieckInitializer < guess > ( guess ) , guess ) ;
Code	return fit ( new NordsieckInitializer < guess > ( guess ) , guess ) ;
Distance : 9

179
Tree	return fit ( ( . fit () , STRING_CONSTANT , guess ) ;
Code	return fit ( ( . fit () , STRING_CONSTANT , guess ) ;
Distance : 7

180
Tree	return fit ( new ZigguratNormalizedGaussianSampler < ( > ( guess ) , guess ) ;
Code	return fit ( new ZigguratNormalizedGaussianSampler < ( > ( guess ) , guess ) ;
Distance : 9

181
Tree	return fit ( new InputStreamReader < guess > ( guess ) , guess ) ;
Code	return fit ( new InputStreamReader < guess > ( guess ) , guess ) ;
Distance : 9

182
Tree	return fit ( new S2Point < fit > ( guess ) , guess ) ;
Code	return fit ( new S2Point < fit > ( guess ) , guess ) ;
Distance : 9

183
Tree	return fit ( new LocalMeasurement < ( > ( guess ) , guess ) ;
Code	return fit ( new LocalMeasurement < ( > ( guess ) , guess ) ;
Distance : 9

184
Tree	return fit ( new cov.length < Gaussian.Parametric > ( guess ) , guess ) ;
Code	return fit ( new cov.length < Gaussian.Parametric > ( guess ) , guess ) ;
Distance : 9

185
Tree	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , guess ) ; p
Code	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , guess ) ; p
Distance : 12

186
Tree	return fit ( new CentralPivotingStrategy < guess > ( guess ) , guess ) ;
Code	return fit ( new CentralPivotingStrategy < guess > ( guess ) , guess ) ;
Distance : 9

187
Tree	return this . Gaussian.Parametric . fit ( ( . fit () ) ; false
Code	return this . Gaussian.Parametric . fit ( ( . fit () ) ; false
Distance : 9

188
Tree	return fit ( fit , guess , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; void
Code	return fit ( fit , guess , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; void
Distance : 13

189
Tree	return fit . fit ( fit , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; int
Code	return fit . fit ( fit , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; int
Distance : 13

190
Tree	return this . fit . fit ( ( . fit () ) ; void
Code	return this . fit . fit ( ( . fit () ) ; void
Distance : 9

191
Tree	return fit ( new Random < fit > ( guess ) , guess ) ;
Code	return fit ( new Random < fit > ( guess ) , guess ) ;
Distance : 9

192
Tree	return fit . fit ( fit , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; void
Code	return fit . fit ( fit , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; void
Distance : 16

193
Tree	return this . Gaussian.Parametric . fit ( guess . fit () ) ; p
Code	return this . Gaussian.Parametric . fit ( guess . fit () ) ; p
Distance : 8

194
Tree	return this . Gaussian.Parametric . fit ( guess . fit () ) ; Fraction
Code	return this . Gaussian.Parametric . fit ( guess . fit () ) ; Fraction
Distance : 8

195
Tree	return fit . fit () . fit ( guess , false , guess ) ; nCols
Code	return fit . fit () . fit ( guess , false , guess ) ; nCols
Distance : 10

196
Tree	return fit . fit ( fit , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; data
Code	return fit . fit ( fit , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; data
Distance : 13

197
Tree	return fit . fit ( fit , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; field
Code	return fit . fit ( fit , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; field
Distance : 13

198
Tree	return fit . fit ( fit , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; false
Code	return fit . fit ( fit , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; false
Distance : 13

199
Tree	return fit . fit ( this . guess . Gaussian.Parametric ) ; false
Code	return fit . fit ( this . guess . Gaussian.Parametric ) ; false
Distance : 7

200
Tree	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , guess ) ; int
Code	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , guess ) ; int
Distance : 12

201
Tree	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; int
Code	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; int
Distance : 10

202
Tree	return fit ( fit , guess , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; false
Code	return fit ( fit , guess , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; false
Distance : 13

203
Tree	return fit ( ( , guess , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; try
Code	return fit ( ( , guess , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; try
Distance : 13

204
Tree	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , guess ) ; false
Code	return fit . fit ( STRING_CONSTANT , guess . fit () , guess , guess ) ; false
Distance : 12

205
Tree	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; Fraction
Code	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; Fraction
Distance : 10

206
Tree	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; p
Code	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; p
Distance : 10

207
Tree	return fit . fit ( this . guess ) ; void
Code	return fit . fit ( this . guess ) ; void
Distance : 5

208
Tree	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; void
Code	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; void
Distance : 10

209
Tree	return fit . fit ( fit , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; void
Code	return fit . fit ( fit , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; void
Distance : 13

210
Tree	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; data
Code	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; data
Distance : 10

211
Tree	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; field
Code	return fit . fit ( NUMBER_CONSTANT , guess . fit () , guess ) ; field
Distance : 10

212
Tree	return fit ( new Gaussian.Parametric < Gaussian.Parametric > ( guess ) , guess ) ; int
Code	return fit ( new Gaussian.Parametric < Gaussian.Parametric > ( guess ) , guess ) ; int
Distance : 10

213
Tree	return fit . fit ( Gaussian.Parametric , guess , guess , new fit < ( > ( guess ) ) ; int
Code	return fit . fit ( Gaussian.Parametric , guess , guess , new fit < ( > ( guess ) ) ; int
Distance : 16

214
Tree	return fit ( new Gaussian.Parametric < guess > ( guess ) , guess ) ; field
Code	return fit ( new Gaussian.Parametric < guess > ( guess ) , guess ) ; field
Distance : 10

215
Tree	return fit . fit ( this . guess ) ; false
Code	return fit . fit ( this . guess ) ; false
Distance : 5

216
Tree	return fit . fit ( this . guess ) ; try
Code	return fit . fit ( this . guess ) ; try
Distance : 5

217
Tree	return fit . fit ( this . guess ) ; Complex
Code	return fit . fit ( this . guess ) ; Complex
Distance : 5

218
Tree	return fit . fit () . guess . fit ( float ) ;
Code	return fit . fit () . guess . fit ( float ) ;
Distance : 8

219
Tree	return this . Gaussian.Parametric . fit ( Gaussian.Parametric . fit () ) ; int
Code	return this . Gaussian.Parametric . fit ( Gaussian.Parametric . fit () ) ; int
Distance : 9

220
Tree	return fit ( new Gaussian.Parametric < ( > ( guess ) , guess ) ; data
Code	return fit ( new Gaussian.Parametric < ( > ( guess ) , guess ) ; data
Distance : 10

221
Tree	return fit . fit ( fit , STRING_CONSTANT , guess , fit . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; Fraction
Code	return fit . fit ( fit , STRING_CONSTANT , guess , fit . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; Fraction
Distance : 16

222
Tree	return fit . fit ( fit , STRING_CONSTANT , guess , return . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; int
Code	return fit . fit ( fit , STRING_CONSTANT , guess , return . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; int
Distance : 16

223
Tree	return fit . fit ( fit , STRING_CONSTANT , guess , ) . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; false
Code	return fit . fit ( fit , STRING_CONSTANT , guess , ) . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; false
Distance : 16

224
Tree	return fit . fit ( fit , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; try
Code	return fit . fit ( fit , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; try
Distance : 16

225
Tree	return fit . fit ( fit , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; Complex
Code	return fit . fit ( fit , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; Complex
Distance : 16

226
Tree	return fit . fit () . fit ( guess , false , guess ) ; void
Code	return fit . fit () . fit ( guess , false , guess ) ; void
Distance : 10

227
Tree	return fit . fit ( fit , STRING_CONSTANT , guess , fit . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; p
Code	return fit . fit ( fit , STRING_CONSTANT , guess , fit . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; p
Distance : 16

228
Tree	return fit . fit ( this . guess . Gaussian.Parametric ) ; Fraction
Code	return fit . fit ( this . guess . Gaussian.Parametric ) ; Fraction
Distance : 7

229
Tree	return fit . fit ( fit , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; data
Code	return fit . fit ( fit , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; data
Distance : 16

230
Tree	return fit . fit ( fit , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; Fraction
Code	return fit . fit ( fit , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; Fraction
Distance : 13

231
Tree	return this . ( . fit ( guess . fit () ) ; field
Code	return this . ( . fit ( guess . fit () ) ; field
Distance : 8

232
Tree	return fit . fit ( fit , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; field
Code	return fit . fit ( fit , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; field
Distance : 16

233
Tree	return fit . fit ( this . guess . Gaussian.Parametric ) ; Complex
Code	return fit . fit ( this . guess . Gaussian.Parametric ) ; Complex
Distance : 7

234
Tree	return fit . fit ( Gaussian.Parametric , guess , guess , new fit < ( > ( guess ) ) ; void
Code	return fit . fit ( Gaussian.Parametric , guess , guess , new fit < ( > ( guess ) ) ; void
Distance : 16

235
Tree	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; data
Code	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; data
Distance : 11

236
Tree	return fit ( new Gaussian.Parametric < fit > ( guess ) , guess ) ; void
Code	return fit ( new Gaussian.Parametric < fit > ( guess ) , guess ) ; void
Distance : 10

237
Tree	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; field
Code	return fit ( STRING_CONSTANT , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; field
Distance : 11

238
Tree	return fit ( new Gaussian.Parametric < fit > ( ( ) , guess ) ; p
Code	return fit ( new Gaussian.Parametric < fit > ( ( ) , guess ) ; p
Distance : 10

239
Tree	return fit ( new Gaussian.Parametric < fit > ( guess ) , guess ) ; Fraction
Code	return fit ( new Gaussian.Parametric < fit > ( guess ) , guess ) ; Fraction
Distance : 10

========================================================================


========================================================================
Example Number: 12
Parent Code is: 
int sum = NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Child code is: 
double sum = NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=sum}) (204{val==}) (34{val=NUMBER_CONSTANT})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=double}) (59 (800{val=sum}) (204{val==}) (34{val=NUMBER_CONSTANT})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/57/parent/src_main_java_org_apache_commons_math_stat_clustering_KMeansPlusPlusClusterer.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 310
Correct
========================================================================
True

0
Tree	int sum ;
Code	int sum ;
Distance : 3

1
Tree	int sum = NUMBER_CONSTANT ;
Code	int sum = NUMBER_CONSTANT ;
Distance : 1

2
Tree	int sum = isNonSingular () ;
Code	int sum = isNonSingular () ;
Distance : 3

3
Tree	int sum = Coordinates3D.NEGATIVE_INFINITY ;
Code	int sum = Coordinates3D.NEGATIVE_INFINITY ;
Distance : 2

4
Tree	float sum = ( sum ) sum ;
Code	float sum = ( sum ) sum ;
Distance : 5

5
Tree	int sum = sum + NUMBER_CONSTANT ;
Code	int sum = sum + NUMBER_CONSTANT ;
Distance : 3

6
Tree	long sum = sum ;
Code	long sum = sum ;
Distance : 2

7
Tree	long sum = false ;
Code	long sum = false ;
Distance : 2

8
Tree	int sum = Coordinates3D.NEGATIVE_INFINITY () ;
Code	int sum = Coordinates3D.NEGATIVE_INFINITY () ;
Distance : 3

9
Tree	int sum = Coordinates3D.NaN () ;
Code	int sum = Coordinates3D.NaN () ;
Distance : 3

10
Tree	long sum ;
Code	long sum ;
Distance : 3

11
Tree	int sum ; MathArrays
Code	int sum ; MathArrays
Distance : 4

12
Tree	final int sum = getSampleSize () ;
Code	final int sum = getSampleSize () ;
Distance : 4

13
Tree	final int sum = getClass () ;
Code	final int sum = getClass () ;
Distance : 4

14
Tree	int sum ; v.length
Code	int sum ; v.length
Distance : 4

15
Tree	boolean sum = sum ;
Code	boolean sum = sum ;
Distance : 2

16
Tree	int sum = ( sum ) sum ;
Code	int sum = ( sum ) sum ;
Distance : 5

17
Tree	int sum = null ;
Code	int sum = null ;
Distance : 2

18
Tree	double sum = NUMBER_CONSTANT ;
Code	double sum = NUMBER_CONSTANT ;
Distance : 0

19
Tree	long sum = NUMBER_CONSTANT ;
Code	long sum = NUMBER_CONSTANT ;
Distance : 1

20
Tree	float sum = this . sum . sum ;
Code	float sum = this . sum . sum ;
Distance : 6

21
Tree	int sum [] = iterator () ;
Code	int sum [] = iterator () ;
Distance : 4

22
Tree	boolean sum = this . sum . sum ;
Code	boolean sum = this . sum . sum ;
Distance : 6

23
Tree	final int sum ;
Code	final int sum ;
Distance : 4

24
Tree	int sum = this . sum ;
Code	int sum = this . sum ;
Distance : 4

25
Tree	int sum = iterator () ;
Code	int sum = iterator () ;
Distance : 3

26
Tree	double sum ;
Code	double sum ;
Distance : 2

27
Tree	int sum = missingEntries ;
Code	int sum = missingEntries ;
Distance : 2

28
Tree	final void sum ;
Code	final void sum ;
Distance : 4

29
Tree	int sum = true ;
Code	int sum = true ;
Distance : 2

30
Tree	byte sum = NUMBER_CONSTANT ;
Code	byte sum = NUMBER_CONSTANT ;
Distance : 1

31
Tree	int sum = null ;
Code	int sum = null ;
Distance : 2

32
Tree	int sum = getKthSelector () - NUMBER_CONSTANT ;
Code	int sum = getKthSelector () - NUMBER_CONSTANT ;
Distance : 4

33
Tree	int sum = Coordinates3D.NaN () . sum ;
Code	int sum = Coordinates3D.NaN () . sum ;
Distance : 5

34
Tree	int sum = getRSquare () ;
Code	int sum = getRSquare () ;
Distance : 3

35
Tree	float sum = sum ;
Code	float sum = sum ;
Distance : 2

36
Tree	final int sum = NUMBER_CONSTANT ;
Code	final int sum = NUMBER_CONSTANT ;
Distance : 2

37
Tree	int sum = STRING_CONSTANT + sum ;
Code	int sum = STRING_CONSTANT + sum ;
Distance : 4

38
Tree	abstract int sum ;
Code	abstract int sum ;
Distance : 4

39
Tree	int += ;
Code	int += ;
Distance : 4

40
Tree	byte sum = this . sum . sum ;
Code	byte sum = this . sum . sum ;
Distance : 6

41
Tree	int sum = STRING_CONSTANT + sum ; v.length
Code	int sum = STRING_CONSTANT + sum ; v.length
Distance : 5

42
Tree	final long sum ;
Code	final long sum ;
Distance : 4

43
Tree	int sum = sum ? LocalizedFormats.NUMBER_TOO_SMALL : Double.MIN_VALUE ;
Code	int sum = sum ? LocalizedFormats.NUMBER_TOO_SMALL : Double.MIN_VALUE ;
Distance : 6

44
Tree	long sum = NUMBER_CONSTANT ;
Code	long sum = NUMBER_CONSTANT ;
Distance : 1

45
Tree	int sum = ( sum - NUMBER_CONSTANT ) ? null : scale.length ;
Code	int sum = ( sum - NUMBER_CONSTANT ) ? null : scale.length ;
Distance : 9

46
Tree	long sum = sum + NUMBER_CONSTANT ;
Code	long sum = sum + NUMBER_CONSTANT ;
Distance : 3

47
Tree	byte sum = NUMBER_CONSTANT ;
Code	byte sum = NUMBER_CONSTANT ;
Distance : 1

48
Tree	int sum = floor () . sum ;
Code	int sum = floor () . sum ;
Distance : 5

49
Tree	int sum = sum ? sample2.length : FastMath.PI ;
Code	int sum = sum ? sample2.length : FastMath.PI ;
Distance : 6

50
Tree	long sum = null ;
Code	long sum = null ;
Distance : 2

51
Tree	final void sum = NUMBER_CONSTANT ;
Code	final void sum = NUMBER_CONSTANT ;
Distance : 2

52
Tree	int sum = new ArrayList () ;
Code	int sum = new ArrayList () ;
Distance : 4

53
Tree	long sum = true ;
Code	long sum = true ;
Distance : 2

54
Tree	int sum = PivotSelectionRule.DANTZIG ;
Code	int sum = PivotSelectionRule.DANTZIG ;
Distance : 2

55
Tree	int sum = sum + NUMBER_CONSTANT ;
Code	int sum = sum + NUMBER_CONSTANT ;
Distance : 3

56
Tree	int extends ;
Code	int extends ;
Distance : 4

57
Tree	int sum = this . sum ; MathArrays
Code	int sum = this . sum ; MathArrays
Distance : 5

58
Tree	int sum = Coordinates3D.NEGATIVE_INFINITY () . sum ;
Code	int sum = Coordinates3D.NEGATIVE_INFINITY () . sum ;
Distance : 5

59
Tree	int sum = false ;
Code	int sum = false ;
Distance : 2

60
Tree	int sum = Coordinates3D.POSITIVE_INFINITY ;
Code	int sum = Coordinates3D.POSITIVE_INFINITY ;
Distance : 2

61
Tree	int sum = sum + NUMBER_CONSTANT ; MathArrays
Code	int sum = sum + NUMBER_CONSTANT ; MathArrays
Distance : 4

62
Tree	int sum = sum ? Integer.MIN_VALUE : Double.NaN ;
Code	int sum = sum ? Integer.MIN_VALUE : Double.NaN ;
Distance : 6

63
Tree	int sum = ( sum - NUMBER_CONSTANT ) ? null : Precision.EPSILON ;
Code	int sum = ( sum - NUMBER_CONSTANT ) ? null : Precision.EPSILON ;
Distance : 9

64
Tree	byte sum = sum + NUMBER_CONSTANT ;
Code	byte sum = sum + NUMBER_CONSTANT ;
Distance : 3

65
Tree	int sum = logGamma () - NUMBER_CONSTANT ;
Code	int sum = logGamma () - NUMBER_CONSTANT ;
Distance : 4

66
Tree	int sum = sum ; MathArrays
Code	int sum = sum ; MathArrays
Distance : 3

67
Tree	int sum = ( sum - NUMBER_CONSTANT ) ? null : FastMath.PI ;
Code	int sum = ( sum - NUMBER_CONSTANT ) ? null : FastMath.PI ;
Distance : 9

68
Tree	int sum = isNonSingular () - NUMBER_CONSTANT ;
Code	int sum = isNonSingular () - NUMBER_CONSTANT ;
Distance : 4

69
Tree	abstract int [] [] sum ;
Code	abstract int [] [] sum ;
Distance : 5

70
Tree	long sum = STRING_CONSTANT + sum ;
Code	long sum = STRING_CONSTANT + sum ;
Distance : 4

71
Tree	byte sum = STRING_CONSTANT + sum ;
Code	byte sum = STRING_CONSTANT + sum ;
Distance : 4

72
Tree	void sum = sum + NUMBER_CONSTANT ;
Code	void sum = sum + NUMBER_CONSTANT ;
Distance : 3

73
Tree	int sum = NUMBER_CONSTANT * Double.NaN ;
Code	int sum = NUMBER_CONSTANT * Double.NaN ;
Distance : 3

74
Tree	int sum = getRSquare () - NUMBER_CONSTANT ;
Code	int sum = getRSquare () - NUMBER_CONSTANT ;
Distance : 4

75
Tree	long int ;
Code	long int ;
Distance : 4

76
Tree	int sum = false ;
Code	int sum = false ;
Distance : 2

77
Tree	int sum = true ;
Code	int sum = true ;
Distance : 2

78
Tree	int sum = NUMBER_CONSTANT * Coordinates3D.POSITIVE_INFINITY ;
Code	int sum = NUMBER_CONSTANT * Coordinates3D.POSITIVE_INFINITY ;
Distance : 3

79
Tree	long sum = true ;
Code	long sum = true ;
Distance : 2

80
Tree	double sum = true ;
Code	double sum = true ;
Distance : 1

81
Tree	int sum = false ;
Code	int sum = false ;
Distance : 2

82
Tree	double sum = this . sum ;
Code	double sum = this . sum ;
Distance : 3

83
Tree	double += ;
Code	double += ;
Distance : 3

84
Tree	int sum = ( sum - NUMBER_CONSTANT ) ? null : line.originOffset ;
Code	int sum = ( sum - NUMBER_CONSTANT ) ? null : line.originOffset ;
Distance : 9

85
Tree	int sum = null ;
Code	int sum = null ;
Distance : 2

86
Tree	long sum = null ;
Code	long sum = null ;
Distance : 2

87
Tree	byte sum = sum ;
Code	byte sum = sum ;
Distance : 2

88
Tree	int sum = getSampleSize () . sum ;
Code	int sum = getSampleSize () . sum ;
Distance : 5

89
Tree	long sum = null ;
Code	long sum = null ;
Distance : 2

90
Tree	int sum = ! ;
Code	int sum = ! ;
Distance : 2

91
Tree	public double sum = NUMBER_CONSTANT ;
Code	public double sum = NUMBER_CONSTANT ;
Distance : 1

92
Tree	double sum = true ;
Code	double sum = true ;
Distance : 1

93
Tree	final int sum = getKthSelector () ;
Code	final int sum = getKthSelector () ;
Distance : 4

94
Tree	int sum = floor () - NUMBER_CONSTANT ;
Code	int sum = floor () - NUMBER_CONSTANT ;
Distance : 4

95
Tree	float sum = this . sum ;
Code	float sum = this . sum ;
Distance : 4

96
Tree	final int sum = isNonSingular () ;
Code	final int sum = isNonSingular () ;
Distance : 4

97
Tree	void sum = STRING_CONSTANT + sum ;
Code	void sum = STRING_CONSTANT + sum ;
Distance : 4

98
Tree	int sum = this . sum . sum ; v.length
Code	int sum = this . sum . sum ; v.length
Distance : 7

99
Tree	int sum = false ;
Code	int sum = false ;
Distance : 2

100
Tree	final int sum = Coordinates3D.NaN () ;
Code	final int sum = Coordinates3D.NaN () ;
Distance : 4

101
Tree	void sum = this . sum . sum ;
Code	void sum = this . sum . sum ;
Distance : 6

102
Tree	int sum = ! ;
Code	int sum = ! ;
Distance : 2

103
Tree	int sum = NUMBER_CONSTANT * LocalizedFormats.OVERFLOW_IN_SUBTRACTION ;
Code	int sum = NUMBER_CONSTANT * LocalizedFormats.OVERFLOW_IN_SUBTRACTION ;
Distance : 3

104
Tree	final byte sum = NUMBER_CONSTANT ;
Code	final byte sum = NUMBER_CONSTANT ;
Distance : 2

105
Tree	double int ;
Code	double int ;
Distance : 3

106
Tree	final float sum ;
Code	final float sum ;
Distance : 4

107
Tree	int sum = NUMBER_CONSTANT * Precision.EPSILON ;
Code	int sum = NUMBER_CONSTANT * Precision.EPSILON ;
Distance : 3

108
Tree	int sum = NUMBER_CONSTANT * Coordinates3D.NEGATIVE_INFINITY ;
Code	int sum = NUMBER_CONSTANT * Coordinates3D.NEGATIVE_INFINITY ;
Distance : 3

109
Tree	public double [] [] sum ;
Code	public double [] [] sum ;
Distance : 4

110
Tree	final int sum = Coordinates3D.NEGATIVE_INFINITY () ;
Code	final int sum = Coordinates3D.NEGATIVE_INFINITY () ;
Distance : 4

111
Tree	int sum = getSampleSize () - NUMBER_CONSTANT ;
Code	int sum = getSampleSize () - NUMBER_CONSTANT ;
Distance : 4

112
Tree	double sum = null ;
Code	double sum = null ;
Distance : 1

113
Tree	int sum = getV () - NUMBER_CONSTANT ;
Code	int sum = getV () - NUMBER_CONSTANT ;
Distance : 4

114
Tree	int sum = this . sum . sum ; MathArrays
Code	int sum = this . sum . sum ; MathArrays
Distance : 7

115
Tree	int sum = NUMBER_CONSTANT * LocalizedFormats.ARRAY_SUMS_TO_ZERO ;
Code	int sum = NUMBER_CONSTANT * LocalizedFormats.ARRAY_SUMS_TO_ZERO ;
Distance : 3

116
Tree	int sum = null ;
Code	int sum = null ;
Distance : 2

117
Tree	int sum = getKthSelector () . sum ;
Code	int sum = getKthSelector () . sum ;
Distance : 5

118
Tree	double sum = NUMBER_CONSTANT ;
Code	double sum = NUMBER_CONSTANT ;
Distance : 0

119
Tree	int sum = ( sum ) sum ;
Code	int sum = ( sum ) sum ;
Distance : 5

120
Tree	int sum = new sum () ;
Code	int sum = new sum () ;
Distance : 4

121
Tree	int sum = floor () ;
Code	int sum = floor () ;
Distance : 3

122
Tree	int sum = logGamma () . sum ;
Code	int sum = logGamma () . sum ;
Distance : 5

123
Tree	int sum = iterator () . sum ;
Code	int sum = iterator () . sum ;
Distance : 5

124
Tree	final float [] [] sum ;
Code	final float [] [] sum ;
Distance : 5

125
Tree	int sum [] = getV () ;
Code	int sum [] = getV () ;
Distance : 4

126
Tree	int sum = getV () . sum ;
Code	int sum = getV () . sum ;
Distance : 5

127
Tree	byte sum = this . sum ;
Code	byte sum = this . sum ;
Distance : 4

128
Tree	int sum = ( sum - NUMBER_CONSTANT ) ? null : Coordinates3D.NaN ;
Code	int sum = ( sum - NUMBER_CONSTANT ) ? null : Coordinates3D.NaN ;
Distance : 9

129
Tree	long sum = true ;
Code	long sum = true ;
Distance : 2

130
Tree	int sum = sum ? LocalizedFormats.NUMBER_TOO_SMALL : scale.length ;
Code	int sum = sum ? LocalizedFormats.NUMBER_TOO_SMALL : scale.length ;
Distance : 6

131
Tree	int sum = getSampleSize () ;
Code	int sum = getSampleSize () ;
Distance : 3

132
Tree	int sum = NUMBER_CONSTANT * RegularizedGamma.P ;
Code	int sum = NUMBER_CONSTANT * RegularizedGamma.P ;
Distance : 3

133
Tree	long sum = true ;
Code	long sum = true ;
Distance : 2

134
Tree	float sum = NUMBER_CONSTANT ;
Code	float sum = NUMBER_CONSTANT ;
Distance : 1

135
Tree	int sum = getV () ;
Code	int sum = getV () ;
Distance : 3

136
Tree	boolean sum = this . sum ;
Code	boolean sum = this . sum ;
Distance : 4

137
Tree	int sum = LocalizedFormats.ARRAY_SUMS_TO_ZERO ;
Code	int sum = LocalizedFormats.ARRAY_SUMS_TO_ZERO ;
Distance : 2

138
Tree	int int ;
Code	int int ;
Distance : 4

139
Tree	byte sum ;
Code	byte sum ;
Distance : 3

140
Tree	int sum = NUMBER_CONSTANT * Coordinates3D.NaN ;
Code	int sum = NUMBER_CONSTANT * Coordinates3D.NaN ;
Distance : 3

141
Tree	int sum = Double.MAX_VALUE ;
Code	int sum = Double.MAX_VALUE ;
Distance : 2

142
Tree	int sum = sum ? LocalizedFormats.NUMBER_TOO_SMALL : startPoint.length ;
Code	int sum = sum ? LocalizedFormats.NUMBER_TOO_SMALL : startPoint.length ;
Distance : 6

143
Tree	int sum = coefficients.length ;
Code	int sum = coefficients.length ;
Distance : 2

144
Tree	void sum = NUMBER_CONSTANT ;
Code	void sum = NUMBER_CONSTANT ;
Distance : 1

145
Tree	int sum = Coordinates3D.NaN ;
Code	int sum = Coordinates3D.NaN ;
Distance : 2

146
Tree	float sum = sum + NUMBER_CONSTANT ;
Code	float sum = sum + NUMBER_CONSTANT ;
Distance : 3

147
Tree	int sum = missingEntries ;
Code	int sum = missingEntries ;
Distance : 2

148
Tree	int sum = sum ; v.length
Code	int sum = sum ; v.length
Distance : 3

149
Tree	void sum = NUMBER_CONSTANT ;
Code	void sum = NUMBER_CONSTANT ;
Distance : 1

150
Tree	boolean sum = NUMBER_CONSTANT ;
Code	boolean sum = NUMBER_CONSTANT ;
Distance : 1

151
Tree	int sum = isNonSingular () . sum ;
Code	int sum = isNonSingular () . sum ;
Distance : 5

152
Tree	int sum = Double.MAX_VALUE ;
Code	int sum = Double.MAX_VALUE ;
Distance : 2

153
Tree	int sum = getKthSelector () ;
Code	int sum = getKthSelector () ;
Distance : 3

154
Tree	boolean sum = true ;
Code	boolean sum = true ;
Distance : 2

155
Tree	float sum = STRING_CONSTANT + sum ;
Code	float sum = STRING_CONSTANT + sum ;
Distance : 4

156
Tree	int double ;
Code	int double ;
Distance : 4

157
Tree	int sum = new OpenIntToDoubleHashMap () ;
Code	int sum = new OpenIntToDoubleHashMap () ;
Distance : 4

158
Tree	double sum = true ;
Code	double sum = true ;
Distance : 1

159
Tree	double sum = null ;
Code	double sum = null ;
Distance : 1

160
Tree	final int [] [] sum ;
Code	final int [] [] sum ;
Distance : 5

161
Tree	boolean += ;
Code	boolean += ;
Distance : 4

162
Tree	boolean sum = STRING_CONSTANT + sum ;
Code	boolean sum = STRING_CONSTANT + sum ;
Distance : 4

163
Tree	int sum = logGamma () ;
Code	int sum = logGamma () ;
Distance : 3

164
Tree	int sum [] = getSampleSize () ;
Code	int sum [] = getSampleSize () ;
Distance : 4

165
Tree	int sum = new MicrosphereInterpolator () ;
Code	int sum = new MicrosphereInterpolator () ;
Distance : 4

166
Tree	int sum = missingEntries ;
Code	int sum = missingEntries ;
Distance : 2

167
Tree	long sum = null ;
Code	long sum = null ;
Distance : 2

168
Tree	abstract int sum = NUMBER_CONSTANT ;
Code	abstract int sum = NUMBER_CONSTANT ;
Distance : 2

169
Tree	int sum = new isNonSingular () ;
Code	int sum = new isNonSingular () ;
Distance : 4

170
Tree	int sum = STRING_CONSTANT + sum ; MathArrays
Code	int sum = STRING_CONSTANT + sum ; MathArrays
Distance : 5

171
Tree	long sum = null ;
Code	long sum = null ;
Distance : 2

172
Tree	byte sum = null ;
Code	byte sum = null ;
Distance : 2

173
Tree	final double [] [] sum ;
Code	final double [] [] sum ;
Distance : 4

174
Tree	long += ;
Code	long += ;
Distance : 4

175
Tree	int sum = true ;
Code	int sum = true ;
Distance : 2

176
Tree	public int sum = NUMBER_CONSTANT ;
Code	public int sum = NUMBER_CONSTANT ;
Distance : 2

177
Tree	boolean sum = false ;
Code	boolean sum = false ;
Distance : 2

178
Tree	int sum = STRING_CONSTANT + sum ;
Code	int sum = STRING_CONSTANT + sum ;
Distance : 4

179
Tree	long sum = true ;
Code	long sum = true ;
Distance : 2

180
Tree	int sum = ( sum - NUMBER_CONSTANT ) ? null : Double.MIN_VALUE ;
Code	int sum = ( sum - NUMBER_CONSTANT ) ? null : Double.MIN_VALUE ;
Distance : 9

181
Tree	int sum = NUMBER_CONSTANT ; MathArrays
Code	int sum = NUMBER_CONSTANT ; MathArrays
Distance : 2

182
Tree	double sum = true ;
Code	double sum = true ;
Distance : 1

183
Tree	int sum = ! ;
Code	int sum = ! ;
Distance : 2

184
Tree	void sum = this . sum ;
Code	void sum = this . sum ;
Distance : 4

185
Tree	final boolean sum ;
Code	final boolean sum ;
Distance : 4

186
Tree	int LocalizedFormats.ARRAY_SUMS_TO_ZERO [] = sum ;
Code	int LocalizedFormats.ARRAY_SUMS_TO_ZERO [] = sum ;
Distance : 4

187
Tree	int sum = NUMBER_CONSTANT ; v.length
Code	int sum = NUMBER_CONSTANT ; v.length
Distance : 2

188
Tree	int sum = Double.NaN ;
Code	int sum = Double.NaN ;
Distance : 2

189
Tree	int sum = ( sum - NUMBER_CONSTANT ) ? null : LocalizedFormats.OVERFLOW_IN_SUBTRACTION ;
Code	int sum = ( sum - NUMBER_CONSTANT ) ? null : LocalizedFormats.OVERFLOW_IN_SUBTRACTION ;
Distance : 9

190
Tree	boolean sum = sum + NUMBER_CONSTANT ;
Code	boolean sum = sum + NUMBER_CONSTANT ;
Distance : 3

191
Tree	int sum = org.apache.commons.math4.geometry.euclidean.twod.Line ;
Code	int sum = org.apache.commons.math4.geometry.euclidean.twod.Line ;
Distance : 2

192
Tree	final byte [] [] sum ;
Code	final byte [] [] sum ;
Distance : 5

193
Tree	int sum = LocalizedFormats.UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH ;
Code	int sum = LocalizedFormats.UNABLE_TO_BRACKET_OPTIMUM_IN_LINE_SEARCH ;
Distance : 2

194
Tree	double sum = null ;
Code	double sum = null ;
Distance : 1

195
Tree	int sum = new RankDeficientMatrixException () ;
Code	int sum = new RankDeficientMatrixException () ;
Distance : 4

196
Tree	int sum [] = LocalizedFormats.ARRAY_SUMS_TO_ZERO () ;
Code	int sum [] = LocalizedFormats.ARRAY_SUMS_TO_ZERO () ;
Distance : 4

197
Tree	final long sum = NUMBER_CONSTANT ;
Code	final long sum = NUMBER_CONSTANT ;
Distance : 2

198
Tree	int sum = true ;
Code	int sum = true ;
Distance : 2

199
Tree	int sum = false ;
Code	int sum = false ;
Distance : 2

200
Tree	int sum ;
Code	int sum ;
Distance : 3

201
Tree	int sum = NUMBER_CONSTANT ;
Code	int sum = NUMBER_CONSTANT ;
Distance : 1

202
Tree	int sum [] = getOptima () ;
Code	int sum [] = getOptima () ;
Distance : 4

203
Tree	int sum = Double.MAX_VALUE ;
Code	int sum = Double.MAX_VALUE ;
Distance : 2

204
Tree	int sum = null ;
Code	int sum = null ;
Distance : 2

205
Tree	int sum [] = floor () ;
Code	int sum [] = floor () ;
Distance : 4

206
Tree	boolean sum = null ;
Code	boolean sum = null ;
Distance : 2

207
Tree	int sum = true ;
Code	int sum = true ;
Distance : 2

208
Tree	int sum = new CholeskyDecompositionImpl () ;
Code	int sum = new CholeskyDecompositionImpl () ;
Distance : 4

209
Tree	int sum = new LinkedList () ;
Code	int sum = new LinkedList () ;
Distance : 4

210
Tree	int sum = null ;
Code	int sum = null ;
Distance : 2

211
Tree	int sum = getRSquare () . sum ;
Code	int sum = getRSquare () . sum ;
Distance : 5

212
Tree	final int sum = sign () ;
Code	final int sum = sign () ;
Distance : 4

213
Tree	int sum [] = Coordinates3D.NEGATIVE_INFINITY () ;
Code	int sum [] = Coordinates3D.NEGATIVE_INFINITY () ;
Distance : 4

214
Tree	int sum = sum ;
Code	int sum = sum ;
Distance : 2

215
Tree	long sum = this . sum ;
Code	long sum = this . sum ;
Distance : 4

216
Tree	int sum = new FieldRotation () ;
Code	int sum = new FieldRotation () ;
Distance : 4

217
Tree	final int sum = iterator () ;
Code	final int sum = iterator () ;
Distance : 4

218
Tree	int sum = NUMBER_CONSTANT * Double.MIN_VALUE ;
Code	int sum = NUMBER_CONSTANT * Double.MIN_VALUE ;
Distance : 3

219
Tree	void sum = sum ;
Code	void sum = sum ;
Distance : 2

220
Tree	int sum = Coordinates3D.NEGATIVE_INFINITY () - NUMBER_CONSTANT ;
Code	int sum = Coordinates3D.NEGATIVE_INFINITY () - NUMBER_CONSTANT ;
Distance : 4

221
Tree	int sum [] = sum ;
Code	int sum [] = sum ;
Distance : 3

222
Tree	double sum = true ;
Code	double sum = true ;
Distance : 1

223
Tree	boolean sum ;
Code	boolean sum ;
Distance : 3

224
Tree	int sum = this . sum . sum ;
Code	int sum = this . sum . sum ;
Distance : 6

225
Tree	int sum = ! ;
Code	int sum = ! ;
Distance : 2

226
Tree	int sum = continue; ;
Code	int sum = continue; ;
Distance : 2

227
Tree	int sum = false ;
Code	int sum = false ;
Distance : 2

228
Tree	int sum = Double.MAX_VALUE ;
Code	int sum = Double.MAX_VALUE ;
Distance : 2

229
Tree	int sum = ! ;
Code	int sum = ! ;
Distance : 2

230
Tree	int sum = iterator () - NUMBER_CONSTANT ;
Code	int sum = iterator () - NUMBER_CONSTANT ;
Distance : 4

231
Tree	int sum = new MidpointFieldStepInterpolator () ;
Code	int sum = new MidpointFieldStepInterpolator () ;
Distance : 4

232
Tree	float sum = NUMBER_CONSTANT ;
Code	float sum = NUMBER_CONSTANT ;
Distance : 1

233
Tree	public int sum ;
Code	public int sum ;
Distance : 4

234
Tree	double sum = null ;
Code	double sum = null ;
Distance : 1

235
Tree	int sum = ( sum - NUMBER_CONSTANT ) ? null : sample2.length ;
Code	int sum = ( sum - NUMBER_CONSTANT ) ? null : sample2.length ;
Distance : 9

236
Tree	int sum [] = getKthSelector () ;
Code	int sum [] = getKthSelector () ;
Distance : 4

237
Tree	int sum = missingEntries ;
Code	int sum = missingEntries ;
Distance : 2

238
Tree	final double sum = NUMBER_CONSTANT ;
Code	final double sum = NUMBER_CONSTANT ;
Distance : 1

239
Tree	int sum = sum + NUMBER_CONSTANT ; v.length
Code	int sum = sum + NUMBER_CONSTANT ; v.length
Distance : 4

240
Tree	double sum = null ;
Code	double sum = null ;
Distance : 1

241
Tree	int sum = missingEntries ;
Code	int sum = missingEntries ;
Distance : 2

242
Tree	final double sum ;
Code	final double sum ;
Distance : 3

243
Tree	boolean sum = NUMBER_CONSTANT ;
Code	boolean sum = NUMBER_CONSTANT ;
Distance : 1

244
Tree	double sum = this . sum . sum ;
Code	double sum = this . sum . sum ;
Distance : 5

245
Tree	double sum = sum ;
Code	double sum = sum ;
Distance : 1

246
Tree	int sum = ( sum - NUMBER_CONSTANT ) ? null : other.entries ;
Code	int sum = ( sum - NUMBER_CONSTANT ) ? null : other.entries ;
Distance : 9

247
Tree	int sum = Double.MAX_VALUE ;
Code	int sum = Double.MAX_VALUE ;
Distance : 2

248
Tree	int SUM [] = sum ;
Code	int SUM [] = sum ;
Distance : 4

249
Tree	int isNonSingular [] = sum ;
Code	int isNonSingular [] = sum ;
Distance : 4

250
Tree	final boolean [] [] sum ;
Code	final boolean [] [] sum ;
Distance : 5

251
Tree	int sum = source.contractionCriterion ;
Code	int sum = source.contractionCriterion ;
Distance : 2

252
Tree	int sum = NUMBER_CONSTANT ;
Code	int sum = NUMBER_CONSTANT ;
Distance : 1

253
Tree	final int sum = floor () ;
Code	final int sum = floor () ;
Distance : 4

254
Tree	int sum = sum ? Integer.MIN_VALUE : sample2.length ;
Code	int sum = sum ? Integer.MIN_VALUE : sample2.length ;
Distance : 6

255
Tree	int sum = NUMBER_CONSTANT * FastMath.PI ;
Code	int sum = NUMBER_CONSTANT * FastMath.PI ;
Distance : 3

256
Tree	int sum [] = Coordinates3D.NaN () ;
Code	int sum [] = Coordinates3D.NaN () ;
Distance : 4

257
Tree	int sum = sum ? LocalizedFormats.NUMBER_TOO_SMALL : FastMath.PI ;
Code	int sum = sum ? LocalizedFormats.NUMBER_TOO_SMALL : FastMath.PI ;
Distance : 6

258
Tree	final int sum = getV () ;
Code	final int sum = getV () ;
Distance : 4

259
Tree	int sum = Coordinates3D.NaN () - NUMBER_CONSTANT ;
Code	int sum = Coordinates3D.NaN () - NUMBER_CONSTANT ;
Distance : 4

260
Tree	double sum = false ;
Code	double sum = false ;
Distance : 1

261
Tree	int sum [] = isNonSingular () ;
Code	int sum [] = isNonSingular () ;
Distance : 4

262
Tree	int space [] = sum ;
Code	int space [] = sum ;
Distance : 4

263
Tree	int sum = sum ? LocalizedFormats.NUMBER_TOO_SMALL : sample2.length ;
Code	int sum = sum ? LocalizedFormats.NUMBER_TOO_SMALL : sample2.length ;
Distance : 6

264
Tree	int sum = true ;
Code	int sum = true ;
Distance : 2

265
Tree	public int [] [] sum ;
Code	public int [] [] sum ;
Distance : 5

266
Tree	int Iterator [] = sum ;
Code	int Iterator [] = sum ;
Distance : 4

267
Tree	float sum = null ;
Code	float sum = null ;
Distance : 2

268
Tree	final boolean sum = NUMBER_CONSTANT ;
Code	final boolean sum = NUMBER_CONSTANT ;
Distance : 2

269
Tree	void sum ;
Code	void sum ;
Distance : 3

270
Tree	long sum = true ;
Code	long sum = true ;
Distance : 2

271
Tree	final long [] [] sum ;
Code	final long [] [] sum ;
Distance : 5

272
Tree	byte sum = true ;
Code	byte sum = true ;
Distance : 2

273
Tree	double sum = true ;
Code	double sum = true ;
Distance : 1

274
Tree	long sum = null ;
Code	long sum = null ;
Distance : 2

275
Tree	int logGamma [] = sum ;
Code	int logGamma [] = sum ;
Distance : 4

276
Tree	int edges [] = sum ;
Code	int edges [] = sum ;
Distance : 4

277
Tree	long sum = this . sum . sum ;
Code	long sum = this . sum . sum ;
Distance : 6

278
Tree	double sum = STRING_CONSTANT + sum ;
Code	double sum = STRING_CONSTANT + sum ;
Distance : 3

279
Tree	int sum = ( sum ) sum ; MathArrays
Code	int sum = ( sum ) sum ; MathArrays
Distance : 6

280
Tree	long sum [] = sum ;
Code	long sum [] = sum ;
Distance : 3

281
Tree	void sum = null ;
Code	void sum = null ;
Distance : 2

282
Tree	float sum ;
Code	float sum ;
Distance : 3

283
Tree	long sum = ( sum ) sum ;
Code	long sum = ( sum ) sum ;
Distance : 5

284
Tree	int isLastStep [] = sum ;
Code	int isLastStep [] = sum ;
Distance : 4

285
Tree	int sum = ( sum - NUMBER_CONSTANT ) ? null : startPoint.length ;
Code	int sum = ( sum - NUMBER_CONSTANT ) ? null : startPoint.length ;
Distance : 9

286
Tree	double sum = null ;
Code	double sum = null ;
Distance : 1

287
Tree	int sum = ( sum ) sum ; v.length
Code	int sum = ( sum ) sum ; v.length
Distance : 6

288
Tree	int sum = sum ? LocalizedFormats.NUMBER_TOO_SMALL : Double.NaN ;
Code	int sum = sum ? LocalizedFormats.NUMBER_TOO_SMALL : Double.NaN ;
Distance : 6

289
Tree	int sum = return; ;
Code	int sum = return; ;
Distance : 2

290
Tree	int ! ;
Code	int ! ;
Distance : 4

291
Tree	int sum = NUMBER_CONSTANT ;
Code	int sum = NUMBER_CONSTANT ;
Distance : 1

292
Tree	double sum = ( sum ) sum ;
Code	double sum = ( sum ) sum ;
Distance : 4

293
Tree	public double sum ;
Code	public double sum ;
Distance : 3

294
Tree	final byte sum ;
Code	final byte sum ;
Distance : 4

295
Tree	int sum = sum ? Integer.MIN_VALUE : FastMath.PI ;
Code	int sum = sum ? Integer.MIN_VALUE : FastMath.PI ;
Distance : 6

296
Tree	int sum = this . sum ;
Code	int sum = this . sum ;
Distance : 4

297
Tree	boolean sum = ( sum ) sum ;
Code	boolean sum = ( sum ) sum ;
Distance : 5

298
Tree	void sum = true ;
Code	void sum = true ;
Distance : 2

299
Tree	byte sum = ( sum ) sum ;
Code	byte sum = ( sum ) sum ;
Distance : 5

300
Tree	double sum = sum + NUMBER_CONSTANT ;
Code	double sum = sum + NUMBER_CONSTANT ;
Distance : 2

301
Tree	int sum = this . sum . sum ;
Code	int sum = this . sum . sum ;
Distance : 6

302
Tree	void sum = ( sum ) sum ;
Code	void sum = ( sum ) sum ;
Distance : 5

303
Tree	int sum = NUMBER_CONSTANT ; MathArrays
Code	int sum = NUMBER_CONSTANT ; MathArrays
Distance : 2

304
Tree	final void [] [] sum ;
Code	final void [] [] sum ;
Distance : 5

305
Tree	final float sum = NUMBER_CONSTANT ;
Code	final float sum = NUMBER_CONSTANT ;
Distance : 2

306
Tree	int sum = sum ;
Code	int sum = sum ;
Distance : 2

307
Tree	int sum = break; ;
Code	int sum = break; ;
Distance : 2

308
Tree	int sum = this . sum ; v.length
Code	int sum = this . sum ; v.length
Distance : 5

309
Tree	int sum = NUMBER_CONSTANT ; v.length
Code	int sum = NUMBER_CONSTANT ; v.length
Distance : 2

========================================================================


========================================================================
Example Number: 13
Parent Code is: 
Iterator iter = res.entries . iterator () ;
-------------------------------------------------------------------------------
Child code is: 
Iterator iter = entries . iterator () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (40{val=res.entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (800{val=entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/49/parent/src_main_java_org_apache_commons_math_linear_OpenMapRealVector.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 460
Correct
========================================================================
True

0
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

1
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , true ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , true ) ;
Distance : 6

2
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

3
Tree	Iterator iter ;
Code	Iterator iter ;
Distance : 5

4
Tree	Iterator iter = iter . iterator () ;
Code	Iterator iter = iter . iterator () ;
Distance : 1

5
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

6
Tree	Iterator iter = iter . iterator ( null ) ;
Code	Iterator iter = iter . iterator ( null ) ;
Distance : 4

7
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

8
Tree	Iterator iter = iterator ( Iterator ) . iterator () ; Fraction
Code	Iterator iter = iterator ( Iterator ) . iterator () ; Fraction
Distance : 5

9
Tree	Iterator iter = iterator ( Iterator ) . iterator () ; assertEquals
Code	Iterator iter = iterator ( Iterator ) . iterator () ; assertEquals
Distance : 5

10
Tree	Iterator entries = res.entries . iterator () ;
Code	Iterator entries = res.entries . iterator () ;
Distance : 2

11
Tree	Iterator iter = res.entries . iterator () ; k
Code	Iterator iter = res.entries . iterator () ; k
Distance : 2

12
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Distance : 8

13
Tree	Iterator iter = iter . iterator ( entries , this . iter ) ;
Code	Iterator iter = iter . iterator ( entries , this . iter ) ;
Distance : 8

14
Tree	Iterator iter = iterator ( Iterator ) ; void
Code	Iterator iter = iterator ( Iterator ) ; void
Distance : 5

15
Tree	Iterator iter = iterator ( Iterator ) ; Override
Code	Iterator iter = iterator ( Iterator ) ; Override
Distance : 5

16
Tree	Iterator iter = iterator ( Iterator ) ; nCols
Code	Iterator iter = iterator ( Iterator ) ; nCols
Distance : 5

17
Tree	Iterator iter = iterator ( Iterator ) ; k
Code	Iterator iter = iterator ( Iterator ) ; k
Distance : 5

18
Tree	Iterator iter = iterator ( Iterator ) ; field
Code	Iterator iter = iterator ( Iterator ) ; field
Distance : 5

19
Tree	Iterator iter = iterator ( Iterator ) ; Assert
Code	Iterator iter = iterator ( Iterator ) ; Assert
Distance : 5

20
Tree	Iterator iter = iterator ( Iterator ) ; assertEquals
Code	Iterator iter = iterator ( Iterator ) ; assertEquals
Distance : 5

21
Tree	Iterator iter = iterator ( Iterator ) ; Fraction
Code	Iterator iter = iterator ( Iterator ) ; Fraction
Distance : 5

22
Tree	Iterator iter = iterator ( Iterator ) . iterator () ; void
Code	Iterator iter = iterator ( Iterator ) . iterator () ; void
Distance : 5

23
Tree	Iterator entries = res.entries . iterator () ;
Code	Iterator entries = res.entries . iterator () ;
Distance : 2

24
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 11

25
Tree	Iterator iter = entries . iterator ( iter , null ) ;
Code	Iterator iter = entries . iterator ( iter , null ) ;
Distance : 5

26
Tree	Iterator iter = entries . iterator ( entries . class ) ;
Code	Iterator iter = entries . iterator ( entries . class ) ;
Distance : 5

27
Tree	Iterator iter = iterator ( iter . class ) ; +
Code	Iterator iter = iterator ( iter . class ) ; +
Distance : 6

28
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Distance : 9

29
Tree	Iterator iter = res.entries . iterator () ; field
Code	Iterator iter = res.entries . iterator () ; field
Distance : 2

30
Tree	Iterator iter = iterator ( Iterator ) . iterator () ; Override
Code	Iterator iter = iterator ( Iterator ) . iterator () ; Override
Distance : 5

31
Tree	Iterator iter = res.entries . iterator () ; Assert
Code	Iterator iter = res.entries . iterator () ; Assert
Distance : 2

32
Tree	Iterator iter = res.entries . iterator () ; Override
Code	Iterator iter = res.entries . iterator () ; Override
Distance : 2

33
Tree	Iterator iter = res.entries . iterator () ; Fraction
Code	Iterator iter = res.entries . iterator () ; Fraction
Distance : 2

34
Tree	Iterator iter = res.entries . iterator () ; assertEquals
Code	Iterator iter = res.entries . iterator () ; assertEquals
Distance : 2

35
Tree	Iterator iter = iterator ( break; , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( break; , STRING_CONSTANT ) ;
Distance : 6

36
Tree	Iterator iter = iterator ( Iterator ) . iterator () ; field
Code	Iterator iter = iterator ( Iterator ) . iterator () ; field
Distance : 5

37
Tree	Iterator iter = iterator ( Iterator ) . iterator () ; Assert
Code	Iterator iter = iterator ( Iterator ) . iterator () ; Assert
Distance : 5

38
Tree	Iterator iter = res.entries . iterator () ; void
Code	Iterator iter = res.entries . iterator () ; void
Distance : 2

39
Tree	Iterator entries = this . entries . iterator () ;
Code	Iterator entries = this . entries . iterator () ;
Distance : 3

40
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; void
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; void
Distance : 5

41
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; field
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; field
Distance : 5

42
Tree	Iterator iter = iterator ( iter . class ) ; MatrixUtils
Code	Iterator iter = iterator ( iter . class ) ; MatrixUtils
Distance : 6

43
Tree	Iterator entries = entries . iterator ( null ) ;
Code	Iterator entries = entries . iterator ( null ) ;
Distance : 4

44
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 15

45
Tree	Iterator entries = iterator ( null , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( null , STRING_CONSTANT ) ;
Distance : 7

46
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Override
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Override
Distance : 9

47
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Fraction
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Fraction
Distance : 9

48
Tree	Iterator iter = iterator ( iter . class ) ; Array2DRowFieldMatrix
Code	Iterator iter = iterator ( iter . class ) ; Array2DRowFieldMatrix
Distance : 6

49
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; assertEquals
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; assertEquals
Distance : 9

50
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Distance : 11

51
Tree	Iterator entries = iterator ( STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT ) ;
Distance : 5

52
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 7

53
Tree	Iterator entries = iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iterator ( NUMBER_CONSTANT ) ;
Distance : 5

54
Tree	Iterator entries = iterator () ;
Code	Iterator entries = iterator () ;
Distance : 3

55
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Override
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Override
Distance : 11

56
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , true ) ; v.length
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , true ) ; v.length
Distance : 7

57
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; k
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; k
Distance : 5

58
Tree	Iterator iter = iterator ( this . entries ) ;
Code	Iterator iter = iterator ( this . entries ) ;
Distance : 5

59
Tree	Iterator entries = entries . iterator () ;
Code	Iterator entries = entries . iterator () ;
Distance : 1

60
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Assert
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Assert
Distance : 5

61
Tree	Iterator iter = iter ( entries . class , entries ) ;
Code	Iterator iter = iter ( entries . class , entries ) ;
Distance : 6

62
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Override
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Override
Distance : 5

63
Tree	Iterator iter = res.entries . iterator () ;
Code	Iterator iter = res.entries . iterator () ;
Distance : 1

64
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , true ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , true ) ;
Distance : 6

65
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

66
Tree	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

67
Tree	Iterator entries = new Iterator () . iterator () ;
Code	Iterator entries = new Iterator () . iterator () ;
Distance : 4

68
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Array2DRowFieldMatrix
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Array2DRowFieldMatrix
Distance : 9

69
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; MatrixUtils
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; MatrixUtils
Distance : 9

70
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; point
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; point
Distance : 9

71
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; UnivariateRealFunction
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; UnivariateRealFunction
Distance : 9

72
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; super
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; super
Distance : 9

73
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; +
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; +
Distance : 9

74
Tree	Iterator iter = res.entries . iterator () . iterator () ;
Code	Iterator iter = res.entries . iterator () . iterator () ;
Distance : 4

75
Tree	Iterator iter = entries . iterator ( iter . class ) ;
Code	Iterator iter = entries . iterator ( iter . class ) ;
Distance : 5

76
Tree	Iterator iter = iterator ( super(); , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( super(); , STRING_CONSTANT ) ;
Distance : 6

77
Tree	Iterator entries = iter . iterator ( entries , null ) ;
Code	Iterator entries = iter . iterator ( entries , null ) ;
Distance : 7

78
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; Assert
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; Assert
Distance : 7

79
Tree	Iterator iter = this . entries . iterator () ; Array2DRowFieldMatrix
Code	Iterator iter = this . entries . iterator () ; Array2DRowFieldMatrix
Distance : 3

80
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; void
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; void
Distance : 7

81
Tree	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator ( NUMBER_CONSTANT ) ) ; field
Code	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator ( NUMBER_CONSTANT ) ) ; field
Distance : 10

82
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; Fraction
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; Fraction
Distance : 7

83
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; assertEquals
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; assertEquals
Distance : 7

84
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; Override
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; Override
Distance : 7

85
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 12

86
Tree	Iterator iter = iterator ( Iterator ) . iterator () ;
Code	Iterator iter = iterator ( Iterator ) . iterator () ;
Distance : 4

87
Tree	Iterator entries = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ;
Distance : 10

88
Tree	Iterator entries = iterator ( STRING_CONSTANT , res.entries . iterator () ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , res.entries . iterator () ) ;
Distance : 7

89
Tree	Iterator entries = iterator ( STRING_CONSTANT , entries , iter ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , entries , iter ) ;
Distance : 8

90
Tree	Iterator entries = iterator ( STRING_CONSTANT , iter , iter ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , iter , iter ) ;
Distance : 9

91
Tree	Iterator entries = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ;
Distance : 8

92
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Distance : 8

93
Tree	Iterator iter = entries . iterator ( iter , this . entries ) ;
Code	Iterator iter = entries . iterator ( iter , this . entries ) ;
Distance : 7

94
Tree	Iterator iter = entries . iterator ( entries , this . entries ) ;
Code	Iterator iter = entries . iterator ( entries , this . entries ) ;
Distance : 7

95
Tree	Iterator entries = iterator ( break; , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( break; , STRING_CONSTANT ) ;
Distance : 7

96
Tree	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ;
Distance : 8

97
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT , Iterator ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT , Iterator ) ;
Distance : 6

98
Tree	Iterator entries = iter . iterator ( iter , this . iter ) ;
Code	Iterator entries = iter . iterator ( iter , this . iter ) ;
Distance : 9

99
Tree	Iterator iter = entries ( entries . class , entries ) ;
Code	Iterator iter = entries ( entries . class , entries ) ;
Distance : 6

100
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Distance : 9

101
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; void
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; void
Distance : 10

102
Tree	Iterator entries = iter . iterator ( entries , this . iter ) ;
Code	Iterator entries = iter . iterator ( entries , this . iter ) ;
Distance : 9

103
Tree	Iterator iter = entries . iterator ( entries , this . iter ) ;
Code	Iterator iter = entries . iterator ( entries , this . iter ) ;
Distance : 7

104
Tree	static Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	static Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 6

105
Tree	Iterator entries = this . entries . iterator () . iterator () ;
Code	Iterator entries = this . entries . iterator () . iterator () ;
Distance : 6

106
Tree	synchronized Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	synchronized Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

107
Tree	private Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	private Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

108
Tree	Iterator entries = res.entries . iterator () . iterator () ;
Code	Iterator entries = res.entries . iterator () . iterator () ;
Distance : 5

109
Tree	Iterator iter = iter . iterator ( iter , this . entries ) ;
Code	Iterator iter = iter . iterator ( iter , this . entries ) ;
Distance : 8

110
Tree	abstract Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	abstract Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

111
Tree	Iterator iter = iter . iterator ( iter , break; ) ;
Code	Iterator iter = iter . iterator ( iter , break; ) ;
Distance : 6

112
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; Assert
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; Assert
Distance : 10

113
Tree	Iterator entries = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator entries = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 11

114
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Fraction
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Fraction
Distance : 11

115
Tree	Iterator entries = iter . iterator ( entries . class ) ;
Code	Iterator entries = iter . iterator ( entries . class ) ;
Distance : 7

116
Tree	protected Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	protected Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

117
Tree	Iterator entries = iter . iterator ( Iterator , NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( Iterator , NUMBER_CONSTANT ) ;
Distance : 7

118
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , false ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , false ) ;
Distance : 6

119
Tree	Iterator iter = iterator ( continue; , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( continue; , STRING_CONSTANT ) ;
Distance : 6

120
Tree	Iterator entries = iterator ( iter . class ) ;
Code	Iterator entries = iterator ( iter . class ) ;
Distance : 6

121
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; Array2DRowFieldMatrix
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; Array2DRowFieldMatrix
Distance : 9

122
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; MatrixUtils
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; MatrixUtils
Distance : 9

123
Tree	Iterator iter = iterator () ; assertEquals
Code	Iterator iter = iterator () ; assertEquals
Distance : 3

124
Tree	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator () ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator () ) ; nCols
Distance : 7

125
Tree	Iterator iter = iterator () ; Fraction
Code	Iterator iter = iterator () ; Fraction
Distance : 3

126
Tree	Iterator iter = iterator () ; void
Code	Iterator iter = iterator () ; void
Distance : 3

127
Tree	Iterator iter = iterator () ; Assert
Code	Iterator iter = iterator () ; Assert
Distance : 3

128
Tree	Iterator iter = iterator () ; field
Code	Iterator iter = iterator () ; field
Distance : 3

129
Tree	Iterator iter = this . iter . iterator () . iterator () ;
Code	Iterator iter = this . iter . iterator () . iterator () ;
Distance : 6

130
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; +
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; +
Distance : 5

131
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; super
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; super
Distance : 5

132
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; UnivariateRealFunction
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; UnivariateRealFunction
Distance : 5

133
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; point
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; point
Distance : 5

134
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; MatrixUtils
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; MatrixUtils
Distance : 5

135
Tree	Iterator iter = this . entries . iterator () ; +
Code	Iterator iter = this . entries . iterator () ; +
Distance : 3

136
Tree	Iterator entries = iter ( iter . class , entries ) ;
Code	Iterator entries = iter ( iter . class , entries ) ;
Distance : 8

137
Tree	Iterator iter = this . entries . iterator () ; point
Code	Iterator iter = this . entries . iterator () ; point
Distance : 3

138
Tree	Iterator iter = iter . iterator ( entries , break; ) ;
Code	Iterator iter = iter . iterator ( entries , break; ) ;
Distance : 6

139
Tree	Iterator iter = this . entries . iterator ( Iterator ) ;
Code	Iterator iter = this . entries . iterator ( Iterator ) ;
Distance : 5

140
Tree	Iterator entries = iterator ( Iterator ) ;
Code	Iterator entries = iterator ( Iterator ) ;
Distance : 5

141
Tree	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 7

142
Tree	public Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	public Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

143
Tree	Iterator entries = iterator ( this . iter ) ;
Code	Iterator entries = iterator ( this . iter ) ;
Distance : 6

144
Tree	Iterator entries = iterator ( entries . class ) ;
Code	Iterator entries = iterator ( entries . class ) ;
Distance : 5

145
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Assert
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Assert
Distance : 5

146
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; assertEquals
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; assertEquals
Distance : 11

147
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Override
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Override
Distance : 5

148
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; super
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; super
Distance : 12

149
Tree	Iterator iter = iterator ( this . iter ) ; +
Code	Iterator iter = iterator ( this . iter ) ; +
Distance : 6

150
Tree	Iterator iter = iter . iterator () ; point
Code	Iterator iter = iter . iterator () ; point
Distance : 2

151
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; assertEquals
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; assertEquals
Distance : 5

152
Tree	Iterator iter = this . entries . iterator ( Iterator ) ; +
Code	Iterator iter = this . entries . iterator ( Iterator ) ; +
Distance : 6

153
Tree	Iterator iter = this . entries . iterator ( Iterator ) ; super
Code	Iterator iter = this . entries . iterator ( Iterator ) ; super
Distance : 6

154
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; point
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; point
Distance : 12

155
Tree	Iterator iter = this . entries . iterator ( Iterator ) ; UnivariateRealFunction
Code	Iterator iter = this . entries . iterator ( Iterator ) ; UnivariateRealFunction
Distance : 6

156
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

157
Tree	Iterator iter = iter . iterator () ; UnivariateRealFunction
Code	Iterator iter = iter . iterator () ; UnivariateRealFunction
Distance : 2

158
Tree	Iterator iter = iter . iterator ( entries . class ) ; v.length
Code	Iterator iter = iter . iterator ( entries . class ) ; v.length
Distance : 7

159
Tree	Iterator iter = iter . iterator () ; super
Code	Iterator iter = iter . iterator () ; super
Distance : 2

160
Tree	Iterator iter = iter . iterator () ; +
Code	Iterator iter = iter . iterator () ; +
Distance : 2

161
Tree	Iterator iter = this . entries . iterator ( Iterator ) ; MatrixUtils
Code	Iterator iter = this . entries . iterator ( Iterator ) ; MatrixUtils
Distance : 6

162
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , false ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , false ) ;
Distance : 6

163
Tree	Iterator iter = entries . iterator ( null ) ;
Code	Iterator iter = entries . iterator ( null ) ;
Distance : 3

164
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

165
Tree	Iterator iter = entries . iterator () ;
Code	Iterator iter = entries . iterator () ;
Distance : 0

166
Tree	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; super
Code	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; super
Distance : 9

167
Tree	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; point
Code	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; point
Distance : 9

168
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Array2DRowFieldMatrix
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Array2DRowFieldMatrix
Distance : 11

169
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; MatrixUtils
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; MatrixUtils
Distance : 12

170
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ;
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ;
Distance : 5

171
Tree	Iterator iter = iter . iterator () ; Array2DRowFieldMatrix
Code	Iterator iter = iter . iterator () ; Array2DRowFieldMatrix
Distance : 2

172
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

173
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

174
Tree	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; super
Code	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; super
Distance : 7

175
Tree	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; +
Code	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; +
Distance : 7

176
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; Array2DRowFieldMatrix
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; Array2DRowFieldMatrix
Distance : 12

177
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; UnivariateRealFunction
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; UnivariateRealFunction
Distance : 12

178
Tree	Iterator iter = this . entries . iterator () . iterator () ; +
Code	Iterator iter = this . entries . iterator () . iterator () ; +
Distance : 6

179
Tree	Iterator iter = this . entries . iterator () . iterator () ; super
Code	Iterator iter = this . entries . iterator () . iterator () ; super
Distance : 6

180
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

181
Tree	Iterator iter = this . entries . iterator ( Iterator ) ; Array2DRowFieldMatrix
Code	Iterator iter = this . entries . iterator ( Iterator ) ; Array2DRowFieldMatrix
Distance : 6

182
Tree	Iterator iter = new Iterator () . iterator () ; k
Code	Iterator iter = new Iterator () . iterator () ; k
Distance : 4

183
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; +
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; +
Distance : 12

184
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

185
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Override
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Override
Distance : 7

186
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Fraction
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Fraction
Distance : 7

187
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; k
Distance : 7

188
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; field
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; field
Distance : 7

189
Tree	Iterator iter = this . entries . iterator () . iterator () ; MatrixUtils
Code	Iterator iter = this . entries . iterator () . iterator () ; MatrixUtils
Distance : 6

190
Tree	Iterator iter = this . entries . iterator () . iterator () ; Array2DRowFieldMatrix
Code	Iterator iter = this . entries . iterator () . iterator () ; Array2DRowFieldMatrix
Distance : 6

191
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; void
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; void
Distance : 7

192
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; field
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; field
Distance : 7

193
Tree	Iterator iter = res.entries . iterator () ; Fraction
Code	Iterator iter = res.entries . iterator () ; Fraction
Distance : 2

194
Tree	Iterator iter = res.entries . iterator () ; Override
Code	Iterator iter = res.entries . iterator () ; Override
Distance : 2

195
Tree	Iterator iter = res.entries . iterator () ; k
Code	Iterator iter = res.entries . iterator () ; k
Distance : 2

196
Tree	Iterator iter = res.entries . iterator () ; void
Code	Iterator iter = res.entries . iterator () ; void
Distance : 2

197
Tree	Iterator iter = res.entries . iterator () ; field
Code	Iterator iter = res.entries . iterator () ; field
Distance : 2

198
Tree	Iterator iter = res.entries . iterator () ; Assert
Code	Iterator iter = res.entries . iterator () ; Assert
Distance : 2

199
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; Assert
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; Assert
Distance : 7

200
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Assert
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Assert
Distance : 7

201
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; Override
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; Override
Distance : 7

202
Tree	Iterator iter = this . entries . iterator () . iterator () ; point
Code	Iterator iter = this . entries . iterator () . iterator () ; point
Distance : 6

203
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 11

204
Tree	Iterator iter = this . entries . iterator () . iterator () ; UnivariateRealFunction
Code	Iterator iter = this . entries . iterator () . iterator () ; UnivariateRealFunction
Distance : 6

205
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; Assert
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; Assert
Distance : 5

206
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; Fraction
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; Fraction
Distance : 7

207
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; assertEquals
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; assertEquals
Distance : 7

208
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; +
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; +
Distance : 11

209
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; nCols
Distance : 5

210
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; k
Distance : 5

211
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; field
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; field
Distance : 5

212
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; Override
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; Override
Distance : 5

213
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; Fraction
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; Fraction
Distance : 5

214
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; assertEquals
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; assertEquals
Distance : 5

215
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; super
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; super
Distance : 11

216
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; UnivariateRealFunction
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; UnivariateRealFunction
Distance : 11

217
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; point
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; point
Distance : 11

218
Tree	Iterator iter = iter . iterator ( entries . class ) ; MathArrays
Code	Iterator iter = iter . iterator ( entries . class ) ; MathArrays
Distance : 7

219
Tree	Iterator iter = new Iterator () . iterator () ; field
Code	Iterator iter = new Iterator () . iterator () ; field
Distance : 4

220
Tree	Iterator entries = iter . iterator ( null ) ;
Code	Iterator entries = iter . iterator ( null ) ;
Distance : 5

221
Tree	Iterator entries = iter . iterator () ;
Code	Iterator entries = iter . iterator () ;
Distance : 2

222
Tree	Iterator iter = iterator ( iter . class ) ;
Code	Iterator iter = iterator ( iter . class ) ;
Distance : 5

223
Tree	Iterator iter = iterator ( this . iter ) ;
Code	Iterator iter = iterator ( this . iter ) ;
Distance : 5

224
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , true ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , true ) ;
Distance : 5

225
Tree	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; MatrixUtils
Code	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; MatrixUtils
Distance : 9

226
Tree	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; Array2DRowFieldMatrix
Code	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; Array2DRowFieldMatrix
Distance : 9

227
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; assertEquals
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; assertEquals
Distance : 13

228
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; Fraction
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; Fraction
Distance : 13

229
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; Override
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; Override
Distance : 13

230
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; k
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; k
Distance : 6

231
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; field
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; field
Distance : 6

232
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; Assert
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; Assert
Distance : 6

233
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; void
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; void
Distance : 6

234
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; Override
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; Override
Distance : 6

235
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; Fraction
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; Fraction
Distance : 6

236
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; assertEquals
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; assertEquals
Distance : 6

237
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; Assert
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; Assert
Distance : 13

238
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

239
Tree	Iterator iter = res.entries . iterator () . iterator () ; void
Code	Iterator iter = res.entries . iterator () . iterator () ; void
Distance : 5

240
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; field
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; field
Distance : 13

241
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; k
Distance : 13

242
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , false ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , false ) ;
Distance : 7

243
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 11

244
Tree	Iterator iter = res.entries . iterator () . iterator () ; Fraction
Code	Iterator iter = res.entries . iterator () . iterator () ; Fraction
Distance : 5

245
Tree	Iterator iter = iter . iterator ( super(); ) ;
Code	Iterator iter = iter . iterator ( super(); ) ;
Distance : 4

246
Tree	Iterator iter = res.entries . iterator () . iterator () ; Override
Code	Iterator iter = res.entries . iterator () . iterator () ; Override
Distance : 5

247
Tree	Iterator iter = res.entries . iterator () . iterator () ; Assert
Code	Iterator iter = res.entries . iterator () . iterator () ; Assert
Distance : 5

248
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Distance : 15

249
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; field
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; field
Distance : 15

250
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Assert
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Assert
Distance : 15

251
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; void
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; void
Distance : 15

252
Tree	Iterator iter = iter . iterator ( continue; ) ;
Code	Iterator iter = iter . iterator ( continue; ) ;
Distance : 4

253
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Distance : 15

254
Tree	Iterator iter = iter . iterator ( iter . class ) ;
Code	Iterator iter = iter . iterator ( iter . class ) ;
Distance : 6

255
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Fraction
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Fraction
Distance : 5

256
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; assertEquals
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; assertEquals
Distance : 11

257
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; nCols
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; nCols
Distance : 11

258
Tree	Iterator iter = res.entries . iterator () ;
Code	Iterator iter = res.entries . iterator () ;
Distance : 1

259
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 12

260
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; k
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; k
Distance : 11

261
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , true ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , true ) ;
Distance : 7

262
Tree	Iterator iter = res.entries . iterator () . iterator () ; nCols
Code	Iterator iter = res.entries . iterator () . iterator () ; nCols
Distance : 5

263
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; field
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; field
Distance : 11

264
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; nCols
Distance : 8

265
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; k
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; k
Distance : 8

266
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; field
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; field
Distance : 8

267
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; Assert
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; Assert
Distance : 8

268
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; void
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; void
Distance : 8

269
Tree	Iterator entries ;
Code	Iterator entries ;
Distance : 5

270
Tree	Iterator iter = res.entries . iterator () . iterator () ; k
Code	Iterator iter = res.entries . iterator () . iterator () ; k
Distance : 5

271
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 11

272
Tree	Iterator iter = this . entries . iterator () ;
Code	Iterator iter = this . entries . iterator () ;
Distance : 2

273
Tree	Iterator iter = iter . iterator ( iter , null ) ;
Code	Iterator iter = iter . iterator ( iter , null ) ;
Distance : 6

274
Tree	Iterator iter = new Iterator () . iterator () ; assertEquals
Code	Iterator iter = new Iterator () . iterator () ; assertEquals
Distance : 4

275
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 10

276
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 9

277
Tree	Iterator iter = iter . iterator ( break; ) ;
Code	Iterator iter = iter . iterator ( break; ) ;
Distance : 4

278
Tree	Iterator iter = iter . iterator ( entries , null ) ;
Code	Iterator iter = iter . iterator ( entries , null ) ;
Distance : 6

279
Tree	Iterator iter = iter . iterator ( entries . class ) ;
Code	Iterator iter = iter . iterator ( entries . class ) ;
Distance : 6

280
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; nCols
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; nCols
Distance : 6

281
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

282
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 10

283
Tree	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ;
Distance : 6

284
Tree	Iterator entries = iter . iterator ( iter , null ) ;
Code	Iterator entries = iter . iterator ( iter , null ) ;
Distance : 7

285
Tree	final Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	final Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

286
Tree	Iterator entries = entries . iterator ( entries , null ) ;
Code	Iterator entries = entries . iterator ( entries , null ) ;
Distance : 6

287
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Distance : 7

288
Tree	Iterator entries = iterator ( super(); , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( super(); , STRING_CONSTANT ) ;
Distance : 7

289
Tree	abstract Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	abstract Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 6

290
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; void
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; void
Distance : 5

291
Tree	Iterator entries = this . iter . iterator () ;
Code	Iterator entries = this . iter . iterator () ;
Distance : 4

292
Tree	Iterator iter = iterator ( entries . class ) ;
Code	Iterator iter = iterator ( entries . class ) ;
Distance : 4

293
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; void
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; void
Distance : 13

294
Tree	Iterator iter = iter . iterator ( iter , this . iter ) ;
Code	Iterator iter = iter . iterator ( iter , this . iter ) ;
Distance : 8

295
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; field
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; field
Distance : 5

296
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; UnivariateRealFunction
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; UnivariateRealFunction
Distance : 9

297
Tree	Iterator entries = entries . iterator ( entries . class ) ;
Code	Iterator entries = entries . iterator ( entries . class ) ;
Distance : 6

298
Tree	Iterator iter = entries ( iter . class , iter ) ;
Code	Iterator iter = entries ( iter . class , iter ) ;
Distance : 6

299
Tree	Iterator iter = iterator ( Iterator , Iterator ) ; assertEquals
Code	Iterator iter = iterator ( Iterator , Iterator ) ; assertEquals
Distance : 7

300
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; field
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; field
Distance : 7

301
Tree	Iterator iter ; Assert
Code	Iterator iter ; Assert
Distance : 6

302
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; k
Distance : 10

303
Tree	Iterator iter = iterator ( iter . class ) ; point
Code	Iterator iter = iterator ( iter . class ) ; point
Distance : 6

304
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

305
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ;
Distance : 6

306
Tree	Iterator entries = iter . iterator ( iter . class ) ;
Code	Iterator entries = iter . iterator ( iter . class ) ;
Distance : 7

307
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , false ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , false ) ;
Distance : 5

308
Tree	Iterator iter = this . entries . iterator () ; UnivariateRealFunction
Code	Iterator iter = this . entries . iterator () ; UnivariateRealFunction
Distance : 3

309
Tree	Iterator iter = iterator ( iter . class ) ; UnivariateRealFunction
Code	Iterator iter = iterator ( iter . class ) ; UnivariateRealFunction
Distance : 6

310
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; +
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; +
Distance : 7

311
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; super
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; super
Distance : 7

312
Tree	Iterator iter = iterator ( Iterator , Iterator ) ; Fraction
Code	Iterator iter = iterator ( Iterator , Iterator ) ; Fraction
Distance : 7

313
Tree	Iterator iter = iterator ( return; , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( return; , STRING_CONSTANT ) ;
Distance : 6

314
Tree	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; UnivariateRealFunction
Code	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; UnivariateRealFunction
Distance : 9

315
Tree	protected Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	protected Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 6

316
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; Array2DRowFieldMatrix
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; Array2DRowFieldMatrix
Distance : 5

317
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ;
Distance : 7

318
Tree	Iterator entries = iterator ( return; , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( return; , STRING_CONSTANT ) ;
Distance : 7

319
Tree	Iterator entries = iterator ( continue; , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( continue; , STRING_CONSTANT ) ;
Distance : 7

320
Tree	Iterator entries = this . iter . iterator () . iterator () ;
Code	Iterator entries = this . iter . iterator () . iterator () ;
Distance : 7

321
Tree	Iterator iter = iterator ( Iterator , Iterator ) ;
Code	Iterator iter = iterator ( Iterator , Iterator ) ;
Distance : 6

322
Tree	Iterator iter = iter . iterator ( entries , super(); ) ;
Code	Iterator iter = iter . iterator ( entries , super(); ) ;
Distance : 6

323
Tree	Iterator iter = iter . iterator ( entries , this . entries ) ;
Code	Iterator iter = iter . iterator ( entries , this . entries ) ;
Distance : 8

324
Tree	Iterator entries = this . entries . iterator ( Iterator ) ;
Code	Iterator entries = this . entries . iterator ( Iterator ) ;
Distance : 6

325
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ;
Distance : 6

326
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT , Iterator ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT , Iterator ) ;
Distance : 5

327
Tree	Iterator iter = iterator ( STRING_CONSTANT , entries , iter ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , entries , iter ) ;
Distance : 7

328
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ;
Distance : 9

329
Tree	Iterator entries = iterator ( this . entries ) ;
Code	Iterator entries = iterator ( this . entries ) ;
Distance : 6

330
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; Array2DRowFieldMatrix
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; Array2DRowFieldMatrix
Distance : 7

331
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Distance : 9

332
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; void
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; void
Distance : 7

333
Tree	Iterator iter = entries ( iter . class , entries ) ;
Code	Iterator iter = entries ( iter . class , entries ) ;
Distance : 6

334
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; UnivariateRealFunction
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; UnivariateRealFunction
Distance : 7

335
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; k
Distance : 7

336
Tree	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; Array2DRowFieldMatrix
Code	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; Array2DRowFieldMatrix
Distance : 7

337
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; point
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; point
Distance : 7

338
Tree	Iterator iter = iter ( iter . class , entries ) ;
Code	Iterator iter = iter ( iter . class , entries ) ;
Distance : 7

339
Tree	Iterator iter = res.entries . iterator () ; nCols
Code	Iterator iter = res.entries . iterator () ; nCols
Distance : 2

340
Tree	Iterator iter = iterator () ; Override
Code	Iterator iter = iterator () ; Override
Distance : 3

341
Tree	Iterator iter = new Iterator () . iterator () ; Fraction
Code	Iterator iter = new Iterator () . iterator () ; Fraction
Distance : 4

342
Tree	Iterator iter = res.entries . iterator () ; nCols
Code	Iterator iter = res.entries . iterator () ; nCols
Distance : 2

343
Tree	Iterator iter = this . iter . iterator ( Iterator ) ;
Code	Iterator iter = this . iter . iterator ( Iterator ) ;
Distance : 6

344
Tree	Iterator iter = iterator ( iter . class ) ; super
Code	Iterator iter = iterator ( iter . class ) ; super
Distance : 6

345
Tree	Iterator iter = entries . iterator ( break; ) ;
Code	Iterator iter = entries . iterator ( break; ) ;
Distance : 3

346
Tree	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; MatrixUtils
Code	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; MatrixUtils
Distance : 7

347
Tree	Iterator iter = iterator ( Iterator , Iterator ) ; Override
Code	Iterator iter = iterator ( Iterator , Iterator ) ; Override
Distance : 7

348
Tree	Iterator iter = iterator () ;
Code	Iterator iter = iterator () ;
Distance : 2

349
Tree	Iterator iter ; field
Code	Iterator iter ; field
Distance : 6

350
Tree	Iterator iter = iterator ( Iterator , Iterator ) ; void
Code	Iterator iter = iterator ( Iterator , Iterator ) ; void
Distance : 7

351
Tree	Iterator iter ; Override
Code	Iterator iter ; Override
Distance : 6

352
Tree	Iterator entries = entries . iterator ( iter . class ) ;
Code	Iterator entries = entries . iterator ( iter . class ) ;
Distance : 6

353
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; MatrixUtils
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; MatrixUtils
Distance : 7

354
Tree	Iterator entries = iter ( entries . class , entries ) ;
Code	Iterator entries = iter ( entries . class , entries ) ;
Distance : 7

355
Tree	Iterator iter ; Fraction
Code	Iterator iter ; Fraction
Distance : 6

356
Tree	Iterator iter = iterator ( Iterator , Iterator ) ; Assert
Code	Iterator iter = iterator ( Iterator , Iterator ) ; Assert
Distance : 7

357
Tree	Iterator entries = this . iter . iterator ( Iterator ) ;
Code	Iterator entries = this . iter . iterator ( Iterator ) ;
Distance : 7

358
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; assertEquals
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; assertEquals
Distance : 10

359
Tree	Iterator entries = entries . iterator ( Iterator , NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( Iterator , NUMBER_CONSTANT ) ;
Distance : 6

360
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; point
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; point
Distance : 9

361
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; assertEquals
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; assertEquals
Distance : 15

362
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; void
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; void
Distance : 5

363
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; assertEquals
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; assertEquals
Distance : 8

364
Tree	Iterator iter ; assertEquals
Code	Iterator iter ; assertEquals
Distance : 6

365
Tree	Iterator iter = iterator () ; nCols
Code	Iterator iter = iterator () ; nCols
Distance : 3

366
Tree	static Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	static Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

367
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; super
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; super
Distance : 9

368
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , true ) ; MathArrays
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , true ) ; MathArrays
Distance : 7

369
Tree	Iterator iter = iterator ( Iterator , Iterator ) ; field
Code	Iterator iter = iterator ( Iterator , Iterator ) ; field
Distance : 7

370
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; +
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; +
Distance : 9

371
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; +
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; +
Distance : 9

372
Tree	Iterator iter = res.entries . iterator () . iterator () ; field
Code	Iterator iter = res.entries . iterator () . iterator () ; field
Distance : 5

373
Tree	Iterator entries = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 13

374
Tree	Iterator iter = entries . iterator ( iter , this . iter ) ;
Code	Iterator iter = entries . iterator ( iter , this . iter ) ;
Distance : 7

375
Tree	Iterator entries = iterator ( Iterator ) . iterator () ;
Code	Iterator entries = iterator ( Iterator ) . iterator () ;
Distance : 5

376
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; assertEquals
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; assertEquals
Distance : 7

377
Tree	Iterator iter = new Iterator () . iterator () ; Override
Code	Iterator iter = new Iterator () . iterator () ; Override
Distance : 4

378
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ;
Distance : 4

379
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 6

380
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; nCols
Distance : 5

381
Tree	Iterator iter = entries . iterator ( entries , null ) ;
Code	Iterator iter = entries . iterator ( entries , null ) ;
Distance : 5

382
Tree	Iterator iter = entries . iterator ( super(); ) ;
Code	Iterator iter = entries . iterator ( super(); ) ;
Distance : 3

383
Tree	Iterator entries = iter ( iter . class , iter ) ;
Code	Iterator entries = iter ( iter . class , iter ) ;
Distance : 8

384
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; Override
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; Override
Distance : 10

385
Tree	Iterator iter = iter ( entries . class , iter ) ;
Code	Iterator iter = iter ( entries . class , iter ) ;
Distance : 6

386
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Distance : 11

387
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; nCols
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; nCols
Distance : 7

388
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; field
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; field
Distance : 9

389
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; super
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; super
Distance : 9

390
Tree	Iterator iter = iterator () ; k
Code	Iterator iter = iterator () ; k
Distance : 3

391
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; Fraction
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; Fraction
Distance : 11

392
Tree	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; point
Code	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; point
Distance : 7

393
Tree	Iterator iter = iterator ( this . iter ) ; Array2DRowFieldMatrix
Code	Iterator iter = iterator ( this . iter ) ; Array2DRowFieldMatrix
Distance : 6

394
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; nCols
Distance : 10

395
Tree	Iterator iter = iterator ( Iterator , Iterator ) ; k
Code	Iterator iter = iterator ( Iterator , Iterator ) ; k
Distance : 7

396
Tree	Iterator iter = iterator ( Iterator ) . iterator () ; nCols
Code	Iterator iter = iterator ( Iterator ) . iterator () ; nCols
Distance : 5

397
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Fraction
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Fraction
Distance : 5

398
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; nCols
Distance : 13

399
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Override
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Override
Distance : 15

400
Tree	Iterator iter = res.entries . iterator () ; assertEquals
Code	Iterator iter = res.entries . iterator () ; assertEquals
Distance : 2

401
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; UnivariateRealFunction
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; UnivariateRealFunction
Distance : 9

402
Tree	Iterator iter = new Iterator () . iterator () ; void
Code	Iterator iter = new Iterator () . iterator () ; void
Distance : 4

403
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; assertEquals
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; assertEquals
Distance : 5

404
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

405
Tree	Iterator iter = this . entries . iterator ( Iterator ) ; point
Code	Iterator iter = this . entries . iterator ( Iterator ) ; point
Distance : 6

406
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; point
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; point
Distance : 9

407
Tree	Iterator iter = iterator ( this . iter ) ; super
Code	Iterator iter = iterator ( this . iter ) ; super
Distance : 6

408
Tree	Iterator iter ; void
Code	Iterator iter ; void
Distance : 6

409
Tree	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; UnivariateRealFunction
Code	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; UnivariateRealFunction
Distance : 7

410
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT ) ;
Distance : 4

411
Tree	Iterator iter ; nCols
Code	Iterator iter ; nCols
Distance : 6

412
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; MatrixUtils
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; MatrixUtils
Distance : 9

413
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Assert
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Assert
Distance : 9

414
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

415
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; Fraction
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; Fraction
Distance : 10

416
Tree	Iterator entries = iterator ( Iterator , Iterator ) ;
Code	Iterator entries = iterator ( Iterator , Iterator ) ;
Distance : 7

417
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; void
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; void
Distance : 9

418
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; Array2DRowFieldMatrix
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; Array2DRowFieldMatrix
Distance : 9

419
Tree	Iterator iter ; k
Code	Iterator iter ; k
Distance : 6

420
Tree	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; +
Code	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; +
Distance : 9

421
Tree	Iterator iter = this . entries . iterator () . iterator () ;
Code	Iterator iter = this . entries . iterator () . iterator () ;
Distance : 5

422
Tree	Iterator iter = iterator ( null , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( null , STRING_CONSTANT ) ;
Distance : 6

423
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Distance : 7

424
Tree	Iterator iter = this . iter . iterator () ;
Code	Iterator iter = this . iter . iterator () ;
Distance : 3

425
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

426
Tree	Iterator iter = new Iterator () . iterator () ; Assert
Code	Iterator iter = new Iterator () . iterator () ; Assert
Distance : 4

427
Tree	Iterator iter = entries . iterator ( Iterator , NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( Iterator , NUMBER_CONSTANT ) ;
Distance : 5

428
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; field
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; field
Distance : 11

429
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 14

430
Tree	Iterator iter = this . entries . iterator () ; MatrixUtils
Code	Iterator iter = this . entries . iterator () ; MatrixUtils
Distance : 3

431
Tree	Iterator iter = iter . iterator ( return; ) ;
Code	Iterator iter = iter . iterator ( return; ) ;
Distance : 4

432
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; k
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; k
Distance : 5

433
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; Fraction
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; Fraction
Distance : 8

434
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT , Iterator ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT , Iterator ) ;
Distance : 7

435
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; Override
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; Override
Distance : 11

436
Tree	Iterator iter = iterator ( this . iter ) ; MatrixUtils
Code	Iterator iter = iterator ( this . iter ) ; MatrixUtils
Distance : 6

437
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Assert
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Assert
Distance : 11

438
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; k
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; k
Distance : 7

439
Tree	Iterator iter = new Iterator () . iterator () ; nCols
Code	Iterator iter = new Iterator () . iterator () ; nCols
Distance : 4

440
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; void
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; void
Distance : 11

441
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; MatrixUtils
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; MatrixUtils
Distance : 11

442
Tree	Iterator iter = this . entries . iterator () ; super
Code	Iterator iter = this . entries . iterator () ; super
Distance : 3

443
Tree	Iterator iter = iterator ( Iterator , Iterator ) ; nCols
Code	Iterator iter = iterator ( Iterator , Iterator ) ; nCols
Distance : 7

444
Tree	Iterator iter = iterator ( Iterator ) . iterator () ; k
Code	Iterator iter = iterator ( Iterator ) . iterator () ; k
Distance : 5

445
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; nCols
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; nCols
Distance : 5

446
Tree	Iterator iter = res.entries . iterator () . iterator () ; assertEquals
Code	Iterator iter = res.entries . iterator () . iterator () ; assertEquals
Distance : 5

447
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Fraction
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Fraction
Distance : 15

448
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 7

449
Tree	Iterator iter = iter . iterator () ; MatrixUtils
Code	Iterator iter = iter . iterator () ; MatrixUtils
Distance : 2

450
Tree	Iterator iter = iterator ( this . iter ) ; point
Code	Iterator iter = iterator ( this . iter ) ; point
Distance : 6

451
Tree	Iterator entries = new Iterator ( STRING_CONSTANT ) . iterator () ;
Code	Iterator entries = new Iterator ( STRING_CONSTANT ) . iterator () ;
Distance : 6

452
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 3

453
Tree	Iterator iter = iterator ( Iterator ) ;
Code	Iterator iter = iterator ( Iterator ) ;
Distance : 4

454
Tree	Iterator iter = new Iterator () . iterator () ;
Code	Iterator iter = new Iterator () . iterator () ;
Distance : 3

455
Tree	Iterator iter = iter ( iter . class , iter ) ;
Code	Iterator iter = iter ( iter . class , iter ) ;
Distance : 7

456
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; void
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; void
Distance : 11

457
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; Override
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; Override
Distance : 8

458
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; Assert
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; Assert
Distance : 11

459
Tree	Iterator iter = iterator ( this . iter ) ; UnivariateRealFunction
Code	Iterator iter = iterator ( this . iter ) ; UnivariateRealFunction
Distance : 6

========================================================================


========================================================================
Example Number: 14
Parent Code is: 
Iterator iter = res.entries . iterator () ;
-------------------------------------------------------------------------------
Child code is: 
Iterator iter = entries . iterator () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (40{val=res.entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (800{val=entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/49/parent/src_main_java_org_apache_commons_math_linear_OpenMapRealVector.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 460
Correct
========================================================================
True

0
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

1
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , true ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , true ) ;
Distance : 6

2
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

3
Tree	Iterator iter ;
Code	Iterator iter ;
Distance : 5

4
Tree	Iterator iter = iter . iterator () ;
Code	Iterator iter = iter . iterator () ;
Distance : 1

5
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

6
Tree	Iterator iter = iter . iterator ( null ) ;
Code	Iterator iter = iter . iterator ( null ) ;
Distance : 4

7
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

8
Tree	Iterator iter = iterator ( Iterator ) . iterator () ; Fraction
Code	Iterator iter = iterator ( Iterator ) . iterator () ; Fraction
Distance : 5

9
Tree	Iterator iter = iterator ( Iterator ) . iterator () ; assertEquals
Code	Iterator iter = iterator ( Iterator ) . iterator () ; assertEquals
Distance : 5

10
Tree	Iterator entries = res.entries . iterator () ;
Code	Iterator entries = res.entries . iterator () ;
Distance : 2

11
Tree	Iterator iter = res.entries . iterator () ; k
Code	Iterator iter = res.entries . iterator () ; k
Distance : 2

12
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Distance : 8

13
Tree	Iterator iter = iter . iterator ( entries , this . iter ) ;
Code	Iterator iter = iter . iterator ( entries , this . iter ) ;
Distance : 8

14
Tree	Iterator iter = iterator ( Iterator ) ; void
Code	Iterator iter = iterator ( Iterator ) ; void
Distance : 5

15
Tree	Iterator iter = iterator ( Iterator ) ; Override
Code	Iterator iter = iterator ( Iterator ) ; Override
Distance : 5

16
Tree	Iterator iter = iterator ( Iterator ) ; nCols
Code	Iterator iter = iterator ( Iterator ) ; nCols
Distance : 5

17
Tree	Iterator iter = iterator ( Iterator ) ; k
Code	Iterator iter = iterator ( Iterator ) ; k
Distance : 5

18
Tree	Iterator iter = iterator ( Iterator ) ; field
Code	Iterator iter = iterator ( Iterator ) ; field
Distance : 5

19
Tree	Iterator iter = iterator ( Iterator ) ; Assert
Code	Iterator iter = iterator ( Iterator ) ; Assert
Distance : 5

20
Tree	Iterator iter = iterator ( Iterator ) ; assertEquals
Code	Iterator iter = iterator ( Iterator ) ; assertEquals
Distance : 5

21
Tree	Iterator iter = iterator ( Iterator ) ; Fraction
Code	Iterator iter = iterator ( Iterator ) ; Fraction
Distance : 5

22
Tree	Iterator iter = iterator ( Iterator ) . iterator () ; void
Code	Iterator iter = iterator ( Iterator ) . iterator () ; void
Distance : 5

23
Tree	Iterator entries = res.entries . iterator () ;
Code	Iterator entries = res.entries . iterator () ;
Distance : 2

24
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 11

25
Tree	Iterator iter = entries . iterator ( iter , null ) ;
Code	Iterator iter = entries . iterator ( iter , null ) ;
Distance : 5

26
Tree	Iterator iter = entries . iterator ( entries . class ) ;
Code	Iterator iter = entries . iterator ( entries . class ) ;
Distance : 5

27
Tree	Iterator iter = iterator ( iter . class ) ; +
Code	Iterator iter = iterator ( iter . class ) ; +
Distance : 6

28
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Distance : 9

29
Tree	Iterator iter = res.entries . iterator () ; field
Code	Iterator iter = res.entries . iterator () ; field
Distance : 2

30
Tree	Iterator iter = iterator ( Iterator ) . iterator () ; Override
Code	Iterator iter = iterator ( Iterator ) . iterator () ; Override
Distance : 5

31
Tree	Iterator iter = res.entries . iterator () ; Assert
Code	Iterator iter = res.entries . iterator () ; Assert
Distance : 2

32
Tree	Iterator iter = res.entries . iterator () ; Override
Code	Iterator iter = res.entries . iterator () ; Override
Distance : 2

33
Tree	Iterator iter = res.entries . iterator () ; Fraction
Code	Iterator iter = res.entries . iterator () ; Fraction
Distance : 2

34
Tree	Iterator iter = res.entries . iterator () ; assertEquals
Code	Iterator iter = res.entries . iterator () ; assertEquals
Distance : 2

35
Tree	Iterator iter = iterator ( break; , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( break; , STRING_CONSTANT ) ;
Distance : 6

36
Tree	Iterator iter = iterator ( Iterator ) . iterator () ; field
Code	Iterator iter = iterator ( Iterator ) . iterator () ; field
Distance : 5

37
Tree	Iterator iter = iterator ( Iterator ) . iterator () ; Assert
Code	Iterator iter = iterator ( Iterator ) . iterator () ; Assert
Distance : 5

38
Tree	Iterator iter = res.entries . iterator () ; void
Code	Iterator iter = res.entries . iterator () ; void
Distance : 2

39
Tree	Iterator entries = this . entries . iterator () ;
Code	Iterator entries = this . entries . iterator () ;
Distance : 3

40
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; void
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; void
Distance : 5

41
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; field
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; field
Distance : 5

42
Tree	Iterator iter = iterator ( iter . class ) ; MatrixUtils
Code	Iterator iter = iterator ( iter . class ) ; MatrixUtils
Distance : 6

43
Tree	Iterator entries = entries . iterator ( null ) ;
Code	Iterator entries = entries . iterator ( null ) ;
Distance : 4

44
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 15

45
Tree	Iterator entries = iterator ( null , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( null , STRING_CONSTANT ) ;
Distance : 7

46
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Override
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Override
Distance : 9

47
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Fraction
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Fraction
Distance : 9

48
Tree	Iterator iter = iterator ( iter . class ) ; Array2DRowFieldMatrix
Code	Iterator iter = iterator ( iter . class ) ; Array2DRowFieldMatrix
Distance : 6

49
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; assertEquals
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; assertEquals
Distance : 9

50
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Distance : 11

51
Tree	Iterator entries = iterator ( STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT ) ;
Distance : 5

52
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 7

53
Tree	Iterator entries = iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iterator ( NUMBER_CONSTANT ) ;
Distance : 5

54
Tree	Iterator entries = iterator () ;
Code	Iterator entries = iterator () ;
Distance : 3

55
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Override
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Override
Distance : 11

56
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , true ) ; v.length
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , true ) ; v.length
Distance : 7

57
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; k
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; k
Distance : 5

58
Tree	Iterator iter = iterator ( this . entries ) ;
Code	Iterator iter = iterator ( this . entries ) ;
Distance : 5

59
Tree	Iterator entries = entries . iterator () ;
Code	Iterator entries = entries . iterator () ;
Distance : 1

60
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Assert
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Assert
Distance : 5

61
Tree	Iterator iter = iter ( entries . class , entries ) ;
Code	Iterator iter = iter ( entries . class , entries ) ;
Distance : 6

62
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Override
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Override
Distance : 5

63
Tree	Iterator iter = res.entries . iterator () ;
Code	Iterator iter = res.entries . iterator () ;
Distance : 1

64
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , true ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , true ) ;
Distance : 6

65
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

66
Tree	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

67
Tree	Iterator entries = new Iterator () . iterator () ;
Code	Iterator entries = new Iterator () . iterator () ;
Distance : 4

68
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Array2DRowFieldMatrix
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Array2DRowFieldMatrix
Distance : 9

69
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; MatrixUtils
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; MatrixUtils
Distance : 9

70
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; point
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; point
Distance : 9

71
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; UnivariateRealFunction
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; UnivariateRealFunction
Distance : 9

72
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; super
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; super
Distance : 9

73
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; +
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; +
Distance : 9

74
Tree	Iterator iter = res.entries . iterator () . iterator () ;
Code	Iterator iter = res.entries . iterator () . iterator () ;
Distance : 4

75
Tree	Iterator iter = entries . iterator ( iter . class ) ;
Code	Iterator iter = entries . iterator ( iter . class ) ;
Distance : 5

76
Tree	Iterator iter = iterator ( super(); , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( super(); , STRING_CONSTANT ) ;
Distance : 6

77
Tree	Iterator entries = iter . iterator ( entries , null ) ;
Code	Iterator entries = iter . iterator ( entries , null ) ;
Distance : 7

78
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; Assert
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; Assert
Distance : 7

79
Tree	Iterator iter = this . entries . iterator () ; Array2DRowFieldMatrix
Code	Iterator iter = this . entries . iterator () ; Array2DRowFieldMatrix
Distance : 3

80
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; void
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; void
Distance : 7

81
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; field
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; field
Distance : 10

82
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; Fraction
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; Fraction
Distance : 7

83
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; assertEquals
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; assertEquals
Distance : 7

84
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; Override
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; Override
Distance : 7

85
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 12

86
Tree	Iterator iter = iterator ( Iterator ) . iterator () ;
Code	Iterator iter = iterator ( Iterator ) . iterator () ;
Distance : 4

87
Tree	Iterator entries = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ;
Distance : 10

88
Tree	Iterator entries = iterator ( STRING_CONSTANT , Iterator . iterator () ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , Iterator . iterator () ) ;
Distance : 7

89
Tree	Iterator entries = iterator ( STRING_CONSTANT , entries , iter ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , entries , iter ) ;
Distance : 8

90
Tree	Iterator entries = iterator ( STRING_CONSTANT , iter , iter ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , iter , iter ) ;
Distance : 9

91
Tree	Iterator entries = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ;
Distance : 8

92
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Distance : 8

93
Tree	Iterator iter = entries . iterator ( iter , this . entries ) ;
Code	Iterator iter = entries . iterator ( iter , this . entries ) ;
Distance : 7

94
Tree	Iterator iter = entries . iterator ( entries , this . entries ) ;
Code	Iterator iter = entries . iterator ( entries , this . entries ) ;
Distance : 7

95
Tree	Iterator entries = iterator ( break; , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( break; , STRING_CONSTANT ) ;
Distance : 7

96
Tree	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ;
Distance : 8

97
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT , Iterator ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT , Iterator ) ;
Distance : 6

98
Tree	Iterator entries = iter . iterator ( iter , this . iter ) ;
Code	Iterator entries = iter . iterator ( iter , this . iter ) ;
Distance : 9

99
Tree	Iterator iter = entries ( entries . class , entries ) ;
Code	Iterator iter = entries ( entries . class , entries ) ;
Distance : 6

100
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Distance : 9

101
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; void
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; void
Distance : 10

102
Tree	Iterator entries = iter . iterator ( entries , this . iter ) ;
Code	Iterator entries = iter . iterator ( entries , this . iter ) ;
Distance : 9

103
Tree	Iterator iter = entries . iterator ( entries , this . iter ) ;
Code	Iterator iter = entries . iterator ( entries , this . iter ) ;
Distance : 7

104
Tree	static Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	static Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 6

105
Tree	Iterator entries = this . entries . iterator () . iterator () ;
Code	Iterator entries = this . entries . iterator () . iterator () ;
Distance : 6

106
Tree	synchronized Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	synchronized Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

107
Tree	private Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	private Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

108
Tree	Iterator entries = res.entries . iterator () . iterator () ;
Code	Iterator entries = res.entries . iterator () . iterator () ;
Distance : 5

109
Tree	Iterator iter = iter . iterator ( iter , this . entries ) ;
Code	Iterator iter = iter . iterator ( iter , this . entries ) ;
Distance : 8

110
Tree	abstract Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	abstract Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

111
Tree	Iterator iter = iter . iterator ( iter , break; ) ;
Code	Iterator iter = iter . iterator ( iter , break; ) ;
Distance : 6

112
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; Assert
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; Assert
Distance : 10

113
Tree	Iterator entries = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator entries = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 11

114
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Fraction
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Fraction
Distance : 11

115
Tree	Iterator entries = iter . iterator ( entries . class ) ;
Code	Iterator entries = iter . iterator ( entries . class ) ;
Distance : 7

116
Tree	protected Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	protected Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

117
Tree	Iterator entries = iter . iterator ( Iterator , NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( Iterator , NUMBER_CONSTANT ) ;
Distance : 7

118
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , false ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , false ) ;
Distance : 6

119
Tree	Iterator iter = iterator ( continue; , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( continue; , STRING_CONSTANT ) ;
Distance : 6

120
Tree	Iterator entries = iterator ( iter . class ) ;
Code	Iterator entries = iterator ( iter . class ) ;
Distance : 6

121
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; Array2DRowFieldMatrix
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; Array2DRowFieldMatrix
Distance : 9

122
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; MatrixUtils
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; MatrixUtils
Distance : 9

123
Tree	Iterator iter = iterator () ; assertEquals
Code	Iterator iter = iterator () ; assertEquals
Distance : 3

124
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; nCols
Distance : 7

125
Tree	Iterator iter = iterator () ; Fraction
Code	Iterator iter = iterator () ; Fraction
Distance : 3

126
Tree	Iterator iter = iterator () ; void
Code	Iterator iter = iterator () ; void
Distance : 3

127
Tree	Iterator iter = iterator () ; Assert
Code	Iterator iter = iterator () ; Assert
Distance : 3

128
Tree	Iterator iter = iterator () ; field
Code	Iterator iter = iterator () ; field
Distance : 3

129
Tree	Iterator iter = this . iter . iterator () . iterator () ;
Code	Iterator iter = this . iter . iterator () . iterator () ;
Distance : 6

130
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; +
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; +
Distance : 5

131
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; super
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; super
Distance : 5

132
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; UnivariateRealFunction
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; UnivariateRealFunction
Distance : 5

133
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; point
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; point
Distance : 5

134
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; MatrixUtils
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; MatrixUtils
Distance : 5

135
Tree	Iterator iter = this . entries . iterator () ; +
Code	Iterator iter = this . entries . iterator () ; +
Distance : 3

136
Tree	Iterator entries = iter ( iter . class , entries ) ;
Code	Iterator entries = iter ( iter . class , entries ) ;
Distance : 8

137
Tree	Iterator iter = this . entries . iterator () ; point
Code	Iterator iter = this . entries . iterator () ; point
Distance : 3

138
Tree	Iterator iter = iter . iterator ( entries , break; ) ;
Code	Iterator iter = iter . iterator ( entries , break; ) ;
Distance : 6

139
Tree	Iterator iter = this . entries . iterator ( Iterator ) ;
Code	Iterator iter = this . entries . iterator ( Iterator ) ;
Distance : 5

140
Tree	Iterator entries = iterator ( Iterator ) ;
Code	Iterator entries = iterator ( Iterator ) ;
Distance : 5

141
Tree	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 7

142
Tree	public Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	public Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

143
Tree	Iterator entries = iterator ( this . iter ) ;
Code	Iterator entries = iterator ( this . iter ) ;
Distance : 6

144
Tree	Iterator entries = iterator ( entries . class ) ;
Code	Iterator entries = iterator ( entries . class ) ;
Distance : 5

145
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Assert
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Assert
Distance : 5

146
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; assertEquals
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; assertEquals
Distance : 11

147
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Override
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Override
Distance : 5

148
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; super
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; super
Distance : 12

149
Tree	Iterator iter = iterator ( this . iter ) ; +
Code	Iterator iter = iterator ( this . iter ) ; +
Distance : 6

150
Tree	Iterator iter = iter . iterator () ; point
Code	Iterator iter = iter . iterator () ; point
Distance : 2

151
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; assertEquals
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; assertEquals
Distance : 5

152
Tree	Iterator iter = this . entries . iterator ( Iterator ) ; +
Code	Iterator iter = this . entries . iterator ( Iterator ) ; +
Distance : 6

153
Tree	Iterator iter = this . entries . iterator ( Iterator ) ; super
Code	Iterator iter = this . entries . iterator ( Iterator ) ; super
Distance : 6

154
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; point
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; point
Distance : 12

155
Tree	Iterator iter = this . entries . iterator ( Iterator ) ; UnivariateRealFunction
Code	Iterator iter = this . entries . iterator ( Iterator ) ; UnivariateRealFunction
Distance : 6

156
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

157
Tree	Iterator iter = iter . iterator () ; UnivariateRealFunction
Code	Iterator iter = iter . iterator () ; UnivariateRealFunction
Distance : 2

158
Tree	Iterator iter = iter . iterator ( entries . class ) ; v.length
Code	Iterator iter = iter . iterator ( entries . class ) ; v.length
Distance : 7

159
Tree	Iterator iter = iter . iterator () ; super
Code	Iterator iter = iter . iterator () ; super
Distance : 2

160
Tree	Iterator iter = iter . iterator () ; +
Code	Iterator iter = iter . iterator () ; +
Distance : 2

161
Tree	Iterator iter = this . entries . iterator ( Iterator ) ; MatrixUtils
Code	Iterator iter = this . entries . iterator ( Iterator ) ; MatrixUtils
Distance : 6

162
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , false ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , false ) ;
Distance : 6

163
Tree	Iterator iter = entries . iterator ( null ) ;
Code	Iterator iter = entries . iterator ( null ) ;
Distance : 3

164
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

165
Tree	Iterator iter = entries . iterator () ;
Code	Iterator iter = entries . iterator () ;
Distance : 0

166
Tree	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; super
Code	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; super
Distance : 9

167
Tree	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; point
Code	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; point
Distance : 9

168
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Array2DRowFieldMatrix
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Array2DRowFieldMatrix
Distance : 11

169
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; MatrixUtils
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; MatrixUtils
Distance : 12

170
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ;
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ;
Distance : 5

171
Tree	Iterator iter = iter . iterator () ; Array2DRowFieldMatrix
Code	Iterator iter = iter . iterator () ; Array2DRowFieldMatrix
Distance : 2

172
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

173
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

174
Tree	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; super
Code	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; super
Distance : 7

175
Tree	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; +
Code	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; +
Distance : 7

176
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; Array2DRowFieldMatrix
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; Array2DRowFieldMatrix
Distance : 12

177
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; UnivariateRealFunction
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; UnivariateRealFunction
Distance : 12

178
Tree	Iterator iter = this . entries . iterator () . iterator () ; +
Code	Iterator iter = this . entries . iterator () . iterator () ; +
Distance : 6

179
Tree	Iterator iter = this . entries . iterator () . iterator () ; super
Code	Iterator iter = this . entries . iterator () . iterator () ; super
Distance : 6

180
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

181
Tree	Iterator iter = this . entries . iterator ( Iterator ) ; Array2DRowFieldMatrix
Code	Iterator iter = this . entries . iterator ( Iterator ) ; Array2DRowFieldMatrix
Distance : 6

182
Tree	Iterator iter = new Iterator () . iterator () ; k
Code	Iterator iter = new Iterator () . iterator () ; k
Distance : 4

183
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; +
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; +
Distance : 12

184
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

185
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Override
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Override
Distance : 7

186
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Fraction
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Fraction
Distance : 7

187
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; k
Distance : 7

188
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; field
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; field
Distance : 7

189
Tree	Iterator iter = this . entries . iterator () . iterator () ; MatrixUtils
Code	Iterator iter = this . entries . iterator () . iterator () ; MatrixUtils
Distance : 6

190
Tree	Iterator iter = this . entries . iterator () . iterator () ; Array2DRowFieldMatrix
Code	Iterator iter = this . entries . iterator () . iterator () ; Array2DRowFieldMatrix
Distance : 6

191
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; void
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; void
Distance : 7

192
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; field
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; field
Distance : 7

193
Tree	Iterator iter = res.entries . iterator () ; Fraction
Code	Iterator iter = res.entries . iterator () ; Fraction
Distance : 2

194
Tree	Iterator iter = res.entries . iterator () ; Override
Code	Iterator iter = res.entries . iterator () ; Override
Distance : 2

195
Tree	Iterator iter = res.entries . iterator () ; k
Code	Iterator iter = res.entries . iterator () ; k
Distance : 2

196
Tree	Iterator iter = res.entries . iterator () ; void
Code	Iterator iter = res.entries . iterator () ; void
Distance : 2

197
Tree	Iterator iter = res.entries . iterator () ; field
Code	Iterator iter = res.entries . iterator () ; field
Distance : 2

198
Tree	Iterator iter = res.entries . iterator () ; Assert
Code	Iterator iter = res.entries . iterator () ; Assert
Distance : 2

199
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; Assert
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; Assert
Distance : 7

200
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Assert
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Assert
Distance : 7

201
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; Override
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; Override
Distance : 7

202
Tree	Iterator iter = this . entries . iterator () . iterator () ; point
Code	Iterator iter = this . entries . iterator () . iterator () ; point
Distance : 6

203
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 11

204
Tree	Iterator iter = this . entries . iterator () . iterator () ; UnivariateRealFunction
Code	Iterator iter = this . entries . iterator () . iterator () ; UnivariateRealFunction
Distance : 6

205
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; Assert
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; Assert
Distance : 5

206
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; Fraction
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; Fraction
Distance : 7

207
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; assertEquals
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; assertEquals
Distance : 7

208
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; +
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; +
Distance : 11

209
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; nCols
Distance : 5

210
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; k
Distance : 5

211
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; field
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; field
Distance : 5

212
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; Override
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; Override
Distance : 5

213
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; Fraction
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; Fraction
Distance : 5

214
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; assertEquals
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; assertEquals
Distance : 5

215
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; super
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; super
Distance : 11

216
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; UnivariateRealFunction
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; UnivariateRealFunction
Distance : 11

217
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; point
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; point
Distance : 11

218
Tree	Iterator iter = iter . iterator ( entries . class ) ; MathArrays
Code	Iterator iter = iter . iterator ( entries . class ) ; MathArrays
Distance : 7

219
Tree	Iterator iter = new Iterator () . iterator () ; field
Code	Iterator iter = new Iterator () . iterator () ; field
Distance : 4

220
Tree	Iterator entries = iter . iterator ( null ) ;
Code	Iterator entries = iter . iterator ( null ) ;
Distance : 5

221
Tree	Iterator entries = iter . iterator () ;
Code	Iterator entries = iter . iterator () ;
Distance : 2

222
Tree	Iterator iter = iterator ( iter . class ) ;
Code	Iterator iter = iterator ( iter . class ) ;
Distance : 5

223
Tree	Iterator iter = iterator ( this . iter ) ;
Code	Iterator iter = iterator ( this . iter ) ;
Distance : 5

224
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , true ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , true ) ;
Distance : 5

225
Tree	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; MatrixUtils
Code	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; MatrixUtils
Distance : 9

226
Tree	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; Array2DRowFieldMatrix
Code	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; Array2DRowFieldMatrix
Distance : 9

227
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; assertEquals
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; assertEquals
Distance : 13

228
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; Fraction
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; Fraction
Distance : 13

229
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; Override
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; Override
Distance : 13

230
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; k
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; k
Distance : 6

231
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; field
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; field
Distance : 6

232
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; Assert
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; Assert
Distance : 6

233
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; void
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; void
Distance : 6

234
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; Override
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; Override
Distance : 6

235
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; Fraction
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; Fraction
Distance : 6

236
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; assertEquals
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; assertEquals
Distance : 6

237
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; Assert
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; Assert
Distance : 13

238
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

239
Tree	Iterator iter = res.entries . iterator () . iterator () ; void
Code	Iterator iter = res.entries . iterator () . iterator () ; void
Distance : 5

240
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; field
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; field
Distance : 13

241
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; k
Distance : 13

242
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , false ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , false ) ;
Distance : 7

243
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 11

244
Tree	Iterator iter = res.entries . iterator () . iterator () ; Fraction
Code	Iterator iter = res.entries . iterator () . iterator () ; Fraction
Distance : 5

245
Tree	Iterator iter = iter . iterator ( super(); ) ;
Code	Iterator iter = iter . iterator ( super(); ) ;
Distance : 4

246
Tree	Iterator iter = res.entries . iterator () . iterator () ; Override
Code	Iterator iter = res.entries . iterator () . iterator () ; Override
Distance : 5

247
Tree	Iterator iter = res.entries . iterator () . iterator () ; Assert
Code	Iterator iter = res.entries . iterator () . iterator () ; Assert
Distance : 5

248
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Distance : 15

249
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; field
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; field
Distance : 15

250
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Assert
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Assert
Distance : 15

251
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; void
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; void
Distance : 15

252
Tree	Iterator iter = iter . iterator ( continue; ) ;
Code	Iterator iter = iter . iterator ( continue; ) ;
Distance : 4

253
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Distance : 15

254
Tree	Iterator iter = iter . iterator ( iter . class ) ;
Code	Iterator iter = iter . iterator ( iter . class ) ;
Distance : 6

255
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Fraction
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Fraction
Distance : 5

256
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; assertEquals
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; assertEquals
Distance : 11

257
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; nCols
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; nCols
Distance : 11

258
Tree	Iterator iter = res.entries . iterator () ;
Code	Iterator iter = res.entries . iterator () ;
Distance : 1

259
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 12

260
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; k
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; k
Distance : 11

261
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , true ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , true ) ;
Distance : 7

262
Tree	Iterator iter = res.entries . iterator () . iterator () ; nCols
Code	Iterator iter = res.entries . iterator () . iterator () ; nCols
Distance : 5

263
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; field
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; field
Distance : 11

264
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; nCols
Distance : 8

265
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; k
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; k
Distance : 8

266
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; field
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; field
Distance : 8

267
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; Assert
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; Assert
Distance : 8

268
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; void
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; void
Distance : 8

269
Tree	Iterator entries ;
Code	Iterator entries ;
Distance : 5

270
Tree	Iterator iter = res.entries . iterator () . iterator () ; k
Code	Iterator iter = res.entries . iterator () . iterator () ; k
Distance : 5

271
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 11

272
Tree	Iterator iter = this . entries . iterator () ;
Code	Iterator iter = this . entries . iterator () ;
Distance : 2

273
Tree	Iterator iter = iter . iterator ( iter , null ) ;
Code	Iterator iter = iter . iterator ( iter , null ) ;
Distance : 6

274
Tree	Iterator iter = new Iterator () . iterator () ; assertEquals
Code	Iterator iter = new Iterator () . iterator () ; assertEquals
Distance : 4

275
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 10

276
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 9

277
Tree	Iterator iter = iter . iterator ( break; ) ;
Code	Iterator iter = iter . iterator ( break; ) ;
Distance : 4

278
Tree	Iterator iter = iter . iterator ( entries , null ) ;
Code	Iterator iter = iter . iterator ( entries , null ) ;
Distance : 6

279
Tree	Iterator iter = iter . iterator ( entries . class ) ;
Code	Iterator iter = iter . iterator ( entries . class ) ;
Distance : 6

280
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; nCols
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; nCols
Distance : 6

281
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

282
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 10

283
Tree	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ;
Distance : 6

284
Tree	Iterator entries = iter . iterator ( iter , null ) ;
Code	Iterator entries = iter . iterator ( iter , null ) ;
Distance : 7

285
Tree	final Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	final Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

286
Tree	Iterator entries = entries . iterator ( entries , null ) ;
Code	Iterator entries = entries . iterator ( entries , null ) ;
Distance : 6

287
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Distance : 7

288
Tree	Iterator entries = iterator ( super(); , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( super(); , STRING_CONSTANT ) ;
Distance : 7

289
Tree	abstract Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	abstract Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 6

290
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; void
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; void
Distance : 5

291
Tree	Iterator entries = this . iter . iterator () ;
Code	Iterator entries = this . iter . iterator () ;
Distance : 4

292
Tree	Iterator iter = iterator ( entries . class ) ;
Code	Iterator iter = iterator ( entries . class ) ;
Distance : 4

293
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; void
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; void
Distance : 13

294
Tree	Iterator iter = iter . iterator ( iter , this . iter ) ;
Code	Iterator iter = iter . iterator ( iter , this . iter ) ;
Distance : 8

295
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; field
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; field
Distance : 5

296
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; UnivariateRealFunction
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; UnivariateRealFunction
Distance : 9

297
Tree	Iterator entries = entries . iterator ( entries . class ) ;
Code	Iterator entries = entries . iterator ( entries . class ) ;
Distance : 6

298
Tree	Iterator iter = entries ( iter . class , iter ) ;
Code	Iterator iter = entries ( iter . class , iter ) ;
Distance : 6

299
Tree	Iterator iter = iterator ( Iterator , Iterator ) ; assertEquals
Code	Iterator iter = iterator ( Iterator , Iterator ) ; assertEquals
Distance : 7

300
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; field
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; field
Distance : 7

301
Tree	Iterator iter ; Assert
Code	Iterator iter ; Assert
Distance : 6

302
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; k
Distance : 10

303
Tree	Iterator iter = iterator ( iter . class ) ; point
Code	Iterator iter = iterator ( iter . class ) ; point
Distance : 6

304
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

305
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ;
Distance : 6

306
Tree	Iterator entries = iter . iterator ( iter . class ) ;
Code	Iterator entries = iter . iterator ( iter . class ) ;
Distance : 7

307
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , false ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , false ) ;
Distance : 5

308
Tree	Iterator iter = this . entries . iterator () ; UnivariateRealFunction
Code	Iterator iter = this . entries . iterator () ; UnivariateRealFunction
Distance : 3

309
Tree	Iterator iter = iterator ( iter . class ) ; UnivariateRealFunction
Code	Iterator iter = iterator ( iter . class ) ; UnivariateRealFunction
Distance : 6

310
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; +
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; +
Distance : 7

311
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; super
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; super
Distance : 7

312
Tree	Iterator iter = iterator ( Iterator , Iterator ) ; Fraction
Code	Iterator iter = iterator ( Iterator , Iterator ) ; Fraction
Distance : 7

313
Tree	Iterator iter = iterator ( return; , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( return; , STRING_CONSTANT ) ;
Distance : 6

314
Tree	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; UnivariateRealFunction
Code	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; UnivariateRealFunction
Distance : 9

315
Tree	protected Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	protected Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 6

316
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; Array2DRowFieldMatrix
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; Array2DRowFieldMatrix
Distance : 5

317
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ;
Distance : 7

318
Tree	Iterator entries = iterator ( return; , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( return; , STRING_CONSTANT ) ;
Distance : 7

319
Tree	Iterator entries = iterator ( continue; , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( continue; , STRING_CONSTANT ) ;
Distance : 7

320
Tree	Iterator entries = this . iter . iterator () . iterator () ;
Code	Iterator entries = this . iter . iterator () . iterator () ;
Distance : 7

321
Tree	Iterator iter = iterator ( Iterator , Iterator ) ;
Code	Iterator iter = iterator ( Iterator , Iterator ) ;
Distance : 6

322
Tree	Iterator iter = iter . iterator ( entries , super(); ) ;
Code	Iterator iter = iter . iterator ( entries , super(); ) ;
Distance : 6

323
Tree	Iterator iter = iter . iterator ( entries , this . entries ) ;
Code	Iterator iter = iter . iterator ( entries , this . entries ) ;
Distance : 8

324
Tree	Iterator entries = this . entries . iterator ( Iterator ) ;
Code	Iterator entries = this . entries . iterator ( Iterator ) ;
Distance : 6

325
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ;
Distance : 6

326
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT , Iterator ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT , Iterator ) ;
Distance : 5

327
Tree	Iterator iter = iterator ( STRING_CONSTANT , entries , iter ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , entries , iter ) ;
Distance : 7

328
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ;
Distance : 9

329
Tree	Iterator entries = iterator ( this . entries ) ;
Code	Iterator entries = iterator ( this . entries ) ;
Distance : 6

330
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; Array2DRowFieldMatrix
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; Array2DRowFieldMatrix
Distance : 7

331
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Distance : 9

332
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; void
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; void
Distance : 7

333
Tree	Iterator iter = entries ( iter . class , entries ) ;
Code	Iterator iter = entries ( iter . class , entries ) ;
Distance : 6

334
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; UnivariateRealFunction
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; UnivariateRealFunction
Distance : 7

335
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; k
Distance : 7

336
Tree	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; Array2DRowFieldMatrix
Code	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; Array2DRowFieldMatrix
Distance : 7

337
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; point
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; point
Distance : 7

338
Tree	Iterator iter = iter ( iter . class , entries ) ;
Code	Iterator iter = iter ( iter . class , entries ) ;
Distance : 7

339
Tree	Iterator iter = res.entries . iterator () ; nCols
Code	Iterator iter = res.entries . iterator () ; nCols
Distance : 2

340
Tree	Iterator iter = iterator () ; Override
Code	Iterator iter = iterator () ; Override
Distance : 3

341
Tree	Iterator iter = new Iterator () . iterator () ; Fraction
Code	Iterator iter = new Iterator () . iterator () ; Fraction
Distance : 4

342
Tree	Iterator iter = res.entries . iterator () ; nCols
Code	Iterator iter = res.entries . iterator () ; nCols
Distance : 2

343
Tree	Iterator iter = this . iter . iterator ( Iterator ) ;
Code	Iterator iter = this . iter . iterator ( Iterator ) ;
Distance : 6

344
Tree	Iterator iter = iterator ( iter . class ) ; super
Code	Iterator iter = iterator ( iter . class ) ; super
Distance : 6

345
Tree	Iterator iter = entries . iterator ( break; ) ;
Code	Iterator iter = entries . iterator ( break; ) ;
Distance : 3

346
Tree	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; MatrixUtils
Code	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; MatrixUtils
Distance : 7

347
Tree	Iterator iter = iterator ( Iterator , Iterator ) ; Override
Code	Iterator iter = iterator ( Iterator , Iterator ) ; Override
Distance : 7

348
Tree	Iterator iter = iterator () ;
Code	Iterator iter = iterator () ;
Distance : 2

349
Tree	Iterator iter ; field
Code	Iterator iter ; field
Distance : 6

350
Tree	Iterator iter = iterator ( Iterator , Iterator ) ; void
Code	Iterator iter = iterator ( Iterator , Iterator ) ; void
Distance : 7

351
Tree	Iterator iter ; Override
Code	Iterator iter ; Override
Distance : 6

352
Tree	Iterator entries = entries . iterator ( iter . class ) ;
Code	Iterator entries = entries . iterator ( iter . class ) ;
Distance : 6

353
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; MatrixUtils
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; MatrixUtils
Distance : 7

354
Tree	Iterator entries = iter ( entries . class , entries ) ;
Code	Iterator entries = iter ( entries . class , entries ) ;
Distance : 7

355
Tree	Iterator iter ; Fraction
Code	Iterator iter ; Fraction
Distance : 6

356
Tree	Iterator iter = iterator ( Iterator , Iterator ) ; Assert
Code	Iterator iter = iterator ( Iterator , Iterator ) ; Assert
Distance : 7

357
Tree	Iterator entries = this . iter . iterator ( Iterator ) ;
Code	Iterator entries = this . iter . iterator ( Iterator ) ;
Distance : 7

358
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; assertEquals
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; assertEquals
Distance : 10

359
Tree	Iterator entries = entries . iterator ( Iterator , NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( Iterator , NUMBER_CONSTANT ) ;
Distance : 6

360
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; point
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; point
Distance : 9

361
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; assertEquals
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; assertEquals
Distance : 15

362
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; void
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; void
Distance : 5

363
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; assertEquals
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; assertEquals
Distance : 8

364
Tree	Iterator iter ; assertEquals
Code	Iterator iter ; assertEquals
Distance : 6

365
Tree	Iterator iter = iterator () ; nCols
Code	Iterator iter = iterator () ; nCols
Distance : 3

366
Tree	static Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	static Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

367
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; super
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; super
Distance : 9

368
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , true ) ; MathArrays
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , true ) ; MathArrays
Distance : 7

369
Tree	Iterator iter = iterator ( Iterator , Iterator ) ; field
Code	Iterator iter = iterator ( Iterator , Iterator ) ; field
Distance : 7

370
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; +
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; +
Distance : 9

371
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; +
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; +
Distance : 9

372
Tree	Iterator iter = res.entries . iterator () . iterator () ; field
Code	Iterator iter = res.entries . iterator () . iterator () ; field
Distance : 5

373
Tree	Iterator entries = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 13

374
Tree	Iterator iter = entries . iterator ( iter , this . iter ) ;
Code	Iterator iter = entries . iterator ( iter , this . iter ) ;
Distance : 7

375
Tree	Iterator entries = iterator ( Iterator ) . iterator () ;
Code	Iterator entries = iterator ( Iterator ) . iterator () ;
Distance : 5

376
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; assertEquals
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; assertEquals
Distance : 7

377
Tree	Iterator iter = new Iterator () . iterator () ; Override
Code	Iterator iter = new Iterator () . iterator () ; Override
Distance : 4

378
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ;
Distance : 4

379
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 6

380
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; nCols
Distance : 5

381
Tree	Iterator iter = entries . iterator ( entries , null ) ;
Code	Iterator iter = entries . iterator ( entries , null ) ;
Distance : 5

382
Tree	Iterator iter = entries . iterator ( super(); ) ;
Code	Iterator iter = entries . iterator ( super(); ) ;
Distance : 3

383
Tree	Iterator entries = iter ( iter . class , iter ) ;
Code	Iterator entries = iter ( iter . class , iter ) ;
Distance : 8

384
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; Override
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; Override
Distance : 10

385
Tree	Iterator iter = iter ( entries . class , iter ) ;
Code	Iterator iter = iter ( entries . class , iter ) ;
Distance : 6

386
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Distance : 11

387
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; nCols
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; nCols
Distance : 7

388
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; field
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; field
Distance : 9

389
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; super
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; super
Distance : 9

390
Tree	Iterator iter = iterator () ; k
Code	Iterator iter = iterator () ; k
Distance : 3

391
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; Fraction
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; Fraction
Distance : 11

392
Tree	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; point
Code	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; point
Distance : 7

393
Tree	Iterator iter = iterator ( this . iter ) ; Array2DRowFieldMatrix
Code	Iterator iter = iterator ( this . iter ) ; Array2DRowFieldMatrix
Distance : 6

394
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; nCols
Distance : 10

395
Tree	Iterator iter = iterator ( Iterator , Iterator ) ; k
Code	Iterator iter = iterator ( Iterator , Iterator ) ; k
Distance : 7

396
Tree	Iterator iter = iterator ( Iterator ) . iterator () ; nCols
Code	Iterator iter = iterator ( Iterator ) . iterator () ; nCols
Distance : 5

397
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Fraction
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Fraction
Distance : 5

398
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; nCols
Distance : 13

399
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Override
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Override
Distance : 15

400
Tree	Iterator iter = res.entries . iterator () ; assertEquals
Code	Iterator iter = res.entries . iterator () ; assertEquals
Distance : 2

401
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; UnivariateRealFunction
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; UnivariateRealFunction
Distance : 9

402
Tree	Iterator iter = new Iterator () . iterator () ; void
Code	Iterator iter = new Iterator () . iterator () ; void
Distance : 4

403
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; assertEquals
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; assertEquals
Distance : 5

404
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

405
Tree	Iterator iter = this . entries . iterator ( Iterator ) ; point
Code	Iterator iter = this . entries . iterator ( Iterator ) ; point
Distance : 6

406
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; point
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; point
Distance : 9

407
Tree	Iterator iter = iterator ( this . iter ) ; super
Code	Iterator iter = iterator ( this . iter ) ; super
Distance : 6

408
Tree	Iterator iter ; void
Code	Iterator iter ; void
Distance : 6

409
Tree	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; UnivariateRealFunction
Code	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; UnivariateRealFunction
Distance : 7

410
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT ) ;
Distance : 4

411
Tree	Iterator iter ; nCols
Code	Iterator iter ; nCols
Distance : 6

412
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; MatrixUtils
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; MatrixUtils
Distance : 9

413
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Assert
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Assert
Distance : 9

414
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

415
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; Fraction
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; Fraction
Distance : 10

416
Tree	Iterator entries = iterator ( Iterator , Iterator ) ;
Code	Iterator entries = iterator ( Iterator , Iterator ) ;
Distance : 7

417
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; void
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; void
Distance : 9

418
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; Array2DRowFieldMatrix
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; Array2DRowFieldMatrix
Distance : 9

419
Tree	Iterator iter ; k
Code	Iterator iter ; k
Distance : 6

420
Tree	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; +
Code	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; +
Distance : 9

421
Tree	Iterator iter = this . entries . iterator () . iterator () ;
Code	Iterator iter = this . entries . iterator () . iterator () ;
Distance : 5

422
Tree	Iterator iter = iterator ( null , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( null , STRING_CONSTANT ) ;
Distance : 6

423
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Distance : 7

424
Tree	Iterator iter = this . iter . iterator () ;
Code	Iterator iter = this . iter . iterator () ;
Distance : 3

425
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

426
Tree	Iterator iter = new Iterator () . iterator () ; Assert
Code	Iterator iter = new Iterator () . iterator () ; Assert
Distance : 4

427
Tree	Iterator iter = entries . iterator ( Iterator , NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( Iterator , NUMBER_CONSTANT ) ;
Distance : 5

428
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; field
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; field
Distance : 11

429
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 14

430
Tree	Iterator iter = this . entries . iterator () ; MatrixUtils
Code	Iterator iter = this . entries . iterator () ; MatrixUtils
Distance : 3

431
Tree	Iterator iter = iter . iterator ( return; ) ;
Code	Iterator iter = iter . iterator ( return; ) ;
Distance : 4

432
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; k
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; k
Distance : 5

433
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; Fraction
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; Fraction
Distance : 8

434
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT , Iterator ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT , Iterator ) ;
Distance : 7

435
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; Override
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; Override
Distance : 11

436
Tree	Iterator iter = iterator ( this . iter ) ; MatrixUtils
Code	Iterator iter = iterator ( this . iter ) ; MatrixUtils
Distance : 6

437
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Assert
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Assert
Distance : 11

438
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; k
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; k
Distance : 7

439
Tree	Iterator iter = new Iterator () . iterator () ; nCols
Code	Iterator iter = new Iterator () . iterator () ; nCols
Distance : 4

440
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; void
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; void
Distance : 11

441
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; MatrixUtils
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; MatrixUtils
Distance : 11

442
Tree	Iterator iter = this . entries . iterator () ; super
Code	Iterator iter = this . entries . iterator () ; super
Distance : 3

443
Tree	Iterator iter = iterator ( Iterator , Iterator ) ; nCols
Code	Iterator iter = iterator ( Iterator , Iterator ) ; nCols
Distance : 7

444
Tree	Iterator iter = iterator ( Iterator ) . iterator () ; k
Code	Iterator iter = iterator ( Iterator ) . iterator () ; k
Distance : 5

445
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; nCols
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; nCols
Distance : 5

446
Tree	Iterator iter = res.entries . iterator () . iterator () ; assertEquals
Code	Iterator iter = res.entries . iterator () . iterator () ; assertEquals
Distance : 5

447
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Fraction
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Fraction
Distance : 15

448
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 7

449
Tree	Iterator iter = iter . iterator () ; MatrixUtils
Code	Iterator iter = iter . iterator () ; MatrixUtils
Distance : 2

450
Tree	Iterator iter = iterator ( this . iter ) ; point
Code	Iterator iter = iterator ( this . iter ) ; point
Distance : 6

451
Tree	Iterator entries = new Iterator ( STRING_CONSTANT ) . iterator () ;
Code	Iterator entries = new Iterator ( STRING_CONSTANT ) . iterator () ;
Distance : 6

452
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 3

453
Tree	Iterator iter = iterator ( Iterator ) ;
Code	Iterator iter = iterator ( Iterator ) ;
Distance : 4

454
Tree	Iterator iter = new Iterator () . iterator () ;
Code	Iterator iter = new Iterator () . iterator () ;
Distance : 3

455
Tree	Iterator iter = iter ( iter . class , iter ) ;
Code	Iterator iter = iter ( iter . class , iter ) ;
Distance : 7

456
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; void
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; void
Distance : 11

457
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; Override
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; Override
Distance : 8

458
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; Assert
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; Assert
Distance : 11

459
Tree	Iterator iter = iterator ( this . iter ) ; UnivariateRealFunction
Code	Iterator iter = iterator ( this . iter ) ; UnivariateRealFunction
Distance : 6

========================================================================


========================================================================
Example Number: 15
Parent Code is: 
Iterator iter = res.entries . iterator () ;
-------------------------------------------------------------------------------
Child code is: 
Iterator iter = entries . iterator () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (40{val=res.entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (800{val=entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/49/parent/src_main_java_org_apache_commons_math_linear_OpenMapRealVector.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 460
Correct
========================================================================
True

0
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

1
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , true ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , true ) ;
Distance : 6

2
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

3
Tree	Iterator iter ;
Code	Iterator iter ;
Distance : 5

4
Tree	Iterator iter = iter . iterator () ;
Code	Iterator iter = iter . iterator () ;
Distance : 1

5
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

6
Tree	Iterator iter = iter . iterator ( null ) ;
Code	Iterator iter = iter . iterator ( null ) ;
Distance : 4

7
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

8
Tree	Iterator iter = iterator ( Iterator ) . iterator () ; Fraction
Code	Iterator iter = iterator ( Iterator ) . iterator () ; Fraction
Distance : 5

9
Tree	Iterator iter = iterator ( Iterator ) . iterator () ; assertEquals
Code	Iterator iter = iterator ( Iterator ) . iterator () ; assertEquals
Distance : 5

10
Tree	Iterator entries = res.entries . iterator () ;
Code	Iterator entries = res.entries . iterator () ;
Distance : 2

11
Tree	Iterator iter = res.entries . iterator () ; k
Code	Iterator iter = res.entries . iterator () ; k
Distance : 2

12
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Distance : 8

13
Tree	Iterator iter = iter . iterator ( entries , this . iter ) ;
Code	Iterator iter = iter . iterator ( entries , this . iter ) ;
Distance : 8

14
Tree	Iterator iter = iterator ( Iterator ) ; void
Code	Iterator iter = iterator ( Iterator ) ; void
Distance : 5

15
Tree	Iterator iter = iterator ( Iterator ) ; Override
Code	Iterator iter = iterator ( Iterator ) ; Override
Distance : 5

16
Tree	Iterator iter = iterator ( Iterator ) ; nCols
Code	Iterator iter = iterator ( Iterator ) ; nCols
Distance : 5

17
Tree	Iterator iter = iterator ( Iterator ) ; k
Code	Iterator iter = iterator ( Iterator ) ; k
Distance : 5

18
Tree	Iterator iter = iterator ( Iterator ) ; field
Code	Iterator iter = iterator ( Iterator ) ; field
Distance : 5

19
Tree	Iterator iter = iterator ( Iterator ) ; Assert
Code	Iterator iter = iterator ( Iterator ) ; Assert
Distance : 5

20
Tree	Iterator iter = iterator ( Iterator ) ; assertEquals
Code	Iterator iter = iterator ( Iterator ) ; assertEquals
Distance : 5

21
Tree	Iterator iter = iterator ( Iterator ) ; Fraction
Code	Iterator iter = iterator ( Iterator ) ; Fraction
Distance : 5

22
Tree	Iterator iter = iterator ( Iterator ) . iterator () ; void
Code	Iterator iter = iterator ( Iterator ) . iterator () ; void
Distance : 5

23
Tree	Iterator entries = res.entries . iterator () ;
Code	Iterator entries = res.entries . iterator () ;
Distance : 2

24
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 11

25
Tree	Iterator iter = entries . iterator ( iter , null ) ;
Code	Iterator iter = entries . iterator ( iter , null ) ;
Distance : 5

26
Tree	Iterator iter = entries . iterator ( entries . class ) ;
Code	Iterator iter = entries . iterator ( entries . class ) ;
Distance : 5

27
Tree	Iterator iter = iterator ( iter . class ) ; +
Code	Iterator iter = iterator ( iter . class ) ; +
Distance : 6

28
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Distance : 9

29
Tree	Iterator iter = res.entries . iterator () ; field
Code	Iterator iter = res.entries . iterator () ; field
Distance : 2

30
Tree	Iterator iter = iterator ( Iterator ) . iterator () ; Override
Code	Iterator iter = iterator ( Iterator ) . iterator () ; Override
Distance : 5

31
Tree	Iterator iter = res.entries . iterator () ; Assert
Code	Iterator iter = res.entries . iterator () ; Assert
Distance : 2

32
Tree	Iterator iter = res.entries . iterator () ; Override
Code	Iterator iter = res.entries . iterator () ; Override
Distance : 2

33
Tree	Iterator iter = res.entries . iterator () ; Fraction
Code	Iterator iter = res.entries . iterator () ; Fraction
Distance : 2

34
Tree	Iterator iter = res.entries . iterator () ; assertEquals
Code	Iterator iter = res.entries . iterator () ; assertEquals
Distance : 2

35
Tree	Iterator iter = iterator ( break; , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( break; , STRING_CONSTANT ) ;
Distance : 6

36
Tree	Iterator iter = iterator ( Iterator ) . iterator () ; field
Code	Iterator iter = iterator ( Iterator ) . iterator () ; field
Distance : 5

37
Tree	Iterator iter = iterator ( Iterator ) . iterator () ; Assert
Code	Iterator iter = iterator ( Iterator ) . iterator () ; Assert
Distance : 5

38
Tree	Iterator iter = res.entries . iterator () ; void
Code	Iterator iter = res.entries . iterator () ; void
Distance : 2

39
Tree	Iterator entries = this . entries . iterator () ;
Code	Iterator entries = this . entries . iterator () ;
Distance : 3

40
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; void
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; void
Distance : 5

41
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; field
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; field
Distance : 5

42
Tree	Iterator iter = iterator ( iter . class ) ; MatrixUtils
Code	Iterator iter = iterator ( iter . class ) ; MatrixUtils
Distance : 6

43
Tree	Iterator entries = entries . iterator ( null ) ;
Code	Iterator entries = entries . iterator ( null ) ;
Distance : 4

44
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 15

45
Tree	Iterator entries = iterator ( null , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( null , STRING_CONSTANT ) ;
Distance : 7

46
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Override
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Override
Distance : 9

47
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Fraction
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Fraction
Distance : 9

48
Tree	Iterator iter = iterator ( iter . class ) ; Array2DRowFieldMatrix
Code	Iterator iter = iterator ( iter . class ) ; Array2DRowFieldMatrix
Distance : 6

49
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; assertEquals
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; assertEquals
Distance : 9

50
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Distance : 11

51
Tree	Iterator entries = iterator ( STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT ) ;
Distance : 5

52
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 7

53
Tree	Iterator entries = iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iterator ( NUMBER_CONSTANT ) ;
Distance : 5

54
Tree	Iterator entries = iterator () ;
Code	Iterator entries = iterator () ;
Distance : 3

55
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Override
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Override
Distance : 11

56
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , true ) ; v.length
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , true ) ; v.length
Distance : 7

57
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; k
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; k
Distance : 5

58
Tree	Iterator iter = iterator ( this . entries ) ;
Code	Iterator iter = iterator ( this . entries ) ;
Distance : 5

59
Tree	Iterator entries = entries . iterator () ;
Code	Iterator entries = entries . iterator () ;
Distance : 1

60
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Assert
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Assert
Distance : 5

61
Tree	Iterator iter = iter ( entries . class , entries ) ;
Code	Iterator iter = iter ( entries . class , entries ) ;
Distance : 6

62
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Override
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Override
Distance : 5

63
Tree	Iterator iter = res.entries . iterator () ;
Code	Iterator iter = res.entries . iterator () ;
Distance : 1

64
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , true ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , true ) ;
Distance : 6

65
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

66
Tree	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

67
Tree	Iterator entries = new Iterator () . iterator () ;
Code	Iterator entries = new Iterator () . iterator () ;
Distance : 4

68
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Array2DRowFieldMatrix
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Array2DRowFieldMatrix
Distance : 9

69
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; MatrixUtils
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; MatrixUtils
Distance : 9

70
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; point
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; point
Distance : 9

71
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; UnivariateRealFunction
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; UnivariateRealFunction
Distance : 9

72
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; super
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; super
Distance : 9

73
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; +
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; +
Distance : 9

74
Tree	Iterator iter = res.entries . iterator () . iterator () ;
Code	Iterator iter = res.entries . iterator () . iterator () ;
Distance : 4

75
Tree	Iterator iter = entries . iterator ( iter . class ) ;
Code	Iterator iter = entries . iterator ( iter . class ) ;
Distance : 5

76
Tree	Iterator iter = iterator ( super(); , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( super(); , STRING_CONSTANT ) ;
Distance : 6

77
Tree	Iterator entries = iter . iterator ( entries , null ) ;
Code	Iterator entries = iter . iterator ( entries , null ) ;
Distance : 7

78
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; Assert
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; Assert
Distance : 7

79
Tree	Iterator iter = this . entries . iterator () ; Array2DRowFieldMatrix
Code	Iterator iter = this . entries . iterator () ; Array2DRowFieldMatrix
Distance : 3

80
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; void
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; void
Distance : 7

81
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; field
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; field
Distance : 10

82
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; Fraction
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; Fraction
Distance : 7

83
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; assertEquals
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; assertEquals
Distance : 7

84
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; Override
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; Override
Distance : 7

85
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 12

86
Tree	Iterator iter = iterator ( Iterator ) . iterator () ;
Code	Iterator iter = iterator ( Iterator ) . iterator () ;
Distance : 4

87
Tree	Iterator entries = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ;
Distance : 10

88
Tree	Iterator entries = iterator ( STRING_CONSTANT , Iterator . iterator () ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , Iterator . iterator () ) ;
Distance : 7

89
Tree	Iterator entries = iterator ( STRING_CONSTANT , entries , iter ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , entries , iter ) ;
Distance : 8

90
Tree	Iterator entries = iterator ( STRING_CONSTANT , iter , iter ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , iter , iter ) ;
Distance : 9

91
Tree	Iterator entries = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ;
Distance : 8

92
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Distance : 8

93
Tree	Iterator iter = entries . iterator ( iter , this . entries ) ;
Code	Iterator iter = entries . iterator ( iter , this . entries ) ;
Distance : 7

94
Tree	Iterator iter = entries . iterator ( entries , this . entries ) ;
Code	Iterator iter = entries . iterator ( entries , this . entries ) ;
Distance : 7

95
Tree	Iterator entries = iterator ( break; , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( break; , STRING_CONSTANT ) ;
Distance : 7

96
Tree	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ;
Distance : 8

97
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT , Iterator ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT , Iterator ) ;
Distance : 6

98
Tree	Iterator entries = iter . iterator ( iter , this . iter ) ;
Code	Iterator entries = iter . iterator ( iter , this . iter ) ;
Distance : 9

99
Tree	Iterator iter = entries ( entries . class , entries ) ;
Code	Iterator iter = entries ( entries . class , entries ) ;
Distance : 6

100
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Distance : 9

101
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; void
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; void
Distance : 10

102
Tree	Iterator entries = iter . iterator ( entries , this . iter ) ;
Code	Iterator entries = iter . iterator ( entries , this . iter ) ;
Distance : 9

103
Tree	Iterator iter = entries . iterator ( entries , this . iter ) ;
Code	Iterator iter = entries . iterator ( entries , this . iter ) ;
Distance : 7

104
Tree	static Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	static Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 6

105
Tree	Iterator entries = this . entries . iterator () . iterator () ;
Code	Iterator entries = this . entries . iterator () . iterator () ;
Distance : 6

106
Tree	synchronized Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	synchronized Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

107
Tree	private Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	private Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

108
Tree	Iterator entries = res.entries . iterator () . iterator () ;
Code	Iterator entries = res.entries . iterator () . iterator () ;
Distance : 5

109
Tree	Iterator iter = iter . iterator ( iter , this . entries ) ;
Code	Iterator iter = iter . iterator ( iter , this . entries ) ;
Distance : 8

110
Tree	abstract Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	abstract Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

111
Tree	Iterator iter = iter . iterator ( iter , break; ) ;
Code	Iterator iter = iter . iterator ( iter , break; ) ;
Distance : 6

112
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; Assert
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; Assert
Distance : 10

113
Tree	Iterator entries = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator entries = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 11

114
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Fraction
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Fraction
Distance : 11

115
Tree	Iterator entries = iter . iterator ( entries . class ) ;
Code	Iterator entries = iter . iterator ( entries . class ) ;
Distance : 7

116
Tree	protected Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	protected Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

117
Tree	Iterator entries = iter . iterator ( Iterator , NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( Iterator , NUMBER_CONSTANT ) ;
Distance : 7

118
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , false ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , false ) ;
Distance : 6

119
Tree	Iterator iter = iterator ( continue; , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( continue; , STRING_CONSTANT ) ;
Distance : 6

120
Tree	Iterator entries = iterator ( iter . class ) ;
Code	Iterator entries = iterator ( iter . class ) ;
Distance : 6

121
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; Array2DRowFieldMatrix
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; Array2DRowFieldMatrix
Distance : 9

122
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; MatrixUtils
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; MatrixUtils
Distance : 9

123
Tree	Iterator iter = iterator () ; assertEquals
Code	Iterator iter = iterator () ; assertEquals
Distance : 3

124
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; nCols
Distance : 7

125
Tree	Iterator iter = iterator () ; Fraction
Code	Iterator iter = iterator () ; Fraction
Distance : 3

126
Tree	Iterator iter = iterator () ; void
Code	Iterator iter = iterator () ; void
Distance : 3

127
Tree	Iterator iter = iterator () ; Assert
Code	Iterator iter = iterator () ; Assert
Distance : 3

128
Tree	Iterator iter = iterator () ; field
Code	Iterator iter = iterator () ; field
Distance : 3

129
Tree	Iterator iter = this . iter . iterator () . iterator () ;
Code	Iterator iter = this . iter . iterator () . iterator () ;
Distance : 6

130
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; +
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; +
Distance : 5

131
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; super
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; super
Distance : 5

132
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; UnivariateRealFunction
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; UnivariateRealFunction
Distance : 5

133
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; point
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; point
Distance : 5

134
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; MatrixUtils
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; MatrixUtils
Distance : 5

135
Tree	Iterator iter = this . entries . iterator () ; +
Code	Iterator iter = this . entries . iterator () ; +
Distance : 3

136
Tree	Iterator entries = iter ( iter . class , entries ) ;
Code	Iterator entries = iter ( iter . class , entries ) ;
Distance : 8

137
Tree	Iterator iter = this . entries . iterator () ; point
Code	Iterator iter = this . entries . iterator () ; point
Distance : 3

138
Tree	Iterator iter = iter . iterator ( entries , break; ) ;
Code	Iterator iter = iter . iterator ( entries , break; ) ;
Distance : 6

139
Tree	Iterator iter = this . entries . iterator ( Iterator ) ;
Code	Iterator iter = this . entries . iterator ( Iterator ) ;
Distance : 5

140
Tree	Iterator entries = iterator ( Iterator ) ;
Code	Iterator entries = iterator ( Iterator ) ;
Distance : 5

141
Tree	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 7

142
Tree	public Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	public Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

143
Tree	Iterator entries = iterator ( this . iter ) ;
Code	Iterator entries = iterator ( this . iter ) ;
Distance : 6

144
Tree	Iterator entries = iterator ( entries . class ) ;
Code	Iterator entries = iterator ( entries . class ) ;
Distance : 5

145
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Assert
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Assert
Distance : 5

146
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; assertEquals
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; assertEquals
Distance : 11

147
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Override
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Override
Distance : 5

148
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; super
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; super
Distance : 12

149
Tree	Iterator iter = iterator ( this . iter ) ; +
Code	Iterator iter = iterator ( this . iter ) ; +
Distance : 6

150
Tree	Iterator iter = iter . iterator () ; point
Code	Iterator iter = iter . iterator () ; point
Distance : 2

151
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; assertEquals
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; assertEquals
Distance : 5

152
Tree	Iterator iter = this . entries . iterator ( Iterator ) ; +
Code	Iterator iter = this . entries . iterator ( Iterator ) ; +
Distance : 6

153
Tree	Iterator iter = this . entries . iterator ( Iterator ) ; super
Code	Iterator iter = this . entries . iterator ( Iterator ) ; super
Distance : 6

154
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; point
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; point
Distance : 12

155
Tree	Iterator iter = this . entries . iterator ( Iterator ) ; UnivariateRealFunction
Code	Iterator iter = this . entries . iterator ( Iterator ) ; UnivariateRealFunction
Distance : 6

156
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

157
Tree	Iterator iter = iter . iterator () ; UnivariateRealFunction
Code	Iterator iter = iter . iterator () ; UnivariateRealFunction
Distance : 2

158
Tree	Iterator iter = iter . iterator ( entries . class ) ; v.length
Code	Iterator iter = iter . iterator ( entries . class ) ; v.length
Distance : 7

159
Tree	Iterator iter = iter . iterator () ; super
Code	Iterator iter = iter . iterator () ; super
Distance : 2

160
Tree	Iterator iter = iter . iterator () ; +
Code	Iterator iter = iter . iterator () ; +
Distance : 2

161
Tree	Iterator iter = this . entries . iterator ( Iterator ) ; MatrixUtils
Code	Iterator iter = this . entries . iterator ( Iterator ) ; MatrixUtils
Distance : 6

162
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , false ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , false ) ;
Distance : 6

163
Tree	Iterator iter = entries . iterator ( null ) ;
Code	Iterator iter = entries . iterator ( null ) ;
Distance : 3

164
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

165
Tree	Iterator iter = entries . iterator () ;
Code	Iterator iter = entries . iterator () ;
Distance : 0

166
Tree	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; super
Code	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; super
Distance : 9

167
Tree	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; point
Code	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; point
Distance : 9

168
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Array2DRowFieldMatrix
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Array2DRowFieldMatrix
Distance : 11

169
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; MatrixUtils
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; MatrixUtils
Distance : 12

170
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ;
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ;
Distance : 5

171
Tree	Iterator iter = iter . iterator () ; Array2DRowFieldMatrix
Code	Iterator iter = iter . iterator () ; Array2DRowFieldMatrix
Distance : 2

172
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

173
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

174
Tree	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; super
Code	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; super
Distance : 7

175
Tree	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; +
Code	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; +
Distance : 7

176
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; Array2DRowFieldMatrix
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; Array2DRowFieldMatrix
Distance : 12

177
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; UnivariateRealFunction
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; UnivariateRealFunction
Distance : 12

178
Tree	Iterator iter = this . entries . iterator () . iterator () ; +
Code	Iterator iter = this . entries . iterator () . iterator () ; +
Distance : 6

179
Tree	Iterator iter = this . entries . iterator () . iterator () ; super
Code	Iterator iter = this . entries . iterator () . iterator () ; super
Distance : 6

180
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

181
Tree	Iterator iter = this . entries . iterator ( Iterator ) ; Array2DRowFieldMatrix
Code	Iterator iter = this . entries . iterator ( Iterator ) ; Array2DRowFieldMatrix
Distance : 6

182
Tree	Iterator iter = new Iterator () . iterator () ; k
Code	Iterator iter = new Iterator () . iterator () ; k
Distance : 4

183
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; +
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; +
Distance : 12

184
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

185
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Override
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Override
Distance : 7

186
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Fraction
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Fraction
Distance : 7

187
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; k
Distance : 7

188
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; field
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; field
Distance : 7

189
Tree	Iterator iter = this . entries . iterator () . iterator () ; MatrixUtils
Code	Iterator iter = this . entries . iterator () . iterator () ; MatrixUtils
Distance : 6

190
Tree	Iterator iter = this . entries . iterator () . iterator () ; Array2DRowFieldMatrix
Code	Iterator iter = this . entries . iterator () . iterator () ; Array2DRowFieldMatrix
Distance : 6

191
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; void
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; void
Distance : 7

192
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; field
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; field
Distance : 7

193
Tree	Iterator iter = res.entries . iterator () ; Fraction
Code	Iterator iter = res.entries . iterator () ; Fraction
Distance : 2

194
Tree	Iterator iter = res.entries . iterator () ; Override
Code	Iterator iter = res.entries . iterator () ; Override
Distance : 2

195
Tree	Iterator iter = res.entries . iterator () ; k
Code	Iterator iter = res.entries . iterator () ; k
Distance : 2

196
Tree	Iterator iter = res.entries . iterator () ; void
Code	Iterator iter = res.entries . iterator () ; void
Distance : 2

197
Tree	Iterator iter = res.entries . iterator () ; field
Code	Iterator iter = res.entries . iterator () ; field
Distance : 2

198
Tree	Iterator iter = res.entries . iterator () ; Assert
Code	Iterator iter = res.entries . iterator () ; Assert
Distance : 2

199
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; Assert
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; Assert
Distance : 7

200
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Assert
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Assert
Distance : 7

201
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; Override
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; Override
Distance : 7

202
Tree	Iterator iter = this . entries . iterator () . iterator () ; point
Code	Iterator iter = this . entries . iterator () . iterator () ; point
Distance : 6

203
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 11

204
Tree	Iterator iter = this . entries . iterator () . iterator () ; UnivariateRealFunction
Code	Iterator iter = this . entries . iterator () . iterator () ; UnivariateRealFunction
Distance : 6

205
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; Assert
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; Assert
Distance : 5

206
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; Fraction
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; Fraction
Distance : 7

207
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; assertEquals
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; assertEquals
Distance : 7

208
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; +
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; +
Distance : 11

209
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; nCols
Distance : 5

210
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; k
Distance : 5

211
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; field
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; field
Distance : 5

212
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; Override
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; Override
Distance : 5

213
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; Fraction
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; Fraction
Distance : 5

214
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; assertEquals
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; assertEquals
Distance : 5

215
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; super
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; super
Distance : 11

216
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; UnivariateRealFunction
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; UnivariateRealFunction
Distance : 11

217
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; point
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; point
Distance : 11

218
Tree	Iterator iter = iter . iterator ( entries . class ) ; MathArrays
Code	Iterator iter = iter . iterator ( entries . class ) ; MathArrays
Distance : 7

219
Tree	Iterator iter = new Iterator () . iterator () ; field
Code	Iterator iter = new Iterator () . iterator () ; field
Distance : 4

220
Tree	Iterator entries = iter . iterator ( null ) ;
Code	Iterator entries = iter . iterator ( null ) ;
Distance : 5

221
Tree	Iterator entries = iter . iterator () ;
Code	Iterator entries = iter . iterator () ;
Distance : 2

222
Tree	Iterator iter = iterator ( iter . class ) ;
Code	Iterator iter = iterator ( iter . class ) ;
Distance : 5

223
Tree	Iterator iter = iterator ( this . iter ) ;
Code	Iterator iter = iterator ( this . iter ) ;
Distance : 5

224
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , true ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , true ) ;
Distance : 5

225
Tree	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; MatrixUtils
Code	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; MatrixUtils
Distance : 9

226
Tree	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; Array2DRowFieldMatrix
Code	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; Array2DRowFieldMatrix
Distance : 9

227
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; assertEquals
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; assertEquals
Distance : 13

228
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; Fraction
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; Fraction
Distance : 13

229
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; Override
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; Override
Distance : 13

230
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; k
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; k
Distance : 6

231
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; field
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; field
Distance : 6

232
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; Assert
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; Assert
Distance : 6

233
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; void
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; void
Distance : 6

234
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; Override
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; Override
Distance : 6

235
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; Fraction
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; Fraction
Distance : 6

236
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; assertEquals
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; assertEquals
Distance : 6

237
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; Assert
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; Assert
Distance : 13

238
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

239
Tree	Iterator iter = res.entries . iterator () . iterator () ; void
Code	Iterator iter = res.entries . iterator () . iterator () ; void
Distance : 5

240
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; field
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; field
Distance : 13

241
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; k
Distance : 13

242
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , false ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , false ) ;
Distance : 7

243
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 11

244
Tree	Iterator iter = res.entries . iterator () . iterator () ; Fraction
Code	Iterator iter = res.entries . iterator () . iterator () ; Fraction
Distance : 5

245
Tree	Iterator iter = iter . iterator ( super(); ) ;
Code	Iterator iter = iter . iterator ( super(); ) ;
Distance : 4

246
Tree	Iterator iter = res.entries . iterator () . iterator () ; Override
Code	Iterator iter = res.entries . iterator () . iterator () ; Override
Distance : 5

247
Tree	Iterator iter = res.entries . iterator () . iterator () ; Assert
Code	Iterator iter = res.entries . iterator () . iterator () ; Assert
Distance : 5

248
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Distance : 15

249
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; field
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; field
Distance : 15

250
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Assert
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Assert
Distance : 15

251
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; void
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; void
Distance : 15

252
Tree	Iterator iter = iter . iterator ( continue; ) ;
Code	Iterator iter = iter . iterator ( continue; ) ;
Distance : 4

253
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Distance : 15

254
Tree	Iterator iter = iter . iterator ( iter . class ) ;
Code	Iterator iter = iter . iterator ( iter . class ) ;
Distance : 6

255
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Fraction
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Fraction
Distance : 5

256
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; assertEquals
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; assertEquals
Distance : 11

257
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; nCols
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; nCols
Distance : 11

258
Tree	Iterator iter = res.entries . iterator () ;
Code	Iterator iter = res.entries . iterator () ;
Distance : 1

259
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 12

260
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; k
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; k
Distance : 11

261
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , true ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , true ) ;
Distance : 7

262
Tree	Iterator iter = res.entries . iterator () . iterator () ; nCols
Code	Iterator iter = res.entries . iterator () . iterator () ; nCols
Distance : 5

263
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; field
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; field
Distance : 11

264
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; nCols
Distance : 8

265
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; k
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; k
Distance : 8

266
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; field
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; field
Distance : 8

267
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; Assert
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; Assert
Distance : 8

268
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; void
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; void
Distance : 8

269
Tree	Iterator entries ;
Code	Iterator entries ;
Distance : 5

270
Tree	Iterator iter = res.entries . iterator () . iterator () ; k
Code	Iterator iter = res.entries . iterator () . iterator () ; k
Distance : 5

271
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 11

272
Tree	Iterator iter = this . entries . iterator () ;
Code	Iterator iter = this . entries . iterator () ;
Distance : 2

273
Tree	Iterator iter = iter . iterator ( iter , null ) ;
Code	Iterator iter = iter . iterator ( iter , null ) ;
Distance : 6

274
Tree	Iterator iter = new Iterator () . iterator () ; assertEquals
Code	Iterator iter = new Iterator () . iterator () ; assertEquals
Distance : 4

275
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 10

276
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 9

277
Tree	Iterator iter = iter . iterator ( break; ) ;
Code	Iterator iter = iter . iterator ( break; ) ;
Distance : 4

278
Tree	Iterator iter = iter . iterator ( entries , null ) ;
Code	Iterator iter = iter . iterator ( entries , null ) ;
Distance : 6

279
Tree	Iterator iter = iter . iterator ( entries . class ) ;
Code	Iterator iter = iter . iterator ( entries . class ) ;
Distance : 6

280
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; nCols
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; nCols
Distance : 6

281
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

282
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 10

283
Tree	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ;
Distance : 6

284
Tree	Iterator entries = iter . iterator ( iter , null ) ;
Code	Iterator entries = iter . iterator ( iter , null ) ;
Distance : 7

285
Tree	final Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	final Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

286
Tree	Iterator entries = entries . iterator ( entries , null ) ;
Code	Iterator entries = entries . iterator ( entries , null ) ;
Distance : 6

287
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Distance : 7

288
Tree	Iterator entries = iterator ( super(); , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( super(); , STRING_CONSTANT ) ;
Distance : 7

289
Tree	abstract Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	abstract Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 6

290
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; void
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; void
Distance : 5

291
Tree	Iterator entries = this . iter . iterator () ;
Code	Iterator entries = this . iter . iterator () ;
Distance : 4

292
Tree	Iterator iter = iterator ( entries . class ) ;
Code	Iterator iter = iterator ( entries . class ) ;
Distance : 4

293
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; void
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; void
Distance : 13

294
Tree	Iterator iter = iter . iterator ( iter , this . iter ) ;
Code	Iterator iter = iter . iterator ( iter , this . iter ) ;
Distance : 8

295
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; field
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; field
Distance : 5

296
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; UnivariateRealFunction
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; UnivariateRealFunction
Distance : 9

297
Tree	Iterator entries = entries . iterator ( entries . class ) ;
Code	Iterator entries = entries . iterator ( entries . class ) ;
Distance : 6

298
Tree	Iterator iter = entries ( iter . class , iter ) ;
Code	Iterator iter = entries ( iter . class , iter ) ;
Distance : 6

299
Tree	Iterator iter = iterator ( Iterator , Iterator ) ; assertEquals
Code	Iterator iter = iterator ( Iterator , Iterator ) ; assertEquals
Distance : 7

300
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; field
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; field
Distance : 7

301
Tree	Iterator iter ; Assert
Code	Iterator iter ; Assert
Distance : 6

302
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; k
Distance : 10

303
Tree	Iterator iter = iterator ( iter . class ) ; point
Code	Iterator iter = iterator ( iter . class ) ; point
Distance : 6

304
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

305
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ;
Distance : 6

306
Tree	Iterator entries = iter . iterator ( iter . class ) ;
Code	Iterator entries = iter . iterator ( iter . class ) ;
Distance : 7

307
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , false ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , false ) ;
Distance : 5

308
Tree	Iterator iter = this . entries . iterator () ; UnivariateRealFunction
Code	Iterator iter = this . entries . iterator () ; UnivariateRealFunction
Distance : 3

309
Tree	Iterator iter = iterator ( iter . class ) ; UnivariateRealFunction
Code	Iterator iter = iterator ( iter . class ) ; UnivariateRealFunction
Distance : 6

310
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; +
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; +
Distance : 7

311
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; super
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; super
Distance : 7

312
Tree	Iterator iter = iterator ( Iterator , Iterator ) ; Fraction
Code	Iterator iter = iterator ( Iterator , Iterator ) ; Fraction
Distance : 7

313
Tree	Iterator iter = iterator ( return; , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( return; , STRING_CONSTANT ) ;
Distance : 6

314
Tree	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; UnivariateRealFunction
Code	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; UnivariateRealFunction
Distance : 9

315
Tree	protected Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	protected Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 6

316
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; Array2DRowFieldMatrix
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; Array2DRowFieldMatrix
Distance : 5

317
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ;
Distance : 7

318
Tree	Iterator entries = iterator ( return; , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( return; , STRING_CONSTANT ) ;
Distance : 7

319
Tree	Iterator entries = iterator ( continue; , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( continue; , STRING_CONSTANT ) ;
Distance : 7

320
Tree	Iterator entries = this . iter . iterator () . iterator () ;
Code	Iterator entries = this . iter . iterator () . iterator () ;
Distance : 7

321
Tree	Iterator iter = iterator ( Iterator , Iterator ) ;
Code	Iterator iter = iterator ( Iterator , Iterator ) ;
Distance : 6

322
Tree	Iterator iter = iter . iterator ( entries , super(); ) ;
Code	Iterator iter = iter . iterator ( entries , super(); ) ;
Distance : 6

323
Tree	Iterator iter = iter . iterator ( entries , this . entries ) ;
Code	Iterator iter = iter . iterator ( entries , this . entries ) ;
Distance : 8

324
Tree	Iterator entries = this . entries . iterator ( Iterator ) ;
Code	Iterator entries = this . entries . iterator ( Iterator ) ;
Distance : 6

325
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ;
Distance : 6

326
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT , Iterator ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT , Iterator ) ;
Distance : 5

327
Tree	Iterator iter = iterator ( STRING_CONSTANT , entries , iter ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , entries , iter ) ;
Distance : 7

328
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ;
Distance : 9

329
Tree	Iterator entries = iterator ( this . entries ) ;
Code	Iterator entries = iterator ( this . entries ) ;
Distance : 6

330
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; Array2DRowFieldMatrix
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; Array2DRowFieldMatrix
Distance : 7

331
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Distance : 9

332
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; void
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; void
Distance : 7

333
Tree	Iterator iter = entries ( iter . class , entries ) ;
Code	Iterator iter = entries ( iter . class , entries ) ;
Distance : 6

334
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; UnivariateRealFunction
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; UnivariateRealFunction
Distance : 7

335
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; k
Distance : 7

336
Tree	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; Array2DRowFieldMatrix
Code	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; Array2DRowFieldMatrix
Distance : 7

337
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; point
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; point
Distance : 7

338
Tree	Iterator iter = iter ( iter . class , entries ) ;
Code	Iterator iter = iter ( iter . class , entries ) ;
Distance : 7

339
Tree	Iterator iter = res.entries . iterator () ; nCols
Code	Iterator iter = res.entries . iterator () ; nCols
Distance : 2

340
Tree	Iterator iter = iterator () ; Override
Code	Iterator iter = iterator () ; Override
Distance : 3

341
Tree	Iterator iter = new Iterator () . iterator () ; Fraction
Code	Iterator iter = new Iterator () . iterator () ; Fraction
Distance : 4

342
Tree	Iterator iter = res.entries . iterator () ; nCols
Code	Iterator iter = res.entries . iterator () ; nCols
Distance : 2

343
Tree	Iterator iter = this . iter . iterator ( Iterator ) ;
Code	Iterator iter = this . iter . iterator ( Iterator ) ;
Distance : 6

344
Tree	Iterator iter = iterator ( iter . class ) ; super
Code	Iterator iter = iterator ( iter . class ) ; super
Distance : 6

345
Tree	Iterator iter = entries . iterator ( break; ) ;
Code	Iterator iter = entries . iterator ( break; ) ;
Distance : 3

346
Tree	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; MatrixUtils
Code	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; MatrixUtils
Distance : 7

347
Tree	Iterator iter = iterator ( Iterator , Iterator ) ; Override
Code	Iterator iter = iterator ( Iterator , Iterator ) ; Override
Distance : 7

348
Tree	Iterator iter = iterator () ;
Code	Iterator iter = iterator () ;
Distance : 2

349
Tree	Iterator iter ; field
Code	Iterator iter ; field
Distance : 6

350
Tree	Iterator iter = iterator ( Iterator , Iterator ) ; void
Code	Iterator iter = iterator ( Iterator , Iterator ) ; void
Distance : 7

351
Tree	Iterator iter ; Override
Code	Iterator iter ; Override
Distance : 6

352
Tree	Iterator entries = entries . iterator ( iter . class ) ;
Code	Iterator entries = entries . iterator ( iter . class ) ;
Distance : 6

353
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; MatrixUtils
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; MatrixUtils
Distance : 7

354
Tree	Iterator entries = iter ( entries . class , entries ) ;
Code	Iterator entries = iter ( entries . class , entries ) ;
Distance : 7

355
Tree	Iterator iter ; Fraction
Code	Iterator iter ; Fraction
Distance : 6

356
Tree	Iterator iter = iterator ( Iterator , Iterator ) ; Assert
Code	Iterator iter = iterator ( Iterator , Iterator ) ; Assert
Distance : 7

357
Tree	Iterator entries = this . iter . iterator ( Iterator ) ;
Code	Iterator entries = this . iter . iterator ( Iterator ) ;
Distance : 7

358
Tree	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator ( NUMBER_CONSTANT ) ) ; assertEquals
Code	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator ( NUMBER_CONSTANT ) ) ; assertEquals
Distance : 10

359
Tree	Iterator entries = entries . iterator ( Iterator , NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( Iterator , NUMBER_CONSTANT ) ;
Distance : 6

360
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; point
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; point
Distance : 9

361
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; assertEquals
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; assertEquals
Distance : 15

362
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; void
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; void
Distance : 5

363
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; assertEquals
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; assertEquals
Distance : 8

364
Tree	Iterator iter ; assertEquals
Code	Iterator iter ; assertEquals
Distance : 6

365
Tree	Iterator iter = iterator () ; nCols
Code	Iterator iter = iterator () ; nCols
Distance : 3

366
Tree	static Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	static Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

367
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; super
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; super
Distance : 9

368
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , true ) ; MathArrays
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , true ) ; MathArrays
Distance : 7

369
Tree	Iterator iter = iterator ( Iterator , Iterator ) ; field
Code	Iterator iter = iterator ( Iterator , Iterator ) ; field
Distance : 7

370
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; +
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; +
Distance : 9

371
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; +
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; +
Distance : 9

372
Tree	Iterator iter = res.entries . iterator () . iterator () ; field
Code	Iterator iter = res.entries . iterator () . iterator () ; field
Distance : 5

373
Tree	Iterator entries = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 13

374
Tree	Iterator iter = entries . iterator ( iter , this . iter ) ;
Code	Iterator iter = entries . iterator ( iter , this . iter ) ;
Distance : 7

375
Tree	Iterator entries = iterator ( Iterator ) . iterator () ;
Code	Iterator entries = iterator ( Iterator ) . iterator () ;
Distance : 5

376
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; assertEquals
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; assertEquals
Distance : 7

377
Tree	Iterator iter = new Iterator () . iterator () ; Override
Code	Iterator iter = new Iterator () . iterator () ; Override
Distance : 4

378
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ;
Distance : 4

379
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 6

380
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; nCols
Distance : 5

381
Tree	Iterator iter = entries . iterator ( entries , null ) ;
Code	Iterator iter = entries . iterator ( entries , null ) ;
Distance : 5

382
Tree	Iterator iter = entries . iterator ( super(); ) ;
Code	Iterator iter = entries . iterator ( super(); ) ;
Distance : 3

383
Tree	Iterator entries = iter ( iter . class , iter ) ;
Code	Iterator entries = iter ( iter . class , iter ) ;
Distance : 8

384
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; Override
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; Override
Distance : 10

385
Tree	Iterator iter = iter ( entries . class , iter ) ;
Code	Iterator iter = iter ( entries . class , iter ) ;
Distance : 6

386
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Distance : 11

387
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; nCols
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; nCols
Distance : 7

388
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; field
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; field
Distance : 9

389
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; super
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; super
Distance : 9

390
Tree	Iterator iter = iterator () ; k
Code	Iterator iter = iterator () ; k
Distance : 3

391
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; Fraction
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; Fraction
Distance : 11

392
Tree	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; point
Code	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; point
Distance : 7

393
Tree	Iterator iter = iterator ( this . iter ) ; Array2DRowFieldMatrix
Code	Iterator iter = iterator ( this . iter ) ; Array2DRowFieldMatrix
Distance : 6

394
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; nCols
Distance : 10

395
Tree	Iterator iter = iterator ( Iterator , Iterator ) ; k
Code	Iterator iter = iterator ( Iterator , Iterator ) ; k
Distance : 7

396
Tree	Iterator iter = iterator ( Iterator ) . iterator () ; nCols
Code	Iterator iter = iterator ( Iterator ) . iterator () ; nCols
Distance : 5

397
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Fraction
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Fraction
Distance : 5

398
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; nCols
Distance : 13

399
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Override
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Override
Distance : 15

400
Tree	Iterator iter = res.entries . iterator () ; assertEquals
Code	Iterator iter = res.entries . iterator () ; assertEquals
Distance : 2

401
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; UnivariateRealFunction
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; UnivariateRealFunction
Distance : 9

402
Tree	Iterator iter = new Iterator () . iterator () ; void
Code	Iterator iter = new Iterator () . iterator () ; void
Distance : 4

403
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; assertEquals
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; assertEquals
Distance : 5

404
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

405
Tree	Iterator iter = this . entries . iterator ( Iterator ) ; point
Code	Iterator iter = this . entries . iterator ( Iterator ) ; point
Distance : 6

406
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; point
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; point
Distance : 9

407
Tree	Iterator iter = iterator ( this . iter ) ; super
Code	Iterator iter = iterator ( this . iter ) ; super
Distance : 6

408
Tree	Iterator iter ; void
Code	Iterator iter ; void
Distance : 6

409
Tree	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; UnivariateRealFunction
Code	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; UnivariateRealFunction
Distance : 7

410
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT ) ;
Distance : 4

411
Tree	Iterator iter ; nCols
Code	Iterator iter ; nCols
Distance : 6

412
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; MatrixUtils
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; MatrixUtils
Distance : 9

413
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Assert
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Assert
Distance : 9

414
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

415
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; Fraction
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; Fraction
Distance : 10

416
Tree	Iterator entries = iterator ( Iterator , Iterator ) ;
Code	Iterator entries = iterator ( Iterator , Iterator ) ;
Distance : 7

417
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; void
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; void
Distance : 9

418
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; Array2DRowFieldMatrix
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; Array2DRowFieldMatrix
Distance : 9

419
Tree	Iterator iter ; k
Code	Iterator iter ; k
Distance : 6

420
Tree	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; +
Code	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; +
Distance : 9

421
Tree	Iterator iter = this . entries . iterator () . iterator () ;
Code	Iterator iter = this . entries . iterator () . iterator () ;
Distance : 5

422
Tree	Iterator iter = iterator ( null , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( null , STRING_CONSTANT ) ;
Distance : 6

423
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Distance : 7

424
Tree	Iterator iter = this . iter . iterator () ;
Code	Iterator iter = this . iter . iterator () ;
Distance : 3

425
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

426
Tree	Iterator iter = new Iterator () . iterator () ; Assert
Code	Iterator iter = new Iterator () . iterator () ; Assert
Distance : 4

427
Tree	Iterator iter = entries . iterator ( Iterator , NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( Iterator , NUMBER_CONSTANT ) ;
Distance : 5

428
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; field
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; field
Distance : 11

429
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 14

430
Tree	Iterator iter = this . entries . iterator () ; MatrixUtils
Code	Iterator iter = this . entries . iterator () ; MatrixUtils
Distance : 3

431
Tree	Iterator iter = iter . iterator ( return; ) ;
Code	Iterator iter = iter . iterator ( return; ) ;
Distance : 4

432
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; k
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; k
Distance : 5

433
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; Fraction
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; Fraction
Distance : 8

434
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT , Iterator ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT , Iterator ) ;
Distance : 7

435
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; Override
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; Override
Distance : 11

436
Tree	Iterator iter = iterator ( this . iter ) ; MatrixUtils
Code	Iterator iter = iterator ( this . iter ) ; MatrixUtils
Distance : 6

437
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Assert
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Assert
Distance : 11

438
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; k
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; k
Distance : 7

439
Tree	Iterator iter = new Iterator () . iterator () ; nCols
Code	Iterator iter = new Iterator () . iterator () ; nCols
Distance : 4

440
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; void
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; void
Distance : 11

441
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; MatrixUtils
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; MatrixUtils
Distance : 11

442
Tree	Iterator iter = this . entries . iterator () ; super
Code	Iterator iter = this . entries . iterator () ; super
Distance : 3

443
Tree	Iterator iter = iterator ( Iterator , Iterator ) ; nCols
Code	Iterator iter = iterator ( Iterator , Iterator ) ; nCols
Distance : 7

444
Tree	Iterator iter = iterator ( Iterator ) . iterator () ; k
Code	Iterator iter = iterator ( Iterator ) . iterator () ; k
Distance : 5

445
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; nCols
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; nCols
Distance : 5

446
Tree	Iterator iter = res.entries . iterator () . iterator () ; assertEquals
Code	Iterator iter = res.entries . iterator () . iterator () ; assertEquals
Distance : 5

447
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Fraction
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Fraction
Distance : 15

448
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 7

449
Tree	Iterator iter = iter . iterator () ; MatrixUtils
Code	Iterator iter = iter . iterator () ; MatrixUtils
Distance : 2

450
Tree	Iterator iter = iterator ( this . iter ) ; point
Code	Iterator iter = iterator ( this . iter ) ; point
Distance : 6

451
Tree	Iterator entries = new Iterator ( STRING_CONSTANT ) . iterator () ;
Code	Iterator entries = new Iterator ( STRING_CONSTANT ) . iterator () ;
Distance : 6

452
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 3

453
Tree	Iterator iter = iterator ( Iterator ) ;
Code	Iterator iter = iterator ( Iterator ) ;
Distance : 4

454
Tree	Iterator iter = new Iterator () . iterator () ;
Code	Iterator iter = new Iterator () . iterator () ;
Distance : 3

455
Tree	Iterator iter = iter ( iter . class , iter ) ;
Code	Iterator iter = iter ( iter . class , iter ) ;
Distance : 7

456
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; void
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; void
Distance : 11

457
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; Override
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; Override
Distance : 8

458
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; Assert
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; Assert
Distance : 11

459
Tree	Iterator iter = iterator ( this . iter ) ; UnivariateRealFunction
Code	Iterator iter = iterator ( this . iter ) ; UnivariateRealFunction
Distance : 6

========================================================================


========================================================================
Example Number: 16
Parent Code is: 
Iterator iter = res.entries . iterator () ;
-------------------------------------------------------------------------------
Child code is: 
Iterator iter = entries . iterator () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (40{val=res.entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (800{val=entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/49/parent/src_main_java_org_apache_commons_math_linear_OpenMapRealVector.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 460
Correct
========================================================================
True

0
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

1
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , true ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , true ) ;
Distance : 6

2
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

3
Tree	Iterator iter ;
Code	Iterator iter ;
Distance : 5

4
Tree	Iterator iter = iter . iterator () ;
Code	Iterator iter = iter . iterator () ;
Distance : 1

5
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

6
Tree	Iterator iter = iter . iterator ( null ) ;
Code	Iterator iter = iter . iterator ( null ) ;
Distance : 4

7
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

8
Tree	Iterator iter = iterator ( Iterator ) . iterator () ; Fraction
Code	Iterator iter = iterator ( Iterator ) . iterator () ; Fraction
Distance : 5

9
Tree	Iterator iter = iterator ( Iterator ) . iterator () ; assertEquals
Code	Iterator iter = iterator ( Iterator ) . iterator () ; assertEquals
Distance : 5

10
Tree	Iterator entries = res.entries . iterator () ;
Code	Iterator entries = res.entries . iterator () ;
Distance : 2

11
Tree	Iterator iter = res.entries . iterator () ; k
Code	Iterator iter = res.entries . iterator () ; k
Distance : 2

12
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Distance : 8

13
Tree	Iterator iter = iter . iterator ( entries , this . iter ) ;
Code	Iterator iter = iter . iterator ( entries , this . iter ) ;
Distance : 8

14
Tree	Iterator iter = iterator ( Iterator ) ; void
Code	Iterator iter = iterator ( Iterator ) ; void
Distance : 5

15
Tree	Iterator iter = iterator ( Iterator ) ; Override
Code	Iterator iter = iterator ( Iterator ) ; Override
Distance : 5

16
Tree	Iterator iter = iterator ( Iterator ) ; nCols
Code	Iterator iter = iterator ( Iterator ) ; nCols
Distance : 5

17
Tree	Iterator iter = iterator ( Iterator ) ; k
Code	Iterator iter = iterator ( Iterator ) ; k
Distance : 5

18
Tree	Iterator iter = iterator ( Iterator ) ; field
Code	Iterator iter = iterator ( Iterator ) ; field
Distance : 5

19
Tree	Iterator iter = iterator ( Iterator ) ; Assert
Code	Iterator iter = iterator ( Iterator ) ; Assert
Distance : 5

20
Tree	Iterator iter = iterator ( Iterator ) ; assertEquals
Code	Iterator iter = iterator ( Iterator ) ; assertEquals
Distance : 5

21
Tree	Iterator iter = iterator ( Iterator ) ; Fraction
Code	Iterator iter = iterator ( Iterator ) ; Fraction
Distance : 5

22
Tree	Iterator iter = iterator ( Iterator ) . iterator () ; void
Code	Iterator iter = iterator ( Iterator ) . iterator () ; void
Distance : 5

23
Tree	Iterator entries = res.entries . iterator () ;
Code	Iterator entries = res.entries . iterator () ;
Distance : 2

24
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 11

25
Tree	Iterator iter = entries . iterator ( iter , null ) ;
Code	Iterator iter = entries . iterator ( iter , null ) ;
Distance : 5

26
Tree	Iterator iter = entries . iterator ( entries . class ) ;
Code	Iterator iter = entries . iterator ( entries . class ) ;
Distance : 5

27
Tree	Iterator iter = iterator ( iter . class ) ; +
Code	Iterator iter = iterator ( iter . class ) ; +
Distance : 6

28
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Distance : 9

29
Tree	Iterator iter = res.entries . iterator () ; field
Code	Iterator iter = res.entries . iterator () ; field
Distance : 2

30
Tree	Iterator iter = iterator ( Iterator ) . iterator () ; Override
Code	Iterator iter = iterator ( Iterator ) . iterator () ; Override
Distance : 5

31
Tree	Iterator iter = res.entries . iterator () ; Assert
Code	Iterator iter = res.entries . iterator () ; Assert
Distance : 2

32
Tree	Iterator iter = res.entries . iterator () ; Override
Code	Iterator iter = res.entries . iterator () ; Override
Distance : 2

33
Tree	Iterator iter = res.entries . iterator () ; Fraction
Code	Iterator iter = res.entries . iterator () ; Fraction
Distance : 2

34
Tree	Iterator iter = res.entries . iterator () ; assertEquals
Code	Iterator iter = res.entries . iterator () ; assertEquals
Distance : 2

35
Tree	Iterator iter = iterator ( break; , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( break; , STRING_CONSTANT ) ;
Distance : 6

36
Tree	Iterator iter = iterator ( Iterator ) . iterator () ; field
Code	Iterator iter = iterator ( Iterator ) . iterator () ; field
Distance : 5

37
Tree	Iterator iter = iterator ( Iterator ) . iterator () ; Assert
Code	Iterator iter = iterator ( Iterator ) . iterator () ; Assert
Distance : 5

38
Tree	Iterator iter = res.entries . iterator () ; void
Code	Iterator iter = res.entries . iterator () ; void
Distance : 2

39
Tree	Iterator entries = this . entries . iterator () ;
Code	Iterator entries = this . entries . iterator () ;
Distance : 3

40
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; void
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; void
Distance : 5

41
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; field
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; field
Distance : 5

42
Tree	Iterator iter = iterator ( iter . class ) ; MatrixUtils
Code	Iterator iter = iterator ( iter . class ) ; MatrixUtils
Distance : 6

43
Tree	Iterator entries = entries . iterator ( null ) ;
Code	Iterator entries = entries . iterator ( null ) ;
Distance : 4

44
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 15

45
Tree	Iterator entries = iterator ( null , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( null , STRING_CONSTANT ) ;
Distance : 7

46
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Override
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Override
Distance : 9

47
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Fraction
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Fraction
Distance : 9

48
Tree	Iterator iter = iterator ( iter . class ) ; Array2DRowFieldMatrix
Code	Iterator iter = iterator ( iter . class ) ; Array2DRowFieldMatrix
Distance : 6

49
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; assertEquals
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; assertEquals
Distance : 9

50
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Distance : 11

51
Tree	Iterator entries = iterator ( STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT ) ;
Distance : 5

52
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 7

53
Tree	Iterator entries = iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iterator ( NUMBER_CONSTANT ) ;
Distance : 5

54
Tree	Iterator entries = iterator () ;
Code	Iterator entries = iterator () ;
Distance : 3

55
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Override
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Override
Distance : 11

56
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , true ) ; v.length
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , true ) ; v.length
Distance : 7

57
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; k
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; k
Distance : 5

58
Tree	Iterator iter = iterator ( this . entries ) ;
Code	Iterator iter = iterator ( this . entries ) ;
Distance : 5

59
Tree	Iterator entries = entries . iterator () ;
Code	Iterator entries = entries . iterator () ;
Distance : 1

60
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Assert
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Assert
Distance : 5

61
Tree	Iterator iter = iter ( entries . class , entries ) ;
Code	Iterator iter = iter ( entries . class , entries ) ;
Distance : 6

62
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Override
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Override
Distance : 5

63
Tree	Iterator iter = res.entries . iterator () ;
Code	Iterator iter = res.entries . iterator () ;
Distance : 1

64
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , true ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , true ) ;
Distance : 6

65
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

66
Tree	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

67
Tree	Iterator entries = new Iterator () . iterator () ;
Code	Iterator entries = new Iterator () . iterator () ;
Distance : 4

68
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Array2DRowFieldMatrix
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Array2DRowFieldMatrix
Distance : 9

69
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; MatrixUtils
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; MatrixUtils
Distance : 9

70
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; point
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; point
Distance : 9

71
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; UnivariateRealFunction
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; UnivariateRealFunction
Distance : 9

72
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; super
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; super
Distance : 9

73
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; +
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; +
Distance : 9

74
Tree	Iterator iter = res.entries . iterator () . iterator () ;
Code	Iterator iter = res.entries . iterator () . iterator () ;
Distance : 4

75
Tree	Iterator iter = entries . iterator ( iter . class ) ;
Code	Iterator iter = entries . iterator ( iter . class ) ;
Distance : 5

76
Tree	Iterator iter = iterator ( super(); , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( super(); , STRING_CONSTANT ) ;
Distance : 6

77
Tree	Iterator entries = iter . iterator ( entries , null ) ;
Code	Iterator entries = iter . iterator ( entries , null ) ;
Distance : 7

78
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; Assert
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; Assert
Distance : 7

79
Tree	Iterator iter = this . entries . iterator () ; Array2DRowFieldMatrix
Code	Iterator iter = this . entries . iterator () ; Array2DRowFieldMatrix
Distance : 3

80
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; void
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; void
Distance : 7

81
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; field
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; field
Distance : 10

82
Tree	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator () ) ; Fraction
Code	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator () ) ; Fraction
Distance : 7

83
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; assertEquals
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; assertEquals
Distance : 7

84
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; Override
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; Override
Distance : 7

85
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 12

86
Tree	Iterator iter = iterator ( Iterator ) . iterator () ;
Code	Iterator iter = iterator ( Iterator ) . iterator () ;
Distance : 4

87
Tree	Iterator entries = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ;
Distance : 10

88
Tree	Iterator entries = iterator ( STRING_CONSTANT , Iterator . iterator () ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , Iterator . iterator () ) ;
Distance : 7

89
Tree	Iterator entries = iterator ( STRING_CONSTANT , entries , iter ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , entries , iter ) ;
Distance : 8

90
Tree	Iterator entries = iterator ( STRING_CONSTANT , iter , iter ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , iter , iter ) ;
Distance : 9

91
Tree	Iterator entries = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ;
Distance : 8

92
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Distance : 8

93
Tree	Iterator iter = entries . iterator ( iter , this . entries ) ;
Code	Iterator iter = entries . iterator ( iter , this . entries ) ;
Distance : 7

94
Tree	Iterator iter = entries . iterator ( entries , this . entries ) ;
Code	Iterator iter = entries . iterator ( entries , this . entries ) ;
Distance : 7

95
Tree	Iterator entries = iterator ( break; , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( break; , STRING_CONSTANT ) ;
Distance : 7

96
Tree	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ;
Distance : 8

97
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT , Iterator ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT , Iterator ) ;
Distance : 6

98
Tree	Iterator entries = iter . iterator ( iter , this . iter ) ;
Code	Iterator entries = iter . iterator ( iter , this . iter ) ;
Distance : 9

99
Tree	Iterator iter = entries ( entries . class , entries ) ;
Code	Iterator iter = entries ( entries . class , entries ) ;
Distance : 6

100
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Distance : 9

101
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; void
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; void
Distance : 10

102
Tree	Iterator entries = iter . iterator ( entries , this . iter ) ;
Code	Iterator entries = iter . iterator ( entries , this . iter ) ;
Distance : 9

103
Tree	Iterator iter = entries . iterator ( entries , this . iter ) ;
Code	Iterator iter = entries . iterator ( entries , this . iter ) ;
Distance : 7

104
Tree	static Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	static Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 6

105
Tree	Iterator entries = this . entries . iterator () . iterator () ;
Code	Iterator entries = this . entries . iterator () . iterator () ;
Distance : 6

106
Tree	synchronized Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	synchronized Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

107
Tree	private Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	private Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

108
Tree	Iterator entries = res.entries . iterator () . iterator () ;
Code	Iterator entries = res.entries . iterator () . iterator () ;
Distance : 5

109
Tree	Iterator iter = iter . iterator ( iter , this . entries ) ;
Code	Iterator iter = iter . iterator ( iter , this . entries ) ;
Distance : 8

110
Tree	abstract Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	abstract Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

111
Tree	Iterator iter = iter . iterator ( iter , break; ) ;
Code	Iterator iter = iter . iterator ( iter , break; ) ;
Distance : 6

112
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; Assert
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; Assert
Distance : 10

113
Tree	Iterator entries = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator entries = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 11

114
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Fraction
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Fraction
Distance : 11

115
Tree	Iterator entries = iter . iterator ( entries . class ) ;
Code	Iterator entries = iter . iterator ( entries . class ) ;
Distance : 7

116
Tree	protected Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	protected Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

117
Tree	Iterator entries = iter . iterator ( Iterator , NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( Iterator , NUMBER_CONSTANT ) ;
Distance : 7

118
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , false ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , false ) ;
Distance : 6

119
Tree	Iterator iter = iterator ( continue; , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( continue; , STRING_CONSTANT ) ;
Distance : 6

120
Tree	Iterator entries = iterator ( iter . class ) ;
Code	Iterator entries = iterator ( iter . class ) ;
Distance : 6

121
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; Array2DRowFieldMatrix
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; Array2DRowFieldMatrix
Distance : 9

122
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; MatrixUtils
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; MatrixUtils
Distance : 9

123
Tree	Iterator iter = iterator () ; assertEquals
Code	Iterator iter = iterator () ; assertEquals
Distance : 3

124
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; nCols
Distance : 7

125
Tree	Iterator iter = iterator () ; Fraction
Code	Iterator iter = iterator () ; Fraction
Distance : 3

126
Tree	Iterator iter = iterator () ; void
Code	Iterator iter = iterator () ; void
Distance : 3

127
Tree	Iterator iter = iterator () ; Assert
Code	Iterator iter = iterator () ; Assert
Distance : 3

128
Tree	Iterator iter = iterator () ; field
Code	Iterator iter = iterator () ; field
Distance : 3

129
Tree	Iterator iter = this . iter . iterator () . iterator () ;
Code	Iterator iter = this . iter . iterator () . iterator () ;
Distance : 6

130
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; +
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; +
Distance : 5

131
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; super
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; super
Distance : 5

132
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; UnivariateRealFunction
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; UnivariateRealFunction
Distance : 5

133
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; point
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; point
Distance : 5

134
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; MatrixUtils
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; MatrixUtils
Distance : 5

135
Tree	Iterator iter = this . entries . iterator () ; +
Code	Iterator iter = this . entries . iterator () ; +
Distance : 3

136
Tree	Iterator entries = iter ( iter . class , entries ) ;
Code	Iterator entries = iter ( iter . class , entries ) ;
Distance : 8

137
Tree	Iterator iter = this . entries . iterator () ; point
Code	Iterator iter = this . entries . iterator () ; point
Distance : 3

138
Tree	Iterator iter = iter . iterator ( entries , break; ) ;
Code	Iterator iter = iter . iterator ( entries , break; ) ;
Distance : 6

139
Tree	Iterator iter = this . entries . iterator ( Iterator ) ;
Code	Iterator iter = this . entries . iterator ( Iterator ) ;
Distance : 5

140
Tree	Iterator entries = iterator ( Iterator ) ;
Code	Iterator entries = iterator ( Iterator ) ;
Distance : 5

141
Tree	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 7

142
Tree	public Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	public Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

143
Tree	Iterator entries = iterator ( this . iter ) ;
Code	Iterator entries = iterator ( this . iter ) ;
Distance : 6

144
Tree	Iterator entries = iterator ( entries . class ) ;
Code	Iterator entries = iterator ( entries . class ) ;
Distance : 5

145
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Assert
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Assert
Distance : 5

146
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; assertEquals
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; assertEquals
Distance : 11

147
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Override
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Override
Distance : 5

148
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; super
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; super
Distance : 12

149
Tree	Iterator iter = iterator ( this . iter ) ; +
Code	Iterator iter = iterator ( this . iter ) ; +
Distance : 6

150
Tree	Iterator iter = iter . iterator () ; point
Code	Iterator iter = iter . iterator () ; point
Distance : 2

151
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; assertEquals
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; assertEquals
Distance : 5

152
Tree	Iterator iter = this . entries . iterator ( Iterator ) ; +
Code	Iterator iter = this . entries . iterator ( Iterator ) ; +
Distance : 6

153
Tree	Iterator iter = this . entries . iterator ( Iterator ) ; super
Code	Iterator iter = this . entries . iterator ( Iterator ) ; super
Distance : 6

154
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; point
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; point
Distance : 12

155
Tree	Iterator iter = this . entries . iterator ( Iterator ) ; UnivariateRealFunction
Code	Iterator iter = this . entries . iterator ( Iterator ) ; UnivariateRealFunction
Distance : 6

156
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

157
Tree	Iterator iter = iter . iterator () ; UnivariateRealFunction
Code	Iterator iter = iter . iterator () ; UnivariateRealFunction
Distance : 2

158
Tree	Iterator iter = iter . iterator ( entries . class ) ; v.length
Code	Iterator iter = iter . iterator ( entries . class ) ; v.length
Distance : 7

159
Tree	Iterator iter = iter . iterator () ; super
Code	Iterator iter = iter . iterator () ; super
Distance : 2

160
Tree	Iterator iter = iter . iterator () ; +
Code	Iterator iter = iter . iterator () ; +
Distance : 2

161
Tree	Iterator iter = this . entries . iterator ( Iterator ) ; MatrixUtils
Code	Iterator iter = this . entries . iterator ( Iterator ) ; MatrixUtils
Distance : 6

162
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , false ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , false ) ;
Distance : 6

163
Tree	Iterator iter = entries . iterator ( null ) ;
Code	Iterator iter = entries . iterator ( null ) ;
Distance : 3

164
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

165
Tree	Iterator iter = entries . iterator () ;
Code	Iterator iter = entries . iterator () ;
Distance : 0

166
Tree	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; super
Code	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; super
Distance : 9

167
Tree	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; point
Code	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; point
Distance : 9

168
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Array2DRowFieldMatrix
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Array2DRowFieldMatrix
Distance : 11

169
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; MatrixUtils
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; MatrixUtils
Distance : 12

170
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ;
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ;
Distance : 5

171
Tree	Iterator iter = iter . iterator () ; Array2DRowFieldMatrix
Code	Iterator iter = iter . iterator () ; Array2DRowFieldMatrix
Distance : 2

172
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

173
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

174
Tree	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; super
Code	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; super
Distance : 7

175
Tree	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; +
Code	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; +
Distance : 7

176
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; Array2DRowFieldMatrix
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; Array2DRowFieldMatrix
Distance : 12

177
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; UnivariateRealFunction
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; UnivariateRealFunction
Distance : 12

178
Tree	Iterator iter = this . entries . iterator () . iterator () ; +
Code	Iterator iter = this . entries . iterator () . iterator () ; +
Distance : 6

179
Tree	Iterator iter = this . entries . iterator () . iterator () ; super
Code	Iterator iter = this . entries . iterator () . iterator () ; super
Distance : 6

180
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

181
Tree	Iterator iter = this . entries . iterator ( Iterator ) ; Array2DRowFieldMatrix
Code	Iterator iter = this . entries . iterator ( Iterator ) ; Array2DRowFieldMatrix
Distance : 6

182
Tree	Iterator iter = new Iterator () . iterator () ; k
Code	Iterator iter = new Iterator () . iterator () ; k
Distance : 4

183
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; +
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ; +
Distance : 12

184
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

185
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Override
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Override
Distance : 7

186
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Fraction
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Fraction
Distance : 7

187
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; k
Distance : 7

188
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; field
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; field
Distance : 7

189
Tree	Iterator iter = this . entries . iterator () . iterator () ; MatrixUtils
Code	Iterator iter = this . entries . iterator () . iterator () ; MatrixUtils
Distance : 6

190
Tree	Iterator iter = this . entries . iterator () . iterator () ; Array2DRowFieldMatrix
Code	Iterator iter = this . entries . iterator () . iterator () ; Array2DRowFieldMatrix
Distance : 6

191
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; void
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; void
Distance : 7

192
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; field
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; field
Distance : 7

193
Tree	Iterator iter = res.entries . iterator () ; Fraction
Code	Iterator iter = res.entries . iterator () ; Fraction
Distance : 2

194
Tree	Iterator iter = res.entries . iterator () ; Override
Code	Iterator iter = res.entries . iterator () ; Override
Distance : 2

195
Tree	Iterator iter = res.entries . iterator () ; k
Code	Iterator iter = res.entries . iterator () ; k
Distance : 2

196
Tree	Iterator iter = res.entries . iterator () ; void
Code	Iterator iter = res.entries . iterator () ; void
Distance : 2

197
Tree	Iterator iter = res.entries . iterator () ; field
Code	Iterator iter = res.entries . iterator () ; field
Distance : 2

198
Tree	Iterator iter = res.entries . iterator () ; Assert
Code	Iterator iter = res.entries . iterator () ; Assert
Distance : 2

199
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; Assert
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; Assert
Distance : 7

200
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Assert
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; Assert
Distance : 7

201
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; Override
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; Override
Distance : 7

202
Tree	Iterator iter = this . entries . iterator () . iterator () ; point
Code	Iterator iter = this . entries . iterator () . iterator () ; point
Distance : 6

203
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 11

204
Tree	Iterator iter = this . entries . iterator () . iterator () ; UnivariateRealFunction
Code	Iterator iter = this . entries . iterator () . iterator () ; UnivariateRealFunction
Distance : 6

205
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; Assert
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; Assert
Distance : 5

206
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; Fraction
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; Fraction
Distance : 7

207
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; assertEquals
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; assertEquals
Distance : 7

208
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; +
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; +
Distance : 11

209
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; nCols
Distance : 5

210
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; k
Distance : 5

211
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; field
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; field
Distance : 5

212
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; Override
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; Override
Distance : 5

213
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; Fraction
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; Fraction
Distance : 5

214
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; assertEquals
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; assertEquals
Distance : 5

215
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; super
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; super
Distance : 11

216
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; UnivariateRealFunction
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; UnivariateRealFunction
Distance : 11

217
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; point
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; point
Distance : 11

218
Tree	Iterator iter = iter . iterator ( entries . class ) ; MathArrays
Code	Iterator iter = iter . iterator ( entries . class ) ; MathArrays
Distance : 7

219
Tree	Iterator iter = new Iterator () . iterator () ; field
Code	Iterator iter = new Iterator () . iterator () ; field
Distance : 4

220
Tree	Iterator entries = iter . iterator ( null ) ;
Code	Iterator entries = iter . iterator ( null ) ;
Distance : 5

221
Tree	Iterator entries = iter . iterator () ;
Code	Iterator entries = iter . iterator () ;
Distance : 2

222
Tree	Iterator iter = iterator ( iter . class ) ;
Code	Iterator iter = iterator ( iter . class ) ;
Distance : 5

223
Tree	Iterator iter = iterator ( this . iter ) ;
Code	Iterator iter = iterator ( this . iter ) ;
Distance : 5

224
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , true ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , true ) ;
Distance : 5

225
Tree	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; MatrixUtils
Code	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; MatrixUtils
Distance : 9

226
Tree	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; Array2DRowFieldMatrix
Code	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; Array2DRowFieldMatrix
Distance : 9

227
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; assertEquals
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; assertEquals
Distance : 13

228
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; Fraction
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; Fraction
Distance : 13

229
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; Override
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; Override
Distance : 13

230
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; k
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; k
Distance : 6

231
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; field
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; field
Distance : 6

232
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; Assert
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; Assert
Distance : 6

233
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; void
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; void
Distance : 6

234
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; Override
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; Override
Distance : 6

235
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; Fraction
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; Fraction
Distance : 6

236
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; assertEquals
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; assertEquals
Distance : 6

237
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; Assert
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; Assert
Distance : 13

238
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

239
Tree	Iterator iter = res.entries . iterator () . iterator () ; void
Code	Iterator iter = res.entries . iterator () . iterator () ; void
Distance : 5

240
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; field
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; field
Distance : 13

241
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; k
Distance : 13

242
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , false ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , false ) ;
Distance : 7

243
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 11

244
Tree	Iterator iter = res.entries . iterator () . iterator () ; Fraction
Code	Iterator iter = res.entries . iterator () . iterator () ; Fraction
Distance : 5

245
Tree	Iterator iter = iter . iterator ( super(); ) ;
Code	Iterator iter = iter . iterator ( super(); ) ;
Distance : 4

246
Tree	Iterator iter = res.entries . iterator () . iterator () ; Override
Code	Iterator iter = res.entries . iterator () . iterator () ; Override
Distance : 5

247
Tree	Iterator iter = res.entries . iterator () . iterator () ; Assert
Code	Iterator iter = res.entries . iterator () . iterator () ; Assert
Distance : 5

248
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Distance : 15

249
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; field
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; field
Distance : 15

250
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Assert
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Assert
Distance : 15

251
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; void
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; void
Distance : 15

252
Tree	Iterator iter = iter . iterator ( continue; ) ;
Code	Iterator iter = iter . iterator ( continue; ) ;
Distance : 4

253
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Distance : 15

254
Tree	Iterator iter = iter . iterator ( iter . class ) ;
Code	Iterator iter = iter . iterator ( iter . class ) ;
Distance : 6

255
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Fraction
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; Fraction
Distance : 5

256
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; assertEquals
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; assertEquals
Distance : 11

257
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; nCols
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; nCols
Distance : 11

258
Tree	Iterator iter = res.entries . iterator () ;
Code	Iterator iter = res.entries . iterator () ;
Distance : 1

259
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 12

260
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; k
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; k
Distance : 11

261
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , true ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , true ) ;
Distance : 7

262
Tree	Iterator iter = res.entries . iterator () . iterator () ; nCols
Code	Iterator iter = res.entries . iterator () . iterator () ; nCols
Distance : 5

263
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; field
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; field
Distance : 11

264
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; nCols
Distance : 8

265
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; k
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; k
Distance : 8

266
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; field
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; field
Distance : 8

267
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; Assert
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; Assert
Distance : 8

268
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; void
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; void
Distance : 8

269
Tree	Iterator entries ;
Code	Iterator entries ;
Distance : 5

270
Tree	Iterator iter = res.entries . iterator () . iterator () ; k
Code	Iterator iter = res.entries . iterator () . iterator () ; k
Distance : 5

271
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 11

272
Tree	Iterator iter = this . entries . iterator () ;
Code	Iterator iter = this . entries . iterator () ;
Distance : 2

273
Tree	Iterator iter = iter . iterator ( iter , null ) ;
Code	Iterator iter = iter . iterator ( iter , null ) ;
Distance : 6

274
Tree	Iterator iter = new Iterator () . iterator () ; assertEquals
Code	Iterator iter = new Iterator () . iterator () ; assertEquals
Distance : 4

275
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 10

276
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 9

277
Tree	Iterator iter = iter . iterator ( break; ) ;
Code	Iterator iter = iter . iterator ( break; ) ;
Distance : 4

278
Tree	Iterator iter = iter . iterator ( entries , null ) ;
Code	Iterator iter = iter . iterator ( entries , null ) ;
Distance : 6

279
Tree	Iterator iter = iter . iterator ( entries . class ) ;
Code	Iterator iter = iter . iterator ( entries . class ) ;
Distance : 6

280
Tree	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; nCols
Code	Iterator iter = new Iterator ( STRING_CONSTANT ) . iterator () ; nCols
Distance : 6

281
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

282
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , iterator ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 10

283
Tree	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ;
Distance : 6

284
Tree	Iterator entries = iter . iterator ( iter , null ) ;
Code	Iterator entries = iter . iterator ( iter , null ) ;
Distance : 7

285
Tree	final Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	final Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

286
Tree	Iterator entries = entries . iterator ( entries , null ) ;
Code	Iterator entries = entries . iterator ( entries , null ) ;
Distance : 6

287
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ;
Distance : 7

288
Tree	Iterator entries = iterator ( super(); , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( super(); , STRING_CONSTANT ) ;
Distance : 7

289
Tree	abstract Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	abstract Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 6

290
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ; void
Code	Iterator iter = iterator ( STRING_CONSTANT ) ; void
Distance : 5

291
Tree	Iterator entries = this . iter . iterator () ;
Code	Iterator entries = this . iter . iterator () ;
Distance : 4

292
Tree	Iterator iter = iterator ( entries . class ) ;
Code	Iterator iter = iterator ( entries . class ) ;
Distance : 4

293
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; void
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; void
Distance : 13

294
Tree	Iterator iter = iter . iterator ( iter , this . iter ) ;
Code	Iterator iter = iter . iterator ( iter , this . iter ) ;
Distance : 8

295
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; field
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; field
Distance : 5

296
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; UnivariateRealFunction
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; UnivariateRealFunction
Distance : 9

297
Tree	Iterator entries = entries . iterator ( entries . class ) ;
Code	Iterator entries = entries . iterator ( entries . class ) ;
Distance : 6

298
Tree	Iterator iter = entries ( iter . class , iter ) ;
Code	Iterator iter = entries ( iter . class , iter ) ;
Distance : 6

299
Tree	Iterator iter = iterator ( Iterator , Iterator ) ; assertEquals
Code	Iterator iter = iterator ( Iterator , Iterator ) ; assertEquals
Distance : 7

300
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; field
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; field
Distance : 7

301
Tree	Iterator iter ; Assert
Code	Iterator iter ; Assert
Distance : 6

302
Tree	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator ( NUMBER_CONSTANT ) ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , res.entries . iterator ( NUMBER_CONSTANT ) ) ; k
Distance : 10

303
Tree	Iterator iter = iterator ( iter . class ) ; point
Code	Iterator iter = iterator ( iter . class ) ; point
Distance : 6

304
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

305
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ;
Distance : 6

306
Tree	Iterator entries = iter . iterator ( iter . class ) ;
Code	Iterator entries = iter . iterator ( iter . class ) ;
Distance : 7

307
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , false ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , false ) ;
Distance : 5

308
Tree	Iterator iter = this . entries . iterator () ; UnivariateRealFunction
Code	Iterator iter = this . entries . iterator () ; UnivariateRealFunction
Distance : 3

309
Tree	Iterator iter = iterator ( iter . class ) ; UnivariateRealFunction
Code	Iterator iter = iterator ( iter . class ) ; UnivariateRealFunction
Distance : 6

310
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; +
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; +
Distance : 7

311
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; super
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; super
Distance : 7

312
Tree	Iterator iter = iterator ( Iterator , Iterator ) ; Fraction
Code	Iterator iter = iterator ( Iterator , Iterator ) ; Fraction
Distance : 7

313
Tree	Iterator iter = iterator ( return; , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( return; , STRING_CONSTANT ) ;
Distance : 6

314
Tree	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; UnivariateRealFunction
Code	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; UnivariateRealFunction
Distance : 9

315
Tree	protected Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	protected Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 6

316
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; Array2DRowFieldMatrix
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; Array2DRowFieldMatrix
Distance : 5

317
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ;
Distance : 7

318
Tree	Iterator entries = iterator ( return; , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( return; , STRING_CONSTANT ) ;
Distance : 7

319
Tree	Iterator entries = iterator ( continue; , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( continue; , STRING_CONSTANT ) ;
Distance : 7

320
Tree	Iterator entries = this . iter . iterator () . iterator () ;
Code	Iterator entries = this . iter . iterator () . iterator () ;
Distance : 7

321
Tree	Iterator iter = iterator ( Iterator , Iterator ) ;
Code	Iterator iter = iterator ( Iterator , Iterator ) ;
Distance : 6

322
Tree	Iterator iter = iter . iterator ( entries , super(); ) ;
Code	Iterator iter = iter . iterator ( entries , super(); ) ;
Distance : 6

323
Tree	Iterator iter = iter . iterator ( entries , this . entries ) ;
Code	Iterator iter = iter . iterator ( entries , this . entries ) ;
Distance : 8

324
Tree	Iterator entries = this . entries . iterator ( Iterator ) ;
Code	Iterator entries = this . entries . iterator ( Iterator ) ;
Distance : 6

325
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ;
Distance : 6

326
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT , Iterator ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT , Iterator ) ;
Distance : 5

327
Tree	Iterator iter = iterator ( STRING_CONSTANT , entries , iter ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , entries , iter ) ;
Distance : 7

328
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ;
Distance : 9

329
Tree	Iterator entries = iterator ( this . entries ) ;
Code	Iterator entries = iterator ( this . entries ) ;
Distance : 6

330
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; Array2DRowFieldMatrix
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; Array2DRowFieldMatrix
Distance : 7

331
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Distance : 9

332
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; void
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; void
Distance : 7

333
Tree	Iterator iter = entries ( iter . class , entries ) ;
Code	Iterator iter = entries ( iter . class , entries ) ;
Distance : 6

334
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; UnivariateRealFunction
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; UnivariateRealFunction
Distance : 7

335
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator () ) ; k
Distance : 7

336
Tree	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; Array2DRowFieldMatrix
Code	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; Array2DRowFieldMatrix
Distance : 7

337
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; point
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; point
Distance : 7

338
Tree	Iterator iter = iter ( iter . class , entries ) ;
Code	Iterator iter = iter ( iter . class , entries ) ;
Distance : 7

339
Tree	Iterator iter = res.entries . iterator () ; nCols
Code	Iterator iter = res.entries . iterator () ; nCols
Distance : 2

340
Tree	Iterator iter = iterator () ; Override
Code	Iterator iter = iterator () ; Override
Distance : 3

341
Tree	Iterator iter = new Iterator () . iterator () ; Fraction
Code	Iterator iter = new Iterator () . iterator () ; Fraction
Distance : 4

342
Tree	Iterator iter = res.entries . iterator () ; nCols
Code	Iterator iter = res.entries . iterator () ; nCols
Distance : 2

343
Tree	Iterator iter = this . iter . iterator ( Iterator ) ;
Code	Iterator iter = this . iter . iterator ( Iterator ) ;
Distance : 6

344
Tree	Iterator iter = iterator ( iter . class ) ; super
Code	Iterator iter = iterator ( iter . class ) ; super
Distance : 6

345
Tree	Iterator iter = entries . iterator ( break; ) ;
Code	Iterator iter = entries . iterator ( break; ) ;
Distance : 3

346
Tree	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; MatrixUtils
Code	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; MatrixUtils
Distance : 7

347
Tree	Iterator iter = iterator ( Iterator , Iterator ) ; Override
Code	Iterator iter = iterator ( Iterator , Iterator ) ; Override
Distance : 7

348
Tree	Iterator iter = iterator () ;
Code	Iterator iter = iterator () ;
Distance : 2

349
Tree	Iterator iter ; field
Code	Iterator iter ; field
Distance : 6

350
Tree	Iterator iter = iterator ( Iterator , Iterator ) ; void
Code	Iterator iter = iterator ( Iterator , Iterator ) ; void
Distance : 7

351
Tree	Iterator iter ; Override
Code	Iterator iter ; Override
Distance : 6

352
Tree	Iterator entries = entries . iterator ( iter . class ) ;
Code	Iterator entries = entries . iterator ( iter . class ) ;
Distance : 6

353
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; MatrixUtils
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator ) ; MatrixUtils
Distance : 7

354
Tree	Iterator entries = iter ( entries . class , entries ) ;
Code	Iterator entries = iter ( entries . class , entries ) ;
Distance : 7

355
Tree	Iterator iter ; Fraction
Code	Iterator iter ; Fraction
Distance : 6

356
Tree	Iterator iter = iterator ( Iterator , Iterator ) ; Assert
Code	Iterator iter = iterator ( Iterator , Iterator ) ; Assert
Distance : 7

357
Tree	Iterator entries = this . iter . iterator ( Iterator ) ;
Code	Iterator entries = this . iter . iterator ( Iterator ) ;
Distance : 7

358
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; assertEquals
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; assertEquals
Distance : 10

359
Tree	Iterator entries = entries . iterator ( Iterator , NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( Iterator , NUMBER_CONSTANT ) ;
Distance : 6

360
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; point
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; point
Distance : 9

361
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; assertEquals
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; assertEquals
Distance : 15

362
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; void
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; void
Distance : 5

363
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; assertEquals
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; assertEquals
Distance : 8

364
Tree	Iterator iter ; assertEquals
Code	Iterator iter ; assertEquals
Distance : 6

365
Tree	Iterator iter = iterator () ; nCols
Code	Iterator iter = iterator () ; nCols
Distance : 3

366
Tree	static Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	static Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

367
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; super
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; super
Distance : 9

368
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , true ) ; MathArrays
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , true ) ; MathArrays
Distance : 7

369
Tree	Iterator iter = iterator ( Iterator , Iterator ) ; field
Code	Iterator iter = iterator ( Iterator , Iterator ) ; field
Distance : 7

370
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; +
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; +
Distance : 9

371
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; +
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; +
Distance : 9

372
Tree	Iterator iter = res.entries . iterator () . iterator () ; field
Code	Iterator iter = res.entries . iterator () . iterator () ; field
Distance : 5

373
Tree	Iterator entries = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 13

374
Tree	Iterator iter = entries . iterator ( iter , this . iter ) ;
Code	Iterator iter = entries . iterator ( iter , this . iter ) ;
Distance : 7

375
Tree	Iterator entries = iterator ( Iterator ) . iterator () ;
Code	Iterator entries = iterator ( Iterator ) . iterator () ;
Distance : 5

376
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; assertEquals
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; assertEquals
Distance : 7

377
Tree	Iterator iter = new Iterator () . iterator () ; Override
Code	Iterator iter = new Iterator () . iterator () ; Override
Distance : 4

378
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ;
Distance : 4

379
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 6

380
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; nCols
Distance : 5

381
Tree	Iterator iter = entries . iterator ( entries , null ) ;
Code	Iterator iter = entries . iterator ( entries , null ) ;
Distance : 5

382
Tree	Iterator iter = entries . iterator ( super(); ) ;
Code	Iterator iter = entries . iterator ( super(); ) ;
Distance : 3

383
Tree	Iterator entries = iter ( iter . class , iter ) ;
Code	Iterator entries = iter ( iter . class , iter ) ;
Distance : 8

384
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; Override
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; Override
Distance : 10

385
Tree	Iterator iter = iter ( entries . class , iter ) ;
Code	Iterator iter = iter ( entries . class , iter ) ;
Distance : 6

386
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; k
Distance : 11

387
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; nCols
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; nCols
Distance : 7

388
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; field
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; field
Distance : 9

389
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; super
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; super
Distance : 9

390
Tree	Iterator iter = iterator () ; k
Code	Iterator iter = iterator () ; k
Distance : 3

391
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; Fraction
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; Fraction
Distance : 11

392
Tree	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; point
Code	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; point
Distance : 7

393
Tree	Iterator iter = iterator ( this . iter ) ; Array2DRowFieldMatrix
Code	Iterator iter = iterator ( this . iter ) ; Array2DRowFieldMatrix
Distance : 6

394
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; nCols
Distance : 10

395
Tree	Iterator iter = iterator ( Iterator , Iterator ) ; k
Code	Iterator iter = iterator ( Iterator , Iterator ) ; k
Distance : 7

396
Tree	Iterator iter = iterator ( Iterator ) . iterator () ; nCols
Code	Iterator iter = iterator ( Iterator ) . iterator () ; nCols
Distance : 5

397
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Fraction
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; Fraction
Distance : 5

398
Tree	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , iterator ( Iterator ) , STRING_CONSTANT + STRING_CONSTANT ) ; nCols
Distance : 13

399
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Override
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Override
Distance : 15

400
Tree	Iterator iter = res.entries . iterator () ; assertEquals
Code	Iterator iter = res.entries . iterator () ; assertEquals
Distance : 2

401
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; UnivariateRealFunction
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; UnivariateRealFunction
Distance : 9

402
Tree	Iterator iter = new Iterator () . iterator () ; void
Code	Iterator iter = new Iterator () . iterator () ; void
Distance : 4

403
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; assertEquals
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; assertEquals
Distance : 5

404
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

405
Tree	Iterator iter = this . entries . iterator ( Iterator ) ; point
Code	Iterator iter = this . entries . iterator ( Iterator ) ; point
Distance : 6

406
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; point
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; point
Distance : 9

407
Tree	Iterator iter = iterator ( this . iter ) ; super
Code	Iterator iter = iterator ( this . iter ) ; super
Distance : 6

408
Tree	Iterator iter ; void
Code	Iterator iter ; void
Distance : 6

409
Tree	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; UnivariateRealFunction
Code	Iterator iter = iter . iterator ( Iterator , NUMBER_CONSTANT ) ; UnivariateRealFunction
Distance : 7

410
Tree	Iterator iter = iterator ( STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT ) ;
Distance : 4

411
Tree	Iterator iter ; nCols
Code	Iterator iter ; nCols
Distance : 6

412
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; MatrixUtils
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; MatrixUtils
Distance : 9

413
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Assert
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Assert
Distance : 9

414
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

415
Tree	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; Fraction
Code	Iterator iter = iterator ( STRING_CONSTANT , Iterator . iterator ( NUMBER_CONSTANT ) ) ; Fraction
Distance : 10

416
Tree	Iterator entries = iterator ( Iterator , Iterator ) ;
Code	Iterator entries = iterator ( Iterator , Iterator ) ;
Distance : 7

417
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; void
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; void
Distance : 9

418
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; Array2DRowFieldMatrix
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT , Iterator . iterator () ) ; Array2DRowFieldMatrix
Distance : 9

419
Tree	Iterator iter ; k
Code	Iterator iter ; k
Distance : 6

420
Tree	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; +
Code	Iterator iter = iterator ( STRING_CONSTANT , iter , iter ) ; +
Distance : 9

421
Tree	Iterator iter = this . entries . iterator () . iterator () ;
Code	Iterator iter = this . entries . iterator () . iterator () ;
Distance : 5

422
Tree	Iterator iter = iterator ( null , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( null , STRING_CONSTANT ) ;
Distance : 6

423
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT ) ; nCols
Distance : 7

424
Tree	Iterator iter = this . iter . iterator () ;
Code	Iterator iter = this . iter . iterator () ;
Distance : 3

425
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

426
Tree	Iterator iter = new Iterator () . iterator () ; Assert
Code	Iterator iter = new Iterator () . iterator () ; Assert
Distance : 4

427
Tree	Iterator iter = entries . iterator ( Iterator , NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( Iterator , NUMBER_CONSTANT ) ;
Distance : 5

428
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; field
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; field
Distance : 11

429
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 14

430
Tree	Iterator iter = this . entries . iterator () ; MatrixUtils
Code	Iterator iter = this . entries . iterator () ; MatrixUtils
Distance : 3

431
Tree	Iterator iter = iter . iterator ( return; ) ;
Code	Iterator iter = iter . iterator ( return; ) ;
Distance : 4

432
Tree	Iterator iter = iterator ( NUMBER_CONSTANT ) ; k
Code	Iterator iter = iterator ( NUMBER_CONSTANT ) ; k
Distance : 5

433
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; Fraction
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; Fraction
Distance : 8

434
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT , Iterator ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT , Iterator ) ;
Distance : 7

435
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; Override
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; Override
Distance : 11

436
Tree	Iterator iter = iterator ( this . iter ) ; MatrixUtils
Code	Iterator iter = iterator ( this . iter ) ; MatrixUtils
Distance : 6

437
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Assert
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Assert
Distance : 11

438
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; k
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) . iterator () ; k
Distance : 7

439
Tree	Iterator iter = new Iterator () . iterator () ; nCols
Code	Iterator iter = new Iterator () . iterator () ; nCols
Distance : 4

440
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; void
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; void
Distance : 11

441
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; MatrixUtils
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; MatrixUtils
Distance : 11

442
Tree	Iterator iter = this . entries . iterator () ; super
Code	Iterator iter = this . entries . iterator () ; super
Distance : 3

443
Tree	Iterator iter = iterator ( Iterator , Iterator ) ; nCols
Code	Iterator iter = iterator ( Iterator , Iterator ) ; nCols
Distance : 7

444
Tree	Iterator iter = iterator ( Iterator ) . iterator () ; k
Code	Iterator iter = iterator ( Iterator ) . iterator () ; k
Distance : 5

445
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; nCols
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; nCols
Distance : 5

446
Tree	Iterator iter = res.entries . iterator () . iterator () ; assertEquals
Code	Iterator iter = res.entries . iterator () . iterator () ; assertEquals
Distance : 5

447
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Fraction
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; Fraction
Distance : 15

448
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 7

449
Tree	Iterator iter = iter . iterator () ; MatrixUtils
Code	Iterator iter = iter . iterator () ; MatrixUtils
Distance : 2

450
Tree	Iterator iter = iterator ( this . iter ) ; point
Code	Iterator iter = iterator ( this . iter ) ; point
Distance : 6

451
Tree	Iterator entries = new Iterator ( STRING_CONSTANT ) . iterator () ;
Code	Iterator entries = new Iterator ( STRING_CONSTANT ) . iterator () ;
Distance : 6

452
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 3

453
Tree	Iterator iter = iterator ( Iterator ) ;
Code	Iterator iter = iterator ( Iterator ) ;
Distance : 4

454
Tree	Iterator iter = new Iterator () . iterator () ;
Code	Iterator iter = new Iterator () . iterator () ;
Distance : 3

455
Tree	Iterator iter = iter ( iter . class , iter ) ;
Code	Iterator iter = iter ( iter . class , iter ) ;
Distance : 7

456
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; void
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; void
Distance : 11

457
Tree	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; Override
Code	Iterator iter = iterator ( Iterator ) . iterator ( NUMBER_CONSTANT ) ; Override
Distance : 8

458
Tree	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; Assert
Code	Iterator iter = iterator ( iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ; Assert
Distance : 11

459
Tree	Iterator iter = iterator ( this . iter ) ; UnivariateRealFunction
Code	Iterator iter = iterator ( this . iter ) ; UnivariateRealFunction
Distance : 6

========================================================================


========================================================================
Example Number: 17
Parent Code is: 
if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
-------------------------------------------------------------------------------
Child code is: 
if ( divisor == NUMBER_CONSTANT ) { return isZero ? NaN : INF ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=divisor}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=NaN}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=divisor}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (16 (800{val=isZero}) (233{val=?}) (800{val=NaN}) (226{val=:}) (800{val=INF})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/47/parent/src_main_java_org_apache_commons_math_complex_Complex.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 350
Wrong
========================================================================
False

0
Tree	if ( isZero () ) { return NaN ; }
Code	if ( isZero () ) { return NaN ; }
Distance : 7

1
Tree	if ( getPreviousTime () ) { return NaN ; }
Code	if ( getPreviousTime () ) { return NaN ; }
Distance : 7

2
Tree	if ( isIncludedColumn ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isIncludedColumn ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

3
Tree	if ( isDefaultValue ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isDefaultValue ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

4
Tree	if ( computeWeightedJacobian ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( computeWeightedJacobian ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

5
Tree	if ( isIncludedColumn () ) { return NaN ; }
Code	if ( isIncludedColumn () ) { return NaN ; }
Distance : 7

6
Tree	if ( isDefaultValue () ) { return NaN ; }
Code	if ( isDefaultValue () ) { return NaN ; }
Distance : 7

7
Tree	if ( this . isSame () ) { return NaN ; }
Code	if ( this . isSame () ) { return NaN ; }
Distance : 8

8
Tree	if ( computeWeightedJacobian () ) { return NaN ; }
Code	if ( computeWeightedJacobian () ) { return NaN ; }
Distance : 7

9
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ; } v.length
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ; } v.length
Distance : 6

10
Tree	if ( isZero ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isZero ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

11
Tree	if ( this . isAssignableFrom ( isZero ) ) { return NaN ; }
Code	if ( this . isAssignableFrom ( isZero ) ) { return NaN ; }
Distance : 10

12
Tree	if ( ! testGaussNewtonQR ( isZero ) ) { return NaN ; }
Code	if ( ! testGaussNewtonQR ( isZero ) ) { return NaN ; }
Distance : 9

13
Tree	if ( this . hasNext ( isZero ) ) { return NaN ; }
Code	if ( this . hasNext ( isZero ) ) { return NaN ; }
Distance : 10

14
Tree	if ( isZero . getVertices ( isZero ) ) { return NaN ; }
Code	if ( isZero . getVertices ( isZero ) ) { return NaN ; }
Distance : 10

15
Tree	if ( isZero . isSame ( isZero ) ) { return NaN ; }
Code	if ( isZero . isSame ( isZero ) ) { return NaN ; }
Distance : 10

16
Tree	if ( isZero . isAssignableFrom ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isZero . isAssignableFrom ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 12

17
Tree	if ( isZero . getVertices ( Coordinates1D.ZERO ) ) { return NaN ; }
Code	if ( isZero . getVertices ( Coordinates1D.ZERO ) ) { return NaN ; }
Distance : 10

18
Tree	if ( new StreamDataAdapter () . copy ( isZero ) ) { return NaN ; }
Code	if ( new StreamDataAdapter () . copy ( isZero ) ) { return NaN ; }
Distance : 11

19
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ; }
Distance : 4

20
Tree	if ( NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 5

21
Tree	if ( NaN == NUMBER_CONSTANT ) { return isZero ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return isZero ; }
Distance : 5

22
Tree	if ( isZero ( getSlope () ) ) { return NaN ; }
Code	if ( isZero ( getSlope () ) ) { return NaN ; }
Distance : 9

23
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ; }
Distance : 5

24
Tree	if ( target.length ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( target.length ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

25
Tree	if ( computeWeightedJacobian () == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( computeWeightedJacobian () == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

26
Tree	if ( new NestedLoops ( NUMBER_CONSTANT ) . hashCode ( isZero ) ) { return NaN ; }
Code	if ( new NestedLoops ( NUMBER_CONSTANT ) . hashCode ( isZero ) ) { return NaN ; }
Distance : 11

27
Tree	if ( computeWeightedJacobian ( Math.PI ) ) { return NaN ; }
Code	if ( computeWeightedJacobian ( Math.PI ) ) { return NaN ; }
Distance : 8

28
Tree	if ( isIncludedColumn ( isZero , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isIncludedColumn ( isZero , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

29
Tree	if ( new StepNormalizerMode.MULTIPLES ( NUMBER_CONSTANT ) . isSame ( isZero ) ) { return NaN ; }
Code	if ( new StepNormalizerMode.MULTIPLES ( NUMBER_CONSTANT ) . isSame ( isZero ) ) { return NaN ; }
Distance : 11

30
Tree	if ( isDefaultValue () == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( isDefaultValue () == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

31
Tree	if ( computeWeightedJacobian ( computeWeightedJacobian () ) ) { return NaN ; }
Code	if ( computeWeightedJacobian ( computeWeightedJacobian () ) ) { return NaN ; }
Distance : 9

32
Tree	if ( isIncludedColumn () == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( isIncludedColumn () == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

33
Tree	if ( isDefaultValue ( isZero , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isDefaultValue ( isZero , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

34
Tree	if ( isZero . isSame ( Coordinates1D.ZERO ) ) { return NaN ; }
Code	if ( isZero . isSame ( Coordinates1D.ZERO ) ) { return NaN ; }
Distance : 10

35
Tree	if ( isZero . getVertices ( ! ) ) { return NaN ; }
Code	if ( isZero . getVertices ( ! ) ) { return NaN ; }
Distance : 10

36
Tree	if ( isZero . isIncludedColumn ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isZero . isIncludedColumn ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

37
Tree	if ( isDefaultValue ( Math.PI ) ) { return NaN ; }
Code	if ( isDefaultValue ( Math.PI ) ) { return NaN ; }
Distance : 8

38
Tree	if ( isIncludedColumn ( Math.PI ) ) { return NaN ; }
Code	if ( isIncludedColumn ( Math.PI ) ) { return NaN ; }
Distance : 8

39
Tree	if ( isZero ( isIncludedColumn () ) ) { return NaN ; }
Code	if ( isZero ( isIncludedColumn () ) ) { return NaN ; }
Distance : 9

40
Tree	if ( new variablesToInclude.length () . copy ( isZero ) ) { return NaN ; }
Code	if ( new variablesToInclude.length () . copy ( isZero ) ) { return NaN ; }
Distance : 11

41
Tree	if ( ! ) ?
Code	if ( ! ) ?
Distance : 11

42
Tree	if ( isZero . getVertices ( stat.aggregateStatistics ) ) { return NaN ; }
Code	if ( isZero . getVertices ( stat.aggregateStatistics ) ) { return NaN ; }
Distance : 10

43
Tree	if ( isZero == NUMBER_CONSTANT ) { return isZero ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return isZero ; }
Distance : 5

44
Tree	if ( isZero . getVertices ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isZero . getVertices ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 12

45
Tree	if ( isZero . isSame ( stat.aggregateStatistics ) ) { return NaN ; }
Code	if ( isZero . isSame ( stat.aggregateStatistics ) ) { return NaN ; }
Distance : 10

46
Tree	if ( isZero . isSame ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isZero . isSame ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 12

47
Tree	if ( this . isZero . getDefaultNumberFormat () ) { return NaN ; }
Code	if ( this . isZero . getDefaultNumberFormat () ) { return NaN ; }
Distance : 10

48
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

49
Tree	if ( this . isZero . getLocation () ) { return NaN ; }
Code	if ( this . isZero . getLocation () ) { return NaN ; }
Distance : 10

50
Tree	if ( computeWeightedJacobian ( isZero , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( computeWeightedJacobian ( isZero , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

51
Tree	if ( isZero . isAssignableFrom ( stat.aggregateStatistics ) ) { return NaN ; }
Code	if ( isZero . isAssignableFrom ( stat.aggregateStatistics ) ) { return NaN ; }
Distance : 10

52
Tree	if ( computeWeightedJacobian ( this , isZero ) ) { return NaN ; }
Code	if ( computeWeightedJacobian ( this , isZero ) ) { return NaN ; }
Distance : 10

53
Tree	if ( isZero ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isZero ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

54
Tree	if ( target.length () ) { return NaN ; }
Code	if ( target.length () ) { return NaN ; }
Distance : 7

55
Tree	if ( isIncludedColumn ( this , isZero ) ) { return NaN ; }
Code	if ( isIncludedColumn ( this , isZero ) ) { return NaN ; }
Distance : 10

56
Tree	if ( getPreviousTime ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( getPreviousTime ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

57
Tree	if ( Math.PI . isSame ( isZero ) ) { return NaN ; }
Code	if ( Math.PI . isSame ( isZero ) ) { return NaN ; }
Distance : 10

58
Tree	if ( fst () ) { return NaN ; }
Code	if ( fst () ) { return NaN ; }
Distance : 7

59
Tree	if ( new variablesToInclude.length ( NUMBER_CONSTANT ) . copySign ( isZero ) ) { return NaN ; }
Code	if ( new variablesToInclude.length ( NUMBER_CONSTANT ) . copySign ( isZero ) ) { return NaN ; }
Distance : 11

60
Tree	if ( this . getVertices ( isZero ) ) { return NaN ; }
Code	if ( this . getVertices ( isZero ) ) { return NaN ; }
Distance : 10

61
Tree	if ( copySign () ) { return NaN ; }
Code	if ( copySign () ) { return NaN ; }
Distance : 7

62
Tree	if ( new EnumeratedRealDistribution ( NUMBER_CONSTANT ) . hashCode ( isZero ) ) { return NaN ; }
Code	if ( new EnumeratedRealDistribution ( NUMBER_CONSTANT ) . hashCode ( isZero ) ) { return NaN ; }
Distance : 11

63
Tree	if ( this . logDensity () ) { return NaN ; }
Code	if ( this . logDensity () ) { return NaN ; }
Distance : 8

64
Tree	if ( computeWeightedJacobian ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( computeWeightedJacobian ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

65
Tree	if ( target.length ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( target.length ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

66
Tree	if ( target.length . isSame ( isZero ) ) { return NaN ; }
Code	if ( target.length . isSame ( isZero ) ) { return NaN ; }
Distance : 10

67
Tree	if ( this . compareTo ( isZero ) ) { return NaN ; }
Code	if ( this . compareTo ( isZero ) ) { return NaN ; }
Distance : 10

68
Tree	if ( this . costEvaluations ( isZero ) ) { return NaN ; }
Code	if ( this . costEvaluations ( isZero ) ) { return NaN ; }
Distance : 10

69
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ; }
Distance : 5

70
Tree	if ( ^= () ) { return NaN ; }
Code	if ( ^= () ) { return NaN ; }
Distance : 7

71
Tree	if ( this . isZero . isOptimal () ) { return NaN ; }
Code	if ( this . isZero . isOptimal () ) { return NaN ; }
Distance : 10

72
Tree	if ( mode ( isZero ) ) { return NaN ; }
Code	if ( mode ( isZero ) ) { return NaN ; }
Distance : 8

73
Tree	if ( this . iterations ( isZero ) ) { return NaN ; }
Code	if ( this . iterations ( isZero ) ) { return NaN ; }
Distance : 10

74
Tree	if ( this . isSequence ( isZero ) ) { return NaN ; }
Code	if ( this . isSequence ( isZero ) ) { return NaN ; }
Distance : 10

75
Tree	if ( interpolator.nordsieck . isSame ( isZero ) ) { return NaN ; }
Code	if ( interpolator.nordsieck . isSame ( isZero ) ) { return NaN ; }
Distance : 10

76
Tree	if ( isZero . nextBoolean () ) { return NaN ; }
Code	if ( isZero . nextBoolean () ) { return NaN ; }
Distance : 8

77
Tree	if ( true ) :
Code	if ( true ) :
Distance : 11

78
Tree	if ( isZero . isIncludedColumn ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isZero . isIncludedColumn ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 12

79
Tree	if ( isZero . getCovariances () ) { return NaN ; }
Code	if ( isZero . getCovariances () ) { return NaN ; }
Distance : 8

80
Tree	if ( ^= ( isZero , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( ^= ( isZero , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

81
Tree	if ( ! isSame ( isZero ) ) { return NaN ; }
Code	if ( ! isSame ( isZero ) ) { return NaN ; }
Distance : 9

82
Tree	if ( ^= ( this , isZero ) ) { return NaN ; }
Code	if ( ^= ( this , isZero ) ) { return NaN ; }
Distance : 10

83
Tree	if ( mode ( isZero , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( mode ( isZero , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

84
Tree	if ( STRING_CONSTANT . isOptimal ( isZero ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . isOptimal ( isZero ) ) { return NaN ; }
Distance : 10

85
Tree	if ( isZero . isAssignableFrom ( isZero ) ) { return NaN ; }
Code	if ( isZero . isAssignableFrom ( isZero ) ) { return NaN ; }
Distance : 10

86
Tree	if ( isZero . isOptimal ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isZero . isOptimal ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 12

87
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

88
Tree	if ( this . isZero . logDensity () ) { return NaN ; }
Code	if ( this . isZero . logDensity () ) { return NaN ; }
Distance : 10

89
Tree	if ( new StreamDataAdapter ( NUMBER_CONSTANT ) . isSame ( isZero ) ) { return NaN ; }
Code	if ( new StreamDataAdapter ( NUMBER_CONSTANT ) . isSame ( isZero ) ) { return NaN ; }
Distance : 11

90
Tree	if ( this . logDensity ( isZero ) ) { return NaN ; }
Code	if ( this . logDensity ( isZero ) ) { return NaN ; }
Distance : 10

91
Tree	if ( mode ( this , isZero ) ) { return NaN ; }
Code	if ( mode ( this , isZero ) ) { return NaN ; }
Distance : 10

92
Tree	if ( isZero . == ( divisor ) ) { return NaN ; }
Code	if ( isZero . == ( divisor ) ) { return NaN ; }
Distance : 9

93
Tree	if ( NaN . isZero ( divisor ) ) { return NaN ; }
Code	if ( NaN . isZero ( divisor ) ) { return NaN ; }
Distance : 10

94
Tree	if ( isZero . NaN ( divisor ) ) { return NaN ; }
Code	if ( isZero . NaN ( divisor ) ) { return NaN ; }
Distance : 10

95
Tree	if ( new StreamDataAdapter ( NUMBER_CONSTANT ) . copySign ( isZero ) ) { return NaN ; }
Code	if ( new StreamDataAdapter ( NUMBER_CONSTANT ) . copySign ( isZero ) ) { return NaN ; }
Distance : 11

96
Tree	if ( this . isZero . isAssignableFrom () ) { return NaN ; }
Code	if ( this . isZero . isAssignableFrom () ) { return NaN ; }
Distance : 10

97
Tree	if ( isZero . getVertices ( true ) ) { return NaN ; }
Code	if ( isZero . getVertices ( true ) ) { return NaN ; }
Distance : 10

98
Tree	if ( null ) {}
Code	if ( null ) {}
Distance : 12

99
Tree	if ( isZero ( interpolator.nordsieck ) ) { return NaN ; }
Code	if ( isZero ( interpolator.nordsieck ) ) { return NaN ; }
Distance : 8

100
Tree	if ( computeWeightedJacobian () . length ( Math.PI ) ) { return NaN ; }
Code	if ( computeWeightedJacobian () . length ( Math.PI ) ) { return NaN ; }
Distance : 11

101
Tree	if ( NaN ) { return NaN ; }
Code	if ( NaN ) { return NaN ; }
Distance : 7

102
Tree	if ( computeWeightedJacobian ( isZero ) ) { return NaN ; }
Code	if ( computeWeightedJacobian ( isZero ) ) { return NaN ; }
Distance : 8

103
Tree	if ( isDefaultValue () . length ( Math.PI ) ) { return NaN ; }
Code	if ( isDefaultValue () . length ( Math.PI ) ) { return NaN ; }
Distance : 11

104
Tree	if ( NaN ) { return isZero ; }
Code	if ( NaN ) { return isZero ; }
Distance : 7

105
Tree	if ( divisor ) { return NaN ; }
Code	if ( divisor ) { return NaN ; }
Distance : 6

106
Tree	if ( isIncludedColumn () . length ( Math.PI ) ) { return NaN ; }
Code	if ( isIncludedColumn () . length ( Math.PI ) ) { return NaN ; }
Distance : 11

107
Tree	if ( isZero () . copy ( Math.PI ) ) { return NaN ; }
Code	if ( isZero () . copy ( Math.PI ) ) { return NaN ; }
Distance : 11

108
Tree	if ( true ) {}
Code	if ( true ) {}
Distance : 12

109
Tree	if ( isZero . isSame ( true ) ) { return NaN ; }
Code	if ( isZero . isSame ( true ) ) { return NaN ; }
Distance : 10

110
Tree	if ( isZero () . addMessage ( Math.PI ) ) { return NaN ; }
Code	if ( isZero () . addMessage ( Math.PI ) ) { return NaN ; }
Distance : 11

111
Tree	if ( fst ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( fst ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

112
Tree	if ( isZero () . length ( Math.PI ) ) { return NaN ; }
Code	if ( isZero () . length ( Math.PI ) ) { return NaN ; }
Distance : 11

113
Tree	if ( copySign ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( copySign ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

114
Tree	if ( isZero ( fst () ) ) { return NaN ; }
Code	if ( isZero ( fst () ) ) { return NaN ; }
Distance : 9

115
Tree	if ( isIncludedColumn ( isZero ) ) { return NaN ; }
Code	if ( isIncludedColumn ( isZero ) ) { return NaN ; }
Distance : 8

116
Tree	if ( new variablesToInclude.length () . addMessage ( isZero ) ) { return NaN ; }
Code	if ( new variablesToInclude.length () . addMessage ( isZero ) ) { return NaN ; }
Distance : 11

117
Tree	if ( isDefaultValue ( computeWeightedJacobian () ) ) { return NaN ; }
Code	if ( isDefaultValue ( computeWeightedJacobian () ) ) { return NaN ; }
Distance : 9

118
Tree	if ( ! isSequence ( isZero ) ) { return NaN ; }
Code	if ( ! isSequence ( isZero ) ) { return NaN ; }
Distance : 9

119
Tree	if ( isDefaultValue ( isZero ) ) { return NaN ; }
Code	if ( isDefaultValue ( isZero ) ) { return NaN ; }
Distance : 8

120
Tree	if ( isIncludedColumn ( computeWeightedJacobian () ) ) { return NaN ; }
Code	if ( isIncludedColumn ( computeWeightedJacobian () ) ) { return NaN ; }
Distance : 9

121
Tree	if ( this . isSame ( isZero ) ) { return NaN ; }
Code	if ( this . isSame ( isZero ) ) { return NaN ; }
Distance : 10

122
Tree	if ( divisor ) { return isZero ; }
Code	if ( divisor ) { return isZero ; }
Distance : 6

123
Tree	if ( isZero . nextBoolean ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isZero . nextBoolean ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

124
Tree	if ( isZero . hasNext ( true ) ) { return NaN ; }
Code	if ( isZero . hasNext ( true ) ) { return NaN ; }
Distance : 10

125
Tree	if ( isZero ) { return NaN ; } v.length
Code	if ( isZero ) { return NaN ; } v.length
Distance : 8

126
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

127
Tree	if ( isZero ( isZero ) ) { return NaN ; }
Code	if ( isZero ( isZero ) ) { return NaN ; }
Distance : 8

128
Tree	if ( isDefaultValue ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isDefaultValue ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

129
Tree	if ( computeWeightedJacobian ( getSlope () ) ) { return NaN ; }
Code	if ( computeWeightedJacobian ( getSlope () ) ) { return NaN ; }
Distance : 9

130
Tree	if ( isZero . getVertices ( Math.PI ) ) { return NaN ; }
Code	if ( isZero . getVertices ( Math.PI ) ) { return NaN ; }
Distance : 10

131
Tree	if ( ^= ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( ^= ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

132
Tree	if ( isIncludedColumn ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isIncludedColumn ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

133
Tree	if ( this . isAssignableFrom () ) { return NaN ; }
Code	if ( this . isAssignableFrom () ) { return NaN ; }
Distance : 8

134
Tree	if ( isZero . getVertices () ) { return NaN ; }
Code	if ( isZero . getVertices () ) { return NaN ; }
Distance : 8

135
Tree	if ( buildChebyquadArray () ) { return NaN ; }
Code	if ( buildChebyquadArray () ) { return NaN ; }
Distance : 7

136
Tree	if ( new variablesToInclude.length () . getColumnDimension ( isZero ) ) { return NaN ; }
Code	if ( new variablesToInclude.length () . getColumnDimension ( isZero ) ) { return NaN ; }
Distance : 11

137
Tree	if ( this . hasNext () ) { return NaN ; }
Code	if ( this . hasNext () ) { return NaN ; }
Distance : 8

138
Tree	if ( isZero . compareTo ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isZero . compareTo ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 12

139
Tree	if ( NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 5

140
Tree	if ( isZero . isAssignableFrom ( true ) ) { return NaN ; }
Code	if ( isZero . isAssignableFrom ( true ) ) { return NaN ; }
Distance : 10

141
Tree	if ( isZero ( isDefaultValue () ) ) { return NaN ; }
Code	if ( isZero ( isDefaultValue () ) ) { return NaN ; }
Distance : 9

142
Tree	if ( isZero . isSame ( Math.PI ) ) { return NaN ; }
Code	if ( isZero . isSame ( Math.PI ) ) { return NaN ; }
Distance : 10

143
Tree	if ( ! ) !=
Code	if ( ! ) !=
Distance : 12

144
Tree	if ( target.length ( isZero , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( target.length ( isZero , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

145
Tree	if ( STRING_CONSTANT . isSequence ( isZero ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . isSequence ( isZero ) ) { return NaN ; }
Distance : 10

146
Tree	if ( this . isZero . hasNext () ) { return NaN ; }
Code	if ( this . isZero . hasNext () ) { return NaN ; }
Distance : 10

147
Tree	if ( fst ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( fst ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

148
Tree	if ( isDefaultValue ( this , isZero ) ) { return NaN ; }
Code	if ( isDefaultValue ( this , isZero ) ) { return NaN ; }
Distance : 10

149
Tree	if ( isZero . isSame () ) { return NaN ; }
Code	if ( isZero . isSame () ) { return NaN ; }
Distance : 8

150
Tree	if ( copySign ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( copySign ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

151
Tree	if ( isZero . getCovariances ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isZero . getCovariances ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

152
Tree	if ( ! ) {}
Code	if ( ! ) {}
Distance : 12

153
Tree	if ( new StepNormalizerMode.MULTIPLES () . copy ( isZero ) ) { return NaN ; }
Code	if ( new StepNormalizerMode.MULTIPLES () . copy ( isZero ) ) { return NaN ; }
Distance : 11

154
Tree	if ( target.length ( this , isZero ) ) { return NaN ; }
Code	if ( target.length ( this , isZero ) ) { return NaN ; }
Distance : 10

155
Tree	if ( this . isZero . hashCode () ) { return NaN ; }
Code	if ( this . isZero . hashCode () ) { return NaN ; }
Distance : 10

156
Tree	if ( isZero ( isZero , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isZero ( isZero , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

157
Tree	if ( isZero . hasNext ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isZero . hasNext ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 12

158
Tree	if ( isZero . isSame ( ! ) ) { return NaN ; }
Code	if ( isZero . isSame ( ! ) ) { return NaN ; }
Distance : 10

159
Tree	if ( new StreamDataAdapter () . addMessage ( isZero ) ) { return NaN ; }
Code	if ( new StreamDataAdapter () . addMessage ( isZero ) ) { return NaN ; }
Distance : 11

160
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

161
Tree	if ( ! createAlien ( isZero ) ) { return NaN ; }
Code	if ( ! createAlien ( isZero ) ) { return NaN ; }
Distance : 9

162
Tree	if ( STRING_CONSTANT . isAssignableFrom ( isZero ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . isAssignableFrom ( isZero ) ) { return NaN ; }
Distance : 10

163
Tree	if ( this . isOptimal () ) { return NaN ; }
Code	if ( this . isOptimal () ) { return NaN ; }
Distance : 8

164
Tree	if ( NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 5

165
Tree	if ( buildChebyquadArray ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( buildChebyquadArray ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

166
Tree	if ( isZero ( this , isZero ) ) { return NaN ; }
Code	if ( isZero ( this , isZero ) ) { return NaN ; }
Distance : 10

167
Tree	if ( isZero . isAssignableFrom ( ! ) ) { return NaN ; }
Code	if ( isZero . isAssignableFrom ( ! ) ) { return NaN ; }
Distance : 10

168
Tree	if ( isZero () . getOne ( Math.PI ) ) { return NaN ; }
Code	if ( isZero () . getOne ( Math.PI ) ) { return NaN ; }
Distance : 11

169
Tree	if ( data.length . isSame ( isZero ) ) { return NaN ; }
Code	if ( data.length . isSame ( isZero ) ) { return NaN ; }
Distance : 10

170
Tree	if ( getPreviousTime () == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( getPreviousTime () == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

171
Tree	if ( computeWeightedJacobian () ) { return this . NaN . NaN ; }
Code	if ( computeWeightedJacobian () ) { return this . NaN . NaN ; }
Distance : 7

172
Tree	if ( new variablesToInclude.length ( NUMBER_CONSTANT ) . isSame ( isZero ) ) { return NaN ; }
Code	if ( new variablesToInclude.length ( NUMBER_CONSTANT ) . isSame ( isZero ) ) { return NaN ; }
Distance : 11

173
Tree	if ( isDefaultValue () ) { return this . NaN . NaN ; }
Code	if ( isDefaultValue () ) { return this . NaN . NaN ; }
Distance : 7

174
Tree	if ( isIncludedColumn () ) { return this . NaN . NaN ; }
Code	if ( isIncludedColumn () ) { return this . NaN . NaN ; }
Distance : 7

175
Tree	if ( NaN ) { return NaN ; }
Code	if ( NaN ) { return NaN ; }
Distance : 7

176
Tree	if ( ! ) &&
Code	if ( ! ) &&
Distance : 12

177
Tree	if ( getPreviousTime ( isZero , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( getPreviousTime ( isZero , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

178
Tree	if ( isZero . getVertices ( DfpField.FLAG_INVALID ) ) { return NaN ; }
Code	if ( isZero . getVertices ( DfpField.FLAG_INVALID ) ) { return NaN ; }
Distance : 10

179
Tree	if ( isZero . isAssignableFrom ( Coordinates1D.ZERO ) ) { return NaN ; }
Code	if ( isZero . isAssignableFrom ( Coordinates1D.ZERO ) ) { return NaN ; }
Distance : 10

180
Tree	if ( isZero . isIncludedColumn ( isZero ) ) { return NaN ; }
Code	if ( isZero . isIncludedColumn ( isZero ) ) { return NaN ; }
Distance : 10

181
Tree	if ( isZero . isSame ( getCoefficients () , v2.y ( NaN ) ) ) { return NaN ; }
Code	if ( isZero . isSame ( getCoefficients () , v2.y ( NaN ) ) ) { return NaN ; }
Distance : 15

182
Tree	if ( isZero . isAssignableFrom ( Math.PI ) ) { return NaN ; }
Code	if ( isZero . isAssignableFrom ( Math.PI ) ) { return NaN ; }
Distance : 10

183
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ; }
Distance : 5

184
Tree	if ( getPreviousTime ( this , isZero ) ) { return NaN ; }
Code	if ( getPreviousTime ( this , isZero ) ) { return NaN ; }
Distance : 10

185
Tree	if ( STRING_CONSTANT . iterations ( isZero ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . iterations ( isZero ) ) { return NaN ; }
Distance : 10

186
Tree	if ( getPreviousTime () ) { return this . NaN . NaN ; }
Code	if ( getPreviousTime () ) { return this . NaN . NaN ; }
Distance : 7

187
Tree	if ( isZero ( fft () ) ) { return NaN ; }
Code	if ( isZero ( fft () ) ) { return NaN ; }
Distance : 9

188
Tree	if ( this . getVertices () ) { return NaN ; }
Code	if ( this . getVertices () ) { return NaN ; }
Distance : 8

189
Tree	if ( isZero . isOptimal ( isZero ) ) { return NaN ; }
Code	if ( isZero . isOptimal ( isZero ) ) { return NaN ; }
Distance : 10

190
Tree	if ( ! isZero ( isZero ) ) { return NaN ; }
Code	if ( ! isZero ( isZero ) ) { return NaN ; }
Distance : 9

191
Tree	if ( STRING_CONSTANT . costEvaluations ( isZero ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . costEvaluations ( isZero ) ) { return NaN ; }
Distance : 10

192
Tree	if ( STRING_CONSTANT . getVertices ( isZero ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . getVertices ( isZero ) ) { return NaN ; }
Distance : 10

193
Tree	if ( isZero . getCovariances ( isZero ) ) { return NaN ; }
Code	if ( isZero . getCovariances ( isZero ) ) { return NaN ; }
Distance : 10

194
Tree	if ( new StreamDataAdapter () . getZero ( isZero ) ) { return NaN ; }
Code	if ( new StreamDataAdapter () . getZero ( isZero ) ) { return NaN ; }
Distance : 11

195
Tree	if ( ! getFirstLeaf ( isZero ) ) { return NaN ; }
Code	if ( ! getFirstLeaf ( isZero ) ) { return NaN ; }
Distance : 9

196
Tree	if ( isZero . nextBoolean ( isZero ) ) { return NaN ; }
Code	if ( isZero . nextBoolean ( isZero ) ) { return NaN ; }
Distance : 10

197
Tree	if ( isZero . nextBoolean ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isZero . nextBoolean ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 12

198
Tree	if ( isZero . logDensity ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isZero . logDensity ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

199
Tree	if ( STRING_CONSTANT . logDensity ( isZero ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . logDensity ( isZero ) ) { return NaN ; }
Distance : 10

200
Tree	if ( isZero . compareTo ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isZero . compareTo ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

201
Tree	if ( isZero . getVertices ( getCoefficients () , v2.y ( NaN ) ) ) { return NaN ; }
Code	if ( isZero . getVertices ( getCoefficients () , v2.y ( NaN ) ) ) { return NaN ; }
Distance : 15

202
Tree	if ( isZero . isSame ( getCoefficients () , emptyList ( NaN ) ) ) { return NaN ; }
Code	if ( isZero . isSame ( getCoefficients () , emptyList ( NaN ) ) ) { return NaN ; }
Distance : 15

203
Tree	if ( ! costEvaluations ( isZero ) ) { return NaN ; }
Code	if ( ! costEvaluations ( isZero ) ) { return NaN ; }
Distance : 9

204
Tree	if ( new variablesToInclude.length () . getZero ( isZero ) ) { return NaN ; }
Code	if ( new variablesToInclude.length () . getZero ( isZero ) ) { return NaN ; }
Distance : 11

205
Tree	if ( isZero . isOptimal ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isZero . isOptimal ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

206
Tree	if ( isZero . logDensity ( true ) ) { return NaN ; }
Code	if ( isZero . logDensity ( true ) ) { return NaN ; }
Distance : 10

207
Tree	if ( isZero . getVertices ( getCoefficients () , emptyList ( NaN ) ) ) { return NaN ; }
Code	if ( isZero . getVertices ( getCoefficients () , emptyList ( NaN ) ) ) { return NaN ; }
Distance : 15

208
Tree	if ( new StepNormalizerMode.MULTIPLES () . addMessage ( isZero ) ) { return NaN ; }
Code	if ( new StepNormalizerMode.MULTIPLES () . addMessage ( isZero ) ) { return NaN ; }
Distance : 11

209
Tree	if ( getPreviousTime ( Math.PI ) ) { return NaN ; }
Code	if ( getPreviousTime ( Math.PI ) ) { return NaN ; }
Distance : 8

210
Tree	if ( isZero . hasNext ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isZero . hasNext ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

211
Tree	if ( isZero . getVertices ( byte ) ) { return NaN ; }
Code	if ( isZero . getVertices ( byte ) ) { return NaN ; }
Distance : 10

212
Tree	if ( STRING_CONSTANT . isSame ( isZero ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . isSame ( isZero ) ) { return NaN ; }
Distance : 10

213
Tree	if ( target.length () ) { return this . NaN . NaN ; }
Code	if ( target.length () ) { return this . NaN . NaN ; }
Distance : 7

214
Tree	if ( isZero . isSame ( getCoefficients () , copySign ( NaN ) ) ) { return NaN ; }
Code	if ( isZero . isSame ( getCoefficients () , copySign ( NaN ) ) ) { return NaN ; }
Distance : 15

215
Tree	if ( isZero . isAssignableFrom () ) { return NaN ; }
Code	if ( isZero . isAssignableFrom () ) { return NaN ; }
Distance : 8

216
Tree	if ( new StreamDataAdapter () . getColumnDimension ( isZero ) ) { return NaN ; }
Code	if ( new StreamDataAdapter () . getColumnDimension ( isZero ) ) { return NaN ; }
Distance : 11

217
Tree	if ( isZero () . intValue ( Math.PI ) ) { return NaN ; }
Code	if ( isZero () . intValue ( Math.PI ) ) { return NaN ; }
Distance : 11

218
Tree	if ( isZero . logDensity ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isZero . logDensity ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 12

219
Tree	if ( isZero () == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( isZero () == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

220
Tree	if ( isZero ( Math.PI ) ) { return NaN ; }
Code	if ( isZero ( Math.PI ) ) { return NaN ; }
Distance : 8

221
Tree	if ( divisor ) { return NaN ; }
Code	if ( divisor ) { return NaN ; }
Distance : 6

222
Tree	if ( isZero . isAssignableFrom ( getCoefficients () , v2.y ( NaN ) ) ) { return NaN ; }
Code	if ( isZero . isAssignableFrom ( getCoefficients () , v2.y ( NaN ) ) ) { return NaN ; }
Distance : 15

223
Tree	if ( isZero . isAssignableFrom ( getCoefficients () , emptyList ( NaN ) ) ) { return NaN ; }
Code	if ( isZero . isAssignableFrom ( getCoefficients () , emptyList ( NaN ) ) ) { return NaN ; }
Distance : 15

224
Tree	if ( ^= ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( ^= ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

225
Tree	if ( ! ) ^
Code	if ( ! ) ^
Distance : 12

226
Tree	if ( isZero . compareTo ( true ) ) { return NaN ; }
Code	if ( isZero . compareTo ( true ) ) { return NaN ; }
Distance : 10

227
Tree	if ( fst () ) { return this . NaN . NaN ; }
Code	if ( fst () ) { return this . NaN . NaN ; }
Distance : 7

228
Tree	if ( copySign () ) { return this . NaN . NaN ; }
Code	if ( copySign () ) { return this . NaN . NaN ; }
Distance : 7

229
Tree	if ( ! deltaNorm ( isZero ) ) { return NaN ; }
Code	if ( ! deltaNorm ( isZero ) ) { return NaN ; }
Distance : 9

230
Tree	if ( isZero . getCovariances ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isZero . getCovariances ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 12

231
Tree	if ( this . compareTo () ) { return NaN ; }
Code	if ( this . compareTo () ) { return NaN ; }
Distance : 8

232
Tree	if ( new StepNormalizerMode.MULTIPLES ( NUMBER_CONSTANT ) . hashCode ( isZero ) ) { return NaN ; }
Code	if ( new StepNormalizerMode.MULTIPLES ( NUMBER_CONSTANT ) . hashCode ( isZero ) ) { return NaN ; }
Distance : 11

233
Tree	if ( isZero . getVertices ( isZero , false ) ) { return NaN ; }
Code	if ( isZero . getVertices ( isZero , false ) ) { return NaN ; }
Distance : 12

234
Tree	if ( isZero . isSame ( isZero , false ) ) { return NaN ; }
Code	if ( isZero . isSame ( isZero , false ) ) { return NaN ; }
Distance : 12

235
Tree	if ( isZero . getVertices ( isZero , NUMBER_CONSTANT , NaN ) ) { return NaN ; }
Code	if ( isZero . getVertices ( isZero , NUMBER_CONSTANT , NaN ) ) { return NaN ; }
Distance : 13

236
Tree	if ( buildChebyquadArray ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( buildChebyquadArray ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

237
Tree	if ( isZero . isSame ( isZero , NUMBER_CONSTANT , NaN ) ) { return NaN ; }
Code	if ( isZero . isSame ( isZero , NUMBER_CONSTANT , NaN ) ) { return NaN ; }
Distance : 13

238
Tree	if ( isZero ) { return NaN ; }
Code	if ( isZero ) { return NaN ; }
Distance : 7

239
Tree	if ( isZero . isAssignableFrom ( isZero , false ) ) { return NaN ; }
Code	if ( isZero . isAssignableFrom ( isZero , false ) ) { return NaN ; }
Distance : 12

240
Tree	if ( isZero . getVertices ( getCoefficients () , copySign ( NaN ) ) ) { return NaN ; }
Code	if ( isZero . getVertices ( getCoefficients () , copySign ( NaN ) ) ) { return NaN ; }
Distance : 15

241
Tree	if ( isZero . isAssignableFrom ( isZero , NUMBER_CONSTANT , NaN ) ) { return NaN ; }
Code	if ( isZero . isAssignableFrom ( isZero , NUMBER_CONSTANT , NaN ) ) { return NaN ; }
Distance : 13

242
Tree	if ( divisor . isZero ( isZero ) ) { return NaN ; }
Code	if ( divisor . isZero ( isZero ) ) { return NaN ; }
Distance : 9

243
Tree	if ( ^= () ) { return this . NaN . NaN ; }
Code	if ( ^= () ) { return this . NaN . NaN ; }
Distance : 7

244
Tree	if ( isZero . getVertices ( getCoefficients () , getNumber ( NaN ) ) ) { return NaN ; }
Code	if ( isZero . getVertices ( getCoefficients () , getNumber ( NaN ) ) ) { return NaN ; }
Distance : 15

245
Tree	if ( isZero . isZero ( NaN ) ) { return NaN ; }
Code	if ( isZero . isZero ( NaN ) ) { return NaN ; }
Distance : 10

246
Tree	if ( isZero . isSame ( getCoefficients () , getNumber ( NaN ) ) ) { return NaN ; }
Code	if ( isZero . isSame ( getCoefficients () , getNumber ( NaN ) ) ) { return NaN ; }
Distance : 15

247
Tree	if ( this . isOptimal ( isZero ) ) { return NaN ; }
Code	if ( this . isOptimal ( isZero ) ) { return NaN ; }
Distance : 10

248
Tree	if ( isZero . isIncludedColumn ( isZero , NUMBER_CONSTANT , NaN ) ) { return NaN ; }
Code	if ( isZero . isIncludedColumn ( isZero , NUMBER_CONSTANT , NaN ) ) { return NaN ; }
Distance : 13

249
Tree	if ( isZero ) { return isZero ; }
Code	if ( isZero ) { return isZero ; }
Distance : 7

250
Tree	if ( buildChebyquadArray () ) { return this . NaN . NaN ; }
Code	if ( buildChebyquadArray () ) { return this . NaN . NaN ; }
Distance : 7

251
Tree	if ( this . costEvaluations () ) { return NaN ; }
Code	if ( this . costEvaluations () ) { return NaN ; }
Distance : 8

252
Tree	if ( isZero . divisor ( isZero ) ) { return NaN ; }
Code	if ( isZero . divisor ( isZero ) ) { return NaN ; }
Distance : 9

253
Tree	if ( isZero . isOptimal ( isZero , NUMBER_CONSTANT , NaN ) ) { return NaN ; }
Code	if ( isZero . isOptimal ( isZero , NUMBER_CONSTANT , NaN ) ) { return NaN ; }
Distance : 13

254
Tree	if ( NaN . isZero ( isZero ) ) { return NaN ; }
Code	if ( NaN . isZero ( isZero ) ) { return NaN ; }
Distance : 10

255
Tree	if ( isZero . NaN ( isZero ) ) { return NaN ; }
Code	if ( isZero . NaN ( isZero ) ) { return NaN ; }
Distance : 10

256
Tree	if ( target.length () == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( target.length () == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

257
Tree	if ( target.length ( Math.PI ) ) { return NaN ; }
Code	if ( target.length ( Math.PI ) ) { return NaN ; }
Distance : 8

258
Tree	if ( isZero . nextBoolean ( isZero , NUMBER_CONSTANT , NaN ) ) { return NaN ; }
Code	if ( isZero . nextBoolean ( isZero , NUMBER_CONSTANT , NaN ) ) { return NaN ; }
Distance : 13

259
Tree	if ( this . isZero . isSame ( isZero ) ) { return NaN ; }
Code	if ( this . isZero . isSame ( isZero ) ) { return NaN ; }
Distance : 11

260
Tree	if ( isZero ( divisor.mant ) ) { return NaN ; }
Code	if ( isZero ( divisor.mant ) ) { return NaN ; }
Distance : 8

261
Tree	if ( isZero () . length ( Coordinates1D.ZERO ) ) { return NaN ; }
Code	if ( isZero () . length ( Coordinates1D.ZERO ) ) { return NaN ; }
Distance : 11

262
Tree	if ( fst ( isZero ) ) { return NaN ; }
Code	if ( fst ( isZero ) ) { return NaN ; }
Distance : 8

263
Tree	if ( copySign ( isZero ) ) { return NaN ; }
Code	if ( copySign ( isZero ) ) { return NaN ; }
Distance : 8

264
Tree	if ( isZero ( computeWeightedJacobian () ) ) { return NaN ; }
Code	if ( isZero ( computeWeightedJacobian () ) ) { return NaN ; }
Distance : 9

265
Tree	if ( this . isZero . isSame () ) { return NaN ; }
Code	if ( this . isZero . isSame () ) { return NaN ; }
Distance : 10

266
Tree	if ( getPreviousTime ( isZero ) ) { return NaN ; }
Code	if ( getPreviousTime ( isZero ) ) { return NaN ; }
Distance : 8

267
Tree	if ( isZero ) { return NaN ; }
Code	if ( isZero ) { return NaN ; }
Distance : 7

268
Tree	if ( isZero . getVertices ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isZero . getVertices ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

269
Tree	if ( computeWeightedJacobian () . getOne ( Math.PI ) ) { return NaN ; }
Code	if ( computeWeightedJacobian () . getOne ( Math.PI ) ) { return NaN ; }
Distance : 11

270
Tree	if ( NaN == NUMBER_CONSTANT ) { return isZero ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return isZero ; }
Distance : 5

271
Tree	if ( isZero . getCovariances ( isZero , NUMBER_CONSTANT , NaN ) ) { return NaN ; }
Code	if ( isZero . getCovariances ( isZero , NUMBER_CONSTANT , NaN ) ) { return NaN ; }
Distance : 13

272
Tree	if ( ^= () == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( ^= () == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

273
Tree	if ( getPreviousTime ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( getPreviousTime ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

274
Tree	if ( buildChebyquadArray () == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( buildChebyquadArray () == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

275
Tree	if ( isZero . logDensity () ) { return NaN ; }
Code	if ( isZero . logDensity () ) { return NaN ; }
Distance : 8

276
Tree	if ( isZero . compareTo () ) { return NaN ; }
Code	if ( isZero . compareTo () ) { return NaN ; }
Distance : 8

277
Tree	if ( NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 5

278
Tree	if ( target.length ( isZero ) ) { return NaN ; }
Code	if ( target.length ( isZero ) ) { return NaN ; }
Distance : 8

279
Tree	if ( isZero . isIncludedColumn () ) { return NaN ; }
Code	if ( isZero . isIncludedColumn () ) { return NaN ; }
Distance : 8

280
Tree	if ( isZero . hasNext () ) { return NaN ; }
Code	if ( isZero . hasNext () ) { return NaN ; }
Distance : 8

281
Tree	if ( isZero . compareTo ( isZero , NUMBER_CONSTANT , NaN ) ) { return NaN ; }
Code	if ( isZero . compareTo ( isZero , NUMBER_CONSTANT , NaN ) ) { return NaN ; }
Distance : 13

282
Tree	if ( isZero . isSame ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isZero . isSame ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

283
Tree	if ( ! ) :
Code	if ( ! ) :
Distance : 11

284
Tree	if ( true ) !=
Code	if ( true ) !=
Distance : 12

285
Tree	if ( isZero () ) { return this . NaN . NaN ; }
Code	if ( isZero () ) { return this . NaN . NaN ; }
Distance : 7

286
Tree	if ( isZero . logDensity ( isZero , NUMBER_CONSTANT , NaN ) ) { return NaN ; }
Code	if ( isZero . logDensity ( isZero , NUMBER_CONSTANT , NaN ) ) { return NaN ; }
Distance : 13

287
Tree	if ( this . isSequence () ) { return NaN ; }
Code	if ( this . isSequence () ) { return NaN ; }
Distance : 8

288
Tree	if ( isZero . hasNext ( isZero , NUMBER_CONSTANT , NaN ) ) { return NaN ; }
Code	if ( isZero . hasNext ( isZero , NUMBER_CONSTANT , NaN ) ) { return NaN ; }
Distance : 13

289
Tree	if ( StepNormalizerMode.MULTIPLES . isSame ( isZero ) ) { return NaN ; }
Code	if ( StepNormalizerMode.MULTIPLES . isSame ( isZero ) ) { return NaN ; }
Distance : 10

290
Tree	if ( fst ( isZero , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( fst ( isZero , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

291
Tree	if ( copySign ( isZero , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( copySign ( isZero , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

292
Tree	if ( STRING_CONSTANT . isZero ( isZero ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . isZero ( isZero ) ) { return NaN ; }
Distance : 10

293
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ; }
Distance : 4

294
Tree	if ( fst ( this , isZero ) ) { return NaN ; }
Code	if ( fst ( this , isZero ) ) { return NaN ; }
Distance : 10

295
Tree	if ( copySign ( this , isZero ) ) { return NaN ; }
Code	if ( copySign ( this , isZero ) ) { return NaN ; }
Distance : 10

296
Tree	if ( STRING_CONSTANT . getPreviousTime ( isZero ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . getPreviousTime ( isZero ) ) { return NaN ; }
Distance : 10

297
Tree	if ( moment.m3 . isSame ( isZero ) ) { return NaN ; }
Code	if ( moment.m3 . isSame ( isZero ) ) { return NaN ; }
Distance : 10

298
Tree	if ( this . isZero . getVertices () ) { return NaN ; }
Code	if ( this . isZero . getVertices () ) { return NaN ; }
Distance : 10

299
Tree	if ( divisor.mant . isSame ( isZero ) ) { return NaN ; }
Code	if ( divisor.mant . isSame ( isZero ) ) { return NaN ; }
Distance : 10

300
Tree	if ( new StreamDataAdapter ( NUMBER_CONSTANT ) . hashCode ( isZero ) ) { return NaN ; }
Code	if ( new StreamDataAdapter ( NUMBER_CONSTANT ) . hashCode ( isZero ) ) { return NaN ; }
Distance : 11

301
Tree	if ( this . isZero . valueOf () ) { return NaN ; }
Code	if ( this . isZero . valueOf () ) { return NaN ; }
Distance : 10

302
Tree	if ( ^= ( isZero ) ) { return NaN ; }
Code	if ( ^= ( isZero ) ) { return NaN ; }
Distance : 8

303
Tree	if ( computeWeightedJacobian ( interpolator.nordsieck ) ) { return NaN ; }
Code	if ( computeWeightedJacobian ( interpolator.nordsieck ) ) { return NaN ; }
Distance : 8

304
Tree	if ( ! copySign ( isZero ) ) { return NaN ; }
Code	if ( ! copySign ( isZero ) ) { return NaN ; }
Distance : 9

305
Tree	if ( isZero ( DfpField.FLAG_INVALID ) ) { return NaN ; }
Code	if ( isZero ( DfpField.FLAG_INVALID ) ) { return NaN ; }
Distance : 8

306
Tree	if ( isZero . isOptimal () ) { return NaN ; }
Code	if ( isZero . isOptimal () ) { return NaN ; }
Distance : 8

307
Tree	if ( fst () == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( fst () == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

308
Tree	if ( isZero . compareTo ( isZero ) ) { return NaN ; }
Code	if ( isZero . compareTo ( isZero ) ) { return NaN ; }
Distance : 10

309
Tree	if ( new variablesToInclude.length ( NUMBER_CONSTANT ) . hashCode ( isZero ) ) { return NaN ; }
Code	if ( new variablesToInclude.length ( NUMBER_CONSTANT ) . hashCode ( isZero ) ) { return NaN ; }
Distance : 11

310
Tree	if ( this . isZero . getVertices ( isZero ) ) { return NaN ; }
Code	if ( this . isZero . getVertices ( isZero ) ) { return NaN ; }
Distance : 11

311
Tree	if ( isZero . compareTo ( isZero , false ) ) { return NaN ; }
Code	if ( isZero . compareTo ( isZero , false ) ) { return NaN ; }
Distance : 12

312
Tree	if ( isZero . logDensity ( isZero ) ) { return NaN ; }
Code	if ( isZero . logDensity ( isZero ) ) { return NaN ; }
Distance : 10

313
Tree	if ( ! isDefaultValue ( isZero ) ) { return NaN ; }
Code	if ( ! isDefaultValue ( isZero ) ) { return NaN ; }
Distance : 9

314
Tree	if ( isZero . logDensity ( isZero , false ) ) { return NaN ; }
Code	if ( isZero . logDensity ( isZero , false ) ) { return NaN ; }
Distance : 12

315
Tree	if ( isZero . nextBoolean ( isZero , false ) ) { return NaN ; }
Code	if ( isZero . nextBoolean ( isZero , false ) ) { return NaN ; }
Distance : 12

316
Tree	if ( isZero . hasNext ( isZero , false ) ) { return NaN ; }
Code	if ( isZero . hasNext ( isZero , false ) ) { return NaN ; }
Distance : 12

317
Tree	if ( this . isZero . hasNext ( isZero ) ) { return NaN ; }
Code	if ( this . isZero . hasNext ( isZero ) ) { return NaN ; }
Distance : 11

318
Tree	if ( isZero . isAssignableFrom ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isZero . isAssignableFrom ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

319
Tree	if ( copySign () == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( copySign () == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

320
Tree	if ( this . isZero . valueOf ( isZero ) ) { return NaN ; }
Code	if ( this . isZero . valueOf ( isZero ) ) { return NaN ; }
Distance : 11

321
Tree	if ( this . isZero . isOptimal ( isZero ) ) { return NaN ; }
Code	if ( this . isZero . isOptimal ( isZero ) ) { return NaN ; }
Distance : 11

322
Tree	if ( this . iterations () ) { return NaN ; }
Code	if ( this . iterations () ) { return NaN ; }
Distance : 8

323
Tree	if ( isZero . getCovariances ( isZero , false ) ) { return NaN ; }
Code	if ( isZero . getCovariances ( isZero , false ) ) { return NaN ; }
Distance : 12

324
Tree	if ( this . isZero . hashCode ( isZero ) ) { return NaN ; }
Code	if ( this . isZero . hashCode ( isZero ) ) { return NaN ; }
Distance : 11

325
Tree	if ( this . isZero . logDensity ( isZero ) ) { return NaN ; }
Code	if ( this . isZero . logDensity ( isZero ) ) { return NaN ; }
Distance : 11

326
Tree	if ( new variablesToInclude.length ( isZero ) . hashCode ( isZero ) ) { return NaN ; }
Code	if ( new variablesToInclude.length ( isZero ) . hashCode ( isZero ) ) { return NaN ; }
Distance : 12

327
Tree	if ( isZero . isIncludedColumn ( isZero , false ) ) { return NaN ; }
Code	if ( isZero . isIncludedColumn ( isZero , false ) ) { return NaN ; }
Distance : 12

328
Tree	if ( objective.length . isSame ( isZero ) ) { return NaN ; }
Code	if ( objective.length . isSame ( isZero ) ) { return NaN ; }
Distance : 10

329
Tree	if ( Math.PI . isAssignableFrom ( isZero ) ) { return NaN ; }
Code	if ( Math.PI . isAssignableFrom ( isZero ) ) { return NaN ; }
Distance : 10

330
Tree	if ( isZero == NUMBER_CONSTANT ) { return isZero ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return isZero ; }
Distance : 5

331
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ; } v.length
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ; } v.length
Distance : 6

332
Tree	if ( isZero . isZero ( isZero ) ) { return NaN ; }
Code	if ( isZero . isZero ( isZero ) ) { return NaN ; }
Distance : 10

333
Tree	if ( isZero . hasNext ( isZero ) ) { return NaN ; }
Code	if ( isZero . hasNext ( isZero ) ) { return NaN ; }
Distance : 10

334
Tree	if ( this . isZero . isAssignableFrom ( isZero ) ) { return NaN ; }
Code	if ( this . isZero . isAssignableFrom ( isZero ) ) { return NaN ; }
Distance : 11

335
Tree	if ( new StreamDataAdapter ( isZero ) . withRankingThreshold ( isZero ) ) { return NaN ; }
Code	if ( new StreamDataAdapter ( isZero ) . withRankingThreshold ( isZero ) ) { return NaN ; }
Distance : 12

336
Tree	if ( new variablesToInclude.length ( isZero ) . withRankingThreshold ( isZero ) ) { return NaN ; }
Code	if ( new variablesToInclude.length ( isZero ) . withRankingThreshold ( isZero ) ) { return NaN ; }
Distance : 12

337
Tree	if ( this . isZero . getLocation ( isZero ) ) { return NaN ; }
Code	if ( this . isZero . getLocation ( isZero ) ) { return NaN ; }
Distance : 11

338
Tree	if ( new StepNormalizerMode.MULTIPLES ( isZero ) . getAttribute ( isZero ) ) { return NaN ; }
Code	if ( new StepNormalizerMode.MULTIPLES ( isZero ) . getAttribute ( isZero ) ) { return NaN ; }
Distance : 12

339
Tree	if ( hiPrec . isSame ( isZero ) ) { return NaN ; }
Code	if ( hiPrec . isSame ( isZero ) ) { return NaN ; }
Distance : 10

340
Tree	if ( new StepNormalizerMode.MULTIPLES ( isZero ) . hashCode ( isZero ) ) { return NaN ; }
Code	if ( new StepNormalizerMode.MULTIPLES ( isZero ) . hashCode ( isZero ) ) { return NaN ; }
Distance : 12

341
Tree	if ( this . isZero . getDefaultNumberFormat ( isZero ) ) { return NaN ; }
Code	if ( this . isZero . getDefaultNumberFormat ( isZero ) ) { return NaN ; }
Distance : 11

342
Tree	if ( new StreamDataAdapter ( isZero ) . getAttribute ( isZero ) ) { return NaN ; }
Code	if ( new StreamDataAdapter ( isZero ) . getAttribute ( isZero ) ) { return NaN ; }
Distance : 12

343
Tree	if ( new variablesToInclude.length ( isZero ) . getAttribute ( isZero ) ) { return NaN ; }
Code	if ( new variablesToInclude.length ( isZero ) . getAttribute ( isZero ) ) { return NaN ; }
Distance : 12

344
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ; }
Distance : 5

345
Tree	if ( new StreamDataAdapter ( isZero ) . copySign ( isZero ) ) { return NaN ; }
Code	if ( new StreamDataAdapter ( isZero ) . copySign ( isZero ) ) { return NaN ; }
Distance : 12

346
Tree	if ( isZero . isOptimal ( isZero , false ) ) { return NaN ; }
Code	if ( isZero . isOptimal ( isZero , false ) ) { return NaN ; }
Distance : 12

347
Tree	if ( new NestedLoops ( isZero ) . getAttribute ( isZero ) ) { return NaN ; }
Code	if ( new NestedLoops ( isZero ) . getAttribute ( isZero ) ) { return NaN ; }
Distance : 12

348
Tree	if ( new StreamDataAdapter ( isZero ) . hashCode ( isZero ) ) { return NaN ; }
Code	if ( new StreamDataAdapter ( isZero ) . hashCode ( isZero ) ) { return NaN ; }
Distance : 12

349
Tree	if ( isZero . isZero ( divisor ) ) { return NaN ; }
Code	if ( isZero . isZero ( divisor ) ) { return NaN ; }
Distance : 10

========================================================================


========================================================================
Example Number: 18
Parent Code is: 
if ( divisor == NUMBER_CONSTANT ) { return isZero ? NaN : INF ; }
-------------------------------------------------------------------------------
Child code is: 
if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=divisor}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (16 (800{val=isZero}) (233{val=?}) (800{val=NaN}) (226{val=:}) (800{val=INF})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=divisor}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=NaN}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/46/parent/src_main_java_org_apache_commons_math_complex_Complex.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 140
Wrong
========================================================================
False

0
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( getCoefficients () , beta.length , NaN ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( getCoefficients () , beta.length , NaN ) ; }
Distance : 11

1
Tree	if ( isZero == NUMBER_CONSTANT ) { return Double.POSITIVE_INFINITY ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return Double.POSITIVE_INFINITY ; }
Distance : 2

2
Tree	if ( isZero == NUMBER_CONSTANT ) { return Double.NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return Double.NaN ; }
Distance : 2

3
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 5

4
Tree	if ( isZero == NUMBER_CONSTANT ) { return distance ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return distance ; }
Distance : 2

5
Tree	if ( isZero == NUMBER_CONSTANT ) { return LazyHolder.INSTANCE ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return LazyHolder.INSTANCE ; }
Distance : 2

6
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? Precision.EPSILON : Math.PI ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? Precision.EPSILON : Math.PI ; }
Distance : 5

7
Tree	if ( isZero == NUMBER_CONSTANT ) { return Locale.FRENCH ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return Locale.FRENCH ; }
Distance : 2

8
Tree	if ( isZero == NUMBER_CONSTANT ) { return PivotSelectionRule.BLAND ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return PivotSelectionRule.BLAND ; }
Distance : 2

9
Tree	if ( isZero == NUMBER_CONSTANT ) { return Double.NEGATIVE_INFINITY ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return Double.NEGATIVE_INFINITY ; }
Distance : 2

10
Tree	if ( isZero == NUMBER_CONSTANT ) { return null ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return null ; }
Distance : 2

11
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( this . isSame () , Precision.EPSILON , isZero ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( this . isSame () , Precision.EPSILON , isZero ) ; }
Distance : 13

12
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( this . valueOf () , Precision.EPSILON , NaN ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( this . valueOf () , Precision.EPSILON , NaN ) ; }
Distance : 13

13
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( getCoefficients () , LocalizedFormats.UNPARSEABLE_3D_VECTOR , NaN ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( getCoefficients () , LocalizedFormats.UNPARSEABLE_3D_VECTOR , NaN ) ; }
Distance : 11

14
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN . hashCode () : INF ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN . hashCode () : INF ; }
Distance : 8

15
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( getCoefficients () , RotationConvention.FRAME_TRANSFORM , NaN ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( getCoefficients () , RotationConvention.FRAME_TRANSFORM , NaN ) ; }
Distance : 11

16
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( this . hashCode () , Precision.EPSILON , NaN ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( this . hashCode () , Precision.EPSILON , NaN ) ; }
Distance : 13

17
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 5

18
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . copySign ( this . isSame () , Precision.EPSILON , NaN ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . copySign ( this . isSame () , Precision.EPSILON , NaN ) ; }
Distance : 13

19
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( this . real2Complex () , originalLine.tolerance , NaN ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( this . real2Complex () , originalLine.tolerance , NaN ) ; }
Distance : 13

20
Tree	if ( NaN == NUMBER_CONSTANT ) { return isZero ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return isZero ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 6

21
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( this . isSame () , Precision.EPSILON , NaN ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( this . isSame () , Precision.EPSILON , NaN ) ; }
Distance : 13

22
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . copySign ( getCoefficients () , beta.length , NaN ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . copySign ( getCoefficients () , beta.length , NaN ) ; }
Distance : 11

23
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( this . getCoefficients () , Precision.EPSILON , NaN ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( this . getCoefficients () , Precision.EPSILON , NaN ) ; }
Distance : 13

24
Tree	if ( NaN == NUMBER_CONSTANT ) { return NaN ? NaN : NaN ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return NaN ? NaN : NaN ; }
Distance : 5

25
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN : NaN ; }
Distance : 5

26
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN : INF ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN : INF ; }
Distance : 5

27
Tree	if ( isZero == NUMBER_CONSTANT ) { return isZero ? NaN : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return isZero ? NaN : NaN ; }
Distance : 5

28
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN : isZero ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN : isZero ; }
Distance : 5

29
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? isZero : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? isZero : NaN ; }
Distance : 5

30
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN : NaN ; }
Distance : 5

31
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN : NaN ; }
Distance : 4

32
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( this . isSame () , originalLine.tolerance , NaN ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( this . isSame () , originalLine.tolerance , NaN ) ; }
Distance : 13

33
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? this . generate () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? this . generate () : NaN ; }
Distance : 8

34
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? moment.m3 : Math.PI ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? moment.m3 : Math.PI ; }
Distance : 5

35
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( stat.aggregateStatistics , data.length ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( stat.aggregateStatistics , data.length ) ; }
Distance : 8

36
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? startPoint.length : Math.PI ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? startPoint.length : Math.PI ; }
Distance : 5

37
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( LocalizedFormats.URL_CONTAINS_NO_DATA , p2.vector ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( LocalizedFormats.URL_CONTAINS_NO_DATA , p2.vector ) ; }
Distance : 8

38
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? Precision.EPSILON : LocalizedFormats.URL_CONTAINS_NO_DATA ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? Precision.EPSILON : LocalizedFormats.URL_CONTAINS_NO_DATA ; }
Distance : 5

39
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? startPoint.length : startPoint.length ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? startPoint.length : startPoint.length ; }
Distance : 5

40
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( getCoefficients () , Precision.EPSILON , NaN ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( getCoefficients () , Precision.EPSILON , NaN ) ; }
Distance : 11

41
Tree	if ( divisor == NUMBER_CONSTANT ) { return null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return null ; }
Distance : 1

42
Tree	if ( NaN == NUMBER_CONSTANT ) { return null ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return null ; }
Distance : 2

43
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? emptyList () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? emptyList () : NaN ; }
Distance : 6

44
Tree	if ( isZero == NUMBER_CONSTANT ) { return isZero ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return isZero ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 6

45
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( LocalizedFormats.LCM_OVERFLOW_64_BITS , data.length ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( LocalizedFormats.LCM_OVERFLOW_64_BITS , data.length ) ; }
Distance : 8

46
Tree	if ( isZero == NUMBER_CONSTANT ) { return isZero ? NaN : INF ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return isZero ? NaN : INF ; }
Distance : 5

47
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? ExpansionMode.MULTIPLICATIVE : Math.PI ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? ExpansionMode.MULTIPLICATIVE : Math.PI ; }
Distance : 5

48
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode () ? Precision.EPSILON : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode () ? Precision.EPSILON : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Distance : 8

49
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode () ? Precision.EPSILON : LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode () ? Precision.EPSILON : LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ; }
Distance : 8

50
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( stat.aggregateStatistics , target.length ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( stat.aggregateStatistics , target.length ) ; }
Distance : 8

51
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . copySign ( getCoefficients () , Precision.EPSILON , NaN ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . copySign ( getCoefficients () , Precision.EPSILON , NaN ) ; }
Distance : 11

52
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? this . outerProduct () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? this . outerProduct () : NaN ; }
Distance : 8

53
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( NaN . isSame () , Precision.EPSILON , NaN ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( NaN . isSame () , Precision.EPSILON , NaN ) ; }
Distance : 13

54
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( this . real2Complex () , Precision.EPSILON , NaN ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( this . real2Complex () , Precision.EPSILON , NaN ) ; }
Distance : 13

55
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( NaN . real2Complex () , originalLine.tolerance , NaN ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( NaN . real2Complex () , originalLine.tolerance , NaN ) ; }
Distance : 13

56
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode () ? Precision.EPSILON : startPoint.length ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode () ? Precision.EPSILON : startPoint.length ; }
Distance : 8

57
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( NaN . valueOf () , Precision.EPSILON , NaN ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( NaN . valueOf () , Precision.EPSILON , NaN ) ; }
Distance : 13

58
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( NaN . isSame () , originalLine.tolerance , NaN ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( NaN . isSame () , originalLine.tolerance , NaN ) ; }
Distance : 13

59
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 4

60
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? this . copySign () : INF ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? this . copySign () : INF ; }
Distance : 8

61
Tree	if ( isZero == NUMBER_CONSTANT ) { return isZero ? copySign () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return isZero ? copySign () : NaN ; }
Distance : 6

62
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( NaN . getCoefficients () , Precision.EPSILON , NaN ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( NaN . getCoefficients () , Precision.EPSILON , NaN ) ; }
Distance : 13

63
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( NaN . valueOf () , originalLine.tolerance , NaN ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( NaN . valueOf () , originalLine.tolerance , NaN ) ; }
Distance : 13

64
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( NaN . getEvaluations () , Precision.EPSILON , NaN ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( NaN . getEvaluations () , Precision.EPSILON , NaN ) ; }
Distance : 13

65
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( getCoefficients () , v2.y , NaN ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( getCoefficients () , v2.y , NaN ) ; }
Distance : 11

66
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( Math.PI , p2.vector ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( Math.PI , p2.vector ) ; }
Distance : 8

67
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? this . toSpace () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? this . toSpace () : NaN ; }
Distance : 8

68
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? moment.m3 : startPoint.length ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? moment.m3 : startPoint.length ; }
Distance : 5

69
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( LocalizedFormats.LCM_OVERFLOW_64_BITS , target.length ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( LocalizedFormats.LCM_OVERFLOW_64_BITS , target.length ) ; }
Distance : 8

70
Tree	if ( NaN == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 5

71
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? ( () : INF ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? ( () : INF ; }
Distance : 6

72
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; } v.length
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; } v.length
Distance : 6

73
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN . IEEEremainder () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN . IEEEremainder () : NaN ; }
Distance : 8

74
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN . getLocation () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN . getLocation () : NaN ; }
Distance : 8

75
Tree	if ( isZero == NUMBER_CONSTANT ) { return isZero ? NaN . hashCode () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return isZero ? NaN . hashCode () : NaN ; }
Distance : 8

76
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( NaN . getVertices () , Precision.EPSILON , NaN ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( NaN . getVertices () , Precision.EPSILON , NaN ) ; }
Distance : 13

77
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN . getBinStats () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN . getBinStats () : NaN ; }
Distance : 8

78
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN . generate () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN . generate () : NaN ; }
Distance : 8

79
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( reducePoints () , beta.length , NaN ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( reducePoints () , beta.length , NaN ) ; }
Distance : 11

80
Tree	if ( isZero == NUMBER_CONSTANT ) { return break; ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return break; ; }
Distance : 2

81
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN . toSpace () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN . toSpace () : NaN ; }
Distance : 8

82
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( NaN . getCoefficients () , originalLine.tolerance , NaN ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( NaN . getCoefficients () , originalLine.tolerance , NaN ) ; }
Distance : 13

83
Tree	if ( divisor == NUMBER_CONSTANT ) { return continue; ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return continue; ; }
Distance : 1

84
Tree	if ( NaN == NUMBER_CONSTANT ) { return continue; ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return continue; ; }
Distance : 2

85
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? getDimension () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? getDimension () : NaN ; }
Distance : 6

86
Tree	if ( divisor == NUMBER_CONSTANT ) { return super(); ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return super(); ; }
Distance : 1

87
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( getCoefficients () , originalLine.tolerance , NaN ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( getCoefficients () , originalLine.tolerance , NaN ) ; }
Distance : 11

88
Tree	if ( isZero == NUMBER_CONSTANT ) { return return; ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return return; ; }
Distance : 2

89
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( getCoefficients () , LocalizedFormats.UNPARSEABLE_REAL_VECTOR , NaN ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( getCoefficients () , LocalizedFormats.UNPARSEABLE_REAL_VECTOR , NaN ) ; }
Distance : 11

90
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( NaN . real2Complex () , Precision.EPSILON , NaN ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( NaN . real2Complex () , Precision.EPSILON , NaN ) ; }
Distance : 13

91
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? isZero : INF ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? isZero : INF ; }
Distance : 5

92
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? this . IEEEremainder () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? this . IEEEremainder () : NaN ; }
Distance : 8

93
Tree	if ( isZero == NUMBER_CONSTANT ) { return y.length ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return y.length ; }
Distance : 2

94
Tree	if ( isZero == NUMBER_CONSTANT ) { return Order.MINUS_SUB_PLUS ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return Order.MINUS_SUB_PLUS ; }
Distance : 2

95
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? Precision.EPSILON : startPoint.length ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? Precision.EPSILON : startPoint.length ; }
Distance : 5

96
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( Math.PI , data.length ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( Math.PI , data.length ) ; }
Distance : 8

97
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( LocalizedFormats.URL_CONTAINS_NO_DATA , data.length ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( LocalizedFormats.URL_CONTAINS_NO_DATA , data.length ) ; }
Distance : 8

98
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? Precision.EPSILON : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? Precision.EPSILON : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Distance : 5

99
Tree	if ( isZero == NUMBER_CONSTANT ) { return Locale.US ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return Locale.US ; }
Distance : 2

100
Tree	if ( isZero == NUMBER_CONSTANT ) { return isZero ? this . hashCode () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return isZero ? this . hashCode () : NaN ; }
Distance : 8

101
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? this . hashCode () : isZero ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? this . hashCode () : isZero ; }
Distance : 8

102
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? Precision.EPSILON : LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? Precision.EPSILON : LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ; }
Distance : 5

103
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( Math.PI , target.length ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( Math.PI , target.length ) ; }
Distance : 8

104
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( LocalizedFormats.URL_CONTAINS_NO_DATA , target.length ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( LocalizedFormats.URL_CONTAINS_NO_DATA , target.length ) ; }
Distance : 8

105
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? hashCode () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? hashCode () : NaN ; }
Distance : 6

106
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? countSum2 () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? countSum2 () : NaN ; }
Distance : 6

107
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN . copySign () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN . copySign () : NaN ; }
Distance : 8

108
Tree	if ( isZero == NUMBER_CONSTANT ) { return super(); ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return super(); ; }
Distance : 2

109
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode () ? moment.m2 : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode () ? moment.m2 : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Distance : 8

110
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode () ? moment.m2 : LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode () ? moment.m2 : LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ; }
Distance : 8

111
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? StepNormalizerMode.MULTIPLES . hashCode () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? StepNormalizerMode.MULTIPLES . hashCode () : NaN ; }
Distance : 8

112
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode () ? moment.m2 : startPoint.length ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode () ? moment.m2 : startPoint.length ; }
Distance : 8

113
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode () ? LocalizedFormats.UNPARSEABLE_COMPLEX_NUMBER : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode () ? LocalizedFormats.UNPARSEABLE_COMPLEX_NUMBER : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Distance : 8

114
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? data.length . hashCode () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? data.length . hashCode () : NaN ; }
Distance : 8

115
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode () ? LocalizedFormats.UNPARSEABLE_3D_VECTOR : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode () ? LocalizedFormats.UNPARSEABLE_3D_VECTOR : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Distance : 8

116
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? this . copySign () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? this . copySign () : NaN ; }
Distance : 8

117
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? Math.PI . hashCode () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? Math.PI . hashCode () : NaN ; }
Distance : 8

118
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode () ? startPoint.length : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode () ? startPoint.length : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Distance : 8

119
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? divisor.mant . hashCode () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? divisor.mant . hashCode () : NaN ; }
Distance : 8

120
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode () ? LocalizedFormats.UNPARSEABLE_REAL_VECTOR : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode () ? LocalizedFormats.UNPARSEABLE_REAL_VECTOR : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Distance : 8

121
Tree	if ( isZero == NUMBER_CONSTANT ) { return isZero ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return isZero ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 6

122
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? values.length . hashCode () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? values.length . hashCode () : NaN ; }
Distance : 8

123
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? copySign () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? copySign () : NaN ; }
Distance : 6

124
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN . hashCode () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN . hashCode () : NaN ; }
Distance : 8

125
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? this . hashCode () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? this . hashCode () : NaN ; }
Distance : 8

126
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? Precision.EPSILON . hashCode () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? Precision.EPSILON . hashCode () : NaN ; }
Distance : 8

127
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? copySign () : INF ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? copySign () : INF ; }
Distance : 6

128
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 5

129
Tree	if ( NaN == NUMBER_CONSTANT ) { return isZero ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return isZero ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 6

130
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? moment.m3 . hashCode () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? moment.m3 . hashCode () : NaN ; }
Distance : 8

131
Tree	if ( isZero == NUMBER_CONSTANT ) { return continue; ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return continue; ; }
Distance : 2

132
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( this . isSame () , Precision.EPSILON , NaN ) ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN . hashCode ( this . isSame () , Precision.EPSILON , NaN ) ; }
Distance : 13

133
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? startPoint.length . hashCode () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? startPoint.length . hashCode () : NaN ; }
Distance : 8

134
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? ExpansionMode.MULTIPLICATIVE . hashCode () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? ExpansionMode.MULTIPLICATIVE . hashCode () : NaN ; }
Distance : 8

135
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? getX () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? getX () : NaN ; }
Distance : 6

136
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? this . hashCode () : INF ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? this . hashCode () : INF ; }
Distance : 8

137
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? Precision.EPSILON . hashCode () : INF ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? Precision.EPSILON . hashCode () : INF ; }
Distance : 8

138
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? ( () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? ( () : NaN ; }
Distance : 6

139
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN . getDefaultNumberFormat () : NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NaN . getDefaultNumberFormat () : NaN ; }
Distance : 8

========================================================================


========================================================================
Example Number: 19
Parent Code is: 
if ( divisor.isZero ) { return isZero ? NaN : INF ; }
-------------------------------------------------------------------------------
Child code is: 
if ( divisor.isZero ) { return NaN ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (40{val=divisor.isZero}) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (16 (800{val=isZero}) (233{val=?}) (800{val=NaN}) (226{val=:}) (800{val=INF})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (40{val=divisor.isZero}) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=NaN}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/46/parent/src_main_java_org_apache_commons_math_complex_Complex.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 470
Wrong
========================================================================
False

0
Tree	if ( this . isAssignableFrom () ) { return true ; }
Code	if ( this . isAssignableFrom () ) { return true ; }
Distance : 5

1
Tree	if ( this . isSequence () ) { return true ; }
Code	if ( this . isSequence () ) { return true ; }
Distance : 5

2
Tree	if ( this . hasNext () ) { return true ; }
Code	if ( this . hasNext () ) { return true ; }
Distance : 5

3
Tree	if ( this . isSame () ) { return true ; }
Code	if ( this . isSame () ) { return true ; }
Distance : 5

4
Tree	if ( this . isNonSingular () ) { return true ; }
Code	if ( this . isNonSingular () ) { return true ; }
Distance : 5

5
Tree	if ( this . logDensity () ) { return true ; }
Code	if ( this . logDensity () ) { return true ; }
Distance : 5

6
Tree	if ( this . isPowerOfTwo () ) { return true ; }
Code	if ( this . isPowerOfTwo () ) { return true ; }
Distance : 5

7
Tree	if ( this . isAssignableFrom () ) { return null ; }
Code	if ( this . isAssignableFrom () ) { return null ; }
Distance : 5

8
Tree	if ( this . isOptimal () ) { return true ; }
Code	if ( this . isOptimal () ) { return true ; }
Distance : 5

9
Tree	if ( this . compareTo () ) { return true ; }
Code	if ( this . compareTo () ) { return true ; }
Distance : 5

10
Tree	if ( divisor.isZero . isAssignableFrom ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor.isZero . isAssignableFrom ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

11
Tree	if ( divisor.isZero . isOptimal ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor.isZero . isOptimal ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

12
Tree	if ( STRING_CONSTANT . isZero ( isZero ) ) { return isZero ; }
Code	if ( STRING_CONSTANT . isZero ( isZero ) ) { return isZero ; }
Distance : 7

13
Tree	if ( divisor.isZero . isSequence ( isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isSequence ( isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 6

14
Tree	if ( divisor.isZero . isSequence ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isSequence ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

15
Tree	if ( divisor.isZero . logDensity ( isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . logDensity ( isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 6

16
Tree	if ( STRING_CONSTANT . isSequence ( divisor.isZero ) ) { return isZero ; }
Code	if ( STRING_CONSTANT . isSequence ( divisor.isZero ) ) { return isZero ; }
Distance : 6

17
Tree	if ( divisor.isZero . logDensity ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . logDensity ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

18
Tree	if ( divisor.isZero . isAssignableFrom ( divisor.isZero ) ) { return true ; }
Code	if ( divisor.isZero . isAssignableFrom ( divisor.isZero ) ) { return true ; }
Distance : 6

19
Tree	if ( divisor.isZero . getTime ( isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . getTime ( isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 6

20
Tree	if ( isZero . hasNext ( STRING_CONSTANT ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isZero . hasNext ( STRING_CONSTANT ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 10

21
Tree	if ( isZero . isAssignableFrom ( byte ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isZero . isAssignableFrom ( byte ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 10

22
Tree	if ( isZero . isSame ( STRING_CONSTANT ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isZero . isSame ( STRING_CONSTANT ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 10

23
Tree	if ( this . isNonSingular () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . isNonSingular () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

24
Tree	if ( STRING_CONSTANT . isSequence ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( STRING_CONSTANT . isSequence ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 10

25
Tree	if ( this . isPowerOfTwo () ) { return NUMBER_CONSTANT ; }
Code	if ( this . isPowerOfTwo () ) { return NUMBER_CONSTANT ; }
Distance : 5

26
Tree	if ( isZero . compareTo ( ! ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isZero . compareTo ( ! ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 10

27
Tree	if ( divisor.isZero . hasNext ( isZero ) ) { return divisor.isZero ; }
Code	if ( divisor.isZero . hasNext ( isZero ) ) { return divisor.isZero ; }
Distance : 6

28
Tree	if ( divisor.isZero . isPowerOfTwo ( isZero ) ) { return isZero ; }
Code	if ( divisor.isZero . isPowerOfTwo ( isZero ) ) { return isZero ; }
Distance : 6

29
Tree	if ( divisor.isZero . fix2ndArgument ( isZero ) ) { return isZero ; }
Code	if ( divisor.isZero . fix2ndArgument ( isZero ) ) { return isZero ; }
Distance : 6

30
Tree	if ( this . isSame () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . isSame () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

31
Tree	if ( this . logDensity () ) { return NUMBER_CONSTANT ; }
Code	if ( this . logDensity () ) { return NUMBER_CONSTANT ; }
Distance : 5

32
Tree	if ( this . isNonSingular () ) { return NUMBER_CONSTANT ; }
Code	if ( this . isNonSingular () ) { return NUMBER_CONSTANT ; }
Distance : 5

33
Tree	if ( this . isSame () ) { return NUMBER_CONSTANT ; }
Code	if ( this . isSame () ) { return NUMBER_CONSTANT ; }
Distance : 5

34
Tree	if ( this . hasNext () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . hasNext () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

35
Tree	if ( isZero . getVertices ( ! ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isZero . getVertices ( ! ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 10

36
Tree	if ( isZero . isSequence ( STRING_CONSTANT ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isZero . isSequence ( STRING_CONSTANT ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 10

37
Tree	if ( this . isAssignableFrom () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . isAssignableFrom () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 8

38
Tree	if ( this . hasNext () ) { return NUMBER_CONSTANT ; }
Code	if ( this . hasNext () ) { return NUMBER_CONSTANT ; }
Distance : 5

39
Tree	if ( this . isSequence () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . isSequence () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 8

40
Tree	if ( isZero . isOptimal ( STRING_CONSTANT ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . isOptimal ( STRING_CONSTANT ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

41
Tree	if ( STRING_CONSTANT . isSequence ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . isSequence ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

42
Tree	if ( STRING_CONSTANT . isPowerOfTwo ( isZero ) ) { return true ; }
Code	if ( STRING_CONSTANT . isPowerOfTwo ( isZero ) ) { return true ; }
Distance : 7

43
Tree	if ( isZero . isPowerOfTwo ( ! ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . isPowerOfTwo ( ! ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

44
Tree	if ( isZero . hasNext ( STRING_CONSTANT ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . hasNext ( STRING_CONSTANT ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

45
Tree	if ( isZero . isSame ( STRING_CONSTANT ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . isSame ( STRING_CONSTANT ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

46
Tree	if ( STRING_CONSTANT . isAssignableFrom ( isZero ) ) { return true ; }
Code	if ( STRING_CONSTANT . isAssignableFrom ( isZero ) ) { return true ; }
Distance : 7

47
Tree	if ( isZero . isAssignableFrom ( byte ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . isAssignableFrom ( byte ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

48
Tree	if ( STRING_CONSTANT . isNonSingular ( isZero ) ) { return null ; }
Code	if ( STRING_CONSTANT . isNonSingular ( isZero ) ) { return null ; }
Distance : 7

49
Tree	if ( STRING_CONSTANT . isPowerOfTwo ( isZero ) ) { return null ; }
Code	if ( STRING_CONSTANT . isPowerOfTwo ( isZero ) ) { return null ; }
Distance : 7

50
Tree	if ( divisor.isZero . isPowerOfTwo ( isZero ) ) { return null ; }
Code	if ( divisor.isZero . isPowerOfTwo ( isZero ) ) { return null ; }
Distance : 6

51
Tree	if ( divisor.isZero . isOptimal ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isOptimal ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

52
Tree	if ( divisor.isZero . fix2ndArgument ( isZero ) ) { return null ; }
Code	if ( divisor.isZero . fix2ndArgument ( isZero ) ) { return null ; }
Distance : 6

53
Tree	if ( divisor.isZero . logDensity ( isZero ) ) { return true ; }
Code	if ( divisor.isZero . logDensity ( isZero ) ) { return true ; }
Distance : 6

54
Tree	if ( isZero . logDensity ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . logDensity ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

55
Tree	if ( divisor.isZero . getTime ( isZero ) ) { return true ; }
Code	if ( divisor.isZero . getTime ( isZero ) ) { return true ; }
Distance : 6

56
Tree	if ( divisor.isZero . isSame ( isZero ) ) { return null ; }
Code	if ( divisor.isZero . isSame ( isZero ) ) { return null ; }
Distance : 6

57
Tree	if ( divisor.isZero . copy ( isZero ) ) { return null ; }
Code	if ( divisor.isZero . copy ( isZero ) ) { return null ; }
Distance : 6

58
Tree	if ( divisor.isZero . logDensity ( divisor.isZero ) ) { return null ; }
Code	if ( divisor.isZero . logDensity ( divisor.isZero ) ) { return null ; }
Distance : 6

59
Tree	if ( divisor.isZero . getTime ( divisor.isZero ) ) { return null ; }
Code	if ( divisor.isZero . getTime ( divisor.isZero ) ) { return null ; }
Distance : 6

60
Tree	if ( divisor.isZero . hasNext ( divisor.isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . hasNext ( divisor.isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 6

61
Tree	if ( divisor.isZero . isPowerOfTwo ( divisor.isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isPowerOfTwo ( divisor.isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 6

62
Tree	if ( isZero . isOptimal ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . isOptimal ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

63
Tree	if ( divisor.isZero . fix2ndArgument ( divisor.isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . fix2ndArgument ( divisor.isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 6

64
Tree	if ( STRING_CONSTANT . isNonSingular ( isZero ) ) { return isZero ; }
Code	if ( STRING_CONSTANT . isNonSingular ( isZero ) ) { return isZero ; }
Distance : 7

65
Tree	if ( divisor.isZero . isSame ( divisor.isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isSame ( divisor.isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 6

66
Tree	if ( divisor.isZero . copy ( divisor.isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . copy ( divisor.isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 6

67
Tree	if ( divisor.isZero . isAssignableFrom ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isAssignableFrom ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

68
Tree	if ( divisor.isZero . isOptimal ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isOptimal ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

69
Tree	if ( this . compareTo () ) { return isZero ; }
Code	if ( this . compareTo () ) { return isZero ; }
Distance : 5

70
Tree	if ( isZero ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 7

71
Tree	if ( this . isSequence () ) { return null ; }
Code	if ( this . isSequence () ) { return null ; }
Distance : 5

72
Tree	if ( this . isOptimal () ) { return isZero ; }
Code	if ( this . isOptimal () ) { return isZero ; }
Distance : 5

73
Tree	if ( this . compareTo () ) { return null ; }
Code	if ( this . compareTo () ) { return null ; }
Distance : 5

74
Tree	if ( this . isOptimal () ) { return null ; }
Code	if ( this . isOptimal () ) { return null ; }
Distance : 5

75
Tree	if ( this . isPowerOfTwo () ) { return null ; }
Code	if ( this . isPowerOfTwo () ) { return null ; }
Distance : 5

76
Tree	if ( isZero . isOptimal ( ! ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . isOptimal ( ! ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

77
Tree	if ( this . logDensity () ) { return null ; }
Code	if ( this . logDensity () ) { return null ; }
Distance : 5

78
Tree	if ( this . isPowerOfTwo () ) { return isZero ; }
Code	if ( this . isPowerOfTwo () ) { return isZero ; }
Distance : 5

79
Tree	if ( this . logDensity () ) { return isZero ; }
Code	if ( this . logDensity () ) { return isZero ; }
Distance : 5

80
Tree	if ( STRING_CONSTANT . isZero ( isZero ) ) { return true ; }
Code	if ( STRING_CONSTANT . isZero ( isZero ) ) { return true ; }
Distance : 7

81
Tree	if ( this . isNonSingular () ) { return null ; }
Code	if ( this . isNonSingular () ) { return null ; }
Distance : 5

82
Tree	if ( this . isNonSingular () ) { return isZero ; }
Code	if ( this . isNonSingular () ) { return isZero ; }
Distance : 5

83
Tree	if ( this . isSame () ) { return isZero ; }
Code	if ( this . isSame () ) { return isZero ; }
Distance : 5

84
Tree	if ( getDimension ( divisor.isZero ) ) { return true ; }
Code	if ( getDimension ( divisor.isZero ) ) { return true ; }
Distance : 4

85
Tree	if ( this . isSame () ) { return null ; }
Code	if ( this . isSame () ) { return null ; }
Distance : 5

86
Tree	if ( divisor.isZero . isSequence ( divisor.isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isSequence ( divisor.isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 6

87
Tree	if ( isZero . hasNext ( ! ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . hasNext ( ! ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

88
Tree	if ( this . getVertices () ) { return true ; }
Code	if ( this . getVertices () ) { return true ; }
Distance : 5

89
Tree	if ( STRING_CONSTANT . getExpansionFactor ( isZero ) ) { return null ; }
Code	if ( STRING_CONSTANT . getExpansionFactor ( isZero ) ) { return null ; }
Distance : 7

90
Tree	if ( this . isAssignableFrom () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . isAssignableFrom () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

91
Tree	if ( STRING_CONSTANT . isSequence ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( STRING_CONSTANT . isSequence ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 10

92
Tree	if ( isZero . isSame ( ! ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . isSame ( ! ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

93
Tree	if ( STRING_CONSTANT . isSequence ( divisor.isZero ) ) { return true ; }
Code	if ( STRING_CONSTANT . isSequence ( divisor.isZero ) ) { return true ; }
Distance : 6

94
Tree	if ( this . hasNext () ) { return isZero ; }
Code	if ( this . hasNext () ) { return isZero ; }
Distance : 5

95
Tree	if ( isDefaultValue ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isDefaultValue ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 7

96
Tree	if ( STRING_CONSTANT . isNonSingular ( isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . isNonSingular ( isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 7

97
Tree	if ( this . hasNext () ) { return null ; }
Code	if ( this . hasNext () ) { return null ; }
Distance : 5

98
Tree	if ( STRING_CONSTANT . isSame ( isZero ) ) { return true ; }
Code	if ( STRING_CONSTANT . isSame ( isZero ) ) { return true ; }
Distance : 7

99
Tree	if ( STRING_CONSTANT . isPowerOfTwo ( isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . isPowerOfTwo ( isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 7

100
Tree	if ( divisor.isZero ) { return NaN ? isZero : INF ; }
Code	if ( divisor.isZero ) { return NaN ? isZero : INF ; }
Distance : 4

101
Tree	if ( isZero . isPowerOfTwo ( byte ) ) { return null ; }
Code	if ( isZero . isPowerOfTwo ( byte ) ) { return null ; }
Distance : 7

102
Tree	if ( isZero . isOptimal ( ! ) ) { return null ; }
Code	if ( isZero . isOptimal ( ! ) ) { return null ; }
Distance : 7

103
Tree	if ( STRING_CONSTANT . isSequence ( isZero ) ) { return true ; }
Code	if ( STRING_CONSTANT . isSequence ( isZero ) ) { return true ; }
Distance : 7

104
Tree	if ( divisor.isZero ) { return isZero ? NaN : INF ; }
Code	if ( divisor.isZero ) { return isZero ? NaN : INF ; }
Distance : 4

105
Tree	if ( isZero . getVertices ( STRING_CONSTANT ) ) { return true ; }
Code	if ( isZero . getVertices ( STRING_CONSTANT ) ) { return true ; }
Distance : 7

106
Tree	if ( isZero . logDensity ( STRING_CONSTANT ) ) { return true ; }
Code	if ( isZero . logDensity ( STRING_CONSTANT ) ) { return true ; }
Distance : 7

107
Tree	if ( divisor.isZero ) { return NaN ? NaN : NaN ; }
Code	if ( divisor.isZero ) { return NaN ? NaN : NaN ; }
Distance : 4

108
Tree	if ( isZero . hasNext ( ! ) ) { return null ; }
Code	if ( isZero . hasNext ( ! ) ) { return null ; }
Distance : 7

109
Tree	if ( divisor.isZero ) { return NaN ? isZero : NaN ; }
Code	if ( divisor.isZero ) { return NaN ? isZero : NaN ; }
Distance : 4

110
Tree	if ( isZero . isOptimal ( STRING_CONSTANT ) ) { return true ; }
Code	if ( isZero . isOptimal ( STRING_CONSTANT ) ) { return true ; }
Distance : 7

111
Tree	if ( divisor.isZero ) { return isZero ? NaN : NaN ; }
Code	if ( divisor.isZero ) { return isZero ? NaN : NaN ; }
Distance : 4

112
Tree	if ( divisor.isZero ) { return NaN ? NaN : isZero ; }
Code	if ( divisor.isZero ) { return NaN ? NaN : isZero ; }
Distance : 4

113
Tree	if ( isZero . isSame ( ! ) ) { return null ; }
Code	if ( isZero . isSame ( ! ) ) { return null ; }
Distance : 7

114
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; }
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; }
Distance : 4

115
Tree	if ( divisor.isZero . copy ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor.isZero . copy ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

116
Tree	if ( divisor.isZero ) { return NaN ? NaN : NaN ; }
Code	if ( divisor.isZero ) { return NaN ? NaN : NaN ; }
Distance : 4

117
Tree	if ( divisor.isZero . hasNext ( divisor.isZero ) ) { return true ; }
Code	if ( divisor.isZero . hasNext ( divisor.isZero ) ) { return true ; }
Distance : 6

118
Tree	if ( divisor.isZero ) { return NaN ? NaN : INF ; }
Code	if ( divisor.isZero ) { return NaN ? NaN : INF ; }
Distance : 4

119
Tree	if ( divisor.isZero . isPowerOfTwo ( divisor.isZero ) ) { return true ; }
Code	if ( divisor.isZero . isPowerOfTwo ( divisor.isZero ) ) { return true ; }
Distance : 6

120
Tree	if ( divisor.isZero ) { return isZero ? NaN : NaN ; }
Code	if ( divisor.isZero ) { return isZero ? NaN : NaN ; }
Distance : 4

121
Tree	if ( STRING_CONSTANT . isSequence ( isZero ) ) { return null ; }
Code	if ( STRING_CONSTANT . isSequence ( isZero ) ) { return null ; }
Distance : 7

122
Tree	if ( divisor.isZero . fix2ndArgument ( divisor.isZero ) ) { return true ; }
Code	if ( divisor.isZero . fix2ndArgument ( divisor.isZero ) ) { return true ; }
Distance : 6

123
Tree	if ( divisor.isZero . isSame ( divisor.isZero ) ) { return true ; }
Code	if ( divisor.isZero . isSame ( divisor.isZero ) ) { return true ; }
Distance : 6

124
Tree	if ( isZero . hasNext ( STRING_CONSTANT ) ) { return true ; }
Code	if ( isZero . hasNext ( STRING_CONSTANT ) ) { return true ; }
Distance : 7

125
Tree	if ( divisor.isZero . copy ( divisor.isZero ) ) { return true ; }
Code	if ( divisor.isZero . copy ( divisor.isZero ) ) { return true ; }
Distance : 6

126
Tree	if ( divisor.isZero . hasNext ( divisor.isZero ) ) { return null ; }
Code	if ( divisor.isZero . hasNext ( divisor.isZero ) ) { return null ; }
Distance : 6

127
Tree	if ( divisor.isZero . isSequence ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor.isZero . isSequence ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

128
Tree	if ( STRING_CONSTANT . isPowerOfTwo ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( STRING_CONSTANT . isPowerOfTwo ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 10

129
Tree	if ( STRING_CONSTANT . isSame ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . isSame ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

130
Tree	if ( STRING_CONSTANT . sign ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . sign ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

131
Tree	if ( divisor.isZero . isAssignableFrom ( divisor.isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isAssignableFrom ( divisor.isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 6

132
Tree	if ( divisor.isZero . isPowerOfTwo ( divisor.isZero ) ) { return null ; }
Code	if ( divisor.isZero . isPowerOfTwo ( divisor.isZero ) ) { return null ; }
Distance : 6

133
Tree	if ( STRING_CONSTANT . isAssignableFrom ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( STRING_CONSTANT . isAssignableFrom ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 10

134
Tree	if ( computeWeightedJacobian ( divisor.isZero ) ) { return true ; }
Code	if ( computeWeightedJacobian ( divisor.isZero ) ) { return true ; }
Distance : 4

135
Tree	if ( STRING_CONSTANT . isOptimal ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( STRING_CONSTANT . isOptimal ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 10

136
Tree	if ( isZero ( divisor.isZero ) ) { return true ; }
Code	if ( isZero ( divisor.isZero ) ) { return true ; }
Distance : 4

137
Tree	if ( STRING_CONSTANT . getExpansionFactor ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( STRING_CONSTANT . getExpansionFactor ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 10

138
Tree	if ( divisor.isZero . logDensity ( divisor.isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . logDensity ( divisor.isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 6

139
Tree	if ( divisor.isZero . getTime ( divisor.isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . getTime ( divisor.isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 6

140
Tree	if ( divisor.isZero . hasNext ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . hasNext ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

141
Tree	if ( divisor.isZero . getTime ( isZero ) ) { return isZero ; }
Code	if ( divisor.isZero . getTime ( isZero ) ) { return isZero ; }
Distance : 6

142
Tree	if ( STRING_CONSTANT . isNonSingular ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( STRING_CONSTANT . isNonSingular ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 10

143
Tree	if ( STRING_CONSTANT . isPowerOfTwo ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( STRING_CONSTANT . isPowerOfTwo ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 10

144
Tree	if ( divisor.isZero . isPowerOfTwo ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isPowerOfTwo ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

145
Tree	if ( divisor.isZero . fix2ndArgument ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . fix2ndArgument ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

146
Tree	if ( isZero . isAssignableFrom ( divisor.isZero ) ) { return true ; }
Code	if ( isZero . isAssignableFrom ( divisor.isZero ) ) { return true ; }
Distance : 6

147
Tree	if ( STRING_CONSTANT . isZero ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( STRING_CONSTANT . isZero ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 10

148
Tree	if ( divisor.isZero . isAssignableFrom ( divisor.isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor.isZero . isAssignableFrom ( divisor.isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

149
Tree	if ( isZero . isAssignableFrom ( ! ) ) { return isZero ; }
Code	if ( isZero . isAssignableFrom ( ! ) ) { return isZero ; }
Distance : 7

150
Tree	if ( divisor.isZero . isSame ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isSame ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

151
Tree	if ( STRING_CONSTANT . isSequence ( divisor.isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( STRING_CONSTANT . isSequence ( divisor.isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

152
Tree	if ( isZero . isPowerOfTwo ( divisor.isZero ) ) { return true ; }
Code	if ( isZero . isPowerOfTwo ( divisor.isZero ) ) { return true ; }
Distance : 6

153
Tree	if ( divisor.isZero . copy ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . copy ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

154
Tree	if ( STRING_CONSTANT . isAssignableFrom ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( STRING_CONSTANT . isAssignableFrom ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 10

155
Tree	if ( STRING_CONSTANT . isOptimal ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( STRING_CONSTANT . isOptimal ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 10

156
Tree	if ( divisor.isZero . isAssignableFrom ( divisor.isZero ) ) { return isZero ; }
Code	if ( divisor.isZero . isAssignableFrom ( divisor.isZero ) ) { return isZero ; }
Distance : 6

157
Tree	if ( STRING_CONSTANT . getExpansionFactor ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( STRING_CONSTANT . getExpansionFactor ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 10

158
Tree	if ( divisor.isZero . isOptimal ( divisor.isZero ) ) { return divisor.isZero ; }
Code	if ( divisor.isZero . isOptimal ( divisor.isZero ) ) { return divisor.isZero ; }
Distance : 6

159
Tree	if ( isZero . isPowerOfTwo ( ! ) ) { return isZero ; }
Code	if ( isZero . isPowerOfTwo ( ! ) ) { return isZero ; }
Distance : 7

160
Tree	if ( isZero . compareTo ( divisor.isZero ) ) { return true ; }
Code	if ( isZero . compareTo ( divisor.isZero ) ) { return true ; }
Distance : 6

161
Tree	if ( isZero . isAssignableFrom ( byte ) ) { return isZero ; }
Code	if ( isZero . isAssignableFrom ( byte ) ) { return isZero ; }
Distance : 7

162
Tree	if ( isZero . getVertices ( divisor.isZero ) ) { return true ; }
Code	if ( isZero . getVertices ( divisor.isZero ) ) { return true ; }
Distance : 6

163
Tree	if ( isZero . compareTo ( ! ) ) { return isZero ; }
Code	if ( isZero . compareTo ( ! ) ) { return isZero ; }
Distance : 7

164
Tree	if ( divisor.isZero . isOptimal ( divisor.isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor.isZero . isOptimal ( divisor.isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

165
Tree	if ( this . isAssignableFrom () ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( this . isAssignableFrom () ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 8

166
Tree	if ( STRING_CONSTANT . isPowerOfTwo ( isZero ) ) { return isZero ; }
Code	if ( STRING_CONSTANT . isPowerOfTwo ( isZero ) ) { return isZero ; }
Distance : 7

167
Tree	if ( STRING_CONSTANT . isZero ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( STRING_CONSTANT . isZero ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 10

168
Tree	if ( isZero . isAssignableFrom ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isZero . isAssignableFrom ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 9

169
Tree	if ( isZero . hasNext ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . hasNext ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

170
Tree	if ( new variablesToInclude.length () . getOne () ) { return true ; }
Code	if ( new variablesToInclude.length () . getOne () ) { return true ; }
Distance : 7

171
Tree	if ( STRING_CONSTANT . isSequence ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( STRING_CONSTANT . isSequence ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 9

172
Tree	if ( isZero . isPowerOfTwo ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isZero . isPowerOfTwo ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 9

173
Tree	if ( this . isSequence () ) { return NaN ? NaN . hashCode () : NaN ; }
Code	if ( this . isSequence () ) { return NaN ? NaN . hashCode () : NaN ; }
Distance : 11

174
Tree	if ( new variablesToInclude.length () . getZero () ) { return true ; }
Code	if ( new variablesToInclude.length () . getZero () ) { return true ; }
Distance : 7

175
Tree	if ( isZero . compareTo ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isZero . compareTo ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 9

176
Tree	if ( this . isNonSingular () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . isNonSingular () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 8

177
Tree	if ( isZero . isSame ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . isSame ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

178
Tree	if ( isZero . logDensity ( divisor.isZero ) ) { return true ; }
Code	if ( isZero . logDensity ( divisor.isZero ) ) { return true ; }
Distance : 6

179
Tree	if ( divisor.isZero . isAssignableFrom ( isZero ) ) { return true ; }
Code	if ( divisor.isZero . isAssignableFrom ( isZero ) ) { return true ; }
Distance : 6

180
Tree	if ( isZero . isPowerOfTwo ( ! ) ) { return true ; }
Code	if ( isZero . isPowerOfTwo ( ! ) ) { return true ; }
Distance : 7

181
Tree	if ( this . compareTo () ) { return NaN ? NaN . hashCode () : NaN ; }
Code	if ( this . compareTo () ) { return NaN ? NaN . hashCode () : NaN ; }
Distance : 11

182
Tree	if ( isZero . compareTo ( ! ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . compareTo ( ! ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

183
Tree	if ( divisor.isZero . isAssignableFrom ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( divisor.isZero . isAssignableFrom ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 9

184
Tree	if ( divisor.isZero . isOptimal ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( divisor.isZero . isOptimal ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 9

185
Tree	if ( this . isSame () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . isSame () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 8

186
Tree	if ( new StreamDataAdapter () . copy () ) { return true ; }
Code	if ( new StreamDataAdapter () . copy () ) { return true ; }
Distance : 7

187
Tree	if ( this . isZero . isPowerOfTwo () ) { return true ; }
Code	if ( this . isZero . isPowerOfTwo () ) { return true ; }
Distance : 7

188
Tree	if ( this . isZero . hashCode () ) { return true ; }
Code	if ( this . isZero . hashCode () ) { return true ; }
Distance : 7

189
Tree	if ( isZero . getVertices ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isZero . getVertices ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 9

190
Tree	if ( STRING_CONSTANT . isOptimal ( isZero ) ) { return true ; }
Code	if ( STRING_CONSTANT . isOptimal ( isZero ) ) { return true ; }
Distance : 7

191
Tree	if ( new ChiSquaredDistributionImpl () . getZero () ) { return true ; }
Code	if ( new ChiSquaredDistributionImpl () . getZero () ) { return true ; }
Distance : 7

192
Tree	if ( isZero . logDensity ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isZero . logDensity ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 9

193
Tree	if ( STRING_CONSTANT . isAssignableFrom ( isZero ) ) { return divisor.isZero ; }
Code	if ( STRING_CONSTANT . isAssignableFrom ( isZero ) ) { return divisor.isZero ; }
Distance : 7

194
Tree	if ( new ChiSquaredDistributionImpl () . getOne () ) { return true ; }
Code	if ( new ChiSquaredDistributionImpl () . getOne () ) { return true ; }
Distance : 7

195
Tree	if ( this . isZero . isSame () ) { return null ; }
Code	if ( this . isZero . isSame () ) { return null ; }
Distance : 7

196
Tree	if ( isZero . hasNext ( ! ) ) { return isZero ; }
Code	if ( isZero . hasNext ( ! ) ) { return isZero ; }
Distance : 7

197
Tree	if ( isZero . isAssignableFrom ( byte ) ) { return true ; }
Code	if ( isZero . isAssignableFrom ( byte ) ) { return true ; }
Distance : 7

198
Tree	if ( isZero . isOptimal ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isZero . isOptimal ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 9

199
Tree	if ( isZero . isSame ( ! ) ) { return isZero ; }
Code	if ( isZero . isSame ( ! ) ) { return isZero ; }
Distance : 7

200
Tree	if ( new ChiSquaredDistributionImpl () . kolmogorovSmirnovTest () ) { return true ; }
Code	if ( new ChiSquaredDistributionImpl () . kolmogorovSmirnovTest () ) { return true ; }
Distance : 7

201
Tree	if ( this . isZero . toSpace () ) { return null ; }
Code	if ( this . isZero . toSpace () ) { return null ; }
Distance : 7

202
Tree	if ( divisor.isZero . isAssignableFrom ( isZero ) ) { return null ; }
Code	if ( divisor.isZero . isAssignableFrom ( isZero ) ) { return null ; }
Distance : 6

203
Tree	if ( isZero . isAssignableFrom ( STRING_CONSTANT ) ) { return true ; }
Code	if ( isZero . isAssignableFrom ( STRING_CONSTANT ) ) { return true ; }
Distance : 7

204
Tree	if ( this . isOptimal () ) { return NaN ? NaN . hashCode () : NaN ; }
Code	if ( this . isOptimal () ) { return NaN ? NaN . hashCode () : NaN ; }
Distance : 11

205
Tree	if ( this . isZero . hasNext () ) { return null ; }
Code	if ( this . isZero . hasNext () ) { return null ; }
Distance : 7

206
Tree	if ( isZero . isSequence ( STRING_CONSTANT ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . isSequence ( STRING_CONSTANT ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

207
Tree	if ( this . isZero . signum () ) { return null ; }
Code	if ( this . isZero . signum () ) { return null ; }
Distance : 7

208
Tree	if ( STRING_CONSTANT . isAssignableFrom ( isZero ) ) { return null ; }
Code	if ( STRING_CONSTANT . isAssignableFrom ( isZero ) ) { return null ; }
Distance : 7

209
Tree	if ( divisor.isZero . isSequence ( isZero ) ) { return null ; }
Code	if ( divisor.isZero . isSequence ( isZero ) ) { return null ; }
Distance : 6

210
Tree	if ( this . isPowerOfTwo () ) { return NaN ? NaN . hashCode () : NaN ; }
Code	if ( this . isPowerOfTwo () ) { return NaN ? NaN . hashCode () : NaN ; }
Distance : 11

211
Tree	if ( isZero . getVertices ( ! ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . getVertices ( ! ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

212
Tree	if ( isZero . isSequence ( divisor.isZero ) ) { return true ; }
Code	if ( isZero . isSequence ( divisor.isZero ) ) { return true ; }
Distance : 6

213
Tree	if ( divisor.isZero . isOptimal ( isZero ) ) { return null ; }
Code	if ( divisor.isZero . isOptimal ( isZero ) ) { return null ; }
Distance : 6

214
Tree	if ( this . isNonSingular () ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( this . isNonSingular () ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 8

215
Tree	if ( STRING_CONSTANT . getExpansionFactor ( isZero ) ) { return true ; }
Code	if ( STRING_CONSTANT . getExpansionFactor ( isZero ) ) { return true ; }
Distance : 7

216
Tree	if ( divisor.isZero . fix2ndArgument ( divisor.isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor.isZero . fix2ndArgument ( divisor.isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

217
Tree	if ( divisor.isZero . hasNext ( isZero ) ) { return true ; }
Code	if ( divisor.isZero . hasNext ( isZero ) ) { return true ; }
Distance : 6

218
Tree	if ( isZero . hasNext ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isZero . hasNext ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 9

219
Tree	if ( divisor.isZero . isPowerOfTwo ( isZero ) ) { return true ; }
Code	if ( divisor.isZero . isPowerOfTwo ( isZero ) ) { return true ; }
Distance : 6

220
Tree	if ( this . hasNext () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . hasNext () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 8

221
Tree	if ( this . isSame () ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( this . isSame () ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 8

222
Tree	if ( isZero . isSame ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isZero . isSame ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 9

223
Tree	if ( isZero . compareTo ( ! ) ) { return true ; }
Code	if ( isZero . compareTo ( ! ) ) { return true ; }
Distance : 7

224
Tree	if ( this . isZero . getVertices () ) { return null ; }
Code	if ( this . isZero . getVertices () ) { return null ; }
Distance : 7

225
Tree	if ( isZero . nextBoolean ( STRING_CONSTANT ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . nextBoolean ( STRING_CONSTANT ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

226
Tree	if ( isZero . isPowerOfTwo ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . isPowerOfTwo ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

227
Tree	if ( isZero . logDensity ( ! ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . logDensity ( ! ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

228
Tree	if ( divisor.isZero . isSame ( divisor.isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor.isZero . isSame ( divisor.isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

229
Tree	if ( divisor.isZero . copy ( divisor.isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor.isZero . copy ( divisor.isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

230
Tree	if ( this . getVertices () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . getVertices () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

231
Tree	if ( this . hasNext () ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( this . hasNext () ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 8

232
Tree	if ( STRING_CONSTANT . isOptimal ( isZero ) ) { return null ; }
Code	if ( STRING_CONSTANT . isOptimal ( isZero ) ) { return null ; }
Distance : 7

233
Tree	if ( divisor.isZero . isSequence ( divisor.isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor.isZero . isSequence ( divisor.isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

234
Tree	if ( divisor.isZero . logDensity ( divisor.isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor.isZero . logDensity ( divisor.isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

235
Tree	if ( divisor.isZero . fix2ndArgument ( isZero ) ) { return true ; }
Code	if ( divisor.isZero . fix2ndArgument ( isZero ) ) { return true ; }
Distance : 6

236
Tree	if ( this . compareTo () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . compareTo () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 8

237
Tree	if ( isZero . nextBoolean ( divisor.isZero ) ) { return true ; }
Code	if ( isZero . nextBoolean ( divisor.isZero ) ) { return true ; }
Distance : 6

238
Tree	if ( this . isAssignableFrom () ) { return NUMBER_CONSTANT ; }
Code	if ( this . isAssignableFrom () ) { return NUMBER_CONSTANT ; }
Distance : 5

239
Tree	if ( this . isSequence () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . isSequence () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

240
Tree	if ( new StreamDataAdapter () . kolmogorovSmirnovTest () ) { return true ; }
Code	if ( new StreamDataAdapter () . kolmogorovSmirnovTest () ) { return true ; }
Distance : 7

241
Tree	if ( divisor.isZero . hasNext ( isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . hasNext ( isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 6

242
Tree	if ( this . compareTo () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . compareTo () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

243
Tree	if ( this . isSequence () ) { return NUMBER_CONSTANT ; }
Code	if ( this . isSequence () ) { return NUMBER_CONSTANT ; }
Distance : 5

244
Tree	if ( new StreamDataAdapter () . getOne () ) { return true ; }
Code	if ( new StreamDataAdapter () . getOne () ) { return true ; }
Distance : 7

245
Tree	if ( this . getVertices () ) { return null ; }
Code	if ( this . getVertices () ) { return null ; }
Distance : 5

246
Tree	if ( isZero . isPowerOfTwo ( byte ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . isPowerOfTwo ( byte ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

247
Tree	if ( this . isOptimal () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . isOptimal () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 8

248
Tree	if ( this . isOptimal () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . isOptimal () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

249
Tree	if ( divisor.isZero . getTime ( divisor.isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor.isZero . getTime ( divisor.isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

250
Tree	if ( this . getVertices () ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( this . getVertices () ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 8

251
Tree	if ( this . getVertices () ) { return NUMBER_CONSTANT ; }
Code	if ( this . getVertices () ) { return NUMBER_CONSTANT ; }
Distance : 5

252
Tree	if ( this . compareTo () ) { return NUMBER_CONSTANT ; }
Code	if ( this . compareTo () ) { return NUMBER_CONSTANT ; }
Distance : 5

253
Tree	if ( new StreamDataAdapter () . getZero () ) { return true ; }
Code	if ( new StreamDataAdapter () . getZero () ) { return true ; }
Distance : 7

254
Tree	if ( this . isPowerOfTwo () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . isPowerOfTwo () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

255
Tree	if ( this . isPowerOfTwo () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . isPowerOfTwo () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 8

256
Tree	if ( this . logDensity () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . logDensity () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

257
Tree	if ( this . logDensity () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . logDensity () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 8

258
Tree	if ( this . isOptimal () ) { return NUMBER_CONSTANT ; }
Code	if ( this . isOptimal () ) { return NUMBER_CONSTANT ; }
Distance : 5

259
Tree	if ( new variablesToInclude.length () . kolmogorovSmirnovTest () ) { return true ; }
Code	if ( new variablesToInclude.length () . kolmogorovSmirnovTest () ) { return true ; }
Distance : 7

260
Tree	if ( divisor.isZero . isSame ( isZero ) ) { return true ; }
Code	if ( divisor.isZero . isSame ( isZero ) ) { return true ; }
Distance : 6

261
Tree	if ( divisor.isZero . copy ( isZero ) ) { return true ; }
Code	if ( divisor.isZero . copy ( isZero ) ) { return true ; }
Distance : 6

262
Tree	if ( isZero . compareTo ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . compareTo ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

263
Tree	if ( divisor.isZero . hasNext ( isZero ) ) { return null ; }
Code	if ( divisor.isZero . hasNext ( isZero ) ) { return null ; }
Distance : 6

264
Tree	if ( isZero . getVertices ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . getVertices ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

265
Tree	if ( divisor.isZero . isAssignableFrom ( isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isAssignableFrom ( isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 6

266
Tree	if ( this . isAssignableFrom () ) { return NaN ? NaN . hashCode () : NaN ; }
Code	if ( this . isAssignableFrom () ) { return NaN ? NaN . hashCode () : NaN ; }
Distance : 11

267
Tree	if ( divisor.isZero . logDensity ( isZero ) ) { return null ; }
Code	if ( divisor.isZero . logDensity ( isZero ) ) { return null ; }
Distance : 6

268
Tree	if ( isDefaultValue ( divisor.isZero ) ) { return true ; }
Code	if ( isDefaultValue ( divisor.isZero ) ) { return true ; }
Distance : 4

269
Tree	if ( STRING_CONSTANT . isSame ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( STRING_CONSTANT . isSame ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 10

270
Tree	if ( divisor.isZero . isAssignableFrom ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isAssignableFrom ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

271
Tree	if ( divisor.isZero . hasNext ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . hasNext ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

272
Tree	if ( STRING_CONSTANT . sign ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( STRING_CONSTANT . sign ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 10

273
Tree	if ( this . logDensity () ) { return NaN ? NaN . hashCode () : NaN ; }
Code	if ( this . logDensity () ) { return NaN ? NaN . hashCode () : NaN ; }
Distance : 11

274
Tree	if ( divisor.isZero . getTime ( isZero ) ) { return null ; }
Code	if ( divisor.isZero . getTime ( isZero ) ) { return null ; }
Distance : 6

275
Tree	if ( this . isNonSingular () ) { return NaN ? NaN . hashCode () : NaN ; }
Code	if ( this . isNonSingular () ) { return NaN ? NaN . hashCode () : NaN ; }
Distance : 11

276
Tree	if ( divisor.isZero . isPowerOfTwo ( isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isPowerOfTwo ( isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 6

277
Tree	if ( STRING_CONSTANT . isOptimal ( isZero ) ) { return isZero ; }
Code	if ( STRING_CONSTANT . isOptimal ( isZero ) ) { return isZero ; }
Distance : 7

278
Tree	if ( divisor.isZero . isSequence ( isZero ) ) { return true ; }
Code	if ( divisor.isZero . isSequence ( isZero ) ) { return true ; }
Distance : 6

279
Tree	if ( divisor.isZero . isPowerOfTwo ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isPowerOfTwo ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

280
Tree	if ( this . isAssignableFrom () ) { return isZero ; }
Code	if ( this . isAssignableFrom () ) { return isZero ; }
Distance : 5

281
Tree	if ( divisor.isZero . fix2ndArgument ( isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . fix2ndArgument ( isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 6

282
Tree	if ( computeWeightedJacobian ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( computeWeightedJacobian ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 7

283
Tree	if ( isValidPivotColumn ( divisor.isZero ) ) { return true ; }
Code	if ( isValidPivotColumn ( divisor.isZero ) ) { return true ; }
Distance : 4

284
Tree	if ( isIncludedColumn ( divisor.isZero ) ) { return true ; }
Code	if ( isIncludedColumn ( divisor.isZero ) ) { return true ; }
Distance : 4

285
Tree	if ( divisor.isZero . isOptimal ( isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isOptimal ( isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 6

286
Tree	if ( isZero . isSequence ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . isSequence ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

287
Tree	if ( >= ( divisor.isZero ) ) { return true ; }
Code	if ( >= ( divisor.isZero ) ) { return true ; }
Distance : 4

288
Tree	if ( getNumberOfElements ( divisor.isZero ) ) { return true ; }
Code	if ( getNumberOfElements ( divisor.isZero ) ) { return true ; }
Distance : 4

289
Tree	if ( getSampleSize ( divisor.isZero ) ) { return true ; }
Code	if ( getSampleSize ( divisor.isZero ) ) { return true ; }
Distance : 4

290
Tree	if ( this . getVertices () ) { return isZero ; }
Code	if ( this . getVertices () ) { return isZero ; }
Distance : 5

291
Tree	if ( isIncludedColumn ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isIncludedColumn ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 7

292
Tree	if ( isValidPivotColumn ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isValidPivotColumn ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 7

293
Tree	if ( this . isSequence () ) { return divisor.isZero ; }
Code	if ( this . isSequence () ) { return divisor.isZero ; }
Distance : 5

294
Tree	if ( getSampleSize ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( getSampleSize ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 7

295
Tree	if ( reducePoints ( divisor.isZero ) ) { return true ; }
Code	if ( reducePoints ( divisor.isZero ) ) { return true ; }
Distance : 4

296
Tree	if ( reducePoints ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( reducePoints ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 7

297
Tree	if ( computeWeightedJacobian ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( computeWeightedJacobian ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 7

298
Tree	if ( isZero ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isZero ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 7

299
Tree	if ( getDimension ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( getDimension ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 7

300
Tree	if ( isDefaultValue ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isDefaultValue ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 7

301
Tree	if ( isZero . isSame ( STRING_CONSTANT ) ) { return true ; }
Code	if ( isZero . isSame ( STRING_CONSTANT ) ) { return true ; }
Distance : 7

302
Tree	if ( >= ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( >= ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 7

303
Tree	if ( isZero . isPowerOfTwo ( STRING_CONSTANT ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . isPowerOfTwo ( STRING_CONSTANT ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

304
Tree	if ( isZero . isSequence ( STRING_CONSTANT ) ) { return true ; }
Code	if ( isZero . isSequence ( STRING_CONSTANT ) ) { return true ; }
Distance : 7

305
Tree	if ( isValidPivotColumn ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isValidPivotColumn ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 7

306
Tree	if ( isZero . isAssignableFrom ( ! ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . isAssignableFrom ( ! ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

307
Tree	if ( isIncludedColumn ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isIncludedColumn ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 7

308
Tree	if ( isZero . compareTo ( STRING_CONSTANT ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . compareTo ( STRING_CONSTANT ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

309
Tree	if ( getSampleSize ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( getSampleSize ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 7

310
Tree	if ( STRING_CONSTANT . isSame ( isZero ) ) { return isZero ; }
Code	if ( STRING_CONSTANT . isSame ( isZero ) ) { return isZero ; }
Distance : 7

311
Tree	if ( isZero . nextBoolean ( STRING_CONSTANT ) ) { return true ; }
Code	if ( isZero . nextBoolean ( STRING_CONSTANT ) ) { return true ; }
Distance : 7

312
Tree	if ( reducePoints ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( reducePoints ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 7

313
Tree	if ( divisor.isZero . getTime ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . getTime ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

314
Tree	if ( divisor.isZero . isOptimal ( divisor.isZero ) ) { return true ; }
Code	if ( divisor.isZero . isOptimal ( divisor.isZero ) ) { return true ; }
Distance : 6

315
Tree	if ( isZero . getVertices ( STRING_CONSTANT ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . getVertices ( STRING_CONSTANT ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

316
Tree	if ( getDimension ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( getDimension ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 7

317
Tree	if ( >= ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( >= ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 7

318
Tree	if ( STRING_CONSTANT . sign ( isZero ) ) { return isZero ; }
Code	if ( STRING_CONSTANT . sign ( isZero ) ) { return isZero ; }
Distance : 7

319
Tree	if ( isZero . isAssignableFrom ( STRING_CONSTANT ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isZero . isAssignableFrom ( STRING_CONSTANT ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 10

320
Tree	if ( STRING_CONSTANT . isSequence ( isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . isSequence ( isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 7

321
Tree	if ( isZero . isPowerOfTwo ( STRING_CONSTANT ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isZero . isPowerOfTwo ( STRING_CONSTANT ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 10

322
Tree	if ( isZero . logDensity ( STRING_CONSTANT ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . logDensity ( STRING_CONSTANT ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

323
Tree	if ( isZero . isAssignableFrom ( ! ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isZero . isAssignableFrom ( ! ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 10

324
Tree	if ( this . isZero . getVertices () ) { return true ; }
Code	if ( this . isZero . getVertices () ) { return true ; }
Distance : 7

325
Tree	if ( getNumberOfElements ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( getNumberOfElements ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 7

326
Tree	if ( divisor.isZero . isAssignableFrom ( divisor.isZero ) ) { return null ; }
Code	if ( divisor.isZero . isAssignableFrom ( divisor.isZero ) ) { return null ; }
Distance : 6

327
Tree	if ( this . isZero . isOptimal () ) { return null ; }
Code	if ( this . isZero . isOptimal () ) { return null ; }
Distance : 7

328
Tree	if ( isZero . compareTo ( STRING_CONSTANT ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isZero . compareTo ( STRING_CONSTANT ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 10

329
Tree	if ( this . getVertices () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . getVertices () ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 8

330
Tree	if ( isZero . isAssignableFrom ( ! ) ) { return true ; }
Code	if ( isZero . isAssignableFrom ( ! ) ) { return true ; }
Distance : 7

331
Tree	if ( divisor.isZero . isOptimal ( divisor.isZero ) ) { return null ; }
Code	if ( divisor.isZero . isOptimal ( divisor.isZero ) ) { return null ; }
Distance : 6

332
Tree	if ( this . isZero . isOptimal () ) { return true ; }
Code	if ( this . isZero . isOptimal () ) { return true ; }
Distance : 7

333
Tree	if ( divisor.isZero . isOptimal ( isZero ) ) { return true ; }
Code	if ( divisor.isZero . isOptimal ( isZero ) ) { return true ; }
Distance : 6

334
Tree	if ( divisor.isZero . isAssignableFrom ( isZero ) ) { return isZero ; }
Code	if ( divisor.isZero . isAssignableFrom ( isZero ) ) { return isZero ; }
Distance : 6

335
Tree	if ( this . isZero . isAssignableFrom () ) { return null ; }
Code	if ( this . isZero . isAssignableFrom () ) { return null ; }
Distance : 7

336
Tree	if ( divisor.isZero . hasNext ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor.isZero . hasNext ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

337
Tree	if ( isZero . getVertices ( ! ) ) { return isZero ; }
Code	if ( isZero . getVertices ( ! ) ) { return isZero ; }
Distance : 7

338
Tree	if ( divisor.isZero . isOptimal ( isZero ) ) { return isZero ; }
Code	if ( divisor.isZero . isOptimal ( isZero ) ) { return isZero ; }
Distance : 6

339
Tree	if ( this . isZero . isPowerOfTwo () ) { return null ; }
Code	if ( this . isZero . isPowerOfTwo () ) { return null ; }
Distance : 7

340
Tree	if ( divisor.isZero . isPowerOfTwo ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor.isZero . isPowerOfTwo ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

341
Tree	if ( divisor.isZero . fix2ndArgument ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor.isZero . fix2ndArgument ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

342
Tree	if ( this . isZero . isAssignableFrom () ) { return true ; }
Code	if ( this . isZero . isAssignableFrom () ) { return true ; }
Distance : 7

343
Tree	if ( isZero . getVertices ( STRING_CONSTANT ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isZero . getVertices ( STRING_CONSTANT ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 10

344
Tree	if ( isZero . isOptimal ( divisor.isZero ) ) { return true ; }
Code	if ( isZero . isOptimal ( divisor.isZero ) ) { return true ; }
Distance : 6

345
Tree	if ( isZero . isAssignableFrom ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . isAssignableFrom ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

346
Tree	if ( this . isZero . hashCode () ) { return null ; }
Code	if ( this . isZero . hashCode () ) { return null ; }
Distance : 7

347
Tree	if ( isZero . logDensity ( STRING_CONSTANT ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isZero . logDensity ( STRING_CONSTANT ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 10

348
Tree	if ( getNumberOfElements ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( getNumberOfElements ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 7

349
Tree	if ( isZero . logDensity ( ! ) ) { return isZero ; }
Code	if ( isZero . logDensity ( ! ) ) { return isZero ; }
Distance : 7

350
Tree	if ( isZero . isOptimal ( STRING_CONSTANT ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isZero . isOptimal ( STRING_CONSTANT ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 10

351
Tree	if ( isZero . hasNext ( divisor.isZero ) ) { return true ; }
Code	if ( isZero . hasNext ( divisor.isZero ) ) { return true ; }
Distance : 6

352
Tree	if ( STRING_CONSTANT . isNonSingular ( isZero ) ) { return true ; }
Code	if ( STRING_CONSTANT . isNonSingular ( isZero ) ) { return true ; }
Distance : 7

353
Tree	if ( isZero . isPowerOfTwo ( byte ) ) { return isZero ; }
Code	if ( isZero . isPowerOfTwo ( byte ) ) { return isZero ; }
Distance : 7

354
Tree	if ( isZero . isOptimal ( ! ) ) { return true ; }
Code	if ( isZero . isOptimal ( ! ) ) { return true ; }
Distance : 7

355
Tree	if ( isZero . isOptimal ( ! ) ) { return isZero ; }
Code	if ( isZero . isOptimal ( ! ) ) { return isZero ; }
Distance : 7

356
Tree	if ( isZero . isAssignableFrom ( ! ) ) { return null ; }
Code	if ( isZero . isAssignableFrom ( ! ) ) { return null ; }
Distance : 7

357
Tree	if ( isZero . isAssignableFrom ( byte ) ) { return null ; }
Code	if ( isZero . isAssignableFrom ( byte ) ) { return null ; }
Distance : 7

358
Tree	if ( STRING_CONSTANT . isSequence ( isZero ) ) { return isZero ; }
Code	if ( STRING_CONSTANT . isSequence ( isZero ) ) { return isZero ; }
Distance : 7

359
Tree	if ( isZero . isPowerOfTwo ( STRING_CONSTANT ) ) { return true ; }
Code	if ( isZero . isPowerOfTwo ( STRING_CONSTANT ) ) { return true ; }
Distance : 7

360
Tree	if ( isZero . hasNext ( ! ) ) { return true ; }
Code	if ( isZero . hasNext ( ! ) ) { return true ; }
Distance : 7

361
Tree	if ( divisor.isZero . isSame ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor.isZero . isSame ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

362
Tree	if ( STRING_CONSTANT . sign ( isZero ) ) { return true ; }
Code	if ( STRING_CONSTANT . sign ( isZero ) ) { return true ; }
Distance : 7

363
Tree	if ( isZero . compareTo ( ! ) ) { return null ; }
Code	if ( isZero . compareTo ( ! ) ) { return null ; }
Distance : 7

364
Tree	if ( STRING_CONSTANT . isZero ( isZero ) ) { return null ; }
Code	if ( STRING_CONSTANT . isZero ( isZero ) ) { return null ; }
Distance : 7

365
Tree	if ( isZero . isSame ( ! ) ) { return true ; }
Code	if ( isZero . isSame ( ! ) ) { return true ; }
Distance : 7

366
Tree	if ( isZero . getVertices ( ! ) ) { return null ; }
Code	if ( isZero . getVertices ( ! ) ) { return null ; }
Distance : 7

367
Tree	if ( isZero . isPowerOfTwo ( ! ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isZero . isPowerOfTwo ( ! ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 10

368
Tree	if ( STRING_CONSTANT . isNonSingular ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . isNonSingular ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

369
Tree	if ( STRING_CONSTANT . isPowerOfTwo ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . isPowerOfTwo ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

370
Tree	if ( isZero . isSame ( divisor.isZero ) ) { return true ; }
Code	if ( isZero . isSame ( divisor.isZero ) ) { return true ; }
Distance : 6

371
Tree	if ( STRING_CONSTANT . isAssignableFrom ( isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . isAssignableFrom ( isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 7

372
Tree	if ( isZero . compareTo ( STRING_CONSTANT ) ) { return true ; }
Code	if ( isZero . compareTo ( STRING_CONSTANT ) ) { return true ; }
Distance : 7

373
Tree	if ( STRING_CONSTANT . isSequence ( divisor.isZero ) ) { return null ; }
Code	if ( STRING_CONSTANT . isSequence ( divisor.isZero ) ) { return null ; }
Distance : 6

374
Tree	if ( divisor.isZero . fix2ndArgument ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . fix2ndArgument ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

375
Tree	if ( STRING_CONSTANT . isSame ( isZero ) ) { return null ; }
Code	if ( STRING_CONSTANT . isSame ( isZero ) ) { return null ; }
Distance : 7

376
Tree	if ( this . isSame () ) { return NaN ? NaN . hashCode () : NaN ; }
Code	if ( this . isSame () ) { return NaN ? NaN . hashCode () : NaN ; }
Distance : 11

377
Tree	if ( isZero . logDensity ( ! ) ) { return null ; }
Code	if ( isZero . logDensity ( ! ) ) { return null ; }
Distance : 7

378
Tree	if ( STRING_CONSTANT . isAssignableFrom ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . isAssignableFrom ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

379
Tree	if ( this . isAssignableFrom () ) { return NaN ? NaN . IEEEremainder () : NaN ; }
Code	if ( this . isAssignableFrom () ) { return NaN ? NaN . IEEEremainder () : NaN ; }
Distance : 11

380
Tree	if ( divisor.isZero . isSame ( isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isSame ( isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 6

381
Tree	if ( divisor.isZero . copy ( isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . copy ( isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 6

382
Tree	if ( divisor.isZero . isSequence ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isSequence ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

383
Tree	if ( STRING_CONSTANT . isOptimal ( isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . isOptimal ( isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 7

384
Tree	if ( this . isSequence () ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( this . isSequence () ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 8

385
Tree	if ( divisor.isZero . isSame ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isSame ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

386
Tree	if ( divisor.isZero . logDensity ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . logDensity ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

387
Tree	if ( this . compareTo () ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( this . compareTo () ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 8

388
Tree	if ( divisor.isZero . getTime ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . getTime ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

389
Tree	if ( divisor.isZero . isSame ( isZero ) ) { return isZero ; }
Code	if ( divisor.isZero . isSame ( isZero ) ) { return isZero ; }
Distance : 6

390
Tree	if ( divisor.isZero . copy ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . copy ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

391
Tree	if ( divisor.isZero . copy ( isZero ) ) { return isZero ; }
Code	if ( divisor.isZero . copy ( isZero ) ) { return isZero ; }
Distance : 6

392
Tree	if ( isZero . logDensity ( ! ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isZero . logDensity ( ! ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 10

393
Tree	if ( isZero . isAssignableFrom ( STRING_CONSTANT ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . isAssignableFrom ( STRING_CONSTANT ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

394
Tree	if ( isZero . nextBoolean ( STRING_CONSTANT ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isZero . nextBoolean ( STRING_CONSTANT ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 10

395
Tree	if ( isZero . nextBoolean ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero . nextBoolean ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

396
Tree	if ( isZero . isPowerOfTwo ( byte ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isZero . isPowerOfTwo ( byte ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 10

397
Tree	if ( this . isOptimal () ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( this . isOptimal () ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 8

398
Tree	if ( divisor.isZero . hasNext ( divisor.isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor.isZero . hasNext ( divisor.isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

399
Tree	if ( STRING_CONSTANT . getExpansionFactor ( isZero ) ) { return isZero ; }
Code	if ( STRING_CONSTANT . getExpansionFactor ( isZero ) ) { return isZero ; }
Distance : 7

400
Tree	if ( STRING_CONSTANT . sign ( isZero ) ) { return null ; }
Code	if ( STRING_CONSTANT . sign ( isZero ) ) { return null ; }
Distance : 7

401
Tree	if ( isZero . isOptimal ( ! ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isZero . isOptimal ( ! ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 10

402
Tree	if ( this . isPowerOfTwo () ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( this . isPowerOfTwo () ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 8

403
Tree	if ( isZero . hasNext ( ! ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isZero . hasNext ( ! ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 10

404
Tree	if ( divisor.isZero . isSequence ( isZero ) ) { return isZero ; }
Code	if ( divisor.isZero . isSequence ( isZero ) ) { return isZero ; }
Distance : 6

405
Tree	if ( this . logDensity () ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( this . logDensity () ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 8

406
Tree	if ( this . hasNext () ) { return NaN ? NaN . hashCode () : NaN ; }
Code	if ( this . hasNext () ) { return NaN ? NaN . hashCode () : NaN ; }
Distance : 11

407
Tree	if ( divisor.isZero . logDensity ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor.isZero . logDensity ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

408
Tree	if ( isZero . isSame ( ! ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isZero . isSame ( ! ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 10

409
Tree	if ( divisor.isZero . isPowerOfTwo ( divisor.isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor.isZero . isPowerOfTwo ( divisor.isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

410
Tree	if ( divisor.isZero . logDensity ( isZero ) ) { return isZero ; }
Code	if ( divisor.isZero . logDensity ( isZero ) ) { return isZero ; }
Distance : 6

411
Tree	if ( divisor.isZero . fix2ndArgument ( divisor.isZero ) ) { return null ; }
Code	if ( divisor.isZero . fix2ndArgument ( divisor.isZero ) ) { return null ; }
Distance : 6

412
Tree	if ( this . isZero . isNonSingular () ) { return null ; }
Code	if ( this . isZero . isNonSingular () ) { return null ; }
Distance : 7

413
Tree	if ( this . isZero . isSame () ) { return true ; }
Code	if ( this . isZero . isSame () ) { return true ; }
Distance : 7

414
Tree	if ( this . isZero . toSpace () ) { return true ; }
Code	if ( this . isZero . toSpace () ) { return true ; }
Distance : 7

415
Tree	if ( this . isZero . hasNext () ) { return true ; }
Code	if ( this . isZero . hasNext () ) { return true ; }
Distance : 7

416
Tree	if ( divisor.isZero . isOptimal ( divisor.isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isOptimal ( divisor.isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 6

417
Tree	if ( divisor.isZero . getTime ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor.isZero . getTime ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

418
Tree	if ( isZero . getVertices ( ! ) ) { return true ; }
Code	if ( isZero . getVertices ( ! ) ) { return true ; }
Distance : 7

419
Tree	if ( this . isZero . signum () ) { return true ; }
Code	if ( this . isZero . signum () ) { return true ; }
Distance : 7

420
Tree	if ( isZero . isPowerOfTwo ( ! ) ) { return null ; }
Code	if ( isZero . isPowerOfTwo ( ! ) ) { return null ; }
Distance : 7

421
Tree	if ( divisor.isZero . isSame ( divisor.isZero ) ) { return null ; }
Code	if ( divisor.isZero . isSame ( divisor.isZero ) ) { return null ; }
Distance : 6

422
Tree	if ( divisor.isZero . copy ( divisor.isZero ) ) { return null ; }
Code	if ( divisor.isZero . copy ( divisor.isZero ) ) { return null ; }
Distance : 6

423
Tree	if ( this . isZero . isNonSingular () ) { return true ; }
Code	if ( this . isZero . isNonSingular () ) { return true ; }
Distance : 7

424
Tree	if ( STRING_CONSTANT . isOptimal ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . isOptimal ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

425
Tree	if ( divisor.isZero . isSequence ( divisor.isZero ) ) { return true ; }
Code	if ( divisor.isZero . isSequence ( divisor.isZero ) ) { return true ; }
Distance : 6

426
Tree	if ( isZero . logDensity ( ! ) ) { return true ; }
Code	if ( isZero . logDensity ( ! ) ) { return true ; }
Distance : 7

427
Tree	if ( isZero . isPowerOfTwo ( byte ) ) { return true ; }
Code	if ( isZero . isPowerOfTwo ( byte ) ) { return true ; }
Distance : 7

428
Tree	if ( divisor.isZero . logDensity ( divisor.isZero ) ) { return true ; }
Code	if ( divisor.isZero . logDensity ( divisor.isZero ) ) { return true ; }
Distance : 6

429
Tree	if ( divisor.isZero . isAssignableFrom ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( divisor.isZero . isAssignableFrom ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 9

430
Tree	if ( divisor.isZero . getTime ( divisor.isZero ) ) { return true ; }
Code	if ( divisor.isZero . getTime ( divisor.isZero ) ) { return true ; }
Distance : 6

431
Tree	if ( STRING_CONSTANT . getExpansionFactor ( isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . getExpansionFactor ( isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 7

432
Tree	if ( divisor.isZero . isSequence ( divisor.isZero ) ) { return null ; }
Code	if ( divisor.isZero . isSequence ( divisor.isZero ) ) { return null ; }
Distance : 6

433
Tree	if ( divisor.isZero . isOptimal ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( divisor.isZero . isOptimal ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 9

434
Tree	if ( STRING_CONSTANT . getExpansionFactor ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . getExpansionFactor ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

435
Tree	if ( STRING_CONSTANT . isZero ( isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . isZero ( isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 7

436
Tree	if ( STRING_CONSTANT . isZero ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . isZero ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

437
Tree	if ( divisor.isZero . hasNext ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( divisor.isZero . hasNext ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 9

438
Tree	if ( STRING_CONSTANT . isSequence ( divisor.isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . isSequence ( divisor.isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 6

439
Tree	if ( divisor.isZero . isPowerOfTwo ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( divisor.isZero . isPowerOfTwo ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 9

440
Tree	if ( STRING_CONSTANT . isSame ( isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . isSame ( isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 7

441
Tree	if ( divisor.isZero . fix2ndArgument ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( divisor.isZero . fix2ndArgument ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 9

442
Tree	if ( divisor.isZero . isSame ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( divisor.isZero . isSame ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 9

443
Tree	if ( STRING_CONSTANT . isNonSingular ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( STRING_CONSTANT . isNonSingular ( isZero ) ) { return NaN ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 10

444
Tree	if ( divisor.isZero . copy ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( divisor.isZero . copy ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 9

445
Tree	if ( STRING_CONSTANT . isSame ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( STRING_CONSTANT . isSame ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 10

446
Tree	if ( STRING_CONSTANT . sign ( isZero ) ) { return NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . sign ( isZero ) ) { return NUMBER_CONSTANT ; }
Distance : 7

447
Tree	if ( divisor.isZero . isSequence ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( divisor.isZero . isSequence ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 9

448
Tree	if ( divisor.isZero . logDensity ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( divisor.isZero . logDensity ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 9

449
Tree	if ( STRING_CONSTANT . isSequence ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . isSequence ( divisor.isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

450
Tree	if ( STRING_CONSTANT . sign ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( STRING_CONSTANT . sign ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 10

451
Tree	if ( divisor.isZero . getTime ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( divisor.isZero . getTime ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 9

452
Tree	if ( divisor.isZero . hasNext ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( divisor.isZero . hasNext ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 9

453
Tree	if ( divisor.isZero . hasNext ( divisor.isZero ) ) { return isZero ; }
Code	if ( divisor.isZero . hasNext ( divisor.isZero ) ) { return isZero ; }
Distance : 6

454
Tree	if ( divisor.isZero . isPowerOfTwo ( divisor.isZero ) ) { return isZero ; }
Code	if ( divisor.isZero . isPowerOfTwo ( divisor.isZero ) ) { return isZero ; }
Distance : 6

455
Tree	if ( divisor.isZero . fix2ndArgument ( divisor.isZero ) ) { return isZero ; }
Code	if ( divisor.isZero . fix2ndArgument ( divisor.isZero ) ) { return isZero ; }
Distance : 6

456
Tree	if ( divisor.isZero . isSame ( divisor.isZero ) ) { return isZero ; }
Code	if ( divisor.isZero . isSame ( divisor.isZero ) ) { return isZero ; }
Distance : 6

457
Tree	if ( divisor.isZero . copy ( divisor.isZero ) ) { return isZero ; }
Code	if ( divisor.isZero . copy ( divisor.isZero ) ) { return isZero ; }
Distance : 6

458
Tree	if ( divisor.isZero . isSequence ( divisor.isZero ) ) { return divisor.isZero ; }
Code	if ( divisor.isZero . isSequence ( divisor.isZero ) ) { return divisor.isZero ; }
Distance : 6

459
Tree	if ( divisor.isZero . logDensity ( divisor.isZero ) ) { return isZero ; }
Code	if ( divisor.isZero . logDensity ( divisor.isZero ) ) { return isZero ; }
Distance : 6

460
Tree	if ( divisor.isZero . isPowerOfTwo ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( divisor.isZero . isPowerOfTwo ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 9

461
Tree	if ( divisor.isZero . fix2ndArgument ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( divisor.isZero . fix2ndArgument ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 9

462
Tree	if ( divisor.isZero . isSame ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( divisor.isZero . isSame ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 9

463
Tree	if ( isZero . isSequence ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isZero . isSequence ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 9

464
Tree	if ( divisor.isZero . copy ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( divisor.isZero . copy ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 9

465
Tree	if ( divisor.isZero . getTime ( divisor.isZero ) ) { return divisor.isZero ; }
Code	if ( divisor.isZero . getTime ( divisor.isZero ) ) { return divisor.isZero ; }
Distance : 6

466
Tree	if ( isZero . nextBoolean ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( isZero . nextBoolean ( divisor.isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 9

467
Tree	if ( divisor.isZero . isSequence ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( divisor.isZero . isSequence ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 9

468
Tree	if ( divisor.isZero . logDensity ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( divisor.isZero . logDensity ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 9

469
Tree	if ( divisor.isZero . getTime ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Code	if ( divisor.isZero . getTime ( isZero ) ) { return NaN ? divisor.isZero : divisor.isZero ; }
Distance : 9

========================================================================


========================================================================
Example Number: 20
Parent Code is: 
{ super ( populationLimit ) ; this . elitismRate = elitismRate ; }
-------------------------------------------------------------------------------
Child code is: 
{ super ( populationLimit ) ; setElitismRate ( elitismRate ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=populationLimit}) (215{val=)}) (227{val=;})) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=elitismRate})) (204{val==}) (800{val=elitismRate})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=populationLimit}) (215{val=)}) (227{val=;})) (21 (32 (802{val=setElitismRate}) (214{val=(}) (800{val=elitismRate}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/35/parent/src_main_java_org_apache_commons_math3_genetics_ElitisticListPopulation.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 260
Wrong
========================================================================
False

0
Tree	{ super ( populationLimit , elitismRate ) ; }
Code	{ super ( populationLimit , elitismRate ) ; }
Distance : 4

1
Tree	{ this ( populationLimit , true ) ; }
Code	{ this ( populationLimit , true ) ; }
Distance : 6

2
Tree	{ this ( populationLimit , ( populationLimit ) return; ) ; }
Code	{ this ( populationLimit , ( populationLimit ) return; ) ; }
Distance : 6

3
Tree	{}
Code	{}
Distance : 12

4
Tree	{ super ( populationLimit , elitismRate ) ; this . elitismRate = new long [] { elitismRate } ; }
Code	{ super ( populationLimit , elitismRate ) ; this . elitismRate = new long [] { elitismRate } ; }
Distance : 11

5
Tree	{ this ( populationLimit , ( populationLimit ) break; ) ; }
Code	{ this ( populationLimit , ( populationLimit ) break; ) ; }
Distance : 6

6
Tree	{ this ( populationLimit , ( populationLimit ) super(); ) ; }
Code	{ this ( populationLimit , ( populationLimit ) super(); ) ; }
Distance : 6

7
Tree	{ super ( populationLimit , elitismRate ) ; this . elitismRate = new float [] { elitismRate } ; }
Code	{ super ( populationLimit , elitismRate ) ; this . elitismRate = new float [] { elitismRate } ; }
Distance : 11

8
Tree	{ this . elitismRate = populationLimit ( populationLimit ) ; }
Code	{ this . elitismRate = populationLimit ( populationLimit ) ; }
Distance : 7

9
Tree	{ super ( populationLimit , elitismRate ) ; this . elitismRate = new double [] { populationLimit } ; }
Code	{ super ( populationLimit , elitismRate ) ; this . elitismRate = new double [] { populationLimit } ; }
Distance : 11

10
Tree	{ this ( elitismRate , ( elitismRate ) null ) ; }
Code	{ this ( elitismRate , ( elitismRate ) null ) ; }
Distance : 7

11
Tree	{ super ( populationLimit , elitismRate ) ; this . elitismRate = new void [] { populationLimit } ; }
Code	{ super ( populationLimit , elitismRate ) ; this . elitismRate = new void [] { populationLimit } ; }
Distance : 11

12
Tree	{ super(); this . elitismRate = populationLimit ( populationLimit ) ; synchronized }
Code	{ super(); this . elitismRate = populationLimit ( populationLimit ) ; synchronized }
Distance : 8

13
Tree	{ this . populationLimit = populationLimit ; this . elitismRate = elitismRate ; }
Code	{ this . populationLimit = populationLimit ; this . elitismRate = elitismRate ; }
Distance : 8

14
Tree	{ super ( elitismRate ) ; this . elitismRate = populationLimit ; }
Code	{ super ( elitismRate ) ; this . elitismRate = populationLimit ; }
Distance : 5

15
Tree	{ this . populationLimit = elitismRate ; this . elitismRate = populationLimit ; }
Code	{ this . populationLimit = elitismRate ; this . elitismRate = populationLimit ; }
Distance : 8

16
Tree	{ this . elitismRate = populationLimit ( elitismRate ) ; }
Code	{ this . elitismRate = populationLimit ( elitismRate ) ; }
Distance : 6

17
Tree	{ super ( populationLimit ) ; this . populationLimit = populationLimit . populationLimit () ; }
Code	{ super ( populationLimit ) ; this . populationLimit = populationLimit . populationLimit () ; }
Distance : 8

18
Tree	{ super ( elitismRate ) ; this . elitismRate = populationLimit . elitismRate () ; }
Code	{ super ( elitismRate ) ; this . elitismRate = populationLimit . elitismRate () ; }
Distance : 8

19
Tree	{ super ( elitismRate ) ; this . populationLimit = elitismRate ( populationLimit ) ; }
Code	{ super ( elitismRate ) ; this . populationLimit = elitismRate ( populationLimit ) ; }
Distance : 7

20
Tree	{ super ( elitismRate ) ; this . populationLimit = populationLimit . elitismRate () ; }
Code	{ super ( elitismRate ) ; this . populationLimit = populationLimit . elitismRate () ; }
Distance : 8

21
Tree	{ this ( populationLimit , true ) ; } super
Code	{ this ( populationLimit , true ) ; } super
Distance : 7

22
Tree	{ super ( populationLimit , elitismRate ) ; } UnivariateRealFunction
Code	{ super ( populationLimit , elitismRate ) ; } UnivariateRealFunction
Distance : 5

23
Tree	{ super(); this . elitismRate = populationLimit ( populationLimit ) ; XTX }
Code	{ super(); this . elitismRate = populationLimit ( populationLimit ) ; XTX }
Distance : 8

24
Tree	{ break; this . elitismRate = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ break; this . elitismRate = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 10

25
Tree	{ this . elitismRate = elitismRate ; this . populationLimit = elitismRate ; }
Code	{ this . elitismRate = elitismRate ; this . populationLimit = elitismRate ; }
Distance : 10

26
Tree	{ super ( populationLimit , elitismRate ) ; this . populationLimit = new void [] { elitismRate } ; }
Code	{ super ( populationLimit , elitismRate ) ; this . populationLimit = new void [] { elitismRate } ; }
Distance : 11

27
Tree	{ this ( populationLimit , false ) ; }
Code	{ this ( populationLimit , false ) ; }
Distance : 6

28
Tree	{ super ( populationLimit ) ; }
Code	{ super ( populationLimit ) ; }
Distance : 5

29
Tree	{ ; }
Code	{ ; }
Distance : 9

30
Tree	{ this ( populationLimit , ( populationLimit ) null ) ; }
Code	{ this ( populationLimit , ( populationLimit ) null ) ; }
Distance : 6

31
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] elitismRate ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] elitismRate ; }
Distance : 7

32
Tree	{ super ( populationLimit ) ; this . elitismRate = new void [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new void [] { elitismRate } ; }
Distance : 9

33
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; }
Distance : 4

34
Tree	{ this . elitismRate = elitismRate ; }
Code	{ this . elitismRate = elitismRate ; }
Distance : 8

35
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] eventsStates ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] eventsStates ; }
Distance : 7

36
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [ NUMBER_CONSTANT ] ; }
Distance : 8

37
Tree	{ super ( populationLimit , elitismRate ) ; } point
Code	{ super ( populationLimit , elitismRate ) ; } point
Distance : 5

38
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] subTestData ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] subTestData ; }
Distance : 7

39
Tree	{ super ( populationLimit ) ; this . elitismRate = new NotPositiveException [] elitismRate ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new NotPositiveException [] elitismRate ; }
Distance : 7

40
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { elitismRate } ; }
Distance : 9

41
Tree	{ super ( populationLimit ) ; this . elitismRate = new LUDecompositionImpl [] elitismRate ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new LUDecompositionImpl [] elitismRate ; }
Distance : 7

42
Tree	{ super ( populationLimit ) ; this . elitismRate = new void [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new void [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

43
Tree	{ super ( populationLimit ) ; this . elitismRate = new int [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new int [] { elitismRate } ; }
Distance : 9

44
Tree	{ super ( populationLimit , populationLimit ) ; }
Code	{ super ( populationLimit , populationLimit ) ; }
Distance : 5

45
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; ret }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; ret }
Distance : 5

46
Tree	{ super ( populationLimit ) ; this . elitismRate = new ExpansionMode.MULTIPLICATIVE [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ExpansionMode.MULTIPLICATIVE [] { elitismRate } ; }
Distance : 9

47
Tree	{ super ( populationLimit ) ; this . elitismRate = new PolyhedronsSet [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new PolyhedronsSet [] { elitismRate } ; }
Distance : 9

48
Tree	{ super ( populationLimit ) ; this . elitismRate = populationLimit ; }
Code	{ super ( populationLimit ) ; this . elitismRate = populationLimit ; }
Distance : 4

49
Tree	{ super ( populationLimit ) ; this . elitismRate = new MullerSolver2 [] elitismRate ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new MullerSolver2 [] elitismRate ; }
Distance : 7

50
Tree	{ super ( populationLimit , elitismRate ) ; } super
Code	{ super ( populationLimit , elitismRate ) ; } super
Distance : 5

51
Tree	{ super(); this . elitismRate = elitismRate ; this . populationLimit = elitismRate ; }
Code	{ super(); this . elitismRate = elitismRate ; this . populationLimit = elitismRate ; }
Distance : 11

52
Tree	{ super ( populationLimit ) ; this . populationLimit = populationLimit ; }
Code	{ super ( populationLimit ) ; this . populationLimit = populationLimit ; }
Distance : 5

53
Tree	{ this . elitismRate = populationLimit ( populationLimit ) ; } point
Code	{ this . elitismRate = populationLimit ( populationLimit ) ; } point
Distance : 8

54
Tree	{ ; } field
Code	{ ; } field
Distance : 10

55
Tree	{ ; } data
Code	{ ; } data
Distance : 10

56
Tree	{ this . elitismRate = populationLimit ( populationLimit ) ; } MatrixUtils
Code	{ this . elitismRate = populationLimit ( populationLimit ) ; } MatrixUtils
Distance : 8

57
Tree	{ super ( populationLimit ) ; } Override
Code	{ super ( populationLimit ) ; } Override
Distance : 6

58
Tree	{ ; } void
Code	{ ; } void
Distance : 10

59
Tree	{ super ( elitismRate ) ; this . populationLimit = populationLimit ; }
Code	{ super ( elitismRate ) ; this . populationLimit = populationLimit ; }
Distance : 6

60
Tree	{ ; } p
Code	{ ; } p
Distance : 10

61
Tree	{} data
Code	{} data
Distance : 12

62
Tree	{ super ( populationLimit ) ; } Fraction
Code	{ super ( populationLimit ) ; } Fraction
Distance : 6

63
Tree	{ this . elitismRate = populationLimit ( populationLimit ) ; } Array2DRowFieldMatrix
Code	{ this . elitismRate = populationLimit ( populationLimit ) ; } Array2DRowFieldMatrix
Distance : 8

64
Tree	{ super ( populationLimit ) ; } assertEquals
Code	{ super ( populationLimit ) ; } assertEquals
Distance : 6

65
Tree	{ super ( elitismRate ) ; this . elitismRate = populationLimit ; }
Code	{ super ( elitismRate ) ; this . elitismRate = populationLimit ; }
Distance : 5

66
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; rescale }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; rescale }
Distance : 5

67
Tree	{ super ( populationLimit ) ; this . elitismRate = new MullerSolver2 [] { LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED , b3.value , b3.value , b3.value , b3.value , } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new MullerSolver2 [] { LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED , b3.value , b3.value , b3.value , b3.value , } ; }
Distance : 18

68
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; Cartesian3D }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; Cartesian3D }
Distance : 5

69
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; && }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; && }
Distance : 5

70
Tree	{ super ( populationLimit ) ; this . elitismRate = new NotPositiveException [] { LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED , b3.value , b3.value , b3.value , b3.value , b3.value , b3.value , } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new NotPositiveException [] { LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED , b3.value , b3.value , b3.value , b3.value , b3.value , b3.value , } ; }
Distance : 22

71
Tree	{ super ( populationLimit ) ; this . elitismRate = new createUnsupportedOperationException [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new createUnsupportedOperationException [] { elitismRate } ; }
Distance : 9

72
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { e.length , b3.value , b3.value , b3.value , b3.value , } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { e.length , b3.value , b3.value , b3.value , b3.value , } ; }
Distance : 18

73
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] eventsStates ; else }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] eventsStates ; else }
Distance : 8

74
Tree	{ super ( populationLimit ) ; this . populationLimit = elitismRate ( elitismRate ) ; }
Code	{ super ( populationLimit ) ; this . populationLimit = elitismRate ( elitismRate ) ; }
Distance : 5

75
Tree	{ this . populationLimit = elitismRate ; }
Code	{ this . populationLimit = elitismRate ; }
Distance : 7

76
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate . populationLimit () ; } MathArrays
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate . populationLimit () ; } MathArrays
Distance : 8

77
Tree	{ super ( populationLimit ) ; this . elitismRate = new byte [] { elitismRate } ; if }
Code	{ super ( populationLimit ) ; this . elitismRate = new byte [] { elitismRate } ; if }
Distance : 10

78
Tree	{ super ( populationLimit ) ; this . elitismRate = new TrapezoidIntegrator [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new TrapezoidIntegrator [ NUMBER_CONSTANT ] ; }
Distance : 8

79
Tree	{ super ( populationLimit ) ; this . elitismRate = new NotPositiveException [] { LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED , b3.value , b3.value , b3.value , b3.value , } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new NotPositiveException [] { LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED , b3.value , b3.value , b3.value , b3.value , } ; }
Distance : 18

80
Tree	{ super(); this . elitismRate = populationLimit ; this . elitismRate = elitismRate ; }
Code	{ super(); this . elitismRate = populationLimit ; this . elitismRate = elitismRate ; }
Distance : 10

81
Tree	{ this . elitismRate = elitismRate ; this . elitismRate = populationLimit ; }
Code	{ this . elitismRate = elitismRate ; this . elitismRate = populationLimit ; }
Distance : 9

82
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; g0Positive }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; g0Positive }
Distance : 5

83
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { ; , b3.value , b3.value , b3.value , b3.value , b3.value , b3.value , } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { ; , b3.value , b3.value , b3.value , b3.value , b3.value , b3.value , } ; }
Distance : 22

84
Tree	{ super ( populationLimit ) ; this . populationLimit = elitismRate . populationLimit () ; }
Code	{ super ( populationLimit ) ; this . populationLimit = elitismRate . populationLimit () ; }
Distance : 7

85
Tree	{ this ( populationLimit , ( elitismRate ) continue; ) ; }
Code	{ this ( populationLimit , ( elitismRate ) continue; ) ; }
Distance : 6

86
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate . populationLimit () ; } v.length
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate . populationLimit () ; } v.length
Distance : 8

87
Tree	{ super ( elitismRate ) ; this . populationLimit = elitismRate ; }
Code	{ super ( elitismRate ) ; this . populationLimit = elitismRate ; }
Distance : 6

88
Tree	{ super ( populationLimit ) ; this . elitismRate = new LUDecompositionImpl [] { LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED , b3.value , b3.value , b3.value , b3.value , b3.value , b3.value , } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new LUDecompositionImpl [] { LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED , b3.value , b3.value , b3.value , b3.value , b3.value , b3.value , } ; }
Distance : 22

89
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { ; , b3.value , b3.value , b3.value , b3.value , } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { ; , b3.value , b3.value , b3.value , b3.value , } ; }
Distance : 18

90
Tree	{ super ( populationLimit ) ; this . elitismRate = new LUDecompositionImpl [] { LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED , b3.value , b3.value , b3.value , b3.value , } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new LUDecompositionImpl [] { LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED , b3.value , b3.value , b3.value , b3.value , } ; }
Distance : 18

91
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] subTestData ; else }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] subTestData ; else }
Distance : 8

92
Tree	{ this . elitismRate = populationLimit ; this . populationLimit = elitismRate ; }
Code	{ this . elitismRate = populationLimit ; this . populationLimit = elitismRate ; }
Distance : 10

93
Tree	{ super ( populationLimit ) ; this . elitismRate = new MullerSolver2 [] elitismRate ; else }
Code	{ super ( populationLimit ) ; this . elitismRate = new MullerSolver2 [] elitismRate ; else }
Distance : 8

94
Tree	{ super ( populationLimit ) ; this . elitismRate = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

95
Tree	{ this ( elitismRate , true ) ; }
Code	{ this ( elitismRate , true ) ; }
Distance : 7

96
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; else }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; else }
Distance : 5

97
Tree	{ super ( populationLimit ) ; this . elitismRate = new long [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new long [] { elitismRate } ; }
Distance : 9

98
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ( elitismRate ) ; }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ( elitismRate ) ; }
Distance : 5

99
Tree	{ super ( populationLimit , elitismRate ) ; this . elitismRate = new boolean [] { elitismRate } ; }
Code	{ super ( populationLimit , elitismRate ) ; this . elitismRate = new boolean [] { elitismRate } ; }
Distance : 11

100
Tree	{ super ( elitismRate , populationLimit ) ; }
Code	{ super ( elitismRate , populationLimit ) ; }
Distance : 6

101
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ( elitismRate ) ; } MathArrays
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ( elitismRate ) ; } MathArrays
Distance : 6

102
Tree	{ super ( populationLimit ) ; this . elitismRate = new MullerSolver2 [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new MullerSolver2 [] { elitismRate } ; }
Distance : 9

103
Tree	{ super ( populationLimit ) ; this . elitismRate = new NotPositiveException [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new NotPositiveException [] { elitismRate } ; }
Distance : 9

104
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; elitismRate }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; elitismRate }
Distance : 5

105
Tree	{ super ( populationLimit ) ; this . elitismRate = new ODEWithJacobians [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ODEWithJacobians [ NUMBER_CONSTANT ] ; }
Distance : 8

106
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ( elitismRate ) ; } v.length
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ( elitismRate ) ; } v.length
Distance : 6

107
Tree	{ super ( populationLimit , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Code	{ super ( populationLimit , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Distance : 11

108
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate . populationLimit () ; }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate . populationLimit () ; }
Distance : 7

109
Tree	{ super ( elitismRate ) ; this . elitismRate = elitismRate ; }
Code	{ super ( elitismRate ) ; this . elitismRate = elitismRate ; }
Distance : 5

110
Tree	{ super ( populationLimit ) ; this . elitismRate = new void [] { elitismRate } ; catch }
Code	{ super ( populationLimit ) ; this . elitismRate = new void [] { elitismRate } ; catch }
Distance : 10

111
Tree	{ super ( populationLimit ) ; this . elitismRate = new float [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new float [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

112
Tree	{ super(); this . elitismRate = populationLimit ( populationLimit ) ; if }
Code	{ super(); this . elitismRate = populationLimit ( populationLimit ) ; if }
Distance : 8

113
Tree	{ this . elitismRate = populationLimit ( populationLimit ) ; } UnivariateRealFunction
Code	{ this . elitismRate = populationLimit ( populationLimit ) ; } UnivariateRealFunction
Distance : 8

114
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; return; }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; return; }
Distance : 5

115
Tree	{ super ( populationLimit ) ; this . elitismRate = new boolean [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new boolean [] { elitismRate } ; }
Distance : 9

116
Tree	{ this . elitismRate = elitismRate ; this . populationLimit = populationLimit ; }
Code	{ this . elitismRate = elitismRate ; this . populationLimit = populationLimit ; }
Distance : 10

117
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] subTestData ; if }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] subTestData ; if }
Distance : 8

118
Tree	{ super ( populationLimit ) ; this . elitismRate = new TrapezoidIntegrator [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new TrapezoidIntegrator [] { elitismRate } ; }
Distance : 9

119
Tree	{ super ( populationLimit ) ; this . elitismRate = new ODEWithJacobians [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ODEWithJacobians [] { elitismRate } ; }
Distance : 9

120
Tree	{ this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 8

121
Tree	{ super ( populationLimit ) ; this . elitismRate = new MullerSolver2 [] elitismRate ; if }
Code	{ super ( populationLimit ) ; this . elitismRate = new MullerSolver2 [] elitismRate ; if }
Distance : 8

122
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] elitismRate ; if }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] elitismRate ; if }
Distance : 8

123
Tree	{ this ( elitismRate , ( populationLimit ) null ) ; }
Code	{ this ( elitismRate , ( populationLimit ) null ) ; }
Distance : 7

124
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { b3.value , b3.value , b3.value , b3.value , b3.value , b3.value , b3.value , } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { b3.value , b3.value , b3.value , b3.value , b3.value , b3.value , b3.value , } ; }
Distance : 22

125
Tree	{ super(); this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ super(); this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 9

126
Tree	{ super(); this . elitismRate = populationLimit ( populationLimit ) ; else }
Code	{ super(); this . elitismRate = populationLimit ( populationLimit ) ; else }
Distance : 8

127
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { Method.REGULA_FALSI , b3.value , b3.value , b3.value , b3.value , b3.value , b3.value , } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { Method.REGULA_FALSI , b3.value , b3.value , b3.value , b3.value , b3.value , b3.value , } ; }
Distance : 22

128
Tree	{} Complex
Code	{} Complex
Distance : 12

129
Tree	{ super ( populationLimit ) ; this . elitismRate = new int [] { elitismRate } ; else }
Code	{ super ( populationLimit ) ; this . elitismRate = new int [] { elitismRate } ; else }
Distance : 10

130
Tree	{ this . elitismRate = populationLimit ; this . elitismRate = elitismRate ; }
Code	{ this . elitismRate = populationLimit ; this . elitismRate = elitismRate ; }
Distance : 9

131
Tree	{ super ( populationLimit ) ; this . populationLimit = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . populationLimit = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 12

132
Tree	{ this ( populationLimit , true ) ; } UnivariateRealFunction
Code	{ this ( populationLimit , true ) ; } UnivariateRealFunction
Distance : 7

133
Tree	{ super(); this . populationLimit = elitismRate ; this . populationLimit = elitismRate ; }
Code	{ super(); this . populationLimit = elitismRate ; this . populationLimit = elitismRate ; }
Distance : 10

134
Tree	{ null this . elitismRate = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ null this . elitismRate = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 10

135
Tree	{ super ( populationLimit ) ; this . populationLimit = populationLimit ; }
Code	{ super ( populationLimit ) ; this . populationLimit = populationLimit ; }
Distance : 5

136
Tree	{ this ( populationLimit , true ) ; } point
Code	{ this ( populationLimit , true ) ; } point
Distance : 7

137
Tree	{ this . populationLimit = elitismRate ; this . populationLimit = elitismRate ; }
Code	{ this . populationLimit = elitismRate ; this . populationLimit = elitismRate ; }
Distance : 9

138
Tree	{} try
Code	{} try
Distance : 12

139
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { b3.value , b3.value , b3.value , b3.value , b3.value , } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { b3.value , b3.value , b3.value , b3.value , b3.value , } ; }
Distance : 18

140
Tree	{ super ( populationLimit , elitismRate ) ; } +
Code	{ super ( populationLimit , elitismRate ) ; } +
Distance : 5

141
Tree	{ this ( populationLimit , ( elitismRate ) return; ) ; }
Code	{ this ( populationLimit , ( elitismRate ) return; ) ; }
Distance : 6

142
Tree	{ super ( populationLimit ) ; this . elitismRate = new getInverse [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new getInverse [] { elitismRate } ; }
Distance : 9

143
Tree	{ super(); this . elitismRate = elitismRate ( populationLimit ) ; && }
Code	{ super(); this . elitismRate = elitismRate ( populationLimit ) ; && }
Distance : 8

144
Tree	{ super ( populationLimit , elitismRate ) ; } MatrixUtils
Code	{ super ( populationLimit , elitismRate ) ; } MatrixUtils
Distance : 5

145
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { setCostAccuracy , b3.value , b3.value , b3.value , b3.value , b3.value , b3.value , } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { setCostAccuracy , b3.value , b3.value , b3.value , b3.value , b3.value , b3.value , } ; }
Distance : 22

146
Tree	{ this ( populationLimit , ( elitismRate ) null ) ; }
Code	{ this ( populationLimit , ( elitismRate ) null ) ; }
Distance : 6

147
Tree	{ this ( populationLimit , true ) ; } MatrixUtils
Code	{ this ( populationLimit , true ) ; } MatrixUtils
Distance : 7

148
Tree	{ super(); this . elitismRate = populationLimit ( populationLimit ) ; catch }
Code	{ super(); this . elitismRate = populationLimit ( populationLimit ) ; catch }
Distance : 8

149
Tree	{ super(); this . elitismRate = populationLimit ( populationLimit ) ; Cartesian3D }
Code	{ super(); this . elitismRate = populationLimit ( populationLimit ) ; Cartesian3D }
Distance : 8

150
Tree	{ this . elitismRate = elitismRate ; } MatrixUtils
Code	{ this . elitismRate = elitismRate ; } MatrixUtils
Distance : 9

151
Tree	{ this . elitismRate = elitismRate ; } point
Code	{ this . elitismRate = elitismRate ; } point
Distance : 9

152
Tree	{ super ( populationLimit ) ; this . elitismRate = new NotPositiveException [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new NotPositiveException [ NUMBER_CONSTANT ] ; }
Distance : 8

153
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ( populationLimit ) ; }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ( populationLimit ) ; }
Distance : 6

154
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; scale }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; scale }
Distance : 5

155
Tree	{ super ( elitismRate ) ; this . elitismRate = elitismRate ( elitismRate ) ; }
Code	{ super ( elitismRate ) ; this . elitismRate = elitismRate ( elitismRate ) ; }
Distance : 6

156
Tree	{ super ( elitismRate ) ; this . elitismRate = elitismRate . elitismRate () ; }
Code	{ super ( elitismRate ) ; this . elitismRate = elitismRate . elitismRate () ; }
Distance : 8

157
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] continue; ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] continue; ; }
Distance : 7

158
Tree	{ super ( populationLimit ) ; this . elitismRate = new NotPositiveException [] elitismRate ; if }
Code	{ super ( populationLimit ) ; this . elitismRate = new NotPositiveException [] elitismRate ; if }
Distance : 8

159
Tree	{ this . elitismRate = elitismRate ; } UnivariateRealFunction
Code	{ this . elitismRate = elitismRate ; } UnivariateRealFunction
Distance : 9

160
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] countSum2 ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] countSum2 ; }
Distance : 7

161
Tree	{ super ( populationLimit ) ; this . elitismRate = new MullerSolver2 [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new MullerSolver2 [ NUMBER_CONSTANT ] ; }
Distance : 8

162
Tree	{ super(); this . elitismRate = populationLimit ( populationLimit ) ; return; }
Code	{ super(); this . elitismRate = populationLimit ( populationLimit ) ; return; }
Distance : 8

163
Tree	{ continue; this . elitismRate = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ continue; this . elitismRate = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 10

164
Tree	{ super ( elitismRate ) ; this . populationLimit = populationLimit ; }
Code	{ super ( elitismRate ) ; this . populationLimit = populationLimit ; }
Distance : 6

165
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] beta ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] beta ; }
Distance : 7

166
Tree	{ super ( elitismRate , elitismRate ) ; }
Code	{ super ( elitismRate , elitismRate ) ; }
Distance : 5

167
Tree	{ super ( populationLimit ) ; this . elitismRate = new PolyhedronsSet [] elitismRate ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new PolyhedronsSet [] elitismRate ; }
Distance : 7

168
Tree	{ super ( populationLimit ) ; this . elitismRate = populationLimit . elitismRate () ; }
Code	{ super ( populationLimit ) ; this . elitismRate = populationLimit . elitismRate () ; }
Distance : 7

169
Tree	{ this . populationLimit = populationLimit ( elitismRate ) ; }
Code	{ this . populationLimit = populationLimit ( elitismRate ) ; }
Distance : 5

170
Tree	{ this . elitismRate = elitismRate ; } super
Code	{ this . elitismRate = elitismRate ; } super
Distance : 9

171
Tree	{ this . populationLimit = populationLimit ( populationLimit ) ; }
Code	{ this . populationLimit = populationLimit ( populationLimit ) ; }
Distance : 6

172
Tree	{} false
Code	{} false
Distance : 12

173
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } v.length
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } v.length
Distance : 5

174
Tree	{ this . elitismRate = elitismRate ; } +
Code	{ this . elitismRate = elitismRate ; } +
Distance : 9

175
Tree	{ this . elitismRate = populationLimit ( populationLimit ) ; } super
Code	{ this . elitismRate = populationLimit ( populationLimit ) ; } super
Distance : 8

176
Tree	{ this ( populationLimit , true ) ; } Array2DRowFieldMatrix
Code	{ this ( populationLimit , true ) ; } Array2DRowFieldMatrix
Distance : 7

177
Tree	{ super(); this . elitismRate = populationLimit ( populationLimit ) ; g0Positive }
Code	{ super(); this . elitismRate = populationLimit ( populationLimit ) ; g0Positive }
Distance : 8

178
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { Method.REGULA_FALSI , b3.value , b3.value , b3.value , b3.value , } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { Method.REGULA_FALSI , b3.value , b3.value , b3.value , b3.value , } ; }
Distance : 18

179
Tree	{ super ( populationLimit ) ; this . populationLimit = elitismRate ( populationLimit ) ; }
Code	{ super ( populationLimit ) ; this . populationLimit = elitismRate ( populationLimit ) ; }
Distance : 6

180
Tree	{ super ( elitismRate ) ; this . populationLimit = elitismRate ( elitismRate ) ; }
Code	{ super ( elitismRate ) ; this . populationLimit = elitismRate ( elitismRate ) ; }
Distance : 6

181
Tree	{ super ( elitismRate ) ; this . populationLimit = elitismRate . elitismRate () ; }
Code	{ super ( elitismRate ) ; this . populationLimit = elitismRate . elitismRate () ; }
Distance : 8

182
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; if }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; if }
Distance : 5

183
Tree	{ super ( populationLimit ) ; } field
Code	{ super ( populationLimit ) ; } field
Distance : 6

184
Tree	{ super ( populationLimit , elitismRate ) ; } Array2DRowFieldMatrix
Code	{ super ( populationLimit , elitismRate ) ; } Array2DRowFieldMatrix
Distance : 5

185
Tree	{ super ( populationLimit ) ; this . elitismRate = new LUDecompositionImpl [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new LUDecompositionImpl [] { elitismRate } ; }
Distance : 9

186
Tree	{ super ( populationLimit , elitismRate ) ; this . elitismRate = new void [] { elitismRate } ; }
Code	{ super ( populationLimit , elitismRate ) ; this . elitismRate = new void [] { elitismRate } ; }
Distance : 11

187
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED , b3.value , b3.value , b3.value , b3.value , } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED , b3.value , b3.value , b3.value , b3.value , } ; }
Distance : 18

188
Tree	{ super(); this . elitismRate = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ super(); this . elitismRate = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 10

189
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { setCostAccuracy , b3.value , b3.value , b3.value , b3.value , } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { setCostAccuracy , b3.value , b3.value , b3.value , b3.value , } ; }
Distance : 18

190
Tree	{ super ( populationLimit ) ; this . elitismRate = new void [] { elitismRate } ; else }
Code	{ super ( populationLimit ) ; this . elitismRate = new void [] { elitismRate } ; else }
Distance : 10

191
Tree	{ super ( populationLimit ) ; this . elitismRate = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

192
Tree	{ super ( populationLimit ) ; this . elitismRate = new byte [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new byte [] { elitismRate } ; }
Distance : 9

193
Tree	{ super ( populationLimit ) ; this . elitismRate = new boolean [] { elitismRate } ; if }
Code	{ super ( populationLimit ) ; this . elitismRate = new boolean [] { elitismRate } ; if }
Distance : 10

194
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { elitismRate } ; if }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { elitismRate } ; if }
Distance : 10

195
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] elitismRate ; else }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] elitismRate ; else }
Distance : 8

196
Tree	{ super ( populationLimit ) ; this . elitismRate = new ExpansionMode.MULTIPLICATIVE [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ExpansionMode.MULTIPLICATIVE [ NUMBER_CONSTANT ] ; }
Distance : 8

197
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

198
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED , b3.value , b3.value , b3.value , b3.value , b3.value , b3.value , } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED , b3.value , b3.value , b3.value , b3.value , b3.value , b3.value , } ; }
Distance : 22

199
Tree	{ this . elitismRate = populationLimit ( populationLimit ) ; } +
Code	{ this . elitismRate = populationLimit ( populationLimit ) ; } +
Distance : 8

200
Tree	{ super ( populationLimit ) ; this . populationLimit = new void [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . populationLimit = new void [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 12

201
Tree	{ super ( populationLimit ) ; this . elitismRate = new LUDecompositionImpl [] elitismRate ; if }
Code	{ super ( populationLimit ) ; this . elitismRate = new LUDecompositionImpl [] elitismRate ; if }
Distance : 8

202
Tree	{ super ( populationLimit ) ; this . elitismRate = new void [] { elitismRate } ; if }
Code	{ super ( populationLimit ) ; this . elitismRate = new void [] { elitismRate } ; if }
Distance : 10

203
Tree	{ super ( populationLimit , elitismRate ) ; this . elitismRate = new int [] { elitismRate } ; }
Code	{ super ( populationLimit , elitismRate ) ; this . elitismRate = new int [] { elitismRate } ; }
Distance : 11

204
Tree	{ super ( populationLimit , elitismRate ) ; this . elitismRate = new byte [] { elitismRate } ; }
Code	{ super ( populationLimit , elitismRate ) ; this . elitismRate = new byte [] { elitismRate } ; }
Distance : 11

205
Tree	{ super(); this . elitismRate = populationLimit ( populationLimit ) ; ret }
Code	{ super(); this . elitismRate = populationLimit ( populationLimit ) ; ret }
Distance : 8

206
Tree	{ super ( populationLimit ) ; this . elitismRate = new boolean [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new boolean [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

207
Tree	{ super ( populationLimit ) ; this . elitismRate = new long [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new long [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

208
Tree	{ this ( populationLimit , true ) ; } +
Code	{ this ( populationLimit , true ) ; } +
Distance : 7

209
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { interpolator.currentDerivative , b3.value , b3.value , b3.value , b3.value , b3.value , b3.value , } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { interpolator.currentDerivative , b3.value , b3.value , b3.value , b3.value , b3.value , b3.value , } ; }
Distance : 22

210
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { interpolator.currentDerivative , b3.value , b3.value , b3.value , b3.value , } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { interpolator.currentDerivative , b3.value , b3.value , b3.value , b3.value , } ; }
Distance : 18

211
Tree	{ this ( elitismRate , false ) ; }
Code	{ this ( elitismRate , false ) ; }
Distance : 7

212
Tree	{ super ( populationLimit ) ; this . populationLimit = new double [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . populationLimit = new double [] { elitismRate } ; }
Distance : 9

213
Tree	{ super ( populationLimit ) ; this . elitismRate = new PolyhedronsSet [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new PolyhedronsSet [ NUMBER_CONSTANT ] ; }
Distance : 8

214
Tree	{ this . elitismRate = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ this . elitismRate = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 9

215
Tree	{ super ( populationLimit ) ; this . elitismRate = new createUnsupportedOperationException [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new createUnsupportedOperationException [ NUMBER_CONSTANT ] ; }
Distance : 8

216
Tree	{ super ( populationLimit ) ; this . elitismRate = new MullerSolver2 [] { LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED , b3.value , b3.value , b3.value , b3.value , b3.value , b3.value , } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new MullerSolver2 [] { LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED , b3.value , b3.value , b3.value , b3.value , b3.value , b3.value , } ; }
Distance : 22

217
Tree	{ super ( populationLimit ) ; this . populationLimit = new void [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . populationLimit = new void [] { elitismRate } ; }
Distance : 9

218
Tree	{ super ( elitismRate ) ; }
Code	{ super ( elitismRate ) ; }
Distance : 5

219
Tree	{ ; } Complex
Code	{ ; } Complex
Distance : 10

220
Tree	{ super ( populationLimit ) ; this . populationLimit = elitismRate ; }
Code	{ super ( populationLimit ) ; this . populationLimit = elitismRate ; }
Distance : 5

221
Tree	{ super ( elitismRate ) ; this . elitismRate = elitismRate ( populationLimit ) ; }
Code	{ super ( elitismRate ) ; this . elitismRate = elitismRate ( populationLimit ) ; }
Distance : 7

222
Tree	{ this . populationLimit = populationLimit ; }
Code	{ this . populationLimit = populationLimit ; }
Distance : 8

223
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { elitismRate } ; }
Distance : 9

224
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { e.length , b3.value , b3.value , b3.value , b3.value , b3.value , b3.value , } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] { e.length , b3.value , b3.value , b3.value , b3.value , b3.value , b3.value , } ; }
Distance : 22

225
Tree	{ ; } Fraction
Code	{ ; } Fraction
Distance : 10

226
Tree	{ super ( populationLimit ) ; this . elitismRate = new int [] { elitismRate } ; if }
Code	{ super ( populationLimit ) ; this . elitismRate = new int [] { elitismRate } ; if }
Distance : 10

227
Tree	{ ; } try
Code	{ ; } try
Distance : 10

228
Tree	{ this . elitismRate = populationLimit ; }
Code	{ this . elitismRate = populationLimit ; }
Distance : 9

229
Tree	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] eventsStates ; if }
Code	{ super ( populationLimit ) ; this . elitismRate = new ComplexFormat [] eventsStates ; if }
Distance : 8

230
Tree	{ super ( populationLimit ) ; this . elitismRate = new void [] { elitismRate } ; ret }
Code	{ super ( populationLimit ) ; this . elitismRate = new void [] { elitismRate } ; ret }
Distance : 10

231
Tree	{ super ( populationLimit ) ; this . elitismRate = new MathIllegalStateException [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new MathIllegalStateException [ NUMBER_CONSTANT ] ; }
Distance : 8

232
Tree	{ super ( populationLimit ) ; this . elitismRate = new LUDecompositionImpl [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new LUDecompositionImpl [ NUMBER_CONSTANT ] ; }
Distance : 8

233
Tree	{} field
Code	{} field
Distance : 12

234
Tree	{ ; } int
Code	{ ; } int
Distance : 10

235
Tree	{} void
Code	{} void
Distance : 12

236
Tree	{ this ( populationLimit , ( populationLimit ) continue; ) ; }
Code	{ this ( populationLimit , ( populationLimit ) continue; ) ; }
Distance : 6

237
Tree	{ super ( populationLimit ) ; } k
Code	{ super ( populationLimit ) ; } k
Distance : 6

238
Tree	{} p
Code	{} p
Distance : 12

239
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { elitismRate } ; else }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { elitismRate } ; else }
Distance : 10

240
Tree	{ super ( populationLimit ) ; this . elitismRate = new void [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new void [] { populationLimit } ; }
Distance : 9

241
Tree	{ ; } false
Code	{ ; } false
Distance : 10

242
Tree	{ super ( populationLimit ) ; } nCols
Code	{ super ( populationLimit ) ; } nCols
Distance : 6

243
Tree	{} Fraction
Code	{} Fraction
Distance : 12

244
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } MathArrays
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } MathArrays
Distance : 5

245
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; }
Distance : 4

246
Tree	{ super ( populationLimit ) ; this . populationLimit = elitismRate ; }
Code	{ super ( populationLimit ) ; this . populationLimit = elitismRate ; }
Distance : 5

247
Tree	{ super ( elitismRate ) ; this . elitismRate = elitismRate ; }
Code	{ super ( elitismRate ) ; this . elitismRate = elitismRate ; }
Distance : 5

248
Tree	{ super ( populationLimit ) ; this . populationLimit = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . populationLimit = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 12

249
Tree	{ super ( populationLimit ) ; this . elitismRate = populationLimit ; }
Code	{ super ( populationLimit ) ; this . elitismRate = populationLimit ; }
Distance : 4

250
Tree	{ super(); this . elitismRate = elitismRate ; this . elitismRate = populationLimit ; }
Code	{ super(); this . elitismRate = elitismRate ; this . elitismRate = populationLimit ; }
Distance : 10

251
Tree	{} int
Code	{} int
Distance : 12

252
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } v.length
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } v.length
Distance : 5

253
Tree	{ super ( elitismRate ) ; this . populationLimit = elitismRate ; }
Code	{ super ( elitismRate ) ; this . populationLimit = elitismRate ; }
Distance : 6

254
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; }
Distance : 9

255
Tree	{ return; this . elitismRate = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ return; this . elitismRate = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 10

256
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } MathArrays
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; } MathArrays
Distance : 5

257
Tree	{ super ( populationLimit ) ; } Assert
Code	{ super ( populationLimit ) ; } Assert
Distance : 6

258
Tree	{ super ( populationLimit ) ; } void
Code	{ super ( populationLimit ) ; } void
Distance : 6

259
Tree	{ this . elitismRate = elitismRate ; } Array2DRowFieldMatrix
Code	{ this . elitismRate = elitismRate ; } Array2DRowFieldMatrix
Distance : 9

========================================================================


========================================================================
Example Number: 21
Parent Code is: 
{ super ( chromosomes , populationLimit ) ; this . elitismRate = elitismRate ; }
-------------------------------------------------------------------------------
Child code is: 
{ super ( chromosomes , populationLimit ) ; setElitismRate ( elitismRate ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=chromosomes}) (234{val=,}) (800{val=populationLimit}) (215{val=)}) (227{val=;})) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=elitismRate})) (204{val==}) (800{val=elitismRate})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=chromosomes}) (234{val=,}) (800{val=populationLimit}) (215{val=)}) (227{val=;})) (21 (32 (802{val=setElitismRate}) (214{val=(}) (800{val=elitismRate}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/35/parent/src_main_java_org_apache_commons_math3_genetics_ElitisticListPopulation.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 270
Wrong
========================================================================
False

0
Tree	{ this ( chromosomes , false ) ; }
Code	{ this ( chromosomes , false ) ; }
Distance : 7

1
Tree	{ super ( chromosomes . populationLimit () , elitismRate ) ; this . elitismRate = new double [] { populationLimit } ; }
Code	{ super ( chromosomes . populationLimit () , elitismRate ) ; this . elitismRate = new double [] { populationLimit } ; }
Distance : 13

2
Tree	{ super ( populationLimit , chromosomes ) ; }
Code	{ super ( populationLimit , chromosomes ) ; }
Distance : 7

3
Tree	{ this . chromosomes = populationLimit ; . () ; }
Code	{ this . chromosomes = populationLimit ; . () ; }
Distance : 8

4
Tree	{ this ( chromosomes , populationLimit , continue; ) ; }
Code	{ this ( chromosomes , populationLimit , continue; ) ; }
Distance : 6

5
Tree	{ this ( chromosomes , populationLimit , populationLimit , populationLimit , false ) ; }
Code	{ this ( chromosomes , populationLimit , populationLimit , populationLimit , false ) ; }
Distance : 7

6
Tree	{ this . chromosomes = chromosomes ; elitismRate () ; }
Code	{ this . chromosomes = chromosomes ; elitismRate () ; }
Distance : 8

7
Tree	{ super ( chromosomes , elitismRate ) ; }
Code	{ super ( chromosomes , elitismRate ) ; }
Distance : 5

8
Tree	{ super ( chromosomes . populationLimit () , populationLimit ) ; this . elitismRate = new double [] { elitismRate } ; }
Code	{ super ( chromosomes . populationLimit () , populationLimit ) ; this . elitismRate = new double [] { elitismRate } ; }
Distance : 12

9
Tree	{ this ( chromosomes , true ) ; }
Code	{ this ( chromosomes , true ) ; }
Distance : 7

10
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Distance : 10

11
Tree	{ this ( LocalizedFormats.MAX_COUNT_EXCEEDED , elitismRate ) ; }
Code	{ this ( LocalizedFormats.MAX_COUNT_EXCEEDED , elitismRate ) ; }
Distance : 7

12
Tree	{ this ( Sum , elitismRate ) ; }
Code	{ this ( Sum , elitismRate ) ; }
Distance : 7

13
Tree	{ this . chromosomes = elitismRate ; }
Code	{ this . chromosomes = elitismRate ; }
Distance : 9

14
Tree	{ this ( chromosomes , populationLimit , false ) ; }
Code	{ this ( chromosomes , populationLimit , false ) ; }
Distance : 6

15
Tree	{ this ( LocalizedFormats.EVALUATION_FAILED , elitismRate ) ; }
Code	{ this ( LocalizedFormats.EVALUATION_FAILED , elitismRate ) ; }
Distance : 7

16
Tree	{ this ( x.length , elitismRate ) ; }
Code	{ this ( x.length , elitismRate ) ; }
Distance : 7

17
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 15

18
Tree	{ this ( populationLimit , true ) ; }
Code	{ this ( populationLimit , true ) ; }
Distance : 8

19
Tree	{ super ( elitismRate , populationLimit ) ; }
Code	{ super ( elitismRate , populationLimit ) ; }
Distance : 6

20
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = populationLimit ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = populationLimit ; }
Distance : 5

21
Tree	{ this ( chromosomes , populationLimit , populationLimit , elitismRate , true ) ; }
Code	{ this ( chromosomes , populationLimit , populationLimit , elitismRate , true ) ; }
Distance : 7

22
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new Array2DRowFieldMatrix [ NUMBER_CONSTANT ] ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new Array2DRowFieldMatrix [ NUMBER_CONSTANT ] ; }
Distance : 9

23
Tree	{ this ( chromosomes , elitismRate , false ) ; }
Code	{ this ( chromosomes , elitismRate , false ) ; }
Distance : 7

24
Tree	{ this ( chromosomes , elitismRate , break; ) ; }
Code	{ this ( chromosomes , elitismRate , break; ) ; }
Distance : 7

25
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new long [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new long [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 16

26
Tree	{ super ( chromosomes , elitismRate , populationLimit ) ; this . elitismRate = new float [] { elitismRate } ; }
Code	{ super ( chromosomes , elitismRate , populationLimit ) ; this . elitismRate = new float [] { elitismRate } ; }
Distance : 11

27
Tree	{ super ( chromosomes ) ; this . elitismRate = new byte [] { elitismRate } ; }
Code	{ super ( chromosomes ) ; this . elitismRate = new byte [] { elitismRate } ; }
Distance : 11

28
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 12

29
Tree	{ this . elitismRate = populationLimit ; }
Code	{ this . elitismRate = populationLimit ; }
Distance : 10

30
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new beta [] scale.length ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new beta [] scale.length ; }
Distance : 8

31
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new Double.MAX_VALUE [ NUMBER_CONSTANT ] ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new Double.MAX_VALUE [ NUMBER_CONSTANT ] ; }
Distance : 9

32
Tree	{ this . chromosomes = new double [] { elitismRate } ; }
Code	{ this . chromosomes = new double [] { elitismRate } ; }
Distance : 9

33
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new LUDecompositionImpl [] scale.length ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new LUDecompositionImpl [] scale.length ; }
Distance : 8

34
Tree	{ super ( x.length , elitismRate ) ; this . elitismRate = elitismRate ; }
Code	{ super ( x.length , elitismRate ) ; this . elitismRate = elitismRate ; }
Distance : 6

35
Tree	{ this ( chromosomes , populationLimit , populationLimit , populationLimit , true ) ; }
Code	{ this ( chromosomes , populationLimit , populationLimit , populationLimit , true ) ; }
Distance : 7

36
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new beta [] minExpectedCount ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new beta [] minExpectedCount ; }
Distance : 8

37
Tree	{ this ( populationLimit , populationLimit , false ) ; }
Code	{ this ( populationLimit , populationLimit , false ) ; }
Distance : 7

38
Tree	{ super ( chromosomes . super () , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Code	{ super ( chromosomes . super () , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Distance : 13

39
Tree	{ null this . chromosomes = populationLimit ; this . elitismRate = elitismRate ; }
Code	{ null this . chromosomes = populationLimit ; this . elitismRate = elitismRate ; }
Distance : 9

40
Tree	{ super ( populationLimit , elitismRate ) ; elitismRate = NUMBER_CONSTANT / elitismRate ; }
Code	{ super ( populationLimit , elitismRate ) ; elitismRate = NUMBER_CONSTANT / elitismRate ; }
Distance : 7

41
Tree	{ this ( populationLimit , ( populationLimit ) null ) ; }
Code	{ this ( populationLimit , ( populationLimit ) null ) ; }
Distance : 7

42
Tree	{ this . populationLimit = new void [] { elitismRate } ; }
Code	{ this . populationLimit = new void [] { elitismRate } ; }
Distance : 10

43
Tree	{ super ( LocalizedFormats.FAILED_FRACTION_CONVERSION , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Code	{ super ( LocalizedFormats.FAILED_FRACTION_CONVERSION , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Distance : 11

44
Tree	{ continue; this . chromosomes = populationLimit ; this . elitismRate = elitismRate ; }
Code	{ continue; this . chromosomes = populationLimit ; this . elitismRate = elitismRate ; }
Distance : 9

45
Tree	{ super ( populationLimit , populationLimit ) ; }
Code	{ super ( populationLimit , populationLimit ) ; }
Distance : 6

46
Tree	{ this . chromosomes = new boolean [] { populationLimit } ; }
Code	{ this . chromosomes = new boolean [] { populationLimit } ; }
Distance : 10

47
Tree	{ super ( Sum , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Code	{ super ( Sum , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Distance : 11

48
Tree	{ this ( chromosomes , ( elitismRate ) null ) ; }
Code	{ this ( chromosomes , ( elitismRate ) null ) ; }
Distance : 7

49
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

50
Tree	{ this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ this . populationLimit = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 10

51
Tree	{ super ( Coordinates3D.PLUS_K , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Code	{ super ( Coordinates3D.PLUS_K , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Distance : 11

52
Tree	{ return; this . chromosomes = populationLimit ; this . elitismRate = elitismRate ; }
Code	{ return; this . chromosomes = populationLimit ; this . elitismRate = elitismRate ; }
Distance : 9

53
Tree	{ super ( chromosomes , elitismRate ) ; this . populationLimit = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . populationLimit = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 17

54
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new LUDecompositionImpl [ NUMBER_CONSTANT ] ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new LUDecompositionImpl [ NUMBER_CONSTANT ] ; }
Distance : 9

55
Tree	{ this . chromosomes = new long [] { elitismRate } ; }
Code	{ this . chromosomes = new long [] { elitismRate } ; }
Distance : 9

56
Tree	{ this . elitismRate = elitismRate ; }
Code	{ this . elitismRate = elitismRate ; }
Distance : 10

57
Tree	{ this . populationLimit = populationLimit ; elitismRate () ; }
Code	{ this . populationLimit = populationLimit ; elitismRate () ; }
Distance : 8

58
Tree	{ this . chromosomes = populationLimit ; this . elitismRate = elitismRate ; }
Code	{ this . chromosomes = populationLimit ; this . elitismRate = elitismRate ; }
Distance : 8

59
Tree	{ super ( chromosomes , populationLimit , populationLimit ) ; this . elitismRate = new double [] { elitismRate } ; }
Code	{ super ( chromosomes , populationLimit , populationLimit ) ; this . elitismRate = new double [] { elitismRate } ; }
Distance : 11

60
Tree	{ super ( chromosomes , elitismRate ) ; populationLimit = NUMBER_CONSTANT / elitismRate ; }
Code	{ super ( chromosomes , elitismRate ) ; populationLimit = NUMBER_CONSTANT / elitismRate ; }
Distance : 6

61
Tree	{ super ( chromosomes , elitismRate ) ; this . populationLimit = new double [] { elitismRate } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . populationLimit = new double [] { elitismRate } ; }
Distance : 10

62
Tree	{ this ( populationLimit , populationLimit , populationLimit , elitismRate , false ) ; }
Code	{ this ( populationLimit , populationLimit , populationLimit , elitismRate , false ) ; }
Distance : 8

63
Tree	{ super ( chromosomes , elitismRate ) ; this . populationLimit = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . populationLimit = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 13

64
Tree	{ this ( new ComplexFormat ( chromosomes ) , elitismRate ) ; }
Code	{ this ( new ComplexFormat ( chromosomes ) , elitismRate ) ; }
Distance : 8

65
Tree	{ super ( chromosomes , elitismRate , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Code	{ super ( chromosomes , elitismRate , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Distance : 12

66
Tree	{ super ( x.length , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Code	{ super ( x.length , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Distance : 11

67
Tree	{ this ( chromosomes , populationLimit , null ) ; }
Code	{ this ( chromosomes , populationLimit , null ) ; }
Distance : 6

68
Tree	{ this ( chromosomes , ( populationLimit ) null ) ; }
Code	{ this ( chromosomes , ( populationLimit ) null ) ; }
Distance : 6

69
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new float [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new float [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 16

70
Tree	{ this . elitismRate = elitismRate ; elitismRate () ; }
Code	{ this . elitismRate = elitismRate ; elitismRate () ; }
Distance : 9

71
Tree	{ this ( new TiesStrategy.RANDOM ( chromosomes ) , elitismRate ) ; }
Code	{ this ( new TiesStrategy.RANDOM ( chromosomes ) , elitismRate ) ; }
Distance : 8

72
Tree	{ super ( chromosomes , elitismRate , populationLimit ) ; this . elitismRate = new double [] { elitismRate } ; }
Code	{ super ( chromosomes , elitismRate , populationLimit ) ; this . elitismRate = new double [] { elitismRate } ; }
Distance : 11

73
Tree	{ this . chromosomes = new boolean [] { elitismRate } ; }
Code	{ this . chromosomes = new boolean [] { elitismRate } ; }
Distance : 9

74
Tree	{ this . elitismRate = chromosomes ; }
Code	{ this . elitismRate = chromosomes ; }
Distance : 11

75
Tree	{ super ( chromosomes ) ; this . populationLimit = new int [] { elitismRate } ; }
Code	{ super ( chromosomes ) ; this . populationLimit = new int [] { elitismRate } ; }
Distance : 10

76
Tree	{ this ( Boolean.FALSE , elitismRate ) ; }
Code	{ this ( Boolean.FALSE , elitismRate ) ; }
Distance : 7

77
Tree	{ super ( chromosomes , populationLimit ) ; }
Code	{ super ( chromosomes , populationLimit ) ; }
Distance : 5

78
Tree	{ super ( chromosomes . populationLimit () , elitismRate ) ; this . elitismRate = new byte [] { elitismRate } ; }
Code	{ super ( chromosomes . populationLimit () , elitismRate ) ; this . elitismRate = new byte [] { elitismRate } ; }
Distance : 13

79
Tree	{ super ( LocalizedFormats.EVALUATION_FAILED , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Code	{ super ( LocalizedFormats.EVALUATION_FAILED , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Distance : 11

80
Tree	{ super ( chromosomes . populationLimit () , elitismRate ) ; this . elitismRate = new int [] { elitismRate } ; }
Code	{ super ( chromosomes . populationLimit () , elitismRate ) ; this . elitismRate = new int [] { elitismRate } ; }
Distance : 13

81
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new double [] { populationLimit } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new double [] { populationLimit } ; }
Distance : 10

82
Tree	{ this ( chromosomes , ( populationLimit ) continue; ) ; }
Code	{ this ( chromosomes , ( populationLimit ) continue; ) ; }
Distance : 6

83
Tree	{ this ( chromosomes , ( chromosomes ) continue; ) ; }
Code	{ this ( chromosomes , ( chromosomes ) continue; ) ; }
Distance : 7

84
Tree	{ super ( Order.MINUS_SUB_PLUS , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Code	{ super ( Order.MINUS_SUB_PLUS , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Distance : 11

85
Tree	{ this ( new nextZipf ( chromosomes ) , elitismRate ) ; }
Code	{ this ( new nextZipf ( chromosomes ) , elitismRate ) ; }
Distance : 8

86
Tree	{ this ( chromosomes , elitismRate ) ; }
Code	{ this ( chromosomes , elitismRate ) ; }
Distance : 6

87
Tree	{ this ( elitismRate , false ) ; }
Code	{ this ( elitismRate , false ) ; }
Distance : 8

88
Tree	{ this ( chromosomes , elitismRate , populationLimit , elitismRate , false ) ; }
Code	{ this ( chromosomes , elitismRate , populationLimit , elitismRate , false ) ; }
Distance : 8

89
Tree	{ super ( chromosomes , elitismRate ) ; elitismRate = NUMBER_CONSTANT / elitismRate ; }
Code	{ super ( chromosomes , elitismRate ) ; elitismRate = NUMBER_CONSTANT / elitismRate ; }
Distance : 6

90
Tree	{ super ( LocalizedFormats.MAX_COUNT_EXCEEDED , elitismRate ) ; this . elitismRate = elitismRate ; }
Code	{ super ( LocalizedFormats.MAX_COUNT_EXCEEDED , elitismRate ) ; this . elitismRate = elitismRate ; }
Distance : 6

91
Tree	{ super ( chromosomes ) ; this . elitismRate = new double [] { elitismRate } ; }
Code	{ super ( chromosomes ) ; this . elitismRate = new double [] { elitismRate } ; }
Distance : 11

92
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new elitismRate [ NUMBER_CONSTANT ] ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new elitismRate [ NUMBER_CONSTANT ] ; }
Distance : 9

93
Tree	{ this ( projected , elitismRate ) ; }
Code	{ this ( projected , elitismRate ) ; }
Distance : 7

94
Tree	{ super ( chromosomes , populationLimit ) ; elitismRate = NUMBER_CONSTANT / elitismRate ; }
Code	{ super ( chromosomes , populationLimit ) ; elitismRate = NUMBER_CONSTANT / elitismRate ; }
Distance : 5

95
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new OutOfRangeException [ NUMBER_CONSTANT ] ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new OutOfRangeException [ NUMBER_CONSTANT ] ; }
Distance : 9

96
Tree	{ this ( chromosomes , chromosomes , true ) ; }
Code	{ this ( chromosomes , chromosomes , true ) ; }
Distance : 7

97
Tree	{ super ( chromosomes . populationLimit () , elitismRate ) ; this . elitismRate = new float [] { elitismRate } ; }
Code	{ super ( chromosomes . populationLimit () , elitismRate ) ; this . elitismRate = new float [] { elitismRate } ; }
Distance : 13

98
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new beta [] getOrderOfRegressors ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new beta [] getOrderOfRegressors ; }
Distance : 8

99
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new void [] { elitismRate } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new void [] { elitismRate } ; }
Distance : 10

100
Tree	{ super ( chromosomes ) ; this . elitismRate = new byte [] { populationLimit } ; }
Code	{ super ( chromosomes ) ; this . elitismRate = new byte [] { populationLimit } ; }
Distance : 11

101
Tree	{ super ( chromosomes , populationLimit ) ; populationLimit = NUMBER_CONSTANT / elitismRate ; }
Code	{ super ( chromosomes , populationLimit ) ; populationLimit = NUMBER_CONSTANT / elitismRate ; }
Distance : 5

102
Tree	{ this ( Coordinates3D.PLUS_K , elitismRate ) ; }
Code	{ this ( Coordinates3D.PLUS_K , elitismRate ) ; }
Distance : 7

103
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 12

104
Tree	{ this . chromosomes = new void [] { populationLimit } ; }
Code	{ this . chromosomes = new void [] { populationLimit } ; }
Distance : 10

105
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new beta [] countSum2 ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new beta [] countSum2 ; }
Distance : 8

106
Tree	{ this ( chromosomes , populationLimit , elitismRate , elitismRate , false ) ; }
Code	{ this ( chromosomes , populationLimit , elitismRate , elitismRate , false ) ; }
Distance : 7

107
Tree	{ this . chromosomes = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ this . chromosomes = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 9

108
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; if }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; if }
Distance : 11

109
Tree	{ this ( Boolean.TRUE , elitismRate ) ; }
Code	{ this ( Boolean.TRUE , elitismRate ) ; }
Distance : 7

110
Tree	{ super ( SimplexSolver , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Code	{ super ( SimplexSolver , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Distance : 11

111
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new int [] { elitismRate } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new int [] { elitismRate } ; }
Distance : 10

112
Tree	{ this ( elitismRate , populationLimit , false ) ; }
Code	{ this ( elitismRate , populationLimit , false ) ; }
Distance : 7

113
Tree	{ this . chromosomes = new float [] { elitismRate } ; }
Code	{ this . chromosomes = new float [] { elitismRate } ; }
Distance : 9

114
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new LUDecompositionImpl [] originalData ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new LUDecompositionImpl [] originalData ; }
Distance : 8

115
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

116
Tree	{ this ( populationLimit , populationLimit , true ) ; }
Code	{ this ( populationLimit , populationLimit , true ) ; }
Distance : 7

117
Tree	{ super ( chromosomes , elitismRate ) ; this . chromosomes = elitismRate ; }
Code	{ super ( chromosomes , elitismRate ) ; this . chromosomes = elitismRate ; }
Distance : 6

118
Tree	{ this ( populationLimit , ( chromosomes ) null ) ; }
Code	{ this ( populationLimit , ( chromosomes ) null ) ; }
Distance : 8

119
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new long [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new long [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 12

120
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { elitismRate } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { elitismRate } ; }
Distance : 9

121
Tree	{ super(); this . chromosomes = populationLimit ; this . populationLimit = elitismRate ; }
Code	{ super(); this . chromosomes = populationLimit ; this . populationLimit = elitismRate ; }
Distance : 10

122
Tree	{ super ( chromosomes , elitismRate ) ; this . populationLimit = elitismRate ; }
Code	{ super ( chromosomes , elitismRate ) ; this . populationLimit = elitismRate ; }
Distance : 6

123
Tree	{ this ( new MullerSolver2 ( chromosomes ) , elitismRate ) ; }
Code	{ this ( new MullerSolver2 ( chromosomes ) , elitismRate ) ; }
Distance : 8

124
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new byte [] { elitismRate } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new byte [] { elitismRate } ; }
Distance : 10

125
Tree	{ super ( chromosomes , elitismRate , populationLimit ) ; this . elitismRate = new long [] { elitismRate } ; }
Code	{ super ( chromosomes , elitismRate , populationLimit ) ; this . elitismRate = new long [] { elitismRate } ; }
Distance : 11

126
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = elitismRate ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = elitismRate ; }
Distance : 5

127
Tree	{ this ( elitismRate , true ) ; }
Code	{ this ( elitismRate , true ) ; }
Distance : 8

128
Tree	{ this ( new populationLimit ( chromosomes ) , elitismRate ) ; }
Code	{ this ( new populationLimit ( chromosomes ) , elitismRate ) ; }
Distance : 7

129
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; scale }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; scale }
Distance : 11

130
Tree	{ super ( populationLimit , elitismRate ) ; this . elitismRate = elitismRate ; }
Code	{ super ( populationLimit , elitismRate ) ; this . elitismRate = elitismRate ; }
Distance : 6

131
Tree	{ super ( chromosomes . , () , elitismRate ) ; this . elitismRate = new long [] { elitismRate } ; }
Code	{ super ( chromosomes . , () , elitismRate ) ; this . elitismRate = new long [] { elitismRate } ; }
Distance : 13

132
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new void [] { elitismRate } ; if }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new void [] { elitismRate } ; if }
Distance : 11

133
Tree	{ super ( getOrderOfRegressors , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Code	{ super ( getOrderOfRegressors , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Distance : 11

134
Tree	{ this . chromosomes = chromosomes ; }
Code	{ this . chromosomes = chromosomes ; }
Distance : 10

135
Tree	{ super(); this . populationLimit = populationLimit ; this . elitismRate = elitismRate ; }
Code	{ super(); this . populationLimit = populationLimit ; this . elitismRate = elitismRate ; }
Distance : 10

136
Tree	{ super ( LocalizedFormats.FAILED_FRACTION_CONVERSION , elitismRate ) ; this . elitismRate = elitismRate ; }
Code	{ super ( LocalizedFormats.FAILED_FRACTION_CONVERSION , elitismRate ) ; this . elitismRate = elitismRate ; }
Distance : 6

137
Tree	{ this ( chromosomes , populationLimit , chromosomes , elitismRate , false ) ; }
Code	{ this ( chromosomes , populationLimit , chromosomes , elitismRate , false ) ; }
Distance : 7

138
Tree	{ this ( Order.MINUS_SUB_PLUS , elitismRate ) ; }
Code	{ this ( Order.MINUS_SUB_PLUS , elitismRate ) ; }
Distance : 7

139
Tree	{ this ( new SparseFieldMatrix ( chromosomes ) , elitismRate ) ; }
Code	{ this ( new SparseFieldMatrix ( chromosomes ) , elitismRate ) ; }
Distance : 8

140
Tree	{ this . populationLimit = chromosomes ; }
Code	{ this . populationLimit = chromosomes ; }
Distance : 10

141
Tree	{ super ( chromosomes ) ; this . populationLimit = new double [] { elitismRate } ; }
Code	{ super ( chromosomes ) ; this . populationLimit = new double [] { elitismRate } ; }
Distance : 10

142
Tree	{ super ( Sum , elitismRate ) ; this . elitismRate = elitismRate ; }
Code	{ super ( Sum , elitismRate ) ; this . elitismRate = elitismRate ; }
Distance : 6

143
Tree	{ this ( chromosomes , populationLimit , elitismRate , elitismRate , true ) ; }
Code	{ this ( chromosomes , populationLimit , elitismRate , elitismRate , true ) ; }
Distance : 7

144
Tree	{ this . chromosomes = new byte [] { elitismRate } ; }
Code	{ this . chromosomes = new byte [] { elitismRate } ; }
Distance : 9

145
Tree	{ this . chromosomes = elitismRate ; this . elitismRate = populationLimit ; }
Code	{ this . chromosomes = elitismRate ; this . elitismRate = populationLimit ; }
Distance : 9

146
Tree	{ this ( populationLimit , populationLimit , null ) ; }
Code	{ this ( populationLimit , populationLimit , null ) ; }
Distance : 7

147
Tree	{ this ( chromosomes , elitismRate , super(); ) ; }
Code	{ this ( chromosomes , elitismRate , super(); ) ; }
Distance : 7

148
Tree	{ this ( chromosomes , elitismRate , populationLimit , elitismRate , true ) ; }
Code	{ this ( chromosomes , elitismRate , populationLimit , elitismRate , true ) ; }
Distance : 8

149
Tree	{ super(); this . chromosomes = populationLimit ; this . elitismRate = populationLimit ; }
Code	{ super(); this . chromosomes = populationLimit ; this . elitismRate = populationLimit ; }
Distance : 9

150
Tree	{ super ( chromosomes ) ; this . elitismRate = new float [] { elitismRate } ; }
Code	{ super ( chromosomes ) ; this . elitismRate = new float [] { elitismRate } ; }
Distance : 11

151
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new void [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new void [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 16

152
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 12

153
Tree	{ this ( chromosomes , populationLimit , populationLimit ) ; }
Code	{ this ( chromosomes , populationLimit , populationLimit ) ; }
Distance : 6

154
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 15

155
Tree	{ this . chromosomes = elitismRate ; this . populationLimit = elitismRate ; }
Code	{ this . chromosomes = elitismRate ; this . populationLimit = elitismRate ; }
Distance : 10

156
Tree	{ super ( chromosomes , populationLimit ) ; elitismRate = NUMBER_CONSTANT / populationLimit ; }
Code	{ super ( chromosomes , populationLimit ) ; elitismRate = NUMBER_CONSTANT / populationLimit ; }
Distance : 5

157
Tree	{ this . chromosomes = elitismRate ; this . chromosomes = elitismRate ; }
Code	{ this . chromosomes = elitismRate ; this . chromosomes = elitismRate ; }
Distance : 10

158
Tree	{ this ( chromosomes , populationLimit , populationLimit , elitismRate , false ) ; }
Code	{ this ( chromosomes , populationLimit , populationLimit , elitismRate , false ) ; }
Distance : 7

159
Tree	{ super ( LocalizedFormats.MAX_COUNT_EXCEEDED , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Code	{ super ( LocalizedFormats.MAX_COUNT_EXCEEDED , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Distance : 11

160
Tree	{ super ( chromosomes , elitismRate , populationLimit ) ; this . elitismRate = new int [] { elitismRate } ; }
Code	{ super ( chromosomes , elitismRate , populationLimit ) ; this . elitismRate = new int [] { elitismRate } ; }
Distance : 11

161
Tree	{ null this . chromosomes = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ null this . chromosomes = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 10

162
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new float [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new float [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 12

163
Tree	{ super ( chromosomes ) ; this . elitismRate = new int [] { elitismRate } ; }
Code	{ super ( chromosomes ) ; this . elitismRate = new int [] { elitismRate } ; }
Distance : 11

164
Tree	{ super ( chromosomes , elitismRate ) ; elitismRate = NUMBER_CONSTANT / populationLimit ; }
Code	{ super ( chromosomes , elitismRate ) ; elitismRate = NUMBER_CONSTANT / populationLimit ; }
Distance : 6

165
Tree	{ this . populationLimit = populationLimit ; }
Code	{ this . populationLimit = populationLimit ; }
Distance : 10

166
Tree	{ super ( chromosomes , elitismRate ) ; this . populationLimit = elitismRate ; }
Code	{ super ( chromosomes , elitismRate ) ; this . populationLimit = elitismRate ; }
Distance : 6

167
Tree	{ this . elitismRate = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ this . elitismRate = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 10

168
Tree	{ this ( chromosomes , false ) ; } point
Code	{ this ( chromosomes , false ) ; } point
Distance : 8

169
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 16

170
Tree	{ this ( new LegendreGaussIntegrator ( chromosomes ) , elitismRate ) ; }
Code	{ this ( new LegendreGaussIntegrator ( chromosomes ) , elitismRate ) ; }
Distance : 8

171
Tree	{ this ( chromosomes , elitismRate , null ) ; }
Code	{ this ( chromosomes , elitismRate , null ) ; }
Distance : 7

172
Tree	{ super ( chromosomes , elitismRate ) ; this . populationLimit = new byte [] { elitismRate } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . populationLimit = new byte [] { elitismRate } ; }
Distance : 10

173
Tree	{ super ( chromosomes ) ; this . elitismRate = new void [] { elitismRate } ; }
Code	{ super ( chromosomes ) ; this . elitismRate = new void [] { elitismRate } ; }
Distance : 11

174
Tree	{ this ( new setWindowSize ( chromosomes ) , elitismRate ) ; }
Code	{ this ( new setWindowSize ( chromosomes ) , elitismRate ) ; }
Distance : 8

175
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new byte [] { populationLimit } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new byte [] { populationLimit } ; }
Distance : 10

176
Tree	{ super(); this . chromosomes = populationLimit ; this . elitismRate = elitismRate ; }
Code	{ super(); this . chromosomes = populationLimit ; this . elitismRate = elitismRate ; }
Distance : 9

177
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = populationLimit ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = populationLimit ; }
Distance : 4

178
Tree	{ super ( chromosomes , elitismRate , populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; }
Code	{ super ( chromosomes , elitismRate , populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; }
Distance : 11

179
Tree	{ this ( populationLimit , false ) ; }
Code	{ this ( populationLimit , false ) ; }
Distance : 8

180
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new void [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new void [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 12

181
Tree	{ this ( chromosomes , populationLimit , super(); ) ; }
Code	{ this ( chromosomes , populationLimit , super(); ) ; }
Distance : 6

182
Tree	{ super ( chromosomes , populationLimit ) ; this . populationLimit = elitismRate ; }
Code	{ super ( chromosomes , populationLimit ) ; this . populationLimit = elitismRate ; }
Distance : 5

183
Tree	{ super ( chromosomes , elitismRate ) ; this . populationLimit = populationLimit ; }
Code	{ super ( chromosomes , elitismRate ) ; this . populationLimit = populationLimit ; }
Distance : 6

184
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new int [] { elitismRate } ; if }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new int [] { elitismRate } ; if }
Distance : 11

185
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 16

186
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = elitismRate ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = elitismRate ; }
Distance : 4

187
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; Cartesian3D }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; Cartesian3D }
Distance : 11

188
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; *= }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; *= }
Distance : 11

189
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; else }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; else }
Distance : 11

190
Tree	{ super ( chromosomes ) ; this . elitismRate = new double [] { populationLimit } ; }
Code	{ super ( chromosomes ) ; this . elitismRate = new double [] { populationLimit } ; }
Distance : 11

191
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new byte [] { elitismRate } ; if }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new byte [] { elitismRate } ; if }
Distance : 11

192
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new float [] { elitismRate } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new float [] { elitismRate } ; }
Distance : 10

193
Tree	{ this . chromosomes = new int [] { elitismRate } ; }
Code	{ this . chromosomes = new int [] { elitismRate } ; }
Distance : 9

194
Tree	{ this . populationLimit = elitismRate ; }
Code	{ this . populationLimit = elitismRate ; }
Distance : 9

195
Tree	{ this ( chromosomes , elitismRate , true ) ; }
Code	{ this ( chromosomes , elitismRate , true ) ; }
Distance : 7

196
Tree	{ this . chromosomes = populationLimit ; }
Code	{ this . chromosomes = populationLimit ; }
Distance : 9

197
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 16

198
Tree	{ super ( getOrderOfRegressors , elitismRate ) ; this . elitismRate = elitismRate ; }
Code	{ super ( getOrderOfRegressors , elitismRate ) ; this . elitismRate = elitismRate ; }
Distance : 6

199
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; ret }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; ret }
Distance : 11

200
Tree	{ super ( chromosomes , elitismRate ) ; this . populationLimit = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . populationLimit = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 17

201
Tree	{ super ( chromosomes , elitismRate ) ; this . populationLimit = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . populationLimit = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 13

202
Tree	{ super ( chromosomes , elitismRate , populationLimit ) ; this . elitismRate = new void [] { elitismRate } ; }
Code	{ super ( chromosomes , elitismRate , populationLimit ) ; this . elitismRate = new void [] { elitismRate } ; }
Distance : 11

203
Tree	{ this . chromosomes = new void [] { elitismRate } ; }
Code	{ this . chromosomes = new void [] { elitismRate } ; }
Distance : 9

204
Tree	{ super ( populationLimit , elitismRate ) ; }
Code	{ super ( populationLimit , elitismRate ) ; }
Distance : 6

205
Tree	{ super ( chromosomes , elitismRate ) ; populationLimit = NUMBER_CONSTANT / populationLimit ; }
Code	{ super ( chromosomes , elitismRate ) ; populationLimit = NUMBER_CONSTANT / populationLimit ; }
Distance : 6

206
Tree	{ break; this . chromosomes = populationLimit ; this . elitismRate = elitismRate ; }
Code	{ break; this . chromosomes = populationLimit ; this . elitismRate = elitismRate ; }
Distance : 9

207
Tree	{ super ( chromosomes , elitismRate , populationLimit ) ; this . populationLimit = new double [] { elitismRate } ; }
Code	{ super ( chromosomes , elitismRate , populationLimit ) ; this . populationLimit = new double [] { elitismRate } ; }
Distance : 11

208
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = elitismRate ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = elitismRate ; }
Distance : 5

209
Tree	{ this ( new remove ( chromosomes ) , elitismRate ) ; }
Code	{ this ( new remove ( chromosomes ) , elitismRate ) ; }
Distance : 8

210
Tree	{ this ( chromosomes , populationLimit , true ) ; }
Code	{ this ( chromosomes , populationLimit , true ) ; }
Distance : 6

211
Tree	{ this ( chromosomes , false ) ; } UnivariateRealFunction
Code	{ this ( chromosomes , false ) ; } UnivariateRealFunction
Distance : 8

212
Tree	{ super ( Order.MINUS_SUB_PLUS , elitismRate ) ; this . elitismRate = elitismRate ; }
Code	{ super ( Order.MINUS_SUB_PLUS , elitismRate ) ; this . elitismRate = elitismRate ; }
Distance : 6

213
Tree	{ super ( chromosomes , elitismRate , populationLimit ) ; this . elitismRate = new byte [] { elitismRate } ; }
Code	{ super ( chromosomes , elitismRate , populationLimit ) ; this . elitismRate = new byte [] { elitismRate } ; }
Distance : 11

214
Tree	{ this . chromosomes = elitismRate ; } v.length
Code	{ this . chromosomes = elitismRate ; } v.length
Distance : 10

215
Tree	{ super ( chromosomes . super () , elitismRate ) ; this . elitismRate = new void [] { elitismRate } ; }
Code	{ super ( chromosomes . super () , elitismRate ) ; this . elitismRate = new void [] { elitismRate } ; }
Distance : 13

216
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new byte [] { elitismRate } ; else }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new byte [] { elitismRate } ; else }
Distance : 11

217
Tree	{ this ( chromosomes , populationLimit , return; ) ; }
Code	{ this ( chromosomes , populationLimit , return; ) ; }
Distance : 6

218
Tree	{ this . chromosomes = elitismRate ; elitismRate () ; } v.length
Code	{ this . chromosomes = elitismRate ; elitismRate () ; } v.length
Distance : 9

219
Tree	{ super ( SimplexSolver , elitismRate ) ; this . elitismRate = elitismRate ; }
Code	{ super ( SimplexSolver , elitismRate ) ; this . elitismRate = elitismRate ; }
Distance : 6

220
Tree	{ this ( chromosomes , populationLimit , break; ) ; }
Code	{ this ( chromosomes , populationLimit , break; ) ; }
Distance : 6

221
Tree	{ this . chromosomes = elitismRate ; . () ; }
Code	{ this . chromosomes = elitismRate ; . () ; }
Distance : 9

222
Tree	{ super ( LocalizedFormats.EVALUATION_FAILED , elitismRate ) ; this . elitismRate = elitismRate ; }
Code	{ super ( LocalizedFormats.EVALUATION_FAILED , elitismRate ) ; this . elitismRate = elitismRate ; }
Distance : 6

223
Tree	{ super ( Coordinates3D.PLUS_K , elitismRate ) ; this . elitismRate = elitismRate ; }
Code	{ super ( Coordinates3D.PLUS_K , elitismRate ) ; this . elitismRate = elitismRate ; }
Distance : 6

224
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new LocalizedFormats.ROOTS_OF_UNITY_NOT_COMPUTED_YET [ NUMBER_CONSTANT ] ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new LocalizedFormats.ROOTS_OF_UNITY_NOT_COMPUTED_YET [ NUMBER_CONSTANT ] ; }
Distance : 9

225
Tree	{ super ( elitismRate , chromosomes ) ; }
Code	{ super ( elitismRate , chromosomes ) ; }
Distance : 7

226
Tree	{ super ( chromosomes ) ; this . populationLimit = new byte [] { elitismRate } ; }
Code	{ super ( chromosomes ) ; this . populationLimit = new byte [] { elitismRate } ; }
Distance : 10

227
Tree	{ super ( chromosomes , elitismRate ) ; } v.length
Code	{ super ( chromosomes , elitismRate ) ; } v.length
Distance : 6

228
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new eDA [ NUMBER_CONSTANT ] ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new eDA [ NUMBER_CONSTANT ] ; }
Distance : 9

229
Tree	{ this . populationLimit = chromosomes ; elitismRate () ; }
Code	{ this . populationLimit = chromosomes ; elitismRate () ; }
Distance : 9

230
Tree	{ this . elitismRate = chromosomes ; elitismRate () ; }
Code	{ this . elitismRate = chromosomes ; elitismRate () ; }
Distance : 9

231
Tree	{ this ( new LUDecompositionImpl ( chromosomes ) , elitismRate ) ; }
Code	{ this ( new LUDecompositionImpl ( chromosomes ) , elitismRate ) ; }
Distance : 8

232
Tree	{ super ( populationLimit , elitismRate ) ; this . elitismRate = elitismRate ; }
Code	{ super ( populationLimit , elitismRate ) ; this . elitismRate = elitismRate ; }
Distance : 6

233
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new LUDecompositionImpl [] minExpectedCount ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new LUDecompositionImpl [] minExpectedCount ; }
Distance : 8

234
Tree	{ super ( elitismRate , elitismRate ) ; }
Code	{ super ( elitismRate , elitismRate ) ; }
Distance : 6

235
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new beta [] Euclidean1D ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new beta [] Euclidean1D ; }
Distance : 8

236
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new elitismRate [] scale.length ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new elitismRate [] scale.length ; }
Distance : 8

237
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = elitismRate ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = elitismRate ; }
Distance : 5

238
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = populationLimit ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = populationLimit ; }
Distance : 5

239
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = elitismRate ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = elitismRate ; }
Distance : 4

240
Tree	{ this ( chromosomes , ( chromosomes ) null ) ; }
Code	{ this ( chromosomes , ( chromosomes ) null ) ; }
Distance : 7

241
Tree	{ super ( chromosomes , chromosomes ) ; }
Code	{ super ( chromosomes , chromosomes ) ; }
Distance : 6

242
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new LocalizedFormats.NULL_COVARIANCE_MATRIX [ NUMBER_CONSTANT ] ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new LocalizedFormats.NULL_COVARIANCE_MATRIX [ NUMBER_CONSTANT ] ; }
Distance : 9

243
Tree	{ this ( chromosomes , false ) ; } n
Code	{ this ( chromosomes , false ) ; } n
Distance : 8

244
Tree	{ this ( populationLimit , elitismRate , false ) ; }
Code	{ this ( populationLimit , elitismRate , false ) ; }
Distance : 8

245
Tree	{ this ( chromosomes , ( populationLimit ) super(); ) ; }
Code	{ this ( chromosomes , ( populationLimit ) super(); ) ; }
Distance : 6

246
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new double [] { elitismRate } ; }
Distance : 10

247
Tree	{ super ( chromosomes , populationLimit ) ; this . populationLimit = elitismRate ; }
Code	{ super ( chromosomes , populationLimit ) ; this . populationLimit = elitismRate ; }
Distance : 5

248
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new beta [ NUMBER_CONSTANT ] ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new beta [ NUMBER_CONSTANT ] ; }
Distance : 9

249
Tree	{ super ( chromosomes , elitismRate ) ; this . chromosomes = elitismRate ; }
Code	{ super ( chromosomes , elitismRate ) ; this . chromosomes = elitismRate ; }
Distance : 6

250
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new CopyOnWriteArrayList [ NUMBER_CONSTANT ] ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new CopyOnWriteArrayList [ NUMBER_CONSTANT ] ; }
Distance : 9

251
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new beta [] originalData ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = new beta [] originalData ; }
Distance : 8

252
Tree	{ super ( chromosomes , elitismRate ) ; this . populationLimit = populationLimit ; }
Code	{ super ( chromosomes , elitismRate ) ; this . populationLimit = populationLimit ; }
Distance : 6

253
Tree	{ this ( chromosomes , ( populationLimit ) break; ) ; }
Code	{ this ( chromosomes , ( populationLimit ) break; ) ; }
Distance : 6

254
Tree	{ this ( chromosomes , false ) ; } Math
Code	{ this ( chromosomes , false ) ; } Math
Distance : 8

255
Tree	{ this ( chromosomes , ( populationLimit ) return; ) ; }
Code	{ this ( chromosomes , ( populationLimit ) return; ) ; }
Distance : 6

256
Tree	{ super ( chromosomes , elitismRate ) ; chromosomes = NUMBER_CONSTANT / elitismRate ; }
Code	{ super ( chromosomes , elitismRate ) ; chromosomes = NUMBER_CONSTANT / elitismRate ; }
Distance : 6

257
Tree	{ this . populationLimit = elitismRate ; this . populationLimit = elitismRate ; }
Code	{ this . populationLimit = elitismRate ; this . populationLimit = elitismRate ; }
Distance : 11

258
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = populationLimit ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = populationLimit ; }
Distance : 4

259
Tree	{ this . chromosomes = populationLimit ; this . populationLimit = elitismRate ; }
Code	{ this . chromosomes = populationLimit ; this . populationLimit = elitismRate ; }
Distance : 9

260
Tree	{ super ( elitismRate , elitismRate ) ; elitismRate = NUMBER_CONSTANT / elitismRate ; }
Code	{ super ( elitismRate , elitismRate ) ; elitismRate = NUMBER_CONSTANT / elitismRate ; }
Distance : 7

261
Tree	{ super ( chromosomes . super () , elitismRate ) ; this . populationLimit = new byte [] { elitismRate } ; }
Code	{ super ( chromosomes . super () , elitismRate ) ; this . populationLimit = new byte [] { elitismRate } ; }
Distance : 13

262
Tree	{ this ( chromosomes , chromosomes , false ) ; }
Code	{ this ( chromosomes , chromosomes , false ) ; }
Distance : 7

263
Tree	{ super(); this . chromosomes = elitismRate ; this . elitismRate = elitismRate ; }
Code	{ super(); this . chromosomes = elitismRate ; this . elitismRate = elitismRate ; }
Distance : 10

264
Tree	{ super ( elitismRate , elitismRate ) ; this . elitismRate = elitismRate ; }
Code	{ super ( elitismRate , elitismRate ) ; this . elitismRate = elitismRate ; }
Distance : 6

265
Tree	{ this . chromosomes = elitismRate ; this . populationLimit = populationLimit ; }
Code	{ this . chromosomes = elitismRate ; this . populationLimit = populationLimit ; }
Distance : 10

266
Tree	{ this . populationLimit = elitismRate ; . () ; }
Code	{ this . populationLimit = elitismRate ; . () ; }
Distance : 10

267
Tree	{ super ( elitismRate , elitismRate ) ; this . elitismRate = elitismRate ; }
Code	{ super ( elitismRate , elitismRate ) ; this . elitismRate = elitismRate ; }
Distance : 6

268
Tree	{ super ( chromosomes . { () , elitismRate ) ; this . populationLimit = new double [] { elitismRate } ; }
Code	{ super ( chromosomes . { () , elitismRate ) ; this . populationLimit = new double [] { elitismRate } ; }
Distance : 13

269
Tree	{ this . elitismRate = populationLimit ; . () ; }
Code	{ this . elitismRate = populationLimit ; . () ; }
Distance : 9

========================================================================


========================================================================
Example Number: 22
Parent Code is: 
{ return chromosomes . iterator () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return getChromosomes () . iterator () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (800{val=chromosomes}) (235{val=.}) (802{val=iterator}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=getChromosomes}) (216{val=()})) (235{val=.}) (802{val=iterator}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/34/parent/src_main_java_org_apache_commons_math3_genetics_ListPopulation.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 420
Wrong
========================================================================
False

0
Tree	{ return chromosomes . iterator () ; }
Code	{ return chromosomes . iterator () ; }
Distance : 2

1
Tree	{ return chromosomes ; }
Code	{ return chromosomes ; }
Distance : 5

2
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 5

3
Tree	{ return Order.MINUS_SUB_PLUS ; }
Code	{ return Order.MINUS_SUB_PLUS ; }
Distance : 5

4
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; }
Distance : 9

5
Tree	{ return chromosomes . iterator () - NUMBER_CONSTANT ; }
Code	{ return chromosomes . iterator () - NUMBER_CONSTANT ; }
Distance : 4

6
Tree	{ return true ; }
Code	{ return true ; }
Distance : 5

7
Tree	{ return iterator () ; }
Code	{ return iterator () ; }
Distance : 3

8
Tree	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } assertEquals
Code	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } assertEquals
Distance : 5

9
Tree	{ return chromosomes ; } field
Code	{ return chromosomes ; } field
Distance : 6

10
Tree	{ return chromosomes . iterator () && chromosomes . iterator () ; } UnivariateRealFunction
Code	{ return chromosomes . iterator () && chromosomes . iterator () ; } UnivariateRealFunction
Distance : 6

11
Tree	{ return chromosomes . iterator () && chromosomes . iterator () ; } point
Code	{ return chromosomes . iterator () && chromosomes . iterator () ; } point
Distance : 6

12
Tree	{ return chromosomes . iterator () && chromosomes . iterator () ; } MatrixUtils
Code	{ return chromosomes . iterator () && chromosomes . iterator () ; } MatrixUtils
Distance : 6

13
Tree	{ return chromosomes . iterator () && chromosomes . iterator () ; } Array2DRowFieldMatrix
Code	{ return chromosomes . iterator () && chromosomes . iterator () ; } Array2DRowFieldMatrix
Distance : 6

14
Tree	{ return chromosomes ; } data
Code	{ return chromosomes ; } data
Distance : 6

15
Tree	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; } nCols
Code	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; } nCols
Distance : 6

16
Tree	{ return chromosomes ; } int
Code	{ return chromosomes ; } int
Distance : 6

17
Tree	{ return chromosomes ; } false
Code	{ return chromosomes ; } false
Distance : 6

18
Tree	{ return chromosomes ; } try
Code	{ return chromosomes ; } try
Distance : 6

19
Tree	{ return chromosomes . iterator () . iterator () ; } +
Code	{ return chromosomes . iterator () . iterator () ; } +
Distance : 4

20
Tree	{ return chromosomes ; } Complex
Code	{ return chromosomes ; } Complex
Distance : 6

21
Tree	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } field
Code	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } field
Distance : 5

22
Tree	{ return chromosomes . iterator () && chromosomes . iterator () ; } +
Code	{ return chromosomes . iterator () && chromosomes . iterator () ; } +
Distance : 6

23
Tree	{ return chromosomes ; } Fraction
Code	{ return chromosomes ; } Fraction
Distance : 6

24
Tree	{ return chromosomes . iterator () && chromosomes . iterator () ; } super
Code	{ return chromosomes . iterator () && chromosomes . iterator () ; } super
Distance : 6

25
Tree	{ return chromosomes == break; iterator chromosomes . getChromosomes () ; }
Code	{ return chromosomes == break; iterator chromosomes . getChromosomes () ; }
Distance : 6

26
Tree	{ return getChromosomes ( chromosomes . iterator () , iterator () ) ; }
Code	{ return getChromosomes ( chromosomes . iterator () , iterator () ) ; }
Distance : 6

27
Tree	{ return chromosomes . getChromosomes ( chromosomes . iterator () ) . getChromosomes () ; }
Code	{ return chromosomes . getChromosomes ( chromosomes . iterator () ) . getChromosomes () ; }
Distance : 8

28
Tree	{ return chromosomes . getChromosomes () . < chromosomes > getChromosomes () ; }
Code	{ return chromosomes . getChromosomes () . < chromosomes > getChromosomes () ; }
Distance : 6

29
Tree	{ return chromosomes . getChromosomes ( chromosomes . getChromosomes () ) . getChromosomes () ; }
Code	{ return chromosomes . getChromosomes ( chromosomes . getChromosomes () ) . getChromosomes () ; }
Distance : 8

30
Tree	{ return chromosomes == null iterator chromosomes . getChromosomes () ; }
Code	{ return chromosomes == null iterator chromosomes . getChromosomes () ; }
Distance : 6

31
Tree	{ return chromosomes . getChromosomes () && chromosomes . getChromosomes () ; }
Code	{ return chromosomes . getChromosomes () && chromosomes . getChromosomes () ; }
Distance : 5

32
Tree	{ return chromosomes == continue; iterator chromosomes . iterator () ; }
Code	{ return chromosomes == continue; iterator chromosomes . iterator () ; }
Distance : 5

33
Tree	{ return getChromosomes ( chromosomes . getChromosomes () , getChromosomes () ) ; }
Code	{ return getChromosomes ( chromosomes . getChromosomes () , getChromosomes () ) ; }
Distance : 7

34
Tree	{ return getChromosomes ( chromosomes . getChromosomes () , chromosomes . iterator () ) ; }
Code	{ return getChromosomes ( chromosomes . getChromosomes () , chromosomes . iterator () ) ; }
Distance : 7

35
Tree	{ return getChromosomes ( chromosomes . iterator () , chromosomes . iterator () ) ; }
Code	{ return getChromosomes ( chromosomes . iterator () , chromosomes . iterator () ) ; }
Distance : 7

36
Tree	{ return getChromosomes ( chromosomes . getChromosomes () , chromosomes . getChromosomes () ) ; }
Code	{ return getChromosomes ( chromosomes . getChromosomes () , chromosomes . getChromosomes () ) ; }
Distance : 8

37
Tree	{ return getChromosomes ( chromosomes . iterator () , chromosomes . getChromosomes () ) ; }
Code	{ return getChromosomes ( chromosomes . iterator () , chromosomes . getChromosomes () ) ; }
Distance : 8

38
Tree	{ return chromosomes == break; iterator chromosomes . iterator () ; }
Code	{ return chromosomes == break; iterator chromosomes . iterator () ; }
Distance : 5

39
Tree	{ return ! chromosomes . iterator () ; } nCols
Code	{ return ! chromosomes . iterator () ; } nCols
Distance : 3

40
Tree	{ return getChromosomes ( chromosomes . iterator () , getChromosomes () ) ; }
Code	{ return getChromosomes ( chromosomes . iterator () , getChromosomes () ) ; }
Distance : 6

41
Tree	{ return chromosomes == super(); iterator chromosomes . iterator () ; }
Code	{ return chromosomes == super(); iterator chromosomes . iterator () ; }
Distance : 5

42
Tree	{ return chromosomes . iterator () ; } Override
Code	{ return chromosomes . iterator () ; } Override
Distance : 3

43
Tree	{ return chromosomes . iterator () ; } void
Code	{ return chromosomes . iterator () ; } void
Distance : 3

44
Tree	{ return ( chromosomes ) chromosomes . iterator () ; } nCols
Code	{ return ( chromosomes ) chromosomes . iterator () ; } nCols
Distance : 5

45
Tree	{ return ! chromosomes . iterator () ; } assertEquals
Code	{ return ! chromosomes . iterator () ; } assertEquals
Distance : 3

46
Tree	{ return chromosomes . iterator () . iterator () ; } MatrixUtils
Code	{ return chromosomes . iterator () . iterator () ; } MatrixUtils
Distance : 4

47
Tree	{ return chromosomes . iterator () . iterator () ; } point
Code	{ return chromosomes . iterator () . iterator () ; } point
Distance : 4

48
Tree	{ return chromosomes . iterator () . iterator () ; } UnivariateRealFunction
Code	{ return chromosomes . iterator () . iterator () ; } UnivariateRealFunction
Distance : 4

49
Tree	{ return chromosomes . iterator () . iterator () ; } super
Code	{ return chromosomes . iterator () . iterator () ; } super
Distance : 4

50
Tree	{ return ! chromosomes . iterator () ; } Fraction
Code	{ return ! chromosomes . iterator () ; } Fraction
Distance : 3

51
Tree	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; } field
Code	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; } field
Distance : 6

52
Tree	{ return chromosomes . iterator ( chromosomes . iterator () ) ; } MatrixUtils
Code	{ return chromosomes . iterator ( chromosomes . iterator () ) ; } MatrixUtils
Distance : 7

53
Tree	{ return ( chromosomes ) chromosomes . iterator () ; } field
Code	{ return ( chromosomes ) chromosomes . iterator () ; } field
Distance : 5

54
Tree	{ return ( chromosomes ) chromosomes . iterator () ; } Assert
Code	{ return ( chromosomes ) chromosomes . iterator () ; } Assert
Distance : 5

55
Tree	{ return ( chromosomes ) chromosomes . iterator () ; } Override
Code	{ return ( chromosomes ) chromosomes . iterator () ; } Override
Distance : 5

56
Tree	{ return ( chromosomes ) chromosomes . iterator () ; } Fraction
Code	{ return ( chromosomes ) chromosomes . iterator () ; } Fraction
Distance : 5

57
Tree	{ return ( chromosomes ) chromosomes . iterator () ; } assertEquals
Code	{ return ( chromosomes ) chromosomes . iterator () ; } assertEquals
Distance : 5

58
Tree	{ return ( chromosomes ) chromosomes . iterator () ; } k
Code	{ return ( chromosomes ) chromosomes . iterator () ; } k
Distance : 5

59
Tree	{ return chromosomes . iterator ( chromosomes . iterator () ) ; } point
Code	{ return chromosomes . iterator ( chromosomes . iterator () ) ; } point
Distance : 7

60
Tree	{ return chromosomes . iterator ( chromosomes . iterator () ) ; } super
Code	{ return chromosomes . iterator ( chromosomes . iterator () ) ; } super
Distance : 7

61
Tree	{ return true ; } Fraction
Code	{ return true ; } Fraction
Distance : 6

62
Tree	{ return getChromosomes ( chromosomes . getChromosomes () , iterator () ) ; }
Code	{ return getChromosomes ( chromosomes . getChromosomes () , iterator () ) ; }
Distance : 6

63
Tree	{ return chromosomes . iterator () ; } Fraction
Code	{ return chromosomes . iterator () ; } Fraction
Distance : 3

64
Tree	{ return chromosomes . iterator ( chromosomes ) ; } nCols
Code	{ return chromosomes . iterator ( chromosomes ) ; } nCols
Distance : 6

65
Tree	{ return new chromosomes () ; } Complex
Code	{ return new chromosomes () ; } Complex
Distance : 5

66
Tree	{ return chromosomes . iterator ( chromosomes ) ; } k
Code	{ return chromosomes . iterator ( chromosomes ) ; } k
Distance : 6

67
Tree	{ return chromosomes . iterator ( chromosomes ) ; } field
Code	{ return chromosomes . iterator ( chromosomes ) ; } field
Distance : 6

68
Tree	{ return iterator () ; } k
Code	{ return iterator () ; } k
Distance : 4

69
Tree	{ return iterator () ; } field
Code	{ return iterator () ; } field
Distance : 4

70
Tree	{ return iterator () ; } Assert
Code	{ return iterator () ; } Assert
Distance : 4

71
Tree	{ return iterator () ; } void
Code	{ return iterator () ; } void
Distance : 4

72
Tree	{ return iterator () ; } Override
Code	{ return iterator () ; } Override
Distance : 4

73
Tree	{ return iterator () ; } assertEquals
Code	{ return iterator () ; } assertEquals
Distance : 4

74
Tree	{ return true ; } Assert
Code	{ return true ; } Assert
Distance : 6

75
Tree	{ return true ; } void
Code	{ return true ; } void
Distance : 6

76
Tree	{ return true ; } Override
Code	{ return true ; } Override
Distance : 6

77
Tree	{ return chromosomes . iterator () ; } Assert
Code	{ return chromosomes . iterator () ; } Assert
Distance : 3

78
Tree	{ return chromosomes . iterator () return chromosomes . iterator () ; }
Code	{ return chromosomes . iterator () return chromosomes . iterator () ; }
Distance : 5

79
Tree	{ return chromosomes == super(); ? null : chromosomes . iterator () ; }
Code	{ return chromosomes == super(); ? null : chromosomes . iterator () ; }
Distance : 7

80
Tree	{ return iterator ( chromosomes . iterator () , chromosomes . getChromosomes () ) ; }
Code	{ return iterator ( chromosomes . iterator () , chromosomes . getChromosomes () ) ; }
Distance : 9

81
Tree	{ return STRING_CONSTANT + chromosomes . getChromosomes () + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + chromosomes . getChromosomes () + STRING_CONSTANT ; }
Distance : 6

82
Tree	{ return val.length ; }
Code	{ return val.length ; }
Distance : 5

83
Tree	{ return getPct ; }
Code	{ return getPct ; }
Distance : 5

84
Tree	{ return x.length ; }
Code	{ return x.length ; }
Distance : 5

85
Tree	{ return new anovaPValue ( chromosomes ) ; }
Code	{ return new anovaPValue ( chromosomes ) ; }
Distance : 5

86
Tree	{ return chromosomes . iterator ( DfpField.FLAG_INVALID ) ; }
Code	{ return chromosomes . iterator ( DfpField.FLAG_INVALID ) ; }
Distance : 5

87
Tree	{ return new RealVectorTestImpl ( chromosomes ) ; }
Code	{ return new RealVectorTestImpl ( chromosomes ) ; }
Distance : 5

88
Tree	{ return MathUtils.PI_SQUARED ; }
Code	{ return MathUtils.PI_SQUARED ; }
Distance : 5

89
Tree	{ return new Frequency ( chromosomes ) ; }
Code	{ return new Frequency ( chromosomes ) ; }
Distance : 5

90
Tree	{ return sumLogImpl ; }
Code	{ return sumLogImpl ; }
Distance : 5

91
Tree	{ return new Frequency () ; }
Code	{ return new Frequency () ; }
Distance : 4

92
Tree	{ return new iterator () ; }
Code	{ return new iterator () ; }
Distance : 3

93
Tree	{ return chromosomes . iterator ( Boolean.FALSE ) ; }
Code	{ return chromosomes . iterator ( Boolean.FALSE ) ; }
Distance : 5

94
Tree	{ return new ThreeEighthesFieldIntegrator ( chromosomes ) ; }
Code	{ return new ThreeEighthesFieldIntegrator ( chromosomes ) ; }
Distance : 5

95
Tree	{ return iterator ( chromosomes ) ; }
Code	{ return iterator ( chromosomes ) ; }
Distance : 5

96
Tree	{ return LocalizedFormats.MAX_COUNT_EXCEEDED ; }
Code	{ return LocalizedFormats.MAX_COUNT_EXCEEDED ; }
Distance : 5

97
Tree	{ return chromosomes == null ? null : chromosomes . iterator () ; }
Code	{ return chromosomes == null ? null : chromosomes . iterator () ; }
Distance : 7

98
Tree	{ return ( chromosomes ) chromosomes . iterator () ; }
Code	{ return ( chromosomes ) chromosomes . iterator () ; }
Distance : 4

99
Tree	{ return chromosomes . iterator () . iterator () ; }
Code	{ return chromosomes . iterator () . iterator () ; }
Distance : 3

100
Tree	{ return false ; }
Code	{ return false ; }
Distance : 5

101
Tree	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; }
Distance : 5

102
Tree	{ return ( chromosomes == null ? null : chromosomes . getChromosomes () ) ; }
Code	{ return ( chromosomes == null ? null : chromosomes . getChromosomes () ) ; }
Distance : 10

103
Tree	{ return this . chromosomes ; }
Code	{ return this . chromosomes ; }
Distance : 4

104
Tree	{ return Double.NaN ; }
Code	{ return Double.NaN ; }
Distance : 5

105
Tree	{ return new SubPlane ( chromosomes ) ; }
Code	{ return new SubPlane ( chromosomes ) ; }
Distance : 5

106
Tree	{ return new SubPlane () ; }
Code	{ return new SubPlane () ; }
Distance : 4

107
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 5

108
Tree	{ return chromosomes - NUMBER_CONSTANT ; }
Code	{ return chromosomes - NUMBER_CONSTANT ; }
Distance : 5

109
Tree	{ return STRING_CONSTANT + chromosomes . iterator () ; }
Code	{ return STRING_CONSTANT + chromosomes . iterator () ; }
Distance : 3

110
Tree	{ return chromosomes . iterator ( stat.aggregateStatistics ) ; }
Code	{ return chromosomes . iterator ( stat.aggregateStatistics ) ; }
Distance : 5

111
Tree	{ return chromosomes . getChromosomes () ; }
Code	{ return chromosomes . getChromosomes () ; }
Distance : 3

112
Tree	{ return chromosomes . iterator ( chromosomes ) ; }
Code	{ return chromosomes . iterator ( chromosomes ) ; }
Distance : 5

113
Tree	{ return GoalType ; }
Code	{ return GoalType ; }
Distance : 5

114
Tree	{ return chromosomes . iterator ( LocalizedFormats.EVALUATIONS ) ; }
Code	{ return chromosomes . iterator ( LocalizedFormats.EVALUATIONS ) ; }
Distance : 5

115
Tree	{ return new Median ( chromosomes ) ; }
Code	{ return new Median ( chromosomes ) ; }
Distance : 5

116
Tree	{ return STRING_CONSTANT + chromosomes . getChromosomes () ; }
Code	{ return STRING_CONSTANT + chromosomes . getChromosomes () ; }
Distance : 4

117
Tree	{ return chromosomes . iterator ( ref ) ; }
Code	{ return chromosomes . iterator ( ref ) ; }
Distance : 5

118
Tree	{ return ( double [] ) chromosomes . getChromosomes () ; }
Code	{ return ( double [] ) chromosomes . getChromosomes () ; }
Distance : 6

119
Tree	{ return iterator ( chromosomes . iterator () , getChromosomes () ) ; }
Code	{ return iterator ( chromosomes . iterator () , getChromosomes () ) ; }
Distance : 7

120
Tree	{ return chromosomes . iterator () && chromosomes . iterator () ; }
Code	{ return chromosomes . iterator () && chromosomes . iterator () ; }
Distance : 5

121
Tree	{ return ( float [] ) chromosomes . iterator () ; }
Code	{ return ( float [] ) chromosomes . iterator () ; }
Distance : 5

122
Tree	{ return chromosomes . iterator ( chromosomes . iterator () ) . getChromosomes () ; }
Code	{ return chromosomes . iterator ( chromosomes . iterator () ) . getChromosomes () ; }
Distance : 9

123
Tree	{ return getChromosomes ( chromosomes . iterator () ) ; }
Code	{ return getChromosomes ( chromosomes . iterator () ) ; }
Distance : 3

124
Tree	{ return chromosomes == null ? continue; : chromosomes . iterator () ; }
Code	{ return chromosomes == null ? continue; : chromosomes . iterator () ; }
Distance : 7

125
Tree	{ return chromosomes . iterator ( chromosomes . getChromosomes () ) . getChromosomes () ; }
Code	{ return chromosomes . iterator ( chromosomes . getChromosomes () ) . getChromosomes () ; }
Distance : 8

126
Tree	{ return ! chromosomes . getChromosomes () ; }
Code	{ return ! chromosomes . getChromosomes () ; }
Distance : 3

127
Tree	{ return chromosomes . iterator () && chromosomes . getChromosomes () ; }
Code	{ return chromosomes . iterator () && chromosomes . getChromosomes () ; }
Distance : 6

128
Tree	{ return chromosomes == break; ? null : chromosomes . iterator () ; }
Code	{ return chromosomes == break; ? null : chromosomes . iterator () ; }
Distance : 7

129
Tree	{ return chromosomes == null iterator chromosomes . iterator () ; }
Code	{ return chromosomes == null iterator chromosomes . iterator () ; }
Distance : 5

130
Tree	{ return iterator ( chromosomes . getChromosomes () , chromosomes . getChromosomes () ) ; }
Code	{ return iterator ( chromosomes . getChromosomes () , chromosomes . getChromosomes () ) ; }
Distance : 8

131
Tree	{ return chromosomes . iterator ( chromosomes . iterator () ) ; } Array2DRowFieldMatrix
Code	{ return chromosomes . iterator ( chromosomes . iterator () ) ; } Array2DRowFieldMatrix
Distance : 7

132
Tree	{ return chromosomes == null ? iterator : chromosomes . iterator () ; }
Code	{ return chromosomes == null ? iterator : chromosomes . iterator () ; }
Distance : 7

133
Tree	{ return iterator ( chromosomes . getChromosomes () , getChromosomes () ) ; }
Code	{ return iterator ( chromosomes . getChromosomes () , getChromosomes () ) ; }
Distance : 7

134
Tree	{ return chromosomes == null ? super(); : chromosomes . getChromosomes () ; }
Code	{ return chromosomes == null ? super(); : chromosomes . getChromosomes () ; }
Distance : 8

135
Tree	{ return ( chromosomes == null ? break; : chromosomes . getChromosomes () ) ; }
Code	{ return ( chromosomes == null ? break; : chromosomes . getChromosomes () ) ; }
Distance : 10

136
Tree	{ return chromosomes . getChromosomes () . getChromosomes ( chromosomes ) ; }
Code	{ return chromosomes . getChromosomes () . getChromosomes ( chromosomes ) ; }
Distance : 6

137
Tree	{ return new Median () ; }
Code	{ return new Median () ; }
Distance : 4

138
Tree	{ return chromosomes . iterator ( ExponentialDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY ) ; }
Code	{ return chromosomes . iterator ( ExponentialDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY ) ; }
Distance : 5

139
Tree	{ return new chromosomes () . iterator () ; }
Code	{ return new chromosomes () . iterator () ; }
Distance : 2

140
Tree	{ return chromosomes . getChromosomes () . iterator () ; }
Code	{ return chromosomes . getChromosomes () . iterator () ; }
Distance : 2

141
Tree	{ return chromosomes . iterator () . < chromosomes > iterator () ; }
Code	{ return chromosomes . iterator () . < chromosomes > iterator () ; }
Distance : 6

142
Tree	{ return this . chromosomes . getChromosomes () ; }
Code	{ return this . chromosomes . getChromosomes () ; }
Distance : 4

143
Tree	{ return chromosomes == null ? null : chromosomes . getChromosomes () ; }
Code	{ return chromosomes == null ? null : chromosomes . getChromosomes () ; }
Distance : 8

144
Tree	{ return chromosomes . getChromosomes () . getChromosomes () ; }
Code	{ return chromosomes . getChromosomes () . getChromosomes () ; }
Distance : 3

145
Tree	{ return chromosomes . iterator ( chromosomes , chromosomes ) ; }
Code	{ return chromosomes . iterator ( chromosomes , chromosomes ) ; }
Distance : 7

146
Tree	{ return chromosomes . iterator ( chromosomes . iterator () ) . iterator () ; }
Code	{ return chromosomes . iterator ( chromosomes . iterator () ) . iterator () ; }
Distance : 8

147
Tree	{ return ( chromosomes == null ? super(); : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == null ? super(); : chromosomes . iterator () ) ; }
Distance : 9

148
Tree	{ return chromosomes . iterator ( chromosomes . getChromosomes () ) . iterator () ; }
Code	{ return chromosomes . iterator ( chromosomes . getChromosomes () ) . iterator () ; }
Distance : 7

149
Tree	{ return ( chromosomes == null ? break; : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == null ? break; : chromosomes . iterator () ) ; }
Distance : 9

150
Tree	{ return iterator ( chromosomes . getChromosomes () , iterator () ) ; }
Code	{ return iterator ( chromosomes . getChromosomes () , iterator () ) ; }
Distance : 6

151
Tree	{ return ( long [] ) chromosomes . iterator () ; }
Code	{ return ( long [] ) chromosomes . iterator () ; }
Distance : 5

152
Tree	{ return ( boolean [] ) chromosomes . iterator () ; }
Code	{ return ( boolean [] ) chromosomes . iterator () ; }
Distance : 5

153
Tree	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; } k
Code	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; } k
Distance : 6

154
Tree	{ return chromosomes . iterator () ; } field
Code	{ return chromosomes . iterator () ; } field
Distance : 3

155
Tree	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; } Assert
Code	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; } Assert
Distance : 6

156
Tree	{ return ( ( chromosomes ) chromosomes ) . iterator () ; } Override
Code	{ return ( ( chromosomes ) chromosomes ) . iterator () ; } Override
Distance : 7

157
Tree	{ return chromosomes - NUMBER_CONSTANT ; } p
Code	{ return chromosomes - NUMBER_CONSTANT ; } p
Distance : 6

158
Tree	{ return chromosomes - NUMBER_CONSTANT ; } int
Code	{ return chromosomes - NUMBER_CONSTANT ; } int
Distance : 6

159
Tree	{ return STRING_CONSTANT ; } p
Code	{ return STRING_CONSTANT ; } p
Distance : 6

160
Tree	{ return this . chromosomes ; } void
Code	{ return this . chromosomes ; } void
Distance : 5

161
Tree	{ return this . chromosomes ; } p
Code	{ return this . chromosomes ; } p
Distance : 5

162
Tree	{ return this . chromosomes ; } Fraction
Code	{ return this . chromosomes ; } Fraction
Distance : 5

163
Tree	{ return ( ( chromosomes ) chromosomes ) . iterator () ; } void
Code	{ return ( ( chromosomes ) chromosomes ) . iterator () ; } void
Distance : 7

164
Tree	{ return chromosomes . iterator () iterator chromosomes . iterator () ; } Array2DRowFieldMatrix
Code	{ return chromosomes . iterator () iterator chromosomes . iterator () ; } Array2DRowFieldMatrix
Distance : 6

165
Tree	{ return STRING_CONSTANT ; } Fraction
Code	{ return STRING_CONSTANT ; } Fraction
Distance : 6

166
Tree	{ return chromosomes . iterator () iterator chromosomes . iterator () ; } +
Code	{ return chromosomes . iterator () iterator chromosomes . iterator () ; } +
Distance : 6

167
Tree	{ return STRING_CONSTANT ; } Complex
Code	{ return STRING_CONSTANT ; } Complex
Distance : 6

168
Tree	{ return STRING_CONSTANT ; } try
Code	{ return STRING_CONSTANT ; } try
Distance : 6

169
Tree	{ return STRING_CONSTANT ; } false
Code	{ return STRING_CONSTANT ; } false
Distance : 6

170
Tree	{ return STRING_CONSTANT ; } int
Code	{ return STRING_CONSTANT ; } int
Distance : 6

171
Tree	{ return this . chromosomes ; } int
Code	{ return this . chromosomes ; } int
Distance : 5

172
Tree	{ return chromosomes . iterator () { chromosomes . iterator () ; } MatrixUtils
Code	{ return chromosomes . iterator () { chromosomes . iterator () ; } MatrixUtils
Distance : 6

173
Tree	{ return new chromosomes ( chromosomes ) ; } int
Code	{ return new chromosomes ( chromosomes ) ; } int
Distance : 6

174
Tree	{ return ( ( chromosomes ) chromosomes ) . iterator () ; } Assert
Code	{ return ( ( chromosomes ) chromosomes ) . iterator () ; } Assert
Distance : 7

175
Tree	{ return ( ( chromosomes ) chromosomes ) . iterator () ; } field
Code	{ return ( ( chromosomes ) chromosomes ) . iterator () ; } field
Distance : 7

176
Tree	{ return NUMBER_CONSTANT ; } try
Code	{ return NUMBER_CONSTANT ; } try
Distance : 6

177
Tree	{ return NUMBER_CONSTANT ; } false
Code	{ return NUMBER_CONSTANT ; } false
Distance : 6

178
Tree	{ return NUMBER_CONSTANT ; } int
Code	{ return NUMBER_CONSTANT ; } int
Distance : 6

179
Tree	{ return NUMBER_CONSTANT ; } field
Code	{ return NUMBER_CONSTANT ; } field
Distance : 6

180
Tree	{ return NUMBER_CONSTANT ; } data
Code	{ return NUMBER_CONSTANT ; } data
Distance : 6

181
Tree	{ return NUMBER_CONSTANT ; } void
Code	{ return NUMBER_CONSTANT ; } void
Distance : 6

182
Tree	{ return NUMBER_CONSTANT ; } p
Code	{ return NUMBER_CONSTANT ; } p
Distance : 6

183
Tree	{ return chromosomes () ; } try
Code	{ return chromosomes () ; } try
Distance : 5

184
Tree	{ return chromosomes . getChromosomes () ; }
Code	{ return chromosomes . getChromosomes () ; }
Distance : 3

185
Tree	{ return chromosomes () ; } int
Code	{ return chromosomes () ; } int
Distance : 5

186
Tree	{ return chromosomes () ; } false
Code	{ return chromosomes () ; } false
Distance : 5

187
Tree	{ return ( ( chromosomes ) chromosomes ) . iterator () ; } k
Code	{ return ( ( chromosomes ) chromosomes ) . iterator () ; } k
Distance : 7

188
Tree	{ return super . iterator () ; } Assert
Code	{ return super . iterator () ; } Assert
Distance : 3

189
Tree	{ return super . iterator () ; } void
Code	{ return super . iterator () ; } void
Distance : 3

190
Tree	{ return super . iterator () ; } Override
Code	{ return super . iterator () ; } Override
Distance : 3

191
Tree	{ return ( ( chromosomes ) chromosomes ) . iterator () ; } nCols
Code	{ return ( ( chromosomes ) chromosomes ) . iterator () ; } nCols
Distance : 7

192
Tree	{ return chromosomes () ; } field
Code	{ return chromosomes () ; } field
Distance : 5

193
Tree	{ return NUMBER_CONSTANT ; } Complex
Code	{ return NUMBER_CONSTANT ; } Complex
Distance : 6

194
Tree	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; } Override
Code	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; } Override
Distance : 6

195
Tree	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; } assertEquals
Code	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; } assertEquals
Distance : 6

196
Tree	{ return chromosomes . iterator ( chromosomes , chromosomes ) ; } Fraction
Code	{ return chromosomes . iterator ( chromosomes , chromosomes ) ; } Fraction
Distance : 8

197
Tree	{ return chromosomes . iterator ( chromosomes , chromosomes ) ; } assertEquals
Code	{ return chromosomes . iterator ( chromosomes , chromosomes ) ; } assertEquals
Distance : 8

198
Tree	{ return chromosomes - NUMBER_CONSTANT ; } Complex
Code	{ return chromosomes - NUMBER_CONSTANT ; } Complex
Distance : 6

199
Tree	{ return chromosomes - NUMBER_CONSTANT ; } try
Code	{ return chromosomes - NUMBER_CONSTANT ; } try
Distance : 6

200
Tree	{ return iterator ( chromosomes . getChromosomes () ) ; } MatrixUtils
Code	{ return iterator ( chromosomes . getChromosomes () ) ; } MatrixUtils
Distance : 6

201
Tree	{ return this . chromosomes . iterator () ; } assertEquals
Code	{ return this . chromosomes . iterator () ; } assertEquals
Distance : 4

202
Tree	{ return iterator ( chromosomes ) ; } Fraction
Code	{ return iterator ( chromosomes ) ; } Fraction
Distance : 6

203
Tree	{ return chromosomes . iterator ( chromosomes , chromosomes ) ; } void
Code	{ return chromosomes . iterator ( chromosomes , chromosomes ) ; } void
Distance : 8

204
Tree	{ return this . chromosomes . iterator () ; } Fraction
Code	{ return this . chromosomes . iterator () ; } Fraction
Distance : 4

205
Tree	{ return iterator ( chromosomes ) ; } Assert
Code	{ return iterator ( chromosomes ) ; } Assert
Distance : 6

206
Tree	{ return iterator ( chromosomes ) ; } void
Code	{ return iterator ( chromosomes ) ; } void
Distance : 6

207
Tree	{ return iterator ( chromosomes ) ; } Override
Code	{ return iterator ( chromosomes ) ; } Override
Distance : 6

208
Tree	{ return iterator ( chromosomes ) ; } assertEquals
Code	{ return iterator ( chromosomes ) ; } assertEquals
Distance : 6

209
Tree	{ return this . chromosomes . iterator () ; } nCols
Code	{ return this . chromosomes . iterator () ; } nCols
Distance : 4

210
Tree	{ return this . chromosomes . iterator () ; } k
Code	{ return this . chromosomes . iterator () ; } k
Distance : 4

211
Tree	{ return this . chromosomes . iterator () ; } field
Code	{ return this . chromosomes . iterator () ; } field
Distance : 4

212
Tree	{ return iterator ( chromosomes ) ; } field
Code	{ return iterator ( chromosomes ) ; } field
Distance : 6

213
Tree	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; } Fraction
Code	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; } Fraction
Distance : 6

214
Tree	{ return iterator ( chromosomes . getChromosomes () ) ; } Array2DRowFieldMatrix
Code	{ return iterator ( chromosomes . getChromosomes () ) ; } Array2DRowFieldMatrix
Distance : 6

215
Tree	{ return chromosomes . iterator ( chromosomes , chromosomes ) ; } k
Code	{ return chromosomes . iterator ( chromosomes , chromosomes ) ; } k
Distance : 8

216
Tree	{ return new chromosomes ( chromosomes ) ; } Complex
Code	{ return new chromosomes ( chromosomes ) ; } Complex
Distance : 6

217
Tree	{ return new chromosomes ( chromosomes ) ; } try
Code	{ return new chromosomes ( chromosomes ) ; } try
Distance : 6

218
Tree	{ return new chromosomes ( chromosomes ) ; } false
Code	{ return new chromosomes ( chromosomes ) ; } false
Distance : 6

219
Tree	{ return new chromosomes ( chromosomes ) ; } data
Code	{ return new chromosomes ( chromosomes ) ; } data
Distance : 6

220
Tree	{ return new chromosomes ( chromosomes ) ; } void
Code	{ return new chromosomes ( chromosomes ) ; } void
Distance : 6

221
Tree	{ return new chromosomes ( chromosomes ) ; } p
Code	{ return new chromosomes ( chromosomes ) ; } p
Distance : 6

222
Tree	{ return new chromosomes ( chromosomes ) ; } Fraction
Code	{ return new chromosomes ( chromosomes ) ; } Fraction
Distance : 6

223
Tree	{ return chromosomes . iterator ( chromosomes , chromosomes ) ; } Assert
Code	{ return chromosomes . iterator ( chromosomes , chromosomes ) ; } Assert
Distance : 8

224
Tree	{ return this . chromosomes ; } Complex
Code	{ return this . chromosomes ; } Complex
Distance : 5

225
Tree	{ return STRING_CONSTANT ; } void
Code	{ return STRING_CONSTANT ; } void
Distance : 6

226
Tree	{ return STRING_CONSTANT ; } data
Code	{ return STRING_CONSTANT ; } data
Distance : 6

227
Tree	{ return chromosomes . iterator ( chromosomes . iterator () ) . iterator () ; } MathArrays
Code	{ return chromosomes . iterator ( chromosomes . iterator () ) . iterator () ; } MathArrays
Distance : 9

228
Tree	{ return iterator ( chromosomes . getChromosomes () ) ; } UnivariateRealFunction
Code	{ return iterator ( chromosomes . getChromosomes () ) ; } UnivariateRealFunction
Distance : 6

229
Tree	{ return iterator ( chromosomes . getChromosomes () ) ; } super
Code	{ return iterator ( chromosomes . getChromosomes () ) ; } super
Distance : 6

230
Tree	{ return iterator ( chromosomes . getChromosomes () ) ; } +
Code	{ return iterator ( chromosomes . getChromosomes () ) ; } +
Distance : 6

231
Tree	{ return chromosomes . iterator ( chromosomes , chromosomes ) ; } nCols
Code	{ return chromosomes . iterator ( chromosomes , chromosomes ) ; } nCols
Distance : 8

232
Tree	{ return this . chromosomes ; } try
Code	{ return this . chromosomes ; } try
Distance : 5

233
Tree	{ return chromosomes () ; } p
Code	{ return chromosomes () ; } p
Distance : 5

234
Tree	{ return chromosomes . iterator () () chromosomes . iterator () ; } super
Code	{ return chromosomes . iterator () () chromosomes . iterator () ; } super
Distance : 6

235
Tree	{ return chromosomes () ; } void
Code	{ return chromosomes () ; } void
Distance : 5

236
Tree	{ return chromosomes () ; } data
Code	{ return chromosomes () ; } data
Distance : 5

237
Tree	{ return super . iterator () ; } field
Code	{ return super . iterator () ; } field
Distance : 3

238
Tree	{ return new chromosomes () . iterator () ; } field
Code	{ return new chromosomes () . iterator () ; } field
Distance : 3

239
Tree	{ return new chromosomes () . iterator () ; } Fraction
Code	{ return new chromosomes () . iterator () ; } Fraction
Distance : 3

240
Tree	{ return new chromosomes () . iterator () ; } Assert
Code	{ return new chromosomes () . iterator () ; } Assert
Distance : 3

241
Tree	{ return iterator ( chromosomes . getChromosomes () , chromosomes . iterator () ) ; } v.length
Code	{ return iterator ( chromosomes . getChromosomes () , chromosomes . iterator () ) ; } v.length
Distance : 8

242
Tree	{ return super . iterator () ; } nCols
Code	{ return super . iterator () ; } nCols
Distance : 3

243
Tree	{ return chromosomes - NUMBER_CONSTANT ; } field
Code	{ return chromosomes - NUMBER_CONSTANT ; } field
Distance : 6

244
Tree	{ return new chromosomes () . iterator () ; } Override
Code	{ return new chromosomes () . iterator () ; } Override
Distance : 3

245
Tree	{ return new chromosomes () . iterator () ; } assertEquals
Code	{ return new chromosomes () . iterator () ; } assertEquals
Distance : 3

246
Tree	{ return iterator ( chromosomes . getChromosomes () , chromosomes . iterator () ) ; } MathArrays
Code	{ return iterator ( chromosomes . getChromosomes () , chromosomes . iterator () ) ; } MathArrays
Distance : 8

247
Tree	{ return super . iterator () ; } k
Code	{ return super . iterator () ; } k
Distance : 3

248
Tree	{ return chromosomes . iterator () . < chromosomes > iterator () ; } super
Code	{ return chromosomes . iterator () . < chromosomes > iterator () ; } super
Distance : 7

249
Tree	{ return chromosomes . iterator () . < chromosomes > iterator () ; } +
Code	{ return chromosomes . iterator () . < chromosomes > iterator () ; } +
Distance : 7

250
Tree	{ return STRING_CONSTANT + chromosomes . iterator () ; } nCols
Code	{ return STRING_CONSTANT + chromosomes . iterator () ; } nCols
Distance : 4

251
Tree	{ return STRING_CONSTANT + chromosomes . iterator () ; } k
Code	{ return STRING_CONSTANT + chromosomes . iterator () ; } k
Distance : 4

252
Tree	{ return STRING_CONSTANT + chromosomes . iterator () ; } field
Code	{ return STRING_CONSTANT + chromosomes . iterator () ; } field
Distance : 4

253
Tree	{ return STRING_CONSTANT + chromosomes . iterator () ; } Assert
Code	{ return STRING_CONSTANT + chromosomes . iterator () ; } Assert
Distance : 4

254
Tree	{ return STRING_CONSTANT + chromosomes . iterator () ; } void
Code	{ return STRING_CONSTANT + chromosomes . iterator () ; } void
Distance : 4

255
Tree	{ return STRING_CONSTANT + chromosomes . iterator () ; } Override
Code	{ return STRING_CONSTANT + chromosomes . iterator () ; } Override
Distance : 4

256
Tree	{ return STRING_CONSTANT + chromosomes . iterator () ; } Fraction
Code	{ return STRING_CONSTANT + chromosomes . iterator () ; } Fraction
Distance : 4

257
Tree	{ return STRING_CONSTANT + chromosomes . iterator () ; } assertEquals
Code	{ return STRING_CONSTANT + chromosomes . iterator () ; } assertEquals
Distance : 4

258
Tree	{ return chromosomes . iterator () . iterator ( chromosomes ) ; }
Code	{ return chromosomes . iterator () . iterator ( chromosomes ) ; }
Distance : 6

259
Tree	{ return chromosomes . iterator () . getChromosomes () ; }
Code	{ return chromosomes . iterator () . getChromosomes () ; }
Distance : 4

260
Tree	{ return chromosomes . iterator ( chromosomes . iterator () ) ; } UnivariateRealFunction
Code	{ return chromosomes . iterator ( chromosomes . iterator () ) ; } UnivariateRealFunction
Distance : 7

261
Tree	{ return true ; } nCols
Code	{ return true ; } nCols
Distance : 6

262
Tree	{ return ( ( chromosomes ) chromosomes ) . iterator () ; }
Code	{ return ( ( chromosomes ) chromosomes ) . iterator () ; }
Distance : 6

263
Tree	{ return chromosomes . iterator ( Double.NaN ) ; }
Code	{ return chromosomes . iterator ( Double.NaN ) ; }
Distance : 5

264
Tree	{ return ( void [] ) chromosomes . getChromosomes () ; }
Code	{ return ( void [] ) chromosomes . getChromosomes () ; }
Distance : 6

265
Tree	{ return getChromosomes ( chromosomes ) ; }
Code	{ return getChromosomes ( chromosomes ) ; }
Distance : 4

266
Tree	{ return new chromosomes () . iterator () ; } void
Code	{ return new chromosomes () . iterator () ; } void
Distance : 3

267
Tree	{ return new chromosomes () . iterator () ; } nCols
Code	{ return new chromosomes () . iterator () ; } nCols
Distance : 3

268
Tree	{ return ! chromosomes . iterator () ; } k
Code	{ return ! chromosomes . iterator () ; } k
Distance : 3

269
Tree	{ return iterator ( chromosomes . getChromosomes () ) ; }
Code	{ return iterator ( chromosomes . getChromosomes () ) ; }
Distance : 5

270
Tree	{ return true ; } k
Code	{ return true ; } k
Distance : 6

271
Tree	{ return ! chromosomes . iterator () ; } field
Code	{ return ! chromosomes . iterator () ; } field
Distance : 3

272
Tree	{ return iterator ( chromosomes . iterator () , iterator () ) ; }
Code	{ return iterator ( chromosomes . iterator () , iterator () ) ; }
Distance : 7

273
Tree	{ return chromosomes . getChromosomes ( chromosomes . iterator () ) ; }
Code	{ return chromosomes . getChromosomes ( chromosomes . iterator () ) ; }
Distance : 5

274
Tree	{ return true ; } field
Code	{ return true ; } field
Distance : 6

275
Tree	{ return new ExponentialDistribution ( chromosomes ) ; }
Code	{ return new ExponentialDistribution ( chromosomes ) ; }
Distance : 5

276
Tree	{ return chromosomes . iterator ( a.d ) ; }
Code	{ return chromosomes . iterator ( a.d ) ; }
Distance : 5

277
Tree	{ return new chromosomes () ; }
Code	{ return new chromosomes () ; }
Distance : 4

278
Tree	{ return this . chromosomes . iterator () ; }
Code	{ return this . chromosomes . iterator () ; }
Distance : 3

279
Tree	{ return chromosomes . getChromosomes () - NUMBER_CONSTANT ; }
Code	{ return chromosomes . getChromosomes () - NUMBER_CONSTANT ; }
Distance : 5

280
Tree	{ return chromosomes - NUMBER_CONSTANT ; } void
Code	{ return chromosomes - NUMBER_CONSTANT ; } void
Distance : 6

281
Tree	{ return new PolygonsSet () ; }
Code	{ return new PolygonsSet () ; }
Distance : 4

282
Tree	{ return new chromosomes () . iterator () ; } k
Code	{ return new chromosomes () . iterator () ; } k
Distance : 3

283
Tree	{ return new ExponentialDistribution () ; }
Code	{ return new ExponentialDistribution () ; }
Distance : 4

284
Tree	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; } void
Code	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; } void
Distance : 6

285
Tree	{ return new chromosomes ( chromosomes ) ; } field
Code	{ return new chromosomes ( chromosomes ) ; } field
Distance : 6

286
Tree	{ return new chromosomes () ; } int
Code	{ return new chromosomes () ; } int
Distance : 5

287
Tree	{ return chromosomes () ; }
Code	{ return chromosomes () ; }
Distance : 4

288
Tree	{ return chromosomes == super(); iterator chromosomes . getChromosomes () ; }
Code	{ return chromosomes == super(); iterator chromosomes . getChromosomes () ; }
Distance : 6

289
Tree	{ return new chromosomes () ; } try
Code	{ return new chromosomes () ; } try
Distance : 5

290
Tree	{ return ( void [] ) chromosomes . iterator () ; }
Code	{ return ( void [] ) chromosomes . iterator () ; }
Distance : 5

291
Tree	{ return new GoalType ( chromosomes ) ; }
Code	{ return new GoalType ( chromosomes ) ; }
Distance : 5

292
Tree	{ return chromosomes == return; iterator chromosomes . iterator () ; }
Code	{ return chromosomes == return; iterator chromosomes . iterator () ; }
Distance : 5

293
Tree	{ return this . chromosomes . iterator () ; } Override
Code	{ return this . chromosomes . iterator () ; } Override
Distance : 4

294
Tree	{ return super . iterator () ; }
Code	{ return super . iterator () ; }
Distance : 2

295
Tree	{ return chromosomes . iterator ( chromosomes . iterator () ) . iterator () ; } v.length
Code	{ return chromosomes . iterator ( chromosomes . iterator () ) . iterator () ; } v.length
Distance : 9

296
Tree	{ return chromosomes . iterator () ; } Override
Code	{ return chromosomes . iterator () ; } Override
Distance : 3

297
Tree	{ return ! chromosomes . iterator () ; } void
Code	{ return ! chromosomes . iterator () ; } void
Distance : 3

298
Tree	{ return chromosomes . iterator ( v2.length ) ; }
Code	{ return chromosomes . iterator ( v2.length ) ; }
Distance : 5

299
Tree	{ return chromosomes . iterator () ; } assertEquals
Code	{ return chromosomes . iterator () ; } assertEquals
Distance : 3

300
Tree	{ return chromosomes . iterator ( LocalizedFormats.NON_POSITIVE_POLYNOMIAL_DEGREE ) ; }
Code	{ return chromosomes . iterator ( LocalizedFormats.NON_POSITIVE_POLYNOMIAL_DEGREE ) ; }
Distance : 5

301
Tree	{ return chromosomes . getChromosomes () { chromosomes . iterator () ; }
Code	{ return chromosomes . getChromosomes () { chromosomes . iterator () ; }
Distance : 4

302
Tree	{ return chromosomes . getChromosomes ( chromosomes ) ; }
Code	{ return chromosomes . getChromosomes ( chromosomes ) ; }
Distance : 6

303
Tree	{ return chromosomes - NUMBER_CONSTANT ; } Fraction
Code	{ return chromosomes - NUMBER_CONSTANT ; } Fraction
Distance : 6

304
Tree	{ return ( chromosomes == null ? continue; : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == null ? continue; : chromosomes . iterator () ) ; }
Distance : 9

305
Tree	{ return ( int [] ) chromosomes . iterator () ; }
Code	{ return ( int [] ) chromosomes . iterator () ; }
Distance : 5

306
Tree	{ return chromosomes . getChromosomes ( chromosomes . getChromosomes () ) ; }
Code	{ return chromosomes . getChromosomes ( chromosomes . getChromosomes () ) ; }
Distance : 6

307
Tree	{ return chromosomes . iterator () ; } Assert
Code	{ return chromosomes . iterator () ; } Assert
Distance : 3

308
Tree	{ return chromosomes . iterator ( chromosomes . getChromosomes () ) ; }
Code	{ return chromosomes . iterator ( chromosomes . getChromosomes () ) ; }
Distance : 7

309
Tree	{ return ( byte [] ) chromosomes . iterator () ; }
Code	{ return ( byte [] ) chromosomes . iterator () ; }
Distance : 5

310
Tree	{ return chromosomes . iterator () ; } void
Code	{ return chromosomes . iterator () ; } void
Distance : 3

311
Tree	{ return super . getChromosomes () ; }
Code	{ return super . getChromosomes () ; }
Distance : 3

312
Tree	{ return ( ( chromosomes ) chromosomes ) . iterator () ; } Fraction
Code	{ return ( ( chromosomes ) chromosomes ) . iterator () ; } Fraction
Distance : 7

313
Tree	{ return chromosomes . iterator () ; } Fraction
Code	{ return chromosomes . iterator () ; } Fraction
Distance : 3

314
Tree	{ return ( ( chromosomes ) chromosomes ) . iterator () ; } assertEquals
Code	{ return ( ( chromosomes ) chromosomes ) . iterator () ; } assertEquals
Distance : 7

315
Tree	{ return ( int [] ) chromosomes . getChromosomes () ; }
Code	{ return ( int [] ) chromosomes . getChromosomes () ; }
Distance : 6

316
Tree	{ return new chromosomes () ; } field
Code	{ return new chromosomes () ; } field
Distance : 5

317
Tree	{ return chromosomes . iterator () . getChromosomes ( chromosomes ) ; }
Code	{ return chromosomes . iterator () . getChromosomes ( chromosomes ) ; }
Distance : 7

318
Tree	{ return getChromosomes () ; }
Code	{ return getChromosomes () ; }
Distance : 3

319
Tree	{ return ( chromosomes == null ? super(); : chromosomes . getChromosomes () ) ; }
Code	{ return ( chromosomes == null ? super(); : chromosomes . getChromosomes () ) ; }
Distance : 10

320
Tree	{ return new anovaPValue () ; }
Code	{ return new anovaPValue () ; }
Distance : 4

321
Tree	{ return this . chromosomes ; } false
Code	{ return this . chromosomes ; } false
Distance : 5

322
Tree	{ return chromosomes . iterator ( chromosomes . iterator () ) ; }
Code	{ return chromosomes . iterator ( chromosomes . iterator () ) ; }
Distance : 6

323
Tree	{ return ( chromosomes ) chromosomes . getChromosomes () ; }
Code	{ return ( chromosomes ) chromosomes . getChromosomes () ; }
Distance : 5

324
Tree	{ return chromosomes . iterator () ; } field
Code	{ return chromosomes . iterator () ; } field
Distance : 3

325
Tree	{ return chromosomes . iterator () ; } nCols
Code	{ return chromosomes . iterator () ; } nCols
Distance : 3

326
Tree	{ return chromosomes . iterator () ; } k
Code	{ return chromosomes . iterator () ; } k
Distance : 3

327
Tree	{ return chromosomes . iterator () ; } k
Code	{ return chromosomes . iterator () ; } k
Distance : 3

328
Tree	{ return chromosomes . getChromosomes () iterator chromosomes . getChromosomes () ; }
Code	{ return chromosomes . getChromosomes () iterator chromosomes . getChromosomes () ; }
Distance : 5

329
Tree	{ return STRING_CONSTANT ; } field
Code	{ return STRING_CONSTANT ; } field
Distance : 6

330
Tree	{ return chromosomes . getChromosomes ( chromosomes , chromosomes ) ; }
Code	{ return chromosomes . getChromosomes ( chromosomes , chromosomes ) ; }
Distance : 7

331
Tree	{ return chromosomes . getChromosomes () . < chromosomes > iterator () ; }
Code	{ return chromosomes . getChromosomes () . < chromosomes > iterator () ; }
Distance : 5

332
Tree	{ return ( double [] ) chromosomes . iterator () ; }
Code	{ return ( double [] ) chromosomes . iterator () ; }
Distance : 5

333
Tree	{ return chromosomes . iterator () () chromosomes . iterator () ; } point
Code	{ return chromosomes . iterator () () chromosomes . iterator () ; } point
Distance : 6

334
Tree	{ return super . iterator () ; } Fraction
Code	{ return super . iterator () ; } Fraction
Distance : 3

335
Tree	{ return ! chromosomes . iterator () ; }
Code	{ return ! chromosomes . iterator () ; }
Distance : 2

336
Tree	{ return new chromosomes ( chromosomes ) ; }
Code	{ return new chromosomes ( chromosomes ) ; }
Distance : 5

337
Tree	{ return chromosomes () ; } Complex
Code	{ return chromosomes () ; } Complex
Distance : 5

338
Tree	{ return chromosomes . getChromosomes () . iterator ( chromosomes ) ; }
Code	{ return chromosomes . getChromosomes () . iterator ( chromosomes ) ; }
Distance : 5

339
Tree	{ return iterator ( chromosomes ) ; } nCols
Code	{ return iterator ( chromosomes ) ; } nCols
Distance : 6

340
Tree	{ return chromosomes == continue; iterator chromosomes . getChromosomes () ; }
Code	{ return chromosomes == continue; iterator chromosomes . getChromosomes () ; }
Distance : 6

341
Tree	{ return chromosomes - NUMBER_CONSTANT ; } data
Code	{ return chromosomes - NUMBER_CONSTANT ; } data
Distance : 6

342
Tree	{ return new chromosomes () . getChromosomes () ; }
Code	{ return new chromosomes () . getChromosomes () ; }
Distance : 3

343
Tree	{ return chromosomes == iterator iterator chromosomes . iterator () ; }
Code	{ return chromosomes == iterator iterator chromosomes . iterator () ; }
Distance : 5

344
Tree	{ return SubPlane ; }
Code	{ return SubPlane ; }
Distance : 5

345
Tree	{ return chromosomes ; } void
Code	{ return chromosomes ; } void
Distance : 6

346
Tree	{ return iterator ( chromosomes . iterator () ) ; }
Code	{ return iterator ( chromosomes . iterator () ) ; }
Distance : 4

347
Tree	{ return chromosomes - NUMBER_CONSTANT ; } false
Code	{ return chromosomes - NUMBER_CONSTANT ; } false
Distance : 6

348
Tree	{ return iterator ( chromosomes . getChromosomes () , chromosomes . iterator () ) ; }
Code	{ return iterator ( chromosomes . getChromosomes () , chromosomes . iterator () ) ; }
Distance : 7

349
Tree	{ return chromosomes . getChromosomes ( chromosomes . iterator () ) . iterator () ; }
Code	{ return chromosomes . getChromosomes ( chromosomes . iterator () ) . iterator () ; }
Distance : 7

350
Tree	{ return iterator ( chromosomes . iterator () , chromosomes . iterator () ) ; }
Code	{ return iterator ( chromosomes . iterator () , chromosomes . iterator () ) ; }
Distance : 8

351
Tree	{ return chromosomes . getChromosomes ( chromosomes . getChromosomes () ) . iterator () ; }
Code	{ return chromosomes . getChromosomes ( chromosomes . getChromosomes () ) . iterator () ; }
Distance : 7

352
Tree	{ return iterator ( chromosomes . getChromosomes () ) ; } point
Code	{ return iterator ( chromosomes . getChromosomes () ) ; } point
Distance : 6

353
Tree	{ return ( chromosomes == null ? continue; : chromosomes . getChromosomes () ) ; }
Code	{ return ( chromosomes == null ? continue; : chromosomes . getChromosomes () ) ; }
Distance : 10

354
Tree	{ return ( chromosomes == null ? iterator : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == null ? iterator : chromosomes . iterator () ) ; }
Distance : 9

355
Tree	{ return new iterator ( chromosomes ) ; }
Code	{ return new iterator ( chromosomes ) ; }
Distance : 5

356
Tree	{ return this . chromosomes ; } data
Code	{ return this . chromosomes ; } data
Distance : 5

357
Tree	{ return ( ( chromosomes ) chromosomes ) . getChromosomes () ; }
Code	{ return ( ( chromosomes ) chromosomes ) . getChromosomes () ; }
Distance : 7

358
Tree	{ return new chromosomes () ; } void
Code	{ return new chromosomes () ; } void
Distance : 5

359
Tree	{ return chromosomes == null ? break; : chromosomes . iterator () ; }
Code	{ return chromosomes == null ? break; : chromosomes . iterator () ; }
Distance : 7

360
Tree	{ return new chromosomes () ; } p
Code	{ return new chromosomes () ; } p
Distance : 5

361
Tree	{ return ( chromosomes ) chromosomes . iterator () ; } void
Code	{ return ( chromosomes ) chromosomes . iterator () ; } void
Distance : 5

362
Tree	{ return chromosomes == null ? break; : chromosomes . getChromosomes () ; }
Code	{ return chromosomes == null ? break; : chromosomes . getChromosomes () ; }
Distance : 8

363
Tree	{ return chromosomes . iterator ( chromosomes ) ; } void
Code	{ return chromosomes . iterator ( chromosomes ) ; } void
Distance : 6

364
Tree	{ return ( chromosomes == break; ? null : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == break; ? null : chromosomes . iterator () ) ; }
Distance : 9

365
Tree	{ return chromosomes . iterator ( chromosomes ) ; } Override
Code	{ return chromosomes . iterator ( chromosomes ) ; } Override
Distance : 6

366
Tree	{ return getChromosomes ( chromosomes . getChromosomes () ) ; }
Code	{ return getChromosomes ( chromosomes . getChromosomes () ) ; }
Distance : 4

367
Tree	{ return new chromosomes () ; } Fraction
Code	{ return new chromosomes () ; } Fraction
Distance : 5

368
Tree	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } nCols
Code	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } nCols
Distance : 5

369
Tree	{ return chromosomes . iterator () . iterator ( chromosomes ) ; } Array2DRowFieldMatrix
Code	{ return chromosomes . iterator () . iterator ( chromosomes ) ; } Array2DRowFieldMatrix
Distance : 7

370
Tree	{ return chromosomes . iterator ( chromosomes ) ; } Fraction
Code	{ return chromosomes . iterator ( chromosomes ) ; } Fraction
Distance : 6

371
Tree	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } k
Code	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } k
Distance : 5

372
Tree	{ return chromosomes . iterator ( chromosomes ) ; } assertEquals
Code	{ return chromosomes . iterator ( chromosomes ) ; } assertEquals
Distance : 6

373
Tree	{ return new chromosomes () ; } data
Code	{ return new chromosomes () ; } data
Distance : 5

374
Tree	{ return chromosomes . iterator () . iterator ( chromosomes ) ; } MatrixUtils
Code	{ return chromosomes . iterator () . iterator ( chromosomes ) ; } MatrixUtils
Distance : 7

375
Tree	{ return chromosomes == null ? super(); : chromosomes . iterator () ; }
Code	{ return chromosomes == null ? super(); : chromosomes . iterator () ; }
Distance : 7

376
Tree	{ return ! chromosomes . iterator () ; } Assert
Code	{ return ! chromosomes . iterator () ; } Assert
Distance : 3

377
Tree	{ return chromosomes . iterator () . iterator ( chromosomes ) ; } point
Code	{ return chromosomes . iterator () . iterator ( chromosomes ) ; } point
Distance : 7

378
Tree	{ return chromosomes . iterator () . iterator ( chromosomes ) ; } UnivariateRealFunction
Code	{ return chromosomes . iterator () . iterator ( chromosomes ) ; } UnivariateRealFunction
Distance : 7

379
Tree	{ return chromosomes . iterator () . iterator ( chromosomes ) ; } super
Code	{ return chromosomes . iterator () . iterator ( chromosomes ) ; } super
Distance : 7

380
Tree	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } Assert
Code	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } Assert
Distance : 5

381
Tree	{ return iterator ( chromosomes . getChromosomes () , iterator () ) ; } MathArrays
Code	{ return iterator ( chromosomes . getChromosomes () , iterator () ) ; } MathArrays
Distance : 7

382
Tree	{ return ! chromosomes . iterator () ; } Override
Code	{ return ! chromosomes . iterator () ; } Override
Distance : 3

383
Tree	{ return chromosomes . iterator () . iterator ( chromosomes ) ; } +
Code	{ return chromosomes . iterator () . iterator ( chromosomes ) ; } +
Distance : 7

384
Tree	{ return new GoalType () ; }
Code	{ return new GoalType () ; }
Distance : 4

385
Tree	{ return chromosomes . iterator () () chromosomes . iterator () ; } UnivariateRealFunction
Code	{ return chromosomes . iterator () () chromosomes . iterator () ; } UnivariateRealFunction
Distance : 6

386
Tree	{ return chromosomes . iterator () . < chromosomes > iterator () ; } Array2DRowFieldMatrix
Code	{ return chromosomes . iterator () . < chromosomes > iterator () ; } Array2DRowFieldMatrix
Distance : 7

387
Tree	{ return iterator ( chromosomes ) ; } k
Code	{ return iterator ( chromosomes ) ; } k
Distance : 6

388
Tree	{ return this . chromosomes . iterator () ; } Assert
Code	{ return this . chromosomes . iterator () ; } Assert
Distance : 4

389
Tree	{ return chromosomes . iterator () . < chromosomes > getChromosomes () ; }
Code	{ return chromosomes . iterator () . < chromosomes > getChromosomes () ; }
Distance : 7

390
Tree	{ return new chromosomes () ; } false
Code	{ return new chromosomes () ; } false
Distance : 5

391
Tree	{ return chromosomes . iterator () . < chromosomes > iterator () ; } MatrixUtils
Code	{ return chromosomes . iterator () . < chromosomes > iterator () ; } MatrixUtils
Distance : 7

392
Tree	{ return new ThreeEighthesFieldIntegrator () ; }
Code	{ return new ThreeEighthesFieldIntegrator () ; }
Distance : 4

393
Tree	{ return true ; } assertEquals
Code	{ return true ; } assertEquals
Distance : 6

394
Tree	{ return new RealVectorTestImpl () ; }
Code	{ return new RealVectorTestImpl () ; }
Distance : 4

395
Tree	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } void
Code	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } void
Distance : 5

396
Tree	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } Override
Code	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } Override
Distance : 5

397
Tree	{ return chromosomes ; } p
Code	{ return chromosomes ; } p
Distance : 6

398
Tree	{ return chromosomes . iterator ( chromosomes , chromosomes ) ; } Override
Code	{ return chromosomes . iterator ( chromosomes , chromosomes ) ; } Override
Distance : 8

399
Tree	{ return iterator () ; } Fraction
Code	{ return iterator () ; } Fraction
Distance : 4

400
Tree	{ return chromosomes . iterator ( chromosomes . iterator () ) ; } +
Code	{ return chromosomes . iterator ( chromosomes . iterator () ) ; } +
Distance : 7

401
Tree	{ return chromosomes . getChromosomes () && chromosomes . iterator () ; }
Code	{ return chromosomes . getChromosomes () && chromosomes . iterator () ; }
Distance : 4

402
Tree	{ return chromosomes . iterator () . chromosomes . getChromosomes () ; }
Code	{ return chromosomes . iterator () . chromosomes . getChromosomes () ; }
Distance : 6

403
Tree	{ return new PolygonsSet ( chromosomes ) ; }
Code	{ return new PolygonsSet ( chromosomes ) ; }
Distance : 5

404
Tree	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } Fraction
Code	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } Fraction
Distance : 5

405
Tree	{ return iterator () ; } nCols
Code	{ return iterator () ; } nCols
Distance : 4

406
Tree	{ return chromosomes . iterator () . < chromosomes > iterator () ; } point
Code	{ return chromosomes . iterator () . < chromosomes > iterator () ; } point
Distance : 7

407
Tree	{ return chromosomes . iterator () . iterator () ; } Array2DRowFieldMatrix
Code	{ return chromosomes . iterator () . iterator () ; } Array2DRowFieldMatrix
Distance : 4

408
Tree	{ return chromosomes . iterator () ; } nCols
Code	{ return chromosomes . iterator () ; } nCols
Distance : 3

409
Tree	{ return iterator ( chromosomes . getChromosomes () , iterator () ) ; } v.length
Code	{ return iterator ( chromosomes . getChromosomes () , iterator () ) ; } v.length
Distance : 7

410
Tree	{ return NUMBER_CONSTANT ; } Fraction
Code	{ return NUMBER_CONSTANT ; } Fraction
Distance : 6

411
Tree	{ return this . chromosomes ; } field
Code	{ return this . chromosomes ; } field
Distance : 5

412
Tree	{ return chromosomes () ; } Fraction
Code	{ return chromosomes () ; } Fraction
Distance : 5

413
Tree	{ return chromosomes . iterator ( chromosomes ) ; } Assert
Code	{ return chromosomes . iterator ( chromosomes ) ; } Assert
Distance : 6

414
Tree	{ return chromosomes . iterator () . < chromosomes > iterator () ; } UnivariateRealFunction
Code	{ return chromosomes . iterator () . < chromosomes > iterator () ; } UnivariateRealFunction
Distance : 7

415
Tree	{ return chromosomes . iterator () ; }
Code	{ return chromosomes . iterator () ; }
Distance : 2

416
Tree	{ return chromosomes . iterator ( chromosomes , chromosomes ) ; } field
Code	{ return chromosomes . iterator ( chromosomes , chromosomes ) ; } field
Distance : 8

417
Tree	{ return super . iterator () ; } assertEquals
Code	{ return super . iterator () ; } assertEquals
Distance : 3

418
Tree	{ return chromosomes . iterator () ; } assertEquals
Code	{ return chromosomes . iterator () ; } assertEquals
Distance : 3

419
Tree	{ return this . chromosomes . iterator () ; } void
Code	{ return this . chromosomes . iterator () ; } void
Distance : 4

========================================================================


========================================================================
Example Number: 23
Parent Code is: 
if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( Precision . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (32 (800{val=Precision}) (235{val=.}) (802{val=compareTo}) (214{val=(}) (800{val=entry}) (234{val=,}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (800{val=maxUlps}) (215{val=)})) (231{val=>}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=columnsToDrop}) (235{val=.}) (802{val=add}) (214{val=(}) (800{val=i}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (32 (800{val=Precision}) (235{val=.}) (802{val=compareTo}) (214{val=(}) (800{val=entry}) (234{val=,}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (800{val=epsilon}) (215{val=)})) (231{val=>}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=columnsToDrop}) (235{val=.}) (802{val=add}) (214{val=(}) (800{val=i}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/33/parent/src_main_java_org_apache_commons_math3_optimization_linear_SimplexTableau.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 340
Wrong
========================================================================
False

0
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

1
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

2
Tree	if ( entry . compareTo ( null , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( null , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

3
Tree	if ( entry . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

4
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , MathUtils.TWO_PI ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , MathUtils.TWO_PI ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

5
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , seed.length ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , seed.length ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

6
Tree	if ( entry . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

7
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , natural.length ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , natural.length ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

8
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , mean.length ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , mean.length ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

9
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 1

10
Tree	if ( entry . compareTo ( entry / Precision , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry / Precision , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

11
Tree	if ( entry . compareTo ( entry , this . i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , this . i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

12
Tree	if ( v.length ) { columnsToDrop . add ( i ) ; }
Code	if ( v.length ) { columnsToDrop . add ( i ) ; }
Distance : 12

13
Tree	if ( array.length != null ) { columnsToDrop . add ( i ) ; }
Code	if ( array.length != null ) { columnsToDrop . add ( i ) ; }
Distance : 12

14
Tree	if ( b.length != null ) { columnsToDrop . add ( i ) ; }
Code	if ( b.length != null ) { columnsToDrop . add ( i ) ; }
Distance : 12

15
Tree	if ( minValue != null ) { columnsToDrop . add ( i ) ; }
Code	if ( minValue != null ) { columnsToDrop . add ( i ) ; }
Distance : 12

16
Tree	if ( maxUlps . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( maxUlps . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

17
Tree	if ( compareTo ( STRING_CONSTANT , standardDeviation.length , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , standardDeviation.length , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

18
Tree	if ( c.length != null ) { columnsToDrop . add ( i ) ; }
Code	if ( c.length != null ) { columnsToDrop . add ( i ) ; }
Distance : 12

19
Tree	if ( startConfiguration.length ) { columnsToDrop . add ( i ) ; }
Code	if ( startConfiguration.length ) { columnsToDrop . add ( i ) ; }
Distance : 12

20
Tree	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 7

21
Tree	if ( STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Code	if ( STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Distance : 13

22
Tree	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , d.length , i , Precision.EPSILON ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , d.length , i , Precision.EPSILON ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 9

23
Tree	if ( Precision . compareTo ( STRING_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( Precision . compareTo ( STRING_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 4

24
Tree	if ( entry . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( Precision ) ; }
Code	if ( entry . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( Precision ) ; }
Distance : 6

25
Tree	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , Precision.EPSILON , i , Precision.EPSILON ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , Precision.EPSILON , i , Precision.EPSILON ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 9

26
Tree	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , mean.length , i , values.length ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , mean.length , i , values.length ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 9

27
Tree	if ( Precision . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Code	if ( Precision . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Distance : 5

28
Tree	if ( entry Precision compareTo ) { columnsToDrop . add ( i ) ; }
Code	if ( entry Precision compareTo ) { columnsToDrop . add ( i ) ; }
Distance : 11

29
Tree	if ( v.length != null ) { columnsToDrop . add ( i ) ; }
Code	if ( v.length != null ) { columnsToDrop . add ( i ) ; }
Distance : 12

30
Tree	if ( entry . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( Precision ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( Precision ) ; }
Distance : 6

31
Tree	if ( BigInteger.ZERO . compareTo ( entry , entry / columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( BigInteger.ZERO . compareTo ( entry , entry / columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

32
Tree	if ( add ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( add ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

33
Tree	if ( i . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

34
Tree	if ( entry . maxUlps ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . maxUlps ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

35
Tree	if ( i . compareTo ( ! ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( ! ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

36
Tree	if ( entry . compareTo ( null , STRING_CONSTANT , true ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Code	if ( entry . compareTo ( null , STRING_CONSTANT , true ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Distance : 5

37
Tree	if ( startConfiguration.length != null ) { columnsToDrop . add ( i ) ; }
Code	if ( startConfiguration.length != null ) { columnsToDrop . add ( i ) ; }
Distance : 12

38
Tree	if ( entry . compareTo ( STRING_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Code	if ( entry . compareTo ( STRING_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Distance : 5

39
Tree	if ( Precision Precision compareTo ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision Precision compareTo ) { columnsToDrop . add ( i ) ; }
Distance : 10

40
Tree	if ( entry Precision BigInteger.ZERO ) { columnsToDrop . add ( i ) ; }
Code	if ( entry Precision BigInteger.ZERO ) { columnsToDrop . add ( i ) ; }
Distance : 11

41
Tree	if ( entry . compareTo ( null , STRING_CONSTANT , true ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( entry . compareTo ( null , STRING_CONSTANT , true ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 5

42
Tree	if ( Precision . compareTo ( entry / Precision , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry / Precision , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

43
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Distance : 3

44
Tree	if ( entry Precision compareTo ) { columnsToDrop . add ( entry ) ; }
Code	if ( entry Precision compareTo ) { columnsToDrop . add ( entry ) ; }
Distance : 12

45
Tree	if ( compareTo ( STRING_CONSTANT , LocalizedFormats.UNSUPPORTED_EXPANSION_MODE , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , LocalizedFormats.UNSUPPORTED_EXPANSION_MODE , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

46
Tree	if ( entry . compareTo ( entry , this . Precision ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , this . Precision ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

47
Tree	if ( i . compareTo ( STRING_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( STRING_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

48
Tree	if ( entry . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Code	if ( entry . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Distance : 11

49
Tree	if ( Precision . compareTo ( NUMBER_CONSTANT , MathUtils.TWO_PI ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( NUMBER_CONSTANT , MathUtils.TWO_PI ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

50
Tree	if ( entry . compareTo ( STRING_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( entry . compareTo ( STRING_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 5

51
Tree	if ( Precision . compareTo ( ! ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( ! ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

52
Tree	if ( Precision . compareTo ( null , STRING_CONSTANT , true ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( Precision . compareTo ( null , STRING_CONSTANT , true ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 4

53
Tree	if ( d.length . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( d.length . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

54
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , GoalType.MINIMIZE ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , GoalType.MINIMIZE ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

55
Tree	if ( entry . compareTo ( STRING_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( STRING_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

56
Tree	if ( Precision . compareTo ( STRING_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( STRING_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

57
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , d.length ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , d.length ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

58
Tree	if ( Precision . compareTo ( entry , i , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , i , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

59
Tree	if ( entry . compareTo ( NUMBER_CONSTANT ) . add ( mean.length ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT ) . add ( mean.length ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

60
Tree	if ( entry Precision mean.length ) { columnsToDrop . add ( i ) ; }
Code	if ( entry Precision mean.length ) { columnsToDrop . add ( i ) ; }
Distance : 11

61
Tree	if ( entry . entry ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( entry . entry ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 7

62
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) - columnsToDrop ) { columnsToDrop . add ( entry ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) - columnsToDrop ) { columnsToDrop . add ( entry ) ; }
Distance : 5

63
Tree	if ( maxUlps . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( maxUlps . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

64
Tree	if ( i . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 10

65
Tree	if ( compareTo ( entry , entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry , entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

66
Tree	if ( entry Precision StepNormalizerMode.MULTIPLES ) { columnsToDrop . add ( i ) ; }
Code	if ( entry Precision StepNormalizerMode.MULTIPLES ) { columnsToDrop . add ( i ) ; }
Distance : 11

67
Tree	if ( v.length . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( v.length . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

68
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

69
Tree	if ( BigInteger.ZERO != null ) { columnsToDrop . add ( i ) ; }
Code	if ( BigInteger.ZERO != null ) { columnsToDrop . add ( i ) ; }
Distance : 12

70
Tree	if ( Precision . compareTo ( entry / i , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry / i , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

71
Tree	if ( entry . compareTo ( maxUlps , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( maxUlps , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

72
Tree	if ( d.length . compareTo ( entry , maxUlps / Precision ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( d.length . compareTo ( entry , maxUlps / Precision ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

73
Tree	if ( entry . compareTo ( NUMBER_CONSTANT ) . add ( d.length ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT ) . add ( d.length ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

74
Tree	if ( entry . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Code	if ( entry . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Distance : 6

75
Tree	if ( BigInteger.ZERO . compareTo ( entry , i / columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( BigInteger.ZERO . compareTo ( entry , i / columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

76
Tree	if ( BigInteger.ZERO . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( BigInteger.ZERO . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 9

77
Tree	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , d.length ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , d.length ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

78
Tree	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , otherL.cos , i , Precision.EPSILON ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , otherL.cos , i , Precision.EPSILON ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 9

79
Tree	if ( entry . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Code	if ( entry . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Distance : 6

80
Tree	if ( Precision . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( Precision . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 4

81
Tree	if ( entry . compareTo ( entry , this . columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , this . columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

82
Tree	if ( BigInteger.ZERO ) { columnsToDrop . add ( entry ) ; }
Code	if ( BigInteger.ZERO ) { columnsToDrop . add ( entry ) ; }
Distance : 13

83
Tree	if ( entry . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

84
Tree	if ( c.length . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( c.length . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

85
Tree	if ( entry . compareTo ( null , STRING_CONSTANT , true ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( null , STRING_CONSTANT , true ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

86
Tree	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , Precision.EPSILON ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , Precision.EPSILON ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

87
Tree	if ( entry . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

88
Tree	if ( Precision . compareTo ( entry / maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry / maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

89
Tree	if ( entry . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

90
Tree	if ( add ( entry . entry ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( add ( entry . entry ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

91
Tree	if ( maxUlps . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( maxUlps . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

92
Tree	if ( compareTo ( entry . entry ( maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . entry ( maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

93
Tree	if ( compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

94
Tree	if ( i . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

95
Tree	if ( entry . compareTo ( entry / i , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry / i , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

96
Tree	if ( add ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( add ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

97
Tree	if ( entry . compareTo ( entry , this . entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , this . entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

98
Tree	if ( mean.length . compareTo ( entry , maxUlps / Precision ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( mean.length . compareTo ( entry , maxUlps / Precision ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

99
Tree	if ( entry . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 10

100
Tree	if ( entry . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( entry . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 4

101
Tree	if ( Precision . maxUlps ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . maxUlps ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

102
Tree	if ( compareTo ( STRING_CONSTANT , mean.length , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , mean.length , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

103
Tree	if ( entry . i ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . i ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

104
Tree	if ( entry . compareTo ( entry / epsilon , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry / epsilon , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

105
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( Precision ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( Precision ) ; }
Distance : 6

106
Tree	if ( compareTo ( STRING_CONSTANT , fraction.numerator , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , fraction.numerator , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

107
Tree	if ( entry . compareTo ( boolean ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( boolean ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

108
Tree	if ( Precision . compareTo ( null , STRING_CONSTANT , true ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( null , STRING_CONSTANT , true ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

109
Tree	if ( entry Precision Long.MIN_VALUE ) { columnsToDrop . add ( i ) ; }
Code	if ( entry Precision Long.MIN_VALUE ) { columnsToDrop . add ( i ) ; }
Distance : 11

110
Tree	if ( entry . compareTo ( byte ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( byte ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

111
Tree	if ( add ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Code	if ( add ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Distance : 7

112
Tree	if ( entry . entry ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . entry ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

113
Tree	if ( i . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

114
Tree	if ( Precision . compareTo ( NUMBER_CONSTANT ) . add ( fraction.numerator ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( NUMBER_CONSTANT ) . add ( fraction.numerator ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

115
Tree	if ( Precision . compareTo ( entry , epsilon , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , epsilon , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

116
Tree	if ( Precision . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

117
Tree	if ( array.length . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( array.length . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

118
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

119
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Distance : 6

120
Tree	if ( compareTo ( entry . i ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . i ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

121
Tree	if ( entry . compareTo ( null , Precision ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( null , Precision ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

122
Tree	if ( entry . compareTo ( true ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( true ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

123
Tree	if ( entry . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

124
Tree	if ( i . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

125
Tree	if ( STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { Precision . add ( i ) ; }
Code	if ( STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { Precision . add ( i ) ; }
Distance : 13

126
Tree	if ( entry . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( entry . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 6

127
Tree	if ( Precision . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Code	if ( Precision . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Distance : 5

128
Tree	if ( entry . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( entry . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 6

129
Tree	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , otherL.cos ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , otherL.cos ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

130
Tree	if ( add ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( add ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

131
Tree	if ( i . compareTo ( null , STRING_CONSTANT , true ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( null , STRING_CONSTANT , true ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

132
Tree	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Code	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Distance : 7

133
Tree	if ( entry . compareTo ( NUMBER_CONSTANT ) . compareTo ( fraction.numerator ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT ) . compareTo ( fraction.numerator ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

134
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 3

135
Tree	if ( Precision . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

136
Tree	if ( Precision . compareTo ( entry / entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry / entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

137
Tree	if ( STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 13

138
Tree	if ( entry . compareTo ( null , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( null , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

139
Tree	if ( array.length ) { columnsToDrop . add ( i ) ; }
Code	if ( array.length ) { columnsToDrop . add ( i ) ; }
Distance : 12

140
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) - columnsToDrop ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) - columnsToDrop ) { columnsToDrop . add ( i ) ; }
Distance : 4

141
Tree	if ( entry . compareTo ( NUMBER_CONSTANT ) . add ( fraction.numerator ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT ) . add ( fraction.numerator ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

142
Tree	if ( maxUlps . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( maxUlps . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

143
Tree	if ( b.length . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( b.length . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

144
Tree	if ( Precision . compareTo ( entry / Precision , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry / Precision , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

145
Tree	if ( entry . compareTo ( null , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( null , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

146
Tree	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , mean.length ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , mean.length ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

147
Tree	if ( i . compareTo ( null , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( null , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

148
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , v2.x ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , v2.x ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

149
Tree	if ( Precision . compareTo ( null , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( null , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

150
Tree	if ( i . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

151
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , Double.MIN_VALUE ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , Double.MIN_VALUE ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

152
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

153
Tree	if ( Precision . compareTo ( entry , this . entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , this . entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

154
Tree	if ( entry . compareTo ( entry / entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry / entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

155
Tree	if ( mean.length . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( mean.length . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

156
Tree	if ( Precision . compareTo ( null , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( null , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

157
Tree	if ( STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { Precision . add ( entry ) ; }
Code	if ( STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { Precision . add ( entry ) ; }
Distance : 14

158
Tree	if ( compareTo ( entry . entry ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . entry ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

159
Tree	if ( Precision . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( Precision . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 5

160
Tree	if ( entry . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( entry . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 5

161
Tree	if ( entry . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( Precision ) ; }
Code	if ( entry . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( Precision ) ; }
Distance : 11

162
Tree	if ( BigInteger.ZERO . compareTo ( entry , maxUlps / columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( BigInteger.ZERO . compareTo ( entry , maxUlps / columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

163
Tree	if ( Precision . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 9

164
Tree	if ( entry . compareTo ( entry , d.length , maxUlps , mean.length ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , d.length , maxUlps , mean.length ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

165
Tree	if ( entry . compareTo ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

166
Tree	if ( maxUlps . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( maxUlps . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

167
Tree	if ( d.length != null ) { columnsToDrop . add ( i ) ; }
Code	if ( d.length != null ) { columnsToDrop . add ( i ) ; }
Distance : 12

168
Tree	if ( entry . compareTo ( NUMBER_CONSTANT ) . add ( v1.x ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT ) . add ( v1.x ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

169
Tree	if ( Precision . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

170
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) - columnsToDrop ) { columnsToDrop . add ( epsilon ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) - columnsToDrop ) { columnsToDrop . add ( epsilon ) ; }
Distance : 5

171
Tree	if ( Precision . compareTo ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

172
Tree	if ( compareTo ( STRING_CONSTANT , startConfiguration.length , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , startConfiguration.length , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

173
Tree	if ( entry . compareTo ( NUMBER_CONSTANT ) . add ( Percentile.EstimationType.R_9 ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT ) . add ( Percentile.EstimationType.R_9 ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

174
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) - columnsToDrop ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) - columnsToDrop ) { columnsToDrop . add ( i ) ; }
Distance : 3

175
Tree	if ( entry Precision startConfiguration.length ) { columnsToDrop . add ( i ) ; }
Code	if ( entry Precision startConfiguration.length ) { columnsToDrop . add ( i ) ; }
Distance : 11

176
Tree	if ( maxUlps . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) - columnsToDrop ) { columnsToDrop . add ( i ) ; }
Code	if ( maxUlps . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) - columnsToDrop ) { columnsToDrop . add ( i ) ; }
Distance : 4

177
Tree	if ( Precision . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( Precision . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 5

178
Tree	if ( Precision . entry ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . entry ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

179
Tree	if ( compareTo ( STRING_CONSTANT , BigInteger.ZERO , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , BigInteger.ZERO , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

180
Tree	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 8

181
Tree	if ( Precision . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( Precision . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 5

182
Tree	if ( BigInteger.ZERO != null ) { columnsToDrop . add ( entry ) ; }
Code	if ( BigInteger.ZERO != null ) { columnsToDrop . add ( entry ) ; }
Distance : 13

183
Tree	if ( i . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

184
Tree	if ( entry . Precision ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . Precision ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

185
Tree	if ( entry . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Distance : 6

186
Tree	if ( i . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

187
Tree	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , mean.length , i , absolutePositivityThreshold ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , mean.length , i , absolutePositivityThreshold ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 9

188
Tree	if ( STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { columnsToDrop . add ( maxUlps ) ; }
Code	if ( STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { columnsToDrop . add ( maxUlps ) ; }
Distance : 13

189
Tree	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

190
Tree	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , absolutePositivityThreshold , i , Precision.EPSILON ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , absolutePositivityThreshold , i , Precision.EPSILON ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 9

191
Tree	if ( entry . compareTo ( <= ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( <= ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

192
Tree	if ( BigInteger.ZERO . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( BigInteger.ZERO . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

193
Tree	if ( Precision . compareTo ( null , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( null , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

194
Tree	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

195
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 6

196
Tree	if ( STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 12

197
Tree	if ( minValue ) { columnsToDrop . add ( i ) ; }
Code	if ( minValue ) { columnsToDrop . add ( i ) ; }
Distance : 12

198
Tree	if ( Precision . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Code	if ( Precision . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Distance : 10

199
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Distance : 5

200
Tree	if ( BigInteger.ZERO ) { columnsToDrop . add ( i ) ; }
Code	if ( BigInteger.ZERO ) { columnsToDrop . add ( i ) ; }
Distance : 12

201
Tree	if ( entry . compareTo ( NUMBER_CONSTANT ) . add ( NaNStrategy.FAILED ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT ) . add ( NaNStrategy.FAILED ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

202
Tree	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

203
Tree	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , epsilon ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , epsilon ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

204
Tree	if ( Precision . compareTo ( entry , entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

205
Tree	if ( entry Precision standardDeviation.length ) { columnsToDrop . add ( i ) ; }
Code	if ( entry Precision standardDeviation.length ) { columnsToDrop . add ( i ) ; }
Distance : 11

206
Tree	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , LocalizedFormats.UNSUPPORTED_EXPANSION_MODE , i , Precision.EPSILON ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , LocalizedFormats.UNSUPPORTED_EXPANSION_MODE , i , Precision.EPSILON ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 9

207
Tree	if ( Precision . compareTo ( entry / i , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry / i , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

208
Tree	if ( entry . compareTo ( null , STRING_CONSTANT , true ) > NUMBER_CONSTANT ) { columnsToDrop . add ( Precision ) ; }
Code	if ( entry . compareTo ( null , STRING_CONSTANT , true ) > NUMBER_CONSTANT ) { columnsToDrop . add ( Precision ) ; }
Distance : 5

209
Tree	if ( d.length ) { columnsToDrop . add ( i ) ; }
Code	if ( d.length ) { columnsToDrop . add ( i ) ; }
Distance : 12

210
Tree	if ( entry . compareTo ( entry , entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

211
Tree	if ( entry . compareTo ( entry / columnsToDrop , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry / columnsToDrop , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

212
Tree	if ( entry . compareTo ( ! ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( ! ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

213
Tree	if ( add ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( add ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 8

214
Tree	if ( mean.length . compareTo ( entry , maxUlps / columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( mean.length . compareTo ( entry , maxUlps / columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

215
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) - Precision ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) - Precision ) { columnsToDrop . add ( i ) ; }
Distance : 4

216
Tree	if ( maxUlps . compareTo ( STRING_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( maxUlps . compareTo ( STRING_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

217
Tree	if ( entry . compareTo ( entry / i , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry / i , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

218
Tree	if ( STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { entry . add ( i ) ; }
Code	if ( STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { entry . add ( i ) ; }
Distance : 13

219
Tree	if ( Precision . Precision ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . Precision ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

220
Tree	if ( startConfiguration.length . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( startConfiguration.length . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

221
Tree	if ( entry . compareTo ( NUMBER_CONSTANT ) . add ( Integer.MAX_VALUE ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT ) . add ( Integer.MAX_VALUE ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

222
Tree	if ( entry . compareTo ( NUMBER_CONSTANT ) . add ( Coordinates3D.ZERO ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT ) . add ( Coordinates3D.ZERO ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

223
Tree	if ( BigInteger.ZERO . compareTo ( entry , maxUlps / Precision ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( BigInteger.ZERO . compareTo ( entry , maxUlps / Precision ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

224
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 5

225
Tree	if ( entry . compareTo ( entry , i , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , i , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

226
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

227
Tree	if ( mean.length ) { columnsToDrop . add ( i ) ; }
Code	if ( mean.length ) { columnsToDrop . add ( i ) ; }
Distance : 12

228
Tree	if ( compareTo ( STRING_CONSTANT , yArray.length , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , yArray.length , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

229
Tree	if ( entry . compareTo ( entry / maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry / maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

230
Tree	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { entry . add ( i ) ; }
Code	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { entry . add ( i ) ; }
Distance : 7

231
Tree	if ( add ( entry , entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( add ( entry , entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

232
Tree	if ( entry . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( Precision ) ; }
Code	if ( entry . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( Precision ) ; }
Distance : 6

233
Tree	if ( Precision . compareTo ( null , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( null , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

234
Tree	if ( entry . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( entry . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 11

235
Tree	if ( entry . compareTo ( null , STRING_CONSTANT , true ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Code	if ( entry . compareTo ( null , STRING_CONSTANT , true ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Distance : 5

236
Tree	if ( entry . compareTo ( i , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( i , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

237
Tree	if ( maxUlps . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( maxUlps . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 10

238
Tree	if ( STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 13

239
Tree	if ( entry . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Code	if ( entry . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Distance : 6

240
Tree	if ( entry . compareTo ( entry / epsilon , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry / epsilon , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

241
Tree	if ( entry . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Code	if ( entry . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Distance : 6

242
Tree	if ( entry . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Code	if ( entry . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Distance : 11

243
Tree	if ( compareTo ( entry . epsilon ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . epsilon ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

244
Tree	if ( Precision . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( Precision . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 5

245
Tree	if ( i . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

246
Tree	if ( compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Code	if ( compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Distance : 5

247
Tree	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , line.sin , i , Precision.EPSILON ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , line.sin , i , Precision.EPSILON ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 9

248
Tree	if ( compareTo ( STRING_CONSTANT , v.length , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , v.length , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

249
Tree	if ( entry . compareTo ( i , NUMBER_CONSTANT , maxUlps ) - columnsToDrop ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( i , NUMBER_CONSTANT , maxUlps ) - columnsToDrop ) { columnsToDrop . add ( i ) ; }
Distance : 5

250
Tree	if ( entry . compareTo ( STRING_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( Precision ) ; }
Code	if ( entry . compareTo ( STRING_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( Precision ) ; }
Distance : 5

251
Tree	if ( entry . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 6

252
Tree	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , mean.length , i , Precision.EPSILON ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , mean.length , i , Precision.EPSILON ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 9

253
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

254
Tree	if ( entry . compareTo ( entry / entry , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry / entry , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

255
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 1

256
Tree	if ( entry . compareTo ( null , null ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Code	if ( entry . compareTo ( null , null ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Distance : 6

257
Tree	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , absolutePositivityThreshold ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , absolutePositivityThreshold ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

258
Tree	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , BigInteger.ZERO , i , Precision.EPSILON ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , BigInteger.ZERO , i , Precision.EPSILON ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 9

259
Tree	if ( compareTo ( maxUlps . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( maxUlps . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

260
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) - maxUlps ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) - maxUlps ) { columnsToDrop . add ( i ) ; }
Distance : 4

261
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( Precision ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( Precision ) ; }
Distance : 5

262
Tree	if ( Precision . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

263
Tree	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , LocalizedFormats.UNSUPPORTED_EXPANSION_MODE ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , LocalizedFormats.UNSUPPORTED_EXPANSION_MODE ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

264
Tree	if ( entry . compareTo ( null , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( null , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

265
Tree	if ( c.length ) { columnsToDrop . add ( i ) ; }
Code	if ( c.length ) { columnsToDrop . add ( i ) ; }
Distance : 12

266
Tree	if ( entry . compareTo ( entry , epsilon , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , epsilon , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

267
Tree	if ( Precision . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

268
Tree	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , line.sin ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , line.sin ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

269
Tree	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , BigInteger.ZERO ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , BigInteger.ZERO ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

270
Tree	if ( entry . compareTo ( entry / maxUlps , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry / maxUlps , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

271
Tree	if ( Precision . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

272
Tree	if ( i . entry ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . entry ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

273
Tree	if ( minValue . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( minValue . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

274
Tree	if ( b.length ) { columnsToDrop . add ( i ) ; }
Code	if ( b.length ) { columnsToDrop . add ( i ) ; }
Distance : 12

275
Tree	if ( maxUlps . compareTo ( null , STRING_CONSTANT , true ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( maxUlps . compareTo ( null , STRING_CONSTANT , true ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

276
Tree	if ( BigInteger.ZERO . compareTo ( entry , maxUlps / entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( BigInteger.ZERO . compareTo ( entry , maxUlps / entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

277
Tree	if ( maxUlps . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( maxUlps . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

278
Tree	if ( Precision . compareTo ( entry / entry , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry / entry , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

279
Tree	if ( STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { columnsToDrop . add ( Precision ) ; }
Code	if ( STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { columnsToDrop . add ( Precision ) ; }
Distance : 13

280
Tree	if ( compareTo ( entry , i , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry , i , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

281
Tree	if ( compareTo ( STRING_CONSTANT , normalize , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , normalize , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

282
Tree	if ( d.length . compareTo ( entry , maxUlps / columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( d.length . compareTo ( entry , maxUlps / columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

283
Tree	if ( add ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( add ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

284
Tree	if ( compareTo ( entry . Precision ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . Precision ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

285
Tree	if ( entry . compareTo ( entry / columnsToDrop , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry / columnsToDrop , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

286
Tree	if ( BigInteger.ZERO . compareTo ( entry , epsilon / columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( BigInteger.ZERO . compareTo ( entry , epsilon / columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

287
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , columnsToDrop ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

288
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

289
Tree	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , v2.y ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , Coordinates3D.ZERO , maxUlps , v2.y ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

290
Tree	if ( Precision . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Code	if ( Precision . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Distance : 4

291
Tree	if ( compareTo ( entry . entry ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Code	if ( compareTo ( entry . entry ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Distance : 8

292
Tree	if ( compareTo ( entry . entry ( i ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . entry ( i ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

293
Tree	if ( compareTo ( entry . maxUlps ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . maxUlps ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

294
Tree	if ( Precision . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Code	if ( Precision . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Distance : 5

295
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Distance : 5

296
Tree	if ( entry . compareTo ( null , STRING_CONSTANT , false ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( null , STRING_CONSTANT , false ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

297
Tree	if ( Precision . compareTo ( STRING_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Code	if ( Precision . compareTo ( STRING_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Distance : 4

298
Tree	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Code	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Distance : 7

299
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 1

300
Tree	if ( i . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

301
Tree	if ( compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 5

302
Tree	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Code	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Distance : 8

303
Tree	if ( compareTo ( i , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( i , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

304
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) - columnsToDrop ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) - columnsToDrop ) { columnsToDrop . add ( i ) ; }
Distance : 4

305
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 3

306
Tree	if ( Precision . compareTo ( entry / maxUlps , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry / maxUlps , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

307
Tree	if ( entry . compareTo ( i , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( i , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

308
Tree	if ( compareTo ( entry . entry ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( compareTo ( entry . entry ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 8

309
Tree	if ( mean.length != null ) { columnsToDrop . add ( i ) ; }
Code	if ( mean.length != null ) { columnsToDrop . add ( i ) ; }
Distance : 12

310
Tree	if ( entry . compareTo ( entry , this . epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , this . epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

311
Tree	if ( entry . compareTo ( entry / Precision , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry / Precision , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

312
Tree	if ( Precision . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

313
Tree	if ( compareTo ( entry , Precision , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry , Precision , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

314
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

315
Tree	if ( compareTo ( entry . compareTo ( i , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . compareTo ( i , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

316
Tree	if ( entry . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( Precision ) ; }
Code	if ( entry . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( Precision ) ; }
Distance : 6

317
Tree	if ( compareTo ( STRING_CONSTANT , v1.data , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , v1.data , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

318
Tree	if ( maxUlps . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( maxUlps . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

319
Tree	if ( Precision . compareTo ( <= ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( <= ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

320
Tree	if ( entry . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( entry . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 6

321
Tree	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 7

322
Tree	if ( entry Precision Precision ) { columnsToDrop . add ( i ) ; }
Code	if ( entry Precision Precision ) { columnsToDrop . add ( i ) ; }
Distance : 11

323
Tree	if ( i . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) - columnsToDrop ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) - columnsToDrop ) { columnsToDrop . add ( i ) ; }
Distance : 4

324
Tree	if ( STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 13

325
Tree	if ( entry . compareTo ( i , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( i , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

326
Tree	if ( Precision . i ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . i ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

327
Tree	if ( compareTo ( entry , epsilon , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry , epsilon , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

328
Tree	if ( Precision . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( Precision . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 10

329
Tree	if ( add ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( add ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 7

330
Tree	if ( entry . compareTo ( STRING_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Code	if ( entry . compareTo ( STRING_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Distance : 5

331
Tree	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , columnsToDrop ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . compareTo ( entry , NUMBER_CONSTANT , columnsToDrop ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

332
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Distance : 6

333
Tree	if ( compareTo ( i . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( i . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

334
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { entry . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { entry . add ( i ) ; }
Distance : 6

335
Tree	if ( entry . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Distance : 6

336
Tree	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( Precision ) ; }
Code	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( Precision ) ; }
Distance : 7

337
Tree	if ( add ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Code	if ( add ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Distance : 8

338
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( epsilon ) ; }
Distance : 3

339
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 1

========================================================================


========================================================================
Example Number: 24
Parent Code is: 
final int n1n2prod = n1 * n2 ;
-------------------------------------------------------------------------------
Child code is: 
final double n1n2prod = n1 * n2 ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (39{val=int}) (59 (800{val=n1n2prod}) (204{val==}) (27 (800{val=n1}) (202{val=*}) (800{val=n2}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (39{val=double}) (59 (800{val=n1n2prod}) (204{val==}) (27 (800{val=n1}) (202{val=*}) (800{val=n2}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/30/parent/src_main_java_org_apache_commons_math3_stat_inference_MannWhitneyUTest.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 380
Wrong
========================================================================
False

0
Tree	final long n1n2prod = ( long ) n1 * n2 ;
Code	final long n1n2prod = ( long ) n1 * n2 ;
Distance : 4

1
Tree	final long n1n2prod = n1 + NUMBER_CONSTANT ;
Code	final long n1n2prod = n1 + NUMBER_CONSTANT ;
Distance : 3

2
Tree	final long n1n2prod = NUMBER_CONSTANT * currentState.length ;
Code	final long n1n2prod = NUMBER_CONSTANT * currentState.length ;
Distance : 3

3
Tree	final long n1n2prod = n2 * n2 ;
Code	final long n1n2prod = n2 * n2 ;
Distance : 2

4
Tree	final int n1n2prod = ( long ) n1 * n2 ;
Code	final int n1n2prod = ( long ) n1 * n2 ;
Distance : 4

5
Tree	final long n1n2prod = n1 * n2 / n2 ;
Code	final long n1n2prod = n1 * n2 / n2 ;
Distance : 3

6
Tree	final long n1n2prod = n1 > > NUMBER_CONSTANT ;
Code	final long n1n2prod = n1 > > NUMBER_CONSTANT ;
Distance : 4

7
Tree	final long n1n2prod = NUMBER_CONSTANT * n2 * n2 * restrictToNonNegative ;
Code	final long n1n2prod = NUMBER_CONSTANT * n2 * n2 * restrictToNonNegative ;
Distance : 6

8
Tree	final long n1n2prod = n1 - long [ n2 ] ;
Code	final long n1n2prod = n1 - long [ n2 ] ;
Distance : 5

9
Tree	final long n1n2prod = n1 * n2 ;
Code	final long n1n2prod = n1 * n2 ;
Distance : 1

10
Tree	final long n1n2prod = NUMBER_CONSTANT / currentState.length . natural.length () ;
Code	final long n1n2prod = NUMBER_CONSTANT / currentState.length . natural.length () ;
Distance : 7

11
Tree	final long n1n2prod = false + n2 ;
Code	final long n1n2prod = false + n2 ;
Distance : 3

12
Tree	final long n1n2prod = NUMBER_CONSTANT * LocalizedFormats.DIGEST_NOT_INITIALIZED ;
Code	final long n1n2prod = NUMBER_CONSTANT * LocalizedFormats.DIGEST_NOT_INITIALIZED ;
Distance : 3

13
Tree	final long n1n2prod = Gaussian - NUMBER_CONSTANT ;
Code	final long n1n2prod = Gaussian - NUMBER_CONSTANT ;
Distance : 4

14
Tree	final long n1n2prod = coefficients.length [ n2 ] + STRING_CONSTANT + ^ [ n1n2prod ] ;
Code	final long n1n2prod = coefficients.length [ n2 ] + STRING_CONSTANT + ^ [ n1n2prod ] ;
Distance : 11

15
Tree	final long n1n2prod = n1 > n1 ;
Code	final long n1n2prod = n1 > n1 ;
Distance : 3

16
Tree	final long n1n2prod = n1 [ n2 ] - long [ n1n2prod ] ;
Code	final long n1n2prod = n1 [ n2 ] - long [ n1n2prod ] ;
Distance : 8

17
Tree	final long n1n2prod = n1n2prod ^ n2 ;
Code	final long n1n2prod = n1n2prod ^ n2 ;
Distance : 3

18
Tree	final long n1n2prod = n1 [ n2 ] + STRING_CONSTANT + RandomGenerator [ n1n2prod ] ;
Code	final long n1n2prod = n1 [ n2 ] + STRING_CONSTANT + RandomGenerator [ n1n2prod ] ;
Distance : 10

19
Tree	final long n1n2prod = FACT.length - NUMBER_CONSTANT ;
Code	final long n1n2prod = FACT.length - NUMBER_CONSTANT ;
Distance : 4

20
Tree	final long n1n2prod = n1 - gcd ;
Code	final long n1n2prod = n1 - gcd ;
Distance : 3

21
Tree	final long n1n2prod = n1 - currentState [ n2 ] ;
Code	final long n1n2prod = n1 - currentState [ n2 ] ;
Distance : 5

22
Tree	final int n1n2prod = n1 + NUMBER_CONSTANT ;
Code	final int n1n2prod = n1 + NUMBER_CONSTANT ;
Distance : 3

23
Tree	final long n1n2prod = false * n2 * n2 ;
Code	final long n1n2prod = false * n2 * n2 ;
Distance : 4

24
Tree	final long n1n2prod = n1 - LOAD_FACTOR ;
Code	final long n1n2prod = n1 - LOAD_FACTOR ;
Distance : 3

25
Tree	final long n1n2prod = ( long ) n1 * n1 ;
Code	final long n1n2prod = ( long ) n1 * n1 ;
Distance : 5

26
Tree	final int n1n2prod = null - NUMBER_CONSTANT ;
Code	final int n1n2prod = null - NUMBER_CONSTANT ;
Distance : 4

27
Tree	final long n1n2prod = n1 - n2 ;
Code	final long n1n2prod = n1 - n2 ;
Distance : 2

28
Tree	final long n1n2prod = n1 [ n2 ] ;
Code	final long n1n2prod = n1 [ n2 ] ;
Distance : 3

29
Tree	final long n1n2prod = n1 == idx ;
Code	final long n1n2prod = n1 == idx ;
Distance : 3

30
Tree	final long n1n2prod = NUMBER_CONSTANT * ^ ;
Code	final long n1n2prod = NUMBER_CONSTANT * ^ ;
Distance : 3

31
Tree	final long n1n2prod = ( int ) n1 * n2 ;
Code	final long n1n2prod = ( int ) n1 * n2 ;
Distance : 4

32
Tree	final long n1n2prod = n1 - M1 [ n2 ] ;
Code	final long n1n2prod = n1 - M1 [ n2 ] ;
Distance : 5

33
Tree	final long n1n2prod = n2 - long [ NUMBER_CONSTANT ] ;
Code	final long n1n2prod = n2 - long [ NUMBER_CONSTANT ] ;
Distance : 7

34
Tree	final long n1n2prod = currentState + n2 ;
Code	final long n1n2prod = currentState + n2 ;
Distance : 3

35
Tree	final long n1n2prod = NUMBER_CONSTANT / currentState.length . get () ;
Code	final long n1n2prod = NUMBER_CONSTANT / currentState.length . get () ;
Distance : 7

36
Tree	final int n1n2prod = null * n2 ;
Code	final int n1n2prod = null * n2 ;
Distance : 2

37
Tree	final long n1n2prod = true + n2 ;
Code	final long n1n2prod = true + n2 ;
Distance : 3

38
Tree	final long n1n2prod = n1 * n2 / n1 ;
Code	final long n1n2prod = n1 * n2 / n1 ;
Distance : 3

39
Tree	final long n1n2prod = n1 [ n2 ] - NUMBER_CONSTANT ;
Code	final long n1n2prod = n1 [ n2 ] - NUMBER_CONSTANT ;
Distance : 5

40
Tree	final boolean n1n2prod = ( long ) n1 * n2 ;
Code	final boolean n1n2prod = ( long ) n1 * n2 ;
Distance : 4

41
Tree	final long n1n2prod = true * n2 * n2 ;
Code	final long n1n2prod = true * n2 * n2 ;
Distance : 4

42
Tree	final long n1n2prod = coefficients.length [ n2 ] - NUMBER_CONSTANT ;
Code	final long n1n2prod = coefficients.length [ n2 ] - NUMBER_CONSTANT ;
Distance : 6

43
Tree	final long n1n2prod = long [ n2 ] + STRING_CONSTANT + RandomGenerator [ n1n2prod ] ;
Code	final long n1n2prod = long [ n2 ] + STRING_CONSTANT + RandomGenerator [ n1n2prod ] ;
Distance : 11

44
Tree	final long n1n2prod = n1n2prod * n2 * n2 ;
Code	final long n1n2prod = n1n2prod * n2 * n2 ;
Distance : 4

45
Tree	final int n1n2prod = long + n2 ;
Code	final int n1n2prod = long + n2 ;
Distance : 3

46
Tree	final long n1n2prod = n1 * n2 * n2 ;
Code	final long n1n2prod = n1 * n2 * n2 ;
Distance : 3

47
Tree	final long n1n2prod = NUMBER_CONSTANT - n2 ;
Code	final long n1n2prod = NUMBER_CONSTANT - n2 ;
Distance : 3

48
Tree	final long n1n2prod = currentState / NUMBER_CONSTANT ;
Code	final long n1n2prod = currentState / NUMBER_CONSTANT ;
Distance : 4

49
Tree	final long n1n2prod = null * n2 * n1n2prod ;
Code	final long n1n2prod = null * n2 * n1n2prod ;
Distance : 4

50
Tree	final long n1n2prod = n1 [ n2 ] - currentState.length [ n2 ] ;
Code	final long n1n2prod = n1 [ n2 ] - currentState.length [ n2 ] ;
Distance : 8

51
Tree	final long n2 = n1 + NUMBER_CONSTANT ;
Code	final long n2 = n1 + NUMBER_CONSTANT ;
Distance : 4

52
Tree	final long n1n2prod = n1n2prod > n2 ;
Code	final long n1n2prod = n1n2prod > n2 ;
Distance : 3

53
Tree	final long n1n2prod = currentState [ n2 ] ;
Code	final long n1n2prod = currentState [ n2 ] ;
Distance : 4

54
Tree	final long n1n2prod = n1 == n2 ;
Code	final long n1n2prod = n1 == n2 ;
Distance : 2

55
Tree	final long n1n2prod = n1 * n1n2prod * n2 ;
Code	final long n1n2prod = n1 * n1n2prod * n2 ;
Distance : 3

56
Tree	final long n2 = n1 * n2 ;
Code	final long n2 = n1 * n2 ;
Distance : 2

57
Tree	final long n1n2prod = NUMBER_CONSTANT * n2 * n2 * natural.length ;
Code	final long n1n2prod = NUMBER_CONSTANT * n2 * n2 * natural.length ;
Distance : 6

58
Tree	final long n1n2prod = NUMBER_CONSTANT + n1n2prod ;
Code	final long n1n2prod = NUMBER_CONSTANT + n1n2prod ;
Distance : 4

59
Tree	final long n1n2prod = n1 - ResizableDoubleArray ;
Code	final long n1n2prod = n1 - ResizableDoubleArray ;
Distance : 3

60
Tree	final long n1n2prod = Gaussian [ n2 ] - long [ n1n2prod ] ;
Code	final long n1n2prod = Gaussian [ n2 ] - long [ n1n2prod ] ;
Distance : 9

61
Tree	final int n1n2prod = n1 * n2 / n2 ;
Code	final int n1n2prod = n1 * n2 / n2 ;
Distance : 3

62
Tree	final long n1n2prod = NUMBER_CONSTANT * residuals.length ;
Code	final long n1n2prod = NUMBER_CONSTANT * residuals.length ;
Distance : 3

63
Tree	final long n1n2prod = n1 == currentState.length ;
Code	final long n1n2prod = n1 == currentState.length ;
Distance : 3

64
Tree	final long n1n2prod = coefficients.length . get () - NUMBER_CONSTANT ;
Code	final long n1n2prod = coefficients.length . get () - NUMBER_CONSTANT ;
Distance : 7

65
Tree	final int n1n2prod = long + n2 ;
Code	final int n1n2prod = long + n2 ;
Distance : 3

66
Tree	final int n1n2prod = null - n2 ;
Code	final int n1n2prod = null - n2 ;
Distance : 3

67
Tree	final long n1n2prod = n1 - n1 ;
Code	final long n1n2prod = n1 - n1 ;
Distance : 3

68
Tree	final long n1n2prod = Gaussian / NUMBER_CONSTANT ;
Code	final long n1n2prod = Gaussian / NUMBER_CONSTANT ;
Distance : 4

69
Tree	final int n1n2prod = long * n2 ;
Code	final int n1n2prod = long * n2 ;
Distance : 2

70
Tree	final void n1n2prod = NUMBER_CONSTANT ;
Code	final void n1n2prod = NUMBER_CONSTANT ;
Distance : 4

71
Tree	final long n2 = n1 + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	final long n2 = n1 + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 14

72
Tree	final long n2 = NUMBER_CONSTANT / n2 ;
Code	final long n2 = NUMBER_CONSTANT / n2 ;
Distance : 4

73
Tree	final double n1n2prod = NUMBER_CONSTANT + n2 ;
Code	final double n1n2prod = NUMBER_CONSTANT + n2 ;
Distance : 2

74
Tree	final int n1n2prod = n1 > n2 ;
Code	final int n1n2prod = n1 > n2 ;
Distance : 2

75
Tree	final long n1n2prod = computeSigma / NUMBER_CONSTANT ;
Code	final long n1n2prod = computeSigma / NUMBER_CONSTANT ;
Distance : 4

76
Tree	final long n1n2prod = n1 * n2 ;
Code	final long n1n2prod = n1 * n2 ;
Distance : 1

77
Tree	final long n1n2prod = n1 * n1n2prod ;
Code	final long n1n2prod = n1 * n1n2prod ;
Distance : 2

78
Tree	final int n1n2prod = n1n2prod ^ n2 ;
Code	final int n1n2prod = n1n2prod ^ n2 ;
Distance : 3

79
Tree	final long n1n2prod = NUMBER_CONSTANT / currentState.length . linearCombination () ;
Code	final long n1n2prod = NUMBER_CONSTANT / currentState.length . linearCombination () ;
Distance : 7

80
Tree	final long n1n2prod = n1 > n1n2prod ;
Code	final long n1n2prod = n1 > n1n2prod ;
Distance : 3

81
Tree	final long n1n2prod = n1n2prod - n1n2prod ;
Code	final long n1n2prod = n1n2prod - n1n2prod ;
Distance : 4

82
Tree	final long n1n2prod = coefficients.length [ n2 ] - long [ n2 ] ;
Code	final long n1n2prod = coefficients.length [ n2 ] - long [ n2 ] ;
Distance : 9

83
Tree	final long n1 = n1 ;
Code	final long n1 = n1 ;
Distance : 4

84
Tree	final long n1n2prod = n1 - BoundaryProjector [ NUMBER_CONSTANT ] ;
Code	final long n1n2prod = n1 - BoundaryProjector [ NUMBER_CONSTANT ] ;
Distance : 6

85
Tree	final long n2 = NUMBER_CONSTANT + n2 ;
Code	final long n2 = NUMBER_CONSTANT + n2 ;
Distance : 4

86
Tree	final long n1n2prod = long [ n2 ] + STRING_CONSTANT + ^ [ n2 ] ;
Code	final long n1n2prod = long [ n2 ] + STRING_CONSTANT + ^ [ n2 ] ;
Distance : 11

87
Tree	final long n1n2prod = NUMBER_CONSTANT / currentState.length . n1n2prod () ;
Code	final long n1n2prod = NUMBER_CONSTANT / currentState.length . n1n2prod () ;
Distance : 7

88
Tree	final long n1n2prod = false - NUMBER_CONSTANT ;
Code	final long n1n2prod = false - NUMBER_CONSTANT ;
Distance : 4

89
Tree	final long n1n2prod = n1 * n2 * n1n2prod ;
Code	final long n1n2prod = n1 * n2 * n1n2prod ;
Distance : 3

90
Tree	final int n1n2prod = n1 * n2 * n2 ;
Code	final int n1n2prod = n1 * n2 * n2 ;
Distance : 3

91
Tree	final long n1n2prod = n1 / n1n2prod ;
Code	final long n1n2prod = n1 / n1n2prod ;
Distance : 3

92
Tree	final int n1n2prod = NUMBER_CONSTANT - n1n2prod ;
Code	final int n1n2prod = NUMBER_CONSTANT - n1n2prod ;
Distance : 4

93
Tree	final long n1n2prod = org.apache.commons.math4.linear.SingularMatrixException / NUMBER_CONSTANT ;
Code	final long n1n2prod = org.apache.commons.math4.linear.SingularMatrixException / NUMBER_CONSTANT ;
Distance : 4

94
Tree	final long n1n2prod = currentState * n2 * n2 ;
Code	final long n1n2prod = currentState * n2 * n2 ;
Distance : 4

95
Tree	final long n1n2prod = coefficients.length [ n2 ] + STRING_CONSTANT + dataV [ n1n2prod ] ;
Code	final long n1n2prod = coefficients.length [ n2 ] + STRING_CONSTANT + dataV [ n1n2prod ] ;
Distance : 11

96
Tree	final long n1n2prod = n1 - UniformRandomProvider [ n2 ] ;
Code	final long n1n2prod = n1 - UniformRandomProvider [ n2 ] ;
Distance : 5

97
Tree	final int n1n2prod = NUMBER_CONSTANT ;
Code	final int n1n2prod = NUMBER_CONSTANT ;
Distance : 4

98
Tree	final long n1n2prod = NUMBER_CONSTANT / n1n2prod ;
Code	final long n1n2prod = NUMBER_CONSTANT / n1n2prod ;
Distance : 4

99
Tree	final long n1n2prod = NUMBER_CONSTANT / currentState.length . gcd () ;
Code	final long n1n2prod = NUMBER_CONSTANT / currentState.length . gcd () ;
Distance : 7

100
Tree	final long n1n2prod = n1 - n2 ;
Code	final long n1n2prod = n1 - n2 ;
Distance : 2

101
Tree	final long n1n2prod = n1 [ n2 ] + STRING_CONSTANT + ^ [ n1n2prod ] ;
Code	final long n1n2prod = n1 [ n2 ] + STRING_CONSTANT + ^ [ n1n2prod ] ;
Distance : 10

102
Tree	final long n1n2prod = NotStrictlyPositiveException * n2 ;
Code	final long n1n2prod = NotStrictlyPositiveException * n2 ;
Distance : 2

103
Tree	final long n1n2prod = FACT.length . gcd () - NUMBER_CONSTANT ;
Code	final long n1n2prod = FACT.length . gcd () - NUMBER_CONSTANT ;
Distance : 7

104
Tree	final long n1n2prod = n1 [ n2 ] + STRING_CONSTANT + dataV [ n1n2prod ] ;
Code	final long n1n2prod = n1 [ n2 ] + STRING_CONSTANT + dataV [ n1n2prod ] ;
Distance : 10

105
Tree	final long n1n2prod = long [ n2 ] - NUMBER_CONSTANT ;
Code	final long n1n2prod = long [ n2 ] - NUMBER_CONSTANT ;
Distance : 6

106
Tree	final long n1n2prod = FACT.length / NUMBER_CONSTANT ;
Code	final long n1n2prod = FACT.length / NUMBER_CONSTANT ;
Distance : 4

107
Tree	final int n1n2prod = n1 - n1n2prod ;
Code	final int n1n2prod = n1 - n1n2prod ;
Distance : 3

108
Tree	final long n1n2prod = long - n2 ;
Code	final long n1n2prod = long - n2 ;
Distance : 3

109
Tree	final long n1n2prod = hiPrec [ n2 ] - NUMBER_CONSTANT ;
Code	final long n1n2prod = hiPrec [ n2 ] - NUMBER_CONSTANT ;
Distance : 6

110
Tree	final long n1n2prod = coefficients.length . getRandomGenerator () - NUMBER_CONSTANT ;
Code	final long n1n2prod = coefficients.length . getRandomGenerator () - NUMBER_CONSTANT ;
Distance : 7

111
Tree	final long n1n2prod = n1 - N ;
Code	final long n1n2prod = n1 - N ;
Distance : 3

112
Tree	final long n1n2prod = n1 - seed [ n2 ] ;
Code	final long n1n2prod = n1 - seed [ n2 ] ;
Distance : 5

113
Tree	final long n1n2prod = long [ n2 ] - long [ n2 ] ;
Code	final long n1n2prod = long [ n2 ] - long [ n2 ] ;
Distance : 9

114
Tree	final long n1 = n1 + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	final long n1 = n1 + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 14

115
Tree	final long n1n2prod = val.length / NUMBER_CONSTANT ;
Code	final long n1n2prod = val.length / NUMBER_CONSTANT ;
Distance : 4

116
Tree	final long n1n2prod = currentState + n2 ;
Code	final long n1n2prod = currentState + n2 ;
Distance : 3

117
Tree	final long n1n2prod = NotStrictlyPositiveException + n2 ;
Code	final long n1n2prod = NotStrictlyPositiveException + n2 ;
Distance : 3

118
Tree	final long n1n2prod = n1 + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	final long n1n2prod = n1 + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

119
Tree	final long n1n2prod = coefficients.length . doubleToRawLongBits () - NUMBER_CONSTANT ;
Code	final long n1n2prod = coefficients.length . doubleToRawLongBits () - NUMBER_CONSTANT ;
Distance : 7

120
Tree	final long n1n2prod = n1 * n1 ;
Code	final long n1n2prod = n1 * n1 ;
Distance : 2

121
Tree	final long n1n2prod = n2 * n2 / n2 ;
Code	final long n1n2prod = n2 * n2 / n2 ;
Distance : 4

122
Tree	final long n1n2prod = n1 - seed ;
Code	final long n1n2prod = n1 - seed ;
Distance : 3

123
Tree	final long n1n2prod = incrementAndGet - NUMBER_CONSTANT ;
Code	final long n1n2prod = incrementAndGet - NUMBER_CONSTANT ;
Distance : 4

124
Tree	final long n1n2prod = NUMBER_CONSTANT * n2 * n2 * FACT.length ;
Code	final long n1n2prod = NUMBER_CONSTANT * n2 * n2 * FACT.length ;
Distance : 6

125
Tree	final long n1n2prod = n1 == incrementAndGet ;
Code	final long n1n2prod = n1 == incrementAndGet ;
Distance : 3

126
Tree	final long n1n2prod = currentState.length / NUMBER_CONSTANT ;
Code	final long n1n2prod = currentState.length / NUMBER_CONSTANT ;
Distance : 4

127
Tree	final long n1n2prod = null - n1n2prod ;
Code	final long n1n2prod = null - n1n2prod ;
Distance : 4

128
Tree	final long n1n2prod = n1n2prod ;
Code	final long n1n2prod = n1n2prod ;
Distance : 4

129
Tree	final long n1n2prod = n1 - INDEX_OFFSET ;
Code	final long n1n2prod = n1 - INDEX_OFFSET ;
Distance : 3

130
Tree	final long n1n2prod = currentState - NUMBER_CONSTANT ;
Code	final long n1n2prod = currentState - NUMBER_CONSTANT ;
Distance : 4

131
Tree	final long n1n2prod = false - n2 ;
Code	final long n1n2prod = false - n2 ;
Distance : 3

132
Tree	final long n1n2prod = n1 - M1 [ NUMBER_CONSTANT ] ;
Code	final long n1n2prod = n1 - M1 [ NUMBER_CONSTANT ] ;
Distance : 6

133
Tree	final int n1n2prod = n1n2prod * n2 ;
Code	final int n1n2prod = n1n2prod * n2 ;
Distance : 2

134
Tree	final long n1n2prod = FACT.length . getDefaultNumberFormat () - NUMBER_CONSTANT ;
Code	final long n1n2prod = FACT.length . getDefaultNumberFormat () - NUMBER_CONSTANT ;
Distance : 7

135
Tree	final long n1n2prod = long / n2 ;
Code	final long n1n2prod = long / n2 ;
Distance : 3

136
Tree	final long n1n2prod = NUMBER_CONSTANT * natural.length ;
Code	final long n1n2prod = NUMBER_CONSTANT * natural.length ;
Distance : 3

137
Tree	final long n1n2prod = Gaussian + n2 ;
Code	final long n1n2prod = Gaussian + n2 ;
Distance : 3

138
Tree	final long n1n2prod = ( long ) residuals.length . get () * n1n2prod ;
Code	final long n1n2prod = ( long ) residuals.length . get () * n1n2prod ;
Distance : 9

139
Tree	final long n1n2prod = n1 * n1n2prod / n2 ;
Code	final long n1n2prod = n1 * n1n2prod / n2 ;
Distance : 3

140
Tree	final long n1n2prod = n2 - n2 ;
Code	final long n1n2prod = n2 - n2 ;
Distance : 3

141
Tree	final long n1n2prod = sinEpsA [ n2 ] - NUMBER_CONSTANT ;
Code	final long n1n2prod = sinEpsA [ n2 ] - NUMBER_CONSTANT ;
Distance : 6

142
Tree	final long n1n2prod = currentState / n1n2prod ;
Code	final long n1n2prod = currentState / n1n2prod ;
Distance : 4

143
Tree	final long n2 = n1 > n2 ;
Code	final long n2 = n1 > n2 ;
Distance : 3

144
Tree	final long n1n2prod = n1 / NUMBER_CONSTANT ;
Code	final long n1n2prod = n1 / NUMBER_CONSTANT ;
Distance : 3

145
Tree	final long n1n2prod = ( long ) residuals.length . getTolerance () * n2 ;
Code	final long n1n2prod = ( long ) residuals.length . getTolerance () * n2 ;
Distance : 8

146
Tree	final int n1n2prod = null * n2 * n2 ;
Code	final int n1n2prod = null * n2 * n2 ;
Distance : 4

147
Tree	final long n1n2prod = currentState - NUMBER_CONSTANT ;
Code	final long n1n2prod = currentState - NUMBER_CONSTANT ;
Distance : 4

148
Tree	final long n2 = ( long ) n1 * n2 ;
Code	final long n2 = ( long ) n1 * n2 ;
Distance : 5

149
Tree	final long n1n2prod = ( long ) testArray.length . get () * n2 ;
Code	final long n1n2prod = ( long ) testArray.length . get () * n2 ;
Distance : 8

150
Tree	final long n1n2prod = n1 - gcd [ NUMBER_CONSTANT ] ;
Code	final long n1n2prod = n1 - gcd [ NUMBER_CONSTANT ] ;
Distance : 6

151
Tree	final long n1n2prod = coefficients.length . getDefaultNumberFormat () - NUMBER_CONSTANT ;
Code	final long n1n2prod = coefficients.length . getDefaultNumberFormat () - NUMBER_CONSTANT ;
Distance : 7

152
Tree	final long n1n2prod = n2 > > NUMBER_CONSTANT ;
Code	final long n1n2prod = n2 > > NUMBER_CONSTANT ;
Distance : 5

153
Tree	final long n1n2prod = ( long ) observed1.length . get () * n2 ;
Code	final long n1n2prod = ( long ) observed1.length . get () * n2 ;
Distance : 8

154
Tree	final long n1n2prod = null / n1n2prod ;
Code	final long n1n2prod = null / n1n2prod ;
Distance : 4

155
Tree	final int n1n2prod = null + n2 ;
Code	final int n1n2prod = null + n2 ;
Distance : 3

156
Tree	final long n1n2prod = ( long ) residuals.length . getDefaultNumberFormat () * n2 ;
Code	final long n1n2prod = ( long ) residuals.length . getDefaultNumberFormat () * n2 ;
Distance : 8

157
Tree	final boolean n1n2prod = n1 + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	final boolean n1n2prod = n1 + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

158
Tree	final long n1n2prod = hiPrec [ n2 ] ;
Code	final long n1n2prod = hiPrec [ n2 ] ;
Distance : 4

159
Tree	final long n1n2prod = ( long ) residuals.length . getRandomGenerator () * n2 ;
Code	final long n1n2prod = ( long ) residuals.length . getRandomGenerator () * n2 ;
Distance : 8

160
Tree	final long n1n2prod = coefficients.length . derivative () - NUMBER_CONSTANT ;
Code	final long n1n2prod = coefficients.length . derivative () - NUMBER_CONSTANT ;
Distance : 7

161
Tree	final long n1n2prod = sinEpsA [ n2 ] ;
Code	final long n1n2prod = sinEpsA [ n2 ] ;
Distance : 4

162
Tree	final int n1n2prod = null + n2 ;
Code	final int n1n2prod = null + n2 ;
Distance : 3

163
Tree	final long n1n2prod = long [ n2 ] + STRING_CONSTANT + dataV [ n1n2prod ] ;
Code	final long n1n2prod = long [ n2 ] + STRING_CONSTANT + dataV [ n1n2prod ] ;
Distance : 11

164
Tree	final long n1n2prod = false + n2 ;
Code	final long n1n2prod = false + n2 ;
Distance : 3

165
Tree	final long n1n2prod = n1 - ResizableDoubleArray [ NUMBER_CONSTANT ] ;
Code	final long n1n2prod = n1 - ResizableDoubleArray [ NUMBER_CONSTANT ] ;
Distance : 6

166
Tree	final long n1n2prod = true - NUMBER_CONSTANT ;
Code	final long n1n2prod = true - NUMBER_CONSTANT ;
Distance : 4

167
Tree	final long n1n2prod = n1 == isValidPivotColumn ;
Code	final long n1n2prod = n1 == isValidPivotColumn ;
Distance : 3

168
Tree	final long n1n2prod = n1 - long ;
Code	final long n1n2prod = n1 - long ;
Distance : 3

169
Tree	final long n1n2prod = n1n2prod ^ n1 ;
Code	final long n1n2prod = n1n2prod ^ n1 ;
Distance : 4

170
Tree	final long n1n2prod = NUMBER_CONSTANT * n2 * n2 * n1n2prod ;
Code	final long n1n2prod = NUMBER_CONSTANT * n2 * n2 * n1n2prod ;
Distance : 6

171
Tree	final long n1n2prod = n1 - BoundaryProjector [ n2 ] ;
Code	final long n1n2prod = n1 - BoundaryProjector [ n2 ] ;
Distance : 5

172
Tree	final int n1n2prod = n2 ^ n2 ;
Code	final int n1n2prod = n2 ^ n2 ;
Distance : 3

173
Tree	final int n1n2prod = NUMBER_CONSTANT * currentState.length ;
Code	final int n1n2prod = NUMBER_CONSTANT * currentState.length ;
Distance : 3

174
Tree	final long n1n2prod = n1 - IntervalsSet [ NUMBER_CONSTANT ] ;
Code	final long n1n2prod = n1 - IntervalsSet [ NUMBER_CONSTANT ] ;
Distance : 6

175
Tree	final long n1n2prod = Gaussian * n2 ;
Code	final long n1n2prod = Gaussian * n2 ;
Distance : 2

176
Tree	final long n1n2prod = n1n2prod * n2 ;
Code	final long n1n2prod = n1n2prod * n2 ;
Distance : 2

177
Tree	final int n1n2prod = n1 * n2 ;
Code	final int n1n2prod = n1 * n2 ;
Distance : 1

178
Tree	final long n1n2prod = NUMBER_CONSTANT / n2 ;
Code	final long n1n2prod = NUMBER_CONSTANT / n2 ;
Distance : 3

179
Tree	final long n1n2prod = n2 + NUMBER_CONSTANT ;
Code	final long n1n2prod = n2 + NUMBER_CONSTANT ;
Distance : 4

180
Tree	final long n1n2prod = NUMBER_CONSTANT * FACT.length ;
Code	final long n1n2prod = NUMBER_CONSTANT * FACT.length ;
Distance : 3

181
Tree	final long n1n2prod = Gaussian - NUMBER_CONSTANT ;
Code	final long n1n2prod = Gaussian - NUMBER_CONSTANT ;
Distance : 4

182
Tree	final long n1n2prod = n2 ^ n2 ;
Code	final long n1n2prod = n2 ^ n2 ;
Distance : 3

183
Tree	final long n1n2prod = NUMBER_CONSTANT + n2 ;
Code	final long n1n2prod = NUMBER_CONSTANT + n2 ;
Distance : 3

184
Tree	final long n1n2prod = coefficients.length . next () - NUMBER_CONSTANT ;
Code	final long n1n2prod = coefficients.length . next () - NUMBER_CONSTANT ;
Distance : 7

185
Tree	final long n1n2prod = NUMBER_CONSTANT * testArray.length ;
Code	final long n1n2prod = NUMBER_CONSTANT * testArray.length ;
Distance : 3

186
Tree	final long n1n2prod = NUMBER_CONSTANT * n2 * n2 * currentState.length ;
Code	final long n1n2prod = NUMBER_CONSTANT * n2 * n2 * currentState.length ;
Distance : 6

187
Tree	final long n1n2prod = coefficients.length / NUMBER_CONSTANT ;
Code	final long n1n2prod = coefficients.length / NUMBER_CONSTANT ;
Distance : 4

188
Tree	final long n1n2prod = ( long ) n2 * n2 ;
Code	final long n1n2prod = ( long ) n2 * n2 ;
Distance : 5

189
Tree	final long n2 = NUMBER_CONSTANT - n1n2prod ;
Code	final long n2 = NUMBER_CONSTANT - n1n2prod ;
Distance : 5

190
Tree	final long n1n2prod = coefficients.length - NUMBER_CONSTANT ;
Code	final long n1n2prod = coefficients.length - NUMBER_CONSTANT ;
Distance : 4

191
Tree	final long n1n2prod = null * n2 * n2 ;
Code	final long n1n2prod = null * n2 * n2 ;
Distance : 4

192
Tree	final long n1n2prod = coefficients.length . getCell () - NUMBER_CONSTANT ;
Code	final long n1n2prod = coefficients.length . getCell () - NUMBER_CONSTANT ;
Distance : 7

193
Tree	final long n1n2prod = n1n2prod + NUMBER_CONSTANT ;
Code	final long n1n2prod = n1n2prod + NUMBER_CONSTANT ;
Distance : 4

194
Tree	final long n1n2prod = long * n2 ;
Code	final long n1n2prod = long * n2 ;
Distance : 2

195
Tree	final long n1n2prod = n1 > n2 ;
Code	final long n1n2prod = n1 > n2 ;
Distance : 2

196
Tree	final long n1n2prod = NUMBER_CONSTANT ;
Code	final long n1n2prod = NUMBER_CONSTANT ;
Distance : 4

197
Tree	final long n1n2prod = coefficients.length . gcd () - NUMBER_CONSTANT ;
Code	final long n1n2prod = coefficients.length . gcd () - NUMBER_CONSTANT ;
Distance : 7

198
Tree	final long n1n2prod = n1n2prod > > NUMBER_CONSTANT ;
Code	final long n1n2prod = n1n2prod > > NUMBER_CONSTANT ;
Distance : 5

199
Tree	final long n1n2prod = n1 == Umax ;
Code	final long n1n2prod = n1 == Umax ;
Distance : 3

200
Tree	final long n1n2prod = n1 - gcd [ n2 ] ;
Code	final long n1n2prod = n1 - gcd [ n2 ] ;
Distance : 5

201
Tree	final int n1n2prod = n2 * n2 ;
Code	final int n1n2prod = n2 * n2 ;
Distance : 2

202
Tree	final long n1n2prod = false * n2 ;
Code	final long n1n2prod = false * n2 ;
Distance : 2

203
Tree	final long n1n2prod = computeSigma - NUMBER_CONSTANT ;
Code	final long n1n2prod = computeSigma - NUMBER_CONSTANT ;
Distance : 4

204
Tree	final long n1n2prod = coefficients.length [ n2 ] ;
Code	final long n1n2prod = coefficients.length [ n2 ] ;
Distance : 4

205
Tree	final long n1n2prod = n1 / n2 ;
Code	final long n1n2prod = n1 / n2 ;
Distance : 2

206
Tree	final long n1n2prod = n2 * n1n2prod ;
Code	final long n1n2prod = n2 * n1n2prod ;
Distance : 3

207
Tree	final long n1n2prod = n1n2prod * n2 / n2 ;
Code	final long n1n2prod = n1n2prod * n2 / n2 ;
Distance : 4

208
Tree	final long n1n2prod = n1 - ResizableDoubleArray [ n2 ] ;
Code	final long n1n2prod = n1 - ResizableDoubleArray [ n2 ] ;
Distance : 5

209
Tree	final long n1n2prod = n1 == LOAD_FACTOR ;
Code	final long n1n2prod = n1 == LOAD_FACTOR ;
Distance : 3

210
Tree	final long n1n2prod = NUMBER_CONSTANT * n2 * n2 * residuals.length ;
Code	final long n1n2prod = NUMBER_CONSTANT * n2 * n2 * residuals.length ;
Distance : 6

211
Tree	final long n1n2prod = n1 == getPreferredEntryValue ;
Code	final long n1n2prod = n1 == getPreferredEntryValue ;
Distance : 3

212
Tree	final long n1n2prod = null + n2 ;
Code	final long n1n2prod = null + n2 ;
Distance : 3

213
Tree	final long n1n2prod = long + n2 ;
Code	final long n1n2prod = long + n2 ;
Distance : 3

214
Tree	final long n1n2prod = n1 == null ;
Code	final long n1n2prod = n1 == null ;
Distance : 3

215
Tree	final long n1n2prod = null * n2 ;
Code	final long n1n2prod = null * n2 ;
Distance : 2

216
Tree	final long n1n2prod = n1 * n2 ;
Code	final long n1n2prod = n1 * n2 ;
Distance : 1

217
Tree	final long n1 = n1 + NUMBER_CONSTANT ;
Code	final long n1 = n1 + NUMBER_CONSTANT ;
Distance : 4

218
Tree	final long n1n2prod = NotStrictlyPositiveException + n2 ;
Code	final long n1n2prod = NotStrictlyPositiveException + n2 ;
Distance : 3

219
Tree	final long n1n2prod = long + n2 ;
Code	final long n1n2prod = long + n2 ;
Distance : 3

220
Tree	final int n1n2prod = NUMBER_CONSTANT + n2 ;
Code	final int n1n2prod = NUMBER_CONSTANT + n2 ;
Distance : 3

221
Tree	final long n1n2prod = n2 * n2 / n1n2prod ;
Code	final long n1n2prod = n2 * n2 / n1n2prod ;
Distance : 4

222
Tree	final long n1n2prod = incrementAndGet / NUMBER_CONSTANT ;
Code	final long n1n2prod = incrementAndGet / NUMBER_CONSTANT ;
Distance : 4

223
Tree	final long n1n2prod = long * n2 * n2 ;
Code	final long n1n2prod = long * n2 * n2 ;
Distance : 4

224
Tree	final long n1n2prod = n2 * n2 * n2 ;
Code	final long n1n2prod = n2 * n2 * n2 ;
Distance : 4

225
Tree	final long n1n2prod = ( long ) residuals.length . get () * n2 ;
Code	final long n1n2prod = ( long ) residuals.length . get () * n2 ;
Distance : 8

226
Tree	final long n1n2prod = NUMBER_CONSTANT / n1 ;
Code	final long n1n2prod = NUMBER_CONSTANT / n1 ;
Distance : 4

227
Tree	final int n1n2prod = NUMBER_CONSTANT / n1n2prod ;
Code	final int n1n2prod = NUMBER_CONSTANT / n1n2prod ;
Distance : 4

228
Tree	final int n1n2prod = n1 > > NUMBER_CONSTANT ;
Code	final int n1n2prod = n1 > > NUMBER_CONSTANT ;
Distance : 4

229
Tree	final long n1n2prod = n2 + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	final long n1n2prod = n2 + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 14

230
Tree	final long n1n2prod = NUMBER_CONSTANT * BoundaryProjector ;
Code	final long n1n2prod = NUMBER_CONSTANT * BoundaryProjector ;
Distance : 3

231
Tree	final long n1n2prod = n2 > n2 ;
Code	final long n1n2prod = n2 > n2 ;
Distance : 3

232
Tree	final long n1n2prod = null + n2 ;
Code	final long n1n2prod = null + n2 ;
Distance : 3

233
Tree	final long n1n2prod = direc [ n2 ] - NUMBER_CONSTANT ;
Code	final long n1n2prod = direc [ n2 ] - NUMBER_CONSTANT ;
Distance : 6

234
Tree	final long n2 = NUMBER_CONSTANT ;
Code	final long n2 = NUMBER_CONSTANT ;
Distance : 5

235
Tree	final long n1n2prod = n2 * n2 ;
Code	final long n1n2prod = n2 * n2 ;
Distance : 2

236
Tree	final long n1 = ( long ) n1 * n2 ;
Code	final long n1 = ( long ) n1 * n2 ;
Distance : 5

237
Tree	final long n1n2prod = ( long ) n1 * n1n2prod ;
Code	final long n1n2prod = ( long ) n1 * n1n2prod ;
Distance : 5

238
Tree	final long n1n2prod = org.apache.commons.math4.linear.SingularMatrixException - NUMBER_CONSTANT ;
Code	final long n1n2prod = org.apache.commons.math4.linear.SingularMatrixException - NUMBER_CONSTANT ;
Distance : 4

239
Tree	final int n1n2prod = NUMBER_CONSTANT - n1 ;
Code	final int n1n2prod = NUMBER_CONSTANT - n1 ;
Distance : 4

240
Tree	final long n1n2prod = n1n2prod - n2 ;
Code	final long n1n2prod = n1n2prod - n2 ;
Distance : 3

241
Tree	final long n1n2prod = n1 - NUMBER_CONSTANT ;
Code	final long n1n2prod = n1 - NUMBER_CONSTANT ;
Distance : 3

242
Tree	final int n1n2prod = n1n2prod ;
Code	final int n1n2prod = n1n2prod ;
Distance : 4

243
Tree	final long n1n2prod = n2 ^ n1 ;
Code	final long n1n2prod = n2 ^ n1 ;
Distance : 4

244
Tree	final long n1n2prod = val.length - NUMBER_CONSTANT ;
Code	final long n1n2prod = val.length - NUMBER_CONSTANT ;
Distance : 4

245
Tree	final long n1n2prod = null - NUMBER_CONSTANT ;
Code	final long n1n2prod = null - NUMBER_CONSTANT ;
Distance : 4

246
Tree	final long n1n2prod = n1 == currentState ;
Code	final long n1n2prod = n1 == currentState ;
Distance : 3

247
Tree	final long n1n2prod = n1 + n2 ;
Code	final long n1n2prod = n1 + n2 ;
Distance : 2

248
Tree	final long n1n2prod = NUMBER_CONSTANT * n2 * n2 * seed.length ;
Code	final long n1n2prod = NUMBER_CONSTANT * n2 * n2 * seed.length ;
Distance : 6

249
Tree	final long n1n2prod = n1 - UniformRandomProvider [ NUMBER_CONSTANT ] ;
Code	final long n1n2prod = n1 - UniformRandomProvider [ NUMBER_CONSTANT ] ;
Distance : 6

250
Tree	final long n1n2prod = NUMBER_CONSTANT / currentState.length . getMaximalIterationCount () ;
Code	final long n1n2prod = NUMBER_CONSTANT / currentState.length . getMaximalIterationCount () ;
Distance : 7

251
Tree	final long n1n2prod = ( long ) residuals.length . getValue () * n2 ;
Code	final long n1n2prod = ( long ) residuals.length . getValue () * n2 ;
Distance : 8

252
Tree	final int n1n2prod = n2 + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	final int n1n2prod = n2 + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 14

253
Tree	final long n1n2prod = currentState.length - NUMBER_CONSTANT ;
Code	final long n1n2prod = currentState.length - NUMBER_CONSTANT ;
Distance : 4

254
Tree	final boolean n1n2prod = NUMBER_CONSTANT / n2 ;
Code	final boolean n1n2prod = NUMBER_CONSTANT / n2 ;
Distance : 3

255
Tree	final long n1 = NUMBER_CONSTANT - n1n2prod ;
Code	final long n1 = NUMBER_CONSTANT - n1n2prod ;
Distance : 5

256
Tree	final long n1n2prod = n2 * n1n2prod ;
Code	final long n1n2prod = n2 * n1n2prod ;
Distance : 3

257
Tree	final int n1n2prod = NUMBER_CONSTANT - n2 ;
Code	final int n1n2prod = NUMBER_CONSTANT - n2 ;
Distance : 3

258
Tree	final int n1n2prod = n2 * n2 * n2 ;
Code	final int n1n2prod = n2 * n2 * n2 ;
Distance : 4

259
Tree	final long n1n2prod = ( long ) FACT.length . get () * n2 ;
Code	final long n1n2prod = ( long ) FACT.length . get () * n2 ;
Distance : 8

260
Tree	final long n1n2prod = long [ n2 ] ;
Code	final long n1n2prod = long [ n2 ] ;
Distance : 4

261
Tree	final long n1n2prod = true - n2 ;
Code	final long n1n2prod = true - n2 ;
Distance : 3

262
Tree	final long n1n2prod = n1 - long [ NUMBER_CONSTANT ] ;
Code	final long n1n2prod = n1 - long [ NUMBER_CONSTANT ] ;
Distance : 6

263
Tree	final void n1n2prod = NUMBER_CONSTANT / n2 ;
Code	final void n1n2prod = NUMBER_CONSTANT / n2 ;
Distance : 3

264
Tree	final long n1n2prod = n2 > n1 ;
Code	final long n1n2prod = n2 > n1 ;
Distance : 4

265
Tree	final long n1n2prod = n1 - seed [ NUMBER_CONSTANT ] ;
Code	final long n1n2prod = n1 - seed [ NUMBER_CONSTANT ] ;
Distance : 6

266
Tree	final long n1n2prod = n2 [ n2 ] ;
Code	final long n1n2prod = n2 [ n2 ] ;
Distance : 4

267
Tree	final long n1 = n1 > > NUMBER_CONSTANT ;
Code	final long n1 = n1 > > NUMBER_CONSTANT ;
Distance : 5

268
Tree	final long n1n2prod = Gaussian [ n2 ] - NUMBER_CONSTANT ;
Code	final long n1n2prod = Gaussian [ n2 ] - NUMBER_CONSTANT ;
Distance : 6

269
Tree	final long n1n2prod = NUMBER_CONSTANT * n2 * n2 * BoundaryProjector ;
Code	final long n1n2prod = NUMBER_CONSTANT * n2 * n2 * BoundaryProjector ;
Distance : 6

270
Tree	final int n1n2prod = n1n2prod + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	final int n1n2prod = n1n2prod + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 14

271
Tree	final boolean n1n2prod = NUMBER_CONSTANT + n2 ;
Code	final boolean n1n2prod = NUMBER_CONSTANT + n2 ;
Distance : 3

272
Tree	final long n1n2prod = n1 - BoundaryProjector ;
Code	final long n1n2prod = n1 - BoundaryProjector ;
Distance : 3

273
Tree	final long n1n2prod = NUMBER_CONSTANT - n1n2prod ;
Code	final long n1n2prod = NUMBER_CONSTANT - n1n2prod ;
Distance : 4

274
Tree	final long n1n2prod = false / n1n2prod ;
Code	final long n1n2prod = false / n1n2prod ;
Distance : 4

275
Tree	final long n1n2prod = NUMBER_CONSTANT / currentState.length . currentState.length () ;
Code	final long n1n2prod = NUMBER_CONSTANT / currentState.length . currentState.length () ;
Distance : 7

276
Tree	final long n1n2prod = n1 * n2 / n1n2prod ;
Code	final long n1n2prod = n1 * n2 / n1n2prod ;
Distance : 3

277
Tree	final int n1n2prod = n1 ;
Code	final int n1n2prod = n1 ;
Distance : 3

278
Tree	final int n1n2prod = NUMBER_CONSTANT / n2 ;
Code	final int n1n2prod = NUMBER_CONSTANT / n2 ;
Distance : 3

279
Tree	final void n1n2prod = n1 + NUMBER_CONSTANT ;
Code	final void n1n2prod = n1 + NUMBER_CONSTANT ;
Distance : 3

280
Tree	final long n1n2prod = n1 ^ n2 ;
Code	final long n1n2prod = n1 ^ n2 ;
Distance : 2

281
Tree	final void n1n2prod = NUMBER_CONSTANT + n2 ;
Code	final void n1n2prod = NUMBER_CONSTANT + n2 ;
Distance : 3

282
Tree	final long n1n2prod = true + n2 ;
Code	final long n1n2prod = true + n2 ;
Distance : 3

283
Tree	final int n1n2prod = long - NUMBER_CONSTANT ;
Code	final int n1n2prod = long - NUMBER_CONSTANT ;
Distance : 4

284
Tree	final long n1n2prod = n1 * n1 * n2 ;
Code	final long n1n2prod = n1 * n1 * n2 ;
Distance : 3

285
Tree	final long n1n2prod = long - NUMBER_CONSTANT ;
Code	final long n1n2prod = long - NUMBER_CONSTANT ;
Distance : 4

286
Tree	final long n1n2prod = n1n2prod * n2 ;
Code	final long n1n2prod = n1n2prod * n2 ;
Distance : 2

287
Tree	final int n1n2prod = n1 * n2 ;
Code	final int n1n2prod = n1 * n2 ;
Distance : 1

288
Tree	final double n1n2prod = NUMBER_CONSTANT ;
Code	final double n1n2prod = NUMBER_CONSTANT ;
Distance : 3

289
Tree	final long n1 = NUMBER_CONSTANT ;
Code	final long n1 = NUMBER_CONSTANT ;
Distance : 5

290
Tree	final int n1n2prod = NUMBER_CONSTANT + n1 ;
Code	final int n1n2prod = NUMBER_CONSTANT + n1 ;
Distance : 4

291
Tree	final void n1n2prod = n1 ;
Code	final void n1n2prod = n1 ;
Distance : 3

292
Tree	final long n1 = NUMBER_CONSTANT / n2 ;
Code	final long n1 = NUMBER_CONSTANT / n2 ;
Distance : 4

293
Tree	final long n1n2prod = null / n1 ;
Code	final long n1n2prod = null / n1 ;
Distance : 4

294
Tree	final long n1n2prod = coefficients.length [ n2 ] - long [ n1n2prod ] ;
Code	final long n1n2prod = coefficients.length [ n2 ] - long [ n1n2prod ] ;
Distance : 9

295
Tree	final long n1n2prod = NUMBER_CONSTANT / currentState.length . derivative () ;
Code	final long n1n2prod = NUMBER_CONSTANT / currentState.length . derivative () ;
Distance : 7

296
Tree	final long n1n2prod = n1 - IntervalsSet [ n2 ] ;
Code	final long n1n2prod = n1 - IntervalsSet [ n2 ] ;
Distance : 5

297
Tree	final long n1n2prod = long [ n2 ] - currentState.length [ n2 ] ;
Code	final long n1n2prod = long [ n2 ] - currentState.length [ n2 ] ;
Distance : 9

298
Tree	final long n1n2prod = n1 ^ n1 ;
Code	final long n1n2prod = n1 ^ n1 ;
Distance : 3

299
Tree	final long n1n2prod = NUMBER_CONSTANT * n2 * n2 * gcd ;
Code	final long n1n2prod = NUMBER_CONSTANT * n2 * n2 * gcd ;
Distance : 6

300
Tree	final long n1n2prod = n1 * n1n2prod ;
Code	final long n1n2prod = n1 * n1n2prod ;
Distance : 2

301
Tree	final long n1n2prod = n1n2prod + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	final long n1n2prod = n1n2prod + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 14

302
Tree	final int n1n2prod = n2 * n2 ;
Code	final int n1n2prod = n2 * n2 ;
Distance : 2

303
Tree	final long n1n2prod = direc [ n2 ] ;
Code	final long n1n2prod = direc [ n2 ] ;
Distance : 4

304
Tree	final long n2 = n1 ;
Code	final long n2 = n1 ;
Distance : 4

305
Tree	final long n1n2prod = false / n2 ;
Code	final long n1n2prod = false / n2 ;
Distance : 3

306
Tree	final int n1n2prod = n1 - n2 ;
Code	final int n1n2prod = n1 - n2 ;
Distance : 2

307
Tree	final int n1n2prod = n2 * n2 / n2 ;
Code	final int n1n2prod = n2 * n2 / n2 ;
Distance : 4

308
Tree	final long n1n2prod = n1 [ n2 ] - long [ n2 ] ;
Code	final long n1n2prod = n1 [ n2 ] - long [ n2 ] ;
Distance : 8

309
Tree	final long n1n2prod = n1 ;
Code	final long n1n2prod = n1 ;
Distance : 3

310
Tree	final long n1n2prod = Gaussian + n2 ;
Code	final long n1n2prod = Gaussian + n2 ;
Distance : 3

311
Tree	final int n1n2prod = n2 > n2 ;
Code	final int n1n2prod = n2 > n2 ;
Distance : 3

312
Tree	final long n1n2prod = NUMBER_CONSTANT * n2 * n2 * LocalizedFormats.DIGEST_NOT_INITIALIZED ;
Code	final long n1n2prod = NUMBER_CONSTANT * n2 * n2 * LocalizedFormats.DIGEST_NOT_INITIALIZED ;
Distance : 6

313
Tree	final long n1n2prod = NotStrictlyPositiveException - NUMBER_CONSTANT ;
Code	final long n1n2prod = NotStrictlyPositiveException - NUMBER_CONSTANT ;
Distance : 4

314
Tree	final int n1n2prod = n1 ^ n2 ;
Code	final int n1n2prod = n1 ^ n2 ;
Distance : 2

315
Tree	final long n1n2prod = Gaussian [ n2 ] - long [ n2 ] ;
Code	final long n1n2prod = Gaussian [ n2 ] - long [ n2 ] ;
Distance : 9

316
Tree	final long n1n2prod = n2 - n1n2prod ;
Code	final long n1n2prod = n2 - n1n2prod ;
Distance : 4

317
Tree	final long n1n2prod = n2 - long [ n2 ] ;
Code	final long n1n2prod = n2 - long [ n2 ] ;
Distance : 6

318
Tree	final int n1n2prod = n1n2prod > > NUMBER_CONSTANT ;
Code	final int n1n2prod = n1n2prod > > NUMBER_CONSTANT ;
Distance : 5

319
Tree	final long n1n2prod = true * n2 ;
Code	final long n1n2prod = true * n2 ;
Distance : 2

320
Tree	final int n1n2prod = n1n2prod + NUMBER_CONSTANT ;
Code	final int n1n2prod = n1n2prod + NUMBER_CONSTANT ;
Distance : 4

321
Tree	final int n1n2prod = n2 + NUMBER_CONSTANT ;
Code	final int n1n2prod = n2 + NUMBER_CONSTANT ;
Distance : 4

322
Tree	final long n1n2prod = NUMBER_CONSTANT - n1 ;
Code	final long n1n2prod = NUMBER_CONSTANT - n1 ;
Distance : 4

323
Tree	final long n1n2prod = polynomials [ n2 ] ;
Code	final long n1n2prod = polynomials [ n2 ] ;
Distance : 4

324
Tree	final long n1n2prod = long [ n2 ] + STRING_CONSTANT + UniformRandomProvider [ n1n2prod ] ;
Code	final long n1n2prod = long [ n2 ] + STRING_CONSTANT + UniformRandomProvider [ n1n2prod ] ;
Distance : 11

325
Tree	final boolean n1n2prod = NUMBER_CONSTANT - n1n2prod ;
Code	final boolean n1n2prod = NUMBER_CONSTANT - n1n2prod ;
Distance : 4

326
Tree	final long n1n2prod = long [ n2 ] - long [ n1n2prod ] ;
Code	final long n1n2prod = long [ n2 ] - long [ n1n2prod ] ;
Distance : 9

327
Tree	final long n1n2prod = long [ n2 ] + STRING_CONSTANT + ^ [ n1n2prod ] ;
Code	final long n1n2prod = long [ n2 ] + STRING_CONSTANT + ^ [ n1n2prod ] ;
Distance : 11

328
Tree	final long n1n2prod = n1 ^ n1n2prod ;
Code	final long n1n2prod = n1 ^ n1n2prod ;
Distance : 3

329
Tree	final long n1n2prod = NUMBER_CONSTANT + n1 ;
Code	final long n1n2prod = NUMBER_CONSTANT + n1 ;
Distance : 4

330
Tree	final long n1n2prod = long / n1n2prod ;
Code	final long n1n2prod = long / n1n2prod ;
Distance : 4

331
Tree	final long n1n2prod = n1 - BLOCK_SIZE ;
Code	final long n1n2prod = n1 - BLOCK_SIZE ;
Distance : 3

332
Tree	final long n1n2prod = n1 * n2 * n2 ;
Code	final long n1n2prod = n1 * n2 * n2 ;
Distance : 3

333
Tree	final long n1n2prod = long - n1n2prod ;
Code	final long n1n2prod = long - n1n2prod ;
Distance : 4

334
Tree	final boolean n1n2prod = n1 ;
Code	final boolean n1n2prod = n1 ;
Distance : 3

335
Tree	final int n1n2prod = NUMBER_CONSTANT / n1 ;
Code	final int n1n2prod = NUMBER_CONSTANT / n1 ;
Distance : 4

336
Tree	final long n1n2prod = NUMBER_CONSTANT * ResizableDoubleArray.ExpansionMode.ADDITIVE ;
Code	final long n1n2prod = NUMBER_CONSTANT * ResizableDoubleArray.ExpansionMode.ADDITIVE ;
Distance : 3

337
Tree	final long n1n2prod = ( long ) n1n2prod * n2 ;
Code	final long n1n2prod = ( long ) n1n2prod * n2 ;
Distance : 5

338
Tree	final long n1n2prod = currentState * n2 ;
Code	final long n1n2prod = currentState * n2 ;
Distance : 2

339
Tree	final long n1n2prod = null / n2 ;
Code	final long n1n2prod = null / n2 ;
Distance : 3

340
Tree	final long n1n2prod = NUMBER_CONSTANT / currentState.length . getRandomGenerator () ;
Code	final long n1n2prod = NUMBER_CONSTANT / currentState.length . getRandomGenerator () ;
Distance : 7

341
Tree	final long n1n2prod = null - n2 ;
Code	final long n1n2prod = null - n2 ;
Distance : 3

342
Tree	final long n1n2prod = Gaussian [ n2 ] ;
Code	final long n1n2prod = Gaussian [ n2 ] ;
Distance : 4

343
Tree	final long n1n2prod = n1 + n2 ;
Code	final long n1n2prod = n1 + n2 ;
Distance : 2

344
Tree	final long n1n2prod = polynomials [ n2 ] - NUMBER_CONSTANT ;
Code	final long n1n2prod = polynomials [ n2 ] - NUMBER_CONSTANT ;
Distance : 6

345
Tree	final long n1n2prod = n1 - currentState ;
Code	final long n1n2prod = n1 - currentState ;
Distance : 3

346
Tree	final long n1n2prod = n1 * n1 ;
Code	final long n1n2prod = n1 * n1 ;
Distance : 2

347
Tree	final int n1n2prod = n1n2prod > n2 ;
Code	final int n1n2prod = n1n2prod > n2 ;
Distance : 3

348
Tree	final int n1n2prod = n1 + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	final int n1n2prod = n1 + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

349
Tree	final void n1n2prod = n1 > > NUMBER_CONSTANT ;
Code	final void n1n2prod = n1 > > NUMBER_CONSTANT ;
Distance : 4

350
Tree	final long n1n2prod = n1 * n1 / n2 ;
Code	final long n1n2prod = n1 * n1 / n2 ;
Distance : 3

351
Tree	final long n1n2prod = n2 * n2 * n1n2prod ;
Code	final long n1n2prod = n2 * n2 * n1n2prod ;
Distance : 4

352
Tree	final long n1n2prod = currentState [ n2 ] - NUMBER_CONSTANT ;
Code	final long n1n2prod = currentState [ n2 ] - NUMBER_CONSTANT ;
Distance : 6

353
Tree	final long n1n2prod = currentState - n2 ;
Code	final long n1n2prod = currentState - n2 ;
Distance : 3

354
Tree	final long n1n2prod = n1 - currentState [ NUMBER_CONSTANT ] ;
Code	final long n1n2prod = n1 - currentState [ NUMBER_CONSTANT ] ;
Distance : 6

355
Tree	final long n1n2prod = long * n2 * n1n2prod ;
Code	final long n1n2prod = long * n2 * n1n2prod ;
Distance : 4

356
Tree	final long n1n2prod = n1 * n2 * n1 ;
Code	final long n1n2prod = n1 * n2 * n1 ;
Distance : 3

357
Tree	final long n1n2prod = NUMBER_CONSTANT / currentState.length . doubleToRawLongBits () ;
Code	final long n1n2prod = NUMBER_CONSTANT / currentState.length . doubleToRawLongBits () ;
Distance : 7

358
Tree	final long n1n2prod = n1 - n1n2prod ;
Code	final long n1n2prod = n1 - n1n2prod ;
Distance : 3

359
Tree	final long n1n2prod = ( long ) LocalizedFormats.DIGEST_NOT_INITIALIZED . get () * n2 ;
Code	final long n1n2prod = ( long ) LocalizedFormats.DIGEST_NOT_INITIALIZED . get () * n2 ;
Distance : 8

360
Tree	final long n1n2prod = n2 [ n2 ] - NUMBER_CONSTANT ;
Code	final long n1n2prod = n2 [ n2 ] - NUMBER_CONSTANT ;
Distance : 6

361
Tree	final int n1n2prod = long - n2 ;
Code	final int n1n2prod = long - n2 ;
Distance : 3

362
Tree	final long n1n2prod = n1 - NUMBER_CONSTANT ;
Code	final long n1n2prod = n1 - NUMBER_CONSTANT ;
Distance : 3

363
Tree	final int n1n2prod = n2 ;
Code	final int n1n2prod = n2 ;
Distance : 3

364
Tree	final long n1n2prod = n2 ;
Code	final long n1n2prod = n2 ;
Distance : 3

365
Tree	final int n1n2prod = long * n2 * n2 ;
Code	final int n1n2prod = long * n2 * n2 ;
Distance : 4

366
Tree	final void n1n2prod = NUMBER_CONSTANT - n1n2prod ;
Code	final void n1n2prod = NUMBER_CONSTANT - n1n2prod ;
Distance : 4

367
Tree	private long n1n2prod = NUMBER_CONSTANT ;
Code	private long n1n2prod = NUMBER_CONSTANT ;
Distance : 5

368
Tree	final int n1n2prod = n2 - n2 ;
Code	final int n1n2prod = n2 - n2 ;
Distance : 3

369
Tree	final int n1n2prod = n2 > > NUMBER_CONSTANT ;
Code	final int n1n2prod = n2 > > NUMBER_CONSTANT ;
Distance : 5

370
Tree	final boolean n1n2prod = NUMBER_CONSTANT ;
Code	final boolean n1n2prod = NUMBER_CONSTANT ;
Distance : 4

371
Tree	final long n2 = n1 > > NUMBER_CONSTANT ;
Code	final long n2 = n1 > > NUMBER_CONSTANT ;
Distance : 5

372
Tree	final boolean n1n2prod = n1 + NUMBER_CONSTANT ;
Code	final boolean n1n2prod = n1 + NUMBER_CONSTANT ;
Distance : 3

373
Tree	final long n1 = NUMBER_CONSTANT + n2 ;
Code	final long n1 = NUMBER_CONSTANT + n2 ;
Distance : 4

374
Tree	final int n1n2prod = n1n2prod * n2 ;
Code	final int n1n2prod = n1n2prod * n2 ;
Distance : 2

375
Tree	final byte n1n2prod = NUMBER_CONSTANT ;
Code	final byte n1n2prod = NUMBER_CONSTANT ;
Distance : 4

376
Tree	final boolean n1n2prod = n1 > > NUMBER_CONSTANT ;
Code	final boolean n1n2prod = n1 > > NUMBER_CONSTANT ;
Distance : 4

377
Tree	final void n1n2prod = n1 + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	final void n1n2prod = n1 + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

378
Tree	protected long n1n2prod = NUMBER_CONSTANT ;
Code	protected long n1n2prod = NUMBER_CONSTANT ;
Distance : 5

379
Tree	final long n2 = n1 * n2 ;
Code	final long n2 = n1 * n2 ;
Distance : 2

========================================================================


========================================================================
Example Number: 25
Parent Code is: 
if ( y >= TWO_POWER_52  y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( y >= TWO_POWER_53  y <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=y}) (251{val=>=}) (800{val=TWO_POWER_52})) (250{val=||}) (27 (800{val=y}) (252{val=<=}) (38 (201{val=-}) (800{val=TWO_POWER_52})))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=pow}) (214{val=(}) (38 (201{val=-}) (800{val=x})) (234{val=,}) (800{val=y}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=y}) (251{val=>=}) (800{val=TWO_POWER_53})) (250{val=||}) (27 (800{val=y}) (252{val=<=}) (38 (201{val=-}) (800{val=TWO_POWER_53})))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=pow}) (214{val=(}) (38 (201{val=-}) (800{val=x})) (234{val=,}) (800{val=y}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/15/parent/src_main_java_org_apache_commons_math3_util_FastMath.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 210
Wrong
========================================================================
False

0
Tree	if ( b.length != null TWO_POWER_52 x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( b.length != null TWO_POWER_52 x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 6

1
Tree	if ( y >= TWO_POWER_52 y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

2
Tree	if ( b.length != null TWO_POWER_52 x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( b.length != null TWO_POWER_52 x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 6

3
Tree	if ( x.length != null TWO_POWER_52 x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( x.length != null TWO_POWER_52 x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 6

4
Tree	if ( array.length != null y x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( array.length != null y x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

5
Tree	if ( d.length != null TWO_POWER_52 x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( d.length != null TWO_POWER_52 x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 6

6
Tree	if ( unequalCounts != null y x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( unequalCounts != null y x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

7
Tree	if ( y >= NUMBER_CONSTANT y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

8
Tree	if ( y != null TWO_POWER_52 x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y != null TWO_POWER_52 x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

9
Tree	if ( y >= NUMBER_CONSTANT y x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

10
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

11
Tree	if ( y >= neededCalls y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= neededCalls y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

12
Tree	if ( y == StepNormalizerMode.MULTIPLES y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y == StepNormalizerMode.MULTIPLES y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

13
Tree	if ( y >= dy y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= dy y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

14
Tree	if ( y == sumObserved y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y == sumObserved y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

15
Tree	if ( y >= rLimit y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= rLimit y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

16
Tree	if ( y >= getCovariances y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= getCovariances y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

17
Tree	if ( y >= NordsieckInitializer y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= NordsieckInitializer y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

18
Tree	if ( y == ! y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y == ! y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

19
Tree	if ( y >= TWO_POWER_52 y y != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y y != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

20
Tree	if ( y != - TWO_POWER_52 y x < Coordinates3D.ZERO ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y x < Coordinates3D.ZERO ) { return pow ( - x , y ) ; }
Distance : 6

21
Tree	if ( y > - TWO_POWER_52 y x < divisor.mant ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y x < divisor.mant ) { return pow ( - x , y ) ; }
Distance : 6

22
Tree	if ( y > - TWO_POWER_52 y x < GoalType.MAXIMIZE ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y x < GoalType.MAXIMIZE ) { return pow ( - x , y ) ; }
Distance : 6

23
Tree	if ( y > - TWO_POWER_52 y x < moment.m3 ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y x < moment.m3 ) { return pow ( - x , y ) ; }
Distance : 6

24
Tree	if ( y > - TWO_POWER_52 y x < upperBound ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y x < upperBound ) { return pow ( - x , y ) ; }
Distance : 6

25
Tree	if ( y > - GoalType.MAXIMIZE y x < Double.MIN_VALUE ) { return pow ( - x , y ) ; }
Code	if ( y > - GoalType.MAXIMIZE y x < Double.MIN_VALUE ) { return pow ( - x , y ) ; }
Distance : 6

26
Tree	if ( y != - TWO_POWER_52 y x < countSum2 ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y x < countSum2 ) { return pow ( - x , y ) ; }
Distance : 6

27
Tree	if ( y != - StepNormalizerMode.MULTIPLES y x < Precision.SAFE_MIN ) { return pow ( - x , y ) ; }
Code	if ( y != - StepNormalizerMode.MULTIPLES y x < Precision.SAFE_MIN ) { return pow ( - x , y ) ; }
Distance : 6

28
Tree	if ( y >= NUMBER_CONSTANT y y != - x ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y y != - x ) { return pow ( - x , y ) ; }
Distance : 4

29
Tree	if ( y > - Double.MIN_VALUE y x < Precision.SAFE_MIN ) { return pow ( - x , y ) ; }
Code	if ( y > - Double.MIN_VALUE y x < Precision.SAFE_MIN ) { return pow ( - x , y ) ; }
Distance : 6

30
Tree	if ( y >= x y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= x y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

31
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

32
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

33
Tree	if ( y >= TWO_POWER_52 y x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

34
Tree	if ( y == PivotSelectionRule.BLAND y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y == PivotSelectionRule.BLAND y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

35
Tree	if ( x >= NUMBER_CONSTANT y x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( x >= NUMBER_CONSTANT y x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

36
Tree	if ( x >= NUMBER_CONSTANT y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( x >= NUMBER_CONSTANT y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

37
Tree	if ( y >= TWO_POWER_52 y y <= - x ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - x ) { return pow ( - x , y ) ; }
Distance : 3

38
Tree	if ( x >= TWO_POWER_52 y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( x >= TWO_POWER_52 y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

39
Tree	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

40
Tree	if ( y > - TWO_POWER_52 y x < LocalizedFormats.NUMBER_TOO_SMALL ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y x < LocalizedFormats.NUMBER_TOO_SMALL ) { return pow ( - x , y ) ; }
Distance : 6

41
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

42
Tree	if ( x >= NUMBER_CONSTANT y x != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( x >= NUMBER_CONSTANT y x != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

43
Tree	if ( y >= NUMBER_CONSTANT y x <= - x ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y x <= - x ) { return pow ( - x , y ) ; }
Distance : 3

44
Tree	if ( y >= NUMBER_CONSTANT y y <= - NUMBER_CONSTANT ) { return pow ( - TWO_POWER_52 , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y y <= - NUMBER_CONSTANT ) { return pow ( - TWO_POWER_52 , y ) ; }
Distance : 4

45
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

46
Tree	if ( y > - Double.MIN_VALUE y x < Double.MIN_VALUE ) { return pow ( - x , y ) ; }
Code	if ( y > - Double.MIN_VALUE y x < Double.MIN_VALUE ) { return pow ( - x , y ) ; }
Distance : 6

47
Tree	if ( y >= NUMBER_CONSTANT y y != - NUMBER_CONSTANT ) { return pow ( - TWO_POWER_52 , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y y != - NUMBER_CONSTANT ) { return pow ( - TWO_POWER_52 , y ) ; }
Distance : 5

48
Tree	if ( y != - TWO_POWER_52 y x < StepNormalizerMode.MULTIPLES ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y x < StepNormalizerMode.MULTIPLES ) { return pow ( - x , y ) ; }
Distance : 6

49
Tree	if ( y >= NUMBER_CONSTANT y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

50
Tree	if ( y > - TWO_POWER_52 y x < Coordinates3D.ZERO ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y x < Coordinates3D.ZERO ) { return pow ( - x , y ) ; }
Distance : 6

51
Tree	if ( y >= TWO_POWER_52 y y <= - x ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - x ) { return pow ( - x , y ) ; }
Distance : 3

52
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

53
Tree	if ( y >= TWO_POWER_52 y y <= - NUMBER_CONSTANT ) { return pow ( - TWO_POWER_52 , y ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - NUMBER_CONSTANT ) { return pow ( - TWO_POWER_52 , y ) ; }
Distance : 4

54
Tree	if ( y != - StepNormalizerMode.MULTIPLES y x < StepNormalizerMode.MULTIPLES ) { return pow ( - x , y ) ; }
Code	if ( y != - StepNormalizerMode.MULTIPLES y x < StepNormalizerMode.MULTIPLES ) { return pow ( - x , y ) ; }
Distance : 6

55
Tree	if ( y >= NUMBER_CONSTANT y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

56
Tree	if ( TWO_POWER_52 >= NUMBER_CONSTANT y x != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= NUMBER_CONSTANT y x != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

57
Tree	if ( x >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( x >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

58
Tree	if ( y > - StepNormalizerMode.MULTIPLES y x < countSum2 ) { return pow ( - x , y ) ; }
Code	if ( y > - StepNormalizerMode.MULTIPLES y x < countSum2 ) { return pow ( - x , y ) ; }
Distance : 6

59
Tree	if ( y != - TWO_POWER_52 y x < maximumIterations ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y x < maximumIterations ) { return pow ( - x , y ) ; }
Distance : 6

60
Tree	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

61
Tree	if ( y != - TWO_POWER_52 y x < LocalizedFormats.NUMBER_TOO_SMALL ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y x < LocalizedFormats.NUMBER_TOO_SMALL ) { return pow ( - x , y ) ; }
Distance : 6

62
Tree	if ( y >= TWO_POWER_52 y y != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y y != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

63
Tree	if ( y >= y y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= y y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

64
Tree	if ( y >= NUMBER_CONSTANT y x <= - NUMBER_CONSTANT ) { return pow ( - TWO_POWER_52 , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y x <= - NUMBER_CONSTANT ) { return pow ( - TWO_POWER_52 , y ) ; }
Distance : 4

65
Tree	if ( Double.MIN_VALUE != null >= x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( Double.MIN_VALUE != null >= x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 6

66
Tree	if ( TWO_POWER_52 >= NUMBER_CONSTANT y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= NUMBER_CONSTANT y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

67
Tree	if ( y >= pow ( y , NUMBER_CONSTANT , y ) <= x < pow ( - x , y ) * y ) {}
Code	if ( y >= pow ( y , NUMBER_CONSTANT , y ) <= x < pow ( - x , y ) * y ) {}
Distance : 13

68
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

69
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - TWO_POWER_52 , y ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - TWO_POWER_52 , y ) ; }
Distance : 4

70
Tree	if ( y >= TWO_POWER_52 y y != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y y != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

71
Tree	if ( TWO_POWER_52 >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

72
Tree	if ( x >= NUMBER_CONSTANT y y != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( x >= NUMBER_CONSTANT y y != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

73
Tree	if ( y >= pow ( y , NUMBER_CONSTANT , y ) <= x < pow ( - x , y ) * y ) %
Code	if ( y >= pow ( y , NUMBER_CONSTANT , y ) <= x < pow ( - x , y ) * y ) %
Distance : 13

74
Tree	if ( Double.NEGATIVE_INFINITY != null TWO_POWER_52 x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( Double.NEGATIVE_INFINITY != null TWO_POWER_52 x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 6

75
Tree	if ( y >= TWO_POWER_52 y y != - x ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y y != - x ) { return pow ( - x , y ) ; }
Distance : 4

76
Tree	if ( y >= NUMBER_CONSTANT y x != - x ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y x != - x ) { return pow ( - x , y ) ; }
Distance : 4

77
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

78
Tree	if ( y >= pow ( y , NUMBER_CONSTANT , y ) - x < pow ( - x , y ) * y ) ^
Code	if ( y >= pow ( y , NUMBER_CONSTANT , y ) - x < pow ( - x , y ) * y ) ^
Distance : 13

79
Tree	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

80
Tree	if ( y != - Precision.SAFE_MIN y x < Precision.SAFE_MIN ) { return pow ( - x , y ) ; }
Code	if ( y != - Precision.SAFE_MIN y x < Precision.SAFE_MIN ) { return pow ( - x , y ) ; }
Distance : 6

81
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return x . pow ( x , d.length , y , GoalType.MAXIMIZE ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return x . pow ( x , d.length , y , GoalType.MAXIMIZE ) ; }
Distance : 10

82
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

83
Tree	if ( y != - StepNormalizerMode.MULTIPLES y x < Double.MIN_VALUE ) { return pow ( - x , y ) ; }
Code	if ( y != - StepNormalizerMode.MULTIPLES y x < Double.MIN_VALUE ) { return pow ( - x , y ) ; }
Distance : 6

84
Tree	if ( y >= NUMBER_CONSTANT y x != - NUMBER_CONSTANT ) { return pow ( - TWO_POWER_52 , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y x != - NUMBER_CONSTANT ) { return pow ( - TWO_POWER_52 , y ) ; }
Distance : 5

85
Tree	if ( y >= pow ( y , NUMBER_CONSTANT , y ) <= x < pow ( - x , y ) * y ) ?
Code	if ( y >= pow ( y , NUMBER_CONSTANT , y ) <= x < pow ( - x , y ) * y ) ?
Distance : 13

86
Tree	if ( y > - Double.MIN_VALUE y x < countSum2 ) { return pow ( - x , y ) ; }
Code	if ( y > - Double.MIN_VALUE y x < countSum2 ) { return pow ( - x , y ) ; }
Distance : 6

87
Tree	if ( TWO_POWER_52 >= TWO_POWER_52 y y != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= TWO_POWER_52 y y != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

88
Tree	if ( y >= TWO_POWER_52 y x != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y x != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

89
Tree	if ( y >= pow ( y , NUMBER_CONSTANT , y ) y x < pow ( - x , y ) * y ) >=
Code	if ( y >= pow ( y , NUMBER_CONSTANT , y ) y x < pow ( - x , y ) * y ) >=
Distance : 13

90
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return x . pow ( x , d.length , y , otherL.cos ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return x . pow ( x , d.length , y , otherL.cos ) ; }
Distance : 10

91
Tree	if ( x >= NUMBER_CONSTANT y x != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( x >= NUMBER_CONSTANT y x != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 5

92
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

93
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - TWO_POWER_52 , y ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - TWO_POWER_52 , y ) ; }
Distance : 4

94
Tree	if ( y != - PivotSelectionRule.BLAND y x < StepNormalizerMode.MULTIPLES ) { return pow ( - x , y ) ; }
Code	if ( y != - PivotSelectionRule.BLAND y x < StepNormalizerMode.MULTIPLES ) { return pow ( - x , y ) ; }
Distance : 6

95
Tree	if ( y != - PivotSelectionRule.BLAND y x < Double.MIN_VALUE ) { return pow ( - x , y ) ; }
Code	if ( y != - PivotSelectionRule.BLAND y x < Double.MIN_VALUE ) { return pow ( - x , y ) ; }
Distance : 6

96
Tree	if ( y > - TWO_POWER_52 y x < maximumIterations ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y x < maximumIterations ) { return pow ( - x , y ) ; }
Distance : 6

97
Tree	if ( y >= TWO_POWER_52 y y != - y ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y y != - y ) { return pow ( - x , y ) ; }
Distance : 4

98
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return x . pow ( x , b.length , y , LocalizedFormats.OVERFLOW_IN_ADDITION ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return x . pow ( x , b.length , y , LocalizedFormats.OVERFLOW_IN_ADDITION ) ; }
Distance : 10

99
Tree	if ( y >= pow ( y , NUMBER_CONSTANT , y ) <= x < pow ( - x , y ) * y ) &&
Code	if ( y >= pow ( y , NUMBER_CONSTANT , y ) <= x < pow ( - x , y ) * y ) &&
Distance : 13

100
Tree	if ( y != - Precision.SAFE_MIN y x < Double.MIN_VALUE ) { return pow ( - x , y ) ; }
Code	if ( y != - Precision.SAFE_MIN y x < Double.MIN_VALUE ) { return pow ( - x , y ) ; }
Distance : 6

101
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return x . pow ( x , LocalizedFormats.OVERFLOW_IN_ADDITION , y , LocalizedFormats.OVERFLOW_IN_ADDITION ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return x . pow ( x , LocalizedFormats.OVERFLOW_IN_ADDITION , y , LocalizedFormats.OVERFLOW_IN_ADDITION ) ; }
Distance : 10

102
Tree	if ( y != - Double.MIN_VALUE y x < StepNormalizerMode.MULTIPLES ) { return pow ( - x , y ) ; }
Code	if ( y != - Double.MIN_VALUE y x < StepNormalizerMode.MULTIPLES ) { return pow ( - x , y ) ; }
Distance : 6

103
Tree	if ( y != - TWO_POWER_52 y x < upperBound ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y x < upperBound ) { return pow ( - x , y ) ; }
Distance : 6

104
Tree	if ( y >= pow ( y , NUMBER_CONSTANT , y ) <= x < pow ( - x , y ) * y ) &
Code	if ( y >= pow ( y , NUMBER_CONSTANT , y ) <= x < pow ( - x , y ) * y ) &
Distance : 13

105
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return x . pow ( x , d.length , y , Coordinates3D.PLUS_K ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return x . pow ( x , d.length , y , Coordinates3D.PLUS_K ) ; }
Distance : 10

106
Tree	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - TWO_POWER_52 , y ) ; }
Code	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - TWO_POWER_52 , y ) ; }
Distance : 4

107
Tree	if ( y != - TWO_POWER_52 y x < divisor.mant ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y x < divisor.mant ) { return pow ( - x , y ) ; }
Distance : 6

108
Tree	if ( y != - Precision.SAFE_MIN y x < StepNormalizerMode.MULTIPLES ) { return pow ( - x , y ) ; }
Code	if ( y != - Precision.SAFE_MIN y x < StepNormalizerMode.MULTIPLES ) { return pow ( - x , y ) ; }
Distance : 6

109
Tree	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

110
Tree	if ( y >= variablesToInclude.length y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= variablesToInclude.length y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

111
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

112
Tree	if ( y >= degree y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= degree y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

113
Tree	if ( y >= NUMBER_CONSTANT y y != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y y != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

114
Tree	if ( y != - TWO_POWER_52 y x < absX ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y x < absX ) { return pow ( - x , y ) ; }
Distance : 6

115
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

116
Tree	if ( y > - GoalType.MAXIMIZE y x < StepNormalizerMode.MULTIPLES ) { return pow ( - x , y ) ; }
Code	if ( y > - GoalType.MAXIMIZE y x < StepNormalizerMode.MULTIPLES ) { return pow ( - x , y ) ; }
Distance : 6

117
Tree	if ( y >= MACH_PREC y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= MACH_PREC y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

118
Tree	if ( interpolate != null TWO_POWER_52 x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( interpolate != null TWO_POWER_52 x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 6

119
Tree	if ( TWO_POWER_52 >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

120
Tree	if ( x >= TWO_POWER_52 y y != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( x >= TWO_POWER_52 y y != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

121
Tree	if ( y != - TWO_POWER_52 y x < GoalType.MAXIMIZE ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y x < GoalType.MAXIMIZE ) { return pow ( - x , y ) ; }
Distance : 6

122
Tree	if ( y >= TWO_POWER_52 y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

123
Tree	if ( y >= NUMBER_CONSTANT y y != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y y != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

124
Tree	if ( y >= NUMBER_CONSTANT y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

125
Tree	if ( y >= countSum2 y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= countSum2 y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

126
Tree	if ( y >= TWO_POWER_52 y y != - NUMBER_CONSTANT ) { return pow ( - TWO_POWER_52 , y ) ; }
Code	if ( y >= TWO_POWER_52 y y != - NUMBER_CONSTANT ) { return pow ( - TWO_POWER_52 , y ) ; }
Distance : 5

127
Tree	if ( y >= PolynomialFunction y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= PolynomialFunction y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

128
Tree	if ( TWO_POWER_52 >= TWO_POWER_52 y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= TWO_POWER_52 y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

129
Tree	if ( y >= pow ( y , NUMBER_CONSTANT , y ) y x < pow ( - x , y ) * y ) <=
Code	if ( y >= pow ( y , NUMBER_CONSTANT , y ) y x < pow ( - x , y ) * y ) <=
Distance : 13

130
Tree	if ( y >= NUMBER_CONSTANT y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

131
Tree	if ( y >= NUMBER_CONSTANT y x != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y x != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

132
Tree	if ( TWO_POWER_52 >= NUMBER_CONSTANT y y != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= NUMBER_CONSTANT y y != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

133
Tree	if ( unequalCounts != null TWO_POWER_52 x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( unequalCounts != null TWO_POWER_52 x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 6

134
Tree	if ( y >= NUMBER_CONSTANT y y <= - x ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y y <= - x ) { return pow ( - x , y ) ; }
Distance : 3

135
Tree	if ( array.length != null TWO_POWER_52 x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( array.length != null TWO_POWER_52 x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 6

136
Tree	if ( TWO_POWER_52 >= NUMBER_CONSTANT y x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= NUMBER_CONSTANT y x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

137
Tree	if ( y >= NUMBER_CONSTANT y y <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Code	if ( y >= NUMBER_CONSTANT y y <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Distance : 4

138
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

139
Tree	if ( x.length != null TWO_POWER_52 x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( x.length != null TWO_POWER_52 x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 6

140
Tree	if ( y > - TWO_POWER_52 y x < countSum2 ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y x < countSum2 ) { return pow ( - x , y ) ; }
Distance : 6

141
Tree	if ( y > - StepNormalizerMode.MULTIPLES y x < StepNormalizerMode.MULTIPLES ) { return pow ( - x , y ) ; }
Code	if ( y > - StepNormalizerMode.MULTIPLES y x < StepNormalizerMode.MULTIPLES ) { return pow ( - x , y ) ; }
Distance : 6

142
Tree	if ( y > - Double.MIN_VALUE y x < StepNormalizerMode.MULTIPLES ) { return pow ( - x , y ) ; }
Code	if ( y > - Double.MIN_VALUE y x < StepNormalizerMode.MULTIPLES ) { return pow ( - x , y ) ; }
Distance : 6

143
Tree	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

144
Tree	if ( y >= pow ( y , NUMBER_CONSTANT , y ) y x < pow ( - x , y ) * y ) *=
Code	if ( y >= pow ( y , NUMBER_CONSTANT , y ) y x < pow ( - x , y ) * y ) *=
Distance : 13

145
Tree	if ( x >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( x >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

146
Tree	if ( x >= NUMBER_CONSTANT y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( x >= NUMBER_CONSTANT y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

147
Tree	if ( y >= TWO_POWER_52 y y <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Distance : 4

148
Tree	if ( y >= NUMBER_CONSTANT y y != - y ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y y != - y ) { return pow ( - x , y ) ; }
Distance : 4

149
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

150
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

151
Tree	if ( observations.length != null TWO_POWER_52 x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( observations.length != null TWO_POWER_52 x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 6

152
Tree	if ( y >= NUMBER_CONSTANT y y != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y y != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

153
Tree	if ( y >= x y y != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= x y y != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

154
Tree	if ( y != - GoalType.MAXIMIZE y x < StepNormalizerMode.MULTIPLES ) { return pow ( - x , y ) ; }
Code	if ( y != - GoalType.MAXIMIZE y x < StepNormalizerMode.MULTIPLES ) { return pow ( - x , y ) ; }
Distance : 6

155
Tree	if ( x >= NUMBER_CONSTANT y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( x >= NUMBER_CONSTANT y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

156
Tree	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - y ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - y ) { return pow ( - x , y ) ; }
Distance : 3

157
Tree	if ( y >= NUMBER_CONSTANT y x != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y x != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

158
Tree	if ( y != - TWO_POWER_52 y x < Double.MIN_VALUE ) { return pow ( - x , y ) ; }
Code	if ( y != - TWO_POWER_52 y x < Double.MIN_VALUE ) { return pow ( - x , y ) ; }
Distance : 6

159
Tree	if ( y >= y y y != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= y y y != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

160
Tree	if ( y >= NUMBER_CONSTANT y x != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y x != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

161
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return x . pow ( x , d.length , y , LocalizedFormats.OVERFLOW_IN_ADDITION ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return x . pow ( x , d.length , y , LocalizedFormats.OVERFLOW_IN_ADDITION ) ; }
Distance : 10

162
Tree	if ( Double.MIN_VALUE != null TWO_POWER_52 x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( Double.MIN_VALUE != null TWO_POWER_52 x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 6

163
Tree	if ( Double.NEGATIVE_INFINITY != null y x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( Double.NEGATIVE_INFINITY != null y x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

164
Tree	if ( d.length != null TWO_POWER_52 x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( d.length != null TWO_POWER_52 x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 6

165
Tree	if ( y >= NUMBER_CONSTANT y x != - y ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y x != - y ) { return pow ( - x , y ) ; }
Distance : 4

166
Tree	if ( y > - TWO_POWER_52 y x < Double.MIN_VALUE ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y x < Double.MIN_VALUE ) { return pow ( - x , y ) ; }
Distance : 6

167
Tree	if ( interpolate != null TWO_POWER_52 x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( interpolate != null TWO_POWER_52 x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 6

168
Tree	if ( y >= TWO_POWER_52 y y != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y y != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

169
Tree	if ( TWO_POWER_52 >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( TWO_POWER_52 >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 6

170
Tree	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

171
Tree	if ( y >= TWO_POWER_52 y x != - NUMBER_CONSTANT ) { return pow ( - TWO_POWER_52 , y ) ; }
Code	if ( y >= TWO_POWER_52 y x != - NUMBER_CONSTANT ) { return pow ( - TWO_POWER_52 , y ) ; }
Distance : 5

172
Tree	if ( y != null TWO_POWER_52 x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y != null TWO_POWER_52 x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 5

173
Tree	if ( y >= TWO_POWER_52 y y <= - x ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - x ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

174
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

175
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return x . pow ( x , d.length , y , line.sin ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return x . pow ( x , d.length , y , line.sin ) ; }
Distance : 10

176
Tree	if ( y > - TWO_POWER_52 y x < StepNormalizerMode.MULTIPLES ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y x < StepNormalizerMode.MULTIPLES ) { return pow ( - x , y ) ; }
Distance : 6

177
Tree	if ( y >= TWO_POWER_52 y y != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y y != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

178
Tree	if ( observations.length != null TWO_POWER_52 x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( observations.length != null TWO_POWER_52 x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 6

179
Tree	if ( y >= TWO_POWER_52 y y != - TWO_POWER_52 ) { return pow ( - TWO_POWER_52 , y ) ; }
Code	if ( y >= TWO_POWER_52 y y != - TWO_POWER_52 ) { return pow ( - TWO_POWER_52 , y ) ; }
Distance : 5

180
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return x . pow ( x , d.length , y , v2.y ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return x . pow ( x , d.length , y , v2.y ) ; }
Distance : 10

181
Tree	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

182
Tree	if ( y > - StepNormalizerMode.MULTIPLES y x < Double.MIN_VALUE ) { return pow ( - x , y ) ; }
Code	if ( y > - StepNormalizerMode.MULTIPLES y x < Double.MIN_VALUE ) { return pow ( - x , y ) ; }
Distance : 6

183
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return x . pow ( x , y , y , LocalizedFormats.OVERFLOW_IN_ADDITION ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return x . pow ( x , y , y , LocalizedFormats.OVERFLOW_IN_ADDITION ) ; }
Distance : 10

184
Tree	if ( x >= TWO_POWER_52 y y != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( x >= TWO_POWER_52 y y != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 5

185
Tree	if ( x >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( x >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 6

186
Tree	if ( y >= NUMBER_CONSTANT y y <= - y ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y y <= - y ) { return pow ( - x , y ) ; }
Distance : 3

187
Tree	if ( y >= TWO_POWER_52 y y <= - y ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - y ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

188
Tree	if ( x >= TWO_POWER_52 y NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( x >= TWO_POWER_52 y NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

189
Tree	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

190
Tree	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - x ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - x ) { return pow ( - x , y ) ; }
Distance : 3

191
Tree	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - x ) { return pow ( - TWO_POWER_52 , y ) ; }
Code	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - x ) { return pow ( - TWO_POWER_52 , y ) ; }
Distance : 4

192
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

193
Tree	if ( x >= NUMBER_CONSTANT y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( x >= NUMBER_CONSTANT y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

194
Tree	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - TWO_POWER_52 , y ) ; }
Code	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - TWO_POWER_52 , y ) ; }
Distance : 4

195
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

196
Tree	if ( y == GoalType.MAXIMIZE y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y == GoalType.MAXIMIZE y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

197
Tree	if ( y > - StepNormalizerMode.MULTIPLES y x < Precision.SAFE_MIN ) { return pow ( - x , y ) ; }
Code	if ( y > - StepNormalizerMode.MULTIPLES y x < Precision.SAFE_MIN ) { return pow ( - x , y ) ; }
Distance : 6

198
Tree	if ( y == null y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y == null y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

199
Tree	if ( y >= TWO_POWER_52 y x != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y x != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

200
Tree	if ( y >= pow ( y , NUMBER_CONSTANT , y ) <= x < pow ( - x , y ) * y ) &=
Code	if ( y >= pow ( y , NUMBER_CONSTANT , y ) <= x < pow ( - x , y ) * y ) &=
Distance : 13

201
Tree	if ( TWO_POWER_52 >= TWO_POWER_52 y NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( TWO_POWER_52 >= TWO_POWER_52 y NUMBER_CONSTANT - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

202
Tree	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

203
Tree	if ( y == Integer.MIN_VALUE y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y == Integer.MIN_VALUE y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

204
Tree	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return x . pow ( x , d.length , y , upperBound ) ; }
Code	if ( y >= TWO_POWER_52 y y <= - TWO_POWER_52 ) { return x . pow ( x , d.length , y , upperBound ) ; }
Distance : 10

205
Tree	if ( y == variablesToInclude.length y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y == variablesToInclude.length y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

206
Tree	if ( y >= TWO_POWER_52 y x != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y x != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

207
Tree	if ( y == >= y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y == >= y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

208
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

209
Tree	if ( y == boundaries y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y == boundaries y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

========================================================================


========================================================================
Example Number: 26
Parent Code is: 
FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
-------------------------------------------------------------------------------
Child code is: 
FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - NUMBER_CONSTANT * dim ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (32 (800{val=FastMath}) (235{val=.}) (802{val=pow}) (214{val=(}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (40{val=FastMath.PI})) (234{val=,}) (27 (38 (201{val=-}) (800{val=dim})) (203{val=/}) (34{val=NUMBER_CONSTANT})) (215{val=)})) (202{val=*}) (32 (800{val=FastMath}) (235{val=.}) (802{val=pow}) (214{val=(}) (800{val=covarianceMatrixDeterminant}) (234{val=,}) (38 (201{val=-}) (34{val=NUMBER_CONSTANT})) (215{val=)})) (202{val=*}) (32 (802{val=getExponentTerm}) (214{val=(}) (800{val=vals}) (215{val=)}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (32 (800{val=FastMath}) (235{val=.}) (802{val=pow}) (214{val=(}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (40{val=FastMath.PI})) (234{val=,}) (27 (38 (201{val=-}) (34{val=NUMBER_CONSTANT})) (202{val=*}) (800{val=dim})) (215{val=)})) (202{val=*}) (32 (800{val=FastMath}) (235{val=.}) (802{val=pow}) (214{val=(}) (800{val=covarianceMatrixDeterminant}) (234{val=,}) (38 (201{val=-}) (34{val=NUMBER_CONSTANT})) (215{val=)})) (202{val=*}) (32 (802{val=getExponentTerm}) (214{val=(}) (800{val=vals}) (215{val=)}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/11/parent/src_main_java_org_apache_commons_math3_distribution_MultivariateNormalDistribution.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 10
Wrong
========================================================================
False

0
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

1
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( FastMath , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( FastMath , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

2
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

3
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

4
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * pow ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * pow ( vals )
Distance : 4

5
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( FastMath , - NUMBER_CONSTANT ) * pow ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( FastMath , - NUMBER_CONSTANT ) * pow ( vals )
Distance : 5

6
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * pow ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * pow ( vals )
Distance : 5

7
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * pow ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( dim , - NUMBER_CONSTANT ) * pow ( vals )
Distance : 5

8
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Distance : 4

9
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( FastMath , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( FastMath , - NUMBER_CONSTANT ) * getExponentTerm ( dim )
Distance : 5

========================================================================


========================================================================
Example Number: 27
Parent Code is: 
iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ;
-------------------------------------------------------------------------------
Child code is: 
iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (7 (800{val=iterations}) (204{val==}) (14 (304{val=new}) (43 (801{val=Incrementor})) (214{val=(}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (14 (304{val=new}) (43 (801{val=MaxIterCallback})) (216{val=()})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (7 (800{val=iterations}) (204{val==}) (14 (304{val=new}) (43 (801{val=Incrementor})) (214{val=(}) (40{val=Integer.MAX_VALUE}) (234{val=,}) (14 (304{val=new}) (43 (801{val=MaxIterCallback})) (216{val=()})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/6/parent/src_main_java_org_apache_commons_math3_optim_BaseOptimizer.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 280
Correct
========================================================================
True

0
Tree	iterations = new Incrementor ( true ) ;
Code	iterations = new Incrementor ( true ) ;
Distance : 5

1
Tree	iterations = new Incrementor ( this , Integer.MAX_VALUE ) ;
Code	iterations = new Incrementor ( this , Integer.MAX_VALUE ) ;
Distance : 4

2
Tree	iterations = new Incrementor < iterations > () ;
Code	iterations = new Incrementor < iterations > () ;
Distance : 6

3
Tree	iterations = new Incrementor ( new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( new MaxIterCallback () ) ;
Distance : 2

4
Tree	iterations = new Incrementor < iterations > ( null ) ;
Code	iterations = new Incrementor < iterations > ( null ) ;
Distance : 6

5
Tree	iterations = new Incrementor ( this , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( this , new MaxIterCallback () ) ;
Distance : 1

6
Tree	iterations = new Incrementor ( new MaxIterCallback ( null ) ) ;
Code	iterations = new Incrementor ( new MaxIterCallback ( null ) ) ;
Distance : 5

7
Tree	iterations = new Incrementor ( STRING_CONSTANT , new MaxIterCallback () , true ) ;
Code	iterations = new Incrementor ( STRING_CONSTANT , new MaxIterCallback () , true ) ;
Distance : 3

8
Tree	iterations = new Incrementor ( false ) ;
Code	iterations = new Incrementor ( false ) ;
Distance : 5

9
Tree	iterations = new Incrementor ( new MaxIterCallback () , Integer.MAX_VALUE ) ; Complex
Code	iterations = new Incrementor ( new MaxIterCallback () , Integer.MAX_VALUE ) ; Complex
Distance : 5

10
Tree	iterations = new Incrementor ( null , iterations , new MaxIterCallback () ) ; UnivariateRealFunction
Code	iterations = new Incrementor ( null , iterations , new MaxIterCallback () ) ; UnivariateRealFunction
Distance : 4

11
Tree	iterations = new Incrementor ( continue; , iterations , new MaxIterCallback () , null ) ;
Code	iterations = new Incrementor ( continue; , iterations , new MaxIterCallback () , null ) ;
Distance : 5

12
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , arguments , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , arguments , iterations ) ;
Distance : 7

13
Tree	iterations = new Incrementor ( new MaxIterCallback ( continue; ) , Integer.MAX_VALUE ) ;
Code	iterations = new Incrementor ( new MaxIterCallback ( continue; ) , Integer.MAX_VALUE ) ;
Distance : 7

14
Tree	iterations = new Incrementor ( return; , iterations , new MaxIterCallback () , null ) ;
Code	iterations = new Incrementor ( return; , iterations , new MaxIterCallback () , null ) ;
Distance : 5

15
Tree	iterations = new Incrementor < iterations > ( break; ) ;
Code	iterations = new Incrementor < iterations > ( break; ) ;
Distance : 6

16
Tree	iterations = new Incrementor ( new MaxIterCallback ( return; ) ) ;
Code	iterations = new Incrementor ( new MaxIterCallback ( return; ) ) ;
Distance : 5

17
Tree	iterations = new Incrementor ( continue; , iterations , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( continue; , iterations , new MaxIterCallback () ) ;
Distance : 3

18
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , getSolver , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , getSolver , iterations ) ;
Distance : 7

19
Tree	iterations = new Incrementor ( new MaxIterCallback () , Integer.MAX_VALUE ) ; try
Code	iterations = new Incrementor ( new MaxIterCallback () , Integer.MAX_VALUE ) ; try
Distance : 5

20
Tree	iterations = new Incrementor < iterations > ( continue; ) ;
Code	iterations = new Incrementor < iterations > ( continue; ) ;
Distance : 6

21
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , newNaNStrategy , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , newNaNStrategy , iterations ) ;
Distance : 4

22
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , threshold , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , threshold , iterations ) ;
Distance : 4

23
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , true , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , true , iterations ) ;
Distance : 7

24
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , threshold ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , threshold ) ;
Distance : 3

25
Tree	iterations = new Incrementor < iterations > ( iterations , true ) ;
Code	iterations = new Incrementor < iterations > ( iterations , true ) ;
Distance : 7

26
Tree	iterations = new Incrementor ( new MaxIterCallback () , Integer.MAX_VALUE ) ; false
Code	iterations = new Incrementor ( new MaxIterCallback () , Integer.MAX_VALUE ) ; false
Distance : 5

27
Tree	iterations = new Incrementor ( null , iterations , new MaxIterCallback () ) ; point
Code	iterations = new Incrementor ( null , iterations , new MaxIterCallback () ) ; point
Distance : 4

28
Tree	iterations = new Incrementor ( new MaxIterCallback () ) ; Fraction
Code	iterations = new Incrementor ( new MaxIterCallback () ) ; Fraction
Distance : 3

29
Tree	iterations = new Incrementor ( new MaxIterCallback () , Integer.MAX_VALUE ) ; Fraction
Code	iterations = new Incrementor ( new MaxIterCallback () , Integer.MAX_VALUE ) ; Fraction
Distance : 5

30
Tree	iterations = new Incrementor ( new MaxIterCallback () ) ; try
Code	iterations = new Incrementor ( new MaxIterCallback () ) ; try
Distance : 3

31
Tree	iterations = new Incrementor < iterations > () ; Complex
Code	iterations = new Incrementor < iterations > () ; Complex
Distance : 7

32
Tree	iterations = new Incrementor < iterations > () ; try
Code	iterations = new Incrementor < iterations > () ; try
Distance : 7

33
Tree	iterations = new Incrementor < iterations > () ; false
Code	iterations = new Incrementor < iterations > () ; false
Distance : 7

34
Tree	iterations = new Incrementor < iterations > () ; int
Code	iterations = new Incrementor < iterations > () ; int
Distance : 7

35
Tree	iterations = new Incrementor < iterations > () ; data
Code	iterations = new Incrementor < iterations > () ; data
Distance : 7

36
Tree	iterations = new Incrementor < iterations > () ; void
Code	iterations = new Incrementor < iterations > () ; void
Distance : 7

37
Tree	iterations = new Incrementor < iterations > () ; p
Code	iterations = new Incrementor < iterations > () ; p
Distance : 7

38
Tree	iterations = new Incrementor < iterations > () ; Fraction
Code	iterations = new Incrementor < iterations > () ; Fraction
Distance : 7

39
Tree	iterations = new Incrementor ( new MaxIterCallback () , iterations ) ; Fraction
Code	iterations = new Incrementor ( new MaxIterCallback () , iterations ) ; Fraction
Distance : 5

40
Tree	iterations = new Incrementor ( new MaxIterCallback () , iterations ) ; p
Code	iterations = new Incrementor ( new MaxIterCallback () , iterations ) ; p
Distance : 5

41
Tree	iterations = new Incrementor ( new MaxIterCallback () , iterations ) ; void
Code	iterations = new Incrementor ( new MaxIterCallback () , iterations ) ; void
Distance : 5

42
Tree	iterations = new Incrementor ( new MaxIterCallback () , iterations ) ; data
Code	iterations = new Incrementor ( new MaxIterCallback () , iterations ) ; data
Distance : 5

43
Tree	iterations = new Incrementor ( new MaxIterCallback () , iterations ) ; field
Code	iterations = new Incrementor ( new MaxIterCallback () , iterations ) ; field
Distance : 5

44
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , means ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , means ) ;
Distance : 3

45
Tree	iterations = new Incrementor ( null , iterations , new MaxIterCallback () ) ; n
Code	iterations = new Incrementor ( null , iterations , new MaxIterCallback () ) ; n
Distance : 4

46
Tree	iterations = new Incrementor ( new MaxIterCallback () , Integer.MAX_VALUE ) ; int
Code	iterations = new Incrementor ( new MaxIterCallback () , Integer.MAX_VALUE ) ; int
Distance : 5

47
Tree	iterations = new Incrementor ( new MaxIterCallback < iterations > () , Integer.MAX_VALUE ) ;
Code	iterations = new Incrementor ( new MaxIterCallback < iterations > () , Integer.MAX_VALUE ) ;
Distance : 7

48
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , null , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , null , iterations ) ;
Distance : 4

49
Tree	iterations = new Incrementor < iterations > ( super(); ) ;
Code	iterations = new Incrementor < iterations > ( super(); ) ;
Distance : 6

50
Tree	iterations = new Incrementor ( new MaxIterCallback () , null , true ) ;
Code	iterations = new Incrementor ( new MaxIterCallback () , null , true ) ;
Distance : 6

51
Tree	iterations = new Incrementor ( STRING_CONSTANT , new MaxIterCallback () , unsupported ) ;
Code	iterations = new Incrementor ( STRING_CONSTANT , new MaxIterCallback () , unsupported ) ;
Distance : 3

52
Tree	iterations = new Incrementor ( iterations , getUT () , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( iterations , getUT () , new MaxIterCallback () ) ;
Distance : 4

53
Tree	iterations = new Incrementor ( new MaxIterCallback () , iterations ) ;
Code	iterations = new Incrementor ( new MaxIterCallback () , iterations ) ;
Distance : 4

54
Tree	iterations = new Incrementor ( new MaxIterCallback () , false , NUMBER_CONSTANT ) ;
Code	iterations = new Incrementor ( new MaxIterCallback () , false , NUMBER_CONSTANT ) ;
Distance : 6

55
Tree	iterations = new Incrementor ( iterations , getNaNStrategy () , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( iterations , getNaNStrategy () , new MaxIterCallback () ) ;
Distance : 4

56
Tree	iterations = new iterations ( iterations , getUT () , new MaxIterCallback () ) ;
Code	iterations = new iterations ( iterations , getUT () , new MaxIterCallback () ) ;
Distance : 5

57
Tree	iterations = new Incrementor ( STRING_CONSTANT , new MaxIterCallback () , means ) ;
Code	iterations = new Incrementor ( STRING_CONSTANT , new MaxIterCallback () , means ) ;
Distance : 3

58
Tree	iterations = new Incrementor ( STRING_CONSTANT , new MaxIterCallback () , getRank ) ;
Code	iterations = new Incrementor ( STRING_CONSTANT , new MaxIterCallback () , getRank ) ;
Distance : 3

59
Tree	iterations = new Incrementor ( new MaxIterCallback () , null , null ) ;
Code	iterations = new Incrementor ( new MaxIterCallback () , null , null ) ;
Distance : 6

60
Tree	iterations = new Incrementor ( STRING_CONSTANT , new MaxIterCallback () , getNumber ) ;
Code	iterations = new Incrementor ( STRING_CONSTANT , new MaxIterCallback () , getNumber ) ;
Distance : 3

61
Tree	iterations = new Incrementor ( new MaxIterCallback () , true , true ) ;
Code	iterations = new Incrementor ( new MaxIterCallback () , true , true ) ;
Distance : 6

62
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , true ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , true ) ;
Distance : 3

63
Tree	iterations = new iterations ( iterations , getTolerance () , new MaxIterCallback () ) ;
Code	iterations = new iterations ( iterations , getTolerance () , new MaxIterCallback () ) ;
Distance : 5

64
Tree	iterations = new Incrementor ( new MaxIterCallback () , true , null ) ;
Code	iterations = new Incrementor ( new MaxIterCallback () , true , null ) ;
Distance : 6

65
Tree	iterations = new Incrementor ( iterations , getTolerance () , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( iterations , getTolerance () , new MaxIterCallback () ) ;
Distance : 4

66
Tree	iterations = new Incrementor ( new MaxIterCallback ( null ) , Integer.MAX_VALUE ) ;
Code	iterations = new Incrementor ( new MaxIterCallback ( null ) , Integer.MAX_VALUE ) ;
Distance : 7

67
Tree	iterations = new Incrementor ( STRING_CONSTANT , new MaxIterCallback () , threshold ) ;
Code	iterations = new Incrementor ( STRING_CONSTANT , new MaxIterCallback () , threshold ) ;
Distance : 3

68
Tree	iterations = new Incrementor ( STRING_CONSTANT , new MaxIterCallback () , DifferenceMerger ) ;
Code	iterations = new Incrementor ( STRING_CONSTANT , new MaxIterCallback () , DifferenceMerger ) ;
Distance : 3

69
Tree	iterations = new Incrementor ( STRING_CONSTANT , new MaxIterCallback () , MinpackMeasurement ) ;
Code	iterations = new Incrementor ( STRING_CONSTANT , new MaxIterCallback () , MinpackMeasurement ) ;
Distance : 3

70
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ;
Distance : 1

71
Tree	iterations = new Incrementor ( iterations , null () , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( iterations , null () , new MaxIterCallback () ) ;
Distance : 4

72
Tree	iterations = new Incrementor ( new MaxIterCallback () , iterations ) ; false
Code	iterations = new Incrementor ( new MaxIterCallback () , iterations ) ; false
Distance : 5

73
Tree	iterations = new iterations ( iterations , createTableau () , new MaxIterCallback () ) ;
Code	iterations = new iterations ( iterations , createTableau () , new MaxIterCallback () ) ;
Distance : 5

74
Tree	iterations = new iterations ( iterations , yArray.length () , new MaxIterCallback () ) ;
Code	iterations = new iterations ( iterations , yArray.length () , new MaxIterCallback () ) ;
Distance : 5

75
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , false , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , false , iterations ) ;
Distance : 7

76
Tree	iterations = new iterations ( iterations , a.value () , new MaxIterCallback () ) ;
Code	iterations = new iterations ( iterations , a.value () , new MaxIterCallback () ) ;
Distance : 5

77
Tree	iterations = new iterations ( iterations , getDeterminant () , new MaxIterCallback () ) ;
Code	iterations = new iterations ( iterations , getDeterminant () , new MaxIterCallback () ) ;
Distance : 5

78
Tree	iterations = new iterations ( iterations , getKthSelector () , new MaxIterCallback () ) ;
Code	iterations = new iterations ( iterations , getKthSelector () , new MaxIterCallback () ) ;
Distance : 5

79
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , false ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , false ) ;
Distance : 3

80
Tree	iterations = new Incrementor ( iterations , createTableau () , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( iterations , createTableau () , new MaxIterCallback () ) ;
Distance : 4

81
Tree	iterations = new Incrementor ( iterations , a.value () , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( iterations , a.value () , new MaxIterCallback () ) ;
Distance : 4

82
Tree	iterations = new Incrementor ( iterations , buildChebyquadArray () , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( iterations , buildChebyquadArray () , new MaxIterCallback () ) ;
Distance : 4

83
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , null ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , null ) ;
Distance : 3

84
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , means ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , means ) ;
Distance : 2

85
Tree	iterations = new Incrementor ( new MaxIterCallback () , true , double ) ;
Code	iterations = new Incrementor ( new MaxIterCallback () , true , double ) ;
Distance : 6

86
Tree	iterations = new Incrementor ( new MaxIterCallback () , getNumber , false ) ;
Code	iterations = new Incrementor ( new MaxIterCallback () , getNumber , false ) ;
Distance : 6

87
Tree	iterations = new Incrementor ( new MaxIterCallback () , unsupported , false ) ;
Code	iterations = new Incrementor ( new MaxIterCallback () , unsupported , false ) ;
Distance : 6

88
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , unsupported ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , unsupported ) ;
Distance : 2

89
Tree	iterations = new Incrementor ( iterations , getKthSelector () , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( iterations , getKthSelector () , new MaxIterCallback () ) ;
Distance : 4

90
Tree	iterations = new Incrementor ( new MaxIterCallback () ) ; int
Code	iterations = new Incrementor ( new MaxIterCallback () ) ; int
Distance : 3

91
Tree	iterations = new Incrementor ( new MaxIterCallback () , iterations ) ; int
Code	iterations = new Incrementor ( new MaxIterCallback () , iterations ) ; int
Distance : 5

92
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; int
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; int
Distance : 2

93
Tree	iterations = new Incrementor ( new MaxIterCallback < iterations > () , Integer.MAX_VALUE ) ; void
Code	iterations = new Incrementor ( new MaxIterCallback < iterations > () , Integer.MAX_VALUE ) ; void
Distance : 8

94
Tree	iterations = new Incrementor ( true ) ; field
Code	iterations = new Incrementor ( true ) ; field
Distance : 6

95
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; data
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; data
Distance : 2

96
Tree	iterations = new Incrementor ( true ) ; void
Code	iterations = new Incrementor ( true ) ; void
Distance : 6

97
Tree	iterations = new Incrementor ( true ) ; Override
Code	iterations = new Incrementor ( true ) ; Override
Distance : 6

98
Tree	iterations = new Incrementor ( true ) ; Fraction
Code	iterations = new Incrementor ( true ) ; Fraction
Distance : 6

99
Tree	iterations = new Incrementor ( true ) ; assertEquals
Code	iterations = new Incrementor ( true ) ; assertEquals
Distance : 6

100
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; Complex
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; Complex
Distance : 2

101
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; try
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; try
Distance : 2

102
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; false
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; false
Distance : 2

103
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; int
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; int
Distance : 2

104
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; field
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; field
Distance : 2

105
Tree	iterations = new Incrementor ( new MaxIterCallback () , true , NUMBER_CONSTANT ) ; assertEquals
Code	iterations = new Incrementor ( new MaxIterCallback () , true , NUMBER_CONSTANT ) ; assertEquals
Distance : 7

106
Tree	iterations = new Incrementor ( this , Integer.MAX_VALUE ) ; Complex
Code	iterations = new Incrementor ( this , Integer.MAX_VALUE ) ; Complex
Distance : 5

107
Tree	iterations = new Incrementor ( this , Integer.MAX_VALUE ) ; try
Code	iterations = new Incrementor ( this , Integer.MAX_VALUE ) ; try
Distance : 5

108
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ;
Distance : 1

109
Tree	iterations = new Incrementor ( new MaxIterCallback < iterations > () , Integer.MAX_VALUE ) ; Fraction
Code	iterations = new Incrementor ( new MaxIterCallback < iterations > () , Integer.MAX_VALUE ) ; Fraction
Distance : 8

110
Tree	iterations = new Incrementor ( this , new MaxIterCallback () ) ; int
Code	iterations = new Incrementor ( this , new MaxIterCallback () ) ; int
Distance : 2

111
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , iterations , iterations ) ; int
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , iterations , iterations ) ; int
Distance : 6

112
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , iterations , iterations ) ; p
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , iterations , iterations ) ; p
Distance : 6

113
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , iterations , iterations ) ; data
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , iterations , iterations ) ; data
Distance : 6

114
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; void
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; void
Distance : 2

115
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; false
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; false
Distance : 2

116
Tree	iterations = new Incrementor ( new MaxIterCallback < iterations > () , Integer.MAX_VALUE ) ; field
Code	iterations = new Incrementor ( new MaxIterCallback < iterations > () , Integer.MAX_VALUE ) ; field
Distance : 8

117
Tree	iterations = new Incrementor ( new MaxIterCallback < iterations > () , Integer.MAX_VALUE ) ; data
Code	iterations = new Incrementor ( new MaxIterCallback < iterations > () , Integer.MAX_VALUE ) ; data
Distance : 8

118
Tree	iterations = new Incrementor ( this , new MaxIterCallback () ) ; Complex
Code	iterations = new Incrementor ( this , new MaxIterCallback () ) ; Complex
Distance : 2

119
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; field
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; field
Distance : 2

120
Tree	iterations = new Incrementor ( this , new MaxIterCallback () ) ; false
Code	iterations = new Incrementor ( this , new MaxIterCallback () ) ; false
Distance : 2

121
Tree	iterations = new Incrementor < iterations > ( iterations , false ) ; Override
Code	iterations = new Incrementor < iterations > ( iterations , false ) ; Override
Distance : 8

122
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ; void
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ; void
Distance : 1

123
Tree	iterations = new Incrementor ( new MaxIterCallback () , true , NUMBER_CONSTANT ) ; Override
Code	iterations = new Incrementor ( new MaxIterCallback () , true , NUMBER_CONSTANT ) ; Override
Distance : 7

124
Tree	iterations = new Incrementor ( new MaxIterCallback () , true , NUMBER_CONSTANT ) ; void
Code	iterations = new Incrementor ( new MaxIterCallback () , true , NUMBER_CONSTANT ) ; void
Distance : 7

125
Tree	iterations = new Incrementor ( new MaxIterCallback () , true , NUMBER_CONSTANT ) ; Assert
Code	iterations = new Incrementor ( new MaxIterCallback () , true , NUMBER_CONSTANT ) ; Assert
Distance : 7

126
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; try
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; try
Distance : 2

127
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; Complex
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; Complex
Distance : 2

128
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; p
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; p
Distance : 2

129
Tree	iterations = new Incrementor ( this , new MaxIterCallback () ) ; field
Code	iterations = new Incrementor ( this , new MaxIterCallback () ) ; field
Distance : 2

130
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ; field
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ; field
Distance : 1

131
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ; int
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ; int
Distance : 1

132
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , iterations , iterations ) ; field
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , iterations , iterations ) ; field
Distance : 6

133
Tree	iterations = new Incrementor ( this , new MaxIterCallback () ) ; void
Code	iterations = new Incrementor ( this , new MaxIterCallback () ) ; void
Distance : 2

134
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , iterations , iterations ) ; try
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , iterations , iterations ) ; try
Distance : 6

135
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , iterations , iterations ) ; Complex
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , iterations , iterations ) ; Complex
Distance : 6

136
Tree	iterations = new Incrementor < iterations > ( null ) ; n
Code	iterations = new Incrementor < iterations > ( null ) ; n
Distance : 7

137
Tree	iterations = new Incrementor < iterations > ( null ) ; Math
Code	iterations = new Incrementor < iterations > ( null ) ; Math
Distance : 7

138
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ; false
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ; false
Distance : 1

139
Tree	iterations = new Incrementor ( new MaxIterCallback < iterations > () , Integer.MAX_VALUE ) ; p
Code	iterations = new Incrementor ( new MaxIterCallback < iterations > () , Integer.MAX_VALUE ) ; p
Distance : 8

140
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , unsupported ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , unsupported ) ;
Distance : 3

141
Tree	iterations = new Incrementor ( new MaxIterCallback () , true , NUMBER_CONSTANT ) ; field
Code	iterations = new Incrementor ( new MaxIterCallback () , true , NUMBER_CONSTANT ) ; field
Distance : 7

142
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ; try
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ; try
Distance : 1

143
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback < iterations > () , false ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback < iterations > () , false ) ;
Distance : 6

144
Tree	iterations = new Incrementor ( new MaxIterCallback () , Integer.MAX_VALUE ) ;
Code	iterations = new Incrementor ( new MaxIterCallback () , Integer.MAX_VALUE ) ;
Distance : 4

145
Tree	iterations = new Incrementor ( new MaxIterCallback () , true , false ) ;
Code	iterations = new Incrementor ( new MaxIterCallback () , true , false ) ;
Distance : 6

146
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback < iterations > () , null ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback < iterations > () , null ) ;
Distance : 6

147
Tree	iterations = new Incrementor ( new MaxIterCallback () , true , NUMBER_CONSTANT ) ;
Code	iterations = new Incrementor ( new MaxIterCallback () , true , NUMBER_CONSTANT ) ;
Distance : 6

148
Tree	iterations = new Incrementor ( this , new MaxIterCallback () ) ; try
Code	iterations = new Incrementor ( this , new MaxIterCallback () ) ; try
Distance : 2

149
Tree	iterations = new Incrementor ( STRING_CONSTANT , new MaxIterCallback () , null ) ;
Code	iterations = new Incrementor ( STRING_CONSTANT , new MaxIterCallback () , null ) ;
Distance : 3

150
Tree	iterations = new Incrementor ( new MaxIterCallback () , null , false ) ;
Code	iterations = new Incrementor ( new MaxIterCallback () , null , false ) ;
Distance : 6

151
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ; Complex
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ; Complex
Distance : 1

152
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , true ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , true ) ;
Distance : 2

153
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , MinpackMeasurement , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , MinpackMeasurement , iterations ) ;
Distance : 4

154
Tree	iterations = new Incrementor ( new MaxIterCallback () , true , NUMBER_CONSTANT ) ; k
Code	iterations = new Incrementor ( new MaxIterCallback () , true , NUMBER_CONSTANT ) ; k
Distance : 7

155
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ;
Distance : 0

156
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , iterations , iterations ) ; false
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , iterations , iterations ) ; false
Distance : 6

157
Tree	iterations = new Incrementor ( super(); , iterations , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( super(); , iterations , new MaxIterCallback () ) ;
Distance : 3

158
Tree	iterations = new Incrementor ( new MaxIterCallback ( return; ) , Integer.MAX_VALUE ) ;
Code	iterations = new Incrementor ( new MaxIterCallback ( return; ) , Integer.MAX_VALUE ) ;
Distance : 7

159
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , NullArgumentException , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , NullArgumentException , iterations ) ;
Distance : 7

160
Tree	iterations = new Incrementor ( null , iterations , new MaxIterCallback () , return; ) ;
Code	iterations = new Incrementor ( null , iterations , new MaxIterCallback () , return; ) ;
Distance : 5

161
Tree	iterations = new Incrementor ( null , iterations , new MaxIterCallback () , break; ) ;
Code	iterations = new Incrementor ( null , iterations , new MaxIterCallback () , break; ) ;
Distance : 5

162
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , RandomGenerator , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , RandomGenerator , iterations ) ;
Distance : 7

163
Tree	iterations = new Incrementor ( new MaxIterCallback ( break; ) ) ;
Code	iterations = new Incrementor ( new MaxIterCallback ( break; ) ) ;
Distance : 5

164
Tree	iterations = new Incrementor ( new MaxIterCallback () , true , NUMBER_CONSTANT ) ; nCols
Code	iterations = new Incrementor ( new MaxIterCallback () , true , NUMBER_CONSTANT ) ; nCols
Distance : 7

165
Tree	iterations = new Incrementor ( new MaxIterCallback ( super(); ) , Integer.MAX_VALUE ) ;
Code	iterations = new Incrementor ( new MaxIterCallback ( super(); ) , Integer.MAX_VALUE ) ;
Distance : 7

166
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , InvalidRepresentationException , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , InvalidRepresentationException , iterations ) ;
Distance : 4

167
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , preMultTest , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , preMultTest , iterations ) ;
Distance : 7

168
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , iterations , iterations ) ; Fraction
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , iterations , iterations ) ; Fraction
Distance : 6

169
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback < iterations > () , super(); ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback < iterations > () , super(); ) ;
Distance : 6

170
Tree	iterations = new Incrementor ( null , iterations , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( null , iterations , new MaxIterCallback () ) ;
Distance : 3

171
Tree	iterations = new Incrementor ( return; , iterations , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( return; , iterations , new MaxIterCallback () ) ;
Distance : 3

172
Tree	iterations = new Incrementor ( new MaxIterCallback ( break; ) , Integer.MAX_VALUE ) ;
Code	iterations = new Incrementor ( new MaxIterCallback ( break; ) , Integer.MAX_VALUE ) ;
Distance : 7

173
Tree	iterations = new Incrementor ( true ) ; k
Code	iterations = new Incrementor ( true ) ; k
Distance : 6

174
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ; Fraction
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ; Fraction
Distance : 1

175
Tree	iterations = new Incrementor < iterations > ( () ) ;
Code	iterations = new Incrementor < iterations > ( () ) ;
Distance : 5

176
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ; p
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ; p
Distance : 1

177
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , iterations , iterations ) ; void
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , iterations , iterations ) ; void
Distance : 6

178
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , null ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , null ) ;
Distance : 2

179
Tree	iterations = new Incrementor ( null , iterations , new MaxIterCallback () , null ) ;
Code	iterations = new Incrementor ( null , iterations , new MaxIterCallback () , null ) ;
Distance : 5

180
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; Fraction
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; Fraction
Distance : 2

181
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , getTolerance , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , getTolerance , iterations ) ;
Distance : 7

182
Tree	iterations = new Incrementor ( new MaxIterCallback ( super(); ) ) ;
Code	iterations = new Incrementor ( new MaxIterCallback ( super(); ) ) ;
Distance : 5

183
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; p
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; p
Distance : 2

184
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback < iterations > () , MathIllegalStateException ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback < iterations > () , MathIllegalStateException ) ;
Distance : 6

185
Tree	iterations = new Incrementor ( new MaxIterCallback ( ( ) ) ;
Code	iterations = new Incrementor ( new MaxIterCallback ( ( ) ) ;
Distance : 5

186
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; void
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; void
Distance : 2

187
Tree	iterations = new Incrementor < iterations > ( return; ) ;
Code	iterations = new Incrementor < iterations > ( return; ) ;
Distance : 6

188
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback < iterations > () , MathUnsupportedOperationException ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback < iterations > () , MathUnsupportedOperationException ) ;
Distance : 6

189
Tree	iterations = new Incrementor ( break; , iterations , new MaxIterCallback () , null ) ;
Code	iterations = new Incrementor ( break; , iterations , new MaxIterCallback () , null ) ;
Distance : 5

190
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback < iterations > () , NullArgumentException ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback < iterations > () , NullArgumentException ) ;
Distance : 6

191
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback < iterations > () , byte ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback < iterations > () , byte ) ;
Distance : 6

192
Tree	iterations = new Incrementor ( super(); , iterations , new MaxIterCallback () , null ) ;
Code	iterations = new Incrementor ( super(); , iterations , new MaxIterCallback () , null ) ;
Distance : 5

193
Tree	iterations = new Incrementor ( null , iterations , new MaxIterCallback () , ( ) ;
Code	iterations = new Incrementor ( null , iterations , new MaxIterCallback () , ( ) ;
Distance : 5

194
Tree	iterations = new Incrementor ( ( , iterations , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( ( , iterations , new MaxIterCallback () ) ;
Distance : 3

195
Tree	iterations = new Incrementor ( new MaxIterCallback < iterations > () , Integer.MAX_VALUE ) ; false
Code	iterations = new Incrementor ( new MaxIterCallback < iterations > () , Integer.MAX_VALUE ) ; false
Distance : 8

196
Tree	iterations = new Incrementor ( new MaxIterCallback < iterations > () , Integer.MAX_VALUE ) ; try
Code	iterations = new Incrementor ( new MaxIterCallback < iterations > () , Integer.MAX_VALUE ) ; try
Distance : 8

197
Tree	iterations = new Incrementor ( new MaxIterCallback < iterations > () , Integer.MAX_VALUE ) ; Complex
Code	iterations = new Incrementor ( new MaxIterCallback < iterations > () , Integer.MAX_VALUE ) ; Complex
Distance : 8

198
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback < iterations > () , unsupported ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback < iterations > () , unsupported ) ;
Distance : 6

199
Tree	iterations = new Incrementor ( this , Integer.MAX_VALUE ) ; Fraction
Code	iterations = new Incrementor ( this , Integer.MAX_VALUE ) ; Fraction
Distance : 5

200
Tree	iterations = new Incrementor ( this , Integer.MAX_VALUE ) ; p
Code	iterations = new Incrementor ( this , Integer.MAX_VALUE ) ; p
Distance : 5

201
Tree	iterations = new Incrementor ( break; , iterations , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( break; , iterations , new MaxIterCallback () ) ;
Distance : 3

202
Tree	iterations = new Incrementor ( this , Integer.MAX_VALUE ) ; void
Code	iterations = new Incrementor ( this , Integer.MAX_VALUE ) ; void
Distance : 5

203
Tree	iterations = new Incrementor ( this , Integer.MAX_VALUE ) ; data
Code	iterations = new Incrementor ( this , Integer.MAX_VALUE ) ; data
Distance : 5

204
Tree	iterations = new iterations ( iterations , getNaNStrategy () , new MaxIterCallback () ) ;
Code	iterations = new iterations ( iterations , getNaNStrategy () , new MaxIterCallback () ) ;
Distance : 5

205
Tree	iterations = new Incrementor ( this , Integer.MAX_VALUE ) ; field
Code	iterations = new Incrementor ( this , Integer.MAX_VALUE ) ; field
Distance : 5

206
Tree	iterations = new Incrementor ( null , iterations , new MaxIterCallback () , continue; ) ;
Code	iterations = new Incrementor ( null , iterations , new MaxIterCallback () , continue; ) ;
Distance : 5

207
Tree	iterations = new Incrementor ( this , new MaxIterCallback () ) ; data
Code	iterations = new Incrementor ( this , new MaxIterCallback () ) ; data
Distance : 2

208
Tree	iterations = new Incrementor ( new MaxIterCallback ( ( ) , Integer.MAX_VALUE ) ;
Code	iterations = new Incrementor ( new MaxIterCallback ( ( ) , Integer.MAX_VALUE ) ;
Distance : 7

209
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , getRank ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , getRank ) ;
Distance : 3

210
Tree	iterations = new Incrementor < iterations > ( iterations , false ) ; assertEquals
Code	iterations = new Incrementor < iterations > ( iterations , false ) ; assertEquals
Distance : 8

211
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , null , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , null , iterations ) ;
Distance : 7

212
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback < iterations > () , super ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback < iterations > () , super ) ;
Distance : 6

213
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , MinpackMeasurement ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , MinpackMeasurement ) ;
Distance : 3

214
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , getNumber ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , getNumber ) ;
Distance : 3

215
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , DifferenceMerger ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , DifferenceMerger ) ;
Distance : 3

216
Tree	iterations = new Incrementor < iterations > ( iterations , false ) ; Fraction
Code	iterations = new Incrementor < iterations > ( iterations , false ) ; Fraction
Distance : 8

217
Tree	iterations = new Incrementor < iterations > ( null ) ; UnivariateRealFunction
Code	iterations = new Incrementor < iterations > ( null ) ; UnivariateRealFunction
Distance : 7

218
Tree	iterations = new Incrementor < iterations > ( iterations , false ) ; void
Code	iterations = new Incrementor < iterations > ( iterations , false ) ; void
Distance : 8

219
Tree	iterations = new Incrementor < iterations > ( iterations , false ) ; Assert
Code	iterations = new Incrementor < iterations > ( iterations , false ) ; Assert
Distance : 8

220
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , iterations , iterations ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , iterations , iterations ) ;
Distance : 5

221
Tree	iterations = new Incrementor ( new MaxIterCallback () ) ; false
Code	iterations = new Incrementor ( new MaxIterCallback () ) ; false
Distance : 3

222
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , IllegalArgumentException , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback ( null ) , IllegalArgumentException , iterations ) ;
Distance : 7

223
Tree	iterations = new Incrementor ( new MaxIterCallback () , Integer.MAX_VALUE ) ; void
Code	iterations = new Incrementor ( new MaxIterCallback () , Integer.MAX_VALUE ) ; void
Distance : 5

224
Tree	iterations = new Incrementor ( new MaxIterCallback () , iterations ) ; try
Code	iterations = new Incrementor ( new MaxIterCallback () , iterations ) ; try
Distance : 5

225
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , unsupported , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , unsupported , iterations ) ;
Distance : 4

226
Tree	iterations = new Incrementor ( new MaxIterCallback () , iterations ) ; Complex
Code	iterations = new Incrementor ( new MaxIterCallback () , iterations ) ; Complex
Distance : 5

227
Tree	iterations = new Incrementor < iterations > ( iterations , false ) ; field
Code	iterations = new Incrementor < iterations > ( iterations , false ) ; field
Distance : 8

228
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , means , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , means , iterations ) ;
Distance : 4

229
Tree	iterations = new Incrementor ( new MaxIterCallback () ) ; field
Code	iterations = new Incrementor ( new MaxIterCallback () ) ; field
Distance : 3

230
Tree	iterations = new Incrementor ( new MaxIterCallback () ) ; Complex
Code	iterations = new Incrementor ( new MaxIterCallback () ) ; Complex
Distance : 3

231
Tree	iterations = new Incrementor ( new MaxIterCallback () , Integer.MAX_VALUE ) ; data
Code	iterations = new Incrementor ( new MaxIterCallback () , Integer.MAX_VALUE ) ; data
Distance : 5

232
Tree	iterations = new Incrementor ( this , Integer.MAX_VALUE ) ; int
Code	iterations = new Incrementor ( this , Integer.MAX_VALUE ) ; int
Distance : 5

233
Tree	iterations = new Incrementor ( new MaxIterCallback ( null ) ) ; n
Code	iterations = new Incrementor ( new MaxIterCallback ( null ) ) ; n
Distance : 6

234
Tree	iterations = new Incrementor ( new MaxIterCallback () ) ; p
Code	iterations = new Incrementor ( new MaxIterCallback () ) ; p
Distance : 3

235
Tree	iterations = new Incrementor ( new MaxIterCallback () ) ; void
Code	iterations = new Incrementor ( new MaxIterCallback () ) ; void
Distance : 3

236
Tree	iterations = new Incrementor ( new MaxIterCallback () ) ; data
Code	iterations = new Incrementor ( new MaxIterCallback () ) ; data
Distance : 3

237
Tree	iterations = new Incrementor ( new MaxIterCallback ( null ) ) ; Math
Code	iterations = new Incrementor ( new MaxIterCallback ( null ) ) ; Math
Distance : 6

238
Tree	iterations = new Incrementor < iterations > () ; field
Code	iterations = new Incrementor < iterations > () ; field
Distance : 7

239
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , getNumber ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , getNumber ) ;
Distance : 2

240
Tree	iterations = new iterations ( iterations , getExpansionFactor () , new MaxIterCallback () ) ;
Code	iterations = new iterations ( iterations , getExpansionFactor () , new MaxIterCallback () ) ;
Distance : 5

241
Tree	iterations = new Incrementor ( iterations , getExpansionFactor () , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( iterations , getExpansionFactor () , new MaxIterCallback () ) ;
Distance : 4

242
Tree	iterations = new MaxIterCallback ( Integer.MAX_VALUE , new MaxIterCallback () , threshold ) ;
Code	iterations = new MaxIterCallback ( Integer.MAX_VALUE , new MaxIterCallback () , threshold ) ;
Distance : 3

243
Tree	iterations = new Incrementor ( new MaxIterCallback ( null ) , Integer.MAX_VALUE ) ; UnivariateRealFunction
Code	iterations = new Incrementor ( new MaxIterCallback ( null ) , Integer.MAX_VALUE ) ; UnivariateRealFunction
Distance : 8

244
Tree	iterations = new iterations ( iterations , buildChebyquadArray () , new MaxIterCallback () ) ;
Code	iterations = new iterations ( iterations , buildChebyquadArray () , new MaxIterCallback () ) ;
Distance : 5

245
Tree	iterations = new Incrementor < iterations > ( iterations , false ) ; k
Code	iterations = new Incrementor < iterations > ( iterations , false ) ; k
Distance : 8

246
Tree	iterations = new Incrementor ( new MaxIterCallback < iterations > () , Integer.MAX_VALUE ) ; int
Code	iterations = new Incrementor ( new MaxIterCallback < iterations > () , Integer.MAX_VALUE ) ; int
Distance : 8

247
Tree	iterations = new Incrementor ( new MaxIterCallback () , super(); , false ) ;
Code	iterations = new Incrementor ( new MaxIterCallback () , super(); , false ) ;
Distance : 6

248
Tree	iterations = new Incrementor < iterations > ( iterations , false ) ; nCols
Code	iterations = new Incrementor < iterations > ( iterations , false ) ; nCols
Distance : 8

249
Tree	iterations = new Incrementor ( null , iterations , new MaxIterCallback () , super(); ) ;
Code	iterations = new Incrementor ( null , iterations , new MaxIterCallback () , super(); ) ;
Distance : 5

250
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , getRank , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , getRank , iterations ) ;
Distance : 4

251
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , newNaNStrategy ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , newNaNStrategy ) ;
Distance : 2

252
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , MinpackMeasurement ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , MinpackMeasurement ) ;
Distance : 2

253
Tree	iterations = new Incrementor ( new MaxIterCallback ( null ) , Integer.MAX_VALUE ) ; point
Code	iterations = new Incrementor ( new MaxIterCallback ( null ) , Integer.MAX_VALUE ) ; point
Distance : 8

254
Tree	iterations = new Incrementor < iterations > ( iterations , false ) ;
Code	iterations = new Incrementor < iterations > ( iterations , false ) ;
Distance : 7

255
Tree	iterations = new Incrementor ( new MaxIterCallback ( null ) , Integer.MAX_VALUE ) ; Math
Code	iterations = new Incrementor ( new MaxIterCallback ( null ) , Integer.MAX_VALUE ) ; Math
Distance : 8

256
Tree	iterations = new Incrementor ( this , Integer.MAX_VALUE ) ; false
Code	iterations = new Incrementor ( this , Integer.MAX_VALUE ) ; false
Distance : 5

257
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , getNumber , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , getNumber , iterations ) ;
Distance : 4

258
Tree	iterations = new Incrementor ( new MaxIterCallback ( null ) , Integer.MAX_VALUE ) ; n
Code	iterations = new Incrementor ( new MaxIterCallback ( null ) , Integer.MAX_VALUE ) ; n
Distance : 8

259
Tree	iterations = new Incrementor ( this , new MaxIterCallback () ) ; p
Code	iterations = new Incrementor ( this , new MaxIterCallback () ) ; p
Distance : 2

260
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback < iterations > () , true ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback < iterations > () , true ) ;
Distance : 6

261
Tree	iterations = new Incrementor ( new MaxIterCallback ( null ) ) ; point
Code	iterations = new Incrementor ( new MaxIterCallback ( null ) ) ; point
Distance : 6

262
Tree	iterations = new Incrementor ( new MaxIterCallback () , true , NUMBER_CONSTANT ) ; Fraction
Code	iterations = new Incrementor ( new MaxIterCallback () , true , NUMBER_CONSTANT ) ; Fraction
Distance : 7

263
Tree	iterations = new Incrementor ( iterations , yArray.length () , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( iterations , yArray.length () , new MaxIterCallback () ) ;
Distance : 4

264
Tree	iterations = new Incrementor ( new MaxIterCallback ( null ) ) ; UnivariateRealFunction
Code	iterations = new Incrementor ( new MaxIterCallback ( null ) ) ; UnivariateRealFunction
Distance : 6

265
Tree	iterations = new Incrementor ( new MaxIterCallback () , Integer.MAX_VALUE ) ; field
Code	iterations = new Incrementor ( new MaxIterCallback () , Integer.MAX_VALUE ) ; field
Distance : 5

266
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , InvalidRepresentationException ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , InvalidRepresentationException ) ;
Distance : 2

267
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , getRank ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , getRank ) ;
Distance : 2

268
Tree	iterations = new Incrementor ( new MaxIterCallback () , Integer.MAX_VALUE ) ; p
Code	iterations = new Incrementor ( new MaxIterCallback () , Integer.MAX_VALUE ) ; p
Distance : 5

269
Tree	iterations = new Incrementor < iterations > ( null ) ; point
Code	iterations = new Incrementor < iterations > ( null ) ; point
Distance : 7

270
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ; data
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ; data
Distance : 1

271
Tree	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , true , iterations ) ;
Code	iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () , true , iterations ) ;
Distance : 4

272
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; data
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () ) ; data
Distance : 2

273
Tree	iterations = new Incrementor ( null , iterations , new MaxIterCallback () ) ; Math
Code	iterations = new Incrementor ( null , iterations , new MaxIterCallback () ) ; Math
Distance : 4

274
Tree	iterations = new Incrementor ( new MaxIterCallback ( continue; ) ) ;
Code	iterations = new Incrementor ( new MaxIterCallback ( continue; ) ) ;
Distance : 5

275
Tree	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; Fraction
Code	iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ; Fraction
Distance : 2

276
Tree	iterations = new Incrementor ( true ) ; Assert
Code	iterations = new Incrementor ( true ) ; Assert
Distance : 6

277
Tree	iterations = new Incrementor ( STRING_CONSTANT , new MaxIterCallback () , InvalidRepresentationException ) ;
Code	iterations = new Incrementor ( STRING_CONSTANT , new MaxIterCallback () , InvalidRepresentationException ) ;
Distance : 3

278
Tree	iterations = new Incrementor ( this , new MaxIterCallback () ) ; Fraction
Code	iterations = new Incrementor ( this , new MaxIterCallback () ) ; Fraction
Distance : 2

279
Tree	iterations = new Incrementor ( true ) ; nCols
Code	iterations = new Incrementor ( true ) ; nCols
Distance : 6

========================================================================


========================================================================
Example Number: 28
Parent Code is: 
if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
-------------------------------------------------------------------------------
Child code is: 
if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=real}) (236{val===}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=imaginary}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=NaN}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=real}) (236{val===}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=imaginary}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=INF}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/5/parent/src_main_java_org_apache_commons_math3_complex_Complex.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 210
Wrong
========================================================================
False

0
Tree	if ( real == NUMBER_CONSTANT && isValidPivotColumn () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && isValidPivotColumn () == null ) { return NaN ; }
Distance : 4

1
Tree	if ( real == NUMBER_CONSTANT && fval.length () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && fval.length () == null ) { return NaN ; }
Distance : 4

2
Tree	if ( real == NUMBER_CONSTANT && FastMath.PI == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && FastMath.PI == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

3
Tree	if ( real == NUMBER_CONSTANT && problem.a == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && problem.a == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

4
Tree	if ( real == NUMBER_CONSTANT && findEigenvector () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && findEigenvector () == null ) { return NaN ; }
Distance : 4

5
Tree	if ( real == NUMBER_CONSTANT && multiply () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && multiply () == null ) { return NaN ; }
Distance : 4

6
Tree	if ( real == NUMBER_CONSTANT && negate () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && negate () == null ) { return NaN ; }
Distance : 4

7
Tree	if ( real == NUMBER_CONSTANT && zval.length () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && zval.length () == null ) { return NaN ; }
Distance : 4

8
Tree	if ( real == NUMBER_CONSTANT && && == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && && == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

9
Tree	if ( real == NUMBER_CONSTANT && copy () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && copy () == null ) { return NaN ; }
Distance : 4

10
Tree	if ( real == NUMBER_CONSTANT && findEigenVectors () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && findEigenVectors () == null ) { return NaN ; }
Distance : 4

11
Tree	if ( real . logDensity ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . logDensity ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

12
Tree	if ( real == NUMBER_CONSTANT && Double.NEGATIVE_INFINITY == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && Double.NEGATIVE_INFINITY == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

13
Tree	if ( real == NUMBER_CONSTANT && real == STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real == STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 5

14
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

15
Tree	if ( NaN == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

16
Tree	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + NaN ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + NaN ) { return NaN ; }
Distance : 4

17
Tree	if ( imaginary == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Distance : 4

18
Tree	if ( real == NUMBER_CONSTANT && NaN == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

19
Tree	if ( real == NUMBER_CONSTANT && Integer.MIN_VALUE == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && Integer.MIN_VALUE == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

20
Tree	if ( real == NUMBER_CONSTANT && Double.NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && Double.NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

21
Tree	if ( real . verifyValues ( imaginary ) imaginary NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . verifyValues ( imaginary ) imaginary NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

22
Tree	if ( real == NUMBER_CONSTANT && NaN && real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN && real ) { return NaN ; }
Distance : 4

23
Tree	if ( real == NUMBER_CONSTANT && NaN != real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN != real ) { return NaN ; }
Distance : 4

24
Tree	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 4

25
Tree	if ( real == NUMBER_CONSTANT && imaginary == copy () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == copy () ) { return NaN ; }
Distance : 3

26
Tree	if ( real == NUMBER_CONSTANT && LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

27
Tree	if ( real . isPowerOfTwo ( imaginary ) imaginary NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . isPowerOfTwo ( imaginary ) imaginary NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

28
Tree	if ( real == NUMBER_CONSTANT && imaginary == NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

29
Tree	if ( real == NUMBER_CONSTANT && imaginary <= findEigenVectors () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= findEigenVectors () ) { return NaN ; }
Distance : 4

30
Tree	if ( real . equals ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . equals ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

31
Tree	if ( real == NUMBER_CONSTANT && imaginary < startPoint.length ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < startPoint.length ) { return NaN ; }
Distance : 3

32
Tree	if ( real == NUMBER_CONSTANT && imaginary == >= ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == >= ) { return NaN ; }
Distance : 2

33
Tree	if ( real . logDensity ( imaginary ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . logDensity ( imaginary ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

34
Tree	if ( real . isAssignableFrom ( real ) imaginary NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . isAssignableFrom ( real ) imaginary NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

35
Tree	if ( imaginary == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

36
Tree	if ( real . isPowerOfTwo ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . isPowerOfTwo ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

37
Tree	if ( real == NUMBER_CONSTANT && variablesToInclude.length () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && variablesToInclude.length () == null ) { return NaN ; }
Distance : 4

38
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary >= real ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary >= real ) { return NaN ; }
Distance : 4

39
Tree	if ( real == NUMBER_CONSTANT && NaN == STRING_CONSTANT + NaN ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN == STRING_CONSTANT + NaN ) { return NaN ; }
Distance : 5

40
Tree	if ( real . verifyValues ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . verifyValues ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

41
Tree	if ( imaginary == NUMBER_CONSTANT && NaN < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && NaN < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

42
Tree	if ( real == NUMBER_CONSTANT && getDataRef () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && getDataRef () == null ) { return NaN ; }
Distance : 4

43
Tree	if ( real == NUMBER_CONSTANT && real && imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real && imaginary ) { return NaN ; }
Distance : 4

44
Tree	if ( real == NUMBER_CONSTANT && NaN == NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN == NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

45
Tree	if ( real == NUMBER_CONSTANT && real == real == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real == real == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

46
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return imaginary ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return imaginary ; }
Distance : 1

47
Tree	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + real ) { return NaN ; }
Distance : 4

48
Tree	if ( real == NUMBER_CONSTANT && NaN != imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN != imaginary ) { return NaN ; }
Distance : 4

49
Tree	if ( real == NUMBER_CONSTANT && values.length == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && values.length == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

50
Tree	if ( real == NUMBER_CONSTANT && NaN > real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN > real ) { return NaN ; }
Distance : 4

51
Tree	if ( real == NUMBER_CONSTANT && NaN > NaN ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN > NaN ) { return NaN ; }
Distance : 4

52
Tree	if ( real == NUMBER_CONSTANT && imaginary < ExpansionMode.MULTIPLICATIVE ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < ExpansionMode.MULTIPLICATIVE ) { return NaN ; }
Distance : 3

53
Tree	if ( real == NUMBER_CONSTANT && imaginary == magnitude ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == magnitude ) { return NaN ; }
Distance : 2

54
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 1

55
Tree	if ( real == NUMBER_CONSTANT && imaginary != values.length ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != values.length ) { return NaN ; }
Distance : 3

56
Tree	if ( real . valueOf ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . valueOf ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

57
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary >= imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary >= imaginary ) { return NaN ; }
Distance : 4

58
Tree	if ( real . equals ( imaginary ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . equals ( imaginary ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

59
Tree	if ( real . equals ( imaginary ) imaginary NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . equals ( imaginary ) imaginary NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

60
Tree	if ( NaN == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Distance : 4

61
Tree	if ( real == NUMBER_CONSTANT && imaginary <= getDimension () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= getDimension () ) { return NaN ; }
Distance : 4

62
Tree	if ( real == NUMBER_CONSTANT && NaN < STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN < STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 6

63
Tree	if ( imaginary == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

64
Tree	if ( real == NUMBER_CONSTANT && NaN >= NaN ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN >= NaN ) { return NaN ; }
Distance : 4

65
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary == real == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary == real == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

66
Tree	if ( real == NUMBER_CONSTANT && imaginary == regularizedGammaP () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == regularizedGammaP () ) { return NaN ; }
Distance : 3

67
Tree	if ( real == NUMBER_CONSTANT && NaN < Integer.MIN_VALUE ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN < Integer.MIN_VALUE ) { return NaN ; }
Distance : 4

68
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + NaN ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + NaN ) { return NaN ; }
Distance : 6

69
Tree	if ( real . isAssignableFrom ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . isAssignableFrom ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

70
Tree	if ( real == NUMBER_CONSTANT && real <= real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real <= real ) { return NaN ; }
Distance : 4

71
Tree	if ( real == NUMBER_CONSTANT && imaginary == getDimension () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == getDimension () ) { return NaN ; }
Distance : 3

72
Tree	if ( real . valueOf ( real ) imaginary NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . valueOf ( real ) imaginary NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

73
Tree	if ( real == NUMBER_CONSTANT && imaginary <= regularizedGammaP () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= regularizedGammaP () ) { return NaN ; }
Distance : 4

74
Tree	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + real ) { return NaN ; }
Distance : 5

75
Tree	if ( real == NUMBER_CONSTANT && this == imaginary ) { return imaginary ; }
Code	if ( real == NUMBER_CONSTANT && this == imaginary ) { return imaginary ; }
Distance : 3

76
Tree	if ( real == NUMBER_CONSTANT && real > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real > imaginary ) { return NaN ; }
Distance : 4

77
Tree	if ( real . logDensity ( real ) imaginary NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . logDensity ( real ) imaginary NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

78
Tree	if ( real == NUMBER_CONSTANT && imaginary == requiresDenseOutput () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == requiresDenseOutput () ) { return NaN ; }
Distance : 3

79
Tree	if ( NaN == NUMBER_CONSTANT && imaginary <= real ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary <= real ) { return NaN ; }
Distance : 4

80
Tree	if ( real == NUMBER_CONSTANT && this == NaN ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && this == NaN ) { return NaN ; }
Distance : 3

81
Tree	if ( NaN == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

82
Tree	if ( real . logDensity ( imaginary ) imaginary NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . logDensity ( imaginary ) imaginary NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

83
Tree	if ( NaN == NUMBER_CONSTANT && this == NaN ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && this == NaN ) { return NaN ; }
Distance : 4

84
Tree	if ( real == NUMBER_CONSTANT && real == STRING_CONSTANT + NaN ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real == STRING_CONSTANT + NaN ) { return NaN ; }
Distance : 5

85
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary && imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary && imaginary ) { return NaN ; }
Distance : 4

86
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

87
Tree	if ( real . equals ( real ) imaginary NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . equals ( real ) imaginary NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

88
Tree	if ( real == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

89
Tree	if ( real == NUMBER_CONSTANT && imaginary == transpose () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == transpose () ) { return NaN ; }
Distance : 3

90
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary != imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary != imaginary ) { return NaN ; }
Distance : 4

91
Tree	if ( real == NUMBER_CONSTANT && real < STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real < STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 6

92
Tree	if ( real == NUMBER_CONSTANT && omegaImaginaryInverse == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && omegaImaginaryInverse == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

93
Tree	if ( real == NUMBER_CONSTANT && imaginary <= hashCode () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= hashCode () ) { return NaN ; }
Distance : 4

94
Tree	if ( real == NUMBER_CONSTANT && imaginary <= transpose () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= transpose () ) { return NaN ; }
Distance : 4

95
Tree	if ( NaN == NUMBER_CONSTANT && imaginary && real ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary && real ) { return NaN ; }
Distance : 4

96
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 5

97
Tree	if ( real == NUMBER_CONSTANT && source.moment == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && source.moment == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

98
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary > real ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary > real ) { return NaN ; }
Distance : 4

99
Tree	if ( real == NUMBER_CONSTANT && real <= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real <= imaginary ) { return NaN ; }
Distance : 4

100
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary <= real ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary <= real ) { return NaN ; }
Distance : 4

101
Tree	if ( real == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

102
Tree	if ( real == NUMBER_CONSTANT && imaginary < Long.MIN_VALUE ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < Long.MIN_VALUE ) { return NaN ; }
Distance : 3

103
Tree	if ( real == NUMBER_CONSTANT && NaN == STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN == STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 5

104
Tree	if ( real == NUMBER_CONSTANT && imaginary <= NaN ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= NaN ) { return NaN ; }
Distance : 3

105
Tree	if ( real . isPowerOfTwo ( imaginary ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . isPowerOfTwo ( imaginary ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

106
Tree	if ( real . verifyValues ( real ) imaginary NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . verifyValues ( real ) imaginary NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

107
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 1

108
Tree	if ( real . isPowerOfTwo ( real ) imaginary NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . isPowerOfTwo ( real ) imaginary NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

109
Tree	if ( real . verifyValues ( imaginary ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . verifyValues ( imaginary ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

110
Tree	if ( real == NUMBER_CONSTANT && real >= real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real >= real ) { return NaN ; }
Distance : 4

111
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary <= imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary <= imaginary ) { return NaN ; }
Distance : 4

112
Tree	if ( NaN == NUMBER_CONSTANT && imaginary != real ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary != real ) { return NaN ; }
Distance : 4

113
Tree	if ( real == NUMBER_CONSTANT && real < STRING_CONSTANT + NaN ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real < STRING_CONSTANT + NaN ) { return NaN ; }
Distance : 6

114
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Distance : 4

115
Tree	if ( imaginary == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

116
Tree	if ( real == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

117
Tree	if ( real == NUMBER_CONSTANT && NaN && imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN && imaginary ) { return NaN ; }
Distance : 4

118
Tree	if ( real == NUMBER_CONSTANT && imaginary && NaN ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary && NaN ) { return NaN ; }
Distance : 3

119
Tree	if ( real == NUMBER_CONSTANT && imaginary == reference ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == reference ) { return NaN ; }
Distance : 2

120
Tree	if ( real == NUMBER_CONSTANT && imaginary < Precision.EPSILON ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < Precision.EPSILON ) { return NaN ; }
Distance : 3

121
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 6

122
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 1

123
Tree	if ( real == NUMBER_CONSTANT && imaginary < Integer.MIN_VALUE ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < Integer.MIN_VALUE ) { return NaN ; }
Distance : 3

124
Tree	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + NaN ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + NaN ) { return NaN ; }
Distance : 5

125
Tree	if ( real == NUMBER_CONSTANT && imaginary != model.steps ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != model.steps ) { return NaN ; }
Distance : 3

126
Tree	if ( real == NUMBER_CONSTANT && imaginary == null () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == null () ) { return NaN ; }
Distance : 3

127
Tree	if ( real == NUMBER_CONSTANT && imaginary != omegaImaginaryInverse ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != omegaImaginaryInverse ) { return NaN ; }
Distance : 3

128
Tree	if ( real == NUMBER_CONSTANT && imaginary <= real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= real ) { return NaN ; }
Distance : 3

129
Tree	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + NaN ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + NaN ) { return NaN ; }
Distance : 5

130
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 1

131
Tree	if ( real == NUMBER_CONSTANT && NaN <= real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN <= real ) { return NaN ; }
Distance : 4

132
Tree	if ( real == NUMBER_CONSTANT && imaginary != LocalizedFormats.NUMBER_TOO_SMALL ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != LocalizedFormats.NUMBER_TOO_SMALL ) { return NaN ; }
Distance : 3

133
Tree	if ( real == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Distance : 3

134
Tree	if ( real == NUMBER_CONSTANT && imaginary != startPoint.length ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != startPoint.length ) { return NaN ; }
Distance : 3

135
Tree	if ( real == NUMBER_CONSTANT && imaginary == fval.length () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == fval.length () ) { return NaN ; }
Distance : 3

136
Tree	if ( real == NUMBER_CONSTANT && NaN > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN > imaginary ) { return NaN ; }
Distance : 4

137
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + NaN ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + NaN ) { return NaN ; }
Distance : 5

138
Tree	if ( real == NUMBER_CONSTANT && imaginary != sample2.length ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != sample2.length ) { return NaN ; }
Distance : 3

139
Tree	if ( real == NUMBER_CONSTANT && imaginary <= getUT () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= getUT () ) { return NaN ; }
Distance : 4

140
Tree	if ( real == NUMBER_CONSTANT && NaN >= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN >= imaginary ) { return NaN ; }
Distance : 4

141
Tree	if ( real == NUMBER_CONSTANT && imaginary != NaN ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != NaN ) { return NaN ; }
Distance : 3

142
Tree	if ( real == NUMBER_CONSTANT && imaginary < LocalizedFormats.NUMBER_TOO_SMALL ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < LocalizedFormats.NUMBER_TOO_SMALL ) { return NaN ; }
Distance : 3

143
Tree	if ( real == NUMBER_CONSTANT && imaginary <= Integer.MIN_VALUE () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= Integer.MIN_VALUE () ) { return NaN ; }
Distance : 4

144
Tree	if ( real == NUMBER_CONSTANT && real == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

145
Tree	if ( real == NUMBER_CONSTANT && imaginary != LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ) { return NaN ; }
Distance : 3

146
Tree	if ( real == NUMBER_CONSTANT && NaN < real == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN < real == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

147
Tree	if ( real == NUMBER_CONSTANT && imaginary < Precision.SAFE_MIN ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < Precision.SAFE_MIN ) { return NaN ; }
Distance : 3

148
Tree	if ( real == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

149
Tree	if ( real == NUMBER_CONSTANT && NaN <= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN <= imaginary ) { return NaN ; }
Distance : 4

150
Tree	if ( real == NUMBER_CONSTANT && imaginary <= values.length () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= values.length () ) { return NaN ; }
Distance : 4

151
Tree	if ( real == NUMBER_CONSTANT && real >= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real >= imaginary ) { return NaN ; }
Distance : 4

152
Tree	if ( real == NUMBER_CONSTANT && imaginary == Integer.MIN_VALUE ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == Integer.MIN_VALUE ) { return NaN ; }
Distance : 2

153
Tree	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 5

154
Tree	if ( real == NUMBER_CONSTANT && real < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

155
Tree	if ( real == NUMBER_CONSTANT && imaginary >= NaN ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary >= NaN ) { return NaN ; }
Distance : 3

156
Tree	if ( real == NUMBER_CONSTANT && imaginary && imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary && imaginary ) { return NaN ; }
Distance : 3

157
Tree	if ( real == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Distance : 3

158
Tree	if ( real == NUMBER_CONSTANT && imaginary <= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= imaginary ) { return NaN ; }
Distance : 3

159
Tree	if ( real == NUMBER_CONSTANT && this == real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && this == real ) { return NaN ; }
Distance : 3

160
Tree	if ( real == NUMBER_CONSTANT && imaginary < values.length ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < values.length ) { return NaN ; }
Distance : 3

161
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return imaginary ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return imaginary ; }
Distance : 1

162
Tree	if ( real == NUMBER_CONSTANT && imaginary <= copySign () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= copySign () ) { return NaN ; }
Distance : 4

163
Tree	if ( real == NUMBER_CONSTANT && NaN == STRING_CONSTANT + real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN == STRING_CONSTANT + real ) { return NaN ; }
Distance : 5

164
Tree	if ( real == NUMBER_CONSTANT && imaginary == % ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == % ) { return NaN ; }
Distance : 2

165
Tree	if ( real == NUMBER_CONSTANT && NaN == real == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN == real == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

166
Tree	if ( real == NUMBER_CONSTANT && imaginary < startConfiguration.length ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < startConfiguration.length ) { return NaN ; }
Distance : 3

167
Tree	if ( real == NUMBER_CONSTANT && real && real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real && real ) { return NaN ; }
Distance : 4

168
Tree	if ( real == NUMBER_CONSTANT && imaginary <= intValue () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= intValue () ) { return NaN ; }
Distance : 4

169
Tree	if ( real == NUMBER_CONSTANT && imaginary == values.length () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == values.length () ) { return NaN ; }
Distance : 3

170
Tree	if ( real == NUMBER_CONSTANT && imaginary > NaN ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > NaN ) { return NaN ; }
Distance : 3

171
Tree	if ( real == NUMBER_CONSTANT && imaginary == scale ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == scale ) { return NaN ; }
Distance : 2

172
Tree	if ( real == NUMBER_CONSTANT && imaginary == Integer.MIN_VALUE () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == Integer.MIN_VALUE () ) { return NaN ; }
Distance : 3

173
Tree	if ( imaginary == NUMBER_CONSTANT && this == NaN ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && this == NaN ) { return NaN ; }
Distance : 4

174
Tree	if ( real == NUMBER_CONSTANT && imaginary == b ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == b ) { return NaN ; }
Distance : 2

175
Tree	if ( real == NUMBER_CONSTANT && real != real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real != real ) { return NaN ; }
Distance : 4

176
Tree	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Distance : 3

177
Tree	if ( real == NUMBER_CONSTANT && imaginary < NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

178
Tree	if ( NaN == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

179
Tree	if ( real == NUMBER_CONSTANT && NaN < NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN < NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

180
Tree	if ( real == NUMBER_CONSTANT && imaginary == copySign () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == copySign () ) { return NaN ; }
Distance : 3

181
Tree	if ( real == NUMBER_CONSTANT && imaginary != Integer.MIN_VALUE ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != Integer.MIN_VALUE ) { return NaN ; }
Distance : 3

182
Tree	if ( real == NUMBER_CONSTANT && NaN != LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN != LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ) { return NaN ; }
Distance : 4

183
Tree	if ( real == NUMBER_CONSTANT && imaginary == alpha ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == alpha ) { return NaN ; }
Distance : 2

184
Tree	if ( real == NUMBER_CONSTANT && imaginary != data.length ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != data.length ) { return NaN ; }
Distance : 3

185
Tree	if ( real == NUMBER_CONSTANT && this == NaN ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && this == NaN ) { return NaN ; }
Distance : 3

186
Tree	if ( real == NUMBER_CONSTANT && imaginary == x0 ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == x0 ) { return NaN ; }
Distance : 2

187
Tree	if ( real == NUMBER_CONSTANT && imaginary == && ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == && ) { return NaN ; }
Distance : 2

188
Tree	if ( real == NUMBER_CONSTANT && imaginary == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

189
Tree	if ( real == NUMBER_CONSTANT && imaginary && real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary && real ) { return NaN ; }
Distance : 3

190
Tree	if ( real == NUMBER_CONSTANT && imaginary != real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != real ) { return NaN ; }
Distance : 3

191
Tree	if ( real == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

192
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

193
Tree	if ( real == NUMBER_CONSTANT && NaN < STRING_CONSTANT + NaN ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN < STRING_CONSTANT + NaN ) { return NaN ; }
Distance : 6

194
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

195
Tree	if ( real == NUMBER_CONSTANT && imaginary != imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != imaginary ) { return NaN ; }
Distance : 3

196
Tree	if ( real == NUMBER_CONSTANT && imaginary > real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > real ) { return NaN ; }
Distance : 3

197
Tree	if ( real == NUMBER_CONSTANT && NaN < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

198
Tree	if ( real == NUMBER_CONSTANT && imaginary >= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary >= imaginary ) { return NaN ; }
Distance : 3

199
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary && real ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary && real ) { return NaN ; }
Distance : 4

200
Tree	if ( real == NUMBER_CONSTANT && imaginary == real == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == real == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

201
Tree	if ( real == NUMBER_CONSTANT && imaginary < real == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < real == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

202
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary != real ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary != real ) { return NaN ; }
Distance : 4

203
Tree	if ( real == NUMBER_CONSTANT && NaN >= real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN >= real ) { return NaN ; }
Distance : 4

204
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 1

205
Tree	if ( real == NUMBER_CONSTANT && real > real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real > real ) { return NaN ; }
Distance : 4

206
Tree	if ( imaginary == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

207
Tree	if ( real == NUMBER_CONSTANT && imaginary >= real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary >= real ) { return NaN ; }
Distance : 3

208
Tree	if ( real == NUMBER_CONSTANT && real != imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real != imaginary ) { return NaN ; }
Distance : 4

209
Tree	if ( real == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

========================================================================


