========================================================================
Example Number: 1
Parent Code is: 
( int ) ( ( value - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
-------------------------------------------------------------------------------
Child code is: 
( int ) ( ( v - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (11 (214{val=(}) (39{val=int}) (215{val=)}) (36 (214{val=(}) (27 (27 (36 (214{val=(}) (27 (800{val=value}) (201{val=-}) (22 (315{val=this}) (235{val=.}) (800{val=lowerBound}))) (215{val=)})) (203{val=/}) (36 (214{val=(}) (27 (22 (315{val=this}) (235{val=.}) (800{val=upperBound})) (201{val=-}) (22 (315{val=this}) (235{val=.}) (800{val=lowerBound}))) (215{val=)}))) (202{val=*}) (34{val=NUMBER_CONSTANT})) (215{val=)}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (11 (214{val=(}) (39{val=int}) (215{val=)}) (36 (214{val=(}) (27 (27 (36 (214{val=(}) (27 (800{val=v}) (201{val=-}) (22 (315{val=this}) (235{val=.}) (800{val=lowerBound}))) (215{val=)})) (203{val=/}) (36 (214{val=(}) (27 (22 (315{val=this}) (235{val=.}) (800{val=upperBound})) (201{val=-}) (22 (315{val=this}) (235{val=.}) (800{val=lowerBound}))) (215{val=)}))) (202{val=*}) (34{val=NUMBER_CONSTANT})) (215{val=)}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/24/parent/source_org_jfree_chart_renderer_GrayPaintScale.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 15
Wrong
========================================================================
False

0
Tree	compiler
Code	compiler
Distance : 24

1
Tree	NUMBER_CONSTANT
Code	NUMBER_CONSTANT
Distance : 23

2
Tree	( v / value - / )
Code	( v / value - / )
Distance : 19

3
Tree	( value / value - / )
Code	( value / value - / )
Distance : 20

4
Tree	(
Code	(
Distance : 23

5
Tree	null
Code	null
Distance : 24

6
Tree	new
Code	new
Distance : 24

7
Tree	( value / value - /= )
Code	( value / value - /= )
Distance : 20

8
Tree	( double ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( double ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 3

9
Tree	( int ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . upperBound ) * NUMBER_CONSTANT )
Distance : 3

10
Tree	( int ) ( ( value - this . lowerBound ) / ( this . v - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . lowerBound ) / ( this . v - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

11
Tree	( int ) ( ( value - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 1

12
Tree	( value / v - / )
Code	( value / v - / )
Distance : 19

13
Tree	( value / lowerBound - / )
Code	( value / lowerBound - / )
Distance : 20

14
Tree	( int ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

========================================================================


========================================================================
Example Number: 2
Parent Code is: 
{ super ( paint , stroke , paint , stroke , alpha ) ; this . value = value ; }
-------------------------------------------------------------------------------
Child code is: 
{ super ( paint , stroke , outlinePaint , outlineStroke , alpha ) ; this . value = value ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=paint}) (234{val=,}) (800{val=stroke}) (234{val=,}) (800{val=paint}) (234{val=,}) (800{val=stroke}) (234{val=,}) (800{val=alpha}) (215{val=)}) (227{val=;})) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=value})) (204{val==}) (800{val=value})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=paint}) (234{val=,}) (800{val=stroke}) (234{val=,}) (800{val=outlinePaint}) (234{val=,}) (800{val=outlineStroke}) (234{val=,}) (800{val=alpha}) (215{val=)}) (227{val=;})) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=value})) (204{val==}) (800{val=value})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/20/parent/source_org_jfree_chart_plot_ValueMarker.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	{ super ( paint ) ; this . value = value ; }
Code	{ super ( paint ) ; this . value = value ; }
Distance : 8

1
Tree	{ super ( paint , stroke ) ; this . value = value ; }
Code	{ super ( paint , stroke ) ; this . value = value ; }
Distance : 6

2
Tree	{ super ( paint , stroke , paint ) ; this . value = value ; }
Code	{ super ( paint , stroke , paint ) ; this . value = value ; }
Distance : 5

3
Tree	{ super ( paint , stroke , paint , alpha ) ; this . value = value ; }
Code	{ super ( paint , stroke , paint , alpha ) ; this . value = value ; }
Distance : 3

4
Tree	{ super ( paint , stroke ) ; this . value = new int [] { value } ; }
Code	{ super ( paint , stroke ) ; this . value = new int [] { value } ; }
Distance : 11

5
Tree	{ super ( paint , stroke , paint , stroke ) ; this . value = value ; }
Code	{ super ( paint , stroke , paint , stroke ) ; this . value = value ; }
Distance : 4

6
Tree	{ super ( paint , stroke ) ; this . value = new double [] { value } ; }
Code	{ super ( paint , stroke ) ; this . value = new double [] { value } ; }
Distance : 11

7
Tree	{ super ( paint , stroke , paint ) ; this . value = new double [] { value } ; }
Code	{ super ( paint , stroke , paint ) ; this . value = new double [] { value } ; }
Distance : 10

8
Tree	{ super ( stroke , stroke ) ; this . value = value ; }
Code	{ super ( stroke , stroke ) ; this . value = value ; }
Distance : 7

9
Tree	{ super ( alpha ) ; this . value = value ; }
Code	{ super ( alpha ) ; this . value = value ; }
Distance : 8

10
Tree	{ super ( outlineStroke ) ; this . value = new double [] { value } ; }
Code	{ super ( outlineStroke ) ; this . value = new double [] { value } ; }
Distance : 13

11
Tree	{ super ( stroke , stroke , paint ) ; this . value = value ; }
Code	{ super ( stroke , stroke , paint ) ; this . value = value ; }
Distance : 6

12
Tree	{ super ( paint ) ; this . value = new int [] { value } ; }
Code	{ super ( paint ) ; this . value = new int [] { value } ; }
Distance : 13

13
Tree	{ super ( paint ) ; this . value = value . value () ; }
Code	{ super ( paint ) ; this . value = value . value () ; }
Distance : 11

14
Tree	{ super ( value ) ; this . value = value ; }
Code	{ super ( value ) ; this . value = value ; }
Distance : 9

15
Tree	{ super ( outlineStroke , stroke ) ; this . value = value ; }
Code	{ super ( outlineStroke , stroke ) ; this . value = value ; }
Distance : 7

16
Tree	{ super ( alpha , stroke ) ; this . value = new double [] { value } ; }
Code	{ super ( alpha , stroke ) ; this . value = new double [] { value } ; }
Distance : 12

17
Tree	{ super ( Token.PARAM_LIST , stroke ) ; this . value = value ; }
Code	{ super ( Token.PARAM_LIST , stroke ) ; this . value = value ; }
Distance : 7

18
Tree	{ super ( alpha , stroke , paint ) ; this . value = new double [] { value } ; }
Code	{ super ( alpha , stroke , paint ) ; this . value = new double [] { value } ; }
Distance : 11

19
Tree	{ super ( paint ) ; this . value = value . valueOf () ; }
Code	{ super ( paint ) ; this . value = value . valueOf () ; }
Distance : 11

20
Tree	{ super ( alpha , stroke , paint ) ; this . value = value ; }
Code	{ super ( alpha , stroke , paint ) ; this . value = value ; }
Distance : 6

21
Tree	{ super ( outlineStroke , stroke , paint ) ; this . value = value ; }
Code	{ super ( outlineStroke , stroke , paint ) ; this . value = value ; }
Distance : 6

22
Tree	{ super ( stroke ) ; this . value = new double [] { value } ; }
Code	{ super ( stroke ) ; this . value = new double [] { value } ; }
Distance : 13

23
Tree	{ super ( stroke ) ; this . value = value . value () ; }
Code	{ super ( stroke ) ; this . value = value . value () ; }
Distance : 11

24
Tree	{ super ( outlineStroke , stroke , paint ) ; this . value = new double [] { value } ; }
Code	{ super ( outlineStroke , stroke , paint ) ; this . value = new double [] { value } ; }
Distance : 11

25
Tree	{ super ( paint ) ; this . value = value . getFirstChild () ; }
Code	{ super ( paint ) ; this . value = value . getFirstChild () ; }
Distance : 11

26
Tree	{ super ( stroke , stroke ) ; this . value = new double [] { value } ; }
Code	{ super ( stroke , stroke ) ; this . value = new double [] { value } ; }
Distance : 12

27
Tree	{ super ( paint ) ; this . value = value . toLowerCase () ; }
Code	{ super ( paint ) ; this . value = value . toLowerCase () ; }
Distance : 11

28
Tree	{ super ( stroke , stroke , paint ) ; this . value = new double [] { value } ; }
Code	{ super ( stroke , stroke , paint ) ; this . value = new double [] { value } ; }
Distance : 11

29
Tree	{ super ( paint , stroke , paint ) ; this . value = new int [] { value } ; }
Code	{ super ( paint , stroke , paint ) ; this . value = new int [] { value } ; }
Distance : 10

30
Tree	{ super ( stroke , stroke ) ; }
Code	{ super ( stroke , stroke ) ; }
Distance : 13

31
Tree	{ super ( alpha , stroke ) ; this . value = value ; }
Code	{ super ( alpha , stroke ) ; this . value = value ; }
Distance : 7

32
Tree	{ super ( alpha , stroke , paint , alpha ) ; this . value = value ; }
Code	{ super ( alpha , stroke , paint , alpha ) ; this . value = value ; }
Distance : 4

33
Tree	{ super ( alpha , stroke ) ; }
Code	{ super ( alpha , stroke ) ; }
Distance : 13

34
Tree	{ super ( paint , stroke , stroke ) ; this . value = value ; }
Code	{ super ( paint , stroke , stroke ) ; this . value = value ; }
Distance : 5

35
Tree	{ super ( outlineStroke , stroke ) ; }
Code	{ super ( outlineStroke , stroke ) ; }
Distance : 13

36
Tree	{ super ( LocalizedFormats.MAX_COUNT_EXCEEDED , stroke ) ; this . value = value ; }
Code	{ super ( LocalizedFormats.MAX_COUNT_EXCEEDED , stroke ) ; this . value = value ; }
Distance : 7

37
Tree	{ super ( LocalizedFormats.DIMENSIONS_MISMATCH , stroke ) ; this . value = value ; }
Code	{ super ( LocalizedFormats.DIMENSIONS_MISMATCH , stroke ) ; this . value = value ; }
Distance : 7

38
Tree	{ super ( System.out , stroke ) ; this . value = value ; }
Code	{ super ( System.out , stroke ) ; this . value = value ; }
Distance : 7

39
Tree	{ super ( LocalizedFormats.NOT_POSITIVE_SCALE , stroke ) ; this . value = value ; }
Code	{ super ( LocalizedFormats.NOT_POSITIVE_SCALE , stroke ) ; this . value = value ; }
Distance : 7

40
Tree	{ super ( paint ) ; this . value = new double [] { value } ; }
Code	{ super ( paint ) ; this . value = new double [] { value } ; }
Distance : 13

41
Tree	{ super ( stroke ) ; this . value = value ; }
Code	{ super ( stroke ) ; this . value = value ; }
Distance : 8

42
Tree	{ super ( paint , stroke ) ; }
Code	{ super ( paint , stroke ) ; }
Distance : 12

43
Tree	{ super ( stroke , stroke , paint , alpha ) ; this . value = value ; }
Code	{ super ( stroke , stroke , paint , alpha ) ; this . value = value ; }
Distance : 4

44
Tree	{ super ( outlineStroke ) ; this . value = value ; }
Code	{ super ( outlineStroke ) ; this . value = value ; }
Distance : 8

45
Tree	{ super ( alpha ) ; this . value = new double [] { value } ; }
Code	{ super ( alpha ) ; this . value = new double [] { value } ; }
Distance : 13

46
Tree	{ super ( outlineStroke , stroke , paint , alpha ) ; this . value = value ; }
Code	{ super ( outlineStroke , stroke , paint , alpha ) ; this . value = value ; }
Distance : 4

47
Tree	{ super ( outlineStroke , stroke ) ; this . value = new double [] { value } ; }
Code	{ super ( outlineStroke , stroke ) ; this . value = new double [] { value } ; }
Distance : 12

48
Tree	{ super ( value , stroke ) ; this . value = value ; }
Code	{ super ( value , stroke ) ; this . value = value ; }
Distance : 7

49
Tree	{ super ( value , stroke ) ; }
Code	{ super ( value , stroke ) ; }
Distance : 13

========================================================================


========================================================================
Example Number: 3
Parent Code is: 
if ( index < NUMBER_CONSTANT ) { return; }
-------------------------------------------------------------------------------
Child code is: 
if ( index < NUMBER_CONSTANT ) { throw new UnknownKeyException ( STRING_CONSTANT + key + STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=index}) (230{val=<}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (500{val=return;}) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=index}) (230{val=<}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=UnknownKeyException})) (214{val=(}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (800{val=key}) (200{val=+}) (45{val=STRING_CONSTANT})) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/18/parent/source_org_jfree_data_DefaultKeyedValues.java
-------------------------------------------------------------------------------
Edit Distance : 11
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	if ( index . isNaN ( index ) ) { return; }
Code	if ( index . isNaN ( index ) ) { return; }
Distance : 14

1
Tree	if ( index . valueOf ( index ) ) { return; }
Code	if ( index . valueOf ( index ) ) { return; }
Distance : 14

2
Tree	if ( ! index . abs () ) { return; }
Code	if ( ! index . abs () ) { return; }
Distance : 15

3
Tree	if ( index . toBooleanObject ( index ) == null ) { return; }
Code	if ( index . toBooleanObject ( index ) == null ) { return; }
Distance : 14

4
Tree	if ( ! index . toBooleanObject () ) { return; }
Code	if ( ! index . toBooleanObject () ) { return; }
Distance : 15

5
Tree	if ( ! allDefinitionsEquivalent ( index ) ) { return; }
Code	if ( ! allDefinitionsEquivalent ( index ) ) { return; }
Distance : 15

6
Tree	if ( index != null ) { continue; }
Code	if ( index != null ) { continue; }
Distance : 13

7
Tree	if ( index < NUMBER_CONSTANT ) { null }
Code	if ( index < NUMBER_CONSTANT ) { null }
Distance : 11

8
Tree	if ( ! index . getDataset () ) { return; }
Code	if ( ! index . getDataset () ) { return; }
Distance : 15

9
Tree	if ( index . getParent ( index ) == null ) { return; }
Code	if ( index . getParent ( index ) == null ) { return; }
Distance : 14

10
Tree	if ( index . valueOf () ) { return; }
Code	if ( index . valueOf () ) { return; }
Distance : 14

11
Tree	if ( index . isNaN ( index ) == null ) { return; }
Code	if ( index . isNaN ( index ) == null ) { return; }
Distance : 14

12
Tree	if ( index != index ) { super(); }
Code	if ( index != index ) { super(); }
Distance : 13

13
Tree	if ( index != index ) { continue; }
Code	if ( index != index ) { continue; }
Distance : 13

14
Tree	if ( ! types ( index ) ) { return; }
Code	if ( ! types ( index ) ) { return; }
Distance : 15

15
Tree	if ( index . valueOf ( index ) == null ) { return; }
Code	if ( index . valueOf ( index ) == null ) { return; }
Distance : 14

16
Tree	if ( index < NUMBER_CONSTANT ) { break; }
Code	if ( index < NUMBER_CONSTANT ) { break; }
Distance : 11

17
Tree	if ( ! index . toBooleanObject ( index ) ) { return; }
Code	if ( ! index . toBooleanObject ( index ) ) { return; }
Distance : 15

18
Tree	if ( index != index ) { return; }
Code	if ( index != index ) { return; }
Distance : 13

19
Tree	if ( index < NUMBER_CONSTANT ) { return; }
Code	if ( index < NUMBER_CONSTANT ) { return; }
Distance : 11

20
Tree	if ( index . getParent ( index ) ) { return; }
Code	if ( index . getParent ( index ) ) { return; }
Distance : 14

21
Tree	if ( index . toBooleanObject () ) { return; }
Code	if ( index . toBooleanObject () ) { return; }
Distance : 14

22
Tree	if ( index . getParent () ) { return; }
Code	if ( index . getParent () ) { return; }
Distance : 14

23
Tree	if ( ! index . valueOf ( index ) ) { return; }
Code	if ( ! index . valueOf ( index ) ) { return; }
Distance : 15

24
Tree	if ( ! isPowerOf2 ( index ) ) { return; }
Code	if ( ! isPowerOf2 ( index ) ) { return; }
Distance : 15

25
Tree	if ( index . abs ( index ) ) { return; }
Code	if ( index . abs ( index ) ) { return; }
Distance : 14

26
Tree	if ( ! index . valueOf () ) { return; }
Code	if ( ! index . valueOf () ) { return; }
Distance : 15

27
Tree	if ( ! index . getDataset ( index ) ) { return; }
Code	if ( ! index . getDataset ( index ) ) { return; }
Distance : 15

28
Tree	if ( ! index . abs ( index ) ) { return; }
Code	if ( ! index . abs ( index ) ) { return; }
Distance : 15

29
Tree	if ( ! getDataset ( index ) ) { return; }
Code	if ( ! getDataset ( index ) ) { return; }
Distance : 15

30
Tree	if ( index . toBooleanObject ( index ) ) { return; }
Code	if ( index . toBooleanObject ( index ) ) { return; }
Distance : 14

31
Tree	if ( index . abs () ) { return; }
Code	if ( index . abs () ) { return; }
Distance : 14

32
Tree	if ( index != null ) { return; }
Code	if ( index != null ) { return; }
Distance : 13

33
Tree	if ( index != null < index . getTimeZone ( index ) ) { return; }
Code	if ( index != null < index . getTimeZone ( index ) ) { return; }
Distance : 14

34
Tree	if ( index != null < index . getDaysInYearMax ( index ) ) { return; }
Code	if ( index != null < index . getDaysInYearMax ( index ) ) { return; }
Distance : 14

35
Tree	if ( ! index . getParent ( index ) ) { return; }
Code	if ( ! index . getParent ( index ) ) { return; }
Distance : 15

36
Tree	if ( index != null ) { break; }
Code	if ( index != null ) { break; }
Distance : 13

37
Tree	if ( index . abs ( index ) == null ) { return; }
Code	if ( index . abs ( index ) == null ) { return; }
Distance : 14

38
Tree	if ( index . isNaN () ) { return; }
Code	if ( index . isNaN () ) { return; }
Distance : 14

39
Tree	if ( index != null < index . getParent ( index ) ) { return; }
Code	if ( index != null < index . getParent ( index ) ) { return; }
Distance : 14

40
Tree	if ( index != key ) { return; }
Code	if ( index != key ) { return; }
Distance : 13

41
Tree	if ( ! index . getParent () ) { return; }
Code	if ( ! index . getParent () ) { return; }
Distance : 15

42
Tree	if ( index != index ) { break; }
Code	if ( index != index ) { break; }
Distance : 13

43
Tree	if ( index != null ) { null }
Code	if ( index != null ) { null }
Distance : 13

44
Tree	if ( index < NUMBER_CONSTANT ) { continue; }
Code	if ( index < NUMBER_CONSTANT ) { continue; }
Distance : 11

45
Tree	if ( ! getNumber ( index ) ) { return; }
Code	if ( ! getNumber ( index ) ) { return; }
Distance : 15

46
Tree	if ( index != null < index . toBooleanObject ( index ) ) { return; }
Code	if ( index != null < index . toBooleanObject ( index ) ) { return; }
Distance : 14

47
Tree	if ( index != null ) { super(); }
Code	if ( index != null ) { super(); }
Distance : 13

48
Tree	if ( index != null < index . isNaN ( index ) ) { return; }
Code	if ( index != null < index . isNaN ( index ) ) { return; }
Distance : 14

49
Tree	if ( index < NUMBER_CONSTANT ) { super(); }
Code	if ( index < NUMBER_CONSTANT ) { super(); }
Distance : 11

========================================================================


========================================================================
Example Number: 4
Parent Code is: 
if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( categoryKeys.length != getCategoryCount () ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (40{val=categoryKeys.length}) (242{val=!=}) (22 (2 (22 (315{val=this}) (235{val=.}) (801{val=startData})) (221{val=[}) (34{val=NUMBER_CONSTANT}) (222{val=]})) (235{val=.}) (800{val=length}))) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=IllegalArgumentException})) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (40{val=categoryKeys.length}) (242{val=!=}) (32 (802{val=getCategoryCount}) (216{val=()}))) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=IllegalArgumentException})) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/16/parent/source_org_jfree_data_category_DefaultIntervalCategoryDataset.java
-------------------------------------------------------------------------------
Edit Distance : 8
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } compiler
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } compiler
Distance : 19

1
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } T
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } T
Distance : 19

2
Tree	if ( ( length / length < NUMBER_CONSTANT ) == null ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) == null ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 21

3
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } void
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } void
Distance : 24

4
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } compiler
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } compiler
Distance : 24

5
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } T
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } T
Distance : 24

6
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } void
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } void
Distance : 19

7
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } e
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } e
Distance : 19

8
Tree	if ( length * length . startData ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; } value
Code	if ( length * length . startData ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; } value
Distance : 13

9
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } void
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } void
Distance : 19

10
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } T
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != this ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } T
Distance : 19

11
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

12
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

13
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; }
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; }
Distance : 18

14
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; }
Distance : 18

15
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != != ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

16
Tree	if ( length * length . [ ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; }
Code	if ( length * length . [ ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; }
Distance : 12

17
Tree	if ( length * length . ] ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; } +
Code	if ( length * length . ] ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; } +
Distance : 13

18
Tree	if ( length * length . startData ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; } i
Code	if ( length * length . startData ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; } i
Distance : 13

19
Tree	if ( length * length . [ ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; }
Code	if ( length * length . [ ( - NUMBER_CONSTANT ) != categoryKeys.length ) { throw new IllegalArgumentException ( categoryKeys.length ) ; }
Distance : 12

20
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } T
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } T
Distance : 24

21
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } T
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } T
Distance : 24

22
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } void
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } void
Distance : 24

23
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } void
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } void
Distance : 24

24
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } void
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } void
Distance : 18

25
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; } e
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; } e
Distance : 18

26
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; } void
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; } void
Distance : 18

27
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; } compiler
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; } compiler
Distance : 18

28
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; } T
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; } T
Distance : 18

29
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } T
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } T
Distance : 24

30
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } compiler
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } compiler
Distance : 24

31
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } compiler
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } compiler
Distance : 24

32
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } compiler
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } compiler
Distance : 24

33
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } e
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } e
Distance : 18

34
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } e
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } e
Distance : 24

35
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 23

36
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } compiler
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } compiler
Distance : 19

37
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } e
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } e
Distance : 24

38
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } e
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } e
Distance : 24

39
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } void
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } void
Distance : 24

40
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; }
Distance : 17

41
Tree	if ( ( length / length < NUMBER_CONSTANT ) == return; ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) == return; ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 21

42
Tree	if ( ( length / length < NUMBER_CONSTANT ) == continue; ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) == continue; ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 21

43
Tree	if ( ( length / length < NUMBER_CONSTANT ) == super(); ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) == super(); ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 21

44
Tree	if ( ( length / length < NUMBER_CONSTANT ) == break; ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) == break; ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 21

45
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } e
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( categoryKeys.length , length , length ) ; } e
Distance : 19

46
Tree	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } e
Code	if ( length / ( length / length < NUMBER_CONSTANT ) != categoryKeys.length ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; } e
Distance : 24

47
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } compiler
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } compiler
Distance : 18

48
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; }
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , length , categoryKeys.length ) ; }
Distance : 17

49
Tree	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } T
Code	if ( ( length / length < NUMBER_CONSTANT ) * length != ] ) { throw length . IllegalArgumentException ( STRING_CONSTANT , categoryKeys.length , categoryKeys.length ) ; } T
Distance : 18

========================================================================


========================================================================
Example Number: 5
Parent Code is: 
this . dataset = dataset ;
-------------------------------------------------------------------------------
Child code is: 
setDataset ( dataset ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=dataset})) (204{val==}) (800{val=dataset})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (32 (802{val=setDataset}) (214{val=(}) (800{val=dataset}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/12/parent/source_org_jfree_chart_plot_MultiplePiePlot.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	this . dataset = dataset ; void
Code	this . dataset = dataset ; void
Distance : 5

1
Tree	dataset = dataset ; e
Code	dataset = dataset ; e
Distance : 4

2
Tree	dataset = dataset ;
Code	dataset = dataset ;
Distance : 3

3
Tree	this . dataset = dataset . setDataset ( dataset ) ; compiler
Code	this . dataset = dataset . setDataset ( dataset ) ; compiler
Distance : 7

4
Tree	this . dataset = dataset ; T
Code	this . dataset = dataset ; T
Distance : 5

5
Tree	this . dataset = setDataset ( dataset ) ; T
Code	this . dataset = setDataset ( dataset ) ; T
Distance : 5

6
Tree	this . dataset = setDataset ( dataset ) ; void
Code	this . dataset = setDataset ( dataset ) ; void
Distance : 5

7
Tree	this . dataset = dataset . setDataset ( dataset ) ; T
Code	this . dataset = dataset . setDataset ( dataset ) ; T
Distance : 7

8
Tree	this . dataset = dataset . setDataset ( dataset ) ; void
Code	this . dataset = dataset . setDataset ( dataset ) ; void
Distance : 7

9
Tree	dataset = dataset ; T
Code	dataset = dataset ; T
Distance : 4

10
Tree	dataset = dataset ; void
Code	dataset = dataset ; void
Distance : 4

11
Tree	this . dataset = dataset . setDataset ( dataset ) ;
Code	this . dataset = dataset . setDataset ( dataset ) ;
Distance : 6

12
Tree	this . dataset = new Cartesian3D ( dataset ) ;
Code	this . dataset = new Cartesian3D ( dataset ) ;
Distance : 6

13
Tree	this . dataset = new getParent ( dataset ) ;
Code	this . dataset = new getParent ( dataset ) ;
Distance : 6

14
Tree	this . dataset = new ArrayRealVector ( dataset ) ;
Code	this . dataset = new ArrayRealVector ( dataset ) ;
Distance : 6

15
Tree	this . dataset = new Coordinates3D ( dataset ) ;
Code	this . dataset = new Coordinates3D ( dataset ) ;
Distance : 6

16
Tree	dataset = NUMBER_CONSTANT / dataset ;
Code	dataset = NUMBER_CONSTANT / dataset ;
Distance : 5

17
Tree	dataset = dataset ; compiler
Code	dataset = dataset ; compiler
Distance : 4

18
Tree	this . dataset = dataset . setDataset ( dataset ) ; e
Code	this . dataset = dataset . setDataset ( dataset ) ; e
Distance : 7

19
Tree	this . dataset = dataset ;
Code	this . dataset = dataset ;
Distance : 4

20
Tree	dataset = NUMBER_CONSTANT / dataset ; T
Code	dataset = NUMBER_CONSTANT / dataset ; T
Distance : 6

21
Tree	this . dataset = ( dataset ) dataset . setDataset () ; compiler
Code	this . dataset = ( dataset ) dataset . setDataset () ; compiler
Distance : 9

22
Tree	this . dataset = ( dataset ) dataset . setDataset () ; T
Code	this . dataset = ( dataset ) dataset . setDataset () ; T
Distance : 9

23
Tree	dataset . setDataset ( dataset ) ; e
Code	dataset . setDataset ( dataset ) ; e
Distance : 3

24
Tree	this . dataset = dataset . setDataset () ; compiler
Code	this . dataset = dataset . setDataset () ; compiler
Distance : 8

25
Tree	dataset = NUMBER_CONSTANT / dataset ; compiler
Code	dataset = NUMBER_CONSTANT / dataset ; compiler
Distance : 6

26
Tree	dataset . setDataset ( dataset ) ; void
Code	dataset . setDataset ( dataset ) ; void
Distance : 3

27
Tree	this . dataset = ( dataset ) dataset . setDataset () ; e
Code	this . dataset = ( dataset ) dataset . setDataset () ; e
Distance : 9

28
Tree	dataset . setDataset ( dataset , STRING_CONSTANT ) ; T
Code	dataset . setDataset ( dataset , STRING_CONSTANT ) ; T
Distance : 5

29
Tree	dataset . setDataset ( dataset , STRING_CONSTANT ) ; void
Code	dataset . setDataset ( dataset , STRING_CONSTANT ) ; void
Distance : 5

30
Tree	dataset . setDataset ( dataset , STRING_CONSTANT ) ; e
Code	dataset . setDataset ( dataset , STRING_CONSTANT ) ; e
Distance : 5

31
Tree	this . dataset = dataset . setDataset () ; void
Code	this . dataset = dataset . setDataset () ; void
Distance : 8

32
Tree	dataset . setDataset ( dataset ) ; compiler
Code	dataset . setDataset ( dataset ) ; compiler
Distance : 3

33
Tree	dataset = NUMBER_CONSTANT / dataset ; void
Code	dataset = NUMBER_CONSTANT / dataset ; void
Distance : 6

34
Tree	this . dataset = dataset . setDataset () ; T
Code	this . dataset = dataset . setDataset () ; T
Distance : 8

35
Tree	dataset . setDataset ( dataset , STRING_CONSTANT ) ; compiler
Code	dataset . setDataset ( dataset , STRING_CONSTANT ) ; compiler
Distance : 5

36
Tree	this . dataset = new dataset ( dataset ) ;
Code	this . dataset = new dataset ( dataset ) ;
Distance : 6

37
Tree	this . dataset = dataset . setDataset () ;
Code	this . dataset = dataset . setDataset () ;
Distance : 7

38
Tree	dataset = NUMBER_CONSTANT / dataset ; e
Code	dataset = NUMBER_CONSTANT / dataset ; e
Distance : 6

39
Tree	this . dataset = dataset ; e
Code	this . dataset = dataset ; e
Distance : 5

40
Tree	this . dataset = dataset ; compiler
Code	this . dataset = dataset ; compiler
Distance : 5

41
Tree	this . dataset = dataset . setDataset () ; e
Code	this . dataset = dataset . setDataset () ; e
Distance : 8

42
Tree	this . dataset = ( dataset ) dataset . setDataset () ;
Code	this . dataset = ( dataset ) dataset . setDataset () ;
Distance : 8

43
Tree	this . dataset = setDataset ( dataset ) ;
Code	this . dataset = setDataset ( dataset ) ;
Distance : 4

44
Tree	dataset . setDataset ( dataset , STRING_CONSTANT ) ;
Code	dataset . setDataset ( dataset , STRING_CONSTANT ) ;
Distance : 4

45
Tree	dataset . setDataset ( dataset ) ;
Code	dataset . setDataset ( dataset ) ;
Distance : 2

46
Tree	this . dataset = setDataset ( dataset ) ; compiler
Code	this . dataset = setDataset ( dataset ) ; compiler
Distance : 5

47
Tree	this . dataset = setDataset ( dataset ) ; e
Code	this . dataset = setDataset ( dataset ) ; e
Distance : 5

48
Tree	dataset . setDataset ( dataset ) ; T
Code	dataset . setDataset ( dataset ) ; T
Distance : 3

49
Tree	this . dataset = ( dataset ) dataset . setDataset () ; void
Code	this . dataset = ( dataset ) dataset . setDataset () ; void
Distance : 9

========================================================================


========================================================================
Example Number: 6
Parent Code is: 
PathIterator iterator2 = p1 . getPathIterator ( null ) ;
-------------------------------------------------------------------------------
Child code is: 
PathIterator iterator2 = p2 . getPathIterator ( null ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=PathIterator})) (59 (800{val=iterator2}) (204{val==}) (32 (800{val=p1}) (235{val=.}) (802{val=getPathIterator}) (214{val=(}) (500{val=null}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=PathIterator})) (59 (800{val=iterator2}) (204{val==}) (32 (800{val=p2}) (235{val=.}) (802{val=getPathIterator}) (214{val=(}) (500{val=null}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/11/parent/source_org_jfree_chart_util_ShapeUtilities.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 50
Correct
========================================================================
True

0
Tree	PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Distance : 1

1
Tree	PathIterator p2 = p1 . getPathIterator ( null ) ;
Code	PathIterator p2 = p1 . getPathIterator ( null ) ;
Distance : 2

2
Tree	PathIterator iterator2 = p2 . getPathIterator ( null ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( null ) ;
Distance : 0

3
Tree	PathIterator p1 = p1 . getPathIterator ( null ) ;
Code	PathIterator p1 = p1 . getPathIterator ( null ) ;
Distance : 2

4
Tree	PathIterator iterator2 = p1 . getPathIterator ( NUMBER_CONSTANT ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( NUMBER_CONSTANT ) ;
Distance : 2

5
Tree	PathIterator p2 = p2 . getPathIterator ( ( null [] ) null ) ;
Code	PathIterator p2 = p2 . getPathIterator ( ( null [] ) null ) ;
Distance : 5

6
Tree	final PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) null ) ;
Code	final PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) null ) ;
Distance : 6

7
Tree	PathIterator iterator2 = p1 . getPathIterator ( p2 . getPathIterator ( null ) ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p2 . getPathIterator ( null ) ) ;
Distance : 5

8
Tree	synchronized PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Code	synchronized PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Distance : 2

9
Tree	PathIterator iterator2 = p1 . getPathIterator ( p2 ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p2 ) ;
Distance : 2

10
Tree	PathIterator p2 = p1 . getPathIterator ( p1 . getPathIterator ( null ) ) ;
Code	PathIterator p2 = p1 . getPathIterator ( p1 . getPathIterator ( null ) ) ;
Distance : 7

11
Tree	PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) null ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) null ) ;
Distance : 5

12
Tree	PathIterator p2 = p1 . getPathIterator ( p1 ) ;
Code	PathIterator p2 = p1 . getPathIterator ( p1 ) ;
Distance : 3

13
Tree	abstract PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) null ) ;
Code	abstract PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) null ) ;
Distance : 6

14
Tree	PathIterator iterator2 = p2 . getPathIterator ( p1 . getPathIterator ( null ) ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( p1 . getPathIterator ( null ) ) ;
Distance : 5

15
Tree	private PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Code	private PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Distance : 2

16
Tree	PathIterator p1 = p1 . getPathIterator ( p1 . getPathIterator ( null ) ) ;
Code	PathIterator p1 = p1 . getPathIterator ( p1 . getPathIterator ( null ) ) ;
Distance : 7

17
Tree	synchronized PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) null ) ;
Code	synchronized PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) null ) ;
Distance : 6

18
Tree	private PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) null ) ;
Code	private PathIterator iterator2 = p1 . getPathIterator ( ( null [] ) null ) ;
Distance : 6

19
Tree	PathIterator iterator2 = p2 . getPathIterator ( p1 ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( p1 ) ;
Distance : 1

20
Tree	PathIterator p1 = p1 . getPathIterator ( p1 ) ;
Code	PathIterator p1 = p1 . getPathIterator ( p1 ) ;
Distance : 3

21
Tree	final PathIterator p2 = p1 . getPathIterator ( null ) ;
Code	final PathIterator p2 = p1 . getPathIterator ( null ) ;
Distance : 3

22
Tree	PathIterator p1 = p1 . getPathIterator ( ( p1 ) null ) ;
Code	PathIterator p1 = p1 . getPathIterator ( ( p1 ) null ) ;
Distance : 5

23
Tree	abstract PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Code	abstract PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Distance : 2

24
Tree	PathIterator iterator2 = p1 . getPathIterator ( ( p2 ) null ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( ( p2 ) null ) ;
Distance : 4

25
Tree	PathIterator p2 = p1 . getPathIterator ( ( null [] ) null ) ;
Code	PathIterator p2 = p1 . getPathIterator ( ( null [] ) null ) ;
Distance : 6

26
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 , TransformType.INVERSE ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 , TransformType.INVERSE ) ;
Distance : 4

27
Tree	final PathIterator p2 = p1 . getPathIterator ( ( null [] ) null ) ;
Code	final PathIterator p2 = p1 . getPathIterator ( ( null [] ) null ) ;
Distance : 7

28
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 , LocalizedFormats.INTERNAL_ERROR ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 , LocalizedFormats.INTERNAL_ERROR ) ;
Distance : 4

29
Tree	PathIterator iterator2 = p2 . getPathIterator ( ( null [] ) null ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( ( null [] ) null ) ;
Distance : 4

30
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 ) ;
Distance : 2

31
Tree	final PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Code	final PathIterator iterator2 = p1 . getPathIterator ( null ) ;
Distance : 2

32
Tree	PathIterator iterator2 = p1 . getPathIterator ( ( p1 ) null ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( ( p1 ) null ) ;
Distance : 4

33
Tree	PathIterator p2 = p1 . getPathIterator ( ( p1 ) null ) ;
Code	PathIterator p2 = p1 . getPathIterator ( ( p1 ) null ) ;
Distance : 5

34
Tree	PathIterator p1 = p1 . getPathIterator ( ( null [] ) null ) ;
Code	PathIterator p1 = p1 . getPathIterator ( ( null [] ) null ) ;
Distance : 6

35
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 , RotationConvention.FRAME_TRANSFORM ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 , RotationConvention.FRAME_TRANSFORM ) ;
Distance : 4

36
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 , Strictness.SILENT ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 , Strictness.SILENT ) ;
Distance : 4

37
Tree	PathIterator iterator2 = p2 . getPathIterator ( ( p1 ) null ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( ( p1 ) null ) ;
Distance : 3

38
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 . getPathIterator ( null ) ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 . getPathIterator ( null ) ) ;
Distance : 6

39
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 , Config.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 , Config.JsDocParsing.INCLUDE_DESCRIPTIONS_NO_WHITESPACE ) ;
Distance : 4

40
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 , iterator2 . getPathIterator ( null ) ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 , iterator2 . getPathIterator ( null ) ) ;
Distance : 8

41
Tree	PathIterator iterator2 = Double.NaN . getPathIterator ( NUMBER_CONSTANT ) ;
Code	PathIterator iterator2 = Double.NaN . getPathIterator ( NUMBER_CONSTANT ) ;
Distance : 2

42
Tree	PathIterator iterator2 = FastMath.PI . getPathIterator ( NUMBER_CONSTANT ) ;
Code	PathIterator iterator2 = FastMath.PI . getPathIterator ( NUMBER_CONSTANT ) ;
Distance : 2

43
Tree	PathIterator iterator2 = MultiplePiePlot . getPathIterator ( NUMBER_CONSTANT ) ;
Code	PathIterator iterator2 = MultiplePiePlot . getPathIterator ( NUMBER_CONSTANT ) ;
Distance : 2

44
Tree	PathIterator iterator2 = generator . getPathIterator ( NUMBER_CONSTANT ) ;
Code	PathIterator iterator2 = generator . getPathIterator ( NUMBER_CONSTANT ) ;
Distance : 2

45
Tree	PathIterator p2 = p2 . getPathIterator ( null ) ;
Code	PathIterator p2 = p2 . getPathIterator ( null ) ;
Distance : 1

46
Tree	PathIterator iterator2 = p1 . getPathIterator ( p1 , p2 . getPathIterator ( null ) ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p1 , p2 . getPathIterator ( null ) ) ;
Distance : 7

47
Tree	PathIterator iterator2 = p1 . getPathIterator ( p2 , iterator2 . getPathIterator ( null ) ) ;
Code	PathIterator iterator2 = p1 . getPathIterator ( p2 , iterator2 . getPathIterator ( null ) ) ;
Distance : 7

48
Tree	PathIterator p2 = p1 . getPathIterator ( p1 , iterator2 . getPathIterator ( null ) ) ;
Code	PathIterator p2 = p1 . getPathIterator ( p1 , iterator2 . getPathIterator ( null ) ) ;
Distance : 9

49
Tree	PathIterator iterator2 = p2 . getPathIterator ( p1 , iterator2 . getPathIterator ( null ) ) ;
Code	PathIterator iterator2 = p2 . getPathIterator ( p1 , iterator2 . getPathIterator ( null ) ) ;
Distance : 7

========================================================================


========================================================================
Example Number: 7
Parent Code is: 
{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; }
-------------------------------------------------------------------------------
Child code is: 
{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (800{val=toolTipText}) (200{val=+}) (45{val=STRING_CONSTANT})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (800{val=ImageMapUtilities}) (235{val=.}) (802{val=htmlEscape}) (214{val=(}) (800{val=toolTipText}) (215{val=)})) (200{val=+}) (45{val=STRING_CONSTANT})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/10/parent/source_org_jfree_chart_imagemap_StandardToolTipTagFragmentGenerator.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	{ return toolTipText . htmlEscape ( Any.ANY , System.out ) ; }
Code	{ return toolTipText . htmlEscape ( Any.ANY , System.out ) ; }
Distance : 7

1
Tree	{ return toolTipText . htmlEscape ( ImageMapUtilities ) ; }
Code	{ return toolTipText . htmlEscape ( ImageMapUtilities ) ; }
Distance : 6

2
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , null , ImageMapUtilities ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , null , ImageMapUtilities ) ; }
Distance : 7

3
Tree	{ return htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Code	{ return htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Distance : 7

4
Tree	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities ) ; }
Distance : 5

5
Tree	{ return toolTipText . htmlEscape ( ImageMapUtilities , null , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( ImageMapUtilities , null , toolTipText ) ; }
Distance : 9

6
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 5

7
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( ImageMapUtilities , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( ImageMapUtilities , toolTipText ) + STRING_CONSTANT ; }
Distance : 3

8
Tree	{ return toolTipText . htmlEscape ( java.util.Locale.US , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( java.util.Locale.US , toolTipText ) ; }
Distance : 7

9
Tree	{ return false ; }
Code	{ return false ; }
Distance : 10

10
Tree	{ return toolTipText . htmlEscape ( Nullability.EXPLICIT , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( Nullability.EXPLICIT , toolTipText ) ; }
Distance : 7

11
Tree	{ return false ; } i
Code	{ return false ; } i
Distance : 11

12
Tree	{ return toolTipText . htmlEscape ( LocalizedFormats.NO_DATA , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( LocalizedFormats.NO_DATA , toolTipText ) ; }
Distance : 7

13
Tree	{ return org.joda.time.gwt.util.Arrays ; }
Code	{ return org.joda.time.gwt.util.Arrays ; }
Distance : 10

14
Tree	{ return toolTipText . htmlEscape ( Any.ANY , StringUtils.EMPTY ) ; }
Code	{ return toolTipText . htmlEscape ( Any.ANY , StringUtils.EMPTY ) ; }
Distance : 7

15
Tree	{ return StringUtils.EMPTY ; }
Code	{ return StringUtils.EMPTY ; }
Distance : 10

16
Tree	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Distance : 6

17
Tree	{ return entry.map ; }
Code	{ return entry.map ; }
Distance : 10

18
Tree	{ return toolTipText . htmlEscape ( Nullability.EXPLICIT ) ; }
Code	{ return toolTipText . htmlEscape ( Nullability.EXPLICIT ) ; }
Distance : 6

19
Tree	{ return false ; } value
Code	{ return false ; } value
Distance : 11

20
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , ImageMapUtilities ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , ImageMapUtilities ) + STRING_CONSTANT ; }
Distance : 3

21
Tree	{ return toolTipText . htmlEscape ( java.util.Locale.US ) ; }
Code	{ return toolTipText . htmlEscape ( java.util.Locale.US ) ; }
Distance : 6

22
Tree	{ return false ; } +
Code	{ return false ; } +
Distance : 11

23
Tree	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 6

24
Tree	{ return com.google.protobuf.GeneratedMessageV3 ; }
Code	{ return com.google.protobuf.GeneratedMessageV3 ; }
Distance : 10

25
Tree	{ return toolTipText . htmlEscape ( LocalizedFormats.NO_DATA ) ; }
Code	{ return toolTipText . htmlEscape ( LocalizedFormats.NO_DATA ) ; }
Distance : 6

26
Tree	{ return toolTipText . htmlEscape ( Any.ANY , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( Any.ANY , toolTipText ) ; }
Distance : 7

27
Tree	{ return toolTipText . htmlEscape ( LocalizedFormats.INVALID_ITERATIONS_LIMITS ) ; }
Code	{ return toolTipText . htmlEscape ( LocalizedFormats.INVALID_ITERATIONS_LIMITS ) ; }
Distance : 6

28
Tree	{ return toolTipText . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Distance : 7

29
Tree	{ return htmlEscape ( toolTipText , toolTipText ) ; } !=
Code	{ return htmlEscape ( toolTipText , toolTipText ) ; } !=
Distance : 8

30
Tree	{ return toolTipText . htmlEscape ( Any.ANY , Any.ANY ) ; }
Code	{ return toolTipText . htmlEscape ( Any.ANY , Any.ANY ) ; }
Distance : 7

31
Tree	{ return toolTipText . htmlEscape ( toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText ) ; }
Distance : 5

32
Tree	{ return true ; }
Code	{ return true ; }
Distance : 10

33
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText ) ; }
Distance : 4

34
Tree	{ return toolTipText . htmlEscape ( toolTipText , null , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , null , toolTipText ) ; }
Distance : 8

35
Tree	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . htmlEscape ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Distance : 3

36
Tree	{ return toolTipText . htmlEscape ( LocalizedFormats.INVALID_ITERATIONS_LIMITS , toolTipText ) ; }
Code	{ return toolTipText . htmlEscape ( LocalizedFormats.INVALID_ITERATIONS_LIMITS , toolTipText ) ; }
Distance : 7

37
Tree	{ return iConverters.length ; }
Code	{ return iConverters.length ; }
Distance : 10

38
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( ImageMapUtilities , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( ImageMapUtilities , toolTipText ) + STRING_CONSTANT ; }
Distance : 2

39
Tree	{ return toolTipText . htmlEscape ( Any.ANY , iValues.length ) ; }
Code	{ return toolTipText . htmlEscape ( Any.ANY , iValues.length ) ; }
Distance : 7

40
Tree	{ return toolTipText . htmlEscape ( Any.ANY ) ; }
Code	{ return toolTipText . htmlEscape ( Any.ANY ) ; }
Distance : 6

41
Tree	{ return toolTipText . htmlEscape ( Any.ANY , Feature.STRING_CONTINUATION ) ; }
Code	{ return toolTipText . htmlEscape ( Any.ANY , Feature.STRING_CONTINUATION ) ; }
Distance : 7

42
Tree	{ return htmlEscape ( toolTipText , toolTipText ) ; }
Code	{ return htmlEscape ( toolTipText , toolTipText ) ; }
Distance : 7

43
Tree	{ return toolTipText . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , ImageMapUtilities ) ; }
Distance : 6

44
Tree	{ return toolTipText . htmlEscape ( toolTipText ) ; } !=
Code	{ return toolTipText . htmlEscape ( toolTipText ) ; } !=
Distance : 6

45
Tree	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Distance : 2

46
Tree	{ return ImageMapUtilities . htmlEscape ( toolTipText , null , toolTipText ) ; }
Code	{ return ImageMapUtilities . htmlEscape ( toolTipText , null , toolTipText ) ; }
Distance : 7

47
Tree	{ return htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Code	{ return htmlEscape ( ImageMapUtilities , toolTipText ) ; }
Distance : 7

48
Tree	{ return toolTipText . htmlEscape ( toolTipText , null , ImageMapUtilities ) ; }
Code	{ return toolTipText . htmlEscape ( toolTipText , null , ImageMapUtilities ) ; }
Distance : 8

49
Tree	{ return htmlEscape ( ImageMapUtilities , ImageMapUtilities ) ; }
Code	{ return htmlEscape ( ImageMapUtilities , ImageMapUtilities ) ; }
Distance : 8

========================================================================


========================================================================
Example Number: 8
Parent Code is: 
{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ this ( time , zone , Locale . getDefault () ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (17 (315{val=this}) (214{val=(}) (800{val=time}) (234{val=,}) (40{val=RegularTimePeriod.DEFAULT_TIME_ZONE}) (234{val=,}) (32 (800{val=Locale}) (235{val=.}) (802{val=getDefault}) (216{val=()})) (215{val=)}) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (17 (315{val=this}) (214{val=(}) (800{val=time}) (234{val=,}) (800{val=zone}) (234{val=,}) (32 (800{val=Locale}) (235{val=.}) (802{val=getDefault}) (216{val=()})) (215{val=)}) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/8/parent/source_org_jfree_data_time_Week.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	{ this ( time , Locale , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , Locale , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

1
Tree	{ this ( time , zone . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , zone . getDefault () , Locale . getDefault () ) ; }
Distance : 3

2
Tree	{ this ( time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time . getDefault () , Locale . getDefault () ) ; }
Distance : 3

3
Tree	{ super ( time . getDefault () ) ; Locale = zone ; }
Code	{ super ( time . getDefault () ) ; Locale = zone ; }
Distance : 9

4
Tree	{ this ( time , time , time , Locale , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , time , time , Locale , Locale , Locale , Locale . getDefault () ) ; }
Distance : 9

5
Tree	{ this ( time , zone , time , Locale , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , zone , time , Locale , Locale , Locale , Locale . getDefault () ) ; }
Distance : 8

6
Tree	{ this ( ( , time , zone ) ; }
Code	{ this ( ( , time , zone ) ; }
Distance : 6

7
Tree	{ this ( time . getDefault () , zone . getDefault () ) ; }
Code	{ this ( time . getDefault () , zone . getDefault () ) ; }
Distance : 4

8
Tree	{ this ( time , time , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , time , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

9
Tree	{ super ( time . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time . getDefault () ) ; Locale = Locale ; }
Distance : 9

10
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; }
Distance : 8

11
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; zone = Locale ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; zone = Locale ; }
Distance : 8

12
Tree	{ this ( time , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 4

13
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; time = Locale ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; time = Locale ; }
Distance : 8

14
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , zone . getDefault () ) ; Locale = Locale ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , zone . getDefault () ) ; Locale = Locale ; }
Distance : 8

15
Tree	{ super ( time . getDefault () ) ; time = Locale ; }
Code	{ super ( time . getDefault () ) ; time = Locale ; }
Distance : 9

16
Tree	{ this ( time , zone , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , zone , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 7

17
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 7

18
Tree	{ super ( time , Locale , Locale , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , Locale , Locale , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 8

19
Tree	{ this ( time , time , Locale , Locale , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , time , Locale , Locale , Locale , Locale , Locale . getDefault () ) ; }
Distance : 9

20
Tree	{ this ( time , Locale , Locale , Locale , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , Locale , Locale , Locale , Locale , Locale , Locale . getDefault () ) ; }
Distance : 9

21
Tree	{ super ( time , time , time , Locale . getDefault () ) ; }
Code	{ super ( time , time , time , Locale . getDefault () ) ; }
Distance : 4

22
Tree	{ this ( time , Locale , Locale ) ; }
Code	{ this ( time , Locale , Locale ) ; }
Distance : 4

23
Tree	{ this ( ( , zone , Locale ) ; }
Code	{ this ( ( , zone , Locale ) ; }
Distance : 4

24
Tree	{ this ( time , time , time , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , time , time , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

25
Tree	{ this ( zone , time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( zone , time . getDefault () , Locale . getDefault () ) ; }
Distance : 5

26
Tree	{ this ( time , zone , Locale , Locale , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , zone , Locale , Locale , Locale , Locale , Locale . getDefault () ) ; }
Distance : 8

27
Tree	{ this ( Locale . getDefault () , Locale ) ; }
Code	{ this ( Locale . getDefault () , Locale ) ; }
Distance : 6

28
Tree	{ this ( time , zone , time , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , zone , time , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 7

29
Tree	{ super ( time , zone , time , Locale . getDefault () ) ; }
Code	{ super ( time , zone , time , Locale . getDefault () ) ; }
Distance : 3

30
Tree	{ super ( time , time , time , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , time , time , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 8

31
Tree	{ this ( time , time . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , time . getDefault () , Locale . getDefault () ) ; }
Distance : 4

32
Tree	{ super ( time , zone , time , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , zone , time , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 7

33
Tree	{ this ( zone . getDefault () , Locale ) ; }
Code	{ this ( zone . getDefault () , Locale ) ; }
Distance : 6

34
Tree	{ this ( time . getDefault () , time ) ; }
Code	{ this ( time . getDefault () , time ) ; }
Distance : 6

35
Tree	{ this ( time , time . getDefault () , zone . getDefault () ) ; }
Code	{ this ( time , time . getDefault () , zone . getDefault () ) ; }
Distance : 5

36
Tree	{ super ( time . getDefault () ) ; zone = Locale ; }
Code	{ super ( time . getDefault () ) ; zone = Locale ; }
Distance : 9

37
Tree	{ super ( time , time , Locale , Locale . getDefault () ) ; }
Code	{ super ( time , time , Locale , Locale . getDefault () ) ; }
Distance : 4

38
Tree	{ this ( time , time , time ) ; }
Code	{ this ( time , time , time ) ; }
Distance : 5

39
Tree	{ this ( zone . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( zone . getDefault () , Locale . getDefault () ) ; }
Distance : 4

40
Tree	{ this ( time . getDefault () , zone ) ; }
Code	{ this ( time . getDefault () , zone ) ; }
Distance : 6

41
Tree	{ this ( time . getDefault () , time . getDefault () ) ; }
Code	{ this ( time . getDefault () , time . getDefault () ) ; }
Distance : 4

42
Tree	{ super ( time , zone , Locale , Locale . getDefault () ) ; }
Code	{ super ( time , zone , Locale , Locale . getDefault () ) ; }
Distance : 3

43
Tree	{ this ( time . getDefault () , Locale ) ; }
Code	{ this ( time . getDefault () , Locale ) ; }
Distance : 6

44
Tree	{ this ( Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 4

45
Tree	{ super ( time . getDefault () ) ; Locale = time ; }
Code	{ super ( time . getDefault () ) ; Locale = time ; }
Distance : 9

46
Tree	{ super ( time , Locale , Locale , Locale . getDefault () ) ; }
Code	{ super ( time , Locale , Locale , Locale . getDefault () ) ; }
Distance : 4

47
Tree	{ super ( time , time , Locale , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , time , Locale , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 8

48
Tree	{ this ( ( , time , Locale ) ; }
Code	{ this ( ( , time , Locale ) ; }
Distance : 5

49
Tree	{ super ( time , zone , Locale , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , zone , Locale , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 7

========================================================================


========================================================================
Example Number: 9
Parent Code is: 
if ( dataset != null ) { return result ; }
-------------------------------------------------------------------------------
Child code is: 
if ( dataset == null ) { return result ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=dataset}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=result}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=dataset}) (236{val===}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=result}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/1/parent/source_org_jfree_chart_renderer_category_AbstractCategoryItemRenderer.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	if ( isEmpty ( dataset ) ) { return result ; }
Code	if ( isEmpty ( dataset ) ) { return result ; }
Distance : 4

1
Tree	if ( firstNonBottom ( dataset ) ) { return result ; }
Code	if ( firstNonBottom ( dataset ) ) { return result ; }
Distance : 4

2
Tree	if ( dataset != null ) { return result ; }
Code	if ( dataset != null ) { return result ; }
Distance : 1

3
Tree	if ( dataset . indexOf ( dataset ) ) { return result ; }
Code	if ( dataset . indexOf ( dataset ) ) { return result ; }
Distance : 5

4
Tree	if ( dataset != continue; ) { return result ; }
Code	if ( dataset != continue; ) { return result ; }
Distance : 2

5
Tree	if ( dataset != return; ) { return this . result ; }
Code	if ( dataset != return; ) { return this . result ; }
Distance : 4

6
Tree	if ( dataset . isEmptyType ( dataset ) ) { return result ; }
Code	if ( dataset . isEmptyType ( dataset ) ) { return result ; }
Distance : 5

7
Tree	if ( new Coordinates3D ( dataset ) . indexOf ( result ) ) { return result ; }
Code	if ( new Coordinates3D ( dataset ) . indexOf ( result ) ) { return result ; }
Distance : 9

8
Tree	if ( indexOf () ) { return result ; }
Code	if ( indexOf () ) { return result ; }
Distance : 3

9
Tree	if ( isBottom ( dataset ) ) { return result ; }
Code	if ( isBottom ( dataset ) ) { return result ; }
Distance : 4

10
Tree	if ( dataset != super(); ) { return this . result ; }
Code	if ( dataset != super(); ) { return this . result ; }
Distance : 4

11
Tree	if ( dataset ( dataset ) ) { return result ; }
Code	if ( dataset ( dataset ) ) { return result ; }
Distance : 3

12
Tree	if ( isBottom () ) { return result ; }
Code	if ( isBottom () ) { return result ; }
Distance : 3

13
Tree	if ( new isBottom ( dataset ) . indexOf ( result ) ) { return result ; }
Code	if ( new isBottom ( dataset ) . indexOf ( result ) ) { return result ; }
Distance : 9

14
Tree	if ( dataset != null ) { return this . result ; }
Code	if ( dataset != null ) { return this . result ; }
Distance : 3

15
Tree	if ( dataset ( dataset ) ) { return dataset ; }
Code	if ( dataset ( dataset ) ) { return dataset ; }
Distance : 4

16
Tree	if ( dataset . getParent ( dataset ) ) { return result ; }
Code	if ( dataset . getParent ( dataset ) ) { return result ; }
Distance : 5

17
Tree	if ( dataset . getParent () ) { return result ; }
Code	if ( dataset . getParent () ) { return result ; }
Distance : 3

18
Tree	if ( dataset != null ) { return result . hashCode ( dataset ) ; }
Code	if ( dataset != null ) { return result . hashCode ( dataset ) ; }
Distance : 6

19
Tree	if ( isEmptyType ( dataset ) ) { return result ; }
Code	if ( isEmptyType ( dataset ) ) { return result ; }
Distance : 4

20
Tree	if ( dataset . isNaN ( dataset ) ) { return result ; }
Code	if ( dataset . isNaN ( dataset ) ) { return result ; }
Distance : 5

21
Tree	if ( dataset . isNaN () ) { return result ; }
Code	if ( dataset . isNaN () ) { return result ; }
Distance : 3

22
Tree	if ( dataset . isEmpty ( dataset ) ) { return result ; }
Code	if ( dataset . isEmpty ( dataset ) ) { return result ; }
Distance : 5

23
Tree	if ( dataset != null ) { return result . result ( dataset ) ; }
Code	if ( dataset != null ) { return result . result ( dataset ) ; }
Distance : 6

24
Tree	if ( dataset . isEmptyType () ) { return result ; }
Code	if ( dataset . isEmptyType () ) { return result ; }
Distance : 3

25
Tree	if ( new isBottom ( dataset ) . getSolver ( result ) ) { return result ; }
Code	if ( new isBottom ( dataset ) . getSolver ( result ) ) { return result ; }
Distance : 9

26
Tree	if ( new indexOf ( dataset ) . indexOf ( result ) ) { return result ; }
Code	if ( new indexOf ( dataset ) . indexOf ( result ) ) { return result ; }
Distance : 9

27
Tree	if ( dataset != null ) { return result . getFirstChild ( dataset ) ; }
Code	if ( dataset != null ) { return result . getFirstChild ( dataset ) ; }
Distance : 6

28
Tree	if ( indexOf ( dataset , dataset ) ) { return result ; }
Code	if ( indexOf ( dataset , dataset ) ) { return result ; }
Distance : 5

29
Tree	if ( isBottom ( dataset , result ) ) { return result ; }
Code	if ( isBottom ( dataset , result ) ) { return result ; }
Distance : 5

30
Tree	if ( isEmpty () ) { return result ; }
Code	if ( isEmpty () ) { return result ; }
Distance : 3

31
Tree	if ( isEmptyType () ) { return result ; }
Code	if ( isEmptyType () ) { return result ; }
Distance : 3

32
Tree	if ( firstNonBottom () ) { return result ; }
Code	if ( firstNonBottom () ) { return result ; }
Distance : 3

33
Tree	if ( isEmptyType ( dataset , dataset ) ) { return result ; }
Code	if ( isEmptyType ( dataset , dataset ) ) { return result ; }
Distance : 5

34
Tree	if ( indexOf ( dataset ) ) { return result ; }
Code	if ( indexOf ( dataset ) ) { return result ; }
Distance : 4

35
Tree	if ( isBottom ( dataset , dataset ) ) { return result ; }
Code	if ( isBottom ( dataset , dataset ) ) { return result ; }
Distance : 5

36
Tree	if ( dataset . indexOf () ) { return result ; }
Code	if ( dataset . indexOf () ) { return result ; }
Distance : 3

37
Tree	if ( dataset != null ) { return result . getParent ( dataset ) ; }
Code	if ( dataset != null ) { return result . getParent ( dataset ) ; }
Distance : 6

38
Tree	if ( dataset . isEmpty () ) { return result ; }
Code	if ( dataset . isEmpty () ) { return result ; }
Distance : 3

39
Tree	if ( new isBottom ( dataset ) . that ( result ) ) { return result ; }
Code	if ( new isBottom ( dataset ) . that ( result ) ) { return result ; }
Distance : 9

40
Tree	if ( firstNonBottom ( dataset , dataset ) ) { return result ; }
Code	if ( firstNonBottom ( dataset , dataset ) ) { return result ; }
Distance : 5

41
Tree	if ( dataset != null ) { return result . hasChildren ( dataset ) ; }
Code	if ( dataset != null ) { return result . hasChildren ( dataset ) ; }
Distance : 6

42
Tree	if ( dataset != null ) { return this . dataset ; }
Code	if ( dataset != null ) { return this . dataset ; }
Distance : 4

43
Tree	if ( result ( dataset ) ) { return result ; }
Code	if ( result ( dataset ) ) { return result ; }
Distance : 4

44
Tree	if ( dataset ( result ) ) { return result ; }
Code	if ( dataset ( result ) ) { return result ; }
Distance : 3

45
Tree	if ( result != null ) { return result ; }
Code	if ( result != null ) { return result ; }
Distance : 2

46
Tree	if ( dataset != return; ) { return result ; }
Code	if ( dataset != return; ) { return result ; }
Distance : 2

47
Tree	if ( result != null ) { return this . result ; }
Code	if ( result != null ) { return this . result ; }
Distance : 4

48
Tree	if ( dataset != super(); ) { return result ; }
Code	if ( dataset != super(); ) { return result ; }
Distance : 2

49
Tree	if ( result ( result ) ) { return result ; }
Code	if ( result ( result ) ) { return result ; }
Distance : 4

========================================================================


========================================================================
Example Number: 10
Parent Code is: 
name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT
-------------------------------------------------------------------------------
Child code is: 
! name.inExterns && name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (27 (27 (40{val=name.globalSets}) (236{val===}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (40{val=name.localSets}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (249{val=&&}) (27 (40{val=name.aliasingGets}) (231{val=>}) (34{val=NUMBER_CONSTANT}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (27 (27 (38 (207{val=!}) (40{val=name.inExterns})) (249{val=&&}) (27 (40{val=name.globalSets}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (249{val=&&}) (27 (40{val=name.localSets}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (249{val=&&}) (27 (40{val=name.aliasingGets}) (231{val=>}) (34{val=NUMBER_CONSTANT}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/130/parent/src_com_google_javascript_jscomp_CollapseProperties.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	- name.globalSets && name.localSets == null && NUMBER_CONSTANT * JAVA_1_8
Code	- name.globalSets && name.localSets == null && NUMBER_CONSTANT * JAVA_1_8
Distance : 9

1
Tree	- name.globalSets && name.localSets == null && NUMBER_CONSTANT * slots
Code	- name.globalSets && name.localSets == null && NUMBER_CONSTANT * slots
Distance : 9

2
Tree	! name.localSets && name.localSets == null && CHAR_CONS
Code	! name.localSets && name.localSets == null && CHAR_CONS
Distance : 9

3
Tree	- name.localSets && name.localSets == null && NUMBER_CONSTANT * isRead
Code	- name.localSets && name.localSets == null && NUMBER_CONSTANT * isRead
Distance : 10

4
Tree	! name.localSets && name.localSets == null && &&
Code	! name.localSets && name.localSets == null && &&
Distance : 9

5
Tree	! name.globalSets && name.localSets == null && super
Code	! name.globalSets && name.localSets == null && super
Distance : 8

6
Tree	- name.localSets && name.localSets == null && NUMBER_CONSTANT * MILLIS_PER_DAY
Code	- name.localSets && name.localSets == null && NUMBER_CONSTANT * MILLIS_PER_DAY
Distance : 10

7
Tree	! name.localSets && name.localSets == null && super
Code	! name.localSets && name.localSets == null && super
Distance : 9

8
Tree	! name.localSets && name.localSets == null && NUMBER_CONSTANT * MILLIS_PER_DAY
Code	! name.localSets && name.localSets == null && NUMBER_CONSTANT * MILLIS_PER_DAY
Distance : 9

9
Tree	! name.localSets && name.localSets == null && NUMBER_CONSTANT * anyStringNull
Code	! name.localSets && name.localSets == null && NUMBER_CONSTANT * anyStringNull
Distance : 9

10
Tree	! name.localSets && name.localSets == null && NUMBER_CONSTANT * JAVA_1_8
Code	! name.localSets && name.localSets == null && NUMBER_CONSTANT * JAVA_1_8
Distance : 9

11
Tree	objectMethodsGuru == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	objectMethodsGuru == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

12
Tree	- name.globalSets && name.localSets == null && NUMBER_CONSTANT * anyStringNull
Code	- name.globalSets && name.localSets == null && NUMBER_CONSTANT * anyStringNull
Distance : 9

13
Tree	the_mock_type == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	the_mock_type == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

14
Tree	findDeps == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	findDeps == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

15
Tree	! name.localSets && name.localSets == null && NUMBER_CONSTANT * slots
Code	! name.localSets && name.localSets == null && NUMBER_CONSTANT * slots
Distance : 9

16
Tree	decompMatrix == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	decompMatrix == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

17
Tree	! name.localSets && name.localSets == null && CHAR_CONS
Code	! name.localSets && name.localSets == null && CHAR_CONS
Distance : 9

18
Tree	bundler == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	bundler == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

19
Tree	! name.localSets && name.localSets == null && NUMBER_CONSTANT * isRead
Code	! name.localSets && name.localSets == null && NUMBER_CONSTANT * isRead
Distance : 9

20
Tree	- NUMBER_CONSTANT && name.localSets == null && super
Code	- NUMBER_CONSTANT && name.localSets == null && super
Distance : 9

21
Tree	- NUMBER_CONSTANT && name.localSets == null && super
Code	- NUMBER_CONSTANT && name.localSets == null && super
Distance : 9

22
Tree	- NUMBER_CONSTANT && name.localSets == null && CHAR_CONS
Code	- NUMBER_CONSTANT && name.localSets == null && CHAR_CONS
Distance : 9

23
Tree	- newInput && name.localSets == null && super
Code	- newInput && name.localSets == null && super
Distance : 10

24
Tree	- newInput && name.localSets == null && super
Code	- newInput && name.localSets == null && super
Distance : 10

25
Tree	! name.localSets && NUMBER_CONSTANT - MILLIS_PER_DAY && ^
Code	! name.localSets && NUMBER_CONSTANT - MILLIS_PER_DAY && ^
Distance : 10

26
Tree	! name.localSets && name.localSets == null && extends
Code	! name.localSets && name.localSets == null && extends
Distance : 9

27
Tree	! name.localSets && NUMBER_CONSTANT - MILLIS_PER_DAY && >=
Code	! name.localSets && NUMBER_CONSTANT - MILLIS_PER_DAY && >=
Distance : 10

28
Tree	! name.localSets && name.localSets == null && else
Code	! name.localSets && name.localSets == null && else
Distance : 9

29
Tree	! name.localSets && NUMBER_CONSTANT - MILLIS_PER_DAY && /
Code	! name.localSets && NUMBER_CONSTANT - MILLIS_PER_DAY && /
Distance : 10

30
Tree	! name.localSets && name.localSets == null && &&
Code	! name.localSets && name.localSets == null && &&
Distance : 9

31
Tree	- lhsOfForInLoop && name.localSets == null && super
Code	- lhsOfForInLoop && name.localSets == null && super
Distance : 10

32
Tree	- objectMethodsGuru && name.localSets == null && super
Code	- objectMethodsGuru && name.localSets == null && super
Distance : 10

33
Tree	- NUMBER_CONSTANT && name.localSets == null && else
Code	- NUMBER_CONSTANT && name.localSets == null && else
Distance : 9

34
Tree	- embedded && name.localSets == null && super
Code	- embedded && name.localSets == null && super
Distance : 10

35
Tree	- NUMBER_CONSTANT && name.localSets == null && extends
Code	- NUMBER_CONSTANT && name.localSets == null && extends
Distance : 9

36
Tree	- NUMBER_CONSTANT && name.localSets == null && extends
Code	- NUMBER_CONSTANT && name.localSets == null && extends
Distance : 9

37
Tree	- objectMethodsGuru && name.localSets == null && super
Code	- objectMethodsGuru && name.localSets == null && super
Distance : 10

38
Tree	! name.localSets && NUMBER_CONSTANT - zval.length && ^
Code	! name.localSets && NUMBER_CONSTANT - zval.length && ^
Distance : 10

39
Tree	- NUMBER_CONSTANT && name.localSets == null && ^
Code	- NUMBER_CONSTANT && name.localSets == null && ^
Distance : 9

40
Tree	- NUMBER_CONSTANT && name.localSets == null && else
Code	- NUMBER_CONSTANT && name.localSets == null && else
Distance : 9

41
Tree	- NUMBER_CONSTANT && name.localSets == null && ^
Code	- NUMBER_CONSTANT && name.localSets == null && ^
Distance : 9

42
Tree	! name.localSets && name.localSets == null && extends
Code	! name.localSets && name.localSets == null && extends
Distance : 9

43
Tree	! name.localSets && NUMBER_CONSTANT - zval.length && >=
Code	! name.localSets && NUMBER_CONSTANT - zval.length && >=
Distance : 10

44
Tree	! name.localSets && name.localSets == null && else
Code	! name.localSets && name.localSets == null && else
Distance : 9

45
Tree	- inbits && name.localSets == null && super
Code	- inbits && name.localSets == null && super
Distance : 10

46
Tree	- NUMBER_CONSTANT && name.localSets == null && CHAR_CONS
Code	- NUMBER_CONSTANT && name.localSets == null && CHAR_CONS
Distance : 9

47
Tree	- inbits && name.localSets == null && super
Code	- inbits && name.localSets == null && super
Distance : 10

48
Tree	- lhsOfForInLoop && name.localSets == null && super
Code	- lhsOfForInLoop && name.localSets == null && super
Distance : 10

49
Tree	- embedded && name.localSets == null && super
Code	- embedded && name.localSets == null && super
Distance : 10

========================================================================


========================================================================
Example Number: 11
Parent Code is: 
Context rhsContext = Context.OTHER ;
-------------------------------------------------------------------------------
Child code is: 
Context rhsContext = getContextForNoInOperator ( context ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Context})) (59 (800{val=rhsContext}) (204{val==}) (40{val=Context.OTHER})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Context})) (59 (800{val=rhsContext}) (204{val==}) (32 (802{val=getContextForNoInOperator}) (214{val=(}) (800{val=context}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/123/parent/src_com_google_javascript_jscomp_CodeGenerator.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	Context Context [] = context . Context.OTHER () ;
Code	Context Context [] = context . Context.OTHER () ;
Distance : 6

1
Tree	Context rhsContext = Context.OTHER ;
Code	Context rhsContext = Context.OTHER ;
Distance : 4

2
Tree	abstract Context rhsContext = Context.OTHER ;
Code	abstract Context rhsContext = Context.OTHER ;
Distance : 5

3
Tree	Context context = STRING_CONSTANT ;
Code	Context context = STRING_CONSTANT ;
Distance : 5

4
Tree	synchronized Context rhsContext = Context.OTHER ;
Code	synchronized Context rhsContext = Context.OTHER ;
Distance : 5

5
Tree	static Context rhsContext = Context.OTHER ;
Code	static Context rhsContext = Context.OTHER ;
Distance : 5

6
Tree	Context rhsContext = this . context ;
Code	Context rhsContext = this . context ;
Distance : 3

7
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ;
Code	Context rhsContext = Context.OTHER . Context.OTHER () ;
Distance : 4

8
Tree	Context rhsContext = Context.OTHER ? Context.OTHER : Context.OTHER ;
Code	Context rhsContext = Context.OTHER ? Context.OTHER : Context.OTHER ;
Distance : 5

9
Tree	Context context = this . context ;
Code	Context context = this . context ;
Distance : 4

10
Tree	Context context = Context.OTHER . Context.OTHER () ;
Code	Context context = Context.OTHER . Context.OTHER () ;
Distance : 5

11
Tree	Context rhsContext = Context.OTHER ; +
Code	Context rhsContext = Context.OTHER ; +
Distance : 5

12
Tree	Context rhsContext ;
Code	Context rhsContext ;
Distance : 5

13
Tree	Context Context [] = Context.OTHER . Context.OTHER () ; i
Code	Context Context [] = Context.OTHER . Context.OTHER () ; i
Distance : 7

14
Tree	Context Context [] = Context.OTHER . Context.OTHER () ; value
Code	Context Context [] = Context.OTHER . Context.OTHER () ; value
Distance : 7

15
Tree	Context rhsContext = NUMBER_CONSTANT ; value
Code	Context rhsContext = NUMBER_CONSTANT ; value
Distance : 5

16
Tree	Context rhsContext = STRING_CONSTANT ; i
Code	Context rhsContext = STRING_CONSTANT ; i
Distance : 5

17
Tree	Context Context [] = Context.OTHER . Context.OTHER () ; +
Code	Context Context [] = Context.OTHER . Context.OTHER () ; +
Distance : 7

18
Tree	Context rhsContext = Context.OTHER ; !=
Code	Context rhsContext = Context.OTHER ; !=
Distance : 5

19
Tree	Context context ;
Code	Context context ;
Distance : 5

20
Tree	Context rhsContext = Context.OTHER ; i
Code	Context rhsContext = Context.OTHER ; i
Distance : 5

21
Tree	Context rhsContext = this . rhsContext ;
Code	Context rhsContext = this . rhsContext ;
Distance : 4

22
Tree	Context rhsContext = this . rhsContext ; !=
Code	Context rhsContext = this . rhsContext ; !=
Distance : 5

23
Tree	Context rhsContext = NUMBER_CONSTANT ;
Code	Context rhsContext = NUMBER_CONSTANT ;
Distance : 4

24
Tree	Context rhsContext = context ;
Code	Context rhsContext = context ;
Distance : 3

25
Tree	Context context = NUMBER_CONSTANT ;
Code	Context context = NUMBER_CONSTANT ;
Distance : 5

26
Tree	Context Context [] = Context.OTHER . Context.OTHER () ;
Code	Context Context [] = Context.OTHER . Context.OTHER () ;
Distance : 6

27
Tree	Context rhsContext = Context.OTHER . Context.OTHER () ; !=
Code	Context rhsContext = Context.OTHER . Context.OTHER () ; !=
Distance : 5

28
Tree	private Context rhsContext = Context.OTHER ;
Code	private Context rhsContext = Context.OTHER ;
Distance : 5

29
Tree	Context context = Context.OTHER ;
Code	Context context = Context.OTHER ;
Distance : 5

30
Tree	Context rhsContext = Context.OTHER ;
Code	Context rhsContext = Context.OTHER ;
Distance : 4

31
Tree	Context rhsContext = context . Context.OTHER () ;
Code	Context rhsContext = context . Context.OTHER () ;
Distance : 4

32
Tree	Context rhsContext = STRING_CONSTANT ; value
Code	Context rhsContext = STRING_CONSTANT ; value
Distance : 5

33
Tree	Context rhsContext = STRING_CONSTANT ;
Code	Context rhsContext = STRING_CONSTANT ;
Distance : 4

34
Tree	Context context = context ? Context.OTHER : Context.OTHER ;
Code	Context context = context ? Context.OTHER : Context.OTHER ;
Distance : 6

35
Tree	Context rhsContext ; i
Code	Context rhsContext ; i
Distance : 6

36
Tree	Context context = context ;
Code	Context context = context ;
Distance : 4

37
Tree	Context rhsContext = Context.OTHER ; value
Code	Context rhsContext = Context.OTHER ; value
Distance : 5

38
Tree	Context context = Context.OTHER ? Context.OTHER : Context.OTHER ;
Code	Context context = Context.OTHER ? Context.OTHER : Context.OTHER ;
Distance : 6

39
Tree	Context rhsContext ; +
Code	Context rhsContext ; +
Distance : 6

40
Tree	Context rhsContext = Context.OTHER ? Context.OTHER : Context.OTHER ; !=
Code	Context rhsContext = Context.OTHER ? Context.OTHER : Context.OTHER ; !=
Distance : 6

41
Tree	Context context = Context.OTHER ;
Code	Context context = Context.OTHER ;
Distance : 5

42
Tree	final Context rhsContext = Context.OTHER ;
Code	final Context rhsContext = Context.OTHER ;
Distance : 5

43
Tree	Context rhsContext = NUMBER_CONSTANT ; i
Code	Context rhsContext = NUMBER_CONSTANT ; i
Distance : 5

44
Tree	Context rhsContext = context ? Context.OTHER : Context.OTHER ;
Code	Context rhsContext = context ? Context.OTHER : Context.OTHER ;
Distance : 5

45
Tree	Context rhsContext ; value
Code	Context rhsContext ; value
Distance : 6

46
Tree	Context context = context . Context.OTHER () ;
Code	Context context = context . Context.OTHER () ;
Distance : 5

47
Tree	Context rhsContext = STRING_CONSTANT ; +
Code	Context rhsContext = STRING_CONSTANT ; +
Distance : 5

48
Tree	Context context = this . rhsContext ;
Code	Context context = this . rhsContext ;
Distance : 5

49
Tree	Context rhsContext = NUMBER_CONSTANT ; +
Code	Context rhsContext = NUMBER_CONSTANT ; +
Distance : 5

========================================================================


========================================================================
Example Number: 12
Parent Code is: 
{ return topType ; }
-------------------------------------------------------------------------------
Child code is: 
{ return topType . isAllType () ? getNativeType ( ARRAY_TYPE ) : topType ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (800{val=topType}) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (16 (32 (800{val=topType}) (235{val=.}) (802{val=isAllType}) (216{val=()})) (233{val=?}) (32 (802{val=getNativeType}) (214{val=(}) (800{val=ARRAY_TYPE}) (215{val=)})) (226{val=:}) (800{val=topType})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/111/parent/src_com_google_javascript_jscomp_type_ClosureReverseAbstractInterpreter.java
-------------------------------------------------------------------------------
Edit Distance : 10
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	{ return ARRAY_TYPE ; } +
Code	{ return ARRAY_TYPE ; } +
Distance : 11

1
Tree	{ return this . topType ; } value
Code	{ return this . topType ; } value
Distance : 10

2
Tree	{ return this . topType ; } i
Code	{ return this . topType ; } i
Distance : 10

3
Tree	{ return isAllType () ; } value
Code	{ return isAllType () ; } value
Distance : 10

4
Tree	{ return isAllType () ; } i
Code	{ return isAllType () ; } i
Distance : 10

5
Tree	{ return isAllType () ; } +
Code	{ return isAllType () ; } +
Distance : 10

6
Tree	private boolean isAllType () { return ARRAY_TYPE ; }
Code	private boolean isAllType () { return ARRAY_TYPE ; }
Distance : 10

7
Tree	{ return ( ARRAY_TYPE ) { . getNativeType () ; }
Code	{ return ( ARRAY_TYPE ) { . getNativeType () ; }
Distance : 10

8
Tree	{ return topType . getNativeType () ? null : topType ; }
Code	{ return topType . getNativeType () ? null : topType ; }
Distance : 5

9
Tree	{ return ARRAY_TYPE . getNativeType () ? null : topType ; }
Code	{ return ARRAY_TYPE . getNativeType () ? null : topType ; }
Distance : 6

10
Tree	{ return ARRAY_TYPE . isAllType () ? null : topType ; }
Code	{ return ARRAY_TYPE . isAllType () ? null : topType ; }
Distance : 5

11
Tree	{ return getNativeType () ; }
Code	{ return getNativeType () ; }
Distance : 10

12
Tree	{ return PRECISE_YEAR_WEEK ; }
Code	{ return PRECISE_YEAR_WEEK ; }
Distance : 11

13
Tree	{ return this . topType . isAllType () ; }
Code	{ return this . topType . isAllType () ; }
Distance : 9

14
Tree	{ return this . ARRAY_TYPE . isAllType () ; }
Code	{ return this . ARRAY_TYPE . isAllType () ; }
Distance : 9

15
Tree	{ return ARRAY_TYPE . isAllType ( topType ) ; }
Code	{ return ARRAY_TYPE . isAllType ( topType ) ; }
Distance : 7

16
Tree	{ return multiplicand ; }
Code	{ return multiplicand ; }
Distance : 11

17
Tree	private int getNativeType () { return topType ; }
Code	private int getNativeType () { return topType ; }
Distance : 11

18
Tree	{ return com.google.protobuf.GeneratedMessageV3 ; }
Code	{ return com.google.protobuf.GeneratedMessageV3 ; }
Distance : 11

19
Tree	{ return ARRAY_TYPE ; }
Code	{ return ARRAY_TYPE ; }
Distance : 10

20
Tree	{ return ( ARRAY_TYPE ) { . isAllType () ; }
Code	{ return ( ARRAY_TYPE ) { . isAllType () ; }
Distance : 10

21
Tree	{ return topType . isAllType () ? null : topType ; }
Code	{ return topType . isAllType () ? null : topType ; }
Distance : 4

22
Tree	{ return ( topType ) getNativeType ( ARRAY_TYPE ) ; }
Code	{ return ( topType ) getNativeType ( ARRAY_TYPE ) ; }
Distance : 7

23
Tree	{ return topType ; }
Code	{ return topType ; }
Distance : 10

24
Tree	private boolean getNativeType () { return topType ; }
Code	private boolean getNativeType () { return topType ; }
Distance : 11

25
Tree	{ return this . topType ; }
Code	{ return this . topType ; }
Distance : 9

26
Tree	{ return topType . isAllType ( topType ) ; }
Code	{ return topType . isAllType ( topType ) ; }
Distance : 6

27
Tree	{ return this . topType . getNativeType () ; }
Code	{ return this . topType . getNativeType () ; }
Distance : 9

28
Tree	{ return setShapeInternal ; }
Code	{ return setShapeInternal ; }
Distance : 11

29
Tree	{ return this . ARRAY_TYPE . getNativeType () ; }
Code	{ return this . ARRAY_TYPE . getNativeType () ; }
Distance : 9

30
Tree	{ return this . ARRAY_TYPE ; }
Code	{ return this . ARRAY_TYPE ; }
Distance : 9

31
Tree	{ return isAllType () ; }
Code	{ return isAllType () ; }
Distance : 9

32
Tree	{ return ZERO ; }
Code	{ return ZERO ; }
Distance : 11

33
Tree	{ return ARRAY_TYPE . isAllType ( ARRAY_TYPE ) ; }
Code	{ return ARRAY_TYPE . isAllType ( ARRAY_TYPE ) ; }
Distance : 6

34
Tree	{ return topType . isAllType ( ARRAY_TYPE ) ; }
Code	{ return topType . isAllType ( ARRAY_TYPE ) ; }
Distance : 5

35
Tree	{ return ( topType ) { . getNativeType () ; }
Code	{ return ( topType ) { . getNativeType () ; }
Distance : 10

36
Tree	{ return ( ARRAY_TYPE ) getNativeType ( ARRAY_TYPE ) ; }
Code	{ return ( ARRAY_TYPE ) getNativeType ( ARRAY_TYPE ) ; }
Distance : 7

37
Tree	{ return ( topType ) ARRAY_TYPE . isAllType () ; }
Code	{ return ( topType ) ARRAY_TYPE . isAllType () ; }
Distance : 10

38
Tree	{ return ( topType ) isAllType ( { ) ; }
Code	{ return ( topType ) isAllType ( { ) ; }
Distance : 8

39
Tree	{ return ARRAY_TYPE . isAllType () ? null : ARRAY_TYPE ; }
Code	{ return ARRAY_TYPE . isAllType () ? null : ARRAY_TYPE ; }
Distance : 6

40
Tree	{ return ARRAY_TYPE . getNativeType ( topType ) ; }
Code	{ return ARRAY_TYPE . getNativeType ( topType ) ; }
Distance : 7

41
Tree	{ return this . topType . isAllType () ; } !=
Code	{ return this . topType . isAllType () ; } !=
Distance : 10

42
Tree	{ return this . topType ; } +
Code	{ return this . topType ; } +
Distance : 10

43
Tree	{ return ARRAY_TYPE ; } i
Code	{ return ARRAY_TYPE ; } i
Distance : 11

44
Tree	{ return ARRAY_TYPE ; } value
Code	{ return ARRAY_TYPE ; } value
Distance : 11

45
Tree	{ return ( topType ) getNativeType ( { ) ; }
Code	{ return ( topType ) getNativeType ( { ) ; }
Distance : 8

46
Tree	{ return ( ARRAY_TYPE ) getNativeType ( { ) ; }
Code	{ return ( ARRAY_TYPE ) getNativeType ( { ) ; }
Distance : 8

47
Tree	{ return ( topType ) { . isAllType () ; }
Code	{ return ( topType ) { . isAllType () ; }
Distance : 10

48
Tree	private boolean isAllType () { return topType ; }
Code	private boolean isAllType () { return topType ; }
Distance : 10

49
Tree	private int isAllType () { return topType ; }
Code	private int isAllType () { return topType ; }
Distance : 10

========================================================================


========================================================================
Example Number: 13
Parent Code is: 
{ if ( assignLhsChild != null ) { return true ; } return false ; }
-------------------------------------------------------------------------------
Child code is: 
{ if ( assignLhsChild != null ) { return true ; } return parent != null && NodeUtil . isGet ( parent ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (800{val=assignLhsChild}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (9{val=true}) (227{val=;})) (219{val=}}))) (41 (329{val=return}) (9{val=false}) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (800{val=assignLhsChild}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (9{val=true}) (227{val=;})) (219{val=}}))) (41 (329{val=return}) (27 (27 (800{val=parent}) (242{val=!=}) (500{val=null})) (249{val=&&}) (32 (800{val=NodeUtil}) (235{val=.}) (802{val=isGet}) (214{val=(}) (800{val=parent}) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/100/parent/src_com_google_javascript_jscomp_CheckGlobalThis.java
-------------------------------------------------------------------------------
Edit Distance : 10
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	{ if ( ! isGet ( assignLhsChild , NodeUtil , false ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , NodeUtil , false ) ) { return false ; } return false ; }
Distance : 19

1
Tree	{ if ( ! NodeUtil . isGet ( assignLhsChild ) ) { return false ; } return false ; }
Code	{ if ( ! NodeUtil . isGet ( assignLhsChild ) ) { return false ; } return false ; }
Distance : 18

2
Tree	{ if ( ! isGet ( parent , parent , false ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( parent , parent , false ) ) { return false ; } return false ; }
Distance : 20

3
Tree	{ if ( ! isGet ( assignLhsChild , NodeUtil , false ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , NodeUtil , false ) ) { return true ; } return false ; }
Distance : 18

4
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild , false ) ) { return false ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild , false ) ) { return false ; } return false ; }
Distance : 19

5
Tree	{ if ( ! isGet ( assignLhsChild , NodeUtil ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , NodeUtil ) ) { return true ; } return false ; }
Distance : 16

6
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Distance : 16

7
Tree	{ if ( ! isGet ( assignLhsChild , parent , false ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , false ) ) { return true ; } return false ; }
Distance : 18

8
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return false ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild ) ) { return false ; } return false ; }
Distance : 17

9
Tree	{ if ( ! NodeUtil . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Code	{ if ( ! NodeUtil . isGet ( assignLhsChild ) ) { return true ; } return false ; }
Distance : 17

10
Tree	{ if ( ! assignLhsChild . isGet ( parent ) ) { return true ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( parent ) ) { return true ; } return false ; }
Distance : 16

11
Tree	{ if ( ! assignLhsChild . isGet ( assignLhsChild , false ) ) { return true ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( assignLhsChild , false ) ) { return true ; } return false ; }
Distance : 18

12
Tree	{ if ( ! NodeUtil . isGet ( assignLhsChild , false ) ) { return false ; } return false ; }
Code	{ if ( ! NodeUtil . isGet ( assignLhsChild , false ) ) { return false ; } return false ; }
Distance : 19

13
Tree	{ if ( ! isGet ( assignLhsChild , parent , parent ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , parent ) ) { return false ; } return false ; }
Distance : 19

14
Tree	{ if ( ! isGet ( assignLhsChild , parent , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , parent ) ) { return true ; } return false ; }
Distance : 18

15
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return false ; } return false ; }
Distance : 17

16
Tree	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent ) ) { return true ; } return false ; }
Distance : 16

17
Tree	{ if ( ! isGet ( assignLhsChild , NodeUtil ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , NodeUtil ) ) { return false ; } return false ; }
Distance : 17

18
Tree	{ if ( ! NodeUtil ) { return true ; } return false ; }
Code	{ if ( ! NodeUtil ) { return true ; } return false ; }
Distance : 13

19
Tree	{ if ( NodeUtil != null ) { return false ; } return false ; }
Code	{ if ( NodeUtil != null ) { return false ; } return false ; }
Distance : 12

20
Tree	{ if ( ! isGet ( parent , parent ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( parent , parent ) ) { return false ; } return false ; }
Distance : 18

21
Tree	{ if ( ! isGet ( assignLhsChild , parent , false ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , parent , false ) ) { return false ; } return false ; }
Distance : 19

22
Tree	{ if ( ! assignLhsChild ) { return false ; } return false ; }
Code	{ if ( ! assignLhsChild ) { return false ; } return false ; }
Distance : 14

23
Tree	{ if ( ! parent ) { return true ; } return false ; }
Code	{ if ( ! parent ) { return true ; } return false ; }
Distance : 13

24
Tree	{ if ( assignLhsChild != null ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 5

25
Tree	{ if ( ! NodeUtil ) { return false ; } return false ; }
Code	{ if ( ! NodeUtil ) { return false ; } return false ; }
Distance : 14

26
Tree	{ if ( assignLhsChild != null ) { return true ; } return false ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return false ; }
Distance : 10

27
Tree	{ if ( assignLhsChild != null ) { return false ; } return false ; }
Code	{ if ( assignLhsChild != null ) { return false ; } return false ; }
Distance : 11

28
Tree	{ if ( assignLhsChild != null ) { return false ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( assignLhsChild != null ) { return false ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 6

29
Tree	{ if ( ! assignLhsChild ) { return true ; } return false ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return false ; }
Distance : 13

30
Tree	{ if ( assignLhsChild != null ) { return true ; } return parent . isGet ( assignLhsChild ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return parent . isGet ( assignLhsChild ) ; }
Distance : 5

31
Tree	{ if ( NodeUtil != null ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( NodeUtil != null ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 6

32
Tree	{ if ( NodeUtil != null ) { return true ; } return false ; }
Code	{ if ( NodeUtil != null ) { return true ; } return false ; }
Distance : 11

33
Tree	{ if ( parent != null ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Code	{ if ( parent != null ) { return true ; } return NodeUtil . isGet ( assignLhsChild ) ; }
Distance : 6

34
Tree	{ if ( assignLhsChild != null ) { return true ; } return isGet ( assignLhsChild , parent . isGet ( parent ) ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return isGet ( assignLhsChild , parent . isGet ( parent ) ) ; }
Distance : 6

35
Tree	{ if ( parent != null ) { return true ; } return false ; }
Code	{ if ( parent != null ) { return true ; } return false ; }
Distance : 11

36
Tree	{ if ( assignLhsChild != null ) { return true ; } return isGet ( assignLhsChild , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return isGet ( assignLhsChild , NodeUtil . isGet ( parent ) ) ; }
Distance : 5

37
Tree	{ if ( assignLhsChild != null ) { return false ; } return isGet ( assignLhsChild , parent . isGet ( parent ) ) ; }
Code	{ if ( assignLhsChild != null ) { return false ; } return isGet ( assignLhsChild , parent . isGet ( parent ) ) ; }
Distance : 7

38
Tree	{ if ( assignLhsChild != null ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 6

39
Tree	{ if ( assignLhsChild != null ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( assignLhsChild != null ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Distance : 5

40
Tree	{ if ( ! NodeUtil . isGet ( assignLhsChild , false ) ) { return true ; } return false ; }
Code	{ if ( ! NodeUtil . isGet ( assignLhsChild , false ) ) { return true ; } return false ; }
Distance : 18

41
Tree	{ if ( ! assignLhsChild . isGet ( parent , false ) ) { return false ; } return false ; }
Code	{ if ( ! assignLhsChild . isGet ( parent , false ) ) { return false ; } return false ; }
Distance : 19

42
Tree	{ if ( ! isGet ( assignLhsChild , NodeUtil , parent ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , NodeUtil , parent ) ) { return false ; } return false ; }
Distance : 19

43
Tree	{ if ( ! assignLhsChild ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 9

44
Tree	{ if ( ! isGet ( parent , parent , parent ) ) { return false ; } return false ; }
Code	{ if ( ! isGet ( parent , parent , parent ) ) { return false ; } return false ; }
Distance : 19

45
Tree	{ if ( ! assignLhsChild ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return isGet ( parent , NodeUtil . isGet ( parent ) ) ; }
Distance : 8

46
Tree	{ if ( ! assignLhsChild ) { return true ; } return isGet ( NodeUtil , parent . isGet ( parent ) ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return isGet ( NodeUtil , parent . isGet ( parent ) ) ; }
Distance : 9

47
Tree	{ if ( ! isGet ( assignLhsChild , NodeUtil , parent ) ) { return true ; } return false ; }
Code	{ if ( ! isGet ( assignLhsChild , NodeUtil , parent ) ) { return true ; } return false ; }
Distance : 18

48
Tree	{ if ( ! NodeUtil ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Code	{ if ( ! NodeUtil ) { return true ; } return isGet ( parent , parent . isGet ( parent ) ) ; }
Distance : 9

49
Tree	{ if ( ! assignLhsChild ) { return true ; } return isGet ( NodeUtil , NodeUtil . isGet ( parent ) ) ; }
Code	{ if ( ! assignLhsChild ) { return true ; } return isGet ( NodeUtil , NodeUtil . isGet ( parent ) ) ; }
Distance : 8

========================================================================


========================================================================
Example Number: 14
Parent Code is: 
int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
-------------------------------------------------------------------------------
Child code is: 
int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=indexOfDot}) (204{val==}) (32 (800{val=namespace}) (235{val=.}) (802{val=indexOf}) (214{val=(}) (13{val=CHAR_CONS}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=indexOfDot}) (204{val==}) (32 (800{val=namespace}) (235{val=.}) (802{val=lastIndexOf}) (214{val=(}) (13{val=CHAR_CONS}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/93/parent/src_com_google_javascript_jscomp_ProcessClosurePrimitives.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	int gmt [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int gmt [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

1
Tree	int FACTORIALS [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int FACTORIALS [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

2
Tree	int clonedIndices [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int clonedIndices [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

3
Tree	int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 4

4
Tree	boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

5
Tree	int lastHold [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int lastHold [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

6
Tree	double indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	double indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

7
Tree	final int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	final int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

8
Tree	int indexOfDot = namespace . indexOf ( namespace , null ) ;
Code	int indexOfDot = namespace . indexOf ( namespace , null ) ;
Distance : 4

9
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , LocalizedFormats.NO_DENSITY_FOR_THIS_DISTRIBUTION ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , LocalizedFormats.NO_DENSITY_FOR_THIS_DISTRIBUTION ) ;
Distance : 9

10
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , ToStringContext.TO_STRING ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , ToStringContext.TO_STRING ) ;
Distance : 9

11
Tree	int loc [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int loc [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

12
Tree	int indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 6

13
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , JUnitRule.Strictness.WARN ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , JUnitRule.Strictness.WARN ) ;
Distance : 9

14
Tree	long indexOfDot ;
Code	long indexOfDot ;
Distance : 8

15
Tree	byte indexOfDot = NUMBER_CONSTANT ;
Code	byte indexOfDot = NUMBER_CONSTANT ;
Distance : 7

16
Tree	byte indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	byte indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

17
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 1

18
Tree	long indexOfDot = NUMBER_CONSTANT ;
Code	long indexOfDot = NUMBER_CONSTANT ;
Distance : 7

19
Tree	boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

20
Tree	int indexOfDot ;
Code	int indexOfDot ;
Distance : 7

21
Tree	int indexOfDot = NUMBER_CONSTANT ;
Code	int indexOfDot = NUMBER_CONSTANT ;
Distance : 6

22
Tree	byte indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	byte indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

23
Tree	long indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	long indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

24
Tree	long indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	long indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

25
Tree	double indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	double indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

26
Tree	abstract int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	abstract int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

27
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 6

28
Tree	boolean indexOfDot = NUMBER_CONSTANT ;
Code	boolean indexOfDot = NUMBER_CONSTANT ;
Distance : 7

29
Tree	boolean indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	boolean indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

30
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Distance : 9

31
Tree	boolean indexOfDot = namespace . indexOf ( namespace , null ) ;
Code	boolean indexOfDot = namespace . indexOf ( namespace , null ) ;
Distance : 5

32
Tree	public boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	public boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

33
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , IncrementalCheckMode.GENERATE_IJS ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , IncrementalCheckMode.GENERATE_IJS ) ;
Distance : 9

34
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS , null ) ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS , null ) ;
Distance : 3

35
Tree	long indexOfDot = namespace . indexOf ( namespace , null ) ;
Code	long indexOfDot = namespace . indexOf ( namespace , null ) ;
Distance : 5

36
Tree	final double indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	final double indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

37
Tree	double indexOfDot = namespace . indexOf ( namespace , null ) ;
Code	double indexOfDot = namespace . indexOf ( namespace , null ) ;
Distance : 5

38
Tree	long indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	long indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 7

39
Tree	long indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	long indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

40
Tree	boolean indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	boolean indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 7

41
Tree	double indexOfDot = NUMBER_CONSTANT ;
Code	double indexOfDot = NUMBER_CONSTANT ;
Distance : 7

42
Tree	double indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	double indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

43
Tree	int indexOfDot = namespace . indexOf ( this , CHAR_CONS , NUMBER_CONSTANT ) ;
Code	int indexOfDot = namespace . indexOf ( this , CHAR_CONS , NUMBER_CONSTANT ) ;
Distance : 5

44
Tree	double indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	double indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 7

45
Tree	boolean indexOfDot ;
Code	boolean indexOfDot ;
Distance : 8

46
Tree	double indexOfDot ;
Code	double indexOfDot ;
Distance : 8

47
Tree	public int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	public int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

48
Tree	byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

49
Tree	byte indexOfDot ;
Code	byte indexOfDot ;
Distance : 8

========================================================================


========================================================================
Example Number: 15
Parent Code is: 
int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
-------------------------------------------------------------------------------
Child code is: 
int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=indexOfDot}) (204{val==}) (32 (800{val=namespace}) (235{val=.}) (802{val=indexOf}) (214{val=(}) (13{val=CHAR_CONS}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=indexOfDot}) (204{val==}) (32 (800{val=namespace}) (235{val=.}) (802{val=lastIndexOf}) (214{val=(}) (13{val=CHAR_CONS}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/92/parent/src_com_google_javascript_jscomp_ProcessClosurePrimitives.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	int gmt [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int gmt [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

1
Tree	int FACTORIALS [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int FACTORIALS [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

2
Tree	int clonedIndices [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int clonedIndices [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

3
Tree	int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 4

4
Tree	boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

5
Tree	int lastHold [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int lastHold [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

6
Tree	double indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	double indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

7
Tree	final int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	final int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

8
Tree	int indexOfDot = namespace . indexOf ( namespace , null ) ;
Code	int indexOfDot = namespace . indexOf ( namespace , null ) ;
Distance : 4

9
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , LocalizedFormats.NO_DENSITY_FOR_THIS_DISTRIBUTION ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , LocalizedFormats.NO_DENSITY_FOR_THIS_DISTRIBUTION ) ;
Distance : 9

10
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , ToStringContext.TO_STRING ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , ToStringContext.TO_STRING ) ;
Distance : 9

11
Tree	int loc [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int loc [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

12
Tree	int indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 6

13
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , JUnitRule.Strictness.WARN ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , JUnitRule.Strictness.WARN ) ;
Distance : 9

14
Tree	long indexOfDot ;
Code	long indexOfDot ;
Distance : 8

15
Tree	byte indexOfDot = NUMBER_CONSTANT ;
Code	byte indexOfDot = NUMBER_CONSTANT ;
Distance : 7

16
Tree	byte indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	byte indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

17
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 1

18
Tree	long indexOfDot = NUMBER_CONSTANT ;
Code	long indexOfDot = NUMBER_CONSTANT ;
Distance : 7

19
Tree	boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	boolean indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

20
Tree	int indexOfDot ;
Code	int indexOfDot ;
Distance : 7

21
Tree	int indexOfDot = NUMBER_CONSTANT ;
Code	int indexOfDot = NUMBER_CONSTANT ;
Distance : 6

22
Tree	byte indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	byte indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

23
Tree	long indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	long indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

24
Tree	long indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	long indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

25
Tree	double indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	double indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

26
Tree	abstract int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	abstract int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

27
Tree	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int indexOfDot = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 6

28
Tree	boolean indexOfDot = NUMBER_CONSTANT ;
Code	boolean indexOfDot = NUMBER_CONSTANT ;
Distance : 7

29
Tree	boolean indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	boolean indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

30
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Distance : 9

31
Tree	boolean indexOfDot = namespace . indexOf ( namespace , null ) ;
Code	boolean indexOfDot = namespace . indexOf ( namespace , null ) ;
Distance : 5

32
Tree	public boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	public boolean indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

33
Tree	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , IncrementalCheckMode.GENERATE_IJS ) ;
Code	int indexOfDot = namespace . indexOf ( this , namespace , indexOf () , IncrementalCheckMode.GENERATE_IJS ) ;
Distance : 9

34
Tree	int indexOfDot = namespace . indexOf ( CHAR_CONS , null ) ;
Code	int indexOfDot = namespace . indexOf ( CHAR_CONS , null ) ;
Distance : 3

35
Tree	long indexOfDot = namespace . indexOf ( namespace , null ) ;
Code	long indexOfDot = namespace . indexOf ( namespace , null ) ;
Distance : 5

36
Tree	final double indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	final double indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

37
Tree	double indexOfDot = namespace . indexOf ( namespace , null ) ;
Code	double indexOfDot = namespace . indexOf ( namespace , null ) ;
Distance : 5

38
Tree	long indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	long indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 7

39
Tree	long indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	long indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

40
Tree	boolean indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	boolean indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 7

41
Tree	double indexOfDot = NUMBER_CONSTANT ;
Code	double indexOfDot = NUMBER_CONSTANT ;
Distance : 7

42
Tree	double indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	double indexOfDot = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

43
Tree	int indexOfDot = namespace . indexOf ( this , CHAR_CONS , NUMBER_CONSTANT ) ;
Code	int indexOfDot = namespace . indexOf ( this , CHAR_CONS , NUMBER_CONSTANT ) ;
Distance : 5

44
Tree	double indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Code	double indexOfDot = namespace . indexOf ( this , namespace , NUMBER_CONSTANT ) ;
Distance : 7

45
Tree	boolean indexOfDot ;
Code	boolean indexOfDot ;
Distance : 8

46
Tree	double indexOfDot ;
Code	double indexOfDot ;
Distance : 8

47
Tree	public int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	public int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

48
Tree	byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Code	byte indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

49
Tree	byte indexOfDot ;
Code	byte indexOfDot ;
Distance : 8

========================================================================


========================================================================
Example Number: 16
Parent Code is: 
! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
-------------------------------------------------------------------------------
Child code is: 
! type . restrictByNotNullOrUndefined () . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (38 (207{val=!}) (32 (800{val=type}) (235{val=.}) (802{val=isSubtype}) (214{val=(}) (32 (800{val=typeRegistry}) (235{val=.}) (802{val=getNativeType}) (214{val=(}) (800{val=OBJECT_TYPE}) (215{val=)})) (215{val=)}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (38 (207{val=!}) (32 (32 (800{val=type}) (235{val=.}) (802{val=restrictByNotNullOrUndefined}) (216{val=()})) (235{val=.}) (802{val=isSubtype}) (214{val=(}) (32 (800{val=typeRegistry}) (235{val=.}) (802{val=getNativeType}) (214{val=(}) (800{val=OBJECT_TYPE}) (215{val=)})) (215{val=)}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/90/parent/src_com_google_javascript_jscomp_FunctionTypeBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	( NUMBER_CONSTANT * type . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Code	( NUMBER_CONSTANT * type . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Distance : 8

1
Tree	( NUMBER_CONSTANT * type . getNativeType ( OBJECT_TYPE ) )
Code	( NUMBER_CONSTANT * type . getNativeType ( OBJECT_TYPE ) )
Distance : 9

2
Tree	! type . isSubtype ( typeRegistry )
Code	! type . isSubtype ( typeRegistry )
Distance : 8

3
Tree	( NUMBER_CONSTANT * type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) )
Code	( NUMBER_CONSTANT * type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) )
Distance : 6

4
Tree	( NUMBER_CONSTANT * type . isSubtype ( typeRegistry ) )
Code	( NUMBER_CONSTANT * type . isSubtype ( typeRegistry ) )
Distance : 9

5
Tree	! isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 5

6
Tree	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Code	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( OBJECT_TYPE ) )
Distance : 10

7
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 3

8
Tree	! type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 4

9
Tree	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( typeRegistry ) )
Code	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( typeRegistry ) )
Distance : 10

10
Tree	! type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) , typeRegistry )
Code	! type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) , typeRegistry )
Distance : 6

11
Tree	! type . restrictByNotNullOrUndefined ( getNativeType ( typeRegistry ) )
Code	! type . restrictByNotNullOrUndefined ( getNativeType ( typeRegistry ) )
Distance : 6

12
Tree	! type . getNativeType ( getNativeType ( OBJECT_TYPE ) )
Code	! type . getNativeType ( getNativeType ( OBJECT_TYPE ) )
Distance : 6

13
Tree	! type . isSubtype ( typeRegistry ) . getNativeType ()
Code	! type . isSubtype ( typeRegistry ) . getNativeType ()
Distance : 8

14
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) . restrictByNotNullOrUndefined ()
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) . restrictByNotNullOrUndefined ()
Distance : 9

15
Tree	! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 3

16
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( OBJECT_TYPE )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( OBJECT_TYPE )
Distance : 5

17
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( ES8 )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( ES8 )
Distance : 6

18
Tree	! type . getNativeType ( typeRegistry ) . getNativeType ()
Code	! type . getNativeType ( typeRegistry ) . getNativeType ()
Distance : 9

19
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) , OBJECT_TYPE )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) , OBJECT_TYPE )
Distance : 5

20
Tree	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) )
Code	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) )
Distance : 7

21
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE )
Distance : 6

22
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ()
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ()
Distance : 8

23
Tree	! restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( typeRegistry ) )
Code	! restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( typeRegistry ) )
Distance : 6

24
Tree	! restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 5

25
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( typeRegistry ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( typeRegistry ) )
Distance : 4

26
Tree	( NUMBER_CONSTANT * type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Code	( NUMBER_CONSTANT * type . isSubtype ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Distance : 7

27
Tree	! type . getNativeType ( typeRegistry )
Code	! type . getNativeType ( typeRegistry )
Distance : 9

28
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry )
Distance : 8

29
Tree	( NUMBER_CONSTANT * type . isSubtype ( OBJECT_TYPE ) )
Code	( NUMBER_CONSTANT * type . isSubtype ( OBJECT_TYPE ) )
Distance : 9

30
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) . isSubtype ()
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) . isSubtype ()
Distance : 9

31
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN )
Distance : 6

32
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( TokenType.OPEN_ANGLE )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry ) . getNativeType ( TokenType.OPEN_ANGLE )
Distance : 6

33
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . isSubtype ( OBJECT_TYPE ) )
Distance : 4

34
Tree	! type . getNativeType ( getNativeType ( typeRegistry ) )
Code	! type . getNativeType ( getNativeType ( typeRegistry ) )
Distance : 7

35
Tree	! type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) , OBJECT_TYPE )
Code	! type . getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) , OBJECT_TYPE )
Distance : 6

36
Tree	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) , typeRegistry )
Code	! type . restrictByNotNullOrUndefined ( typeRegistry . getNativeType ( OBJECT_TYPE ) , typeRegistry )
Distance : 5

37
Tree	! type . restrictByNotNullOrUndefined ( getNativeType ( OBJECT_TYPE ) )
Code	! type . restrictByNotNullOrUndefined ( getNativeType ( OBJECT_TYPE ) )
Distance : 5

38
Tree	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Code	( NUMBER_CONSTANT * type . restrictByNotNullOrUndefined ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Distance : 8

39
Tree	! getNativeType ( typeRegistry . getNativeType ( typeRegistry ) )
Code	! getNativeType ( typeRegistry . getNativeType ( typeRegistry ) )
Distance : 7

40
Tree	! getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! getNativeType ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 6

41
Tree	type = ( typeRegistry ) typeRegistry . isSubtype ( typeRegistry )
Code	type = ( typeRegistry ) typeRegistry . isSubtype ( typeRegistry )
Distance : 10

42
Tree	! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) , OBJECT_TYPE )
Code	! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) , OBJECT_TYPE )
Distance : 5

43
Tree	type = ( typeRegistry ) typeRegistry . isSubtype ( OBJECT_TYPE )
Code	type = ( typeRegistry ) typeRegistry . isSubtype ( OBJECT_TYPE )
Distance : 9

44
Tree	! type . isSubtype ( getNativeType ( OBJECT_TYPE ) )
Code	! type . isSubtype ( getNativeType ( OBJECT_TYPE ) )
Distance : 5

45
Tree	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE )
Code	! type . restrictByNotNullOrUndefined ( OBJECT_TYPE )
Distance : 8

46
Tree	! type . restrictByNotNullOrUndefined ( type )
Code	! type . restrictByNotNullOrUndefined ( type )
Distance : 9

47
Tree	type = ( typeRegistry ) typeRegistry . restrictByNotNullOrUndefined ( typeRegistry )
Code	type = ( typeRegistry ) typeRegistry . restrictByNotNullOrUndefined ( typeRegistry )
Distance : 10

48
Tree	type = ( type ) typeRegistry . isSubtype ( typeRegistry )
Code	type = ( type ) typeRegistry . isSubtype ( typeRegistry )
Distance : 10

49
Tree	type = ( typeRegistry ) typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE )
Code	type = ( typeRegistry ) typeRegistry . restrictByNotNullOrUndefined ( OBJECT_TYPE )
Distance : 9

========================================================================


========================================================================
Example Number: 17
Parent Code is: 
return true ;
-------------------------------------------------------------------------------
Child code is: 
return false ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (9{val=true}) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (9{val=false}) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/86/parent/src_com_google_javascript_jscomp_NodeUtil.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 50
Correct
========================================================================
True

0
Tree	return parent . abs ( parent ) ? null : parent ;
Code	return parent . abs ( parent ) ? null : parent ;
Distance : 10

1
Tree	return FastFourierTransformer . clone ( parent ) ? null : tolerance ;
Code	return FastFourierTransformer . clone ( parent ) ? null : tolerance ;
Distance : 10

2
Tree	return FastFourierTransformer + obj2 . clone ( parent ) ;
Code	return FastFourierTransformer + obj2 . clone ( parent ) ;
Distance : 8

3
Tree	return true ;
Code	return true ;
Distance : 1

4
Tree	return FastFourierTransformer ;
Code	return FastFourierTransformer ;
Distance : 1

5
Tree	return parent ;
Code	return parent ;
Distance : 1

6
Tree	return STRING_CONSTANT + callNode + STRING_CONSTANT + callNode ;
Code	return STRING_CONSTANT + callNode + STRING_CONSTANT + callNode ;
Distance : 7

7
Tree	return NodeUtil ;
Code	return NodeUtil ;
Distance : 1

8
Tree	return tolerance ;
Code	return tolerance ;
Distance : 1

9
Tree	return TransformUtils ;
Code	return TransformUtils ;
Distance : 1

10
Tree	return this == tolerance ;
Code	return this == tolerance ;
Distance : 3

11
Tree	return this == scopeCreator ;
Code	return this == scopeCreator ;
Distance : 3

12
Tree	return STRING_CONSTANT + rawType + STRING_CONSTANT + callNode ;
Code	return STRING_CONSTANT + rawType + STRING_CONSTANT + callNode ;
Distance : 7

13
Tree	return FastFourierTransformer ? f.length : FunctionFlavor.NORMAL ;
Code	return FastFourierTransformer ? f.length : FunctionFlavor.NORMAL ;
Distance : 5

14
Tree	return STRING_CONSTANT + callNode + STRING_CONSTANT + expr ;
Code	return STRING_CONSTANT + callNode + STRING_CONSTANT + expr ;
Distance : 7

15
Tree	return STRING_CONSTANT + ref + STRING_CONSTANT + callNode ;
Code	return STRING_CONSTANT + ref + STRING_CONSTANT + callNode ;
Distance : 7

16
Tree	return parent + obj2 . clone ( parent ) ;
Code	return parent + obj2 . clone ( parent ) ;
Distance : 8

17
Tree	return f.length ;
Code	return f.length ;
Distance : 1

18
Tree	return this == rawType ;
Code	return this == rawType ;
Distance : 3

19
Tree	return FastFourierTransformer . abs () ? null : parent ;
Code	return FastFourierTransformer . abs () ? null : parent ;
Distance : 8

20
Tree	return STRING_CONSTANT + callNode + STRING_CONSTANT + tolerance ;
Code	return STRING_CONSTANT + callNode + STRING_CONSTANT + tolerance ;
Distance : 7

21
Tree	return tolerance ? f.length : FunctionFlavor.NORMAL ;
Code	return tolerance ? f.length : FunctionFlavor.NORMAL ;
Distance : 5

22
Tree	return parent ? f.length : FunctionFlavor.NORMAL ;
Code	return parent ? f.length : FunctionFlavor.NORMAL ;
Distance : 5

23
Tree	return TransformUtils ? f.length : FunctionFlavor.NORMAL ;
Code	return TransformUtils ? f.length : FunctionFlavor.NORMAL ;
Distance : 5

24
Tree	return FastFourierTransformer . abs () ? null : blind ;
Code	return FastFourierTransformer . abs () ? null : blind ;
Distance : 8

25
Tree	return Color.BLACK ;
Code	return Color.BLACK ;
Distance : 1

26
Tree	return this == randomData ;
Code	return this == randomData ;
Distance : 3

27
Tree	return FastFourierTransformer . abs ( parent ) ;
Code	return FastFourierTransformer . abs ( parent ) ;
Distance : 6

28
Tree	return NodeUtil.MATCH_NOT_FUNCTION ;
Code	return NodeUtil.MATCH_NOT_FUNCTION ;
Distance : 1

29
Tree	return error.description ;
Code	return error.description ;
Distance : 1

30
Tree	return Double.MIN_VALUE ;
Code	return Double.MIN_VALUE ;
Distance : 1

31
Tree	return this == FastMath ;
Code	return this == FastMath ;
Distance : 3

32
Tree	return parent . abs ( parent ) ;
Code	return parent . abs ( parent ) ;
Distance : 6

33
Tree	return parent . abs () ? null : parent ;
Code	return parent . abs () ? null : parent ;
Distance : 8

34
Tree	return NodeUtil ? f.length : FunctionFlavor.NORMAL ;
Code	return NodeUtil ? f.length : FunctionFlavor.NORMAL ;
Distance : 5

35
Tree	return false ;
Code	return false ;
Distance : 0

36
Tree	return FastFourierTransformer . clone ( parent ) ;
Code	return FastFourierTransformer . clone ( parent ) ;
Distance : 6

37
Tree	return FastFourierTransformer . abs ( parent ) ? null : parent ;
Code	return FastFourierTransformer . abs ( parent ) ? null : parent ;
Distance : 10

38
Tree	return FastFourierTransformer . abs () ? null : tolerance ;
Code	return FastFourierTransformer . abs () ? null : tolerance ;
Distance : 8

39
Tree	return parent . abs () ? null : blind ;
Code	return parent . abs () ? null : blind ;
Distance : 8

40
Tree	return parent . abs ( parent ) ? null : tolerance ;
Code	return parent . abs ( parent ) ? null : tolerance ;
Distance : 10

41
Tree	return FastFourierTransformer . abs ( parent ) ? null : tolerance ;
Code	return FastFourierTransformer . abs ( parent ) ? null : tolerance ;
Distance : 10

42
Tree	return NodeUtil . abs ( parent ) ;
Code	return NodeUtil . abs ( parent ) ;
Distance : 6

43
Tree	return parent + obj2 . abs ( parent ) ;
Code	return parent + obj2 . abs ( parent ) ;
Distance : 8

44
Tree	return FastFourierTransformer + obj2 . clone ( tolerance ) ;
Code	return FastFourierTransformer + obj2 . clone ( tolerance ) ;
Distance : 8

45
Tree	return true ; value
Code	return true ; value
Distance : 2

46
Tree	return parent . clone ( parent ) ;
Code	return parent . clone ( parent ) ;
Distance : 6

47
Tree	return true ; i
Code	return true ; i
Distance : 2

48
Tree	return true ; +
Code	return true ; +
Distance : 2

49
Tree	return FastFourierTransformer + obj2 . abs ( parent ) ;
Code	return FastFourierTransformer + obj2 . abs ( parent ) ;
Distance : 8

========================================================================


========================================================================
Example Number: 18
Parent Code is: 
return TernaryValue.TRUE ;
-------------------------------------------------------------------------------
Child code is: 
return TernaryValue.UNKNOWN ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (40{val=TernaryValue.TRUE}) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (40{val=TernaryValue.UNKNOWN}) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/75/parent/src_com_google_javascript_jscomp_NodeUtil.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 50
Correct
========================================================================
True

0
Tree	return EscapeUtils ;
Code	return EscapeUtils ;
Distance : 1

1
Tree	return TernaryValue.UNKNOWN ; i
Code	return TernaryValue.UNKNOWN ; i
Distance : 1

2
Tree	return TernaryValue.UNKNOWN ; +
Code	return TernaryValue.UNKNOWN ; +
Distance : 1

3
Tree	return STRING_CONSTANT + STRING_CONSTANT ; void
Code	return STRING_CONSTANT + STRING_CONSTANT ; void
Distance : 4

4
Tree	return STRING_CONSTANT + STRING_CONSTANT ;
Code	return STRING_CONSTANT + STRING_CONSTANT ;
Distance : 3

5
Tree	return y2 ;
Code	return y2 ;
Distance : 1

6
Tree	return this . commonTypes . TRUTHY ;
Code	return this . commonTypes . TRUTHY ;
Distance : 5

7
Tree	return TernaryValue.UNKNOWN ;
Code	return TernaryValue.UNKNOWN ;
Distance : 0

8
Tree	return parent . createsScope () ? null : parent ;
Code	return parent . createsScope () ? null : parent ;
Distance : 8

9
Tree	return parent . createsScope () ? null : obj1 ;
Code	return parent . createsScope () ? null : obj1 ;
Distance : 8

10
Tree	return parent . createsScope () . populationSize ;
Code	return parent . createsScope () . populationSize ;
Distance : 6

11
Tree	return this . printExterns . TRUTHY ;
Code	return this . printExterns . TRUTHY ;
Distance : 5

12
Tree	return this . maxY . createsScope () ;
Code	return this . maxY . createsScope () ;
Distance : 6

13
Tree	return this . printExterns . createsScope () ;
Code	return this . printExterns . createsScope () ;
Distance : 6

14
Tree	return this . commonTypes . incrementalCheckMode () ;
Code	return this . commonTypes . incrementalCheckMode () ;
Distance : 6

15
Tree	return null ;
Code	return null ;
Distance : 1

16
Tree	return parent ;
Code	return parent ;
Distance : 1

17
Tree	return inMemoryClassObjects ;
Code	return inMemoryClassObjects ;
Distance : 1

18
Tree	return numberOfTrials ;
Code	return numberOfTrials ;
Distance : 1

19
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

20
Tree	return inMemoryClassObjects . createsScope () ? null : obj1 ;
Code	return inMemoryClassObjects . createsScope () ? null : obj1 ;
Distance : 8

21
Tree	return inMemoryClassObjects . createsScope () . populationSize ;
Code	return inMemoryClassObjects . createsScope () . populationSize ;
Distance : 6

22
Tree	return this . defaultOutlineStroke . TRUTHY ;
Code	return this . defaultOutlineStroke . TRUTHY ;
Distance : 5

23
Tree	return this . defaultOutlineStroke . createsScope () ;
Code	return this . defaultOutlineStroke . createsScope () ;
Distance : 6

24
Tree	return parent . createsScope () . maxY ;
Code	return parent . createsScope () . maxY ;
Distance : 6

25
Tree	return parent . createsScope () . TRUTHY ;
Code	return parent . createsScope () . TRUTHY ;
Distance : 6

26
Tree	return super(); ;
Code	return super(); ;
Distance : 1

27
Tree	return numberOfTrials . createsScope () ? null : parent ;
Code	return numberOfTrials . createsScope () ? null : parent ;
Distance : 8

28
Tree	return parent . createsScope () . scalar ;
Code	return parent . createsScope () . scalar ;
Distance : 6

29
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; compiler
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; compiler
Distance : 14

30
Tree	return TernaryValue.UNKNOWN ; value
Code	return TernaryValue.UNKNOWN ; value
Distance : 1

31
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; void
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; void
Distance : 14

32
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; e
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; e
Distance : 14

33
Tree	return STRING_CONSTANT + STRING_CONSTANT ; T
Code	return STRING_CONSTANT + STRING_CONSTANT ; T
Distance : 4

34
Tree	return return; ;
Code	return return; ;
Distance : 1

35
Tree	return continue; ;
Code	return continue; ;
Distance : 1

36
Tree	return STRING_CONSTANT + STRING_CONSTANT ; compiler
Code	return STRING_CONSTANT + STRING_CONSTANT ; compiler
Distance : 4

37
Tree	return break; ;
Code	return break; ;
Distance : 1

38
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; T
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; T
Distance : 14

39
Tree	return STRING_CONSTANT + STRING_CONSTANT ; e
Code	return STRING_CONSTANT + STRING_CONSTANT ; e
Distance : 4

40
Tree	return this . maxY . TRUTHY ;
Code	return this . maxY . TRUTHY ;
Distance : 5

41
Tree	return TernaryValue.TRUE ;
Code	return TernaryValue.TRUE ;
Distance : 1

42
Tree	return parent . createsScope ( STRING_CONSTANT ) ;
Code	return parent . createsScope ( STRING_CONSTANT ) ;
Distance : 6

43
Tree	return this . commonTypes . createsScope () ;
Code	return this . commonTypes . createsScope () ;
Distance : 6

44
Tree	return inMemoryClassObjects . createsScope ( STRING_CONSTANT ) ;
Code	return inMemoryClassObjects . createsScope ( STRING_CONSTANT ) ;
Distance : 6

45
Tree	return inMemoryClassObjects . createsScope () ? null : parent ;
Code	return inMemoryClassObjects . createsScope () ? null : parent ;
Distance : 8

46
Tree	return numberOfTrials . createsScope ( STRING_CONSTANT ) ;
Code	return numberOfTrials . createsScope ( STRING_CONSTANT ) ;
Distance : 6

47
Tree	return EscapeUtils . createsScope ( STRING_CONSTANT ) ;
Code	return EscapeUtils . createsScope ( STRING_CONSTANT ) ;
Distance : 6

48
Tree	return y2 . createsScope ( STRING_CONSTANT ) ;
Code	return y2 . createsScope ( STRING_CONSTANT ) ;
Distance : 6

49
Tree	return this . commonTypes . maxY ;
Code	return this . commonTypes . maxY ;
Distance : 5

========================================================================


========================================================================
Example Number: 19
Parent Code is: 
if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( c > NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=c}) (231{val=>}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=c}) (252{val=<=}) (34{val=NUMBER_CONSTANT}))) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=sb}) (235{val=.}) (802{val=append}) (214{val=(}) (800{val=c}) (215{val=)})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (21 (32 (802{val=appendHexJavaScriptRepresentation}) (214{val=(}) (800{val=sb}) (234{val=,}) (800{val=c}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=c}) (231{val=>}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=c}) (230{val=<}) (34{val=NUMBER_CONSTANT}))) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=sb}) (235{val=.}) (802{val=append}) (214{val=(}) (800{val=c}) (215{val=)})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (21 (32 (802{val=appendHexJavaScriptRepresentation}) (214{val=(}) (800{val=sb}) (234{val=,}) (800{val=c}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/73/parent/src_com_google_javascript_jscomp_CodeGenerator.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { c . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { c . append ( c ) ; }
Distance : 10

1
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 8

2
Tree	if ( c >= NUMBER_CONSTANT ) { sb = c - sb ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = c - sb ; } else { sb . append ( c ) ; }
Distance : 14

3
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 4

4
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { sb . append ( c ) ; }
Distance : 13

5
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 8

6
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 5

7
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 5

8
Tree	if ( c >= NUMBER_CONSTANT ) { sb = c - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = c - c ; } else { sb . append ( c ) ; }
Distance : 13

9
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 6

10
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( c , c ) ; }
Distance : 5

11
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 7

12
Tree	if ( c >= NUMBER_CONSTANT && c != super(); ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != super(); ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 7

13
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 5

14
Tree	if ( c >= NUMBER_CONSTANT && c != break; ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != break; ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 6

15
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb = - c ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb = - c ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 8

16
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 8

17
Tree	if ( c == TypeInferenceMode.NEITHER ) { sb = c - c ; } else { sb . append ( c ) ; }
Code	if ( c == TypeInferenceMode.NEITHER ) { sb = c - c ; } else { sb . append ( c ) ; }
Distance : 14

18
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 11

19
Tree	if ( c == DecompositionType.DECOMPOSABLE ) { sb = c - c ; } else { sb . append ( c ) ; }
Code	if ( c == DecompositionType.DECOMPOSABLE ) { sb = c - c ; } else { sb . append ( c ) ; }
Distance : 14

20
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { append ( c , c ) ; }
Distance : 9

21
Tree	if ( c == StepNormalizerMode.MULTIPLES ) { sb = c - c ; } else { sb . append ( c ) ; }
Code	if ( c == StepNormalizerMode.MULTIPLES ) { sb = c - c ; } else { sb . append ( c ) ; }
Distance : 14

22
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = metadata.superClassNameNode ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = metadata.superClassNameNode ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 8

23
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 4

24
Tree	if ( c >= NUMBER_CONSTANT && c != super(); ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != super(); ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 6

25
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 6

26
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 10

27
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { c . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - c ; } else { c . append ( c ) ; }
Distance : 13

28
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 8

29
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , sb ) ; }
Distance : 5

30
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 4

31
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb ( c , c ) ; } else { append ( c , c ) ; }
Distance : 7

32
Tree	if ( c == PropertyRenamingPolicy.ALL_UNQUOTED ) { sb = c - c ; } else { sb . append ( c ) ; }
Code	if ( c == PropertyRenamingPolicy.ALL_UNQUOTED ) { sb = c - c ; } else { sb . append ( c ) ; }
Distance : 14

33
Tree	if ( c >= NUMBER_CONSTANT ) { sb = sb - sb ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = sb - sb ; } else { sb . append ( c ) ; }
Distance : 14

34
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { append ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { append ( c , sb ) ; }
Distance : 9

35
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { append ( c , c ) ; }
Distance : 9

36
Tree	if ( c == TypeInferenceMode.DISABLED ) { sb = c - c ; } else { sb . append ( c ) ; }
Code	if ( c == TypeInferenceMode.DISABLED ) { sb = c - c ; } else { sb . append ( c ) ; }
Distance : 14

37
Tree	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && sb <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 4

38
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { append ( c , c ) ; }
Distance : 5

39
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { append ( c , c ) ; }
Distance : 8

40
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , sb ) ; }
Distance : 6

41
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , sb ) ; } else { append ( c , c ) ; }
Distance : 6

42
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c = - c ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { c = - c ; } else { sb . append ( c ) ; }
Distance : 11

43
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - sb ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - sb ; } else { sb . append ( c ) ; }
Distance : 11

44
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 7

45
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 3

46
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 7

47
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 8

48
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { appendHexJavaScriptRepresentation ( c , c ) ; }
Distance : 6

49
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { append ( c , c ) ; }
Distance : 4

========================================================================


========================================================================
Example Number: 20
Parent Code is: 
{ defineSlot ( astParameter , functionNode , jsDocParameter . getJSType () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
-------------------------------------------------------------------------------
Child code is: 
{ defineSlot ( astParameter , functionNode , jsDocParameter . getJSType () , false ) ; jsDocParameter = jsDocParameter . getNext () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=defineSlot}) (214{val=(}) (800{val=astParameter}) (234{val=,}) (800{val=functionNode}) (234{val=,}) (32 (800{val=jsDocParameter}) (235{val=.}) (802{val=getJSType}) (216{val=()})) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (21 (7 (800{val=jsDocParameter}) (204{val==}) (32 (800{val=jsDocParameter}) (235{val=.}) (802{val=getNext}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=defineSlot}) (214{val=(}) (800{val=astParameter}) (234{val=,}) (800{val=functionNode}) (234{val=,}) (32 (800{val=jsDocParameter}) (235{val=.}) (802{val=getJSType}) (216{val=()})) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (21 (7 (800{val=jsDocParameter}) (204{val==}) (32 (800{val=jsDocParameter}) (235{val=.}) (802{val=getNext}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/70/parent/src_com_google_javascript_jscomp_TypedScopeCreator.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , DoesNothing ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , DoesNothing ) ; astParameter = astParameter . getNext () ; }
Distance : 11

1
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , round ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , round ) ; astParameter = astParameter . getNext () ; }
Distance : 11

2
Tree	{ astParameter . defineSlot () ; jsDocParameter = astParameter . getJSType () ; }
Code	{ astParameter . defineSlot () ; jsDocParameter = astParameter . getJSType () ; }
Distance : 12

3
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , defineSlot ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , defineSlot ) ; astParameter = astParameter . getNext () ; }
Distance : 11

4
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , LocalizedFormats.NO_RESULT_AVAILABLE ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , LocalizedFormats.NO_RESULT_AVAILABLE ) ; astParameter = astParameter . getNext () ; }
Distance : 11

5
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , true ) ; astParameter = astParameter . getNext () ; }
Distance : 5

6
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 9

7
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , false ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , false ) ; astParameter = astParameter . getNext () ; }
Distance : 4

8
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , true ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 4

9
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 8

10
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , astParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 8

11
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , astParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , astParameter . getNext () ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 7

12
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , jsDocParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , jsDocParameter . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 8

13
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , astParameter . getNext () ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , astParameter . getNext () ) ; functionNode = astParameter . getNext () ; }
Distance : 8

14
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , functionNode . getNext () ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , functionNode . getNext () ) ; astParameter = astParameter . getNext () ; }
Distance : 8

15
Tree	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , astParameter . getNext () , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , astParameter . getNext () , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 13

16
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Distance : 9

17
Tree	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , jsDocParameter . getNext () , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , jsDocParameter . getNext () , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 13

18
Tree	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , astParameter . getNext () , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , astParameter . getNext () , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 12

19
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , true ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , true ) ; functionNode = astParameter . getNext () ; }
Distance : 5

20
Tree	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , astParameter . getNext () , jsDocParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , astParameter . getNext () , jsDocParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 13

21
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , false ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , false ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 3

22
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 8

23
Tree	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , astParameter . getNext () , astParameter ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , astParameter . getNext () , astParameter ) ; functionNode = astParameter . getNext () ; }
Distance : 13

24
Tree	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; jsDocParameter = jsDocParameter . getNext () ; }
Distance : 7

25
Tree	{ astParameter . defineSlot ( astParameter . getNext () , astParameter . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , astParameter . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 9

26
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , astParameter . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , astParameter . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 9

27
Tree	{ functionNode . defineSlot ( astParameter . getNext () , astParameter . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getNext () , astParameter . getJSType () , astParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 9

28
Tree	{ astParameter . defineSlot ( astParameter . getNext () , astParameter . getJSType () , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , astParameter . getJSType () , astParameter ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 8

29
Tree	{ astParameter . defineSlot ( astParameter . getNext () , astParameter . getJSType () , jsDocParameter ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , astParameter . getJSType () , jsDocParameter ) ; astParameter = astParameter . getNext () ; }
Distance : 9

30
Tree	{ astParameter . defineSlot () ; astParameter = astParameter . getJSType () ; }
Code	{ astParameter . defineSlot () ; astParameter = astParameter . getJSType () ; }
Distance : 13

31
Tree	{ astParameter . defineSlot () ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () ; astParameter = astParameter . getNext () ; }
Distance : 12

32
Tree	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , null , null ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , null , null ) ; astParameter = astParameter . getNext () ; }
Distance : 10

33
Tree	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot () . getJSType ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR ) ; astParameter = astParameter . getNext () ; }
Distance : 11

34
Tree	{ functionNode . defineSlot () ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot () ; astParameter = astParameter . getNext () ; }
Distance : 12

35
Tree	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , null , null ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , null , null ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

36
Tree	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , null , null ) ; functionNode = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , null , null ) ; functionNode = astParameter . getNext () ; }
Distance : 10

37
Tree	{ functionNode . defineSlot () ; astParameter = astParameter . getJSType () ; }
Code	{ functionNode . defineSlot () ; astParameter = astParameter . getJSType () ; }
Distance : 13

38
Tree	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , functionNode . getJSType () , null , null ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , functionNode . getJSType () , null , null ) ; astParameter = astParameter . getNext () ; }
Distance : 10

39
Tree	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , null , null ) ; astParameter = jsDocParameter . getNext () ; }
Code	{ defineSlot ( astParameter , functionNode , astParameter , astParameter , astParameter . getJSType () , null , null ) ; astParameter = jsDocParameter . getNext () ; }
Distance : 9

40
Tree	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , this ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , this ) ; astParameter = astParameter . getNext () ; }
Distance : 7

41
Tree	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 10

42
Tree	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , this ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , this ) ; functionNode = astParameter . getNext () ; }
Distance : 7

43
Tree	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 10

44
Tree	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , this ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter , functionNode . getJSType () , this ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 6

45
Tree	{ functionNode . defineSlot ( astParameter , functionNode . getJSType () , this ) ; astParameter = astParameter . getNext () ; }
Code	{ functionNode . defineSlot ( astParameter , functionNode . getJSType () , this ) ; astParameter = astParameter . getNext () ; }
Distance : 7

46
Tree	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; jsDocParameter = astParameter . getNext () ; }
Distance : 9

47
Tree	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , this ) ; astParameter = astParameter . getNext () ; }
Code	{ defineSlot . defineSlot ( astParameter , functionNode . getJSType () , this ) ; astParameter = astParameter . getNext () ; }
Distance : 7

48
Tree	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getJSType () , STRING_CONSTANT ) ; astParameter = astParameter . getNext () ; }
Distance : 9

49
Tree	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Code	{ astParameter . defineSlot ( astParameter . getNext () , STRING_CONSTANT ) ; functionNode = astParameter . getNext () ; }
Distance : 10

========================================================================


========================================================================
Example Number: 21
Parent Code is: 
if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( token != JsDocToken.LP ) { restoreLookAhead ( token ) ; return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=token}) (242{val=!=}) (40{val=JsDocToken.LP})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=reportTypeSyntaxWarning}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=token}) (242{val=!=}) (40{val=JsDocToken.LP})) (215{val=)}) (8 (218{val={}) (21 (32 (802{val=restoreLookAhead}) (214{val=(}) (800{val=token}) (215{val=)})) (227{val=;})) (41 (329{val=return}) (32 (802{val=reportTypeSyntaxWarning}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/68/parent/src_com_google_javascript_jscomp_parsing_JsDocInfoParser.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( token ) ; }
Code	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( token ) ; }
Distance : 7

1
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token ) ; }
Distance : 7

2
Tree	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

3
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

4
Tree	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

5
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

6
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token ) ; }
Distance : 7

7
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

8
Tree	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

9
Tree	if ( token != super(); ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != super(); ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

10
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

11
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

12
Tree	if ( token != continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

13
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

14
Tree	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token ) ; }
Code	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token ) ; }
Distance : 7

15
Tree	if ( token != break; ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Code	if ( token != break; ) { return token . reportTypeSyntaxWarning ( NUMBER_CONSTANT ) ; }
Distance : 7

16
Tree	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

17
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

18
Tree	if ( token != continue; ) { return token . token ( token ) ; }
Code	if ( token != continue; ) { return token . token ( token ) ; }
Distance : 8

19
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

20
Tree	if ( token != break; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != break; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

21
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

22
Tree	if ( token != null ) { return token . token ( token ) ; }
Code	if ( token != null ) { return token . token ( token ) ; }
Distance : 8

23
Tree	if ( token != return; ) { return token . token ( token ) ; }
Code	if ( token != return; ) { return token . token ( token ) ; }
Distance : 8

24
Tree	if ( token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

25
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

26
Tree	if ( token != continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

27
Tree	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != null ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

28
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

29
Tree	if ( token != super(); ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != super(); ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

30
Tree	if ( token != continue; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != continue; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

31
Tree	if ( token != continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != continue; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

32
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( token , STRING_CONSTANT ) ; }
Distance : 8

33
Tree	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

34
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

35
Tree	if ( token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

36
Tree	if ( token != super(); ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != super(); ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

37
Tree	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != super(); ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

38
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

39
Tree	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != break; ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

40
Tree	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != return; ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

41
Tree	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != return; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

42
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

43
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token , NUMBER_CONSTANT , token ) ; }
Distance : 11

44
Tree	if ( token != null ) { return token . reportTypeSyntaxWarning ( token ) ; }
Code	if ( token != null ) { return token . reportTypeSyntaxWarning ( token ) ; }
Distance : 7

45
Tree	if ( token != break; ) { return token . token ( token ) ; }
Code	if ( token != break; ) { return token . token ( token ) ; }
Distance : 8

46
Tree	if ( token != super(); ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != super(); ) { return reportTypeSyntaxWarning ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

47
Tree	if ( token != super(); ) { return token . token ( token ) ; }
Code	if ( token != super(); ) { return token . token ( token ) ; }
Distance : 8

48
Tree	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Code	if ( token != continue; ) { return token . reportTypeSyntaxWarning ( token , JsDocToken.LP ) ; }
Distance : 9

49
Tree	if ( token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Code	if ( token != break; ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
Distance : 6

========================================================================


========================================================================
Example Number: 22
Parent Code is: 
{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ initCompilerOptionsIfTesting () ; return toSource ( n , null , true ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=initCompilerOptionsIfTesting}) (216{val=()})) (227{val=;})) (41 (329{val=return}) (32 (802{val=toSource}) (214{val=(}) (800{val=n}) (234{val=,}) (500{val=null}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=initCompilerOptionsIfTesting}) (216{val=()})) (227{val=;})) (41 (329{val=return}) (32 (802{val=toSource}) (214{val=(}) (800{val=n}) (234{val=,}) (500{val=null}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/64/parent/src_com_google_javascript_jscomp_Compiler.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( Any.ANY , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( Any.ANY , n ) ; }
Distance : 4

1
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( STRING_CONSTANT , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( STRING_CONSTANT , n ) ; }
Distance : 4

2
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; }
Distance : 5

3
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , n ) ; }
Distance : 5

4
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
Distance : 2

5
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( STRING_CONSTANT , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( STRING_CONSTANT , n ) ; }
Distance : 4

6
Tree	{ toSource () ; return toSource ( Any.ANY , n ) ; }
Code	{ toSource () ; return toSource ( Any.ANY , n ) ; }
Distance : 5

7
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
Distance : 2

8
Tree	{ toSource () ; return toSource ( n , null ) ; }
Code	{ toSource () ; return toSource ( n , null ) ; }
Distance : 3

9
Tree	{ toSource () ; return toSource ( STRING_CONSTANT , n ) ; }
Code	{ toSource () ; return toSource ( STRING_CONSTANT , n ) ; }
Distance : 5

10
Tree	{ toSource () ; return toSource ( Any.ANY , n ) ; }
Code	{ toSource () ; return toSource ( Any.ANY , n ) ; }
Distance : 5

11
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( Any.ANY , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( Any.ANY , n ) ; }
Distance : 4

12
Tree	{ toSource () ; return toSource ( n , null ) ; }
Code	{ toSource () ; return toSource ( n , null ) ; }
Distance : 3

13
Tree	{ toSource () ; return toSource ( null , n . null ( n ) ) ; }
Code	{ toSource () ; return toSource ( null , n . null ( n ) ) ; }
Distance : 7

14
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; }
Distance : 4

15
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( java.util.Locale.US ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( java.util.Locale.US ) ; }
Distance : 6

16
Tree	{ toSource () ; return toSource ( n , n , n , n ) ; }
Code	{ toSource () ; return toSource ( n , n , n , n ) ; }
Distance : 5

17
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . null ( n ) , null ) ; }
Distance : 5

18
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 6

19
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n ) ; }
Distance : 6

20
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n ) ; }
Distance : 6

21
Tree	{ toSource () ; return toSource ( n . null ( n ) , null ) ; }
Code	{ toSource () ; return toSource ( n . null ( n ) , null ) ; }
Distance : 6

22
Tree	{ toSource () ; return n . toSource ( this , n ) ; }
Code	{ toSource () ; return n . toSource ( this , n ) ; }
Distance : 7

23
Tree	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( n . null ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( n . null ( n ) , null ) ; }
Distance : 8

24
Tree	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 9

25
Tree	{ toSource () ; return n . toSource ( this , n ) ; }
Code	{ toSource () ; return n . toSource ( this , n ) ; }
Distance : 7

26
Tree	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( n . null ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( n . null ( n ) , null ) ; }
Distance : 8

27
Tree	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ initCompilerOptionsIfTesting ( n ) ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 9

28
Tree	{ toSource ( n ) ; return toSource ( n . null ( n ) , null ) ; }
Code	{ toSource ( n ) ; return toSource ( n . null ( n ) , null ) ; }
Distance : 9

29
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , super(); ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , super(); ) ; }
Distance : 3

30
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } !=
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; } !=
Distance : 5

31
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( STRING_CONSTANT , n ) ; } !=
Code	{ initCompilerOptionsIfTesting () ; return toSource ( STRING_CONSTANT , n ) ; } !=
Distance : 5

32
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n ) ; } !=
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( this , n ) ; } !=
Distance : 7

33
Tree	{ toSource () ; return toSource ( n . toSource ( n ) , null ) ; }
Code	{ toSource () ; return toSource ( n . toSource ( n ) , null ) ; }
Distance : 7

34
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . , ( n ) , n ) ; }
Distance : 5

35
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n . toSource ( n ) , n ) ; }
Distance : 6

36
Tree	{ toSource () ; return toSource ( n . , ( n ) , n ) ; }
Code	{ toSource () ; return toSource ( n . , ( n ) , n ) ; }
Distance : 6

37
Tree	{ toSource () ; return n . toSource ( Any.ANY ) ; }
Code	{ toSource () ; return n . toSource ( Any.ANY ) ; }
Distance : 7

38
Tree	{ toSource () ; return toSource ( STRING_CONSTANT , n ) ; }
Code	{ toSource () ; return toSource ( STRING_CONSTANT , n ) ; }
Distance : 5

39
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( ComposableFunction.SQRT , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( ComposableFunction.SQRT , n ) ; }
Distance : 4

40
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( n , n , n , n ) ; }
Distance : 4

41
Tree	{ toSource () ; return toSource ( n . toSource ( n ) , n ) ; }
Code	{ toSource () ; return toSource ( n . toSource ( n ) , n ) ; }
Distance : 7

42
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . null ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . null ( n ) ) ; }
Distance : 6

43
Tree	{ toSource () ; return toSource ( n , n , n , n ) ; }
Code	{ toSource () ; return toSource ( n , n , n , n ) ; }
Distance : 5

44
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( Any.ANY ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( Any.ANY ) ; }
Distance : 6

45
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; }
Distance : 7

46
Tree	{ toSource () ; return toSource ( null , n . toSource ( n ) ) ; }
Code	{ toSource () ; return toSource ( null , n . toSource ( n ) ) ; }
Distance : 8

47
Tree	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; }
Code	{ initCompilerOptionsIfTesting () ; return toSource ( null , n . toSource ( n ) ) ; }
Distance : 7

48
Tree	{ initCompilerOptionsIfTesting () ; return n . toSource ( Any.ANY ) ; }
Code	{ initCompilerOptionsIfTesting () ; return n . toSource ( Any.ANY ) ; }
Distance : 6

49
Tree	{ toSource () ; return n . toSource ( Any.ANY ) ; }
Code	{ toSource () ; return n . toSource ( Any.ANY ) ; }
Distance : 7

========================================================================


========================================================================
Example Number: 23
Parent Code is: 
String code = toSource ( root , sourceMap ) ;
-------------------------------------------------------------------------------
Child code is: 
String code = toSource ( root , sourceMap , inputSeqNum == NUMBER_CONSTANT ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=code}) (204{val==}) (32 (802{val=toSource}) (214{val=(}) (800{val=root}) (234{val=,}) (800{val=sourceMap}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=code}) (204{val==}) (32 (802{val=toSource}) (214{val=(}) (800{val=root}) (234{val=,}) (800{val=sourceMap}) (234{val=,}) (27 (800{val=inputSeqNum}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/64/parent/src_com_google_javascript_jscomp_Compiler.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	String code = sourceMap ( root , sourceMap ) ;
Code	String code = sourceMap ( root , sourceMap ) ;
Distance : 5

1
Tree	String code = code ( root , sourceMap ) ;
Code	String code = code ( root , sourceMap ) ;
Distance : 5

2
Tree	String code = sourceMap ( root , code ) ;
Code	String code = sourceMap ( root , code ) ;
Distance : 6

3
Tree	String code = code ( root , code ) ;
Code	String code = code ( root , code ) ;
Distance : 6

4
Tree	String code = toSource ( root , sourceMap , false ) ;
Code	String code = toSource ( root , sourceMap , false ) ;
Distance : 3

5
Tree	String code = root ( root , sourceMap ) ;
Code	String code = root ( root , sourceMap ) ;
Distance : 5

6
Tree	String code = code . toSource ( root , sourceMap ) ;
Code	String code = code . toSource ( root , sourceMap ) ;
Distance : 6

7
Tree	String code = toSource ( root , code , code ) ;
Code	String code = toSource ( root , code , code ) ;
Distance : 4

8
Tree	String code = toSource ( root , code , false ) ;
Code	String code = toSource ( root , code , false ) ;
Distance : 4

9
Tree	String code = sourceMap ( root ) ;
Code	String code = sourceMap ( root ) ;
Distance : 7

10
Tree	String code = code ( root ) ;
Code	String code = code ( root ) ;
Distance : 7

11
Tree	String root = sourceMap ( root ) ;
Code	String root = sourceMap ( root ) ;
Distance : 8

12
Tree	String code = sourceMap . toSource ( root ) ;
Code	String code = sourceMap . toSource ( root ) ;
Distance : 8

13
Tree	String code = sourceMap ( root , sourceMap , sourceMap ) ;
Code	String code = sourceMap ( root , sourceMap , sourceMap ) ;
Distance : 4

14
Tree	String code = toSource ( sourceMap ) ;
Code	String code = toSource ( sourceMap ) ;
Distance : 6

15
Tree	String code = toSource ( toSource () , STRING_CONSTANT , root , code ) ;
Code	String code = toSource ( toSource () , STRING_CONSTANT , root , code ) ;
Distance : 6

16
Tree	String root = toSource ( root , code ) ;
Code	String root = toSource ( root , code ) ;
Distance : 6

17
Tree	String code = toSource ( toSource () , STRING_CONSTANT , root , root ) ;
Code	String code = toSource ( toSource () , STRING_CONSTANT , root , root ) ;
Distance : 6

18
Tree	String code = code . toSource ( root ) ;
Code	String code = code . toSource ( root ) ;
Distance : 8

19
Tree	String code = root . toSource ( root , sourceMap ) ;
Code	String code = root . toSource ( root , sourceMap ) ;
Distance : 6

20
Tree	String code = root . toSource ( root ) ;
Code	String code = root . toSource ( root ) ;
Distance : 8

21
Tree	String code = toSource ( root , root ) ;
Code	String code = toSource ( root , root ) ;
Distance : 5

22
Tree	String code = sourceMap . toSource ( root , code ) ;
Code	String code = sourceMap . toSource ( root , code ) ;
Distance : 7

23
Tree	String code = code . toSource ( root , code ) ;
Code	String code = code . toSource ( root , code ) ;
Distance : 7

24
Tree	String code = toSource ( root , root , sourceMap ) ;
Code	String code = toSource ( root , root , sourceMap ) ;
Distance : 4

25
Tree	String root = toSource ( root , sourceMap ) ;
Code	String root = toSource ( root , sourceMap ) ;
Distance : 5

26
Tree	String code = root ( root ) ;
Code	String code = root ( root ) ;
Distance : 7

27
Tree	String code = code ( root , sourceMap , sourceMap ) ;
Code	String code = code ( root , sourceMap , sourceMap ) ;
Distance : 4

28
Tree	String code = toSource ( root , root , false ) ;
Code	String code = toSource ( root , root , false ) ;
Distance : 4

29
Tree	String code = sourceMap ( root , code , sourceMap ) ;
Code	String code = sourceMap ( root , code , sourceMap ) ;
Distance : 5

30
Tree	String code = toSource . toSource ( root ) ;
Code	String code = toSource . toSource ( root ) ;
Distance : 8

31
Tree	String code = sourceMap . toSource ( root , sourceMap ) ;
Code	String code = sourceMap . toSource ( root , sourceMap ) ;
Distance : 6

32
Tree	String root = toSource ( root ) ;
Code	String root = toSource ( root ) ;
Distance : 7

33
Tree	String code = code ( root , code , sourceMap ) ;
Code	String code = code ( root , code , sourceMap ) ;
Distance : 5

34
Tree	String root = toSource ( root , sourceMap , false ) ;
Code	String root = toSource ( root , sourceMap , false ) ;
Distance : 4

35
Tree	String code = toSource ( toSource () , STRING_CONSTANT , code , sourceMap ) ;
Code	String code = toSource ( toSource () , STRING_CONSTANT , code , sourceMap ) ;
Distance : 6

36
Tree	String root = toSource ( toSource () , STRING_CONSTANT , root , sourceMap ) ;
Code	String root = toSource ( toSource () , STRING_CONSTANT , root , sourceMap ) ;
Distance : 7

37
Tree	String code = toSource ( root , sourceMap , sourceMap ) ;
Code	String code = toSource ( root , sourceMap , sourceMap ) ;
Distance : 3

38
Tree	String code = toSource ( root ) ;
Code	String code = toSource ( root ) ;
Distance : 6

39
Tree	String code = root ( root , sourceMap , sourceMap ) ;
Code	String code = root ( root , sourceMap , sourceMap ) ;
Distance : 4

40
Tree	String code = toSource ( root , code , sourceMap ) ;
Code	String code = toSource ( root , code , sourceMap ) ;
Distance : 4

41
Tree	String code = toSource ( root ) ;
Code	String code = toSource ( root ) ;
Distance : 6

42
Tree	String code = toSource ( root , sourceMap , code ) ;
Code	String code = toSource ( root , sourceMap , code ) ;
Distance : 3

43
Tree	String code = toSource ( root , sourceMap ) ;
Code	String code = toSource ( root , sourceMap ) ;
Distance : 4

44
Tree	String code = toSource ( root , code ) ;
Code	String code = toSource ( root , code ) ;
Distance : 5

45
Tree	String root = toSource ( root , code , false ) ;
Code	String root = toSource ( root , code , false ) ;
Distance : 5

46
Tree	String sourceMap = toSource ( root ) ;
Code	String sourceMap = toSource ( root ) ;
Distance : 7

47
Tree	String code = toSource ( code ) ;
Code	String code = toSource ( code ) ;
Distance : 7

48
Tree	String root = sourceMap . toSource ( root ) ;
Code	String root = sourceMap . toSource ( root ) ;
Distance : 9

49
Tree	String code = toSource ( toSource () , STRING_CONSTANT , root , sourceMap ) ;
Code	String code = toSource ( toSource () , STRING_CONSTANT , root , sourceMap ) ;
Distance : 6

========================================================================


========================================================================
Example Number: 24
Parent Code is: 
this . maybeAliased = ! assignNode . getParent () . isExprResult () ;
-------------------------------------------------------------------------------
Child code is: 
this . maybeAliased = NodeUtil . isExpressionResultUsed ( assignNode ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=maybeAliased})) (204{val==}) (38 (207{val=!}) (32 (32 (800{val=assignNode}) (235{val=.}) (802{val=getParent}) (216{val=()})) (235{val=.}) (802{val=isExprResult}) (216{val=()})))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=maybeAliased})) (204{val==}) (32 (800{val=NodeUtil}) (235{val=.}) (802{val=isExpressionResultUsed}) (214{val=(}) (800{val=assignNode}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/45/parent/src_com_google_javascript_jscomp_RemoveUnusedVars.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	typeArguments.length = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	typeArguments.length = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

1
Tree	RemoveUnusedCode.Builder = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	RemoveUnusedCode.Builder = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

2
Tree	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

3
Tree	this . maybeAliased = ( assignNode ) assignNode . getParent () ;
Code	this . maybeAliased = ( assignNode ) assignNode . getParent () ;
Distance : 7

4
Tree	this . assignNode = ( assignNode ) assignNode . getParent () ;
Code	this . assignNode = ( assignNode ) assignNode . getParent () ;
Distance : 8

5
Tree	entry.map = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	entry.map = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

6
Tree	this . maybeAliased = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	this . maybeAliased = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 9

7
Tree	nt1.rawType = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	nt1.rawType = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 11

8
Tree	this . maybeAliased = ( NodeUtil ) assignNode . getParent () ;
Code	this . maybeAliased = ( NodeUtil ) assignNode . getParent () ;
Distance : 6

9
Tree	this . assignNode = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	this . assignNode = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 10

10
Tree	typeArguments.length = assignNode . getParent ( assignNode . getParent () . isExprResult () . NodeUtil ) ;
Code	typeArguments.length = assignNode . getParent ( assignNode . getParent () . isExprResult () . NodeUtil ) ;
Distance : 13

11
Tree	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( assignNode . getParent () . isExprResult () . NodeUtil ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( assignNode . getParent () . isExprResult () . NodeUtil ) ;
Distance : 13

12
Tree	this . maybeAliased = ( assignNode ) NodeUtil . getParent () ;
Code	this . maybeAliased = ( assignNode ) NodeUtil . getParent () ;
Distance : 7

13
Tree	RemoveUnusedCode.Builder = assignNode . getParent ( assignNode . getParent () . isExprResult () . NodeUtil ) ;
Code	RemoveUnusedCode.Builder = assignNode . getParent ( assignNode . getParent () . isExprResult () . NodeUtil ) ;
Distance : 13

14
Tree	entry.map = assignNode . getParent ( assignNode . getParent () . isExprResult () . NodeUtil ) ;
Code	entry.map = assignNode . getParent ( assignNode . getParent () . isExprResult () . NodeUtil ) ;
Distance : 13

15
Tree	this . assignNode = ( NodeUtil ) assignNode . getParent () ;
Code	this . assignNode = ( NodeUtil ) assignNode . getParent () ;
Distance : 7

16
Tree	this . maybeAliased = ( NodeUtil ) assignNode . getParent () . isExprResult () ;
Code	this . maybeAliased = ( NodeUtil ) assignNode . getParent () . isExprResult () ;
Distance : 8

17
Tree	this . maybeAliased = ( assignNode ) NodeUtil . getParent () . isExprResult () ;
Code	this . maybeAliased = ( assignNode ) NodeUtil . getParent () . isExprResult () ;
Distance : 8

18
Tree	typeArguments.length = assignNode . getParent ( assignNode . getParent () . isExprResult () . assignNode ) ;
Code	typeArguments.length = assignNode . getParent ( assignNode . getParent () . isExprResult () . assignNode ) ;
Distance : 12

19
Tree	this . assignNode = ( NodeUtil ) assignNode . getParent () . isExprResult () ;
Code	this . assignNode = ( NodeUtil ) assignNode . getParent () . isExprResult () ;
Distance : 9

20
Tree	typeArguments.length = ( assignNode ) assignNode . getParent () ;
Code	typeArguments.length = ( assignNode ) assignNode . getParent () ;
Distance : 10

21
Tree	RemoveUnusedCode.Builder = ( assignNode ) assignNode . getParent () ;
Code	RemoveUnusedCode.Builder = ( assignNode ) assignNode . getParent () ;
Distance : 10

22
Tree	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) assignNode . getParent () ;
Code	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) assignNode . getParent () ;
Distance : 10

23
Tree	entry.map = ( assignNode ) assignNode . getParent () ;
Code	entry.map = ( assignNode ) assignNode . getParent () ;
Distance : 10

24
Tree	nt1.rawType = ( assignNode ) assignNode . getParent () ;
Code	nt1.rawType = ( assignNode ) assignNode . getParent () ;
Distance : 10

25
Tree	typeArguments.length = TypeInferenceMode.CHECKED . getParent () ;
Code	typeArguments.length = TypeInferenceMode.CHECKED . getParent () ;
Distance : 8

26
Tree	NewTypeInference.INEXISTENT_PROPERTY = TypeInferenceMode.CHECKED . getParent () ;
Code	NewTypeInference.INEXISTENT_PROPERTY = TypeInferenceMode.CHECKED . getParent () ;
Distance : 8

27
Tree	RemoveUnusedCode.Builder = TypeInferenceMode.CHECKED . getParent () ;
Code	RemoveUnusedCode.Builder = TypeInferenceMode.CHECKED . getParent () ;
Distance : 8

28
Tree	entry.map = TypeInferenceMode.CHECKED . getParent () ;
Code	entry.map = TypeInferenceMode.CHECKED . getParent () ;
Distance : 8

29
Tree	nt1.rawType = TypeInferenceMode.CHECKED . getParent () ;
Code	nt1.rawType = TypeInferenceMode.CHECKED . getParent () ;
Distance : 8

30
Tree	typeArguments.length = ( assignNode ) child.parent . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	typeArguments.length = ( assignNode ) child.parent . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

31
Tree	RemoveUnusedCode.Builder = ( assignNode ) child.parent . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	RemoveUnusedCode.Builder = ( assignNode ) child.parent . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

32
Tree	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) child.parent . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = ( assignNode ) child.parent . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

33
Tree	entry.map = ( assignNode ) child.parent . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	entry.map = ( assignNode ) child.parent . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

34
Tree	LocalizedFormats.EVALUATIONS = ( assignNode ) child.parent . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	LocalizedFormats.EVALUATIONS = ( assignNode ) child.parent . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

35
Tree	typeArguments.length = new NodeUtil ( assignNode ) . isExprResult () ;
Code	typeArguments.length = new NodeUtil ( assignNode ) . isExprResult () ;
Distance : 9

36
Tree	NewTypeInference.INEXISTENT_PROPERTY = new NodeUtil ( assignNode ) . isExprResult () ;
Code	NewTypeInference.INEXISTENT_PROPERTY = new NodeUtil ( assignNode ) . isExprResult () ;
Distance : 9

37
Tree	RemoveUnusedCode.Builder = new NodeUtil ( assignNode ) . isExprResult () ;
Code	RemoveUnusedCode.Builder = new NodeUtil ( assignNode ) . isExprResult () ;
Distance : 9

38
Tree	entry.map = new NodeUtil ( assignNode ) . isExprResult () ;
Code	entry.map = new NodeUtil ( assignNode ) . isExprResult () ;
Distance : 9

39
Tree	nt1.rawType = new NodeUtil ( assignNode ) . isExprResult () ;
Code	nt1.rawType = new NodeUtil ( assignNode ) . isExprResult () ;
Distance : 9

40
Tree	NewTypeInference.INEXISTENT_PROPERTY = assignNode . NodeUtil ( assignNode ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = assignNode . NodeUtil ( assignNode ) ;
Distance : 5

41
Tree	RemoveUnusedCode.Builder = assignNode . NodeUtil ( assignNode ) ;
Code	RemoveUnusedCode.Builder = assignNode . NodeUtil ( assignNode ) ;
Distance : 5

42
Tree	entry.map = assignNode . getParent ( this . assignNode ) ;
Code	entry.map = assignNode . getParent ( this . assignNode ) ;
Distance : 7

43
Tree	entry.map = assignNode . NodeUtil ( assignNode ) ;
Code	entry.map = assignNode . NodeUtil ( assignNode ) ;
Distance : 5

44
Tree	typeArguments.length = assignNode . assignNode ( assignNode ) ;
Code	typeArguments.length = assignNode . assignNode ( assignNode ) ;
Distance : 5

45
Tree	typeArguments.length = assignNode . getParent ( this . assignNode ) ;
Code	typeArguments.length = assignNode . getParent ( this . assignNode ) ;
Distance : 7

46
Tree	typeArguments.length = assignNode . NodeUtil ( assignNode ) ;
Code	typeArguments.length = assignNode . NodeUtil ( assignNode ) ;
Distance : 5

47
Tree	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( this . assignNode ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( this . assignNode ) ;
Distance : 7

48
Tree	typeArguments.length = assignNode . getParent ( this . maybeAliased ) ;
Code	typeArguments.length = assignNode . getParent ( this . maybeAliased ) ;
Distance : 8

49
Tree	RemoveUnusedCode.Builder = assignNode . getParent ( this . assignNode ) ;
Code	RemoveUnusedCode.Builder = assignNode . getParent ( this . assignNode ) ;
Distance : 7

========================================================================


========================================================================
Example Number: 25
Parent Code is: 
if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( ( x < NUMBER_CONSTANT  negativeZero ) && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=x}) (230{val=<}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=prev}) (236{val===}) (13{val=CHAR_CONS}))) (215{val=)}) (8 (218{val={}) (21 (32 (802{val=add}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (36 (214{val=(}) (27 (27 (800{val=x}) (230{val=<}) (34{val=NUMBER_CONSTANT})) (250{val=||}) (800{val=negativeZero})) (215{val=)})) (249{val=&&}) (27 (800{val=prev}) (236{val===}) (13{val=CHAR_CONS}))) (215{val=)}) (8 (218{val={}) (21 (32 (802{val=add}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/38/parent/src_com_google_javascript_jscomp_CodeConsumer.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	if ( x < NUMBER_CONSTANT && prev != DisposalCheckingPolicy.OFF ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev != DisposalCheckingPolicy.OFF ) { add ( STRING_CONSTANT ) ; }
Distance : 5

1
Tree	if ( x < NUMBER_CONSTANT && x > prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x > prev ) { add ( STRING_CONSTANT ) ; }
Distance : 6

2
Tree	if ( x < NUMBER_CONSTANT && Year.MAXIMUM_YEAR == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Year.MAXIMUM_YEAR == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Distance : 5

3
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

4
Tree	if ( x < NUMBER_CONSTANT && isLastMatcherVarargMatcher == IncrementalCheckMode.GENERATE_IJS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && isLastMatcherVarargMatcher == IncrementalCheckMode.GENERATE_IJS ) { add ( STRING_CONSTANT ) ; }
Distance : 5

5
Tree	if ( x < NUMBER_CONSTANT && prev <= x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= x ) { add ( STRING_CONSTANT ) ; }
Distance : 5

6
Tree	if ( x < NUMBER_CONSTANT && prev > prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev > prev ) { add ( STRING_CONSTANT ) ; }
Distance : 5

7
Tree	if ( x < NUMBER_CONSTANT && prev != isPointInRect ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev != isPointInRect ) { add ( STRING_CONSTANT ) ; }
Distance : 5

8
Tree	if ( x < NUMBER_CONSTANT && x >= this . prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= this . prev ) { add ( STRING_CONSTANT ) ; }
Distance : 7

9
Tree	if ( x < NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

10
Tree	if ( x < NUMBER_CONSTANT && enclosing [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && enclosing [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

11
Tree	if ( x < NUMBER_CONSTANT && isLastMatcherVarargMatcher == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && isLastMatcherVarargMatcher == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Distance : 5

12
Tree	if ( x < NUMBER_CONSTANT && x >= prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= prev ) { add ( STRING_CONSTANT ) ; }
Distance : 6

13
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; }
Distance : 7

14
Tree	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

15
Tree	if ( x < NUMBER_CONSTANT && prev >= this . x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . x ) { add ( STRING_CONSTANT ) ; }
Distance : 7

16
Tree	if ( x < NUMBER_CONSTANT && CharUtils.NUL == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && CharUtils.NUL == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Distance : 5

17
Tree	if ( x < NUMBER_CONSTANT && x <= x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x <= x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

18
Tree	if ( x < NUMBER_CONSTANT && x - x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x - x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

19
Tree	if ( x < NUMBER_CONSTANT && centers [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && centers [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

20
Tree	if ( x < NUMBER_CONSTANT && prev - x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev - x ) { add ( STRING_CONSTANT ) ; }
Distance : 5

21
Tree	if ( x < NUMBER_CONSTANT && thatUnresolved [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && thatUnresolved [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

22
Tree	if ( x < NUMBER_CONSTANT && omegaImaginaryInverse [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && omegaImaginaryInverse [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

23
Tree	if ( x < NUMBER_CONSTANT && prev - prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev - prev ) { add ( STRING_CONSTANT ) ; }
Distance : 5

24
Tree	if ( x < NUMBER_CONSTANT && prev > x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev > x ) { add ( STRING_CONSTANT ) ; }
Distance : 5

25
Tree	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } !=
Code	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } !=
Distance : 6

26
Tree	if ( x < NUMBER_CONSTANT && Year.MAXIMUM_YEAR == IncrementalCheckMode.GENERATE_IJS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Year.MAXIMUM_YEAR == IncrementalCheckMode.GENERATE_IJS ) { add ( STRING_CONSTANT ) ; }
Distance : 5

27
Tree	if ( x < NUMBER_CONSTANT && x > x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x > x ) { add ( STRING_CONSTANT ) ; }
Distance : 6

28
Tree	if ( x < NUMBER_CONSTANT && omegaImaginaryForward [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && omegaImaginaryForward [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

29
Tree	if ( x < NUMBER_CONSTANT && x <= prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x <= prev ) { add ( STRING_CONSTANT ) ; }
Distance : 6

30
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } !=
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; } !=
Distance : 6

31
Tree	if ( x < NUMBER_CONSTANT && x > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

32
Tree	if ( x < NUMBER_CONSTANT && x - prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x - prev ) { add ( STRING_CONSTANT ) ; }
Distance : 6

33
Tree	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

34
Tree	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

35
Tree	if ( x < NUMBER_CONSTANT && prev != CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev != CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Distance : 5

36
Tree	if ( x < NUMBER_CONSTANT && prev != isLastMatcherVarargMatcher ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev != isLastMatcherVarargMatcher ) { add ( STRING_CONSTANT ) ; }
Distance : 5

37
Tree	if ( x < NUMBER_CONSTANT && prev != IncrementalCheckMode.GENERATE_IJS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev != IncrementalCheckMode.GENERATE_IJS ) { add ( STRING_CONSTANT ) ; }
Distance : 5

38
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; }
Distance : 5

39
Tree	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

40
Tree	if ( x < NUMBER_CONSTANT && prev <= prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= prev ) { add ( STRING_CONSTANT ) ; }
Distance : 5

41
Tree	if ( x < NUMBER_CONSTANT && prev > prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev > prev ) { add ( STRING_CONSTANT ) ; }
Distance : 5

42
Tree	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= this . prev ) { add ( STRING_CONSTANT ) ; }
Distance : 7

43
Tree	if ( x < NUMBER_CONSTANT && prev - prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev - prev ) { add ( STRING_CONSTANT ) ; }
Distance : 5

44
Tree	if ( x < NUMBER_CONSTANT && x >= this . x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x >= this . x ) { add ( STRING_CONSTANT ) ; }
Distance : 7

45
Tree	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

46
Tree	if ( x < NUMBER_CONSTANT && prev >= x ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= x ) { add ( STRING_CONSTANT ) ; }
Distance : 5

47
Tree	if ( x < NUMBER_CONSTANT && x > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && x > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

48
Tree	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev >= prev ) { add ( STRING_CONSTANT ) ; }
Distance : 5

49
Tree	if ( x < NUMBER_CONSTANT && prev <= prev ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && prev <= prev ) { add ( STRING_CONSTANT ) ; }
Distance : 5

========================================================================


========================================================================
Example Number: 26
Parent Code is: 
cc . listSeparator () ;
-------------------------------------------------------------------------------
Child code is: 
cc . addOp ( opStr , true ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (32 (800{val=cc}) (235{val=.}) (802{val=listSeparator}) (216{val=()})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (32 (800{val=cc}) (235{val=.}) (802{val=addOp}) (214{val=(}) (800{val=opStr}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/34/parent/src_com_google_javascript_jscomp_CodeGenerator.java
-------------------------------------------------------------------------------
Edit Distance : 6
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	cc = false ;
Code	cc = false ;
Distance : 7

1
Tree	cc . listSeparator () ;
Code	cc . listSeparator () ;
Distance : 6

2
Tree	listSeparator () ; value
Code	listSeparator () ; value
Distance : 9

3
Tree	listSeparator () ; i
Code	listSeparator () ; i
Distance : 9

4
Tree	listSeparator () ; +
Code	listSeparator () ; +
Distance : 9

5
Tree	cc . listSeparator ( Feature.MODULES ) ;
Code	cc . listSeparator ( Feature.MODULES ) ;
Distance : 4

6
Tree	cc . listSeparator ( Feature.MODULES ) ;
Code	cc . listSeparator ( Feature.MODULES ) ;
Distance : 4

7
Tree	cc . listSeparator ( cc ) ;
Code	cc . listSeparator ( cc ) ;
Distance : 4

8
Tree	cc () . listSeparator () ;
Code	cc () . listSeparator () ;
Distance : 7

9
Tree	cc = new emptiedClinitMethods <> () ;
Code	cc = new emptiedClinitMethods <> () ;
Distance : 7

10
Tree	cc ( cc ) ;
Code	cc ( cc ) ;
Distance : 5

11
Tree	cc = false ;
Code	cc = false ;
Distance : 7

12
Tree	cc () . listSeparator () ;
Code	cc () . listSeparator () ;
Distance : 7

13
Tree	cc = new UnicodeUnescaper <> () ;
Code	cc = new UnicodeUnescaper <> () ;
Distance : 7

14
Tree	cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 4

15
Tree	cc = true ;
Code	cc = true ;
Distance : 6

16
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 6

17
Tree	cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 4

18
Tree	cc ( cc ) ;
Code	cc ( cc ) ;
Distance : 5

19
Tree	cc . listSeparator ( cc ) ;
Code	cc . listSeparator ( cc ) ;
Distance : 4

20
Tree	cc () . listSeparator () ;
Code	cc () . listSeparator () ;
Distance : 7

21
Tree	cc . listSeparator () ; !=
Code	cc . listSeparator () ; !=
Distance : 7

22
Tree	cc . listSeparator ( PassNames.BEFORE_TYPE_CHECKING ) ;
Code	cc . listSeparator ( PassNames.BEFORE_TYPE_CHECKING ) ;
Distance : 4

23
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 6

24
Tree	cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 4

25
Tree	cc = new Random <> () ;
Code	cc = new Random <> () ;
Distance : 7

26
Tree	listSeparator () ;
Code	listSeparator () ;
Distance : 8

27
Tree	cc . listSeparator ( cc ) ;
Code	cc . listSeparator ( cc ) ;
Distance : 4

28
Tree	cc = true ;
Code	cc = true ;
Distance : 6

29
Tree	cc . listSeparator () ;
Code	cc . listSeparator () ;
Distance : 6

30
Tree	cc = new passName <> () ;
Code	cc = new passName <> () ;
Distance : 7

31
Tree	cc = false ; !=
Code	cc = false ; !=
Distance : 8

32
Tree	cc . listSeparator () ;
Code	cc . listSeparator () ;
Distance : 6

33
Tree	cc . listSeparator ( cc ) ;
Code	cc . listSeparator ( cc ) ;
Distance : 4

34
Tree	listSeparator () ;
Code	listSeparator () ;
Distance : 8

35
Tree	listSeparator ( cc ) ;
Code	listSeparator ( cc ) ;
Distance : 6

36
Tree	cc = new ExceptionWithCause <> () ;
Code	cc = new ExceptionWithCause <> () ;
Distance : 7

37
Tree	cc () . listSeparator () ; !=
Code	cc () . listSeparator () ; !=
Distance : 8

38
Tree	cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 4

39
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 6

40
Tree	listSeparator ( cc ) ; !=
Code	listSeparator ( cc ) ; !=
Distance : 7

41
Tree	. = cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	. = cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 6

42
Tree	cc . listSeparator ( Es6ModuleTranspilation.TO_COMMON_JS_LIKE_MODULES ) ;
Code	cc . listSeparator ( Es6ModuleTranspilation.TO_COMMON_JS_LIKE_MODULES ) ;
Distance : 4

43
Tree	cc . listSeparator ( NUMBER_CONSTANT ) ; !=
Code	cc . listSeparator ( NUMBER_CONSTANT ) ; !=
Distance : 5

44
Tree	listSeparator ( cc ) ;
Code	listSeparator ( cc ) ;
Distance : 6

45
Tree	cc . listSeparator ( cc ) ;
Code	cc . listSeparator ( cc ) ;
Distance : 4

46
Tree	cc . listSeparator () ;
Code	cc . listSeparator () ;
Distance : 6

47
Tree	cc () . listSeparator () ;
Code	cc () . listSeparator () ;
Distance : 7

48
Tree	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Code	cc = cc . listSeparator ( NUMBER_CONSTANT ) ;
Distance : 6

49
Tree	cc . listSeparator ( flags.chromePass ) ;
Code	cc . listSeparator ( flags.chromePass ) ;
Distance : 4

========================================================================


========================================================================
Example Number: 27
Parent Code is: 
options.dependencyOptions . needsManagement () && ! options.skipAllPasses && options.closurePass
-------------------------------------------------------------------------------
Child code is: 
options.dependencyOptions . needsManagement () && options.closurePass
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (32 (40{val=options.dependencyOptions}) (235{val=.}) (802{val=needsManagement}) (216{val=()})) (249{val=&&}) (38 (207{val=!}) (40{val=options.skipAllPasses})) (249{val=&&}) (40{val=options.closurePass})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (32 (40{val=options.dependencyOptions}) (235{val=.}) (802{val=needsManagement}) (216{val=()})) (249{val=&&}) (40{val=options.closurePass})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/31/parent/src_com_google_javascript_jscomp_Compiler.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	options.dependencyOptions < Scope
Code	options.dependencyOptions < Scope
Distance : 5

1
Tree	null != qNameRoot . && ( null )
Code	null != qNameRoot . && ( null )
Distance : 7

2
Tree	this . sectionOutlineStrokeMap . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . sectionOutlineStrokeMap . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

3
Tree	this . runSmartNameRemoval . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . runSmartNameRemoval . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

4
Tree	findDeps . needsManagement ( null ) > NUMBER_CONSTANT
Code	findDeps . needsManagement ( null ) > NUMBER_CONSTANT
Distance : 6

5
Tree	null != SIZE_THRESHOLD . needsManagement ( path . class )
Code	null != SIZE_THRESHOLD . needsManagement ( path . class )
Distance : 8

6
Tree	objectMethodsGuru + STRING_CONSTANT == NUMBER_CONSTANT
Code	objectMethodsGuru + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

7
Tree	objectMethodsGuru . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	objectMethodsGuru . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

8
Tree	oldRoot . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	oldRoot . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

9
Tree	typesIndexedByProperty . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	typesIndexedByProperty . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

10
Tree	this . negativeItemLabelPositionMap . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . negativeItemLabelPositionMap . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

11
Tree	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT
Code	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 5

12
Tree	oldRoot + STRING_CONSTANT == NUMBER_CONSTANT
Code	oldRoot + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

13
Tree	null != isDateType . needsManagement ( null )
Code	null != isDateType . needsManagement ( null )
Distance : 6

14
Tree	null != qNameRoot . needsManagement ( path . class )
Code	null != qNameRoot . needsManagement ( path . class )
Distance : 8

15
Tree	typesIndexedByProperty + STRING_CONSTANT == NUMBER_CONSTANT
Code	typesIndexedByProperty + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

16
Tree	findDeps + STRING_CONSTANT == NUMBER_CONSTANT
Code	findDeps + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

17
Tree	bundler + STRING_CONSTANT == NUMBER_CONSTANT
Code	bundler + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

18
Tree	options.dependencyOptions < Feature
Code	options.dependencyOptions < Feature
Distance : 5

19
Tree	options.dependencyOptions < String
Code	options.dependencyOptions < String
Distance : 5

20
Tree	findDeps . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	findDeps . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

21
Tree	oldRoot . needsManagement ( null ) > NUMBER_CONSTANT
Code	oldRoot . needsManagement ( null ) > NUMBER_CONSTANT
Distance : 6

22
Tree	null != isDateType . needsManagement ( path . class )
Code	null != isDateType . needsManagement ( path . class )
Distance : 8

23
Tree	null != anyStringNull . && ( null )
Code	null != anyStringNull . && ( null )
Distance : 7

24
Tree	objectMethodsGuru . needsManagement ( null ) > NUMBER_CONSTANT
Code	objectMethodsGuru . needsManagement ( null ) > NUMBER_CONSTANT
Distance : 6

25
Tree	options.dependencyOptions < JSType
Code	options.dependencyOptions < JSType
Distance : 5

26
Tree	null != anyStringNull . needsManagement ( path . class )
Code	null != anyStringNull . needsManagement ( path . class )
Distance : 8

27
Tree	bundler . needsManagement ( null ) > NUMBER_CONSTANT
Code	bundler . needsManagement ( null ) > NUMBER_CONSTANT
Distance : 6

28
Tree	null != isDotPrototype . needsManagement ( null )
Code	null != isDotPrototype . needsManagement ( null )
Distance : 6

29
Tree	options.dependencyOptions < Rule
Code	options.dependencyOptions < Rule
Distance : 5

30
Tree	typesIndexedByProperty . needsManagement ( null ) > NUMBER_CONSTANT
Code	typesIndexedByProperty . needsManagement ( null ) > NUMBER_CONSTANT
Distance : 6

31
Tree	this . datasetToScaleMap . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . datasetToScaleMap . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

32
Tree	null != isDotPrototype . needsManagement ( path . class )
Code	null != isDotPrototype . needsManagement ( path . class )
Distance : 8

33
Tree	objectMethodsGuru . needsManagement ( currentScript . class ) > NUMBER_CONSTANT
Code	objectMethodsGuru . needsManagement ( currentScript . class ) > NUMBER_CONSTANT
Distance : 8

34
Tree	null != SIZE_THRESHOLD . needsManagement ( null )
Code	null != SIZE_THRESHOLD . needsManagement ( null )
Distance : 6

35
Tree	oldRoot . needsManagement ( currentScript . class ) > NUMBER_CONSTANT
Code	oldRoot . needsManagement ( currentScript . class ) > NUMBER_CONSTANT
Distance : 8

36
Tree	typesIndexedByProperty . needsManagement ( currentScript . class ) > NUMBER_CONSTANT
Code	typesIndexedByProperty . needsManagement ( currentScript . class ) > NUMBER_CONSTANT
Distance : 8

37
Tree	bundler . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	bundler . needsManagement ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

38
Tree	findDeps . needsManagement ( currentScript . class ) > NUMBER_CONSTANT
Code	findDeps . needsManagement ( currentScript . class ) > NUMBER_CONSTANT
Distance : 8

39
Tree	this . subtypes . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . subtypes . needsManagement () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 7

40
Tree	objectMethodsGuru / ctorType == NUMBER_CONSTANT
Code	objectMethodsGuru / ctorType == NUMBER_CONSTANT
Distance : 6

41
Tree	typesIndexedByProperty / ctorType == NUMBER_CONSTANT
Code	typesIndexedByProperty / ctorType == NUMBER_CONSTANT
Distance : 6

42
Tree	findDeps / ctorType == NUMBER_CONSTANT
Code	findDeps / ctorType == NUMBER_CONSTANT
Distance : 6

43
Tree	oldRoot / ctorType == NUMBER_CONSTANT
Code	oldRoot / ctorType == NUMBER_CONSTANT
Distance : 6

44
Tree	findDeps / type == NUMBER_CONSTANT
Code	findDeps / type == NUMBER_CONSTANT
Distance : 6

45
Tree	objectMethodsGuru . needsManagement ( decl . class ) > NUMBER_CONSTANT
Code	objectMethodsGuru . needsManagement ( decl . class ) > NUMBER_CONSTANT
Distance : 8

46
Tree	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT T
Code	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT T
Distance : 5

47
Tree	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT compiler
Code	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT compiler
Distance : 5

48
Tree	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT void
Code	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT void
Distance : 5

49
Tree	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT e
Code	options.dependencyOptions + NUMBER_CONSTANT == NUMBER_CONSTANT e
Distance : 5

========================================================================


========================================================================
Example Number: 28
Parent Code is: 
{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ ( new NodeTraversal ( compiler , this ) ) . traverseRoots ( externs , root ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (36 (214{val=(}) (14 (304{val=new}) (43 (801{val=NodeTraversal})) (214{val=(}) (800{val=compiler}) (234{val=,}) (315{val=this}) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=traverse}) (214{val=(}) (800{val=root}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (36 (214{val=(}) (14 (304{val=new}) (43 (801{val=NodeTraversal})) (214{val=(}) (800{val=compiler}) (234{val=,}) (315{val=this}) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=traverseRoots}) (214{val=(}) (800{val=externs}) (234{val=,}) (800{val=root}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/30/parent/src_com_google_javascript_jscomp_FlowSensitiveInlineVariables.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( externs , root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( externs , root ) , null ) ; }
Distance : 9

1
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , LanguageMode.ECMASCRIPT5 ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , LanguageMode.ECMASCRIPT5 ) ) . traverse ( root ) ; }
Distance : 5

2
Tree	{ new NodeTraversal ( compiler , this , root ) . traverse ( root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . traverse ( root ) . traverse ( CHAR_CONS ) ; }
Distance : 10

3
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , LocalizedFormats.DIMENSIONS_MISMATCH ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , LocalizedFormats.DIMENSIONS_MISMATCH ) ) . traverse ( root ) ; }
Distance : 5

4
Tree	{ compiler . traverse ( traverseRoots ( NUMBER_CONSTANT , false ) , null ) ; }
Code	{ compiler . traverse ( traverseRoots ( NUMBER_CONSTANT , false ) , null ) ; }
Distance : 13

5
Tree	{ ( new NodeTraversal ( compiler , null , false ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , null , false ) ) . traverseRoots ( root ) ; }
Distance : 5

6
Tree	{ externs . traverse ( traverseRoots ( NUMBER_CONSTANT , false ) , null ) ; }
Code	{ externs . traverse ( traverseRoots ( NUMBER_CONSTANT , false ) , null ) ; }
Distance : 13

7
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( root ) , null ) ; }
Distance : 9

8
Tree	{ ( new NodeTraversal ( compiler , compiler , compiler , false ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , compiler , false ) ) . traverse ( root ) ; }
Distance : 8

9
Tree	{ ( new NodeTraversal ( compiler , compiler , compiler , false ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , compiler , false ) ) . traverse ( externs ) ; }
Distance : 8

10
Tree	{ new NodeTraversal ( compiler , this , root ) . traverse ( root , root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . traverse ( root , root ) . traverse ( CHAR_CONS ) ; }
Distance : 10

11
Tree	{ externs . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root ) , null ) ; }
Distance : 9

12
Tree	{ externs . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( root ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( root ) , null ) ; }
Distance : 9

13
Tree	{ ( new NodeTraversal ( compiler , null , false ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , null , false ) ) . traverseRoots ( externs ) ; }
Distance : 5

14
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( root ) ; }
Distance : 5

15
Tree	{ ( new NodeTraversal ( compiler , null , false ) ) . traverse ( compiler ) ; }
Code	{ ( new NodeTraversal ( compiler , null , false ) ) . traverse ( compiler ) ; }
Distance : 7

16
Tree	{ externs . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root , root ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root , root ) , null ) ; }
Distance : 10

17
Tree	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverse ( root ) ; }
Distance : 5

18
Tree	{ ( new NodeTraversal ( compiler , compiler , compiler , false ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , compiler , false ) ) . traverseRoots ( root ) ; }
Distance : 7

19
Tree	{ ( new NodeTraversal ( compiler , null , false ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , null , false ) ) . traverse ( root ) ; }
Distance : 6

20
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverse ( externs ) ; }
Distance : 5

21
Tree	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , this , externs ) ) . traverse ( externs ) ; }
Distance : 5

22
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( externs ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( externs ) , false ) ; }
Distance : 6

23
Tree	{ externs . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( root , root ) , null ) ; }
Code	{ externs . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( root , root ) , null ) ; }
Distance : 10

24
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( externs ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( externs ) , null ) ; }
Distance : 8

25
Tree	{ ( new NodeTraversal ( compiler , root , compiler , false ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , root , compiler , false ) ) . traverse ( root ) ; }
Distance : 8

26
Tree	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( externs ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( externs ) , false ) ; }
Distance : 6

27
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root , root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root , root ) , null ) ; }
Distance : 10

28
Tree	{ ( new NodeTraversal ( compiler , compiler , compiler , false ) ) . traverseRoots ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , compiler , false ) ) . traverseRoots ( externs ) ; }
Distance : 7

29
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( root , root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( root , root ) , null ) ; }
Distance : 10

30
Tree	{ compiler . traverse ( traverse ( NUMBER_CONSTANT , false ) , null ) ; }
Code	{ compiler . traverse ( traverse ( NUMBER_CONSTANT , false ) , null ) ; }
Distance : 13

31
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root ) , false ) ; }
Distance : 7

32
Tree	{ externs . traverse ( traverse ( NUMBER_CONSTANT , false ) , null ) ; }
Code	{ externs . traverse ( traverse ( NUMBER_CONSTANT , false ) , null ) ; }
Distance : 13

33
Tree	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , root ) . traverseRoots ( root ) , false ) ; }
Distance : 6

34
Tree	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root ) , null ) ; }
Code	{ compiler . traverse ( new NodeTraversal ( compiler , this , root ) . traverse ( root ) , null ) ; }
Distance : 9

35
Tree	{ new NodeTraversal ( compiler , this , root ) . traverse ( externs ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . traverse ( externs ) . traverse ( CHAR_CONS ) ; }
Distance : 9

36
Tree	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( root ) , false ) ; }
Code	{ traverse ( new NodeTraversal ( compiler , this , externs ) . traverse ( root ) , false ) ; }
Distance : 7

37
Tree	{ root . traverse ( traverse ( NUMBER_CONSTANT , false ) , null ) ; }
Code	{ root . traverse ( traverse ( NUMBER_CONSTANT , false ) , null ) ; }
Distance : 13

38
Tree	{ ( new NodeTraversal ( compiler , null , false ) ) . traverse ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , null , false ) ) . traverse ( externs ) ; }
Distance : 6

39
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , TypeInferenceMode.NEITHER ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , TypeInferenceMode.NEITHER ) ) . traverse ( root ) ; }
Distance : 5

40
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . traverseRoots ( root ) ; }
Distance : 4

41
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , JUnitRule.Strictness.WARN ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , JUnitRule.Strictness.WARN ) ) . traverse ( root ) ; }
Distance : 5

42
Tree	{ new NodeTraversal ( compiler , this , externs ) . traverse ( root , root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , externs ) . traverse ( root , root ) . traverse ( CHAR_CONS ) ; }
Distance : 10

43
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NodeTraversal ) ) . traverse ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NodeTraversal ) ) . traverse ( root ) ; }
Distance : 5

44
Tree	{ new NodeTraversal ( compiler , this , root ) . traverse ( externs , root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , root ) . traverse ( externs , root ) . traverse ( CHAR_CONS ) ; }
Distance : 9

45
Tree	{ new NodeTraversal ( compiler , this , compiler ) . traverse ( root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , compiler ) . traverse ( root ) . traverse ( CHAR_CONS ) ; }
Distance : 10

46
Tree	{ new NodeTraversal ( compiler , this , compiler ) . traverse ( root , root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , compiler ) . traverse ( root , root ) . traverse ( CHAR_CONS ) ; }
Distance : 10

47
Tree	{ new NodeTraversal ( compiler , this , externs ) . traverse ( root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , externs ) . traverse ( root ) . traverse ( CHAR_CONS ) ; }
Distance : 10

48
Tree	{ new NodeTraversal ( compiler , this , externs ) . traverse ( externs ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , externs ) . traverse ( externs ) . traverse ( CHAR_CONS ) ; }
Distance : 9

49
Tree	{ new NodeTraversal ( compiler , this , externs ) . traverse ( externs , root ) . traverse ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , externs ) . traverse ( externs , root ) . traverse ( CHAR_CONS ) ; }
Distance : 9

========================================================================


========================================================================
Example Number: 29
Parent Code is: 
Node catchBody = block ( catchNode ) . copyInformationFrom ( catchNode ) ;
-------------------------------------------------------------------------------
Child code is: 
Node catchBody = blockUnchecked ( catchNode ) . copyInformationFrom ( catchNode ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Node})) (59 (800{val=catchBody}) (204{val==}) (32 (32 (802{val=block}) (214{val=(}) (800{val=catchNode}) (215{val=)})) (235{val=.}) (802{val=copyInformationFrom}) (214{val=(}) (800{val=catchNode}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Node})) (59 (800{val=catchBody}) (204{val==}) (32 (32 (802{val=blockUnchecked}) (214{val=(}) (800{val=catchNode}) (215{val=)})) (235{val=.}) (802{val=copyInformationFrom}) (214{val=(}) (800{val=catchNode}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/27/parent/src_com_google_javascript_rhino_IR.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	Node catchBody = block ( catchNode , catchBody ) ;
Code	Node catchBody = block ( catchNode , catchBody ) ;
Distance : 6

1
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom () ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom () ;
Distance : 5

2
Tree	Node catchBody = block . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block . copyInformationFrom ( catchBody ) ;
Distance : 5

3
Tree	Node catchBody = catchBody . block ( catchBody ) ;
Code	Node catchBody = catchBody . block ( catchBody ) ;
Distance : 6

4
Tree	Node catchBody = catchBody ( catchBody ) ;
Code	Node catchBody = catchBody ( catchBody ) ;
Distance : 7

5
Tree	Node catchBody = this . catchBody . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = this . catchBody . copyInformationFrom ( catchNode ) ;
Distance : 4

6
Tree	Node catchBody = block ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) ;
Distance : 7

7
Tree	Node catchBody = this . catchBody . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = this . catchBody . copyInformationFrom ( catchBody ) ;
Distance : 5

8
Tree	Node catchBody = catchBody . block ( catchBody ) ;
Code	Node catchBody = catchBody . block ( catchBody ) ;
Distance : 6

9
Tree	Node catchBody = this . catchBody . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = this . catchBody . copyInformationFrom ( catchNode ) ;
Distance : 4

10
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchNode ) ;
Distance : 2

11
Tree	Node catchBody = catchBody ( catchNode ) ;
Code	Node catchBody = catchBody ( catchNode ) ;
Distance : 6

12
Tree	Node catchBody = block ( catchNode ) ;
Code	Node catchBody = block ( catchNode ) ;
Distance : 6

13
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchNode ) ;
Distance : 2

14
Tree	Node catchBody = block ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) ;
Distance : 7

15
Tree	Node catchBody = catchBody ( catchBody ) ;
Code	Node catchBody = catchBody ( catchBody ) ;
Distance : 7

16
Tree	Node catchBody = this . catchBody . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = this . catchBody . copyInformationFrom ( catchBody ) ;
Distance : 5

17
Tree	Node catchBody = block . block ( catchNode ) ;
Code	Node catchBody = block . block ( catchNode ) ;
Distance : 5

18
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 3

19
Tree	Node catchBody = block ( catchBody , catchBody ) ;
Code	Node catchBody = block ( catchBody , catchBody ) ;
Distance : 7

20
Tree	Node catchBody = block . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block . copyInformationFrom ( catchBody ) ;
Distance : 5

21
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom () ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom () ;
Distance : 5

22
Tree	Node catchBody = block . block ( catchBody ) ;
Code	Node catchBody = block . block ( catchBody ) ;
Distance : 6

23
Tree	Node catchBody = block ( catchNode ) ;
Code	Node catchBody = block ( catchNode ) ;
Distance : 6

24
Tree	Node catchBody = block ( catchBody , this . catchBody ) ;
Code	Node catchBody = block ( catchBody , this . catchBody ) ;
Distance : 7

25
Tree	Node catchBody = block ( catchNode , this . catchBody ) ;
Code	Node catchBody = block ( catchNode , this . catchBody ) ;
Distance : 6

26
Tree	Node catchBody = this . catchBody . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = this . catchBody . copyInformationFrom ( catchBody ) ;
Distance : 5

27
Tree	Node catchBody = block ( catchNode ) . copyInformationFrom () ;
Code	Node catchBody = block ( catchNode ) . copyInformationFrom () ;
Distance : 4

28
Tree	Node catchBody = EigenDecompositionImpl . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = EigenDecompositionImpl . copyInformationFrom ( catchBody ) ;
Distance : 5

29
Tree	Node catchBody = block ( catchNode ) ;
Code	Node catchBody = block ( catchNode ) ;
Distance : 6

30
Tree	Node catchBody = block ( catchNode , catchNode ) ;
Code	Node catchBody = block ( catchNode , catchNode ) ;
Distance : 5

31
Tree	Node catchBody = block ( catchBody , catchNode ) ;
Code	Node catchBody = block ( catchBody , catchNode ) ;
Distance : 6

32
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom () ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom () ;
Distance : 5

33
Tree	Node catchBody = TypeInferenceMode.DISABLED . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = TypeInferenceMode.DISABLED . copyInformationFrom ( catchBody ) ;
Distance : 5

34
Tree	Node catchBody = block ( catchBody , this . catchNode ) ;
Code	Node catchBody = block ( catchBody , this . catchNode ) ;
Distance : 6

35
Tree	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) . copyInformationFrom ( catchBody ) ;
Distance : 3

36
Tree	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block ( catchNode ) . copyInformationFrom ( catchBody ) ;
Distance : 2

37
Tree	Node catchBody = block ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) ;
Distance : 7

38
Tree	Node catchBody = block ( catchBody ) ;
Code	Node catchBody = block ( catchBody ) ;
Distance : 7

39
Tree	Node catchBody = block ( catchNode ) . copyInformationFrom () ;
Code	Node catchBody = block ( catchNode ) . copyInformationFrom () ;
Distance : 4

40
Tree	Node catchBody = catchBody . block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = catchBody . block () . copyInformationFrom ( catchBody ) ;
Distance : 5

41
Tree	Node catchBody = GradientPaint . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = GradientPaint . copyInformationFrom ( catchBody ) ;
Distance : 5

42
Tree	Node catchBody = block ( catchBody , this . catchBody ) ;
Code	Node catchBody = block ( catchBody , this . catchBody ) ;
Distance : 7

43
Tree	Node catchBody = catchBody . block ( catchNode ) ;
Code	Node catchBody = catchBody . block ( catchNode ) ;
Distance : 5

44
Tree	Node catchBody = catchBody . block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = catchBody . block () . copyInformationFrom ( catchBody ) ;
Distance : 5

45
Tree	Node catchBody = block ( catchBody , catchBody ) ;
Code	Node catchBody = block ( catchBody , catchBody ) ;
Distance : 7

46
Tree	Node catchBody = block ( catchNode , this . catchNode ) ;
Code	Node catchBody = block ( catchNode , this . catchNode ) ;
Distance : 5

47
Tree	Node catchBody = catchBody . block () . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = catchBody . block () . copyInformationFrom ( catchNode ) ;
Distance : 4

48
Tree	Node catchBody = catchBody . block () . copyInformationFrom ( catchNode ) ;
Code	Node catchBody = catchBody . block () . copyInformationFrom ( catchNode ) ;
Distance : 4

49
Tree	Node catchBody = block . block () . copyInformationFrom ( catchBody ) ;
Code	Node catchBody = block . block () . copyInformationFrom ( catchBody ) ;
Distance : 5

========================================================================


========================================================================
Example Number: 30
Parent Code is: 
{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
-------------------------------------------------------------------------------
Child code is: 
{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.ON_EX , finallyNode ) ; } }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (70 (303{val=for}) (214{val=(}) (44 (43 (801{val=Node})) (800{val=finallyNode})) (226{val=:}) (32 (40{val=cfa.finallyMap}) (235{val=.}) (802{val=get}) (214{val=(}) (800{val=parent}) (215{val=)})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=cfa}) (235{val=.}) (802{val=createEdge}) (214{val=(}) (800{val=fromNode}) (234{val=,}) (40{val=Branch.UNCOND}) (234{val=,}) (800{val=finallyNode}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (70 (303{val=for}) (214{val=(}) (44 (43 (801{val=Node})) (800{val=finallyNode})) (226{val=:}) (32 (40{val=cfa.finallyMap}) (235{val=.}) (802{val=get}) (214{val=(}) (800{val=parent}) (215{val=)})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=cfa}) (235{val=.}) (802{val=createEdge}) (214{val=(}) (800{val=fromNode}) (234{val=,}) (40{val=Branch.ON_EX}) (234{val=,}) (800{val=finallyNode}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/14/parent/src_com_google_javascript_jscomp_ControlFlowAnalysis.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 7

1
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 9

2
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 7

3
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 13

4
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 9

5
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 12

6
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 14

7
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , finallyNode , fromNode , fromNode , fromNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 13

8
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode ) ; } }
Distance : 6

9
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , fromNode , fromNode , fromNode , finallyNode , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 13

10
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge () . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge () . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Distance : 7

11
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge () . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge () . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Distance : 8

12
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { createEdge () . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { createEdge () . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Distance : 7

13
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge () . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge () . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Distance : 6

14
Tree	{ for ( Node fromNode : parent . get ( parent ) ) { createEdge () . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Code	{ for ( Node fromNode : parent . get ( parent ) ) { createEdge () . createEdge ( Branch.UNCOND , Branch.UNCOND ) ; } }
Distance : 8

15
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Distance : 7

16
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( false ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( false ) ; } }
Distance : 6

17
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Distance : 8

18
Tree	{ for ( Node finallyNode : fromNode . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : fromNode . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

19
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( false ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( false ) ; } }
Distance : 7

20
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { fromNode . createEdge ( false ) ; } }
Distance : 7

21
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 8

22
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 6

23
Tree	{ for ( Node fromNode : fromNode . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : fromNode . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 10

24
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 8

25
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 5

26
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 8

27
Tree	{ for ( Node fromNode : parent . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : parent . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 7

28
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

29
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( parent , null ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { createEdge ( parent , null ) ; } }
Distance : 9

30
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 5

31
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { cfa . createEdge ( fromNode , STRING_CONSTANT ) ; } }
Distance : 4

32
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 9

33
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( Branch.UNCOND , STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { fromNode . createEdge ( Branch.UNCOND , STRING_CONSTANT ) ; } }
Distance : 7

34
Tree	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : fromNode . get ( parent ) ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 8

35
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , ) ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , ) ) ; } }
Distance : 9

36
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Distance : 9

37
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { fromNode . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 10

38
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( Branch.UNCOND , STRING_CONSTANT ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { cfa . createEdge ( Branch.UNCOND , STRING_CONSTANT ) ; } }
Distance : 6

39
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Distance : 10

40
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { this . fromNode . createEdge ( fromNode , fromNode ) ; } }
Distance : 9

41
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { this . cfa . createEdge ( fromNode , fromNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { this . cfa . createEdge ( fromNode , fromNode ) ; } }
Distance : 8

42
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { cfa . createEdge ( fromNode , fromNode , fromNode , fromNode , fromNode ) ; } }
Distance : 10

43
Tree	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( Branch.UNCOND , STRING_CONSTANT ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { fromNode . createEdge ( Branch.UNCOND , STRING_CONSTANT ) ; } }
Distance : 5

44
Tree	{ for ( Node finallyNode : parent . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : parent . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

45
Tree	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : cfa.finallyMap . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

46
Tree	{ for ( Node finallyNode : cfa.finallyMap . get () ) { this . fromNode . createEdge ( fromNode , finallyNode ) ; } }
Code	{ for ( Node finallyNode : cfa.finallyMap . get () ) { this . fromNode . createEdge ( fromNode , finallyNode ) ; } }
Distance : 8

47
Tree	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node fromNode : fromNode . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 7

48
Tree	{ for ( Node finallyNode : fromNode . get () ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : fromNode . get () ) { createEdge ( fromNode , null ) ; } }
Distance : 9

49
Tree	{ for ( Node finallyNode : parent . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Code	{ for ( Node finallyNode : parent . get ( parent ) ) { createEdge ( fromNode , null ) ; } }
Distance : 6

========================================================================


========================================================================
Example Number: 31
Parent Code is: 
{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
-------------------------------------------------------------------------------
Child code is: 
{ if ( recurse ) { return anyResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (800{val=recurse}) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=allResultsMatch}) (214{val=(}) (800{val=n}) (234{val=,}) (800{val=MAY_BE_STRING_PREDICATE}) (215{val=)})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=mayBeStringHelper}) (214{val=(}) (800{val=n}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (800{val=recurse}) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=anyResultsMatch}) (214{val=(}) (800{val=n}) (234{val=,}) (800{val=MAY_BE_STRING_PREDICATE}) (215{val=)})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=mayBeStringHelper}) (214{val=(}) (800{val=n}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/10/parent/src_com_google_javascript_jscomp_NodeUtil.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 3

1
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 4

2
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 5

3
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 5

4
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 6

5
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , n ) ; } }
Distance : 7

6
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 5

7
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 4

8
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 5

9
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 6

10
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 3

11
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 5

12
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 6

13
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 3

14
Tree	{ if ( recurse ) { return n . allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 6

15
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 11

16
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

17
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 5

18
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 11

19
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 7

20
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 5

21
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 4

22
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 6

23
Tree	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 3

24
Tree	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 5

25
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 7

26
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

27
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Distance : 8

28
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 10

29
Tree	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Distance : 9

30
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Distance : 8

31
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 7

32
Tree	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 3

33
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , n ) ; } }
Distance : 5

34
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } }
Distance : 8

35
Tree	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

36
Tree	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 8

37
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 10

38
Tree	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( n ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 6

39
Tree	{ if ( recurse ) { return n . allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return n . allResultsMatch ( n , n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 6

40
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 5

41
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 5

42
Tree	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n , n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) ; } }
Distance : 4

43
Tree	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Distance : 9

44
Tree	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Code	{ if ( n ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper ( n ) ; } }
Distance : 6

45
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return mayBeStringHelper () . mayBeStringHelper ( n ) ; } }
Distance : 8

46
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n ) . mayBeStringHelper ( n ) ; } }
Distance : 10

47
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return mayBeStringHelper . mayBeStringHelper ( n , n ) ; } }
Distance : 7

48
Tree	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Code	{ if ( recurse ) { return allResultsMatch . allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n ) ; } }
Distance : 7

49
Tree	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Code	{ if ( recurse ) { return allResultsMatch ( n ) ; } else { return n . mayBeStringHelper ( n , MAY_BE_STRING_PREDICATE ) ; } }
Distance : 7

========================================================================


========================================================================
Example Number: 32
Parent Code is: 
String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
-------------------------------------------------------------------------------
Child code is: 
String moduleName = guessCJSModuleName ( script . getSourceFileName () ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=moduleName}) (204{val==}) (32 (802{val=guessCJSModuleName}) (214{val=(}) (32 (802{val=normalizeSourceName}) (214{val=(}) (32 (800{val=script}) (235{val=.}) (802{val=getSourceFileName}) (216{val=()})) (215{val=)})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=moduleName}) (204{val==}) (32 (802{val=guessCJSModuleName}) (214{val=(}) (32 (800{val=script}) (235{val=.}) (802{val=getSourceFileName}) (216{val=()})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/9/parent/src_com_google_javascript_jscomp_ProcessCommonJSModules.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Distance : 7

1
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , else ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , else ) ;
Distance : 8

2
Tree	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script ) ) ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script ) ) ) ;
Distance : 7

3
Tree	String script = guessCJSModuleName ( script , NUMBER_CONSTANT ) ;
Code	String script = guessCJSModuleName ( script , NUMBER_CONSTANT ) ;
Distance : 4

4
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script ) ) ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( getSourceFileName ( script ) ) ) ;
Distance : 6

5
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( getSourceFileName ( script ) ) ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( getSourceFileName ( script ) ) ) ;
Distance : 7

6
Tree	String moduleName = getSourceFileName ( moduleName ) ;
Code	String moduleName = getSourceFileName ( moduleName ) ;
Distance : 5

7
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 10

8
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Distance : 4

9
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , CHAR_CONS ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , CHAR_CONS ) ;
Distance : 6

10
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Distance : 8

11
Tree	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = getSourceFileName ( normalizeSourceName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

12
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , super ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , super ) ;
Distance : 6

13
Tree	String moduleName = getSourceFileName ( script , moduleName ) ;
Code	String moduleName = getSourceFileName ( script , moduleName ) ;
Distance : 4

14
Tree	String moduleName = getSourceFileName ( script , script ) ;
Code	String moduleName = getSourceFileName ( script , script ) ;
Distance : 4

15
Tree	String moduleName = guessCJSModuleName ( script , script ) ;
Code	String moduleName = guessCJSModuleName ( script , script ) ;
Distance : 3

16
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 9

17
Tree	String moduleName = guessCJSModuleName ( script , NUMBER_CONSTANT ) ;
Code	String moduleName = guessCJSModuleName ( script , NUMBER_CONSTANT ) ;
Distance : 3

18
Tree	String moduleName = getSourceFileName ( s.parent ) ;
Code	String moduleName = getSourceFileName ( s.parent ) ;
Distance : 5

19
Tree	String moduleName = getSourceFileName ( script ) ;
Code	String moduleName = getSourceFileName ( script ) ;
Distance : 4

20
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( getSourceFileName ( script ) ) ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( getSourceFileName ( script ) ) ) ;
Distance : 6

21
Tree	String moduleName = getSourceFileName ( TokenType.STRING ) ;
Code	String moduleName = getSourceFileName ( TokenType.STRING ) ;
Distance : 5

22
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Distance : 8

23
Tree	String moduleName = guessCJSModuleName ( s.parent ) ;
Code	String moduleName = guessCJSModuleName ( s.parent ) ;
Distance : 4

24
Tree	String moduleName = getSourceFileName ( script , NUMBER_CONSTANT ) ;
Code	String moduleName = getSourceFileName ( script , NUMBER_CONSTANT ) ;
Distance : 4

25
Tree	String moduleName = getSourceFileName ( addPeriodInto ) ;
Code	String moduleName = getSourceFileName ( addPeriodInto ) ;
Distance : 5

26
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 8

27
Tree	String moduleName = guessCJSModuleName ( script ) ;
Code	String moduleName = guessCJSModuleName ( script ) ;
Distance : 3

28
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , else ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , else ) ;
Distance : 6

29
Tree	String script = getSourceFileName ( script ) ;
Code	String script = getSourceFileName ( script ) ;
Distance : 5

30
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , else ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , else ) ;
Distance : 5

31
Tree	String script = getSourceFileName ( getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String script = getSourceFileName ( getSourceFileName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 10

32
Tree	String script = getSourceFileName ( script , NUMBER_CONSTANT ) ;
Code	String script = getSourceFileName ( script , NUMBER_CONSTANT ) ;
Distance : 5

33
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , CHAR_CONS ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , CHAR_CONS ) ;
Distance : 5

34
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 9

35
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script , script ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script , script ) ;
Distance : 10

36
Tree	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script ) ) ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( getSourceFileName ( script ) ) ) ;
Distance : 7

37
Tree	String moduleName = getSourceFileName ( moduleName , NUMBER_CONSTANT ) ;
Code	String moduleName = getSourceFileName ( moduleName , NUMBER_CONSTANT ) ;
Distance : 5

38
Tree	String script = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String script = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 5

39
Tree	String moduleName = getSourceFileName ( AnnotationAppender.ValueFilter.AppendDefaults.INSTANCE ) ;
Code	String moduleName = getSourceFileName ( AnnotationAppender.ValueFilter.AppendDefaults.INSTANCE ) ;
Distance : 5

40
Tree	String script = getSourceFileName ( script , script ) ;
Code	String script = getSourceFileName ( script , script ) ;
Distance : 5

41
Tree	String script = guessCJSModuleName ( script , script ) ;
Code	String script = guessCJSModuleName ( script , script ) ;
Distance : 4

42
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 4

43
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) ) ;
Distance : 3

44
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
Distance : 3

45
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 8

46
Tree	String script = guessCJSModuleName ( script ) ;
Code	String script = guessCJSModuleName ( script ) ;
Distance : 4

47
Tree	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Code	String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Distance : 7

48
Tree	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = getSourceFileName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 10

49
Tree	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Code	String moduleName = guessCJSModuleName ( getSourceFileName ( script . getSourceFileName () ) , STRING_CONSTANT , script , moduleName ) ;
Distance : 9

========================================================================


========================================================================
Example Number: 33
Parent Code is: 
c . canInline ()
-------------------------------------------------------------------------------
Child code is: 
c . canInline ( t . getScope () )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (32 (800{val=c}) (235{val=.}) (802{val=canInline}) (216{val=()})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (32 (800{val=c}) (235{val=.}) (802{val=canInline}) (214{val=(}) (32 (800{val=t}) (235{val=.}) (802{val=getScope}) (216{val=()})) (215{val=)})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/3/parent/src_com_google_javascript_jscomp_FlowSensitiveInlineVariables.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	c . canInline ( c . getScope () )
Code	c . canInline ( c . getScope () )
Distance : 1

1
Tree	canInline ( c )
Code	canInline ( c )
Distance : 6

2
Tree	t . canInline ()
Code	t . canInline ()
Distance : 6

3
Tree	( ( c ) t ) . canInline ()
Code	( ( c ) t ) . canInline ()
Distance : 7

4
Tree	c . canInline () !=
Code	c . canInline () !=
Distance : 5

5
Tree	t . canInline ( c )
Code	t . canInline ( c )
Distance : 5

6
Tree	c . canInline ()
Code	c . canInline ()
Distance : 5

7
Tree	c . getScope ( c )
Code	c . getScope ( c )
Distance : 5

8
Tree	c . canInline ( Feature.MODULES )
Code	c . canInline ( Feature.MODULES )
Distance : 4

9
Tree	c . canInline ( PARAM.escapePlus )
Code	c . canInline ( PARAM.escapePlus )
Distance : 4

10
Tree	canInline () i
Code	canInline () i
Distance : 7

11
Tree	c . canInline ( c )
Code	c . canInline ( c )
Distance : 4

12
Tree	( ( c ) t ) . getScope ()
Code	( ( c ) t ) . getScope ()
Distance : 6

13
Tree	c . canInline ( Nullability.IMPLICIT )
Code	c . canInline ( Nullability.IMPLICIT )
Distance : 4

14
Tree	new ObjectStreamClass ( c ) . canInline ()
Code	new ObjectStreamClass ( c ) . canInline ()
Distance : 7

15
Tree	c . getScope ()
Code	c . getScope ()
Distance : 5

16
Tree	c . canInline ( t )
Code	c . canInline ( t )
Distance : 3

17
Tree	getScope ( t )
Code	getScope ( t )
Distance : 6

18
Tree	c . canInline ( flags.chromePass )
Code	c . canInline ( flags.chromePass )
Distance : 4

19
Tree	canInline () +
Code	canInline () +
Distance : 7

20
Tree	new UnicodeUnescaper ( c ) . canInline ()
Code	new UnicodeUnescaper ( c ) . canInline ()
Distance : 7

21
Tree	canInline ()
Code	canInline ()
Distance : 7

22
Tree	this . c . canInline ()
Code	this . c . canInline ()
Distance : 6

23
Tree	c . canInline ( t . canInline () )
Code	c . canInline ( t . canInline () )
Distance : 1

24
Tree	new ExportTestFunctionsNodes ( c ) . canInline ()
Code	new ExportTestFunctionsNodes ( c ) . canInline ()
Distance : 7

25
Tree	c . canInline () . getScope ()
Code	c . canInline () . getScope ()
Distance : 3

26
Tree	c . canInline ( Token.GETELEM )
Code	c . canInline ( Token.GETELEM )
Distance : 4

27
Tree	( ( c ) c ) . canInline ()
Code	( ( c ) c ) . canInline ()
Distance : 8

28
Tree	new PomComparator ( c ) . canInline ()
Code	new PomComparator ( c ) . canInline ()
Distance : 7

29
Tree	this . t . getScope ()
Code	this . t . getScope ()
Distance : 4

30
Tree	this . c . getScope ()
Code	this . c . getScope ()
Distance : 5

31
Tree	c . getScope () . canInline ()
Code	c . getScope () . canInline ()
Distance : 5

32
Tree	getScope ()
Code	getScope ()
Distance : 7

33
Tree	getScope ( c )
Code	getScope ( c )
Distance : 7

34
Tree	c . canInline () . canInline ()
Code	c . canInline () . canInline ()
Distance : 4

35
Tree	c . canInline ( c . canInline () )
Code	c . canInline ( c . canInline () )
Distance : 2

36
Tree	c . getScope ( c . getScope () )
Code	c . getScope ( c . getScope () )
Distance : 2

37
Tree	( ( t ) c ) . canInline ()
Code	( ( t ) c ) . canInline ()
Distance : 8

38
Tree	c . getScope ( t )
Code	c . getScope ( t )
Distance : 4

39
Tree	t . canInline () . canInline ()
Code	t . canInline () . canInline ()
Distance : 5

40
Tree	c . getScope () . getScope ()
Code	c . getScope () . getScope ()
Distance : 4

41
Tree	t . getScope ()
Code	t . getScope ()
Distance : 5

42
Tree	canInline ( c ) !=
Code	canInline ( c ) !=
Distance : 7

43
Tree	this . t . canInline ()
Code	this . t . canInline ()
Distance : 5

44
Tree	new InitialGuess ( c ) . canInline ()
Code	new InitialGuess ( c ) . canInline ()
Distance : 7

45
Tree	( ( c ) c ) . getScope ()
Code	( ( c ) c ) . getScope ()
Distance : 7

46
Tree	c . getScope ( c . canInline () )
Code	c . getScope ( c . canInline () )
Distance : 3

47
Tree	canInline ( t )
Code	canInline ( t )
Distance : 5

48
Tree	canInline () value
Code	canInline () value
Distance : 7

49
Tree	this . c . canInline () !=
Code	this . c . canInline () !=
Distance : 6

========================================================================


========================================================================
Example Number: 34
Parent Code is: 
int len = thisBuf.length - strLen ;
-------------------------------------------------------------------------------
Child code is: 
int len = size - strLen + NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=len}) (204{val==}) (27 (40{val=thisBuf.length}) (201{val=-}) (800{val=strLen}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=len}) (204{val==}) (27 (27 (800{val=size}) (201{val=-}) (800{val=strLen})) (200{val=+}) (34{val=NUMBER_CONSTANT}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/61/parent/src_java_org_apache_commons_lang_text_StrBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	int len = size / strLen ;
Code	int len = size / strLen ;
Distance : 3

1
Tree	double len = len & NUMBER_CONSTANT ;
Code	double len = len & NUMBER_CONSTANT ;
Distance : 5

2
Tree	int len = len / strLen ;
Code	int len = len / strLen ;
Distance : 4

3
Tree	double len = STRING_CONSTANT + STRING_CONSTANT - len ;
Code	double len = STRING_CONSTANT + STRING_CONSTANT - len ;
Distance : 6

4
Tree	int len = len + strLen + strLen + len ;
Code	int len = len + strLen + strLen + len ;
Distance : 5

5
Tree	int len = size - strLen ;
Code	int len = size - strLen ;
Distance : 2

6
Tree	int len = len - strLen ;
Code	int len = len - strLen ;
Distance : 3

7
Tree	int len = NUMBER_CONSTANT * strLen * strLen * thisBuf.length ;
Code	int len = NUMBER_CONSTANT * strLen * strLen * thisBuf.length ;
Distance : 6

8
Tree	int len = strLen / strLen ;
Code	int len = strLen / strLen ;
Distance : 4

9
Tree	int len = size / strLen - len ;
Code	int len = size / strLen - len ;
Distance : 3

10
Tree	int len = size - len ;
Code	int len = size - len ;
Distance : 3

11
Tree	double len = size + strLen + strLen + strLen ;
Code	double len = size + strLen + strLen + strLen ;
Distance : 5

12
Tree	char len = NUMBER_CONSTANT * thisBuf.length ;
Code	char len = NUMBER_CONSTANT * thisBuf.length ;
Distance : 6

13
Tree	int len = NUMBER_CONSTANT * strLen * len * thisBuf.length ;
Code	int len = NUMBER_CONSTANT * strLen * len * thisBuf.length ;
Distance : 6

14
Tree	int len = STRING_CONSTANT + len ;
Code	int len = STRING_CONSTANT + len ;
Distance : 4

15
Tree	long len = STRING_CONSTANT + strLen ;
Code	long len = STRING_CONSTANT + strLen ;
Distance : 5

16
Tree	int len = size / strLen - strLen ;
Code	int len = size / strLen - strLen ;
Distance : 3

17
Tree	double len = NUMBER_CONSTANT * thisBuf.length ;
Code	double len = NUMBER_CONSTANT * thisBuf.length ;
Distance : 6

18
Tree	boolean len = NUMBER_CONSTANT * thisBuf.length ;
Code	boolean len = NUMBER_CONSTANT * thisBuf.length ;
Distance : 6

19
Tree	double len = size & NUMBER_CONSTANT ;
Code	double len = size & NUMBER_CONSTANT ;
Distance : 4

20
Tree	double len = NUMBER_CONSTANT * strLen * strLen * thisBuf.length ;
Code	double len = NUMBER_CONSTANT * strLen * strLen * thisBuf.length ;
Distance : 7

21
Tree	long len = NUMBER_CONSTANT * strLen * strLen * thisBuf.length ;
Code	long len = NUMBER_CONSTANT * strLen * strLen * thisBuf.length ;
Distance : 7

22
Tree	int len = len + strLen + strLen + strLen ;
Code	int len = len + strLen + strLen + strLen ;
Distance : 5

23
Tree	int len = len / strLen - strLen ;
Code	int len = len / strLen - strLen ;
Distance : 4

24
Tree	int len = size & NUMBER_CONSTANT ;
Code	int len = size & NUMBER_CONSTANT ;
Distance : 3

25
Tree	double len = len - strLen ;
Code	double len = len - strLen ;
Distance : 4

26
Tree	double len = size / strLen - strLen ;
Code	double len = size / strLen - strLen ;
Distance : 4

27
Tree	long len = NUMBER_CONSTANT * thisBuf.length ;
Code	long len = NUMBER_CONSTANT * thisBuf.length ;
Distance : 6

28
Tree	double len = len / strLen - strLen ;
Code	double len = len / strLen - strLen ;
Distance : 5

29
Tree	int len = len & NUMBER_CONSTANT ;
Code	int len = len & NUMBER_CONSTANT ;
Distance : 4

30
Tree	long len = size & NUMBER_CONSTANT ;
Code	long len = size & NUMBER_CONSTANT ;
Distance : 4

31
Tree	int len = NUMBER_CONSTANT * len * strLen * thisBuf.length ;
Code	int len = NUMBER_CONSTANT * len * strLen * thisBuf.length ;
Distance : 6

32
Tree	int len = size + strLen + strLen + len ;
Code	int len = size + strLen + strLen + len ;
Distance : 4

33
Tree	int len = STRING_CONSTANT + strLen ;
Code	int len = STRING_CONSTANT + strLen ;
Distance : 4

34
Tree	boolean len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	boolean len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

35
Tree	char len = STRING_CONSTANT + STRING_CONSTANT - len ;
Code	char len = STRING_CONSTANT + STRING_CONSTANT - len ;
Distance : 6

36
Tree	long len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	long len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

37
Tree	int len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 12

38
Tree	int len = STRING_CONSTANT + STRING_CONSTANT - len ;
Code	int len = STRING_CONSTANT + STRING_CONSTANT - len ;
Distance : 5

39
Tree	int len = size + strLen + strLen + strLen ;
Code	int len = size + strLen + strLen + strLen ;
Distance : 4

40
Tree	int len = STRING_CONSTANT + STRING_CONSTANT - strLen ;
Code	int len = STRING_CONSTANT + STRING_CONSTANT - strLen ;
Distance : 5

41
Tree	long len = STRING_CONSTANT + STRING_CONSTANT - len ;
Code	long len = STRING_CONSTANT + STRING_CONSTANT - len ;
Distance : 6

42
Tree	double len = size / strLen ;
Code	double len = size / strLen ;
Distance : 4

43
Tree	double len = len / strLen ;
Code	double len = len / strLen ;
Distance : 5

44
Tree	double len = STRING_CONSTANT + strLen ;
Code	double len = STRING_CONSTANT + strLen ;
Distance : 5

45
Tree	int len = NUMBER_CONSTANT * thisBuf.length ;
Code	int len = NUMBER_CONSTANT * thisBuf.length ;
Distance : 5

46
Tree	char len = STRING_CONSTANT + strLen ;
Code	char len = STRING_CONSTANT + strLen ;
Distance : 5

47
Tree	double len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	double len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

48
Tree	double len = size - strLen ;
Code	double len = size - strLen ;
Distance : 3

49
Tree	char len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	char len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

========================================================================


========================================================================
Example Number: 35
Parent Code is: 
i < thisBuf.length
-------------------------------------------------------------------------------
Child code is: 
i < size
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (800{val=i}) (230{val=<}) (40{val=thisBuf.length})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (800{val=i}) (230{val=<}) (800{val=size})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/60/parent/src_java_org_apache_commons_lang_text_StrBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	i > NUMBER_CONSTANT
Code	i > NUMBER_CONSTANT
Distance : 2

1
Tree	getIgnoredMatcher () != thisBuf.length
Code	getIgnoredMatcher () != thisBuf.length
Distance : 4

2
Tree	markStubUsed ( i ) != thisBuf.length
Code	markStubUsed ( i ) != thisBuf.length
Distance : 5

3
Tree	i . getBeta () != thisBuf.length
Code	i . getBeta () != thisBuf.length
Distance : 5

4
Tree	i < thisBuf.length
Code	i < thisBuf.length
Distance : 1

5
Tree	i > NUMBER_CONSTANT +
Code	i > NUMBER_CONSTANT +
Distance : 3

6
Tree	i < thisBuf.length i
Code	i < thisBuf.length i
Distance : 2

7
Tree	i < thisBuf.length value
Code	i < thisBuf.length value
Distance : 2

8
Tree	i == i !=
Code	i == i !=
Distance : 3

9
Tree	i < thisBuf.length +
Code	i < thisBuf.length +
Distance : 2

10
Tree	this == i i
Code	this == i i
Distance : 4

11
Tree	this == i +
Code	this == i +
Distance : 4

12
Tree	i == thisBuf.length +
Code	i == thisBuf.length +
Distance : 3

13
Tree	i / i !=
Code	i / i !=
Distance : 3

14
Tree	isBuiltinObject () != thisBuf.length
Code	isBuiltinObject () != thisBuf.length
Distance : 4

15
Tree	i == i
Code	i == i
Distance : 2

16
Tree	this == i
Code	this == i
Distance : 3

17
Tree	i == thisBuf.length
Code	i == thisBuf.length
Distance : 2

18
Tree	i / i
Code	i / i
Distance : 2

19
Tree	i > NUMBER_CONSTANT i
Code	i > NUMBER_CONSTANT i
Distance : 3

20
Tree	i == thisBuf.length value
Code	i == thisBuf.length value
Distance : 3

21
Tree	skipStringLiteralEscapeSequence () != thisBuf.length
Code	skipStringLiteralEscapeSequence () != thisBuf.length
Distance : 4

22
Tree	i . valueOf () != thisBuf.length
Code	i . valueOf () != thisBuf.length
Distance : 5

23
Tree	size > NUMBER_CONSTANT
Code	size > NUMBER_CONSTANT
Distance : 3

24
Tree	i == size
Code	i == size
Distance : 1

25
Tree	this == size
Code	this == size
Distance : 2

26
Tree	isBuiltinObject ( i ) != thisBuf.length
Code	isBuiltinObject ( i ) != thisBuf.length
Distance : 5

27
Tree	this == i value
Code	this == i value
Distance : 4

28
Tree	skipStringLiteralEscapeSequence ( i ) != thisBuf.length
Code	skipStringLiteralEscapeSequence ( i ) != thisBuf.length
Distance : 5

29
Tree	i . stubInfo () != thisBuf.length
Code	i . stubInfo () != thisBuf.length
Distance : 5

30
Tree	i == thisBuf.length && i
Code	i == thisBuf.length && i
Distance : 4

31
Tree	size == i
Code	size == i
Distance : 3

32
Tree	stubInfo ( i ) != thisBuf.length
Code	stubInfo ( i ) != thisBuf.length
Distance : 5

33
Tree	size == thisBuf.length
Code	size == thisBuf.length
Distance : 3

34
Tree	size / i
Code	size / i
Distance : 3

35
Tree	i == thisBuf.length && size
Code	i == thisBuf.length && size
Distance : 3

36
Tree	size == size
Code	size == size
Distance : 2

37
Tree	size / size
Code	size / size
Distance : 2

38
Tree	size == thisBuf.length && i
Code	size == thisBuf.length && i
Distance : 5

39
Tree	i . isStruct () != thisBuf.length
Code	i . isStruct () != thisBuf.length
Distance : 5

40
Tree	size == thisBuf.length && size
Code	size == thisBuf.length && size
Distance : 4

41
Tree	i / size
Code	i / size
Distance : 1

42
Tree	size < thisBuf.length
Code	size < thisBuf.length
Distance : 2

43
Tree	i > NUMBER_CONSTANT value
Code	i > NUMBER_CONSTANT value
Distance : 3

44
Tree	i == thisBuf.length i
Code	i == thisBuf.length i
Distance : 3

45
Tree	stubInfo () != thisBuf.length
Code	stubInfo () != thisBuf.length
Distance : 4

46
Tree	getIgnoredMatcher ( i ) != thisBuf.length
Code	getIgnoredMatcher ( i ) != thisBuf.length
Distance : 5

47
Tree	i . copySelf () != thisBuf.length
Code	i . copySelf () != thisBuf.length
Distance : 5

48
Tree	markStubUsed () != thisBuf.length
Code	markStubUsed () != thisBuf.length
Distance : 4

49
Tree	i == thisBuf.length && i !=
Code	i == thisBuf.length && i !=
Distance : 5

========================================================================


========================================================================
Example Number: 36
Parent Code is: 
i < thisBuf.length
-------------------------------------------------------------------------------
Child code is: 
i < this . size
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (800{val=i}) (230{val=<}) (40{val=thisBuf.length})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (800{val=i}) (230{val=<}) (22 (315{val=this}) (235{val=.}) (800{val=size}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/60/parent/src_java_org_apache_commons_lang_text_StrBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	i > NUMBER_CONSTANT
Code	i > NUMBER_CONSTANT
Distance : 4

1
Tree	getIgnoredMatcher () != thisBuf.length
Code	getIgnoredMatcher () != thisBuf.length
Distance : 5

2
Tree	markStubUsed ( i ) != thisBuf.length
Code	markStubUsed ( i ) != thisBuf.length
Distance : 6

3
Tree	i . getBeta () != thisBuf.length
Code	i . getBeta () != thisBuf.length
Distance : 5

4
Tree	i < thisBuf.length
Code	i < thisBuf.length
Distance : 3

5
Tree	i > NUMBER_CONSTANT +
Code	i > NUMBER_CONSTANT +
Distance : 4

6
Tree	i < thisBuf.length i
Code	i < thisBuf.length i
Distance : 3

7
Tree	i < thisBuf.length value
Code	i < thisBuf.length value
Distance : 3

8
Tree	i == i !=
Code	i == i !=
Distance : 4

9
Tree	i < thisBuf.length +
Code	i < thisBuf.length +
Distance : 3

10
Tree	this == i i
Code	this == i i
Distance : 5

11
Tree	this == i +
Code	this == i +
Distance : 5

12
Tree	i == thisBuf.length +
Code	i == thisBuf.length +
Distance : 4

13
Tree	i / i !=
Code	i / i !=
Distance : 4

14
Tree	isBuiltinObject () != thisBuf.length
Code	isBuiltinObject () != thisBuf.length
Distance : 5

15
Tree	i == i
Code	i == i
Distance : 4

16
Tree	this == i
Code	this == i
Distance : 4

17
Tree	i == thisBuf.length
Code	i == thisBuf.length
Distance : 4

18
Tree	i / i
Code	i / i
Distance : 4

19
Tree	i > NUMBER_CONSTANT i
Code	i > NUMBER_CONSTANT i
Distance : 4

20
Tree	i == thisBuf.length value
Code	i == thisBuf.length value
Distance : 4

21
Tree	skipStringLiteralEscapeSequence () != thisBuf.length
Code	skipStringLiteralEscapeSequence () != thisBuf.length
Distance : 5

22
Tree	i . valueOf () != thisBuf.length
Code	i . valueOf () != thisBuf.length
Distance : 5

23
Tree	size > NUMBER_CONSTANT
Code	size > NUMBER_CONSTANT
Distance : 5

24
Tree	i == size
Code	i == size
Distance : 3

25
Tree	this == size
Code	this == size
Distance : 3

26
Tree	isBuiltinObject ( i ) != thisBuf.length
Code	isBuiltinObject ( i ) != thisBuf.length
Distance : 6

27
Tree	this == i value
Code	this == i value
Distance : 5

28
Tree	skipStringLiteralEscapeSequence ( i ) != thisBuf.length
Code	skipStringLiteralEscapeSequence ( i ) != thisBuf.length
Distance : 6

29
Tree	i . stubInfo () != thisBuf.length
Code	i . stubInfo () != thisBuf.length
Distance : 5

30
Tree	i == thisBuf.length && i
Code	i == thisBuf.length && i
Distance : 4

31
Tree	size == i
Code	size == i
Distance : 5

32
Tree	stubInfo ( i ) != thisBuf.length
Code	stubInfo ( i ) != thisBuf.length
Distance : 6

33
Tree	size == thisBuf.length
Code	size == thisBuf.length
Distance : 5

34
Tree	size / i
Code	size / i
Distance : 5

35
Tree	i == thisBuf.length && size
Code	i == thisBuf.length && size
Distance : 3

36
Tree	size == size
Code	size == size
Distance : 4

37
Tree	size / size
Code	size / size
Distance : 4

38
Tree	size == thisBuf.length && i
Code	size == thisBuf.length && i
Distance : 5

39
Tree	i . isStruct () != thisBuf.length
Code	i . isStruct () != thisBuf.length
Distance : 5

40
Tree	size == thisBuf.length && size
Code	size == thisBuf.length && size
Distance : 4

41
Tree	i / size
Code	i / size
Distance : 3

42
Tree	size < thisBuf.length
Code	size < thisBuf.length
Distance : 4

43
Tree	i > NUMBER_CONSTANT value
Code	i > NUMBER_CONSTANT value
Distance : 4

44
Tree	i == thisBuf.length i
Code	i == thisBuf.length i
Distance : 4

45
Tree	stubInfo () != thisBuf.length
Code	stubInfo () != thisBuf.length
Distance : 5

46
Tree	getIgnoredMatcher ( i ) != thisBuf.length
Code	getIgnoredMatcher ( i ) != thisBuf.length
Distance : 6

47
Tree	i . copySelf () != thisBuf.length
Code	i . copySelf () != thisBuf.length
Distance : 5

48
Tree	markStubUsed () != thisBuf.length
Code	markStubUsed () != thisBuf.length
Distance : 5

49
Tree	i == thisBuf.length && i !=
Code	i == thisBuf.length && i !=
Distance : 5

========================================================================


========================================================================
Example Number: 37
Parent Code is: 
{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ str . getChars ( NUMBER_CONSTANT , width , buffer , size ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=str}) (235{val=.}) (802{val=getChars}) (214{val=(}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (800{val=strLen}) (234{val=,}) (800{val=buffer}) (234{val=,}) (800{val=size}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=str}) (235{val=.}) (802{val=getChars}) (214{val=(}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (800{val=width}) (234{val=,}) (800{val=buffer}) (234{val=,}) (800{val=size}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/59/parent/src_java_org_apache_commons_lang_text_StrBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	{ getChars ( strLen , strLen , size , size , size , size ) ; }
Code	{ getChars ( strLen , strLen , size , size , size , size ) ; }
Distance : 9

1
Tree	{ getChars ( strLen , array.length , false ) ; }
Code	{ getChars ( strLen , array.length , false ) ; }
Distance : 7

2
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
Distance : 1

3
Tree	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

4
Tree	{ getChars ( str , strLen , size , values.length ) ; }
Code	{ getChars ( str , strLen , size , values.length ) ; }
Distance : 6

5
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , str ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , str ) ; }
Distance : 2

6
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , buffer ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , buffer ) ; }
Distance : 2

7
Tree	str . getChars ( NUMBER_CONSTANT , strLen , buffer , str ) ;
Code	str . getChars ( NUMBER_CONSTANT , strLen , buffer , str ) ;
Distance : 4

8
Tree	{ str . getChars ( null , strLen , buffer , size ) ; }
Code	{ str . getChars ( null , strLen , buffer , size ) ; }
Distance : 2

9
Tree	{ str . getChars ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

10
Tree	str . getChars ( NUMBER_CONSTANT , strLen , buffer , buffer ) ;
Code	str . getChars ( NUMBER_CONSTANT , strLen , buffer , buffer ) ;
Distance : 4

11
Tree	{ str . getChars ( false ) ; }
Code	{ str . getChars ( false ) ; }
Distance : 7

12
Tree	{ getChars ( strLen , strLen , size , values.length ) ; }
Code	{ getChars ( strLen , strLen , size , values.length ) ; }
Distance : 6

13
Tree	{ getChars ( str , strLen , size , Boolean ) ; }
Code	{ getChars ( str , strLen , size , Boolean ) ; }
Distance : 6

14
Tree	{ getChars ( str , strLen , size , size , size , size ) ; }
Code	{ getChars ( str , strLen , size , size , size , size ) ; }
Distance : 8

15
Tree	{ str . getChars ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

16
Tree	{ getChars ( str , array.length , false ) ; }
Code	{ getChars ( str , array.length , false ) ; }
Distance : 7

17
Tree	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_COMPLEX , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_COMPLEX , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

18
Tree	{ str . getChars ( null , strLen , buffer , str ) ; }
Code	{ str . getChars ( null , strLen , buffer , str ) ; }
Distance : 3

19
Tree	{ getChars ( strLen , StringUtils.EMPTY , false ) ; }
Code	{ getChars ( strLen , StringUtils.EMPTY , false ) ; }
Distance : 7

20
Tree	{ str . getChars ( null , strLen , str , size ) ; }
Code	{ str . getChars ( null , strLen , str , size ) ; }
Distance : 3

21
Tree	{ str . getChars ( null , str , buffer , size ) ; }
Code	{ str . getChars ( null , str , buffer , size ) ; }
Distance : 2

22
Tree	{ str . getChars ( str , getChars () , this ) ; }
Code	{ str . getChars ( str , getChars () , this ) ; }
Distance : 5

23
Tree	{ str . getChars ( null , strLen , buffer , buffer ) ; }
Code	{ str . getChars ( null , strLen , buffer , buffer ) ; }
Distance : 3

24
Tree	str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ;
Code	str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ;
Distance : 3

25
Tree	{ str . getChars ( mapper.start , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( mapper.start , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

26
Tree	{ getChars ( strLen , strLen , size , size ) ; }
Code	{ getChars ( strLen , strLen , size , size ) ; }
Distance : 5

27
Tree	{ str . getChars ( strLen , getChars () , this ) ; }
Code	{ str . getChars ( strLen , getChars () , this ) ; }
Distance : 5

28
Tree	{ str . getChars ( size , getChars () , this ) ; }
Code	{ str . getChars ( size , getChars () , this ) ; }
Distance : 5

29
Tree	{ str . getChars ( buffer , getChars () , this ) ; }
Code	{ str . getChars ( buffer , getChars () , this ) ; }
Distance : 5

30
Tree	{ str . getChars ( LocalizedFormats.PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( LocalizedFormats.PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

31
Tree	{ str . getChars ( mapper.start , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( mapper.start , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

32
Tree	{ getChars ( strLen , EscapeUtils.ESCAPE_JAVA , false ) ; }
Code	{ getChars ( strLen , EscapeUtils.ESCAPE_JAVA , false ) ; }
Distance : 7

33
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , str , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , str , size ) ; }
Distance : 2

34
Tree	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_COMPLEX , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_COMPLEX , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

35
Tree	{ getChars ( strLen , str , size , size , size , size ) ; }
Code	{ getChars ( strLen , str , size , size , size , size ) ; }
Distance : 9

36
Tree	{ getChars ( strLen , CheckConformance.CONFORMANCE_VIOLATION , false ) ; }
Code	{ getChars ( strLen , CheckConformance.CONFORMANCE_VIOLATION , false ) ; }
Distance : 7

37
Tree	str . getChars ( NUMBER_CONSTANT , strLen , str , size ) ;
Code	str . getChars ( NUMBER_CONSTANT , strLen , str , size ) ;
Distance : 4

38
Tree	{ getChars ( strLen , buffer , size , size , size , size ) ; }
Code	{ getChars ( strLen , buffer , size , size , size , size ) ; }
Distance : 9

39
Tree	{ getChars ( strLen , strLen , size , Boolean ) ; }
Code	{ getChars ( strLen , strLen , size , Boolean ) ; }
Distance : 6

40
Tree	{ size . getChars ( false ) ; }
Code	{ size . getChars ( false ) ; }
Distance : 8

41
Tree	{ str . getChars ( NUMBER_CONSTANT , str , buffer , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , str , buffer , size ) ; }
Distance : 1

42
Tree	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

43
Tree	{ str . getChars ( LocalizedFormats.PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( LocalizedFormats.PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

44
Tree	{ getChars ( strLen , strLen , buffer , size , size , size ) ; }
Code	{ getChars ( strLen , strLen , buffer , size , size , size ) ; }
Distance : 8

45
Tree	{ strLen . getChars ( false ) ; }
Code	{ strLen . getChars ( false ) ; }
Distance : 8

46
Tree	str . getChars ( NUMBER_CONSTANT , str , buffer , size ) ;
Code	str . getChars ( NUMBER_CONSTANT , str , buffer , size ) ;
Distance : 3

47
Tree	{ buffer . getChars ( false ) ; }
Code	{ buffer . getChars ( false ) ; }
Distance : 8

48
Tree	{ str . getChars ( true ) ; }
Code	{ str . getChars ( true ) ; }
Distance : 7

49
Tree	{ size . getChars ( str , getChars () , this ) ; }
Code	{ size . getChars ( str , getChars () , this ) ; }
Distance : 6

========================================================================


========================================================================
Example Number: 38
Parent Code is: 
{ return cAvailableLocaleSet . contains ( locale ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return availableLocaleList () . contains ( locale ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (800{val=cAvailableLocaleSet}) (235{val=.}) (802{val=contains}) (214{val=(}) (800{val=locale}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=availableLocaleList}) (216{val=()})) (235{val=.}) (802{val=contains}) (214{val=(}) (800{val=locale}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/57/parent/src_java_org_apache_commons_lang_LocaleUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	{ return ( byte ) contains ( locale + NUMBER_CONSTANT ) ; }
Code	{ return ( byte ) contains ( locale + NUMBER_CONSTANT ) ; }
Distance : 5

1
Tree	{ return cAvailableLocaleSet . contains ( locale . contains ( locale ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale . contains ( locale ) ) ; }
Distance : 6

2
Tree	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Distance : 4

3
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Distance : 3

4
Tree	{ return contains ( locale . contains ( locale ) ) ; }
Code	{ return contains ( locale . contains ( locale ) ) ; }
Distance : 4

5
Tree	{ return locale . contains ( locale ) ; }
Code	{ return locale . contains ( locale ) ; }
Distance : 2

6
Tree	{ return ( boolean ) contains ( locale + NUMBER_CONSTANT ) ; }
Code	{ return ( boolean ) contains ( locale + NUMBER_CONSTANT ) ; }
Distance : 5

7
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) ; }
Distance : 2

8
Tree	{ return this . locale . contains ( locale ) ; }
Code	{ return this . locale . contains ( locale ) ; }
Distance : 3

9
Tree	{ return locale . contains () . contains ( locale ) ; }
Code	{ return locale . contains () . contains ( locale ) ; }
Distance : 3

10
Tree	{ return this . locale . contains ( locale ) ; }
Code	{ return this . locale . contains ( locale ) ; }
Distance : 3

11
Tree	{ return ( int ) contains ( locale + NUMBER_CONSTANT ) ; }
Code	{ return ( int ) contains ( locale + NUMBER_CONSTANT ) ; }
Distance : 5

12
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Distance : 3

13
Tree	{ return this . cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return this . cAvailableLocaleSet . contains ( locale ) ; }
Distance : 3

14
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) ; }
Distance : 2

15
Tree	{ return ( double ) contains ( locale + NUMBER_CONSTANT ) ; }
Code	{ return ( double ) contains ( locale + NUMBER_CONSTANT ) ; }
Distance : 5

16
Tree	{ return locale . contains ( locale ) ; }
Code	{ return locale . contains ( locale ) ; }
Distance : 2

17
Tree	{ return cAvailableLocaleSet . contains ( ( locale ) locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( ( locale ) locale ) ; }
Distance : 5

18
Tree	{ return contains ( locale ) ; }
Code	{ return contains ( locale ) ; }
Distance : 3

19
Tree	{ return ( cAvailableLocaleSet ) } . contains ( locale ) ; }
Code	{ return ( cAvailableLocaleSet ) } . contains ( locale ) ; }
Distance : 4

20
Tree	{ return ( locale ) locale . contains ( locale ) ; }
Code	{ return ( locale ) locale . contains ( locale ) ; }
Distance : 4

21
Tree	{ return contains ( locale ) ; }
Code	{ return contains ( locale ) ; }
Distance : 3

22
Tree	{ return cAvailableLocaleSet . contains ( ( locale ) locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( ( locale ) locale ) ; }
Distance : 5

23
Tree	{ return locale . contains ( locale . contains ( locale ) ) ; }
Code	{ return locale . contains ( locale . contains ( locale ) ) ; }
Distance : 6

24
Tree	{ return locale . contains ( locale . locale ( locale ) ) ; }
Code	{ return locale . contains ( locale . locale ( locale ) ) ; }
Distance : 7

25
Tree	{ return ( cAvailableLocaleSet ) locale . contains ( locale ) ; }
Code	{ return ( cAvailableLocaleSet ) locale . contains ( locale ) ; }
Distance : 4

26
Tree	{ return contains ( locale . contains ( locale ) ) ; }
Code	{ return contains ( locale . contains ( locale ) ) ; }
Distance : 4

27
Tree	{ return contains ( locale . contains ( locale ) ) ; }
Code	{ return contains ( locale . contains ( locale ) ) ; }
Distance : 4

28
Tree	{ return contains ( locale ) ; }
Code	{ return contains ( locale ) ; }
Distance : 3

29
Tree	{ return this . cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return this . cAvailableLocaleSet . contains ( locale ) ; }
Distance : 3

30
Tree	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Distance : 4

31
Tree	{ return cAvailableLocaleSet . contains ( ( locale ) locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( ( locale ) locale ) ; }
Distance : 5

32
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) ; }
Distance : 2

33
Tree	{ return locale . contains ( locale , locale ) ; }
Code	{ return locale . contains ( locale , locale ) ; }
Distance : 4

34
Tree	{ return cAvailableLocaleSet . contains ( locale . contains ( locale ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale . contains ( locale ) ) ; }
Distance : 6

35
Tree	{ return contains ( locale ) ; }
Code	{ return contains ( locale ) ; }
Distance : 3

36
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Distance : 3

37
Tree	{ return this . cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return this . cAvailableLocaleSet . contains ( locale ) ; }
Distance : 3

38
Tree	{ return contains ( locale . contains ( locale ) ) ; }
Code	{ return contains ( locale . contains ( locale ) ) ; }
Distance : 4

39
Tree	{ return locale . contains ( ( locale ) locale ) ; }
Code	{ return locale . contains ( ( locale ) locale ) ; }
Distance : 5

40
Tree	{ return ( long ) contains ( locale + NUMBER_CONSTANT ) ; }
Code	{ return ( long ) contains ( locale + NUMBER_CONSTANT ) ; }
Distance : 5

41
Tree	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Distance : 4

42
Tree	{ return contains ( locale ) ; } !=
Code	{ return contains ( locale ) ; } !=
Distance : 4

43
Tree	{ return cAvailableLocaleSet . contains ( ( locale ) locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( ( locale ) locale ) ; }
Distance : 5

44
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Distance : 3

45
Tree	{ return cAvailableLocaleSet . contains ( locale . locale ( locale ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale . locale ( locale ) ) ; }
Distance : 7

46
Tree	{ return contains ( locale . contains ( locale ) ) ; }
Code	{ return contains ( locale . contains ( locale ) ) ; }
Distance : 4

47
Tree	{ return ( cAvailableLocaleSet ) locale . contains ( locale ) ; }
Code	{ return ( cAvailableLocaleSet ) locale . contains ( locale ) ; }
Distance : 4

48
Tree	{ return ( cAvailableLocaleSet ) locale . contains ( locale ) ; }
Code	{ return ( cAvailableLocaleSet ) locale . contains ( locale ) ; }
Distance : 4

49
Tree	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Distance : 4

========================================================================


========================================================================
Example Number: 39
Parent Code is: 
{ escapeJavaStyleString ( out , str , true ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ escapeJavaStyleString ( out , str , true , true ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=out}) (234{val=,}) (800{val=str}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=out}) (234{val=,}) (800{val=str}) (234{val=,}) (9{val=true}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/46/parent/src_java_org_apache_commons_lang_StringEscapeUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	{ str . escapeJavaStyleString ( str ? Strictness.SILENT : FunctionFlavor.NORMAL ) ; }
Code	{ str . escapeJavaStyleString ( str ? Strictness.SILENT : FunctionFlavor.NORMAL ) ; }
Distance : 8

1
Tree	{ escapeJavaStyleString ( out , out , str , false ) ; }
Code	{ escapeJavaStyleString ( out , out , str , false ) ; }
Distance : 3

2
Tree	{ EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str , str ) ; }
Code	{ EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str , str ) ; }
Distance : 7

3
Tree	{ EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString ( str , out ) ; }
Code	{ EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString ( str , out ) ; }
Distance : 7

4
Tree	{ escapeJavaStyleString ( out , out , out ) ; }
Code	{ escapeJavaStyleString ( out , out , out ) ; }
Distance : 4

5
Tree	{ array.length . escapeJavaStyleString ( str , out ) ; }
Code	{ array.length . escapeJavaStyleString ( str , out ) ; }
Distance : 7

6
Tree	{ str . escapeJavaStyleString ( str , str ) ; }
Code	{ str . escapeJavaStyleString ( str , str ) ; }
Distance : 7

7
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , str , str ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , str , str ) ; }
Distance : 4

8
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Distance : 9

9
Tree	{ escapeJavaStyleString ( out , out , out , false ) ; }
Code	{ escapeJavaStyleString ( out , out , out , false ) ; }
Distance : 3

10
Tree	{ str . escapeJavaStyleString ( str ? f.length : FunctionFlavor.NORMAL ) ; }
Code	{ str . escapeJavaStyleString ( str ? f.length : FunctionFlavor.NORMAL ) ; }
Distance : 8

11
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , str , out , str ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , str , out , str ) ; }
Distance : 3

12
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Distance : 9

13
Tree	{ escapeJavaStyleString ( out , out ) ; }
Code	{ escapeJavaStyleString ( out , out ) ; }
Distance : 5

14
Tree	{ escapeJavaStyleString ( out , str , true ) ; }
Code	{ escapeJavaStyleString ( out , str , true ) ; }
Distance : 2

15
Tree	{ escapeJavaStyleString ( out , out , false ) ; }
Code	{ escapeJavaStyleString ( out , out , false ) ; }
Distance : 4

16
Tree	{ str . escapeJavaStyleString ( str ? Es6ToEs3Util.CANNOT_CONVERT_YET : FunctionFlavor.NORMAL ) ; }
Code	{ str . escapeJavaStyleString ( str ? Es6ToEs3Util.CANNOT_CONVERT_YET : FunctionFlavor.NORMAL ) ; }
Distance : 8

17
Tree	{ out . escapeJavaStyleString ( str ? Strictness.SILENT : FunctionFlavor.NORMAL ) ; }
Code	{ out . escapeJavaStyleString ( str ? Strictness.SILENT : FunctionFlavor.NORMAL ) ; }
Distance : 8

18
Tree	{ escapeJavaStyleString ( out , str ) ; }
Code	{ escapeJavaStyleString ( out , str ) ; }
Distance : 4

19
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Distance : 9

20
Tree	{ escapeJavaStyleString ( out , str , out ) ; }
Code	{ escapeJavaStyleString ( out , str , out ) ; }
Distance : 3

21
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , out ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , out ) ; }
Distance : 4

22
Tree	{ out . escapeJavaStyleString ( str , out ) ; }
Code	{ out . escapeJavaStyleString ( str , out ) ; }
Distance : 7

23
Tree	{ escapeJavaStyleString ( str , out , false ) ; }
Code	{ escapeJavaStyleString ( str , out , false ) ; }
Distance : 4

24
Tree	{ EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str , out ) ; }
Code	{ EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str , out ) ; }
Distance : 7

25
Tree	{ escapeJavaStyleString ( out , str , str , false ) ; }
Code	{ escapeJavaStyleString ( out , str , str , false ) ; }
Distance : 2

26
Tree	{ escapeJavaStyleString ( out , str , false ) ; }
Code	{ escapeJavaStyleString ( out , str , false ) ; }
Distance : 3

27
Tree	{ escapeJavaStyleString ( out , out , true ) ; }
Code	{ escapeJavaStyleString ( out , out , true ) ; }
Distance : 3

28
Tree	{ str . escapeJavaStyleString ( str ) ; }
Code	{ str . escapeJavaStyleString ( str ) ; }
Distance : 8

29
Tree	{ out . escapeJavaStyleString ( str ) ; }
Code	{ out . escapeJavaStyleString ( str ) ; }
Distance : 8

30
Tree	{ escapeJavaStyleString ( out , str , str ) ; }
Code	{ escapeJavaStyleString ( out , str , str ) ; }
Distance : 3

31
Tree	{ escapeJavaStyleString ( out , out ) ; } !=
Code	{ escapeJavaStyleString ( out , out ) ; } !=
Distance : 6

32
Tree	{ str . escapeJavaStyleString ( str , out ) ; }
Code	{ str . escapeJavaStyleString ( str , out ) ; }
Distance : 7

33
Tree	{ out . escapeJavaStyleString ( str , str ) ; }
Code	{ out . escapeJavaStyleString ( str , str ) ; }
Distance : 7

34
Tree	{ escapeJavaStyleString ( str , out , out ) ; }
Code	{ escapeJavaStyleString ( str , out , out ) ; }
Distance : 4

35
Tree	{ escapeJavaStyleString ( str , out , out , false ) ; }
Code	{ escapeJavaStyleString ( str , out , out , false ) ; }
Distance : 4

36
Tree	{ setSeriesShapesVisible . escapeJavaStyleString ( str , out ) ; }
Code	{ setSeriesShapesVisible . escapeJavaStyleString ( str , out ) ; }
Distance : 7

37
Tree	{ str . escapeJavaStyleString ( str ) ; } !=
Code	{ str . escapeJavaStyleString ( str ) ; } !=
Distance : 9

38
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , str ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , str ) ; }
Distance : 4

39
Tree	{ escapeJavaStyleString ( out , out , str ) ; }
Code	{ escapeJavaStyleString ( out , out , str ) ; }
Distance : 4

40
Tree	{ out . escapeJavaStyleString ( str ? Es6ToEs3Util.CANNOT_CONVERT_YET : FunctionFlavor.NORMAL ) ; }
Code	{ out . escapeJavaStyleString ( str ? Es6ToEs3Util.CANNOT_CONVERT_YET : FunctionFlavor.NORMAL ) ; }
Distance : 8

41
Tree	{ str . escapeJavaStyleString ( out , out ) ; }
Code	{ str . escapeJavaStyleString ( out , out ) ; }
Distance : 7

42
Tree	{ str . escapeJavaStyleString ( out ) ; }
Code	{ str . escapeJavaStyleString ( out ) ; }
Distance : 8

43
Tree	{ out . escapeJavaStyleString ( out ) ; }
Code	{ out . escapeJavaStyleString ( out ) ; }
Distance : 8

44
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 9

45
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 9

46
Tree	{ escapeJavaStyleString ( str , out ) ; }
Code	{ escapeJavaStyleString ( str , out ) ; }
Distance : 5

47
Tree	{ escapeJavaStyleString ( str , str ) ; }
Code	{ escapeJavaStyleString ( str , str ) ; }
Distance : 5

48
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , str , out ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , str , out ) ; }
Distance : 4

49
Tree	{ escapeJavaStyleString ( out , str , out , false ) ; }
Code	{ escapeJavaStyleString ( out , str , out , false ) ; }
Distance : 2

========================================================================


========================================================================
Example Number: 40
Parent Code is: 
{ return escapeJavaStyleString ( str , true ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return escapeJavaStyleString ( str , true , true ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=str}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=str}) (234{val=,}) (9{val=true}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/46/parent/src_java_org_apache_commons_lang_StringEscapeUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	{ return org.joda.time.gwt.util.Arrays . escapeJavaStyleString ( str ) ; }
Code	{ return org.joda.time.gwt.util.Arrays . escapeJavaStyleString ( str ) ; }
Distance : 6

1
Tree	{ return escapeJavaStyleString ( str , false ) ; } i
Code	{ return escapeJavaStyleString ( str , false ) ; } i
Distance : 4

2
Tree	{ return escapeJavaStyleString ( str , false ) ; } +
Code	{ return escapeJavaStyleString ( str , false ) ; } +
Distance : 4

3
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } i
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } i
Distance : 8

4
Tree	{ escapeJavaStyleString ( str ) ; assert }
Code	{ escapeJavaStyleString ( str ) ; assert }
Distance : 6

5
Tree	{ escapeJavaStyleString ( str ) ; return }
Code	{ escapeJavaStyleString ( str ) ; return }
Distance : 6

6
Tree	{ return escapeJavaStyleString ( str , str , str , str , return; ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , return; ) ; }
Distance : 6

7
Tree	{ return escapeJavaStyleString ( str , str , str , str , super(); ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , super(); ) ; }
Distance : 6

8
Tree	{ return escapeJavaStyleString ( str , str , str , str , break; ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , break; ) ; }
Distance : 6

9
Tree	{ return escapeJavaStyleString ( str , str , str , str , continue; ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , continue; ) ; }
Distance : 6

10
Tree	{ return escapeJavaStyleString ( str , true ) ; }
Code	{ return escapeJavaStyleString ( str , true ) ; }
Distance : 2

11
Tree	{ this . str = str ; fireChangeEvent }
Code	{ this . str = str ; fireChangeEvent }
Distance : 9

12
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } value
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } value
Distance : 8

13
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; }
Code	{ super . escapeJavaStyleString ( str ) ; return false ; }
Distance : 7

14
Tree	{ super . escapeJavaStyleString ( str ) ; return null ; }
Code	{ super . escapeJavaStyleString ( str ) ; return null ; }
Distance : 7

15
Tree	{ return escapeJavaStyleString ( str , str , tree.access ) ; }
Code	{ return escapeJavaStyleString ( str , str , tree.access ) ; }
Distance : 2

16
Tree	{ escapeJavaStyleString ( str ) ; throw }
Code	{ escapeJavaStyleString ( str ) ; throw }
Distance : 6

17
Tree	{ return lastIndexOf . escapeJavaStyleString ( str ) ; }
Code	{ return lastIndexOf . escapeJavaStyleString ( str ) ; }
Distance : 6

18
Tree	{ return EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString ( str ) ; }
Code	{ return EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString ( str ) ; }
Distance : 6

19
Tree	{ return escapeJavaStyleString ( str , str , GammaDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY ) ; }
Code	{ return escapeJavaStyleString ( str , str , GammaDistribution.DEFAULT_INVERSE_ABSOLUTE_ACCURACY ) ; }
Distance : 2

20
Tree	{ return escapeJavaStyleString ( str , null ) ; }
Code	{ return escapeJavaStyleString ( str , null ) ; }
Distance : 3

21
Tree	{ this . str = str ; super }
Code	{ this . str = str ; super }
Distance : 9

22
Tree	{ return escapeJavaStyleString ( str , ModuleType.GOOG_MODULE ) ; }
Code	{ return escapeJavaStyleString ( str , ModuleType.GOOG_MODULE ) ; }
Distance : 3

23
Tree	{ return escapeJavaStyleString ( str , Color.BLACK ) ; }
Code	{ return escapeJavaStyleString ( str , Color.BLACK ) ; }
Distance : 3

24
Tree	{ this . str = str ; if }
Code	{ this . str = str ; if }
Distance : 9

25
Tree	{ return escapeJavaStyleString ( str , false ) ; }
Code	{ return escapeJavaStyleString ( str , false ) ; }
Distance : 3

26
Tree	{ return escapeJavaStyleString ( str , super(); ) ; }
Code	{ return escapeJavaStyleString ( str , super(); ) ; }
Distance : 3

27
Tree	{ this . str = str ; else }
Code	{ this . str = str ; else }
Distance : 9

28
Tree	{ return escapeJavaStyleString ( str , iValues.length ) ; }
Code	{ return escapeJavaStyleString ( str , iValues.length ) ; }
Distance : 3

29
Tree	{ return escapeJavaStyleString ( str , return; ) ; }
Code	{ return escapeJavaStyleString ( str , return; ) ; }
Distance : 3

30
Tree	{ return escapeJavaStyleString ( str , str , str , str , null ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , null ) ; }
Distance : 6

31
Tree	{ return escapeJavaStyleString ( str , break; ) ; }
Code	{ return escapeJavaStyleString ( str , break; ) ; }
Distance : 3

32
Tree	{ return escapeJavaStyleString ( str , continue; ) ; }
Code	{ return escapeJavaStyleString ( str , continue; ) ; }
Distance : 3

33
Tree	{ this . str = str ; throw }
Code	{ this . str = str ; throw }
Distance : 9

34
Tree	{ super . escapeJavaStyleString ( str ) ; return return; ; }
Code	{ super . escapeJavaStyleString ( str ) ; return return; ; }
Distance : 7

35
Tree	{ super . escapeJavaStyleString ( str ) ; return super(); ; }
Code	{ super . escapeJavaStyleString ( str ) ; return super(); ; }
Distance : 7

36
Tree	{ super . escapeJavaStyleString ( str ) ; return true ; }
Code	{ super . escapeJavaStyleString ( str ) ; return true ; }
Distance : 6

37
Tree	{ super . escapeJavaStyleString ( str ) ; return break; ; }
Code	{ super . escapeJavaStyleString ( str ) ; return break; ; }
Distance : 7

38
Tree	{ super . escapeJavaStyleString ( str ) ; return continue; ; }
Code	{ super . escapeJavaStyleString ( str ) ; return continue; ; }
Distance : 7

39
Tree	{ escapeJavaStyleString ( str ) ; super }
Code	{ escapeJavaStyleString ( str ) ; super }
Distance : 6

40
Tree	{ return escapeJavaStyleString ( str , d.length ) ; }
Code	{ return escapeJavaStyleString ( str , d.length ) ; }
Distance : 3

41
Tree	{ return array.length . escapeJavaStyleString ( str ) ; }
Code	{ return array.length . escapeJavaStyleString ( str ) ; }
Distance : 6

42
Tree	{ escapeJavaStyleString ( str ) ; if }
Code	{ escapeJavaStyleString ( str ) ; if }
Distance : 6

43
Tree	{ return escapeJavaStyleString ( str , TypeInferenceMode.NEITHER ) ; }
Code	{ return escapeJavaStyleString ( str , TypeInferenceMode.NEITHER ) ; }
Distance : 3

44
Tree	{ return escapeJavaStyleString ( str , false ) ; } value
Code	{ return escapeJavaStyleString ( str , false ) ; } value
Distance : 4

45
Tree	{ return EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str ) ; }
Code	{ return EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str ) ; }
Distance : 6

46
Tree	{ return escapeJavaStyleString ( str , str , d.length ) ; }
Code	{ return escapeJavaStyleString ( str , str , d.length ) ; }
Distance : 2

47
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } +
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } +
Distance : 8

48
Tree	{ return escapeJavaStyleString ( str , str , Color.BLACK ) ; }
Code	{ return escapeJavaStyleString ( str , str , Color.BLACK ) ; }
Distance : 2

49
Tree	{ return escapeJavaStyleString ( str , str , functionTree.access ) ; }
Code	{ return escapeJavaStyleString ( str , str , functionTree.access ) ; }
Distance : 2

========================================================================


========================================================================
Example Number: 41
Parent Code is: 
{ escapeJavaStyleString ( out , str , false ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ escapeJavaStyleString ( out , str , false , false ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=out}) (234{val=,}) (800{val=str}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=out}) (234{val=,}) (800{val=str}) (234{val=,}) (9{val=false}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/46/parent/src_java_org_apache_commons_lang_StringEscapeUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	{ out . escapeJavaStyleString ( str ) ; }
Code	{ out . escapeJavaStyleString ( str ) ; }
Distance : 8

1
Tree	{ str . escapeJavaStyleString ( out , out ) ; }
Code	{ str . escapeJavaStyleString ( out , out ) ; }
Distance : 7

2
Tree	{ escapeJavaStyleString ( str , out , out ) ; }
Code	{ escapeJavaStyleString ( str , out , out ) ; }
Distance : 4

3
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , str ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , str ) ; }
Distance : 4

4
Tree	{ EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str , out ) ; }
Code	{ EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str , out ) ; }
Distance : 7

5
Tree	{ escapeJavaStyleString ( out , str , false ) ; }
Code	{ escapeJavaStyleString ( out , str , false ) ; }
Distance : 2

6
Tree	{ str . escapeJavaStyleString ( str , out ) ; }
Code	{ str . escapeJavaStyleString ( str , out ) ; }
Distance : 7

7
Tree	{ out . escapeJavaStyleString ( str , out ) ; }
Code	{ out . escapeJavaStyleString ( str , out ) ; }
Distance : 7

8
Tree	{ escapeJavaStyleString ( str , out ) ; }
Code	{ escapeJavaStyleString ( str , out ) ; }
Distance : 5

9
Tree	{ escapeJavaStyleString ( str , out , false ) ; }
Code	{ escapeJavaStyleString ( str , out , false ) ; }
Distance : 3

10
Tree	{ str . escapeJavaStyleString ( str , str ) ; }
Code	{ str . escapeJavaStyleString ( str , str ) ; }
Distance : 7

11
Tree	{ EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str , str ) ; }
Code	{ EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str , str ) ; }
Distance : 7

12
Tree	{ EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString ( str , out ) ; }
Code	{ EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString ( str , out ) ; }
Distance : 7

13
Tree	{ str . escapeJavaStyleString ( str ? StringUtils.EMPTY : PropertyCollapseLevel.NONE ) ; }
Code	{ str . escapeJavaStyleString ( str ? StringUtils.EMPTY : PropertyCollapseLevel.NONE ) ; }
Distance : 8

14
Tree	{ escapeJavaStyleString ( str , str ) ; }
Code	{ escapeJavaStyleString ( str , str ) ; }
Distance : 5

15
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , str , str ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , str , str ) ; }
Distance : 4

16
Tree	{ escapeJavaStyleString ( out , out , str , false ) ; }
Code	{ escapeJavaStyleString ( out , out , str , false ) ; }
Distance : 2

17
Tree	{ escapeJavaStyleString ( out , str , out ) ; }
Code	{ escapeJavaStyleString ( out , str , out ) ; }
Distance : 3

18
Tree	{ str . escapeJavaStyleString ( out ) ; }
Code	{ str . escapeJavaStyleString ( out ) ; }
Distance : 8

19
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Distance : 9

20
Tree	{ escapeJavaStyleString ( out , str ) ; }
Code	{ escapeJavaStyleString ( out , str ) ; }
Distance : 4

21
Tree	{ escapeJavaStyleString ( out , str , str ) ; }
Code	{ escapeJavaStyleString ( out , str , str ) ; }
Distance : 3

22
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , str , out ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , str , out ) ; }
Distance : 4

23
Tree	{ escapeJavaStyleString ( str , str , false ) ; }
Code	{ escapeJavaStyleString ( str , str , false ) ; }
Distance : 3

24
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 9

25
Tree	{ escapeJavaStyleString ( out , str , out , false ) ; }
Code	{ escapeJavaStyleString ( out , str , out , false ) ; }
Distance : 1

26
Tree	{ escapeJavaStyleString ( out , out , out ) ; }
Code	{ escapeJavaStyleString ( out , out , out ) ; }
Distance : 4

27
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , out ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , out ) ; }
Distance : 4

28
Tree	{ escapeJavaStyleString ( out , str , str , false ) ; }
Code	{ escapeJavaStyleString ( out , str , str , false ) ; }
Distance : 1

29
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , str , str , str ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , str , str , str ) ; }
Distance : 3

30
Tree	{ array.length . escapeJavaStyleString ( str , out ) ; }
Code	{ array.length . escapeJavaStyleString ( str , out ) ; }
Distance : 7

31
Tree	{ out . escapeJavaStyleString ( str , str ) ; }
Code	{ out . escapeJavaStyleString ( str , str ) ; }
Distance : 7

32
Tree	{ escapeJavaStyleString ( out , out ) ; }
Code	{ escapeJavaStyleString ( out , out ) ; }
Distance : 5

33
Tree	{ setSeriesShapesVisible . escapeJavaStyleString ( str , out ) ; }
Code	{ setSeriesShapesVisible . escapeJavaStyleString ( str , out ) ; }
Distance : 7

34
Tree	{ escapeJavaStyleString ( out , out , str ) ; }
Code	{ escapeJavaStyleString ( out , out , str ) ; }
Distance : 4

35
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 9

36
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Distance : 9

37
Tree	{ out . escapeJavaStyleString ( str ? StringUtils.EMPTY : PropertyCollapseLevel.NONE ) ; }
Code	{ out . escapeJavaStyleString ( str ? StringUtils.EMPTY : PropertyCollapseLevel.NONE ) ; }
Distance : 8

38
Tree	{ str . escapeJavaStyleString ( str ) ; }
Code	{ str . escapeJavaStyleString ( str ) ; }
Distance : 8

39
Tree	{ escapeJavaStyleString ( out , out , false ) ; }
Code	{ escapeJavaStyleString ( out , out , false ) ; }
Distance : 3

40
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Distance : 9

41
Tree	{ out . escapeJavaStyleString ( out ) ; }
Code	{ out . escapeJavaStyleString ( out ) ; }
Distance : 8

42
Tree	{ escapeJavaStyleString ( out , out , true ) ; }
Code	{ escapeJavaStyleString ( out , out , true ) ; }
Distance : 4

43
Tree	{ str . escapeJavaStyleString ( str ? StringUtils.EMPTY : array.length ) ; }
Code	{ str . escapeJavaStyleString ( str ? StringUtils.EMPTY : array.length ) ; }
Distance : 8

44
Tree	{ escapeJavaStyleString ( out , out , out , false ) ; }
Code	{ escapeJavaStyleString ( out , out , out , false ) ; }
Distance : 2

45
Tree	{ out . escapeJavaStyleString ( str ? StringUtils.EMPTY : array.length ) ; }
Code	{ out . escapeJavaStyleString ( str ? StringUtils.EMPTY : array.length ) ; }
Distance : 8

46
Tree	{ str . escapeJavaStyleString ( str ? Locale.ENGLISH : array.length ) ; }
Code	{ str . escapeJavaStyleString ( str ? Locale.ENGLISH : array.length ) ; }
Distance : 8

47
Tree	{ escapeJavaStyleString ( out , out ) ; } !=
Code	{ escapeJavaStyleString ( out , out ) ; } !=
Distance : 6

48
Tree	{ escapeJavaStyleString ( str , out , out , false ) ; }
Code	{ escapeJavaStyleString ( str , out , out , false ) ; }
Distance : 3

49
Tree	{ str . escapeJavaStyleString ( str ) ; } !=
Code	{ str . escapeJavaStyleString ( str ) ; } !=
Distance : 9

========================================================================


========================================================================
Example Number: 42
Parent Code is: 
{ return escapeJavaStyleString ( str , false ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return escapeJavaStyleString ( str , false , false ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=str}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=str}) (234{val=,}) (9{val=false}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/46/parent/src_java_org_apache_commons_lang_StringEscapeUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	{ return org.joda.time.gwt.util.Arrays . escapeJavaStyleString ( str ) ; }
Code	{ return org.joda.time.gwt.util.Arrays . escapeJavaStyleString ( str ) ; }
Distance : 6

1
Tree	{ escapeJavaStyleString ( str ) ; return }
Code	{ escapeJavaStyleString ( str ) ; return }
Distance : 6

2
Tree	{ return escapeJavaStyleString ( str , false ) ; } value
Code	{ return escapeJavaStyleString ( str , false ) ; } value
Distance : 3

3
Tree	{ return escapeJavaStyleString ( str , false ) ; } i
Code	{ return escapeJavaStyleString ( str , false ) ; } i
Distance : 3

4
Tree	{ return escapeJavaStyleString ( str , false ) ; } +
Code	{ return escapeJavaStyleString ( str , false ) ; } +
Distance : 3

5
Tree	{ escapeJavaStyleString ( str ) ; assert }
Code	{ escapeJavaStyleString ( str ) ; assert }
Distance : 6

6
Tree	{ return escapeJavaStyleString ( str , break; ) ; }
Code	{ return escapeJavaStyleString ( str , break; ) ; }
Distance : 3

7
Tree	{ return escapeJavaStyleString ( str , str , str , str , super(); ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , super(); ) ; }
Distance : 6

8
Tree	{ return escapeJavaStyleString ( str , str , str , str , continue; ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , continue; ) ; }
Distance : 6

9
Tree	{ this . str = str ; CHAR_CONS }
Code	{ this . str = str ; CHAR_CONS }
Distance : 9

10
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; }
Code	{ super . escapeJavaStyleString ( str ) ; return false ; }
Distance : 6

11
Tree	{ return escapeJavaStyleString ( str , str , str , str , break; ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , break; ) ; }
Distance : 6

12
Tree	{ return lastIndexOf . escapeJavaStyleString ( str ) ; }
Code	{ return lastIndexOf . escapeJavaStyleString ( str ) ; }
Distance : 6

13
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } i
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } i
Distance : 7

14
Tree	{ super . escapeJavaStyleString ( str ) ; return null ; }
Code	{ super . escapeJavaStyleString ( str ) ; return null ; }
Distance : 7

15
Tree	{ return escapeJavaStyleString ( str , str , StringUtils.EMPTY ) ; }
Code	{ return escapeJavaStyleString ( str , str , StringUtils.EMPTY ) ; }
Distance : 2

16
Tree	{ return escapeJavaStyleString ( str , iValues.length ) ; }
Code	{ return escapeJavaStyleString ( str , iValues.length ) ; }
Distance : 3

17
Tree	{ escapeJavaStyleString ( str ) ; throw }
Code	{ escapeJavaStyleString ( str ) ; throw }
Distance : 6

18
Tree	{ return EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString ( str ) ; }
Code	{ return EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString ( str ) ; }
Distance : 6

19
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } value
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } value
Distance : 7

20
Tree	{ return escapeJavaStyleString ( str , StringUtils.EMPTY ) ; }
Code	{ return escapeJavaStyleString ( str , StringUtils.EMPTY ) ; }
Distance : 3

21
Tree	{ this . str = str ; super }
Code	{ this . str = str ; super }
Distance : 9

22
Tree	{ return escapeJavaStyleString ( str , null ) ; }
Code	{ return escapeJavaStyleString ( str , null ) ; }
Distance : 3

23
Tree	{ return escapeJavaStyleString ( str , configureWith ) ; }
Code	{ return escapeJavaStyleString ( str , configureWith ) ; }
Distance : 3

24
Tree	{ this . str = str ; if }
Code	{ this . str = str ; if }
Distance : 9

25
Tree	{ return escapeJavaStyleString ( str , false ) ; }
Code	{ return escapeJavaStyleString ( str , false ) ; }
Distance : 2

26
Tree	{ super . escapeJavaStyleString ( str ) ; return return; ; }
Code	{ super . escapeJavaStyleString ( str ) ; return return; ; }
Distance : 7

27
Tree	{ this . str = str ; else }
Code	{ this . str = str ; else }
Distance : 9

28
Tree	{ return escapeJavaStyleString ( str , str , options.removeUnusedPrototypeProperties ) ; }
Code	{ return escapeJavaStyleString ( str , str , options.removeUnusedPrototypeProperties ) ; }
Distance : 2

29
Tree	{ return escapeJavaStyleString ( str , super(); ) ; }
Code	{ return escapeJavaStyleString ( str , super(); ) ; }
Distance : 3

30
Tree	{ return escapeJavaStyleString ( str , true ) ; }
Code	{ return escapeJavaStyleString ( str , true ) ; }
Distance : 3

31
Tree	{ return escapeJavaStyleString ( str , str , str , str , null ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , null ) ; }
Distance : 6

32
Tree	{ this . str = str ; throw }
Code	{ this . str = str ; throw }
Distance : 9

33
Tree	{ super . escapeJavaStyleString ( str ) ; return true ; }
Code	{ super . escapeJavaStyleString ( str ) ; return true ; }
Distance : 7

34
Tree	{ return escapeJavaStyleString ( str , str , str , str , return; ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , return; ) ; }
Distance : 6

35
Tree	{ super . escapeJavaStyleString ( str ) ; return super(); ; }
Code	{ super . escapeJavaStyleString ( str ) ; return super(); ; }
Distance : 7

36
Tree	{ return escapeJavaStyleString ( str , continue; ) ; }
Code	{ return escapeJavaStyleString ( str , continue; ) ; }
Distance : 3

37
Tree	{ super . escapeJavaStyleString ( str ) ; return continue; ; }
Code	{ super . escapeJavaStyleString ( str ) ; return continue; ; }
Distance : 7

38
Tree	{ escapeJavaStyleString ( str ) ; super }
Code	{ escapeJavaStyleString ( str ) ; super }
Distance : 6

39
Tree	{ return escapeJavaStyleString ( str , return; ) ; }
Code	{ return escapeJavaStyleString ( str , return; ) ; }
Distance : 3

40
Tree	{ return escapeJavaStyleString ( str , p2.vector ) ; }
Code	{ return escapeJavaStyleString ( str , p2.vector ) ; }
Distance : 3

41
Tree	{ super . escapeJavaStyleString ( str ) ; return break; ; }
Code	{ super . escapeJavaStyleString ( str ) ; return break; ; }
Distance : 7

42
Tree	{ return array.length . escapeJavaStyleString ( str ) ; }
Code	{ return array.length . escapeJavaStyleString ( str ) ; }
Distance : 6

43
Tree	{ escapeJavaStyleString ( str ) ; if }
Code	{ escapeJavaStyleString ( str ) ; if }
Distance : 6

44
Tree	{ return escapeJavaStyleString ( str , str , TimeUnit.DAYS ) ; }
Code	{ return escapeJavaStyleString ( str , str , TimeUnit.DAYS ) ; }
Distance : 2

45
Tree	{ return escapeJavaStyleString ( str , str , Verification.EXPLICIT ) ; }
Code	{ return escapeJavaStyleString ( str , str , Verification.EXPLICIT ) ; }
Distance : 2

46
Tree	{ return EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str ) ; }
Code	{ return EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str ) ; }
Distance : 6

47
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } +
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } +
Distance : 7

48
Tree	{ return escapeJavaStyleString ( str , array.length ) ; }
Code	{ return escapeJavaStyleString ( str , array.length ) ; }
Distance : 3

49
Tree	{ return escapeJavaStyleString ( str , str , rhs.b ) ; }
Code	{ return escapeJavaStyleString ( str , str , rhs.b ) ; }
Distance : 2

========================================================================


========================================================================
Example Number: 43
Parent Code is: 
if ( element != null ) { type = element . getClass () ; } else { type = Object . class ; }
-------------------------------------------------------------------------------
Child code is: 
if ( element != null ) { type = element . getClass () ; } else { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=element}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=type}) (204{val==}) (32 (800{val=element}) (235{val=.}) (802{val=getClass}) (216{val=()}))) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (21 (7 (800{val=type}) (204{val==}) (57 (43 (800{val=Object})) (235{val=.}) (341{val=class}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=element}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=type}) (204{val==}) (32 (800{val=element}) (235{val=.}) (802{val=getClass}) (216{val=()}))) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=IllegalArgumentException})) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/35/parent/src_main_java_org_apache_commons_lang3_ArrayUtils.java
-------------------------------------------------------------------------------
Edit Distance : 6
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) type . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) type . getClass () ; }
Distance : 8

1
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( type ) Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( type ) Object . getClass () ; }
Distance : 8

2
Tree	if ( element != null ) { type = element . getClass () ; } else { type = values.length ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = values.length ; }
Distance : 6

3
Tree	if ( element != null ) { type = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = element . getClass () ; }
Distance : 6

4
Tree	if ( element != null ) { type = false ; } else { type = type . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = type . getClass () ; }
Distance : 10

5
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = array.length ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = array.length ; }
Distance : 10

6
Tree	if ( element != null ) { type = false ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = Object . getClass () ; }
Distance : 10

7
Tree	if ( element != null ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 6

8
Tree	if ( element != null ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 6

9
Tree	if ( element != null ) { finderStub.actualToReturn = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { finderStub.actualToReturn = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 7

10
Tree	if ( element != null ) { type = element . getClass () ; } else { type = type . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = type . getClass () ; }
Distance : 6

11
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) element . getClass () ; }
Distance : 8

12
Tree	if ( element != null ) { type = element . getClass () ; } else { FeatureSet.ES3 = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { FeatureSet.ES3 = Object . getClass () ; }
Distance : 6

13
Tree	if ( element != null ) { type = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = element . getClass () ; }
Distance : 6

14
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( element ) Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( element ) Object . getClass () ; }
Distance : 8

15
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) Object . getClass () ; }
Distance : 8

16
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { synchronized = Object . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { synchronized = Object . getClass () ; }
Distance : 9

17
Tree	if ( element != null ) { type = element . getClass () ; } else { private = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { private = Object . getClass () ; }
Distance : 6

18
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { pushAnnotations = Object . getClass () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { pushAnnotations = Object . getClass () ; }
Distance : 10

19
Tree	if ( element != null ) { type = element . getClass () ; } else { if = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { if = Object . getClass () ; }
Distance : 6

20
Tree	if ( element != null ) { type = false ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = element . getClass () ; }
Distance : 10

21
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { FeatureSet.ES3 = Object . getClass () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { FeatureSet.ES3 = Object . getClass () ; }
Distance : 10

22
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { synchronized = Object . getClass () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { synchronized = Object . getClass () ; }
Distance : 10

23
Tree	if ( element != null ) { type = element . getClass () ; } else { if = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { if = Object . getClass () ; }
Distance : 6

24
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { pushAnnotations = Object . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { pushAnnotations = Object . getClass () ; }
Distance : 9

25
Tree	if ( element != null ) { type = true ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = true ; } else { type = Object . getClass () ; }
Distance : 10

26
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { FeatureSet.ES3 = Object . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { FeatureSet.ES3 = Object . getClass () ; }
Distance : 9

27
Tree	if ( element != null ) { Double.NEGATIVE_INFINITY = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { Double.NEGATIVE_INFINITY = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 7

28
Tree	if ( element != null ) { type = true ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = true ; } else { type = element . getClass () ; }
Distance : 10

29
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { if = Object . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { if = Object . getClass () ; }
Distance : 9

30
Tree	if ( element != null ) { type = element . getClass () ; } else { FeatureSet.ES3 = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { FeatureSet.ES3 = Object . getClass () ; }
Distance : 6

31
Tree	if ( element != null ) { type = element . getClass () ; } else { pushAnnotations = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { pushAnnotations = Object . getClass () ; }
Distance : 6

32
Tree	if ( element != null ) { type = element . getClass () ; } else { Name = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { Name = Object . getClass () ; }
Distance : 6

33
Tree	if ( element != null ) { type = element . getClass () ; } else { type = LanguageMode.ECMASCRIPT8 ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = LanguageMode.ECMASCRIPT8 ; }
Distance : 6

34
Tree	if ( element != null ) { type = type . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type = Object . getClass () ; }
Distance : 7

35
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = values.length ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = values.length ; }
Distance : 10

36
Tree	if ( element != null ) { Long.MAX_VALUE = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { Long.MAX_VALUE = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 7

37
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { if = Object . getClass () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { if = Object . getClass () ; }
Distance : 10

38
Tree	if ( element != null ) { element = element . getClass () ; } else { type = Object . getClass () ; }
Code	if ( element != null ) { element = element . getClass () ; } else { type = Object . getClass () ; }
Distance : 7

39
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = FeatureSet.ES3 ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = FeatureSet.ES3 ; }
Distance : 10

40
Tree	if ( element != null ) { type = element . getClass () ; } else { type = FeatureSet.ES3 ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = FeatureSet.ES3 ; }
Distance : 6

41
Tree	if ( element != null ) { type = element . getClass () ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Distance : 6

42
Tree	if ( element != null ) { type = element . getClass () ; } else { else = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { else = Object . getClass () ; }
Distance : 6

43
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Distance : 10

44
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { else = Object . getClass () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { else = Object . getClass () ; }
Distance : 9

45
Tree	if ( element != null ) { type = element . getClass () ; } else { type = StringUtils.EMPTY ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = StringUtils.EMPTY ; }
Distance : 6

46
Tree	if ( element != null ) { type = element . getClass () ; } else { else = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { else = Object . getClass () ; }
Distance : 6

47
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = StringUtils.EMPTY ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = StringUtils.EMPTY ; }
Distance : 10

48
Tree	if ( element != null ) { type = element . getClass () ; } else { pushAnnotations = Object . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { pushAnnotations = Object . getClass () ; }
Distance : 6

49
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { else = Object . getClass () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { else = Object . getClass () ; }
Distance : 10

========================================================================


========================================================================
Example Number: 44
Parent Code is: 
return m . containsKey ( value ) ;
-------------------------------------------------------------------------------
Child code is: 
return m != null && m . containsKey ( value ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=m}) (235{val=.}) (802{val=containsKey}) (214{val=(}) (800{val=value}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (27 (27 (800{val=m}) (242{val=!=}) (500{val=null})) (249{val=&&}) (32 (800{val=m}) (235{val=.}) (802{val=containsKey}) (214{val=(}) (800{val=value}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/34/parent/src_main_java_org_apache_commons_lang3_builder_ToStringStyle.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	return value . containsKey ( value ) ;
Code	return value . containsKey ( value ) ;
Distance : 5

1
Tree	return this . m . containsKey ( value ) ;
Code	return this . m . containsKey ( value ) ;
Distance : 4

2
Tree	return m ;
Code	return m ;
Distance : 9

3
Tree	return new IllegalStateException ( value ) ;
Code	return new IllegalStateException ( value ) ;
Distance : 7

4
Tree	return new Interval ( value , false ) ;
Code	return new Interval ( value , false ) ;
Distance : 9

5
Tree	return m . containsKey ( STRING_CONSTANT , value ) ;
Code	return m . containsKey ( STRING_CONSTANT , value ) ;
Distance : 6

6
Tree	return value . containsKey ( STRING_CONSTANT , m ) ;
Code	return value . containsKey ( STRING_CONSTANT , m ) ;
Distance : 8

7
Tree	return value . containsKey ( value ) . containsKey ( value ) ;
Code	return value . containsKey ( value ) . containsKey ( value ) ;
Distance : 6

8
Tree	return value . containsKey () . containsKey ( value ) ;
Code	return value . containsKey () . containsKey ( value ) ;
Distance : 5

9
Tree	return m . containsKey ( m ) . containsKey ( m ) ;
Code	return m . containsKey ( m ) . containsKey ( m ) ;
Distance : 5

10
Tree	return value . containsKey () . containsKey ( m ) ;
Code	return value . containsKey () . containsKey ( m ) ;
Distance : 6

11
Tree	return m . containsKey ( value ) ;
Code	return m . containsKey ( value ) ;
Distance : 4

12
Tree	return m ; i
Code	return m ; i
Distance : 10

13
Tree	return new MaxCountExceededException ( value ) ;
Code	return new MaxCountExceededException ( value ) ;
Distance : 7

14
Tree	return new Interval ( value ) ;
Code	return new Interval ( value ) ;
Distance : 7

15
Tree	return m . containsKey ( STRING_CONSTANT , m ) ; !=
Code	return m . containsKey ( STRING_CONSTANT , m ) ; !=
Distance : 8

16
Tree	return value . containsKey ( STRING_CONSTANT , value ) ;
Code	return value . containsKey ( STRING_CONSTANT , value ) ;
Distance : 7

17
Tree	return new MaxCountExceededException ( value , false ) ;
Code	return new MaxCountExceededException ( value , false ) ;
Distance : 9

18
Tree	return m . containsKey ( value ) . containsKey ( value ) ;
Code	return m . containsKey ( value ) . containsKey ( value ) ;
Distance : 5

19
Tree	return new Throwable ( value , false ) ;
Code	return new Throwable ( value , false ) ;
Distance : 9

20
Tree	return new MathIllegalStateException ( value , false ) ;
Code	return new MathIllegalStateException ( value , false ) ;
Distance : 9

21
Tree	return value + NUMBER_CONSTANT ;
Code	return value + NUMBER_CONSTANT ;
Distance : 10

22
Tree	return new Throwable ( value ) ;
Code	return new Throwable ( value ) ;
Distance : 7

23
Tree	return m . containsKey ( m ) ;
Code	return m . containsKey ( m ) ;
Distance : 5

24
Tree	return m . containsKey () . containsKey ( value ) ; !=
Code	return m . containsKey () . containsKey ( value ) ; !=
Distance : 5

25
Tree	return m . containsKey ( value ) ; !=
Code	return m . containsKey ( value ) ; !=
Distance : 5

26
Tree	return containsKey ( value ) ;
Code	return containsKey ( value ) ;
Distance : 6

27
Tree	return this . value . containsKey ( m ) ;
Code	return this . value . containsKey ( m ) ;
Distance : 6

28
Tree	return m . containsKey () . containsKey ( value ) ;
Code	return m . containsKey () . containsKey ( value ) ;
Distance : 4

29
Tree	return m + NUMBER_CONSTANT ;
Code	return m + NUMBER_CONSTANT ;
Distance : 9

30
Tree	return m ; +
Code	return m ; +
Distance : 10

31
Tree	return m ; value
Code	return m ; value
Distance : 9

32
Tree	return m . containsKey ( value ) . containsKey ( m ) ;
Code	return m . containsKey ( value ) . containsKey ( m ) ;
Distance : 6

33
Tree	return m . containsKey () . containsKey ( m ) ;
Code	return m . containsKey () . containsKey ( m ) ;
Distance : 5

34
Tree	return containsKey ( m ) ;
Code	return containsKey ( m ) ;
Distance : 7

35
Tree	return m . containsKey ( m ) . containsKey ( value ) ;
Code	return m . containsKey ( m ) . containsKey ( value ) ;
Distance : 4

36
Tree	return new MathIllegalStateException ( value ) ;
Code	return new MathIllegalStateException ( value ) ;
Distance : 7

37
Tree	return m . containsKey ( STRING_CONSTANT , m ) ;
Code	return m . containsKey ( STRING_CONSTANT , m ) ;
Distance : 7

38
Tree	return this . value . containsKey ( value ) ;
Code	return this . value . containsKey ( value ) ;
Distance : 5

39
Tree	return new IllegalStateException ( value , false ) ;
Code	return new IllegalStateException ( value , false ) ;
Distance : 9

40
Tree	return this . m . containsKey ( m ) ;
Code	return this . m . containsKey ( m ) ;
Distance : 5

41
Tree	return value ;
Code	return value ;
Distance : 9

42
Tree	return value . containsKey ( m ) ;
Code	return value . containsKey ( m ) ;
Distance : 6

43
Tree	return containsKey ( value ) ; value
Code	return containsKey ( value ) ; value
Distance : 7

44
Tree	return containsKey ( value ) ; i
Code	return containsKey ( value ) ; i
Distance : 7

45
Tree	return containsKey ( value ) ; +
Code	return containsKey ( value ) ; +
Distance : 7

46
Tree	return m + NUMBER_CONSTANT ; value
Code	return m + NUMBER_CONSTANT ; value
Distance : 9

47
Tree	return this . m . containsKey ( value ) ; !=
Code	return this . m . containsKey ( value ) ; !=
Distance : 5

48
Tree	return m + NUMBER_CONSTANT ; i
Code	return m + NUMBER_CONSTANT ; i
Distance : 10

49
Tree	return m + NUMBER_CONSTANT ; +
Code	return m + NUMBER_CONSTANT ; +
Distance : 10

========================================================================


========================================================================
Example Number: 45
Parent Code is: 
CharSequence cs
-------------------------------------------------------------------------------
Child code is: 
String cs
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (44 (43 (801{val=CharSequence})) (800{val=cs})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (44 (43 (801{val=String})) (800{val=cs})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/30/parent/src_main_java_org_apache_commons_lang3_StringUtils.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 50
Correct
========================================================================
True

0
Tree	CharSequence cs +
Code	CharSequence cs +
Distance : 2

1
Tree	cs < cs > cs e
Code	cs < cs > cs e
Distance : 5

2
Tree	cs < cs > cs void
Code	cs < cs > cs void
Distance : 5

3
Tree	rows
Code	rows
Distance : 2

4
Tree	@ CharSequence CharSequence cs
Code	@ CharSequence CharSequence cs
Distance : 3

5
Tree	public CharSequence cs
Code	public CharSequence cs
Distance : 2

6
Tree	static CharSequence cs
Code	static CharSequence cs
Distance : 2

7
Tree	final cs < cs > cs
Code	final cs < cs > cs
Distance : 5

8
Tree	int . . . cs
Code	int . . . cs
Distance : 4

9
Tree	final int cs
Code	final int cs
Distance : 2

10
Tree	abstract cs < cs > cs
Code	abstract cs < cs > cs
Distance : 5

11
Tree	long cs
Code	long cs
Distance : 1

12
Tree	@ String CharSequence cs
Code	@ String CharSequence cs
Distance : 2

13
Tree	boolean cs
Code	boolean cs
Distance : 1

14
Tree	protected cs < cs > cs
Code	protected cs < cs > cs
Distance : 5

15
Tree	public cs < cs > cs
Code	public cs < cs > cs
Distance : 5

16
Tree	final long cs
Code	final long cs
Distance : 2

17
Tree	static cs < cs > cs
Code	static cs < cs > cs
Distance : 5

18
Tree	@ String String cs
Code	@ String String cs
Distance : 2

19
Tree	char . . . cs
Code	char . . . cs
Distance : 4

20
Tree	int cs
Code	int cs
Distance : 1

21
Tree	cs < cs > cs T
Code	cs < cs > cs T
Distance : 5

22
Tree	final cs
Code	final cs
Distance : 1

23
Tree	cs < cs > cs
Code	cs < cs > cs
Distance : 4

24
Tree	Localizable cs
Code	Localizable cs
Distance : 1

25
Tree	cs
Code	cs
Distance : 1

26
Tree	CharSequence cs i
Code	CharSequence cs i
Distance : 2

27
Tree	sb
Code	sb
Distance : 2

28
Tree	final CharSequence cs
Code	final CharSequence cs
Distance : 2

29
Tree	abstract CharSequence cs
Code	abstract CharSequence cs
Distance : 2

30
Tree	@ CharSequence CharSequence cs !=
Code	@ CharSequence CharSequence cs !=
Distance : 4

31
Tree	CharSequence cs
Code	CharSequence cs
Distance : 1

32
Tree	final byte cs
Code	final byte cs
Distance : 2

33
Tree	char cs
Code	char cs
Distance : 1

34
Tree	byte . . . cs
Code	byte . . . cs
Distance : 4

35
Tree	final boolean cs
Code	final boolean cs
Distance : 2

36
Tree	. cs
Code	. cs
Distance : 1

37
Tree	boolean . . . cs
Code	boolean . . . cs
Distance : 4

38
Tree	long . . . cs
Code	long . . . cs
Distance : 4

39
Tree	final char cs
Code	final char cs
Distance : 2

40
Tree	Locale.ENGLISH cs
Code	Locale.ENGLISH cs
Distance : 1

41
Tree	@ CharSequence String cs
Code	@ CharSequence String cs
Distance : 2

42
Tree	columns
Code	columns
Distance : 2

43
Tree	String cs
Code	String cs
Distance : 0

44
Tree	final
Code	final
Distance : 2

45
Tree	byte cs
Code	byte cs
Distance : 1

46
Tree	final String cs
Code	final String cs
Distance : 1

47
Tree	Precision.SAFE_MIN cs
Code	Precision.SAFE_MIN cs
Distance : 1

48
Tree	CharSequence cs value
Code	CharSequence cs value
Distance : 2

49
Tree	cs < cs > cs compiler
Code	cs < cs > cs compiler
Distance : 5

========================================================================


========================================================================
Example Number: 46
Parent Code is: 
Calendar c = new GregorianCalendar ( mTimeZone ) ;
-------------------------------------------------------------------------------
Child code is: 
Calendar c = new GregorianCalendar ( mTimeZone , mLocale ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Calendar})) (59 (800{val=c}) (204{val==}) (14 (304{val=new}) (43 (801{val=GregorianCalendar})) (214{val=(}) (800{val=mTimeZone}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Calendar})) (59 (800{val=c}) (204{val==}) (14 (304{val=new}) (43 (801{val=GregorianCalendar})) (214{val=(}) (800{val=mTimeZone}) (234{val=,}) (800{val=mLocale}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/26/parent/src_main_java_org_apache_commons_lang3_time_FastDateFormat.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 50
Correct
========================================================================
True

0
Tree	final GregorianCalendar c = new Calendar ( mTimeZone ) ;
Code	final GregorianCalendar c = new Calendar ( mTimeZone ) ;
Distance : 5

1
Tree	final Calendar c = new GregorianCalendar ( mTimeZone ) ;
Code	final Calendar c = new GregorianCalendar ( mTimeZone ) ;
Distance : 3

2
Tree	GregorianCalendar c = new GregorianCalendar ( mTimeZone , false ) ;
Code	GregorianCalendar c = new GregorianCalendar ( mTimeZone , false ) ;
Distance : 2

3
Tree	Calendar c = new GregorianCalendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Distance : 5

4
Tree	Calendar c = new GregorianCalendar ( mTimeZone , plane.w ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , plane.w ) ;
Distance : 1

5
Tree	Calendar c = new Calendar ( RandomSource.MT , mLocale ) ;
Code	Calendar c = new Calendar ( RandomSource.MT , mLocale ) ;
Distance : 2

6
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ;
Distance : 2

7
Tree	Calendar c = new Calendar ( mTimeZone ) ;
Code	Calendar c = new Calendar ( mTimeZone ) ;
Distance : 3

8
Tree	Calendar c = new GregorianCalendar ( RandomSource.MT , mLocale ) ;
Code	Calendar c = new GregorianCalendar ( RandomSource.MT , mLocale ) ;
Distance : 1

9
Tree	Calendar c = new GregorianCalendar ( RandomSource.MT , mTimeZone ) ;
Code	Calendar c = new GregorianCalendar ( RandomSource.MT , mTimeZone ) ;
Distance : 2

10
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) . getDeclaredType () ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) . getDeclaredType () ;
Distance : 4

11
Tree	Calendar c = new GregorianCalendar ( mLocale , mLocale ) ;
Code	Calendar c = new GregorianCalendar ( mLocale , mLocale ) ;
Distance : 1

12
Tree	Calendar c = new GregorianCalendar ( mTimeZone , array.length ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , array.length ) ;
Distance : 1

13
Tree	GregorianCalendar c = new Calendar ( mTimeZone , mLocale ) ;
Code	GregorianCalendar c = new Calendar ( mTimeZone , mLocale ) ;
Distance : 2

14
Tree	Calendar c = new GregorianCalendar () ;
Code	Calendar c = new GregorianCalendar () ;
Distance : 5

15
Tree	Calendar c = new GregorianCalendar ( mTimeZone , PropertyCollapseLevel.ALL ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , PropertyCollapseLevel.ALL ) ;
Distance : 1

16
Tree	Calendar c = new Calendar ( RandomSource.MT , mTimeZone ) ;
Code	Calendar c = new Calendar ( RandomSource.MT , mTimeZone ) ;
Distance : 3

17
Tree	Calendar c = new Calendar ( mTimeZone , mLocale ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale ) ;
Distance : 1

18
Tree	Calendar c = new GregorianCalendar ( mTimeZone , mLocale ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , mLocale ) ;
Distance : 0

19
Tree	Calendar c = new GregorianCalendar ( mLocale , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Code	Calendar c = new GregorianCalendar ( mLocale , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Distance : 6

20
Tree	Calendar c = new Calendar () ;
Code	Calendar c = new Calendar () ;
Distance : 6

21
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) . returnZero () ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) . returnZero () ;
Distance : 4

22
Tree	Calendar c = new GregorianCalendar ( mTimeZone , false ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , false ) ;
Distance : 1

23
Tree	Calendar c = new GregorianCalendar ( mLocale ) ;
Code	Calendar c = new GregorianCalendar ( mLocale ) ;
Distance : 2

24
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) . length () ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) . length () ;
Distance : 4

25
Tree	GregorianCalendar c = new Calendar ( mTimeZone ) ;
Code	GregorianCalendar c = new Calendar ( mTimeZone ) ;
Distance : 4

26
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) . sample () ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) . sample () ;
Distance : 4

27
Tree	GregorianCalendar c = new GregorianCalendar ( mTimeZone ) ;
Code	GregorianCalendar c = new GregorianCalendar ( mTimeZone ) ;
Distance : 3

28
Tree	Calendar c = new Calendar ( mTimeZone , array.length ) ;
Code	Calendar c = new Calendar ( mTimeZone , array.length ) ;
Distance : 2

29
Tree	GregorianCalendar c = new Calendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Code	GregorianCalendar c = new Calendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Distance : 7

30
Tree	GregorianCalendar c = new Calendar () ;
Code	GregorianCalendar c = new Calendar () ;
Distance : 7

31
Tree	GregorianCalendar c = new GregorianCalendar () ;
Code	GregorianCalendar c = new GregorianCalendar () ;
Distance : 6

32
Tree	Calendar c = new Calendar ( mTimeZone ) . getDeclaredType () ;
Code	Calendar c = new Calendar ( mTimeZone ) . getDeclaredType () ;
Distance : 5

33
Tree	Calendar c = new Calendar ( mTimeZone , false ) ;
Code	Calendar c = new Calendar ( mTimeZone , false ) ;
Distance : 2

34
Tree	final GregorianCalendar c = new GregorianCalendar ( mTimeZone ) ;
Code	final GregorianCalendar c = new GregorianCalendar ( mTimeZone ) ;
Distance : 4

35
Tree	Calendar c = mLocale . getInstance ( mTimeZone ) ;
Code	Calendar c = mLocale . getInstance ( mTimeZone ) ;
Distance : 5

36
Tree	Calendar c = new GregorianCalendar ( mTimeZone , v1.data.length ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , v1.data.length ) ;
Distance : 1

37
Tree	Calendar c = mTimeZone . getInstance ( mTimeZone ) ;
Code	Calendar c = mTimeZone . getInstance ( mTimeZone ) ;
Distance : 5

38
Tree	Calendar c = c . getInstance ( mTimeZone ) ;
Code	Calendar c = c . getInstance ( mTimeZone ) ;
Distance : 5

39
Tree	Calendar c = new GregorianCalendar ( mLocale , false ) ;
Code	Calendar c = new GregorianCalendar ( mLocale , false ) ;
Distance : 2

40
Tree	Calendar c = new Calendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Code	Calendar c = new Calendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Distance : 6

41
Tree	final Calendar c = new Calendar ( mTimeZone ) ;
Code	final Calendar c = new Calendar ( mTimeZone ) ;
Distance : 4

42
Tree	GregorianCalendar c = new GregorianCalendar ( mTimeZone , mLocale ) ;
Code	GregorianCalendar c = new GregorianCalendar ( mTimeZone , mLocale ) ;
Distance : 1

43
Tree	Calendar c = new GregorianCalendar ( Decomposition.QR , mLocale ) ;
Code	Calendar c = new GregorianCalendar ( Decomposition.QR , mLocale ) ;
Distance : 1

44
Tree	final GregorianCalendar c = new GregorianCalendar ( mLocale ) ;
Code	final GregorianCalendar c = new GregorianCalendar ( mLocale ) ;
Distance : 4

45
Tree	GregorianCalendar c = mLocale . getInstance ( mTimeZone ) ;
Code	GregorianCalendar c = mLocale . getInstance ( mTimeZone ) ;
Distance : 6

46
Tree	GregorianCalendar c = new Calendar ( mTimeZone , false ) ;
Code	GregorianCalendar c = new Calendar ( mTimeZone , false ) ;
Distance : 3

47
Tree	GregorianCalendar c = new GregorianCalendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Code	GregorianCalendar c = new GregorianCalendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Distance : 6

48
Tree	Calendar c = mLocale . toString ( mTimeZone ) ;
Code	Calendar c = mLocale . toString ( mTimeZone ) ;
Distance : 5

49
Tree	Calendar mLocale = new GregorianCalendar () ;
Code	Calendar mLocale = new GregorianCalendar () ;
Distance : 6

========================================================================


========================================================================
Example Number: 47
Parent Code is: 
if ( chars [ i ] == CHAR_CONS  chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
-------------------------------------------------------------------------------
Child code is: 
if ( chars [ i ] == CHAR_CONS  chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp && ! hasDecPoint ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (2 (801{val=chars}) (221{val=[}) (800{val=i}) (222{val=]})) (236{val===}) (13{val=CHAR_CONS})) (250{val=||}) (27 (2 (801{val=chars}) (221{val=[}) (800{val=i}) (222{val=]})) (236{val===}) (13{val=CHAR_CONS}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (27 (800{val=foundDigit}) (249{val=&&}) (38 (207{val=!}) (800{val=hasExp}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (2 (801{val=chars}) (221{val=[}) (800{val=i}) (222{val=]})) (236{val===}) (13{val=CHAR_CONS})) (250{val=||}) (27 (2 (801{val=chars}) (221{val=[}) (800{val=i}) (222{val=]})) (236{val===}) (13{val=CHAR_CONS}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (27 (800{val=foundDigit}) (249{val=&&}) (38 (207{val=!}) (800{val=hasExp})) (249{val=&&}) (38 (207{val=!}) (800{val=hasDecPoint}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/24/parent/src_main_java_org_apache_commons_lang3_math_NumberUtils.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 5
Wrong
========================================================================
False

0
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Distance : 4

1
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! hasExp ; }
Distance : 5

2
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! i ; }
Distance : 5

3
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! i ; }
Distance : 6

4
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Distance : 4

========================================================================


========================================================================
Example Number: 48
Parent Code is: 
cal1 . get ( Calendar.HOUR ) == cal2 . get ( Calendar.HOUR )
-------------------------------------------------------------------------------
Child code is: 
cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (32 (800{val=cal1}) (235{val=.}) (802{val=get}) (214{val=(}) (40{val=Calendar.HOUR}) (215{val=)})) (236{val===}) (32 (800{val=cal2}) (235{val=.}) (802{val=get}) (214{val=(}) (40{val=Calendar.HOUR}) (215{val=)}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (32 (800{val=cal1}) (235{val=.}) (802{val=get}) (214{val=(}) (40{val=Calendar.HOUR_OF_DAY}) (215{val=)})) (236{val===}) (32 (800{val=cal2}) (235{val=.}) (802{val=get}) (214{val=(}) (40{val=Calendar.HOUR_OF_DAY}) (215{val=)}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/21/parent/src_main_java_org_apache_commons_lang3_time_DateUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) < CHAR_CONS
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) < CHAR_CONS
Distance : 7

1
Tree	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY )
Code	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 7

2
Tree	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR )
Code	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR )
Distance : 8

3
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) !=
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY ) !=
Distance : 2

4
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( get
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( get
Distance : 6

5
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY
Distance : 8

6
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < ^
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < ^
Distance : 4

7
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < &
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < &
Distance : 4

8
Tree	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) i
Code	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) i
Distance : 8

9
Tree	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) value
Code	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) value
Distance : 8

10
Tree	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) i
Code	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) i
Distance : 7

11
Tree	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) +
Code	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) +
Distance : 7

12
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR_OF_DAY ) !=
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR_OF_DAY ) !=
Distance : 2

13
Tree	char cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Code	char cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Distance : 8

14
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR )
Distance : 2

15
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR_OF_DAY )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 1

16
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR )
Distance : 2

17
Tree	cal1 . get ( Calendar.HOUR ) * cal2 . get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR ) * cal2 . get ( Calendar.HOUR )
Distance : 3

18
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY
Distance : 5

19
Tree	cal1 . get ( Calendar.HOUR ) - cal2 . get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR ) - cal2 . get ( Calendar.HOUR )
Distance : 3

20
Tree	cal1 . get ( Calendar.HOUR ) * cal2 . get ( Calendar.HOUR_OF_DAY )
Code	cal1 . get ( Calendar.HOUR ) * cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 2

21
Tree	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY
Distance : 6

22
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + super
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + super
Distance : 6

23
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) < <=
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) < <=
Distance : 7

24
Tree	cal1 . get ( Calendar.HOUR ) < CHAR_CONS
Code	cal1 . get ( Calendar.HOUR ) < CHAR_CONS
Distance : 8

25
Tree	cal1 . get ( Calendar.HOUR ) < <=
Code	cal1 . get ( Calendar.HOUR ) < <=
Distance : 8

26
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < CHAR_CONS
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < CHAR_CONS
Distance : 4

27
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) < ^
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) < ^
Distance : 7

28
Tree	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY )
Code	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 6

29
Tree	boolean cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR ) ;
Code	boolean cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR ) ;
Distance : 9

30
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 1

31
Tree	cal1 . get ( Calendar.HOUR ) - cal2 . get ( Calendar.HOUR_OF_DAY )
Code	cal1 . get ( Calendar.HOUR ) - cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 2

32
Tree	get < cal2 . get ( Calendar.HOUR )
Code	get < cal2 . get ( Calendar.HOUR )
Distance : 7

33
Tree	boolean cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Code	boolean cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Distance : 8

34
Tree	int cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Code	int cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Distance : 8

35
Tree	void cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Code	void cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Distance : 8

36
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) < ^
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) < ^
Distance : 5

37
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < <=
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < <=
Distance : 4

38
Tree	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + super
Code	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + super
Distance : 7

39
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 get
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 get
Distance : 6

40
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 get cal2 Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 get cal2 Calendar.HOUR_OF_DAY
Distance : 4

41
Tree	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 get
Code	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 get
Distance : 7

42
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + CHAR_CONS
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + CHAR_CONS
Distance : 6

43
Tree	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) value
Code	cal1 < cal2 . get ( Calendar.HOUR_OF_DAY ) value
Distance : 7

44
Tree	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) +
Code	NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) +
Distance : 8

45
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + false
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY + false
Distance : 6

46
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 get + super
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 get + super
Distance : 6

47
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY ( Calendar.HOUR_OF_DAY
Distance : 6

48
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY
Distance : 7

49
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY get Calendar.HOUR_OF_DAY
Distance : 7

========================================================================


========================================================================
Example Number: 49
Parent Code is: 
{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ pos += Character . charCount ( Character . codePointAt ( input , pt ) ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (7 (800{val=pos}) (237{val=+=}) (32 (800{val=Character}) (235{val=.}) (802{val=charCount}) (214{val=(}) (32 (800{val=Character}) (235{val=.}) (802{val=codePointAt}) (214{val=(}) (800{val=input}) (234{val=,}) (800{val=pos}) (215{val=)})) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (7 (800{val=pos}) (237{val=+=}) (32 (800{val=Character}) (235{val=.}) (802{val=charCount}) (214{val=(}) (32 (800{val=Character}) (235{val=.}) (802{val=codePointAt}) (214{val=(}) (800{val=input}) (234{val=,}) (800{val=pt}) (215{val=)})) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/6/parent/src_main_java_org_apache_commons_lang3_text_translate_CharSequenceTranslator.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	{ throw pos . codePointAt ( Character [ input ] ) ; }
Code	{ throw pos . codePointAt ( Character [ input ] ) ; }
Distance : 10

1
Tree	{ pos . charCount ( Character . charCount ( input , pos ) ) ; }
Code	{ pos . charCount ( Character . charCount ( input , pos ) ) ; }
Distance : 4

2
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( Character , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( Character , pos ) ; }
Distance : 10

3
Tree	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , super ) ; }
Code	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , super ) ; }
Distance : 9

4
Tree	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input ) ) , CHAR_CONS ) ; }
Code	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input ) ) , CHAR_CONS ) ; }
Distance : 9

5
Tree	{ return; pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ return; pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

6
Tree	{ throw new add ( STRING_CONSTANT ) ; }
Code	{ throw new add ( STRING_CONSTANT ) ; }
Distance : 13

7
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 3

8
Tree	{ pos . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ pos . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 4

9
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 1

10
Tree	{ throw pos ; }
Code	{ throw pos ; }
Distance : 15

11
Tree	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input ) ) , super ) ; }
Code	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input ) ) , super ) ; }
Distance : 9

12
Tree	{ throw new pos ( STRING_CONSTANT ) ; }
Code	{ throw new pos ( STRING_CONSTANT ) ; }
Distance : 13

13
Tree	{ throw new BackgroundInitializerTestImpl ( Character ) ; }
Code	{ throw new BackgroundInitializerTestImpl ( Character ) ; }
Distance : 12

14
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; Character . charCount ( Character , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; Character . charCount ( Character , pos ) ; }
Distance : 10

15
Tree	{ throw new add ( Character . codePointAt ( input . codePointAt ( input ) ) , false ) ; }
Code	{ throw new add ( Character . codePointAt ( input . codePointAt ( input ) ) , false ) ; }
Distance : 10

16
Tree	{ throw pos . charCount ( Character [ input ] ) ; }
Code	{ throw pos . charCount ( Character [ input ] ) ; }
Distance : 9

17
Tree	{ pt += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pt += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

18
Tree	{ pos += Character . charCount ( Character . charCount ( input , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . charCount ( input , pos ) ) ; }
Distance : 2

19
Tree	{ throw new BackgroundInitializerTestImpl ( Character . codePointAt ( input . codePointAt ( input ) ) , false ) ; }
Code	{ throw new BackgroundInitializerTestImpl ( Character . codePointAt ( input . codePointAt ( input ) ) , false ) ; }
Distance : 10

20
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

21
Tree	{ pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 2

22
Tree	{ throw new BackgroundInitializerTestImpl ( STRING_CONSTANT ) ; }
Code	{ throw new BackgroundInitializerTestImpl ( STRING_CONSTANT ) ; }
Distance : 13

23
Tree	{ continue; pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ continue; pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

24
Tree	{ pos . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

25
Tree	{ pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

26
Tree	{ throw pt ; }
Code	{ throw pt ; }
Distance : 14

27
Tree	{ super(); pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Code	{ super(); pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

28
Tree	{ throw new MathArithmeticException ( STRING_CONSTANT ) ; }
Code	{ throw new MathArithmeticException ( STRING_CONSTANT ) ; }
Distance : 13

29
Tree	{ throw new add ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , false ) ; }
Code	{ throw new add ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , false ) ; }
Distance : 10

30
Tree	{ throw new TestObject ( STRING_CONSTANT ) ; }
Code	{ throw new TestObject ( STRING_CONSTANT ) ; }
Distance : 13

31
Tree	{ throw new BackgroundInitializerTestImpl ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , false ) ; }
Code	{ throw new BackgroundInitializerTestImpl ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , false ) ; }
Distance : 10

32
Tree	{ throw new MathArithmeticException ( Character ) ; }
Code	{ throw new MathArithmeticException ( Character ) ; }
Distance : 12

33
Tree	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , CHAR_CONS ) ; }
Code	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , CHAR_CONS ) ; }
Distance : 9

34
Tree	{ throw pos . charCount ( handler [ input ] ) ; }
Code	{ throw pos . charCount ( handler [ input ] ) ; }
Distance : 10

35
Tree	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , false ) ; }
Code	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , false ) ; }
Distance : 9

36
Tree	{ pt . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pt . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 4

37
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; Character . charCount ( input , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; Character . charCount ( input , pos ) ; }
Distance : 10

38
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; input . charCount ( Character , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; input . charCount ( Character , pos ) ; }
Distance : 10

39
Tree	{ throw new pos ( Character ) ; }
Code	{ throw new pos ( Character ) ; }
Distance : 12

40
Tree	{ throw pos . charCount ( Character [ Character ] ) ; }
Code	{ throw pos . charCount ( Character [ Character ] ) ; }
Distance : 10

41
Tree	{ throw Character ; }
Code	{ throw Character ; }
Distance : 14

42
Tree	{ pos . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Distance : 4

43
Tree	{ throw input ; }
Code	{ throw input ; }
Distance : 14

44
Tree	{ throw new TestObject ( Character ) ; }
Code	{ throw new TestObject ( Character ) ; }
Distance : 12

45
Tree	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input ) ) , false ) ; }
Code	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input ) ) , false ) ; }
Distance : 9

46
Tree	{ throw pos . charCount ( getField [ input ] ) ; }
Code	{ throw pos . charCount ( getField [ input ] ) ; }
Distance : 10

47
Tree	{ throw new add ( Character ) ; }
Code	{ throw new add ( Character ) ; }
Distance : 12

48
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( input , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( input , pos ) ; }
Distance : 10

49
Tree	{ throw pos ; } !=
Code	{ throw pos ; } !=
Distance : 16

========================================================================


========================================================================
Example Number: 50
Parent Code is: 
final CharSequence result = lookupMap . get ( subSeq ) ;
-------------------------------------------------------------------------------
Child code is: 
final CharSequence result = lookupMap . get ( subSeq . toString () ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (43 (801{val=CharSequence})) (59 (800{val=result}) (204{val==}) (32 (800{val=lookupMap}) (235{val=.}) (802{val=get}) (214{val=(}) (800{val=subSeq}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (43 (801{val=CharSequence})) (59 (800{val=result}) (204{val==}) (32 (800{val=lookupMap}) (235{val=.}) (802{val=get}) (214{val=(}) (32 (800{val=subSeq}) (235{val=.}) (802{val=toString}) (216{val=()})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/4/parent/src_main_java_org_apache_commons_lang3_text_translate_LookupTranslator.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 50
Correct
========================================================================
True

0
Tree	CharSequence result = lookupMap . toString ( subSeq ) ;
Code	CharSequence result = lookupMap . toString ( subSeq ) ;
Distance : 5

1
Tree	final CharSequence result = lookupMap . get ( result . get ( subSeq ) ) ;
Code	final CharSequence result = lookupMap . get ( result . get ( subSeq ) ) ;
Distance : 5

2
Tree	final CharSequence result = result . get ( subSeq . get ( subSeq ) ) ;
Code	final CharSequence result = result . get ( subSeq . get ( subSeq ) ) ;
Distance : 5

3
Tree	final CharSequence result = lookupMap . get ( result , result . get () ) ;
Code	final CharSequence result = lookupMap . get ( result , result . get () ) ;
Distance : 4

4
Tree	final CharSequence result = lookupMap . get ( subSeq . get ( result ) ) ;
Code	final CharSequence result = lookupMap . get ( subSeq . get ( result ) ) ;
Distance : 4

5
Tree	final CharSequence result = lookupMap . get ( subSeq . get ( subSeq ) ) ;
Code	final CharSequence result = lookupMap . get ( subSeq . get ( subSeq ) ) ;
Distance : 4

6
Tree	final CharSequence result = lookupMap . get () ;
Code	final CharSequence result = lookupMap . get () ;
Distance : 5

7
Tree	final CharSequence result = lookupMap . get ( null ) ;
Code	final CharSequence result = lookupMap . get ( null ) ;
Distance : 4

8
Tree	final CharSequence result = result . get ( subSeq ) ;
Code	final CharSequence result = result . get ( subSeq ) ;
Distance : 4

9
Tree	final CharSequence result = lookupMap . toString () ;
Code	final CharSequence result = lookupMap . toString () ;
Distance : 5

10
Tree	final CharSequence result = result . get ( get ( subSeq ) ) ;
Code	final CharSequence result = result . get ( get ( subSeq ) ) ;
Distance : 5

11
Tree	final CharSequence result = lookupMap . toString ( null ) ;
Code	final CharSequence result = lookupMap . toString ( null ) ;
Distance : 5

12
Tree	final CharSequence result = lookupMap . get ( subSeq , result . get () ) ;
Code	final CharSequence result = lookupMap . get ( subSeq , result . get () ) ;
Distance : 3

13
Tree	final CharSequence result = lookupMap . get ( get ( result ) ) ;
Code	final CharSequence result = lookupMap . get ( get ( result ) ) ;
Distance : 4

14
Tree	final CharSequence result = lookupMap . get ( subSeq . toString () ) ;
Code	final CharSequence result = lookupMap . get ( subSeq . toString () ) ;
Distance : 0

15
Tree	final CharSequence result = toString ( result ) ;
Code	final CharSequence result = toString ( result ) ;
Distance : 7

16
Tree	final CharSequence result = get ( subSeq ) ;
Code	final CharSequence result = get ( subSeq ) ;
Distance : 5

17
Tree	final CharSequence result = lookupMap . get ( super(); ) ;
Code	final CharSequence result = lookupMap . get ( super(); ) ;
Distance : 4

18
Tree	final CharSequence result = result . get () ;
Code	final CharSequence result = result . get () ;
Distance : 6

19
Tree	final CharSequence result = lookupMap . get ( subSeq , lookupMap . get () ) ;
Code	final CharSequence result = lookupMap . get ( subSeq , lookupMap . get () ) ;
Distance : 3

20
Tree	final CharSequence result = result . get ( null ) ;
Code	final CharSequence result = result . get ( null ) ;
Distance : 5

21
Tree	CharSequence result = result . get ( subSeq ) ;
Code	CharSequence result = result . get ( subSeq ) ;
Distance : 5

22
Tree	final CharSequence result = lookupMap . get ( ( subSeq < lookupMap > ) result ) ;
Code	final CharSequence result = lookupMap . get ( ( subSeq < lookupMap > ) result ) ;
Distance : 6

23
Tree	final CharSequence result = lookupMap . toString ( subSeq ) ;
Code	final CharSequence result = lookupMap . toString ( subSeq ) ;
Distance : 4

24
Tree	final CharSequence result = lookupMap . get ( result , lookupMap . get () ) ;
Code	final CharSequence result = lookupMap . get ( result , lookupMap . get () ) ;
Distance : 4

25
Tree	final CharSequence result = result . get ( subSeq , result . get () ) ;
Code	final CharSequence result = result . get ( subSeq , result . get () ) ;
Distance : 4

26
Tree	CharSequence result = result . get ( result ) ;
Code	CharSequence result = result . get ( result ) ;
Distance : 6

27
Tree	final CharSequence result = lookupMap . get ( result . get () ) ;
Code	final CharSequence result = lookupMap . get ( result . get () ) ;
Distance : 2

28
Tree	final CharSequence result = get ( result ) ;
Code	final CharSequence result = get ( result ) ;
Distance : 6

29
Tree	final CharSequence result = result . toString () ;
Code	final CharSequence result = result . toString () ;
Distance : 6

30
Tree	static CharSequence result = lookupMap . get ( null ) ;
Code	static CharSequence result = lookupMap . get ( null ) ;
Distance : 5

31
Tree	final CharSequence result = result . get ( get ( result ) ) ;
Code	final CharSequence result = result . get ( get ( result ) ) ;
Distance : 5

32
Tree	final CharSequence result = lookupMap . get ( get ( subSeq ) ) ;
Code	final CharSequence result = lookupMap . get ( get ( subSeq ) ) ;
Distance : 4

33
Tree	final CharSequence result = lookupMap . get ( ( subSeq < result > ) result ) ;
Code	final CharSequence result = lookupMap . get ( ( subSeq < result > ) result ) ;
Distance : 6

34
Tree	final CharSequence result = lookupMap . get ( toString ( subSeq ) ) ;
Code	final CharSequence result = lookupMap . get ( toString ( subSeq ) ) ;
Distance : 4

35
Tree	final CharSequence result = lookupMap . get ( subSeq ) ;
Code	final CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 3

36
Tree	final CharSequence result = result . get ( result ) ;
Code	final CharSequence result = result . get ( result ) ;
Distance : 5

37
Tree	final CharSequence result = toString ( subSeq ) ;
Code	final CharSequence result = toString ( subSeq ) ;
Distance : 6

38
Tree	static CharSequence result = get ( subSeq ) ;
Code	static CharSequence result = get ( subSeq ) ;
Distance : 6

39
Tree	final CharSequence result = lookupMap . get ( ( subSeq < lookupMap > ) subSeq ) ;
Code	final CharSequence result = lookupMap . get ( ( subSeq < lookupMap > ) subSeq ) ;
Distance : 6

40
Tree	final CharSequence result = result . get ( result . get ( subSeq ) ) ;
Code	final CharSequence result = result . get ( result . get ( subSeq ) ) ;
Distance : 6

41
Tree	final CharSequence result = result . get ( ( subSeq < lookupMap > ) result ) ;
Code	final CharSequence result = result . get ( ( subSeq < lookupMap > ) result ) ;
Distance : 7

42
Tree	CharSequence result = lookupMap . get ( subSeq ) ;
Code	CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 4

43
Tree	final CharSequence result = lookupMap . get ( ( result < lookupMap > ) result ) ;
Code	final CharSequence result = lookupMap . get ( ( result < lookupMap > ) result ) ;
Distance : 7

44
Tree	final CharSequence result = result . get ( subSeq . get () ) ;
Code	final CharSequence result = result . get ( subSeq . get () ) ;
Distance : 2

45
Tree	final CharSequence result = lookupMap . get ( result ) ;
Code	final CharSequence result = lookupMap . get ( result ) ;
Distance : 4

46
Tree	CharSequence result = lookupMap . get ( result ) ;
Code	CharSequence result = lookupMap . get ( result ) ;
Distance : 5

47
Tree	static CharSequence result = lookupMap . get () ;
Code	static CharSequence result = lookupMap . get () ;
Distance : 6

48
Tree	final CharSequence result = lookupMap . get ( subSeq . get () ) ;
Code	final CharSequence result = lookupMap . get ( subSeq . get () ) ;
Distance : 1

49
Tree	final CharSequence result = result . get ( result . get () ) ;
Code	final CharSequence result = result . get ( result . get () ) ;
Distance : 3

========================================================================


========================================================================
Example Number: 51
Parent Code is: 
final int cols = problem . getAllParameters () . length ;
-------------------------------------------------------------------------------
Child code is: 
final int cols = problem . getUnboundParameters () . length ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (39{val=int}) (59 (800{val=cols}) (204{val==}) (22 (32 (800{val=problem}) (235{val=.}) (802{val=getAllParameters}) (216{val=()})) (235{val=.}) (800{val=length}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (39{val=int}) (59 (800{val=cols}) (204{val==}) (22 (32 (800{val=problem}) (235{val=.}) (802{val=getUnboundParameters}) (216{val=()})) (235{val=.}) (800{val=length}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/100/parent/src_java_org_apache_commons_math_estimation_AbstractEstimator.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	int [] problem = problem . getAllParameters () ;
Code	int [] problem = problem . getAllParameters () ;
Distance : 6

1
Tree	final double cols = problem . getAllParameters () ;
Code	final double cols = problem . getAllParameters () ;
Distance : 4

2
Tree	final int cols = problem . getAllParameters ( false , length ) ;
Code	final int cols = problem . getAllParameters ( false , length ) ;
Distance : 5

3
Tree	final int cols = ( problem ) length ;
Code	final int cols = ( problem ) length ;
Distance : 5

4
Tree	final int cols = problem . getAllParameters () . length ;
Code	final int cols = problem . getAllParameters () . length ;
Distance : 1

5
Tree	final int cols = problem . getAllParameters () ;
Code	final int cols = problem . getAllParameters () ;
Distance : 3

6
Tree	double cols = problem . getAllParameters () ;
Code	double cols = problem . getAllParameters () ;
Distance : 5

7
Tree	long [] problem = problem . getAllParameters () ;
Code	long [] problem = problem . getAllParameters () ;
Distance : 6

8
Tree	final int [] problem = problem . getAllParameters () ;
Code	final int [] problem = problem . getAllParameters () ;
Distance : 5

9
Tree	final byte cols = problem . getAllParameters () ;
Code	final byte cols = problem . getAllParameters () ;
Distance : 4

10
Tree	boolean [] problem = problem . getAllParameters () ;
Code	boolean [] problem = problem . getAllParameters () ;
Distance : 6

11
Tree	final int problem = problem . getAllParameters () . length ;
Code	final int problem = problem . getAllParameters () . length ;
Distance : 2

12
Tree	final int problem = ( problem ) length ;
Code	final int problem = ( problem ) length ;
Distance : 6

13
Tree	final double cols = ( problem ) length ;
Code	final double cols = ( problem ) length ;
Distance : 6

14
Tree	final int cols = ( problem ) cols ;
Code	final int cols = ( problem ) cols ;
Distance : 6

15
Tree	char cols = problem . getAllParameters () ;
Code	char cols = problem . getAllParameters () ;
Distance : 5

16
Tree	int cols = problem . getAllParameters () ;
Code	int cols = problem . getAllParameters () ;
Distance : 4

17
Tree	int problem = problem . getAllParameters () ;
Code	int problem = problem . getAllParameters () ;
Distance : 5

18
Tree	final int problem = problem . getAllParameters ( false , length ) ;
Code	final int problem = problem . getAllParameters ( false , length ) ;
Distance : 6

19
Tree	final int [] cols = problem . getAllParameters () ;
Code	final int [] cols = problem . getAllParameters () ;
Distance : 4

20
Tree	final double cols = problem . getAllParameters () . length ;
Code	final double cols = problem . getAllParameters () . length ;
Distance : 2

21
Tree	char [] problem = problem . getAllParameters () ;
Code	char [] problem = problem . getAllParameters () ;
Distance : 6

22
Tree	final int cols = problem . getAllParameters ( false , cols ) ;
Code	final int cols = problem . getAllParameters ( false , cols ) ;
Distance : 6

23
Tree	final byte [] cols = problem . getAllParameters () ;
Code	final byte [] cols = problem . getAllParameters () ;
Distance : 5

24
Tree	static cols cols = problem . getAllParameters () ;
Code	static cols cols = problem . getAllParameters () ;
Distance : 5

25
Tree	final byte cols = problem . getAllParameters () . length ;
Code	final byte cols = problem . getAllParameters () . length ;
Distance : 2

26
Tree	static int [] [] problem = problem . getAllParameters () ;
Code	static int [] [] problem = problem . getAllParameters () ;
Distance : 7

27
Tree	static int cols = ( problem ) length ;
Code	static int cols = ( problem ) length ;
Distance : 6

28
Tree	final double [] cols = problem . getAllParameters () ;
Code	final double [] cols = problem . getAllParameters () ;
Distance : 5

29
Tree	final long [] cols = problem . getAllParameters () ;
Code	final long [] cols = problem . getAllParameters () ;
Distance : 5

30
Tree	final int cols = problem . getAllParameters ( LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY ) ;
Code	final int cols = problem . getAllParameters ( LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY ) ;
Distance : 4

31
Tree	final int cols = problem . getAllParameters ( newCachedThreadPool ) ;
Code	final int cols = problem . getAllParameters ( newCachedThreadPool ) ;
Distance : 4

32
Tree	final int cols = problem . getAllParameters ( Cartesian1D.ZERO ) ;
Code	final int cols = problem . getAllParameters ( Cartesian1D.ZERO ) ;
Distance : 4

33
Tree	final int cols = problem . getAllParameters ( Coordinates2D.ZERO ) ;
Code	final int cols = problem . getAllParameters ( Coordinates2D.ZERO ) ;
Distance : 4

34
Tree	final int cols = problem . getAllParameters ( obj1.props ) ;
Code	final int cols = problem . getAllParameters ( obj1.props ) ;
Distance : 4

35
Tree	final cols cols = problem . getAllParameters () ;
Code	final cols cols = problem . getAllParameters () ;
Distance : 4

36
Tree	final int [] [] cols = problem . getAllParameters () ;
Code	final int [] [] cols = problem . getAllParameters () ;
Distance : 5

37
Tree	final int [] [] problem = problem . getAllParameters () ;
Code	final int [] [] problem = problem . getAllParameters () ;
Distance : 6

38
Tree	abstract cols cols = problem . getAllParameters () ;
Code	abstract cols cols = problem . getAllParameters () ;
Distance : 5

39
Tree	final int problem = problem . getAllParameters () ;
Code	final int problem = problem . getAllParameters () ;
Distance : 4

40
Tree	final problem cols = problem . getAllParameters () ;
Code	final problem cols = problem . getAllParameters () ;
Distance : 4

41
Tree	long cols = problem . getAllParameters () ;
Code	long cols = problem . getAllParameters () ;
Distance : 5

42
Tree	final double cols = problem . getAllParameters ( false , length ) ;
Code	final double cols = problem . getAllParameters ( false , length ) ;
Distance : 6

43
Tree	static int cols = problem . getAllParameters () . length ;
Code	static int cols = problem . getAllParameters () . length ;
Distance : 2

44
Tree	final int cols = problem . getAllParameters ( true , length ) ;
Code	final int cols = problem . getAllParameters ( true , length ) ;
Distance : 5

45
Tree	final byte [] [] cols = problem . getAllParameters () ;
Code	final byte [] [] cols = problem . getAllParameters () ;
Distance : 6

46
Tree	double [] problem = problem . getAllParameters () ;
Code	double [] problem = problem . getAllParameters () ;
Distance : 6

47
Tree	final double [] [] cols = problem . getAllParameters () ;
Code	final double [] [] cols = problem . getAllParameters () ;
Distance : 6

48
Tree	final length cols = problem . getAllParameters () ;
Code	final length cols = problem . getAllParameters () ;
Distance : 4

49
Tree	static int cols = problem . getAllParameters () ;
Code	static int cols = problem . getAllParameters () ;
Distance : 4

========================================================================


========================================================================
Example Number: 52
Parent Code is: 
final BigDecimal [] out = new BigDecimal [ v.length ] ;
-------------------------------------------------------------------------------
Child code is: 
final BigDecimal [] out = new BigDecimal [ nRows ] ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (5 (43 (801{val=BigDecimal})) (85{val=[]})) (59 (800{val=out}) (204{val==}) (3 (304{val=new}) (5 (43 (801{val=BigDecimal})) (221{val=[})) (40{val=v.length}) (222{val=]}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (5 (43 (801{val=BigDecimal})) (85{val=[]})) (59 (800{val=out}) (204{val==}) (3 (304{val=new}) (5 (43 (801{val=BigDecimal})) (221{val=[})) (800{val=nRows}) (222{val=]}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/98/parent/src_java_org_apache_commons_math_linear_BigMatrixImpl.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 45
Correct
========================================================================
True

0
Tree	final BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Distance : 1

1
Tree	final BigDecimal [] out = new BigDecimal [] <> ;
Code	final BigDecimal [] out = new BigDecimal [] <> ;
Distance : 3

2
Tree	final BigDecimal [] out = new BigDecimal [] ++ ;
Code	final BigDecimal [] out = new BigDecimal [] ++ ;
Distance : 3

3
Tree	final BigDecimal [] out = new BigDecimal [] >= ;
Code	final BigDecimal [] out = new BigDecimal [] >= ;
Distance : 3

4
Tree	final BigDecimal [] out = new BigDecimal [] / ;
Code	final BigDecimal [] out = new BigDecimal [] / ;
Distance : 3

5
Tree	final BigDecimal [] out = new BigDecimal [] <> ] ;
Code	final BigDecimal [] out = new BigDecimal [] <> ] ;
Distance : 2

6
Tree	final BigDecimal [] out = new BigDecimal [] >= ] ;
Code	final BigDecimal [] out = new BigDecimal [] >= ] ;
Distance : 2

7
Tree	final BigDecimal [] out = new BigDecimal [] % ] ;
Code	final BigDecimal [] out = new BigDecimal [] % ] ;
Distance : 2

8
Tree	static BigDecimal [] out = new BigDecimal [ nRows ] ;
Code	static BigDecimal [] out = new BigDecimal [ nRows ] ;
Distance : 1

9
Tree	static BigDecimal [] out = new BigDecimal [] out ] ;
Code	static BigDecimal [] out = new BigDecimal [] out ] ;
Distance : 3

10
Tree	final BigDecimal [] out = nRows . getInstance ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . getInstance ( nRows , null ) ;
Distance : 7

11
Tree	final BigDecimal [] out = new BigDecimal < out > [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new BigDecimal < out > [ NUMBER_CONSTANT ] ;
Distance : 4

12
Tree	abstract BigDecimal [] out = new BigDecimal [ nRows ] ;
Code	abstract BigDecimal [] out = new BigDecimal [ nRows ] ;
Distance : 1

13
Tree	final BigDecimal [] out = nRows . is ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . is ( nRows , null ) ;
Distance : 7

14
Tree	private BigDecimal [] out = new BigDecimal [ v.length ] ;
Code	private BigDecimal [] out = new BigDecimal [ v.length ] ;
Distance : 2

15
Tree	abstract BigDecimal [] out = new BigDecimal [] out ] ;
Code	abstract BigDecimal [] out = new BigDecimal [] out ] ;
Distance : 3

16
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ;
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ;
Distance : 1

17
Tree	static BigDecimal [] out = new BigDecimal [ v.length ] ;
Code	static BigDecimal [] out = new BigDecimal [ v.length ] ;
Distance : 2

18
Tree	abstract BigDecimal [] out = new BigDecimal [ v.length ] ;
Code	abstract BigDecimal [] out = new BigDecimal [ v.length ] ;
Distance : 2

19
Tree	final BigDecimal [] out = nRows . getDimension ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . getDimension ( nRows , null ) ;
Distance : 7

20
Tree	private BigDecimal [] out = new BigDecimal [ nRows ] ;
Code	private BigDecimal [] out = new BigDecimal [ nRows ] ;
Distance : 1

21
Tree	final BigDecimal [] out = new BigDecimal [] nRows ] ;
Code	final BigDecimal [] out = new BigDecimal [] nRows ] ;
Distance : 1

22
Tree	final BigDecimal [] nRows = new BigDecimal [ v.length ] ;
Code	final BigDecimal [] nRows = new BigDecimal [ v.length ] ;
Distance : 2

23
Tree	final BigDecimal [] out = nRows . isNaN ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . isNaN ( nRows , null ) ;
Distance : 7

24
Tree	final BigDecimal [] out = nRows . nRows ( new BigDecimal [ NUMBER_CONSTANT ] , false ) ;
Code	final BigDecimal [] out = nRows . nRows ( new BigDecimal [ NUMBER_CONSTANT ] , false ) ;
Distance : 8

25
Tree	final BigDecimal [] out = nRows . nRows ( new BigDecimal [ NUMBER_CONSTANT ] , true ) ;
Code	final BigDecimal [] out = nRows . nRows ( new BigDecimal [ NUMBER_CONSTANT ] , true ) ;
Distance : 8

26
Tree	static BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Code	static BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Distance : 2

27
Tree	final BigDecimal [] out = out . out ( new BigDecimal [ NUMBER_CONSTANT ] , false ) ;
Code	final BigDecimal [] out = out . out ( new BigDecimal [ NUMBER_CONSTANT ] , false ) ;
Distance : 8

28
Tree	final BigDecimal [] out = nRows . out ( new BigDecimal [ NUMBER_CONSTANT ] , false ) ;
Code	final BigDecimal [] out = nRows . out ( new BigDecimal [ NUMBER_CONSTANT ] , false ) ;
Distance : 8

29
Tree	static BigDecimal [] out = new BigDecimal < nRows > [ NUMBER_CONSTANT ] ;
Code	static BigDecimal [] out = new BigDecimal < nRows > [ NUMBER_CONSTANT ] ;
Distance : 5

30
Tree	abstract BigDecimal [] out = new BigDecimal < nRows > [ NUMBER_CONSTANT ] ;
Code	abstract BigDecimal [] out = new BigDecimal < nRows > [ NUMBER_CONSTANT ] ;
Distance : 5

31
Tree	final BigDecimal [] out = nRows . hashCode ( nRows , null ) ;
Code	final BigDecimal [] out = nRows . hashCode ( nRows , null ) ;
Distance : 7

32
Tree	final BigDecimal [] out = new BigDecimal [] ^ ;
Code	final BigDecimal [] out = new BigDecimal [] ^ ;
Distance : 3

33
Tree	final BigDecimal [] out = new BigDecimal [] out ] ;
Code	final BigDecimal [] out = new BigDecimal [] out ] ;
Distance : 2

34
Tree	final BigDecimal [] out = new BigDecimal [] / ] ;
Code	final BigDecimal [] out = new BigDecimal [] / ] ;
Distance : 2

35
Tree	final BigDecimal [] out = out . nRows ( new BigDecimal [ NUMBER_CONSTANT ] , false ) ;
Code	final BigDecimal [] out = out . nRows ( new BigDecimal [ NUMBER_CONSTANT ] , false ) ;
Distance : 8

36
Tree	final BigDecimal [] out = new BigDecimal [] ++ ] ;
Code	final BigDecimal [] out = new BigDecimal [] ++ ] ;
Distance : 2

37
Tree	final BigDecimal [] out = new BigDecimal [ nRows ] ;
Code	final BigDecimal [] out = new BigDecimal [ nRows ] ;
Distance : 0

38
Tree	static BigDecimal [] out = new BigDecimal [] nRows ] ;
Code	static BigDecimal [] out = new BigDecimal [] nRows ] ;
Distance : 2

39
Tree	abstract BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Code	abstract BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Distance : 2

40
Tree	final BigDecimal [] out = new BigDecimal [ out ] ;
Code	final BigDecimal [] out = new BigDecimal [ out ] ;
Distance : 1

41
Tree	private BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Code	private BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Distance : 2

42
Tree	final BigDecimal [] out = new BigDecimal < nRows > [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new BigDecimal < nRows > [ NUMBER_CONSTANT ] ;
Distance : 4

43
Tree	final BigDecimal [] nRows = new BigDecimal [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] nRows = new BigDecimal [ NUMBER_CONSTANT ] ;
Distance : 2

44
Tree	static BigDecimal [] out = new BigDecimal < out > [ NUMBER_CONSTANT ] ;
Code	static BigDecimal [] out = new BigDecimal < out > [ NUMBER_CONSTANT ] ;
Distance : 5

========================================================================


========================================================================
Example Number: 53
Parent Code is: 
final double [] out = new double [ v.length ] ;
-------------------------------------------------------------------------------
Child code is: 
final double [] out = new double [ nRows ] ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (5 (39{val=double}) (85{val=[]})) (59 (800{val=out}) (204{val==}) (3 (304{val=new}) (5 (39{val=double}) (221{val=[})) (40{val=v.length}) (222{val=]}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (5 (39{val=double}) (85{val=[]})) (59 (800{val=out}) (204{val==}) (3 (304{val=new}) (5 (39{val=double}) (221{val=[})) (800{val=nRows}) (222{val=]}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/98/parent/src_java_org_apache_commons_math_linear_RealMatrixImpl.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 50
Correct
========================================================================
True

0
Tree	final double [] out = new double [ nRows . intValue ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ nRows . intValue ( NUMBER_CONSTANT ) ] ;
Distance : 5

1
Tree	final double [] out = new double [ nRows . getDimension ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ nRows . getDimension ( NUMBER_CONSTANT ) ] ;
Distance : 5

2
Tree	final long [] out = new double [ v.length ] ;
Code	final long [] out = new double [ v.length ] ;
Distance : 2

3
Tree	final double [] out = new double [ v.length ] ;
Code	final double [] out = new double [ v.length ] ;
Distance : 1

4
Tree	final double [] out = new double [ v.length () ] ;
Code	final double [] out = new double [ v.length () ] ;
Distance : 2

5
Tree	final double [] out = new double [ getColumnDimension () ] ;
Code	final double [] out = new double [ getColumnDimension () ] ;
Distance : 2

6
Tree	final double [] out = new double [ omega () ] ;
Code	final double [] out = new double [ omega () ] ;
Distance : 2

7
Tree	final double [] out = new double [ getDimension () ] ;
Code	final double [] out = new double [ getDimension () ] ;
Distance : 2

8
Tree	double [] out = out . getDimension () ;
Code	double [] out = out . getDimension () ;
Distance : 6

9
Tree	double [] out = out . abs () ;
Code	double [] out = out . abs () ;
Distance : 6

10
Tree	double [] out = out . getInstance () ;
Code	double [] out = out . getInstance () ;
Distance : 6

11
Tree	final long [] out = new double [ nRows ] ;
Code	final long [] out = new double [ nRows ] ;
Distance : 1

12
Tree	double [] out = out . IEEEremainder () ;
Code	double [] out = out . IEEEremainder () ;
Distance : 6

13
Tree	final double [] out = out . valueOf ( nRows , NUMBER_CONSTANT ) ;
Code	final double [] out = out . valueOf ( nRows , NUMBER_CONSTANT ) ;
Distance : 7

14
Tree	final double [] out = nRows . abs ( nRows , NUMBER_CONSTANT ) ;
Code	final double [] out = nRows . abs ( nRows , NUMBER_CONSTANT ) ;
Distance : 7

15
Tree	final double [] out = new double [ / () ] ;
Code	final double [] out = new double [ / () ] ;
Distance : 2

16
Tree	final double [] out = out . abs ( nRows , v.length ) ;
Code	final double [] out = out . abs ( nRows , v.length ) ;
Distance : 7

17
Tree	final double [] out = new double [ nRows ] ;
Code	final double [] out = new double [ nRows ] ;
Distance : 0

18
Tree	final double [] out = out . abs () ;
Code	final double [] out = out . abs () ;
Distance : 5

19
Tree	final double [] out = out . hashCode () ;
Code	final double [] out = out . hashCode () ;
Distance : 5

20
Tree	final double [] out = out . getGeneratorUpperBounds () ;
Code	final double [] out = out . getGeneratorUpperBounds () ;
Distance : 5

21
Tree	final double [] out = out . hashCode ( nRows , v.length ) ;
Code	final double [] out = out . hashCode ( nRows , v.length ) ;
Distance : 7

22
Tree	final double [] out = new double [ nRows . IEEEremainder ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ nRows . IEEEremainder ( NUMBER_CONSTANT ) ] ;
Distance : 5

23
Tree	final double [] out = out . valueOf () ;
Code	final double [] out = out . valueOf () ;
Distance : 5

24
Tree	final double [] out = nRows . abs () ;
Code	final double [] out = nRows . abs () ;
Distance : 5

25
Tree	final double [] out = out ;
Code	final double [] out = out ;
Distance : 5

26
Tree	final double [] out = new int [ v.length ] ;
Code	final double [] out = new int [ v.length ] ;
Distance : 2

27
Tree	final double [] out = out . abs ( NUMBER_CONSTANT ) ;
Code	final double [] out = out . abs ( NUMBER_CONSTANT ) ;
Distance : 6

28
Tree	final double [] out = new byte [ v.length ] ;
Code	final double [] out = new byte [ v.length ] ;
Distance : 2

29
Tree	final double [] out = nRows ;
Code	final double [] out = nRows ;
Distance : 4

30
Tree	final int [] out = new double [ nRows ] ;
Code	final int [] out = new double [ nRows ] ;
Distance : 1

31
Tree	final double [] out = out . hashCode ( NUMBER_CONSTANT ) ;
Code	final double [] out = out . hashCode ( NUMBER_CONSTANT ) ;
Distance : 6

32
Tree	final double [] out = new int [ nRows ] ;
Code	final double [] out = new int [ nRows ] ;
Distance : 1

33
Tree	final double [] out = new byte [ nRows ] ;
Code	final double [] out = new byte [ nRows ] ;
Distance : 1

34
Tree	final double [] out = out . abs ( nRows , NUMBER_CONSTANT ) ;
Code	final double [] out = out . abs ( nRows , NUMBER_CONSTANT ) ;
Distance : 7

35
Tree	double [] out = out . hashCode () ;
Code	double [] out = out . hashCode () ;
Distance : 6

36
Tree	final double [] out = out . hashCode ( nRows , NUMBER_CONSTANT ) ;
Code	final double [] out = out . hashCode ( nRows , NUMBER_CONSTANT ) ;
Distance : 7

37
Tree	final double [] out = out . getGeneratorUpperBounds ( nRows , NUMBER_CONSTANT ) ;
Code	final double [] out = out . getGeneratorUpperBounds ( nRows , NUMBER_CONSTANT ) ;
Distance : 7

38
Tree	final double [] out = out . valueOf ( nRows , v.length ) ;
Code	final double [] out = out . valueOf ( nRows , v.length ) ;
Distance : 7

39
Tree	final double [] out = nRows . abs ( nRows , v.length ) ;
Code	final double [] out = nRows . abs ( nRows , v.length ) ;
Distance : 7

40
Tree	final int [] out = out ;
Code	final int [] out = out ;
Distance : 6

41
Tree	final long [] out = out ;
Code	final long [] out = out ;
Distance : 6

42
Tree	final int [] out = nRows ;
Code	final int [] out = nRows ;
Distance : 5

43
Tree	final double [] out = out . getGeneratorUpperBounds ( nRows , v.length ) ;
Code	final double [] out = out . getGeneratorUpperBounds ( nRows , v.length ) ;
Distance : 7

44
Tree	final double [] out = out . getGeneratorUpperBounds ( NUMBER_CONSTANT ) ;
Code	final double [] out = out . getGeneratorUpperBounds ( NUMBER_CONSTANT ) ;
Distance : 6

45
Tree	final double [] out = out . valueOf ( NUMBER_CONSTANT ) ;
Code	final double [] out = out . valueOf ( NUMBER_CONSTANT ) ;
Distance : 6

46
Tree	final double [] out = nRows . abs ( NUMBER_CONSTANT ) ;
Code	final double [] out = nRows . abs ( NUMBER_CONSTANT ) ;
Distance : 6

47
Tree	final int [] out = new double [ v.length ] ;
Code	final int [] out = new double [ v.length ] ;
Distance : 2

48
Tree	final double [] out = new double [ nRows . size ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ nRows . size ( NUMBER_CONSTANT ) ] ;
Distance : 5

49
Tree	final double [] out = new double [ nRows . min ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ nRows . min ( NUMBER_CONSTANT ) ] ;
Distance : 5

========================================================================


========================================================================
Example Number: 54
Parent Code is: 
int start = getNumObjectiveFunctions () ;
-------------------------------------------------------------------------------
Child code is: 
int start = ignoreObjectiveRows ? getNumObjectiveFunctions () : NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=start}) (204{val==}) (32 (802{val=getNumObjectiveFunctions}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=start}) (204{val==}) (16 (800{val=ignoreObjectiveRows}) (233{val=?}) (32 (802{val=getNumObjectiveFunctions}) (216{val=()})) (226{val=:}) (34{val=NUMBER_CONSTANT}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/83/parent/src_main_java_org_apache_commons_math_optimization_linear_SimplexTableau.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	int += ;
Code	int += ;
Distance : 8

1
Tree	double [] ;
Code	double [] ;
Distance : 9

2
Tree	long start ;
Code	long start ;
Distance : 8

3
Tree	boolean start ;
Code	boolean start ;
Distance : 8

4
Tree	char start ;
Code	char start ;
Distance : 8

5
Tree	int start ;
Code	int start ;
Distance : 7

6
Tree	int start = NUMBER_CONSTANT ;
Code	int start = NUMBER_CONSTANT ;
Distance : 5

7
Tree	final start < getNumObjectiveFunctions > start = getNumObjectiveFunctions () ;
Code	final start < getNumObjectiveFunctions > start = getNumObjectiveFunctions () ;
Distance : 8

8
Tree	int [] ;
Code	int [] ;
Distance : 8

9
Tree	final start < start > start = getNumObjectiveFunctions () ;
Code	final start < start > start = getNumObjectiveFunctions () ;
Distance : 8

10
Tree	int /= ;
Code	int /= ;
Distance : 8

11
Tree	final Date [] start = getNumObjectiveFunctions () ;
Code	final Date [] start = getNumObjectiveFunctions () ;
Distance : 7

12
Tree	final double start = getNumObjectiveFunctions () ;
Code	final double start = getNumObjectiveFunctions () ;
Distance : 6

13
Tree	double += ;
Code	double += ;
Distance : 9

14
Tree	final Object [] start = getNumObjectiveFunctions () ;
Code	final Object [] start = getNumObjectiveFunctions () ;
Distance : 7

15
Tree	final start < getNumObjectiveFunctions > start = getNumObjectiveFunctions () ;
Code	final start < getNumObjectiveFunctions > start = getNumObjectiveFunctions () ;
Distance : 8

16
Tree	long start = NUMBER_CONSTANT ;
Code	long start = NUMBER_CONSTANT ;
Distance : 6

17
Tree	boolean start = NUMBER_CONSTANT ;
Code	boolean start = NUMBER_CONSTANT ;
Distance : 6

18
Tree	int start = getNumObjectiveFunctions ;
Code	int start = getNumObjectiveFunctions ;
Distance : 5

19
Tree	final int start = getNumObjectiveFunctions () ;
Code	final int start = getNumObjectiveFunctions () ;
Distance : 5

20
Tree	int start = start ;
Code	int start = start ;
Distance : 6

21
Tree	double start = getNumObjectiveFunctions () ;
Code	double start = getNumObjectiveFunctions () ;
Distance : 5

22
Tree	double start = getNumObjectiveFunctions ;
Code	double start = getNumObjectiveFunctions ;
Distance : 6

23
Tree	final start < start > start = getNumObjectiveFunctions () ;
Code	final start < start > start = getNumObjectiveFunctions () ;
Distance : 8

24
Tree	int start = getNumObjectiveFunctions () ;
Code	int start = getNumObjectiveFunctions () ;
Distance : 4

25
Tree	double start ;
Code	double start ;
Distance : 8

26
Tree	char start = NUMBER_CONSTANT ;
Code	char start = NUMBER_CONSTANT ;
Distance : 6

27
Tree	final byte start = getNumObjectiveFunctions () ;
Code	final byte start = getNumObjectiveFunctions () ;
Distance : 6

28
Tree	double start = NUMBER_CONSTANT ;
Code	double start = NUMBER_CONSTANT ;
Distance : 6

29
Tree	final double start = getNumObjectiveFunctions ;
Code	final double start = getNumObjectiveFunctions ;
Distance : 7

30
Tree	final MutableFloat [] start = getNumObjectiveFunctions () ;
Code	final MutableFloat [] start = getNumObjectiveFunctions () ;
Distance : 7

31
Tree	final boolean start = getNumObjectiveFunctions () ;
Code	final boolean start = getNumObjectiveFunctions () ;
Distance : 6

32
Tree	final double start = start ;
Code	final double start = start ;
Distance : 8

33
Tree	abstract start < getNumObjectiveFunctions > start = getNumObjectiveFunctions () ;
Code	abstract start < getNumObjectiveFunctions > start = getNumObjectiveFunctions () ;
Distance : 8

34
Tree	final long start = getNumObjectiveFunctions ;
Code	final long start = getNumObjectiveFunctions ;
Distance : 7

35
Tree	final Coordinates3D [] start = getNumObjectiveFunctions () ;
Code	final Coordinates3D [] start = getNumObjectiveFunctions () ;
Distance : 7

36
Tree	final MathIllegalArgumentException [] start = getNumObjectiveFunctions () ;
Code	final MathIllegalArgumentException [] start = getNumObjectiveFunctions () ;
Distance : 7

37
Tree	Coordinates3D [] start = getNumObjectiveFunctions () ;
Code	Coordinates3D [] start = getNumObjectiveFunctions () ;
Distance : 6

38
Tree	double start = start ;
Code	double start = start ;
Distance : 7

39
Tree	final int start = getNumObjectiveFunctions ;
Code	final int start = getNumObjectiveFunctions ;
Distance : 6

40
Tree	long start = getNumObjectiveFunctions () ;
Code	long start = getNumObjectiveFunctions () ;
Distance : 5

41
Tree	Date [] start = getNumObjectiveFunctions () ;
Code	Date [] start = getNumObjectiveFunctions () ;
Distance : 6

42
Tree	boolean start = getNumObjectiveFunctions () ;
Code	boolean start = getNumObjectiveFunctions () ;
Distance : 5

43
Tree	long start = getNumObjectiveFunctions ;
Code	long start = getNumObjectiveFunctions ;
Distance : 6

44
Tree	final [] start = getNumObjectiveFunctions () ;
Code	final [] start = getNumObjectiveFunctions () ;
Distance : 6

45
Tree	InvocationImpl [] start = getNumObjectiveFunctions () ;
Code	InvocationImpl [] start = getNumObjectiveFunctions () ;
Distance : 6

46
Tree	char start = getNumObjectiveFunctions () ;
Code	char start = getNumObjectiveFunctions () ;
Distance : 5

47
Tree	final int start = start ;
Code	final int start = start ;
Distance : 7

48
Tree	final long start = getNumObjectiveFunctions () ;
Code	final long start = getNumObjectiveFunctions () ;
Distance : 6

49
Tree	Object [] start = getNumObjectiveFunctions () ;
Code	Object [] start = getNumObjectiveFunctions () ;
Distance : 6

========================================================================


========================================================================
Example Number: 55
Parent Code is: 
int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Child code is: 
int j = NUMBER_CONSTANT * ( n - NUMBER_CONSTANT ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=j}) (204{val==}) (27 (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (800{val=n})) (201{val=-}) (34{val=NUMBER_CONSTANT}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=j}) (204{val==}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (36 (214{val=(}) (27 (800{val=n}) (201{val=-}) (34{val=NUMBER_CONSTANT})) (215{val=)})))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/80/parent/src_main_java_org_apache_commons_math_linear_EigenDecompositionImpl.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	int j = n < sample2.length - n ;
Code	int j = n < sample2.length - n ;
Distance : 6

1
Tree	int j = n < Year.MAXIMUM_YEAR - n ;
Code	int j = n < Year.MAXIMUM_YEAR - n ;
Distance : 6

2
Tree	double j = n & NUMBER_CONSTANT ;
Code	double j = n & NUMBER_CONSTANT ;
Distance : 6

3
Tree	double j = ( n < < NUMBER_CONSTANT ) + n - j ;
Code	double j = ( n < < NUMBER_CONSTANT ) + n - j ;
Distance : 9

4
Tree	int j = NUMBER_CONSTANT * n - j - j ;
Code	int j = NUMBER_CONSTANT * n - j - j ;
Distance : 4

5
Tree	int j = n * j - j ;
Code	int j = n * j - j ;
Distance : 5

6
Tree	int j = n < IncrementalCheckMode.GENERATE_IJS - n ;
Code	int j = n < IncrementalCheckMode.GENERATE_IJS - n ;
Distance : 6

7
Tree	int j = ( long ) n * / ;
Code	int j = ( long ) n * / ;
Distance : 6

8
Tree	int j = n * n - j ;
Code	int j = n * n - j ;
Distance : 4

9
Tree	int j = n < IncrementalCheckMode.GENERATE_IJS - j ;
Code	int j = n < IncrementalCheckMode.GENERATE_IJS - j ;
Distance : 6

10
Tree	int j = n / j - n ;
Code	int j = n / j - n ;
Distance : 6

11
Tree	int j = NUMBER_CONSTANT * n - j ;
Code	int j = NUMBER_CONSTANT * n - j ;
Distance : 3

12
Tree	double j = NUMBER_CONSTANT * n - j ;
Code	double j = NUMBER_CONSTANT * n - j ;
Distance : 4

13
Tree	int j = n / j - j ;
Code	int j = n / j - j ;
Distance : 6

14
Tree	int j = n + n - n ;
Code	int j = n + n - n ;
Distance : 5

15
Tree	int j = n / n - n ;
Code	int j = n / n - n ;
Distance : 5

16
Tree	int j = n / n - j ;
Code	int j = n / n - j ;
Distance : 5

17
Tree	int j = n + j - n ;
Code	int j = n + j - n ;
Distance : 6

18
Tree	int j = ( int ) n * ^ ;
Code	int j = ( int ) n * ^ ;
Distance : 6

19
Tree	double j = n / j - j ;
Code	double j = n / j - j ;
Distance : 7

20
Tree	int j = ( n < < NUMBER_CONSTANT ) + n - j ;
Code	int j = ( n < < NUMBER_CONSTANT ) + n - j ;
Distance : 8

21
Tree	int j = n * j - n ;
Code	int j = n * j - n ;
Distance : 5

22
Tree	int j = n * n - n ;
Code	int j = n * n - n ;
Distance : 4

23
Tree	int j = ( long ) n * ^ ;
Code	int j = ( long ) n * ^ ;
Distance : 6

24
Tree	int j = ( int ) n * % ;
Code	int j = ( int ) n * % ;
Distance : 6

25
Tree	long j = n & NUMBER_CONSTANT ;
Code	long j = n & NUMBER_CONSTANT ;
Distance : 6

26
Tree	int j = RandomNameGenerator.FIRST_CHAR n j - n ;
Code	int j = RandomNameGenerator.FIRST_CHAR n j - n ;
Distance : 6

27
Tree	int j = ( int ) n * / ;
Code	int j = ( int ) n * / ;
Distance : 6

28
Tree	long j = NUMBER_CONSTANT * n - j ;
Code	long j = NUMBER_CONSTANT * n - j ;
Distance : 4

29
Tree	int j = n & NUMBER_CONSTANT ;
Code	int j = n & NUMBER_CONSTANT ;
Distance : 5

30
Tree	int j = n + j - j ;
Code	int j = n + j - j ;
Distance : 6

31
Tree	int j = n + n - j ;
Code	int j = n + n - j ;
Distance : 5

32
Tree	int j = NUMBER_CONSTANT * n - n ;
Code	int j = NUMBER_CONSTANT * n - n ;
Distance : 3

33
Tree	boolean j = n & NUMBER_CONSTANT ;
Code	boolean j = n & NUMBER_CONSTANT ;
Distance : 6

34
Tree	int j = ( n < < NUMBER_CONSTANT ) + n - n ;
Code	int j = ( n < < NUMBER_CONSTANT ) + n - n ;
Distance : 8

35
Tree	int j = n < currentState.length - n ;
Code	int j = n < currentState.length - n ;
Distance : 6

36
Tree	int j = RandomNameGenerator.FIRST_CHAR n j - j ;
Code	int j = RandomNameGenerator.FIRST_CHAR n j - j ;
Distance : 6

37
Tree	long j = ( n < < NUMBER_CONSTANT ) + n - j ;
Code	long j = ( n < < NUMBER_CONSTANT ) + n - j ;
Distance : 9

38
Tree	double j = n + j - j ;
Code	double j = n + j - j ;
Distance : 7

39
Tree	int j = MathUtils.TWO_PI n j - n ;
Code	int j = MathUtils.TWO_PI n j - n ;
Distance : 6

40
Tree	int j = NUMBER_CONSTANT * n - j - n ;
Code	int j = NUMBER_CONSTANT * n - j - n ;
Distance : 4

41
Tree	double j = NUMBER_CONSTANT * n - j - j ;
Code	double j = NUMBER_CONSTANT * n - j - j ;
Distance : 5

42
Tree	double j = ( n < < NUMBER_CONSTANT ) + n - n ;
Code	double j = ( n < < NUMBER_CONSTANT ) + n - n ;
Distance : 9

43
Tree	double j = NUMBER_CONSTANT * n - n ;
Code	double j = NUMBER_CONSTANT * n - n ;
Distance : 4

44
Tree	int j = NUMBER_CONSTANT * n - n - j ;
Code	int j = NUMBER_CONSTANT * n - n - j ;
Distance : 4

45
Tree	int j = RandomNameGenerator.FIRST_CHAR n LocalizedFormats.ZERO_NORM - n ;
Code	int j = RandomNameGenerator.FIRST_CHAR n LocalizedFormats.ZERO_NORM - n ;
Distance : 6

46
Tree	double j = n * j - j ;
Code	double j = n * j - j ;
Distance : 6

47
Tree	byte j = n & NUMBER_CONSTANT ;
Code	byte j = n & NUMBER_CONSTANT ;
Distance : 6

48
Tree	long j = NUMBER_CONSTANT * n - j - j ;
Code	long j = NUMBER_CONSTANT * n - j - j ;
Distance : 5

49
Tree	int j = RandomNameGenerator.FIRST_CHAR n LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN - n ;
Code	int j = RandomNameGenerator.FIRST_CHAR n LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN - n ;
Distance : 6

========================================================================


========================================================================
Example Number: 56
Parent Code is: 
{ return getCumPct ( ( Comparable < > ) v ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return getPct ( ( Comparable < > ) v ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=getCumPct}) (214{val=(}) (11 (214{val=(}) (74 (43 (800{val=Comparable})) (230{val=<}) (76{val=?}) (231{val=>})) (215{val=)}) (800{val=v})) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=getPct}) (214{val=(}) (11 (214{val=(}) (74 (43 (800{val=Comparable})) (230{val=<}) (76{val=?}) (231{val=>})) (215{val=)}) (800{val=v})) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/75/parent/src_main_java_org_apache_commons_math_stat_Frequency.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	{ return getCumPct ( ( ( v ) v . getCumPct () ) . v ) ; }
Code	{ return getCumPct ( ( ( v ) v . getCumPct () ) . v ) ; }
Distance : 9

1
Tree	{ return Comparable ( super , false ) ; }
Code	{ return Comparable ( super , false ) ; }
Distance : 7

2
Tree	{ return getPct ( ( Comparable ) getPct ( v ) ) ; }
Code	{ return getPct ( ( Comparable ) getPct ( v ) ) ; }
Distance : 4

3
Tree	{ return getPct ( ( ( Comparable ) v . getPct () ) . v ) ; }
Code	{ return getPct ( ( ( Comparable ) v . getPct () ) . v ) ; }
Distance : 7

4
Tree	{ return getPct ( ( Comparable ) getCumPct ( v ) ) ; }
Code	{ return getPct ( ( Comparable ) getCumPct ( v ) ) ; }
Distance : 4

5
Tree	{ return getCumPct ( Comparable , v . getCumPct () , options.removeUnusedPrototypePropertiesInExterns ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , options.removeUnusedPrototypePropertiesInExterns ) ; }
Distance : 9

6
Tree	{ return getCumPct ( Comparable , v . getCumPct () , PropertyCollapseLevel.NONE ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , PropertyCollapseLevel.NONE ) ; }
Distance : 9

7
Tree	{ return getCumPct ( Comparable , v . getCumPct () , clazz ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , clazz ) ; }
Distance : 9

8
Tree	{ return getCumPct ( ( Comparable ) getCumPct ( v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getCumPct ( v ) ) ; }
Distance : 5

9
Tree	{ return getCumPct ( Comparable , v . getCumPct () , dest.n ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , dest.n ) ; }
Distance : 9

10
Tree	{ return getCumPct ( Comparable , v . getCumPct () , JUnitRule.Strictness.WARN ) ; }
Code	{ return getCumPct ( Comparable , v . getCumPct () , JUnitRule.Strictness.WARN ) ; }
Distance : 9

11
Tree	{ return Comparable . getCumPct ( Comparable ) . < & > getCumPct () ; }
Code	{ return Comparable . getCumPct ( Comparable ) . < & > getCumPct () ; }
Distance : 9

12
Tree	{ return getCumPct ( Comparable ) . < Comparable > getCumPct () ; }
Code	{ return getCumPct ( Comparable ) . < Comparable > getCumPct () ; }
Distance : 8

13
Tree	{ return getCumPct ( ( Comparable < Comparable > ) <= ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) <= ) ; }
Distance : 3

14
Tree	{ return Comparable . getCumPct ( Comparable ) . < extends > getCumPct () ; }
Code	{ return Comparable . getCumPct ( Comparable ) . < extends > getCumPct () ; }
Distance : 9

15
Tree	{ return getPct ( ( ( Comparable ) v ) . v ) ; }
Code	{ return getPct ( ( ( Comparable ) v ) . v ) ; }
Distance : 4

16
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getPct () ) . v ) ; }
Distance : 8

17
Tree	{ return getCumPct ( ( Comparable < Comparable > ) *= ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) *= ) ; }
Distance : 3

18
Tree	{ return getCumPct ( ( Comparable < Comparable > ) ^ ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) ^ ) ; }
Distance : 3

19
Tree	{ return Comparable . getCumPct ( Comparable ) . < ? > getCumPct () ; }
Code	{ return Comparable . getCumPct ( Comparable ) . < ? > getCumPct () ; }
Distance : 9

20
Tree	{ return getCumPct ( ( Comparable < Comparable > ) {} ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) {} ) ; }
Distance : 3

21
Tree	{ return Comparable . getCumPct ( Comparable ) . < / > getCumPct () ; }
Code	{ return Comparable . getCumPct ( Comparable ) . < / > getCumPct () ; }
Distance : 9

22
Tree	{ return getCumPct ( Comparable ) . < v > getCumPct () ; }
Code	{ return getCumPct ( Comparable ) . < v > getCumPct () ; }
Distance : 8

23
Tree	{ return getCumPct ( ( Comparable < Comparable > ) *= ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) *= ) ; }
Distance : 3

24
Tree	{ return getCumPct ( ( ( Comparable ) v . getCumPct () ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getCumPct () ) . v ) ; }
Distance : 8

25
Tree	{ return Comparable . getCumPct ( v ) . < & > getCumPct () ; }
Code	{ return Comparable . getCumPct ( v ) . < & > getCumPct () ; }
Distance : 10

26
Tree	{ return getCumPct ( ( Comparable < Comparable > ) ^ ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) ^ ) ; }
Distance : 3

27
Tree	{ return getCumPct ( ( Comparable < Comparable > ) {} ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) {} ) ; }
Distance : 3

28
Tree	{ return getPct ( ( ( v ) v ) . v ) ; }
Code	{ return getPct ( ( ( v ) v ) . v ) ; }
Distance : 5

29
Tree	{ return getCumPct ( ( ( Comparable ) v ) . Comparable ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v ) . Comparable ) ; }
Distance : 6

30
Tree	{ return getCumPct ( Comparable ) . < v > getPct () ; }
Code	{ return getCumPct ( Comparable ) . < v > getPct () ; }
Distance : 8

31
Tree	{ return Comparable ( false , false ) ; }
Code	{ return Comparable ( false , false ) ; }
Distance : 7

32
Tree	{ return getCumPct ( v ) . < v > getCumPct () ; }
Code	{ return getCumPct ( v ) . < v > getCumPct () ; }
Distance : 8

33
Tree	{ return getCumPct ( ( Comparable ) getPct ( v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getPct ( v ) ) ; }
Distance : 5

34
Tree	{ return getCumPct ( v ) . < v > getPct () ; }
Code	{ return getCumPct ( v ) . < v > getPct () ; }
Distance : 8

35
Tree	{ return getCumPct ( ( ( v ) v . getPct () ) . v ) ; }
Code	{ return getCumPct ( ( ( v ) v . getPct () ) . v ) ; }
Distance : 9

36
Tree	{ return Comparable ( ! , false ) ; }
Code	{ return Comparable ( ! , false ) ; }
Distance : 7

37
Tree	{ return getCumPct ( ( ( Comparable ) v ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v ) . v ) ; }
Distance : 5

38
Tree	{ return getCumPct ( ( Comparable < Comparable > ) / ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) / ) ; }
Distance : 3

39
Tree	{ return getCumPct ( ( ( v ) v ) . v ) ; }
Code	{ return getCumPct ( ( ( v ) v ) . v ) ; }
Distance : 6

40
Tree	{ return getCumPct ( ( ( Comparable ) v . getCumPct ( v ) ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getCumPct ( v ) ) . v ) ; }
Distance : 10

41
Tree	{ return getCumPct ( ( v ) getPct ( v ) ) ; }
Code	{ return getCumPct ( ( v ) getPct ( v ) ) ; }
Distance : 6

42
Tree	{ return getCumPct ( ( ( v ) v . getPct ( v ) ) . v ) ; }
Code	{ return getCumPct ( ( ( v ) v . getPct ( v ) ) . v ) ; }
Distance : 11

43
Tree	{ return v ( false , false ) ; }
Code	{ return v ( false , false ) ; }
Distance : 7

44
Tree	{ return getCumPct ( ( Comparable < Comparable > ) / ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) / ) ; }
Distance : 3

45
Tree	{ return getCumPct ( ( ( v ) v . getCumPct ( v ) ) . v ) ; }
Code	{ return getCumPct ( ( ( v ) v . getCumPct ( v ) ) . v ) ; }
Distance : 11

46
Tree	{ return getCumPct ( ( Comparable < Comparable > ) <= ) ; }
Code	{ return getCumPct ( ( Comparable < Comparable > ) <= ) ; }
Distance : 3

47
Tree	{ return getCumPct ( ( ( Comparable ) v . getPct ( v ) ) . v ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getPct ( v ) ) . v ) ; }
Distance : 10

48
Tree	{ return getPct ( ( ( Comparable ) v . getPct ( v ) ) . v ) ; }
Code	{ return getPct ( ( ( Comparable ) v . getPct ( v ) ) . v ) ; }
Distance : 9

49
Tree	{ return v ( ! , false ) ; }
Code	{ return v ( ! , false ) ; }
Distance : 7

========================================================================


========================================================================
Example Number: 57
Parent Code is: 
{ return solve ( min , max ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return solve ( f , min , max ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=solve}) (214{val=(}) (800{val=min}) (234{val=,}) (800{val=max}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=solve}) (214{val=(}) (800{val=f}) (234{val=,}) (800{val=min}) (234{val=,}) (800{val=max}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/70/parent/src_main_java_org_apache_commons_math_analysis_solvers_BisectionSolver.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	{ return f . solve () . solve ( f , max ) ; }
Code	{ return f . solve () . solve ( f , max ) ; }
Distance : 7

1
Tree	{ return solve ( max , max ) ; }
Code	{ return solve ( max , max ) ; }
Distance : 3

2
Tree	{ return solve ( f , max ) ; }
Code	{ return solve ( f , max ) ; }
Distance : 2

3
Tree	{ return solve ( f , max - NUMBER_CONSTANT ) ; }
Code	{ return solve ( f , max - NUMBER_CONSTANT ) ; }
Distance : 3

4
Tree	{ return solve ( max , max , max ) ; }
Code	{ return solve ( max , max , max ) ; }
Distance : 2

5
Tree	{ return solve ( min , min - NUMBER_CONSTANT ) ; }
Code	{ return solve ( min , min - NUMBER_CONSTANT ) ; }
Distance : 3

6
Tree	{ return solve ( f , max , max ) ; }
Code	{ return solve ( f , max , max ) ; }
Distance : 1

7
Tree	{ return min . solve () . solve ( min , max ) ; }
Code	{ return min . solve () . solve ( min , max ) ; }
Distance : 6

8
Tree	{ return solve ( min . solve ( max ) , max ) ; }
Code	{ return solve ( min . solve ( max ) , max ) ; }
Distance : 6

9
Tree	{ return solve ( min . solve ( max ) ) ; }
Code	{ return solve ( min . solve ( max ) ) ; }
Distance : 5

10
Tree	{ return solve ( min , max ) ; }
Code	{ return solve ( min , max ) ; }
Distance : 2

11
Tree	{ return f . solve ( min , max ) ; }
Code	{ return f . solve ( min , max ) ; }
Distance : 4

12
Tree	{ return f . solve () . solve ( min , max ) ; }
Code	{ return f . solve () . solve ( min , max ) ; }
Distance : 6

13
Tree	{ return solve ( min , null ) ; }
Code	{ return solve ( min , null ) ; }
Distance : 3

14
Tree	{ return solve ( min , max - NUMBER_CONSTANT ) ; }
Code	{ return solve ( min , max - NUMBER_CONSTANT ) ; }
Distance : 4

15
Tree	{ return f . solve ( min , min ) ; }
Code	{ return f . solve ( min , min ) ; }
Distance : 5

16
Tree	{ return solve ( min . solve () , min ) ; }
Code	{ return solve ( min . solve () , min ) ; }
Distance : 5

17
Tree	{ return solve ( min , max , max ) ; }
Code	{ return solve ( min , max , max ) ; }
Distance : 2

18
Tree	{ return f . solve ( min ) ; }
Code	{ return f . solve ( min ) ; }
Distance : 6

19
Tree	{ return solve ( max , min ) ; }
Code	{ return solve ( max , min ) ; }
Distance : 3

20
Tree	{ return solve ( min . solve () , max ) ; }
Code	{ return solve ( min . solve () , max ) ; }
Distance : 4

21
Tree	{ return min . solve ( min , max ) ; }
Code	{ return min . solve ( min , max ) ; }
Distance : 4

22
Tree	{ return solve ( min , super(); ) ; }
Code	{ return solve ( min , super(); ) ; }
Distance : 3

23
Tree	{ return f . solve ( f , max ) ; }
Code	{ return f . solve ( f , max ) ; }
Distance : 4

24
Tree	{ return solve ( max . solve () , max ) ; }
Code	{ return solve ( max . solve () , max ) ; }
Distance : 4

25
Tree	{ return solve ( min . solve ( min ) , max ) ; }
Code	{ return solve ( min . solve ( min ) , max ) ; }
Distance : 5

26
Tree	{ return min . solve ( min ) ; }
Code	{ return min . solve ( min ) ; }
Distance : 6

27
Tree	{ return f . solve ( max , max ) ; }
Code	{ return f . solve ( max , max ) ; }
Distance : 5

28
Tree	{ return f . solve () . solve ( max , max ) ; }
Code	{ return f . solve () . solve ( max , max ) ; }
Distance : 7

29
Tree	{ return f . solve ( f ) ; }
Code	{ return f . solve ( f ) ; }
Distance : 6

30
Tree	{ return solve ( min . solve ( min ) , min ) ; }
Code	{ return solve ( min . solve ( min ) , min ) ; }
Distance : 6

31
Tree	{ return solve ( min , min ) ; }
Code	{ return solve ( min , min ) ; }
Distance : 3

32
Tree	{ return solve ( max , null ) ; }
Code	{ return solve ( max , null ) ; }
Distance : 4

33
Tree	{ return solve ( f , null ) ; }
Code	{ return solve ( f , null ) ; }
Distance : 3

34
Tree	{ return solve ( min . solve ( min ) ) ; }
Code	{ return solve ( min . solve ( min ) ) ; }
Distance : 6

35
Tree	{ return f . solve () . solve ( min , min ) ; }
Code	{ return f . solve () . solve ( min , min ) ; }
Distance : 7

36
Tree	{ return solve ( min , max , min ) ; }
Code	{ return solve ( min , max , min ) ; }
Distance : 3

37
Tree	{ return solve ( min , min , max ) ; }
Code	{ return solve ( min , min , max ) ; }
Distance : 1

38
Tree	{ return solve ( f . solve () , max ) ; }
Code	{ return solve ( f . solve () , max ) ; }
Distance : 3

39
Tree	{ return solve ( min . solve ( f ) , max ) ; }
Code	{ return solve ( min . solve ( f ) , max ) ; }
Distance : 6

40
Tree	{ return solve ( max , min - NUMBER_CONSTANT ) ; }
Code	{ return solve ( max , min - NUMBER_CONSTANT ) ; }
Distance : 3

41
Tree	{ return f . solve ( max ) ; }
Code	{ return f . solve ( max ) ; }
Distance : 5

42
Tree	{ return solve ( min , return; ) ; }
Code	{ return solve ( min , return; ) ; }
Distance : 3

43
Tree	{ return solve ( max . solve ( min ) , max ) ; }
Code	{ return solve ( max . solve ( min ) , max ) ; }
Distance : 5

44
Tree	{ return solve ( max . solve ( min ) ) ; }
Code	{ return solve ( max . solve ( min ) ) ; }
Distance : 6

45
Tree	{ return solve ( f . solve ( min ) ) ; }
Code	{ return solve ( f . solve ( min ) ) ; }
Distance : 5

46
Tree	{ return solve ( max , max - NUMBER_CONSTANT ) ; }
Code	{ return solve ( max , max - NUMBER_CONSTANT ) ; }
Distance : 4

47
Tree	{ return max . solve ( min ) ; }
Code	{ return max . solve ( min ) ; }
Distance : 6

48
Tree	{ return solve ( min . solve ( f ) ) ; }
Code	{ return solve ( min . solve ( f ) ) ; }
Distance : 6

49
Tree	{ return solve ( min . solve () , f ) ; }
Code	{ return solve ( min . solve () , f ) ; }
Distance : 5

========================================================================


========================================================================
Example Number: 58
Parent Code is: 
out [ i ] [ j ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - tDistribution . cumulativeProbability ( t ) ) ;
-------------------------------------------------------------------------------
Child code is: 
out [ i ] [ j ] = NUMBER_CONSTANT * tDistribution . cumulativeProbability ( - t ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (7 (2 (2 (801{val=out}) (221{val=[}) (800{val=i}) (222{val=]})) (221{val=[}) (800{val=j}) (222{val=]})) (204{val==}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (36 (214{val=(}) (27 (34{val=NUMBER_CONSTANT}) (201{val=-}) (32 (800{val=tDistribution}) (235{val=.}) (802{val=cumulativeProbability}) (214{val=(}) (800{val=t}) (215{val=)}))) (215{val=)})))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (7 (2 (2 (801{val=out}) (221{val=[}) (800{val=i}) (222{val=]})) (221{val=[}) (800{val=j}) (222{val=]})) (204{val==}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (32 (800{val=tDistribution}) (235{val=.}) (802{val=cumulativeProbability}) (214{val=(}) (38 (201{val=-}) (800{val=t})) (215{val=)})))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/69/parent/src_main_java_org_apache_commons_math_stat_correlation_PearsonsCorrelation.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	j += i && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	j += i && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

1
Tree	tDistribution += i && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	tDistribution += i && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

2
Tree	i += i && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	i += i && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

3
Tree	t += i && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	t += i && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

4
Tree	j += i / ( t != t . cumulativeProbability ( t ) ) ;
Code	j += i / ( t != t . cumulativeProbability ( t ) ) ;
Distance : 12

5
Tree	i += i / ( t != t . cumulativeProbability ( t ) ) ;
Code	i += i / ( t != t . cumulativeProbability ( t ) ) ;
Distance : 12

6
Tree	tDistribution += i / ( t != t . cumulativeProbability ( t ) ) ;
Code	tDistribution += i / ( t != t . cumulativeProbability ( t ) ) ;
Distance : 12

7
Tree	t += i / ( t != t . cumulativeProbability ( t ) ) ;
Code	t += i / ( t != t . cumulativeProbability ( t ) ) ;
Distance : 12

8
Tree	j += i && ( t != j . cumulativeProbability ( t ) ) ;
Code	j += i && ( t != j . cumulativeProbability ( t ) ) ;
Distance : 12

9
Tree	t += i && ( t != j . cumulativeProbability ( t ) ) ;
Code	t += i && ( t != j . cumulativeProbability ( t ) ) ;
Distance : 12

10
Tree	j = ( ( FastMath.PI == tDistribution ) * ( f.length == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	j = ( ( FastMath.PI == tDistribution ) * ( f.length == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

11
Tree	i = ( ( FastMath.PI == tDistribution ) * ( f.length == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	i = ( ( FastMath.PI == tDistribution ) * ( f.length == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

12
Tree	j = ( ( FastMath.PI == tDistribution ) * ( MathUtils.TWO_PI == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	j = ( ( FastMath.PI == tDistribution ) * ( MathUtils.TWO_PI == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

13
Tree	i = ( ( FastMath.PI == tDistribution ) * ( MathUtils.TWO_PI == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	i = ( ( FastMath.PI == tDistribution ) * ( MathUtils.TWO_PI == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

14
Tree	tDistribution = ( ( FastMath.PI == tDistribution ) * ( f.length == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Code	tDistribution = ( ( FastMath.PI == tDistribution ) * ( f.length == tDistribution ) * tDistribution . cumulativeProbability ( t ) * tDistribution ) ;
Distance : 18

15
Tree	j = ( ( i != i . cumulativeProbability ( t ) ) * % * / * tDistribution ) ;
Code	j = ( ( i != i . cumulativeProbability ( t ) ) * % * / * tDistribution ) ;
Distance : 18

16
Tree	i = ( ( i != i . cumulativeProbability ( t ) ) * % * / * tDistribution ) ;
Code	i = ( ( i != i . cumulativeProbability ( t ) ) * % * / * tDistribution ) ;
Distance : 18

17
Tree	tDistribution = ( ( FastMath.PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	tDistribution = ( ( FastMath.PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 18

18
Tree	j = ( ( MathUtils.TWO_PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	j = ( ( MathUtils.TWO_PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 18

19
Tree	j = ( ( LocalizedFormats.NON_SQUARE_MATRIX == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	j = ( ( LocalizedFormats.NON_SQUARE_MATRIX == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 18

20
Tree	j = ( ( i . cumulativeProbability ( t ) - tDistribution ) * / * / * tDistribution ) ;
Code	j = ( ( i . cumulativeProbability ( t ) - tDistribution ) * / * / * tDistribution ) ;
Distance : 18

21
Tree	i = ( ( i . cumulativeProbability ( t ) - tDistribution ) * / * / * tDistribution ) ;
Code	i = ( ( i . cumulativeProbability ( t ) - tDistribution ) * / * / * tDistribution ) ;
Distance : 18

22
Tree	tDistribution = ( ( i . cumulativeProbability ( t ) - tDistribution ) * / * / * tDistribution ) ;
Code	tDistribution = ( ( i . cumulativeProbability ( t ) - tDistribution ) * / * / * tDistribution ) ;
Distance : 18

23
Tree	tDistribution += i && ( t != j . cumulativeProbability ( t ) ) ;
Code	tDistribution += i && ( t != j . cumulativeProbability ( t ) ) ;
Distance : 12

24
Tree	i += i && ( t != t . cumulativeProbability ( t ) ) ;
Code	i += i && ( t != t . cumulativeProbability ( t ) ) ;
Distance : 12

25
Tree	j += i && ( t != t . cumulativeProbability ( t ) ) ;
Code	j += i && ( t != t . cumulativeProbability ( t ) ) ;
Distance : 12

26
Tree	t = ( ( i . cumulativeProbability ( t ) - tDistribution ) * / * / * tDistribution ) ;
Code	t = ( ( i . cumulativeProbability ( t ) - tDistribution ) * / * / * tDistribution ) ;
Distance : 18

27
Tree	j = ( ( j . cumulativeProbability ( t ) - tDistribution ) * / * / * tDistribution ) ;
Code	j = ( ( j . cumulativeProbability ( t ) - tDistribution ) * / * / * tDistribution ) ;
Distance : 18

28
Tree	j += j && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	j += j && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 16

29
Tree	j += j / ( t != t . cumulativeProbability ( t ) ) ;
Code	j += j / ( t != t . cumulativeProbability ( t ) ) ;
Distance : 12

30
Tree	j = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Code	j = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Distance : 19

31
Tree	j += i / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	j += i / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

32
Tree	j = ( ( i != i . cumulativeProbability ( t ) ) * / * / * tDistribution ) ;
Code	j = ( ( i != i . cumulativeProbability ( t ) ) * / * / * tDistribution ) ;
Distance : 18

33
Tree	i = ( ( i != i . cumulativeProbability ( t ) ) * / * / * tDistribution ) ;
Code	i = ( ( i != i . cumulativeProbability ( t ) ) * / * / * tDistribution ) ;
Distance : 18

34
Tree	j = ( ( FastMath.PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	j = ( ( FastMath.PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 18

35
Tree	i = ( ( FastMath.PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Code	i = ( ( FastMath.PI == tDistribution ) * ( t - NUMBER_CONSTANT ) * / * tDistribution ) ;
Distance : 18

36
Tree	tDistribution = ( ( i != i . cumulativeProbability ( t ) ) * / * / * tDistribution ) ;
Code	tDistribution = ( ( i != i . cumulativeProbability ( t ) ) * / * / * tDistribution ) ;
Distance : 18

37
Tree	i = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Code	i = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Distance : 19

38
Tree	tDistribution = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Code	tDistribution = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Distance : 19

39
Tree	t = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Code	t = ( ( i . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Distance : 19

40
Tree	j = ( ( j . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Code	j = ( ( j . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) * / * / * tDistribution ) ;
Distance : 20

41
Tree	i += i / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	i += i / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

42
Tree	tDistribution += i / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	tDistribution += i / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

43
Tree	t += i / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	t += i / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 15

44
Tree	j += j / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	j += j / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 16

45
Tree	j = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

46
Tree	i = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	i = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

47
Tree	tDistribution = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	tDistribution = ( ( FastMath.PI == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

48
Tree	j = ( ( MathUtils.TWO_PI == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( MathUtils.TWO_PI == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

49
Tree	j = ( ( LocalizedFormats.NON_SQUARE_MATRIX == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Code	j = ( ( LocalizedFormats.NON_SQUARE_MATRIX == tDistribution ) * ( t + tDistribution ) * / * tDistribution ) ;
Distance : 17

========================================================================


========================================================================
Example Number: 59
Parent Code is: 
if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.MEAN , p ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=p}) (252{val=<=}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (32 (800{val=MathRuntimeException}) (235{val=.}) (802{val=createIllegalArgumentException}) (214{val=(}) (40{val=LocalizedFormats.NOT_POSITIVE_POISSON_MEAN}) (234{val=,}) (800{val=p}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=p}) (252{val=<=}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=NotStrictlyPositiveException})) (214{val=(}) (40{val=LocalizedFormats.MEAN}) (234{val=,}) (800{val=p}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/61/parent/src_main_java_org_apache_commons_math_distribution_PoissonDistributionImpl.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , NUMBER_CONSTANT , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , NUMBER_CONSTANT , true ) ; }
Distance : 4

1
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; }
Distance : 1

2
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , p ) ; }
Distance : 1

3
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 5

4
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; }
Distance : 3

5
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p , p ) ; }
Distance : 3

6
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , MathRuntimeException , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , MathRuntimeException , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 6

7
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 5

8
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , STRING_CONSTANT ) ; }
Distance : 2

9
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; }
Distance : 3

10
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; }
Distance : 2

11
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Distance : 4

12
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } value
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } value
Distance : 4

13
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= ) ; }
Distance : 4

14
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Distance : 3

15
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException ) ; }
Distance : 3

16
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; }
Distance : 3

17
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , true ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , true ) ; }
Distance : 4

18
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , NUMBER_CONSTANT , false ) ; }
Distance : 4

19
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException ) ; }
Distance : 4

20
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , MathRuntimeException ) ; }
Distance : 2

21
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , false ) ; }
Distance : 4

22
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } i
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } i
Distance : 4

23
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= ) ; }
Distance : 3

24
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 6

25
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; }
Distance : 2

26
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } +
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; } +
Distance : 4

27
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 2

28
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p ) ; }
Distance : 3

29
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , STRING_CONSTANT ) ; }
Distance : 2

30
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , MathRuntimeException ) ; }
Distance : 3

31
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException ) ; }
Distance : 2

32
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , STRING_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , STRING_CONSTANT ) ; }
Distance : 3

33
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , STRING_CONSTANT ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , STRING_CONSTANT ) ; }
Distance : 3

34
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Distance : 3

35
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; } !=
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; } !=
Distance : 3

36
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; }
Distance : 2

37
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException , p ) ; }
Distance : 3

38
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; }
Distance : 4

39
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } !=
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; } !=
Distance : 3

40
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , STRING_CONSTANT ) ; }
Distance : 2

41
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( <= , p ) ; }
Distance : 1

42
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , MathRuntimeException ) ; }
Distance : 2

43
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , MathRuntimeException ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( MathRuntimeException , MathRuntimeException ) ; }
Distance : 2

44
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
Distance : 1

45
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; } !=
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; } !=
Distance : 3

46
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , false ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , false ) ; }
Distance : 5

47
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , MathRuntimeException , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 6

48
Tree	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p ) ; }
Code	if ( MathRuntimeException <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p , p ) ; }
Distance : 4

49
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; } !=
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN ) ; } !=
Distance : 4

========================================================================


========================================================================
Example Number: 60
Parent Code is: 
{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (16 (36 (214{val=(}) (27 (800{val=a}) (252{val=<=}) (800{val=b})) (215{val=)})) (233{val=?}) (800{val=b}) (226{val=:}) (36 (214{val=(}) (16 (32 (800{val=Float}) (235{val=.}) (802{val=isNaN}) (214{val=(}) (27 (800{val=a}) (200{val=+}) (800{val=b})) (215{val=)})) (233{val=?}) (40{val=Float.NaN}) (226{val=:}) (800{val=b})) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (16 (36 (214{val=(}) (27 (800{val=a}) (252{val=<=}) (800{val=b})) (215{val=)})) (233{val=?}) (800{val=b}) (226{val=:}) (36 (214{val=(}) (16 (32 (800{val=Float}) (235{val=.}) (802{val=isNaN}) (214{val=(}) (27 (800{val=a}) (200{val=+}) (800{val=b})) (215{val=)})) (233{val=?}) (40{val=Float.NaN}) (226{val=:}) (800{val=a})) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/59/parent/src_main_java_org_apache_commons_math_util_FastMath.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 15
Correct
========================================================================
True

0
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( double ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

1
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) a , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) a , b ) , b ) ; }
Distance : 17

2
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( short ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

3
Tree	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isNaN ( ( int ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isNaN ( ( int ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

4
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( int ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

5
Tree	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( char ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : isNaN ( ( char ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

6
Tree	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isNaN ( ( int ) isNaN ( ( a ) a , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isNaN ( ( int ) isNaN ( ( a ) a , b ) , b ) ; }
Distance : 17

7
Tree	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isNaN ( ( short ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isNaN ( ( short ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

8
Tree	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isNaN ( ( double ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isNaN ( ( double ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

9
Tree	{ return ( a <= a ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= a ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 2

10
Tree	{ return ( a <= b ) ? a : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? a : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 2

11
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
Distance : 0

12
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( a + a ) ? Float.NaN : b ) ; }
Distance : 2

13
Tree	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isNaN ( ( char ) isNaN ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isNaN ( ( char ) isNaN ( ( a ) b , b ) , b ) ; }
Distance : 16

14
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
Distance : 1

========================================================================


========================================================================
Example Number: 61
Parent Code is: 
return fit ( new Gaussian.Parametric () , guess ) ;
-------------------------------------------------------------------------------
Child code is: 
return fit ( guess ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=fit}) (214{val=(}) (14 (304{val=new}) (43 (40{val=Gaussian.Parametric})) (216{val=()})) (234{val=,}) (800{val=guess}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=fit}) (214{val=(}) (800{val=guess}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/58/parent/src_main_java_org_apache_commons_math_optimization_fitting_GaussianFitter.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	return fit ( new Gaussian.Parametric < guess > ( guess ) , guess ) ; e
Code	return fit ( new Gaussian.Parametric < guess > ( guess ) , guess ) ; e
Distance : 10

1
Tree	return fit . fit () . fit ( Gaussian.Parametric , false , guess ) ;
Code	return fit . fit () . fit ( Gaussian.Parametric , false , guess ) ;
Distance : 9

2
Tree	return fit . fit ( this . guess ) ;
Code	return fit . fit ( this . guess ) ;
Distance : 4

3
Tree	return fit ( new MinimizeExitPoints < guess > ( guess ) , guess ) ;
Code	return fit ( new MinimizeExitPoints < guess > ( guess ) , guess ) ;
Distance : 9

4
Tree	return fit ( new TimeZoneOffset < guess > ( guess ) , guess ) ;
Code	return fit ( new TimeZoneOffset < guess > ( guess ) , guess ) ;
Distance : 9

5
Tree	return fit ( new InputStreamReader < guess > ( guess ) , guess ) ;
Code	return fit ( new InputStreamReader < guess > ( guess ) , guess ) ;
Distance : 9

6
Tree	return fit ( new MethodAttributeAppender.ForInstrumentedMethod < guess > ( guess ) , guess ) ;
Code	return fit ( new MethodAttributeAppender.ForInstrumentedMethod < guess > ( guess ) , guess ) ;
Distance : 9

7
Tree	return fit . fit ( Gaussian.Parametric . fit () . guess ) ; compiler
Code	return fit . fit ( Gaussian.Parametric . fit () . guess ) ; compiler
Distance : 8

8
Tree	return this . fit . fit ( new . fit () ) ; T
Code	return this . fit . fit ( new . fit () ) ; T
Distance : 9

9
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; void
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; void
Distance : 12

10
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Distance : 15

11
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ; . fit () ) ;
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ; . fit () ) ;
Distance : 11

12
Tree	return fit . fit () . fit ( new , true , guess ) ;
Code	return fit . fit () . fit ( new , true , guess ) ;
Distance : 9

13
Tree	return fit . fit ( Gaussian.Parametric , guess . fit () , fit ( NUMBER_CONSTANT ) ) ;
Code	return fit . fit ( Gaussian.Parametric , guess . fit () , fit ( NUMBER_CONSTANT ) ) ;
Distance : 12

14
Tree	return fit . fit ( Gaussian.Parametric . fit () . guess ) ;
Code	return fit . fit ( Gaussian.Parametric . fit () . guess ) ;
Distance : 7

15
Tree	return fit . fit ( Gaussian.Parametric . fit () . guess ) ; T
Code	return fit . fit ( Gaussian.Parametric . fit () . guess ) ; T
Distance : 8

16
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; void
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , ) . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; void
Distance : 16

17
Tree	return this . fit . fit ( new . fit () ) ;
Code	return this . fit . fit ( new . fit () ) ;
Distance : 8

18
Tree	return this . fit . fit ( new . fit () ) ; void
Code	return this . fit . fit ( new . fit () ) ; void
Distance : 9

19
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; T
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; T
Distance : 16

20
Tree	return fit . fit ( Gaussian.Parametric , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; e
Code	return fit . fit ( Gaussian.Parametric , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; e
Distance : 13

21
Tree	return fit . fit ( Gaussian.Parametric , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; void
Code	return fit . fit ( Gaussian.Parametric , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; void
Distance : 13

22
Tree	return fit . fit ( Gaussian.Parametric , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; compiler
Code	return fit . fit ( Gaussian.Parametric , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; compiler
Distance : 13

23
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; compiler
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; compiler
Distance : 16

24
Tree	return fit . fit () . fit ( Gaussian.Parametric , false , guess ) ; +
Code	return fit . fit () . fit ( Gaussian.Parametric , false , guess ) ; +
Distance : 10

25
Tree	return fit . fit ( this . guess ) ; e
Code	return fit . fit ( this . guess ) ; e
Distance : 5

26
Tree	return fit . fit () . fit ( Gaussian.Parametric , false , guess ) ; value
Code	return fit . fit () . fit ( Gaussian.Parametric , false , guess ) ; value
Distance : 10

27
Tree	return this . fit . fit ( new . fit () ) ; compiler
Code	return this . fit . fit ( new . fit () ) ; compiler
Distance : 9

28
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; e
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ; e
Distance : 16

29
Tree	return fit . fit ( this . guess ) ; void
Code	return fit . fit ( this . guess ) ; void
Distance : 5

30
Tree	return fit . fit ( this . guess ) ; compiler
Code	return fit . fit ( this . guess ) ; compiler
Distance : 5

31
Tree	return fit ( new Gaussian.Parametric < guess > ( guess ) , guess ) ;
Code	return fit ( new Gaussian.Parametric < guess > ( guess ) , guess ) ;
Distance : 9

32
Tree	return this . fit . fit ( Gaussian.Parametric . fit () ) ; e
Code	return this . fit . fit ( Gaussian.Parametric . fit () ) ; e
Distance : 9

33
Tree	return fit . fit ( new . fit () . guess ) ; void
Code	return fit . fit ( new . fit () . guess ) ; void
Distance : 8

34
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; e
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; e
Distance : 12

35
Tree	return fit . fit ( Gaussian.Parametric , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; T
Code	return fit . fit ( Gaussian.Parametric , guess . fit () , fit ( NUMBER_CONSTANT ) ) ; T
Distance : 13

36
Tree	return fit . fit ( this . guess ) ; T
Code	return fit . fit ( this . guess ) ; T
Distance : 5

37
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; compiler
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; compiler
Distance : 12

38
Tree	return fit . fit () . fit ( Gaussian.Parametric , false , guess ) ; i
Code	return fit . fit () . fit ( Gaussian.Parametric , false , guess ) ; i
Distance : 10

39
Tree	return fit . fit ( Gaussian.Parametric . fit () . guess ) ; e
Code	return fit . fit ( Gaussian.Parametric . fit () . guess ) ; e
Distance : 8

40
Tree	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; T
Code	return fit . fit ( Gaussian.Parametric , STRING_CONSTANT , guess , guess . fit () ) ; T
Distance : 12

41
Tree	return fit ( new Gaussian.Parametric < guess > ( guess ) , guess ) ; T
Code	return fit ( new Gaussian.Parametric < guess > ( guess ) , guess ) ; T
Distance : 10

42
Tree	return fit ( new Gaussian.Parametric < guess > ( guess ) , guess ) ; compiler
Code	return fit ( new Gaussian.Parametric < guess > ( guess ) , guess ) ; compiler
Distance : 10

43
Tree	return fit ( new Gaussian.Parametric < guess > ( guess ) , guess ) ; void
Code	return fit ( new Gaussian.Parametric < guess > ( guess ) , guess ) ; void
Distance : 10

44
Tree	return fit ( new SuppressDocWarningsGuard < guess > ( new ) , guess ) ;
Code	return fit ( new SuppressDocWarningsGuard < guess > ( new ) , guess ) ;
Distance : 9

45
Tree	return fit . fit ( NUMBER_CONSTANT , cutOff [ NUMBER_CONSTANT ] ) ;
Code	return fit . fit ( NUMBER_CONSTANT , cutOff [ NUMBER_CONSTANT ] ) ;
Distance : 8

46
Tree	return fit . fit ( NUMBER_CONSTANT , showSeparators [ NUMBER_CONSTANT ] ) ;
Code	return fit . fit ( NUMBER_CONSTANT , showSeparators [ NUMBER_CONSTANT ] ) ;
Distance : 8

47
Tree	return fit . fit ( NUMBER_CONSTANT , CONFLICTING_EXTENDED_TYPE [ NUMBER_CONSTANT ] ) ;
Code	return fit . fit ( NUMBER_CONSTANT , CONFLICTING_EXTENDED_TYPE [ NUMBER_CONSTANT ] ) ;
Distance : 8

48
Tree	return fit . fit ( NUMBER_CONSTANT , ImpreciseCutoverField [ NUMBER_CONSTANT ] ) ;
Code	return fit . fit ( NUMBER_CONSTANT , ImpreciseCutoverField [ NUMBER_CONSTANT ] ) ;
Distance : 8

49
Tree	return fit . fit ( NUMBER_CONSTANT , changes [ NUMBER_CONSTANT ] ) ;
Code	return fit . fit ( NUMBER_CONSTANT , changes [ NUMBER_CONSTANT ] ) ;
Distance : 8

========================================================================


========================================================================
Example Number: 62
Parent Code is: 
int sum = NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Child code is: 
double sum = NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=sum}) (204{val==}) (34{val=NUMBER_CONSTANT})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=double}) (59 (800{val=sum}) (204{val==}) (34{val=NUMBER_CONSTANT})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/57/parent/src_main_java_org_apache_commons_math_stat_clustering_KMeansPlusPlusClusterer.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 50
Correct
========================================================================
True

0
Tree	int sum = getDimension () ;
Code	int sum = getDimension () ;
Distance : 3

1
Tree	int sum = sum ;
Code	int sum = sum ;
Distance : 2

2
Tree	int sum ;
Code	int sum ;
Distance : 3

3
Tree	int sum = NUMBER_CONSTANT ;
Code	int sum = NUMBER_CONSTANT ;
Distance : 1

4
Tree	int sum = getTickLength () ;
Code	int sum = getTickLength () ;
Distance : 3

5
Tree	int sum = getAbstractScope () ;
Code	int sum = getAbstractScope () ;
Distance : 3

6
Tree	double sum ;
Code	double sum ;
Distance : 2

7
Tree	final int sum ;
Code	final int sum ;
Distance : 4

8
Tree	int sum = this . sum ;
Code	int sum = this . sum ;
Distance : 4

9
Tree	byte sum = NUMBER_CONSTANT ;
Code	byte sum = NUMBER_CONSTANT ;
Distance : 1

10
Tree	private int sum ;
Code	private int sum ;
Distance : 4

11
Tree	int sum = v.length ;
Code	int sum = v.length ;
Distance : 2

12
Tree	double sum = null ;
Code	double sum = null ;
Distance : 1

13
Tree	byte sum ;
Code	byte sum ;
Distance : 3

14
Tree	double sum = sum + NUMBER_CONSTANT ;
Code	double sum = sum + NUMBER_CONSTANT ;
Distance : 2

15
Tree	int sum = getTickLength () . sum ;
Code	int sum = getTickLength () . sum ;
Distance : 5

16
Tree	int sum = AllowedSolution.ANY_SIDE ;
Code	int sum = AllowedSolution.ANY_SIDE ;
Distance : 2

17
Tree	long sum ;
Code	long sum ;
Distance : 3

18
Tree	int sum = sum + NUMBER_CONSTANT ;
Code	int sum = sum + NUMBER_CONSTANT ;
Distance : 3

19
Tree	long sum = NUMBER_CONSTANT ;
Code	long sum = NUMBER_CONSTANT ;
Distance : 1

20
Tree	double sum = sum ;
Code	double sum = sum ;
Distance : 1

21
Tree	abstract int sum ;
Code	abstract int sum ;
Distance : 4

22
Tree	int sum = getDimension () . sum ;
Code	int sum = getDimension () . sum ;
Distance : 5

23
Tree	boolean sum ;
Code	boolean sum ;
Distance : 3

24
Tree	boolean sum = sum ;
Code	boolean sum = sum ;
Distance : 2

25
Tree	boolean sum = NUMBER_CONSTANT ;
Code	boolean sum = NUMBER_CONSTANT ;
Distance : 1

26
Tree	byte sum = this . sum ;
Code	byte sum = this . sum ;
Distance : 4

27
Tree	final double sum ;
Code	final double sum ;
Distance : 3

28
Tree	int sum = null ;
Code	int sum = null ;
Distance : 2

29
Tree	long sum = sum + NUMBER_CONSTANT ;
Code	long sum = sum + NUMBER_CONSTANT ;
Distance : 3

30
Tree	byte sum = null ;
Code	byte sum = null ;
Distance : 2

31
Tree	boolean sum = sum + NUMBER_CONSTANT ;
Code	boolean sum = sum + NUMBER_CONSTANT ;
Distance : 3

32
Tree	byte sum = sum + NUMBER_CONSTANT ;
Code	byte sum = sum + NUMBER_CONSTANT ;
Distance : 3

33
Tree	int sum = val.length ;
Code	int sum = val.length ;
Distance : 2

34
Tree	int sum = checkInitialize () ;
Code	int sum = checkInitialize () ;
Distance : 3

35
Tree	int sum = IncrementalCheckMode.GENERATE_IJS ;
Code	int sum = IncrementalCheckMode.GENERATE_IJS ;
Distance : 2

36
Tree	long sum = this . sum ;
Code	long sum = this . sum ;
Distance : 4

37
Tree	int sum = fht () ;
Code	int sum = fht () ;
Distance : 3

38
Tree	boolean sum = this . sum ;
Code	boolean sum = this . sum ;
Distance : 4

39
Tree	int sum = Double.NaN ;
Code	int sum = Double.NaN ;
Distance : 2

40
Tree	public int sum ;
Code	public int sum ;
Distance : 4

41
Tree	int sum = checkInitialize () . sum ;
Code	int sum = checkInitialize () . sum ;
Distance : 5

42
Tree	long sum = null ;
Code	long sum = null ;
Distance : 2

43
Tree	int sum = getAbstractScope () . sum ;
Code	int sum = getAbstractScope () . sum ;
Distance : 5

44
Tree	boolean sum = null ;
Code	boolean sum = null ;
Distance : 2

45
Tree	double sum = NUMBER_CONSTANT ;
Code	double sum = NUMBER_CONSTANT ;
Distance : 0

46
Tree	double sum = this . sum ;
Code	double sum = this . sum ;
Distance : 3

47
Tree	long sum = sum ;
Code	long sum = sum ;
Distance : 2

48
Tree	byte sum = sum ;
Code	byte sum = sum ;
Distance : 2

49
Tree	int sum = fht () . sum ;
Code	int sum = fht () . sum ;
Distance : 5

========================================================================


========================================================================
Example Number: 63
Parent Code is: 
Iterator iter = res.entries . iterator () ;
-------------------------------------------------------------------------------
Child code is: 
Iterator iter = entries . iterator () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (40{val=res.entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (800{val=entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/49/parent/src_main_java_org_apache_commons_math_linear_OpenMapRealVector.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	Iterator entries = iterator ( res.entries ) ;
Code	Iterator entries = iterator ( res.entries ) ;
Distance : 5

1
Tree	Iterator iter = res.entries . iterator () ;
Code	Iterator iter = res.entries . iterator () ;
Distance : 1

2
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 3

3
Tree	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

4
Tree	Iterator entries = this . entries . iterator () ;
Code	Iterator entries = this . entries . iterator () ;
Distance : 3

5
Tree	Iterator entries = this . iter . iterator () ;
Code	Iterator entries = this . iter . iterator () ;
Distance : 4

6
Tree	Iterator entries = iterator ( iter . class ) ;
Code	Iterator entries = iterator ( iter . class ) ;
Distance : 6

7
Tree	Iterator entries = iterator ( res.entries ) . iterator () ;
Code	Iterator entries = iterator ( res.entries ) . iterator () ;
Distance : 5

8
Tree	Iterator entries = iterator ( entries . class ) ;
Code	Iterator entries = iterator ( entries . class ) ;
Distance : 5

9
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; value
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; value
Distance : 5

10
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; i
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; i
Distance : 5

11
Tree	Iterator iter = res.entries . iterator () ; i
Code	Iterator iter = res.entries . iterator () ; i
Distance : 2

12
Tree	Iterator iter = res.entries . iterator () ; value
Code	Iterator iter = res.entries . iterator () ; value
Distance : 2

13
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

14
Tree	Iterator iter = res.entries . iterator () ; +
Code	Iterator iter = res.entries . iterator () ; +
Distance : 2

15
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; !=
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; !=
Distance : 9

16
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; +
Code	Iterator iter = iterator ( res.entries ) . iterator () ; +
Distance : 5

17
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; !=
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; !=
Distance : 5

18
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; value
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; value
Distance : 9

19
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; i
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; i
Distance : 9

20
Tree	Iterator iter = iterator ( iter . class ) ; !=
Code	Iterator iter = iterator ( iter . class ) ; !=
Distance : 6

21
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; +
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; +
Distance : 11

22
Tree	Iterator iter = iterator ( res.entries ) ;
Code	Iterator iter = iterator ( res.entries ) ;
Distance : 4

23
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; +
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; +
Distance : 5

24
Tree	Iterator iter = this . entries . iterator () ; !=
Code	Iterator iter = this . entries . iterator () ; !=
Distance : 3

25
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

26
Tree	Iterator iter = iterator ( entries . class ) ;
Code	Iterator iter = iterator ( entries . class ) ;
Distance : 4

27
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

28
Tree	Iterator iter = this . entries . iterator () ;
Code	Iterator iter = this . entries . iterator () ;
Distance : 2

29
Tree	Iterator iter = this . iter . iterator () ;
Code	Iterator iter = this . iter . iterator () ;
Distance : 3

30
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; value
Code	Iterator iter = iterator ( res.entries ) . iterator () ; value
Distance : 5

31
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

32
Tree	Iterator iter = iterator ( res.entries ) ; +
Code	Iterator iter = iterator ( res.entries ) ; +
Distance : 5

33
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

34
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; value
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; value
Distance : 11

35
Tree	Iterator iter = iterator ( res.entries ) ; i
Code	Iterator iter = iterator ( res.entries ) ; i
Distance : 5

36
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

37
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

38
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; +
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; +
Distance : 9

39
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

40
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 11

41
Tree	Iterator iter = iterator ( res.entries ) . iterator () ;
Code	Iterator iter = iterator ( res.entries ) . iterator () ;
Distance : 4

42
Tree	Iterator iter = iterator ( iter . class ) ;
Code	Iterator iter = iterator ( iter . class ) ;
Distance : 5

43
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 7

44
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; i
Code	Iterator iter = iterator ( res.entries ) . iterator () ; i
Distance : 5

45
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

46
Tree	Iterator iter = iterator ( res.entries ) ; value
Code	Iterator iter = iterator ( res.entries ) ; value
Distance : 5

47
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; i
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; i
Distance : 11

48
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

49
Tree	Iterator entries = res.entries . iterator () ;
Code	Iterator entries = res.entries . iterator () ;
Distance : 2

========================================================================


========================================================================
Example Number: 64
Parent Code is: 
Iterator iter = res.entries . iterator () ;
-------------------------------------------------------------------------------
Child code is: 
Iterator iter = entries . iterator () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (40{val=res.entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (800{val=entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/49/parent/src_main_java_org_apache_commons_math_linear_OpenMapRealVector.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	Iterator entries = iterator ( res.entries ) ;
Code	Iterator entries = iterator ( res.entries ) ;
Distance : 5

1
Tree	Iterator iter = res.entries . iterator () ;
Code	Iterator iter = res.entries . iterator () ;
Distance : 1

2
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 3

3
Tree	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

4
Tree	Iterator entries = this . entries . iterator () ;
Code	Iterator entries = this . entries . iterator () ;
Distance : 3

5
Tree	Iterator entries = this . iter . iterator () ;
Code	Iterator entries = this . iter . iterator () ;
Distance : 4

6
Tree	Iterator entries = iterator ( iter . class ) ;
Code	Iterator entries = iterator ( iter . class ) ;
Distance : 6

7
Tree	Iterator entries = iterator ( res.entries ) . iterator () ;
Code	Iterator entries = iterator ( res.entries ) . iterator () ;
Distance : 5

8
Tree	Iterator entries = iterator ( entries . class ) ;
Code	Iterator entries = iterator ( entries . class ) ;
Distance : 5

9
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; value
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; value
Distance : 5

10
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; i
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; i
Distance : 5

11
Tree	Iterator iter = res.entries . iterator () ; i
Code	Iterator iter = res.entries . iterator () ; i
Distance : 2

12
Tree	Iterator iter = res.entries . iterator () ; value
Code	Iterator iter = res.entries . iterator () ; value
Distance : 2

13
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

14
Tree	Iterator iter = res.entries . iterator () ; +
Code	Iterator iter = res.entries . iterator () ; +
Distance : 2

15
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; !=
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; !=
Distance : 9

16
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; +
Code	Iterator iter = iterator ( res.entries ) . iterator () ; +
Distance : 5

17
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; !=
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; !=
Distance : 5

18
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; value
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; value
Distance : 9

19
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; i
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; i
Distance : 9

20
Tree	Iterator iter = iterator ( iter . class ) ; !=
Code	Iterator iter = iterator ( iter . class ) ; !=
Distance : 6

21
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; +
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; +
Distance : 11

22
Tree	Iterator iter = iterator ( res.entries ) ;
Code	Iterator iter = iterator ( res.entries ) ;
Distance : 4

23
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; +
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; +
Distance : 5

24
Tree	Iterator iter = this . entries . iterator () ; !=
Code	Iterator iter = this . entries . iterator () ; !=
Distance : 3

25
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

26
Tree	Iterator iter = iterator ( entries . class ) ;
Code	Iterator iter = iterator ( entries . class ) ;
Distance : 4

27
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

28
Tree	Iterator iter = this . entries . iterator () ;
Code	Iterator iter = this . entries . iterator () ;
Distance : 2

29
Tree	Iterator iter = this . iter . iterator () ;
Code	Iterator iter = this . iter . iterator () ;
Distance : 3

30
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; value
Code	Iterator iter = iterator ( res.entries ) . iterator () ; value
Distance : 5

31
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

32
Tree	Iterator iter = iterator ( res.entries ) ; +
Code	Iterator iter = iterator ( res.entries ) ; +
Distance : 5

33
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

34
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; value
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; value
Distance : 11

35
Tree	Iterator iter = iterator ( res.entries ) ; i
Code	Iterator iter = iterator ( res.entries ) ; i
Distance : 5

36
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

37
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

38
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; +
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; +
Distance : 9

39
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

40
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 11

41
Tree	Iterator iter = iterator ( res.entries ) . iterator () ;
Code	Iterator iter = iterator ( res.entries ) . iterator () ;
Distance : 4

42
Tree	Iterator iter = iterator ( iter . class ) ;
Code	Iterator iter = iterator ( iter . class ) ;
Distance : 5

43
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 7

44
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; i
Code	Iterator iter = iterator ( res.entries ) . iterator () ; i
Distance : 5

45
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

46
Tree	Iterator iter = iterator ( res.entries ) ; value
Code	Iterator iter = iterator ( res.entries ) ; value
Distance : 5

47
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; i
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; i
Distance : 11

48
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

49
Tree	Iterator entries = res.entries . iterator () ;
Code	Iterator entries = res.entries . iterator () ;
Distance : 2

========================================================================


========================================================================
Example Number: 65
Parent Code is: 
Iterator iter = res.entries . iterator () ;
-------------------------------------------------------------------------------
Child code is: 
Iterator iter = entries . iterator () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (40{val=res.entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (800{val=entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/49/parent/src_main_java_org_apache_commons_math_linear_OpenMapRealVector.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	Iterator entries = iterator ( res.entries ) ;
Code	Iterator entries = iterator ( res.entries ) ;
Distance : 5

1
Tree	Iterator iter = res.entries . iterator () ;
Code	Iterator iter = res.entries . iterator () ;
Distance : 1

2
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 3

3
Tree	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

4
Tree	Iterator entries = this . entries . iterator () ;
Code	Iterator entries = this . entries . iterator () ;
Distance : 3

5
Tree	Iterator entries = this . iter . iterator () ;
Code	Iterator entries = this . iter . iterator () ;
Distance : 4

6
Tree	Iterator entries = iterator ( iter . class ) ;
Code	Iterator entries = iterator ( iter . class ) ;
Distance : 6

7
Tree	Iterator entries = iterator ( res.entries ) . iterator () ;
Code	Iterator entries = iterator ( res.entries ) . iterator () ;
Distance : 5

8
Tree	Iterator entries = iterator ( entries . class ) ;
Code	Iterator entries = iterator ( entries . class ) ;
Distance : 5

9
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; value
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; value
Distance : 5

10
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; i
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; i
Distance : 5

11
Tree	Iterator iter = res.entries . iterator () ; i
Code	Iterator iter = res.entries . iterator () ; i
Distance : 2

12
Tree	Iterator iter = res.entries . iterator () ; value
Code	Iterator iter = res.entries . iterator () ; value
Distance : 2

13
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

14
Tree	Iterator iter = res.entries . iterator () ; +
Code	Iterator iter = res.entries . iterator () ; +
Distance : 2

15
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; !=
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; !=
Distance : 9

16
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; +
Code	Iterator iter = iterator ( res.entries ) . iterator () ; +
Distance : 5

17
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; !=
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; !=
Distance : 5

18
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; value
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; value
Distance : 9

19
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; i
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; i
Distance : 9

20
Tree	Iterator iter = iterator ( iter . class ) ; !=
Code	Iterator iter = iterator ( iter . class ) ; !=
Distance : 6

21
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; +
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; +
Distance : 11

22
Tree	Iterator iter = iterator ( res.entries ) ;
Code	Iterator iter = iterator ( res.entries ) ;
Distance : 4

23
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; +
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; +
Distance : 5

24
Tree	Iterator iter = this . entries . iterator () ; !=
Code	Iterator iter = this . entries . iterator () ; !=
Distance : 3

25
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

26
Tree	Iterator iter = iterator ( entries . class ) ;
Code	Iterator iter = iterator ( entries . class ) ;
Distance : 4

27
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

28
Tree	Iterator iter = this . entries . iterator () ;
Code	Iterator iter = this . entries . iterator () ;
Distance : 2

29
Tree	Iterator iter = this . iter . iterator () ;
Code	Iterator iter = this . iter . iterator () ;
Distance : 3

30
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; value
Code	Iterator iter = iterator ( res.entries ) . iterator () ; value
Distance : 5

31
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

32
Tree	Iterator iter = iterator ( res.entries ) ; +
Code	Iterator iter = iterator ( res.entries ) ; +
Distance : 5

33
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

34
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; value
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; value
Distance : 11

35
Tree	Iterator iter = iterator ( res.entries ) ; i
Code	Iterator iter = iterator ( res.entries ) ; i
Distance : 5

36
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

37
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

38
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; +
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; +
Distance : 9

39
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

40
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 11

41
Tree	Iterator iter = iterator ( res.entries ) . iterator () ;
Code	Iterator iter = iterator ( res.entries ) . iterator () ;
Distance : 4

42
Tree	Iterator iter = iterator ( iter . class ) ;
Code	Iterator iter = iterator ( iter . class ) ;
Distance : 5

43
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 7

44
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; i
Code	Iterator iter = iterator ( res.entries ) . iterator () ; i
Distance : 5

45
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

46
Tree	Iterator iter = iterator ( res.entries ) ; value
Code	Iterator iter = iterator ( res.entries ) ; value
Distance : 5

47
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; i
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; i
Distance : 11

48
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

49
Tree	Iterator entries = res.entries . iterator () ;
Code	Iterator entries = res.entries . iterator () ;
Distance : 2

========================================================================


========================================================================
Example Number: 66
Parent Code is: 
Iterator iter = res.entries . iterator () ;
-------------------------------------------------------------------------------
Child code is: 
Iterator iter = entries . iterator () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (40{val=res.entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (800{val=entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/49/parent/src_main_java_org_apache_commons_math_linear_OpenMapRealVector.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	Iterator entries = iterator ( res.entries ) ;
Code	Iterator entries = iterator ( res.entries ) ;
Distance : 5

1
Tree	Iterator iter = res.entries . iterator () ;
Code	Iterator iter = res.entries . iterator () ;
Distance : 1

2
Tree	Iterator iter = entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 3

3
Tree	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

4
Tree	Iterator entries = this . entries . iterator () ;
Code	Iterator entries = this . entries . iterator () ;
Distance : 3

5
Tree	Iterator entries = this . iter . iterator () ;
Code	Iterator entries = this . iter . iterator () ;
Distance : 4

6
Tree	Iterator entries = iterator ( iter . class ) ;
Code	Iterator entries = iterator ( iter . class ) ;
Distance : 6

7
Tree	Iterator entries = iterator ( res.entries ) . iterator () ;
Code	Iterator entries = iterator ( res.entries ) . iterator () ;
Distance : 5

8
Tree	Iterator entries = iterator ( entries . class ) ;
Code	Iterator entries = iterator ( entries . class ) ;
Distance : 5

9
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; value
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; value
Distance : 5

10
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; i
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; i
Distance : 5

11
Tree	Iterator iter = res.entries . iterator () ; i
Code	Iterator iter = res.entries . iterator () ; i
Distance : 2

12
Tree	Iterator iter = res.entries . iterator () ; value
Code	Iterator iter = res.entries . iterator () ; value
Distance : 2

13
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

14
Tree	Iterator iter = res.entries . iterator () ; +
Code	Iterator iter = res.entries . iterator () ; +
Distance : 2

15
Tree	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; !=
Code	Iterator iter = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; !=
Distance : 9

16
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; +
Code	Iterator iter = iterator ( res.entries ) . iterator () ; +
Distance : 5

17
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; !=
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ; !=
Distance : 5

18
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; value
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; value
Distance : 9

19
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; i
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; i
Distance : 9

20
Tree	Iterator iter = iterator ( iter . class ) ; !=
Code	Iterator iter = iterator ( iter . class ) ; !=
Distance : 6

21
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; +
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; +
Distance : 11

22
Tree	Iterator iter = iterator ( res.entries ) ;
Code	Iterator iter = iterator ( res.entries ) ;
Distance : 4

23
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; +
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ; +
Distance : 5

24
Tree	Iterator iter = this . entries . iterator () ; !=
Code	Iterator iter = this . entries . iterator () ; !=
Distance : 3

25
Tree	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

26
Tree	Iterator iter = iterator ( entries . class ) ;
Code	Iterator iter = iterator ( entries . class ) ;
Distance : 4

27
Tree	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

28
Tree	Iterator iter = this . entries . iterator () ;
Code	Iterator iter = this . entries . iterator () ;
Distance : 2

29
Tree	Iterator iter = this . iter . iterator () ;
Code	Iterator iter = this . iter . iterator () ;
Distance : 3

30
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; value
Code	Iterator iter = iterator ( res.entries ) . iterator () ; value
Distance : 5

31
Tree	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

32
Tree	Iterator iter = iterator ( res.entries ) ; +
Code	Iterator iter = iterator ( res.entries ) ; +
Distance : 5

33
Tree	Iterator entries = iter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = iter . iterator ( NUMBER_CONSTANT ) ;
Distance : 5

34
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; value
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; value
Distance : 11

35
Tree	Iterator iter = iterator ( res.entries ) ; i
Code	Iterator iter = iterator ( res.entries ) ; i
Distance : 5

36
Tree	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = res.entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

37
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

38
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; +
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; +
Distance : 9

39
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

40
Tree	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator entries = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 11

41
Tree	Iterator iter = iterator ( res.entries ) . iterator () ;
Code	Iterator iter = iterator ( res.entries ) . iterator () ;
Distance : 4

42
Tree	Iterator iter = iterator ( iter . class ) ;
Code	Iterator iter = iterator ( iter . class ) ;
Distance : 5

43
Tree	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = entries . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 7

44
Tree	Iterator iter = iterator ( res.entries ) . iterator () ; i
Code	Iterator iter = iterator ( res.entries ) . iterator () ; i
Distance : 5

45
Tree	Iterator entries = entries . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator entries = entries . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

46
Tree	Iterator iter = iterator ( res.entries ) ; value
Code	Iterator iter = iterator ( res.entries ) ; value
Distance : 5

47
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; i
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ; i
Distance : 11

48
Tree	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

49
Tree	Iterator entries = res.entries . iterator () ;
Code	Iterator entries = res.entries . iterator () ;
Distance : 2

========================================================================


========================================================================
Example Number: 67
Parent Code is: 
if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
-------------------------------------------------------------------------------
Child code is: 
if ( divisor == NUMBER_CONSTANT ) { return isZero ? NaN : INF ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=divisor}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=NaN}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=divisor}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (16 (800{val=isZero}) (233{val=?}) (800{val=NaN}) (226{val=:}) (800{val=INF})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/47/parent/src_main_java_org_apache_commons_math_complex_Complex.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	if ( new Es6SyntacticScopeCreator () . getName ( divisor ) ) { return NaN ; }
Code	if ( new Es6SyntacticScopeCreator () . getName ( divisor ) ) { return NaN ; }
Distance : 12

1
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ; }
Distance : 5

2
Tree	if ( NaN == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT ) { return NaN ; }
Distance : 5

3
Tree	if ( divisor == NUMBER_CONSTANT ) { return divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return divisor ; }
Distance : 5

4
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

5
Tree	if ( divisor . getVertices ( divisor ) ) { return NaN ; }
Code	if ( divisor . getVertices ( divisor ) ) { return NaN ; }
Distance : 9

6
Tree	if ( divisor . isAliasDefinition ( divisor ) ) { return NaN ; }
Code	if ( divisor . isAliasDefinition ( divisor ) ) { return NaN ; }
Distance : 9

7
Tree	if ( ready ( divisor ) ) { return NaN ; }
Code	if ( ready ( divisor ) ) { return NaN ; }
Distance : 8

8
Tree	if ( isExprConditional ( divisor ) ) { return NaN ; }
Code	if ( isExprConditional ( divisor ) ) { return NaN ; }
Distance : 8

9
Tree	if ( divisor . isAssignableFrom ( divisor ) ) { return NaN ; }
Code	if ( divisor . isAssignableFrom ( divisor ) ) { return NaN ; }
Distance : 9

10
Tree	if ( divisor . isAssignableFrom () ) { return NaN ; }
Code	if ( divisor . isAssignableFrom () ) { return NaN ; }
Distance : 7

11
Tree	if ( divisor . getInstrumentForCoverageOnly ( divisor ) ) { return NaN ; }
Code	if ( divisor . getInstrumentForCoverageOnly ( divisor ) ) { return NaN ; }
Distance : 9

12
Tree	if ( divisor . regionMatches ( divisor ) ) { return NaN ; }
Code	if ( divisor . regionMatches ( divisor ) ) { return NaN ; }
Distance : 9

13
Tree	if ( isTypeCompatible () ) { return NaN ; }
Code	if ( isTypeCompatible () ) { return NaN ; }
Distance : 7

14
Tree	if ( isTypeCompatible ( divisor ) ) { return NaN ; }
Code	if ( isTypeCompatible ( divisor ) ) { return NaN ; }
Distance : 8

15
Tree	if ( options.skipNonTranspilationPasses ( divisor ) ) { return NaN ; }
Code	if ( options.skipNonTranspilationPasses ( divisor ) ) { return NaN ; }
Distance : 8

16
Tree	if ( options.skipNonTranspilationPasses () ) { return NaN ; }
Code	if ( options.skipNonTranspilationPasses () ) { return NaN ; }
Distance : 7

17
Tree	if ( divisor . getInstrumentForCoverageOnly () ) { return NaN ; }
Code	if ( divisor . getInstrumentForCoverageOnly () ) { return NaN ; }
Distance : 7

18
Tree	if ( divisor . getVertices () ) { return NaN ; }
Code	if ( divisor . getVertices () ) { return NaN ; }
Distance : 7

19
Tree	if ( ready () ) { return NaN ; }
Code	if ( ready () ) { return NaN ; }
Distance : 7

20
Tree	if ( divisor . isAliasDefinition () ) { return NaN ; }
Code	if ( divisor . isAliasDefinition () ) { return NaN ; }
Distance : 7

21
Tree	if ( isPrimitiveWrapper ( divisor ) ) { return NaN ; }
Code	if ( isPrimitiveWrapper ( divisor ) ) { return NaN ; }
Distance : 8

22
Tree	if ( divisor . regionMatches () ) { return NaN ; }
Code	if ( divisor . regionMatches () ) { return NaN ; }
Distance : 7

23
Tree	if ( isPrimitiveWrapper () ) { return NaN ; }
Code	if ( isPrimitiveWrapper () ) { return NaN ; }
Distance : 7

24
Tree	if ( isExprConditional () ) { return NaN ; }
Code	if ( isExprConditional () ) { return NaN ; }
Distance : 7

25
Tree	if ( ready ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( ready ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

26
Tree	if ( isTypeCompatible ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isTypeCompatible ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

27
Tree	if ( options.skipNonTranspilationPasses ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( options.skipNonTranspilationPasses ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

28
Tree	if ( isPrimitiveWrapper ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isPrimitiveWrapper ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

29
Tree	if ( isExprConditional ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isExprConditional ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

30
Tree	if ( this . renderAsPercentages () ) { return NaN ; }
Code	if ( this . renderAsPercentages () ) { return NaN ; }
Distance : 8

31
Tree	if ( this . divisor . getAllValues () ) { return NaN ; }
Code	if ( this . divisor . getAllValues () ) { return NaN ; }
Distance : 9

32
Tree	if ( divisor . isAssignableFrom ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . isAssignableFrom ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

33
Tree	if ( this . optimizePropertyIndex () ) { return NaN ; }
Code	if ( this . optimizePropertyIndex () ) { return NaN ; }
Distance : 8

34
Tree	if ( divisor . getVertices ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . getVertices ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

35
Tree	if ( divisor . isAliasDefinition ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . isAliasDefinition ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

36
Tree	if ( new VerifyingRecorder () . getName ( divisor ) ) { return NaN ; }
Code	if ( new VerifyingRecorder () . getName ( divisor ) ) { return NaN ; }
Distance : 12

37
Tree	if ( this . divisor . isSubtype () ) { return NaN ; }
Code	if ( this . divisor . isSubtype () ) { return NaN ; }
Distance : 9

38
Tree	if ( this . containsNow () ) { return NaN ; }
Code	if ( this . containsNow () ) { return NaN ; }
Distance : 8

39
Tree	if ( divisor . regionMatches ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . regionMatches ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

40
Tree	if ( this . primitiveType () ) { return NaN ; }
Code	if ( this . primitiveType () ) { return NaN ; }
Distance : 8

41
Tree	if ( this . chartArea () ) { return NaN ; }
Code	if ( this . chartArea () ) { return NaN ; }
Distance : 8

42
Tree	if ( divisor . getInstrumentForCoverageOnly ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . getInstrumentForCoverageOnly ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

43
Tree	if ( this . divisor . getDaysInYearMax () ) { return NaN ; }
Code	if ( this . divisor . getDaysInYearMax () ) { return NaN ; }
Distance : 9

44
Tree	if ( this . divisor . getVertices () ) { return NaN ; }
Code	if ( this . divisor . getVertices () ) { return NaN ; }
Distance : 9

45
Tree	if ( new AtLeastDiscrepancy () . getName ( divisor ) ) { return NaN ; }
Code	if ( new AtLeastDiscrepancy () . getName ( divisor ) ) { return NaN ; }
Distance : 12

46
Tree	if ( this . divisor . getMethod () ) { return NaN ; }
Code	if ( this . divisor . getMethod () ) { return NaN ; }
Distance : 9

47
Tree	if ( new VerifyingRecorder () . length ( divisor ) ) { return NaN ; }
Code	if ( new VerifyingRecorder () . length ( divisor ) ) { return NaN ; }
Distance : 12

48
Tree	if ( new AtLeastDiscrepancy () . length ( divisor ) ) { return NaN ; }
Code	if ( new AtLeastDiscrepancy () . length ( divisor ) ) { return NaN ; }
Distance : 12

49
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

========================================================================


========================================================================
Example Number: 68
Parent Code is: 
if ( divisor == NUMBER_CONSTANT ) { return isZero ? NaN : INF ; }
-------------------------------------------------------------------------------
Child code is: 
if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=divisor}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (16 (800{val=isZero}) (233{val=?}) (800{val=NaN}) (226{val=:}) (800{val=INF})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=divisor}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=NaN}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/46/parent/src_main_java_org_apache_commons_math_complex_Complex.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . dereference () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . dereference () : divisor ; }
Distance : 7

1
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? startPoint.length : FunctionFlavor.NORMAL ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? startPoint.length : FunctionFlavor.NORMAL ; }
Distance : 4

2
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( FeatureSet.ES6 , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( FeatureSet.ES6 , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Distance : 7

3
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 5

4
Tree	if ( divisor == NUMBER_CONSTANT ) { return return; ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return return; ; }
Distance : 1

5
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . getEmptyObjectLiteral () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . getEmptyObjectLiteral () : NaN ; }
Distance : 7

6
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . getPackage () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . getPackage () : NaN ; }
Distance : 7

7
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? interceptors.target . getTopDefiningInterface () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? interceptors.target . getTopDefiningInterface () : divisor ; }
Distance : 7

8
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( Es6ModuleTranspilation.TO_COMMON_JS_LIKE_MODULES , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( Es6ModuleTranspilation.TO_COMMON_JS_LIKE_MODULES , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Distance : 7

9
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( Es6ModuleTranspilation.TO_COMMON_JS_LIKE_MODULES , Es6ToEs3Util.CANNOT_CONVERT_YET ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( Es6ModuleTranspilation.TO_COMMON_JS_LIKE_MODULES , Es6ToEs3Util.CANNOT_CONVERT_YET ) ; }
Distance : 7

10
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? IncrementalCheckMode.OFF . getTopDefiningInterface () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? IncrementalCheckMode.OFF . getTopDefiningInterface () : divisor ; }
Distance : 7

11
Tree	if ( divisor == NUMBER_CONSTANT ) { return divisor ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return divisor ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 5

12
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . that () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . that () : divisor ; }
Distance : 7

13
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . getNumberInstance () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . getNumberInstance () : NaN ; }
Distance : 7

14
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? interceptors.target . getBeta () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? interceptors.target . getBeta () : divisor ; }
Distance : 7

15
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? uniqueId () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? uniqueId () : NaN ; }
Distance : 5

16
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? isSubtypeWithoutStructuralTyping () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? isSubtypeWithoutStructuralTyping () : NaN ; }
Distance : 5

17
Tree	if ( isZero == NUMBER_CONSTANT ) { return null ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return null ; }
Distance : 2

18
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? isNamedType () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? isNamedType () : NaN ; }
Distance : 5

19
Tree	if ( divisor == NUMBER_CONSTANT ) { return continue; ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return continue; ; }
Distance : 1

20
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? INFINITE_WINDOW () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? INFINITE_WINDOW () : NaN ; }
Distance : 5

21
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? uniqueId () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? uniqueId () : divisor ; }
Distance : 5

22
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? startPoint.length . getTopDefiningInterface () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? startPoint.length . getTopDefiningInterface () : divisor ; }
Distance : 7

23
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . enumLiteralHasKey () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . enumLiteralHasKey () : divisor ; }
Distance : 7

24
Tree	if ( divisor == NUMBER_CONSTANT ) { return null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return null ; }
Distance : 1

25
Tree	if ( divisor == NUMBER_CONSTANT ) { return break; ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return break; ; }
Distance : 1

26
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( divisor . getLastChild () , reporterStub.location , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( divisor . getLastChild () , reporterStub.location , divisor ) ; }
Distance : 12

27
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( config.tracerMode , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( config.tracerMode , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Distance : 7

28
Tree	if ( divisor == NUMBER_CONSTANT ) { return StringUtils.EMPTY ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return StringUtils.EMPTY ; }
Distance : 1

29
Tree	if ( divisor == NUMBER_CONSTANT ) { return DecompositionType.UNDECOMPOSABLE ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return DecompositionType.UNDECOMPOSABLE ; }
Distance : 1

30
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ; }
Distance : 1

31
Tree	if ( divisor == NUMBER_CONSTANT ) { return DecompositionType.DECOMPOSABLE ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return DecompositionType.DECOMPOSABLE ; }
Distance : 1

32
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( divisor . toString () , reporterStub.location , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( divisor . toString () , reporterStub.location , divisor ) ; }
Distance : 12

33
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getBeta () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . getBeta () : divisor ; }
Distance : 7

34
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( divisor . getLastChild () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( divisor . getLastChild () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , divisor ) ; }
Distance : 12

35
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? IncrementalCheckMode.OFF : FunctionFlavor.NORMAL ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? IncrementalCheckMode.OFF : FunctionFlavor.NORMAL ; }
Distance : 4

36
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? interceptors.target : FunctionFlavor.NORMAL ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? interceptors.target : FunctionFlavor.NORMAL ; }
Distance : 4

37
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? IncrementalCheckMode.OFF : IncrementalCheckMode.GENERATE_IJS ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? IncrementalCheckMode.OFF : IncrementalCheckMode.GENERATE_IJS ; }
Distance : 4

38
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? interceptors.target : IncrementalCheckMode.GENERATE_IJS ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? interceptors.target : IncrementalCheckMode.GENERATE_IJS ; }
Distance : 4

39
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( divisor . escapeJson () , reporterStub.location , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( divisor . escapeJson () , reporterStub.location , divisor ) ; }
Distance : 12

40
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( divisor . copySelf () , reporterStub.location , divisor ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( divisor . copySelf () , reporterStub.location , divisor ) ; }
Distance : 12

41
Tree	if ( divisor == NUMBER_CONSTANT ) { return isZero ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return isZero ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 5

42
Tree	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isZero == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 5

43
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( config.tracerMode , Es6ToEs3Util.CANNOT_CONVERT_YET ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN . isSubtypeWithoutStructuralTyping ( config.tracerMode , Es6ToEs3Util.CANNOT_CONVERT_YET ) ; }
Distance : 7

44
Tree	if ( divisor == NUMBER_CONSTANT ) { return ConformanceResult.POSSIBLE_VIOLATION_DUE_TO_LOOSE_TYPES ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ConformanceResult.POSSIBLE_VIOLATION_DUE_TO_LOOSE_TYPES ; }
Distance : 1

45
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 4

46
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . of () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . of () : divisor ; }
Distance : 7

47
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . latest () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? NaN . latest () : divisor ; }
Distance : 7

48
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . that () : NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? this . that () : NaN ; }
Distance : 7

49
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ? startConfiguration.length . getTopDefiningInterface () : divisor ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ? startConfiguration.length . getTopDefiningInterface () : divisor ; }
Distance : 7

========================================================================


========================================================================
Example Number: 69
Parent Code is: 
if ( divisor.isZero ) { return isZero ? NaN : INF ; }
-------------------------------------------------------------------------------
Child code is: 
if ( divisor.isZero ) { return NaN ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (40{val=divisor.isZero}) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (16 (800{val=isZero}) (233{val=?}) (800{val=NaN}) (226{val=:}) (800{val=INF})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (40{val=divisor.isZero}) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=NaN}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/46/parent/src_main_java_org_apache_commons_math_complex_Complex.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	if ( this . radiusGridlinesVisible () ) { return null ; }
Code	if ( this . radiusGridlinesVisible () ) { return null ; }
Distance : 5

1
Tree	if ( this . getTracerMode () ) { return null ; }
Code	if ( this . getTracerMode () ) { return null ; }
Distance : 5

2
Tree	if ( this . isTopLevel () ) { return null ; }
Code	if ( this . isTopLevel () ) { return null ; }
Distance : 5

3
Tree	if ( this . getStringBuffer () ) { return null ; }
Code	if ( this . getStringBuffer () ) { return null ; }
Distance : 5

4
Tree	if ( this . isSame () ) { return null ; }
Code	if ( this . isSame () ) { return null ; }
Distance : 5

5
Tree	if ( divisor.isZero . isAliasDefinition ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( divisor.isZero . isAliasDefinition ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 9

6
Tree	if ( divisor.isZero . options.removeUnusedLocalVars ( isZero ) ) { return NaN ? NaN : if ; }
Code	if ( divisor.isZero . options.removeUnusedLocalVars ( isZero ) ) { return NaN ? NaN : if ; }
Distance : 9

7
Tree	if ( divisor.isZero . astValidationEnabled ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( divisor.isZero . astValidationEnabled ( isZero ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 9

8
Tree	if ( divisor.isZero . isAliasDefinition ( ) ) ) { return NaN ? NaN : ( ; }
Code	if ( divisor.isZero . isAliasDefinition ( ) ) ) { return NaN ? NaN : ( ; }
Distance : 9

9
Tree	if ( divisor.isZero . isAliasDefinition ( NaN ) ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( divisor.isZero . isAliasDefinition ( NaN ) ) { return NaN ? NaN : divisor.isZero ; }
Distance : 9

10
Tree	if ( divisor.isZero . isAliasDefinition ( divisor.isZero ) ) { return false ; }
Code	if ( divisor.isZero . isAliasDefinition ( divisor.isZero ) ) { return false ; }
Distance : 6

11
Tree	if ( divisor.isZero . options.removeUnusedLocalVars ( divisor.isZero ) ) { return false ; }
Code	if ( divisor.isZero . options.removeUnusedLocalVars ( divisor.isZero ) ) { return false ; }
Distance : 6

12
Tree	if ( divisor.isZero . astValidationEnabled ( divisor.isZero ) ) { return false ; }
Code	if ( divisor.isZero . astValidationEnabled ( divisor.isZero ) ) { return false ; }
Distance : 6

13
Tree	if ( divisor.isZero . isTypeCompatible ( divisor.isZero ) ) { return false ; }
Code	if ( divisor.isZero . isTypeCompatible ( divisor.isZero ) ) { return false ; }
Distance : 6

14
Tree	if ( divisor.isZero . runMode ( divisor.isZero ) ) { return false ; }
Code	if ( divisor.isZero . runMode ( divisor.isZero ) ) { return false ; }
Distance : 6

15
Tree	if ( this . isZero . equals () ) { return null ; }
Code	if ( this . isZero . equals () ) { return null ; }
Distance : 7

16
Tree	if ( this . isZero . withLoose () ) { return null ; }
Code	if ( this . isZero . withLoose () ) { return null ; }
Distance : 7

17
Tree	if ( this . isZero . copySelf () ) { return null ; }
Code	if ( this . isZero . copySelf () ) { return null ; }
Distance : 7

18
Tree	if ( this . isZero . escapeJson () ) { return null ; }
Code	if ( this . isZero . escapeJson () ) { return null ; }
Distance : 7

19
Tree	if ( this . NaN . equals () ) { return null ; }
Code	if ( this . NaN . equals () ) { return null ; }
Distance : 7

20
Tree	if ( STRING_CONSTANT . astValidationEnabled ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . astValidationEnabled ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

21
Tree	if ( STRING_CONSTANT . isAliasDefinition ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . isAliasDefinition ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

22
Tree	if ( STRING_CONSTANT . getRhs ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . getRhs ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

23
Tree	if ( STRING_CONSTANT . isTypeCompatible ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . isTypeCompatible ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

24
Tree	if ( STRING_CONSTANT . hasNode ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . hasNode ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 10

25
Tree	if ( this . radiusGridlinesVisible () ) { return false ; }
Code	if ( this . radiusGridlinesVisible () ) { return false ; }
Distance : 5

26
Tree	if ( this . getTracerMode () ) { return false ; }
Code	if ( this . getTracerMode () ) { return false ; }
Distance : 5

27
Tree	if ( this . isTopLevel () ) { return false ; }
Code	if ( this . isTopLevel () ) { return false ; }
Distance : 5

28
Tree	if ( this . getStringBuffer () ) { return false ; }
Code	if ( this . getStringBuffer () ) { return false ; }
Distance : 5

29
Tree	if ( this . isSame () ) { return false ; }
Code	if ( this . isSame () ) { return false ; }
Distance : 5

30
Tree	if ( this . radiusGridlinesVisible () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . radiusGridlinesVisible () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

31
Tree	if ( this . getTracerMode () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . getTracerMode () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

32
Tree	if ( this . isTopLevel () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . isTopLevel () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

33
Tree	if ( this . getStringBuffer () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . getStringBuffer () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

34
Tree	if ( this . isSame () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . isSame () ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 8

35
Tree	if ( this . radiusGridlinesVisible () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . radiusGridlinesVisible () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

36
Tree	if ( this . getTracerMode () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . getTracerMode () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

37
Tree	if ( this . isTopLevel () ) { return NaN ? NaN : if ; }
Code	if ( this . isTopLevel () ) { return NaN ? NaN : if ; }
Distance : 8

38
Tree	if ( this . getStringBuffer () ) { return NaN ? NaN : ( ; }
Code	if ( this . getStringBuffer () ) { return NaN ? NaN : ( ; }
Distance : 8

39
Tree	if ( this . isSame () ) { return NaN ? NaN : divisor.isZero ; }
Code	if ( this . isSame () ) { return NaN ? NaN : divisor.isZero ; }
Distance : 8

40
Tree	if ( STRING_CONSTANT . astValidationEnabled ( isZero ) ) { return false ; }
Code	if ( STRING_CONSTANT . astValidationEnabled ( isZero ) ) { return false ; }
Distance : 7

41
Tree	if ( STRING_CONSTANT . isAliasDefinition ( isZero ) ) { return false ; }
Code	if ( STRING_CONSTANT . isAliasDefinition ( isZero ) ) { return false ; }
Distance : 7

42
Tree	if ( STRING_CONSTANT . getRhs ( isZero ) ) { return false ; }
Code	if ( STRING_CONSTANT . getRhs ( isZero ) ) { return false ; }
Distance : 7

43
Tree	if ( STRING_CONSTANT . isTypeCompatible ( isZero ) ) { return false ; }
Code	if ( STRING_CONSTANT . isTypeCompatible ( isZero ) ) { return false ; }
Distance : 7

44
Tree	if ( STRING_CONSTANT . hasNode ( isZero ) ) { return false ; }
Code	if ( STRING_CONSTANT . hasNode ( isZero ) ) { return false ; }
Distance : 7

45
Tree	if ( divisor.isZero . isAliasDefinition ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isAliasDefinition ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

46
Tree	if ( divisor.isZero . options.removeUnusedLocalVars ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . options.removeUnusedLocalVars ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

47
Tree	if ( divisor.isZero . astValidationEnabled ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . astValidationEnabled ( isZero ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

48
Tree	if ( divisor.isZero . isAliasDefinition ( ) ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isAliasDefinition ( ) ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

49
Tree	if ( divisor.isZero . isAliasDefinition ( NaN ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor.isZero . isAliasDefinition ( NaN ) ) { return NaN ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

========================================================================


========================================================================
Example Number: 70
Parent Code is: 
{ super ( populationLimit ) ; this . elitismRate = elitismRate ; }
-------------------------------------------------------------------------------
Child code is: 
{ super ( populationLimit ) ; setElitismRate ( elitismRate ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=populationLimit}) (215{val=)}) (227{val=;})) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=elitismRate})) (204{val==}) (800{val=elitismRate})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=populationLimit}) (215{val=)}) (227{val=;})) (21 (32 (802{val=setElitismRate}) (214{val=(}) (800{val=elitismRate}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/35/parent/src_main_java_org_apache_commons_math3_genetics_ElitisticListPopulation.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	{ super ( populationLimit ) ; this . elitismRate = new byte [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new byte [] { populationLimit } ; }
Distance : 9

1
Tree	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] {} ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] {} ; }
Distance : 7

2
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; else }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; else }
Distance : 10

3
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; assertFalse }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; assertFalse }
Distance : 10

4
Tree	{ super ( populationLimit ) ; this . populationLimit = elitismRate ; }
Code	{ super ( populationLimit ) ; this . populationLimit = elitismRate ; }
Distance : 5

5
Tree	{ this . elitismRate = super ( populationLimit ) ; }
Code	{ this . elitismRate = super ( populationLimit ) ; }
Distance : 7

6
Tree	{ super ( populationLimit ) ; this . elitismRate = new int [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new int [] { populationLimit } ; }
Distance : 9

7
Tree	{ super ( populationLimit ) ; this . elitismRate = new GeneralPath [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new GeneralPath [] { elitismRate } ; }
Distance : 9

8
Tree	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer [] {} ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer [] {} ; }
Distance : 7

9
Tree	{ super ( populationLimit ) ; this . elitismRate = new ArrayDeque [] {} ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ArrayDeque [] {} ; }
Distance : 7

10
Tree	{ this . populationLimit = super ( elitismRate ) ; }
Code	{ this . populationLimit = super ( elitismRate ) ; }
Distance : 5

11
Tree	{ super ( populationLimit ) ; this . elitismRate = populationLimit ; }
Code	{ super ( populationLimit ) ; this . elitismRate = populationLimit ; }
Distance : 4

12
Tree	{ super ( populationLimit ) ; this . elitismRate = new CachingTranspiler [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new CachingTranspiler [] { elitismRate } ; }
Distance : 9

13
Tree	{ super ( populationLimit ) ; this . elitismRate = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

14
Tree	{ super ( populationLimit ) ; this . elitismRate = new short [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new short [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

15
Tree	{ super ( populationLimit ) ; this . elitismRate = new short [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new short [] { populationLimit } ; }
Distance : 9

16
Tree	{ super ( populationLimit ) ; this . populationLimit = populationLimit ; }
Code	{ super ( populationLimit ) ; this . populationLimit = populationLimit ; }
Distance : 5

17
Tree	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] <> ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] <> ; }
Distance : 7

18
Tree	{ super ( elitismRate ) ; this . elitismRate = elitismRate ; }
Code	{ super ( elitismRate ) ; this . elitismRate = elitismRate ; }
Distance : 5

19
Tree	{ this . elitismRate = this ( elitismRate ) ; }
Code	{ this . elitismRate = this ( elitismRate ) ; }
Distance : 6

20
Tree	{ super ( populationLimit ) ; this . elitismRate = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

21
Tree	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] { elitismRate } ; }
Distance : 9

22
Tree	{ this ( populationLimit , true ) ; }
Code	{ this ( populationLimit , true ) ; }
Distance : 6

23
Tree	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] extends ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ThreadSafeDelegatingErrorManager [] extends ; }
Distance : 7

24
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; super }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; super }
Distance : 10

25
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; if }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; if }
Distance : 10

26
Tree	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; }
Code	{ super ( populationLimit ) ; this . elitismRate = elitismRate ; }
Distance : 4

27
Tree	{ this ( elitismRate , true ) ; }
Code	{ this ( elitismRate , true ) ; }
Distance : 7

28
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; static }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; static }
Distance : 10

29
Tree	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new DefaultTransformer [] { elitismRate } ; }
Distance : 9

30
Tree	{ this ( populationLimit , false ) ; } !=
Code	{ this ( populationLimit , false ) ; } !=
Distance : 7

31
Tree	{ super ( populationLimit ) ; } +
Code	{ super ( populationLimit ) ; } +
Distance : 6

32
Tree	{ super ( populationLimit ) ; } i
Code	{ super ( populationLimit ) ; } i
Distance : 6

33
Tree	{ super ( populationLimit , elitismRate ) ; }
Code	{ super ( populationLimit , elitismRate ) ; }
Distance : 4

34
Tree	{ this ( populationLimit , false ) ; }
Code	{ this ( populationLimit , false ) ; }
Distance : 6

35
Tree	{ super ( populationLimit ) ; }
Code	{ super ( populationLimit ) ; }
Distance : 5

36
Tree	{ super ( populationLimit ) ; this . elitismRate = new float [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new float [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

37
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { populationLimit } ; }
Distance : 9

38
Tree	{ super ( populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

39
Tree	{ super ( elitismRate , elitismRate ) ; }
Code	{ super ( elitismRate , elitismRate ) ; }
Distance : 5

40
Tree	{ this ( elitismRate , false ) ; }
Code	{ this ( elitismRate , false ) ; }
Distance : 7

41
Tree	{ this . populationLimit = super ( populationLimit ) ; }
Code	{ this . populationLimit = super ( populationLimit ) ; }
Distance : 6

42
Tree	{ super ( populationLimit , populationLimit ) ; }
Code	{ super ( populationLimit , populationLimit ) ; }
Distance : 5

43
Tree	{ this . populationLimit = this ( populationLimit ) ; } !=
Code	{ this . populationLimit = this ( populationLimit ) ; } !=
Distance : 7

44
Tree	{ super ( elitismRate ) ; }
Code	{ super ( elitismRate ) ; }
Distance : 5

45
Tree	{ super ( populationLimit ) ; this . elitismRate = new ArrayDeque [] { elitismRate } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new ArrayDeque [] { elitismRate } ; }
Distance : 9

46
Tree	{ super ( populationLimit ) ; } value
Code	{ super ( populationLimit ) ; } value
Distance : 6

47
Tree	{ super ( populationLimit ) ; this . elitismRate = new float [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . elitismRate = new float [] { populationLimit } ; }
Distance : 9

48
Tree	{ super ( elitismRate , populationLimit ) ; }
Code	{ super ( elitismRate , populationLimit ) ; }
Distance : 6

49
Tree	{ super ( populationLimit , elitismRate ) ; } !=
Code	{ super ( populationLimit , elitismRate ) ; } !=
Distance : 5

========================================================================


========================================================================
Example Number: 71
Parent Code is: 
{ super ( chromosomes , populationLimit ) ; this . elitismRate = elitismRate ; }
-------------------------------------------------------------------------------
Child code is: 
{ super ( chromosomes , populationLimit ) ; setElitismRate ( elitismRate ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=chromosomes}) (234{val=,}) (800{val=populationLimit}) (215{val=)}) (227{val=;})) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=elitismRate})) (204{val==}) (800{val=elitismRate})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=chromosomes}) (234{val=,}) (800{val=populationLimit}) (215{val=)}) (227{val=;})) (21 (32 (802{val=setElitismRate}) (214{val=(}) (800{val=elitismRate}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/35/parent/src_main_java_org_apache_commons_math3_genetics_ElitisticListPopulation.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	{ this ( chromosomes , false ) ; }
Code	{ this ( chromosomes , false ) ; }
Distance : 7

1
Tree	{ this ( dialBackgroundPaint , populationLimit ) ; }
Code	{ this ( dialBackgroundPaint , populationLimit ) ; }
Distance : 7

2
Tree	{ this ( Locale.JAPAN , populationLimit ) ; }
Code	{ this ( Locale.JAPAN , populationLimit ) ; }
Distance : 7

3
Tree	{ super ( chromosomes , populationLimit ) ; }
Code	{ super ( chromosomes , populationLimit ) ; }
Distance : 5

4
Tree	{ super ( chromosomes ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( chromosomes ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 11

5
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new int [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new int [] { chromosomes } ; }
Distance : 9

6
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = elitismRate ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = elitismRate ; }
Distance : 4

7
Tree	{ super ( Locale.JAPAN , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( Locale.JAPAN , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 10

8
Tree	{ super ( ComposableFunction.SINH , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( ComposableFunction.SINH , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 10

9
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new byte [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new byte [] { chromosomes } ; }
Distance : 9

10
Tree	{ this ( ComposableFunction.SINH , populationLimit ) ; }
Code	{ this ( ComposableFunction.SINH , populationLimit ) ; }
Distance : 7

11
Tree	{ super ( labelLinksVisible , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( labelLinksVisible , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 10

12
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 9

13
Tree	{ super ( elitismRate , populationLimit ) ; }
Code	{ super ( elitismRate , populationLimit ) ; }
Distance : 6

14
Tree	{ super ( chromosomes ) ; this . elitismRate = new byte [] { chromosomes } ; }
Code	{ super ( chromosomes ) ; this . elitismRate = new byte [] { chromosomes } ; }
Distance : 11

15
Tree	{ this ( labelLinksVisible , populationLimit ) ; }
Code	{ this ( labelLinksVisible , populationLimit ) ; }
Distance : 7

16
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new short [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new short [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

17
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new short [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new short [] { chromosomes } ; }
Distance : 9

18
Tree	{ super ( chromosomes ) ; this . elitismRate = new int [] { chromosomes } ; }
Code	{ super ( chromosomes ) ; this . elitismRate = new int [] { chromosomes } ; }
Distance : 11

19
Tree	{ this ( yTmp , populationLimit ) ; }
Code	{ this ( yTmp , populationLimit ) ; }
Distance : 7

20
Tree	{ this ( chromosomes , true ) ; }
Code	{ this ( chromosomes , true ) ; }
Distance : 7

21
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new float [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new float [] { chromosomes } ; }
Distance : 9

22
Tree	{ this ( populationLimit , true ) ; }
Code	{ this ( populationLimit , true ) ; }
Distance : 8

23
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new float [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new float [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

24
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new int [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

25
Tree	{ super ( chromosomes , chromosomes ) ; }
Code	{ super ( chromosomes , chromosomes ) ; }
Distance : 6

26
Tree	{ super ( chromosomes , populationLimit ) ; this . chromosomes = elitismRate ; }
Code	{ super ( chromosomes , populationLimit ) ; this . chromosomes = elitismRate ; }
Distance : 5

27
Tree	{ this . chromosomes = populationLimit ; this . populationLimit = elitismRate ; }
Code	{ this . chromosomes = populationLimit ; this . populationLimit = elitismRate ; }
Distance : 9

28
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 9

29
Tree	{ this . populationLimit = populationLimit ; this () ; }
Code	{ this . populationLimit = populationLimit ; this () ; }
Distance : 9

30
Tree	{ this ( populationLimit , false ) ; }
Code	{ this ( populationLimit , false ) ; }
Distance : 8

31
Tree	{ this . chromosomes = chromosomes ; this () ; }
Code	{ this . chromosomes = chromosomes ; this () ; }
Distance : 9

32
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

33
Tree	{ this . chromosomes = elitismRate ; this () ; }
Code	{ this . chromosomes = elitismRate ; this () ; }
Distance : 9

34
Tree	{ super ( dialBackgroundPaint , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Code	{ super ( dialBackgroundPaint , populationLimit ) ; this . elitismRate = new double [] { chromosomes } ; }
Distance : 10

35
Tree	{ super ( chromosomes , elitismRate ) ; }
Code	{ super ( chromosomes , elitismRate ) ; }
Distance : 5

36
Tree	{ this . chromosomes = populationLimit ; this . chromosomes = elitismRate ; }
Code	{ this . chromosomes = populationLimit ; this . chromosomes = elitismRate ; }
Distance : 9

37
Tree	{ super ( chromosomes , elitismRate ) ; this . elitismRate = elitismRate ; }
Code	{ super ( chromosomes , elitismRate ) ; this . elitismRate = elitismRate ; }
Distance : 5

38
Tree	{ super ( chromosomes , populationLimit ) ; this . populationLimit = elitismRate ; }
Code	{ super ( chromosomes , populationLimit ) ; this . populationLimit = elitismRate ; }
Distance : 5

39
Tree	{ this . chromosomes = populationLimit ; this . elitismRate = chromosomes ; }
Code	{ this . chromosomes = populationLimit ; this . elitismRate = chromosomes ; }
Distance : 8

40
Tree	{ this . populationLimit = populationLimit ; this . elitismRate = elitismRate ; }
Code	{ this . populationLimit = populationLimit ; this . elitismRate = elitismRate ; }
Distance : 9

41
Tree	{ this . elitismRate = populationLimit ; this () ; }
Code	{ this . elitismRate = populationLimit ; this () ; }
Distance : 9

42
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = chromosomes ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = chromosomes ; }
Distance : 4

43
Tree	{ this . chromosomes = populationLimit ; this . elitismRate = elitismRate ; }
Code	{ this . chromosomes = populationLimit ; this . elitismRate = elitismRate ; }
Distance : 8

44
Tree	{ super ( populationLimit , populationLimit ) ; }
Code	{ super ( populationLimit , populationLimit ) ; }
Distance : 6

45
Tree	{ this ( elitismRate , false ) ; }
Code	{ this ( elitismRate , false ) ; }
Distance : 8

46
Tree	{ super ( chromosomes ) ; this . elitismRate = new float [] { chromosomes } ; }
Code	{ super ( chromosomes ) ; this . elitismRate = new float [] { chromosomes } ; }
Distance : 11

47
Tree	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , populationLimit ) ; this . elitismRate = new byte [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 11

48
Tree	{ super ( chromosomes ) ; this . elitismRate = new short [] { chromosomes } ; }
Code	{ super ( chromosomes ) ; this . elitismRate = new short [] { chromosomes } ; }
Distance : 11

49
Tree	{ this . chromosomes = populationLimit ; { () ; }
Code	{ this . chromosomes = populationLimit ; { () ; }
Distance : 8

========================================================================


========================================================================
Example Number: 72
Parent Code is: 
{ return chromosomes . iterator () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return getChromosomes () . iterator () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (800{val=chromosomes}) (235{val=.}) (802{val=iterator}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=getChromosomes}) (216{val=()})) (235{val=.}) (802{val=iterator}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/34/parent/src_main_java_org_apache_commons_math3_genetics_ListPopulation.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	{ return chromosomes . getChromosomes ( chromosomes . getChromosomes () ) ; }
Code	{ return chromosomes . getChromosomes ( chromosomes . getChromosomes () ) ; }
Distance : 6

1
Tree	{ return new chromosomes () ; }
Code	{ return new chromosomes () ; }
Distance : 4

2
Tree	{ return ! chromosomes . iterator () ; }
Code	{ return ! chromosomes . iterator () ; }
Distance : 2

3
Tree	{ return getChromosomes () ; }
Code	{ return getChromosomes () ; }
Distance : 3

4
Tree	{ return ( chromosomes == null ? super(); : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == null ? super(); : chromosomes . iterator () ) ; }
Distance : 9

5
Tree	{ return chromosomes . getChromosomes () - NUMBER_CONSTANT ; }
Code	{ return chromosomes . getChromosomes () - NUMBER_CONSTANT ; }
Distance : 5

6
Tree	{ return ( chromosomes == null ? return; : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == null ? return; : chromosomes . iterator () ) ; }
Distance : 9

7
Tree	{ return chromosomes . getChromosomes () . iterator () ; }
Code	{ return chromosomes . getChromosomes () . iterator () ; }
Distance : 2

8
Tree	{ return chromosomes . iterator ( chromosomes . getChromosomes () ) ; }
Code	{ return chromosomes . iterator ( chromosomes . getChromosomes () ) ; }
Distance : 7

9
Tree	{ return chromosomes . getChromosomes ( chromosomes ) ; }
Code	{ return chromosomes . getChromosomes ( chromosomes ) ; }
Distance : 6

10
Tree	{ return chromosomes . iterator () ; }
Code	{ return chromosomes . iterator () ; }
Distance : 2

11
Tree	{ return chromosomes . iterator () ; } value
Code	{ return chromosomes . iterator () ; } value
Distance : 3

12
Tree	{ return chromosomes . iterator () ; } i
Code	{ return chromosomes . iterator () ; } i
Distance : 3

13
Tree	{ return chromosomes . iterator ( chromosomes ) ; } value
Code	{ return chromosomes . iterator ( chromosomes ) ; } value
Distance : 6

14
Tree	{ return chromosomes . iterator ( chromosomes ) ; } i
Code	{ return chromosomes . iterator ( chromosomes ) ; } i
Distance : 6

15
Tree	{ return chromosomes . iterator ( chromosomes ) ; } +
Code	{ return chromosomes . iterator ( chromosomes ) ; } +
Distance : 6

16
Tree	{ return iterator () ; }
Code	{ return iterator () ; }
Distance : 3

17
Tree	{ return new chromosomes () ; } void
Code	{ return new chromosomes () ; } void
Distance : 5

18
Tree	{ return new chromosomes () ; } e
Code	{ return new chromosomes () ; } e
Distance : 5

19
Tree	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } value
Code	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } value
Distance : 5

20
Tree	{ return iterator () ; } +
Code	{ return iterator () ; } +
Distance : 4

21
Tree	{ return ! chromosomes . iterator () ; } value
Code	{ return ! chromosomes . iterator () ; } value
Distance : 3

22
Tree	{ return ! chromosomes . iterator () ; } i
Code	{ return ! chromosomes . iterator () ; } i
Distance : 3

23
Tree	{ return ! chromosomes . iterator () ; } +
Code	{ return ! chromosomes . iterator () ; } +
Distance : 3

24
Tree	{ return ( chromosomes ) chromosomes . iterator () ; }
Code	{ return ( chromosomes ) chromosomes . iterator () ; }
Distance : 4

25
Tree	{ return chromosomes . iterator () . iterator () ; }
Code	{ return chromosomes . iterator () . iterator () ; }
Distance : 3

26
Tree	{ return ( chromosomes == null ? continue; : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == null ? continue; : chromosomes . iterator () ) ; }
Distance : 9

27
Tree	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } i
Code	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } i
Distance : 5

28
Tree	{ return chromosomes . iterator ( chromosomes ) ; }
Code	{ return chromosomes . iterator ( chromosomes ) ; }
Distance : 5

29
Tree	{ return ! chromosomes . getChromosomes () ; }
Code	{ return ! chromosomes . getChromosomes () ; }
Distance : 3

30
Tree	{ return chromosomes . iterator () . getChromosomes () ; }
Code	{ return chromosomes . iterator () . getChromosomes () ; }
Distance : 4

31
Tree	{ return chromosomes . getChromosomes () ; }
Code	{ return chromosomes . getChromosomes () ; }
Distance : 3

32
Tree	{ return chromosomes . getChromosomes () . getChromosomes () ; }
Code	{ return chromosomes . getChromosomes () . getChromosomes () ; }
Distance : 3

33
Tree	{ return ( chromosomes ) chromosomes . iterator () ; } i
Code	{ return ( chromosomes ) chromosomes . iterator () ; } i
Distance : 5

34
Tree	{ return ( chromosomes ) chromosomes . iterator () ; } +
Code	{ return ( chromosomes ) chromosomes . iterator () ; } +
Distance : 5

35
Tree	{ return chromosomes . iterator ( chromosomes . iterator () ) ; } !=
Code	{ return chromosomes . iterator ( chromosomes . iterator () ) ; } !=
Distance : 7

36
Tree	{ return chromosomes . iterator ( chromosomes . iterator () ) ; }
Code	{ return chromosomes . iterator ( chromosomes . iterator () ) ; }
Distance : 6

37
Tree	{ return chromosomes . iterator () ; } +
Code	{ return chromosomes . iterator () ; } +
Distance : 3

38
Tree	{ return iterator () ; } value
Code	{ return iterator () ; } value
Distance : 4

39
Tree	{ return chromosomes . iterator () - NUMBER_CONSTANT ; }
Code	{ return chromosomes . iterator () - NUMBER_CONSTANT ; }
Distance : 4

40
Tree	{ return chromosomes . iterator () . iterator () ; } !=
Code	{ return chromosomes . iterator () . iterator () ; } !=
Distance : 4

41
Tree	{ return iterator () ; } i
Code	{ return iterator () ; } i
Distance : 4

42
Tree	{ return ( chromosomes ) chromosomes . getChromosomes () ; }
Code	{ return ( chromosomes ) chromosomes . getChromosomes () ; }
Distance : 5

43
Tree	{ return ( chromosomes == null ? null : chromosomes . getChromosomes () ) ; }
Code	{ return ( chromosomes == null ? null : chromosomes . getChromosomes () ) ; }
Distance : 10

44
Tree	{ return chromosomes . getChromosomes ( chromosomes . iterator () ) ; }
Code	{ return chromosomes . getChromosomes ( chromosomes . iterator () ) ; }
Distance : 5

45
Tree	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } +
Code	{ return chromosomes . iterator () - NUMBER_CONSTANT ; } +
Distance : 5

46
Tree	{ return new chromosomes () ; } T
Code	{ return new chromosomes () ; } T
Distance : 5

47
Tree	{ return new chromosomes () ; } compiler
Code	{ return new chromosomes () ; } compiler
Distance : 5

48
Tree	{ return ( chromosomes ) chromosomes . iterator () ; } value
Code	{ return ( chromosomes ) chromosomes . iterator () ; } value
Distance : 5

49
Tree	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; }
Code	{ return ( chromosomes == null ? null : chromosomes . iterator () ) ; }
Distance : 9

========================================================================


========================================================================
Example Number: 73
Parent Code is: 
if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( Precision . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (32 (800{val=Precision}) (235{val=.}) (802{val=compareTo}) (214{val=(}) (800{val=entry}) (234{val=,}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (800{val=maxUlps}) (215{val=)})) (231{val=>}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=columnsToDrop}) (235{val=.}) (802{val=add}) (214{val=(}) (800{val=i}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (32 (800{val=Precision}) (235{val=.}) (802{val=compareTo}) (214{val=(}) (800{val=entry}) (234{val=,}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (800{val=epsilon}) (215{val=)})) (231{val=>}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=columnsToDrop}) (235{val=.}) (802{val=add}) (214{val=(}) (800{val=i}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/33/parent/src_main_java_org_apache_commons_math3_optimization_linear_SimplexTableau.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , cutOff ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , cutOff ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

1
Tree	if ( entry . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

2
Tree	if ( Precision . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

3
Tree	if ( entry . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

4
Tree	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

5
Tree	if ( entry . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

6
Tree	if ( Precision . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

7
Tree	if ( entry . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 5

8
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Distance : 6

9
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

10
Tree	if ( entry . compareTo ( null , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( null , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

11
Tree	if ( Precision . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

12
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

13
Tree	if ( i . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

14
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , PivotSelectionRule.BLAND ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , PivotSelectionRule.BLAND ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

15
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

16
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 6

17
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 1

18
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

19
Tree	if ( entry . compareTo ( entry , OrderDirection.INCREASING , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , OrderDirection.INCREASING , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

20
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

21
Tree	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 3

22
Tree	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 1

23
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 5

24
Tree	if ( compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

25
Tree	if ( entry . compareTo ( null , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( null , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

26
Tree	if ( compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 5

27
Tree	if ( Precision . compareTo ( null , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( null , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

28
Tree	if ( Precision . compareTo ( null , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( null , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

29
Tree	if ( entry . compareTo ( entry , cutOff , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , cutOff , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

30
Tree	if ( Precision . compareTo ( entry , maxUlps , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry , maxUlps , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

31
Tree	if ( Precision . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 4

32
Tree	if ( compareTo ( entry , i , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry , i , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

33
Tree	if ( Precision . compareTo ( NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

34
Tree	if ( entry . compareTo ( null , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( null , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

35
Tree	if ( entry . compareTo ( entry , maxUlps , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , maxUlps , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

36
Tree	if ( entry . compareTo ( entry , PivotSelectionRule.BLAND , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , PivotSelectionRule.BLAND , maxUlps , add ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

37
Tree	if ( entry . compareTo ( entry , this . entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , this . entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

38
Tree	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 7

39
Tree	if ( compareTo ( entry , entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry , entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

40
Tree	if ( entry . compareTo ( entry , this . epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , this . epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

41
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

42
Tree	if ( compareTo ( entry , epsilon , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry , epsilon , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

43
Tree	if ( Precision . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( Precision . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 5

44
Tree	if ( Precision . compareTo ( NUMBER_CONSTANT , cutOff ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( NUMBER_CONSTANT , cutOff ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

45
Tree	if ( i . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( i . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

46
Tree	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Code	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { Precision . add ( i ) ; }
Distance : 7

47
Tree	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Code	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { epsilon . add ( i ) ; }
Distance : 7

48
Tree	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 7

49
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( entry ) ; }
Distance : 6

========================================================================


========================================================================
Example Number: 74
Parent Code is: 
final int n1n2prod = n1 * n2 ;
-------------------------------------------------------------------------------
Child code is: 
final double n1n2prod = n1 * n2 ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (39{val=int}) (59 (800{val=n1n2prod}) (204{val==}) (27 (800{val=n1}) (202{val=*}) (800{val=n2}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (39{val=double}) (59 (800{val=n1n2prod}) (204{val==}) (27 (800{val=n1}) (202{val=*}) (800{val=n2}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/30/parent/src_main_java_org_apache_commons_math3_stat_inference_MannWhitneyUTest.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	final int n1n2prod = ( long ) n1 * n2 ;
Code	final int n1n2prod = ( long ) n1 * n2 ;
Distance : 4

1
Tree	final int n1n2prod = ( int ) n1 * n2 ;
Code	final int n1n2prod = ( int ) n1 * n2 ;
Distance : 4

2
Tree	final int n1n2prod = n1 * n2 ;
Code	final int n1n2prod = n1 * n2 ;
Distance : 1

3
Tree	final int n1n2prod = n1 * n2 / n2 ;
Code	final int n1n2prod = n1 * n2 / n2 ;
Distance : 3

4
Tree	final int n1n2prod = n1 - n2 [ n2 ] ;
Code	final int n1n2prod = n1 - n2 [ n2 ] ;
Distance : 5

5
Tree	final int n1n2prod = ( long ) n1 * n1 ;
Code	final int n1n2prod = ( long ) n1 * n1 ;
Distance : 5

6
Tree	final int n1n2prod = n1 * n1 ;
Code	final int n1n2prod = n1 * n1 ;
Distance : 2

7
Tree	final int n2 = n1 + NUMBER_CONSTANT ;
Code	final int n2 = n1 + NUMBER_CONSTANT ;
Distance : 4

8
Tree	final int n1n2prod = NUMBER_CONSTANT * n2 * n2 * currentState.length ;
Code	final int n1n2prod = NUMBER_CONSTANT * n2 * n2 * currentState.length ;
Distance : 6

9
Tree	final int n1n2prod = n2 * n2 ;
Code	final int n1n2prod = n2 * n2 ;
Distance : 2

10
Tree	final int n1n2prod = n2 - / ;
Code	final int n1n2prod = n2 - / ;
Distance : 4

11
Tree	final int n1n2prod = NUMBER_CONSTANT * n1 * n2 * FunctionFlavor.NORMAL ;
Code	final int n1n2prod = NUMBER_CONSTANT * n1 * n2 * FunctionFlavor.NORMAL ;
Distance : 5

12
Tree	final int n1n2prod = ( int ) n1 * n1 ;
Code	final int n1n2prod = ( int ) n1 * n1 ;
Distance : 5

13
Tree	final int n1n2prod = ( long ) n2 * n2 ;
Code	final int n1n2prod = ( long ) n2 * n2 ;
Distance : 5

14
Tree	final int n1n2prod = NUMBER_CONSTANT - n2 ;
Code	final int n1n2prod = NUMBER_CONSTANT - n2 ;
Distance : 3

15
Tree	final int n1n2prod = n1 - extends ;
Code	final int n1n2prod = n1 - extends ;
Distance : 3

16
Tree	final int n1n2prod = NUMBER_CONSTANT * n1 * n2 * currentState.length ;
Code	final int n1n2prod = NUMBER_CONSTANT * n1 * n2 * currentState.length ;
Distance : 5

17
Tree	final int n1n2prod = n1 - n1 [ n2 ] ;
Code	final int n1n2prod = n1 - n1 [ n2 ] ;
Distance : 5

18
Tree	final int n1n2prod = n1 + NUMBER_CONSTANT ;
Code	final int n1n2prod = n1 + NUMBER_CONSTANT ;
Distance : 3

19
Tree	final int n1n2prod = NUMBER_CONSTANT * f.length ;
Code	final int n1n2prod = NUMBER_CONSTANT * f.length ;
Distance : 3

20
Tree	final int n1n2prod = n1 > > NUMBER_CONSTANT ;
Code	final int n1n2prod = n1 > > NUMBER_CONSTANT ;
Distance : 4

21
Tree	final int n1n2prod = n2 + NUMBER_CONSTANT ;
Code	final int n1n2prod = n2 + NUMBER_CONSTANT ;
Distance : 4

22
Tree	final int n1n2prod = n1 * n1 / n1 ;
Code	final int n1n2prod = n1 * n1 / n1 ;
Distance : 4

23
Tree	final int n1n2prod = n2 * n2 / n2 ;
Code	final int n1n2prod = n2 * n2 / n2 ;
Distance : 4

24
Tree	final int n1n2prod = NUMBER_CONSTANT * currentState.length ;
Code	final int n1n2prod = NUMBER_CONSTANT * currentState.length ;
Distance : 3

25
Tree	final int n1n2prod = n1 * n2 / n1 ;
Code	final int n1n2prod = n1 * n2 / n1 ;
Distance : 3

26
Tree	final int n1n2prod = n1 * n1 / n2 ;
Code	final int n1n2prod = n1 * n1 / n2 ;
Distance : 3

27
Tree	final int n1n2prod = NUMBER_CONSTANT * LocalizedFormats.NUMBER_TOO_SMALL ;
Code	final int n1n2prod = NUMBER_CONSTANT * LocalizedFormats.NUMBER_TOO_SMALL ;
Distance : 3

28
Tree	final int n1n2prod = n2 - n2 [ n2 ] ;
Code	final int n1n2prod = n2 - n2 [ n2 ] ;
Distance : 6

29
Tree	final int n1n2prod = NUMBER_CONSTANT * n2 * n1 * currentState.length ;
Code	final int n1n2prod = NUMBER_CONSTANT * n2 * n1 * currentState.length ;
Distance : 6

30
Tree	final int n1n2prod = n2 * n1 ;
Code	final int n1n2prod = n2 * n1 ;
Distance : 3

31
Tree	final int n1n2prod = NUMBER_CONSTANT * n2 * n2 * FunctionFlavor.NORMAL ;
Code	final int n1n2prod = NUMBER_CONSTANT * n2 * n2 * FunctionFlavor.NORMAL ;
Distance : 6

32
Tree	final int n1n2prod = NUMBER_CONSTANT * Vector1D.ZERO ;
Code	final int n1n2prod = NUMBER_CONSTANT * Vector1D.ZERO ;
Distance : 3

33
Tree	final int n1n2prod = n1 - R [ n2 ] ;
Code	final int n1n2prod = n1 - R [ n2 ] ;
Distance : 5

34
Tree	final int n1n2prod = NUMBER_CONSTANT * FastMath.PI ;
Code	final int n1n2prod = NUMBER_CONSTANT * FastMath.PI ;
Distance : 3

35
Tree	final int n1n2prod = n1 - <> ;
Code	final int n1n2prod = n1 - <> ;
Distance : 3

36
Tree	final int n2 = n1 * n2 ;
Code	final int n2 = n1 * n2 ;
Distance : 2

37
Tree	final int n1n2prod = n1 - / ;
Code	final int n1n2prod = n1 - / ;
Distance : 3

38
Tree	final int n1n2prod = n1 - n2 [ n1 ] ;
Code	final int n1n2prod = n1 - n2 [ n1 ] ;
Distance : 5

39
Tree	final int n1n2prod = n2 > > NUMBER_CONSTANT ;
Code	final int n1n2prod = n2 > > NUMBER_CONSTANT ;
Distance : 5

40
Tree	final int n2 = n1 > > NUMBER_CONSTANT ;
Code	final int n2 = n1 > > NUMBER_CONSTANT ;
Distance : 5

41
Tree	final int n1 = n1 + NUMBER_CONSTANT ;
Code	final int n1 = n1 + NUMBER_CONSTANT ;
Distance : 4

42
Tree	final int n1 = n1 > > NUMBER_CONSTANT ;
Code	final int n1 = n1 > > NUMBER_CONSTANT ;
Distance : 5

43
Tree	final double n1n2prod = n1 + NUMBER_CONSTANT ;
Code	final double n1n2prod = n1 + NUMBER_CONSTANT ;
Distance : 2

44
Tree	final int n1n2prod = n2 - extends ;
Code	final int n1n2prod = n2 - extends ;
Distance : 4

45
Tree	final double n1n2prod = n1 > > NUMBER_CONSTANT ;
Code	final double n1n2prod = n1 > > NUMBER_CONSTANT ;
Distance : 3

46
Tree	final int n2 = NUMBER_CONSTANT - n2 ;
Code	final int n2 = NUMBER_CONSTANT - n2 ;
Distance : 4

47
Tree	final int n1n2prod = NUMBER_CONSTANT - n1 ;
Code	final int n1n2prod = NUMBER_CONSTANT - n1 ;
Distance : 4

48
Tree	final int n1 = NUMBER_CONSTANT - n2 ;
Code	final int n1 = NUMBER_CONSTANT - n2 ;
Distance : 4

49
Tree	final int n2 = NUMBER_CONSTANT - n1 ;
Code	final int n2 = NUMBER_CONSTANT - n1 ;
Distance : 5

========================================================================


========================================================================
Example Number: 75
Parent Code is: 
if ( y >= TWO_POWER_52  y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( y >= TWO_POWER_53  y <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=y}) (251{val=>=}) (800{val=TWO_POWER_52})) (250{val=||}) (27 (800{val=y}) (252{val=<=}) (38 (201{val=-}) (800{val=TWO_POWER_52})))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=pow}) (214{val=(}) (38 (201{val=-}) (800{val=x})) (234{val=,}) (800{val=y}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=y}) (251{val=>=}) (800{val=TWO_POWER_53})) (250{val=||}) (27 (800{val=y}) (252{val=<=}) (38 (201{val=-}) (800{val=TWO_POWER_53})))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=pow}) (214{val=(}) (38 (201{val=-}) (800{val=x})) (234{val=,}) (800{val=y}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/15/parent/src_main_java_org_apache_commons_math3_util_FastMath.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Distance : 4

1
Tree	if ( y >= NUMBER_CONSTANT y x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

2
Tree	if ( y.length != null y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y.length != null y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 5

3
Tree	if ( Integer.MAX_VALUE != null TWO_POWER_52 y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( Integer.MAX_VALUE != null TWO_POWER_52 y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 5

4
Tree	if ( v.length != null TWO_POWER_52 y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( v.length != null TWO_POWER_52 y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 5

5
Tree	if ( y > - x.length y TWO_POWER_52 < x.length ) { return pow ( - x , y ) ; }
Code	if ( y > - x.length y TWO_POWER_52 < x.length ) { return pow ( - x , y ) ; }
Distance : 6

6
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Distance : 4

7
Tree	if ( y > - y.length y TWO_POWER_52 < x.length ) { return pow ( - x , y ) ; }
Code	if ( y > - y.length y TWO_POWER_52 < x.length ) { return pow ( - x , y ) ; }
Distance : 6

8
Tree	if ( x.length != null y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( x.length != null y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 5

9
Tree	if ( y >= CHAR_CONS y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= CHAR_CONS y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

10
Tree	if ( y > - x.length y TWO_POWER_52 < y.length ) { return pow ( - x , y ) ; }
Code	if ( y > - x.length y TWO_POWER_52 < y.length ) { return pow ( - x , y ) ; }
Distance : 6

11
Tree	if ( y >= y y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= y y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

12
Tree	if ( y >= CHAR_CONS y y <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= CHAR_CONS y y <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 4

13
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

14
Tree	if ( y >= CHAR_CONS y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= CHAR_CONS y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

15
Tree	if ( y > - x.length y TWO_POWER_52 < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Code	if ( y > - x.length y TWO_POWER_52 < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Distance : 6

16
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

17
Tree	if ( y > - x.length y TWO_POWER_52 < Precision.SAFE_MIN ) { return pow ( - x , y ) ; }
Code	if ( y > - x.length y TWO_POWER_52 < Precision.SAFE_MIN ) { return pow ( - x , y ) ; }
Distance : 6

18
Tree	if ( y >= NUMBER_CONSTANT y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

19
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Distance : 4

20
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

21
Tree	if ( y >= y y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= y y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

22
Tree	if ( y >= TWO_POWER_52 y x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y x <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

23
Tree	if ( y >= NUMBER_CONSTANT y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

24
Tree	if ( x.length != null y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( x.length != null y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 5

25
Tree	if ( y >= x y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= x y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

26
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

27
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - y ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - y ) { return pow ( - x , y ) ; }
Distance : 3

28
Tree	if ( y >= CHAR_CONS y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= CHAR_CONS y y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

29
Tree	if ( y >= CHAR_CONS y y <= - y ) { return pow ( - x , y ) ; }
Code	if ( y >= CHAR_CONS y y <= - y ) { return pow ( - x , y ) ; }
Distance : 3

30
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

31
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

32
Tree	if ( y >= NUMBER_CONSTANT y y != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y y != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

33
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 5

34
Tree	if ( y > - TWO_POWER_52 y TWO_POWER_52 < x.length ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y TWO_POWER_52 < x.length ) { return pow ( - x , y ) ; }
Distance : 6

35
Tree	if ( y >= NUMBER_CONSTANT y y <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= NUMBER_CONSTANT y y <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 4

36
Tree	if ( y > - TWO_POWER_52 y TWO_POWER_52 < y.length ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y TWO_POWER_52 < y.length ) { return pow ( - x , y ) ; }
Distance : 6

37
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 5

38
Tree	if ( y >= NUMBER_CONSTANT y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y x <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

39
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 4

40
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , x ) ; }
Distance : 6

41
Tree	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= y y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

42
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 3

43
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

44
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - y ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - y ) { return pow ( - x , y ) ; }
Distance : 4

45
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - y ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - y ) { return pow ( - x , y ) ; }
Distance : 4

46
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - TWO_POWER_52 ) { return pow ( - x , y ) ; }
Distance : 4

47
Tree	if ( y > - TWO_POWER_52 y TWO_POWER_52 < MathUtils.TWO_PI ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y TWO_POWER_52 < MathUtils.TWO_PI ) { return pow ( - x , y ) ; }
Distance : 6

48
Tree	if ( y > - TWO_POWER_52 y TWO_POWER_52 < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y TWO_POWER_52 < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Distance : 6

49
Tree	if ( y > - TWO_POWER_52 - TWO_POWER_52 < Precision.SAFE_MIN ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 - TWO_POWER_52 < Precision.SAFE_MIN ) { return pow ( - x , y ) ; }
Distance : 7

========================================================================


========================================================================
Example Number: 76
Parent Code is: 
FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
-------------------------------------------------------------------------------
Child code is: 
FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - NUMBER_CONSTANT * dim ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (32 (800{val=FastMath}) (235{val=.}) (802{val=pow}) (214{val=(}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (40{val=FastMath.PI})) (234{val=,}) (27 (38 (201{val=-}) (800{val=dim})) (203{val=/}) (34{val=NUMBER_CONSTANT})) (215{val=)})) (202{val=*}) (32 (800{val=FastMath}) (235{val=.}) (802{val=pow}) (214{val=(}) (800{val=covarianceMatrixDeterminant}) (234{val=,}) (38 (201{val=-}) (34{val=NUMBER_CONSTANT})) (215{val=)})) (202{val=*}) (32 (802{val=getExponentTerm}) (214{val=(}) (800{val=vals}) (215{val=)}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (32 (800{val=FastMath}) (235{val=.}) (802{val=pow}) (214{val=(}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (40{val=FastMath.PI})) (234{val=,}) (27 (38 (201{val=-}) (34{val=NUMBER_CONSTANT})) (202{val=*}) (800{val=dim})) (215{val=)})) (202{val=*}) (32 (800{val=FastMath}) (235{val=.}) (802{val=pow}) (214{val=(}) (800{val=covarianceMatrixDeterminant}) (234{val=,}) (38 (201{val=-}) (34{val=NUMBER_CONSTANT})) (215{val=)})) (202{val=*}) (32 (802{val=getExponentTerm}) (214{val=(}) (800{val=vals}) (215{val=)}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/11/parent/src_main_java_org_apache_commons_math3_distribution_MultivariateNormalDistribution.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 20
Wrong
========================================================================
False

0
Tree	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( vals )
Code	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( vals )
Distance : 16

1
Tree	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( FastMath )
Code	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( FastMath )
Distance : 17

2
Tree	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( dim )
Code	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( dim )
Distance : 17

3
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - dim
Distance : 16

4
Tree	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( covarianceMatrixDeterminant )
Code	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( covarianceMatrixDeterminant )
Distance : 16

5
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 3

6
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * pow ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * pow ( vals )
Distance : 5

7
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( vals , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
Distance : 4

8
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * pow ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * pow ( vals )
Distance : 4

9
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( FastMath , - NUMBER_CONSTANT ) * pow ( vals )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( FastMath , - NUMBER_CONSTANT ) * pow ( vals )
Distance : 5

10
Tree	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . pow ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . pow ( vals ) - dim
Distance : 20

11
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( covarianceMatrixDeterminant ) - dim
Distance : 15

12
Tree	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . getExponentTerm ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( vals ) * pow ( vals ) . getExponentTerm ( vals ) - dim
Distance : 19

13
Tree	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( vals ) . pow ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( vals ) . pow ( vals ) - dim
Distance : 20

14
Tree	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( vals ) . pow ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( covarianceMatrixDeterminant ) * pow ( vals ) . pow ( vals ) - dim
Distance : 20

15
Tree	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( vals ) . getExponentTerm ( vals ) - dim
Code	FastMath / FastMath * FastMath . pow ( FastMath ) * pow ( vals ) . getExponentTerm ( vals ) - dim
Distance : 19

16
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - getExponentTerm
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - getExponentTerm
Distance : 15

17
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - dim
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( FastMath ) - dim
Distance : 16

18
Tree	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , FastMath ) * FastMath . pow ( vals )
Code	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , FastMath ) * FastMath . pow ( vals )
Distance : 17

19
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - FastMath
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( vals ) - FastMath
Distance : 16

========================================================================


========================================================================
Example Number: 77
Parent Code is: 
iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ;
-------------------------------------------------------------------------------
Child code is: 
iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (7 (800{val=iterations}) (204{val==}) (14 (304{val=new}) (43 (801{val=Incrementor})) (214{val=(}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (14 (304{val=new}) (43 (801{val=MaxIterCallback})) (216{val=()})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (7 (800{val=iterations}) (204{val==}) (14 (304{val=new}) (43 (801{val=Incrementor})) (214{val=(}) (40{val=Integer.MAX_VALUE}) (234{val=,}) (14 (304{val=new}) (43 (801{val=MaxIterCallback})) (216{val=()})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/6/parent/src_main_java_org_apache_commons_math3_optim_BaseOptimizer.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	iterations = new Incrementor ( false ) ;
Code	iterations = new Incrementor ( false ) ;
Distance : 5

1
Tree	iterations = new Incrementor ( true ) ;
Code	iterations = new Incrementor ( true ) ;
Distance : 5

2
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , else ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , else ) ;
Distance : 3

3
Tree	iterations = new Incrementor ( new Incrementor ( null ) , Integer.MAX_VALUE ) ;
Code	iterations = new Incrementor ( new Incrementor ( null ) , Integer.MAX_VALUE ) ;
Distance : 7

4
Tree	iterations = new Incrementor ( new Incrementor ( continue; ) , Integer.MAX_VALUE ) ;
Code	iterations = new Incrementor ( new Incrementor ( continue; ) , Integer.MAX_VALUE ) ;
Distance : 7

5
Tree	iterations = new Incrementor ( new Incrementor () , iterations ) ; T
Code	iterations = new Incrementor ( new Incrementor () , iterations ) ; T
Distance : 6

6
Tree	iterations = new Incrementor ( new Incrementor () , Integer.MAX_VALUE ) ; T
Code	iterations = new Incrementor ( new Incrementor () , Integer.MAX_VALUE ) ; T
Distance : 6

7
Tree	iterations = new Incrementor ( new Incrementor () ) ; T
Code	iterations = new Incrementor ( new Incrementor () ) ; T
Distance : 4

8
Tree	iterations = new Incrementor ( new Incrementor () ) ; void
Code	iterations = new Incrementor ( new Incrementor () ) ; void
Distance : 4

9
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , Es6RewriteModules.NAMESPACE_IMPORT_CANNOT_USE_STAR ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , Es6RewriteModules.NAMESPACE_IMPORT_CANNOT_USE_STAR ) ;
Distance : 3

10
Tree	iterations = new Incrementor ( false ) ; value
Code	iterations = new Incrementor ( false ) ; value
Distance : 6

11
Tree	iterations = new Incrementor ( new Incrementor () ) ; e
Code	iterations = new Incrementor ( new Incrementor () ) ; e
Distance : 4

12
Tree	iterations = new Incrementor < iterations > () ;
Code	iterations = new Incrementor < iterations > () ;
Distance : 6

13
Tree	iterations = new Incrementor < iterations > () ; e
Code	iterations = new Incrementor < iterations > () ; e
Distance : 7

14
Tree	iterations = new Incrementor ( new Incrementor () , iterations ) ; e
Code	iterations = new Incrementor ( new Incrementor () , iterations ) ; e
Distance : 6

15
Tree	iterations = new Incrementor ( new Incrementor () , iterations ) ; void
Code	iterations = new Incrementor ( new Incrementor () , iterations ) ; void
Distance : 6

16
Tree	iterations = new Incrementor ( false ) ; i
Code	iterations = new Incrementor ( false ) ; i
Distance : 6

17
Tree	iterations = new Incrementor ( new Incrementor () , Integer.MAX_VALUE ) ; void
Code	iterations = new Incrementor ( new Incrementor () , Integer.MAX_VALUE ) ; void
Distance : 6

18
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , NAME_DEFINED_LATE_WARNING ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , NAME_DEFINED_LATE_WARNING ) ;
Distance : 3

19
Tree	iterations = new Incrementor ( null , iterations , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( null , iterations , new MaxIterCallback () ) ;
Distance : 3

20
Tree	iterations = new Incrementor ( new Incrementor () , iterations ) ;
Code	iterations = new Incrementor ( new Incrementor () , iterations ) ;
Distance : 5

21
Tree	iterations = new Incrementor ( new Incrementor () , Integer.MAX_VALUE ) ;
Code	iterations = new Incrementor ( new Incrementor () , Integer.MAX_VALUE ) ;
Distance : 5

22
Tree	iterations = new Incrementor ( iterations , getTolerance () , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( iterations , getTolerance () , new MaxIterCallback () ) ;
Distance : 4

23
Tree	iterations = new Incrementor ( iterations , boundDifference () , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( iterations , boundDifference () , new MaxIterCallback () ) ;
Distance : 4

24
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , CHAR_CONS ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , CHAR_CONS ) ;
Distance : 3

25
Tree	iterations = new Incrementor ( iterations , BaseAbstractUnivariateIntegrator.DEFAULT_RELATIVE_ACCURACY () , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( iterations , BaseAbstractUnivariateIntegrator.DEFAULT_RELATIVE_ACCURACY () , new MaxIterCallback () ) ;
Distance : 4

26
Tree	iterations = new Incrementor ( iterations , LangVersion.TYPESCRIPT () , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( iterations , LangVersion.TYPESCRIPT () , new MaxIterCallback () ) ;
Distance : 4

27
Tree	iterations = new Incrementor ( continue; , iterations , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( continue; , iterations , new MaxIterCallback () ) ;
Distance : 3

28
Tree	iterations = new Incrementor ( return; , iterations , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( return; , iterations , new MaxIterCallback () ) ;
Distance : 3

29
Tree	iterations = new Incrementor ( new Incrementor ( super(); ) , Integer.MAX_VALUE ) ;
Code	iterations = new Incrementor ( new Incrementor ( super(); ) , Integer.MAX_VALUE ) ;
Distance : 7

30
Tree	iterations = new Incrementor ( new Incrementor ( return; ) , Integer.MAX_VALUE ) ;
Code	iterations = new Incrementor ( new Incrementor ( return; ) , Integer.MAX_VALUE ) ;
Distance : 7

31
Tree	iterations = new Incrementor ( new Incrementor ( return; ) ) ;
Code	iterations = new Incrementor ( new Incrementor ( return; ) ) ;
Distance : 5

32
Tree	iterations = new Incrementor ( new Incrementor ( break; ) ) ;
Code	iterations = new Incrementor ( new Incrementor ( break; ) ) ;
Distance : 5

33
Tree	iterations = new Incrementor ( new Incrementor ( continue; ) ) ;
Code	iterations = new Incrementor ( new Incrementor ( continue; ) ) ;
Distance : 5

34
Tree	iterations = new Incrementor ( iterations , getNodes () , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( iterations , getNodes () , new MaxIterCallback () ) ;
Distance : 4

35
Tree	iterations = new Incrementor ( super(); , iterations , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( super(); , iterations , new MaxIterCallback () ) ;
Distance : 3

36
Tree	iterations = new Incrementor ( new Incrementor () , iterations ) ; compiler
Code	iterations = new Incrementor ( new Incrementor () , iterations ) ; compiler
Distance : 6

37
Tree	iterations = new Incrementor ( new Incrementor () , Integer.MAX_VALUE ) ; e
Code	iterations = new Incrementor ( new Incrementor () , Integer.MAX_VALUE ) ; e
Distance : 6

38
Tree	iterations = new Incrementor ( break; , iterations , new MaxIterCallback () ) ;
Code	iterations = new Incrementor ( break; , iterations , new MaxIterCallback () ) ;
Distance : 3

39
Tree	iterations = new Incrementor < iterations > () ; T
Code	iterations = new Incrementor < iterations > () ; T
Distance : 7

40
Tree	iterations = new Incrementor < iterations > () ; compiler
Code	iterations = new Incrementor < iterations > () ; compiler
Distance : 7

41
Tree	iterations = new Incrementor < iterations > () ; void
Code	iterations = new Incrementor < iterations > () ; void
Distance : 7

42
Tree	iterations = new Incrementor ( new Incrementor () , Integer.MAX_VALUE ) ; compiler
Code	iterations = new Incrementor ( new Incrementor () , Integer.MAX_VALUE ) ; compiler
Distance : 6

43
Tree	iterations = new Incrementor ( new Incrementor ( super(); ) ) ;
Code	iterations = new Incrementor ( new Incrementor ( super(); ) ) ;
Distance : 5

44
Tree	iterations = new Incrementor ( iterations , new MaxIterCallback () , hex ) ;
Code	iterations = new Incrementor ( iterations , new MaxIterCallback () , hex ) ;
Distance : 3

45
Tree	iterations = new Incrementor ( new Incrementor ( break; ) , Integer.MAX_VALUE ) ;
Code	iterations = new Incrementor ( new Incrementor ( break; ) , Integer.MAX_VALUE ) ;
Distance : 7

46
Tree	iterations = new Incrementor ( false ) ; +
Code	iterations = new Incrementor ( false ) ; +
Distance : 6

47
Tree	iterations = new Incrementor ( new Incrementor () ) ; compiler
Code	iterations = new Incrementor ( new Incrementor () ) ; compiler
Distance : 4

48
Tree	iterations = new Incrementor ( new Incrementor () ) ;
Code	iterations = new Incrementor ( new Incrementor () ) ;
Distance : 3

49
Tree	iterations = new Incrementor ( new Incrementor ( null ) ) ;
Code	iterations = new Incrementor ( new Incrementor ( null ) ) ;
Distance : 5

========================================================================


========================================================================
Example Number: 78
Parent Code is: 
if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
-------------------------------------------------------------------------------
Child code is: 
if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=real}) (236{val===}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=imaginary}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=NaN}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=real}) (236{val===}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=imaginary}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=INF}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/5/parent/src_main_java_org_apache_commons_math3_complex_Complex.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	if ( real == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Distance : 3

1
Tree	if ( real == NUMBER_CONSTANT && imaginary <= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= imaginary ) { return NaN ; }
Distance : 3

2
Tree	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Distance : 3

3
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 1

4
Tree	if ( real == NUMBER_CONSTANT && imaginary == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

5
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary <= imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary <= imaginary ) { return NaN ; }
Distance : 4

6
Tree	if ( real == NUMBER_CONSTANT && imaginary < real == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < real == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

7
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 1

8
Tree	if ( real == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

9
Tree	if ( real == NUMBER_CONSTANT && real <= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real <= imaginary ) { return NaN ; }
Distance : 4

10
Tree	if ( real == NUMBER_CONSTANT && imaginary == real == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == real == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

11
Tree	if ( real == NUMBER_CONSTANT && real >= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real >= imaginary ) { return NaN ; }
Distance : 4

12
Tree	if ( real == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

13
Tree	if ( real . regionMatches ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . regionMatches ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

14
Tree	if ( real == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

15
Tree	if ( real == NUMBER_CONSTANT && real > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real > imaginary ) { return NaN ; }
Distance : 4

16
Tree	if ( real == NUMBER_CONSTANT && real == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

17
Tree	if ( NaN == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Distance : 4

18
Tree	if ( real == NUMBER_CONSTANT && imaginary < IncrementalCheckMode.GENERATE_IJS ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < IncrementalCheckMode.GENERATE_IJS ) { return NaN ; }
Distance : 3

19
Tree	if ( real == NUMBER_CONSTANT && real < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && real < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

20
Tree	if ( real == NUMBER_CONSTANT && children () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && children () == null ) { return NaN ; }
Distance : 4

21
Tree	if ( real == NUMBER_CONSTANT && this == real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && this == real ) { return NaN ; }
Distance : 3

22
Tree	if ( real . escapeJson ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . escapeJson ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

23
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Distance : 4

24
Tree	if ( real == NUMBER_CONSTANT && imaginary () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary () == null ) { return NaN ; }
Distance : 3

25
Tree	if ( real == NUMBER_CONSTANT && imaginary >= real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary >= real ) { return NaN ; }
Distance : 3

26
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

27
Tree	if ( real . copySelf ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . copySelf ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

28
Tree	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Distance : 3

29
Tree	if ( real == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Distance : 3

30
Tree	if ( real . getPrinter ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . getPrinter ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

31
Tree	if ( real == NUMBER_CONSTANT && imaginary >= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary >= imaginary ) { return NaN ; }
Distance : 3

32
Tree	if ( real == NUMBER_CONSTANT && imaginary <= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= imaginary ) { return NaN ; }
Distance : 3

33
Tree	if ( real == NUMBER_CONSTANT && getEnums () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && getEnums () == null ) { return NaN ; }
Distance : 4

34
Tree	if ( real == NUMBER_CONSTANT && imaginary >= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary >= imaginary ) { return NaN ; }
Distance : 3

35
Tree	if ( real == NUMBER_CONSTANT && imaginary < DisposalCheckingPolicy.OFF ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < DisposalCheckingPolicy.OFF ) { return NaN ; }
Distance : 3

36
Tree	if ( real == NUMBER_CONSTANT && imaginary < Long.MAX_VALUE ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < Long.MAX_VALUE ) { return NaN ; }
Distance : 3

37
Tree	if ( real == NUMBER_CONSTANT && imaginary < PropertyRenamingPolicy.ALL_UNQUOTED ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < PropertyRenamingPolicy.ALL_UNQUOTED ) { return NaN ; }
Distance : 3

38
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

39
Tree	if ( real == NUMBER_CONSTANT && imaginary <= real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= real ) { return NaN ; }
Distance : 3

40
Tree	if ( real == NUMBER_CONSTANT && requiredTypesBuilder () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && requiredTypesBuilder () == null ) { return NaN ; }
Distance : 4

41
Tree	if ( imaginary == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Distance : 4

42
Tree	if ( real == NUMBER_CONSTANT && imaginary > real ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > real ) { return NaN ; }
Distance : 3

43
Tree	if ( real == NUMBER_CONSTANT && estimationType () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && estimationType () == null ) { return NaN ; }
Distance : 4

44
Tree	if ( real == NUMBER_CONSTANT && imaginary < startConfiguration.length ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < startConfiguration.length ) { return NaN ; }
Distance : 3

45
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary >= imaginary ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary >= imaginary ) { return NaN ; }
Distance : 4

46
Tree	if ( imaginary == NUMBER_CONSTANT && imaginary == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( imaginary == NUMBER_CONSTANT && imaginary == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

47
Tree	if ( real . size ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . size ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

48
Tree	if ( real == NUMBER_CONSTANT && imaginary == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

49
Tree	if ( NaN == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( NaN == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

========================================================================


========================================================================
Example Number: 79
Parent Code is: 
new Reporter () . smartNullPointerException ( location ) ;
-------------------------------------------------------------------------------
Child code is: 
new Reporter () . smartNullPointerException ( obj , location ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (32 (14 (304{val=new}) (43 (801{val=Reporter})) (216{val=()})) (235{val=.}) (802{val=smartNullPointerException}) (214{val=(}) (800{val=location}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (32 (14 (304{val=new}) (43 (801{val=Reporter})) (216{val=()})) (235{val=.}) (802{val=smartNullPointerException}) (214{val=(}) (800{val=obj}) (234{val=,}) (800{val=location}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/30/parent/src_org_mockito_internal_stubbing_defaultanswers_ReturnsSmartNulls.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	smartNullPointerException ( location , location , location ) ;
Code	smartNullPointerException ( location , location , location ) ;
Distance : 7

1
Tree	location . smartNullPointerException ( location , new Reporter () ) ;
Code	location . smartNullPointerException ( location , new Reporter () ) ;
Distance : 7

2
Tree	obj . smartNullPointerException ( location ) ;
Code	obj . smartNullPointerException ( location ) ;
Distance : 5

3
Tree	obj . smartNullPointerException ( location , new Reporter ( location ) ) ;
Code	obj . smartNullPointerException ( location , new Reporter ( location ) ) ;
Distance : 8

4
Tree	obj . smartNullPointerException () . smartNullPointerException ( location ) ;
Code	obj . smartNullPointerException () . smartNullPointerException ( location ) ;
Distance : 5

5
Tree	location . smartNullPointerException ( obj , new Reporter () ) ;
Code	location . smartNullPointerException ( obj , new Reporter () ) ;
Distance : 6

6
Tree	new Reporter () . smartNullPointerException ( location ) ; i
Code	new Reporter () . smartNullPointerException ( location ) ; i
Distance : 3

7
Tree	new Reporter () . smartNullPointerException ( location ) ;
Code	new Reporter () . smartNullPointerException ( location ) ;
Distance : 2

8
Tree	smartNullPointerException ( location ) ; +
Code	smartNullPointerException ( location ) ; +
Distance : 7

9
Tree	smartNullPointerException ( location ) ; i
Code	smartNullPointerException ( location ) ; i
Distance : 7

10
Tree	smartNullPointerException ( location ) ; value
Code	smartNullPointerException ( location ) ; value
Distance : 7

11
Tree	new Reporter ( obj ) . smartNullPointerException ( obj ) ;
Code	new Reporter ( obj ) . smartNullPointerException ( obj ) ;
Distance : 5

12
Tree	new Reporter () . smartNullPointerException ( location ) . smartNullPointerException ( obj ) ;
Code	new Reporter () . smartNullPointerException ( location ) . smartNullPointerException ( obj ) ;
Distance : 6

13
Tree	new Reporter ( location ) . smartNullPointerException ( location ) ;
Code	new Reporter ( location ) . smartNullPointerException ( location ) ;
Distance : 5

14
Tree	obj . smartNullPointerException ( location , new Reporter () ) ;
Code	obj . smartNullPointerException ( location , new Reporter () ) ;
Distance : 7

15
Tree	location . smartNullPointerException ( location , new Reporter ( obj ) ) ;
Code	location . smartNullPointerException ( location , new Reporter ( obj ) ) ;
Distance : 9

16
Tree	obj . smartNullPointerException ( location , obj , new Reporter () ) ;
Code	obj . smartNullPointerException ( location , obj , new Reporter () ) ;
Distance : 8

17
Tree	obj . smartNullPointerException ( location , new Reporter ( obj ) ) ;
Code	obj . smartNullPointerException ( location , new Reporter ( obj ) ) ;
Distance : 9

18
Tree	new Reporter () . smartNullPointerException ( location ) ; value
Code	new Reporter () . smartNullPointerException ( location ) ; value
Distance : 3

19
Tree	new Reporter () . smartNullPointerException ( location ) . smartNullPointerException ( location ) ; !=
Code	new Reporter () . smartNullPointerException ( location ) . smartNullPointerException ( location ) ; !=
Distance : 6

20
Tree	obj . smartNullPointerException ( obj , new Reporter () ) ;
Code	obj . smartNullPointerException ( obj , new Reporter () ) ;
Distance : 6

21
Tree	location . smartNullPointerException ( obj ) ;
Code	location . smartNullPointerException ( obj ) ;
Distance : 5

22
Tree	obj . smartNullPointerException ( location , location , new Reporter () ) ;
Code	obj . smartNullPointerException ( location , location , new Reporter () ) ;
Distance : 8

23
Tree	smartNullPointerException ( location , obj , obj ) ;
Code	smartNullPointerException ( location , obj , obj ) ;
Distance : 7

24
Tree	new Reporter () . smartNullPointerException ( obj ) . smartNullPointerException ( obj ) ;
Code	new Reporter () . smartNullPointerException ( obj ) . smartNullPointerException ( obj ) ;
Distance : 5

25
Tree	location . smartNullPointerException ( obj , obj , new Reporter () ) ;
Code	location . smartNullPointerException ( obj , obj , new Reporter () ) ;
Distance : 8

26
Tree	smartNullPointerException ( obj , obj , obj ) ;
Code	smartNullPointerException ( obj , obj , obj ) ;
Distance : 7

27
Tree	new Reporter () . smartNullPointerException ( location ) ; +
Code	new Reporter () . smartNullPointerException ( location ) ; +
Distance : 3

28
Tree	new Reporter () . smartNullPointerException ( obj ) . smartNullPointerException ( location ) ;
Code	new Reporter () . smartNullPointerException ( obj ) . smartNullPointerException ( location ) ;
Distance : 4

29
Tree	smartNullPointerException ( obj ) ;
Code	smartNullPointerException ( obj ) ;
Distance : 6

30
Tree	location . smartNullPointerException ( location , obj , new Reporter () ) ;
Code	location . smartNullPointerException ( location , obj , new Reporter () ) ;
Distance : 8

31
Tree	location . smartNullPointerException ( location , location , new Reporter () ) ;
Code	location . smartNullPointerException ( location , location , new Reporter () ) ;
Distance : 8

32
Tree	new Reporter ( obj ) . smartNullPointerException ( location ) ;
Code	new Reporter ( obj ) . smartNullPointerException ( location ) ;
Distance : 5

33
Tree	new Reporter () . smartNullPointerException ( location ) . smartNullPointerException ( location ) ;
Code	new Reporter () . smartNullPointerException ( location ) . smartNullPointerException ( location ) ;
Distance : 5

34
Tree	smartNullPointerException ( location ) ;
Code	smartNullPointerException ( location ) ;
Distance : 6

35
Tree	location . smartNullPointerException ( location ) ;
Code	location . smartNullPointerException ( location ) ;
Distance : 5

36
Tree	location . smartNullPointerException ( location , new Reporter ( location ) ) ;
Code	location . smartNullPointerException ( location , new Reporter ( location ) ) ;
Distance : 8

37
Tree	location . smartNullPointerException ( obj , new Reporter ( location ) ) ;
Code	location . smartNullPointerException ( obj , new Reporter ( location ) ) ;
Distance : 7

38
Tree	smartNullPointerException ( location , location , obj ) ;
Code	smartNullPointerException ( location , location , obj ) ;
Distance : 7

39
Tree	location . smartNullPointerException () . smartNullPointerException ( obj ) ;
Code	location . smartNullPointerException () . smartNullPointerException ( obj ) ;
Distance : 5

40
Tree	obj . smartNullPointerException ( obj ) ;
Code	obj . smartNullPointerException ( obj ) ;
Distance : 5

41
Tree	smartNullPointerException ( location , obj , location ) ;
Code	smartNullPointerException ( location , obj , location ) ;
Distance : 6

42
Tree	obj . smartNullPointerException () . smartNullPointerException ( obj ) ;
Code	obj . smartNullPointerException () . smartNullPointerException ( obj ) ;
Distance : 5

43
Tree	location . smartNullPointerException ( location , new Reporter () ) ; !=
Code	location . smartNullPointerException ( location , new Reporter () ) ; !=
Distance : 8

44
Tree	location . smartNullPointerException () . smartNullPointerException ( location ) ; !=
Code	location . smartNullPointerException () . smartNullPointerException ( location ) ; !=
Distance : 6

45
Tree	new Reporter ( location ) . smartNullPointerException ( location ) ; !=
Code	new Reporter ( location ) . smartNullPointerException ( location ) ; !=
Distance : 6

46
Tree	new Reporter ( location ) . smartNullPointerException ( obj ) ;
Code	new Reporter ( location ) . smartNullPointerException ( obj ) ;
Distance : 5

47
Tree	new Reporter () . smartNullPointerException ( obj ) ;
Code	new Reporter () . smartNullPointerException ( obj ) ;
Distance : 2

48
Tree	location . smartNullPointerException () . smartNullPointerException ( location ) ;
Code	location . smartNullPointerException () . smartNullPointerException ( location ) ;
Distance : 5

49
Tree	location . smartNullPointerException ( location ) ; !=
Code	location . smartNullPointerException ( location ) ; !=
Distance : 6

========================================================================


========================================================================
Example Number: 80
Parent Code is: 
return getMock ( invocation ) ;
-------------------------------------------------------------------------------
Child code is: 
return getMock ( invocation , returnTypeGenericMetadata ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=getMock}) (214{val=(}) (800{val=invocation}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=getMock}) (214{val=(}) (800{val=invocation}) (234{val=,}) (800{val=returnTypeGenericMetadata}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/25/parent/src_org_mockito_internal_stubbing_defaultanswers_ReturnsDeepStubs.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ;
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ;
Distance : 6

1
Tree	return returnTypeGenericMetadata + NUMBER_CONSTANT ;
Code	return returnTypeGenericMetadata + NUMBER_CONSTANT ;
Distance : 6

2
Tree	return this . returnTypeGenericMetadata ;
Code	return this . returnTypeGenericMetadata ;
Distance : 5

3
Tree	return returnTypeGenericMetadata + getMock ( JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE , this . invocation ) ;
Code	return returnTypeGenericMetadata + getMock ( JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE , this . invocation ) ;
Distance : 6

4
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; !=
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ; !=
Distance : 9

5
Tree	return getMock ( invocation ) ;
Code	return getMock ( invocation ) ;
Distance : 2

6
Tree	return invocation + this . invocation . getMock ( CHAR_CONS , CHAR_CONS ) ;
Code	return invocation + this . invocation . getMock ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

7
Tree	return returnTypeGenericMetadata + NUMBER_CONSTANT ; value
Code	return returnTypeGenericMetadata + NUMBER_CONSTANT ; value
Distance : 7

8
Tree	return returnTypeGenericMetadata + NUMBER_CONSTANT ; i
Code	return returnTypeGenericMetadata + NUMBER_CONSTANT ; i
Distance : 7

9
Tree	return returnTypeGenericMetadata + NUMBER_CONSTANT ; +
Code	return returnTypeGenericMetadata + NUMBER_CONSTANT ; +
Distance : 7

10
Tree	return returnTypeGenericMetadata + invocation . getMock ( returnTypeGenericMetadata , NUMBER_CONSTANT , invocation . getMock () ) ;
Code	return returnTypeGenericMetadata + invocation . getMock ( returnTypeGenericMetadata , NUMBER_CONSTANT , invocation . getMock () ) ;
Distance : 11

11
Tree	return getMock ( invocation ) ; i
Code	return getMock ( invocation ) ; i
Distance : 3

12
Tree	return invocation . getMock ( returnTypeGenericMetadata ) ;
Code	return invocation . getMock ( returnTypeGenericMetadata ) ;
Distance : 4

13
Tree	return STRING_CONSTANT + returnTypeGenericMetadata + STRING_CONSTANT + returnTypeGenericMetadata ;
Code	return STRING_CONSTANT + returnTypeGenericMetadata + STRING_CONSTANT + returnTypeGenericMetadata ;
Distance : 7

14
Tree	return this . invocation ;
Code	return this . invocation ;
Distance : 5

15
Tree	return returnTypeGenericMetadata + getMock ( Locale.US , this . invocation ) ;
Code	return returnTypeGenericMetadata + getMock ( Locale.US , this . invocation ) ;
Distance : 6

16
Tree	return invocation + invocation . getMock ( invocation , NUMBER_CONSTANT , invocation . getMock () ) ;
Code	return invocation + invocation . getMock ( invocation , NUMBER_CONSTANT , invocation . getMock () ) ;
Distance : 10

17
Tree	return returnTypeGenericMetadata . getMock ( this , returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata . getMock ( this , returnTypeGenericMetadata ) ;
Distance : 3

18
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + returnTypeGenericMetadata ;
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + returnTypeGenericMetadata ;
Distance : 6

19
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; !=
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ; !=
Distance : 7

20
Tree	return returnTypeGenericMetadata + invocation . getMock ( invocation , NUMBER_CONSTANT , returnTypeGenericMetadata . getMock () ) ;
Code	return returnTypeGenericMetadata + invocation . getMock ( invocation , NUMBER_CONSTANT , returnTypeGenericMetadata . getMock () ) ;
Distance : 9

21
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ; !=
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ; !=
Distance : 5

22
Tree	return returnTypeGenericMetadata + getMock ( JavaVersion.JAVA_1_5 , this . invocation ) ;
Code	return returnTypeGenericMetadata + getMock ( JavaVersion.JAVA_1_5 , this . invocation ) ;
Distance : 6

23
Tree	return invocation + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ;
Code	return invocation + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

24
Tree	return returnTypeGenericMetadata != bindComponents.thisValue ;
Code	return returnTypeGenericMetadata != bindComponents.thisValue ;
Distance : 6

25
Tree	return invocation + NUMBER_CONSTANT ;
Code	return invocation + NUMBER_CONSTANT ;
Distance : 5

26
Tree	return this . returnTypeGenericMetadata ; value
Code	return this . returnTypeGenericMetadata ; value
Distance : 6

27
Tree	return getMock ( invocation ) ; value
Code	return getMock ( invocation ) ; value
Distance : 3

28
Tree	return returnTypeGenericMetadata + returnTypeGenericMetadata . getMock ( invocation , NUMBER_CONSTANT , invocation . getMock () ) ;
Code	return returnTypeGenericMetadata + returnTypeGenericMetadata . getMock ( invocation , NUMBER_CONSTANT , invocation . getMock () ) ;
Distance : 10

29
Tree	return this . returnTypeGenericMetadata ; +
Code	return this . returnTypeGenericMetadata ; +
Distance : 6

30
Tree	return returnTypeGenericMetadata . getMock ( returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata . getMock ( returnTypeGenericMetadata ) ;
Distance : 4

31
Tree	return returnTypeGenericMetadata + getMock ( bindComponents.thisValue , this . invocation ) ;
Code	return returnTypeGenericMetadata + getMock ( bindComponents.thisValue , this . invocation ) ;
Distance : 6

32
Tree	return returnTypeGenericMetadata != that.cache.functionScope ;
Code	return returnTypeGenericMetadata != that.cache.functionScope ;
Distance : 6

33
Tree	return STRING_CONSTANT + returnTypeGenericMetadata + STRING_CONSTANT + invocation ;
Code	return STRING_CONSTANT + returnTypeGenericMetadata + STRING_CONSTANT + invocation ;
Distance : 7

34
Tree	return returnTypeGenericMetadata != getSlot ;
Code	return returnTypeGenericMetadata != getSlot ;
Distance : 6

35
Tree	return returnTypeGenericMetadata != createsScope ;
Code	return returnTypeGenericMetadata != createsScope ;
Distance : 6

36
Tree	return returnTypeGenericMetadata . getMock ( invocation ) ; !=
Code	return returnTypeGenericMetadata . getMock ( invocation ) ; !=
Distance : 5

37
Tree	return returnTypeGenericMetadata != MockHandlerInterface ;
Code	return returnTypeGenericMetadata != MockHandlerInterface ;
Distance : 6

38
Tree	return returnTypeGenericMetadata . getMock ( this , invocation ) ;
Code	return returnTypeGenericMetadata . getMock ( this , invocation ) ;
Distance : 4

39
Tree	return returnTypeGenericMetadata . getMock ( invocation ) ;
Code	return returnTypeGenericMetadata . getMock ( invocation ) ;
Distance : 4

40
Tree	return returnTypeGenericMetadata + getMock ( TernaryValue.UNKNOWN , this . invocation ) ;
Code	return returnTypeGenericMetadata + getMock ( TernaryValue.UNKNOWN , this . invocation ) ;
Distance : 6

41
Tree	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ;
Code	return returnTypeGenericMetadata + this . returnTypeGenericMetadata . getMock ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

42
Tree	return invocation . getMock ( invocation ) ;
Code	return invocation . getMock ( invocation ) ;
Distance : 4

43
Tree	return getMock ( returnTypeGenericMetadata ) ;
Code	return getMock ( returnTypeGenericMetadata ) ;
Distance : 2

44
Tree	return returnTypeGenericMetadata + this . invocation . getMock ( CHAR_CONS , CHAR_CONS ) ;
Code	return returnTypeGenericMetadata + this . invocation . getMock ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

45
Tree	return invocation . getMock ( this , returnTypeGenericMetadata ) ;
Code	return invocation . getMock ( this , returnTypeGenericMetadata ) ;
Distance : 3

46
Tree	return invocation . getMock ( this , invocation ) ;
Code	return invocation . getMock ( this , invocation ) ;
Distance : 4

47
Tree	return this . returnTypeGenericMetadata ; i
Code	return this . returnTypeGenericMetadata ; i
Distance : 6

48
Tree	return getMock ( invocation ) ; +
Code	return getMock ( invocation ) ; +
Distance : 3

49
Tree	return returnTypeGenericMetadata + invocation . getMock ( invocation , NUMBER_CONSTANT , invocation . getMock () ) ;
Code	return returnTypeGenericMetadata + invocation . getMock ( invocation , NUMBER_CONSTANT , invocation . getMock () ) ;
Distance : 10

========================================================================


========================================================================
Example Number: 81
Parent Code is: 
return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
-------------------------------------------------------------------------------
Child code is: 
return mockSettings . serializable () . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=mockSettings}) (235{val=.}) (802{val=defaultAnswer}) (214{val=(}) (32 (802{val=returnsDeepStubsAnswerUsing}) (214{val=(}) (800{val=returnTypeGenericMetadata}) (215{val=)})) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (32 (800{val=mockSettings}) (235{val=.}) (802{val=serializable}) (216{val=()})) (235{val=.}) (802{val=defaultAnswer}) (214{val=(}) (32 (802{val=returnsDeepStubsAnswerUsing}) (214{val=(}) (800{val=returnTypeGenericMetadata}) (215{val=)})) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/23/parent/src_org_mockito_internal_stubbing_defaultanswers_ReturnsDeepStubs.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && &= ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && &= ;
Distance : 5

1
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && extends ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && extends ;
Distance : 5

2
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 5

3
Tree	return mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 4

4
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 3

5
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && anyList ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && anyList ;
Distance : 5

6
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && DateUtils.MILLIS_PER_DAY ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && DateUtils.MILLIS_PER_DAY ;
Distance : 5

7
Tree	return defaultAnswer ( mockSettings ) . defaultAnswer () ;
Code	return defaultAnswer ( mockSettings ) . defaultAnswer () ;
Distance : 10

8
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 7

9
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , mockSettings ) ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , mockSettings ) ;
Distance : 5

10
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( mockSettings ) , returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( mockSettings ) , returnTypeGenericMetadata ) ;
Distance : 6

11
Tree	return mockSettings . defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) ;
Distance : 4

12
Tree	return mockSettings . returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 4

13
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 5

14
Tree	return defaultAnswer ( serializable ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( serializable ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 8

15
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Distance : 6

16
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer () ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer () ;
Distance : 10

17
Tree	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 6

18
Tree	return mockSettings . defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) < returnTypeGenericMetadata ;
Code	return mockSettings . defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) < returnTypeGenericMetadata ;
Distance : 6

19
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . returnsDeepStubsAnswerUsing () ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . returnsDeepStubsAnswerUsing () ;
Distance : 10

20
Tree	return defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) ;
Distance : 6

21
Tree	return defaultAnswer ( mockSettings , returnTypeGenericMetadata ) && defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( mockSettings , returnTypeGenericMetadata ) && defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 9

22
Tree	return mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) < returnTypeGenericMetadata ;
Code	return mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) < returnTypeGenericMetadata ;
Distance : 6

23
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( mockSettings ) , returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( mockSettings ) , returnTypeGenericMetadata ) ;
Distance : 8

24
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ;
Distance : 8

25
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , mockSettings ) ;
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , mockSettings ) ;
Distance : 7

26
Tree	return returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Code	return returnsDeepStubsAnswerUsing ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
Distance : 6

27
Tree	return mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 6

28
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && <= ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) && <= ;
Distance : 5

29
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) < returnTypeGenericMetadata ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) < returnTypeGenericMetadata ;
Distance : 5

30
Tree	return returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) . defaultAnswer () ;
Code	return returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) . defaultAnswer () ;
Distance : 10

31
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 9

32
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( mockSettings ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . defaultAnswer ( mockSettings ) ;
Distance : 8

33
Tree	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && serializable ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && serializable ( returnTypeGenericMetadata ) ;
Distance : 9

34
Tree	return defaultAnswer ( mockSettings ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( mockSettings ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 7

35
Tree	return defaultAnswer ( mockSettings , returnTypeGenericMetadata ) && serializable ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( mockSettings , returnTypeGenericMetadata ) && serializable ( returnTypeGenericMetadata ) ;
Distance : 9

36
Tree	return mockSettings . defaultAnswer ( mockSettings ) ;
Code	return mockSettings . defaultAnswer ( mockSettings ) ;
Distance : 7

37
Tree	return defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 8

38
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) < mockSettings ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) < mockSettings ;
Distance : 5

39
Tree	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Code	return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( mockSettings ) ) ;
Distance : 4

40
Tree	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 7

41
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ;
Distance : 7

42
Tree	return defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( serializable ( returnTypeGenericMetadata ) ) ;
Distance : 6

43
Tree	return mockSettings . defaultAnswer ( serializable ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( serializable ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 6

44
Tree	return returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 7

45
Tree	return mockSettings . serializable ( returnTypeGenericMetadata ) ;
Code	return mockSettings . serializable ( returnTypeGenericMetadata ) ;
Distance : 6

46
Tree	return mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) < mockSettings ;
Code	return mockSettings . defaultAnswer ( defaultAnswer ( returnTypeGenericMetadata ) ) < mockSettings ;
Distance : 6

47
Tree	return defaultAnswer ( returnTypeGenericMetadata ) . serializable () ;
Code	return defaultAnswer ( returnTypeGenericMetadata ) . serializable () ;
Distance : 10

48
Tree	return mockSettings . returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ;
Code	return mockSettings . returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ;
Distance : 6

49
Tree	return returnTypeGenericMetadata . defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return returnTypeGenericMetadata . defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 7

========================================================================


========================================================================
Example Number: 82
Parent Code is: 
{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withParams ( cls , outerClassInstance ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (800{val=outerClassInstance}) (236{val===}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=noArgConstructor}) (214{val=(}) (800{val=cls}) (215{val=)})) (227{val=;})) (219{val=}}))) (41 (329{val=return}) (32 (802{val=withOuterClass}) (214{val=(}) (800{val=cls}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (800{val=outerClassInstance}) (236{val===}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=noArgConstructor}) (214{val=(}) (800{val=cls}) (215{val=)})) (227{val=;})) (219{val=}}))) (41 (329{val=return}) (32 (802{val=withParams}) (214{val=(}) (800{val=cls}) (234{val=,}) (800{val=outerClassInstance}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/21/parent/src_org_mockito_internal_creation_instance_ConstructorInstantiator.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	{ if ( outerClassInstance == null ) { return cls . noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return cls . noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 7

1
Tree	{ if ( cls == null ) { return this . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return this . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 6

2
Tree	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls , cls ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls , cls ) ; }
Distance : 5

3
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 4

4
Tree	{ if ( outerClassInstance == null ) { return cls . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return cls . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 5

5
Tree	{ if ( cls == null ) { return noArgConstructor () ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return noArgConstructor () ; } return withOuterClass ( cls ) ; }
Distance : 7

6
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor () ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor () ; } return withOuterClass ( cls ) ; }
Distance : 7

7
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) ; }
Distance : 6

8
Tree	{ if ( outerClassInstance == null ) { return this . noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return this . noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 6

9
Tree	{ if ( outerClassInstance == null ) { return this . noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return this . noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 5

10
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls . ( ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls . ( ( cls ) ) ; }
Distance : 7

11
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( outerClassInstance ) ; }
Distance : 4

12
Tree	{ if ( cls == null ) { return outerClassInstance . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return outerClassInstance . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 6

13
Tree	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) ; }
Distance : 6

14
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( java.util.Locale.US ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( java.util.Locale.US ) ; } return withOuterClass ( cls ) ; }
Distance : 6

15
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 3

16
Tree	{ if ( outerClassInstance == super(); ) { return this . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return this . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 6

17
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor () ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor () ; } return withOuterClass ( cls ) ; }
Distance : 6

18
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 6

19
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( DiagnosticGroups.MISSING_OVERRIDE ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( DiagnosticGroups.MISSING_OVERRIDE ) ; } return withOuterClass ( cls ) ; }
Distance : 6

20
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls ) ; }
Distance : 5

21
Tree	{ if ( outerClassInstance == super(); ) { return outerClassInstance . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return outerClassInstance . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 6

22
Tree	{ if ( outerClassInstance == return; ) { return noArgConstructor () ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == return; ) { return noArgConstructor () ; } return withOuterClass ( cls ) ; }
Distance : 7

23
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls , cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls , cls ) ; }
Distance : 5

24
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( outerClassInstance , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( outerClassInstance , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 7

25
Tree	{ if ( cls == null ) { return cls . noArgConstructor () ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return cls . noArgConstructor () ; } return withOuterClass ( cls ) ; }
Distance : 8

26
Tree	{ if ( outerClassInstance == super(); ) { return outerClassInstance . noArgConstructor () ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return outerClassInstance . noArgConstructor () ; } return withOuterClass ( cls ) ; }
Distance : 8

27
Tree	{ if ( outerClassInstance == null ) { return this . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return this . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 5

28
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( ComposableFunction.SQRT ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( ComposableFunction.SQRT ) ; } return withOuterClass ( cls ) ; }
Distance : 6

29
Tree	{ if ( outerClassInstance == null ) { return cls . noArgConstructor () ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return cls . noArgConstructor () ; } return withOuterClass ( cls ) ; }
Distance : 7

30
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 5

31
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor () ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor () ; } return withOuterClass ( cls ) ; }
Distance : 7

32
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 7

33
Tree	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 4

34
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return outerClassInstance . withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return outerClassInstance . withOuterClass ( cls ) ; }
Distance : 5

35
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls . ) ( outerClassInstance ) ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls . ) ( outerClassInstance ) ) ; }
Distance : 6

36
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor () ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor () ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 6

37
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( outerClassInstance ) ; }
Distance : 3

38
Tree	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls . ( ( cls ) ) ; }
Code	{ if ( cls == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls . ( ( cls ) ) ; }
Distance : 8

39
Tree	{ if ( cls == null ) { return outerClassInstance . noArgConstructor () ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return outerClassInstance . noArgConstructor () ; } return withOuterClass ( cls ) ; }
Distance : 8

40
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( Any.ANY ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( Any.ANY ) ; } return withOuterClass ( cls ) ; }
Distance : 6

41
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls . ( ( cls ) ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , cls . ( ( cls ) ) ; }
Distance : 8

42
Tree	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == super(); ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
Distance : 4

43
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls , outerClassInstance ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls , outerClassInstance ) ; }
Distance : 3

44
Tree	{ if ( cls == null ) { return outerClassInstance . noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( cls == null ) { return outerClassInstance . noArgConstructor ( cls , cls ) ; } return withOuterClass ( cls ) ; }
Distance : 8

45
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls , cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( cls , cls ) ; }
Distance : 4

46
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( ComposableFunction.TAN ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( ComposableFunction.TAN ) ; } return withOuterClass ( cls ) ; }
Distance : 6

47
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( outerClassInstance , cls ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return cls . withOuterClass ( outerClassInstance , cls ) ; }
Distance : 5

48
Tree	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( cls , outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return outerClassInstance . noArgConstructor ( cls , outerClassInstance ) ; } return withOuterClass ( cls ) ; }
Distance : 7

49
Tree	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , outerClassInstance . ) ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls , outerClassInstance . ) ( cls ) ) ; }
Distance : 6

========================================================================


========================================================================
Example Number: 83
Parent Code is: 
Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
-------------------------------------------------------------------------------
Child code is: 
Object injected = mockCandidateFilter . filterCandidate ( mocks , field , orderedInstanceFields , instance ) . thenInject () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Object})) (59 (800{val=injected}) (204{val==}) (32 (32 (800{val=mockCandidateFilter}) (235{val=.}) (802{val=filterCandidate}) (214{val=(}) (800{val=mocks}) (234{val=,}) (800{val=field}) (234{val=,}) (800{val=instance}) (215{val=)})) (235{val=.}) (802{val=thenInject}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Object})) (59 (800{val=injected}) (204{val==}) (32 (32 (800{val=mockCandidateFilter}) (235{val=.}) (802{val=filterCandidate}) (214{val=(}) (800{val=mocks}) (234{val=,}) (800{val=field}) (234{val=,}) (800{val=orderedInstanceFields}) (234{val=,}) (800{val=instance}) (215{val=)})) (235{val=.}) (802{val=thenInject}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/19/parent/src_org_mockito_internal_configuration_injection_PropertyAndSetterInjection.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	Object injected = injected . filterCandidate ( mocks , field , instance ) ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance ) ;
Distance : 6

1
Tree	Object injected = injected . filterCandidate ( mocks , field , field ) ;
Code	Object injected = injected . filterCandidate ( mocks , field , field ) ;
Distance : 7

2
Tree	Object injected = filterCandidate ( mocks , field , field ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , field , field ) . thenInject () ;
Distance : 5

3
Tree	Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 3

4
Tree	Object field = filterCandidate ( mocks , field ) . thenInject () ;
Code	Object field = filterCandidate ( mocks , field ) . thenInject () ;
Distance : 7

5
Tree	Object mocks = filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object mocks = filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 5

6
Tree	Object mocks = injected ( mocks , field ) . thenInject () ;
Code	Object mocks = injected ( mocks , field ) . thenInject () ;
Distance : 8

7
Tree	Object injected = injected ( mocks , field ) . thenInject () ;
Code	Object injected = injected ( mocks , field ) . thenInject () ;
Distance : 7

8
Tree	Object injected = this . filterCandidate () . filterCandidate () ;
Code	Object injected = this . filterCandidate () . filterCandidate () ;
Distance : 11

9
Tree	Object injected = filterCandidate ( mocks , field ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , field ) . thenInject () ;
Distance : 6

10
Tree	Object injected = filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 4

11
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) ;
Distance : 5

12
Tree	Object mocks = injected . filterCandidate ( mocks , field , instance ) ;
Code	Object mocks = injected . filterCandidate ( mocks , field , instance ) ;
Distance : 7

13
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 2

14
Tree	Object injected = injected . filterCandidate ( mocks , field ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field ) . thenInject () ;
Distance : 5

15
Tree	Object mocks = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object mocks = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 4

16
Tree	Object field = this . filterCandidate () . filterCandidate () ;
Code	Object field = this . filterCandidate () . filterCandidate () ;
Distance : 12

17
Tree	Object injected = injected ( mocks , field ) . thenInject () ;
Code	Object injected = injected ( mocks , field ) . thenInject () ;
Distance : 7

18
Tree	Object injected = injected . filterCandidate ( mocks , field , instance . instance () ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance . instance () ) . thenInject () ;
Distance : 4

19
Tree	Object mocks = filterCandidate ( mocks , field ) . thenInject () ;
Code	Object mocks = filterCandidate ( mocks , field ) . thenInject () ;
Distance : 7

20
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance . instance () ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance . instance () ) . thenInject () ;
Distance : 3

21
Tree	Object injected = filterCandidate ( mocks , field ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , field ) . thenInject () ;
Distance : 6

22
Tree	Object mocks = injected . filterCandidate ( mocks , field , instance . instance () ) . thenInject () ;
Code	Object mocks = injected . filterCandidate ( mocks , field , instance . instance () ) . thenInject () ;
Distance : 5

23
Tree	Object injected = mocks ( mocks , field ) . thenInject () ;
Code	Object injected = mocks ( mocks , field ) . thenInject () ;
Distance : 7

24
Tree	Object injected = injected . filterCandidate ( mocks , field , instance . instance () ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance . instance () ) . thenInject () ;
Distance : 4

25
Tree	Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 3

26
Tree	Object injected = filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 4

27
Tree	Object injected = injected . filterCandidate ( finderStub.actualToReturn , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( finderStub.actualToReturn , field , instance ) . thenInject () ;
Distance : 4

28
Tree	Object injected = injected . filterCandidate ( mocks , field , instance ) ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance ) ;
Distance : 6

29
Tree	Object injected = injected . filterCandidate ( mocks , field ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field ) . thenInject () ;
Distance : 5

30
Tree	Object injected = injected . filterCandidate ( sleep , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( sleep , field , instance ) . thenInject () ;
Distance : 4

31
Tree	Object injected = injected . filterCandidate ( mocks , field , field . instance () ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , field . instance () ) . thenInject () ;
Distance : 4

32
Tree	Object mocks = injected . filterCandidate ( NUMBER_CONSTANT , field , instance , instance ) . thenInject () ;
Code	Object mocks = injected . filterCandidate ( NUMBER_CONSTANT , field , instance , instance ) . thenInject () ;
Distance : 4

33
Tree	Object field = filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object field = filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 5

34
Tree	Object mocks = this . filterCandidate () . filterCandidate () ;
Code	Object mocks = this . filterCandidate () . filterCandidate () ;
Distance : 12

35
Tree	Object injected = injected . filterCandidate ( NUMBER_CONSTANT , field , instance , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( NUMBER_CONSTANT , field , instance , instance ) . thenInject () ;
Distance : 3

36
Tree	Object instance = filterCandidate ( mocks , field ) . thenInject () ;
Code	Object instance = filterCandidate ( mocks , field ) . thenInject () ;
Distance : 7

37
Tree	Object injected = injected . filterCandidate ( NUMBER_CONSTANT , field , instance , field ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( NUMBER_CONSTANT , field , instance , field ) . thenInject () ;
Distance : 4

38
Tree	Object injected = mockCandidateFilter . filterCandidate ( mocks , field ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( mocks , field ) . thenInject () ;
Distance : 4

39
Tree	Object injected = injected . filterCandidate ( NUMBER_CONSTANT , field , instance , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( NUMBER_CONSTANT , field , instance , instance ) . thenInject () ;
Distance : 3

40
Tree	Object injected = mockCandidateFilter . filterCandidate ( NUMBER_CONSTANT , field , instance , instance ) . thenInject () ;
Code	Object injected = mockCandidateFilter . filterCandidate ( NUMBER_CONSTANT , field , instance , instance ) . thenInject () ;
Distance : 2

41
Tree	Object injected = this . filterCandidate () . filterCandidate () ;
Code	Object injected = this . filterCandidate () . filterCandidate () ;
Distance : 11

42
Tree	Object injected = mockCandidateFilter ( mocks , field ) . thenInject () ;
Code	Object injected = mockCandidateFilter ( mocks , field ) . thenInject () ;
Distance : 6

43
Tree	Object injected = injected . filterCandidate ( mocks , field , field ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , field ) . thenInject () ;
Distance : 4

44
Tree	Object instance = this . filterCandidate () . filterCandidate () ;
Code	Object instance = this . filterCandidate () . filterCandidate () ;
Distance : 12

45
Tree	Object injected = injected . filterCandidate ( LanguageMode.ECMASCRIPT8 , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( LanguageMode.ECMASCRIPT8 , field , instance ) . thenInject () ;
Distance : 4

46
Tree	Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( mocks , field , instance ) . thenInject () ;
Distance : 3

47
Tree	Object injected = mocks . filterCandidate ( mocks , field ) . thenInject () ;
Code	Object injected = mocks . filterCandidate ( mocks , field ) . thenInject () ;
Distance : 5

48
Tree	Object mocks = injected . filterCandidate ( mocks , field ) . thenInject () ;
Code	Object mocks = injected . filterCandidate ( mocks , field ) . thenInject () ;
Distance : 6

49
Tree	Object injected = injected . filterCandidate ( BASE_DATE , field , instance ) . thenInject () ;
Code	Object injected = injected . filterCandidate ( BASE_DATE , field , instance ) . thenInject () ;
Distance : 4

========================================================================


========================================================================
Example Number: 84
Parent Code is: 
{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return MOCKITO_CORE . mock ( classToMock , mockSettings , true ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (800{val=MOCKITO_CORE}) (235{val=.}) (802{val=mock}) (214{val=(}) (800{val=classToMock}) (234{val=,}) (800{val=mockSettings}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (800{val=MOCKITO_CORE}) (235{val=.}) (802{val=mock}) (214{val=(}) (800{val=classToMock}) (234{val=,}) (800{val=mockSettings}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/16/parent/src_org_mockito_Mockito.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; }
Distance : 2

1
Tree	{ return mock ( classToMock , mockSettings ) ; }
Code	{ return mock ( classToMock , mockSettings ) ; }
Distance : 4

2
Tree	{ return MOCKITO_CORE . mock ( classToMock ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock ) ; }
Distance : 4

3
Tree	{ return mock . mock ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return mock . mock ( classToMock , mockSettings , mockSettings ) ; }
Distance : 2

4
Tree	{ return mock . mock ( classToMock , mockSettings ) ; }
Code	{ return mock . mock ( classToMock , mockSettings ) ; }
Distance : 3

5
Tree	{ return MOCKITO_CORE . mock ( classToMock , classToMock ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , classToMock ) ; }
Distance : 3

6
Tree	{ return mock () . mock ( mockSettings , mockSettings ) ; }
Code	{ return mock () . mock ( mockSettings , mockSettings ) ; }
Distance : 5

7
Tree	{ return org.joda.time.gwt.util.Arrays . mock ( classToMock , mockSettings ) ; }
Code	{ return org.joda.time.gwt.util.Arrays . mock ( classToMock , mockSettings ) ; }
Distance : 3

8
Tree	{ return mock ( mockSettings , null , mockSettings ) ; }
Code	{ return mock ( mockSettings , null , mockSettings ) ; }
Distance : 5

9
Tree	{ return mock ( classToMock , MOCKITO_CORE ) ; }
Code	{ return mock ( classToMock , MOCKITO_CORE ) ; }
Distance : 5

10
Tree	{ return stubber . mock ( classToMock , mockSettings ) ; }
Code	{ return stubber . mock ( classToMock , mockSettings ) ; }
Distance : 3

11
Tree	{ return org.joda.time.gwt.util.Arrays . mock ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return org.joda.time.gwt.util.Arrays . mock ( classToMock , mockSettings , mockSettings ) ; }
Distance : 2

12
Tree	{ return classToMock . mock ( classToMock , mockSettings ) ; }
Code	{ return classToMock . mock ( classToMock , mockSettings ) ; }
Distance : 3

13
Tree	{ return classToMock . mock ( classToMock ) ; }
Code	{ return classToMock . mock ( classToMock ) ; }
Distance : 5

14
Tree	{ return stubber . mock ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return stubber . mock ( classToMock , mockSettings , mockSettings ) ; }
Distance : 2

15
Tree	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , mockSettings ) ; }
Distance : 3

16
Tree	{ return MOCKITO_CORE . mock ( mockSettings , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( mockSettings , mockSettings ) ; }
Distance : 3

17
Tree	{ return mock ( classToMock . mock ( classToMock ) , mockSettings ) ; }
Code	{ return mock ( classToMock . mock ( classToMock ) , mockSettings ) ; }
Distance : 6

18
Tree	{ return MOCKITO_CORE . mock () . mock ( classToMock , classToMock ) ; }
Code	{ return MOCKITO_CORE . mock () . mock ( classToMock , classToMock ) ; }
Distance : 6

19
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; }
Distance : 2

20
Tree	{ return mockSettings . mock ( classToMock ) ; }
Code	{ return mockSettings . mock ( classToMock ) ; }
Distance : 5

21
Tree	{ return MOCKITO_CORE . mock ( MOCKITO_CORE ) ; }
Code	{ return MOCKITO_CORE . mock ( MOCKITO_CORE ) ; }
Distance : 5

22
Tree	{ return mock ( classToMock , null , classToMock ) ; }
Code	{ return mock ( classToMock , null , classToMock ) ; }
Distance : 4

23
Tree	{ return mock ( classToMock , null , MOCKITO_CORE ) ; }
Code	{ return mock ( classToMock , null , MOCKITO_CORE ) ; }
Distance : 4

24
Tree	{ return mock ( mockSettings , mockSettings ) ; }
Code	{ return mock ( mockSettings , mockSettings ) ; }
Distance : 5

25
Tree	{ return MOCKITO_CORE . mock () . mock ( mockSettings , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock () . mock ( mockSettings , mockSettings ) ; }
Distance : 5

26
Tree	{ return mock () . mock ( MOCKITO_CORE , mockSettings ) ; }
Code	{ return mock () . mock ( MOCKITO_CORE , mockSettings ) ; }
Distance : 5

27
Tree	{ return classToMock . mock ( classToMock , null , mockSettings ) ; }
Code	{ return classToMock . mock ( classToMock , null , mockSettings ) ; }
Distance : 3

28
Tree	{ return mock ( classToMock . mock ( mockSettings ) , mockSettings ) ; }
Code	{ return mock ( classToMock . mock ( mockSettings ) , mockSettings ) ; }
Distance : 7

29
Tree	{ return mock ( classToMock . mock ( MOCKITO_CORE ) , mockSettings ) ; }
Code	{ return mock ( classToMock . mock ( MOCKITO_CORE ) , mockSettings ) ; }
Distance : 7

30
Tree	{ return classToMock . mock () . mock ( classToMock , mockSettings ) ; }
Code	{ return classToMock . mock () . mock ( classToMock , mockSettings ) ; }
Distance : 6

31
Tree	{ return mock () . mock ( classToMock , mockSettings ) ; }
Code	{ return mock () . mock ( classToMock , mockSettings ) ; }
Distance : 4

32
Tree	{ return mock ( MOCKITO_CORE . mock ( classToMock ) , mockSettings ) ; }
Code	{ return mock ( MOCKITO_CORE . mock ( classToMock ) , mockSettings ) ; }
Distance : 5

33
Tree	{ return MOCKITO_CORE . mock ( classToMock , null , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , null , mockSettings ) ; }
Distance : 2

34
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , mockSettings ) ; }
Distance : 1

35
Tree	{ return MOCKITO_CORE . mock () . mock ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock () . mock ( classToMock , mockSettings ) ; }
Distance : 5

36
Tree	{ return mock ( classToMock , null , mockSettings ) ; }
Code	{ return mock ( classToMock , null , mockSettings ) ; }
Distance : 4

37
Tree	{ return mock ( MOCKITO_CORE , null , mockSettings ) ; }
Code	{ return mock ( MOCKITO_CORE , null , mockSettings ) ; }
Distance : 5

38
Tree	{ return MOCKITO_CORE . mock ( mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( mockSettings ) ; }
Distance : 4

39
Tree	{ return com.google.protobuf.GeneratedMessageV3 . mock ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return com.google.protobuf.GeneratedMessageV3 . mock ( classToMock , mockSettings , mockSettings ) ; }
Distance : 2

40
Tree	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , null , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( MOCKITO_CORE , null , mockSettings ) ; }
Distance : 3

41
Tree	{ return com.google.protobuf.GeneratedMessageV3 . mock ( classToMock , mockSettings ) ; }
Code	{ return com.google.protobuf.GeneratedMessageV3 . mock ( classToMock , mockSettings ) ; }
Distance : 3

42
Tree	{ return mock ( classToMock , classToMock ) ; }
Code	{ return mock ( classToMock , classToMock ) ; }
Distance : 5

43
Tree	{ return mock () . mock ( classToMock , classToMock ) ; }
Code	{ return mock () . mock ( classToMock , classToMock ) ; }
Distance : 5

44
Tree	{ return mock ( MOCKITO_CORE , mockSettings ) ; }
Code	{ return mock ( MOCKITO_CORE , mockSettings ) ; }
Distance : 5

45
Tree	{ return MOCKITO_CORE . mock () . mock ( MOCKITO_CORE , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock () . mock ( MOCKITO_CORE , mockSettings ) ; }
Distance : 6

46
Tree	{ return MOCKITO_CORE . mock ( classToMock , null , classToMock ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , null , classToMock ) ; }
Distance : 2

47
Tree	{ return MOCKITO_CORE . mock ( mockSettings , null , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( mockSettings , null , mockSettings ) ; }
Distance : 3

48
Tree	{ return mock () . mock ( classToMock , MOCKITO_CORE ) ; }
Code	{ return mock () . mock ( classToMock , MOCKITO_CORE ) ; }
Distance : 5

49
Tree	{ return mock ( mockSettings . mock ( classToMock ) , mockSettings ) ; }
Code	{ return mock ( mockSettings . mock ( classToMock ) , mockSettings ) ; }
Distance : 6

========================================================================


========================================================================
Example Number: 85
Parent Code is: 
mockingProgress . verificationStarted ( mode ) ;
-------------------------------------------------------------------------------
Child code is: 
mockingProgress . verificationStarted ( new MockAwareVerificationMode ( mock , mode ) ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (32 (800{val=mockingProgress}) (235{val=.}) (802{val=verificationStarted}) (214{val=(}) (800{val=mode}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (32 (800{val=mockingProgress}) (235{val=.}) (802{val=verificationStarted}) (214{val=(}) (14 (304{val=new}) (43 (801{val=MockAwareVerificationMode})) (214{val=(}) (800{val=mock}) (234{val=,}) (800{val=mode}) (215{val=)})) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/14/parent/src_org_mockito_internal_MockitoCore.java
-------------------------------------------------------------------------------
Edit Distance : 6
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	mockingProgress . verificationStarted () ;
Code	mockingProgress . verificationStarted () ;
Distance : 9

1
Tree	new mockingProgress () . verificationStarted ( mode ) ;
Code	new mockingProgress () . verificationStarted ( mode ) ;
Distance : 8

2
Tree	mock . verificationStarted ( mode , mockingProgress . verificationStarted () ) ;
Code	mock . verificationStarted ( mode , mockingProgress . verificationStarted () ) ;
Distance : 8

3
Tree	mockingProgress . verificationStarted ( mockingProgress , mockingProgress . verificationStarted () ) ;
Code	mockingProgress . verificationStarted ( mockingProgress , mockingProgress . verificationStarted () ) ;
Distance : 7

4
Tree	new mockingProgress () . verificationStarted ( mockingProgress ) ;
Code	new mockingProgress () . verificationStarted ( mockingProgress ) ;
Distance : 9

5
Tree	mode . verificationStarted () ;
Code	mode . verificationStarted () ;
Distance : 10

6
Tree	verificationStarted ( mock , mockingProgress ) ;
Code	verificationStarted ( mock , mockingProgress ) ;
Distance : 7

7
Tree	new mockingProgress () . verificationStarted ( mock ) ;
Code	new mockingProgress () . verificationStarted ( mock ) ;
Distance : 8

8
Tree	mockingProgress . verificationStarted ( mockingProgress , false ) ;
Code	mockingProgress . verificationStarted ( mockingProgress , false ) ;
Distance : 6

9
Tree	mode . verificationStarted ( mode , false ) ;
Code	mode . verificationStarted ( mode , false ) ;
Distance : 7

10
Tree	mock . verificationStarted ( mode , mockingProgress ) ;
Code	mock . verificationStarted ( mode , mockingProgress ) ;
Distance : 7

11
Tree	mockingProgress . verificationStarted ( mode , mode ) ;
Code	mockingProgress . verificationStarted ( mode , mode ) ;
Distance : 5

12
Tree	mockingProgress . verificationStarted ( mode , true ) ;
Code	mockingProgress . verificationStarted ( mode , true ) ;
Distance : 6

13
Tree	this . mode = mockingProgress ;
Code	this . mode = mockingProgress ;
Distance : 10

14
Tree	verificationStarted ( mode , mode ) ;
Code	verificationStarted ( mode , mode ) ;
Distance : 7

15
Tree	this . mockingProgress = mode ;
Code	this . mockingProgress = mode ;
Distance : 10

16
Tree	mockingProgress . verificationStarted ( mode , mockingProgress . verificationStarted () ) ;
Code	mockingProgress . verificationStarted ( mode , mockingProgress . verificationStarted () ) ;
Distance : 7

17
Tree	mock . verificationStarted ( mode ) ;
Code	mock . verificationStarted ( mode ) ;
Distance : 7

18
Tree	mockingProgress . verificationStarted ( mock ) ;
Code	mockingProgress . verificationStarted ( mock ) ;
Distance : 6

19
Tree	this . mock = mockingProgress ;
Code	this . mock = mockingProgress ;
Distance : 10

20
Tree	verificationStarted ( mode , mock ) ;
Code	verificationStarted ( mode , mock ) ;
Distance : 8

21
Tree	mockingProgress . verificationStarted ( mockingProgress ) ;
Code	mockingProgress . verificationStarted ( mockingProgress ) ;
Distance : 7

22
Tree	new mock () . verificationStarted ( mode ) ;
Code	new mock () . verificationStarted ( mode ) ;
Distance : 9

23
Tree	mock . verificationStarted ( mode , false ) ;
Code	mock . verificationStarted ( mode , false ) ;
Distance : 7

24
Tree	new mode () . verificationStarted ( mode ) ;
Code	new mode () . verificationStarted ( mode ) ;
Distance : 9

25
Tree	mock . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ;
Code	mock . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ;
Distance : 5

26
Tree	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ;
Code	mockingProgress . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ;
Distance : 4

27
Tree	this . mode = mode ;
Code	this . mode = mode ;
Distance : 10

28
Tree	mockingProgress . verificationStarted ( mode ) ;
Code	mockingProgress . verificationStarted ( mode ) ;
Distance : 6

29
Tree	mockingProgress . verificationStarted ( mock , new MockAwareVerificationMode ( mode ) ) ;
Code	mockingProgress . verificationStarted ( mock , new MockAwareVerificationMode ( mode ) ) ;
Distance : 4

30
Tree	mockingProgress . verificationStarted ( mockingProgress , new MockAwareVerificationMode ( mode ) ) ;
Code	mockingProgress . verificationStarted ( mockingProgress , new MockAwareVerificationMode ( mode ) ) ;
Distance : 4

31
Tree	verificationStarted ( mode ) ; null
Code	verificationStarted ( mode ) ; null
Distance : 9

32
Tree	verificationStarted ( mode ) ; i
Code	verificationStarted ( mode ) ; i
Distance : 9

33
Tree	mockingProgress . verificationStarted () ; i
Code	mockingProgress . verificationStarted () ; i
Distance : 10

34
Tree	verificationStarted ( mode ) ;
Code	verificationStarted ( mode ) ;
Distance : 8

35
Tree	mock . verificationStarted () ;
Code	mock . verificationStarted () ;
Distance : 10

36
Tree	mockingProgress . verificationStarted ( mode , false ) ;
Code	mockingProgress . verificationStarted ( mode , false ) ;
Distance : 6

37
Tree	mockingProgress . verificationStarted ( mode , mock . verificationStarted () ) ;
Code	mockingProgress . verificationStarted ( mode , mock . verificationStarted () ) ;
Distance : 6

38
Tree	mockingProgress . verificationStarted ( mode , mock ) ;
Code	mockingProgress . verificationStarted ( mode , mock ) ;
Distance : 6

39
Tree	mode . verificationStarted ( mode ) ;
Code	mode . verificationStarted ( mode ) ;
Distance : 7

40
Tree	verificationStarted ( mode , mockingProgress ) ;
Code	verificationStarted ( mode , mockingProgress ) ;
Distance : 8

41
Tree	mockingProgress . verificationStarted ( mockingProgress , mockingProgress ) ;
Code	mockingProgress . verificationStarted ( mockingProgress , mockingProgress ) ;
Distance : 6

42
Tree	mockingProgress . verificationStarted ( mode , mockingProgress ) ;
Code	mockingProgress . verificationStarted ( mode , mockingProgress ) ;
Distance : 6

43
Tree	mockingProgress . verificationStarted ( mode , mode . verificationStarted () ) ;
Code	mockingProgress . verificationStarted ( mode , mode . verificationStarted () ) ;
Distance : 7

44
Tree	this . mockingProgress = mockingProgress ;
Code	this . mockingProgress = mockingProgress ;
Distance : 11

45
Tree	verificationStarted ( mockingProgress ) ;
Code	verificationStarted ( mockingProgress ) ;
Distance : 9

46
Tree	verificationStarted ( mockingProgress , mockingProgress ) ;
Code	verificationStarted ( mockingProgress , mockingProgress ) ;
Distance : 8

47
Tree	verificationStarted ( mock ) ;
Code	verificationStarted ( mock ) ;
Distance : 8

48
Tree	mode . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ;
Code	mode . verificationStarted ( mode , new MockAwareVerificationMode ( mode ) ) ;
Distance : 5

49
Tree	mockingProgress . verificationStarted () ; null
Code	mockingProgress . verificationStarted () ; null
Distance : 10

========================================================================


========================================================================
Example Number: 86
Parent Code is: 
return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
-------------------------------------------------------------------------------
Child code is: 
return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata , invocation . getMock () ) , container ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=recordDeepStubAnswer}) (214{val=(}) (32 (802{val=newDeepStubMock}) (214{val=(}) (800{val=returnTypeGenericMetadata}) (215{val=)})) (234{val=,}) (800{val=container}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=recordDeepStubAnswer}) (214{val=(}) (32 (802{val=newDeepStubMock}) (214{val=(}) (800{val=returnTypeGenericMetadata}) (234{val=,}) (32 (800{val=invocation}) (235{val=.}) (802{val=getMock}) (216{val=()})) (215{val=)})) (234{val=,}) (800{val=container}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/10/parent/src_org_mockito_internal_stubbing_defaultanswers_ReturnsDeepStubs.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	return container . recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () , container ) < container ;
Code	return container . recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () , container ) < container ;
Distance : 8

1
Tree	return container . recordDeepStubAnswer ( returnTypeGenericMetadata , container + getMock ( returnTypeGenericMetadata ) ) ;
Code	return container . recordDeepStubAnswer ( returnTypeGenericMetadata , container + getMock ( returnTypeGenericMetadata ) ) ;
Distance : 9

2
Tree	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Code	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 9

3
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 9

4
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () , container ) < container ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () , container ) < container ;
Distance : 8

5
Tree	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) < container ;
Code	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) < container ;
Distance : 9

6
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata , container + getMock ( returnTypeGenericMetadata ) ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( returnTypeGenericMetadata , container + getMock ( returnTypeGenericMetadata ) ) ;
Distance : 9

7
Tree	return invocation . recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () , container ) < container ;
Code	return invocation . recordDeepStubAnswer ( returnTypeGenericMetadata . getMock () , container ) < container ;
Distance : 8

8
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) < container ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) < container ;
Distance : 9

9
Tree	return invocation . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Code	return invocation . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 9

10
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata , container ) && getMock ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata , container ) && getMock ( returnTypeGenericMetadata ) ;
Distance : 9

11
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata ) < returnTypeGenericMetadata ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata ) < returnTypeGenericMetadata ;
Distance : 10

12
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata ) . getMock ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata ) . getMock ( returnTypeGenericMetadata ) ;
Distance : 8

13
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) < container ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) < container ;
Distance : 8

14
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata , container ) && container ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata , container ) && container ( returnTypeGenericMetadata ) ;
Distance : 9

15
Tree	return recordDeepStubAnswer ( container ) < container ;
Code	return recordDeepStubAnswer ( container ) < container ;
Distance : 10

16
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 7

17
Tree	return recordDeepStubAnswer ( container , container ) < container ;
Code	return recordDeepStubAnswer ( container , container ) < container ;
Distance : 9

18
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata ) . container ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata ) . container ( returnTypeGenericMetadata ) ;
Distance : 9

19
Tree	return recordDeepStubAnswer ( invocation ) < container ;
Code	return recordDeepStubAnswer ( invocation ) < container ;
Distance : 9

20
Tree	return invocation . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) < container ;
Code	return invocation . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) ) < container ;
Distance : 9

21
Tree	return container . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Code	return container . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 10

22
Tree	return returnTypeGenericMetadata . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Code	return returnTypeGenericMetadata . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 10

23
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata ) < container ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata ) < container ;
Distance : 9

24
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata , container ) < container ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata , container ) < container ;
Distance : 8

25
Tree	return container . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) ) < container ;
Code	return container . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) ) < container ;
Distance : 10

26
Tree	return returnTypeGenericMetadata . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) ) < container ;
Code	return returnTypeGenericMetadata . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) ) < container ;
Distance : 10

27
Tree	return getMock ( returnTypeGenericMetadata , container ) && getMock ( returnTypeGenericMetadata ) ;
Code	return getMock ( returnTypeGenericMetadata , container ) && getMock ( returnTypeGenericMetadata ) ;
Distance : 10

28
Tree	return getMock ( returnTypeGenericMetadata ) . getMock ( returnTypeGenericMetadata ) ;
Code	return getMock ( returnTypeGenericMetadata ) . getMock ( returnTypeGenericMetadata ) ;
Distance : 9

29
Tree	return getMock ( returnTypeGenericMetadata ) < container ;
Code	return getMock ( returnTypeGenericMetadata ) < container ;
Distance : 10

30
Tree	return getMock ( returnTypeGenericMetadata , container ) < container ;
Code	return getMock ( returnTypeGenericMetadata , container ) < container ;
Distance : 9

31
Tree	return getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Code	return getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 8

32
Tree	return getMock ( returnTypeGenericMetadata ) . container ( returnTypeGenericMetadata ) ;
Code	return getMock ( returnTypeGenericMetadata ) . container ( returnTypeGenericMetadata ) ;
Distance : 10

33
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && getMock ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) && getMock ( returnTypeGenericMetadata ) ;
Distance : 9

34
Tree	return recordDeepStubAnswer ( container ) . getMock ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubAnswer ( container ) . getMock ( returnTypeGenericMetadata ) ;
Distance : 9

35
Tree	return getMock ( returnTypeGenericMetadata , container ) && container ( returnTypeGenericMetadata ) ;
Code	return getMock ( returnTypeGenericMetadata , container ) && container ( returnTypeGenericMetadata ) ;
Distance : 10

36
Tree	return recordDeepStubAnswer ( returnTypeGenericMetadata , container ) < returnTypeGenericMetadata ;
Code	return recordDeepStubAnswer ( returnTypeGenericMetadata , container ) < returnTypeGenericMetadata ;
Distance : 9

37
Tree	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return container . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 7

38
Tree	return recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , container ) < container ;
Code	return recordDeepStubAnswer ( getMock ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 8

39
Tree	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return returnTypeGenericMetadata . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 7

40
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < returnTypeGenericMetadata ;
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) < returnTypeGenericMetadata ;
Distance : 7

41
Tree	return invocation . recordDeepStubAnswer ( returnTypeGenericMetadata , container + getMock ( returnTypeGenericMetadata ) ) ;
Code	return invocation . recordDeepStubAnswer ( returnTypeGenericMetadata , container + getMock ( returnTypeGenericMetadata ) ) ;
Distance : 9

42
Tree	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) < container ;
Code	return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) < container ;
Distance : 7

43
Tree	return container . getMock ( returnTypeGenericMetadata . getMock () , container ) < container ;
Code	return container . getMock ( returnTypeGenericMetadata . getMock () , container ) < container ;
Distance : 8

44
Tree	return invocation . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return invocation . recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 7

45
Tree	return container . getMock ( returnTypeGenericMetadata , container + getMock ( returnTypeGenericMetadata ) ) ;
Code	return container . getMock ( returnTypeGenericMetadata , container + getMock ( returnTypeGenericMetadata ) ) ;
Distance : 9

46
Tree	return returnTypeGenericMetadata . getMock ( returnTypeGenericMetadata . getMock () , container ) < container ;
Code	return returnTypeGenericMetadata . getMock ( returnTypeGenericMetadata . getMock () , container ) < container ;
Distance : 8

47
Tree	return container . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return container . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 8

48
Tree	return returnTypeGenericMetadata . getMock ( returnTypeGenericMetadata , container + getMock ( returnTypeGenericMetadata ) ) ;
Code	return returnTypeGenericMetadata . getMock ( returnTypeGenericMetadata , container + getMock ( returnTypeGenericMetadata ) ) ;
Distance : 9

49
Tree	return returnTypeGenericMetadata . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return returnTypeGenericMetadata . getMock ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 8

========================================================================


========================================================================
Example Number: 87
Parent Code is: 
{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return anyCollection () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=Collection})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=anyCollection}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 9
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList ( Collection ) ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList ( Collection ) ; }
Distance : 12

1
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; }
Distance : 7

2
Tree	{ return ( Collection ) reportMatcher () ; }
Code	{ return ( Collection ) reportMatcher () ; }
Distance : 4

3
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 2

4
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 2

5
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 1

6
Tree	{ return ( Collection ) returnList ( Any.ANY ) . returnList () ; }
Code	{ return ( Collection ) returnList ( Any.ANY ) . returnList () ; }
Distance : 9

7
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . reportMatcher ( Collection ) ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . reportMatcher ( Collection ) ; }
Distance : 12

8
Tree	{ return ( Collection ) returnList ( Any.ANY ) . returnList ( Collection ) ; }
Code	{ return ( Collection ) returnList ( Any.ANY ) . returnList ( Collection ) ; }
Distance : 12

9
Tree	{ return ( Collection ) Collection . reportMatcher ( Collection ) ; }
Code	{ return ( Collection ) Collection . reportMatcher ( Collection ) ; }
Distance : 9

10
Tree	{ return reportMatcher () ; } i
Code	{ return reportMatcher () ; } i
Distance : 2

11
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 7

12
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } null
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } null
Distance : 8

13
Tree	{ return ( Collection ) reportMatcher ( Collection ) ; } i
Code	{ return ( Collection ) reportMatcher ( Collection ) ; } i
Distance : 8

14
Tree	{ return ( Collection ) reportMatcher ( Collection ) ; }
Code	{ return ( Collection ) reportMatcher ( Collection ) ; }
Distance : 7

15
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; }
Distance : 7

16
Tree	{ return ( Collection ) reportMatcher () ; }
Code	{ return ( Collection ) reportMatcher () ; }
Distance : 4

17
Tree	{ return ( Collection ) reportMatcher ( Collection ) ; }
Code	{ return ( Collection ) reportMatcher ( Collection ) ; }
Distance : 7

18
Tree	{ return ( Collection ) returnList ( Any.ANY ) . returnList () ; }
Code	{ return ( Collection ) returnList ( Any.ANY ) . returnList () ; }
Distance : 9

19
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 2

20
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 9

21
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

22
Tree	{ return ( Collection ) Collection . returnList ( Collection ) ; }
Code	{ return ( Collection ) Collection . returnList ( Collection ) ; }
Distance : 9

23
Tree	{ return ( Collection ) returnList () ; }
Code	{ return ( Collection ) returnList () ; }
Distance : 4

24
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 2

25
Tree	{ return ( Collection ) returnList ( Collection ) ; }
Code	{ return ( Collection ) returnList ( Collection ) ; }
Distance : 7

26
Tree	{ return reportMatcher () ; } null
Code	{ return reportMatcher () ; } null
Distance : 2

27
Tree	{ return ( Collection ) Collection . returnList ( Collection ) ; }
Code	{ return ( Collection ) Collection . returnList ( Collection ) ; }
Distance : 9

28
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 9

29
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 7

30
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 2

31
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 7

32
Tree	{ return ( Any.ANY ) ; return null ; }
Code	{ return ( Any.ANY ) ; return null ; }
Distance : 6

33
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 7

34
Tree	{ return return () ; }
Code	{ return return () ; }
Distance : 1

35
Tree	{ return ( Collection ) reportMatcher ( Collection ) ; } null
Code	{ return ( Collection ) reportMatcher ( Collection ) ; } null
Distance : 8

36
Tree	{ return ( Collection ) reportMatcher () ; } i
Code	{ return ( Collection ) reportMatcher () ; } i
Distance : 5

37
Tree	{ return ( Collection ) Collection . returnList ( Collection ) ; } i
Code	{ return ( Collection ) Collection . returnList ( Collection ) ; } i
Distance : 10

38
Tree	{ return ( Collection ) Collection . returnList ( Collection ) ; } null
Code	{ return ( Collection ) Collection . returnList ( Collection ) ; } null
Distance : 10

39
Tree	{ return ( Collection ) returnList ( Any.ANY ) . returnList ( Collection ) ; }
Code	{ return ( Collection ) returnList ( Any.ANY ) . returnList ( Collection ) ; }
Distance : 12

40
Tree	{ return STRING_CONSTANT ; } e
Code	{ return STRING_CONSTANT ; } e
Distance : 3

41
Tree	{ return STRING_CONSTANT ; } T
Code	{ return STRING_CONSTANT ; } T
Distance : 3

42
Tree	{ return null ; }
Code	{ return null ; }
Distance : 2

43
Tree	{ return STRING_CONSTANT ; } compiler
Code	{ return STRING_CONSTANT ; } compiler
Distance : 3

44
Tree	{ return returnList () ; }
Code	{ return returnList () ; }
Distance : 1

45
Tree	{ return ( Collection ) returnList ( Any.ANY ) ; }
Code	{ return ( Collection ) returnList ( Any.ANY ) ; }
Distance : 7

46
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList ( Collection ) ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList ( Collection ) ; }
Distance : 12

47
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } i
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; } i
Distance : 8

48
Tree	{ return STRING_CONSTANT ; } void
Code	{ return STRING_CONSTANT ; } void
Distance : 3

49
Tree	{ return ( Collection ) reportMatcher () ; } null
Code	{ return ( Collection ) reportMatcher () ; } null
Distance : 5

========================================================================


========================================================================
Example Number: 88
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnList () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Collection . class ) ) . returnList () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Collection})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	{ return ( Collection ) returnList ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Collection ) returnList ( Any.ANY ) . reportMatcher () ; }
Distance : 9

1
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

2
Tree	{ return returnList ( Any.ANY ) . returnList () ; }
Code	{ return returnList ( Any.ANY ) . returnList () ; }
Distance : 8

3
Tree	{ return this . Collection ; }
Code	{ return this . Collection ; }
Distance : 12

4
Tree	{ return ( Collection ) returnList ( Any.ANY ) ; }
Code	{ return ( Collection ) returnList ( Any.ANY ) ; }
Distance : 10

5
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; }
Distance : 10

6
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) ; }
Code	{ super ( Collection ) ; returnList ( Any.ANY ) ; }
Distance : 12

7
Tree	{ reportMatcher ( Any.ANY ) ; Collection = Any.ANY . returnList () ; }
Code	{ reportMatcher ( Any.ANY ) ; Collection = Any.ANY . returnList () ; }
Distance : 8

8
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) . returnList () ; }
Code	{ super ( Collection ) ; returnList ( Any.ANY ) . returnList () ; }
Distance : 9

9
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Collection ) ; returnList ( Any.ANY ) . reportMatcher () ; }
Distance : 10

10
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

11
Tree	{ returnList ( Any.ANY ) ; Collection = Any.ANY . returnList () ; }
Code	{ returnList ( Any.ANY ) ; Collection = Any.ANY . returnList () ; }
Distance : 9

12
Tree	{ returnList ( Any.ANY ) ; Collection = Any.ANY . reportMatcher () ; }
Code	{ returnList ( Any.ANY ) ; Collection = Any.ANY . reportMatcher () ; }
Distance : 10

13
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } !=
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } !=
Distance : 8

14
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) . returnList () ; } !=
Code	{ super ( Collection ) ; returnList ( Any.ANY ) . returnList () ; } !=
Distance : 10

15
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

16
Tree	{ return this . Collection ; } T
Code	{ return this . Collection ; } T
Distance : 13

17
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } i
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } i
Distance : 12

18
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

19
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 7

20
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

21
Tree	{ return this . Collection ; } compiler
Code	{ return this . Collection ; } compiler
Distance : 13

22
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 8

23
Tree	{ return this . Collection ; } void
Code	{ return this . Collection ; } void
Distance : 13

24
Tree	{ super ( Collection ) ; reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ super ( Collection ) ; reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 9

25
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 11

26
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

27
Tree	{ return this . Collection ; } e
Code	{ return this . Collection ; } e
Distance : 13

28
Tree	{ reportMatcher ( Any.ANY ) ; Collection = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; Collection = Any.ANY . reportMatcher () ; }
Distance : 9

29
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } value
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } value
Distance : 12

30
Tree	{ return returnList ( Any.ANY ) . < Collection > reportMatcher () ; }
Code	{ return returnList ( Any.ANY ) . < Collection > reportMatcher () ; }
Distance : 10

31
Tree	{ return reportMatcher ( Any.ANY ) . < Collection > returnList () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Collection > returnList () ; }
Distance : 8

32
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

33
Tree	{ return returnList ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnList ( Any.ANY ) . reportMatcher () ; }
Distance : 9

34
Tree	{ super ( Collection ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Collection ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

35
Tree	{ return ( Collection ) returnList ( Any.ANY ) . returnList () ; } !=
Code	{ return ( Collection ) returnList ( Any.ANY ) . returnList () ; } !=
Distance : 9

36
Tree	{ return reportMatcher ( Any.ANY ) . < Collection > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Collection > reportMatcher () ; }
Distance : 9

37
Tree	{ return ( Collection ) returnList ( Any.ANY ) . returnList () ; }
Code	{ return ( Collection ) returnList ( Any.ANY ) . returnList () ; }
Distance : 8

38
Tree	{ reportMatcher ( Any.ANY ) ; Collection = Any.ANY . returnList () ; } !=
Code	{ reportMatcher ( Any.ANY ) ; Collection = Any.ANY . returnList () ; } !=
Distance : 9

39
Tree	{ return ( Collection ) returnList ( Any.ANY ) ; } value
Code	{ return ( Collection ) returnList ( Any.ANY ) ; } value
Distance : 11

40
Tree	{ super ( Collection ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Collection ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

41
Tree	{ returnList ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnList ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

42
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) ; } value
Code	{ super ( Collection ) ; returnList ( Any.ANY ) ; } value
Distance : 13

43
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) ; } i
Code	{ super ( Collection ) ; returnList ( Any.ANY ) ; } i
Distance : 13

44
Tree	{ super ( Collection ) ; returnList ( Any.ANY ) ; } +
Code	{ super ( Collection ) ; returnList ( Any.ANY ) ; } +
Distance : 13

45
Tree	{ return ( Collection ) returnList ( Any.ANY ) ; } i
Code	{ return ( Collection ) returnList ( Any.ANY ) ; } i
Distance : 11

46
Tree	{ return reportMatcher ( Any.ANY ) . < Collection > reportMatcher () ; } !=
Code	{ return reportMatcher ( Any.ANY ) . < Collection > reportMatcher () ; } !=
Distance : 10

47
Tree	{ return ( Collection ) returnList ( Any.ANY ) ; } +
Code	{ return ( Collection ) returnList ( Any.ANY ) ; } +
Distance : 11

48
Tree	{ return returnList ( Any.ANY ) . < Collection > returnList () ; }
Code	{ return returnList ( Any.ANY ) . < Collection > returnList () ; }
Distance : 9

49
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } +
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } +
Distance : 12

========================================================================


========================================================================
Example Number: 89
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnMap () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return anyMap () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnMap}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=anyMap}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 6
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	{ return ( RETURNS_DEFAULTS ) returnMap ( Any.ANY ) ; }
Code	{ return ( RETURNS_DEFAULTS ) returnMap ( Any.ANY ) ; }
Distance : 7

1
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 6

2
Tree	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; }
Code	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) ; }
Distance : 9

3
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 9

4
Tree	{ reportMatcher ( Any.ANY ) ; strictOrderVerifier = Any.ANY . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) ; strictOrderVerifier = Any.ANY . returnMap () ; }
Distance : 10

5
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 7

6
Tree	{ super ( object ) ; returnMap ( Any.ANY ) ; }
Code	{ super ( object ) ; returnMap ( Any.ANY ) ; }
Distance : 9

7
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Distance : 7

8
Tree	{ returnMap ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnMap ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 7

9
Tree	{ super ( classToMock ) ; returnMap ( Any.ANY ) ; }
Code	{ super ( classToMock ) ; returnMap ( Any.ANY ) ; }
Distance : 9

10
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 7

11
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 6

12
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 6

13
Tree	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) . returnMap () ; }
Code	{ super ( reportMatcher ) ; returnMap ( Any.ANY ) . returnMap () ; }
Distance : 11

14
Tree	{ super ( matcher ) ; returnMap ( Any.ANY ) . returnMap () ; }
Code	{ super ( matcher ) ; returnMap ( Any.ANY ) . returnMap () ; }
Distance : 11

15
Tree	{ reportMatcher ( Any.ANY ) ; defaultTransformer = Any.ANY . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) ; defaultTransformer = Any.ANY . returnMap () ; }
Distance : 10

16
Tree	{ return ( classToMock ) returnMap ( Any.ANY ) ; }
Code	{ return ( classToMock ) returnMap ( Any.ANY ) ; }
Distance : 7

17
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 7

18
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 7

19
Tree	{ reportMatcher ( Any.ANY ) ; MISSING_REQUIRE_STRICT_WARNING = Any.ANY . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) ; MISSING_REQUIRE_STRICT_WARNING = Any.ANY . returnMap () ; }
Distance : 10

20
Tree	{ return reportMatcher ( Any.ANY ) . < getParameterTypes > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < getParameterTypes > reportMatcher () ; }
Distance : 9

21
Tree	{ return this . mode ; }
Code	{ return this . mode ; }
Distance : 3

22
Tree	{ return ( T ) returnMap ( Any.ANY ) ; }
Code	{ return ( T ) returnMap ( Any.ANY ) ; }
Distance : 7

23
Tree	{ return ( classToMock ) returnMap ( Any.ANY ) . returnMap () ; }
Code	{ return ( classToMock ) returnMap ( Any.ANY ) . returnMap () ; }
Distance : 9

24
Tree	{ return ( T ) returnMap ( Any.ANY ) . returnMap () ; }
Code	{ return ( T ) returnMap ( Any.ANY ) . returnMap () ; }
Distance : 9

25
Tree	{ return this . RETURNS_DEFAULTS ; }
Code	{ return this . RETURNS_DEFAULTS ; }
Distance : 3

26
Tree	{ return ( reportMatcher ) returnMap ( Any.ANY ) ; }
Code	{ return ( reportMatcher ) returnMap ( Any.ANY ) ; }
Distance : 7

27
Tree	{ return reportMatcher ( Any.ANY ) . < RETURNS_SMART_NULLS > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < RETURNS_SMART_NULLS > reportMatcher () ; }
Distance : 9

28
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 7

29
Tree	{ return reportMatcher ( Any.ANY ) . < isAssertionCall > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < isAssertionCall > reportMatcher () ; }
Distance : 9

30
Tree	{ return ( RETURNS_DEFAULTS ) returnMap ( Any.ANY ) . returnMap () ; }
Code	{ return ( RETURNS_DEFAULTS ) returnMap ( Any.ANY ) . returnMap () ; }
Distance : 9

31
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 7

32
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 7

33
Tree	{ super ( T ) ; returnMap ( Any.ANY ) ; }
Code	{ super ( T ) ; returnMap ( Any.ANY ) ; }
Distance : 9

34
Tree	{ reportMatcher ( Any.ANY ) ; constructorsToProcess = Any.ANY . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) ; constructorsToProcess = Any.ANY . returnMap () ; }
Distance : 10

35
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } i
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } i
Distance : 8

36
Tree	{ return this . object ; }
Code	{ return this . object ; }
Distance : 3

37
Tree	{ return this . allowed ; }
Code	{ return this . allowed ; }
Distance : 3

38
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 6

39
Tree	{ return this . mockSettings ; }
Code	{ return this . mockSettings ; }
Distance : 3

40
Tree	{ return reportMatcher ( Any.ANY ) . < MISSING_REQUIRE_STRICT_WARNING > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < MISSING_REQUIRE_STRICT_WARNING > reportMatcher () ; }
Distance : 9

41
Tree	{ return reportMatcher ( Any.ANY ) . < WEEKYEARS_TYPE > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < WEEKYEARS_TYPE > reportMatcher () ; }
Distance : 9

42
Tree	{ super ( T ) ; returnMap ( Any.ANY ) . returnMap () ; }
Code	{ super ( T ) ; returnMap ( Any.ANY ) . returnMap () ; }
Distance : 11

43
Tree	{ super ( object ) ; returnMap ( Any.ANY ) . returnMap () ; }
Code	{ super ( object ) ; returnMap ( Any.ANY ) . returnMap () ; }
Distance : 11

44
Tree	{ reportMatcher ( Any.ANY ) ; providedNamespaces = Any.ANY . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) ; providedNamespaces = Any.ANY . returnMap () ; }
Distance : 10

45
Tree	{ return ( reportMatcher ) returnMap ( Any.ANY ) . returnMap () ; }
Code	{ return ( reportMatcher ) returnMap ( Any.ANY ) . returnMap () ; }
Distance : 9

46
Tree	{ super ( classToMock ) ; returnMap ( Any.ANY ) . returnMap () ; }
Code	{ super ( classToMock ) ; returnMap ( Any.ANY ) . returnMap () ; }
Distance : 11

47
Tree	{ super ( matcher ) ; returnMap ( Any.ANY ) ; }
Code	{ super ( matcher ) ; returnMap ( Any.ANY ) ; }
Distance : 9

48
Tree	{ return returnMap ( Any.ANY ) . returnMap () ; }
Code	{ return returnMap ( Any.ANY ) . returnMap () ; }
Distance : 6

49
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } null
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } null
Distance : 8

========================================================================


========================================================================
Example Number: 90
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnMap () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Map . class ) ) . returnMap () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnMap}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Map})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnMap}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	{ super ( Map ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Map ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

1
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

2
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) ; }
Code	{ super ( Map ) ; returnMap ( Any.ANY ) ; }
Distance : 12

3
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) . returnMap () ; }
Code	{ super ( Map ) ; returnMap ( Any.ANY ) . returnMap () ; }
Distance : 9

4
Tree	{ return ( Map ) returnMap ( Any.ANY ) . returnMap () ; }
Code	{ return ( Map ) returnMap ( Any.ANY ) . returnMap () ; }
Distance : 8

5
Tree	{ return ( Map ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Map ) reportMatcher ( Any.ANY ) ; }
Distance : 10

6
Tree	{ returnMap ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnMap ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

7
Tree	{ super ( Map ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Map ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

8
Tree	{ reportMatcher ( Any.ANY ) ; Map = Any.ANY . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) ; Map = Any.ANY . returnMap () ; }
Distance : 8

9
Tree	{ return ( Map ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Map ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

10
Tree	{ return returnMap ( Any.ANY ) . < Map > reportMatcher () ; }
Code	{ return returnMap ( Any.ANY ) . < Map > reportMatcher () ; }
Distance : 10

11
Tree	{ return returnMap ( Any.ANY ) . < Map > returnMap () ; }
Code	{ return returnMap ( Any.ANY ) . < Map > returnMap () ; }
Distance : 9

12
Tree	{ returnMap ( Any.ANY ) ; Map = Any.ANY . reportMatcher () ; }
Code	{ returnMap ( Any.ANY ) ; Map = Any.ANY . reportMatcher () ; }
Distance : 10

13
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; } !=
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; } !=
Distance : 8

14
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) . returnMap () ; } !=
Code	{ super ( Map ) ; returnMap ( Any.ANY ) . returnMap () ; } !=
Distance : 10

15
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

16
Tree	{ return this . Map ; } T
Code	{ return this . Map ; } T
Distance : 13

17
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } i
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } i
Distance : 12

18
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 7

19
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

20
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

21
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

22
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

23
Tree	{ return reportMatcher ( Any.ANY ) . < Map > returnMap () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Map > returnMap () ; }
Distance : 8

24
Tree	{ return this . Map ; } compiler
Code	{ return this . Map ; } compiler
Distance : 13

25
Tree	{ return ( Map ) returnMap ( Any.ANY ) . returnMap () ; } !=
Code	{ return ( Map ) returnMap ( Any.ANY ) . returnMap () ; } !=
Distance : 9

26
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Map ) ; returnMap ( Any.ANY ) . reportMatcher () ; }
Distance : 10

27
Tree	{ return this . Map ; } void
Code	{ return this . Map ; } void
Distance : 13

28
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 11

29
Tree	{ return this . Map ; }
Code	{ return this . Map ; }
Distance : 12

30
Tree	{ return ( Map ) returnMap ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Map ) returnMap ( Any.ANY ) . reportMatcher () ; }
Distance : 9

31
Tree	{ return this . Map ; } e
Code	{ return this . Map ; } e
Distance : 13

32
Tree	{ return reportMatcher ( Any.ANY ) . < Map > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Map > reportMatcher () ; }
Distance : 9

33
Tree	{ reportMatcher ( Any.ANY ) ; Map = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; Map = Any.ANY . reportMatcher () ; }
Distance : 9

34
Tree	{ super ( Map ) ; reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ super ( Map ) ; reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 9

35
Tree	{ return ( Map ) returnMap ( Any.ANY ) ; } value
Code	{ return ( Map ) returnMap ( Any.ANY ) ; } value
Distance : 11

36
Tree	{ return ( Map ) returnMap ( Any.ANY ) ; }
Code	{ return ( Map ) returnMap ( Any.ANY ) ; }
Distance : 10

37
Tree	{ return returnMap ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnMap ( Any.ANY ) . reportMatcher () ; }
Distance : 9

38
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } value
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } value
Distance : 12

39
Tree	{ return returnMap ( Any.ANY ) . returnMap () ; }
Code	{ return returnMap ( Any.ANY ) . returnMap () ; }
Distance : 8

40
Tree	{ return ( Map ) reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ return ( Map ) reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 8

41
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) ; } value
Code	{ super ( Map ) ; returnMap ( Any.ANY ) ; } value
Distance : 13

42
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) ; } i
Code	{ super ( Map ) ; returnMap ( Any.ANY ) ; } i
Distance : 13

43
Tree	{ return ( Map ) returnMap ( Any.ANY ) ; } i
Code	{ return ( Map ) returnMap ( Any.ANY ) ; } i
Distance : 11

44
Tree	{ super ( Map ) ; returnMap ( Any.ANY ) ; } +
Code	{ super ( Map ) ; returnMap ( Any.ANY ) ; } +
Distance : 13

45
Tree	{ reportMatcher ( Any.ANY ) ; Map = Any.ANY . returnMap () ; } !=
Code	{ reportMatcher ( Any.ANY ) ; Map = Any.ANY . returnMap () ; } !=
Distance : 9

46
Tree	{ return reportMatcher ( Any.ANY ) . < Map > reportMatcher () ; } !=
Code	{ return reportMatcher ( Any.ANY ) . < Map > reportMatcher () ; } !=
Distance : 10

47
Tree	{ returnMap ( Any.ANY ) ; Map = Any.ANY . returnMap () ; }
Code	{ returnMap ( Any.ANY ) ; Map = Any.ANY . returnMap () ; }
Distance : 9

48
Tree	{ return ( Map ) returnMap ( Any.ANY ) ; } +
Code	{ return ( Map ) returnMap ( Any.ANY ) ; } +
Distance : 11

49
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } +
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } +
Distance : 12

========================================================================


========================================================================
Example Number: 91
Parent Code is: 
{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return anySet () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=Set})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnSet}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=anySet}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 9
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

1
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; }
Distance : 7

2
Tree	{ return ( Set ) reportMatcher () ; }
Code	{ return ( Set ) reportMatcher () ; }
Distance : 4

3
Tree	{ return ( Set ) reportMatcher ( Set ) ; }
Code	{ return ( Set ) reportMatcher ( Set ) ; }
Distance : 7

4
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 2

5
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet ( Set ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet ( Set ) ; }
Distance : 12

6
Tree	{ return ( Set ) reportMatcher () ; }
Code	{ return ( Set ) reportMatcher () ; }
Distance : 4

7
Tree	{ return ( Set ) Set . returnSet ( Set ) ; }
Code	{ return ( Set ) Set . returnSet ( Set ) ; }
Distance : 9

8
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 1

9
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; }
Distance : 9

10
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher ( Set ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher ( Set ) ; }
Distance : 12

11
Tree	{ return reportMatcher () ; } i
Code	{ return reportMatcher () ; } i
Distance : 2

12
Tree	{ return reportMatcher () ; } value
Code	{ return reportMatcher () ; } value
Distance : 2

13
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } +
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } +
Distance : 8

14
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 7

15
Tree	{ return ( Set ) reportMatcher ( Set ) ; } value
Code	{ return ( Set ) reportMatcher ( Set ) ; } value
Distance : 8

16
Tree	{ return ( Set ) reportMatcher ( Set ) ; } i
Code	{ return ( Set ) reportMatcher ( Set ) ; } i
Distance : 8

17
Tree	{ return STRING_CONSTANT ; } e
Code	{ return STRING_CONSTANT ; } e
Distance : 3

18
Tree	{ return ( Set ) Set . returnSet ( Set ) ; } value
Code	{ return ( Set ) Set . returnSet ( Set ) ; } value
Distance : 10

19
Tree	{ return STRING_CONSTANT ; } void
Code	{ return STRING_CONSTANT ; } void
Distance : 3

20
Tree	{ return ( Set ) reportMatcher () ; } i
Code	{ return ( Set ) reportMatcher () ; } i
Distance : 5

21
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 2

22
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 2

23
Tree	{ return return () ; }
Code	{ return return () ; }
Distance : 1

24
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 2

25
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } value
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } value
Distance : 8

26
Tree	{ return ( Set ) Set . reportMatcher ( Set ) ; }
Code	{ return ( Set ) Set . reportMatcher ( Set ) ; }
Distance : 9

27
Tree	{ return ( Set ) reportMatcher ( Set ) ; }
Code	{ return ( Set ) reportMatcher ( Set ) ; }
Distance : 7

28
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet ( Set ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet ( Set ) ; }
Distance : 12

29
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher ( Set ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher ( Set ) ; }
Distance : 12

30
Tree	{ return ( Set ) reportMatcher ( Set ) ; } +
Code	{ return ( Set ) reportMatcher ( Set ) ; } +
Distance : 8

31
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; }
Distance : 7

32
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 2

33
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 7

34
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 7

35
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

36
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; }
Distance : 9

37
Tree	{ ( ( Any.ANY ) ; return null ; }
Code	{ ( ( Any.ANY ) ; return null ; }
Distance : 7

38
Tree	{ return ( Set ) Set . returnSet ( Set ) ; } i
Code	{ return ( Set ) Set . returnSet ( Set ) ; } i
Distance : 10

39
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } i
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } i
Distance : 8

40
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher ( Set ) ; } !=
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher ( Set ) ; } !=
Distance : 13

41
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher () ; } !=
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher () ; } !=
Distance : 10

42
Tree	{ return STRING_CONSTANT ; } T
Code	{ return STRING_CONSTANT ; } T
Distance : 3

43
Tree	{ return STRING_CONSTANT ; } compiler
Code	{ return STRING_CONSTANT ; } compiler
Distance : 3

44
Tree	{ return null ; }
Code	{ return null ; }
Distance : 2

45
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 7

46
Tree	{ return reportMatcher () ; } +
Code	{ return reportMatcher () ; } +
Distance : 2

47
Tree	{ return ( Set ) reportMatcher () ; } value
Code	{ return ( Set ) reportMatcher () ; } value
Distance : 5

48
Tree	{ return ( Set ) Set . returnSet ( Set ) ; } +
Code	{ return ( Set ) Set . returnSet ( Set ) ; } +
Distance : 10

49
Tree	{ return ( Set ) reportMatcher () ; } +
Code	{ return ( Set ) reportMatcher () ; } +
Distance : 5

========================================================================


========================================================================
Example Number: 92
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnSet () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Set . class ) ) . returnSet () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnSet}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Set})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnSet}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; }
Distance : 7

1
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

2
Tree	{ return reportMatcher ( Any.ANY ) . < Set > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Set > reportMatcher () ; }
Distance : 9

3
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

4
Tree	{ super ( Set ) ; returnSet ( Any.ANY ) ; }
Code	{ super ( Set ) ; returnSet ( Any.ANY ) ; }
Distance : 12

5
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; }
Distance : 8

6
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) . returnSet () ; }
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) . returnSet () ; }
Distance : 9

7
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

8
Tree	{ super ( Set ) ; returnSet ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Set ) ; returnSet ( Any.ANY ) . reportMatcher () ; }
Distance : 10

9
Tree	{ reportMatcher ( Any.ANY ) ; Set = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; Set = Any.ANY . reportMatcher () ; }
Distance : 9

10
Tree	{ return reportMatcher ( Any.ANY ) . < Set > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Set > reportMatcher () ; }
Distance : 9

11
Tree	{ reportMatcher ( Any.ANY ) ; Set = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; Set = Any.ANY . reportMatcher () ; }
Distance : 9

12
Tree	{ return reportMatcher ( Any.ANY ) . < Set > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Set > reportMatcher () ; }
Distance : 9

13
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } !=
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; } !=
Distance : 9

14
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) . returnSet () ; } !=
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) . returnSet () ; } !=
Distance : 10

15
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

16
Tree	{ return this . Set ; } T
Code	{ return this . Set ; } T
Distance : 13

17
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } i
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } i
Distance : 12

18
Tree	{ return reportMatcher ( Any.ANY ) . returnSet () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnSet () ; }
Distance : 7

19
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

20
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

21
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

22
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 11

23
Tree	{ return this . Set ; }
Code	{ return this . Set ; }
Distance : 12

24
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } !=
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; } !=
Distance : 9

25
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } value
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } value
Distance : 11

26
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

27
Tree	{ return ( Set ) returnSet ( Any.ANY ) . returnSet () ; }
Code	{ return ( Set ) returnSet ( Any.ANY ) . returnSet () ; }
Distance : 8

28
Tree	{ return ( Set ) returnSet ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Set ) returnSet ( Any.ANY ) . reportMatcher () ; }
Distance : 9

29
Tree	{ return this . Set ; } compiler
Code	{ return this . Set ; } compiler
Distance : 13

30
Tree	{ return this . Set ; } void
Code	{ return this . Set ; } void
Distance : 13

31
Tree	{ return this . Set ; } e
Code	{ return this . Set ; } e
Distance : 13

32
Tree	{ reportMatcher ( Any.ANY ) ; Set = Any.ANY . returnSet () ; }
Code	{ reportMatcher ( Any.ANY ) ; Set = Any.ANY . returnSet () ; }
Distance : 8

33
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } value
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } value
Distance : 12

34
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

35
Tree	{ return reportMatcher ( Any.ANY ) . < Set > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Set > reportMatcher () ; }
Distance : 9

36
Tree	{ super ( Set ) ; returnSet ( Any.ANY ) . returnSet () ; }
Code	{ super ( Set ) ; returnSet ( Any.ANY ) . returnSet () ; }
Distance : 9

37
Tree	{ return ( Set ) returnSet ( Any.ANY ) ; }
Code	{ return ( Set ) returnSet ( Any.ANY ) ; }
Distance : 10

38
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

39
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; }
Distance : 10

40
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

41
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } value
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } value
Distance : 13

42
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } i
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } i
Distance : 13

43
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } i
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } i
Distance : 11

44
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } +
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; } +
Distance : 13

45
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; } +
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; } +
Distance : 11

46
Tree	{ reportMatcher ( Any.ANY ) ; Set = Any.ANY . returnSet () ; } !=
Code	{ reportMatcher ( Any.ANY ) ; Set = Any.ANY . returnSet () ; } !=
Distance : 9

47
Tree	{ return reportMatcher ( Any.ANY ) . < Set > reportMatcher () ; } !=
Code	{ return reportMatcher ( Any.ANY ) . < Set > reportMatcher () ; } !=
Distance : 10

48
Tree	{ reportMatcher ( Any.ANY ) ; Set = Any.ANY . returnSet () ; }
Code	{ reportMatcher ( Any.ANY ) ; Set = Any.ANY . returnSet () ; }
Distance : 8

49
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } +
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } +
Distance : 12

========================================================================


========================================================================
Example Number: 93
Parent Code is: 
{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return anyList () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=List})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=anyList}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 9
-------------------------------------------------------------------------------
Cadidate List Length : 50
Correct
========================================================================
True

0
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 2

1
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; }
Distance : 7

2
Tree	{ return ( List ) reportMatcher () ; }
Code	{ return ( List ) reportMatcher () ; }
Distance : 4

3
Tree	{ return ( List ) anyList () ; }
Code	{ return ( List ) anyList () ; }
Distance : 3

4
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 2

5
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 1

6
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList ( List ) ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList ( List ) ; }
Distance : 12

7
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . reportMatcher ( List ) ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . reportMatcher ( List ) ; }
Distance : 12

8
Tree	{ return ( List ) anyList ( List ) ; }
Code	{ return ( List ) anyList ( List ) ; }
Distance : 6

9
Tree	{ return ( List ) List . reportMatcher ( List ) ; }
Code	{ return ( List ) List . reportMatcher ( List ) ; }
Distance : 9

10
Tree	{ return reportMatcher () ; } i
Code	{ return reportMatcher () ; } i
Distance : 2

11
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 7

12
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } null
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } null
Distance : 8

13
Tree	{ return ( List ) reportMatcher ( List ) ; } i
Code	{ return ( List ) reportMatcher ( List ) ; } i
Distance : 8

14
Tree	{ return ( List ) reportMatcher ( List ) ; }
Code	{ return ( List ) reportMatcher ( List ) ; }
Distance : 7

15
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 2

16
Tree	{ return ( List ) returnList ( Any.ANY ) . anyList () ; }
Code	{ return ( List ) returnList ( Any.ANY ) . anyList () ; }
Distance : 8

17
Tree	{ return anyList () ; }
Code	{ return anyList () ; }
Distance : 0

18
Tree	{ return ( List ) returnList ( Any.ANY ) . anyList ( List ) ; }
Code	{ return ( List ) returnList ( Any.ANY ) . anyList ( List ) ; }
Distance : 11

19
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 2

20
Tree	{ return ( List ) returnList ( Any.ANY ) . returnList () ; }
Code	{ return ( List ) returnList ( Any.ANY ) . returnList () ; }
Distance : 9

21
Tree	{ return ( List ) List . anyList ( List ) ; }
Code	{ return ( List ) List . anyList ( List ) ; }
Distance : 8

22
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

23
Tree	{ return ( List ) anyList ( Any.ANY ) ; }
Code	{ return ( List ) anyList ( Any.ANY ) ; }
Distance : 6

24
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 9

25
Tree	{ return ( List ) returnList ( Any.ANY ) ; }
Code	{ return ( List ) returnList ( Any.ANY ) ; }
Distance : 7

26
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 2

27
Tree	{ return ( List ) List . returnList ( List ) ; }
Code	{ return ( List ) List . returnList ( List ) ; }
Distance : 9

28
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 7

29
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . anyList ( List ) ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . anyList ( List ) ; }
Distance : 11

30
Tree	{ return reportMatcher () ; } null
Code	{ return reportMatcher () ; } null
Distance : 2

31
Tree	{ anyList ( Any.ANY ) ; return null ; }
Code	{ anyList ( Any.ANY ) ; return null ; }
Distance : 7

32
Tree	{ return ( List ) returnList () ; }
Code	{ return ( List ) returnList () ; }
Distance : 4

33
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . anyList () ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . anyList () ; }
Distance : 8

34
Tree	{ return ( List ) reportMatcher ( List ) ; } null
Code	{ return ( List ) reportMatcher ( List ) ; } null
Distance : 8

35
Tree	{ return ( List ) reportMatcher () ; } i
Code	{ return ( List ) reportMatcher () ; } i
Distance : 5

36
Tree	{ return ( List ) List . anyList ( List ) ; } i
Code	{ return ( List ) List . anyList ( List ) ; } i
Distance : 9

37
Tree	{ return ( List ) returnList ( List ) ; }
Code	{ return ( List ) returnList ( List ) ; }
Distance : 7

38
Tree	{ return ( List ) List . anyList ( List ) ; } null
Code	{ return ( List ) List . anyList ( List ) ; } null
Distance : 9

39
Tree	{ return STRING_CONSTANT ; } e
Code	{ return STRING_CONSTANT ; } e
Distance : 3

40
Tree	{ return STRING_CONSTANT ; } T
Code	{ return STRING_CONSTANT ; } T
Distance : 3

41
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 7

42
Tree	{ return STRING_CONSTANT ; } compiler
Code	{ return STRING_CONSTANT ; } compiler
Distance : 3

43
Tree	{ return null ; }
Code	{ return null ; }
Distance : 2

44
Tree	{ return returnList () ; }
Code	{ return returnList () ; }
Distance : 1

45
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 7

46
Tree	{ return ( List ) returnList ( Any.ANY ) . returnList ( List ) ; }
Code	{ return ( List ) returnList ( Any.ANY ) . returnList ( List ) ; }
Distance : 12

47
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; } i
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; } i
Distance : 8

48
Tree	{ return STRING_CONSTANT ; } void
Code	{ return STRING_CONSTANT ; } void
Distance : 3

49
Tree	{ return ( List ) reportMatcher () ; } null
Code	{ return ( List ) reportMatcher () ; } null
Distance : 5

========================================================================


========================================================================
Example Number: 94
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnList () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( List . class ) ) . returnList () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=List})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

1
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

2
Tree	{ return reportMatcher ( Any.ANY ) . < List > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < List > reportMatcher () ; }
Distance : 9

3
Tree	{ return returnList ( Any.ANY ) . returnList () ; }
Code	{ return returnList ( Any.ANY ) . returnList () ; }
Distance : 8

4
Tree	{ return ( List ) returnList ( Any.ANY ) ; }
Code	{ return ( List ) returnList ( Any.ANY ) ; }
Distance : 10

5
Tree	{ super ( List ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( List ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

6
Tree	{ super ( List ) ; returnList ( Any.ANY ) . returnList () ; }
Code	{ super ( List ) ; returnList ( Any.ANY ) . returnList () ; }
Distance : 9

7
Tree	{ return ( List ) returnList ( Any.ANY ) . returnList () ; }
Code	{ return ( List ) returnList ( Any.ANY ) . returnList () ; }
Distance : 8

8
Tree	{ return returnList ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnList ( Any.ANY ) . reportMatcher () ; }
Distance : 9

9
Tree	{ super ( List ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( List ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

10
Tree	{ reportMatcher ( Any.ANY ) ; List = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; List = Any.ANY . reportMatcher () ; }
Distance : 9

11
Tree	{ return returnList ( Any.ANY ) . < List > returnList () ; }
Code	{ return returnList ( Any.ANY ) . < List > returnList () ; }
Distance : 9

12
Tree	{ returnList ( Any.ANY ) ; List = Any.ANY . reportMatcher () ; }
Code	{ returnList ( Any.ANY ) ; List = Any.ANY . reportMatcher () ; }
Distance : 10

13
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; } !=
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; } !=
Distance : 8

14
Tree	{ super ( List ) ; returnList ( Any.ANY ) . returnList () ; } !=
Code	{ super ( List ) ; returnList ( Any.ANY ) . returnList () ; } !=
Distance : 10

15
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

16
Tree	{ return this . List ; } T
Code	{ return this . List ; } T
Distance : 13

17
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } i
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } i
Distance : 12

18
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

19
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

20
Tree	{ return reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 7

21
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 11

22
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

23
Tree	{ return this . List ; } compiler
Code	{ return this . List ; } compiler
Distance : 13

24
Tree	{ return reportMatcher ( Any.ANY ) . < List > returnList () ; }
Code	{ return reportMatcher ( Any.ANY ) . < List > returnList () ; }
Distance : 8

25
Tree	{ return this . List ; } void
Code	{ return this . List ; } void
Distance : 13

26
Tree	{ reportMatcher ( Any.ANY ) ; List = Any.ANY . returnList () ; }
Code	{ reportMatcher ( Any.ANY ) ; List = Any.ANY . returnList () ; }
Distance : 8

27
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

28
Tree	{ return this . List ; }
Code	{ return this . List ; }
Distance : 12

29
Tree	{ return ( List ) returnList ( Any.ANY ) . returnList () ; } !=
Code	{ return ( List ) returnList ( Any.ANY ) . returnList () ; } !=
Distance : 9

30
Tree	{ return ( List ) returnList ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( List ) returnList ( Any.ANY ) . reportMatcher () ; }
Distance : 9

31
Tree	{ return this . List ; } e
Code	{ return this . List ; } e
Distance : 13

32
Tree	{ super ( List ) ; returnList ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( List ) ; returnList ( Any.ANY ) . reportMatcher () ; }
Distance : 10

33
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } value
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } value
Distance : 12

34
Tree	{ super ( List ) ; returnList ( Any.ANY ) ; }
Code	{ super ( List ) ; returnList ( Any.ANY ) ; }
Distance : 12

35
Tree	{ super ( List ) ; reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ super ( List ) ; reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 9

36
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; }
Distance : 10

37
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 8

38
Tree	{ return ( List ) returnList ( Any.ANY ) ; } value
Code	{ return ( List ) returnList ( Any.ANY ) ; } value
Distance : 11

39
Tree	{ returnList ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnList ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

40
Tree	{ return returnList ( Any.ANY ) . < List > reportMatcher () ; }
Code	{ return returnList ( Any.ANY ) . < List > reportMatcher () ; }
Distance : 10

41
Tree	{ reportMatcher ( Any.ANY ) ; List = Any.ANY . returnList () ; } !=
Code	{ reportMatcher ( Any.ANY ) ; List = Any.ANY . returnList () ; } !=
Distance : 9

42
Tree	{ super ( List ) ; returnList ( Any.ANY ) ; } value
Code	{ super ( List ) ; returnList ( Any.ANY ) ; } value
Distance : 13

43
Tree	{ super ( List ) ; returnList ( Any.ANY ) ; } i
Code	{ super ( List ) ; returnList ( Any.ANY ) ; } i
Distance : 13

44
Tree	{ super ( List ) ; returnList ( Any.ANY ) ; } +
Code	{ super ( List ) ; returnList ( Any.ANY ) ; } +
Distance : 13

45
Tree	{ return ( List ) returnList ( Any.ANY ) ; } i
Code	{ return ( List ) returnList ( Any.ANY ) ; } i
Distance : 11

46
Tree	{ return reportMatcher ( Any.ANY ) . < List > reportMatcher () ; } !=
Code	{ return reportMatcher ( Any.ANY ) . < List > reportMatcher () ; } !=
Distance : 10

47
Tree	{ return ( List ) returnList ( Any.ANY ) ; } +
Code	{ return ( List ) returnList ( Any.ANY ) ; } +
Distance : 11

48
Tree	{ returnList ( Any.ANY ) ; List = Any.ANY . returnList () ; }
Code	{ returnList ( Any.ANY ) ; List = Any.ANY . returnList () ; }
Distance : 9

49
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } +
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } +
Distance : 12

========================================================================


========================================================================
Example Number: 95
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnString () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( String . class ) ) . returnString () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnString}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=String})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnString}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	{ return ( String ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( String ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

1
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

2
Tree	{ returnString ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnString ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

3
Tree	{ return ( String ) returnString ( Any.ANY ) ; }
Code	{ return ( String ) returnString ( Any.ANY ) ; }
Distance : 10

4
Tree	{ return ( String ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( String ) reportMatcher ( Any.ANY ) ; }
Distance : 10

5
Tree	{ super ( String ) ; returnString ( Any.ANY ) ; }
Code	{ super ( String ) ; returnString ( Any.ANY ) ; }
Distance : 12

6
Tree	{ return returnString ( Any.ANY ) . returnString () ; }
Code	{ return returnString ( Any.ANY ) . returnString () ; }
Distance : 8

7
Tree	{ return ( String ) returnString ( Any.ANY ) . returnString () ; }
Code	{ return ( String ) returnString ( Any.ANY ) . returnString () ; }
Distance : 8

8
Tree	{ super ( String ) ; reportMatcher ( Any.ANY ) . returnString () ; }
Code	{ super ( String ) ; reportMatcher ( Any.ANY ) . returnString () ; }
Distance : 9

9
Tree	{ super ( String ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( String ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

10
Tree	{ super ( String ) ; returnString ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( String ) ; returnString ( Any.ANY ) . reportMatcher () ; }
Distance : 10

11
Tree	{ returnString ( Any.ANY ) ; String = Any.ANY . returnString () ; }
Code	{ returnString ( Any.ANY ) ; String = Any.ANY . returnString () ; }
Distance : 9

12
Tree	{ returnString ( Any.ANY ) ; String = Any.ANY . reportMatcher () ; }
Code	{ returnString ( Any.ANY ) ; String = Any.ANY . reportMatcher () ; }
Distance : 10

13
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; } !=
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; } !=
Distance : 8

14
Tree	{ super ( String ) ; reportMatcher ( Any.ANY ) . returnString () ; } !=
Code	{ super ( String ) ; reportMatcher ( Any.ANY ) . returnString () ; } !=
Distance : 10

15
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

16
Tree	{ return this . String ; } T
Code	{ return this . String ; } T
Distance : 13

17
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } i
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } i
Distance : 12

18
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

19
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

20
Tree	{ return reportMatcher ( Any.ANY ) . < String > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < String > reportMatcher () ; }
Distance : 9

21
Tree	{ return reportMatcher ( Any.ANY ) . returnString () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnString () ; }
Distance : 7

22
Tree	{ return this . String ; } compiler
Code	{ return this . String ; } compiler
Distance : 13

23
Tree	{ return this . String ; } void
Code	{ return this . String ; } void
Distance : 13

24
Tree	{ super ( String ) ; returnString ( Any.ANY ) . returnString () ; }
Code	{ super ( String ) ; returnString ( Any.ANY ) . returnString () ; }
Distance : 9

25
Tree	{ return returnString ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnString ( Any.ANY ) . reportMatcher () ; }
Distance : 9

26
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

27
Tree	{ return ( String ) returnString ( Any.ANY ) . returnString () ; } !=
Code	{ return ( String ) returnString ( Any.ANY ) . returnString () ; } !=
Distance : 9

28
Tree	{ return this . String ; } e
Code	{ return this . String ; } e
Distance : 13

29
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } value
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } value
Distance : 12

30
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 11

31
Tree	{ reportMatcher ( Any.ANY ) ; String = Any.ANY . returnString () ; }
Code	{ reportMatcher ( Any.ANY ) ; String = Any.ANY . returnString () ; }
Distance : 8

32
Tree	{ return ( String ) returnString ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( String ) returnString ( Any.ANY ) . reportMatcher () ; }
Distance : 9

33
Tree	{ return ( String ) returnString ( Any.ANY ) ; } value
Code	{ return ( String ) returnString ( Any.ANY ) ; } value
Distance : 11

34
Tree	{ return reportMatcher ( Any.ANY ) . < String > returnString () ; }
Code	{ return reportMatcher ( Any.ANY ) . < String > returnString () ; }
Distance : 8

35
Tree	{ super ( String ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( String ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

36
Tree	{ return this . String ; }
Code	{ return this . String ; }
Distance : 12

37
Tree	{ return ( String ) reportMatcher ( Any.ANY ) . returnString () ; }
Code	{ return ( String ) reportMatcher ( Any.ANY ) . returnString () ; }
Distance : 8

38
Tree	{ return returnString ( Any.ANY ) . < String > reportMatcher () ; }
Code	{ return returnString ( Any.ANY ) . < String > reportMatcher () ; }
Distance : 10

39
Tree	{ reportMatcher ( Any.ANY ) ; String = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; String = Any.ANY . reportMatcher () ; }
Distance : 9

40
Tree	{ return ( String ) returnString ( Any.ANY ) ; } i
Code	{ return ( String ) returnString ( Any.ANY ) ; } i
Distance : 11

41
Tree	{ reportMatcher ( Any.ANY ) ; String = Any.ANY . returnString () ; } !=
Code	{ reportMatcher ( Any.ANY ) ; String = Any.ANY . returnString () ; } !=
Distance : 9

42
Tree	{ super ( String ) ; reportMatcher ( Any.ANY ) ; } value
Code	{ super ( String ) ; reportMatcher ( Any.ANY ) ; } value
Distance : 13

43
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

44
Tree	{ super ( String ) ; reportMatcher ( Any.ANY ) ; } i
Code	{ super ( String ) ; reportMatcher ( Any.ANY ) ; } i
Distance : 13

45
Tree	{ super ( String ) ; reportMatcher ( Any.ANY ) ; } +
Code	{ super ( String ) ; reportMatcher ( Any.ANY ) ; } +
Distance : 13

46
Tree	{ return ( String ) returnString ( Any.ANY ) ; } +
Code	{ return ( String ) returnString ( Any.ANY ) ; } +
Distance : 11

47
Tree	{ return reportMatcher ( Any.ANY ) . < String > reportMatcher () ; } !=
Code	{ return reportMatcher ( Any.ANY ) . < String > reportMatcher () ; } !=
Distance : 10

48
Tree	{ return returnString ( Any.ANY ) . < String > returnString () ; }
Code	{ return returnString ( Any.ANY ) . < String > returnString () ; }
Distance : 9

49
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } +
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } +
Distance : 12

========================================================================


========================================================================
Example Number: 96
Parent Code is: 
{ return ( T ) anyObject () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (802{val=anyObject}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnNull}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 6
-------------------------------------------------------------------------------
Cadidate List Length : 50
Correct
========================================================================
True

0
Tree	{ return ( T ) T . anyObject () ; }
Code	{ return ( T ) T . anyObject () ; }
Distance : 5

1
Tree	{ return anyObject () ; }
Code	{ return anyObject () ; }
Distance : 9

2
Tree	{ return ( T ) anyObject () ; }
Code	{ return ( T ) anyObject () ; }
Distance : 6

3
Tree	{ return this . T ; }
Code	{ return this . T ; }
Distance : 9

4
Tree	{ return ( T ) anyObject ( T ) ; }
Code	{ return ( T ) anyObject ( T ) ; }
Distance : 5

5
Tree	{ return ( T ) T . reportMatcher ( T ) ; }
Code	{ return ( T ) T . reportMatcher ( T ) ; }
Distance : 6

6
Tree	{ return reportMatcher ( Any.ANY ) . anyObject () ; }
Code	{ return reportMatcher ( Any.ANY ) . anyObject () ; }
Distance : 4

7
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Distance : 4

8
Tree	{ return anyObject ( Any.ANY ) . returnNull () ; }
Code	{ return anyObject ( Any.ANY ) . returnNull () ; }
Distance : 4

9
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . anyObject ( T ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . anyObject ( T ) ; }
Distance : 4

10
Tree	{ return ( T ) T . returnNull () ; }
Code	{ return ( T ) T . returnNull () ; }
Distance : 4

11
Tree	{ return ( T ) reportMatcher () ; }
Code	{ return ( T ) reportMatcher () ; }
Distance : 5

12
Tree	{ return ( T ) anyObject ( Any.ANY ) . returnNull ( T ) ; }
Code	{ return ( T ) anyObject ( Any.ANY ) . returnNull ( T ) ; }
Distance : 4

13
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } null
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } null
Distance : 4

14
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 8

15
Tree	{ return reportMatcher () ; } null
Code	{ return reportMatcher () ; } null
Distance : 9

16
Tree	{ return ( T ) reportMatcher () ; } i
Code	{ return ( T ) reportMatcher () ; } i
Distance : 6

17
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 4

18
Tree	{ return ( T ) anyObject ( Any.ANY ) . reportMatcher ( T ) ; }
Code	{ return ( T ) anyObject ( Any.ANY ) . reportMatcher ( T ) ; }
Distance : 5

19
Tree	{ return ( T ) anyObject ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( T ) anyObject ( Any.ANY ) . reportMatcher () ; }
Distance : 2

20
Tree	{ return ( T ) returnNull () ; }
Code	{ return ( T ) returnNull () ; }
Distance : 5

21
Tree	{ return reportMatcher ( Any.ANY ) . returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnNull () ; }
Distance : 3

22
Tree	{ return ( T ) returnNull ( T ) ; }
Code	{ return ( T ) returnNull ( T ) ; }
Distance : 5

23
Tree	{ return this . T ; } void
Code	{ return this . T ; } void
Distance : 10

24
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 1

25
Tree	{ return ( T ) returnNull ( Any.ANY ) ; }
Code	{ return ( T ) returnNull ( Any.ANY ) ; }
Distance : 4

26
Tree	{ return anyObject ( Any.ANY ) . reportMatcher () ; }
Code	{ return anyObject ( Any.ANY ) . reportMatcher () ; }
Distance : 5

27
Tree	{ return this . T ; } e
Code	{ return this . T ; } e
Distance : 10

28
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( T ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( T ) ; }
Distance : 3

29
Tree	{ return ( T ) T . reportMatcher ( T ) ; } i
Code	{ return ( T ) T . reportMatcher ( T ) ; } i
Distance : 7

30
Tree	{ return returnNull () ; }
Code	{ return returnNull () ; }
Distance : 8

31
Tree	{ return ( T ) T . reportMatcher ( T ) ; } null
Code	{ return ( T ) T . reportMatcher ( T ) ; } null
Distance : 7

32
Tree	{ return reportMatcher () ; } i
Code	{ return reportMatcher () ; } i
Distance : 9

33
Tree	{ return ( T ) reportMatcher ( T ) ; } null
Code	{ return ( T ) reportMatcher ( T ) ; } null
Distance : 5

34
Tree	{ return ( T ) reportMatcher () ; } null
Code	{ return ( T ) reportMatcher () ; } null
Distance : 6

35
Tree	{ return ( T ) reportMatcher ( T ) ; }
Code	{ return ( T ) reportMatcher ( T ) ; }
Distance : 4

36
Tree	{ return ( T ) T . reportMatcher () ; } i
Code	{ return ( T ) T . reportMatcher () ; } i
Distance : 6

37
Tree	{ return ( T ) T . reportMatcher () ; }
Code	{ return ( T ) T . reportMatcher () ; }
Distance : 5

38
Tree	{ return ( T ) T . returnNull ( T ) ; }
Code	{ return ( T ) T . returnNull ( T ) ; }
Distance : 7

39
Tree	{ return ( T ) anyObject ( Any.ANY ) ; }
Code	{ return ( T ) anyObject ( Any.ANY ) ; }
Distance : 4

40
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; }
Distance : 0

41
Tree	{ return ( T ) T . reportMatcher () ; } null
Code	{ return ( T ) T . reportMatcher () ; } null
Distance : 6

42
Tree	{ return this . T ; } T
Code	{ return this . T ; } T
Distance : 10

43
Tree	{ return ( T ) T . anyObject ( T ) ; }
Code	{ return ( T ) T . anyObject ( T ) ; }
Distance : 7

44
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } i
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } i
Distance : 4

45
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Distance : 3

46
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . anyObject () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . anyObject () ; }
Distance : 1

47
Tree	{ return this . T ; } compiler
Code	{ return this . T ; } compiler
Distance : 10

48
Tree	{ return ( T ) anyObject ( Any.ANY ) . returnNull () ; }
Code	{ return ( T ) anyObject ( Any.ANY ) . returnNull () ; }
Distance : 1

49
Tree	{ return ( T ) reportMatcher ( T ) ; } i
Code	{ return ( T ) reportMatcher ( T ) ; } i
Distance : 5

========================================================================


========================================================================
Example Number: 97
Parent Code is: 
{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return ( T ) reportMatcher ( new InstanceOf ( clazz ) ) . returnFor ( clazz ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnFor}) (214{val=(}) (800{val=clazz}) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (800{val=clazz}) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnFor}) (214{val=(}) (800{val=clazz}) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	{ return ( T ) returnFor ( clazz ) ; }
Code	{ return ( T ) returnFor ( clazz ) ; }
Distance : 9

1
Tree	{ return reportMatcher () ; } i
Code	{ return reportMatcher () ; } i
Distance : 16

2
Tree	{ return reportMatcher () ; } +
Code	{ return reportMatcher () ; } +
Distance : 16

3
Tree	{ return reportMatcher ( Any.ANY ) ; } +
Code	{ return reportMatcher ( Any.ANY ) ; } +
Distance : 14

4
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 14

5
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher ( clazz ) ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher ( clazz ) ; }
Distance : 9

6
Tree	{ T = T . reportMatcher ( T ) ; return null ; }
Code	{ T = T . reportMatcher ( T ) ; return null ; }
Distance : 13

7
Tree	{ return returnFor ( Any.ANY ) . returnFor ( clazz ) ; }
Code	{ return returnFor ( Any.ANY ) . returnFor ( clazz ) ; }
Distance : 9

8
Tree	{ return ( clazz ) reportMatcher ( clazz ) ; }
Code	{ return ( clazz ) reportMatcher ( clazz ) ; }
Distance : 10

9
Tree	{ return reportMatcher ( Any.ANY ) . returnFor ( T ) ; }
Code	{ return reportMatcher ( Any.ANY ) . returnFor ( T ) ; }
Distance : 9

10
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 13

11
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 14

12
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 15

13
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 14

14
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 14

15
Tree	{ clazz = T . reportMatcher ( T ) ; return null ; }
Code	{ clazz = T . reportMatcher ( T ) ; return null ; }
Distance : 13

16
Tree	{ return reportMatcher ( this , T ) ; }
Code	{ return reportMatcher ( this , T ) ; }
Distance : 13

17
Tree	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; }
Code	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; }
Distance : 8

18
Tree	{ return ( T ) reportMatcher ( clazz ) ; }
Code	{ return ( T ) reportMatcher ( clazz ) ; }
Distance : 9

19
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; }
Distance : 5

20
Tree	{ return reportMatcher ( this , clazz ) ; }
Code	{ return reportMatcher ( this , clazz ) ; }
Distance : 12

21
Tree	{ return ( clazz ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; }
Code	{ return ( clazz ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; }
Distance : 6

22
Tree	{ return returnFor ( this , clazz ) ; }
Code	{ return returnFor ( this , clazz ) ; }
Distance : 13

23
Tree	{ T = T . returnFor ( T ) ; return null ; }
Code	{ T = T . returnFor ( T ) ; return null ; }
Distance : 14

24
Tree	{ clazz = T . returnFor ( T ) ; return null ; }
Code	{ clazz = T . returnFor ( T ) ; return null ; }
Distance : 14

25
Tree	{ T = clazz . reportMatcher ( T ) ; return null ; }
Code	{ T = clazz . reportMatcher ( T ) ; return null ; }
Distance : 14

26
Tree	{ return ( T ) returnFor ( Any.ANY ) . returnFor ( clazz ) ; }
Code	{ return ( T ) returnFor ( Any.ANY ) . returnFor ( clazz ) ; }
Distance : 6

27
Tree	{ return this . T . returnFor ( clazz ) ; }
Code	{ return this . T . returnFor ( clazz ) ; }
Distance : 11

28
Tree	{ return returnFor ( Any.ANY ) . reportMatcher ( clazz ) ; }
Code	{ return returnFor ( Any.ANY ) . reportMatcher ( clazz ) ; }
Distance : 10

29
Tree	{ return this . T . returnFor ( T ) ; }
Code	{ return this . T . returnFor ( T ) ; }
Distance : 12

30
Tree	{ return ( clazz ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( clazz ) reportMatcher ( Any.ANY ) ; }
Distance : 11

31
Tree	{ return returnFor ( Any.ANY ) ; }
Code	{ return returnFor ( Any.ANY ) ; }
Distance : 13

32
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Distance : 10

33
Tree	{ returnFor ( Any.ANY ) ; return null ; }
Code	{ returnFor ( Any.ANY ) ; return null ; }
Distance : 15

34
Tree	{ return ( clazz ) returnFor ( clazz ) ; }
Code	{ return ( clazz ) returnFor ( clazz ) ; }
Distance : 9

35
Tree	{ return this . T . reportMatcher ( T ) ; }
Code	{ return this . T . reportMatcher ( T ) ; }
Distance : 13

36
Tree	{ return ( clazz ) returnFor ( Any.ANY ) ; }
Code	{ return ( clazz ) returnFor ( Any.ANY ) ; }
Distance : 10

37
Tree	{ return returnFor () ; }
Code	{ return returnFor () ; }
Distance : 15

38
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } !=
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } !=
Distance : 11

39
Tree	{ return reportMatcher ( Any.ANY ) ; } value
Code	{ return reportMatcher ( Any.ANY ) ; } value
Distance : 14

40
Tree	{ return reportMatcher () ; } value
Code	{ return reportMatcher () ; } value
Distance : 16

41
Tree	{ return ( T ) returnFor ( Any.ANY ) ; }
Code	{ return ( T ) returnFor ( Any.ANY ) ; }
Distance : 10

42
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( clazz ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( clazz ) ; }
Distance : 6

43
Tree	{ return this . clazz . returnFor ( T ) ; }
Code	{ return this . clazz . returnFor ( T ) ; }
Distance : 11

44
Tree	{ return returnFor ( this , T ) ; }
Code	{ return returnFor ( this , T ) ; }
Distance : 14

45
Tree	{ return ( T ) reportMatcher ( T ) ; }
Code	{ return ( T ) reportMatcher ( T ) ; }
Distance : 10

46
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( T ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( T ) ; }
Distance : 6

47
Tree	{ return this . clazz . returnFor ( clazz ) ; }
Code	{ return this . clazz . returnFor ( clazz ) ; }
Distance : 10

48
Tree	{ return reportMatcher ( Any.ANY ) ; } i
Code	{ return reportMatcher ( Any.ANY ) ; } i
Distance : 14

49
Tree	{ return reportMatcher ( this , T ) ; } !=
Code	{ return reportMatcher ( this , T ) ; } !=
Distance : 14

========================================================================


========================================================================
Example Number: 98
Parent Code is: 
{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return ( T ) reportMatcher ( new InstanceOf ( Object . class ) ) . returnNull () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnNull}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Object})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnNull}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	{ return ( T ) returnNull ( Object ) ; }
Code	{ return ( T ) returnNull ( Object ) ; }
Distance : 10

1
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Distance : 10

2
Tree	{ return ( T ) reportMatcher () ; }
Code	{ return ( T ) reportMatcher () ; }
Distance : 11

3
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 14

4
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 16

5
Tree	{ return ( Object ) returnNull () ; }
Code	{ return ( Object ) returnNull () ; }
Distance : 11

6
Tree	{ return reportMatcher () ; } value
Code	{ return reportMatcher () ; } value
Distance : 15

7
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 14

8
Tree	{ return STRING_CONSTANT ; } e
Code	{ return STRING_CONSTANT ; } e
Distance : 17

9
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 16

10
Tree	{ return ( Object ) reportMatcher ( T ) ; }
Code	{ return ( Object ) reportMatcher ( T ) ; }
Distance : 11

11
Tree	{ return ( T ) T . returnNull ( Object ) ; }
Code	{ return ( T ) T . returnNull ( Object ) ; }
Distance : 10

12
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; }
Distance : 7

13
Tree	{ return ( T ) Object . returnNull ( T ) ; }
Code	{ return ( T ) Object . returnNull ( T ) ; }
Distance : 11

14
Tree	{ return null ; }
Code	{ return null ; }
Distance : 16

15
Tree	{ return ( T ) reportMatcher ( T ) ; }
Code	{ return ( T ) reportMatcher ( T ) ; }
Distance : 10

16
Tree	{ return ( T ) T . reportMatcher ( T ) ; }
Code	{ return ( T ) T . reportMatcher ( T ) ; }
Distance : 11

17
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 16

18
Tree	{ return ( T ) T . reportMatcher ( Object ) ; }
Code	{ return ( T ) T . reportMatcher ( Object ) ; }
Distance : 10

19
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 14

20
Tree	{ return returnNull () ; }
Code	{ return returnNull () ; }
Distance : 14

21
Tree	{ return ( Object ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Object ) reportMatcher ( Any.ANY ) ; }
Distance : 11

22
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 16

23
Tree	{ return ( T ) reportMatcher ( Object ) ; }
Code	{ return ( T ) reportMatcher ( Object ) ; }
Distance : 9

24
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( Object ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( Object ) ; }
Distance : 10

25
Tree	{ return ( T ) returnNull ( Any.ANY ) . returnNull ( T ) ; }
Code	{ return ( T ) returnNull ( Any.ANY ) . returnNull ( T ) ; }
Distance : 11

26
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( T ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( T ) ; }
Distance : 10

27
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( Object ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( Object ) ; }
Distance : 10

28
Tree	{ return ( Object ) reportMatcher () ; }
Code	{ return ( Object ) reportMatcher () ; }
Distance : 12

29
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; } !=
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; } !=
Distance : 11

30
Tree	{ return ( T ) returnNull ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( T ) returnNull ( Any.ANY ) . reportMatcher () ; }
Distance : 9

31
Tree	{ return STRING_CONSTANT ; } void
Code	{ return STRING_CONSTANT ; } void
Distance : 17

32
Tree	{ return reportMatcher () ; } i
Code	{ return reportMatcher () ; } i
Distance : 15

33
Tree	{ return ( T ) returnNull () ; }
Code	{ return ( T ) returnNull () ; }
Distance : 11

34
Tree	{ returnNull ( Any.ANY ) ; return null ; }
Code	{ returnNull ( Any.ANY ) ; return null ; }
Distance : 15

35
Tree	{ return STRING_CONSTANT ; } T
Code	{ return STRING_CONSTANT ; } T
Distance : 17

36
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 14

37
Tree	{ return ( T ) returnNull ( Any.ANY ) ; }
Code	{ return ( T ) returnNull ( Any.ANY ) ; }
Distance : 11

38
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

39
Tree	{ return ( T ) returnNull ( Any.ANY ) . returnNull () ; }
Code	{ return ( T ) returnNull ( Any.ANY ) . returnNull () ; }
Distance : 8

40
Tree	{ return ( T ) returnNull ( T ) ; }
Code	{ return ( T ) returnNull ( T ) ; }
Distance : 11

41
Tree	{ return ( Object ) reportMatcher ( Any.ANY ) . returnNull () ; }
Code	{ return ( Object ) reportMatcher ( Any.ANY ) . returnNull () ; }
Distance : 8

42
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 16

43
Tree	{ return ( T ) T . returnNull ( T ) ; }
Code	{ return ( T ) T . returnNull ( T ) ; }
Distance : 11

44
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 14

45
Tree	{ return STRING_CONSTANT ; } compiler
Code	{ return STRING_CONSTANT ; } compiler
Distance : 17

46
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . reportMatcher ( T ) ; }
Distance : 10

47
Tree	{ return ( Object ) returnNull ( Any.ANY ) ; }
Code	{ return ( Object ) returnNull ( Any.ANY ) ; }
Distance : 12

48
Tree	{ return reportMatcher () ; } +
Code	{ return reportMatcher () ; } +
Distance : 15

49
Tree	{ return ( T ) reportMatcher () ; } !=
Code	{ return ( T ) reportMatcher () ; } !=
Distance : 12

========================================================================


========================================================================
Example Number: 99
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Short . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Short})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	{ super ( Short ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Short ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

1
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

2
Tree	{ return returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

3
Tree	{ return ( Short ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( Short ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

4
Tree	{ reportMatcher ( Any.ANY ) ; Short = Any.ANY . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; Short = Any.ANY . returnZero () ; }
Distance : 8

5
Tree	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

6
Tree	{ super ( Short ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( Short ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

7
Tree	{ return ( Short ) returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return ( Short ) returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

8
Tree	{ super ( Short ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( Short ) ; returnZero ( Any.ANY ) ; }
Distance : 12

9
Tree	{ super ( Short ) ; returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Short ) ; returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 10

10
Tree	{ return ( Short ) returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Short ) returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 9

11
Tree	{ return returnZero ( Any.ANY ) . < Short > reportMatcher () ; }
Code	{ return returnZero ( Any.ANY ) . < Short > reportMatcher () ; }
Distance : 10

12
Tree	{ returnZero ( Any.ANY ) ; Short = Any.ANY . reportMatcher () ; }
Code	{ returnZero ( Any.ANY ) ; Short = Any.ANY . reportMatcher () ; }
Distance : 10

13
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } !=
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } !=
Distance : 8

14
Tree	{ super ( Short ) ; reportMatcher ( Any.ANY ) . returnZero () ; } !=
Code	{ super ( Short ) ; reportMatcher ( Any.ANY ) . returnZero () ; } !=
Distance : 10

15
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

16
Tree	{ return this . Short ; } T
Code	{ return this . Short ; } T
Distance : 13

17
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } i
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } i
Distance : 12

18
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 7

19
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

20
Tree	{ returnZero ( Any.ANY ) ; return null ; }
Code	{ returnZero ( Any.ANY ) ; return null ; }
Distance : 12

21
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

22
Tree	{ return reportMatcher ( Any.ANY ) . < Short > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Short > reportMatcher () ; }
Distance : 9

23
Tree	{ return this . Short ; } compiler
Code	{ return this . Short ; } compiler
Distance : 13

24
Tree	{ return this . Short ; } void
Code	{ return this . Short ; } void
Distance : 13

25
Tree	{ reportMatcher ( Any.ANY ) ; Short = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; Short = Any.ANY . reportMatcher () ; }
Distance : 9

26
Tree	{ return ( Short ) reportMatcher ( Any.ANY ) . returnZero () ; } !=
Code	{ return ( Short ) reportMatcher ( Any.ANY ) . returnZero () ; } !=
Distance : 9

27
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

28
Tree	{ return reportMatcher ( Any.ANY ) . < Short > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Short > returnZero () ; }
Distance : 8

29
Tree	{ return ( Short ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Short ) reportMatcher ( Any.ANY ) ; }
Distance : 10

30
Tree	{ super ( Short ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( Short ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

31
Tree	{ return ( Short ) returnZero ( Any.ANY ) ; }
Code	{ return ( Short ) returnZero ( Any.ANY ) ; }
Distance : 10

32
Tree	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 9

33
Tree	{ return this . Short ; } e
Code	{ return this . Short ; } e
Distance : 13

34
Tree	{ returnZero ( Any.ANY ) ; Short = Any.ANY . returnZero () ; }
Code	{ returnZero ( Any.ANY ) ; Short = Any.ANY . returnZero () ; }
Distance : 9

35
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } value
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } value
Distance : 12

36
Tree	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

37
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

38
Tree	{ return ( Short ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Short ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

39
Tree	{ return ( Short ) reportMatcher ( Any.ANY ) ; } value
Code	{ return ( Short ) reportMatcher ( Any.ANY ) ; } value
Distance : 11

40
Tree	{ reportMatcher ( Any.ANY ) ; Short = Any.ANY . returnZero () ; } !=
Code	{ reportMatcher ( Any.ANY ) ; Short = Any.ANY . returnZero () ; } !=
Distance : 9

41
Tree	{ return this . Short ; }
Code	{ return this . Short ; }
Distance : 12

42
Tree	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; } value
Code	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; } value
Distance : 13

43
Tree	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; } i
Code	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; } i
Distance : 13

44
Tree	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; } +
Code	{ super ( Short ) ; reportMatcher ( Any.ANY ) ; } +
Distance : 13

45
Tree	{ return reportMatcher ( Any.ANY ) . < Short > returnZero () ; } !=
Code	{ return reportMatcher ( Any.ANY ) . < Short > returnZero () ; } !=
Distance : 9

46
Tree	{ return ( Short ) reportMatcher ( Any.ANY ) ; } i
Code	{ return ( Short ) reportMatcher ( Any.ANY ) ; } i
Distance : 11

47
Tree	{ return returnZero ( Any.ANY ) . < Short > returnZero () ; }
Code	{ return returnZero ( Any.ANY ) . < Short > returnZero () ; }
Distance : 9

48
Tree	{ return ( Short ) reportMatcher ( Any.ANY ) ; } +
Code	{ return ( Short ) reportMatcher ( Any.ANY ) ; } +
Distance : 11

49
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } +
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } +
Distance : 12

========================================================================


========================================================================
Example Number: 100
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Double . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Double})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	{ super ( Double ) ; returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Double ) ; returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 10

1
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

2
Tree	{ super ( Double ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( Double ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

3
Tree	{ return ( Double ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( Double ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

4
Tree	{ return ( Double ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Double ) reportMatcher ( Any.ANY ) ; }
Distance : 10

5
Tree	{ super ( Double ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( Double ) ; returnZero ( Any.ANY ) ; }
Distance : 12

6
Tree	{ return ( Double ) returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return ( Double ) returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

7
Tree	{ return ( Double ) returnZero ( Any.ANY ) ; }
Code	{ return ( Double ) returnZero ( Any.ANY ) ; }
Distance : 10

8
Tree	{ reportMatcher ( Any.ANY ) ; Double = Any.ANY . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; Double = Any.ANY . returnZero () ; }
Distance : 8

9
Tree	{ return ( Double ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Double ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

10
Tree	{ return ( Double ) returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Double ) returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 9

11
Tree	{ return returnZero ( Any.ANY ) . < Double > reportMatcher () ; }
Code	{ return returnZero ( Any.ANY ) . < Double > reportMatcher () ; }
Distance : 10

12
Tree	{ returnZero ( Any.ANY ) ; Double = Any.ANY . reportMatcher () ; }
Code	{ returnZero ( Any.ANY ) ; Double = Any.ANY . reportMatcher () ; }
Distance : 10

13
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } !=
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } !=
Distance : 8

14
Tree	{ super ( Double ) ; reportMatcher ( Any.ANY ) . returnZero () ; } !=
Code	{ super ( Double ) ; reportMatcher ( Any.ANY ) . returnZero () ; } !=
Distance : 10

15
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

16
Tree	{ return this . Double ; } T
Code	{ return this . Double ; } T
Distance : 13

17
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } i
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } i
Distance : 12

18
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 7

19
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

20
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

21
Tree	{ returnZero ( Any.ANY ) ; return null ; }
Code	{ returnZero ( Any.ANY ) ; return null ; }
Distance : 12

22
Tree	{ return reportMatcher ( Any.ANY ) . < Double > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Double > reportMatcher () ; }
Distance : 9

23
Tree	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 9

24
Tree	{ return this . Double ; } compiler
Code	{ return this . Double ; } compiler
Distance : 13

25
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

26
Tree	{ return this . Double ; } void
Code	{ return this . Double ; } void
Distance : 13

27
Tree	{ return ( Double ) reportMatcher ( Any.ANY ) . returnZero () ; } !=
Code	{ return ( Double ) reportMatcher ( Any.ANY ) . returnZero () ; } !=
Distance : 9

28
Tree	{ return returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

29
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

30
Tree	{ reportMatcher ( Any.ANY ) ; Double = Any.ANY . returnZero () ; } !=
Code	{ reportMatcher ( Any.ANY ) ; Double = Any.ANY . returnZero () ; } !=
Distance : 9

31
Tree	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

32
Tree	{ return reportMatcher ( Any.ANY ) . < Double > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Double > returnZero () ; }
Distance : 8

33
Tree	{ super ( Double ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Double ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

34
Tree	{ super ( Double ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( Double ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

35
Tree	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

36
Tree	{ return this . Double ; } e
Code	{ return this . Double ; } e
Distance : 13

37
Tree	{ return this . Double ; }
Code	{ return this . Double ; }
Distance : 12

38
Tree	{ reportMatcher ( Any.ANY ) ; Double = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; Double = Any.ANY . reportMatcher () ; }
Distance : 9

39
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } value
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } value
Distance : 12

40
Tree	{ return returnZero ( Any.ANY ) . < Double > returnZero () ; }
Code	{ return returnZero ( Any.ANY ) . < Double > returnZero () ; }
Distance : 9

41
Tree	{ return ( Double ) reportMatcher ( Any.ANY ) ; } value
Code	{ return ( Double ) reportMatcher ( Any.ANY ) ; } value
Distance : 11

42
Tree	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; } value
Code	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; } value
Distance : 13

43
Tree	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; } i
Code	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; } i
Distance : 13

44
Tree	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; } +
Code	{ super ( Double ) ; reportMatcher ( Any.ANY ) ; } +
Distance : 13

45
Tree	{ return reportMatcher ( Any.ANY ) . < Double > returnZero () ; } !=
Code	{ return reportMatcher ( Any.ANY ) . < Double > returnZero () ; } !=
Distance : 9

46
Tree	{ return ( Double ) reportMatcher ( Any.ANY ) ; } i
Code	{ return ( Double ) reportMatcher ( Any.ANY ) ; } i
Distance : 11

47
Tree	{ returnZero ( Any.ANY ) ; Double = Any.ANY . returnZero () ; }
Code	{ returnZero ( Any.ANY ) ; Double = Any.ANY . returnZero () ; }
Distance : 9

48
Tree	{ return ( Double ) reportMatcher ( Any.ANY ) ; } +
Code	{ return ( Double ) reportMatcher ( Any.ANY ) ; } +
Distance : 11

49
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } +
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } +
Distance : 12

========================================================================


========================================================================
Example Number: 101
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Float . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Float})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	{ reportMatcher ( Any.ANY ) ; Float = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; Float = Any.ANY . reportMatcher () ; }
Distance : 9

1
Tree	{ super ( Float ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( Float ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

2
Tree	{ return this . Float ; }
Code	{ return this . Float ; }
Distance : 12

3
Tree	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

4
Tree	{ return ( Float ) returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return ( Float ) returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

5
Tree	{ return reportMatcher ( Any.ANY ) . < Float > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Float > returnZero () ; }
Distance : 8

6
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

7
Tree	{ returnZero ( Any.ANY ) ; return null ; }
Code	{ returnZero ( Any.ANY ) ; return null ; }
Distance : 12

8
Tree	{ return reportMatcher ( Any.ANY ) . < Float > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Float > reportMatcher () ; }
Distance : 9

9
Tree	{ return ( Float ) returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Float ) returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 9

10
Tree	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 9

11
Tree	{ return returnZero ( Any.ANY ) . < Float > reportMatcher () ; }
Code	{ return returnZero ( Any.ANY ) . < Float > reportMatcher () ; }
Distance : 10

12
Tree	{ returnZero ( Any.ANY ) ; Float = Any.ANY . reportMatcher () ; }
Code	{ returnZero ( Any.ANY ) ; Float = Any.ANY . reportMatcher () ; }
Distance : 10

13
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } !=
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } !=
Distance : 8

14
Tree	{ super ( Float ) ; reportMatcher ( Any.ANY ) . returnZero () ; } !=
Code	{ super ( Float ) ; reportMatcher ( Any.ANY ) . returnZero () ; } !=
Distance : 10

15
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

16
Tree	{ return this . Float ; } T
Code	{ return this . Float ; } T
Distance : 13

17
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } i
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } i
Distance : 12

18
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 7

19
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

20
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

21
Tree	{ return ( Float ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( Float ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

22
Tree	{ return ( Float ) reportMatcher ( Any.ANY ) . returnZero () ; } !=
Code	{ return ( Float ) reportMatcher ( Any.ANY ) . returnZero () ; } !=
Distance : 9

23
Tree	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

24
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

25
Tree	{ return this . Float ; } compiler
Code	{ return this . Float ; } compiler
Distance : 13

26
Tree	{ super ( Float ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Float ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

27
Tree	{ return this . Float ; } void
Code	{ return this . Float ; } void
Distance : 13

28
Tree	{ return returnZero ( Any.ANY ) . < Float > returnZero () ; }
Code	{ return returnZero ( Any.ANY ) . < Float > returnZero () ; }
Distance : 9

29
Tree	{ return ( Float ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Float ) reportMatcher ( Any.ANY ) ; }
Distance : 10

30
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

31
Tree	{ return ( Float ) reportMatcher ( Any.ANY ) ; } value
Code	{ return ( Float ) reportMatcher ( Any.ANY ) ; } value
Distance : 11

32
Tree	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; } value
Code	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; } value
Distance : 13

33
Tree	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; } i
Code	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; } i
Distance : 13

34
Tree	{ super ( Float ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( Float ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

35
Tree	{ return ( Float ) returnZero ( Any.ANY ) ; }
Code	{ return ( Float ) returnZero ( Any.ANY ) ; }
Distance : 10

36
Tree	{ return returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

37
Tree	{ return ( Float ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Float ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

38
Tree	{ super ( Float ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( Float ) ; returnZero ( Any.ANY ) ; }
Distance : 12

39
Tree	{ reportMatcher ( Any.ANY ) ; Float = Any.ANY . returnZero () ; } !=
Code	{ reportMatcher ( Any.ANY ) ; Float = Any.ANY . returnZero () ; } !=
Distance : 9

40
Tree	{ return this . Float ; } e
Code	{ return this . Float ; } e
Distance : 13

41
Tree	{ reportMatcher ( Any.ANY ) ; Float = Any.ANY . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; Float = Any.ANY . returnZero () ; }
Distance : 8

42
Tree	{ super ( Float ) ; returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Float ) ; returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 10

43
Tree	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; } +
Code	{ super ( Float ) ; reportMatcher ( Any.ANY ) ; } +
Distance : 13

44
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } value
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } value
Distance : 12

45
Tree	{ return reportMatcher ( Any.ANY ) . < Float > returnZero () ; } !=
Code	{ return reportMatcher ( Any.ANY ) . < Float > returnZero () ; } !=
Distance : 9

46
Tree	{ return ( Float ) reportMatcher ( Any.ANY ) ; } i
Code	{ return ( Float ) reportMatcher ( Any.ANY ) ; } i
Distance : 11

47
Tree	{ returnZero ( Any.ANY ) ; Float = Any.ANY . returnZero () ; }
Code	{ returnZero ( Any.ANY ) ; Float = Any.ANY . returnZero () ; }
Distance : 9

48
Tree	{ return ( Float ) reportMatcher ( Any.ANY ) ; } +
Code	{ return ( Float ) reportMatcher ( Any.ANY ) ; } +
Distance : 11

49
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } +
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } +
Distance : 12

========================================================================


========================================================================
Example Number: 102
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Long . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Long})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	{ super ( Long ) ; returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Long ) ; returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 10

1
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

2
Tree	{ return ( Long ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Long ) reportMatcher ( Any.ANY ) ; }
Distance : 10

3
Tree	{ super ( Long ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( Long ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

4
Tree	{ return returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

5
Tree	{ return ( Long ) returnZero ( Any.ANY ) ; }
Code	{ return ( Long ) returnZero ( Any.ANY ) ; }
Distance : 10

6
Tree	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

7
Tree	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

8
Tree	{ reportMatcher ( Any.ANY ) ; Long = Any.ANY . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; Long = Any.ANY . returnZero () ; }
Distance : 8

9
Tree	{ reportMatcher ( Any.ANY ) ; Long = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; Long = Any.ANY . reportMatcher () ; }
Distance : 9

10
Tree	{ return ( Long ) returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Long ) returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 9

11
Tree	{ return returnZero ( Any.ANY ) . < Long > reportMatcher () ; }
Code	{ return returnZero ( Any.ANY ) . < Long > reportMatcher () ; }
Distance : 10

12
Tree	{ returnZero ( Any.ANY ) ; Long = Any.ANY . reportMatcher () ; }
Code	{ returnZero ( Any.ANY ) ; Long = Any.ANY . reportMatcher () ; }
Distance : 10

13
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } !=
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } !=
Distance : 8

14
Tree	{ super ( Long ) ; reportMatcher ( Any.ANY ) . returnZero () ; } !=
Code	{ super ( Long ) ; reportMatcher ( Any.ANY ) . returnZero () ; } !=
Distance : 10

15
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

16
Tree	{ return this . Long ; } T
Code	{ return this . Long ; } T
Distance : 13

17
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } i
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } i
Distance : 12

18
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 7

19
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

20
Tree	{ returnZero ( Any.ANY ) ; return null ; }
Code	{ returnZero ( Any.ANY ) ; return null ; }
Distance : 12

21
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

22
Tree	{ return reportMatcher ( Any.ANY ) . < Long > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Long > reportMatcher () ; }
Distance : 9

23
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

24
Tree	{ return this . Long ; } compiler
Code	{ return this . Long ; } compiler
Distance : 13

25
Tree	{ return this . Long ; } void
Code	{ return this . Long ; } void
Distance : 13

26
Tree	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 9

27
Tree	{ return ( Long ) reportMatcher ( Any.ANY ) . returnZero () ; } !=
Code	{ return ( Long ) reportMatcher ( Any.ANY ) . returnZero () ; } !=
Distance : 9

28
Tree	{ return this . Long ; }
Code	{ return this . Long ; }
Distance : 12

29
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

30
Tree	{ return ( Long ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( Long ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

31
Tree	{ return ( Long ) returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return ( Long ) returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

32
Tree	{ super ( Long ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( Long ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

33
Tree	{ returnZero ( Any.ANY ) ; Long = Any.ANY . returnZero () ; }
Code	{ returnZero ( Any.ANY ) ; Long = Any.ANY . returnZero () ; }
Distance : 9

34
Tree	{ super ( Long ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( Long ) ; returnZero ( Any.ANY ) ; }
Distance : 12

35
Tree	{ return this . Long ; } e
Code	{ return this . Long ; } e
Distance : 13

36
Tree	{ return ( Long ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Long ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

37
Tree	{ return ( Long ) reportMatcher ( Any.ANY ) ; } value
Code	{ return ( Long ) reportMatcher ( Any.ANY ) ; } value
Distance : 11

38
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } value
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } value
Distance : 12

39
Tree	{ return reportMatcher ( Any.ANY ) . < Long > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Long > returnZero () ; }
Distance : 8

40
Tree	{ super ( Long ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Long ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

41
Tree	{ reportMatcher ( Any.ANY ) ; Long = Any.ANY . returnZero () ; } !=
Code	{ reportMatcher ( Any.ANY ) ; Long = Any.ANY . returnZero () ; } !=
Distance : 9

42
Tree	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; } value
Code	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; } value
Distance : 13

43
Tree	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; } i
Code	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; } i
Distance : 13

44
Tree	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; } +
Code	{ super ( Long ) ; reportMatcher ( Any.ANY ) ; } +
Distance : 13

45
Tree	{ return reportMatcher ( Any.ANY ) . < Long > returnZero () ; } !=
Code	{ return reportMatcher ( Any.ANY ) . < Long > returnZero () ; } !=
Distance : 9

46
Tree	{ return ( Long ) reportMatcher ( Any.ANY ) ; } i
Code	{ return ( Long ) reportMatcher ( Any.ANY ) ; } i
Distance : 11

47
Tree	{ return returnZero ( Any.ANY ) . < Long > returnZero () ; }
Code	{ return returnZero ( Any.ANY ) . < Long > returnZero () ; }
Distance : 9

48
Tree	{ return ( Long ) reportMatcher ( Any.ANY ) ; } +
Code	{ return ( Long ) reportMatcher ( Any.ANY ) ; } +
Distance : 11

49
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } +
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } +
Distance : 12

========================================================================


========================================================================
Example Number: 103
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Integer . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Integer})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	{ super ( Integer ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Integer ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

1
Tree	{ return ( Integer ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( Integer ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

2
Tree	{ return ( Integer ) returnZero ( Any.ANY ) ; }
Code	{ return ( Integer ) returnZero ( Any.ANY ) ; }
Distance : 10

3
Tree	{ super ( Integer ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( Integer ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

4
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

5
Tree	{ super ( Integer ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( Integer ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

6
Tree	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

7
Tree	{ reportMatcher ( Any.ANY ) ; Integer = Any.ANY . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; Integer = Any.ANY . returnZero () ; }
Distance : 8

8
Tree	{ return returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

9
Tree	{ super ( Integer ) ; returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Integer ) ; returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 10

10
Tree	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 9

11
Tree	{ return returnZero ( Any.ANY ) . < Integer > reportMatcher () ; }
Code	{ return returnZero ( Any.ANY ) . < Integer > reportMatcher () ; }
Distance : 10

12
Tree	{ returnZero ( Any.ANY ) ; Integer = Any.ANY . reportMatcher () ; }
Code	{ returnZero ( Any.ANY ) ; Integer = Any.ANY . reportMatcher () ; }
Distance : 10

13
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } !=
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } !=
Distance : 8

14
Tree	{ super ( Integer ) ; reportMatcher ( Any.ANY ) . returnZero () ; } !=
Code	{ super ( Integer ) ; reportMatcher ( Any.ANY ) . returnZero () ; } !=
Distance : 10

15
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

16
Tree	{ return this . Integer ; } T
Code	{ return this . Integer ; } T
Distance : 13

17
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } i
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } i
Distance : 12

18
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 7

19
Tree	{ return ( Integer ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Integer ) reportMatcher ( Any.ANY ) ; }
Distance : 10

20
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

21
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

22
Tree	{ return ( Integer ) reportMatcher ( Any.ANY ) . returnZero () ; } !=
Code	{ return ( Integer ) reportMatcher ( Any.ANY ) . returnZero () ; } !=
Distance : 9

23
Tree	{ return this . Integer ; } compiler
Code	{ return this . Integer ; } compiler
Distance : 13

24
Tree	{ return this . Integer ; } void
Code	{ return this . Integer ; } void
Distance : 13

25
Tree	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

26
Tree	{ reportMatcher ( Any.ANY ) ; Integer = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; Integer = Any.ANY . reportMatcher () ; }
Distance : 9

27
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

28
Tree	{ return returnZero ( Any.ANY ) . < Integer > returnZero () ; }
Code	{ return returnZero ( Any.ANY ) . < Integer > returnZero () ; }
Distance : 9

29
Tree	{ return ( Integer ) reportMatcher ( Any.ANY ) ; } value
Code	{ return ( Integer ) reportMatcher ( Any.ANY ) ; } value
Distance : 11

30
Tree	{ return reportMatcher ( Any.ANY ) . < Integer > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Integer > returnZero () ; }
Distance : 8

31
Tree	{ returnZero ( Any.ANY ) ; return null ; }
Code	{ returnZero ( Any.ANY ) ; return null ; }
Distance : 12

32
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

33
Tree	{ return this . Integer ; }
Code	{ return this . Integer ; }
Distance : 12

34
Tree	{ return this . Integer ; } e
Code	{ return this . Integer ; } e
Distance : 13

35
Tree	{ reportMatcher ( Any.ANY ) ; Integer = Any.ANY . returnZero () ; } !=
Code	{ reportMatcher ( Any.ANY ) ; Integer = Any.ANY . returnZero () ; } !=
Distance : 9

36
Tree	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; } value
Code	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; } value
Distance : 13

37
Tree	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; } i
Code	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; } i
Distance : 13

38
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } value
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } value
Distance : 12

39
Tree	{ super ( Integer ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( Integer ) ; returnZero ( Any.ANY ) ; }
Distance : 12

40
Tree	{ return ( Integer ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Integer ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

41
Tree	{ return ( Integer ) returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return ( Integer ) returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

42
Tree	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; } +
Code	{ super ( Integer ) ; reportMatcher ( Any.ANY ) ; } +
Distance : 13

43
Tree	{ return reportMatcher ( Any.ANY ) . < Integer > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Integer > reportMatcher () ; }
Distance : 9

44
Tree	{ return ( Integer ) returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Integer ) returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 9

45
Tree	{ return reportMatcher ( Any.ANY ) . < Integer > returnZero () ; } !=
Code	{ return reportMatcher ( Any.ANY ) . < Integer > returnZero () ; } !=
Distance : 9

46
Tree	{ return ( Integer ) reportMatcher ( Any.ANY ) ; } i
Code	{ return ( Integer ) reportMatcher ( Any.ANY ) ; } i
Distance : 11

47
Tree	{ returnZero ( Any.ANY ) ; Integer = Any.ANY . returnZero () ; }
Code	{ returnZero ( Any.ANY ) ; Integer = Any.ANY . returnZero () ; }
Distance : 9

48
Tree	{ return ( Integer ) reportMatcher ( Any.ANY ) ; } +
Code	{ return ( Integer ) reportMatcher ( Any.ANY ) ; } +
Distance : 11

49
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } +
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } +
Distance : 12

========================================================================


========================================================================
Example Number: 104
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnChar () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Character . class ) ) . returnChar () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnChar}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Character})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnChar}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	{ super ( Character ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Character ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

1
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

2
Tree	{ return this . Character ; }
Code	{ return this . Character ; }
Distance : 12

3
Tree	{ return ( Character ) returnChar ( Any.ANY ) ; }
Code	{ return ( Character ) returnChar ( Any.ANY ) ; }
Distance : 10

4
Tree	{ return reportMatcher ( Any.ANY ) . < Character > returnChar () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Character > returnChar () ; }
Distance : 8

5
Tree	{ super ( Character ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Character ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

6
Tree	{ super ( Character ) ; reportMatcher ( Any.ANY ) . returnChar () ; }
Code	{ super ( Character ) ; reportMatcher ( Any.ANY ) . returnChar () ; }
Distance : 9

7
Tree	{ return returnChar ( Any.ANY ) . returnChar () ; }
Code	{ return returnChar ( Any.ANY ) . returnChar () ; }
Distance : 8

8
Tree	{ returnChar ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnChar ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

9
Tree	{ reportMatcher ( Any.ANY ) ; Character = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; Character = Any.ANY . reportMatcher () ; }
Distance : 9

10
Tree	{ return ( Character ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Character ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

11
Tree	{ return returnChar ( Any.ANY ) . < Character > reportMatcher () ; }
Code	{ return returnChar ( Any.ANY ) . < Character > reportMatcher () ; }
Distance : 10

12
Tree	{ returnChar ( Any.ANY ) ; Character = Any.ANY . reportMatcher () ; }
Code	{ returnChar ( Any.ANY ) ; Character = Any.ANY . reportMatcher () ; }
Distance : 10

13
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; } !=
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; } !=
Distance : 8

14
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) . returnChar () ; } !=
Code	{ super ( Character ) ; returnChar ( Any.ANY ) . returnChar () ; } !=
Distance : 10

15
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

16
Tree	{ return this . Character ; } T
Code	{ return this . Character ; } T
Distance : 13

17
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } i
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } i
Distance : 12

18
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; }
Distance : 7

19
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

20
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

21
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 11

22
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Character ) ; returnChar ( Any.ANY ) . reportMatcher () ; }
Distance : 10

23
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

24
Tree	{ return this . Character ; } compiler
Code	{ return this . Character ; } compiler
Distance : 13

25
Tree	{ return ( Character ) returnChar ( Any.ANY ) . returnChar () ; } !=
Code	{ return ( Character ) returnChar ( Any.ANY ) . returnChar () ; } !=
Distance : 9

26
Tree	{ return reportMatcher ( Any.ANY ) . < Character > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Character > reportMatcher () ; }
Distance : 9

27
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) ; }
Code	{ super ( Character ) ; returnChar ( Any.ANY ) ; }
Distance : 12

28
Tree	{ return this . Character ; } void
Code	{ return this . Character ; } void
Distance : 13

29
Tree	{ return returnChar ( Any.ANY ) . < Character > returnChar () ; }
Code	{ return returnChar ( Any.ANY ) . < Character > returnChar () ; }
Distance : 9

30
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

31
Tree	{ return ( Character ) returnChar ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Character ) returnChar ( Any.ANY ) . reportMatcher () ; }
Distance : 9

32
Tree	{ return ( Character ) returnChar ( Any.ANY ) ; } value
Code	{ return ( Character ) returnChar ( Any.ANY ) ; } value
Distance : 11

33
Tree	{ return this . Character ; } e
Code	{ return this . Character ; } e
Distance : 13

34
Tree	{ return ( Character ) returnChar ( Any.ANY ) . returnChar () ; }
Code	{ return ( Character ) returnChar ( Any.ANY ) . returnChar () ; }
Distance : 8

35
Tree	{ return ( Character ) reportMatcher ( Any.ANY ) . returnChar () ; }
Code	{ return ( Character ) reportMatcher ( Any.ANY ) . returnChar () ; }
Distance : 8

36
Tree	{ return returnChar ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnChar ( Any.ANY ) . reportMatcher () ; }
Distance : 9

37
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) . returnChar () ; }
Code	{ super ( Character ) ; returnChar ( Any.ANY ) . returnChar () ; }
Distance : 9

38
Tree	{ reportMatcher ( Any.ANY ) ; Character = Any.ANY . returnChar () ; }
Code	{ reportMatcher ( Any.ANY ) ; Character = Any.ANY . returnChar () ; }
Distance : 8

39
Tree	{ reportMatcher ( Any.ANY ) ; Character = Any.ANY . returnChar () ; } !=
Code	{ reportMatcher ( Any.ANY ) ; Character = Any.ANY . returnChar () ; } !=
Distance : 9

40
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } value
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } value
Distance : 12

41
Tree	{ return ( Character ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Character ) reportMatcher ( Any.ANY ) ; }
Distance : 10

42
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) ; } value
Code	{ super ( Character ) ; returnChar ( Any.ANY ) ; } value
Distance : 13

43
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) ; } i
Code	{ super ( Character ) ; returnChar ( Any.ANY ) ; } i
Distance : 13

44
Tree	{ super ( Character ) ; returnChar ( Any.ANY ) ; } +
Code	{ super ( Character ) ; returnChar ( Any.ANY ) ; } +
Distance : 13

45
Tree	{ return reportMatcher ( Any.ANY ) . < Character > returnChar () ; } !=
Code	{ return reportMatcher ( Any.ANY ) . < Character > returnChar () ; } !=
Distance : 9

46
Tree	{ return ( Character ) returnChar ( Any.ANY ) ; } i
Code	{ return ( Character ) returnChar ( Any.ANY ) ; } i
Distance : 11

47
Tree	{ returnChar ( Any.ANY ) ; Character = Any.ANY . returnChar () ; }
Code	{ returnChar ( Any.ANY ) ; Character = Any.ANY . returnChar () ; }
Distance : 9

48
Tree	{ return ( Character ) returnChar ( Any.ANY ) ; } +
Code	{ return ( Character ) returnChar ( Any.ANY ) ; } +
Distance : 11

49
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } +
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } +
Distance : 12

========================================================================


========================================================================
Example Number: 105
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Byte . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Byte})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	{ super ( Byte ) ; returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Byte ) ; returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 10

1
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

2
Tree	{ returnZero ( Any.ANY ) ; return null ; }
Code	{ returnZero ( Any.ANY ) ; return null ; }
Distance : 12

3
Tree	{ super ( Byte ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( Byte ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

4
Tree	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

5
Tree	{ return this . Byte ; }
Code	{ return this . Byte ; }
Distance : 12

6
Tree	{ return reportMatcher ( Any.ANY ) . < Byte > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Byte > returnZero () ; }
Distance : 8

7
Tree	{ super ( Byte ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( Byte ) ; returnZero ( Any.ANY ) ; }
Distance : 12

8
Tree	{ reportMatcher ( Any.ANY ) ; Byte = Any.ANY . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; Byte = Any.ANY . returnZero () ; }
Distance : 8

9
Tree	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 9

10
Tree	{ return ( Byte ) returnZero ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Byte ) returnZero ( Any.ANY ) . reportMatcher () ; }
Distance : 9

11
Tree	{ return returnZero ( Any.ANY ) . < Byte > reportMatcher () ; }
Code	{ return returnZero ( Any.ANY ) . < Byte > reportMatcher () ; }
Distance : 10

12
Tree	{ returnZero ( Any.ANY ) ; Byte = Any.ANY . reportMatcher () ; }
Code	{ returnZero ( Any.ANY ) ; Byte = Any.ANY . reportMatcher () ; }
Distance : 10

13
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; } !=
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; } !=
Distance : 8

14
Tree	{ super ( Byte ) ; reportMatcher ( Any.ANY ) . returnZero () ; } !=
Code	{ super ( Byte ) ; reportMatcher ( Any.ANY ) . returnZero () ; } !=
Distance : 10

15
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

16
Tree	{ return this . Byte ; } T
Code	{ return this . Byte ; } T
Distance : 13

17
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } i
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } i
Distance : 12

18
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 7

19
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

20
Tree	{ return ( Byte ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( Byte ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

21
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

22
Tree	{ return reportMatcher ( Any.ANY ) . < Byte > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Byte > reportMatcher () ; }
Distance : 9

23
Tree	{ return ( Byte ) reportMatcher ( Any.ANY ) . returnZero () ; } !=
Code	{ return ( Byte ) reportMatcher ( Any.ANY ) . returnZero () ; } !=
Distance : 9

24
Tree	{ return this . Byte ; } compiler
Code	{ return this . Byte ; } compiler
Distance : 13

25
Tree	{ super ( Byte ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Byte ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

26
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

27
Tree	{ return this . Byte ; } void
Code	{ return this . Byte ; } void
Distance : 13

28
Tree	{ return ( Byte ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Byte ) reportMatcher ( Any.ANY ) ; }
Distance : 10

29
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

30
Tree	{ returnZero ( Any.ANY ) ; Byte = Any.ANY . returnZero () ; }
Code	{ returnZero ( Any.ANY ) ; Byte = Any.ANY . returnZero () ; }
Distance : 9

31
Tree	{ return ( Byte ) reportMatcher ( Any.ANY ) ; } value
Code	{ return ( Byte ) reportMatcher ( Any.ANY ) ; } value
Distance : 11

32
Tree	{ return ( Byte ) returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return ( Byte ) returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

33
Tree	{ super ( Byte ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( Byte ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

34
Tree	{ reportMatcher ( Any.ANY ) ; Byte = Any.ANY . returnZero () ; } !=
Code	{ reportMatcher ( Any.ANY ) ; Byte = Any.ANY . returnZero () ; } !=
Distance : 9

35
Tree	{ return returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

36
Tree	{ reportMatcher ( Any.ANY ) ; Byte = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; Byte = Any.ANY . reportMatcher () ; }
Distance : 9

37
Tree	{ return ( Byte ) returnZero ( Any.ANY ) ; }
Code	{ return ( Byte ) returnZero ( Any.ANY ) ; }
Distance : 10

38
Tree	{ return this . Byte ; } e
Code	{ return this . Byte ; } e
Distance : 13

39
Tree	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; } value
Code	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; } value
Distance : 13

40
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } value
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } value
Distance : 12

41
Tree	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnZero ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

42
Tree	{ return ( Byte ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Byte ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

43
Tree	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; } i
Code	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; } i
Distance : 13

44
Tree	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; } +
Code	{ super ( Byte ) ; reportMatcher ( Any.ANY ) ; } +
Distance : 13

45
Tree	{ return reportMatcher ( Any.ANY ) . < Byte > returnZero () ; } !=
Code	{ return reportMatcher ( Any.ANY ) . < Byte > returnZero () ; } !=
Distance : 9

46
Tree	{ return ( Byte ) reportMatcher ( Any.ANY ) ; } i
Code	{ return ( Byte ) reportMatcher ( Any.ANY ) ; } i
Distance : 11

47
Tree	{ return returnZero ( Any.ANY ) . < Byte > returnZero () ; }
Code	{ return returnZero ( Any.ANY ) . < Byte > returnZero () ; }
Distance : 9

48
Tree	{ return ( Byte ) reportMatcher ( Any.ANY ) ; } +
Code	{ return ( Byte ) reportMatcher ( Any.ANY ) ; } +
Distance : 11

49
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } +
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } +
Distance : 12

========================================================================


========================================================================
Example Number: 106
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnFalse () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Boolean . class ) ) . returnFalse () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnFalse}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Boolean})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnFalse}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	{ reportMatcher ( Any.ANY ) ; Boolean = Any.ANY . reportMatcher () ; }
Code	{ reportMatcher ( Any.ANY ) ; Boolean = Any.ANY . reportMatcher () ; }
Distance : 9

1
Tree	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Code	{ reportMatcher ( Any.ANY ) ; return super(); ; }
Distance : 11

2
Tree	{ return this . Boolean ; }
Code	{ return this . Boolean ; }
Distance : 12

3
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; }
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; }
Distance : 12

4
Tree	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Code	{ reportMatcher ( Any.ANY ) ; return continue; ; }
Distance : 11

5
Tree	{ reportMatcher ( Any.ANY ) ; return break; ; }
Code	{ reportMatcher ( Any.ANY ) ; return break; ; }
Distance : 11

6
Tree	{ return ( Boolean ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Boolean ) reportMatcher ( Any.ANY ) ; }
Distance : 10

7
Tree	{ super ( Boolean ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Boolean ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

8
Tree	{ return reportMatcher ( Any.ANY ) . < Boolean > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Boolean > reportMatcher () ; }
Distance : 9

9
Tree	{ return ( Boolean ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Boolean ) reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 9

10
Tree	{ return returnFalse ( Any.ANY ) . reportMatcher () ; }
Code	{ return returnFalse ( Any.ANY ) . reportMatcher () ; }
Distance : 9

11
Tree	{ return returnFalse ( Any.ANY ) . < Boolean > reportMatcher () ; }
Code	{ return returnFalse ( Any.ANY ) . < Boolean > reportMatcher () ; }
Distance : 10

12
Tree	{ returnFalse ( Any.ANY ) ; Boolean = Any.ANY . reportMatcher () ; }
Code	{ returnFalse ( Any.ANY ) ; Boolean = Any.ANY . reportMatcher () ; }
Distance : 10

13
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } !=
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; } !=
Distance : 8

14
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) . returnFalse () ; } !=
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) . returnFalse () ; } !=
Distance : 10

15
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

16
Tree	{ return this . Boolean ; } T
Code	{ return this . Boolean ; } T
Distance : 13

17
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } i
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } i
Distance : 12

18
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; }
Distance : 7

19
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) . returnFalse () ; }
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) . returnFalse () ; }
Distance : 9

20
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

21
Tree	{ return ( Boolean ) returnFalse ( Any.ANY ) . returnFalse () ; }
Code	{ return ( Boolean ) returnFalse ( Any.ANY ) . returnFalse () ; }
Distance : 8

22
Tree	{ return ( Boolean ) returnFalse ( Any.ANY ) . returnFalse () ; } !=
Code	{ return ( Boolean ) returnFalse ( Any.ANY ) . returnFalse () ; } !=
Distance : 9

23
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) . reportMatcher () ; }
Distance : 10

24
Tree	{ reportMatcher ( Any.ANY ) ; return return; ; }
Code	{ reportMatcher ( Any.ANY ) ; return return; ; }
Distance : 11

25
Tree	{ return this . Boolean ; } compiler
Code	{ return this . Boolean ; } compiler
Distance : 13

26
Tree	{ returnFalse ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ returnFalse ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

27
Tree	{ return returnFalse ( Any.ANY ) . < Boolean > returnFalse () ; }
Code	{ return returnFalse ( Any.ANY ) . < Boolean > returnFalse () ; }
Distance : 9

28
Tree	{ return this . Boolean ; } void
Code	{ return this . Boolean ; } void
Distance : 13

29
Tree	{ return ( Boolean ) returnFalse ( Any.ANY ) ; }
Code	{ return ( Boolean ) returnFalse ( Any.ANY ) ; }
Distance : 10

30
Tree	{ return ( Boolean ) returnFalse ( Any.ANY ) ; } value
Code	{ return ( Boolean ) returnFalse ( Any.ANY ) ; } value
Distance : 11

31
Tree	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 8

32
Tree	{ super ( Boolean ) ; reportMatcher ( Any.ANY ) . returnFalse () ; }
Code	{ super ( Boolean ) ; reportMatcher ( Any.ANY ) . returnFalse () ; }
Distance : 9

33
Tree	{ reportMatcher ( Any.ANY ) ; Boolean = Any.ANY . returnFalse () ; }
Code	{ reportMatcher ( Any.ANY ) ; Boolean = Any.ANY . returnFalse () ; }
Distance : 8

34
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; } value
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; } value
Distance : 13

35
Tree	{ return ( Boolean ) returnFalse ( Any.ANY ) . reportMatcher () ; }
Code	{ return ( Boolean ) returnFalse ( Any.ANY ) . reportMatcher () ; }
Distance : 9

36
Tree	{ return this . Boolean ; } e
Code	{ return this . Boolean ; } e
Distance : 13

37
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; } i
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; } i
Distance : 13

38
Tree	{ return ( Boolean ) reportMatcher ( Any.ANY ) . returnFalse () ; }
Code	{ return ( Boolean ) reportMatcher ( Any.ANY ) . returnFalse () ; }
Distance : 8

39
Tree	{ reportMatcher ( Any.ANY ) ; Boolean = Any.ANY . returnFalse () ; } !=
Code	{ reportMatcher ( Any.ANY ) ; Boolean = Any.ANY . returnFalse () ; } !=
Distance : 9

40
Tree	{ return reportMatcher ( Any.ANY ) . < Boolean > returnFalse () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Boolean > returnFalse () ; }
Distance : 8

41
Tree	{ return returnFalse ( Any.ANY ) . returnFalse () ; }
Code	{ return returnFalse ( Any.ANY ) . returnFalse () ; }
Distance : 8

42
Tree	{ super ( Boolean ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Code	{ super ( Boolean ) ; reportMatcher ( Any.ANY ) . reportMatcher () ; }
Distance : 10

43
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } value
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } value
Distance : 12

44
Tree	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; } +
Code	{ super ( Boolean ) ; returnFalse ( Any.ANY ) ; } +
Distance : 13

45
Tree	{ return ( Boolean ) returnFalse ( Any.ANY ) ; } i
Code	{ return ( Boolean ) returnFalse ( Any.ANY ) ; } i
Distance : 11

46
Tree	{ return reportMatcher ( Any.ANY ) . < Boolean > returnFalse () ; } !=
Code	{ return reportMatcher ( Any.ANY ) . < Boolean > returnFalse () ; } !=
Distance : 9

47
Tree	{ returnFalse ( Any.ANY ) ; Boolean = Any.ANY . returnFalse () ; }
Code	{ returnFalse ( Any.ANY ) ; Boolean = Any.ANY . returnFalse () ; }
Distance : 9

48
Tree	{ return ( Boolean ) returnFalse ( Any.ANY ) ; } +
Code	{ return ( Boolean ) returnFalse ( Any.ANY ) ; } +
Distance : 11

49
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } +
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; } +
Distance : 12

========================================================================


========================================================================
Example Number: 107
Parent Code is: 
catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
-------------------------------------------------------------------------------
Child code is: 
catch ( AssertionError e ) { error = handleVerifyException ( e ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (12 (331{val=catch}) (214{val=(}) (44 (43 (40{val=org.mockito.exceptions.verification.junit.ArgumentsAreDifferent})) (800{val=e})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=error}) (204{val==}) (32 (802{val=handleVerifyException}) (214{val=(}) (800{val=e}) (215{val=)}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (12 (331{val=catch}) (214{val=(}) (44 (43 (801{val=AssertionError})) (800{val=e})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=error}) (204{val==}) (32 (802{val=handleVerifyException}) (214{val=(}) (800{val=e}) (215{val=)}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/5/parent/src_org_mockito_internal_verification_VerificationOverTimeImpl.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = e ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = e ( e ) ; }
Distance : 3

1
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = error ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = error ( e ) ; }
Distance : 3

2
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , handleVerifyException ( error ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , handleVerifyException ( error ) ) ; }
Distance : 7

3
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = error . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = error . handleVerifyException () ; }
Distance : 6

4
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . e ) ; }
Distance : 5

5
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; }
Distance : 5

6
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException ( e , e ) ; }
Distance : 5

7
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( error ) ; }
Distance : 3

8
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( e ) ) ; }
Distance : 6

9
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = error . handleVerifyException ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = error . handleVerifyException ( e , e ) ; }
Distance : 6

10
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Distance : 1

11
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( e , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( e , handleVerifyException ( e ) ) ; }
Distance : 7

12
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( error ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( error ) ) ; }
Distance : 7

13
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Distance : 3

14
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error ) ; }
Distance : 2

15
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e , e . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e , e . handleVerifyException () ) ; }
Distance : 10

16
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException ( error , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException ( error , e ) ; }
Distance : 5

17
Tree	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e ) ; }
Code	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e ) ; }
Distance : 3

18
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e , error . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e , error . handleVerifyException () ) ; }
Distance : 10

19
Tree	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Code	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Distance : 2

20
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException () ; }
Distance : 5

21
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , handleVerifyException ( e ) ) ; }
Distance : 6

22
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( e ) ) ; }
Distance : 7

23
Tree	catch ( public org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Code	catch ( public org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Distance : 2

24
Tree	catch ( static org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Code	catch ( static org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Distance : 2

25
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( error ) ; }
Distance : 3

26
Tree	catch ( abstract org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Code	catch ( abstract org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Distance : 2

27
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e , this . error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e , this . error ) ; }
Distance : 6

28
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e ) ; }
Distance : 2

29
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = e . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = e . handleVerifyException () ; }
Distance : 5

30
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + error , error . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + error , error . handleVerifyException () ) ; }
Distance : 10

31
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( STRING_CONSTANT + e , error . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { handleVerifyException ( STRING_CONSTANT + e , error . handleVerifyException () ) ; }
Distance : 11

32
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = e ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = e ( e ) ; }
Distance : 2

33
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = e . handleVerifyException ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = e . handleVerifyException ( e , e ) ; }
Distance : 5

34
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( e ) ; }
Distance : 4

35
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error ) ; }
Distance : 4

36
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException ( e , error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error . handleVerifyException ( e , error ) ; }
Distance : 5

37
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e , this . error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e , this . error ) ; }
Distance : 6

38
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + error , e . handleVerifyException () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + error , e . handleVerifyException () ) ; }
Distance : 10

39
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e ) ; }
Distance : 4

40
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = e . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = e . handleVerifyException () ; }
Distance : 6

41
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( e ) ) ; }
Distance : 7

42
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = error ( e ) ; }
Distance : 2

43
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = error . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = error . handleVerifyException () ; }
Distance : 6

44
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( error , handleVerifyException ( error ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( error , handleVerifyException ( error ) ) ; }
Distance : 6

45
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent error ) { error = handleVerifyException ( e ) ; }
Distance : 2

46
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( error , handleVerifyException ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( error , handleVerifyException ( e ) ) ; }
Distance : 5

47
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error , this . error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( error , this . error ) ; }
Distance : 6

48
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( error ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( NUMBER_CONSTANT , handleVerifyException ( error ) ) ; }
Distance : 8

49
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { e = handleVerifyException ( error ) ; }
Distance : 5

========================================================================


========================================================================
Example Number: 108
Parent Code is: 
new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
-------------------------------------------------------------------------------
Child code is: 
new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + safelyGetMockName ( undesired . getMock () ) + STRING_CONSTANT , undesired . getLocation () ) )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (14 (304{val=new}) (43 (801{val=VerificationInOrderFailure})) (214{val=(}) (32 (802{val=join}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (14 (304{val=new}) (43 (801{val=LocationImpl})) (216{val=()})) (234{val=,}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (800{val=undesired}) (235{val=.}) (802{val=getMock}) (216{val=()})) (200{val=+}) (45{val=STRING_CONSTANT})) (234{val=,}) (32 (800{val=undesired}) (235{val=.}) (802{val=getLocation}) (216{val=()})) (215{val=)})) (215{val=)})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (14 (304{val=new}) (43 (801{val=VerificationInOrderFailure})) (214{val=(}) (32 (802{val=join}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (14 (304{val=new}) (43 (801{val=LocationImpl})) (216{val=()})) (234{val=,}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (802{val=safelyGetMockName}) (214{val=(}) (32 (800{val=undesired}) (235{val=.}) (802{val=getMock}) (216{val=()})) (215{val=)})) (200{val=+}) (45{val=STRING_CONSTANT})) (234{val=,}) (32 (800{val=undesired}) (235{val=.}) (802{val=getLocation}) (216{val=()})) (215{val=)})) (215{val=)})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/4/parent/src_org_mockito_exceptions_Reporter.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 15

1
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Distance : 13

2
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Distance : 13

3
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Distance : 13

4
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Distance : 13

5
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 11

6
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 11

7
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join ( undesired ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join ( undesired ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 12

8
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired . join () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired . join () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Distance : 17

9
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Distance : 16

10
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join ( undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join ( undesired . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Distance : 16

11
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 12

12
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired . join () , undesired . getLocation () ) ) , STRING_CONSTANT , super , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock ( undesired . join () , undesired . getLocation () ) ) , STRING_CONSTANT , super , undesired ) )
Distance : 17

13
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 11

14
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Distance : 17

15
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Distance : 13

16
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Distance : 13

17
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Distance : 13

18
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 10

19
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 15

20
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . safelyGetMockName ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . safelyGetMockName ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 14

21
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . getMock ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . getMock ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

22
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 10

23
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getLocation () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 15

24
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 10

25
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . safelyGetMockName ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . safelyGetMockName ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 12

26
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . getMock ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . getMock ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 14

27
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . safelyGetMockName () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 15

28
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . safelyGetMockName ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . safelyGetMockName ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 14

29
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . getMock ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . getMock ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 14

30
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . safelyGetMockName ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . safelyGetMockName ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 12

31
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 10

32
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Distance : 11

33
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT , undesired . getLocation ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT , undesired . getLocation ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 11

34
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . getMock ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () . getMock ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

35
Tree	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( CHAR_CONS , this ) )
Code	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( CHAR_CONS , this ) )
Distance : 20

36
Tree	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( false , this ) )
Code	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( false , this ) )
Distance : 20

37
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock ( undesired . getMock () , undesired . getLocation () ) , undesired ) )
Distance : 16

38
Tree	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( CHAR_CONS , this ) )
Code	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( CHAR_CONS , this ) )
Distance : 20

39
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . getMock ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . getMock ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

40
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . getLocation ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () . getLocation ( undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

41
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 9

42
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 10

43
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new VerificationInOrderFailure () , STRING_CONSTANT , undesired . getLocation ( undesired . getLocation () , undesired . getLocation () ) , undesired ) )
Distance : 12

44
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . join () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT , undesired . getLocation ( undesired . join () , undesired . getLocation () ) , undesired ) )
Distance : 11

45
Tree	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( false , this ) )
Code	new VerificationInOrderFailure ( new VerificationInOrderFailure ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( false , this ) )
Distance : 20

46
Tree	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( super , this ) )
Code	new VerificationInOrderFailure ( new LocationImpl ( undesired . join ( undesired . join () , undesired . getLocation () ) ) . getLocation ( super , this ) )
Distance : 20

47
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Distance : 12

48
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . join () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Distance : 13

49
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl ( undesired . getMock () ) , STRING_CONSTANT , undesired . getMock ( undesired ) , undesired ) )
Distance : 12

========================================================================


========================================================================
Example Number: 109
Parent Code is: 
join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () , scenario )
-------------------------------------------------------------------------------
Child code is: 
join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + safelyGetMockName ( undesired . getMock () ) + STRING_CONSTANT , undesired . getLocation () , scenario )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (32 (802{val=join}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (14 (304{val=new}) (43 (801{val=LocationImpl})) (216{val=()})) (234{val=,}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (800{val=undesired}) (235{val=.}) (802{val=getMock}) (216{val=()})) (200{val=+}) (45{val=STRING_CONSTANT})) (234{val=,}) (32 (800{val=undesired}) (235{val=.}) (802{val=getLocation}) (216{val=()})) (234{val=,}) (800{val=scenario}) (215{val=)})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (32 (802{val=join}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (14 (304{val=new}) (43 (801{val=LocationImpl})) (216{val=()})) (234{val=,}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (802{val=safelyGetMockName}) (214{val=(}) (32 (800{val=undesired}) (235{val=.}) (802{val=getMock}) (216{val=()})) (215{val=)})) (200{val=+}) (45{val=STRING_CONSTANT})) (234{val=,}) (32 (800{val=undesired}) (235{val=.}) (802{val=getLocation}) (216{val=()})) (234{val=,}) (800{val=scenario}) (215{val=)})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/4/parent/src_org_mockito_exceptions_Reporter.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

1
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 15

2
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , class , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , class , STRING_CONSTANT )
Distance : 15

3
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

4
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

5
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

6
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

7
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

8
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . safelyGetMockName () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

9
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , class , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , class , STRING_CONSTANT )
Distance : 15

10
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , CHAR_CONS , STRING_CONSTANT )
Distance : 15

11
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 19

12
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

13
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

14
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , join ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , join ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

15
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 18

16
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( scenario ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( scenario ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

17
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( scenario ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( scenario ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

18
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 21

19
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( ProcessDefines.UNKNOWN_DEFINE_WARNING ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( ProcessDefines.UNKNOWN_DEFINE_WARNING ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

20
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( FeatureSet.ES6 ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( FeatureSet.ES6 ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

21
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , join ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , join ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 19

22
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( LanguageMode.ECMASCRIPT8 ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( LanguageMode.ECMASCRIPT8 ) , false , STRING_CONSTANT )
Distance : 20

23
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getMock () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 17

24
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , safelyGetMockName ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , safelyGetMockName ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

25
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

26
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( LanguageMode.ECMASCRIPT5 ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( LanguageMode.ECMASCRIPT5 ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

27
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( LanguageMode.ECMASCRIPT5 ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( LanguageMode.ECMASCRIPT5 ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

28
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Distance : 15

29
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Distance : 15

30
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( java.util.Locale.US ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( java.util.Locale.US ) , false , STRING_CONSTANT )
Distance : 20

31
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( Node.FLAG_LOCAL_RESULTS ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( Node.FLAG_LOCAL_RESULTS ) , false , STRING_CONSTANT )
Distance : 20

32
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( FeatureSet.TYPESCRIPT ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( FeatureSet.TYPESCRIPT ) , false , STRING_CONSTANT )
Distance : 20

33
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 20

34
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 20

35
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , CHAR_CONS , STRING_CONSTANT )
Distance : 18

36
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , false , STRING_CONSTANT )
Distance : 18

37
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , CHAR_CONS , STRING_CONSTANT )
Distance : 18

38
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , false , STRING_CONSTANT )
Distance : 18

39
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , class , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation () , class , STRING_CONSTANT )
Distance : 18

40
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 19

41
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join ( undesired ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

42
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( java.util.Locale.US ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation () , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () . getLocation ( java.util.Locale.US ) , false , STRING_CONSTANT )
Distance : 20

43
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( FeatureSet.ES6 ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( FeatureSet.ES6 ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

44
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl () , STRING_CONSTANT , safelyGetMockName ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 18

45
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , join ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getMock ( undesired ) , new LocationImpl () , STRING_CONSTANT , join ( undesired . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 19

46
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getLocation ( undesired ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , undesired . getLocation () , STRING_CONSTANT )
Distance : 21

47
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join ( undesired ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . join ( undesired ) , new LocationImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 20

48
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , getLocation ( scenario ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , getLocation ( scenario ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

49
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , join ( scenario ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , join ( scenario ) , new LocationImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 16

========================================================================


========================================================================
Example Number: 110
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

1
Tree	return convertLocalToUTC ( localInstant , instant , false ) ;
Code	return convertLocalToUTC ( localInstant , instant , false ) ;
Distance : 4

2
Tree	return instant . convertLocalToUTC ( localInstant , false ) ;
Code	return instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

3
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Distance : 4

4
Tree	return convertLocalToUTC ( iZone , localInstant , false ) ;
Code	return convertLocalToUTC ( iZone , localInstant , false ) ;
Distance : 5

5
Tree	return iZone != AllowedSolutions.ANY_SIDE ;
Code	return iZone != AllowedSolutions.ANY_SIDE ;
Distance : 9

6
Tree	return convertLocalToUTC ( localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 5

7
Tree	return iZone . convertLocalToUTC ( this , instant ) ;
Code	return iZone . convertLocalToUTC ( this , instant ) ;
Distance : 3

8
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant ) ;
Distance : 4

9
Tree	return iZone . convertLocalToUTC ( instant , false ) ;
Code	return iZone . convertLocalToUTC ( instant , false ) ;
Distance : 3

10
Tree	return iZone . convertLocalToUTC ( iZone , false ) ;
Code	return iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 3

11
Tree	return localInstant . convertLocalToUTC ( this , localInstant ) ;
Code	return localInstant . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

12
Tree	return convertLocalToUTC ( localInstant , instant ) ;
Code	return convertLocalToUTC ( localInstant , instant ) ;
Distance : 4

13
Tree	return instant . convertLocalToUTC ( this , localInstant ) ;
Code	return instant . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

14
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 4

15
Tree	return convertLocalToUTC ( localInstant , iZone , false ) ;
Code	return convertLocalToUTC ( localInstant , iZone , false ) ;
Distance : 4

16
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 8

17
Tree	return convertLocalToUTC ( localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone ) ;
Distance : 5

18
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Distance : 3

19
Tree	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 8

20
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 9

21
Tree	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

22
Tree	return localInstant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return localInstant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 5

23
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Distance : 6

24
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( iZone , localInstant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( iZone , localInstant ) ;
Distance : 10

25
Tree	return convertLocalToUTC ( iZone , iZone , false ) ;
Code	return convertLocalToUTC ( iZone , iZone , false ) ;
Distance : 5

26
Tree	return ! iZone && ! iZone . convertLocalToUTC () ;
Code	return ! iZone && ! iZone . convertLocalToUTC () ;
Distance : 10

27
Tree	return convertLocalToUTC ( localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone ) ;
Distance : 4

28
Tree	return convertLocalToUTC ( localInstant , instant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , instant , localInstant ) ;
Distance : 4

29
Tree	return convertLocalToUTC ( iZone , iZone ) ;
Code	return convertLocalToUTC ( iZone , iZone ) ;
Distance : 6

30
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Distance : 4

31
Tree	return ! instant && ! iZone . convertLocalToUTC () ;
Code	return ! instant && ! iZone . convertLocalToUTC () ;
Distance : 10

32
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Distance : 6

33
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Distance : 6

34
Tree	return convertLocalToUTC ( iZone , localInstant ) ;
Code	return convertLocalToUTC ( iZone , localInstant ) ;
Distance : 6

35
Tree	return ! iZone && ! localInstant . convertLocalToUTC () ;
Code	return ! iZone && ! localInstant . convertLocalToUTC () ;
Distance : 9

36
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Distance : 4

37
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Distance : 4

38
Tree	return convertLocalToUTC ( localInstant , iZone , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone , iZone ) ;
Distance : 6

39
Tree	return ! iZone && ! instant . convertLocalToUTC () ;
Code	return ! iZone && ! instant . convertLocalToUTC () ;
Distance : 10

40
Tree	return ! localInstant && ! iZone . convertLocalToUTC () ;
Code	return ! localInstant && ! iZone . convertLocalToUTC () ;
Distance : 10

41
Tree	return iZone . convertLocalToUTC ( this , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , iZone ) ;
Distance : 4

42
Tree	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Distance : 4

43
Tree	return instant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return instant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 5

44
Tree	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Code	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Distance : 9

45
Tree	return iZone != printTimeZone ;
Code	return iZone != printTimeZone ;
Distance : 9

46
Tree	return convertLocalToUTC ( localInstant , instant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , instant , localInstant , iZone ) ;
Distance : 6

47
Tree	return iZone != TimeUnit.SECONDS ;
Code	return iZone != TimeUnit.SECONDS ;
Distance : 9

48
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

49
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

========================================================================


========================================================================
Example Number: 111
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

1
Tree	return convertLocalToUTC ( localInstant , instant , false ) ;
Code	return convertLocalToUTC ( localInstant , instant , false ) ;
Distance : 4

2
Tree	return instant . convertLocalToUTC ( localInstant , false ) ;
Code	return instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

3
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Distance : 4

4
Tree	return convertLocalToUTC ( iZone , localInstant , false ) ;
Code	return convertLocalToUTC ( iZone , localInstant , false ) ;
Distance : 5

5
Tree	return iZone != AllowedSolutions.ANY_SIDE ;
Code	return iZone != AllowedSolutions.ANY_SIDE ;
Distance : 9

6
Tree	return convertLocalToUTC ( localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 5

7
Tree	return iZone . convertLocalToUTC ( this , instant ) ;
Code	return iZone . convertLocalToUTC ( this , instant ) ;
Distance : 3

8
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant ) ;
Distance : 4

9
Tree	return iZone . convertLocalToUTC ( instant , false ) ;
Code	return iZone . convertLocalToUTC ( instant , false ) ;
Distance : 3

10
Tree	return iZone . convertLocalToUTC ( iZone , false ) ;
Code	return iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 3

11
Tree	return localInstant . convertLocalToUTC ( this , localInstant ) ;
Code	return localInstant . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

12
Tree	return convertLocalToUTC ( localInstant , instant ) ;
Code	return convertLocalToUTC ( localInstant , instant ) ;
Distance : 4

13
Tree	return instant . convertLocalToUTC ( this , localInstant ) ;
Code	return instant . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

14
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 4

15
Tree	return convertLocalToUTC ( localInstant , iZone , false ) ;
Code	return convertLocalToUTC ( localInstant , iZone , false ) ;
Distance : 4

16
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 8

17
Tree	return convertLocalToUTC ( localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone ) ;
Distance : 5

18
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Distance : 3

19
Tree	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 8

20
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 9

21
Tree	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

22
Tree	return localInstant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return localInstant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 5

23
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Distance : 6

24
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( iZone , localInstant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( iZone , localInstant ) ;
Distance : 10

25
Tree	return convertLocalToUTC ( iZone , iZone , false ) ;
Code	return convertLocalToUTC ( iZone , iZone , false ) ;
Distance : 5

26
Tree	return ! iZone && ! iZone . convertLocalToUTC () ;
Code	return ! iZone && ! iZone . convertLocalToUTC () ;
Distance : 10

27
Tree	return convertLocalToUTC ( localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone ) ;
Distance : 4

28
Tree	return convertLocalToUTC ( localInstant , instant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , instant , localInstant ) ;
Distance : 4

29
Tree	return convertLocalToUTC ( iZone , iZone ) ;
Code	return convertLocalToUTC ( iZone , iZone ) ;
Distance : 6

30
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Distance : 4

31
Tree	return ! instant && ! iZone . convertLocalToUTC () ;
Code	return ! instant && ! iZone . convertLocalToUTC () ;
Distance : 10

32
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Distance : 6

33
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Distance : 6

34
Tree	return convertLocalToUTC ( iZone , localInstant ) ;
Code	return convertLocalToUTC ( iZone , localInstant ) ;
Distance : 6

35
Tree	return ! iZone && ! localInstant . convertLocalToUTC () ;
Code	return ! iZone && ! localInstant . convertLocalToUTC () ;
Distance : 9

36
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Distance : 4

37
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Distance : 4

38
Tree	return convertLocalToUTC ( localInstant , iZone , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone , iZone ) ;
Distance : 6

39
Tree	return ! iZone && ! instant . convertLocalToUTC () ;
Code	return ! iZone && ! instant . convertLocalToUTC () ;
Distance : 10

40
Tree	return ! localInstant && ! iZone . convertLocalToUTC () ;
Code	return ! localInstant && ! iZone . convertLocalToUTC () ;
Distance : 10

41
Tree	return iZone . convertLocalToUTC ( this , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , iZone ) ;
Distance : 4

42
Tree	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Distance : 4

43
Tree	return instant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return instant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 5

44
Tree	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Code	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Distance : 9

45
Tree	return iZone != printTimeZone ;
Code	return iZone != printTimeZone ;
Distance : 9

46
Tree	return convertLocalToUTC ( localInstant , instant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , instant , localInstant , iZone ) ;
Distance : 6

47
Tree	return iZone != TimeUnit.SECONDS ;
Code	return iZone != TimeUnit.SECONDS ;
Distance : 9

48
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

49
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

========================================================================


========================================================================
Example Number: 112
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

1
Tree	return convertLocalToUTC ( localInstant , instant , false ) ;
Code	return convertLocalToUTC ( localInstant , instant , false ) ;
Distance : 4

2
Tree	return instant . convertLocalToUTC ( localInstant , false ) ;
Code	return instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

3
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Distance : 4

4
Tree	return convertLocalToUTC ( iZone , localInstant , false ) ;
Code	return convertLocalToUTC ( iZone , localInstant , false ) ;
Distance : 5

5
Tree	return iZone != AllowedSolutions.ANY_SIDE ;
Code	return iZone != AllowedSolutions.ANY_SIDE ;
Distance : 9

6
Tree	return convertLocalToUTC ( localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 5

7
Tree	return iZone . convertLocalToUTC ( this , instant ) ;
Code	return iZone . convertLocalToUTC ( this , instant ) ;
Distance : 3

8
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant ) ;
Distance : 4

9
Tree	return iZone . convertLocalToUTC ( instant , false ) ;
Code	return iZone . convertLocalToUTC ( instant , false ) ;
Distance : 3

10
Tree	return iZone . convertLocalToUTC ( iZone , false ) ;
Code	return iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 3

11
Tree	return localInstant . convertLocalToUTC ( this , localInstant ) ;
Code	return localInstant . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

12
Tree	return convertLocalToUTC ( localInstant , instant ) ;
Code	return convertLocalToUTC ( localInstant , instant ) ;
Distance : 4

13
Tree	return instant . convertLocalToUTC ( this , localInstant ) ;
Code	return instant . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

14
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 4

15
Tree	return convertLocalToUTC ( localInstant , iZone , false ) ;
Code	return convertLocalToUTC ( localInstant , iZone , false ) ;
Distance : 4

16
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 8

17
Tree	return convertLocalToUTC ( localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone ) ;
Distance : 5

18
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Distance : 3

19
Tree	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 8

20
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 9

21
Tree	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

22
Tree	return localInstant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return localInstant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 5

23
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Distance : 6

24
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( iZone , localInstant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( iZone , localInstant ) ;
Distance : 10

25
Tree	return convertLocalToUTC ( iZone , iZone , false ) ;
Code	return convertLocalToUTC ( iZone , iZone , false ) ;
Distance : 5

26
Tree	return ! iZone && ! iZone . convertLocalToUTC () ;
Code	return ! iZone && ! iZone . convertLocalToUTC () ;
Distance : 10

27
Tree	return convertLocalToUTC ( localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone ) ;
Distance : 4

28
Tree	return convertLocalToUTC ( localInstant , instant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , instant , localInstant ) ;
Distance : 4

29
Tree	return convertLocalToUTC ( iZone , iZone ) ;
Code	return convertLocalToUTC ( iZone , iZone ) ;
Distance : 6

30
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Distance : 4

31
Tree	return ! instant && ! iZone . convertLocalToUTC () ;
Code	return ! instant && ! iZone . convertLocalToUTC () ;
Distance : 10

32
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Distance : 6

33
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Distance : 6

34
Tree	return convertLocalToUTC ( iZone , localInstant ) ;
Code	return convertLocalToUTC ( iZone , localInstant ) ;
Distance : 6

35
Tree	return ! iZone && ! localInstant . convertLocalToUTC () ;
Code	return ! iZone && ! localInstant . convertLocalToUTC () ;
Distance : 9

36
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Distance : 4

37
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Distance : 4

38
Tree	return convertLocalToUTC ( localInstant , iZone , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone , iZone ) ;
Distance : 6

39
Tree	return ! iZone && ! instant . convertLocalToUTC () ;
Code	return ! iZone && ! instant . convertLocalToUTC () ;
Distance : 10

40
Tree	return ! localInstant && ! iZone . convertLocalToUTC () ;
Code	return ! localInstant && ! iZone . convertLocalToUTC () ;
Distance : 10

41
Tree	return iZone . convertLocalToUTC ( this , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , iZone ) ;
Distance : 4

42
Tree	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Distance : 4

43
Tree	return instant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return instant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 5

44
Tree	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Code	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Distance : 9

45
Tree	return iZone != printTimeZone ;
Code	return iZone != printTimeZone ;
Distance : 9

46
Tree	return convertLocalToUTC ( localInstant , instant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , instant , localInstant , iZone ) ;
Distance : 6

47
Tree	return iZone != TimeUnit.SECONDS ;
Code	return iZone != TimeUnit.SECONDS ;
Distance : 9

48
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

49
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

========================================================================


========================================================================
Example Number: 113
Parent Code is: 
long result = iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
long result = iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=long}) (59 (800{val=result}) (204{val==}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=long}) (59 (800{val=result}) (204{val==}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	long result = iZone . convertLocalToUTC ( iZone ) ;
Code	long result = iZone . convertLocalToUTC ( iZone ) ;
Distance : 5

1
Tree	long result = iZone . convertLocalToUTC ( this , iZone ) ;
Code	long result = iZone . convertLocalToUTC ( this , iZone ) ;
Distance : 4

2
Tree	public long result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	public long result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

3
Tree	long result = iZone . convertLocalToUTC ( this , instant , NUMBER_CONSTANT ) ;
Code	long result = iZone . convertLocalToUTC ( this , instant , NUMBER_CONSTANT ) ;
Distance : 3

4
Tree	long result = iZone . convertLocalToUTC ( this , instant ) ;
Code	long result = iZone . convertLocalToUTC ( this , instant ) ;
Distance : 3

5
Tree	long result = instant . convertLocalToUTC ( localInstant , false ) ;
Code	long result = instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

6
Tree	double result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	double result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

7
Tree	long result = instant . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Code	long result = instant . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Distance : 5

8
Tree	double result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Code	double result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Distance : 5

9
Tree	long result = iZone . convertLocalToUTC ( this , iZone , NUMBER_CONSTANT ) ;
Code	long result = iZone . convertLocalToUTC ( this , iZone , NUMBER_CONSTANT ) ;
Distance : 3

10
Tree	final long result = iZone . convertLocalToUTC ( iZone , false ) ;
Code	final long result = iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 4

11
Tree	long result = instant . convertLocalToUTC ( this , localInstant , NUMBER_CONSTANT ) ;
Code	long result = instant . convertLocalToUTC ( this , localInstant , NUMBER_CONSTANT ) ;
Distance : 4

12
Tree	long result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

13
Tree	long result = iZone . convertLocalToUTC ( localInstant , StringUtils.EMPTY ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , StringUtils.EMPTY ) ;
Distance : 3

14
Tree	long result = instant . convertLocalToUTC ( this , localInstant ) ;
Code	long result = instant . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

15
Tree	long result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Code	long result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Distance : 4

16
Tree	long result = iZone . convertLocalToUTC ( this , localInstant ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant ) ;
Distance : 4

17
Tree	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , TimeUnit.SECONDS ) ;
Code	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , TimeUnit.SECONDS ) ;
Distance : 10

18
Tree	long result = iZone . convertLocalToUTC ( localInstant , configureWith ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , configureWith ) ;
Distance : 3

19
Tree	final long result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	final long result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

20
Tree	long result = iZone . convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET ) ;
Distance : 3

21
Tree	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , dateParser ) ;
Code	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , dateParser ) ;
Distance : 10

22
Tree	final double result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	final double result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

23
Tree	long result = iZone . convertLocalToUTC ( localInstant ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant ) ;
Distance : 4

24
Tree	long result = iZone . convertLocalToUTC ( localInstant , PolymerClassDefinition.DefinitionType.ObjectLiteral ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , PolymerClassDefinition.DefinitionType.ObjectLiteral ) ;
Distance : 3

25
Tree	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , values.length ) ;
Code	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , values.length ) ;
Distance : 10

26
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , TimeUnit.SECONDS ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , TimeUnit.SECONDS ) ;
Distance : 5

27
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , com.google.protobuf.GeneratedMessageV3 ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , com.google.protobuf.GeneratedMessageV3 ) ;
Distance : 5

28
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , localInstant , convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , localInstant , convertLocalToUTC () ) ;
Distance : 5

29
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , iZone , convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , iZone , convertLocalToUTC () ) ;
Distance : 5

30
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , MillisDurationField.INSTANCE ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , MillisDurationField.INSTANCE ) ;
Distance : 5

31
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , instant , convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , instant , convertLocalToUTC () ) ;
Distance : 4

32
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , options.assumeClosuresOnlyCaptureReferences ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , options.assumeClosuresOnlyCaptureReferences ) ;
Distance : 5

33
Tree	long result = iZone . convertLocalToUTC ( localInstant , localInstant , result , convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , localInstant , result , convertLocalToUTC () ) ;
Distance : 5

34
Tree	boolean result = iZone . convertLocalToUTC ( localInstant ) ;
Code	boolean result = iZone . convertLocalToUTC ( localInstant ) ;
Distance : 5

35
Tree	boolean result = iZone . convertLocalToUTC ( this , localInstant , NUMBER_CONSTANT ) ;
Code	boolean result = iZone . convertLocalToUTC ( this , localInstant , NUMBER_CONSTANT ) ;
Distance : 4

36
Tree	long result = instant . convertLocalToUTC ( localInstant ) ;
Code	long result = instant . convertLocalToUTC ( localInstant ) ;
Distance : 5

37
Tree	double result = iZone . convertLocalToUTC ( localInstant ) ;
Code	double result = iZone . convertLocalToUTC ( localInstant ) ;
Distance : 5

38
Tree	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , com.google.protobuf.GeneratedMessageV3 ) ;
Code	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , com.google.protobuf.GeneratedMessageV3 ) ;
Distance : 10

39
Tree	long result = iZone . convertLocalToUTC ( iZone , false ) ;
Code	long result = iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 3

40
Tree	long result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , iZone ) ;
Code	long result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , iZone ) ;
Distance : 4

41
Tree	boolean result = iZone . convertLocalToUTC ( localInstant , false ) ;
Code	boolean result = iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

42
Tree	final long result = instant . convertLocalToUTC ( localInstant , false ) ;
Code	final long result = instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 4

43
Tree	boolean result = iZone . convertLocalToUTC ( this , localInstant ) ;
Code	boolean result = iZone . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

44
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , NUMBER_CONSTANT ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , NUMBER_CONSTANT ) ;
Distance : 3

45
Tree	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , iZone ) ;
Code	long result = convertLocalToUTC ( localInstant , NUMBER_CONSTANT , iZone , result , iZone , iZone ) ;
Distance : 10

46
Tree	long result = iZone . convertLocalToUTC ( localInstant , p2.vector ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , p2.vector ) ;
Distance : 3

47
Tree	boolean result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Code	boolean result = iZone . convertLocalToUTC ( NUMBER_CONSTANT , localInstant ) ;
Distance : 5

48
Tree	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , coefficients.length ) ;
Code	long result = iZone . convertLocalToUTC ( this , localInstant , convertLocalToUTC () , coefficients.length ) ;
Distance : 5

49
Tree	long result = iZone . convertLocalToUTC ( localInstant , iZone , localInstant , convertLocalToUTC () ) ;
Code	long result = iZone . convertLocalToUTC ( localInstant , iZone , localInstant , convertLocalToUTC () ) ;
Distance : 5

========================================================================


========================================================================
Example Number: 114
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

1
Tree	return convertLocalToUTC ( localInstant , instant , false ) ;
Code	return convertLocalToUTC ( localInstant , instant , false ) ;
Distance : 4

2
Tree	return instant . convertLocalToUTC ( localInstant , false ) ;
Code	return instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

3
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Distance : 4

4
Tree	return convertLocalToUTC ( iZone , localInstant , false ) ;
Code	return convertLocalToUTC ( iZone , localInstant , false ) ;
Distance : 5

5
Tree	return iZone != AllowedSolutions.ANY_SIDE ;
Code	return iZone != AllowedSolutions.ANY_SIDE ;
Distance : 9

6
Tree	return convertLocalToUTC ( localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 5

7
Tree	return iZone . convertLocalToUTC ( this , instant ) ;
Code	return iZone . convertLocalToUTC ( this , instant ) ;
Distance : 3

8
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant ) ;
Distance : 4

9
Tree	return iZone . convertLocalToUTC ( instant , false ) ;
Code	return iZone . convertLocalToUTC ( instant , false ) ;
Distance : 3

10
Tree	return iZone . convertLocalToUTC ( iZone , false ) ;
Code	return iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 3

11
Tree	return localInstant . convertLocalToUTC ( this , localInstant ) ;
Code	return localInstant . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

12
Tree	return convertLocalToUTC ( localInstant , instant ) ;
Code	return convertLocalToUTC ( localInstant , instant ) ;
Distance : 4

13
Tree	return instant . convertLocalToUTC ( this , localInstant ) ;
Code	return instant . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

14
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 4

15
Tree	return convertLocalToUTC ( localInstant , iZone , false ) ;
Code	return convertLocalToUTC ( localInstant , iZone , false ) ;
Distance : 4

16
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 8

17
Tree	return convertLocalToUTC ( localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone ) ;
Distance : 5

18
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Distance : 3

19
Tree	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 8

20
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 9

21
Tree	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

22
Tree	return localInstant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return localInstant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 5

23
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Distance : 6

24
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( iZone , localInstant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( iZone , localInstant ) ;
Distance : 10

25
Tree	return convertLocalToUTC ( iZone , iZone , false ) ;
Code	return convertLocalToUTC ( iZone , iZone , false ) ;
Distance : 5

26
Tree	return ! iZone && ! iZone . convertLocalToUTC () ;
Code	return ! iZone && ! iZone . convertLocalToUTC () ;
Distance : 10

27
Tree	return convertLocalToUTC ( localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone ) ;
Distance : 4

28
Tree	return convertLocalToUTC ( localInstant , instant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , instant , localInstant ) ;
Distance : 4

29
Tree	return convertLocalToUTC ( iZone , iZone ) ;
Code	return convertLocalToUTC ( iZone , iZone ) ;
Distance : 6

30
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Distance : 4

31
Tree	return ! instant && ! iZone . convertLocalToUTC () ;
Code	return ! instant && ! iZone . convertLocalToUTC () ;
Distance : 10

32
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Distance : 6

33
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Distance : 6

34
Tree	return convertLocalToUTC ( iZone , localInstant ) ;
Code	return convertLocalToUTC ( iZone , localInstant ) ;
Distance : 6

35
Tree	return ! iZone && ! localInstant . convertLocalToUTC () ;
Code	return ! iZone && ! localInstant . convertLocalToUTC () ;
Distance : 9

36
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Distance : 4

37
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Distance : 4

38
Tree	return convertLocalToUTC ( localInstant , iZone , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone , iZone ) ;
Distance : 6

39
Tree	return ! iZone && ! instant . convertLocalToUTC () ;
Code	return ! iZone && ! instant . convertLocalToUTC () ;
Distance : 10

40
Tree	return ! localInstant && ! iZone . convertLocalToUTC () ;
Code	return ! localInstant && ! iZone . convertLocalToUTC () ;
Distance : 10

41
Tree	return iZone . convertLocalToUTC ( this , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , iZone ) ;
Distance : 4

42
Tree	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Distance : 4

43
Tree	return instant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return instant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 5

44
Tree	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Code	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Distance : 9

45
Tree	return iZone != printTimeZone ;
Code	return iZone != printTimeZone ;
Distance : 9

46
Tree	return convertLocalToUTC ( localInstant , instant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , instant , localInstant , iZone ) ;
Distance : 6

47
Tree	return iZone != TimeUnit.SECONDS ;
Code	return iZone != TimeUnit.SECONDS ;
Distance : 9

48
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

49
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

========================================================================


========================================================================
Example Number: 115
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

1
Tree	return convertLocalToUTC ( localInstant , instant , false ) ;
Code	return convertLocalToUTC ( localInstant , instant , false ) ;
Distance : 4

2
Tree	return instant . convertLocalToUTC ( localInstant , false ) ;
Code	return instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

3
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Distance : 4

4
Tree	return convertLocalToUTC ( iZone , localInstant , false ) ;
Code	return convertLocalToUTC ( iZone , localInstant , false ) ;
Distance : 5

5
Tree	return iZone != AllowedSolutions.ANY_SIDE ;
Code	return iZone != AllowedSolutions.ANY_SIDE ;
Distance : 9

6
Tree	return convertLocalToUTC ( localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 5

7
Tree	return iZone . convertLocalToUTC ( this , instant ) ;
Code	return iZone . convertLocalToUTC ( this , instant ) ;
Distance : 3

8
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant ) ;
Distance : 4

9
Tree	return iZone . convertLocalToUTC ( instant , false ) ;
Code	return iZone . convertLocalToUTC ( instant , false ) ;
Distance : 3

10
Tree	return iZone . convertLocalToUTC ( iZone , false ) ;
Code	return iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 3

11
Tree	return localInstant . convertLocalToUTC ( this , localInstant ) ;
Code	return localInstant . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

12
Tree	return convertLocalToUTC ( localInstant , instant ) ;
Code	return convertLocalToUTC ( localInstant , instant ) ;
Distance : 4

13
Tree	return instant . convertLocalToUTC ( this , localInstant ) ;
Code	return instant . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

14
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 4

15
Tree	return convertLocalToUTC ( localInstant , iZone , false ) ;
Code	return convertLocalToUTC ( localInstant , iZone , false ) ;
Distance : 4

16
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 8

17
Tree	return convertLocalToUTC ( localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone ) ;
Distance : 5

18
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Distance : 3

19
Tree	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 8

20
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 9

21
Tree	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

22
Tree	return localInstant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return localInstant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 5

23
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Distance : 6

24
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( iZone , localInstant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( iZone , localInstant ) ;
Distance : 10

25
Tree	return convertLocalToUTC ( iZone , iZone , false ) ;
Code	return convertLocalToUTC ( iZone , iZone , false ) ;
Distance : 5

26
Tree	return ! iZone && ! iZone . convertLocalToUTC () ;
Code	return ! iZone && ! iZone . convertLocalToUTC () ;
Distance : 10

27
Tree	return convertLocalToUTC ( localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone ) ;
Distance : 4

28
Tree	return convertLocalToUTC ( localInstant , instant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , instant , localInstant ) ;
Distance : 4

29
Tree	return convertLocalToUTC ( iZone , iZone ) ;
Code	return convertLocalToUTC ( iZone , iZone ) ;
Distance : 6

30
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Distance : 4

31
Tree	return ! instant && ! iZone . convertLocalToUTC () ;
Code	return ! instant && ! iZone . convertLocalToUTC () ;
Distance : 10

32
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Distance : 6

33
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Distance : 6

34
Tree	return convertLocalToUTC ( iZone , localInstant ) ;
Code	return convertLocalToUTC ( iZone , localInstant ) ;
Distance : 6

35
Tree	return ! iZone && ! localInstant . convertLocalToUTC () ;
Code	return ! iZone && ! localInstant . convertLocalToUTC () ;
Distance : 9

36
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Distance : 4

37
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Distance : 4

38
Tree	return convertLocalToUTC ( localInstant , iZone , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone , iZone ) ;
Distance : 6

39
Tree	return ! iZone && ! instant . convertLocalToUTC () ;
Code	return ! iZone && ! instant . convertLocalToUTC () ;
Distance : 10

40
Tree	return ! localInstant && ! iZone . convertLocalToUTC () ;
Code	return ! localInstant && ! iZone . convertLocalToUTC () ;
Distance : 10

41
Tree	return iZone . convertLocalToUTC ( this , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , iZone ) ;
Distance : 4

42
Tree	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Distance : 4

43
Tree	return instant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return instant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 5

44
Tree	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Code	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Distance : 9

45
Tree	return iZone != printTimeZone ;
Code	return iZone != printTimeZone ;
Distance : 9

46
Tree	return convertLocalToUTC ( localInstant , instant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , instant , localInstant , iZone ) ;
Distance : 6

47
Tree	return iZone != TimeUnit.SECONDS ;
Code	return iZone != TimeUnit.SECONDS ;
Distance : 9

48
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

49
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

========================================================================


========================================================================
Example Number: 116
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 9

1
Tree	return convertLocalToUTC ( localInstant , instant , false ) ;
Code	return convertLocalToUTC ( localInstant , instant , false ) ;
Distance : 4

2
Tree	return instant . convertLocalToUTC ( localInstant , false ) ;
Code	return instant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

3
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant ) ;
Distance : 4

4
Tree	return convertLocalToUTC ( iZone , localInstant , false ) ;
Code	return convertLocalToUTC ( iZone , localInstant , false ) ;
Distance : 5

5
Tree	return iZone != AllowedSolutions.ANY_SIDE ;
Code	return iZone != AllowedSolutions.ANY_SIDE ;
Distance : 9

6
Tree	return convertLocalToUTC ( localInstant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 5

7
Tree	return iZone . convertLocalToUTC ( this , instant ) ;
Code	return iZone . convertLocalToUTC ( this , instant ) ;
Distance : 3

8
Tree	return iZone . convertLocalToUTC ( this , localInstant ) ;
Code	return iZone . convertLocalToUTC ( this , localInstant ) ;
Distance : 4

9
Tree	return iZone . convertLocalToUTC ( instant , false ) ;
Code	return iZone . convertLocalToUTC ( instant , false ) ;
Distance : 3

10
Tree	return iZone . convertLocalToUTC ( iZone , false ) ;
Code	return iZone . convertLocalToUTC ( iZone , false ) ;
Distance : 3

11
Tree	return localInstant . convertLocalToUTC ( this , localInstant ) ;
Code	return localInstant . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

12
Tree	return convertLocalToUTC ( localInstant , instant ) ;
Code	return convertLocalToUTC ( localInstant , instant ) ;
Distance : 4

13
Tree	return instant . convertLocalToUTC ( this , localInstant ) ;
Code	return instant . convertLocalToUTC ( this , localInstant ) ;
Distance : 5

14
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 4

15
Tree	return convertLocalToUTC ( localInstant , iZone , false ) ;
Code	return convertLocalToUTC ( localInstant , iZone , false ) ;
Distance : 4

16
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , instant ) ;
Distance : 8

17
Tree	return convertLocalToUTC ( localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone ) ;
Distance : 5

18
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , instant ) ;
Distance : 3

19
Tree	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Code	return ( ( iZone ) this ) . convertLocalToUTC ( localInstant , localInstant ) ;
Distance : 8

20
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( localInstant , iZone ) ;
Distance : 9

21
Tree	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Code	return localInstant . convertLocalToUTC ( localInstant , false ) ;
Distance : 3

22
Tree	return localInstant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return localInstant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 5

23
Tree	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , localInstant , iZone ) ;
Distance : 6

24
Tree	return ( ( localInstant ) this ) . convertLocalToUTC ( iZone , localInstant ) ;
Code	return ( ( localInstant ) this ) . convertLocalToUTC ( iZone , localInstant ) ;
Distance : 10

25
Tree	return convertLocalToUTC ( iZone , iZone , false ) ;
Code	return convertLocalToUTC ( iZone , iZone , false ) ;
Distance : 5

26
Tree	return ! iZone && ! iZone . convertLocalToUTC () ;
Code	return ! iZone && ! iZone . convertLocalToUTC () ;
Distance : 10

27
Tree	return convertLocalToUTC ( localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone ) ;
Distance : 4

28
Tree	return convertLocalToUTC ( localInstant , instant , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , instant , localInstant ) ;
Distance : 4

29
Tree	return convertLocalToUTC ( iZone , iZone ) ;
Code	return convertLocalToUTC ( iZone , iZone ) ;
Distance : 6

30
Tree	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Code	return iZone . convertLocalToUTC ( STRING_CONSTANT , iZone ) ;
Distance : 4

31
Tree	return ! instant && ! iZone . convertLocalToUTC () ;
Code	return ! instant && ! iZone . convertLocalToUTC () ;
Distance : 10

32
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant , iZone ) ;
Distance : 6

33
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone , iZone ) ;
Distance : 6

34
Tree	return convertLocalToUTC ( iZone , localInstant ) ;
Code	return convertLocalToUTC ( iZone , localInstant ) ;
Distance : 6

35
Tree	return ! iZone && ! localInstant . convertLocalToUTC () ;
Code	return ! iZone && ! localInstant . convertLocalToUTC () ;
Distance : 9

36
Tree	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , iZone ) ;
Distance : 4

37
Tree	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Code	return convertLocalToUTC ( localInstant , iZone , localInstant ) ;
Distance : 4

38
Tree	return convertLocalToUTC ( localInstant , iZone , iZone , iZone ) ;
Code	return convertLocalToUTC ( localInstant , iZone , iZone , iZone ) ;
Distance : 6

39
Tree	return ! iZone && ! instant . convertLocalToUTC () ;
Code	return ! iZone && ! instant . convertLocalToUTC () ;
Distance : 10

40
Tree	return ! localInstant && ! iZone . convertLocalToUTC () ;
Code	return ! localInstant && ! iZone . convertLocalToUTC () ;
Distance : 10

41
Tree	return iZone . convertLocalToUTC ( this , iZone ) ;
Code	return iZone . convertLocalToUTC ( this , iZone ) ;
Distance : 4

42
Tree	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Code	return convertLocalToUTC ( localInstant , localInstant , false ) ;
Distance : 4

43
Tree	return instant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Code	return instant . convertLocalToUTC ( STRING_CONSTANT , localInstant ) ;
Distance : 5

44
Tree	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Code	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Distance : 9

45
Tree	return iZone != printTimeZone ;
Code	return iZone != printTimeZone ;
Distance : 9

46
Tree	return convertLocalToUTC ( localInstant , instant , localInstant , iZone ) ;
Code	return convertLocalToUTC ( localInstant , instant , localInstant , iZone ) ;
Distance : 6

47
Tree	return iZone != TimeUnit.SECONDS ;
Code	return iZone != TimeUnit.SECONDS ;
Distance : 9

48
Tree	return iZone . convertLocalToUTC ( localInstant , false ) ;
Code	return iZone . convertLocalToUTC ( localInstant , false ) ;
Distance : 2

49
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

========================================================================


========================================================================
Example Number: 117
Parent Code is: 
Partial newPartial = new Partial ( iChronology , newTypes , newValues ) ;
-------------------------------------------------------------------------------
Child code is: 
Partial newPartial = new Partial ( newTypes , newValues , iChronology ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Partial})) (59 (800{val=newPartial}) (204{val==}) (14 (304{val=new}) (43 (801{val=Partial})) (214{val=(}) (800{val=iChronology}) (234{val=,}) (800{val=newTypes}) (234{val=,}) (800{val=newValues}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Partial})) (59 (800{val=newPartial}) (204{val==}) (14 (304{val=new}) (43 (801{val=Partial})) (214{val=(}) (800{val=newTypes}) (234{val=,}) (800{val=newValues}) (234{val=,}) (800{val=iChronology}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/4/parent/src_main_java_org_joda_time_Partial.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 50
Wrong
========================================================================
False

0
Tree	Partial newPartial = new Partial ( iChronology , newValues , newValues ) ;
Code	Partial newPartial = new Partial ( iChronology , newValues , newValues ) ;
Distance : 2

1
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , values.length () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , values.length () ) ;
Distance : 6

2
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , getLeft () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , getLeft () ) ;
Distance : 6

3
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . timeParser () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . timeParser () ) ;
Distance : 8

4
Tree	Partial newValues = new Partial ( iChronology . getInstance () , newValues , newValues ) ;
Code	Partial newValues = new Partial ( iChronology . getInstance () , newValues , newValues ) ;
Distance : 6

5
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , getRight () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , getRight () ) ;
Distance : 6

6
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getParser () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getParser () ) ;
Distance : 8

7
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues . createLong () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues . createLong () ) ;
Distance : 6

8
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues . valueOf () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues . valueOf () ) ;
Distance : 6

9
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues . getRightElement () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues . getRightElement () ) ;
Distance : 6

10
Tree	Partial newValues = Partial . is ( getChronology , NUMBER_CONSTANT ) ;
Code	Partial newValues = Partial . is ( getChronology , NUMBER_CONSTANT ) ;
Distance : 7

11
Tree	Partial newValues = new Partial ( iChronology , newValues ) ;
Code	Partial newValues = new Partial ( iChronology , newValues ) ;
Distance : 4

12
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues . of () ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues . of () ) ;
Distance : 6

13
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , getChronology () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , getChronology () ) ;
Distance : 6

14
Tree	Partial newPartial = new Partial ( iChronology , newTypes ) ;
Code	Partial newPartial = new Partial ( iChronology , newTypes ) ;
Distance : 4

15
Tree	Partial newValues = Partial . is ( LanguageMode.ECMASCRIPT_NEXT , NUMBER_CONSTANT ) ;
Code	Partial newValues = Partial . is ( LanguageMode.ECMASCRIPT_NEXT , NUMBER_CONSTANT ) ;
Distance : 7

16
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues ) ;
Distance : 3

17
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . of () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . of () ) ;
Distance : 8

18
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . verificationListeners () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . verificationListeners () ) ;
Distance : 8

19
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues ) ;
Distance : 4

20
Tree	Partial newValues = new Partial ( iChronology . copySelf () , newValues , newValues ) ;
Code	Partial newValues = new Partial ( iChronology . copySelf () , newValues , newValues ) ;
Distance : 6

21
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . timeParser ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . timeParser ( iChronology ) ) ;
Distance : 9

22
Tree	Partial newValues = Partial . is ( LanguageMode.ECMASCRIPT_2016 , NUMBER_CONSTANT ) ;
Code	Partial newValues = Partial . is ( LanguageMode.ECMASCRIPT_2016 , NUMBER_CONSTANT ) ;
Distance : 7

23
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getRightElement () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getRightElement () ) ;
Distance : 8

24
Tree	Partial newValues = Partial . is ( hours , NUMBER_CONSTANT ) ;
Code	Partial newValues = Partial . is ( hours , NUMBER_CONSTANT ) ;
Distance : 7

25
Tree	Partial newPartial = new Partial ( iChronology , newTypes , newValues ) ;
Code	Partial newPartial = new Partial ( iChronology , newTypes , newValues ) ;
Distance : 3

26
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , in () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , in () ) ;
Distance : 6

27
Tree	Partial newValues = new Partial ( iChronology . getInstance () , iChronology , newValues ) ;
Code	Partial newValues = new Partial ( iChronology . getInstance () , iChronology , newValues ) ;
Distance : 7

28
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getParser ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getParser ( iChronology ) ) ;
Distance : 9

29
Tree	Partial newValues = new Partial ( iChronology , iChronology , newValues , newValues ) ;
Code	Partial newValues = new Partial ( iChronology , iChronology , newValues , newValues ) ;
Distance : 5

30
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues . of () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues . of () ) ;
Distance : 6

31
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . of ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . of ( iChronology ) ) ;
Distance : 9

32
Tree	Partial newValues = Partial . createLong ( getChronology , NUMBER_CONSTANT ) ;
Code	Partial newValues = Partial . createLong ( getChronology , NUMBER_CONSTANT ) ;
Distance : 7

33
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , this . iChronology . of () ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , this . iChronology . of () ) ;
Distance : 8

34
Tree	Partial newValues = new Partial ( iChronology . copySelf () , iChronology , newValues ) ;
Code	Partial newValues = new Partial ( iChronology . copySelf () , iChronology , newValues ) ;
Distance : 7

35
Tree	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes , newValues , newValues ) ;
Distance : 4

36
Tree	Partial newPartial = new Partial ( iChronology , newValues , newValues , this . iChronology . of () ) ;
Code	Partial newPartial = new Partial ( iChronology , newValues , newValues , this . iChronology . of () ) ;
Distance : 8

37
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . verificationListeners ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . verificationListeners ( iChronology ) ) ;
Distance : 9

38
Tree	Partial newPartial = new Partial ( iChronology , newValues , newValues , newValues ) ;
Code	Partial newPartial = new Partial ( iChronology , newValues , newValues , newValues ) ;
Distance : 4

39
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getRightElement ( iChronology ) ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues . getRightElement ( iChronology ) ) ;
Distance : 9

40
Tree	Partial newValues = new Partial ( iChronology , iChronology ) ;
Code	Partial newValues = new Partial ( iChronology , iChronology ) ;
Distance : 4

41
Tree	Partial newPartial = new Partial ( iChronology , newTypes , newValues , newValues ) ;
Code	Partial newPartial = new Partial ( iChronology , newTypes , newValues , newValues ) ;
Distance : 3

42
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , this . iChronology . valueOf () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , this . iChronology . valueOf () ) ;
Distance : 9

43
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , this . iChronology . getRightElement () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , this . iChronology . getRightElement () ) ;
Distance : 9

44
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , this . iChronology . of () ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , this . iChronology . of () ) ;
Distance : 9

45
Tree	Partial newValues = new Partial ( iChronology , newTypes ) ;
Code	Partial newValues = new Partial ( iChronology , newTypes ) ;
Distance : 5

46
Tree	Partial newPartial = new Partial ( iChronology . getInstance () , newValues , newValues ) ;
Code	Partial newPartial = new Partial ( iChronology . getInstance () , newValues , newValues ) ;
Distance : 5

47
Tree	Partial newPartial = new Partial ( iChronology , newValues ) ;
Code	Partial newPartial = new Partial ( iChronology , newValues ) ;
Distance : 3

48
Tree	Partial newValues = new Partial ( iChronology , iChronology , newValues ) ;
Code	Partial newValues = new Partial ( iChronology , iChronology , newValues ) ;
Distance : 4

49
Tree	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues ) ;
Code	Partial newValues = new Partial ( iChronology , newValues , newValues , newValues ) ;
Distance : 5

========================================================================


