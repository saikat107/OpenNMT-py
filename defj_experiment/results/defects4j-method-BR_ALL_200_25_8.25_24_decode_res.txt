========================================================================
Example Number: 1
Parent Code is: 
( int ) ( ( value - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
-------------------------------------------------------------------------------
Child code is: 
( int ) ( ( v - this . lowerBound ) / ( this . upperBound - this . lowerBound ) * NUMBER_CONSTANT )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (11 (214{val=(}) (39{val=int}) (215{val=)}) (36 (214{val=(}) (27 (27 (36 (214{val=(}) (27 (800{val=value}) (201{val=-}) (22 (315{val=this}) (235{val=.}) (800{val=lowerBound}))) (215{val=)})) (203{val=/}) (36 (214{val=(}) (27 (22 (315{val=this}) (235{val=.}) (800{val=upperBound})) (201{val=-}) (22 (315{val=this}) (235{val=.}) (800{val=lowerBound}))) (215{val=)}))) (202{val=*}) (34{val=NUMBER_CONSTANT})) (215{val=)}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (11 (214{val=(}) (39{val=int}) (215{val=)}) (36 (214{val=(}) (27 (27 (36 (214{val=(}) (27 (800{val=v}) (201{val=-}) (22 (315{val=this}) (235{val=.}) (800{val=lowerBound}))) (215{val=)})) (203{val=/}) (36 (214{val=(}) (27 (22 (315{val=this}) (235{val=.}) (800{val=upperBound})) (201{val=-}) (22 (315{val=this}) (235{val=.}) (800{val=lowerBound}))) (215{val=)}))) (202{val=*}) (34{val=NUMBER_CONSTANT})) (215{val=)}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/24/parent/source_org_jfree_chart_renderer_GrayPaintScale.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 24
Wrong
========================================================================
False

0
Tree	(
Code	(
Distance : 23

1
Tree	( StrictMath / value - / )
Code	( StrictMath / value - / )
Distance : 20

2
Tree	( value / value - / )
Code	( value / value - / )
Distance : 20

3
Tree	( LinearCombination / value - / )
Code	( LinearCombination / value - / )
Distance : 20

4
Tree	( n / value - / )
Code	( n / value - / )
Distance : 20

5
Tree	( text / value - / )
Code	( text / value - / )
Distance : 20

6
Tree	( index / value - / )
Code	( index / value - / )
Distance : 20

7
Tree	( tree / value - / )
Code	( tree / value - / )
Distance : 20

8
Tree	( int ) ( ( T - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( T - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

9
Tree	( int ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . lowerBound ) / ( this . lowerBound - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

10
Tree	( int ) ( ( value - this . lowerBound ) / ( this . printExterns - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . lowerBound ) / ( this . printExterns - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

11
Tree	( int ) ( ( value - this . lowerBound ) / ( this . commonTypes - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( value - this . lowerBound ) / ( this . commonTypes - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

12
Tree	( int ) ( ( T - this . lowerBound ) / ( this . printExterns - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( T - this . lowerBound ) / ( this . printExterns - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

13
Tree	( int ) ( ( T - this . lowerBound ) / ( this . commonTypes - this . maxEvaluations ) * NUMBER_CONSTANT )
Code	( int ) ( ( T - this . lowerBound ) / ( this . commonTypes - this . maxEvaluations ) * NUMBER_CONSTANT )
Distance : 3

14
Tree	( int ) ( ( T - this . lowerBound ) / ( this . commonTypes - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( T - this . lowerBound ) / ( this . commonTypes - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

15
Tree	( METHOD_NAME / value - / )
Code	( METHOD_NAME / value - / )
Distance : 20

16
Tree	NUMBER_CONSTANT
Code	NUMBER_CONSTANT
Distance : 23

17
Tree	compiler
Code	compiler
Distance : 24

18
Tree	null
Code	null
Distance : 24

19
Tree	new
Code	new
Distance : 24

20
Tree	STRING_CONSTANT
Code	STRING_CONSTANT
Distance : 24

21
Tree	Math
Code	Math
Distance : 24

22
Tree	SimpleDependencyInfo
Code	SimpleDependencyInfo
Distance : 24

23
Tree	( int ) ( ( T - this . lowerBound ) / ( this . legendShape - this . lowerBound ) * NUMBER_CONSTANT )
Code	( int ) ( ( T - this . lowerBound ) / ( this . legendShape - this . lowerBound ) * NUMBER_CONSTANT )
Distance : 2

========================================================================


========================================================================
Example Number: 2
Parent Code is: 
{ super ( paint , stroke , paint , stroke , alpha ) ; this . value = value ; }
-------------------------------------------------------------------------------
Child code is: 
{ super ( paint , stroke , outlinePaint , outlineStroke , alpha ) ; this . value = value ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=paint}) (234{val=,}) (800{val=stroke}) (234{val=,}) (800{val=paint}) (234{val=,}) (800{val=stroke}) (234{val=,}) (800{val=alpha}) (215{val=)}) (227{val=;})) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=value})) (204{val==}) (800{val=value})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=paint}) (234{val=,}) (800{val=stroke}) (234{val=,}) (800{val=outlinePaint}) (234{val=,}) (800{val=outlineStroke}) (234{val=,}) (800{val=alpha}) (215{val=)}) (227{val=;})) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=value})) (204{val==}) (800{val=value})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/20/parent/source_org_jfree_chart_plot_ValueMarker.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ super ( paint , stroke ) ; this . value = checkNotNull ( value ) ; }
Code	{ super ( paint , stroke ) ; this . value = checkNotNull ( value ) ; }
Distance : 9

1
Tree	{ super ( paint != null ? stroke : stroke ) ; this . value = value ; }
Code	{ super ( paint != null ? stroke : stroke ) ; this . value = value ; }
Distance : 8

2
Tree	{ super ( paint , stroke , transpiledFeatures , alpha ) ; this . value = new double [] { value } ; }
Code	{ super ( paint , stroke , transpiledFeatures , alpha ) ; this . value = new double [] { value } ; }
Distance : 8

3
Tree	{ super ( paint ) ; this . value = value ; else }
Code	{ super ( paint ) ; this . value = value ; else }
Distance : 9

4
Tree	{ super ( paint , stroke , transpiledFeatures ) ; this . value = value . value () ; }
Code	{ super ( paint , stroke , transpiledFeatures ) ; this . value = value . value () ; }
Distance : 8

5
Tree	{ super ( absoluteAccuracy , stroke ) ; this . value = new double [] { value } ; }
Code	{ super ( absoluteAccuracy , stroke ) ; this . value = new double [] { value } ; }
Distance : 12

6
Tree	{ super ( paint , stroke ) ; this . value = new double [] { value } ; }
Code	{ super ( paint , stroke ) ; this . value = new double [] { value } ; }
Distance : 11

7
Tree	{ super ( paint , stroke , paint ) ; this . value = new double [] { value } ; }
Code	{ super ( paint , stroke , paint ) ; this . value = new double [] { value } ; }
Distance : 10

8
Tree	{ super ( absoluteAccuracy ) ; this . value = value ; }
Code	{ super ( absoluteAccuracy ) ; this . value = value ; }
Distance : 9

9
Tree	{ super ( paint , scriptRoot , transpiledFeatures ) ; this . value = value ; }
Code	{ super ( paint , scriptRoot , transpiledFeatures ) ; this . value = value ; }
Distance : 6

10
Tree	{ super ( DateTimePrinterInternalPrinter , stroke ) ; this . value = value ; }
Code	{ super ( DateTimePrinterInternalPrinter , stroke ) ; this . value = value ; }
Distance : 7

11
Tree	{ super ( System.out , stroke ) ; this . value = value ; }
Code	{ super ( System.out , stroke ) ; this . value = value ; }
Distance : 7

12
Tree	{ super ( relativeAccuracy , stroke ) ; this . value = value ; }
Code	{ super ( relativeAccuracy , stroke ) ; this . value = value ; }
Distance : 7

13
Tree	{ super ( paint , stroke ) ; this . value = value . value () ; }
Code	{ super ( paint , stroke ) ; this . value = value . value () ; }
Distance : 9

14
Tree	{ super ( null , stroke , transpiledFeatures , alpha , alpha , alpha ) ; this . value = value ; }
Code	{ super ( null , stroke , transpiledFeatures , alpha , alpha , alpha ) ; this . value = value ; }
Distance : 5

15
Tree	{ super ( paint ) ; this . value = value . value () ; }
Code	{ super ( paint ) ; this . value = value . value () ; }
Distance : 11

16
Tree	{ super ( formatString ) ; this . value = value ; }
Code	{ super ( formatString ) ; this . value = value ; }
Distance : 9

17
Tree	{ super ( relativeAccuracy , stroke , paint ) ; this . value = value ; }
Code	{ super ( relativeAccuracy , stroke , paint ) ; this . value = value ; }
Distance : 6

18
Tree	{ super ( absoluteAccuracy ) ; this . value = new double [] { value } ; }
Code	{ super ( absoluteAccuracy ) ; this . value = new double [] { value } ; }
Distance : 14

19
Tree	{ super ( DateTimePrinterInternalPrinter , stroke ) ; this . value = new double [] { value } ; }
Code	{ super ( DateTimePrinterInternalPrinter , stroke ) ; this . value = new double [] { value } ; }
Distance : 12

20
Tree	{ super ( paint ) ; this . value = value ; }
Code	{ super ( paint ) ; this . value = value ; }
Distance : 8

21
Tree	{ super ( paint , scriptRoot ) ; this . value = value ; }
Code	{ super ( paint , scriptRoot ) ; this . value = value ; }
Distance : 7

22
Tree	{ super ( paint , stroke ) ; this . value = value ; }
Code	{ super ( paint , stroke ) ; this . value = value ; }
Distance : 6

23
Tree	{ super ( paint , stroke , paint , alpha ) ; this . value = new double [] { value } ; }
Code	{ super ( paint , stroke , paint , alpha ) ; this . value = new double [] { value } ; }
Distance : 8

24
Tree	{ super ( paint , scriptRoot , paint , alpha ) ; this . value = value ; }
Code	{ super ( paint , scriptRoot , paint , alpha ) ; this . value = value ; }
Distance : 4

25
Tree	{ super ( absoluteAccuracy , stroke ) ; this . value = value ; }
Code	{ super ( absoluteAccuracy , stroke ) ; this . value = value ; }
Distance : 7

26
Tree	{ super ( fieldSeparator ) ; this . value = new double [] { value } ; }
Code	{ super ( fieldSeparator ) ; this . value = new double [] { value } ; }
Distance : 14

27
Tree	{ super ( symbolName ) ; this . value = value ; }
Code	{ super ( symbolName ) ; this . value = value ; }
Distance : 9

28
Tree	{ super ( paint , stroke , paint , shape ) ; this . value = value ; }
Code	{ super ( paint , stroke , paint , shape ) ; this . value = value ; }
Distance : 4

29
Tree	{ super ( DateTimePrinterInternalPrinter ) ; this . value = value ; }
Code	{ super ( DateTimePrinterInternalPrinter ) ; this . value = value ; }
Distance : 9

30
Tree	{ super ( paint , stroke , paint ) ; this . value = value ; }
Code	{ super ( paint , stroke , paint ) ; this . value = value ; }
Distance : 5

31
Tree	{ super ( LocalizedFormats.DIMENSIONS_MISMATCH , stroke ) ; this . value = value ; }
Code	{ super ( LocalizedFormats.DIMENSIONS_MISMATCH , stroke ) ; this . value = value ; }
Distance : 7

32
Tree	{ super ( relativeAccuracy , stroke , transpiledFeatures ) ; this . value = value . value () ; }
Code	{ super ( relativeAccuracy , stroke , transpiledFeatures ) ; this . value = value . value () ; }
Distance : 9

33
Tree	{ super ( fieldSeparator ) ; this . value = value ; }
Code	{ super ( fieldSeparator ) ; this . value = value ; }
Distance : 9

34
Tree	{ super ( relativeAccuracy ) ; this . value = value . value () ; }
Code	{ super ( relativeAccuracy ) ; this . value = value . value () ; }
Distance : 12

35
Tree	{ super ( absoluteAccuracy , stroke ) ; }
Code	{ super ( absoluteAccuracy , stroke ) ; }
Distance : 13

36
Tree	{ super ( Token.PARAM_LIST , stroke ) ; this . value = value ; }
Code	{ super ( Token.PARAM_LIST , stroke ) ; this . value = value ; }
Distance : 7

37
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = value ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = value ; }
Distance : 8

38
Tree	{ super ( absoluteAccuracy , stroke , paint ) ; this . value = value ; }
Code	{ super ( absoluteAccuracy , stroke , paint ) ; this . value = value ; }
Distance : 6

39
Tree	{ super ( relativeAccuracy , stroke , paint , alpha ) ; this . value = value . value () ; }
Code	{ super ( relativeAccuracy , stroke , paint , alpha ) ; this . value = value . value () ; }
Distance : 7

40
Tree	{ super ( relativeAccuracy , stroke , paint , alpha ) ; this . value = value ; }
Code	{ super ( relativeAccuracy , stroke , paint , alpha ) ; this . value = value ; }
Distance : 4

41
Tree	{ super ( paint , stroke , checkedFeatures ) ; this . value = value ; }
Code	{ super ( paint , stroke , checkedFeatures ) ; this . value = value ; }
Distance : 5

42
Tree	{ super ( relativeAccuracy , stroke ) ; this . value = new double [] { value } ; }
Code	{ super ( relativeAccuracy , stroke ) ; this . value = new double [] { value } ; }
Distance : 12

43
Tree	{ super ( LocalizedFormats.MAX_COUNT_EXCEEDED , stroke , paint ) ; this . value = value ; }
Code	{ super ( LocalizedFormats.MAX_COUNT_EXCEEDED , stroke , paint ) ; this . value = value ; }
Distance : 6

44
Tree	{ super ( paint , stroke , paint , alpha ) ; this . value = value ; }
Code	{ super ( paint , stroke , paint , alpha ) ; this . value = value ; }
Distance : 3

45
Tree	{ super ( relativeAccuracy ) ; this . value = value ; }
Code	{ super ( relativeAccuracy ) ; this . value = value ; }
Distance : 9

46
Tree	{ super ( DateTimePrinterInternalPrinter , stroke ) ; }
Code	{ super ( DateTimePrinterInternalPrinter , stroke ) ; }
Distance : 13

47
Tree	{ super ( paint , stroke , paint ) ; this . value = value . value () ; }
Code	{ super ( paint , stroke , paint ) ; this . value = value . value () ; }
Distance : 8

48
Tree	{ super ( LocalizedFormats.FAILED_FRACTION_CONVERSION , stroke ) ; this . value = value ; }
Code	{ super ( LocalizedFormats.FAILED_FRACTION_CONVERSION , stroke ) ; this . value = value ; }
Distance : 7

49
Tree	{ super ( LocalizedFormats.NOT_POSITIVE_SCALE , stroke ) ; this . value = value ; }
Code	{ super ( LocalizedFormats.NOT_POSITIVE_SCALE , stroke ) ; this . value = value ; }
Distance : 7

50
Tree	{ super ( relativeAccuracy , stroke , transpiledFeatures ) ; this . value = value ; }
Code	{ super ( relativeAccuracy , stroke , transpiledFeatures ) ; this . value = value ; }
Distance : 6

51
Tree	{ super ( DateTimePrinterInternalPrinter ) ; this . value = new double [] { value } ; }
Code	{ super ( DateTimePrinterInternalPrinter ) ; this . value = new double [] { value } ; }
Distance : 14

52
Tree	{ super ( relativeAccuracy , stroke ) ; }
Code	{ super ( relativeAccuracy , stroke ) ; }
Distance : 13

53
Tree	{ super ( paint , stroke ) ; }
Code	{ super ( paint , stroke ) ; }
Distance : 12

54
Tree	{ super ( relativeAccuracy , stroke , paint , alpha ) ; this . value = new double [] { value } ; }
Code	{ super ( relativeAccuracy , stroke , paint , alpha ) ; this . value = new double [] { value } ; }
Distance : 9

55
Tree	{ super ( LocalizedFormats.DIMENSIONS_MISMATCH , stroke , paint ) ; this . value = value ; }
Code	{ super ( LocalizedFormats.DIMENSIONS_MISMATCH , stroke , paint ) ; this . value = value ; }
Distance : 6

56
Tree	{ super ( absoluteAccuracy , stroke ) ; this . value = value . value () ; }
Code	{ super ( absoluteAccuracy , stroke ) ; this . value = value . value () ; }
Distance : 10

57
Tree	{ super ( paint , scriptRoot ) ; }
Code	{ super ( paint , scriptRoot ) ; }
Distance : 13

58
Tree	{ super ( paint ? LocalizedFormats.NUMBER_TOO_SMALL : LanguageMode.NO_TRANSPILE ) ; this . value = value ; }
Code	{ super ( paint ? LocalizedFormats.NUMBER_TOO_SMALL : LanguageMode.NO_TRANSPILE ) ; this . value = value ; }
Distance : 8

59
Tree	{ super ( absoluteAccuracy , stroke , paint ) ; this . value = new double [] { value } ; }
Code	{ super ( absoluteAccuracy , stroke , paint ) ; this . value = new double [] { value } ; }
Distance : 11

60
Tree	{ super ( paint , scriptRoot , paint ) ; this . value = value ; }
Code	{ super ( paint , scriptRoot , paint ) ; this . value = value ; }
Distance : 6

61
Tree	{ super ( Token.PARAM_LIST , stroke , paint ) ; this . value = value ; }
Code	{ super ( Token.PARAM_LIST , stroke , paint ) ; this . value = value ; }
Distance : 6

62
Tree	{ super ( paint ) ; this . value = checkNotNull ( value ) ; }
Code	{ super ( paint ) ; this . value = checkNotNull ( value ) ; }
Distance : 11

63
Tree	{ super ( formatString ) ; this . value = new double [] { value } ; }
Code	{ super ( formatString ) ; this . value = new double [] { value } ; }
Distance : 14

64
Tree	{ super ( absoluteAccuracy ) ; this . value = checkNotNull ( value ) ; }
Code	{ super ( absoluteAccuracy ) ; this . value = checkNotNull ( value ) ; }
Distance : 12

65
Tree	{ super ( relativeAccuracy , scriptRoot ) ; this . value = value ; }
Code	{ super ( relativeAccuracy , scriptRoot ) ; this . value = value ; }
Distance : 8

66
Tree	{ super ( paint . getLifeCycleStage () , stroke ) ; this . value = value ; }
Code	{ super ( paint . getLifeCycleStage () , stroke ) ; this . value = value ; }
Distance : 7

67
Tree	{ super ( relativeAccuracy , stroke , paint , alpha ) ; this . value = checkNotNull ( value ) ; }
Code	{ super ( relativeAccuracy , stroke , paint , alpha ) ; this . value = checkNotNull ( value ) ; }
Distance : 7

68
Tree	{ super ( relativeAccuracy , stroke ) ; this . value = checkNotNull ( value ) ; }
Code	{ super ( relativeAccuracy , stroke ) ; this . value = checkNotNull ( value ) ; }
Distance : 10

69
Tree	{ super ( relativeAccuracy ) ; this . value = new double [] { value } ; }
Code	{ super ( relativeAccuracy ) ; this . value = new double [] { value } ; }
Distance : 14

70
Tree	{ super ( formatString , stroke ) ; this . value = value ; }
Code	{ super ( formatString , stroke ) ; this . value = value ; }
Distance : 7

71
Tree	{ super ( formatString , stroke ) ; this . value = new double [] { value } ; }
Code	{ super ( formatString , stroke ) ; this . value = new double [] { value } ; }
Distance : 12

72
Tree	{ super ( paint , stroke , paint , shape ) ; this . value = new double [] { value } ; }
Code	{ super ( paint , stroke , paint , shape ) ; this . value = new double [] { value } ; }
Distance : 9

73
Tree	{ super ( paint ) ; this . value = new double [] { value } ; }
Code	{ super ( paint ) ; this . value = new double [] { value } ; }
Distance : 13

74
Tree	{ super ( relativeAccuracy ) ; this . value = checkNotNull ( value ) ; }
Code	{ super ( relativeAccuracy ) ; this . value = checkNotNull ( value ) ; }
Distance : 12

75
Tree	{ super ( relativeAccuracy != null ? stroke : stroke ) ; this . value = value ; }
Code	{ super ( relativeAccuracy != null ? stroke : stroke ) ; this . value = value ; }
Distance : 9

76
Tree	{ super ( ComposableFunction.ATAN , stroke ) ; this . value = value ; }
Code	{ super ( ComposableFunction.ATAN , stroke ) ; this . value = value ; }
Distance : 7

77
Tree	{ super ( EXTERNS ) ; this . value = value ; }
Code	{ super ( EXTERNS ) ; this . value = value ; }
Distance : 9

78
Tree	{ super ( paint , stroke , paint , shape ) ; this . value = value . value () ; }
Code	{ super ( paint , stroke , paint , shape ) ; this . value = value . value () ; }
Distance : 7

79
Tree	{ super ( Token.PARAM_LIST , stroke , transpiledFeatures ) ; this . value = value ; }
Code	{ super ( Token.PARAM_LIST , stroke , transpiledFeatures ) ; this . value = value ; }
Distance : 6

80
Tree	{ super ( paint , scriptRoot ) ; this . value = new double [] { value } ; }
Code	{ super ( paint , scriptRoot ) ; this . value = new double [] { value } ; }
Distance : 12

81
Tree	{ super ( null , stroke , paint , alpha , alpha , alpha ) ; this . value = value ; }
Code	{ super ( null , stroke , paint , alpha , alpha , alpha ) ; this . value = value ; }
Distance : 5

82
Tree	{ super ( LocalizedFormats.MAX_COUNT_EXCEEDED , stroke , transpiledFeatures ) ; this . value = value ; }
Code	{ super ( LocalizedFormats.MAX_COUNT_EXCEEDED , stroke , transpiledFeatures ) ; this . value = value ; }
Distance : 6

83
Tree	{ super ( paint , stroke , transpiledFeatures , shape ) ; this . value = value ; }
Code	{ super ( paint , stroke , transpiledFeatures , shape ) ; this . value = value ; }
Distance : 4

84
Tree	{ super ( paint , stroke , transpiledFeatures ) ; this . value = new double [] { value } ; }
Code	{ super ( paint , stroke , transpiledFeatures ) ; this . value = new double [] { value } ; }
Distance : 10

85
Tree	{ super ( relativeAccuracy , stroke , transpiledFeatures , alpha ) ; this . value = new double [] { value } ; }
Code	{ super ( relativeAccuracy , stroke , transpiledFeatures , alpha ) ; this . value = new double [] { value } ; }
Distance : 9

86
Tree	{ super ( relativeAccuracy , stroke , transpiledFeatures ) ; this . value = new double [] { value } ; }
Code	{ super ( relativeAccuracy , stroke , transpiledFeatures ) ; this . value = new double [] { value } ; }
Distance : 11

87
Tree	{ super ( DateTimePrinterInternalPrinter ) ; this . value = checkNotNull ( value ) ; }
Code	{ super ( DateTimePrinterInternalPrinter ) ; this . value = checkNotNull ( value ) ; }
Distance : 12

88
Tree	{ super ( absoluteAccuracy ) ; this . value = value . value () ; }
Code	{ super ( absoluteAccuracy ) ; this . value = value . value () ; }
Distance : 12

89
Tree	{ super ( paint , stroke , paint ) ; this . value = checkNotNull ( value ) ; }
Code	{ super ( paint , stroke , paint ) ; this . value = checkNotNull ( value ) ; }
Distance : 8

90
Tree	{ super ( System.out , stroke , paint ) ; this . value = value ; }
Code	{ super ( System.out , stroke , paint ) ; this . value = value ; }
Distance : 6

91
Tree	{ super ( EXTERNS ) ; this . value = new double [] { value } ; }
Code	{ super ( EXTERNS ) ; this . value = new double [] { value } ; }
Distance : 14

92
Tree	{ super ( paint ) ; this . value = getName ( value ) ; }
Code	{ super ( paint ) ; this . value = getName ( value ) ; }
Distance : 11

93
Tree	{ super ( DateTimePrinterInternalPrinter , stroke ) ; this . value = value . value () ; }
Code	{ super ( DateTimePrinterInternalPrinter , stroke ) ; this . value = value . value () ; }
Distance : 10

94
Tree	{ super ( LocalizedFormats.NOT_POSITIVE_SCALE , stroke , paint ) ; this . value = value ; }
Code	{ super ( LocalizedFormats.NOT_POSITIVE_SCALE , stroke , paint ) ; this . value = value ; }
Distance : 6

95
Tree	{ super ( paint , stroke , transpiledFeatures ) ; this . value = checkNotNull ( value ) ; }
Code	{ super ( paint , stroke , transpiledFeatures ) ; this . value = checkNotNull ( value ) ; }
Distance : 8

96
Tree	{ super ( paint , stroke , checkedFeatures ) ; this . value = new double [] { value } ; }
Code	{ super ( paint , stroke , checkedFeatures ) ; this . value = new double [] { value } ; }
Distance : 10

97
Tree	{ super ( relativeAccuracy , stroke ) ; this . value = value . value () ; }
Code	{ super ( relativeAccuracy , stroke ) ; this . value = value . value () ; }
Distance : 10

98
Tree	{ super ( paint , stroke , checkedFeatures , alpha ) ; this . value = new double [] { value } ; }
Code	{ super ( paint , stroke , checkedFeatures , alpha ) ; this . value = new double [] { value } ; }
Distance : 8

99
Tree	{ super ( formatString , stroke ) ; }
Code	{ super ( formatString , stroke ) ; }
Distance : 13

100
Tree	{ super ( paint , stroke , transpiledFeatures ) ; this . value = value ; }
Code	{ super ( paint , stroke , transpiledFeatures ) ; this . value = value ; }
Distance : 5

101
Tree	{ super ( paint , scriptRoot , paint , alpha ) ; this . value = new double [] { value } ; }
Code	{ super ( paint , scriptRoot , paint , alpha ) ; this . value = new double [] { value } ; }
Distance : 9

102
Tree	{ super ( EXTERNS , stroke ) ; this . value = new double [] { value } ; }
Code	{ super ( EXTERNS , stroke ) ; this . value = new double [] { value } ; }
Distance : 12

103
Tree	{ super ( DateTimePrinterInternalPrinter ) ; this . value = value . value () ; }
Code	{ super ( DateTimePrinterInternalPrinter ) ; this . value = value . value () ; }
Distance : 12

104
Tree	{ super ( paint , scriptRoot , transpiledFeatures ) ; this . value = value . value () ; }
Code	{ super ( paint , scriptRoot , transpiledFeatures ) ; this . value = value . value () ; }
Distance : 9

105
Tree	{ super ( relativeAccuracy , stroke , transpiledFeatures , alpha ) ; this . value = value ; }
Code	{ super ( relativeAccuracy , stroke , transpiledFeatures , alpha ) ; this . value = value ; }
Distance : 4

106
Tree	{ super ( relativeAccuracy , stroke , paint ) ; this . value = value . value () ; }
Code	{ super ( relativeAccuracy , stroke , paint ) ; this . value = value . value () ; }
Distance : 9

107
Tree	{ super ( formatString ) ; this . value = value . value () ; }
Code	{ super ( formatString ) ; this . value = value . value () ; }
Distance : 12

108
Tree	{ super ( EXTERNS ) ; this . value = value . value () ; }
Code	{ super ( EXTERNS ) ; this . value = value . value () ; }
Distance : 12

109
Tree	{ super ( null , stroke , paint , shape , alpha , alpha ) ; this . value = value ; }
Code	{ super ( null , stroke , paint , shape , alpha , alpha ) ; this . value = value ; }
Distance : 5

110
Tree	{ super ( null , stroke , paint , alpha , shape , alpha ) ; this . value = value ; }
Code	{ super ( null , stroke , paint , alpha , shape , alpha ) ; this . value = value ; }
Distance : 5

111
Tree	{ super ( LocalizedFormats.DIMENSIONS_MISMATCH , stroke , transpiledFeatures ) ; this . value = value ; }
Code	{ super ( LocalizedFormats.DIMENSIONS_MISMATCH , stroke , transpiledFeatures ) ; this . value = value ; }
Distance : 6

112
Tree	{ super ( paint , stroke , paint , alpha ) ; this . value = value . value () ; }
Code	{ super ( paint , stroke , paint , alpha ) ; this . value = value . value () ; }
Distance : 6

113
Tree	{ super ( paint , scriptRoot , paint ) ; this . value = new double [] { value } ; }
Code	{ super ( paint , scriptRoot , paint ) ; this . value = new double [] { value } ; }
Distance : 11

114
Tree	{ super ( paint ) ; this . value = value ; fireChangeEvent }
Code	{ super ( paint ) ; this . value = value ; fireChangeEvent }
Distance : 9

115
Tree	{ super ( paint , stroke , checkedFeatures , alpha ) ; this . value = checkNotNull ( value ) ; }
Code	{ super ( paint , stroke , checkedFeatures , alpha ) ; this . value = checkNotNull ( value ) ; }
Distance : 6

116
Tree	{ super ( paint , stroke , checkedFeatures ) ; this . value = value . value () ; }
Code	{ super ( paint , stroke , checkedFeatures ) ; this . value = value . value () ; }
Distance : 8

117
Tree	{ super ( null , stroke , paint , alpha , alpha , shape ) ; this . value = value ; }
Code	{ super ( null , stroke , paint , alpha , alpha , shape ) ; this . value = value ; }
Distance : 5

118
Tree	{ super ( paint ) ; this . value = round ( value ) ; }
Code	{ super ( paint ) ; this . value = round ( value ) ; }
Distance : 11

119
Tree	{ super ( null , stroke , checkedFeatures , alpha , alpha , alpha ) ; this . value = value ; }
Code	{ super ( null , stroke , checkedFeatures , alpha , alpha , alpha ) ; this . value = value ; }
Distance : 5

120
Tree	{ super ( paint != null ? stroke : relativeAccuracy ) ; this . value = value ; }
Code	{ super ( paint != null ? stroke : relativeAccuracy ) ; this . value = value ; }
Distance : 8

121
Tree	{ super ( paint ) ; this . value = value ; this }
Code	{ super ( paint ) ; this . value = value ; this }
Distance : 9

122
Tree	{ super ( paint ? LocalizedFormats.NUMBER_TOO_SMALL : LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ) ; this . value = value ; }
Code	{ super ( paint ? LocalizedFormats.NUMBER_TOO_SMALL : LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ) ; this . value = value ; }
Distance : 8

123
Tree	{ super ( paint , stroke , transpiledFeatures , alpha ) ; this . value = value ; }
Code	{ super ( paint , stroke , transpiledFeatures , alpha ) ; this . value = value ; }
Distance : 3

124
Tree	{ super ( relativeAccuracy ) ; this . value = value ; else }
Code	{ super ( relativeAccuracy ) ; this . value = value ; else }
Distance : 10

125
Tree	{ super ( paint , scriptRoot , paint ) ; this . value = value . value () ; }
Code	{ super ( paint , scriptRoot , paint ) ; this . value = value . value () ; }
Distance : 9

126
Tree	{ super ( relativeAccuracy , scriptRoot ) ; }
Code	{ super ( relativeAccuracy , scriptRoot ) ; }
Distance : 14

127
Tree	{ super ( relativeAccuracy , stroke , paint ) ; this . value = checkNotNull ( value ) ; }
Code	{ super ( relativeAccuracy , stroke , paint ) ; this . value = checkNotNull ( value ) ; }
Distance : 9

128
Tree	{ super ( LocalizedFormats.MAX_COUNT_EXCEEDED , stroke ) ; this . value = value ; }
Code	{ super ( LocalizedFormats.MAX_COUNT_EXCEEDED , stroke ) ; this . value = value ; }
Distance : 7

129
Tree	{ super ( paint , scriptRoot , transpiledFeatures ) ; this . value = new double [] { value } ; }
Code	{ super ( paint , scriptRoot , transpiledFeatures ) ; this . value = new double [] { value } ; }
Distance : 11

130
Tree	{ super ( paint ) ; this . value = value ; for }
Code	{ super ( paint ) ; this . value = value ; for }
Distance : 9

131
Tree	{ super ( paint , stroke , transpiledFeatures , alpha ) ; this . value = checkNotNull ( value ) ; }
Code	{ super ( paint , stroke , transpiledFeatures , alpha ) ; this . value = checkNotNull ( value ) ; }
Distance : 6

132
Tree	{ super ( ComposableFunction.COSH , stroke ) ; this . value = value ; }
Code	{ super ( ComposableFunction.COSH , stroke ) ; this . value = value ; }
Distance : 7

133
Tree	{ super ( paint , scriptRoot ) ; this . value = value . value () ; }
Code	{ super ( paint , scriptRoot ) ; this . value = value . value () ; }
Distance : 10

134
Tree	{ super ( relativeAccuracy , stroke , paint ) ; this . value = new double [] { value } ; }
Code	{ super ( relativeAccuracy , stroke , paint ) ; this . value = new double [] { value } ; }
Distance : 11

135
Tree	{ super ( paint , stroke , checkedFeatures , alpha ) ; this . value = value ; }
Code	{ super ( paint , stroke , checkedFeatures , alpha ) ; this . value = value ; }
Distance : 3

136
Tree	{ super ( paint ? LanguageMode.NO_TRANSPILE : LanguageMode.NO_TRANSPILE ) ; this . value = value ; }
Code	{ super ( paint ? LanguageMode.NO_TRANSPILE : LanguageMode.NO_TRANSPILE ) ; this . value = value ; }
Distance : 8

137
Tree	{ super ( EXTERNS , stroke ) ; this . value = value ; }
Code	{ super ( EXTERNS , stroke ) ; this . value = value ; }
Distance : 7

138
Tree	{ super ( paint , stroke , checkedFeatures ) ; this . value = checkNotNull ( value ) ; }
Code	{ super ( paint , stroke , checkedFeatures ) ; this . value = checkNotNull ( value ) ; }
Distance : 8

139
Tree	{ super ( paint , scriptRoot , paint , alpha ) ; this . value = value . value () ; }
Code	{ super ( paint , scriptRoot , paint , alpha ) ; this . value = value . value () ; }
Distance : 7

140
Tree	{ super ( paint , stroke , paint ) ; this . value = getDimension ( value ) ; }
Code	{ super ( paint , stroke , paint ) ; this . value = getDimension ( value ) ; }
Distance : 8

141
Tree	{ super ( relativeAccuracy , stroke , transpiledFeatures , alpha ) ; this . value = checkNotNull ( value ) ; }
Code	{ super ( relativeAccuracy , stroke , transpiledFeatures , alpha ) ; this . value = checkNotNull ( value ) ; }
Distance : 7

142
Tree	{ super ( paint , stroke , paint , shape ) ; this . value = checkNotNull ( value ) ; }
Code	{ super ( paint , stroke , paint , shape ) ; this . value = checkNotNull ( value ) ; }
Distance : 7

143
Tree	{ super ( paint , stroke , checkedFeatures , alpha ) ; this . value = value . value () ; }
Code	{ super ( paint , stroke , checkedFeatures , alpha ) ; this . value = value . value () ; }
Distance : 6

144
Tree	{ super ( null , stroke , transpiledFeatures , shape , alpha , alpha ) ; this . value = value ; }
Code	{ super ( null , stroke , transpiledFeatures , shape , alpha , alpha ) ; this . value = value ; }
Distance : 5

145
Tree	{ super ( paint , scriptRoot , paint ) ; this . value = checkNotNull ( value ) ; }
Code	{ super ( paint , scriptRoot , paint ) ; this . value = checkNotNull ( value ) ; }
Distance : 9

146
Tree	{ super ( formatString , stroke ) ; this . value = value . value () ; }
Code	{ super ( formatString , stroke ) ; this . value = value . value () ; }
Distance : 10

147
Tree	{ super ( symbolName ) ; this . value = new double [] { value } ; }
Code	{ super ( symbolName ) ; this . value = new double [] { value } ; }
Distance : 14

148
Tree	{ super ( paint , scriptRoot , paint , alpha ) ; this . value = checkNotNull ( value ) ; }
Code	{ super ( paint , scriptRoot , paint , alpha ) ; this . value = checkNotNull ( value ) ; }
Distance : 7

149
Tree	{ super ( paint ) ; this . value = getValue ( value ) ; }
Code	{ super ( paint ) ; this . value = getValue ( value ) ; }
Distance : 11

150
Tree	{ super ( paint , scriptRoot ) ; this . value = checkNotNull ( value ) ; }
Code	{ super ( paint , scriptRoot ) ; this . value = checkNotNull ( value ) ; }
Distance : 10

151
Tree	{ super ( relativeAccuracy , scriptRoot ) ; this . value = new double [] { value } ; }
Code	{ super ( relativeAccuracy , scriptRoot ) ; this . value = new double [] { value } ; }
Distance : 13

152
Tree	{ super ( DateTimePrinterInternalPrinter , stroke ) ; this . value = checkNotNull ( value ) ; }
Code	{ super ( DateTimePrinterInternalPrinter , stroke ) ; this . value = checkNotNull ( value ) ; }
Distance : 10

153
Tree	{ super ( paint , stroke , paint , alpha ) ; this . value = checkNotNull ( value ) ; }
Code	{ super ( paint , stroke , paint , alpha ) ; this . value = checkNotNull ( value ) ; }
Distance : 6

154
Tree	{ super ( paint ) ; this . value = value ; private }
Code	{ super ( paint ) ; this . value = value ; private }
Distance : 9

155
Tree	{ super ( paint , stroke , transpiledFeatures , shape ) ; this . value = value . value () ; }
Code	{ super ( paint , stroke , transpiledFeatures , shape ) ; this . value = value . value () ; }
Distance : 7

156
Tree	{ super ( paint , stroke , transpiledFeatures , alpha ) ; this . value = value . value () ; }
Code	{ super ( paint , stroke , transpiledFeatures , alpha ) ; this . value = value . value () ; }
Distance : 6

157
Tree	{ super ( null , stroke , transpiledFeatures , alpha , alpha , shape ) ; this . value = value ; }
Code	{ super ( null , stroke , transpiledFeatures , alpha , alpha , shape ) ; this . value = value ; }
Distance : 5

158
Tree	{ super ( paint , stroke , paint ) ; this . value = getName ( value ) ; }
Code	{ super ( paint , stroke , paint ) ; this . value = getName ( value ) ; }
Distance : 8

159
Tree	{ super ( formatString , stroke ) ; this . value = checkNotNull ( value ) ; }
Code	{ super ( formatString , stroke ) ; this . value = checkNotNull ( value ) ; }
Distance : 10

160
Tree	{ super ( paint != null ? stroke : imaginary ) ; this . value = value ; }
Code	{ super ( paint != null ? stroke : imaginary ) ; this . value = value ; }
Distance : 8

161
Tree	{ super ( paint != null ? stroke : SerialUtils ) ; this . value = value ; }
Code	{ super ( paint != null ? stroke : SerialUtils ) ; this . value = value ; }
Distance : 8

162
Tree	{ super ( relativeAccuracy ) ; this . value = value ; fireChangeEvent }
Code	{ super ( relativeAccuracy ) ; this . value = value ; fireChangeEvent }
Distance : 10

163
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = key ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = key ; }
Distance : 9

164
Tree	{ super ( relativeAccuracy . isScript () , stroke ) ; this . value = value ; }
Code	{ super ( relativeAccuracy . isScript () , stroke ) ; this . value = value ; }
Distance : 8

165
Tree	{ super ( symbolName ) ; this . value = value . value () ; }
Code	{ super ( symbolName ) ; this . value = value . value () ; }
Distance : 12

166
Tree	{ super ( paint . getRandomGenerator () , stroke ) ; this . value = value ; }
Code	{ super ( paint . getRandomGenerator () , stroke ) ; this . value = value ; }
Distance : 7

167
Tree	{ super ( EXTERNS , stroke ) ; this . value = value . value () ; }
Code	{ super ( EXTERNS , stroke ) ; this . value = value . value () ; }
Distance : 10

168
Tree	{ super ( absoluteAccuracy , stroke , paint ) ; this . value = value . value () ; }
Code	{ super ( absoluteAccuracy , stroke , paint ) ; this . value = value . value () ; }
Distance : 9

169
Tree	{ super ( relativeAccuracy , stroke , transpiledFeatures ) ; this . value = checkNotNull ( value ) ; }
Code	{ super ( relativeAccuracy , stroke , transpiledFeatures ) ; this . value = checkNotNull ( value ) ; }
Distance : 9

170
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = n ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = n ; }
Distance : 9

171
Tree	{ super ( paint ) ; this . value = value ; if }
Code	{ super ( paint ) ; this . value = value ; if }
Distance : 9

172
Tree	{ super ( paint , stroke , transpiledFeatures , shape ) ; this . value = new double [] { value } ; }
Code	{ super ( paint , stroke , transpiledFeatures , shape ) ; this . value = new double [] { value } ; }
Distance : 9

173
Tree	{ super ( paint ? LocalizedFormats.NUMBER_TOO_LARGE : LanguageMode.NO_TRANSPILE ) ; this . value = value ; }
Code	{ super ( paint ? LocalizedFormats.NUMBER_TOO_LARGE : LanguageMode.NO_TRANSPILE ) ; this . value = value ; }
Distance : 8

174
Tree	{ super ( fieldSeparator ) ; this . value = value . value () ; }
Code	{ super ( fieldSeparator ) ; this . value = value . value () ; }
Distance : 12

175
Tree	{ super ( paint . of () , stroke ) ; this . value = value ; }
Code	{ super ( paint . of () , stroke ) ; this . value = value ; }
Distance : 7

176
Tree	{ super ( absoluteAccuracy , stroke ) ; this . value = checkNotNull ( value ) ; }
Code	{ super ( absoluteAccuracy , stroke ) ; this . value = checkNotNull ( value ) ; }
Distance : 10

177
Tree	{ super ( paint , stroke ) ; this . value = getName ( value ) ; }
Code	{ super ( paint , stroke ) ; this . value = getName ( value ) ; }
Distance : 9

178
Tree	{ super ( relativeAccuracy . getLifeCycleStage () , stroke ) ; this . value = value ; }
Code	{ super ( relativeAccuracy . getLifeCycleStage () , stroke ) ; this . value = value ; }
Distance : 8

179
Tree	{ super ( relativeAccuracy ? LocalizedFormats.NUMBER_TOO_SMALL : LanguageMode.NO_TRANSPILE ) ; this . value = value ; }
Code	{ super ( relativeAccuracy ? LocalizedFormats.NUMBER_TOO_SMALL : LanguageMode.NO_TRANSPILE ) ; this . value = value ; }
Distance : 9

180
Tree	{ super ( absoluteAccuracy != null ? stroke : stroke ) ; this . value = value ; }
Code	{ super ( absoluteAccuracy != null ? stroke : stroke ) ; this . value = value ; }
Distance : 9

181
Tree	{ super ( paint ? LocalizedFormats.NUMBER_TOO_SMALL : LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED ) ; this . value = value ; }
Code	{ super ( paint ? LocalizedFormats.NUMBER_TOO_SMALL : LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED ) ; this . value = value ; }
Distance : 8

182
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . key = value ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . key = value ; }
Distance : 9

183
Tree	{ super ( formatString ) ; this . value = checkNotNull ( value ) ; }
Code	{ super ( formatString ) ; this . value = checkNotNull ( value ) ; }
Distance : 12

184
Tree	{ super ( paint != null ? stroke : real ) ; this . value = value ; }
Code	{ super ( paint != null ? stroke : real ) ; this . value = value ; }
Distance : 8

185
Tree	{ super ( relativeAccuracy , scriptRoot ) ; this . value = value . value () ; }
Code	{ super ( relativeAccuracy , scriptRoot ) ; this . value = value . value () ; }
Distance : 11

186
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . out = value ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . out = value ; }
Distance : 9

187
Tree	{ super ( paint ? LanguageMode.NO_TRANSPILE : LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ) ; this . value = value ; }
Code	{ super ( paint ? LanguageMode.NO_TRANSPILE : LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ) ; this . value = value ; }
Distance : 8

188
Tree	{ super ( paint . format () , stroke ) ; this . value = value ; }
Code	{ super ( paint . format () , stroke ) ; this . value = value ; }
Distance : 7

189
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . locale = value ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . locale = value ; }
Distance : 9

190
Tree	{ super ( paint . isScript () , stroke ) ; this . value = value ; }
Code	{ super ( paint . isScript () , stroke ) ; this . value = value ; }
Distance : 7

191
Tree	{ super ( relativeAccuracy , stroke , transpiledFeatures , alpha ) ; this . value = value . value () ; }
Code	{ super ( relativeAccuracy , stroke , transpiledFeatures , alpha ) ; this . value = value . value () ; }
Distance : 7

192
Tree	{ super ( paint != null ? stroke : absoluteAccuracy ) ; this . value = value ; }
Code	{ super ( paint != null ? stroke : absoluteAccuracy ) ; this . value = value ; }
Distance : 8

193
Tree	{ super ( paint ? LocalizedFormats.NUMBER_TOO_SMALL : definitionsGatherer.definitions ) ; this . value = value ; }
Code	{ super ( paint ? LocalizedFormats.NUMBER_TOO_SMALL : definitionsGatherer.definitions ) ; this . value = value ; }
Distance : 8

194
Tree	{ super ( EXTERNS , stroke ) ; }
Code	{ super ( EXTERNS , stroke ) ; }
Distance : 13

195
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = MathArrays ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = MathArrays ; }
Distance : 9

196
Tree	{ super ( paint , stroke , transpiledFeatures , shape ) ; this . value = checkNotNull ( value ) ; }
Code	{ super ( paint , stroke , transpiledFeatures , shape ) ; this . value = checkNotNull ( value ) ; }
Distance : 7

197
Tree	{ super ( paint . readShape () , stroke ) ; this . value = value ; }
Code	{ super ( paint . readShape () , stroke ) ; this . value = value ; }
Distance : 7

198
Tree	{ super ( paint , stroke ) ; this . value = getValue ( value ) ; }
Code	{ super ( paint , stroke ) ; this . value = getValue ( value ) ; }
Distance : 9

199
Tree	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = LinearCombination ; }
Code	{ super ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; this . value = LinearCombination ; }
Distance : 9

========================================================================


========================================================================
Example Number: 3
Parent Code is: 
if ( index < NUMBER_CONSTANT ) { return; }
-------------------------------------------------------------------------------
Child code is: 
if ( index < NUMBER_CONSTANT ) { throw new UnknownKeyException ( STRING_CONSTANT + key + STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=index}) (230{val=<}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (500{val=return;}) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=index}) (230{val=<}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=UnknownKeyException})) (214{val=(}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (800{val=key}) (200{val=+}) (45{val=STRING_CONSTANT})) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/18/parent/source_org_jfree_data_DefaultKeyedValues.java
-------------------------------------------------------------------------------
Edit Distance : 11
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( toBooleanObject () ) { return; }
Code	if ( toBooleanObject () ) { return; }
Distance : 14

1
Tree	if ( ! ch ) { return; }
Code	if ( ! ch ) { return; }
Distance : 14

2
Tree	if ( array < NUMBER_CONSTANT ) { return; }
Code	if ( array < NUMBER_CONSTANT ) { return; }
Distance : 12

3
Tree	if ( child.parent != null ) { return; }
Code	if ( child.parent != null ) { return; }
Distance : 14

4
Tree	if ( toBooleanObject () == null ) { return; }
Code	if ( toBooleanObject () == null ) { return; }
Distance : 15

5
Tree	if ( index < NUMBER_CONSTANT ) { super(); }
Code	if ( index < NUMBER_CONSTANT ) { super(); }
Distance : 11

6
Tree	if ( d.length != null ) { return; }
Code	if ( d.length != null ) { return; }
Distance : 14

7
Tree	if ( index != null ) { break; }
Code	if ( index != null ) { break; }
Distance : 13

8
Tree	if ( index . isHoistScope ( index ) ) { return; }
Code	if ( index . isHoistScope ( index ) ) { return; }
Distance : 14

9
Tree	if ( this == index ) { return; }
Code	if ( this == index ) { return; }
Distance : 14

10
Tree	if ( ! index . valueOf ( index , false ) ) { return; }
Code	if ( ! index . valueOf ( index , false ) ) { return; }
Distance : 15

11
Tree	if ( index . isNaN () ) { return; }
Code	if ( index . isNaN () ) { return; }
Distance : 14

12
Tree	if ( index != f.length ) { return; }
Code	if ( index != f.length ) { return; }
Distance : 13

13
Tree	if ( index . abs () == null ) { return; }
Code	if ( index . abs () == null ) { return; }
Distance : 15

14
Tree	if ( ! index . isHoistScope ( index ) ) { return; }
Code	if ( ! index . isHoistScope ( index ) ) { return; }
Distance : 15

15
Tree	if ( index . isEnhancedFor ( index ) ) { return; }
Code	if ( index . isEnhancedFor ( index ) ) { return; }
Distance : 14

16
Tree	if ( index . abs ( index ) == null ) { return; }
Code	if ( index . abs ( index ) == null ) { return; }
Distance : 14

17
Tree	if ( index . isNaN ( index , false ) ) { return; }
Code	if ( index . isNaN ( index , false ) ) { return; }
Distance : 14

18
Tree	if ( ! index . equal ( index ) ) { return; }
Code	if ( ! index . equal ( index ) ) { return; }
Distance : 15

19
Tree	if ( index . isHoistScope ( index ) == null ) { return; }
Code	if ( index . isHoistScope ( index ) == null ) { return; }
Distance : 14

20
Tree	if ( index . getParent () == null ) { return; }
Code	if ( index . getParent () == null ) { return; }
Distance : 15

21
Tree	if ( index < NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.CANNOT_SET_AT_NEGATIVE_INDEX , index , tolerance ) ; }
Code	if ( index < NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.CANNOT_SET_AT_NEGATIVE_INDEX , index , tolerance ) ; }
Distance : 8

22
Tree	if ( index != y0 ) { return; }
Code	if ( index != y0 ) { return; }
Distance : 13

23
Tree	if ( ! index . getDataset ( STRING_CONSTANT , index ) ) { return; }
Code	if ( ! index . getDataset ( STRING_CONSTANT , index ) ) { return; }
Distance : 14

24
Tree	if ( index . isNaN ( index ) ) { return; }
Code	if ( index . isNaN ( index ) ) { return; }
Distance : 14

25
Tree	if ( index > point ) { return; }
Code	if ( index > point ) { return; }
Distance : 13

26
Tree	if ( ! object ) { return; }
Code	if ( ! object ) { return; }
Distance : 14

27
Tree	if ( index . isEnhancedFor () ) { return; }
Code	if ( index . isEnhancedFor () ) { return; }
Distance : 14

28
Tree	if ( index != null ) { super(); }
Code	if ( index != null ) { super(); }
Distance : 13

29
Tree	if ( index . equal () ) { return; }
Code	if ( index . equal () ) { return; }
Distance : 14

30
Tree	if ( ! index . isEnhancedFor ( index ) ) { return; }
Code	if ( ! index . isEnhancedFor ( index ) ) { return; }
Distance : 15

31
Tree	if ( v.data != null ) { return; }
Code	if ( v.data != null ) { return; }
Distance : 14

32
Tree	if ( index != coefficients ) { return; }
Code	if ( index != coefficients ) { return; }
Distance : 13

33
Tree	if ( index . abs ( index ) > w ) { return; }
Code	if ( index . abs ( index ) > w ) { return; }
Distance : 14

34
Tree	if ( ! index . isHoistScope ( STRING_CONSTANT , index ) ) { return; }
Code	if ( ! index . isHoistScope ( STRING_CONSTANT , index ) ) { return; }
Distance : 14

35
Tree	if ( index > index ) { return; }
Code	if ( index > index ) { return; }
Distance : 13

36
Tree	if ( index != types ) { return; }
Code	if ( index != types ) { return; }
Distance : 13

37
Tree	if ( Any.ANY != null ) { return; }
Code	if ( Any.ANY != null ) { return; }
Distance : 14

38
Tree	if ( ! index . getParent ( STRING_CONSTANT , index ) ) { return; }
Code	if ( ! index . getParent ( STRING_CONSTANT , index ) ) { return; }
Distance : 14

39
Tree	if ( index < NUMBER_CONSTANT ) { throw Reporter . createIllegalArgumentException ( LocalizedFormats.CANNOT_SET_AT_NEGATIVE_INDEX , index , tolerance ) ; }
Code	if ( index < NUMBER_CONSTANT ) { throw Reporter . createIllegalArgumentException ( LocalizedFormats.CANNOT_SET_AT_NEGATIVE_INDEX , index , tolerance ) ; }
Distance : 8

40
Tree	if ( index > other ) { return; }
Code	if ( index > other ) { return; }
Distance : 13

41
Tree	if ( index != null ) { continue; }
Code	if ( index != null ) { continue; }
Distance : 13

42
Tree	if ( this == alpha ) { return; }
Code	if ( this == alpha ) { return; }
Distance : 14

43
Tree	if ( index . valueOf ( index ) ) { return; }
Code	if ( index . valueOf ( index ) ) { return; }
Distance : 14

44
Tree	if ( ! alpha ) { return; }
Code	if ( ! alpha ) { return; }
Distance : 14

45
Tree	if ( ch != null ) { return; }
Code	if ( ch != null ) { return; }
Distance : 14

46
Tree	if ( ! index . abs () ) { return; }
Code	if ( ! index . abs () ) { return; }
Distance : 15

47
Tree	if ( ! index ) { return; }
Code	if ( ! index ) { return; }
Distance : 14

48
Tree	if ( ! Coordinates3D ) { return; }
Code	if ( ! Coordinates3D ) { return; }
Distance : 14

49
Tree	if ( index . toBooleanObject ( index ) == null ) { return; }
Code	if ( index . toBooleanObject ( index ) == null ) { return; }
Distance : 14

50
Tree	if ( ! formatter ) { return; }
Code	if ( ! formatter ) { return; }
Distance : 14

51
Tree	if ( ! index . getParent ( index , false ) ) { return; }
Code	if ( ! index . getParent ( index , false ) ) { return; }
Distance : 15

52
Tree	if ( ! index . abs ( index , false ) ) { return; }
Code	if ( ! index . abs ( index , false ) ) { return; }
Distance : 15

53
Tree	if ( parent != null ) { return; }
Code	if ( parent != null ) { return; }
Distance : 14

54
Tree	if ( index != v.data ) { return; }
Code	if ( index != v.data ) { return; }
Distance : 13

55
Tree	if ( ! index . isHoistScope () ) { return; }
Code	if ( ! index . isHoistScope () ) { return; }
Distance : 15

56
Tree	if ( ! index . isHoistScope ( index , false ) ) { return; }
Code	if ( ! index . isHoistScope ( index , false ) ) { return; }
Distance : 15

57
Tree	if ( index < NUMBER_CONSTANT ) { return; }
Code	if ( index < NUMBER_CONSTANT ) { return; }
Distance : 11

58
Tree	if ( index . abs ( index ) ) { return; }
Code	if ( index . abs ( index ) ) { return; }
Distance : 14

59
Tree	if ( index . valueOf () ) { return; }
Code	if ( index . valueOf () ) { return; }
Distance : 14

60
Tree	if ( index != TypeInferenceMode.CHECKED ) { return; }
Code	if ( index != TypeInferenceMode.CHECKED ) { return; }
Distance : 13

61
Tree	if ( ! index . equal () ) { return; }
Code	if ( ! index . equal () ) { return; }
Distance : 15

62
Tree	if ( ! index . equal ( index , false ) ) { return; }
Code	if ( ! index . equal ( index , false ) ) { return; }
Distance : 15

63
Tree	if ( index != MathUtils.TWO_PI ) { return; }
Code	if ( index != MathUtils.TWO_PI ) { return; }
Distance : 13

64
Tree	if ( ! index . toBooleanObject ( STRING_CONSTANT , index ) ) { return; }
Code	if ( ! index . toBooleanObject ( STRING_CONSTANT , index ) ) { return; }
Distance : 14

65
Tree	if ( index . isHoistScope () ) { return; }
Code	if ( index . isHoistScope () ) { return; }
Distance : 14

66
Tree	if ( ! index . abs ( STRING_CONSTANT , index ) ) { return; }
Code	if ( ! index . abs ( STRING_CONSTANT , index ) ) { return; }
Distance : 14

67
Tree	if ( index . abs ( index ) > types ) { return; }
Code	if ( index . abs ( index ) > types ) { return; }
Distance : 14

68
Tree	if ( object != null ) { return; }
Code	if ( object != null ) { return; }
Distance : 14

69
Tree	if ( index . abs ( index ) > overflow ) { return; }
Code	if ( index . abs ( index ) > overflow ) { return; }
Distance : 14

70
Tree	if ( ! index . isEnhancedFor () ) { return; }
Code	if ( ! index . isEnhancedFor () ) { return; }
Distance : 15

71
Tree	if ( index . isNaN ( index ) == null ) { return; }
Code	if ( index . isNaN ( index ) == null ) { return; }
Distance : 14

72
Tree	if ( ! index . isEnhancedFor ( index , false ) ) { return; }
Code	if ( ! index . isEnhancedFor ( index , false ) ) { return; }
Distance : 15

73
Tree	if ( index != tolerance ) { return; }
Code	if ( index != tolerance ) { return; }
Distance : 13

74
Tree	if ( ! index . valueOf ( STRING_CONSTANT , index ) ) { return; }
Code	if ( ! index . valueOf ( STRING_CONSTANT , index ) ) { return; }
Distance : 14

75
Tree	if ( index . toBooleanObject ( index ) > types ) { return; }
Code	if ( index . toBooleanObject ( index ) > types ) { return; }
Distance : 14

76
Tree	if ( ! getGoalType ( index ) ) { return; }
Code	if ( ! getGoalType ( index ) ) { return; }
Distance : 15

77
Tree	if ( ! types ( index ) ) { return; }
Code	if ( ! types ( index ) ) { return; }
Distance : 15

78
Tree	if ( index . toBooleanObject () == null ) { return; }
Code	if ( index . toBooleanObject () == null ) { return; }
Distance : 15

79
Tree	if ( index != TracerMode.OFF ) { return; }
Code	if ( index != TracerMode.OFF ) { return; }
Distance : 13

80
Tree	if ( ! getNumber ( index ) ) { return; }
Code	if ( ! getNumber ( index ) ) { return; }
Distance : 15

81
Tree	if ( index != ch ) { return; }
Code	if ( index != ch ) { return; }
Distance : 13

82
Tree	if ( ! getTolerance ( index ) ) { return; }
Code	if ( ! getTolerance ( index ) ) { return; }
Distance : 15

83
Tree	if ( index . valueOf ( index ) == null ) { return; }
Code	if ( index . valueOf ( index ) == null ) { return; }
Distance : 14

84
Tree	if ( ! index . getDataset () ) { return; }
Code	if ( ! index . getDataset () ) { return; }
Distance : 15

85
Tree	if ( index . getParent ( index , false ) ) { return; }
Code	if ( index . getParent ( index , false ) ) { return; }
Distance : 14

86
Tree	if ( ! index . abs ( index ) ) { return; }
Code	if ( ! index . abs ( index ) ) { return; }
Distance : 15

87
Tree	if ( index != IncrementalCheckMode.GENERATE_IJS ) { return; }
Code	if ( index != IncrementalCheckMode.GENERATE_IJS ) { return; }
Distance : 13

88
Tree	if ( ! index . getDataset ( index , false ) ) { return; }
Code	if ( ! index . getDataset ( index , false ) ) { return; }
Distance : 15

89
Tree	if ( ! returnChar ( index ) ) { return; }
Code	if ( ! returnChar ( index ) ) { return; }
Distance : 15

90
Tree	if ( index . getParent () ) { return; }
Code	if ( index . getParent () ) { return; }
Distance : 14

91
Tree	if ( index . abs ( index , false ) ) { return; }
Code	if ( index . abs ( index , false ) ) { return; }
Distance : 14

92
Tree	if ( index . toBooleanObject ( index ) ) { return; }
Code	if ( index . toBooleanObject ( index ) ) { return; }
Distance : 14

93
Tree	if ( index . abs ( index ) > points ) { return; }
Code	if ( index . abs ( index ) > points ) { return; }
Distance : 14

94
Tree	if ( ! index . valueOf ( index ) ) { return; }
Code	if ( ! index . valueOf ( index ) ) { return; }
Distance : 15

95
Tree	if ( isEquals () ) { return; }
Code	if ( isEquals () ) { return; }
Distance : 14

96
Tree	if ( index . abs () ) { return; }
Code	if ( index . abs () ) { return; }
Distance : 14

97
Tree	if ( ! index . toBooleanObject ( index , false ) ) { return; }
Code	if ( ! index . toBooleanObject ( index , false ) ) { return; }
Distance : 15

98
Tree	if ( ! index . getParent ( index ) ) { return; }
Code	if ( ! index . getParent ( index ) ) { return; }
Distance : 15

99
Tree	if ( index . getParent ( index ) ) { return; }
Code	if ( index . getParent ( index ) ) { return; }
Distance : 14

100
Tree	if ( index <= NUMBER_CONSTANT ) { return; }
Code	if ( index <= NUMBER_CONSTANT ) { return; }
Distance : 12

101
Tree	if ( index != null ) { return; }
Code	if ( index != null ) { return; }
Distance : 13

102
Tree	if ( getNumber () ) { return; }
Code	if ( getNumber () ) { return; }
Distance : 14

103
Tree	if ( index . abs ( index ) > loop ) { return; }
Code	if ( index . abs ( index ) > loop ) { return; }
Distance : 14

104
Tree	if ( ! index . getParent () ) { return; }
Code	if ( ! index . getParent () ) { return; }
Distance : 15

105
Tree	if ( index < NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.CANNOT_SET_AT_NEGATIVE_INDEX , index , lower ) ; }
Code	if ( index < NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.CANNOT_SET_AT_NEGATIVE_INDEX , index , lower ) ; }
Distance : 8

106
Tree	if ( index . toBooleanObject ( index ) == return; ) { return; }
Code	if ( index . toBooleanObject ( index ) == return; ) { return; }
Distance : 14

107
Tree	if ( ! index . isEnhancedFor ( STRING_CONSTANT , index ) ) { return; }
Code	if ( ! index . isEnhancedFor ( STRING_CONSTANT , index ) ) { return; }
Distance : 14

108
Tree	if ( index . toBooleanObject () ) { return; }
Code	if ( index . toBooleanObject () ) { return; }
Distance : 14

109
Tree	if ( index != v.length ) { return; }
Code	if ( index != v.length ) { return; }
Distance : 13

110
Tree	if ( LocalizedFormats.SAME_SIGN_AT_ENDPOINTS != null ) { return; }
Code	if ( LocalizedFormats.SAME_SIGN_AT_ENDPOINTS != null ) { return; }
Distance : 14

111
Tree	if ( f.length != null ) { return; }
Code	if ( f.length != null ) { return; }
Distance : 14

112
Tree	if ( ! index . toBooleanObject () ) { return; }
Code	if ( ! index . toBooleanObject () ) { return; }
Distance : 15

113
Tree	if ( ! isEquals ) { return; }
Code	if ( ! isEquals ) { return; }
Distance : 14

114
Tree	if ( index . toBooleanObject ( index , false ) ) { return; }
Code	if ( index . toBooleanObject ( index , false ) ) { return; }
Distance : 14

115
Tree	if ( index < NUMBER_CONSTANT ) { throw Reporter . createIllegalArgumentException ( LocalizedFormats.CANNOT_SET_AT_NEGATIVE_INDEX , index , lower ) ; }
Code	if ( index < NUMBER_CONSTANT ) { throw Reporter . createIllegalArgumentException ( LocalizedFormats.CANNOT_SET_AT_NEGATIVE_INDEX , index , lower ) ; }
Distance : 8

116
Tree	if ( ! allDefinitionsEquivalent ( index ) ) { return; }
Code	if ( ! allDefinitionsEquivalent ( index ) ) { return; }
Distance : 15

117
Tree	if ( index . abs ( index ) > index ) { return; }
Code	if ( index . abs ( index ) > index ) { return; }
Distance : 14

118
Tree	if ( ! Boolean ) { return; }
Code	if ( ! Boolean ) { return; }
Distance : 14

119
Tree	if ( index != data.length ) { return; }
Code	if ( index != data.length ) { return; }
Distance : 13

120
Tree	if ( size ( index ) ) { return; }
Code	if ( size ( index ) ) { return; }
Distance : 15

121
Tree	if ( index < NUMBER_CONSTANT ) { break; }
Code	if ( index < NUMBER_CONSTANT ) { break; }
Distance : 11

122
Tree	if ( index . valueOf ( index , false ) ) { return; }
Code	if ( index . valueOf ( index , false ) ) { return; }
Distance : 14

123
Tree	if ( index != Boolean ) { return; }
Code	if ( index != Boolean ) { return; }
Distance : 13

124
Tree	if ( index < NUMBER_CONSTANT ) { throw Reporter . createIllegalArgumentException ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT , index , lower ) ; }
Code	if ( index < NUMBER_CONSTANT ) { throw Reporter . createIllegalArgumentException ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT , index , lower ) ; }
Distance : 8

125
Tree	if ( ch < NUMBER_CONSTANT ) { return; }
Code	if ( ch < NUMBER_CONSTANT ) { return; }
Distance : 12

126
Tree	if ( index . valueOf () == null ) { return; }
Code	if ( index . valueOf () == null ) { return; }
Distance : 15

127
Tree	if ( index . isHoistScope ( index , false ) ) { return; }
Code	if ( index . isHoistScope ( index , false ) ) { return; }
Distance : 14

128
Tree	if ( isNaN () == null ) { return; }
Code	if ( isNaN () == null ) { return; }
Distance : 15

129
Tree	if ( size () ) { return; }
Code	if ( size () ) { return; }
Distance : 14

130
Tree	if ( ! index . toBooleanObject ( index ) ) { return; }
Code	if ( ! index . toBooleanObject ( index ) ) { return; }
Distance : 15

131
Tree	if ( isEquals () == null ) { return; }
Code	if ( isEquals () == null ) { return; }
Distance : 15

132
Tree	if ( getDimension ( index ) ) { return; }
Code	if ( getDimension ( index ) ) { return; }
Distance : 15

133
Tree	if ( ! isPowerOf2 ( index ) ) { return; }
Code	if ( ! isPowerOf2 ( index ) ) { return; }
Distance : 15

134
Tree	if ( getDimension () ) { return; }
Code	if ( getDimension () ) { return; }
Distance : 14

135
Tree	if ( getDimension () == null ) { return; }
Code	if ( getDimension () == null ) { return; }
Distance : 15

136
Tree	if ( index . isEnhancedFor ( index , false ) ) { return; }
Code	if ( index . isEnhancedFor ( index , false ) ) { return; }
Distance : 14

137
Tree	if ( getParent () == null ) { return; }
Code	if ( getParent () == null ) { return; }
Distance : 15

138
Tree	if ( size () == null ) { return; }
Code	if ( size () == null ) { return; }
Distance : 15

139
Tree	if ( index . getParent ( index ) == null ) { return; }
Code	if ( index . getParent ( index ) == null ) { return; }
Distance : 14

140
Tree	if ( ! index . getDataset ( index ) ) { return; }
Code	if ( ! index . getDataset ( index ) ) { return; }
Distance : 15

141
Tree	if ( index . isNaN () == null ) { return; }
Code	if ( index . isNaN () == null ) { return; }
Distance : 15

142
Tree	if ( index < NUMBER_CONSTANT ) { continue; }
Code	if ( index < NUMBER_CONSTANT ) { continue; }
Distance : 11

143
Tree	if ( abs ( index ) ) { return; }
Code	if ( abs ( index ) ) { return; }
Distance : 15

144
Tree	if ( getNumber () == null ) { return; }
Code	if ( getNumber () == null ) { return; }
Distance : 15

145
Tree	if ( index < NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT , index , lower ) ; }
Code	if ( index < NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT , index , lower ) ; }
Distance : 8

146
Tree	if ( index . isEnhancedFor () == null ) { return; }
Code	if ( index . isEnhancedFor () == null ) { return; }
Distance : 15

147
Tree	if ( ! index . valueOf () ) { return; }
Code	if ( ! index . valueOf () ) { return; }
Distance : 15

148
Tree	if ( index . abs ( index ) == return; ) { return; }
Code	if ( index . abs ( index ) == return; ) { return; }
Distance : 14

149
Tree	if ( index < NUMBER_CONSTANT ) { throw Coordinates3D . createIllegalArgumentException ( LocalizedFormats.CANNOT_SET_AT_NEGATIVE_INDEX , index , lower ) ; }
Code	if ( index < NUMBER_CONSTANT ) { throw Coordinates3D . createIllegalArgumentException ( LocalizedFormats.CANNOT_SET_AT_NEGATIVE_INDEX , index , lower ) ; }
Distance : 8

150
Tree	if ( ! getDataset ( index ) ) { return; }
Code	if ( ! getDataset ( index ) ) { return; }
Distance : 15

151
Tree	if ( index . equal ( index , false ) ) { return; }
Code	if ( index . equal ( index , false ) ) { return; }
Distance : 14

152
Tree	if ( index != null < tolerance . getTimeZone ( index ) ) { return; }
Code	if ( index != null < tolerance . getTimeZone ( index ) ) { return; }
Distance : 14

153
Tree	if ( index != null < tolerance . getDaysInYearMax ( index ) ) { return; }
Code	if ( index != null < tolerance . getDaysInYearMax ( index ) ) { return; }
Distance : 14

154
Tree	if ( index != index ) { return; }
Code	if ( index != index ) { return; }
Distance : 13

155
Tree	if ( isNaN ( index ) ) { return; }
Code	if ( isNaN ( index ) ) { return; }
Distance : 15

156
Tree	if ( p1.vector != null ) { return; }
Code	if ( p1.vector != null ) { return; }
Distance : 14

157
Tree	if ( abs () ) { return; }
Code	if ( abs () ) { return; }
Distance : 14

158
Tree	if ( index != w ) { return; }
Code	if ( index != w ) { return; }
Distance : 13

159
Tree	if ( index != null NUMBER_CONSTANT tolerance . getParent ( index ) ) { return; }
Code	if ( index != null NUMBER_CONSTANT tolerance . getParent ( index ) ) { return; }
Distance : 14

160
Tree	if ( index . equal () == null ) { return; }
Code	if ( index . equal () == null ) { return; }
Distance : 15

161
Tree	if ( isEquals ( index ) ) { return; }
Code	if ( isEquals ( index ) ) { return; }
Distance : 15

162
Tree	if ( index . equal ( index ) ) { return; }
Code	if ( index . equal ( index ) ) { return; }
Distance : 14

163
Tree	if ( index < NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.CANNOT_SET_AT_NEGATIVE_INDEX , index , parent ) ; }
Code	if ( index < NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.CANNOT_SET_AT_NEGATIVE_INDEX , index , parent ) ; }
Distance : 8

164
Tree	if ( values.length != null ) { return; }
Code	if ( values.length != null ) { return; }
Distance : 14

165
Tree	if ( parent < NUMBER_CONSTANT ) { return; }
Code	if ( parent < NUMBER_CONSTANT ) { return; }
Distance : 12

166
Tree	if ( isNaN () ) { return; }
Code	if ( isNaN () ) { return; }
Distance : 14

167
Tree	if ( index <= NUMBER_CONSTANT ) { break; }
Code	if ( index <= NUMBER_CONSTANT ) { break; }
Distance : 12

168
Tree	if ( index . isHoistScope () == null ) { return; }
Code	if ( index . isHoistScope () == null ) { return; }
Distance : 15

169
Tree	if ( abs () == null ) { return; }
Code	if ( abs () == null ) { return; }
Distance : 15

170
Tree	if ( getParent ( index ) ) { return; }
Code	if ( getParent ( index ) ) { return; }
Distance : 15

171
Tree	if ( index . abs ( index ) > x1 ) { return; }
Code	if ( index . abs ( index ) > x1 ) { return; }
Distance : 14

172
Tree	if ( getNumber ( index ) ) { return; }
Code	if ( getNumber ( index ) ) { return; }
Distance : 15

173
Tree	if ( index != null < tolerance . isNaN ( index ) ) { return; }
Code	if ( index != null < tolerance . isNaN ( index ) ) { return; }
Distance : 14

174
Tree	if ( this == size ) { return; }
Code	if ( this == size ) { return; }
Distance : 14

175
Tree	if ( ! index . equal ( STRING_CONSTANT , index ) ) { return; }
Code	if ( ! index . equal ( STRING_CONSTANT , index ) ) { return; }
Distance : 14

176
Tree	if ( array <= NUMBER_CONSTANT ) { return; }
Code	if ( array <= NUMBER_CONSTANT ) { return; }
Distance : 13

177
Tree	if ( ch <= NUMBER_CONSTANT ) { return; }
Code	if ( ch <= NUMBER_CONSTANT ) { return; }
Distance : 13

178
Tree	if ( index > parent ) { return; }
Code	if ( index > parent ) { return; }
Distance : 13

179
Tree	if ( index != null < tolerance . toBooleanObject ( index ) ) { return; }
Code	if ( index != null < tolerance . toBooleanObject ( index ) ) { return; }
Distance : 14

180
Tree	if ( index <= NUMBER_CONSTANT ) { continue; }
Code	if ( index <= NUMBER_CONSTANT ) { continue; }
Distance : 12

181
Tree	if ( this == formatter ) { return; }
Code	if ( this == formatter ) { return; }
Distance : 14

182
Tree	if ( getParent () ) { return; }
Code	if ( getParent () ) { return; }
Distance : 14

183
Tree	if ( index > array ) { return; }
Code	if ( index > array ) { return; }
Distance : 13

184
Tree	if ( index > b ) { return; }
Code	if ( index > b ) { return; }
Distance : 13

185
Tree	if ( toBooleanObject ( index ) ) { return; }
Code	if ( toBooleanObject ( index ) ) { return; }
Distance : 15

186
Tree	if ( parent <= NUMBER_CONSTANT ) { return; }
Code	if ( parent <= NUMBER_CONSTANT ) { return; }
Distance : 13

187
Tree	if ( object < NUMBER_CONSTANT ) { return; }
Code	if ( object < NUMBER_CONSTANT ) { return; }
Distance : 12

188
Tree	if ( index != null < tolerance . getMethod ( index ) ) { return; }
Code	if ( index != null < tolerance . getMethod ( index ) ) { return; }
Distance : 14

189
Tree	if ( index > res ) { return; }
Code	if ( index > res ) { return; }
Distance : 13

190
Tree	if ( array != null ) { return; }
Code	if ( array != null ) { return; }
Distance : 14

191
Tree	if ( this == object ) { return; }
Code	if ( this == object ) { return; }
Distance : 14

192
Tree	if ( object <= NUMBER_CONSTANT ) { return; }
Code	if ( object <= NUMBER_CONSTANT ) { return; }
Distance : 13

193
Tree	if ( index > ch ) { return; }
Code	if ( index > ch ) { return; }
Distance : 13

194
Tree	if ( this == ch ) { return; }
Code	if ( this == ch ) { return; }
Distance : 14

195
Tree	if ( index != null < tolerance . getString ( index ) ) { return; }
Code	if ( index != null < tolerance . getString ( index ) ) { return; }
Distance : 14

196
Tree	if ( this == array ) { return; }
Code	if ( this == array ) { return; }
Distance : 14

197
Tree	if ( index <= NUMBER_CONSTANT ) { super(); }
Code	if ( index <= NUMBER_CONSTANT ) { super(); }
Distance : 12

198
Tree	if ( index != null < tolerance . getVertices ( index ) ) { return; }
Code	if ( index != null < tolerance . getVertices ( index ) ) { return; }
Distance : 14

199
Tree	if ( this == Coordinates3D ) { return; }
Code	if ( this == Coordinates3D ) { return; }
Distance : 14

========================================================================


========================================================================
Example Number: 4
Parent Code is: 
if ( categoryKeys.length != this . startData [ NUMBER_CONSTANT ] . length ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( categoryKeys.length != getCategoryCount () ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (40{val=categoryKeys.length}) (242{val=!=}) (22 (2 (22 (315{val=this}) (235{val=.}) (801{val=startData})) (221{val=[}) (34{val=NUMBER_CONSTANT}) (222{val=]})) (235{val=.}) (800{val=length}))) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=IllegalArgumentException})) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (40{val=categoryKeys.length}) (242{val=!=}) (32 (802{val=getCategoryCount}) (216{val=()}))) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=IllegalArgumentException})) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/16/parent/source_org_jfree_data_category_DefaultIntervalCategoryDataset.java
-------------------------------------------------------------------------------
Edit Distance : 8
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( variablesToInclude / ( System / Object < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( variablesToInclude / ( System / Object < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 24

1
Tree	if ( variablesToInclude / ( System / Object < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( variablesToInclude / ( System / Object < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 24

2
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length ) ; }
Distance : 18

3
Tree	if ( variablesToInclude / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE ) ; }
Code	if ( variablesToInclude / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE ) ; }
Distance : 15

4
Tree	if ( ( newVar / types < NUMBER_CONSTANT ) * length != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( ( newVar / types < NUMBER_CONSTANT ) * length != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 14

5
Tree	if ( ( timeToLive / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( ( timeToLive / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 14

6
Tree	if ( timeToLive / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( timeToLive / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 24

7
Tree	if ( timeToLive / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( timeToLive / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 24

8
Tree	if ( definitionNodes / ( FOO / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( definitionNodes / ( FOO / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 24

9
Tree	if ( variablesToInclude / ( firstOutput / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , null ) ; }
Code	if ( variablesToInclude / ( firstOutput / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , null ) ; }
Distance : 16

10
Tree	if ( definitionNodes / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE ) ; }
Code	if ( definitionNodes / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE ) ; }
Distance : 15

11
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != startPoint.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != startPoint.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length ) ; }
Distance : 18

12
Tree	if ( variablesToInclude / ( FOO / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , null ) ; }
Code	if ( variablesToInclude / ( FOO / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , null ) ; }
Distance : 16

13
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length . hashCode () . getName () ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length . hashCode () . getName () ) ; }
Distance : 22

14
Tree	if ( variablesToInclude / ( System / Object < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , null ) ; }
Code	if ( variablesToInclude / ( System / Object < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , null ) ; }
Distance : 16

15
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , columns , length ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , columns , length ) ; }
Distance : 18

16
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * ObjectUtils != startPoint.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * ObjectUtils != startPoint.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 26

17
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != rhs.b ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , length , length ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != rhs.b ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , length , length ) ; }
Distance : 23

18
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , objective.length ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , objective.length ) ; }
Distance : 18

19
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , target.length ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , target.length ) ; }
Distance : 18

20
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != startPoint.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , length , length ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != startPoint.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , length , length ) ; }
Distance : 23

21
Tree	if ( definitionNodes / ( firstOutput / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE ) ; }
Code	if ( definitionNodes / ( firstOutput / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE ) ; }
Distance : 15

22
Tree	if ( definitionNodes / ( FOO / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE ) ; }
Code	if ( definitionNodes / ( FOO / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE ) ; }
Distance : 15

23
Tree	if ( variablesToInclude * length . getTracerMode ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( LocalizedFormats.COVARIANCE_MATRIX , begin ) ; }
Code	if ( variablesToInclude * length . getTracerMode ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( LocalizedFormats.COVARIANCE_MATRIX , begin ) ; }
Distance : 14

24
Tree	if ( variablesToInclude * length . getTracerMode ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( LocalizedFormats.ZERO_DENOMINATOR , begin ) ; }
Code	if ( variablesToInclude * length . getTracerMode ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( LocalizedFormats.ZERO_DENOMINATOR , begin ) ; }
Distance : 14

25
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * ObjectUtils != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * ObjectUtils != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Distance : 21

26
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Distance : 19

27
Tree	if ( variablesToInclude / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Code	if ( variablesToInclude / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Distance : 19

28
Tree	if ( ( newVar / types < NUMBER_CONSTANT ) == null ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( newVar / types < NUMBER_CONSTANT ) == null ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 22

29
Tree	if ( ( definitionNodes / types < NUMBER_CONSTANT ) == null ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( definitionNodes / types < NUMBER_CONSTANT ) == null ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 22

30
Tree	if ( ( newVar / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Code	if ( ( newVar / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Distance : 19

31
Tree	if ( ( definitionNodes / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Code	if ( ( definitionNodes / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Distance : 19

32
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != rhs.b ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != rhs.b ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Distance : 19

33
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 24

34
Tree	if ( ( timeToLive / types < NUMBER_CONSTANT ) == null ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( timeToLive / types < NUMBER_CONSTANT ) == null ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 22

35
Tree	if ( variablesToInclude / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( variablesToInclude / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 24

36
Tree	if ( variablesToInclude / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( variablesToInclude / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 24

37
Tree	if ( ( newVar / types < NUMBER_CONSTANT ) == null ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , columns , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( newVar / types < NUMBER_CONSTANT ) == null ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , columns , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 22

38
Tree	if ( definitionNodes / ( FOO / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Code	if ( definitionNodes / ( FOO / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Distance : 19

39
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) == null ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , columns , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) == null ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , columns , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 22

40
Tree	if ( ( variablesToInclude / System < NUMBER_CONSTANT ) == null ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( variablesToInclude / System < NUMBER_CONSTANT ) == null ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 22

41
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length ) ; }
Distance : 18

42
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 24

43
Tree	if ( definitionNodes / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( definitionNodes / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 24

44
Tree	if ( variablesToInclude / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , null ) ; }
Code	if ( variablesToInclude / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , null ) ; }
Distance : 16

45
Tree	if ( ( definitionNodes / types < NUMBER_CONSTANT ) == null ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , columns , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( definitionNodes / types < NUMBER_CONSTANT ) == null ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , columns , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 22

46
Tree	if ( ( newVar / types < NUMBER_CONSTANT ) * length != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( newVar / types < NUMBER_CONSTANT ) * length != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 24

47
Tree	if ( ( timeToLive / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( timeToLive / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 24

48
Tree	if ( ( newVar / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( newVar / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 24

49
Tree	if ( definitionNodes / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( definitionNodes / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 24

50
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != startPoint.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != startPoint.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Distance : 19

51
Tree	if ( ( newVar / types < NUMBER_CONSTANT ) * length != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( newVar / types < NUMBER_CONSTANT ) * length != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 24

52
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 14

53
Tree	if ( ( definitionNodes / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( definitionNodes / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 24

54
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 24

55
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != startPoint.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != startPoint.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 14

56
Tree	if ( ( newVar / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( ( newVar / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 14

57
Tree	if ( variablesToInclude / ( firstOutput / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( variablesToInclude / ( firstOutput / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 24

58
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != startPoint.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length . hashCode () . getName () ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != startPoint.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length . hashCode () . getName () ) ; }
Distance : 22

59
Tree	if ( timeToLive / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Code	if ( timeToLive / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Distance : 19

60
Tree	if ( ( newVar / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , objective.length ) ; }
Code	if ( ( newVar / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , objective.length ) ; }
Distance : 18

61
Tree	if ( ( definitionNodes / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , objective.length ) ; }
Code	if ( ( definitionNodes / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , objective.length ) ; }
Distance : 18

62
Tree	if ( ( newVar / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , target.length ) ; }
Code	if ( ( newVar / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , target.length ) ; }
Distance : 18

63
Tree	if ( ( newVar / types < NUMBER_CONSTANT ) * length != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Code	if ( ( newVar / types < NUMBER_CONSTANT ) * length != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Distance : 19

64
Tree	if ( ( definitionNodes / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( ( definitionNodes / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 14

65
Tree	if ( definitionNodes / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Code	if ( definitionNodes / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Distance : 19

66
Tree	if ( variablesToInclude / ( firstOutput / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( variablesToInclude / ( firstOutput / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 24

67
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , length , length ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , length , length ) ; }
Distance : 23

68
Tree	if ( ( timeToLive / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Code	if ( ( timeToLive / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Distance : 19

69
Tree	if ( variablesToInclude / ( firstOutput / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Code	if ( variablesToInclude / ( firstOutput / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Distance : 19

70
Tree	if ( ( newVar / types < NUMBER_CONSTANT ) * length != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length ) ; }
Code	if ( ( newVar / types < NUMBER_CONSTANT ) * length != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length ) ; }
Distance : 18

71
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 24

72
Tree	if ( variablesToInclude / ( FOO / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( variablesToInclude / ( FOO / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 24

73
Tree	if ( variablesToInclude * length . getTracerMode ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( variablesToInclude * length . getTracerMode ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 11

74
Tree	if ( variablesToInclude * length . getTracerMode ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE ) ; }
Code	if ( variablesToInclude * length . getTracerMode ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE ) ; }
Distance : 12

75
Tree	if ( variablesToInclude / ( firstOutput / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE ) ; }
Code	if ( variablesToInclude / ( firstOutput / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE ) ; }
Distance : 15

76
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * ObjectUtils != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * ObjectUtils != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 26

77
Tree	if ( ( definitionNodes / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , target.length ) ; }
Code	if ( ( definitionNodes / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , target.length ) ; }
Distance : 18

78
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , objective.length ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , objective.length ) ; }
Distance : 18

79
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 14

80
Tree	if ( variablesToInclude * length . getTracerMode ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE ) ; }
Code	if ( variablesToInclude * length . getTracerMode ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE ) ; }
Distance : 12

81
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != rhs.b ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != rhs.b ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 24

82
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , target.length ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , target.length ) ; }
Distance : 18

83
Tree	if ( timeToLive / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , null ) ; }
Code	if ( timeToLive / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , null ) ; }
Distance : 16

84
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != rhs.b ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != rhs.b ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 14

85
Tree	if ( ( newVar / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( newVar / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 24

86
Tree	if ( variablesToInclude / ( FOO / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Code	if ( variablesToInclude / ( FOO / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Distance : 19

87
Tree	if ( definitionNodes * length . getTracerMode ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( definitionNodes * length . getTracerMode ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 11

88
Tree	if ( variablesToInclude / ( FOO / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( variablesToInclude / ( FOO / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 24

89
Tree	if ( definitionNodes * length . getTracerMode ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE ) ; }
Code	if ( definitionNodes * length . getTracerMode ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE ) ; }
Distance : 12

90
Tree	if ( ( definitionNodes / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( definitionNodes / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 24

91
Tree	if ( ( newVar / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * ObjectUtils != startPoint.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Code	if ( ( newVar / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * ObjectUtils != startPoint.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Distance : 21

92
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * str != startPoint.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * str != startPoint.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 26

93
Tree	if ( variablesToInclude * length . getTracerMode ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( mode.featureSet ) ; }
Code	if ( variablesToInclude * length . getTracerMode ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( mode.featureSet ) ; }
Distance : 12

94
Tree	if ( variablesToInclude / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , columns , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( variablesToInclude / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , columns , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 24

95
Tree	if ( variablesToInclude / ( FOO / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE ) ; }
Code	if ( variablesToInclude / ( FOO / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE ) ; }
Distance : 15

96
Tree	if ( definitionNodes / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , null ) ; }
Code	if ( definitionNodes / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , null ) ; }
Distance : 16

97
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != rhs.b ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != rhs.b ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 24

98
Tree	if ( variablesToInclude / ( System / Object < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Code	if ( variablesToInclude / ( System / Object < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Distance : 19

99
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != startPoint.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != startPoint.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 24

100
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , length , length ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , length , length ) ; }
Distance : 23

101
Tree	if ( definitionNodes * length . getTracerMode ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE ) ; }
Code	if ( definitionNodes * length . getTracerMode ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE ) ; }
Distance : 12

102
Tree	if ( definitionNodes / ( firstOutput / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Code	if ( definitionNodes / ( firstOutput / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Distance : 19

103
Tree	if ( variablesToInclude / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , target.length ) ; }
Code	if ( variablesToInclude / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , target.length ) ; }
Distance : 18

104
Tree	if ( definitionNodes / ( firstOutput / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( definitionNodes / ( firstOutput / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 24

105
Tree	if ( definitionNodes / ( firstOutput / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( definitionNodes / ( firstOutput / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 24

106
Tree	if ( ( newVar / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length ) ; }
Code	if ( ( newVar / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length ) ; }
Distance : 18

107
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * str != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * str != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 26

108
Tree	if ( ( definitionNodes / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * ObjectUtils != startPoint.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Code	if ( ( definitionNodes / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * ObjectUtils != startPoint.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Distance : 21

109
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * ObjectUtils != startPoint.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * ObjectUtils != startPoint.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Distance : 21

110
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != startPoint.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != startPoint.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 24

111
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , columns . hashCode () . getName () ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , columns . hashCode () . getName () ) ; }
Distance : 22

112
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * ObjectUtils != CharUtils.NUL ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * ObjectUtils != CharUtils.NUL ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 26

113
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * str != startPoint.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * str != startPoint.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 26

114
Tree	if ( variablesToInclude / ( System / Object < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE ) ; }
Code	if ( variablesToInclude / ( System / Object < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE ) ; }
Distance : 15

115
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length . hashCode () . getName () ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length . hashCode () . getName () ) ; }
Distance : 22

116
Tree	if ( variablesToInclude * ObjectUtils . getTracerMode ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( variablesToInclude * ObjectUtils . getTracerMode ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 11

117
Tree	if ( ( definitionNodes / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length ) ; }
Code	if ( ( definitionNodes / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length ) ; }
Distance : 18

118
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * ObjectUtils != Assigner.Typing.DYNAMIC ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * ObjectUtils != Assigner.Typing.DYNAMIC ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 26

119
Tree	if ( ( newVar / types < NUMBER_CONSTANT ) * length != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length . hashCode () . getName () ) ; }
Code	if ( ( newVar / types < NUMBER_CONSTANT ) * length != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length . hashCode () . getName () ) ; }
Distance : 22

120
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * str != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * str != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 26

121
Tree	if ( ( newVar / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * ObjectUtils != startPoint.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( newVar / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * ObjectUtils != startPoint.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 26

122
Tree	if ( variablesToInclude / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( mode.featureSet ) ; }
Code	if ( variablesToInclude / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( mode.featureSet ) ; }
Distance : 12

123
Tree	if ( variablesToInclude / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE ) ; }
Code	if ( variablesToInclude / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE ) ; }
Distance : 12

124
Tree	if ( definitionNodes / ( firstOutput / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , null ) ; }
Code	if ( definitionNodes / ( firstOutput / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , null ) ; }
Distance : 16

125
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * ObjectUtils != CharUtils.NUL ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * ObjectUtils != CharUtils.NUL ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Distance : 21

126
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * ObjectUtils != Assigner.Typing.DYNAMIC ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * ObjectUtils != Assigner.Typing.DYNAMIC ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Distance : 21

127
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , columns , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , columns , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 24

128
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * ObjectUtils != startPoint.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * ObjectUtils != startPoint.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 26

129
Tree	if ( ( newVar / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , length , length ) ; }
Code	if ( ( newVar / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , length , length ) ; }
Distance : 23

130
Tree	if ( ( definitionNodes / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , length , length ) ; }
Code	if ( ( definitionNodes / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , length , length ) ; }
Distance : 23

131
Tree	if ( variablesToInclude / ( FOO / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , target.length ) ; }
Code	if ( variablesToInclude / ( FOO / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , target.length ) ; }
Distance : 18

132
Tree	if ( variablesToInclude / ( firstOutput / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE ) ; }
Code	if ( variablesToInclude / ( firstOutput / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE ) ; }
Distance : 12

133
Tree	if ( ( definitionNodes / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * ObjectUtils != startPoint.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( definitionNodes / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * ObjectUtils != startPoint.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 26

134
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != rhs.b ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != rhs.b ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length ) ; }
Distance : 18

135
Tree	if ( variablesToInclude / ( System & ( System / length < NUMBER_CONSTANT ) ) != currentState.length ) <=
Code	if ( variablesToInclude / ( System & ( System / length < NUMBER_CONSTANT ) ) != currentState.length ) <=
Distance : 16

136
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , PredefinedName.AS , objective.length ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , PredefinedName.AS , objective.length ) ; }
Distance : 18

137
Tree	if ( ( definitionNodes / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * ObjectUtils != startPoint.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( definitionNodes / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * ObjectUtils != startPoint.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 26

138
Tree	if ( definitionNodes / ( System & ( System / length < NUMBER_CONSTANT ) ) != currentState.length ) <=
Code	if ( definitionNodes / ( System & ( System / length < NUMBER_CONSTANT ) ) != currentState.length ) <=
Distance : 16

139
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , observations.length , objective.length ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , observations.length , objective.length ) ; }
Distance : 18

140
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * str != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * str != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Distance : 21

141
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * ObjectUtils != CharUtils.NUL ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * ObjectUtils != CharUtils.NUL ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 26

142
Tree	if ( variablesToInclude / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , objective.length ) ; }
Code	if ( variablesToInclude / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , objective.length ) ; }
Distance : 18

143
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , mode.featureSet , target.length ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , mode.featureSet , target.length ) ; }
Distance : 18

144
Tree	if ( definitionNodes / ( FOO / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , null ) ; }
Code	if ( definitionNodes / ( FOO / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , null ) ; }
Distance : 16

145
Tree	if ( variablesToInclude / ( System & ( FOO / length < NUMBER_CONSTANT ) ) != currentState.length ) <=
Code	if ( variablesToInclude / ( System & ( FOO / length < NUMBER_CONSTANT ) ) != currentState.length ) <=
Distance : 16

146
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , mode.featureSet , objective.length ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , mode.featureSet , objective.length ) ; }
Distance : 18

147
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , PredefinedName.AS , target.length ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , PredefinedName.AS , target.length ) ; }
Distance : 18

148
Tree	if ( ( newVar / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length . hashCode () . getName () ) ; }
Code	if ( ( newVar / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length . hashCode () . getName () ) ; }
Distance : 22

149
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , length , allowEmpty ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , length , allowEmpty ) ; }
Distance : 23

150
Tree	if ( definitionNodes / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE ) ; }
Code	if ( definitionNodes / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE ) ; }
Distance : 12

151
Tree	if ( ( newVar / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * ObjectUtils != startPoint.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( newVar / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * ObjectUtils != startPoint.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 26

152
Tree	if ( variablesToInclude / ( firstOutput & ( System / length < NUMBER_CONSTANT ) ) != currentState.length ) <=
Code	if ( variablesToInclude / ( firstOutput & ( System / length < NUMBER_CONSTANT ) ) != currentState.length ) <=
Distance : 16

153
Tree	if ( variablesToInclude / ( FOO & ( System / length < NUMBER_CONSTANT ) ) != currentState.length ) <=
Code	if ( variablesToInclude / ( FOO & ( System / length < NUMBER_CONSTANT ) ) != currentState.length ) <=
Distance : 16

154
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * ObjectUtils != Assigner.Typing.DYNAMIC ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * ObjectUtils != Assigner.Typing.DYNAMIC ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 26

155
Tree	if ( variablesToInclude / ( System & ( System / length < NUMBER_CONSTANT ) ) != rhs.b ) <=
Code	if ( variablesToInclude / ( System & ( System / length < NUMBER_CONSTANT ) ) != rhs.b ) <=
Distance : 16

156
Tree	if ( variablesToInclude / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , mode.featureSet , objective.length ) ; }
Code	if ( variablesToInclude / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , mode.featureSet , objective.length ) ; }
Distance : 18

157
Tree	if ( variablesToInclude / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , PredefinedName.AS , objective.length ) ; }
Code	if ( variablesToInclude / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , PredefinedName.AS , objective.length ) ; }
Distance : 18

158
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , PredefinedName.AS , objective.length ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , PredefinedName.AS , objective.length ) ; }
Distance : 18

159
Tree	if ( timeToLive / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE ) ; }
Code	if ( timeToLive / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE ) ; }
Distance : 15

160
Tree	if ( variablesToInclude / ( System & ( require / length < NUMBER_CONSTANT ) ) != currentState.length ) <=
Code	if ( variablesToInclude / ( System & ( require / length < NUMBER_CONSTANT ) ) != currentState.length ) <=
Distance : 16

161
Tree	if ( variablesToInclude / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , observations.length , objective.length ) ; }
Code	if ( variablesToInclude / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , observations.length , objective.length ) ; }
Distance : 18

162
Tree	if ( ( definitionNodes / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length . hashCode () . getName () ) ; }
Code	if ( ( definitionNodes / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length . hashCode () . getName () ) ; }
Distance : 22

163
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != rhs.b ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length . hashCode () . getName () ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != rhs.b ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length . hashCode () . getName () ) ; }
Distance : 22

164
Tree	if ( definitionNodes / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE ) ; }
Code	if ( definitionNodes / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE ) ; }
Distance : 12

165
Tree	if ( variablesToInclude / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , mode.featureSet , target.length ) ; }
Code	if ( variablesToInclude / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , mode.featureSet , target.length ) ; }
Distance : 18

166
Tree	if ( variablesToInclude / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , PredefinedName.AS , target.length ) ; }
Code	if ( variablesToInclude / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , PredefinedName.AS , target.length ) ; }
Distance : 18

167
Tree	if ( definitionNodes / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , mode.featureSet , objective.length ) ; }
Code	if ( definitionNodes / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , mode.featureSet , objective.length ) ; }
Distance : 18

168
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , observations.length , target.length ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , observations.length , target.length ) ; }
Distance : 18

169
Tree	if ( ( newVar / types < NUMBER_CONSTANT ) * length != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , length , length ) ; }
Code	if ( ( newVar / types < NUMBER_CONSTANT ) * length != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , length , length ) ; }
Distance : 23

170
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * str != startPoint.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * str != startPoint.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Distance : 21

171
Tree	if ( variablesToInclude / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE ) ; }
Code	if ( variablesToInclude / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE ) ; }
Distance : 12

172
Tree	if ( variablesToInclude / ( System & ( Ordering / length < NUMBER_CONSTANT ) ) != currentState.length ) <=
Code	if ( variablesToInclude / ( System & ( Ordering / length < NUMBER_CONSTANT ) ) != currentState.length ) <=
Distance : 16

173
Tree	if ( variablesToInclude / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , observations.length , target.length ) ; }
Code	if ( variablesToInclude / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , observations.length , target.length ) ; }
Distance : 18

174
Tree	if ( variablesToInclude * length . getTracerMode ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin ) ; }
Code	if ( variablesToInclude * length . getTracerMode ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin ) ; }
Distance : 14

175
Tree	if ( variablesToInclude * length . getTracerMode ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE , begin ) ; }
Code	if ( variablesToInclude * length . getTracerMode ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE , begin ) ; }
Distance : 14

176
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) == null ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) == null ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 22

177
Tree	if ( definitionNodes / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , PredefinedName.AS , objective.length ) ; }
Code	if ( definitionNodes / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , PredefinedName.AS , objective.length ) ; }
Distance : 18

178
Tree	if ( definitionNodes * length . getTracerMode ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin ) ; }
Code	if ( definitionNodes * length . getTracerMode ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin ) ; }
Distance : 14

179
Tree	if ( variablesToInclude * length . getTracerMode ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( mode.featureSet , begin ) ; }
Code	if ( variablesToInclude * length . getTracerMode ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( mode.featureSet , begin ) ; }
Distance : 14

180
Tree	if ( definitionNodes * length . getTracerMode ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE , begin ) ; }
Code	if ( definitionNodes * length . getTracerMode ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE , begin ) ; }
Distance : 14

181
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * ObjectUtils != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * NUMBER_CONSTANT * ObjectUtils != IncrementalCheckMode.GENERATE_IJS ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length , STRING_CONSTANT , length , STRING_CONSTANT ) ; }
Distance : 26

182
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE , begin , length ) ; }
Distance : 19

183
Tree	if ( variablesToInclude * length . getTracerMode ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( LocalizedFormats.INVALID_REGRESSION_ARRAY , begin ) ; }
Code	if ( variablesToInclude * length . getTracerMode ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( LocalizedFormats.INVALID_REGRESSION_ARRAY , begin ) ; }
Distance : 14

184
Tree	if ( variablesToInclude * length . matchesActualCount ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( variablesToInclude * length . matchesActualCount ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 11

185
Tree	if ( timeToLive * length . getTracerMode ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( timeToLive * length . getTracerMode ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 11

186
Tree	if ( variablesToInclude * length . getTracerMode ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( LocalizedFormats.COVARIANCE_MATRIX ) ; }
Code	if ( variablesToInclude * length . getTracerMode ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( LocalizedFormats.COVARIANCE_MATRIX ) ; }
Distance : 12

187
Tree	if ( variablesToInclude / ( FOO / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE ) ; }
Code	if ( variablesToInclude / ( FOO / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE ) ; }
Distance : 12

188
Tree	if ( variablesToInclude / ( System / Object < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE ) ; }
Code	if ( variablesToInclude / ( System / Object < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE ) ; }
Distance : 12

189
Tree	if ( definitionNodes / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , objective.length ) ; }
Code	if ( definitionNodes / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , objective.length ) ; }
Distance : 18

190
Tree	if ( variablesToInclude * length . getTracerMode ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( LocalizedFormats.INVALID_REGRESSION_ARRAY ) ; }
Code	if ( variablesToInclude * length . getTracerMode ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( LocalizedFormats.INVALID_REGRESSION_ARRAY ) ; }
Distance : 12

191
Tree	if ( variablesToInclude * length . getTracerMode ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( LocalizedFormats.ZERO_DENOMINATOR ) ; }
Code	if ( variablesToInclude * length . getTracerMode ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( LocalizedFormats.ZERO_DENOMINATOR ) ; }
Distance : 12

192
Tree	if ( variablesToInclude * length . getRunOTIafterNTI ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( variablesToInclude * length . getRunOTIafterNTI ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 11

193
Tree	if ( definitionNodes / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , target.length ) ; }
Code	if ( definitionNodes / ( System / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , target.length ) ; }
Distance : 18

194
Tree	if ( variablesToInclude / ( firstOutput / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , objective.length ) ; }
Code	if ( variablesToInclude / ( firstOutput / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , objective.length ) ; }
Distance : 18

195
Tree	if ( variablesToInclude / ( firstOutput / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , target.length ) ; }
Code	if ( variablesToInclude / ( firstOutput / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , target.length ) ; }
Distance : 18

196
Tree	if ( definitionNodes * ObjectUtils . getTracerMode ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( definitionNodes * ObjectUtils . getTracerMode ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 11

197
Tree	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , mode.featureSet , objective.length ) ; }
Code	if ( ( variablesToInclude / types < NUMBER_CONSTANT ) * length != delimiters.length ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , mode.featureSet , objective.length ) ; }
Distance : 18

198
Tree	if ( variablesToInclude / ( FOO / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , objective.length ) ; }
Code	if ( variablesToInclude / ( FOO / length < NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw MathRuntimeException . createIllegalArgumentException ( STRING_CONSTANT , length , objective.length ) ; }
Distance : 18

199
Tree	if ( variablesToInclude * separator . getTracerMode ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Code	if ( variablesToInclude * separator . getTracerMode ( - NUMBER_CONSTANT ) != LanguageMode.TYPESCRIPT ) { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
Distance : 11

========================================================================


========================================================================
Example Number: 5
Parent Code is: 
this . dataset = dataset ;
-------------------------------------------------------------------------------
Child code is: 
setDataset ( dataset ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=dataset})) (204{val==}) (800{val=dataset})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (32 (802{val=setDataset}) (214{val=(}) (800{val=dataset}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/12/parent/source_org_jfree_chart_plot_MultiplePiePlot.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	dataset = NUMBER_CONSTANT / point ;
Code	dataset = NUMBER_CONSTANT / point ;
Distance : 5

1
Tree	dataset . getSolver ( dataset ) ;
Code	dataset . getSolver ( dataset ) ;
Distance : 3

2
Tree	LocalizedFormats.EVALUATIONS = getSolver () ;
Code	LocalizedFormats.EVALUATIONS = getSolver () ;
Distance : 4

3
Tree	Node.FREE_CALL = getSolver () ;
Code	Node.FREE_CALL = getSolver () ;
Distance : 4

4
Tree	ref.node = getSolver () ;
Code	ref.node = getSolver () ;
Distance : 4

5
Tree	entry.map = true ;
Code	entry.map = true ;
Distance : 4

6
Tree	dataset = s ;
Code	dataset = s ;
Distance : 4

7
Tree	this . dataset = true ;
Code	this . dataset = true ;
Distance : 4

8
Tree	includeInterval = NUMBER_CONSTANT / dataset ;
Code	includeInterval = NUMBER_CONSTANT / dataset ;
Distance : 5

9
Tree	this . dataset = s . clone () ;
Code	this . dataset = s . clone () ;
Distance : 7

10
Tree	dataset = dataset . getDeclaredConstructor ( dataset ) ;
Code	dataset = dataset . getDeclaredConstructor ( dataset ) ;
Distance : 5

11
Tree	this . dataset = DatasetUtils ;
Code	this . dataset = DatasetUtils ;
Distance : 4

12
Tree	entry.map = getSolver () ;
Code	entry.map = getSolver () ;
Distance : 4

13
Tree	s = dataset ;
Code	s = dataset ;
Distance : 3

14
Tree	this . dataset = dataset . abs () ;
Code	this . dataset = dataset . abs () ;
Distance : 7

15
Tree	RemoveUnusedCode.Builder = new Coordinates3D <> () ;
Code	RemoveUnusedCode.Builder = new Coordinates3D <> () ;
Distance : 6

16
Tree	this . dataset = new Coordinates3D ( point ) ;
Code	this . dataset = new Coordinates3D ( point ) ;
Distance : 7

17
Tree	dataset = hotspot ;
Code	dataset = hotspot ;
Distance : 4

18
Tree	dataset . getSolver ( dataset , STRING_CONSTANT ) ;
Code	dataset . getSolver ( dataset , STRING_CONSTANT ) ;
Distance : 5

19
Tree	this . dataset = hotspot . clone () ;
Code	this . dataset = hotspot . clone () ;
Distance : 7

20
Tree	includeInterval = dataset ;
Code	includeInterval = dataset ;
Distance : 3

21
Tree	NewTypeInference.INEXISTENT_PROPERTY = getSolver () ;
Code	NewTypeInference.INEXISTENT_PROPERTY = getSolver () ;
Distance : 4

22
Tree	dataset . replaceWith () ;
Code	dataset . replaceWith () ;
Distance : 4

23
Tree	NewTypeInference.INEXISTENT_PROPERTY = new Coordinates3D <> () ;
Code	NewTypeInference.INEXISTENT_PROPERTY = new Coordinates3D <> () ;
Distance : 6

24
Tree	dataset = dataset . abs () ;
Code	dataset = dataset . abs () ;
Distance : 5

25
Tree	this . dataset = hotspot . clone ( dataset ) ;
Code	this . dataset = hotspot . clone ( dataset ) ;
Distance : 7

26
Tree	dataset . abs ( dataset , STRING_CONSTANT ) ;
Code	dataset . abs ( dataset , STRING_CONSTANT ) ;
Distance : 5

27
Tree	dataset . getParent () ;
Code	dataset . getParent () ;
Distance : 4

28
Tree	ref.node = new Coordinates3D <> () ;
Code	ref.node = new Coordinates3D <> () ;
Distance : 6

29
Tree	dataset = NUMBER_CONSTANT / s ;
Code	dataset = NUMBER_CONSTANT / s ;
Distance : 5

30
Tree	RemoveUnusedCode.Builder = getSolver () ;
Code	RemoveUnusedCode.Builder = getSolver () ;
Distance : 4

31
Tree	dataset . abs ( dataset ) ;
Code	dataset . abs ( dataset ) ;
Distance : 3

32
Tree	this . dataset = ch . clone ( dataset ) ;
Code	this . dataset = ch . clone ( dataset ) ;
Distance : 7

33
Tree	this . dataset = Coordinates3D . clone () ;
Code	this . dataset = Coordinates3D . clone () ;
Distance : 7

34
Tree	dataset = getParent () ;
Code	dataset = getParent () ;
Distance : 4

35
Tree	s = NUMBER_CONSTANT / dataset ;
Code	s = NUMBER_CONSTANT / dataset ;
Distance : 5

36
Tree	nt1.rawType = getSolver () ;
Code	nt1.rawType = getSolver () ;
Distance : 4

37
Tree	dataset = x.length ;
Code	dataset = x.length ;
Distance : 4

38
Tree	this . dataset = includeInterval ;
Code	this . dataset = includeInterval ;
Distance : 4

39
Tree	entry.map = new Coordinates3D <> () ;
Code	entry.map = new Coordinates3D <> () ;
Distance : 6

40
Tree	dataset = DatasetUtils ;
Code	dataset = DatasetUtils ;
Distance : 4

41
Tree	dataset = dataset . getDataset ( dataset ) ;
Code	dataset = dataset . getDataset ( dataset ) ;
Distance : 5

42
Tree	this . dataset = dataset . getGeneratorUpperBounds ( dataset ) ;
Code	this . dataset = dataset . getGeneratorUpperBounds ( dataset ) ;
Distance : 7

43
Tree	includeInterval = new Coordinates3D <> () ;
Code	includeInterval = new Coordinates3D <> () ;
Distance : 6

44
Tree	dataset = Coordinates3D . getParent ( dataset ) ;
Code	dataset = Coordinates3D . getParent ( dataset ) ;
Distance : 5

45
Tree	getParent () ;
Code	getParent () ;
Distance : 4

46
Tree	nt1.rawType = new Coordinates3D <> () ;
Code	nt1.rawType = new Coordinates3D <> () ;
Distance : 6

47
Tree	getDataset () ;
Code	getDataset () ;
Distance : 4

48
Tree	this . dataset = abs ( dataset ) ;
Code	this . dataset = abs ( dataset ) ;
Distance : 5

49
Tree	dataset = PlotOrientation.VERTICAL ;
Code	dataset = PlotOrientation.VERTICAL ;
Distance : 4

50
Tree	typeArguments.length = true ;
Code	typeArguments.length = true ;
Distance : 4

51
Tree	this . dataset = includeInterval . clone () ;
Code	this . dataset = includeInterval . clone () ;
Distance : 7

52
Tree	this . dataset = ch . clone () ;
Code	this . dataset = ch . clone () ;
Distance : 7

53
Tree	LocalizedFormats.EVALUATIONS = true ;
Code	LocalizedFormats.EVALUATIONS = true ;
Distance : 4

54
Tree	dataset = dataset . getDeclaredConstructor () ;
Code	dataset = dataset . getDeclaredConstructor () ;
Distance : 5

55
Tree	this . dataset = dataset . clone ( dataset ) ;
Code	this . dataset = dataset . clone ( dataset ) ;
Distance : 7

56
Tree	this . dataset = dataset ;
Code	this . dataset = dataset ;
Distance : 4

57
Tree	this . dataset = findStackedRangeBounds ( dataset ) ;
Code	this . dataset = findStackedRangeBounds ( dataset ) ;
Distance : 5

58
Tree	dataset . isName ( dataset , STRING_CONSTANT ) ;
Code	dataset . isName ( dataset , STRING_CONSTANT ) ;
Distance : 5

59
Tree	NewTypeInference.INEXISTENT_PROPERTY = true ;
Code	NewTypeInference.INEXISTENT_PROPERTY = true ;
Distance : 4

60
Tree	this . dataset = getSolver ( dataset ) ;
Code	this . dataset = getSolver ( dataset ) ;
Distance : 5

61
Tree	dataset = includeInterval ;
Code	dataset = includeInterval ;
Distance : 4

62
Tree	dataset = NUMBER_CONSTANT / Coordinates3D ;
Code	dataset = NUMBER_CONSTANT / Coordinates3D ;
Distance : 5

63
Tree	this . dataset = x.length ;
Code	this . dataset = x.length ;
Distance : 4

64
Tree	dataset = MathUtils.SAFE_MIN ;
Code	dataset = MathUtils.SAFE_MIN ;
Distance : 4

65
Tree	RemoveUnusedCode.Builder = true ;
Code	RemoveUnusedCode.Builder = true ;
Distance : 4

66
Tree	dataset . isExprResult ( dataset , STRING_CONSTANT ) ;
Code	dataset . isExprResult ( dataset , STRING_CONSTANT ) ;
Distance : 5

67
Tree	dataset . getParent ( dataset , STRING_CONSTANT ) ;
Code	dataset . getParent ( dataset , STRING_CONSTANT ) ;
Distance : 5

68
Tree	dataset = dataset . findStackedRangeBounds () ;
Code	dataset = dataset . findStackedRangeBounds () ;
Distance : 5

69
Tree	this . dataset = new Coordinates3D ( ch ) ;
Code	this . dataset = new Coordinates3D ( ch ) ;
Distance : 7

70
Tree	dataset = dataset ;
Code	dataset = dataset ;
Distance : 3

71
Tree	this . dataset = dataset . clone () ;
Code	this . dataset = dataset . clone () ;
Distance : 7

72
Tree	dataset = Color.RED ;
Code	dataset = Color.RED ;
Distance : 4

73
Tree	dataset = dataset . getDataset () ;
Code	dataset = dataset . getDataset () ;
Distance : 5

74
Tree	this . dataset = new Coordinates3D ( hotspot ) ;
Code	this . dataset = new Coordinates3D ( hotspot ) ;
Distance : 7

75
Tree	nt1.rawType = true ;
Code	nt1.rawType = true ;
Distance : 4

76
Tree	dataset = new Coordinates3D ( includeInterval ) ;
Code	dataset = new Coordinates3D ( includeInterval ) ;
Distance : 5

77
Tree	this . solver = ( dataset ) dataset . clone () ;
Code	this . solver = ( dataset ) dataset . clone () ;
Distance : 8

78
Tree	this . dataset = dataset . getGeneratorUpperBounds () ;
Code	this . dataset = dataset . getGeneratorUpperBounds () ;
Distance : 7

79
Tree	this . dataset = ( dataset ) dataset . clone () ;
Code	this . dataset = ( dataset ) dataset . clone () ;
Distance : 8

80
Tree	this . includeInterval = new Coordinates3D ( dataset ) ;
Code	this . includeInterval = new Coordinates3D ( dataset ) ;
Distance : 6

81
Tree	dataset = Coordinates3D . getSolver ( dataset ) ;
Code	dataset = Coordinates3D . getSolver ( dataset ) ;
Distance : 5

82
Tree	dataset . getSolver () ;
Code	dataset . getSolver () ;
Distance : 4

83
Tree	dataset = toFormatter () ;
Code	dataset = toFormatter () ;
Distance : 4

84
Tree	dataset = new Coordinates3D ( dataset ) ;
Code	dataset = new Coordinates3D ( dataset ) ;
Distance : 4

85
Tree	dataset = NUMBER_CONSTANT / ch ;
Code	dataset = NUMBER_CONSTANT / ch ;
Distance : 5

86
Tree	typeArguments.length = getSolver () ;
Code	typeArguments.length = getSolver () ;
Distance : 4

87
Tree	this . dataset = indexOf ( dataset ) ;
Code	this . dataset = indexOf ( dataset ) ;
Distance : 5

88
Tree	this . dataset = ( dataset ) cls . clone () ;
Code	this . dataset = ( dataset ) cls . clone () ;
Distance : 8

89
Tree	dataset = true ;
Code	dataset = true ;
Distance : 4

90
Tree	this . dataset = Coordinates3D . clone ( dataset ) ;
Code	this . dataset = Coordinates3D . clone ( dataset ) ;
Distance : 7

91
Tree	this . dataset = dataset . abs ( dataset ) ;
Code	this . dataset = dataset . abs ( dataset ) ;
Distance : 7

92
Tree	this . dataset = hotspot ;
Code	this . dataset = hotspot ;
Distance : 4

93
Tree	dataset = dataset . getSolver () ;
Code	dataset = dataset . getSolver () ;
Distance : 5

94
Tree	dataset . solve ( dataset , STRING_CONSTANT ) ;
Code	dataset . solve ( dataset , STRING_CONSTANT ) ;
Distance : 5

95
Tree	Node.FREE_CALL = true ;
Code	Node.FREE_CALL = true ;
Distance : 4

96
Tree	this . dataset = false ;
Code	this . dataset = false ;
Distance : 4

97
Tree	dataset = Coordinates3D . getSolver () ;
Code	dataset = Coordinates3D . getSolver () ;
Distance : 6

98
Tree	LocalizedFormats.EVALUATIONS = new Coordinates3D <> () ;
Code	LocalizedFormats.EVALUATIONS = new Coordinates3D <> () ;
Distance : 6

99
Tree	dataset = point () ;
Code	dataset = point () ;
Distance : 4

100
Tree	dataset = dataset . getParent () ;
Code	dataset = dataset . getParent () ;
Distance : 5

101
Tree	this . dataset = getParent ( dataset ) ;
Code	this . dataset = getParent ( dataset ) ;
Distance : 5

102
Tree	dataset . replaceWith ( dataset ) ;
Code	dataset . replaceWith ( dataset ) ;
Distance : 3

103
Tree	dataset = getReferenceName () ;
Code	dataset = getReferenceName () ;
Distance : 4

104
Tree	dataset = Coordinates3D ;
Code	dataset = Coordinates3D ;
Distance : 4

105
Tree	dataset = NUMBER_CONSTANT / includeInterval ;
Code	dataset = NUMBER_CONSTANT / includeInterval ;
Distance : 5

106
Tree	this . dataset = null ;
Code	this . dataset = null ;
Distance : 4

107
Tree	dataset = NUMBER_CONSTANT / dataset ;
Code	dataset = NUMBER_CONSTANT / dataset ;
Distance : 5

108
Tree	dataset = new Coordinates3D ( point ) ;
Code	dataset = new Coordinates3D ( point ) ;
Distance : 5

109
Tree	this . dataset = point ( dataset ) ;
Code	this . dataset = point ( dataset ) ;
Distance : 5

110
Tree	s = true ;
Code	s = true ;
Distance : 4

111
Tree	dataset . nullNotPermitted () ;
Code	dataset . nullNotPermitted () ;
Distance : 4

112
Tree	this . dataset = new Coordinates3D ( dataset ) ;
Code	this . dataset = new Coordinates3D ( dataset ) ;
Distance : 6

113
Tree	this . dataset = Coordinates3D ;
Code	this . dataset = Coordinates3D ;
Distance : 4

114
Tree	dataset = Double.NaN ;
Code	dataset = Double.NaN ;
Distance : 4

115
Tree	this . dataset = toFormatter ( dataset ) ;
Code	this . dataset = toFormatter ( dataset ) ;
Distance : 5

116
Tree	Node.FREE_CALL = new Coordinates3D <> () ;
Code	Node.FREE_CALL = new Coordinates3D <> () ;
Distance : 6

117
Tree	this . dataset = getDataset ( dataset ) ;
Code	this . dataset = getDataset ( dataset ) ;
Distance : 5

118
Tree	this . dataset = ch ;
Code	this . dataset = ch ;
Distance : 4

119
Tree	this . dataset = new Coordinates3D ( range ) ;
Code	this . dataset = new Coordinates3D ( range ) ;
Distance : 7

120
Tree	this . dataset = ( Coordinates3D ) dataset . clone () ;
Code	this . dataset = ( Coordinates3D ) dataset . clone () ;
Distance : 9

121
Tree	replaceWith () ;
Code	replaceWith () ;
Distance : 4

122
Tree	Coordinates3D = new Coordinates3D <> () ;
Code	Coordinates3D = new Coordinates3D <> () ;
Distance : 6

123
Tree	dataset . abs () ;
Code	dataset . abs () ;
Distance : 4

124
Tree	Coordinates3D = new Coordinates3D ( dataset ) ;
Code	Coordinates3D = new Coordinates3D ( dataset ) ;
Distance : 4

125
Tree	this . dataset = ( dataset ) includeInterval . clone () ;
Code	this . dataset = ( dataset ) includeInterval . clone () ;
Distance : 8

126
Tree	dataset . replaceWith ( dataset , STRING_CONSTANT ) ;
Code	dataset . replaceWith ( dataset , STRING_CONSTANT ) ;
Distance : 5

127
Tree	this . dataset = Double.NaN ;
Code	this . dataset = Double.NaN ;
Distance : 4

128
Tree	this . dataset = PlotOrientation.VERTICAL ;
Code	this . dataset = PlotOrientation.VERTICAL ;
Distance : 4

129
Tree	hotspot = new Coordinates3D <> () ;
Code	hotspot = new Coordinates3D <> () ;
Distance : 6

130
Tree	dataset = new Coordinates3D <> () ;
Code	dataset = new Coordinates3D <> () ;
Distance : 6

131
Tree	dataset = getSolver () ;
Code	dataset = getSolver () ;
Distance : 4

132
Tree	dataset . isExprResult ( dataset ) ;
Code	dataset . isExprResult ( dataset ) ;
Distance : 3

133
Tree	Coordinates3D = true ;
Code	Coordinates3D = true ;
Distance : 4

134
Tree	this . dataset = new Coordinates3D ( Coordinates3D ) ;
Code	this . dataset = new Coordinates3D ( Coordinates3D ) ;
Distance : 7

135
Tree	solve () ;
Code	solve () ;
Distance : 4

136
Tree	isName () ;
Code	isName () ;
Distance : 4

137
Tree	includeInterval = new Coordinates3D ( dataset ) ;
Code	includeInterval = new Coordinates3D ( dataset ) ;
Distance : 4

138
Tree	this . dataset = s ;
Code	this . dataset = s ;
Distance : 4

139
Tree	dataset = Coordinates3D . getParent () ;
Code	dataset = Coordinates3D . getParent () ;
Distance : 6

140
Tree	includeInterval = true ;
Code	includeInterval = true ;
Distance : 4

141
Tree	this . dataset = Precision.SAFE_MIN ;
Code	this . dataset = Precision.SAFE_MIN ;
Distance : 4

142
Tree	abs () ;
Code	abs () ;
Distance : 4

143
Tree	dataset . isName ( dataset ) ;
Code	dataset . isName ( dataset ) ;
Distance : 3

144
Tree	dataset = newScope () ;
Code	dataset = newScope () ;
Distance : 4

145
Tree	this . dataset = s . clone ( dataset ) ;
Code	this . dataset = s . clone ( dataset ) ;
Distance : 7

146
Tree	hotspot = new Coordinates3D ( dataset ) ;
Code	hotspot = new Coordinates3D ( dataset ) ;
Distance : 4

147
Tree	dataset = dataset . getSolver ( dataset ) ;
Code	dataset = dataset . getSolver ( dataset ) ;
Distance : 5

148
Tree	this . solver = null ;
Code	this . solver = null ;
Distance : 5

149
Tree	this . includeInterval = ( dataset ) dataset . clone () ;
Code	this . includeInterval = ( dataset ) dataset . clone () ;
Distance : 8

150
Tree	dataset . nullNotPermitted ( dataset ) ;
Code	dataset . nullNotPermitted ( dataset ) ;
Distance : 3

151
Tree	hotspot = true ;
Code	hotspot = true ;
Distance : 4

152
Tree	this . dataset = Color.BLACK ;
Code	this . dataset = Color.BLACK ;
Distance : 4

153
Tree	dataset . getParent ( dataset ) ;
Code	dataset . getParent ( dataset ) ;
Distance : 3

154
Tree	this . dataset = MathUtils.SAFE_MIN ;
Code	this . dataset = MathUtils.SAFE_MIN ;
Distance : 4

155
Tree	series = true ;
Code	series = true ;
Distance : 4

156
Tree	this . dataset = includeInterval . clone ( dataset ) ;
Code	this . dataset = includeInterval . clone ( dataset ) ;
Distance : 7

157
Tree	this . dataset = Color.RED ;
Code	this . dataset = Color.RED ;
Distance : 4

158
Tree	dataset = Precision.SAFE_MIN ;
Code	dataset = Precision.SAFE_MIN ;
Distance : 4

159
Tree	this . includeInterval = null ;
Code	this . includeInterval = null ;
Distance : 5

160
Tree	dataset = getDataset () ;
Code	dataset = getDataset () ;
Distance : 4

161
Tree	dataset = f.length ;
Code	dataset = f.length ;
Distance : 4

162
Tree	s = new Coordinates3D <> () ;
Code	s = new Coordinates3D <> () ;
Distance : 6

163
Tree	this . dataset = ( dataset ) hotspot . clone () ;
Code	this . dataset = ( dataset ) hotspot . clone () ;
Distance : 8

164
Tree	this . dataset = cls ;
Code	this . dataset = cls ;
Distance : 4

165
Tree	dataset = dataset . getParent ( dataset ) ;
Code	dataset = dataset . getParent ( dataset ) ;
Distance : 5

166
Tree	this . legendItemShape = null ;
Code	this . legendItemShape = null ;
Distance : 5

167
Tree	this . item = null ;
Code	this . item = null ;
Distance : 5

168
Tree	this . dataset = return; ;
Code	this . dataset = return; ;
Distance : 4

169
Tree	dataset . solve ( dataset ) ;
Code	dataset . solve ( dataset ) ;
Distance : 3

170
Tree	series = new Coordinates3D <> () ;
Code	series = new Coordinates3D <> () ;
Distance : 6

171
Tree	this . includeInterval = true ;
Code	this . includeInterval = true ;
Distance : 5

172
Tree	this . point = null ;
Code	this . point = null ;
Distance : 5

173
Tree	dataset . isExprResult () ;
Code	dataset . isExprResult () ;
Distance : 4

174
Tree	this . ch = true ;
Code	this . ch = true ;
Distance : 5

175
Tree	this . solver = true ;
Code	this . solver = true ;
Distance : 5

176
Tree	point () ;
Code	point () ;
Distance : 4

177
Tree	this . legendItemShape = true ;
Code	this . legendItemShape = true ;
Distance : 5

178
Tree	dataset = dataset . abs ( dataset ) ;
Code	dataset = dataset . abs ( dataset ) ;
Distance : 5

179
Tree	this . dataset = new Coordinates3D ( includeInterval ) ;
Code	this . dataset = new Coordinates3D ( includeInterval ) ;
Distance : 7

180
Tree	dataset . isName () ;
Code	dataset . isName () ;
Distance : 4

181
Tree	this . ch = null ;
Code	this . ch = null ;
Distance : 5

182
Tree	dataset = dataset . findStackedRangeBounds ( dataset ) ;
Code	dataset = dataset . findStackedRangeBounds ( dataset ) ;
Distance : 5

183
Tree	typeArguments.length = new Coordinates3D <> () ;
Code	typeArguments.length = new Coordinates3D <> () ;
Distance : 6

184
Tree	this . ch = ( dataset ) dataset . clone () ;
Code	this . ch = ( dataset ) dataset . clone () ;
Distance : 8

185
Tree	dataset . nullNotPermitted ( dataset , STRING_CONSTANT ) ;
Code	dataset . nullNotPermitted ( dataset , STRING_CONSTANT ) ;
Distance : 5

186
Tree	isExprResult () ;
Code	isExprResult () ;
Distance : 4

187
Tree	dataset = new Coordinates3D ( Coordinates3D ) ;
Code	dataset = new Coordinates3D ( Coordinates3D ) ;
Distance : 5

188
Tree	DatasetUtils = new Coordinates3D <> () ;
Code	DatasetUtils = new Coordinates3D <> () ;
Distance : 6

189
Tree	this . dataset = f.length ;
Code	this . dataset = f.length ;
Distance : 4

190
Tree	ref.node = true ;
Code	ref.node = true ;
Distance : 4

191
Tree	range = true ;
Code	range = true ;
Distance : 4

192
Tree	dataset = findStackedRangeBounds () ;
Code	dataset = findStackedRangeBounds () ;
Distance : 4

193
Tree	this . point = true ;
Code	this . point = true ;
Distance : 5

194
Tree	s = new Coordinates3D ( dataset ) ;
Code	s = new Coordinates3D ( dataset ) ;
Distance : 4

195
Tree	dataset . solve () ;
Code	dataset . solve () ;
Distance : 4

196
Tree	range = new Coordinates3D <> () ;
Code	range = new Coordinates3D <> () ;
Distance : 6

197
Tree	dataset = false ;
Code	dataset = false ;
Distance : 4

198
Tree	dataset = Color.BLACK ;
Code	dataset = Color.BLACK ;
Distance : 4

199
Tree	this . item = true ;
Code	this . item = true ;
Distance : 5

========================================================================


========================================================================
Example Number: 6
Parent Code is: 
PathIterator iterator2 = p1 . getPathIterator ( null ) ;
-------------------------------------------------------------------------------
Child code is: 
PathIterator iterator2 = p2 . getPathIterator ( null ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=PathIterator})) (59 (800{val=iterator2}) (204{val==}) (32 (800{val=p1}) (235{val=.}) (802{val=getPathIterator}) (214{val=(}) (500{val=null}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=PathIterator})) (59 (800{val=iterator2}) (204{val==}) (32 (800{val=p2}) (235{val=.}) (802{val=getPathIterator}) (214{val=(}) (500{val=null}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/11/parent/source_org_jfree_chart_util_ShapeUtilities.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	StringWriter scopeBuilder = this . defaultItemURLGenerator . getNameNode ( INDEX_OFFSET ) ;
Code	StringWriter scopeBuilder = this . defaultItemURLGenerator . getNameNode ( INDEX_OFFSET ) ;
Distance : 7

1
Tree	StringWriter sgY2 = this . defaultItemURLGenerator . getNameNode ( INDEX_OFFSET ) ;
Code	StringWriter sgY2 = this . defaultItemURLGenerator . getNameNode ( INDEX_OFFSET ) ;
Distance : 7

2
Tree	StringWriter scopeBuilder = p1 . intersection ( root , DECLARE_LEGACY_NAMESPACE_OUTSIDE_GOOG_MODULE . getNameNode ( null ) ) ;
Code	StringWriter scopeBuilder = p1 . intersection ( root , DECLARE_LEGACY_NAMESPACE_OUTSIDE_GOOG_MODULE . getNameNode ( null ) ) ;
Distance : 11

3
Tree	ContainsExtraTypeInformation scopeBuilder = p1 . intersection ( root , DECLARE_LEGACY_NAMESPACE_OUTSIDE_GOOG_MODULE . getNameNode ( null ) ) ;
Code	ContainsExtraTypeInformation scopeBuilder = p1 . intersection ( root , DECLARE_LEGACY_NAMESPACE_OUTSIDE_GOOG_MODULE . getNameNode ( null ) ) ;
Distance : 11

4
Tree	ContainsExtraTypeInformation scopeBuilder = this . defaultItemURLGenerator . getNameNode ( INDEX_OFFSET ) ;
Code	ContainsExtraTypeInformation scopeBuilder = this . defaultItemURLGenerator . getNameNode ( INDEX_OFFSET ) ;
Distance : 7

5
Tree	SparseGradient scopeBuilder = p1 . intersection ( root , DECLARE_LEGACY_NAMESPACE_OUTSIDE_GOOG_MODULE . getNameNode ( null ) ) ;
Code	SparseGradient scopeBuilder = p1 . intersection ( root , DECLARE_LEGACY_NAMESPACE_OUTSIDE_GOOG_MODULE . getNameNode ( null ) ) ;
Distance : 11

6
Tree	SparseGradient scopeBuilder = this . defaultItemURLGenerator . getNameNode ( INDEX_OFFSET ) ;
Code	SparseGradient scopeBuilder = this . defaultItemURLGenerator . getNameNode ( INDEX_OFFSET ) ;
Distance : 7

7
Tree	StringWriter scopeBuilder = p1 . intersection ( INDEX_OFFSET , DECLARE_LEGACY_NAMESPACE_OUTSIDE_GOOG_MODULE . getNameNode ( null ) ) ;
Code	StringWriter scopeBuilder = p1 . intersection ( INDEX_OFFSET , DECLARE_LEGACY_NAMESPACE_OUTSIDE_GOOG_MODULE . getNameNode ( null ) ) ;
Distance : 11

8
Tree	StringWriter tok2 = this . defaultItemURLGenerator . getNameNode ( INDEX_OFFSET ) ;
Code	StringWriter tok2 = this . defaultItemURLGenerator . getNameNode ( INDEX_OFFSET ) ;
Distance : 7

9
Tree	StringWriter tok2 = p1 . intersection ( root , DECLARE_LEGACY_NAMESPACE_OUTSIDE_GOOG_MODULE . getNameNode ( null ) ) ;
Code	StringWriter tok2 = p1 . intersection ( root , DECLARE_LEGACY_NAMESPACE_OUTSIDE_GOOG_MODULE . getNameNode ( null ) ) ;
Distance : 11

10
Tree	StringWriter scopeBuilder = this . delimMatcher . getNameNode ( INDEX_OFFSET ) ;
Code	StringWriter scopeBuilder = this . delimMatcher . getNameNode ( INDEX_OFFSET ) ;
Distance : 7

11
Tree	StringWriter scopeBuilder = p1 . intersection ( root , showSeparators . getNameNode ( null ) ) ;
Code	StringWriter scopeBuilder = p1 . intersection ( root , showSeparators . getNameNode ( null ) ) ;
Distance : 11

12
Tree	TypeMockability scopeBuilder = this . defaultItemURLGenerator . getNameNode ( INDEX_OFFSET ) ;
Code	TypeMockability scopeBuilder = this . defaultItemURLGenerator . getNameNode ( INDEX_OFFSET ) ;
Distance : 7

13
Tree	StringWriter scopeBuilder = p1 . hasDuplicateDeclarationSuppression ( root , DECLARE_LEGACY_NAMESPACE_OUTSIDE_GOOG_MODULE . getNameNode ( null ) ) ;
Code	StringWriter scopeBuilder = p1 . hasDuplicateDeclarationSuppression ( root , DECLARE_LEGACY_NAMESPACE_OUTSIDE_GOOG_MODULE . getNameNode ( null ) ) ;
Distance : 11

14
Tree	StringWriter scopeBuilder = this . printExterns . getNameNode ( INDEX_OFFSET ) ;
Code	StringWriter scopeBuilder = this . printExterns . getNameNode ( INDEX_OFFSET ) ;
Distance : 7

15
Tree	StringWriter sgY2 = p1 . intersection ( root , DECLARE_LEGACY_NAMESPACE_OUTSIDE_GOOG_MODULE . getNameNode ( null ) ) ;
Code	StringWriter sgY2 = p1 . intersection ( root , DECLARE_LEGACY_NAMESPACE_OUTSIDE_GOOG_MODULE . getNameNode ( null ) ) ;
Distance : 11

16
Tree	SparseGradient scopeBuilder = p1 . intersection ( root , null ) ;
Code	SparseGradient scopeBuilder = p1 . intersection ( root , null ) ;
Distance : 6

17
Tree	TypeMockability scopeBuilder = this . defaultItemURLGenerator . getNameNode () ;
Code	TypeMockability scopeBuilder = this . defaultItemURLGenerator . getNameNode () ;
Distance : 7

18
Tree	StringWriter tok2 = p1 . intersection ( root , null ) ;
Code	StringWriter tok2 = p1 . intersection ( root , null ) ;
Distance : 6

19
Tree	StringWriter scopeBuilder = p1 . intersection ( INDEX_OFFSET , null ) ;
Code	StringWriter scopeBuilder = p1 . intersection ( INDEX_OFFSET , null ) ;
Distance : 6

20
Tree	StringWriter sgY2 = this . defaultItemURLGenerator . getNameNode () ;
Code	StringWriter sgY2 = this . defaultItemURLGenerator . getNameNode () ;
Distance : 7

21
Tree	StringWriter scopeBuilder = this . printExterns . getNameNode () ;
Code	StringWriter scopeBuilder = this . printExterns . getNameNode () ;
Distance : 7

22
Tree	StringWriter scopeBuilder = p1 . hasDuplicateDeclarationSuppression ( root , null ) ;
Code	StringWriter scopeBuilder = p1 . hasDuplicateDeclarationSuppression ( root , null ) ;
Distance : 6

23
Tree	StringWriter scopeBuilder = p1 . intersection ( null ) ;
Code	StringWriter scopeBuilder = p1 . intersection ( null ) ;
Distance : 4

24
Tree	ContainsExtraTypeInformation scopeBuilder = p1 . intersection ( null ) ;
Code	ContainsExtraTypeInformation scopeBuilder = p1 . intersection ( null ) ;
Distance : 4

25
Tree	StringWriter scopeBuilder = p1 . intersection ( ( Class [] ) null ) ;
Code	StringWriter scopeBuilder = p1 . intersection ( ( Class [] ) null ) ;
Distance : 8

26
Tree	SparseGradient scopeBuilder = p1 . intersection ( null ) ;
Code	SparseGradient scopeBuilder = p1 . intersection ( null ) ;
Distance : 4

27
Tree	StringWriter tok2 = p1 . intersection ( null ) ;
Code	StringWriter tok2 = p1 . intersection ( null ) ;
Distance : 4

28
Tree	StringWriter sgY2 = p1 . intersection ( null ) ;
Code	StringWriter sgY2 = p1 . intersection ( null ) ;
Distance : 4

29
Tree	StringWriter scopeBuilder = p1 . hasDuplicateDeclarationSuppression ( null ) ;
Code	StringWriter scopeBuilder = p1 . hasDuplicateDeclarationSuppression ( null ) ;
Distance : 4

30
Tree	ContainsExtraTypeInformation scopeBuilder = p1 . intersection ( STRING_CONSTANT , requiresLanguageModeMessage ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	ContainsExtraTypeInformation scopeBuilder = p1 . intersection ( STRING_CONSTANT , requiresLanguageModeMessage ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 12

31
Tree	StringWriter dataInOrder = p1 . intersection ( null ) ;
Code	StringWriter dataInOrder = p1 . intersection ( null ) ;
Distance : 4

32
Tree	StringWriter scopeBuilder = p1 . intersection () ;
Code	StringWriter scopeBuilder = p1 . intersection () ;
Distance : 7

33
Tree	StringWriter scopeBuilder = p1 . hasDuplicateDeclarationSuppression ( root ) ;
Code	StringWriter scopeBuilder = p1 . hasDuplicateDeclarationSuppression ( root ) ;
Distance : 5

34
Tree	StringWriter scopeBuilder = p1 . intersection ( root . getNameNode ( null ) ) ;
Code	StringWriter scopeBuilder = p1 . intersection ( root . getNameNode ( null ) ) ;
Distance : 9

35
Tree	StringWriter scopeBuilder = Double.NaN . intersection ( NUMBER_CONSTANT ) ;
Code	StringWriter scopeBuilder = Double.NaN . intersection ( NUMBER_CONSTANT ) ;
Distance : 5

36
Tree	StringWriter scopeBuilder = p1 . intersection ( root . class ) ;
Code	StringWriter scopeBuilder = p1 . intersection ( root . class ) ;
Distance : 7

37
Tree	SparseGradient scopeBuilder = p1 . intersection ( STRING_CONSTANT , true ) ;
Code	SparseGradient scopeBuilder = p1 . intersection ( STRING_CONSTANT , true ) ;
Distance : 7

38
Tree	StringWriter sgY2 = p1 . intersection ( root ) ;
Code	StringWriter sgY2 = p1 . intersection ( root ) ;
Distance : 5

39
Tree	StringWriter scopeBuilder = p1 . intersection ( root , RotationConvention.FRAME_TRANSFORM ) ;
Code	StringWriter scopeBuilder = p1 . intersection ( root , RotationConvention.FRAME_TRANSFORM ) ;
Distance : 7

40
Tree	StringWriter scopeBuilder = p1 . intersection ( root . getLeftElement ( null ) ) ;
Code	StringWriter scopeBuilder = p1 . intersection ( root . getLeftElement ( null ) ) ;
Distance : 9

41
Tree	StringWriter tok2 = p1 . intersection ( STRING_CONSTANT , true ) ;
Code	StringWriter tok2 = p1 . intersection ( STRING_CONSTANT , true ) ;
Distance : 7

42
Tree	SparseGradient scopeBuilder = p1 . intersection ( null , null ) ;
Code	SparseGradient scopeBuilder = p1 . intersection ( null , null ) ;
Distance : 6

43
Tree	StringWriter scopeBuilder = p1 . intersection ( root . getScopedName ( null ) ) ;
Code	StringWriter scopeBuilder = p1 . intersection ( root . getScopedName ( null ) ) ;
Distance : 9

44
Tree	StringWriter tok2 = p1 . intersection ( null , null ) ;
Code	StringWriter tok2 = p1 . intersection ( null , null ) ;
Distance : 6

45
Tree	StringWriter sgY2 = p1 . intersection () ;
Code	StringWriter sgY2 = p1 . intersection () ;
Distance : 7

46
Tree	StringWriter dataInOrder = p1 . intersection ( root ) ;
Code	StringWriter dataInOrder = p1 . intersection ( root ) ;
Distance : 5

47
Tree	StringWriter scopeBuilder = p1 . hasDuplicateDeclarationSuppression () ;
Code	StringWriter scopeBuilder = p1 . hasDuplicateDeclarationSuppression () ;
Distance : 7

48
Tree	StringWriter dataInOrder = p1 . intersection () ;
Code	StringWriter dataInOrder = p1 . intersection () ;
Distance : 7

49
Tree	StringWriter scopeBuilder = p1 . intersection ( null , null ) ;
Code	StringWriter scopeBuilder = p1 . intersection ( null , null ) ;
Distance : 6

50
Tree	TypeMockability scopeBuilder = p1 . intersection () ;
Code	TypeMockability scopeBuilder = p1 . intersection () ;
Distance : 7

51
Tree	StringWriter scopeBuilder = p1 . intersection ( ( Point ) null ) ;
Code	StringWriter scopeBuilder = p1 . intersection ( ( Point ) null ) ;
Distance : 7

52
Tree	ContainsExtraTypeInformation scopeBuilder = getOrCreateName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	ContainsExtraTypeInformation scopeBuilder = getOrCreateName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 15

53
Tree	ContainsExtraTypeInformation scopeBuilder = p1 . intersection ( ( Point ) null ) ;
Code	ContainsExtraTypeInformation scopeBuilder = p1 . intersection ( ( Point ) null ) ;
Distance : 7

54
Tree	SparseGradient scopeBuilder = p1 . intersection ( ( Point ) null ) ;
Code	SparseGradient scopeBuilder = p1 . intersection ( ( Point ) null ) ;
Distance : 7

55
Tree	StringWriter tok2 = p1 . intersection ( ( Point ) null ) ;
Code	StringWriter tok2 = p1 . intersection ( ( Point ) null ) ;
Distance : 7

56
Tree	StringWriter sgY2 = p1 . intersection ( ( Point ) null ) ;
Code	StringWriter sgY2 = p1 . intersection ( ( Point ) null ) ;
Distance : 7

57
Tree	StringWriter scopeBuilder = p1 . intersection ( root . createCaseNode ( null ) ) ;
Code	StringWriter scopeBuilder = p1 . intersection ( root . createCaseNode ( null ) ) ;
Distance : 9

58
Tree	ContainsExtraTypeInformation scopeBuilder = p1 . intersection ( root . getNameNode ( null ) ) ;
Code	ContainsExtraTypeInformation scopeBuilder = p1 . intersection ( root . getNameNode ( null ) ) ;
Distance : 9

59
Tree	StringWriter sgY2 = p1 . intersection ( STRING_CONSTANT , true ) ;
Code	StringWriter sgY2 = p1 . intersection ( STRING_CONSTANT , true ) ;
Distance : 7

60
Tree	StringWriter scopeBuilder = p1 . hasDuplicateDeclarationSuppression ( ( Point ) null ) ;
Code	StringWriter scopeBuilder = p1 . hasDuplicateDeclarationSuppression ( ( Point ) null ) ;
Distance : 7

61
Tree	TypeMockability scopeBuilder = p1 . intersection ( ( Point ) null ) ;
Code	TypeMockability scopeBuilder = p1 . intersection ( ( Point ) null ) ;
Distance : 7

62
Tree	StringWriter scopeBuilder = p1 . intersection ( root ) ;
Code	StringWriter scopeBuilder = p1 . intersection ( root ) ;
Distance : 5

63
Tree	StringWriter scopeBuilder = p1 . intersection ( STRING_CONSTANT , true ) ;
Code	StringWriter scopeBuilder = p1 . intersection ( STRING_CONSTANT , true ) ;
Distance : 7

64
Tree	StringWriter sgY2 = p1 . intersection ( null , null ) ;
Code	StringWriter sgY2 = p1 . intersection ( null , null ) ;
Distance : 6

65
Tree	ContainsExtraTypeInformation scopeBuilder = p1 . intersection ( root ) ;
Code	ContainsExtraTypeInformation scopeBuilder = p1 . intersection ( root ) ;
Distance : 5

66
Tree	StringWriter scopeBuilder = p1 . intersection ( STRING_CONSTANT ) ;
Code	StringWriter scopeBuilder = p1 . intersection ( STRING_CONSTANT ) ;
Distance : 5

67
Tree	ContainsExtraTypeInformation scopeBuilder = p1 . intersection ( STRING_CONSTANT , true ) ;
Code	ContainsExtraTypeInformation scopeBuilder = p1 . intersection ( STRING_CONSTANT , true ) ;
Distance : 7

68
Tree	SparseGradient scopeBuilder = p1 . intersection ( root ) ;
Code	SparseGradient scopeBuilder = p1 . intersection ( root ) ;
Distance : 5

69
Tree	TypeMockability scopeBuilder = p1 . intersection ( null ) ;
Code	TypeMockability scopeBuilder = p1 . intersection ( null ) ;
Distance : 4

70
Tree	StringWriter dataInOrder = p1 . intersection ( ( Point ) null ) ;
Code	StringWriter dataInOrder = p1 . intersection ( ( Point ) null ) ;
Distance : 7

71
Tree	ContainsExtraTypeInformation scopeBuilder = p1 . intersection ( ( Class [] ) null ) ;
Code	ContainsExtraTypeInformation scopeBuilder = p1 . intersection ( ( Class [] ) null ) ;
Distance : 8

72
Tree	StringWriter tok2 = p1 . intersection ( root ) ;
Code	StringWriter tok2 = p1 . intersection ( root ) ;
Distance : 5

73
Tree	SparseGradient scopeBuilder = p1 . intersection ( ( Class [] ) null ) ;
Code	SparseGradient scopeBuilder = p1 . intersection ( ( Class [] ) null ) ;
Distance : 8

74
Tree	StringWriter scopeBuilder = p1 . intersection ( INDEX_OFFSET . getNameNode ( null ) ) ;
Code	StringWriter scopeBuilder = p1 . intersection ( INDEX_OFFSET . getNameNode ( null ) ) ;
Distance : 9

75
Tree	SparseGradient scopeBuilder = p1 . intersection ( root . class ) ;
Code	SparseGradient scopeBuilder = p1 . intersection ( root . class ) ;
Distance : 7

76
Tree	StringWriter tok2 = p1 . intersection ( ( Class [] ) null ) ;
Code	StringWriter tok2 = p1 . intersection ( ( Class [] ) null ) ;
Distance : 8

77
Tree	StringWriter sgY2 = p1 . intersection ( ( Class [] ) null ) ;
Code	StringWriter sgY2 = p1 . intersection ( ( Class [] ) null ) ;
Distance : 8

78
Tree	StringWriter scopeBuilder = p1 . intersection ( INDEX_OFFSET , RotationConvention.FRAME_TRANSFORM ) ;
Code	StringWriter scopeBuilder = p1 . intersection ( INDEX_OFFSET , RotationConvention.FRAME_TRANSFORM ) ;
Distance : 7

79
Tree	StringWriter scopeBuilder = p1 . hasDuplicateDeclarationSuppression ( ( Class [] ) null ) ;
Code	StringWriter scopeBuilder = p1 . hasDuplicateDeclarationSuppression ( ( Class [] ) null ) ;
Distance : 8

80
Tree	SparseGradient scopeBuilder = p1 . intersection ( root , RotationConvention.FRAME_TRANSFORM ) ;
Code	SparseGradient scopeBuilder = p1 . intersection ( root , RotationConvention.FRAME_TRANSFORM ) ;
Distance : 7

81
Tree	StringWriter tok2 = p1 . intersection ( root . class ) ;
Code	StringWriter tok2 = p1 . intersection ( root . class ) ;
Distance : 7

82
Tree	TypeMockability scopeBuilder = p1 . intersection ( ( Class [] ) null ) ;
Code	TypeMockability scopeBuilder = p1 . intersection ( ( Class [] ) null ) ;
Distance : 8

83
Tree	StringWriter scopeBuilder = p1 . intersection ( INDEX_OFFSET . class ) ;
Code	StringWriter scopeBuilder = p1 . intersection ( INDEX_OFFSET . class ) ;
Distance : 7

84
Tree	StringWriter tok2 = p1 . intersection ( root , RotationConvention.FRAME_TRANSFORM ) ;
Code	StringWriter tok2 = p1 . intersection ( root , RotationConvention.FRAME_TRANSFORM ) ;
Distance : 7

85
Tree	StringWriter scopeBuilder = p1 . intersection ( INDEX_OFFSET ) ;
Code	StringWriter scopeBuilder = p1 . intersection ( INDEX_OFFSET ) ;
Distance : 5

86
Tree	StringWriter dataInOrder = p1 . intersection ( ( Class [] ) null ) ;
Code	StringWriter dataInOrder = p1 . intersection ( ( Class [] ) null ) ;
Distance : 8

87
Tree	StringWriter sgY2 = Double.NaN . intersection ( NUMBER_CONSTANT ) ;
Code	StringWriter sgY2 = Double.NaN . intersection ( NUMBER_CONSTANT ) ;
Distance : 5

88
Tree	StringWriter dataInOrder = p1 . intersection ( STRING_CONSTANT , requiresLanguageModeMessage ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	StringWriter dataInOrder = p1 . intersection ( STRING_CONSTANT , requiresLanguageModeMessage ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 12

89
Tree	StringWriter scopeBuilder = p1 . hasDuplicateDeclarationSuppression ( root . class ) ;
Code	StringWriter scopeBuilder = p1 . hasDuplicateDeclarationSuppression ( root . class ) ;
Distance : 7

90
Tree	StringWriter sgY2 = p1 . intersection ( root , null ) ;
Code	StringWriter sgY2 = p1 . intersection ( root , null ) ;
Distance : 6

91
Tree	TypeMockability scopeBuilder = p1 . intersection ( STRING_CONSTANT , requiresLanguageModeMessage ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	TypeMockability scopeBuilder = p1 . intersection ( STRING_CONSTANT , requiresLanguageModeMessage ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 12

92
Tree	StringWriter scopeBuilder = p1 . intersection ( reducePoints ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	StringWriter scopeBuilder = p1 . intersection ( reducePoints ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 14

93
Tree	StringWriter scopeBuilder = p1 . hasDuplicateDeclarationSuppression ( root , RotationConvention.FRAME_TRANSFORM ) ;
Code	StringWriter scopeBuilder = p1 . hasDuplicateDeclarationSuppression ( root , RotationConvention.FRAME_TRANSFORM ) ;
Distance : 7

94
Tree	ContainsExtraTypeInformation scopeBuilder = p1 . intersection ( reducePoints ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	ContainsExtraTypeInformation scopeBuilder = p1 . intersection ( reducePoints ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 14

95
Tree	StringWriter sgY2 = p1 . intersection ( root . class ) ;
Code	StringWriter sgY2 = p1 . intersection ( root . class ) ;
Distance : 7

96
Tree	StringWriter dataInOrder = p1 . intersection ( root , null ) ;
Code	StringWriter dataInOrder = p1 . intersection ( root , null ) ;
Distance : 6

97
Tree	StringWriter scopeBuilder = p1 . intersection ( getItemShape ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	StringWriter scopeBuilder = p1 . intersection ( getItemShape ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 14

98
Tree	StringWriter dataInOrder = Double.NaN . intersection ( NUMBER_CONSTANT ) ;
Code	StringWriter dataInOrder = Double.NaN . intersection ( NUMBER_CONSTANT ) ;
Distance : 5

99
Tree	StringWriter sgY2 = p1 . intersection ( root , RotationConvention.FRAME_TRANSFORM ) ;
Code	StringWriter sgY2 = p1 . intersection ( root , RotationConvention.FRAME_TRANSFORM ) ;
Distance : 7

100
Tree	StringWriter scopeBuilder = getOrCreateName ( v.data ) ;
Code	StringWriter scopeBuilder = getOrCreateName ( v.data ) ;
Distance : 6

101
Tree	StringWriter scopeBuilder = getOrCreateName ( root . copySelf ( null ) ) ;
Code	StringWriter scopeBuilder = getOrCreateName ( root . copySelf ( null ) ) ;
Distance : 7

102
Tree	TypeMockability scopeBuilder = Double.NaN . intersection ( NUMBER_CONSTANT ) ;
Code	TypeMockability scopeBuilder = Double.NaN . intersection ( NUMBER_CONSTANT ) ;
Distance : 5

103
Tree	StringWriter scopeBuilder = p1 . intersection ( INDEX_OFFSET , this . isArrowAtTop ) ;
Code	StringWriter scopeBuilder = p1 . intersection ( INDEX_OFFSET , this . isArrowAtTop ) ;
Distance : 9

104
Tree	ContainsExtraTypeInformation scopeBuilder = getOrCreateName ( v.data ) ;
Code	ContainsExtraTypeInformation scopeBuilder = getOrCreateName ( v.data ) ;
Distance : 6

105
Tree	SparseGradient scopeBuilder = p1 . intersection ( STRING_CONSTANT , requiresLanguageModeMessage ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	SparseGradient scopeBuilder = p1 . intersection ( STRING_CONSTANT , requiresLanguageModeMessage ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 12

106
Tree	StringWriter scopeBuilder = p1 . hasDuplicateDeclarationSuppression ( root , this . isArrowAtTop ) ;
Code	StringWriter scopeBuilder = p1 . hasDuplicateDeclarationSuppression ( root , this . isArrowAtTop ) ;
Distance : 9

107
Tree	StringWriter tok2 = p1 . intersection ( STRING_CONSTANT , requiresLanguageModeMessage ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	StringWriter tok2 = p1 . intersection ( STRING_CONSTANT , requiresLanguageModeMessage ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 12

108
Tree	StringWriter scopeBuilder = getOrCreateName ( s . copySelf ( null ) ) ;
Code	StringWriter scopeBuilder = getOrCreateName ( s . copySelf ( null ) ) ;
Distance : 7

109
Tree	StringWriter dataInOrder = p1 . intersection ( root . class ) ;
Code	StringWriter dataInOrder = p1 . intersection ( root . class ) ;
Distance : 7

110
Tree	StringWriter sgY2 = p1 . intersection ( STRING_CONSTANT , requiresLanguageModeMessage ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	StringWriter sgY2 = p1 . intersection ( STRING_CONSTANT , requiresLanguageModeMessage ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 12

111
Tree	StringWriter scopeBuilder = p1 . hasDuplicateDeclarationSuppression ( STRING_CONSTANT , requiresLanguageModeMessage ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	StringWriter scopeBuilder = p1 . hasDuplicateDeclarationSuppression ( STRING_CONSTANT , requiresLanguageModeMessage ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 12

112
Tree	StringWriter sgY2 = p1 . intersection ( root , this . isArrowAtTop ) ;
Code	StringWriter sgY2 = p1 . intersection ( root , this . isArrowAtTop ) ;
Distance : 9

113
Tree	ContainsExtraTypeInformation scopeBuilder = getOrCreateName ( root . copySelf ( null ) ) ;
Code	ContainsExtraTypeInformation scopeBuilder = getOrCreateName ( root . copySelf ( null ) ) ;
Distance : 7

114
Tree	StringWriter dataInOrder = p1 . intersection ( root , this . isArrowAtTop ) ;
Code	StringWriter dataInOrder = p1 . intersection ( root , this . isArrowAtTop ) ;
Distance : 9

115
Tree	StringWriter scopeBuilder = getOrCreateName ( y.length ) ;
Code	StringWriter scopeBuilder = getOrCreateName ( y.length ) ;
Distance : 6

116
Tree	SparseGradient scopeBuilder = p1 . intersection ( reducePoints ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	SparseGradient scopeBuilder = p1 . intersection ( reducePoints ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 14

117
Tree	StringWriter dataInOrder = p1 . intersection ( root , RotationConvention.FRAME_TRANSFORM ) ;
Code	StringWriter dataInOrder = p1 . intersection ( root , RotationConvention.FRAME_TRANSFORM ) ;
Distance : 7

118
Tree	StringWriter scopeBuilder = p1 . intersection ( root , this . isArrowAtTop ) ;
Code	StringWriter scopeBuilder = p1 . intersection ( root , this . isArrowAtTop ) ;
Distance : 9

119
Tree	ContainsExtraTypeInformation scopeBuilder = getOrCreateName ( s . copySelf ( null ) ) ;
Code	ContainsExtraTypeInformation scopeBuilder = getOrCreateName ( s . copySelf ( null ) ) ;
Distance : 7

120
Tree	StringWriter scopeBuilder = p1 . hasDuplicateDeclarationSuppression ( STRING_CONSTANT , true ) ;
Code	StringWriter scopeBuilder = p1 . hasDuplicateDeclarationSuppression ( STRING_CONSTANT , true ) ;
Distance : 7

121
Tree	StringWriter dataInOrder = p1 . intersection ( STRING_CONSTANT , true ) ;
Code	StringWriter dataInOrder = p1 . intersection ( STRING_CONSTANT , true ) ;
Distance : 7

122
Tree	TypeMockability scopeBuilder = p1 . intersection ( STRING_CONSTANT , true ) ;
Code	TypeMockability scopeBuilder = p1 . intersection ( STRING_CONSTANT , true ) ;
Distance : 7

123
Tree	StringWriter scopeBuilder = getOrCreateName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	StringWriter scopeBuilder = getOrCreateName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 15

124
Tree	StringWriter scopeBuilder = getOrCreateName ( ( Class [] ) null ) ;
Code	StringWriter scopeBuilder = getOrCreateName ( ( Class [] ) null ) ;
Distance : 8

125
Tree	ContainsExtraTypeInformation scopeBuilder = p1 . intersection ( STRING_CONSTANT ) ;
Code	ContainsExtraTypeInformation scopeBuilder = p1 . intersection ( STRING_CONSTANT ) ;
Distance : 5

126
Tree	ContainsExtraTypeInformation scopeBuilder = p1 . intersection () ;
Code	ContainsExtraTypeInformation scopeBuilder = p1 . intersection () ;
Distance : 7

127
Tree	ContainsExtraTypeInformation scopeBuilder = p1 . intersection ( null , null ) ;
Code	ContainsExtraTypeInformation scopeBuilder = p1 . intersection ( null , null ) ;
Distance : 6

128
Tree	SparseGradient scopeBuilder = p1 . intersection () ;
Code	SparseGradient scopeBuilder = p1 . intersection () ;
Distance : 7

129
Tree	StringWriter sgY2 = p1 . intersection ( STRING_CONSTANT ) ;
Code	StringWriter sgY2 = p1 . intersection ( STRING_CONSTANT ) ;
Distance : 5

130
Tree	SparseGradient scopeBuilder = p1 . intersection ( STRING_CONSTANT ) ;
Code	SparseGradient scopeBuilder = p1 . intersection ( STRING_CONSTANT ) ;
Distance : 5

131
Tree	StringWriter tok2 = p1 . intersection () ;
Code	StringWriter tok2 = p1 . intersection () ;
Distance : 7

132
Tree	StringWriter scopeBuilder = p1 . hasDuplicateDeclarationSuppression ( STRING_CONSTANT ) ;
Code	StringWriter scopeBuilder = p1 . hasDuplicateDeclarationSuppression ( STRING_CONSTANT ) ;
Distance : 5

133
Tree	StringWriter scopeBuilder = p1 . hasDuplicateDeclarationSuppression ( null , null ) ;
Code	StringWriter scopeBuilder = p1 . hasDuplicateDeclarationSuppression ( null , null ) ;
Distance : 6

134
Tree	StringWriter dataInOrder = p1 . intersection ( null , null ) ;
Code	StringWriter dataInOrder = p1 . intersection ( null , null ) ;
Distance : 6

135
Tree	TypeMockability scopeBuilder = p1 . intersection ( null , null ) ;
Code	TypeMockability scopeBuilder = p1 . intersection ( null , null ) ;
Distance : 6

136
Tree	SparseGradient scopeBuilder = getOrCreateName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	SparseGradient scopeBuilder = getOrCreateName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 15

137
Tree	StringWriter dataInOrder = p1 . intersection ( STRING_CONSTANT ) ;
Code	StringWriter dataInOrder = p1 . intersection ( STRING_CONSTANT ) ;
Distance : 5

138
Tree	StringWriter dataInOrder = getOrCreateName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	StringWriter dataInOrder = getOrCreateName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 15

139
Tree	SparseGradient scopeBuilder = getOrCreateName ( ( Class [] ) null ) ;
Code	SparseGradient scopeBuilder = getOrCreateName ( ( Class [] ) null ) ;
Distance : 8

140
Tree	StringWriter tok2 = getOrCreateName ( ( Class [] ) null ) ;
Code	StringWriter tok2 = getOrCreateName ( ( Class [] ) null ) ;
Distance : 8

141
Tree	StringWriter ko2D2 = getOrCreateName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	StringWriter ko2D2 = getOrCreateName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 15

142
Tree	StringWriter tok2 = getOrCreateName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	StringWriter tok2 = getOrCreateName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 15

143
Tree	ContainsExtraTypeInformation scopeBuilder = getOrCreateName ( ( Class [] ) null ) ;
Code	ContainsExtraTypeInformation scopeBuilder = getOrCreateName ( ( Class [] ) null ) ;
Distance : 8

144
Tree	ContainsExtraTypeInformation scopeBuilder = Double.NaN . intersection ( NUMBER_CONSTANT ) ;
Code	ContainsExtraTypeInformation scopeBuilder = Double.NaN . intersection ( NUMBER_CONSTANT ) ;
Distance : 5

145
Tree	StringWriter scopeBuilder = Double.NaN . hasDuplicateDeclarationSuppression ( NUMBER_CONSTANT ) ;
Code	StringWriter scopeBuilder = Double.NaN . hasDuplicateDeclarationSuppression ( NUMBER_CONSTANT ) ;
Distance : 5

146
Tree	ContainsExtraTypeInformation scopeBuilder = p1 . intersection ( root . class ) ;
Code	ContainsExtraTypeInformation scopeBuilder = p1 . intersection ( root . class ) ;
Distance : 7

147
Tree	StringWriter sgY2 = getOrCreateName ( ( Class [] ) null ) ;
Code	StringWriter sgY2 = getOrCreateName ( ( Class [] ) null ) ;
Distance : 8

148
Tree	ContainsExtraTypeInformation scopeBuilder = p1 . intersection ( root , RotationConvention.FRAME_TRANSFORM ) ;
Code	ContainsExtraTypeInformation scopeBuilder = p1 . intersection ( root , RotationConvention.FRAME_TRANSFORM ) ;
Distance : 7

149
Tree	TypeMockability scopeBuilder = getOrCreateName ( ( Class [] ) null ) ;
Code	TypeMockability scopeBuilder = getOrCreateName ( ( Class [] ) null ) ;
Distance : 8

150
Tree	StringWriter sgY2 = getOrCreateName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	StringWriter sgY2 = getOrCreateName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 15

151
Tree	StringWriter tok2 = p1 . intersection ( STRING_CONSTANT ) ;
Code	StringWriter tok2 = p1 . intersection ( STRING_CONSTANT ) ;
Distance : 5

152
Tree	StringWriter tok2 = Double.NaN . intersection ( NUMBER_CONSTANT ) ;
Code	StringWriter tok2 = Double.NaN . intersection ( NUMBER_CONSTANT ) ;
Distance : 5

153
Tree	SparseGradient scopeBuilder = p1 . intersection ( root . getNameNode ( null ) ) ;
Code	SparseGradient scopeBuilder = p1 . intersection ( root . getNameNode ( null ) ) ;
Distance : 9

154
Tree	StringWriter dataInOrder = getOrCreateName ( ( Class [] ) null ) ;
Code	StringWriter dataInOrder = getOrCreateName ( ( Class [] ) null ) ;
Distance : 8

155
Tree	SparseGradient scopeBuilder = Double.NaN . intersection ( NUMBER_CONSTANT ) ;
Code	SparseGradient scopeBuilder = Double.NaN . intersection ( NUMBER_CONSTANT ) ;
Distance : 5

156
Tree	TypeMockability scopeBuilder = p1 . intersection ( STRING_CONSTANT ) ;
Code	TypeMockability scopeBuilder = p1 . intersection ( STRING_CONSTANT ) ;
Distance : 5

157
Tree	StringWriter scopeBuilder = this . defaultItemURLGenerator . getNameNode () ;
Code	StringWriter scopeBuilder = this . defaultItemURLGenerator . getNameNode () ;
Distance : 7

158
Tree	StringWriter scopeBuilder = p1 . intersection ( root , null ) ;
Code	StringWriter scopeBuilder = p1 . intersection ( root , null ) ;
Distance : 6

159
Tree	StringWriter scopeBuilder = p1 . intersection ( STRING_CONSTANT , requiresLanguageModeMessage ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	StringWriter scopeBuilder = p1 . intersection ( STRING_CONSTANT , requiresLanguageModeMessage ( STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 12

160
Tree	ContainsExtraTypeInformation scopeBuilder = this . defaultItemURLGenerator . getNameNode () ;
Code	ContainsExtraTypeInformation scopeBuilder = this . defaultItemURLGenerator . getNameNode () ;
Distance : 7

161
Tree	TypeMockability scopeBuilder = getOrCreateName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	TypeMockability scopeBuilder = getOrCreateName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 15

162
Tree	StringWriter tok2 = p1 . intersection ( reducePoints ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	StringWriter tok2 = p1 . intersection ( reducePoints ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 14

163
Tree	SparseGradient scopeBuilder = this . defaultItemURLGenerator . getNameNode () ;
Code	SparseGradient scopeBuilder = this . defaultItemURLGenerator . getNameNode () ;
Distance : 7

164
Tree	StringWriter sgY2 = p1 . intersection ( reducePoints ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	StringWriter sgY2 = p1 . intersection ( reducePoints ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 14

165
Tree	ContainsExtraTypeInformation scopeBuilder = p1 . intersection ( root , null ) ;
Code	ContainsExtraTypeInformation scopeBuilder = p1 . intersection ( root , null ) ;
Distance : 6

166
Tree	StringWriter scopeBuilder = p1 . hasDuplicateDeclarationSuppression ( reducePoints ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	StringWriter scopeBuilder = p1 . hasDuplicateDeclarationSuppression ( reducePoints ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 14

167
Tree	StringWriter ko2D2 = getOrCreateName ( ( Class [] ) null ) ;
Code	StringWriter ko2D2 = getOrCreateName ( ( Class [] ) null ) ;
Distance : 8

168
Tree	ContainsExtraTypeInformation scopeBuilder = p1 . intersection ( root , this . isArrowAtTop ) ;
Code	ContainsExtraTypeInformation scopeBuilder = p1 . intersection ( root , this . isArrowAtTop ) ;
Distance : 9

169
Tree	TypeMockability scopeBuilder = p1 . intersection ( reducePoints ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Code	TypeMockability scopeBuilder = p1 . intersection ( reducePoints ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ) ;
Distance : 14

170
Tree	SparseGradient scopeBuilder = p1 . intersection ( root , this . isArrowAtTop ) ;
Code	SparseGradient scopeBuilder = p1 . intersection ( root , this . isArrowAtTop ) ;
Distance : 9

171
Tree	StringWriter tok2 = this . defaultItemURLGenerator . getNameNode () ;
Code	StringWriter tok2 = this . defaultItemURLGenerator . getNameNode () ;
Distance : 7

172
Tree	StringWriter tok2 = p1 . intersection ( root . getNameNode ( null ) ) ;
Code	StringWriter tok2 = p1 . intersection ( root . getNameNode ( null ) ) ;
Distance : 9

173
Tree	StringWriter scopeBuilder = getOrCreateName ( MathUtils.TWO_PI ) ;
Code	StringWriter scopeBuilder = getOrCreateName ( MathUtils.TWO_PI ) ;
Distance : 6

174
Tree	StringWriter scopeBuilder = this . delimMatcher . getNameNode () ;
Code	StringWriter scopeBuilder = this . delimMatcher . getNameNode () ;
Distance : 7

175
Tree	StringWriter tok2 = p1 . intersection ( root , this . isArrowAtTop ) ;
Code	StringWriter tok2 = p1 . intersection ( root , this . isArrowAtTop ) ;
Distance : 9

176
Tree	StringWriter scopeBuilder = getOrCreateName ( root . getScopedName ( null ) ) ;
Code	StringWriter scopeBuilder = getOrCreateName ( root . getScopedName ( null ) ) ;
Distance : 7

177
Tree	StringWriter tok2 = getOrCreateName ( v.data ) ;
Code	StringWriter tok2 = getOrCreateName ( v.data ) ;
Distance : 6

178
Tree	SparseGradient scopeBuilder = getOrCreateName ( v.data ) ;
Code	SparseGradient scopeBuilder = getOrCreateName ( v.data ) ;
Distance : 6

179
Tree	SparseGradient scopeBuilder = getOrCreateName ( root . copySelf ( null ) ) ;
Code	SparseGradient scopeBuilder = getOrCreateName ( root . copySelf ( null ) ) ;
Distance : 7

180
Tree	StringWriter scopeBuilder = getOrCreateName ( s . getScopedName ( null ) ) ;
Code	StringWriter scopeBuilder = getOrCreateName ( s . getScopedName ( null ) ) ;
Distance : 7

181
Tree	StringWriter tok2 = getOrCreateName ( root . copySelf ( null ) ) ;
Code	StringWriter tok2 = getOrCreateName ( root . copySelf ( null ) ) ;
Distance : 7

182
Tree	StringWriter scopeBuilder = getOrCreateName ( Cartesian1D.ZERO ) ;
Code	StringWriter scopeBuilder = getOrCreateName ( Cartesian1D.ZERO ) ;
Distance : 6

183
Tree	StringWriter sgY2 = getOrCreateName ( v.data ) ;
Code	StringWriter sgY2 = getOrCreateName ( v.data ) ;
Distance : 6

184
Tree	final StringWriter tok2 = p1 . intersection ( ( Class [] ) null ) ;
Code	final StringWriter tok2 = p1 . intersection ( ( Class [] ) null ) ;
Distance : 9

185
Tree	final StringWriter tok2 = p1 . intersection ( null ) ;
Code	final StringWriter tok2 = p1 . intersection ( null ) ;
Distance : 5

186
Tree	final DeclaredTypeRegistry tok2 = p1 . intersection ( ( Class [] ) null ) ;
Code	final DeclaredTypeRegistry tok2 = p1 . intersection ( ( Class [] ) null ) ;
Distance : 9

187
Tree	final DeclaredTypeRegistry tok2 = p1 . intersection ( null ) ;
Code	final DeclaredTypeRegistry tok2 = p1 . intersection ( null ) ;
Distance : 5

188
Tree	final StringWriter scopeBuilder = p1 . intersection ( ( Class [] ) null ) ;
Code	final StringWriter scopeBuilder = p1 . intersection ( ( Class [] ) null ) ;
Distance : 9

189
Tree	final StringWriter scopeBuilder = p1 . intersection ( null ) ;
Code	final StringWriter scopeBuilder = p1 . intersection ( null ) ;
Distance : 5

190
Tree	final DeclaredTypeRegistry scopeBuilder = p1 . intersection ( ( Class [] ) null ) ;
Code	final DeclaredTypeRegistry scopeBuilder = p1 . intersection ( ( Class [] ) null ) ;
Distance : 9

191
Tree	final StringWriter icme = p1 . intersection ( ( Class [] ) null ) ;
Code	final StringWriter icme = p1 . intersection ( ( Class [] ) null ) ;
Distance : 9

192
Tree	final StringWriter icme = p1 . intersection ( null ) ;
Code	final StringWriter icme = p1 . intersection ( null ) ;
Distance : 5

193
Tree	final DeclaredTypeRegistry icme = p1 . intersection ( ( Class [] ) null ) ;
Code	final DeclaredTypeRegistry icme = p1 . intersection ( ( Class [] ) null ) ;
Distance : 9

194
Tree	final DeclaredTypeRegistry icme = p1 . intersection ( null ) ;
Code	final DeclaredTypeRegistry icme = p1 . intersection ( null ) ;
Distance : 5

195
Tree	final StringWriter tok2 = p1 . hasDuplicateDeclarationSuppression ( ( Class [] ) null ) ;
Code	final StringWriter tok2 = p1 . hasDuplicateDeclarationSuppression ( ( Class [] ) null ) ;
Distance : 9

196
Tree	final StringWriter tok2 = p1 . hasDuplicateDeclarationSuppression ( null ) ;
Code	final StringWriter tok2 = p1 . hasDuplicateDeclarationSuppression ( null ) ;
Distance : 5

197
Tree	final DeclaredTypeRegistry scopeBuilder = p1 . intersection ( null ) ;
Code	final DeclaredTypeRegistry scopeBuilder = p1 . intersection ( null ) ;
Distance : 5

198
Tree	final DeclaredTypeRegistry tok2 = p1 . hasDuplicateDeclarationSuppression ( ( Class [] ) null ) ;
Code	final DeclaredTypeRegistry tok2 = p1 . hasDuplicateDeclarationSuppression ( ( Class [] ) null ) ;
Distance : 9

199
Tree	final DeclaredTypeRegistry tok2 = p1 . hasDuplicateDeclarationSuppression ( null ) ;
Code	final DeclaredTypeRegistry tok2 = p1 . hasDuplicateDeclarationSuppression ( null ) ;
Distance : 5

========================================================================


========================================================================
Example Number: 7
Parent Code is: 
{ return STRING_CONSTANT + toolTipText + STRING_CONSTANT ; }
-------------------------------------------------------------------------------
Child code is: 
{ return STRING_CONSTANT + ImageMapUtilities . htmlEscape ( toolTipText ) + STRING_CONSTANT ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (800{val=toolTipText}) (200{val=+}) (45{val=STRING_CONSTANT})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (800{val=ImageMapUtilities}) (235{val=.}) (802{val=htmlEscape}) (214{val=(}) (800{val=toolTipText}) (215{val=)})) (200{val=+}) (45{val=STRING_CONSTANT})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/10/parent/source_org_jfree_chart_imagemap_StandardToolTipTagFragmentGenerator.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return STRING_CONSTANT + nullText . getSimpleName () . getSimpleName ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + nullText . getSimpleName () . getSimpleName ( toolTipText ) + STRING_CONSTANT ; }
Distance : 5

1
Tree	{ return STRING_CONSTANT + nullText . getSimpleName ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + nullText . getSimpleName ( toolTipText ) + STRING_CONSTANT ; }
Distance : 2

2
Tree	{ return STRING_CONSTANT + readableInstant . getSimpleName ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + readableInstant . getSimpleName ( toolTipText ) + STRING_CONSTANT ; }
Distance : 2

3
Tree	{ return STRING_CONSTANT + readableInstant . getSimpleName () . getSimpleName ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + readableInstant . getSimpleName () . getSimpleName ( toolTipText ) + STRING_CONSTANT ; }
Distance : 5

4
Tree	{ return STRING_CONSTANT + classProvider . getSimpleName ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + classProvider . getSimpleName ( toolTipText ) + STRING_CONSTANT ; }
Distance : 2

5
Tree	{ return STRING_CONSTANT + classProvider . getSimpleName () . getSimpleName ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + classProvider . getSimpleName () . getSimpleName ( toolTipText ) + STRING_CONSTANT ; }
Distance : 5

6
Tree	{ return STRING_CONSTANT + toolTipText . getSimpleName ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . getSimpleName ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Distance : 4

7
Tree	{ return nextStrategy . nullToEmpty ( toolTipText , null , domainCrosshairStroke ) ; }
Code	{ return nextStrategy . nullToEmpty ( toolTipText , null , domainCrosshairStroke ) ; }
Distance : 9

8
Tree	{ return checkNotNull ( formatString , toolTipText , null , false , false ) ; }
Code	{ return checkNotNull ( formatString , toolTipText , null , false , false ) ; }
Distance : 12

9
Tree	{ return org.joda.time.gwt.util.Arrays . notNull ( toolTipText ) ; }
Code	{ return org.joda.time.gwt.util.Arrays . notNull ( toolTipText ) ; }
Distance : 6

10
Tree	{ return com.google.protobuf.GeneratedMessageV3 ; }
Code	{ return com.google.protobuf.GeneratedMessageV3 ; }
Distance : 10

11
Tree	{ return org.joda.time.gwt.util.Arrays . nullToEmpty ( toolTipText ) ; }
Code	{ return org.joda.time.gwt.util.Arrays . nullToEmpty ( toolTipText ) ; }
Distance : 6

12
Tree	{ return ( int ) toolTipText . clone ( toolTipText , toolTipText ) ; }
Code	{ return ( int ) toolTipText . clone ( toolTipText , toolTipText ) ; }
Distance : 8

13
Tree	{ return new Median ( MyMockMaker ) ; }
Code	{ return new Median ( MyMockMaker ) ; }
Distance : 8

14
Tree	{ return org.joda.time.gwt.util.Arrays . homoscedasticTTest ( toolTipText ) ; }
Code	{ return org.joda.time.gwt.util.Arrays . homoscedasticTTest ( toolTipText ) ; }
Distance : 6

15
Tree	{ return STRING_CONSTANT + domainCrosshairStroke . getSimpleName ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + domainCrosshairStroke . getSimpleName ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Distance : 4

16
Tree	{ return domainCrosshairStroke . nullToEmpty ( toolTipText , toolTipText ) ; }
Code	{ return domainCrosshairStroke . nullToEmpty ( toolTipText , toolTipText ) ; }
Distance : 7

17
Tree	{ return defaultString () . getComponentType ( toolTipText , toolTipText ) ; }
Code	{ return defaultString () . getComponentType ( toolTipText , toolTipText ) ; }
Distance : 7

18
Tree	{ return org.joda.time.gwt.util.Arrays ; }
Code	{ return org.joda.time.gwt.util.Arrays ; }
Distance : 10

19
Tree	{ return checkNotNull ( formatString , toolTipText ) ; }
Code	{ return checkNotNull ( formatString , toolTipText ) ; }
Distance : 8

20
Tree	{ return YEAR_MONTH . nullToEmpty ( toolTipText , toolTipText . getSimpleName ( sourceMapCache ) ) ; }
Code	{ return YEAR_MONTH . nullToEmpty ( toolTipText , toolTipText . getSimpleName ( sourceMapCache ) ) ; }
Distance : 11

21
Tree	{ return entry.map ; }
Code	{ return entry.map ; }
Distance : 10

22
Tree	{ return defaultString ( formatString , toolTipText ) ; }
Code	{ return defaultString ( formatString , toolTipText ) ; }
Distance : 8

23
Tree	{ return minImpl . nullToEmpty ( Any.ANY , toolTipText ) ; }
Code	{ return minImpl . nullToEmpty ( Any.ANY , toolTipText ) ; }
Distance : 8

24
Tree	{ return classProvider . nullToEmpty ( toolTipText , null , toolTipText ) ; }
Code	{ return classProvider . nullToEmpty ( toolTipText , null , toolTipText ) ; }
Distance : 9

25
Tree	{ return StringUtils.EMPTY ; }
Code	{ return StringUtils.EMPTY ; }
Distance : 10

26
Tree	{ return MOCKITO_PROXY_MARKER . nullToEmpty ( Any.ANY , toolTipText ) ; }
Code	{ return MOCKITO_PROXY_MARKER . nullToEmpty ( Any.ANY , toolTipText ) ; }
Distance : 8

27
Tree	{ return reportMatcher ( formatString , toolTipText ) ; }
Code	{ return reportMatcher ( formatString , toolTipText ) ; }
Distance : 8

28
Tree	{ return thiz . nullToEmpty ( Any.ANY , Any.ANY ) ; }
Code	{ return thiz . nullToEmpty ( Any.ANY , Any.ANY ) ; }
Distance : 8

29
Tree	{ return nextStrategy ; }
Code	{ return nextStrategy ; }
Distance : 10

30
Tree	{ return ( int ) toolTipText . getSimpleName ( toolTipText , toolTipText ) ; }
Code	{ return ( int ) toolTipText . getSimpleName ( toolTipText , toolTipText ) ; }
Distance : 8

31
Tree	{ return ! MOCKITO_PROXY_MARKER . safeMultiply ( toolTipText ) ; }
Code	{ return ! MOCKITO_PROXY_MARKER . safeMultiply ( toolTipText ) ; }
Distance : 6

32
Tree	{ return checkNotNull ( sample1 , toolTipText ) ; }
Code	{ return checkNotNull ( sample1 , toolTipText ) ; }
Distance : 8

33
Tree	{ return checkNotNull () . getName ( toolTipText , toolTipText ) ; }
Code	{ return checkNotNull () . getName ( toolTipText , toolTipText ) ; }
Distance : 7

34
Tree	{ return thiz . nullToEmpty ( toolTipText ) ; }
Code	{ return thiz . nullToEmpty ( toolTipText ) ; }
Distance : 6

35
Tree	{ return YEAR_MONTH . nullToEmpty ( toolTipText ) ; }
Code	{ return YEAR_MONTH . nullToEmpty ( toolTipText ) ; }
Distance : 6

36
Tree	{ return STRING_CONSTANT + domainCrosshairStroke . getSimpleName () . getSimpleName ( componentType ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + domainCrosshairStroke . getSimpleName () . getSimpleName ( componentType ) + STRING_CONSTANT ; }
Distance : 6

37
Tree	{ return new MatchersPrinter ( DEPRECATION_MESSAGE ) ; }
Code	{ return new MatchersPrinter ( DEPRECATION_MESSAGE ) ; }
Distance : 8

38
Tree	{ return ! MOCKITO_PROXY_MARKER . parseInto ( toolTipText ) ; }
Code	{ return ! MOCKITO_PROXY_MARKER . parseInto ( toolTipText ) ; }
Distance : 6

39
Tree	{ return defaultString ( sample1 , toolTipText ) ; }
Code	{ return defaultString ( sample1 , toolTipText ) ; }
Distance : 8

40
Tree	{ return YEAR_MONTH . nullToEmpty ( Any.ANY , Any.ANY ) ; }
Code	{ return YEAR_MONTH . nullToEmpty ( Any.ANY , Any.ANY ) ; }
Distance : 8

41
Tree	{ return minImpl . nullToEmpty ( toolTipText ) ; }
Code	{ return minImpl . nullToEmpty ( toolTipText ) ; }
Distance : 6

42
Tree	{ return MOCKITO_PROXY_MARKER . nullToEmpty ( toolTipText ) ; }
Code	{ return MOCKITO_PROXY_MARKER . nullToEmpty ( toolTipText ) ; }
Distance : 6

43
Tree	{ return minImpl . nullToEmpty ( toolTipText , toolTipText . getSimpleName ( sourceMapCache ) ) ; }
Code	{ return minImpl . nullToEmpty ( toolTipText , toolTipText . getSimpleName ( sourceMapCache ) ) ; }
Distance : 11

44
Tree	{ return ! MOCKITO_PROXY_MARKER . getTimeInstance ( toolTipText ) ; }
Code	{ return ! MOCKITO_PROXY_MARKER . getTimeInstance ( toolTipText ) ; }
Distance : 6

45
Tree	{ return checkNotNull ( sample1 , null , toolTipText ) ; }
Code	{ return checkNotNull ( sample1 , null , toolTipText ) ; }
Distance : 8

46
Tree	{ return checkNotNull ( sample1 , toolTipText , null , false , false ) ; }
Code	{ return checkNotNull ( sample1 , toolTipText , null , false , false ) ; }
Distance : 12

47
Tree	{ return STRING_CONSTANT + toolTipText . getSimpleName ( new Returns () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . getSimpleName ( new Returns () ) + STRING_CONSTANT ; }
Distance : 5

48
Tree	{ return STRING_CONSTANT + isEquals . getSimpleName ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + isEquals . getSimpleName ( toolTipText ) + STRING_CONSTANT ; }
Distance : 2

49
Tree	{ return TimeUnit.MILLISECONDS ; }
Code	{ return TimeUnit.MILLISECONDS ; }
Distance : 10

50
Tree	{ return STRING_CONSTANT + domainCrosshairStroke . getSimpleName ( new Object () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + domainCrosshairStroke . getSimpleName ( new Object () ) + STRING_CONSTANT ; }
Distance : 5

51
Tree	{ return nextStrategy . nullToEmpty ( toolTipText , null , toolTipText ) ; }
Code	{ return nextStrategy . nullToEmpty ( toolTipText , null , toolTipText ) ; }
Distance : 9

52
Tree	{ return org.joda.time.gwt.util.Arrays . notNull ( toolTipText , toolTipText , EMPTY ) ; }
Code	{ return org.joda.time.gwt.util.Arrays . notNull ( toolTipText , toolTipText , EMPTY ) ; }
Distance : 9

53
Tree	{ return STRING_CONSTANT + isEquals . getSimpleName ( new Object () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + isEquals . getSimpleName ( new Object () ) + STRING_CONSTANT ; }
Distance : 5

54
Tree	{ return classProvider ; }
Code	{ return classProvider ; }
Distance : 10

55
Tree	{ return STRING_CONSTANT + domainCrosshairStroke . getSimpleName ( new Returns () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + domainCrosshairStroke . getSimpleName ( new Returns () ) + STRING_CONSTANT ; }
Distance : 5

56
Tree	{ return STRING_CONSTANT + toolTipText . getSimpleName ( toolTipText , new Object ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . getSimpleName ( toolTipText , new Object ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 8

57
Tree	{ return reportMatcher () . getName ( toolTipText , toolTipText ) ; }
Code	{ return reportMatcher () . getName ( toolTipText , toolTipText ) ; }
Distance : 7

58
Tree	{ return reportMatcher ( formatString , null , toolTipText ) ; }
Code	{ return reportMatcher ( formatString , null , toolTipText ) ; }
Distance : 8

59
Tree	{ return reportMatcher ( formatString , toolTipText , null , false , false ) ; }
Code	{ return reportMatcher ( formatString , toolTipText , null , false , false ) ; }
Distance : 12

60
Tree	{ return nextStrategy . nullToEmpty ( toolTipText , toolTipText . getSimpleName ( sourceMapCache ) ) ; }
Code	{ return nextStrategy . nullToEmpty ( toolTipText , toolTipText . getSimpleName ( sourceMapCache ) ) ; }
Distance : 11

61
Tree	{ return STRING_CONSTANT + toolTipText . getSimpleName ( new Object () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . getSimpleName ( new Object () ) + STRING_CONSTANT ; }
Distance : 5

62
Tree	{ return checkNotNull () . getSimpleName ( toolTipText , toolTipText ) ; }
Code	{ return checkNotNull () . getSimpleName ( toolTipText , toolTipText ) ; }
Distance : 7

63
Tree	{ return nextStrategy . nullToEmpty ( toolTipText , toolTipText ) ; }
Code	{ return nextStrategy . nullToEmpty ( toolTipText , toolTipText ) ; }
Distance : 7

64
Tree	{ return thiz . nullToEmpty ( Any.ANY ) ; }
Code	{ return thiz . nullToEmpty ( Any.ANY ) ; }
Distance : 7

65
Tree	{ return org.joda.time.gwt.util.Arrays . nullToEmpty ( toolTipText , toolTipText , EMPTY ) ; }
Code	{ return org.joda.time.gwt.util.Arrays . nullToEmpty ( toolTipText , toolTipText , EMPTY ) ; }
Distance : 9

66
Tree	{ return domainCrosshairStroke . nullToEmpty ( Any.ANY , toolTipText ) ; }
Code	{ return domainCrosshairStroke . nullToEmpty ( Any.ANY , toolTipText ) ; }
Distance : 8

67
Tree	{ return false ; }
Code	{ return false ; }
Distance : 10

68
Tree	{ return thiz . nullToEmpty ( toolTipText , toolTipText ) ; }
Code	{ return thiz . nullToEmpty ( toolTipText , toolTipText ) ; }
Distance : 7

69
Tree	{ return classProvider . nullToEmpty ( Any.ANY , toolTipText ) ; }
Code	{ return classProvider . nullToEmpty ( Any.ANY , toolTipText ) ; }
Distance : 8

70
Tree	{ return YEAR_MONTH . nullToEmpty ( Any.ANY ) ; }
Code	{ return YEAR_MONTH . nullToEmpty ( Any.ANY ) ; }
Distance : 7

71
Tree	{ return iConverters.length ; }
Code	{ return iConverters.length ; }
Distance : 10

72
Tree	{ return nextStrategy . nullToEmpty ( Any.ANY , toolTipText ) ; }
Code	{ return nextStrategy . nullToEmpty ( Any.ANY , toolTipText ) ; }
Distance : 8

73
Tree	{ return classProvider . nullToEmpty ( Any.ANY ) ; }
Code	{ return classProvider . nullToEmpty ( Any.ANY ) ; }
Distance : 7

74
Tree	{ return YEAR_MONTH . nullToEmpty ( toolTipText , toolTipText ) ; }
Code	{ return YEAR_MONTH . nullToEmpty ( toolTipText , toolTipText ) ; }
Distance : 7

75
Tree	{ return minImpl . nullToEmpty ( Any.ANY ) ; }
Code	{ return minImpl . nullToEmpty ( Any.ANY ) ; }
Distance : 7

76
Tree	{ return checkNotNull ( EXTERNS , toolTipText ) ; }
Code	{ return checkNotNull ( EXTERNS , toolTipText ) ; }
Distance : 8

77
Tree	{ return defaultString ( formatString , null , toolTipText ) ; }
Code	{ return defaultString ( formatString , null , toolTipText ) ; }
Distance : 8

78
Tree	{ return defaultString ( formatString , toolTipText , null , false , false ) ; }
Code	{ return defaultString ( formatString , toolTipText , null , false , false ) ; }
Distance : 12

79
Tree	{ return defaultString ( EXTERNS , toolTipText ) ; }
Code	{ return defaultString ( EXTERNS , toolTipText ) ; }
Distance : 8

80
Tree	{ return minImpl . nullToEmpty ( toolTipText , toolTipText ) ; }
Code	{ return minImpl . nullToEmpty ( toolTipText , toolTipText ) ; }
Distance : 7

81
Tree	{ return MOCKITO_PROXY_MARKER . nullToEmpty ( Any.ANY ) ; }
Code	{ return MOCKITO_PROXY_MARKER . nullToEmpty ( Any.ANY ) ; }
Distance : 7

82
Tree	{ return defaultString () . getSimpleName ( toolTipText , toolTipText ) ; }
Code	{ return defaultString () . getSimpleName ( toolTipText , toolTipText ) ; }
Distance : 7

83
Tree	{ return org.joda.time.gwt.util.Arrays . tTest ( toolTipText , toolTipText , EMPTY ) ; }
Code	{ return org.joda.time.gwt.util.Arrays . tTest ( toolTipText , toolTipText , EMPTY ) ; }
Distance : 9

84
Tree	{ return domainCrosshairStroke ; }
Code	{ return domainCrosshairStroke ; }
Distance : 10

85
Tree	{ return nextStrategy . nullToEmpty ( Any.ANY , StringUtils.EMPTY ) ; }
Code	{ return nextStrategy . nullToEmpty ( Any.ANY , StringUtils.EMPTY ) ; }
Distance : 8

86
Tree	{ return minImpl . nullToEmpty ( Any.ANY , Any.ANY ) ; }
Code	{ return minImpl . nullToEmpty ( Any.ANY , Any.ANY ) ; }
Distance : 8

87
Tree	{ return thiz ; }
Code	{ return thiz ; }
Distance : 10

88
Tree	{ return org.joda.time.gwt.util.Arrays . defaultString ( toolTipText ) ; }
Code	{ return org.joda.time.gwt.util.Arrays . defaultString ( toolTipText ) ; }
Distance : 6

89
Tree	{ return defaultString () . getName ( toolTipText , toolTipText ) ; }
Code	{ return defaultString () . getName ( toolTipText , toolTipText ) ; }
Distance : 7

90
Tree	{ return directions ; }
Code	{ return directions ; }
Distance : 10

91
Tree	{ return YEAR_MONTH ; }
Code	{ return YEAR_MONTH ; }
Distance : 10

92
Tree	{ return domainCrosshairStroke . nullToEmpty ( toolTipText ) ; }
Code	{ return domainCrosshairStroke . nullToEmpty ( toolTipText ) ; }
Distance : 6

93
Tree	{ return YEAR_MONTH . nullToEmpty ( toolTipText , null , toolTipText ) ; }
Code	{ return YEAR_MONTH . nullToEmpty ( toolTipText , null , toolTipText ) ; }
Distance : 9

94
Tree	{ return MOCKITO_PROXY_MARKER . nullToEmpty ( Any.ANY , Any.ANY ) ; }
Code	{ return MOCKITO_PROXY_MARKER . nullToEmpty ( Any.ANY , Any.ANY ) ; }
Distance : 8

95
Tree	{ return anyObject ( formatString , toolTipText ) ; }
Code	{ return anyObject ( formatString , toolTipText ) ; }
Distance : 8

96
Tree	{ return minImpl . nullToEmpty ( toolTipText , null , toolTipText ) ; }
Code	{ return minImpl . nullToEmpty ( toolTipText , null , toolTipText ) ; }
Distance : 9

97
Tree	{ return nextStrategy . getTimeInstance ( toolTipText ) ; }
Code	{ return nextStrategy . getTimeInstance ( toolTipText ) ; }
Distance : 6

98
Tree	{ return nextStrategy . nullToEmpty ( toolTipText , toolTipText . getSimpleName ( path ) ) ; }
Code	{ return nextStrategy . nullToEmpty ( toolTipText , toolTipText . getSimpleName ( path ) ) ; }
Distance : 11

99
Tree	{ return nextStrategy . nullToEmpty ( toolTipText ) ; }
Code	{ return nextStrategy . nullToEmpty ( toolTipText ) ; }
Distance : 6

100
Tree	{ return org.joda.time.gwt.util.Arrays . getDateTimeInstance ( toolTipText , toolTipText , EMPTY ) ; }
Code	{ return org.joda.time.gwt.util.Arrays . getDateTimeInstance ( toolTipText , toolTipText , EMPTY ) ; }
Distance : 9

101
Tree	{ return STRING_CONSTANT + toolTipText . getSimpleName () . getSimpleName ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . getSimpleName () . getSimpleName ( toolTipText ) + STRING_CONSTANT ; }
Distance : 5

102
Tree	{ return MOCKITO_PROXY_MARKER . nullToEmpty ( toolTipText , toolTipText . getSimpleName ( sourceMapCache ) ) ; }
Code	{ return MOCKITO_PROXY_MARKER . nullToEmpty ( toolTipText , toolTipText . getSimpleName ( sourceMapCache ) ) ; }
Distance : 11

103
Tree	{ return STRING_CONSTANT + domainCrosshairStroke . getSimpleName ( toolTipText , new Object ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + domainCrosshairStroke . getSimpleName ( toolTipText , new Object ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 8

104
Tree	{ return org.joda.time.gwt.util.Arrays . nullToEmpty ( toolTipText , toolTipText , Object ) ; }
Code	{ return org.joda.time.gwt.util.Arrays . nullToEmpty ( toolTipText , toolTipText , Object ) ; }
Distance : 9

105
Tree	{ return anyObject ( formatString , toolTipText , null , false , false ) ; }
Code	{ return anyObject ( formatString , toolTipText , null , false , false ) ; }
Distance : 12

106
Tree	{ return nextStrategy . getTimeInstance ( Any.ANY ) ; }
Code	{ return nextStrategy . getTimeInstance ( Any.ANY ) ; }
Distance : 7

107
Tree	{ return new MatchersPrinter ( MyMockMaker ) ; }
Code	{ return new MatchersPrinter ( MyMockMaker ) ; }
Distance : 8

108
Tree	{ return minImpl ; }
Code	{ return minImpl ; }
Distance : 10

109
Tree	{ return MOCKITO_PROXY_MARKER . nullToEmpty ( toolTipText , toolTipText ) ; }
Code	{ return MOCKITO_PROXY_MARKER . nullToEmpty ( toolTipText , toolTipText ) ; }
Distance : 7

110
Tree	{ return nextStrategy . nullToEmpty ( Any.ANY , Any.ANY ) ; }
Code	{ return nextStrategy . nullToEmpty ( Any.ANY , Any.ANY ) ; }
Distance : 8

111
Tree	{ return org.joda.time.gwt.util.Arrays . notNull ( toolTipText , toolTipText , Object ) ; }
Code	{ return org.joda.time.gwt.util.Arrays . notNull ( toolTipText , toolTipText , Object ) ; }
Distance : 9

112
Tree	{ return ! YEAR_MONTH . returnFor ( toolTipText ) ; }
Code	{ return ! YEAR_MONTH . returnFor ( toolTipText ) ; }
Distance : 6

113
Tree	{ return STRING_CONSTANT + nullText . getSimpleName ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + nullText . getSimpleName ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Distance : 4

114
Tree	{ return org.joda.time.gwt.util.Arrays . getTimeInstance ( toolTipText ) ; }
Code	{ return org.joda.time.gwt.util.Arrays . getTimeInstance ( toolTipText ) ; }
Distance : 6

115
Tree	{ return STRING_CONSTANT + domainCrosshairStroke . getSimpleName ( toolTipText , new Object ( componentType ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + domainCrosshairStroke . getSimpleName ( toolTipText , new Object ( componentType ) ) + STRING_CONSTANT ; }
Distance : 8

116
Tree	{ return nextStrategy . nullToEmpty ( Any.ANY ) ; }
Code	{ return nextStrategy . nullToEmpty ( Any.ANY ) ; }
Distance : 7

117
Tree	{ return defaultString ( sample1 , null , toolTipText ) ; }
Code	{ return defaultString ( sample1 , null , toolTipText ) ; }
Distance : 8

118
Tree	{ return classProvider . nullToEmpty ( toolTipText , toolTipText . getSimpleName ( sourceMapCache ) ) ; }
Code	{ return classProvider . nullToEmpty ( toolTipText , toolTipText . getSimpleName ( sourceMapCache ) ) ; }
Distance : 11

119
Tree	{ return defaultString ( sample1 , toolTipText , null , false , false ) ; }
Code	{ return defaultString ( sample1 , toolTipText , null , false , false ) ; }
Distance : 12

120
Tree	{ return ( int ) domainCrosshairStroke . clone ( toolTipText , toolTipText ) ; }
Code	{ return ( int ) domainCrosshairStroke . clone ( toolTipText , toolTipText ) ; }
Distance : 8

121
Tree	{ return new SerializableBoundedType ( MyMockMaker ) ; }
Code	{ return new SerializableBoundedType ( MyMockMaker ) ; }
Distance : 8

122
Tree	{ return ! YEAR_MONTH . safeMultiply ( toolTipText ) ; }
Code	{ return ! YEAR_MONTH . safeMultiply ( toolTipText ) ; }
Distance : 6

123
Tree	{ return org.joda.time.gwt.util.Arrays . tTest ( toolTipText ) ; }
Code	{ return org.joda.time.gwt.util.Arrays . tTest ( toolTipText ) ; }
Distance : 6

124
Tree	{ return classProvider . nullToEmpty ( toolTipText , toolTipText ) ; }
Code	{ return classProvider . nullToEmpty ( toolTipText , toolTipText ) ; }
Distance : 7

125
Tree	{ return classProvider . nullToEmpty ( toolTipText ) ; }
Code	{ return classProvider . nullToEmpty ( toolTipText ) ; }
Distance : 6

126
Tree	{ return thiz . nullToEmpty ( toolTipText , null , toolTipText ) ; }
Code	{ return thiz . nullToEmpty ( toolTipText , null , toolTipText ) ; }
Distance : 9

127
Tree	{ return new HashMap ( MyMockMaker ) ; }
Code	{ return new HashMap ( MyMockMaker ) ; }
Distance : 8

128
Tree	{ return ! YEAR_MONTH . parseInto ( toolTipText ) ; }
Code	{ return ! YEAR_MONTH . parseInto ( toolTipText ) ; }
Distance : 6

129
Tree	{ return MOCKITO_PROXY_MARKER ; }
Code	{ return MOCKITO_PROXY_MARKER ; }
Distance : 10

130
Tree	{ return ! YEAR_MONTH . getTimeInstance ( toolTipText ) ; }
Code	{ return ! YEAR_MONTH . getTimeInstance ( toolTipText ) ; }
Distance : 6

131
Tree	{ return STRING_CONSTANT + domainCrosshairStroke . getSimpleName () . getSimpleName ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + domainCrosshairStroke . getSimpleName () . getSimpleName ( toolTipText ) + STRING_CONSTANT ; }
Distance : 5

132
Tree	{ return org.joda.time.gwt.util.Arrays . getDateTimeInstance ( toolTipText ) ; }
Code	{ return org.joda.time.gwt.util.Arrays . getDateTimeInstance ( toolTipText ) ; }
Distance : 6

133
Tree	{ return thiz . nullToEmpty ( Any.ANY , toolTipText ) ; }
Code	{ return thiz . nullToEmpty ( Any.ANY , toolTipText ) ; }
Distance : 8

134
Tree	{ return YEAR_MONTH . nullToEmpty ( Any.ANY , toolTipText ) ; }
Code	{ return YEAR_MONTH . nullToEmpty ( Any.ANY , toolTipText ) ; }
Distance : 8

135
Tree	{ return nextStrategy . getTimeInstance ( toolTipText , toolTipText ) ; }
Code	{ return nextStrategy . getTimeInstance ( toolTipText , toolTipText ) ; }
Distance : 7

136
Tree	{ return nextStrategy . getTimeInstance ( Any.ANY , toolTipText ) ; }
Code	{ return nextStrategy . getTimeInstance ( Any.ANY , toolTipText ) ; }
Distance : 8

137
Tree	{ return new MatchersPrinter ( StrLookup ) ; }
Code	{ return new MatchersPrinter ( StrLookup ) ; }
Distance : 8

138
Tree	{ return new MatchersPrinter ( commonTypes ) ; }
Code	{ return new MatchersPrinter ( commonTypes ) ; }
Distance : 8

139
Tree	{ return STRING_CONSTANT + isEquals . getSimpleName ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + isEquals . getSimpleName ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Distance : 4

140
Tree	{ return ( int ) domainCrosshairStroke . getSimpleName ( toolTipText , toolTipText ) ; }
Code	{ return ( int ) domainCrosshairStroke . getSimpleName ( toolTipText , toolTipText ) ; }
Distance : 8

141
Tree	{ return MOCKITO_PROXY_MARKER . nullToEmpty ( toolTipText , null , toolTipText ) ; }
Code	{ return MOCKITO_PROXY_MARKER . nullToEmpty ( toolTipText , null , toolTipText ) ; }
Distance : 9

142
Tree	{ return defaultString ( EXTERNS , null , toolTipText ) ; }
Code	{ return defaultString ( EXTERNS , null , toolTipText ) ; }
Distance : 8

143
Tree	{ return checkNotNull () . getComponentType ( toolTipText , toolTipText ) ; }
Code	{ return checkNotNull () . getComponentType ( toolTipText , toolTipText ) ; }
Distance : 7

144
Tree	{ return domainCrosshairStroke . nullToEmpty ( Any.ANY ) ; }
Code	{ return domainCrosshairStroke . nullToEmpty ( Any.ANY ) ; }
Distance : 7

145
Tree	{ return nextStrategy . nullToEmpty ( Any.ANY , iValues.length ) ; }
Code	{ return nextStrategy . nullToEmpty ( Any.ANY , iValues.length ) ; }
Distance : 8

146
Tree	{ return reportMatcher () . getSimpleName ( toolTipText , toolTipText ) ; }
Code	{ return reportMatcher () . getSimpleName ( toolTipText , toolTipText ) ; }
Distance : 7

147
Tree	{ return new ThreadSafeDelegatingErrorManager ( MyMockMaker ) ; }
Code	{ return new ThreadSafeDelegatingErrorManager ( MyMockMaker ) ; }
Distance : 8

148
Tree	{ return nextStrategy . nullToEmpty ( Any.ANY , System.out ) ; }
Code	{ return nextStrategy . nullToEmpty ( Any.ANY , System.out ) ; }
Distance : 8

149
Tree	{ return STRING_CONSTANT + classProvider . getSimpleName ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + classProvider . getSimpleName ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Distance : 4

150
Tree	{ return org.joda.time.gwt.util.Arrays . homoscedasticTTest ( toolTipText , toolTipText , EMPTY ) ; }
Code	{ return org.joda.time.gwt.util.Arrays . homoscedasticTTest ( toolTipText , toolTipText , EMPTY ) ; }
Distance : 9

151
Tree	{ return org.joda.time.gwt.util.Arrays . getDateTimeInstance ( toolTipText , toolTipText , Object ) ; }
Code	{ return org.joda.time.gwt.util.Arrays . getDateTimeInstance ( toolTipText , toolTipText , Object ) ; }
Distance : 9

152
Tree	{ return ! MOCKITO_PROXY_MARKER . returnFor ( toolTipText ) ; }
Code	{ return ! MOCKITO_PROXY_MARKER . returnFor ( toolTipText ) ; }
Distance : 6

153
Tree	{ return nextStrategy . getTimeInstance ( toolTipText , toolTipText . getSimpleName ( sourceMapCache ) ) ; }
Code	{ return nextStrategy . getTimeInstance ( toolTipText , toolTipText . getSimpleName ( sourceMapCache ) ) ; }
Distance : 11

154
Tree	{ return checkNotNull ( EXTERNS , null , toolTipText ) ; }
Code	{ return checkNotNull ( EXTERNS , null , toolTipText ) ; }
Distance : 8

155
Tree	{ return STRING_CONSTANT + domainCrosshairStroke . getSimpleName ( new Returns ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + domainCrosshairStroke . getSimpleName ( new Returns ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 6

156
Tree	{ return STRING_CONSTANT + domainCrosshairStroke . getSimpleName ( new Object ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + domainCrosshairStroke . getSimpleName ( new Object ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 6

157
Tree	{ return thiz . nullToEmpty ( toolTipText , toolTipText . getSimpleName ( sourceMapCache ) ) ; }
Code	{ return thiz . nullToEmpty ( toolTipText , toolTipText . getSimpleName ( sourceMapCache ) ) ; }
Distance : 11

158
Tree	{ return nextStrategy . getTimeInstance ( toolTipText , null , toolTipText ) ; }
Code	{ return nextStrategy . getTimeInstance ( toolTipText , null , toolTipText ) ; }
Distance : 9

159
Tree	{ return org.joda.time.gwt.util.Arrays . returnFor ( toolTipText ) ; }
Code	{ return org.joda.time.gwt.util.Arrays . returnFor ( toolTipText ) ; }
Distance : 6

160
Tree	{ return STRING_CONSTANT + isEquals . getSimpleName ( new Returns () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + isEquals . getSimpleName ( new Returns () ) + STRING_CONSTANT ; }
Distance : 5

161
Tree	{ return STRING_CONSTANT + readableInstant . getSimpleName ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + readableInstant . getSimpleName ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Distance : 4

162
Tree	{ return CompilerOptions.J2clPassMode ; }
Code	{ return CompilerOptions.J2clPassMode ; }
Distance : 10

163
Tree	{ return checkNotNull ( EXTERNS , toolTipText , null , false , false ) ; }
Code	{ return checkNotNull ( EXTERNS , toolTipText , null , false , false ) ; }
Distance : 12

164
Tree	{ return defaultString ( EXTERNS , toolTipText , null , false , false ) ; }
Code	{ return defaultString ( EXTERNS , toolTipText , null , false , false ) ; }
Distance : 12

165
Tree	{ return ( int ) isEquals . clone ( toolTipText , toolTipText ) ; }
Code	{ return ( int ) isEquals . clone ( toolTipText , toolTipText ) ; }
Distance : 8

166
Tree	{ return STRING_CONSTANT + domainCrosshairStroke . getSimpleName ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + domainCrosshairStroke . getSimpleName ( toolTipText ) + STRING_CONSTANT ; }
Distance : 2

167
Tree	{ return ( int ) isEquals . getSimpleName ( toolTipText , toolTipText ) ; }
Code	{ return ( int ) isEquals . getSimpleName ( toolTipText , toolTipText ) ; }
Distance : 8

168
Tree	{ return ( int ) variableResolver . clone ( toolTipText , toolTipText ) ; }
Code	{ return ( int ) variableResolver . clone ( toolTipText , toolTipText ) ; }
Distance : 8

169
Tree	{ return ( int ) variableResolver . getSimpleName ( toolTipText , toolTipText ) ; }
Code	{ return ( int ) variableResolver . getSimpleName ( toolTipText , toolTipText ) ; }
Distance : 8

170
Tree	{ return STRING_CONSTANT + shape . getSimpleName ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + shape . getSimpleName ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Distance : 4

171
Tree	{ return STRING_CONSTANT + YEAR_MONTH . getSimpleName ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + YEAR_MONTH . getSimpleName ( toolTipText , toolTipText ) + STRING_CONSTANT ; }
Distance : 4

172
Tree	{ return checkNotNull ( formatString , null , toolTipText ) ; }
Code	{ return checkNotNull ( formatString , null , toolTipText ) ; }
Distance : 8

173
Tree	{ return true ; }
Code	{ return true ; }
Distance : 10

174
Tree	{ return STRING_CONSTANT + isEquals . getSimpleName ( toolTipText , new Object ( componentType ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + isEquals . getSimpleName ( toolTipText , new Object ( componentType ) ) + STRING_CONSTANT ; }
Distance : 8

175
Tree	{ return STRING_CONSTANT + toolTipText . getSimpleName ( toolTipText , new Object ( componentType ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . getSimpleName ( toolTipText , new Object ( componentType ) ) + STRING_CONSTANT ; }
Distance : 8

176
Tree	{ return STRING_CONSTANT + isEquals . getSimpleName ( toolTipText , new Object ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + isEquals . getSimpleName ( toolTipText , new Object ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 8

177
Tree	{ return STRING_CONSTANT + isEquals . getSimpleName () . getSimpleName ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + isEquals . getSimpleName () . getSimpleName ( toolTipText ) + STRING_CONSTANT ; }
Distance : 5

178
Tree	{ return anyObject ( formatString , null , toolTipText ) ; }
Code	{ return anyObject ( formatString , null , toolTipText ) ; }
Distance : 8

179
Tree	{ return DecompositionType.UNDECOMPOSABLE ; }
Code	{ return DecompositionType.UNDECOMPOSABLE ; }
Distance : 10

180
Tree	{ return STRING_CONSTANT + domainCrosshairStroke . getSimpleName ( toolTipText , new Object ( domainCrosshairStroke ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + domainCrosshairStroke . getSimpleName ( toolTipText , new Object ( domainCrosshairStroke ) ) + STRING_CONSTANT ; }
Distance : 8

181
Tree	{ return STRING_CONSTANT + isEquals . getSimpleName ( new Returns ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + isEquals . getSimpleName ( new Returns ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 6

182
Tree	{ return STRING_CONSTANT + isEquals . getSimpleName ( toolTipText , new Object ( domainCrosshairStroke ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + isEquals . getSimpleName ( toolTipText , new Object ( domainCrosshairStroke ) ) + STRING_CONSTANT ; }
Distance : 8

183
Tree	{ return STRING_CONSTANT + isEquals . getSimpleName ( new Object ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + isEquals . getSimpleName ( new Object ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 6

184
Tree	{ return STRING_CONSTANT + nullText . getSimpleName ( new Object () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + nullText . getSimpleName ( new Object () ) + STRING_CONSTANT ; }
Distance : 5

185
Tree	{ return STRING_CONSTANT + domainCrosshairStroke . getSimpleName ( new Object ( componentType ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + domainCrosshairStroke . getSimpleName ( new Object ( componentType ) ) + STRING_CONSTANT ; }
Distance : 7

186
Tree	{ return STRING_CONSTANT + toolTipText . getSimpleName ( new Returns ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . getSimpleName ( new Returns ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 6

187
Tree	{ return STRING_CONSTANT + toolTipText . getSimpleName ( new Object ( toolTipText ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . getSimpleName ( new Object ( toolTipText ) ) + STRING_CONSTANT ; }
Distance : 6

188
Tree	{ return STRING_CONSTANT + classProvider . getSimpleName ( new Object () ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + classProvider . getSimpleName ( new Object () ) + STRING_CONSTANT ; }
Distance : 5

189
Tree	{ return STRING_CONSTANT + isEquals . getSimpleName ( new Object ( componentType ) ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + isEquals . getSimpleName ( new Object ( componentType ) ) + STRING_CONSTANT ; }
Distance : 7

190
Tree	{ return STRING_CONSTANT + toolTipText . getSimpleName ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + toolTipText . getSimpleName ( toolTipText ) + STRING_CONSTANT ; }
Distance : 2

191
Tree	{ return STRING_CONSTANT + shape . getSimpleName ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + shape . getSimpleName ( toolTipText ) + STRING_CONSTANT ; }
Distance : 2

192
Tree	{ return STRING_CONSTANT + YEAR_MONTH . getSimpleName ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + YEAR_MONTH . getSimpleName ( toolTipText ) + STRING_CONSTANT ; }
Distance : 2

193
Tree	{ return false ; } {}
Code	{ return false ; } {}
Distance : 11

194
Tree	{ return false ; } MathRuntimeException
Code	{ return false ; } MathRuntimeException
Distance : 11

195
Tree	{ return false ; } Class
Code	{ return false ; } Class
Distance : 11

196
Tree	{ return false ; } Test
Code	{ return false ; } Test
Distance : 11

197
Tree	{ return false ; } f
Code	{ return false ; } f
Distance : 11

198
Tree	{ return STRING_CONSTANT + shape . getSimpleName () . getSimpleName ( toolTipText ) + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + shape . getSimpleName () . getSimpleName ( toolTipText ) + STRING_CONSTANT ; }
Distance : 5

199
Tree	{ return false ; } ParamChecks
Code	{ return false ; } ParamChecks
Distance : 11

========================================================================


========================================================================
Example Number: 8
Parent Code is: 
{ this ( time , RegularTimePeriod.DEFAULT_TIME_ZONE , Locale . getDefault () ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ this ( time , zone , Locale . getDefault () ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (17 (315{val=this}) (214{val=(}) (800{val=time}) (234{val=,}) (40{val=RegularTimePeriod.DEFAULT_TIME_ZONE}) (234{val=,}) (32 (800{val=Locale}) (235{val=.}) (802{val=getDefault}) (216{val=()})) (215{val=)}) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (17 (315{val=this}) (214{val=(}) (800{val=time}) (234{val=,}) (800{val=zone}) (234{val=,}) (32 (800{val=Locale}) (235{val=.}) (802{val=getDefault}) (216{val=()})) (215{val=)}) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/8/parent/source_org_jfree_data_time_Week.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ this ( LocalizedFormats.NON_SQUARE_MATRIX , time , Locale ) ; }
Code	{ this ( LocalizedFormats.NON_SQUARE_MATRIX , time , Locale ) ; }
Distance : 5

1
Tree	{ this ( LocalizedFormats.SAME_SIGN_AT_ENDPOINTS , time , Locale ) ; }
Code	{ this ( LocalizedFormats.SAME_SIGN_AT_ENDPOINTS , time , Locale ) ; }
Distance : 5

2
Tree	{ this ( time . weekOfWeekyear () , Locale . getDefault () ) ; }
Code	{ this ( time . weekOfWeekyear () , Locale . getDefault () ) ; }
Distance : 3

3
Tree	{ super ( time , REACHABLE , Locale , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , REACHABLE , Locale , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 8

4
Tree	{ super ( time , includeConstant , tolerance , Locale . getDefault () ) ; }
Code	{ super ( time , includeConstant , tolerance , Locale . getDefault () ) ; }
Distance : 4

5
Tree	{ this ( time , includeConstant , Locale , Locale , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , includeConstant , Locale , Locale , Locale , Locale , Locale . getDefault () ) ; }
Distance : 9

6
Tree	{ super ( time , includeConstant , cos , Locale . getDefault () ) ; }
Code	{ super ( time , includeConstant , cos , Locale . getDefault () ) ; }
Distance : 4

7
Tree	{ super ( time . weekyear () , STRING_CONSTANT , Locale . getDefault () ) ; super }
Code	{ super ( time . weekyear () , STRING_CONSTANT , Locale . getDefault () ) ; super }
Distance : 6

8
Tree	{ super ( time , REACHABLE . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , REACHABLE . getDefault () ) ; Locale = Locale ; }
Distance : 8

9
Tree	{ this ( time , includeConstant , tolerance , Locale , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , includeConstant , tolerance , Locale , Locale , Locale , Locale . getDefault () ) ; }
Distance : 9

10
Tree	{ this ( time , denominatorDegreesOfFreedom , Locale , Locale , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , denominatorDegreesOfFreedom , Locale , Locale , Locale , Locale , Locale . getDefault () ) ; }
Distance : 9

11
Tree	{ this ( time , DEFAULT_EPSILON . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , DEFAULT_EPSILON . getDefault () , Locale . getDefault () ) ; }
Distance : 4

12
Tree	{ this ( time , requirement . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , requirement . getDefault () , Locale . getDefault () ) ; }
Distance : 4

13
Tree	{ super ( time , DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE , Locale , Locale . getDefault () ) ; }
Code	{ super ( time , DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE , Locale , Locale . getDefault () ) ; }
Distance : 4

14
Tree	{ super(); time = decoded ; }
Code	{ super(); time = decoded ; }
Distance : 10

15
Tree	{ this ( time , denominatorDegreesOfFreedom . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , denominatorDegreesOfFreedom . getDefault () , Locale . getDefault () ) ; }
Distance : 4

16
Tree	{ this ( time . nextF () , Locale ) ; }
Code	{ this ( time . nextF () , Locale ) ; }
Distance : 6

17
Tree	{ this ( time , generatePseudoNames . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , generatePseudoNames . getDefault () , Locale . getDefault () ) ; }
Distance : 4

18
Tree	{ super ( time . nextF () , STRING_CONSTANT , Locale . getDefault () ) ; super }
Code	{ super ( time . nextF () , STRING_CONSTANT , Locale . getDefault () ) ; super }
Distance : 6

19
Tree	{ super ( time . weekOfWeekyear () ) ; Locale = Locale ; }
Code	{ super ( time . weekOfWeekyear () ) ; Locale = Locale ; }
Distance : 9

20
Tree	{ this ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW , time , Locale ) ; }
Code	{ this ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW , time , Locale ) ; }
Distance : 5

21
Tree	{ time = empiricalDistribution2 ; }
Code	{ time = empiricalDistribution2 ; }
Distance : 10

22
Tree	{ super ( time . weekyear () ) ; Locale = Locale ; }
Code	{ super ( time . weekyear () ) ; Locale = Locale ; }
Distance : 9

23
Tree	{ this ( time , includeConstant , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , includeConstant , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

24
Tree	{ this ( time . nextT () , Locale ) ; }
Code	{ this ( time . nextT () , Locale ) ; }
Distance : 6

25
Tree	{ this ( time . copySelf () , Locale ) ; }
Code	{ this ( time . copySelf () , Locale ) ; }
Distance : 6

26
Tree	{ this ( time , DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

27
Tree	{ this ( time . isLoggable () , Locale . getDefault () ) ; }
Code	{ this ( time . isLoggable () , Locale . getDefault () ) ; }
Distance : 3

28
Tree	{ this ( time , includeConstant . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , includeConstant . getDefault () , Locale . getDefault () ) ; }
Distance : 4

29
Tree	{ this ( time , REACHABLE , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , REACHABLE , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

30
Tree	{ this ( time . toTimePeriod () , Locale . getDefault () ) ; }
Code	{ this ( time . toTimePeriod () , Locale . getDefault () ) ; }
Distance : 3

31
Tree	{ this ( time , DEFAULT_EPSILON , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , DEFAULT_EPSILON , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

32
Tree	{ this ( time , denominatorDegreesOfFreedom , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , denominatorDegreesOfFreedom , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

33
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , time . getDefault () ) ; Locale = Locale ; }
Distance : 8

34
Tree	{ time = eventCounts ; }
Code	{ time = eventCounts ; }
Distance : 10

35
Tree	{ this ( LocalizedFormats.DUPLICATED_ABSCISSA , time , Locale ) ; }
Code	{ this ( LocalizedFormats.DUPLICATED_ABSCISSA , time , Locale ) ; }
Distance : 5

36
Tree	{ super ( time , includeConstant , cos , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , includeConstant , cos , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 8

37
Tree	{ this ( time , requirement , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , requirement , Locale , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

38
Tree	{ super ( time , requirement . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , requirement . getDefault () ) ; Locale = Locale ; }
Distance : 8

39
Tree	{ super ( time , includeConstant , tolerance , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , includeConstant , tolerance , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 8

40
Tree	{ this ( time , DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE , Locale , Locale , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE , Locale , Locale , Locale , Locale , Locale . getDefault () ) ; }
Distance : 9

41
Tree	{ this ( time , includeConstant , cos , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , includeConstant , cos , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

42
Tree	{ super ( time . copySelf () , STRING_CONSTANT , Locale . getDefault () ) ; super }
Code	{ super ( time . copySelf () , STRING_CONSTANT , Locale . getDefault () ) ; super }
Distance : 6

43
Tree	{ this ( time . nextF () , Locale . getDefault () ) ; }
Code	{ this ( time . nextF () , Locale . getDefault () ) ; }
Distance : 3

44
Tree	{ super ( time , DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE . getDefault () ) ; Locale = Locale ; }
Distance : 8

45
Tree	{ this ( time , false ) ; }
Code	{ this ( time , false ) ; }
Distance : 6

46
Tree	{ super ( time , includeConstant , Locale , wrong . getDefault () ) ; }
Code	{ super ( time , includeConstant , Locale , wrong . getDefault () ) ; }
Distance : 4

47
Tree	{ this ( time , includeConstant , cos , Locale , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , includeConstant , cos , Locale , Locale , Locale , Locale . getDefault () ) ; }
Distance : 9

48
Tree	{ this ( time , REACHABLE , Locale , Locale , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , REACHABLE , Locale , Locale , Locale , Locale , Locale . getDefault () ) ; }
Distance : 9

49
Tree	{ super ( STRING_CONSTANT ) ; currentDerivative = empiricalDistribution2 ; }
Code	{ super ( STRING_CONSTANT ) ; currentDerivative = empiricalDistribution2 ; }
Distance : 10

50
Tree	{ super ( time , requirement , Locale , Locale . getDefault () ) ; }
Code	{ super ( time , requirement , Locale , Locale . getDefault () ) ; }
Distance : 4

51
Tree	{ super ( time , null , null , Locale , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , null , null , Locale , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 10

52
Tree	{ time = STRATEGY_MAP ; }
Code	{ time = STRATEGY_MAP ; }
Distance : 10

53
Tree	{ super ( time , includeConstant , Locale , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , includeConstant , Locale , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 8

54
Tree	{ this ( time . isLoggable () , Locale ) ; }
Code	{ this ( time . isLoggable () , Locale ) ; }
Distance : 6

55
Tree	{ this ( time , DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE . getDefault () , Locale . getDefault () ) ; }
Distance : 4

56
Tree	{ this ( time . weekOfWeekyear () , Locale ) ; }
Code	{ this ( time . weekOfWeekyear () , Locale ) ; }
Distance : 6

57
Tree	{ this ( time . toTimePeriod () , Locale ) ; }
Code	{ this ( time . toTimePeriod () , Locale ) ; }
Distance : 6

58
Tree	{ this ( LocalizedFormats.MAX_COUNT_EXCEEDED , time , Locale ) ; }
Code	{ this ( LocalizedFormats.MAX_COUNT_EXCEEDED , time , Locale ) ; }
Distance : 5

59
Tree	{ this ( LocalizedFormats.OUT_OF_RANGE_SIMPLE , time , Locale ) ; }
Code	{ this ( LocalizedFormats.OUT_OF_RANGE_SIMPLE , time , Locale ) ; }
Distance : 5

60
Tree	{ this ( time , xFormat . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , xFormat . getDefault () , Locale . getDefault () ) ; }
Distance : 4

61
Tree	{ time = VarCheck ; }
Code	{ time = VarCheck ; }
Distance : 10

62
Tree	{ super ( STRING_CONSTANT ) ; mockingProgress = denominatorDegreesOfFreedom ; }
Code	{ super ( STRING_CONSTANT ) ; mockingProgress = denominatorDegreesOfFreedom ; }
Distance : 10

63
Tree	{ this ( time . weekyear () , Locale . getDefault () ) ; }
Code	{ this ( time . weekyear () , Locale . getDefault () ) ; }
Distance : 3

64
Tree	{ this ( LocalizedFormats.EVALUATION_FAILED , time , Locale ) ; }
Code	{ this ( LocalizedFormats.EVALUATION_FAILED , time , Locale ) ; }
Distance : 5

65
Tree	{ super ( time , DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE . getDefault () ) ; Locale . getDefault () ; }
Code	{ super ( time , DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE . getDefault () ) ; Locale . getDefault () ; }
Distance : 8

66
Tree	{ super(); time = eventCounts ; Locale = null ; }
Code	{ super(); time = eventCounts ; Locale = null ; }
Distance : 9

67
Tree	{ this ( time , includeConstant , tolerance , Locale . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , includeConstant , tolerance , Locale . getDefault () , Locale . getDefault () ) ; }
Distance : 8

68
Tree	{ this ( time , REACHABLE . getDefault () , Locale . getDefault () ) ; }
Code	{ this ( time , REACHABLE . getDefault () , Locale . getDefault () ) ; }
Distance : 4

69
Tree	{ this ( time . weekyear () , Locale ) ; }
Code	{ this ( time . weekyear () , Locale ) ; }
Distance : 6

70
Tree	{ super ( time , includeConstant , Locale , wrong . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , includeConstant , Locale , wrong . getDefault () ) ; Locale = Locale ; }
Distance : 8

71
Tree	{ time = decoded ; }
Code	{ time = decoded ; }
Distance : 10

72
Tree	{ super ( time , DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE , Locale , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE , Locale , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 8

73
Tree	{ time = ArgUtils ; }
Code	{ time = ArgUtils ; }
Distance : 10

74
Tree	{ super ( time , requirement , Locale , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , requirement , Locale , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 8

75
Tree	{ super(); time = decoded ; Locale = null ; }
Code	{ super(); time = decoded ; Locale = null ; }
Distance : 9

76
Tree	{ super ( time , includeConstant . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , includeConstant . getDefault () ) ; Locale = Locale ; }
Distance : 8

77
Tree	{ super(); time = oldEnd ; Locale = null ; }
Code	{ super(); time = oldEnd ; Locale = null ; }
Distance : 9

78
Tree	{ super ( time , DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE , Locale , wrong . getDefault () ) ; }
Code	{ super ( time , DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE , Locale , wrong . getDefault () ) ; }
Distance : 4

79
Tree	{ super ( time , REACHABLE , Locale , Locale . getDefault () ) ; }
Code	{ super ( time , REACHABLE , Locale , Locale . getDefault () ) ; }
Distance : 4

80
Tree	{ super ( time , DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE , Locale , Locale . getDefault () ) ; Locale . getDefault () ; }
Code	{ super ( time , DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE , Locale , Locale . getDefault () ) ; Locale . getDefault () ; }
Distance : 9

81
Tree	{ super ( time . getPatternForStyle () ) ; Locale = Locale ; }
Code	{ super ( time . getPatternForStyle () ) ; Locale = Locale ; }
Distance : 9

82
Tree	{ super ( time , includeConstant , Locale , Locale . getDefault () ) ; }
Code	{ super ( time , includeConstant , Locale , Locale . getDefault () ) ; }
Distance : 4

83
Tree	{ super ( time . nextT () ) ; Locale = Locale ; }
Code	{ super ( time . nextT () ) ; Locale = Locale ; }
Distance : 9

84
Tree	{ super ( time . weekOfWeekyear () , STRING_CONSTANT , Locale . getDefault () ) ; super }
Code	{ super ( time . weekOfWeekyear () , STRING_CONSTANT , Locale . getDefault () ) ; super }
Distance : 6

85
Tree	{ time = CompilationLevel ; }
Code	{ time = CompilationLevel ; }
Distance : 10

86
Tree	{ this ( time , DEFAULT_EPSILON , Locale ) ; }
Code	{ this ( time , DEFAULT_EPSILON , Locale ) ; }
Distance : 4

87
Tree	{ super ( time , denominatorDegreesOfFreedom . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , denominatorDegreesOfFreedom . getDefault () ) ; Locale = Locale ; }
Distance : 8

88
Tree	{ this ( time , includeConstant , Locale ) ; }
Code	{ this ( time , includeConstant , Locale ) ; }
Distance : 4

89
Tree	{ this ( time . nextCauchy () , Locale . getDefault () ) ; }
Code	{ this ( time . nextCauchy () , Locale . getDefault () ) ; }
Distance : 3

90
Tree	{ this ( time , includeConstant , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , includeConstant , Locale , Locale . getDefault () ) ; }
Distance : 3

91
Tree	{ super ( time , null , Locale . getDefault () ) ; }
Code	{ super ( time , null , Locale . getDefault () ) ; }
Distance : 2

92
Tree	{ this ( time , requirement , Locale ) ; }
Code	{ this ( time , requirement , Locale ) ; }
Distance : 4

93
Tree	{ super ( time , includeConstant . getDefault () ) ; Locale . setDefault () ; }
Code	{ super ( time , includeConstant . getDefault () ) ; Locale . setDefault () ; }
Distance : 9

94
Tree	{ super ( time , DEFAULT_EXPANSION_FACTOR . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , DEFAULT_EXPANSION_FACTOR . getDefault () ) ; Locale = Locale ; }
Distance : 8

95
Tree	{ this ( time . copySelf () , Locale . getDefault () ) ; }
Code	{ this ( time . copySelf () , Locale . getDefault () ) ; }
Distance : 3

96
Tree	{ super(); time = CompilationLevel ; Locale = null ; }
Code	{ super(); time = CompilationLevel ; Locale = null ; }
Distance : 9

97
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , maxIterations . getDefault () ) ; Locale = Locale ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , maxIterations . getDefault () ) ; Locale = Locale ; }
Distance : 8

98
Tree	{ super ( time , DEFAULT_EPSILON . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , DEFAULT_EPSILON . getDefault () ) ; Locale = Locale ; }
Distance : 8

99
Tree	{ this ( time , DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE , Locale ) ; }
Code	{ this ( time , DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE , Locale ) ; }
Distance : 4

100
Tree	{ this ( time . nextT () , Locale . getDefault () ) ; }
Code	{ this ( time . nextT () , Locale . getDefault () ) ; }
Distance : 3

101
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , coefficients . getDefault () ) ; Locale = Locale ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , coefficients . getDefault () ) ; Locale = Locale ; }
Distance : 8

102
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , field . getDefault () ) ; Locale = Locale ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , field . getDefault () ) ; Locale = Locale ; }
Distance : 8

103
Tree	{ super(); time = delegate ; }
Code	{ super(); time = delegate ; }
Distance : 10

104
Tree	{ this ( LocalizedFormats.FAILED_FRACTION_CONVERSION , time , Locale ) ; }
Code	{ this ( LocalizedFormats.FAILED_FRACTION_CONVERSION , time , Locale ) ; }
Distance : 5

105
Tree	{ this ( time . nextCauchy () , Locale ) ; }
Code	{ this ( time . nextCauchy () , Locale ) ; }
Distance : 6

106
Tree	{ super ( STRING_CONSTANT ) ; currentDerivative = denominatorDegreesOfFreedom ; }
Code	{ super ( STRING_CONSTANT ) ; currentDerivative = denominatorDegreesOfFreedom ; }
Distance : 10

107
Tree	{ super ( time . nextT () , STRING_CONSTANT , Locale . getDefault () ) ; super }
Code	{ super ( time . nextT () , STRING_CONSTANT , Locale . getDefault () ) ; super }
Distance : 6

108
Tree	{ this ( time , DEFAULT_EPSILON , Locale , Locale , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , DEFAULT_EPSILON , Locale , Locale , Locale , Locale , Locale . getDefault () ) ; }
Distance : 9

109
Tree	{ super(); time = empiricalDistribution2 ; }
Code	{ super(); time = empiricalDistribution2 ; }
Distance : 10

110
Tree	{ super(); time = eventCounts ; }
Code	{ super(); time = eventCounts ; }
Distance : 10

111
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , invocationContainerImpl . getDefault () ) ; Locale = Locale ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , invocationContainerImpl . getDefault () ) ; Locale = Locale ; }
Distance : 8

112
Tree	{ super(); time = ArgUtils ; }
Code	{ super(); time = ArgUtils ; }
Distance : 10

113
Tree	{ this ( time , true ) ; }
Code	{ this ( time , true ) ; }
Distance : 6

114
Tree	{ super ( time . isLoggable () ) ; Locale = Locale ; }
Code	{ super ( time . isLoggable () ) ; Locale = Locale ; }
Distance : 9

115
Tree	{ super ( time , DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE , Locale , wrong . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE , Locale , wrong . getDefault () ) ; Locale = Locale ; }
Distance : 8

116
Tree	{ this ( time , includeConstant , tolerance ) ; }
Code	{ this ( time , includeConstant , tolerance ) ; }
Distance : 5

117
Tree	{ this ( time , denominatorDegreesOfFreedom , Locale ) ; }
Code	{ this ( time , denominatorDegreesOfFreedom , Locale ) ; }
Distance : 4

118
Tree	{ super ( time . getPatternForStyle () , STRING_CONSTANT , Locale . getDefault () ) ; super }
Code	{ super ( time . getPatternForStyle () , STRING_CONSTANT , Locale . getDefault () ) ; super }
Distance : 6

119
Tree	{ super ( time , xFormat . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , xFormat . getDefault () ) ; Locale = Locale ; }
Distance : 8

120
Tree	{ this ( time , DEFAULT_EPSILON , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , DEFAULT_EPSILON , Locale , Locale . getDefault () ) ; }
Distance : 3

121
Tree	{ this ( time , requirement , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , requirement , Locale , Locale . getDefault () ) ; }
Distance : 3

122
Tree	{ this ( time , requirement , Locale , Locale , Locale , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , requirement , Locale , Locale , Locale , Locale , Locale . getDefault () ) ; }
Distance : 9

123
Tree	{ super ( STRING_CONSTANT ) ; currentDerivative = delegate ; }
Code	{ super ( STRING_CONSTANT ) ; currentDerivative = delegate ; }
Distance : 10

124
Tree	{ super(); time = CompilationLevel ; }
Code	{ super(); time = CompilationLevel ; }
Distance : 10

125
Tree	{ super ( time , includeConstant , Locale , Locale . getDefault () ) ; Locale . getDefault () ; }
Code	{ super ( time , includeConstant , Locale , Locale . getDefault () ) ; Locale . getDefault () ; }
Distance : 9

126
Tree	{ super ( STRING_CONSTANT ) ; currentDerivative = VarCheck ; }
Code	{ super ( STRING_CONSTANT ) ; currentDerivative = VarCheck ; }
Distance : 10

127
Tree	{ super(); time = oldEnd ; }
Code	{ super(); time = oldEnd ; }
Distance : 10

128
Tree	{ super ( time , DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE , Locale , Locale . getDefault () ) ; Locale . setDefault () ; }
Code	{ super ( time , DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE , Locale , Locale . getDefault () ) ; Locale . setDefault () ; }
Distance : 9

129
Tree	{ this ( time , includeConstant , cos ) ; }
Code	{ this ( time , includeConstant , cos ) ; }
Distance : 5

130
Tree	{ super ( STRING_CONSTANT ) ; currentDerivative = rand ; }
Code	{ super ( STRING_CONSTANT ) ; currentDerivative = rand ; }
Distance : 10

131
Tree	{ super(); time = delegate ; Locale = null ; }
Code	{ super(); time = delegate ; Locale = null ; }
Distance : 9

132
Tree	{ super(); time = VarCheck ; }
Code	{ super(); time = VarCheck ; }
Distance : 10

133
Tree	{ super ( time . isLoggable () , STRING_CONSTANT , Locale . getDefault () ) ; super }
Code	{ super ( time . isLoggable () , STRING_CONSTANT , Locale . getDefault () ) ; super }
Distance : 6

134
Tree	{ super(); time = ArgUtils ; Locale = null ; }
Code	{ super(); time = ArgUtils ; Locale = null ; }
Distance : 9

135
Tree	{ this ( time , DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE , Locale , Locale . getDefault () ) ; }
Distance : 3

136
Tree	{ super ( STRING_CONSTANT ) ; mockingProgress = VarCheck ; }
Code	{ super ( STRING_CONSTANT ) ; mockingProgress = VarCheck ; }
Distance : 10

137
Tree	{ super ( time , DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE . getDefault () ) ; Locale . setDefault () ; }
Code	{ super ( time , DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE . getDefault () ) ; Locale . setDefault () ; }
Distance : 9

138
Tree	{ super ( time , includeConstant . getDefault () ) ; Locale . getDefault () ; }
Code	{ super ( time , includeConstant . getDefault () ) ; Locale . getDefault () ; }
Distance : 8

139
Tree	{ super ( STRING_CONSTANT ) ; mockingProgress = empiricalDistribution2 ; }
Code	{ super ( STRING_CONSTANT ) ; mockingProgress = empiricalDistribution2 ; }
Distance : 10

140
Tree	{ this ( time , REACHABLE , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , REACHABLE , Locale , Locale . getDefault () ) ; }
Distance : 3

141
Tree	{ super ( time , requirement . getDefault () ) ; Locale . setDefault () ; }
Code	{ super ( time , requirement . getDefault () ) ; Locale . setDefault () ; }
Distance : 9

142
Tree	{ this ( time , denominatorDegreesOfFreedom , Locale , Locale . getDefault () ) ; }
Code	{ this ( time , denominatorDegreesOfFreedom , Locale , Locale . getDefault () ) ; }
Distance : 3

143
Tree	{ super ( time , includeConstant , Locale , wrong . getDefault () ) ; Locale . setDefault () ; }
Code	{ super ( time , includeConstant , Locale , wrong . getDefault () ) ; Locale . setDefault () ; }
Distance : 9

144
Tree	{ this ( time , DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE , Locale , Locale . getDefault () , getDefault () ) ; }
Code	{ this ( time , DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE , Locale , Locale . getDefault () , getDefault () ) ; }
Distance : 6

145
Tree	{ super ( time , REACHABLE , Locale , Locale . getDefault () ) ; Locale . setDefault () ; }
Code	{ super ( time , REACHABLE , Locale , Locale . getDefault () ) ; Locale . setDefault () ; }
Distance : 9

146
Tree	{ super ( time . copySelf () ) ; Locale = Locale ; }
Code	{ super ( time . copySelf () ) ; Locale = Locale ; }
Distance : 9

147
Tree	{ super ( time . toTimePeriod () , STRING_CONSTANT , Locale . getDefault () ) ; super }
Code	{ super ( time . toTimePeriod () , STRING_CONSTANT , Locale . getDefault () ) ; super }
Distance : 6

148
Tree	{ super ( time , includeConstant , Locale , Locale . getDefault () ) ; Locale . setDefault () ; }
Code	{ super ( time , includeConstant , Locale , Locale . getDefault () ) ; Locale . setDefault () ; }
Distance : 9

149
Tree	{ this ( time , includeConstant , cos , Locale . getDefault () ) ; }
Code	{ this ( time , includeConstant , cos , Locale . getDefault () ) ; }
Distance : 3

150
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , bounds . getDefault () ) ; Locale = Locale ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , bounds . getDefault () ) ; Locale = Locale ; }
Distance : 8

151
Tree	{ super ( time , requirement , Locale , Locale . getDefault () ) ; Locale . setDefault () ; }
Code	{ super ( time , requirement , Locale , Locale . getDefault () ) ; Locale . setDefault () ; }
Distance : 9

152
Tree	{ ; }
Code	{ ; }
Distance : 11

153
Tree	{ this ( time , includeConstant , Locale , Locale . getDefault () , getDefault () ) ; }
Code	{ this ( time , includeConstant , Locale , Locale . getDefault () , getDefault () ) ; }
Distance : 6

154
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , jacobian . getDefault () ) ; Locale = Locale ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , jacobian . getDefault () ) ; Locale = Locale ; }
Distance : 8

155
Tree	{ super(); time = VarCheck ; Locale = null ; }
Code	{ super(); time = VarCheck ; Locale = null ; }
Distance : 9

156
Tree	{ super ( time , DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE , Locale , wrong . getDefault () ) ; Locale . setDefault () ; }
Code	{ super ( time , DEFAULT_NOT_EMPTY_CHAR_SEQUENCE_EX_MESSAGE , Locale , wrong . getDefault () ) ; Locale . setDefault () ; }
Distance : 9

157
Tree	{ super ( time , null , v . getDefault () ) ; }
Code	{ super ( time , null , v . getDefault () ) ; }
Distance : 3

158
Tree	{ this ( time , includeConstant , tolerance , Locale . getDefault () ) ; }
Code	{ this ( time , includeConstant , tolerance , Locale . getDefault () ) ; }
Distance : 3

159
Tree	{ this ( invocationContainerImpl , false ) ; }
Code	{ this ( invocationContainerImpl , false ) ; }
Distance : 7

160
Tree	{ super ( STRING_CONSTANT , STRING_CONSTANT , zero . getDefault () ) ; Locale = Locale ; }
Code	{ super ( STRING_CONSTANT , STRING_CONSTANT , zero . getDefault () ) ; Locale = Locale ; }
Distance : 8

161
Tree	{ super ( time , null , cos . getDefault () ) ; }
Code	{ super ( time , null , cos . getDefault () ) ; }
Distance : 3

162
Tree	{ this ( time , REACHABLE , Locale ) ; }
Code	{ this ( time , REACHABLE , Locale ) ; }
Distance : 4

163
Tree	{ super ( time . nextF () ) ; Locale = Locale ; }
Code	{ super ( time . nextF () ) ; Locale = Locale ; }
Distance : 9

164
Tree	{ super ( time , null , zero . getDefault () ) ; }
Code	{ super ( time , null , zero . getDefault () ) ; }
Distance : 3

165
Tree	{ super ( time , null , d . getDefault () ) ; }
Code	{ super ( time , null , d . getDefault () ) ; }
Distance : 3

166
Tree	{ time = delegate ; }
Code	{ time = delegate ; }
Distance : 10

167
Tree	{ super ( time . toTimePeriod () ) ; Locale = Locale ; }
Code	{ super ( time . toTimePeriod () ) ; Locale = Locale ; }
Distance : 9

168
Tree	{ this ( time , includeConstant , cos , Locale . getDefault () , getDefault () ) ; }
Code	{ this ( time , includeConstant , cos , Locale . getDefault () , getDefault () ) ; }
Distance : 6

169
Tree	{ this ( boundary , false ) ; }
Code	{ this ( boundary , false ) ; }
Distance : 7

170
Tree	{ super ( time , REACHABLE . getDefault () ) ; Locale . getDefault () ; }
Code	{ super ( time , REACHABLE . getDefault () ) ; Locale . getDefault () ; }
Distance : 8

171
Tree	{ super ( time , null , null , Locale , Locale . getDefault () ) ; randomGenerator = Locale ; }
Code	{ super ( time , null , null , Locale , Locale . getDefault () ) ; randomGenerator = Locale ; }
Distance : 10

172
Tree	{ this ( time , REACHABLE , Locale , Locale . getDefault () , getDefault () ) ; }
Code	{ this ( time , REACHABLE , Locale , Locale . getDefault () , getDefault () ) ; }
Distance : 6

173
Tree	{ super ( time , null , null , Locale , Locale . getDefault () ) ; epsilon = Locale ; }
Code	{ super ( time , null , null , Locale , Locale . getDefault () ) ; epsilon = Locale ; }
Distance : 10

174
Tree	{ super ( coefficients , null , null , Locale , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( coefficients , null , null , Locale , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 11

175
Tree	{ super ( time , denominatorDegreesOfFreedom . getDefault () ) ; Locale . setDefault () ; }
Code	{ super ( time , denominatorDegreesOfFreedom . getDefault () ) ; Locale . setDefault () ; }
Distance : 9

176
Tree	{ super(); time = empiricalDistribution2 ; Locale = null ; }
Code	{ super(); time = empiricalDistribution2 ; Locale = null ; }
Distance : 9

177
Tree	{ super ( time , null , null , Locale , Locale . getDefault () ) ; typeVariable = Locale ; }
Code	{ super ( time , null , null , Locale , Locale . getDefault () ) ; typeVariable = Locale ; }
Distance : 10

178
Tree	{ super ( time , null , null , Locale , Locale . getDefault () ) ; maxIterationCount = Locale ; }
Code	{ super ( time , null , null , Locale , Locale . getDefault () ) ; maxIterationCount = Locale ; }
Distance : 10

179
Tree	{ this ( coefficients , false ) ; }
Code	{ this ( coefficients , false ) ; }
Distance : 7

180
Tree	{ this ( time , DEFAULT_EPSILON , Locale , Locale . getDefault () , getDefault () ) ; }
Code	{ this ( time , DEFAULT_EPSILON , Locale , Locale . getDefault () , getDefault () ) ; }
Distance : 6

181
Tree	{ this ( MockHandlerInterface , false ) ; }
Code	{ this ( MockHandlerInterface , false ) ; }
Distance : 7

182
Tree	{ this ( time , requirement , Locale , Locale . getDefault () , getDefault () ) ; }
Code	{ this ( time , requirement , Locale , Locale . getDefault () , getDefault () ) ; }
Distance : 6

183
Tree	{ super ( time , null , null , tolerance , Locale . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , null , null , tolerance , Locale . getDefault () ) ; Locale = Locale ; }
Distance : 10

184
Tree	{ super ( time , REACHABLE . getDefault () ) ; Locale . setDefault () ; }
Code	{ super ( time , REACHABLE . getDefault () ) ; Locale . setDefault () ; }
Distance : 9

185
Tree	{ this ( itemLabelGeneratorMap , false ) ; }
Code	{ this ( itemLabelGeneratorMap , false ) ; }
Distance : 7

186
Tree	{ this ( time , includeConstant , tolerance , Locale . getDefault () , getDefault () ) ; }
Code	{ this ( time , includeConstant , tolerance , Locale . getDefault () , getDefault () ) ; }
Distance : 6

187
Tree	{ super ( coefficients , null , Locale . getDefault () ) ; }
Code	{ super ( coefficients , null , Locale . getDefault () ) ; }
Distance : 3

188
Tree	{ this ( time , denominatorDegreesOfFreedom , Locale , Locale . getDefault () , getDefault () ) ; }
Code	{ this ( time , denominatorDegreesOfFreedom , Locale , Locale . getDefault () , getDefault () ) ; }
Distance : 6

189
Tree	{ this ( maxIterations , false ) ; }
Code	{ this ( maxIterations , false ) ; }
Distance : 7

190
Tree	{ super ( time , null , null , Locale , tolerance . getDefault () ) ; Locale = Locale ; }
Code	{ super ( time , null , null , Locale , tolerance . getDefault () ) ; Locale = Locale ; }
Distance : 10

191
Tree	{ ; } f
Code	{ ; } f
Distance : 12

192
Tree	{ ; } Override
Code	{ ; } Override
Distance : 12

193
Tree	{ ; } MathRuntimeException
Code	{ ; } MathRuntimeException
Distance : 12

194
Tree	{ ; } mock
Code	{ ; } mock
Distance : 12

195
Tree	{ ; } array
Code	{ ; } array
Distance : 12

196
Tree	{ super ( time , null , tolerance . getDefault () ) ; }
Code	{ super ( time , null , tolerance . getDefault () ) ; }
Distance : 3

197
Tree	{ ; } class
Code	{ ; } class
Distance : 12

198
Tree	{ super ( time , null , epsilon . getDefault () ) ; }
Code	{ super ( time , null , epsilon . getDefault () ) ; }
Distance : 3

199
Tree	{ ; } notifyListeners
Code	{ ; } notifyListeners
Distance : 12

========================================================================


========================================================================
Example Number: 9
Parent Code is: 
if ( dataset != null ) { return result ; }
-------------------------------------------------------------------------------
Child code is: 
if ( dataset == null ) { return result ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=dataset}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=result}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=dataset}) (236{val===}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=result}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Chart/1/parent/source_org_jfree_chart_renderer_category_AbstractCategoryItemRenderer.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( dataset . equal () ) { return result ; }
Code	if ( dataset . equal () ) { return result ; }
Distance : 3

1
Tree	if ( dataset != null ) { return result ; } else ++
Code	if ( dataset != null ) { return result ; } else ++
Distance : 3

2
Tree	if ( dataset . isEmptyOrNull () ) { return result ; }
Code	if ( dataset . isEmptyOrNull () ) { return result ; }
Distance : 3

3
Tree	if ( dataset != null ) { return result . hashCode ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return result . hashCode ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

4
Tree	if ( dataset != null ) { return result ; }
Code	if ( dataset != null ) { return result ; }
Distance : 1

5
Tree	if ( dataset . indexOf ( dataset ) ) { return result ; }
Code	if ( dataset . indexOf ( dataset ) ) { return result ; }
Distance : 5

6
Tree	if ( isPointInRect ( dataset ) ) { return result ; }
Code	if ( isPointInRect ( dataset ) ) { return result ; }
Distance : 4

7
Tree	if ( indexOf () ) { return result ; }
Code	if ( indexOf () ) { return result ; }
Distance : 3

8
Tree	if ( dataset . isEmptyType ( dataset ) ) { return result ; }
Code	if ( dataset . isEmptyType ( dataset ) ) { return result ; }
Distance : 5

9
Tree	if ( isBottom ( dataset ) ) { return result ; }
Code	if ( isBottom ( dataset ) ) { return result ; }
Distance : 4

10
Tree	if ( dataset . indexOf () ) { return result ; }
Code	if ( dataset . indexOf () ) { return result ; }
Distance : 3

11
Tree	if ( dataset . isBottom ( dataset ) ) { return result ; }
Code	if ( dataset . isBottom ( dataset ) ) { return result ; }
Distance : 5

12
Tree	if ( dataset . isEmptyType () ) { return result ; }
Code	if ( dataset . isEmptyType () ) { return result ; }
Distance : 3

13
Tree	if ( dataset ) { return result ; }
Code	if ( dataset ) { return result ; }
Distance : 2

14
Tree	if ( new RealMatrixImpl ( dataset ) . indexOf ( result ) ) { return result ; }
Code	if ( new RealMatrixImpl ( dataset ) . indexOf ( result ) ) { return result ; }
Distance : 9

15
Tree	if ( indexOf ( dataset ) ) { return result ; }
Code	if ( indexOf ( dataset ) ) { return result ; }
Distance : 4

16
Tree	if ( dataset != null ) { return this . result ; }
Code	if ( dataset != null ) { return this . result ; }
Distance : 3

17
Tree	if ( dataset . getParent () ) { return result ; }
Code	if ( dataset . getParent () ) { return result ; }
Distance : 3

18
Tree	if ( dataset != null ) { return result . hashCode ( dataset ) ; }
Code	if ( dataset != null ) { return result . hashCode ( dataset ) ; }
Distance : 6

19
Tree	if ( dataset . getParent ( dataset ) ) { return result ; }
Code	if ( dataset . getParent ( dataset ) ) { return result ; }
Distance : 5

20
Tree	if ( dataset . equal ( dataset ) ) { return result ; }
Code	if ( dataset . equal ( dataset ) ) { return result ; }
Distance : 5

21
Tree	if ( dataset . isEmptyOrNull ( dataset ) ) { return result ; }
Code	if ( dataset . isEmptyOrNull ( dataset ) ) { return result ; }
Distance : 5

22
Tree	if ( dataset . isNaN ( dataset ) ) { return result ; }
Code	if ( dataset . isNaN ( dataset ) ) { return result ; }
Distance : 5

23
Tree	if ( includeInterval != null ) { return result ; }
Code	if ( includeInterval != null ) { return result ; }
Distance : 2

24
Tree	if ( ! containsNow ( dataset ) ) { return result ; }
Code	if ( ! containsNow ( dataset ) ) { return result ; }
Distance : 5

25
Tree	if ( dataset . isNaN ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( dataset . isNaN ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 5

26
Tree	if ( dataset != null ) { return result . getParent ( dataset , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Code	if ( dataset != null ) { return result . getParent ( dataset , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Distance : 8

27
Tree	if ( dataset . isEmptyOrNull ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( dataset . isEmptyOrNull ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 5

28
Tree	if ( isEmptyType ( dataset ) ) { return result ; }
Code	if ( isEmptyType ( dataset ) ) { return result ; }
Distance : 4

29
Tree	if ( s != null ) { return this . result ; }
Code	if ( s != null ) { return this . result ; }
Distance : 4

30
Tree	if ( dataset != null ) { return this . commonTypes ; }
Code	if ( dataset != null ) { return this . commonTypes ; }
Distance : 4

31
Tree	if ( ! dataset . indexOf ( dataset ) ) { return result ; }
Code	if ( ! dataset . indexOf ( dataset ) ) { return result ; }
Distance : 6

32
Tree	if ( dataset ( dataset ) ) { return result ; }
Code	if ( dataset ( dataset ) ) { return result ; }
Distance : 3

33
Tree	if ( isBottom ( dataset , UNKNOWN , EMPTY ) ) { return result ; }
Code	if ( isBottom ( dataset , UNKNOWN , EMPTY ) ) { return result ; }
Distance : 7

34
Tree	if ( dataset != null ) { return this . result . indexOf () ; }
Code	if ( dataset != null ) { return this . result . indexOf () ; }
Distance : 6

35
Tree	if ( dataset . isBottom () ) { return result ; }
Code	if ( dataset . isBottom () ) { return result ; }
Distance : 3

36
Tree	if ( isEmpty ( dataset ) ) { return result ; }
Code	if ( isEmpty ( dataset ) ) { return result ; }
Distance : 4

37
Tree	if ( dataset . indexOf ( dataset ) ) { return this . result . result ; }
Code	if ( dataset . indexOf ( dataset ) ) { return this . result . result ; }
Distance : 9

38
Tree	if ( this . dataset . indexOf ( dataset ) ) { return result ; }
Code	if ( this . dataset . indexOf ( dataset ) ) { return result ; }
Distance : 7

39
Tree	if ( cls != null ) { return result ; }
Code	if ( cls != null ) { return result ; }
Distance : 2

40
Tree	if ( dataset != null ) { return result . hashCode ( includeInterval ) ; }
Code	if ( dataset != null ) { return result . hashCode ( includeInterval ) ; }
Distance : 6

41
Tree	if ( isEmpty () ) { return result ; }
Code	if ( isEmpty () ) { return result ; }
Distance : 3

42
Tree	if ( dataset != null ) { return result . hashCode ( dataset , that.paint ) ; }
Code	if ( dataset != null ) { return result . hashCode ( dataset , that.paint ) ; }
Distance : 8

43
Tree	if ( firstNonBottom ( dataset ) ) { return result ; }
Code	if ( firstNonBottom ( dataset ) ) { return result ; }
Distance : 4

44
Tree	if ( dataset != null ) { return result ; } else %
Code	if ( dataset != null ) { return result ; } else %
Distance : 3

45
Tree	if ( isBottom ( other.nominalType ) ) { return result ; }
Code	if ( isBottom ( other.nominalType ) ) { return result ; }
Distance : 4

46
Tree	if ( ! isPointInRect ( dataset ) ) { return result ; }
Code	if ( ! isPointInRect ( dataset ) ) { return result ; }
Distance : 5

47
Tree	if ( dataset != null ) { return result . getFirstChild ( dataset ) ; }
Code	if ( dataset != null ) { return result . getFirstChild ( dataset ) ; }
Distance : 6

48
Tree	if ( DatasetUtils != null ) { return result ; }
Code	if ( DatasetUtils != null ) { return result ; }
Distance : 2

49
Tree	if ( new State ( dataset ) . indexOf ( result ) ) { return result ; }
Code	if ( new State ( dataset ) . indexOf ( result ) ) { return result ; }
Distance : 9

50
Tree	if ( new NullArgumentException ( dataset ) . indexOf ( result ) ) { return result ; }
Code	if ( new NullArgumentException ( dataset ) . indexOf ( result ) ) { return result ; }
Distance : 9

51
Tree	if ( firstNonBottom () ) { return result ; }
Code	if ( firstNonBottom () ) { return result ; }
Distance : 3

52
Tree	if ( dataset != null ) { return result ; } else super
Code	if ( dataset != null ) { return result ; } else super
Distance : 3

53
Tree	if ( dataset . isNaN () ) { return result ; }
Code	if ( dataset . isNaN () ) { return result ; }
Distance : 3

54
Tree	if ( includeInterval ( dataset ) ) { return result ; }
Code	if ( includeInterval ( dataset ) ) { return result ; }
Distance : 4

55
Tree	if ( isBottom ( x.length ) ) { return result ; }
Code	if ( isBottom ( x.length ) ) { return result ; }
Distance : 4

56
Tree	if ( isBottom ( dataset , nCols ) ) { return result ; }
Code	if ( isBottom ( dataset , nCols ) ) { return result ; }
Distance : 5

57
Tree	if ( dataset != null ) { return this . result . result ; }
Code	if ( dataset != null ) { return this . result . result ; }
Distance : 5

58
Tree	if ( dataset != null ) { return result . hashCode ( dataset , IncrementalCheckMode.GENERATE_IJS ) ; }
Code	if ( dataset != null ) { return result . hashCode ( dataset , IncrementalCheckMode.GENERATE_IJS ) ; }
Distance : 8

59
Tree	if ( ! s . indexOf ( dataset ) ) { return result ; }
Code	if ( ! s . indexOf ( dataset ) ) { return result ; }
Distance : 7

60
Tree	if ( isBottom ( dataset , x1 ) ) { return result ; }
Code	if ( isBottom ( dataset , x1 ) ) { return result ; }
Distance : 5

61
Tree	if ( new MathInternalError ( dataset ) . indexOf ( result ) ) { return result ; }
Code	if ( new MathInternalError ( dataset ) . indexOf ( result ) ) { return result ; }
Distance : 9

62
Tree	if ( ! isPowerOf2 ( dataset ) ) { return result ; }
Code	if ( ! isPowerOf2 ( dataset ) ) { return result ; }
Distance : 5

63
Tree	if ( isBottom () ) { return result ; }
Code	if ( isBottom () ) { return result ; }
Distance : 3

64
Tree	if ( isNonSingular () ) { return result ; }
Code	if ( isNonSingular () ) { return result ; }
Distance : 3

65
Tree	if ( new RankDeficientMatrixException ( dataset ) . indexOf ( result ) ) { return result ; }
Code	if ( new RankDeficientMatrixException ( dataset ) . indexOf ( result ) ) { return result ; }
Distance : 9

66
Tree	if ( dataset . isNaN ( dataset ) ) { return this . result . result ; }
Code	if ( dataset . isNaN ( dataset ) ) { return this . result . result ; }
Distance : 9

67
Tree	if ( dataset != null ) { return hashCode ( STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return hashCode ( STRING_CONSTANT ) ; }
Distance : 5

68
Tree	if ( dataset != null ) { return result . of ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return result . of ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

69
Tree	if ( isBottom ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR ) ) { return result ; }
Code	if ( isBottom ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR ) ) { return result ; }
Distance : 4

70
Tree	if ( dataset != null ) { return result . getParent ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return result . getParent ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

71
Tree	if ( dataset . getParent ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( dataset . getParent ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 5

72
Tree	if ( indexOf ( dataset , UNKNOWN ) ) { return result ; }
Code	if ( indexOf ( dataset , UNKNOWN ) ) { return result ; }
Distance : 5

73
Tree	if ( dataset != null ) { return result . hashCode ( dataset , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Code	if ( dataset != null ) { return result . hashCode ( dataset , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Distance : 8

74
Tree	if ( isBottom ( dataset , UNKNOWN , clazz ) ) { return result ; }
Code	if ( isBottom ( dataset , UNKNOWN , clazz ) ) { return result ; }
Distance : 7

75
Tree	if ( dataset . isEmptyType ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( dataset . isEmptyType ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 5

76
Tree	if ( dataset != null ) { return result ; } else +=
Code	if ( dataset != null ) { return result ; } else +=
Distance : 3

77
Tree	if ( ch != null ) { return result ; }
Code	if ( ch != null ) { return result ; }
Distance : 2

78
Tree	if ( isEmptyType () ) { return result ; }
Code	if ( isEmptyType () ) { return result ; }
Distance : 3

79
Tree	if ( dataset . isEmptyType ( dataset ) ) { return this . result . result ; }
Code	if ( dataset . isEmptyType ( dataset ) ) { return this . result . result ; }
Distance : 9

80
Tree	if ( dataset != null ) { return result ; } else else
Code	if ( dataset != null ) { return result ; } else else
Distance : 3

81
Tree	if ( dataset . indexOf ( dataset ) ) { return this . result . b ; }
Code	if ( dataset . indexOf ( dataset ) ) { return this . result . b ; }
Distance : 9

82
Tree	if ( dataset != null ) { return result . of ( dataset ) ; }
Code	if ( dataset != null ) { return result . of ( dataset ) ; }
Distance : 6

83
Tree	if ( dataset != null ) { return result ; } else :
Code	if ( dataset != null ) { return result ; } else :
Distance : 3

84
Tree	if ( new State () . indexOf ( dataset ) ) { return result ; }
Code	if ( new State () . indexOf ( dataset ) ) { return result ; }
Distance : 8

85
Tree	if ( new RankDeficientMatrixException () . indexOf ( dataset ) ) { return result ; }
Code	if ( new RankDeficientMatrixException () . indexOf ( dataset ) ) { return result ; }
Distance : 8

86
Tree	if ( new MathInternalError () . indexOf ( dataset ) ) { return result ; }
Code	if ( new MathInternalError () . indexOf ( dataset ) ) { return result ; }
Distance : 8

87
Tree	if ( dataset ( includeInterval ) ) { return result ; }
Code	if ( dataset ( includeInterval ) ) { return result ; }
Distance : 3

88
Tree	if ( isBottom ( TokenType.OPEN_PAREN ) ) { return result ; }
Code	if ( isBottom ( TokenType.OPEN_PAREN ) ) { return result ; }
Distance : 4

89
Tree	if ( current != null ) { return result ; }
Code	if ( current != null ) { return result ; }
Distance : 2

90
Tree	if ( dataset != null ) { return result . call ( dataset ) ; }
Code	if ( dataset != null ) { return result . call ( dataset ) ; }
Distance : 6

91
Tree	if ( new NullArgumentException () . indexOf ( dataset ) ) { return result ; }
Code	if ( new NullArgumentException () . indexOf ( dataset ) ) { return result ; }
Distance : 8

92
Tree	if ( ! dataset . isEmptyOrNull ( dataset ) ) { return result ; }
Code	if ( ! dataset . isEmptyOrNull ( dataset ) ) { return result ; }
Distance : 6

93
Tree	if ( ! dataset . isDeclaredSloppy ( dataset ) ) { return result ; }
Code	if ( ! dataset . isDeclaredSloppy ( dataset ) ) { return result ; }
Distance : 6

94
Tree	if ( ! getDataset ( dataset ) ) { return result ; }
Code	if ( ! getDataset ( dataset ) ) { return result ; }
Distance : 5

95
Tree	if ( isBottom ( dataset , CSV_SEARCH_CHARS ) ) { return result ; }
Code	if ( isBottom ( dataset , CSV_SEARCH_CHARS ) ) { return result ; }
Distance : 5

96
Tree	if ( dataset != null ) { return result ; } else &
Code	if ( dataset != null ) { return result ; } else &
Distance : 3

97
Tree	if ( isBottom ( dataset , CSV_SEARCH_CHARS , parent ) ) { return result ; }
Code	if ( isBottom ( dataset , CSV_SEARCH_CHARS , parent ) ) { return result ; }
Distance : 7

98
Tree	if ( new Coordinates3D () . indexOf ( dataset ) ) { return result ; }
Code	if ( new Coordinates3D () . indexOf ( dataset ) ) { return result ; }
Distance : 8

99
Tree	if ( dataset != null ) { return result . getFirstChild ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return result . getFirstChild ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

100
Tree	if ( indexOf ( dataset , CSV_SEARCH_CHARS ) ) { return result ; }
Code	if ( indexOf ( dataset , CSV_SEARCH_CHARS ) ) { return result ; }
Distance : 5

101
Tree	if ( new Coordinates3D ( dataset ) . getSolver ( result ) ) { return result ; }
Code	if ( new Coordinates3D ( dataset ) . getSolver ( result ) ) { return result ; }
Distance : 9

102
Tree	if ( ! dataset . isEmpty ( dataset ) ) { return result ; }
Code	if ( ! dataset . isEmpty ( dataset ) ) { return result ; }
Distance : 6

103
Tree	if ( Coordinates3D != null ) { return result ; }
Code	if ( Coordinates3D != null ) { return result ; }
Distance : 2

104
Tree	if ( isNonSingular ( dataset ) ) { return result ; }
Code	if ( isNonSingular ( dataset ) ) { return result ; }
Distance : 4

105
Tree	if ( new Coordinates3D ( dataset ) . indexOf ( result ) ) { return result ; }
Code	if ( new Coordinates3D ( dataset ) . indexOf ( result ) ) { return result ; }
Distance : 9

106
Tree	if ( s ( dataset ) ) { return result ; }
Code	if ( s ( dataset ) ) { return result ; }
Distance : 4

107
Tree	if ( dataset . isEmpty ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( dataset . isEmpty ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 5

108
Tree	if ( isBottom ( Locale.ENGLISH ) ) { return result ; }
Code	if ( isBottom ( Locale.ENGLISH ) ) { return result ; }
Distance : 4

109
Tree	if ( ! isNonSingular ( dataset ) ) { return result ; }
Code	if ( ! isNonSingular ( dataset ) ) { return result ; }
Distance : 5

110
Tree	if ( isBottom ( dataset , CSV_SEARCH_CHARS , DEFAULT_ABSOLUTE_ACCURACY ) ) { return result ; }
Code	if ( isBottom ( dataset , CSV_SEARCH_CHARS , DEFAULT_ABSOLUTE_ACCURACY ) ) { return result ; }
Distance : 7

111
Tree	if ( ! dataset . isBottom ( dataset ) ) { return result ; }
Code	if ( ! dataset . isBottom ( dataset ) ) { return result ; }
Distance : 6

112
Tree	if ( this . dataset . getMethod ( dataset ) ) { return result ; }
Code	if ( this . dataset . getMethod ( dataset ) ) { return result ; }
Distance : 7

113
Tree	if ( dataset != null ) { return this . result . isPointInRect () ; }
Code	if ( dataset != null ) { return this . result . isPointInRect () ; }
Distance : 6

114
Tree	if ( isBottom ( dataset , CSV_SEARCH_CHARS , clazz ) ) { return result ; }
Code	if ( isBottom ( dataset , CSV_SEARCH_CHARS , clazz ) ) { return result ; }
Distance : 7

115
Tree	if ( isBottom ( dataset , x1 , EMPTY ) ) { return result ; }
Code	if ( isBottom ( dataset , x1 , EMPTY ) ) { return result ; }
Distance : 7

116
Tree	if ( dataset != null ) { return result . hasChildren ( dataset ) ; }
Code	if ( dataset != null ) { return result . hasChildren ( dataset ) ; }
Distance : 6

117
Tree	if ( this . dataset . isSubtype ( dataset ) ) { return result ; }
Code	if ( this . dataset . isSubtype ( dataset ) ) { return result ; }
Distance : 7

118
Tree	if ( dataset != null ) { return this . result . booleanValue () ; }
Code	if ( dataset != null ) { return this . result . booleanValue () ; }
Distance : 6

119
Tree	if ( dataset != null ) { return this . result . isEmptyType () ; }
Code	if ( dataset != null ) { return this . result . isEmptyType () ; }
Distance : 6

120
Tree	if ( new Coordinates3D () . getParser ( dataset ) ) { return result ; }
Code	if ( new Coordinates3D () . getParser ( dataset ) ) { return result ; }
Distance : 8

121
Tree	if ( dataset != null ) { return result . abs ( dataset ) ; }
Code	if ( dataset != null ) { return result . abs ( dataset ) ; }
Distance : 6

122
Tree	if ( dataset != null ) { return result . hasChildren ( dataset , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Code	if ( dataset != null ) { return result . hasChildren ( dataset , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Distance : 8

123
Tree	if ( dataset . equal ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( dataset . equal ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 5

124
Tree	if ( dataset != null ) { return result . abs ( dataset , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Code	if ( dataset != null ) { return result . abs ( dataset , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Distance : 8

125
Tree	if ( dataset != null ) { return result . hasChildren ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return result . hasChildren ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

126
Tree	if ( dataset != null ) { return result . getFirstChild ( dataset , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Code	if ( dataset != null ) { return result . getFirstChild ( dataset , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Distance : 8

127
Tree	if ( dataset != null ) { return this . result . instantiateGenericsWithUnknown () ; }
Code	if ( dataset != null ) { return this . result . instantiateGenericsWithUnknown () ; }
Distance : 6

128
Tree	if ( dataset != null ) { return result . call ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return result . call ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

129
Tree	if ( isBottom ( mockKey.mockedType ) ) { return result ; }
Code	if ( isBottom ( mockKey.mockedType ) ) { return result ; }
Distance : 4

130
Tree	if ( dataset != null ) { return this . result . b ; }
Code	if ( dataset != null ) { return this . result . b ; }
Distance : 5

131
Tree	if ( isBottom ( dataset , UNKNOWN , parent ) ) { return result ; }
Code	if ( isBottom ( dataset , UNKNOWN , parent ) ) { return result ; }
Distance : 7

132
Tree	if ( ! isBottom ( dataset ) ) { return result ; }
Code	if ( ! isBottom ( dataset ) ) { return result ; }
Distance : 5

133
Tree	if ( dataset . isBottom ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( dataset . isBottom ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 5

134
Tree	if ( fft ( dataset ) ) { return result ; }
Code	if ( fft ( dataset ) ) { return result ; }
Distance : 4

135
Tree	if ( dataset . isBottom ( dataset ) ) { return this . result . result ; }
Code	if ( dataset . isBottom ( dataset ) ) { return this . result . result ; }
Distance : 9

136
Tree	if ( dataset != null ) { return this . b ; }
Code	if ( dataset != null ) { return this . b ; }
Distance : 4

137
Tree	if ( isBottom ( dataset , hotspot ) ) { return result ; }
Code	if ( isBottom ( dataset , hotspot ) ) { return result ; }
Distance : 5

138
Tree	if ( dataset != null ) { return this . result . findStackedRangeBounds () ; }
Code	if ( dataset != null ) { return this . result . findStackedRangeBounds () ; }
Distance : 6

139
Tree	if ( dataset != null ) { return result . abs ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return result . abs ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 8

140
Tree	if ( dataset . isEmpty ( dataset ) ) { return result ; }
Code	if ( dataset . isEmpty ( dataset ) ) { return result ; }
Distance : 5

141
Tree	if ( isBottom ( dataset , CSV_SEARCH_CHARS , EMPTY ) ) { return result ; }
Code	if ( isBottom ( dataset , CSV_SEARCH_CHARS , EMPTY ) ) { return result ; }
Distance : 7

142
Tree	if ( isBottom ( currentScript.exportsToInline ) ) { return result ; }
Code	if ( isBottom ( currentScript.exportsToInline ) ) { return result ; }
Distance : 4

143
Tree	if ( dataset . isEmpty ( dataset ) ) { return this . result . result ; }
Code	if ( dataset . isEmpty ( dataset ) ) { return this . result . result ; }
Distance : 9

144
Tree	if ( this . dataset . getEmptyObjectLiteral ( dataset ) ) { return result ; }
Code	if ( this . dataset . getEmptyObjectLiteral ( dataset ) ) { return result ; }
Distance : 7

145
Tree	if ( isBottom ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED ) ) { return result ; }
Code	if ( isBottom ( LocalizedFormats.N_POINTS_GAUSS_LEGENDRE_INTEGRATOR_NOT_SUPPORTED ) ) { return result ; }
Distance : 4

146
Tree	if ( dataset != null ) { return getParent ( STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return getParent ( STRING_CONSTANT ) ; }
Distance : 5

147
Tree	if ( includeInterval ) { return result ; }
Code	if ( includeInterval ) { return result ; }
Distance : 3

148
Tree	if ( fft () ) { return result ; }
Code	if ( fft () ) { return result ; }
Distance : 3

149
Tree	if ( cls ) { return result ; }
Code	if ( cls ) { return result ; }
Distance : 3

150
Tree	if ( dataset . getParent ( dataset ) ) { return this . result . result ; }
Code	if ( dataset . getParent ( dataset ) ) { return this . result . result ; }
Distance : 9

151
Tree	if ( isBottom ( dataset , UNKNOWN ) ) { return result ; }
Code	if ( isBottom ( dataset , UNKNOWN ) ) { return result ; }
Distance : 5

152
Tree	if ( dataset != null ) { return result ; } else short
Code	if ( dataset != null ) { return result ; } else short
Distance : 3

153
Tree	if ( new Coordinates3D ( dataset ) . that ( result ) ) { return result ; }
Code	if ( new Coordinates3D ( dataset ) . that ( result ) ) { return result ; }
Distance : 9

154
Tree	if ( ! dataset . getParent ( dataset ) ) { return result ; }
Code	if ( ! dataset . getParent ( dataset ) ) { return result ; }
Distance : 6

155
Tree	if ( s != null ) { return result ; }
Code	if ( s != null ) { return result ; }
Distance : 2

156
Tree	if ( dataset != null ) { return hasChildren ( STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return hasChildren ( STRING_CONSTANT ) ; }
Distance : 5

157
Tree	if ( dataset . isEmpty () ) { return result ; }
Code	if ( dataset . isEmpty () ) { return result ; }
Distance : 3

158
Tree	if ( isPointInRect () ) { return result ; }
Code	if ( isPointInRect () ) { return result ; }
Distance : 3

159
Tree	if ( isBottom ( dataset , x ) ) { return result ; }
Code	if ( isBottom ( dataset , x ) ) { return result ; }
Distance : 5

160
Tree	if ( dataset != null ) { return result . getParent ( dataset ) ; }
Code	if ( dataset != null ) { return result . getParent ( dataset ) ; }
Distance : 6

161
Tree	if ( dataset . indexOf ( NUMBER_CONSTANT ) ) { return result ; }
Code	if ( dataset . indexOf ( NUMBER_CONSTANT ) ) { return result ; }
Distance : 5

162
Tree	if ( dataset . equal ( dataset ) ) { return this . result . result ; }
Code	if ( dataset . equal ( dataset ) ) { return this . result . result ; }
Distance : 9

163
Tree	if ( dataset != null ) { return this . type . result ; }
Code	if ( dataset != null ) { return this . type . result ; }
Distance : 5

164
Tree	if ( ! dataset . isEmptyType ( dataset ) ) { return result ; }
Code	if ( ! dataset . isEmptyType ( dataset ) ) { return result ; }
Distance : 6

165
Tree	if ( dataset != null ) { return result . hashCode ( dataset , Annotation.IMPLEMENTS ) ; }
Code	if ( dataset != null ) { return result . hashCode ( dataset , Annotation.IMPLEMENTS ) ; }
Distance : 8

166
Tree	if ( new RealMatrixImpl () . indexOf ( dataset ) ) { return result ; }
Code	if ( new RealMatrixImpl () . indexOf ( dataset ) ) { return result ; }
Distance : 8

167
Tree	if ( dataset ( s ) ) { return result ; }
Code	if ( dataset ( s ) ) { return result ; }
Distance : 3

168
Tree	if ( dataset != null ) { return this . result . charAt () ; }
Code	if ( dataset != null ) { return this . result . charAt () ; }
Distance : 6

169
Tree	if ( dataset != null ) { return this . result . type ; }
Code	if ( dataset != null ) { return this . result . type ; }
Distance : 5

170
Tree	if ( ! isEmpty ( dataset ) ) { return result ; }
Code	if ( ! isEmpty ( dataset ) ) { return result ; }
Distance : 5

171
Tree	if ( dataset != null ) { return toFormatter ( STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return toFormatter ( STRING_CONSTANT ) ; }
Distance : 5

172
Tree	if ( dataset != null ) { return this . b . result ; }
Code	if ( dataset != null ) { return this . b . result ; }
Distance : 5

173
Tree	if ( dataset != null ) { return getValue ( STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return getValue ( STRING_CONSTANT ) ; }
Distance : 5

174
Tree	if ( ch ( dataset ) ) { return result ; }
Code	if ( ch ( dataset ) ) { return result ; }
Distance : 4

175
Tree	if ( dataset != null ) { return this . type ; }
Code	if ( dataset != null ) { return this . type ; }
Distance : 4

176
Tree	if ( this . dataset . getParent ( dataset ) ) { return result ; }
Code	if ( this . dataset . getParent ( dataset ) ) { return result ; }
Distance : 7

177
Tree	if ( dataset ( ch ) ) { return result ; }
Code	if ( dataset ( ch ) ) { return result ; }
Distance : 3

178
Tree	if ( ch ) { return result ; }
Code	if ( ch ) { return result ; }
Distance : 3

179
Tree	if ( this . dataset . isEmptyType ( dataset ) ) { return result ; }
Code	if ( this . dataset . isEmptyType ( dataset ) ) { return result ; }
Distance : 7

180
Tree	if ( DatasetUtils ) { return result ; }
Code	if ( DatasetUtils ) { return result ; }
Distance : 3

181
Tree	if ( new ArrayRealVector () . indexOf ( dataset ) ) { return result ; }
Code	if ( new ArrayRealVector () . indexOf ( dataset ) ) { return result ; }
Distance : 8

182
Tree	if ( includeInterval != null ) { return this . result ; }
Code	if ( includeInterval != null ) { return this . result ; }
Distance : 4

183
Tree	if ( ! indexOf ( dataset ) ) { return result ; }
Code	if ( ! indexOf ( dataset ) ) { return result ; }
Distance : 5

184
Tree	if ( current ) { return result ; }
Code	if ( current ) { return result ; }
Distance : 3

185
Tree	if ( dataset != null ) { return this . result . createIllegalArgumentException () ; }
Code	if ( dataset != null ) { return this . result . createIllegalArgumentException () ; }
Distance : 6

186
Tree	if ( cls ( dataset ) ) { return result ; }
Code	if ( cls ( dataset ) ) { return result ; }
Distance : 4

187
Tree	if ( dataset != null ) { return this . result . implicitInterfaceUses ; }
Code	if ( dataset != null ) { return this . result . implicitInterfaceUses ; }
Distance : 5

188
Tree	if ( s != null ) { return result . hashCode ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( s != null ) { return result . hashCode ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

189
Tree	if ( this . dataset . indexOf ( includeInterval ) ) { return result ; }
Code	if ( this . dataset . indexOf ( includeInterval ) ) { return result ; }
Distance : 7

190
Tree	if ( dataset != null ) { return this . parent ; }
Code	if ( dataset != null ) { return this . parent ; }
Distance : 4

191
Tree	if ( s ) { return result ; }
Code	if ( s ) { return result ; }
Distance : 3

192
Tree	if ( dataset != null ) { return this . result . ex ; }
Code	if ( dataset != null ) { return this . result . ex ; }
Distance : 5

193
Tree	if ( dataset != null ) { return this . result . replace ; }
Code	if ( dataset != null ) { return this . result . replace ; }
Distance : 5

194
Tree	if ( dataset != null ) { return getReferenceName ( STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return getReferenceName ( STRING_CONSTANT ) ; }
Distance : 5

195
Tree	if ( cls != null ) { return this . result ; }
Code	if ( cls != null ) { return this . result ; }
Distance : 4

196
Tree	if ( this . dataset . hashCode ( dataset ) ) { return result ; }
Code	if ( this . dataset . hashCode ( dataset ) ) { return result ; }
Distance : 7

197
Tree	if ( dataset != null ) { return getPeriodType ( STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return getPeriodType ( STRING_CONSTANT ) ; }
Distance : 5

198
Tree	if ( dataset != null ) { return getEntry ( STRING_CONSTANT ) ; }
Code	if ( dataset != null ) { return getEntry ( STRING_CONSTANT ) ; }
Distance : 5

199
Tree	if ( Coordinates3D ) { return result ; }
Code	if ( Coordinates3D ) { return result ; }
Distance : 3

========================================================================


========================================================================
Example Number: 10
Parent Code is: 
name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT
-------------------------------------------------------------------------------
Child code is: 
! name.inExterns && name.globalSets == NUMBER_CONSTANT && name.localSets == NUMBER_CONSTANT && name.aliasingGets > NUMBER_CONSTANT
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (27 (27 (40{val=name.globalSets}) (236{val===}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (40{val=name.localSets}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (249{val=&&}) (27 (40{val=name.aliasingGets}) (231{val=>}) (34{val=NUMBER_CONSTANT}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (27 (27 (38 (207{val=!}) (40{val=name.inExterns})) (249{val=&&}) (27 (40{val=name.globalSets}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (249{val=&&}) (27 (40{val=name.localSets}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (249{val=&&}) (27 (40{val=name.aliasingGets}) (231{val=>}) (34{val=NUMBER_CONSTANT}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/130/parent/src_com_google_javascript_jscomp_CollapseProperties.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 144
Wrong
========================================================================
False

0
Tree	objectMethodsGuru == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	objectMethodsGuru == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

1
Tree	the_mock_type == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Code	the_mock_type == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Distance : 10

2
Tree	objectMethodsGuru == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Code	objectMethodsGuru == NUMBER_CONSTANT && MILLIS_PER_DAY > targets
Distance : 10

3
Tree	convention == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	convention == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

4
Tree	the_mock_type == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	the_mock_type == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

5
Tree	decompMatrix == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	decompMatrix == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

6
Tree	findDeps == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	findDeps == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

7
Tree	bundler == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Code	bundler == NUMBER_CONSTANT && MILLIS_PER_DAY > slots
Distance : 10

8
Tree	! java.lang.Class && current.parent.scopes == null && NUMBER_CONSTANT * MILLIS_PER_DAY
Code	! java.lang.Class && current.parent.scopes == null && NUMBER_CONSTANT * MILLIS_PER_DAY
Distance : 9

9
Tree	! current.parent.scopes && current.parent.scopes == null && NUMBER_CONSTANT * MILLIS_PER_DAY
Code	! current.parent.scopes && current.parent.scopes == null && NUMBER_CONSTANT * MILLIS_PER_DAY
Distance : 9

10
Tree	! java.lang.Class && current.parent.scopes == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - MILLIS_PER_DAY )
Code	! java.lang.Class && current.parent.scopes == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - MILLIS_PER_DAY )
Distance : 11

11
Tree	java.lang.Class . pluralize () && nextTime . contains ( NUMBER_CONSTANT - MILLIS_PER_DAY ) <= JAVA_1_8
Code	java.lang.Class . pluralize () && nextTime . contains ( NUMBER_CONSTANT - MILLIS_PER_DAY ) <= JAVA_1_8
Distance : 14

12
Tree	java.lang.Class . pluralize () && SECONDS_MILLIS . contains ( NUMBER_CONSTANT - MILLIS_PER_DAY ) <= JAVA_1_8
Code	java.lang.Class . pluralize () && SECONDS_MILLIS . contains ( NUMBER_CONSTANT - MILLIS_PER_DAY ) <= JAVA_1_8
Distance : 14

13
Tree	! java.lang.Class && current.parent.scopes == null && super
Code	! java.lang.Class && current.parent.scopes == null && super
Distance : 10

14
Tree	! current.parent.scopes && current.parent.scopes == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - MILLIS_PER_DAY )
Code	! current.parent.scopes && current.parent.scopes == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - MILLIS_PER_DAY )
Distance : 11

15
Tree	! current.parent.scopes && current.parent.scopes == null && super
Code	! current.parent.scopes && current.parent.scopes == null && super
Distance : 10

16
Tree	! java.lang.Class && current.parent.scopes == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - superEquals )
Code	! java.lang.Class && current.parent.scopes == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - superEquals )
Distance : 11

17
Tree	! current.parent.scopes && current.parent.scopes == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - superEquals )
Code	! current.parent.scopes && current.parent.scopes == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - superEquals )
Distance : 11

18
Tree	- java.lang.Class && current.parent.scopes == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - preserveAllTokens )
Code	- java.lang.Class && current.parent.scopes == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - preserveAllTokens )
Distance : 12

19
Tree	- ImmutableMultiset.Builder && current.parent.scopes == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - MILLIS_PER_DAY )
Code	- ImmutableMultiset.Builder && current.parent.scopes == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - MILLIS_PER_DAY )
Distance : 12

20
Tree	- java.lang.Class && current.parent.scopes == null && NUMBER_CONSTANT * MILLIS_PER_DAY
Code	- java.lang.Class && current.parent.scopes == null && NUMBER_CONSTANT * MILLIS_PER_DAY
Distance : 10

21
Tree	- java.lang.Class && EvalMode.NORMAL == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - MILLIS_PER_DAY )
Code	- java.lang.Class && EvalMode.NORMAL == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - MILLIS_PER_DAY )
Distance : 12

22
Tree	! java.lang.Class && EvalMode.NORMAL == null && NUMBER_CONSTANT * MILLIS_PER_DAY
Code	! java.lang.Class && EvalMode.NORMAL == null && NUMBER_CONSTANT * MILLIS_PER_DAY
Distance : 9

23
Tree	! EvalMode.NORMAL && current.parent.scopes == null && NUMBER_CONSTANT * MILLIS_PER_DAY
Code	! EvalMode.NORMAL && current.parent.scopes == null && NUMBER_CONSTANT * MILLIS_PER_DAY
Distance : 9

24
Tree	- NUMBER_CONSTANT && current.parent.scopes == null && super
Code	- NUMBER_CONSTANT && current.parent.scopes == null && super
Distance : 10

25
Tree	- NUMBER_CONSTANT && current.parent.scopes == null && super
Code	- NUMBER_CONSTANT && current.parent.scopes == null && super
Distance : 10

26
Tree	- NUMBER_CONSTANT && definitionsGatherer.definitions == null && super
Code	- NUMBER_CONSTANT && definitionsGatherer.definitions == null && super
Distance : 10

27
Tree	- NUMBER_CONSTANT && EvalMode.NORMAL == null && super
Code	- NUMBER_CONSTANT && EvalMode.NORMAL == null && super
Distance : 10

28
Tree	- java.lang.Class && definitionsGatherer.definitions == null && super
Code	- java.lang.Class && definitionsGatherer.definitions == null && super
Distance : 11

29
Tree	- inbits && EvalMode.EVAL == null && super
Code	- inbits && EvalMode.EVAL == null && super
Distance : 11

30
Tree	- NUMBER_CONSTANT && definitionsGatherer.definitions == null && super
Code	- NUMBER_CONSTANT && definitionsGatherer.definitions == null && super
Distance : 10

31
Tree	- inbits && EvalMode.NORMAL == null && super
Code	- inbits && EvalMode.NORMAL == null && super
Distance : 11

32
Tree	- NUMBER_CONSTANT && EvalMode.NORMAL == null && super
Code	- NUMBER_CONSTANT && EvalMode.NORMAL == null && super
Distance : 10

33
Tree	- newInput && StandardBasicTypes.STRING == null && super
Code	- newInput && StandardBasicTypes.STRING == null && super
Distance : 11

34
Tree	- lhsOfForInLoop && current.parent.scopes == null && super
Code	- lhsOfForInLoop && current.parent.scopes == null && super
Distance : 11

35
Tree	- java.lang.Class && LocalizedFormats.EULER_ANGLES_SINGULARITY == null && NUMBER_CONSTANT * MILLIS_PER_DAY
Code	- java.lang.Class && LocalizedFormats.EULER_ANGLES_SINGULARITY == null && NUMBER_CONSTANT * MILLIS_PER_DAY
Distance : 10

36
Tree	- inbits && EvalMode.EVAL == null && super
Code	- inbits && EvalMode.EVAL == null && super
Distance : 11

37
Tree	! StandardBasicTypes.STRING && current.parent.scopes == null && super
Code	! StandardBasicTypes.STRING && current.parent.scopes == null && super
Distance : 10

38
Tree	- divisor.mant && current.parent.scopes == null && NUMBER_CONSTANT * MILLIS_PER_DAY
Code	- divisor.mant && current.parent.scopes == null && NUMBER_CONSTANT * MILLIS_PER_DAY
Distance : 10

39
Tree	! StandardBasicTypes.STRING && current.parent.scopes == null == NUMBER_CONSTANT
Code	! StandardBasicTypes.STRING && current.parent.scopes == null == NUMBER_CONSTANT
Distance : 9

40
Tree	! java.lang.Class && current.parent.scopes == null && super
Code	! java.lang.Class && current.parent.scopes == null && super
Distance : 10

41
Tree	! StandardBasicTypes.STRING && MILLIS_PER_DAY + NUMBER_CONSTANT && super
Code	! StandardBasicTypes.STRING && MILLIS_PER_DAY + NUMBER_CONSTANT && super
Distance : 10

42
Tree	- NUMBER_CONSTANT && LocalizedFormats.EULER_ANGLES_SINGULARITY == null && super
Code	- NUMBER_CONSTANT && LocalizedFormats.EULER_ANGLES_SINGULARITY == null && super
Distance : 10

43
Tree	- inbits && EvalMode.NORMAL == null && super
Code	- inbits && EvalMode.NORMAL == null && super
Distance : 11

44
Tree	! currentScript.rootNode && current.parent.scopes == null && super
Code	! currentScript.rootNode && current.parent.scopes == null && super
Distance : 10

45
Tree	- NUMBER_CONSTANT && ParseTreeType.CALL_EXPRESSION == null && super
Code	- NUMBER_CONSTANT && ParseTreeType.CALL_EXPRESSION == null && super
Distance : 10

46
Tree	- newInput && StandardBasicTypes.STRING == null && super
Code	- newInput && StandardBasicTypes.STRING == null && super
Distance : 11

47
Tree	! IncrementalCheckMode.OFF && current.parent.scopes == null && super
Code	! IncrementalCheckMode.OFF && current.parent.scopes == null && super
Distance : 10

48
Tree	! currentScript.rootNode && current.parent.scopes == null == NUMBER_CONSTANT
Code	! currentScript.rootNode && current.parent.scopes == null == NUMBER_CONSTANT
Distance : 9

49
Tree	! current.parent.scopes && current.parent.scopes == null && super
Code	! current.parent.scopes && current.parent.scopes == null && super
Distance : 10

50
Tree	NUMBER_CONSTANT * ( MILLIS_PER_DAY * MILLIS_PER_DAY )
Code	NUMBER_CONSTANT * ( MILLIS_PER_DAY * MILLIS_PER_DAY )
Distance : 13

51
Tree	! IncrementalCheckMode.OFF && current.parent.scopes == null == NUMBER_CONSTANT
Code	! IncrementalCheckMode.OFF && current.parent.scopes == null == NUMBER_CONSTANT
Distance : 9

52
Tree	! currentScript.rootNode && MILLIS_PER_DAY + NUMBER_CONSTANT && super
Code	! currentScript.rootNode && MILLIS_PER_DAY + NUMBER_CONSTANT && super
Distance : 10

53
Tree	! java.lang.Class && MILLIS_PER_DAY + NUMBER_CONSTANT && CHAR_CONS
Code	! java.lang.Class && MILLIS_PER_DAY + NUMBER_CONSTANT && CHAR_CONS
Distance : 10

54
Tree	- NUMBER_CONSTANT && current.parent.scopes == null && CHAR_CONS
Code	- NUMBER_CONSTANT && current.parent.scopes == null && CHAR_CONS
Distance : 10

55
Tree	- NUMBER_CONSTANT && options.skipTranspilationAndCrash == null && super
Code	- NUMBER_CONSTANT && options.skipTranspilationAndCrash == null && super
Distance : 10

56
Tree	- NUMBER_CONSTANT && LocalizedFormats.EULER_ANGLES_SINGULARITY == null && super
Code	- NUMBER_CONSTANT && LocalizedFormats.EULER_ANGLES_SINGULARITY == null && super
Distance : 10

57
Tree	- NUMBER_CONSTANT && IncrementalCheckMode.OFF == null && super
Code	- NUMBER_CONSTANT && IncrementalCheckMode.OFF == null && super
Distance : 10

58
Tree	- NUMBER_CONSTANT && ParseTreeType.CALL_EXPRESSION == null && super
Code	- NUMBER_CONSTANT && ParseTreeType.CALL_EXPRESSION == null && super
Distance : 10

59
Tree	- java.lang.Class && LocalizedFormats.EULER_ANGLES_SINGULARITY == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - MILLIS_PER_DAY )
Code	- java.lang.Class && LocalizedFormats.EULER_ANGLES_SINGULARITY == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - MILLIS_PER_DAY )
Distance : 12

60
Tree	- NUMBER_CONSTANT && current.parent.scopes == null && CHAR_CONS
Code	- NUMBER_CONSTANT && current.parent.scopes == null && CHAR_CONS
Distance : 10

61
Tree	- java.lang.Class && current.parent.scopes == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - anyStringNull )
Code	- java.lang.Class && current.parent.scopes == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - anyStringNull )
Distance : 12

62
Tree	- NUMBER_CONSTANT && options.skipTranspilationAndCrash == null && super
Code	- NUMBER_CONSTANT && options.skipTranspilationAndCrash == null && super
Distance : 10

63
Tree	- ImmutableMultiset.Builder && current.parent.scopes == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - superEquals )
Code	- ImmutableMultiset.Builder && current.parent.scopes == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - superEquals )
Distance : 12

64
Tree	- NUMBER_CONSTANT && IncrementalCheckMode.OFF == null && super
Code	- NUMBER_CONSTANT && IncrementalCheckMode.OFF == null && super
Distance : 10

65
Tree	! IncrementalCheckMode.OFF && MILLIS_PER_DAY + NUMBER_CONSTANT && super
Code	! IncrementalCheckMode.OFF && MILLIS_PER_DAY + NUMBER_CONSTANT && super
Distance : 10

66
Tree	java.lang.Class == NUMBER_CONSTANT && current.parent.scopes == NUMBER_CONSTANT && currentState.length > NUMBER_CONSTANT
Code	java.lang.Class == NUMBER_CONSTANT && current.parent.scopes == NUMBER_CONSTANT && currentState.length > NUMBER_CONSTANT
Distance : 6

67
Tree	java.lang.Class == NUMBER_CONSTANT && EvalMode.NORMAL == NUMBER_CONSTANT && IncrementalCheckMode.OFF > NUMBER_CONSTANT
Code	java.lang.Class == NUMBER_CONSTANT && EvalMode.NORMAL == NUMBER_CONSTANT && IncrementalCheckMode.OFF > NUMBER_CONSTANT
Distance : 6

68
Tree	! current.parent.scopes && MILLIS_PER_DAY + NUMBER_CONSTANT && CHAR_CONS
Code	! current.parent.scopes && MILLIS_PER_DAY + NUMBER_CONSTANT && CHAR_CONS
Distance : 10

69
Tree	! java.lang.Class && EvalMode.NORMAL == null && super
Code	! java.lang.Class && EvalMode.NORMAL == null && super
Distance : 10

70
Tree	java.lang.Class == NUMBER_CONSTANT && current.parent.scopes == NUMBER_CONSTANT && currentScript.rootNode > NUMBER_CONSTANT
Code	java.lang.Class == NUMBER_CONSTANT && current.parent.scopes == NUMBER_CONSTANT && currentScript.rootNode > NUMBER_CONSTANT
Distance : 6

71
Tree	! EvalMode.NORMAL && current.parent.scopes == null && super
Code	! EvalMode.NORMAL && current.parent.scopes == null && super
Distance : 10

72
Tree	! current.parent.scopes && EvalMode.NORMAL == null && super
Code	! current.parent.scopes && EvalMode.NORMAL == null && super
Distance : 10

73
Tree	- ImmutableMultiset.Builder && current.parent.scopes == null && NUMBER_CONSTANT * MILLIS_PER_DAY
Code	- ImmutableMultiset.Builder && current.parent.scopes == null && NUMBER_CONSTANT * MILLIS_PER_DAY
Distance : 10

74
Tree	java.lang.Class == NUMBER_CONSTANT && current.parent.scopes == NUMBER_CONSTANT && Config.StrictMode.SLOPPY > NUMBER_CONSTANT
Code	java.lang.Class == NUMBER_CONSTANT && current.parent.scopes == NUMBER_CONSTANT && Config.StrictMode.SLOPPY > NUMBER_CONSTANT
Distance : 6

75
Tree	java.lang.Class == NUMBER_CONSTANT && current.parent.scopes == NUMBER_CONSTANT && LocalizedFormats.EULER_ANGLES_SINGULARITY > NUMBER_CONSTANT
Code	java.lang.Class == NUMBER_CONSTANT && current.parent.scopes == NUMBER_CONSTANT && LocalizedFormats.EULER_ANGLES_SINGULARITY > NUMBER_CONSTANT
Distance : 6

76
Tree	java.lang.Class == NUMBER_CONSTANT && current.parent.scopes == NUMBER_CONSTANT && current.parent.scopes > NUMBER_CONSTANT
Code	java.lang.Class == NUMBER_CONSTANT && current.parent.scopes == NUMBER_CONSTANT && current.parent.scopes > NUMBER_CONSTANT
Distance : 6

77
Tree	java.lang.Class . pluralize () && MILLIS_PER_DAY . contains ( NUMBER_CONSTANT - MILLIS_PER_DAY ) <= JAVA_1_8
Code	java.lang.Class . pluralize () && MILLIS_PER_DAY . contains ( NUMBER_CONSTANT - MILLIS_PER_DAY ) <= JAVA_1_8
Distance : 14

78
Tree	java.lang.Class . pluralize () && MILLIS_PER_DAY . contains ( NUMBER_CONSTANT - superEquals ) <= JAVA_1_8
Code	java.lang.Class . pluralize () && MILLIS_PER_DAY . contains ( NUMBER_CONSTANT - superEquals ) <= JAVA_1_8
Distance : 14

79
Tree	java.lang.Class . pluralize () && MILLIS_PER_DAY . contains ( NUMBER_CONSTANT - MILLIS_PER_DAY ) <= MILLIS_PER_DAY
Code	java.lang.Class . pluralize () && MILLIS_PER_DAY . contains ( NUMBER_CONSTANT - MILLIS_PER_DAY ) <= MILLIS_PER_DAY
Distance : 14

80
Tree	java.lang.Class . pluralize () && MILLIS_PER_DAY . contains ( NUMBER_CONSTANT - preserveAllTokens ) <= JAVA_1_8
Code	java.lang.Class . pluralize () && MILLIS_PER_DAY . contains ( NUMBER_CONSTANT - preserveAllTokens ) <= JAVA_1_8
Distance : 14

81
Tree	- java.lang.Class && EvalMode.NORMAL == null && NUMBER_CONSTANT * MILLIS_PER_DAY
Code	- java.lang.Class && EvalMode.NORMAL == null && NUMBER_CONSTANT * MILLIS_PER_DAY
Distance : 10

82
Tree	java.lang.Class . pluralize () && MILLIS_PER_DAY . contains ( NUMBER_CONSTANT - MILLIS_PER_DAY ) <= dpi
Code	java.lang.Class . pluralize () && MILLIS_PER_DAY . contains ( NUMBER_CONSTANT - MILLIS_PER_DAY ) <= dpi
Distance : 14

83
Tree	- java.lang.Class && current.parent.scopes == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - MILLIS_PER_DAY )
Code	- java.lang.Class && current.parent.scopes == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - MILLIS_PER_DAY )
Distance : 12

84
Tree	java.lang.Class == NUMBER_CONSTANT && current.parent.scopes == NUMBER_CONSTANT && IncrementalCheckMode.OFF > NUMBER_CONSTANT
Code	java.lang.Class == NUMBER_CONSTANT && current.parent.scopes == NUMBER_CONSTANT && IncrementalCheckMode.OFF > NUMBER_CONSTANT
Distance : 6

85
Tree	java.lang.Class == NUMBER_CONSTANT && current.parent.scopes == NUMBER_CONSTANT && IncrementalCheckMode.GENERATE_IJS > NUMBER_CONSTANT
Code	java.lang.Class == NUMBER_CONSTANT && current.parent.scopes == NUMBER_CONSTANT && IncrementalCheckMode.GENERATE_IJS > NUMBER_CONSTANT
Distance : 6

86
Tree	- newInput && EvalMode.NORMAL == null && super
Code	- newInput && EvalMode.NORMAL == null && super
Distance : 11

87
Tree	- newInput && EvalMode.EVAL == null && super
Code	- newInput && EvalMode.EVAL == null && super
Distance : 11

88
Tree	java.lang.Class . pluralize () && MILLIS . contains ( NUMBER_CONSTANT - MILLIS_PER_DAY ) <= JAVA_1_8
Code	java.lang.Class . pluralize () && MILLIS . contains ( NUMBER_CONSTANT - MILLIS_PER_DAY ) <= JAVA_1_8
Distance : 14

89
Tree	- inbits && current.parent.scopes == null && super
Code	- inbits && current.parent.scopes == null && super
Distance : 11

90
Tree	- java.lang.Class && current.parent.scopes == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - superEquals )
Code	- java.lang.Class && current.parent.scopes == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - superEquals )
Distance : 12

91
Tree	- newInput && EvalMode.NORMAL == null && super
Code	- newInput && EvalMode.NORMAL == null && super
Distance : 11

92
Tree	- java.lang.Class && Year.MAXIMUM_YEAR == null && super
Code	- java.lang.Class && Year.MAXIMUM_YEAR == null && super
Distance : 11

93
Tree	- inbits && current.parent.scopes == null && super
Code	- inbits && current.parent.scopes == null && super
Distance : 11

94
Tree	- java.lang.Class && IncrementalCheckMode.OFF == null && super
Code	- java.lang.Class && IncrementalCheckMode.OFF == null && super
Distance : 11

95
Tree	- lhsOfForInLoop && current.parent.scopes == null && super
Code	- lhsOfForInLoop && current.parent.scopes == null && super
Distance : 11

96
Tree	NUMBER_CONSTANT * ( MILLIS * qrRankingThreshold )
Code	NUMBER_CONSTANT * ( MILLIS * qrRankingThreshold )
Distance : 13

97
Tree	NUMBER_CONSTANT * ( nextTime * maxUlps )
Code	NUMBER_CONSTANT * ( nextTime * maxUlps )
Distance : 13

98
Tree	! java.lang.Class && EvalMode.NORMAL == null && super
Code	! java.lang.Class && EvalMode.NORMAL == null && super
Distance : 10

99
Tree	! EvalMode.NORMAL && current.parent.scopes == null && super
Code	! EvalMode.NORMAL && current.parent.scopes == null && super
Distance : 10

100
Tree	! java.lang.Class && NUMBER_CONSTANT - MILLIS_PER_DAY && >=
Code	! java.lang.Class && NUMBER_CONSTANT - MILLIS_PER_DAY && >=
Distance : 10

101
Tree	! java.lang.Class && current.parent.scopes == null == NUMBER_CONSTANT
Code	! java.lang.Class && current.parent.scopes == null == NUMBER_CONSTANT
Distance : 9

102
Tree	! java.lang.Class && MILLIS_PER_DAY + NUMBER_CONSTANT && super
Code	! java.lang.Class && MILLIS_PER_DAY + NUMBER_CONSTANT && super
Distance : 10

103
Tree	- java.lang.Class && current.parent.scopes == null && super
Code	- java.lang.Class && current.parent.scopes == null && super
Distance : 11

104
Tree	! current.parent.scopes && NUMBER_CONSTANT - MILLIS_PER_DAY && >=
Code	! current.parent.scopes && NUMBER_CONSTANT - MILLIS_PER_DAY && >=
Distance : 10

105
Tree	- newInput && current.parent.scopes == null && super
Code	- newInput && current.parent.scopes == null && super
Distance : 11

106
Tree	! current.parent.scopes && EvalMode.NORMAL == null && super
Code	! current.parent.scopes && EvalMode.NORMAL == null && super
Distance : 10

107
Tree	- ImmutableMultiset.Builder && current.parent.scopes == null && super
Code	- ImmutableMultiset.Builder && current.parent.scopes == null && super
Distance : 11

108
Tree	! java.lang.Class && NUMBER_CONSTANT - MILLIS_PER_DAY && ^
Code	! java.lang.Class && NUMBER_CONSTANT - MILLIS_PER_DAY && ^
Distance : 10

109
Tree	! current.parent.scopes && current.parent.scopes == null == NUMBER_CONSTANT
Code	! current.parent.scopes && current.parent.scopes == null == NUMBER_CONSTANT
Distance : 9

110
Tree	! current.parent.scopes && NUMBER_CONSTANT - MILLIS_PER_DAY && ^
Code	! current.parent.scopes && NUMBER_CONSTANT - MILLIS_PER_DAY && ^
Distance : 10

111
Tree	! current.parent.scopes && MILLIS_PER_DAY + NUMBER_CONSTANT && super
Code	! current.parent.scopes && MILLIS_PER_DAY + NUMBER_CONSTANT && super
Distance : 10

112
Tree	- java.lang.Class && EvalMode.NORMAL == null && super
Code	- java.lang.Class && EvalMode.NORMAL == null && super
Distance : 11

113
Tree	! currentScript.rootNode && current.parent.scopes == null && super
Code	! currentScript.rootNode && current.parent.scopes == null && super
Distance : 10

114
Tree	! StandardBasicTypes.STRING && current.parent.scopes == null && super
Code	! StandardBasicTypes.STRING && current.parent.scopes == null && super
Distance : 10

115
Tree	- java.lang.Class && LocalizedFormats.EULER_ANGLES_SINGULARITY == null && super
Code	- java.lang.Class && LocalizedFormats.EULER_ANGLES_SINGULARITY == null && super
Distance : 11

116
Tree	- newInput && current.parent.scopes == null && super
Code	- newInput && current.parent.scopes == null && super
Distance : 11

117
Tree	- newInput && EvalMode.EVAL == null && super
Code	- newInput && EvalMode.EVAL == null && super
Distance : 11

118
Tree	! java.lang.Class && NUMBER_CONSTANT - MILLIS_PER_DAY && /
Code	! java.lang.Class && NUMBER_CONSTANT - MILLIS_PER_DAY && /
Distance : 10

119
Tree	- divisor.mant && current.parent.scopes == null && super
Code	- divisor.mant && current.parent.scopes == null && super
Distance : 11

120
Tree	! IncrementalCheckMode.OFF && current.parent.scopes == null && super
Code	! IncrementalCheckMode.OFF && current.parent.scopes == null && super
Distance : 10

121
Tree	! current.parent.scopes && NUMBER_CONSTANT - MILLIS_PER_DAY && /
Code	! current.parent.scopes && NUMBER_CONSTANT - MILLIS_PER_DAY && /
Distance : 10

122
Tree	! EvalMode.NORMAL && NUMBER_CONSTANT - MILLIS_PER_DAY && ^
Code	! EvalMode.NORMAL && NUMBER_CONSTANT - MILLIS_PER_DAY && ^
Distance : 10

123
Tree	! java.lang.Class && EvalMode.NORMAL == null == NUMBER_CONSTANT
Code	! java.lang.Class && EvalMode.NORMAL == null == NUMBER_CONSTANT
Distance : 9

124
Tree	! java.lang.Class && current.parent.scopes == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - preserveAllTokens )
Code	! java.lang.Class && current.parent.scopes == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - preserveAllTokens )
Distance : 11

125
Tree	! EvalMode.NORMAL && NUMBER_CONSTANT - MILLIS_PER_DAY && >=
Code	! EvalMode.NORMAL && NUMBER_CONSTANT - MILLIS_PER_DAY && >=
Distance : 10

126
Tree	! current.parent.scopes && EvalMode.NORMAL == null && NUMBER_CONSTANT * MILLIS_PER_DAY
Code	! current.parent.scopes && EvalMode.NORMAL == null && NUMBER_CONSTANT * MILLIS_PER_DAY
Distance : 9

127
Tree	! java.lang.Class && EvalMode.NORMAL == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - MILLIS_PER_DAY )
Code	! java.lang.Class && EvalMode.NORMAL == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - MILLIS_PER_DAY )
Distance : 11

128
Tree	! current.parent.scopes && current.parent.scopes == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - preserveAllTokens )
Code	! current.parent.scopes && current.parent.scopes == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - preserveAllTokens )
Distance : 11

129
Tree	! java.lang.Class && current.parent.scopes == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - anyStringNull )
Code	! java.lang.Class && current.parent.scopes == null && MILLIS_PER_DAY . of ( NUMBER_CONSTANT - anyStringNull )
Distance : 11

130
Tree	! EvalMode.NORMAL && current.parent.scopes == null == NUMBER_CONSTANT
Code	! EvalMode.NORMAL && current.parent.scopes == null == NUMBER_CONSTANT
Distance : 9

131
Tree	! current.parent.scopes && EvalMode.NORMAL == null == NUMBER_CONSTANT
Code	! current.parent.scopes && EvalMode.NORMAL == null == NUMBER_CONSTANT
Distance : 9

132
Tree	! StandardBasicTypes.STRING && current.parent.scopes == null && NUMBER_CONSTANT * MILLIS_PER_DAY
Code	! StandardBasicTypes.STRING && current.parent.scopes == null && NUMBER_CONSTANT * MILLIS_PER_DAY
Distance : 9

133
Tree	! java.lang.Class && current.parent.scopes == null && NUMBER_CONSTANT * anyStringNull
Code	! java.lang.Class && current.parent.scopes == null && NUMBER_CONSTANT * anyStringNull
Distance : 9

134
Tree	! EvalMode.NORMAL && MILLIS_PER_DAY + NUMBER_CONSTANT && super
Code	! EvalMode.NORMAL && MILLIS_PER_DAY + NUMBER_CONSTANT && super
Distance : 10

135
Tree	! current.parent.scopes && current.parent.scopes == null && NUMBER_CONSTANT * anyStringNull
Code	! current.parent.scopes && current.parent.scopes == null && NUMBER_CONSTANT * anyStringNull
Distance : 9

136
Tree	- java.lang.Class && Year.MAXIMUM_YEAR == null && NUMBER_CONSTANT * MILLIS_PER_DAY
Code	- java.lang.Class && Year.MAXIMUM_YEAR == null && NUMBER_CONSTANT * MILLIS_PER_DAY
Distance : 10

137
Tree	NUMBER_CONSTANT * ( nextTime * MILLIS_PER_DAY )
Code	NUMBER_CONSTANT * ( nextTime * MILLIS_PER_DAY )
Distance : 13

138
Tree	- java.lang.Class && definitionsGatherer.definitions == null && NUMBER_CONSTANT * MILLIS_PER_DAY
Code	- java.lang.Class && definitionsGatherer.definitions == null && NUMBER_CONSTANT * MILLIS_PER_DAY
Distance : 10

139
Tree	NUMBER_CONSTANT * ( MILLIS_PER_DAY * qrRankingThreshold )
Code	NUMBER_CONSTANT * ( MILLIS_PER_DAY * qrRankingThreshold )
Distance : 13

140
Tree	- java.lang.Class && IncrementalCheckMode.OFF == null && NUMBER_CONSTANT * MILLIS_PER_DAY
Code	- java.lang.Class && IncrementalCheckMode.OFF == null && NUMBER_CONSTANT * MILLIS_PER_DAY
Distance : 10

141
Tree	NUMBER_CONSTANT * ( nextTime * qrRankingThreshold )
Code	NUMBER_CONSTANT * ( nextTime * qrRankingThreshold )
Distance : 13

142
Tree	NUMBER_CONSTANT * ( MILLIS * MILLIS_PER_DAY )
Code	NUMBER_CONSTANT * ( MILLIS * MILLIS_PER_DAY )
Distance : 13

143
Tree	NUMBER_CONSTANT * ( MILLIS_PER_DAY * maxUlps )
Code	NUMBER_CONSTANT * ( MILLIS_PER_DAY * maxUlps )
Distance : 13

========================================================================


========================================================================
Example Number: 11
Parent Code is: 
Context rhsContext = Context.OTHER ;
-------------------------------------------------------------------------------
Child code is: 
Context rhsContext = getContextForNoInOperator ( context ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Context})) (59 (800{val=rhsContext}) (204{val==}) (40{val=Context.OTHER})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Context})) (59 (800{val=rhsContext}) (204{val==}) (32 (802{val=getContextForNoInOperator}) (214{val=(}) (800{val=context}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/123/parent/src_com_google_javascript_jscomp_CodeGenerator.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	TypeMockability tok2 = source.contractionCriterion ;
Code	TypeMockability tok2 = source.contractionCriterion ;
Distance : 6

1
Tree	ContainsExtraTypeInformation tok2 = getOrCreateName ;
Code	ContainsExtraTypeInformation tok2 = getOrCreateName ;
Distance : 6

2
Tree	TypeMockability tok2 = STRING_CONSTANT ;
Code	TypeMockability tok2 = STRING_CONSTANT ;
Distance : 6

3
Tree	NumericEntityUnescaper tok2 = null ;
Code	NumericEntityUnescaper tok2 = null ;
Distance : 6

4
Tree	EntityBlockParams tok2 = STRING_CONSTANT ;
Code	EntityBlockParams tok2 = STRING_CONSTANT ;
Distance : 6

5
Tree	VerificationStartedEvent tok2 = binaryComparator ? EvalMode.EVAL : FunctionFlavor.NORMAL ;
Code	VerificationStartedEvent tok2 = binaryComparator ? EvalMode.EVAL : FunctionFlavor.NORMAL ;
Distance : 7

6
Tree	StringWriter [] centers = source.contractionCriterion ;
Code	StringWriter [] centers = source.contractionCriterion ;
Distance : 7

7
Tree	StringWriter tok2 = requirePrinter ( NEGATIVE_VAR_COLUMN_LABEL ) ;
Code	StringWriter tok2 = requirePrinter ( NEGATIVE_VAR_COLUMN_LABEL ) ;
Distance : 4

8
Tree	scopeBuilder hoistedScope = source.contractionCriterion ;
Code	scopeBuilder hoistedScope = source.contractionCriterion ;
Distance : 6

9
Tree	lhsOfForInLoop tok2 = source.contractionCriterion ;
Code	lhsOfForInLoop tok2 = source.contractionCriterion ;
Distance : 6

10
Tree	UnmockableHashCodeAndEquals tok2 = source.contractionCriterion ;
Code	UnmockableHashCodeAndEquals tok2 = source.contractionCriterion ;
Distance : 6

11
Tree	ContainsExtraTypeInformation tok2 = requirePrinter ( MINUTES , NUMBER_CONSTANT ) ;
Code	ContainsExtraTypeInformation tok2 = requirePrinter ( MINUTES , NUMBER_CONSTANT ) ;
Distance : 6

12
Tree	StringWriter icme = new SymmLQEvent () ;
Code	StringWriter icme = new SymmLQEvent () ;
Distance : 6

13
Tree	EntityBlockParams tok2 = new SymmLQEvent () ;
Code	EntityBlockParams tok2 = new SymmLQEvent () ;
Distance : 6

14
Tree	ContainsExtraTypeInformation tok2 = false ;
Code	ContainsExtraTypeInformation tok2 = false ;
Distance : 6

15
Tree	ContainsExtraTypeInformation tok2 = this . defaultOutlinePaint ;
Code	ContainsExtraTypeInformation tok2 = this . defaultOutlinePaint ;
Distance : 6

16
Tree	ContainsExtraTypeInformation [] ya = source.contractionCriterion ;
Code	ContainsExtraTypeInformation [] ya = source.contractionCriterion ;
Distance : 7

17
Tree	ContainsExtraTypeInformation tok2 = this . maximumCategoryLabelLines ;
Code	ContainsExtraTypeInformation tok2 = this . maximumCategoryLabelLines ;
Distance : 6

18
Tree	StringWriter tok2 = requirePrinter ( SECONDS_MILLIS , false ) ;
Code	StringWriter tok2 = requirePrinter ( SECONDS_MILLIS , false ) ;
Distance : 6

19
Tree	TypeMockability tok2 = new SymmLQEvent () ;
Code	TypeMockability tok2 = new SymmLQEvent () ;
Distance : 6

20
Tree	Dialog tok2 = null ;
Code	Dialog tok2 = null ;
Distance : 6

21
Tree	Dialog tok2 = source.contractionCriterion ;
Code	Dialog tok2 = source.contractionCriterion ;
Distance : 6

22
Tree	Dialog tok2 = true ;
Code	Dialog tok2 = true ;
Distance : 6

23
Tree	ContainsExtraTypeInformation tok2 = this . paletteName ;
Code	ContainsExtraTypeInformation tok2 = this . paletteName ;
Distance : 6

24
Tree	TypeMockability tok2 = true ;
Code	TypeMockability tok2 = true ;
Distance : 6

25
Tree	Dialog tok2 = STRING_CONSTANT ;
Code	Dialog tok2 = STRING_CONSTANT ;
Distance : 6

26
Tree	EntityBlockParams tok2 = null ;
Code	EntityBlockParams tok2 = null ;
Distance : 6

27
Tree	StringWriter icme = null ;
Code	StringWriter icme = null ;
Distance : 6

28
Tree	TypeMockability tok2 = null ;
Code	TypeMockability tok2 = null ;
Distance : 6

29
Tree	StringWriter icme = STRING_CONSTANT ;
Code	StringWriter icme = STRING_CONSTANT ;
Distance : 6

30
Tree	EntityBlockParams tok2 = source.contractionCriterion ;
Code	EntityBlockParams tok2 = source.contractionCriterion ;
Distance : 6

31
Tree	ContainsExtraTypeInformation tok2 = binaryComparator ? EvalMode.EVAL : EvalMode.NORMAL ;
Code	ContainsExtraTypeInformation tok2 = binaryComparator ? EvalMode.EVAL : EvalMode.NORMAL ;
Distance : 7

32
Tree	final DeclaredTypeRegistry tok2 = source.contractionCriterion ;
Code	final DeclaredTypeRegistry tok2 = source.contractionCriterion ;
Distance : 7

33
Tree	final StringWriter tok2 = source.contractionCriterion ;
Code	final StringWriter tok2 = source.contractionCriterion ;
Distance : 7

34
Tree	final AccessibleObject tok2 = source.contractionCriterion ;
Code	final AccessibleObject tok2 = source.contractionCriterion ;
Distance : 7

35
Tree	final NumericEntityUnescaper tok2 = source.contractionCriterion ;
Code	final NumericEntityUnescaper tok2 = source.contractionCriterion ;
Distance : 7

36
Tree	NumericEntityUnescaper tok2 = STRING_CONSTANT ;
Code	NumericEntityUnescaper tok2 = STRING_CONSTANT ;
Distance : 6

37
Tree	StringWriter tok2 = ReadablePeriodConverter ? EvalMode.EVAL : FunctionFlavor.NORMAL ;
Code	StringWriter tok2 = ReadablePeriodConverter ? EvalMode.EVAL : FunctionFlavor.NORMAL ;
Distance : 7

38
Tree	StringWriter tok2 = new SymmLQEvent () ;
Code	StringWriter tok2 = new SymmLQEvent () ;
Distance : 6

39
Tree	StringWriter tok2 = null ;
Code	StringWriter tok2 = null ;
Distance : 6

40
Tree	StringWriter tok2 = STRING_CONSTANT ;
Code	StringWriter tok2 = STRING_CONSTANT ;
Distance : 6

41
Tree	Dialog tok2 = binaryComparator ? EvalMode.EVAL : FunctionFlavor.NORMAL ;
Code	Dialog tok2 = binaryComparator ? EvalMode.EVAL : FunctionFlavor.NORMAL ;
Distance : 7

42
Tree	EntityBlockParams tok2 = binaryComparator ? EvalMode.EVAL : FunctionFlavor.NORMAL ;
Code	EntityBlockParams tok2 = binaryComparator ? EvalMode.EVAL : FunctionFlavor.NORMAL ;
Distance : 7

43
Tree	StringWriter tok2 = source.contractionCriterion ;
Code	StringWriter tok2 = source.contractionCriterion ;
Distance : 6

44
Tree	ContainsExtraTypeInformation [] centers = source.contractionCriterion ;
Code	ContainsExtraTypeInformation [] centers = source.contractionCriterion ;
Distance : 7

45
Tree	StringWriter tok2 = requirePrinter ( MINUTES ) ;
Code	StringWriter tok2 = requirePrinter ( MINUTES ) ;
Distance : 4

46
Tree	StringWriter tok2 = source.contractionCriterion ;
Code	StringWriter tok2 = source.contractionCriterion ;
Distance : 6

47
Tree	VerificationStartedEvent [] ya = source.contractionCriterion ;
Code	VerificationStartedEvent [] ya = source.contractionCriterion ;
Distance : 7

48
Tree	ContainsExtraTypeInformation tok2 = source.contractionCriterion ;
Code	ContainsExtraTypeInformation tok2 = source.contractionCriterion ;
Distance : 6

49
Tree	VerificationStartedEvent tok2 = source.contractionCriterion ;
Code	VerificationStartedEvent tok2 = source.contractionCriterion ;
Distance : 6

50
Tree	StringWriter tok2 ;
Code	StringWriter tok2 ;
Distance : 7

51
Tree	ContainsExtraTypeInformation tok2 ;
Code	ContainsExtraTypeInformation tok2 ;
Distance : 7

52
Tree	ContainsExtraTypeInformation tok2 = requirePrinter ( NEGATIVE_VAR_COLUMN_LABEL ) ;
Code	ContainsExtraTypeInformation tok2 = requirePrinter ( NEGATIVE_VAR_COLUMN_LABEL ) ;
Distance : 4

53
Tree	VerificationStartedEvent tok2 ;
Code	VerificationStartedEvent tok2 ;
Distance : 7

54
Tree	Dialog tok2 = source.contractionCriterion ;
Code	Dialog tok2 = source.contractionCriterion ;
Distance : 6

55
Tree	StringWriter tok2 = binaryComparator ? EvalMode.EVAL : FunctionFlavor.NORMAL ;
Code	StringWriter tok2 = binaryComparator ? EvalMode.EVAL : FunctionFlavor.NORMAL ;
Distance : 7

56
Tree	StringWriter tok2 = this . isArrowAtTop ;
Code	StringWriter tok2 = this . isArrowAtTop ;
Distance : 6

57
Tree	ContainsExtraTypeInformation tok2 = binaryComparator ? EvalMode.EVAL : FunctionFlavor.NORMAL ;
Code	ContainsExtraTypeInformation tok2 = binaryComparator ? EvalMode.EVAL : FunctionFlavor.NORMAL ;
Distance : 7

58
Tree	Dialog tok2 ;
Code	Dialog tok2 ;
Distance : 7

59
Tree	ContainsExtraTypeInformation tok2 = this . isArrowAtTop ;
Code	ContainsExtraTypeInformation tok2 = this . isArrowAtTop ;
Distance : 6

60
Tree	EntityBlockParams tok2 = source.contractionCriterion ;
Code	EntityBlockParams tok2 = source.contractionCriterion ;
Distance : 6

61
Tree	StringWriter icme = NUMBER_CONSTANT ;
Code	StringWriter icme = NUMBER_CONSTANT ;
Distance : 6

62
Tree	NumericEntityUnescaper tok2 = NUMBER_CONSTANT ;
Code	NumericEntityUnescaper tok2 = NUMBER_CONSTANT ;
Distance : 6

63
Tree	StringWriter tok2 = binaryComparator . newCachedThreadPool () ;
Code	StringWriter tok2 = binaryComparator . newCachedThreadPool () ;
Distance : 6

64
Tree	VerificationStartedEvent tok2 = new SymmLQEvent () ;
Code	VerificationStartedEvent tok2 = new SymmLQEvent () ;
Distance : 6

65
Tree	EntityBlockParams tok2 ;
Code	EntityBlockParams tok2 ;
Distance : 7

66
Tree	VerificationStartedEvent tok2 = binaryComparator ;
Code	VerificationStartedEvent tok2 = binaryComparator ;
Distance : 6

67
Tree	TypeMockability tok2 = source.contractionCriterion ;
Code	TypeMockability tok2 = source.contractionCriterion ;
Distance : 6

68
Tree	ContainsExtraTypeInformation tok2 = binaryComparator . newCachedThreadPool () ;
Code	ContainsExtraTypeInformation tok2 = binaryComparator . newCachedThreadPool () ;
Distance : 6

69
Tree	TypeMockability tok2 = binaryComparator ;
Code	TypeMockability tok2 = binaryComparator ;
Distance : 6

70
Tree	StringWriter [] ya = source.contractionCriterion ;
Code	StringWriter [] ya = source.contractionCriterion ;
Distance : 7

71
Tree	StringWriter icme = source.contractionCriterion ;
Code	StringWriter icme = source.contractionCriterion ;
Distance : 6

72
Tree	Dialog tok2 = binaryComparator ;
Code	Dialog tok2 = binaryComparator ;
Distance : 6

73
Tree	StringWriter tok2 = binaryComparator . newBrentSolver () ;
Code	StringWriter tok2 = binaryComparator . newBrentSolver () ;
Distance : 6

74
Tree	StringWriter tok2 = ReadablePeriodConverter ;
Code	StringWriter tok2 = ReadablePeriodConverter ;
Distance : 6

75
Tree	TypeMockability tok2 ;
Code	TypeMockability tok2 ;
Distance : 7

76
Tree	StringWriter tok2 = binaryComparator . compareFiles () ;
Code	StringWriter tok2 = binaryComparator . compareFiles () ;
Distance : 6

77
Tree	StringWriter icme ;
Code	StringWriter icme ;
Distance : 7

78
Tree	NumericEntityUnescaper tok2 = source.contractionCriterion ;
Code	NumericEntityUnescaper tok2 = source.contractionCriterion ;
Distance : 6

79
Tree	EntityBlockParams tok2 = binaryComparator ;
Code	EntityBlockParams tok2 = binaryComparator ;
Distance : 6

80
Tree	StringWriter icme = binaryComparator ;
Code	StringWriter icme = binaryComparator ;
Distance : 6

81
Tree	NumericEntityUnescaper tok2 ;
Code	NumericEntityUnescaper tok2 ;
Distance : 7

82
Tree	ContainsExtraTypeInformation tok2 = binaryComparator . newBrentSolver () ;
Code	ContainsExtraTypeInformation tok2 = binaryComparator . newBrentSolver () ;
Distance : 6

83
Tree	StringWriter tok2 = this . paletteName ;
Code	StringWriter tok2 = this . paletteName ;
Distance : 6

84
Tree	VerificationStartedEvent tok2 = requirePrinter ( NEGATIVE_VAR_COLUMN_LABEL ) ;
Code	VerificationStartedEvent tok2 = requirePrinter ( NEGATIVE_VAR_COLUMN_LABEL ) ;
Distance : 4

85
Tree	ContainsExtraTypeInformation tok2 = binaryComparator . compareFiles () ;
Code	ContainsExtraTypeInformation tok2 = binaryComparator . compareFiles () ;
Distance : 6

86
Tree	ContainsExtraTypeInformation tok2 = requirePrinter ( SECONDS_MILLIS ) ;
Code	ContainsExtraTypeInformation tok2 = requirePrinter ( SECONDS_MILLIS ) ;
Distance : 4

87
Tree	boolean tok2 ;
Code	boolean tok2 ;
Distance : 7

88
Tree	VerificationStartedEvent tok2 = null ;
Code	VerificationStartedEvent tok2 = null ;
Distance : 6

89
Tree	StringWriter tok2 = binaryComparator . copySelf () ;
Code	StringWriter tok2 = binaryComparator . copySelf () ;
Distance : 6

90
Tree	StringWriter tok2 = requirePrinter ( MILLIS ) ;
Code	StringWriter tok2 = requirePrinter ( MILLIS ) ;
Distance : 4

91
Tree	VerificationStartedEvent tok2 = binaryComparator . newCachedThreadPool () ;
Code	VerificationStartedEvent tok2 = binaryComparator . newCachedThreadPool () ;
Distance : 6

92
Tree	ContainsExtraTypeInformation tok2 = true ;
Code	ContainsExtraTypeInformation tok2 = true ;
Distance : 6

93
Tree	final Formattable tok2 = source.contractionCriterion ;
Code	final Formattable tok2 = source.contractionCriterion ;
Distance : 7

94
Tree	ContainsExtraTypeInformation tok2 = new SymmLQEvent () ;
Code	ContainsExtraTypeInformation tok2 = new SymmLQEvent () ;
Distance : 6

95
Tree	final MutableByte tok2 = source.contractionCriterion ;
Code	final MutableByte tok2 = source.contractionCriterion ;
Distance : 7

96
Tree	boolean lhsOfForInLoop ;
Code	boolean lhsOfForInLoop ;
Distance : 7

97
Tree	final DeclaredTypeRegistry dstat = source.contractionCriterion ;
Code	final DeclaredTypeRegistry dstat = source.contractionCriterion ;
Distance : 7

98
Tree	StringWriter tok2 = requirePrinter ( NEGATIVE_VAR_COLUMN_LABEL , false ) ;
Code	StringWriter tok2 = requirePrinter ( NEGATIVE_VAR_COLUMN_LABEL , false ) ;
Distance : 6

99
Tree	ContainsExtraTypeInformation tok2 = null ;
Code	ContainsExtraTypeInformation tok2 = null ;
Distance : 6

100
Tree	StringWriter tok2 = requirePrinter ( MINUTES , NUMBER_CONSTANT ) ;
Code	StringWriter tok2 = requirePrinter ( MINUTES , NUMBER_CONSTANT ) ;
Distance : 6

101
Tree	StringWriter tok2 = false ;
Code	StringWriter tok2 = false ;
Distance : 6

102
Tree	boolean tDistribution ;
Code	boolean tDistribution ;
Distance : 7

103
Tree	ContainsExtraTypeInformation tok2 = new SymmLQEvent ( ignoredCommit , DECLARE_LEGACY_NAMESPACE_OUTSIDE_GOOG_MODULE ) ;
Code	ContainsExtraTypeInformation tok2 = new SymmLQEvent ( ignoredCommit , DECLARE_LEGACY_NAMESPACE_OUTSIDE_GOOG_MODULE ) ;
Distance : 7

104
Tree	boolean ebp ;
Code	boolean ebp ;
Distance : 7

105
Tree	final DeclaredTypeRegistry icme = source.contractionCriterion ;
Code	final DeclaredTypeRegistry icme = source.contractionCriterion ;
Distance : 7

106
Tree	sgY2 tok2 = source.contractionCriterion ;
Code	sgY2 tok2 = source.contractionCriterion ;
Distance : 6

107
Tree	StringWriter tok2 = new SymmLQEvent ( ignoredCommit , showSeparators ) ;
Code	StringWriter tok2 = new SymmLQEvent ( ignoredCommit , showSeparators ) ;
Distance : 7

108
Tree	StringWriter tok2 = NUMBER_CONSTANT ;
Code	StringWriter tok2 = NUMBER_CONSTANT ;
Distance : 6

109
Tree	StringWriter tok2 = binaryComparator . copySelf ( NEGATIVE_VAR_COLUMN_LABEL ) ;
Code	StringWriter tok2 = binaryComparator . copySelf ( NEGATIVE_VAR_COLUMN_LABEL ) ;
Distance : 6

110
Tree	StringWriter [] neededCalls = source.contractionCriterion ;
Code	StringWriter [] neededCalls = source.contractionCriterion ;
Distance : 7

111
Tree	Dialog [] ya = source.contractionCriterion ;
Code	Dialog [] ya = source.contractionCriterion ;
Distance : 7

112
Tree	EntityBlockParams [] ya = source.contractionCriterion ;
Code	EntityBlockParams [] ya = source.contractionCriterion ;
Distance : 7

113
Tree	VerificationStartedEvent tok2 = binaryComparator . newCachedThreadPool ( NEGATIVE_VAR_COLUMN_LABEL ) ;
Code	VerificationStartedEvent tok2 = binaryComparator . newCachedThreadPool ( NEGATIVE_VAR_COLUMN_LABEL ) ;
Distance : 6

114
Tree	ContainsExtraTypeInformation tok2 = NUMBER_CONSTANT ;
Code	ContainsExtraTypeInformation tok2 = NUMBER_CONSTANT ;
Distance : 6

115
Tree	ContainsExtraTypeInformation tok2 = new SymmLQEvent ( ignoredCommit , centers ) ;
Code	ContainsExtraTypeInformation tok2 = new SymmLQEvent ( ignoredCommit , centers ) ;
Distance : 7

116
Tree	ContainsExtraTypeInformation tok2 = requirePrinter ( MINUTES ) ;
Code	ContainsExtraTypeInformation tok2 = requirePrinter ( MINUTES ) ;
Distance : 4

117
Tree	scopeBuilder tok2 = source.contractionCriterion ;
Code	scopeBuilder tok2 = source.contractionCriterion ;
Distance : 6

118
Tree	StringWriter tok2 = requirePrinter ( NEGATIVE_VAR_COLUMN_LABEL , NUMBER_CONSTANT ) ;
Code	StringWriter tok2 = requirePrinter ( NEGATIVE_VAR_COLUMN_LABEL , NUMBER_CONSTANT ) ;
Distance : 6

119
Tree	StringWriter tok2 = binaryComparator ? EvalMode.EVAL : EvalMode.NORMAL ;
Code	StringWriter tok2 = binaryComparator ? EvalMode.EVAL : EvalMode.NORMAL ;
Distance : 7

120
Tree	ContainsExtraTypeInformation tok2 = requirePrinter ( NEGATIVE_VAR_COLUMN_LABEL , NUMBER_CONSTANT ) ;
Code	ContainsExtraTypeInformation tok2 = requirePrinter ( NEGATIVE_VAR_COLUMN_LABEL , NUMBER_CONSTANT ) ;
Distance : 6

121
Tree	StringWriter tok2 = binaryComparator ;
Code	StringWriter tok2 = binaryComparator ;
Distance : 6

122
Tree	VerificationStartedEvent tok2 = NUMBER_CONSTANT ;
Code	VerificationStartedEvent tok2 = NUMBER_CONSTANT ;
Distance : 6

123
Tree	StringWriter tok2 = requirePrinter ( MINUTES , false ) ;
Code	StringWriter tok2 = requirePrinter ( MINUTES , false ) ;
Distance : 6

124
Tree	ContainsExtraTypeInformation tok2 = binaryComparator ;
Code	ContainsExtraTypeInformation tok2 = binaryComparator ;
Distance : 6

125
Tree	StringWriter tok2 = this . defaultOutlinePaint ;
Code	StringWriter tok2 = this . defaultOutlinePaint ;
Distance : 6

126
Tree	ContainsExtraTypeInformation tok2 = source.contractionCriterion ;
Code	ContainsExtraTypeInformation tok2 = source.contractionCriterion ;
Distance : 6

127
Tree	StringWriter tok2 = this . maximumCategoryLabelLines ;
Code	StringWriter tok2 = this . maximumCategoryLabelLines ;
Distance : 6

128
Tree	boolean ya ;
Code	boolean ya ;
Distance : 7

129
Tree	Dialog tok2 = new SymmLQEvent () ;
Code	Dialog tok2 = new SymmLQEvent () ;
Distance : 6

130
Tree	StringWriter tok2 = requirePrinter ( SECONDS_MILLIS ) ;
Code	StringWriter tok2 = requirePrinter ( SECONDS_MILLIS ) ;
Distance : 4

131
Tree	ContainsExtraTypeInformation tok2 = new SymmLQEvent ( ignoredCommit , showSeparators ) ;
Code	ContainsExtraTypeInformation tok2 = new SymmLQEvent ( ignoredCommit , showSeparators ) ;
Distance : 7

132
Tree	VerificationStartedEvent tok2 = STRING_CONSTANT ;
Code	VerificationStartedEvent tok2 = STRING_CONSTANT ;
Distance : 6

133
Tree	boolean div ;
Code	boolean div ;
Distance : 7

134
Tree	ContainsExtraTypeInformation tok2 = requirePrinter ( NEGATIVE_VAR_COLUMN_LABEL , false ) ;
Code	ContainsExtraTypeInformation tok2 = requirePrinter ( NEGATIVE_VAR_COLUMN_LABEL , false ) ;
Distance : 6

135
Tree	scopeBuilder scopeBuilder = source.contractionCriterion ;
Code	scopeBuilder scopeBuilder = source.contractionCriterion ;
Distance : 6

136
Tree	Dialog tok2 = NUMBER_CONSTANT ;
Code	Dialog tok2 = NUMBER_CONSTANT ;
Distance : 6

137
Tree	icme tok2 = source.contractionCriterion ;
Code	icme tok2 = source.contractionCriterion ;
Distance : 6

138
Tree	ContainsExtraTypeInformation tok2 = STRING_CONSTANT ;
Code	ContainsExtraTypeInformation tok2 = STRING_CONSTANT ;
Distance : 6

139
Tree	StringWriter tok2 = getOrCreateName ;
Code	StringWriter tok2 = getOrCreateName ;
Distance : 6

140
Tree	boolean sgY2 ;
Code	boolean sgY2 ;
Distance : 7

141
Tree	ContainsExtraTypeInformation tok2 = requirePrinter ( MINUTES , false ) ;
Code	ContainsExtraTypeInformation tok2 = requirePrinter ( MINUTES , false ) ;
Distance : 6

142
Tree	tok2 tok2 = source.contractionCriterion ;
Code	tok2 tok2 = source.contractionCriterion ;
Distance : 6

143
Tree	VerificationStartedEvent tok2 = true ;
Code	VerificationStartedEvent tok2 = true ;
Distance : 6

144
Tree	StringWriter tok2 = new SymmLQEvent ( ignoredCommit , comments ) ;
Code	StringWriter tok2 = new SymmLQEvent ( ignoredCommit , comments ) ;
Distance : 7

145
Tree	boolean scopeBuilder ;
Code	boolean scopeBuilder ;
Distance : 7

146
Tree	StringWriter tok2 = binaryComparator . newCachedThreadPool ( NEGATIVE_VAR_COLUMN_LABEL , RotationConvention.FRAME_TRANSFORM ) ;
Code	StringWriter tok2 = binaryComparator . newCachedThreadPool ( NEGATIVE_VAR_COLUMN_LABEL , RotationConvention.FRAME_TRANSFORM ) ;
Distance : 8

147
Tree	EntityBlockParams tok2 = NUMBER_CONSTANT ;
Code	EntityBlockParams tok2 = NUMBER_CONSTANT ;
Distance : 6

148
Tree	StringWriter DeclaredTypeRegistry [] = binaryComparator ;
Code	StringWriter DeclaredTypeRegistry [] = binaryComparator ;
Distance : 7

149
Tree	StringWriter Formattable [] = binaryComparator ;
Code	StringWriter Formattable [] = binaryComparator ;
Distance : 7

150
Tree	StringWriter tok2 = new Divide () ;
Code	StringWriter tok2 = new Divide () ;
Distance : 6

151
Tree	StringWriter tok2 = binaryComparator . newCachedThreadPool ( NEGATIVE_VAR_COLUMN_LABEL , Strictness.SILENT ) ;
Code	StringWriter tok2 = binaryComparator . newCachedThreadPool ( NEGATIVE_VAR_COLUMN_LABEL , Strictness.SILENT ) ;
Distance : 8

152
Tree	StringWriter tok2 = true ;
Code	StringWriter tok2 = true ;
Distance : 6

153
Tree	StringWriter tok2 = new SymmLQEvent ( ignoredCommit , reductionMap ) ;
Code	StringWriter tok2 = new SymmLQEvent ( ignoredCommit , reductionMap ) ;
Distance : 7

154
Tree	TypeMockability tok2 = NUMBER_CONSTANT ;
Code	TypeMockability tok2 = NUMBER_CONSTANT ;
Distance : 6

155
Tree	VerificationStartedEvent tok2 = source.contractionCriterion ;
Code	VerificationStartedEvent tok2 = source.contractionCriterion ;
Distance : 6

156
Tree	ContainsExtraTypeInformation DeclaredTypeRegistry [] = binaryComparator ;
Code	ContainsExtraTypeInformation DeclaredTypeRegistry [] = binaryComparator ;
Distance : 7

157
Tree	ContainsExtraTypeInformation tok2 = binaryComparator . newCachedThreadPool ( NEGATIVE_VAR_COLUMN_LABEL , RotationConvention.FRAME_TRANSFORM ) ;
Code	ContainsExtraTypeInformation tok2 = binaryComparator . newCachedThreadPool ( NEGATIVE_VAR_COLUMN_LABEL , RotationConvention.FRAME_TRANSFORM ) ;
Distance : 8

158
Tree	ContainsExtraTypeInformation Formattable [] = binaryComparator ;
Code	ContainsExtraTypeInformation Formattable [] = binaryComparator ;
Distance : 7

159
Tree	StringWriter DeclaredTypeRegistry [] = binaryComparator . newCachedThreadPool () ;
Code	StringWriter DeclaredTypeRegistry [] = binaryComparator . newCachedThreadPool () ;
Distance : 7

160
Tree	ContainsExtraTypeInformation tok2 = binaryComparator . newCachedThreadPool ( NEGATIVE_VAR_COLUMN_LABEL , Strictness.SILENT ) ;
Code	ContainsExtraTypeInformation tok2 = binaryComparator . newCachedThreadPool ( NEGATIVE_VAR_COLUMN_LABEL , Strictness.SILENT ) ;
Distance : 8

161
Tree	StringWriter Formattable [] = binaryComparator . newCachedThreadPool () ;
Code	StringWriter Formattable [] = binaryComparator . newCachedThreadPool () ;
Distance : 7

162
Tree	StringWriter StringWriter [] = binaryComparator ;
Code	StringWriter StringWriter [] = binaryComparator ;
Distance : 7

163
Tree	StringWriter tok2 = binaryComparator . newBrentSolver ( NEGATIVE_VAR_COLUMN_LABEL , RotationConvention.FRAME_TRANSFORM ) ;
Code	StringWriter tok2 = binaryComparator . newBrentSolver ( NEGATIVE_VAR_COLUMN_LABEL , RotationConvention.FRAME_TRANSFORM ) ;
Distance : 8

164
Tree	ContainsExtraTypeInformation tok2 = binaryComparator . newCachedThreadPool ( NEGATIVE_VAR_COLUMN_LABEL ) ;
Code	ContainsExtraTypeInformation tok2 = binaryComparator . newCachedThreadPool ( NEGATIVE_VAR_COLUMN_LABEL ) ;
Distance : 6

165
Tree	StringWriter tok2 = binaryComparator . compareFiles ( NEGATIVE_VAR_COLUMN_LABEL , RotationConvention.FRAME_TRANSFORM ) ;
Code	StringWriter tok2 = binaryComparator . compareFiles ( NEGATIVE_VAR_COLUMN_LABEL , RotationConvention.FRAME_TRANSFORM ) ;
Distance : 8

166
Tree	ContainsExtraTypeInformation DeclaredTypeRegistry [] = binaryComparator . newCachedThreadPool () ;
Code	ContainsExtraTypeInformation DeclaredTypeRegistry [] = binaryComparator . newCachedThreadPool () ;
Distance : 7

167
Tree	StringWriter tok2 = requirePrinter ( MILLIS , NUMBER_CONSTANT ) ;
Code	StringWriter tok2 = requirePrinter ( MILLIS , NUMBER_CONSTANT ) ;
Distance : 6

168
Tree	StringWriter tok2 = binaryComparator . newBrentSolver ( NEGATIVE_VAR_COLUMN_LABEL ) ;
Code	StringWriter tok2 = binaryComparator . newBrentSolver ( NEGATIVE_VAR_COLUMN_LABEL ) ;
Distance : 6

169
Tree	StringWriter tok2 = binaryComparator . compareFiles ( NEGATIVE_VAR_COLUMN_LABEL ) ;
Code	StringWriter tok2 = binaryComparator . compareFiles ( NEGATIVE_VAR_COLUMN_LABEL ) ;
Distance : 6

170
Tree	StringWriter tok2 = new SymmLQEvent ( ignoredCommit , DECLARE_LEGACY_NAMESPACE_OUTSIDE_GOOG_MODULE ) ;
Code	StringWriter tok2 = new SymmLQEvent ( ignoredCommit , DECLARE_LEGACY_NAMESPACE_OUTSIDE_GOOG_MODULE ) ;
Distance : 7

171
Tree	Dialog DeclaredTypeRegistry [] = binaryComparator ;
Code	Dialog DeclaredTypeRegistry [] = binaryComparator ;
Distance : 7

172
Tree	ContainsExtraTypeInformation tok2 = binaryComparator . newBrentSolver ( NEGATIVE_VAR_COLUMN_LABEL ) ;
Code	ContainsExtraTypeInformation tok2 = binaryComparator . newBrentSolver ( NEGATIVE_VAR_COLUMN_LABEL ) ;
Distance : 6

173
Tree	StringWriter tok2 = binaryComparator . newBrentSolver ( NEGATIVE_VAR_COLUMN_LABEL , Strictness.SILENT ) ;
Code	StringWriter tok2 = binaryComparator . newBrentSolver ( NEGATIVE_VAR_COLUMN_LABEL , Strictness.SILENT ) ;
Distance : 8

174
Tree	EntityBlockParams tok2 = true ;
Code	EntityBlockParams tok2 = true ;
Distance : 6

175
Tree	StringWriter tok2 = requirePrinter ( SECONDS_MILLIS , NUMBER_CONSTANT ) ;
Code	StringWriter tok2 = requirePrinter ( SECONDS_MILLIS , NUMBER_CONSTANT ) ;
Distance : 6

176
Tree	VerificationStartedEvent tok2 = requirePrinter ( NEGATIVE_VAR_COLUMN_LABEL , false ) ;
Code	VerificationStartedEvent tok2 = requirePrinter ( NEGATIVE_VAR_COLUMN_LABEL , false ) ;
Distance : 6

177
Tree	StringWriter tok2 = binaryComparator . newCachedThreadPool ( NEGATIVE_VAR_COLUMN_LABEL ) ;
Code	StringWriter tok2 = binaryComparator . newCachedThreadPool ( NEGATIVE_VAR_COLUMN_LABEL ) ;
Distance : 6

178
Tree	ContainsExtraTypeInformation tok2 = requirePrinter ( SECONDS_MILLIS , false ) ;
Code	ContainsExtraTypeInformation tok2 = requirePrinter ( SECONDS_MILLIS , false ) ;
Distance : 6

179
Tree	ContainsExtraTypeInformation tok2 = binaryComparator . compareFiles ( NEGATIVE_VAR_COLUMN_LABEL ) ;
Code	ContainsExtraTypeInformation tok2 = binaryComparator . compareFiles ( NEGATIVE_VAR_COLUMN_LABEL ) ;
Distance : 6

180
Tree	StringWriter tok2 = requirePrinter ( MILLIS , false ) ;
Code	StringWriter tok2 = requirePrinter ( MILLIS , false ) ;
Distance : 6

181
Tree	StringWriter tok2 = new SymmLQEvent ( ignoredCommit , centers ) ;
Code	StringWriter tok2 = new SymmLQEvent ( ignoredCommit , centers ) ;
Distance : 7

182
Tree	VerificationStartedEvent tok2 = requirePrinter ( NEGATIVE_VAR_COLUMN_LABEL , NUMBER_CONSTANT ) ;
Code	VerificationStartedEvent tok2 = requirePrinter ( NEGATIVE_VAR_COLUMN_LABEL , NUMBER_CONSTANT ) ;
Distance : 6

183
Tree	ContainsExtraTypeInformation tok2 = requirePrinter ( SECONDS_MILLIS , NUMBER_CONSTANT ) ;
Code	ContainsExtraTypeInformation tok2 = requirePrinter ( SECONDS_MILLIS , NUMBER_CONSTANT ) ;
Distance : 6

184
Tree	StringWriter AccessibleObject [] = binaryComparator ;
Code	StringWriter AccessibleObject [] = binaryComparator ;
Distance : 7

185
Tree	ContainsExtraTypeInformation Formattable [] = binaryComparator . newCachedThreadPool () ;
Code	ContainsExtraTypeInformation Formattable [] = binaryComparator . newCachedThreadPool () ;
Distance : 7

186
Tree	StringWriter tok2 = binaryComparator . compareFiles ( NEGATIVE_VAR_COLUMN_LABEL , Strictness.SILENT ) ;
Code	StringWriter tok2 = binaryComparator . compareFiles ( NEGATIVE_VAR_COLUMN_LABEL , Strictness.SILENT ) ;
Distance : 8

187
Tree	ContainsExtraTypeInformation StringWriter [] = binaryComparator ;
Code	ContainsExtraTypeInformation StringWriter [] = binaryComparator ;
Distance : 7

188
Tree	StringWriter DeclaredTypeRegistry [] = binaryComparator . getChangeStamp () ;
Code	StringWriter DeclaredTypeRegistry [] = binaryComparator . getChangeStamp () ;
Distance : 7

189
Tree	StringWriter DeclaredTypeRegistry [] = binaryComparator . newBrentSolver () ;
Code	StringWriter DeclaredTypeRegistry [] = binaryComparator . newBrentSolver () ;
Distance : 7

190
Tree	StringWriter StringWriter [] = binaryComparator . newCachedThreadPool () ;
Code	StringWriter StringWriter [] = binaryComparator . newCachedThreadPool () ;
Distance : 7

191
Tree	StringWriter Formattable [] = binaryComparator . getChangeStamp () ;
Code	StringWriter Formattable [] = binaryComparator . getChangeStamp () ;
Distance : 7

192
Tree	StringWriter tok2 = super . newCachedThreadPool () ;
Code	StringWriter tok2 = super . newCachedThreadPool () ;
Distance : 6

193
Tree	StringWriter tok2 = super . compareFiles () ;
Code	StringWriter tok2 = super . compareFiles () ;
Distance : 6

194
Tree	ContainsExtraTypeInformation tok2 = super . newCachedThreadPool () ;
Code	ContainsExtraTypeInformation tok2 = super . newCachedThreadPool () ;
Distance : 6

195
Tree	ContainsExtraTypeInformation tok2 = super . compareFiles () ;
Code	ContainsExtraTypeInformation tok2 = super . compareFiles () ;
Distance : 6

196
Tree	StringWriter tok2 = super . requirePrinter () ;
Code	StringWriter tok2 = super . requirePrinter () ;
Distance : 6

197
Tree	StringWriter tok2 = super . getTokenList () ;
Code	StringWriter tok2 = super . getTokenList () ;
Distance : 6

198
Tree	StringWriter tok2 = super . newBrentSolver () ;
Code	StringWriter tok2 = super . newBrentSolver () ;
Distance : 6

199
Tree	StringWriter tok2 = super . getMillisPerUnit () ;
Code	StringWriter tok2 = super . getMillisPerUnit () ;
Distance : 6

========================================================================


========================================================================
Example Number: 12
Parent Code is: 
{ return topType ; }
-------------------------------------------------------------------------------
Child code is: 
{ return topType . isAllType () ? getNativeType ( ARRAY_TYPE ) : topType ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (800{val=topType}) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (16 (32 (800{val=topType}) (235{val=.}) (802{val=isAllType}) (216{val=()})) (233{val=?}) (32 (802{val=getNativeType}) (214{val=(}) (800{val=ARRAY_TYPE}) (215{val=)})) (226{val=:}) (800{val=topType})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/111/parent/src_com_google_javascript_jscomp_type_ClosureReverseAbstractInterpreter.java
-------------------------------------------------------------------------------
Edit Distance : 10
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return ! extractLineno () ; }
Code	{ return ! extractLineno () ; }
Distance : 10

1
Tree	{ return setShapeInternal ( STRING_CONSTANT ) ; }
Code	{ return setShapeInternal ( STRING_CONSTANT ) ; }
Distance : 9

2
Tree	{ return new DormandPrince54FieldStepInterpolator ( this ) ; }
Code	{ return new DormandPrince54FieldStepInterpolator ( this ) ; }
Distance : 9

3
Tree	{ return multiplicand . forName () ; }
Code	{ return multiplicand . forName () ; }
Distance : 9

4
Tree	{ return ! tryFoldInForcedStringContext () ; }
Code	{ return ! tryFoldInForcedStringContext () ; }
Distance : 10

5
Tree	{ return ( iterations ) anyObject ( parent ) ; }
Code	{ return ( iterations ) anyObject ( parent ) ; }
Distance : 9

6
Tree	{ return new PomComparator ( multiplicand ) ; }
Code	{ return new PomComparator ( multiplicand ) ; }
Distance : 9

7
Tree	{ return isTheObjectType () ? null : ALL ; }
Code	{ return isTheObjectType () ? null : ALL ; }
Distance : 8

8
Tree	{ return isTheObjectType ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	{ return isTheObjectType ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 10

9
Tree	{ return thenAnswer () ? null : ALL ; }
Code	{ return thenAnswer () ? null : ALL ; }
Distance : 8

10
Tree	{ return this . multiplicand . get () ; }
Code	{ return this . multiplicand . get () ; }
Distance : 10

11
Tree	{ return ZERO . forName () ; }
Code	{ return ZERO . forName () ; }
Distance : 9

12
Tree	{ return iShort ; }
Code	{ return iShort ; }
Distance : 11

13
Tree	{ return OBJECTS_SAME_STRING ; }
Code	{ return OBJECTS_SAME_STRING ; }
Distance : 11

14
Tree	{ return this . maximumCategoryLabelLines ; }
Code	{ return this . maximumCategoryLabelLines ; }
Distance : 10

15
Tree	{ return numUnfilledTemplateKeys ( STRING_CONSTANT ) ; }
Code	{ return numUnfilledTemplateKeys ( STRING_CONSTANT ) ; }
Distance : 9

16
Tree	{ return ZERO . forName () ? null : ALL ; }
Code	{ return ZERO . forName () ? null : ALL ; }
Distance : 7

17
Tree	{ return ( multiplicand . getPrinter () ? null : ALL ) ; }
Code	{ return ( multiplicand . getPrinter () ? null : ALL ) ; }
Distance : 8

18
Tree	{ return this . maxX ; }
Code	{ return this . maxX ; }
Distance : 10

19
Tree	{ return this . PRECISE_YEAR_WEEK ; }
Code	{ return this . PRECISE_YEAR_WEEK ; }
Distance : 10

20
Tree	{ return this . outlineVisible ; }
Code	{ return this . outlineVisible ; }
Distance : 10

21
Tree	{ return this . multiplicand ; }
Code	{ return this . multiplicand ; }
Distance : 10

22
Tree	{ return this . PRECISE_YEAR_WEEK . get () ; }
Code	{ return this . PRECISE_YEAR_WEEK . get () ; }
Distance : 10

23
Tree	{ return new InMemoryClassLoader ( this ) ; }
Code	{ return new InMemoryClassLoader ( this ) ; }
Distance : 9

24
Tree	{ return multiplicand . of ( multiplicand ) ; }
Code	{ return multiplicand . of ( multiplicand ) ; }
Distance : 8

25
Tree	{ return com.google.protobuf.GeneratedMessageV3 ; }
Code	{ return com.google.protobuf.GeneratedMessageV3 ; }
Distance : 11

26
Tree	{ return PRECISE_YEAR_WEEK . of () ? null : ALL ; }
Code	{ return PRECISE_YEAR_WEEK . of () ? null : ALL ; }
Distance : 7

27
Tree	{ return ( PRECISE_YEAR_WEEK ) anyObject ( path ) ; }
Code	{ return ( PRECISE_YEAR_WEEK ) anyObject ( path ) ; }
Distance : 9

28
Tree	{ return multiplicand . forName ( multiplicand ) ; }
Code	{ return multiplicand . forName ( multiplicand ) ; }
Distance : 8

29
Tree	{ return PRECISE_YEAR_WEEK . of ( multiplicand ) ; }
Code	{ return PRECISE_YEAR_WEEK . of ( multiplicand ) ; }
Distance : 8

30
Tree	{ return ( CapturesArguments ) anyObject ( parent ) ; }
Code	{ return ( CapturesArguments ) anyObject ( parent ) ; }
Distance : 9

31
Tree	{ return PRECISE_YEAR_WEEK . forName ( multiplicand ) ; }
Code	{ return PRECISE_YEAR_WEEK . forName ( multiplicand ) ; }
Distance : 8

32
Tree	{ return ! setShapeInternal () ; }
Code	{ return ! setShapeInternal () ; }
Distance : 10

33
Tree	{ return LazyHolder.INSTANCE ; }
Code	{ return LazyHolder.INSTANCE ; }
Distance : 11

34
Tree	{ return Ref.Type.ALIASING_GET ; }
Code	{ return Ref.Type.ALIASING_GET ; }
Distance : 11

35
Tree	{ return BuddhistChronology.BE ; }
Code	{ return BuddhistChronology.BE ; }
Distance : 11

36
Tree	{ return new ConstantFuture ( this ) ; }
Code	{ return new ConstantFuture ( this ) ; }
Distance : 9

37
Tree	{ return setShapeInternal () ? null : ALL ; }
Code	{ return setShapeInternal () ? null : ALL ; }
Distance : 8

38
Tree	{ return multiplicand . of () ; }
Code	{ return multiplicand . of () ; }
Distance : 9

39
Tree	{ return ( outputTypes . getPrinter () ? null : ALL ) ; }
Code	{ return ( outputTypes . getPrinter () ? null : ALL ) ; }
Distance : 8

40
Tree	{ return ( ALL ) currentDerivative . returnFor () ; }
Code	{ return ( ALL ) currentDerivative . returnFor () ; }
Distance : 11

41
Tree	{ return new RealVectorFormat ( this ) ; }
Code	{ return new RealVectorFormat ( this ) ; }
Distance : 9

42
Tree	{ return new PomComparator ( PRECISE_YEAR_WEEK ) ; }
Code	{ return new PomComparator ( PRECISE_YEAR_WEEK ) ; }
Distance : 9

43
Tree	{ return extractLineno ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	{ return extractLineno ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 10

44
Tree	{ return ZERO . forName ( multiplicand ) ; }
Code	{ return ZERO . forName ( multiplicand ) ; }
Distance : 8

45
Tree	{ return PRECISE_YEAR_WEEK . of () ; }
Code	{ return PRECISE_YEAR_WEEK . of () ; }
Distance : 9

46
Tree	{ return CoreMatchers . of () ; }
Code	{ return CoreMatchers . of () ; }
Distance : 9

47
Tree	{ return new HarmonicFunction ( this ) ; }
Code	{ return new HarmonicFunction ( this ) ; }
Distance : 9

48
Tree	{ return ( iterations ) currentDerivative . returnFor () ; }
Code	{ return ( iterations ) currentDerivative . returnFor () ; }
Distance : 11

49
Tree	{ return getPct ( STRING_CONSTANT ) ; }
Code	{ return getPct ( STRING_CONSTANT ) ; }
Distance : 9

50
Tree	{ this . minX = interpolator.currentDerivative ; return multiplicand ; }
Code	{ this . minX = interpolator.currentDerivative ; return multiplicand ; }
Distance : 11

51
Tree	{ return extractCharno ( STRING_CONSTANT ) ; }
Code	{ return extractCharno ( STRING_CONSTANT ) ; }
Distance : 9

52
Tree	{ return this . ALL ; }
Code	{ return this . ALL ; }
Distance : 10

53
Tree	{ return this . minX . getAnchorPoint () ; }
Code	{ return this . minX . getAnchorPoint () ; }
Distance : 10

54
Tree	{ return ! isReasonableObjectPropertyKey () ; }
Code	{ return ! isReasonableObjectPropertyKey () ; }
Distance : 10

55
Tree	{ return ( symbolName ) anyObject ( parent ) ; }
Code	{ return ( symbolName ) anyObject ( parent ) ; }
Distance : 9

56
Tree	{ return this . maximumCategoryLabelLines . get () ; }
Code	{ return this . maximumCategoryLabelLines . get () ; }
Distance : 10

57
Tree	{ return ( outputTypes ) anyObject ( parent ) ; }
Code	{ return ( outputTypes ) anyObject ( parent ) ; }
Distance : 9

58
Tree	{ return this . radiusMinorGridlinesVisible . getAllValues () ; }
Code	{ return this . radiusMinorGridlinesVisible . getAllValues () ; }
Distance : 10

59
Tree	{ return multiplicand . forName () ? null : ALL ; }
Code	{ return multiplicand . forName () ? null : ALL ; }
Distance : 7

60
Tree	{ return multiplicand ; }
Code	{ return multiplicand ; }
Distance : 11

61
Tree	{ return PRECISE_YEAR_WEEK . forName () ? null : ALL ; }
Code	{ return PRECISE_YEAR_WEEK . forName () ? null : ALL ; }
Distance : 7

62
Tree	{ return this . minX . get () ; }
Code	{ return this . minX . get () ; }
Distance : 10

63
Tree	{ return ( PRECISE_YEAR_WEEK ) currentDerivative . of () ; }
Code	{ return ( PRECISE_YEAR_WEEK ) currentDerivative . of () ; }
Distance : 11

64
Tree	{ return ( ALL ) anyObject ( parent ) ; }
Code	{ return ( ALL ) anyObject ( parent ) ; }
Distance : 9

65
Tree	{ return this . radiusMinorGridlinesVisible . get () ; }
Code	{ return this . radiusMinorGridlinesVisible . get () ; }
Distance : 10

66
Tree	{ return getPrototype ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	{ return getPrototype ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 10

67
Tree	{ return false ; }
Code	{ return false ; }
Distance : 11

68
Tree	{ return PRECISE_YEAR_WEEK ; }
Code	{ return PRECISE_YEAR_WEEK ; }
Distance : 11

69
Tree	{ return setShapeInternal () ? null : PRECISE_YEAR_WEEK ; }
Code	{ return setShapeInternal () ? null : PRECISE_YEAR_WEEK ; }
Distance : 8

70
Tree	{ return ( multiplicand ) currentDerivative . of () ; }
Code	{ return ( multiplicand ) currentDerivative . of () ; }
Distance : 11

71
Tree	{ return IncrementalCheckMode.OFF ; }
Code	{ return IncrementalCheckMode.OFF ; }
Distance : 11

72
Tree	{ return getPrototype ( STRING_CONSTANT ) ; }
Code	{ return getPrototype ( STRING_CONSTANT ) ; }
Distance : 9

73
Tree	{ return new PomComparator ( this ) ; }
Code	{ return new PomComparator ( this ) ; }
Distance : 9

74
Tree	{ return ZERO . of ( multiplicand ) ; }
Code	{ return ZERO . of ( multiplicand ) ; }
Distance : 8

75
Tree	{ return thenAnswer () ; }
Code	{ return thenAnswer () ; }
Distance : 10

76
Tree	{ return ( multiplicand . of () ? null : ALL ) ; }
Code	{ return ( multiplicand . of () ? null : ALL ) ; }
Distance : 8

77
Tree	{ return ArrayUtils.EMPTY_STRING_ARRAY ; }
Code	{ return ArrayUtils.EMPTY_STRING_ARRAY ; }
Distance : 11

78
Tree	{ return ( outputTypes ) currentDerivative . returnFor () ; }
Code	{ return ( outputTypes ) currentDerivative . returnFor () ; }
Distance : 11

79
Tree	{ return ZERO ; }
Code	{ return ZERO ; }
Distance : 11

80
Tree	{ return extractLineno ( STRING_CONSTANT ) ; }
Code	{ return extractLineno ( STRING_CONSTANT ) ; }
Distance : 9

81
Tree	{ return numUnfilledTemplateKeys ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	{ return numUnfilledTemplateKeys ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 10

82
Tree	{ return new RealVectorFormat ( multiplicand ) ; }
Code	{ return new RealVectorFormat ( multiplicand ) ; }
Distance : 9

83
Tree	{ return iConverters.length ; }
Code	{ return iConverters.length ; }
Distance : 11

84
Tree	{ return ( PRECISE_YEAR_WEEK . of () ? null : ALL ) ; }
Code	{ return ( PRECISE_YEAR_WEEK . of () ? null : ALL ) ; }
Distance : 8

85
Tree	{ return getPrototype () ; }
Code	{ return getPrototype () ; }
Distance : 10

86
Tree	{ return new IntPropListItem ( this ) ; }
Code	{ return new IntPropListItem ( this ) ; }
Distance : 9

87
Tree	{ return ( symbolName . getPrinter () ? null : ALL ) ; }
Code	{ return ( symbolName . getPrinter () ? null : ALL ) ; }
Distance : 8

88
Tree	{ return new HarmonicFunction ( multiplicand ) ; }
Code	{ return new HarmonicFunction ( multiplicand ) ; }
Distance : 9

89
Tree	{ return this . minX ; }
Code	{ return this . minX ; }
Distance : 10

90
Tree	{ return this . radiusMinorGridlinesVisible ; }
Code	{ return this . radiusMinorGridlinesVisible ; }
Distance : 10

91
Tree	private boolean setShapeInternal () { return this . minX ; }
Code	private boolean setShapeInternal () { return this . minX ; }
Distance : 12

92
Tree	{ return thenAnswer ( STRING_CONSTANT ) ; }
Code	{ return thenAnswer ( STRING_CONSTANT ) ; }
Distance : 9

93
Tree	{ return extractLineno () ; }
Code	{ return extractLineno () ; }
Distance : 10

94
Tree	{ return ! getPrototype () ; }
Code	{ return ! getPrototype () ; }
Distance : 10

95
Tree	{ return CoreMatchers ; }
Code	{ return CoreMatchers ; }
Distance : 11

96
Tree	private int setShapeInternal () { return PRECISE_YEAR_WEEK ; }
Code	private int setShapeInternal () { return PRECISE_YEAR_WEEK ; }
Distance : 12

97
Tree	{ return getPct () ; }
Code	{ return getPct () ; }
Distance : 10

98
Tree	{ return internalArray.length ; }
Code	{ return internalArray.length ; }
Distance : 11

99
Tree	{ return setShapeInternal ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	{ return setShapeInternal ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 10

100
Tree	{ return setShapeInternal () ; }
Code	{ return setShapeInternal () ; }
Distance : 10

101
Tree	{ return ( PRECISE_YEAR_WEEK ) anyObject ( parent ) ; }
Code	{ return ( PRECISE_YEAR_WEEK ) anyObject ( parent ) ; }
Distance : 9

102
Tree	{ return getPrototype () ? null : ALL ; }
Code	{ return getPrototype () ? null : ALL ; }
Distance : 8

103
Tree	{ return ALL ; }
Code	{ return ALL ; }
Distance : 11

104
Tree	{ return new InMemoryClassLoader ( multiplicand ) ; }
Code	{ return new InMemoryClassLoader ( multiplicand ) ; }
Distance : 9

105
Tree	{ return multiplicand . of () ? null : PRECISE_YEAR_WEEK ; }
Code	{ return multiplicand . of () ? null : PRECISE_YEAR_WEEK ; }
Distance : 7

106
Tree	{ return ZERO . of () ? null : ALL ; }
Code	{ return ZERO . of () ? null : ALL ; }
Distance : 7

107
Tree	{ return ( multiplicand ) currentDerivative . returnFor () ; }
Code	{ return ( multiplicand ) currentDerivative . returnFor () ; }
Distance : 11

108
Tree	{ return multiplicand . nullToEmpty ( multiplicand ) ; }
Code	{ return multiplicand . nullToEmpty ( multiplicand ) ; }
Distance : 8

109
Tree	{ return ( PRECISE_YEAR_WEEK ) currentDerivative . returnFor () ; }
Code	{ return ( PRECISE_YEAR_WEEK ) currentDerivative . returnFor () ; }
Distance : 11

110
Tree	{ this . minX = TypeInferenceMode.BOTH ; return multiplicand ; }
Code	{ this . minX = TypeInferenceMode.BOTH ; return multiplicand ; }
Distance : 11

111
Tree	{ return ZERO . of () ; }
Code	{ return ZERO . of () ; }
Distance : 9

112
Tree	{ return this . minX . getAllValues () ; }
Code	{ return this . minX . getAllValues () ; }
Distance : 10

113
Tree	{ return extractCharno ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	{ return extractCharno ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 10

114
Tree	{ return new InMemoryClassLoader ( PRECISE_YEAR_WEEK ) ; }
Code	{ return new InMemoryClassLoader ( PRECISE_YEAR_WEEK ) ; }
Distance : 9

115
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 11

116
Tree	{ return new DormandPrince54FieldStepInterpolator ( multiplicand ) ; }
Code	{ return new DormandPrince54FieldStepInterpolator ( multiplicand ) ; }
Distance : 9

117
Tree	{ return multiplicand . nullToEmpty () ; }
Code	{ return multiplicand . nullToEmpty () ; }
Distance : 9

118
Tree	{ return extractLineno () ? null : ALL ; }
Code	{ return extractLineno () ? null : ALL ; }
Distance : 8

119
Tree	{ return PRECISE_YEAR_MONTH ; }
Code	{ return PRECISE_YEAR_MONTH ; }
Distance : 11

120
Tree	{ return isTheObjectType () ; }
Code	{ return isTheObjectType () ; }
Distance : 10

121
Tree	{ return thenAnswer ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	{ return thenAnswer ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 10

122
Tree	{ return ( symbolName ) currentDerivative . returnFor () ; }
Code	{ return ( symbolName ) currentDerivative . returnFor () ; }
Distance : 11

123
Tree	{ return numUnfilledTemplateKeys () ; }
Code	{ return numUnfilledTemplateKeys () ; }
Distance : 10

124
Tree	{ return ! isTheObjectType () ; }
Code	{ return ! isTheObjectType () ; }
Distance : 10

125
Tree	{ return ( multiplicand ) anyObject ( parent ) ; }
Code	{ return ( multiplicand ) anyObject ( parent ) ; }
Distance : 9

126
Tree	{ return PRECISE_YEAR_WEEK . of () ? null : PRECISE_YEAR_WEEK ; }
Code	{ return PRECISE_YEAR_WEEK . of () ? null : PRECISE_YEAR_WEEK ; }
Distance : 7

127
Tree	{ return ( ALL . getPrinter () ? null : ALL ) ; }
Code	{ return ( ALL . getPrinter () ? null : ALL ) ; }
Distance : 8

128
Tree	{ return extractCharno () ? null : ALL ; }
Code	{ return extractCharno () ? null : ALL ; }
Distance : 8

129
Tree	{ return extractCharno () ; }
Code	{ return extractCharno () ; }
Distance : 10

130
Tree	private int setShapeInternal () { return this . minX ; }
Code	private int setShapeInternal () { return this . minX ; }
Distance : 12

131
Tree	{ return new InitialGuess ( this ) ; }
Code	{ return new InitialGuess ( this ) ; }
Distance : 9

132
Tree	{ return null ; }
Code	{ return null ; }
Distance : 11

133
Tree	{ return new ConstantFuture ( multiplicand ) ; }
Code	{ return new ConstantFuture ( multiplicand ) ; }
Distance : 9

134
Tree	{ return ( PRECISE_YEAR_WEEK . getPrinter () ? null : ALL ) ; }
Code	{ return ( PRECISE_YEAR_WEEK . getPrinter () ? null : ALL ) ; }
Distance : 8

135
Tree	{ this . multiplicand = interpolator.currentDerivative ; return multiplicand ; }
Code	{ this . multiplicand = interpolator.currentDerivative ; return multiplicand ; }
Distance : 11

136
Tree	{ return getPct ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	{ return getPct ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 10

137
Tree	{ this . minX = StringUtils.EMPTY ; return multiplicand ; }
Code	{ this . minX = StringUtils.EMPTY ; return multiplicand ; }
Distance : 11

138
Tree	{ this . multiplicand = TypeInferenceMode.BOTH ; return PRECISE_YEAR_WEEK ; }
Code	{ this . multiplicand = TypeInferenceMode.BOTH ; return PRECISE_YEAR_WEEK ; }
Distance : 11

139
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 11

140
Tree	private boolean setShapeInternal () { return this . radiusMinorGridlinesVisible ; }
Code	private boolean setShapeInternal () { return this . radiusMinorGridlinesVisible ; }
Distance : 12

141
Tree	{ return true ; }
Code	{ return true ; }
Distance : 11

142
Tree	{ return ( iterations . getPrinter () ? null : ALL ) ; }
Code	{ return ( iterations . getPrinter () ? null : ALL ) ; }
Distance : 8

143
Tree	{ this . minX = TypeInferenceMode.BOTH ; return PRECISE_YEAR_WEEK ; }
Code	{ this . minX = TypeInferenceMode.BOTH ; return PRECISE_YEAR_WEEK ; }
Distance : 11

144
Tree	private boolean setShapeInternal () { return multiplicand ; }
Code	private boolean setShapeInternal () { return multiplicand ; }
Distance : 12

145
Tree	private int setShapeInternal () { return multiplicand ; }
Code	private int setShapeInternal () { return multiplicand ; }
Distance : 12

146
Tree	{ return numUnfilledTemplateKeys () ? null : ALL ; }
Code	{ return numUnfilledTemplateKeys () ? null : ALL ; }
Distance : 8

147
Tree	private boolean setShapeInternal () { return iShort ; }
Code	private boolean setShapeInternal () { return iShort ; }
Distance : 12

148
Tree	private boolean setShapeInternal () { return incrementalCheckMode ; }
Code	private boolean setShapeInternal () { return incrementalCheckMode ; }
Distance : 12

149
Tree	private int setShapeInternal () { return iShort ; }
Code	private int setShapeInternal () { return iShort ; }
Distance : 12

150
Tree	{ this . multiplicand = TypeInferenceMode.BOTH ; return multiplicand ; }
Code	{ this . multiplicand = TypeInferenceMode.BOTH ; return multiplicand ; }
Distance : 11

151
Tree	private boolean setShapeInternal () { return PRECISE_YEAR_WEEK ; }
Code	private boolean setShapeInternal () { return PRECISE_YEAR_WEEK ; }
Distance : 12

152
Tree	{ this . minX = interpolator.currentDerivative ; return PRECISE_YEAR_WEEK ; }
Code	{ this . minX = interpolator.currentDerivative ; return PRECISE_YEAR_WEEK ; }
Distance : 11

153
Tree	private double setShapeInternal () { return this . minX ; }
Code	private double setShapeInternal () { return this . minX ; }
Distance : 12

154
Tree	private int setShapeInternal () { return this . radiusMinorGridlinesVisible ; }
Code	private int setShapeInternal () { return this . radiusMinorGridlinesVisible ; }
Distance : 12

155
Tree	private boolean setShapeInternal () { return initialStateEstimateVector ; }
Code	private boolean setShapeInternal () { return initialStateEstimateVector ; }
Distance : 12

156
Tree	{ return ! primitiveWrapperOf () ; }
Code	{ return ! primitiveWrapperOf () ; }
Distance : 10

157
Tree	reportMatcher () ;
Code	reportMatcher () ;
Distance : 13

158
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 11

159
Tree	private boolean setAlphaInternal () { return this . minX ; }
Code	private boolean setAlphaInternal () { return this . minX ; }
Distance : 12

160
Tree	{ return ! numUnfilledTemplateKeys () ; }
Code	{ return ! numUnfilledTemplateKeys () ; }
Distance : 10

161
Tree	private int setAlphaInternal () { return this . minX ; }
Code	private int setAlphaInternal () { return this . minX ; }
Distance : 12

162
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 11

163
Tree	private boolean setShapeInternal () { return this . maximumCategoryLabelLines ; }
Code	private boolean setShapeInternal () { return this . maximumCategoryLabelLines ; }
Distance : 12

164
Tree	format () ;
Code	format () ;
Distance : 13

165
Tree	getChronology () ;
Code	getChronology () ;
Distance : 13

166
Tree	{ return isTheObjectType ( STRING_CONSTANT ) ; }
Code	{ return isTheObjectType ( STRING_CONSTANT ) ; }
Distance : 9

167
Tree	inIncrementalCheckMode () ;
Code	inIncrementalCheckMode () ;
Distance : 13

168
Tree	anyObject () ;
Code	anyObject () ;
Distance : 13

169
Tree	getValue () ;
Code	getValue () ;
Distance : 13

170
Tree	checkNotNull () ;
Code	checkNotNull () ;
Distance : 13

171
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 11

172
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 11

173
Tree	{ return STRING_CONSTANT ; } mock
Code	{ return STRING_CONSTANT ; } mock
Distance : 12

174
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 12

175
Tree	key () ;
Code	key () ;
Distance : 13

176
Tree	{ return multiplicand . of () ? null : ALL ; }
Code	{ return multiplicand . of () ? null : ALL ; }
Distance : 7

177
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 12

178
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 12

179
Tree	{ return false ; } Test
Code	{ return false ; } Test
Distance : 12

180
Tree	{ return PRECISE_YEAR_WEEK . forName () ; }
Code	{ return PRECISE_YEAR_WEEK . forName () ; }
Distance : 9

181
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 12

182
Tree	{ return CoreMatchers . of ( multiplicand ) ; }
Code	{ return CoreMatchers . of ( multiplicand ) ; }
Distance : 8

183
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 11

184
Tree	{ return false ; } {}
Code	{ return false ; } {}
Distance : 12

185
Tree	{ return STRING_CONSTANT ; } MathRuntimeException
Code	{ return STRING_CONSTANT ; } MathRuntimeException
Distance : 12

186
Tree	{ return STRING_CONSTANT ; } Override
Code	{ return STRING_CONSTANT ; } Override
Distance : 12

187
Tree	{ return STRING_CONSTANT ; } f
Code	{ return STRING_CONSTANT ; } f
Distance : 12

188
Tree	{ return false ; } MathRuntimeException
Code	{ return false ; } MathRuntimeException
Distance : 12

189
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 12

190
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 12

191
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 12

192
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 12

193
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 12

194
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 12

195
Tree	{ return false ; } f
Code	{ return false ; } f
Distance : 12

196
Tree	{ return false ; } ParamChecks
Code	{ return false ; } ParamChecks
Distance : 12

197
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 12

198
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 12

199
Tree	{ return false ; } Class
Code	{ return false ; } Class
Distance : 12

========================================================================


========================================================================
Example Number: 13
Parent Code is: 
{ if ( assignLhsChild != null ) { return true ; } return false ; }
-------------------------------------------------------------------------------
Child code is: 
{ if ( assignLhsChild != null ) { return true ; } return parent != null && NodeUtil . isGet ( parent ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (800{val=assignLhsChild}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (9{val=true}) (227{val=;})) (219{val=}}))) (41 (329{val=return}) (9{val=false}) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (800{val=assignLhsChild}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (9{val=true}) (227{val=;})) (219{val=}}))) (41 (329{val=return}) (27 (27 (800{val=parent}) (242{val=!=}) (500{val=null})) (249{val=&&}) (32 (800{val=NodeUtil}) (235{val=.}) (802{val=isGet}) (214{val=(}) (800{val=parent}) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/100/parent/src_com_google_javascript_jscomp_CheckGlobalThis.java
-------------------------------------------------------------------------------
Edit Distance : 10
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ if ( ! CLEANER . getPrinter ( expectedMock ) ) { return true ; } false }
Code	{ if ( ! CLEANER . getPrinter ( expectedMock ) ) { return true ; } false }
Distance : 19

1
Tree	{ if ( ! CLEANER . getPrinter ( multiplicand , false ) ) { return false ; } return false ; }
Code	{ if ( ! CLEANER . getPrinter ( multiplicand , false ) ) { return false ; } return false ; }
Distance : 20

2
Tree	{ if ( ! allDefinitionsEquivalent ( multiplicand , EMPTY , false ) ) { return true ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent ( multiplicand , EMPTY , false ) ) { return true ; } return false ; }
Distance : 19

3
Tree	{ if ( ! allDefinitionsEquivalent ( constructorI , EMPTY , EMPTY ) ) { return false ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent ( constructorI , EMPTY , EMPTY ) ) { return false ; } return false ; }
Distance : 20

4
Tree	{ if ( ! CLEANER . getPrinter ( thisContext , false ) ) { return false ; } return false ; }
Code	{ if ( ! CLEANER . getPrinter ( thisContext , false ) ) { return false ; } return false ; }
Distance : 20

5
Tree	{ if ( ! allDefinitionsEquivalent ( multiplicand , EMPTY , EMPTY ) ) { return true ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent ( multiplicand , EMPTY , EMPTY ) ) { return true ; } return false ; }
Distance : 19

6
Tree	{ if ( ! CLEANER . getPrinter ( incrementalCheckMode , false ) ) { return false ; } return false ; }
Code	{ if ( ! CLEANER . getPrinter ( incrementalCheckMode , false ) ) { return false ; } return false ; }
Distance : 20

7
Tree	{ if ( ! allDefinitionsEquivalent ( assignedAt , EMPTY , false ) ) { return false ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent ( assignedAt , EMPTY , false ) ) { return false ; } return false ; }
Distance : 20

8
Tree	{ if ( multiplicand != null ) { return true ; } return false ; }
Code	{ if ( multiplicand != null ) { return true ; } return false ; }
Distance : 11

9
Tree	{ if ( constructorI != null ) { return true ; } return false ; }
Code	{ if ( constructorI != null ) { return true ; } return false ; }
Distance : 11

10
Tree	{ if ( assignedAt != null ) { return true ; } return false ; }
Code	{ if ( assignedAt != null ) { return true ; } return false ; }
Distance : 11

11
Tree	{ if ( symbolName != null ) { return true ; } return false ; }
Code	{ if ( symbolName != null ) { return true ; } return false ; }
Distance : 11

12
Tree	{ if ( tzId != null ) { return true ; } return false ; }
Code	{ if ( tzId != null ) { return true ; } return false ; }
Distance : 11

13
Tree	{ if ( outputTypes != null ) { return true ; } return false ; }
Code	{ if ( outputTypes != null ) { return true ; } return false ; }
Distance : 11

14
Tree	{ if ( ! allDefinitionsEquivalent ( multiplicand , EMPTY ) ) { return false ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent ( multiplicand , EMPTY ) ) { return false ; } return false ; }
Distance : 18

15
Tree	{ if ( CLEANER != null ) { return true ; } return false ; }
Code	{ if ( CLEANER != null ) { return true ; } return false ; }
Distance : 11

16
Tree	{ if ( ! multiplicand . getPrinter ( thisContext ) ) { return true ; } return false ; }
Code	{ if ( ! multiplicand . getPrinter ( thisContext ) ) { return true ; } return false ; }
Distance : 17

17
Tree	{ if ( ! isNonSingular ( multiplicand , EMPTY ) ) { return false ; } return false ; }
Code	{ if ( ! isNonSingular ( multiplicand , EMPTY ) ) { return false ; } return false ; }
Distance : 18

18
Tree	{ if ( ! multiplicand . getPrinter ( incrementalCheckMode ) ) { return true ; } return false ; }
Code	{ if ( ! multiplicand . getPrinter ( incrementalCheckMode ) ) { return true ; } return false ; }
Distance : 17

19
Tree	{ if ( ! allDefinitionsEquivalent ( variableReference , EMPTY ) ) { return false ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent ( variableReference , EMPTY ) ) { return false ; } return false ; }
Distance : 18

20
Tree	{ if ( ! CLEANER . getPrinter ( multiplicand ) ) { return true ; } return false ; }
Code	{ if ( ! CLEANER . getPrinter ( multiplicand ) ) { return true ; } return false ; }
Distance : 17

21
Tree	{ if ( ! allDefinitionsEquivalent ( multiplicand , CSV_SEARCH_CHARS ) ) { return false ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent ( multiplicand , CSV_SEARCH_CHARS ) ) { return false ; } return false ; }
Distance : 18

22
Tree	{ if ( ! CLEANER . getPrinter ( thisContext ) ) { return true ; } return false ; }
Code	{ if ( ! CLEANER . getPrinter ( thisContext ) ) { return true ; } return false ; }
Distance : 17

23
Tree	{ if ( ! CLEANER . getPrinter ( incrementalCheckMode ) ) { return true ; } return false ; }
Code	{ if ( ! CLEANER . getPrinter ( incrementalCheckMode ) ) { return true ; } return false ; }
Distance : 17

24
Tree	{ if ( ! allDefinitionsEquivalent ( multiplicand , EMPTY , EMPTY ) ) { return false ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent ( multiplicand , EMPTY , EMPTY ) ) { return false ; } return false ; }
Distance : 20

25
Tree	{ if ( multiplicand != null ) { return true ; } return getPackageName ( constructorI . getPrinter ( calendar ) , withSettings () ) ; }
Code	{ if ( multiplicand != null ) { return true ; } return getPackageName ( constructorI . getPrinter ( calendar ) , withSettings () ) ; }
Distance : 12

26
Tree	{ if ( ! allDefinitionsEquivalent ( multiplicand , EMPTY , false ) ) { return false ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent ( multiplicand , EMPTY , false ) ) { return false ; } return false ; }
Distance : 20

27
Tree	{ if ( ! allDefinitionsEquivalent ( symbolName , EMPTY , EMPTY ) ) { return false ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent ( symbolName , EMPTY , EMPTY ) ) { return false ; } return false ; }
Distance : 20

28
Tree	{ if ( ! allDefinitionsEquivalent ( symbolName , EMPTY , false ) ) { return false ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent ( symbolName , EMPTY , false ) ) { return false ; } return false ; }
Distance : 20

29
Tree	{ if ( symbolName != null ) { return true ; } return getPackageName ( multiplicand . getPrinter ( calendar ) , withSettings () ) ; }
Code	{ if ( symbolName != null ) { return true ; } return getPackageName ( multiplicand . getPrinter ( calendar ) , withSettings () ) ; }
Distance : 12

30
Tree	{ if ( ! multiplicand . getPrinter ( expectedMock , false ) ) { return false ; } return false ; }
Code	{ if ( ! multiplicand . getPrinter ( expectedMock , false ) ) { return false ; } return false ; }
Distance : 20

31
Tree	{ if ( assignedAt != null ) { return true ; } return getPackageName ( symbolName . getPrinter ( calendar ) , withSettings () ) ; }
Code	{ if ( assignedAt != null ) { return true ; } return getPackageName ( symbolName . getPrinter ( calendar ) , withSettings () ) ; }
Distance : 12

32
Tree	{ if ( ! CLEANER . getPrinter ( expectedMock , false ) ) { return false ; } return false ; }
Code	{ if ( ! CLEANER . getPrinter ( expectedMock , false ) ) { return false ; } return false ; }
Distance : 20

33
Tree	{ if ( ! CLEANER ) { return true ; } return getPackageName ( mockTwo . getPrinter ( calendar ) , withSettings () ) ; }
Code	{ if ( ! CLEANER ) { return true ; } return getPackageName ( mockTwo . getPrinter ( calendar ) , withSettings () ) ; }
Distance : 14

34
Tree	{ if ( ! multiplicand ) { return true ; } return getPackageName ( calendar . getPrinter ( returnTypeGenericMetadata ) , withSettings () ) ; }
Code	{ if ( ! multiplicand ) { return true ; } return getPackageName ( calendar . getPrinter ( returnTypeGenericMetadata ) , withSettings () ) ; }
Distance : 14

35
Tree	{ if ( ! CLEANER ) { return true ; } return getPackageName ( calendar . getPrinter ( returnTypeGenericMetadata ) , withSettings () ) ; }
Code	{ if ( ! CLEANER ) { return true ; } return getPackageName ( calendar . getPrinter ( returnTypeGenericMetadata ) , withSettings () ) ; }
Distance : 14

36
Tree	{ if ( multiplicand != null ) { return true ; } return CharSequenceUtils . reverse ( multiplicand ) ; }
Code	{ if ( multiplicand != null ) { return true ; } return CharSequenceUtils . reverse ( multiplicand ) ; }
Distance : 8

37
Tree	{ if ( ! multiplicand ) { return true ; } return getPackageName ( calendar . getPrinter ( CALLS_REAL_METHODS ) , withSettings () ) ; }
Code	{ if ( ! multiplicand ) { return true ; } return getPackageName ( calendar . getPrinter ( CALLS_REAL_METHODS ) , withSettings () ) ; }
Distance : 14

38
Tree	{ if ( ! CLEANER ) { return true ; } return getPackageName ( calendar . getPrinter ( CALLS_REAL_METHODS ) , withSettings () ) ; }
Code	{ if ( ! CLEANER ) { return true ; } return getPackageName ( calendar . getPrinter ( CALLS_REAL_METHODS ) , withSettings () ) ; }
Distance : 14

39
Tree	{ if ( multiplicand != null ) { return true ; } return CharSequenceUtils . clone ( multiplicand ) ; }
Code	{ if ( multiplicand != null ) { return true ; } return CharSequenceUtils . clone ( multiplicand ) ; }
Distance : 8

40
Tree	{ if ( ! allDefinitionsEquivalent ( symbolName , EMPTY ) ) { return false ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent ( symbolName , EMPTY ) ) { return false ; } return false ; }
Distance : 18

41
Tree	{ if ( Functions != null ) { return true ; } return false ; }
Code	{ if ( Functions != null ) { return true ; } return false ; }
Distance : 11

42
Tree	{ if ( ! multiplicand . getPrinter ( expectedMock ) ) { return true ; } return false ; }
Code	{ if ( ! multiplicand . getPrinter ( expectedMock ) ) { return true ; } return false ; }
Distance : 17

43
Tree	{ if ( ! allDefinitionsEquivalent ( assignedAt , EMPTY ) ) { return false ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent ( assignedAt , EMPTY ) ) { return false ; } return false ; }
Distance : 18

44
Tree	{ if ( ! CLEANER . getPrinter ( expectedMock ) ) { return true ; } return false ; }
Code	{ if ( ! CLEANER . getPrinter ( expectedMock ) ) { return true ; } return false ; }
Distance : 17

45
Tree	{ if ( ! multiplicand ) { return true ; } return false ; }
Code	{ if ( ! multiplicand ) { return true ; } return false ; }
Distance : 13

46
Tree	{ if ( ! CLEANER ) { return true ; } return false ; }
Code	{ if ( ! CLEANER ) { return true ; } return false ; }
Distance : 13

47
Tree	{ if ( ! symbolName ) { return true ; } return false ; }
Code	{ if ( ! symbolName ) { return true ; } return false ; }
Distance : 13

48
Tree	{ if ( ! allDefinitionsEquivalent ( constructorI , EMPTY ) ) { return false ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent ( constructorI , EMPTY ) ) { return false ; } return false ; }
Distance : 18

49
Tree	{ if ( ! outputTypes ) { return true ; } return false ; }
Code	{ if ( ! outputTypes ) { return true ; } return false ; }
Distance : 13

50
Tree	{ if ( constructorI != null ) { return true ; } return getPackageName ( multiplicand . getPrinter ( calendar ) , withSettings () ) ; }
Code	{ if ( constructorI != null ) { return true ; } return getPackageName ( multiplicand . getPrinter ( calendar ) , withSettings () ) ; }
Distance : 12

51
Tree	{ if ( ! multiplicand ) { return true ; } return getPackageName ( calendar , EMPTY . charAt ( CALLS_REAL_METHODS ) ) ; }
Code	{ if ( ! multiplicand ) { return true ; } return getPackageName ( calendar , EMPTY . charAt ( CALLS_REAL_METHODS ) ) ; }
Distance : 11

52
Tree	{ if ( constructorI != null ) { return true ; } return getPackageName ( symbolName . getPrinter ( calendar ) , withSettings () ) ; }
Code	{ if ( constructorI != null ) { return true ; } return getPackageName ( symbolName . getPrinter ( calendar ) , withSettings () ) ; }
Distance : 12

53
Tree	{ if ( ! constructorI ) { return true ; } return false ; }
Code	{ if ( ! constructorI ) { return true ; } return false ; }
Distance : 13

54
Tree	{ if ( ! multiplicand ) { return true ; } return getPackageName ( calendar , EMPTY . nullToEmpty ( CALLS_REAL_METHODS ) ) ; }
Code	{ if ( ! multiplicand ) { return true ; } return getPackageName ( calendar , EMPTY . nullToEmpty ( CALLS_REAL_METHODS ) ) ; }
Distance : 11

55
Tree	{ if ( ! assignedAt ) { return true ; } return false ; }
Code	{ if ( ! assignedAt ) { return true ; } return false ; }
Distance : 13

56
Tree	{ if ( ! CLEANER ) { return true ; } return getPackageName ( calendar , EMPTY . charAt ( CALLS_REAL_METHODS ) ) ; }
Code	{ if ( ! CLEANER ) { return true ; } return getPackageName ( calendar , EMPTY . charAt ( CALLS_REAL_METHODS ) ) ; }
Distance : 11

57
Tree	{ if ( ! iterations ) { return true ; } return false ; }
Code	{ if ( ! iterations ) { return true ; } return false ; }
Distance : 13

58
Tree	{ if ( ! multiplicand ) { return true ; } return getPackageName ( mockTwo , EMPTY . charAt ( RETURNS_DEFAULTS ) ) ; }
Code	{ if ( ! multiplicand ) { return true ; } return getPackageName ( mockTwo , EMPTY . charAt ( RETURNS_DEFAULTS ) ) ; }
Distance : 11

59
Tree	{ if ( ! allDefinitionsEquivalent ( incrementalCheckMode , EMPTY ) ) { return false ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent ( incrementalCheckMode , EMPTY ) ) { return false ; } return false ; }
Distance : 18

60
Tree	{ if ( ! newPos ) { return true ; } return false ; }
Code	{ if ( ! newPos ) { return true ; } return false ; }
Distance : 13

61
Tree	{ if ( ! allDefinitionsEquivalent ( this , multiplicand ) ) { return true ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent ( this , multiplicand ) ) { return true ; } return false ; }
Distance : 17

62
Tree	{ if ( assignedAt != null ) { return true ; } return getPackageName ( multiplicand . getPrinter ( calendar ) , withSettings () ) ; }
Code	{ if ( assignedAt != null ) { return true ; } return getPackageName ( multiplicand . getPrinter ( calendar ) , withSettings () ) ; }
Distance : 12

63
Tree	{ if ( ! multiplicand . getPrinter ( multiplicand ) ) { return true ; } false }
Code	{ if ( ! multiplicand . getPrinter ( multiplicand ) ) { return true ; } false }
Distance : 19

64
Tree	{ if ( ! multiplicand ) { return true ; } return getPackageName ( mockTwo . getPrinter ( calendar ) , withSettings () ) ; }
Code	{ if ( ! multiplicand ) { return true ; } return getPackageName ( mockTwo . getPrinter ( calendar ) , withSettings () ) ; }
Distance : 14

65
Tree	{ if ( ! allDefinitionsEquivalent ( symbolName , EMPTY , EMPTY ) ) { return true ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent ( symbolName , EMPTY , EMPTY ) ) { return true ; } return false ; }
Distance : 19

66
Tree	{ if ( ! multiplicand . getPrinter ( multiplicand ) ) { return true ; } return false ; }
Code	{ if ( ! multiplicand . getPrinter ( multiplicand ) ) { return true ; } return false ; }
Distance : 17

67
Tree	{ if ( ! this . getClass ( multiplicand ) ) { return false ; } return false ; }
Code	{ if ( ! this . getClass ( multiplicand ) ) { return false ; } return false ; }
Distance : 18

68
Tree	{ if ( ! CLEANER ) { return true ; } return CharSequenceUtils . reverse ( multiplicand ) ; }
Code	{ if ( ! CLEANER ) { return true ; } return CharSequenceUtils . reverse ( multiplicand ) ; }
Distance : 10

69
Tree	{ if ( ! multiplicand . getPrinter ( expectedMock , EMPTY ) ) { return false ; } return false ; }
Code	{ if ( ! multiplicand . getPrinter ( expectedMock , EMPTY ) ) { return false ; } return false ; }
Distance : 20

70
Tree	{ if ( ! this . getClass ( constructorI ) ) { return true ; } return false ; }
Code	{ if ( ! this . getClass ( constructorI ) ) { return true ; } return false ; }
Distance : 17

71
Tree	{ if ( ! CLEANER . getPrinter ( incrementalCheckMode ) ) { return true ; } false }
Code	{ if ( ! CLEANER . getPrinter ( incrementalCheckMode ) ) { return true ; } false }
Distance : 19

72
Tree	{ if ( ! multiplicand ) { return true ; } return CharSequenceUtils . clone ( multiplicand ) ; }
Code	{ if ( ! multiplicand ) { return true ; } return CharSequenceUtils . clone ( multiplicand ) ; }
Distance : 10

73
Tree	{ if ( ! isNonSingular ( multiplicand , EMPTY , false ) ) { return false ; } return false ; }
Code	{ if ( ! isNonSingular ( multiplicand , EMPTY , false ) ) { return false ; } return false ; }
Distance : 20

74
Tree	{ if ( ! this . getClass ( incrementalCheckMode ) ) { return true ; } return false ; }
Code	{ if ( ! this . getClass ( incrementalCheckMode ) ) { return true ; } return false ; }
Distance : 17

75
Tree	{ if ( ! allDefinitionsEquivalent ( symbolName ) ) { return true ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent ( symbolName ) ) { return true ; } return false ; }
Distance : 15

76
Tree	{ if ( ! multiplicand . getPrinter ( thisContext ) ) { return true ; } false }
Code	{ if ( ! multiplicand . getPrinter ( thisContext ) ) { return true ; } false }
Distance : 19

77
Tree	{ if ( ! allDefinitionsEquivalent ( this , incrementalCheckMode ) ) { return true ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent ( this , incrementalCheckMode ) ) { return true ; } return false ; }
Distance : 17

78
Tree	{ if ( ! this . getClass ( expectedMock ) ) { return true ; } return false ; }
Code	{ if ( ! this . getClass ( expectedMock ) ) { return true ; } return false ; }
Distance : 17

79
Tree	{ if ( ! allDefinitionsEquivalent ( this , multiplicand ) ) { return false ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent ( this , multiplicand ) ) { return false ; } return false ; }
Distance : 18

80
Tree	{ if ( ! this . getClass ( multiplicand ) ) { return true ; } return false ; }
Code	{ if ( ! this . getClass ( multiplicand ) ) { return true ; } return false ; }
Distance : 17

81
Tree	{ if ( ! multiplicand . getPrinter ( expectedMock ) ) { return true ; } false }
Code	{ if ( ! multiplicand . getPrinter ( expectedMock ) ) { return true ; } false }
Distance : 19

82
Tree	{ if ( ! multiplicand . getPrinter ( multiplicand , false ) ) { return false ; } return false ; }
Code	{ if ( ! multiplicand . getPrinter ( multiplicand , false ) ) { return false ; } return false ; }
Distance : 20

83
Tree	{ if ( ! multiplicand ) { return true ; } return CharSequenceUtils . reverse ( OverlayChangeListener ) ; }
Code	{ if ( ! multiplicand ) { return true ; } return CharSequenceUtils . reverse ( OverlayChangeListener ) ; }
Distance : 10

84
Tree	{ if ( ! multiplicand ) { return true ; } return CharSequenceUtils . reverse ( incrementalCheckMode ) ; }
Code	{ if ( ! multiplicand ) { return true ; } return CharSequenceUtils . reverse ( incrementalCheckMode ) ; }
Distance : 10

85
Tree	{ if ( ! multiplicand ) { return true ; } return CharSequenceUtils . reverse ( multiplicand ) ; }
Code	{ if ( ! multiplicand ) { return true ; } return CharSequenceUtils . reverse ( multiplicand ) ; }
Distance : 10

86
Tree	{ if ( assignedAt != null ) { return true ; } return CharSequenceUtils . reverse ( multiplicand ) ; }
Code	{ if ( assignedAt != null ) { return true ; } return CharSequenceUtils . reverse ( multiplicand ) ; }
Distance : 8

87
Tree	{ if ( constructorI != null ) { return true ; } return CharSequenceUtils . reverse ( multiplicand ) ; }
Code	{ if ( constructorI != null ) { return true ; } return CharSequenceUtils . reverse ( multiplicand ) ; }
Distance : 8

88
Tree	{ if ( ! allDefinitionsEquivalent ( constructorI ) ) { return true ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent ( constructorI ) ) { return true ; } return false ; }
Distance : 15

89
Tree	{ if ( assignedAt != null ) { return true ; } return CharSequenceUtils . clone ( multiplicand ) ; }
Code	{ if ( assignedAt != null ) { return true ; } return CharSequenceUtils . clone ( multiplicand ) ; }
Distance : 8

90
Tree	{ if ( multiplicand != null ) { return true ; } return CharSequenceUtils . getPackage ( multiplicand ) ; }
Code	{ if ( multiplicand != null ) { return true ; } return CharSequenceUtils . getPackage ( multiplicand ) ; }
Distance : 8

91
Tree	{ if ( constructorI . regionMatches ( multiplicand ) ) { return true ; } return false ; }
Code	{ if ( constructorI . regionMatches ( multiplicand ) ) { return true ; } return false ; }
Distance : 16

92
Tree	{ if ( assignedAt . getPrinter ( multiplicand ) ) { return true ; } return false ; }
Code	{ if ( assignedAt . getPrinter ( multiplicand ) ) { return true ; } return false ; }
Distance : 16

93
Tree	{ if ( ! allDefinitionsEquivalent ( incrementalCheckMode , EMPTY , EMPTY ) ) { return false ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent ( incrementalCheckMode , EMPTY , EMPTY ) ) { return false ; } return false ; }
Distance : 20

94
Tree	{ if ( ! CLEANER . getPrinter ( thisContext , EMPTY ) ) { return false ; } return false ; }
Code	{ if ( ! CLEANER . getPrinter ( thisContext , EMPTY ) ) { return false ; } return false ; }
Distance : 20

95
Tree	{ if ( ! CLEANER . getPrinter ( incrementalCheckMode , EMPTY ) ) { return false ; } return false ; }
Code	{ if ( ! CLEANER . getPrinter ( incrementalCheckMode , EMPTY ) ) { return false ; } return false ; }
Distance : 20

96
Tree	{ if ( ! allDefinitionsEquivalent ( multiplicand ) ) { return false ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent ( multiplicand ) ) { return false ; } return false ; }
Distance : 16

97
Tree	{ if ( ! allDefinitionsEquivalent ( symbolName , EMPTY , false ) ) { return true ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent ( symbolName , EMPTY , false ) ) { return true ; } return false ; }
Distance : 19

98
Tree	{ if ( ! allDefinitionsEquivalent ( incrementalCheckMode ) ) { return true ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent ( incrementalCheckMode ) ) { return true ; } return false ; }
Distance : 15

99
Tree	{ if ( symbolName . getPrinter ( multiplicand ) ) { return true ; } return false ; }
Code	{ if ( symbolName . getPrinter ( multiplicand ) ) { return true ; } return false ; }
Distance : 16

100
Tree	{ if ( ! allDefinitionsEquivalent ( this , incrementalCheckMode ) ) { return false ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent ( this , incrementalCheckMode ) ) { return false ; } return false ; }
Distance : 18

101
Tree	{ if ( constructorI != null ) { return true ; } return CharSequenceUtils . clone ( multiplicand ) ; }
Code	{ if ( constructorI != null ) { return true ; } return CharSequenceUtils . clone ( multiplicand ) ; }
Distance : 8

102
Tree	{ if ( ! multiplicand . getPrinter ( multiplicand , EMPTY ) ) { return false ; } return false ; }
Code	{ if ( ! multiplicand . getPrinter ( multiplicand , EMPTY ) ) { return false ; } return false ; }
Distance : 20

103
Tree	{ if ( ! multiplicand . getPrinter ( thisContext , EMPTY ) ) { return false ; } return false ; }
Code	{ if ( ! multiplicand . getPrinter ( thisContext , EMPTY ) ) { return false ; } return false ; }
Distance : 20

104
Tree	{ if ( ! isNonSingular ( multiplicand , EMPTY , EMPTY ) ) { return false ; } return false ; }
Code	{ if ( ! isNonSingular ( multiplicand , EMPTY , EMPTY ) ) { return false ; } return false ; }
Distance : 20

105
Tree	{ if ( ! allDefinitionsEquivalent ( multiplicand ) ) { return true ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent ( multiplicand ) ) { return true ; } return false ; }
Distance : 15

106
Tree	{ if ( ! multiplicand . getPrinter ( incrementalCheckMode , EMPTY ) ) { return false ; } return false ; }
Code	{ if ( ! multiplicand . getPrinter ( incrementalCheckMode , EMPTY ) ) { return false ; } return false ; }
Distance : 20

107
Tree	{ if ( ! CLEANER ) { return true ; } return CharSequenceUtils . getPackage ( multiplicand ) ; }
Code	{ if ( ! CLEANER ) { return true ; } return CharSequenceUtils . getPackage ( multiplicand ) ; }
Distance : 10

108
Tree	{ if ( ! multiplicand . getPrinter ( incrementalCheckMode ) ) { return true ; } false }
Code	{ if ( ! multiplicand . getPrinter ( incrementalCheckMode ) ) { return true ; } false }
Distance : 19

109
Tree	{ if ( ! this . getClass ( symbolName ) ) { return true ; } return false ; }
Code	{ if ( ! this . getClass ( symbolName ) ) { return true ; } return false ; }
Distance : 17

110
Tree	{ if ( ! multiplicand ) { return true ; } return CharSequenceUtils . getPackage ( multiplicand ) ; }
Code	{ if ( ! multiplicand ) { return true ; } return CharSequenceUtils . getPackage ( multiplicand ) ; }
Distance : 10

111
Tree	{ if ( ! CLEANER . getPrinter ( multiplicand , EMPTY ) ) { return false ; } return false ; }
Code	{ if ( ! CLEANER . getPrinter ( multiplicand , EMPTY ) ) { return false ; } return false ; }
Distance : 20

112
Tree	{ if ( ! multiplicand . getPrinter ( thisContext , false ) ) { return false ; } return false ; }
Code	{ if ( ! multiplicand . getPrinter ( thisContext , false ) ) { return false ; } return false ; }
Distance : 20

113
Tree	{ if ( ! allDefinitionsEquivalent ( incrementalCheckMode , EMPTY , false ) ) { return false ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent ( incrementalCheckMode , EMPTY , false ) ) { return false ; } return false ; }
Distance : 20

114
Tree	{ if ( ! allDefinitionsEquivalent ( assignedAt , EMPTY , EMPTY ) ) { return false ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent ( assignedAt , EMPTY , EMPTY ) ) { return false ; } return false ; }
Distance : 20

115
Tree	{ if ( symbolName != null ) { return true ; } return CharSequenceUtils . reverse ( multiplicand ) ; }
Code	{ if ( symbolName != null ) { return true ; } return CharSequenceUtils . reverse ( multiplicand ) ; }
Distance : 8

116
Tree	{ if ( ! CLEANER . getPrinter ( multiplicand ) ) { return true ; } false }
Code	{ if ( ! CLEANER . getPrinter ( multiplicand ) ) { return true ; } false }
Distance : 19

117
Tree	{ if ( ! multiplicand ) { return true ; } return getPackageName ( lines () , calendar . returnFalse ( CALLS_REAL_METHODS ) ) ; }
Code	{ if ( ! multiplicand ) { return true ; } return getPackageName ( lines () , calendar . returnFalse ( CALLS_REAL_METHODS ) ) ; }
Distance : 12

118
Tree	{ if ( ! isNonSingular ( this , multiplicand ) ) { return true ; } return false ; }
Code	{ if ( ! isNonSingular ( this , multiplicand ) ) { return true ; } return false ; }
Distance : 17

119
Tree	{ if ( ! CLEANER . getPrinter ( expectedMock , EMPTY ) ) { return false ; } return false ; }
Code	{ if ( ! CLEANER . getPrinter ( expectedMock , EMPTY ) ) { return false ; } return false ; }
Distance : 20

120
Tree	{ if ( ! isNonSingular ( multiplicand ) ) { return true ; } return false ; }
Code	{ if ( ! isNonSingular ( multiplicand ) ) { return true ; } return false ; }
Distance : 15

121
Tree	{ if ( multiplicand . getPrinter ( multiplicand ) ) { return true ; } return false ; }
Code	{ if ( multiplicand . getPrinter ( multiplicand ) ) { return true ; } return false ; }
Distance : 16

122
Tree	{ if ( ! this . returnFalse ( multiplicand ) ) { return true ; } return false ; }
Code	{ if ( ! this . returnFalse ( multiplicand ) ) { return true ; } return false ; }
Distance : 17

123
Tree	{ if ( ! allDefinitionsEquivalent ( variableReference ) ) { return true ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent ( variableReference ) ) { return true ; } return false ; }
Distance : 15

124
Tree	{ if ( ! CLEANER ) { return true ; } return getPackageName ( lines () , calendar . returnFalse ( CALLS_REAL_METHODS ) ) ; }
Code	{ if ( ! CLEANER ) { return true ; } return getPackageName ( lines () , calendar . returnFalse ( CALLS_REAL_METHODS ) ) ; }
Distance : 12

125
Tree	{ if ( multiplicand . getPrinter ( multiplicand ) ) { return false ; } return false ; }
Code	{ if ( multiplicand . getPrinter ( multiplicand ) ) { return false ; } return false ; }
Distance : 17

126
Tree	{ if ( ! allDefinitionsEquivalent ( constructorI , EMPTY , false ) ) { return false ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent ( constructorI , EMPTY , false ) ) { return false ; } return false ; }
Distance : 20

127
Tree	{ if ( ! allDefinitionsEquivalent ( symbolName , EMPTY ) ) { return false ; } return CharSequenceUtils . getPackage ( multiplicand ) ; }
Code	{ if ( ! allDefinitionsEquivalent ( symbolName , EMPTY ) ) { return false ; } return CharSequenceUtils . getPackage ( multiplicand ) ; }
Distance : 15

128
Tree	{ if ( assignedAt . regionMatches ( multiplicand ) ) { return true ; } return false ; }
Code	{ if ( assignedAt . regionMatches ( multiplicand ) ) { return true ; } return false ; }
Distance : 16

129
Tree	{ if ( constructorI . getPrinter ( multiplicand ) ) { return true ; } return false ; }
Code	{ if ( constructorI . getPrinter ( multiplicand ) ) { return true ; } return false ; }
Distance : 16

130
Tree	{ if ( ! this . getClass ( constructorI ) ) { return false ; } return false ; }
Code	{ if ( ! this . getClass ( constructorI ) ) { return false ; } return false ; }
Distance : 18

131
Tree	{ if ( ! allDefinitionsEquivalent ( assignedAt ) ) { return true ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent ( assignedAt ) ) { return true ; } return false ; }
Distance : 15

132
Tree	{ if ( ! CLEANER ) { return true ; } return CharSequenceUtils . clone ( multiplicand ) ; }
Code	{ if ( ! CLEANER ) { return true ; } return CharSequenceUtils . clone ( multiplicand ) ; }
Distance : 10

133
Tree	{ if ( ! multiplicand ) { return true ; } return getPackageName ( calendar , EMPTY . nullToEmpty ( RETURNS_DEFAULTS ) ) ; }
Code	{ if ( ! multiplicand ) { return true ; } return getPackageName ( calendar , EMPTY . nullToEmpty ( RETURNS_DEFAULTS ) ) ; }
Distance : 11

134
Tree	{ if ( ! allDefinitionsEquivalent ( this , subtypes ) ) { return true ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent ( this , subtypes ) ) { return true ; } return false ; }
Distance : 17

135
Tree	{ if ( ! multiplicand . getPrinter ( incrementalCheckMode , false ) ) { return false ; } return false ; }
Code	{ if ( ! multiplicand . getPrinter ( incrementalCheckMode , false ) ) { return false ; } return false ; }
Distance : 20

136
Tree	{ if ( ! multiplicand ) { return true ; } return getPackageName ( lines () , nCols . returnFalse ( CALLS_REAL_METHODS ) ) ; }
Code	{ if ( ! multiplicand ) { return true ; } return getPackageName ( lines () , nCols . returnFalse ( CALLS_REAL_METHODS ) ) ; }
Distance : 12

137
Tree	{ if ( multiplicand != null ) { return true ; } return getPackageName ( lines () , nCols . returnFalse ( RETURNS_DEFAULTS ) ) ; }
Code	{ if ( multiplicand != null ) { return true ; } return getPackageName ( lines () , nCols . returnFalse ( RETURNS_DEFAULTS ) ) ; }
Distance : 10

138
Tree	{ if ( ! allDefinitionsEquivalent ( multiplicand , EMPTY ) ) { return false ; } return CharSequenceUtils . reverse ( multiplicand ) ; }
Code	{ if ( ! allDefinitionsEquivalent ( multiplicand , EMPTY ) ) { return false ; } return CharSequenceUtils . reverse ( multiplicand ) ; }
Distance : 15

139
Tree	{ if ( ! allDefinitionsEquivalent ( constructorI , EMPTY ) ) { return false ; } return CharSequenceUtils . reverse ( multiplicand ) ; }
Code	{ if ( ! allDefinitionsEquivalent ( constructorI , EMPTY ) ) { return false ; } return CharSequenceUtils . reverse ( multiplicand ) ; }
Distance : 15

140
Tree	{ if ( multiplicand != null ) { return true ; } return getPackageName ( multiplicand , EMPTY . charAt ( RETURNS_DEFAULTS ) ) ; }
Code	{ if ( multiplicand != null ) { return true ; } return getPackageName ( multiplicand , EMPTY . charAt ( RETURNS_DEFAULTS ) ) ; }
Distance : 9

141
Tree	{ if ( multiplicand != null ) { return true ; } return getPackageName ( symbolName , EMPTY . charAt ( RETURNS_DEFAULTS ) ) ; }
Code	{ if ( multiplicand != null ) { return true ; } return getPackageName ( symbolName , EMPTY . charAt ( RETURNS_DEFAULTS ) ) ; }
Distance : 9

142
Tree	{ if ( constructorI != null ) { return true ; } return getPackageName ( lines () , nCols . returnFalse ( RETURNS_DEFAULTS ) ) ; }
Code	{ if ( constructorI != null ) { return true ; } return getPackageName ( lines () , nCols . returnFalse ( RETURNS_DEFAULTS ) ) ; }
Distance : 10

143
Tree	{ if ( multiplicand . regionMatches ( multiplicand ) ) { return true ; } return false ; }
Code	{ if ( multiplicand . regionMatches ( multiplicand ) ) { return true ; } return false ; }
Distance : 16

144
Tree	{ if ( ! CLEANER ) { return true ; } return getPackageName ( lines () , nCols . returnFalse ( CALLS_REAL_METHODS ) ) ; }
Code	{ if ( ! CLEANER ) { return true ; } return getPackageName ( lines () , nCols . returnFalse ( CALLS_REAL_METHODS ) ) ; }
Distance : 12

145
Tree	{ if ( ! CLEANER ) { return true ; } return getPackageName ( lines () , calendar . returnFalse ( calendar ) ) ; }
Code	{ if ( ! CLEANER ) { return true ; } return getPackageName ( lines () , calendar . returnFalse ( calendar ) ) ; }
Distance : 12

146
Tree	{ if ( multiplicand != null ) { return true ; } return getPackageName ( multiplicand . getPrinter ( calendar ) , withSettings () ) ; }
Code	{ if ( multiplicand != null ) { return true ; } return getPackageName ( multiplicand . getPrinter ( calendar ) , withSettings () ) ; }
Distance : 12

147
Tree	{ if ( ! CLEANER ) { return true ; } return getPackageName ( lines () , calendar . reverse ( CALLS_REAL_METHODS ) ) ; }
Code	{ if ( ! CLEANER ) { return true ; } return getPackageName ( lines () , calendar . reverse ( CALLS_REAL_METHODS ) ) ; }
Distance : 12

148
Tree	{ if ( ! CLEANER ) { return true ; } return getPackageName ( calendar . getPrinter ( calendar ) , withSettings () ) ; }
Code	{ if ( ! CLEANER ) { return true ; } return getPackageName ( calendar . getPrinter ( calendar ) , withSettings () ) ; }
Distance : 14

149
Tree	{ if ( ! multiplicand ) { return true ; } return getPackageName ( lines () , calendar . returnFalse ( calendar ) ) ; }
Code	{ if ( ! multiplicand ) { return true ; } return getPackageName ( lines () , calendar . returnFalse ( calendar ) ) ; }
Distance : 12

150
Tree	{ if ( ! allDefinitionsEquivalent ( multiplicand , EMPTY ) ) { return false ; } return CharSequenceUtils . clone ( multiplicand ) ; }
Code	{ if ( ! allDefinitionsEquivalent ( multiplicand , EMPTY ) ) { return false ; } return CharSequenceUtils . clone ( multiplicand ) ; }
Distance : 15

151
Tree	{ if ( ! isNonSingular ( this , incrementalCheckMode ) ) { return true ; } return false ; }
Code	{ if ( ! isNonSingular ( this , incrementalCheckMode ) ) { return true ; } return false ; }
Distance : 17

152
Tree	{ if ( ! allDefinitionsEquivalent ( symbolName , EMPTY ) ) { return false ; } return CharSequenceUtils . clone ( multiplicand ) ; }
Code	{ if ( ! allDefinitionsEquivalent ( symbolName , EMPTY ) ) { return false ; } return CharSequenceUtils . clone ( multiplicand ) ; }
Distance : 15

153
Tree	{ if ( ! CLEANER ) { return true ; } return getPackageName ( calendar , EMPTY . charAt ( RETURNS_DEFAULTS ) ) ; }
Code	{ if ( ! CLEANER ) { return true ; } return getPackageName ( calendar , EMPTY . charAt ( RETURNS_DEFAULTS ) ) ; }
Distance : 11

154
Tree	{ if ( ! allDefinitionsEquivalent ( multiplicand , EMPTY ) ) { return false ; } return CharSequenceUtils . getPackage ( multiplicand ) ; }
Code	{ if ( ! allDefinitionsEquivalent ( multiplicand , EMPTY ) ) { return false ; } return CharSequenceUtils . getPackage ( multiplicand ) ; }
Distance : 15

155
Tree	{ if ( constructorI != null ) { return true ; } return getPackageName ( multiplicand , EMPTY . charAt ( RETURNS_DEFAULTS ) ) ; }
Code	{ if ( constructorI != null ) { return true ; } return getPackageName ( multiplicand , EMPTY . charAt ( RETURNS_DEFAULTS ) ) ; }
Distance : 9

156
Tree	{ if ( multiplicand != null ) { return true ; } return getPackageName ( multiplicand , EMPTY . nullToEmpty ( RETURNS_DEFAULTS ) ) ; }
Code	{ if ( multiplicand != null ) { return true ; } return getPackageName ( multiplicand , EMPTY . nullToEmpty ( RETURNS_DEFAULTS ) ) ; }
Distance : 9

157
Tree	{ if ( ! multiplicand ) { return true ; } return getPackageName ( calendar . getPrinter ( calendar ) , withSettings () ) ; }
Code	{ if ( ! multiplicand ) { return true ; } return getPackageName ( calendar . getPrinter ( calendar ) , withSettings () ) ; }
Distance : 14

158
Tree	{ if ( ! allDefinitionsEquivalent ( this , constructorI ) ) { return true ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent ( this , constructorI ) ) { return true ; } return false ; }
Distance : 17

159
Tree	{ if ( ! CLEANER . getPrinter ( thisContext ) ) { return true ; } false }
Code	{ if ( ! CLEANER . getPrinter ( thisContext ) ) { return true ; } false }
Distance : 19

160
Tree	{ if ( constructorI != null ) { return true ; } return getPackageName ( symbolName , EMPTY . charAt ( RETURNS_DEFAULTS ) ) ; }
Code	{ if ( constructorI != null ) { return true ; } return getPackageName ( symbolName , EMPTY . charAt ( RETURNS_DEFAULTS ) ) ; }
Distance : 9

161
Tree	{ if ( multiplicand != null ) { return true ; } return getPackageName ( lines () , calendar . returnFalse ( RETURNS_DEFAULTS ) ) ; }
Code	{ if ( multiplicand != null ) { return true ; } return getPackageName ( lines () , calendar . returnFalse ( RETURNS_DEFAULTS ) ) ; }
Distance : 10

162
Tree	{ if ( ! allDefinitionsEquivalent ( assignedAt , EMPTY ) ) { return false ; } return CharSequenceUtils . reverse ( multiplicand ) ; }
Code	{ if ( ! allDefinitionsEquivalent ( assignedAt , EMPTY ) ) { return false ; } return CharSequenceUtils . reverse ( multiplicand ) ; }
Distance : 15

163
Tree	{ if ( ! multiplicand ) { return true ; } return getPackageName ( calendar , EMPTY . charAt ( RETURNS_DEFAULTS ) ) ; }
Code	{ if ( ! multiplicand ) { return true ; } return getPackageName ( calendar , EMPTY . charAt ( RETURNS_DEFAULTS ) ) ; }
Distance : 11

164
Tree	{ if ( ! multiplicand ) { return true ; } return getPackageName ( lines () , calendar . reverse ( CALLS_REAL_METHODS ) ) ; }
Code	{ if ( ! multiplicand ) { return true ; } return getPackageName ( lines () , calendar . reverse ( CALLS_REAL_METHODS ) ) ; }
Distance : 12

165
Tree	{ if ( multiplicand != null ) { return true ; } return getPackageName ( symbolName . getPrinter ( calendar ) , withSettings () ) ; }
Code	{ if ( multiplicand != null ) { return true ; } return getPackageName ( symbolName . getPrinter ( calendar ) , withSettings () ) ; }
Distance : 12

166
Tree	{ if ( ! allDefinitionsEquivalent ( symbolName , EMPTY ) ) { return false ; } return CharSequenceUtils . reverse ( multiplicand ) ; }
Code	{ if ( ! allDefinitionsEquivalent ( symbolName , EMPTY ) ) { return false ; } return CharSequenceUtils . reverse ( multiplicand ) ; }
Distance : 15

167
Tree	{ if ( ! CLEANER ) { return true ; } return getPackageName ( calendar , EMPTY . nullToEmpty ( RETURNS_DEFAULTS ) ) ; }
Code	{ if ( ! CLEANER ) { return true ; } return getPackageName ( calendar , EMPTY . nullToEmpty ( RETURNS_DEFAULTS ) ) ; }
Distance : 11

168
Tree	{ if ( multiplicand != null ) { return true ; } return getPackageName ( symbolName , EMPTY . nullToEmpty ( RETURNS_DEFAULTS ) ) ; }
Code	{ if ( multiplicand != null ) { return true ; } return getPackageName ( symbolName , EMPTY . nullToEmpty ( RETURNS_DEFAULTS ) ) ; }
Distance : 9

169
Tree	{ if ( multiplicand != null ) { return true ; } return getPackageName ( lines () , nCols . returnFalse ( CALLS_REAL_METHODS ) ) ; }
Code	{ if ( multiplicand != null ) { return true ; } return getPackageName ( lines () , nCols . returnFalse ( CALLS_REAL_METHODS ) ) ; }
Distance : 10

170
Tree	{ if ( constructorI != null ) { return true ; } return getPackageName ( multiplicand , EMPTY . nullToEmpty ( RETURNS_DEFAULTS ) ) ; }
Code	{ if ( constructorI != null ) { return true ; } return getPackageName ( multiplicand , EMPTY . nullToEmpty ( RETURNS_DEFAULTS ) ) ; }
Distance : 9

171
Tree	{ if ( constructorI != null ) { return true ; } return getPackageName ( lines () , calendar . returnFalse ( RETURNS_DEFAULTS ) ) ; }
Code	{ if ( constructorI != null ) { return true ; } return getPackageName ( lines () , calendar . returnFalse ( RETURNS_DEFAULTS ) ) ; }
Distance : 10

172
Tree	{ if ( assignedAt != null ) { return true ; } return getPackageName ( lines () , nCols . returnFalse ( RETURNS_DEFAULTS ) ) ; }
Code	{ if ( assignedAt != null ) { return true ; } return getPackageName ( lines () , nCols . returnFalse ( RETURNS_DEFAULTS ) ) ; }
Distance : 10

173
Tree	{ if ( constructorI != null ) { return true ; } return getPackageName ( lines () , nCols . returnFalse ( CALLS_REAL_METHODS ) ) ; }
Code	{ if ( constructorI != null ) { return true ; } return getPackageName ( lines () , nCols . returnFalse ( CALLS_REAL_METHODS ) ) ; }
Distance : 10

174
Tree	{ if ( constructorI != null ) { return true ; } return getPackageName ( symbolName , EMPTY . nullToEmpty ( RETURNS_DEFAULTS ) ) ; }
Code	{ if ( constructorI != null ) { return true ; } return getPackageName ( symbolName , EMPTY . nullToEmpty ( RETURNS_DEFAULTS ) ) ; }
Distance : 9

175
Tree	{ if ( symbolName != null ) { return true ; } return getPackageName ( lines () , nCols . returnFalse ( RETURNS_DEFAULTS ) ) ; }
Code	{ if ( symbolName != null ) { return true ; } return getPackageName ( lines () , nCols . returnFalse ( RETURNS_DEFAULTS ) ) ; }
Distance : 10

176
Tree	{ if ( ! multiplicand . getPrinter ( expectedMock ) ) { return true ; } return getPackageName ( calendar , EMPTY . nullToEmpty ( RETURNS_DEFAULTS ) ) ; }
Code	{ if ( ! multiplicand . getPrinter ( expectedMock ) ) { return true ; } return getPackageName ( calendar , EMPTY . nullToEmpty ( RETURNS_DEFAULTS ) ) ; }
Distance : 15

177
Tree	{ if ( ! multiplicand . getPrinter ( expectedMock ) ) { return true ; } return getPackageName ( calendar , EMPTY . charAt ( RETURNS_DEFAULTS ) ) ; }
Code	{ if ( ! multiplicand . getPrinter ( expectedMock ) ) { return true ; } return getPackageName ( calendar , EMPTY . charAt ( RETURNS_DEFAULTS ) ) ; }
Distance : 15

178
Tree	{ if ( ! allDefinitionsEquivalent ( multiplicand , EMPTY , EMPTY , EMPTY . reverse ( multiplicand ) ) ) { return true ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent ( multiplicand , EMPTY , EMPTY , EMPTY . reverse ( multiplicand ) ) ) { return true ; } return false ; }
Distance : 24

179
Tree	{ if ( ! CLEANER . getPrinter ( expectedMock ) ) { return true ; } return getPackageName ( calendar , EMPTY . nullToEmpty ( RETURNS_DEFAULTS ) ) ; }
Code	{ if ( ! CLEANER . getPrinter ( expectedMock ) ) { return true ; } return getPackageName ( calendar , EMPTY . nullToEmpty ( RETURNS_DEFAULTS ) ) ; }
Distance : 15

180
Tree	{ if ( ! allDefinitionsEquivalent ( multiplicand , EMPTY , EMPTY , EMPTY . reverse ( visibility ) ) ) { return true ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent ( multiplicand , EMPTY , EMPTY , EMPTY . reverse ( visibility ) ) ) { return true ; } return false ; }
Distance : 24

181
Tree	{ if ( ! CLEANER . getPrinter ( expectedMock ) ) { return true ; } return getPackageName ( calendar , EMPTY . charAt ( RETURNS_DEFAULTS ) ) ; }
Code	{ if ( ! CLEANER . getPrinter ( expectedMock ) ) { return true ; } return getPackageName ( calendar , EMPTY . charAt ( RETURNS_DEFAULTS ) ) ; }
Distance : 15

182
Tree	{ if ( ! allDefinitionsEquivalent ( symbolName , EMPTY , EMPTY , EMPTY . reverse ( multiplicand ) ) ) { return true ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent ( symbolName , EMPTY , EMPTY , EMPTY . reverse ( multiplicand ) ) ) { return true ; } return false ; }
Distance : 24

183
Tree	{ if ( ! multiplicand . getPrinter ( expectedMock ) ) { return true ; } return getPackageName ( calendar , EMPTY . nullToEmpty ( CALLS_REAL_METHODS ) ) ; }
Code	{ if ( ! multiplicand . getPrinter ( expectedMock ) ) { return true ; } return getPackageName ( calendar , EMPTY . nullToEmpty ( CALLS_REAL_METHODS ) ) ; }
Distance : 15

184
Tree	{ if ( ! multiplicand . getPrinter ( expectedMock ) ) { return true ; } return getPackageName ( calendar , EMPTY . charAt ( CALLS_REAL_METHODS ) ) ; }
Code	{ if ( ! multiplicand . getPrinter ( expectedMock ) ) { return true ; } return getPackageName ( calendar , EMPTY . charAt ( CALLS_REAL_METHODS ) ) ; }
Distance : 15

185
Tree	{ if ( ! allDefinitionsEquivalent ( multiplicand , EMPTY , EMPTY , EMPTY . getDateTimeInstance ( multiplicand ) ) ) { return true ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent ( multiplicand , EMPTY , EMPTY , EMPTY . getDateTimeInstance ( multiplicand ) ) ) { return true ; } return false ; }
Distance : 24

186
Tree	{ if ( ! allDefinitionsEquivalent ( multiplicand , EMPTY , EMPTY , EMPTY . reverse ( multiplicand ) ) ) { return false ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent ( multiplicand , EMPTY , EMPTY , EMPTY . reverse ( multiplicand ) ) ) { return false ; } return false ; }
Distance : 24

187
Tree	{ if ( ! CLEANER . getPrinter ( expectedMock ) ) { return true ; } return getPackageName ( calendar , EMPTY . nullToEmpty ( CALLS_REAL_METHODS ) ) ; }
Code	{ if ( ! CLEANER . getPrinter ( expectedMock ) ) { return true ; } return getPackageName ( calendar , EMPTY . nullToEmpty ( CALLS_REAL_METHODS ) ) ; }
Distance : 15

188
Tree	{ if ( ! allDefinitionsEquivalent ( multiplicand , EMPTY , EMPTY , container . reverse ( visibility ) ) ) { return true ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent ( multiplicand , EMPTY , EMPTY , container . reverse ( visibility ) ) ) { return true ; } return false ; }
Distance : 24

189
Tree	{ if ( ! multiplicand . getPrinter ( multiplicand ) ) { return true ; } return getPackageName ( calendar , EMPTY . nullToEmpty ( RETURNS_DEFAULTS ) ) ; }
Code	{ if ( ! multiplicand . getPrinter ( multiplicand ) ) { return true ; } return getPackageName ( calendar , EMPTY . nullToEmpty ( RETURNS_DEFAULTS ) ) ; }
Distance : 15

190
Tree	{ if ( multiplicand ) { return true ; } return getPackageName ( optimaValues , EMPTY . charAt ( RETURNS_DEFAULTS ) ) ; }
Code	{ if ( multiplicand ) { return true ; } return getPackageName ( optimaValues , EMPTY . charAt ( RETURNS_DEFAULTS ) ) ; }
Distance : 11

191
Tree	{ if ( ! allDefinitionsEquivalent ( multiplicand , EMPTY , EMPTY , container . reverse ( multiplicand ) ) ) { return true ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent ( multiplicand , EMPTY , EMPTY , container . reverse ( multiplicand ) ) ) { return true ; } return false ; }
Distance : 24

192
Tree	{ if ( multiplicand ) { return true ; } return getPackageName ( MOCKITO_PROXY_MARKER , EMPTY . charAt ( RETURNS_DEFAULTS ) ) ; }
Code	{ if ( multiplicand ) { return true ; } return getPackageName ( MOCKITO_PROXY_MARKER , EMPTY . charAt ( RETURNS_DEFAULTS ) ) ; }
Distance : 11

193
Tree	{ if ( ! allDefinitionsEquivalent ( symbolName , EMPTY , EMPTY , EMPTY . reverse ( visibility ) ) ) { return true ; } return false ; }
Code	{ if ( ! allDefinitionsEquivalent ( symbolName , EMPTY , EMPTY , EMPTY . reverse ( visibility ) ) ) { return true ; } return false ; }
Distance : 24

194
Tree	{ if ( multiplicand ) { return true ; } return getPackageName ( schedFuture , EMPTY . charAt ( RETURNS_DEFAULTS ) ) ; }
Code	{ if ( multiplicand ) { return true ; } return getPackageName ( schedFuture , EMPTY . charAt ( RETURNS_DEFAULTS ) ) ; }
Distance : 11

195
Tree	{ if ( multiplicand ) { return true ; } return getPackageName ( optimaValues , EMPTY . nullToEmpty ( RETURNS_DEFAULTS ) ) ; }
Code	{ if ( multiplicand ) { return true ; } return getPackageName ( optimaValues , EMPTY . nullToEmpty ( RETURNS_DEFAULTS ) ) ; }
Distance : 11

196
Tree	{ if ( multiplicand ) { return true ; } return getPackageName ( osName , EMPTY . charAt ( RETURNS_DEFAULTS ) ) ; }
Code	{ if ( multiplicand ) { return true ; } return getPackageName ( osName , EMPTY . charAt ( RETURNS_DEFAULTS ) ) ; }
Distance : 11

197
Tree	{ if ( constructorI ) { return true ; } return getPackageName ( optimaValues , EMPTY . charAt ( RETURNS_DEFAULTS ) ) ; }
Code	{ if ( constructorI ) { return true ; } return getPackageName ( optimaValues , EMPTY . charAt ( RETURNS_DEFAULTS ) ) ; }
Distance : 11

198
Tree	{ if ( constructorI ) { return true ; } return getPackageName ( MOCKITO_PROXY_MARKER , EMPTY . charAt ( RETURNS_DEFAULTS ) ) ; }
Code	{ if ( constructorI ) { return true ; } return getPackageName ( MOCKITO_PROXY_MARKER , EMPTY . charAt ( RETURNS_DEFAULTS ) ) ; }
Distance : 11

199
Tree	{ if ( multiplicand ) { return true ; } return getPackageName ( MOCKITO_PROXY_MARKER , EMPTY . nullToEmpty ( RETURNS_DEFAULTS ) ) ; }
Code	{ if ( multiplicand ) { return true ; } return getPackageName ( MOCKITO_PROXY_MARKER , EMPTY . nullToEmpty ( RETURNS_DEFAULTS ) ) ; }
Distance : 11

========================================================================


========================================================================
Example Number: 14
Parent Code is: 
int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
-------------------------------------------------------------------------------
Child code is: 
int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=indexOfDot}) (204{val==}) (32 (800{val=namespace}) (235{val=.}) (802{val=indexOf}) (214{val=(}) (13{val=CHAR_CONS}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=indexOfDot}) (204{val==}) (32 (800{val=namespace}) (235{val=.}) (802{val=lastIndexOf}) (214{val=(}) (13{val=CHAR_CONS}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/93/parent/src_com_google_javascript_jscomp_ProcessClosurePrimitives.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	int historyIdx = null ;
Code	int historyIdx = null ;
Distance : 7

1
Tree	int historyIdx = namespace . indexOf ( this , DurationFieldType , NUMBER_CONSTANT ) ;
Code	int historyIdx = namespace . indexOf ( this , DurationFieldType , NUMBER_CONSTANT ) ;
Distance : 7

2
Tree	int historyIdx = namespace . indexOf ( this , DurationFieldType , indexOf () , JUnitRule.Strictness.WARN ) ;
Code	int historyIdx = namespace . indexOf ( this , DurationFieldType , indexOf () , JUnitRule.Strictness.WARN ) ;
Distance : 10

3
Tree	int historyIdx = namespace . indexOf ( this , DurationFieldType , indexOf () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Code	int historyIdx = namespace . indexOf ( this , DurationFieldType , indexOf () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Distance : 10

4
Tree	int endLimit = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int endLimit = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

5
Tree	int secondArgument = NUMBER_CONSTANT ;
Code	int secondArgument = NUMBER_CONSTANT ;
Distance : 7

6
Tree	int gmt = namespace . indexOf ( CHAR_CONS ) ;
Code	int gmt = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

7
Tree	int loc = namespace . indexOf ( CHAR_CONS ) ;
Code	int loc = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

8
Tree	int historyIdx = namespace . indexOf ( CHAR_CONS ) ;
Code	int historyIdx = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

9
Tree	int lastHold = namespace . indexOf ( CHAR_CONS ) ;
Code	int lastHold = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

10
Tree	int endLimit ;
Code	int endLimit ;
Distance : 8

11
Tree	int endLimit = namespace . indexOf ( CHAR_CONS ) ;
Code	int endLimit = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

12
Tree	int gmt = this . commonTypes ;
Code	int gmt = this . commonTypes ;
Distance : 6

13
Tree	int secondArgument ;
Code	int secondArgument ;
Distance : 8

14
Tree	int sIdx ;
Code	int sIdx ;
Distance : 8

15
Tree	int gmt ;
Code	int gmt ;
Distance : 8

16
Tree	int historyIdx ;
Code	int historyIdx ;
Distance : 8

17
Tree	int exitCodeValue ;
Code	int exitCodeValue ;
Distance : 8

18
Tree	int secondArgument = namespace . indexOf ( CHAR_CONS ) ;
Code	int secondArgument = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

19
Tree	int gmt = namespace . indexOf ( iElementPairs , null ) ;
Code	int gmt = namespace . indexOf ( iElementPairs , null ) ;
Distance : 5

20
Tree	int endLimit = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int endLimit = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

21
Tree	int loc ;
Code	int loc ;
Distance : 8

22
Tree	int gmt = namespace . indexOf ( this , EMPTY , NUMBER_CONSTANT ) ;
Code	int gmt = namespace . indexOf ( this , EMPTY , NUMBER_CONSTANT ) ;
Distance : 7

23
Tree	int gmt = namespace ;
Code	int gmt = namespace ;
Distance : 6

24
Tree	int lastHold ;
Code	int lastHold ;
Distance : 8

25
Tree	int sIdx = namespace . indexOf ( CHAR_CONS ) ;
Code	int sIdx = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

26
Tree	int gmt = false ;
Code	int gmt = false ;
Distance : 7

27
Tree	int gmt = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int gmt = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

28
Tree	final int lastHold = namespace . indexOf ( CHAR_CONS ) ;
Code	final int lastHold = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

29
Tree	int gmt = NUMBER_CONSTANT ;
Code	int gmt = NUMBER_CONSTANT ;
Distance : 7

30
Tree	int exitCodeValue = namespace . indexOf ( CHAR_CONS ) ;
Code	int exitCodeValue = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

31
Tree	final int gmt = namespace . indexOf ( CHAR_CONS ) ;
Code	final int gmt = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

32
Tree	int historyIdx = namespace . indexOf ( iElementPairs , null ) ;
Code	int historyIdx = namespace . indexOf ( iElementPairs , null ) ;
Distance : 5

33
Tree	int historyIdx = NUMBER_CONSTANT ;
Code	int historyIdx = NUMBER_CONSTANT ;
Distance : 7

34
Tree	int sIdx = NUMBER_CONSTANT ;
Code	int sIdx = NUMBER_CONSTANT ;
Distance : 7

35
Tree	int exitCodeValue = NUMBER_CONSTANT ;
Code	int exitCodeValue = NUMBER_CONSTANT ;
Distance : 7

36
Tree	int gmt = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int gmt = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

37
Tree	int historyIdx = this . commonTypes ;
Code	int historyIdx = this . commonTypes ;
Distance : 6

38
Tree	int historyIdx = namespace . indexOf ( separator , null ) ;
Code	int historyIdx = namespace . indexOf ( separator , null ) ;
Distance : 5

39
Tree	int loc = NUMBER_CONSTANT ;
Code	int loc = NUMBER_CONSTANT ;
Distance : 7

40
Tree	int gmt = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int gmt = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

41
Tree	int historyIdx = namespace . indexOf ( this , EMPTY , NUMBER_CONSTANT ) ;
Code	int historyIdx = namespace . indexOf ( this , EMPTY , NUMBER_CONSTANT ) ;
Distance : 7

42
Tree	int loc = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int loc = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

43
Tree	int historyIdx = namespace . indexOf ( false , namespace ) ;
Code	int historyIdx = namespace . indexOf ( false , namespace ) ;
Distance : 5

44
Tree	int gmt = namespace . indexOf ( this , DurationFieldType , indexOf () , ToStringContext.TO_STRING ) ;
Code	int gmt = namespace . indexOf ( this , DurationFieldType , indexOf () , ToStringContext.TO_STRING ) ;
Distance : 10

45
Tree	int historyIdx = namespace ;
Code	int historyIdx = namespace ;
Distance : 6

46
Tree	int gmt = null ;
Code	int gmt = null ;
Distance : 7

47
Tree	int secondArgument = null ;
Code	int secondArgument = null ;
Distance : 7

48
Tree	int gmt = namespace . indexOf ( this , DurationFieldType , NUMBER_CONSTANT ) ;
Code	int gmt = namespace . indexOf ( this , DurationFieldType , NUMBER_CONSTANT ) ;
Distance : 7

49
Tree	int endLimit = NUMBER_CONSTANT ;
Code	int endLimit = NUMBER_CONSTANT ;
Distance : 7

50
Tree	int secondArgument = namespace . indexOf ( this , DurationFieldType , NUMBER_CONSTANT ) ;
Code	int secondArgument = namespace . indexOf ( this , DurationFieldType , NUMBER_CONSTANT ) ;
Distance : 7

51
Tree	int secondArgument = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int secondArgument = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

52
Tree	int historyIdx = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int historyIdx = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

53
Tree	int endLimit = this . commonTypes ;
Code	int endLimit = this . commonTypes ;
Distance : 6

54
Tree	int gmt = namespace . indexOf ( this , DurationFieldType , indexOf () , JUnitRule.Strictness.WARN ) ;
Code	int gmt = namespace . indexOf ( this , DurationFieldType , indexOf () , JUnitRule.Strictness.WARN ) ;
Distance : 10

55
Tree	int ExcludingURLClassLoaderBuilder [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int ExcludingURLClassLoaderBuilder [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

56
Tree	int directions [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int directions [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

57
Tree	int historyIdx = false ;
Code	int historyIdx = false ;
Distance : 7

58
Tree	int ExcludingURLClassLoaderBuilder [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int ExcludingURLClassLoaderBuilder [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

59
Tree	final int sIdx = namespace . indexOf ( CHAR_CONS ) ;
Code	final int sIdx = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

60
Tree	int YieldFinder [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int YieldFinder [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

61
Tree	int secondArgument = this . commonTypes ;
Code	int secondArgument = this . commonTypes ;
Distance : 6

62
Tree	int historyIdx = getShortNameForRequire ;
Code	int historyIdx = getShortNameForRequire ;
Distance : 7

63
Tree	int lastHold = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int lastHold = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

64
Tree	int historyIdx = namespace . indexOf ( legacyNamespace , null ) ;
Code	int historyIdx = namespace . indexOf ( legacyNamespace , null ) ;
Distance : 5

65
Tree	int endLimit = null ;
Code	int endLimit = null ;
Distance : 7

66
Tree	int sIdx = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int sIdx = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

67
Tree	int historyIdx = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int historyIdx = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

68
Tree	int secondArgument = false ;
Code	int secondArgument = false ;
Distance : 7

69
Tree	int endLimit = namespace . indexOf ( this , DurationFieldType , NUMBER_CONSTANT ) ;
Code	int endLimit = namespace . indexOf ( this , DurationFieldType , NUMBER_CONSTANT ) ;
Distance : 7

70
Tree	int exitCodeValue = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int exitCodeValue = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

71
Tree	int secondArgument = namespace ;
Code	int secondArgument = namespace ;
Distance : 6

72
Tree	int gmt = namespace . indexOf ( separator , null ) ;
Code	int gmt = namespace . indexOf ( separator , null ) ;
Distance : 5

73
Tree	final int gn = namespace . indexOf ( CHAR_CONS ) ;
Code	final int gn = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

74
Tree	int ObjectStreamClass [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int ObjectStreamClass [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

75
Tree	int gmt = namespace . indexOf ( this , DurationFieldType , namespace . indexOf ( STRING_CONSTANT ) , Context.OTHER ) ;
Code	int gmt = namespace . indexOf ( this , DurationFieldType , namespace . indexOf ( STRING_CONSTANT ) , Context.OTHER ) ;
Distance : 14

76
Tree	int lastHold = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int lastHold = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

77
Tree	public int gmt = namespace . indexOf ( CHAR_CONS ) ;
Code	public int gmt = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

78
Tree	int TemplatizedType [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int TemplatizedType [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

79
Tree	int lastHold = NUMBER_CONSTANT ;
Code	int lastHold = NUMBER_CONSTANT ;
Distance : 7

80
Tree	int gmt = this . namespace ;
Code	int gmt = this . namespace ;
Distance : 6

81
Tree	int endLimit = namespace . indexOf ( this , EMPTY , NUMBER_CONSTANT ) ;
Code	int endLimit = namespace . indexOf ( this , EMPTY , NUMBER_CONSTANT ) ;
Distance : 7

82
Tree	int endLimit = namespace . indexOf ( false , namespace ) ;
Code	int endLimit = namespace . indexOf ( false , namespace ) ;
Distance : 5

83
Tree	int FACTORIALS [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int FACTORIALS [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

84
Tree	int secondArgument = namespace . indexOf ( false , namespace ) ;
Code	int secondArgument = namespace . indexOf ( false , namespace ) ;
Distance : 5

85
Tree	int historyIdx = namespace . indexOf ( this , DurationFieldType , indexOf () , LocalizedFormats.NO_DENSITY_FOR_THIS_DISTRIBUTION ) ;
Code	int historyIdx = namespace . indexOf ( this , DurationFieldType , indexOf () , LocalizedFormats.NO_DENSITY_FOR_THIS_DISTRIBUTION ) ;
Distance : 10

86
Tree	int loc = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int loc = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

87
Tree	int IntervalConverter [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int IntervalConverter [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

88
Tree	int gmt = namespace . indexOf ( this , DurationFieldType , namespace . indexOf ( STRING_CONSTANT ) , values.length ) ;
Code	int gmt = namespace . indexOf ( this , DurationFieldType , namespace . indexOf ( STRING_CONSTANT ) , values.length ) ;
Distance : 14

89
Tree	int secondArgument = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int secondArgument = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

90
Tree	int historyIdx = namespace . indexOf ( EMPTY , null ) ;
Code	int historyIdx = namespace . indexOf ( EMPTY , null ) ;
Distance : 5

91
Tree	int gmt = namespace . indexOf ( this , DurationFieldType , indexOf () , LocalizedFormats.NO_DENSITY_FOR_THIS_DISTRIBUTION ) ;
Code	int gmt = namespace . indexOf ( this , DurationFieldType , indexOf () , LocalizedFormats.NO_DENSITY_FOR_THIS_DISTRIBUTION ) ;
Distance : 10

92
Tree	int endLimit = namespace ;
Code	int endLimit = namespace ;
Distance : 6

93
Tree	int gmt = indexOf ( iElementPairs , NUMBER_CONSTANT , namespace , namespace , namespace , Verification.EXPLICIT ) ;
Code	int gmt = indexOf ( iElementPairs , NUMBER_CONSTANT , namespace , namespace , namespace , Verification.EXPLICIT ) ;
Distance : 13

94
Tree	int YieldFinder [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int YieldFinder [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

95
Tree	int endLimit = getShortNameForRequire ;
Code	int endLimit = getShortNameForRequire ;
Distance : 7

96
Tree	int TemplatizedType [] = indexOf () ;
Code	int TemplatizedType [] = indexOf () ;
Distance : 8

97
Tree	int exitCodeValue = null ;
Code	int exitCodeValue = null ;
Distance : 7

98
Tree	int exitCodeValue = this . commonTypes ;
Code	int exitCodeValue = this . commonTypes ;
Distance : 6

99
Tree	int historyIdx = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int historyIdx = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

100
Tree	int directions [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int directions [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

101
Tree	final int rowOffset = namespace . indexOf ( CHAR_CONS ) ;
Code	final int rowOffset = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

102
Tree	int gmt = indexOf ( EMPTY , NUMBER_CONSTANT , namespace , namespace , export , Verification.EXPLICIT ) ;
Code	int gmt = indexOf ( EMPTY , NUMBER_CONSTANT , namespace , namespace , export , Verification.EXPLICIT ) ;
Distance : 13

103
Tree	final int gmt = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int gmt = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

104
Tree	int gmt = namespace . indexOf ( legacyNamespace , null ) ;
Code	int gmt = namespace . indexOf ( legacyNamespace , null ) ;
Distance : 5

105
Tree	int FACTORIALS [] = indexOf () ;
Code	int FACTORIALS [] = indexOf () ;
Distance : 8

106
Tree	int loc = null ;
Code	int loc = null ;
Distance : 7

107
Tree	final int historyIdx = namespace . indexOf ( CHAR_CONS ) ;
Code	final int historyIdx = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

108
Tree	int historyIdx = this . namespace ;
Code	int historyIdx = this . namespace ;
Distance : 6

109
Tree	int sIdx = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int sIdx = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

110
Tree	int gmt = indexOf ( EMPTY , NUMBER_CONSTANT , namespace , namespace , namespace , Verification.EXPLICIT ) ;
Code	int gmt = indexOf ( EMPTY , NUMBER_CONSTANT , namespace , namespace , namespace , Verification.EXPLICIT ) ;
Distance : 13

111
Tree	int endLimit = false ;
Code	int endLimit = false ;
Distance : 7

112
Tree	int sIdx = namespace . indexOf ( false , namespace ) ;
Code	int sIdx = namespace . indexOf ( false , namespace ) ;
Distance : 5

113
Tree	int gmt = namespace . indexOf ( this , DurationFieldType , namespace . indexOf ( STRING_CONSTANT ) , Locale.US ) ;
Code	int gmt = namespace . indexOf ( this , DurationFieldType , namespace . indexOf ( STRING_CONSTANT ) , Locale.US ) ;
Distance : 14

114
Tree	int sIdx = null ;
Code	int sIdx = null ;
Distance : 7

115
Tree	int sIdx = namespace ;
Code	int sIdx = namespace ;
Distance : 6

116
Tree	int gmt = getShortNameForRequire ;
Code	int gmt = getShortNameForRequire ;
Distance : 7

117
Tree	int gmt = namespace . indexOf ( this , DurationFieldType , indexOf () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Code	int gmt = namespace . indexOf ( this , DurationFieldType , indexOf () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Distance : 10

118
Tree	int exitCodeValue = false ;
Code	int exitCodeValue = false ;
Distance : 7

119
Tree	int historyIdx = indexOf ( EMPTY , NUMBER_CONSTANT , namespace , namespace , namespace , Verification.EXPLICIT ) ;
Code	int historyIdx = indexOf ( EMPTY , NUMBER_CONSTANT , namespace , namespace , namespace , Verification.EXPLICIT ) ;
Distance : 13

120
Tree	int sIdx = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int sIdx = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

121
Tree	int gmt = crExportPathNode ;
Code	int gmt = crExportPathNode ;
Distance : 7

122
Tree	int IntervalConverter [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int IntervalConverter [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

123
Tree	int gmt = namespace . indexOf ( this , DurationFieldType , namespace . indexOf ( STRING_CONSTANT ) , Feature.STRING_CONTINUATION ) ;
Code	int gmt = namespace . indexOf ( this , DurationFieldType , namespace . indexOf ( STRING_CONSTANT ) , Feature.STRING_CONTINUATION ) ;
Distance : 14

124
Tree	int FACTORIALS [] = namespace ( iElementPairs ) ;
Code	int FACTORIALS [] = namespace ( iElementPairs ) ;
Distance : 5

125
Tree	int historyIdx = indexOf ( iElementPairs , NUMBER_CONSTANT , namespace , namespace , namespace , Verification.EXPLICIT ) ;
Code	int historyIdx = indexOf ( iElementPairs , NUMBER_CONSTANT , namespace , namespace , namespace , Verification.EXPLICIT ) ;
Distance : 13

126
Tree	int historyIdx = scopeRoots ;
Code	int historyIdx = scopeRoots ;
Distance : 7

127
Tree	int gmt = namespace . indexOf ( this , DurationFieldType , namespace . indexOf ( STRING_CONSTANT ) , LocalizedFormats.NO_DENSITY_FOR_THIS_DISTRIBUTION ) ;
Code	int gmt = namespace . indexOf ( this , DurationFieldType , namespace . indexOf ( STRING_CONSTANT ) , LocalizedFormats.NO_DENSITY_FOR_THIS_DISTRIBUTION ) ;
Distance : 14

128
Tree	int historyIdx = namespace . indexOf ( this , DurationFieldType , indexOf () , ToStringContext.TO_STRING ) ;
Code	int historyIdx = namespace . indexOf ( this , DurationFieldType , indexOf () , ToStringContext.TO_STRING ) ;
Distance : 10

129
Tree	int sIdx = this . commonTypes ;
Code	int sIdx = this . commonTypes ;
Distance : 6

130
Tree	int integers [] = indexOf () ;
Code	int integers [] = indexOf () ;
Distance : 8

131
Tree	int loc = namespace . indexOf ( false , namespace ) ;
Code	int loc = namespace . indexOf ( false , namespace ) ;
Distance : 5

132
Tree	int gmt = namespace . indexOf ( this , DurationFieldType , namespace . indexOf ( STRING_CONSTANT ) , TiesStrategy.MINIMUM ) ;
Code	int gmt = namespace . indexOf ( this , DurationFieldType , namespace . indexOf ( STRING_CONSTANT ) , TiesStrategy.MINIMUM ) ;
Distance : 14

133
Tree	int directions [] = indexOf () ;
Code	int directions [] = indexOf () ;
Distance : 8

134
Tree	int lastHold = namespace . indexOf ( false , namespace ) ;
Code	int lastHold = namespace . indexOf ( false , namespace ) ;
Distance : 5

135
Tree	final int sIdx = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int sIdx = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

136
Tree	int exitCodeValue = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int exitCodeValue = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

137
Tree	int lastHold = false ;
Code	int lastHold = false ;
Distance : 7

138
Tree	int integers [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int integers [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

139
Tree	int exitCodeValue = namespace . indexOf ( false , namespace ) ;
Code	int exitCodeValue = namespace . indexOf ( false , namespace ) ;
Distance : 5

140
Tree	int exitCodeValue = namespace ;
Code	int exitCodeValue = namespace ;
Distance : 6

141
Tree	int gmt = namespace . indexOf ( EMPTY , null ) ;
Code	int gmt = namespace . indexOf ( EMPTY , null ) ;
Distance : 5

142
Tree	int TemplatizedType [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int TemplatizedType [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

143
Tree	int FACTORIALS [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int FACTORIALS [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

144
Tree	int ExcludingURLClassLoaderBuilder [] = indexOf () ;
Code	int ExcludingURLClassLoaderBuilder [] = indexOf () ;
Distance : 8

145
Tree	int historyIdx = indexOf ( EMPTY , NUMBER_CONSTANT , namespace , namespace , export , Verification.EXPLICIT ) ;
Code	int historyIdx = indexOf ( EMPTY , NUMBER_CONSTANT , namespace , namespace , export , Verification.EXPLICIT ) ;
Distance : 13

146
Tree	final int uniDimIndex = namespace . indexOf ( CHAR_CONS ) ;
Code	final int uniDimIndex = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

147
Tree	int integers [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int integers [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

148
Tree	int gmt = indexOf ( EMPTY , NUMBER_CONSTANT , namespace , namespace , USING_GLOBAL_CONFIG , Verification.EXPLICIT ) ;
Code	int gmt = indexOf ( EMPTY , NUMBER_CONSTANT , namespace , namespace , USING_GLOBAL_CONFIG , Verification.EXPLICIT ) ;
Distance : 13

149
Tree	int sIdx = namespace . indexOf ( this , DurationFieldType , NUMBER_CONSTANT ) ;
Code	int sIdx = namespace . indexOf ( this , DurationFieldType , NUMBER_CONSTANT ) ;
Distance : 7

150
Tree	int lastHold = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int lastHold = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

151
Tree	final int historyIdx = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int historyIdx = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

152
Tree	int FACTORIALS [] = namespace ( DurationFieldType ) ;
Code	int FACTORIALS [] = namespace ( DurationFieldType ) ;
Distance : 5

153
Tree	int YieldFinder [] = indexOf () ;
Code	int YieldFinder [] = indexOf () ;
Distance : 8

154
Tree	int gmt = scopeRoots ;
Code	int gmt = scopeRoots ;
Distance : 7

155
Tree	int secondArgument = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int secondArgument = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

156
Tree	int gmt = namespace . indexOf ( false , namespace ) ;
Code	int gmt = namespace . indexOf ( false , namespace ) ;
Distance : 5

157
Tree	int exitCodeValue = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int exitCodeValue = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

158
Tree	int historyIdx = namespace . indexOf ( this , DurationFieldType , namespace . indexOf ( STRING_CONSTANT ) , values.length ) ;
Code	int historyIdx = namespace . indexOf ( this , DurationFieldType , namespace . indexOf ( STRING_CONSTANT ) , values.length ) ;
Distance : 14

159
Tree	int loc = false ;
Code	int loc = false ;
Distance : 7

160
Tree	int historyIdx = namespace . indexOf ( this , DurationFieldType , namespace . indexOf ( STRING_CONSTANT ) , Locale.US ) ;
Code	int historyIdx = namespace . indexOf ( this , DurationFieldType , namespace . indexOf ( STRING_CONSTANT ) , Locale.US ) ;
Distance : 14

161
Tree	int endLimit = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int endLimit = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

162
Tree	final int rowOffset = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int rowOffset = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

163
Tree	int gmt = indexOf ( EMPTY , NUMBER_CONSTANT , namespace , namespace , LocalQName , Verification.EXPLICIT ) ;
Code	int gmt = indexOf ( EMPTY , NUMBER_CONSTANT , namespace , namespace , LocalQName , Verification.EXPLICIT ) ;
Distance : 13

164
Tree	final int gn = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int gn = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

165
Tree	public int gmt = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	public int gmt = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

166
Tree	int loc = namespace ;
Code	int loc = namespace ;
Distance : 6

167
Tree	int lastHold = null ;
Code	int lastHold = null ;
Distance : 7

168
Tree	ExcludingURLClassLoaderBuilder historyIdx = namespace . indexOf ( CHAR_CONS ) ;
Code	ExcludingURLClassLoaderBuilder historyIdx = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

169
Tree	final int uniDimIndex = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int uniDimIndex = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

170
Tree	int gmt = metadata.superClassNameNode ;
Code	int gmt = metadata.superClassNameNode ;
Distance : 7

171
Tree	int TemplatizedType [] = namespace ( iElementPairs ) ;
Code	int TemplatizedType [] = namespace ( iElementPairs ) ;
Distance : 5

172
Tree	final int lastHold = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int lastHold = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

173
Tree	int sIdx = false ;
Code	int sIdx = false ;
Distance : 7

174
Tree	int ObjectStreamClass [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int ObjectStreamClass [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

175
Tree	Sigmoid historyIdx = namespace . indexOf ( CHAR_CONS ) ;
Code	Sigmoid historyIdx = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

176
Tree	int loc = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int loc = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

177
Tree	int FACTORIALS [] = namespace ( EMPTY ) ;
Code	int FACTORIALS [] = namespace ( EMPTY ) ;
Distance : 5

178
Tree	int ObjectStreamClass [] = indexOf () ;
Code	int ObjectStreamClass [] = indexOf () ;
Distance : 8

179
Tree	int lastHold = namespace ;
Code	int lastHold = namespace ;
Distance : 6

180
Tree	int secondArgument = getShortNameForRequire ;
Code	int secondArgument = getShortNameForRequire ;
Distance : 7

181
Tree	int sIdx = getShortNameForRequire ;
Code	int sIdx = getShortNameForRequire ;
Distance : 7

182
Tree	HarmonicFunction historyIdx = namespace . indexOf ( CHAR_CONS ) ;
Code	HarmonicFunction historyIdx = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

183
Tree	int IntervalConverter [] = indexOf () ;
Code	int IntervalConverter [] = indexOf () ;
Distance : 8

184
Tree	int directions [] = namespace ( iElementPairs ) ;
Code	int directions [] = namespace ( iElementPairs ) ;
Distance : 5

185
Tree	packed historyIdx = namespace . indexOf ( CHAR_CONS ) ;
Code	packed historyIdx = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

186
Tree	RectangularCholeskyDecomposition historyIdx = namespace . indexOf ( CHAR_CONS ) ;
Code	RectangularCholeskyDecomposition historyIdx = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

187
Tree	int historyIdx = metadata.superClassNameNode ;
Code	int historyIdx = metadata.superClassNameNode ;
Distance : 7

188
Tree	int TemplatizedType [] = namespace ( DurationFieldType ) ;
Code	int TemplatizedType [] = namespace ( DurationFieldType ) ;
Distance : 5

189
Tree	HarmonicFunction endLimit = namespace . indexOf ( CHAR_CONS ) ;
Code	HarmonicFunction endLimit = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

190
Tree	FACTORIALS historyIdx = namespace . indexOf ( CHAR_CONS ) ;
Code	FACTORIALS historyIdx = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

191
Tree	int ExcludingURLClassLoaderBuilder [] = namespace ( iElementPairs ) ;
Code	int ExcludingURLClassLoaderBuilder [] = namespace ( iElementPairs ) ;
Distance : 5

192
Tree	int endLimit = metadata.superClassNameNode ;
Code	int endLimit = metadata.superClassNameNode ;
Distance : 7

193
Tree	int gmt = functionContext.function ;
Code	int gmt = functionContext.function ;
Distance : 7

194
Tree	int secondArgument = metadata.superClassNameNode ;
Code	int secondArgument = metadata.superClassNameNode ;
Distance : 7

195
Tree	ExcludingURLClassLoaderBuilder endLimit = namespace . indexOf ( CHAR_CONS ) ;
Code	ExcludingURLClassLoaderBuilder endLimit = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

196
Tree	int ObjectStreamClass [] = namespace ( iElementPairs ) ;
Code	int ObjectStreamClass [] = namespace ( iElementPairs ) ;
Distance : 5

197
Tree	int historyIdx = functionContext.function ;
Code	int historyIdx = functionContext.function ;
Distance : 7

198
Tree	int sIdx = metadata.superClassNameNode ;
Code	int sIdx = metadata.superClassNameNode ;
Distance : 7

199
Tree	int exitCodeValue = metadata.superClassNameNode ;
Code	int exitCodeValue = metadata.superClassNameNode ;
Distance : 7

========================================================================


========================================================================
Example Number: 15
Parent Code is: 
int indexOfDot = namespace . indexOf ( CHAR_CONS ) ;
-------------------------------------------------------------------------------
Child code is: 
int indexOfDot = namespace . lastIndexOf ( CHAR_CONS ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=indexOfDot}) (204{val==}) (32 (800{val=namespace}) (235{val=.}) (802{val=indexOf}) (214{val=(}) (13{val=CHAR_CONS}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=indexOfDot}) (204{val==}) (32 (800{val=namespace}) (235{val=.}) (802{val=lastIndexOf}) (214{val=(}) (13{val=CHAR_CONS}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/92/parent/src_com_google_javascript_jscomp_ProcessClosurePrimitives.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	int historyIdx = null ;
Code	int historyIdx = null ;
Distance : 7

1
Tree	int historyIdx = namespace . indexOf ( this , DurationFieldType , NUMBER_CONSTANT ) ;
Code	int historyIdx = namespace . indexOf ( this , DurationFieldType , NUMBER_CONSTANT ) ;
Distance : 7

2
Tree	int historyIdx = namespace . indexOf ( this , DurationFieldType , indexOf () , JUnitRule.Strictness.WARN ) ;
Code	int historyIdx = namespace . indexOf ( this , DurationFieldType , indexOf () , JUnitRule.Strictness.WARN ) ;
Distance : 10

3
Tree	int historyIdx = namespace . indexOf ( this , DurationFieldType , indexOf () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Code	int historyIdx = namespace . indexOf ( this , DurationFieldType , indexOf () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Distance : 10

4
Tree	int endLimit = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int endLimit = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

5
Tree	int secondArgument = NUMBER_CONSTANT ;
Code	int secondArgument = NUMBER_CONSTANT ;
Distance : 7

6
Tree	int gmt = namespace . indexOf ( CHAR_CONS ) ;
Code	int gmt = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

7
Tree	int loc = namespace . indexOf ( CHAR_CONS ) ;
Code	int loc = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

8
Tree	int historyIdx = namespace . indexOf ( CHAR_CONS ) ;
Code	int historyIdx = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

9
Tree	int lastHold = namespace . indexOf ( CHAR_CONS ) ;
Code	int lastHold = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

10
Tree	int endLimit ;
Code	int endLimit ;
Distance : 8

11
Tree	int endLimit = namespace . indexOf ( CHAR_CONS ) ;
Code	int endLimit = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

12
Tree	int gmt = this . commonTypes ;
Code	int gmt = this . commonTypes ;
Distance : 6

13
Tree	int secondArgument ;
Code	int secondArgument ;
Distance : 8

14
Tree	int sIdx ;
Code	int sIdx ;
Distance : 8

15
Tree	int gmt ;
Code	int gmt ;
Distance : 8

16
Tree	int historyIdx ;
Code	int historyIdx ;
Distance : 8

17
Tree	int exitCodeValue ;
Code	int exitCodeValue ;
Distance : 8

18
Tree	int secondArgument = namespace . indexOf ( CHAR_CONS ) ;
Code	int secondArgument = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

19
Tree	int gmt = namespace . indexOf ( iElementPairs , null ) ;
Code	int gmt = namespace . indexOf ( iElementPairs , null ) ;
Distance : 5

20
Tree	int endLimit = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int endLimit = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

21
Tree	int loc ;
Code	int loc ;
Distance : 8

22
Tree	int gmt = namespace . indexOf ( this , EMPTY , NUMBER_CONSTANT ) ;
Code	int gmt = namespace . indexOf ( this , EMPTY , NUMBER_CONSTANT ) ;
Distance : 7

23
Tree	int gmt = namespace ;
Code	int gmt = namespace ;
Distance : 6

24
Tree	int lastHold ;
Code	int lastHold ;
Distance : 8

25
Tree	int sIdx = namespace . indexOf ( CHAR_CONS ) ;
Code	int sIdx = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

26
Tree	int gmt = false ;
Code	int gmt = false ;
Distance : 7

27
Tree	int gmt = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int gmt = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

28
Tree	final int lastHold = namespace . indexOf ( CHAR_CONS ) ;
Code	final int lastHold = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

29
Tree	int gmt = NUMBER_CONSTANT ;
Code	int gmt = NUMBER_CONSTANT ;
Distance : 7

30
Tree	int exitCodeValue = namespace . indexOf ( CHAR_CONS ) ;
Code	int exitCodeValue = namespace . indexOf ( CHAR_CONS ) ;
Distance : 2

31
Tree	final int gmt = namespace . indexOf ( CHAR_CONS ) ;
Code	final int gmt = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

32
Tree	int historyIdx = namespace . indexOf ( iElementPairs , null ) ;
Code	int historyIdx = namespace . indexOf ( iElementPairs , null ) ;
Distance : 5

33
Tree	int historyIdx = NUMBER_CONSTANT ;
Code	int historyIdx = NUMBER_CONSTANT ;
Distance : 7

34
Tree	int sIdx = NUMBER_CONSTANT ;
Code	int sIdx = NUMBER_CONSTANT ;
Distance : 7

35
Tree	int exitCodeValue = NUMBER_CONSTANT ;
Code	int exitCodeValue = NUMBER_CONSTANT ;
Distance : 7

36
Tree	int gmt = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int gmt = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

37
Tree	int historyIdx = this . commonTypes ;
Code	int historyIdx = this . commonTypes ;
Distance : 6

38
Tree	int historyIdx = namespace . indexOf ( separator , null ) ;
Code	int historyIdx = namespace . indexOf ( separator , null ) ;
Distance : 5

39
Tree	int loc = NUMBER_CONSTANT ;
Code	int loc = NUMBER_CONSTANT ;
Distance : 7

40
Tree	int gmt = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int gmt = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

41
Tree	int historyIdx = namespace . indexOf ( this , EMPTY , NUMBER_CONSTANT ) ;
Code	int historyIdx = namespace . indexOf ( this , EMPTY , NUMBER_CONSTANT ) ;
Distance : 7

42
Tree	int loc = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int loc = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

43
Tree	int historyIdx = namespace . indexOf ( false , namespace ) ;
Code	int historyIdx = namespace . indexOf ( false , namespace ) ;
Distance : 5

44
Tree	int gmt = namespace . indexOf ( this , DurationFieldType , indexOf () , ToStringContext.TO_STRING ) ;
Code	int gmt = namespace . indexOf ( this , DurationFieldType , indexOf () , ToStringContext.TO_STRING ) ;
Distance : 10

45
Tree	int historyIdx = namespace ;
Code	int historyIdx = namespace ;
Distance : 6

46
Tree	int gmt = null ;
Code	int gmt = null ;
Distance : 7

47
Tree	int secondArgument = null ;
Code	int secondArgument = null ;
Distance : 7

48
Tree	int gmt = namespace . indexOf ( this , DurationFieldType , NUMBER_CONSTANT ) ;
Code	int gmt = namespace . indexOf ( this , DurationFieldType , NUMBER_CONSTANT ) ;
Distance : 7

49
Tree	int endLimit = NUMBER_CONSTANT ;
Code	int endLimit = NUMBER_CONSTANT ;
Distance : 7

50
Tree	int secondArgument = namespace . indexOf ( this , DurationFieldType , NUMBER_CONSTANT ) ;
Code	int secondArgument = namespace . indexOf ( this , DurationFieldType , NUMBER_CONSTANT ) ;
Distance : 7

51
Tree	int secondArgument = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int secondArgument = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

52
Tree	int historyIdx = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int historyIdx = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

53
Tree	int endLimit = this . commonTypes ;
Code	int endLimit = this . commonTypes ;
Distance : 6

54
Tree	int gmt = namespace . indexOf ( this , DurationFieldType , indexOf () , JUnitRule.Strictness.WARN ) ;
Code	int gmt = namespace . indexOf ( this , DurationFieldType , indexOf () , JUnitRule.Strictness.WARN ) ;
Distance : 10

55
Tree	int ExcludingURLClassLoaderBuilder [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int ExcludingURLClassLoaderBuilder [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

56
Tree	int directions [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int directions [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

57
Tree	int historyIdx = false ;
Code	int historyIdx = false ;
Distance : 7

58
Tree	int ExcludingURLClassLoaderBuilder [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int ExcludingURLClassLoaderBuilder [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

59
Tree	final int sIdx = namespace . indexOf ( CHAR_CONS ) ;
Code	final int sIdx = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

60
Tree	int YieldFinder [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int YieldFinder [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

61
Tree	int secondArgument = this . commonTypes ;
Code	int secondArgument = this . commonTypes ;
Distance : 6

62
Tree	int historyIdx = getShortNameForRequire ;
Code	int historyIdx = getShortNameForRequire ;
Distance : 7

63
Tree	int lastHold = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int lastHold = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

64
Tree	int historyIdx = namespace . indexOf ( legacyNamespace , null ) ;
Code	int historyIdx = namespace . indexOf ( legacyNamespace , null ) ;
Distance : 5

65
Tree	int endLimit = null ;
Code	int endLimit = null ;
Distance : 7

66
Tree	int sIdx = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int sIdx = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

67
Tree	int historyIdx = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int historyIdx = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

68
Tree	int secondArgument = false ;
Code	int secondArgument = false ;
Distance : 7

69
Tree	int endLimit = namespace . indexOf ( this , DurationFieldType , NUMBER_CONSTANT ) ;
Code	int endLimit = namespace . indexOf ( this , DurationFieldType , NUMBER_CONSTANT ) ;
Distance : 7

70
Tree	int exitCodeValue = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int exitCodeValue = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

71
Tree	int secondArgument = namespace ;
Code	int secondArgument = namespace ;
Distance : 6

72
Tree	int gmt = namespace . indexOf ( separator , null ) ;
Code	int gmt = namespace . indexOf ( separator , null ) ;
Distance : 5

73
Tree	final int gn = namespace . indexOf ( CHAR_CONS ) ;
Code	final int gn = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

74
Tree	int ObjectStreamClass [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int ObjectStreamClass [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

75
Tree	int gmt = namespace . indexOf ( this , DurationFieldType , namespace . indexOf ( STRING_CONSTANT ) , Context.OTHER ) ;
Code	int gmt = namespace . indexOf ( this , DurationFieldType , namespace . indexOf ( STRING_CONSTANT ) , Context.OTHER ) ;
Distance : 14

76
Tree	int lastHold = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int lastHold = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

77
Tree	public int gmt = namespace . indexOf ( CHAR_CONS ) ;
Code	public int gmt = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

78
Tree	int TemplatizedType [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int TemplatizedType [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

79
Tree	int lastHold = NUMBER_CONSTANT ;
Code	int lastHold = NUMBER_CONSTANT ;
Distance : 7

80
Tree	int gmt = this . namespace ;
Code	int gmt = this . namespace ;
Distance : 6

81
Tree	int endLimit = namespace . indexOf ( this , EMPTY , NUMBER_CONSTANT ) ;
Code	int endLimit = namespace . indexOf ( this , EMPTY , NUMBER_CONSTANT ) ;
Distance : 7

82
Tree	int endLimit = namespace . indexOf ( false , namespace ) ;
Code	int endLimit = namespace . indexOf ( false , namespace ) ;
Distance : 5

83
Tree	int FACTORIALS [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int FACTORIALS [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

84
Tree	int secondArgument = namespace . indexOf ( false , namespace ) ;
Code	int secondArgument = namespace . indexOf ( false , namespace ) ;
Distance : 5

85
Tree	int historyIdx = namespace . indexOf ( this , DurationFieldType , indexOf () , LocalizedFormats.NO_DENSITY_FOR_THIS_DISTRIBUTION ) ;
Code	int historyIdx = namespace . indexOf ( this , DurationFieldType , indexOf () , LocalizedFormats.NO_DENSITY_FOR_THIS_DISTRIBUTION ) ;
Distance : 10

86
Tree	int loc = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Code	int loc = namespace . indexOf ( STRING_CONSTANT , STRING_CONSTANT , namespace ) ;
Distance : 7

87
Tree	int IntervalConverter [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int IntervalConverter [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

88
Tree	int gmt = namespace . indexOf ( this , DurationFieldType , namespace . indexOf ( STRING_CONSTANT ) , values.length ) ;
Code	int gmt = namespace . indexOf ( this , DurationFieldType , namespace . indexOf ( STRING_CONSTANT ) , values.length ) ;
Distance : 14

89
Tree	int secondArgument = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int secondArgument = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

90
Tree	int historyIdx = namespace . indexOf ( EMPTY , null ) ;
Code	int historyIdx = namespace . indexOf ( EMPTY , null ) ;
Distance : 5

91
Tree	int gmt = namespace . indexOf ( this , DurationFieldType , indexOf () , LocalizedFormats.NO_DENSITY_FOR_THIS_DISTRIBUTION ) ;
Code	int gmt = namespace . indexOf ( this , DurationFieldType , indexOf () , LocalizedFormats.NO_DENSITY_FOR_THIS_DISTRIBUTION ) ;
Distance : 10

92
Tree	int endLimit = namespace ;
Code	int endLimit = namespace ;
Distance : 6

93
Tree	int gmt = indexOf ( iElementPairs , NUMBER_CONSTANT , namespace , namespace , namespace , Verification.EXPLICIT ) ;
Code	int gmt = indexOf ( iElementPairs , NUMBER_CONSTANT , namespace , namespace , namespace , Verification.EXPLICIT ) ;
Distance : 13

94
Tree	int YieldFinder [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int YieldFinder [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

95
Tree	int endLimit = getShortNameForRequire ;
Code	int endLimit = getShortNameForRequire ;
Distance : 7

96
Tree	int TemplatizedType [] = indexOf () ;
Code	int TemplatizedType [] = indexOf () ;
Distance : 8

97
Tree	int exitCodeValue = null ;
Code	int exitCodeValue = null ;
Distance : 7

98
Tree	int exitCodeValue = this . commonTypes ;
Code	int exitCodeValue = this . commonTypes ;
Distance : 6

99
Tree	int historyIdx = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int historyIdx = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

100
Tree	int directions [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int directions [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

101
Tree	final int rowOffset = namespace . indexOf ( CHAR_CONS ) ;
Code	final int rowOffset = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

102
Tree	int gmt = indexOf ( EMPTY , NUMBER_CONSTANT , namespace , namespace , export , Verification.EXPLICIT ) ;
Code	int gmt = indexOf ( EMPTY , NUMBER_CONSTANT , namespace , namespace , export , Verification.EXPLICIT ) ;
Distance : 13

103
Tree	final int gmt = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int gmt = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

104
Tree	int gmt = namespace . indexOf ( legacyNamespace , null ) ;
Code	int gmt = namespace . indexOf ( legacyNamespace , null ) ;
Distance : 5

105
Tree	int FACTORIALS [] = indexOf () ;
Code	int FACTORIALS [] = indexOf () ;
Distance : 8

106
Tree	int loc = null ;
Code	int loc = null ;
Distance : 7

107
Tree	final int historyIdx = namespace . indexOf ( CHAR_CONS ) ;
Code	final int historyIdx = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

108
Tree	int historyIdx = this . namespace ;
Code	int historyIdx = this . namespace ;
Distance : 6

109
Tree	int sIdx = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int sIdx = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

110
Tree	int gmt = indexOf ( EMPTY , NUMBER_CONSTANT , namespace , namespace , namespace , Verification.EXPLICIT ) ;
Code	int gmt = indexOf ( EMPTY , NUMBER_CONSTANT , namespace , namespace , namespace , Verification.EXPLICIT ) ;
Distance : 13

111
Tree	int endLimit = false ;
Code	int endLimit = false ;
Distance : 7

112
Tree	int sIdx = namespace . indexOf ( false , namespace ) ;
Code	int sIdx = namespace . indexOf ( false , namespace ) ;
Distance : 5

113
Tree	int gmt = namespace . indexOf ( this , DurationFieldType , namespace . indexOf ( STRING_CONSTANT ) , Locale.US ) ;
Code	int gmt = namespace . indexOf ( this , DurationFieldType , namespace . indexOf ( STRING_CONSTANT ) , Locale.US ) ;
Distance : 14

114
Tree	int sIdx = null ;
Code	int sIdx = null ;
Distance : 7

115
Tree	int sIdx = namespace ;
Code	int sIdx = namespace ;
Distance : 6

116
Tree	int gmt = getShortNameForRequire ;
Code	int gmt = getShortNameForRequire ;
Distance : 7

117
Tree	int gmt = namespace . indexOf ( this , DurationFieldType , indexOf () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Code	int gmt = namespace . indexOf ( this , DurationFieldType , indexOf () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Distance : 10

118
Tree	int exitCodeValue = false ;
Code	int exitCodeValue = false ;
Distance : 7

119
Tree	int historyIdx = indexOf ( EMPTY , NUMBER_CONSTANT , namespace , namespace , namespace , Verification.EXPLICIT ) ;
Code	int historyIdx = indexOf ( EMPTY , NUMBER_CONSTANT , namespace , namespace , namespace , Verification.EXPLICIT ) ;
Distance : 13

120
Tree	int sIdx = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int sIdx = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

121
Tree	int gmt = crExportPathNode ;
Code	int gmt = crExportPathNode ;
Distance : 7

122
Tree	int IntervalConverter [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int IntervalConverter [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

123
Tree	int gmt = namespace . indexOf ( this , DurationFieldType , namespace . indexOf ( STRING_CONSTANT ) , Feature.STRING_CONTINUATION ) ;
Code	int gmt = namespace . indexOf ( this , DurationFieldType , namespace . indexOf ( STRING_CONSTANT ) , Feature.STRING_CONTINUATION ) ;
Distance : 14

124
Tree	int FACTORIALS [] = namespace ( iElementPairs ) ;
Code	int FACTORIALS [] = namespace ( iElementPairs ) ;
Distance : 5

125
Tree	int historyIdx = indexOf ( iElementPairs , NUMBER_CONSTANT , namespace , namespace , namespace , Verification.EXPLICIT ) ;
Code	int historyIdx = indexOf ( iElementPairs , NUMBER_CONSTANT , namespace , namespace , namespace , Verification.EXPLICIT ) ;
Distance : 13

126
Tree	int historyIdx = scopeRoots ;
Code	int historyIdx = scopeRoots ;
Distance : 7

127
Tree	int gmt = namespace . indexOf ( this , DurationFieldType , namespace . indexOf ( STRING_CONSTANT ) , LocalizedFormats.NO_DENSITY_FOR_THIS_DISTRIBUTION ) ;
Code	int gmt = namespace . indexOf ( this , DurationFieldType , namespace . indexOf ( STRING_CONSTANT ) , LocalizedFormats.NO_DENSITY_FOR_THIS_DISTRIBUTION ) ;
Distance : 14

128
Tree	int historyIdx = namespace . indexOf ( this , DurationFieldType , indexOf () , ToStringContext.TO_STRING ) ;
Code	int historyIdx = namespace . indexOf ( this , DurationFieldType , indexOf () , ToStringContext.TO_STRING ) ;
Distance : 10

129
Tree	int sIdx = this . commonTypes ;
Code	int sIdx = this . commonTypes ;
Distance : 6

130
Tree	int integers [] = indexOf () ;
Code	int integers [] = indexOf () ;
Distance : 8

131
Tree	int loc = namespace . indexOf ( false , namespace ) ;
Code	int loc = namespace . indexOf ( false , namespace ) ;
Distance : 5

132
Tree	int gmt = namespace . indexOf ( this , DurationFieldType , namespace . indexOf ( STRING_CONSTANT ) , TiesStrategy.MINIMUM ) ;
Code	int gmt = namespace . indexOf ( this , DurationFieldType , namespace . indexOf ( STRING_CONSTANT ) , TiesStrategy.MINIMUM ) ;
Distance : 14

133
Tree	int directions [] = indexOf () ;
Code	int directions [] = indexOf () ;
Distance : 8

134
Tree	int lastHold = namespace . indexOf ( false , namespace ) ;
Code	int lastHold = namespace . indexOf ( false , namespace ) ;
Distance : 5

135
Tree	final int sIdx = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int sIdx = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

136
Tree	int exitCodeValue = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int exitCodeValue = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

137
Tree	int lastHold = false ;
Code	int lastHold = false ;
Distance : 7

138
Tree	int integers [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int integers [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

139
Tree	int exitCodeValue = namespace . indexOf ( false , namespace ) ;
Code	int exitCodeValue = namespace . indexOf ( false , namespace ) ;
Distance : 5

140
Tree	int exitCodeValue = namespace ;
Code	int exitCodeValue = namespace ;
Distance : 6

141
Tree	int gmt = namespace . indexOf ( EMPTY , null ) ;
Code	int gmt = namespace . indexOf ( EMPTY , null ) ;
Distance : 5

142
Tree	int TemplatizedType [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int TemplatizedType [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

143
Tree	int FACTORIALS [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int FACTORIALS [] = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

144
Tree	int ExcludingURLClassLoaderBuilder [] = indexOf () ;
Code	int ExcludingURLClassLoaderBuilder [] = indexOf () ;
Distance : 8

145
Tree	int historyIdx = indexOf ( EMPTY , NUMBER_CONSTANT , namespace , namespace , export , Verification.EXPLICIT ) ;
Code	int historyIdx = indexOf ( EMPTY , NUMBER_CONSTANT , namespace , namespace , export , Verification.EXPLICIT ) ;
Distance : 13

146
Tree	final int uniDimIndex = namespace . indexOf ( CHAR_CONS ) ;
Code	final int uniDimIndex = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

147
Tree	int integers [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int integers [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

148
Tree	int gmt = indexOf ( EMPTY , NUMBER_CONSTANT , namespace , namespace , USING_GLOBAL_CONFIG , Verification.EXPLICIT ) ;
Code	int gmt = indexOf ( EMPTY , NUMBER_CONSTANT , namespace , namespace , USING_GLOBAL_CONFIG , Verification.EXPLICIT ) ;
Distance : 13

149
Tree	int sIdx = namespace . indexOf ( this , DurationFieldType , NUMBER_CONSTANT ) ;
Code	int sIdx = namespace . indexOf ( this , DurationFieldType , NUMBER_CONSTANT ) ;
Distance : 7

150
Tree	int lastHold = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int lastHold = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

151
Tree	final int historyIdx = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int historyIdx = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

152
Tree	int FACTORIALS [] = namespace ( DurationFieldType ) ;
Code	int FACTORIALS [] = namespace ( DurationFieldType ) ;
Distance : 5

153
Tree	int YieldFinder [] = indexOf () ;
Code	int YieldFinder [] = indexOf () ;
Distance : 8

154
Tree	int gmt = scopeRoots ;
Code	int gmt = scopeRoots ;
Distance : 7

155
Tree	int secondArgument = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int secondArgument = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

156
Tree	int gmt = namespace . indexOf ( false , namespace ) ;
Code	int gmt = namespace . indexOf ( false , namespace ) ;
Distance : 5

157
Tree	int exitCodeValue = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	int exitCodeValue = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 5

158
Tree	int historyIdx = namespace . indexOf ( this , DurationFieldType , namespace . indexOf ( STRING_CONSTANT ) , values.length ) ;
Code	int historyIdx = namespace . indexOf ( this , DurationFieldType , namespace . indexOf ( STRING_CONSTANT ) , values.length ) ;
Distance : 14

159
Tree	int loc = false ;
Code	int loc = false ;
Distance : 7

160
Tree	int historyIdx = namespace . indexOf ( this , DurationFieldType , namespace . indexOf ( STRING_CONSTANT ) , Locale.US ) ;
Code	int historyIdx = namespace . indexOf ( this , DurationFieldType , namespace . indexOf ( STRING_CONSTANT ) , Locale.US ) ;
Distance : 14

161
Tree	int endLimit = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int endLimit = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

162
Tree	final int rowOffset = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int rowOffset = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

163
Tree	int gmt = indexOf ( EMPTY , NUMBER_CONSTANT , namespace , namespace , LocalQName , Verification.EXPLICIT ) ;
Code	int gmt = indexOf ( EMPTY , NUMBER_CONSTANT , namespace , namespace , LocalQName , Verification.EXPLICIT ) ;
Distance : 13

164
Tree	final int gn = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int gn = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

165
Tree	public int gmt = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	public int gmt = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

166
Tree	int loc = namespace ;
Code	int loc = namespace ;
Distance : 6

167
Tree	int lastHold = null ;
Code	int lastHold = null ;
Distance : 7

168
Tree	ExcludingURLClassLoaderBuilder historyIdx = namespace . indexOf ( CHAR_CONS ) ;
Code	ExcludingURLClassLoaderBuilder historyIdx = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

169
Tree	final int uniDimIndex = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int uniDimIndex = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

170
Tree	int gmt = metadata.superClassNameNode ;
Code	int gmt = metadata.superClassNameNode ;
Distance : 7

171
Tree	int TemplatizedType [] = namespace ( iElementPairs ) ;
Code	int TemplatizedType [] = namespace ( iElementPairs ) ;
Distance : 5

172
Tree	final int lastHold = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int lastHold = namespace . indexOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

173
Tree	int sIdx = false ;
Code	int sIdx = false ;
Distance : 7

174
Tree	int ObjectStreamClass [] = namespace . indexOf ( CHAR_CONS ) ;
Code	int ObjectStreamClass [] = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

175
Tree	Sigmoid historyIdx = namespace . indexOf ( CHAR_CONS ) ;
Code	Sigmoid historyIdx = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

176
Tree	int loc = namespace . indexOf ( STRING_CONSTANT , false ) ;
Code	int loc = namespace . indexOf ( STRING_CONSTANT , false ) ;
Distance : 5

177
Tree	int FACTORIALS [] = namespace ( EMPTY ) ;
Code	int FACTORIALS [] = namespace ( EMPTY ) ;
Distance : 5

178
Tree	int ObjectStreamClass [] = indexOf () ;
Code	int ObjectStreamClass [] = indexOf () ;
Distance : 8

179
Tree	int lastHold = namespace ;
Code	int lastHold = namespace ;
Distance : 6

180
Tree	int secondArgument = getShortNameForRequire ;
Code	int secondArgument = getShortNameForRequire ;
Distance : 7

181
Tree	int sIdx = getShortNameForRequire ;
Code	int sIdx = getShortNameForRequire ;
Distance : 7

182
Tree	HarmonicFunction historyIdx = namespace . indexOf ( CHAR_CONS ) ;
Code	HarmonicFunction historyIdx = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

183
Tree	int IntervalConverter [] = indexOf () ;
Code	int IntervalConverter [] = indexOf () ;
Distance : 8

184
Tree	int directions [] = namespace ( iElementPairs ) ;
Code	int directions [] = namespace ( iElementPairs ) ;
Distance : 5

185
Tree	packed historyIdx = namespace . indexOf ( CHAR_CONS ) ;
Code	packed historyIdx = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

186
Tree	RectangularCholeskyDecomposition historyIdx = namespace . indexOf ( CHAR_CONS ) ;
Code	RectangularCholeskyDecomposition historyIdx = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

187
Tree	int historyIdx = metadata.superClassNameNode ;
Code	int historyIdx = metadata.superClassNameNode ;
Distance : 7

188
Tree	int TemplatizedType [] = namespace ( DurationFieldType ) ;
Code	int TemplatizedType [] = namespace ( DurationFieldType ) ;
Distance : 5

189
Tree	HarmonicFunction endLimit = namespace . indexOf ( CHAR_CONS ) ;
Code	HarmonicFunction endLimit = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

190
Tree	FACTORIALS historyIdx = namespace . indexOf ( CHAR_CONS ) ;
Code	FACTORIALS historyIdx = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

191
Tree	int ExcludingURLClassLoaderBuilder [] = namespace ( iElementPairs ) ;
Code	int ExcludingURLClassLoaderBuilder [] = namespace ( iElementPairs ) ;
Distance : 5

192
Tree	int endLimit = metadata.superClassNameNode ;
Code	int endLimit = metadata.superClassNameNode ;
Distance : 7

193
Tree	int gmt = functionContext.function ;
Code	int gmt = functionContext.function ;
Distance : 7

194
Tree	int secondArgument = metadata.superClassNameNode ;
Code	int secondArgument = metadata.superClassNameNode ;
Distance : 7

195
Tree	ExcludingURLClassLoaderBuilder endLimit = namespace . indexOf ( CHAR_CONS ) ;
Code	ExcludingURLClassLoaderBuilder endLimit = namespace . indexOf ( CHAR_CONS ) ;
Distance : 3

196
Tree	int ObjectStreamClass [] = namespace ( iElementPairs ) ;
Code	int ObjectStreamClass [] = namespace ( iElementPairs ) ;
Distance : 5

197
Tree	int historyIdx = functionContext.function ;
Code	int historyIdx = functionContext.function ;
Distance : 7

198
Tree	int sIdx = metadata.superClassNameNode ;
Code	int sIdx = metadata.superClassNameNode ;
Distance : 7

199
Tree	int exitCodeValue = metadata.superClassNameNode ;
Code	int exitCodeValue = metadata.superClassNameNode ;
Distance : 7

========================================================================


========================================================================
Example Number: 16
Parent Code is: 
! type . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
-------------------------------------------------------------------------------
Child code is: 
! type . restrictByNotNullOrUndefined () . isSubtype ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (38 (207{val=!}) (32 (800{val=type}) (235{val=.}) (802{val=isSubtype}) (214{val=(}) (32 (800{val=typeRegistry}) (235{val=.}) (802{val=getNativeType}) (214{val=(}) (800{val=OBJECT_TYPE}) (215{val=)})) (215{val=)}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (38 (207{val=!}) (32 (32 (800{val=type}) (235{val=.}) (802{val=restrictByNotNullOrUndefined}) (216{val=()})) (235{val=.}) (802{val=isSubtype}) (214{val=(}) (32 (800{val=typeRegistry}) (235{val=.}) (802{val=getNativeType}) (214{val=(}) (800{val=OBJECT_TYPE}) (215{val=)})) (215{val=)}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/90/parent/src_com_google_javascript_jscomp_FunctionTypeBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	( NUMBER_CONSTANT * type . isSubtypeOf ( OBJECT_TYPE ) )
Code	( NUMBER_CONSTANT * type . isSubtypeOf ( OBJECT_TYPE ) )
Distance : 10

1
Tree	! type . isSubtypeOf ( typeRegistry ) . isUnknownType ( TokenType.OPEN_ANGLE )
Code	! type . isSubtypeOf ( typeRegistry ) . isUnknownType ( TokenType.OPEN_ANGLE )
Distance : 8

2
Tree	n = ( JSType ) expr . isSubtypeOf ( typeRegistry )
Code	n = ( JSType ) expr . isSubtypeOf ( typeRegistry )
Distance : 12

3
Tree	! isSubtypeOf ( typeRegistry . getNativeType ( ES8 ) )
Code	! isSubtypeOf ( typeRegistry . getNativeType ( ES8 ) )
Distance : 7

4
Tree	!
Code	!
Distance : 14

5
Tree	( NUMBER_CONSTANT * type . isSubtypeOf ( receiverType ) )
Code	( NUMBER_CONSTANT * type . isSubtypeOf ( receiverType ) )
Distance : 11

6
Tree	! type . isSubtypeOf ( typeRegistry ) . getNativeType ( TokenType.OPEN_ANGLE )
Code	! type . isSubtypeOf ( typeRegistry ) . getNativeType ( TokenType.OPEN_ANGLE )
Distance : 7

7
Tree	! type . isSubtypeOf ( typeRegistry ) . contains ( JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN )
Code	! type . isSubtypeOf ( typeRegistry ) . contains ( JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN )
Distance : 8

8
Tree	( NUMBER_CONSTANT * type . isSubtypeOf ( ITERABLE_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Code	( NUMBER_CONSTANT * type . isSubtypeOf ( ITERABLE_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Distance : 8

9
Tree	! type . isSubtypeOf ( typeRegistry . isSubtypeOf ( NUMBER_CONSTANT , OBJECT_TYPE ) )
Code	! type . isSubtypeOf ( typeRegistry . isSubtypeOf ( NUMBER_CONSTANT , OBJECT_TYPE ) )
Distance : 7

10
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE ) == PropAccess.INCLUDE_STRAY_PROPS )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE ) == PropAccess.INCLUDE_STRAY_PROPS )
Distance : 9

11
Tree	( NUMBER_CONSTANT * type . isSubtypeOf ( cyclicCause . getNativeType ( OBJECT_TYPE ) ) )
Code	( NUMBER_CONSTANT * type . isSubtypeOf ( cyclicCause . getNativeType ( OBJECT_TYPE ) ) )
Distance : 8

12
Tree	! type . isSubtypeOf ( typeRegistry ) . contains ( JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE )
Code	! type . isSubtypeOf ( typeRegistry ) . contains ( JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE )
Distance : 8

13
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE ) == Double.MIN_VALUE )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE ) == Double.MIN_VALUE )
Distance : 9

14
Tree	( NUMBER_CONSTANT * type . isSubtypeOf ( ES8 . getNativeType ( OBJECT_TYPE ) ) )
Code	( NUMBER_CONSTANT * type . isSubtypeOf ( ES8 . getNativeType ( OBJECT_TYPE ) ) )
Distance : 8

15
Tree	! type . isSubtypeOf ( typeRegistry . getNativeType ( workDir ) , OBJECT_TYPE )
Code	! type . isSubtypeOf ( typeRegistry . getNativeType ( workDir ) , OBJECT_TYPE )
Distance : 7

16
Tree	! isSubtypeOf ( typeRegistry . getNativeType ( workDir ) )
Code	! isSubtypeOf ( typeRegistry . getNativeType ( workDir ) )
Distance : 7

17
Tree	! type . isSubtypeOf ( typeRegistry . getNativeType ( NUMBER_CONSTANT , scopeCreator ) )
Code	! type . isSubtypeOf ( typeRegistry . getNativeType ( NUMBER_CONSTANT , scopeCreator ) )
Distance : 7

18
Tree	( NUMBER_CONSTANT * type . isSubtypeOf ( ES8 ) )
Code	( NUMBER_CONSTANT * type . isSubtypeOf ( ES8 ) )
Distance : 11

19
Tree	! isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 6

20
Tree	! type . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) , OBJECT_TYPE )
Code	! type . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) , OBJECT_TYPE )
Distance : 6

21
Tree	! type . isSubtypeOf ( typeRegistry )
Code	! type . isSubtypeOf ( typeRegistry )
Distance : 9

22
Tree	! type . isSubtypeOf ( typeRegistry ) . contains ()
Code	! type . isSubtypeOf ( typeRegistry ) . contains ()
Distance : 10

23
Tree	! type . isSubtypeOf ( typeRegistry ) . isSubtypeOf ()
Code	! type . isSubtypeOf ( typeRegistry ) . isSubtypeOf ()
Distance : 10

24
Tree	! type . isSubtypeOf ( typeRegistry ) . contains ( TokenType.OPEN_ANGLE )
Code	! type . isSubtypeOf ( typeRegistry ) . contains ( TokenType.OPEN_ANGLE )
Distance : 8

25
Tree	! type . isSubtypeOf ( typeRegistry ) . isSubtypeOf ( TokenType.OPEN_ANGLE )
Code	! type . isSubtypeOf ( typeRegistry ) . isSubtypeOf ( TokenType.OPEN_ANGLE )
Distance : 8

26
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == rhs.b )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == rhs.b )
Distance : 10

27
Tree	! isSubtypeOf ( typeRegistry . isSubtypeOf ( OBJECT_TYPE ) )
Code	! isSubtypeOf ( typeRegistry . isSubtypeOf ( OBJECT_TYPE ) )
Distance : 7

28
Tree	! type . isSubtypeOf ( typeRegistry ) . injectNamespace ()
Code	! type . isSubtypeOf ( typeRegistry ) . injectNamespace ()
Distance : 10

29
Tree	node . isSubtypeOf ( typeRegistry ) && type . isSubtypeOf ( OBJECT_TYPE )
Code	node . isSubtypeOf ( typeRegistry ) && type . isSubtypeOf ( OBJECT_TYPE )
Distance : 10

30
Tree	rightType . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Code	rightType . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Distance : 8

31
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE . isSubtypeOf ( OBJECT_TYPE ) ) == IncrementalCheckMode.GENERATE_IJS )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE . isSubtypeOf ( OBJECT_TYPE ) ) == IncrementalCheckMode.GENERATE_IJS )
Distance : 11

32
Tree	parent . isSubtypeOf ( typeRegistry ) && type . isSubtypeOf ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	parent . isSubtypeOf ( typeRegistry ) && type . isSubtypeOf ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 10

33
Tree	! type . isSubtypeOf ( JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN_SYMBOL . getNativeType ( OBJECT_TYPE ) )
Code	! type . isSubtypeOf ( JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN_SYMBOL . getNativeType ( OBJECT_TYPE ) )
Distance : 5

34
Tree	! type . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) , sourceName )
Code	! type . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) , sourceName )
Distance : 6

35
Tree	! type . isSubtypeOf ( typeRegistry ) . has ()
Code	! type . isSubtypeOf ( typeRegistry ) . has ()
Distance : 10

36
Tree	! type . isSubtypeOf ( getNativeType ( workDir ) )
Code	! type . isSubtypeOf ( getNativeType ( workDir ) )
Distance : 7

37
Tree	rightType . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	rightType . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 6

38
Tree	! isSubtypeOf ( typeRegistry . contains ( OBJECT_TYPE ) )
Code	! isSubtypeOf ( typeRegistry . contains ( OBJECT_TYPE ) )
Distance : 7

39
Tree	! isSubtypeOf ( typeRegistry . getNativeType ( ITERATOR_TYPE ) )
Code	! isSubtypeOf ( typeRegistry . getNativeType ( ITERATOR_TYPE ) )
Distance : 7

40
Tree	! type . isSubtypeOf ( PropertyCollapseLevel.ALL . getNativeType ( OBJECT_TYPE ) )
Code	! type . isSubtypeOf ( PropertyCollapseLevel.ALL . getNativeType ( OBJECT_TYPE ) )
Distance : 5

41
Tree	! type . isSubtypeOf ( typeRegistry ) . isUnknownType ()
Code	! type . isSubtypeOf ( typeRegistry ) . isUnknownType ()
Distance : 10

42
Tree	n . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Code	n . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Distance : 8

43
Tree	( NUMBER_CONSTANT * type . isSubtypeOf ( OBJECT_TYPE . isSubtypeOf ( OBJECT_TYPE ) ) )
Code	( NUMBER_CONSTANT * type . isSubtypeOf ( OBJECT_TYPE . isSubtypeOf ( OBJECT_TYPE ) ) )
Distance : 9

44
Tree	! type . isSubtypeOf ( typeRegistry ) . isSubtypeOf ( JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE )
Code	! type . isSubtypeOf ( typeRegistry ) . isSubtypeOf ( JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE )
Distance : 8

45
Tree	! type . isSubtypeOf ( getNativeType ( OBJECT_TYPE ) )
Code	! type . isSubtypeOf ( getNativeType ( OBJECT_TYPE ) )
Distance : 6

46
Tree	! type . isSubtypeOf ( typeRegistry ) . getNativeType ()
Code	! type . isSubtypeOf ( typeRegistry ) . getNativeType ()
Distance : 9

47
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == IncrementalCheckMode.GENERATE_IJS )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == IncrementalCheckMode.GENERATE_IJS )
Distance : 10

48
Tree	! type . isSubtypeOf ( typeRegistry . isSubtypeOf ( OBJECT_TYPE ) , OBJECT_TYPE )
Code	! type . isSubtypeOf ( typeRegistry . isSubtypeOf ( OBJECT_TYPE ) , OBJECT_TYPE )
Distance : 7

49
Tree	( NUMBER_CONSTANT * type . isSubtypeOf ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Code	( NUMBER_CONSTANT * type . isSubtypeOf ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Distance : 8

50
Tree	rightType = ( JSType ) t . isSubtypeOf ( typeRegistry )
Code	rightType = ( JSType ) t . isSubtypeOf ( typeRegistry )
Distance : 12

51
Tree	! type . isSubtypeOf ( typeRegistry ) . that ()
Code	! type . isSubtypeOf ( typeRegistry ) . that ()
Distance : 10

52
Tree	! type . isSubtypeOf ( typeRegistry . getNativeType ( NUMBER_CONSTANT , OBJECT_TYPE ) )
Code	! type . isSubtypeOf ( typeRegistry . getNativeType ( NUMBER_CONSTANT , OBJECT_TYPE ) )
Distance : 6

53
Tree	JSType . isSubtypeOf ( typeRegistry ) && type . isSubtypeOf ( OBJECT_TYPE )
Code	JSType . isSubtypeOf ( typeRegistry ) && type . isSubtypeOf ( OBJECT_TYPE )
Distance : 10

54
Tree	! type . isSubtypeOf ( getNativeType ( ITERATOR_TYPE ) )
Code	! type . isSubtypeOf ( getNativeType ( ITERATOR_TYPE ) )
Distance : 7

55
Tree	rightType = ( JSType ) expr . isSubtypeOf ( typeRegistry )
Code	rightType = ( JSType ) expr . isSubtypeOf ( typeRegistry )
Distance : 12

56
Tree	! type . isSubtypeOf ( typeRegistry ) . isSubtypeOf ( JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN )
Code	! type . isSubtypeOf ( typeRegistry ) . isSubtypeOf ( JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN )
Distance : 8

57
Tree	! type . isSubtypeOf ()
Code	! type . isSubtypeOf ()
Distance : 11

58
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == Double.MIN_VALUE )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == Double.MIN_VALUE )
Distance : 10

59
Tree	! type . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) , behavior )
Code	! type . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) , behavior )
Distance : 6

60
Tree	n . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	n . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 6

61
Tree	! type . isSubtypeOf ( null )
Code	! type . isSubtypeOf ( null )
Distance : 10

62
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE ) == ExpansionMode.MULTIPLICATIVE )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE ) == ExpansionMode.MULTIPLICATIVE )
Distance : 9

63
Tree	! type . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	! type . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 4

64
Tree	! type . isSubtypeOf ( ITERABLE_TYPE )
Code	! type . isSubtypeOf ( ITERABLE_TYPE )
Distance : 10

65
Tree	! isSubtypeOf ( typeRegistry . getNativeType ( exprType ) )
Code	! isSubtypeOf ( typeRegistry . getNativeType ( exprType ) )
Distance : 7

66
Tree	node . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	node . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 6

67
Tree	! type . isSubtypeOf ( typeRegistry . isSubtypeOf ( OBJECT_TYPE ) )
Code	! type . isSubtypeOf ( typeRegistry . isSubtypeOf ( OBJECT_TYPE ) )
Distance : 5

68
Tree	! type . isSubtypeOf ( typeRegistry . getNativeType ( NUMBER_CONSTANT , ES8 ) )
Code	! type . isSubtypeOf ( typeRegistry . getNativeType ( NUMBER_CONSTANT , ES8 ) )
Distance : 7

69
Tree	rightType . isSubtypeOf ( typeRegistry ) && type . isSubtypeOf ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	rightType . isSubtypeOf ( typeRegistry ) && type . isSubtypeOf ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 10

70
Tree	( NUMBER_CONSTANT * type . isSubtypeOf ( typeRegistry ) )
Code	( NUMBER_CONSTANT * type . isSubtypeOf ( typeRegistry ) )
Distance : 10

71
Tree	n . isSubtypeOf ( typeRegistry ) && type . isSubtypeOf ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	n . isSubtypeOf ( typeRegistry ) && type . isSubtypeOf ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 10

72
Tree	! type . isSubtypeOf ( typeRegistry . getNativeType ( NUMBER_CONSTANT , rawType ) )
Code	! type . isSubtypeOf ( typeRegistry . getNativeType ( NUMBER_CONSTANT , rawType ) )
Distance : 7

73
Tree	JSType . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Code	JSType . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Distance : 8

74
Tree	! type . isSubtypeOf ( typeRegistry . getNativeType ( ES8 ) )
Code	! type . isSubtypeOf ( typeRegistry . getNativeType ( ES8 ) )
Distance : 5

75
Tree	( NUMBER_CONSTANT * type . isSubtypeOf ( receiverType . getNativeType ( OBJECT_TYPE ) ) )
Code	( NUMBER_CONSTANT * type . isSubtypeOf ( receiverType . getNativeType ( OBJECT_TYPE ) ) )
Distance : 8

76
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE . isSubtypeOf ( OBJECT_TYPE ) ) - NUMBER_CONSTANT )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE . isSubtypeOf ( OBJECT_TYPE ) ) - NUMBER_CONSTANT )
Distance : 11

77
Tree	parent . isSubtypeOf ( typeRegistry ) && type . isSubtypeOf ( OBJECT_TYPE )
Code	parent . isSubtypeOf ( typeRegistry ) && type . isSubtypeOf ( OBJECT_TYPE )
Distance : 10

78
Tree	! type . isSubtypeOf ( typeRegistry . getNativeType ( workDir ) )
Code	! type . isSubtypeOf ( typeRegistry . getNativeType ( workDir ) )
Distance : 5

79
Tree	! type . isSubtypeOf ( getNativeType ( ITERABLE_TYPE ) )
Code	! type . isSubtypeOf ( getNativeType ( ITERABLE_TYPE ) )
Distance : 7

80
Tree	! isSubtypeOf ( typeRegistry . isUnknownType ( OBJECT_TYPE ) )
Code	! isSubtypeOf ( typeRegistry . isUnknownType ( OBJECT_TYPE ) )
Distance : 7

81
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( ES8 ) ) - NUMBER_CONSTANT )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( ES8 ) ) - NUMBER_CONSTANT )
Distance : 11

82
Tree	! type . isSubtypeOf ( getNativeType ( STRING_TYPE ) )
Code	! type . isSubtypeOf ( getNativeType ( STRING_TYPE ) )
Distance : 7

83
Tree	! type . isSubtypeOf ( typeRegistry . isUnknownType ( OBJECT_TYPE ) )
Code	! type . isSubtypeOf ( typeRegistry . isUnknownType ( OBJECT_TYPE ) )
Distance : 5

84
Tree	! type . isSubtypeOf ( typeRegistry . getNativeType ( NUMBER_CONSTANT , escaped ) )
Code	! type . isSubtypeOf ( typeRegistry . getNativeType ( NUMBER_CONSTANT , escaped ) )
Distance : 7

85
Tree	! type . isSubtypeOf ( typeRegistry . getNativeType ( NUMBER_CONSTANT , behavior ) )
Code	! type . isSubtypeOf ( typeRegistry . getNativeType ( NUMBER_CONSTANT , behavior ) )
Distance : 7

86
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE ) == IncrementalCheckMode.GENERATE_IJS )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE ) == IncrementalCheckMode.GENERATE_IJS )
Distance : 9

87
Tree	! type . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) , scopeCreator )
Code	! type . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) , scopeCreator )
Distance : 6

88
Tree	n . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) && ^
Code	n . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) && ^
Distance : 8

89
Tree	! type . isSubtypeOf ( typeRegistry . getNativeType ( ITERATOR_TYPE ) )
Code	! type . isSubtypeOf ( typeRegistry . getNativeType ( ITERATOR_TYPE ) )
Distance : 5

90
Tree	node . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Code	node . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Distance : 8

91
Tree	! type . isSubtypeOf ( receiverType )
Code	! type . isSubtypeOf ( receiverType )
Distance : 10

92
Tree	n = ( JSType ) t . isSubtypeOf ( typeRegistry )
Code	n = ( JSType ) t . isSubtypeOf ( typeRegistry )
Distance : 12

93
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE . isSubtypeOf ( OBJECT_TYPE ) ) == rhs.b )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE . isSubtypeOf ( OBJECT_TYPE ) ) == rhs.b )
Distance : 11

94
Tree	rightType . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) && /=
Code	rightType . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) && /=
Distance : 8

95
Tree	! type . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) , ES8 )
Code	! type . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) , ES8 )
Distance : 6

96
Tree	node . isSubtypeOf ( typeRegistry ) && type . isSubtypeOf ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	node . isSubtypeOf ( typeRegistry ) && type . isSubtypeOf ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 10

97
Tree	( typeRegistry . isUnknownType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) - NUMBER_CONSTANT )
Code	( typeRegistry . isUnknownType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) - NUMBER_CONSTANT )
Distance : 10

98
Tree	( typeRegistry . isSubtypeOf ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) - NUMBER_CONSTANT )
Code	( typeRegistry . isSubtypeOf ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) - NUMBER_CONSTANT )
Distance : 10

99
Tree	! type . isSubtypeOf ( typeRegistry ) . getTypeI ()
Code	! type . isSubtypeOf ( typeRegistry ) . getTypeI ()
Distance : 10

100
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE . contains ( OBJECT_TYPE ) ) - NUMBER_CONSTANT )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE . contains ( OBJECT_TYPE ) ) - NUMBER_CONSTANT )
Distance : 11

101
Tree	JSType = ( JSType ) expr . isSubtypeOf ( typeRegistry )
Code	JSType = ( JSType ) expr . isSubtypeOf ( typeRegistry )
Distance : 12

102
Tree	! type . isSubtypeOf ( options )
Code	! type . isSubtypeOf ( options )
Distance : 10

103
Tree	! type . isSubtypeOf ( getNativeType ( NULL_VOID ) )
Code	! type . isSubtypeOf ( getNativeType ( NULL_VOID ) )
Distance : 7

104
Tree	node . isSubtypeOf ( typeRegistry ) && type . isSubtypeOf ( OBJECT_TYPE . isSubtypeOf ( OBJECT_TYPE ) )
Code	node . isSubtypeOf ( typeRegistry ) && type . isSubtypeOf ( OBJECT_TYPE . isSubtypeOf ( OBJECT_TYPE ) )
Distance : 11

105
Tree	( NUMBER_CONSTANT * type . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) )
Code	( NUMBER_CONSTANT * type . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) )
Distance : 7

106
Tree	! type . isSubtypeOf ( getNativeType ( exprType ) )
Code	! type . isSubtypeOf ( getNativeType ( exprType ) )
Distance : 7

107
Tree	( typeRegistry * type . isSubtypeOf ( OBJECT_TYPE . getNativeType ( ES8 ) ) )
Code	( typeRegistry * type . isSubtypeOf ( OBJECT_TYPE . getNativeType ( ES8 ) ) )
Distance : 9

108
Tree	node . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) && /=
Code	node . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) && /=
Distance : 8

109
Tree	JSType . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) && ^
Code	JSType . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) && ^
Distance : 8

110
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE ) == TypeInferenceMode.CHECKED )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE ) == TypeInferenceMode.CHECKED )
Distance : 9

111
Tree	TransformUtils . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	TransformUtils . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 6

112
Tree	( NUMBER_CONSTANT * type . isSubtypeOf ( exprType . getNativeType ( OBJECT_TYPE ) ) )
Code	( NUMBER_CONSTANT * type . isSubtypeOf ( exprType . getNativeType ( OBJECT_TYPE ) ) )
Distance : 8

113
Tree	leftType . isSubtypeOf ( typeRegistry ) && type . isSubtypeOf ( OBJECT_TYPE )
Code	leftType . isSubtypeOf ( typeRegistry ) && type . isSubtypeOf ( OBJECT_TYPE )
Distance : 10

114
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE ) == Double.NaN )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE ) == Double.NaN )
Distance : 9

115
Tree	JSType . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	JSType . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 6

116
Tree	node = ( JSType ) expr . isSubtypeOf ( typeRegistry )
Code	node = ( JSType ) expr . isSubtypeOf ( typeRegistry )
Distance : 12

117
Tree	n . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) && /=
Code	n . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) && /=
Distance : 8

118
Tree	! type . isSubtypeOf ( typeRegistry . getNativeType ( exprType ) )
Code	! type . isSubtypeOf ( typeRegistry . getNativeType ( exprType ) )
Distance : 5

119
Tree	rightType . isSubtypeOf ( typeRegistry ) && type . isSubtypeOf ( OBJECT_TYPE )
Code	rightType . isSubtypeOf ( typeRegistry ) && type . isSubtypeOf ( OBJECT_TYPE )
Distance : 10

120
Tree	JSType . isSubtypeOf ( typeRegistry ) && type . isSubtypeOf ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Code	JSType . isSubtypeOf ( typeRegistry ) && type . isSubtypeOf ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) )
Distance : 10

121
Tree	JSType = ( JSType ) t . isSubtypeOf ( typeRegistry )
Code	JSType = ( JSType ) t . isSubtypeOf ( typeRegistry )
Distance : 12

122
Tree	! type . isSubtypeOf ( getNativeType ( ES8 ) )
Code	! type . isSubtypeOf ( getNativeType ( ES8 ) )
Distance : 7

123
Tree	rightType . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < ES8
Code	rightType . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < ES8
Distance : 8

124
Tree	parent . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Code	parent . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Distance : 8

125
Tree	expr . isSubtypeOf ( typeRegistry ) && type . isSubtypeOf ( OBJECT_TYPE )
Code	expr . isSubtypeOf ( typeRegistry ) && type . isSubtypeOf ( OBJECT_TYPE )
Distance : 10

126
Tree	( typeRegistry . getNativeType ( ES8 . getNativeType ( OBJECT_TYPE ) ) - NUMBER_CONSTANT )
Code	( typeRegistry . getNativeType ( ES8 . getNativeType ( OBJECT_TYPE ) ) - NUMBER_CONSTANT )
Distance : 10

127
Tree	( NUMBER_CONSTANT * type . isSubtypeOf ( ITERABLE_TYPE ) )
Code	( NUMBER_CONSTANT * type . isSubtypeOf ( ITERABLE_TYPE ) )
Distance : 11

128
Tree	rightType = ( JSType ) scope . isSubtypeOf ( typeRegistry )
Code	rightType = ( JSType ) scope . isSubtypeOf ( typeRegistry )
Distance : 12

129
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == ExpansionMode.MULTIPLICATIVE )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == ExpansionMode.MULTIPLICATIVE )
Distance : 10

130
Tree	rightType . isSubtypeOf ( typeRegistry ) && type . isSubtypeOf ( OBJECT_TYPE . isSubtypeOf ( OBJECT_TYPE ) )
Code	rightType . isSubtypeOf ( typeRegistry ) && type . isSubtypeOf ( OBJECT_TYPE . isSubtypeOf ( OBJECT_TYPE ) )
Distance : 11

131
Tree	( NUMBER_CONSTANT * type . isSubtypeOf ( cyclicCause ) )
Code	( NUMBER_CONSTANT * type . isSubtypeOf ( cyclicCause ) )
Distance : 11

132
Tree	( NUMBER_CONSTANT * type . isSubtypeOf ( aliasVarNodeRhs ) )
Code	( NUMBER_CONSTANT * type . isSubtypeOf ( aliasVarNodeRhs ) )
Distance : 11

133
Tree	parent . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	parent . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 6

134
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( workDir ) ) - NUMBER_CONSTANT )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( workDir ) ) - NUMBER_CONSTANT )
Distance : 11

135
Tree	( typeRegistry * type . isSubtypeOf ( OBJECT_TYPE . getNativeType ( workDir ) ) )
Code	( typeRegistry * type . isSubtypeOf ( OBJECT_TYPE . getNativeType ( workDir ) ) )
Distance : 9

136
Tree	! type . isSubtypeOf ( CompilerOptions.LanguageMode.ECMASCRIPT_2017 . getNativeType ( OBJECT_TYPE ) )
Code	! type . isSubtypeOf ( CompilerOptions.LanguageMode.ECMASCRIPT_2017 . getNativeType ( OBJECT_TYPE ) )
Distance : 5

137
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE ) == NodeUtil.MATCH_NOT_FUNCTION )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE ) == NodeUtil.MATCH_NOT_FUNCTION )
Distance : 9

138
Tree	expr . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Code	expr . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < OBJECT_TYPE
Distance : 8

139
Tree	rightType . isSubtypeOf ( typeRegistry ) && type . isSubtypeOf ( ES8 )
Code	rightType . isSubtypeOf ( typeRegistry ) && type . isSubtypeOf ( ES8 )
Distance : 11

140
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == var.scope )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == var.scope )
Distance : 10

141
Tree	n . isSubtypeOf ( typeRegistry ) && type . isSubtypeOf ( OBJECT_TYPE )
Code	n . isSubtypeOf ( typeRegistry ) && type . isSubtypeOf ( OBJECT_TYPE )
Distance : 10

142
Tree	JSType . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) && /=
Code	JSType . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) && /=
Distance : 8

143
Tree	! n . isSubtypeOf ( typeRegistry )
Code	! n . isSubtypeOf ( typeRegistry )
Distance : 10

144
Tree	expr . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	expr . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 6

145
Tree	JSType
Code	JSType
Distance : 15

146
Tree	( typeRegistry * type . isSubtypeOf ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Code	( typeRegistry * type . isSubtypeOf ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) )
Distance : 8

147
Tree	n . isSubtypeOf ( typeRegistry ) && type . isSubtypeOf ( OBJECT_TYPE . isSubtypeOf ( OBJECT_TYPE ) )
Code	n . isSubtypeOf ( typeRegistry ) && type . isSubtypeOf ( OBJECT_TYPE . isSubtypeOf ( OBJECT_TYPE ) )
Distance : 11

148
Tree	return
Code	return
Distance : 15

149
Tree	<
Code	<
Distance : 15

150
Tree	node . isSubtypeOf ( typeRegistry ) < PAIR && jsdoc . isSubtypeOf ( OBJECT_TYPE )
Code	node . isSubtypeOf ( typeRegistry ) < PAIR && jsdoc . isSubtypeOf ( OBJECT_TYPE )
Distance : 12

151
Tree	! type . isSubtypeOf ( nameNode )
Code	! type . isSubtypeOf ( nameNode )
Distance : 10

152
Tree	! type . isSubtypeOf ( typeRegistry . getNativeType ( NULL_VOID ) )
Code	! type . isSubtypeOf ( typeRegistry . getNativeType ( NULL_VOID ) )
Distance : 5

153
Tree	! type . isSubtypeOf ( Feature.MODULES . getNativeType ( OBJECT_TYPE ) )
Code	! type . isSubtypeOf ( Feature.MODULES . getNativeType ( OBJECT_TYPE ) )
Distance : 5

154
Tree	n . isSubtypeOf ( typeRegistry ) < PAIR && options . isSubtypeOf ( OBJECT_TYPE )
Code	n . isSubtypeOf ( typeRegistry ) < PAIR && options . isSubtypeOf ( OBJECT_TYPE )
Distance : 12

155
Tree	( typeRegistry * type . isSubtypeOf ( OBJECT_TYPE . isSubtypeOf ( OBJECT_TYPE ) ) )
Code	( typeRegistry * type . isSubtypeOf ( OBJECT_TYPE . isSubtypeOf ( OBJECT_TYPE ) ) )
Distance : 9

156
Tree	! n . isSubtypeOf ( null )
Code	! n . isSubtypeOf ( null )
Distance : 11

157
Tree	! type . isSubtypeOf ( JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN . getNativeType ( OBJECT_TYPE ) )
Code	! type . isSubtypeOf ( JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN . getNativeType ( OBJECT_TYPE ) )
Distance : 5

158
Tree	rightType . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) && ^
Code	rightType . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) && ^
Distance : 8

159
Tree	( NUMBER_CONSTANT * type . isSubtypeOf ( exprType ) )
Code	( NUMBER_CONSTANT * type . isSubtypeOf ( exprType ) )
Distance : 11

160
Tree	JSType . isSubtypeOf ( typeRegistry ) < PAIR && jsdoc . isSubtypeOf ( OBJECT_TYPE )
Code	JSType . isSubtypeOf ( typeRegistry ) < PAIR && jsdoc . isSubtypeOf ( OBJECT_TYPE )
Distance : 12

161
Tree	! type . isSubtypeOf ( CompilerOptions.LanguageMode.ECMASCRIPT_NEXT . getNativeType ( OBJECT_TYPE ) )
Code	! type . isSubtypeOf ( CompilerOptions.LanguageMode.ECMASCRIPT_NEXT . getNativeType ( OBJECT_TYPE ) )
Distance : 5

162
Tree	node
Code	node
Distance : 15

163
Tree	! functionType . isSubtypeOf ()
Code	! functionType . isSubtypeOf ()
Distance : 12

164
Tree	! type . isSubtypeOf ( typeRegistry . getNativeType ( ES8 ) , OBJECT_TYPE )
Code	! type . isSubtypeOf ( typeRegistry . getNativeType ( ES8 ) , OBJECT_TYPE )
Distance : 7

165
Tree	rightType . isSubtypeOf ( typeRegistry ) < PAIR && jsdoc . isSubtypeOf ( OBJECT_TYPE )
Code	rightType . isSubtypeOf ( typeRegistry ) < PAIR && jsdoc . isSubtypeOf ( OBJECT_TYPE )
Distance : 12

166
Tree	( typeRegistry * type . isSubtypeOf ( ES8 . getNativeType ( OBJECT_TYPE ) ) )
Code	( typeRegistry * type . isSubtypeOf ( ES8 . getNativeType ( OBJECT_TYPE ) ) )
Distance : 8

167
Tree	( typeRegistry * type . isSubtypeOf ( OBJECT_TYPE . isUnknownType ( OBJECT_TYPE ) ) )
Code	( typeRegistry * type . isSubtypeOf ( OBJECT_TYPE . isUnknownType ( OBJECT_TYPE ) ) )
Distance : 9

168
Tree	( typeRegistry * type . isSubtypeOf ( OBJECT_TYPE . isSubtypeOf ( ES8 ) ) )
Code	( typeRegistry * type . isSubtypeOf ( OBJECT_TYPE . isSubtypeOf ( ES8 ) ) )
Distance : 10

169
Tree	! type . isSubtypeOf ( JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN_SYMBOL . isSubtypeOf ( OBJECT_TYPE ) )
Code	! type . isSubtypeOf ( JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN_SYMBOL . isSubtypeOf ( OBJECT_TYPE ) )
Distance : 6

170
Tree	! type . isSubtypeOf ( PropertyCollapseLevel.ALL . isSubtypeOf ( OBJECT_TYPE ) )
Code	! type . isSubtypeOf ( PropertyCollapseLevel.ALL . isSubtypeOf ( OBJECT_TYPE ) )
Distance : 6

171
Tree	( typeRegistry * type . isSubtypeOf ( OBJECT_TYPE . contains ( OBJECT_TYPE ) ) )
Code	( typeRegistry * type . isSubtypeOf ( OBJECT_TYPE . contains ( OBJECT_TYPE ) ) )
Distance : 9

172
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) - NUMBER_CONSTANT )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) - NUMBER_CONSTANT )
Distance : 10

173
Tree	! newNode . isSubtypeOf ()
Code	! newNode . isSubtypeOf ()
Distance : 12

174
Tree	(
Code	(
Distance : 14

175
Tree	n . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < ES8
Code	n . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) < ES8
Distance : 8

176
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == Double.NaN )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE . getNativeType ( OBJECT_TYPE ) ) == Double.NaN )
Distance : 10

177
Tree	( typeRegistry . getNativeType ( OBJECT_TYPE ) == rhs.b )
Code	( typeRegistry . getNativeType ( OBJECT_TYPE ) == rhs.b )
Distance : 9

178
Tree	node . isSubtypeOf ( typeRegistry ) < PAIR && options . isSubtypeOf ( OBJECT_TYPE )
Code	node . isSubtypeOf ( typeRegistry ) < PAIR && options . isSubtypeOf ( OBJECT_TYPE )
Distance : 12

179
Tree	leftType . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Code	leftType . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) )
Distance : 6

180
Tree	n . isSubtypeOf ( typeRegistry ) < PAIR && jsdoc . isSubtypeOf ( OBJECT_TYPE )
Code	n . isSubtypeOf ( typeRegistry ) < PAIR && jsdoc . isSubtypeOf ( OBJECT_TYPE )
Distance : 12

181
Tree	rightType . isSubtypeOf ( typeRegistry ) < PAIR && isConstant . isSubtypeOf ( OBJECT_TYPE )
Code	rightType . isSubtypeOf ( typeRegistry ) < PAIR && isConstant . isSubtypeOf ( OBJECT_TYPE )
Distance : 12

182
Tree	! type . isSubtypeOf ( typeRegistry . isUnknownType ( NUMBER_CONSTANT , OBJECT_TYPE ) )
Code	! type . isSubtypeOf ( typeRegistry . isUnknownType ( NUMBER_CONSTANT , OBJECT_TYPE ) )
Distance : 7

183
Tree	throw
Code	throw
Distance : 15

184
Tree	! rightType . isSubtypeOf ()
Code	! rightType . isSubtypeOf ()
Distance : 12

185
Tree	! type . isSubtypeOf ( MockMaker )
Code	! type . isSubtypeOf ( MockMaker )
Distance : 10

186
Tree	! type . isSubtypeOf ( mockitoMock )
Code	! type . isSubtypeOf ( mockitoMock )
Distance : 10

187
Tree	! n . isSubtypeOf ()
Code	! n . isSubtypeOf ()
Distance : 12

188
Tree	double
Code	double
Distance : 15

189
Tree	node . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) && ^
Code	node . isSubtypeOf ( typeRegistry . getNativeType ( OBJECT_TYPE ) ) && ^
Distance : 8

190
Tree	rightType . isSubtypeOf ( typeRegistry ) < PAIR && options . isSubtypeOf ( OBJECT_TYPE )
Code	rightType . isSubtypeOf ( typeRegistry ) < PAIR && options . isSubtypeOf ( OBJECT_TYPE )
Distance : 12

191
Tree	! lValue . isSubtypeOf ()
Code	! lValue . isSubtypeOf ()
Distance : 12

192
Tree	! functionType . isSubtypeOf ( null )
Code	! functionType . isSubtypeOf ( null )
Distance : 11

193
Tree	! newNode . isSubtypeOf ( null )
Code	! newNode . isSubtypeOf ( null )
Distance : 11

194
Tree	! ctorType . isSubtypeOf ()
Code	! ctorType . isSubtypeOf ()
Distance : 12

195
Tree	! rightType . isSubtypeOf ( null )
Code	! rightType . isSubtypeOf ( null )
Distance : 11

196
Tree	! lValue . isSubtypeOf ( null )
Code	! lValue . isSubtypeOf ( null )
Distance : 11

197
Tree	! argType . isSubtypeOf ()
Code	! argType . isSubtypeOf ()
Distance : 12

198
Tree	! ctorType . isSubtypeOf ( null )
Code	! ctorType . isSubtypeOf ( null )
Distance : 11

199
Tree	! argType . isSubtypeOf ( null )
Code	! argType . isSubtypeOf ( null )
Distance : 11

========================================================================


========================================================================
Example Number: 17
Parent Code is: 
return true ;
-------------------------------------------------------------------------------
Child code is: 
return false ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (9{val=true}) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (9{val=false}) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/86/parent/src_com_google_javascript_jscomp_NodeUtil.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , scopeCreator , scopeCreator ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , scopeCreator , scopeCreator ) ;
Distance : 12

1
Tree	return warningsGuard % NUMBER_CONSTANT ;
Code	return warningsGuard % NUMBER_CONSTANT ;
Distance : 3

2
Tree	return randomData % NUMBER_CONSTANT ;
Code	return randomData % NUMBER_CONSTANT ;
Distance : 3

3
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , tolerance , tolerance ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , tolerance , tolerance ) ;
Distance : 12

4
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , scopeCreator , tolerance ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , scopeCreator , tolerance ) ;
Distance : 12

5
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , tolerance , scopeCreator ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , tolerance , scopeCreator ) ;
Distance : 12

6
Tree	return parent + this . commonTypes . clone ( CHAR_CONS , CHAR_CONS ) ;
Code	return parent + this . commonTypes . clone ( CHAR_CONS , CHAR_CONS ) ;
Distance : 12

7
Tree	return parent + abs () ;
Code	return parent + abs () ;
Distance : 4

8
Tree	return tolerance + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return tolerance + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

9
Tree	return FastFourierTransformer + getDataset () ;
Code	return FastFourierTransformer + getDataset () ;
Distance : 4

10
Tree	return TransformUtils + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return TransformUtils + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

11
Tree	return val < < NUMBER_CONSTANT ;
Code	return val < < NUMBER_CONSTANT ;
Distance : 4

12
Tree	return getReferenceName () ? null : tolerance ;
Code	return getReferenceName () ? null : tolerance ;
Distance : 6

13
Tree	return FastFourierTransformer + obj2 . abs ( parent ) ;
Code	return FastFourierTransformer + obj2 . abs ( parent ) ;
Distance : 8

14
Tree	return getDataset () ? null : parent ;
Code	return getDataset () ? null : parent ;
Distance : 6

15
Tree	return parent . abs () . success == NUMBER_CONSTANT ;
Code	return parent . abs () . success == NUMBER_CONSTANT ;
Distance : 8

16
Tree	return parent != f.length ;
Code	return parent != f.length ;
Distance : 3

17
Tree	return NodeUtil < < NUMBER_CONSTANT ;
Code	return NodeUtil < < NUMBER_CONSTANT ;
Distance : 4

18
Tree	return FastFourierTransformer . clone ( parent ) ? null : tolerance ;
Code	return FastFourierTransformer . clone ( parent ) ? null : tolerance ;
Distance : 10

19
Tree	return ! parent ;
Code	return ! parent ;
Distance : 2

20
Tree	return FastFourierTransformer . abs ( parent ) ? null : tol ;
Code	return FastFourierTransformer . abs ( parent ) ? null : tol ;
Distance : 10

21
Tree	return this == height ;
Code	return this == height ;
Distance : 3

22
Tree	return FastFourierTransformer . abs () ? null : S ;
Code	return FastFourierTransformer . abs () ? null : S ;
Distance : 8

23
Tree	return FastFourierTransformer + abs () ;
Code	return FastFourierTransformer + abs () ;
Distance : 4

24
Tree	return parent . abs ( parent ) ;
Code	return parent . abs ( parent ) ;
Distance : 6

25
Tree	return NodeUtil.MATCH_NOT_FUNCTION ;
Code	return NodeUtil.MATCH_NOT_FUNCTION ;
Distance : 1

26
Tree	return this == callNode ;
Code	return this == callNode ;
Distance : 3

27
Tree	return val ;
Code	return val ;
Distance : 1

28
Tree	return this == warningsGuard ;
Code	return this == warningsGuard ;
Distance : 3

29
Tree	return this == randomData ;
Code	return this == randomData ;
Distance : 3

30
Tree	return FastFourierTransformer . abs () ? null : blind ;
Code	return FastFourierTransformer . abs () ? null : blind ;
Distance : 8

31
Tree	return warningsGuard ;
Code	return warningsGuard ;
Distance : 1

32
Tree	return FastFourierTransformer ? f.length : FunctionFlavor.NORMAL ;
Code	return FastFourierTransformer ? f.length : FunctionFlavor.NORMAL ;
Distance : 5

33
Tree	return true ;
Code	return true ;
Distance : 1

34
Tree	return randomData ;
Code	return randomData ;
Distance : 1

35
Tree	return NodeUtil ? f.length : FunctionFlavor.NORMAL ;
Code	return NodeUtil ? f.length : FunctionFlavor.NORMAL ;
Distance : 5

36
Tree	return FastFourierTransformer ;
Code	return FastFourierTransformer ;
Distance : 1

37
Tree	return tolerance ? f.length : FunctionFlavor.NORMAL ;
Code	return tolerance ? f.length : FunctionFlavor.NORMAL ;
Distance : 5

38
Tree	return TransformUtils ? f.length : FunctionFlavor.NORMAL ;
Code	return TransformUtils ? f.length : FunctionFlavor.NORMAL ;
Distance : 5

39
Tree	return val ? f.length : FunctionFlavor.NORMAL ;
Code	return val ? f.length : FunctionFlavor.NORMAL ;
Distance : 5

40
Tree	return getReferenceName () ? null : blind ;
Code	return getReferenceName () ? null : blind ;
Distance : 6

41
Tree	return Double.MIN_VALUE ;
Code	return Double.MIN_VALUE ;
Distance : 1

42
Tree	return parent . abs () ? null : parent ;
Code	return parent . abs () ? null : parent ;
Distance : 8

43
Tree	return parent ;
Code	return parent ;
Distance : 1

44
Tree	return error.description ;
Code	return error.description ;
Distance : 1

45
Tree	return ExpansionMode.MULTIPLICATIVE ;
Code	return ExpansionMode.MULTIPLICATIVE ;
Distance : 1

46
Tree	return FastFourierTransformer . abs () ? null : obj1 ;
Code	return FastFourierTransformer . abs () ? null : obj1 ;
Distance : 8

47
Tree	return warningsGuard < < NUMBER_CONSTANT ;
Code	return warningsGuard < < NUMBER_CONSTANT ;
Distance : 4

48
Tree	return STRING_CONSTANT + callNode + STRING_CONSTANT + tolerance ;
Code	return STRING_CONSTANT + callNode + STRING_CONSTANT + tolerance ;
Distance : 7

49
Tree	return parent . clone ( parent ) ;
Code	return parent . clone ( parent ) ;
Distance : 6

50
Tree	return FastFourierTransformer . abs ( parent ) ;
Code	return FastFourierTransformer . abs ( parent ) ;
Distance : 6

51
Tree	return ! isShadowingAllowed ( tolerance ) ;
Code	return ! isShadowingAllowed ( tolerance ) ;
Distance : 5

52
Tree	return ( tolerance ) floor ( parent ) ;
Code	return ( tolerance ) floor ( parent ) ;
Distance : 7

53
Tree	return tolerance + NUMBER_CONSTANT ;
Code	return tolerance + NUMBER_CONSTANT ;
Distance : 3

54
Tree	return Token.SUPER ;
Code	return Token.SUPER ;
Distance : 1

55
Tree	return FastFourierTransformer < < NUMBER_CONSTANT ;
Code	return FastFourierTransformer < < NUMBER_CONSTANT ;
Distance : 4

56
Tree	return parent + obj2 . clone ( parent ) ;
Code	return parent + obj2 . clone ( parent ) ;
Distance : 8

57
Tree	return warningsGuard ? f.length : FunctionFlavor.NORMAL ;
Code	return warningsGuard ? f.length : FunctionFlavor.NORMAL ;
Distance : 5

58
Tree	return FastFourierTransformer . clone ( parent ) ;
Code	return FastFourierTransformer . clone ( parent ) ;
Distance : 6

59
Tree	return FastFourierTransformer . abs () ? null : tolerance ;
Code	return FastFourierTransformer . abs () ? null : tolerance ;
Distance : 8

60
Tree	return ! NodeUtil ;
Code	return ! NodeUtil ;
Distance : 2

61
Tree	return new ArrayRealVector ( tolerance ) ;
Code	return new ArrayRealVector ( tolerance ) ;
Distance : 5

62
Tree	return FastFourierTransformer . abs ( parent ) ? null : parent ;
Code	return FastFourierTransformer . abs ( parent ) ? null : parent ;
Distance : 10

63
Tree	return STRING_CONSTANT + callNode + STRING_CONSTANT + callNode ;
Code	return STRING_CONSTANT + callNode + STRING_CONSTANT + callNode ;
Distance : 7

64
Tree	return parent . abs ( parent ) ? null : parent ;
Code	return parent . abs ( parent ) ? null : parent ;
Distance : 10

65
Tree	return NodeUtil ;
Code	return NodeUtil ;
Distance : 1

66
Tree	return new Es6SyntacticScopeCreator ( point ) ;
Code	return new Es6SyntacticScopeCreator ( point ) ;
Distance : 5

67
Tree	return parent . abs () ? null : tolerance ;
Code	return parent . abs () ? null : tolerance ;
Distance : 8

68
Tree	return tolerance . abs ( parent ) ;
Code	return tolerance . abs ( parent ) ;
Distance : 6

69
Tree	return parent + NUMBER_CONSTANT ;
Code	return parent + NUMBER_CONSTANT ;
Distance : 3

70
Tree	return FastFourierTransformer ? LocalizedFormats.CARDAN_ANGLES_SINGULARITY : FunctionFlavor.NORMAL ;
Code	return FastFourierTransformer ? LocalizedFormats.CARDAN_ANGLES_SINGULARITY : FunctionFlavor.NORMAL ;
Distance : 5

71
Tree	return FastFourierTransformer + obj2 . clone ( parent ) ;
Code	return FastFourierTransformer + obj2 . clone ( parent ) ;
Distance : 8

72
Tree	return parent ? f.length : FunctionFlavor.NORMAL ;
Code	return parent ? f.length : FunctionFlavor.NORMAL ;
Distance : 5

73
Tree	return STRING_CONSTANT + callNode + STRING_CONSTANT + ref ;
Code	return STRING_CONSTANT + callNode + STRING_CONSTANT + ref ;
Distance : 7

74
Tree	return TransformUtils + NUMBER_CONSTANT ;
Code	return TransformUtils + NUMBER_CONSTANT ;
Distance : 3

75
Tree	return ! directly ( parent ) ;
Code	return ! directly ( parent ) ;
Distance : 5

76
Tree	return this == FastMath ;
Code	return this == FastMath ;
Distance : 3

77
Tree	return Reach.ALL ;
Code	return Reach.ALL ;
Distance : 1

78
Tree	return ! FastFourierTransformer ;
Code	return ! FastFourierTransformer ;
Distance : 2

79
Tree	return STRING_CONSTANT + expr + STRING_CONSTANT + callNode ;
Code	return STRING_CONSTANT + expr + STRING_CONSTANT + callNode ;
Distance : 7

80
Tree	return FastFourierTransformer . clone () . jsRoot == NUMBER_CONSTANT ;
Code	return FastFourierTransformer . clone () . jsRoot == NUMBER_CONSTANT ;
Distance : 8

81
Tree	return STRING_CONSTANT + callNode + STRING_CONSTANT + FastMath ;
Code	return STRING_CONSTANT + callNode + STRING_CONSTANT + FastMath ;
Distance : 7

82
Tree	return ! callNode ;
Code	return ! callNode ;
Distance : 2

83
Tree	return FastFourierTransformer + NUMBER_CONSTANT ;
Code	return FastFourierTransformer + NUMBER_CONSTANT ;
Distance : 3

84
Tree	return tolerance ;
Code	return tolerance ;
Distance : 1

85
Tree	return false ;
Code	return false ;
Distance : 0

86
Tree	return TransformUtils ;
Code	return TransformUtils ;
Distance : 1

87
Tree	return STRING_CONSTANT + ref + STRING_CONSTANT + callNode ;
Code	return STRING_CONSTANT + ref + STRING_CONSTANT + callNode ;
Distance : 7

88
Tree	return parent . abs ( parent ) ? null : tolerance ;
Code	return parent . abs ( parent ) ? null : tolerance ;
Distance : 10

89
Tree	return FastFourierTransformer . abs ( parent ) ? null : tolerance ;
Code	return FastFourierTransformer . abs ( parent ) ? null : tolerance ;
Distance : 10

90
Tree	return randomData < < NUMBER_CONSTANT ;
Code	return randomData < < NUMBER_CONSTANT ;
Distance : 4

91
Tree	return ! val ;
Code	return ! val ;
Distance : 2

92
Tree	return TransformUtils . abs ( parent ) ;
Code	return TransformUtils . abs ( parent ) ;
Distance : 6

93
Tree	return parent + this . rawType . clone ( CHAR_CONS , CHAR_CONS ) ;
Code	return parent + this . rawType . clone ( CHAR_CONS , CHAR_CONS ) ;
Distance : 12

94
Tree	return getDataset () ? null : blind ;
Code	return getDataset () ? null : blind ;
Distance : 6

95
Tree	return FastFourierTransformer . abs () . jsRoot == NUMBER_CONSTANT ;
Code	return FastFourierTransformer . abs () . jsRoot == NUMBER_CONSTANT ;
Distance : 8

96
Tree	return FastFourierTransformer . clone ( parent ) ? null : parent ;
Code	return FastFourierTransformer . clone ( parent ) ? null : parent ;
Distance : 10

97
Tree	return f.length ;
Code	return f.length ;
Distance : 1

98
Tree	return FastFourierTransformer . abs ( tolerance ) ;
Code	return FastFourierTransformer . abs ( tolerance ) ;
Distance : 6

99
Tree	return new SinFunction ( point ) ;
Code	return new SinFunction ( point ) ;
Distance : 5

100
Tree	return ( FastFourierTransformer ) floor ( parent ) ;
Code	return ( FastFourierTransformer ) floor ( parent ) ;
Distance : 7

101
Tree	return this == tolerance ;
Code	return this == tolerance ;
Distance : 3

102
Tree	return ! scopeCreator ;
Code	return ! scopeCreator ;
Distance : 2

103
Tree	return parent + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return parent + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

104
Tree	return new SinFunction ( tolerance ) ;
Code	return new SinFunction ( tolerance ) ;
Distance : 5

105
Tree	return this == scopeCreator ;
Code	return this == scopeCreator ;
Distance : 3

106
Tree	return ! MOCKITO_PROXY_MARKER ;
Code	return ! MOCKITO_PROXY_MARKER ;
Distance : 2

107
Tree	return tolerance < < NUMBER_CONSTANT ;
Code	return tolerance < < NUMBER_CONSTANT ;
Distance : 4

108
Tree	return getReferenceName () ? null : parent ;
Code	return getReferenceName () ? null : parent ;
Distance : 6

109
Tree	return FastFourierTransformer + this . rawType . clone ( CHAR_CONS , CHAR_CONS ) ;
Code	return FastFourierTransformer + this . rawType . clone ( CHAR_CONS , CHAR_CONS ) ;
Distance : 12

110
Tree	return parent . abs () . jsRoot == NUMBER_CONSTANT ;
Code	return parent . abs () . jsRoot == NUMBER_CONSTANT ;
Distance : 8

111
Tree	return getDataset () ? null : tolerance ;
Code	return getDataset () ? null : tolerance ;
Distance : 6

112
Tree	return STRING_CONSTANT + rawType + STRING_CONSTANT + callNode ;
Code	return STRING_CONSTANT + rawType + STRING_CONSTANT + callNode ;
Distance : 7

113
Tree	return ! getDataset ( parent ) ;
Code	return ! getDataset ( parent ) ;
Distance : 5

114
Tree	return ! directly ( tolerance ) ;
Code	return ! directly ( tolerance ) ;
Distance : 5

115
Tree	return val + NUMBER_CONSTANT ;
Code	return val + NUMBER_CONSTANT ;
Distance : 3

116
Tree	return TransformUtils < < NUMBER_CONSTANT ;
Code	return TransformUtils < < NUMBER_CONSTANT ;
Distance : 4

117
Tree	return parent . abs () ? null : blind ;
Code	return parent . abs () ? null : blind ;
Distance : 8

118
Tree	return new Random ( tolerance ) ;
Code	return new Random ( tolerance ) ;
Distance : 5

119
Tree	return this == rawType ;
Code	return this == rawType ;
Distance : 3

120
Tree	return NodeUtil + NUMBER_CONSTANT ;
Code	return NodeUtil + NUMBER_CONSTANT ;
Distance : 3

121
Tree	return getTolerance () ? null : parent ;
Code	return getTolerance () ? null : parent ;
Distance : 6

122
Tree	return NodeUtil . abs ( parent ) ;
Code	return NodeUtil . abs ( parent ) ;
Distance : 6

123
Tree	return NodeUtil . abs ( parent ) ? null : tolerance ;
Code	return NodeUtil . abs ( parent ) ? null : tolerance ;
Distance : 10

124
Tree	return STRING_CONSTANT + callNode + STRING_CONSTANT + expr ;
Code	return STRING_CONSTANT + callNode + STRING_CONSTANT + expr ;
Distance : 7

125
Tree	return FastFourierTransformer . abs () ? null : parent ;
Code	return FastFourierTransformer . abs () ? null : parent ;
Distance : 8

126
Tree	return new LUDecompositionImpl ( point ) ;
Code	return new LUDecompositionImpl ( point ) ;
Distance : 5

127
Tree	return new LUDecompositionImpl ( tolerance ) ;
Code	return new LUDecompositionImpl ( tolerance ) ;
Distance : 5

128
Tree	return Color.BLACK ;
Code	return Color.BLACK ;
Distance : 1

129
Tree	return NodeUtil + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return NodeUtil + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

130
Tree	return FastFourierTransformer + getTolerance () ;
Code	return FastFourierTransformer + getTolerance () ;
Distance : 4

131
Tree	return ! getDataset ( tolerance ) ;
Code	return ! getDataset ( tolerance ) ;
Distance : 5

132
Tree	return ! checkEquivalenceHelper ( tolerance ) ;
Code	return ! checkEquivalenceHelper ( tolerance ) ;
Distance : 5

133
Tree	return parent + obj2 . abs ( parent ) ;
Code	return parent + obj2 . abs ( parent ) ;
Distance : 8

134
Tree	return ( subtree ) floor ( parent ) ;
Code	return ( subtree ) floor ( parent ) ;
Distance : 7

135
Tree	return val + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return val + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

136
Tree	return FastFourierTransformer != FunctionFlavor.NORMAL ;
Code	return FastFourierTransformer != FunctionFlavor.NORMAL ;
Distance : 3

137
Tree	return parent < < NUMBER_CONSTANT ;
Code	return parent < < NUMBER_CONSTANT ;
Distance : 4

138
Tree	return FastFourierTransformer . clone () . success == NUMBER_CONSTANT ;
Code	return FastFourierTransformer . clone () . success == NUMBER_CONSTANT ;
Distance : 8

139
Tree	return STRING_CONSTANT + callNode . getClass ( tolerance ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + callNode . getClass ( tolerance ) + STRING_CONSTANT ;
Distance : 10

140
Tree	return FastFourierTransformer . abs () . success == NUMBER_CONSTANT ;
Code	return FastFourierTransformer . abs () . success == NUMBER_CONSTANT ;
Distance : 8

141
Tree	return parent + getDataset () ;
Code	return parent + getDataset () ;
Distance : 4

142
Tree	return ! isShadowingAllowed ( parent ) ;
Code	return ! isShadowingAllowed ( parent ) ;
Distance : 5

143
Tree	return warningsGuard + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return warningsGuard + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

144
Tree	return FastFourierTransformer + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return FastFourierTransformer + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

145
Tree	return FastFourierTransformer + this . commonTypes . clone ( CHAR_CONS , CHAR_CONS ) ;
Code	return FastFourierTransformer + this . commonTypes . clone ( CHAR_CONS , CHAR_CONS ) ;
Distance : 12

146
Tree	return warningsGuard + NUMBER_CONSTANT ;
Code	return warningsGuard + NUMBER_CONSTANT ;
Distance : 3

147
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , callNode , tolerance ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , callNode , tolerance ) ;
Distance : 12

148
Tree	return FastFourierTransformer != f.length ;
Code	return FastFourierTransformer != f.length ;
Distance : 3

149
Tree	return new Es6SyntacticScopeCreator ( tolerance ) ;
Code	return new Es6SyntacticScopeCreator ( tolerance ) ;
Distance : 5

150
Tree	return parent . clone () . jsRoot == NUMBER_CONSTANT ;
Code	return parent . clone () . jsRoot == NUMBER_CONSTANT ;
Distance : 8

151
Tree	return FastFourierTransformer + obj2 . clone ( tolerance ) ;
Code	return FastFourierTransformer + obj2 . clone ( tolerance ) ;
Distance : 8

152
Tree	return ! tableau ;
Code	return ! tableau ;
Distance : 2

153
Tree	return FastFourierTransformer + obj2 . clone ( callNode ) ;
Code	return FastFourierTransformer + obj2 . clone ( callNode ) ;
Distance : 8

154
Tree	return FastFourierTransformer + parent . clone ( parent ) ;
Code	return FastFourierTransformer + parent . clone ( parent ) ;
Distance : 8

155
Tree	return ( TimeZoneDisplayKey ) floor ( parent ) ;
Code	return ( TimeZoneDisplayKey ) floor ( parent ) ;
Distance : 7

156
Tree	return ( parent ) floor ( parent ) ;
Code	return ( parent ) floor ( parent ) ;
Distance : 7

157
Tree	return ( randomData ) floor ( parent ) ;
Code	return ( randomData ) floor ( parent ) ;
Distance : 7

158
Tree	return ( RandomGenerator ) floor ( parent ) ;
Code	return ( RandomGenerator ) floor ( parent ) ;
Distance : 7

159
Tree	return ! isEnhancedFor ( tolerance ) ;
Code	return ! isEnhancedFor ( tolerance ) ;
Distance : 5

160
Tree	return STRING_CONSTANT + callNode . getClass ( callNode ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + callNode . getClass ( callNode ) + STRING_CONSTANT ;
Distance : 10

161
Tree	return TransformUtils + this . rawType . clone ( CHAR_CONS , CHAR_CONS ) ;
Code	return TransformUtils + this . rawType . clone ( CHAR_CONS , CHAR_CONS ) ;
Distance : 12

162
Tree	return tolerance != f.length ;
Code	return tolerance != f.length ;
Distance : 3

163
Tree	return FastFourierTransformer != startPoint.length ;
Code	return FastFourierTransformer != startPoint.length ;
Distance : 3

164
Tree	return NodeUtil . abs () . jsRoot == NUMBER_CONSTANT ;
Code	return NodeUtil . abs () . jsRoot == NUMBER_CONSTANT ;
Distance : 8

165
Tree	return TransformUtils != f.length ;
Code	return TransformUtils != f.length ;
Distance : 3

166
Tree	return ( FastMath ) floor ( parent ) ;
Code	return ( FastMath ) floor ( parent ) ;
Distance : 7

167
Tree	return FastFourierTransformer + clone () ;
Code	return FastFourierTransformer + clone () ;
Distance : 4

168
Tree	return randomData + NUMBER_CONSTANT ;
Code	return randomData + NUMBER_CONSTANT ;
Distance : 3

169
Tree	return parent + getTolerance () ;
Code	return parent + getTolerance () ;
Distance : 4

170
Tree	return parent != FunctionFlavor.NORMAL ;
Code	return parent != FunctionFlavor.NORMAL ;
Distance : 3

171
Tree	return NodeUtil + this . rawType . clone ( CHAR_CONS , CHAR_CONS ) ;
Code	return NodeUtil + this . rawType . clone ( CHAR_CONS , CHAR_CONS ) ;
Distance : 12

172
Tree	return STRING_CONSTANT + callNode . clone ( tolerance ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + callNode . clone ( tolerance ) + STRING_CONSTANT ;
Distance : 10

173
Tree	return NodeUtil + this . commonTypes . clone ( CHAR_CONS , CHAR_CONS ) ;
Code	return NodeUtil + this . commonTypes . clone ( CHAR_CONS , CHAR_CONS ) ;
Distance : 12

174
Tree	return STRING_CONSTANT + callNode . clone ( callNode ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + callNode . clone ( callNode ) + STRING_CONSTANT ;
Distance : 10

175
Tree	return NodeUtil + abs () ;
Code	return NodeUtil + abs () ;
Distance : 4

176
Tree	return tolerance + this . rawType . clone ( CHAR_CONS , CHAR_CONS ) ;
Code	return tolerance + this . rawType . clone ( CHAR_CONS , CHAR_CONS ) ;
Distance : 12

177
Tree	return NodeUtil != f.length ;
Code	return NodeUtil != f.length ;
Distance : 3

178
Tree	return getTolerance () ? null : tolerance ;
Code	return getTolerance () ? null : tolerance ;
Distance : 6

179
Tree	return FastFourierTransformer % NUMBER_CONSTANT ;
Code	return FastFourierTransformer % NUMBER_CONSTANT ;
Distance : 3

180
Tree	return STRING_CONSTANT + ref . getClass ( tolerance ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + ref . getClass ( tolerance ) + STRING_CONSTANT ;
Distance : 10

181
Tree	return STRING_CONSTANT + ref . getClass ( callNode ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + ref . getClass ( callNode ) + STRING_CONSTANT ;
Distance : 10

182
Tree	return STRING_CONSTANT + rawType . getClass ( tolerance ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + rawType . getClass ( tolerance ) + STRING_CONSTANT ;
Distance : 10

183
Tree	return parent % NUMBER_CONSTANT ;
Code	return parent % NUMBER_CONSTANT ;
Distance : 3

184
Tree	return TransformUtils % NUMBER_CONSTANT ;
Code	return TransformUtils % NUMBER_CONSTANT ;
Distance : 3

185
Tree	return randomData + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return randomData + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

186
Tree	return parent + obj2 . clone ( callNode ) ;
Code	return parent + obj2 . clone ( callNode ) ;
Distance : 8

187
Tree	return NodeUtil % NUMBER_CONSTANT ;
Code	return NodeUtil % NUMBER_CONSTANT ;
Distance : 3

188
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , randomData , tolerance ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , randomData , tolerance ) ;
Distance : 12

189
Tree	return STRING_CONSTANT + rawType . getClass ( callNode ) + STRING_CONSTANT ;
Code	return STRING_CONSTANT + rawType . getClass ( callNode ) + STRING_CONSTANT ;
Distance : 10

190
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , randomData , scopeCreator ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , randomData , scopeCreator ) ;
Distance : 12

191
Tree	return true ; Class
Code	return true ; Class
Distance : 2

192
Tree	return tolerance % NUMBER_CONSTANT ;
Code	return tolerance % NUMBER_CONSTANT ;
Distance : 3

193
Tree	return true ; MathRuntimeException
Code	return true ; MathRuntimeException
Distance : 2

194
Tree	return true ; {}
Code	return true ; {}
Distance : 2

195
Tree	return true ; f
Code	return true ; f
Distance : 2

196
Tree	return val % NUMBER_CONSTANT ;
Code	return val % NUMBER_CONSTANT ;
Distance : 3

197
Tree	return true ; ParamChecks
Code	return true ; ParamChecks
Distance : 2

198
Tree	return true ; Test
Code	return true ; Test
Distance : 2

199
Tree	super ( parent , NameBasedDefinitionProvider , i2s2 , callNode , scopeCreator ) ;
Code	super ( parent , NameBasedDefinitionProvider , i2s2 , callNode , scopeCreator ) ;
Distance : 12

========================================================================


========================================================================
Example Number: 18
Parent Code is: 
return TernaryValue.TRUE ;
-------------------------------------------------------------------------------
Child code is: 
return TernaryValue.UNKNOWN ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (40{val=TernaryValue.TRUE}) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (40{val=TernaryValue.UNKNOWN}) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/75/parent/src_com_google_javascript_jscomp_NodeUtil.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return ldp . createsScope ( parent ) ;
Code	return ldp . createsScope ( parent ) ;
Distance : 6

1
Tree	return SHORT_PREFIX_STYLE . createsScope () >= NUMBER_CONSTANT ;
Code	return SHORT_PREFIX_STYLE . createsScope () >= NUMBER_CONSTANT ;
Distance : 6

2
Tree	return y2 . createsScope () >= NUMBER_CONSTANT ;
Code	return y2 . createsScope () >= NUMBER_CONSTANT ;
Distance : 6

3
Tree	return bindComponents.thisValue . createsScope () . TRUTHY ;
Code	return bindComponents.thisValue . createsScope () . TRUTHY ;
Distance : 6

4
Tree	return bindComponents.thisValue . createsScope () . value ;
Code	return bindComponents.thisValue . createsScope () . value ;
Distance : 6

5
Tree	return target.length . createsScope () . populationSize ;
Code	return target.length . createsScope () . populationSize ;
Distance : 6

6
Tree	return getNumber ( new SimpleAffix ( DEPRECATION_MESSAGE ) , target.length ) . returnZero () ;
Code	return getNumber ( new SimpleAffix ( DEPRECATION_MESSAGE ) , target.length ) . returnZero () ;
Distance : 13

7
Tree	return getDataset ( new SimpleAffix ( DEPRECATION_MESSAGE ) , target.length ) . returnZero () ;
Code	return getDataset ( new SimpleAffix ( DEPRECATION_MESSAGE ) , target.length ) . returnZero () ;
Distance : 13

8
Tree	return createComplex ( new SimpleAffix ( DEPRECATION_MESSAGE ) , target.length ) . returnZero () ;
Code	return createComplex ( new SimpleAffix ( DEPRECATION_MESSAGE ) , target.length ) . returnZero () ;
Distance : 13

9
Tree	return EscapeUtils ;
Code	return EscapeUtils ;
Distance : 1

10
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

11
Tree	return STRING_CONSTANT + STRING_CONSTANT ;
Code	return STRING_CONSTANT + STRING_CONSTANT ;
Distance : 3

12
Tree	return inMemoryClassObjects ;
Code	return inMemoryClassObjects ;
Distance : 1

13
Tree	return parent ;
Code	return parent ;
Distance : 1

14
Tree	return null ;
Code	return null ;
Distance : 1

15
Tree	return bindComponents.thisValue . createsScope () . populationSize ;
Code	return bindComponents.thisValue . createsScope () . populationSize ;
Distance : 6

16
Tree	return target.length . createsScope () . jsRoot ;
Code	return target.length . createsScope () . jsRoot ;
Distance : 6

17
Tree	return parent ? target.length : IncrementalCheckMode.GENERATE_IJS ;
Code	return parent ? target.length : IncrementalCheckMode.GENERATE_IJS ;
Distance : 5

18
Tree	return RegularizedBeta . createsScope ( parent ) ;
Code	return RegularizedBeta . createsScope ( parent ) ;
Distance : 6

19
Tree	return ldp . createsScope ( null ) ;
Code	return ldp . createsScope ( null ) ;
Distance : 6

20
Tree	return SHORT_PREFIX_STYLE ? IncrementalCheckMode.GENERATE_IJS : IncrementalCheckMode.GENERATE_IJS ;
Code	return SHORT_PREFIX_STYLE ? IncrementalCheckMode.GENERATE_IJS : IncrementalCheckMode.GENERATE_IJS ;
Distance : 5

21
Tree	return numberOfTrials ;
Code	return numberOfTrials ;
Distance : 1

22
Tree	return bindComponents.thisValue . createsScope () . scalar ;
Code	return bindComponents.thisValue . createsScope () . scalar ;
Distance : 6

23
Tree	return RegularizedBeta . createsScope () >= NUMBER_CONSTANT ;
Code	return RegularizedBeta . createsScope () >= NUMBER_CONSTANT ;
Distance : 6

24
Tree	return ldp . createsScope () >= NUMBER_CONSTANT ;
Code	return ldp . createsScope () >= NUMBER_CONSTANT ;
Distance : 6

25
Tree	return parent . createsScope ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Code	return parent . createsScope ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Distance : 10

26
Tree	return inMemoryClassObjects . createsScope ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Code	return inMemoryClassObjects . createsScope ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Distance : 10

27
Tree	return numberOfTrials . createsScope ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Code	return numberOfTrials . createsScope ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Distance : 10

28
Tree	return SHORT_PREFIX_STYLE ;
Code	return SHORT_PREFIX_STYLE ;
Distance : 1

29
Tree	return RegularizedBeta ;
Code	return RegularizedBeta ;
Distance : 1

30
Tree	return this . commonTypes . TRUTHY ;
Code	return this . commonTypes . TRUTHY ;
Distance : 5

31
Tree	return this . commonTypes . createsScope () ;
Code	return this . commonTypes . createsScope () ;
Distance : 6

32
Tree	return ldp ;
Code	return ldp ;
Distance : 1

33
Tree	return parent . createsScope () ? null : parent ;
Code	return parent . createsScope () ? null : parent ;
Distance : 8

34
Tree	return parent . createsScope () ? null : obj1 ;
Code	return parent . createsScope () ? null : obj1 ;
Distance : 8

35
Tree	return parent . createsScope () . populationSize ;
Code	return parent . createsScope () . populationSize ;
Distance : 6

36
Tree	return this . maxY . createsScope () ;
Code	return this . maxY . createsScope () ;
Distance : 6

37
Tree	return this . printExterns . createsScope () ;
Code	return this . printExterns . createsScope () ;
Distance : 6

38
Tree	return EscapeUtils . createsScope () ? null : parent ;
Code	return EscapeUtils . createsScope () ? null : parent ;
Distance : 8

39
Tree	return this . commonTypes . maxY ;
Code	return this . commonTypes . maxY ;
Distance : 5

40
Tree	return this . commonTypes . primitiveType ;
Code	return this . commonTypes . primitiveType ;
Distance : 5

41
Tree	return new HarmonicFunction ( STRING_CONSTANT ) ;
Code	return new HarmonicFunction ( STRING_CONSTANT ) ;
Distance : 5

42
Tree	return inMemoryClassObjects . createsScope () ? null : parent ;
Code	return inMemoryClassObjects . createsScope () ? null : parent ;
Distance : 8

43
Tree	return inMemoryClassObjects . createsScope () ? null : obj1 ;
Code	return inMemoryClassObjects . createsScope () ? null : obj1 ;
Distance : 8

44
Tree	return parent . createsScope () . maxY ;
Code	return parent . createsScope () . maxY ;
Distance : 6

45
Tree	return parent . createsScope () . TRUTHY ;
Code	return parent . createsScope () . TRUTHY ;
Distance : 6

46
Tree	return this . commonTypes . UNKNOWN ;
Code	return this . commonTypes . UNKNOWN ;
Distance : 5

47
Tree	return bindComponents.thisValue ;
Code	return bindComponents.thisValue ;
Distance : 1

48
Tree	return target.length ;
Code	return target.length ;
Distance : 1

49
Tree	return LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ;
Code	return LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ;
Distance : 1

50
Tree	return RegularizedGamma.P ;
Code	return RegularizedGamma.P ;
Distance : 1

51
Tree	return this . domainCrosshairStroke . TRUTHY ;
Code	return this . domainCrosshairStroke . TRUTHY ;
Distance : 5

52
Tree	return dest.n ;
Code	return dest.n ;
Distance : 1

53
Tree	return work.length ;
Code	return work.length ;
Distance : 1

54
Tree	return IncrementalCheckMode.GENERATE_IJS ;
Code	return IncrementalCheckMode.GENERATE_IJS ;
Distance : 1

55
Tree	return parent . createsScope () . scalar ;
Code	return parent . createsScope () . scalar ;
Distance : 6

56
Tree	return startPoint.length ;
Code	return startPoint.length ;
Distance : 1

57
Tree	return inMemoryClassObjects . createsScope () . populationSize ;
Code	return inMemoryClassObjects . createsScope () . populationSize ;
Distance : 6

58
Tree	return this . defaultOutlineStroke . TRUTHY ;
Code	return this . defaultOutlineStroke . TRUTHY ;
Distance : 5

59
Tree	return this . domainCrosshairStroke . createsScope () ;
Code	return this . domainCrosshairStroke . createsScope () ;
Distance : 6

60
Tree	return this . defaultOutlineStroke . createsScope () ;
Code	return this . defaultOutlineStroke . createsScope () ;
Distance : 6

61
Tree	return EscapeUtils . createsScope () ;
Code	return EscapeUtils . createsScope () ;
Distance : 4

62
Tree	return EscapeUtils . createsScope () . getParser () ;
Code	return EscapeUtils . createsScope () . getParser () ;
Distance : 7

63
Tree	return y2 . createsScope () ;
Code	return y2 . createsScope () ;
Distance : 4

64
Tree	return ldp . createsScope ( STRING_CONSTANT ) ;
Code	return ldp . createsScope ( STRING_CONSTANT ) ;
Distance : 6

65
Tree	return y2 . createsScope () . getParser () ;
Code	return y2 . createsScope () . getParser () ;
Distance : 7

66
Tree	return SHORT_PREFIX_STYLE . createsScope () ;
Code	return SHORT_PREFIX_STYLE . createsScope () ;
Distance : 4

67
Tree	return inMemoryClassObjects . createsScope ( null ) ;
Code	return inMemoryClassObjects . createsScope ( null ) ;
Distance : 6

68
Tree	return new SimpleAffix ( STRING_CONSTANT ) ;
Code	return new SimpleAffix ( STRING_CONSTANT ) ;
Distance : 5

69
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 15

70
Tree	return getDataset () ;
Code	return getDataset () ;
Distance : 2

71
Tree	return getDataset ( STRING_CONSTANT ) ;
Code	return getDataset ( STRING_CONSTANT ) ;
Distance : 4

72
Tree	return isLValueRootedInGlobalScope ( STRING_CONSTANT ) ;
Code	return isLValueRootedInGlobalScope ( STRING_CONSTANT ) ;
Distance : 4

73
Tree	return numberOfTrials . createsScope ( STRING_CONSTANT ) ;
Code	return numberOfTrials . createsScope ( STRING_CONSTANT ) ;
Distance : 6

74
Tree	return this . commonTypes . getEmptyObjectLiteral () ;
Code	return this . commonTypes . getEmptyObjectLiteral () ;
Distance : 6

75
Tree	return new CrossModuleCodeMotion ( STRING_CONSTANT ) ;
Code	return new CrossModuleCodeMotion ( STRING_CONSTANT ) ;
Distance : 5

76
Tree	return parent . createsScope ( STRING_CONSTANT ) ;
Code	return parent . createsScope ( STRING_CONSTANT ) ;
Distance : 6

77
Tree	return parent . createsScope () ;
Code	return parent . createsScope () ;
Distance : 4

78
Tree	return new SphericalCoordinates ( STRING_CONSTANT ) ;
Code	return new SphericalCoordinates ( STRING_CONSTANT ) ;
Distance : 5

79
Tree	return inMemoryClassObjects . createsScope () ;
Code	return inMemoryClassObjects . createsScope () ;
Distance : 4

80
Tree	return parent . createsScope () . getParser () ;
Code	return parent . createsScope () . getParser () ;
Distance : 7

81
Tree	return EscapeUtils . createsScope ( STRING_CONSTANT ) ;
Code	return EscapeUtils . createsScope ( STRING_CONSTANT ) ;
Distance : 6

82
Tree	return notBlank ( STRING_CONSTANT ) ;
Code	return notBlank ( STRING_CONSTANT ) ;
Distance : 4

83
Tree	return this . commonTypes . shouldGenerateTypedExterns () ;
Code	return this . commonTypes . shouldGenerateTypedExterns () ;
Distance : 6

84
Tree	return numberOfTrials . createsScope () ? null : parent ;
Code	return numberOfTrials . createsScope () ? null : parent ;
Distance : 8

85
Tree	return createXYAreaChart () ;
Code	return createXYAreaChart () ;
Distance : 2

86
Tree	return inMemoryClassObjects ? IncrementalCheckMode.GENERATE_IJS : IncrementalCheckMode.GENERATE_IJS ;
Code	return inMemoryClassObjects ? IncrementalCheckMode.GENERATE_IJS : IncrementalCheckMode.GENERATE_IJS ;
Distance : 5

87
Tree	return ldp . createsScope () ;
Code	return ldp . createsScope () ;
Distance : 4

88
Tree	return inMemoryClassObjects . createsScope () . getParser () ;
Code	return inMemoryClassObjects . createsScope () . getParser () ;
Distance : 7

89
Tree	return ldp . createsScope () . getParser () ;
Code	return ldp . createsScope () . getParser () ;
Distance : 7

90
Tree	return ( parent ) object . createsScope () ;
Code	return ( parent ) object . createsScope () ;
Distance : 7

91
Tree	return ( _boundaries ) object . getDaysInYearMax () ;
Code	return ( _boundaries ) object . getDaysInYearMax () ;
Distance : 7

92
Tree	return ( _boundaries ) MOCKING_PROGRESS . getDaysInYearMax () ;
Code	return ( _boundaries ) MOCKING_PROGRESS . getDaysInYearMax () ;
Distance : 7

93
Tree	return ( parent ) MOCKING_PROGRESS . getDaysInYearMax () ;
Code	return ( parent ) MOCKING_PROGRESS . getDaysInYearMax () ;
Distance : 7

94
Tree	return createComplex ( STRING_CONSTANT ) ;
Code	return createComplex ( STRING_CONSTANT ) ;
Distance : 4

95
Tree	return inMemoryClassObjects . createsScope () . maxY ;
Code	return inMemoryClassObjects . createsScope () . maxY ;
Distance : 6

96
Tree	return this . commonTypes . compare () ;
Code	return this . commonTypes . compare () ;
Distance : 6

97
Tree	return inMemoryClassObjects . createsScope () . TRUTHY ;
Code	return inMemoryClassObjects . createsScope () . TRUTHY ;
Distance : 6

98
Tree	return getNumber () ;
Code	return getNumber () ;
Distance : 2

99
Tree	return new FieldODEState ( STRING_CONSTANT ) ;
Code	return new FieldODEState ( STRING_CONSTANT ) ;
Distance : 5

100
Tree	return this . maxY . TRUTHY ;
Code	return this . maxY . TRUTHY ;
Distance : 5

101
Tree	return getNumber ( STRING_CONSTANT ) ;
Code	return getNumber ( STRING_CONSTANT ) ;
Distance : 4

102
Tree	return SHORT_PREFIX_STYLE . createsScope () . getParser () ;
Code	return SHORT_PREFIX_STYLE . createsScope () . getParser () ;
Distance : 7

103
Tree	return ( parent ) model . getDaysInYearMax () ;
Code	return ( parent ) model . getDaysInYearMax () ;
Distance : 7

104
Tree	return ( parent ) MOCKING_PROGRESS . createsScope () ;
Code	return ( parent ) MOCKING_PROGRESS . createsScope () ;
Distance : 7

105
Tree	return SHORT_PREFIX_STYLE . createsScope ( STRING_CONSTANT ) ;
Code	return SHORT_PREFIX_STYLE . createsScope ( STRING_CONSTANT ) ;
Distance : 6

106
Tree	return inMemoryClassObjects . createsScope ( STRING_CONSTANT ) ;
Code	return inMemoryClassObjects . createsScope ( STRING_CONSTANT ) ;
Distance : 6

107
Tree	return new GitContributionsProvider ( STRING_CONSTANT ) ;
Code	return new GitContributionsProvider ( STRING_CONSTANT ) ;
Distance : 5

108
Tree	return EscapeUtils . createsScope ( null ) ;
Code	return EscapeUtils . createsScope ( null ) ;
Distance : 6

109
Tree	return new J2clClinitPrunerPass ( STRING_CONSTANT ) ;
Code	return new J2clClinitPrunerPass ( STRING_CONSTANT ) ;
Distance : 5

110
Tree	return new BooleanOutcomePair ( STRING_CONSTANT ) ;
Code	return new BooleanOutcomePair ( STRING_CONSTANT ) ;
Distance : 5

111
Tree	return ( parent ) that . getDaysInYearMax () ;
Code	return ( parent ) that . getDaysInYearMax () ;
Distance : 7

112
Tree	return notBlank () ;
Code	return notBlank () ;
Distance : 2

113
Tree	return createComplex () ;
Code	return createComplex () ;
Distance : 2

114
Tree	return parent ? IncrementalCheckMode.GENERATE_IJS : IncrementalCheckMode.GENERATE_IJS ;
Code	return parent ? IncrementalCheckMode.GENERATE_IJS : IncrementalCheckMode.GENERATE_IJS ;
Distance : 5

115
Tree	return firstNonBottom () ;
Code	return firstNonBottom () ;
Distance : 2

116
Tree	return RegularizedBeta . createsScope ( null ) ;
Code	return RegularizedBeta . createsScope ( null ) ;
Distance : 6

117
Tree	return isLValueRootedInGlobalScope () ;
Code	return isLValueRootedInGlobalScope () ;
Distance : 2

118
Tree	return numberOfTrials . createsScope ( parent ) ;
Code	return numberOfTrials . createsScope ( parent ) ;
Distance : 6

119
Tree	return numberOfTrials . createsScope ( null ) ;
Code	return numberOfTrials . createsScope ( null ) ;
Distance : 6

120
Tree	return y2 . createsScope ( STRING_CONSTANT ) ;
Code	return y2 . createsScope ( STRING_CONSTANT ) ;
Distance : 6

121
Tree	return EscapeUtils . createsScope ( parent ) ;
Code	return EscapeUtils . createsScope ( parent ) ;
Distance : 6

122
Tree	return y2 . createsScope ( null ) ;
Code	return y2 . createsScope ( null ) ;
Distance : 6

123
Tree	return firstNonBottom ( STRING_CONSTANT ) ;
Code	return firstNonBottom ( STRING_CONSTANT ) ;
Distance : 4

124
Tree	return inMemoryClassObjects . createsScope () . scalar ;
Code	return inMemoryClassObjects . createsScope () . scalar ;
Distance : 6

125
Tree	return precedence ( STRING_CONSTANT ) ;
Code	return precedence ( STRING_CONSTANT ) ;
Distance : 4

126
Tree	return EscapeUtils ? IncrementalCheckMode.GENERATE_IJS : IncrementalCheckMode.GENERATE_IJS ;
Code	return EscapeUtils ? IncrementalCheckMode.GENERATE_IJS : IncrementalCheckMode.GENERATE_IJS ;
Distance : 5

127
Tree	return parent . createsScope () ? null : numberOfTrials ;
Code	return parent . createsScope () ? null : numberOfTrials ;
Distance : 8

128
Tree	return y2 . createsScope ( parent ) ;
Code	return y2 . createsScope ( parent ) ;
Distance : 6

129
Tree	return numberOfTrials . createsScope () ? null : obj1 ;
Code	return numberOfTrials . createsScope () ? null : obj1 ;
Distance : 8

130
Tree	return ( parent ) object . getDaysInYearMax () ;
Code	return ( parent ) object . getDaysInYearMax () ;
Distance : 7

131
Tree	return SHORT_PREFIX_STYLE . createsScope ( null ) ;
Code	return SHORT_PREFIX_STYLE . createsScope ( null ) ;
Distance : 6

132
Tree	return numberOfTrials . createsScope () ;
Code	return numberOfTrials . createsScope () ;
Distance : 4

133
Tree	return parent ? startPoint.length : IncrementalCheckMode.GENERATE_IJS ;
Code	return parent ? startPoint.length : IncrementalCheckMode.GENERATE_IJS ;
Distance : 5

134
Tree	return precedence () ;
Code	return precedence () ;
Distance : 2

135
Tree	return this . printExterns . TRUTHY ;
Code	return this . printExterns . TRUTHY ;
Distance : 5

136
Tree	return numberOfTrials . createsScope () . getParser () ;
Code	return numberOfTrials . createsScope () . getParser () ;
Distance : 7

137
Tree	return RegularizedBeta . createsScope ( STRING_CONSTANT ) ;
Code	return RegularizedBeta . createsScope ( STRING_CONSTANT ) ;
Distance : 6

138
Tree	return numberOfTrials ? IncrementalCheckMode.GENERATE_IJS : IncrementalCheckMode.GENERATE_IJS ;
Code	return numberOfTrials ? IncrementalCheckMode.GENERATE_IJS : IncrementalCheckMode.GENERATE_IJS ;
Distance : 5

139
Tree	return inMemoryClassObjects . createsScope ( parent ) ;
Code	return inMemoryClassObjects . createsScope ( parent ) ;
Distance : 6

140
Tree	return RegularizedBeta . createsScope () ;
Code	return RegularizedBeta . createsScope () ;
Distance : 4

141
Tree	return SHORT_PREFIX_STYLE . createsScope ( parent ) ;
Code	return SHORT_PREFIX_STYLE . createsScope ( parent ) ;
Distance : 6

142
Tree	return parent . createsScope ( null ) ;
Code	return parent . createsScope ( null ) ;
Distance : 6

143
Tree	return parent . createsScope ( parent ) ;
Code	return parent . createsScope ( parent ) ;
Distance : 6

144
Tree	return y2 ? IncrementalCheckMode.GENERATE_IJS : IncrementalCheckMode.GENERATE_IJS ;
Code	return y2 ? IncrementalCheckMode.GENERATE_IJS : IncrementalCheckMode.GENERATE_IJS ;
Distance : 5

145
Tree	return inMemoryClassObjects . createsScope ( parent , STRING_CONSTANT ) . valueFor () ;
Code	return inMemoryClassObjects . createsScope ( parent , STRING_CONSTANT ) . valueFor () ;
Distance : 11

146
Tree	return inMemoryClassObjects . createsScope () >= NUMBER_CONSTANT ;
Code	return inMemoryClassObjects . createsScope () >= NUMBER_CONSTANT ;
Distance : 6

147
Tree	return createXYAreaChart ( STRING_CONSTANT ) ;
Code	return createXYAreaChart ( STRING_CONSTANT ) ;
Distance : 4

148
Tree	return bindComponents.thisValue . createsScope () . jsRoot ;
Code	return bindComponents.thisValue . createsScope () . jsRoot ;
Distance : 6

149
Tree	return getDataset ( new SimpleAffix ( tolerance ) , target.length ) . returnZero () ;
Code	return getDataset ( new SimpleAffix ( tolerance ) , target.length ) . returnZero () ;
Distance : 13

150
Tree	return y2 ;
Code	return y2 ;
Distance : 1

151
Tree	return getDataset ( new SimpleAffix ( commonTypes ) , target.length ) . returnZero () ;
Code	return getDataset ( new SimpleAffix ( commonTypes ) , target.length ) . returnZero () ;
Distance : 13

152
Tree	return notBlank ( new SimpleAffix ( DEPRECATION_MESSAGE ) , target.length ) . returnZero () ;
Code	return notBlank ( new SimpleAffix ( DEPRECATION_MESSAGE ) , target.length ) . returnZero () ;
Distance : 13

153
Tree	return parent . createsScope ( parent , STRING_CONSTANT ) . floatValue () ;
Code	return parent . createsScope ( parent , STRING_CONSTANT ) . floatValue () ;
Distance : 11

154
Tree	return RegularizedBeta . createsScope () . getParser () ;
Code	return RegularizedBeta . createsScope () . getParser () ;
Distance : 7

155
Tree	return parent . createsScope ( parent , STRING_CONSTANT ) . valueFor () ;
Code	return parent . createsScope ( parent , STRING_CONSTANT ) . valueFor () ;
Distance : 11

156
Tree	return parent . createsScope ( parent , STRING_CONSTANT ) . returnZero () ;
Code	return parent . createsScope ( parent , STRING_CONSTANT ) . returnZero () ;
Distance : 11

157
Tree	return default: ;
Code	return default: ;
Distance : 1

158
Tree	return getDataset ( new SimpleAffix ( toBeThrown ) , target.length ) . returnZero () ;
Code	return getDataset ( new SimpleAffix ( toBeThrown ) , target.length ) . returnZero () ;
Distance : 13

159
Tree	return createComplex ( new SimpleAffix ( tolerance ) , target.length ) . returnZero () ;
Code	return createComplex ( new SimpleAffix ( tolerance ) , target.length ) . returnZero () ;
Distance : 13

160
Tree	return parent . createsScope () >= NUMBER_CONSTANT ;
Code	return parent . createsScope () >= NUMBER_CONSTANT ;
Distance : 6

161
Tree	return STRING_CONSTANT + STRING_CONSTANT ; notifyListeners
Code	return STRING_CONSTANT + STRING_CONSTANT ; notifyListeners
Distance : 4

162
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; mock
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; mock
Distance : 16

163
Tree	return STRING_CONSTANT + STRING_CONSTANT ; class
Code	return STRING_CONSTANT + STRING_CONSTANT ; class
Distance : 4

164
Tree	return inMemoryClassObjects . createsScope ( parent , STRING_CONSTANT ) . createsScope () ;
Code	return inMemoryClassObjects . createsScope ( parent , STRING_CONSTANT ) . createsScope () ;
Distance : 11

165
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; f
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; f
Distance : 16

166
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; Override
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; Override
Distance : 16

167
Tree	return STRING_CONSTANT + STRING_CONSTANT ; f
Code	return STRING_CONSTANT + STRING_CONSTANT ; f
Distance : 4

168
Tree	return numberOfTrials . createsScope () >= NUMBER_CONSTANT ;
Code	return numberOfTrials . createsScope () >= NUMBER_CONSTANT ;
Distance : 6

169
Tree	return parent . createsScope ( parent , STRING_CONSTANT ) . floor () ;
Code	return parent . createsScope ( parent , STRING_CONSTANT ) . floor () ;
Distance : 11

170
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; MathRuntimeException
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; MathRuntimeException
Distance : 16

171
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; notifyListeners
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; notifyListeners
Distance : 16

172
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; array
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; array
Distance : 16

173
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; class
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; class
Distance : 16

174
Tree	return STRING_CONSTANT + STRING_CONSTANT ; Override
Code	return STRING_CONSTANT + STRING_CONSTANT ; Override
Distance : 4

175
Tree	return STRING_CONSTANT + STRING_CONSTANT ; MathRuntimeException
Code	return STRING_CONSTANT + STRING_CONSTANT ; MathRuntimeException
Distance : 4

176
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; class
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; class
Distance : 14

177
Tree	return STRING_CONSTANT + STRING_CONSTANT ; mock
Code	return STRING_CONSTANT + STRING_CONSTANT ; mock
Distance : 4

178
Tree	return STRING_CONSTANT + STRING_CONSTANT ; array
Code	return STRING_CONSTANT + STRING_CONSTANT ; array
Distance : 4

179
Tree	return y2 . createsScope ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Code	return y2 . createsScope ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Distance : 10

180
Tree	return EscapeUtils . createsScope () >= NUMBER_CONSTANT ;
Code	return EscapeUtils . createsScope () >= NUMBER_CONSTANT ;
Distance : 6

181
Tree	return inMemoryClassObjects . createsScope ( parent , STRING_CONSTANT ) . floatValue () ;
Code	return inMemoryClassObjects . createsScope ( parent , STRING_CONSTANT ) . floatValue () ;
Distance : 11

182
Tree	return SHORT_PREFIX_STYLE . createsScope ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Code	return SHORT_PREFIX_STYLE . createsScope ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Distance : 10

183
Tree	return RegularizedBeta . createsScope ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Code	return RegularizedBeta . createsScope ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Distance : 10

184
Tree	return ldp . createsScope ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Code	return ldp . createsScope ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Distance : 10

185
Tree	return bindComponents.thisValue . createsScope () . maxY ;
Code	return bindComponents.thisValue . createsScope () . maxY ;
Distance : 6

186
Tree	return super(); ;
Code	return super(); ;
Distance : 1

187
Tree	return parent . createsScope ( parent , STRING_CONSTANT ) . createsScope () ;
Code	return parent . createsScope ( parent , STRING_CONSTANT ) . createsScope () ;
Distance : 11

188
Tree	return return; ;
Code	return return; ;
Distance : 1

189
Tree	return continue; ;
Code	return continue; ;
Distance : 1

190
Tree	return break; ;
Code	return break; ;
Distance : 1

191
Tree	return EscapeUtils . createsScope ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Code	return EscapeUtils . createsScope ( STRING_CONSTANT , NUMBER_CONSTANT ) >= NUMBER_CONSTANT ;
Distance : 10

192
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; mock
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; mock
Distance : 14

193
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; notifyListeners
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; notifyListeners
Distance : 14

194
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; MathRuntimeException
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; MathRuntimeException
Distance : 14

195
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; Override
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; Override
Distance : 14

196
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; f
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; f
Distance : 14

197
Tree	return null ; options
Code	return null ; options
Distance : 2

198
Tree	return null ; p
Code	return null ; p
Distance : 2

199
Tree	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; array
Code	return STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ; array
Distance : 14

========================================================================


========================================================================
Example Number: 19
Parent Code is: 
if ( c > NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( c > NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c ) ; } else { appendHexJavaScriptRepresentation ( sb , c ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=c}) (231{val=>}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=c}) (252{val=<=}) (34{val=NUMBER_CONSTANT}))) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=sb}) (235{val=.}) (802{val=append}) (214{val=(}) (800{val=c}) (215{val=)})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (21 (32 (802{val=appendHexJavaScriptRepresentation}) (214{val=(}) (800{val=sb}) (234{val=,}) (800{val=c}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=c}) (231{val=>}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=c}) (230{val=<}) (34{val=NUMBER_CONSTANT}))) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=sb}) (235{val=.}) (802{val=append}) (214{val=(}) (800{val=c}) (215{val=)})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (21 (32 (802{val=appendHexJavaScriptRepresentation}) (214{val=(}) (800{val=sb}) (234{val=,}) (800{val=c}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/73/parent/src_com_google_javascript_jscomp_CodeGenerator.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { StrBuilder . append ( c , c ) ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { StrBuilder . append ( c , c ) ; } else { sb . append ( c ) ; }
Distance : 9

1
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb = - c ; } else { execFinally . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb = - c ; } else { execFinally . append ( c ) ; }
Distance : 11

2
Tree	if ( c && c == metadata.superClassNameNode ) { sb = StringUtils.EMPTY ; } else { propertyRenaming . append ( c ) ; }
Code	if ( c && c == metadata.superClassNameNode ) { sb = StringUtils.EMPTY ; } else { propertyRenaming . append ( c ) ; }
Distance : 13

3
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Distance : 7

4
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { StrBuilder = - c ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { StrBuilder = - c ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Distance : 9

5
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { StrBuilder . append ( c , c ) ; } else { addJsString ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { StrBuilder . append ( c , c ) ; } else { addJsString ( c , c ) ; }
Distance : 6

6
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { addJsString ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { addJsString ( c , c ) ; }
Distance : 9

7
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { StrBuilder . append ( c ) ; } else { validateObjectPattern ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { StrBuilder . append ( c ) ; } else { validateObjectPattern ( c , c ) ; }
Distance : 5

8
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { addJsString ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { addJsString ( c , c ) ; }
Distance : 8

9
Tree	if ( c && c == Double.MIN_VALUE ) { sb = StringUtils.EMPTY ; } else { propertyRenaming . append ( c ) ; }
Code	if ( c && c == Double.MIN_VALUE ) { sb = StringUtils.EMPTY ; } else { propertyRenaming . append ( c ) ; }
Distance : 13

10
Tree	if ( c && c == startConfiguration.length ) { sb = StringUtils.EMPTY ; } else { propertyRenaming . append ( c ) ; }
Code	if ( c && c == startConfiguration.length ) { sb = StringUtils.EMPTY ; } else { propertyRenaming . append ( c ) ; }
Distance : 13

11
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { visitCode ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { visitCode ( c , c ) ; }
Distance : 9

12
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { propertyRenaming . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { propertyRenaming . append ( c ) ; }
Distance : 10

13
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { canRemoveExterns . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { canRemoveExterns . append ( c ) ; }
Distance : 10

14
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { visitCode ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { visitCode ( c , c ) ; }
Distance : 4

15
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { validateObjectPattern ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { validateObjectPattern ( c , c ) ; }
Distance : 9

16
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { tmp . append ( c ) ; } else { sb . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { tmp . append ( c ) ; } else { sb . append ( c , c ) ; }
Distance : 7

17
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { StrBuilder = Long.MAX_VALUE ; } else { propertyRenaming . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { StrBuilder = Long.MAX_VALUE ; } else { propertyRenaming . append ( c ) ; }
Distance : 12

18
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = metadata.superClassNameNode ; } else { propertyRenaming . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = metadata.superClassNameNode ; } else { propertyRenaming . append ( c ) ; }
Distance : 11

19
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { StrBuilder . append ( c ) ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { StrBuilder . append ( c ) ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Distance : 5

20
Tree	if ( c && c == ConstCheck.CONST_REASSIGNED_VALUE_ERROR ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c && c == ConstCheck.CONST_REASSIGNED_VALUE_ERROR ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 12

21
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { StrBuilder . append ( c , c ) ; } else { validateObjectPattern ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { StrBuilder . append ( c , c ) ; } else { validateObjectPattern ( c , c ) ; }
Distance : 6

22
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { validateObjectPattern ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { validateObjectPattern ( c , c ) ; }
Distance : 9

23
Tree	if ( c == PropertyRenamingPolicy.ALL_UNQUOTED ) { sb = c - right ; } else { sb . append ( c ) ; }
Code	if ( c == PropertyRenamingPolicy.ALL_UNQUOTED ) { sb = c - right ; } else { sb . append ( c ) ; }
Distance : 15

24
Tree	if ( c && c == startConfiguration.length ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c && c == startConfiguration.length ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 12

25
Tree	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.MIN_VALUE ) { sb = Double.NaN ; } else { visitCode ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.MIN_VALUE ) { sb = Double.NaN ; } else { visitCode ( c , c ) ; }
Distance : 11

26
Tree	if ( c && c == metadata.superClassNameNode ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c && c == metadata.superClassNameNode ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 12

27
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { validateObjectPattern ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { validateObjectPattern ( c , c ) ; }
Distance : 4

28
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { extraInterfacesValidated . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { extraInterfacesValidated . append ( c ) ; }
Distance : 10

29
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { addJsString ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { addJsString ( c , c ) ; }
Distance : 7

30
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { validateObjectPattern ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { validateObjectPattern ( c , c ) ; }
Distance : 6

31
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { reportLooseTypeViolations . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { reportLooseTypeViolations . append ( c ) ; }
Distance : 11

32
Tree	if ( c && c == Double.MIN_VALUE ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c && c == Double.MIN_VALUE ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 12

33
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { StrBuilder . append ( c , c ) ; } else { visitCode ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { StrBuilder . append ( c , c ) ; } else { visitCode ( c , c ) ; }
Distance : 7

34
Tree	if ( c && c == sample2.length ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c && c == sample2.length ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 12

35
Tree	if ( c >= NUMBER_CONSTANT ) { sb = DateTimeFormat - closureRequire ; } else { StrBuilder . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = DateTimeFormat - closureRequire ; } else { StrBuilder . append ( c ) ; }
Distance : 14

36
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { validateObjectPattern ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { validateObjectPattern ( c , c ) ; }
Distance : 5

37
Tree	if ( c >= NUMBER_CONSTANT ) { sb = DateTimeFormat - right ; } else { execFinally . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = DateTimeFormat - right ; } else { execFinally . append ( c ) ; }
Distance : 14

38
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { computeMillis ( c , c ) ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { computeMillis ( c , c ) ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Distance : 8

39
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { StrBuilder = - c ; } else { ownerFunction . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { StrBuilder = - c ; } else { ownerFunction . append ( c ) ; }
Distance : 10

40
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { addJsString ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { addJsString ( c , c ) ; }
Distance : 9

41
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { sb . append ( c ) ; }
Distance : 8

42
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { validateObjectPattern ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { validateObjectPattern ( c , c ) ; }
Distance : 8

43
Tree	if ( c == TypeInferenceMode.NEITHER ) { sb = c - residual ; } else { sb . append ( c ) ; }
Code	if ( c == TypeInferenceMode.NEITHER ) { sb = c - residual ; } else { sb . append ( c ) ; }
Distance : 15

44
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { sb . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { sb . append ( c , c ) ; }
Distance : 6

45
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Distance : 8

46
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = Reach.LOCAL_ONLY ; } else { validateObjectPattern ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = Reach.LOCAL_ONLY ; } else { validateObjectPattern ( c , c ) ; }
Distance : 8

47
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { addJsString ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { addJsString ( c , c ) ; }
Distance : 6

48
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { visitCode ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { visitCode ( c , c ) ; }
Distance : 8

49
Tree	if ( c == TypeInferenceMode.NEITHER ) { sb = c - right ; } else { sb . append ( c ) ; }
Code	if ( c == TypeInferenceMode.NEITHER ) { sb = c - right ; } else { sb . append ( c ) ; }
Distance : 15

50
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { removeExpressionCompletely ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { removeExpressionCompletely ( c , c ) ; }
Distance : 7

51
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Distance : 7

52
Tree	if ( c == DecompositionType.DECOMPOSABLE ) { sb = c - residual ; } else { sb . append ( c ) ; }
Code	if ( c == DecompositionType.DECOMPOSABLE ) { sb = c - residual ; } else { sb . append ( c ) ; }
Distance : 15

53
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { declare ( c , c ) ; } else { validateObjectPattern ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { declare ( c , c ) ; } else { validateObjectPattern ( c , c ) ; }
Distance : 8

54
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { StrBuilder . append ( c , c ) ; } else { addJsString ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { StrBuilder . append ( c , c ) ; } else { addJsString ( c , c ) ; }
Distance : 7

55
Tree	if ( c && c == ConstCheck.CONST_REASSIGNED_VALUE_ERROR ) { sb = StringUtils.EMPTY ; } else { propertyRenaming . append ( c ) ; }
Code	if ( c && c == ConstCheck.CONST_REASSIGNED_VALUE_ERROR ) { sb = StringUtils.EMPTY ; } else { propertyRenaming . append ( c ) ; }
Distance : 13

56
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb = - c ; } else { inheritsCalls . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb = - c ; } else { inheritsCalls . append ( c ) ; }
Distance : 11

57
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { StrBuilder = - c ; } else { validateObjectPattern ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { StrBuilder = - c ; } else { validateObjectPattern ( c , c ) ; }
Distance : 9

58
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { addJsString ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { addJsString ( c , c ) ; }
Distance : 5

59
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { StrBuilder . append ( c , c ) ; } else { visitCode ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { StrBuilder . append ( c , c ) ; } else { visitCode ( c , c ) ; }
Distance : 6

60
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { StrBuilder . append ( c , c ) ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { StrBuilder . append ( c , c ) ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Distance : 8

61
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb = - c ; } else { ownerFunction . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb = - c ; } else { ownerFunction . append ( c ) ; }
Distance : 11

62
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb = - c ; } else { imaginaryFormat . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb = - c ; } else { imaginaryFormat . append ( c ) ; }
Distance : 11

63
Tree	if ( c && c == ConstCheck.CONST_REASSIGNED_VALUE_ERROR ) { sb = Reach.LOCAL_ONLY ; } else { propertyRenaming . append ( c ) ; }
Code	if ( c && c == ConstCheck.CONST_REASSIGNED_VALUE_ERROR ) { sb = Reach.LOCAL_ONLY ; } else { propertyRenaming . append ( c ) ; }
Distance : 13

64
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { StrBuilder . append ( c , c ) ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { StrBuilder . append ( c , c ) ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Distance : 7

65
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { StrBuilder . append ( c , c ) ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { StrBuilder . append ( c , c ) ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Distance : 6

66
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { StrBuilder . append ( c ) ; } else { addJsString ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { StrBuilder . append ( c ) ; } else { addJsString ( c , c ) ; }
Distance : 5

67
Tree	if ( c == DecompositionType.DECOMPOSABLE ) { sb = c - right ; } else { sb . append ( c ) ; }
Code	if ( c == DecompositionType.DECOMPOSABLE ) { sb = c - right ; } else { sb . append ( c ) ; }
Distance : 15

68
Tree	if ( c && c == DecompositionType.DECOMPOSABLE ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c && c == DecompositionType.DECOMPOSABLE ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 12

69
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { computeMillis ( c , c ) ; } else { validateObjectPattern ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { computeMillis ( c , c ) ; } else { validateObjectPattern ( c , c ) ; }
Distance : 8

70
Tree	if ( c >= NUMBER_CONSTANT ) { sb = DateTimeFormat - residual ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = DateTimeFormat - residual ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Distance : 12

71
Tree	if ( c >= NUMBER_CONSTANT ) { sb = DateTimeFormat - residual ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = DateTimeFormat - residual ; } else { sb . append ( c ) ; }
Distance : 14

72
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Distance : 9

73
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { g0Positive . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { g0Positive . append ( c ) ; }
Distance : 10

74
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { StrBuilder . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { StrBuilder . append ( c ) ; }
Distance : 8

75
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { warningsPrinter . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { warningsPrinter . append ( c ) ; }
Distance : 9

76
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = Reach.LOCAL_ONLY ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = Reach.LOCAL_ONLY ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Distance : 8

77
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Distance : 5

78
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { StrBuilder = - c ; } else { addJsString ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { StrBuilder = - c ; } else { addJsString ( c , c ) ; }
Distance : 9

79
Tree	if ( c == StepNormalizerMode.MULTIPLES ) { sb = c - residual ; } else { sb . append ( c ) ; }
Code	if ( c == StepNormalizerMode.MULTIPLES ) { sb = c - residual ; } else { sb . append ( c ) ; }
Distance : 15

80
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb = - c ; } else { windowInExterns . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb = - c ; } else { windowInExterns . append ( c ) ; }
Distance : 11

81
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { maxGenerations . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { maxGenerations . append ( c ) ; }
Distance : 9

82
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { StrBuilder . append ( c , c ) ; } else { addJsString ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { StrBuilder . append ( c , c ) ; } else { addJsString ( c , c ) ; }
Distance : 8

83
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { StrBuilder = - c ; } else { validateObjectPattern ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { StrBuilder = - c ; } else { validateObjectPattern ( c , c ) ; }
Distance : 8

84
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { StrBuilder = - c ; } else { propertyRenaming . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { StrBuilder = - c ; } else { propertyRenaming . append ( c ) ; }
Distance : 11

85
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb = - c ; } else { maxGenerations . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb = - c ; } else { maxGenerations . append ( c ) ; }
Distance : 11

86
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { ownerFunction . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { ownerFunction . append ( c , c ) ; }
Distance : 6

87
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { canRemoveExterns . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { canRemoveExterns . append ( c , c ) ; }
Distance : 11

88
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { validateObjectPattern ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { validateObjectPattern ( c , c ) ; }
Distance : 7

89
Tree	if ( c >= NUMBER_CONSTANT ) { sb = DateTimeFormat - residual ; } else { StrBuilder . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = DateTimeFormat - residual ; } else { StrBuilder . append ( c ) ; }
Distance : 14

90
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { StrBuilder . append ( c ) ; } else { visitCode ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { StrBuilder . append ( c ) ; } else { visitCode ( c , c ) ; }
Distance : 5

91
Tree	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.MIN_VALUE ) { sb . append ( c , c ) ; } else { addJsString ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.MIN_VALUE ) { sb . append ( c , c ) ; } else { addJsString ( c , c ) ; }
Distance : 8

92
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { execFinally . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { execFinally . append ( c ) ; }
Distance : 8

93
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb = - c ; } else { StrBuilder . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb = - c ; } else { StrBuilder . append ( c ) ; }
Distance : 11

94
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = metadata.superClassNameNode ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = metadata.superClassNameNode ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Distance : 8

95
Tree	if ( c >= NUMBER_CONSTANT ) { sb = DateTimeFormat - right ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = DateTimeFormat - right ; } else { sb . append ( c ) ; }
Distance : 14

96
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Distance : 6

97
Tree	if ( c == StepNormalizerMode.MULTIPLES ) { sb = c - right ; } else { sb . append ( c ) ; }
Code	if ( c == StepNormalizerMode.MULTIPLES ) { sb = c - right ; } else { sb . append ( c ) ; }
Distance : 15

98
Tree	if ( c >= NUMBER_CONSTANT ) { sb = DateTimeFormat - right ; } else { StrBuilder . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = DateTimeFormat - right ; } else { StrBuilder . append ( c ) ; }
Distance : 14

99
Tree	if ( c && c == StepNormalizerMode.MULTIPLES ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c && c == StepNormalizerMode.MULTIPLES ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 12

100
Tree	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.MIN_VALUE ) { sb = Double.NaN ; } else { validateObjectPattern ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.MIN_VALUE ) { sb = Double.NaN ; } else { validateObjectPattern ( c , c ) ; }
Distance : 11

101
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { tmp . append ( c , c ) ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { tmp . append ( c , c ) ; } else { sb . append ( c ) ; }
Distance : 9

102
Tree	if ( c >= NUMBER_CONSTANT ) { sb = DateTimeFormat - closureRequire ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = DateTimeFormat - closureRequire ; } else { sb . append ( c ) ; }
Distance : 14

103
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { StrBuilder . append ( c , c ) ; } else { validateObjectPattern ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { StrBuilder . append ( c , c ) ; } else { validateObjectPattern ( c , c ) ; }
Distance : 8

104
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { StrBuilder . append ( c ) ; } else { StrBuilder . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { StrBuilder . append ( c ) ; } else { StrBuilder . append ( c , c ) ; }
Distance : 7

105
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { propertyRenaming . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { propertyRenaming . append ( c ) ; }
Distance : 11

106
Tree	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.NaN ) { sb . append ( c , c ) ; } else { validateObjectPattern ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.NaN ) { sb . append ( c , c ) ; } else { validateObjectPattern ( c , c ) ; }
Distance : 8

107
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { StrBuilder = Long.MAX_VALUE ; } else { propertyRenaming . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { StrBuilder = Long.MAX_VALUE ; } else { propertyRenaming . append ( c , c ) ; }
Distance : 12

108
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { StrBuilder = Reach.LOCAL_ONLY ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { StrBuilder = Reach.LOCAL_ONLY ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Distance : 9

109
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { StrBuilder = - c ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { StrBuilder = - c ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Distance : 8

110
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { DateTimeFormat ( c , c ) ; } else { addJsString ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { DateTimeFormat ( c , c ) ; } else { addJsString ( c , c ) ; }
Distance : 8

111
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { extraInterfacesValidated . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { extraInterfacesValidated . append ( c ) ; }
Distance : 11

112
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { StrBuilder = - c ; } else { execFinally . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { StrBuilder = - c ; } else { execFinally . append ( c ) ; }
Distance : 10

113
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { propertyRenaming . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { propertyRenaming . append ( c , c ) ; }
Distance : 11

114
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { addJsString ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { addJsString ( c , c ) ; }
Distance : 7

115
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = metadata.superClassNameNode ; } else { propertyRenaming . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = metadata.superClassNameNode ; } else { propertyRenaming . append ( c , c ) ; }
Distance : 11

116
Tree	if ( c == PropertyRenamingPolicy.ALL_UNQUOTED ) { sb = c - residual ; } else { sb . append ( c ) ; }
Code	if ( c == PropertyRenamingPolicy.ALL_UNQUOTED ) { sb = c - residual ; } else { sb . append ( c ) ; }
Distance : 15

117
Tree	if ( c >= NUMBER_CONSTANT ) { sb = DateTimeFormat - residual ; } else { execFinally . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = DateTimeFormat - residual ; } else { execFinally . append ( c ) ; }
Distance : 14

118
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { visitCode ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { visitCode ( c , c ) ; }
Distance : 6

119
Tree	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Calendar.JANUARY ) { sb . append ( c , c ) ; } else { addJsString ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Calendar.JANUARY ) { sb . append ( c , c ) ; } else { addJsString ( c , c ) ; }
Distance : 8

120
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Distance : 8

121
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Distance : 9

122
Tree	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.NaN ) { sb . append ( c , c ) ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.NaN ) { sb . append ( c , c ) ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Distance : 8

123
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { nextTime . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { nextTime . append ( c ) ; }
Distance : 10

124
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Distance : 8

125
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { StrBuilder . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { StrBuilder . append ( c ) ; }
Distance : 9

126
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { DateTimeFormat ( c , c ) ; } else { visitCode ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { DateTimeFormat ( c , c ) ; } else { visitCode ( c , c ) ; }
Distance : 8

127
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { DateTimeFormat ( c , c ) ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { DateTimeFormat ( c , c ) ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Distance : 8

128
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { StrBuilder . append ( c , c ) ; } else { validateObjectPattern ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { StrBuilder . append ( c , c ) ; } else { validateObjectPattern ( c , c ) ; }
Distance : 7

129
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { StrBuilder . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { StrBuilder . append ( c , c ) ; }
Distance : 6

130
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { visitCode ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { visitCode ( c , c ) ; }
Distance : 7

131
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb = - c ; } else { warningsPrinter . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb = - c ; } else { warningsPrinter . append ( c ) ; }
Distance : 11

132
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { reportLooseTypeViolations . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { reportLooseTypeViolations . append ( c , c ) ; }
Distance : 11

133
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = Reach.LOCAL_ONLY ; } else { addJsString ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = Reach.LOCAL_ONLY ; } else { addJsString ( c , c ) ; }
Distance : 8

134
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Distance : 6

135
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { validateObjectPattern ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { validateObjectPattern ( c , c ) ; }
Distance : 7

136
Tree	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.NaN ) { sb = Double.NaN ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.NaN ) { sb = Double.NaN ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Distance : 11

137
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { validateObjectPattern ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { validateObjectPattern ( c , c ) ; }
Distance : 6

138
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { StrBuilder = - c ; } else { extraInterfacesValidated . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { StrBuilder = - c ; } else { extraInterfacesValidated . append ( c ) ; }
Distance : 11

139
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { DateTimeFormat ( c , c ) ; } else { validateObjectPattern ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { DateTimeFormat ( c , c ) ; } else { validateObjectPattern ( c , c ) ; }
Distance : 8

140
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Double.NaN ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Double.NaN ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Distance : 9

141
Tree	if ( c && c == current.parent.scopes ) { sb = - c ; } else { sb . append ( c ) ; }
Code	if ( c && c == current.parent.scopes ) { sb = - c ; } else { sb . append ( c ) ; }
Distance : 12

142
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { ownerFunction . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { ownerFunction . append ( c ) ; }
Distance : 9

143
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { StrBuilder . append ( c , c ) ; } else { StrBuilder . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { StrBuilder . append ( c , c ) ; } else { StrBuilder . append ( c ) ; }
Distance : 9

144
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { addJsString ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { addJsString ( c , c ) ; }
Distance : 6

145
Tree	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.MIN_VALUE ) { sb = Double.NaN ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.MIN_VALUE ) { sb = Double.NaN ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Distance : 11

146
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { DateTimeFormat . append ( c , c ) ; } else { sb . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { DateTimeFormat . append ( c , c ) ; } else { sb . append ( c ) ; }
Distance : 9

147
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { StrBuilder = - c ; } else { visitCode ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { StrBuilder = - c ; } else { visitCode ( c , c ) ; }
Distance : 9

148
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { StrBuilder = - c ; } else { addJsString ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { StrBuilder = - c ; } else { addJsString ( c , c ) ; }
Distance : 8

149
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { StrBuilder . append ( c ) ; } else { execFinally . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { StrBuilder . append ( c ) ; } else { execFinally . append ( c , c ) ; }
Distance : 7

150
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { StrBuilder = - c ; } else { visitCode ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { StrBuilder = - c ; } else { visitCode ( c , c ) ; }
Distance : 8

151
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { addJsString ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { addJsString ( c , c ) ; }
Distance : 4

152
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { windowInExterns . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { windowInExterns . append ( c ) ; }
Distance : 9

153
Tree	if ( c >= NUMBER_CONSTANT ) { sb = DateTimeFormat - residual ; } else { validateObjectPattern ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = DateTimeFormat - residual ; } else { validateObjectPattern ( c , c ) ; }
Distance : 12

154
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Double.NaN ; } else { validateObjectPattern ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Double.NaN ; } else { validateObjectPattern ( c , c ) ; }
Distance : 9

155
Tree	if ( c >= NUMBER_CONSTANT ) { sb = DateTimeFormat - right ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = DateTimeFormat - right ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Distance : 12

156
Tree	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Calendar.JANUARY ) { sb = Double.NaN ; } else { validateObjectPattern ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Calendar.JANUARY ) { sb = Double.NaN ; } else { validateObjectPattern ( c , c ) ; }
Distance : 11

157
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { StrBuilder . append ( c , c ) ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { StrBuilder . append ( c , c ) ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Distance : 7

158
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { extraInterfacesValidated . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { extraInterfacesValidated . append ( c ) ; }
Distance : 11

159
Tree	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Calendar.JANUARY ) { sb . append ( c , c ) ; } else { validateObjectPattern ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Calendar.JANUARY ) { sb . append ( c , c ) ; } else { validateObjectPattern ( c , c ) ; }
Distance : 8

160
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { canRemoveExterns . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { canRemoveExterns . append ( c ) ; }
Distance : 11

161
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { extraInterfacesValidated . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { extraInterfacesValidated . append ( c , c ) ; }
Distance : 11

162
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Double.NaN ; } else { addJsString ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Double.NaN ; } else { addJsString ( c , c ) ; }
Distance : 9

163
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = TypeInferenceMode.DISABLED ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = TypeInferenceMode.DISABLED ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Distance : 8

164
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Distance : 4

165
Tree	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Calendar.JANUARY ) { sb . append ( c , c ) ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Calendar.JANUARY ) { sb . append ( c , c ) ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Distance : 8

166
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Double.NaN ; } else { visitCode ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Double.NaN ; } else { visitCode ( c , c ) ; }
Distance : 9

167
Tree	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Calendar.JANUARY ) { sb = Double.NaN ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Calendar.JANUARY ) { sb = Double.NaN ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Distance : 11

168
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { visitCode ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { visitCode ( c , c ) ; }
Distance : 6

169
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { ownerFunction . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { ownerFunction . append ( c ) ; }
Distance : 8

170
Tree	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.MIN_VALUE ) { sb = Double.NaN ; } else { addJsString ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.MIN_VALUE ) { sb = Double.NaN ; } else { addJsString ( c , c ) ; }
Distance : 11

171
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { StrBuilder = Double.NaN ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { StrBuilder = Double.NaN ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Distance : 10

172
Tree	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.MIN_VALUE ) { sb . append ( c , c ) ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.MIN_VALUE ) { sb . append ( c , c ) ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Distance : 8

173
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { execFinally . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb . append ( c ) ; } else { execFinally . append ( c , c ) ; }
Distance : 6

174
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { visitCode ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb . append ( c , c ) ; } else { visitCode ( c , c ) ; }
Distance : 5

175
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { declare ( c , c ) ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { declare ( c , c ) ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Distance : 8

176
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { propertyRenaming . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { propertyRenaming . append ( c ) ; }
Distance : 11

177
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { StrBuilder . append ( c , c ) ; } else { validateObjectPattern ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { StrBuilder . append ( c , c ) ; } else { validateObjectPattern ( c , c ) ; }
Distance : 7

178
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { StrBuilder . append ( c , c ) ; } else { addJsString ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { StrBuilder . append ( c , c ) ; } else { addJsString ( c , c ) ; }
Distance : 7

179
Tree	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.NaN ) { sb = Double.NaN ; } else { validateObjectPattern ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.NaN ) { sb = Double.NaN ; } else { validateObjectPattern ( c , c ) ; }
Distance : 11

180
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { StrBuilder = Double.NaN ; } else { validateObjectPattern ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { StrBuilder = Double.NaN ; } else { validateObjectPattern ( c , c ) ; }
Distance : 10

181
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Distance : 9

182
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { StrBuilder = Double.NaN ; } else { addJsString ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { StrBuilder = Double.NaN ; } else { addJsString ( c , c ) ; }
Distance : 10

183
Tree	if ( c >= NUMBER_CONSTANT ) { sb = DateTimeFormat - right ; } else { validateObjectPattern ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = DateTimeFormat - right ; } else { validateObjectPattern ( c , c ) ; }
Distance : 12

184
Tree	if ( c && c == sample2.length ) { sb = StringUtils.EMPTY ; } else { propertyRenaming . append ( c ) ; }
Code	if ( c && c == sample2.length ) { sb = StringUtils.EMPTY ; } else { propertyRenaming . append ( c ) ; }
Distance : 13

185
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { propertyRenaming . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = StringUtils.EMPTY ; } else { propertyRenaming . append ( c , c ) ; }
Distance : 11

186
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { StrBuilder = Long.MAX_VALUE ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { StrBuilder = Long.MAX_VALUE ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Distance : 10

187
Tree	if ( c >= NUMBER_CONSTANT ) { sb = DateTimeFormat - closureRequire ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = DateTimeFormat - closureRequire ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Distance : 12

188
Tree	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { StrBuilder . append ( c , c ) ; } else { visitCode ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c >= NUMBER_CONSTANT ) { StrBuilder . append ( c , c ) ; } else { visitCode ( c , c ) ; }
Distance : 7

189
Tree	if ( c >= NUMBER_CONSTANT ) { sb = DateTimeFormat - residual ; } else { visitCode ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = DateTimeFormat - residual ; } else { visitCode ( c , c ) ; }
Distance : 12

190
Tree	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { visitCode ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c != null ) { sb . append ( c , c ) ; } else { visitCode ( c , c ) ; }
Distance : 7

191
Tree	if ( c >= NUMBER_CONSTANT ) { sb = DateTimeFormat - iMillis ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = DateTimeFormat - iMillis ; } else { updateCovarianceDiagonalOnly ( c , c ) ; }
Distance : 12

192
Tree	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.MIN_VALUE ) { sb . append ( c , c ) ; } else { validateObjectPattern ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && Double.MIN_VALUE == Double.MIN_VALUE ) { sb . append ( c , c ) ; } else { validateObjectPattern ( c , c ) ; }
Distance : 8

193
Tree	if ( c >= NUMBER_CONSTANT ) { sb = DateTimeFormat - right ; } else { visitCode ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT ) { sb = DateTimeFormat - right ; } else { visitCode ( c , c ) ; }
Distance : 12

194
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { extraInterfacesValidated . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = Long.MAX_VALUE ; } else { extraInterfacesValidated . append ( c , c ) ; }
Distance : 11

195
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { warningsPrinter . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { sb = - c ; } else { warningsPrinter . append ( c ) ; }
Distance : 10

196
Tree	if ( c && c == ConstCheck.CONST_REASSIGNED_VALUE_ERROR ) { sb = StringUtils.EMPTY ; } else { extraInterfacesValidated . append ( c ) ; }
Code	if ( c && c == ConstCheck.CONST_REASSIGNED_VALUE_ERROR ) { sb = StringUtils.EMPTY ; } else { extraInterfacesValidated . append ( c ) ; }
Distance : 13

197
Tree	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { execFinally . append ( c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c < NUMBER_CONSTANT ) { sb = - c ; } else { execFinally . append ( c ) ; }
Distance : 9

198
Tree	if ( c && c == startConfiguration.length ) { sb = StringUtils.EMPTY ; } else { extraInterfacesValidated . append ( c ) ; }
Code	if ( c && c == startConfiguration.length ) { sb = StringUtils.EMPTY ; } else { extraInterfacesValidated . append ( c ) ; }
Distance : 13

199
Tree	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { StrBuilder . append ( c ) ; } else { sb . append ( c , c ) ; }
Code	if ( c >= NUMBER_CONSTANT && c <= NUMBER_CONSTANT ) { StrBuilder . append ( c ) ; } else { sb . append ( c , c ) ; }
Distance : 7

========================================================================


========================================================================
Example Number: 20
Parent Code is: 
{ defineSlot ( astParameter , functionNode , jsDocParameter . getJSType () , true ) ; jsDocParameter = jsDocParameter . getNext () ; }
-------------------------------------------------------------------------------
Child code is: 
{ defineSlot ( astParameter , functionNode , jsDocParameter . getJSType () , false ) ; jsDocParameter = jsDocParameter . getNext () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=defineSlot}) (214{val=(}) (800{val=astParameter}) (234{val=,}) (800{val=functionNode}) (234{val=,}) (32 (800{val=jsDocParameter}) (235{val=.}) (802{val=getJSType}) (216{val=()})) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (21 (7 (800{val=jsDocParameter}) (204{val==}) (32 (800{val=jsDocParameter}) (235{val=.}) (802{val=getNext}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=defineSlot}) (214{val=(}) (800{val=astParameter}) (234{val=,}) (800{val=functionNode}) (234{val=,}) (32 (800{val=jsDocParameter}) (235{val=.}) (802{val=getJSType}) (216{val=()})) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (21 (7 (800{val=jsDocParameter}) (204{val==}) (32 (800{val=jsDocParameter}) (235{val=.}) (802{val=getNext}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/70/parent/src_com_google_javascript_jscomp_TypedScopeCreator.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 11

1
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 11

2
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , true ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , true ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 7

3
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , true ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , true ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Distance : 7

4
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , true ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , true ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 7

5
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Distance : 11

6
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , true ) ; nodeToRename = rootTypesByNode . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , true ) ; nodeToRename = rootTypesByNode . getNext () ; }
Distance : 7

7
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , true ) ; nodeToRename = SLOPPY . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , true ) ; nodeToRename = SLOPPY . getNext () ; }
Distance : 7

8
Tree	{ rhs . defineSlot ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR , rvalue . getJSType () ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ rhs . defineSlot ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR , rvalue . getJSType () ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 9

9
Tree	{ rhs . defineSlot () . getJSType ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , NUMBER_CONSTANT ) ; nodeToRename = SLOPPY . getNext () ; }
Code	{ rhs . defineSlot () . getJSType ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , NUMBER_CONSTANT ) ; nodeToRename = SLOPPY . getNext () ; }
Distance : 12

10
Tree	{ rhs . defineSlot ( STRING_CONSTANT , paramType . getJSType () , MockitoConfiguration . getNext () ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ rhs . defineSlot ( STRING_CONSTANT , paramType . getJSType () , MockitoConfiguration . getNext () ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 12

11
Tree	{ rhs . defineSlot ( STRING_CONSTANT , paramType . getJSType () , varParent . getNext () ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ rhs . defineSlot ( STRING_CONSTANT , paramType . getJSType () , varParent . getNext () ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 12

12
Tree	{ rhs . defineSlot ( STRING_CONSTANT , paramType . getJSType () , MockitoConfiguration . getNext () ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ rhs . defineSlot ( STRING_CONSTANT , paramType . getJSType () , MockitoConfiguration . getNext () ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 12

13
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , VerboseMockInvocationLogger . getNext () ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , VerboseMockInvocationLogger . getNext () ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 10

14
Tree	{ rhs . defineSlot ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR , DEFAULT_RANGE_DESCRIPTION . getJSType () ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ rhs . defineSlot ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR , DEFAULT_RANGE_DESCRIPTION . getJSType () ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 9

15
Tree	{ rhs . defineSlot ( STRING_CONSTANT , paramType . getJSType () , IBar . getNext () ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ rhs . defineSlot ( STRING_CONSTANT , paramType . getJSType () , IBar . getNext () ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 12

16
Tree	{ gamma . defineSlot ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR , rvalue . getJSType () ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ gamma . defineSlot ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR , rvalue . getJSType () ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 9

17
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , VerboseMockInvocationLogger . getNext () ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , VerboseMockInvocationLogger . getNext () ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 10

18
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , rootTypesByNode . getNext () ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , rootTypesByNode . getNext () ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 8

19
Tree	{ rhs . defineSlot ( STRING_CONSTANT , paramType . getJSType () , varParent . getNext () ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ rhs . defineSlot ( STRING_CONSTANT , paramType . getJSType () , varParent . getNext () ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 12

20
Tree	{ rhs . defineSlot () . getJSType ( STRING_CONSTANT , rootTypesByNode . getNext () ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ rhs . defineSlot () . getJSType ( STRING_CONSTANT , rootTypesByNode . getNext () ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 13

21
Tree	{ rhs . defineSlot () . getJSType ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , NUMBER_CONSTANT ) ; nodeToRename = scopedNameTable . getNext () ; }
Code	{ rhs . defineSlot () . getJSType ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , NUMBER_CONSTANT ) ; nodeToRename = scopedNameTable . getNext () ; }
Distance : 12

22
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , null , rvalue . getJSType () ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , null , rvalue . getJSType () ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Distance : 9

23
Tree	{ rhs . defineSlot () . getJSType ( LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT , params . getJSType () ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ rhs . defineSlot () . getJSType ( LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT , params . getJSType () ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 12

24
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , NUMBER_CONSTANT , rvalue , NUMBER_CONSTANT , maxUlps . getNext () ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , NUMBER_CONSTANT , rvalue , NUMBER_CONSTANT , maxUlps . getNext () ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 14

25
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , varParent ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , varParent ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 9

26
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , VerboseMockInvocationLogger ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , VerboseMockInvocationLogger ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Distance : 9

27
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , rootTypesByNode . getNext () ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , rootTypesByNode . getNext () ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 8

28
Tree	{ this . iChrono . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . get () ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Code	{ this . iChrono . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . get () ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Distance : 12

29
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , outerVarPreconditions . getNext () ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , outerVarPreconditions . getNext () ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 8

30
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType , rvalue , rvalue , rvalue . getJSType () , null , null ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType , rvalue , rvalue , rvalue . getJSType () , null , null ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 12

31
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , paramType , rvalue ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , paramType , rvalue ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 11

32
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , outerVarPreconditions . getNext () ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , outerVarPreconditions . getNext () ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 8

33
Tree	{ defineSlot ( astParameter , paramType , rvalue , rvalue , NULL_TYPE . getJSType () , null , null ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ defineSlot ( astParameter , paramType , rvalue , rvalue , NULL_TYPE . getJSType () , null , null ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 11

34
Tree	{ rhs . defineSlot () ; nodeToRename = RandomGeneratorFactory . getJSType () ; }
Code	{ rhs . defineSlot () ; nodeToRename = RandomGeneratorFactory . getJSType () ; }
Distance : 14

35
Tree	{ rhs . defineSlot () ; correlationMatrix = alternatesList . getJSType () ; }
Code	{ rhs . defineSlot () ; correlationMatrix = alternatesList . getJSType () ; }
Distance : 14

36
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType , rvalue , rvalue , NULL_TYPE . getJSType () , null , null ) ; nodeToRename = rootTypesByNode . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType , rvalue , rvalue , NULL_TYPE . getJSType () , null , null ) ; nodeToRename = rootTypesByNode . getNext () ; }
Distance : 12

37
Tree	{ this . iChrono . isBuiltinObject ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . get () ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ this . iChrono . isBuiltinObject ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . get () ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 12

38
Tree	{ defineSlot ( astParameter , paramType , rvalue , rvalue , NULL_TYPE . getJSType () , null , null ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ defineSlot ( astParameter , paramType , rvalue , rvalue , NULL_TYPE . getJSType () , null , null ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 11

39
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , rootTypesByNode . getNext () ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , rootTypesByNode . getNext () ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Distance : 8

40
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , varParent . getNext () ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , varParent . getNext () ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 10

41
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , outerVarPreconditions . getNext () ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , outerVarPreconditions . getNext () ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Distance : 8

42
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , MockitoConfiguration . getNext () ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , MockitoConfiguration . getNext () ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 10

43
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType , rvalue , rvalue , NULL_TYPE . getJSType () , null , null ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType , rvalue , rvalue , NULL_TYPE . getJSType () , null , null ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Distance : 12

44
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT ) ; populated = dateTimeField . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT ) ; populated = dateTimeField . getNext () ; }
Distance : 11

45
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType , rvalue , rvalue , NULL_TYPE . getJSType () , null , null ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType , rvalue , rvalue , NULL_TYPE . getJSType () , null , null ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 12

46
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , varParent . getNext () ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , varParent . getNext () ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 10

47
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType , rvalue , rvalue , rvalue . getJSType () , null , null ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType , rvalue , rvalue , rvalue . getJSType () , null , null ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 12

48
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , paramType , rvalue ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , paramType , rvalue ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Distance : 11

49
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , params , rvalue ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , params , rvalue ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 11

50
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , VerboseMockInvocationLogger . getNext () ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , VerboseMockInvocationLogger . getNext () ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Distance : 10

51
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT ) ; nodeToRename = scopedNameTable . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT ) ; nodeToRename = scopedNameTable . getNext () ; }
Distance : 11

52
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT ) ; populated = renamerStack . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT ) ; populated = renamerStack . getNext () ; }
Distance : 11

53
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , MockitoConfiguration . getNext () ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , MockitoConfiguration . getNext () ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 10

54
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT , outerVarPreconditions . getNext () ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT , outerVarPreconditions . getNext () ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 11

55
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT , VerboseMockInvocationLogger . getNext () ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT , VerboseMockInvocationLogger . getNext () ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 11

56
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , this ) ; nodeToRename = SLOPPY . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , this ) ; nodeToRename = SLOPPY . getNext () ; }
Distance : 9

57
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , params . getJSType () , this ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , params . getJSType () , this ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 9

58
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT , outerVarPreconditions . getNext () ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT , outerVarPreconditions . getNext () ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 11

59
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , this ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , this ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 9

60
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType , rvalue , rvalue , NULL_TYPE . getJSType () , null , null ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType , rvalue , rvalue , NULL_TYPE . getJSType () , null , null ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 12

61
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT ) ; nodeToRename = rootTypesByNode . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT ) ; nodeToRename = rootTypesByNode . getNext () ; }
Distance : 9

62
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , changeScopeRoot . getNext () ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , changeScopeRoot . getNext () ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 8

63
Tree	{ this . iChrono . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . get () ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ this . iChrono . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . get () ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 12

64
Tree	{ this . iChrono . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . get () ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ this . iChrono . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . get () ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 12

65
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , this ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , this ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Distance : 9

66
Tree	{ this . propName . isBuiltinObject ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . get () ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ this . propName . isBuiltinObject ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . get () ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 12

67
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT ) ; nodeToRename = SLOPPY . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT ) ; nodeToRename = SLOPPY . getNext () ; }
Distance : 11

68
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT , VerboseMockInvocationLogger . getNext () ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT , VerboseMockInvocationLogger . getNext () ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 11

69
Tree	{ rhs . defineSlot () ; correlationMatrix = RandomGeneratorFactory . getJSType () ; }
Code	{ rhs . defineSlot () ; correlationMatrix = RandomGeneratorFactory . getJSType () ; }
Distance : 14

70
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT , rootTypesByNode . getNext () ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT , rootTypesByNode . getNext () ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 11

71
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT , rootTypesByNode . getNext () ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT , rootTypesByNode . getNext () ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 11

72
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 9

73
Tree	{ rhs . defineSlot ( STRING_CONSTANT , paramType . getJSType () , VerboseMockInvocationLogger . getNext () ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ rhs . defineSlot ( STRING_CONSTANT , paramType . getJSType () , VerboseMockInvocationLogger . getNext () ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 12

74
Tree	{ gamma . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ gamma . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 11

75
Tree	{ rhs . defineSlot () . getJSType ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , NUMBER_CONSTANT ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ rhs . defineSlot () . getJSType ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , NUMBER_CONSTANT ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 12

76
Tree	{ rhs . defineSlot ( STRING_CONSTANT , paramType . getJSType () , VerboseMockInvocationLogger . getNext () ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ rhs . defineSlot ( STRING_CONSTANT , paramType . getJSType () , VerboseMockInvocationLogger . getNext () ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 12

77
Tree	{ rhs . defineSlot () . getJSType ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , NUMBER_CONSTANT ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ rhs . defineSlot () . getJSType ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , NUMBER_CONSTANT ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 12

78
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT ) ; arraylit = rootTypesByNode . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT ) ; arraylit = rootTypesByNode . getNext () ; }
Distance : 9

79
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT , ctorNode . getNext () ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT , ctorNode . getNext () ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 11

80
Tree	{ rhs . defineSlot () . getJSType ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , NUMBER_CONSTANT ) ; nodeToRename = rootTypesByNode . getNext () ; }
Code	{ rhs . defineSlot () . getJSType ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , NUMBER_CONSTANT ) ; nodeToRename = rootTypesByNode . getNext () ; }
Distance : 12

81
Tree	{ rhs . defineSlot () . getJSType ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR ) ; nodeToRename = SLOPPY . getNext () ; }
Code	{ rhs . defineSlot () . getJSType ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR ) ; nodeToRename = SLOPPY . getNext () ; }
Distance : 12

82
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , params , rvalue ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , params , rvalue ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Distance : 11

83
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT ) ; populated = inverseCumAccuracy . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT ) ; populated = inverseCumAccuracy . getNext () ; }
Distance : 9

84
Tree	{ rhs . defineSlot ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR , rvalue . getJSType () ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ rhs . defineSlot ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR , rvalue . getJSType () ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 9

85
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , params . getJSType () , this ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , params . getJSType () , this ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 9

86
Tree	{ rhs . defineSlot () . getJSType ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ rhs . defineSlot () . getJSType ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 12

87
Tree	{ rhs . defineSlot ( STRING_CONSTANT , paramType . getJSType () , VerboseMockInvocationLogger . getNext () ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Code	{ rhs . defineSlot ( STRING_CONSTANT , paramType . getJSType () , VerboseMockInvocationLogger . getNext () ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Distance : 12

88
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , paramType , rvalue ) ; nodeToRename = rootTypesByNode . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , paramType , rvalue ) ; nodeToRename = rootTypesByNode . getNext () ; }
Distance : 11

89
Tree	{ rhs . defineSlot () . getJSType ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ rhs . defineSlot () . getJSType ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 12

90
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT ) ; populated = dateTimeField . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT ) ; populated = dateTimeField . getNext () ; }
Distance : 9

91
Tree	{ defineSlot ( astParameter . copySelf () , paramType , rvalue ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ defineSlot ( astParameter . copySelf () , paramType , rvalue ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 10

92
Tree	{ gamma . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , this ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ gamma . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , this ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 9

93
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , null , rvalue . getJSType () ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , null , rvalue . getJSType () ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 9

94
Tree	{ rhs . defineSlot () . getJSType ( STRING_CONSTANT , VerboseMockInvocationLogger . getNext () ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ rhs . defineSlot () . getJSType ( STRING_CONSTANT , VerboseMockInvocationLogger . getNext () ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 13

95
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , VerboseMockInvocationLogger ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , VerboseMockInvocationLogger ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 9

96
Tree	{ rhs . defineSlot () . getJSType ( STRING_CONSTANT , VerboseMockInvocationLogger . getNext () ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ rhs . defineSlot () . getJSType ( STRING_CONSTANT , VerboseMockInvocationLogger . getNext () ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 13

97
Tree	{ rhs . defineSlot () ; correlationMatrix = rootTypesByNode . getJSType () ; }
Code	{ rhs . defineSlot () ; correlationMatrix = rootTypesByNode . getJSType () ; }
Distance : 14

98
Tree	{ this . iChrono . isBuiltinObject ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . get () ) ; arraylit = renamerStack . getNext () ; }
Code	{ this . iChrono . isBuiltinObject ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . get () ) ; arraylit = renamerStack . getNext () ; }
Distance : 12

99
Tree	{ rhs . defineSlot () ; correlationMatrix = RandomGeneratorFactory . getSecondChild () ; }
Code	{ rhs . defineSlot () ; correlationMatrix = RandomGeneratorFactory . getSecondChild () ; }
Distance : 14

100
Tree	{ rhs . defineSlot () . getJSType ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , NUMBER_CONSTANT ) ; nodeToRename = builtinObj . getNext () ; }
Code	{ rhs . defineSlot () . getJSType ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , NUMBER_CONSTANT ) ; nodeToRename = builtinObj . getNext () ; }
Distance : 12

101
Tree	{ rhs . defineSlot () . getJSType ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , NUMBER_CONSTANT ) ; nodeToRename = RandomGeneratorFactory . getNext () ; }
Code	{ rhs . defineSlot () . getJSType ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , NUMBER_CONSTANT ) ; nodeToRename = RandomGeneratorFactory . getNext () ; }
Distance : 12

102
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , paramType , rvalue ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , paramType , rvalue ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 11

103
Tree	{ rhs . defineSlot () ; correlationMatrix = dateTimeField . getNext () ; }
Code	{ rhs . defineSlot () ; correlationMatrix = dateTimeField . getNext () ; }
Distance : 13

104
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , this ) ; g0Positive = dateTimeField . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , this ) ; g0Positive = dateTimeField . getNext () ; }
Distance : 9

105
Tree	{ rhs . defineSlot () ; correlationMatrix = alternatesList . getSecondChild () ; }
Code	{ rhs . defineSlot () ; correlationMatrix = alternatesList . getSecondChild () ; }
Distance : 14

106
Tree	{ rhs . defineSlot () . getJSType ( LocalizedFormats.NOT_POSITIVE_ALPHA , params . getJSType () ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ rhs . defineSlot () . getJSType ( LocalizedFormats.NOT_POSITIVE_ALPHA , params . getJSType () ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 12

107
Tree	{ rhs . defineSlot ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR , rvalue . getJSType () ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Code	{ rhs . defineSlot ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR , rvalue . getJSType () ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Distance : 9

108
Tree	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , changeScopeRoot . getNext () ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ defineSlot ( STRING_CONSTANT , STRING_CONSTANT , changeScopeRoot . getNext () ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 8

109
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; g0Positive = dateTimeField . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; g0Positive = dateTimeField . getNext () ; }
Distance : 11

110
Tree	{ rhs . defineSlot () . getJSType ( LocalizedFormats.NO_RESULT_AVAILABLE , params . getJSType () ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ rhs . defineSlot () . getJSType ( LocalizedFormats.NO_RESULT_AVAILABLE , params . getJSType () ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 12

111
Tree	{ rhs . defineSlot ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR , DEFAULT_RANGE_DESCRIPTION . getJSType () ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ rhs . defineSlot ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR , DEFAULT_RANGE_DESCRIPTION . getJSType () ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 9

112
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , varParent . getNext () ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , varParent . getNext () ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Distance : 10

113
Tree	{ rhs . defineSlot () . getJSType ( LocalizedFormats.NOT_POSITIVE_ALPHA , params . getJSType () ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ rhs . defineSlot () . getJSType ( LocalizedFormats.NOT_POSITIVE_ALPHA , params . getJSType () ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 12

114
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; g0Positive = renamerStack . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; g0Positive = renamerStack . getNext () ; }
Distance : 11

115
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 11

116
Tree	{ defineSlot ( astParameter , paramType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ defineSlot ( astParameter , paramType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 10

117
Tree	{ defineSlot ( astParameter , paramType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ defineSlot ( astParameter , paramType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 10

118
Tree	{ rhs . defineSlot () ; correlationMatrix = rootTypesByNode . getSecondChild () ; }
Code	{ rhs . defineSlot () ; correlationMatrix = rootTypesByNode . getSecondChild () ; }
Distance : 14

119
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , this ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , this ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 9

120
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; nodeToRename = SLOPPY . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; nodeToRename = SLOPPY . getNext () ; }
Distance : 11

121
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT , rootTypesByNode . getNext () ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT , rootTypesByNode . getNext () ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Distance : 11

122
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , true ) ; nodeToRename = scopedNameTable . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , true ) ; nodeToRename = scopedNameTable . getNext () ; }
Distance : 7

123
Tree	{ gamma . defineSlot ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR , rvalue . getJSType () ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ gamma . defineSlot ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR , rvalue . getJSType () ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 9

124
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Distance : 11

125
Tree	{ defineSlot ( astParameter , paramType . getJSType () , true ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ defineSlot ( astParameter , paramType . getJSType () , true ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 6

126
Tree	{ rhs . defineSlot ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR , rvalue . getJSType () ) ; nodeToRename = rootTypesByNode . getNext () ; }
Code	{ rhs . defineSlot ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR , rvalue . getJSType () ) ; nodeToRename = rootTypesByNode . getNext () ; }
Distance : 9

127
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 11

128
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , null , rvalue . getJSType () ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , null , rvalue . getJSType () ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 9

129
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , true ) ; nodeToRename = builtinObj . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , true ) ; nodeToRename = builtinObj . getNext () ; }
Distance : 7

130
Tree	{ this . iChrono . isBuiltinObject ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . get () ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ this . iChrono . isBuiltinObject ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . get () ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 12

131
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT ) ; nodeToRename = rootTypesByNode . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT ) ; nodeToRename = rootTypesByNode . getNext () ; }
Distance : 11

132
Tree	{ rhs . defineSlot () . getJSType ( LocalizedFormats.NO_RESULT_AVAILABLE , params . getJSType () ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ rhs . defineSlot () . getJSType ( LocalizedFormats.NO_RESULT_AVAILABLE , params . getJSType () ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 12

133
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , NUMBER_CONSTANT , rvalue , NUMBER_CONSTANT , maxUlps . getNext () ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , NUMBER_CONSTANT , rvalue , NUMBER_CONSTANT , maxUlps . getNext () ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 14

134
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType , rvalue , rvalue , NULL_TYPE . getJSType () , MockitoConfiguration . getNext () , VerboseMockInvocationLogger ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType , rvalue , rvalue , NULL_TYPE . getJSType () , MockitoConfiguration . getNext () , VerboseMockInvocationLogger ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 15

135
Tree	{ rhs . defineSlot () . getJSType ( STRING_CONSTANT , rootTypesByNode . getNext () ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ rhs . defineSlot () . getJSType ( STRING_CONSTANT , rootTypesByNode . getNext () ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 13

136
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , VerboseMockInvocationLogger ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , VerboseMockInvocationLogger ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 9

137
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType , rvalue , rvalue , NULL_TYPE . getJSType () , VerboseMockInvocationLogger . getNext () , VerboseMockInvocationLogger ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType , rvalue , rvalue , NULL_TYPE . getJSType () , VerboseMockInvocationLogger . getNext () , VerboseMockInvocationLogger ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Distance : 15

138
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , REACHABLE . getJSType () , VerboseMockInvocationLogger ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , REACHABLE . getJSType () , VerboseMockInvocationLogger ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 10

139
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType , rvalue , rvalue , NULL_TYPE . getJSType () , MockitoConfiguration . getNext () , VerboseMockInvocationLogger ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType , rvalue , rvalue , NULL_TYPE . getJSType () , MockitoConfiguration . getNext () , VerboseMockInvocationLogger ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Distance : 15

140
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Distance : 11

141
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , REACHABLE . getJSType () , VerboseMockInvocationLogger ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , REACHABLE . getJSType () , VerboseMockInvocationLogger ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 10

142
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , params , rvalue ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , params , rvalue ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 11

143
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , NUMBER_CONSTANT , rvalue , NUMBER_CONSTANT , maxUlps . getNext () ) ; nodeToRename = rootTypesByNode . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , NUMBER_CONSTANT , rvalue , NUMBER_CONSTANT , maxUlps . getNext () ) ; nodeToRename = rootTypesByNode . getNext () ; }
Distance : 14

144
Tree	{ rhs . defineSlot () . getJSType ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR ) ; nodeToRename = rootTypesByNode . getNext () ; }
Code	{ rhs . defineSlot () . getJSType ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR ) ; nodeToRename = rootTypesByNode . getNext () ; }
Distance : 12

145
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Distance : 9

146
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , null , rvalue . getJSType () , VerboseMockInvocationLogger , rvalue , false ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , null , rvalue . getJSType () , VerboseMockInvocationLogger , rvalue , false ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 11

147
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , null , rvalue . getJSType () , VerboseMockInvocationLogger , rvalue , false ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , null , rvalue . getJSType () , VerboseMockInvocationLogger , rvalue , false ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 11

148
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , NUMBER_CONSTANT , NULL_TYPE , NUMBER_CONSTANT , maxUlps . getNext () ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , NUMBER_CONSTANT , NULL_TYPE , NUMBER_CONSTANT , maxUlps . getNext () ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Distance : 14

149
Tree	{ this . iChrono . isBuiltinObject ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . get () ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Code	{ this . iChrono . isBuiltinObject ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . get () ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Distance : 12

150
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , null , NULL_TYPE . getJSType () ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , null , NULL_TYPE . getJSType () ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 9

151
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 11

152
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType , rvalue , rvalue , NULL_TYPE . getJSType () , varParent . getNext () , VerboseMockInvocationLogger ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType , rvalue , rvalue , NULL_TYPE . getJSType () , varParent . getNext () , VerboseMockInvocationLogger ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 15

153
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , null , rvalue . getJSType () , varParent , rvalue , false ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , null , rvalue . getJSType () , varParent , rvalue , false ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 11

154
Tree	{ rhs . defineSlot () . getJSType ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Code	{ rhs . defineSlot () . getJSType ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Distance : 12

155
Tree	{ rhs . defineSlot () . getJSType ( LocalizedFormats.NOT_POSITIVE_ALPHA , params . getJSType () ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Code	{ rhs . defineSlot () . getJSType ( LocalizedFormats.NOT_POSITIVE_ALPHA , params . getJSType () ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Distance : 12

156
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , null , rvalue . getJSType () , MockitoConfiguration , rvalue , false ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , null , rvalue . getJSType () , MockitoConfiguration , rvalue , false ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 11

157
Tree	{ rhs . defineSlot () . getJSType ( LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT , params . getJSType () ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ rhs . defineSlot () . getJSType ( LocalizedFormats.NEGATIVE_BRIGHTNESS_EXPONENT , params . getJSType () ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 12

158
Tree	{ rhs . defineSlot () . getJSType ( STRING_CONSTANT , CANNOT_CONVERT_YET . getNext () ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ rhs . defineSlot () . getJSType ( STRING_CONSTANT , CANNOT_CONVERT_YET . getNext () ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 13

159
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 9

160
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 11

161
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , null , rvalue . getJSType () , VerboseMockInvocationLogger , DEFAULT_ROW_SUFFIX , false ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , null , rvalue . getJSType () , VerboseMockInvocationLogger , DEFAULT_ROW_SUFFIX , false ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 11

162
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , null , NULL_TYPE . getJSType () , VerboseMockInvocationLogger , rvalue , false ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , null , NULL_TYPE . getJSType () , VerboseMockInvocationLogger , rvalue , false ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 11

163
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT ) ; populated = rootTypesByNode . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , STRING_CONSTANT ) ; populated = rootTypesByNode . getNext () ; }
Distance : 9

164
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , null , rvalue . getJSType () , VerboseMockInvocationLogger , NULL_TYPE , false ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , null , rvalue . getJSType () , VerboseMockInvocationLogger , NULL_TYPE , false ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 11

165
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , null , rvalue . getJSType () , varParent , rvalue , false ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , null , rvalue . getJSType () , varParent , rvalue , false ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 11

166
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , renamerStack . getJSType () , VerboseMockInvocationLogger ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , renamerStack . getJSType () , VerboseMockInvocationLogger ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 10

167
Tree	{ rhs . defineSlot () . getJSType ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR ) ; nodeToRename = scopedNameTable . getNext () ; }
Code	{ rhs . defineSlot () . getJSType ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR ) ; nodeToRename = scopedNameTable . getNext () ; }
Distance : 12

168
Tree	{ rhs . defineSlot () . getJSType ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR ) ; nodeToRename = builtinObj . getNext () ; }
Code	{ rhs . defineSlot () . getJSType ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR ) ; nodeToRename = builtinObj . getNext () ; }
Distance : 12

169
Tree	{ rhs . defineSlot () . getJSType ( STRING_CONSTANT , ctorNode . getNext () ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ rhs . defineSlot () . getJSType ( STRING_CONSTANT , ctorNode . getNext () ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 13

170
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType , rvalue , rvalue , NULL_TYPE . getJSType () , varParent . getNext () , VerboseMockInvocationLogger ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType , rvalue , rvalue , NULL_TYPE . getJSType () , varParent . getNext () , VerboseMockInvocationLogger ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 15

171
Tree	{ rhs . defineSlot () . getJSType ( STRING_CONSTANT , OverlayChangeListener . getNext () ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ rhs . defineSlot () . getJSType ( STRING_CONSTANT , OverlayChangeListener . getNext () ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 13

172
Tree	{ gamma . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , NUMBER_CONSTANT , rvalue , NUMBER_CONSTANT , maxUlps . getNext () ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ gamma . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , NUMBER_CONSTANT , rvalue , NUMBER_CONSTANT , maxUlps . getNext () ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 14

173
Tree	{ rhs . defineSlot () . getJSType ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR ) ; nodeToRename = RandomGeneratorFactory . getNext () ; }
Code	{ rhs . defineSlot () . getJSType ( STRING_CONSTANT , ObjectPropertyStringPreprocess.STRING_LITERAL_EXPECTED_ERROR ) ; nodeToRename = RandomGeneratorFactory . getNext () ; }
Distance : 12

174
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , renamerStack . getJSType () , VerboseMockInvocationLogger ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , renamerStack . getJSType () , VerboseMockInvocationLogger ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 10

175
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , params . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , params . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 11

176
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , REACHABLE . getJSType () , VerboseMockInvocationLogger ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , REACHABLE . getJSType () , VerboseMockInvocationLogger ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Distance : 10

177
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , renamerStack . getJSType () , VerboseMockInvocationLogger ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , renamerStack . getJSType () , VerboseMockInvocationLogger ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Distance : 10

178
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , params . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , params . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 11

179
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; nodeToRename = rootTypesByNode . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; nodeToRename = rootTypesByNode . getNext () ; }
Distance : 11

180
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; nodeToRename = SLOPPY . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; nodeToRename = SLOPPY . getNext () ; }
Distance : 11

181
Tree	{ rhs . defineSlot () . getJSType ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , NUMBER_CONSTANT ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Code	{ rhs . defineSlot () . getJSType ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , NUMBER_CONSTANT ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Distance : 12

182
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , REACHABLE . getJSType () , varParent ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , REACHABLE . getJSType () , varParent ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 10

183
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , REACHABLE . getJSType () , varParent ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE . copySelf () , REACHABLE . getJSType () , varParent ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 10

184
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , null , NULL_TYPE . getJSType () ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , null , NULL_TYPE . getJSType () ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Distance : 9

185
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , null , rvalue . getJSType () ) ; nodeToRename = rootTypesByNode . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , null , rvalue . getJSType () ) ; nodeToRename = rootTypesByNode . getNext () ; }
Distance : 9

186
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , NUMBER_CONSTANT , NULL_TYPE , NUMBER_CONSTANT , maxUlps . getNext () ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , NUMBER_CONSTANT , NULL_TYPE , NUMBER_CONSTANT , maxUlps . getNext () ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 14

187
Tree	{ rhs . defineSlot () . getJSType ( STRING_CONSTANT , VerboseMockInvocationLogger . getNext () ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Code	{ rhs . defineSlot () . getJSType ( STRING_CONSTANT , VerboseMockInvocationLogger . getNext () ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Distance : 13

188
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , MockitoConfiguration ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , MockitoConfiguration ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 9

189
Tree	{ rhs . defineSlot () . getJSType ( TimeZones.GMT_ID , params . getJSType () ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ rhs . defineSlot () . getJSType ( TimeZones.GMT_ID , params . getJSType () ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 12

190
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , varParent ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , varParent ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 9

191
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , null , NULL_TYPE . getJSType () ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , null , NULL_TYPE . getJSType () ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 9

192
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , null , rvalue . getJSType () ) ; nodeToRename = SLOPPY . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , null , rvalue . getJSType () ) ; nodeToRename = SLOPPY . getNext () ; }
Distance : 9

193
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , NUMBER_CONSTANT , NULL_TYPE , NUMBER_CONSTANT , maxUlps . getNext () ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , NUMBER_CONSTANT , NULL_TYPE , NUMBER_CONSTANT , maxUlps . getNext () ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 14

194
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , varParent ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , varParent ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Distance : 9

195
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType , rvalue , rvalue , NULL_TYPE . getJSType () , VerboseMockInvocationLogger . getNext () , VerboseMockInvocationLogger ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType , rvalue , rvalue , NULL_TYPE . getJSType () , VerboseMockInvocationLogger . getNext () , VerboseMockInvocationLogger ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 15

196
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType , rvalue , rvalue , NULL_TYPE . getJSType () , VerboseMockInvocationLogger . getNext () , VerboseMockInvocationLogger ) ; nodeToRename = dateTimeField . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType , rvalue , rvalue , NULL_TYPE . getJSType () , VerboseMockInvocationLogger . getNext () , VerboseMockInvocationLogger ) ; nodeToRename = dateTimeField . getNext () ; }
Distance : 15

197
Tree	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType , rvalue , rvalue , NULL_TYPE . getJSType () , MockitoConfiguration . getNext () , VerboseMockInvocationLogger ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType , rvalue , rvalue , NULL_TYPE . getJSType () , MockitoConfiguration . getNext () , VerboseMockInvocationLogger ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 15

198
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , MockitoConfiguration ) ; nodeToRename = renamerStack . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , paramType . getJSType () , MockitoConfiguration ) ; nodeToRename = renamerStack . getNext () ; }
Distance : 9

199
Tree	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , NUMBER_CONSTANT , rvalue , NUMBER_CONSTANT , maxUlps . getNext () ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Code	{ rhs . defineSlot ( NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE , NUMBER_CONSTANT , rvalue , NUMBER_CONSTANT , maxUlps . getNext () ) ; nodeToRename = inverseCumAccuracy . getNext () ; }
Distance : 14

========================================================================


========================================================================
Example Number: 21
Parent Code is: 
if ( token != JsDocToken.LP ) { return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( token != JsDocToken.LP ) { restoreLookAhead ( token ) ; return reportTypeSyntaxWarning ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=token}) (242{val=!=}) (40{val=JsDocToken.LP})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=reportTypeSyntaxWarning}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=token}) (242{val=!=}) (40{val=JsDocToken.LP})) (215{val=)}) (8 (218{val={}) (21 (32 (802{val=restoreLookAhead}) (214{val=(}) (800{val=token}) (215{val=)})) (227{val=;})) (41 (329{val=return}) (32 (802{val=reportTypeSyntaxWarning}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/68/parent/src_com_google_javascript_jscomp_parsing_JsDocInfoParser.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( token != null ) { return getReferenceName ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return getReferenceName ( NUMBER_CONSTANT ) ; }
Distance : 8

1
Tree	if ( token != null ) { return JAVA_1_8 . enumLiteralHasKey ( CHAR_CONS ) ; }
Code	if ( token != null ) { return JAVA_1_8 . enumLiteralHasKey ( CHAR_CONS ) ; }
Distance : 9

2
Tree	if ( token != null ) { return JAVA_1_8 . wasCasted ( CHAR_CONS ) ; }
Code	if ( token != null ) { return JAVA_1_8 . wasCasted ( CHAR_CONS ) ; }
Distance : 9

3
Tree	if ( token != null ) { return JAVA_1_8 . enumLiteralHasKey ( token , NUMBER_CONSTANT , MILLIS ) ; }
Code	if ( token != null ) { return JAVA_1_8 . enumLiteralHasKey ( token , NUMBER_CONSTANT , MILLIS ) ; }
Distance : 11

4
Tree	if ( token != null ) { return JAVA_1_8 . wasCasted ( token , NUMBER_CONSTANT , MILLIS ) ; }
Code	if ( token != null ) { return JAVA_1_8 . wasCasted ( token , NUMBER_CONSTANT , MILLIS ) ; }
Distance : 11

5
Tree	if ( token != null ) { return JAVA_1_8 . enumLiteralHasKey ( null , token ) ; }
Code	if ( token != null ) { return JAVA_1_8 . enumLiteralHasKey ( null , token ) ; }
Distance : 10

6
Tree	if ( token != null ) { return primitiveWrapperOf ( token , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return primitiveWrapperOf ( token , STRING_CONSTANT ) ; }
Distance : 8

7
Tree	if ( token != null ) { return getTypesToSkipForType ( token , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return getTypesToSkipForType ( token , STRING_CONSTANT ) ; }
Distance : 8

8
Tree	if ( token != null ) { return isAfterNow ( token , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return isAfterNow ( token , STRING_CONSTANT ) ; }
Distance : 8

9
Tree	if ( token != null ) { return JAVA_1_8 . getCanonicalName ( token ) ; }
Code	if ( token != null ) { return JAVA_1_8 . getCanonicalName ( token ) ; }
Distance : 9

10
Tree	if ( token != null ) { return JAVA_1_8 . isA ( token , NUMBER_CONSTANT , JAVA_1_8 ) ; }
Code	if ( token != null ) { return JAVA_1_8 . isA ( token , NUMBER_CONSTANT , JAVA_1_8 ) ; }
Distance : 11

11
Tree	if ( token != null ) { return tryFoldInForcedStringContext ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return tryFoldInForcedStringContext ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

12
Tree	if ( token != null ) { return JAVA_1_8 . isA ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return JAVA_1_8 . isA ( NUMBER_CONSTANT ) ; }
Distance : 9

13
Tree	if ( token != null ) { return returnFake ( token , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return returnFake ( token , STRING_CONSTANT ) ; }
Distance : 8

14
Tree	if ( token != null ) { return JAVA_1_8 . valueClass ( token ) ; }
Code	if ( token != null ) { return JAVA_1_8 . valueClass ( token ) ; }
Distance : 9

15
Tree	if ( token != null ) { return JAVA_1_8 . isChromePassEnabled ( token ) ; }
Code	if ( token != null ) { return JAVA_1_8 . isChromePassEnabled ( token ) ; }
Distance : 9

16
Tree	if ( token != null ) { return JAVA_1_8 . shouldRunCrossChunkMethodMotion ( token ) ; }
Code	if ( token != null ) { return JAVA_1_8 . shouldRunCrossChunkMethodMotion ( token ) ; }
Distance : 9

17
Tree	if ( token != null ) { return JAVA_1_8 . enumLiteralHasKey ( token , NUMBER_CONSTANT , JAVA_1_8 ) ; }
Code	if ( token != null ) { return JAVA_1_8 . enumLiteralHasKey ( token , NUMBER_CONSTANT , JAVA_1_8 ) ; }
Distance : 11

18
Tree	if ( token != null ) { return JAVA_1_8 . enumLiteralHasKey ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return JAVA_1_8 . enumLiteralHasKey ( NUMBER_CONSTANT ) ; }
Distance : 9

19
Tree	if ( token != null ) { return getTypesToSkipForType ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return getTypesToSkipForType ( NUMBER_CONSTANT ) ; }
Distance : 8

20
Tree	if ( token != null ) { return getTypesToSkipForType ( token , JsDocToken.LEFT_CURLY ) ; }
Code	if ( token != null ) { return getTypesToSkipForType ( token , JsDocToken.LEFT_CURLY ) ; }
Distance : 9

21
Tree	if ( token != null ) { return isAfterNow ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return isAfterNow ( NUMBER_CONSTANT ) ; }
Distance : 8

22
Tree	if ( token != null ) { return isAfterNow ( token , JsDocToken.LEFT_CURLY ) ; }
Code	if ( token != null ) { return isAfterNow ( token , JsDocToken.LEFT_CURLY ) ; }
Distance : 9

23
Tree	if ( token != null ) { return JAVA_1_8 . isThisProp ( token , NUMBER_CONSTANT , JAVA_1_8 ) ; }
Code	if ( token != null ) { return JAVA_1_8 . isThisProp ( token , NUMBER_CONSTANT , JAVA_1_8 ) ; }
Distance : 11

24
Tree	if ( token != null ) { return tryFoldInForcedStringContext ( token , JsDocToken.LEFT_CURLY ) ; }
Code	if ( token != null ) { return tryFoldInForcedStringContext ( token , JsDocToken.LEFT_CURLY ) ; }
Distance : 9

25
Tree	if ( token != null ) { return returnFake ( token , JsDocToken.LEFT_CURLY ) ; }
Code	if ( token != null ) { return returnFake ( token , JsDocToken.LEFT_CURLY ) ; }
Distance : 9

26
Tree	if ( token != null ) { return returnFake ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return returnFake ( NUMBER_CONSTANT ) ; }
Distance : 8

27
Tree	if ( token != null ) { return JAVA_1_8 . isA ( CHAR_CONS ) ; }
Code	if ( token != null ) { return JAVA_1_8 . isA ( CHAR_CONS ) ; }
Distance : 9

28
Tree	if ( token != null ) { return JAVA_1_8 . wasCasted ( null , token ) ; }
Code	if ( token != null ) { return JAVA_1_8 . wasCasted ( null , token ) ; }
Distance : 10

29
Tree	if ( token != null ) { return skipStringLiteralEscapeSequence ( token , JsDocToken.LEFT_CURLY ) ; }
Code	if ( token != null ) { return skipStringLiteralEscapeSequence ( token , JsDocToken.LEFT_CURLY ) ; }
Distance : 9

30
Tree	if ( token != null ) { return JAVA_1_8 . isThisProp ( token , EMPTY , this ) ; }
Code	if ( token != null ) { return JAVA_1_8 . isThisProp ( token , EMPTY , this ) ; }
Distance : 11

31
Tree	if ( token != null ) { return JAVA_1_8 . isA ( token , EMPTY , this ) ; }
Code	if ( token != null ) { return JAVA_1_8 . isA ( token , EMPTY , this ) ; }
Distance : 11

32
Tree	if ( token != null ) { return JAVA_1_8 . isA ( null , token ) ; }
Code	if ( token != null ) { return JAVA_1_8 . isA ( null , token ) ; }
Distance : 10

33
Tree	if ( token != null ) { return filterNoResolvedType ( token , JsDocToken.LEFT_CURLY ) ; }
Code	if ( token != null ) { return filterNoResolvedType ( token , JsDocToken.LEFT_CURLY ) ; }
Distance : 9

34
Tree	if ( token != null ) { return JAVA_1_8 . isA ( null , null ) ; }
Code	if ( token != null ) { return JAVA_1_8 . isA ( null , null ) ; }
Distance : 10

35
Tree	if ( token != null ) { return JAVA_1_8 . potentialStubbingProblem ( token ) ; }
Code	if ( token != null ) { return JAVA_1_8 . potentialStubbingProblem ( token ) ; }
Distance : 9

36
Tree	if ( token != null ) { return JAVA_1_8 . itemLabelPaint ( token ) ; }
Code	if ( token != null ) { return JAVA_1_8 . itemLabelPaint ( token ) ; }
Distance : 9

37
Tree	if ( token != null ) { return JAVA_1_8 . wasCasted ( token , NUMBER_CONSTANT , JAVA_1_8 ) ; }
Code	if ( token != null ) { return JAVA_1_8 . wasCasted ( token , NUMBER_CONSTANT , JAVA_1_8 ) ; }
Distance : 11

38
Tree	if ( token != null ) { return primitiveWrapperOf ( token , JsDocToken.LEFT_CURLY ) ; }
Code	if ( token != null ) { return primitiveWrapperOf ( token , JsDocToken.LEFT_CURLY ) ; }
Distance : 9

39
Tree	if ( token != null ) { return JAVA_1_8 . getCanonicalName ( token , EMPTY , this ) ; }
Code	if ( token != null ) { return JAVA_1_8 . getCanonicalName ( token , EMPTY , this ) ; }
Distance : 11

40
Tree	if ( importedName.value != null ) { return getReferenceName ( token , STRING_CONSTANT ) ; }
Code	if ( importedName.value != null ) { return getReferenceName ( token , STRING_CONSTANT ) ; }
Distance : 9

41
Tree	if ( importedName.value != null ) { return getReferenceName ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( importedName.value != null ) { return getReferenceName ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 10

42
Tree	if ( importedName.value != null ) { return JAVA_1_8 . JAVA_1_8 ( token ) ; }
Code	if ( importedName.value != null ) { return JAVA_1_8 . JAVA_1_8 ( token ) ; }
Distance : 10

43
Tree	if ( importedName.value != null ) { return JAVA_1_8 . wasCasted ( token ) ; }
Code	if ( importedName.value != null ) { return JAVA_1_8 . wasCasted ( token ) ; }
Distance : 10

44
Tree	if ( importedName.value != null ) { return JAVA_1_8 . enumLiteralHasKey ( token ) ; }
Code	if ( importedName.value != null ) { return JAVA_1_8 . enumLiteralHasKey ( token ) ; }
Distance : 10

45
Tree	if ( importedName.value != null ) { return skipStringLiteralEscapeSequence ( token , STRING_CONSTANT ) ; }
Code	if ( importedName.value != null ) { return skipStringLiteralEscapeSequence ( token , STRING_CONSTANT ) ; }
Distance : 9

46
Tree	if ( token != null ) { return JAVA_1_8 . isChromePassEnabled ( token , NUMBER_CONSTANT , JAVA_1_8 ) ; }
Code	if ( token != null ) { return JAVA_1_8 . isChromePassEnabled ( token , NUMBER_CONSTANT , JAVA_1_8 ) ; }
Distance : 11

47
Tree	if ( token != null ) { return JAVA_1_8 . isChromePassEnabled ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return JAVA_1_8 . isChromePassEnabled ( NUMBER_CONSTANT ) ; }
Distance : 9

48
Tree	if ( token != null ) { return getReferenceName ( STRING_CONSTANT , ExpansionMode.MULTIPLICATIVE ) ; }
Code	if ( token != null ) { return getReferenceName ( STRING_CONSTANT , ExpansionMode.MULTIPLICATIVE ) ; }
Distance : 9

49
Tree	if ( token != null ) { return isAfterNow ( STRING_CONSTANT , importedName.value ) ; }
Code	if ( token != null ) { return isAfterNow ( STRING_CONSTANT , importedName.value ) ; }
Distance : 9

50
Tree	if ( token != null ) { return getReferenceName ( token , EMPTY , Void ) ; }
Code	if ( token != null ) { return getReferenceName ( token , EMPTY , Void ) ; }
Distance : 9

51
Tree	if ( importedName.value != null ) { return JAVA_1_8 . enumLiteralHasKey ( token , JsDocToken.LEFT_CURLY ) ; }
Code	if ( importedName.value != null ) { return JAVA_1_8 . enumLiteralHasKey ( token , JsDocToken.LEFT_CURLY ) ; }
Distance : 11

52
Tree	if ( token != null ) { return JAVA_1_8 . wasCasted ( token ) ; }
Code	if ( token != null ) { return JAVA_1_8 . wasCasted ( token ) ; }
Distance : 9

53
Tree	if ( token != null ) { return JAVA_1_8 . isThisProp ( token , JsDocToken.LEFT_CURLY ) ; }
Code	if ( token != null ) { return JAVA_1_8 . isThisProp ( token , JsDocToken.LEFT_CURLY ) ; }
Distance : 10

54
Tree	if ( token != null ) { return JAVA_1_8 . enumLiteralHasKey ( token , IncrementalCheckMode.OFF ) ; }
Code	if ( token != null ) { return JAVA_1_8 . enumLiteralHasKey ( token , IncrementalCheckMode.OFF ) ; }
Distance : 10

55
Tree	if ( token != null ) { return JAVA_1_8 . wasCasted ( token , IncrementalCheckMode.OFF ) ; }
Code	if ( token != null ) { return JAVA_1_8 . wasCasted ( token , IncrementalCheckMode.OFF ) ; }
Distance : 10

56
Tree	if ( token != null ) { return tryFoldInForcedStringContext ( token , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return tryFoldInForcedStringContext ( token , STRING_CONSTANT ) ; }
Distance : 8

57
Tree	if ( token != null ) { return JAVA_1_8 . enumLiteralHasKey ( token , EMPTY , MULTIPLICATIVE_MODE , JsDocToken.LEFT_CURLY ) ; }
Code	if ( token != null ) { return JAVA_1_8 . enumLiteralHasKey ( token , EMPTY , MULTIPLICATIVE_MODE , JsDocToken.LEFT_CURLY ) ; }
Distance : 11

58
Tree	if ( token != null ) { return getReferenceName ( token , EMPTY , MULTIPLICATIVE_MODE ) ; }
Code	if ( token != null ) { return getReferenceName ( token , EMPTY , MULTIPLICATIVE_MODE ) ; }
Distance : 9

59
Tree	if ( token != null ) { return JAVA_1_8 . enumLiteralHasKey ( token , EMPTY ) ; }
Code	if ( token != null ) { return JAVA_1_8 . enumLiteralHasKey ( token , EMPTY ) ; }
Distance : 10

60
Tree	if ( token != null ) { return JAVA_1_8 . wasCasted ( token , EMPTY , MULTIPLICATIVE_MODE , JsDocToken.LEFT_CURLY ) ; }
Code	if ( token != null ) { return JAVA_1_8 . wasCasted ( token , EMPTY , MULTIPLICATIVE_MODE , JsDocToken.LEFT_CURLY ) ; }
Distance : 11

61
Tree	if ( token != null ) { return JAVA_1_8 . wasCasted ( token , EMPTY ) ; }
Code	if ( token != null ) { return JAVA_1_8 . wasCasted ( token , EMPTY ) ; }
Distance : 10

62
Tree	if ( token != null ) { return getReferenceName ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return getReferenceName ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

63
Tree	if ( token != null ) { return JAVA_1_8 . shouldRunCrossChunkMethodMotion ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return JAVA_1_8 . shouldRunCrossChunkMethodMotion ( NUMBER_CONSTANT ) ; }
Distance : 9

64
Tree	if ( token != null ) { return JAVA_1_8 . potentialStubbingProblem ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return JAVA_1_8 . potentialStubbingProblem ( NUMBER_CONSTANT ) ; }
Distance : 9

65
Tree	if ( token != null ) { return filterNoResolvedType ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return filterNoResolvedType ( NUMBER_CONSTANT ) ; }
Distance : 8

66
Tree	if ( token != null ) { return skipStringLiteralEscapeSequence ( token , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return skipStringLiteralEscapeSequence ( token , STRING_CONSTANT ) ; }
Distance : 8

67
Tree	if ( token != null ) { return primitiveWrapperOf ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return primitiveWrapperOf ( NUMBER_CONSTANT ) ; }
Distance : 8

68
Tree	if ( importedName.value != null ) { return skipStringLiteralEscapeSequence ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( importedName.value != null ) { return skipStringLiteralEscapeSequence ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 10

69
Tree	if ( token != null ) { return filterNoResolvedType ( token , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return filterNoResolvedType ( token , STRING_CONSTANT ) ; }
Distance : 8

70
Tree	if ( token != null ) { return JAVA_1_8 . isThisProp ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return JAVA_1_8 . isThisProp ( NUMBER_CONSTANT ) ; }
Distance : 9

71
Tree	if ( token != null ) { return JAVA_1_8 . enumLiteralHasKey ( null , null ) ; }
Code	if ( token != null ) { return JAVA_1_8 . enumLiteralHasKey ( null , null ) ; }
Distance : 10

72
Tree	if ( token != null ) { return getReferenceName ( token , JsDocToken.LEFT_CURLY ) ; }
Code	if ( token != null ) { return getReferenceName ( token , JsDocToken.LEFT_CURLY ) ; }
Distance : 9

73
Tree	if ( token != null ) { return JAVA_1_8 . wasCasted ( null , null ) ; }
Code	if ( token != null ) { return JAVA_1_8 . wasCasted ( null , null ) ; }
Distance : 10

74
Tree	if ( importedName.value != null ) { return tryFoldInForcedStringContext ( token , STRING_CONSTANT ) ; }
Code	if ( importedName.value != null ) { return tryFoldInForcedStringContext ( token , STRING_CONSTANT ) ; }
Distance : 9

75
Tree	if ( token != null ) { return tryFoldInForcedStringContext ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return tryFoldInForcedStringContext ( NUMBER_CONSTANT ) ; }
Distance : 8

76
Tree	if ( token != null ) { return JAVA_1_8 . enumLiteralHasKey ( token , EMPTY , LAST_ARGUMENT , JsDocToken.LEFT_CURLY ) ; }
Code	if ( token != null ) { return JAVA_1_8 . enumLiteralHasKey ( token , EMPTY , LAST_ARGUMENT , JsDocToken.LEFT_CURLY ) ; }
Distance : 11

77
Tree	if ( token != null ) { return JAVA_1_8 . getCanonicalName ( token , NUMBER_CONSTANT , JAVA_1_8 ) ; }
Code	if ( token != null ) { return JAVA_1_8 . getCanonicalName ( token , NUMBER_CONSTANT , JAVA_1_8 ) ; }
Distance : 11

78
Tree	if ( token != null ) { return JAVA_1_8 . getCanonicalName ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return JAVA_1_8 . getCanonicalName ( NUMBER_CONSTANT ) ; }
Distance : 9

79
Tree	if ( token != null ) { return getReferenceName ( STRING_CONSTANT ) ; }
Code	if ( token != null ) { return getReferenceName ( STRING_CONSTANT ) ; }
Distance : 7

80
Tree	if ( token != null ) { return JAVA_1_8 . enumLiteralHasKey ( token , JsDocToken.LEFT_CURLY ) ; }
Code	if ( token != null ) { return JAVA_1_8 . enumLiteralHasKey ( token , JsDocToken.LEFT_CURLY ) ; }
Distance : 10

81
Tree	if ( token != null ) { return JAVA_1_8 . wasCasted ( token , JsDocToken.LEFT_CURLY ) ; }
Code	if ( token != null ) { return JAVA_1_8 . wasCasted ( token , JsDocToken.LEFT_CURLY ) ; }
Distance : 10

82
Tree	if ( token != null ) { return tryFoldInForcedStringContext ( STRING_CONSTANT ) ; }
Code	if ( token != null ) { return tryFoldInForcedStringContext ( STRING_CONSTANT ) ; }
Distance : 7

83
Tree	if ( token != null ) { return isAfterNow ( STRING_CONSTANT ) ; }
Code	if ( token != null ) { return isAfterNow ( STRING_CONSTANT ) ; }
Distance : 7

84
Tree	if ( token != null ) { return returnFake ( STRING_CONSTANT ) ; }
Code	if ( token != null ) { return returnFake ( STRING_CONSTANT ) ; }
Distance : 7

85
Tree	if ( token != null ) { return JAVA_1_8 . wasCasted ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return JAVA_1_8 . wasCasted ( NUMBER_CONSTANT ) ; }
Distance : 9

86
Tree	if ( token != null ) { return skipStringLiteralEscapeSequence ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return skipStringLiteralEscapeSequence ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

87
Tree	if ( token != null ) { return JAVA_1_8 . enumLiteralHasKey ( token , DisposalCheckingPolicy.OFF ) ; }
Code	if ( token != null ) { return JAVA_1_8 . enumLiteralHasKey ( token , DisposalCheckingPolicy.OFF ) ; }
Distance : 10

88
Tree	if ( token != null ) { return skipStringLiteralEscapeSequence ( STRING_CONSTANT ) ; }
Code	if ( token != null ) { return skipStringLiteralEscapeSequence ( STRING_CONSTANT ) ; }
Distance : 7

89
Tree	if ( token != null ) { return filterNoResolvedType ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return filterNoResolvedType ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

90
Tree	if ( token != null ) { return skipStringLiteralEscapeSequence ( NUMBER_CONSTANT ) ; }
Code	if ( token != null ) { return skipStringLiteralEscapeSequence ( NUMBER_CONSTANT ) ; }
Distance : 8

91
Tree	if ( token != null ) { return JAVA_1_8 . wasCasted ( token , DisposalCheckingPolicy.OFF ) ; }
Code	if ( token != null ) { return JAVA_1_8 . wasCasted ( token , DisposalCheckingPolicy.OFF ) ; }
Distance : 10

92
Tree	if ( token != null ) { return JAVA_1_8 . MILLIS ( token ) ; }
Code	if ( token != null ) { return JAVA_1_8 . MILLIS ( token ) ; }
Distance : 9

93
Tree	if ( token != null ) { return primitiveWrapperOf ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return primitiveWrapperOf ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

94
Tree	if ( token != null ) { return JAVA_1_8 . incrementalCheckMode ( token ) ; }
Code	if ( token != null ) { return JAVA_1_8 . incrementalCheckMode ( token ) ; }
Distance : 9

95
Tree	if ( token != null ) { return JAVA_1_8 . NO_FIELD_NAMES_STYLE ( token ) ; }
Code	if ( token != null ) { return JAVA_1_8 . NO_FIELD_NAMES_STYLE ( token ) ; }
Distance : 9

96
Tree	if ( token != null ) { return JAVA_1_8 . isA ( token , JsDocToken.LEFT_CURLY ) ; }
Code	if ( token != null ) { return JAVA_1_8 . isA ( token , JsDocToken.LEFT_CURLY ) ; }
Distance : 10

97
Tree	if ( token != null ) { return getTypesToSkipForType ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return getTypesToSkipForType ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

98
Tree	if ( token != null ) { return JAVA_1_8 . ARROW_FN ( token ) ; }
Code	if ( token != null ) { return JAVA_1_8 . ARROW_FN ( token ) ; }
Distance : 9

99
Tree	if ( token != null ) { return JAVA_1_8 . isThisProp ( token ) ; }
Code	if ( token != null ) { return JAVA_1_8 . isThisProp ( token ) ; }
Distance : 9

100
Tree	if ( token != null ) { return filterNoResolvedType ( STRING_CONSTANT ) ; }
Code	if ( token != null ) { return filterNoResolvedType ( STRING_CONSTANT ) ; }
Distance : 7

101
Tree	if ( token != null ) { return JAVA_1_8 . isChromePassEnabled ( null , null ) ; }
Code	if ( token != null ) { return JAVA_1_8 . isChromePassEnabled ( null , null ) ; }
Distance : 10

102
Tree	if ( token != null ) { return JAVA_1_8 . shouldRunCrossChunkMethodMotion ( null , token ) ; }
Code	if ( token != null ) { return JAVA_1_8 . shouldRunCrossChunkMethodMotion ( null , token ) ; }
Distance : 10

103
Tree	if ( token != null ) { return JAVA_1_8 . potentialStubbingProblem ( null , token ) ; }
Code	if ( token != null ) { return JAVA_1_8 . potentialStubbingProblem ( null , token ) ; }
Distance : 10

104
Tree	if ( token != null ) { return JAVA_1_8 . shouldRunCrossChunkMethodMotion ( null , null ) ; }
Code	if ( token != null ) { return JAVA_1_8 . shouldRunCrossChunkMethodMotion ( null , null ) ; }
Distance : 10

105
Tree	if ( token != null ) { return getReferenceName ( token , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return getReferenceName ( token , STRING_CONSTANT ) ; }
Distance : 8

106
Tree	if ( token != null ) { return isAfterNow ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return isAfterNow ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

107
Tree	if ( token != null ) { return JAVA_1_8 . potentialStubbingProblem ( null , null ) ; }
Code	if ( token != null ) { return JAVA_1_8 . potentialStubbingProblem ( null , null ) ; }
Distance : 10

108
Tree	if ( token != null ) { return JAVA_1_8 . nextTime ( token ) ; }
Code	if ( token != null ) { return JAVA_1_8 . nextTime ( token ) ; }
Distance : 9

109
Tree	if ( token != null ) { return JAVA_1_8 . isChromePassEnabled ( CHAR_CONS ) ; }
Code	if ( token != null ) { return JAVA_1_8 . isChromePassEnabled ( CHAR_CONS ) ; }
Distance : 9

110
Tree	if ( token != null ) { return JAVA_1_8 . shouldRunCrossChunkMethodMotion ( CHAR_CONS ) ; }
Code	if ( token != null ) { return JAVA_1_8 . shouldRunCrossChunkMethodMotion ( CHAR_CONS ) ; }
Distance : 9

111
Tree	if ( token != null ) { return JAVA_1_8 . getCanonicalName ( null , token ) ; }
Code	if ( token != null ) { return JAVA_1_8 . getCanonicalName ( null , token ) ; }
Distance : 10

112
Tree	if ( token != null ) { return JAVA_1_8 . potentialStubbingProblem ( CHAR_CONS ) ; }
Code	if ( token != null ) { return JAVA_1_8 . potentialStubbingProblem ( CHAR_CONS ) ; }
Distance : 9

113
Tree	if ( token != null ) { return JAVA_1_8 . getCanonicalName ( null , null ) ; }
Code	if ( token != null ) { return JAVA_1_8 . getCanonicalName ( null , null ) ; }
Distance : 10

114
Tree	if ( token != null ) { return JAVA_1_8 . getCanonicalName ( token , EMPTY ) ; }
Code	if ( token != null ) { return JAVA_1_8 . getCanonicalName ( token , EMPTY ) ; }
Distance : 10

115
Tree	if ( token != null ) { return getReferenceName ( STRING_CONSTANT , importedName.value ) ; }
Code	if ( token != null ) { return getReferenceName ( STRING_CONSTANT , importedName.value ) ; }
Distance : 9

116
Tree	if ( token != null ) { return JAVA_1_8 . isChromePassEnabled ( token , EMPTY , this ) ; }
Code	if ( token != null ) { return JAVA_1_8 . isChromePassEnabled ( token , EMPTY , this ) ; }
Distance : 11

117
Tree	if ( token != null ) { return JAVA_1_8 . isChromePassEnabled ( null , token ) ; }
Code	if ( token != null ) { return JAVA_1_8 . isChromePassEnabled ( null , token ) ; }
Distance : 10

118
Tree	if ( token != null ) { return JAVA_1_8 . shouldRunCrossChunkMethodMotion ( token , EMPTY , this ) ; }
Code	if ( token != null ) { return JAVA_1_8 . shouldRunCrossChunkMethodMotion ( token , EMPTY , this ) ; }
Distance : 11

119
Tree	if ( token != null ) { return JAVA_1_8 . potentialStubbingProblem ( token , EMPTY , this ) ; }
Code	if ( token != null ) { return JAVA_1_8 . potentialStubbingProblem ( token , EMPTY , this ) ; }
Distance : 11

120
Tree	if ( token != null ) { return JAVA_1_8 . isA ( token , EMPTY ) ; }
Code	if ( token != null ) { return JAVA_1_8 . isA ( token , EMPTY ) ; }
Distance : 10

121
Tree	if ( token != null ) { return JAVA_1_8 . isThisProp ( CHAR_CONS ) ; }
Code	if ( token != null ) { return JAVA_1_8 . isThisProp ( CHAR_CONS ) ; }
Distance : 9

122
Tree	if ( token != null ) { return JAVA_1_8 . potentialStubbingProblem ( token , EMPTY ) ; }
Code	if ( token != null ) { return JAVA_1_8 . potentialStubbingProblem ( token , EMPTY ) ; }
Distance : 10

123
Tree	if ( token != null ) { return tryFoldInForcedStringContext ( STRING_CONSTANT , importedName.value ) ; }
Code	if ( token != null ) { return tryFoldInForcedStringContext ( STRING_CONSTANT , importedName.value ) ; }
Distance : 9

124
Tree	if ( token != null ) { return primitiveWrapperOf ( STRING_CONSTANT ) ; }
Code	if ( token != null ) { return primitiveWrapperOf ( STRING_CONSTANT ) ; }
Distance : 7

125
Tree	if ( token != null ) { return getTypesToSkipForType ( STRING_CONSTANT ) ; }
Code	if ( token != null ) { return getTypesToSkipForType ( STRING_CONSTANT ) ; }
Distance : 7

126
Tree	if ( token != null ) { return skipStringLiteralEscapeSequence ( STRING_CONSTANT , importedName.value ) ; }
Code	if ( token != null ) { return skipStringLiteralEscapeSequence ( STRING_CONSTANT , importedName.value ) ; }
Distance : 9

127
Tree	if ( importedName.value != null ) { return tryFoldInForcedStringContext ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( importedName.value != null ) { return tryFoldInForcedStringContext ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 10

128
Tree	if ( token != null ) { return JAVA_1_8 . getCanonicalName ( CHAR_CONS ) ; }
Code	if ( token != null ) { return JAVA_1_8 . getCanonicalName ( CHAR_CONS ) ; }
Distance : 9

129
Tree	if ( importedName.value != null ) { return getReferenceName ( STRING_CONSTANT ) ; }
Code	if ( importedName.value != null ) { return getReferenceName ( STRING_CONSTANT ) ; }
Distance : 8

130
Tree	if ( importedName.value != null ) { return filterNoResolvedType ( token , STRING_CONSTANT ) ; }
Code	if ( importedName.value != null ) { return filterNoResolvedType ( token , STRING_CONSTANT ) ; }
Distance : 9

131
Tree	if ( token != null ) { return JAVA_1_8 . isThisProp ( null , token ) ; }
Code	if ( token != null ) { return JAVA_1_8 . isThisProp ( null , token ) ; }
Distance : 10

132
Tree	if ( token != null ) { return JAVA_1_8 . JAVA_1_8 ( token ) ; }
Code	if ( token != null ) { return JAVA_1_8 . JAVA_1_8 ( token ) ; }
Distance : 9

133
Tree	if ( token != null ) { return JAVA_1_8 . isThisProp ( token , EMPTY ) ; }
Code	if ( token != null ) { return JAVA_1_8 . isThisProp ( token , EMPTY ) ; }
Distance : 10

134
Tree	if ( token != null ) { return JAVA_1_8 . enumLiteralHasKey ( token ) ; }
Code	if ( token != null ) { return JAVA_1_8 . enumLiteralHasKey ( token ) ; }
Distance : 9

135
Tree	if ( token != null ) { return filterNoResolvedType ( STRING_CONSTANT , importedName.value ) ; }
Code	if ( token != null ) { return filterNoResolvedType ( STRING_CONSTANT , importedName.value ) ; }
Distance : 9

136
Tree	if ( token != null ) { return returnFake ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( token != null ) { return returnFake ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 9

137
Tree	if ( importedName.value != null ) { return filterNoResolvedType ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( importedName.value != null ) { return filterNoResolvedType ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 10

138
Tree	if ( token != null ) { return JAVA_1_8 . isA ( token ) ; }
Code	if ( token != null ) { return JAVA_1_8 . isA ( token ) ; }
Distance : 9

139
Tree	if ( importedName.value != null ) { return JAVA_1_8 . wasCasted ( token , NUMBER_CONSTANT , JAVA_1_8 ) ; }
Code	if ( importedName.value != null ) { return JAVA_1_8 . wasCasted ( token , NUMBER_CONSTANT , JAVA_1_8 ) ; }
Distance : 12

140
Tree	if ( importedName.value != null ) { return primitiveWrapperOf ( token , STRING_CONSTANT ) ; }
Code	if ( importedName.value != null ) { return primitiveWrapperOf ( token , STRING_CONSTANT ) ; }
Distance : 9

141
Tree	if ( token != null ) { return JAVA_1_8 . enumLiteralHasKey ( token , EMPTY , this ) ; }
Code	if ( token != null ) { return JAVA_1_8 . enumLiteralHasKey ( token , EMPTY , this ) ; }
Distance : 11

142
Tree	if ( token != null ) { return JAVA_1_8 . wasCasted ( token , EMPTY , this ) ; }
Code	if ( token != null ) { return JAVA_1_8 . wasCasted ( token , EMPTY , this ) ; }
Distance : 11

143
Tree	if ( token != null ) { return JAVA_1_8 . isThisProp ( null , null ) ; }
Code	if ( token != null ) { return JAVA_1_8 . isThisProp ( null , null ) ; }
Distance : 10

144
Tree	if ( token != null ) { return JAVA_1_8 . wasCasted ( token , EMPTY , LAST_ARGUMENT , JsDocToken.LEFT_CURLY ) ; }
Code	if ( token != null ) { return JAVA_1_8 . wasCasted ( token , EMPTY , LAST_ARGUMENT , JsDocToken.LEFT_CURLY ) ; }
Distance : 11

145
Tree	if ( token != null ) { return JAVA_1_8 . enumLiteralHasKey ( token , EMPTY , follow , JsDocToken.LEFT_CURLY ) ; }
Code	if ( token != null ) { return JAVA_1_8 . enumLiteralHasKey ( token , EMPTY , follow , JsDocToken.LEFT_CURLY ) ; }
Distance : 11

146
Tree	if ( token != null ) { return JAVA_1_8 . wasCasted ( token , EMPTY , follow , JsDocToken.LEFT_CURLY ) ; }
Code	if ( token != null ) { return JAVA_1_8 . wasCasted ( token , EMPTY , follow , JsDocToken.LEFT_CURLY ) ; }
Distance : 11

147
Tree	if ( importedName.value != null ) { return JAVA_1_8 . wasCasted ( token , DisposalCheckingPolicy.OFF ) ; }
Code	if ( importedName.value != null ) { return JAVA_1_8 . wasCasted ( token , DisposalCheckingPolicy.OFF ) ; }
Distance : 11

148
Tree	if ( token != null ) { return getReferenceName ( token , EMPTY , LAST_ARGUMENT ) ; }
Code	if ( token != null ) { return getReferenceName ( token , EMPTY , LAST_ARGUMENT ) ; }
Distance : 9

149
Tree	if ( importedName.value != null ) { return JAVA_1_8 . wasCasted ( token , JsDocToken.LEFT_CURLY ) ; }
Code	if ( importedName.value != null ) { return JAVA_1_8 . wasCasted ( token , JsDocToken.LEFT_CURLY ) ; }
Distance : 11

150
Tree	if ( importedName.value != null ) { return primitiveWrapperOf ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( importedName.value != null ) { return primitiveWrapperOf ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 10

151
Tree	if ( boxedInfo.length != null ) { return JAVA_1_8 . wasCasted ( token , JsDocToken.LEFT_CURLY ) ; }
Code	if ( boxedInfo.length != null ) { return JAVA_1_8 . wasCasted ( token , JsDocToken.LEFT_CURLY ) ; }
Distance : 11

152
Tree	if ( token != null ) { return JAVA_1_8 . isChromePassEnabled ( token , EMPTY ) ; }
Code	if ( token != null ) { return JAVA_1_8 . isChromePassEnabled ( token , EMPTY ) ; }
Distance : 10

153
Tree	if ( token != null ) { return JAVA_1_8 . shouldRunCrossChunkMethodMotion ( token , EMPTY ) ; }
Code	if ( token != null ) { return JAVA_1_8 . shouldRunCrossChunkMethodMotion ( token , EMPTY ) ; }
Distance : 10

154
Tree	if ( token != null ) { return JAVA_1_8 . enumLiteralHasKey ( token , EMPTY , Void , JsDocToken.LEFT_CURLY ) ; }
Code	if ( token != null ) { return JAVA_1_8 . enumLiteralHasKey ( token , EMPTY , Void , JsDocToken.LEFT_CURLY ) ; }
Distance : 11

155
Tree	if ( importedName.value != null ) { return JAVA_1_8 . isA ( token , JsDocToken.LEFT_CURLY ) ; }
Code	if ( importedName.value != null ) { return JAVA_1_8 . isA ( token , JsDocToken.LEFT_CURLY ) ; }
Distance : 11

156
Tree	if ( importedName.value != null ) { return skipStringLiteralEscapeSequence ( STRING_CONSTANT ) ; }
Code	if ( importedName.value != null ) { return skipStringLiteralEscapeSequence ( STRING_CONSTANT ) ; }
Distance : 8

157
Tree	if ( token != null ) { return JAVA_1_8 . wasCasted ( token , EMPTY , Void , JsDocToken.LEFT_CURLY ) ; }
Code	if ( token != null ) { return JAVA_1_8 . wasCasted ( token , EMPTY , Void , JsDocToken.LEFT_CURLY ) ; }
Distance : 11

158
Tree	if ( importedName.value != null ) { return tryFoldInForcedStringContext ( STRING_CONSTANT ) ; }
Code	if ( importedName.value != null ) { return tryFoldInForcedStringContext ( STRING_CONSTANT ) ; }
Distance : 8

159
Tree	if ( importedName.value != null ) { return filterNoResolvedType ( STRING_CONSTANT ) ; }
Code	if ( importedName.value != null ) { return filterNoResolvedType ( STRING_CONSTANT ) ; }
Distance : 8

160
Tree	if ( current.parent != null ) { return JAVA_1_8 . wasCasted ( token , JsDocToken.LEFT_CURLY ) ; }
Code	if ( current.parent != null ) { return JAVA_1_8 . wasCasted ( token , JsDocToken.LEFT_CURLY ) ; }
Distance : 11

161
Tree	if ( token != null ) { return tryFoldInForcedStringContext ( token , EMPTY , MULTIPLICATIVE_MODE ) ; }
Code	if ( token != null ) { return tryFoldInForcedStringContext ( token , EMPTY , MULTIPLICATIVE_MODE ) ; }
Distance : 9

162
Tree	if ( token != null ) { return skipStringLiteralEscapeSequence ( token , EMPTY , Void ) ; }
Code	if ( token != null ) { return skipStringLiteralEscapeSequence ( token , EMPTY , Void ) ; }
Distance : 9

163
Tree	if ( token != null ) { return skipStringLiteralEscapeSequence ( token , EMPTY , MULTIPLICATIVE_MODE ) ; }
Code	if ( token != null ) { return skipStringLiteralEscapeSequence ( token , EMPTY , MULTIPLICATIVE_MODE ) ; }
Distance : 9

164
Tree	if ( token != null ) { return filterNoResolvedType ( token , EMPTY , Void ) ; }
Code	if ( token != null ) { return filterNoResolvedType ( token , EMPTY , Void ) ; }
Distance : 9

165
Tree	if ( importedName.value != null ) { return primitiveWrapperOf ( STRING_CONSTANT ) ; }
Code	if ( importedName.value != null ) { return primitiveWrapperOf ( STRING_CONSTANT ) ; }
Distance : 8

166
Tree	if ( importedName.value != null ) { return getTypesToSkipForType ( STRING_CONSTANT ) ; }
Code	if ( importedName.value != null ) { return getTypesToSkipForType ( STRING_CONSTANT ) ; }
Distance : 8

167
Tree	if ( token != null ) { return primitiveWrapperOf ( STRING_CONSTANT , importedName.value ) ; }
Code	if ( token != null ) { return primitiveWrapperOf ( STRING_CONSTANT , importedName.value ) ; }
Distance : 9

168
Tree	if ( importedName.value != null ) { return getTypesToSkipForType ( token , STRING_CONSTANT ) ; }
Code	if ( importedName.value != null ) { return getTypesToSkipForType ( token , STRING_CONSTANT ) ; }
Distance : 9

169
Tree	if ( token != null ) { return getTypesToSkipForType ( STRING_CONSTANT , importedName.value ) ; }
Code	if ( token != null ) { return getTypesToSkipForType ( STRING_CONSTANT , importedName.value ) ; }
Distance : 9

170
Tree	if ( importedName.value != null ) { return getTypesToSkipForType ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( importedName.value != null ) { return getTypesToSkipForType ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 10

171
Tree	if ( importedName.value != null ) { return JAVA_1_8 . enumLiteralHasKey ( token , NUMBER_CONSTANT , JAVA_1_8 ) ; }
Code	if ( importedName.value != null ) { return JAVA_1_8 . enumLiteralHasKey ( token , NUMBER_CONSTANT , JAVA_1_8 ) ; }
Distance : 12

172
Tree	if ( importedName.value != null ) { return isAfterNow ( STRING_CONSTANT ) ; }
Code	if ( importedName.value != null ) { return isAfterNow ( STRING_CONSTANT ) ; }
Distance : 8

173
Tree	if ( importedName.value != null ) { return isAfterNow ( token , STRING_CONSTANT ) ; }
Code	if ( importedName.value != null ) { return isAfterNow ( token , STRING_CONSTANT ) ; }
Distance : 9

174
Tree	if ( importedName.value != null ) { return isAfterNow ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( importedName.value != null ) { return isAfterNow ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 10

175
Tree	if ( importedName.value != null ) { return returnFake ( token , STRING_CONSTANT ) ; }
Code	if ( importedName.value != null ) { return returnFake ( token , STRING_CONSTANT ) ; }
Distance : 9

176
Tree	if ( importedName.value != null ) { return returnFake ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Code	if ( importedName.value != null ) { return returnFake ( STRING_CONSTANT , STRING_CONSTANT ) ; }
Distance : 10

177
Tree	if ( boxedInfo.length != null ) { return JAVA_1_8 . JAVA_1_8 ( token ) ; }
Code	if ( boxedInfo.length != null ) { return JAVA_1_8 . JAVA_1_8 ( token ) ; }
Distance : 10

178
Tree	if ( importedName.value != null ) { return returnFake ( STRING_CONSTANT ) ; }
Code	if ( importedName.value != null ) { return returnFake ( STRING_CONSTANT ) ; }
Distance : 8

179
Tree	if ( current.parent != null ) { return JAVA_1_8 . JAVA_1_8 ( token ) ; }
Code	if ( current.parent != null ) { return JAVA_1_8 . JAVA_1_8 ( token ) ; }
Distance : 10

180
Tree	if ( importedName.value != null ) { return JAVA_1_8 . incrementalCheckMode ( token ) ; }
Code	if ( importedName.value != null ) { return JAVA_1_8 . incrementalCheckMode ( token ) ; }
Distance : 10

181
Tree	if ( ExpansionMode.MULTIPLICATIVE != null ) { return JAVA_1_8 . JAVA_1_8 ( token ) ; }
Code	if ( ExpansionMode.MULTIPLICATIVE != null ) { return JAVA_1_8 . JAVA_1_8 ( token ) ; }
Distance : 10

182
Tree	if ( boxedInfo.length != null ) { return JAVA_1_8 . wasCasted ( token , NUMBER_CONSTANT , JAVA_1_8 ) ; }
Code	if ( boxedInfo.length != null ) { return JAVA_1_8 . wasCasted ( token , NUMBER_CONSTANT , JAVA_1_8 ) ; }
Distance : 12

183
Tree	if ( importedName.value != null ) { return JAVA_1_8 . enumLiteralHasKey ( token , DisposalCheckingPolicy.OFF ) ; }
Code	if ( importedName.value != null ) { return JAVA_1_8 . enumLiteralHasKey ( token , DisposalCheckingPolicy.OFF ) ; }
Distance : 11

184
Tree	if ( Token.ROOT != null ) { return JAVA_1_8 . wasCasted ( token , JsDocToken.LEFT_CURLY ) ; }
Code	if ( Token.ROOT != null ) { return JAVA_1_8 . wasCasted ( token , JsDocToken.LEFT_CURLY ) ; }
Distance : 11

185
Tree	if ( token != null ) { return tryFoldInForcedStringContext ( token , EMPTY , Void ) ; }
Code	if ( token != null ) { return tryFoldInForcedStringContext ( token , EMPTY , Void ) ; }
Distance : 9

186
Tree	if ( boxedInfo.length != null ) { return JAVA_1_8 . wasCasted ( token ) ; }
Code	if ( boxedInfo.length != null ) { return JAVA_1_8 . wasCasted ( token ) ; }
Distance : 10

187
Tree	if ( importedName.value != null ) { return JAVA_1_8 . isA ( token , NUMBER_CONSTANT , JAVA_1_8 ) ; }
Code	if ( importedName.value != null ) { return JAVA_1_8 . isA ( token , NUMBER_CONSTANT , JAVA_1_8 ) ; }
Distance : 12

188
Tree	if ( current.parent != null ) { return JAVA_1_8 . wasCasted ( token , NUMBER_CONSTANT , JAVA_1_8 ) ; }
Code	if ( current.parent != null ) { return JAVA_1_8 . wasCasted ( token , NUMBER_CONSTANT , JAVA_1_8 ) ; }
Distance : 12

189
Tree	if ( Token.ROOT != null ) { return JAVA_1_8 . wasCasted ( token , NUMBER_CONSTANT , JAVA_1_8 ) ; }
Code	if ( Token.ROOT != null ) { return JAVA_1_8 . wasCasted ( token , NUMBER_CONSTANT , JAVA_1_8 ) ; }
Distance : 12

190
Tree	if ( importedName.value != null ) { return JAVA_1_8 . isA ( token ) ; }
Code	if ( importedName.value != null ) { return JAVA_1_8 . isA ( token ) ; }
Distance : 10

191
Tree	if ( current.parent != null ) { return JAVA_1_8 . wasCasted ( token ) ; }
Code	if ( current.parent != null ) { return JAVA_1_8 . wasCasted ( token ) ; }
Distance : 10

192
Tree	if ( Token.ROOT != null ) { return JAVA_1_8 . JAVA_1_8 ( token ) ; }
Code	if ( Token.ROOT != null ) { return JAVA_1_8 . JAVA_1_8 ( token ) ; }
Distance : 10

193
Tree	if ( Token.ROOT != null ) { return JAVA_1_8 . wasCasted ( token ) ; }
Code	if ( Token.ROOT != null ) { return JAVA_1_8 . wasCasted ( token ) ; }
Distance : 10

194
Tree	if ( importedName.value != null ) { return JAVA_1_8 . MILLIS ( token ) ; }
Code	if ( importedName.value != null ) { return JAVA_1_8 . MILLIS ( token ) ; }
Distance : 10

195
Tree	if ( boxedInfo.length != null ) { return JAVA_1_8 . enumLiteralHasKey ( token ) ; }
Code	if ( boxedInfo.length != null ) { return JAVA_1_8 . enumLiteralHasKey ( token ) ; }
Distance : 10

196
Tree	if ( current.parent != null ) { return JAVA_1_8 . enumLiteralHasKey ( token ) ; }
Code	if ( current.parent != null ) { return JAVA_1_8 . enumLiteralHasKey ( token ) ; }
Distance : 10

197
Tree	if ( boxedInfo.length != null ) { return JAVA_1_8 . enumLiteralHasKey ( token , NUMBER_CONSTANT , JAVA_1_8 ) ; }
Code	if ( boxedInfo.length != null ) { return JAVA_1_8 . enumLiteralHasKey ( token , NUMBER_CONSTANT , JAVA_1_8 ) ; }
Distance : 12

198
Tree	if ( current.parent != null ) { return JAVA_1_8 . enumLiteralHasKey ( token , NUMBER_CONSTANT , JAVA_1_8 ) ; }
Code	if ( current.parent != null ) { return JAVA_1_8 . enumLiteralHasKey ( token , NUMBER_CONSTANT , JAVA_1_8 ) ; }
Distance : 12

199
Tree	if ( Boolean.TRUE != null ) { return JAVA_1_8 . JAVA_1_8 ( token ) ; }
Code	if ( Boolean.TRUE != null ) { return JAVA_1_8 . JAVA_1_8 ( token ) ; }
Distance : 10

========================================================================


========================================================================
Example Number: 22
Parent Code is: 
{ initCompilerOptionsIfTesting () ; return toSource ( n , null ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ initCompilerOptionsIfTesting () ; return toSource ( n , null , true ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=initCompilerOptionsIfTesting}) (216{val=()})) (227{val=;})) (41 (329{val=return}) (32 (802{val=toSource}) (214{val=(}) (800{val=n}) (234{val=,}) (500{val=null}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=initCompilerOptionsIfTesting}) (216{val=()})) (227{val=;})) (41 (329{val=return}) (32 (802{val=toSource}) (214{val=(}) (800{val=n}) (234{val=,}) (500{val=null}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/64/parent/src_com_google_javascript_jscomp_Compiler.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ allowSourcelessWarnings () ; return doParseMillis ( n , n , clazz , false ) ; }
Code	{ allowSourcelessWarnings () ; return doParseMillis ( n , n , clazz , false ) ; }
Distance : 6

1
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , n ? FunctionFlavor.GENERATOR : FunctionFlavor.NORMAL ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , n ? FunctionFlavor.GENERATOR : FunctionFlavor.NORMAL ) ; }
Distance : 7

2
Tree	{ setBaseItemLabelsVisible ( n ) ; return completeAssignmentExpressionParseAtArrow ( n . of ( n ) , null ) ; }
Code	{ setBaseItemLabelsVisible ( n ) ; return completeAssignmentExpressionParseAtArrow ( n . of ( n ) , null ) ; }
Distance : 11

3
Tree	{ setBaseItemLabelsVisible ( n ) ; return indexOfAny ( n . getParent ( n ) , null ) ; }
Code	{ setBaseItemLabelsVisible ( n ) ; return indexOfAny ( n . getParent ( n ) , null ) ; }
Distance : 11

4
Tree	{ allowSourcelessWarnings () ; return doParseMillis ( n , n . getSimplifiedName ( n ) , n ) ; }
Code	{ allowSourcelessWarnings () ; return doParseMillis ( n , n . getSimplifiedName ( n ) , n ) ; }
Distance : 9

5
Tree	{ setBaseItemLabelsVisible () . add ( new Returns () , n ) ; super }
Code	{ setBaseItemLabelsVisible () . add ( new Returns () , n ) ; super }
Distance : 9

6
Tree	{ setBaseItemLabelsVisible () ; return indexOfAny ( n , null , null , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return indexOfAny ( n , null , null , n ) ; }
Distance : 5

7
Tree	{ setBaseItemLabelsVisible () ; return completeAssignmentExpressionParseAtArrow ( n , null , null , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return completeAssignmentExpressionParseAtArrow ( n , null , null , n ) ; }
Distance : 5

8
Tree	{ setBaseItemLabelsVisible () ; return indexOfAny ( STRING_CONSTANT , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return indexOfAny ( STRING_CONSTANT , n ) ; }
Distance : 6

9
Tree	{ setBaseItemLabelsVisible () ; return currentAnalysis . parseInto ( Any.ANY ) ; }
Code	{ setBaseItemLabelsVisible () ; return currentAnalysis . parseInto ( Any.ANY ) ; }
Distance : 8

10
Tree	{ setBaseItemLabelsVisible () ; return completeAssignmentExpressionParseAtArrow ( STRING_CONSTANT , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return completeAssignmentExpressionParseAtArrow ( STRING_CONSTANT , n ) ; }
Distance : 6

11
Tree	{ setBaseItemLabelsVisible () ; return completeArrowFunctionParseAtArrow ( STRING_CONSTANT , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return completeArrowFunctionParseAtArrow ( STRING_CONSTANT , n ) ; }
Distance : 6

12
Tree	{ allowSourcelessWarnings () ; return doParseMillis ( n , n , clazz , clazz ) ; }
Code	{ allowSourcelessWarnings () ; return doParseMillis ( n , n , clazz , clazz ) ; }
Distance : 6

13
Tree	{ getRegistry () ; return doParseMillis ( STRING_CONSTANT , n ) ; }
Code	{ getRegistry () ; return doParseMillis ( STRING_CONSTANT , n ) ; }
Distance : 6

14
Tree	{ setBaseItemLabelsVisible () ; return currentAnalysis . primitiveValueOrNullFor ( Any.ANY ) ; }
Code	{ setBaseItemLabelsVisible () ; return currentAnalysis . primitiveValueOrNullFor ( Any.ANY ) ; }
Distance : 8

15
Tree	{ setBaseItemLabelsVisible () ; return applyRules ( STRING_CONSTANT , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return applyRules ( STRING_CONSTANT , n ) ; }
Distance : 6

16
Tree	{ allowSourcelessWarnings () ; return currentAnalysis . parseInto ( Any.ANY ) ; }
Code	{ allowSourcelessWarnings () ; return currentAnalysis . parseInto ( Any.ANY ) ; }
Distance : 8

17
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , n , clazz , type ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , n , clazz , type ) ; }
Distance : 6

18
Tree	{ setBaseItemLabelsVisible ( n ) ; return doParseMillis ( n . of ( n ) , null ) ; }
Code	{ setBaseItemLabelsVisible ( n ) ; return doParseMillis ( n . of ( n ) , null ) ; }
Distance : 11

19
Tree	{ setBaseItemLabelsVisible () ; return currentAnalysis . wasCasted ( Any.ANY ) ; }
Code	{ setBaseItemLabelsVisible () ; return currentAnalysis . wasCasted ( Any.ANY ) ; }
Distance : 8

20
Tree	{ setBaseItemLabelsVisible ( n ) ; return completeAssignmentExpressionParseAtArrow ( n . getParent ( n ) , null ) ; }
Code	{ setBaseItemLabelsVisible ( n ) ; return completeAssignmentExpressionParseAtArrow ( n . getParent ( n ) , null ) ; }
Distance : 11

21
Tree	{ setBaseItemLabelsVisible () ; return completeArrowFunctionParseAtArrow ( Any.ANY , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return completeArrowFunctionParseAtArrow ( Any.ANY , n ) ; }
Distance : 6

22
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , ( n ) null ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , ( n ) null ) ; }
Distance : 6

23
Tree	{ getRegistry () ; return doParseMillis ( Any.ANY , n ) ; }
Code	{ getRegistry () ; return doParseMillis ( Any.ANY , n ) ; }
Distance : 6

24
Tree	{ setBaseItemLabelsVisible () ; return indexOfAny ( n , null ) ; }
Code	{ setBaseItemLabelsVisible () ; return indexOfAny ( n , null ) ; }
Distance : 4

25
Tree	{ setBaseItemLabelsVisible ( n ) ; return fixedOffsetZone ( n . getParent ( n ) , null ) ; }
Code	{ setBaseItemLabelsVisible ( n ) ; return fixedOffsetZone ( n . getParent ( n ) , null ) ; }
Distance : 11

26
Tree	{ setBaseItemLabelsVisible () ; return applyRules ( Any.ANY , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return applyRules ( Any.ANY , n ) ; }
Distance : 6

27
Tree	{ setBaseItemLabelsVisible () ; return indexOfAny ( n , ( n ) null ) ; }
Code	{ setBaseItemLabelsVisible () ; return indexOfAny ( n , ( n ) null ) ; }
Distance : 6

28
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , NUMBER_CONSTANT , Void.TYPE ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , NUMBER_CONSTANT , Void.TYPE ) ; }
Distance : 4

29
Tree	{ setBaseItemLabelsVisible () ; return fixedOffsetZone ( Any.ANY , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return fixedOffsetZone ( Any.ANY , n ) ; }
Distance : 6

30
Tree	{ allowSourcelessWarnings () ; return currentAnalysis . primitiveValueOrNullFor ( Any.ANY ) ; }
Code	{ allowSourcelessWarnings () ; return currentAnalysis . primitiveValueOrNullFor ( Any.ANY ) ; }
Distance : 8

31
Tree	{ setBaseItemLabelsVisible () ; return completeAssignmentExpressionParseAtArrow ( n , null ) ; }
Code	{ setBaseItemLabelsVisible () ; return completeAssignmentExpressionParseAtArrow ( n , null ) ; }
Distance : 4

32
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , n , clazz , clazz ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , n , clazz , clazz ) ; }
Distance : 6

33
Tree	{ setBaseItemLabelsVisible () ; return indexOfAny ( n != null , STRING_CONSTANT ) ; }
Code	{ setBaseItemLabelsVisible () ; return indexOfAny ( n != null , STRING_CONSTANT ) ; }
Distance : 4

34
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( null , n . toStringTree ( n ) ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( null , n . toStringTree ( n ) ) ; }
Distance : 9

35
Tree	{ setBaseItemLabelsVisible () ; return completeAssignmentExpressionParseAtArrow ( n != null , STRING_CONSTANT ) ; }
Code	{ setBaseItemLabelsVisible () ; return completeAssignmentExpressionParseAtArrow ( n != null , STRING_CONSTANT ) ; }
Distance : 4

36
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( n . getParent ( n ) , null ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( n . getParent ( n ) , null ) ; }
Distance : 8

37
Tree	{ setBaseItemLabelsVisible () ; return currentAnalysis . primitiveValueOrNullFor ( this , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return currentAnalysis . primitiveValueOrNullFor ( this , n ) ; }
Distance : 7

38
Tree	{ setBaseItemLabelsVisible () ; return this . getParser ( n , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return this . getParser ( n , n ) ; }
Distance : 7

39
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( n . get ( n ) , null ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( n . get ( n ) , null ) ; }
Distance : 8

40
Tree	{ setBaseItemLabelsVisible () ; return fixedOffsetZone ( STRING_CONSTANT , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return fixedOffsetZone ( STRING_CONSTANT , n ) ; }
Distance : 6

41
Tree	{ allowSourcelessWarnings () ; return doParseMillis ( n . getParent ( n ) , null ) ; }
Code	{ allowSourcelessWarnings () ; return doParseMillis ( n . getParent ( n ) , null ) ; }
Distance : 8

42
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , n ? LocalizedFormats.CARDAN_ANGLES_SINGULARITY : PropertyCollapseLevel.NONE ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , n ? LocalizedFormats.CARDAN_ANGLES_SINGULARITY : PropertyCollapseLevel.NONE ) ; }
Distance : 7

43
Tree	{ setBaseItemLabelsVisible () ; return completeArrowFunctionParseAtArrow ( n != null , STRING_CONSTANT ) ; }
Code	{ setBaseItemLabelsVisible () ; return completeArrowFunctionParseAtArrow ( n != null , STRING_CONSTANT ) ; }
Distance : 4

44
Tree	{ setBaseItemLabelsVisible () ; return completeAssignmentExpressionParseAtArrow ( n , n . getSimplifiedName ( clazz ) , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return completeAssignmentExpressionParseAtArrow ( n , n . getSimplifiedName ( clazz ) , n ) ; }
Distance : 9

45
Tree	{ setBaseItemLabelsVisible () ; return completeArrowFunctionParseAtArrow ( n , null ) ; }
Code	{ setBaseItemLabelsVisible () ; return completeArrowFunctionParseAtArrow ( n , null ) ; }
Distance : 4

46
Tree	{ getRegistry () ; return doParseMillis ( n , null ) ; }
Code	{ getRegistry () ; return doParseMillis ( n , null ) ; }
Distance : 4

47
Tree	{ allowSourcelessWarnings () ; return doParseMillis ( n . get ( n ) , null ) ; }
Code	{ allowSourcelessWarnings () ; return doParseMillis ( n . get ( n ) , null ) ; }
Distance : 8

48
Tree	{ setBaseItemLabelsVisible () ; return applyRules ( n != null , STRING_CONSTANT ) ; }
Code	{ setBaseItemLabelsVisible () ; return applyRules ( n != null , STRING_CONSTANT ) ; }
Distance : 4

49
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( n != null , STRING_CONSTANT ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( n != null , STRING_CONSTANT ) ; }
Distance : 4

50
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , n ? LocalizedFormats.NUMBER_TOO_SMALL : FunctionFlavor.NORMAL ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , n ? LocalizedFormats.NUMBER_TOO_SMALL : FunctionFlavor.NORMAL ) ; }
Distance : 7

51
Tree	{ setBaseItemLabelsVisible () ; return applyRules ( n , null ) ; }
Code	{ setBaseItemLabelsVisible () ; return applyRules ( n , null ) ; }
Distance : 4

52
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , n != null , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , n != null , n ) ; }
Distance : 5

53
Tree	{ getRegistry () ; return doParseMillis ( n , n != null , n ) ; }
Code	{ getRegistry () ; return doParseMillis ( n , n != null , n ) ; }
Distance : 5

54
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( n . getParent ( n ) , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( n . getParent ( n ) , n ) ; }
Distance : 8

55
Tree	{ setBaseItemLabelsVisible () ; return completeArrowFunctionParseAtArrow ( n , n . getSimplifiedName ( clazz ) , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return completeArrowFunctionParseAtArrow ( n , n . getSimplifiedName ( clazz ) , n ) ; }
Distance : 9

56
Tree	{ setBaseItemLabelsVisible ( n ) ; return doParseMillis ( n . getParent ( n ) , null ) ; }
Code	{ setBaseItemLabelsVisible ( n ) ; return doParseMillis ( n . getParent ( n ) , null ) ; }
Distance : 11

57
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( null , n . getFirstChild ( n ) ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( null , n . getFirstChild ( n ) ) ; }
Distance : 9

58
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( null , n . getParent ( n ) ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( null , n . getParent ( n ) ) ; }
Distance : 9

59
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , n . getSimplifiedName ( clazz ) , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , n . getSimplifiedName ( clazz ) , n ) ; }
Distance : 9

60
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( null , n . IEEEremainder ( n ) ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( null , n . IEEEremainder ( n ) ) ; }
Distance : 9

61
Tree	{ setBaseItemLabelsVisible () ; return fixedOffsetZone ( n , null ) ; }
Code	{ setBaseItemLabelsVisible () ; return fixedOffsetZone ( n , null ) ; }
Distance : 4

62
Tree	{ setBaseItemLabelsVisible () ; return indexOfAny ( n . getParent ( n ) , null ) ; }
Code	{ setBaseItemLabelsVisible () ; return indexOfAny ( n . getParent ( n ) , null ) ; }
Distance : 8

63
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , null , null , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , null , null , n ) ; }
Distance : 5

64
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , n , clazz , false ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , n , clazz , false ) ; }
Distance : 6

65
Tree	{ setBaseItemLabelsVisible () ; return completeArrowFunctionParseAtArrow ( n . getParent ( n ) , null ) ; }
Code	{ setBaseItemLabelsVisible () ; return completeArrowFunctionParseAtArrow ( n . getParent ( n ) , null ) ; }
Distance : 8

66
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( null , n . getToken ( n ) ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( null , n . getToken ( n ) ) ; }
Distance : 9

67
Tree	{ setBaseItemLabelsVisible () ; return indexOfAny ( n , n != null , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return indexOfAny ( n , n != null , n ) ; }
Distance : 5

68
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( n . get ( n ) , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( n . get ( n ) , n ) ; }
Distance : 8

69
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , n ? TypeInferenceMode.NEITHER : FunctionFlavor.NORMAL ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , n ? TypeInferenceMode.NEITHER : FunctionFlavor.NORMAL ) ; }
Distance : 7

70
Tree	{ setBaseItemLabelsVisible () ; return completeArrowFunctionParseAtArrow ( n , n , clazz , clazz ) ; }
Code	{ setBaseItemLabelsVisible () ; return completeArrowFunctionParseAtArrow ( n , n , clazz , clazz ) ; }
Distance : 6

71
Tree	{ allowSourcelessWarnings () ; return doParseMillis ( n , null , null , n ) ; }
Code	{ allowSourcelessWarnings () ; return doParseMillis ( n , null , null , n ) ; }
Distance : 5

72
Tree	{ setBaseItemLabelsVisible () ; return currentAnalysis . getParser ( Any.ANY ) ; }
Code	{ setBaseItemLabelsVisible () ; return currentAnalysis . getParser ( Any.ANY ) ; }
Distance : 8

73
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( Any.ANY , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( Any.ANY , n ) ; }
Distance : 6

74
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , n . getSimplifiedName ( n ) , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , n . getSimplifiedName ( n ) , n ) ; }
Distance : 9

75
Tree	{ getRegistry () ; return doParseMillis ( n , n , clazz , clazz ) ; }
Code	{ getRegistry () ; return doParseMillis ( n , n , clazz , clazz ) ; }
Distance : 6

76
Tree	{ allowSourcelessWarnings () ; return doParseMillis ( n . getParent ( n ) , n ) ; }
Code	{ allowSourcelessWarnings () ; return doParseMillis ( n . getParent ( n ) , n ) ; }
Distance : 8

77
Tree	{ getRegistry () ; return doParseMillis ( n != null , STRING_CONSTANT ) ; }
Code	{ getRegistry () ; return doParseMillis ( n != null , STRING_CONSTANT ) ; }
Distance : 4

78
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , null ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , null ) ; }
Distance : 4

79
Tree	{ allowSourcelessWarnings () ; return doParseMillis ( n , n != null , n ) ; }
Code	{ allowSourcelessWarnings () ; return doParseMillis ( n , n != null , n ) ; }
Distance : 5

80
Tree	{ allowSourcelessWarnings () ; return doParseMillis ( n . get ( n ) , n ) ; }
Code	{ allowSourcelessWarnings () ; return doParseMillis ( n . get ( n ) , n ) ; }
Distance : 8

81
Tree	{ setBaseItemLabelsVisible () ; return completeAssignmentExpressionParseAtArrow ( n . getParent ( n ) , null ) ; }
Code	{ setBaseItemLabelsVisible () ; return completeAssignmentExpressionParseAtArrow ( n . getParent ( n ) , null ) ; }
Distance : 8

82
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( null , n . toLowerCase ( n ) ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( null , n . toLowerCase ( n ) ) ; }
Distance : 9

83
Tree	{ allowSourcelessWarnings ( n ) ; return doParseMillis ( n . getParent ( n ) , null ) ; }
Code	{ allowSourcelessWarnings ( n ) ; return doParseMillis ( n . getParent ( n ) , null ) ; }
Distance : 11

84
Tree	{ setBaseItemLabelsVisible () ; return completeAssignmentExpressionParseAtArrow ( n , n != null , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return completeAssignmentExpressionParseAtArrow ( n , n != null , n ) ; }
Distance : 5

85
Tree	{ setBaseItemLabelsVisible () ; return indexOfAny ( n . getParent ( n ) , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return indexOfAny ( n . getParent ( n ) , n ) ; }
Distance : 8

86
Tree	{ allowSourcelessWarnings () ; return doParseMillis ( Any.ANY , n ) ; }
Code	{ allowSourcelessWarnings () ; return doParseMillis ( Any.ANY , n ) ; }
Distance : 6

87
Tree	{ allowSourcelessWarnings () ; return doParseMillis ( n , n ? FunctionFlavor.GENERATOR : FunctionFlavor.NORMAL ) ; }
Code	{ allowSourcelessWarnings () ; return doParseMillis ( n , n ? FunctionFlavor.GENERATOR : FunctionFlavor.NORMAL ) ; }
Distance : 7

88
Tree	{ setBaseItemLabelsVisible () ; return completeAssignmentExpressionParseAtArrow ( n . getParent ( n ) , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return completeAssignmentExpressionParseAtArrow ( n . getParent ( n ) , n ) ; }
Distance : 8

89
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( STRING_CONSTANT , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( STRING_CONSTANT , n ) ; }
Distance : 6

90
Tree	{ setBaseItemLabelsVisible () ; return indexOfAny ( n , n . getSimplifiedName ( clazz ) , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return indexOfAny ( n , n . getSimplifiedName ( clazz ) , n ) ; }
Distance : 9

91
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( n . of ( n ) , null ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( n . of ( n ) , null ) ; }
Distance : 8

92
Tree	{ setBaseItemLabelsVisible () ; return indexOfAny ( n , n , clazz , false ) ; }
Code	{ setBaseItemLabelsVisible () ; return indexOfAny ( n , n , clazz , false ) ; }
Distance : 6

93
Tree	{ allowSourcelessWarnings () ; return doParseMillis ( n , null ) ; }
Code	{ allowSourcelessWarnings () ; return doParseMillis ( n , null ) ; }
Distance : 4

94
Tree	{ allowSourcelessWarnings () ; return doParseMillis ( STRING_CONSTANT , n ) ; }
Code	{ allowSourcelessWarnings () ; return doParseMillis ( STRING_CONSTANT , n ) ; }
Distance : 6

95
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( null , n . getMessage ( n ) ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( null , n . getMessage ( n ) ) ; }
Distance : 9

96
Tree	{ setBaseItemLabelsVisible () ; return fixedOffsetZone ( n != null , STRING_CONSTANT ) ; }
Code	{ setBaseItemLabelsVisible () ; return fixedOffsetZone ( n != null , STRING_CONSTANT ) ; }
Distance : 4

97
Tree	{ setBaseItemLabelsVisible () ; return completeAssignmentExpressionParseAtArrow ( n , ( n ) null ) ; }
Code	{ setBaseItemLabelsVisible () ; return completeAssignmentExpressionParseAtArrow ( n , ( n ) null ) ; }
Distance : 6

98
Tree	{ setBaseItemLabelsVisible () . doParseMillis ( new Returns () , n ) ; super }
Code	{ setBaseItemLabelsVisible () . doParseMillis ( new Returns () , n ) ; super }
Distance : 9

99
Tree	{ setBaseItemLabelsVisible () ; return completeArrowFunctionParseAtArrow ( n , ( n ) null ) ; }
Code	{ setBaseItemLabelsVisible () ; return completeArrowFunctionParseAtArrow ( n , ( n ) null ) ; }
Distance : 6

100
Tree	{ setBaseItemLabelsVisible () . addWrapField ( new Returns () , n ) ; super }
Code	{ setBaseItemLabelsVisible () . addWrapField ( new Returns () , n ) ; super }
Distance : 9

101
Tree	{ setBaseItemLabelsVisible () ; return currentAnalysis . defaultValueFor ( Any.ANY ) ; }
Code	{ setBaseItemLabelsVisible () ; return currentAnalysis . defaultValueFor ( Any.ANY ) ; }
Distance : 8

102
Tree	{ setBaseItemLabelsVisible () ; return indexOfAny ( n , n , clazz , clazz ) ; }
Code	{ setBaseItemLabelsVisible () ; return indexOfAny ( n , n , clazz , clazz ) ; }
Distance : 6

103
Tree	{ setBaseItemLabelsVisible () ; return this . returnFor ( n , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return this . returnFor ( n , n ) ; }
Distance : 7

104
Tree	{ getRegistry () ; return doParseMillis ( n , ( n ) null ) ; }
Code	{ getRegistry () ; return doParseMillis ( n , ( n ) null ) ; }
Distance : 6

105
Tree	{ allowSourcelessWarnings () ; return doParseMillis ( n != null , STRING_CONSTANT ) ; }
Code	{ allowSourcelessWarnings () ; return doParseMillis ( n != null , STRING_CONSTANT ) ; }
Distance : 4

106
Tree	{ allowSourcelessWarnings () ; return doParseMillis ( n , ( n ) null ) ; }
Code	{ allowSourcelessWarnings () ; return doParseMillis ( n , ( n ) null ) ; }
Distance : 6

107
Tree	{ setBaseItemLabelsVisible () ; return fixedOffsetZone ( n , ( n ) null ) ; }
Code	{ setBaseItemLabelsVisible () ; return fixedOffsetZone ( n , ( n ) null ) ; }
Distance : 6

108
Tree	{ setBaseItemLabelsVisible () ; return completeAssignmentExpressionParseAtArrow ( n , n , clazz , false ) ; }
Code	{ setBaseItemLabelsVisible () ; return completeAssignmentExpressionParseAtArrow ( n , n , clazz , false ) ; }
Distance : 6

109
Tree	{ getRegistry () ; return doParseMillis ( n , n . getSimplifiedName ( clazz ) , n ) ; }
Code	{ getRegistry () ; return doParseMillis ( n , n . getSimplifiedName ( clazz ) , n ) ; }
Distance : 9

110
Tree	{ setBaseItemLabelsVisible () ; return completeArrowFunctionParseAtArrow ( n , n != null , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return completeArrowFunctionParseAtArrow ( n , n != null , n ) ; }
Distance : 5

111
Tree	{ allowSourcelessWarnings () ; return currentAnalysis . getParser ( Any.ANY ) ; }
Code	{ allowSourcelessWarnings () ; return currentAnalysis . getParser ( Any.ANY ) ; }
Distance : 8

112
Tree	{ allowSourcelessWarnings () ; return this . getParser ( n , n ) ; }
Code	{ allowSourcelessWarnings () ; return this . getParser ( n , n ) ; }
Distance : 7

113
Tree	{ setBaseItemLabelsVisible ( n ) ; return validateProvider ( n . getParent ( n ) , null ) ; }
Code	{ setBaseItemLabelsVisible ( n ) ; return validateProvider ( n . getParent ( n ) , null ) ; }
Distance : 11

114
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , n ? FunctionFlavor.GENERATOR : LocalizedFormats.EULER_ANGLES_SINGULARITY ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , n ? FunctionFlavor.GENERATOR : LocalizedFormats.EULER_ANGLES_SINGULARITY ) ; }
Distance : 7

115
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , n ? FunctionFlavor.GENERATOR : PropertyCollapseLevel.NONE ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , n ? FunctionFlavor.GENERATOR : PropertyCollapseLevel.NONE ) ; }
Distance : 7

116
Tree	{ setBaseItemLabelsVisible () ; return applyRules ( n , n != null , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return applyRules ( n , n != null , n ) ; }
Distance : 5

117
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( n . of ( n ) , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( n . of ( n ) , n ) ; }
Distance : 8

118
Tree	{ setBaseItemLabelsVisible () . unsupportedCombinationOfAnnotations ( new Returns () , n ) ; super }
Code	{ setBaseItemLabelsVisible () . unsupportedCombinationOfAnnotations ( new Returns () , n ) ; super }
Distance : 9

119
Tree	{ setBaseItemLabelsVisible () . testNotEs6TypedFullError ( new Returns () , n ) ; super }
Code	{ setBaseItemLabelsVisible () . testNotEs6TypedFullError ( new Returns () , n ) ; super }
Distance : 9

120
Tree	{ setBaseItemLabelsVisible () ; return completeArrowFunctionParseAtArrow ( n , null , null , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return completeArrowFunctionParseAtArrow ( n , null , null , n ) ; }
Distance : 5

121
Tree	{ setBaseItemLabelsVisible () ; return currentAnalysis . defaultValueFor ( this , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return currentAnalysis . defaultValueFor ( this , n ) ; }
Distance : 7

122
Tree	{ setBaseItemLabelsVisible () ; return indexOfAny ( Any.ANY , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return indexOfAny ( Any.ANY , n ) ; }
Distance : 6

123
Tree	{ getRegistry () ; return doParseMillis ( n , null , null , n ) ; }
Code	{ getRegistry () ; return doParseMillis ( n , null , null , n ) ; }
Distance : 5

124
Tree	{ setBaseItemLabelsVisible () ; return source.m1 . getParser () . getParser ( n , n , clazz ) ; }
Code	{ setBaseItemLabelsVisible () ; return source.m1 . getParser () . getParser ( n , n , clazz ) ; }
Distance : 9

125
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , n , clazz , clazz . getString ( clazz ) ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , n , clazz , clazz . getString ( clazz ) ) ; }
Distance : 11

126
Tree	{ setBaseItemLabelsVisible () ; return currentAnalysis . getParser ( this , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return currentAnalysis . getParser ( this , n ) ; }
Distance : 7

127
Tree	{ setBaseItemLabelsVisible () ; return applyRules ( n , null , null , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return applyRules ( n , null , null , n ) ; }
Distance : 5

128
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , n , clazz , clazz . getFirstChild ( clazz ) ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , n , clazz , clazz . getFirstChild ( clazz ) ) ; }
Distance : 11

129
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , n ? LocalizedFormats.CARDAN_ANGLES_SINGULARITY : FunctionFlavor.NORMAL ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , n ? LocalizedFormats.CARDAN_ANGLES_SINGULARITY : FunctionFlavor.NORMAL ) ; }
Distance : 7

130
Tree	{ setBaseItemLabelsVisible () ; return Format.COMPACT . getParser () . getParser ( n , n , clazz ) ; }
Code	{ setBaseItemLabelsVisible () ; return Format.COMPACT . getParser () . getParser ( n , n , clazz ) ; }
Distance : 9

131
Tree	{ setBaseItemLabelsVisible () ; return completeArrowFunctionParseAtArrow ( n , n , clazz , false ) ; }
Code	{ setBaseItemLabelsVisible () ; return completeArrowFunctionParseAtArrow ( n , n , clazz , false ) ; }
Distance : 6

132
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , n , clazz , clazz . of ( n ) ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , n , clazz , clazz . of ( n ) ) ; }
Distance : 11

133
Tree	{ setBaseItemLabelsVisible () ; return fixedOffsetZone ( n , n != null , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return fixedOffsetZone ( n , n != null , n ) ; }
Distance : 5

134
Tree	{ setBaseItemLabelsVisible () ; return ArrayUtils.EMPTY_STRING_ARRAY . getParser () . getParser ( n , n , clazz ) ; }
Code	{ setBaseItemLabelsVisible () ; return ArrayUtils.EMPTY_STRING_ARRAY . getParser () . getParser ( n , n , clazz ) ; }
Distance : 9

135
Tree	{ allowSourcelessWarnings () ; return currentAnalysis . getParser () . getParser ( n , n , clazz ) ; }
Code	{ allowSourcelessWarnings () ; return currentAnalysis . getParser () . getParser ( n , n , clazz ) ; }
Distance : 9

136
Tree	{ allowSourcelessWarnings () ; return currentAnalysis . getParser ( this , n ) ; }
Code	{ allowSourcelessWarnings () ; return currentAnalysis . getParser ( this , n ) ; }
Distance : 7

137
Tree	{ allowSourcelessWarnings () ; return currentAnalysis . parseInto () . getParser ( n , n , clazz ) ; }
Code	{ allowSourcelessWarnings () ; return currentAnalysis . parseInto () . getParser ( n , n , clazz ) ; }
Distance : 9

138
Tree	{ allowSourcelessWarnings () ; return doParseMillis ( n , n . getSimplifiedName ( clazz ) , n ) ; }
Code	{ allowSourcelessWarnings () ; return doParseMillis ( n , n . getSimplifiedName ( clazz ) , n ) ; }
Distance : 9

139
Tree	{ setBaseItemLabelsVisible () ; return completeAssignmentExpressionParseAtArrow ( n , n , clazz , clazz ) ; }
Code	{ setBaseItemLabelsVisible () ; return completeAssignmentExpressionParseAtArrow ( n , n , clazz , clazz ) ; }
Distance : 6

140
Tree	{ setBaseItemLabelsVisible () ; return this . doParseMillis ( n , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return this . doParseMillis ( n , n ) ; }
Distance : 7

141
Tree	{ allowSourcelessWarnings () ; return doParseMillis ( null , n . toLowerCase ( n ) ) ; }
Code	{ allowSourcelessWarnings () ; return doParseMillis ( null , n . toLowerCase ( n ) ) ; }
Distance : 9

142
Tree	{ allowSourcelessWarnings () ; return currentAnalysis . parseInto ( this , n ) ; }
Code	{ allowSourcelessWarnings () ; return currentAnalysis . parseInto ( this , n ) ; }
Distance : 7

143
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , NUMBER_CONSTANT , TimeUnit.SECONDS ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , NUMBER_CONSTANT , TimeUnit.SECONDS ) ; }
Distance : 4

144
Tree	{ setBaseItemLabelsVisible () . getInitializer ( new Returns () , n ) ; super }
Code	{ setBaseItemLabelsVisible () . getInitializer ( new Returns () , n ) ; super }
Distance : 9

145
Tree	{ setBaseItemLabelsVisible () ; return applyRules ( n , n , clazz , clazz ) ; }
Code	{ setBaseItemLabelsVisible () ; return applyRules ( n , n , clazz , clazz ) ; }
Distance : 6

146
Tree	{ setBaseItemLabelsVisible () ; return currentAnalysis . wasCasted ( this , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return currentAnalysis . wasCasted ( this , n ) ; }
Distance : 7

147
Tree	{ getRegistry () ; return doParseMillis ( n , n , clazz , false ) ; }
Code	{ getRegistry () ; return doParseMillis ( n , n , clazz , false ) ; }
Distance : 6

148
Tree	{ setBaseItemLabelsVisible () ; return completeArrowFunctionParseAtArrow ( n . getParent ( n ) , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return completeArrowFunctionParseAtArrow ( n . getParent ( n ) , n ) ; }
Distance : 8

149
Tree	{ setBaseItemLabelsVisible () ; return completeAssignmentExpressionParseAtArrow ( Any.ANY , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return completeAssignmentExpressionParseAtArrow ( Any.ANY , n ) ; }
Distance : 6

150
Tree	{ allowSourcelessWarnings () . add ( new Returns () , n ) ; super }
Code	{ allowSourcelessWarnings () . add ( new Returns () , n ) ; super }
Distance : 9

151
Tree	{ allowSourcelessWarnings () ; return doParseMillis ( n , NUMBER_CONSTANT , Void.TYPE ) ; }
Code	{ allowSourcelessWarnings () ; return doParseMillis ( n , NUMBER_CONSTANT , Void.TYPE ) ; }
Distance : 4

152
Tree	{ setBaseItemLabelsVisible () ; return this . unescape ( n , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return this . unescape ( n , n ) ; }
Distance : 7

153
Tree	{ setBaseItemLabelsVisible () ; return currentAnalysis . wasCasted () . getParser ( n , n , clazz ) ; }
Code	{ setBaseItemLabelsVisible () ; return currentAnalysis . wasCasted () . getParser ( n , n , clazz ) ; }
Distance : 9

154
Tree	{ setBaseItemLabelsVisible () . validateObjectPattern ( new Returns () , n ) ; super }
Code	{ setBaseItemLabelsVisible () . validateObjectPattern ( new Returns () , n ) ; super }
Distance : 9

155
Tree	{ allowSourcelessWarnings () ; return this . returnFor ( n , n ) ; }
Code	{ allowSourcelessWarnings () ; return this . returnFor ( n , n ) ; }
Distance : 7

156
Tree	{ setBaseItemLabelsVisible () ; return applyRules ( n , n , clazz , false ) ; }
Code	{ setBaseItemLabelsVisible () ; return applyRules ( n , n , clazz , false ) ; }
Distance : 6

157
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , NUMBER_CONSTANT , LocalizedFormats.INTERNAL_ERROR ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , NUMBER_CONSTANT , LocalizedFormats.INTERNAL_ERROR ) ; }
Distance : 4

158
Tree	{ allowSourcelessWarnings () ; return currentAnalysis . primitiveValueOrNullFor () . getParser ( n , n , clazz ) ; }
Code	{ allowSourcelessWarnings () ; return currentAnalysis . primitiveValueOrNullFor () . getParser ( n , n , clazz ) ; }
Distance : 9

159
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , NUMBER_CONSTANT , export.scope ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , NUMBER_CONSTANT , export.scope ) ; }
Distance : 4

160
Tree	{ setBaseItemLabelsVisible () ; return fixedOffsetZone ( n , null , null , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return fixedOffsetZone ( n , null , null , n ) ; }
Distance : 5

161
Tree	{ allowSourcelessWarnings () ; return currentAnalysis . primitiveValueOrNullFor ( this , n ) ; }
Code	{ allowSourcelessWarnings () ; return currentAnalysis . primitiveValueOrNullFor ( this , n ) ; }
Distance : 7

162
Tree	{ setBaseItemLabelsVisible () ; return currentAnalysis . defaultValueFor () . getParser ( n , n , clazz ) ; }
Code	{ setBaseItemLabelsVisible () ; return currentAnalysis . defaultValueFor () . getParser ( n , n , clazz ) ; }
Distance : 9

163
Tree	{ setBaseItemLabelsVisible () ; return applyRules ( n , ( n ) null ) ; }
Code	{ setBaseItemLabelsVisible () ; return applyRules ( n , ( n ) null ) ; }
Distance : 6

164
Tree	{ setBaseItemLabelsVisible () ; return this . completeArrowFunctionParseAtArrow ( n , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return this . completeArrowFunctionParseAtArrow ( n , n ) ; }
Distance : 7

165
Tree	{ setBaseItemLabelsVisible () ; return internalArray.length . getParser () . getParser ( n , n , clazz ) ; }
Code	{ setBaseItemLabelsVisible () ; return internalArray.length . getParser () . getParser ( n , n , clazz ) ; }
Distance : 9

166
Tree	{ allowSourcelessWarnings () ; return Format.COMPACT . getParser () . getParser ( n , n , clazz ) ; }
Code	{ allowSourcelessWarnings () ; return Format.COMPACT . getParser () . getParser ( n , n , clazz ) ; }
Distance : 9

167
Tree	{ setBaseItemLabelsVisible () ; return this . primitiveValueOrNullFor ( n , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return this . primitiveValueOrNullFor ( n , n ) ; }
Distance : 7

168
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , NUMBER_CONSTANT , calculator.invocationToReturn ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , NUMBER_CONSTANT , calculator.invocationToReturn ) ; }
Distance : 4

169
Tree	{ setBaseItemLabelsVisible () ; return Format.COMPACT . returnFor () . getParser ( n , n , clazz ) ; }
Code	{ setBaseItemLabelsVisible () ; return Format.COMPACT . returnFor () . getParser ( n , n , clazz ) ; }
Distance : 9

170
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , n , clazz , clazz . getFirstChild ( n ) ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , n , clazz , clazz . getFirstChild ( n ) ) ; }
Distance : 11

171
Tree	{ setBaseItemLabelsVisible () ; return currentAnalysis . getParser () . getParser ( n , n , clazz ) ; }
Code	{ setBaseItemLabelsVisible () ; return currentAnalysis . getParser () . getParser ( n , n , clazz ) ; }
Distance : 9

172
Tree	{ allowSourcelessWarnings () ; return doParseMillis ( n , NUMBER_CONSTANT , LocalizedFormats.INTERNAL_ERROR ) ; }
Code	{ allowSourcelessWarnings () ; return doParseMillis ( n , NUMBER_CONSTANT , LocalizedFormats.INTERNAL_ERROR ) ; }
Distance : 4

173
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , n , clazz , clazz . timeParser ( n ) ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , n , clazz , clazz . timeParser ( n ) ) ; }
Distance : 11

174
Tree	{ setBaseItemLabelsVisible () ; return currentAnalysis . parseInto ( this , n ) ; }
Code	{ setBaseItemLabelsVisible () ; return currentAnalysis . parseInto ( this , n ) ; }
Distance : 7

175
Tree	{ setBaseItemLabelsVisible () ; return Format.COMPACT . parseInto () . getParser ( n , n , clazz ) ; }
Code	{ setBaseItemLabelsVisible () ; return Format.COMPACT . parseInto () . getParser ( n , n , clazz ) ; }
Distance : 9

176
Tree	{ setBaseItemLabelsVisible () ; return currentAnalysis . parseInto () . getParser ( n , n , clazz ) ; }
Code	{ setBaseItemLabelsVisible () ; return currentAnalysis . parseInto () . getParser ( n , n , clazz ) ; }
Distance : 9

177
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , n , clazz , clazz . getSimplifiedName ( n ) ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , n , clazz , clazz . getSimplifiedName ( n ) ) ; }
Distance : 11

178
Tree	{ setBaseItemLabelsVisible () ; return fixedOffsetZone ( n , n , clazz , false ) ; }
Code	{ setBaseItemLabelsVisible () ; return fixedOffsetZone ( n , n , clazz , false ) ; }
Distance : 6

179
Tree	{ setBaseItemLabelsVisible () ; return source.sumOfLogs . getParser () . getParser ( n , n , clazz ) ; }
Code	{ setBaseItemLabelsVisible () ; return source.sumOfLogs . getParser () . getParser ( n , n , clazz ) ; }
Distance : 9

180
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , NUMBER_CONSTANT , CheckMissingReturn.MISSING_RETURN_STATEMENT ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , NUMBER_CONSTANT , CheckMissingReturn.MISSING_RETURN_STATEMENT ) ; }
Distance : 4

181
Tree	{ setBaseItemLabelsVisible () ; return currentAnalysis . primitiveValueOrNullFor () . getParser ( n , n , clazz ) ; }
Code	{ setBaseItemLabelsVisible () ; return currentAnalysis . primitiveValueOrNullFor () . getParser ( n , n , clazz ) ; }
Distance : 9

182
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , n , clazz , clazz . getString ( n ) ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , n , clazz , clazz . getString ( n ) ) ; }
Distance : 11

183
Tree	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , n , clazz , clazz . getChronology ( n ) ) ; }
Code	{ setBaseItemLabelsVisible () ; return doParseMillis ( n , n , clazz , clazz . getChronology ( n ) ) ; }
Distance : 11

184
Tree	{ setBaseItemLabelsVisible () ; return currentAnalysis . getParser ( this , n . IEEEremainder ( n ) ) ; }
Code	{ setBaseItemLabelsVisible () ; return currentAnalysis . getParser ( this , n . IEEEremainder ( n ) ) ; }
Distance : 11

185
Tree	{ setBaseItemLabelsVisible () ; return currentAnalysis . parseInto ( this , n . IEEEremainder ( n ) ) ; }
Code	{ setBaseItemLabelsVisible () ; return currentAnalysis . parseInto ( this , n . IEEEremainder ( n ) ) ; }
Distance : 11

186
Tree	{ setBaseItemLabelsVisible () ; return currentAnalysis . getParser ( this , n . toLowerCase ( n ) ) ; }
Code	{ setBaseItemLabelsVisible () ; return currentAnalysis . getParser ( this , n . toLowerCase ( n ) ) ; }
Distance : 11

187
Tree	{ setBaseItemLabelsVisible () ; return currentAnalysis . getParser ( this , n . getFirstChild ( n ) ) ; }
Code	{ setBaseItemLabelsVisible () ; return currentAnalysis . getParser ( this , n . getFirstChild ( n ) ) ; }
Distance : 11

188
Tree	{ setBaseItemLabelsVisible () ; return currentAnalysis . primitiveValueOrNullFor ( this , n . IEEEremainder ( n ) ) ; }
Code	{ setBaseItemLabelsVisible () ; return currentAnalysis . primitiveValueOrNullFor ( this , n . IEEEremainder ( n ) ) ; }
Distance : 11

189
Tree	{ setBaseItemLabelsVisible () ; return currentAnalysis . parseInto ( this , n . toLowerCase ( n ) ) ; }
Code	{ setBaseItemLabelsVisible () ; return currentAnalysis . parseInto ( this , n . toLowerCase ( n ) ) ; }
Distance : 11

190
Tree	{ setBaseItemLabelsVisible () ; return currentAnalysis . parseInto ( this , n . getFirstChild ( n ) ) ; }
Code	{ setBaseItemLabelsVisible () ; return currentAnalysis . parseInto ( this , n . getFirstChild ( n ) ) ; }
Distance : 11

191
Tree	{ matchedNodeInfo . parseDate ( ArrayUtils.EMPTY_STRING_ARRAY ) ; return doParseMillis ( n . getParent ( n ) , null ) ; }
Code	{ matchedNodeInfo . parseDate ( ArrayUtils.EMPTY_STRING_ARRAY ) ; return doParseMillis ( n . getParent ( n ) , null ) ; }
Distance : 13

192
Tree	{ matchedNodeInfo . parseDate ( TokenType.STRING ) ; return doParseMillis ( n . getParent ( n ) , null ) ; }
Code	{ matchedNodeInfo . parseDate ( TokenType.STRING ) ; return doParseMillis ( n . getParent ( n ) , null ) ; }
Distance : 13

193
Tree	{ typesIndexedByProperty . parseDate ( ArrayUtils.EMPTY_STRING_ARRAY ) ; return doParseMillis ( n . getParent ( n ) , null ) ; }
Code	{ typesIndexedByProperty . parseDate ( ArrayUtils.EMPTY_STRING_ARRAY ) ; return doParseMillis ( n . getParent ( n ) , null ) ; }
Distance : 13

194
Tree	{ typesIndexedByProperty . parseDate ( TokenType.STRING ) ; return doParseMillis ( n . getParent ( n ) , null ) ; }
Code	{ typesIndexedByProperty . parseDate ( TokenType.STRING ) ; return doParseMillis ( n . getParent ( n ) , null ) ; }
Distance : 13

195
Tree	{ setBaseItemLabelsVisible () ; return currentAnalysis . getParser ( this , n . toStringTree ( n ) ) ; }
Code	{ setBaseItemLabelsVisible () ; return currentAnalysis . getParser ( this , n . toStringTree ( n ) ) ; }
Distance : 11

196
Tree	{ messages . parseDate ( TokenType.STRING ) ; return doParseMillis ( n . getParent ( n ) , null ) ; }
Code	{ messages . parseDate ( TokenType.STRING ) ; return doParseMillis ( n . getParent ( n ) , null ) ; }
Distance : 13

197
Tree	{ messages . parseDate ( ArrayUtils.EMPTY_STRING_ARRAY ) ; return doParseMillis ( n . getParent ( n ) , null ) ; }
Code	{ messages . parseDate ( ArrayUtils.EMPTY_STRING_ARRAY ) ; return doParseMillis ( n . getParent ( n ) , null ) ; }
Distance : 13

198
Tree	{ matchedNodeInfo . parseDate ( ArrayUtils.EMPTY_STRING_ARRAY ) ; return doParseMillis ( n . of ( n ) , null ) ; }
Code	{ matchedNodeInfo . parseDate ( ArrayUtils.EMPTY_STRING_ARRAY ) ; return doParseMillis ( n . of ( n ) , null ) ; }
Distance : 13

199
Tree	{ matchedNodeInfo . parseDate ( TokenType.STRING ) ; return doParseMillis ( n . of ( n ) , null ) ; }
Code	{ matchedNodeInfo . parseDate ( TokenType.STRING ) ; return doParseMillis ( n . of ( n ) , null ) ; }
Distance : 13

========================================================================


========================================================================
Example Number: 23
Parent Code is: 
String code = toSource ( root , sourceMap ) ;
-------------------------------------------------------------------------------
Child code is: 
String code = toSource ( root , sourceMap , inputSeqNum == NUMBER_CONSTANT ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=code}) (204{val==}) (32 (802{val=toSource}) (214{val=(}) (800{val=root}) (234{val=,}) (800{val=sourceMap}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=code}) (204{val==}) (32 (802{val=toSource}) (214{val=(}) (800{val=root}) (234{val=,}) (800{val=sourceMap}) (234{val=,}) (27 (800{val=inputSeqNum}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/64/parent/src_com_google_javascript_jscomp_Compiler.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	String code = resolveVariable ( root ) ;
Code	String code = resolveVariable ( root ) ;
Distance : 7

1
Tree	String code = createFromTypeNodesInternal ( root , code ) ;
Code	String code = createFromTypeNodesInternal ( root , code ) ;
Distance : 6

2
Tree	String code = resolveVariable ( root , rule ) ;
Code	String code = resolveVariable ( root , rule ) ;
Distance : 6

3
Tree	String code = resolveVariable ( root , sourceMap , cb ) ;
Code	String code = resolveVariable ( root , sourceMap , cb ) ;
Distance : 4

4
Tree	String code = resolveVariable ( root , code , cb ) ;
Code	String code = resolveVariable ( root , code , cb ) ;
Distance : 5

5
Tree	String code = extractCauseUnchecked ( root , sourceMap , sourceMap ) ;
Code	String code = extractCauseUnchecked ( root , sourceMap , sourceMap ) ;
Distance : 4

6
Tree	String code = resolveVariable ( root , sourceMap , code ) ;
Code	String code = resolveVariable ( root , sourceMap , code ) ;
Distance : 4

7
Tree	String code = resolveVariable ( root , sourceMap , false ) ;
Code	String code = resolveVariable ( root , sourceMap , false ) ;
Distance : 4

8
Tree	String code = Entities ( root ) ;
Code	String code = Entities ( root ) ;
Distance : 7

9
Tree	String code = resolveVariable ( anyString () , STRING_CONSTANT , root , sourceMap ) ;
Code	String code = resolveVariable ( anyString () , STRING_CONSTANT , root , sourceMap ) ;
Distance : 7

10
Tree	String code = resolveVariable ( root , flags.outputWrapper ) ;
Code	String code = resolveVariable ( root , flags.outputWrapper ) ;
Distance : 6

11
Tree	String code = Entities . trim ( this , root ) ;
Code	String code = Entities . trim ( this , root ) ;
Distance : 8

12
Tree	String code = resolveVariable ( root , sourceMap ) ;
Code	String code = resolveVariable ( root , sourceMap ) ;
Distance : 5

13
Tree	String code = resolveVariable ( root , code ) ;
Code	String code = resolveVariable ( root , code ) ;
Distance : 6

14
Tree	String code = graph . readPaint ( root ) ;
Code	String code = graph . readPaint ( root ) ;
Distance : 9

15
Tree	String code = resolveVariable ( trim () , STRING_CONSTANT , root , sourceMap ) ;
Code	String code = resolveVariable ( trim () , STRING_CONSTANT , root , sourceMap ) ;
Distance : 7

16
Tree	String code = JAR_URL_PREFIX ( root , sourceMap ) ;
Code	String code = JAR_URL_PREFIX ( root , sourceMap ) ;
Distance : 5

17
Tree	String code = extractCauseUnchecked ( root , sourceMap ) ;
Code	String code = extractCauseUnchecked ( root , sourceMap ) ;
Distance : 5

18
Tree	String code = Entities ( root , sourceMap ) ;
Code	String code = Entities ( root , sourceMap ) ;
Distance : 5

19
Tree	String code = extractCauseUnchecked ( root , code , sourceMap ) ;
Code	String code = extractCauseUnchecked ( root , code , sourceMap ) ;
Distance : 5

20
Tree	String code = JAR_URL_PREFIX ( root , sourceMap , sourceMap ) ;
Code	String code = JAR_URL_PREFIX ( root , sourceMap , sourceMap ) ;
Distance : 4

21
Tree	String code = Entities . trim ( root , sourceMap ) ;
Code	String code = Entities . trim ( root , sourceMap ) ;
Distance : 7

22
Tree	String code = MockitoCore ( root , code ) ;
Code	String code = MockitoCore ( root , code ) ;
Distance : 6

23
Tree	String code = resolveVariable ( lines () , STRING_CONSTANT , root , sourceMap ) ;
Code	String code = resolveVariable ( lines () , STRING_CONSTANT , root , sourceMap ) ;
Distance : 7

24
Tree	String code = resolveVariable ( lines () , root ) ;
Code	String code = resolveVariable ( lines () , root ) ;
Distance : 7

25
Tree	String code = Entities . readPaint ( root , sourceMap ) ;
Code	String code = Entities . readPaint ( root , sourceMap ) ;
Distance : 7

26
Tree	String code = newParserConfig ( root ) ;
Code	String code = newParserConfig ( root ) ;
Distance : 7

27
Tree	String code = replaceObject ( root ) ;
Code	String code = replaceObject ( root ) ;
Distance : 7

28
Tree	String code = resolveVariable ( root , sourceMap , sourceMap ) ;
Code	String code = resolveVariable ( root , sourceMap , sourceMap ) ;
Distance : 4

29
Tree	String code = resolveVariable () . doReturn ( root ) ;
Code	String code = resolveVariable () . doReturn ( root ) ;
Distance : 9

30
Tree	String code = resolveVariable ( root , sourceMap , sourceMap , cb ) ;
Code	String code = resolveVariable ( root , sourceMap , sourceMap , cb ) ;
Distance : 4

31
Tree	String code = Entities ( root , code ) ;
Code	String code = Entities ( root , code ) ;
Distance : 6

32
Tree	String code = MockitoCore ( root , code , sourceMap ) ;
Code	String code = MockitoCore ( root , code , sourceMap ) ;
Distance : 5

33
Tree	String code = graph ( root , code ) ;
Code	String code = graph ( root , code ) ;
Distance : 6

34
Tree	String code = createFromTypeNodesInternal ( root , sourceMap , sourceMap ) ;
Code	String code = createFromTypeNodesInternal ( root , sourceMap , sourceMap ) ;
Distance : 4

35
Tree	String code = Entities . trim ( this , root , sourceMap ) ;
Code	String code = Entities . trim ( this , root , sourceMap ) ;
Distance : 8

36
Tree	String code = extractCauseUnchecked ( root , code ) ;
Code	String code = extractCauseUnchecked ( root , code ) ;
Distance : 6

37
Tree	String code = resolveVariable ( root , code , sourceMap ) ;
Code	String code = resolveVariable ( root , code , sourceMap ) ;
Distance : 5

38
Tree	String code = graph . trim ( this , root , sourceMap ) ;
Code	String code = graph . trim ( this , root , sourceMap ) ;
Distance : 8

39
Tree	String code = CharSequenceUtils ( root ) ;
Code	String code = CharSequenceUtils ( root ) ;
Distance : 7

40
Tree	String code = Entities . readPaint ( root ) ;
Code	String code = Entities . readPaint ( root ) ;
Distance : 9

41
Tree	String code = ( ( root ) this ) . returnFor ( root , code ) ;
Code	String code = ( ( root ) this ) . returnFor ( root , code ) ;
Distance : 10

42
Tree	String code = JAR_URL_PREFIX ( root , code ) ;
Code	String code = JAR_URL_PREFIX ( root , code ) ;
Distance : 6

43
Tree	String code = MockitoCore ( root ) ;
Code	String code = MockitoCore ( root ) ;
Distance : 7

44
Tree	String code = resolveVariable ( root , TokenType.STRING ) ;
Code	String code = resolveVariable ( root , TokenType.STRING ) ;
Distance : 6

45
Tree	String code = graph . trim ( root ) ;
Code	String code = graph . trim ( root ) ;
Distance : 9

46
Tree	String code = Entities . createFloat ( root ) ;
Code	String code = Entities . createFloat ( root ) ;
Distance : 9

47
Tree	String code = Entities . createFloat ( this , root , sourceMap ) ;
Code	String code = Entities . createFloat ( this , root , sourceMap ) ;
Distance : 8

48
Tree	String code = ArgUtils ( root ) ;
Code	String code = ArgUtils ( root ) ;
Distance : 7

49
Tree	String code = graph ( root , sourceMap , sourceMap ) ;
Code	String code = graph ( root , sourceMap , sourceMap ) ;
Distance : 4

50
Tree	String code = Entities ( root , code , sourceMap ) ;
Code	String code = Entities ( root , code , sourceMap ) ;
Distance : 5

51
Tree	String code = MockitoCore . trim ( root , sourceMap ) ;
Code	String code = MockitoCore . trim ( root , sourceMap ) ;
Distance : 7

52
Tree	String code = Entities . trim ( root , code ) ;
Code	String code = Entities . trim ( root , code ) ;
Distance : 8

53
Tree	String code = resolveVariable ( root , sourceMap , sourceMap , sourceMap ) ;
Code	String code = resolveVariable ( root , sourceMap , sourceMap , sourceMap ) ;
Distance : 4

54
Tree	String code = MockitoCore . readPaint ( this , root ) ;
Code	String code = MockitoCore . readPaint ( this , root ) ;
Distance : 8

55
Tree	String code = MockitoCore . readPaint ( root , sourceMap ) ;
Code	String code = MockitoCore . readPaint ( root , sourceMap ) ;
Distance : 7

56
Tree	String code = new_TestNG_with_failure_recorder_for ( root ) ;
Code	String code = new_TestNG_with_failure_recorder_for ( root ) ;
Distance : 7

57
Tree	String code = resolveVariable () . describe ( root ) ;
Code	String code = resolveVariable () . describe ( root ) ;
Distance : 9

58
Tree	String code = MockitoCore ( root , sourceMap ) ;
Code	String code = MockitoCore ( root , sourceMap ) ;
Distance : 5

59
Tree	String code = graph ( root , code , sourceMap ) ;
Code	String code = graph ( root , code , sourceMap ) ;
Distance : 5

60
Tree	String code = extractCauseUnchecked ( root ) ;
Code	String code = extractCauseUnchecked ( root ) ;
Distance : 7

61
Tree	String code = resolveVariable ( trim () , root ) ;
Code	String code = resolveVariable ( trim () , root ) ;
Distance : 7

62
Tree	String code = createFromTypeNodesInternal ( root , sourceMap ) ;
Code	String code = createFromTypeNodesInternal ( root , sourceMap ) ;
Distance : 5

63
Tree	String code = MockitoCore . trim ( this , root ) ;
Code	String code = MockitoCore . trim ( this , root ) ;
Distance : 8

64
Tree	String code = resolveVariable () . trim ( root , sourceMap ) ;
Code	String code = resolveVariable () . trim ( root , sourceMap ) ;
Distance : 8

65
Tree	String code = graph ( root ) ;
Code	String code = graph ( root ) ;
Distance : 7

66
Tree	String code = resolveVariable ( join () , STRING_CONSTANT , root , sourceMap ) ;
Code	String code = resolveVariable ( join () , STRING_CONSTANT , root , sourceMap ) ;
Distance : 7

67
Tree	String code = MockitoCore . trim ( this , root , sourceMap ) ;
Code	String code = MockitoCore . trim ( this , root , sourceMap ) ;
Distance : 8

68
Tree	String code = JAR_URL_PREFIX ( root ) ;
Code	String code = JAR_URL_PREFIX ( root ) ;
Distance : 7

69
Tree	String code = JAR_URL_PREFIX . trim ( root , sourceMap ) ;
Code	String code = JAR_URL_PREFIX . trim ( root , sourceMap ) ;
Distance : 7

70
Tree	String code = extractCauseUnchecked ( root , sourceMap , false ) ;
Code	String code = extractCauseUnchecked ( root , sourceMap , false ) ;
Distance : 4

71
Tree	String code = graph ( root , sourceMap ) ;
Code	String code = graph ( root , sourceMap ) ;
Distance : 5

72
Tree	String code = createFromTypeNodesInternal ( root ) ;
Code	String code = createFromTypeNodesInternal ( root ) ;
Distance : 7

73
Tree	String code = resolveVariable ( anyString () , root ) ;
Code	String code = resolveVariable ( anyString () , root ) ;
Distance : 7

74
Tree	String code = createFromTypeNodesInternal ( root , code , false ) ;
Code	String code = createFromTypeNodesInternal ( root , code , false ) ;
Distance : 5

75
Tree	String code = resolveVariable ( lines () , STRING_CONSTANT , externs , sourceMap ) ;
Code	String code = resolveVariable ( lines () , STRING_CONSTANT , externs , sourceMap ) ;
Distance : 7

76
Tree	String code = graph . trim ( this , root ) ;
Code	String code = graph . trim ( this , root ) ;
Distance : 8

77
Tree	String code = newParserConfig ( root , sourceMap ) ;
Code	String code = newParserConfig ( root , sourceMap ) ;
Distance : 5

78
Tree	String code = resolveVariable () . addWrapField ( root ) ;
Code	String code = resolveVariable () . addWrapField ( root ) ;
Distance : 9

79
Tree	String code = extractCauseUnchecked ( root , code , false ) ;
Code	String code = extractCauseUnchecked ( root , code , false ) ;
Distance : 5

80
Tree	String code = Entities . trim ( STRING_CONSTANT , root ) ;
Code	String code = Entities . trim ( STRING_CONSTANT , root ) ;
Distance : 8

81
Tree	String code = Entities . categoryLabelToolTips ( root ) ;
Code	String code = Entities . categoryLabelToolTips ( root ) ;
Distance : 9

82
Tree	String code = resolveVariable () . trim ( root ) ;
Code	String code = resolveVariable () . trim ( root ) ;
Distance : 9

83
Tree	String code = Entities . readPaint ( this , root ) ;
Code	String code = Entities . readPaint ( this , root ) ;
Distance : 8

84
Tree	String code = resolveVariable ( lines () , STRING_CONSTANT , root , code ) ;
Code	String code = resolveVariable ( lines () , STRING_CONSTANT , root , code ) ;
Distance : 7

85
Tree	String code = resolveVariable ( root , this . excludeFieldNames ) ;
Code	String code = resolveVariable ( root , this . excludeFieldNames ) ;
Distance : 6

86
Tree	String code = resolveVariable ( root , code , sourceMap , sourceMap ) ;
Code	String code = resolveVariable ( root , code , sourceMap , sourceMap ) ;
Distance : 5

87
Tree	String code = resolveVariable () . setTimeZone ( root ) ;
Code	String code = resolveVariable () . setTimeZone ( root ) ;
Distance : 9

88
Tree	String code = TokenType.STRING . trim ( root , sourceMap ) ;
Code	String code = TokenType.STRING . trim ( root , sourceMap ) ;
Distance : 7

89
Tree	String code = resolveVariable ( createSparseMatrix () , STRING_CONSTANT , root , sourceMap ) ;
Code	String code = resolveVariable ( createSparseMatrix () , STRING_CONSTANT , root , sourceMap ) ;
Distance : 7

90
Tree	String code = resolveVariable ( root , rule , false ) ;
Code	String code = resolveVariable ( root , rule , false ) ;
Distance : 5

91
Tree	String code = resolveVariable () . trim ( root , code ) ;
Code	String code = resolveVariable () . trim ( root , code ) ;
Distance : 9

92
Tree	String code = MockitoCore . trim ( root ) ;
Code	String code = MockitoCore . trim ( root ) ;
Distance : 9

93
Tree	String code = graph . trim ( root , sourceMap ) ;
Code	String code = graph . trim ( root , sourceMap ) ;
Distance : 7

94
Tree	String code = Coordinates1D.NaN . trim ( root , sourceMap ) ;
Code	String code = Coordinates1D.NaN . trim ( root , sourceMap ) ;
Distance : 7

95
Tree	String code = JAR_URL_PREFIX . trim ( this , root ) ;
Code	String code = JAR_URL_PREFIX . trim ( this , root ) ;
Distance : 8

96
Tree	String code = CompilerTestCaseUtils ( root ) ;
Code	String code = CompilerTestCaseUtils ( root ) ;
Distance : 7

97
Tree	String code = Entities . trim ( root ) ;
Code	String code = Entities . trim ( root ) ;
Distance : 9

98
Tree	String code = createFromTypeNodesInternal ( root , sourceMap , false ) ;
Code	String code = createFromTypeNodesInternal ( root , sourceMap , false ) ;
Distance : 4

99
Tree	String code = ( ( root ) this ) . returnFor ( externs , sourceMap ) ;
Code	String code = ( ( root ) this ) . returnFor ( externs , sourceMap ) ;
Distance : 10

100
Tree	String code = ( ( root ) this ) . describe ( externs , sourceMap ) ;
Code	String code = ( ( root ) this ) . describe ( externs , sourceMap ) ;
Distance : 10

101
Tree	String code = newParserConfig ( root , sourceMap , false ) ;
Code	String code = newParserConfig ( root , sourceMap , false ) ;
Distance : 4

102
Tree	String code = graph . readPaint ( this , root ) ;
Code	String code = graph . readPaint ( this , root ) ;
Distance : 8

103
Tree	String code = extractCauseUnchecked ( lines () , STRING_CONSTANT , root , sourceMap ) ;
Code	String code = extractCauseUnchecked ( lines () , STRING_CONSTANT , root , sourceMap ) ;
Distance : 7

104
Tree	String code = trim ( root ) ;
Code	String code = trim ( root ) ;
Distance : 7

105
Tree	String code = ( ( root ) this ) . returnFor ( root , sourceMap ) ;
Code	String code = ( ( root ) this ) . returnFor ( root , sourceMap ) ;
Distance : 10

106
Tree	String code = Entities . trim ( root , false ) ;
Code	String code = Entities . trim ( root , false ) ;
Distance : 8

107
Tree	String code = resolveVariable ( root , this . extraInterfaces ) ;
Code	String code = resolveVariable ( root , this . extraInterfaces ) ;
Distance : 6

108
Tree	String code = resolveVariable ( root , this . paint ) ;
Code	String code = resolveVariable ( root , this . paint ) ;
Distance : 6

109
Tree	String code = resolveVariable ( root , code , cb , sourceMap ) ;
Code	String code = resolveVariable ( root , code , cb , sourceMap ) ;
Distance : 5

110
Tree	String code = JAR_URL_PREFIX . trim ( this , root , sourceMap ) ;
Code	String code = JAR_URL_PREFIX . trim ( this , root , sourceMap ) ;
Distance : 8

111
Tree	String code = Entities . readPaint ( this , root , sourceMap ) ;
Code	String code = Entities . readPaint ( this , root , sourceMap ) ;
Distance : 8

112
Tree	String code = MockitoCore . readPaint ( root ) ;
Code	String code = MockitoCore . readPaint ( root ) ;
Distance : 9

113
Tree	String code = resolveVariable ( root , sourceMap , cb , cb ) ;
Code	String code = resolveVariable ( root , sourceMap , cb , cb ) ;
Distance : 4

114
Tree	String code = extractCauseUnchecked () . trim ( root ) ;
Code	String code = extractCauseUnchecked () . trim ( root ) ;
Distance : 9

115
Tree	String code = resolveVariable ( root , this . code ) ;
Code	String code = resolveVariable ( root , this . code ) ;
Distance : 6

116
Tree	String code = Entities . readPaint ( root , false ) ;
Code	String code = Entities . readPaint ( root , false ) ;
Distance : 8

117
Tree	String code = resolveVariable ( root , code , sourceMap , cb ) ;
Code	String code = resolveVariable ( root , code , sourceMap , cb ) ;
Distance : 5

118
Tree	String code = extractCauseUnchecked ( root , sourceMap , sourceMap , sourceMap ) ;
Code	String code = extractCauseUnchecked ( root , sourceMap , sourceMap , sourceMap ) ;
Distance : 4

119
Tree	String code = resolveVariable () . anyString ( root ) ;
Code	String code = resolveVariable () . anyString ( root ) ;
Distance : 9

120
Tree	String code = graph . readPaint ( this , root , sourceMap ) ;
Code	String code = graph . readPaint ( this , root , sourceMap ) ;
Distance : 8

121
Tree	String code = ( ( root ) this ) . returnMap ( root , sourceMap ) ;
Code	String code = ( ( root ) this ) . returnMap ( root , sourceMap ) ;
Distance : 10

122
Tree	String code = getShortNameForRequire ( root ) ;
Code	String code = getShortNameForRequire ( root ) ;
Distance : 7

123
Tree	String code = resolveVariable () . anyString ( root , sourceMap ) ;
Code	String code = resolveVariable () . anyString ( root , sourceMap ) ;
Distance : 8

124
Tree	String code = source.sumOfLogs . trim ( root , sourceMap ) ;
Code	String code = source.sumOfLogs . trim ( root , sourceMap ) ;
Distance : 7

125
Tree	String code = resolveVariable ( root , sourceMap , cb , sourceMap ) ;
Code	String code = resolveVariable ( root , sourceMap , cb , sourceMap ) ;
Distance : 4

126
Tree	String code = Entities ( root , sourceMap , sourceMap ) ;
Code	String code = Entities ( root , sourceMap , sourceMap ) ;
Distance : 4

127
Tree	String code = MockitoCore . readPaint ( this , root , sourceMap ) ;
Code	String code = MockitoCore . readPaint ( this , root , sourceMap ) ;
Distance : 8

128
Tree	String code = extractCauseUnchecked ( root , this . code ) ;
Code	String code = extractCauseUnchecked ( root , this . code ) ;
Distance : 6

129
Tree	String code = resolveVariable () . doReturn ( root , sourceMap ) ;
Code	String code = resolveVariable () . doReturn ( root , sourceMap ) ;
Distance : 8

130
Tree	String code = JAR_URL_PREFIX . trim ( root ) ;
Code	String code = JAR_URL_PREFIX . trim ( root ) ;
Distance : 9

131
Tree	String code = JAR_URL_PREFIX ( root , code , sourceMap ) ;
Code	String code = JAR_URL_PREFIX ( root , code , sourceMap ) ;
Distance : 5

132
Tree	String code = StandardBasicTypes.INTEGER . trim ( root , sourceMap ) ;
Code	String code = StandardBasicTypes.INTEGER . trim ( root , sourceMap ) ;
Distance : 7

133
Tree	String code = resolveVariable ( root , code , false ) ;
Code	String code = resolveVariable ( root , code , false ) ;
Distance : 5

134
Tree	String code = rangeType ( root ) ;
Code	String code = rangeType ( root ) ;
Distance : 7

135
Tree	String code = resolveVariable ( join () , root ) ;
Code	String code = resolveVariable ( join () , root ) ;
Distance : 7

136
Tree	String code = MockitoCore . trim ( root , false ) ;
Code	String code = MockitoCore . trim ( root , false ) ;
Distance : 8

137
Tree	String code = StandardBasicTypes.TIME . trim ( root , sourceMap ) ;
Code	String code = StandardBasicTypes.TIME . trim ( root , sourceMap ) ;
Distance : 7

138
Tree	String code = ( ( root ) this ) . returnMap ( externs , sourceMap ) ;
Code	String code = ( ( root ) this ) . returnMap ( externs , sourceMap ) ;
Distance : 10

139
Tree	String code = resolveVariable ( root , this . capturingMatcher ) ;
Code	String code = resolveVariable ( root , this . capturingMatcher ) ;
Distance : 6

140
Tree	String code = Entities . createFloat ( this , root ) ;
Code	String code = Entities . createFloat ( this , root ) ;
Distance : 8

141
Tree	String code = Entities . createFloat ( root , sourceMap ) ;
Code	String code = Entities . createFloat ( root , sourceMap ) ;
Distance : 7

142
Tree	String code = resolveVariable ( root , this . stub ) ;
Code	String code = resolveVariable ( root , this . stub ) ;
Distance : 6

143
Tree	String code = MockitoCore . trim ( root , sourceMap , sourceMap ) ;
Code	String code = MockitoCore . trim ( root , sourceMap , sourceMap ) ;
Distance : 6

144
Tree	String code = source.m1 . trim ( root , sourceMap ) ;
Code	String code = source.m1 . trim ( root , sourceMap ) ;
Distance : 7

145
Tree	String code = MockitoCore ( root , sourceMap , sourceMap ) ;
Code	String code = MockitoCore ( root , sourceMap , sourceMap ) ;
Distance : 4

146
Tree	String code = MockitoCore . trim ( STRING_CONSTANT , root ) ;
Code	String code = MockitoCore . trim ( STRING_CONSTANT , root ) ;
Distance : 8

147
Tree	String code = resolveVariable ( root , System.out ) ;
Code	String code = resolveVariable ( root , System.out ) ;
Distance : 6

148
Tree	String code = Coordinates1D.NaN . trim ( root , code ) ;
Code	String code = Coordinates1D.NaN . trim ( root , code ) ;
Distance : 8

149
Tree	String code = extractCauseUnchecked ( lines () , root ) ;
Code	String code = extractCauseUnchecked ( lines () , root ) ;
Distance : 7

150
Tree	String code = graph . trim ( root , false ) ;
Code	String code = graph . trim ( root , false ) ;
Distance : 8

151
Tree	String code = MockitoCore . categoryLabelToolTips ( root ) ;
Code	String code = MockitoCore . categoryLabelToolTips ( root ) ;
Distance : 9

152
Tree	String code = resolveVariable ( root , this . ISODateTimeFormat ) ;
Code	String code = resolveVariable ( root , this . ISODateTimeFormat ) ;
Distance : 6

153
Tree	String code = resolveVariable ( root , CheckConformance.CONFORMANCE_VIOLATION ) ;
Code	String code = resolveVariable ( root , CheckConformance.CONFORMANCE_VIOLATION ) ;
Distance : 6

154
Tree	String code = graph . trim ( STRING_CONSTANT , root ) ;
Code	String code = graph . trim ( STRING_CONSTANT , root ) ;
Distance : 8

155
Tree	String code = Entities . readPaint ( root , sourceMap , sourceMap ) ;
Code	String code = Entities . readPaint ( root , sourceMap , sourceMap ) ;
Distance : 6

156
Tree	String code = Entities . createFloat ( root , sourceMap , sourceMap ) ;
Code	String code = Entities . createFloat ( root , sourceMap , sourceMap ) ;
Distance : 6

157
Tree	String code = resolveVariable () . toInvocation ( root ) ;
Code	String code = resolveVariable () . toInvocation ( root ) ;
Distance : 9

158
Tree	String code = resolveVariable () . toInvocation ( root , sourceMap ) ;
Code	String code = resolveVariable () . toInvocation ( root , sourceMap ) ;
Distance : 8

159
Tree	String code = ( ( root ) this ) . toThrow ( externs , sourceMap ) ;
Code	String code = ( ( root ) this ) . toThrow ( externs , sourceMap ) ;
Distance : 10

160
Tree	String code = Entities . createFloat ( STRING_CONSTANT , root ) ;
Code	String code = Entities . createFloat ( STRING_CONSTANT , root ) ;
Distance : 8

161
Tree	String code = graph . categoryLabelToolTips ( root ) ;
Code	String code = graph . categoryLabelToolTips ( root ) ;
Distance : 9

162
Tree	String code = ( ( root ) this ) . returnFor ( externs , code ) ;
Code	String code = ( ( root ) this ) . returnFor ( externs , code ) ;
Distance : 10

163
Tree	String code = Entities . readPaint ( STRING_CONSTANT , root ) ;
Code	String code = Entities . readPaint ( STRING_CONSTANT , root ) ;
Distance : 8

164
Tree	String code = resolveVariable () . setTimeZone ( root , sourceMap ) ;
Code	String code = resolveVariable () . setTimeZone ( root , sourceMap ) ;
Distance : 8

165
Tree	String code = source.moment . trim ( root , sourceMap ) ;
Code	String code = source.moment . trim ( root , sourceMap ) ;
Distance : 7

166
Tree	String code = Entities . createFloat ( root , false ) ;
Code	String code = Entities . createFloat ( root , false ) ;
Distance : 8

167
Tree	String code = Entities . trim ( root , sourceMap , sourceMap ) ;
Code	String code = Entities . trim ( root , sourceMap , sourceMap ) ;
Distance : 6

168
Tree	String code = resolveVariable ( createSparseMatrix () , root ) ;
Code	String code = resolveVariable ( createSparseMatrix () , root ) ;
Distance : 7

169
Tree	String code = resolveVariable () . addWrapField ( root , sourceMap ) ;
Code	String code = resolveVariable () . addWrapField ( root , sourceMap ) ;
Distance : 8

170
Tree	String code = graph . trim ( root , sourceMap , sourceMap ) ;
Code	String code = graph . trim ( root , sourceMap , sourceMap ) ;
Distance : 6

171
Tree	String code = createFromTypeNodesInternal ( lines () , root ) ;
Code	String code = createFromTypeNodesInternal ( lines () , root ) ;
Distance : 7

172
Tree	String code = extractCauseUnchecked ( root , TokenType.STRING ) ;
Code	String code = extractCauseUnchecked ( root , TokenType.STRING ) ;
Distance : 6

173
Tree	String code = MockitoCore . readPaint ( root , false ) ;
Code	String code = MockitoCore . readPaint ( root , false ) ;
Distance : 8

174
Tree	String code = resolveVariable () . doReturn ( root , code ) ;
Code	String code = resolveVariable () . doReturn ( root , code ) ;
Distance : 9

175
Tree	String code = Entities . trim ( this . root , sourceMap , sourceMap , sourceMap ) ;
Code	String code = Entities . trim ( this . root , sourceMap , sourceMap , sourceMap ) ;
Distance : 8

176
Tree	String code = Entities . trim ( root , code , sourceMap ) ;
Code	String code = Entities . trim ( root , code , sourceMap ) ;
Distance : 7

177
Tree	String code = Entities . sourceMap ( root ) ;
Code	String code = Entities . sourceMap ( root ) ;
Distance : 8

178
Tree	String code = MockitoCore . readPaint ( root , sourceMap , sourceMap ) ;
Code	String code = MockitoCore . readPaint ( root , sourceMap , sourceMap ) ;
Distance : 6

179
Tree	String code = extractCauseUnchecked ( root , flags.outputWrapper ) ;
Code	String code = extractCauseUnchecked ( root , flags.outputWrapper ) ;
Distance : 6

180
Tree	String code = MockitoCore . readPaint ( STRING_CONSTANT , root ) ;
Code	String code = MockitoCore . readPaint ( STRING_CONSTANT , root ) ;
Distance : 8

181
Tree	String code = resolveVariable ( root , StringUtils.EMPTY ) ;
Code	String code = resolveVariable ( root , StringUtils.EMPTY ) ;
Distance : 6

182
Tree	String code = resolveVariable ( root , FunctionFlavor.GENERATOR ) ;
Code	String code = resolveVariable ( root , FunctionFlavor.GENERATOR ) ;
Distance : 6

183
Tree	String code = resolveVariable ( getStartMillis () , root ) ;
Code	String code = resolveVariable ( getStartMillis () , root ) ;
Distance : 7

184
Tree	String code = Entities . trim ( this . root , sourceMap , sourceMap , cb ) ;
Code	String code = Entities . trim ( this . root , sourceMap , sourceMap , cb ) ;
Distance : 8

185
Tree	String code = MockitoCore . trim ( this . root , sourceMap , sourceMap , sourceMap ) ;
Code	String code = MockitoCore . trim ( this . root , sourceMap , sourceMap , sourceMap ) ;
Distance : 8

186
Tree	String code = MockitoCore . sourceMap ( root ) ;
Code	String code = MockitoCore . sourceMap ( root ) ;
Distance : 8

187
Tree	String code = graph . trim ( this . root , sourceMap , sourceMap , sourceMap ) ;
Code	String code = graph . trim ( this . root , sourceMap , sourceMap , sourceMap ) ;
Distance : 8

188
Tree	String code = JAR_URL_PREFIX . trim ( root , sourceMap , sourceMap ) ;
Code	String code = JAR_URL_PREFIX . trim ( root , sourceMap , sourceMap ) ;
Distance : 6

189
Tree	String code = JAR_URL_PREFIX . trim ( STRING_CONSTANT , root ) ;
Code	String code = JAR_URL_PREFIX . trim ( STRING_CONSTANT , root ) ;
Distance : 8

190
Tree	String code = Entities . createFloat ( this . root , sourceMap , sourceMap , sourceMap ) ;
Code	String code = Entities . createFloat ( this . root , sourceMap , sourceMap , sourceMap ) ;
Distance : 8

191
Tree	String code = graph . readPaint ( STRING_CONSTANT , root ) ;
Code	String code = graph . readPaint ( STRING_CONSTANT , root ) ;
Distance : 8

192
Tree	String code = Entities . code ( root ) ;
Code	String code = Entities . code ( root ) ;
Distance : 9

193
Tree	String code = graph . sourceMap ( root ) ;
Code	String code = graph . sourceMap ( root ) ;
Distance : 8

194
Tree	String code = JAR_URL_PREFIX . trim ( root , false ) ;
Code	String code = JAR_URL_PREFIX . trim ( root , false ) ;
Distance : 8

195
Tree	String code = JAR_URL_PREFIX . categoryLabelToolTips ( root ) ;
Code	String code = JAR_URL_PREFIX . categoryLabelToolTips ( root ) ;
Distance : 9

196
Tree	String code = graph . readPaint ( root , false ) ;
Code	String code = graph . readPaint ( root , false ) ;
Distance : 8

197
Tree	String code = Entities . readPaint ( this . root , sourceMap , sourceMap , sourceMap ) ;
Code	String code = Entities . readPaint ( this . root , sourceMap , sourceMap , sourceMap ) ;
Distance : 8

198
Tree	String code = Entities . readPaint ( this . root , sourceMap , sourceMap , cb ) ;
Code	String code = Entities . readPaint ( this . root , sourceMap , sourceMap , cb ) ;
Distance : 8

199
Tree	String code = MockitoCore . readPaint ( this . root , sourceMap , sourceMap , sourceMap ) ;
Code	String code = MockitoCore . readPaint ( this . root , sourceMap , sourceMap , sourceMap ) ;
Distance : 8

========================================================================


========================================================================
Example Number: 24
Parent Code is: 
this . maybeAliased = ! assignNode . getParent () . isExprResult () ;
-------------------------------------------------------------------------------
Child code is: 
this . maybeAliased = NodeUtil . isExpressionResultUsed ( assignNode ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=maybeAliased})) (204{val==}) (38 (207{val=!}) (32 (32 (800{val=assignNode}) (235{val=.}) (802{val=getParent}) (216{val=()})) (235{val=.}) (802{val=isExprResult}) (216{val=()})))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=maybeAliased})) (204{val==}) (32 (800{val=NodeUtil}) (235{val=.}) (802{val=isExpressionResultUsed}) (214{val=(}) (800{val=assignNode}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/45/parent/src_com_google_javascript_jscomp_RemoveUnusedVars.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	typeArguments.length = ( ResizableDoubleArray ) assignNode . getParent () ;
Code	typeArguments.length = ( ResizableDoubleArray ) assignNode . getParent () ;
Distance : 10

1
Tree	typeArguments.length = TypeInferenceMode.CHECKED . getParent () ;
Code	typeArguments.length = TypeInferenceMode.CHECKED . getParent () ;
Distance : 8

2
Tree	typeArguments.length = assignNode . getParent ( this . bins ) ;
Code	typeArguments.length = assignNode . getParent ( this . bins ) ;
Distance : 8

3
Tree	NewTypeInference.INEXISTENT_PROPERTY = TypeInferenceMode.CHECKED . getParent () ;
Code	NewTypeInference.INEXISTENT_PROPERTY = TypeInferenceMode.CHECKED . getParent () ;
Distance : 8

4
Tree	NewTypeInference.INEXISTENT_PROPERTY = ( ResizableDoubleArray ) assignNode . getParent () ;
Code	NewTypeInference.INEXISTENT_PROPERTY = ( ResizableDoubleArray ) assignNode . getParent () ;
Distance : 10

5
Tree	typeArguments.length = assignNode . getParent ( this . subtypes ) ;
Code	typeArguments.length = assignNode . getParent ( this . subtypes ) ;
Distance : 8

6
Tree	RemoveUnusedCode.Builder = ( ResizableDoubleArray ) assignNode . getParent () ;
Code	RemoveUnusedCode.Builder = ( ResizableDoubleArray ) assignNode . getParent () ;
Distance : 10

7
Tree	typeArguments.length = assignNode . getParent ( this . defaultLegendTextPaint ) ;
Code	typeArguments.length = assignNode . getParent ( this . defaultLegendTextPaint ) ;
Distance : 8

8
Tree	RemoveUnusedCode.Builder = new ResizableDoubleArray ( assignNode ) . isExprResult () ;
Code	RemoveUnusedCode.Builder = new ResizableDoubleArray ( assignNode ) . isExprResult () ;
Distance : 9

9
Tree	entry.map = new ResizableDoubleArray ( assignNode ) . isExprResult () ;
Code	entry.map = new ResizableDoubleArray ( assignNode ) . isExprResult () ;
Distance : 9

10
Tree	typeArguments.length = assignNode . isNameDeclaration ( assignNode ) ;
Code	typeArguments.length = assignNode . isNameDeclaration ( assignNode ) ;
Distance : 5

11
Tree	this . q0 = ( Double.NaN ) assignNode . getParent () ;
Code	this . q0 = ( Double.NaN ) assignNode . getParent () ;
Distance : 8

12
Tree	this . labelLinkMargin = ( RotationConvention.VECTOR_OPERATOR ) assignNode . getParent () ;
Code	this . labelLinkMargin = ( RotationConvention.VECTOR_OPERATOR ) assignNode . getParent () ;
Distance : 8

13
Tree	NewTypeInference.INEXISTENT_PROPERTY = assignNode . isNameDeclaration ( assignNode ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = assignNode . isNameDeclaration ( assignNode ) ;
Distance : 5

14
Tree	nt1.rawType = new ResizableDoubleArray ( assignNode ) . isExprResult () ;
Code	nt1.rawType = new ResizableDoubleArray ( assignNode ) . isExprResult () ;
Distance : 9

15
Tree	this . sectionOutlineStrokeMap = null ;
Code	this . sectionOutlineStrokeMap = null ;
Distance : 7

16
Tree	this . q0 = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	this . q0 = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 10

17
Tree	this . q0 = null ;
Code	this . q0 = null ;
Distance : 7

18
Tree	this . q0 = ( ResizableDoubleArray ) assignNode . getParent () . isExprResult () ;
Code	this . q0 = ( ResizableDoubleArray ) assignNode . getParent () . isExprResult () ;
Distance : 10

19
Tree	typeArguments.length = ( ResizableDoubleArray ) assignNode . getParent () . isExprResult () ;
Code	typeArguments.length = ( ResizableDoubleArray ) assignNode . getParent () . isExprResult () ;
Distance : 11

20
Tree	NewTypeInference.INEXISTENT_PROPERTY = ( ResizableDoubleArray ) assignNode . getParent () . isExprResult () ;
Code	NewTypeInference.INEXISTENT_PROPERTY = ( ResizableDoubleArray ) assignNode . getParent () . isExprResult () ;
Distance : 11

21
Tree	RemoveUnusedCode.Builder = ( ResizableDoubleArray ) assignNode . getParent () . isExprResult () ;
Code	RemoveUnusedCode.Builder = ( ResizableDoubleArray ) assignNode . getParent () . isExprResult () ;
Distance : 11

22
Tree	this . labelLinkMargin = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	this . labelLinkMargin = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 10

23
Tree	entry.map = ( ResizableDoubleArray ) assignNode . getParent () . isExprResult () ;
Code	entry.map = ( ResizableDoubleArray ) assignNode . getParent () . isExprResult () ;
Distance : 11

24
Tree	this . q0 = ( RotationConvention.VECTOR_OPERATOR ) assignNode . getParent () ;
Code	this . q0 = ( RotationConvention.VECTOR_OPERATOR ) assignNode . getParent () ;
Distance : 8

25
Tree	nt1.rawType = ( ResizableDoubleArray ) child.parent . returnZero ( assignNode . getParent () . isExprResult () ) ;
Code	nt1.rawType = ( ResizableDoubleArray ) child.parent . returnZero ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

26
Tree	typeArguments.length = new ResizableDoubleArray ( assignNode ) . isExprResult () ;
Code	typeArguments.length = new ResizableDoubleArray ( assignNode ) . isExprResult () ;
Distance : 9

27
Tree	LocalizedFormats.EVALUATIONS = ( ResizableDoubleArray ) child.parent . returnZero ( assignNode . getParent () . isExprResult () ) ;
Code	LocalizedFormats.EVALUATIONS = ( ResizableDoubleArray ) child.parent . returnZero ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

28
Tree	NewTypeInference.INEXISTENT_PROPERTY = ( ResizableDoubleArray ) child.parent . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = ( ResizableDoubleArray ) child.parent . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

29
Tree	this . maximumCategoryLabelLines = null ;
Code	this . maximumCategoryLabelLines = null ;
Distance : 7

30
Tree	this . scanner = null ;
Code	this . scanner = null ;
Distance : 7

31
Tree	NewTypeInference.INEXISTENT_PROPERTY = new ResizableDoubleArray ( assignNode ) . isExprResult () ;
Code	NewTypeInference.INEXISTENT_PROPERTY = new ResizableDoubleArray ( assignNode ) . isExprResult () ;
Distance : 9

32
Tree	SimplexSolver.DEFAULT_ULPS = new ResizableDoubleArray ( assignNode ) . isExprResult () ;
Code	SimplexSolver.DEFAULT_ULPS = new ResizableDoubleArray ( assignNode ) . isExprResult () ;
Distance : 9

33
Tree	this . q0 = ( MathUtils.TWO_PI ) assignNode . getParent () ;
Code	this . q0 = ( MathUtils.TWO_PI ) assignNode . getParent () ;
Distance : 8

34
Tree	this . angleGridlineStroke = null ;
Code	this . angleGridlineStroke = null ;
Distance : 7

35
Tree	typeArguments.length = ( ResizableDoubleArray ) getParent ( assignNode ) ;
Code	typeArguments.length = ( ResizableDoubleArray ) getParent ( assignNode ) ;
Distance : 7

36
Tree	this . labelLinkMargin = ( ResizableDoubleArray ) assignNode . getParent () . isExprResult () ;
Code	this . labelLinkMargin = ( ResizableDoubleArray ) assignNode . getParent () . isExprResult () ;
Distance : 10

37
Tree	this . q0 = ( assignNode ) assignNode . isNameDeclaration () . isExprResult () ;
Code	this . q0 = ( assignNode ) assignNode . isNameDeclaration () . isExprResult () ;
Distance : 10

38
Tree	this . labelLinkMargin = null ;
Code	this . labelLinkMargin = null ;
Distance : 7

39
Tree	nt1.rawType = ( ResizableDoubleArray ) assignNode . getParent () . isExprResult () ;
Code	nt1.rawType = ( ResizableDoubleArray ) assignNode . getParent () . isExprResult () ;
Distance : 11

40
Tree	typeArguments.length = TypeInferenceMode.CHECKED . getParent ( assignNode ) ;
Code	typeArguments.length = TypeInferenceMode.CHECKED . getParent ( assignNode ) ;
Distance : 5

41
Tree	LocalizedFormats.EVALUATIONS = ( ResizableDoubleArray ) assignNode . getParent () . isExprResult () ;
Code	LocalizedFormats.EVALUATIONS = ( ResizableDoubleArray ) assignNode . getParent () . isExprResult () ;
Distance : 11

42
Tree	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( this . bins ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( this . bins ) ;
Distance : 8

43
Tree	typeArguments.length = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	typeArguments.length = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 8

44
Tree	RemoveUnusedCode.Builder = TypeInferenceMode.CHECKED . getParent () ;
Code	RemoveUnusedCode.Builder = TypeInferenceMode.CHECKED . getParent () ;
Distance : 8

45
Tree	RemoveUnusedCode.Builder = assignNode . getParent ( this . bins ) ;
Code	RemoveUnusedCode.Builder = assignNode . getParent ( this . bins ) ;
Distance : 8

46
Tree	this . q0 = ( assignNode ) assignNode . getParent () ;
Code	this . q0 = ( assignNode ) assignNode . getParent () ;
Distance : 8

47
Tree	nt1.rawType = assignNode . isNameDeclaration ( assignNode ) ;
Code	nt1.rawType = assignNode . isNameDeclaration ( assignNode ) ;
Distance : 5

48
Tree	typeArguments.length = ( ResizableDoubleArray ) assignNode . isNameDeclaration () . isExprResult () ;
Code	typeArguments.length = ( ResizableDoubleArray ) assignNode . isNameDeclaration () . isExprResult () ;
Distance : 11

49
Tree	this . q0 = ( metadata.superClassNameNode ) assignNode . getParent () ;
Code	this . q0 = ( metadata.superClassNameNode ) assignNode . getParent () ;
Distance : 8

50
Tree	LocalizedFormats.EVALUATIONS = assignNode . isNameDeclaration ( assignNode ) ;
Code	LocalizedFormats.EVALUATIONS = assignNode . isNameDeclaration ( assignNode ) ;
Distance : 5

51
Tree	ref.node = ( ResizableDoubleArray ) assignNode . getParent () . isExprResult () ;
Code	ref.node = ( ResizableDoubleArray ) assignNode . getParent () . isExprResult () ;
Distance : 11

52
Tree	RemoveUnusedCode.Builder = TypeInferenceMode.CHECKED . getParent ( assignNode ) ;
Code	RemoveUnusedCode.Builder = TypeInferenceMode.CHECKED . getParent ( assignNode ) ;
Distance : 5

53
Tree	NewTypeInference.INEXISTENT_PROPERTY = TypeInferenceMode.CHECKED . getParent ( assignNode ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = TypeInferenceMode.CHECKED . getParent ( assignNode ) ;
Distance : 5

54
Tree	RemoveUnusedCode.Builder = assignNode . getParent ( LocalizedFormats.NO_DATA , NUMBER_CONSTANT ) ;
Code	RemoveUnusedCode.Builder = assignNode . getParent ( LocalizedFormats.NO_DATA , NUMBER_CONSTANT ) ;
Distance : 8

55
Tree	entry.map = ( ResizableDoubleArray ) assignNode . getParent () ;
Code	entry.map = ( ResizableDoubleArray ) assignNode . getParent () ;
Distance : 10

56
Tree	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( assignNode . getParent () . isExprResult () . median ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( assignNode . getParent () . isExprResult () . median ) ;
Distance : 13

57
Tree	NewTypeInference.INEXISTENT_PROPERTY = firstNonNull ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = firstNonNull ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 8

58
Tree	RemoveUnusedCode.Builder = ( ResizableDoubleArray ) getParent ( assignNode ) ;
Code	RemoveUnusedCode.Builder = ( ResizableDoubleArray ) getParent ( assignNode ) ;
Distance : 7

59
Tree	RemoveUnusedCode.Builder = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	RemoveUnusedCode.Builder = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 8

60
Tree	NewTypeInference.INEXISTENT_PROPERTY = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = getParent ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 8

61
Tree	nt1.rawType = assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode , NUMBER_CONSTANT ) ;
Code	nt1.rawType = assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode , NUMBER_CONSTANT ) ;
Distance : 14

62
Tree	this . q0 = ( ResizableDoubleArray ) assignNode . getParent () ;
Code	this . q0 = ( ResizableDoubleArray ) assignNode . getParent () ;
Distance : 8

63
Tree	typeArguments.length = ( ResizableDoubleArray ) child.parent . returnZero () ;
Code	typeArguments.length = ( ResizableDoubleArray ) child.parent . returnZero () ;
Distance : 10

64
Tree	entry.map = TypeInferenceMode.CHECKED . getParent () ;
Code	entry.map = TypeInferenceMode.CHECKED . getParent () ;
Distance : 8

65
Tree	typeArguments.length = findDomainAxisIndex ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	typeArguments.length = findDomainAxisIndex ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 8

66
Tree	LocalizedFormats.EVALUATIONS = assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode , NUMBER_CONSTANT ) ;
Code	LocalizedFormats.EVALUATIONS = assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode , NUMBER_CONSTANT ) ;
Distance : 14

67
Tree	this . labelLinkMargin = ( assignNode ) assignNode . getParent () ;
Code	this . labelLinkMargin = ( assignNode ) assignNode . getParent () ;
Distance : 8

68
Tree	this . q0 = ( ResizableDoubleArray ) assignNode . isNameDeclaration () . isExprResult () ;
Code	this . q0 = ( ResizableDoubleArray ) assignNode . isNameDeclaration () . isExprResult () ;
Distance : 10

69
Tree	this . labelLinkMargin = ( ResizableDoubleArray ) assignNode . getParent () ;
Code	this . labelLinkMargin = ( ResizableDoubleArray ) assignNode . getParent () ;
Distance : 8

70
Tree	RemoveUnusedCode.Builder = assignNode . getParent ( assignNode . getParent () . isExprResult () . median ) ;
Code	RemoveUnusedCode.Builder = assignNode . getParent ( assignNode . getParent () . isExprResult () . median ) ;
Distance : 13

71
Tree	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( this . subtypes ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( this . subtypes ) ;
Distance : 8

72
Tree	NewTypeInference.INEXISTENT_PROPERTY = findDomainAxisIndex ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = findDomainAxisIndex ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 8

73
Tree	NewTypeInference.INEXISTENT_PROPERTY = ( ResizableDoubleArray ) getParent ( assignNode ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = ( ResizableDoubleArray ) getParent ( assignNode ) ;
Distance : 7

74
Tree	typeArguments.length = new LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( assignNode ) . isExprResult () ;
Code	typeArguments.length = new LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( assignNode ) . isExprResult () ;
Distance : 9

75
Tree	nt1.rawType = ( ResizableDoubleArray ) assignNode . getParent () ;
Code	nt1.rawType = ( ResizableDoubleArray ) assignNode . getParent () ;
Distance : 10

76
Tree	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( this . defaultLegendTextPaint ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( this . defaultLegendTextPaint ) ;
Distance : 8

77
Tree	typeArguments.length = ( ResizableDoubleArray ) child.parent . returnZero ( assignNode . getParent () . isExprResult () ) ;
Code	typeArguments.length = ( ResizableDoubleArray ) child.parent . returnZero ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

78
Tree	this . subtypes = ( assignNode ) assignNode . getParent () . isExprResult () ;
Code	this . subtypes = ( assignNode ) assignNode . getParent () . isExprResult () ;
Distance : 10

79
Tree	nt1.rawType = TypeInferenceMode.CHECKED . getParent () ;
Code	nt1.rawType = TypeInferenceMode.CHECKED . getParent () ;
Distance : 8

80
Tree	typeArguments.length = assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode , NUMBER_CONSTANT ) ;
Code	typeArguments.length = assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode , NUMBER_CONSTANT ) ;
Distance : 14

81
Tree	ref.node = assignNode . isNameDeclaration ( assignNode ) ;
Code	ref.node = assignNode . isNameDeclaration ( assignNode ) ;
Distance : 5

82
Tree	entry.map = assignNode . getParent ( LocalizedFormats.NO_DATA , NUMBER_CONSTANT ) ;
Code	entry.map = assignNode . getParent ( LocalizedFormats.NO_DATA , NUMBER_CONSTANT ) ;
Distance : 8

83
Tree	this . q0 = ( assignNode ) assignNode . isNameDeclaration () ;
Code	this . q0 = ( assignNode ) assignNode . isNameDeclaration () ;
Distance : 8

84
Tree	RemoveUnusedCode.Builder = firstNonNull ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	RemoveUnusedCode.Builder = firstNonNull ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 8

85
Tree	entry.map = TypeInferenceMode.CHECKED . getParent ( assignNode ) ;
Code	entry.map = TypeInferenceMode.CHECKED . getParent ( assignNode ) ;
Distance : 5

86
Tree	NewTypeInference.INEXISTENT_PROPERTY = ( ResizableDoubleArray ) child.parent . returnZero ( assignNode . getParent () . isExprResult () ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = ( ResizableDoubleArray ) child.parent . returnZero ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

87
Tree	typeArguments.length = assignNode . getParent ( this . q0 ) ;
Code	typeArguments.length = assignNode . getParent ( this . q0 ) ;
Distance : 8

88
Tree	LocalizedFormats.EVALUATIONS = ( ResizableDoubleArray ) assignNode . getParent () ;
Code	LocalizedFormats.EVALUATIONS = ( ResizableDoubleArray ) assignNode . getParent () ;
Distance : 10

89
Tree	RemoveUnusedCode.Builder = ( ResizableDoubleArray ) child.parent . returnZero ( assignNode . getParent () . isExprResult () ) ;
Code	RemoveUnusedCode.Builder = ( ResizableDoubleArray ) child.parent . returnZero ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

90
Tree	LocalizedFormats.EVALUATIONS = TypeInferenceMode.CHECKED . getParent () ;
Code	LocalizedFormats.EVALUATIONS = TypeInferenceMode.CHECKED . getParent () ;
Distance : 8

91
Tree	this . q0 = ( ResizableDoubleArray ) assignNode . isNameDeclaration () ;
Code	this . q0 = ( ResizableDoubleArray ) assignNode . isNameDeclaration () ;
Distance : 8

92
Tree	this . subtypes = ( assignNode ) assignNode . getParent () ;
Code	this . subtypes = ( assignNode ) assignNode . getParent () ;
Distance : 8

93
Tree	SimplexSolver.DEFAULT_ULPS = assignNode . isNameDeclaration ( assignNode ) ;
Code	SimplexSolver.DEFAULT_ULPS = assignNode . isNameDeclaration ( assignNode ) ;
Distance : 5

94
Tree	this . labelLinkMargin = ( Double.NaN ) assignNode . getParent () ;
Code	this . labelLinkMargin = ( Double.NaN ) assignNode . getParent () ;
Distance : 8

95
Tree	this . labelLinkMargin = ( assignNode ) assignNode . isNameDeclaration () . isExprResult () ;
Code	this . labelLinkMargin = ( assignNode ) assignNode . isNameDeclaration () . isExprResult () ;
Distance : 10

96
Tree	typeArguments.length = ( ResizableDoubleArray ) child.parent . getParent () ;
Code	typeArguments.length = ( ResizableDoubleArray ) child.parent . getParent () ;
Distance : 10

97
Tree	typeArguments.length = ( ResizableDoubleArray ) assignNode . isNameDeclaration () ;
Code	typeArguments.length = ( ResizableDoubleArray ) assignNode . isNameDeclaration () ;
Distance : 10

98
Tree	this . labelLinkMargin = ( assignNode ) assignNode . isNameDeclaration () ;
Code	this . labelLinkMargin = ( assignNode ) assignNode . isNameDeclaration () ;
Distance : 8

99
Tree	entry.map = ( ResizableDoubleArray ) getParent ( assignNode ) ;
Code	entry.map = ( ResizableDoubleArray ) getParent ( assignNode ) ;
Distance : 7

100
Tree	typeArguments.length = ( ResizableDoubleArray ) assignNode . getParent ( parent . getParent () . isExprResult () , assignNode ) ;
Code	typeArguments.length = ( ResizableDoubleArray ) assignNode . getParent ( parent . getParent () . isExprResult () , assignNode ) ;
Distance : 15

101
Tree	entry.map = ( ResizableDoubleArray ) child.parent . returnZero ( assignNode . getParent () . isExprResult () ) ;
Code	entry.map = ( ResizableDoubleArray ) child.parent . returnZero ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

102
Tree	ref.node = ( ResizableDoubleArray ) assignNode . getParent () ;
Code	ref.node = ( ResizableDoubleArray ) assignNode . getParent () ;
Distance : 10

103
Tree	typeArguments.length = assignNode . getParent ( LocalizedFormats.NO_DATA , NUMBER_CONSTANT ) ;
Code	typeArguments.length = assignNode . getParent ( LocalizedFormats.NO_DATA , NUMBER_CONSTANT ) ;
Distance : 8

104
Tree	LocalizedFormats.EVALUATIONS = ( ResizableDoubleArray ) getParent ( assignNode ) ;
Code	LocalizedFormats.EVALUATIONS = ( ResizableDoubleArray ) getParent ( assignNode ) ;
Distance : 7

105
Tree	typeArguments.length = ( ResizableDoubleArray ) assignNode . getParent ( parent . getParent () , assignNode ) ;
Code	typeArguments.length = ( ResizableDoubleArray ) assignNode . getParent ( parent . getParent () , assignNode ) ;
Distance : 12

106
Tree	nt1.rawType = ( ResizableDoubleArray ) child.parent . returnZero () ;
Code	nt1.rawType = ( ResizableDoubleArray ) child.parent . returnZero () ;
Distance : 10

107
Tree	typeArguments.length = ( ResizableDoubleArray ) child.parent . getParent ( assignNode . getParent () . isExprResult () ) ;
Code	typeArguments.length = ( ResizableDoubleArray ) child.parent . getParent ( assignNode . getParent () . isExprResult () ) ;
Distance : 13

108
Tree	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode , NUMBER_CONSTANT ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode , NUMBER_CONSTANT ) ;
Distance : 14

109
Tree	RemoveUnusedCode.Builder = assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode , NUMBER_CONSTANT ) ;
Code	RemoveUnusedCode.Builder = assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode , NUMBER_CONSTANT ) ;
Distance : 14

110
Tree	ref.node = TypeInferenceMode.CHECKED . getParent () ;
Code	ref.node = TypeInferenceMode.CHECKED . getParent () ;
Distance : 8

111
Tree	NewTypeInference.INEXISTENT_PROPERTY = ( ResizableDoubleArray ) child.parent . getParent () ;
Code	NewTypeInference.INEXISTENT_PROPERTY = ( ResizableDoubleArray ) child.parent . getParent () ;
Distance : 10

112
Tree	nt1.rawType = TypeInferenceMode.CHECKED . getParent ( assignNode ) ;
Code	nt1.rawType = TypeInferenceMode.CHECKED . getParent ( assignNode ) ;
Distance : 5

113
Tree	LocalizedFormats.EVALUATIONS = ( ResizableDoubleArray ) child.parent . returnZero () ;
Code	LocalizedFormats.EVALUATIONS = ( ResizableDoubleArray ) child.parent . returnZero () ;
Distance : 10

114
Tree	nt1.rawType = ( ResizableDoubleArray ) getParent ( assignNode ) ;
Code	nt1.rawType = ( ResizableDoubleArray ) getParent ( assignNode ) ;
Distance : 7

115
Tree	SimplexSolver.DEFAULT_ULPS = TypeInferenceMode.CHECKED . getParent () ;
Code	SimplexSolver.DEFAULT_ULPS = TypeInferenceMode.CHECKED . getParent () ;
Distance : 8

116
Tree	this . subtypes = null ;
Code	this . subtypes = null ;
Distance : 7

117
Tree	this . q0 = ( x.length ) assignNode . getParent () ;
Code	this . q0 = ( x.length ) assignNode . getParent () ;
Distance : 8

118
Tree	NewTypeInference.INEXISTENT_PROPERTY = ( ResizableDoubleArray ) assignNode . getParent ( parent . getParent () , assignNode ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = ( ResizableDoubleArray ) assignNode . getParent ( parent . getParent () , assignNode ) ;
Distance : 12

119
Tree	ref.node = TypeInferenceMode.CHECKED . getParent ( assignNode ) ;
Code	ref.node = TypeInferenceMode.CHECKED . getParent ( assignNode ) ;
Distance : 5

120
Tree	LocalizedFormats.EVALUATIONS = TypeInferenceMode.CHECKED . getParent ( assignNode ) ;
Code	LocalizedFormats.EVALUATIONS = TypeInferenceMode.CHECKED . getParent ( assignNode ) ;
Distance : 5

121
Tree	LocalizedFormats.EVALUATIONS = new ResizableDoubleArray ( assignNode ) . isExprResult () ;
Code	LocalizedFormats.EVALUATIONS = new ResizableDoubleArray ( assignNode ) . isExprResult () ;
Distance : 9

122
Tree	nt1.rawType = new LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( assignNode ) . isExprResult () ;
Code	nt1.rawType = new LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( assignNode ) . isExprResult () ;
Distance : 9

123
Tree	ref.node = ( ResizableDoubleArray ) getParent ( assignNode ) ;
Code	ref.node = ( ResizableDoubleArray ) getParent ( assignNode ) ;
Distance : 7

124
Tree	NewTypeInference.INEXISTENT_PROPERTY = ( ResizableDoubleArray ) assignNode . getParent ( parent . getParent () . isExprResult () , assignNode ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = ( ResizableDoubleArray ) assignNode . getParent ( parent . getParent () . isExprResult () , assignNode ) ;
Distance : 15

125
Tree	LocalizedFormats.EVALUATIONS = new LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( assignNode ) . isExprResult () ;
Code	LocalizedFormats.EVALUATIONS = new LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( assignNode ) . isExprResult () ;
Distance : 9

126
Tree	typeArguments.length = ( lValue ) getParent ( assignNode ) ;
Code	typeArguments.length = ( lValue ) getParent ( assignNode ) ;
Distance : 7

127
Tree	entry.map = assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode , NUMBER_CONSTANT ) ;
Code	entry.map = assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode , NUMBER_CONSTANT ) ;
Distance : 14

128
Tree	RemoveUnusedCode.Builder = assignNode . isNameDeclaration ( assignNode ) ;
Code	RemoveUnusedCode.Builder = assignNode . isNameDeclaration ( assignNode ) ;
Distance : 5

129
Tree	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( LocalizedFormats.NO_DATA , NUMBER_CONSTANT ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( LocalizedFormats.NO_DATA , NUMBER_CONSTANT ) ;
Distance : 8

130
Tree	ref.node = new LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( assignNode ) . isExprResult () ;
Code	ref.node = new LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( assignNode ) . isExprResult () ;
Distance : 9

131
Tree	typeArguments.length = assignNode . getParent ( assignNode . getParent () . isExprResult () . median ) ;
Code	typeArguments.length = assignNode . getParent ( assignNode . getParent () . isExprResult () . median ) ;
Distance : 13

132
Tree	RemoveUnusedCode.Builder = ( ResizableDoubleArray ) assignNode . getParent ( parent . getParent () . isExprResult () , assignNode ) ;
Code	RemoveUnusedCode.Builder = ( ResizableDoubleArray ) assignNode . getParent ( parent . getParent () . isExprResult () , assignNode ) ;
Distance : 15

133
Tree	SimplexSolver.DEFAULT_ULPS = new LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( assignNode ) . isExprResult () ;
Code	SimplexSolver.DEFAULT_ULPS = new LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( assignNode ) . isExprResult () ;
Distance : 9

134
Tree	SimplexSolver.DEFAULT_ULPS = TypeInferenceMode.CHECKED . getParent ( assignNode ) ;
Code	SimplexSolver.DEFAULT_ULPS = TypeInferenceMode.CHECKED . getParent ( assignNode ) ;
Distance : 5

135
Tree	typeArguments.length = assignNode . getParent ( assignNode . getParent () . isExprResult () . jsRoot ) ;
Code	typeArguments.length = assignNode . getParent ( assignNode . getParent () . isExprResult () . jsRoot ) ;
Distance : 13

136
Tree	entry.map = ( ResizableDoubleArray ) assignNode . getParent ( parent . getParent () . isExprResult () , assignNode ) ;
Code	entry.map = ( ResizableDoubleArray ) assignNode . getParent ( parent . getParent () . isExprResult () , assignNode ) ;
Distance : 15

137
Tree	this . q0 = ( RotationConvention.VECTOR_OPERATOR ) assignNode . isNameDeclaration () ;
Code	this . q0 = ( RotationConvention.VECTOR_OPERATOR ) assignNode . isNameDeclaration () ;
Distance : 8

138
Tree	ref.node = new ResizableDoubleArray ( assignNode ) . isExprResult () ;
Code	ref.node = new ResizableDoubleArray ( assignNode ) . isExprResult () ;
Distance : 9

139
Tree	typeArguments.length = assignNode . getParent ( currentScript.exportsToInline , NUMBER_CONSTANT ) ;
Code	typeArguments.length = assignNode . getParent ( currentScript.exportsToInline , NUMBER_CONSTANT ) ;
Distance : 8

140
Tree	RemoveUnusedCode.Builder = assignNode . getParent ( assignNode . getParent () . isExprResult () . jsRoot ) ;
Code	RemoveUnusedCode.Builder = assignNode . getParent ( assignNode . getParent () . isExprResult () . jsRoot ) ;
Distance : 13

141
Tree	entry.map = ( ResizableDoubleArray ) assignNode . getParent ( parent . getParent () , assignNode ) ;
Code	entry.map = ( ResizableDoubleArray ) assignNode . getParent ( parent . getParent () , assignNode ) ;
Distance : 12

142
Tree	LocalizedFormats.EVALUATIONS = ( ResizableDoubleArray ) assignNode . getParent ( parent . getParent () . isExprResult () , assignNode ) ;
Code	LocalizedFormats.EVALUATIONS = ( ResizableDoubleArray ) assignNode . getParent ( parent . getParent () . isExprResult () , assignNode ) ;
Distance : 15

143
Tree	RemoveUnusedCode.Builder = ( ResizableDoubleArray ) assignNode . getParent ( parent . getParent () , assignNode ) ;
Code	RemoveUnusedCode.Builder = ( ResizableDoubleArray ) assignNode . getParent ( parent . getParent () , assignNode ) ;
Distance : 12

144
Tree	entry.map = assignNode . isNameDeclaration ( assignNode ) ;
Code	entry.map = assignNode . isNameDeclaration ( assignNode ) ;
Distance : 5

145
Tree	LocalizedFormats.EVALUATIONS = ( ResizableDoubleArray ) assignNode . getParent ( parent . getParent () , assignNode ) ;
Code	LocalizedFormats.EVALUATIONS = ( ResizableDoubleArray ) assignNode . getParent ( parent . getParent () , assignNode ) ;
Distance : 12

146
Tree	NewTypeInference.INEXISTENT_PROPERTY = ( ResizableDoubleArray ) child.parent . returnZero () ;
Code	NewTypeInference.INEXISTENT_PROPERTY = ( ResizableDoubleArray ) child.parent . returnZero () ;
Distance : 10

147
Tree	typeArguments.length = assignNode . getParent ( assignNode . getParent () . isExprResult () . s ) ;
Code	typeArguments.length = assignNode . getParent ( assignNode . getParent () . isExprResult () . s ) ;
Distance : 13

148
Tree	typeArguments.length = ( ResizableDoubleArray ) assignNode . isNameDeclaration ( parent . getParent () . isExprResult () , assignNode ) ;
Code	typeArguments.length = ( ResizableDoubleArray ) assignNode . isNameDeclaration ( parent . getParent () . isExprResult () , assignNode ) ;
Distance : 15

149
Tree	typeArguments.length = ( ResizableDoubleArray ) assignNode . isNameDeclaration ( parent . getParent () , assignNode ) ;
Code	typeArguments.length = ( ResizableDoubleArray ) assignNode . isNameDeclaration ( parent . getParent () , assignNode ) ;
Distance : 12

150
Tree	ref.node = assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode , NUMBER_CONSTANT ) ;
Code	ref.node = assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode , NUMBER_CONSTANT ) ;
Distance : 14

151
Tree	RemoveUnusedCode.Builder = ( ResizableDoubleArray ) child.parent . returnZero () ;
Code	RemoveUnusedCode.Builder = ( ResizableDoubleArray ) child.parent . returnZero () ;
Distance : 10

152
Tree	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( assignNode . getParent () . isExprResult () . jsRoot ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = assignNode . getParent ( assignNode . getParent () . isExprResult () . jsRoot ) ;
Distance : 13

153
Tree	NewTypeInference.INEXISTENT_PROPERTY = new LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( assignNode ) . isExprResult () ;
Code	NewTypeInference.INEXISTENT_PROPERTY = new LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( assignNode ) . isExprResult () ;
Distance : 9

154
Tree	SimplexSolver.DEFAULT_ULPS = assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode , NUMBER_CONSTANT ) ;
Code	SimplexSolver.DEFAULT_ULPS = assignNode . getParent ( assignNode . getParent () . isExprResult () , assignNode , NUMBER_CONSTANT ) ;
Distance : 14

155
Tree	typeArguments.length = assignNode . getParent ( LocalizedFormats.NOT_POWER_OF_TWO , NUMBER_CONSTANT ) ;
Code	typeArguments.length = assignNode . getParent ( LocalizedFormats.NOT_POWER_OF_TWO , NUMBER_CONSTANT ) ;
Distance : 8

156
Tree	nt1.rawType = assignNode . getParent ( LocalizedFormats.NO_DATA , NUMBER_CONSTANT ) ;
Code	nt1.rawType = assignNode . getParent ( LocalizedFormats.NO_DATA , NUMBER_CONSTANT ) ;
Distance : 8

157
Tree	this . radiusGridlinesVisible = null ;
Code	this . radiusGridlinesVisible = null ;
Distance : 7

158
Tree	typeArguments.length = ( ResizableDoubleArray ) assignNode . getParent ( f . getParent () . isExprResult () , assignNode ) ;
Code	typeArguments.length = ( ResizableDoubleArray ) assignNode . getParent ( f . getParent () . isExprResult () , assignNode ) ;
Distance : 15

159
Tree	typeArguments.length = ( ResizableDoubleArray ) assignNode . getParent ( f . getParent () , assignNode ) ;
Code	typeArguments.length = ( ResizableDoubleArray ) assignNode . getParent ( f . getParent () , assignNode ) ;
Distance : 12

160
Tree	RemoveUnusedCode.Builder = new LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( assignNode ) . isExprResult () ;
Code	RemoveUnusedCode.Builder = new LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( assignNode ) . isExprResult () ;
Distance : 9

161
Tree	nt1.rawType = ( ResizableDoubleArray ) assignNode . getParent ( parent . getParent () , assignNode ) ;
Code	nt1.rawType = ( ResizableDoubleArray ) assignNode . getParent ( parent . getParent () , assignNode ) ;
Distance : 12

162
Tree	LocalizedFormats.EVALUATIONS = assignNode . getParent ( LocalizedFormats.NO_DATA , NUMBER_CONSTANT ) ;
Code	LocalizedFormats.EVALUATIONS = assignNode . getParent ( LocalizedFormats.NO_DATA , NUMBER_CONSTANT ) ;
Distance : 8

163
Tree	entry.map = ( ResizableDoubleArray ) child.parent . returnZero () ;
Code	entry.map = ( ResizableDoubleArray ) child.parent . returnZero () ;
Distance : 10

164
Tree	entry.map = new LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( assignNode ) . isExprResult () ;
Code	entry.map = new LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE ( assignNode ) . isExprResult () ;
Distance : 9

165
Tree	nt1.rawType = ( ResizableDoubleArray ) assignNode . getParent ( parent . getParent () . isExprResult () , assignNode ) ;
Code	nt1.rawType = ( ResizableDoubleArray ) assignNode . getParent ( parent . getParent () . isExprResult () , assignNode ) ;
Distance : 15

166
Tree	typeArguments.length = firstNonNull ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	typeArguments.length = firstNonNull ( assignNode , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 8

167
Tree	entry.map = assignNode . getParent ( assignNode . getParent () . isExprResult () . median ) ;
Code	entry.map = assignNode . getParent ( assignNode . getParent () . isExprResult () . median ) ;
Distance : 13

168
Tree	typeArguments.length = new TreeSet ( assignNode ) . isExprResult () ;
Code	typeArguments.length = new TreeSet ( assignNode ) . isExprResult () ;
Distance : 9

169
Tree	NewTypeInference.INEXISTENT_PROPERTY = new TreeSet ( assignNode ) . isExprResult () ;
Code	NewTypeInference.INEXISTENT_PROPERTY = new TreeSet ( assignNode ) . isExprResult () ;
Distance : 9

170
Tree	typeArguments.length = assignNode . isNameDeclaration ( assignNode , NUMBER_CONSTANT ) ;
Code	typeArguments.length = assignNode . isNameDeclaration ( assignNode , NUMBER_CONSTANT ) ;
Distance : 7

171
Tree	NewTypeInference.INEXISTENT_PROPERTY = assignNode . isNameDeclaration ( assignNode , NUMBER_CONSTANT ) ;
Code	NewTypeInference.INEXISTENT_PROPERTY = assignNode . isNameDeclaration ( assignNode , NUMBER_CONSTANT ) ;
Distance : 7

172
Tree	RemoveUnusedCode.Builder = new TreeSet ( assignNode ) . isExprResult () ;
Code	RemoveUnusedCode.Builder = new TreeSet ( assignNode ) . isExprResult () ;
Distance : 9

173
Tree	RemoveUnusedCode.Builder = assignNode . isNameDeclaration ( assignNode , NUMBER_CONSTANT ) ;
Code	RemoveUnusedCode.Builder = assignNode . isNameDeclaration ( assignNode , NUMBER_CONSTANT ) ;
Distance : 7

174
Tree	entry.map = new TreeSet ( assignNode ) . isExprResult () ;
Code	entry.map = new TreeSet ( assignNode ) . isExprResult () ;
Distance : 9

175
Tree	entry.map = assignNode . isNameDeclaration ( assignNode , NUMBER_CONSTANT ) ;
Code	entry.map = assignNode . isNameDeclaration ( assignNode , NUMBER_CONSTANT ) ;
Distance : 7

176
Tree	q0 /= STRING_CONSTANT + assignNode . getParent () . isExprResult () + STRING_CONSTANT ;
Code	q0 /= STRING_CONSTANT + assignNode . getParent () . isExprResult () + STRING_CONSTANT ;
Distance : 12

177
Tree	microsphereData /= STRING_CONSTANT + assignNode . getParent () . isExprResult () + STRING_CONSTANT ;
Code	microsphereData /= STRING_CONSTANT + assignNode . getParent () . isExprResult () + STRING_CONSTANT ;
Distance : 12

178
Tree	scanner /= STRING_CONSTANT + assignNode . getParent () . isExprResult () + STRING_CONSTANT ;
Code	scanner /= STRING_CONSTANT + assignNode . getParent () . isExprResult () + STRING_CONSTANT ;
Distance : 12

179
Tree	nt1.rawType = new TreeSet ( assignNode ) . isExprResult () ;
Code	nt1.rawType = new TreeSet ( assignNode ) . isExprResult () ;
Distance : 9

180
Tree	nt1.rawType = assignNode . isNameDeclaration ( assignNode , NUMBER_CONSTANT ) ;
Code	nt1.rawType = assignNode . isNameDeclaration ( assignNode , NUMBER_CONSTANT ) ;
Distance : 7

181
Tree	newVar /= STRING_CONSTANT + assignNode . getParent () . isExprResult () + STRING_CONSTANT ;
Code	newVar /= STRING_CONSTANT + assignNode . getParent () . isExprResult () + STRING_CONSTANT ;
Distance : 12

182
Tree	LocalizedFormats.EVALUATIONS = new TreeSet ( assignNode ) . isExprResult () ;
Code	LocalizedFormats.EVALUATIONS = new TreeSet ( assignNode ) . isExprResult () ;
Distance : 9

183
Tree	sectionOutlineStrokeMap /= STRING_CONSTANT + assignNode . getParent () . isExprResult () + STRING_CONSTANT ;
Code	sectionOutlineStrokeMap /= STRING_CONSTANT + assignNode . getParent () . isExprResult () + STRING_CONSTANT ;
Distance : 12

184
Tree	loc /= STRING_CONSTANT + assignNode . getParent () . isExprResult () + STRING_CONSTANT ;
Code	loc /= STRING_CONSTANT + assignNode . getParent () . isExprResult () + STRING_CONSTANT ;
Distance : 12

185
Tree	LocalizedFormats.EVALUATIONS = assignNode . isNameDeclaration ( assignNode , NUMBER_CONSTANT ) ;
Code	LocalizedFormats.EVALUATIONS = assignNode . isNameDeclaration ( assignNode , NUMBER_CONSTANT ) ;
Distance : 7

186
Tree	lhsOfForInLoop /= STRING_CONSTANT + assignNode . getParent () . isExprResult () + STRING_CONSTANT ;
Code	lhsOfForInLoop /= STRING_CONSTANT + assignNode . getParent () . isExprResult () + STRING_CONSTANT ;
Distance : 12

187
Tree	ref.node = assignNode . isNameDeclaration ( assignNode , NUMBER_CONSTANT ) ;
Code	ref.node = assignNode . isNameDeclaration ( assignNode , NUMBER_CONSTANT ) ;
Distance : 7

188
Tree	typeArguments.length = new BSPTree ( assignNode ) . isExprResult () ;
Code	typeArguments.length = new BSPTree ( assignNode ) . isExprResult () ;
Distance : 9

189
Tree	q0 /= STRING_CONSTANT + assignNode . isNameDeclaration () . isExprResult () + STRING_CONSTANT ;
Code	q0 /= STRING_CONSTANT + assignNode . isNameDeclaration () . isExprResult () + STRING_CONSTANT ;
Distance : 12

190
Tree	ref.node = new TreeSet ( assignNode ) . isExprResult () ;
Code	ref.node = new TreeSet ( assignNode ) . isExprResult () ;
Distance : 9

191
Tree	SimplexSolver.DEFAULT_ULPS = assignNode . isNameDeclaration ( assignNode , NUMBER_CONSTANT ) ;
Code	SimplexSolver.DEFAULT_ULPS = assignNode . isNameDeclaration ( assignNode , NUMBER_CONSTANT ) ;
Distance : 7

192
Tree	q0 /= assignNode * isNameDeclaration . getParent () . isExprResult () ;
Code	q0 /= assignNode * isNameDeclaration . getParent () . isExprResult () ;
Distance : 10

193
Tree	q0 /= assignNode * isNameDeclaration . isNameDeclaration () . isExprResult () ;
Code	q0 /= assignNode * isNameDeclaration . isNameDeclaration () . isExprResult () ;
Distance : 10

194
Tree	microsphereData /= assignNode * isNameDeclaration . getParent () . isExprResult () ;
Code	microsphereData /= assignNode * isNameDeclaration . getParent () . isExprResult () ;
Distance : 10

195
Tree	microsphereData /= assignNode * isNameDeclaration . isNameDeclaration () . isExprResult () ;
Code	microsphereData /= assignNode * isNameDeclaration . isNameDeclaration () . isExprResult () ;
Distance : 10

196
Tree	newVar /= assignNode * isNameDeclaration . getParent () . isExprResult () ;
Code	newVar /= assignNode * isNameDeclaration . getParent () . isExprResult () ;
Distance : 10

197
Tree	scanner /= assignNode * isNameDeclaration . getParent () . isExprResult () ;
Code	scanner /= assignNode * isNameDeclaration . getParent () . isExprResult () ;
Distance : 10

198
Tree	newVar /= assignNode * isNameDeclaration . isNameDeclaration () . isExprResult () ;
Code	newVar /= assignNode * isNameDeclaration . isNameDeclaration () . isExprResult () ;
Distance : 10

199
Tree	scanner /= assignNode * isNameDeclaration . isNameDeclaration () . isExprResult () ;
Code	scanner /= assignNode * isNameDeclaration . isNameDeclaration () . isExprResult () ;
Distance : 10

========================================================================


========================================================================
Example Number: 25
Parent Code is: 
if ( x < NUMBER_CONSTANT && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( ( x < NUMBER_CONSTANT  negativeZero ) && prev == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=x}) (230{val=<}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=prev}) (236{val===}) (13{val=CHAR_CONS}))) (215{val=)}) (8 (218{val={}) (21 (32 (802{val=add}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (36 (214{val=(}) (27 (27 (800{val=x}) (230{val=<}) (34{val=NUMBER_CONSTANT})) (250{val=||}) (800{val=negativeZero})) (215{val=)})) (249{val=&&}) (27 (800{val=prev}) (236{val===}) (13{val=CHAR_CONS}))) (215{val=)}) (8 (218{val={}) (21 (32 (802{val=add}) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/38/parent/src_com_google_javascript_jscomp_CodeConsumer.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 4

1
Tree	if ( x < NUMBER_CONSTANT && enclosing <= centers ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && enclosing <= centers ) { add ( STRING_CONSTANT ) ; }
Distance : 6

2
Tree	if ( x < NUMBER_CONSTANT && Year.MAXIMUM_YEAR == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Year.MAXIMUM_YEAR == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Distance : 5

3
Tree	if ( x < NUMBER_CONSTANT && SECONDS_MILLIS >= this . subtypes ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && SECONDS_MILLIS >= this . subtypes ) { add ( STRING_CONSTANT ) ; }
Distance : 7

4
Tree	if ( x < NUMBER_CONSTANT && FACTORIALS [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && FACTORIALS [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

5
Tree	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY - centers ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY - centers ) { add ( STRING_CONSTANT ) ; }
Distance : 6

6
Tree	if ( x < NUMBER_CONSTANT && centers < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && centers < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

7
Tree	if ( x < NUMBER_CONSTANT && SECONDS_MILLIS <= centers ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && SECONDS_MILLIS <= centers ) { add ( STRING_CONSTANT ) ; }
Distance : 6

8
Tree	if ( x < NUMBER_CONSTANT && CharUtils.NUL == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && CharUtils.NUL == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Distance : 5

9
Tree	if ( x < NUMBER_CONSTANT && options.skipTranspilationAndCrash != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && options.skipTranspilationAndCrash != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

10
Tree	if ( x < NUMBER_CONSTANT && omegaImaginaryInverse [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && omegaImaginaryInverse [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

11
Tree	if ( x < NUMBER_CONSTANT && thatUnresolved <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && thatUnresolved <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

12
Tree	if ( x < NUMBER_CONSTANT && options.skipTranspilationAndCrash == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && options.skipTranspilationAndCrash == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Distance : 5

13
Tree	if ( x < NUMBER_CONSTANT && current.parent.scopes == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && current.parent.scopes == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Distance : 5

14
Tree	if ( x < NUMBER_CONSTANT && estimationType <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && estimationType <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

15
Tree	if ( x < NUMBER_CONSTANT && options.skipTranspilationAndCrash == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && options.skipTranspilationAndCrash == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

16
Tree	if ( x < NUMBER_CONSTANT && centers > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && centers > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

17
Tree	if ( x < NUMBER_CONSTANT && Year.MAXIMUM_YEAR == IncrementalCheckMode.GENERATE_IJS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Year.MAXIMUM_YEAR == IncrementalCheckMode.GENERATE_IJS ) { add ( STRING_CONSTANT ) ; }
Distance : 5

18
Tree	if ( x < NUMBER_CONSTANT && estimationType != CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && estimationType != CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Distance : 6

19
Tree	if ( x < NUMBER_CONSTANT && current.parent.scopes != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && current.parent.scopes != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

20
Tree	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

21
Tree	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

22
Tree	if ( x < NUMBER_CONSTANT && centers >= centers ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && centers >= centers ) { add ( STRING_CONSTANT ) ; }
Distance : 6

23
Tree	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

24
Tree	if ( x < NUMBER_CONSTANT && delimiters.length == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && delimiters.length == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Distance : 5

25
Tree	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY != CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY != CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Distance : 6

26
Tree	if ( x < NUMBER_CONSTANT && Year.MAXIMUM_YEAR == LocalizedFormats.OVERFLOW_IN_ADDITION ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Year.MAXIMUM_YEAR == LocalizedFormats.OVERFLOW_IN_ADDITION ) { add ( STRING_CONSTANT ) ; }
Distance : 5

27
Tree	if ( x < NUMBER_CONSTANT && thatUnresolved > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && thatUnresolved > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

28
Tree	if ( x < NUMBER_CONSTANT && centers <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && centers <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

29
Tree	if ( x < NUMBER_CONSTANT && current.parent.scopes == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && current.parent.scopes == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

30
Tree	if ( x < NUMBER_CONSTANT && LocalizedFormats.EULER_ANGLES_SINGULARITY == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && LocalizedFormats.EULER_ANGLES_SINGULARITY == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Distance : 5

31
Tree	if ( x < NUMBER_CONSTANT && enclosing < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && enclosing < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

32
Tree	if ( x < NUMBER_CONSTANT && centers != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && centers != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

33
Tree	if ( x < NUMBER_CONSTANT && SECONDS_MILLIS < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && SECONDS_MILLIS < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

34
Tree	if ( x < NUMBER_CONSTANT && enclosing <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && enclosing <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

35
Tree	if ( x < NUMBER_CONSTANT && estimationType > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && estimationType > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

36
Tree	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

37
Tree	if ( x < NUMBER_CONSTANT && enclosing > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && enclosing > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

38
Tree	if ( x < NUMBER_CONSTANT && estimationType == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && estimationType == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 4

39
Tree	if ( x < NUMBER_CONSTANT && lastMatch != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && lastMatch != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

40
Tree	if ( x < NUMBER_CONSTANT && anyStringNull <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && anyStringNull <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

41
Tree	if ( x < NUMBER_CONSTANT && thatUnresolved != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && thatUnresolved != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

42
Tree	if ( x < NUMBER_CONSTANT && lastMatch != CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && lastMatch != CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Distance : 6

43
Tree	if ( x < NUMBER_CONSTANT && centers >= this . subtypes ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && centers >= this . subtypes ) { add ( STRING_CONSTANT ) ; }
Distance : 7

44
Tree	if ( x < NUMBER_CONSTANT && CharacterCodingException [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && CharacterCodingException [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

45
Tree	if ( x < NUMBER_CONSTANT && estimationType - centers ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && estimationType - centers ) { add ( STRING_CONSTANT ) ; }
Distance : 6

46
Tree	if ( x < NUMBER_CONSTANT && estimationType >= centers ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && estimationType >= centers ) { add ( STRING_CONSTANT ) ; }
Distance : 6

47
Tree	if ( x < NUMBER_CONSTANT && Year.MAXIMUM_YEAR != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Year.MAXIMUM_YEAR != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

48
Tree	if ( x < NUMBER_CONSTANT && centers <= centers ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && centers <= centers ) { add ( STRING_CONSTANT ) ; }
Distance : 6

49
Tree	if ( x == NUMBER_CONSTANT && CharUtils.NUL == ExpansionMode.MULTIPLICATIVE ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && CharUtils.NUL == ExpansionMode.MULTIPLICATIVE ) { add ( STRING_CONSTANT ) ; }
Distance : 6

50
Tree	if ( x < NUMBER_CONSTANT && Year.MAXIMUM_YEAR == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Year.MAXIMUM_YEAR == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

51
Tree	if ( x < NUMBER_CONSTANT && enclosing >= this . subtypes ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && enclosing >= this . subtypes ) { add ( STRING_CONSTANT ) ; }
Distance : 7

52
Tree	if ( x < NUMBER_CONSTANT && centers <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && centers <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

53
Tree	if ( x < NUMBER_CONSTANT && anyStringNull > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && anyStringNull > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

54
Tree	if ( x < NUMBER_CONSTANT && enclosing <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && enclosing <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

55
Tree	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

56
Tree	if ( x < NUMBER_CONSTANT && anyStringNull >= centers ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && anyStringNull >= centers ) { add ( STRING_CONSTANT ) ; }
Distance : 6

57
Tree	if ( x < NUMBER_CONSTANT && CharUtils.NUL != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && CharUtils.NUL != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

58
Tree	if ( x == NUMBER_CONSTANT && Year.MAXIMUM_YEAR == ExpansionMode.MULTIPLICATIVE ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && Year.MAXIMUM_YEAR == ExpansionMode.MULTIPLICATIVE ) { add ( STRING_CONSTANT ) ; }
Distance : 6

59
Tree	if ( x < NUMBER_CONSTANT && CharUtils.NUL == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && CharUtils.NUL == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

60
Tree	if ( x < NUMBER_CONSTANT && estimationType <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && estimationType <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

61
Tree	if ( x < NUMBER_CONSTANT && SECONDS_MILLIS > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && SECONDS_MILLIS > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

62
Tree	if ( x < NUMBER_CONSTANT && enclosing > integrationTestPoints ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && enclosing > integrationTestPoints ) { add ( STRING_CONSTANT ) ; }
Distance : 6

63
Tree	if ( x < NUMBER_CONSTANT && thatUnresolved <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && thatUnresolved <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

64
Tree	if ( x < NUMBER_CONSTANT && estimationType <= centers ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && estimationType <= centers ) { add ( STRING_CONSTANT ) ; }
Distance : 6

65
Tree	if ( x < NUMBER_CONSTANT && anyStringNull <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && anyStringNull <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

66
Tree	if ( x < NUMBER_CONSTANT && centers >= centers ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && centers >= centers ) { add ( STRING_CONSTANT ) ; return; }
Distance : 7

67
Tree	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY >= this . subtypes ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY >= this . subtypes ) { add ( STRING_CONSTANT ) ; }
Distance : 7

68
Tree	if ( x < NUMBER_CONSTANT && centers != CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && centers != CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Distance : 6

69
Tree	if ( x < NUMBER_CONSTANT && lastMatch > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && lastMatch > NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

70
Tree	if ( x < NUMBER_CONSTANT && estimationType < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && estimationType < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

71
Tree	if ( x < NUMBER_CONSTANT && anyStringNull - centers ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && anyStringNull - centers ) { add ( STRING_CONSTANT ) ; }
Distance : 6

72
Tree	if ( x < NUMBER_CONSTANT && enclosing >= centers ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && enclosing >= centers ) { add ( STRING_CONSTANT ) ; }
Distance : 6

73
Tree	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY && RADIX ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY && RADIX ) { add ( STRING_CONSTANT ) ; }
Distance : 6

74
Tree	if ( x < NUMBER_CONSTANT && estimationType >= this . subtypes . TRUTHY ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && estimationType >= this . subtypes . TRUTHY ) { add ( STRING_CONSTANT ) ; }
Distance : 9

75
Tree	if ( x < NUMBER_CONSTANT && estimationType != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && estimationType != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

76
Tree	if ( x < NUMBER_CONSTANT && anyStringNull != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && anyStringNull != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

77
Tree	if ( x < NUMBER_CONSTANT && anyStringNull != CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && anyStringNull != CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Distance : 6

78
Tree	if ( x < NUMBER_CONSTANT && options.skipTranspilationAndCrash == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && options.skipTranspilationAndCrash == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

79
Tree	if ( x < NUMBER_CONSTANT && lastMatch - centers ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && lastMatch - centers ) { add ( STRING_CONSTANT ) ; }
Distance : 6

80
Tree	if ( x < NUMBER_CONSTANT && SECONDS_MILLIS <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && SECONDS_MILLIS <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

81
Tree	if ( x < NUMBER_CONSTANT && SECONDS_MILLIS >= centers ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && SECONDS_MILLIS >= centers ) { add ( STRING_CONSTANT ) ; }
Distance : 6

82
Tree	if ( x < NUMBER_CONSTANT && delimiters.length == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && delimiters.length == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

83
Tree	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY > Year.MAXIMUM_YEAR ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY > Year.MAXIMUM_YEAR ) { add ( STRING_CONSTANT ) ; }
Distance : 6

84
Tree	if ( x < NUMBER_CONSTANT && thatUnresolved < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && thatUnresolved < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

85
Tree	if ( x < NUMBER_CONSTANT && estimationType >= thatUnresolved ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && estimationType >= thatUnresolved ) { add ( STRING_CONSTANT ) ; return; }
Distance : 7

86
Tree	if ( x < NUMBER_CONSTANT && LocalizedFormats.EULER_ANGLES_SINGULARITY == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && LocalizedFormats.EULER_ANGLES_SINGULARITY == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

87
Tree	if ( x < NUMBER_CONSTANT && enclosing != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && enclosing != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

88
Tree	if ( x == NUMBER_CONSTANT && MILLIS_PER_DAY >= centers ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && MILLIS_PER_DAY >= centers ) { add ( STRING_CONSTANT ) ; }
Distance : 7

89
Tree	if ( x < NUMBER_CONSTANT && packed [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && packed [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

90
Tree	if ( x < NUMBER_CONSTANT && estimationType > integrationTestPoints ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && estimationType > integrationTestPoints ) { add ( STRING_CONSTANT ) ; }
Distance : 6

91
Tree	if ( x < NUMBER_CONSTANT && anyStringNull >= this . subtypes ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && anyStringNull >= this . subtypes ) { add ( STRING_CONSTANT ) ; }
Distance : 7

92
Tree	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY >= thatUnresolved ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY >= thatUnresolved ) { add ( STRING_CONSTANT ) ; return; }
Distance : 7

93
Tree	if ( x < NUMBER_CONSTANT && thatUnresolved != CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && thatUnresolved != CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Distance : 6

94
Tree	if ( x < NUMBER_CONSTANT && enclosing == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && enclosing == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 4

95
Tree	if ( x < NUMBER_CONSTANT && current.parent.scopes == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && current.parent.scopes == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

96
Tree	if ( x == NUMBER_CONSTANT && enclosing >= thatUnresolved ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && enclosing >= thatUnresolved ) { add ( STRING_CONSTANT ) ; }
Distance : 7

97
Tree	if ( x < NUMBER_CONSTANT && centers == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && centers == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 4

98
Tree	if ( x < NUMBER_CONSTANT && estimationType > Year.MAXIMUM_YEAR ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && estimationType > Year.MAXIMUM_YEAR ) { add ( STRING_CONSTANT ) ; }
Distance : 6

99
Tree	if ( x < NUMBER_CONSTANT && SECONDS_MILLIS == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && SECONDS_MILLIS == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 4

100
Tree	if ( x < NUMBER_CONSTANT && DisposalCheckingPolicy.OFF == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && DisposalCheckingPolicy.OFF == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

101
Tree	if ( x < NUMBER_CONSTANT && estimationType >= thatUnresolved ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && estimationType >= thatUnresolved ) { add ( STRING_CONSTANT ) ; }
Distance : 6

102
Tree	if ( x < NUMBER_CONSTANT && omegaImaginaryForward [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && omegaImaginaryForward [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

103
Tree	if ( x < NUMBER_CONSTANT && centers && enclosing ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && centers && enclosing ) { add ( STRING_CONSTANT ) ; }
Distance : 6

104
Tree	if ( x == NUMBER_CONSTANT && CharUtils.NUL == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && CharUtils.NUL == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Distance : 6

105
Tree	if ( x < NUMBER_CONSTANT && SECONDS_MILLIS <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && SECONDS_MILLIS <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

106
Tree	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY > integrationTestPoints ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY > integrationTestPoints ) { add ( STRING_CONSTANT ) ; }
Distance : 6

107
Tree	if ( x < NUMBER_CONSTANT && means [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && means [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

108
Tree	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY >= centers ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY >= centers ) { add ( STRING_CONSTANT ) ; }
Distance : 6

109
Tree	if ( x < NUMBER_CONSTANT && lastMatch <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && lastMatch <= NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

110
Tree	if ( x < NUMBER_CONSTANT && estimationType > CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && estimationType > CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Distance : 6

111
Tree	if ( x < NUMBER_CONSTANT && Long.MAX_VALUE == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Long.MAX_VALUE == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

112
Tree	if ( x < NUMBER_CONSTANT && enclosing >= centers ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && enclosing >= centers ) { add ( STRING_CONSTANT ) ; return; }
Distance : 7

113
Tree	if ( x < NUMBER_CONSTANT && SECONDS_MILLIS - centers ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && SECONDS_MILLIS - centers ) { add ( STRING_CONSTANT ) ; }
Distance : 6

114
Tree	if ( x < NUMBER_CONSTANT && CharUtils.NUL == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && CharUtils.NUL == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

115
Tree	if ( x < NUMBER_CONSTANT && SECONDS_MILLIS != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && SECONDS_MILLIS != - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

116
Tree	if ( x < NUMBER_CONSTANT && centers - centers ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && centers - centers ) { add ( STRING_CONSTANT ) ; }
Distance : 6

117
Tree	if ( x < NUMBER_CONSTANT && LocalizedFormats.EULER_ANGLES_SINGULARITY != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && LocalizedFormats.EULER_ANGLES_SINGULARITY != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

118
Tree	if ( x < NUMBER_CONSTANT && delimiters.length != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && delimiters.length != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

119
Tree	if ( x < NUMBER_CONSTANT && enclosing - centers ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && enclosing - centers ) { add ( STRING_CONSTANT ) ; }
Distance : 6

120
Tree	if ( x < NUMBER_CONSTANT && anyStringNull < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && anyStringNull < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

121
Tree	if ( x < NUMBER_CONSTANT && anyStringNull >= centers ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && anyStringNull >= centers ) { add ( STRING_CONSTANT ) ; return; }
Distance : 7

122
Tree	if ( x < NUMBER_CONSTANT && enclosing != CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && enclosing != CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Distance : 6

123
Tree	if ( x < NUMBER_CONSTANT && thatUnresolved >= this . subtypes ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && thatUnresolved >= this . subtypes ) { add ( STRING_CONSTANT ) ; }
Distance : 7

124
Tree	if ( x < NUMBER_CONSTANT && SECONDS_MILLIS >= centers ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && SECONDS_MILLIS >= centers ) { add ( STRING_CONSTANT ) ; return; }
Distance : 7

125
Tree	if ( x < NUMBER_CONSTANT && centers >= this . subtypes ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && centers >= this . subtypes ) { add ( STRING_CONSTANT ) ; return; }
Distance : 8

126
Tree	if ( x < NUMBER_CONSTANT && estimationType >= this . subtypes ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && estimationType >= this . subtypes ) { add ( STRING_CONSTANT ) ; return; }
Distance : 8

127
Tree	if ( x < NUMBER_CONSTANT && Year.MAXIMUM_YEAR == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Year.MAXIMUM_YEAR == NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 5

128
Tree	if ( x < NUMBER_CONSTANT && anyStringNull >= this . subtypes . TRUTHY ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && anyStringNull >= this . subtypes . TRUTHY ) { add ( STRING_CONSTANT ) ; }
Distance : 9

129
Tree	if ( x < NUMBER_CONSTANT && estimationType && enclosing ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && estimationType && enclosing ) { add ( STRING_CONSTANT ) ; }
Distance : 6

130
Tree	if ( x < NUMBER_CONSTANT && lastMatch == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && lastMatch == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 4

131
Tree	if ( x < NUMBER_CONSTANT && centers && slots ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && centers && slots ) { add ( STRING_CONSTANT ) ; }
Distance : 6

132
Tree	if ( x < NUMBER_CONSTANT && estimationType - thatUnresolved ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && estimationType - thatUnresolved ) { add ( STRING_CONSTANT ) ; }
Distance : 6

133
Tree	if ( x < NUMBER_CONSTANT && DisposalCheckingPolicy.OFF != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && DisposalCheckingPolicy.OFF != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

134
Tree	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY >= thatUnresolved ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY >= thatUnresolved ) { add ( STRING_CONSTANT ) ; }
Distance : 6

135
Tree	if ( x < NUMBER_CONSTANT && SECONDS_MILLIS != CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && SECONDS_MILLIS != CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Distance : 6

136
Tree	if ( x < NUMBER_CONSTANT && estimationType > targets ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && estimationType > targets ) { add ( STRING_CONSTANT ) ; }
Distance : 6

137
Tree	if ( x < NUMBER_CONSTANT && centers >= this . subtypes . TRUTHY ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && centers >= this . subtypes . TRUTHY ) { add ( STRING_CONSTANT ) ; }
Distance : 9

138
Tree	if ( x < NUMBER_CONSTANT && thatUnresolved == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && thatUnresolved == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 4

139
Tree	if ( x < NUMBER_CONSTANT && DisposalCheckingPolicy.OFF == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && DisposalCheckingPolicy.OFF == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

140
Tree	if ( x < NUMBER_CONSTANT && estimationType >= this . subtypes ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && estimationType >= this . subtypes ) { add ( STRING_CONSTANT ) ; }
Distance : 7

141
Tree	if ( x < NUMBER_CONSTANT && enclosing >= this . subtypes ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && enclosing >= this . subtypes ) { add ( STRING_CONSTANT ) ; return; }
Distance : 8

142
Tree	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY <= RADIX ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY <= RADIX ) { add ( STRING_CONSTANT ) ; }
Distance : 6

143
Tree	if ( x < NUMBER_CONSTANT && estimationType && slots ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && estimationType && slots ) { add ( STRING_CONSTANT ) ; }
Distance : 6

144
Tree	if ( x == NUMBER_CONSTANT && MILLIS_PER_DAY >= thatUnresolved ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && MILLIS_PER_DAY >= thatUnresolved ) { add ( STRING_CONSTANT ) ; }
Distance : 7

145
Tree	if ( x < NUMBER_CONSTANT && centers > Year.MAXIMUM_YEAR ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && centers > Year.MAXIMUM_YEAR ) { add ( STRING_CONSTANT ) ; }
Distance : 6

146
Tree	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY > CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY > CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Distance : 6

147
Tree	if ( x < NUMBER_CONSTANT && estimationType <= RADIX ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && estimationType <= RADIX ) { add ( STRING_CONSTANT ) ; }
Distance : 6

148
Tree	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY <= centers ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY <= centers ) { add ( STRING_CONSTANT ) ; }
Distance : 6

149
Tree	if ( x < NUMBER_CONSTANT && Long.MAX_VALUE != null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Long.MAX_VALUE != null ) { add ( STRING_CONSTANT ) ; }
Distance : 6

150
Tree	if ( x < NUMBER_CONSTANT && centers > integrationTestPoints ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && centers > integrationTestPoints ) { add ( STRING_CONSTANT ) ; }
Distance : 6

151
Tree	if ( x < NUMBER_CONSTANT && InitialGuess [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && InitialGuess [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

152
Tree	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY > slots ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY > slots ) { add ( STRING_CONSTANT ) ; }
Distance : 6

153
Tree	if ( x < NUMBER_CONSTANT && Long.MAX_VALUE == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && Long.MAX_VALUE == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

154
Tree	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY > targets ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY > targets ) { add ( STRING_CONSTANT ) ; }
Distance : 6

155
Tree	if ( x == NUMBER_CONSTANT && CharUtils.NUL == LocalizedFormats.OVERFLOW_IN_ADDITION ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && CharUtils.NUL == LocalizedFormats.OVERFLOW_IN_ADDITION ) { add ( STRING_CONSTANT ) ; }
Distance : 6

156
Tree	if ( x < NUMBER_CONSTANT && enclosing > Year.MAXIMUM_YEAR ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && enclosing > Year.MAXIMUM_YEAR ) { add ( STRING_CONSTANT ) ; }
Distance : 6

157
Tree	if ( x < NUMBER_CONSTANT && estimationType > slots ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && estimationType > slots ) { add ( STRING_CONSTANT ) ; }
Distance : 6

158
Tree	if ( x < NUMBER_CONSTANT && anyStringNull == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && anyStringNull == CHAR_CONS ) { add ( STRING_CONSTANT ) ; }
Distance : 4

159
Tree	if ( x < NUMBER_CONSTANT && SECONDS_MILLIS > Year.MAXIMUM_YEAR ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && SECONDS_MILLIS > Year.MAXIMUM_YEAR ) { add ( STRING_CONSTANT ) ; }
Distance : 6

160
Tree	if ( x < NUMBER_CONSTANT && lastMatch >= this . subtypes ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && lastMatch >= this . subtypes ) { add ( STRING_CONSTANT ) ; }
Distance : 7

161
Tree	if ( x == NUMBER_CONSTANT && Year.MAXIMUM_YEAR == LocalizedFormats.OVERFLOW_IN_ADDITION ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && Year.MAXIMUM_YEAR == LocalizedFormats.OVERFLOW_IN_ADDITION ) { add ( STRING_CONSTANT ) ; }
Distance : 6

162
Tree	if ( x < NUMBER_CONSTANT && SECONDS_MILLIS >= this . subtypes . TRUTHY ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && SECONDS_MILLIS >= this . subtypes . TRUTHY ) { add ( STRING_CONSTANT ) ; }
Distance : 9

163
Tree	if ( x < NUMBER_CONSTANT && lastMatch < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && lastMatch < NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 6

164
Tree	if ( x == NUMBER_CONSTANT && Year.MAXIMUM_YEAR == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && Year.MAXIMUM_YEAR == CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Distance : 6

165
Tree	if ( x < NUMBER_CONSTANT && LocalizedFormats.EULER_ANGLES_SINGULARITY == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && LocalizedFormats.EULER_ANGLES_SINGULARITY == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

166
Tree	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY == enclosing - centers ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY == enclosing - centers ) { add ( STRING_CONSTANT ) ; }
Distance : 7

167
Tree	if ( x < NUMBER_CONSTANT && centers > CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && centers > CharUtils.NUL ) { add ( STRING_CONSTANT ) ; }
Distance : 6

168
Tree	if ( x < NUMBER_CONSTANT && centers == enclosing - centers ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && centers == enclosing - centers ) { add ( STRING_CONSTANT ) ; }
Distance : 7

169
Tree	if ( x < NUMBER_CONSTANT && lastMatch <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && lastMatch <= - NUMBER_CONSTANT ) { add ( STRING_CONSTANT ) ; }
Distance : 7

170
Tree	if ( x == NUMBER_CONSTANT && estimationType >= centers ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && estimationType >= centers ) { add ( STRING_CONSTANT ) ; }
Distance : 7

171
Tree	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY >= this . subtypes . TRUTHY ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY >= this . subtypes . TRUTHY ) { add ( STRING_CONSTANT ) ; }
Distance : 9

172
Tree	if ( x < NUMBER_CONSTANT && enclosing == enclosing - centers ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && enclosing == enclosing - centers ) { add ( STRING_CONSTANT ) ; }
Distance : 7

173
Tree	if ( x < NUMBER_CONSTANT && estimationType == centers - centers ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && estimationType == centers - centers ) { add ( STRING_CONSTANT ) ; }
Distance : 7

174
Tree	if ( x < NUMBER_CONSTANT && SECONDS_MILLIS == enclosing - centers ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && SECONDS_MILLIS == enclosing - centers ) { add ( STRING_CONSTANT ) ; }
Distance : 7

175
Tree	if ( x == NUMBER_CONSTANT && CharUtils.NUL == IncrementalCheckMode.GENERATE_IJS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && CharUtils.NUL == IncrementalCheckMode.GENERATE_IJS ) { add ( STRING_CONSTANT ) ; }
Distance : 6

176
Tree	if ( x < NUMBER_CONSTANT && enclosing >= this . subtypes . TRUTHY ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && enclosing >= this . subtypes . TRUTHY ) { add ( STRING_CONSTANT ) ; }
Distance : 9

177
Tree	if ( x < NUMBER_CONSTANT && estimationType >= centers ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && estimationType >= centers ) { add ( STRING_CONSTANT ) ; return; }
Distance : 7

178
Tree	if ( x < NUMBER_CONSTANT && lastMatch >= this . subtypes . TRUTHY ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && lastMatch >= this . subtypes . TRUTHY ) { add ( STRING_CONSTANT ) ; }
Distance : 9

179
Tree	if ( x < NUMBER_CONSTANT && SECONDS_MILLIS >= this . subtypes ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && SECONDS_MILLIS >= this . subtypes ) { add ( STRING_CONSTANT ) ; return; }
Distance : 8

180
Tree	if ( x < NUMBER_CONSTANT && thatUnresolved >= this . subtypes ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && thatUnresolved >= this . subtypes ) { add ( STRING_CONSTANT ) ; return; }
Distance : 8

181
Tree	if ( x == NUMBER_CONSTANT && Year.MAXIMUM_YEAR == IncrementalCheckMode.GENERATE_IJS ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && Year.MAXIMUM_YEAR == IncrementalCheckMode.GENERATE_IJS ) { add ( STRING_CONSTANT ) ; }
Distance : 6

182
Tree	if ( x == NUMBER_CONSTANT && lastMatch >= centers ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && lastMatch >= centers ) { add ( STRING_CONSTANT ) ; }
Distance : 7

183
Tree	if ( x == NUMBER_CONSTANT && lastMatch >= thatUnresolved ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && lastMatch >= thatUnresolved ) { add ( STRING_CONSTANT ) ; }
Distance : 7

184
Tree	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY == centers - centers ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY == centers - centers ) { add ( STRING_CONSTANT ) ; }
Distance : 7

185
Tree	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY && enclosing ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY && enclosing ) { add ( STRING_CONSTANT ) ; }
Distance : 6

186
Tree	if ( x < NUMBER_CONSTANT && regions [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && regions [ NUMBER_CONSTANT ] == null ) { add ( STRING_CONSTANT ) ; }
Distance : 7

187
Tree	if ( x < NUMBER_CONSTANT && estimationType && RADIX ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && estimationType && RADIX ) { add ( STRING_CONSTANT ) ; }
Distance : 6

188
Tree	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY >= this . subtypes ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY >= this . subtypes ) { add ( STRING_CONSTANT ) ; return; }
Distance : 8

189
Tree	if ( x < NUMBER_CONSTANT && delimiters.length == null ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && delimiters.length == null ) { add ( STRING_CONSTANT ) ; }
Distance : 5

190
Tree	if ( x < NUMBER_CONSTANT && anyStringNull <= centers ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && anyStringNull <= centers ) { add ( STRING_CONSTANT ) ; }
Distance : 6

191
Tree	if ( x < NUMBER_CONSTANT && centers == centers - centers ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && centers == centers - centers ) { add ( STRING_CONSTANT ) ; }
Distance : 7

192
Tree	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY >= centers ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY >= centers ) { add ( STRING_CONSTANT ) ; return; }
Distance : 7

193
Tree	if ( x < NUMBER_CONSTANT && estimationType == enclosing - centers ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && estimationType == enclosing - centers ) { add ( STRING_CONSTANT ) ; }
Distance : 7

194
Tree	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY && slots ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && MILLIS_PER_DAY && slots ) { add ( STRING_CONSTANT ) ; }
Distance : 6

195
Tree	if ( x < NUMBER_CONSTANT && anyStringNull >= this . subtypes ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && anyStringNull >= this . subtypes ) { add ( STRING_CONSTANT ) ; return; }
Distance : 8

196
Tree	if ( x == NUMBER_CONSTANT && estimationType >= thatUnresolved ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && estimationType >= thatUnresolved ) { add ( STRING_CONSTANT ) ; }
Distance : 7

197
Tree	if ( x == NUMBER_CONSTANT && enclosing >= centers ) { add ( STRING_CONSTANT ) ; }
Code	if ( x == NUMBER_CONSTANT && enclosing >= centers ) { add ( STRING_CONSTANT ) ; }
Distance : 7

198
Tree	if ( x < NUMBER_CONSTANT && thatUnresolved >= this . subtypes . TRUTHY ) { add ( STRING_CONSTANT ) ; }
Code	if ( x < NUMBER_CONSTANT && thatUnresolved >= this . subtypes . TRUTHY ) { add ( STRING_CONSTANT ) ; }
Distance : 9

199
Tree	if ( x < NUMBER_CONSTANT && lastMatch >= this . subtypes ) { add ( STRING_CONSTANT ) ; return; }
Code	if ( x < NUMBER_CONSTANT && lastMatch >= this . subtypes ) { add ( STRING_CONSTANT ) ; return; }
Distance : 8

========================================================================


========================================================================
Example Number: 26
Parent Code is: 
cc . listSeparator () ;
-------------------------------------------------------------------------------
Child code is: 
cc . addOp ( opStr , true ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (32 (800{val=cc}) (235{val=.}) (802{val=listSeparator}) (216{val=()})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (32 (800{val=cc}) (235{val=.}) (802{val=addOp}) (214{val=(}) (800{val=opStr}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/34/parent/src_com_google_javascript_jscomp_CodeGenerator.java
-------------------------------------------------------------------------------
Edit Distance : 6
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	cc = false ;
Code	cc = false ;
Distance : 7

1
Tree	passName = false ;
Code	passName = false ;
Distance : 8

2
Tree	config = false ;
Code	config = false ;
Distance : 8

3
Tree	block = false ;
Code	block = false ;
Distance : 8

4
Tree	token = false ;
Code	token = false ;
Distance : 8

5
Tree	cc = new UnicodeUnescaper <> () ;
Code	cc = new UnicodeUnescaper <> () ;
Distance : 7

6
Tree	cc . transpileUnmarkedBlock ( NUMBER_CONSTANT ) ;
Code	cc . transpileUnmarkedBlock ( NUMBER_CONSTANT ) ;
Distance : 4

7
Tree	cc . transpileUnmarkedBlock ( Feature.MODULES ) ;
Code	cc . transpileUnmarkedBlock ( Feature.MODULES ) ;
Distance : 4

8
Tree	block = null ;
Code	block = null ;
Distance : 8

9
Tree	cc () . getExternProperties () ;
Code	cc () . getExternProperties () ;
Distance : 7

10
Tree	cc () . isSuccessful () ;
Code	cc () . isSuccessful () ;
Distance : 7

11
Tree	this . jsRoot = coefficients.length ;
Code	this . jsRoot = coefficients.length ;
Distance : 7

12
Tree	cc () . getAlternatesWithoutStructuralTyping () ;
Code	cc () . getAlternatesWithoutStructuralTyping () ;
Distance : 7

13
Tree	cc = cc . getChangeStamp ( NUMBER_CONSTANT ) ;
Code	cc = cc . getChangeStamp ( NUMBER_CONSTANT ) ;
Distance : 6

14
Tree	passName () . isFailed () ;
Code	passName () . isFailed () ;
Distance : 8

15
Tree	this . cc = coefficients.length ;
Code	this . cc = coefficients.length ;
Distance : 7

16
Tree	cc = null ;
Code	cc = null ;
Distance : 7

17
Tree	emptiedClinitMethods = false ;
Code	emptiedClinitMethods = false ;
Distance : 8

18
Tree	passes = false ;
Code	passes = false ;
Distance : 8

19
Tree	cc () . transpileUnmarkedBlock () ;
Code	cc () . transpileUnmarkedBlock () ;
Distance : 7

20
Tree	cc () . isFailed () ;
Code	cc () . isFailed () ;
Distance : 7

21
Tree	cc = new ExceptionWithCause <> () ;
Code	cc = new ExceptionWithCause <> () ;
Distance : 7

22
Tree	cc . shutdown ( NUMBER_CONSTANT ) ;
Code	cc . shutdown ( NUMBER_CONSTANT ) ;
Distance : 4

23
Tree	addChildToFront ( block ) ;
Code	addChildToFront ( block ) ;
Distance : 6

24
Tree	setEs6ModuleTranspilation ( block ) ;
Code	setEs6ModuleTranspilation ( block ) ;
Distance : 6

25
Tree	cc = new Random <> () ;
Code	cc = new Random <> () ;
Distance : 7

26
Tree	passName . transpileUnmarkedBlock () ;
Code	passName . transpileUnmarkedBlock () ;
Distance : 7

27
Tree	addChildToFront () ;
Code	addChildToFront () ;
Distance : 8

28
Tree	transpileUnmarkedBlock ( false ) ;
Code	transpileUnmarkedBlock ( false ) ;
Distance : 6

29
Tree	cc . shutdown ( Feature.MODULES ) ;
Code	cc . shutdown ( Feature.MODULES ) ;
Distance : 4

30
Tree	passName = new UnicodeUnescaper <> () ;
Code	passName = new UnicodeUnescaper <> () ;
Distance : 8

31
Tree	setEs6ModuleTranspilation () ;
Code	setEs6ModuleTranspilation () ;
Distance : 8

32
Tree	config . transpileUnmarkedBlock ( block , UTF_8 ) ;
Code	config . transpileUnmarkedBlock ( block , UTF_8 ) ;
Distance : 4

33
Tree	ifBlock = false ;
Code	ifBlock = false ;
Distance : 8

34
Tree	cc () . isStringKey () ;
Code	cc () . isStringKey () ;
Distance : 7

35
Tree	cc = new result <> () ;
Code	cc = new result <> () ;
Distance : 7

36
Tree	config . transpileUnmarkedBlock ( block ) ;
Code	config . transpileUnmarkedBlock ( block ) ;
Distance : 5

37
Tree	block . transpileUnmarkedBlock ( block , UTF_8 ) ;
Code	block . transpileUnmarkedBlock ( block , UTF_8 ) ;
Distance : 4

38
Tree	cc () . getCenterY () ;
Code	cc () . getCenterY () ;
Distance : 7

39
Tree	emptiedClinitMethods = null ;
Code	emptiedClinitMethods = null ;
Distance : 8

40
Tree	isAssignmentOp () ;
Code	isAssignmentOp () ;
Distance : 8

41
Tree	nextChar () ;
Code	nextChar () ;
Distance : 8

42
Tree	block . transpileUnmarkedBlock ( block ) ;
Code	block . transpileUnmarkedBlock ( block ) ;
Distance : 5

43
Tree	new UnicodeUnescaper ( block ) . getDeclaredType () ;
Code	new UnicodeUnescaper ( block ) . getDeclaredType () ;
Distance : 8

44
Tree	passName . shutdown ( block ) ;
Code	passName . shutdown ( block ) ;
Distance : 5

45
Tree	passName . transpileUnmarkedBlock ( Feature.MODULES ) ;
Code	passName . transpileUnmarkedBlock ( Feature.MODULES ) ;
Distance : 5

46
Tree	cc = cc . getFailures ( NUMBER_CONSTANT ) ;
Code	cc = cc . getFailures ( NUMBER_CONSTANT ) ;
Distance : 6

47
Tree	cc = config . getFailures ( NUMBER_CONSTANT ) ;
Code	cc = config . getFailures ( NUMBER_CONSTANT ) ;
Distance : 6

48
Tree	transpileUnmarkedBlock ( STRING_CONSTANT ) ;
Code	transpileUnmarkedBlock ( STRING_CONSTANT ) ;
Distance : 6

49
Tree	isLiteralValue ( block ) ;
Code	isLiteralValue ( block ) ;
Distance : 6

50
Tree	this . pivotSelection = require ;
Code	this . pivotSelection = require ;
Distance : 7

51
Tree	cc = new Interval <> () ;
Code	cc = new Interval <> () ;
Distance : 7

52
Tree	config . transpileUnmarkedBlock ( Feature.MODULES ) ;
Code	config . transpileUnmarkedBlock ( Feature.MODULES ) ;
Distance : 5

53
Tree	cc . transpileUnmarkedBlock ( block ) ;
Code	cc . transpileUnmarkedBlock ( block ) ;
Distance : 4

54
Tree	this . jsRoot . getChangeStamp () ;
Code	this . jsRoot . getChangeStamp () ;
Distance : 7

55
Tree	config . transpileUnmarkedBlock () ;
Code	config . transpileUnmarkedBlock () ;
Distance : 7

56
Tree	block . transpileUnmarkedBlock ( Feature.MODULES ) ;
Code	block . transpileUnmarkedBlock ( Feature.MODULES ) ;
Distance : 5

57
Tree	config . transpileUnmarkedBlock ( NUMBER_CONSTANT ) ;
Code	config . transpileUnmarkedBlock ( NUMBER_CONSTANT ) ;
Distance : 5

58
Tree	this . cc . getChangeStamp () ;
Code	this . cc . getChangeStamp () ;
Distance : 7

59
Tree	this . jsRoot = PropAccess.STRUCT ;
Code	this . jsRoot = PropAccess.STRUCT ;
Distance : 7

60
Tree	isFailed ( block ) ;
Code	isFailed ( block ) ;
Distance : 6

61
Tree	this . jsRoot . shutdown () ;
Code	this . jsRoot . shutdown () ;
Distance : 7

62
Tree	this . token . getChangeStamp () ;
Code	this . token . getChangeStamp () ;
Distance : 7

63
Tree	this . cc = DateTimeZone ;
Code	this . cc = DateTimeZone ;
Distance : 7

64
Tree	passName . transpileUnmarkedBlock ( NUMBER_CONSTANT ) ;
Code	passName . transpileUnmarkedBlock ( NUMBER_CONSTANT ) ;
Distance : 5

65
Tree	cc . transpileUnmarkedBlock ( block , UTF_8 ) ;
Code	cc . transpileUnmarkedBlock ( block , UTF_8 ) ;
Distance : 3

66
Tree	this . cc . shutdown () ;
Code	this . cc . shutdown () ;
Distance : 7

67
Tree	block . transpileUnmarkedBlock () ;
Code	block . transpileUnmarkedBlock () ;
Distance : 7

68
Tree	config . shutdown ( block ) ;
Code	config . shutdown ( block ) ;
Distance : 5

69
Tree	passName . shutdown () ;
Code	passName . shutdown () ;
Distance : 7

70
Tree	block . transpileUnmarkedBlock ( NUMBER_CONSTANT ) ;
Code	block . transpileUnmarkedBlock ( NUMBER_CONSTANT ) ;
Distance : 5

71
Tree	passName = cc . getFailures ( NUMBER_CONSTANT ) ;
Code	passName = cc . getFailures ( NUMBER_CONSTANT ) ;
Distance : 6

72
Tree	cc = NodeUtil . getChangeStamp ( NUMBER_CONSTANT ) ;
Code	cc = NodeUtil . getChangeStamp ( NUMBER_CONSTANT ) ;
Distance : 6

73
Tree	this . pivotSelection . getChangeStamp () ;
Code	this . pivotSelection . getChangeStamp () ;
Distance : 7

74
Tree	isLiteralValue () ;
Code	isLiteralValue () ;
Distance : 8

75
Tree	setEs6ModuleTranspilation ( STRING_CONSTANT ) ;
Code	setEs6ModuleTranspilation ( STRING_CONSTANT ) ;
Distance : 6

76
Tree	passName . shutdown ( block , UTF_8 ) ;
Code	passName . shutdown ( block , UTF_8 ) ;
Distance : 4

77
Tree	cc . writeImageMap ( block ) ;
Code	cc . writeImageMap ( block ) ;
Distance : 4

78
Tree	config = new UnicodeUnescaper <> () ;
Code	config = new UnicodeUnescaper <> () ;
Distance : 8

79
Tree	cc . transpileUnmarkedBlock () ;
Code	cc . transpileUnmarkedBlock () ;
Distance : 6

80
Tree	new UnicodeUnescaper ( cc ) . getDeclaredType () ;
Code	new UnicodeUnescaper ( cc ) . getDeclaredType () ;
Distance : 8

81
Tree	this . cc = PropAccess.STRUCT ;
Code	this . cc = PropAccess.STRUCT ;
Distance : 7

82
Tree	transpileUnmarkedBlock () ;
Code	transpileUnmarkedBlock () ;
Distance : 8

83
Tree	this . jsRoot . getFailures () ;
Code	this . jsRoot . getFailures () ;
Distance : 7

84
Tree	passName . transpileUnmarkedBlock ( block , UTF_8 ) ;
Code	passName . transpileUnmarkedBlock ( block , UTF_8 ) ;
Distance : 4

85
Tree	passName = null ;
Code	passName = null ;
Distance : 8

86
Tree	config . shutdown ( block , UTF_8 ) ;
Code	config . shutdown ( block , UTF_8 ) ;
Distance : 4

87
Tree	cc . writeImageMap ( block , UTF_8 ) ;
Code	cc . writeImageMap ( block , UTF_8 ) ;
Distance : 3

88
Tree	this . jsRoot = DateTimeZone ;
Code	this . jsRoot = DateTimeZone ;
Distance : 7

89
Tree	config . shutdown () ;
Code	config . shutdown () ;
Distance : 7

90
Tree	transpileUnmarkedBlock ( block ) ;
Code	transpileUnmarkedBlock ( block ) ;
Distance : 6

91
Tree	this . cc . getFailures () ;
Code	this . cc . getFailures () ;
Distance : 7

92
Tree	passName . shutdown ( NUMBER_CONSTANT ) ;
Code	passName . shutdown ( NUMBER_CONSTANT ) ;
Distance : 5

93
Tree	this . pivotSelection = DateTimeZone ;
Code	this . pivotSelection = DateTimeZone ;
Distance : 7

94
Tree	config . transpileUnmarkedBlock ( block , false ) ;
Code	config . transpileUnmarkedBlock ( block , false ) ;
Distance : 4

95
Tree	this . cc = require ;
Code	this . cc = require ;
Distance : 7

96
Tree	cc = NodeUtil . getFailures ( NUMBER_CONSTANT ) ;
Code	cc = NodeUtil . getFailures ( NUMBER_CONSTANT ) ;
Distance : 6

97
Tree	cc . transpileUnmarkedBlock ( block . getStringMap () ) ;
Code	cc . transpileUnmarkedBlock ( block . getStringMap () ) ;
Distance : 5

98
Tree	isLiteralValue ( false ) ;
Code	isLiteralValue ( false ) ;
Distance : 6

99
Tree	this . jsRoot = localizationResources ;
Code	this . jsRoot = localizationResources ;
Distance : 7

100
Tree	this . jsRoot = PropertyCollapseLevel.NONE ;
Code	this . jsRoot = PropertyCollapseLevel.NONE ;
Distance : 7

101
Tree	cc = result . getFailures ( NUMBER_CONSTANT ) ;
Code	cc = result . getFailures ( NUMBER_CONSTANT ) ;
Distance : 6

102
Tree	config = null ;
Code	config = null ;
Distance : 8

103
Tree	cc . transpileUnmarkedBlock ( block . getInput () ) ;
Code	cc . transpileUnmarkedBlock ( block . getInput () ) ;
Distance : 5

104
Tree	this . jsRoot = require ;
Code	this . jsRoot = require ;
Distance : 7

105
Tree	cc . shutdown ( null ) ;
Code	cc . shutdown ( null ) ;
Distance : 4

106
Tree	cc = CallSiteType.UNSUPPORTED ;
Code	cc = CallSiteType.UNSUPPORTED ;
Distance : 7

107
Tree	registerTypeParametersOn () ;
Code	registerTypeParametersOn () ;
Distance : 8

108
Tree	block = new UnicodeUnescaper <> () ;
Code	block = new UnicodeUnescaper <> () ;
Distance : 8

109
Tree	new UnicodeUnescaper ( block ) . isSuccessful () ;
Code	new UnicodeUnescaper ( block ) . isSuccessful () ;
Distance : 8

110
Tree	isFailed ( false ) ;
Code	isFailed ( false ) ;
Distance : 6

111
Tree	isAssignmentOp ( false ) ;
Code	isAssignmentOp ( false ) ;
Distance : 6

112
Tree	registerTypeParametersOn ( false ) ;
Code	registerTypeParametersOn ( false ) ;
Distance : 6

113
Tree	this . cc = localizationResources ;
Code	this . cc = localizationResources ;
Distance : 7

114
Tree	config . transpileUnmarkedBlock ( null ) ;
Code	config . transpileUnmarkedBlock ( null ) ;
Distance : 5

115
Tree	passes = null ;
Code	passes = null ;
Distance : 8

116
Tree	registerTypeParametersOn ( block ) ;
Code	registerTypeParametersOn ( block ) ;
Distance : 6

117
Tree	cc . writeImageMap ( Feature.MODULES ) ;
Code	cc . writeImageMap ( Feature.MODULES ) ;
Distance : 4

118
Tree	nextChar ( false ) ;
Code	nextChar ( false ) ;
Distance : 6

119
Tree	cc . transpileUnmarkedBlock ( block , false ) ;
Code	cc . transpileUnmarkedBlock ( block , false ) ;
Distance : 3

120
Tree	cc . shutdown ( block , false ) ;
Code	cc . shutdown ( block , false ) ;
Distance : 3

121
Tree	cc . writeImageMap ( NUMBER_CONSTANT ) ;
Code	cc . writeImageMap ( NUMBER_CONSTANT ) ;
Distance : 4

122
Tree	cc . writeImageMap () ;
Code	cc . writeImageMap () ;
Distance : 6

123
Tree	passName . shutdown ( Feature.MODULES ) ;
Code	passName . shutdown ( Feature.MODULES ) ;
Distance : 5

124
Tree	token = null ;
Code	token = null ;
Distance : 8

125
Tree	cc = DateTimeZone . getFailures ( NUMBER_CONSTANT ) ;
Code	cc = DateTimeZone . getFailures ( NUMBER_CONSTANT ) ;
Distance : 6

126
Tree	passName . transpileUnmarkedBlock ( null ) ;
Code	passName . transpileUnmarkedBlock ( null ) ;
Distance : 5

127
Tree	isLiteralValue ( STRING_CONSTANT ) ;
Code	isLiteralValue ( STRING_CONSTANT ) ;
Distance : 6

128
Tree	this . pivotSelection = coefficients.length ;
Code	this . pivotSelection = coefficients.length ;
Distance : 7

129
Tree	cc = PropAccess.STRUCT ;
Code	cc = PropAccess.STRUCT ;
Distance : 7

130
Tree	passName . shutdown ( block , false ) ;
Code	passName . shutdown ( block , false ) ;
Distance : 4

131
Tree	block . transpileUnmarkedBlock ( block , false ) ;
Code	block . transpileUnmarkedBlock ( block , false ) ;
Distance : 4

132
Tree	config . shutdown ( Feature.MODULES ) ;
Code	config . shutdown ( Feature.MODULES ) ;
Distance : 5

133
Tree	ifBlock = null ;
Code	ifBlock = null ;
Distance : 8

134
Tree	isAssignmentOp ( STRING_CONSTANT ) ;
Code	isAssignmentOp ( STRING_CONSTANT ) ;
Distance : 6

135
Tree	cc . shutdown ( block ) ;
Code	cc . shutdown ( block ) ;
Distance : 4

136
Tree	cc . shutdown () ;
Code	cc . shutdown () ;
Distance : 6

137
Tree	cc . shutdown ( block , UTF_8 ) ;
Code	cc . shutdown ( block , UTF_8 ) ;
Distance : 3

138
Tree	cc . transpileUnmarkedBlock ( null ) ;
Code	cc . transpileUnmarkedBlock ( null ) ;
Distance : 4

139
Tree	registerTypeParametersOn ( STRING_CONSTANT ) ;
Code	registerTypeParametersOn ( STRING_CONSTANT ) ;
Distance : 6

140
Tree	this . pivotSelection = PropertyCollapseLevel.NONE ;
Code	this . pivotSelection = PropertyCollapseLevel.NONE ;
Distance : 7

141
Tree	block . transpileUnmarkedBlock ( null ) ;
Code	block . transpileUnmarkedBlock ( null ) ;
Distance : 5

142
Tree	cc = JsDocToken.PIPE ;
Code	cc = JsDocToken.PIPE ;
Distance : 7

143
Tree	passName = coefficients.length ;
Code	passName = coefficients.length ;
Distance : 8

144
Tree	isFailed () ;
Code	isFailed () ;
Distance : 8

145
Tree	isAssignmentOp ( block ) ;
Code	isAssignmentOp ( block ) ;
Distance : 6

146
Tree	nextChar ( block ) ;
Code	nextChar ( block ) ;
Distance : 6

147
Tree	cc . transpileUnmarkedBlock ( block . hasExistingFunctionDefinition () ) ;
Code	cc . transpileUnmarkedBlock ( block . hasExistingFunctionDefinition () ) ;
Distance : 5

148
Tree	new ObjectStreamClass ( block ) . isSuccessful () ;
Code	new ObjectStreamClass ( block ) . isSuccessful () ;
Distance : 8

149
Tree	nextChar ( STRING_CONSTANT ) ;
Code	nextChar ( STRING_CONSTANT ) ;
Distance : 6

150
Tree	config . shutdown ( block , false ) ;
Code	config . shutdown ( block , false ) ;
Distance : 4

151
Tree	new ObjectStreamClass ( cc ) . getDeclaredType () ;
Code	new ObjectStreamClass ( cc ) . getDeclaredType () ;
Distance : 8

152
Tree	cc . writeImageMap ( block , false ) ;
Code	cc . writeImageMap ( block , false ) ;
Distance : 3

153
Tree	cc . transpileUnmarkedBlock ( block . bark () ) ;
Code	cc . transpileUnmarkedBlock ( block . bark () ) ;
Distance : 5

154
Tree	cc = coefficients.length ;
Code	cc = coefficients.length ;
Distance : 7

155
Tree	this . cc = PropertyCollapseLevel.NONE ;
Code	this . cc = PropertyCollapseLevel.NONE ;
Distance : 7

156
Tree	config . shutdown ( NUMBER_CONSTANT ) ;
Code	config . shutdown ( NUMBER_CONSTANT ) ;
Distance : 5

157
Tree	new UnicodeUnescaper ( passName ) . getDeclaredType () ;
Code	new UnicodeUnescaper ( passName ) . getDeclaredType () ;
Distance : 8

158
Tree	cc = PropertyRenamingPolicy.ALL_UNQUOTED ;
Code	cc = PropertyRenamingPolicy.ALL_UNQUOTED ;
Distance : 7

159
Tree	addChildToFront ( STRING_CONSTANT ) ;
Code	addChildToFront ( STRING_CONSTANT ) ;
Distance : 6

160
Tree	cc = Boolean.TRUE ;
Code	cc = Boolean.TRUE ;
Distance : 7

161
Tree	isFailed ( STRING_CONSTANT ) ;
Code	isFailed ( STRING_CONSTANT ) ;
Distance : 6

162
Tree	cc = new UnicodeUnescaper ( block ) ;
Code	cc = new UnicodeUnescaper ( block ) ;
Distance : 6

163
Tree	cc . transpileUnmarkedBlock ( block . compilerModule () ) ;
Code	cc . transpileUnmarkedBlock ( block . compilerModule () ) ;
Distance : 5

164
Tree	new UnicodeUnescaper ( cc ) . isSuccessful () ;
Code	new UnicodeUnescaper ( cc ) . isSuccessful () ;
Distance : 8

165
Tree	addChildToFront ( false ) ;
Code	addChildToFront ( false ) ;
Distance : 6

166
Tree	setEs6ModuleTranspilation ( false ) ;
Code	setEs6ModuleTranspilation ( false ) ;
Distance : 6

167
Tree	passName . transpileUnmarkedBlock ( block ) ;
Code	passName . transpileUnmarkedBlock ( block ) ;
Distance : 5

168
Tree	passName . transpileUnmarkedBlock ( block , false ) ;
Code	passName . transpileUnmarkedBlock ( block , false ) ;
Distance : 4

169
Tree	new ObjectStreamClass ( block ) . getDeclaredType () ;
Code	new ObjectStreamClass ( block ) . getDeclaredType () ;
Distance : 8

170
Tree	cc . shutdown ( block . compilerModule () ) ;
Code	cc . shutdown ( block . compilerModule () ) ;
Distance : 5

171
Tree	passName . shutdown ( null ) ;
Code	passName . shutdown ( null ) ;
Distance : 5

172
Tree	cc . transpileUnmarkedBlock ( block . getFailures () ) ;
Code	cc . transpileUnmarkedBlock ( block . getFailures () ) ;
Distance : 5

173
Tree	cc = mant.length ;
Code	cc = mant.length ;
Distance : 7

174
Tree	config . shutdown ( null ) ;
Code	config . shutdown ( null ) ;
Distance : 5

175
Tree	cc . writeImageMap ( null ) ;
Code	cc . writeImageMap ( null ) ;
Distance : 4

176
Tree	cc . shutdown ( block . getFailures () ) ;
Code	cc . shutdown ( block . getFailures () ) ;
Distance : 5

177
Tree	cc = new UnicodeUnescaper ( passName ) ;
Code	cc = new UnicodeUnescaper ( passName ) ;
Distance : 6

178
Tree	new objectMethodsGuru () . getChronologyUTC () ;
Code	new objectMethodsGuru () . getChronologyUTC () ;
Distance : 8

179
Tree	cc = new UnicodeUnescaper ( cc ) ;
Code	cc = new UnicodeUnescaper ( cc ) ;
Distance : 6

180
Tree	new objectMethodsGuru () . getCenterY () ;
Code	new objectMethodsGuru () . getCenterY () ;
Distance : 8

181
Tree	new ExceptionWithCause () . getChronologyUTC () ;
Code	new ExceptionWithCause () . getChronologyUTC () ;
Distance : 8

182
Tree	transpileUnmarkedBlock ( block . hasExistingFunctionDefinition () ) ;
Code	transpileUnmarkedBlock ( block . hasExistingFunctionDefinition () ) ;
Distance : 7

183
Tree	transpileUnmarkedBlock ( block . getFailures () ) ;
Code	transpileUnmarkedBlock ( block . getFailures () ) ;
Distance : 7

184
Tree	transpileUnmarkedBlock ( block . isAdd () ) ;
Code	transpileUnmarkedBlock ( block . isAdd () ) ;
Distance : 7

185
Tree	cc = new ExceptionWithCause ( block ) ;
Code	cc = new ExceptionWithCause ( block ) ;
Distance : 6

186
Tree	cc = new Random ( block ) ;
Code	cc = new Random ( block ) ;
Distance : 6

187
Tree	new ExceptionWithCause () . getCenterY () ;
Code	new ExceptionWithCause () . getCenterY () ;
Distance : 8

188
Tree	new objectMethodsGuru () . transpileUnmarkedBlock () ;
Code	new objectMethodsGuru () . transpileUnmarkedBlock () ;
Distance : 8

189
Tree	registerTypeParametersOn ( block . getFailures () ) ;
Code	registerTypeParametersOn ( block . getFailures () ) ;
Distance : 7

190
Tree	registerTypeParametersOn ( block . hasExistingFunctionDefinition () ) ;
Code	registerTypeParametersOn ( block . hasExistingFunctionDefinition () ) ;
Distance : 7

191
Tree	passName = new UnicodeUnescaper ( block ) ;
Code	passName = new UnicodeUnescaper ( block ) ;
Distance : 7

192
Tree	new emptiedClinitMethods () . getChronologyUTC () ;
Code	new emptiedClinitMethods () . getChronologyUTC () ;
Distance : 8

193
Tree	transpileUnmarkedBlock ( block . getStringMap () ) ;
Code	transpileUnmarkedBlock ( block . getStringMap () ) ;
Distance : 7

194
Tree	cc = new UnicodeUnescaper ( token ) ;
Code	cc = new UnicodeUnescaper ( token ) ;
Distance : 6

195
Tree	new ExceptionWithCause () . transpileUnmarkedBlock () ;
Code	new ExceptionWithCause () . transpileUnmarkedBlock () ;
Distance : 8

196
Tree	registerTypeParametersOn ( block . isAdd () ) ;
Code	registerTypeParametersOn ( block . isAdd () ) ;
Distance : 7

197
Tree	isFailed ( block . getFailures () ) ;
Code	isFailed ( block . getFailures () ) ;
Distance : 7

198
Tree	cc = new ExceptionWithCause ( passName ) ;
Code	cc = new ExceptionWithCause ( passName ) ;
Distance : 6

199
Tree	new emptiedClinitMethods () . getCenterY () ;
Code	new emptiedClinitMethods () . getCenterY () ;
Distance : 8

========================================================================


========================================================================
Example Number: 27
Parent Code is: 
options.dependencyOptions . needsManagement () && ! options.skipAllPasses && options.closurePass
-------------------------------------------------------------------------------
Child code is: 
options.dependencyOptions . needsManagement () && options.closurePass
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (32 (40{val=options.dependencyOptions}) (235{val=.}) (802{val=needsManagement}) (216{val=()})) (249{val=&&}) (38 (207{val=!}) (40{val=options.skipAllPasses})) (249{val=&&}) (40{val=options.closurePass})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (32 (40{val=options.dependencyOptions}) (235{val=.}) (802{val=needsManagement}) (216{val=()})) (249{val=&&}) (40{val=options.closurePass})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/31/parent/src_com_google_javascript_jscomp_Compiler.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	this . runSmartNameRemoval . getReplacements () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . runSmartNameRemoval . getReplacements () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

1
Tree	oldRoot + STRING_CONSTANT
Code	oldRoot + STRING_CONSTANT
Distance : 6

2
Tree	java.lang.Class < String == NUMBER_CONSTANT
Code	java.lang.Class < String == NUMBER_CONSTANT
Distance : 6

3
Tree	bundler . writeImageMap ( null ) > NUMBER_CONSTANT
Code	bundler . writeImageMap ( null ) > NUMBER_CONSTANT
Distance : 7

4
Tree	typesIndexedByProperty + STRING_CONSTANT
Code	typesIndexedByProperty + STRING_CONSTANT
Distance : 6

5
Tree	this . negativeItemLabelPositionMap . getReplacements () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . negativeItemLabelPositionMap . getReplacements () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

6
Tree	this . subtypes . getReplacements () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . subtypes . getReplacements () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

7
Tree	copy.linkMap < Scope
Code	copy.linkMap < Scope
Distance : 6

8
Tree	umdPattern.activeBranch < Scope
Code	umdPattern.activeBranch < Scope
Distance : 6

9
Tree	this . runSmartNameRemoval == null == NUMBER_CONSTANT
Code	this . runSmartNameRemoval == null == NUMBER_CONSTANT
Distance : 6

10
Tree	currentCase.embedInto < Scope
Code	currentCase.embedInto < Scope
Distance : 6

11
Tree	this . subtypes == null == NUMBER_CONSTANT
Code	this . subtypes == null == NUMBER_CONSTANT
Distance : 6

12
Tree	this . negativeItemLabelPositionMap == null == NUMBER_CONSTANT
Code	this . negativeItemLabelPositionMap == null == NUMBER_CONSTANT
Distance : 6

13
Tree	java.lang.Class < Feature
Code	java.lang.Class < Feature
Distance : 6

14
Tree	objectMethodsGuru + STRING_CONSTANT
Code	objectMethodsGuru + STRING_CONSTANT
Distance : 6

15
Tree	this . sectionOutlineStrokeMap . writeImageMap () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . sectionOutlineStrokeMap . writeImageMap () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

16
Tree	oldRoot . writeImageMap ( decl . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	oldRoot . writeImageMap ( decl . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 11

17
Tree	NULL_TYPE < Scope + STRING_CONSTANT
Code	NULL_TYPE < Scope + STRING_CONSTANT
Distance : 6

18
Tree	convention < Scope + STRING_CONSTANT
Code	convention < Scope + STRING_CONSTANT
Distance : 6

19
Tree	typesIndexedByProperty . writeImageMap ( decl . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	typesIndexedByProperty . writeImageMap ( decl . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 11

20
Tree	objectMethodsGuru . writeImageMap ( ( Path [] ) null ) == super
Code	objectMethodsGuru . writeImageMap ( ( Path [] ) null ) == super
Distance : 11

21
Tree	null != this . emptyAsNull . isNamedProperty () == NUMBER_CONSTANT
Code	null != this . emptyAsNull . isNamedProperty () == NUMBER_CONSTANT
Distance : 8

22
Tree	oldRoot . writeImageMap ( ( Path [] ) null ) == super
Code	oldRoot . writeImageMap ( ( Path [] ) null ) == super
Distance : 11

23
Tree	null != this . emptyAsNull . shutdown () == NUMBER_CONSTANT
Code	null != this . emptyAsNull . shutdown () == NUMBER_CONSTANT
Distance : 8

24
Tree	objectMethodsGuru < Scope + STRING_CONSTANT
Code	objectMethodsGuru < Scope + STRING_CONSTANT
Distance : 6

25
Tree	AtLeastXVerificationTest . writeImageMap ( null ) > NUMBER_CONSTANT
Code	AtLeastXVerificationTest . writeImageMap ( null ) > NUMBER_CONSTANT
Distance : 7

26
Tree	oldRoot < Scope + STRING_CONSTANT
Code	oldRoot < Scope + STRING_CONSTANT
Distance : 6

27
Tree	null != SIZE_THRESHOLD . enumLiteralHasKey ( path . class )
Code	null != SIZE_THRESHOLD . enumLiteralHasKey ( path . class )
Distance : 9

28
Tree	NULL_TYPE . writeImageMap ( null ) > NUMBER_CONSTANT
Code	NULL_TYPE . writeImageMap ( null ) > NUMBER_CONSTANT
Distance : 7

29
Tree	convention . writeImageMap ( null ) > NUMBER_CONSTANT
Code	convention . writeImageMap ( null ) > NUMBER_CONSTANT
Distance : 7

30
Tree	findDeps . writeImageMap ( currentScript . class ) > NUMBER_CONSTANT
Code	findDeps . writeImageMap ( currentScript . class ) > NUMBER_CONSTANT
Distance : 9

31
Tree	typesIndexedByProperty < Scope + STRING_CONSTANT
Code	typesIndexedByProperty < Scope + STRING_CONSTANT
Distance : 6

32
Tree	java.lang.Class < Rule == NUMBER_CONSTANT
Code	java.lang.Class < Rule == NUMBER_CONSTANT
Distance : 6

33
Tree	findDeps < Scope + STRING_CONSTANT
Code	findDeps < Scope + STRING_CONSTANT
Distance : 6

34
Tree	AtLeastXVerificationTest . writeImageMap ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	AtLeastXVerificationTest . writeImageMap ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 9

35
Tree	objectMethodsGuru . writeImageMap ( null ) < >=
Code	objectMethodsGuru . writeImageMap ( null ) < >=
Distance : 7

36
Tree	calculator.invocationToReturn < Scope == NUMBER_CONSTANT
Code	calculator.invocationToReturn < Scope == NUMBER_CONSTANT
Distance : 6

37
Tree	ImmutableMultiset.Builder + NUMBER_CONSTANT == NUMBER_CONSTANT
Code	ImmutableMultiset.Builder + NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 6

38
Tree	NULL_TYPE . writeImageMap ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	NULL_TYPE . writeImageMap ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 9

39
Tree	convention . writeImageMap ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	convention . writeImageMap ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 9

40
Tree	null != modulesSupplier . enumLiteralHasKey ( null )
Code	null != modulesSupplier . enumLiteralHasKey ( null )
Distance : 7

41
Tree	null != Feature . enumLiteralHasKey ( null )
Code	null != Feature . enumLiteralHasKey ( null )
Distance : 7

42
Tree	java.lang.Class != null == NUMBER_CONSTANT
Code	java.lang.Class != null == NUMBER_CONSTANT
Distance : 6

43
Tree	null != MILLIS_PER_DAY . enumLiteralHasKey ( null )
Code	null != MILLIS_PER_DAY . enumLiteralHasKey ( null )
Distance : 7

44
Tree	java.lang.Class + NUMBER_CONSTANT == NUMBER_CONSTANT
Code	java.lang.Class + NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 6

45
Tree	this . runSmartNameRemoval . getSuperClass () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . runSmartNameRemoval . getSuperClass () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

46
Tree	findDeps + STRING_CONSTANT
Code	findDeps + STRING_CONSTANT
Distance : 6

47
Tree	objectMethodsGuru . writeImageMap ( currentScript . class ) > NUMBER_CONSTANT
Code	objectMethodsGuru . writeImageMap ( currentScript . class ) > NUMBER_CONSTANT
Distance : 9

48
Tree	this . subtypes . getSuperClass () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . subtypes . getSuperClass () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

49
Tree	oldRoot . writeImageMap ( currentScript . class ) > NUMBER_CONSTANT
Code	oldRoot . writeImageMap ( currentScript . class ) > NUMBER_CONSTANT
Distance : 9

50
Tree	typesIndexedByProperty . writeImageMap ( decl . class ) > NUMBER_CONSTANT
Code	typesIndexedByProperty . writeImageMap ( decl . class ) > NUMBER_CONSTANT
Distance : 9

51
Tree	oldRoot . writeImageMap ( null ) < >=
Code	oldRoot . writeImageMap ( null ) < >=
Distance : 7

52
Tree	typesIndexedByProperty . writeImageMap ( currentScript . class ) > NUMBER_CONSTANT
Code	typesIndexedByProperty . writeImageMap ( currentScript . class ) > NUMBER_CONSTANT
Distance : 9

53
Tree	null != anyStringNull . enumLiteralHasKey ( path . class )
Code	null != anyStringNull . enumLiteralHasKey ( path . class )
Distance : 9

54
Tree	objectMethodsGuru . writeImageMap ( currentScript . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	objectMethodsGuru . writeImageMap ( currentScript . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 11

55
Tree	typesIndexedByProperty . writeImageMap ( null ) < >=
Code	typesIndexedByProperty . writeImageMap ( null ) < >=
Distance : 7

56
Tree	this . datasetToScaleMap == null == NUMBER_CONSTANT
Code	this . datasetToScaleMap == null == NUMBER_CONSTANT
Distance : 6

57
Tree	java.lang.Class < String
Code	java.lang.Class < String
Distance : 6

58
Tree	copy.linkMap < Scope == NUMBER_CONSTANT
Code	copy.linkMap < Scope == NUMBER_CONSTANT
Distance : 6

59
Tree	bundler . writeImageMap ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	bundler . writeImageMap ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 9

60
Tree	oldRoot . writeImageMap ( currentScript . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	oldRoot . writeImageMap ( currentScript . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 11

61
Tree	null != qNameRoot . enumLiteralHasKey ( path . class )
Code	null != qNameRoot . enumLiteralHasKey ( path . class )
Distance : 9

62
Tree	AtLeastXVerificationTest + STRING_CONSTANT
Code	AtLeastXVerificationTest + STRING_CONSTANT
Distance : 6

63
Tree	calculator.invocationToReturn + NUMBER_CONSTANT == NUMBER_CONSTANT
Code	calculator.invocationToReturn + NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 6

64
Tree	objectMethodsGuru . writeImageMap ( null ) < ^
Code	objectMethodsGuru . writeImageMap ( null ) < ^
Distance : 7

65
Tree	objectMethodsGuru . writeImageMap ( null ) > NUMBER_CONSTANT
Code	objectMethodsGuru . writeImageMap ( null ) > NUMBER_CONSTANT
Distance : 7

66
Tree	java.lang.Class < Feature == NUMBER_CONSTANT
Code	java.lang.Class < Feature == NUMBER_CONSTANT
Distance : 6

67
Tree	copy.linkMap + NUMBER_CONSTANT == NUMBER_CONSTANT
Code	copy.linkMap + NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 6

68
Tree	this . verificationStartedListeners == null == NUMBER_CONSTANT
Code	this . verificationStartedListeners == null == NUMBER_CONSTANT
Distance : 6

69
Tree	oldRoot . writeImageMap ( null ) > NUMBER_CONSTANT
Code	oldRoot . writeImageMap ( null ) > NUMBER_CONSTANT
Distance : 7

70
Tree	umdPattern.activeBranch + NUMBER_CONSTANT == NUMBER_CONSTANT
Code	umdPattern.activeBranch + NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 6

71
Tree	findDeps . writeImageMap ( null ) < ^
Code	findDeps . writeImageMap ( null ) < ^
Distance : 7

72
Tree	typesIndexedByProperty . writeImageMap ( null ) > NUMBER_CONSTANT
Code	typesIndexedByProperty . writeImageMap ( null ) > NUMBER_CONSTANT
Distance : 7

73
Tree	NULL_TYPE + STRING_CONSTANT
Code	NULL_TYPE + STRING_CONSTANT
Distance : 6

74
Tree	objectMethodsGuru + STRING_CONSTANT == NUMBER_CONSTANT
Code	objectMethodsGuru + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

75
Tree	null != argMismatchStubbings . enumLiteralHasKey ( path . class )
Code	null != argMismatchStubbings . enumLiteralHasKey ( path . class )
Distance : 9

76
Tree	null != methodEquals . enumLiteralHasKey ( path . class )
Code	null != methodEquals . enumLiteralHasKey ( path . class )
Distance : 9

77
Tree	java.lang.Class < Scope
Code	java.lang.Class < Scope
Distance : 6

78
Tree	oldRoot + STRING_CONSTANT == NUMBER_CONSTANT
Code	oldRoot + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

79
Tree	umdPattern.activeBranch < Scope == NUMBER_CONSTANT
Code	umdPattern.activeBranch < Scope == NUMBER_CONSTANT
Distance : 6

80
Tree	bundler + STRING_CONSTANT
Code	bundler + STRING_CONSTANT
Distance : 6

81
Tree	null != anyStringNull . enumLiteralHasKey ( null )
Code	null != anyStringNull . enumLiteralHasKey ( null )
Distance : 7

82
Tree	currentCase.embedInto + NUMBER_CONSTANT == NUMBER_CONSTANT
Code	currentCase.embedInto + NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 6

83
Tree	oldRoot . writeImageMap ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	oldRoot . writeImageMap ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 9

84
Tree	java.lang.Class < Rule
Code	java.lang.Class < Rule
Distance : 6

85
Tree	copy.linkMap != null == NUMBER_CONSTANT
Code	copy.linkMap != null == NUMBER_CONSTANT
Distance : 6

86
Tree	typesIndexedByProperty + STRING_CONSTANT == NUMBER_CONSTANT
Code	typesIndexedByProperty + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

87
Tree	typesIndexedByProperty . writeImageMap ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	typesIndexedByProperty . writeImageMap ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 9

88
Tree	convention + STRING_CONSTANT
Code	convention + STRING_CONSTANT
Distance : 6

89
Tree	null != SIZE_THRESHOLD . enumLiteralHasKey ( null )
Code	null != SIZE_THRESHOLD . enumLiteralHasKey ( null )
Distance : 7

90
Tree	oldRoot . writeImageMap ( null ) < ^
Code	oldRoot . writeImageMap ( null ) < ^
Distance : 7

91
Tree	java.lang.Class < Scope == NUMBER_CONSTANT
Code	java.lang.Class < Scope == NUMBER_CONSTANT
Distance : 6

92
Tree	objectMethodsGuru && currentScript . enumLiteralHasKey ( grandParent . class ) && ^
Code	objectMethodsGuru && currentScript . enumLiteralHasKey ( grandParent . class ) && ^
Distance : 10

93
Tree	bundler < Scope + STRING_CONSTANT
Code	bundler < Scope + STRING_CONSTANT
Distance : 6

94
Tree	typesIndexedByProperty . writeImageMap ( currentScript . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	typesIndexedByProperty . writeImageMap ( currentScript . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 11

95
Tree	null != qNameRoot . enumLiteralHasKey ( null )
Code	null != qNameRoot . enumLiteralHasKey ( null )
Distance : 7

96
Tree	null != this . emptyAsNull . getReplacements () == NUMBER_CONSTANT
Code	null != this . emptyAsNull . getReplacements () == NUMBER_CONSTANT
Distance : 8

97
Tree	null != this . emptyAsNull . fieldWasInitializedUsingContructorArgs () == NUMBER_CONSTANT
Code	null != this . emptyAsNull . fieldWasInitializedUsingContructorArgs () == NUMBER_CONSTANT
Distance : 8

98
Tree	objectMethodsGuru . writeImageMap ( decl . class ) > NUMBER_CONSTANT
Code	objectMethodsGuru . writeImageMap ( decl . class ) > NUMBER_CONSTANT
Distance : 9

99
Tree	objectMethodsGuru . writeImageMap ( path . class ) > NUMBER_CONSTANT
Code	objectMethodsGuru . writeImageMap ( path . class ) > NUMBER_CONSTANT
Distance : 9

100
Tree	MillisDurationField.INSTANCE != null == NUMBER_CONSTANT
Code	MillisDurationField.INSTANCE != null == NUMBER_CONSTANT
Distance : 6

101
Tree	findDeps + STRING_CONSTANT == NUMBER_CONSTANT
Code	findDeps + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

102
Tree	objectMethodsGuru && currentScript . enumLiteralHasKey ( null ) && ^
Code	objectMethodsGuru && currentScript . enumLiteralHasKey ( null ) && ^
Distance : 8

103
Tree	oldRoot && currentScript . enumLiteralHasKey ( grandParent . class ) && ^
Code	oldRoot && currentScript . enumLiteralHasKey ( grandParent . class ) && ^
Distance : 10

104
Tree	null != anyStringNull . enumLiteralHasKey ( type . class )
Code	null != anyStringNull . enumLiteralHasKey ( type . class )
Distance : 9

105
Tree	umdPattern.activeBranch != null == NUMBER_CONSTANT
Code	umdPattern.activeBranch != null == NUMBER_CONSTANT
Distance : 6

106
Tree	objectMethodsGuru / ctorType == NUMBER_CONSTANT
Code	objectMethodsGuru / ctorType == NUMBER_CONSTANT
Distance : 6

107
Tree	null != methodEquals . enumLiteralHasKey ( null )
Code	null != methodEquals . enumLiteralHasKey ( null )
Distance : 7

108
Tree	typesIndexedByProperty / ctorType == NUMBER_CONSTANT
Code	typesIndexedByProperty / ctorType == NUMBER_CONSTANT
Distance : 6

109
Tree	typesIndexedByProperty && currentScript . enumLiteralHasKey ( grandParent . class ) && ^
Code	typesIndexedByProperty && currentScript . enumLiteralHasKey ( grandParent . class ) && ^
Distance : 10

110
Tree	findDeps / ctorType == NUMBER_CONSTANT
Code	findDeps / ctorType == NUMBER_CONSTANT
Distance : 6

111
Tree	findDeps && currentScript . enumLiteralHasKey ( grandParent . class ) && ^
Code	findDeps && currentScript . enumLiteralHasKey ( grandParent . class ) && ^
Distance : 10

112
Tree	nt1.rawType + NUMBER_CONSTANT == NUMBER_CONSTANT
Code	nt1.rawType + NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 6

113
Tree	oldRoot . writeImageMap ( decl . class ) > NUMBER_CONSTANT
Code	oldRoot . writeImageMap ( decl . class ) > NUMBER_CONSTANT
Distance : 9

114
Tree	oldRoot / ctorType == NUMBER_CONSTANT
Code	oldRoot / ctorType == NUMBER_CONSTANT
Distance : 6

115
Tree	findDeps / type == NUMBER_CONSTANT
Code	findDeps / type == NUMBER_CONSTANT
Distance : 6

116
Tree	findDeps / currentScript == NUMBER_CONSTANT
Code	findDeps / currentScript == NUMBER_CONSTANT
Distance : 6

117
Tree	null != Feature . enumLiteralHasKey ( path . class )
Code	null != Feature . enumLiteralHasKey ( path . class )
Distance : 9

118
Tree	typesIndexedByProperty . writeImageMap ( null ) < ^
Code	typesIndexedByProperty . writeImageMap ( null ) < ^
Distance : 7

119
Tree	currentCase.embedInto != null == NUMBER_CONSTANT
Code	currentCase.embedInto != null == NUMBER_CONSTANT
Distance : 6

120
Tree	oldRoot && currentScript . enumLiteralHasKey ( null ) && ^
Code	oldRoot && currentScript . enumLiteralHasKey ( null ) && ^
Distance : 8

121
Tree	this . NordsieckTransformer == null == NUMBER_CONSTANT
Code	this . NordsieckTransformer == null == NUMBER_CONSTANT
Distance : 6

122
Tree	typesIndexedByProperty && currentScript . isLiteralObject ( null ) && ^
Code	typesIndexedByProperty && currentScript . isLiteralObject ( null ) && ^
Distance : 8

123
Tree	calculator.invocationToReturn != null == NUMBER_CONSTANT
Code	calculator.invocationToReturn != null == NUMBER_CONSTANT
Distance : 6

124
Tree	findDeps . writeImageMap ( currentScript . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	findDeps . writeImageMap ( currentScript . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 11

125
Tree	nt1.rawType != null == NUMBER_CONSTANT
Code	nt1.rawType != null == NUMBER_CONSTANT
Distance : 6

126
Tree	this . sectionOutlineStrokeMap == null == NUMBER_CONSTANT
Code	this . sectionOutlineStrokeMap == null == NUMBER_CONSTANT
Distance : 6

127
Tree	null != modulesSupplier . enumLiteralHasKey ( path . class )
Code	null != modulesSupplier . enumLiteralHasKey ( path . class )
Distance : 9

128
Tree	findDeps . writeImageMap ( null ) > NUMBER_CONSTANT
Code	findDeps . writeImageMap ( null ) > NUMBER_CONSTANT
Distance : 7

129
Tree	objectMethodsGuru && currentScript . isLiteralObject ( grandParent . class ) && ^
Code	objectMethodsGuru && currentScript . isLiteralObject ( grandParent . class ) && ^
Distance : 10

130
Tree	oldRoot > targets + STRING_CONSTANT
Code	oldRoot > targets + STRING_CONSTANT
Distance : 6

131
Tree	typesIndexedByProperty > targets + STRING_CONSTANT
Code	typesIndexedByProperty > targets + STRING_CONSTANT
Distance : 6

132
Tree	objectMethodsGuru / currentScript == NUMBER_CONSTANT
Code	objectMethodsGuru / currentScript == NUMBER_CONSTANT
Distance : 6

133
Tree	objectMethodsGuru . writeImageMap ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	objectMethodsGuru . writeImageMap ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 9

134
Tree	objectMethodsGuru > MILLIS_PER_DAY + STRING_CONSTANT
Code	objectMethodsGuru > MILLIS_PER_DAY + STRING_CONSTANT
Distance : 6

135
Tree	MillisDurationField.INSTANCE + NUMBER_CONSTANT == NUMBER_CONSTANT
Code	MillisDurationField.INSTANCE + NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 6

136
Tree	typesIndexedByProperty && currentScript . enumLiteralHasKey ( null ) && ^
Code	typesIndexedByProperty && currentScript . enumLiteralHasKey ( null ) && ^
Distance : 8

137
Tree	typesIndexedByProperty / type == NUMBER_CONSTANT
Code	typesIndexedByProperty / type == NUMBER_CONSTANT
Distance : 6

138
Tree	oldRoot && currentScript . isLiteralObject ( grandParent . class ) && ^
Code	oldRoot && currentScript . isLiteralObject ( grandParent . class ) && ^
Distance : 10

139
Tree	typesIndexedByProperty && currentScript . isLiteralObject ( grandParent . class ) && ^
Code	typesIndexedByProperty && currentScript . isLiteralObject ( grandParent . class ) && ^
Distance : 10

140
Tree	null != this . emptyAsNull . getReplacements ( path , this . minimum )
Code	null != this . emptyAsNull . getReplacements ( path , this . minimum )
Distance : 13

141
Tree	objectMethodsGuru && currentScript . hasChildren ( grandParent . class ) && ^
Code	objectMethodsGuru && currentScript . hasChildren ( grandParent . class ) && ^
Distance : 10

142
Tree	this . sectionOutlineStrokeMap . getReplacements () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . sectionOutlineStrokeMap . getReplacements () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

143
Tree	null != this . emptyAsNull . fieldWasInitializedUsingContructorArgs ( path , this . minimum )
Code	null != this . emptyAsNull . fieldWasInitializedUsingContructorArgs ( path , this . minimum )
Distance : 13

144
Tree	null != this . emptyAsNull . isNamedProperty ( path , this . minimum )
Code	null != this . emptyAsNull . isNamedProperty ( path , this . minimum )
Distance : 13

145
Tree	null != this . emptyAsNull . shutdown ( path , this . minimum )
Code	null != this . emptyAsNull . shutdown ( path , this . minimum )
Distance : 13

146
Tree	null != this . emptyAsNull . getReplacements ( path , this . BOOLEAN_TYPE )
Code	null != this . emptyAsNull . getReplacements ( path , this . BOOLEAN_TYPE )
Distance : 13

147
Tree	ImmutableMultiset.Builder != null == NUMBER_CONSTANT
Code	ImmutableMultiset.Builder != null == NUMBER_CONSTANT
Distance : 6

148
Tree	findDeps . writeImageMap ( null ) < >=
Code	findDeps . writeImageMap ( null ) < >=
Distance : 7

149
Tree	null != this . emptyAsNull . fieldWasInitializedUsingContructorArgs ( path , this . BOOLEAN_TYPE )
Code	null != this . emptyAsNull . fieldWasInitializedUsingContructorArgs ( path , this . BOOLEAN_TYPE )
Distance : 13

150
Tree	calculator.invocationToReturn < Scope
Code	calculator.invocationToReturn < Scope
Distance : 6

151
Tree	findDeps . writeImageMap ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	findDeps . writeImageMap ( NUMBER_CONSTANT ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 9

152
Tree	this . sectionOutlineStrokeMap . getSuperClass () > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	this . sectionOutlineStrokeMap . getSuperClass () > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 8

153
Tree	typesIndexedByProperty . writeImageMap ( ( Path [] ) null ) == super
Code	typesIndexedByProperty . writeImageMap ( ( Path [] ) null ) == super
Distance : 11

154
Tree	bundler + STRING_CONSTANT == NUMBER_CONSTANT
Code	bundler + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

155
Tree	AtLeastXVerificationTest + STRING_CONSTANT == NUMBER_CONSTANT
Code	AtLeastXVerificationTest + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

156
Tree	objectMethodsGuru . writeImageMap ( path . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	objectMethodsGuru . writeImageMap ( path . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 11

157
Tree	NULL_TYPE + STRING_CONSTANT == NUMBER_CONSTANT
Code	NULL_TYPE + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

158
Tree	objectMethodsGuru && currentScript . isLiteralObject ( null ) && ^
Code	objectMethodsGuru && currentScript . isLiteralObject ( null ) && ^
Distance : 8

159
Tree	null != this . emptyAsNull . setTaintsGlobalState () == NUMBER_CONSTANT
Code	null != this . emptyAsNull . setTaintsGlobalState () == NUMBER_CONSTANT
Distance : 8

160
Tree	null != this . emptyAsNull . setTaintsGlobalState ( path , this . minimum )
Code	null != this . emptyAsNull . setTaintsGlobalState ( path , this . minimum )
Distance : 13

161
Tree	findDeps && currentScript . enumLiteralHasKey ( null ) && ^
Code	findDeps && currentScript . enumLiteralHasKey ( null ) && ^
Distance : 8

162
Tree	objectMethodsGuru > transformed + STRING_CONSTANT
Code	objectMethodsGuru > transformed + STRING_CONSTANT
Distance : 6

163
Tree	null != this . outlineVisible . getReplacements ( path , this . minimum )
Code	null != this . outlineVisible . getReplacements ( path , this . minimum )
Distance : 13

164
Tree	null != this . outlineVisible . fieldWasInitializedUsingContructorArgs () == NUMBER_CONSTANT
Code	null != this . outlineVisible . fieldWasInitializedUsingContructorArgs () == NUMBER_CONSTANT
Distance : 8

165
Tree	this . functionContextStack == null == NUMBER_CONSTANT
Code	this . functionContextStack == null == NUMBER_CONSTANT
Distance : 6

166
Tree	oldRoot && currentScript . isLiteralObject ( null ) && ^
Code	oldRoot && currentScript . isLiteralObject ( null ) && ^
Distance : 8

167
Tree	objectMethodsGuru . writeImageMap ( decl . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Code	objectMethodsGuru . writeImageMap ( decl . class ) > NUMBER_CONSTANT == NUMBER_CONSTANT
Distance : 11

168
Tree	typesIndexedByProperty > transformed + STRING_CONSTANT
Code	typesIndexedByProperty > transformed + STRING_CONSTANT
Distance : 6

169
Tree	AtLeastXVerificationTest < Scope + STRING_CONSTANT
Code	AtLeastXVerificationTest < Scope + STRING_CONSTANT
Distance : 6

170
Tree	bundler . writeImageMap ( ( Path [] ) null ) == super
Code	bundler . writeImageMap ( ( Path [] ) null ) == super
Distance : 11

171
Tree	convention + STRING_CONSTANT == NUMBER_CONSTANT
Code	convention + STRING_CONSTANT == NUMBER_CONSTANT
Distance : 6

172
Tree	oldRoot > transformed + STRING_CONSTANT
Code	oldRoot > transformed + STRING_CONSTANT
Distance : 6

173
Tree	objectMethodsGuru . writeImageMap ( ( BitSet [] ) null ) == super
Code	objectMethodsGuru . writeImageMap ( ( BitSet [] ) null ) == super
Distance : 11

174
Tree	findDeps && currentScript . isLiteralObject ( null ) && ^
Code	findDeps && currentScript . isLiteralObject ( null ) && ^
Distance : 8

175
Tree	oldRoot . writeImageMap ( ( BitSet [] ) null ) == super
Code	oldRoot . writeImageMap ( ( BitSet [] ) null ) == super
Distance : 11

176
Tree	null != this . emptyAsNull . isLoggable () == NUMBER_CONSTANT
Code	null != this . emptyAsNull . isLoggable () == NUMBER_CONSTANT
Distance : 8

177
Tree	typesIndexedByProperty . writeImageMap ( ( BitSet [] ) null ) == super
Code	typesIndexedByProperty . writeImageMap ( ( BitSet [] ) null ) == super
Distance : 11

178
Tree	findDeps > transformed + STRING_CONSTANT
Code	findDeps > transformed + STRING_CONSTANT
Distance : 6

179
Tree	findDeps . writeImageMap ( ( Path [] ) null ) == super
Code	findDeps . writeImageMap ( ( Path [] ) null ) == super
Distance : 11

180
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT
Distance : 6

181
Tree	null != argMismatchStubbings . enumLiteralHasKey ( null )
Code	null != argMismatchStubbings . enumLiteralHasKey ( null )
Distance : 7

182
Tree	objectMethodsGuru && currentScript . enumLiteralHasKey ( null )
Code	objectMethodsGuru && currentScript . enumLiteralHasKey ( null )
Distance : 7

183
Tree	typesIndexedByProperty && currentScript . enumLiteralHasKey ( null )
Code	typesIndexedByProperty && currentScript . enumLiteralHasKey ( null )
Distance : 7

184
Tree	objectMethodsGuru && currentScript . doesFunctionReferenceOwnArgumentsObject ( null )
Code	objectMethodsGuru && currentScript . doesFunctionReferenceOwnArgumentsObject ( null )
Distance : 7

185
Tree	oldRoot && currentScript . doesFunctionReferenceOwnArgumentsObject ( null )
Code	oldRoot && currentScript . doesFunctionReferenceOwnArgumentsObject ( null )
Distance : 7

186
Tree	oldRoot && currentScript . enumLiteralHasKey ( null )
Code	oldRoot && currentScript . enumLiteralHasKey ( null )
Distance : 7

187
Tree	currentCase.embedInto < Scope == NUMBER_CONSTANT
Code	currentCase.embedInto < Scope == NUMBER_CONSTANT
Distance : 6

188
Tree	typesIndexedByProperty && currentScript . doesFunctionReferenceOwnArgumentsObject ( null )
Code	typesIndexedByProperty && currentScript . doesFunctionReferenceOwnArgumentsObject ( null )
Distance : 7

189
Tree	findDeps && currentScript . enumLiteralHasKey ( null )
Code	findDeps && currentScript . enumLiteralHasKey ( null )
Distance : 7

190
Tree	null != this . outlineVisible . getReplacements () == NUMBER_CONSTANT
Code	null != this . outlineVisible . getReplacements () == NUMBER_CONSTANT
Distance : 8

191
Tree	objectMethodsGuru > targets + STRING_CONSTANT
Code	objectMethodsGuru > targets + STRING_CONSTANT
Distance : 6

192
Tree	objectMethodsGuru && currentScript . matchesActualCount ( null )
Code	objectMethodsGuru && currentScript . matchesActualCount ( null )
Distance : 7

193
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT class
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT class
Distance : 6

194
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT notifyListeners
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT notifyListeners
Distance : 6

195
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT Override
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT Override
Distance : 6

196
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT array
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT array
Distance : 6

197
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT mock
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT mock
Distance : 6

198
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT f
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT f
Distance : 6

199
Tree	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT MathRuntimeException
Code	NUMBER_CONSTANT * NUMBER_CONSTANT * NUMBER_CONSTANT MathRuntimeException
Distance : 6

========================================================================


========================================================================
Example Number: 28
Parent Code is: 
{ ( new NodeTraversal ( compiler , this ) ) . traverse ( root ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ ( new NodeTraversal ( compiler , this ) ) . traverseRoots ( externs , root ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (36 (214{val=(}) (14 (304{val=new}) (43 (801{val=NodeTraversal})) (214{val=(}) (800{val=compiler}) (234{val=,}) (315{val=this}) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=traverse}) (214{val=(}) (800{val=root}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (36 (214{val=(}) (14 (304{val=new}) (43 (801{val=NodeTraversal})) (214{val=(}) (800{val=compiler}) (234{val=,}) (315{val=this}) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=traverseRoots}) (214{val=(}) (800{val=externs}) (234{val=,}) (800{val=root}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/30/parent/src_com_google_javascript_jscomp_FlowSensitiveInlineVariables.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ ( new NodeTraversal ( compiler , this , scopeCreator ) ) . getSolver ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , this , scopeCreator ) ) . getSolver ( root ) ; }
Distance : 5

1
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . getSolver ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . getSolver ( root ) ; }
Distance : 5

2
Tree	{ ( new NodeTraversal ( compiler , this , externs ) ) . getSolver ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , this , externs ) ) . getSolver ( root ) ; }
Distance : 5

3
Tree	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( typeInfoValidationEnabled , root ) , null ) ; }
Code	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( typeInfoValidationEnabled , root ) , null ) ; }
Distance : 10

4
Tree	{ ( new NodeTraversal ( compiler , this , scopeCreator ) ) . getSolver ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , this , scopeCreator ) ) . getSolver ( externs ) ; }
Distance : 5

5
Tree	{ new NodeTraversal ( compiler , this , scopeCreator ) . removeChildren ( root , root ) . getSolver ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , scopeCreator ) . removeChildren ( root , root ) . getSolver ( CHAR_CONS ) ; }
Distance : 10

6
Tree	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( root , root ) , null ) ; }
Code	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( root , root ) , null ) ; }
Distance : 10

7
Tree	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , root ) . getSolver ( root ) , null ) ; }
Code	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , root ) . getSolver ( root ) , null ) ; }
Distance : 9

8
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . getSolver ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . getSolver ( externs ) ; }
Distance : 5

9
Tree	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( true ) , null ) ; }
Code	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( true ) , null ) ; }
Distance : 9

10
Tree	{ ( new NodeTraversal ( compiler , null , false ) ) . getSolver ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , null , false ) ) . getSolver ( root ) ; }
Distance : 6

11
Tree	{ ( new NodeTraversal ( compiler , null , false ) ) . setInputId ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , null , false ) ) . setInputId ( root ) ; }
Distance : 6

12
Tree	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , externs ) . getSolver ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Code	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , externs ) . getSolver ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Distance : 14

13
Tree	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Code	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Distance : 14

14
Tree	{ ( new NodeTraversal ( compiler , null , false ) ) . pop ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , null , false ) ) . pop ( root ) ; }
Distance : 6

15
Tree	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , root ) . getSolver ( typeInfoValidationEnabled ) , null ) ; }
Code	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , root ) . getSolver ( typeInfoValidationEnabled ) , null ) ; }
Distance : 9

16
Tree	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , externs ) . getSolver ( root ) , null ) ; }
Code	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , externs ) . getSolver ( root ) , null ) ; }
Distance : 9

17
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , JUnitRule.Strictness.WARN ) ) . getSolver ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , JUnitRule.Strictness.WARN ) ) . getSolver ( root ) ; }
Distance : 5

18
Tree	{ ( new NodeTraversal ( compiler , null , false ) ) . toReturn ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , null , false ) ) . toReturn ( root ) ; }
Distance : 6

19
Tree	{ NodeTraversal . traverseEs6 ( getLastCompiler ( NUMBER_CONSTANT , false ) , null ) ; }
Code	{ NodeTraversal . traverseEs6 ( getLastCompiler ( NUMBER_CONSTANT , false ) , null ) ; }
Distance : 13

20
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . setInputId ( root ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . setInputId ( root ) ; }
Distance : 5

21
Tree	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( typeInfoValidationEnabled ) , null ) ; }
Code	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( typeInfoValidationEnabled ) , null ) ; }
Distance : 9

22
Tree	{ ( new NodeTraversal ( compiler , this , scopeCreator ) ) . removeChildren ( NUMBER_CONSTANT , CHAR_CONS ) ; }
Code	{ ( new NodeTraversal ( compiler , this , scopeCreator ) ) . removeChildren ( NUMBER_CONSTANT , CHAR_CONS ) ; }
Distance : 5

23
Tree	{ ( new NodeTraversal ( compiler , this , externs ) ) . getSolver ( NUMBER_CONSTANT , CHAR_CONS ) ; }
Code	{ ( new NodeTraversal ( compiler , this , externs ) ) . getSolver ( NUMBER_CONSTANT , CHAR_CONS ) ; }
Distance : 5

24
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . getSolver ( externs ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . getSolver ( externs ) ; }
Distance : 7

25
Tree	{ NodeTraversal . traverseEs6 ( new NodeTraversal ( compiler , this , root ) . getSolver ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Code	{ NodeTraversal . traverseEs6 ( new NodeTraversal ( compiler , this , root ) . getSolver ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Distance : 14

26
Tree	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , scopeCreator ) . removeChildren ( false ) , null ) ; }
Code	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , scopeCreator ) . removeChildren ( false ) , null ) ; }
Distance : 9

27
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . toReturn ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . toReturn ( root ) ; }
Distance : 11

28
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . setInputId ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . setInputId ( root ) ; }
Distance : 11

29
Tree	{ NodeTraversal . traverse ( compiler . join ( RandomSource.WELL_19937_C ) , null ) ; }
Code	{ NodeTraversal . traverse ( compiler . join ( RandomSource.WELL_19937_C ) , null ) ; }
Distance : 11

30
Tree	{ new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( root , root ) . removeChildren ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( root , root ) . removeChildren ( CHAR_CONS ) ; }
Distance : 10

31
Tree	{ ( new NodeTraversal ( compiler , this , scopeCreator ) ) . getSolver ( typeInfoValidationEnabled ) ; }
Code	{ ( new NodeTraversal ( compiler , this , scopeCreator ) ) . getSolver ( typeInfoValidationEnabled ) ; }
Distance : 6

32
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . getSolver ( root ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . getSolver ( root ) ; }
Distance : 5

33
Tree	{ NodeTraversal . traverseEs6 ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( root , root ) , null ) ; }
Code	{ NodeTraversal . traverseEs6 ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( root , root ) , null ) ; }
Distance : 10

34
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . getSolver ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . getSolver ( root ) ; }
Distance : 7

35
Tree	{ new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( externs , root ) . getSolver ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( externs , root ) . getSolver ( CHAR_CONS ) ; }
Distance : 9

36
Tree	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . getSolver ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . getSolver ( root ) ; }
Distance : 6

37
Tree	{ NodeTraversal . traverse ( compiler . getKey ( JSTypeNative.NO_RESOLVED_TYPE ) , null ) ; }
Code	{ NodeTraversal . traverse ( compiler . getKey ( JSTypeNative.NO_RESOLVED_TYPE ) , null ) ; }
Distance : 11

38
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . removeChildren ( externs ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . removeChildren ( externs ) ; }
Distance : 7

39
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . removeChildren ( NUMBER_CONSTANT , CHAR_CONS ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . removeChildren ( NUMBER_CONSTANT , CHAR_CONS ) ; }
Distance : 5

40
Tree	{ NodeTraversal . traverse ( compiler . getKey ( TimeZones.GMT_ID ) , null ) ; }
Code	{ NodeTraversal . traverse ( compiler . getKey ( TimeZones.GMT_ID ) , null ) ; }
Distance : 11

41
Tree	{ NodeTraversal . traverse ( compiler . make ( null , false ) , null ) ; }
Code	{ NodeTraversal . traverse ( compiler . make ( null , false ) , null ) ; }
Distance : 12

42
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , parts.length ) ) . getSolver ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , parts.length ) ) . getSolver ( root ) ; }
Distance : 5

43
Tree	{ NodeTraversal . traverseEs6 ( runVariableRenaming ( NUMBER_CONSTANT , false ) , null ) ; }
Code	{ NodeTraversal . traverseEs6 ( runVariableRenaming ( NUMBER_CONSTANT , false ) , null ) ; }
Distance : 13

44
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . toThrow ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . toThrow ( root ) ; }
Distance : 7

45
Tree	{ NodeTraversal . traverse ( compiler , new RandomDataImpl ( root , this , root ) . getSolver ( root ) ) ; }
Code	{ NodeTraversal . traverse ( compiler , new RandomDataImpl ( root , this , root ) . getSolver ( root ) ) ; }
Distance : 13

46
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . getSolver ( typeInfoValidationEnabled ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . getSolver ( typeInfoValidationEnabled ) ; }
Distance : 6

47
Tree	{ NodeTraversal . traverse ( compiler , new Es6SyntacticScopeCreator ( root , this , scopeCreator ) . getSolver ( externs ) ) ; }
Code	{ NodeTraversal . traverse ( compiler , new Es6SyntacticScopeCreator ( root , this , scopeCreator ) . getSolver ( externs ) ) ; }
Distance : 12

48
Tree	{ ( new NodeTraversal ( compiler , this , scopeCreator ) ) . removeChildren ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , this , scopeCreator ) ) . removeChildren ( root ) ; }
Distance : 5

49
Tree	{ NodeTraversal . traverse ( getLastCompiler ( NUMBER_CONSTANT , false ) , null ) ; }
Code	{ NodeTraversal . traverse ( getLastCompiler ( NUMBER_CONSTANT , false ) , null ) ; }
Distance : 13

50
Tree	{ testTypes ( new NodeTraversal ( compiler , this , root ) . getSolver ( true ) , false ) ; }
Code	{ testTypes ( new NodeTraversal ( compiler , this , root ) . getSolver ( true ) , false ) ; }
Distance : 7

51
Tree	{ NodeTraversal . traverse ( compiler . join ( null , false ) , null ) ; }
Code	{ NodeTraversal . traverse ( compiler . join ( null , false ) , null ) ; }
Distance : 12

52
Tree	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . getSolver ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . getSolver ( externs ) ; }
Distance : 6

53
Tree	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , externs ) . getSolver ( root , root ) , null ) ; }
Code	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , externs ) . getSolver ( root , root ) , null ) ; }
Distance : 10

54
Tree	{ new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( root , root ) . useSourceInfoFrom ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( root , root ) . useSourceInfoFrom ( CHAR_CONS ) ; }
Distance : 10

55
Tree	{ new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( root ) . getSolver ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( root ) . getSolver ( CHAR_CONS ) ; }
Distance : 10

56
Tree	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , root ) . getSolver ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Code	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , root ) . getSolver ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Distance : 14

57
Tree	{ ( new NodeTraversal ( compiler , null , false ) ) . removeChildren ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , null , false ) ) . removeChildren ( root ) ; }
Distance : 6

58
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . getSolver ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . getSolver ( root ) ; }
Distance : 11

59
Tree	{ ( new NodeTraversal ( compiler , null , false ) ) . replaceAll ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , null , false ) ) . replaceAll ( root ) ; }
Distance : 6

60
Tree	{ ( new NodeTraversal ( compiler , null , false ) ) . getSolver ( externs ) ; }
Code	{ ( new NodeTraversal ( compiler , null , false ) ) . getSolver ( externs ) ; }
Distance : 6

61
Tree	{ new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( typeInfoValidationEnabled , root ) . getSolver ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( typeInfoValidationEnabled , root ) . getSolver ( CHAR_CONS ) ; }
Distance : 10

62
Tree	{ testTypes ( new NodeTraversal ( compiler , this , externs ) . getSolver ( false ) , false ) ; }
Code	{ testTypes ( new NodeTraversal ( compiler , this , externs ) . getSolver ( false ) , false ) ; }
Distance : 7

63
Tree	{ new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( root , root ) . replaceAll ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( root , root ) . replaceAll ( CHAR_CONS ) ; }
Distance : 10

64
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . getSolver ( typeInfoValidationEnabled ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . getSolver ( typeInfoValidationEnabled ) ; }
Distance : 8

65
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . getSolver ( externs ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . getSolver ( externs ) ; }
Distance : 11

66
Tree	{ ( new NodeTraversal ( compiler , compiler , checkedFeatures , false ) ) . getSolver ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , checkedFeatures , false ) ) . getSolver ( root ) ; }
Distance : 8

67
Tree	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , root ) . getSolver ( false ) , null ) ; }
Code	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , root ) . getSolver ( false ) , null ) ; }
Distance : 9

68
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . replaceAll ( root ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . replaceAll ( root ) ; }
Distance : 5

69
Tree	{ new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( root ) . toThrow ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( root ) . toThrow ( CHAR_CONS ) ; }
Distance : 10

70
Tree	{ new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( root , root ) . getSolver ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( root , root ) . getSolver ( CHAR_CONS ) ; }
Distance : 10

71
Tree	{ testTypes ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( typeInfoValidationEnabled ) , false ) ; }
Code	{ testTypes ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( typeInfoValidationEnabled ) , false ) ; }
Distance : 7

72
Tree	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , scopeCreator ) . removeChildren ( root ) , null ) ; }
Code	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , scopeCreator ) . removeChildren ( root ) , null ) ; }
Distance : 9

73
Tree	{ ( new NodeTraversal ( compiler , compiler , DEFAULT_STOPPING_RADIUS , false ) ) . pop ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , DEFAULT_STOPPING_RADIUS , false ) ) . pop ( root ) ; }
Distance : 8

74
Tree	{ NodeTraversal . traverse ( checkNotNull ( NUMBER_CONSTANT , false ) , null ) ; }
Code	{ NodeTraversal . traverse ( checkNotNull ( NUMBER_CONSTANT , false ) , null ) ; }
Distance : 13

75
Tree	{ ( new NodeTraversal ( compiler , compiler , DEFAULT_STOPPING_RADIUS , false ) ) . getSolver ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , DEFAULT_STOPPING_RADIUS , false ) ) . getSolver ( root ) ; }
Distance : 8

76
Tree	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . getSolver ( typeInfoValidationEnabled ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . getSolver ( typeInfoValidationEnabled ) ; }
Distance : 7

77
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . removeChildren ( root ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . removeChildren ( root ) ; }
Distance : 5

78
Tree	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( false ) , null ) ; }
Code	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( false ) , null ) ; }
Distance : 9

79
Tree	{ NodeTraversal . traverse ( compiler . join ( Locale.US ) , null ) ; }
Code	{ NodeTraversal . traverse ( compiler . join ( Locale.US ) , null ) ; }
Distance : 11

80
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . hasMessageThat ( root ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . hasMessageThat ( root ) ; }
Distance : 5

81
Tree	{ NodeTraversal . traverse ( compiler , new RandomDataImpl ( root , this , scopeCreator ) . getSolver ( root ) ) ; }
Code	{ NodeTraversal . traverse ( compiler , new RandomDataImpl ( root , this , scopeCreator ) . getSolver ( root ) ) ; }
Distance : 13

82
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , TypeInferenceMode.NEITHER ) ) . getSolver ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , TypeInferenceMode.NEITHER ) ) . getSolver ( root ) ; }
Distance : 5

83
Tree	{ new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( root ) . hasMessageThat ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( root ) . hasMessageThat ( CHAR_CONS ) ; }
Distance : 10

84
Tree	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , scopeCreator ) . removeChildren ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Code	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , scopeCreator ) . removeChildren ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Distance : 14

85
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , LanguageMode.ECMASCRIPT5 ) ) . getSolver ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , LanguageMode.ECMASCRIPT5 ) ) . getSolver ( root ) ; }
Distance : 5

86
Tree	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , scopeCreator ) . removeChildren ( root , root ) , null ) ; }
Code	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , scopeCreator ) . removeChildren ( root , root ) , null ) ; }
Distance : 10

87
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . getSolver ( externs ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . getSolver ( externs ) ; }
Distance : 5

88
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . getSolver ( typeInfoValidationEnabled ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . getSolver ( typeInfoValidationEnabled ) ; }
Distance : 12

89
Tree	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , root ) . removeChildren ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Code	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , root ) . removeChildren ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Distance : 14

90
Tree	{ ( new NodeTraversal ( compiler , null , false ) ) . toThrow ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , null , false ) ) . toThrow ( root ) ; }
Distance : 6

91
Tree	{ testTypes ( compiler , messageContains ( NUMBER_CONSTANT , false ) ) ; }
Code	{ testTypes ( compiler , messageContains ( NUMBER_CONSTANT , false ) ) ; }
Distance : 11

92
Tree	{ new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( externs ) . getSolver ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( externs ) . getSolver ( CHAR_CONS ) ; }
Distance : 9

93
Tree	{ NodeTraversal . traverse ( externs ( NUMBER_CONSTANT , false ) , null ) ; }
Code	{ NodeTraversal . traverse ( externs ( NUMBER_CONSTANT , false ) , null ) ; }
Distance : 13

94
Tree	{ new NodeTraversal ( compiler , this , scopeCreator ) . removeChildren ( root , root ) . removeChildren ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , scopeCreator ) . removeChildren ( root , root ) . removeChildren ( CHAR_CONS ) ; }
Distance : 10

95
Tree	{ ( new NodeTraversal ( compiler , compiler , M2 , false ) ) . getSolver ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , M2 , false ) ) . getSolver ( root ) ; }
Distance : 8

96
Tree	{ NodeTraversal . traverse ( compiler . getKey ( Locale.US ) , null ) ; }
Code	{ NodeTraversal . traverse ( compiler . getKey ( Locale.US ) , null ) ; }
Distance : 11

97
Tree	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . replaceAll ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . replaceAll ( root ) ; }
Distance : 6

98
Tree	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , externs ) . getSolver ( false ) , null ) ; }
Code	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , externs ) . getSolver ( false ) , null ) ; }
Distance : 9

99
Tree	{ testTypes ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( root ) , false ) ; }
Code	{ testTypes ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( root ) , false ) ; }
Distance : 7

100
Tree	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( externs ) , null ) ; }
Code	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( externs ) , null ) ; }
Distance : 8

101
Tree	{ ( new NodeTraversal ( compiler , this , scopeCreator ) ) . getSolver ( NUMBER_CONSTANT , CHAR_CONS ) ; }
Code	{ ( new NodeTraversal ( compiler , this , scopeCreator ) ) . getSolver ( NUMBER_CONSTANT , CHAR_CONS ) ; }
Distance : 5

102
Tree	{ NodeTraversal . process ( getLastCompiler ( NUMBER_CONSTANT , false ) , null ) ; }
Code	{ NodeTraversal . process ( getLastCompiler ( NUMBER_CONSTANT , false ) , null ) ; }
Distance : 13

103
Tree	{ NodeTraversal . traverseEs6 ( compiler . getKey ( null , false ) , null ) ; }
Code	{ NodeTraversal . traverseEs6 ( compiler . getKey ( null , false ) , null ) ; }
Distance : 12

104
Tree	{ testTypes ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( root ) , false ) ; }
Code	{ testTypes ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( root ) , false ) ; }
Distance : 7

105
Tree	{ new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( root ) . removeChildren ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( root ) . removeChildren ( CHAR_CONS ) ; }
Distance : 10

106
Tree	{ NodeTraversal . traverse ( compiler . getOptions ( null , false ) , null ) ; }
Code	{ NodeTraversal . traverse ( compiler . getOptions ( null , false ) , null ) ; }
Distance : 12

107
Tree	{ testTypes ( getLastCompiler ( NUMBER_CONSTANT , false ) , false ) ; }
Code	{ testTypes ( getLastCompiler ( NUMBER_CONSTANT , false ) , false ) ; }
Distance : 11

108
Tree	{ new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( root ) . replaceAll ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( root ) . replaceAll ( CHAR_CONS ) ; }
Distance : 10

109
Tree	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , root ) . getSolver ( typeInfoValidationEnabled , root ) , null ) ; }
Code	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , root ) . getSolver ( typeInfoValidationEnabled , root ) , null ) ; }
Distance : 10

110
Tree	{ NodeTraversal . traverse ( compiler . toPath ( null , false ) , null ) ; }
Code	{ NodeTraversal . traverse ( compiler . toPath ( null , false ) , null ) ; }
Distance : 12

111
Tree	{ testTypes ( new NodeTraversal ( compiler , this , root ) . getSolver ( root ) , false ) ; }
Code	{ testTypes ( new NodeTraversal ( compiler , this , root ) . getSolver ( root ) , false ) ; }
Distance : 7

112
Tree	{ testTypes ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( false ) , false ) ; }
Code	{ testTypes ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( false ) , false ) ; }
Distance : 7

113
Tree	{ NodeTraversal . traverseEs6 ( compiler . join ( null , false ) , null ) ; }
Code	{ NodeTraversal . traverseEs6 ( compiler . join ( null , false ) , null ) ; }
Distance : 12

114
Tree	{ ( new NodeTraversal ( compiler , compiler , checkedFeatures , false ) ) . pop ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , checkedFeatures , false ) ) . pop ( root ) ; }
Distance : 8

115
Tree	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . removeChildren ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . removeChildren ( root ) ; }
Distance : 6

116
Tree	{ testTypes ( compiler , getLastCompiler ( NUMBER_CONSTANT , false ) ) ; }
Code	{ testTypes ( compiler , getLastCompiler ( NUMBER_CONSTANT , false ) ) ; }
Distance : 11

117
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . removeChildren ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . removeChildren ( root ) ; }
Distance : 11

118
Tree	{ ( new NodeTraversal ( compiler , compiler , M2 , false ) ) . replaceAll ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , M2 , false ) ) . replaceAll ( root ) ; }
Distance : 8

119
Tree	{ NodeTraversal . traverse ( compiler , new Es6SyntacticScopeCreator ( root , this , scopeCreator ) . getSolver ( typeInfoValidationEnabled ) ) ; }
Code	{ NodeTraversal . traverse ( compiler , new Es6SyntacticScopeCreator ( root , this , scopeCreator ) . getSolver ( typeInfoValidationEnabled ) ) ; }
Distance : 13

120
Tree	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( root ) , null ) ; }
Code	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( root ) , null ) ; }
Distance : 9

121
Tree	{ new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( typeInfoValidationEnabled ) . getSolver ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( typeInfoValidationEnabled ) . getSolver ( CHAR_CONS ) ; }
Distance : 10

122
Tree	{ ( new NodeTraversal ( compiler , this , scopeCreator ) ) . replaceAll ( NUMBER_CONSTANT , CHAR_CONS ) ; }
Code	{ ( new NodeTraversal ( compiler , this , scopeCreator ) ) . replaceAll ( NUMBER_CONSTANT , CHAR_CONS ) ; }
Distance : 5

123
Tree	{ testTypes ( new NodeTraversal ( compiler , this , externs ) . getSolver ( root ) , false ) ; }
Code	{ testTypes ( new NodeTraversal ( compiler , this , externs ) . getSolver ( root ) , false ) ; }
Distance : 7

124
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . removeChildren ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . removeChildren ( root ) ; }
Distance : 7

125
Tree	{ NodeTraversal . traverse ( compiler , new Es6SyntacticScopeCreator ( root , this , externs ) . getSolver ( root ) ) ; }
Code	{ NodeTraversal . traverse ( compiler , new Es6SyntacticScopeCreator ( root , this , externs ) . getSolver ( root ) ) ; }
Distance : 13

126
Tree	{ ( new NodeTraversal ( compiler , compiler , DEFAULT_STOPPING_RADIUS , false ) ) . replaceAll ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , DEFAULT_STOPPING_RADIUS , false ) ) . replaceAll ( root ) ; }
Distance : 8

127
Tree	{ NodeTraversal . traverse ( compiler . getToken ( null , false ) , null ) ; }
Code	{ NodeTraversal . traverse ( compiler . getToken ( null , false ) , null ) ; }
Distance : 12

128
Tree	{ NodeTraversal . traverse ( compiler . getKey ( java.util.Locale.US ) , null ) ; }
Code	{ NodeTraversal . traverse ( compiler . getKey ( java.util.Locale.US ) , null ) ; }
Distance : 11

129
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . toThrow ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . toThrow ( root ) ; }
Distance : 11

130
Tree	{ NodeTraversal . traverseEs6 ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( false ) , null ) ; }
Code	{ NodeTraversal . traverseEs6 ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( false ) , null ) ; }
Distance : 9

131
Tree	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . setInputId ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . setInputId ( root ) ; }
Distance : 6

132
Tree	{ NodeTraversal . traverseEs6 ( compiler , new Es6SyntacticScopeCreator ( root , this , scopeCreator ) . getSolver ( root ) ) ; }
Code	{ NodeTraversal . traverseEs6 ( compiler , new Es6SyntacticScopeCreator ( root , this , scopeCreator ) . getSolver ( root ) ) ; }
Distance : 13

133
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , LocalizedFormats.DIMENSIONS_MISMATCH ) ) . getSolver ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , LocalizedFormats.DIMENSIONS_MISMATCH ) ) . getSolver ( root ) ; }
Distance : 5

134
Tree	{ NodeTraversal . traverseEs6 ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( root ) , null ) ; }
Code	{ NodeTraversal . traverseEs6 ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( root ) , null ) ; }
Distance : 9

135
Tree	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , externs ) . getSolver ( true ) , null ) ; }
Code	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , externs ) . getSolver ( true ) , null ) ; }
Distance : 9

136
Tree	{ NodeTraversal . traverseEs6 ( new NodeTraversal ( compiler , this , externs ) . getSolver ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Code	{ NodeTraversal . traverseEs6 ( new NodeTraversal ( compiler , this , externs ) . getSolver ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Distance : 14

137
Tree	{ NodeTraversal . traverseEs6 ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Code	{ NodeTraversal . traverseEs6 ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( NUMBER_CONSTANT , root , root , root ) , null ) ; }
Distance : 14

138
Tree	{ NodeTraversal . traverse ( join ( NUMBER_CONSTANT , false ) , null ) ; }
Code	{ NodeTraversal . traverse ( join ( NUMBER_CONSTANT , false ) , null ) ; }
Distance : 13

139
Tree	{ ( new NodeTraversal ( compiler , this , scopeCreator ) ) . setInputId ( NUMBER_CONSTANT , CHAR_CONS ) ; }
Code	{ ( new NodeTraversal ( compiler , this , scopeCreator ) ) . setInputId ( NUMBER_CONSTANT , CHAR_CONS ) ; }
Distance : 5

140
Tree	{ disableStrictMissingPropertyChecks ( getLastCompiler ( NUMBER_CONSTANT , false ) , false ) ; }
Code	{ disableStrictMissingPropertyChecks ( getLastCompiler ( NUMBER_CONSTANT , false ) , false ) ; }
Distance : 11

141
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . replaceAll ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . replaceAll ( root ) ; }
Distance : 7

142
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . toReturn ( root ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . toReturn ( root ) ; }
Distance : 5

143
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . replaceAll ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . replaceAll ( root ) ; }
Distance : 11

144
Tree	{ NodeTraversal . traverse ( compiler , new Es6SyntacticScopeCreator ( root , this , root ) . getSolver ( root ) ) ; }
Code	{ NodeTraversal . traverse ( compiler , new Es6SyntacticScopeCreator ( root , this , root ) . getSolver ( root ) ) ; }
Distance : 13

145
Tree	{ testTypes ( compiler , getTolerance ( NUMBER_CONSTANT , false ) ) ; }
Code	{ testTypes ( compiler , getTolerance ( NUMBER_CONSTANT , false ) ) ; }
Distance : 11

146
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , Color.BLACK ) ) . getSolver ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , Color.BLACK ) ) . getSolver ( root ) ; }
Distance : 5

147
Tree	{ testTypes ( compiler , new Es6SyntacticScopeCreator ( root , this , scopeCreator ) . getSolver ( true ) ) ; }
Code	{ testTypes ( compiler , new Es6SyntacticScopeCreator ( root , this , scopeCreator ) . getSolver ( true ) ) ; }
Distance : 11

148
Tree	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . toThrow ( root ) ; }
Code	{ ( new NodeTraversal ( STRING_CONSTANT , false ) ) . toThrow ( root ) ; }
Distance : 5

149
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , Token.DEFAULT_CASE ) ) . getSolver ( root ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , Token.DEFAULT_CASE ) ) . getSolver ( root ) ; }
Distance : 5

150
Tree	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , root ) . getSolver ( true ) , null ) ; }
Code	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , root ) . getSolver ( true ) , null ) ; }
Distance : 9

151
Tree	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , root ) . getSolver ( root , root ) , null ) ; }
Code	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , root ) . getSolver ( root , root ) , null ) ; }
Distance : 10

152
Tree	{ NodeTraversal . traverse ( compiler . getKey ( null , false ) , null ) ; }
Code	{ NodeTraversal . traverse ( compiler . getKey ( null , false ) , null ) ; }
Distance : 12

153
Tree	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . useSourceInfoFrom ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , NUMBER_CONSTANT ) ) . useSourceInfoFrom ( root ) ; }
Distance : 6

154
Tree	{ disableStrictMissingPropertyChecks ( new NodeTraversal ( compiler , this , root ) . getSolver ( root ) , false ) ; }
Code	{ disableStrictMissingPropertyChecks ( new NodeTraversal ( compiler , this , root ) . getSolver ( root ) , false ) ; }
Distance : 7

155
Tree	{ testTypes ( new NodeTraversal ( compiler , this , root ) . getSolver ( false ) , false ) ; }
Code	{ testTypes ( new NodeTraversal ( compiler , this , root ) . getSolver ( false ) , false ) ; }
Distance : 7

156
Tree	{ disableStrictMissingPropertyChecks ( new NodeTraversal ( compiler , this , root ) . getSolver ( false ) , false ) ; }
Code	{ disableStrictMissingPropertyChecks ( new NodeTraversal ( compiler , this , root ) . getSolver ( false ) , false ) ; }
Distance : 7

157
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . replaceAll ( NUMBER_CONSTANT , CHAR_CONS ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . replaceAll ( NUMBER_CONSTANT , CHAR_CONS ) ; }
Distance : 5

158
Tree	{ testTypes ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( true ) , false ) ; }
Code	{ testTypes ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( true ) , false ) ; }
Distance : 7

159
Tree	{ testTypes ( new NodeTraversal ( compiler , this , externs ) . getSolver ( root ) , false ) ; }
Code	{ testTypes ( new NodeTraversal ( compiler , this , externs ) . getSolver ( root ) , false ) ; }
Distance : 7

160
Tree	{ new NodeTraversal ( compiler , this , scopeCreator ) . removeChildren ( root ) . getSolver ( CHAR_CONS ) ; }
Code	{ new NodeTraversal ( compiler , this , scopeCreator ) . removeChildren ( root ) . getSolver ( CHAR_CONS ) ; }
Distance : 10

161
Tree	{ testTypes ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( externs ) , false ) ; }
Code	{ testTypes ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( externs ) , false ) ; }
Distance : 6

162
Tree	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( externs , root ) , null ) ; }
Code	{ NodeTraversal . traverse ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( externs , root ) , null ) ; }
Distance : 9

163
Tree	{ NodeTraversal . traverse ( compiler , new Es6SyntacticScopeCreator ( root , this , scopeCreator ) . getSolver ( root ) ) ; }
Code	{ NodeTraversal . traverse ( compiler , new Es6SyntacticScopeCreator ( root , this , scopeCreator ) . getSolver ( root ) ) ; }
Distance : 13

164
Tree	{ disableStrictMissingPropertyChecks ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( root ) , false ) ; }
Code	{ disableStrictMissingPropertyChecks ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( root ) , false ) ; }
Distance : 7

165
Tree	{ ( new NodeTraversal ( compiler , this , root ) ) . getSolver ( NUMBER_CONSTANT , CHAR_CONS ) ; }
Code	{ ( new NodeTraversal ( compiler , this , root ) ) . getSolver ( NUMBER_CONSTANT , CHAR_CONS ) ; }
Distance : 5

166
Tree	{ NodeTraversal . traverse ( compiler . getKey ( RandomSource.WELL_19937_C ) , null ) ; }
Code	{ NodeTraversal . traverse ( compiler . getKey ( RandomSource.WELL_19937_C ) , null ) ; }
Distance : 11

167
Tree	{ testTypes ( compiler , new Es6SyntacticScopeCreator ( root , this , root ) . getSolver ( false ) ) ; }
Code	{ testTypes ( compiler , new Es6SyntacticScopeCreator ( root , this , root ) . getSolver ( false ) ) ; }
Distance : 11

168
Tree	{ testTypes ( compiler , checkNotNull ( NUMBER_CONSTANT , false ) ) ; }
Code	{ testTypes ( compiler , checkNotNull ( NUMBER_CONSTANT , false ) ) ; }
Distance : 11

169
Tree	{ ( new NodeTraversal ( compiler , propertyCollapseLevel , NUMBER_CONSTANT ) ) . getSolver ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , propertyCollapseLevel , NUMBER_CONSTANT ) ) . getSolver ( root ) ; }
Distance : 6

170
Tree	{ testTypes ( new NodeTraversal ( compiler , this , root ) . getSolver ( typeInfoValidationEnabled ) , false ) ; }
Code	{ testTypes ( new NodeTraversal ( compiler , this , root ) . getSolver ( typeInfoValidationEnabled ) , false ) ; }
Distance : 7

171
Tree	{ testTypes ( new NodeTraversal ( compiler , this , externs ) . getSolver ( true ) , false ) ; }
Code	{ testTypes ( new NodeTraversal ( compiler , this , externs ) . getSolver ( true ) , false ) ; }
Distance : 7

172
Tree	{ ( new NodeTraversal ( compiler , compiler , checkedFeatures , false ) ) . replaceAll ( root ) ; }
Code	{ ( new NodeTraversal ( compiler , compiler , checkedFeatures , false ) ) . replaceAll ( root ) ; }
Distance : 8

173
Tree	{ disableStrictMissingPropertyChecks ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( false ) , false ) ; }
Code	{ disableStrictMissingPropertyChecks ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( false ) , false ) ; }
Distance : 7

174
Tree	{ NodeTraversal . traverse ( compiler . join ( java.util.Locale.US ) , null ) ; }
Code	{ NodeTraversal . traverse ( compiler . join ( java.util.Locale.US ) , null ) ; }
Distance : 11

175
Tree	{ disableStrictMissingPropertyChecks ( compiler , messageContains ( NUMBER_CONSTANT , false ) ) ; }
Code	{ disableStrictMissingPropertyChecks ( compiler , messageContains ( NUMBER_CONSTANT , false ) ) ; }
Distance : 11

176
Tree	{ NodeTraversal . traverse ( runVariableRenaming ( NUMBER_CONSTANT , false ) , null ) ; }
Code	{ NodeTraversal . traverse ( runVariableRenaming ( NUMBER_CONSTANT , false ) , null ) ; }
Distance : 13

177
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , TypeInferenceMode.NEITHER ) ) . getSolver ( externs ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , TypeInferenceMode.NEITHER ) ) . getSolver ( externs ) ; }
Distance : 5

178
Tree	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . replaceAll ( externs ) ; }
Code	{ ( new NodeTraversal ( NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ) . replaceAll ( externs ) ; }
Distance : 7

179
Tree	{ testTypes ( compiler , new RandomDataImpl ( root , this , scopeCreator ) . getSolver ( false ) ) ; }
Code	{ testTypes ( compiler , new RandomDataImpl ( root , this , scopeCreator ) . getSolver ( false ) ) ; }
Distance : 11

180
Tree	{ testTypes ( compiler , new Es6SyntacticScopeCreator ( root , this , scopeCreator ) . getSolver ( false ) ) ; }
Code	{ testTypes ( compiler , new Es6SyntacticScopeCreator ( root , this , scopeCreator ) . getSolver ( false ) ) ; }
Distance : 11

181
Tree	{ testTypes ( compiler , new Es6SyntacticScopeCreator ( root , this , externs ) . getSolver ( false ) ) ; }
Code	{ testTypes ( compiler , new Es6SyntacticScopeCreator ( root , this , externs ) . getSolver ( false ) ) ; }
Distance : 11

182
Tree	{ disableStrictMissingPropertyChecks ( compiler , getLastCompiler ( NUMBER_CONSTANT , false ) ) ; }
Code	{ disableStrictMissingPropertyChecks ( compiler , getLastCompiler ( NUMBER_CONSTANT , false ) ) ; }
Distance : 11

183
Tree	{ testTypes ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( typeInfoValidationEnabled ) , false ) ; }
Code	{ testTypes ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( typeInfoValidationEnabled ) , false ) ; }
Distance : 7

184
Tree	{ testTypes ( new NodeTraversal ( compiler , this , root ) . getSolver ( root ) , false ) ; }
Code	{ testTypes ( new NodeTraversal ( compiler , this , root ) . getSolver ( root ) , false ) ; }
Distance : 7

185
Tree	{ disableStrictMissingPropertyChecks ( compiler , new Es6SyntacticScopeCreator ( root , this , scopeCreator ) . getSolver ( false ) ) ; }
Code	{ disableStrictMissingPropertyChecks ( compiler , new Es6SyntacticScopeCreator ( root , this , scopeCreator ) . getSolver ( false ) ) ; }
Distance : 11

186
Tree	{ disableStrictMissingPropertyChecks ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( root ) , false ) ; }
Code	{ disableStrictMissingPropertyChecks ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( root ) , false ) ; }
Distance : 7

187
Tree	{ disableStrictMissingPropertyChecks ( compiler , getEndMillis ( NUMBER_CONSTANT , false ) ) ; }
Code	{ disableStrictMissingPropertyChecks ( compiler , getEndMillis ( NUMBER_CONSTANT , false ) ) ; }
Distance : 11

188
Tree	{ traverseEs6 ( getLastCompiler ( NUMBER_CONSTANT , false ) , false ) ; }
Code	{ traverseEs6 ( getLastCompiler ( NUMBER_CONSTANT , false ) , false ) ; }
Distance : 11

189
Tree	{ testTypes ( compiler , new Es6SyntacticScopeCreator ( root , this , root ) . getSolver ( true ) ) ; }
Code	{ testTypes ( compiler , new Es6SyntacticScopeCreator ( root , this , root ) . getSolver ( true ) ) ; }
Distance : 11

190
Tree	{ testTypes ( compiler , getEndMillis ( NUMBER_CONSTANT , false ) ) ; }
Code	{ testTypes ( compiler , getEndMillis ( NUMBER_CONSTANT , false ) ) ; }
Distance : 11

191
Tree	{ disableStrictMissingPropertyChecks ( new NodeTraversal ( compiler , this , root ) . getSolver ( root ) , false ) ; }
Code	{ disableStrictMissingPropertyChecks ( new NodeTraversal ( compiler , this , root ) . getSolver ( root ) , false ) ; }
Distance : 7

192
Tree	{ testTypes ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( externs ) , false ) ; }
Code	{ testTypes ( new NodeTraversal ( compiler , this , scopeCreator ) . getSolver ( externs ) , false ) ; }
Distance : 6

193
Tree	{ testTypes ( new NodeTraversal ( compiler , this , root ) . getSolver ( typeInfoValidationEnabled ) , false ) ; }
Code	{ testTypes ( new NodeTraversal ( compiler , this , root ) . getSolver ( typeInfoValidationEnabled ) , false ) ; }
Distance : 7

194
Tree	{ testTypes ( externs ( NUMBER_CONSTANT , false ) , false ) ; }
Code	{ testTypes ( externs ( NUMBER_CONSTANT , false ) , false ) ; }
Distance : 11

195
Tree	{ assertNotNull ( getLastCompiler ( NUMBER_CONSTANT , false ) , false ) ; }
Code	{ assertNotNull ( getLastCompiler ( NUMBER_CONSTANT , false ) , false ) ; }
Distance : 11

196
Tree	{ testTypes ( compiler , new RandomDataImpl ( root , this , scopeCreator ) . getSolver ( true ) ) ; }
Code	{ testTypes ( compiler , new RandomDataImpl ( root , this , scopeCreator ) . getSolver ( true ) ) ; }
Distance : 11

197
Tree	{ process ( getLastCompiler ( NUMBER_CONSTANT , false ) , false ) ; }
Code	{ process ( getLastCompiler ( NUMBER_CONSTANT , false ) , false ) ; }
Distance : 11

198
Tree	{ testWarning ( getLastCompiler ( NUMBER_CONSTANT , false ) , false ) ; }
Code	{ testWarning ( getLastCompiler ( NUMBER_CONSTANT , false ) , false ) ; }
Distance : 11

199
Tree	{ checkNotNull ( getLastCompiler ( NUMBER_CONSTANT , false ) , false ) ; }
Code	{ checkNotNull ( getLastCompiler ( NUMBER_CONSTANT , false ) , false ) ; }
Distance : 11

========================================================================


========================================================================
Example Number: 29
Parent Code is: 
Node catchBody = block ( catchNode ) . copyInformationFrom ( catchNode ) ;
-------------------------------------------------------------------------------
Child code is: 
Node catchBody = blockUnchecked ( catchNode ) . copyInformationFrom ( catchNode ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Node})) (59 (800{val=catchBody}) (204{val==}) (32 (32 (802{val=block}) (214{val=(}) (800{val=catchNode}) (215{val=)})) (235{val=.}) (802{val=copyInformationFrom}) (214{val=(}) (800{val=catchNode}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Node})) (59 (800{val=catchBody}) (204{val==}) (32 (32 (802{val=blockUnchecked}) (214{val=(}) (800{val=catchNode}) (215{val=)})) (235{val=.}) (802{val=copyInformationFrom}) (214{val=(}) (800{val=catchNode}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/27/parent/src_com_google_javascript_rhino_IR.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	Node manager = block . block () ;
Code	Node manager = block . block () ;
Distance : 9

1
Tree	Node objectWithBadKey = block . block () ;
Code	Node objectWithBadKey = block . block () ;
Distance : 9

2
Tree	Node mathType = block ( getNativeObjectConstructorType ( initialStepBoundFactor ) ) ;
Code	Node mathType = block ( getNativeObjectConstructorType ( initialStepBoundFactor ) ) ;
Distance : 8

3
Tree	Node mathType = block . traverseEs6 () ;
Code	Node mathType = block . traverseEs6 () ;
Distance : 9

4
Tree	Node superClassNameNode = block . block ( initialStepBoundFactor ) ;
Code	Node superClassNameNode = block . block ( initialStepBoundFactor ) ;
Distance : 7

5
Tree	Node mathType = block . block ( typeObj ) ;
Code	Node mathType = block . block ( typeObj ) ;
Distance : 7

6
Tree	Node mathType = block ( initialStepBoundFactor , isLoopOrFunction ) ;
Code	Node mathType = block ( initialStepBoundFactor , isLoopOrFunction ) ;
Distance : 8

7
Tree	Node mathType = block ( windowPropAccess ) ;
Code	Node mathType = block ( windowPropAccess ) ;
Distance : 8

8
Tree	Node hoistRoot = block ( initialStepBoundFactor ) ;
Code	Node hoistRoot = block ( initialStepBoundFactor ) ;
Distance : 8

9
Tree	Node pathArg = block ( windowPropAccess ) ;
Code	Node pathArg = block ( windowPropAccess ) ;
Distance : 8

10
Tree	Node mathType = block ( initialStepBoundFactor , RotationConvention.FRAME_TRANSFORM ) ;
Code	Node mathType = block ( initialStepBoundFactor , RotationConvention.FRAME_TRANSFORM ) ;
Distance : 8

11
Tree	Node pathArg = block ( initialStepBoundFactor , CANNOT_CONVERT ) ;
Code	Node pathArg = block ( initialStepBoundFactor , CANNOT_CONVERT ) ;
Distance : 8

12
Tree	Node mathType = block ( initialStepBoundFactor , this . legendItemGraphicEdge ) ;
Code	Node mathType = block ( initialStepBoundFactor , this . legendItemGraphicEdge ) ;
Distance : 8

13
Tree	Node mathType = block ( INVALID_ES3_PROP_NAME ) ;
Code	Node mathType = block ( INVALID_ES3_PROP_NAME ) ;
Distance : 8

14
Tree	Node mathType = block ( initialStepBoundFactor ) . toReturn () ;
Code	Node mathType = block ( initialStepBoundFactor ) . toReturn () ;
Distance : 7

15
Tree	Node superClassNameNode = block ( initialStepBoundFactor ) ;
Code	Node superClassNameNode = block ( initialStepBoundFactor ) ;
Distance : 8

16
Tree	Node mathType = block ( initialStepBoundFactor ) . setCompilerOptions ( startCase ) ;
Code	Node mathType = block ( initialStepBoundFactor ) . setCompilerOptions ( startCase ) ;
Distance : 5

17
Tree	Node mathType = block ( windowPropAccess ) . setTypeValidationEnabled () ;
Code	Node mathType = block ( windowPropAccess ) . setTypeValidationEnabled () ;
Distance : 7

18
Tree	Node mathType = block ( initialStepBoundFactor ) . removeChildren ( startCase ) ;
Code	Node mathType = block ( initialStepBoundFactor ) . removeChildren ( startCase ) ;
Distance : 5

19
Tree	Node mathType = block ( filterReturningEmptyArray ) ;
Code	Node mathType = block ( filterReturningEmptyArray ) ;
Distance : 8

20
Tree	Node mathType = block ( initialStepBoundFactor ) . setTypeValidationEnabled ( mji ) ;
Code	Node mathType = block ( initialStepBoundFactor ) . setTypeValidationEnabled ( mji ) ;
Distance : 5

21
Tree	Node hoistRoot = block . block () ;
Code	Node hoistRoot = block . block () ;
Distance : 9

22
Tree	Node mathType = block ( initialStepBoundFactor ) ;
Code	Node mathType = block ( initialStepBoundFactor ) ;
Distance : 8

23
Tree	Node mathType = block ( INVALID_ES3_PROP_NAME ) ;
Code	Node mathType = block ( INVALID_ES3_PROP_NAME ) ;
Distance : 8

24
Tree	Node pathArg = block . block ( initialStepBoundFactor ) ;
Code	Node pathArg = block . block ( initialStepBoundFactor ) ;
Distance : 7

25
Tree	Node mathType = block . block () ;
Code	Node mathType = block . block () ;
Distance : 9

26
Tree	Node hoistRoot = block ( initialStepBoundFactor ) . setTypeValidationEnabled () ;
Code	Node hoistRoot = block ( initialStepBoundFactor ) . setTypeValidationEnabled () ;
Distance : 7

27
Tree	Node pathArg = block ( initialStepBoundFactor ) ;
Code	Node pathArg = block ( initialStepBoundFactor ) ;
Distance : 8

28
Tree	Node mathType = block ( windowPropAccess ) ;
Code	Node mathType = block ( windowPropAccess ) ;
Distance : 8

29
Tree	Node mathType = block ( initialStepBoundFactor ) ;
Code	Node mathType = block ( initialStepBoundFactor ) ;
Distance : 8

30
Tree	Node mathType = block . block ( INVALID_ES3_PROP_NAME ) ;
Code	Node mathType = block . block ( INVALID_ES3_PROP_NAME ) ;
Distance : 7

31
Tree	Node mathType = block ( initialStepBoundFactor ) . setTypeValidationEnabled () ;
Code	Node mathType = block ( initialStepBoundFactor ) . setTypeValidationEnabled () ;
Distance : 7

32
Tree	Node mathType = this . innerSeparatorExtension . getGenericDeclaration ( wrapOn ) ;
Code	Node mathType = this . innerSeparatorExtension . getGenericDeclaration ( wrapOn ) ;
Distance : 7

33
Tree	Node mathType = block ( initialStepBoundFactor ) . setTypeValidationEnabled ( startCase ) ;
Code	Node mathType = block ( initialStepBoundFactor ) . setTypeValidationEnabled ( startCase ) ;
Distance : 5

34
Tree	Node hoistRoot = block ( initialStepBoundFactor ) ;
Code	Node hoistRoot = block ( initialStepBoundFactor ) ;
Distance : 8

35
Tree	Node mathType = block . block ( initialStepBoundFactor ) ;
Code	Node mathType = block . block ( initialStepBoundFactor ) ;
Distance : 7

36
Tree	Node pathArg = block . block () ;
Code	Node pathArg = block . block () ;
Distance : 9

37
Tree	Node hoistRoot = block . block ( initialStepBoundFactor ) ;
Code	Node hoistRoot = block . block ( initialStepBoundFactor ) ;
Distance : 7

38
Tree	Node pathArg = block ( initialStepBoundFactor , CANNOT_CONVERT , false ) ;
Code	Node pathArg = block ( initialStepBoundFactor , CANNOT_CONVERT , false ) ;
Distance : 8

39
Tree	Node mathType = this . innerSeparatorExtension . getGenericDeclaration ( bd1 ) ;
Code	Node mathType = this . innerSeparatorExtension . getGenericDeclaration ( bd1 ) ;
Distance : 7

40
Tree	Node mathType = block . block ( windowPropAccess ) ;
Code	Node mathType = block . block ( windowPropAccess ) ;
Distance : 7

41
Tree	Node mathType = block ( MINUTES ) ;
Code	Node mathType = block ( MINUTES ) ;
Distance : 8

42
Tree	Node pathArg = block ( initialStepBoundFactor ) . setTypeValidationEnabled () ;
Code	Node pathArg = block ( initialStepBoundFactor ) . setTypeValidationEnabled () ;
Distance : 7

43
Tree	Node mathType = block ( initialStepBoundFactor ) . setTypeValidationEnabled ( reducers ) ;
Code	Node mathType = block ( initialStepBoundFactor ) . setTypeValidationEnabled ( reducers ) ;
Distance : 5

44
Tree	Node superClassNameNode = block ( initialStepBoundFactor ) ;
Code	Node superClassNameNode = block ( initialStepBoundFactor ) ;
Distance : 8

45
Tree	Node mathType = block . block () . setCopy ( slotName ) ;
Code	Node mathType = block . block () . setCopy ( slotName ) ;
Distance : 7

46
Tree	Node mathType = block ( initialStepBoundFactor , this . isArrowAtTop ) ;
Code	Node mathType = block ( initialStepBoundFactor , this . isArrowAtTop ) ;
Distance : 8

47
Tree	Node mathType = block ( windowPropAccess , DefaultPassConfig , false ) ;
Code	Node mathType = block ( windowPropAccess , DefaultPassConfig , false ) ;
Distance : 8

48
Tree	Node pathArg = block . block ( initialStepBoundFactor , GREGORIAN_DEFAULT ) ;
Code	Node pathArg = block . block ( initialStepBoundFactor , GREGORIAN_DEFAULT ) ;
Distance : 9

49
Tree	Node pathArg = TypeInferenceMode.DISABLED . getGenericDeclaration ( initialStepBoundFactor ) ;
Code	Node pathArg = TypeInferenceMode.DISABLED . getGenericDeclaration ( initialStepBoundFactor ) ;
Distance : 7

50
Tree	Node mathType = block ( initialStepBoundFactor , ARROW_FN , false ) ;
Code	Node mathType = block ( initialStepBoundFactor , ARROW_FN , false ) ;
Distance : 8

51
Tree	Node hoistRoot = block ( getNativeObjectConstructorType ( initialStepBoundFactor ) ) ;
Code	Node hoistRoot = block ( getNativeObjectConstructorType ( initialStepBoundFactor ) ) ;
Distance : 8

52
Tree	Node pathArg = block ( initialStepBoundFactor ) . setTypeValidationEnabled ( startCase ) ;
Code	Node pathArg = block ( initialStepBoundFactor ) . setTypeValidationEnabled ( startCase ) ;
Distance : 5

53
Tree	Node mathType = block ( initialStepBoundFactor ) . setCompilerOptions () ;
Code	Node mathType = block ( initialStepBoundFactor ) . setCompilerOptions () ;
Distance : 7

54
Tree	Node pathArg = block ( initialStepBoundFactor ) ;
Code	Node pathArg = block ( initialStepBoundFactor ) ;
Distance : 8

55
Tree	Node mathType = block ( windowPropAccess , RotationConvention.FRAME_TRANSFORM ) ;
Code	Node mathType = block ( windowPropAccess , RotationConvention.FRAME_TRANSFORM ) ;
Distance : 8

56
Tree	Node mathType = block ( initialStepBoundFactor ) . removeChildren () ;
Code	Node mathType = block ( initialStepBoundFactor ) . removeChildren () ;
Distance : 7

57
Tree	Node pathArg = block ( windowPropAccess ) ;
Code	Node pathArg = block ( windowPropAccess ) ;
Distance : 8

58
Tree	Node mathType = block ( getNativeObjectConstructorType ( copiedVarName ) ) ;
Code	Node mathType = block ( getNativeObjectConstructorType ( copiedVarName ) ) ;
Distance : 8

59
Tree	Node mathType = block () . getResolvedTemplateType ( ARROW_FN ) ;
Code	Node mathType = block () . getResolvedTemplateType ( ARROW_FN ) ;
Distance : 7

60
Tree	Node pathArg = block ( initialStepBoundFactor , LocalizedFormats.INTERNAL_ERROR ) ;
Code	Node pathArg = block ( initialStepBoundFactor , LocalizedFormats.INTERNAL_ERROR ) ;
Distance : 8

61
Tree	Node mathType = block ( initialStepBoundFactor , LocalizedFormats.INTERNAL_ERROR ) ;
Code	Node mathType = block ( initialStepBoundFactor , LocalizedFormats.INTERNAL_ERROR ) ;
Distance : 8

62
Tree	Node mathType = block ( initialStepBoundFactor , isLoopOrFunction , false ) ;
Code	Node mathType = block ( initialStepBoundFactor , isLoopOrFunction , false ) ;
Distance : 8

63
Tree	Node mathType = block ( initialStepBoundFactor , n ) ;
Code	Node mathType = block ( initialStepBoundFactor , n ) ;
Distance : 8

64
Tree	Node pathArg = block . block () . setCopy ( bd1 ) ;
Code	Node pathArg = block . block () . setCopy ( bd1 ) ;
Distance : 7

65
Tree	Node pathArg = block () . isFunctionBlock ( ARROW_FN ) ;
Code	Node pathArg = block () . isFunctionBlock ( ARROW_FN ) ;
Distance : 7

66
Tree	Node pathArg = block ( initialStepBoundFactor , RotationConvention.FRAME_TRANSFORM ) ;
Code	Node pathArg = block ( initialStepBoundFactor , RotationConvention.FRAME_TRANSFORM ) ;
Distance : 8

67
Tree	Node mathType = this . serializableMode . getGenericDeclaration ( wrapOn ) ;
Code	Node mathType = this . serializableMode . getGenericDeclaration ( wrapOn ) ;
Distance : 7

68
Tree	Node mathType = block . block () . setCopy ( bd1 ) ;
Code	Node mathType = block . block () . setCopy ( bd1 ) ;
Distance : 7

69
Tree	Node mathType = block ( windowPropAccess , CANNOT_CONVERT ) ;
Code	Node mathType = block ( windowPropAccess , CANNOT_CONVERT ) ;
Distance : 8

70
Tree	Node mathType = block ( initialStepBoundFactor , this . stepPoint ) ;
Code	Node mathType = block ( initialStepBoundFactor , this . stepPoint ) ;
Distance : 8

71
Tree	Node mathType = block () . hasNode ( ARROW_FN ) ;
Code	Node mathType = block () . hasNode ( ARROW_FN ) ;
Distance : 7

72
Tree	Node mathType = block ( getNativeObjectConstructorType ( initialStepBoundFactor ) , ctorNode ) ;
Code	Node mathType = block ( getNativeObjectConstructorType ( initialStepBoundFactor ) , ctorNode ) ;
Distance : 8

73
Tree	Node mathType = block . block ( wrapOn ) ;
Code	Node mathType = block . block ( wrapOn ) ;
Distance : 7

74
Tree	Node mathType = block ( windowPropAccess , DefaultPassConfig ) ;
Code	Node mathType = block ( windowPropAccess , DefaultPassConfig ) ;
Distance : 8

75
Tree	Node mathType = block ( initialStepBoundFactor ) . toReturn ( startCase ) ;
Code	Node mathType = block ( initialStepBoundFactor ) . toReturn ( startCase ) ;
Distance : 5

76
Tree	Node methodClassType = block . block () ;
Code	Node methodClassType = block . block () ;
Distance : 9

77
Tree	Node mathType = block ( windowPropAccess ) . setTypeValidationEnabled ( startCase ) ;
Code	Node mathType = block ( windowPropAccess ) . setTypeValidationEnabled ( startCase ) ;
Distance : 5

78
Tree	Node mathType = block ( initialStepBoundFactor , DateTimeZone.UTC ) ;
Code	Node mathType = block ( initialStepBoundFactor , DateTimeZone.UTC ) ;
Distance : 8

79
Tree	Node pathArg = block ( initialStepBoundFactor , false ) ;
Code	Node pathArg = block ( initialStepBoundFactor , false ) ;
Distance : 8

80
Tree	Node mathType = this . serializableMode . getGenericDeclaration ( ARROW_FN ) ;
Code	Node mathType = this . serializableMode . getGenericDeclaration ( ARROW_FN ) ;
Distance : 7

81
Tree	Node mathType = block ( initialStepBoundFactor , DefaultPassConfig ) ;
Code	Node mathType = block ( initialStepBoundFactor , DefaultPassConfig ) ;
Distance : 8

82
Tree	Node mathType = block ( initialStepBoundFactor , ARROW_FN ) ;
Code	Node mathType = block ( initialStepBoundFactor , ARROW_FN ) ;
Distance : 8

83
Tree	Node mathType = block ( initialStepBoundFactor ) . withCostRelativeTolerance () ;
Code	Node mathType = block ( initialStepBoundFactor ) . withCostRelativeTolerance () ;
Distance : 7

84
Tree	Node mathType = block ( initialStepBoundFactor , this . newString ) ;
Code	Node mathType = block ( initialStepBoundFactor , this . newString ) ;
Distance : 8

85
Tree	Node superClassNameNode = block . block () ;
Code	Node superClassNameNode = block . block () ;
Distance : 9

86
Tree	Node mathType = block ( initialStepBoundFactor , CANNOT_CONVERT ) ;
Code	Node mathType = block ( initialStepBoundFactor , CANNOT_CONVERT ) ;
Distance : 8

87
Tree	Node hoistRoot = block ( initialStepBoundFactor , DefaultPassConfig ) ;
Code	Node hoistRoot = block ( initialStepBoundFactor , DefaultPassConfig ) ;
Distance : 8

88
Tree	Node mathType = block . block ( getNativeObjectConstructorType ( slotName ) , ctorNode ) ;
Code	Node mathType = block . block ( getNativeObjectConstructorType ( slotName ) , ctorNode ) ;
Distance : 10

89
Tree	Node mathType = block ( initialStepBoundFactor , false ) ;
Code	Node mathType = block ( initialStepBoundFactor , false ) ;
Distance : 8

90
Tree	Node mathType = block ( initialStepBoundFactor , this . fooFunction ) ;
Code	Node mathType = block ( initialStepBoundFactor , this . fooFunction ) ;
Distance : 8

91
Tree	Node mathType = block . block () . setCopy ( startCase ) ;
Code	Node mathType = block . block () . setCopy ( startCase ) ;
Distance : 7

92
Tree	Node pathArg = block ( getNativeObjectConstructorType ( initialStepBoundFactor ) ) ;
Code	Node pathArg = block ( getNativeObjectConstructorType ( initialStepBoundFactor ) ) ;
Distance : 8

93
Tree	Node mathType = block . block ( initialStepBoundFactor , GREGORIAN_DEFAULT ) ;
Code	Node mathType = block . block ( initialStepBoundFactor , GREGORIAN_DEFAULT ) ;
Distance : 9

94
Tree	Node mathType = block ( windowPropAccess , false ) ;
Code	Node mathType = block ( windowPropAccess , false ) ;
Distance : 8

95
Tree	Node pathArg = block ( initialStepBoundFactor , DefaultPassConfig ) ;
Code	Node pathArg = block ( initialStepBoundFactor , DefaultPassConfig ) ;
Distance : 8

96
Tree	Node mathType = block () . smartNullPointerException ( ARROW_FN ) ;
Code	Node mathType = block () . smartNullPointerException ( ARROW_FN ) ;
Distance : 7

97
Tree	Node mathType = block ( initialStepBoundFactor , paramBuilder ) ;
Code	Node mathType = block ( initialStepBoundFactor , paramBuilder ) ;
Distance : 8

98
Tree	Node mathType = block ( initialStepBoundFactor , reach ) ;
Code	Node mathType = block ( initialStepBoundFactor , reach ) ;
Distance : 8

99
Tree	Node mathType = block ( INVALID_ES3_PROP_NAME , false ) ;
Code	Node mathType = block ( INVALID_ES3_PROP_NAME , false ) ;
Distance : 8

100
Tree	Node mathType = block ( getNativeObjectConstructorType ( getTmpError ) ) ;
Code	Node mathType = block ( getNativeObjectConstructorType ( getTmpError ) ) ;
Distance : 8

101
Tree	Node pathArg = block ( initialStepBoundFactor , DefaultPassConfig , false ) ;
Code	Node pathArg = block ( initialStepBoundFactor , DefaultPassConfig , false ) ;
Distance : 8

102
Tree	Node mathType = block . block ( initialStepBoundFactor , reach ) ;
Code	Node mathType = block . block ( initialStepBoundFactor , reach ) ;
Distance : 9

103
Tree	Node pathArg = block ( initialStepBoundFactor , this . legendItemGraphicEdge ) ;
Code	Node pathArg = block ( initialStepBoundFactor , this . legendItemGraphicEdge ) ;
Distance : 8

104
Tree	Node mathType = block ( initialStepBoundFactor , reductionMap ) ;
Code	Node mathType = block ( initialStepBoundFactor , reductionMap ) ;
Distance : 8

105
Tree	Node hoistRoot = block ( initialStepBoundFactor , false ) ;
Code	Node hoistRoot = block ( initialStepBoundFactor , false ) ;
Distance : 8

106
Tree	Node mathType = block . block () . setCopy ( fooFunction ) ;
Code	Node mathType = block . block () . setCopy ( fooFunction ) ;
Distance : 7

107
Tree	Node mathType = block ( initialStepBoundFactor , CANNOT_CONVERT ) ;
Code	Node mathType = block ( initialStepBoundFactor , CANNOT_CONVERT ) ;
Distance : 8

108
Tree	Node pathArg = block . block () . setCopy ( startCase ) ;
Code	Node pathArg = block . block () . setCopy ( startCase ) ;
Distance : 7

109
Tree	Node mathType = block () . createUnionType ( ARROW_FN ) ;
Code	Node mathType = block () . createUnionType ( ARROW_FN ) ;
Distance : 7

110
Tree	Node mathType = block ( initialStepBoundFactor , DefaultPassConfig , false ) ;
Code	Node mathType = block ( initialStepBoundFactor , DefaultPassConfig , false ) ;
Distance : 8

111
Tree	Node mathType = this . innerSeparatorExtension . isNot ( ARROW_FN ) ;
Code	Node mathType = this . innerSeparatorExtension . isNot ( ARROW_FN ) ;
Distance : 7

112
Tree	Node mathType = this . serializableMode . getGenericDeclaration ( bd1 ) ;
Code	Node mathType = this . serializableMode . getGenericDeclaration ( bd1 ) ;
Distance : 7

113
Tree	Node mathType = block () . isFunctionBlock ( ARROW_FN ) ;
Code	Node mathType = block () . isFunctionBlock ( ARROW_FN ) ;
Distance : 7

114
Tree	Node superClassNameNode = block ( getNativeObjectConstructorType ( initialStepBoundFactor ) ) ;
Code	Node superClassNameNode = block ( getNativeObjectConstructorType ( initialStepBoundFactor ) ) ;
Distance : 8

115
Tree	Node mathType = block () . addWrapField ( ARROW_FN ) ;
Code	Node mathType = block () . addWrapField ( ARROW_FN ) ;
Distance : 7

116
Tree	Node mathType = block ( getNativeObjectConstructorType ( dn ) ) ;
Code	Node mathType = block ( getNativeObjectConstructorType ( dn ) ) ;
Distance : 8

117
Tree	Node mathType = block ( initialStepBoundFactor , dateTimeField ) ;
Code	Node mathType = block ( initialStepBoundFactor , dateTimeField ) ;
Distance : 8

118
Tree	Node mathType = block . block ( getNativeNullType ( startCase ) , ctorNode ) ;
Code	Node mathType = block . block ( getNativeNullType ( startCase ) , ctorNode ) ;
Distance : 10

119
Tree	Node hoistRoot = block ( initialStepBoundFactor , DefaultPassConfig , false ) ;
Code	Node hoistRoot = block ( initialStepBoundFactor , DefaultPassConfig , false ) ;
Distance : 8

120
Tree	Node pathArg = block ( getNativeObjectConstructorType ( initialStepBoundFactor ) , ctorNode ) ;
Code	Node pathArg = block ( getNativeObjectConstructorType ( initialStepBoundFactor ) , ctorNode ) ;
Distance : 8

121
Tree	Node mathType = block . block ( initialStepBoundFactor , paramBuilder ) ;
Code	Node mathType = block . block ( initialStepBoundFactor , paramBuilder ) ;
Distance : 9

122
Tree	Node mathType = block . block ( getNativeObjectConstructorType ( startCase ) , ctorNode ) ;
Code	Node mathType = block . block ( getNativeObjectConstructorType ( startCase ) , ctorNode ) ;
Distance : 10

123
Tree	Node mathType = block ( initialStepBoundFactor , firstNonNull ( startCase ) ) ;
Code	Node mathType = block ( initialStepBoundFactor , firstNonNull ( startCase ) ) ;
Distance : 8

124
Tree	Node mathType = this . innerSeparatorExtension . getDeclaredTypeOf ( ARROW_FN ) ;
Code	Node mathType = this . innerSeparatorExtension . getDeclaredTypeOf ( ARROW_FN ) ;
Distance : 7

125
Tree	Node mathType = block . block ( getNativeNullType ( slotName ) , ctorNode ) ;
Code	Node mathType = block . block ( getNativeNullType ( slotName ) , ctorNode ) ;
Distance : 10

126
Tree	Node mathType = block ( initialStepBoundFactor , this . mji ) ;
Code	Node mathType = block ( initialStepBoundFactor , this . mji ) ;
Distance : 8

127
Tree	Node mathType = block ( initialStepBoundFactor , getReferenceName ( startCase ) ) ;
Code	Node mathType = block ( initialStepBoundFactor , getReferenceName ( startCase ) ) ;
Distance : 8

128
Tree	Node mathType = block . block () . setCopy ( CHAR_COPY ) ;
Code	Node mathType = block . block () . setCopy ( CHAR_COPY ) ;
Distance : 7

129
Tree	Node pathArg = block . block ( getNativeObjectConstructorType ( slotName ) , ctorNode ) ;
Code	Node pathArg = block . block ( getNativeObjectConstructorType ( slotName ) , ctorNode ) ;
Distance : 10

130
Tree	Node hoistRoot = TypeInferenceMode.DISABLED . getGenericDeclaration ( initialStepBoundFactor ) ;
Code	Node hoistRoot = TypeInferenceMode.DISABLED . getGenericDeclaration ( initialStepBoundFactor ) ;
Distance : 7

131
Tree	Node mathType = block () . setCopy ( ARROW_FN ) ;
Code	Node mathType = block () . setCopy ( ARROW_FN ) ;
Distance : 7

132
Tree	Node mathType = LanguageMode.ECMASCRIPT5 . getGenericDeclaration ( initialStepBoundFactor ) ;
Code	Node mathType = LanguageMode.ECMASCRIPT5 . getGenericDeclaration ( initialStepBoundFactor ) ;
Distance : 7

133
Tree	Node mathType = block ( initialStepBoundFactor ) . setTypeValidationEnabled ( startCase ) ;
Code	Node mathType = block ( initialStepBoundFactor ) . setTypeValidationEnabled ( startCase ) ;
Distance : 5

134
Tree	Node mathType = block ( initialStepBoundFactor , CANNOT_CONVERT , false ) ;
Code	Node mathType = block ( initialStepBoundFactor , CANNOT_CONVERT , false ) ;
Distance : 8

135
Tree	Node pathArg = block ( initialStepBoundFactor , CANNOT_CONVERT ) ;
Code	Node pathArg = block ( initialStepBoundFactor , CANNOT_CONVERT ) ;
Distance : 8

136
Tree	Node mathType = this . innerSeparatorExtension . getGenericDeclaration ( ARROW_FN ) ;
Code	Node mathType = this . innerSeparatorExtension . getGenericDeclaration ( ARROW_FN ) ;
Distance : 7

137
Tree	Node mathType = block . block ( INVALID_ES3_PROP_NAME , GREGORIAN_DEFAULT ) ;
Code	Node mathType = block . block ( INVALID_ES3_PROP_NAME , GREGORIAN_DEFAULT ) ;
Distance : 9

138
Tree	Node mathType = block ( initialStepBoundFactor , collectionHasExactlyInOrder ( startCase ) ) ;
Code	Node mathType = block ( initialStepBoundFactor , collectionHasExactlyInOrder ( startCase ) ) ;
Distance : 8

139
Tree	Node mathType = TypeInferenceMode.DISABLED . getGenericDeclaration ( INVALID_ES3_PROP_NAME ) ;
Code	Node mathType = TypeInferenceMode.DISABLED . getGenericDeclaration ( INVALID_ES3_PROP_NAME ) ;
Distance : 7

140
Tree	Node pathArg = block . block ( getNativeNullType ( slotName ) , ctorNode ) ;
Code	Node pathArg = block . block ( getNativeNullType ( slotName ) , ctorNode ) ;
Distance : 10

141
Tree	Node mathType = block ( getNativeObjectConstructorType ( DefaultPassConfig ) ) ;
Code	Node mathType = block ( getNativeObjectConstructorType ( DefaultPassConfig ) ) ;
Distance : 8

142
Tree	Node mathType = block . block () . setCopy ( DEFAULT_MAX_ITER ) ;
Code	Node mathType = block . block () . setCopy ( DEFAULT_MAX_ITER ) ;
Distance : 7

143
Tree	Node pathArg = block . block ( getNativeNullType ( startCase ) , ctorNode ) ;
Code	Node pathArg = block . block ( getNativeNullType ( startCase ) , ctorNode ) ;
Distance : 10

144
Tree	Node pathArg = block . block ( getNativeObjectConstructorType ( startCase ) , ctorNode ) ;
Code	Node pathArg = block . block ( getNativeObjectConstructorType ( startCase ) , ctorNode ) ;
Distance : 10

145
Tree	Node pathArg = block ( initialStepBoundFactor ) . setTypeValidationEnabled ( startCase ) ;
Code	Node pathArg = block ( initialStepBoundFactor ) . setTypeValidationEnabled ( startCase ) ;
Distance : 5

146
Tree	Node mathType = TypeInferenceMode.DISABLED . getGenericDeclaration ( initialStepBoundFactor ) ;
Code	Node mathType = TypeInferenceMode.DISABLED . getGenericDeclaration ( initialStepBoundFactor ) ;
Distance : 7

147
Tree	Node mathType = block . block ( initialStepBoundFactor ) . setTypeValidationEnabled ( startCase ) ;
Code	Node mathType = block . block ( initialStepBoundFactor ) . setTypeValidationEnabled ( startCase ) ;
Distance : 7

148
Tree	Node hoistRoot = block ( initialStepBoundFactor , RotationConvention.FRAME_TRANSFORM ) ;
Code	Node hoistRoot = block ( initialStepBoundFactor , RotationConvention.FRAME_TRANSFORM ) ;
Distance : 8

149
Tree	Node hoistRoot = block . block ( initialStepBoundFactor , GREGORIAN_DEFAULT ) ;
Code	Node hoistRoot = block . block ( initialStepBoundFactor , GREGORIAN_DEFAULT ) ;
Distance : 9

150
Tree	Node mathType = block . block ( initialStepBoundFactor , matchingMock ) ;
Code	Node mathType = block . block ( initialStepBoundFactor , matchingMock ) ;
Distance : 9

151
Tree	Node mathType = block ( MINUTES , false ) ;
Code	Node mathType = block ( MINUTES , false ) ;
Distance : 8

152
Tree	Node pathArg = block ( initialStepBoundFactor , collectionHasExactlyInOrder ( startCase ) ) ;
Code	Node pathArg = block ( initialStepBoundFactor , collectionHasExactlyInOrder ( startCase ) ) ;
Distance : 8

153
Tree	Node mathType = block ( initialStepBoundFactor , this . matchingMock ) ;
Code	Node mathType = block ( initialStepBoundFactor , this . matchingMock ) ;
Distance : 8

154
Tree	Node mathType = block ( initialStepBoundFactor ) . setCompilerOptions ( startCase ) ;
Code	Node mathType = block ( initialStepBoundFactor ) . setCompilerOptions ( startCase ) ;
Distance : 5

155
Tree	Node pathArg = block ( initialStepBoundFactor , DateTimeZone.UTC ) ;
Code	Node pathArg = block ( initialStepBoundFactor , DateTimeZone.UTC ) ;
Distance : 8

156
Tree	Node mathType = TypeInferenceMode.DISABLED . getGenericDeclaration ( windowPropAccess ) ;
Code	Node mathType = TypeInferenceMode.DISABLED . getGenericDeclaration ( windowPropAccess ) ;
Distance : 7

157
Tree	Node mathType = block ( getNativeObjectConstructorType ( DefaultPassConfig ) , ctorNode ) ;
Code	Node mathType = block ( getNativeObjectConstructorType ( DefaultPassConfig ) , ctorNode ) ;
Distance : 8

158
Tree	Node mathType = block ( getNativeObjectConstructorType ( initialStepBoundFactor ) , dateTimeField ) ;
Code	Node mathType = block ( getNativeObjectConstructorType ( initialStepBoundFactor ) , dateTimeField ) ;
Distance : 8

159
Tree	Node mathType = block ( initialStepBoundFactor ) . toReturn ( startCase ) ;
Code	Node mathType = block ( initialStepBoundFactor ) . toReturn ( startCase ) ;
Distance : 5

160
Tree	Node mathType = block . block ( initialStepBoundFactor ) . validateRoot ( startCase ) ;
Code	Node mathType = block . block ( initialStepBoundFactor ) . validateRoot ( startCase ) ;
Distance : 7

161
Tree	Node mathType = TypeInferenceMode.DISABLED . createUnionType ( initialStepBoundFactor ) ;
Code	Node mathType = TypeInferenceMode.DISABLED . createUnionType ( initialStepBoundFactor ) ;
Distance : 7

162
Tree	Node superClassNameNode = block ( initialStepBoundFactor , false ) ;
Code	Node superClassNameNode = block ( initialStepBoundFactor , false ) ;
Distance : 8

163
Tree	Node pathArg = block . block ( initialStepBoundFactor ) . setTypeValidationEnabled ( startCase ) ;
Code	Node pathArg = block . block ( initialStepBoundFactor ) . setTypeValidationEnabled ( startCase ) ;
Distance : 7

164
Tree	Node mathType = block ( initialStepBoundFactor , DefaultPassConfig , lineno ) ;
Code	Node mathType = block ( initialStepBoundFactor , DefaultPassConfig , lineno ) ;
Distance : 8

165
Tree	Node hoistRoot = block ( getNativeObjectConstructorType ( initialStepBoundFactor ) , ctorNode ) ;
Code	Node hoistRoot = block ( getNativeObjectConstructorType ( initialStepBoundFactor ) , ctorNode ) ;
Distance : 8

166
Tree	Node mathType = block . block ( initialStepBoundFactor ) . setTypeValidationEnabled ( reducers ) ;
Code	Node mathType = block . block ( initialStepBoundFactor ) . setTypeValidationEnabled ( reducers ) ;
Distance : 7

167
Tree	Node pathArg = block ( initialStepBoundFactor , firstNonNull ( startCase ) ) ;
Code	Node pathArg = block ( initialStepBoundFactor , firstNonNull ( startCase ) ) ;
Distance : 8

168
Tree	Node mathType = block ( initialStepBoundFactor ) . setTypeValidationEnabled ( reducers ) ;
Code	Node mathType = block ( initialStepBoundFactor ) . setTypeValidationEnabled ( reducers ) ;
Distance : 5

169
Tree	Node mathType = block ( initialStepBoundFactor ) . setTypeValidationEnabled ( mji ) ;
Code	Node mathType = block ( initialStepBoundFactor ) . setTypeValidationEnabled ( mji ) ;
Distance : 5

170
Tree	Node mathType = block . block ( initialStepBoundFactor ) . getTypeI ( startCase ) ;
Code	Node mathType = block . block ( initialStepBoundFactor ) . getTypeI ( startCase ) ;
Distance : 7

171
Tree	Node mathType = block ( initialStepBoundFactor , getNativeType ( startCase ) ) ;
Code	Node mathType = block ( initialStepBoundFactor , getNativeType ( startCase ) ) ;
Distance : 8

172
Tree	Node pathArg = block ( windowPropAccess , false ) ;
Code	Node pathArg = block ( windowPropAccess , false ) ;
Distance : 8

173
Tree	Node mathType = block . block ( initialStepBoundFactor ) . setTypeValidationEnabled ( mji ) ;
Code	Node mathType = block . block ( initialStepBoundFactor ) . setTypeValidationEnabled ( mji ) ;
Distance : 7

174
Tree	Node mathType = TypeInferenceMode.DISABLED . newString ( initialStepBoundFactor ) ;
Code	Node mathType = TypeInferenceMode.DISABLED . newString ( initialStepBoundFactor ) ;
Distance : 7

175
Tree	Node mathType = block . block ( initialStepBoundFactor , CONFLICTING_EXTENDED_TYPE ) ;
Code	Node mathType = block . block ( initialStepBoundFactor , CONFLICTING_EXTENDED_TYPE ) ;
Distance : 9

176
Tree	Node pathArg = block ( initialStepBoundFactor , getReferenceName ( startCase ) ) ;
Code	Node pathArg = block ( initialStepBoundFactor , getReferenceName ( startCase ) ) ;
Distance : 8

177
Tree	Node mathType = block ( getNativeObjectConstructorType ( copiedVarName ) , ctorNode ) ;
Code	Node mathType = block ( getNativeObjectConstructorType ( copiedVarName ) , ctorNode ) ;
Distance : 8

178
Tree	Node mathType = block ( getNativeObjectConstructorType ( initialStepBoundFactor ) , origValueNode ) ;
Code	Node mathType = block ( getNativeObjectConstructorType ( initialStepBoundFactor ) , origValueNode ) ;
Distance : 8

179
Tree	Node mathType = block ( initialStepBoundFactor ) . removeChildren ( startCase ) ;
Code	Node mathType = block ( initialStepBoundFactor ) . removeChildren ( startCase ) ;
Distance : 5

180
Tree	Node mathType = block ( windowPropAccess ) . setTypeValidationEnabled ( startCase ) ;
Code	Node mathType = block ( windowPropAccess ) . setTypeValidationEnabled ( startCase ) ;
Distance : 5

181
Tree	Node mathType = block . block ( initialStepBoundFactor ) . removeChildren ( startCase ) ;
Code	Node mathType = block . block ( initialStepBoundFactor ) . removeChildren ( startCase ) ;
Distance : 7

182
Tree	Node mathType = block ( initialStepBoundFactor , DefaultPassConfig , selectedColumns ) ;
Code	Node mathType = block ( initialStepBoundFactor , DefaultPassConfig , selectedColumns ) ;
Distance : 8

183
Tree	Node pathArg = block . block ( initialStepBoundFactor ) . removeChildren ( startCase ) ;
Code	Node pathArg = block . block ( initialStepBoundFactor ) . removeChildren ( startCase ) ;
Distance : 7

184
Tree	Node mathType = block ( initialStepBoundFactor , CANNOT_CONVERT , lineno ) ;
Code	Node mathType = block ( initialStepBoundFactor , CANNOT_CONVERT , lineno ) ;
Distance : 8

185
Tree	Node mathType = block ( windowPropAccess , collectionHasExactlyInOrder ( startCase ) ) ;
Code	Node mathType = block ( windowPropAccess , collectionHasExactlyInOrder ( startCase ) ) ;
Distance : 8

186
Tree	Node mathType = new GradientPaint () . isFunctionBlock ( initialStepBoundFactor ) ;
Code	Node mathType = new GradientPaint () . isFunctionBlock ( initialStepBoundFactor ) ;
Distance : 7

187
Tree	Node mathType = new GradientPaint () . setCompilerOptions ( initialStepBoundFactor ) ;
Code	Node mathType = new GradientPaint () . setCompilerOptions ( initialStepBoundFactor ) ;
Distance : 7

188
Tree	Node mathType = new GradientPaint () . getGenericDeclaration ( initialStepBoundFactor ) ;
Code	Node mathType = new GradientPaint () . getGenericDeclaration ( initialStepBoundFactor ) ;
Distance : 7

189
Tree	Node mathType = block ( getNativeObjectConstructorType ( initialStepBoundFactor ) , DEFAULT_MOCK_MAKER_CLASS ) ;
Code	Node mathType = block ( getNativeObjectConstructorType ( initialStepBoundFactor ) , DEFAULT_MOCK_MAKER_CLASS ) ;
Distance : 8

190
Tree	Node pathArg = block ( initialStepBoundFactor , DefaultPassConfig , lineno ) ;
Code	Node pathArg = block ( initialStepBoundFactor , DefaultPassConfig , lineno ) ;
Distance : 8

191
Tree	Node mathType = block ( initialStepBoundFactor , DefaultPassConfig , Void ) ;
Code	Node mathType = block ( initialStepBoundFactor , DefaultPassConfig , Void ) ;
Distance : 8

192
Tree	Node mathType = new GradientPaint () . createGetterPropName ( initialStepBoundFactor ) ;
Code	Node mathType = new GradientPaint () . createGetterPropName ( initialStepBoundFactor ) ;
Distance : 7

193
Tree	Node pathArg = block ( initialStepBoundFactor , DefaultPassConfig , selectedColumns ) ;
Code	Node pathArg = block ( initialStepBoundFactor , DefaultPassConfig , selectedColumns ) ;
Distance : 8

194
Tree	Node mathType = block ( initialStepBoundFactor , isLoopOrFunction , lineno ) ;
Code	Node mathType = block ( initialStepBoundFactor , isLoopOrFunction , lineno ) ;
Distance : 8

195
Tree	Node mathType = block ( initialStepBoundFactor , CANNOT_CONVERT , selectedColumns ) ;
Code	Node mathType = block ( initialStepBoundFactor , CANNOT_CONVERT , selectedColumns ) ;
Distance : 8

196
Tree	Node mathType = new GradientPaint () . isFunctionBlock ( ARROW_FN ) ;
Code	Node mathType = new GradientPaint () . isFunctionBlock ( ARROW_FN ) ;
Distance : 7

197
Tree	Node mathType = new GradientPaint () . setCompilerOptions ( ARROW_FN ) ;
Code	Node mathType = new GradientPaint () . setCompilerOptions ( ARROW_FN ) ;
Distance : 7

198
Tree	Node pathArg = new GradientPaint () . isFunctionBlock ( initialStepBoundFactor ) ;
Code	Node pathArg = new GradientPaint () . isFunctionBlock ( initialStepBoundFactor ) ;
Distance : 7

199
Tree	Node pathArg = new GradientPaint () . setCompilerOptions ( initialStepBoundFactor ) ;
Code	Node pathArg = new GradientPaint () . setCompilerOptions ( initialStepBoundFactor ) ;
Distance : 7

========================================================================


========================================================================
Example Number: 30
Parent Code is: 
{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.UNCOND , finallyNode ) ; } }
-------------------------------------------------------------------------------
Child code is: 
{ for ( Node finallyNode : cfa.finallyMap . get ( parent ) ) { cfa . createEdge ( fromNode , Branch.ON_EX , finallyNode ) ; } }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (70 (303{val=for}) (214{val=(}) (44 (43 (801{val=Node})) (800{val=finallyNode})) (226{val=:}) (32 (40{val=cfa.finallyMap}) (235{val=.}) (802{val=get}) (214{val=(}) (800{val=parent}) (215{val=)})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=cfa}) (235{val=.}) (802{val=createEdge}) (214{val=(}) (800{val=fromNode}) (234{val=,}) (40{val=Branch.UNCOND}) (234{val=,}) (800{val=finallyNode}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (70 (303{val=for}) (214{val=(}) (44 (43 (801{val=Node})) (800{val=finallyNode})) (226{val=:}) (32 (40{val=cfa.finallyMap}) (235{val=.}) (802{val=get}) (214{val=(}) (800{val=parent}) (215{val=)})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=cfa}) (235{val=.}) (802{val=createEdge}) (214{val=(}) (800{val=fromNode}) (234{val=,}) (40{val=Branch.ON_EX}) (234{val=,}) (800{val=finallyNode}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/14/parent/src_com_google_javascript_jscomp_ControlFlowAnalysis.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ for ( Node iterations : callSite . get ( parent ) ) { processDeclaration ( PROPERTY_DECLARER , null ) ; } }
Code	{ for ( Node iterations : callSite . get ( parent ) ) { processDeclaration ( PROPERTY_DECLARER , null ) ; } }
Distance : 9

1
Tree	{ for ( Node symbolName : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( false ) ; } }
Code	{ for ( Node symbolName : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( false ) ; } }
Distance : 12

2
Tree	{ for ( Node dollarChildProp : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( false ) ; } }
Code	{ for ( Node dollarChildProp : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( false ) ; } }
Distance : 12

3
Tree	{ for ( Node iterations : exprs . get ( parent ) ) { transpileAndDontCheck ( PROPERTY_DECLARER , null ) ; } }
Code	{ for ( Node iterations : exprs . get ( parent ) ) { transpileAndDontCheck ( PROPERTY_DECLARER , null ) ; } }
Distance : 9

4
Tree	{ for ( Node iterations : callSite . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( false ) ; } }
Code	{ for ( Node iterations : callSite . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( false ) ; } }
Distance : 9

5
Tree	{ for ( Node iterations : mRules . get ( parent ) ) { processDeclaration ( PROPERTY_DECLARER , null ) ; } }
Code	{ for ( Node iterations : mRules . get ( parent ) ) { processDeclaration ( PROPERTY_DECLARER , null ) ; } }
Distance : 9

6
Tree	{ for ( Node iterations : parent.rootNode . get () ) { processDeclaration ( PROPERTY_DECLARER , null ) ; } }
Code	{ for ( Node iterations : parent.rootNode . get () ) { processDeclaration ( PROPERTY_DECLARER , null ) ; } }
Distance : 12

7
Tree	{ for ( Node definitionRValue : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( nt1.rawType , STRING_CONSTANT ) ; } }
Code	{ for ( Node definitionRValue : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( nt1.rawType , STRING_CONSTANT ) ; } }
Distance : 11

8
Tree	{ for ( Node iterations : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( currentScript.exportsToInline , STRING_CONSTANT ) ; } }
Code	{ for ( Node iterations : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( currentScript.exportsToInline , STRING_CONSTANT ) ; } }
Distance : 11

9
Tree	{ for ( Node iterations : moduleSpecifier . get ( parent ) ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Code	{ for ( Node iterations : moduleSpecifier . get ( parent ) ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Distance : 9

10
Tree	{ for ( Node iterations : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( functionContext.function , STRING_CONSTANT ) ; } }
Code	{ for ( Node iterations : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( functionContext.function , STRING_CONSTANT ) ; } }
Distance : 11

11
Tree	{ for ( final Node definitionRValue : exprs . get ( parent ) ) { processDeclaration ( PROPERTY_DECLARER , null ) ; } }
Code	{ for ( final Node definitionRValue : exprs . get ( parent ) ) { processDeclaration ( PROPERTY_DECLARER , null ) ; } }
Distance : 10

12
Tree	{ for ( final Node definitionRValue : parent.rootNode . get () ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Code	{ for ( final Node definitionRValue : parent.rootNode . get () ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Distance : 13

13
Tree	{ for ( Node iterations : mRules . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( false ) ; } }
Code	{ for ( Node iterations : mRules . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( false ) ; } }
Distance : 9

14
Tree	{ for ( Node dollarChildProp : parent.rootNode . get () ) { this . subtypes . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Code	{ for ( Node dollarChildProp : parent.rootNode . get () ) { this . subtypes . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Distance : 12

15
Tree	{ for ( Node iterations : mRules . get ( parent ) ) { this . canvas . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Code	{ for ( Node iterations : mRules . get ( parent ) ) { this . canvas . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Distance : 9

16
Tree	{ for ( Node otherLocation : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( nt1.rawType , STRING_CONSTANT ) ; } }
Code	{ for ( Node otherLocation : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( nt1.rawType , STRING_CONSTANT ) ; } }
Distance : 11

17
Tree	{ for ( final Node iterations : exprs . get ( parent ) ) { processDeclaration ( PROPERTY_DECLARER , null ) ; } }
Code	{ for ( final Node iterations : exprs . get ( parent ) ) { processDeclaration ( PROPERTY_DECLARER , null ) ; } }
Distance : 10

18
Tree	{ for ( final Node iterations : parent.rootNode . get () ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Code	{ for ( final Node iterations : parent.rootNode . get () ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Distance : 13

19
Tree	{ for ( final Node dollarChildProp : exprs . get ( parent ) ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Code	{ for ( final Node dollarChildProp : exprs . get ( parent ) ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Distance : 10

20
Tree	{ for ( Node ise : parent.rootNode . get () ) { this . subtypes . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Code	{ for ( Node ise : parent.rootNode . get () ) { this . subtypes . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Distance : 12

21
Tree	{ for ( final Node definitionRValue : exprs . get ( parent ) ) { transpileAndDontCheck ( PROPERTY_DECLARER , null ) ; } }
Code	{ for ( final Node definitionRValue : exprs . get ( parent ) ) { transpileAndDontCheck ( PROPERTY_DECLARER , null ) ; } }
Distance : 10

22
Tree	{ for ( final Node definitionRValue : mRules . get ( parent ) ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Code	{ for ( final Node definitionRValue : mRules . get ( parent ) ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Distance : 10

23
Tree	{ for ( Node iterations : parent.rootNode . get () ) { this . subtypes . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Code	{ for ( Node iterations : parent.rootNode . get () ) { this . subtypes . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Distance : 12

24
Tree	{ for ( Node iterations : exprs . get ( parent ) ) { info.importedModules . addEs2018Passes ( STRING_CONSTANT + dateTimeField ) ; } }
Code	{ for ( Node iterations : exprs . get ( parent ) ) { info.importedModules . addEs2018Passes ( STRING_CONSTANT + dateTimeField ) ; } }
Distance : 9

25
Tree	{ for ( Node iterations : exprs . get ( parent ) ) { varInfo.propertyAssignmentsWillPreventRemoval . addEs2018Passes ( STRING_CONSTANT + dateTimeField ) ; } }
Code	{ for ( Node iterations : exprs . get ( parent ) ) { varInfo.propertyAssignmentsWillPreventRemoval . addEs2018Passes ( STRING_CONSTANT + dateTimeField ) ; } }
Distance : 9

26
Tree	{ for ( Node iterations : callSite . get ( parent ) ) { info.importedModules . addEs2018Passes ( STRING_CONSTANT + dateTimeField ) ; } }
Code	{ for ( Node iterations : callSite . get ( parent ) ) { info.importedModules . addEs2018Passes ( STRING_CONSTANT + dateTimeField ) ; } }
Distance : 9

27
Tree	{ for ( Node iterations : exprs . get ( parent ) ) { info.importedModules . addEs2018Passes ( STRING_CONSTANT + CANNOT_CONVERT_YET ) ; } }
Code	{ for ( Node iterations : exprs . get ( parent ) ) { info.importedModules . addEs2018Passes ( STRING_CONSTANT + CANNOT_CONVERT_YET ) ; } }
Distance : 9

28
Tree	{ for ( Node iterations : mRules . get ( parent ) ) { info.importedModules . addEs2018Passes ( STRING_CONSTANT + dateTimeField ) ; } }
Code	{ for ( Node iterations : mRules . get ( parent ) ) { info.importedModules . addEs2018Passes ( STRING_CONSTANT + dateTimeField ) ; } }
Distance : 9

29
Tree	{ for ( Node iterations : callSite . get ( parent ) ) { varInfo.propertyAssignmentsWillPreventRemoval . addEs2018Passes ( STRING_CONSTANT + dateTimeField ) ; } }
Code	{ for ( Node iterations : callSite . get ( parent ) ) { varInfo.propertyAssignmentsWillPreventRemoval . addEs2018Passes ( STRING_CONSTANT + dateTimeField ) ; } }
Distance : 9

30
Tree	{ for ( Node iterations : exprs . get ( parent ) ) { visitForIn ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node iterations : exprs . get ( parent ) ) { visitForIn ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

31
Tree	{ for ( Node iterations : callSite . get ( parent ) ) { visitForIn ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node iterations : callSite . get ( parent ) ) { visitForIn ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

32
Tree	{ for ( Node iterations : mRules . get ( parent ) ) { visitForIn ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node iterations : mRules . get ( parent ) ) { visitForIn ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

33
Tree	{ for ( Node iterations : exprs . get ( parent ) ) { processDeclaration ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node iterations : exprs . get ( parent ) ) { processDeclaration ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

34
Tree	{ for ( Node iterations : exprs . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( DiagnosticGroups.UNUSED_LOCAL_VARIABLE , null , null ) ; } }
Code	{ for ( Node iterations : exprs . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( DiagnosticGroups.UNUSED_LOCAL_VARIABLE , null , null ) ; } }
Distance : 7

35
Tree	{ for ( Node iterations : exprs . get ( parent ) ) { varInfo.propertyAssignmentsWillPreventRemoval . addEs2018Passes ( STRING_CONSTANT + CANNOT_CONVERT_YET ) ; } }
Code	{ for ( Node iterations : exprs . get ( parent ) ) { varInfo.propertyAssignmentsWillPreventRemoval . addEs2018Passes ( STRING_CONSTANT + CANNOT_CONVERT_YET ) ; } }
Distance : 9

36
Tree	{ for ( final Node definitionRValue : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Code	{ for ( final Node definitionRValue : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Distance : 15

37
Tree	{ for ( final Node iterations : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Code	{ for ( final Node iterations : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Distance : 15

38
Tree	{ for ( Node iterations : callSite . get ( parent ) ) { processDeclaration ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node iterations : callSite . get ( parent ) ) { processDeclaration ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

39
Tree	{ for ( Node iterations : exprs . get ( parent ) ) { transpileAndDontCheck ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node iterations : exprs . get ( parent ) ) { transpileAndDontCheck ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

40
Tree	{ for ( Node iterations : parent.rootNode . get () ) { visitForIn ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node iterations : parent.rootNode . get () ) { visitForIn ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 17

41
Tree	{ for ( Node iterations : exprs . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Code	{ for ( Node iterations : exprs . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Distance : 14

42
Tree	{ for ( Node iterations : callSite . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Code	{ for ( Node iterations : callSite . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Distance : 14

43
Tree	{ for ( Node iterations : mRules . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Code	{ for ( Node iterations : mRules . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Distance : 14

44
Tree	{ for ( Node iterations : exprs . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction ) ; } }
Code	{ for ( Node iterations : exprs . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction ) ; } }
Distance : 14

45
Tree	{ for ( Node iterations : exprs . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( obj1.props , STRING_CONSTANT ) ; } }
Code	{ for ( Node iterations : exprs . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( obj1.props , STRING_CONSTANT ) ; } }
Distance : 8

46
Tree	{ for ( final Node extendsClause : parent.rootNode . get () ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Code	{ for ( final Node extendsClause : parent.rootNode . get () ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Distance : 13

47
Tree	{ for ( Node iterations : parent.rootNode . get () ) { visitForIn ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node iterations : parent.rootNode . get () ) { visitForIn ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 17

48
Tree	{ for ( Node iterations : parent.rootNode . get () ) { visitForIn ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , boxedInfo , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node iterations : parent.rootNode . get () ) { visitForIn ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , boxedInfo , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 17

49
Tree	{ for ( Node iterations : exprs . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( DiagnosticGroups.NEW_CHECK_TYPES_EXTRA_CHECKS , STRING_CONSTANT ) ; } }
Code	{ for ( Node iterations : exprs . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( DiagnosticGroups.NEW_CHECK_TYPES_EXTRA_CHECKS , STRING_CONSTANT ) ; } }
Distance : 8

50
Tree	{ for ( Node iterations : exprs . get ( parent ) ) { moduleRewriter . addEs2018Passes ( DiagnosticGroups.UNUSED_LOCAL_VARIABLE , STRING_CONSTANT ) ; } }
Code	{ for ( Node iterations : exprs . get ( parent ) ) { moduleRewriter . addEs2018Passes ( DiagnosticGroups.UNUSED_LOCAL_VARIABLE , STRING_CONSTANT ) ; } }
Distance : 8

51
Tree	{ for ( Node iterations : mRules . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( DiagnosticGroups.UNUSED_LOCAL_VARIABLE , STRING_CONSTANT ) ; } }
Code	{ for ( Node iterations : mRules . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( DiagnosticGroups.UNUSED_LOCAL_VARIABLE , STRING_CONSTANT ) ; } }
Distance : 8

52
Tree	{ for ( Node iterations : parent.rootNode . get () ) { visitForIn ( PROPERTY_DECLARER , related , bazFunction , bazFunction , bazFunction , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node iterations : parent.rootNode . get () ) { visitForIn ( PROPERTY_DECLARER , related , bazFunction , bazFunction , bazFunction , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 17

53
Tree	{ for ( final Node dollarChildProp : exprs . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Code	{ for ( final Node dollarChildProp : exprs . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Distance : 12

54
Tree	{ for ( final Node definitionRValue : parent.rootNode . get () ) { initializeArrays ( PROPERTY_DECLARER , null ) ; } }
Code	{ for ( final Node definitionRValue : parent.rootNode . get () ) { initializeArrays ( PROPERTY_DECLARER , null ) ; } }
Distance : 13

55
Tree	{ for ( final Node definitionRValue : exprs . get ( parent ) ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Code	{ for ( final Node definitionRValue : exprs . get ( parent ) ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Distance : 12

56
Tree	{ for ( Node definitionRValue : parent.rootNode . get () ) { this . subtypes . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Code	{ for ( Node definitionRValue : parent.rootNode . get () ) { this . subtypes . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Distance : 12

57
Tree	{ for ( Node iterations : moduleSpecifier . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Code	{ for ( Node iterations : moduleSpecifier . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Distance : 14

58
Tree	{ for ( final Node iterations : parent.rootNode . get () ) { initializeArrays ( PROPERTY_DECLARER , null ) ; } }
Code	{ for ( final Node iterations : parent.rootNode . get () ) { initializeArrays ( PROPERTY_DECLARER , null ) ; } }
Distance : 13

59
Tree	{ for ( final Node iterations : exprs . get ( parent ) ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Code	{ for ( final Node iterations : exprs . get ( parent ) ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Distance : 12

60
Tree	{ for ( final Node definitionRValue : mRules . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Code	{ for ( final Node definitionRValue : mRules . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Distance : 12

61
Tree	{ for ( final Node iterations : mRules . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Code	{ for ( final Node iterations : mRules . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Distance : 12

62
Tree	{ for ( final Node definitionRValue : exprs . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction ) ; } }
Code	{ for ( final Node definitionRValue : exprs . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction ) ; } }
Distance : 12

63
Tree	{ for ( Node definitionRValue : parent.rootNode . get () ) { visitForIn ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node definitionRValue : parent.rootNode . get () ) { visitForIn ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 17

64
Tree	{ for ( Node iterations : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( false ) ; } }
Code	{ for ( Node iterations : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( false ) ; } }
Distance : 12

65
Tree	{ for ( Node symbolName : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( nt1.rawType , STRING_CONSTANT ) ; } }
Code	{ for ( Node symbolName : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( nt1.rawType , STRING_CONSTANT ) ; } }
Distance : 11

66
Tree	{ for ( Node iterations : exprs . get ( parent ) ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Code	{ for ( Node iterations : exprs . get ( parent ) ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Distance : 9

67
Tree	{ for ( Node dollarChildProp : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( nt1.rawType , STRING_CONSTANT ) ; } }
Code	{ for ( Node dollarChildProp : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( nt1.rawType , STRING_CONSTANT ) ; } }
Distance : 11

68
Tree	{ for ( Node ise : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( nt1.rawType , STRING_CONSTANT ) ; } }
Code	{ for ( Node ise : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( nt1.rawType , STRING_CONSTANT ) ; } }
Distance : 11

69
Tree	{ for ( final Node dollarChildProp : parent.rootNode . get () ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Code	{ for ( final Node dollarChildProp : parent.rootNode . get () ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Distance : 13

70
Tree	{ for ( Node iterations : mRules . get ( parent ) ) { processDeclaration () . addEs2018Passes ( obj1.props , obj2.props ) ; } }
Code	{ for ( Node iterations : mRules . get ( parent ) ) { processDeclaration () . addEs2018Passes ( obj1.props , obj2.props ) ; } }
Distance : 9

71
Tree	{ for ( Node iterations : moduleSpecifier . get ( parent ) ) { visitForIn () . addEs2018Passes ( obj1.props , obj2.props ) ; } }
Code	{ for ( Node iterations : moduleSpecifier . get ( parent ) ) { visitForIn () . addEs2018Passes ( obj1.props , obj2.props ) ; } }
Distance : 9

72
Tree	{ for ( Node otherLocation : parent.rootNode . get () ) { visitForIn () . addEs2018Passes ( LanguageMode.ECMASCRIPT5 , obj2.props ) ; } }
Code	{ for ( Node otherLocation : parent.rootNode . get () ) { visitForIn () . addEs2018Passes ( LanguageMode.ECMASCRIPT5 , obj2.props ) ; } }
Distance : 12

73
Tree	{ for ( Node definitionRValue : parent.rootNode . get () ) { visitForIn () . addEs2018Passes ( FixedPointGraphTraversal.NON_HALTING_ERROR_MSG , obj2.props ) ; } }
Code	{ for ( Node definitionRValue : parent.rootNode . get () ) { visitForIn () . addEs2018Passes ( FixedPointGraphTraversal.NON_HALTING_ERROR_MSG , obj2.props ) ; } }
Distance : 12

74
Tree	{ for ( Node iterations : exprs . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( Nullability.IMPLICIT , STRING_CONSTANT ) ; } }
Code	{ for ( Node iterations : exprs . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( Nullability.IMPLICIT , STRING_CONSTANT ) ; } }
Distance : 8

75
Tree	{ for ( final Node definitionRValue : parent.rootNode . get () ) { visitForIn ( dollarChildProp , null ) ; } }
Code	{ for ( final Node definitionRValue : parent.rootNode . get () ) { visitForIn ( dollarChildProp , null ) ; } }
Distance : 13

76
Tree	{ for ( Node iterations : exprs . get ( parent ) ) { this . canvas . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Code	{ for ( Node iterations : exprs . get ( parent ) ) { this . canvas . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Distance : 9

77
Tree	{ for ( Node iterations : exprs . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( DiagnosticGroups.UNUSED_LOCAL_VARIABLE , STRING_CONSTANT ) ; } }
Code	{ for ( Node iterations : exprs . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( DiagnosticGroups.UNUSED_LOCAL_VARIABLE , STRING_CONSTANT ) ; } }
Distance : 8

78
Tree	{ for ( final Node definitionRValue : exprs . get ( parent ) ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Code	{ for ( final Node definitionRValue : exprs . get ( parent ) ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Distance : 10

79
Tree	{ for ( final Node iterations : exprs . get ( parent ) ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Code	{ for ( final Node iterations : exprs . get ( parent ) ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Distance : 10

80
Tree	{ for ( Node otherLocation : parent.rootNode . get () ) { this . subtypes . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Code	{ for ( Node otherLocation : parent.rootNode . get () ) { this . subtypes . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Distance : 12

81
Tree	{ for ( Node definitionRValue : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( false ) ; } }
Code	{ for ( Node definitionRValue : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( false ) ; } }
Distance : 12

82
Tree	{ for ( Node iterations : exprs . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( assign.assignNode , STRING_CONSTANT ) ; } }
Code	{ for ( Node iterations : exprs . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( assign.assignNode , STRING_CONSTANT ) ; } }
Distance : 8

83
Tree	{ for ( Node symbolName : parent.rootNode . get () ) { visitForIn () . addEs2018Passes ( LanguageMode.ECMASCRIPT5 , obj2.props ) ; } }
Code	{ for ( Node symbolName : parent.rootNode . get () ) { visitForIn () . addEs2018Passes ( LanguageMode.ECMASCRIPT5 , obj2.props ) ; } }
Distance : 12

84
Tree	{ for ( final Node ise : parent.rootNode . get () ) { this . subtypes . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Code	{ for ( final Node ise : parent.rootNode . get () ) { this . subtypes . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Distance : 13

85
Tree	{ for ( Node iterations : callSite . get ( parent ) ) { this . canvas . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Code	{ for ( Node iterations : callSite . get ( parent ) ) { this . canvas . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Distance : 9

86
Tree	{ for ( Node dollarChildProp : parent.rootNode . get () ) { visitForIn () . addEs2018Passes ( LanguageMode.ECMASCRIPT5 , obj2.props ) ; } }
Code	{ for ( Node dollarChildProp : parent.rootNode . get () ) { visitForIn () . addEs2018Passes ( LanguageMode.ECMASCRIPT5 , obj2.props ) ; } }
Distance : 12

87
Tree	{ for ( Node symbolName : parent.rootNode . get () ) { this . subtypes . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Code	{ for ( Node symbolName : parent.rootNode . get () ) { this . subtypes . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Distance : 12

88
Tree	{ for ( Node iterations : callSite . get ( parent ) ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Code	{ for ( Node iterations : callSite . get ( parent ) ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Distance : 9

89
Tree	{ for ( final Node functionInfo : parent.rootNode . get () ) { this . subtypes . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Code	{ for ( final Node functionInfo : parent.rootNode . get () ) { this . subtypes . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Distance : 13

90
Tree	{ for ( Node iterations : mRules . get ( parent ) ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Code	{ for ( Node iterations : mRules . get ( parent ) ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Distance : 9

91
Tree	{ for ( Node iterations : callSite . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( DiagnosticGroups.UNUSED_LOCAL_VARIABLE , STRING_CONSTANT ) ; } }
Code	{ for ( Node iterations : callSite . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( DiagnosticGroups.UNUSED_LOCAL_VARIABLE , STRING_CONSTANT ) ; } }
Distance : 8

92
Tree	{ for ( Node iterations : exprs . get ( parent ) ) { processDeclaration ( PROPERTY_DECLARER , null ) ; } }
Code	{ for ( Node iterations : exprs . get ( parent ) ) { processDeclaration ( PROPERTY_DECLARER , null ) ; } }
Distance : 9

93
Tree	{ for ( Node iterations : exprs . get ( parent ) ) { moduleRewriter . addEs2018Passes ( false ) ; } }
Code	{ for ( Node iterations : exprs . get ( parent ) ) { moduleRewriter . addEs2018Passes ( false ) ; } }
Distance : 9

94
Tree	{ for ( final Node istex : parent.rootNode . get () ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Code	{ for ( final Node istex : parent.rootNode . get () ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Distance : 13

95
Tree	{ for ( Node ise : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( false ) ; } }
Code	{ for ( Node ise : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( false ) ; } }
Distance : 12

96
Tree	{ for ( Node iterations : parent.rootNode . get () ) { constructorMockableParamsSize . addEs2018Passes ( false ) ; } }
Code	{ for ( Node iterations : parent.rootNode . get () ) { constructorMockableParamsSize . addEs2018Passes ( false ) ; } }
Distance : 12

97
Tree	{ for ( Node iterations : callSite . get ( parent ) ) { moduleRewriter . addEs2018Passes ( false ) ; } }
Code	{ for ( Node iterations : callSite . get ( parent ) ) { moduleRewriter . addEs2018Passes ( false ) ; } }
Distance : 9

98
Tree	{ for ( Node iterations : mRules . get ( parent ) ) { moduleRewriter . addEs2018Passes ( false ) ; } }
Code	{ for ( Node iterations : mRules . get ( parent ) ) { moduleRewriter . addEs2018Passes ( false ) ; } }
Distance : 9

99
Tree	{ for ( Node iterations : moduleSpecifier . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( false ) ; } }
Code	{ for ( Node iterations : moduleSpecifier . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( false ) ; } }
Distance : 9

100
Tree	{ for ( Node iterations : parent.rootNode . get () ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Code	{ for ( Node iterations : parent.rootNode . get () ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Distance : 12

101
Tree	{ for ( Node iterations : exprs . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( false ) ; } }
Code	{ for ( Node iterations : exprs . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( false ) ; } }
Distance : 9

102
Tree	{ for ( Node iterations : moduleSpecifier . get () ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Code	{ for ( Node iterations : moduleSpecifier . get () ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Distance : 12

103
Tree	{ for ( Node otherLocation : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( false ) ; } }
Code	{ for ( Node otherLocation : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( false ) ; } }
Distance : 12

104
Tree	{ for ( Node iterations : renamerStack . get () ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Code	{ for ( Node iterations : renamerStack . get () ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Distance : 12

105
Tree	{ for ( Node iterations : renamerStack . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( false ) ; } }
Code	{ for ( Node iterations : renamerStack . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( false ) ; } }
Distance : 9

106
Tree	{ for ( Node definitionRValue : exprs . get () ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Code	{ for ( Node definitionRValue : exprs . get () ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Distance : 12

107
Tree	{ for ( Node otherLocation : parent.rootNode . get () ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Code	{ for ( Node otherLocation : parent.rootNode . get () ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Distance : 12

108
Tree	{ for ( Node iterations : exprs . get () ) { processDeclaration ( PROPERTY_DECLARER , null ) ; } }
Code	{ for ( Node iterations : exprs . get () ) { processDeclaration ( PROPERTY_DECLARER , null ) ; } }
Distance : 12

109
Tree	{ for ( Node symbolName : parent.rootNode . get () ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Code	{ for ( Node symbolName : parent.rootNode . get () ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Distance : 12

110
Tree	{ for ( Node iterations : exprs . get () ) { visitForIn ( dollarChildProp , null ) ; } }
Code	{ for ( Node iterations : exprs . get () ) { visitForIn ( dollarChildProp , null ) ; } }
Distance : 12

111
Tree	{ for ( Node dollarChildProp : parent.rootNode . get () ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Code	{ for ( Node dollarChildProp : parent.rootNode . get () ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Distance : 12

112
Tree	{ for ( final Node definitionRValue : parent.rootNode . get () ) { this . subtypes . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Code	{ for ( final Node definitionRValue : parent.rootNode . get () ) { this . subtypes . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Distance : 13

113
Tree	{ for ( Node iterations : mRules . get ( parent ) ) { varInfo.propertyAssignmentsWillPreventRemoval . addEs2018Passes ( STRING_CONSTANT + dateTimeField ) ; } }
Code	{ for ( Node iterations : mRules . get ( parent ) ) { varInfo.propertyAssignmentsWillPreventRemoval . addEs2018Passes ( STRING_CONSTANT + dateTimeField ) ; } }
Distance : 9

114
Tree	{ for ( final Node iterations : parent.rootNode . get () ) { this . subtypes . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Code	{ for ( final Node iterations : parent.rootNode . get () ) { this . subtypes . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Distance : 13

115
Tree	{ for ( Node iterations : exprs . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( obj1.props , obj2.props ) ; } }
Code	{ for ( Node iterations : exprs . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( obj1.props , obj2.props ) ; } }
Distance : 8

116
Tree	{ for ( Node iterations : exprs . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( assign.assignNode , null , null ) ; } }
Code	{ for ( Node iterations : exprs . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( assign.assignNode , null , null ) ; } }
Distance : 7

117
Tree	{ for ( Node iterations : exprs . get ( parent ) ) { moduleRewriter . addEs2018Passes ( DiagnosticGroups.UNUSED_LOCAL_VARIABLE , obj2.props ) ; } }
Code	{ for ( Node iterations : exprs . get ( parent ) ) { moduleRewriter . addEs2018Passes ( DiagnosticGroups.UNUSED_LOCAL_VARIABLE , obj2.props ) ; } }
Distance : 8

118
Tree	{ for ( Node iterations : callSite . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( DiagnosticGroups.UNUSED_LOCAL_VARIABLE , null , null ) ; } }
Code	{ for ( Node iterations : callSite . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( DiagnosticGroups.UNUSED_LOCAL_VARIABLE , null , null ) ; } }
Distance : 7

119
Tree	{ for ( Node iterations : parent.rootNode . get () ) { paramNodeMatches . addEs2018Passes ( false ) ; } }
Code	{ for ( Node iterations : parent.rootNode . get () ) { paramNodeMatches . addEs2018Passes ( false ) ; } }
Distance : 12

120
Tree	{ for ( Node iterations : exprs . get () ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Code	{ for ( Node iterations : exprs . get () ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Distance : 12

121
Tree	{ for ( Node iterations : callSite . get () ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Code	{ for ( Node iterations : callSite . get () ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Distance : 12

122
Tree	{ for ( Node iterations : parent.rootNode . get () ) { initializeArrays () . addEs2018Passes ( LanguageMode.ECMASCRIPT5 , obj2.props ) ; } }
Code	{ for ( Node iterations : parent.rootNode . get () ) { initializeArrays () . addEs2018Passes ( LanguageMode.ECMASCRIPT5 , obj2.props ) ; } }
Distance : 12

123
Tree	{ for ( Node iterations : mRules . get () ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Code	{ for ( Node iterations : mRules . get () ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Distance : 12

124
Tree	{ for ( Node iterations : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( nt1.rawType , STRING_CONSTANT ) ; } }
Code	{ for ( Node iterations : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( nt1.rawType , STRING_CONSTANT ) ; } }
Distance : 11

125
Tree	{ for ( Node iterations : exprs . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( obj1.props , null , null ) ; } }
Code	{ for ( Node iterations : exprs . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( obj1.props , null , null ) ; } }
Distance : 7

126
Tree	{ for ( Node iterations : exprs . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( DiagnosticGroups.NEW_CHECK_TYPES_EXTRA_CHECKS , obj2.props ) ; } }
Code	{ for ( Node iterations : exprs . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( DiagnosticGroups.NEW_CHECK_TYPES_EXTRA_CHECKS , obj2.props ) ; } }
Distance : 8

127
Tree	{ for ( Node definitionRValue : parent.rootNode . get () ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Code	{ for ( Node definitionRValue : parent.rootNode . get () ) { visitForIn ( PROPERTY_DECLARER , null ) ; } }
Distance : 12

128
Tree	{ for ( Node iterations : mRules . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( DiagnosticGroups.UNUSED_LOCAL_VARIABLE , obj2.props ) ; } }
Code	{ for ( Node iterations : mRules . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( DiagnosticGroups.UNUSED_LOCAL_VARIABLE , obj2.props ) ; } }
Distance : 8

129
Tree	{ for ( Node iterations : exprs . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( DiagnosticGroups.NEW_CHECK_TYPES_EXTRA_CHECKS , null , null ) ; } }
Code	{ for ( Node iterations : exprs . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( DiagnosticGroups.NEW_CHECK_TYPES_EXTRA_CHECKS , null , null ) ; } }
Distance : 7

130
Tree	{ for ( Node iterations : exprs . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( Nullability.IMPLICIT , obj2.props ) ; } }
Code	{ for ( Node iterations : exprs . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( Nullability.IMPLICIT , obj2.props ) ; } }
Distance : 8

131
Tree	{ for ( Node iterations : parent.rootNode . get () ) { visitForIn ( dollarChildProp , null ) ; } }
Code	{ for ( Node iterations : parent.rootNode . get () ) { visitForIn ( dollarChildProp , null ) ; } }
Distance : 12

132
Tree	{ for ( Node iterations : parent.rootNode . get () ) { initializeArrays ( PROPERTY_DECLARER , null ) ; } }
Code	{ for ( Node iterations : parent.rootNode . get () ) { initializeArrays ( PROPERTY_DECLARER , null ) ; } }
Distance : 12

133
Tree	{ for ( Node iterations : exprs . get ( parent ) ) { moduleRewriter . addEs2018Passes ( DiagnosticGroups.UNUSED_LOCAL_VARIABLE , null , null ) ; } }
Code	{ for ( Node iterations : exprs . get ( parent ) ) { moduleRewriter . addEs2018Passes ( DiagnosticGroups.UNUSED_LOCAL_VARIABLE , null , null ) ; } }
Distance : 7

134
Tree	{ for ( final Node dollarChildProp : exprs . get ( parent ) ) { processDeclaration ( PROPERTY_DECLARER , null ) ; } }
Code	{ for ( final Node dollarChildProp : exprs . get ( parent ) ) { processDeclaration ( PROPERTY_DECLARER , null ) ; } }
Distance : 10

135
Tree	{ for ( Node iterations : callSite . get ( parent ) ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Code	{ for ( Node iterations : callSite . get ( parent ) ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Distance : 11

136
Tree	{ for ( Node iterations : moduleSpecifier . get ( parent ) ) { this . canvas . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Code	{ for ( Node iterations : moduleSpecifier . get ( parent ) ) { this . canvas . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Distance : 9

137
Tree	{ for ( Node iterations : callSite . get ( parent ) ) { processDeclaration () . addEs2018Passes ( obj1.props , obj2.props ) ; } }
Code	{ for ( Node iterations : callSite . get ( parent ) ) { processDeclaration () . addEs2018Passes ( obj1.props , obj2.props ) ; } }
Distance : 9

138
Tree	{ for ( Node iterations : parent.rootNode . get () ) { this . FOR_OF . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Code	{ for ( Node iterations : parent.rootNode . get () ) { this . FOR_OF . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Distance : 12

139
Tree	{ for ( Node iterations : callSite . get ( parent ) ) { visitForIn ( PROPERTY_DECLARER , Branch.ON_FALSE , CONFLICTING_EXTENDED_TYPE ) ; } }
Code	{ for ( Node iterations : callSite . get ( parent ) ) { visitForIn ( PROPERTY_DECLARER , Branch.ON_FALSE , CONFLICTING_EXTENDED_TYPE ) ; } }
Distance : 8

140
Tree	{ for ( Node iterations : exprs . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction ) ; } }
Code	{ for ( Node iterations : exprs . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction ) ; } }
Distance : 11

141
Tree	{ for ( Node iterations : mRules . get ( parent ) ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Code	{ for ( Node iterations : mRules . get ( parent ) ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Distance : 11

142
Tree	{ for ( Node iterations : renamerStack . get ( parent ) ) { this . canvas . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Code	{ for ( Node iterations : renamerStack . get ( parent ) ) { this . canvas . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Distance : 9

143
Tree	{ for ( Node iterations : mRules . get ( parent ) ) { visitForIn ( PROPERTY_DECLARER , Branch.ON_FALSE , CONFLICTING_EXTENDED_TYPE ) ; } }
Code	{ for ( Node iterations : mRules . get ( parent ) ) { visitForIn ( PROPERTY_DECLARER , Branch.ON_FALSE , CONFLICTING_EXTENDED_TYPE ) ; } }
Distance : 8

144
Tree	{ for ( Node iterations : parent.rootNode . get () ) { this . nextTime . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Code	{ for ( Node iterations : parent.rootNode . get () ) { this . nextTime . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Distance : 12

145
Tree	{ for ( Node iterations : callSite . get ( parent ) ) { visitForIn ( PROPERTY_DECLARER , CheckMissingReturn.MISSING_RETURN_STATEMENT , CONFLICTING_EXTENDED_TYPE ) ; } }
Code	{ for ( Node iterations : callSite . get ( parent ) ) { visitForIn ( PROPERTY_DECLARER , CheckMissingReturn.MISSING_RETURN_STATEMENT , CONFLICTING_EXTENDED_TYPE ) ; } }
Distance : 8

146
Tree	{ for ( Node iterations : exprs . get ( parent ) ) { processDeclaration ( PROPERTY_DECLARER , Branch.ON_FALSE , CONFLICTING_EXTENDED_TYPE ) ; } }
Code	{ for ( Node iterations : exprs . get ( parent ) ) { processDeclaration ( PROPERTY_DECLARER , Branch.ON_FALSE , CONFLICTING_EXTENDED_TYPE ) ; } }
Distance : 8

147
Tree	{ for ( Node iterations : moduleSpecifier . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Code	{ for ( Node iterations : moduleSpecifier . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Distance : 11

148
Tree	{ for ( Node definitionRValue : exprs . get ( parent ) ) { this . canvas . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Code	{ for ( Node definitionRValue : exprs . get ( parent ) ) { this . canvas . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Distance : 9

149
Tree	{ for ( Node iterations : mRules . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( DiagnosticGroups.UNUSED_LOCAL_VARIABLE , null , null ) ; } }
Code	{ for ( Node iterations : mRules . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( DiagnosticGroups.UNUSED_LOCAL_VARIABLE , null , null ) ; } }
Distance : 7

150
Tree	{ for ( Node iterations : parent.rootNode . get () ) { visitForIn () . addEs2018Passes ( LanguageMode.ECMASCRIPT5 , obj2.props ) ; } }
Code	{ for ( Node iterations : parent.rootNode . get () ) { visitForIn () . addEs2018Passes ( LanguageMode.ECMASCRIPT5 , obj2.props ) ; } }
Distance : 12

151
Tree	{ for ( Node iterations : exprs . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( Nullability.IMPLICIT , null , null ) ; } }
Code	{ for ( Node iterations : exprs . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( Nullability.IMPLICIT , null , null ) ; } }
Distance : 7

152
Tree	{ for ( Node iterations : exprs . get ( parent ) ) { transpileAndDontCheck () . addEs2018Passes ( obj1.props , obj2.props ) ; } }
Code	{ for ( Node iterations : exprs . get ( parent ) ) { transpileAndDontCheck () . addEs2018Passes ( obj1.props , obj2.props ) ; } }
Distance : 9

153
Tree	{ for ( Node iterations : getPropLhs . get ( parent ) ) { this . canvas . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Code	{ for ( Node iterations : getPropLhs . get ( parent ) ) { this . canvas . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Distance : 9

154
Tree	{ for ( final Node dollarChildProp : parent.rootNode . get () ) { this . subtypes . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Code	{ for ( final Node dollarChildProp : parent.rootNode . get () ) { this . subtypes . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Distance : 13

155
Tree	{ for ( Node definitionRValue : callSite . get ( parent ) ) { this . canvas . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Code	{ for ( Node definitionRValue : callSite . get ( parent ) ) { this . canvas . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Distance : 9

156
Tree	{ for ( Node iterations : parent.rootNode . get () ) { visitForIn () . addEs2018Passes ( FixedPointGraphTraversal.NON_HALTING_ERROR_MSG , obj2.props ) ; } }
Code	{ for ( Node iterations : parent.rootNode . get () ) { visitForIn () . addEs2018Passes ( FixedPointGraphTraversal.NON_HALTING_ERROR_MSG , obj2.props ) ; } }
Distance : 12

157
Tree	{ for ( final Node istex : parent.rootNode . get () ) { this . subtypes . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Code	{ for ( final Node istex : parent.rootNode . get () ) { this . subtypes . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Distance : 13

158
Tree	{ for ( Node iterations : exprs . get ( parent ) ) { visitForIn () . addEs2018Passes ( obj1.props , obj2.props ) ; } }
Code	{ for ( Node iterations : exprs . get ( parent ) ) { visitForIn () . addEs2018Passes ( obj1.props , obj2.props ) ; } }
Distance : 9

159
Tree	{ for ( Node definitionRValue : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Code	{ for ( Node definitionRValue : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Distance : 14

160
Tree	{ for ( Node iterations : mRules . get ( parent ) ) { visitForIn ( PROPERTY_DECLARER , CheckMissingReturn.MISSING_RETURN_STATEMENT , CONFLICTING_EXTENDED_TYPE ) ; } }
Code	{ for ( Node iterations : mRules . get ( parent ) ) { visitForIn ( PROPERTY_DECLARER , CheckMissingReturn.MISSING_RETURN_STATEMENT , CONFLICTING_EXTENDED_TYPE ) ; } }
Distance : 8

161
Tree	{ for ( Node iterations : mRules . get ( parent ) ) { processDeclaration ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node iterations : mRules . get ( parent ) ) { processDeclaration ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

162
Tree	{ for ( Node iterations : exprs . get ( parent ) ) { processDeclaration ( PROPERTY_DECLARER , CheckMissingReturn.MISSING_RETURN_STATEMENT , CONFLICTING_EXTENDED_TYPE ) ; } }
Code	{ for ( Node iterations : exprs . get ( parent ) ) { processDeclaration ( PROPERTY_DECLARER , CheckMissingReturn.MISSING_RETURN_STATEMENT , CONFLICTING_EXTENDED_TYPE ) ; } }
Distance : 8

163
Tree	{ for ( Node iterations : moduleSpecifier . get ( parent ) ) { visitForIn ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node iterations : moduleSpecifier . get ( parent ) ) { visitForIn ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 15

164
Tree	{ for ( Node iterations : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , arindex ) ; } }
Code	{ for ( Node iterations : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , arindex ) ; } }
Distance : 14

165
Tree	{ for ( final Node dollarChildProp : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Code	{ for ( final Node dollarChildProp : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Distance : 15

166
Tree	{ for ( final Node definitionRValue : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction ) ; } }
Code	{ for ( final Node definitionRValue : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction ) ; } }
Distance : 15

167
Tree	{ for ( final Node iterations : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction ) ; } }
Code	{ for ( final Node iterations : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction ) ; } }
Distance : 15

168
Tree	{ for ( Node iterations : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , boxedInfo ) ; } }
Code	{ for ( Node iterations : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , boxedInfo ) ; } }
Distance : 14

169
Tree	{ for ( Node otherLocation : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Code	{ for ( Node otherLocation : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Distance : 14

170
Tree	{ for ( Node iterations : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , related , bazFunction , bazFunction , bazFunction ) ; } }
Code	{ for ( Node iterations : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , related , bazFunction , bazFunction , bazFunction ) ; } }
Distance : 14

171
Tree	{ for ( final Node extendsClause : parent.rootNode . get () ) { this . subtypes . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Code	{ for ( final Node extendsClause : parent.rootNode . get () ) { this . subtypes . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Distance : 13

172
Tree	{ for ( final Node istex : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Code	{ for ( final Node istex : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Distance : 15

173
Tree	{ for ( final Node extendsClause : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Code	{ for ( final Node extendsClause : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Distance : 15

174
Tree	{ for ( final Node dollarChildProp : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction ) ; } }
Code	{ for ( final Node dollarChildProp : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction ) ; } }
Distance : 15

175
Tree	{ for ( Node iterations : exprs . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( DiagnosticGroups.UNUSED_LOCAL_VARIABLE , obj2.props ) ; } }
Code	{ for ( Node iterations : exprs . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( DiagnosticGroups.UNUSED_LOCAL_VARIABLE , obj2.props ) ; } }
Distance : 8

176
Tree	{ for ( Node iterations : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Code	{ for ( Node iterations : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Distance : 14

177
Tree	{ for ( Node symbolName : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Code	{ for ( Node symbolName : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Distance : 14

178
Tree	{ for ( Node iterations : exprs . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Code	{ for ( Node iterations : exprs . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Distance : 11

179
Tree	{ for ( Node iterations : callSite . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Code	{ for ( Node iterations : callSite . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Distance : 11

180
Tree	{ for ( Node iterations : exprs . get ( parent ) ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Code	{ for ( Node iterations : exprs . get ( parent ) ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Distance : 11

181
Tree	{ for ( Node iterations : callSite . get ( parent ) ) { visitForIn () . addEs2018Passes ( obj1.props , obj2.props ) ; } }
Code	{ for ( Node iterations : callSite . get ( parent ) ) { visitForIn () . addEs2018Passes ( obj1.props , obj2.props ) ; } }
Distance : 9

182
Tree	{ for ( Node iterations : exprs . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( assign.assignNode , obj2.props ) ; } }
Code	{ for ( Node iterations : exprs . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( assign.assignNode , obj2.props ) ; } }
Distance : 8

183
Tree	{ for ( Node iterations : mRules . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Code	{ for ( Node iterations : mRules . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Distance : 11

184
Tree	{ for ( Node iterations : exprs . get ( parent ) ) { visitForIn ( PROPERTY_DECLARER , Branch.ON_FALSE , CONFLICTING_EXTENDED_TYPE ) ; } }
Code	{ for ( Node iterations : exprs . get ( parent ) ) { visitForIn ( PROPERTY_DECLARER , Branch.ON_FALSE , CONFLICTING_EXTENDED_TYPE ) ; } }
Distance : 8

185
Tree	{ for ( Node iterations : renamerStack . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Code	{ for ( Node iterations : renamerStack . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Distance : 14

186
Tree	{ for ( Node iterations : callSite . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction ) ; } }
Code	{ for ( Node iterations : callSite . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction ) ; } }
Distance : 14

187
Tree	{ for ( Node iterations : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction ) ; } }
Code	{ for ( Node iterations : parent.rootNode . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction ) ; } }
Distance : 14

188
Tree	{ for ( final Node definitionRValue : exprs . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Code	{ for ( final Node definitionRValue : exprs . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Distance : 12

189
Tree	{ for ( Node iterations : mRules . get ( parent ) ) { visitForIn () . addEs2018Passes ( obj1.props , obj2.props ) ; } }
Code	{ for ( Node iterations : mRules . get ( parent ) ) { visitForIn () . addEs2018Passes ( obj1.props , obj2.props ) ; } }
Distance : 9

190
Tree	{ for ( Node iterations : exprs . get ( parent ) ) { processDeclaration () . addEs2018Passes ( obj1.props , obj2.props ) ; } }
Code	{ for ( Node iterations : exprs . get ( parent ) ) { processDeclaration () . addEs2018Passes ( obj1.props , obj2.props ) ; } }
Distance : 9

191
Tree	{ for ( Node iterations : parent.rootNode . get () ) { visitForIn ( dollarChildProp , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node iterations : parent.rootNode . get () ) { visitForIn ( dollarChildProp , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 17

192
Tree	{ for ( Node definitionRValue : parent.rootNode . get () ) { visitForIn () . addEs2018Passes ( LanguageMode.ECMASCRIPT5 , obj2.props ) ; } }
Code	{ for ( Node definitionRValue : parent.rootNode . get () ) { visitForIn () . addEs2018Passes ( LanguageMode.ECMASCRIPT5 , obj2.props ) ; } }
Distance : 12

193
Tree	{ for ( Node iterations : exprs . get ( parent ) ) { visitForIn ( PROPERTY_DECLARER , CheckMissingReturn.MISSING_RETURN_STATEMENT , CONFLICTING_EXTENDED_TYPE ) ; } }
Code	{ for ( Node iterations : exprs . get ( parent ) ) { visitForIn ( PROPERTY_DECLARER , CheckMissingReturn.MISSING_RETURN_STATEMENT , CONFLICTING_EXTENDED_TYPE ) ; } }
Distance : 8

194
Tree	{ for ( Node definitionRValue : exprs . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Code	{ for ( Node definitionRValue : exprs . get () ) { moduleRewriter . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Distance : 14

195
Tree	{ for ( Node iterations : parent.rootNode . get () ) { initializeArrays ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node iterations : parent.rootNode . get () ) { initializeArrays ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 17

196
Tree	{ for ( final Node iterations : exprs . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Code	{ for ( final Node iterations : exprs . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , bazFunction ) ; } }
Distance : 12

197
Tree	{ for ( final Node symbolName : parent.rootNode . get () ) { this . subtypes . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Code	{ for ( final Node symbolName : parent.rootNode . get () ) { this . subtypes . addEs2018Passes ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE ) ; } }
Distance : 13

198
Tree	{ for ( Node iterations : parent.rootNode . get () ) { visitForIn ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , arindex , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Code	{ for ( Node iterations : parent.rootNode . get () ) { visitForIn ( PROPERTY_DECLARER , CONFLICTING_EXTENDED_TYPE , bazFunction , bazFunction , arindex , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } }
Distance : 17

199
Tree	{ for ( Node iterations : callSite . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( DiagnosticGroups.UNUSED_LOCAL_VARIABLE , obj2.props ) ; } }
Code	{ for ( Node iterations : callSite . get ( parent ) ) { constructorMockableParamsSize . addEs2018Passes ( DiagnosticGroups.UNUSED_LOCAL_VARIABLE , obj2.props ) ; } }
Distance : 8

========================================================================


========================================================================
Example Number: 31
Parent Code is: 
{ if ( recurse ) { return allResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
-------------------------------------------------------------------------------
Child code is: 
{ if ( recurse ) { return anyResultsMatch ( n , MAY_BE_STRING_PREDICATE ) ; } else { return mayBeStringHelper ( n ) ; } }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (800{val=recurse}) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=allResultsMatch}) (214{val=(}) (800{val=n}) (234{val=,}) (800{val=MAY_BE_STRING_PREDICATE}) (215{val=)})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=mayBeStringHelper}) (214{val=(}) (800{val=n}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (800{val=recurse}) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=anyResultsMatch}) (214{val=(}) (800{val=n}) (234{val=,}) (800{val=MAY_BE_STRING_PREDICATE}) (215{val=)})) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=mayBeStringHelper}) (214{val=(}) (800{val=n}) (215{val=)})) (227{val=;})) (219{val=}}))) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/10/parent/src_com_google_javascript_jscomp_NodeUtil.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ if ( iterations ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n , requirement_ ) ; } }
Code	{ if ( iterations ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n , requirement_ ) ; } }
Distance : 9

1
Tree	{ if ( symbolName ) { return primitiveWrapperOf ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n , requirement_ ) ; } }
Code	{ if ( symbolName ) { return primitiveWrapperOf ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n , requirement_ ) ; } }
Distance : 9

2
Tree	{ if ( multiplicand ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n , requirement_ ) ; } }
Code	{ if ( multiplicand ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n , requirement_ ) ; } }
Distance : 9

3
Tree	{ if ( multiplicand ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return filterNoResolvedType ( n , copySelf () ) ; } }
Code	{ if ( multiplicand ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return filterNoResolvedType ( n , copySelf () ) ; } }
Distance : 8

4
Tree	{ if ( multiplicand ) { return primitiveWrapperOf ( n , requirement_ ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand ) { return primitiveWrapperOf ( n , requirement_ ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Distance : 6

5
Tree	{ if ( multiplicand ) { return primitiveWrapperOf ( n ) ; } else { return validateObjectPattern () . validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand ) { return primitiveWrapperOf ( n ) ; } else { return validateObjectPattern () . validateObjectPattern ( n ) ; } }
Distance : 8

6
Tree	{ if ( iterations ) { return primitiveWrapperOf ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n , requirement_ ) ; } }
Code	{ if ( iterations ) { return primitiveWrapperOf ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n , requirement_ ) ; } }
Distance : 9

7
Tree	{ if ( iterations ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return validateObjectPattern ( n , copySelf () ) ; } }
Code	{ if ( iterations ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return validateObjectPattern ( n , copySelf () ) ; } }
Distance : 8

8
Tree	{ if ( multiplicand ) { return primitiveWrapperOf ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n , requirement_ ) ; } }
Code	{ if ( multiplicand ) { return primitiveWrapperOf ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n , requirement_ ) ; } }
Distance : 9

9
Tree	{ if ( multiplicand ) { return primitiveWrapperOf ( n ) ; } else { return validateObjectPattern ( n , copySelf () ) ; } }
Code	{ if ( multiplicand ) { return primitiveWrapperOf ( n ) ; } else { return validateObjectPattern ( n , copySelf () ) ; } }
Distance : 8

10
Tree	{ if ( multiplicand ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n , requirement_ ) ; } }
Code	{ if ( multiplicand ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n , requirement_ ) ; } }
Distance : 9

11
Tree	{ if ( iterations ) { return primitiveWrapperOf ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n , requirement_ ) ; } }
Code	{ if ( iterations ) { return primitiveWrapperOf ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n , requirement_ ) ; } }
Distance : 9

12
Tree	{ if ( multiplicand ) { return primitiveWrapperOf ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n , requirement_ ) ; } }
Code	{ if ( multiplicand ) { return primitiveWrapperOf ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n , requirement_ ) ; } }
Distance : 9

13
Tree	{ if ( multiplicand ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return validateObjectPattern ( n , copySelf () ) ; } }
Code	{ if ( multiplicand ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return validateObjectPattern ( n , copySelf () ) ; } }
Distance : 8

14
Tree	{ if ( multiplicand ) { return JAVA_1_8 . nextCauchy ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . nextCauchy ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Distance : 9

15
Tree	{ if ( multiplicand ) { return JAVA_1_8 . enumLiteralHasKey ( n ) ; } else { return filterNoResolvedType ( n ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . enumLiteralHasKey ( n ) ; } else { return filterNoResolvedType ( n ) ; } }
Distance : 7

16
Tree	{ if ( multiplicand ) { return JAVA_1_8 . nextCauchy ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . nextCauchy ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Distance : 9

17
Tree	{ if ( iterations ) { return JAVA_1_8 . parseInto ( n ) ; } else { return filterNoResolvedType ( n ) ; } }
Code	{ if ( iterations ) { return JAVA_1_8 . parseInto ( n ) ; } else { return filterNoResolvedType ( n ) ; } }
Distance : 7

18
Tree	{ if ( multiplicand ) { return primitiveWrapperOf ( n ) ; } else { return filterNoResolvedType ( n , copySelf () ) ; } }
Code	{ if ( multiplicand ) { return primitiveWrapperOf ( n ) ; } else { return filterNoResolvedType ( n , copySelf () ) ; } }
Distance : 8

19
Tree	{ if ( multiplicand ) { return JAVA_1_8 . enumLiteralHasKey ( n ) ; } else { return validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . enumLiteralHasKey ( n ) ; } else { return validateObjectPattern ( n ) ; } }
Distance : 7

20
Tree	{ if ( iterations ) { return primitiveWrapperOf ( n ) ; } else { return validateObjectPattern ( n , copySelf () ) ; } }
Code	{ if ( iterations ) { return primitiveWrapperOf ( n ) ; } else { return validateObjectPattern ( n , copySelf () ) ; } }
Distance : 8

21
Tree	{ if ( iterations ) { return JAVA_1_8 . parseInto ( n ) ; } else { return validateObjectPattern ( n ) ; } }
Code	{ if ( iterations ) { return JAVA_1_8 . parseInto ( n ) ; } else { return validateObjectPattern ( n ) ; } }
Distance : 7

22
Tree	{ if ( multiplicand ) { return JAVA_1_8 . nextCauchy ( n ) ; } else { return filterNoResolvedType ( n ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . nextCauchy ( n ) ; } else { return filterNoResolvedType ( n ) ; } }
Distance : 7

23
Tree	{ if ( multiplicand ) { return primitiveWrapperOf ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Code	{ if ( multiplicand ) { return primitiveWrapperOf ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Distance : 7

24
Tree	{ if ( multiplicand ) { return JAVA_1_8 . nextCauchy ( n ) ; } else { return validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . nextCauchy ( n ) ; } else { return validateObjectPattern ( n ) ; } }
Distance : 7

25
Tree	{ if ( multiplicand ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Code	{ if ( multiplicand ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Distance : 7

26
Tree	{ if ( iterations ) { return primitiveWrapperOf ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Code	{ if ( iterations ) { return primitiveWrapperOf ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Distance : 7

27
Tree	{ if ( multiplicand ) { return primitiveWrapperOf ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand ) { return primitiveWrapperOf ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Distance : 7

28
Tree	{ if ( iterations ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Code	{ if ( iterations ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Distance : 7

29
Tree	{ if ( multiplicand . copySelf ( n ) ) { return filterNoResolvedType ( n ) ; } else else }
Code	{ if ( multiplicand . copySelf ( n ) ) { return filterNoResolvedType ( n ) ; } else else }
Distance : 13

30
Tree	{ if ( multiplicand ) { return JAVA_1_8 . nextCauchy ( n ) ; } else { return validateObjectPattern () . validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . nextCauchy ( n ) ; } else { return validateObjectPattern () . validateObjectPattern ( n ) ; } }
Distance : 10

31
Tree	{ if ( iterations . copySelf ( n ) ) { return filterNoResolvedType ( n ) ; } else else }
Code	{ if ( iterations . copySelf ( n ) ) { return filterNoResolvedType ( n ) ; } else else }
Distance : 13

32
Tree	{ if ( multiplicand ) { return primitiveWrapperOf ( n ) ; } else { return validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand ) { return primitiveWrapperOf ( n ) ; } else { return validateObjectPattern ( n ) ; } }
Distance : 5

33
Tree	{ if ( multiplicand ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Distance : 7

34
Tree	{ if ( multiplicand ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) . validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) . validateObjectPattern ( n ) ; } }
Distance : 12

35
Tree	{ if ( symbolName ) { return primitiveWrapperOf ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Code	{ if ( symbolName ) { return primitiveWrapperOf ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Distance : 7

36
Tree	{ if ( iterations ) { return primitiveWrapperOf ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) . validateObjectPattern ( n ) ; } }
Code	{ if ( iterations ) { return primitiveWrapperOf ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) . validateObjectPattern ( n ) ; } }
Distance : 12

37
Tree	{ if ( multiplicand ) { return primitiveWrapperOf ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) . validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand ) { return primitiveWrapperOf ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) . validateObjectPattern ( n ) ; } }
Distance : 12

38
Tree	{ if ( iterations ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) . validateObjectPattern ( n ) ; } }
Code	{ if ( iterations ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) . validateObjectPattern ( n ) ; } }
Distance : 12

39
Tree	{ if ( multiplicand ) { return this . n . potentialStubbingProblem ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand ) { return this . n . potentialStubbingProblem ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Distance : 10

40
Tree	{ if ( multiplicand . isAliasDefinition ( n ) ) { return filterNoResolvedType ( n ) ; } else else }
Code	{ if ( multiplicand . isAliasDefinition ( n ) ) { return filterNoResolvedType ( n ) ; } else else }
Distance : 13

41
Tree	{ if ( iterations ) { return primitiveWrapperOf ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Code	{ if ( iterations ) { return primitiveWrapperOf ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Distance : 7

42
Tree	{ if ( multiplicand ) { return primitiveWrapperOf ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Code	{ if ( multiplicand ) { return primitiveWrapperOf ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Distance : 9

43
Tree	{ if ( symbolName . copySelf ( n ) ) { return filterNoResolvedType ( n ) ; } else else }
Code	{ if ( symbolName . copySelf ( n ) ) { return filterNoResolvedType ( n ) ; } else else }
Distance : 13

44
Tree	{ if ( iterations ) { return this . n . unescape ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Code	{ if ( iterations ) { return this . n . unescape ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Distance : 10

45
Tree	{ if ( multiplicand ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return validateObjectPattern ( n ) ; } }
Distance : 5

46
Tree	{ if ( multiplicand ) { return primitiveWrapperOf ( n ) ; } else { return filterNoResolvedType ( n ) ; } }
Code	{ if ( multiplicand ) { return primitiveWrapperOf ( n ) ; } else { return filterNoResolvedType ( n ) ; } }
Distance : 5

47
Tree	{ if ( iterations ) { return this . n . potentialStubbingProblem ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Code	{ if ( iterations ) { return this . n . potentialStubbingProblem ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Distance : 10

48
Tree	{ if ( multiplicand ) { return this . n . unescape ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Code	{ if ( multiplicand ) { return this . n . unescape ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Distance : 10

49
Tree	{ if ( symbolName ) { return primitiveWrapperOf ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) . validateObjectPattern ( n ) ; } }
Code	{ if ( symbolName ) { return primitiveWrapperOf ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) . validateObjectPattern ( n ) ; } }
Distance : 12

50
Tree	{ if ( multiplicand ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) . validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) . validateObjectPattern ( n ) ; } }
Distance : 12

51
Tree	{ if ( iterations ) { return primitiveWrapperOf ( n ) ; } else { return validateObjectPattern ( n ) ; } }
Code	{ if ( iterations ) { return primitiveWrapperOf ( n ) ; } else { return validateObjectPattern ( n ) ; } }
Distance : 5

52
Tree	{ if ( multiplicand ) { return primitiveWrapperOf ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n , that.obj ) ; } }
Code	{ if ( multiplicand ) { return primitiveWrapperOf ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n , that.obj ) ; } }
Distance : 9

53
Tree	{ if ( iterations ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Code	{ if ( iterations ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Distance : 9

54
Tree	{ if ( symbolName ) { return primitiveWrapperOf ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Code	{ if ( symbolName ) { return primitiveWrapperOf ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Distance : 9

55
Tree	{ if ( multiplicand ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Code	{ if ( multiplicand ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Distance : 9

56
Tree	{ if ( multiplicand . createLong ( getLValue ( n ) ) ) { return filterNoResolvedType ( n ) ; } else else }
Code	{ if ( multiplicand . createLong ( getLValue ( n ) ) ) { return filterNoResolvedType ( n ) ; } else else }
Distance : 13

57
Tree	{ if ( multiplicand . createLong ( getLValue ( n ) ) ) { return filterNoResolvedType ( n ) ; } else else }
Code	{ if ( multiplicand . createLong ( getLValue ( n ) ) ) { return filterNoResolvedType ( n ) ; } else else }
Distance : 13

58
Tree	{ if ( iterations . isAliasDefinition ( getLValue ( n ) ) ) { return filterNoResolvedType ( n ) ; } else else }
Code	{ if ( iterations . isAliasDefinition ( getLValue ( n ) ) ) { return filterNoResolvedType ( n ) ; } else else }
Distance : 13

59
Tree	{ if ( multiplicand ) { return primitiveWrapperOf ( n ) ; } else { return validateObjectPattern ( n , requirement_ ) ; } }
Code	{ if ( multiplicand ) { return primitiveWrapperOf ( n ) ; } else { return validateObjectPattern ( n , requirement_ ) ; } }
Distance : 7

60
Tree	{ if ( iterations . isAliasDefinition ( getLValue ( n ) ) ) { return filterNoResolvedType ( n ) ; } else else }
Code	{ if ( iterations . isAliasDefinition ( getLValue ( n ) ) ) { return filterNoResolvedType ( n ) ; } else else }
Distance : 13

61
Tree	{ if ( iterations . createLong ( getLValue ( n ) ) ) { return filterNoResolvedType ( n ) ; } else else }
Code	{ if ( iterations . createLong ( getLValue ( n ) ) ) { return filterNoResolvedType ( n ) ; } else else }
Distance : 13

62
Tree	{ if ( iterations . createLong ( getLValue ( n ) ) ) { return filterNoResolvedType ( n ) ; } else else }
Code	{ if ( iterations . createLong ( getLValue ( n ) ) ) { return filterNoResolvedType ( n ) ; } else else }
Distance : 13

63
Tree	{ if ( multiplicand ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return validateObjectPattern ( n , requirement_ ) ; } }
Code	{ if ( multiplicand ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return validateObjectPattern ( n , requirement_ ) ; } }
Distance : 7

64
Tree	{ if ( symbolName ) { return primitiveWrapperOf ( n , requirement_ ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Code	{ if ( symbolName ) { return primitiveWrapperOf ( n , requirement_ ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Distance : 6

65
Tree	{ if ( symbolName ) { return primitiveWrapperOf ( n ) ; } else { return validateObjectPattern () . validateObjectPattern ( n ) ; } }
Code	{ if ( symbolName ) { return primitiveWrapperOf ( n ) ; } else { return validateObjectPattern () . validateObjectPattern ( n ) ; } }
Distance : 8

66
Tree	{ if ( multiplicand . isAliasDefinition ( getLValue ( n ) ) ) { return JAVA_1_8 . validateObjectPattern ( n ) ; } else else }
Code	{ if ( multiplicand . isAliasDefinition ( getLValue ( n ) ) ) { return JAVA_1_8 . validateObjectPattern ( n ) ; } else else }
Distance : 15

67
Tree	{ if ( symbolName . copySelf ( getLValue ( n ) ) ) { return JAVA_1_8 . validateObjectPattern ( n ) ; } else else }
Code	{ if ( symbolName . copySelf ( getLValue ( n ) ) ) { return JAVA_1_8 . validateObjectPattern ( n ) ; } else else }
Distance : 15

68
Tree	{ if ( iterations ) { return primitiveWrapperOf ( n ) ; } else { return filterNoResolvedType ( n , copySelf () ) ; } }
Code	{ if ( iterations ) { return primitiveWrapperOf ( n ) ; } else { return filterNoResolvedType ( n , copySelf () ) ; } }
Distance : 8

69
Tree	{ if ( symbolName ) { return primitiveWrapperOf ( n ) ; } else { return validateObjectPattern ( n , copySelf () ) ; } }
Code	{ if ( symbolName ) { return primitiveWrapperOf ( n ) ; } else { return validateObjectPattern ( n , copySelf () ) ; } }
Distance : 8

70
Tree	{ if ( multiplicand . copySelf ( getLValue ( n ) ) ) { return JAVA_1_8 . validateObjectPattern ( n ) ; } else else }
Code	{ if ( multiplicand . copySelf ( getLValue ( n ) ) ) { return JAVA_1_8 . validateObjectPattern ( n ) ; } else else }
Distance : 15

71
Tree	{ if ( multiplicand . createLong ( getLValue ( n ) ) ) { return JAVA_1_8 . validateObjectPattern ( n ) ; } else else }
Code	{ if ( multiplicand . createLong ( getLValue ( n ) ) ) { return JAVA_1_8 . validateObjectPattern ( n ) ; } else else }
Distance : 15

72
Tree	{ if ( multiplicand ) { return primitiveWrapperOf ( n , requirement_ ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Code	{ if ( multiplicand ) { return primitiveWrapperOf ( n , requirement_ ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Distance : 6

73
Tree	{ if ( iterations . isAliasDefinition ( getLValue ( n ) ) ) { return JAVA_1_8 . validateObjectPattern ( n ) ; } else else }
Code	{ if ( iterations . isAliasDefinition ( getLValue ( n ) ) ) { return JAVA_1_8 . validateObjectPattern ( n ) ; } else else }
Distance : 15

74
Tree	{ if ( multiplicand ) { return JAVA_1_8 . parseInto ( n ) ; } else { return filterNoResolvedType () . validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . parseInto ( n ) ; } else { return filterNoResolvedType () . validateObjectPattern ( n ) ; } }
Distance : 10

75
Tree	{ if ( multiplicand ) { return completeAssignmentExpressionParseAtArrow ( n , requirement_ ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand ) { return completeAssignmentExpressionParseAtArrow ( n , requirement_ ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Distance : 6

76
Tree	{ if ( multiplicand ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return validateObjectPattern () . validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return validateObjectPattern () . validateObjectPattern ( n ) ; } }
Distance : 8

77
Tree	{ if ( multiplicand ) { return primitiveWrapperOf ( n ) ; } else { return filterNoResolvedType () . validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand ) { return primitiveWrapperOf ( n ) ; } else { return filterNoResolvedType () . validateObjectPattern ( n ) ; } }
Distance : 8

78
Tree	{ if ( multiplicand ) { return JAVA_1_8 . parseInto ( n ) ; } else { return validateObjectPattern () . validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . parseInto ( n ) ; } else { return validateObjectPattern () . validateObjectPattern ( n ) ; } }
Distance : 10

79
Tree	{ if ( iterations ) { return primitiveWrapperOf ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) . validateObjectPattern ( n ) ; } }
Code	{ if ( iterations ) { return primitiveWrapperOf ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) . validateObjectPattern ( n ) ; } }
Distance : 12

80
Tree	{ if ( multiplicand ) { return primitiveWrapperOf ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Code	{ if ( multiplicand ) { return primitiveWrapperOf ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Distance : 9

81
Tree	{ if ( iterations ) { return this . n . potentialStubbingProblem ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Code	{ if ( iterations ) { return this . n . potentialStubbingProblem ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Distance : 10

82
Tree	{ if ( iterations ) { return primitiveWrapperOf ( n , requirement_ ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Code	{ if ( iterations ) { return primitiveWrapperOf ( n , requirement_ ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Distance : 6

83
Tree	{ if ( multiplicand ) { return this . n . unescape ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand ) { return this . n . unescape ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Distance : 10

84
Tree	{ if ( multiplicand ) { return this . n . potentialStubbingProblem ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Code	{ if ( multiplicand ) { return this . n . potentialStubbingProblem ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Distance : 10

85
Tree	{ if ( multiplicand ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Code	{ if ( multiplicand ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Distance : 9

86
Tree	{ if ( iterations ) { return primitiveWrapperOf ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Code	{ if ( iterations ) { return primitiveWrapperOf ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Distance : 9

87
Tree	{ if ( multiplicand ) { return JAVA_1_8 . parseInto ( n , requirement_ ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . parseInto ( n , requirement_ ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Distance : 8

88
Tree	{ if ( multiplicand ) { return JAVA_1_8 . parseInto ( n , requirement_ ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . parseInto ( n , requirement_ ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Distance : 8

89
Tree	{ if ( multiplicand ) { return JAVA_1_8 . enumLiteralHasKey ( n , requirement_ ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . enumLiteralHasKey ( n , requirement_ ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Distance : 8

90
Tree	{ if ( iterations ) { return JAVA_1_8 . parseInto ( n , requirement_ ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Code	{ if ( iterations ) { return JAVA_1_8 . parseInto ( n , requirement_ ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Distance : 8

91
Tree	{ if ( multiplicand == null ) { return JAVA_1_8 . enumLiteralHasKey ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand == null ) { return JAVA_1_8 . enumLiteralHasKey ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Distance : 11

92
Tree	{ if ( multiplicand ) { return JAVA_1_8 . parseInto ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) . validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . parseInto ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) . validateObjectPattern ( n ) ; } }
Distance : 14

93
Tree	{ if ( symbolName ) { return this . n . potentialStubbingProblem ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Code	{ if ( symbolName ) { return this . n . potentialStubbingProblem ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Distance : 10

94
Tree	{ if ( multiplicand ) { return JAVA_1_8 . parseInto ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . parseInto ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Distance : 9

95
Tree	{ if ( multiplicand ) { return JAVA_1_8 . parseInto ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . parseInto ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Distance : 9

96
Tree	{ if ( multiplicand ) { return JAVA_1_8 . parseInto ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) . validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . parseInto ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) . validateObjectPattern ( n ) ; } }
Distance : 14

97
Tree	{ if ( multiplicand ) { return JAVA_1_8 . nextCauchy ( n , requirement_ ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . nextCauchy ( n , requirement_ ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Distance : 8

98
Tree	{ if ( multiplicand ) { return JAVA_1_8 . parseInto ( n ) ; } else { return filterNoResolvedType ( n ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . parseInto ( n ) ; } else { return filterNoResolvedType ( n ) ; } }
Distance : 7

99
Tree	{ if ( multiplicand ) { return JAVA_1_8 . parseInto ( n ) ; } else { return validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . parseInto ( n ) ; } else { return validateObjectPattern ( n ) ; } }
Distance : 7

100
Tree	{ if ( multiplicand ) { return JAVA_1_8 . enumLiteralHasKey ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . enumLiteralHasKey ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Distance : 9

101
Tree	{ if ( iterations ) { return JAVA_1_8 . parseInto ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Code	{ if ( iterations ) { return JAVA_1_8 . parseInto ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Distance : 9

102
Tree	{ if ( iterations ) { return primitiveWrapperOf ( n ) ; } else { return validateObjectPattern () . validateObjectPattern ( n ) ; } }
Code	{ if ( iterations ) { return primitiveWrapperOf ( n ) ; } else { return validateObjectPattern () . validateObjectPattern ( n ) ; } }
Distance : 8

103
Tree	{ if ( multiplicand ) { return JAVA_1_8 . enumLiteralHasKey ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) . validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . enumLiteralHasKey ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) . validateObjectPattern ( n ) ; } }
Distance : 14

104
Tree	{ if ( iterations . copySelf ( getLValue ( n ) ) ) { return JAVA_1_8 . validateObjectPattern ( n ) ; } else else }
Code	{ if ( iterations . copySelf ( getLValue ( n ) ) ) { return JAVA_1_8 . validateObjectPattern ( n ) ; } else else }
Distance : 15

105
Tree	{ if ( multiplicand ) { return completeAssignmentExpressionParseAtArrow ( n , requirement_ ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Code	{ if ( multiplicand ) { return completeAssignmentExpressionParseAtArrow ( n , requirement_ ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Distance : 6

106
Tree	{ if ( iterations ) { return JAVA_1_8 . parseInto ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) . validateObjectPattern ( n ) ; } }
Code	{ if ( iterations ) { return JAVA_1_8 . parseInto ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) . validateObjectPattern ( n ) ; } }
Distance : 14

107
Tree	{ if ( multiplicand ) { return JAVA_1_8 . enumLiteralHasKey ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) . validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . enumLiteralHasKey ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) . validateObjectPattern ( n ) ; } }
Distance : 14

108
Tree	{ if ( multiplicand ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return filterNoResolvedType () . validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return filterNoResolvedType () . validateObjectPattern ( n ) ; } }
Distance : 8

109
Tree	{ if ( iterations ) { return JAVA_1_8 . parseInto ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) . validateObjectPattern ( n ) ; } }
Code	{ if ( iterations ) { return JAVA_1_8 . parseInto ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) . validateObjectPattern ( n ) ; } }
Distance : 14

110
Tree	{ if ( multiplicand ) { return JAVA_1_8 . enumLiteralHasKey ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . enumLiteralHasKey ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Distance : 9

111
Tree	{ if ( iterations ) { return primitiveWrapperOf ( n , requirement_ ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Code	{ if ( iterations ) { return primitiveWrapperOf ( n , requirement_ ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Distance : 6

112
Tree	{ if ( multiplicand != null ) { return JAVA_1_8 . createLong ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Code	{ if ( multiplicand != null ) { return JAVA_1_8 . createLong ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Distance : 11

113
Tree	{ if ( iterations ) { return completeAssignmentExpressionParseAtArrow ( n , requirement_ ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Code	{ if ( iterations ) { return completeAssignmentExpressionParseAtArrow ( n , requirement_ ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Distance : 6

114
Tree	{ if ( iterations ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return validateObjectPattern () . validateObjectPattern ( n ) ; } }
Code	{ if ( iterations ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return validateObjectPattern () . validateObjectPattern ( n ) ; } }
Distance : 8

115
Tree	{ if ( multiplicand ) { return JAVA_1_8 . nextCauchy ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) . validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . nextCauchy ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) . validateObjectPattern ( n ) ; } }
Distance : 14

116
Tree	{ if ( multiplicand != null ) { return JAVA_1_8 . enumLiteralHasKey ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand != null ) { return JAVA_1_8 . enumLiteralHasKey ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Distance : 11

117
Tree	{ if ( iterations ) { return JAVA_1_8 . parseInto ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Code	{ if ( iterations ) { return JAVA_1_8 . parseInto ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Distance : 9

118
Tree	{ if ( multiplicand . createLong ( n ) ) { return filterNoResolvedType ( n ) ; } else else }
Code	{ if ( multiplicand . createLong ( n ) ) { return filterNoResolvedType ( n ) ; } else else }
Distance : 13

119
Tree	{ if ( iterations . isAliasDefinition ( n ) ) { return filterNoResolvedType ( n ) ; } else else }
Code	{ if ( iterations . isAliasDefinition ( n ) ) { return filterNoResolvedType ( n ) ; } else else }
Distance : 13

120
Tree	{ if ( multiplicand ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return filterNoResolvedType ( n ) ; } }
Code	{ if ( multiplicand ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return filterNoResolvedType ( n ) ; } }
Distance : 5

121
Tree	{ if ( iterations == null ) { return JAVA_1_8 . enumLiteralHasKey ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Code	{ if ( iterations == null ) { return JAVA_1_8 . enumLiteralHasKey ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Distance : 11

122
Tree	{ if ( iterations ) { return primitiveWrapperOf ( n ) ; } else { return filterNoResolvedType () . validateObjectPattern ( n ) ; } }
Code	{ if ( iterations ) { return primitiveWrapperOf ( n ) ; } else { return filterNoResolvedType () . validateObjectPattern ( n ) ; } }
Distance : 8

123
Tree	{ if ( iterations == null ) { return JAVA_1_8 . createLong ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Code	{ if ( iterations == null ) { return JAVA_1_8 . createLong ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Distance : 11

124
Tree	{ if ( iterations ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return validateObjectPattern ( n ) ; } }
Code	{ if ( iterations ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return validateObjectPattern ( n ) ; } }
Distance : 5

125
Tree	{ if ( multiplicand ) { return JAVA_1_8 . nextCauchy ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) . validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . nextCauchy ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) . validateObjectPattern ( n ) ; } }
Distance : 14

126
Tree	{ if ( multiplicand == null ) { return JAVA_1_8 . nextCauchy ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand == null ) { return JAVA_1_8 . nextCauchy ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Distance : 11

127
Tree	{ if ( multiplicand != null ) { return JAVA_1_8 . parseInto ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand != null ) { return JAVA_1_8 . parseInto ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Distance : 11

128
Tree	{ if ( iterations ) { return primitiveWrapperOf ( n ) ; } else { return filterNoResolvedType ( n ) ; } }
Code	{ if ( iterations ) { return primitiveWrapperOf ( n ) ; } else { return filterNoResolvedType ( n ) ; } }
Distance : 5

129
Tree	{ if ( symbolName ) { return primitiveWrapperOf ( n ) ; } else { return validateObjectPattern ( n ) ; } }
Code	{ if ( symbolName ) { return primitiveWrapperOf ( n ) ; } else { return validateObjectPattern ( n ) ; } }
Distance : 5

130
Tree	{ if ( iterations . createLong ( n ) ) { return filterNoResolvedType ( n ) ; } else else }
Code	{ if ( iterations . createLong ( n ) ) { return filterNoResolvedType ( n ) ; } else else }
Distance : 13

131
Tree	{ if ( multiplicand != null ) { return JAVA_1_8 . enumLiteralHasKey ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Code	{ if ( multiplicand != null ) { return JAVA_1_8 . enumLiteralHasKey ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Distance : 11

132
Tree	{ if ( multiplicand != null ) { return JAVA_1_8 . parseInto ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Code	{ if ( multiplicand != null ) { return JAVA_1_8 . parseInto ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Distance : 11

133
Tree	{ if ( iterations != null ) { return JAVA_1_8 . createLong ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Code	{ if ( iterations != null ) { return JAVA_1_8 . createLong ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Distance : 11

134
Tree	{ if ( symbolName . isAliasDefinition ( n ) ) { return filterNoResolvedType ( n ) ; } else else }
Code	{ if ( symbolName . isAliasDefinition ( n ) ) { return filterNoResolvedType ( n ) ; } else else }
Distance : 13

135
Tree	{ if ( LocalizedFormats.NOT_POSITIVE_ALPHA ) { return JAVA_1_8 . parseInto ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Code	{ if ( LocalizedFormats.NOT_POSITIVE_ALPHA ) { return JAVA_1_8 . parseInto ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Distance : 9

136
Tree	{ if ( multiplicand ) { return JAVA_1_8 . parseInto ( n ) ; } else { return filterNoResolvedType ( n , requirement_ ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . parseInto ( n ) ; } else { return filterNoResolvedType ( n , requirement_ ) ; } }
Distance : 9

137
Tree	{ if ( multiplicand ) { return JAVA_1_8 . parseInto ( n ) ; } else { return validateObjectPattern ( n , requirement_ ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . parseInto ( n ) ; } else { return validateObjectPattern ( n , requirement_ ) ; } }
Distance : 9

138
Tree	{ if ( multiplicand ) { return JAVA_1_8 . enumLiteralHasKey ( n ) ; } else { return filterNoResolvedType ( n , requirement_ ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . enumLiteralHasKey ( n ) ; } else { return filterNoResolvedType ( n , requirement_ ) ; } }
Distance : 9

139
Tree	{ if ( iterations ) { return JAVA_1_8 . parseInto ( n ) ; } else { return filterNoResolvedType ( n , requirement_ ) ; } }
Code	{ if ( iterations ) { return JAVA_1_8 . parseInto ( n ) ; } else { return filterNoResolvedType ( n , requirement_ ) ; } }
Distance : 9

140
Tree	{ if ( multiplicand . copySelf ( getLValue ( n ) ) ) { return filterNoResolvedType ( n ) ; } else else }
Code	{ if ( multiplicand . copySelf ( getLValue ( n ) ) ) { return filterNoResolvedType ( n ) ; } else else }
Distance : 13

141
Tree	{ if ( multiplicand ) { return JAVA_1_8 . enumLiteralHasKey ( n ) ; } else { return validateObjectPattern ( n , requirement_ ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . enumLiteralHasKey ( n ) ; } else { return validateObjectPattern ( n , requirement_ ) ; } }
Distance : 9

142
Tree	{ if ( multiplicand ) { return primitiveWrapperOf ( n ) ; } else { return filterNoResolvedType ( n , requirement_ ) ; } }
Code	{ if ( multiplicand ) { return primitiveWrapperOf ( n ) ; } else { return filterNoResolvedType ( n , requirement_ ) ; } }
Distance : 7

143
Tree	{ if ( iterations ) { return JAVA_1_8 . parseInto ( n ) ; } else { return validateObjectPattern ( n , requirement_ ) ; } }
Code	{ if ( iterations ) { return JAVA_1_8 . parseInto ( n ) ; } else { return validateObjectPattern ( n , requirement_ ) ; } }
Distance : 9

144
Tree	{ if ( multiplicand ) { return JAVA_1_8 . nextCauchy ( n ) ; } else { return filterNoResolvedType ( n , requirement_ ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . nextCauchy ( n ) ; } else { return filterNoResolvedType ( n , requirement_ ) ; } }
Distance : 9

145
Tree	{ if ( multiplicand . copySelf ( getLValue ( n ) ) ) { return filterNoResolvedType ( n ) ; } else else }
Code	{ if ( multiplicand . copySelf ( getLValue ( n ) ) ) { return filterNoResolvedType ( n ) ; } else else }
Distance : 13

146
Tree	{ if ( symbolName . isAliasDefinition ( getLValue ( n ) ) ) { return filterNoResolvedType ( n ) ; } else else }
Code	{ if ( symbolName . isAliasDefinition ( getLValue ( n ) ) ) { return filterNoResolvedType ( n ) ; } else else }
Distance : 13

147
Tree	{ if ( iterations . copySelf ( getLValue ( n ) ) ) { return filterNoResolvedType ( n ) ; } else else }
Code	{ if ( iterations . copySelf ( getLValue ( n ) ) ) { return filterNoResolvedType ( n ) ; } else else }
Distance : 13

148
Tree	{ if ( multiplicand ) { return JAVA_1_8 . nextCauchy ( n ) ; } else { return validateObjectPattern ( n , requirement_ ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . nextCauchy ( n ) ; } else { return validateObjectPattern ( n , requirement_ ) ; } }
Distance : 9

149
Tree	{ if ( iterations ) { return primitiveWrapperOf ( n ) ; } else { return validateObjectPattern ( n , requirement_ ) ; } }
Code	{ if ( iterations ) { return primitiveWrapperOf ( n ) ; } else { return validateObjectPattern ( n , requirement_ ) ; } }
Distance : 7

150
Tree	{ if ( iterations . copySelf ( getLValue ( n ) ) ) { return filterNoResolvedType ( n ) ; } else else }
Code	{ if ( iterations . copySelf ( getLValue ( n ) ) ) { return filterNoResolvedType ( n ) ; } else else }
Distance : 13

151
Tree	{ if ( symbolName . isAliasDefinition ( getLValue ( n ) ) ) { return filterNoResolvedType ( n ) ; } else else }
Code	{ if ( symbolName . isAliasDefinition ( getLValue ( n ) ) ) { return filterNoResolvedType ( n ) ; } else else }
Distance : 13

152
Tree	{ if ( multiplicand . isAliasDefinition ( getLValue ( n ) ) ) { return filterNoResolvedType ( n ) ; } else else }
Code	{ if ( multiplicand . isAliasDefinition ( getLValue ( n ) ) ) { return filterNoResolvedType ( n ) ; } else else }
Distance : 13

153
Tree	{ if ( multiplicand ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return filterNoResolvedType ( n , requirement_ ) ; } }
Code	{ if ( multiplicand ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return filterNoResolvedType ( n , requirement_ ) ; } }
Distance : 7

154
Tree	{ if ( multiplicand . isAliasDefinition ( getLValue ( n ) ) ) { return filterNoResolvedType ( n ) ; } else else }
Code	{ if ( multiplicand . isAliasDefinition ( getLValue ( n ) ) ) { return filterNoResolvedType ( n ) ; } else else }
Distance : 13

155
Tree	{ if ( iterations ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return validateObjectPattern ( n , requirement_ ) ; } }
Code	{ if ( iterations ) { return completeAssignmentExpressionParseAtArrow ( n ) ; } else { return validateObjectPattern ( n , requirement_ ) ; } }
Distance : 7

156
Tree	{ if ( symbolName . copySelf ( getLValue ( n ) ) ) { return filterNoResolvedType ( n ) ; } else else }
Code	{ if ( symbolName . copySelf ( getLValue ( n ) ) ) { return filterNoResolvedType ( n ) ; } else else }
Distance : 13

157
Tree	{ if ( iterations ) { return primitiveWrapperOf ( n ) ; } else { return filterNoResolvedType ( n , requirement_ ) ; } }
Code	{ if ( iterations ) { return primitiveWrapperOf ( n ) ; } else { return filterNoResolvedType ( n , requirement_ ) ; } }
Distance : 7

158
Tree	{ if ( symbolName . copySelf ( getLValue ( n ) ) ) { return filterNoResolvedType ( n ) ; } else else }
Code	{ if ( symbolName . copySelf ( getLValue ( n ) ) ) { return filterNoResolvedType ( n ) ; } else else }
Distance : 13

159
Tree	{ if ( symbolName ) { return primitiveWrapperOf ( n ) ; } else { return validateObjectPattern ( n , requirement_ ) ; } }
Code	{ if ( symbolName ) { return primitiveWrapperOf ( n ) ; } else { return validateObjectPattern ( n , requirement_ ) ; } }
Distance : 7

160
Tree	{ if ( multiplicand != null ) { return JAVA_1_8 . nextCauchy ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand != null ) { return JAVA_1_8 . nextCauchy ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Distance : 11

161
Tree	{ if ( LocalizedFormats.NOT_POSITIVE_ALPHA ) { return JAVA_1_8 . parseInto ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Code	{ if ( LocalizedFormats.NOT_POSITIVE_ALPHA ) { return JAVA_1_8 . parseInto ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Distance : 9

162
Tree	{ if ( LocalizedFormats.NOT_POSITIVE_ALPHA ) { return JAVA_1_8 . nextCauchy ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Code	{ if ( LocalizedFormats.NOT_POSITIVE_ALPHA ) { return JAVA_1_8 . nextCauchy ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Distance : 9

163
Tree	{ if ( multiplicand ) { return JAVA_1_8 . parseInto ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n , requirement_ ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . parseInto ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n , requirement_ ) ; } }
Distance : 11

164
Tree	{ if ( LocalizedFormats.NOT_POSITIVE_ALPHA ) { return JAVA_1_8 . nextCauchy ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Code	{ if ( LocalizedFormats.NOT_POSITIVE_ALPHA ) { return JAVA_1_8 . nextCauchy ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Distance : 9

165
Tree	{ if ( LocalizedFormats.NOT_POSITIVE_ALPHA ) { return JAVA_1_8 . createLong ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Code	{ if ( LocalizedFormats.NOT_POSITIVE_ALPHA ) { return JAVA_1_8 . createLong ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Distance : 9

166
Tree	{ if ( multiplicand ) { return JAVA_1_8 . parseInto ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n , requirement_ ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . parseInto ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n , requirement_ ) ; } }
Distance : 11

167
Tree	{ if ( LocalizedFormats.NOT_POSITIVE_ALPHA ) { return JAVA_1_8 . containsAny ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Code	{ if ( LocalizedFormats.NOT_POSITIVE_ALPHA ) { return JAVA_1_8 . containsAny ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Distance : 9

168
Tree	{ if ( multiplicand ) { return JAVA_1_8 . enumLiteralHasKey ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n , requirement_ ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . enumLiteralHasKey ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n , requirement_ ) ; } }
Distance : 11

169
Tree	{ if ( iterations ) { return JAVA_1_8 . parseInto ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n , requirement_ ) ; } }
Code	{ if ( iterations ) { return JAVA_1_8 . parseInto ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n , requirement_ ) ; } }
Distance : 11

170
Tree	{ if ( multiplicand ) { return JAVA_1_8 . enumLiteralHasKey ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n , requirement_ ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . enumLiteralHasKey ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n , requirement_ ) ; } }
Distance : 11

171
Tree	{ if ( iterations ) { return JAVA_1_8 . parseInto ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n , requirement_ ) ; } }
Code	{ if ( iterations ) { return JAVA_1_8 . parseInto ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n , requirement_ ) ; } }
Distance : 11

172
Tree	{ if ( LocalizedFormats.NOT_POSITIVE_ALPHA ) { return JAVA_1_8 . containsAny ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Code	{ if ( LocalizedFormats.NOT_POSITIVE_ALPHA ) { return JAVA_1_8 . containsAny ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Distance : 9

173
Tree	{ if ( LocalizedFormats.NO_REGRESSORS ) { return JAVA_1_8 . parseInto ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Code	{ if ( LocalizedFormats.NO_REGRESSORS ) { return JAVA_1_8 . parseInto ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Distance : 9

174
Tree	{ if ( multiplicand ) { return JAVA_1_8 . nextCauchy ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n , requirement_ ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . nextCauchy ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n , requirement_ ) ; } }
Distance : 11

175
Tree	{ if ( multiplicand ) { return JAVA_1_8 . nextCauchy ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n , requirement_ ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . nextCauchy ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n , requirement_ ) ; } }
Distance : 11

176
Tree	{ if ( multiplicand . copySelf ( getLValue ( n ) ) ) { return JAVA_1_8 . filterNoResolvedType ( n ) ; } else else }
Code	{ if ( multiplicand . copySelf ( getLValue ( n ) ) ) { return JAVA_1_8 . filterNoResolvedType ( n ) ; } else else }
Distance : 15

177
Tree	{ if ( iterations . createLong ( getLValue ( n ) ) ) { return JAVA_1_8 . validateObjectPattern ( n ) ; } else else }
Code	{ if ( iterations . createLong ( getLValue ( n ) ) ) { return JAVA_1_8 . validateObjectPattern ( n ) ; } else else }
Distance : 15

178
Tree	{ if ( multiplicand ) { return JAVA_1_8 . parseInto ( n , requirement_ ) ; } else { return JAVA_1_8 . validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . parseInto ( n , requirement_ ) ; } else { return JAVA_1_8 . validateObjectPattern ( n ) ; } }
Distance : 8

179
Tree	{ if ( multiplicand == null ) { return JAVA_1_8 . createLong ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand == null ) { return JAVA_1_8 . createLong ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Distance : 11

180
Tree	{ if ( multiplicand == null ) { return JAVA_1_8 . enumLiteralHasKey ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Code	{ if ( multiplicand == null ) { return JAVA_1_8 . enumLiteralHasKey ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Distance : 11

181
Tree	{ if ( multiplicand ) { return JAVA_1_8 . createLong ( n , requirement_ ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . createLong ( n , requirement_ ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Distance : 8

182
Tree	{ if ( multiplicand ) { return primitiveWrapperOf ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) . validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand ) { return primitiveWrapperOf ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) . validateObjectPattern ( n ) ; } }
Distance : 12

183
Tree	{ if ( multiplicand ) { return JAVA_1_8 . enumLiteralHasKey ( n ) ; } else { return filterNoResolvedType () . validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . enumLiteralHasKey ( n ) ; } else { return filterNoResolvedType () . validateObjectPattern ( n ) ; } }
Distance : 10

184
Tree	{ if ( multiplicand == null ) { return JAVA_1_8 . createLong ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Code	{ if ( multiplicand == null ) { return JAVA_1_8 . createLong ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Distance : 11

185
Tree	{ if ( multiplicand ) { return JAVA_1_8 . enumLiteralHasKey ( n , requirement_ ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . enumLiteralHasKey ( n , requirement_ ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n ) ; } }
Distance : 8

186
Tree	{ if ( multiplicand != null ) { return JAVA_1_8 . createLong ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand != null ) { return JAVA_1_8 . createLong ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Distance : 11

187
Tree	{ if ( iterations ) { return JAVA_1_8 . parseInto ( n ) ; } else { return filterNoResolvedType () . validateObjectPattern ( n ) ; } }
Code	{ if ( iterations ) { return JAVA_1_8 . parseInto ( n ) ; } else { return filterNoResolvedType () . validateObjectPattern ( n ) ; } }
Distance : 10

188
Tree	{ if ( multiplicand ) { return JAVA_1_8 . enumLiteralHasKey ( n ) ; } else { return validateObjectPattern () . validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . enumLiteralHasKey ( n ) ; } else { return validateObjectPattern () . validateObjectPattern ( n ) ; } }
Distance : 10

189
Tree	{ if ( iterations == null ) { return JAVA_1_8 . enumLiteralHasKey ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Code	{ if ( iterations == null ) { return JAVA_1_8 . enumLiteralHasKey ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n ) ; } }
Distance : 11

190
Tree	{ if ( iterations ) { return JAVA_1_8 . parseInto ( n ) ; } else { return validateObjectPattern () . validateObjectPattern ( n ) ; } }
Code	{ if ( iterations ) { return JAVA_1_8 . parseInto ( n ) ; } else { return validateObjectPattern () . validateObjectPattern ( n ) ; } }
Distance : 10

191
Tree	{ if ( multiplicand ) { return JAVA_1_8 . nextCauchy ( n ) ; } else { return filterNoResolvedType () . validateObjectPattern ( n ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . nextCauchy ( n ) ; } else { return filterNoResolvedType () . validateObjectPattern ( n ) ; } }
Distance : 10

192
Tree	{ if ( multiplicand ) { return JAVA_1_8 . parseInto ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . parseInto ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Distance : 11

193
Tree	{ if ( multiplicand ) { return JAVA_1_8 . parseInto ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . parseInto ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Distance : 11

194
Tree	{ if ( multiplicand ) { return JAVA_1_8 . enumLiteralHasKey ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . enumLiteralHasKey ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Distance : 11

195
Tree	{ if ( iterations ) { return JAVA_1_8 . parseInto ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Code	{ if ( iterations ) { return JAVA_1_8 . parseInto ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Distance : 11

196
Tree	{ if ( multiplicand ) { return JAVA_1_8 . enumLiteralHasKey ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . enumLiteralHasKey ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Distance : 11

197
Tree	{ if ( iterations ) { return JAVA_1_8 . parseInto ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Code	{ if ( iterations ) { return JAVA_1_8 . parseInto ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Distance : 11

198
Tree	{ if ( multiplicand ) { return JAVA_1_8 . nextCauchy ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . nextCauchy ( n ) ; } else { return reportLooseTypeViolations . defaultValueFor ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Distance : 11

199
Tree	{ if ( multiplicand ) { return JAVA_1_8 . nextCauchy ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Code	{ if ( multiplicand ) { return JAVA_1_8 . nextCauchy ( n ) ; } else { return reportLooseTypeViolations . validateObjectPattern ( n , LocalizedFormats.INTERNAL_ERROR ) ; } }
Distance : 11

========================================================================


========================================================================
Example Number: 32
Parent Code is: 
String moduleName = guessCJSModuleName ( normalizeSourceName ( script . getSourceFileName () ) ) ;
-------------------------------------------------------------------------------
Child code is: 
String moduleName = guessCJSModuleName ( script . getSourceFileName () ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=moduleName}) (204{val==}) (32 (802{val=guessCJSModuleName}) (214{val=(}) (32 (802{val=normalizeSourceName}) (214{val=(}) (32 (800{val=script}) (235{val=.}) (802{val=getSourceFileName}) (216{val=()})) (215{val=)})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=String})) (59 (800{val=moduleName}) (204{val==}) (32 (802{val=guessCJSModuleName}) (214{val=(}) (32 (800{val=script}) (235{val=.}) (802{val=getSourceFileName}) (216{val=()})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/9/parent/src_com_google_javascript_jscomp_ProcessCommonJSModules.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	String loc = Entities ( script , script ) ;
Code	String loc = Entities ( script , script ) ;
Distance : 5

1
Tree	String lValueName = Entities ( script ) ;
Code	String lValueName = Entities ( script ) ;
Distance : 5

2
Tree	String zipEntryPath = resolveVariable ( script , this . currentScope ) ;
Code	String zipEntryPath = resolveVariable ( script , this . currentScope ) ;
Distance : 6

3
Tree	String loc = resolveVariable ( script , firstNonNull ( script . getSourceFileName () ) ) ;
Code	String loc = resolveVariable ( script , firstNonNull ( script . getSourceFileName () ) ) ;
Distance : 7

4
Tree	String dot = Entities ( script ) ;
Code	String dot = Entities ( script ) ;
Distance : 5

5
Tree	String zipEntryPath = resolveVariable ( addPeriodInto ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String zipEntryPath = resolveVariable ( addPeriodInto ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 10

6
Tree	String loc = resolveVariable ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String loc = resolveVariable ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

7
Tree	String zipEntryPath = JAR_URL_PREFIX ( script ) ;
Code	String zipEntryPath = JAR_URL_PREFIX ( script ) ;
Distance : 5

8
Tree	String loc = resolveVariable ( addPeriodInto ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String loc = resolveVariable ( addPeriodInto ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 10

9
Tree	String lValueName = Entities ( script , script ) ;
Code	String lValueName = Entities ( script , script ) ;
Distance : 5

10
Tree	String loc = resolveVariable ( s.parent ) ;
Code	String loc = resolveVariable ( s.parent ) ;
Distance : 6

11
Tree	String zipEntryPath = resolveVariable ( script , getReferenceName ( script . getSourceFileName () ) ) ;
Code	String zipEntryPath = resolveVariable ( script , getReferenceName ( script . getSourceFileName () ) ) ;
Distance : 7

12
Tree	String zipEntryPath = resolveVariable ( TokenType.STRING ) ;
Code	String zipEntryPath = resolveVariable ( TokenType.STRING ) ;
Distance : 6

13
Tree	String zipEntryPath = Entities . getTransform ( script , referenceNode , BOOLEAN_TYPE ) ;
Code	String zipEntryPath = Entities . getTransform ( script , referenceNode , BOOLEAN_TYPE ) ;
Distance : 8

14
Tree	String zipEntryPath = resolveVariable ( getOrCreateProperty ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String zipEntryPath = resolveVariable ( getOrCreateProperty ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 10

15
Tree	String lValueName = resolveVariable ( script , firstNonNull ( script . getSourceFileName () ) ) ;
Code	String lValueName = resolveVariable ( script , firstNonNull ( script . getSourceFileName () ) ) ;
Distance : 7

16
Tree	String zipEntryPath = resolveVariable ( script ) ;
Code	String zipEntryPath = resolveVariable ( script ) ;
Distance : 5

17
Tree	String zipEntryPath = resolveVariable ( script , NUMBER_CONSTANT ) ;
Code	String zipEntryPath = resolveVariable ( script , NUMBER_CONSTANT ) ;
Distance : 5

18
Tree	String loc = resolveVariable ( script ) ;
Code	String loc = resolveVariable ( script ) ;
Distance : 5

19
Tree	String zipEntryPath = Entities ( script ) ;
Code	String zipEntryPath = Entities ( script ) ;
Distance : 5

20
Tree	String loc = resolveVariable ( script , NUMBER_CONSTANT ) ;
Code	String loc = resolveVariable ( script , NUMBER_CONSTANT ) ;
Distance : 5

21
Tree	String loc = resolveVariable ( script , this . currentScope ) ;
Code	String loc = resolveVariable ( script , this . currentScope ) ;
Distance : 6

22
Tree	String zipEntryPath = findKernel ( script ) ;
Code	String zipEntryPath = findKernel ( script ) ;
Distance : 5

23
Tree	String zipEntryPath = resolveVariable ( addPeriodInto ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Code	String zipEntryPath = resolveVariable ( addPeriodInto ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Distance : 9

24
Tree	String zipEntryPath = extractCauseUnchecked ( script ) ;
Code	String zipEntryPath = extractCauseUnchecked ( script ) ;
Distance : 5

25
Tree	String zipEntryPath = resolveVariable ( script , STRING_CONSTANT + script + STRING_CONSTANT + STRING_CONSTANT ) ;
Code	String zipEntryPath = resolveVariable ( script , STRING_CONSTANT + script + STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 10

26
Tree	String zipEntryPath = getOrCreateName ( script , firstNonNull ( script . getSourceFileName () ) ) ;
Code	String zipEntryPath = getOrCreateName ( script , firstNonNull ( script . getSourceFileName () ) ) ;
Distance : 7

27
Tree	String zipEntryPath = resolveVariable ( getItemShape ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String zipEntryPath = resolveVariable ( getItemShape ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 10

28
Tree	String lValueName = resolveVariable ( script , script , BOOLEAN_TYPE ) ;
Code	String lValueName = resolveVariable ( script , script , BOOLEAN_TYPE ) ;
Distance : 6

29
Tree	String zipEntryPath = resolveVariable ( var ) ;
Code	String zipEntryPath = resolveVariable ( var ) ;
Distance : 6

30
Tree	String zipEntryPath = getOrCreateName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String zipEntryPath = getOrCreateName ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

31
Tree	String zipEntryPath = Entities ( script , script ) ;
Code	String zipEntryPath = Entities ( script , script ) ;
Distance : 5

32
Tree	String zipEntryPath = resolveVariable ( getPropDefFromClass ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String zipEntryPath = resolveVariable ( getPropDefFromClass ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 10

33
Tree	String zipEntryPath = Entities ( var , script ) ;
Code	String zipEntryPath = Entities ( var , script ) ;
Distance : 6

34
Tree	String zipEntryPath = getOrCreateName ( script , NUMBER_CONSTANT ) ;
Code	String zipEntryPath = getOrCreateName ( script , NUMBER_CONSTANT ) ;
Distance : 5

35
Tree	String zipEntryPath = resolveVariable ( script , firstNonNull ( script . getSourceFileName () ) ) ;
Code	String zipEntryPath = resolveVariable ( script , firstNonNull ( script . getSourceFileName () ) ) ;
Distance : 7

36
Tree	String dot = Entities ( script , script ) ;
Code	String dot = Entities ( script , script ) ;
Distance : 5

37
Tree	String zipEntryPath = resolveVariable ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String zipEntryPath = resolveVariable ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

38
Tree	String lValueName = resolveVariable ( script , NUMBER_CONSTANT ) ;
Code	String lValueName = resolveVariable ( script , NUMBER_CONSTANT ) ;
Distance : 5

39
Tree	String zipEntryPath = resolveVariable ( getPropDefFromClass ( script . getSourceFileName () ) , STRING_CONSTANT , script , scopeCreator ) ;
Code	String zipEntryPath = resolveVariable ( getPropDefFromClass ( script . getSourceFileName () ) , STRING_CONSTANT , script , scopeCreator ) ;
Distance : 11

40
Tree	String zipEntryPath = getExplicitReturnTypeIfExpected ( script , script , BOOLEAN_TYPE ) ;
Code	String zipEntryPath = getExplicitReturnTypeIfExpected ( script , script , BOOLEAN_TYPE ) ;
Distance : 6

41
Tree	String zipEntryPath = getExplicitReturnTypeIfExpected ( script , NUMBER_CONSTANT ) ;
Code	String zipEntryPath = getExplicitReturnTypeIfExpected ( script , NUMBER_CONSTANT ) ;
Distance : 5

42
Tree	String zipEntryPath = JAR_URL_PREFIX ( script , script ) ;
Code	String zipEntryPath = JAR_URL_PREFIX ( script , script ) ;
Distance : 5

43
Tree	String zipEntryPath = resolveVariable ( addPeriodInto ( script . getSourceFileName () ) , STRING_CONSTANT , script , scopeCreator ) ;
Code	String zipEntryPath = resolveVariable ( addPeriodInto ( script . getSourceFileName () ) , STRING_CONSTANT , script , scopeCreator ) ;
Distance : 11

44
Tree	String zipEntryPath = resolveVariable ( script , firstNonNull ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String zipEntryPath = resolveVariable ( script , firstNonNull ( getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 10

45
Tree	String zipEntryPath = resolveVariable ( addPeriodInto ( script . getAsNominalType () ) , STRING_CONSTANT , script , scopeCreator ) ;
Code	String zipEntryPath = resolveVariable ( addPeriodInto ( script . getAsNominalType () ) , STRING_CONSTANT , script , scopeCreator ) ;
Distance : 12

46
Tree	String loc = resolveVariable ( getPropDefFromClass ( script . getSourceFileName () ) , STRING_CONSTANT , script , scopeCreator ) ;
Code	String loc = resolveVariable ( getPropDefFromClass ( script . getSourceFileName () ) , STRING_CONSTANT , script , scopeCreator ) ;
Distance : 11

47
Tree	String zipEntryPath = resolveVariable ( getOrCreateProperty ( script . getSourceFileName () ) ) ;
Code	String zipEntryPath = resolveVariable ( getOrCreateProperty ( script . getSourceFileName () ) ) ;
Distance : 5

48
Tree	String loc = resolveVariable ( script , STRING_CONSTANT + script + STRING_CONSTANT + STRING_CONSTANT ) ;
Code	String loc = resolveVariable ( script , STRING_CONSTANT + script + STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 10

49
Tree	String zipEntryPath = resolveVariable ( getItemShape ( firstNonNull ( script ) ) ) ;
Code	String zipEntryPath = resolveVariable ( getItemShape ( firstNonNull ( script ) ) ) ;
Distance : 9

50
Tree	String zipEntryPath = resolveVariable ( var , script ) ;
Code	String zipEntryPath = resolveVariable ( var , script ) ;
Distance : 6

51
Tree	String loc = resolveVariable ( script , firstNonNull ( getReferenceName ( script . getSourceFileName () ) ) ) ;
Code	String loc = resolveVariable ( script , firstNonNull ( getReferenceName ( script . getSourceFileName () ) ) ) ;
Distance : 10

52
Tree	String zipEntryPath = resolveVariable ( addPeriodInto ( createUnionType ( script ) ) ) ;
Code	String zipEntryPath = resolveVariable ( addPeriodInto ( createUnionType ( script ) ) ) ;
Distance : 9

53
Tree	String zipEntryPath = resolveVariable ( toCanonicalName ( script . getSourceFileName () ) ) ;
Code	String zipEntryPath = resolveVariable ( toCanonicalName ( script . getSourceFileName () ) ) ;
Distance : 5

54
Tree	String zipEntryPath = resolveVariable ( script , firstNonNull ( getReferenceName ( script . getSourceFileName () ) ) ) ;
Code	String zipEntryPath = resolveVariable ( script , firstNonNull ( getReferenceName ( script . getSourceFileName () ) ) ) ;
Distance : 10

55
Tree	String zipEntryPath = resolveVariable ( addPeriodInto ( script . getSourceFileName () ) , else ) ;
Code	String zipEntryPath = resolveVariable ( addPeriodInto ( script . getSourceFileName () ) , else ) ;
Distance : 7

56
Tree	String zipEntryPath = getOrCreateName ( script , script ) ;
Code	String zipEntryPath = getOrCreateName ( script , script ) ;
Distance : 5

57
Tree	String zipEntryPath = resolveVariable ( getPropDefFromClass ( withMockFeatures ( script ) ) ) ;
Code	String zipEntryPath = resolveVariable ( getPropDefFromClass ( withMockFeatures ( script ) ) ) ;
Distance : 9

58
Tree	String zipEntryPath = resolveVariable ( getOrCreateProperty ( script . getSourceFileName () ) , STRING_CONSTANT , script , scopeCreator ) ;
Code	String zipEntryPath = resolveVariable ( getOrCreateProperty ( script . getSourceFileName () ) , STRING_CONSTANT , script , scopeCreator ) ;
Distance : 11

59
Tree	String zipEntryPath = resolveVariable ( getOrCreateProperty ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Code	String zipEntryPath = resolveVariable ( getOrCreateProperty ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Distance : 9

60
Tree	String zipEntryPath = resolveVariable ( addPeriodInto ( script . getSourceFileName () ) , CHAR_CONS ) ;
Code	String zipEntryPath = resolveVariable ( addPeriodInto ( script . getSourceFileName () ) , CHAR_CONS ) ;
Distance : 7

61
Tree	String zipEntryPath = extractCauseUnchecked ( script , firstNonNull ( getReferenceName ( script . getSourceFileName () ) ) ) ;
Code	String zipEntryPath = extractCauseUnchecked ( script , firstNonNull ( getReferenceName ( script . getSourceFileName () ) ) ) ;
Distance : 10

62
Tree	String zipEntryPath = resolveVariable ( AnnotationAppender.ValueFilter.AppendDefaults.INSTANCE ) ;
Code	String zipEntryPath = resolveVariable ( AnnotationAppender.ValueFilter.AppendDefaults.INSTANCE ) ;
Distance : 6

63
Tree	String zipEntryPath = extractCauseUnchecked ( script , firstNonNull ( script . getSourceFileName () ) ) ;
Code	String zipEntryPath = extractCauseUnchecked ( script , firstNonNull ( script . getSourceFileName () ) ) ;
Distance : 7

64
Tree	String zipEntryPath = resolveVariable ( s.parent , script ) ;
Code	String zipEntryPath = resolveVariable ( s.parent , script ) ;
Distance : 6

65
Tree	String zipEntryPath = Entities ( var ) ;
Code	String zipEntryPath = Entities ( var ) ;
Distance : 6

66
Tree	String zipEntryPath = extractCauseUnchecked ( script , that.gradientPaintTransformer ) ;
Code	String zipEntryPath = extractCauseUnchecked ( script , that.gradientPaintTransformer ) ;
Distance : 5

67
Tree	String zipEntryPath = resolveVariable ( script , that.gradientPaintTransformer ) ;
Code	String zipEntryPath = resolveVariable ( script , that.gradientPaintTransformer ) ;
Distance : 5

68
Tree	String zipEntryPath = resolveVariable ( var , that.gradientPaintTransformer ) ;
Code	String zipEntryPath = resolveVariable ( var , that.gradientPaintTransformer ) ;
Distance : 6

69
Tree	String zipEntryPath = resolveVariable ( script . getSourceFileName () ) . getTypeI ( STRING_CONSTANT ) ;
Code	String zipEntryPath = resolveVariable ( script . getSourceFileName () ) . getTypeI ( STRING_CONSTANT ) ;
Distance : 7

70
Tree	String zipEntryPath = resolveVariable ( getItemShape ( script . getSourceFileName () ) , STRING_CONSTANT , script . toStringTree () ) ;
Code	String zipEntryPath = resolveVariable ( getItemShape ( script . getSourceFileName () ) , STRING_CONSTANT , script . toStringTree () ) ;
Distance : 12

71
Tree	String zipEntryPath = Entities . readFully ( script , referenceNode , BOOLEAN_TYPE ) ;
Code	String zipEntryPath = Entities . readFully ( script , referenceNode , BOOLEAN_TYPE ) ;
Distance : 8

72
Tree	String zipEntryPath = resolveVariable ( script , script ) ;
Code	String zipEntryPath = resolveVariable ( script , script ) ;
Distance : 5

73
Tree	String loc = resolveVariable ( TokenType.STRING ) ;
Code	String loc = resolveVariable ( TokenType.STRING ) ;
Distance : 6

74
Tree	String zipEntryPath = findKernel ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String zipEntryPath = findKernel ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

75
Tree	String zipEntryPath = resolveVariable ( addPeriodInto ( script . getSourceFileName () ) ) ;
Code	String zipEntryPath = resolveVariable ( addPeriodInto ( script . getSourceFileName () ) ) ;
Distance : 5

76
Tree	String zipEntryPath = resolveVariable ( var , firstNonNull ( getReferenceName ( script . getSourceFileName () ) ) ) ;
Code	String zipEntryPath = resolveVariable ( var , firstNonNull ( getReferenceName ( script . getSourceFileName () ) ) ) ;
Distance : 10

77
Tree	String loc = Entities . readFully ( script , referenceNode , BOOLEAN_TYPE ) ;
Code	String loc = Entities . readFully ( script , referenceNode , BOOLEAN_TYPE ) ;
Distance : 8

78
Tree	String loc = resolveVariable ( script , that.gradientPaintTransformer ) ;
Code	String loc = resolveVariable ( script , that.gradientPaintTransformer ) ;
Distance : 5

79
Tree	String zipEntryPath = resolveVariable ( getPropDefFromClass ( firstNonNull ( script ) ) ) ;
Code	String zipEntryPath = resolveVariable ( getPropDefFromClass ( firstNonNull ( script ) ) ) ;
Distance : 9

80
Tree	String zipEntryPath = findKernel ( script . getSourceFileName () ) . getTemplateTypes ( STRING_CONSTANT ) ;
Code	String zipEntryPath = findKernel ( script . getSourceFileName () ) . getTemplateTypes ( STRING_CONSTANT ) ;
Distance : 7

81
Tree	String zipEntryPath = findKernel ( s.parent , script ) ;
Code	String zipEntryPath = findKernel ( s.parent , script ) ;
Distance : 6

82
Tree	String loc = resolveVariable ( getPropDefFromClass ( script . getSourceFileName () ) ) ;
Code	String loc = resolveVariable ( getPropDefFromClass ( script . getSourceFileName () ) ) ;
Distance : 5

83
Tree	String zipEntryPath = resolveVariable ( getPropDefFromClass ( createUnionType ( script ) ) ) ;
Code	String zipEntryPath = resolveVariable ( getPropDefFromClass ( createUnionType ( script ) ) ) ;
Distance : 9

84
Tree	String loc = resolveVariable ( addPeriodInto ( script . getSourceFileName () ) , STRING_CONSTANT , script . toStringTree () ) ;
Code	String loc = resolveVariable ( addPeriodInto ( script . getSourceFileName () ) , STRING_CONSTANT , script . toStringTree () ) ;
Distance : 12

85
Tree	String zipEntryPath = Entities . is ( script , referenceNode , BOOLEAN_TYPE ) ;
Code	String zipEntryPath = Entities . is ( script , referenceNode , BOOLEAN_TYPE ) ;
Distance : 8

86
Tree	String zipEntryPath = getOrCreateName ( script , that.gradientPaintTransformer ) ;
Code	String zipEntryPath = getOrCreateName ( script , that.gradientPaintTransformer ) ;
Distance : 5

87
Tree	String zipEntryPath = resolveVariable ( addPeriodInto ( script . getAsNominalType () ) ) ;
Code	String zipEntryPath = resolveVariable ( addPeriodInto ( script . getAsNominalType () ) ) ;
Distance : 6

88
Tree	String zipEntryPath = resolveVariable ( script , CheckLevel.ERROR ) ;
Code	String zipEntryPath = resolveVariable ( script , CheckLevel.ERROR ) ;
Distance : 5

89
Tree	String lValueName = resolveVariable ( script , script ) ;
Code	String lValueName = resolveVariable ( script , script ) ;
Distance : 5

90
Tree	String lValueName = resolveVariable ( script , this . currentScope ) ;
Code	String lValueName = resolveVariable ( script , this . currentScope ) ;
Distance : 6

91
Tree	String zipEntryPath = resolveVariable ( addPeriodInto ( script . getAsNominalType () ) , STRING_CONSTANT , CHAR_CONS ) ;
Code	String zipEntryPath = resolveVariable ( addPeriodInto ( script . getAsNominalType () ) , STRING_CONSTANT , CHAR_CONS ) ;
Distance : 10

92
Tree	String loc = resolveVariable ( getPropDefFromClass ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Code	String loc = resolveVariable ( getPropDefFromClass ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Distance : 9

93
Tree	String loc = resolveVariable ( script , script ) ;
Code	String loc = resolveVariable ( script , script ) ;
Distance : 5

94
Tree	String zipEntryPath = resolveVariable ( script , STRING_CONSTANT + ref + STRING_CONSTANT + STRING_CONSTANT ) ;
Code	String zipEntryPath = resolveVariable ( script , STRING_CONSTANT + ref + STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 10

95
Tree	String loc = Entities . is ( script , referenceNode , BOOLEAN_TYPE ) ;
Code	String loc = Entities . is ( script , referenceNode , BOOLEAN_TYPE ) ;
Distance : 8

96
Tree	String loc = Entities . getTransform ( script , referenceNode , BOOLEAN_TYPE ) ;
Code	String loc = Entities . getTransform ( script , referenceNode , BOOLEAN_TYPE ) ;
Distance : 8

97
Tree	String zipEntryPath = resolveVariable ( getOrCreateProperty ( script . getSourceFileName () ) , STRING_CONSTANT , script . toStringTree () ) ;
Code	String zipEntryPath = resolveVariable ( getOrCreateProperty ( script . getSourceFileName () ) , STRING_CONSTANT , script . toStringTree () ) ;
Distance : 12

98
Tree	String zipEntryPath = getOrCreateName ( s.parent ) ;
Code	String zipEntryPath = getOrCreateName ( s.parent ) ;
Distance : 6

99
Tree	String zipEntryPath = resolveVariable ( getPropDefFromClass ( script . getSourceFileName () ) ) ;
Code	String zipEntryPath = resolveVariable ( getPropDefFromClass ( script . getSourceFileName () ) ) ;
Distance : 5

100
Tree	String zipEntryPath = getOrCreateName ( script , STRING_CONSTANT + script + STRING_CONSTANT + STRING_CONSTANT ) ;
Code	String zipEntryPath = getOrCreateName ( script , STRING_CONSTANT + script + STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 10

101
Tree	String zipEntryPath = resolveVariable ( getItemShape ( script . getSourceFileName () ) , else ) ;
Code	String zipEntryPath = resolveVariable ( getItemShape ( script . getSourceFileName () ) , else ) ;
Distance : 7

102
Tree	String zipEntryPath = getOrCreateName ( script ) ;
Code	String zipEntryPath = getOrCreateName ( script ) ;
Distance : 5

103
Tree	String zipEntryPath = resolveVariable ( getItemShape ( script . getSourceFileName () ) ) ;
Code	String zipEntryPath = resolveVariable ( getItemShape ( script . getSourceFileName () ) ) ;
Distance : 5

104
Tree	String zipEntryPath = resolveVariable ( s.parent ) ;
Code	String zipEntryPath = resolveVariable ( s.parent ) ;
Distance : 6

105
Tree	String lValueName = resolveVariable ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String lValueName = resolveVariable ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

106
Tree	String zipEntryPath = resolveVariable ( toCanonicalName ( script . getSourceFileName () ) , STRING_CONSTANT , script . toStringTree () ) ;
Code	String zipEntryPath = resolveVariable ( toCanonicalName ( script . getSourceFileName () ) , STRING_CONSTANT , script . toStringTree () ) ;
Distance : 12

107
Tree	String zipEntryPath = LineUtilities ( script ) ;
Code	String zipEntryPath = LineUtilities ( script ) ;
Distance : 5

108
Tree	String loc = resolveVariable ( addPeriodInto ( script . getSourceFileName () ) ) ;
Code	String loc = resolveVariable ( addPeriodInto ( script . getSourceFileName () ) ) ;
Distance : 5

109
Tree	String zipEntryPath = Entities . getTransform ( var , referenceNode , BOOLEAN_TYPE ) ;
Code	String zipEntryPath = Entities . getTransform ( var , referenceNode , BOOLEAN_TYPE ) ;
Distance : 9

110
Tree	String loc = Entities ( script ) ;
Code	String loc = Entities ( script ) ;
Distance : 5

111
Tree	String zipEntryPath = resolveVariable ( toCanonicalName ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Code	String zipEntryPath = resolveVariable ( toCanonicalName ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Distance : 9

112
Tree	String loc = resolveVariable ( addPeriodInto ( script . getSourceFileName () ) , else ) ;
Code	String loc = resolveVariable ( addPeriodInto ( script . getSourceFileName () ) , else ) ;
Distance : 7

113
Tree	String zipEntryPath = findKernel ( script , NUMBER_CONSTANT ) ;
Code	String zipEntryPath = findKernel ( script , NUMBER_CONSTANT ) ;
Distance : 5

114
Tree	String zipEntryPath = resolveVariable ( var , firstNonNull ( script . getSourceFileName () ) ) ;
Code	String zipEntryPath = resolveVariable ( var , firstNonNull ( script . getSourceFileName () ) ) ;
Distance : 7

115
Tree	String loc = resolveVariable ( script , script , BOOLEAN_TYPE ) ;
Code	String loc = resolveVariable ( script , script , BOOLEAN_TYPE ) ;
Distance : 6

116
Tree	String zipEntryPath = resolveVariable ( toCanonicalName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String zipEntryPath = resolveVariable ( toCanonicalName ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 10

117
Tree	String varValue = Entities ( script ) ;
Code	String varValue = Entities ( script ) ;
Distance : 5

118
Tree	String loc = resolveVariable ( getPropDefFromClass ( script . getSourceFileName () ) , STRING_CONSTANT , script . toStringTree () ) ;
Code	String loc = resolveVariable ( getPropDefFromClass ( script . getSourceFileName () ) , STRING_CONSTANT , script . toStringTree () ) ;
Distance : 12

119
Tree	String zipEntryPath = findKernel ( script , script , BOOLEAN_TYPE ) ;
Code	String zipEntryPath = findKernel ( script , script , BOOLEAN_TYPE ) ;
Distance : 6

120
Tree	String zipEntryPath = resolveVariable ( addPeriodInto ( getDeclaredVar ( script ) ) ) ;
Code	String zipEntryPath = resolveVariable ( addPeriodInto ( getDeclaredVar ( script ) ) ) ;
Distance : 9

121
Tree	String zipEntryPath = resolveVariable ( getItemShape ( script . getSourceFileName () ) , CHAR_CONS ) ;
Code	String zipEntryPath = resolveVariable ( getItemShape ( script . getSourceFileName () ) , CHAR_CONS ) ;
Distance : 7

122
Tree	String zipEntryPath = extractCauseUnchecked ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String zipEntryPath = extractCauseUnchecked ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

123
Tree	String zipEntryPath = extractCauseUnchecked ( s.parent , script ) ;
Code	String zipEntryPath = extractCauseUnchecked ( s.parent , script ) ;
Distance : 6

124
Tree	String zipEntryPath = resolveVariable ( TokenType.STRING , script ) ;
Code	String zipEntryPath = resolveVariable ( TokenType.STRING , script ) ;
Distance : 6

125
Tree	String zipEntryPath = resolveVariable ( getPropDefFromClass ( script . getSourceFileName () ) , else ) ;
Code	String zipEntryPath = resolveVariable ( getPropDefFromClass ( script . getSourceFileName () ) , else ) ;
Distance : 7

126
Tree	String zipEntryPath = extractCauseUnchecked ( script , script , BOOLEAN_TYPE ) ;
Code	String zipEntryPath = extractCauseUnchecked ( script , script , BOOLEAN_TYPE ) ;
Distance : 6

127
Tree	String zipEntryPath = Entities . createDouble ( script , referenceNode , BOOLEAN_TYPE ) ;
Code	String zipEntryPath = Entities . createDouble ( script , referenceNode , BOOLEAN_TYPE ) ;
Distance : 8

128
Tree	String zipEntryPath = resolveVariable ( getPropDefFromClass ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Code	String zipEntryPath = resolveVariable ( getPropDefFromClass ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Distance : 9

129
Tree	String lValueName = resolveVariable ( script ) ;
Code	String lValueName = resolveVariable ( script ) ;
Distance : 5

130
Tree	String zipEntryPath = getExplicitReturnTypeIfExpected ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String zipEntryPath = getExplicitReturnTypeIfExpected ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

131
Tree	String zipEntryPath = findKernel ( script , firstNonNull ( getReferenceName ( script . getSourceFileName () ) ) ) ;
Code	String zipEntryPath = findKernel ( script , firstNonNull ( getReferenceName ( script . getSourceFileName () ) ) ) ;
Distance : 10

132
Tree	String zipEntryPath = getOrCreateName ( script , this . currentScope ) ;
Code	String zipEntryPath = getOrCreateName ( script , this . currentScope ) ;
Distance : 6

133
Tree	String zipEntryPath = getExplicitReturnTypeIfExpected ( script , script ) ;
Code	String zipEntryPath = getExplicitReturnTypeIfExpected ( script , script ) ;
Distance : 5

134
Tree	String zipEntryPath = getExplicitReturnTypeIfExpected ( script , this . currentScope ) ;
Code	String zipEntryPath = getExplicitReturnTypeIfExpected ( script , this . currentScope ) ;
Distance : 6

135
Tree	String zipEntryPath = findKernel ( script , script ) ;
Code	String zipEntryPath = findKernel ( script , script ) ;
Distance : 5

136
Tree	String zipEntryPath = extractCauseUnchecked ( script , NUMBER_CONSTANT ) ;
Code	String zipEntryPath = extractCauseUnchecked ( script , NUMBER_CONSTANT ) ;
Distance : 5

137
Tree	String zipEntryPath = findKernel ( s.parent ) ;
Code	String zipEntryPath = findKernel ( s.parent ) ;
Distance : 6

138
Tree	String zipEntryPath = getExplicitReturnTypeIfExpected ( script ) ;
Code	String zipEntryPath = getExplicitReturnTypeIfExpected ( script ) ;
Distance : 5

139
Tree	String zipEntryPath = resolveVariable ( toCanonicalName ( script . getSourceFileName () ) , STRING_CONSTANT , script , scopeCreator ) ;
Code	String zipEntryPath = resolveVariable ( toCanonicalName ( script . getSourceFileName () ) , STRING_CONSTANT , script , scopeCreator ) ;
Distance : 11

140
Tree	String zipEntryPath = extractCauseUnchecked ( s.parent ) ;
Code	String zipEntryPath = extractCauseUnchecked ( s.parent ) ;
Distance : 6

141
Tree	String zipEntryPath = resolveVariable ( addPeriodInto ( script . getAsNominalType () ) , STRING_CONSTANT , script . toStringTree () ) ;
Code	String zipEntryPath = resolveVariable ( addPeriodInto ( script . getAsNominalType () ) , STRING_CONSTANT , script . toStringTree () ) ;
Distance : 13

142
Tree	String zipEntryPath = resolveVariable ( var , script , BOOLEAN_TYPE ) ;
Code	String zipEntryPath = resolveVariable ( var , script , BOOLEAN_TYPE ) ;
Distance : 7

143
Tree	String zipEntryPath = findKernel ( script , that.gradientPaintTransformer ) ;
Code	String zipEntryPath = findKernel ( script , that.gradientPaintTransformer ) ;
Distance : 5

144
Tree	String loc = resolveVariable ( addPeriodInto ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Code	String loc = resolveVariable ( addPeriodInto ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Distance : 9

145
Tree	String zipEntryPath = resolveVariable ( addPeriodInto ( firstNonNull ( script ) ) ) ;
Code	String zipEntryPath = resolveVariable ( addPeriodInto ( firstNonNull ( script ) ) ) ;
Distance : 9

146
Tree	String zipEntryPath = findKernel ( script , this . currentScope ) ;
Code	String zipEntryPath = findKernel ( script , this . currentScope ) ;
Distance : 6

147
Tree	String zipEntryPath = LineUtilities ( script , script ) ;
Code	String zipEntryPath = LineUtilities ( script , script ) ;
Distance : 5

148
Tree	String zipEntryPath = resolveVariable ( getItemShape ( script . getSourceFileName () ) , STRING_CONSTANT , script , scopeCreator ) ;
Code	String zipEntryPath = resolveVariable ( getItemShape ( script . getSourceFileName () ) , STRING_CONSTANT , script , scopeCreator ) ;
Distance : 11

149
Tree	String zipEntryPath = extractCauseUnchecked ( script , this . currentScope ) ;
Code	String zipEntryPath = extractCauseUnchecked ( script , this . currentScope ) ;
Distance : 6

150
Tree	String dot = resolveVariable ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	String dot = resolveVariable ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 9

151
Tree	String zipEntryPath = findKernel ( script , STRING_CONSTANT + script + STRING_CONSTANT + STRING_CONSTANT ) ;
Code	String zipEntryPath = findKernel ( script , STRING_CONSTANT + script + STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 10

152
Tree	String loc = resolveVariable ( getPropDefFromClass ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Code	String loc = resolveVariable ( getPropDefFromClass ( script . getSourceFileName ( script . getSourceFileName () ) ) ) ;
Distance : 10

153
Tree	String zipEntryPath = resolveVariable ( script , script , BOOLEAN_TYPE ) ;
Code	String zipEntryPath = resolveVariable ( script , script , BOOLEAN_TYPE ) ;
Distance : 6

154
Tree	String zipEntryPath = resolveVariable ( script . getSourceFileName () ) . getTemplateTypes ( STRING_CONSTANT ) ;
Code	String zipEntryPath = resolveVariable ( script . getSourceFileName () ) . getTemplateTypes ( STRING_CONSTANT ) ;
Distance : 7

155
Tree	String zipEntryPath = resolveVariable ( addPeriodInto ( script . getAsNominalType ( script . getSourceFileName () ) ) ) ;
Code	String zipEntryPath = resolveVariable ( addPeriodInto ( script . getAsNominalType ( script . getSourceFileName () ) ) ) ;
Distance : 10

156
Tree	String zipEntryPath = resolveVariable ( script , STRING_CONSTANT + var + STRING_CONSTANT + STRING_CONSTANT ) ;
Code	String zipEntryPath = resolveVariable ( script , STRING_CONSTANT + var + STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 10

157
Tree	String zipEntryPath = extractCauseUnchecked ( script , script ) ;
Code	String zipEntryPath = extractCauseUnchecked ( script , script ) ;
Distance : 5

158
Tree	String zipEntryPath = resolveVariable ( var , this . currentScope ) ;
Code	String zipEntryPath = resolveVariable ( var , this . currentScope ) ;
Distance : 7

159
Tree	String zipEntryPath = getOrCreateName ( script , script , BOOLEAN_TYPE ) ;
Code	String zipEntryPath = getOrCreateName ( script , script , BOOLEAN_TYPE ) ;
Distance : 6

160
Tree	String zipEntryPath = resolveVariable ( script , firstNonNull ( firstNonNull ( script . getSourceFileName () ) ) ) ;
Code	String zipEntryPath = resolveVariable ( script , firstNonNull ( firstNonNull ( script . getSourceFileName () ) ) ) ;
Distance : 10

161
Tree	String loc = resolveVariable ( s.parent , script ) ;
Code	String loc = resolveVariable ( s.parent , script ) ;
Distance : 6

162
Tree	String zipEntryPath = resolveVariable ( AnnotationAppender.ValueFilter.AppendDefaults.INSTANCE , script ) ;
Code	String zipEntryPath = resolveVariable ( AnnotationAppender.ValueFilter.AppendDefaults.INSTANCE , script ) ;
Distance : 6

163
Tree	String loc = resolveVariable ( script , firstNonNull ( firstNonNull ( script . getSourceFileName () ) ) ) ;
Code	String loc = resolveVariable ( script , firstNonNull ( firstNonNull ( script . getSourceFileName () ) ) ) ;
Distance : 10

164
Tree	String zipEntryPath = resolveVariable ( var , NUMBER_CONSTANT ) ;
Code	String zipEntryPath = resolveVariable ( var , NUMBER_CONSTANT ) ;
Distance : 6

165
Tree	String zipEntryPath = resolveVariable ( addPeriodInto ( withMockFeatures ( script ) ) ) ;
Code	String zipEntryPath = resolveVariable ( addPeriodInto ( withMockFeatures ( script ) ) ) ;
Distance : 9

166
Tree	String zipEntryPath = extractCauseUnchecked ( script , STRING_CONSTANT + script + STRING_CONSTANT + STRING_CONSTANT ) ;
Code	String zipEntryPath = extractCauseUnchecked ( script , STRING_CONSTANT + script + STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 10

167
Tree	String zipEntryPath = findKernel ( script , firstNonNull ( script . getSourceFileName () ) ) ;
Code	String zipEntryPath = findKernel ( script , firstNonNull ( script . getSourceFileName () ) ) ;
Distance : 7

168
Tree	String zipEntryPath = getOrCreateName ( s.parent , script ) ;
Code	String zipEntryPath = getOrCreateName ( s.parent , script ) ;
Distance : 6

169
Tree	String varValue = Entities ( script , script ) ;
Code	String varValue = Entities ( script , script ) ;
Distance : 5

170
Tree	String lValueName = resolveVariable ( script , that.gradientPaintTransformer ) ;
Code	String lValueName = resolveVariable ( script , that.gradientPaintTransformer ) ;
Distance : 5

171
Tree	String zipEntryPath = resolveVariable ( addPeriodInto ( script . getSourceFileName () ) , super ) ;
Code	String zipEntryPath = resolveVariable ( addPeriodInto ( script . getSourceFileName () ) , super ) ;
Distance : 7

172
Tree	String zipEntryPath = resolveVariable ( script . getSourceFileName () ) . contains ( STRING_CONSTANT ) ;
Code	String zipEntryPath = resolveVariable ( script . getSourceFileName () ) . contains ( STRING_CONSTANT ) ;
Distance : 7

173
Tree	String zipEntryPath = resolveVariable ( var , STRING_CONSTANT + script + STRING_CONSTANT + STRING_CONSTANT ) ;
Code	String zipEntryPath = resolveVariable ( var , STRING_CONSTANT + script + STRING_CONSTANT + STRING_CONSTANT ) ;
Distance : 10

174
Tree	String loc = resolveVariable ( addPeriodInto ( script . getSourceFileName () ) , STRING_CONSTANT , script , scopeCreator ) ;
Code	String loc = resolveVariable ( addPeriodInto ( script . getSourceFileName () ) , STRING_CONSTANT , script , scopeCreator ) ;
Distance : 11

175
Tree	String zipEntryPath = resolveVariable ( addPeriodInto ( script . getSourceFileName () ) , STRING_CONSTANT , script . toStringTree () ) ;
Code	String zipEntryPath = resolveVariable ( addPeriodInto ( script . getSourceFileName () ) , STRING_CONSTANT , script . toStringTree () ) ;
Distance : 12

176
Tree	String loc = resolveVariable ( script . getSourceFileName () ) . getTemplateTypes ( STRING_CONSTANT ) ;
Code	String loc = resolveVariable ( script . getSourceFileName () ) . getTemplateTypes ( STRING_CONSTANT ) ;
Distance : 7

177
Tree	String zipEntryPath = resolveVariable ( script . getSourceFileName () ) . isNotEqualTo ( STRING_CONSTANT ) ;
Code	String zipEntryPath = resolveVariable ( script . getSourceFileName () ) . isNotEqualTo ( STRING_CONSTANT ) ;
Distance : 7

178
Tree	String zipEntryPath = resolveVariable ( script . getAsNominalType () ) . getTemplateTypes ( STRING_CONSTANT ) ;
Code	String zipEntryPath = resolveVariable ( script . getAsNominalType () ) . getTemplateTypes ( STRING_CONSTANT ) ;
Distance : 8

179
Tree	String zipEntryPath = resolveVariable ( getPropDefFromClass ( script . getSourceFileName () ) , CHAR_CONS ) ;
Code	String zipEntryPath = resolveVariable ( getPropDefFromClass ( script . getSourceFileName () ) , CHAR_CONS ) ;
Distance : 7

180
Tree	String zipEntryPath = resolveVariable ( getItemShape ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Code	String zipEntryPath = resolveVariable ( getItemShape ( script . getSourceFileName () ) , STRING_CONSTANT , CHAR_CONS ) ;
Distance : 9

181
Tree	String zipEntryPath = resolveVariable ( script . getSourceFileName () ) . mockable ( STRING_CONSTANT ) ;
Code	String zipEntryPath = resolveVariable ( script . getSourceFileName () ) . mockable ( STRING_CONSTANT ) ;
Distance : 7

182
Tree	String loc = resolveVariable ( TokenType.STRING , script ) ;
Code	String loc = resolveVariable ( TokenType.STRING , script ) ;
Distance : 6

183
Tree	String zipEntryPath = resolveVariable ( getPropDefFromClass ( script . getSourceFileName () ) , STRING_CONSTANT , script . toStringTree () ) ;
Code	String zipEntryPath = resolveVariable ( getPropDefFromClass ( script . getSourceFileName () ) , STRING_CONSTANT , script . toStringTree () ) ;
Distance : 12

184
Tree	String zipEntryPath = resolveVariable ( addPeriodInto ( firstNonNull ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , scopeCreator ) ;
Code	String zipEntryPath = resolveVariable ( addPeriodInto ( firstNonNull ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , scopeCreator ) ;
Distance : 14

185
Tree	String zipEntryPath = resolveVariable ( addPeriodInto ( getDeclaredVar ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , scopeCreator ) ;
Code	String zipEntryPath = resolveVariable ( addPeriodInto ( getDeclaredVar ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , scopeCreator ) ;
Distance : 14

186
Tree	String zipEntryPath = resolveVariable ( addPeriodInto ( firstNonNull ( script . getSourceFileName () ) ) , TokenType.STRING ) ;
Code	String zipEntryPath = resolveVariable ( addPeriodInto ( firstNonNull ( script . getSourceFileName () ) ) , TokenType.STRING ) ;
Distance : 10

187
Tree	String zipEntryPath = resolveVariable ( addPeriodInto ( getDeclaredVar ( script . getSourceFileName () ) ) , TokenType.STRING ) ;
Code	String zipEntryPath = resolveVariable ( addPeriodInto ( getDeclaredVar ( script . getSourceFileName () ) ) , TokenType.STRING ) ;
Distance : 10

188
Tree	String zipEntryPath = resolveVariable ( addPeriodInto ( withMockFeatures ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , scopeCreator ) ;
Code	String zipEntryPath = resolveVariable ( addPeriodInto ( withMockFeatures ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , scopeCreator ) ;
Distance : 14

189
Tree	String zipEntryPath = resolveVariable ( addPeriodInto ( withMockFeatures ( script . getSourceFileName () ) ) , TokenType.STRING ) ;
Code	String zipEntryPath = resolveVariable ( addPeriodInto ( withMockFeatures ( script . getSourceFileName () ) ) , TokenType.STRING ) ;
Distance : 10

190
Tree	String zipEntryPath = resolveVariable ( addPeriodInto ( createUnionType ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , scopeCreator ) ;
Code	String zipEntryPath = resolveVariable ( addPeriodInto ( createUnionType ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , scopeCreator ) ;
Distance : 14

191
Tree	String zipEntryPath = resolveVariable ( addPeriodInto ( createUnionType ( script . getSourceFileName () ) ) , TokenType.STRING ) ;
Code	String zipEntryPath = resolveVariable ( addPeriodInto ( createUnionType ( script . getSourceFileName () ) ) , TokenType.STRING ) ;
Distance : 10

192
Tree	String zipEntryPath = resolveVariable ( getPropDefFromClass ( firstNonNull ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , scopeCreator ) ;
Code	String zipEntryPath = resolveVariable ( getPropDefFromClass ( firstNonNull ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , scopeCreator ) ;
Distance : 14

193
Tree	String zipEntryPath = resolveVariable ( getItemShape ( firstNonNull ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , scopeCreator ) ;
Code	String zipEntryPath = resolveVariable ( getItemShape ( firstNonNull ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , scopeCreator ) ;
Distance : 14

194
Tree	String zipEntryPath = resolveVariable ( getPropDefFromClass ( firstNonNull ( script . getSourceFileName () ) ) , TokenType.STRING ) ;
Code	String zipEntryPath = resolveVariable ( getPropDefFromClass ( firstNonNull ( script . getSourceFileName () ) ) , TokenType.STRING ) ;
Distance : 10

195
Tree	String zipEntryPath = resolveVariable ( getItemShape ( firstNonNull ( script . getSourceFileName () ) ) , TokenType.STRING ) ;
Code	String zipEntryPath = resolveVariable ( getItemShape ( firstNonNull ( script . getSourceFileName () ) ) , TokenType.STRING ) ;
Distance : 10

196
Tree	String zipEntryPath = resolveVariable ( getPropDefFromClass ( withMockFeatures ( script . getSourceFileName () ) ) , TokenType.STRING ) ;
Code	String zipEntryPath = resolveVariable ( getPropDefFromClass ( withMockFeatures ( script . getSourceFileName () ) ) , TokenType.STRING ) ;
Distance : 10

197
Tree	String zipEntryPath = resolveVariable ( getPropDefFromClass ( withMockFeatures ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , scopeCreator ) ;
Code	String zipEntryPath = resolveVariable ( getPropDefFromClass ( withMockFeatures ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , scopeCreator ) ;
Distance : 14

198
Tree	String zipEntryPath = resolveVariable ( getPropDefFromClass ( createUnionType ( script . getSourceFileName () ) ) , TokenType.STRING ) ;
Code	String zipEntryPath = resolveVariable ( getPropDefFromClass ( createUnionType ( script . getSourceFileName () ) ) , TokenType.STRING ) ;
Distance : 10

199
Tree	String zipEntryPath = resolveVariable ( getPropDefFromClass ( createUnionType ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , scopeCreator ) ;
Code	String zipEntryPath = resolveVariable ( getPropDefFromClass ( createUnionType ( script . getSourceFileName () ) ) , STRING_CONSTANT , script , scopeCreator ) ;
Distance : 14

========================================================================


========================================================================
Example Number: 33
Parent Code is: 
c . canInline ()
-------------------------------------------------------------------------------
Child code is: 
c . canInline ( t . getScope () )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (32 (800{val=c}) (235{val=.}) (802{val=canInline}) (216{val=()})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (32 (800{val=c}) (235{val=.}) (802{val=canInline}) (214{val=(}) (32 (800{val=t}) (235{val=.}) (802{val=getScope}) (216{val=()})) (215{val=)})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Closure/3/parent/src_com_google_javascript_jscomp_FlowSensitiveInlineVariables.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	new InjectTestCase ( c ) . getDeclaredType ()
Code	new InjectTestCase ( c ) . getDeclaredType ()
Distance : 7

1
Tree	c . isOr ( Feature.MODULES )
Code	c . isOr ( Feature.MODULES )
Distance : 5

2
Tree	( ( c ) c ) . mockable ()
Code	( ( c ) c ) . mockable ()
Distance : 8

3
Tree	( ( c ) c ) . toDurationMillis ()
Code	( ( c ) c ) . toDurationMillis ()
Distance : 8

4
Tree	( ( c ) c ) . getDeclaredType ()
Code	( ( c ) c ) . getDeclaredType ()
Distance : 8

5
Tree	c . getFailures ( c )
Code	c . getFailures ( c )
Distance : 5

6
Tree	c . isBoxableScalar ()
Code	c . isBoxableScalar ()
Distance : 6

7
Tree	this . c . getFailures ()
Code	this . c . getFailures ()
Distance : 6

8
Tree	c . isOr ( c )
Code	c . isOr ( c )
Distance : 5

9
Tree	new ObjectStreamClass ( c ) . getDeclaredType ()
Code	new ObjectStreamClass ( c ) . getDeclaredType ()
Distance : 7

10
Tree	c . isAdd ( c )
Code	c . isAdd ( c )
Distance : 5

11
Tree	this . c . isDec ()
Code	this . c . isDec ()
Distance : 6

12
Tree	new UnicodeUnescaper ( c ) . getDeclaredType ()
Code	new UnicodeUnescaper ( c ) . getDeclaredType ()
Distance : 7

13
Tree	c . isOnlyModifiesThisCall ( c )
Code	c . isOnlyModifiesThisCall ( c )
Distance : 5

14
Tree	this . c . getExportPostfix ()
Code	this . c . getExportPostfix ()
Distance : 6

15
Tree	( ( c ) c ) . getPeriod ()
Code	( ( c ) c ) . getPeriod ()
Distance : 8

16
Tree	c . isLoggable ( c )
Code	c . isLoggable ( c )
Distance : 5

17
Tree	c . getTypeNodes ( c )
Code	c . getTypeNodes ( c )
Distance : 5

18
Tree	isOr ()
Code	isOr ()
Distance : 8

19
Tree	c . hasExistingFunctionDefinition ( Feature.MODULES )
Code	c . hasExistingFunctionDefinition ( Feature.MODULES )
Distance : 5

20
Tree	getParameterNames ()
Code	getParameterNames ()
Distance : 8

21
Tree	new PomComparator ( c ) . getDeclaredType ()
Code	new PomComparator ( c ) . getDeclaredType ()
Distance : 7

22
Tree	this . c . shutdown ()
Code	this . c . shutdown ()
Distance : 6

23
Tree	c . isAdd ( Feature.MODULES )
Code	c . isAdd ( Feature.MODULES )
Distance : 5

24
Tree	new ExportTestFunctionsNodes ( c ) . getDeclaredType ()
Code	new ExportTestFunctionsNodes ( c ) . getDeclaredType ()
Distance : 7

25
Tree	new InitialGuess ( c ) . getDeclaredType ()
Code	new InitialGuess ( c ) . getDeclaredType ()
Distance : 7

26
Tree	c . isBoxableScalar ( c )
Code	c . isBoxableScalar ( c )
Distance : 5

27
Tree	c . hasExistingFunctionDefinition ()
Code	c . hasExistingFunctionDefinition ()
Distance : 6

28
Tree	c . getFailures ()
Code	c . getFailures ()
Distance : 6

29
Tree	getBody ()
Code	getBody ()
Distance : 8

30
Tree	c . isOr ()
Code	c . isOr ()
Distance : 6

31
Tree	getFailures ()
Code	getFailures ()
Distance : 8

32
Tree	c . isAdd ()
Code	c . isAdd ()
Distance : 6

33
Tree	c . getFailures ( Feature.MODULES )
Code	c . getFailures ( Feature.MODULES )
Distance : 5

34
Tree	this . c . getBottomObject ()
Code	this . c . getBottomObject ()
Distance : 6

35
Tree	c . isOnlyModifiesThisCall ()
Code	c . isOnlyModifiesThisCall ()
Distance : 6

36
Tree	c . hasExistingFunctionDefinition ( c )
Code	c . hasExistingFunctionDefinition ( c )
Distance : 5

37
Tree	getKnownRequires ()
Code	getKnownRequires ()
Distance : 8

38
Tree	c . isLoggable ()
Code	c . isLoggable ()
Distance : 6

39
Tree	c . getFailures ( c . hasExistingFunctionDefinition () )
Code	c . getFailures ( c . hasExistingFunctionDefinition () )
Distance : 3

40
Tree	c . isAdd ( c , c )
Code	c . isAdd ( c , c )
Distance : 5

41
Tree	c . isOr ( null )
Code	c . isOr ( null )
Distance : 5

42
Tree	c . isOnlyModifiesThisCall ( Feature.MODULES )
Code	c . isOnlyModifiesThisCall ( Feature.MODULES )
Distance : 5

43
Tree	c . isOr () . getAlternatesWithoutStructuralTyping ()
Code	c . isOr () . getAlternatesWithoutStructuralTyping ()
Distance : 5

44
Tree	c . getFailures ( c . getFailures () )
Code	c . getFailures ( c . getFailures () )
Distance : 3

45
Tree	c . hasExistingFunctionDefinition ( c ) . getDeclaredType ()
Code	c . hasExistingFunctionDefinition ( c ) . getDeclaredType ()
Distance : 5

46
Tree	this . c . getChangeStamp ()
Code	this . c . getChangeStamp ()
Distance : 6

47
Tree	hasExistingFunctionDefinition ( c )
Code	hasExistingFunctionDefinition ( c )
Distance : 7

48
Tree	c . getTypeNodes ()
Code	c . getTypeNodes ()
Distance : 6

49
Tree	getEnums ( c )
Code	getEnums ( c )
Distance : 7

50
Tree	new ThreeEighthesStepInterpolator ( c ) . getDeclaredType ()
Code	new ThreeEighthesStepInterpolator ( c ) . getDeclaredType ()
Distance : 7

51
Tree	c . isBoxableScalar ( Feature.MODULES )
Code	c . isBoxableScalar ( Feature.MODULES )
Distance : 5

52
Tree	getBody ( c )
Code	getBody ( c )
Distance : 7

53
Tree	hasExistingFunctionDefinition ()
Code	hasExistingFunctionDefinition ()
Distance : 8

54
Tree	this . c . getPropertyReservedNamingNonFirstChars ()
Code	this . c . getPropertyReservedNamingNonFirstChars ()
Distance : 6

55
Tree	c . isBoxableScalar ( c , c )
Code	c . isBoxableScalar ( c , c )
Distance : 5

56
Tree	( ( c ) c ) . clearInvocations ()
Code	( ( c ) c ) . clearInvocations ()
Distance : 8

57
Tree	c . isOnlyModifiesThisCall ( c , c )
Code	c . isOnlyModifiesThisCall ( c , c )
Distance : 5

58
Tree	getEnums ()
Code	getEnums ()
Distance : 8

59
Tree	c . getFailures ( c . getPropertyMap () )
Code	c . getFailures ( c . getPropertyMap () )
Distance : 3

60
Tree	c . isOnlyModifiesThisCall ( c ) . getPeriod ()
Code	c . isOnlyModifiesThisCall ( c ) . getPeriod ()
Distance : 5

61
Tree	c . hasExistingFunctionDefinition ( STRING_CONSTANT )
Code	c . hasExistingFunctionDefinition ( STRING_CONSTANT )
Distance : 5

62
Tree	c . getFailures ( c ) . getPeriod ()
Code	c . getFailures ( c ) . getPeriod ()
Distance : 5

63
Tree	c . isAdd ( STRING_CONSTANT )
Code	c . isAdd ( STRING_CONSTANT )
Distance : 5

64
Tree	this . c . setTaintsGlobalState ()
Code	this . c . setTaintsGlobalState ()
Distance : 6

65
Tree	c . hasExistingFunctionDefinition ( c , c )
Code	c . hasExistingFunctionDefinition ( c , c )
Distance : 5

66
Tree	c . isOr ( c , c )
Code	c . isOr ( c , c )
Distance : 5

67
Tree	c . getTypeNodes ( null )
Code	c . getTypeNodes ( null )
Distance : 5

68
Tree	c . getFailures ( c . objectlit () )
Code	c . getFailures ( c . objectlit () )
Distance : 3

69
Tree	c . isOnlyModifiesThisCall ( STRING_CONSTANT )
Code	c . isOnlyModifiesThisCall ( STRING_CONSTANT )
Distance : 5

70
Tree	c . getFailures ( c , c )
Code	c . getFailures ( c , c )
Distance : 5

71
Tree	c . hasExistingFunctionDefinition ( c . objectlit () )
Code	c . hasExistingFunctionDefinition ( c . objectlit () )
Distance : 3

72
Tree	c . getFailures ( STRING_CONSTANT )
Code	c . getFailures ( STRING_CONSTANT )
Distance : 5

73
Tree	isOr ( c , c )
Code	isOr ( c , c )
Distance : 7

74
Tree	new UnfinishedStubbingStatement ( c ) . getDeclaredType ()
Code	new UnfinishedStubbingStatement ( c ) . getDeclaredType ()
Distance : 7

75
Tree	new ObjectStreamClass ( c ) . getDeclaredType ( c )
Code	new ObjectStreamClass ( c ) . getDeclaredType ( c )
Distance : 8

76
Tree	isConstDeclaration ( c )
Code	isConstDeclaration ( c )
Distance : 7

77
Tree	getKnownRequires ( c )
Code	getKnownRequires ( c )
Distance : 7

78
Tree	( ( c ) c ) . destroy ()
Code	( ( c ) c ) . destroy ()
Distance : 8

79
Tree	getFailures ( c )
Code	getFailures ( c )
Distance : 7

80
Tree	c . isLoggable ( Feature.MODULES )
Code	c . isLoggable ( Feature.MODULES )
Distance : 5

81
Tree	( ( c ) c ) . shutdown ()
Code	( ( c ) c ) . shutdown ()
Distance : 8

82
Tree	new UnicodeUnescaper ( c ) . getDeclaredType ( c )
Code	new UnicodeUnescaper ( c ) . getDeclaredType ( c )
Distance : 8

83
Tree	isOr ( c )
Code	isOr ( c )
Distance : 7

84
Tree	c . hasExistingFunctionDefinition ( null )
Code	c . hasExistingFunctionDefinition ( null )
Distance : 5

85
Tree	( ( c ) c ) . isYield ()
Code	( ( c ) c ) . isYield ()
Distance : 8

86
Tree	c . isBoxableScalar ( null )
Code	c . isBoxableScalar ( null )
Distance : 5

87
Tree	c . hasExistingFunctionDefinition () . resetReturnValues ()
Code	c . hasExistingFunctionDefinition () . resetReturnValues ()
Distance : 5

88
Tree	c . getFailures ( null )
Code	c . getFailures ( null )
Distance : 5

89
Tree	c . hasExistingFunctionDefinition ( c . getPropertyMap () )
Code	c . hasExistingFunctionDefinition ( c . getPropertyMap () )
Distance : 3

90
Tree	isConstDeclaration ()
Code	isConstDeclaration ()
Distance : 8

91
Tree	c . hasExistingFunctionDefinition () . getAlternatesWithoutStructuralTyping ()
Code	c . hasExistingFunctionDefinition () . getAlternatesWithoutStructuralTyping ()
Distance : 5

92
Tree	c . isAdd ( null )
Code	c . isAdd ( null )
Distance : 5

93
Tree	c . hasExistingFunctionDefinition ( c . getFailures () )
Code	c . hasExistingFunctionDefinition ( c . getFailures () )
Distance : 3

94
Tree	c . isOr ( c ) . getDeclaredType ()
Code	c . isOr ( c ) . getDeclaredType ()
Distance : 5

95
Tree	new InitialGuess ( c ) . getDeclaredType ( c )
Code	new InitialGuess ( c ) . getDeclaredType ( c )
Distance : 8

96
Tree	c . hasExistingFunctionDefinition () . getAlternatesWithoutStructuralTyping ( c )
Code	c . hasExistingFunctionDefinition () . getAlternatesWithoutStructuralTyping ( c )
Distance : 6

97
Tree	c . hasExistingFunctionDefinition () . getChronologyUTC ()
Code	c . hasExistingFunctionDefinition () . getChronologyUTC ()
Distance : 5

98
Tree	getParameterNames ( c )
Code	getParameterNames ( c )
Distance : 7

99
Tree	c . isLoggable ( STRING_CONSTANT )
Code	c . isLoggable ( STRING_CONSTANT )
Distance : 5

100
Tree	getBody ( c , c )
Code	getBody ( c , c )
Distance : 7

101
Tree	c . isAdd () . getAlternatesWithoutStructuralTyping ()
Code	c . isAdd () . getAlternatesWithoutStructuralTyping ()
Distance : 5

102
Tree	new ExportTestFunctionsNodes ( c ) . getDeclaredType ( c )
Code	new ExportTestFunctionsNodes ( c ) . getDeclaredType ( c )
Distance : 8

103
Tree	c . getFailures () . getAlternatesWithoutStructuralTyping ()
Code	c . getFailures () . getAlternatesWithoutStructuralTyping ()
Distance : 5

104
Tree	c . hasExistingFunctionDefinition ( c ) . getPeriod ()
Code	c . hasExistingFunctionDefinition ( c ) . getPeriod ()
Distance : 5

105
Tree	c . isLoggable ( null )
Code	c . isLoggable ( null )
Distance : 5

106
Tree	c . isBoxableScalar ( STRING_CONSTANT )
Code	c . isBoxableScalar ( STRING_CONSTANT )
Distance : 5

107
Tree	c . getFailures () . getAlternatesWithoutStructuralTyping ( c )
Code	c . getFailures () . getAlternatesWithoutStructuralTyping ( c )
Distance : 6

108
Tree	c . isOnlyModifiesThisCall ( null )
Code	c . isOnlyModifiesThisCall ( null )
Distance : 5

109
Tree	isOr () . getAlternatesWithoutStructuralTyping ( c )
Code	isOr () . getAlternatesWithoutStructuralTyping ( c )
Distance : 7

110
Tree	c . isOnlyModifiesThisCall () . getAlternatesWithoutStructuralTyping ()
Code	c . isOnlyModifiesThisCall () . getAlternatesWithoutStructuralTyping ()
Distance : 5

111
Tree	new Coordinates2D () . getAlternatesWithoutStructuralTyping ( c )
Code	new Coordinates2D () . getAlternatesWithoutStructuralTyping ( c )
Distance : 8

112
Tree	c . hasExistingFunctionDefinition ( c . hasExistingFunctionDefinition () )
Code	c . hasExistingFunctionDefinition ( c . hasExistingFunctionDefinition () )
Distance : 3

113
Tree	new HashSet () . getAlternatesWithoutStructuralTyping ( c )
Code	new HashSet () . getAlternatesWithoutStructuralTyping ( c )
Distance : 8

114
Tree	new ExportInfo () . getAlternatesWithoutStructuralTyping ( c )
Code	new ExportInfo () . getAlternatesWithoutStructuralTyping ( c )
Distance : 8

115
Tree	c . getFailures ( c ) . getDeclaredType ()
Code	c . getFailures ( c ) . getDeclaredType ()
Distance : 5

116
Tree	getKnownRequires ( c , c )
Code	getKnownRequires ( c , c )
Distance : 7

117
Tree	getParameterNames ( c , c )
Code	getParameterNames ( c , c )
Distance : 7

118
Tree	c . hasExistingFunctionDefinition () . isOr ()
Code	c . hasExistingFunctionDefinition () . isOr ()
Distance : 5

119
Tree	c . isOr ( c ) . getPeriod ()
Code	c . isOr ( c ) . getPeriod ()
Distance : 5

120
Tree	new UnfinishedStubbingStatement ( c ) . getDeclaredType ( c )
Code	new UnfinishedStubbingStatement ( c ) . getDeclaredType ( c )
Distance : 8

121
Tree	child.parent . isOr ()
Code	child.parent . isOr ()
Distance : 7

122
Tree	c . isOr ( STRING_CONSTANT )
Code	c . isOr ( STRING_CONSTANT )
Distance : 5

123
Tree	c . getTypeNodes ( Feature.MODULES )
Code	c . getTypeNodes ( Feature.MODULES )
Distance : 5

124
Tree	new InjectTestCase ( c ) . getDeclaredType ( c )
Code	new InjectTestCase ( c ) . getDeclaredType ( c )
Distance : 8

125
Tree	new MockSettingsImpl () . getAlternatesWithoutStructuralTyping ( c )
Code	new MockSettingsImpl () . getAlternatesWithoutStructuralTyping ( c )
Distance : 8

126
Tree	getKnownRequires () . getAlternatesWithoutStructuralTyping ( c )
Code	getKnownRequires () . getAlternatesWithoutStructuralTyping ( c )
Distance : 7

127
Tree	new Coordinates2D () . isBoxableScalar ( c )
Code	new Coordinates2D () . isBoxableScalar ( c )
Distance : 8

128
Tree	c . getTypeNodes ( STRING_CONSTANT )
Code	c . getTypeNodes ( STRING_CONSTANT )
Distance : 5

129
Tree	new Node () . getAlternatesWithoutStructuralTyping ( c )
Code	new Node () . getAlternatesWithoutStructuralTyping ( c )
Distance : 8

130
Tree	child.parent . hasExistingFunctionDefinition ()
Code	child.parent . hasExistingFunctionDefinition ()
Distance : 7

131
Tree	c . isLoggable ( c , c )
Code	c . isLoggable ( c , c )
Distance : 5

132
Tree	isOr () . isOr ( c )
Code	isOr () . isOr ( c )
Distance : 7

133
Tree	hasExistingFunctionDefinition ( c , c )
Code	hasExistingFunctionDefinition ( c , c )
Distance : 7

134
Tree	c . getTypeNodes ( c , c )
Code	c . getTypeNodes ( c , c )
Distance : 5

135
Tree	getParameterNames () . getAlternatesWithoutStructuralTyping ( c )
Code	getParameterNames () . getAlternatesWithoutStructuralTyping ( c )
Distance : 7

136
Tree	isConstDeclaration ( c , c )
Code	isConstDeclaration ( c , c )
Distance : 7

137
Tree	Calendar.JANUARY . getKnownRequires ()
Code	Calendar.JANUARY . getKnownRequires ()
Distance : 7

138
Tree	new HashSet () . isBoxableScalar ( c )
Code	new HashSet () . isBoxableScalar ( c )
Distance : 8

139
Tree	c . hasExistingFunctionDefinition () . resetReturnValues ( c )
Code	c . hasExistingFunctionDefinition () . resetReturnValues ( c )
Distance : 6

140
Tree	child.parent . getKnownRequires ()
Code	child.parent . getKnownRequires ()
Distance : 7

141
Tree	new PomComparator ( c ) . getDeclaredType ( c )
Code	new PomComparator ( c ) . getDeclaredType ( c )
Distance : 8

142
Tree	Calendar.JANUARY . isOr ()
Code	Calendar.JANUARY . isOr ()
Distance : 7

143
Tree	new LocalQName () . getAlternatesWithoutStructuralTyping ( c )
Code	new LocalQName () . getAlternatesWithoutStructuralTyping ( c )
Distance : 8

144
Tree	c . isAdd () . getAlternatesWithoutStructuralTyping ( c )
Code	c . isAdd () . getAlternatesWithoutStructuralTyping ( c )
Distance : 6

145
Tree	getBody () . getAlternatesWithoutStructuralTyping ( c )
Code	getBody () . getAlternatesWithoutStructuralTyping ( c )
Distance : 7

146
Tree	c . isAdd ( c ) . getPeriod ()
Code	c . isAdd ( c ) . getPeriod ()
Distance : 5

147
Tree	getEnums ( c , c )
Code	getEnums ( c , c )
Distance : 7

148
Tree	getParameterNames () . isOr ( c )
Code	getParameterNames () . isOr ( c )
Distance : 7

149
Tree	c . isOr () . getAlternatesWithoutStructuralTyping ( c )
Code	c . isOr () . getAlternatesWithoutStructuralTyping ( c )
Distance : 6

150
Tree	c . hasExistingFunctionDefinition ( toComparison () , c . getExportPostfix () )
Code	c . hasExistingFunctionDefinition ( toComparison () , c . getExportPostfix () )
Distance : 6

151
Tree	getKnownRequires () . isOr ( c )
Code	getKnownRequires () . isOr ( c )
Distance : 7

152
Tree	Calendar.JANUARY . hasExistingFunctionDefinition ()
Code	Calendar.JANUARY . hasExistingFunctionDefinition ()
Distance : 7

153
Tree	c . getFailures ( c , c . getExportPostfix () )
Code	c . getFailures ( c , c . getExportPostfix () )
Distance : 5

154
Tree	c . hasExistingFunctionDefinition () . getAlternatesWithoutStructuralTyping ( TypeInferenceMode.NEITHER )
Code	c . hasExistingFunctionDefinition () . getAlternatesWithoutStructuralTyping ( TypeInferenceMode.NEITHER )
Distance : 6

155
Tree	c . isOnlyModifiesThisCall () . getAlternatesWithoutStructuralTyping ( c )
Code	c . isOnlyModifiesThisCall () . getAlternatesWithoutStructuralTyping ( c )
Distance : 6

156
Tree	new ThreeEighthesStepInterpolator ( c ) . getDeclaredType ( c )
Code	new ThreeEighthesStepInterpolator ( c ) . getDeclaredType ( c )
Distance : 8

157
Tree	c . hasExistingFunctionDefinition () . isOr ( c )
Code	c . hasExistingFunctionDefinition () . isOr ( c )
Distance : 6

158
Tree	c . hasExistingFunctionDefinition () . getChronologyUTC ( c )
Code	c . hasExistingFunctionDefinition () . getChronologyUTC ( c )
Distance : 6

159
Tree	c . hasExistingFunctionDefinition ( c . getPropertyMap () , c . getExportPostfix () )
Code	c . hasExistingFunctionDefinition ( c . getPropertyMap () , c . getExportPostfix () )
Distance : 8

160
Tree	c . hasExistingFunctionDefinition ( c . hasExistingFunctionDefinition () , c . getExportPostfix () )
Code	c . hasExistingFunctionDefinition ( c . hasExistingFunctionDefinition () , c . getExportPostfix () )
Distance : 8

161
Tree	getFailures ( c , c )
Code	getFailures ( c , c )
Distance : 7

162
Tree	getBody () . isOr ( c )
Code	getBody () . isOr ( c )
Distance : 7

163
Tree	c . getFailures () . getAlternatesWithoutStructuralTyping ( Calendar.JANUARY )
Code	c . getFailures () . getAlternatesWithoutStructuralTyping ( Calendar.JANUARY )
Distance : 6

164
Tree	c . isOr ( c , c . getExportPostfix () )
Code	c . isOr ( c , c . getExportPostfix () )
Distance : 5

165
Tree	c . hasExistingFunctionDefinition ( c , c . objectlit () )
Code	c . hasExistingFunctionDefinition ( c , c . objectlit () )
Distance : 5

166
Tree	c . getFailures () . getAlternatesWithoutStructuralTyping ( TypeInferenceMode.NEITHER )
Code	c . getFailures () . getAlternatesWithoutStructuralTyping ( TypeInferenceMode.NEITHER )
Distance : 6

167
Tree	c . isAdd ( c , c . getExportPostfix () )
Code	c . isAdd ( c , c . getExportPostfix () )
Distance : 5

168
Tree	NodeUtil.isNameDeclaration . getKnownRequires ()
Code	NodeUtil.isNameDeclaration . getKnownRequires ()
Distance : 7

169
Tree	c . hasExistingFunctionDefinition ( c , c . makeDeclared () )
Code	c . hasExistingFunctionDefinition ( c , c . makeDeclared () )
Distance : 5

170
Tree	c . getFailures ( c . getFailures () , c . getExportPostfix () )
Code	c . getFailures ( c . getFailures () , c . getExportPostfix () )
Distance : 8

171
Tree	c . hasExistingFunctionDefinition () . getAlternatesWithoutStructuralTyping ( Calendar.JANUARY )
Code	c . hasExistingFunctionDefinition () . getAlternatesWithoutStructuralTyping ( Calendar.JANUARY )
Distance : 6

172
Tree	c . hasExistingFunctionDefinition ( c , c . newUndefinedNode () )
Code	c . hasExistingFunctionDefinition ( c , c . newUndefinedNode () )
Distance : 5

173
Tree	TypeInferenceMode.NEITHER . getKnownRequires ()
Code	TypeInferenceMode.NEITHER . getKnownRequires ()
Distance : 7

174
Tree	c . getFailures ( c . hasExistingFunctionDefinition () , c . getExportPostfix () )
Code	c . getFailures ( c . hasExistingFunctionDefinition () , c . getExportPostfix () )
Distance : 8

175
Tree	c . isOr () . getAlternatesWithoutStructuralTyping ( TypeInferenceMode.NEITHER )
Code	c . isOr () . getAlternatesWithoutStructuralTyping ( TypeInferenceMode.NEITHER )
Distance : 6

176
Tree	isOr () . getAlternatesWithoutStructuralTyping ( TypeInferenceMode.NEITHER )
Code	isOr () . getAlternatesWithoutStructuralTyping ( TypeInferenceMode.NEITHER )
Distance : 7

177
Tree	c . hasExistingFunctionDefinition ( c . getFailures () , c . getExportPostfix () )
Code	c . hasExistingFunctionDefinition ( c . getFailures () , c . getExportPostfix () )
Distance : 8

178
Tree	c . hasExistingFunctionDefinition () . getAlternatesWithoutStructuralTyping ( LanguageMode.ECMASCRIPT5 )
Code	c . hasExistingFunctionDefinition () . getAlternatesWithoutStructuralTyping ( LanguageMode.ECMASCRIPT5 )
Distance : 6

179
Tree	isOr () . isOr ( TypeInferenceMode.NEITHER )
Code	isOr () . isOr ( TypeInferenceMode.NEITHER )
Distance : 7

180
Tree	getBody () . getAlternatesWithoutStructuralTyping ( TypeInferenceMode.NEITHER )
Code	getBody () . getAlternatesWithoutStructuralTyping ( TypeInferenceMode.NEITHER )
Distance : 7

181
Tree	c . hasExistingFunctionDefinition ( c . objectlit () , c . getExportPostfix () )
Code	c . hasExistingFunctionDefinition ( c . objectlit () , c . getExportPostfix () )
Distance : 8

182
Tree	c . hasExistingFunctionDefinition ( c , c . getExportPostfix () )
Code	c . hasExistingFunctionDefinition ( c , c . getExportPostfix () )
Distance : 5

183
Tree	c . isOnlyModifiesThisCall ( c , c . getExportPostfix () )
Code	c . isOnlyModifiesThisCall ( c , c . getExportPostfix () )
Distance : 5

184
Tree	c . hasExistingFunctionDefinition () . resetReturnValues ( TypeInferenceMode.NEITHER )
Code	c . hasExistingFunctionDefinition () . resetReturnValues ( TypeInferenceMode.NEITHER )
Distance : 6

185
Tree	c . getFailures () . getAlternatesWithoutStructuralTyping ( LanguageMode.ECMASCRIPT5 )
Code	c . getFailures () . getAlternatesWithoutStructuralTyping ( LanguageMode.ECMASCRIPT5 )
Distance : 6

186
Tree	getKnownRequires () . getAlternatesWithoutStructuralTyping ( TypeInferenceMode.NEITHER )
Code	getKnownRequires () . getAlternatesWithoutStructuralTyping ( TypeInferenceMode.NEITHER )
Distance : 7

187
Tree	c . getFailures ( c . objectlit () , c . getExportPostfix () )
Code	c . getFailures ( c . objectlit () , c . getExportPostfix () )
Distance : 8

188
Tree	c . getFailures ( toComparison () , c . getExportPostfix () )
Code	c . getFailures ( toComparison () , c . getExportPostfix () )
Distance : 6

189
Tree	getBody () . isOr ( TypeInferenceMode.NEITHER )
Code	getBody () . isOr ( TypeInferenceMode.NEITHER )
Distance : 7

190
Tree	c . hasExistingFunctionDefinition ( toDurationMillis () , c . getExportPostfix () )
Code	c . hasExistingFunctionDefinition ( toDurationMillis () , c . getExportPostfix () )
Distance : 6

191
Tree	c . getFailures ( c . getPropertyMap () , c . getExportPostfix () )
Code	c . getFailures ( c . getPropertyMap () , c . getExportPostfix () )
Distance : 8

192
Tree	getKnownRequires () . isOr ( TypeInferenceMode.NEITHER )
Code	getKnownRequires () . isOr ( TypeInferenceMode.NEITHER )
Distance : 7

193
Tree	isOr () . getAlternatesWithoutStructuralTyping ( Calendar.JANUARY )
Code	isOr () . getAlternatesWithoutStructuralTyping ( Calendar.JANUARY )
Distance : 7

194
Tree	getParameterNames () . getAlternatesWithoutStructuralTyping ( TypeInferenceMode.NEITHER )
Code	getParameterNames () . getAlternatesWithoutStructuralTyping ( TypeInferenceMode.NEITHER )
Distance : 7

195
Tree	c . hasExistingFunctionDefinition ( getNativeNullType () , c . getExportPostfix () )
Code	c . hasExistingFunctionDefinition ( getNativeNullType () , c . getExportPostfix () )
Distance : 6

196
Tree	c . hasExistingFunctionDefinition ( extractFirstArgumentName () , c . getExportPostfix () )
Code	c . hasExistingFunctionDefinition ( extractFirstArgumentName () , c . getExportPostfix () )
Distance : 6

197
Tree	c . hasExistingFunctionDefinition ( getLValue () , c . getExportPostfix () )
Code	c . hasExistingFunctionDefinition ( getLValue () , c . getExportPostfix () )
Distance : 6

198
Tree	c . isOr ( toComparison () , c . getExportPostfix () )
Code	c . isOr ( toComparison () , c . getExportPostfix () )
Distance : 6

199
Tree	c . hasExistingFunctionDefinition ( toComparison () , c . getPropertyReservedNamingNonFirstChars () )
Code	c . hasExistingFunctionDefinition ( toComparison () , c . getPropertyReservedNamingNonFirstChars () )
Distance : 6

========================================================================


========================================================================
Example Number: 34
Parent Code is: 
int len = thisBuf.length - strLen ;
-------------------------------------------------------------------------------
Child code is: 
int len = size - strLen + NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=len}) (204{val==}) (27 (40{val=thisBuf.length}) (201{val=-}) (800{val=strLen}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=len}) (204{val==}) (27 (27 (800{val=size}) (201{val=-}) (800{val=strLen})) (200{val=+}) (34{val=NUMBER_CONSTANT}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/61/parent/src_java_org_apache_commons_lang_text_StrBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	int len = oldEnd & NUMBER_CONSTANT ;
Code	int len = oldEnd & NUMBER_CONSTANT ;
Distance : 4

1
Tree	int len = ols + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = ols + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 12

2
Tree	int len = NUMBER_CONSTANT * strLen * strLen * EvalMode.NORMAL ;
Code	int len = NUMBER_CONSTANT * strLen * strLen * EvalMode.NORMAL ;
Distance : 6

3
Tree	int len = Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES + NUMBER_CONSTANT ;
Code	int len = Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES + NUMBER_CONSTANT ;
Distance : 3

4
Tree	int len = oldEnd - strLen ;
Code	int len = oldEnd - strLen ;
Distance : 3

5
Tree	int len = ols - strLen ;
Code	int len = ols - strLen ;
Distance : 3

6
Tree	int len = fieldIndex - strLen ;
Code	int len = fieldIndex - strLen ;
Distance : 3

7
Tree	int len = minor - strLen ;
Code	int len = minor - strLen ;
Distance : 3

8
Tree	int len = Executors - strLen ;
Code	int len = Executors - strLen ;
Distance : 3

9
Tree	int len = fieldIndex + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = fieldIndex + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 12

10
Tree	int len = fieldIndex && ^ ;
Code	int len = fieldIndex && ^ ;
Distance : 5

11
Tree	int len = columnLabels - strLen ;
Code	int len = columnLabels - strLen ;
Distance : 3

12
Tree	int len = ( long ) strLen * wrapWith ;
Code	int len = ( long ) strLen * wrapWith ;
Distance : 5

13
Tree	int len = TypeUtilsTest - strLen ;
Code	int len = TypeUtilsTest - strLen ;
Distance : 3

14
Tree	double len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	double len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

15
Tree	int len = RELAX - strLen ;
Code	int len = RELAX - strLen ;
Distance : 3

16
Tree	int len = ols && ^ ;
Code	int len = ols && ^ ;
Distance : 5

17
Tree	int len = ols ;
Code	int len = ols ;
Distance : 5

18
Tree	double len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	double len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 15

19
Tree	int len = ols & NUMBER_CONSTANT ;
Code	int len = ols & NUMBER_CONSTANT ;
Distance : 4

20
Tree	int len = NUMBER_CONSTANT - wrapWith ;
Code	int len = NUMBER_CONSTANT - wrapWith ;
Distance : 4

21
Tree	int len = coefficients.length > > > NUMBER_CONSTANT ;
Code	int len = coefficients.length > > > NUMBER_CONSTANT ;
Distance : 4

22
Tree	int len = ( long ) strLen * generated ;
Code	int len = ( long ) strLen * generated ;
Distance : 5

23
Tree	int len = NUMBER_CONSTANT - Character ;
Code	int len = NUMBER_CONSTANT - Character ;
Distance : 4

24
Tree	int len = Cartesian2D.NEGATIVE_INFINITY + NUMBER_CONSTANT ;
Code	int len = Cartesian2D.NEGATIVE_INFINITY + NUMBER_CONSTANT ;
Distance : 3

25
Tree	int len = STRING_CONSTANT + FastDateFormat ;
Code	int len = STRING_CONSTANT + FastDateFormat ;
Distance : 4

26
Tree	int len = oldEnd + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = oldEnd + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 12

27
Tree	int len = STRING_CONSTANT + element ;
Code	int len = STRING_CONSTANT + element ;
Distance : 4

28
Tree	int len = columnLabels % NUMBER_CONSTANT ;
Code	int len = columnLabels % NUMBER_CONSTANT ;
Distance : 4

29
Tree	int len = ( int ) strLen * strLen ;
Code	int len = ( int ) strLen * strLen ;
Distance : 5

30
Tree	int len = oldEnd && &= ;
Code	int len = oldEnd && &= ;
Distance : 5

31
Tree	int len = ( long ) strLen * msg ;
Code	int len = ( long ) strLen * msg ;
Distance : 5

32
Tree	int len = NUMBER_CONSTANT - sz ;
Code	int len = NUMBER_CONSTANT - sz ;
Distance : 4

33
Tree	int len = ( long ) strLen * element ;
Code	int len = ( long ) strLen * element ;
Distance : 5

34
Tree	int len = ( long ) strLen * start ;
Code	int len = ( long ) strLen * start ;
Distance : 5

35
Tree	int len = RELAX % NUMBER_CONSTANT ;
Code	int len = RELAX % NUMBER_CONSTANT ;
Distance : 4

36
Tree	int len = fieldIndex ;
Code	int len = fieldIndex ;
Distance : 5

37
Tree	int len = STRING_CONSTANT + Character ;
Code	int len = STRING_CONSTANT + Character ;
Distance : 4

38
Tree	int len = RELAX / strLen ;
Code	int len = RELAX / strLen ;
Distance : 4

39
Tree	int len = TypeUtilsTest / strLen ;
Code	int len = TypeUtilsTest / strLen ;
Distance : 4

40
Tree	int len = fieldIndex + strLen + strLen + start ;
Code	int len = fieldIndex + strLen + strLen + start ;
Distance : 5

41
Tree	int len = TypeUtilsTest % NUMBER_CONSTANT ;
Code	int len = TypeUtilsTest % NUMBER_CONSTANT ;
Distance : 4

42
Tree	int len = NUMBER_CONSTANT - strLen ;
Code	int len = NUMBER_CONSTANT - strLen ;
Distance : 3

43
Tree	int len = coefficients.length + NUMBER_CONSTANT ;
Code	int len = coefficients.length + NUMBER_CONSTANT ;
Distance : 3

44
Tree	long len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	long len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

45
Tree	int len = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Code	int len = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Distance : 3

46
Tree	int len = getProperNumerator () - strLen ;
Code	int len = getProperNumerator () - strLen ;
Distance : 4

47
Tree	int len = STRING_CONSTANT + varArgs ;
Code	int len = STRING_CONSTANT + varArgs ;
Distance : 4

48
Tree	int dim = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Code	int dim = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Distance : 4

49
Tree	int len = STRING_CONSTANT + STRING_CONSTANT - strLen ;
Code	int len = STRING_CONSTANT + STRING_CONSTANT - strLen ;
Distance : 5

50
Tree	int len = oldEnd / strLen ;
Code	int len = oldEnd / strLen ;
Distance : 4

51
Tree	int len = STRING_CONSTANT + strLen ;
Code	int len = STRING_CONSTANT + strLen ;
Distance : 4

52
Tree	int len = fieldIndex + lineSeparator () + strLen ;
Code	int len = fieldIndex + lineSeparator () + strLen ;
Distance : 5

53
Tree	int len = fieldIndex & NUMBER_CONSTANT ;
Code	int len = fieldIndex & NUMBER_CONSTANT ;
Distance : 4

54
Tree	int len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 12

55
Tree	int len = set.length + NUMBER_CONSTANT ;
Code	int len = set.length + NUMBER_CONSTANT ;
Distance : 3

56
Tree	int len = oldEnd / strLen - strLen ;
Code	int len = oldEnd / strLen - strLen ;
Distance : 4

57
Tree	int len = getMillisPerUnit () - strLen ;
Code	int len = getMillisPerUnit () - strLen ;
Distance : 4

58
Tree	long len = STRING_CONSTANT + STRING_CONSTANT - len ;
Code	long len = STRING_CONSTANT + STRING_CONSTANT - len ;
Distance : 6

59
Tree	int len = getProperNumerator > > > NUMBER_CONSTANT ;
Code	int len = getProperNumerator > > > NUMBER_CONSTANT ;
Distance : 4

60
Tree	int len = NUMBER_CONSTANT * currentState.length ;
Code	int len = NUMBER_CONSTANT * currentState.length ;
Distance : 5

61
Tree	int len = set.length > > > NUMBER_CONSTANT ;
Code	int len = set.length > > > NUMBER_CONSTANT ;
Distance : 4

62
Tree	int len = ols / strLen - strLen ;
Code	int len = ols / strLen - strLen ;
Distance : 4

63
Tree	int len = NUMBER_CONSTANT - start ;
Code	int len = NUMBER_CONSTANT - start ;
Distance : 4

64
Tree	int len = NUMBER_CONSTANT * IncrementalCheckMode.GENERATE_IJS ;
Code	int len = NUMBER_CONSTANT * IncrementalCheckMode.GENERATE_IJS ;
Distance : 5

65
Tree	int len = minor + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = minor + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 12

66
Tree	int len = NUMBER_CONSTANT * EvalMode.NORMAL ;
Code	int len = NUMBER_CONSTANT * EvalMode.NORMAL ;
Distance : 5

67
Tree	int len = NUMBER_CONSTANT * coefficients.length ;
Code	int len = NUMBER_CONSTANT * coefficients.length ;
Distance : 5

68
Tree	int len = ( long ) strLen * textLen ;
Code	int len = ( long ) strLen * textLen ;
Distance : 5

69
Tree	int len = oldEnd && ^ ;
Code	int len = oldEnd && ^ ;
Distance : 5

70
Tree	int len = NUMBER_CONSTANT * strLen * strLen * StandardBasicTypes.STRING ;
Code	int len = NUMBER_CONSTANT * strLen * strLen * StandardBasicTypes.STRING ;
Distance : 6

71
Tree	int len = NUMBER_CONSTANT * EvalMode.EVAL ;
Code	int len = NUMBER_CONSTANT * EvalMode.EVAL ;
Distance : 5

72
Tree	int len = NUMBER_CONSTANT - element ;
Code	int len = NUMBER_CONSTANT - element ;
Distance : 4

73
Tree	int len = Executors + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = Executors + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 12

74
Tree	int len = greatestCommonDivisor () - strLen ;
Code	int len = greatestCommonDivisor () - strLen ;
Distance : 4

75
Tree	int len = getCauseMethodNameList () - strLen ;
Code	int len = getCauseMethodNameList () - strLen ;
Distance : 4

76
Tree	int len = NUMBER_CONSTANT * Long.MAX_VALUE ;
Code	int len = NUMBER_CONSTANT * Long.MAX_VALUE ;
Distance : 5

77
Tree	int len = minor > > NUMBER_CONSTANT ;
Code	int len = minor > > NUMBER_CONSTANT ;
Distance : 4

78
Tree	int len = Executors / strLen ;
Code	int len = Executors / strLen ;
Distance : 4

79
Tree	int len = NUMBER_CONSTANT * Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES ;
Code	int len = NUMBER_CONSTANT * Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES ;
Distance : 5

80
Tree	int len = columnLabels & NUMBER_CONSTANT ;
Code	int len = columnLabels & NUMBER_CONSTANT ;
Distance : 4

81
Tree	int len = oldEnd % NUMBER_CONSTANT ;
Code	int len = oldEnd % NUMBER_CONSTANT ;
Distance : 4

82
Tree	int len = ols / strLen ;
Code	int len = ols / strLen ;
Distance : 4

83
Tree	int len = NUMBER_CONSTANT - len ;
Code	int len = NUMBER_CONSTANT - len ;
Distance : 4

84
Tree	int len = NUMBER_CONSTANT * strLen * strLen * EvalMode.EVAL ;
Code	int len = NUMBER_CONSTANT * strLen * strLen * EvalMode.EVAL ;
Distance : 6

85
Tree	int len = minor & NUMBER_CONSTANT ;
Code	int len = minor & NUMBER_CONSTANT ;
Distance : 4

86
Tree	int len = ( long ) strLen * strLen ;
Code	int len = ( long ) strLen * strLen ;
Distance : 5

87
Tree	int len = fieldIndex + STRING_CONSTANT + source.contractionCriterion ;
Code	int len = fieldIndex + STRING_CONSTANT + source.contractionCriterion ;
Distance : 4

88
Tree	int len = STRING_CONSTANT + STRING_CONSTANT - len ;
Code	int len = STRING_CONSTANT + STRING_CONSTANT - len ;
Distance : 5

89
Tree	int len = requirePrinter () - strLen ;
Code	int len = requirePrinter () - strLen ;
Distance : 4

90
Tree	int len = oldEnd + STRING_CONSTANT + set.length ;
Code	int len = oldEnd + STRING_CONSTANT + set.length ;
Distance : 4

91
Tree	int len = getProperNumerator () - element ;
Code	int len = getProperNumerator () - element ;
Distance : 5

92
Tree	int len = Cartesian2D.NEGATIVE_INFINITY > > > NUMBER_CONSTANT ;
Code	int len = Cartesian2D.NEGATIVE_INFINITY > > > NUMBER_CONSTANT ;
Distance : 4

93
Tree	int len = oldEnd + STRING_CONSTANT + source.nDev ;
Code	int len = oldEnd + STRING_CONSTANT + source.nDev ;
Distance : 4

94
Tree	int len = oldEnd + STRING_CONSTANT + Long.MAX_VALUE ;
Code	int len = oldEnd + STRING_CONSTANT + Long.MAX_VALUE ;
Distance : 4

95
Tree	int len = NUMBER_CONSTANT * Config.StrictMode.SLOPPY ;
Code	int len = NUMBER_CONSTANT * Config.StrictMode.SLOPPY ;
Distance : 5

96
Tree	int len = oldEnd + strLen + strLen + strLen ;
Code	int len = oldEnd + strLen + strLen + strLen ;
Distance : 5

97
Tree	int len = TypeUtilsTest > > NUMBER_CONSTANT ;
Code	int len = TypeUtilsTest > > NUMBER_CONSTANT ;
Distance : 4

98
Tree	int len = ols + STRING_CONSTANT + set.length ;
Code	int len = ols + STRING_CONSTANT + set.length ;
Distance : 4

99
Tree	int len = Executors & NUMBER_CONSTANT ;
Code	int len = Executors & NUMBER_CONSTANT ;
Distance : 4

100
Tree	int len = oldEnd + STRING_CONSTANT + TimeUnit.SECONDS ;
Code	int len = oldEnd + STRING_CONSTANT + TimeUnit.SECONDS ;
Distance : 4

101
Tree	int len = oldEnd / strLen + strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = oldEnd / strLen + strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 9

102
Tree	int len = Executors > > NUMBER_CONSTANT ;
Code	int len = Executors > > NUMBER_CONSTANT ;
Distance : 4

103
Tree	int len = lineSeparator () - strLen ;
Code	int len = lineSeparator () - strLen ;
Distance : 4

104
Tree	double len = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Code	double len = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Distance : 4

105
Tree	int len = TypeUtilsTest + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = TypeUtilsTest + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 12

106
Tree	char len = STRING_CONSTANT + STRING_CONSTANT - len ;
Code	char len = STRING_CONSTANT + STRING_CONSTANT - len ;
Distance : 6

107
Tree	int len = STRING_CONSTANT + start ;
Code	int len = STRING_CONSTANT + start ;
Distance : 4

108
Tree	int len = RELAX > > NUMBER_CONSTANT ;
Code	int len = RELAX > > NUMBER_CONSTANT ;
Distance : 4

109
Tree	int len = Cartesian2D.NaN + NUMBER_CONSTANT ;
Code	int len = Cartesian2D.NaN + NUMBER_CONSTANT ;
Distance : 3

110
Tree	int len = TypeUtilsTest ;
Code	int len = TypeUtilsTest ;
Distance : 5

111
Tree	int len = oldEnd > > NUMBER_CONSTANT ;
Code	int len = oldEnd > > NUMBER_CONSTANT ;
Distance : 4

112
Tree	int len = NUMBER_CONSTANT * strLen * strLen * coefficients.length ;
Code	int len = NUMBER_CONSTANT * strLen * strLen * coefficients.length ;
Distance : 6

113
Tree	int len = oldEnd + lineSeparator () + strLen ;
Code	int len = oldEnd + lineSeparator () + strLen ;
Distance : 5

114
Tree	int len = ols + strLen + strLen + strLen ;
Code	int len = ols + strLen + strLen + strLen ;
Distance : 5

115
Tree	int len = RELAX + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = RELAX + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 12

116
Tree	int len = ols / strLen + strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = ols / strLen + strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 9

117
Tree	int len = oldEnd ;
Code	int len = oldEnd ;
Distance : 5

118
Tree	int len = RELAX ;
Code	int len = RELAX ;
Distance : 5

119
Tree	int len = NUMBER_CONSTANT * strLen * strLen * Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES ;
Code	int len = NUMBER_CONSTANT * strLen * strLen * Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES ;
Distance : 6

120
Tree	int len = fieldIndex / strLen - strLen ;
Code	int len = fieldIndex / strLen - strLen ;
Distance : 4

121
Tree	int dim = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int dim = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

122
Tree	int len = ols > > NUMBER_CONSTANT ;
Code	int len = ols > > NUMBER_CONSTANT ;
Distance : 4

123
Tree	int len = oldEnd / strLen - element ;
Code	int len = oldEnd / strLen - element ;
Distance : 4

124
Tree	int len = chars.length > > > NUMBER_CONSTANT ;
Code	int len = chars.length > > > NUMBER_CONSTANT ;
Distance : 4

125
Tree	int len = getRemoveUnusedCode () - strLen ;
Code	int len = getRemoveUnusedCode () - strLen ;
Distance : 4

126
Tree	int len = minor + strLen + strLen + strLen ;
Code	int len = minor + strLen + strLen + strLen ;
Distance : 5

127
Tree	int start = STRING_CONSTANT + STRING_CONSTANT - len ;
Code	int start = STRING_CONSTANT + STRING_CONSTANT - len ;
Distance : 6

128
Tree	int len = FACT.length > > > NUMBER_CONSTANT ;
Code	int len = FACT.length > > > NUMBER_CONSTANT ;
Distance : 4

129
Tree	int len = fieldIndex / strLen + strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = fieldIndex / strLen + strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 9

130
Tree	int len = minor ;
Code	int len = minor ;
Distance : 5

131
Tree	int dim = STRING_CONSTANT + STRING_CONSTANT - len ;
Code	int dim = STRING_CONSTANT + STRING_CONSTANT - len ;
Distance : 6

132
Tree	int len = fieldIndex > > NUMBER_CONSTANT ;
Code	int len = fieldIndex > > NUMBER_CONSTANT ;
Distance : 4

133
Tree	int len = Sigmoid > > > NUMBER_CONSTANT ;
Code	int len = Sigmoid > > > NUMBER_CONSTANT ;
Distance : 4

134
Tree	int len = columnLabels + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = columnLabels + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 12

135
Tree	double len = STRING_CONSTANT + strLen ;
Code	double len = STRING_CONSTANT + strLen ;
Distance : 5

136
Tree	int len = minor % NUMBER_CONSTANT ;
Code	int len = minor % NUMBER_CONSTANT ;
Distance : 4

137
Tree	int len = source.contractionCriterion + NUMBER_CONSTANT ;
Code	int len = source.contractionCriterion + NUMBER_CONSTANT ;
Distance : 3

138
Tree	int len = oldEnd + STRING_CONSTANT + source.contractionCriterion ;
Code	int len = oldEnd + STRING_CONSTANT + source.contractionCriterion ;
Distance : 4

139
Tree	int len = oldEnd + strLen + strLen + start ;
Code	int len = oldEnd + strLen + strLen + start ;
Distance : 5

140
Tree	int len = minor + lineSeparator () + strLen ;
Code	int len = minor + lineSeparator () + strLen ;
Distance : 5

141
Tree	int len = fieldIndex + strLen + strLen + strLen ;
Code	int len = fieldIndex + strLen + strLen + strLen ;
Distance : 5

142
Tree	int len = Executors % NUMBER_CONSTANT ;
Code	int len = Executors % NUMBER_CONSTANT ;
Distance : 4

143
Tree	int len = ols / strLen - element ;
Code	int len = ols / strLen - element ;
Distance : 4

144
Tree	int start = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Code	int start = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Distance : 4

145
Tree	int len = STRING_CONSTANT + len ;
Code	int len = STRING_CONSTANT + len ;
Distance : 4

146
Tree	int len = Executors + lineSeparator () + strLen ;
Code	int len = Executors + lineSeparator () + strLen ;
Distance : 5

147
Tree	int len = fieldIndex % NUMBER_CONSTANT ;
Code	int len = fieldIndex % NUMBER_CONSTANT ;
Distance : 4

148
Tree	int len = FACT.length + NUMBER_CONSTANT ;
Code	int len = FACT.length + NUMBER_CONSTANT ;
Distance : 3

149
Tree	int len = fieldIndex && &= ;
Code	int len = fieldIndex && &= ;
Distance : 5

150
Tree	int len = requirePrinter > > > NUMBER_CONSTANT ;
Code	int len = requirePrinter > > > NUMBER_CONSTANT ;
Distance : 4

151
Tree	int len = TypeUtilsTest & NUMBER_CONSTANT ;
Code	int len = TypeUtilsTest & NUMBER_CONSTANT ;
Distance : 4

152
Tree	int len = oldEnd + lineSeparator () + element ;
Code	int len = oldEnd + lineSeparator () + element ;
Distance : 5

153
Tree	byte len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	byte len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

154
Tree	int dim = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int dim = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 15

155
Tree	int len = Executors ;
Code	int len = Executors ;
Distance : 5

156
Tree	double len = NUMBER_CONSTANT - strLen ;
Code	double len = NUMBER_CONSTANT - strLen ;
Distance : 4

157
Tree	int len = fieldIndex / strLen - element ;
Code	int len = fieldIndex / strLen - element ;
Distance : 4

158
Tree	int len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 14

159
Tree	int len = oldEnd / strLen + start + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = oldEnd / strLen + start + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 9

160
Tree	int len = minor && ^ ;
Code	int len = minor && ^ ;
Distance : 5

161
Tree	char len = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Code	char len = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Distance : 4

162
Tree	int len = columnLabels / strLen ;
Code	int len = columnLabels / strLen ;
Distance : 4

163
Tree	int len = RELAX & NUMBER_CONSTANT ;
Code	int len = RELAX & NUMBER_CONSTANT ;
Distance : 4

164
Tree	int len = ols + lineSeparator () + strLen ;
Code	int len = ols + lineSeparator () + strLen ;
Distance : 5

165
Tree	int len = oldEnd + lineSeparator () + start ;
Code	int len = oldEnd + lineSeparator () + start ;
Distance : 5

166
Tree	int len = PivotSelectionRule.DANTZIG + NUMBER_CONSTANT ;
Code	int len = PivotSelectionRule.DANTZIG + NUMBER_CONSTANT ;
Distance : 3

167
Tree	int len = ols % NUMBER_CONSTANT ;
Code	int len = ols % NUMBER_CONSTANT ;
Distance : 4

168
Tree	int len = Executors + strLen + strLen + strLen ;
Code	int len = Executors + strLen + strLen + strLen ;
Distance : 5

169
Tree	int len = Executors && ^ ;
Code	int len = Executors && ^ ;
Distance : 5

170
Tree	int len = ols && &= ;
Code	int len = ols && &= ;
Distance : 5

171
Tree	int len = oldEnd + getLeftElement () + strLen ;
Code	int len = oldEnd + getLeftElement () + strLen ;
Distance : 5

172
Tree	int len = STRING_CONSTANT + STRING_CONSTANT - start ;
Code	int len = STRING_CONSTANT + STRING_CONSTANT - start ;
Distance : 5

173
Tree	long len = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Code	long len = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Distance : 4

174
Tree	int len = NUMBER_CONSTANT * strLen * strLen * set.length ;
Code	int len = NUMBER_CONSTANT * strLen * strLen * set.length ;
Distance : 6

175
Tree	double len = STRING_CONSTANT + STRING_CONSTANT - len ;
Code	double len = STRING_CONSTANT + STRING_CONSTANT - len ;
Distance : 6

176
Tree	int len = NUMBER_CONSTANT * strLen * strLen * currentState.length ;
Code	int len = NUMBER_CONSTANT * strLen * strLen * currentState.length ;
Distance : 6

177
Tree	int len = ols + STRING_CONSTANT + source.contractionCriterion ;
Code	int len = ols + STRING_CONSTANT + source.contractionCriterion ;
Distance : 4

178
Tree	int len = minor / strLen ;
Code	int len = minor / strLen ;
Distance : 4

179
Tree	int len = fieldIndex / strLen ;
Code	int len = fieldIndex / strLen ;
Distance : 4

180
Tree	int len = NUMBER_CONSTANT * strLen * strLen * Long.MAX_VALUE ;
Code	int len = NUMBER_CONSTANT * strLen * strLen * Long.MAX_VALUE ;
Distance : 6

181
Tree	int len = ols + strLen + strLen + start ;
Code	int len = ols + strLen + strLen + start ;
Distance : 5

182
Tree	int len = columnLabels > > NUMBER_CONSTANT ;
Code	int len = columnLabels > > NUMBER_CONSTANT ;
Distance : 4

183
Tree	int len = columnLabels ;
Code	int len = columnLabels ;
Distance : 5

184
Tree	int len = Executors / strLen - strLen ;
Code	int len = Executors / strLen - strLen ;
Distance : 4

185
Tree	int len = minor / strLen - strLen ;
Code	int len = minor / strLen - strLen ;
Distance : 4

186
Tree	boolean len = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Code	boolean len = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Distance : 4

187
Tree	char len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	char len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

188
Tree	long len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	long len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 15

189
Tree	int start = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int start = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

190
Tree	byte len = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Code	byte len = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Distance : 4

191
Tree	boolean len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	boolean len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

192
Tree	int len = ols / strLen + start + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = ols / strLen + start + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 9

193
Tree	int len = Executors / strLen + strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = Executors / strLen + strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 9

194
Tree	int len = fieldIndex / strLen + start + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = fieldIndex / strLen + start + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 9

195
Tree	int len = minor / strLen + strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = minor / strLen + strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 9

196
Tree	char len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	char len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 15

197
Tree	int start = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int start = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 15

198
Tree	boolean len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	boolean len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 15

199
Tree	byte len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	byte len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 15

========================================================================


========================================================================
Example Number: 35
Parent Code is: 
i < thisBuf.length
-------------------------------------------------------------------------------
Child code is: 
i < size
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (800{val=i}) (230{val=<}) (40{val=thisBuf.length})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (800{val=i}) (230{val=<}) (800{val=size})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/60/parent/src_java_org_apache_commons_lang_text_StrBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	i == scalar
Code	i == scalar
Distance : 2

1
Tree	isBuiltinObject () != IncrementalCheckMode.OFF
Code	isBuiltinObject () != IncrementalCheckMode.OFF
Distance : 4

2
Tree	skipStringLiteralEscapeSequence () != IncrementalCheckMode.OFF
Code	skipStringLiteralEscapeSequence () != IncrementalCheckMode.OFF
Distance : 4

3
Tree	stubInfo () != IncrementalCheckMode.OFF
Code	stubInfo () != IncrementalCheckMode.OFF
Distance : 4

4
Tree	markStubUsed () != IncrementalCheckMode.OFF
Code	markStubUsed () != IncrementalCheckMode.OFF
Distance : 4

5
Tree	getIgnoredMatcher () != that.id
Code	getIgnoredMatcher () != that.id
Distance : 4

6
Tree	this . i == i
Code	this . i == i
Distance : 4

7
Tree	this . iChrono == i
Code	this . iChrono == i
Distance : 5

8
Tree	skipStringLiteralEscapeSequence ( i ) != IncrementalCheckMode.OFF
Code	skipStringLiteralEscapeSequence ( i ) != IncrementalCheckMode.OFF
Distance : 5

9
Tree	i == y
Code	i == y
Distance : 2

10
Tree	i < getBooleanProp ()
Code	i < getBooleanProp ()
Distance : 2

11
Tree	i == val
Code	i == val
Distance : 2

12
Tree	i == parent
Code	i == parent
Distance : 2

13
Tree	i / i
Code	i / i
Distance : 2

14
Tree	i . valueOf ( i ) != current.parent.scopes
Code	i . valueOf ( i ) != current.parent.scopes
Distance : 7

15
Tree	i . valueOf ( i ) != iChronology.MILLIS_PER_DAY
Code	i . valueOf ( i ) != iChronology.MILLIS_PER_DAY
Distance : 7

16
Tree	wrong > NUMBER_CONSTANT
Code	wrong > NUMBER_CONSTANT
Distance : 3

17
Tree	i / SECONDS_MILLIS
Code	i / SECONDS_MILLIS
Distance : 2

18
Tree	i . valueOf ( i ) != ArrayUtils.EMPTY_STRING_ARRAY
Code	i . valueOf ( i ) != ArrayUtils.EMPTY_STRING_ARRAY
Distance : 7

19
Tree	this . isBuiltinObject () != that.id
Code	this . isBuiltinObject () != that.id
Distance : 6

20
Tree	getIgnoredMatcher () != IncrementalCheckMode.OFF
Code	getIgnoredMatcher () != IncrementalCheckMode.OFF
Distance : 4

21
Tree	i == that.id && i
Code	i == that.id && i
Distance : 4

22
Tree	module > NUMBER_CONSTANT
Code	module > NUMBER_CONSTANT
Distance : 3

23
Tree	set > NUMBER_CONSTANT
Code	set > NUMBER_CONSTANT
Distance : 3

24
Tree	i == IncrementalCheckMode.OFF && i
Code	i == IncrementalCheckMode.OFF && i
Distance : 4

25
Tree	skipStringLiteralEscapeSequence ( i ) == i
Code	skipStringLiteralEscapeSequence ( i ) == i
Distance : 5

26
Tree	markStubUsed () == i
Code	markStubUsed () == i
Distance : 4

27
Tree	i / INDEX_OFFSET
Code	i / INDEX_OFFSET
Distance : 2

28
Tree	this . implicitInterfaceUses == tolerance
Code	this . implicitInterfaceUses == tolerance
Distance : 5

29
Tree	toPrinter ( i ) == i
Code	toPrinter ( i ) == i
Distance : 5

30
Tree	this . iChrono == Integer
Code	this . iChrono == Integer
Distance : 5

31
Tree	getIgnoredMatcher () == i
Code	getIgnoredMatcher () == i
Distance : 4

32
Tree	i == AllowedSolution.LEFT_SIDE && i
Code	i == AllowedSolution.LEFT_SIDE && i
Distance : 4

33
Tree	isTypecheckingEnabled ( i ) == i
Code	isTypecheckingEnabled ( i ) == i
Distance : 5

34
Tree	last > NUMBER_CONSTANT
Code	last > NUMBER_CONSTANT
Distance : 3

35
Tree	stubInfo ( i ) == i
Code	stubInfo ( i ) == i
Distance : 5

36
Tree	includesGlobals ( i ) == i
Code	includesGlobals ( i ) == i
Distance : 5

37
Tree	isBuiltinObject () == i
Code	isBuiltinObject () == i
Distance : 4

38
Tree	this == entry
Code	this == entry
Distance : 3

39
Tree	i . valueOf ( i ) != that.id
Code	i . valueOf ( i ) != that.id
Distance : 7

40
Tree	i . valueOf () != PivotSelectionRule.DANTZIG
Code	i . valueOf () != PivotSelectionRule.DANTZIG
Distance : 5

41
Tree	i . valueOf () != currentScript.rootNode
Code	i . valueOf () != currentScript.rootNode
Distance : 5

42
Tree	i == null
Code	i == null
Distance : 2

43
Tree	i . valueOf () != Cartesian2D.NaN
Code	i . valueOf () != Cartesian2D.NaN
Distance : 5

44
Tree	i == current.parent.scopes
Code	i == current.parent.scopes
Distance : 2

45
Tree	i < iChronology.MILLIS_PER_DAY
Code	i < iChronology.MILLIS_PER_DAY
Distance : 1

46
Tree	i == AllowedSolution.LEFT_SIDE
Code	i == AllowedSolution.LEFT_SIDE
Distance : 2

47
Tree	toPrinter () == i
Code	toPrinter () == i
Distance : 4

48
Tree	i < Config.RunMode.KEEP_GOING
Code	i < Config.RunMode.KEEP_GOING
Distance : 1

49
Tree	isTypecheckingEnabled () == i
Code	isTypecheckingEnabled () == i
Distance : 4

50
Tree	i < Entities.ISO8859_1_ARRAY_LENGTH
Code	i < Entities.ISO8859_1_ARRAY_LENGTH
Distance : 1

51
Tree	includesGlobals () == i
Code	includesGlobals () == i
Distance : 4

52
Tree	i < LocalizedFormats.EULER_ANGLES_SINGULARITY
Code	i < LocalizedFormats.EULER_ANGLES_SINGULARITY
Distance : 1

53
Tree	i == problem.a
Code	i == problem.a
Distance : 2

54
Tree	this . isBuiltinObject () != IncrementalCheckMode.OFF
Code	this . isBuiltinObject () != IncrementalCheckMode.OFF
Distance : 6

55
Tree	getIgnoredMatcher ( i ) != current.parent.scopes
Code	getIgnoredMatcher ( i ) != current.parent.scopes
Distance : 5

56
Tree	isBuiltinObject ( i ) != current.parent.scopes
Code	isBuiltinObject ( i ) != current.parent.scopes
Distance : 5

57
Tree	i == IncrementalCheckMode.GENERATE_IJS
Code	i == IncrementalCheckMode.GENERATE_IJS
Distance : 2

58
Tree	numerator > NUMBER_CONSTANT
Code	numerator > NUMBER_CONSTANT
Distance : 3

59
Tree	i / residual
Code	i / residual
Distance : 2

60
Tree	i == missingEntries
Code	i == missingEntries
Distance : 2

61
Tree	i . valueOf ( i ) != IncrementalCheckMode.OFF
Code	i . valueOf ( i ) != IncrementalCheckMode.OFF
Distance : 7

62
Tree	i / chromosomeRepresentation
Code	i / chromosomeRepresentation
Distance : 2

63
Tree	this . iChrono . getBottomObject () != that.id
Code	this . iChrono . getBottomObject () != that.id
Distance : 8

64
Tree	entry == null
Code	entry == null
Distance : 3

65
Tree	this . i . getBottomObject () != that.id
Code	this . i . getBottomObject () != that.id
Distance : 7

66
Tree	numerator != null
Code	numerator != null
Distance : 3

67
Tree	skipStringLiteralEscapeSequence () == i
Code	skipStringLiteralEscapeSequence () == i
Distance : 4

68
Tree	i == problem.a && i
Code	i == problem.a && i
Distance : 4

69
Tree	markStubUsed ( i ) == i
Code	markStubUsed ( i ) == i
Distance : 5

70
Tree	entry > NUMBER_CONSTANT
Code	entry > NUMBER_CONSTANT
Distance : 3

71
Tree	this . iChrono . getBottomObject () != IncrementalCheckMode.OFF
Code	this . iChrono . getBottomObject () != IncrementalCheckMode.OFF
Distance : 8

72
Tree	i && i == current.parent.scopes
Code	i && i == current.parent.scopes
Distance : 4

73
Tree	i && i == IncrementalCheckMode.OFF
Code	i && i == IncrementalCheckMode.OFF
Distance : 4

74
Tree	i == IncrementalCheckMode.GENERATE_IJS && i
Code	i == IncrementalCheckMode.GENERATE_IJS && i
Distance : 4

75
Tree	stubInfo () == i
Code	stubInfo () == i
Distance : 4

76
Tree	i == PivotSelectionRule.DANTZIG && i
Code	i == PivotSelectionRule.DANTZIG && i
Distance : 4

77
Tree	i == ArrayUtils.EMPTY_STRING_ARRAY && i
Code	i == ArrayUtils.EMPTY_STRING_ARRAY && i
Distance : 4

78
Tree	i < isBuiltinObject ()
Code	i < isBuiltinObject ()
Distance : 2

79
Tree	i < getProperNumerator ()
Code	i < getProperNumerator ()
Distance : 2

80
Tree	i == source.contractionCriterion
Code	i == source.contractionCriterion
Distance : 2

81
Tree	this . stopTime == i
Code	this . stopTime == i
Distance : 5

82
Tree	i == IncrementalCheckMode.OFF
Code	i == IncrementalCheckMode.OFF
Distance : 2

83
Tree	i < getMask ()
Code	i < getMask ()
Distance : 2

84
Tree	i == ArrayUtils.EMPTY_STRING_ARRAY
Code	i == ArrayUtils.EMPTY_STRING_ARRAY
Distance : 2

85
Tree	i < getIgnoredMatcher ()
Code	i < getIgnoredMatcher ()
Distance : 2

86
Tree	wrong != null
Code	wrong != null
Distance : 3

87
Tree	getIgnoredMatcher ( i ) == i
Code	getIgnoredMatcher ( i ) == i
Distance : 5

88
Tree	i == that.id thisBuf.length /
Code	i == that.id thisBuf.length /
Distance : 4

89
Tree	i == current.parent.scopes < /
Code	i == current.parent.scopes < /
Distance : 3

90
Tree	i == current.parent.scopes && i
Code	i == current.parent.scopes && i
Distance : 4

91
Tree	i == Integer
Code	i == Integer
Distance : 2

92
Tree	this . i . getBottomObject () != IncrementalCheckMode.OFF
Code	this . i . getBottomObject () != IncrementalCheckMode.OFF
Distance : 7

93
Tree	i == AllowedSolution.LEFT_SIDE < /
Code	i == AllowedSolution.LEFT_SIDE < /
Distance : 3

94
Tree	i != null
Code	i != null
Distance : 2

95
Tree	i . valueOf () != IncrementalCheckMode.OFF
Code	i . valueOf () != IncrementalCheckMode.OFF
Distance : 5

96
Tree	i && i == AllowedSolution.LEFT_SIDE
Code	i && i == AllowedSolution.LEFT_SIDE
Distance : 4

97
Tree	i < getNormalizedReferenceName ()
Code	i < getNormalizedReferenceName ()
Distance : 2

98
Tree	this == k
Code	this == k
Distance : 3

99
Tree	i == problem.a < /
Code	i == problem.a < /
Distance : 3

100
Tree	isBuiltinObject ( i ) == i
Code	isBuiltinObject ( i ) == i
Distance : 5

101
Tree	i > NUMBER_CONSTANT
Code	i > NUMBER_CONSTANT
Distance : 2

102
Tree	i == that.id
Code	i == that.id
Distance : 2

103
Tree	i == i
Code	i == i
Distance : 2

104
Tree	i . valueOf () != source.contractionCriterion
Code	i . valueOf () != source.contractionCriterion
Distance : 5

105
Tree	module != null
Code	module != null
Distance : 3

106
Tree	skipStringLiteralEscapeSequence ( i ) != current.parent.scopes
Code	skipStringLiteralEscapeSequence ( i ) != current.parent.scopes
Distance : 5

107
Tree	i . valueOf () != ArrayUtils.EMPTY_STRING_ARRAY
Code	i . valueOf () != ArrayUtils.EMPTY_STRING_ARRAY
Distance : 5

108
Tree	getIgnoredMatcher ( i ) != IncrementalCheckMode.OFF
Code	getIgnoredMatcher ( i ) != IncrementalCheckMode.OFF
Distance : 5

109
Tree	i / j
Code	i / j
Distance : 2

110
Tree	this == i
Code	this == i
Distance : 3

111
Tree	this . resetBuilder () != IncrementalCheckMode.OFF
Code	this . resetBuilder () != IncrementalCheckMode.OFF
Distance : 6

112
Tree	this . isBuiltinObject () != Cartesian2D.NaN
Code	this . isBuiltinObject () != Cartesian2D.NaN
Distance : 6

113
Tree	this . iChrono . isBuiltinObject () != that.id
Code	this . iChrono . isBuiltinObject () != that.id
Distance : 8

114
Tree	i < that.id
Code	i < that.id
Distance : 1

115
Tree	this . iChrono . isBuiltinObject () != IncrementalCheckMode.OFF
Code	this . iChrono . isBuiltinObject () != IncrementalCheckMode.OFF
Distance : 8

116
Tree	i == IncrementalCheckMode.GENERATE_IJS < /
Code	i == IncrementalCheckMode.GENERATE_IJS < /
Distance : 3

117
Tree	i . valueOf () != reporterStub.previousLocation
Code	i . valueOf () != reporterStub.previousLocation
Distance : 5

118
Tree	this . i . isBuiltinObject () != that.id
Code	this . i . isBuiltinObject () != that.id
Distance : 7

119
Tree	i < IncrementalCheckMode.GENERATE_IJS
Code	i < IncrementalCheckMode.GENERATE_IJS
Distance : 1

120
Tree	i < current.parent.scopes
Code	i < current.parent.scopes
Distance : 1

121
Tree	i == tolerance
Code	i == tolerance
Distance : 2

122
Tree	i == source.contractionCriterion < /
Code	i == source.contractionCriterion < /
Distance : 3

123
Tree	this . i . isBuiltinObject () != IncrementalCheckMode.OFF
Code	this . i . isBuiltinObject () != IncrementalCheckMode.OFF
Distance : 7

124
Tree	i < IncrementalCheckMode.OFF
Code	i < IncrementalCheckMode.OFF
Distance : 1

125
Tree	getIgnoredMatcher () != reporterStub.previousLocation
Code	getIgnoredMatcher () != reporterStub.previousLocation
Distance : 4

126
Tree	isBuiltinObject () != that.id
Code	isBuiltinObject () != that.id
Distance : 4

127
Tree	getIgnoredMatcher ( i ) != iChronology.MILLIS_PER_DAY
Code	getIgnoredMatcher ( i ) != iChronology.MILLIS_PER_DAY
Distance : 5

128
Tree	isBuiltinObject ( i ) != IncrementalCheckMode.OFF
Code	isBuiltinObject ( i ) != IncrementalCheckMode.OFF
Distance : 5

129
Tree	this == Integer
Code	this == Integer
Distance : 3

130
Tree	isBuiltinObject ( i ) != iChronology.MILLIS_PER_DAY
Code	isBuiltinObject ( i ) != iChronology.MILLIS_PER_DAY
Distance : 5

131
Tree	this . isBuiltinObject () != LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER
Code	this . isBuiltinObject () != LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER
Distance : 6

132
Tree	this == context
Code	this == context
Distance : 3

133
Tree	this . implicitInterfaceUses == i
Code	this . implicitInterfaceUses == i
Distance : 5

134
Tree	this . unescape () != IncrementalCheckMode.OFF
Code	this . unescape () != IncrementalCheckMode.OFF
Distance : 6

135
Tree	i . valueOf ( i ) != TokenType.STRING
Code	i . valueOf ( i ) != TokenType.STRING
Distance : 7

136
Tree	this . isBuiltinObject () != currentScript.rootNode
Code	this . isBuiltinObject () != currentScript.rootNode
Distance : 6

137
Tree	i . valueOf ( i ) != Entities.ISO8859_1_ARRAY_LENGTH
Code	i . valueOf ( i ) != Entities.ISO8859_1_ARRAY_LENGTH
Distance : 7

138
Tree	result > NUMBER_CONSTANT
Code	result > NUMBER_CONSTANT
Distance : 3

139
Tree	this . iChrono == tolerance
Code	this . iChrono == tolerance
Distance : 5

140
Tree	i == ArrayUtils.EMPTY_STRING_ARRAY < /
Code	i == ArrayUtils.EMPTY_STRING_ARRAY < /
Distance : 3

141
Tree	this . i == tolerance
Code	this . i == tolerance
Distance : 4

142
Tree	i / maxUlps
Code	i / maxUlps
Distance : 2

143
Tree	i / currentDegree
Code	i / currentDegree
Distance : 2

144
Tree	i < canEliminate ()
Code	i < canEliminate ()
Distance : 2

145
Tree	i < findMatching ()
Code	i < findMatching ()
Distance : 2

146
Tree	result != null
Code	result != null
Distance : 3

147
Tree	result == null
Code	result == null
Distance : 3

148
Tree	last != null
Code	last != null
Distance : 3

149
Tree	entry != null
Code	entry != null
Distance : 3

150
Tree	i && i == that.id
Code	i && i == that.id
Distance : 4

151
Tree	set != null
Code	set != null
Distance : 3

152
Tree	this == last
Code	this == last
Distance : 3

153
Tree	last == null
Code	last == null
Distance : 3

154
Tree	this == instant
Code	this == instant
Distance : 3

155
Tree	i && i == coefficients.length
Code	i && i == coefficients.length
Distance : 4

156
Tree	i && i == ArrayUtils.EMPTY_STRING_ARRAY
Code	i && i == ArrayUtils.EMPTY_STRING_ARRAY
Distance : 4

157
Tree	this . stubInfo () != IncrementalCheckMode.OFF
Code	this . stubInfo () != IncrementalCheckMode.OFF
Distance : 6

158
Tree	i && i == Cartesian2D.POSITIVE_INFINITY
Code	i && i == Cartesian2D.POSITIVE_INFINITY
Distance : 4

159
Tree	i == null i %
Code	i == null i %
Distance : 4

160
Tree	i == null < +=
Code	i == null < +=
Distance : 3

161
Tree	i != null < [
Code	i != null < [
Distance : 3

162
Tree	i == null thisBuf.length :
Code	i == null thisBuf.length :
Distance : 4

163
Tree	numerator == null
Code	numerator == null
Distance : 3

164
Tree	i != null thisBuf.length ?
Code	i != null thisBuf.length ?
Distance : 4

165
Tree	i != null i %
Code	i != null i %
Distance : 4

166
Tree	i != null thisBuf.length +=
Code	i != null thisBuf.length +=
Distance : 4

167
Tree	i != null thisBuf.length >=
Code	i != null thisBuf.length >=
Distance : 4

168
Tree	i == null thisBuf.length extends
Code	i == null thisBuf.length extends
Distance : 4

169
Tree	wrong == null
Code	wrong == null
Distance : 3

170
Tree	i == null thisBuf.length >=
Code	i == null thisBuf.length >=
Distance : 4

171
Tree	i != null thisBuf.length extends
Code	i != null thisBuf.length extends
Distance : 4

172
Tree	i != null thisBuf.length /
Code	i != null thisBuf.length /
Distance : 4

173
Tree	i . valueOf () != that.id
Code	i . valueOf () != that.id
Distance : 5

174
Tree	i == null thisBuf.length ^
Code	i == null thisBuf.length ^
Distance : 4

175
Tree	i == null thisBuf.length /
Code	i == null thisBuf.length /
Distance : 4

176
Tree	i != null i ^
Code	i != null i ^
Distance : 4

177
Tree	i . valueOf ( i ) != EvalMode.EVAL
Code	i . valueOf ( i ) != EvalMode.EVAL
Distance : 7

178
Tree	i == null < ?
Code	i == null < ?
Distance : 3

179
Tree	this == child
Code	this == child
Distance : 3

180
Tree	module == null
Code	module == null
Distance : 3

181
Tree	that.id thisBuf.length Entities.ISO8859_1_ARRAY_LENGTH
Code	that.id thisBuf.length Entities.ISO8859_1_ARRAY_LENGTH
Distance : 3

182
Tree	current.parent < Entities.ISO8859_1_ARRAY_LENGTH
Code	current.parent < Entities.ISO8859_1_ARRAY_LENGTH
Distance : 2

183
Tree	i . valueOf () i getIgnoredMatcher ( i )
Code	i . valueOf () i getIgnoredMatcher ( i )
Distance : 8

184
Tree	i . valueOf () thisBuf.length getNormalizedReferenceName ( i )
Code	i . valueOf () thisBuf.length getNormalizedReferenceName ( i )
Distance : 8

185
Tree	Entities.ISO8859_1_ARRAY_LENGTH i Entities.ISO8859_1_ARRAY_LENGTH
Code	Entities.ISO8859_1_ARRAY_LENGTH i Entities.ISO8859_1_ARRAY_LENGTH
Distance : 3

186
Tree	that.id < iChronology.MILLIS_PER_DAY
Code	that.id < iChronology.MILLIS_PER_DAY
Distance : 2

187
Tree	current.parent < that.id
Code	current.parent < that.id
Distance : 2

188
Tree	i . stubInfo () thisBuf.length getIgnoredMatcher ( i )
Code	i . stubInfo () thisBuf.length getIgnoredMatcher ( i )
Distance : 8

189
Tree	that.id thisBuf.length that.id
Code	that.id thisBuf.length that.id
Distance : 3

190
Tree	i . stubInfo () thisBuf.length getNormalizedReferenceName ( i )
Code	i . stubInfo () thisBuf.length getNormalizedReferenceName ( i )
Distance : 8

191
Tree	that.id < EvalMode.EVAL
Code	that.id < EvalMode.EVAL
Distance : 2

192
Tree	i . getBeta () thisBuf.length getIgnoredMatcher ( i )
Code	i . getBeta () thisBuf.length getIgnoredMatcher ( i )
Distance : 8

193
Tree	i . getBeta () thisBuf.length getNormalizedReferenceName ( i )
Code	i . getBeta () thisBuf.length getNormalizedReferenceName ( i )
Distance : 8

194
Tree	i . valueOf () thisBuf.length eras ( i )
Code	i . valueOf () thisBuf.length eras ( i )
Distance : 8

195
Tree	i . valueOf () thisBuf.length getUnknownType ( i )
Code	i . valueOf () thisBuf.length getUnknownType ( i )
Distance : 8

196
Tree	i && i == source.contractionCriterion
Code	i && i == source.contractionCriterion
Distance : 4

197
Tree	set == null
Code	set == null
Distance : 3

198
Tree	current.parent.scopes thisBuf.length Entities.ISO8859_1_ARRAY_LENGTH
Code	current.parent.scopes thisBuf.length Entities.ISO8859_1_ARRAY_LENGTH
Distance : 3

199
Tree	i == IncrementalCheckMode.OFF < /
Code	i == IncrementalCheckMode.OFF < /
Distance : 3

========================================================================


========================================================================
Example Number: 36
Parent Code is: 
i < thisBuf.length
-------------------------------------------------------------------------------
Child code is: 
i < this . size
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (800{val=i}) (230{val=<}) (40{val=thisBuf.length})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (800{val=i}) (230{val=<}) (22 (315{val=this}) (235{val=.}) (800{val=size}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/60/parent/src_java_org_apache_commons_lang_text_StrBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	i == scalar
Code	i == scalar
Distance : 4

1
Tree	isBuiltinObject () != IncrementalCheckMode.OFF
Code	isBuiltinObject () != IncrementalCheckMode.OFF
Distance : 5

2
Tree	skipStringLiteralEscapeSequence () != IncrementalCheckMode.OFF
Code	skipStringLiteralEscapeSequence () != IncrementalCheckMode.OFF
Distance : 5

3
Tree	stubInfo () != IncrementalCheckMode.OFF
Code	stubInfo () != IncrementalCheckMode.OFF
Distance : 5

4
Tree	markStubUsed () != IncrementalCheckMode.OFF
Code	markStubUsed () != IncrementalCheckMode.OFF
Distance : 5

5
Tree	getIgnoredMatcher () != that.id
Code	getIgnoredMatcher () != that.id
Distance : 5

6
Tree	this . i == i
Code	this . i == i
Distance : 5

7
Tree	this . iChrono == i
Code	this . iChrono == i
Distance : 5

8
Tree	skipStringLiteralEscapeSequence ( i ) != IncrementalCheckMode.OFF
Code	skipStringLiteralEscapeSequence ( i ) != IncrementalCheckMode.OFF
Distance : 6

9
Tree	i == y
Code	i == y
Distance : 4

10
Tree	i < getBooleanProp ()
Code	i < getBooleanProp ()
Distance : 3

11
Tree	i == val
Code	i == val
Distance : 4

12
Tree	i == parent
Code	i == parent
Distance : 4

13
Tree	i / i
Code	i / i
Distance : 4

14
Tree	i . valueOf ( i ) != current.parent.scopes
Code	i . valueOf ( i ) != current.parent.scopes
Distance : 7

15
Tree	i . valueOf ( i ) != iChronology.MILLIS_PER_DAY
Code	i . valueOf ( i ) != iChronology.MILLIS_PER_DAY
Distance : 7

16
Tree	wrong > NUMBER_CONSTANT
Code	wrong > NUMBER_CONSTANT
Distance : 5

17
Tree	i / SECONDS_MILLIS
Code	i / SECONDS_MILLIS
Distance : 4

18
Tree	i . valueOf ( i ) != ArrayUtils.EMPTY_STRING_ARRAY
Code	i . valueOf ( i ) != ArrayUtils.EMPTY_STRING_ARRAY
Distance : 7

19
Tree	this . isBuiltinObject () != that.id
Code	this . isBuiltinObject () != that.id
Distance : 6

20
Tree	getIgnoredMatcher () != IncrementalCheckMode.OFF
Code	getIgnoredMatcher () != IncrementalCheckMode.OFF
Distance : 5

21
Tree	i == that.id && i
Code	i == that.id && i
Distance : 4

22
Tree	module > NUMBER_CONSTANT
Code	module > NUMBER_CONSTANT
Distance : 5

23
Tree	set > NUMBER_CONSTANT
Code	set > NUMBER_CONSTANT
Distance : 5

24
Tree	i == IncrementalCheckMode.OFF && i
Code	i == IncrementalCheckMode.OFF && i
Distance : 4

25
Tree	skipStringLiteralEscapeSequence ( i ) == i
Code	skipStringLiteralEscapeSequence ( i ) == i
Distance : 6

26
Tree	markStubUsed () == i
Code	markStubUsed () == i
Distance : 5

27
Tree	i / INDEX_OFFSET
Code	i / INDEX_OFFSET
Distance : 4

28
Tree	this . implicitInterfaceUses == tolerance
Code	this . implicitInterfaceUses == tolerance
Distance : 5

29
Tree	toPrinter ( i ) == i
Code	toPrinter ( i ) == i
Distance : 6

30
Tree	this . iChrono == Integer
Code	this . iChrono == Integer
Distance : 5

31
Tree	getIgnoredMatcher () == i
Code	getIgnoredMatcher () == i
Distance : 5

32
Tree	i == AllowedSolution.LEFT_SIDE && i
Code	i == AllowedSolution.LEFT_SIDE && i
Distance : 4

33
Tree	isTypecheckingEnabled ( i ) == i
Code	isTypecheckingEnabled ( i ) == i
Distance : 6

34
Tree	last > NUMBER_CONSTANT
Code	last > NUMBER_CONSTANT
Distance : 5

35
Tree	stubInfo ( i ) == i
Code	stubInfo ( i ) == i
Distance : 6

36
Tree	includesGlobals ( i ) == i
Code	includesGlobals ( i ) == i
Distance : 6

37
Tree	isBuiltinObject () == i
Code	isBuiltinObject () == i
Distance : 5

38
Tree	this == entry
Code	this == entry
Distance : 4

39
Tree	i . valueOf ( i ) != that.id
Code	i . valueOf ( i ) != that.id
Distance : 7

40
Tree	i . valueOf () != PivotSelectionRule.DANTZIG
Code	i . valueOf () != PivotSelectionRule.DANTZIG
Distance : 5

41
Tree	i . valueOf () != currentScript.rootNode
Code	i . valueOf () != currentScript.rootNode
Distance : 5

42
Tree	i == null
Code	i == null
Distance : 4

43
Tree	i . valueOf () != Cartesian2D.NaN
Code	i . valueOf () != Cartesian2D.NaN
Distance : 5

44
Tree	i == current.parent.scopes
Code	i == current.parent.scopes
Distance : 4

45
Tree	i < iChronology.MILLIS_PER_DAY
Code	i < iChronology.MILLIS_PER_DAY
Distance : 3

46
Tree	i == AllowedSolution.LEFT_SIDE
Code	i == AllowedSolution.LEFT_SIDE
Distance : 4

47
Tree	toPrinter () == i
Code	toPrinter () == i
Distance : 5

48
Tree	i < Config.RunMode.KEEP_GOING
Code	i < Config.RunMode.KEEP_GOING
Distance : 3

49
Tree	isTypecheckingEnabled () == i
Code	isTypecheckingEnabled () == i
Distance : 5

50
Tree	i < Entities.ISO8859_1_ARRAY_LENGTH
Code	i < Entities.ISO8859_1_ARRAY_LENGTH
Distance : 3

51
Tree	includesGlobals () == i
Code	includesGlobals () == i
Distance : 5

52
Tree	i < LocalizedFormats.EULER_ANGLES_SINGULARITY
Code	i < LocalizedFormats.EULER_ANGLES_SINGULARITY
Distance : 3

53
Tree	i == problem.a
Code	i == problem.a
Distance : 4

54
Tree	this . isBuiltinObject () != IncrementalCheckMode.OFF
Code	this . isBuiltinObject () != IncrementalCheckMode.OFF
Distance : 6

55
Tree	getIgnoredMatcher ( i ) != current.parent.scopes
Code	getIgnoredMatcher ( i ) != current.parent.scopes
Distance : 6

56
Tree	isBuiltinObject ( i ) != current.parent.scopes
Code	isBuiltinObject ( i ) != current.parent.scopes
Distance : 6

57
Tree	i == IncrementalCheckMode.GENERATE_IJS
Code	i == IncrementalCheckMode.GENERATE_IJS
Distance : 4

58
Tree	numerator > NUMBER_CONSTANT
Code	numerator > NUMBER_CONSTANT
Distance : 5

59
Tree	i / residual
Code	i / residual
Distance : 4

60
Tree	i == missingEntries
Code	i == missingEntries
Distance : 4

61
Tree	i . valueOf ( i ) != IncrementalCheckMode.OFF
Code	i . valueOf ( i ) != IncrementalCheckMode.OFF
Distance : 7

62
Tree	i / chromosomeRepresentation
Code	i / chromosomeRepresentation
Distance : 4

63
Tree	this . iChrono . getBottomObject () != that.id
Code	this . iChrono . getBottomObject () != that.id
Distance : 7

64
Tree	entry == null
Code	entry == null
Distance : 5

65
Tree	this . i . getBottomObject () != that.id
Code	this . i . getBottomObject () != that.id
Distance : 7

66
Tree	numerator != null
Code	numerator != null
Distance : 5

67
Tree	skipStringLiteralEscapeSequence () == i
Code	skipStringLiteralEscapeSequence () == i
Distance : 5

68
Tree	i == problem.a && i
Code	i == problem.a && i
Distance : 4

69
Tree	markStubUsed ( i ) == i
Code	markStubUsed ( i ) == i
Distance : 6

70
Tree	entry > NUMBER_CONSTANT
Code	entry > NUMBER_CONSTANT
Distance : 5

71
Tree	this . iChrono . getBottomObject () != IncrementalCheckMode.OFF
Code	this . iChrono . getBottomObject () != IncrementalCheckMode.OFF
Distance : 7

72
Tree	i && i == current.parent.scopes
Code	i && i == current.parent.scopes
Distance : 4

73
Tree	i && i == IncrementalCheckMode.OFF
Code	i && i == IncrementalCheckMode.OFF
Distance : 4

74
Tree	i == IncrementalCheckMode.GENERATE_IJS && i
Code	i == IncrementalCheckMode.GENERATE_IJS && i
Distance : 4

75
Tree	stubInfo () == i
Code	stubInfo () == i
Distance : 5

76
Tree	i == PivotSelectionRule.DANTZIG && i
Code	i == PivotSelectionRule.DANTZIG && i
Distance : 4

77
Tree	i == ArrayUtils.EMPTY_STRING_ARRAY && i
Code	i == ArrayUtils.EMPTY_STRING_ARRAY && i
Distance : 4

78
Tree	i < isBuiltinObject ()
Code	i < isBuiltinObject ()
Distance : 3

79
Tree	i < getProperNumerator ()
Code	i < getProperNumerator ()
Distance : 3

80
Tree	i == source.contractionCriterion
Code	i == source.contractionCriterion
Distance : 4

81
Tree	this . stopTime == i
Code	this . stopTime == i
Distance : 5

82
Tree	i == IncrementalCheckMode.OFF
Code	i == IncrementalCheckMode.OFF
Distance : 4

83
Tree	i < getMask ()
Code	i < getMask ()
Distance : 3

84
Tree	i == ArrayUtils.EMPTY_STRING_ARRAY
Code	i == ArrayUtils.EMPTY_STRING_ARRAY
Distance : 4

85
Tree	i < getIgnoredMatcher ()
Code	i < getIgnoredMatcher ()
Distance : 3

86
Tree	wrong != null
Code	wrong != null
Distance : 5

87
Tree	getIgnoredMatcher ( i ) == i
Code	getIgnoredMatcher ( i ) == i
Distance : 6

88
Tree	i == that.id < /
Code	i == that.id < /
Distance : 4

89
Tree	i == current.parent.scopes < /
Code	i == current.parent.scopes < /
Distance : 4

90
Tree	i == current.parent.scopes && i
Code	i == current.parent.scopes && i
Distance : 4

91
Tree	i == Integer
Code	i == Integer
Distance : 4

92
Tree	this . i . getBottomObject () != IncrementalCheckMode.OFF
Code	this . i . getBottomObject () != IncrementalCheckMode.OFF
Distance : 7

93
Tree	i == AllowedSolution.LEFT_SIDE < /
Code	i == AllowedSolution.LEFT_SIDE < /
Distance : 4

94
Tree	i != null
Code	i != null
Distance : 4

95
Tree	i . valueOf () != IncrementalCheckMode.OFF
Code	i . valueOf () != IncrementalCheckMode.OFF
Distance : 5

96
Tree	i && i == AllowedSolution.LEFT_SIDE
Code	i && i == AllowedSolution.LEFT_SIDE
Distance : 4

97
Tree	i < getNormalizedReferenceName ()
Code	i < getNormalizedReferenceName ()
Distance : 3

98
Tree	this == k
Code	this == k
Distance : 4

99
Tree	i == problem.a < /
Code	i == problem.a < /
Distance : 4

100
Tree	isBuiltinObject ( i ) == i
Code	isBuiltinObject ( i ) == i
Distance : 6

101
Tree	i > NUMBER_CONSTANT
Code	i > NUMBER_CONSTANT
Distance : 4

102
Tree	i == that.id
Code	i == that.id
Distance : 4

103
Tree	i == i
Code	i == i
Distance : 4

104
Tree	i . valueOf () != source.contractionCriterion
Code	i . valueOf () != source.contractionCriterion
Distance : 5

105
Tree	module != null
Code	module != null
Distance : 5

106
Tree	skipStringLiteralEscapeSequence ( i ) != current.parent.scopes
Code	skipStringLiteralEscapeSequence ( i ) != current.parent.scopes
Distance : 6

107
Tree	i . valueOf () != ArrayUtils.EMPTY_STRING_ARRAY
Code	i . valueOf () != ArrayUtils.EMPTY_STRING_ARRAY
Distance : 5

108
Tree	getIgnoredMatcher ( i ) != IncrementalCheckMode.OFF
Code	getIgnoredMatcher ( i ) != IncrementalCheckMode.OFF
Distance : 6

109
Tree	i / j
Code	i / j
Distance : 4

110
Tree	this == i
Code	this == i
Distance : 4

111
Tree	this . resetBuilder () != IncrementalCheckMode.OFF
Code	this . resetBuilder () != IncrementalCheckMode.OFF
Distance : 6

112
Tree	this . isBuiltinObject () != Cartesian2D.NaN
Code	this . isBuiltinObject () != Cartesian2D.NaN
Distance : 6

113
Tree	this . iChrono . isBuiltinObject () != that.id
Code	this . iChrono . isBuiltinObject () != that.id
Distance : 7

114
Tree	i < that.id
Code	i < that.id
Distance : 3

115
Tree	this . iChrono . isBuiltinObject () != IncrementalCheckMode.OFF
Code	this . iChrono . isBuiltinObject () != IncrementalCheckMode.OFF
Distance : 7

116
Tree	i == IncrementalCheckMode.GENERATE_IJS i /
Code	i == IncrementalCheckMode.GENERATE_IJS i /
Distance : 4

117
Tree	i . valueOf () != reporterStub.previousLocation
Code	i . valueOf () != reporterStub.previousLocation
Distance : 5

118
Tree	this . i . isBuiltinObject () != that.id
Code	this . i . isBuiltinObject () != that.id
Distance : 7

119
Tree	i < IncrementalCheckMode.GENERATE_IJS
Code	i < IncrementalCheckMode.GENERATE_IJS
Distance : 3

120
Tree	i < current.parent.scopes
Code	i < current.parent.scopes
Distance : 3

121
Tree	i == tolerance
Code	i == tolerance
Distance : 4

122
Tree	i == source.contractionCriterion < /
Code	i == source.contractionCriterion < /
Distance : 4

123
Tree	this . i . isBuiltinObject () != IncrementalCheckMode.OFF
Code	this . i . isBuiltinObject () != IncrementalCheckMode.OFF
Distance : 7

124
Tree	i < IncrementalCheckMode.OFF
Code	i < IncrementalCheckMode.OFF
Distance : 3

125
Tree	getIgnoredMatcher () != reporterStub.previousLocation
Code	getIgnoredMatcher () != reporterStub.previousLocation
Distance : 5

126
Tree	isBuiltinObject () != that.id
Code	isBuiltinObject () != that.id
Distance : 5

127
Tree	getIgnoredMatcher ( i ) != iChronology.MILLIS_PER_DAY
Code	getIgnoredMatcher ( i ) != iChronology.MILLIS_PER_DAY
Distance : 6

128
Tree	isBuiltinObject ( i ) != IncrementalCheckMode.OFF
Code	isBuiltinObject ( i ) != IncrementalCheckMode.OFF
Distance : 6

129
Tree	this == Integer
Code	this == Integer
Distance : 4

130
Tree	isBuiltinObject ( i ) != iChronology.MILLIS_PER_DAY
Code	isBuiltinObject ( i ) != iChronology.MILLIS_PER_DAY
Distance : 6

131
Tree	this . isBuiltinObject () != LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER
Code	this . isBuiltinObject () != LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER
Distance : 6

132
Tree	this == context
Code	this == context
Distance : 4

133
Tree	this . implicitInterfaceUses == i
Code	this . implicitInterfaceUses == i
Distance : 5

134
Tree	this . unescape () != IncrementalCheckMode.OFF
Code	this . unescape () != IncrementalCheckMode.OFF
Distance : 6

135
Tree	i . valueOf ( i ) != TokenType.STRING
Code	i . valueOf ( i ) != TokenType.STRING
Distance : 7

136
Tree	this . isBuiltinObject () != currentScript.rootNode
Code	this . isBuiltinObject () != currentScript.rootNode
Distance : 6

137
Tree	i . valueOf ( i ) != Entities.ISO8859_1_ARRAY_LENGTH
Code	i . valueOf ( i ) != Entities.ISO8859_1_ARRAY_LENGTH
Distance : 7

138
Tree	result > NUMBER_CONSTANT
Code	result > NUMBER_CONSTANT
Distance : 5

139
Tree	this . iChrono == tolerance
Code	this . iChrono == tolerance
Distance : 5

140
Tree	i == ArrayUtils.EMPTY_STRING_ARRAY < /
Code	i == ArrayUtils.EMPTY_STRING_ARRAY < /
Distance : 4

141
Tree	this . i == tolerance
Code	this . i == tolerance
Distance : 5

142
Tree	i / maxUlps
Code	i / maxUlps
Distance : 4

143
Tree	i / currentDegree
Code	i / currentDegree
Distance : 4

144
Tree	i < canEliminate ()
Code	i < canEliminate ()
Distance : 3

145
Tree	i < findMatching ()
Code	i < findMatching ()
Distance : 3

146
Tree	result != null
Code	result != null
Distance : 5

147
Tree	result == null
Code	result == null
Distance : 5

148
Tree	last != null
Code	last != null
Distance : 5

149
Tree	entry != null
Code	entry != null
Distance : 5

150
Tree	i && i == that.id
Code	i && i == that.id
Distance : 4

151
Tree	set != null
Code	set != null
Distance : 5

152
Tree	this == last
Code	this == last
Distance : 4

153
Tree	last == null
Code	last == null
Distance : 5

154
Tree	this == instant
Code	this == instant
Distance : 4

155
Tree	i && i == coefficients.length
Code	i && i == coefficients.length
Distance : 4

156
Tree	i && i == ArrayUtils.EMPTY_STRING_ARRAY
Code	i && i == ArrayUtils.EMPTY_STRING_ARRAY
Distance : 4

157
Tree	this . stubInfo () != IncrementalCheckMode.OFF
Code	this . stubInfo () != IncrementalCheckMode.OFF
Distance : 6

158
Tree	i && i == Cartesian2D.POSITIVE_INFINITY
Code	i && i == Cartesian2D.POSITIVE_INFINITY
Distance : 4

159
Tree	i == null i %
Code	i == null i %
Distance : 4

160
Tree	i == null < +=
Code	i == null < +=
Distance : 4

161
Tree	i != null thisBuf.length [
Code	i != null thisBuf.length [
Distance : 4

162
Tree	i == null thisBuf.length :
Code	i == null thisBuf.length :
Distance : 4

163
Tree	numerator == null
Code	numerator == null
Distance : 5

164
Tree	i != null thisBuf.length ?
Code	i != null thisBuf.length ?
Distance : 4

165
Tree	i != null thisBuf.length %
Code	i != null thisBuf.length %
Distance : 4

166
Tree	i != null thisBuf.length +=
Code	i != null thisBuf.length +=
Distance : 4

167
Tree	i != null thisBuf.length >=
Code	i != null thisBuf.length >=
Distance : 4

168
Tree	i == null thisBuf.length extends
Code	i == null thisBuf.length extends
Distance : 4

169
Tree	wrong == null
Code	wrong == null
Distance : 5

170
Tree	i == null < >=
Code	i == null < >=
Distance : 4

171
Tree	i != null thisBuf.length extends
Code	i != null thisBuf.length extends
Distance : 4

172
Tree	i != null thisBuf.length /
Code	i != null thisBuf.length /
Distance : 4

173
Tree	i . valueOf () != that.id
Code	i . valueOf () != that.id
Distance : 5

174
Tree	i == null thisBuf.length ^
Code	i == null thisBuf.length ^
Distance : 4

175
Tree	i == null thisBuf.length /
Code	i == null thisBuf.length /
Distance : 4

176
Tree	i != null thisBuf.length ^
Code	i != null thisBuf.length ^
Distance : 4

177
Tree	i . valueOf ( i ) != EvalMode.EVAL
Code	i . valueOf ( i ) != EvalMode.EVAL
Distance : 7

178
Tree	i == null i ?
Code	i == null i ?
Distance : 4

179
Tree	this == child
Code	this == child
Distance : 4

180
Tree	module == null
Code	module == null
Distance : 5

181
Tree	that.id < Entities.ISO8859_1_ARRAY_LENGTH
Code	that.id < Entities.ISO8859_1_ARRAY_LENGTH
Distance : 4

182
Tree	current.parent thisBuf.length Entities.ISO8859_1_ARRAY_LENGTH
Code	current.parent thisBuf.length Entities.ISO8859_1_ARRAY_LENGTH
Distance : 5

183
Tree	i . valueOf () thisBuf.length getIgnoredMatcher ( i )
Code	i . valueOf () thisBuf.length getIgnoredMatcher ( i )
Distance : 8

184
Tree	i . valueOf () thisBuf.length getNormalizedReferenceName ( i )
Code	i . valueOf () thisBuf.length getNormalizedReferenceName ( i )
Distance : 8

185
Tree	Entities.ISO8859_1_ARRAY_LENGTH < Entities.ISO8859_1_ARRAY_LENGTH
Code	Entities.ISO8859_1_ARRAY_LENGTH < Entities.ISO8859_1_ARRAY_LENGTH
Distance : 4

186
Tree	that.id thisBuf.length iChronology.MILLIS_PER_DAY
Code	that.id thisBuf.length iChronology.MILLIS_PER_DAY
Distance : 5

187
Tree	current.parent < that.id
Code	current.parent < that.id
Distance : 4

188
Tree	i . stubInfo () i getIgnoredMatcher ( i )
Code	i . stubInfo () i getIgnoredMatcher ( i )
Distance : 8

189
Tree	that.id thisBuf.length that.id
Code	that.id thisBuf.length that.id
Distance : 5

190
Tree	i . stubInfo () i getNormalizedReferenceName ( i )
Code	i . stubInfo () i getNormalizedReferenceName ( i )
Distance : 8

191
Tree	that.id < EvalMode.EVAL
Code	that.id < EvalMode.EVAL
Distance : 4

192
Tree	i . getBeta () thisBuf.length getIgnoredMatcher ( i )
Code	i . getBeta () thisBuf.length getIgnoredMatcher ( i )
Distance : 8

193
Tree	i . getBeta () i getNormalizedReferenceName ( i )
Code	i . getBeta () i getNormalizedReferenceName ( i )
Distance : 8

194
Tree	i . valueOf () thisBuf.length eras ( i )
Code	i . valueOf () thisBuf.length eras ( i )
Distance : 8

195
Tree	i . valueOf () i getUnknownType ( i )
Code	i . valueOf () i getUnknownType ( i )
Distance : 8

196
Tree	i && i == source.contractionCriterion
Code	i && i == source.contractionCriterion
Distance : 4

197
Tree	set == null
Code	set == null
Distance : 5

198
Tree	current.parent.scopes thisBuf.length Entities.ISO8859_1_ARRAY_LENGTH
Code	current.parent.scopes thisBuf.length Entities.ISO8859_1_ARRAY_LENGTH
Distance : 5

199
Tree	i == IncrementalCheckMode.OFF < /
Code	i == IncrementalCheckMode.OFF < /
Distance : 4

========================================================================


========================================================================
Example Number: 37
Parent Code is: 
{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ str . getChars ( NUMBER_CONSTANT , width , buffer , size ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=str}) (235{val=.}) (802{val=getChars}) (214{val=(}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (800{val=strLen}) (234{val=,}) (800{val=buffer}) (234{val=,}) (800{val=size}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=str}) (235{val=.}) (802{val=getChars}) (214{val=(}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (800{val=width}) (234{val=,}) (800{val=buffer}) (234{val=,}) (800{val=size}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/59/parent/src_java_org_apache_commons_lang_text_StrBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ getChars ( strLen , string , size , size , size , size ) ; }
Code	{ getChars ( strLen , string , size , size , size , size ) ; }
Distance : 9

1
Tree	str . pairedTTest ( NUMBER_CONSTANT , strLen , buffer , size ) ;
Code	str . pairedTTest ( NUMBER_CONSTANT , strLen , buffer , size ) ;
Distance : 4

2
Tree	{ getChars ( str , array.length , false ) ; }
Code	{ getChars ( str , array.length , false ) ; }
Distance : 7

3
Tree	{ str . pairedT ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
Code	{ str . pairedT ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
Distance : 2

4
Tree	str . pairedT ( NUMBER_CONSTANT , strLen , buffer , size ) ;
Code	str . pairedT ( NUMBER_CONSTANT , strLen , buffer , size ) ;
Distance : 4

5
Tree	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

6
Tree	{ defaultString ( STRING_CONSTANT , strLen , buffer , size ) ; }
Code	{ defaultString ( STRING_CONSTANT , strLen , buffer , size ) ; }
Distance : 5

7
Tree	{ str . createArgumentsAreDifferentException ( null , strLen , buffer , size ) ; }
Code	{ str . createArgumentsAreDifferentException ( null , strLen , buffer , size ) ; }
Distance : 3

8
Tree	{ str . getChars ( null , strLen , buffer , size ) ; }
Code	{ str . getChars ( null , strLen , buffer , size ) ; }
Distance : 2

9
Tree	{ getChars ( strLen , string , size , values.length ) ; }
Code	{ getChars ( strLen , string , size , values.length ) ; }
Distance : 6

10
Tree	{ str . getChars ( false ) ; }
Code	{ str . getChars ( false ) ; }
Distance : 7

11
Tree	{ defaultString ( strLen , strLen , size , values.length ) ; }
Code	{ defaultString ( strLen , strLen , size , values.length ) ; }
Distance : 7

12
Tree	{ getChars ( strLen , pattern , size , values.length ) ; }
Code	{ getChars ( strLen , pattern , size , values.length ) ; }
Distance : 6

13
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , Boolean ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , Boolean ) ; }
Distance : 2

14
Tree	{ getChars ( strLen , array.length , false ) ; }
Code	{ getChars ( strLen , array.length , false ) ; }
Distance : 7

15
Tree	str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ;
Code	str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ;
Distance : 3

16
Tree	{ str . getChars ( null , strLen , buffer , Boolean ) ; }
Code	{ str . getChars ( null , strLen , buffer , Boolean ) ; }
Distance : 3

17
Tree	{ str . parseDate ( false ) ; }
Code	{ str . parseDate ( false ) ; }
Distance : 8

18
Tree	{ str . pairedT ( false ) ; }
Code	{ str . pairedT ( false ) ; }
Distance : 8

19
Tree	{ str . getChars ( LocalizedFormats.PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD , array.length ) ; }
Code	{ str . getChars ( LocalizedFormats.PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD , array.length ) ; }
Distance : 6

20
Tree	{ str . getChars ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

21
Tree	{ str . createArgumentsAreDifferentException ( false ) ; }
Code	{ str . createArgumentsAreDifferentException ( false ) ; }
Distance : 8

22
Tree	{ str . getChars ( mapper.start , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( mapper.start , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

23
Tree	{ str . getChars ( this , strLen , buffer , size ) ; }
Code	{ str . getChars ( this , strLen , buffer , size ) ; }
Distance : 2

24
Tree	{ str . getChars ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

25
Tree	str . createArgumentsAreDifferentException ( NUMBER_CONSTANT , strLen , buffer , size ) ;
Code	str . createArgumentsAreDifferentException ( NUMBER_CONSTANT , strLen , buffer , size ) ;
Distance : 4

26
Tree	{ getChars ( strLen , strLen , size , size , size , size ) ; }
Code	{ getChars ( strLen , strLen , size , size , size , size ) ; }
Distance : 9

27
Tree	{ str . getChars ( LocalizedFormats.PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( LocalizedFormats.PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

28
Tree	{ getChars ( strLen , search , size , values.length ) ; }
Code	{ getChars ( strLen , search , size , values.length ) ; }
Distance : 6

29
Tree	{ str . defaultString ( false ) ; }
Code	{ str . defaultString ( false ) ; }
Distance : 8

30
Tree	{ str . pairedT ( null , strLen , buffer , size ) ; }
Code	{ str . pairedT ( null , strLen , buffer , size ) ; }
Distance : 3

31
Tree	{ pairedTTest ( strLen , strLen , size , size , size , size ) ; }
Code	{ pairedTTest ( strLen , strLen , size , size , size , size ) ; }
Distance : 9

32
Tree	{ getChars ( strLen , strLen , size , values.length ) ; }
Code	{ getChars ( strLen , strLen , size , values.length ) ; }
Distance : 6

33
Tree	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , array.length , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , array.length , NUMBER_CONSTANT ) ; }
Distance : 4

34
Tree	{ pairedTTest ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ pairedTTest ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 8

35
Tree	{ str . getChars ( str , lastIndexOf () , this ) ; }
Code	{ str . getChars ( str , lastIndexOf () , this ) ; }
Distance : 5

36
Tree	{ str . getChars ( LocalizedFormats.NO_DATA , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( LocalizedFormats.NO_DATA , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

37
Tree	{ getChars ( null , array.length ) ; }
Code	{ getChars ( null , array.length ) ; }
Distance : 8

38
Tree	{ getChars ( strLen , strLen , size , size , size , Boolean ) ; }
Code	{ getChars ( strLen , strLen , size , size , size , Boolean ) ; }
Distance : 9

39
Tree	{ str . getChars ( LocalizedFormats.NO_DATA , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Code	{ str . getChars ( LocalizedFormats.NO_DATA , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Distance : 6

40
Tree	{ str . pairedTTest ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
Code	{ str . pairedTTest ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
Distance : 2

41
Tree	{ defaultString ( strLen , array.length , false ) ; }
Code	{ defaultString ( strLen , array.length , false ) ; }
Distance : 8

42
Tree	{ getChars ( strLen , strLen , size , Boolean , size , size ) ; }
Code	{ getChars ( strLen , strLen , size , Boolean , size , size ) ; }
Distance : 9

43
Tree	{ str . parseDate ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
Code	{ str . parseDate ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
Distance : 2

44
Tree	{ decamelizeMatcher ( strLen , array.length , false ) ; }
Code	{ decamelizeMatcher ( strLen , array.length , false ) ; }
Distance : 8

45
Tree	{ pairedTTest ( strLen , strLen , size , values.length ) ; }
Code	{ pairedTTest ( strLen , strLen , size , values.length ) ; }
Distance : 7

46
Tree	{ getChars ( strLen , strLen , size , size , Boolean , size ) ; }
Code	{ getChars ( strLen , strLen , size , size , Boolean , size ) ; }
Distance : 9

47
Tree	str . getChars ( NUMBER_CONSTANT , strLen , buffer , Boolean ) ;
Code	str . getChars ( NUMBER_CONSTANT , strLen , buffer , Boolean ) ;
Distance : 4

48
Tree	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_COMPLEX , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_COMPLEX , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

49
Tree	{ str . getChars ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Code	{ str . getChars ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Distance : 6

50
Tree	str . parseDate ( NUMBER_CONSTANT , strLen , buffer , size ) ;
Code	str . parseDate ( NUMBER_CONSTANT , strLen , buffer , size ) ;
Distance : 4

51
Tree	{ str . getChars ( date , strLen . size () , this ) ; }
Code	{ str . getChars ( date , strLen . size () , this ) ; }
Distance : 6

52
Tree	{ str . pairedTTest ( this , strLen , buffer , size ) ; }
Code	{ str . pairedTTest ( this , strLen , buffer , size ) ; }
Distance : 3

53
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
Distance : 1

54
Tree	{ str . createArgumentsAreDifferentException ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
Code	{ str . createArgumentsAreDifferentException ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
Distance : 2

55
Tree	{ str . returnsElementsOf ( false ) ; }
Code	{ str . returnsElementsOf ( false ) ; }
Distance : 8

56
Tree	{ pairedTTest ( null , array.length ) ; }
Code	{ pairedTTest ( null , array.length ) ; }
Distance : 9

57
Tree	{ getChars ( strLen , strLen , size , size ) ; }
Code	{ getChars ( strLen , strLen , size , size ) ; }
Distance : 5

58
Tree	{ str . getChars ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE , array.length ) ; }
Code	{ str . getChars ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE , array.length ) ; }
Distance : 6

59
Tree	{ getChars ( strLen , definingCalendar , size , values.length ) ; }
Code	{ getChars ( strLen , definingCalendar , size , values.length ) ; }
Distance : 6

60
Tree	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

61
Tree	{ str . pairedTTest ( false ) ; }
Code	{ str . pairedTTest ( false ) ; }
Distance : 8

62
Tree	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

63
Tree	{ str . getChars ( str , strLen . size () , this ) ; }
Code	{ str . getChars ( str , strLen . size () , this ) ; }
Distance : 6

64
Tree	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_COMPLEX , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_COMPLEX , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

65
Tree	str . defaultString ( NUMBER_CONSTANT , strLen , buffer , size ) ;
Code	str . defaultString ( NUMBER_CONSTANT , strLen , buffer , size ) ;
Distance : 4

66
Tree	{ str . pairedT ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . pairedT ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 7

67
Tree	{ str . getChars ( LocalizedFormats.PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( LocalizedFormats.PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

68
Tree	{ str . pairedTTest ( CHAR_CONS , NUMBER_CONSTANT , array.length , NUMBER_CONSTANT ) ; }
Code	{ str . pairedTTest ( CHAR_CONS , NUMBER_CONSTANT , array.length , NUMBER_CONSTANT ) ; }
Distance : 5

69
Tree	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_COMPLEX , array.length ) ; }
Code	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_COMPLEX , array.length ) ; }
Distance : 6

70
Tree	{ str . pairedTTest ( null , strLen , buffer , size ) ; }
Code	{ str . pairedTTest ( null , strLen , buffer , size ) ; }
Distance : 3

71
Tree	{ str . getChars ( str , strLen . valueOf () , this ) ; }
Code	{ str . getChars ( str , strLen . valueOf () , this ) ; }
Distance : 6

72
Tree	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Code	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Distance : 6

73
Tree	{ pairedT ( strLen , array.length , false ) ; }
Code	{ pairedT ( strLen , array.length , false ) ; }
Distance : 8

74
Tree	{ str . getChars ( str , buf . size () , this ) ; }
Code	{ str . getChars ( str , buf . size () , this ) ; }
Distance : 6

75
Tree	{ str . pairedT ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . pairedT ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 7

76
Tree	{ getChars ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ getChars ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 7

77
Tree	{ getChars ( strLen , strLen , size () , STRING_CONSTANT ) ; }
Code	{ getChars ( strLen , strLen , size () , STRING_CONSTANT ) ; }
Distance : 7

78
Tree	{ defaultString ( STRING_CONSTANT , strLen , buffer , Boolean ) ; }
Code	{ defaultString ( STRING_CONSTANT , strLen , buffer , Boolean ) ; }
Distance : 6

79
Tree	pairedTTest ( strLen , strLen , buffer , values.length ) ;
Code	pairedTTest ( strLen , strLen , buffer , values.length ) ;
Distance : 8

80
Tree	{ str . getChars ( this , strLen , buffer , Boolean ) ; }
Code	{ str . getChars ( this , strLen , buffer , Boolean ) ; }
Distance : 3

81
Tree	{ str . getChars ( date , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( date , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

82
Tree	{ str . defaultString ( null , strLen , buffer , size ) ; }
Code	{ str . defaultString ( null , strLen , buffer , size ) ; }
Distance : 3

83
Tree	{ str . pairedT ( CHAR_CONS , NUMBER_CONSTANT , array.length , NUMBER_CONSTANT ) ; }
Code	{ str . pairedT ( CHAR_CONS , NUMBER_CONSTANT , array.length , NUMBER_CONSTANT ) ; }
Distance : 5

84
Tree	{ getChars ( STRING_CONSTANT , strLen , buffer , Boolean ) ; }
Code	{ getChars ( STRING_CONSTANT , strLen , buffer , Boolean ) ; }
Distance : 5

85
Tree	{ str . pairedTTest ( str , strLen . size () , this ) ; }
Code	{ str . pairedTTest ( str , strLen . size () , this ) ; }
Distance : 7

86
Tree	{ getChars ( Character , array.length , false ) ; }
Code	{ getChars ( Character , array.length , false ) ; }
Distance : 7

87
Tree	{ str . getChars ( Cartesian3D.ZERO , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( Cartesian3D.ZERO , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

88
Tree	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_COMPLEX , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Code	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_COMPLEX , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Distance : 6

89
Tree	{ str . getChars ( LocalizedFormats.NO_DATA , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( LocalizedFormats.NO_DATA , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

90
Tree	{ getChars ( str , strLen , size , size , size , size ) ; }
Code	{ getChars ( str , strLen , size , size , size , size ) ; }
Distance : 8

91
Tree	{ str . pairedT ( str , strLen . size () , this ) ; }
Code	{ str . pairedT ( str , strLen . size () , this ) ; }
Distance : 7

92
Tree	{ getChars ( str , strLen , size , values.length ) ; }
Code	{ getChars ( str , strLen , size , values.length ) ; }
Distance : 6

93
Tree	{ str . pairedT ( this , strLen , buffer , size ) ; }
Code	{ str . pairedT ( this , strLen , buffer , size ) ; }
Distance : 3

94
Tree	{ defaultString ( str , array.length , false ) ; }
Code	{ defaultString ( str , array.length , false ) ; }
Distance : 8

95
Tree	{ defaultString ( strLen , strLen , size , size , size , size ) ; }
Code	{ defaultString ( strLen , strLen , size , size , size , size ) ; }
Distance : 9

96
Tree	{ pairedTTest ( STRING_CONSTANT , strLen , buffer , size ) ; }
Code	{ pairedTTest ( STRING_CONSTANT , strLen , buffer , size ) ; }
Distance : 5

97
Tree	{ str . parseDate ( CHAR_CONS , NUMBER_CONSTANT , array.length , NUMBER_CONSTANT ) ; }
Code	{ str . parseDate ( CHAR_CONS , NUMBER_CONSTANT , array.length , NUMBER_CONSTANT ) ; }
Distance : 5

98
Tree	{ str . getChars ( Cartesian3D.ZERO , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( Cartesian3D.ZERO , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

99
Tree	{ getChars ( null , CheckConformance.CONFORMANCE_VIOLATION ) ; }
Code	{ getChars ( null , CheckConformance.CONFORMANCE_VIOLATION ) ; }
Distance : 8

100
Tree	{ str . getChars ( str ? StringUtils.EMPTY : Locale.ROOT ) ; }
Code	{ str . getChars ( str ? StringUtils.EMPTY : Locale.ROOT ) ; }
Distance : 7

101
Tree	{ str . defaultString ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
Code	{ str . defaultString ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
Distance : 2

102
Tree	{ str . addOrderedRequire ( false ) ; }
Code	{ str . addOrderedRequire ( false ) ; }
Distance : 8

103
Tree	{ getChars ( strLen , strLen , valueOf () , STRING_CONSTANT ) ; }
Code	{ getChars ( strLen , strLen , valueOf () , STRING_CONSTANT ) ; }
Distance : 7

104
Tree	{ str . getChars ( str , nextInt () , this ) ; }
Code	{ str . getChars ( str , nextInt () , this ) ; }
Distance : 5

105
Tree	{ str . addOrderedRequire ( null , strLen , buffer , size ) ; }
Code	{ str . addOrderedRequire ( null , strLen , buffer , size ) ; }
Distance : 3

106
Tree	{ decamelizeMatcher ( STRING_CONSTANT , strLen , buffer , size ) ; }
Code	{ decamelizeMatcher ( STRING_CONSTANT , strLen , buffer , size ) ; }
Distance : 5

107
Tree	{ getChars ( strLen , strLen , size , Boolean ) ; }
Code	{ getChars ( strLen , strLen , size , Boolean ) ; }
Distance : 6

108
Tree	{ defaultString ( strLen , strLen , size () , STRING_CONSTANT ) ; }
Code	{ defaultString ( strLen , strLen , size () , STRING_CONSTANT ) ; }
Distance : 8

109
Tree	str . addOrderedRequire ( NUMBER_CONSTANT , strLen , buffer , size ) ;
Code	str . addOrderedRequire ( NUMBER_CONSTANT , strLen , buffer , size ) ;
Distance : 4

110
Tree	{ defaultString ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ defaultString ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 8

111
Tree	{ defaultString ( null , array.length ) ; }
Code	{ defaultString ( null , array.length ) ; }
Distance : 9

112
Tree	{ str . getChars ( date , strLen , size , STRING_CONSTANT ) ; }
Code	{ str . getChars ( date , strLen , size , STRING_CONSTANT ) ; }
Distance : 4

113
Tree	{ str . getChars ( mapper.start , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Code	{ str . getChars ( mapper.start , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Distance : 6

114
Tree	defaultString ( strLen , strLen , buffer , values.length ) ;
Code	defaultString ( strLen , strLen , buffer , values.length ) ;
Distance : 8

115
Tree	{ str . getChars ( pattern , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( pattern , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

116
Tree	{ str . getChars ( false , NUMBER_CONSTANT , array.length , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( false , NUMBER_CONSTANT , array.length , NUMBER_CONSTANT ) ; }
Distance : 4

117
Tree	{ pairedTTest ( strLen , array.length , false ) ; }
Code	{ pairedTTest ( strLen , array.length , false ) ; }
Distance : 8

118
Tree	{ str . defaultString ( CHAR_CONS , NUMBER_CONSTANT , array.length , NUMBER_CONSTANT ) ; }
Code	{ str . defaultString ( CHAR_CONS , NUMBER_CONSTANT , array.length , NUMBER_CONSTANT ) ; }
Distance : 5

119
Tree	{ str . getChars ( pattern , strLen , size , STRING_CONSTANT ) ; }
Code	{ str . getChars ( pattern , strLen , size , STRING_CONSTANT ) ; }
Distance : 4

120
Tree	{ str . addOrderedRequire ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
Code	{ str . addOrderedRequire ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
Distance : 2

121
Tree	{ getChars ( STRING_CONSTANT , str , buffer , size ) ; }
Code	{ getChars ( STRING_CONSTANT , str , buffer , size ) ; }
Distance : 4

122
Tree	{ str . createArgumentsAreDifferentException ( this , strLen , buffer , size ) ; }
Code	{ str . createArgumentsAreDifferentException ( this , strLen , buffer , size ) ; }
Distance : 3

123
Tree	getChars ( strLen , strLen , buffer , values.length ) ;
Code	getChars ( strLen , strLen , buffer , values.length ) ;
Distance : 7

124
Tree	{ str . getChars ( str ? StringUtils.EMPTY : LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED ) ; }
Code	{ str . getChars ( str ? StringUtils.EMPTY : LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED ) ; }
Distance : 7

125
Tree	{ str . getChars ( pattern , strLen . size () , this ) ; }
Code	{ str . getChars ( pattern , strLen . size () , this ) ; }
Distance : 6

126
Tree	{ str . parseDate ( this , strLen , buffer , size ) ; }
Code	{ str . parseDate ( this , strLen , buffer , size ) ; }
Distance : 3

127
Tree	{ str . getChars ( str , buf , size , STRING_CONSTANT ) ; }
Code	{ str . getChars ( str , buf , size , STRING_CONSTANT ) ; }
Distance : 4

128
Tree	{ str . addOrderedRequire ( this , strLen , buffer , size ) ; }
Code	{ str . addOrderedRequire ( this , strLen , buffer , size ) ; }
Distance : 3

129
Tree	{ pairedTTest ( strLen , strLen , size , size ) ; }
Code	{ pairedTTest ( strLen , strLen , size , size ) ; }
Distance : 6

130
Tree	{ str . createArgumentsAreDifferentException ( CHAR_CONS , NUMBER_CONSTANT , array.length , NUMBER_CONSTANT ) ; }
Code	{ str . createArgumentsAreDifferentException ( CHAR_CONS , NUMBER_CONSTANT , array.length , NUMBER_CONSTANT ) ; }
Distance : 5

131
Tree	{ getChars ( strLen , strLen , getChronology () , STRING_CONSTANT ) ; }
Code	{ getChars ( strLen , strLen , getChronology () , STRING_CONSTANT ) ; }
Distance : 7

132
Tree	{ pairedT ( STRING_CONSTANT , strLen , buffer , size ) ; }
Code	{ pairedT ( STRING_CONSTANT , strLen , buffer , size ) ; }
Distance : 5

133
Tree	{ str . addOrderedRequire ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . addOrderedRequire ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 5

134
Tree	{ defaultString ( strLen , strLen , valueOf () , STRING_CONSTANT ) ; }
Code	{ defaultString ( strLen , strLen , valueOf () , STRING_CONSTANT ) ; }
Distance : 8

135
Tree	{ getChars ( STRING_CONSTANT , strLen , buffer , size ) ; }
Code	{ getChars ( STRING_CONSTANT , strLen , buffer , size ) ; }
Distance : 4

136
Tree	{ str . getChars ( date , nextInt () , this ) ; }
Code	{ str . getChars ( date , nextInt () , this ) ; }
Distance : 5

137
Tree	{ defaultString ( strLen , strLen , size , size ) ; }
Code	{ defaultString ( strLen , strLen , size , size ) ; }
Distance : 6

138
Tree	{ str . parseDate ( null , strLen , buffer , size ) ; }
Code	{ str . parseDate ( null , strLen , buffer , size ) ; }
Distance : 3

139
Tree	{ str . getChars ( mapper.start , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( mapper.start , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

140
Tree	{ str . addOrderedRequire ( CHAR_CONS , NUMBER_CONSTANT , array.length , NUMBER_CONSTANT ) ; }
Code	{ str . addOrderedRequire ( CHAR_CONS , NUMBER_CONSTANT , array.length , NUMBER_CONSTANT ) ; }
Distance : 5

141
Tree	{ str . pairedTTest ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . pairedTTest ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 5

142
Tree	{ str . getChars ( mapper.start , array.length ) ; }
Code	{ str . getChars ( mapper.start , array.length ) ; }
Distance : 6

143
Tree	{ str . getChars ( str , strLen , size , STRING_CONSTANT ) ; }
Code	{ str . getChars ( str , strLen , size , STRING_CONSTANT ) ; }
Distance : 4

144
Tree	{ str . getChars ( Cartesian3D.ZERO , array.length ) ; }
Code	{ str . getChars ( Cartesian3D.ZERO , array.length ) ; }
Distance : 6

145
Tree	{ str . getChars ( LocalizedFormats.PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Code	{ str . getChars ( LocalizedFormats.PERCENTILE_IMPLEMENTATION_UNSUPPORTED_METHOD , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Distance : 6

146
Tree	{ str . pairedT ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE , array.length ) ; }
Code	{ str . pairedT ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE , array.length ) ; }
Distance : 7

147
Tree	{ str . getChars ( this , strLen , size , size ) ; }
Code	{ str . getChars ( this , strLen , size , size ) ; }
Distance : 3

148
Tree	{ str . pairedT ( str , strLen , size , STRING_CONSTANT ) ; }
Code	{ str . pairedT ( str , strLen , size , STRING_CONSTANT ) ; }
Distance : 5

149
Tree	{ str . parseDate ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . parseDate ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 5

150
Tree	{ str . pairedT ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . pairedT ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 5

151
Tree	{ str . getChars ( pattern , nextInt () , this ) ; }
Code	{ str . getChars ( pattern , nextInt () , this ) ; }
Distance : 5

152
Tree	{ getChars ( null , StringUtils.EMPTY ) ; }
Code	{ getChars ( null , StringUtils.EMPTY ) ; }
Distance : 8

153
Tree	{ getChars ( str , strLen , size , size ) ; }
Code	{ getChars ( str , strLen , size , size ) ; }
Distance : 5

154
Tree	{ str . pairedT ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Code	{ str . pairedT ( LocalizedFormats.CLASS_DOESNT_IMPLEMENT_COMPARABLE , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Distance : 7

155
Tree	{ str . getChars ( mock , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( mock , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

156
Tree	{ getChars ( strLen , string , size , size ) ; }
Code	{ getChars ( strLen , string , size , size ) ; }
Distance : 5

157
Tree	{ defaultString ( strLen , strLen , size , Boolean ) ; }
Code	{ defaultString ( strLen , strLen , size , Boolean ) ; }
Distance : 7

158
Tree	{ str . getChars ( str , valueOf () , this ) ; }
Code	{ str . getChars ( str , valueOf () , this ) ; }
Distance : 5

159
Tree	{ str . getChars ( str , getStartMillis () , this ) ; }
Code	{ str . getChars ( str , getStartMillis () , this ) ; }
Distance : 5

160
Tree	{ str . addOrderedRequire ( str , strLen . size () , this ) ; }
Code	{ str . addOrderedRequire ( str , strLen . size () , this ) ; }
Distance : 7

161
Tree	{ pairedT ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ pairedT ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 8

162
Tree	{ str . getChars ( str ? StringUtils.EMPTY : LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ) ; }
Code	{ str . getChars ( str ? StringUtils.EMPTY : LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ) ; }
Distance : 7

163
Tree	{ str . getChars ( str ? StringUtils.EMPTY : values.length ) ; }
Code	{ str . getChars ( str ? StringUtils.EMPTY : values.length ) ; }
Distance : 7

164
Tree	{ str . pairedT ( str , nextInt () , this ) ; }
Code	{ str . pairedT ( str , nextInt () , this ) ; }
Distance : 6

165
Tree	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR , array.length ) ; }
Code	{ str . getChars ( LocalizedFormats.CANNOT_FORMAT_INSTANCE_AS_3D_VECTOR , array.length ) ; }
Distance : 6

166
Tree	{ decamelizeMatcher ( null , array.length ) ; }
Code	{ decamelizeMatcher ( null , array.length ) ; }
Distance : 9

167
Tree	pairedT ( strLen , strLen , buffer , values.length ) ;
Code	pairedT ( strLen , strLen , buffer , values.length ) ;
Distance : 8

168
Tree	{ str . getChars ( date ? StringUtils.EMPTY : LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED ) ; }
Code	{ str . getChars ( date ? StringUtils.EMPTY : LocalizedFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED ) ; }
Distance : 7

169
Tree	{ str . parseDate ( str , strLen , size , STRING_CONSTANT ) ; }
Code	{ str . parseDate ( str , strLen , size , STRING_CONSTANT ) ; }
Distance : 5

170
Tree	{ str . getChars ( str ? StringUtils.EMPTY : currentState.length ) ; }
Code	{ str . getChars ( str ? StringUtils.EMPTY : currentState.length ) ; }
Distance : 7

171
Tree	{ getChars ( null , Locale.ENGLISH ) ; }
Code	{ getChars ( null , Locale.ENGLISH ) ; }
Distance : 8

172
Tree	{ getChars ( str , strLen , size () , STRING_CONSTANT ) ; }
Code	{ getChars ( str , strLen , size () , STRING_CONSTANT ) ; }
Distance : 7

173
Tree	{ str . getChars ( Cartesian3D.ZERO , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Code	{ str . getChars ( Cartesian3D.ZERO , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT , size + size ) ; }
Distance : 6

174
Tree	{ EscapeUtils.ESCAPE_JAVA . getChars ( strLen , strLen ) ; }
Code	{ EscapeUtils.ESCAPE_JAVA . getChars ( strLen , strLen ) ; }
Distance : 7

175
Tree	{ str . getChars ( str ? StringUtils.EMPTY : PropertyCollapseLevel.NONE ) ; }
Code	{ str . getChars ( str ? StringUtils.EMPTY : PropertyCollapseLevel.NONE ) ; }
Distance : 7

176
Tree	{ defaultString ( null , CheckConformance.CONFORMANCE_VIOLATION ) ; }
Code	{ defaultString ( null , CheckConformance.CONFORMANCE_VIOLATION ) ; }
Distance : 9

177
Tree	pairedTTest ( strLen , pattern , buffer , values.length ) ;
Code	pairedTTest ( strLen , pattern , buffer , values.length ) ;
Distance : 8

178
Tree	{ str . addOrderedRequire ( str , strLen , size , STRING_CONSTANT ) ; }
Code	{ str . addOrderedRequire ( str , strLen , size , STRING_CONSTANT ) ; }
Distance : 5

179
Tree	{ str . getChars ( LocalizedFormats.NO_DATA , array.length ) ; }
Code	{ str . getChars ( LocalizedFormats.NO_DATA , array.length ) ; }
Distance : 6

180
Tree	{ addOrderedRequire ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ addOrderedRequire ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 8

181
Tree	{ pairedTTest ( strLen , strLen , size () , STRING_CONSTANT ) ; }
Code	{ pairedTTest ( strLen , strLen , size () , STRING_CONSTANT ) ; }
Distance : 8

182
Tree	pairedTTest ( str , strLen , buffer , values.length ) ;
Code	pairedTTest ( str , strLen , buffer , values.length ) ;
Distance : 8

183
Tree	{ str . pairedTTest ( str , strLen , size , STRING_CONSTANT ) ; }
Code	{ str . pairedTTest ( str , strLen , size , STRING_CONSTANT ) ; }
Distance : 5

184
Tree	{ str . getChars ( date , lastIndexOf () , this ) ; }
Code	{ str . getChars ( date , lastIndexOf () , this ) ; }
Distance : 5

185
Tree	pairedTTest ( strLen , buf , buffer , values.length ) ;
Code	pairedTTest ( strLen , buf , buffer , values.length ) ;
Distance : 8

186
Tree	decamelizeMatcher ( strLen , strLen , buffer , values.length ) ;
Code	decamelizeMatcher ( strLen , strLen , buffer , values.length ) ;
Distance : 8

187
Tree	{ decamelizeMatcher ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ decamelizeMatcher ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 8

188
Tree	{ getChars ( strLen , pattern , size , size ) ; }
Code	{ getChars ( strLen , pattern , size , size ) ; }
Distance : 5

189
Tree	{ pairedTTest ( strLen , strLen , valueOf () , STRING_CONSTANT ) ; }
Code	{ pairedTTest ( strLen , strLen , valueOf () , STRING_CONSTANT ) ; }
Distance : 8

190
Tree	{ str . getChars ( date ? StringUtils.EMPTY : Locale.ROOT ) ; }
Code	{ str . getChars ( date ? StringUtils.EMPTY : Locale.ROOT ) ; }
Distance : 7

191
Tree	{ entry.map . getChars ( strLen , strLen ) ; }
Code	{ entry.map . getChars ( strLen , strLen ) ; }
Distance : 7

192
Tree	{ StringUtils.EMPTY . getChars ( strLen , strLen ) ; }
Code	{ StringUtils.EMPTY . getChars ( strLen , strLen ) ; }
Distance : 7

193
Tree	{ EscapeUtils.ESCAPE_JAVA . getChars ( str , strLen ) ; }
Code	{ EscapeUtils.ESCAPE_JAVA . getChars ( str , strLen ) ; }
Distance : 7

194
Tree	{ org.joda.time.gwt.util.Arrays . getChars ( strLen , strLen ) ; }
Code	{ org.joda.time.gwt.util.Arrays . getChars ( strLen , strLen ) ; }
Distance : 7

195
Tree	{ notEmpty ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ notEmpty ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 8

196
Tree	{ EscapeUtils.ESCAPE_JAVA . getChars ( strLen , buf ) ; }
Code	{ EscapeUtils.ESCAPE_JAVA . getChars ( strLen , buf ) ; }
Distance : 7

197
Tree	{ array.length . getChars ( strLen , strLen ) ; }
Code	{ array.length . getChars ( strLen , strLen ) ; }
Distance : 7

198
Tree	{ someUnusedStubbingThatQualifiesForWarning ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ someUnusedStubbingThatQualifiesForWarning ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 8

199
Tree	{ entry.map . getChars ( str , strLen ) ; }
Code	{ entry.map . getChars ( str , strLen ) ; }
Distance : 7

========================================================================


========================================================================
Example Number: 38
Parent Code is: 
{ return cAvailableLocaleSet . contains ( locale ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return availableLocaleList () . contains ( locale ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (800{val=cAvailableLocaleSet}) (235{val=.}) (802{val=contains}) (214{val=(}) (800{val=locale}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=availableLocaleList}) (216{val=()})) (235{val=.}) (802{val=contains}) (214{val=(}) (800{val=locale}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/57/parent/src_java_org_apache_commons_lang_LocaleUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return containsNow ( locale . contains ( locale ) ) ; }
Code	{ return containsNow ( locale . contains ( locale ) ) ; }
Distance : 4

1
Tree	{ return oldRoot . contains () . contains ( locale ) ; }
Code	{ return oldRoot . contains () . contains ( locale ) ; }
Distance : 3

2
Tree	{ return SUM_OF_SQUARES . contains () . contains ( locale ) ; }
Code	{ return SUM_OF_SQUARES . contains () . contains ( locale ) ; }
Distance : 3

3
Tree	{ return containsNow ( locale ) ; }
Code	{ return containsNow ( locale ) ; }
Distance : 4

4
Tree	{ return typesIndexedByProperty . contains () . contains ( locale ) ; }
Code	{ return typesIndexedByProperty . contains () . contains ( locale ) ; }
Distance : 3

5
Tree	{ return ( int ) contains ( locale + NUMBER_CONSTANT ) ; }
Code	{ return ( int ) contains ( locale + NUMBER_CONSTANT ) ; }
Distance : 5

6
Tree	{ return CoreMatchers . contains () . contains ( locale ) ; }
Code	{ return CoreMatchers . contains () . contains ( locale ) ; }
Distance : 3

7
Tree	{ return containsNow ( locale , locale . contains () ) ; }
Code	{ return containsNow ( locale , locale . contains () ) ; }
Distance : 7

8
Tree	{ checkNotNull ( locale ) ; return false ; }
Code	{ checkNotNull ( locale ) ; return false ; }
Distance : 8

9
Tree	{ return typesIndexedByProperty . contains ( locale ) ; }
Code	{ return typesIndexedByProperty . contains ( locale ) ; }
Distance : 2

10
Tree	{ return typesIndexedByProperty . contains ( ( style ) locale ) ; }
Code	{ return typesIndexedByProperty . contains ( ( style ) locale ) ; }
Distance : 5

11
Tree	{ return CoreMatchers . contains ( locale ) ; }
Code	{ return CoreMatchers . contains ( locale ) ; }
Distance : 2

12
Tree	{ return ( EXP_INT_A ) locale . contains ( locale ) ; }
Code	{ return ( EXP_INT_A ) locale . contains ( locale ) ; }
Distance : 4

13
Tree	{ return ( naf ) locale . contains ( locale ) ; }
Code	{ return ( naf ) locale . contains ( locale ) ; }
Distance : 4

14
Tree	{ return SUM_OF_SQUARES . contains ( locale ) ; }
Code	{ return SUM_OF_SQUARES . contains ( locale ) ; }
Distance : 2

15
Tree	{ return this . typesIndexedByProperty . contains ( locale ) ; }
Code	{ return this . typesIndexedByProperty . contains ( locale ) ; }
Distance : 3

16
Tree	{ return oldRoot . contains ( locale ) ; }
Code	{ return oldRoot . contains ( locale ) ; }
Distance : 2

17
Tree	{ return CoreMatchers . contains () ; }
Code	{ return CoreMatchers . contains () ; }
Distance : 5

18
Tree	{ return CoreMatchers . contains ( locale , locale ) ; }
Code	{ return CoreMatchers . contains ( locale , locale ) ; }
Distance : 4

19
Tree	{ return INSTRUMENTATION . contains () ; }
Code	{ return INSTRUMENTATION . contains () ; }
Distance : 5

20
Tree	{ return this . datasetToScaleMap . contains ( locale ) ; }
Code	{ return this . datasetToScaleMap . contains ( locale ) ; }
Distance : 3

21
Tree	{ return ( double ) contains ( locale + NUMBER_CONSTANT ) ; }
Code	{ return ( double ) contains ( locale + NUMBER_CONSTANT ) ; }
Distance : 5

22
Tree	{ return SUM_OF_SQUARES . contains ( ( locale ) locale ) ; }
Code	{ return SUM_OF_SQUARES . contains ( ( locale ) locale ) ; }
Distance : 5

23
Tree	{ return oldRoot . contains () ; }
Code	{ return oldRoot . contains () ; }
Distance : 5

24
Tree	{ return typesIndexedByProperty . contains () . toFeatureSet ( locale ) ; }
Code	{ return typesIndexedByProperty . contains () . toFeatureSet ( locale ) ; }
Distance : 4

25
Tree	{ return EXP_INT_A . contains () ; }
Code	{ return EXP_INT_A . contains () ; }
Distance : 5

26
Tree	{ return ( constructorI ) locale . contains ( locale ) ; }
Code	{ return ( constructorI ) locale . contains ( locale ) ; }
Distance : 4

27
Tree	{ return ( int ) contains ( locale . contains ( locale ) ) ; }
Code	{ return ( int ) contains ( locale . contains ( locale ) ) ; }
Distance : 7

28
Tree	{ return EXP_INT_A . contains ( locale ) ; }
Code	{ return EXP_INT_A . contains ( locale ) ; }
Distance : 2

29
Tree	{ return ( oldRoot ) locale . contains ( locale ) ; }
Code	{ return ( oldRoot ) locale . contains ( locale ) ; }
Distance : 4

30
Tree	{ return Enum . contains ( locale ) ; }
Code	{ return Enum . contains ( locale ) ; }
Distance : 2

31
Tree	{ return this . intervalDelegate . contains ( locale ) ; }
Code	{ return this . intervalDelegate . contains ( locale ) ; }
Distance : 3

32
Tree	{ return this . negativeItemLabelPositionMap . contains ( locale ) ; }
Code	{ return this . negativeItemLabelPositionMap . contains ( locale ) ; }
Distance : 3

33
Tree	{ return INSTRUMENTATION . contains ( locale ) ; }
Code	{ return INSTRUMENTATION . contains ( locale ) ; }
Distance : 2

34
Tree	{ return getAccessibleMethod ( locale ) ; }
Code	{ return getAccessibleMethod ( locale ) ; }
Distance : 4

35
Tree	{ return computeMillis ( locale ) ; }
Code	{ return computeMillis ( locale ) ; }
Distance : 4

36
Tree	{ checkNotNull ( locale ) ; return null ; }
Code	{ checkNotNull ( locale ) ; return null ; }
Distance : 8

37
Tree	{ return CoreMatchers . contains ( locale . valueOf ( locale ) ) ; }
Code	{ return CoreMatchers . contains ( locale . valueOf ( locale ) ) ; }
Distance : 7

38
Tree	{ return ( int ) contains ( answer + NUMBER_CONSTANT ) ; }
Code	{ return ( int ) contains ( answer + NUMBER_CONSTANT ) ; }
Distance : 6

39
Tree	{ return containsNow () ; }
Code	{ return containsNow () ; }
Distance : 6

40
Tree	{ return SUM_OF_SQUARES . contains ( locale , false ) ; }
Code	{ return SUM_OF_SQUARES . contains ( locale , false ) ; }
Distance : 4

41
Tree	{ return ( int ) contains ( DurationFieldType + NUMBER_CONSTANT ) ; }
Code	{ return ( int ) contains ( DurationFieldType + NUMBER_CONSTANT ) ; }
Distance : 6

42
Tree	{ return typesIndexedByProperty . contains ( locale , locale ) ; }
Code	{ return typesIndexedByProperty . contains ( locale , locale ) ; }
Distance : 4

43
Tree	{ return this . minX . contains ( locale ) ; }
Code	{ return this . minX . contains ( locale ) ; }
Distance : 3

44
Tree	{ return this . toolTipGeneratorMap . contains ( locale ) ; }
Code	{ return this . toolTipGeneratorMap . contains ( locale ) ; }
Distance : 3

45
Tree	{ return EXP_INT_A . contains () . contains ( locale ) ; }
Code	{ return EXP_INT_A . contains () . contains ( locale ) ; }
Distance : 3

46
Tree	{ return CoreMatchers . contains ( locale , false ) ; }
Code	{ return CoreMatchers . contains ( locale , false ) ; }
Distance : 4

47
Tree	{ return CoreMatchers . contains ( ( locale ) locale ) ; }
Code	{ return CoreMatchers . contains ( ( locale ) locale ) ; }
Distance : 5

48
Tree	{ return oldRoot . contains ( locale , locale ) ; }
Code	{ return oldRoot . contains ( locale , locale ) ; }
Distance : 4

49
Tree	{ return oldRoot . contains ( ( style ) locale ) ; }
Code	{ return oldRoot . contains ( ( style ) locale ) ; }
Distance : 5

50
Tree	{ return typesIndexedByProperty . contains ( locale . getValue ( locale ) ) ; }
Code	{ return typesIndexedByProperty . contains ( locale . getValue ( locale ) ) ; }
Distance : 7

51
Tree	{ return Enum . contains () ; }
Code	{ return Enum . contains () ; }
Distance : 5

52
Tree	{ return getAccessibleMethod ( locale . contains ( locale ) ) ; }
Code	{ return getAccessibleMethod ( locale . contains ( locale ) ) ; }
Distance : 4

53
Tree	{ oldRoot . contains ( locale ) ; return false ; }
Code	{ oldRoot . contains ( locale ) ; return false ; }
Distance : 6

54
Tree	{ return CoreMatchers . contains ( ( style ) locale ) ; }
Code	{ return CoreMatchers . contains ( ( style ) locale ) ; }
Distance : 5

55
Tree	{ return ( int ) containsNow ( locale + NUMBER_CONSTANT ) ; }
Code	{ return ( int ) containsNow ( locale + NUMBER_CONSTANT ) ; }
Distance : 6

56
Tree	{ return typesIndexedByProperty . contains ( locale , false ) ; }
Code	{ return typesIndexedByProperty . contains ( locale , false ) ; }
Distance : 4

57
Tree	{ recordImplicitInterfaceUses ( locale ) ; return false ; }
Code	{ recordImplicitInterfaceUses ( locale ) ; return false ; }
Distance : 8

58
Tree	{ reportMatcher ( locale ) ; return false ; }
Code	{ reportMatcher ( locale ) ; return false ; }
Distance : 8

59
Tree	{ return oldRoot . contains ( ( locale ) locale ) ; }
Code	{ return oldRoot . contains ( ( locale ) locale ) ; }
Distance : 5

60
Tree	{ return oldRoot . contains ( locale ) . contains () ; }
Code	{ return oldRoot . contains ( locale ) . contains () ; }
Distance : 5

61
Tree	{ return containsNow ( answer ) ; }
Code	{ return containsNow ( answer ) ; }
Distance : 5

62
Tree	{ typesIndexedByProperty . contains ( locale ) ; return false ; }
Code	{ typesIndexedByProperty . contains ( locale ) ; return false ; }
Distance : 6

63
Tree	{ return getAccessibleMethod ( locale , locale . contains () ) ; }
Code	{ return getAccessibleMethod ( locale , locale . contains () ) ; }
Distance : 7

64
Tree	{ return ( assignedAt ) locale . contains ( locale ) ; }
Code	{ return ( assignedAt ) locale . contains ( locale ) ; }
Distance : 4

65
Tree	{ mockingProgress ( locale ) ; return null ; }
Code	{ mockingProgress ( locale ) ; return null ; }
Distance : 8

66
Tree	{ return computeMillis ( locale , locale . contains () ) ; }
Code	{ return computeMillis ( locale , locale . contains () ) ; }
Distance : 7

67
Tree	{ return Enum . contains () . contains ( locale ) ; }
Code	{ return Enum . contains () . contains ( locale ) ; }
Distance : 3

68
Tree	{ return EXP_INT_A . contains ( locale , locale ) ; }
Code	{ return EXP_INT_A . contains ( locale , locale ) ; }
Distance : 4

69
Tree	{ return CoreMatchers . contains ( locale ) . contains ( Locale.US ) ; }
Code	{ return CoreMatchers . contains ( locale ) . contains ( Locale.US ) ; }
Distance : 7

70
Tree	{ return computeMillis ( locale . contains ( locale ) ) ; }
Code	{ return computeMillis ( locale . contains ( locale ) ) ; }
Distance : 4

71
Tree	{ return INSTRUMENTATION . contains ( locale , locale ) ; }
Code	{ return INSTRUMENTATION . contains ( locale , locale ) ; }
Distance : 4

72
Tree	{ return typesIndexedByProperty . contains ( locale ) . contains () ; }
Code	{ return typesIndexedByProperty . contains ( locale ) . contains () ; }
Distance : 5

73
Tree	{ return this . sectionOutlineStrokeMap . contains ( locale ) ; }
Code	{ return this . sectionOutlineStrokeMap . contains ( locale ) ; }
Distance : 3

74
Tree	{ return ( tzId ) locale . contains ( locale ) ; }
Code	{ return ( tzId ) locale . contains ( locale ) ; }
Distance : 4

75
Tree	{ printTo ( locale ) ; return false ; }
Code	{ printTo ( locale ) ; return false ; }
Distance : 8

76
Tree	{ return ( int ) contains ( CompositeFormat + NUMBER_CONSTANT ) ; }
Code	{ return ( int ) contains ( CompositeFormat + NUMBER_CONSTANT ) ; }
Distance : 6

77
Tree	{ return ( typesIndexedByProperty ) anyObject ( locale ) ; }
Code	{ return ( typesIndexedByProperty ) anyObject ( locale ) ; }
Distance : 4

78
Tree	{ return containsNow ( answer . contains ( locale ) ) ; }
Code	{ return containsNow ( answer . contains ( locale ) ) ; }
Distance : 4

79
Tree	{ return SUM_OF_SQUARES . contains ( ( style ) locale ) ; }
Code	{ return SUM_OF_SQUARES . contains ( ( style ) locale ) ; }
Distance : 5

80
Tree	{ return EXP_INT_A . contains ( locale , false ) ; }
Code	{ return EXP_INT_A . contains ( locale , false ) ; }
Distance : 4

81
Tree	{ return typesIndexedByProperty . contains ( locale , Locale.US ) ; }
Code	{ return typesIndexedByProperty . contains ( locale , Locale.US ) ; }
Distance : 4

82
Tree	{ return CoreMatchers . contains ( locale ) . contains () ; }
Code	{ return CoreMatchers . contains ( locale ) . contains () ; }
Distance : 5

83
Tree	{ return oldRoot . contains ( locale , false ) ; }
Code	{ return oldRoot . contains ( locale , false ) ; }
Distance : 4

84
Tree	{ oldRoot . contains ( locale ) ; return null ; }
Code	{ oldRoot . contains ( locale ) ; return null ; }
Distance : 6

85
Tree	{ return containsNow ( locale . getInput ( locale ) ) ; }
Code	{ return containsNow ( locale . getInput ( locale ) ) ; }
Distance : 5

86
Tree	{ typesIndexedByProperty . contains ( locale ) ; return null ; }
Code	{ typesIndexedByProperty . contains ( locale ) ; return null ; }
Distance : 6

87
Tree	{ return ExceptionFactory . contains () ; }
Code	{ return ExceptionFactory . contains () ; }
Distance : 5

88
Tree	{ return CoreMatchers . contains ( locale , Locale.US ) ; }
Code	{ return CoreMatchers . contains ( locale , Locale.US ) ; }
Distance : 4

89
Tree	{ return EXP_INT_A . contains ( locale , Locale.US ) ; }
Code	{ return EXP_INT_A . contains ( locale , Locale.US ) ; }
Distance : 4

90
Tree	{ return containsNow ( locale , locale . type () ) ; }
Code	{ return containsNow ( locale , locale . type () ) ; }
Distance : 8

91
Tree	{ checkArgument ( locale ) ; return false ; }
Code	{ checkArgument ( locale ) ; return false ; }
Distance : 8

92
Tree	{ return com.google.protobuf.GeneratedMessageV3 . contains ( locale ) ; }
Code	{ return com.google.protobuf.GeneratedMessageV3 . contains ( locale ) ; }
Distance : 2

93
Tree	{ return SUM_OF_SQUARES . contains ( locale , Locale.US ) ; }
Code	{ return SUM_OF_SQUARES . contains ( locale , Locale.US ) ; }
Distance : 4

94
Tree	{ return ( assignedAt ) anyObject ( locale ) ; }
Code	{ return ( assignedAt ) anyObject ( locale ) ; }
Distance : 4

95
Tree	{ return isOSNameMatch ( locale ) ; }
Code	{ return isOSNameMatch ( locale ) ; }
Distance : 4

96
Tree	{ typesIndexedByProperty . add ( locale ) ; return false ; }
Code	{ typesIndexedByProperty . add ( locale ) ; return false ; }
Distance : 7

97
Tree	{ return typesIndexedByProperty . contains () ; }
Code	{ return typesIndexedByProperty . contains () ; }
Distance : 5

98
Tree	{ return contains ( locale ) ; }
Code	{ return contains ( locale ) ; }
Distance : 3

99
Tree	{ return oldRoot . contains ( locale , Locale.US ) ; }
Code	{ return oldRoot . contains ( locale , Locale.US ) ; }
Distance : 4

100
Tree	{ return oldRoot . contains ( locale . valueOf ( locale ) ) ; }
Code	{ return oldRoot . contains ( locale . valueOf ( locale ) ) ; }
Distance : 7

101
Tree	{ return this . maximumCategoryLabelLines . contains ( locale ) ; }
Code	{ return this . maximumCategoryLabelLines . contains ( locale ) ; }
Distance : 3

102
Tree	{ return typesIndexedByProperty . contains ( locale . getChronology ( locale ) ) ; }
Code	{ return typesIndexedByProperty . contains ( locale . getChronology ( locale ) ) ; }
Distance : 7

103
Tree	{ return typesIndexedByProperty . contains ( locale ) . contains ( Locale.US ) ; }
Code	{ return typesIndexedByProperty . contains ( locale ) . contains ( Locale.US ) ; }
Distance : 7

104
Tree	{ return typesIndexedByProperty . contains ( ( locale ) locale ) ; }
Code	{ return typesIndexedByProperty . contains ( ( locale ) locale ) ; }
Distance : 5

105
Tree	{ typesIndexedByProperty . addEs6PreTypecheckPasses ( locale ) ; return false ; }
Code	{ typesIndexedByProperty . addEs6PreTypecheckPasses ( locale ) ; return false ; }
Distance : 7

106
Tree	{ return Enum . contains ( locale , Locale.US ) ; }
Code	{ return Enum . contains ( locale , Locale.US ) ; }
Distance : 4

107
Tree	{ return Enum . contains ( locale , locale ) ; }
Code	{ return Enum . contains ( locale , locale ) ; }
Distance : 4

108
Tree	{ return add ( locale . contains ( locale ) ) ; }
Code	{ return add ( locale . contains ( locale ) ) ; }
Distance : 4

109
Tree	{ printTo ( locale ) ; return null ; }
Code	{ printTo ( locale ) ; return null ; }
Distance : 8

110
Tree	{ mockingProgress ( locale ) ; return false ; }
Code	{ mockingProgress ( locale ) ; return false ; }
Distance : 8

111
Tree	{ return ( double ) contains ( locale . contains ( locale ) ) ; }
Code	{ return ( double ) contains ( locale . contains ( locale ) ) ; }
Distance : 7

112
Tree	{ return SUM_OF_SQUARES . contains ( locale , locale ) ; }
Code	{ return SUM_OF_SQUARES . contains ( locale , locale ) ; }
Distance : 4

113
Tree	{ return ( double ) contains ( CompositeFormat + NUMBER_CONSTANT ) ; }
Code	{ return ( double ) contains ( CompositeFormat + NUMBER_CONSTANT ) ; }
Distance : 6

114
Tree	{ return SUM_OF_SQUARES . contains () ; }
Code	{ return SUM_OF_SQUARES . contains () ; }
Distance : 5

115
Tree	{ return INSTRUMENTATION . contains () . contains ( locale ) ; }
Code	{ return INSTRUMENTATION . contains () . contains ( locale ) ; }
Distance : 3

116
Tree	{ recordImplicitInterfaceUses ( locale ) ; return null ; }
Code	{ recordImplicitInterfaceUses ( locale ) ; return null ; }
Distance : 8

117
Tree	{ return ExceptionFactory . contains ( locale , locale ) ; }
Code	{ return ExceptionFactory . contains ( locale , locale ) ; }
Distance : 4

118
Tree	{ return contains () ; }
Code	{ return contains () ; }
Distance : 6

119
Tree	{ typesIndexedByProperty . report ( locale ) ; return false ; }
Code	{ typesIndexedByProperty . report ( locale ) ; return false ; }
Distance : 7

120
Tree	{ return ( int ) contains ( answer . contains ( locale ) ) ; }
Code	{ return ( int ) contains ( answer . contains ( locale ) ) ; }
Distance : 7

121
Tree	{ typesIndexedByProperty . add ( locale ) ; return null ; }
Code	{ typesIndexedByProperty . add ( locale ) ; return null ; }
Distance : 7

122
Tree	{ return ExceptionFactory . contains ( locale , false ) ; }
Code	{ return ExceptionFactory . contains ( locale , false ) ; }
Distance : 4

123
Tree	{ return contains ( locale . contains ( locale ) ) ; }
Code	{ return contains ( locale . contains ( locale ) ) ; }
Distance : 4

124
Tree	{ return contains ( locale , locale . contains () ) ; }
Code	{ return contains ( locale , locale . contains () ) ; }
Distance : 7

125
Tree	{ return SUM_OF_SQUARES . contains ( locale ) . contains () ; }
Code	{ return SUM_OF_SQUARES . contains ( locale ) . contains () ; }
Distance : 5

126
Tree	{ return CoreMatchers . contains ( locale . getChronology ( locale ) ) ; }
Code	{ return CoreMatchers . contains ( locale . getChronology ( locale ) ) ; }
Distance : 7

127
Tree	{ return typesIndexedByProperty . contains ( locale , NotNull.NOT_NULL ) ; }
Code	{ return typesIndexedByProperty . contains ( locale , NotNull.NOT_NULL ) ; }
Distance : 4

128
Tree	{ return MillisDurationField.INSTANCE . contains ( locale ) ; }
Code	{ return MillisDurationField.INSTANCE . contains ( locale ) ; }
Distance : 2

129
Tree	{ return typesIndexedByProperty . contains ( locale ) . contains ( TernaryValue.UNKNOWN ) ; }
Code	{ return typesIndexedByProperty . contains ( locale ) . contains ( TernaryValue.UNKNOWN ) ; }
Distance : 7

130
Tree	{ oldRoot . add ( locale ) ; return false ; }
Code	{ oldRoot . add ( locale ) ; return false ; }
Distance : 7

131
Tree	{ checkArgument ( locale ) ; return null ; }
Code	{ checkArgument ( locale ) ; return null ; }
Distance : 8

132
Tree	{ return add ( locale , locale . contains () ) ; }
Code	{ return add ( locale , locale . contains () ) ; }
Distance : 7

133
Tree	{ return CoreMatchers . contains ( locale ) . has () ; }
Code	{ return CoreMatchers . contains ( locale ) . has () ; }
Distance : 5

134
Tree	{ return copy.linkMap . contains ( locale ) ; }
Code	{ return copy.linkMap . contains ( locale ) ; }
Distance : 2

135
Tree	{ typesIndexedByProperty . apply ( locale ) ; return false ; }
Code	{ typesIndexedByProperty . apply ( locale ) ; return false ; }
Distance : 7

136
Tree	{ return Enum . contains ( locale ) . contains ( Locale.US ) ; }
Code	{ return Enum . contains ( locale ) . contains ( Locale.US ) ; }
Distance : 7

137
Tree	{ return toFeatureSet ( locale ) ; }
Code	{ return toFeatureSet ( locale ) ; }
Distance : 4

138
Tree	{ return isOSNameMatch ( locale . contains ( locale ) ) ; }
Code	{ return isOSNameMatch ( locale . contains ( locale ) ) ; }
Distance : 4

139
Tree	{ return ( tzId ) anyObject ( locale ) ; }
Code	{ return ( tzId ) anyObject ( locale ) ; }
Distance : 4

140
Tree	{ return SUM_OF_SQUARES . contains ( locale . valueOf ( locale ) ) ; }
Code	{ return SUM_OF_SQUARES . contains ( locale . valueOf ( locale ) ) ; }
Distance : 7

141
Tree	{ return ( constructorI ) anyObject ( locale ) ; }
Code	{ return ( constructorI ) anyObject ( locale ) ; }
Distance : 4

142
Tree	{ return ( EXP_INT_A ) anyObject ( locale ) ; }
Code	{ return ( EXP_INT_A ) anyObject ( locale ) ; }
Distance : 4

143
Tree	{ return add () ; }
Code	{ return add () ; }
Distance : 6

144
Tree	{ checkPrinter ( locale ) ; return false ; }
Code	{ checkPrinter ( locale ) ; return false ; }
Distance : 8

145
Tree	{ oldRoot . report ( locale ) ; return false ; }
Code	{ oldRoot . report ( locale ) ; return false ; }
Distance : 7

146
Tree	{ oldRoot . report ( locale ) ; return null ; }
Code	{ oldRoot . report ( locale ) ; return null ; }
Distance : 7

147
Tree	{ return isOSNameMatch () ; }
Code	{ return isOSNameMatch () ; }
Distance : 6

148
Tree	{ return EXP_INT_A . contains ( locale ) . contains () ; }
Code	{ return EXP_INT_A . contains ( locale ) . contains () ; }
Distance : 5

149
Tree	{ enableNormalize ( locale ) ; return null ; }
Code	{ enableNormalize ( locale ) ; return null ; }
Distance : 8

150
Tree	{ typesIndexedByProperty . apply ( locale ) ; return null ; }
Code	{ typesIndexedByProperty . apply ( locale ) ; return null ; }
Distance : 7

151
Tree	{ return ( int ) containsNow ( locale . contains ( locale ) ) ; }
Code	{ return ( int ) containsNow ( locale . contains ( locale ) ) ; }
Distance : 7

152
Tree	{ typesIndexedByProperty . report ( locale ) ; return null ; }
Code	{ typesIndexedByProperty . report ( locale ) ; return null ; }
Distance : 7

153
Tree	{ return ExceptionFactory . contains ( locale ) ; }
Code	{ return ExceptionFactory . contains ( locale ) ; }
Distance : 2

154
Tree	{ return SUM_OF_SQUARES . contains ( locale ) . contains ( Locale.US ) ; }
Code	{ return SUM_OF_SQUARES . contains ( locale ) . contains ( Locale.US ) ; }
Distance : 7

155
Tree	{ return typesIndexedByProperty . contains ( locale ) . has () ; }
Code	{ return typesIndexedByProperty . contains ( locale ) . has () ; }
Distance : 5

156
Tree	{ enableNormalize ( locale ) ; return false ; }
Code	{ enableNormalize ( locale ) ; return false ; }
Distance : 8

157
Tree	{ return ( naf ) anyObject ( locale ) ; }
Code	{ return ( naf ) anyObject ( locale ) ; }
Distance : 4

158
Tree	{ return ( int ) contains ( CompositeFormat . contains ( locale ) ) ; }
Code	{ return ( int ) contains ( CompositeFormat . contains ( locale ) ) ; }
Distance : 7

159
Tree	{ return ( typesIndexedByProperty ) locale . contains ( locale ) ; }
Code	{ return ( typesIndexedByProperty ) locale . contains ( locale ) ; }
Distance : 4

160
Tree	{ return ( PRIMITIVE_OR_WRAPPER_DEFAULT_VALUES ) anyObject ( locale ) ; }
Code	{ return ( PRIMITIVE_OR_WRAPPER_DEFAULT_VALUES ) anyObject ( locale ) ; }
Distance : 4

161
Tree	{ return INSTRUMENTATION . contains ( locale , false ) ; }
Code	{ return INSTRUMENTATION . contains ( locale , false ) ; }
Distance : 4

162
Tree	{ return typesIndexedByProperty . contains ( locale . getInstance ( locale ) ) ; }
Code	{ return typesIndexedByProperty . contains ( locale . getInstance ( locale ) ) ; }
Distance : 7

163
Tree	{ return ( int ) contains ( observed1 + NUMBER_CONSTANT ) ; }
Code	{ return ( int ) contains ( observed1 + NUMBER_CONSTANT ) ; }
Distance : 6

164
Tree	{ return isOSNameMatch ( locale , locale . contains () ) ; }
Code	{ return isOSNameMatch ( locale , locale . contains () ) ; }
Distance : 7

165
Tree	{ return containsNow ( answer , locale . contains () ) ; }
Code	{ return containsNow ( answer , locale . contains () ) ; }
Distance : 7

166
Tree	{ return typesIndexedByProperty . contains ( locale . valueOf ( locale ) ) ; }
Code	{ return typesIndexedByProperty . contains ( locale . valueOf ( locale ) ) ; }
Distance : 7

167
Tree	{ return Enum . contains ( locale ) . contains () ; }
Code	{ return Enum . contains ( locale ) . contains () ; }
Distance : 5

168
Tree	{ return oldRoot . contains ( locale ) . contains ( Locale.US ) ; }
Code	{ return oldRoot . contains ( locale ) . contains ( Locale.US ) ; }
Distance : 7

169
Tree	{ return ( int ) contains ( observed1 . contains ( locale ) ) ; }
Code	{ return ( int ) contains ( observed1 . contains ( locale ) ) ; }
Distance : 7

170
Tree	{ return getAccessibleMethod () ; }
Code	{ return getAccessibleMethod () ; }
Distance : 6

171
Tree	{ return computeMillis () ; }
Code	{ return computeMillis () ; }
Distance : 6

172
Tree	{ checkPrinter ( locale ) ; return null ; }
Code	{ checkPrinter ( locale ) ; return null ; }
Distance : 8

173
Tree	{ oldRoot . add ( locale ) ; return null ; }
Code	{ oldRoot . add ( locale ) ; return null ; }
Distance : 7

174
Tree	{ return java.lang.Class . contains ( locale ) ; }
Code	{ return java.lang.Class . contains ( locale ) ; }
Distance : 2

175
Tree	{ reportMatcher ( locale ) ; return null ; }
Code	{ reportMatcher ( locale ) ; return null ; }
Distance : 8

176
Tree	{ return INSTRUMENTATION . contains ( locale , Locale.US ) ; }
Code	{ return INSTRUMENTATION . contains ( locale , Locale.US ) ; }
Distance : 4

177
Tree	{ return EXP_INT_A . contains ( locale ) . contains ( Locale.US ) ; }
Code	{ return EXP_INT_A . contains ( locale ) . contains ( Locale.US ) ; }
Distance : 7

178
Tree	{ return add ( locale ) ; }
Code	{ return add ( locale ) ; }
Distance : 4

179
Tree	{ return calculator.invocationToReturn . contains ( locale ) ; }
Code	{ return calculator.invocationToReturn . contains ( locale ) ; }
Distance : 2

180
Tree	{ return toFeatureSet () ; }
Code	{ return toFeatureSet () ; }
Distance : 6

181
Tree	{ return typesIndexedByProperty . contains ( locale ) . has ( Locale.US ) ; }
Code	{ return typesIndexedByProperty . contains ( locale ) . has ( Locale.US ) ; }
Distance : 7

182
Tree	{ return ( oldRoot ) anyObject ( locale ) ; }
Code	{ return ( oldRoot ) anyObject ( locale ) ; }
Distance : 4

183
Tree	{ return type () ; }
Code	{ return type () ; }
Distance : 6

184
Tree	{ return ( PRIMITIVE_OR_WRAPPER_DEFAULT_VALUES ) locale . contains ( locale ) ; }
Code	{ return ( PRIMITIVE_OR_WRAPPER_DEFAULT_VALUES ) locale . contains ( locale ) ; }
Distance : 4

185
Tree	{ return currentCase.embedInto . contains ( locale ) ; }
Code	{ return currentCase.embedInto . contains ( locale ) ; }
Distance : 2

186
Tree	{ return ( int ) contains ( DurationFieldType . contains ( locale ) ) ; }
Code	{ return ( int ) contains ( DurationFieldType . contains ( locale ) ) ; }
Distance : 7

187
Tree	{ typesIndexedByProperty . addEs6PreTypecheckPasses ( locale ) ; return null ; }
Code	{ typesIndexedByProperty . addEs6PreTypecheckPasses ( locale ) ; return null ; }
Distance : 7

188
Tree	{ return Enum . contains ( locale , false ) ; }
Code	{ return Enum . contains ( locale , false ) ; }
Distance : 4

189
Tree	{ return Hibernate.DATE . contains ( locale ) ; }
Code	{ return Hibernate.DATE . contains ( locale ) ; }
Distance : 2

190
Tree	{ return com.google.protobuf.GeneratedMessageV3 . contains ( answer ) ; }
Code	{ return com.google.protobuf.GeneratedMessageV3 . contains ( answer ) ; }
Distance : 3

191
Tree	{ return ( double ) contains ( CompositeFormat . contains ( locale ) ) ; }
Code	{ return ( double ) contains ( CompositeFormat . contains ( locale ) ) ; }
Distance : 7

192
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 7

193
Tree	{ return STRING_CONSTANT ; } MathRuntimeException
Code	{ return STRING_CONSTANT ; } MathRuntimeException
Distance : 8

194
Tree	{ return STRING_CONSTANT ; } Override
Code	{ return STRING_CONSTANT ; } Override
Distance : 8

195
Tree	{ return STRING_CONSTANT ; } f
Code	{ return STRING_CONSTANT ; } f
Distance : 8

196
Tree	{ return STRING_CONSTANT ; } mock
Code	{ return STRING_CONSTANT ; } mock
Distance : 8

197
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 8

198
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 8

199
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 8

========================================================================


========================================================================
Example Number: 39
Parent Code is: 
{ escapeJavaStyleString ( out , str , true ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ escapeJavaStyleString ( out , str , true , true ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=out}) (234{val=,}) (800{val=str}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=out}) (234{val=,}) (800{val=str}) (234{val=,}) (9{val=true}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/46/parent/src_java_org_apache_commons_lang_StringEscapeUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ pads . translate ( str , out ) ; }
Code	{ pads . translate ( str , out ) ; }
Distance : 7

1
Tree	{ maybeAddUsage ( out , out ) ; }
Code	{ maybeAddUsage ( out , out ) ; }
Distance : 6

2
Tree	{ stdDev . translate ( str , out ) ; }
Code	{ stdDev . translate ( str , out ) ; }
Distance : 7

3
Tree	{ alg . translate ( str , out ) ; }
Code	{ alg . translate ( str , out ) ; }
Distance : 7

4
Tree	{ newValues . translate ( str , out ) ; }
Code	{ newValues . translate ( str , out ) ; }
Distance : 7

5
Tree	{ FieldUtils . translate ( str , out ) ; }
Code	{ FieldUtils . translate ( str , out ) ; }
Distance : 7

6
Tree	{ helperExposeExpression ( out , out ) ; }
Code	{ helperExposeExpression ( out , out ) ; }
Distance : 6

7
Tree	{ setSeriesShapesVisible () . translate ( str , out ) ; }
Code	{ setSeriesShapesVisible () . translate ( str , out ) ; }
Distance : 8

8
Tree	{ lastIdx . translate ( str , out , this ) ; }
Code	{ lastIdx . translate ( str , out , this ) ; }
Distance : 6

9
Tree	{ pads () . translate ( str , out ) ; }
Code	{ pads () . translate ( str , out ) ; }
Distance : 8

10
Tree	{ CharSequenceUtils . translate ( str , new ArrayRealVector ( str ) ) ; }
Code	{ CharSequenceUtils . translate ( str , new ArrayRealVector ( str ) ) ; }
Distance : 9

11
Tree	{ lastIdx . translate () . lastIndexOf ( str , out ) ; }
Code	{ lastIdx . translate () . lastIndexOf ( str , out ) ; }
Distance : 9

12
Tree	{ maybeAddUsage ( out , null ) ; }
Code	{ maybeAddUsage ( out , null ) ; }
Distance : 6

13
Tree	{ StrSubstitutor ( out , out , false ) ; }
Code	{ StrSubstitutor ( out , out , false ) ; }
Distance : 5

14
Tree	{ translate ( out , null ) ; }
Code	{ translate ( out , null ) ; }
Distance : 6

15
Tree	{ setEndMillis ( out , out ) ; }
Code	{ setEndMillis ( out , out ) ; }
Distance : 6

16
Tree	{ regex . translate () . translate ( str , out ) ; }
Code	{ regex . translate () . translate ( str , out ) ; }
Distance : 9

17
Tree	{ CharSequenceUtils . translate () . setReturnValues ( str , out ) ; }
Code	{ CharSequenceUtils . translate () . setReturnValues ( str , out ) ; }
Distance : 9

18
Tree	{ lastIdx () . translate ( str , out ) ; }
Code	{ lastIdx () . translate ( str , out ) ; }
Distance : 8

19
Tree	{ lastIdx . translate ( str , true ) ; }
Code	{ lastIdx . translate ( str , true ) ; }
Distance : 6

20
Tree	{ regex . translate ( str , out , this ) ; }
Code	{ regex . translate ( str , out , this ) ; }
Distance : 6

21
Tree	{ checkTokenized ( out , out , false ) ; }
Code	{ checkTokenized ( out , out , false ) ; }
Distance : 5

22
Tree	{ translate () . translate ( str , out ) ; }
Code	{ translate () . translate ( str , out ) ; }
Distance : 8

23
Tree	{ CharSequenceUtils . translate ( str ) ; }
Code	{ CharSequenceUtils . translate ( str ) ; }
Distance : 8

24
Tree	{ lastIndexOf ( out , out , false ) ; }
Code	{ lastIndexOf ( out , out , false ) ; }
Distance : 5

25
Tree	{ setSeriesShapesVisible ( out , out , false ) ; }
Code	{ setSeriesShapesVisible ( out , out , false ) ; }
Distance : 5

26
Tree	{ StrSubstitutor ( out , out ) ; }
Code	{ StrSubstitutor ( out , out ) ; }
Distance : 6

27
Tree	{ translate ( out , out , false ) ; }
Code	{ translate ( out , out , false ) ; }
Distance : 5

28
Tree	{ lastIdx . translate () . translate ( str , out ) ; }
Code	{ lastIdx . translate () . translate ( str , out ) ; }
Distance : 9

29
Tree	{ alg . translate ( str ) ; }
Code	{ alg . translate ( str ) ; }
Distance : 8

30
Tree	{ CharSequenceUtils . translate ( str , true ) ; }
Code	{ CharSequenceUtils . translate ( str , true ) ; }
Distance : 6

31
Tree	{ lastIdx . translate ( str ) ; }
Code	{ lastIdx . translate ( str ) ; }
Distance : 8

32
Tree	{ checkTokenized ( out , out , randomData , false ) ; }
Code	{ checkTokenized ( out , out , randomData , false ) ; }
Distance : 4

33
Tree	{ CharSequenceUtils . translate () . lastIndexOf ( str , out ) ; }
Code	{ CharSequenceUtils . translate () . lastIndexOf ( str , out ) ; }
Distance : 9

34
Tree	{ EscapeUtils.ESCAPE_JAVA . translate ( str , str ) ; }
Code	{ EscapeUtils.ESCAPE_JAVA . translate ( str , str ) ; }
Distance : 7

35
Tree	{ regex . translate ( str ) ; }
Code	{ regex . translate ( str ) ; }
Distance : 8

36
Tree	{ regex . translate () . lastIndexOf ( str , out ) ; }
Code	{ regex . translate () . lastIndexOf ( str , out ) ; }
Distance : 9

37
Tree	{ newValues . translate ( str ) ; }
Code	{ newValues . translate ( str ) ; }
Distance : 8

38
Tree	{ checkTokenized () . translate ( str , out ) ; }
Code	{ checkTokenized () . translate ( str , out ) ; }
Distance : 8

39
Tree	{ checkTokenized ( out , out , beta ) ; }
Code	{ checkTokenized ( out , out , beta ) ; }
Distance : 5

40
Tree	{ lastIndexOf ( out , out , randomData ) ; }
Code	{ lastIndexOf ( out , out , randomData ) ; }
Distance : 5

41
Tree	{ EscapeUtils.ESCAPE_ECMASCRIPT . translate ( str , out ) ; }
Code	{ EscapeUtils.ESCAPE_ECMASCRIPT . translate ( str , out ) ; }
Distance : 7

42
Tree	{ lastIndexOf ( out , out , MODIFY_ROUND , false ) ; }
Code	{ lastIndexOf ( out , out , MODIFY_ROUND , false ) ; }
Distance : 4

43
Tree	{ pads . translate ( str ? Es6ToEs3Util.CANNOT_CONVERT_YET : FunctionFlavor.NORMAL ) ; }
Code	{ pads . translate ( str ? Es6ToEs3Util.CANNOT_CONVERT_YET : FunctionFlavor.NORMAL ) ; }
Distance : 8

44
Tree	{ lastIdx . this . translate ( str , out , randomData ) ; }
Code	{ lastIdx . this . translate ( str , out , randomData ) ; }
Distance : 8

45
Tree	{ CharSequenceUtils () . translate ( str , out ) ; }
Code	{ CharSequenceUtils () . translate ( str , out ) ; }
Distance : 8

46
Tree	{ checkTokenized ( out , null ) ; }
Code	{ checkTokenized ( out , null ) ; }
Distance : 6

47
Tree	{ regex () . translate ( str , out ) ; }
Code	{ regex () . translate ( str , out ) ; }
Distance : 8

48
Tree	{ stdDev . translate ( str , out , this ) ; }
Code	{ stdDev . translate ( str , out , this ) ; }
Distance : 6

49
Tree	{ setSeriesShapesVisible ( out , out , randomData ) ; }
Code	{ setSeriesShapesVisible ( out , out , randomData ) ; }
Distance : 5

50
Tree	{ lastIdx . translate ( str , out ) ; }
Code	{ lastIdx . translate ( str , out ) ; }
Distance : 7

51
Tree	{ translate ( out , out , MODIFY_ROUND ) ; }
Code	{ translate ( out , out , MODIFY_ROUND ) ; }
Distance : 5

52
Tree	{ translate ( out , out ) ; }
Code	{ translate ( out , out ) ; }
Distance : 6

53
Tree	{ alg . translate ( str , true ) ; }
Code	{ alg . translate ( str , true ) ; }
Distance : 6

54
Tree	{ setSeriesShapesVisible ( out , out , MODIFY_ROUND , false ) ; }
Code	{ setSeriesShapesVisible ( out , out , MODIFY_ROUND , false ) ; }
Distance : 4

55
Tree	{ stdDev . translate ( str , new ArrayRealVector ( str ) ) ; }
Code	{ stdDev . translate ( str , new ArrayRealVector ( str ) ) ; }
Distance : 9

56
Tree	{ regex . translate ( str ? Strictness.SILENT : FunctionFlavor.NORMAL ) ; }
Code	{ regex . translate ( str ? Strictness.SILENT : FunctionFlavor.NORMAL ) ; }
Distance : 8

57
Tree	{ checkTokenized ( out , out , MODIFY_ROUND , CompositeFormat ) ; }
Code	{ checkTokenized ( out , out , MODIFY_ROUND , CompositeFormat ) ; }
Distance : 4

58
Tree	{ CharSequenceUtils . this . translate ( str , out , randomData ) ; }
Code	{ CharSequenceUtils . this . translate ( str , out , randomData ) ; }
Distance : 8

59
Tree	{ CharSequenceUtils . translate ( str , out ) ; }
Code	{ CharSequenceUtils . translate ( str , out ) ; }
Distance : 7

60
Tree	{ alg . translate ( str , out , this ) ; }
Code	{ alg . translate ( str , out , this ) ; }
Distance : 6

61
Tree	{ pads . translate ( str , out , this ) ; }
Code	{ pads . translate ( str , out , this ) ; }
Distance : 6

62
Tree	{ StrSubstitutor ( out , null ) ; }
Code	{ StrSubstitutor ( out , null ) ; }
Distance : 6

63
Tree	{ newValues . translate ( str , true ) ; }
Code	{ newValues . translate ( str , true ) ; }
Distance : 6

64
Tree	{ checkTokenized ( out , out , MODIFY_ROUND ) ; }
Code	{ checkTokenized ( out , out , MODIFY_ROUND ) ; }
Distance : 5

65
Tree	{ helperExposeExpression () . translate ( str , out ) ; }
Code	{ helperExposeExpression () . translate ( str , out ) ; }
Distance : 8

66
Tree	{ lastIdx . translate ( NUMBER_CONSTANT ) . hasSize ( str , out ) ; }
Code	{ lastIdx . translate ( NUMBER_CONSTANT ) . hasSize ( str , out ) ; }
Distance : 10

67
Tree	{ setEndMillis () . translate ( str , out ) ; }
Code	{ setEndMillis () . translate ( str , out ) ; }
Distance : 8

68
Tree	{ checkTokenized ( out , out ) ; }
Code	{ checkTokenized ( out , out ) ; }
Distance : 6

69
Tree	{ checkTokenized ( STRING_CONSTANT , out , beta , start ) ; }
Code	{ checkTokenized ( STRING_CONSTANT , out , beta , start ) ; }
Distance : 5

70
Tree	{ newValues . translate ( str , out , this ) ; }
Code	{ newValues . translate ( str , out , this ) ; }
Distance : 6

71
Tree	{ checkTokenized ( out , out , randomData ) ; }
Code	{ checkTokenized ( out , out , randomData ) ; }
Distance : 5

72
Tree	{ checkTokenized ( STRING_CONSTANT , out , beta , FieldUtils ) ; }
Code	{ checkTokenized ( STRING_CONSTANT , out , beta , FieldUtils ) ; }
Distance : 5

73
Tree	{ EscapeUtils.ESCAPE_JAVA . translate ( str , out ) ; }
Code	{ EscapeUtils.ESCAPE_JAVA . translate ( str , out ) ; }
Distance : 7

74
Tree	{ pads . translate () . lastIndexOf ( str , out ) ; }
Code	{ pads . translate () . lastIndexOf ( str , out ) ; }
Distance : 9

75
Tree	{ regex . translate ( str , out ) ; }
Code	{ regex . translate ( str , out ) ; }
Distance : 7

76
Tree	{ FieldUtils . translate ( str , out , this ) ; }
Code	{ FieldUtils . translate ( str , out , this ) ; }
Distance : 6

77
Tree	{ lastIdx . translate ( NUMBER_CONSTANT ) . lastIndexOf ( str , out ) ; }
Code	{ lastIdx . translate ( NUMBER_CONSTANT ) . lastIndexOf ( str , out ) ; }
Distance : 10

78
Tree	{ CharSequenceUtils . translate ( NUMBER_CONSTANT ) . printTo ( str , out ) ; }
Code	{ CharSequenceUtils . translate ( NUMBER_CONSTANT ) . printTo ( str , out ) ; }
Distance : 10

79
Tree	{ alg . translate ( str , new ArrayRealVector ( str ) ) ; }
Code	{ alg . translate ( str , new ArrayRealVector ( str ) ) ; }
Distance : 9

80
Tree	{ checkTokenized ( out , out , MODIFY_ROUND , FieldUtils ) ; }
Code	{ checkTokenized ( out , out , MODIFY_ROUND , FieldUtils ) ; }
Distance : 4

81
Tree	{ helperExposeExpression ( out , null ) ; }
Code	{ helperExposeExpression ( out , null ) ; }
Distance : 6

82
Tree	{ checkTokenized ( out , out , beta , false ) ; }
Code	{ checkTokenized ( out , out , beta , false ) ; }
Distance : 4

83
Tree	{ lastIndexOf ( out , out , randomData , false ) ; }
Code	{ lastIndexOf ( out , out , randomData , false ) ; }
Distance : 4

84
Tree	{ maybeAddUsage ( out , out , false ) ; }
Code	{ maybeAddUsage ( out , out , false ) ; }
Distance : 5

85
Tree	{ EscapeUtils.ESCAPE_JAVA . printTo ( str , out ) ; }
Code	{ EscapeUtils.ESCAPE_JAVA . printTo ( str , out ) ; }
Distance : 7

86
Tree	{ FieldUtils . translate ( str ) ; }
Code	{ FieldUtils . translate ( str ) ; }
Distance : 8

87
Tree	{ pads . translate ( str ) ; }
Code	{ pads . translate ( str ) ; }
Distance : 8

88
Tree	{ helperExposeExpression ( out , out , false ) ; }
Code	{ helperExposeExpression ( out , out , false ) ; }
Distance : 5

89
Tree	{ setEndMillis ( out , out , false ) ; }
Code	{ setEndMillis ( out , out , false ) ; }
Distance : 5

90
Tree	{ stdDev () . translate ( str , out ) ; }
Code	{ stdDev () . translate ( str , out ) ; }
Distance : 8

91
Tree	{ lastIndexOf () . translate ( str , out ) ; }
Code	{ lastIndexOf () . translate ( str , out ) ; }
Distance : 8

92
Tree	{ checkTokenized ( out , out , randomData , FieldUtils ) ; }
Code	{ checkTokenized ( out , out , randomData , FieldUtils ) ; }
Distance : 4

93
Tree	{ lastIndexOf ( out , out , MODIFY_ROUND ) ; }
Code	{ lastIndexOf ( out , out , MODIFY_ROUND ) ; }
Distance : 5

94
Tree	{ checkTokenized ( out , out , Color.BLACK ) ; }
Code	{ checkTokenized ( out , out , Color.BLACK ) ; }
Distance : 5

95
Tree	{ setEndMillis ( out , null ) ; }
Code	{ setEndMillis ( out , null ) ; }
Distance : 6

96
Tree	{ pads . translate ( str ? Strictness.SILENT : FunctionFlavor.NORMAL ) ; }
Code	{ pads . translate ( str ? Strictness.SILENT : FunctionFlavor.NORMAL ) ; }
Distance : 8

97
Tree	{ alg () . translate ( str , out ) ; }
Code	{ alg () . translate ( str , out ) ; }
Distance : 8

98
Tree	{ setSeriesShapesVisible ( out , out , MODIFY_ROUND ) ; }
Code	{ setSeriesShapesVisible ( out , out , MODIFY_ROUND ) ; }
Distance : 5

99
Tree	{ setSeriesShapesVisible ( out , out , randomData , false ) ; }
Code	{ setSeriesShapesVisible ( out , out , randomData , false ) ; }
Distance : 4

100
Tree	{ CharSequenceUtils . translate () . translate () . lastIndexOf ( str , out ) ; }
Code	{ CharSequenceUtils . translate () . translate () . lastIndexOf ( str , out ) ; }
Distance : 12

101
Tree	{ checkTokenized ( out , out , d.length ) ; }
Code	{ checkTokenized ( out , out , d.length ) ; }
Distance : 5

102
Tree	{ checkTokenized ( out , out , MODIFY_ROUND , false ) ; }
Code	{ checkTokenized ( out , out , MODIFY_ROUND , false ) ; }
Distance : 4

103
Tree	{ setSeriesShapesVisible ( out , out , MODIFY_ROUND , CompositeFormat ) ; }
Code	{ setSeriesShapesVisible ( out , out , MODIFY_ROUND , CompositeFormat ) ; }
Distance : 4

104
Tree	{ lastIndexOf ( out , out , MODIFY_ROUND , FieldUtils ) ; }
Code	{ lastIndexOf ( out , out , MODIFY_ROUND , FieldUtils ) ; }
Distance : 4

105
Tree	{ regex . translate ( str ? Es6ToEs3Util.CANNOT_CONVERT_YET : FunctionFlavor.NORMAL ) ; }
Code	{ regex . translate ( str ? Es6ToEs3Util.CANNOT_CONVERT_YET : FunctionFlavor.NORMAL ) ; }
Distance : 8

106
Tree	{ lastIndexOf ( out , out , Color.BLACK ) ; }
Code	{ lastIndexOf ( out , out , Color.BLACK ) ; }
Distance : 5

107
Tree	{ newValues () . translate ( str , out ) ; }
Code	{ newValues () . translate ( str , out ) ; }
Distance : 8

108
Tree	{ EscapeUtils.ESCAPE_JAVA . lastIndexOf ( str , out ) ; }
Code	{ EscapeUtils.ESCAPE_JAVA . lastIndexOf ( str , out ) ; }
Distance : 7

109
Tree	{ lastIndexOf ( out , out ) ; }
Code	{ lastIndexOf ( out , out ) ; }
Distance : 6

110
Tree	{ newValues . translate ( str , new ArrayRealVector ( str ) ) ; }
Code	{ newValues . translate ( str , new ArrayRealVector ( str ) ) ; }
Distance : 9

111
Tree	{ CharSequenceUtils . translate ( str ? Strictness.SILENT : FunctionFlavor.NORMAL ) ; }
Code	{ CharSequenceUtils . translate ( str ? Strictness.SILENT : FunctionFlavor.NORMAL ) ; }
Distance : 8

112
Tree	{ lastIdx . translate ( str , new ArrayRealVector ( str ) ) ; }
Code	{ lastIdx . translate ( str , new ArrayRealVector ( str ) ) ; }
Distance : 9

113
Tree	{ pads . translate ( str , true ) ; }
Code	{ pads . translate ( str , true ) ; }
Distance : 6

114
Tree	{ regex . translate ( str , true ) ; }
Code	{ regex . translate ( str , true ) ; }
Distance : 6

115
Tree	{ lastIndexOf ( STRING_CONSTANT , out , beta , str ) ; }
Code	{ lastIndexOf ( STRING_CONSTANT , out , beta , str ) ; }
Distance : 5

116
Tree	{ CharSequenceUtils . translate ( NUMBER_CONSTANT ) . hasSize ( str , out ) ; }
Code	{ CharSequenceUtils . translate ( NUMBER_CONSTANT ) . hasSize ( str , out ) ; }
Distance : 10

117
Tree	{ translate ( STRING_CONSTANT , out , beta , str ) ; }
Code	{ translate ( STRING_CONSTANT , out , beta , str ) ; }
Distance : 5

118
Tree	{ pads . translate ( str , new ArrayRealVector ( str ) ) ; }
Code	{ pads . translate ( str , new ArrayRealVector ( str ) ) ; }
Distance : 9

119
Tree	{ lastIdx . translate ( str ? Es6ToEs3Util.CANNOT_CONVERT_YET : FunctionFlavor.NORMAL ) ; }
Code	{ lastIdx . translate ( str ? Es6ToEs3Util.CANNOT_CONVERT_YET : FunctionFlavor.NORMAL ) ; }
Distance : 8

120
Tree	{ lastIndexOf ( out , null ) ; }
Code	{ lastIndexOf ( out , null ) ; }
Distance : 6

121
Tree	{ CharSequenceUtils . translate ( str , out , this ) ; }
Code	{ CharSequenceUtils . translate ( str , out , this ) ; }
Distance : 6

122
Tree	{ setSeriesShapesVisible ( out , out , MODIFY_ROUND , FieldUtils ) ; }
Code	{ setSeriesShapesVisible ( out , out , MODIFY_ROUND , FieldUtils ) ; }
Distance : 4

123
Tree	{ checkTokenized ( out , out , randomData , CompositeFormat ) ; }
Code	{ checkTokenized ( out , out , randomData , CompositeFormat ) ; }
Distance : 4

124
Tree	{ setSeriesShapesVisible ( STRING_CONSTANT , out , beta , str ) ; }
Code	{ setSeriesShapesVisible ( STRING_CONSTANT , out , beta , str ) ; }
Distance : 5

125
Tree	{ setSeriesShapesVisible ( out , out ) ; }
Code	{ setSeriesShapesVisible ( out , out ) ; }
Distance : 6

126
Tree	{ FieldUtils () . translate ( str , out ) ; }
Code	{ FieldUtils () . translate ( str , out ) ; }
Distance : 8

127
Tree	{ setSeriesShapesVisible ( out , null ) ; }
Code	{ setSeriesShapesVisible ( out , null ) ; }
Distance : 6

128
Tree	{ translate ( out , out , MODIFY_ROUND , false ) ; }
Code	{ translate ( out , out , MODIFY_ROUND , false ) ; }
Distance : 4

129
Tree	{ lastIdx . translate () . lastIndexOf () . lastIndexOf ( str , out ) ; }
Code	{ lastIdx . translate () . lastIndexOf () . lastIndexOf ( str , out ) ; }
Distance : 12

130
Tree	{ CharSequenceUtils . translate () . lastIndexOf () . lastIndexOf ( str , out ) ; }
Code	{ CharSequenceUtils . translate () . lastIndexOf () . lastIndexOf ( str , out ) ; }
Distance : 12

131
Tree	{ array.length . translate ( str , out ) ; }
Code	{ array.length . translate ( str , out ) ; }
Distance : 7

132
Tree	{ lastIndexOf ( out , out , d.length ) ; }
Code	{ lastIndexOf ( out , out , d.length ) ; }
Distance : 5

133
Tree	{ CharSequenceUtils . translate () . translate ( str , out ) ; }
Code	{ CharSequenceUtils . translate () . translate ( str , out ) ; }
Distance : 9

134
Tree	{ lastIdx . translate ( NUMBER_CONSTANT ) . translate ( str , out ) ; }
Code	{ lastIdx . translate ( NUMBER_CONSTANT ) . translate ( str , out ) ; }
Distance : 10

135
Tree	{ setSeriesShapesVisible ( out , out , Color.BLACK ) ; }
Code	{ setSeriesShapesVisible ( out , out , Color.BLACK ) ; }
Distance : 5

136
Tree	{ stdDev . translate ( str ) ; }
Code	{ stdDev . translate ( str ) ; }
Distance : 8

137
Tree	{ FieldUtils . translate ( str , new ArrayRealVector ( str ) ) ; }
Code	{ FieldUtils . translate ( str , new ArrayRealVector ( str ) ) ; }
Distance : 9

138
Tree	{ CharSequenceUtils . translate ( NUMBER_CONSTANT ) . translate ( str , out ) ; }
Code	{ CharSequenceUtils . translate ( NUMBER_CONSTANT ) . translate ( str , out ) ; }
Distance : 10

139
Tree	{ checkTokenized ( STRING_CONSTANT , out , beta , str ) ; }
Code	{ checkTokenized ( STRING_CONSTANT , out , beta , str ) ; }
Distance : 5

140
Tree	{ maybeAddUsage () . translate ( str , out ) ; }
Code	{ maybeAddUsage () . translate ( str , out ) ; }
Distance : 8

141
Tree	{ checkTokenized ( getField ( str ) , hasFirstMethodInStackTrace ( str ) ) ; }
Code	{ checkTokenized ( getField ( str ) , hasFirstMethodInStackTrace ( str ) ) ; }
Distance : 8

142
Tree	{ lastIndexOf ( out , out , MODIFY_ROUND , CompositeFormat ) ; }
Code	{ lastIndexOf ( out , out , MODIFY_ROUND , CompositeFormat ) ; }
Distance : 4

143
Tree	{ stdDev . translate ( str , true ) ; }
Code	{ stdDev . translate ( str , true ) ; }
Distance : 6

144
Tree	{ checkTokenized ( STRING_CONSTANT , out , column , str ) ; }
Code	{ checkTokenized ( STRING_CONSTANT , out , column , str ) ; }
Distance : 5

145
Tree	{ translate ( out , out , d.length ) ; }
Code	{ translate ( out , out , d.length ) ; }
Distance : 5

146
Tree	{ regex . translate ( str , new ArrayRealVector ( str ) ) ; }
Code	{ regex . translate ( str , new ArrayRealVector ( str ) ) ; }
Distance : 9

147
Tree	{ CharSequenceUtils . translate ( NUMBER_CONSTANT ) . lastIndexOf ( str , out ) ; }
Code	{ CharSequenceUtils . translate ( NUMBER_CONSTANT ) . lastIndexOf ( str , out ) ; }
Distance : 10

148
Tree	{ regex . translate () . lastIndexOf () . lastIndexOf ( str , out ) ; }
Code	{ regex . translate () . lastIndexOf () . lastIndexOf ( str , out ) ; }
Distance : 12

149
Tree	{ regex . this . translate ( str , out , randomData ) ; }
Code	{ regex . this . translate ( str , out , randomData ) ; }
Distance : 8

150
Tree	{ CharSequenceUtils . translate () . translate () . translate ( str , out ) ; }
Code	{ CharSequenceUtils . translate () . translate () . translate ( str , out ) ; }
Distance : 12

151
Tree	{ CharSequenceUtils . translate ( str ? Es6ToEs3Util.CANNOT_CONVERT_YET : FunctionFlavor.NORMAL ) ; }
Code	{ CharSequenceUtils . translate ( str ? Es6ToEs3Util.CANNOT_CONVERT_YET : FunctionFlavor.NORMAL ) ; }
Distance : 8

152
Tree	{ CharSequenceUtils . translate () . lastIndexOf () . translate ( str , out ) ; }
Code	{ CharSequenceUtils . translate () . lastIndexOf () . translate ( str , out ) ; }
Distance : 12

153
Tree	{ checkTokenized ( getField ( str ) , expected ( str ) ) ; }
Code	{ checkTokenized ( getField ( str ) , expected ( str ) ) ; }
Distance : 8

154
Tree	{ lastIdx . translate ( str ? Strictness.SILENT : FunctionFlavor.NORMAL ) ; }
Code	{ lastIdx . translate ( str ? Strictness.SILENT : FunctionFlavor.NORMAL ) ; }
Distance : 8

155
Tree	{ pads . translate () . lastIndexOf () . lastIndexOf ( str , out ) ; }
Code	{ pads . translate () . lastIndexOf () . lastIndexOf ( str , out ) ; }
Distance : 12

156
Tree	{ CharSequenceUtils . this . translate ( str , out , MODIFY_ROUND ) ; }
Code	{ CharSequenceUtils . this . translate ( str , out , MODIFY_ROUND ) ; }
Distance : 8

157
Tree	{ lastIndexOf ( STRING_CONSTANT , out , beta , start ) ; }
Code	{ lastIndexOf ( STRING_CONSTANT , out , beta , start ) ; }
Distance : 5

158
Tree	{ pads . this . translate ( str , out , randomData ) ; }
Code	{ pads . this . translate ( str , out , randomData ) ; }
Distance : 8

159
Tree	{ checkTokenized () . lastIndexOf ( str , out ) ; }
Code	{ checkTokenized () . lastIndexOf ( str , out ) ; }
Distance : 8

160
Tree	{ EscapeUtils.ESCAPE_JAVA . translate ( out , out ) ; }
Code	{ EscapeUtils.ESCAPE_JAVA . translate ( out , out ) ; }
Distance : 8

161
Tree	{ CharSequenceUtils . translate ( str , false ) ; }
Code	{ CharSequenceUtils . translate ( str , false ) ; }
Distance : 7

162
Tree	{ setSeriesShapesVisible ( out , out , d.length ) ; }
Code	{ setSeriesShapesVisible ( out , out , d.length ) ; }
Distance : 5

163
Tree	{ CharSequenceUtils . this . translate ( str , out , column ) ; }
Code	{ CharSequenceUtils . this . translate ( str , out , column ) ; }
Distance : 8

164
Tree	{ CharSequenceUtils . translate ( null , str , beta , FieldUtils ) ; }
Code	{ CharSequenceUtils . translate ( null , str , beta , FieldUtils ) ; }
Distance : 6

165
Tree	{ lastIdx . this . translate ( str , out , MODIFY_ROUND ) ; }
Code	{ lastIdx . this . translate ( str , out , MODIFY_ROUND ) ; }
Distance : 8

166
Tree	{ EscapeUtils.ESCAPE_JAVA . getLength ( str , out ) ; }
Code	{ EscapeUtils.ESCAPE_JAVA . getLength ( str , out ) ; }
Distance : 7

167
Tree	{ CharSequenceUtils . translate ( null , str , column , FieldUtils ) ; }
Code	{ CharSequenceUtils . translate ( null , str , column , FieldUtils ) ; }
Distance : 6

168
Tree	{ CharSequenceUtils . this . translate ( str , out , beta ) ; }
Code	{ CharSequenceUtils . this . translate ( str , out , beta ) ; }
Distance : 8

169
Tree	{ lastIdx . translate () . translate () . lastIndexOf ( str , out ) ; }
Code	{ lastIdx . translate () . translate () . lastIndexOf ( str , out ) ; }
Distance : 12

170
Tree	{ lastIndexOf ( getField ( str ) , expected ( str ) ) ; }
Code	{ lastIndexOf ( getField ( str ) , expected ( str ) ) ; }
Distance : 8

171
Tree	{ checkTokenized ( getField ( str ) , getReal ( str ) ) ; }
Code	{ checkTokenized ( getField ( str ) , getReal ( str ) ) ; }
Distance : 8

172
Tree	{ setSeriesShapesVisible ( getField ( str ) , expected ( str ) ) ; }
Code	{ setSeriesShapesVisible ( getField ( str ) , expected ( str ) ) ; }
Distance : 8

173
Tree	{ lastIndexOf ( getField ( str ) , hasFirstMethodInStackTrace ( str ) ) ; }
Code	{ lastIndexOf ( getField ( str ) , hasFirstMethodInStackTrace ( str ) ) ; }
Distance : 8

174
Tree	{ translate ( out , out , Color.BLACK ) ; }
Code	{ translate ( out , out , Color.BLACK ) ; }
Distance : 5

175
Tree	{ setSeriesShapesVisible ( getField ( str ) , hasFirstMethodInStackTrace ( str ) ) ; }
Code	{ setSeriesShapesVisible ( getField ( str ) , hasFirstMethodInStackTrace ( str ) ) ; }
Distance : 8

176
Tree	{ checkTokenized ( out , out . abs ( result ) , null ) ; }
Code	{ checkTokenized ( out , out . abs ( result ) , null ) ; }
Distance : 8

177
Tree	{ checkTokenized ( getField ( str ) , append0 ( str ) ) ; }
Code	{ checkTokenized ( getField ( str ) , append0 ( str ) ) ; }
Distance : 8

178
Tree	{ CharSequenceUtils . translate ( Locale.ENGLISH , out ? f.length : FunctionFlavor.NORMAL ) ; }
Code	{ CharSequenceUtils . translate ( Locale.ENGLISH , out ? f.length : FunctionFlavor.NORMAL ) ; }
Distance : 9

179
Tree	{ CharSequenceUtils . translate ( null , str , beta , CompositeFormat ) ; }
Code	{ CharSequenceUtils . translate ( null , str , beta , CompositeFormat ) ; }
Distance : 6

180
Tree	{ lastIdx . translate ( null , str , column , FieldUtils ) ; }
Code	{ lastIdx . translate ( null , str , column , FieldUtils ) ; }
Distance : 6

181
Tree	{ checkTokenized ( out , out . abs ( SEED ) , null ) ; }
Code	{ checkTokenized ( out , out . abs ( SEED ) , null ) ; }
Distance : 8

182
Tree	{ CharSequenceUtils . translate ( null , str , randomData , FieldUtils ) ; }
Code	{ CharSequenceUtils . translate ( null , str , randomData , FieldUtils ) ; }
Distance : 6

183
Tree	{ CharSequenceUtils . translate ( null , str , column , CompositeFormat ) ; }
Code	{ CharSequenceUtils . translate ( null , str , column , CompositeFormat ) ; }
Distance : 6

184
Tree	{ lastIndexOf ( out , out . abs ( index ) , null ) ; }
Code	{ lastIndexOf ( out , out . abs ( index ) , null ) ; }
Distance : 8

185
Tree	{ lastIdx . translate ( NUMBER_CONSTANT ) . printTo ( str , out ) ; }
Code	{ lastIdx . translate ( NUMBER_CONSTANT ) . printTo ( str , out ) ; }
Distance : 10

186
Tree	{ checkTokenized ( out , out . abs ( index ) , null ) ; }
Code	{ checkTokenized ( out , out . abs ( index ) , null ) ; }
Distance : 8

187
Tree	{ checkTokenized ( out , out . abs ( visibility ) , null ) ; }
Code	{ checkTokenized ( out , out . abs ( visibility ) , null ) ; }
Distance : 8

188
Tree	{ setSeriesShapesVisible ( out , out . abs ( index ) , null ) ; }
Code	{ setSeriesShapesVisible ( out , out . abs ( index ) , null ) ; }
Distance : 8

189
Tree	{ lastIdx . translate ( Locale.ENGLISH , out ? f.length : FunctionFlavor.NORMAL ) ; }
Code	{ lastIdx . translate ( Locale.ENGLISH , out ? f.length : FunctionFlavor.NORMAL ) ; }
Distance : 9

190
Tree	{ CharSequenceUtils . translate ( LocalizedFormats.NO_DATA , out ? f.length : FunctionFlavor.NORMAL ) ; }
Code	{ CharSequenceUtils . translate ( LocalizedFormats.NO_DATA , out ? f.length : FunctionFlavor.NORMAL ) ; }
Distance : 9

191
Tree	{ regex . translate ( Locale.ENGLISH , out ? f.length : FunctionFlavor.NORMAL ) ; }
Code	{ regex . translate ( Locale.ENGLISH , out ? f.length : FunctionFlavor.NORMAL ) ; }
Distance : 9

192
Tree	{ lastIdx . translate ( null , str , beta , FieldUtils ) ; }
Code	{ lastIdx . translate ( null , str , beta , FieldUtils ) ; }
Distance : 6

193
Tree	{ lastIndexOf ( out , out . abs ( result ) , null ) ; }
Code	{ lastIndexOf ( out , out . abs ( result ) , null ) ; }
Distance : 8

194
Tree	{ pads . translate ( Locale.ENGLISH , out ? f.length : FunctionFlavor.NORMAL ) ; }
Code	{ pads . translate ( Locale.ENGLISH , out ? f.length : FunctionFlavor.NORMAL ) ; }
Distance : 9

195
Tree	{ CharSequenceUtils . translate ( Locale.ENGLISH , out ? f.length : LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ) ; }
Code	{ CharSequenceUtils . translate ( Locale.ENGLISH , out ? f.length : LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ) ; }
Distance : 9

196
Tree	{ CharSequenceUtils . translate ( Locale.ENGLISH , out ? LocalizedFormats.NUMBER_TOO_SMALL : FunctionFlavor.NORMAL ) ; }
Code	{ CharSequenceUtils . translate ( Locale.ENGLISH , out ? LocalizedFormats.NUMBER_TOO_SMALL : FunctionFlavor.NORMAL ) ; }
Distance : 9

197
Tree	{ setSeriesShapesVisible ( out , out . abs ( result ) , null ) ; }
Code	{ setSeriesShapesVisible ( out , out . abs ( result ) , null ) ; }
Distance : 8

198
Tree	{ lastIdx . translate ( LocalizedFormats.NO_DATA , out ? f.length : FunctionFlavor.NORMAL ) ; }
Code	{ lastIdx . translate ( LocalizedFormats.NO_DATA , out ? f.length : FunctionFlavor.NORMAL ) ; }
Distance : 9

199
Tree	{ CharSequenceUtils . translate ( null , str , scale , FieldUtils ) ; }
Code	{ CharSequenceUtils . translate ( null , str , scale , FieldUtils ) ; }
Distance : 6

========================================================================


========================================================================
Example Number: 40
Parent Code is: 
{ return escapeJavaStyleString ( str , true ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return escapeJavaStyleString ( str , true , true ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=str}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=str}) (234{val=,}) (9{val=true}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/46/parent/src_java_org_apache_commons_lang_StringEscapeUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return this . lastIndexOf ( str ) ; }
Code	{ return this . lastIndexOf ( str ) ; }
Distance : 7

1
Tree	{ this . contents = str ; super }
Code	{ this . contents = str ; super }
Distance : 10

2
Tree	{ return lastIndexOf ( str , ModuleType.GOOG_MODULE ) ; }
Code	{ return lastIndexOf ( str , ModuleType.GOOG_MODULE ) ; }
Distance : 4

3
Tree	{ super . lastIndexOf ( str ) ; return null ; }
Code	{ super . lastIndexOf ( str ) ; return null ; }
Distance : 8

4
Tree	{ super . translate ( str ) ; return false ; }
Code	{ super . translate ( str ) ; return false ; }
Distance : 8

5
Tree	{ translate ( str ) ; super }
Code	{ translate ( str ) ; super }
Distance : 7

6
Tree	{ super . translate ( str ) ; return null ; }
Code	{ super . translate ( str ) ; return null ; }
Distance : 8

7
Tree	{ return lastIndexOf ( str , size , beta , CompositeFormat , null ) ; }
Code	{ return lastIndexOf ( str , size , beta , CompositeFormat , null ) ; }
Distance : 7

8
Tree	{ return CharSequenceUtils . lastIndexOf ( str , null , null ) ; }
Code	{ return CharSequenceUtils . lastIndexOf ( str , null , null ) ; }
Distance : 5

9
Tree	{ return lastIndexOf ( str , CSV_SEARCH_CHARS , DEFAULT_STOPPING_RADIUS , CompositeFormat , null ) ; }
Code	{ return lastIndexOf ( str , CSV_SEARCH_CHARS , DEFAULT_STOPPING_RADIUS , CompositeFormat , null ) ; }
Distance : 7

10
Tree	{ return getLength ( str , ModuleType.GOOG_MODULE ) ; }
Code	{ return getLength ( str , ModuleType.GOOG_MODULE ) ; }
Distance : 4

11
Tree	{ return lastIndexOf ( str , size , clazz , CompositeFormat , null ) ; }
Code	{ return lastIndexOf ( str , size , clazz , CompositeFormat , null ) ; }
Distance : 7

12
Tree	{ return lastIndexOf ( str , Color.BLACK ) ; }
Code	{ return lastIndexOf ( str , Color.BLACK ) ; }
Distance : 4

13
Tree	{ return lastIndexOf ( str , INDEX_NOT_FOUND , DEFAULT_STOPPING_RADIUS , CompositeFormat , null ) ; }
Code	{ return lastIndexOf ( str , INDEX_NOT_FOUND , DEFAULT_STOPPING_RADIUS , CompositeFormat , null ) ; }
Distance : 7

14
Tree	{ this . CharSequenceUtils = str ; super }
Code	{ this . CharSequenceUtils = str ; super }
Distance : 10

15
Tree	{ this ( str , beta , abs , null ) ; }
Code	{ this ( str , beta , abs , null ) ; }
Distance : 6

16
Tree	{ return lastIndexOf ( str , size , d.length ) ; }
Code	{ return lastIndexOf ( str , size , d.length ) ; }
Distance : 3

17
Tree	{ this . strLen = str ; super }
Code	{ this . strLen = str ; super }
Distance : 10

18
Tree	{ return this . translate ( str ) ; }
Code	{ return this . translate ( str ) ; }
Distance : 7

19
Tree	{ this . baseHash = str ; super }
Code	{ this . baseHash = str ; super }
Distance : 10

20
Tree	{ return lastIndexOf ( str , size , abs , CompositeFormat , null ) ; }
Code	{ return lastIndexOf ( str , size , abs , CompositeFormat , null ) ; }
Distance : 7

21
Tree	{ fixUnitializedVarDeclarations ( str ) ; super }
Code	{ fixUnitializedVarDeclarations ( str ) ; super }
Distance : 7

22
Tree	{ return lastIndexOf ( StringUtils.EMPTY , null ) ; }
Code	{ return lastIndexOf ( StringUtils.EMPTY , null ) ; }
Distance : 5

23
Tree	{ return subtract ( str , null ) ; }
Code	{ return subtract ( str , null ) ; }
Distance : 4

24
Tree	{ return lastIndexOf ( Locale.ENGLISH , null ) ; }
Code	{ return lastIndexOf ( Locale.ENGLISH , null ) ; }
Distance : 5

25
Tree	{ return lastIndexOf ( str , d.length ) ; }
Code	{ return lastIndexOf ( str , d.length ) ; }
Distance : 4

26
Tree	{ return this . valueOf ( str ) ; }
Code	{ return this . valueOf ( str ) ; }
Distance : 7

27
Tree	{ return CharSequenceUtils . valueOf ( str , null , null ) ; }
Code	{ return CharSequenceUtils . valueOf ( str , null , null ) ; }
Distance : 5

28
Tree	{ return getLength ( str , null , null , scopeCreator ) ; }
Code	{ return getLength ( str , null , null , scopeCreator ) ; }
Distance : 5

29
Tree	{ this . substring = str ; super }
Code	{ this . substring = str ; super }
Distance : 10

30
Tree	{ return translate ( StringUtils.EMPTY , null ) ; }
Code	{ return translate ( StringUtils.EMPTY , null ) ; }
Distance : 5

31
Tree	{ return EscapeUtils.ESCAPE_JAVA . lastIndexOf ( str ) ; }
Code	{ return EscapeUtils.ESCAPE_JAVA . lastIndexOf ( str ) ; }
Distance : 7

32
Tree	{ return lastIndexOf ( str , false ) ; }
Code	{ return lastIndexOf ( str , false ) ; }
Distance : 4

33
Tree	{ super . substring ( str ) ; return false ; }
Code	{ super . substring ( str ) ; return false ; }
Distance : 8

34
Tree	{ repeat ( str ) ; super }
Code	{ repeat ( str ) ; super }
Distance : 7

35
Tree	{ return computeCorrelationMatrix ( this , str ) ; }
Code	{ return computeCorrelationMatrix ( this , str ) ; }
Distance : 5

36
Tree	{ return getLength ( str , size , Color.BLACK ) ; }
Code	{ return getLength ( str , size , Color.BLACK ) ; }
Distance : 3

37
Tree	{ return getLength ( str , false ) ; }
Code	{ return getLength ( str , false ) ; }
Distance : 4

38
Tree	{ printOffset ( str ) ; super }
Code	{ printOffset ( str ) ; super }
Distance : 7

39
Tree	{ return CharSequenceUtils . translate ( str , null , null ) ; }
Code	{ return CharSequenceUtils . translate ( str , null , null ) ; }
Distance : 5

40
Tree	{ this . cache = str ; super }
Code	{ this . cache = str ; super }
Distance : 10

41
Tree	{ return getLength ( str , null ) ; }
Code	{ return getLength ( str , null ) ; }
Distance : 4

42
Tree	{ return lastIndexOf ( str , true ) ; }
Code	{ return lastIndexOf ( str , true ) ; }
Distance : 3

43
Tree	{ return getLength ( this , str ) ; }
Code	{ return getLength ( this , str ) ; }
Distance : 5

44
Tree	{ return getLength ( str , size , DEFAULT_STOPPING_RADIUS , CompositeFormat , null ) ; }
Code	{ return getLength ( str , size , DEFAULT_STOPPING_RADIUS , CompositeFormat , null ) ; }
Distance : 7

45
Tree	{ super . translate () ; return false ; }
Code	{ super . translate () ; return false ; }
Distance : 9

46
Tree	{ throw super }
Code	{ throw super }
Distance : 10

47
Tree	{ this ( str , INDEX_NOT_FOUND , DEFAULT_STOPPING_RADIUS , null ) ; }
Code	{ this ( str , INDEX_NOT_FOUND , DEFAULT_STOPPING_RADIUS , null ) ; }
Distance : 6

48
Tree	{ return lastIndexOf ( this , out ) ; }
Code	{ return lastIndexOf ( this , out ) ; }
Distance : 5

49
Tree	{ lastIndexOf ( str ) ; return false ; }
Code	{ lastIndexOf ( str ) ; return false ; }
Distance : 7

50
Tree	{ super . resetMock ( str ) ; return false ; }
Code	{ super . resetMock ( str ) ; return false ; }
Distance : 8

51
Tree	{ return translate ( str , null , null , result ) ; }
Code	{ return translate ( str , null , null , result ) ; }
Distance : 5

52
Tree	{ lastIndexOf ( str ) ; super }
Code	{ lastIndexOf ( str ) ; super }
Distance : 7

53
Tree	{ setSeriesShapesVisible ( str ) ; return false ; }
Code	{ setSeriesShapesVisible ( str ) ; return false ; }
Distance : 7

54
Tree	{ return getLength ( str , true ) ; }
Code	{ return getLength ( str , true ) ; }
Distance : 3

55
Tree	{ return repeat ( str , null ) ; }
Code	{ return repeat ( str , null ) ; }
Distance : 4

56
Tree	{ translate ( str ) ; return false ; }
Code	{ translate ( str ) ; return false ; }
Distance : 7

57
Tree	{ return lastIndexOf ( str , null , null , context ) ; }
Code	{ return lastIndexOf ( str , null , null , context ) ; }
Distance : 5

58
Tree	{ super . checkTokenized ( str ) ; return false ; }
Code	{ super . checkTokenized ( str ) ; return false ; }
Distance : 8

59
Tree	{ super . substring ( str ) ; return null ; }
Code	{ super . substring ( str ) ; return null ; }
Distance : 8

60
Tree	{ this . start = str ; super }
Code	{ this . start = str ; super }
Distance : 10

61
Tree	{ return CharSequenceUtils . lastIndexOf ( str , null , result ) ; }
Code	{ return CharSequenceUtils . lastIndexOf ( str , null , result ) ; }
Distance : 5

62
Tree	{ super . lastIndexOf ( str ) ; return CharSequenceUtils ; }
Code	{ super . lastIndexOf ( str ) ; return CharSequenceUtils ; }
Distance : 8

63
Tree	{ return EscapeUtils.ESCAPE_JAVA . valueOf ( str ) ; }
Code	{ return EscapeUtils.ESCAPE_JAVA . valueOf ( str ) ; }
Distance : 7

64
Tree	{ return EscapeUtils.ESCAPE_ECMASCRIPT . lastIndexOf ( str ) ; }
Code	{ return EscapeUtils.ESCAPE_ECMASCRIPT . lastIndexOf ( str ) ; }
Distance : 7

65
Tree	{ return lastIndexOf ( str , INDEX_NOT_FOUND , abs , CompositeFormat , null ) ; }
Code	{ return lastIndexOf ( str , INDEX_NOT_FOUND , abs , CompositeFormat , null ) ; }
Distance : 7

66
Tree	{ return translate ( str , false ) ; }
Code	{ return translate ( str , false ) ; }
Distance : 4

67
Tree	{ super . getLength ( str ) ; return null ; }
Code	{ super . getLength ( str ) ; return null ; }
Distance : 8

68
Tree	{ return CharSequenceUtils . lastIndexOf ( str , null , randomData ) ; }
Code	{ return CharSequenceUtils . lastIndexOf ( str , null , randomData ) ; }
Distance : 5

69
Tree	{ return CharSequenceUtils . charAt ( str , null , null ) ; }
Code	{ return CharSequenceUtils . charAt ( str , null , null ) ; }
Distance : 5

70
Tree	{ this ( str , beta , DEFAULT_STOPPING_RADIUS , null ) ; }
Code	{ this ( str , beta , DEFAULT_STOPPING_RADIUS , null ) ; }
Distance : 6

71
Tree	{ return computeCorrelationMatrix ( str , false ) ; }
Code	{ return computeCorrelationMatrix ( str , false ) ; }
Distance : 4

72
Tree	{ return getLength ( str , Color.BLACK ) ; }
Code	{ return getLength ( str , Color.BLACK ) ; }
Distance : 4

73
Tree	{ super . translate ( str ) ; return Character ; }
Code	{ super . translate ( str ) ; return Character ; }
Distance : 8

74
Tree	{ this . regex = str ; super }
Code	{ this . regex = str ; super }
Distance : 10

75
Tree	{ return computeCorrelationMatrix ( str , null ) ; }
Code	{ return computeCorrelationMatrix ( str , null ) ; }
Distance : 4

76
Tree	{ return EscapeUtils.ESCAPE_ECMASCRIPT . translate ( str ) ; }
Code	{ return EscapeUtils.ESCAPE_ECMASCRIPT . translate ( str ) ; }
Distance : 7

77
Tree	{ return CharSequenceUtils . iso ( str , null , null ) ; }
Code	{ return CharSequenceUtils . iso ( str , null , null ) ; }
Distance : 5

78
Tree	{ return lastIndexOf ( str , null , null , scopeCreator ) ; }
Code	{ return lastIndexOf ( str , null , null , scopeCreator ) ; }
Distance : 5

79
Tree	{ super . translate ( str ) ; return this ; }
Code	{ super . translate ( str ) ; return this ; }
Distance : 8

80
Tree	{ return getLength ( str , iValues.length ) ; }
Code	{ return getLength ( str , iValues.length ) ; }
Distance : 4

81
Tree	{ return translate ( str , true ) ; }
Code	{ return translate ( str , true ) ; }
Distance : 3

82
Tree	{ return lastIndexOf ( str , INDEX_NOT_FOUND , Color.BLACK ) ; }
Code	{ return lastIndexOf ( str , INDEX_NOT_FOUND , Color.BLACK ) ; }
Distance : 3

83
Tree	{ return this . charAt ( str ) ; }
Code	{ return this . charAt ( str ) ; }
Distance : 7

84
Tree	{ super . lastIndexOf () ; return false ; }
Code	{ super . lastIndexOf () ; return false ; }
Distance : 9

85
Tree	{ return subtract ( str , false ) ; }
Code	{ return subtract ( str , false ) ; }
Distance : 4

86
Tree	{ return lastIndexOf ( str , null , null , result ) ; }
Code	{ return lastIndexOf ( str , null , null , result ) ; }
Distance : 5

87
Tree	{ super return }
Code	{ super return }
Distance : 10

88
Tree	{ return lastIndexOf ( str , size , Color.BLACK ) ; }
Code	{ return lastIndexOf ( str , size , Color.BLACK ) ; }
Distance : 3

89
Tree	{ return computeCorrelationMatrix ( StringUtils.EMPTY , null ) ; }
Code	{ return computeCorrelationMatrix ( StringUtils.EMPTY , null ) ; }
Distance : 5

90
Tree	{ super . repeat ( str ) ; return false ; }
Code	{ super . repeat ( str ) ; return false ; }
Distance : 8

91
Tree	{ super . resetMock ( str ) ; return null ; }
Code	{ super . resetMock ( str ) ; return null ; }
Distance : 8

92
Tree	{ return lastIndexOf ( str , null , null , CharSequenceUtils ) ; }
Code	{ return lastIndexOf ( str , null , null , CharSequenceUtils ) ; }
Distance : 5

93
Tree	{ return printOffset ( str , null ) ; }
Code	{ return printOffset ( str , null ) ; }
Distance : 4

94
Tree	{ return subtract ( this , str ) ; }
Code	{ return subtract ( this , str ) ; }
Distance : 5

95
Tree	{ return getLength ( str , size , d.length ) ; }
Code	{ return getLength ( str , size , d.length ) ; }
Distance : 3

96
Tree	{ return EscapeUtils.ESCAPE_JAVA . translate ( str ) ; }
Code	{ return EscapeUtils.ESCAPE_JAVA . translate ( str ) ; }
Distance : 7

97
Tree	{ super super }
Code	{ super super }
Distance : 10

98
Tree	{ return getLength ( str , d.length ) ; }
Code	{ return getLength ( str , d.length ) ; }
Distance : 4

99
Tree	{ return getLength ( str , null , null , context ) ; }
Code	{ return getLength ( str , null , null , context ) ; }
Distance : 5

100
Tree	{ return this . substring ( str ) ; }
Code	{ return this . substring ( str ) ; }
Distance : 7

101
Tree	{ return lastIndexOf ( str , size , DEFAULT_STOPPING_RADIUS , CompositeFormat ) ; }
Code	{ return lastIndexOf ( str , size , DEFAULT_STOPPING_RADIUS , CompositeFormat ) ; }
Distance : 5

102
Tree	{ super . translate ( str ) ; return bool ; }
Code	{ super . translate ( str ) ; return bool ; }
Distance : 8

103
Tree	{ return translate ( this , str ) ; }
Code	{ return translate ( this , str ) ; }
Distance : 5

104
Tree	{ return super . lastIndexOf ( str , size , DEFAULT_STOPPING_RADIUS , new ArrayRealVector ( str ) ) ; }
Code	{ return super . lastIndexOf ( str , size , DEFAULT_STOPPING_RADIUS , new ArrayRealVector ( str ) ) ; }
Distance : 11

105
Tree	{ return this . iso ( str ) ; }
Code	{ return this . iso ( str ) ; }
Distance : 7

106
Tree	{ return super . translate ( str , size , abs , new ArrayRealVector ( str ) ) ; }
Code	{ return super . translate ( str , size , abs , new ArrayRealVector ( str ) ) ; }
Distance : 11

107
Tree	{ return getLength ( Locale.ENGLISH , null ) ; }
Code	{ return getLength ( Locale.ENGLISH , null ) ; }
Distance : 5

108
Tree	{ return CharSequenceUtils . lastIndexOf ( str , size , DEFAULT_STOPPING_RADIUS , false ) ; }
Code	{ return CharSequenceUtils . lastIndexOf ( str , size , DEFAULT_STOPPING_RADIUS , false ) ; }
Distance : 7

109
Tree	{ return lastIndexOf ( str , null ) ; }
Code	{ return lastIndexOf ( str , null ) ; }
Distance : 4

110
Tree	{ return lastIndexOf ( this , str ) ; }
Code	{ return lastIndexOf ( this , str ) ; }
Distance : 5

111
Tree	{ checkTokenized ( str ) ; return false ; }
Code	{ checkTokenized ( str ) ; return false ; }
Distance : 7

112
Tree	{ fixUnitializedVarDeclarations ( str ) ; return false ; }
Code	{ fixUnitializedVarDeclarations ( str ) ; return false ; }
Distance : 7

113
Tree	{ return super . translate ( str , size , clazz , new ArrayRealVector ( str ) ) ; }
Code	{ return super . translate ( str , size , clazz , new ArrayRealVector ( str ) ) ; }
Distance : 11

114
Tree	{ return getLength ( str , null , null , result ) ; }
Code	{ return getLength ( str , null , null , result ) ; }
Distance : 5

115
Tree	{ return lastIndexOf ( str , INDEX_NOT_FOUND , DEFAULT_STOPPING_RADIUS , CompositeFormat ) ; }
Code	{ return lastIndexOf ( str , INDEX_NOT_FOUND , DEFAULT_STOPPING_RADIUS , CompositeFormat ) ; }
Distance : 5

116
Tree	{ super . checkTokenized ( str ) ; return null ; }
Code	{ super . checkTokenized ( str ) ; return null ; }
Distance : 8

117
Tree	{ return lastIndexOf ( Any.ANY , null ) ; }
Code	{ return lastIndexOf ( Any.ANY , null ) ; }
Distance : 5

118
Tree	{ return CharSequenceUtils . lastIndexOf ( str , null , beta ) ; }
Code	{ return CharSequenceUtils . lastIndexOf ( str , null , beta ) ; }
Distance : 5

119
Tree	{ return super . translate ( str , size , beta , new ArrayRealVector ( str ) ) ; }
Code	{ return super . translate ( str , size , beta , new ArrayRealVector ( str ) ) ; }
Distance : 11

120
Tree	{ return lastIndexOf ( str , size , abs , CompositeFormat ) ; }
Code	{ return lastIndexOf ( str , size , abs , CompositeFormat ) ; }
Distance : 5

121
Tree	{ setSeriesShapesVisible ( str ) ; super }
Code	{ setSeriesShapesVisible ( str ) ; super }
Distance : 7

122
Tree	{ return MockitoCore . lastIndexOf ( str , null , null ) ; }
Code	{ return MockitoCore . lastIndexOf ( str , null , null ) ; }
Distance : 5

123
Tree	{ return lastIndexOf ( str , CSV_SEARCH_CHARS , d.length ) ; }
Code	{ return lastIndexOf ( str , CSV_SEARCH_CHARS , d.length ) ; }
Distance : 3

124
Tree	{ return CharSequenceUtils . translate ( str , null , randomData ) ; }
Code	{ return CharSequenceUtils . translate ( str , null , randomData ) ; }
Distance : 5

125
Tree	{ this ( str , INDEX_NOT_FOUND , beta , null ) ; }
Code	{ this ( str , INDEX_NOT_FOUND , beta , null ) ; }
Distance : 6

126
Tree	{ super . substring ( str ) ; return CharSequenceUtils ; }
Code	{ super . substring ( str ) ; return CharSequenceUtils ; }
Distance : 8

127
Tree	{ return translate ( str , null ) ; }
Code	{ return translate ( str , null ) ; }
Distance : 4

128
Tree	{ checkTokenized ( str ) ; super }
Code	{ checkTokenized ( str ) ; super }
Distance : 7

129
Tree	{ super . translate ( str ) ; return defaultValue ; }
Code	{ super . translate ( str ) ; return defaultValue ; }
Distance : 8

130
Tree	{ return CharSequenceUtils . valueOf ( str , null , randomData ) ; }
Code	{ return CharSequenceUtils . valueOf ( str , null , randomData ) ; }
Distance : 5

131
Tree	{ return getLength ( this , out ) ; }
Code	{ return getLength ( this , out ) ; }
Distance : 5

132
Tree	{ maybeAddUsage ( str ) ; super }
Code	{ maybeAddUsage ( str ) ; super }
Distance : 7

133
Tree	{ super . lastIndexOf ( str ) ; return false ; }
Code	{ super . lastIndexOf ( str ) ; return false ; }
Distance : 8

134
Tree	{ return lastIndexOf ( str , iValues.length ) ; }
Code	{ return lastIndexOf ( str , iValues.length ) ; }
Distance : 4

135
Tree	{ repeat ( str ) ; return false ; }
Code	{ repeat ( str ) ; return false ; }
Distance : 7

136
Tree	{ return getLength ( str , INDEX_NOT_FOUND , d.length ) ; }
Code	{ return getLength ( str , INDEX_NOT_FOUND , d.length ) ; }
Distance : 3

137
Tree	{ return lastIndexOf ( str , size , DEFAULT_STOPPING_RADIUS , CompositeFormat , null ) ; }
Code	{ return lastIndexOf ( str , size , DEFAULT_STOPPING_RADIUS , CompositeFormat , null ) ; }
Distance : 7

138
Tree	{ return lastIndexOf ( str , INDEX_NOT_FOUND , d.length ) ; }
Code	{ return lastIndexOf ( str , INDEX_NOT_FOUND , d.length ) ; }
Distance : 3

139
Tree	{ this ( str , beta , beta , null ) ; }
Code	{ this ( str , beta , beta , null ) ; }
Distance : 6

140
Tree	{ return lastIndexOf ( str , CSV_SEARCH_CHARS , DEFAULT_STOPPING_RADIUS , CompositeFormat ) ; }
Code	{ return lastIndexOf ( str , CSV_SEARCH_CHARS , DEFAULT_STOPPING_RADIUS , CompositeFormat ) ; }
Distance : 5

141
Tree	{ return EscapeUtils.ESCAPE_JAVA . charAt ( str ) ; }
Code	{ return EscapeUtils.ESCAPE_JAVA . charAt ( str ) ; }
Distance : 7

142
Tree	{ return getLength ( StringUtils.EMPTY , null ) ; }
Code	{ return getLength ( StringUtils.EMPTY , null ) ; }
Distance : 5

143
Tree	{ return CharSequenceUtils . translate ( str , null , result ) ; }
Code	{ return CharSequenceUtils . translate ( str , null , result ) ; }
Distance : 5

144
Tree	{ super . setInterval ( str ) ; return false ; }
Code	{ super . setInterval ( str ) ; return false ; }
Distance : 8

145
Tree	{ return super . translate ( str , INDEX_NOT_FOUND , DEFAULT_STOPPING_RADIUS , new ArrayRealVector ( str ) ) ; }
Code	{ return super . translate ( str , INDEX_NOT_FOUND , DEFAULT_STOPPING_RADIUS , new ArrayRealVector ( str ) ) ; }
Distance : 11

146
Tree	{ super . repeat ( str ) ; return null ; }
Code	{ super . repeat ( str ) ; return null ; }
Distance : 8

147
Tree	{ return lastIndexOf ( str , size , clazz , CompositeFormat ) ; }
Code	{ return lastIndexOf ( str , size , clazz , CompositeFormat ) ; }
Distance : 5

148
Tree	{ return this . getLength ( str ) ; }
Code	{ return this . getLength ( str ) ; }
Distance : 7

149
Tree	{ super . translate ( str ) ; return CharSequenceUtils ; }
Code	{ super . translate ( str ) ; return CharSequenceUtils ; }
Distance : 8

150
Tree	{ super . getLength ( str ) ; return false ; }
Code	{ super . getLength ( str ) ; return false ; }
Distance : 8

151
Tree	{ super += }
Code	{ super += }
Distance : 10

152
Tree	{ return CharSequenceUtils . valueOf ( str , size , abs , false ) ; }
Code	{ return CharSequenceUtils . valueOf ( str , size , abs , false ) ; }
Distance : 7

153
Tree	{ throw return }
Code	{ throw return }
Distance : 10

154
Tree	{ return super . translate ( str , CSV_SEARCH_CHARS , DEFAULT_STOPPING_RADIUS , new ArrayRealVector ( str ) ) ; }
Code	{ return super . translate ( str , CSV_SEARCH_CHARS , DEFAULT_STOPPING_RADIUS , new ArrayRealVector ( str ) ) ; }
Distance : 11

155
Tree	{ return CharSequenceUtils . lastIndexOf ( str , size , beta , false ) ; }
Code	{ return CharSequenceUtils . lastIndexOf ( str , size , beta , false ) ; }
Distance : 7

156
Tree	{ return EscapeUtils.ESCAPE_ECMASCRIPT . valueOf ( str ) ; }
Code	{ return EscapeUtils.ESCAPE_ECMASCRIPT . valueOf ( str ) ; }
Distance : 7

157
Tree	{ return super . lastIndexOf ( str , size , abs , new ArrayRealVector ( str ) ) ; }
Code	{ return super . lastIndexOf ( str , size , abs , new ArrayRealVector ( str ) ) ; }
Distance : 11

158
Tree	{ return lastIndexOf ( str , INDEX_NOT_FOUND , abs , CompositeFormat ) ; }
Code	{ return lastIndexOf ( str , INDEX_NOT_FOUND , abs , CompositeFormat ) ; }
Distance : 5

159
Tree	{ return this . subSequence ( str ) ; }
Code	{ return this . subSequence ( str ) ; }
Distance : 7

160
Tree	{ return CharSequenceUtils . lastIndexOf ( str , size , clazz , false ) ; }
Code	{ return CharSequenceUtils . lastIndexOf ( str , size , clazz , false ) ; }
Distance : 7

161
Tree	{ super . setInterval ( str ) ; return null ; }
Code	{ super . setInterval ( str ) ; return null ; }
Distance : 8

162
Tree	{ return getLength ( Any.ANY , null ) ; }
Code	{ return getLength ( Any.ANY , null ) ; }
Distance : 5

163
Tree	{ super if }
Code	{ super if }
Distance : 10

164
Tree	{ return getLength ( str , size , DEFAULT_STOPPING_RADIUS , CompositeFormat ) ; }
Code	{ return getLength ( str , size , DEFAULT_STOPPING_RADIUS , CompositeFormat ) ; }
Distance : 5

165
Tree	{ return CharSequenceUtils . valueOf ( str , size , clazz , false ) ; }
Code	{ return CharSequenceUtils . valueOf ( str , size , clazz , false ) ; }
Distance : 7

166
Tree	{ super . lastIndexOf ( str ) ; return this ; }
Code	{ super . lastIndexOf ( str ) ; return this ; }
Distance : 8

167
Tree	{ super . substring ( str ) ; return this ; }
Code	{ super . substring ( str ) ; return this ; }
Distance : 8

168
Tree	{ super . setInterval () ; return false ; }
Code	{ super . setInterval () ; return false ; }
Distance : 9

169
Tree	{ this ( str , beta , paint , null ) ; }
Code	{ this ( str , beta , paint , null ) ; }
Distance : 6

170
Tree	{ super . substring () ; return false ; }
Code	{ super . substring () ; return false ; }
Distance : 9

171
Tree	{ super . resetMock () ; return false ; }
Code	{ super . resetMock () ; return false ; }
Distance : 9

172
Tree	{ return CharSequenceUtils . valueOf ( str , null , result ) ; }
Code	{ return CharSequenceUtils . valueOf ( str , null , result ) ; }
Distance : 5

173
Tree	{ return repeat ( this , str ) ; }
Code	{ return repeat ( this , str ) ; }
Distance : 5

174
Tree	{ return CharSequenceUtils . valueOf ( str , size , beta , false ) ; }
Code	{ return CharSequenceUtils . valueOf ( str , size , beta , false ) ; }
Distance : 7

175
Tree	{ super . checkTokenized () ; return false ; }
Code	{ super . checkTokenized () ; return false ; }
Distance : 9

176
Tree	{ return lastIndexOf ( str , size , beta , CompositeFormat ) ; }
Code	{ return lastIndexOf ( str , size , beta , CompositeFormat ) ; }
Distance : 5

177
Tree	{ return divide ( str , null ) ; }
Code	{ return divide ( str , null ) ; }
Distance : 4

178
Tree	{ return CharSequenceUtils . lastIndexOf ( str , size , abs , false ) ; }
Code	{ return CharSequenceUtils . lastIndexOf ( str , size , abs , false ) ; }
Distance : 7

179
Tree	{ return CharSequenceUtils . substring ( str , null , null ) ; }
Code	{ return CharSequenceUtils . substring ( str , null , null ) ; }
Distance : 5

180
Tree	{ return CharSequenceUtils . valueOf ( str , size , DEFAULT_STOPPING_RADIUS , false ) ; }
Code	{ return CharSequenceUtils . valueOf ( str , size , DEFAULT_STOPPING_RADIUS , false ) ; }
Distance : 7

181
Tree	{ super . lastIndexOf ( str ) ; return Character ; }
Code	{ super . lastIndexOf ( str ) ; return Character ; }
Distance : 8

182
Tree	{ maybeAddUsage ( str ) ; return false ; }
Code	{ maybeAddUsage ( str ) ; return false ; }
Distance : 7

183
Tree	{ this ( str , beta , clazz , null ) ; }
Code	{ this ( str , beta , clazz , null ) ; }
Distance : 6

184
Tree	{ super . repeat () ; return false ; }
Code	{ super . repeat () ; return false ; }
Distance : 9

185
Tree	{ super . lastIndexOf ( str ) ; return bool ; }
Code	{ super . lastIndexOf ( str ) ; return bool ; }
Distance : 8

186
Tree	{ return MockitoCore . valueOf ( str , null , null ) ; }
Code	{ return MockitoCore . valueOf ( str , null , null ) ; }
Distance : 5

187
Tree	{ return super . translate ( str , size , DEFAULT_STOPPING_RADIUS , new ArrayRealVector ( str ) ) ; }
Code	{ return super . translate ( str , size , DEFAULT_STOPPING_RADIUS , new ArrayRealVector ( str ) ) ; }
Distance : 11

188
Tree	{ this ( str , beta , MODIFY_ROUND , null ) ; }
Code	{ this ( str , beta , MODIFY_ROUND , null ) ; }
Distance : 6

189
Tree	{ return EscapeUtils.ESCAPE_JAVA . substring ( str ) ; }
Code	{ return EscapeUtils.ESCAPE_JAVA . substring ( str ) ; }
Distance : 7

190
Tree	{ printOffset ( str ) ; return false ; }
Code	{ printOffset ( str ) ; return false ; }
Distance : 7

191
Tree	{ return CharSequenceUtils . lastIndexOf ( str , null , scale ) ; }
Code	{ return CharSequenceUtils . lastIndexOf ( str , null , scale ) ; }
Distance : 5

192
Tree	{ super . getLength () ; return false ; }
Code	{ super . getLength () ; return false ; }
Distance : 9

193
Tree	{ throw += }
Code	{ throw += }
Distance : 10

194
Tree	{ super . setInterval ( str ) ; return this ; }
Code	{ super . setInterval ( str ) ; return this ; }
Distance : 8

195
Tree	{ throw char }
Code	{ throw char }
Distance : 10

196
Tree	{ super . resetMock ( str ) ; return this ; }
Code	{ super . resetMock ( str ) ; return this ; }
Distance : 8

197
Tree	{ super . checkTokenized ( str ) ; return this ; }
Code	{ super . checkTokenized ( str ) ; return this ; }
Distance : 8

198
Tree	{ super . repeat ( str ) ; return this ; }
Code	{ super . repeat ( str ) ; return this ; }
Distance : 8

199
Tree	{ super . getLength ( str ) ; return this ; }
Code	{ super . getLength ( str ) ; return this ; }
Distance : 8

========================================================================


========================================================================
Example Number: 41
Parent Code is: 
{ escapeJavaStyleString ( out , str , false ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ escapeJavaStyleString ( out , str , false , false ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=out}) (234{val=,}) (800{val=str}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=out}) (234{val=,}) (800{val=str}) (234{val=,}) (9{val=false}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/46/parent/src_java_org_apache_commons_lang_StringEscapeUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ pads . translate ( str , out ) ; }
Code	{ pads . translate ( str , out ) ; }
Distance : 7

1
Tree	{ maybeAddUsage ( out , out ) ; }
Code	{ maybeAddUsage ( out , out ) ; }
Distance : 6

2
Tree	{ newValues . translate ( str , out ) ; }
Code	{ newValues . translate ( str , out ) ; }
Distance : 7

3
Tree	{ alg . translate ( str , out ) ; }
Code	{ alg . translate ( str , out ) ; }
Distance : 7

4
Tree	{ stdDev . translate ( str , out ) ; }
Code	{ stdDev . translate ( str , out ) ; }
Distance : 7

5
Tree	{ FieldUtils . translate ( str , out ) ; }
Code	{ FieldUtils . translate ( str , out ) ; }
Distance : 7

6
Tree	{ setEndMillis ( out , out ) ; }
Code	{ setEndMillis ( out , out ) ; }
Distance : 6

7
Tree	{ helperExposeExpression ( out , out ) ; }
Code	{ helperExposeExpression ( out , out ) ; }
Distance : 6

8
Tree	{ CharSequenceUtils . translate ( str ) ; }
Code	{ CharSequenceUtils . translate ( str ) ; }
Distance : 8

9
Tree	{ checkTokenized ( out , out , false ) ; }
Code	{ checkTokenized ( out , out , false ) ; }
Distance : 4

10
Tree	{ lastIndexOf ( out , out , false ) ; }
Code	{ lastIndexOf ( out , out , false ) ; }
Distance : 4

11
Tree	{ setSeriesShapesVisible ( out , out , false ) ; }
Code	{ setSeriesShapesVisible ( out , out , false ) ; }
Distance : 4

12
Tree	{ lastIdx . translate ( str , out , this ) ; }
Code	{ lastIdx . translate ( str , out , this ) ; }
Distance : 6

13
Tree	{ EscapeUtils.ESCAPE_JAVA . lastIndexOf ( str , out ) ; }
Code	{ EscapeUtils.ESCAPE_JAVA . lastIndexOf ( str , out ) ; }
Distance : 7

14
Tree	{ lastIndexOf ( out , out , parsePatterns ) ; }
Code	{ lastIndexOf ( out , out , parsePatterns ) ; }
Distance : 5

15
Tree	{ CharSequenceUtils () . translate ( str , out ) ; }
Code	{ CharSequenceUtils () . translate ( str , out ) ; }
Distance : 8

16
Tree	{ newValues . translate ( str ) ; }
Code	{ newValues . translate ( str ) ; }
Distance : 8

17
Tree	{ StrSubstitutor ( out , out ) ; }
Code	{ StrSubstitutor ( out , out ) ; }
Distance : 6

18
Tree	{ EscapeUtils.ESCAPE_JAVA . translate ( str , str ) ; }
Code	{ EscapeUtils.ESCAPE_JAVA . translate ( str , str ) ; }
Distance : 7

19
Tree	{ regex . translate ( str , out , this ) ; }
Code	{ regex . translate ( str , out , this ) ; }
Distance : 6

20
Tree	{ CharSequenceUtils . translate () . lastIndexOf ( str , out ) ; }
Code	{ CharSequenceUtils . translate () . lastIndexOf ( str , out ) ; }
Distance : 9

21
Tree	{ helperExposeExpression () . translate ( str , out ) ; }
Code	{ helperExposeExpression () . translate ( str , out ) ; }
Distance : 8

22
Tree	{ setSeriesShapesVisible ( out , out ) ; }
Code	{ setSeriesShapesVisible ( out , out ) ; }
Distance : 6

23
Tree	{ setSeriesShapesVisible ( out , out . getTime ( str ) , null ) ; }
Code	{ setSeriesShapesVisible ( out , out . getTime ( str ) , null ) ; }
Distance : 8

24
Tree	{ setSeriesShapesVisible ( out , out , parsePatterns ) ; }
Code	{ setSeriesShapesVisible ( out , out , parsePatterns ) ; }
Distance : 5

25
Tree	{ alg . translate ( str ) ; }
Code	{ alg . translate ( str ) ; }
Distance : 8

26
Tree	{ checkTokenized ( out , out , str ) ; }
Code	{ checkTokenized ( out , out , str ) ; }
Distance : 5

27
Tree	{ lastIdx () . translate ( str , out ) ; }
Code	{ lastIdx () . translate ( str , out ) ; }
Distance : 8

28
Tree	{ translate ( out , out , false ) ; }
Code	{ translate ( out , out , false ) ; }
Distance : 4

29
Tree	{ CharSequenceUtils . translate () . length ( str , out ) ; }
Code	{ CharSequenceUtils . translate () . length ( str , out ) ; }
Distance : 9

30
Tree	{ lastIdx . translate ( str ) ; }
Code	{ lastIdx . translate ( str ) ; }
Distance : 8

31
Tree	{ setSeriesShapesVisible () . translate ( str , out ) ; }
Code	{ setSeriesShapesVisible () . translate ( str , out ) ; }
Distance : 8

32
Tree	{ translate ( out , out , out , false ) ; }
Code	{ translate ( out , out , out , false ) ; }
Distance : 3

33
Tree	{ translate ( out , out ) ; }
Code	{ translate ( out , out ) ; }
Distance : 6

34
Tree	{ CharSequenceUtils . translate ( str , new Object ( str ) ) ; }
Code	{ CharSequenceUtils . translate ( str , new Object ( str ) ) ; }
Distance : 9

35
Tree	{ checkTokenized ( STRING_CONSTANT , out , str , str ) ; }
Code	{ checkTokenized ( STRING_CONSTANT , out , str , str ) ; }
Distance : 5

36
Tree	{ pads () . translate ( str , out ) ; }
Code	{ pads () . translate ( str , out ) ; }
Distance : 8

37
Tree	{ lastIdx . translate ( str , out ) ; }
Code	{ lastIdx . translate ( str , out ) ; }
Distance : 7

38
Tree	{ regex . translate ( str ) ; }
Code	{ regex . translate ( str ) ; }
Distance : 8

39
Tree	{ EscapeUtils.ESCAPE_JAVA . translate ( str , out ) ; }
Code	{ EscapeUtils.ESCAPE_JAVA . translate ( str , out ) ; }
Distance : 7

40
Tree	{ maybeAddUsage ( out , null ) ; }
Code	{ maybeAddUsage ( out , null ) ; }
Distance : 6

41
Tree	{ checkTokenized ( STRING_CONSTANT , out , out , str ) ; }
Code	{ checkTokenized ( STRING_CONSTANT , out , out , str ) ; }
Distance : 5

42
Tree	{ regex . translate ( str , out ) ; }
Code	{ regex . translate ( str , out ) ; }
Distance : 7

43
Tree	{ lastIdx . translate () . lastIndexOf ( str , out ) ; }
Code	{ lastIdx . translate () . lastIndexOf ( str , out ) ; }
Distance : 9

44
Tree	{ setSeriesShapesVisible ( out , null ) ; }
Code	{ setSeriesShapesVisible ( out , null ) ; }
Distance : 6

45
Tree	{ EscapeUtils.ESCAPE_ECMASCRIPT . translate ( str , out ) ; }
Code	{ EscapeUtils.ESCAPE_ECMASCRIPT . translate ( str , out ) ; }
Distance : 7

46
Tree	{ checkTokenized ( out , out , parsePatterns , false ) ; }
Code	{ checkTokenized ( out , out , parsePatterns , false ) ; }
Distance : 3

47
Tree	{ CharSequenceUtils . translate ( str , out ) ; }
Code	{ CharSequenceUtils . translate ( str , out ) ; }
Distance : 7

48
Tree	{ checkTokenized ( out , out , str , false ) ; }
Code	{ checkTokenized ( out , out , str , false ) ; }
Distance : 3

49
Tree	{ regex . translate () . lastIndexOf ( str , out ) ; }
Code	{ regex . translate () . lastIndexOf ( str , out ) ; }
Distance : 9

50
Tree	{ checkTokenized ( out , out , out ) ; }
Code	{ checkTokenized ( out , out , out ) ; }
Distance : 5

51
Tree	{ translate ( STRING_CONSTANT , out , str , str ) ; }
Code	{ translate ( STRING_CONSTANT , out , str , str ) ; }
Distance : 5

52
Tree	{ lastIndexOf ( out , out , out ) ; }
Code	{ lastIndexOf ( out , out , out ) ; }
Distance : 5

53
Tree	{ setSeriesShapesVisible ( out , out , out ) ; }
Code	{ setSeriesShapesVisible ( out , out , out ) ; }
Distance : 5

54
Tree	{ checkTokenized () . translate ( str , out ) ; }
Code	{ checkTokenized () . translate ( str , out ) ; }
Distance : 8

55
Tree	{ FieldUtils . translate ( str ) ; }
Code	{ FieldUtils . translate ( str ) ; }
Distance : 8

56
Tree	{ CharSequenceUtils . translate ( null , str , str , str ) ; }
Code	{ CharSequenceUtils . translate ( null , str , str , str ) ; }
Distance : 6

57
Tree	{ checkTokenized ( out , null ) ; }
Code	{ checkTokenized ( out , null ) ; }
Distance : 6

58
Tree	{ CharSequenceUtils . translate () . setReturnValues ( str , out ) ; }
Code	{ CharSequenceUtils . translate () . setReturnValues ( str , out ) ; }
Distance : 9

59
Tree	{ pads . translate ( str , out , this ) ; }
Code	{ pads . translate ( str , out , this ) ; }
Distance : 6

60
Tree	{ CharSequenceUtils . translate ( str ? StringUtils.EMPTY : PropertyCollapseLevel.NONE ) ; }
Code	{ CharSequenceUtils . translate ( str ? StringUtils.EMPTY : PropertyCollapseLevel.NONE ) ; }
Distance : 8

61
Tree	{ maybeAddUsage ( out , out , false ) ; }
Code	{ maybeAddUsage ( out , out , false ) ; }
Distance : 4

62
Tree	{ maybeAddUsage ( STRING_CONSTANT , out , str , str ) ; }
Code	{ maybeAddUsage ( STRING_CONSTANT , out , str , str ) ; }
Distance : 5

63
Tree	{ stdDev . translate ( str ) ; }
Code	{ stdDev . translate ( str ) ; }
Distance : 8

64
Tree	{ CharSequenceUtils . translate () . translate ( str , out ) ; }
Code	{ CharSequenceUtils . translate () . translate ( str , out ) ; }
Distance : 9

65
Tree	{ CharSequenceUtils . translate ( NUMBER_CONSTANT ) . printTo ( str , out ) ; }
Code	{ CharSequenceUtils . translate ( NUMBER_CONSTANT ) . printTo ( str , out ) ; }
Distance : 10

66
Tree	{ pads . translate ( str ) ; }
Code	{ pads . translate ( str ) ; }
Distance : 8

67
Tree	{ lastIndexOf () . translate ( str , out ) ; }
Code	{ lastIndexOf () . translate ( str , out ) ; }
Distance : 8

68
Tree	{ CharSequenceUtils . translate () . lastIndexOf () . lastIndexOf ( str , out ) ; }
Code	{ CharSequenceUtils . translate () . lastIndexOf () . lastIndexOf ( str , out ) ; }
Distance : 12

69
Tree	{ checkTokenized ( out , out , out , false ) ; }
Code	{ checkTokenized ( out , out , out , false ) ; }
Distance : 3

70
Tree	{ regex () . translate ( str , out ) ; }
Code	{ regex () . translate ( str , out ) ; }
Distance : 8

71
Tree	{ checkTokenized ( out , out , out , str ) ; }
Code	{ checkTokenized ( out , out , out , str ) ; }
Distance : 4

72
Tree	{ CharSequenceUtils . translate ( str , out , this ) ; }
Code	{ CharSequenceUtils . translate ( str , out , this ) ; }
Distance : 6

73
Tree	{ pads . translate () . lastIndexOf ( str , out ) ; }
Code	{ pads . translate () . lastIndexOf ( str , out ) ; }
Distance : 9

74
Tree	{ checkTokenized ( out , out ) ; }
Code	{ checkTokenized ( out , out ) ; }
Distance : 6

75
Tree	{ lastIndexOf ( out , out , parsePatterns , false ) ; }
Code	{ lastIndexOf ( out , out , parsePatterns , false ) ; }
Distance : 3

76
Tree	{ CharSequenceUtils . translate ( str , false ) ; }
Code	{ CharSequenceUtils . translate ( str , false ) ; }
Distance : 6

77
Tree	{ lastIdx . translate () . translate ( str , out ) ; }
Code	{ lastIdx . translate () . translate ( str , out ) ; }
Distance : 9

78
Tree	{ translate () . translate ( str , out ) ; }
Code	{ translate () . translate ( str , out ) ; }
Distance : 8

79
Tree	{ newValues . translate ( str , new Object ( str ) ) ; }
Code	{ newValues . translate ( str , new Object ( str ) ) ; }
Distance : 9

80
Tree	{ alg . translate ( str , false ) ; }
Code	{ alg . translate ( str , false ) ; }
Distance : 6

81
Tree	{ translate ( out , null ) ; }
Code	{ translate ( out , null ) ; }
Distance : 6

82
Tree	{ FieldUtils () . translate ( str , out ) ; }
Code	{ FieldUtils () . translate ( str , out ) ; }
Distance : 8

83
Tree	{ checkTokenized ( out , out , parsePatterns ) ; }
Code	{ checkTokenized ( out , out , parsePatterns ) ; }
Distance : 5

84
Tree	{ newValues . translate ( str ? StringUtils.EMPTY : array.length ) ; }
Code	{ newValues . translate ( str ? StringUtils.EMPTY : array.length ) ; }
Distance : 8

85
Tree	{ setEndMillis ( out , out , false ) ; }
Code	{ setEndMillis ( out , out , false ) ; }
Distance : 4

86
Tree	{ setSeriesShapesVisible ( out , out , parsePatterns , str ) ; }
Code	{ setSeriesShapesVisible ( out , out , parsePatterns , str ) ; }
Distance : 4

87
Tree	{ lastIndexOf ( STRING_CONSTANT , out , out , str ) ; }
Code	{ lastIndexOf ( STRING_CONSTANT , out , out , str ) ; }
Distance : 5

88
Tree	{ translate ( out , out , out ) ; }
Code	{ translate ( out , out , out ) ; }
Distance : 5

89
Tree	{ pads . translate ( str , false ) ; }
Code	{ pads . translate ( str , false ) ; }
Distance : 6

90
Tree	{ alg . translate ( str , new Object ( str ) ) ; }
Code	{ alg . translate ( str , new Object ( str ) ) ; }
Distance : 9

91
Tree	{ newValues . translate ( str , out , this ) ; }
Code	{ newValues . translate ( str , out , this ) ; }
Distance : 6

92
Tree	{ CharSequenceUtils . translate ( str ? StringUtils.EMPTY : array.length ) ; }
Code	{ CharSequenceUtils . translate ( str ? StringUtils.EMPTY : array.length ) ; }
Distance : 8

93
Tree	{ pads . translate ( str ? StringUtils.EMPTY : array.length ) ; }
Code	{ pads . translate ( str ? StringUtils.EMPTY : array.length ) ; }
Distance : 8

94
Tree	{ stdDev . translate ( str , out , this ) ; }
Code	{ stdDev . translate ( str , out , this ) ; }
Distance : 6

95
Tree	{ lastIdx . translate ( str , false ) ; }
Code	{ lastIdx . translate ( str , false ) ; }
Distance : 6

96
Tree	{ regex . translate ( str , false ) ; }
Code	{ regex . translate ( str , false ) ; }
Distance : 6

97
Tree	{ checkTokenized ( out , out . getInstance ( str ) , null ) ; }
Code	{ checkTokenized ( out , out . getInstance ( str ) , null ) ; }
Distance : 8

98
Tree	{ regex . translate ( str , new Object ( str ) ) ; }
Code	{ regex . translate ( str , new Object ( str ) ) ; }
Distance : 9

99
Tree	{ alg () . translate ( str , out ) ; }
Code	{ alg () . translate ( str , out ) ; }
Distance : 8

100
Tree	{ lastIndexOf ( out , out , out , str ) ; }
Code	{ lastIndexOf ( out , out , out , str ) ; }
Distance : 4

101
Tree	{ lastIndexOf ( out , out , out , false ) ; }
Code	{ lastIndexOf ( out , out , out , false ) ; }
Distance : 3

102
Tree	{ helperExposeExpression ( out , null ) ; }
Code	{ helperExposeExpression ( out , null ) ; }
Distance : 6

103
Tree	{ stdDev . translate ( str , false ) ; }
Code	{ stdDev . translate ( str , false ) ; }
Distance : 6

104
Tree	{ alg . translate ( str ? StringUtils.EMPTY : array.length ) ; }
Code	{ alg . translate ( str ? StringUtils.EMPTY : array.length ) ; }
Distance : 8

105
Tree	{ translate ( out , out , out , str ) ; }
Code	{ translate ( out , out , out , str ) ; }
Distance : 4

106
Tree	{ EscapeUtils.ESCAPE_JAVA . printTo ( str , out ) ; }
Code	{ EscapeUtils.ESCAPE_JAVA . printTo ( str , out ) ; }
Distance : 7

107
Tree	{ checkTokenized ( out , out , str , str ) ; }
Code	{ checkTokenized ( out , out , str , str ) ; }
Distance : 4

108
Tree	{ lastIdx . translate ( null , str , str , str ) ; }
Code	{ lastIdx . translate ( null , str , str , str ) ; }
Distance : 6

109
Tree	{ helperExposeExpression ( out , out , false ) ; }
Code	{ helperExposeExpression ( out , out , false ) ; }
Distance : 4

110
Tree	{ CharSequenceUtils . translate ( null , str , out , str ) ; }
Code	{ CharSequenceUtils . translate ( null , str , out , str ) ; }
Distance : 6

111
Tree	{ CharSequenceUtils . translate ( NUMBER_CONSTANT ) . hasSize ( str , out ) ; }
Code	{ CharSequenceUtils . translate ( NUMBER_CONSTANT ) . hasSize ( str , out ) ; }
Distance : 10

112
Tree	{ lastIndexOf ( STRING_CONSTANT , out , str , str ) ; }
Code	{ lastIndexOf ( STRING_CONSTANT , out , str , str ) ; }
Distance : 5

113
Tree	{ CharSequenceUtils . this . translate ( str , out , parsePatterns ) ; }
Code	{ CharSequenceUtils . this . translate ( str , out , parsePatterns ) ; }
Distance : 8

114
Tree	{ checkTokenized ( out , out . getTime ( str ) , null ) ; }
Code	{ checkTokenized ( out , out . getTime ( str ) , null ) ; }
Distance : 8

115
Tree	{ CharSequenceUtils . translate ( str ? Locale.ENGLISH : array.length ) ; }
Code	{ CharSequenceUtils . translate ( str ? Locale.ENGLISH : array.length ) ; }
Distance : 8

116
Tree	{ CharSequenceUtils . translate ( NUMBER_CONSTANT ) . lastIndexOf ( str , out ) ; }
Code	{ CharSequenceUtils . translate ( NUMBER_CONSTANT ) . lastIndexOf ( str , out ) ; }
Distance : 10

117
Tree	{ newValues () . translate ( str , out ) ; }
Code	{ newValues () . translate ( str , out ) ; }
Distance : 8

118
Tree	{ setSeriesShapesVisible ( out , out , out , str ) ; }
Code	{ setSeriesShapesVisible ( out , out , out , str ) ; }
Distance : 4

119
Tree	{ setSeriesShapesVisible ( STRING_CONSTANT , out , str , str ) ; }
Code	{ setSeriesShapesVisible ( STRING_CONSTANT , out , str , str ) ; }
Distance : 5

120
Tree	{ setSeriesShapesVisible ( out , out , parsePatterns , false ) ; }
Code	{ setSeriesShapesVisible ( out , out , parsePatterns , false ) ; }
Distance : 3

121
Tree	{ regex . translate ( null , str , str , str ) ; }
Code	{ regex . translate ( null , str , str , str ) ; }
Distance : 6

122
Tree	{ stdDev () . translate ( str , out ) ; }
Code	{ stdDev () . translate ( str , out ) ; }
Distance : 8

123
Tree	{ FieldUtils . translate ( str , false ) ; }
Code	{ FieldUtils . translate ( str , false ) ; }
Distance : 6

124
Tree	{ StrSubstitutor ( out , out , false ) ; }
Code	{ StrSubstitutor ( out , out , false ) ; }
Distance : 4

125
Tree	{ lastIndexOf ( out , null ) ; }
Code	{ lastIndexOf ( out , null ) ; }
Distance : 6

126
Tree	{ StrSubstitutor ( out , null ) ; }
Code	{ StrSubstitutor ( out , null ) ; }
Distance : 6

127
Tree	{ lastIdx . translate ( null , str , out , str ) ; }
Code	{ lastIdx . translate ( null , str , out , str ) ; }
Distance : 6

128
Tree	{ setSeriesShapesVisible ( STRING_CONSTANT , out , out , str ) ; }
Code	{ setSeriesShapesVisible ( STRING_CONSTANT , out , out , str ) ; }
Distance : 5

129
Tree	{ lastIndexOf ( out , out . getInstance ( str ) , null ) ; }
Code	{ lastIndexOf ( out , out . getInstance ( str ) , null ) ; }
Distance : 8

130
Tree	{ lastIndexOf ( out , out ) ; }
Code	{ lastIndexOf ( out , out ) ; }
Distance : 6

131
Tree	{ setSeriesShapesVisible ( out , out . getInstance ( str ) , null ) ; }
Code	{ setSeriesShapesVisible ( out , out . getInstance ( str ) , null ) ; }
Distance : 8

132
Tree	{ alg . translate ( str , out , this ) ; }
Code	{ alg . translate ( str , out , this ) ; }
Distance : 6

133
Tree	{ array.length . translate ( str , out ) ; }
Code	{ array.length . translate ( str , out ) ; }
Distance : 7

134
Tree	{ stdDev . translate ( str , new Object ( str ) ) ; }
Code	{ stdDev . translate ( str , new Object ( str ) ) ; }
Distance : 9

135
Tree	{ lastIndexOf ( out , out , parsePatterns , str ) ; }
Code	{ lastIndexOf ( out , out , parsePatterns , str ) ; }
Distance : 4

136
Tree	{ regex . translate ( NUMBER_CONSTANT ) . hasSize ( str , out ) ; }
Code	{ regex . translate ( NUMBER_CONSTANT ) . hasSize ( str , out ) ; }
Distance : 10

137
Tree	{ pads . translate ( null , str , str , str ) ; }
Code	{ pads . translate ( null , str , str , str ) ; }
Distance : 6

138
Tree	{ FieldUtils . translate ( str , out , this ) ; }
Code	{ FieldUtils . translate ( str , out , this ) ; }
Distance : 6

139
Tree	{ setSeriesShapesVisible ( out , out , out , false ) ; }
Code	{ setSeriesShapesVisible ( out , out , out , false ) ; }
Distance : 3

140
Tree	{ setEndMillis () . translate ( str , out ) ; }
Code	{ setEndMillis () . translate ( str , out ) ; }
Distance : 8

141
Tree	{ maybeAddUsage () . translate ( str , out ) ; }
Code	{ maybeAddUsage () . translate ( str , out ) ; }
Distance : 8

142
Tree	{ lastIndexOf ( out , out , options.removeUnusedPrototypeProperties ) ; }
Code	{ lastIndexOf ( out , out , options.removeUnusedPrototypeProperties ) ; }
Distance : 5

143
Tree	{ checkTokenized ( out , out , parsePatterns , str ) ; }
Code	{ checkTokenized ( out , out , parsePatterns , str ) ; }
Distance : 4

144
Tree	{ regex . translate ( str ? StringUtils.EMPTY : array.length ) ; }
Code	{ regex . translate ( str ? StringUtils.EMPTY : array.length ) ; }
Distance : 8

145
Tree	{ checkTokenized ( getField ( str ) , withSettings ( str ) ) ; }
Code	{ checkTokenized ( getField ( str ) , withSettings ( str ) ) ; }
Distance : 8

146
Tree	{ pads . translate ( str , new Object ( str ) ) ; }
Code	{ pads . translate ( str , new Object ( str ) ) ; }
Distance : 9

147
Tree	{ CharSequenceUtils . translate ( NUMBER_CONSTANT ) . translate ( str , out ) ; }
Code	{ CharSequenceUtils . translate ( NUMBER_CONSTANT ) . translate ( str , out ) ; }
Distance : 10

148
Tree	{ setSeriesShapesVisible ( out , out , options.removeUnusedPrototypeProperties ) ; }
Code	{ setSeriesShapesVisible ( out , out , options.removeUnusedPrototypeProperties ) ; }
Distance : 5

149
Tree	{ setEndMillis ( out , null ) ; }
Code	{ setEndMillis ( out , null ) ; }
Distance : 6

150
Tree	{ FieldUtils . translate ( str , new Object ( str ) ) ; }
Code	{ FieldUtils . translate ( str , new Object ( str ) ) ; }
Distance : 9

151
Tree	{ lastIdx . translate ( NUMBER_CONSTANT ) . lastIndexOf ( str , out ) ; }
Code	{ lastIdx . translate ( NUMBER_CONSTANT ) . lastIndexOf ( str , out ) ; }
Distance : 10

152
Tree	{ CharSequenceUtils . this . translate ( str , out , out ) ; }
Code	{ CharSequenceUtils . this . translate ( str , out , out ) ; }
Distance : 8

153
Tree	{ CharSequenceUtils . this . lastIndexOf ( str , out , parsePatterns ) ; }
Code	{ CharSequenceUtils . this . lastIndexOf ( str , out , parsePatterns ) ; }
Distance : 8

154
Tree	{ newValues . translate ( str , false ) ; }
Code	{ newValues . translate ( str , false ) ; }
Distance : 6

155
Tree	{ checkTokenized ( out , out . toString ( str ) , null ) ; }
Code	{ checkTokenized ( out , out . toString ( str ) , null ) ; }
Distance : 8

156
Tree	{ lastIndexOf ( out , out . getTime ( str ) , null ) ; }
Code	{ lastIndexOf ( out , out . getTime ( str ) , null ) ; }
Distance : 8

157
Tree	{ alg . translate ( null , str , str , str ) ; }
Code	{ alg . translate ( null , str , str , str ) ; }
Distance : 6

158
Tree	{ lastIdx . translate ( str ? StringUtils.EMPTY : array.length ) ; }
Code	{ lastIdx . translate ( str ? StringUtils.EMPTY : array.length ) ; }
Distance : 8

159
Tree	{ translate ( out , out . getInstance ( str ) , null ) ; }
Code	{ translate ( out , out . getInstance ( str ) , null ) ; }
Distance : 8

160
Tree	{ CharSequenceUtils . translate () . lastIndexOf () . translate ( str , out ) ; }
Code	{ CharSequenceUtils . translate () . lastIndexOf () . translate ( str , out ) ; }
Distance : 12

161
Tree	{ lastIndexOf ( getField ( str ) , withSettings ( str ) ) ; }
Code	{ lastIndexOf ( getField ( str ) , withSettings ( str ) ) ; }
Distance : 8

162
Tree	{ checkTokenized ( out , out , TimeUnit.DAYS ) ; }
Code	{ checkTokenized ( out , out , TimeUnit.DAYS ) ; }
Distance : 5

163
Tree	{ CharSequenceUtils . translate () . length () . lastIndexOf ( str , out ) ; }
Code	{ CharSequenceUtils . translate () . length () . lastIndexOf ( str , out ) ; }
Distance : 12

164
Tree	{ lastIdx . translate ( str , new Object ( str ) ) ; }
Code	{ lastIdx . translate ( str , new Object ( str ) ) ; }
Distance : 9

165
Tree	{ checkTokenized () . lastIndexOf ( str , out ) ; }
Code	{ checkTokenized () . lastIndexOf ( str , out ) ; }
Distance : 8

166
Tree	{ CharSequenceUtils . translate () . translate () . lastIndexOf ( str , out ) ; }
Code	{ CharSequenceUtils . translate () . translate () . lastIndexOf ( str , out ) ; }
Distance : 12

167
Tree	{ setSeriesShapesVisible ( getField ( str ) , withSettings ( str ) ) ; }
Code	{ setSeriesShapesVisible ( getField ( str ) , withSettings ( str ) ) ; }
Distance : 8

168
Tree	{ checkTokenized ( out , out , options.removeUnusedPrototypeProperties ) ; }
Code	{ checkTokenized ( out , out , options.removeUnusedPrototypeProperties ) ; }
Distance : 5

169
Tree	{ CharSequenceUtils . translate ( NUMBER_CONSTANT ) . getRegisteredInvocations ( str , out ) ; }
Code	{ CharSequenceUtils . translate ( NUMBER_CONSTANT ) . getRegisteredInvocations ( str , out ) ; }
Distance : 10

170
Tree	{ lastIdx . translate () . lastIndexOf () . lastIndexOf ( str , out ) ; }
Code	{ lastIdx . translate () . lastIndexOf () . lastIndexOf ( str , out ) ; }
Distance : 12

171
Tree	{ EscapeUtils.ESCAPE_JAVA . getLength ( str , out ) ; }
Code	{ EscapeUtils.ESCAPE_JAVA . getLength ( str , out ) ; }
Distance : 7

172
Tree	{ lastIndexOf ( out , out , TimeUnit.DAYS ) ; }
Code	{ lastIndexOf ( out , out , TimeUnit.DAYS ) ; }
Distance : 5

173
Tree	{ CharSequenceUtils . this . printTo ( str , out , parsePatterns ) ; }
Code	{ CharSequenceUtils . this . printTo ( str , out , parsePatterns ) ; }
Distance : 8

174
Tree	{ setSeriesShapesVisible ( out , out , TimeUnit.DAYS ) ; }
Code	{ setSeriesShapesVisible ( out , out , TimeUnit.DAYS ) ; }
Distance : 5

175
Tree	{ lastIdx . translate ( NUMBER_CONSTANT ) . hasSize ( str , out ) ; }
Code	{ lastIdx . translate ( NUMBER_CONSTANT ) . hasSize ( str , out ) ; }
Distance : 10

176
Tree	{ translate ( out , out , options.removeUnusedPrototypeProperties ) ; }
Code	{ translate ( out , out , options.removeUnusedPrototypeProperties ) ; }
Distance : 5

177
Tree	{ EscapeUtils.ESCAPE_JAVA . translate ( str , size ) ; }
Code	{ EscapeUtils.ESCAPE_JAVA . translate ( str , size ) ; }
Distance : 7

178
Tree	{ regex . this . translate ( str , out , parsePatterns ) ; }
Code	{ regex . this . translate ( str , out , parsePatterns ) ; }
Distance : 8

179
Tree	{ translate ( out , out , TimeUnit.DAYS ) ; }
Code	{ translate ( out , out , TimeUnit.DAYS ) ; }
Distance : 5

180
Tree	{ CharSequenceUtils . this . translate ( str , out , UTC_TIME_ZONE ) ; }
Code	{ CharSequenceUtils . this . translate ( str , out , UTC_TIME_ZONE ) ; }
Distance : 8

181
Tree	{ CharSequenceUtils . translate () . translate () . translate ( str , out ) ; }
Code	{ CharSequenceUtils . translate () . translate () . translate ( str , out ) ; }
Distance : 12

182
Tree	{ lastIdx . this . translate ( str , out , parsePatterns ) ; }
Code	{ lastIdx . this . translate ( str , out , parsePatterns ) ; }
Distance : 8

183
Tree	{ maybeAddUsage ( getField ( str ) , withSettings ( str ) ) ; }
Code	{ maybeAddUsage ( getField ( str ) , withSettings ( str ) ) ; }
Distance : 8

184
Tree	{ checkTokenized ( getField ( str ) , anyObject ( str ) ) ; }
Code	{ checkTokenized ( getField ( str ) , anyObject ( str ) ) ; }
Distance : 8

185
Tree	{ newValues . translate ( null , str , str , str ) ; }
Code	{ newValues . translate ( null , str , str , str ) ; }
Distance : 6

186
Tree	{ checkTokenized ( getField ( str ) , expected ( str ) ) ; }
Code	{ checkTokenized ( getField ( str ) , expected ( str ) ) ; }
Distance : 8

187
Tree	{ regex . translate () . lastIndexOf () . lastIndexOf ( str , out ) ; }
Code	{ regex . translate () . lastIndexOf () . lastIndexOf ( str , out ) ; }
Distance : 12

188
Tree	{ CharSequenceUtils . translate ( Locale.ENGLISH , out ? StringUtils.EMPTY : PropertyCollapseLevel.NONE ) ; }
Code	{ CharSequenceUtils . translate ( Locale.ENGLISH , out ? StringUtils.EMPTY : PropertyCollapseLevel.NONE ) ; }
Distance : 9

189
Tree	{ CharSequenceUtils . translate ( Locale.ENGLISH , out ? FunctionFlavor.GENERATOR : PropertyCollapseLevel.NONE ) ; }
Code	{ CharSequenceUtils . translate ( Locale.ENGLISH , out ? FunctionFlavor.GENERATOR : PropertyCollapseLevel.NONE ) ; }
Distance : 9

190
Tree	{ CharSequenceUtils . translate () . setReturnValues () . lastIndexOf ( str , out ) ; }
Code	{ CharSequenceUtils . translate () . setReturnValues () . lastIndexOf ( str , out ) ; }
Distance : 12

191
Tree	{ CharSequenceUtils . translate ( Locale.ENGLISH , out ? PropertyCollapseLevel.NONE : PropertyCollapseLevel.NONE ) ; }
Code	{ CharSequenceUtils . translate ( Locale.ENGLISH , out ? PropertyCollapseLevel.NONE : PropertyCollapseLevel.NONE ) ; }
Distance : 9

192
Tree	{ translate ( getField ( str ) , withSettings ( str ) ) ; }
Code	{ translate ( getField ( str ) , withSettings ( str ) ) ; }
Distance : 8

193
Tree	{ CharSequenceUtils . translate ( Locale.ENGLISH , out ? StringUtils.EMPTY : currentState.length ) ; }
Code	{ CharSequenceUtils . translate ( Locale.ENGLISH , out ? StringUtils.EMPTY : currentState.length ) ; }
Distance : 9

194
Tree	{ CharSequenceUtils . translate ( Locale.ENGLISH , out ? LocalizedFormats.NUMBER_TOO_SMALL : PropertyCollapseLevel.NONE ) ; }
Code	{ CharSequenceUtils . translate ( Locale.ENGLISH , out ? LocalizedFormats.NUMBER_TOO_SMALL : PropertyCollapseLevel.NONE ) ; }
Distance : 9

195
Tree	{ CharSequenceUtils . this . lastIndexOf ( str , out , out ) ; }
Code	{ CharSequenceUtils . this . lastIndexOf ( str , out , out ) ; }
Distance : 8

196
Tree	{ CharSequenceUtils . translate ( Locale.ENGLISH , out ? iValues.length : PropertyCollapseLevel.NONE ) ; }
Code	{ CharSequenceUtils . translate ( Locale.ENGLISH , out ? iValues.length : PropertyCollapseLevel.NONE ) ; }
Distance : 9

197
Tree	{ CharSequenceUtils . translate ( Locale.ENGLISH , out ? Locale.ENGLISH : PropertyCollapseLevel.NONE ) ; }
Code	{ CharSequenceUtils . translate ( Locale.ENGLISH , out ? Locale.ENGLISH : PropertyCollapseLevel.NONE ) ; }
Distance : 9

198
Tree	{ CharSequenceUtils . translate ( Locale.ENGLISH , out ? values.length : PropertyCollapseLevel.NONE ) ; }
Code	{ CharSequenceUtils . translate ( Locale.ENGLISH , out ? values.length : PropertyCollapseLevel.NONE ) ; }
Distance : 9

199
Tree	{ checkTokenized ( getChronology ( str ) , withSettings ( str ) ) ; }
Code	{ checkTokenized ( getChronology ( str ) , withSettings ( str ) ) ; }
Distance : 8

========================================================================


========================================================================
Example Number: 42
Parent Code is: 
{ return escapeJavaStyleString ( str , false ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return escapeJavaStyleString ( str , false , false ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=str}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=str}) (234{val=,}) (9{val=false}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/46/parent/src_java_org_apache_commons_lang_StringEscapeUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ this . CharSequenceUtils = str ; super }
Code	{ this . CharSequenceUtils = str ; super }
Distance : 10

1
Tree	{ return lastIndexOf ( str , size , MODIFY_TRUNCATE , CompositeFormat , null ) ; }
Code	{ return lastIndexOf ( str , size , MODIFY_TRUNCATE , CompositeFormat , null ) ; }
Distance : 7

2
Tree	{ return getLength ( str , iValues.length ) ; }
Code	{ return getLength ( str , iValues.length ) ; }
Distance : 4

3
Tree	{ return lastIndexOf ( str , size , options.removeUnusedPrototypeProperties ) ; }
Code	{ return lastIndexOf ( str , size , options.removeUnusedPrototypeProperties ) ; }
Distance : 3

4
Tree	{ return EscapeUtils.ESCAPE_JAVA . lastIndexOf ( str ) ; }
Code	{ return EscapeUtils.ESCAPE_JAVA . lastIndexOf ( str ) ; }
Distance : 7

5
Tree	{ return lastIndexOf ( str , size , EMPTY , CompositeFormat , null ) ; }
Code	{ return lastIndexOf ( str , size , EMPTY , CompositeFormat , null ) ; }
Distance : 7

6
Tree	{ translate ( str ) ; super }
Code	{ translate ( str ) ; super }
Distance : 7

7
Tree	{ return lastIndexOf ( str , size , Verification.EXPLICIT ) ; }
Code	{ return lastIndexOf ( str , size , Verification.EXPLICIT ) ; }
Distance : 3

8
Tree	{ return EscapeUtils.ESCAPE_JAVA . translate ( str ) ; }
Code	{ return EscapeUtils.ESCAPE_JAVA . translate ( str ) ; }
Distance : 7

9
Tree	{ this . strLen = str ; super }
Code	{ this . strLen = str ; super }
Distance : 10

10
Tree	{ super . translate ( str ) ; return false ; }
Code	{ super . translate ( str ) ; return false ; }
Distance : 7

11
Tree	{ return lastIndexOf ( str , size , calendar , CompositeFormat , null ) ; }
Code	{ return lastIndexOf ( str , size , calendar , CompositeFormat , null ) ; }
Distance : 7

12
Tree	{ return lastIndexOf ( str , size , TimeUnit.DAYS ) ; }
Code	{ return lastIndexOf ( str , size , TimeUnit.DAYS ) ; }
Distance : 3

13
Tree	{ return getLength ( str , StringUtils.EMPTY ) ; }
Code	{ return getLength ( str , StringUtils.EMPTY ) ; }
Distance : 4

14
Tree	{ return lastIndexOf ( str , false ) ; }
Code	{ return lastIndexOf ( str , false ) ; }
Distance : 3

15
Tree	{ return getLength ( str , false ) ; }
Code	{ return getLength ( str , false ) ; }
Distance : 3

16
Tree	{ checkTokenized ( str ) ; super }
Code	{ checkTokenized ( str ) ; super }
Distance : 7

17
Tree	{ return getLength ( str , size , EMPTY , CompositeFormat , null ) ; }
Code	{ return getLength ( str , size , EMPTY , CompositeFormat , null ) ; }
Distance : 7

18
Tree	{ return lastIndexOf ( str , null ) ; }
Code	{ return lastIndexOf ( str , null ) ; }
Distance : 4

19
Tree	{ return this . translate ( str ) ; }
Code	{ return this . translate ( str ) ; }
Distance : 7

20
Tree	{ this ( str , size , EMPTY , null ) ; }
Code	{ this ( str , size , EMPTY , null ) ; }
Distance : 6

21
Tree	{ return translate ( str , false ) ; }
Code	{ return translate ( str , false ) ; }
Distance : 3

22
Tree	{ super . translate ( str ) ; return CharSequenceUtils ; }
Code	{ super . translate ( str ) ; return CharSequenceUtils ; }
Distance : 8

23
Tree	{ super . substring ( str ) ; return null ; }
Code	{ super . substring ( str ) ; return null ; }
Distance : 8

24
Tree	{ this . baseHash = str ; super }
Code	{ this . baseHash = str ; super }
Distance : 10

25
Tree	{ return getLength ( Any.ANY , null ) ; }
Code	{ return getLength ( Any.ANY , null ) ; }
Distance : 5

26
Tree	{ return this . charAt ( str ) ; }
Code	{ return this . charAt ( str ) ; }
Distance : 7

27
Tree	{ return translate ( str , iValues.length ) ; }
Code	{ return translate ( str , iValues.length ) ; }
Distance : 4

28
Tree	{ return getLength ( str , null , null , str ) ; }
Code	{ return getLength ( str , null , null , str ) ; }
Distance : 5

29
Tree	{ return CharSequenceUtils . valueOf ( str , null , str ) ; }
Code	{ return CharSequenceUtils . valueOf ( str , null , str ) ; }
Distance : 5

30
Tree	{ super . resetMock ( str ) ; return null ; }
Code	{ super . resetMock ( str ) ; return null ; }
Distance : 8

31
Tree	{ return computeCorrelationMatrix ( str , false ) ; }
Code	{ return computeCorrelationMatrix ( str , false ) ; }
Distance : 3

32
Tree	{ return getLength ( Locale.ENGLISH , null ) ; }
Code	{ return getLength ( Locale.ENGLISH , null ) ; }
Distance : 5

33
Tree	{ return subtract ( str , false ) ; }
Code	{ return subtract ( str , false ) ; }
Distance : 3

34
Tree	{ return lastIndexOf ( StringUtils.EMPTY , null ) ; }
Code	{ return lastIndexOf ( StringUtils.EMPTY , null ) ; }
Distance : 5

35
Tree	{ super return }
Code	{ super return }
Distance : 10

36
Tree	{ super . resetMock ( str ) ; return false ; }
Code	{ super . resetMock ( str ) ; return false ; }
Distance : 7

37
Tree	{ return this . valueOf ( str ) ; }
Code	{ return this . valueOf ( str ) ; }
Distance : 7

38
Tree	{ super . createIllegalArgumentException ( str ) ; return null ; }
Code	{ super . createIllegalArgumentException ( str ) ; return null ; }
Distance : 8

39
Tree	{ return lastIndexOf ( str , str , EMPTY , CompositeFormat , null ) ; }
Code	{ return lastIndexOf ( str , str , EMPTY , CompositeFormat , null ) ; }
Distance : 7

40
Tree	{ return getLength ( str , size , MODIFY_TRUNCATE , CompositeFormat , null ) ; }
Code	{ return getLength ( str , size , MODIFY_TRUNCATE , CompositeFormat , null ) ; }
Distance : 7

41
Tree	{ return computeCorrelationMatrix ( this , str ) ; }
Code	{ return computeCorrelationMatrix ( this , str ) ; }
Distance : 5

42
Tree	{ fixUnitializedVarDeclarations ( str ) ; super }
Code	{ fixUnitializedVarDeclarations ( str ) ; super }
Distance : 7

43
Tree	{ return translate ( StringUtils.EMPTY , null ) ; }
Code	{ return translate ( StringUtils.EMPTY , null ) ; }
Distance : 5

44
Tree	{ return CharSequenceUtils . translate ( str , null , str ) ; }
Code	{ return CharSequenceUtils . translate ( str , null , str ) ; }
Distance : 5

45
Tree	{ this . substring = str ; super }
Code	{ this . substring = str ; super }
Distance : 10

46
Tree	{ this . contents = str ; super }
Code	{ this . contents = str ; super }
Distance : 10

47
Tree	{ super . createIllegalArgumentException ( str ) ; return false ; }
Code	{ super . createIllegalArgumentException ( str ) ; return false ; }
Distance : 7

48
Tree	{ super . repeat ( str ) ; return null ; }
Code	{ super . repeat ( str ) ; return null ; }
Distance : 8

49
Tree	{ repeat ( str ) ; super }
Code	{ repeat ( str ) ; super }
Distance : 7

50
Tree	{ return translate ( this , str ) ; }
Code	{ return translate ( this , str ) ; }
Distance : 5

51
Tree	{ this ( str , out , EMPTY , null ) ; }
Code	{ this ( str , out , EMPTY , null ) ; }
Distance : 6

52
Tree	{ return computeCorrelationMatrix ( str , iValues.length ) ; }
Code	{ return computeCorrelationMatrix ( str , iValues.length ) ; }
Distance : 4

53
Tree	{ checkTokenized ( str ) ; return false ; }
Code	{ checkTokenized ( str ) ; return false ; }
Distance : 6

54
Tree	{ return this . lastIndexOf ( str ) ; }
Code	{ return this . lastIndexOf ( str ) ; }
Distance : 7

55
Tree	{ return lastIndexOf ( str , size , calendar , CompositeFormat ) ; }
Code	{ return lastIndexOf ( str , size , calendar , CompositeFormat ) ; }
Distance : 5

56
Tree	{ super . translate ( str ) ; return null ; }
Code	{ super . translate ( str ) ; return null ; }
Distance : 8

57
Tree	{ return lastIndexOf ( str , size , EMPTY , endPos , null ) ; }
Code	{ return lastIndexOf ( str , size , EMPTY , endPos , null ) ; }
Distance : 7

58
Tree	{ super . checkTokenized ( str ) ; return false ; }
Code	{ super . checkTokenized ( str ) ; return false ; }
Distance : 7

59
Tree	{ return subtract ( str , null ) ; }
Code	{ return subtract ( str , null ) ; }
Distance : 4

60
Tree	{ return CharSequenceUtils . valueOf ( str , null , null ) ; }
Code	{ return CharSequenceUtils . valueOf ( str , null , null ) ; }
Distance : 5

61
Tree	{ super . translate () ; return false ; }
Code	{ super . translate () ; return false ; }
Distance : 8

62
Tree	{ return lastIndexOf ( str , size , EMPTY , CompositeFormat ) ; }
Code	{ return lastIndexOf ( str , size , EMPTY , CompositeFormat ) ; }
Distance : 5

63
Tree	{ return repeat ( str , null ) ; }
Code	{ return repeat ( str , null ) ; }
Distance : 4

64
Tree	{ return computeCorrelationMatrix ( str , null ) ; }
Code	{ return computeCorrelationMatrix ( str , null ) ; }
Distance : 4

65
Tree	{ return this . substring ( str ) ; }
Code	{ return this . substring ( str ) ; }
Distance : 7

66
Tree	{ super . lastIndexOf ( str ) ; return this ; }
Code	{ super . lastIndexOf ( str ) ; return this ; }
Distance : 8

67
Tree	{ this . cache = str ; super }
Code	{ this . cache = str ; super }
Distance : 10

68
Tree	{ return computeCorrelationMatrix ( str , StringUtils.EMPTY ) ; }
Code	{ return computeCorrelationMatrix ( str , StringUtils.EMPTY ) ; }
Distance : 4

69
Tree	{ return lastIndexOf ( str , null , null , str ) ; }
Code	{ return lastIndexOf ( str , null , null , str ) ; }
Distance : 5

70
Tree	{ this ( str , str , EMPTY , null ) ; }
Code	{ this ( str , str , EMPTY , null ) ; }
Distance : 6

71
Tree	{ return getLength ( this , str ) ; }
Code	{ return getLength ( this , str ) ; }
Distance : 5

72
Tree	{ super . setInterval ( str ) ; return false ; }
Code	{ super . setInterval ( str ) ; return false ; }
Distance : 7

73
Tree	{ return EscapeUtils.ESCAPE_JAVA . valueOf ( str ) ; }
Code	{ return EscapeUtils.ESCAPE_JAVA . valueOf ( str ) ; }
Distance : 7

74
Tree	{ return lastIndexOf ( str , size , rhs.b ) ; }
Code	{ return lastIndexOf ( str , size , rhs.b ) ; }
Distance : 3

75
Tree	{ lastIndexOf ( str ) ; return false ; }
Code	{ lastIndexOf ( str ) ; return false ; }
Distance : 6

76
Tree	{ return EscapeUtils.ESCAPE_ECMASCRIPT . translate ( str ) ; }
Code	{ return EscapeUtils.ESCAPE_ECMASCRIPT . translate ( str ) ; }
Distance : 7

77
Tree	{ return repeat ( str , false ) ; }
Code	{ return repeat ( str , false ) ; }
Distance : 3

78
Tree	{ translate ( str ) ; return false ; }
Code	{ translate ( str ) ; return false ; }
Distance : 6

79
Tree	{ return getLength ( StringUtils.EMPTY , null ) ; }
Code	{ return getLength ( StringUtils.EMPTY , null ) ; }
Distance : 5

80
Tree	{ return super . translate ( str , size , EMPTY , new Coordinates3D ( str ) ) ; }
Code	{ return super . translate ( str , size , EMPTY , new Coordinates3D ( str ) ) ; }
Distance : 11

81
Tree	{ return getLength ( str , size , options.removeUnusedPrototypeProperties ) ; }
Code	{ return getLength ( str , size , options.removeUnusedPrototypeProperties ) ; }
Distance : 3

82
Tree	{ return lastIndexOf ( this , str ) ; }
Code	{ return lastIndexOf ( this , str ) ; }
Distance : 5

83
Tree	{ super . lastIndexOf ( str ) ; return null ; }
Code	{ super . lastIndexOf ( str ) ; return null ; }
Distance : 8

84
Tree	{ this . start = str ; super }
Code	{ this . start = str ; super }
Distance : 10

85
Tree	{ return computeCorrelationMatrix ( str , null , null , str ) ; }
Code	{ return computeCorrelationMatrix ( str , null , null , str ) ; }
Distance : 5

86
Tree	{ return divide ( str , null ) ; }
Code	{ return divide ( str , null ) ; }
Distance : 4

87
Tree	{ this ( str , size , calendar , null ) ; }
Code	{ this ( str , size , calendar , null ) ; }
Distance : 6

88
Tree	{ return subtract ( str , null , null , str ) ; }
Code	{ return subtract ( str , null , null , str ) ; }
Distance : 5

89
Tree	{ super . lastIndexOf () ; return false ; }
Code	{ super . lastIndexOf () ; return false ; }
Distance : 8

90
Tree	{ return CharSequenceUtils . translate ( str , null , null ) ; }
Code	{ return CharSequenceUtils . translate ( str , null , null ) ; }
Distance : 5

91
Tree	{ lastIndexOf ( str ) ; super }
Code	{ lastIndexOf ( str ) ; super }
Distance : 7

92
Tree	{ return computeCorrelationMatrix ( StringUtils.EMPTY , null ) ; }
Code	{ return computeCorrelationMatrix ( StringUtils.EMPTY , null ) ; }
Distance : 5

93
Tree	{ this ( str , out , calendar , null ) ; }
Code	{ this ( str , out , calendar , null ) ; }
Distance : 6

94
Tree	{ return lastIndexOf ( str , iValues.length ) ; }
Code	{ return lastIndexOf ( str , iValues.length ) ; }
Distance : 4

95
Tree	{ super . translate ( str ) ; return this ; }
Code	{ super . translate ( str ) ; return this ; }
Distance : 8

96
Tree	{ return super . lastIndexOf ( str , size , EMPTY , new Coordinates3D ( str ) ) ; }
Code	{ return super . lastIndexOf ( str , size , EMPTY , new Coordinates3D ( str ) ) ; }
Distance : 11

97
Tree	{ return super . translate ( str , size , calendar , new Coordinates3D ( str ) ) ; }
Code	{ return super . translate ( str , size , calendar , new Coordinates3D ( str ) ) ; }
Distance : 11

98
Tree	{ setSeriesShapesVisible ( str ) ; return false ; }
Code	{ setSeriesShapesVisible ( str ) ; return false ; }
Distance : 6

99
Tree	{ throw super }
Code	{ throw super }
Distance : 10

100
Tree	{ return CharSequenceUtils . lastIndexOf ( str , size , EMPTY , false ) ; }
Code	{ return CharSequenceUtils . lastIndexOf ( str , size , EMPTY , false ) ; }
Distance : 6

101
Tree	{ return getLength ( str , size , Verification.EXPLICIT ) ; }
Code	{ return getLength ( str , size , Verification.EXPLICIT ) ; }
Distance : 3

102
Tree	{ super . repeat ( str ) ; return false ; }
Code	{ super . repeat ( str ) ; return false ; }
Distance : 7

103
Tree	{ return lastIndexOf ( this , out ) ; }
Code	{ return lastIndexOf ( this , out ) ; }
Distance : 5

104
Tree	{ super super }
Code	{ super super }
Distance : 10

105
Tree	{ super . checkTokenized ( str ) ; return null ; }
Code	{ super . checkTokenized ( str ) ; return null ; }
Distance : 8

106
Tree	{ return CharSequenceUtils . translate ( str , size , EMPTY , false ) ; }
Code	{ return CharSequenceUtils . translate ( str , size , EMPTY , false ) ; }
Distance : 6

107
Tree	{ return getLength ( str , null ) ; }
Code	{ return getLength ( str , null ) ; }
Distance : 4

108
Tree	{ lastIndexOf ( CharSequenceUtils ) ; super }
Code	{ lastIndexOf ( CharSequenceUtils ) ; super }
Distance : 8

109
Tree	{ return super . translate ( str , size , MODIFY_TRUNCATE , new Coordinates3D ( str ) ) ; }
Code	{ return super . translate ( str , size , MODIFY_TRUNCATE , new Coordinates3D ( str ) ) ; }
Distance : 11

110
Tree	{ return EscapeUtils.ESCAPE_JAVA . charAt ( str ) ; }
Code	{ return EscapeUtils.ESCAPE_JAVA . charAt ( str ) ; }
Distance : 7

111
Tree	{ this ( str , size , MODIFY_TRUNCATE , null ) ; }
Code	{ this ( str , size , MODIFY_TRUNCATE , null ) ; }
Distance : 6

112
Tree	{ return EscapeUtils.ESCAPE_JAVA . substring ( str ) ; }
Code	{ return EscapeUtils.ESCAPE_JAVA . substring ( str ) ; }
Distance : 7

113
Tree	{ return CharSequenceUtils . lastIndexOf ( str , null , str ) ; }
Code	{ return CharSequenceUtils . lastIndexOf ( str , null , str ) ; }
Distance : 5

114
Tree	{ return CharSequenceUtils . valueOf ( str , size , MODIFY_TRUNCATE , false ) ; }
Code	{ return CharSequenceUtils . valueOf ( str , size , MODIFY_TRUNCATE , false ) ; }
Distance : 6

115
Tree	{ return lastIndexOf ( str , size , StringUtils.EMPTY ) ; }
Code	{ return lastIndexOf ( str , size , StringUtils.EMPTY ) ; }
Distance : 3

116
Tree	{ return repeat ( str , null , null , str ) ; }
Code	{ return repeat ( str , null , null , str ) ; }
Distance : 5

117
Tree	{ return lastIndexOf ( str , str , EMPTY , CompositeFormat ) ; }
Code	{ return lastIndexOf ( str , str , EMPTY , CompositeFormat ) ; }
Distance : 5

118
Tree	{ return repeat ( this , str ) ; }
Code	{ return repeat ( this , str ) ; }
Distance : 5

119
Tree	{ return divide ( str , false ) ; }
Code	{ return divide ( str , false ) ; }
Distance : 3

120
Tree	{ super . substring ( str ) ; return false ; }
Code	{ super . substring ( str ) ; return false ; }
Distance : 7

121
Tree	{ return printOffset ( str , false ) ; }
Code	{ return printOffset ( str , false ) ; }
Distance : 3

122
Tree	{ return getLength ( str , size , MODIFY_TRUNCATE , CompositeFormat ) ; }
Code	{ return getLength ( str , size , MODIFY_TRUNCATE , CompositeFormat ) ; }
Distance : 5

123
Tree	{ repeat ( str ) ; return false ; }
Code	{ repeat ( str ) ; return false ; }
Distance : 6

124
Tree	{ this ( str , out , MODIFY_TRUNCATE , null ) ; }
Code	{ this ( str , out , MODIFY_TRUNCATE , null ) ; }
Distance : 6

125
Tree	{ return this . toCharArray ( str ) ; }
Code	{ return this . toCharArray ( str ) ; }
Distance : 7

126
Tree	{ return getLength ( str , size , TimeUnit.DAYS ) ; }
Code	{ return getLength ( str , size , TimeUnit.DAYS ) ; }
Distance : 3

127
Tree	{ return lastIndexOf ( str , size , MODIFY_TRUNCATE , CompositeFormat ) ; }
Code	{ return lastIndexOf ( str , size , MODIFY_TRUNCATE , CompositeFormat ) ; }
Distance : 5

128
Tree	{ return subtract ( this , str ) ; }
Code	{ return subtract ( this , str ) ; }
Distance : 5

129
Tree	{ return getLength ( str , size , calendar , CompositeFormat ) ; }
Code	{ return getLength ( str , size , calendar , CompositeFormat ) ; }
Distance : 5

130
Tree	{ maybeAddUsage ( str ) ; return false ; }
Code	{ maybeAddUsage ( str ) ; return false ; }
Distance : 6

131
Tree	{ return lastIndexOf ( str , StringUtils.EMPTY ) ; }
Code	{ return lastIndexOf ( str , StringUtils.EMPTY ) ; }
Distance : 4

132
Tree	{ super . lastIndexOf ( str ) ; return false ; }
Code	{ super . lastIndexOf ( str ) ; return false ; }
Distance : 7

133
Tree	{ return translate ( str , null ) ; }
Code	{ return translate ( str , null ) ; }
Distance : 4

134
Tree	{ return translate ( str , StringUtils.EMPTY ) ; }
Code	{ return translate ( str , StringUtils.EMPTY ) ; }
Distance : 4

135
Tree	{ return CharSequenceUtils . valueOf ( str , null , out ) ; }
Code	{ return CharSequenceUtils . valueOf ( str , null , out ) ; }
Distance : 5

136
Tree	{ return getLength ( str , size , calendar , CompositeFormat , null ) ; }
Code	{ return getLength ( str , size , calendar , CompositeFormat , null ) ; }
Distance : 7

137
Tree	{ return EscapeUtils.ESCAPE_ECMASCRIPT . lastIndexOf ( str ) ; }
Code	{ return EscapeUtils.ESCAPE_ECMASCRIPT . lastIndexOf ( str ) ; }
Distance : 7

138
Tree	{ this ( str , buf , EMPTY , null ) ; }
Code	{ this ( str , buf , EMPTY , null ) ; }
Distance : 6

139
Tree	{ return CharSequenceUtils . lastIndexOf ( str , null , null ) ; }
Code	{ return CharSequenceUtils . lastIndexOf ( str , null , null ) ; }
Distance : 5

140
Tree	{ return divide ( str , null , null , str ) ; }
Code	{ return divide ( str , null , null , str ) ; }
Distance : 5

141
Tree	{ return this . iso ( str ) ; }
Code	{ return this . iso ( str ) ; }
Distance : 7

142
Tree	{ return CharSequenceUtils . valueOf ( str , size , calendar , false ) ; }
Code	{ return CharSequenceUtils . valueOf ( str , size , calendar , false ) ; }
Distance : 6

143
Tree	{ return lastIndexOf ( Locale.ENGLISH , null ) ; }
Code	{ return lastIndexOf ( Locale.ENGLISH , null ) ; }
Distance : 5

144
Tree	{ return printOffset ( str , null ) ; }
Code	{ return printOffset ( str , null ) ; }
Distance : 4

145
Tree	{ return divide ( this , str ) ; }
Code	{ return divide ( this , str ) ; }
Distance : 5

146
Tree	{ this . regex = str ; super }
Code	{ this . regex = str ; super }
Distance : 10

147
Tree	{ super . lastIndexOf ( str ) ; return CharSequenceUtils ; }
Code	{ super . lastIndexOf ( str ) ; return CharSequenceUtils ; }
Distance : 8

148
Tree	{ return super . lastIndexOf ( str , size , MODIFY_TRUNCATE , new Coordinates3D ( str ) ) ; }
Code	{ return super . lastIndexOf ( str , size , MODIFY_TRUNCATE , new Coordinates3D ( str ) ) ; }
Distance : 11

149
Tree	{ setSeriesShapesVisible ( str ) ; super }
Code	{ setSeriesShapesVisible ( str ) ; super }
Distance : 7

150
Tree	{ return translate ( str , null , null , str ) ; }
Code	{ return translate ( str , null , null , str ) ; }
Distance : 5

151
Tree	{ lastIndexOf ( CharSequenceUtils ) ; return false ; }
Code	{ lastIndexOf ( CharSequenceUtils ) ; return false ; }
Distance : 7

152
Tree	{ super . substring ( str ) ; return CharSequenceUtils ; }
Code	{ super . substring ( str ) ; return CharSequenceUtils ; }
Distance : 8

153
Tree	{ return super . lastIndexOf ( str , str , EMPTY , new Coordinates3D ( str ) ) ; }
Code	{ return super . lastIndexOf ( str , str , EMPTY , new Coordinates3D ( str ) ) ; }
Distance : 11

154
Tree	{ return CharSequenceUtils . charAt ( str , null , str ) ; }
Code	{ return CharSequenceUtils . charAt ( str , null , str ) ; }
Distance : 5

155
Tree	{ return MockitoCore . lastIndexOf ( str , null , null ) ; }
Code	{ return MockitoCore . lastIndexOf ( str , null , null ) ; }
Distance : 5

156
Tree	{ super . setInterval ( str ) ; return null ; }
Code	{ super . setInterval ( str ) ; return null ; }
Distance : 8

157
Tree	{ super . lastIndexOf ( str ) ; return bool ; }
Code	{ super . lastIndexOf ( str ) ; return bool ; }
Distance : 8

158
Tree	{ return lastIndexOf ( Any.ANY , null ) ; }
Code	{ return lastIndexOf ( Any.ANY , null ) ; }
Distance : 5

159
Tree	{ maybeAddUsage ( str ) ; super }
Code	{ maybeAddUsage ( str ) ; super }
Distance : 7

160
Tree	{ return CharSequenceUtils . charAt ( str , null , null ) ; }
Code	{ return CharSequenceUtils . charAt ( str , null , null ) ; }
Distance : 5

161
Tree	{ return CharSequenceUtils . iso ( str , null , null ) ; }
Code	{ return CharSequenceUtils . iso ( str , null , null ) ; }
Distance : 5

162
Tree	{ return CharSequenceUtils . valueOf ( str , size , EMPTY , false ) ; }
Code	{ return CharSequenceUtils . valueOf ( str , size , EMPTY , false ) ; }
Distance : 6

163
Tree	{ super . substring () ; return false ; }
Code	{ super . substring () ; return false ; }
Distance : 8

164
Tree	{ return MockitoCore . valueOf ( str , null , null ) ; }
Code	{ return MockitoCore . valueOf ( str , null , null ) ; }
Distance : 5

165
Tree	{ return super . lastIndexOf ( str , size , calendar , new Coordinates3D ( str ) ) ; }
Code	{ return super . lastIndexOf ( str , size , calendar , new Coordinates3D ( str ) ) ; }
Distance : 11

166
Tree	{ return CharSequenceUtils . translate ( str , size , calendar , false ) ; }
Code	{ return CharSequenceUtils . translate ( str , size , calendar , false ) ; }
Distance : 6

167
Tree	{ return CharSequenceUtils . lastIndexOf ( str , size , calendar , false ) ; }
Code	{ return CharSequenceUtils . lastIndexOf ( str , size , calendar , false ) ; }
Distance : 6

168
Tree	{ return this . getLength ( str ) ; }
Code	{ return this . getLength ( str ) ; }
Distance : 7

169
Tree	{ throw return }
Code	{ throw return }
Distance : 10

170
Tree	{ return CharSequenceUtils . lastIndexOf ( str , null , size ) ; }
Code	{ return CharSequenceUtils . lastIndexOf ( str , null , size ) ; }
Distance : 5

171
Tree	{ return getLength ( str , size , EMPTY , CompositeFormat ) ; }
Code	{ return getLength ( str , size , EMPTY , CompositeFormat ) ; }
Distance : 5

172
Tree	{ super . translate ( str ) ; return defaultValue ; }
Code	{ super . translate ( str ) ; return defaultValue ; }
Distance : 8

173
Tree	{ return CharSequenceUtils . valueOf ( str , null , size ) ; }
Code	{ return CharSequenceUtils . valueOf ( str , null , size ) ; }
Distance : 5

174
Tree	{ super . substring ( str ) ; return this ; }
Code	{ super . substring ( str ) ; return this ; }
Distance : 8

175
Tree	{ super . translate ( str ) ; return Character ; }
Code	{ super . translate ( str ) ; return Character ; }
Distance : 8

176
Tree	{ return CharSequenceUtils . lastIndexOf ( str , null , out ) ; }
Code	{ return CharSequenceUtils . lastIndexOf ( str , null , out ) ; }
Distance : 5

177
Tree	{ super += }
Code	{ super += }
Distance : 10

178
Tree	{ fixUnitializedVarDeclarations ( str ) ; return false ; }
Code	{ fixUnitializedVarDeclarations ( str ) ; return false ; }
Distance : 6

179
Tree	{ super . translate ( str ) ; return bool ; }
Code	{ super . translate ( str ) ; return bool ; }
Distance : 8

180
Tree	{ super . lastIndexOf ( str ) ; return Character ; }
Code	{ super . lastIndexOf ( str ) ; return Character ; }
Distance : 8

181
Tree	{ return printOffset ( str , null , null , str ) ; }
Code	{ return printOffset ( str , null , null , str ) ; }
Distance : 5

182
Tree	{ super . setInterval () ; return false ; }
Code	{ super . setInterval () ; return false ; }
Distance : 8

183
Tree	{ return CharSequenceUtils . substring ( str , null , null ) ; }
Code	{ return CharSequenceUtils . substring ( str , null , null ) ; }
Distance : 5

184
Tree	{ super if }
Code	{ super if }
Distance : 10

185
Tree	{ return EscapeUtils.ESCAPE_ECMASCRIPT . valueOf ( str ) ; }
Code	{ return EscapeUtils.ESCAPE_ECMASCRIPT . valueOf ( str ) ; }
Distance : 7

186
Tree	{ return super . lastIndexOf ( str , size , EMPTY , new FunctionEvaluationException ( str ) ) ; }
Code	{ return super . lastIndexOf ( str , size , EMPTY , new FunctionEvaluationException ( str ) ) ; }
Distance : 11

187
Tree	{ return CharSequenceUtils . lastIndexOf ( str , size , MODIFY_TRUNCATE , false ) ; }
Code	{ return CharSequenceUtils . lastIndexOf ( str , size , MODIFY_TRUNCATE , false ) ; }
Distance : 6

188
Tree	{ throw += }
Code	{ throw += }
Distance : 10

189
Tree	{ super . resetMock () ; return false ; }
Code	{ super . resetMock () ; return false ; }
Distance : 8

190
Tree	{ return lastIndexOf ( str , size , EMPTY , endPos ) ; }
Code	{ return lastIndexOf ( str , size , EMPTY , endPos ) ; }
Distance : 5

191
Tree	{ super . createIllegalArgumentException () ; return false ; }
Code	{ super . createIllegalArgumentException () ; return false ; }
Distance : 8

192
Tree	{ super . checkTokenized () ; return false ; }
Code	{ super . checkTokenized () ; return false ; }
Distance : 8

193
Tree	{ super . repeat () ; return false ; }
Code	{ super . repeat () ; return false ; }
Distance : 8

194
Tree	{ throw char }
Code	{ throw char }
Distance : 10

195
Tree	{ super . setInterval ( str ) ; return this ; }
Code	{ super . setInterval ( str ) ; return this ; }
Distance : 8

196
Tree	{ super . resetMock ( str ) ; return this ; }
Code	{ super . resetMock ( str ) ; return this ; }
Distance : 8

197
Tree	{ super . createIllegalArgumentException ( str ) ; return this ; }
Code	{ super . createIllegalArgumentException ( str ) ; return this ; }
Distance : 8

198
Tree	{ super . checkTokenized ( str ) ; return this ; }
Code	{ super . checkTokenized ( str ) ; return this ; }
Distance : 8

199
Tree	{ super . repeat ( str ) ; return this ; }
Code	{ super . repeat ( str ) ; return this ; }
Distance : 8

========================================================================


========================================================================
Example Number: 43
Parent Code is: 
if ( element != null ) { type = element . getClass () ; } else { type = Object . class ; }
-------------------------------------------------------------------------------
Child code is: 
if ( element != null ) { type = element . getClass () ; } else { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=element}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=type}) (204{val==}) (32 (800{val=element}) (235{val=.}) (802{val=getClass}) (216{val=()}))) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (21 (7 (800{val=type}) (204{val==}) (57 (43 (800{val=Object})) (235{val=.}) (341{val=class}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=element}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=type}) (204{val==}) (32 (800{val=element}) (235{val=.}) (802{val=getClass}) (216{val=()}))) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=IllegalArgumentException})) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/35/parent/src_main_java_org_apache_commons_lang3_ArrayUtils.java
-------------------------------------------------------------------------------
Edit Distance : 6
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = array.length ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = array.length ; }
Distance : 10

1
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = StringUtils.EMPTY ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = StringUtils.EMPTY ; }
Distance : 9

2
Tree	if ( element != null ) { type = false ; } else { type = iElementPairs . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = iElementPairs . getClass () ; }
Distance : 10

3
Tree	if ( element != null ) { type = element . getClass () ; } else { FeatureSet.ES3 = iElementPairs . verify () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { FeatureSet.ES3 = iElementPairs . verify () ; }
Distance : 6

4
Tree	if ( element != null ) { type = false ; } else { type = msg . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = msg . getClass () ; }
Distance : 10

5
Tree	if ( element != null ) { type = false ; } else { type = SPACE . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = SPACE . getClass () ; }
Distance : 10

6
Tree	if ( element != null ) { type = element . getClass () ; } else { CheckLevel.ERROR = invocation . verify () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { CheckLevel.ERROR = invocation . verify () ; }
Distance : 6

7
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( invocation ) size . clone () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( invocation ) size . clone () ; }
Distance : 8

8
Tree	if ( element != null ) { finderStub.actualToReturn = element . getClass () ; } else { type = invocation . verify () ; }
Code	if ( element != null ) { finderStub.actualToReturn = element . getClass () ; } else { type = invocation . verify () ; }
Distance : 7

9
Tree	if ( element != null ) { finderStub.actualToReturn = element . getClass () ; } else { type = ( Object ) invocation . clone () ; }
Code	if ( element != null ) { finderStub.actualToReturn = element . getClass () ; } else { type = ( Object ) invocation . clone () ; }
Distance : 9

10
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = this . locale ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = this . locale ; }
Distance : 9

11
Tree	if ( element != null ) { Long.MAX_VALUE = element . getClass () ; } else { FeatureSet.ES3 = invocation . verify () ; }
Code	if ( element != null ) { Long.MAX_VALUE = element . getClass () ; } else { FeatureSet.ES3 = invocation . verify () ; }
Distance : 7

12
Tree	if ( element != null ) { finderStub.actualToReturn = element . getClass () ; } else { FeatureSet.ES3 = invocation . verify () ; }
Code	if ( element != null ) { finderStub.actualToReturn = element . getClass () ; } else { FeatureSet.ES3 = invocation . verify () ; }
Distance : 7

13
Tree	if ( element != null ) { Double.NEGATIVE_INFINITY = false ; } else { type = iElementPairs . getClass () ; }
Code	if ( element != null ) { Double.NEGATIVE_INFINITY = false ; } else { type = iElementPairs . getClass () ; }
Distance : 11

14
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { TracerMode.ALL = invocation . verify () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { TracerMode.ALL = invocation . verify () ; }
Distance : 9

15
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { CheckLevel.ERROR = invocation . verify () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { CheckLevel.ERROR = invocation . verify () ; }
Distance : 9

16
Tree	if ( element != null ) { options.removeUnusedVars = element . getClass () ; } else { type = ( Object ) size . clone () ; }
Code	if ( element != null ) { options.removeUnusedVars = element . getClass () ; } else { type = ( Object ) size . clone () ; }
Distance : 9

17
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { FeatureSet.ES3 = iElementPairs . verify () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { FeatureSet.ES3 = iElementPairs . verify () ; }
Distance : 10

18
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = problem.y ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = problem.y ; }
Distance : 8

19
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { TracerMode.ALL = invocation . verify () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { TracerMode.ALL = invocation . verify () ; }
Distance : 10

20
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = this . millis ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = this . millis ; }
Distance : 9

21
Tree	if ( element != null ) { Double.NEGATIVE_INFINITY = false ; } else { type = size . getClass () ; }
Code	if ( element != null ) { Double.NEGATIVE_INFINITY = false ; } else { type = size . getClass () ; }
Distance : 11

22
Tree	if ( element != null ) { StringUtils.EMPTY = false ; } else { type = invocation . getClass () ; }
Code	if ( element != null ) { StringUtils.EMPTY = false ; } else { type = invocation . getClass () ; }
Distance : 11

23
Tree	if ( element != null ) { this . type = element . getClass () ; } else { FeatureSet.ES3 = firstNonNull () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { FeatureSet.ES3 = firstNonNull () ; }
Distance : 8

24
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Distance : 8

25
Tree	if ( element != null ) { type = element . getClass () == TracerMode.ALL ; } else { type = invocation . verify () ; }
Code	if ( element != null ) { type = element . getClass () == TracerMode.ALL ; } else { type = invocation . verify () ; }
Distance : 8

26
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = LanguageMode.ECMASCRIPT8 ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = LanguageMode.ECMASCRIPT8 ; }
Distance : 8

27
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Distance : 9

28
Tree	if ( element != null ) { type = RandomNameGenerator.FIRST_CHAR ; } else { type = invocation . getClass () ; }
Code	if ( element != null ) { type = RandomNameGenerator.FIRST_CHAR ; } else { type = invocation . getClass () ; }
Distance : 10

29
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = problem.y ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = problem.y ; }
Distance : 9

30
Tree	if ( element != null ) { type = ( Double ) element . getClass () ; } else { type = this . commonTypes ; }
Code	if ( element != null ) { type = ( Double ) element . getClass () ; } else { type = this . commonTypes ; }
Distance : 9

31
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = FeatureSet.BARE_MINIMUM ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = FeatureSet.BARE_MINIMUM ; }
Distance : 9

32
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) invocation . clone () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) invocation . clone () ; }
Distance : 8

33
Tree	if ( element != null ) { Double.NEGATIVE_INFINITY = element . getClass () ; } else { FeatureSet.ES3 = iElementPairs . verify () ; }
Code	if ( element != null ) { Double.NEGATIVE_INFINITY = element . getClass () ; } else { FeatureSet.ES3 = iElementPairs . verify () ; }
Distance : 7

34
Tree	if ( element != null ) { type = false ; } else { type = period . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = period . getClass () ; }
Distance : 10

35
Tree	if ( element != null ) { type = element . getClass () == CheckLevel.ERROR ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Code	if ( element != null ) { type = element . getClass () == CheckLevel.ERROR ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Distance : 8

36
Tree	if ( element != null ) { type = element . getClass () ; } else { DecompositionType.UNDECOMPOSABLE = invocation . verify () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { DecompositionType.UNDECOMPOSABLE = invocation . verify () ; }
Distance : 6

37
Tree	if ( element != null ) { type = element . getClass () ; } else { type = LanguageMode.ECMASCRIPT8 ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = LanguageMode.ECMASCRIPT8 ; }
Distance : 6

38
Tree	if ( element != null ) { Long.MAX_VALUE = element . getClass () ; } else { type = invocation . verify () ; }
Code	if ( element != null ) { Long.MAX_VALUE = element . getClass () ; } else { type = invocation . verify () ; }
Distance : 7

39
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { FeatureSet.ES3 = StringUtils.EMPTY . verify () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { FeatureSet.ES3 = StringUtils.EMPTY . verify () ; }
Distance : 9

40
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = StringUtils.EMPTY ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = StringUtils.EMPTY ; }
Distance : 10

41
Tree	if ( element != null ) { type = element . getClass () ; } else { type = values.length ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = values.length ; }
Distance : 6

42
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = FeatureSet.BARE_MINIMUM ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = FeatureSet.BARE_MINIMUM ; }
Distance : 8

43
Tree	if ( element != null ) { type = element . getClass () ; } else { type = AllowedSolutions.ANY_SIDE ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = AllowedSolutions.ANY_SIDE ; }
Distance : 6

44
Tree	if ( element != null ) { type = element . getClass () ; } else { type = FeatureSet.BARE_MINIMUM ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = FeatureSet.BARE_MINIMUM ; }
Distance : 6

45
Tree	if ( element != null ) { Double.NEGATIVE_INFINITY = element . getClass () ; } else { type = iElementPairs . verify () ; }
Code	if ( element != null ) { Double.NEGATIVE_INFINITY = element . getClass () ; } else { type = iElementPairs . verify () ; }
Distance : 7

46
Tree	if ( element != null ) { type = element . getClass () ; } else { FeatureSet.ES3 = invocation . verify () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { FeatureSet.ES3 = invocation . verify () ; }
Distance : 6

47
Tree	if ( element != null ) { type = element . getClass () ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Distance : 6

48
Tree	if ( element != null ) { StringUtils.EMPTY = element . getClass () ; } else { type = invocation . verify () ; }
Code	if ( element != null ) { StringUtils.EMPTY = element . getClass () ; } else { type = invocation . verify () ; }
Distance : 7

49
Tree	if ( element != null ) { type = element . getClass () ; } else { type = len . verify () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = len . verify () ; }
Distance : 6

50
Tree	if ( element != null ) { type = element . getClass () ; } else { type = source.isBiasCorrected ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = source.isBiasCorrected ; }
Distance : 6

51
Tree	if ( element != null ) { type = element . getClass () ; } else { type = invocation . verify () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = invocation . verify () ; }
Distance : 6

52
Tree	if ( element != null ) { type = element . getClass () ; } else { type = invocation . join () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = invocation . join () ; }
Distance : 6

53
Tree	if ( element != null ) { type = element . getClass () ; } else { type = size . verify () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = size . verify () ; }
Distance : 6

54
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Distance : 10

55
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) size . clone () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( Object ) size . clone () ; }
Distance : 8

56
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { FeatureSet.ES3 = LanguageMode.ECMASCRIPT_2015 . verify () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { FeatureSet.ES3 = LanguageMode.ECMASCRIPT_2015 . verify () ; }
Distance : 9

57
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { FeatureSet.ES3 = FeatureSet.ES3 . verify () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { FeatureSet.ES3 = FeatureSet.ES3 . verify () ; }
Distance : 10

58
Tree	if ( element != null ) { type = element . getClass () == TracerMode.ALL ; } else { type = size . verify () ; }
Code	if ( element != null ) { type = element . getClass () == TracerMode.ALL ; } else { type = size . verify () ; }
Distance : 8

59
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { AllowedSolutions.ANY_SIDE = invocation . verify () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { AllowedSolutions.ANY_SIDE = invocation . verify () ; }
Distance : 9

60
Tree	if ( element != null ) { type = false ; } else { type = size . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = size . getClass () ; }
Distance : 10

61
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { AllowedSolutions.ANY_SIDE = invocation . verify () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { AllowedSolutions.ANY_SIDE = invocation . verify () ; }
Distance : 10

62
Tree	if ( element != null ) { type = problem.y ; } else { type = size . clone () ; }
Code	if ( element != null ) { type = problem.y ; } else { type = size . clone () ; }
Distance : 10

63
Tree	if ( element != null ) { this . type = element . getClass () ; } else { FeatureSet.ES3 = inverseTransform2 () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { FeatureSet.ES3 = inverseTransform2 () ; }
Distance : 8

64
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { TypeInferenceMode.DISABLED = invocation . verify () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { TypeInferenceMode.DISABLED = invocation . verify () ; }
Distance : 9

65
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { CheckLevel.ERROR = iElementPairs . verify () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { CheckLevel.ERROR = iElementPairs . verify () ; }
Distance : 10

66
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { FeatureSet.ES3 = SPACE . verify () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { FeatureSet.ES3 = SPACE . verify () ; }
Distance : 9

67
Tree	if ( element != null ) { type = element . getClass () ; } else { type = StringUtils.EMPTY ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = StringUtils.EMPTY ; }
Distance : 6

68
Tree	if ( element != null ) { this . type = element . getClass () ; } else { FeatureSet.ES3 = iElementPairs . verify () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { FeatureSet.ES3 = iElementPairs . verify () ; }
Distance : 8

69
Tree	if ( element != null ) { type = RandomNameGenerator.FIRST_CHAR ; } else { type = size . clone () ; }
Code	if ( element != null ) { type = RandomNameGenerator.FIRST_CHAR ; } else { type = size . clone () ; }
Distance : 10

70
Tree	if ( element != null ) { Double.NEGATIVE_INFINITY = element . getClass () ; } else { type = size . verify () ; }
Code	if ( element != null ) { Double.NEGATIVE_INFINITY = element . getClass () ; } else { type = size . verify () ; }
Distance : 7

71
Tree	if ( element != null ) { type = element . getClass () ; } else { type = iElementPairs . verify () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = iElementPairs . verify () ; }
Distance : 6

72
Tree	if ( element != null ) { type = element . getClass () ; } else { type = invocation . clone () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = invocation . clone () ; }
Distance : 6

73
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = values.length ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = values.length ; }
Distance : 8

74
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = FeatureSet.ES3 ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = FeatureSet.ES3 ; }
Distance : 8

75
Tree	if ( element != null ) { type = Float . getClass () ; } else { type = false ; }
Code	if ( element != null ) { type = Float . getClass () ; } else { type = false ; }
Distance : 7

76
Tree	if ( element != null ) { this . type = element . getClass () ; } else { FeatureSet.ES3 = invocation . verify () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { FeatureSet.ES3 = invocation . verify () ; }
Distance : 8

77
Tree	if ( element != null ) { StringUtils.EMPTY = element . getClass () ; } else { type = ( Object ) size . clone () ; }
Code	if ( element != null ) { StringUtils.EMPTY = element . getClass () ; } else { type = ( Object ) size . clone () ; }
Distance : 9

78
Tree	if ( element != null ) { type = false ; } else { type = len . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = len . getClass () ; }
Distance : 10

79
Tree	if ( element != null ) { type = element . getClass () ; } else { type = msg . verify () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = msg . verify () ; }
Distance : 6

80
Tree	if ( element != null ) { type = element . getClass () ; } else { type = period . verify () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = period . verify () ; }
Distance : 6

81
Tree	if ( Double != null ) { type = element . getClass () ; } else { type = false ; }
Code	if ( Double != null ) { type = element . getClass () ; } else { type = false ; }
Distance : 7

82
Tree	if ( element != null ) { type = element . clone () ; } else { type = false ; }
Code	if ( element != null ) { type = element . clone () ; } else { type = false ; }
Distance : 7

83
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { CheckLevel.ERROR = FeatureSet.ES3 . verify () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { CheckLevel.ERROR = FeatureSet.ES3 . verify () ; }
Distance : 9

84
Tree	if ( element != null ) { type = element . getClass () ; } else { FeatureSet.ES3 = SPACE . verify () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { FeatureSet.ES3 = SPACE . verify () ; }
Distance : 6

85
Tree	if ( element != null ) { type = ( int [] ) element . clone () ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Code	if ( element != null ) { type = ( int [] ) element . clone () ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Distance : 11

86
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = this . type ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = this . type ; }
Distance : 9

87
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { AllowedSolutions.ANY_SIDE = FeatureSet.ES3 . verify () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { AllowedSolutions.ANY_SIDE = FeatureSet.ES3 . verify () ; }
Distance : 9

88
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { DecompositionType.UNDECOMPOSABLE = invocation . verify () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { DecompositionType.UNDECOMPOSABLE = invocation . verify () ; }
Distance : 9

89
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { FeatureSet.ES3 = invocation . verify () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { FeatureSet.ES3 = invocation . verify () ; }
Distance : 10

90
Tree	if ( element != null ) { Double.NEGATIVE_INFINITY = element . getClass () ; } else { type = ( Object ) size . clone () ; }
Code	if ( element != null ) { Double.NEGATIVE_INFINITY = element . getClass () ; } else { type = ( Object ) size . clone () ; }
Distance : 9

91
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { TracerMode.ALL = FeatureSet.ES3 . verify () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { TracerMode.ALL = FeatureSet.ES3 . verify () ; }
Distance : 9

92
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { CheckLevel.ERROR = invocation . verify () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { CheckLevel.ERROR = invocation . verify () ; }
Distance : 10

93
Tree	if ( element != null ) { this . type = element . getClass () ; } else { TypeInferenceMode.DISABLED = invocation . verify () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { TypeInferenceMode.DISABLED = invocation . verify () ; }
Distance : 8

94
Tree	if ( element != null ) { type = element . getClass () ; } else { type = Calendar * element ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = Calendar * element ; }
Distance : 6

95
Tree	if ( element != null ) { this . type = element . getClass () ; } else { CheckLevel.ERROR = invocation . verify () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { CheckLevel.ERROR = invocation . verify () ; }
Distance : 8

96
Tree	if ( element != null ) { type = element . getClass () ; } else { type = FeatureSet.ES3 ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = FeatureSet.ES3 ; }
Distance : 6

97
Tree	if ( element != null ) { type = element . getClass () ; } else { CheckLevel.ERROR = iElementPairs . verify () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { CheckLevel.ERROR = iElementPairs . verify () ; }
Distance : 6

98
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = StringUtils.EMPTY ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = StringUtils.EMPTY ; }
Distance : 8

99
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = FeatureSet.ES3 ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = FeatureSet.ES3 ; }
Distance : 9

100
Tree	if ( element != null ) { finderStub.actualToReturn = element . getClass () ; } else { type = ( Object ) size . clone () ; }
Code	if ( element != null ) { finderStub.actualToReturn = element . getClass () ; } else { type = ( Object ) size . clone () ; }
Distance : 9

101
Tree	if ( element != null ) { type = element . getClass () == LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Code	if ( element != null ) { type = element . getClass () == LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Distance : 8

102
Tree	if ( element != null ) { type = element . getClass () ; } else { TracerMode.ALL = invocation . verify () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { TracerMode.ALL = invocation . verify () ; }
Distance : 6

103
Tree	if ( element != null ) { type = val.length ; } else { type = invocation . clone () ; }
Code	if ( element != null ) { type = val.length ; } else { type = invocation . clone () ; }
Distance : 10

104
Tree	if ( element != null ) { type = element . getClass () == LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ; } else { type = array.length ; }
Code	if ( element != null ) { type = element . getClass () == LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ; } else { type = array.length ; }
Distance : 8

105
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { CheckLevel.ERROR = FeatureSet.ES3 . verify () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { CheckLevel.ERROR = FeatureSet.ES3 . verify () ; }
Distance : 10

106
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( iElementPairs ) invocation . clone () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( iElementPairs ) invocation . clone () ; }
Distance : 8

107
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = values.length ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = values.length ; }
Distance : 9

108
Tree	if ( element != null ) { type = RandomNameGenerator.FIRST_CHAR ; } else { type = invocation . clone () ; }
Code	if ( element != null ) { type = RandomNameGenerator.FIRST_CHAR ; } else { type = invocation . clone () ; }
Distance : 10

109
Tree	if ( element != null ) { type = element . getClass () ; } else { type = false ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = false ; }
Distance : 6

110
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( appendable ) size . clone () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( appendable ) size . clone () ; }
Distance : 8

111
Tree	if ( element != null ) { Long.MAX_VALUE = element . getClass () ; } else { type = ( Object ) invocation . clone () ; }
Code	if ( element != null ) { Long.MAX_VALUE = element . getClass () ; } else { type = ( Object ) invocation . clone () ; }
Distance : 9

112
Tree	if ( element != null ) { type = element . getClass () ; } else { type = size * element ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = size * element ; }
Distance : 6

113
Tree	if ( s1 != null ) { type = element . getClass () ; } else { type = false ; }
Code	if ( s1 != null ) { type = element . getClass () ; } else { type = false ; }
Distance : 7

114
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = array.length ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = array.length ; }
Distance : 8

115
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( Boolean ) size . clone () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( Boolean ) size . clone () ; }
Distance : 8

116
Tree	if ( element != null ) { this . type = element . getClass () ; } else { FeatureSet.ES3 = computeCorrelationMatrix () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { FeatureSet.ES3 = computeCorrelationMatrix () ; }
Distance : 8

117
Tree	if ( element != null ) { this . type = element . getClass () ; } else { FeatureSet.ES3 = getName () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { FeatureSet.ES3 = getName () ; }
Distance : 8

118
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { TracerMode.ALL = FeatureSet.ES3 . verify () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { TracerMode.ALL = FeatureSet.ES3 . verify () ; }
Distance : 10

119
Tree	if ( element != null ) { Double.NEGATIVE_INFINITY = false ; } else { type = invocation . getClass () ; }
Code	if ( element != null ) { Double.NEGATIVE_INFINITY = false ; } else { type = invocation . getClass () ; }
Distance : 11

120
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = values.length ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = values.length ; }
Distance : 10

121
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = array.length ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = array.length ; }
Distance : 9

122
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( iElementPairs ) size . clone () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( iElementPairs ) size . clone () ; }
Distance : 8

123
Tree	if ( element != null ) { type = problem.y ; } else { type = invocation . clone () ; }
Code	if ( element != null ) { type = problem.y ; } else { type = invocation . clone () ; }
Distance : 10

124
Tree	if ( element != null ) { this . type = element . getClass () ; } else { AllowedSolutions.ANY_SIDE = invocation . verify () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { AllowedSolutions.ANY_SIDE = invocation . verify () ; }
Distance : 8

125
Tree	if ( element != null ) { type = element . getClass () == LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ; } else { type = invocation . verify () ; }
Code	if ( element != null ) { type = element . getClass () == LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ; } else { type = invocation . verify () ; }
Distance : 8

126
Tree	if ( element != null ) { type = false ; } else { type = invocation . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = invocation . getClass () ; }
Distance : 10

127
Tree	if ( element != null ) { type = element . getClass () == FeatureSet.ES3 ; } else { type = invocation . verify () ; }
Code	if ( element != null ) { type = element . getClass () == FeatureSet.ES3 ; } else { type = invocation . verify () ; }
Distance : 8

128
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { FeatureSet.ES3 = LanguageMode.ECMASCRIPT_2015 . verify () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { FeatureSet.ES3 = LanguageMode.ECMASCRIPT_2015 . verify () ; }
Distance : 10

129
Tree	if ( element != null ) { Long.MAX_VALUE = element . getClass () ; } else { type = size . verify () ; }
Code	if ( element != null ) { Long.MAX_VALUE = element . getClass () ; } else { type = size . verify () ; }
Distance : 7

130
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = FeatureSet.BARE_MINIMUM ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = FeatureSet.BARE_MINIMUM ; }
Distance : 10

131
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = problem.y ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = problem.y ; }
Distance : 10

132
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { FeatureSet.ES3 = invocation . verify () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { FeatureSet.ES3 = invocation . verify () ; }
Distance : 9

133
Tree	if ( element != null ) { type = false ; } else { type = temp . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = temp . getClass () ; }
Distance : 10

134
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { FeatureSet.ES3 = iElementPairs . verify () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { FeatureSet.ES3 = iElementPairs . verify () ; }
Distance : 9

135
Tree	if ( element != null ) { this . type = element . getClass () ; } else { DecompositionType.UNDECOMPOSABLE = computeCorrelationMatrix () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { DecompositionType.UNDECOMPOSABLE = computeCorrelationMatrix () ; }
Distance : 8

136
Tree	if ( element != null ) { type = element . getClass () ; } else { type = ( invocation ) invocation . clone () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = ( invocation ) invocation . clone () ; }
Distance : 8

137
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = FeatureSet.ES3 ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { type = FeatureSet.ES3 ; }
Distance : 10

138
Tree	if ( element != null ) { type = element . getClass () ; } else { type = invocation * element ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = invocation * element ; }
Distance : 6

139
Tree	if ( element != null ) { type = Double . getClass () ; } else { type = false ; }
Code	if ( element != null ) { type = Double . getClass () ; } else { type = false ; }
Distance : 7

140
Tree	if ( element != null ) { this . type = element . getClass () ; } else { TracerMode.ALL = invocation . verify () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { TracerMode.ALL = invocation . verify () ; }
Distance : 8

141
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { FeatureSet.ES3 = FeatureSet.ES3 . verify () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { FeatureSet.ES3 = FeatureSet.ES3 . verify () ; }
Distance : 9

142
Tree	if ( element != null ) { type = element . getClass () ; } else { type = str * element ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = str * element ; }
Distance : 6

143
Tree	if ( element != null ) { Double.NEGATIVE_INFINITY = element . getClass () ; } else { type = invocation . verify () ; }
Code	if ( element != null ) { Double.NEGATIVE_INFINITY = element . getClass () ; } else { type = invocation . verify () ; }
Distance : 7

144
Tree	if ( element != null ) { type = element . getClass () ; } else { CheckLevel.WARNING = invocation . verify () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { CheckLevel.WARNING = invocation . verify () ; }
Distance : 6

145
Tree	if ( element != null ) { Long.MAX_VALUE = false ; } else { type = iElementPairs . getClass () ; }
Code	if ( element != null ) { Long.MAX_VALUE = false ; } else { type = iElementPairs . getClass () ; }
Distance : 11

146
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = this . commonTypes ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = this . commonTypes ; }
Distance : 9

147
Tree	if ( element != null ) { type = element . getClass () ; } else { type = period * element ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = period * element ; }
Distance : 6

148
Tree	if ( element != null ) { type = element . getClass () == FeatureSet.ES3 ; } else { type = size . verify () ; }
Code	if ( element != null ) { type = element . getClass () == FeatureSet.ES3 ; } else { type = size . verify () ; }
Distance : 8

149
Tree	if ( element != null ) { Long.MAX_VALUE = false ; } else { type = size . getClass () ; }
Code	if ( element != null ) { Long.MAX_VALUE = false ; } else { type = size . getClass () ; }
Distance : 11

150
Tree	if ( element != null ) { Long.MAX_VALUE = element . getClass () ; } else { FeatureSet.ES3 = iElementPairs . verify () ; }
Code	if ( element != null ) { Long.MAX_VALUE = element . getClass () ; } else { FeatureSet.ES3 = iElementPairs . verify () ; }
Distance : 7

151
Tree	if ( element != null ) { type = problem.y ; } else { type = invocation . getClass () ; }
Code	if ( element != null ) { type = problem.y ; } else { type = invocation . getClass () ; }
Distance : 10

152
Tree	if ( element != null ) { this . type = element . getClass () ; } else { CheckLevel.ERROR = computeCorrelationMatrix () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { CheckLevel.ERROR = computeCorrelationMatrix () ; }
Distance : 8

153
Tree	if ( element != null ) { type = element . getClass () ; } else { type = invocation * invocation ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = invocation * invocation ; }
Distance : 6

154
Tree	if ( element != null ) { type = element . getClass () == LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ; } else { type = size . verify () ; }
Code	if ( element != null ) { type = element . getClass () == LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ; } else { type = size . verify () ; }
Distance : 8

155
Tree	if ( element != null ) { this . type = element . getClass () ; } else { DecompositionType.UNDECOMPOSABLE = invocation . verify () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { DecompositionType.UNDECOMPOSABLE = invocation . verify () ; }
Distance : 8

156
Tree	if ( element != null ) { type = element . getClass () == IncrementalCheckMode.GENERATE_IJS ; } else { type = invocation . verify () ; }
Code	if ( element != null ) { type = element . getClass () == IncrementalCheckMode.GENERATE_IJS ; } else { type = invocation . verify () ; }
Distance : 8

157
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = this . iChrono ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = this . iChrono ; }
Distance : 9

158
Tree	if ( element != null ) { finderStub.actualToReturn = element . getClass () ; } else { type = size . verify () ; }
Code	if ( element != null ) { finderStub.actualToReturn = element . getClass () ; } else { type = size . verify () ; }
Distance : 7

159
Tree	if ( element != null ) { type = element . getClass () == TracerMode.ALL ; } else { type = StringUtils.EMPTY ; }
Code	if ( element != null ) { type = element . getClass () == TracerMode.ALL ; } else { type = StringUtils.EMPTY ; }
Distance : 8

160
Tree	if ( element != null ) { finderStub.actualToReturn = element . getClass () ; } else { FeatureSet.ES3 = iElementPairs . verify () ; }
Code	if ( element != null ) { finderStub.actualToReturn = element . getClass () ; } else { FeatureSet.ES3 = iElementPairs . verify () ; }
Distance : 7

161
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { DecompositionType.UNDECOMPOSABLE = FeatureSet.ES3 . verify () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { DecompositionType.UNDECOMPOSABLE = FeatureSet.ES3 . verify () ; }
Distance : 9

162
Tree	if ( element != null ) { Double.NEGATIVE_INFINITY = element . getClass () ; } else { type = ( Object ) invocation . clone () ; }
Code	if ( element != null ) { Double.NEGATIVE_INFINITY = element . getClass () ; } else { type = ( Object ) invocation . clone () ; }
Distance : 9

163
Tree	if ( element != null ) { Long.MAX_VALUE = false ; } else { type = invocation . getClass () ; }
Code	if ( element != null ) { Long.MAX_VALUE = false ; } else { type = invocation . getClass () ; }
Distance : 11

164
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { DecompositionType.UNDECOMPOSABLE = FeatureSet.ES3 . verify () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { DecompositionType.UNDECOMPOSABLE = FeatureSet.ES3 . verify () ; }
Distance : 10

165
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { CheckLevel.ERROR = LanguageMode.ECMASCRIPT_2015 . verify () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { CheckLevel.ERROR = LanguageMode.ECMASCRIPT_2015 . verify () ; }
Distance : 10

166
Tree	if ( element != null ) { StringUtils.EMPTY = element . getClass () ; } else { FeatureSet.ES3 = invocation . verify () ; }
Code	if ( element != null ) { StringUtils.EMPTY = element . getClass () ; } else { FeatureSet.ES3 = invocation . verify () ; }
Distance : 7

167
Tree	if ( element != null ) { this . type = element . getClass () ; } else { FeatureSet.ES3 = round () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { FeatureSet.ES3 = round () ; }
Distance : 8

168
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { FeatureSet.ES3 = StringUtils.EMPTY . verify () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { FeatureSet.ES3 = StringUtils.EMPTY . verify () ; }
Distance : 10

169
Tree	if ( element != null ) { type = iField . getClass () ; } else { type = false ; }
Code	if ( element != null ) { type = iField . getClass () ; } else { type = false ; }
Distance : 7

170
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { DecompositionType.UNDECOMPOSABLE = invocation . verify () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { DecompositionType.UNDECOMPOSABLE = invocation . verify () ; }
Distance : 10

171
Tree	if ( element != null ) { type = element . getClass () ; } else { type = iElementPairs * element ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = iElementPairs * element ; }
Distance : 6

172
Tree	if ( element != null ) { Double.NEGATIVE_INFINITY = element . getClass () ; } else { CheckLevel.ERROR = invocation . verify () ; }
Code	if ( element != null ) { Double.NEGATIVE_INFINITY = element . getClass () ; } else { CheckLevel.ERROR = invocation . verify () ; }
Distance : 7

173
Tree	if ( element != null ) { this . type = element . getClass () ; } else { TracerMode.ALL = computeCorrelationMatrix () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { TracerMode.ALL = computeCorrelationMatrix () ; }
Distance : 8

174
Tree	if ( element != null ) { type = element . getClass () == TracerMode.ALL ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Code	if ( element != null ) { type = element . getClass () == TracerMode.ALL ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Distance : 8

175
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = LanguageMode.ECMASCRIPT8 ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = LanguageMode.ECMASCRIPT8 ; }
Distance : 9

176
Tree	if ( element != null ) { type = element . getClass () == FeatureSet.ES3 ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Code	if ( element != null ) { type = element . getClass () == FeatureSet.ES3 ; } else { type = LanguageMode.ECMASCRIPT_2015 ; }
Distance : 8

177
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { FeatureSet.ES3 = SPACE . verify () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { FeatureSet.ES3 = SPACE . verify () ; }
Distance : 10

178
Tree	if ( element != null ) { type = count . getClass () ; } else { type = false ; }
Code	if ( element != null ) { type = count . getClass () ; } else { type = false ; }
Distance : 7

179
Tree	if ( element != null ) { finderStub.actualToReturn = false ; } else { type = invocation . getClass () ; }
Code	if ( element != null ) { finderStub.actualToReturn = false ; } else { type = invocation . getClass () ; }
Distance : 11

180
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = this . temp ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = this . temp ; }
Distance : 9

181
Tree	if ( element != null ) { type = element . getClass () ; } else { type = invocation * msg ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = invocation * msg ; }
Distance : 6

182
Tree	if ( element != null ) { type = element . getClass () == TracerMode.ALL ; } else { type = array.length ; }
Code	if ( element != null ) { type = element . getClass () == TracerMode.ALL ; } else { type = array.length ; }
Distance : 8

183
Tree	if ( element != null ) { type = element . getClass () == FeatureSet.ES3 ; } else { type = array.length ; }
Code	if ( element != null ) { type = element . getClass () == FeatureSet.ES3 ; } else { type = array.length ; }
Distance : 8

184
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = this . period ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { type = this . period ; }
Distance : 9

185
Tree	if ( element != null ) { type = ( element ) element . getClass () ; } else { TypeInferenceMode.DISABLED = FeatureSet.ES3 . verify () ; }
Code	if ( element != null ) { type = ( element ) element . getClass () ; } else { TypeInferenceMode.DISABLED = FeatureSet.ES3 . verify () ; }
Distance : 9

186
Tree	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { TracerMode.ALL = LanguageMode.ECMASCRIPT_2015 . verify () ; }
Code	if ( element != null ) { type = ( int [] ) element . getClass () ; } else { TracerMode.ALL = LanguageMode.ECMASCRIPT_2015 . verify () ; }
Distance : 10

187
Tree	if ( element != null ) { Long.MAX_VALUE = element . getClass () ; } else { type = ( Object ) size . clone () ; }
Code	if ( element != null ) { Long.MAX_VALUE = element . getClass () ; } else { type = ( Object ) size . clone () ; }
Distance : 9

188
Tree	if ( element != null ) { type = element . getClass () == CheckLevel.ERROR ; } else { type = invocation . verify () ; }
Code	if ( element != null ) { type = element . getClass () == CheckLevel.ERROR ; } else { type = invocation . verify () ; }
Distance : 8

189
Tree	if ( element != null ) { Double.NEGATIVE_INFINITY = element . getClass () ; } else { FeatureSet.ES3 = invocation ( invocation . class , CheckLevel.WARNING ) ; }
Code	if ( element != null ) { Double.NEGATIVE_INFINITY = element . getClass () ; } else { FeatureSet.ES3 = invocation ( invocation . class , CheckLevel.WARNING ) ; }
Distance : 9

190
Tree	if ( element != null ) { Double.NEGATIVE_INFINITY = element . getClass () ; } else { FeatureSet.ES3 = invocation ( invocation . class , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ; }
Code	if ( element != null ) { Double.NEGATIVE_INFINITY = element . getClass () ; } else { FeatureSet.ES3 = invocation ( invocation . class , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ; }
Distance : 9

191
Tree	if ( element != null ) { Double.NEGATIVE_INFINITY = element . getClass () ; } else { FeatureSet.ES3 = invocation . verify () ; }
Code	if ( element != null ) { Double.NEGATIVE_INFINITY = element . getClass () ; } else { FeatureSet.ES3 = invocation . verify () ; }
Distance : 7

192
Tree	if ( element != null ) { type = StringUtils.EMPTY ; } else { type = invocation . clone () ; }
Code	if ( element != null ) { type = StringUtils.EMPTY ; } else { type = invocation . clone () ; }
Distance : 10

193
Tree	if ( element != null ) { this . type = element . getClass () ; } else { FeatureSet.ES3 = SPACE . verify () ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { FeatureSet.ES3 = SPACE . verify () ; }
Distance : 8

194
Tree	if ( element != null ) { Long.MAX_VALUE = element . getClass () ; } else { FeatureSet.ES3 = invocation ( invocation . class , CheckLevel.WARNING ) ; }
Code	if ( element != null ) { Long.MAX_VALUE = element . getClass () ; } else { FeatureSet.ES3 = invocation ( invocation . class , CheckLevel.WARNING ) ; }
Distance : 9

195
Tree	if ( element != null ) { finderStub.actualToReturn = element . getClass () ; } else { FeatureSet.ES3 = invocation ( invocation . class , CheckLevel.WARNING ) ; }
Code	if ( element != null ) { finderStub.actualToReturn = element . getClass () ; } else { FeatureSet.ES3 = invocation ( invocation . class , CheckLevel.WARNING ) ; }
Distance : 9

196
Tree	if ( element != null ) { Long.MAX_VALUE = element . getClass () ; } else { FeatureSet.ES3 = invocation ( invocation . class , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ; }
Code	if ( element != null ) { Long.MAX_VALUE = element . getClass () ; } else { FeatureSet.ES3 = invocation ( invocation . class , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ; }
Distance : 9

197
Tree	if ( element != null ) { Double.NEGATIVE_INFINITY = element . getClass () ; } else { FeatureSet.ES3 = iElementPairs ( invocation . class , CheckLevel.WARNING ) ; }
Code	if ( element != null ) { Double.NEGATIVE_INFINITY = element . getClass () ; } else { FeatureSet.ES3 = iElementPairs ( invocation . class , CheckLevel.WARNING ) ; }
Distance : 9

198
Tree	if ( element != null ) { finderStub.actualToReturn = element . getClass () ; } else { FeatureSet.ES3 = invocation ( invocation . class , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ; }
Code	if ( element != null ) { finderStub.actualToReturn = element . getClass () ; } else { FeatureSet.ES3 = invocation ( invocation . class , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ; }
Distance : 9

199
Tree	if ( element != null ) { Double.NEGATIVE_INFINITY = element . getClass () ; } else { FeatureSet.ES3 = invocation ( invocation . class , CheckLevel.ERROR ) ; }
Code	if ( element != null ) { Double.NEGATIVE_INFINITY = element . getClass () ; } else { FeatureSet.ES3 = invocation ( invocation . class , CheckLevel.ERROR ) ; }
Distance : 9

========================================================================


========================================================================
Example Number: 44
Parent Code is: 
return m . containsKey ( value ) ;
-------------------------------------------------------------------------------
Child code is: 
return m != null && m . containsKey ( value ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=m}) (235{val=.}) (802{val=containsKey}) (214{val=(}) (800{val=value}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (27 (27 (800{val=m}) (242{val=!=}) (500{val=null})) (249{val=&&}) (32 (800{val=m}) (235{val=.}) (802{val=containsKey}) (214{val=(}) (800{val=value}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/34/parent/src_main_java_org_apache_commons_lang3_builder_ToStringStyle.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return this . m . getCtorPropDeclaredType ( value ) ;
Code	return this . m . getCtorPropDeclaredType ( value ) ;
Distance : 5

1
Tree	return m . containsKey ( value , new ArrayRealVector ( value ) ) ;
Code	return m . containsKey ( value , new ArrayRealVector ( value ) ) ;
Distance : 8

2
Tree	return m . getMessage ( STRING_CONSTANT , m ) ;
Code	return m . getMessage ( STRING_CONSTANT , m ) ;
Distance : 8

3
Tree	return m + this . m . contains ( CHAR_CONS , CHAR_CONS ) ;
Code	return m + this . m . contains ( CHAR_CONS , CHAR_CONS ) ;
Distance : 7

4
Tree	return m . isFrozen ( value ) ;
Code	return m . isFrozen ( value ) ;
Distance : 5

5
Tree	return this . rawType ;
Code	return this . rawType ;
Distance : 9

6
Tree	return m . containsKey ( value , writer ) ;
Code	return m . containsKey ( value , writer ) ;
Distance : 6

7
Tree	return this . m . containsKey () . getEnumeratedTypeOfEnumObject ( value ) ;
Code	return this . m . containsKey () . getEnumeratedTypeOfEnumObject ( value ) ;
Distance : 7

8
Tree	return m . newName ( value ) ;
Code	return m . newName ( value ) ;
Distance : 5

9
Tree	return m . report ( value ) - NUMBER_CONSTANT ;
Code	return m . report ( value ) - NUMBER_CONSTANT ;
Distance : 7

10
Tree	return m . containsKey ( NUMBER_CONSTANT , expected ) ;
Code	return m . containsKey ( NUMBER_CONSTANT , expected ) ;
Distance : 7

11
Tree	return isHoistScopeRootNode ( value , n , false ) ;
Code	return isHoistScopeRootNode ( value , n , false ) ;
Distance : 9

12
Tree	return m . getEnumeratedTypeOfEnumObject ( value ) - NUMBER_CONSTANT ;
Code	return m . getEnumeratedTypeOfEnumObject ( value ) - NUMBER_CONSTANT ;
Distance : 7

13
Tree	return getCause ( value ) ;
Code	return getCause ( value ) ;
Distance : 7

14
Tree	return m . hasChildren ( STRING_CONSTANT , m ) ;
Code	return m . hasChildren ( STRING_CONSTANT , m ) ;
Distance : 8

15
Tree	return m . stub ( value ) ;
Code	return m . stub ( value ) ;
Distance : 5

16
Tree	return m + this . m . containsKey ( CHAR_CONS , CHAR_CONS ) ;
Code	return m + this . m . containsKey ( CHAR_CONS , CHAR_CONS ) ;
Distance : 6

17
Tree	return m . getMessage ( NUMBER_CONSTANT , value ) ;
Code	return m . getMessage ( NUMBER_CONSTANT , value ) ;
Distance : 7

18
Tree	return m . containsKey () . getToken ( value ) ;
Code	return m . containsKey () . getToken ( value ) ;
Distance : 5

19
Tree	return report ( value ) ;
Code	return report ( value ) ;
Distance : 7

20
Tree	return new Throwable ( value ) ;
Code	return new Throwable ( value ) ;
Distance : 7

21
Tree	return warning ( value ) ;
Code	return warning ( value ) ;
Distance : 7

22
Tree	return new Interval ( value , NUMBER_CONSTANT ) ;
Code	return new Interval ( value , NUMBER_CONSTANT ) ;
Distance : 9

23
Tree	return m . hasChildren ( value , value ) ;
Code	return m . hasChildren ( value , value ) ;
Distance : 7

24
Tree	return m + this . m . get ( CHAR_CONS , CHAR_CONS ) ;
Code	return m + this . m . get ( CHAR_CONS , CHAR_CONS ) ;
Distance : 7

25
Tree	return new Interval ( value , n ) ;
Code	return new Interval ( value , n ) ;
Distance : 9

26
Tree	return m . containsKey ( value . getInput ( value ) ) ;
Code	return m . containsKey ( value . getInput ( value ) ) ;
Distance : 6

27
Tree	return m . containsKey ( STRING_CONSTANT , m ) ;
Code	return m . containsKey ( STRING_CONSTANT , m ) ;
Distance : 7

28
Tree	return new LUDecompositionImpl ( value , false ) ;
Code	return new LUDecompositionImpl ( value , false ) ;
Distance : 9

29
Tree	return new MaxCountExceededException ( value , false ) ;
Code	return new MaxCountExceededException ( value , false ) ;
Distance : 9

30
Tree	return m . containsKey ( value ) . containsKey ( value ) ;
Code	return m . containsKey ( value ) . containsKey ( value ) ;
Distance : 5

31
Tree	return m . containsKey ( value , n ) ;
Code	return m . containsKey ( value , n ) ;
Distance : 6

32
Tree	return new ArrayIndexOutOfBoundsException ( value , false ) ;
Code	return new ArrayIndexOutOfBoundsException ( value , false ) ;
Distance : 9

33
Tree	return m ;
Code	return m ;
Distance : 9

34
Tree	return m . containsKey ( value ) - NUMBER_CONSTANT ;
Code	return m . containsKey ( value ) - NUMBER_CONSTANT ;
Distance : 6

35
Tree	return new MaxCountExceededException ( value , n ) ;
Code	return new MaxCountExceededException ( value , n ) ;
Distance : 9

36
Tree	return m . containsKey () . containsKey ( value ) ;
Code	return m . containsKey () . containsKey ( value ) ;
Distance : 4

37
Tree	return m . hasChildren () . containsKey ( value ) ;
Code	return m . hasChildren () . containsKey ( value ) ;
Distance : 4

38
Tree	return m . containsKey ( value , new Returns ( value ) ) ;
Code	return m . containsKey ( value , new Returns ( value ) ) ;
Distance : 8

39
Tree	return m . containsKey ( value , false ) ;
Code	return m . containsKey ( value , false ) ;
Distance : 6

40
Tree	return m . containsKey ( value ) ;
Code	return m . containsKey ( value ) ;
Distance : 4

41
Tree	return this . m . containsKey () . getToken ( value ) ;
Code	return this . m . containsKey () . getToken ( value ) ;
Distance : 7

42
Tree	return this . rawType . containsKey ( value ) ;
Code	return this . rawType . containsKey ( value ) ;
Distance : 5

43
Tree	return m . newName ( value ) ;
Code	return m . newName ( value ) ;
Distance : 5

44
Tree	return m . hasChildren ( value ) ;
Code	return m . hasChildren ( value ) ;
Distance : 5

45
Tree	return new LUDecompositionImpl ( value ) ;
Code	return new LUDecompositionImpl ( value ) ;
Distance : 7

46
Tree	return m . contains ( value ) ;
Code	return m . contains ( value ) ;
Distance : 5

47
Tree	return isHoistScopeRootNode () . containsKey ( value ) ;
Code	return isHoistScopeRootNode () . containsKey ( value ) ;
Distance : 5

48
Tree	return new Interval ( value , false ) ;
Code	return new Interval ( value , false ) ;
Distance : 9

49
Tree	return m . stub ( value ) - NUMBER_CONSTANT ;
Code	return m . stub ( value ) - NUMBER_CONSTANT ;
Distance : 7

50
Tree	return m . containsKey () . toFeatureSet ( value ) ;
Code	return m . containsKey () . toFeatureSet ( value ) ;
Distance : 5

51
Tree	return containsKey () . getEnumeratedTypeOfEnumObject ( value ) ;
Code	return containsKey () . getEnumeratedTypeOfEnumObject ( value ) ;
Distance : 6

52
Tree	return containsKey () . has ( value ) ;
Code	return containsKey () . has ( value ) ;
Distance : 6

53
Tree	return new ArrayIndexOutOfBoundsException ( value ) ;
Code	return new ArrayIndexOutOfBoundsException ( value ) ;
Distance : 7

54
Tree	return stub ( value , n , false ) ;
Code	return stub ( value , n , false ) ;
Distance : 9

55
Tree	return m . stub ( value ) . containsKey ( value ) ;
Code	return m . stub ( value ) . containsKey ( value ) ;
Distance : 5

56
Tree	return m . hasChildren ( NUMBER_CONSTANT , value ) ;
Code	return m . hasChildren ( NUMBER_CONSTANT , value ) ;
Distance : 7

57
Tree	return m . getMessage ( value . containsKey ( value ) ) ;
Code	return m . getMessage ( value . containsKey ( value ) ) ;
Distance : 5

58
Tree	return this . m . contains ( value ) ;
Code	return this . m . contains ( value ) ;
Distance : 5

59
Tree	return m . ExceptionUtils ( value ) ;
Code	return m . ExceptionUtils ( value ) ;
Distance : 5

60
Tree	return m . containsKey () . has ( value ) ;
Code	return m . containsKey () . has ( value ) ;
Distance : 5

61
Tree	return NUMBER_CONSTANT / m ;
Code	return NUMBER_CONSTANT / m ;
Distance : 9

62
Tree	return this . m . get ( value ) ;
Code	return this . m . get ( value ) ;
Distance : 5

63
Tree	return warning ( value , n , false ) ;
Code	return warning ( value , n , false ) ;
Distance : 9

64
Tree	return m . getEnumeratedTypeOfEnumObject ( value , false ) ;
Code	return m . getEnumeratedTypeOfEnumObject ( value , false ) ;
Distance : 7

65
Tree	return newName ( value ) ;
Code	return newName ( value ) ;
Distance : 7

66
Tree	return m . containsKey ( value , values ) ;
Code	return m . containsKey ( value , values ) ;
Distance : 6

67
Tree	return m . stub ( STRING_CONSTANT , m ) ;
Code	return m . stub ( STRING_CONSTANT , m ) ;
Distance : 8

68
Tree	return m . hasChildren ( value . containsKey ( value ) ) ;
Code	return m . hasChildren ( value . containsKey ( value ) ) ;
Distance : 5

69
Tree	return new Interval ( value ) ;
Code	return new Interval ( value ) ;
Distance : 7

70
Tree	return new Throwable ( value , n ) ;
Code	return new Throwable ( value , n ) ;
Distance : 9

71
Tree	return m . contains ( value , false ) ;
Code	return m . contains ( value , false ) ;
Distance : 7

72
Tree	return new MathIllegalStateException ( value ) ;
Code	return new MathIllegalStateException ( value ) ;
Distance : 7

73
Tree	return newName ( value , n , false ) ;
Code	return newName ( value , n , false ) ;
Distance : 9

74
Tree	return m . hasChildren ( value ) . containsKey ( value ) ;
Code	return m . hasChildren ( value ) . containsKey ( value ) ;
Distance : 5

75
Tree	return this . m . isFrozen ( value ) ;
Code	return this . m . isFrozen ( value ) ;
Distance : 5

76
Tree	return m . containsKey ( value , new MathIllegalArgumentException ( value ) ) ;
Code	return m . containsKey ( value , new MathIllegalArgumentException ( value ) ) ;
Distance : 8

77
Tree	return isHoistScopeRootNode ( value ) ;
Code	return isHoistScopeRootNode ( value ) ;
Distance : 7

78
Tree	return m . getMessage ( value ) - NUMBER_CONSTANT ;
Code	return m . getMessage ( value ) - NUMBER_CONSTANT ;
Distance : 7

79
Tree	return ExceptionUtils ( value ) ;
Code	return ExceptionUtils ( value ) ;
Distance : 7

80
Tree	return stub () . containsKey ( value ) ;
Code	return stub () . containsKey ( value ) ;
Distance : 5

81
Tree	return this . m . containsKey () . get ( value ) ;
Code	return this . m . containsKey () . get ( value ) ;
Distance : 7

82
Tree	return m . newName ( STRING_CONSTANT , m ) ;
Code	return m . newName ( STRING_CONSTANT , m ) ;
Distance : 8

83
Tree	return containsKey ( value , n , false ) ;
Code	return containsKey ( value , n , false ) ;
Distance : 9

84
Tree	return new MathArithmeticException ( value , false ) ;
Code	return new MathArithmeticException ( value , false ) ;
Distance : 9

85
Tree	return m . hasChildren ( value , n ) ;
Code	return m . hasChildren ( value , n ) ;
Distance : 7

86
Tree	return m . stub ( value , false ) ;
Code	return m . stub ( value , false ) ;
Distance : 7

87
Tree	return newName () . containsKey ( value ) ;
Code	return newName () . containsKey ( value ) ;
Distance : 5

88
Tree	return m . containsKey ( value , INTEGER_ZERO ) ;
Code	return m . containsKey ( value , INTEGER_ZERO ) ;
Distance : 6

89
Tree	return m . containsKey ( value , value ) ;
Code	return m . containsKey ( value , value ) ;
Distance : 6

90
Tree	return m . containsKey ( value . hasChildren ( value ) ) ;
Code	return m . containsKey ( value . hasChildren ( value ) ) ;
Distance : 6

91
Tree	return m . getMessage ( value , false ) ;
Code	return m . getMessage ( value , false ) ;
Distance : 7

92
Tree	return m . containsKey ( value , new Type ( value ) ) ;
Code	return m . containsKey ( value , new Type ( value ) ) ;
Distance : 8

93
Tree	return containsKey () . containsKey ( value ) ;
Code	return containsKey () . containsKey ( value ) ;
Distance : 5

94
Tree	return m + this . m . stub ( CHAR_CONS , CHAR_CONS ) ;
Code	return m + this . m . stub ( CHAR_CONS , CHAR_CONS ) ;
Distance : 7

95
Tree	return this . m . containsKey () . toFeatureSet ( value ) ;
Code	return this . m . containsKey () . toFeatureSet ( value ) ;
Distance : 7

96
Tree	return new MathIllegalStateException ( value , NUMBER_CONSTANT ) ;
Code	return new MathIllegalStateException ( value , NUMBER_CONSTANT ) ;
Distance : 9

97
Tree	return this . m . containsKey () . has ( value ) ;
Code	return this . m . containsKey () . has ( value ) ;
Distance : 7

98
Tree	return m . hasChildren ( value ) - NUMBER_CONSTANT ;
Code	return m . hasChildren ( value ) - NUMBER_CONSTANT ;
Distance : 7

99
Tree	return containsKey () . contains ( value ) ;
Code	return containsKey () . contains ( value ) ;
Distance : 6

100
Tree	return new MathIllegalStateException ( value , n ) ;
Code	return new MathIllegalStateException ( value , n ) ;
Distance : 9

101
Tree	return this . m . has ( value ) ;
Code	return this . m . has ( value ) ;
Distance : 5

102
Tree	return m . stub ( value ) ;
Code	return m . stub ( value ) ;
Distance : 5

103
Tree	return new LUDecompositionImpl ( value , NUMBER_CONSTANT ) ;
Code	return new LUDecompositionImpl ( value , NUMBER_CONSTANT ) ;
Distance : 9

104
Tree	return m . type ( value ) ;
Code	return m . type ( value ) ;
Distance : 5

105
Tree	return new Throwable ( value , false ) ;
Code	return new Throwable ( value , false ) ;
Distance : 9

106
Tree	return m . hasChildren ( value ) . has ( value ) ;
Code	return m . hasChildren ( value ) . has ( value ) ;
Distance : 6

107
Tree	return m . containsKey ( value , new DummyLocalizable ( value ) ) ;
Code	return m . containsKey ( value , new DummyLocalizable ( value ) ) ;
Distance : 8

108
Tree	return m . newName ( value ) - NUMBER_CONSTANT ;
Code	return m . newName ( value ) - NUMBER_CONSTANT ;
Distance : 7

109
Tree	return m . containsKey ( NUMBER_CONSTANT , value ) ;
Code	return m . containsKey ( NUMBER_CONSTANT , value ) ;
Distance : 6

110
Tree	return m . stub ( NUMBER_CONSTANT , value ) ;
Code	return m . stub ( NUMBER_CONSTANT , value ) ;
Distance : 7

111
Tree	return this . m . containsKey ( value ) ;
Code	return this . m . containsKey ( value ) ;
Distance : 4

112
Tree	return new MathIllegalStateException ( value , false ) ;
Code	return new MathIllegalStateException ( value , false ) ;
Distance : 9

113
Tree	return m . report ( value ) ;
Code	return m . report ( value ) ;
Distance : 5

114
Tree	return m . getEnumeratedTypeOfEnumObject ( value ) ;
Code	return m . getEnumeratedTypeOfEnumObject ( value ) ;
Distance : 5

115
Tree	return m . hasChildren ( value , false ) ;
Code	return m . hasChildren ( value , false ) ;
Distance : 7

116
Tree	return new Throwable ( value , NUMBER_CONSTANT ) ;
Code	return new Throwable ( value , NUMBER_CONSTANT ) ;
Distance : 9

117
Tree	return m . containsKey ( value . getToken ( value ) ) ;
Code	return m . containsKey ( value . getToken ( value ) ) ;
Distance : 6

118
Tree	return new IllegalStateException ( value , NUMBER_CONSTANT ) ;
Code	return new IllegalStateException ( value , NUMBER_CONSTANT ) ;
Distance : 9

119
Tree	return warning () . containsKey ( value ) ;
Code	return warning () . containsKey ( value ) ;
Distance : 5

120
Tree	return this . m . containsKey () . containsKey ( value ) ;
Code	return this . m . containsKey () . containsKey ( value ) ;
Distance : 6

121
Tree	return m . containsKey () . contains ( value ) ;
Code	return m . containsKey () . contains ( value ) ;
Distance : 5

122
Tree	return m . expr ( value ) ;
Code	return m . expr ( value ) ;
Distance : 5

123
Tree	return m . containsKey () . hasChildren ( value ) ;
Code	return m . containsKey () . hasChildren ( value ) ;
Distance : 5

124
Tree	return m . newName ( value . containsKey ( value ) ) ;
Code	return m . newName ( value . containsKey ( value ) ) ;
Distance : 5

125
Tree	return m . leftType ( value ) ;
Code	return m . leftType ( value ) ;
Distance : 5

126
Tree	return new IllegalStateException ( value ) ;
Code	return new IllegalStateException ( value ) ;
Distance : 7

127
Tree	return m . containsKey ( NUMBER_CONSTANT , n ) ;
Code	return m . containsKey ( NUMBER_CONSTANT , n ) ;
Distance : 7

128
Tree	return this . m ;
Code	return this . m ;
Distance : 9

129
Tree	return this . m . getInstanceType ( value ) ;
Code	return this . m . getInstanceType ( value ) ;
Distance : 5

130
Tree	return m . stub ( value , n ) ;
Code	return m . stub ( value , n ) ;
Distance : 7

131
Tree	return m . report ( value ) ;
Code	return m . report ( value ) ;
Distance : 5

132
Tree	return m . getMessage ( value ) ;
Code	return m . getMessage ( value ) ;
Distance : 5

133
Tree	return containsKey ( value ) ;
Code	return containsKey ( value ) ;
Distance : 6

134
Tree	return new MaxCountExceededException ( value , NUMBER_CONSTANT ) ;
Code	return new MaxCountExceededException ( value , NUMBER_CONSTANT ) ;
Distance : 9

135
Tree	return m . hasChildren ( NUMBER_CONSTANT , n ) ;
Code	return m . hasChildren ( NUMBER_CONSTANT , n ) ;
Distance : 8

136
Tree	return m . contains ( STRING_CONSTANT , m ) ;
Code	return m . contains ( STRING_CONSTANT , m ) ;
Distance : 8

137
Tree	return containsKey ( value , value , false ) ;
Code	return containsKey ( value , value , false ) ;
Distance : 9

138
Tree	return m . newName ( NUMBER_CONSTANT , value ) ;
Code	return m . newName ( NUMBER_CONSTANT , value ) ;
Distance : 7

139
Tree	return m . report ( value , false ) ;
Code	return m . report ( value , false ) ;
Distance : 7

140
Tree	return new MathArithmeticException ( value , NUMBER_CONSTANT ) ;
Code	return new MathArithmeticException ( value , NUMBER_CONSTANT ) ;
Distance : 9

141
Tree	return m . containsKey ( value , new SinFunction ( value ) ) ;
Code	return m . containsKey ( value , new SinFunction ( value ) ) ;
Distance : 8

142
Tree	return m . containsKey ( value ) . has ( value ) ;
Code	return m . containsKey ( value ) . has ( value ) ;
Distance : 6

143
Tree	return singularValues ;
Code	return singularValues ;
Distance : 10

144
Tree	return m . containsKey () . getEnumeratedTypeOfEnumObject ( value ) ;
Code	return m . containsKey () . getEnumeratedTypeOfEnumObject ( value ) ;
Distance : 5

145
Tree	return m + this . m . getInstanceType ( CHAR_CONS , CHAR_CONS ) ;
Code	return m + this . m . getInstanceType ( CHAR_CONS , CHAR_CONS ) ;
Distance : 7

146
Tree	return new IllegalStateException ( value , false ) ;
Code	return new IllegalStateException ( value , false ) ;
Distance : 9

147
Tree	return m + NUMBER_CONSTANT ;
Code	return m + NUMBER_CONSTANT ;
Distance : 9

148
Tree	return m + this . rawType . containsKey ( CHAR_CONS , CHAR_CONS ) ;
Code	return m + this . rawType . containsKey ( CHAR_CONS , CHAR_CONS ) ;
Distance : 7

149
Tree	return new LUDecompositionImpl ( value , n ) ;
Code	return new LUDecompositionImpl ( value , n ) ;
Distance : 9

150
Tree	return m . report ( STRING_CONSTANT , m ) ;
Code	return m . report ( STRING_CONSTANT , m ) ;
Distance : 8

151
Tree	return m . containsKey ( value . containsKey ( value ) ) ;
Code	return m . containsKey ( value . containsKey ( value ) ) ;
Distance : 5

152
Tree	return new ArrayIndexOutOfBoundsException ( value , NUMBER_CONSTANT ) ;
Code	return new ArrayIndexOutOfBoundsException ( value , NUMBER_CONSTANT ) ;
Distance : 9

153
Tree	return m + this . m . getEnumeratedTypeOfEnumObject ( CHAR_CONS , CHAR_CONS ) ;
Code	return m + this . m . getEnumeratedTypeOfEnumObject ( CHAR_CONS , CHAR_CONS ) ;
Distance : 7

154
Tree	return this . solver ;
Code	return this . solver ;
Distance : 9

155
Tree	return m . stub ( value . containsKey ( value ) ) ;
Code	return m . stub ( value . containsKey ( value ) ) ;
Distance : 5

156
Tree	return new MaxCountExceededException ( value ) ;
Code	return new MaxCountExceededException ( value ) ;
Distance : 7

157
Tree	return this . jacobian ;
Code	return this . jacobian ;
Distance : 9

158
Tree	return NUMBER_CONSTANT / singularValues ;
Code	return NUMBER_CONSTANT / singularValues ;
Distance : 10

159
Tree	return this . ns ;
Code	return this . ns ;
Distance : 9

160
Tree	return report ( value , n , false ) ;
Code	return report ( value , n , false ) ;
Distance : 9

161
Tree	return getCause ( value , n , false ) ;
Code	return getCause ( value , n , false ) ;
Distance : 9

162
Tree	return NUMBER_CONSTANT / rawType ;
Code	return NUMBER_CONSTANT / rawType ;
Distance : 10

163
Tree	return m . getEnumeratedTypeOfEnumObject ( STRING_CONSTANT , m ) ;
Code	return m . getEnumeratedTypeOfEnumObject ( STRING_CONSTANT , m ) ;
Distance : 8

164
Tree	return stub ( value ) ;
Code	return stub ( value ) ;
Distance : 7

165
Tree	return new IllegalStateException ( value , n ) ;
Code	return new IllegalStateException ( value , n ) ;
Distance : 9

166
Tree	return m . contains ( value ) - NUMBER_CONSTANT ;
Code	return m . contains ( value ) - NUMBER_CONSTANT ;
Distance : 7

167
Tree	return this . scopeCreator ;
Code	return this . scopeCreator ;
Distance : 9

168
Tree	return this . DurationType ;
Code	return this . DurationType ;
Distance : 9

169
Tree	return this . m . containsKey () . contains ( value ) ;
Code	return this . m . containsKey () . contains ( value ) ;
Distance : 7

170
Tree	return nameNode ;
Code	return nameNode ;
Distance : 10

171
Tree	return m . containsKey ( value ) . contains ( value ) ;
Code	return m . containsKey ( value ) . contains ( value ) ;
Distance : 6

172
Tree	return m . newName ( value , false ) ;
Code	return m . newName ( value , false ) ;
Distance : 7

173
Tree	return m . containsKey ( value ) . getNorm ( value ) ;
Code	return m . containsKey ( value ) . getNorm ( value ) ;
Distance : 6

174
Tree	return m . containsKey ( value , new Add ( value ) ) ;
Code	return m . containsKey ( value , new Add ( value ) ) ;
Distance : 8

175
Tree	return new MathArithmeticException ( value ) ;
Code	return new MathArithmeticException ( value ) ;
Distance : 7

176
Tree	return m . containsKey ( value ) . getEnumeratedTypeOfEnumObject ( value ) ;
Code	return m . containsKey ( value ) . getEnumeratedTypeOfEnumObject ( value ) ;
Distance : 6

177
Tree	return new ArrayIndexOutOfBoundsException ( value , n ) ;
Code	return new ArrayIndexOutOfBoundsException ( value , n ) ;
Distance : 9

178
Tree	return nameNode + NUMBER_CONSTANT ;
Code	return nameNode + NUMBER_CONSTANT ;
Distance : 10

179
Tree	return m . containsKey ( value , new HashSet ( value ) ) ;
Code	return m . containsKey ( value , new HashSet ( value ) ) ;
Distance : 8

180
Tree	return this . m . containsKey () . getName ( value ) ;
Code	return this . m . containsKey () . getName ( value ) ;
Distance : 7

181
Tree	return NUMBER_CONSTANT / DurationType ;
Code	return NUMBER_CONSTANT / DurationType ;
Distance : 10

182
Tree	return NUMBER_CONSTANT / nameNode ;
Code	return NUMBER_CONSTANT / nameNode ;
Distance : 10

183
Tree	return new Interval ( value , value ) ;
Code	return new Interval ( value , value ) ;
Distance : 8

184
Tree	return m + this . m . getMessage ( CHAR_CONS , CHAR_CONS ) ;
Code	return m + this . m . getMessage ( CHAR_CONS , CHAR_CONS ) ;
Distance : 7

185
Tree	return singularValues + NUMBER_CONSTANT ;
Code	return singularValues + NUMBER_CONSTANT ;
Distance : 10

186
Tree	return NUMBER_CONSTANT / cond ;
Code	return NUMBER_CONSTANT / cond ;
Distance : 10

187
Tree	return ex ;
Code	return ex ;
Distance : 10

188
Tree	return t + NUMBER_CONSTANT ;
Code	return t + NUMBER_CONSTANT ;
Distance : 10

189
Tree	return block ;
Code	return block ;
Distance : 10

190
Tree	return cond + NUMBER_CONSTANT ;
Code	return cond + NUMBER_CONSTANT ;
Distance : 10

191
Tree	return t ;
Code	return t ;
Distance : 10

192
Tree	return block + NUMBER_CONSTANT ;
Code	return block + NUMBER_CONSTANT ;
Distance : 10

193
Tree	return DatasetUtils + NUMBER_CONSTANT ;
Code	return DatasetUtils + NUMBER_CONSTANT ;
Distance : 10

194
Tree	return ex + NUMBER_CONSTANT ;
Code	return ex + NUMBER_CONSTANT ;
Distance : 10

195
Tree	return this . singularValues ;
Code	return this . singularValues ;
Distance : 9

196
Tree	return cond ;
Code	return cond ;
Distance : 10

197
Tree	return NUMBER_CONSTANT / block ;
Code	return NUMBER_CONSTANT / block ;
Distance : 10

198
Tree	return DatasetUtils ;
Code	return DatasetUtils ;
Distance : 10

199
Tree	return NUMBER_CONSTANT / ex ;
Code	return NUMBER_CONSTANT / ex ;
Distance : 10

========================================================================


========================================================================
Example Number: 45
Parent Code is: 
CharSequence cs
-------------------------------------------------------------------------------
Child code is: 
String cs
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (44 (43 (801{val=CharSequence})) (800{val=cs})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (44 (43 (801{val=String})) (800{val=cs})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/30/parent/src_main_java_org_apache_commons_lang3_StringUtils.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 192
Wrong
========================================================================
False

0
Tree	final CharSequence cs
Code	final CharSequence cs
Distance : 2

1
Tree	StrBuilder cs
Code	StrBuilder cs
Distance : 1

2
Tree	MutableLong cs
Code	MutableLong cs
Distance : 1

3
Tree	cs < Coordinates3D > cs
Code	cs < Coordinates3D > cs
Distance : 4

4
Tree	Character cs
Code	Character cs
Distance : 1

5
Tree	Cartesian3D cs
Code	Cartesian3D cs
Distance : 1

6
Tree	Localizable cs
Code	Localizable cs
Distance : 1

7
Tree	CharSequence cs
Code	CharSequence cs
Distance : 1

8
Tree	Cartesian3D <> cs
Code	Cartesian3D <> cs
Distance : 2

9
Tree	columns
Code	columns
Distance : 2

10
Tree	rows
Code	rows
Distance : 2

11
Tree	assertContains
Code	assertContains
Distance : 2

12
Tree	byte
Code	byte
Distance : 2

13
Tree	Coordinates3D <> cs
Code	Coordinates3D <> cs
Distance : 2

14
Tree	CharSequence <> columns
Code	CharSequence <> columns
Distance : 3

15
Tree	CharSequence < Coordinates3D , Object > cs
Code	CharSequence < Coordinates3D , Object > cs
Distance : 6

16
Tree	@ CharSequence CharSequence cs
Code	@ CharSequence CharSequence cs
Distance : 3

17
Tree	final char cs
Code	final char cs
Distance : 2

18
Tree	long cs
Code	long cs
Distance : 1

19
Tree	Coordinates3D [] cs
Code	Coordinates3D [] cs
Distance : 2

20
Tree	final Locale.ENGLISH cs
Code	final Locale.ENGLISH cs
Distance : 2

21
Tree	CharSequence < Coordinates3D , columns > cs
Code	CharSequence < Coordinates3D , columns > cs
Distance : 6

22
Tree	final int cs
Code	final int cs
Distance : 2

23
Tree	cs < sb > cs
Code	cs < sb > cs
Distance : 4

24
Tree	boolean cs
Code	boolean cs
Distance : 1

25
Tree	final CharSequence . . . cs
Code	final CharSequence . . . cs
Distance : 5

26
Tree	columns cs
Code	columns cs
Distance : 1

27
Tree	cs < Object , cs > cs
Code	cs < Object , cs > cs
Distance : 6

28
Tree	cs < Coordinates3D , columns > cs
Code	cs < Coordinates3D , columns > cs
Distance : 6

29
Tree	byte cs
Code	byte cs
Distance : 1

30
Tree	cs < CharSequence > cs
Code	cs < CharSequence > cs
Distance : 4

31
Tree	CharSequence [] cs
Code	CharSequence [] cs
Distance : 2

32
Tree	cs . . . cs
Code	cs . . . cs
Distance : 4

33
Tree	final CharSequence [] cs
Code	final CharSequence [] cs
Distance : 3

34
Tree	cs . . . rows
Code	cs . . . rows
Distance : 5

35
Tree	cs < str > cs
Code	cs < str > cs
Distance : 4

36
Tree	final CharSequence < cs > cs
Code	final CharSequence < cs > cs
Distance : 5

37
Tree	CharSequence < Object , cs > cs
Code	CharSequence < Object , cs > cs
Distance : 6

38
Tree	final boolean . . . cs
Code	final boolean . . . cs
Distance : 5

39
Tree	char sb
Code	char sb
Distance : 2

40
Tree	char cs
Code	char cs
Distance : 1

41
Tree	cs < Double > cs
Code	cs < Double > cs
Distance : 4

42
Tree	final Sin cs
Code	final Sin cs
Distance : 2

43
Tree	CharSequence < String , Object > cs
Code	CharSequence < String , Object > cs
Distance : 5

44
Tree	final CharSequence cs
Code	final CharSequence cs
Distance : 2

45
Tree	int cs
Code	int cs
Distance : 1

46
Tree	final CharSequence sb
Code	final CharSequence sb
Distance : 3

47
Tree	final CharSequence < Coordinates3D > cs
Code	final CharSequence < Coordinates3D > cs
Distance : 5

48
Tree	final char cs
Code	final char cs
Distance : 2

49
Tree	final CharSequence < String > cs
Code	final CharSequence < String > cs
Distance : 4

50
Tree	cs cs
Code	cs cs
Distance : 1

51
Tree	cs . . . length
Code	cs . . . length
Distance : 5

52
Tree	final CharSequence columns
Code	final CharSequence columns
Distance : 3

53
Tree	final long cs
Code	final long cs
Distance : 2

54
Tree	final CharSequence < x > cs
Code	final CharSequence < x > cs
Distance : 5

55
Tree	final CharSequence < str > cs
Code	final CharSequence < str > cs
Distance : 5

56
Tree	long . . . cs
Code	long . . . cs
Distance : 4

57
Tree	final long cs
Code	final long cs
Distance : 2

58
Tree	Coordinates3D cs
Code	Coordinates3D cs
Distance : 1

59
Tree	int . . . cs
Code	int . . . cs
Distance : 4

60
Tree	cs . . . toString
Code	cs . . . toString
Distance : 5

61
Tree	Character [] cs
Code	Character [] cs
Distance : 2

62
Tree	cs < Object > cs
Code	cs < Object > cs
Distance : 4

63
Tree	str cs
Code	str cs
Distance : 1

64
Tree	cs columns
Code	cs columns
Distance : 2

65
Tree	final CharSequence < Object > cs
Code	final CharSequence < Object > cs
Distance : 5

66
Tree	final finderStub.actualToReturn cs
Code	final finderStub.actualToReturn cs
Distance : 2

67
Tree	final final CharSequence
Code	final final CharSequence
Distance : 3

68
Tree	cs < cs > cs
Code	cs < cs > cs
Distance : 4

69
Tree	Double cs
Code	Double cs
Distance : 1

70
Tree	Cartesian3D [] cs
Code	Cartesian3D [] cs
Distance : 2

71
Tree	final Coordinates2D cs
Code	final Coordinates2D cs
Distance : 2

72
Tree	final StrBuilder cs
Code	final StrBuilder cs
Distance : 2

73
Tree	final char . . . cs
Code	final char . . . cs
Distance : 5

74
Tree	final byte cs
Code	final byte cs
Distance : 2

75
Tree	final char . . . columns
Code	final char . . . columns
Distance : 6

76
Tree	CharSequence . . . cs
Code	CharSequence . . . cs
Distance : 4

77
Tree	cs sb
Code	cs sb
Distance : 2

78
Tree	char . . . toString
Code	char . . . toString
Distance : 5

79
Tree	cs < Coordinates3D , cs > cs
Code	cs < Coordinates3D , cs > cs
Distance : 6

80
Tree	final CharSequence toString
Code	final CharSequence toString
Distance : 3

81
Tree	final
Code	final
Distance : 2

82
Tree	final Sin . . . cs
Code	final Sin . . . cs
Distance : 5

83
Tree	CharSequence <> cs
Code	CharSequence <> cs
Distance : 2

84
Tree	byte . . . cs
Code	byte . . . cs
Distance : 4

85
Tree	cs < Coordinates3D , rows > cs
Code	cs < Coordinates3D , rows > cs
Distance : 6

86
Tree	final int . . . cs
Code	final int . . . cs
Distance : 5

87
Tree	Locale.ENGLISH cs
Code	Locale.ENGLISH cs
Distance : 1

88
Tree	char . . . rows
Code	char . . . rows
Distance : 5

89
Tree	cs < Double , cs > cs
Code	cs < Double , cs > cs
Distance : 6

90
Tree	StrBuilder [] cs
Code	StrBuilder [] cs
Distance : 2

91
Tree	final CharSequence < Fraction > cs
Code	final CharSequence < Fraction > cs
Distance : 5

92
Tree	delimiters cs
Code	delimiters cs
Distance : 1

93
Tree	Localizable [] cs
Code	Localizable [] cs
Distance : 2

94
Tree	SystemUtils.LINE_SEPARATOR cs
Code	SystemUtils.LINE_SEPARATOR cs
Distance : 1

95
Tree	final CharSequence . . . columns
Code	final CharSequence . . . columns
Distance : 6

96
Tree	cs < x > cs
Code	cs < x > cs
Distance : 4

97
Tree	final char sb
Code	final char sb
Distance : 3

98
Tree	char . . . cs
Code	char . . . cs
Distance : 4

99
Tree	final char columns
Code	final char columns
Distance : 3

100
Tree	final Sin [] cs
Code	final Sin [] cs
Distance : 3

101
Tree	char rows
Code	char rows
Distance : 2

102
Tree	final CharSequence . . . cs
Code	final CharSequence . . . cs
Distance : 5

103
Tree	MutableLong [] cs
Code	MutableLong [] cs
Distance : 2

104
Tree	final long . . . cs
Code	final long . . . cs
Distance : 5

105
Tree	final CharSequence . . . parameters
Code	final CharSequence . . . parameters
Distance : 6

106
Tree	cs < cs , cs > cs
Code	cs < cs , cs > cs
Distance : 6

107
Tree	char columns
Code	char columns
Distance : 2

108
Tree	cs . . . parameters
Code	cs . . . parameters
Distance : 5

109
Tree	final CharSequence . . . rows
Code	final CharSequence . . . rows
Distance : 6

110
Tree	Character . . . cs
Code	Character . . . cs
Distance : 4

111
Tree	CharSequence < Object , Object > cs
Code	CharSequence < Object , Object > cs
Distance : 6

112
Tree	Cartesian3D . . . cs
Code	Cartesian3D . . . cs
Distance : 4

113
Tree	final CharSequence [] parameters
Code	final CharSequence [] parameters
Distance : 4

114
Tree	cs . . . columns
Code	cs . . . columns
Distance : 5

115
Tree	cs . . . delimiters
Code	cs . . . delimiters
Distance : 5

116
Tree	Localizable . . . cs
Code	Localizable . . . cs
Distance : 4

117
Tree	final byte cs
Code	final byte cs
Distance : 2

118
Tree	final CharSequence [] str
Code	final CharSequence [] str
Distance : 4

119
Tree	final boolean cs
Code	final boolean cs
Distance : 2

120
Tree	final CharSequence . . . rows
Code	final CharSequence . . . rows
Distance : 6

121
Tree	final CharSequence . . . delimiters
Code	final CharSequence . . . delimiters
Distance : 6

122
Tree	final CharSequence . . . length
Code	final CharSequence . . . length
Distance : 6

123
Tree	options.removeUnusedVars cs
Code	options.removeUnusedVars cs
Distance : 1

124
Tree	final byte . . . cs
Code	final byte . . . cs
Distance : 5

125
Tree	notifier.addedListeners cs
Code	notifier.addedListeners cs
Distance : 1

126
Tree	final CharSequence < idx > cs
Code	final CharSequence < idx > cs
Distance : 5

127
Tree	final CharSequence . . . length
Code	final CharSequence . . . length
Distance : 6

128
Tree	sb cs
Code	sb cs
Distance : 1

129
Tree	StrBuilder . . . cs
Code	StrBuilder . . . cs
Distance : 4

130
Tree	cs < Object , columns > cs
Code	cs < Object , columns > cs
Distance : 6

131
Tree	final CharSequence . . . columns
Code	final CharSequence . . . columns
Distance : 6

132
Tree	MutableLong . . . cs
Code	MutableLong . . . cs
Distance : 4

133
Tree	final CharSequence . . . toString
Code	final CharSequence . . . toString
Distance : 6

134
Tree	Precision.SAFE_MIN cs
Code	Precision.SAFE_MIN cs
Distance : 1

135
Tree	final Long.MAX_VALUE cs
Code	final Long.MAX_VALUE cs
Distance : 2

136
Tree	Double [] cs
Code	Double [] cs
Distance : 2

137
Tree	Locale.ROOT cs
Code	Locale.ROOT cs
Distance : 1

138
Tree	CharSequence . . . toString
Code	CharSequence . . . toString
Distance : 5

139
Tree	rows cs
Code	rows cs
Distance : 1

140
Tree	final >= cs
Code	final >= cs
Distance : 2

141
Tree	final CharSequence [] columns
Code	final CharSequence [] columns
Distance : 4

142
Tree	final CharSequence . . . parameters
Code	final CharSequence . . . parameters
Distance : 6

143
Tree	cs < Coordinates3D , idx > cs
Code	cs < Coordinates3D , idx > cs
Distance : 6

144
Tree	final CharSequence [] delimiters
Code	final CharSequence [] delimiters
Distance : 4

145
Tree	call.returnType cs
Code	call.returnType cs
Distance : 1

146
Tree	final StringUtils.EMPTY cs
Code	final StringUtils.EMPTY cs
Distance : 2

147
Tree	final CharSequence str
Code	final CharSequence str
Distance : 3

148
Tree	CharSequence . . . parameters
Code	CharSequence . . . parameters
Distance : 5

149
Tree	final CharSequence [] rows
Code	final CharSequence [] rows
Distance : 4

150
Tree	cs
Code	cs
Distance : 1

151
Tree	char . . . parameters
Code	char . . . parameters
Distance : 5

152
Tree	final CHAR_CONS cs
Code	final CHAR_CONS cs
Distance : 2

153
Tree	final CharSequence . . . toString
Code	final CharSequence . . . toString
Distance : 6

154
Tree	final x.length cs
Code	final x.length cs
Distance : 2

155
Tree	final int cs
Code	final int cs
Distance : 2

156
Tree	final char rows
Code	final char rows
Distance : 3

157
Tree	final char . . . toString
Code	final char . . . toString
Distance : 6

158
Tree	final CharSequence [] idx
Code	final CharSequence [] idx
Distance : 4

159
Tree	final options.removeUnusedVars cs
Code	final options.removeUnusedVars cs
Distance : 2

160
Tree	boolean . . . cs
Code	boolean . . . cs
Distance : 4

161
Tree	StrBuilder <> cs
Code	StrBuilder <> cs
Distance : 2

162
Tree	indexOf
Code	indexOf
Distance : 2

163
Tree	CharSequence < String , cs > cs
Code	CharSequence < String , cs > cs
Distance : 5

164
Tree	@ CharSequence Character cs
Code	@ CharSequence Character cs
Distance : 3

165
Tree	@ CharSequence IndexOutOfBoundsException cs
Code	@ CharSequence IndexOutOfBoundsException cs
Distance : 3

166
Tree	MutableLong <> cs
Code	MutableLong <> cs
Distance : 2

167
Tree	cs . . . css
Code	cs . . . css
Distance : 5

168
Tree	@ CharSequence Coordinates2D cs
Code	@ CharSequence Coordinates2D cs
Distance : 3

169
Tree	final char . . . parameters
Code	final char . . . parameters
Distance : 6

170
Tree	@ CharSequence x cs
Code	@ CharSequence x cs
Distance : 3

171
Tree	CharSequence < Coordinates3D , cs > cs
Code	CharSequence < Coordinates3D , cs > cs
Distance : 6

172
Tree	@ CharSequence StrBuilder cs
Code	@ CharSequence StrBuilder cs
Distance : 3

173
Tree	final CharSequence . . . delimiters
Code	final CharSequence . . . delimiters
Distance : 6

174
Tree	sb
Code	sb
Distance : 2

175
Tree	final StrBuilder . . . cs
Code	final StrBuilder . . . cs
Distance : 5

176
Tree	CharSequence < Object , columns > cs
Code	CharSequence < Object , columns > cs
Distance : 6

177
Tree	val.length cs
Code	val.length cs
Distance : 1

178
Tree	Coordinates3D cs
Code	Coordinates3D cs
Distance : 1

179
Tree	Character <> cs
Code	Character <> cs
Distance : 2

180
Tree	CharSequence cs
Code	CharSequence cs
Distance : 1

181
Tree	final Calendar.DECEMBER cs
Code	final Calendar.DECEMBER cs
Distance : 2

182
Tree	@ CharSequence Cartesian2D cs
Code	@ CharSequence Cartesian2D cs
Distance : 3

183
Tree	final IncrementalCheckMode.GENERATE_IJS cs
Code	final IncrementalCheckMode.GENERATE_IJS cs
Distance : 2

184
Tree	StrBuilder cs
Code	StrBuilder cs
Distance : 1

185
Tree	MutableLong cs
Code	MutableLong cs
Distance : 1

186
Tree	Character cs
Code	Character cs
Distance : 1

187
Tree	Localizable <> cs
Code	Localizable <> cs
Distance : 2

188
Tree	Cartesian3D cs
Code	Cartesian3D cs
Distance : 1

189
Tree	Localizable cs
Code	Localizable cs
Distance : 1

190
Tree	Double cs
Code	Double cs
Distance : 1

191
Tree	@ CharSequence Cartesian3D cs
Code	@ CharSequence Cartesian3D cs
Distance : 3

========================================================================


========================================================================
Example Number: 46
Parent Code is: 
Calendar c = new GregorianCalendar ( mTimeZone ) ;
-------------------------------------------------------------------------------
Child code is: 
Calendar c = new GregorianCalendar ( mTimeZone , mLocale ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Calendar})) (59 (800{val=c}) (204{val==}) (14 (304{val=new}) (43 (801{val=GregorianCalendar})) (214{val=(}) (800{val=mTimeZone}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Calendar})) (59 (800{val=c}) (204{val==}) (14 (304{val=new}) (43 (801{val=GregorianCalendar})) (214{val=(}) (800{val=mTimeZone}) (234{val=,}) (800{val=mLocale}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/26/parent/src_main_java_org_apache_commons_lang3_time_FastDateFormat.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) . getDeclaredType () ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) . getDeclaredType () ;
Distance : 4

1
Tree	DateParser c = Calendar . getInstance ( mTimeZone , timeZone ) ;
Code	DateParser c = Calendar . getInstance ( mTimeZone , timeZone ) ;
Distance : 5

2
Tree	Calendar c = new GregorianCalendar () ;
Code	Calendar c = new GregorianCalendar () ;
Distance : 5

3
Tree	Calendar c = Calendar . getInstance ( mTimeZone ) ;
Code	Calendar c = Calendar . getInstance ( mTimeZone ) ;
Distance : 5

4
Tree	StringBuilder c = Calendar . getInstance ( mTimeZone ) ;
Code	StringBuilder c = Calendar . getInstance ( mTimeZone ) ;
Distance : 6

5
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) ;
Distance : 2

6
Tree	DateParser c = new GregorianCalendar ( RandomSource.MT , mTimeZone ) ;
Code	DateParser c = new GregorianCalendar ( RandomSource.MT , mTimeZone ) ;
Distance : 3

7
Tree	Calendar c = new GregorianCalendar ( mTimeZone , timeZone . getChangedScopeNodesForPass ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , timeZone . getChangedScopeNodesForPass ( STRING_CONSTANT ) ) ;
Distance : 6

8
Tree	Calendar c = new Calendar ( mTimeZone , timeZone ) ;
Code	Calendar c = new Calendar ( mTimeZone , timeZone ) ;
Distance : 2

9
Tree	DateParser c = new GregorianCalendar ( mTimeZone . getInstance ( STRING_CONSTANT ) ) ;
Code	DateParser c = new GregorianCalendar ( mTimeZone . getInstance ( STRING_CONSTANT ) ) ;
Distance : 6

10
Tree	DateParser c = new GregorianCalendar ( mTimeZone ) ;
Code	DateParser c = new GregorianCalendar ( mTimeZone ) ;
Distance : 3

11
Tree	Calendar c = new Equals ( mTimeZone ) ;
Code	Calendar c = new Equals ( mTimeZone ) ;
Distance : 3

12
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) . sample () ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) . sample () ;
Distance : 4

13
Tree	Calendar c = new GregorianCalendar ( mTimeZone , NUMBER_CONSTANT ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , NUMBER_CONSTANT ) ;
Distance : 1

14
Tree	Calendar c = new Calendar () ;
Code	Calendar c = new Calendar () ;
Distance : 6

15
Tree	Calendar c = new FieldInitializer ( mTimeZone ) . getDeclaredType () ;
Code	Calendar c = new FieldInitializer ( mTimeZone ) . getDeclaredType () ;
Distance : 5

16
Tree	DateParser c = new GregorianCalendar () ;
Code	DateParser c = new GregorianCalendar () ;
Distance : 6

17
Tree	Calendar c = new GregorianCalendar ( mTimeZone , out ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , out ) ;
Distance : 1

18
Tree	Calendar c ;
Code	Calendar c ;
Distance : 8

19
Tree	DateParser c = new GregorianCalendar ( mTimeZone , array.length ) ;
Code	DateParser c = new GregorianCalendar ( mTimeZone , array.length ) ;
Distance : 2

20
Tree	Calendar c = new Calendar ( mTimeZone ) . getDeclaredType () ;
Code	Calendar c = new Calendar ( mTimeZone ) . getDeclaredType () ;
Distance : 5

21
Tree	GregorianCalendar c = Calendar . getInstance ( mTimeZone ) ;
Code	GregorianCalendar c = Calendar . getInstance ( mTimeZone ) ;
Distance : 6

22
Tree	Calendar c = new FieldInitializer ( mTimeZone ) ;
Code	Calendar c = new FieldInitializer ( mTimeZone ) ;
Distance : 3

23
Tree	Calendar c = new Equals ( mTimeZone , false ) ;
Code	Calendar c = new Equals ( mTimeZone , false ) ;
Distance : 2

24
Tree	Calendar c = new Equals () ;
Code	Calendar c = new Equals () ;
Distance : 6

25
Tree	Calendar c = new Equals ( RandomSource.MT , mLocale ) ;
Code	Calendar c = new Equals ( RandomSource.MT , mLocale ) ;
Distance : 2

26
Tree	DateParser c ;
Code	DateParser c ;
Distance : 9

27
Tree	Calendar c = new Calendar ( mTimeZone ) ;
Code	Calendar c = new Calendar ( mTimeZone ) ;
Distance : 3

28
Tree	Calendar c = Calendar . getInstance ( mTimeZone , out ) ;
Code	Calendar c = Calendar . getInstance ( mTimeZone , out ) ;
Distance : 4

29
Tree	DateTimeFormatter c = new GregorianCalendar () ;
Code	DateTimeFormatter c = new GregorianCalendar () ;
Distance : 6

30
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) . returnZero () ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) . returnZero () ;
Distance : 4

31
Tree	DateParser c = Calendar . getInstance ( mTimeZone ) ;
Code	DateParser c = Calendar . getInstance ( mTimeZone ) ;
Distance : 6

32
Tree	Calendar c = new DateTimeFormatter ( mTimeZone ) ;
Code	Calendar c = new DateTimeFormatter ( mTimeZone ) ;
Distance : 3

33
Tree	final InvocationMatcher c = new GregorianCalendar ( mTimeZone ) ;
Code	final InvocationMatcher c = new GregorianCalendar ( mTimeZone ) ;
Distance : 4

34
Tree	DateParser c = new Equals () ;
Code	DateParser c = new Equals () ;
Distance : 7

35
Tree	Calendar c = new GregorianCalendar ( mTimeZone , false ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , false ) ;
Distance : 1

36
Tree	DateTimeFormatter c = NUMBER_CONSTANT ;
Code	DateTimeFormatter c = NUMBER_CONSTANT ;
Distance : 8

37
Tree	DateTimeFormatter c = new GregorianCalendar ( mTimeZone ) ;
Code	DateTimeFormatter c = new GregorianCalendar ( mTimeZone ) ;
Distance : 3

38
Tree	Calendar c = new FieldInitializer ( mTimeZone , false ) ;
Code	Calendar c = new FieldInitializer ( mTimeZone , false ) ;
Distance : 2

39
Tree	DateParser c = new GregorianCalendar ( mTimeZone ) . getDeclaredType () ;
Code	DateParser c = new GregorianCalendar ( mTimeZone ) . getDeclaredType () ;
Distance : 5

40
Tree	DateParser c = new Equals ( mTimeZone , false ) ;
Code	DateParser c = new Equals ( mTimeZone , false ) ;
Distance : 3

41
Tree	Calendar c = new DateTimeFormatter ( mTimeZone , NUMBER_CONSTANT ) ;
Code	Calendar c = new DateTimeFormatter ( mTimeZone , NUMBER_CONSTANT ) ;
Distance : 2

42
Tree	Calendar c = new GregorianCalendar ( mTimeZone , timeZone ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , timeZone ) ;
Distance : 1

43
Tree	Calendar c = new GregorianCalendar ( mTimeZone . getInstance ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone . getInstance ( STRING_CONSTANT ) ) ;
Distance : 5

44
Tree	Calendar c = new GregorianCalendar ( mTimeZone , array.length ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , array.length ) ;
Distance : 1

45
Tree	Calendar [] c = new GregorianCalendar ( mTimeZone ) ;
Code	Calendar [] c = new GregorianCalendar ( mTimeZone ) ;
Distance : 3

46
Tree	InvocationMatcher c = NUMBER_CONSTANT ;
Code	InvocationMatcher c = NUMBER_CONSTANT ;
Distance : 8

47
Tree	Calendar c = NUMBER_CONSTANT ;
Code	Calendar c = NUMBER_CONSTANT ;
Distance : 7

48
Tree	final GregorianCalendar c = new GregorianCalendar ( mTimeZone ) ;
Code	final GregorianCalendar c = new GregorianCalendar ( mTimeZone ) ;
Distance : 4

49
Tree	Calendar c = Calendar . getInstance ( mock ) ;
Code	Calendar c = Calendar . getInstance ( mock ) ;
Distance : 6

50
Tree	DateParser c = new GregorianCalendar ( mTimeZone . getBytes ( STRING_CONSTANT ) ) ;
Code	DateParser c = new GregorianCalendar ( mTimeZone . getBytes ( STRING_CONSTANT ) ) ;
Distance : 6

51
Tree	Calendar c = new GregorianCalendar ( RandomSource.MT , mLocale ) ;
Code	Calendar c = new GregorianCalendar ( RandomSource.MT , mLocale ) ;
Distance : 1

52
Tree	DateParser c = NUMBER_CONSTANT ;
Code	DateParser c = NUMBER_CONSTANT ;
Distance : 8

53
Tree	DateTimeFormatter c = Calendar . getInstance ( mTimeZone ) ;
Code	DateTimeFormatter c = Calendar . getInstance ( mTimeZone ) ;
Distance : 6

54
Tree	DateParser c = new GregorianCalendar ( mTimeZone , timeZone ) ;
Code	DateParser c = new GregorianCalendar ( mTimeZone , timeZone ) ;
Distance : 2

55
Tree	DateParser c = new Equals ( mTimeZone ) ;
Code	DateParser c = new Equals ( mTimeZone ) ;
Distance : 4

56
Tree	DateTimeFormatter c = newCalendar () ;
Code	DateTimeFormatter c = newCalendar () ;
Distance : 8

57
Tree	Calendar c = new FieldInitializer ( mTimeZone , timeZone ) ;
Code	Calendar c = new FieldInitializer ( mTimeZone , timeZone ) ;
Distance : 2

58
Tree	Calendar c = new Calendar ( mTimeZone , NUMBER_CONSTANT ) ;
Code	Calendar c = new Calendar ( mTimeZone , NUMBER_CONSTANT ) ;
Distance : 2

59
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) . getDeclaredType ( mTimeZone ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) . getDeclaredType ( mTimeZone ) ;
Distance : 5

60
Tree	Calendar c = new FieldInitializer () ;
Code	Calendar c = new FieldInitializer () ;
Distance : 6

61
Tree	Calendar c = new GregorianCalendar ( RandomSource.MT , mTimeZone ) ;
Code	Calendar c = new GregorianCalendar ( RandomSource.MT , mTimeZone ) ;
Distance : 2

62
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) . length ( mTimeZone ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) . length ( mTimeZone ) ;
Distance : 5

63
Tree	Calendar c = new Equals ( RandomSource.MT , mTimeZone ) ;
Code	Calendar c = new Equals ( RandomSource.MT , mTimeZone ) ;
Distance : 3

64
Tree	Calendar c = new GregorianCalendar ( mTimeZone , timeZone . getInstance ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , timeZone . getInstance ( STRING_CONSTANT ) ) ;
Distance : 6

65
Tree	DateParser c = newCalendar () ;
Code	DateParser c = newCalendar () ;
Distance : 8

66
Tree	Calendar c = new GregorianCalendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Distance : 5

67
Tree	InvocationMatcher c = Calendar . getInstance ( mTimeZone ) ;
Code	InvocationMatcher c = Calendar . getInstance ( mTimeZone ) ;
Distance : 6

68
Tree	Calendar c = new Equals ( mTimeZone . getBytes ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Equals ( mTimeZone . getBytes ( STRING_CONSTANT ) ) ;
Distance : 6

69
Tree	Calendar c = new Calendar ( mTimeZone , false ) ;
Code	Calendar c = new Calendar ( mTimeZone , false ) ;
Distance : 2

70
Tree	Calendar c = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Calendar c = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 2

71
Tree	DateParser c = Calendar ;
Code	DateParser c = Calendar ;
Distance : 8

72
Tree	Calendar c = new DateTimeFormatter () ;
Code	Calendar c = new DateTimeFormatter () ;
Distance : 6

73
Tree	DateParser c = new GregorianCalendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Code	DateParser c = new GregorianCalendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Distance : 6

74
Tree	DateParser c = new GregorianCalendar ( mTimeZone , false ) ;
Code	DateParser c = new GregorianCalendar ( mTimeZone , false ) ;
Distance : 2

75
Tree	final DateParser c = new GregorianCalendar ( mTimeZone ) ;
Code	final DateParser c = new GregorianCalendar ( mTimeZone ) ;
Distance : 4

76
Tree	Calendar c = Calendar ;
Code	Calendar c = Calendar ;
Distance : 7

77
Tree	Calendar c = new FieldInitializer ( RandomSource.MT , mTimeZone ) ;
Code	Calendar c = new FieldInitializer ( RandomSource.MT , mTimeZone ) ;
Distance : 3

78
Tree	DateParser [] c = new GregorianCalendar ( mTimeZone ) ;
Code	DateParser [] c = new GregorianCalendar ( mTimeZone ) ;
Distance : 4

79
Tree	Calendar c = Calendar . getInstance ( mTimeZone , new V ( mTimeZone ) ) ;
Code	Calendar c = Calendar . getInstance ( mTimeZone , new V ( mTimeZone ) ) ;
Distance : 8

80
Tree	Calendar c = mock () ;
Code	Calendar c = mock () ;
Distance : 7

81
Tree	Calendar c = new FieldInitializer ( mTimeZone , array.length ) ;
Code	Calendar c = new FieldInitializer ( mTimeZone , array.length ) ;
Distance : 2

82
Tree	InvocationMatcher c ;
Code	InvocationMatcher c ;
Distance : 9

83
Tree	Calendar c = new DateTimeFormatter ( mTimeZone , false ) ;
Code	Calendar c = new DateTimeFormatter ( mTimeZone , false ) ;
Distance : 2

84
Tree	Calendar c = new Equals ( mTimeZone . getInstance ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Equals ( mTimeZone . getInstance ( STRING_CONSTANT ) ) ;
Distance : 6

85
Tree	Calendar c = new GregorianCalendar ( mTimeZone , PropertyCollapseLevel.ALL ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , PropertyCollapseLevel.ALL ) ;
Distance : 1

86
Tree	Calendar c = new GregorianCalendar ( mTimeZone , timeZone . newBuilder ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , timeZone . newBuilder ( STRING_CONSTANT ) ) ;
Distance : 6

87
Tree	DateParser c = new GregorianCalendar ( mTimeZone ) . getDeclaredType ( mock ) ;
Code	DateParser c = new GregorianCalendar ( mTimeZone ) . getDeclaredType ( mock ) ;
Distance : 6

88
Tree	Calendar c = new GregorianCalendar ( mTimeZone , plane.w ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , plane.w ) ;
Distance : 1

89
Tree	Calendar c = new FieldInitializer ( mTimeZone . getBytes ( STRING_CONSTANT ) ) ;
Code	Calendar c = new FieldInitializer ( mTimeZone . getBytes ( STRING_CONSTANT ) ) ;
Distance : 6

90
Tree	Calendar c = new GregorianCalendar ( mTimeZone . getBytes ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone . getBytes ( STRING_CONSTANT ) ) ;
Distance : 5

91
Tree	out c ;
Code	out c ;
Distance : 9

92
Tree	DateParser c = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	DateParser c = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 3

93
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) . length () ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) . length () ;
Distance : 4

94
Tree	Calendar c = Calendar . getInstance ( mTimeZone , new GregorianCalendar ( mTimeZone ) ) ;
Code	Calendar c = Calendar . getInstance ( mTimeZone , new GregorianCalendar ( mTimeZone ) ) ;
Distance : 8

95
Tree	DateParser c = new GregorianCalendar ( mTimeZone , NUMBER_CONSTANT ) ;
Code	DateParser c = new GregorianCalendar ( mTimeZone , NUMBER_CONSTANT ) ;
Distance : 2

96
Tree	Calendar c = newCalendar () ;
Code	Calendar c = newCalendar () ;
Distance : 7

97
Tree	Calendar c = new Calendar ( mTimeZone , array.length ) ;
Code	Calendar c = new Calendar ( mTimeZone , array.length ) ;
Distance : 2

98
Tree	StringBuilder c ;
Code	StringBuilder c ;
Distance : 9

99
Tree	Calendar c = new GregorianCalendar < Object > ( mock , timeZone ) ;
Code	Calendar c = new GregorianCalendar < Object > ( mock , timeZone ) ;
Distance : 5

100
Tree	InvocationMatcher c = newCalendar () ;
Code	InvocationMatcher c = newCalendar () ;
Distance : 8

101
Tree	out c = Calendar . getInstance ( mTimeZone ) ;
Code	out c = Calendar . getInstance ( mTimeZone ) ;
Distance : 6

102
Tree	DateTimeFormatter c = Calendar . getInstance ( mTimeZone , timeZone ) ;
Code	DateTimeFormatter c = Calendar . getInstance ( mTimeZone , timeZone ) ;
Distance : 5

103
Tree	DateParser c = Calendar . getInstance ( mTimeZone , new GregorianCalendar ( mTimeZone ) ) ;
Code	DateParser c = Calendar . getInstance ( mTimeZone , new GregorianCalendar ( mTimeZone ) ) ;
Distance : 9

104
Tree	DateTimeFormatter c ;
Code	DateTimeFormatter c ;
Distance : 9

105
Tree	Calendar c = new GregorianCalendar < Object > ( mTimeZone , timeZone ) ;
Code	Calendar c = new GregorianCalendar < Object > ( mTimeZone , timeZone ) ;
Distance : 4

106
Tree	final GregorianCalendar c = new FieldInitializer ( mTimeZone ) ;
Code	final GregorianCalendar c = new FieldInitializer ( mTimeZone ) ;
Distance : 5

107
Tree	DateTimeFormatter c = new GregorianCalendar ( mTimeZone , NUMBER_CONSTANT ) ;
Code	DateTimeFormatter c = new GregorianCalendar ( mTimeZone , NUMBER_CONSTANT ) ;
Distance : 2

108
Tree	Calendar c = new Equals ( mTimeZone , array.length ) ;
Code	Calendar c = new Equals ( mTimeZone , array.length ) ;
Distance : 2

109
Tree	InvocationMatcher c = Calendar . getInstance ( mTimeZone , timeZone ) ;
Code	InvocationMatcher c = Calendar . getInstance ( mTimeZone , timeZone ) ;
Distance : 5

110
Tree	Calendar c = new GregorianCalendar ( new Matches ( mTimeZone ) ) ;
Code	Calendar c = new GregorianCalendar ( new Matches ( mTimeZone ) ) ;
Distance : 5

111
Tree	Calendar c = new FieldInitializer ( RandomSource.MT , mLocale ) ;
Code	Calendar c = new FieldInitializer ( RandomSource.MT , mLocale ) ;
Distance : 2

112
Tree	Calendar c = Calendar . getInstance ( mTimeZone , mLocale ) ;
Code	Calendar c = Calendar . getInstance ( mTimeZone , mLocale ) ;
Distance : 3

113
Tree	InvocationMatcher [] c = new GregorianCalendar ( mTimeZone ) ;
Code	InvocationMatcher [] c = new GregorianCalendar ( mTimeZone ) ;
Distance : 4

114
Tree	final GregorianCalendar c = new Equals ( mTimeZone ) ;
Code	final GregorianCalendar c = new Equals ( mTimeZone ) ;
Distance : 5

115
Tree	Calendar c = new FieldInitializer ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Calendar c = new FieldInitializer ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 3

116
Tree	Calendar c = Calendar . getInstance ( mTimeZone , timeZone ) ;
Code	Calendar c = Calendar . getInstance ( mTimeZone , timeZone ) ;
Distance : 4

117
Tree	DateParser c = new GregorianCalendar ( mTimeZone , timeZone . newBuilder ( STRING_CONSTANT ) ) ;
Code	DateParser c = new GregorianCalendar ( mTimeZone , timeZone . newBuilder ( STRING_CONSTANT ) ) ;
Distance : 7

118
Tree	out c = Calendar . getInstance ( mTimeZone , timeZone ) ;
Code	out c = Calendar . getInstance ( mTimeZone , timeZone ) ;
Distance : 5

119
Tree	Calendar c = Calendar . getInstance ( mTimeZone , new Compiler ( mTimeZone ) ) ;
Code	Calendar c = Calendar . getInstance ( mTimeZone , new Compiler ( mTimeZone ) ) ;
Distance : 8

120
Tree	final DateParser c = new Equals ( mTimeZone ) ;
Code	final DateParser c = new Equals ( mTimeZone ) ;
Distance : 5

121
Tree	DateParser c = new Equals ( mTimeZone , NUMBER_CONSTANT ) ;
Code	DateParser c = new Equals ( mTimeZone , NUMBER_CONSTANT ) ;
Distance : 3

122
Tree	Calendar c = new FieldInitializer ( mTimeZone . getInstance ( STRING_CONSTANT ) ) ;
Code	Calendar c = new FieldInitializer ( mTimeZone . getInstance ( STRING_CONSTANT ) ) ;
Distance : 6

123
Tree	Calendar c = new GregorianCalendar ( mTimeZone , timeZone . valueOf ( STRING_CONSTANT ) ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , timeZone . valueOf ( STRING_CONSTANT ) ) ;
Distance : 6

124
Tree	Calendar c = new Equals ( mTimeZone , timeZone ) ;
Code	Calendar c = new Equals ( mTimeZone , timeZone ) ;
Distance : 2

125
Tree	Calendar c = new GregorianCalendar ( new Equals ( mTimeZone ) ) ;
Code	Calendar c = new GregorianCalendar ( new Equals ( mTimeZone ) ) ;
Distance : 5

126
Tree	Calendar c = new Calendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Calendar c = new Calendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 3

127
Tree	Calendar c = new DateTimeFormatter ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Calendar c = new DateTimeFormatter ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 3

128
Tree	final Calendar c = new GregorianCalendar ( mTimeZone ) ;
Code	final Calendar c = new GregorianCalendar ( mTimeZone ) ;
Distance : 3

129
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) . getDeclaredType ( mock ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) . getDeclaredType ( mock ) ;
Distance : 5

130
Tree	Calendar c = new FieldInitializer ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Code	Calendar c = new FieldInitializer ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Distance : 6

131
Tree	DateParser c = new GregorianCalendar ( mTimeZone , timeZone . getInstance ( STRING_CONSTANT ) ) ;
Code	DateParser c = new GregorianCalendar ( mTimeZone , timeZone . getInstance ( STRING_CONSTANT ) ) ;
Distance : 7

132
Tree	Calendar [] c = new FieldInitializer ( mTimeZone ) ;
Code	Calendar [] c = new FieldInitializer ( mTimeZone ) ;
Distance : 4

133
Tree	out c = newCalendar () ;
Code	out c = newCalendar () ;
Distance : 8

134
Tree	Calendar c = new GregorianCalendar ( mTimeZone , new Compiler [ NUMBER_CONSTANT ] ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , new Compiler [ NUMBER_CONSTANT ] ) ;
Distance : 5

135
Tree	Calendar c = new GregorianCalendar ( new DateTimeFormatter ( mock ) ) ;
Code	Calendar c = new GregorianCalendar ( new DateTimeFormatter ( mock ) ) ;
Distance : 5

136
Tree	GregorianCalendar c ;
Code	GregorianCalendar c ;
Distance : 9

137
Tree	DateParser c = new GregorianCalendar < Object > ( mTimeZone , timeZone ) ;
Code	DateParser c = new GregorianCalendar < Object > ( mTimeZone , timeZone ) ;
Distance : 5

138
Tree	Calendar c = new DateTimeFormatter ( mTimeZone , timeZone ) ;
Code	Calendar c = new DateTimeFormatter ( mTimeZone , timeZone ) ;
Distance : 2

139
Tree	Calendar c = new Equals ( mTimeZone ) . getDeclaredType () ;
Code	Calendar c = new Equals ( mTimeZone ) . getDeclaredType () ;
Distance : 5

140
Tree	Calendar c = new GregorianCalendar ( new DateTimeFormatter ( mTimeZone ) ) ;
Code	Calendar c = new GregorianCalendar ( new DateTimeFormatter ( mTimeZone ) ) ;
Distance : 5

141
Tree	Calendar c = new GregorianCalendar ( mTimeZone , v1.data.length ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , v1.data.length ) ;
Distance : 1

142
Tree	Calendar c = new GregorianCalendar ( mTimeZone , new int [ currentState.length ] ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , new int [ currentState.length ] ) ;
Distance : 5

143
Tree	DateParser c = Calendar . getInstance ( mTimeZone , out ) ;
Code	DateParser c = Calendar . getInstance ( mTimeZone , out ) ;
Distance : 5

144
Tree	Calendar c = new GregorianCalendar ( new Matches ( mock ) ) ;
Code	Calendar c = new GregorianCalendar ( new Matches ( mock ) ) ;
Distance : 5

145
Tree	Calendar c = new Equals ( mTimeZone , timeZone . getInstance ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Equals ( mTimeZone , timeZone . getInstance ( STRING_CONSTANT ) ) ;
Distance : 7

146
Tree	DateParser c = new GregorianCalendar ( mTimeZone , new int [ currentState.length ] ) ;
Code	DateParser c = new GregorianCalendar ( mTimeZone , new int [ currentState.length ] ) ;
Distance : 6

147
Tree	DateTimeFormatter c = new GregorianCalendar ( mTimeZone , false ) ;
Code	DateTimeFormatter c = new GregorianCalendar ( mTimeZone , false ) ;
Distance : 2

148
Tree	Calendar c = new Equals ( mTimeZone , timeZone . newBuilder ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Equals ( mTimeZone , timeZone . newBuilder ( STRING_CONSTANT ) ) ;
Distance : 7

149
Tree	DateTimeFormatter c = Calendar ;
Code	DateTimeFormatter c = Calendar ;
Distance : 8

150
Tree	Calendar [] c = new Equals ( mTimeZone ) ;
Code	Calendar [] c = new Equals ( mTimeZone ) ;
Distance : 4

151
Tree	Calendar c = new Equals ( mTimeZone , NUMBER_CONSTANT ) ;
Code	Calendar c = new Equals ( mTimeZone , NUMBER_CONSTANT ) ;
Distance : 2

152
Tree	Calendar c = Calendar . getInstance ( mTimeZone , new Matches ( mTimeZone ) ) ;
Code	Calendar c = Calendar . getInstance ( mTimeZone , new Matches ( mTimeZone ) ) ;
Distance : 8

153
Tree	DateTimeFormatter c = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	DateTimeFormatter c = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 3

154
Tree	Calendar c = new GregorianCalendar ( mTimeZone , mLocale ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , mLocale ) ;
Distance : 0

155
Tree	out [] c = new GregorianCalendar ( mTimeZone ) ;
Code	out [] c = new GregorianCalendar ( mTimeZone ) ;
Distance : 4

156
Tree	Calendar c = new GregorianCalendar < Object > ( mTimeZone , out ) ;
Code	Calendar c = new GregorianCalendar < Object > ( mTimeZone , out ) ;
Distance : 4

157
Tree	DateParser c = new GregorianCalendar ( RandomSource.MT , mLocale ) ;
Code	DateParser c = new GregorianCalendar ( RandomSource.MT , mLocale ) ;
Distance : 2

158
Tree	Calendar [] c = new GregorianCalendar ( len ) ;
Code	Calendar [] c = new GregorianCalendar ( len ) ;
Distance : 4

159
Tree	final GregorianCalendar c = new Calendar ( mTimeZone ) ;
Code	final GregorianCalendar c = new Calendar ( mTimeZone ) ;
Distance : 5

160
Tree	DateParser c = new Equals ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	DateParser c = new Equals ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 4

161
Tree	out c = NUMBER_CONSTANT ;
Code	out c = NUMBER_CONSTANT ;
Distance : 8

162
Tree	Calendar c = Calendar . getInstance ( mTimeZone , new Equals ( mTimeZone ) ) ;
Code	Calendar c = Calendar . getInstance ( mTimeZone , new Equals ( mTimeZone ) ) ;
Distance : 8

163
Tree	Calendar c = new Equals ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Code	Calendar c = new Equals ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Distance : 6

164
Tree	Calendar c = new GregorianCalendar ( mTimeZone , new int [ LocalizedFormats.NUMBER_TOO_SMALL ] ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , new int [ LocalizedFormats.NUMBER_TOO_SMALL ] ) ;
Distance : 5

165
Tree	Calendar c = new FieldInitializer ( mTimeZone , NUMBER_CONSTANT ) ;
Code	Calendar c = new FieldInitializer ( mTimeZone , NUMBER_CONSTANT ) ;
Distance : 2

166
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) . returnZero ( mTimeZone ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) . returnZero ( mTimeZone ) ;
Distance : 5

167
Tree	out c = Calendar ;
Code	out c = Calendar ;
Distance : 8

168
Tree	Calendar c = new Equals ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Calendar c = new Equals ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 3

169
Tree	Calendar c = new GregorianCalendar ( new DummyLocalizable ( mock ) ) ;
Code	Calendar c = new GregorianCalendar ( new DummyLocalizable ( mock ) ) ;
Distance : 5

170
Tree	Calendar c = new GregorianCalendar ( mTimeZone , new Matches [ NUMBER_CONSTANT ] ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , new Matches [ NUMBER_CONSTANT ] ) ;
Distance : 5

171
Tree	Calendar c = new GregorianCalendar ( new Equals ( mock ) ) ;
Code	Calendar c = new GregorianCalendar ( new Equals ( mock ) ) ;
Distance : 5

172
Tree	InvocationMatcher c = Calendar ;
Code	InvocationMatcher c = Calendar ;
Distance : 8

173
Tree	Calendar c = new GregorianCalendar ( new DummyLocalizable ( mTimeZone ) ) ;
Code	Calendar c = new GregorianCalendar ( new DummyLocalizable ( mTimeZone ) ) ;
Distance : 5

174
Tree	DateTimeFormatter [] c = new GregorianCalendar ( mTimeZone ) ;
Code	DateTimeFormatter [] c = new GregorianCalendar ( mTimeZone ) ;
Distance : 4

175
Tree	StringBuilder c = NUMBER_CONSTANT ;
Code	StringBuilder c = NUMBER_CONSTANT ;
Distance : 8

176
Tree	Calendar c = new GregorianCalendar ( mTimeZone , new Equals [ NUMBER_CONSTANT ] ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , new Equals [ NUMBER_CONSTANT ] ) ;
Distance : 5

177
Tree	Calendar c = new GregorianCalendar < Number > ( mTimeZone , timeZone ) ;
Code	Calendar c = new GregorianCalendar < Number > ( mTimeZone , timeZone ) ;
Distance : 4

178
Tree	Calendar c = new Calendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Code	Calendar c = new Calendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Distance : 6

179
Tree	StringBuilder c = newCalendar () ;
Code	StringBuilder c = newCalendar () ;
Distance : 8

180
Tree	Calendar c = Calendar . getInstance ( mTimeZone , new DateTimeFormatter ( mTimeZone ) ) ;
Code	Calendar c = Calendar . getInstance ( mTimeZone , new DateTimeFormatter ( mTimeZone ) ) ;
Distance : 8

181
Tree	Calendar c = new GregorianCalendar ( mTimeZone , new int [ t1.time ] ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , new int [ t1.time ] ) ;
Distance : 5

182
Tree	Calendar c = new GregorianCalendar < E > ( mTimeZone , timeZone ) ;
Code	Calendar c = new GregorianCalendar < E > ( mTimeZone , timeZone ) ;
Distance : 4

183
Tree	Calendar c = new GregorianCalendar ( mTimeZone , new int [ ToStringContext.TO_STRING ] ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , new int [ ToStringContext.TO_STRING ] ) ;
Distance : 5

184
Tree	DateParser c = new GregorianCalendar ( mTimeZone ) . getDeclaredType ( mTimeZone ) ;
Code	DateParser c = new GregorianCalendar ( mTimeZone ) . getDeclaredType ( mTimeZone ) ;
Distance : 6

185
Tree	Calendar c = new GregorianCalendar ( mTimeZone , new int [ array.length ] ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , new int [ array.length ] ) ;
Distance : 5

186
Tree	DateParser c = Calendar . getInstance ( mTimeZone , new Compiler ( mTimeZone ) ) ;
Code	DateParser c = Calendar . getInstance ( mTimeZone , new Compiler ( mTimeZone ) ) ;
Distance : 9

187
Tree	Calendar c = new GregorianCalendar < T > ( mTimeZone , timeZone ) ;
Code	Calendar c = new GregorianCalendar < T > ( mTimeZone , timeZone ) ;
Distance : 4

188
Tree	GregorianCalendar c = NUMBER_CONSTANT ;
Code	GregorianCalendar c = NUMBER_CONSTANT ;
Distance : 8

189
Tree	Calendar c = getInstance () ;
Code	Calendar c = getInstance () ;
Distance : 7

190
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) . returnZero ( mock ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) . returnZero ( mock ) ;
Distance : 5

191
Tree	Calendar c = new GregorianCalendar ( mTimeZone ) . getDeclaredType ( string ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone ) . getDeclaredType ( string ) ;
Distance : 5

192
Tree	CompilerPass c ;
Code	CompilerPass c ;
Distance : 9

193
Tree	Calendar c = new GregorianCalendar ( mTimeZone , new int [ Verification.EXPLICIT ] ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , new int [ Verification.EXPLICIT ] ) ;
Distance : 5

194
Tree	Calendar c = new GregorianCalendar < String > ( mTimeZone , timeZone ) ;
Code	Calendar c = new GregorianCalendar < String > ( mTimeZone , timeZone ) ;
Distance : 4

195
Tree	Calendar c = new GregorianCalendar ( mTimeZone , new int [ Locale.ENGLISH ] ) ;
Code	Calendar c = new GregorianCalendar ( mTimeZone , new int [ Locale.ENGLISH ] ) ;
Distance : 5

196
Tree	StringBuilder c = Calendar ;
Code	StringBuilder c = Calendar ;
Distance : 8

197
Tree	GregorianCalendar c = Calendar ;
Code	GregorianCalendar c = Calendar ;
Distance : 8

198
Tree	CompilerPass c = NUMBER_CONSTANT ;
Code	CompilerPass c = NUMBER_CONSTANT ;
Distance : 8

199
Tree	CompilerPass c = Calendar ;
Code	CompilerPass c = Calendar ;
Distance : 8

========================================================================


========================================================================
Example Number: 47
Parent Code is: 
if ( chars [ i ] == CHAR_CONS  chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
-------------------------------------------------------------------------------
Child code is: 
if ( chars [ i ] == CHAR_CONS  chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp && ! hasDecPoint ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (2 (801{val=chars}) (221{val=[}) (800{val=i}) (222{val=]})) (236{val===}) (13{val=CHAR_CONS})) (250{val=||}) (27 (2 (801{val=chars}) (221{val=[}) (800{val=i}) (222{val=]})) (236{val===}) (13{val=CHAR_CONS}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (27 (800{val=foundDigit}) (249{val=&&}) (38 (207{val=!}) (800{val=hasExp}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (2 (801{val=chars}) (221{val=[}) (800{val=i}) (222{val=]})) (236{val===}) (13{val=CHAR_CONS})) (250{val=||}) (27 (2 (801{val=chars}) (221{val=[}) (800{val=i}) (222{val=]})) (236{val===}) (13{val=CHAR_CONS}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (27 (800{val=foundDigit}) (249{val=&&}) (38 (207{val=!}) (800{val=hasExp})) (249{val=&&}) (38 (207{val=!}) (800{val=hasDecPoint}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/24/parent/src_main_java_org_apache_commons_lang3_math_NumberUtils.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 8
Wrong
========================================================================
False

0
Tree	if ( chars [ i ] == CHAR_CONS chars index [ i ] == CHAR_CONS ) { return JAVA_1_8 && ! anyStringNull ; }
Code	if ( chars [ i ] == CHAR_CONS chars index [ i ] == CHAR_CONS ) { return JAVA_1_8 && ! anyStringNull ; }
Distance : 6

1
Tree	if ( chars [ i ] == CHAR_CONS chars index [ i ] == CHAR_CONS ) { return JAVA_1_8 && ! subtrahendMonth ; }
Code	if ( chars [ i ] == CHAR_CONS chars index [ i ] == CHAR_CONS ) { return JAVA_1_8 && ! subtrahendMonth ; }
Distance : 6

2
Tree	if ( chars [ i ] == CHAR_CONS chars index [ i ] == CHAR_CONS ) { return JAVA_1_8 && ! bestFitness ; }
Code	if ( chars [ i ] == CHAR_CONS chars index [ i ] == CHAR_CONS ) { return JAVA_1_8 && ! bestFitness ; }
Distance : 6

3
Tree	if ( chars [ i ] == CHAR_CONS chars index [ i ] == CHAR_CONS ) { return JAVA_1_8 && ! isDefinedInSrc ; }
Code	if ( chars [ i ] == CHAR_CONS chars index [ i ] == CHAR_CONS ) { return JAVA_1_8 && ! isDefinedInSrc ; }
Distance : 6

4
Tree	if ( chars [ i ] == CHAR_CONS chars Matcher [ i ] == CHAR_CONS ) { return JAVA_1_8 && ! anyStringNull ; }
Code	if ( chars [ i ] == CHAR_CONS chars Matcher [ i ] == CHAR_CONS ) { return JAVA_1_8 && ! anyStringNull ; }
Distance : 6

5
Tree	if ( chars [ i ] == CHAR_CONS chars index [ i ] == CHAR_CONS ) { return OBJECTS_SAME_STRING && ! anyStringNull ; }
Code	if ( chars [ i ] == CHAR_CONS chars index [ i ] == CHAR_CONS ) { return OBJECTS_SAME_STRING && ! anyStringNull ; }
Distance : 6

6
Tree	if ( chars [ i ] == CHAR_CONS chars index [ i ] == CHAR_CONS ) { return ZERO && ! anyStringNull ; }
Code	if ( chars [ i ] == CHAR_CONS chars index [ i ] == CHAR_CONS ) { return ZERO && ! anyStringNull ; }
Distance : 6

7
Tree	if ( chars [ i ] == CHAR_CONS chars Object [ i ] == CHAR_CONS ) { return JAVA_1_8 && ! anyStringNull ; }
Code	if ( chars [ i ] == CHAR_CONS chars Object [ i ] == CHAR_CONS ) { return JAVA_1_8 && ! anyStringNull ; }
Distance : 6

========================================================================


========================================================================
Example Number: 48
Parent Code is: 
cal1 . get ( Calendar.HOUR ) == cal2 . get ( Calendar.HOUR )
-------------------------------------------------------------------------------
Child code is: 
cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (32 (800{val=cal1}) (235{val=.}) (802{val=get}) (214{val=(}) (40{val=Calendar.HOUR}) (215{val=)})) (236{val===}) (32 (800{val=cal2}) (235{val=.}) (802{val=get}) (214{val=(}) (40{val=Calendar.HOUR}) (215{val=)}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (32 (800{val=cal1}) (235{val=.}) (802{val=get}) (214{val=(}) (40{val=Calendar.HOUR_OF_DAY}) (215{val=)})) (236{val===}) (32 (800{val=cal2}) (235{val=.}) (802{val=get}) (214{val=(}) (40{val=Calendar.HOUR_OF_DAY}) (215{val=)}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/21/parent/src_main_java_org_apache_commons_lang3_time_DateUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	objectMethodsGuru < ImageMapUtils . get ( Token.LABEL_NAME ) . get ( TokenType.OPEN_ANGLE )
Code	objectMethodsGuru < ImageMapUtils . get ( Token.LABEL_NAME ) . get ( TokenType.OPEN_ANGLE )
Distance : 7

1
Tree	objectMethodsGuru && enclosing . get ( Token.LABEL_NAME ) && super
Code	objectMethodsGuru && enclosing . get ( Token.LABEL_NAME ) && super
Distance : 11

2
Tree	objectMethodsGuru && IOUtil . get ( Token.LABEL_NAME ) && super
Code	objectMethodsGuru && IOUtil . get ( Token.LABEL_NAME ) && super
Distance : 11

3
Tree	STRING_CONSTANT + zipFile1 + STRING_CONSTANT + IOUtil . get ( other.mockRef ) . get ( other.mockRef )
Code	STRING_CONSTANT + zipFile1 + STRING_CONSTANT + IOUtil . get ( other.mockRef ) . get ( other.mockRef )
Distance : 11

4
Tree	objectMethodsGuru < ImageMapUtils . get ( Token.LABEL_NAME ) . get ( Token.LABEL_NAME )
Code	objectMethodsGuru < ImageMapUtils . get ( Token.LABEL_NAME ) . get ( Token.LABEL_NAME )
Distance : 7

5
Tree	objectMethodsGuru < ImageMapUtils . get ( Level.FINE ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS )
Code	objectMethodsGuru < ImageMapUtils . get ( Level.FINE ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS )
Distance : 7

6
Tree	objectMethodsGuru < ImageMapUtils . get ( Level.FINE ) . get ( TokenType.OPEN_ANGLE )
Code	objectMethodsGuru < ImageMapUtils . get ( Level.FINE ) . get ( TokenType.OPEN_ANGLE )
Distance : 7

7
Tree	objectMethodsGuru . get ( c.invocationMarker ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) cal2 iChronology.MILLIS_PER_DAY ( Locale.ROOT
Code	objectMethodsGuru . get ( c.invocationMarker ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) cal2 iChronology.MILLIS_PER_DAY ( Locale.ROOT
Distance : 9

8
Tree	objectMethodsGuru . get ( Level.FINE ) cal2 other.liveSet cal2 other.liveSet + super
Code	objectMethodsGuru . get ( Level.FINE ) cal2 other.liveSet cal2 other.liveSet + super
Distance : 8

9
Tree	objectMethodsGuru . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) cal2 other.liveSet cal2 other.liveSet + super
Code	objectMethodsGuru . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) cal2 other.liveSet cal2 other.liveSet + super
Distance : 8

10
Tree	objectMethodsGuru . get ( c.invocationMarker ) cal2 other.liveSet cal2 iChronology.MILLIS_PER_DAY + super
Code	objectMethodsGuru . get ( c.invocationMarker ) cal2 other.liveSet cal2 iChronology.MILLIS_PER_DAY + super
Distance : 8

11
Tree	objectMethodsGuru . get ( c.invocationMarker ) cal2 iChronology.MILLIS_PER_DAY cal2 other.liveSet + super
Code	objectMethodsGuru . get ( c.invocationMarker ) cal2 iChronology.MILLIS_PER_DAY cal2 other.liveSet + super
Distance : 8

12
Tree	objectMethodsGuru < ImageMapUtils . get ( Token.LABEL_NAME ) . get ( v.index )
Code	objectMethodsGuru < ImageMapUtils . get ( Token.LABEL_NAME ) . get ( v.index )
Distance : 7

13
Tree	objectMethodsGuru . get ( Level.FINE ) cal2 other.liveSet cal2 iChronology.MILLIS_PER_DAY + super
Code	objectMethodsGuru . get ( Level.FINE ) cal2 other.liveSet cal2 iChronology.MILLIS_PER_DAY + super
Distance : 8

14
Tree	objectMethodsGuru . get ( flags.emitUseStrict ) cal2 other.liveSet cal2 other.liveSet + super
Code	objectMethodsGuru . get ( flags.emitUseStrict ) cal2 other.liveSet cal2 other.liveSet + super
Distance : 8

15
Tree	objectMethodsGuru . get ( RenderingHints.KEY_TEXT_ANTIALIASING ) cal2 other.liveSet cal2 other.liveSet + super
Code	objectMethodsGuru . get ( RenderingHints.KEY_TEXT_ANTIALIASING ) cal2 other.liveSet cal2 other.liveSet + super
Distance : 8

16
Tree	objectMethodsGuru && namespaceToRequire . get ( Token.LABEL_NAME ) . get ( other.mockRef ) && super
Code	objectMethodsGuru && namespaceToRequire . get ( Token.LABEL_NAME ) . get ( other.mockRef ) && super
Distance : 9

17
Tree	objectMethodsGuru && ImageMapUtils . get ( Token.LABEL_NAME ) . get ( other.mockRef ) && super
Code	objectMethodsGuru && ImageMapUtils . get ( Token.LABEL_NAME ) . get ( other.mockRef ) && super
Distance : 9

18
Tree	objectMethodsGuru && namespaceToRequire . get ( Token.LABEL_NAME ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) && super
Code	objectMethodsGuru && namespaceToRequire . get ( Token.LABEL_NAME ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) && super
Distance : 9

19
Tree	objectMethodsGuru && ImageMapUtils . get ( Token.LABEL_NAME ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) && super
Code	objectMethodsGuru && ImageMapUtils . get ( Token.LABEL_NAME ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) && super
Distance : 9

20
Tree	objectMethodsGuru && namespaceToRequire . get ( Token.LABEL_NAME ) . get ( Token.LABEL_NAME ) && super
Code	objectMethodsGuru && namespaceToRequire . get ( Token.LABEL_NAME ) . get ( Token.LABEL_NAME ) && super
Distance : 9

21
Tree	objectMethodsGuru && namespaceToRequire . get ( Level.FINE ) . get ( other.mockRef ) && super
Code	objectMethodsGuru && namespaceToRequire . get ( Level.FINE ) . get ( other.mockRef ) && super
Distance : 9

22
Tree	objectMethodsGuru && ImageMapUtils . get ( Level.FINE ) . get ( other.mockRef ) && super
Code	objectMethodsGuru && ImageMapUtils . get ( Level.FINE ) . get ( other.mockRef ) && super
Distance : 9

23
Tree	objectMethodsGuru && ImageMapUtils . get ( Token.LABEL_NAME ) . get ( Token.LABEL_NAME ) && super
Code	objectMethodsGuru && ImageMapUtils . get ( Token.LABEL_NAME ) . get ( Token.LABEL_NAME ) && super
Distance : 9

24
Tree	STRING_CONSTANT + IOUtil + STRING_CONSTANT + iPeriodConverters . get ( other.mockRef ) . get ( other.mockRef )
Code	STRING_CONSTANT + IOUtil + STRING_CONSTANT + iPeriodConverters . get ( other.mockRef ) . get ( other.mockRef )
Distance : 11

25
Tree	objectMethodsGuru && ImageMapUtils . get ( Token.LABEL_NAME ) && super
Code	objectMethodsGuru && ImageMapUtils . get ( Token.LABEL_NAME ) && super
Distance : 11

26
Tree	objectMethodsGuru < ImageMapUtils . get ( Level.FINE ) . get ( other.mockRef )
Code	objectMethodsGuru < ImageMapUtils . get ( Level.FINE ) . get ( other.mockRef )
Distance : 7

27
Tree	objectMethodsGuru < ImageMapUtils . get ( Token.LABEL_NAME ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS )
Code	objectMethodsGuru < ImageMapUtils . get ( Token.LABEL_NAME ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS )
Distance : 7

28
Tree	objectMethodsGuru && namespaceToRequire . get ( Level.FINE ) && super
Code	objectMethodsGuru && namespaceToRequire . get ( Level.FINE ) && super
Distance : 11

29
Tree	objectMethodsGuru && ImageMapUtils . get ( Level.FINE ) && super
Code	objectMethodsGuru && ImageMapUtils . get ( Level.FINE ) && super
Distance : 11

30
Tree	objectMethodsGuru && namespaceToRequire . get ( Feature.MODULES ) && super
Code	objectMethodsGuru && namespaceToRequire . get ( Feature.MODULES ) && super
Distance : 11

31
Tree	objectMethodsGuru && ImageMapUtils . get ( Feature.MODULES ) && super
Code	objectMethodsGuru && ImageMapUtils . get ( Feature.MODULES ) && super
Distance : 11

32
Tree	objectMethodsGuru . get ( c.invocationMarker ) != nextTime
Code	objectMethodsGuru . get ( c.invocationMarker ) != nextTime
Distance : 9

33
Tree	objectMethodsGuru . get ( c.invocationMarker ) == get ( OverlayChangeListener )
Code	objectMethodsGuru . get ( c.invocationMarker ) == get ( OverlayChangeListener )
Distance : 5

34
Tree	objectMethodsGuru . get ( c.invocationMarker ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) - &
Code	objectMethodsGuru . get ( c.invocationMarker ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) - &
Distance : 7

35
Tree	STRING_CONSTANT + zipFile1 + STRING_CONSTANT + IOUtil . get ( other.mockRef )
Code	STRING_CONSTANT + zipFile1 + STRING_CONSTANT + IOUtil . get ( other.mockRef )
Distance : 9

36
Tree	objectMethodsGuru . get ( c.invocationMarker ) - enclosing . get ( Token.LABEL_NAME )
Code	objectMethodsGuru . get ( c.invocationMarker ) - enclosing . get ( Token.LABEL_NAME )
Distance : 5

37
Tree	objectMethodsGuru . get ( c.invocationMarker ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) - extends
Code	objectMethodsGuru . get ( c.invocationMarker ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) - extends
Distance : 7

38
Tree	objectMethodsGuru . get ( Level.FINE ) != TokenStream
Code	objectMethodsGuru . get ( Level.FINE ) != TokenStream
Distance : 9

39
Tree	objectMethodsGuru . get ( Level.FINE ) != nextTime
Code	objectMethodsGuru . get ( Level.FINE ) != nextTime
Distance : 9

40
Tree	objectMethodsGuru . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) < NUMBER_CONSTANT
Code	objectMethodsGuru . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) < NUMBER_CONSTANT
Distance : 9

41
Tree	objectMethodsGuru . get ( str.buffer ) - NUMBER_CONSTANT
Code	objectMethodsGuru . get ( str.buffer ) - NUMBER_CONSTANT
Distance : 9

42
Tree	bundler . get ( c.invocationMarker ) - NUMBER_CONSTANT
Code	bundler . get ( c.invocationMarker ) - NUMBER_CONSTANT
Distance : 9

43
Tree	objectMethodsGuru < ImageMapUtils . get ( Token.LABEL_NAME )
Code	objectMethodsGuru < ImageMapUtils . get ( Token.LABEL_NAME )
Distance : 9

44
Tree	objectMethodsGuru . get ( c.invocationMarker ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) < ^
Code	objectMethodsGuru . get ( c.invocationMarker ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) < ^
Distance : 7

45
Tree	objectMethodsGuru . get ( Level.FINE ) * get ( CHAR_COPY )
Code	objectMethodsGuru . get ( Level.FINE ) * get ( CHAR_COPY )
Distance : 6

46
Tree	objectMethodsGuru . get ( c.invocationMarker ) * TokenStream . get ( Token.LABEL_NAME )
Code	objectMethodsGuru . get ( c.invocationMarker ) * TokenStream . get ( Token.LABEL_NAME )
Distance : 5

47
Tree	objectMethodsGuru . get ( flags.emitUseStrict ) < NUMBER_CONSTANT
Code	objectMethodsGuru . get ( flags.emitUseStrict ) < NUMBER_CONSTANT
Distance : 9

48
Tree	objectMethodsGuru . get ( Level.FINE ) == get ( listener1 )
Code	objectMethodsGuru . get ( Level.FINE ) == get ( listener1 )
Distance : 5

49
Tree	objectMethodsGuru . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) * get ( CHAR_COPY )
Code	objectMethodsGuru . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) * get ( CHAR_COPY )
Distance : 6

50
Tree	objectMethodsGuru . get ( c.invocationMarker ) * TokenStream . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS )
Code	objectMethodsGuru . get ( c.invocationMarker ) * TokenStream . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS )
Distance : 5

51
Tree	objectMethodsGuru . get ( Level.FINE ) * TokenStream . get ( Token.LABEL_NAME )
Code	objectMethodsGuru . get ( Level.FINE ) * TokenStream . get ( Token.LABEL_NAME )
Distance : 5

52
Tree	objectMethodsGuru . get ( RenderingHints.KEY_TEXT_ANTIALIASING ) < NUMBER_CONSTANT
Code	objectMethodsGuru . get ( RenderingHints.KEY_TEXT_ANTIALIASING ) < NUMBER_CONSTANT
Distance : 9

53
Tree	objectMethodsGuru . get ( Feature.MODULES ) < NUMBER_CONSTANT
Code	objectMethodsGuru . get ( Feature.MODULES ) < NUMBER_CONSTANT
Distance : 9

54
Tree	objectMethodsGuru . get ( c.invocationMarker ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) < ^
Code	objectMethodsGuru . get ( c.invocationMarker ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) < ^
Distance : 7

55
Tree	objectMethodsGuru . get ( Level.FINE ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) < ^
Code	objectMethodsGuru . get ( Level.FINE ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) < ^
Distance : 7

56
Tree	objectMethodsGuru . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) * TokenStream . get ( Token.LABEL_NAME )
Code	objectMethodsGuru . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) * TokenStream . get ( Token.LABEL_NAME )
Distance : 5

57
Tree	objectMethodsGuru . get ( c.invocationMarker ) . get ( other.mockRef ) < ^
Code	objectMethodsGuru . get ( c.invocationMarker ) . get ( other.mockRef ) < ^
Distance : 7

58
Tree	objectMethodsGuru . get ( c.invocationMarker ) . get ( v.index ) < ^
Code	objectMethodsGuru . get ( c.invocationMarker ) . get ( v.index ) < ^
Distance : 7

59
Tree	objectMethodsGuru . get ( Level.FINE ) - NUMBER_CONSTANT
Code	objectMethodsGuru . get ( Level.FINE ) - NUMBER_CONSTANT
Distance : 9

60
Tree	objectMethodsGuru . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) < ^
Code	objectMethodsGuru . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) < ^
Distance : 7

61
Tree	NUMBER_CONSTANT / enclosing . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS )
Code	NUMBER_CONSTANT / enclosing . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS )
Distance : 9

62
Tree	objectMethodsGuru . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) - NUMBER_CONSTANT
Code	objectMethodsGuru . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) - NUMBER_CONSTANT
Distance : 9

63
Tree	objectMethodsGuru . get ( c.invocationMarker ) < NUMBER_CONSTANT
Code	objectMethodsGuru . get ( c.invocationMarker ) < NUMBER_CONSTANT
Distance : 9

64
Tree	objectMethodsGuru . get ( c.invocationMarker ) . get ( Token.LABEL_NAME ) < ^
Code	objectMethodsGuru . get ( c.invocationMarker ) . get ( Token.LABEL_NAME ) < ^
Distance : 7

65
Tree	objectMethodsGuru . get ( flags.emitUseStrict ) - NUMBER_CONSTANT
Code	objectMethodsGuru . get ( flags.emitUseStrict ) - NUMBER_CONSTANT
Distance : 9

66
Tree	objectMethodsGuru . get ( c.invocationMarker ) . get ( TokenType.OPEN_ANGLE ) < ^
Code	objectMethodsGuru . get ( c.invocationMarker ) . get ( TokenType.OPEN_ANGLE ) < ^
Distance : 7

67
Tree	objectMethodsGuru . get ( c.invocationMarker ) < <=
Code	objectMethodsGuru . get ( c.invocationMarker ) < <=
Distance : 9

68
Tree	objectMethodsGuru . get ( c.invocationMarker ) < CHAR_CONS
Code	objectMethodsGuru . get ( c.invocationMarker ) < CHAR_CONS
Distance : 9

69
Tree	objectMethodsGuru . get ( Level.FINE ) < <=
Code	objectMethodsGuru . get ( Level.FINE ) < <=
Distance : 9

70
Tree	objectMethodsGuru . get ( Level.FINE ) < CHAR_CONS
Code	objectMethodsGuru . get ( Level.FINE ) < CHAR_CONS
Distance : 9

71
Tree	objectMethodsGuru . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) < CHAR_CONS
Code	objectMethodsGuru . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) < CHAR_CONS
Distance : 9

72
Tree	objectMethodsGuru . get ( Level.FINE ) < NUMBER_CONSTANT
Code	objectMethodsGuru . get ( Level.FINE ) < NUMBER_CONSTANT
Distance : 9

73
Tree	objectMethodsGuru . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) < <=
Code	objectMethodsGuru . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) < <=
Distance : 9

74
Tree	objectMethodsGuru . get ( c.invocationMarker ) - NUMBER_CONSTANT
Code	objectMethodsGuru . get ( c.invocationMarker ) - NUMBER_CONSTANT
Distance : 9

75
Tree	objectMethodsGuru < ImageMapUtils . get ( Level.FINE )
Code	objectMethodsGuru < ImageMapUtils . get ( Level.FINE )
Distance : 9

76
Tree	NUMBER_CONSTANT / enclosing . get ( Token.LABEL_NAME )
Code	NUMBER_CONSTANT / enclosing . get ( Token.LABEL_NAME )
Distance : 9

77
Tree	objectMethodsGuru . get ( RenderingHints.KEY_TEXT_ANTIALIASING ) - NUMBER_CONSTANT
Code	objectMethodsGuru . get ( RenderingHints.KEY_TEXT_ANTIALIASING ) - NUMBER_CONSTANT
Distance : 9

78
Tree	objectMethodsGuru . get ( str.buffer ) < NUMBER_CONSTANT
Code	objectMethodsGuru . get ( str.buffer ) < NUMBER_CONSTANT
Distance : 9

79
Tree	objectMethodsGuru . get ( Level.FINE ) . get ( other.mockRef ) < ^
Code	objectMethodsGuru . get ( Level.FINE ) . get ( other.mockRef ) < ^
Distance : 7

80
Tree	STRING_CONSTANT + enclosing + STRING_CONSTANT + IOUtil . get ( other.mockRef ) . get ( other.mockRef )
Code	STRING_CONSTANT + enclosing + STRING_CONSTANT + IOUtil . get ( other.mockRef ) . get ( other.mockRef )
Distance : 11

81
Tree	objectMethodsGuru . get ( c.invocationMarker ) - templateLineno . get ( Token.LABEL_NAME )
Code	objectMethodsGuru . get ( c.invocationMarker ) - templateLineno . get ( Token.LABEL_NAME )
Distance : 5

82
Tree	objectMethodsGuru . get ( flags.emitUseStrict ) < CHAR_CONS
Code	objectMethodsGuru . get ( flags.emitUseStrict ) < CHAR_CONS
Distance : 9

83
Tree	objectMethodsGuru . get ( c.invocationMarker ) . get ( TokenType.OPEN_ANGLE ) < ^
Code	objectMethodsGuru . get ( c.invocationMarker ) . get ( TokenType.OPEN_ANGLE ) < ^
Distance : 7

84
Tree	bundler . get ( c.invocationMarker ) < NUMBER_CONSTANT
Code	bundler . get ( c.invocationMarker ) < NUMBER_CONSTANT
Distance : 9

85
Tree	objectMethodsGuru < ImageMapUtils . get ( Feature.MODULES )
Code	objectMethodsGuru < ImageMapUtils . get ( Feature.MODULES )
Distance : 9

86
Tree	objectMethodsGuru . get ( flags.emitUseStrict ) < <=
Code	objectMethodsGuru . get ( flags.emitUseStrict ) < <=
Distance : 9

87
Tree	objectMethodsGuru . get ( Level.FINE ) == get ( OverlayChangeListener )
Code	objectMethodsGuru . get ( Level.FINE ) == get ( OverlayChangeListener )
Distance : 5

88
Tree	objectMethodsGuru . get ( Level.FINE ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) - &
Code	objectMethodsGuru . get ( Level.FINE ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) - &
Distance : 7

89
Tree	NUMBER_CONSTANT / errorType . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS )
Code	NUMBER_CONSTANT / errorType . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS )
Distance : 9

90
Tree	objectMethodsGuru . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) != TokenStream
Code	objectMethodsGuru . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) != TokenStream
Distance : 9

91
Tree	objectMethodsGuru < ImageMapUtils . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS )
Code	objectMethodsGuru < ImageMapUtils . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS )
Distance : 9

92
Tree	objectMethodsGuru . get ( Feature.MODULES ) - NUMBER_CONSTANT
Code	objectMethodsGuru . get ( Feature.MODULES ) - NUMBER_CONSTANT
Distance : 9

93
Tree	objectMethodsGuru . get ( Level.FINE ) == IOUtil . get ( Token.LABEL_NAME )
Code	objectMethodsGuru . get ( Level.FINE ) == IOUtil . get ( Token.LABEL_NAME )
Distance : 4

94
Tree	objectMethodsGuru . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) != nextTime
Code	objectMethodsGuru . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) != nextTime
Distance : 9

95
Tree	objectMethodsGuru . get ( Level.FINE ) . get ( other.mockRef ) < ^
Code	objectMethodsGuru . get ( Level.FINE ) . get ( other.mockRef ) < ^
Distance : 7

96
Tree	objectMethodsGuru . get ( c.invocationMarker ) . get ( v.index ) < ^
Code	objectMethodsGuru . get ( c.invocationMarker ) . get ( v.index ) < ^
Distance : 7

97
Tree	NUMBER_CONSTANT / errorType . get ( Token.LABEL_NAME )
Code	NUMBER_CONSTANT / errorType . get ( Token.LABEL_NAME )
Distance : 9

98
Tree	STRING_CONSTANT + IOUtil + STRING_CONSTANT + IOUtil . get ( other.mockRef ) . get ( other.mockRef )
Code	STRING_CONSTANT + IOUtil + STRING_CONSTANT + IOUtil . get ( other.mockRef ) . get ( other.mockRef )
Distance : 11

99
Tree	objectMethodsGuru . get ( Level.FINE ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) - &
Code	objectMethodsGuru . get ( Level.FINE ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) - &
Distance : 7

100
Tree	objectMethodsGuru . get ( Level.FINE ) - enclosing . get ( Token.LABEL_NAME )
Code	objectMethodsGuru . get ( Level.FINE ) - enclosing . get ( Token.LABEL_NAME )
Distance : 5

101
Tree	STRING_CONSTANT + enclosing + STRING_CONSTANT + iPeriodConverters . get ( other.mockRef )
Code	STRING_CONSTANT + enclosing + STRING_CONSTANT + iPeriodConverters . get ( other.mockRef )
Distance : 9

102
Tree	objectMethodsGuru . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) == IOUtil . get ( Token.LABEL_NAME )
Code	objectMethodsGuru . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) == IOUtil . get ( Token.LABEL_NAME )
Distance : 4

103
Tree	objectMethodsGuru . get ( c.invocationMarker ) . get ( other.mockRef ) - &
Code	objectMethodsGuru . get ( c.invocationMarker ) . get ( other.mockRef ) - &
Distance : 7

104
Tree	STRING_CONSTANT + namespaceToRequire . get ( Level.FINE ) . get ( other.mockRef )
Code	STRING_CONSTANT + namespaceToRequire . get ( Level.FINE ) . get ( other.mockRef )
Distance : 7

105
Tree	STRING_CONSTANT + enclosing + STRING_CONSTANT + IOUtil . get ( other.mockRef )
Code	STRING_CONSTANT + enclosing + STRING_CONSTANT + IOUtil . get ( other.mockRef )
Distance : 9

106
Tree	objectMethodsGuru . get ( RenderingHints.KEY_TEXT_ANTIALIASING ) == IOUtil . get ( Token.LABEL_NAME )
Code	objectMethodsGuru . get ( RenderingHints.KEY_TEXT_ANTIALIASING ) == IOUtil . get ( Token.LABEL_NAME )
Distance : 4

107
Tree	objectMethodsGuru . get ( Feature.MODULES ) == IOUtil . get ( Token.LABEL_NAME )
Code	objectMethodsGuru . get ( Feature.MODULES ) == IOUtil . get ( Token.LABEL_NAME )
Distance : 4

108
Tree	objectMethodsGuru < ImageMapUtils . get ( Token.LABEL_NAME ) . get ( other.mockRef )
Code	objectMethodsGuru < ImageMapUtils . get ( Token.LABEL_NAME ) . get ( other.mockRef )
Distance : 7

109
Tree	STRING_CONSTANT + enclosing + STRING_CONSTANT + iPeriodConverters . get ( other.mockRef ) . get ( other.mockRef )
Code	STRING_CONSTANT + enclosing + STRING_CONSTANT + iPeriodConverters . get ( other.mockRef ) . get ( other.mockRef )
Distance : 11

110
Tree	STRING_CONSTANT + IOUtil + STRING_CONSTANT + IOUtil . get ( other.mockRef )
Code	STRING_CONSTANT + IOUtil + STRING_CONSTANT + IOUtil . get ( other.mockRef )
Distance : 9

111
Tree	objectMethodsGuru . get ( c.invocationMarker ) * get ( testBean )
Code	objectMethodsGuru . get ( c.invocationMarker ) * get ( testBean )
Distance : 6

112
Tree	STRING_CONSTANT + enclosing . get ( Level.FINE ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS )
Code	STRING_CONSTANT + enclosing . get ( Level.FINE ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS )
Distance : 7

113
Tree	objectMethodsGuru . get ( c.invocationMarker ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) - &
Code	objectMethodsGuru . get ( c.invocationMarker ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) - &
Distance : 7

114
Tree	STRING_CONSTANT + iPeriodConverters + STRING_CONSTANT + IOUtil . get ( other.mockRef )
Code	STRING_CONSTANT + iPeriodConverters + STRING_CONSTANT + IOUtil . get ( other.mockRef )
Distance : 9

115
Tree	objectMethodsGuru . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) < ^
Code	objectMethodsGuru . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) < ^
Distance : 7

116
Tree	STRING_CONSTANT + mayUseMap . get ( Level.FINE ) . get ( other.mockRef )
Code	STRING_CONSTANT + mayUseMap . get ( Level.FINE ) . get ( other.mockRef )
Distance : 7

117
Tree	objectMethodsGuru . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) == get ( OverlayChangeListener )
Code	objectMethodsGuru . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) == get ( OverlayChangeListener )
Distance : 5

118
Tree	objectMethodsGuru . get ( str.buffer ) == IOUtil . get ( Token.LABEL_NAME )
Code	objectMethodsGuru . get ( str.buffer ) == IOUtil . get ( Token.LABEL_NAME )
Distance : 4

119
Tree	objectMethodsGuru . get ( c.invocationMarker ) . get ( Token.LABEL_NAME ) < ^
Code	objectMethodsGuru . get ( c.invocationMarker ) . get ( Token.LABEL_NAME ) < ^
Distance : 7

120
Tree	STRING_CONSTANT + enclosing . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) . get ( other.mockRef )
Code	STRING_CONSTANT + enclosing . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) . get ( other.mockRef )
Distance : 7

121
Tree	objectMethodsGuru . get ( flags.emitUseStrict ) * TokenStream . get ( Token.LABEL_NAME )
Code	objectMethodsGuru . get ( flags.emitUseStrict ) * TokenStream . get ( Token.LABEL_NAME )
Distance : 5

122
Tree	bundler . get ( c.invocationMarker ) == IOUtil . get ( Token.LABEL_NAME )
Code	bundler . get ( c.invocationMarker ) == IOUtil . get ( Token.LABEL_NAME )
Distance : 4

123
Tree	STRING_CONSTANT + enclosing . get ( Level.FINE ) . get ( other.mockRef )
Code	STRING_CONSTANT + enclosing . get ( Level.FINE ) . get ( other.mockRef )
Distance : 7

124
Tree	STRING_CONSTANT + IOUtil . get ( Level.FINE ) . get ( other.mockRef )
Code	STRING_CONSTANT + IOUtil . get ( Level.FINE ) . get ( other.mockRef )
Distance : 7

125
Tree	objectMethodsGuru . get ( c.invocationMarker ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) - extends
Code	objectMethodsGuru . get ( c.invocationMarker ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) - extends
Distance : 7

126
Tree	STRING_CONSTANT + IOUtil + STRING_CONSTANT + iPeriodConverters . get ( other.mockRef )
Code	STRING_CONSTANT + IOUtil + STRING_CONSTANT + iPeriodConverters . get ( other.mockRef )
Distance : 9

127
Tree	STRING_CONSTANT + iPeriodConverters + STRING_CONSTANT + IOUtil . get ( other.mockRef ) . get ( other.mockRef )
Code	STRING_CONSTANT + iPeriodConverters + STRING_CONSTANT + IOUtil . get ( other.mockRef ) . get ( other.mockRef )
Distance : 11

128
Tree	STRING_CONSTANT + namespaceToRequire + STRING_CONSTANT + IOUtil . get ( other.mockRef )
Code	STRING_CONSTANT + namespaceToRequire + STRING_CONSTANT + IOUtil . get ( other.mockRef )
Distance : 9

129
Tree	STRING_CONSTANT + enclosing . get ( Token.LABEL_NAME ) . get ( other.mockRef )
Code	STRING_CONSTANT + enclosing . get ( Token.LABEL_NAME ) . get ( other.mockRef )
Distance : 7

130
Tree	objectMethodsGuru . get ( c.invocationMarker ) * get ( OverlayChangeListener )
Code	objectMethodsGuru . get ( c.invocationMarker ) * get ( OverlayChangeListener )
Distance : 6

131
Tree	objectMethodsGuru && namespaceToRequire . get ( Token.LABEL_NAME ) && super
Code	objectMethodsGuru && namespaceToRequire . get ( Token.LABEL_NAME ) && super
Distance : 11

132
Tree	objectMethodsGuru . get ( Level.FINE ) * TokenStream . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS )
Code	objectMethodsGuru . get ( Level.FINE ) * TokenStream . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS )
Distance : 5

133
Tree	objectMethodsGuru . get ( c.invocationMarker ) * enclosing . get ( Token.LABEL_NAME )
Code	objectMethodsGuru . get ( c.invocationMarker ) * enclosing . get ( Token.LABEL_NAME )
Distance : 5

134
Tree	objectMethodsGuru . get ( c.invocationMarker ) != TokenStream
Code	objectMethodsGuru . get ( c.invocationMarker ) != TokenStream
Distance : 9

135
Tree	STRING_CONSTANT + mayUseMap + STRING_CONSTANT + IOUtil . get ( other.mockRef )
Code	STRING_CONSTANT + mayUseMap + STRING_CONSTANT + IOUtil . get ( other.mockRef )
Distance : 9

136
Tree	STRING_CONSTANT + IOUtil . get ( Token.LABEL_NAME ) . get ( other.mockRef )
Code	STRING_CONSTANT + IOUtil . get ( Token.LABEL_NAME ) . get ( other.mockRef )
Distance : 7

137
Tree	objectMethodsGuru . get ( flags.emitUseStrict ) * get ( CHAR_COPY )
Code	objectMethodsGuru . get ( flags.emitUseStrict ) * get ( CHAR_COPY )
Distance : 6

138
Tree	objectMethodsGuru . get ( c.invocationMarker ) . get ( other.mockRef ) - extends
Code	objectMethodsGuru . get ( c.invocationMarker ) . get ( other.mockRef ) - extends
Distance : 7

139
Tree	objectMethodsGuru . get ( c.invocationMarker ) != IOUtil
Code	objectMethodsGuru . get ( c.invocationMarker ) != IOUtil
Distance : 9

140
Tree	objectMethodsGuru . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) * TokenStream . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS )
Code	objectMethodsGuru . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) * TokenStream . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS )
Distance : 5

141
Tree	objectMethodsGuru . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) - enclosing . get ( Token.LABEL_NAME )
Code	objectMethodsGuru . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) - enclosing . get ( Token.LABEL_NAME )
Distance : 5

142
Tree	objectMethodsGuru . get ( Level.FINE ) - templateLineno . get ( Token.LABEL_NAME )
Code	objectMethodsGuru . get ( Level.FINE ) - templateLineno . get ( Token.LABEL_NAME )
Distance : 5

143
Tree	objectMethodsGuru . get ( c.invocationMarker ) == IOUtil . get ( Token.LABEL_NAME )
Code	objectMethodsGuru . get ( c.invocationMarker ) == IOUtil . get ( Token.LABEL_NAME )
Distance : 4

144
Tree	objectMethodsGuru . get ( c.invocationMarker ) - stdErrors . get ( Token.LABEL_NAME )
Code	objectMethodsGuru . get ( c.invocationMarker ) - stdErrors . get ( Token.LABEL_NAME )
Distance : 5

145
Tree	objectMethodsGuru . get ( Level.FINE ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) < ^
Code	objectMethodsGuru . get ( Level.FINE ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) < ^
Distance : 7

146
Tree	objectMethodsGuru . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) - templateLineno . get ( Token.LABEL_NAME )
Code	objectMethodsGuru . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) - templateLineno . get ( Token.LABEL_NAME )
Distance : 5

147
Tree	objectMethodsGuru . get ( RenderingHints.KEY_TEXT_ANTIALIASING ) * get ( CHAR_COPY )
Code	objectMethodsGuru . get ( RenderingHints.KEY_TEXT_ANTIALIASING ) * get ( CHAR_COPY )
Distance : 6

148
Tree	objectMethodsGuru . get ( flags.emitUseStrict ) != TokenStream
Code	objectMethodsGuru . get ( flags.emitUseStrict ) != TokenStream
Distance : 9

149
Tree	objectMethodsGuru . get ( Level.FINE ) == get ( testBean )
Code	objectMethodsGuru . get ( Level.FINE ) == get ( testBean )
Distance : 5

150
Tree	objectMethodsGuru . get ( c.invocationMarker ) . get ( other.mockRef ) < ^
Code	objectMethodsGuru . get ( c.invocationMarker ) . get ( other.mockRef ) < ^
Distance : 7

151
Tree	objectMethodsGuru . get ( Feature.MODULES ) * get ( CHAR_COPY )
Code	objectMethodsGuru . get ( Feature.MODULES ) * get ( CHAR_COPY )
Distance : 6

152
Tree	objectMethodsGuru . get ( c.invocationMarker ) . get ( other.mockRef ) - &
Code	objectMethodsGuru . get ( c.invocationMarker ) . get ( other.mockRef ) - &
Distance : 7

153
Tree	objectMethodsGuru . get ( c.invocationMarker ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) cal2 other.liveSet get Locale.ROOT
Code	objectMethodsGuru . get ( c.invocationMarker ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) cal2 other.liveSet get Locale.ROOT
Distance : 9

154
Tree	objectMethodsGuru . get ( c.invocationMarker ) . get ( v.index ) cal2 other.liveSet ( Locale.ROOT
Code	objectMethodsGuru . get ( c.invocationMarker ) . get ( v.index ) cal2 other.liveSet ( Locale.ROOT
Distance : 9

155
Tree	objectMethodsGuru . get ( Level.FINE ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) cal2 other.liveSet get Locale.ROOT
Code	objectMethodsGuru . get ( Level.FINE ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) cal2 other.liveSet get Locale.ROOT
Distance : 9

156
Tree	objectMethodsGuru . get ( Level.FINE ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) - extends
Code	objectMethodsGuru . get ( Level.FINE ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) - extends
Distance : 7

157
Tree	objectMethodsGuru . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) - &
Code	objectMethodsGuru . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) - &
Distance : 7

158
Tree	objectMethodsGuru . get ( c.invocationMarker ) . get ( Token.LABEL_NAME ) - &
Code	objectMethodsGuru . get ( c.invocationMarker ) . get ( Token.LABEL_NAME ) - &
Distance : 7

159
Tree	objectMethodsGuru . get ( c.invocationMarker ) cal2 other.liveSet cal2 other.liveSet + super
Code	objectMethodsGuru . get ( c.invocationMarker ) cal2 other.liveSet cal2 other.liveSet + super
Distance : 8

160
Tree	objectMethodsGuru . get ( c.invocationMarker ) . get ( other.mockRef ) cal2 other.liveSet ( Locale.ROOT
Code	objectMethodsGuru . get ( c.invocationMarker ) . get ( other.mockRef ) cal2 other.liveSet ( Locale.ROOT
Distance : 9

161
Tree	objectMethodsGuru . get ( c.invocationMarker ) . get ( other.mockRef ) - extends
Code	objectMethodsGuru . get ( c.invocationMarker ) . get ( other.mockRef ) - extends
Distance : 7

162
Tree	objectMethodsGuru . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) cal2 other.liveSet get Locale.ROOT
Code	objectMethodsGuru . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) cal2 other.liveSet get Locale.ROOT
Distance : 9

163
Tree	STRING_CONSTANT + namespaceToRequire + STRING_CONSTANT + IOUtil . get ( other.mockRef ) . get ( other.mockRef )
Code	STRING_CONSTANT + namespaceToRequire + STRING_CONSTANT + IOUtil . get ( other.mockRef ) . get ( other.mockRef )
Distance : 11

164
Tree	NUMBER_CONSTANT / enclosing . get ( v.index )
Code	NUMBER_CONSTANT / enclosing . get ( v.index )
Distance : 9

165
Tree	bundler < ImageMapUtils . get ( Token.LABEL_NAME )
Code	bundler < ImageMapUtils . get ( Token.LABEL_NAME )
Distance : 9

166
Tree	objectMethodsGuru . get ( Level.FINE ) . get ( v.index ) cal2 other.liveSet ( Locale.ROOT
Code	objectMethodsGuru . get ( Level.FINE ) . get ( v.index ) cal2 other.liveSet ( Locale.ROOT
Distance : 9

167
Tree	objectMethodsGuru . get ( flags.emitUseStrict ) == IOUtil . get ( Token.LABEL_NAME )
Code	objectMethodsGuru . get ( flags.emitUseStrict ) == IOUtil . get ( Token.LABEL_NAME )
Distance : 4

168
Tree	objectMethodsGuru . get ( c.invocationMarker ) . get ( Token.LABEL_NAME ) cal2 other.liveSet get Locale.ROOT
Code	objectMethodsGuru . get ( c.invocationMarker ) . get ( Token.LABEL_NAME ) cal2 other.liveSet get Locale.ROOT
Distance : 9

169
Tree	findDeps < ImageMapUtils . get ( Token.LABEL_NAME )
Code	findDeps < ImageMapUtils . get ( Token.LABEL_NAME )
Distance : 9

170
Tree	objectMethodsGuru < AAClass . get ( Token.LABEL_NAME )
Code	objectMethodsGuru < AAClass . get ( Token.LABEL_NAME )
Distance : 9

171
Tree	NUMBER_CONSTANT / enclosing . get ( idToken.value )
Code	NUMBER_CONSTANT / enclosing . get ( idToken.value )
Distance : 9

172
Tree	STRING_CONSTANT + mayUseMap + STRING_CONSTANT + IOUtil . get ( other.mockRef ) . get ( other.mockRef )
Code	STRING_CONSTANT + mayUseMap + STRING_CONSTANT + IOUtil . get ( other.mockRef ) . get ( other.mockRef )
Distance : 11

173
Tree	objectMethodsGuru . get ( Level.FINE ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) - extends
Code	objectMethodsGuru . get ( Level.FINE ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) - extends
Distance : 7

174
Tree	objectMethodsGuru . get ( c.invocationMarker ) - TokenStream . get ( Token.LABEL_NAME )
Code	objectMethodsGuru . get ( c.invocationMarker ) - TokenStream . get ( Token.LABEL_NAME )
Distance : 5

175
Tree	NUMBER_CONSTANT / enclosing . get ( other.mockRef )
Code	NUMBER_CONSTANT / enclosing . get ( other.mockRef )
Distance : 9

176
Tree	objectMethodsGuru . get ( c.invocationMarker ) * get ( CHAR_COPY )
Code	objectMethodsGuru . get ( c.invocationMarker ) * get ( CHAR_COPY )
Distance : 6

177
Tree	objectMethodsGuru . get ( c.invocationMarker ) == get ( testBean )
Code	objectMethodsGuru . get ( c.invocationMarker ) == get ( testBean )
Distance : 5

178
Tree	NUMBER_CONSTANT / namespaceToRequire . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS )
Code	NUMBER_CONSTANT / namespaceToRequire . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS )
Distance : 9

179
Tree	objectMethodsGuru . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) - &
Code	objectMethodsGuru . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) - &
Distance : 7

180
Tree	objectMethodsGuru < ImageMapUtils . get ( c.invocationMarker )
Code	objectMethodsGuru < ImageMapUtils . get ( c.invocationMarker )
Distance : 9

181
Tree	objectMethodsGuru . get ( c.invocationMarker ) == get ( listener1 )
Code	objectMethodsGuru . get ( c.invocationMarker ) == get ( listener1 )
Distance : 5

182
Tree	objectMethodsGuru . get ( c.invocationMarker ) . get ( Token.LABEL_NAME ) - &
Code	objectMethodsGuru . get ( c.invocationMarker ) . get ( Token.LABEL_NAME ) - &
Distance : 7

183
Tree	boolean objectMethodsGuru = NUMBER_CONSTANT / namespaceToRequire . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) ;
Code	boolean objectMethodsGuru = NUMBER_CONSTANT / namespaceToRequire . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) ;
Distance : 10

184
Tree	boolean objectMethodsGuru = NUMBER_CONSTANT / namespaceToRequire . get ( other.mockRef ) ;
Code	boolean objectMethodsGuru = NUMBER_CONSTANT / namespaceToRequire . get ( other.mockRef ) ;
Distance : 10

185
Tree	objectMethodsGuru . get ( c.invocationMarker ) == get ( NUMBER_STRING )
Code	objectMethodsGuru . get ( c.invocationMarker ) == get ( NUMBER_STRING )
Distance : 5

186
Tree	boolean oldRoot = NUMBER_CONSTANT / namespaceToRequire . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) ;
Code	boolean oldRoot = NUMBER_CONSTANT / namespaceToRequire . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) ;
Distance : 10

187
Tree	boolean oldRoot = NUMBER_CONSTANT / namespaceToRequire . get ( other.mockRef ) ;
Code	boolean oldRoot = NUMBER_CONSTANT / namespaceToRequire . get ( other.mockRef ) ;
Distance : 10

188
Tree	boolean typesIndexedByProperty = NUMBER_CONSTANT / namespaceToRequire . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) ;
Code	boolean typesIndexedByProperty = NUMBER_CONSTANT / namespaceToRequire . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) ;
Distance : 10

189
Tree	boolean typesIndexedByProperty = NUMBER_CONSTANT / namespaceToRequire . get ( other.mockRef ) ;
Code	boolean typesIndexedByProperty = NUMBER_CONSTANT / namespaceToRequire . get ( other.mockRef ) ;
Distance : 10

190
Tree	boolean newInput = NUMBER_CONSTANT / namespaceToRequire . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) ;
Code	boolean newInput = NUMBER_CONSTANT / namespaceToRequire . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) ;
Distance : 10

191
Tree	boolean newInput = NUMBER_CONSTANT / namespaceToRequire . get ( other.mockRef ) ;
Code	boolean newInput = NUMBER_CONSTANT / namespaceToRequire . get ( other.mockRef ) ;
Distance : 10

192
Tree	objectMethodsGuru . get ( c.invocationMarker ) cal2 other.liveSet cal2 other.liveSet
Code	objectMethodsGuru . get ( c.invocationMarker ) cal2 other.liveSet cal2 other.liveSet
Distance : 8

193
Tree	objectMethodsGuru . get ( Level.FINE ) cal2 other.liveSet cal2 other.liveSet
Code	objectMethodsGuru . get ( Level.FINE ) cal2 other.liveSet cal2 other.liveSet
Distance : 8

194
Tree	objectMethodsGuru . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) cal2 other.liveSet cal2 other.liveSet
Code	objectMethodsGuru . get ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) cal2 other.liveSet cal2 other.liveSet
Distance : 8

195
Tree	objectMethodsGuru . get ( c.invocationMarker ) cal2 other.liveSet cal2 iChronology.MILLIS_PER_DAY
Code	objectMethodsGuru . get ( c.invocationMarker ) cal2 other.liveSet cal2 iChronology.MILLIS_PER_DAY
Distance : 8

196
Tree	objectMethodsGuru . get ( c.invocationMarker ) cal2 iChronology.MILLIS_PER_DAY cal2 other.liveSet
Code	objectMethodsGuru . get ( c.invocationMarker ) cal2 iChronology.MILLIS_PER_DAY cal2 other.liveSet
Distance : 8

197
Tree	objectMethodsGuru . get ( flags.emitUseStrict ) cal2 other.liveSet cal2 other.liveSet
Code	objectMethodsGuru . get ( flags.emitUseStrict ) cal2 other.liveSet cal2 other.liveSet
Distance : 8

198
Tree	objectMethodsGuru . get ( Level.FINE ) cal2 other.liveSet cal2 iChronology.MILLIS_PER_DAY
Code	objectMethodsGuru . get ( Level.FINE ) cal2 other.liveSet cal2 iChronology.MILLIS_PER_DAY
Distance : 8

199
Tree	objectMethodsGuru . get ( RenderingHints.KEY_TEXT_ANTIALIASING ) cal2 other.liveSet cal2 other.liveSet
Code	objectMethodsGuru . get ( RenderingHints.KEY_TEXT_ANTIALIASING ) cal2 other.liveSet cal2 other.liveSet
Distance : 8

========================================================================


========================================================================
Example Number: 49
Parent Code is: 
{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ pos += Character . charCount ( Character . codePointAt ( input , pt ) ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (7 (800{val=pos}) (237{val=+=}) (32 (800{val=Character}) (235{val=.}) (802{val=charCount}) (214{val=(}) (32 (800{val=Character}) (235{val=.}) (802{val=codePointAt}) (214{val=(}) (800{val=input}) (234{val=,}) (800{val=pos}) (215{val=)})) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (7 (800{val=pos}) (237{val=+=}) (32 (800{val=Character}) (235{val=.}) (802{val=charCount}) (214{val=(}) (32 (800{val=Character}) (235{val=.}) (802{val=codePointAt}) (214{val=(}) (800{val=input}) (234{val=,}) (800{val=pt}) (215{val=)})) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/6/parent/src_main_java_org_apache_commons_lang3_text_translate_CharSequenceTranslator.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ throw sizeStartText ; }
Code	{ throw sizeStartText ; }
Distance : 15

1
Tree	{ pos = Character . createFloat ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos = Character . createFloat ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

2
Tree	{ super(); pos += Character . charCount ( Character . getImageMap ( input , pos ) ) ; super }
Code	{ super(); pos += Character . charCount ( Character . getImageMap ( input , pos ) ) ; super }
Distance : 4

3
Tree	{ throw pos . parseMutableTimePeriod ( Character [ input ] ) ; }
Code	{ throw pos . parseMutableTimePeriod ( Character [ input ] ) ; }
Distance : 10

4
Tree	{ throw new pos ( Character . createDouble ( input . codePointAt ( input , pos ) ) , false ) ; }
Code	{ throw new pos ( Character . createDouble ( input . codePointAt ( input , pos ) ) , false ) ; }
Distance : 9

5
Tree	{ pos += Character . createFloat ( Character . codePointAt ( input , pos ) ) ; return; }
Code	{ pos += Character . createFloat ( Character . codePointAt ( input , pos ) ) ; return; }
Distance : 3

6
Tree	{ pos += Character . hasDuplicateDeclarationSuppression ( Character . codePointAt ( input , pos ) ) ; super }
Code	{ pos += Character . hasDuplicateDeclarationSuppression ( Character . codePointAt ( input , pos ) ) ; super }
Distance : 3

7
Tree	{ pos = Character . createDouble ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos = Character . createDouble ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

8
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 1

9
Tree	{ pos . createDouble ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos . createDouble ( Character . codePointAt ( input , pos ) ) ; }
Distance : 4

10
Tree	{ pos += Character . hasDuplicateDeclarationSuppression ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos += Character . hasDuplicateDeclarationSuppression ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

11
Tree	{ pos += Character . createFloat ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos += Character . createFloat ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

12
Tree	{ pos += Character . createDouble ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos += Character . createDouble ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

13
Tree	{ pos = Character . hasDuplicateDeclarationSuppression ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos = Character . hasDuplicateDeclarationSuppression ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

14
Tree	{ super(); pos += Character . charCount ( Character . getImageMap ( input , pos ) ) ; }
Code	{ super(); pos += Character . charCount ( Character . getImageMap ( input , pos ) ) ; }
Distance : 3

15
Tree	{ throw numerator ; }
Code	{ throw numerator ; }
Distance : 15

16
Tree	{ pos . intersection ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos . intersection ( Character . codePointAt ( input , pos ) ) ; }
Distance : 4

17
Tree	{ pos += Character . charCount ( Character . getImageMap ( input , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . getImageMap ( input , pos ) ) ; }
Distance : 2

18
Tree	{ throw pos . verifyInterval ( Character , pos . getRightElement ( input , pos ) , Character ) ; }
Code	{ throw pos . verifyInterval ( Character , pos . getRightElement ( input , pos ) , Character ) ; }
Distance : 10

19
Tree	{ pos += Character . charCount ( Character . toTitleCase ( input , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . toTitleCase ( input , pos ) ) ; }
Distance : 2

20
Tree	{ super(); pos += Character . charCount ( Character . getGenericReturnType ( input , pos ) ) ; }
Code	{ super(); pos += Character . charCount ( Character . getGenericReturnType ( input , pos ) ) ; }
Distance : 3

21
Tree	{ pos += Character . charCount ( Character . toTitleCase ( input , pos ) ) ; super }
Code	{ pos += Character . charCount ( Character . toTitleCase ( input , pos ) ) ; super }
Distance : 3

22
Tree	{ super(); pos += Character . charCount ( Character . getRightElement ( input , pos ) ) ; }
Code	{ super(); pos += Character . charCount ( Character . getRightElement ( input , pos ) ) ; }
Distance : 3

23
Tree	{ pos += Character . intersection ( Character . codePointAt ( input , pos ) ) ; super }
Code	{ pos += Character . intersection ( Character . codePointAt ( input , pos ) ) ; super }
Distance : 3

24
Tree	{ pos += Character . intersection ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos += Character . intersection ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

25
Tree	{ throw pos . verifyInterval ( Character , pos . codePointAt ( input , pos ) , Character ) ; }
Code	{ throw pos . verifyInterval ( Character , pos . codePointAt ( input , pos ) , Character ) ; }
Distance : 9

26
Tree	{ pos += Character . charCount ( Character . getGenericReturnType ( input , pos ) ) ; super }
Code	{ pos += Character . charCount ( Character . getGenericReturnType ( input , pos ) ) ; super }
Distance : 3

27
Tree	{ pos += Character . charCount ( Character . getGenericReturnType ( input , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . getGenericReturnType ( input , pos ) ) ; }
Distance : 2

28
Tree	{ pos . createFloat ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos . createFloat ( Character . codePointAt ( input , pos ) ) ; }
Distance : 4

29
Tree	{ super(); pos += Character . charCount ( Character . getGenericReturnType ( input , pos ) ) ; super }
Code	{ super(); pos += Character . charCount ( Character . getGenericReturnType ( input , pos ) ) ; super }
Distance : 4

30
Tree	{ throw pos . isException ( Character [ input ] ) ; }
Code	{ throw pos . isException ( Character [ input ] ) ; }
Distance : 10

31
Tree	{ pos . verifyInterval ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos . verifyInterval ( Character . codePointAt ( input , pos ) ) ; }
Distance : 4

32
Tree	{ throw pos . charCount ( Character , pos . toCharArray ( input , pos ) , Character ) ; }
Code	{ throw pos . charCount ( Character , pos . toCharArray ( input , pos ) , Character ) ; }
Distance : 9

33
Tree	{ throw pos . charCount ( Character , pos . helper2 ( input , pos ) , Character ) ; }
Code	{ throw pos . charCount ( Character , pos . helper2 ( input , pos ) , Character ) ; }
Distance : 9

34
Tree	{ pos += Character . createDouble ( Character . codePointAt ( input , pos ) ) ; super }
Code	{ pos += Character . createDouble ( Character . codePointAt ( input , pos ) ) ; super }
Distance : 3

35
Tree	{ throw new pos ( Character . codePointAt ( input . getGenericReturnType ( input , pos ) ) , false ) ; }
Code	{ throw new pos ( Character . codePointAt ( input . getGenericReturnType ( input , pos ) ) , false ) ; }
Distance : 10

36
Tree	{ super(); pos += Character . charCount ( Character . getRightElement ( input , pos ) ) ; super }
Code	{ super(); pos += Character . charCount ( Character . getRightElement ( input , pos ) ) ; super }
Distance : 4

37
Tree	{ throw new MathArithmeticException ( Character . createDouble ( input . codePointAt ( input , pos ) ) , false ) ; }
Code	{ throw new MathArithmeticException ( Character . createDouble ( input . codePointAt ( input , pos ) ) , false ) ; }
Distance : 10

38
Tree	{ throw new TestObject ( Character , false ) ; }
Code	{ throw new TestObject ( Character , false ) ; }
Distance : 11

39
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; integrator . getResultObject ( Character ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; integrator . getResultObject ( Character ) ; }
Distance : 8

40
Tree	{ throw new BackgroundInitializerTestImpl ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , false ) ; }
Code	{ throw new BackgroundInitializerTestImpl ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , false ) ; }
Distance : 10

41
Tree	{ throw pos . createDouble ( Character [ input ] ) ; }
Code	{ throw pos . createDouble ( Character [ input ] ) ; }
Distance : 10

42
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; integrator . isException ( Character , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; integrator . isException ( Character , pos ) ; }
Distance : 10

43
Tree	{ throw new MutableLong ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , false ) ; }
Code	{ throw new MutableLong ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , false ) ; }
Distance : 10

44
Tree	{ throw new MutableLong ( Character ) ; }
Code	{ throw new MutableLong ( Character ) ; }
Distance : 12

45
Tree	{ throw new pos ( Character . getImageMap ( input . codePointAt ( input , pos ) ) , false ) ; }
Code	{ throw new pos ( Character . getImageMap ( input . codePointAt ( input , pos ) ) , false ) ; }
Distance : 9

46
Tree	{ throw new MathArithmeticException ( Character , false ) ; }
Code	{ throw new MathArithmeticException ( Character , false ) ; }
Distance : 11

47
Tree	{ throw new BackgroundInitializerTestImpl ( Character . codePointAt ( input . codePointAt ( input ) ) , false ) ; }
Code	{ throw new BackgroundInitializerTestImpl ( Character . codePointAt ( input . codePointAt ( input ) ) , false ) ; }
Distance : 10

48
Tree	{ throw new MathArithmeticException ( Character . codePointAt ( input . codePointAt ( input ) ) , false ) ; }
Code	{ throw new MathArithmeticException ( Character . codePointAt ( input . codePointAt ( input ) ) , false ) ; }
Distance : 10

49
Tree	{ pos += Character . charCount ( Character . getGenericReturnType ( input , pos ) ) ; return; }
Code	{ pos += Character . charCount ( Character . getGenericReturnType ( input , pos ) ) ; return; }
Distance : 3

50
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; integrator . charCount ( Character , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; integrator . charCount ( Character , pos ) ; }
Distance : 10

51
Tree	{ throw pos . hasDuplicateDeclarationSuppression ( Character [ input ] ) ; }
Code	{ throw pos . hasDuplicateDeclarationSuppression ( Character [ input ] ) ; }
Distance : 10

52
Tree	{ throw new NotStrictlyPositiveException ( Character ) ; }
Code	{ throw new NotStrictlyPositiveException ( Character ) ; }
Distance : 12

53
Tree	{ throw new File ( Character ) ; }
Code	{ throw new File ( Character ) ; }
Distance : 12

54
Tree	{ throw new ParsePosition () ; }
Code	{ throw new ParsePosition () ; }
Distance : 15

55
Tree	{ throw new BackgroundInitializerTestImpl ( Character ) ; }
Code	{ throw new BackgroundInitializerTestImpl ( Character ) ; }
Distance : 12

56
Tree	{ throw new MathArithmeticException ( STRING_CONSTANT ) ; }
Code	{ throw new MathArithmeticException ( STRING_CONSTANT ) ; }
Distance : 13

57
Tree	{ pos += Character . createDouble ( Character . codePointAt ( input , pos ) ) ; return; }
Code	{ pos += Character . createDouble ( Character . codePointAt ( input , pos ) ) ; return; }
Distance : 3

58
Tree	{ throw new MathArithmeticException ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , false ) ; }
Code	{ throw new MathArithmeticException ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , false ) ; }
Distance : 10

59
Tree	{ throw new MathArithmeticException ( Character * pos ) ; }
Code	{ throw new MathArithmeticException ( Character * pos ) ; }
Distance : 12

60
Tree	{ throw new MutableLong ( STRING_CONSTANT ) ; }
Code	{ throw new MutableLong ( STRING_CONSTANT ) ; }
Distance : 13

61
Tree	{ throw new BackgroundInitializerTestImpl ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , false ) ; }
Code	{ throw new BackgroundInitializerTestImpl ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , false ) ; }
Distance : 12

62
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; integrator . putAll ( Character , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; integrator . putAll ( Character , pos ) ; }
Distance : 10

63
Tree	{ throw new MathArithmeticException ( FastMath.PI ) ; }
Code	{ throw new MathArithmeticException ( FastMath.PI ) ; }
Distance : 13

64
Tree	{ throw new ParsePosition ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , false ) ; }
Code	{ throw new ParsePosition ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , false ) ; }
Distance : 10

65
Tree	{ throw new result ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , false ) ; }
Code	{ throw new result ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , false ) ; }
Distance : 10

66
Tree	{ pos = Character . defaultIfNull ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos = Character . defaultIfNull ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

67
Tree	{ throw new BackgroundInitializerTestImpl ( Character . createDouble ( input , pos . getRightElement ( input ) ) , false ) ; }
Code	{ throw new BackgroundInitializerTestImpl ( Character . createDouble ( input , pos . getRightElement ( input ) ) , false ) ; }
Distance : 13

68
Tree	{ throw new MathArithmeticException ( p1.vector ) ; }
Code	{ throw new MathArithmeticException ( p1.vector ) ; }
Distance : 13

69
Tree	{ throw new MutableLong ( Character , false ) ; }
Code	{ throw new MutableLong ( Character , false ) ; }
Distance : 11

70
Tree	{ throw new result () ; }
Code	{ throw new result () ; }
Distance : 15

71
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; integrator . addLast ( Character , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; integrator . addLast ( Character , pos ) ; }
Distance : 10

72
Tree	{ throw new BackgroundInitializerTestImpl () ; }
Code	{ throw new BackgroundInitializerTestImpl () ; }
Distance : 15

73
Tree	{ throw new MathArithmeticException ( FastMath.PI , pos , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ throw new MathArithmeticException ( FastMath.PI , pos , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 12

74
Tree	{ throw new ParsePosition ( Character . codePointAt ( input . codePointAt ( input ) ) , false ) ; }
Code	{ throw new ParsePosition ( Character . codePointAt ( input . codePointAt ( input ) ) , false ) ; }
Distance : 10

75
Tree	{ throw new result ( Character . codePointAt ( input . codePointAt ( input ) ) , false ) ; }
Code	{ throw new result ( Character . codePointAt ( input . codePointAt ( input ) ) , false ) ; }
Distance : 10

76
Tree	{ throw new TestObject ( STRING_CONSTANT ) ; }
Code	{ throw new TestObject ( STRING_CONSTANT ) ; }
Distance : 13

77
Tree	{ throw new BackgroundInitializerTestImpl ( Character * pos ) ; }
Code	{ throw new BackgroundInitializerTestImpl ( Character * pos ) ; }
Distance : 12

78
Tree	{ throw pos . charCount ( Character , pos . getRightElement ( input , pos ) , Character ) ; }
Code	{ throw pos . charCount ( Character , pos . getRightElement ( input , pos ) , Character ) ; }
Distance : 9

79
Tree	{ throw new MathArithmeticException ( Character . codePointAt ( input , pos . toCharArray ( input ) ) , false ) ; }
Code	{ throw new MathArithmeticException ( Character . codePointAt ( input , pos . toCharArray ( input ) ) , false ) ; }
Distance : 13

80
Tree	{ throw new ParsePosition ( Character ) ; }
Code	{ throw new ParsePosition ( Character ) ; }
Distance : 12

81
Tree	{ throw new ParsePosition ( Character * pos ) ; }
Code	{ throw new ParsePosition ( Character * pos ) ; }
Distance : 12

82
Tree	{ throw new MathArithmeticException ( Character ) ; }
Code	{ throw new MathArithmeticException ( Character ) ; }
Distance : 12

83
Tree	{ throw new MathArithmeticException ( p1.vector , pos , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ throw new MathArithmeticException ( p1.vector , pos , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 12

84
Tree	{ throw new result ( Character * pos ) ; }
Code	{ throw new result ( Character * pos ) ; }
Distance : 12

85
Tree	{ throw new result ( Character ) ; }
Code	{ throw new result ( Character ) ; }
Distance : 12

86
Tree	{ throw new TestObject ( FastMath.PI ) ; }
Code	{ throw new TestObject ( FastMath.PI ) ; }
Distance : 13

87
Tree	{ super(); pos += Character . charCount ( Character . getEvaluations ( input , pos ) ) ; super }
Code	{ super(); pos += Character . charCount ( Character . getEvaluations ( input , pos ) ) ; super }
Distance : 4

88
Tree	{ throw bucket ; }
Code	{ throw bucket ; }
Distance : 15

89
Tree	{ super ( Character . getEvaluations ( input . codePointAt ( input , pos ) ) ) ; ; }
Code	{ super ( Character . getEvaluations ( input . codePointAt ( input , pos ) ) ) ; ; }
Distance : 7

90
Tree	{ throw new NotStrictlyPositiveException () ; }
Code	{ throw new NotStrictlyPositiveException () ; }
Distance : 15

91
Tree	{ super ( Character . getImageMap ( input . codePointAt ( input , pos ) ) ) ; ; }
Code	{ super ( Character . getImageMap ( input . codePointAt ( input , pos ) ) ) ; ; }
Distance : 7

92
Tree	{ pos = Character . intersection ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos = Character . intersection ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

93
Tree	{ pos = Character . hasDuplicateDeclarationSuppression ( Character . IEEEremainder ( input , pos ) ) ; }
Code	{ pos = Character . hasDuplicateDeclarationSuppression ( Character . IEEEremainder ( input , pos ) ) ; }
Distance : 4

94
Tree	{ throw new pos ( Character . toTitleCase ( input . codePointAt ( input , pos ) ) , false ) ; }
Code	{ throw new pos ( Character . toTitleCase ( input . codePointAt ( input , pos ) ) , false ) ; }
Distance : 9

95
Tree	{ throw pos ; }
Code	{ throw pos ; }
Distance : 15

96
Tree	{ pos . setMonths ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos . setMonths ( Character . codePointAt ( input , pos ) ) ; }
Distance : 4

97
Tree	{ super ( Character . getPatternForStyle ( input . codePointAt ( input , pos ) ) ) ; ; }
Code	{ super ( Character . getPatternForStyle ( input . codePointAt ( input , pos ) ) ) ; ; }
Distance : 7

98
Tree	{ throw MathRuntimeException ; }
Code	{ throw MathRuntimeException ; }
Distance : 15

99
Tree	{ super ( Character . toTitleCase ( input . codePointAt ( input , pos ) ) ) ; ; }
Code	{ super ( Character . toTitleCase ( input . codePointAt ( input , pos ) ) ) ; ; }
Distance : 7

100
Tree	{ throw result ; }
Code	{ throw result ; }
Distance : 15

101
Tree	{ super ( Character . codePointAt ( input . codePointAt ( input , pos ) ) ) ; ; }
Code	{ super ( Character . codePointAt ( input . codePointAt ( input , pos ) ) ) ; ; }
Distance : 7

102
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; integrator . isException ( Character ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; integrator . isException ( Character ) ; }
Distance : 8

103
Tree	{ throw new ParsePosition ( Character . codePointAt ( input , pos . getRightElement ( input ) ) , false ) ; }
Code	{ throw new ParsePosition ( Character . codePointAt ( input , pos . getRightElement ( input ) ) , false ) ; }
Distance : 13

104
Tree	{ throw new MutableLong () ; }
Code	{ throw new MutableLong () ; }
Distance : 15

105
Tree	{ throw new TestObject ( Character . codePointAt ( input . codePointAt ( input ) ) , false ) ; }
Code	{ throw new TestObject ( Character . codePointAt ( input . codePointAt ( input ) ) , false ) ; }
Distance : 10

106
Tree	{ pos += Character . hasDuplicateDeclarationSuppression ( Character . codePointAt ( input , pos ) ) ; return; }
Code	{ pos += Character . hasDuplicateDeclarationSuppression ( Character . codePointAt ( input , pos ) ) ; return; }
Distance : 3

107
Tree	{ throw new pos ( Character . createFloat ( input . codePointAt ( input , pos ) ) , false ) ; }
Code	{ throw new pos ( Character . createFloat ( input . codePointAt ( input , pos ) ) , false ) ; }
Distance : 9

108
Tree	{ super(); pos += Character . charCount ( Character . getEvaluations ( input , pos ) ) ; }
Code	{ super(); pos += Character . charCount ( Character . getEvaluations ( input , pos ) ) ; }
Distance : 3

109
Tree	{ super(); pos += Character . parseShort ( Character . codePointAt ( input , pos ) ) ; super }
Code	{ super(); pos += Character . parseShort ( Character . codePointAt ( input , pos ) ) ; super }
Distance : 4

110
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

111
Tree	{ pos . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

112
Tree	{ throw pos . charCount ( Character , pos . getLocalizablePattern ( input , pos ) , Character ) ; }
Code	{ throw pos . charCount ( Character , pos . getLocalizablePattern ( input , pos ) , Character ) ; }
Distance : 9

113
Tree	{ pos . hasDuplicateDeclarationSuppression ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos . hasDuplicateDeclarationSuppression ( Character . codePointAt ( input , pos ) ) ; }
Distance : 4

114
Tree	{ pos += Character . charCount ( Character . getImageMap ( input , pos ) ) ; super }
Code	{ pos += Character . charCount ( Character . getImageMap ( input , pos ) ) ; super }
Distance : 3

115
Tree	{ throw new NotStrictlyPositiveException ( STRING_CONSTANT ) ; }
Code	{ throw new NotStrictlyPositiveException ( STRING_CONSTANT ) ; }
Distance : 13

116
Tree	{ throw pos . verifyInterval ( Character [ input ] ) ; }
Code	{ throw pos . verifyInterval ( Character [ input ] ) ; }
Distance : 10

117
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; super }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; super }
Distance : 3

118
Tree	{ throw new TestObject ( p1.vector ) ; }
Code	{ throw new TestObject ( p1.vector ) ; }
Distance : 13

119
Tree	{ throw new File ( STRING_CONSTANT ) ; }
Code	{ throw new File ( STRING_CONSTANT ) ; }
Distance : 13

120
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; integrator . setPair ( Character , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; integrator . setPair ( Character , pos ) ; }
Distance : 10

121
Tree	{ throw new TestObject ( Character * pos ) ; }
Code	{ throw new TestObject ( Character * pos ) ; }
Distance : 12

122
Tree	{ throw new ParsePosition ( Character , false ) ; }
Code	{ throw new ParsePosition ( Character , false ) ; }
Distance : 11

123
Tree	{ throw new result ( Character , false ) ; }
Code	{ throw new result ( Character , false ) ; }
Distance : 11

124
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; integrator . getInitializer ( Character , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; integrator . getInitializer ( Character , pos ) ; }
Distance : 10

125
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; super }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; super }
Distance : 2

126
Tree	{ throw pos . setNewLineText ( Character [ input ] ) ; }
Code	{ throw pos . setNewLineText ( Character [ input ] ) ; }
Distance : 10

127
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; integrator . getResultObject ( Character , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; integrator . getResultObject ( Character , pos ) ; }
Distance : 10

128
Tree	{ throw shift ; }
Code	{ throw shift ; }
Distance : 15

129
Tree	{ super(); pos += Character . parseShort ( Character . codePointAt ( input , pos ) ) ; }
Code	{ super(); pos += Character . parseShort ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

130
Tree	{ super ( Character . replaceOnce ( input . codePointAt ( input , pos ) ) ) ; ; }
Code	{ super ( Character . replaceOnce ( input . codePointAt ( input , pos ) ) ) ; ; }
Distance : 7

131
Tree	{ pos += Character . charCount ( Character . getImageMap ( input , pos ) ) ; return; }
Code	{ pos += Character . charCount ( Character . getImageMap ( input , pos ) ) ; return; }
Distance : 3

132
Tree	{ throw TestObject ; }
Code	{ throw TestObject ; }
Distance : 15

133
Tree	{ super ( Character . codePointAt ( input . getGenericReturnType ( input , pos ) ) ) ; ; }
Code	{ super ( Character . codePointAt ( input . getGenericReturnType ( input , pos ) ) ) ; ; }
Distance : 8

134
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; integrator . charCount ( Character ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; integrator . charCount ( Character ) ; }
Distance : 8

135
Tree	{ throw new pos ( Character . forDigit ( input . codePointAt ( input , pos ) ) , false ) ; }
Code	{ throw new pos ( Character . forDigit ( input . codePointAt ( input , pos ) ) , false ) ; }
Distance : 9

136
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; integrator . putAll ( Character ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; integrator . putAll ( Character ) ; }
Distance : 8

137
Tree	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , false ) ; }
Code	{ throw new pos ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , false ) ; }
Distance : 9

138
Tree	{ super(); pos += Character . parseFloat ( Character . codePointAt ( input , pos ) ) ; super }
Code	{ super(); pos += Character . parseFloat ( Character . codePointAt ( input , pos ) ) ; super }
Distance : 4

139
Tree	{ super(); pos += Character . lookup ( Character . codePointAt ( input , pos ) ) ; super }
Code	{ super(); pos += Character . lookup ( Character . codePointAt ( input , pos ) ) ; super }
Distance : 4

140
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; return; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; return; }
Distance : 2

141
Tree	{ throw pos . charCount ( Character [ input ] ) ; }
Code	{ throw pos . charCount ( Character [ input ] ) ; }
Distance : 9

142
Tree	{ throw new BackgroundInitializerTestImpl ( LocalizedFormats.DIMENSIONS_MISMATCH_2x2 ) ; }
Code	{ throw new BackgroundInitializerTestImpl ( LocalizedFormats.DIMENSIONS_MISMATCH_2x2 ) ; }
Distance : 13

143
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; integrator . addLast ( Character ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; integrator . addLast ( Character ) ; }
Distance : 8

144
Tree	{ pos += Character . createFloat ( Character . codePointAt ( input , pos ) ) ; super }
Code	{ pos += Character . createFloat ( Character . codePointAt ( input , pos ) ) ; super }
Distance : 3

145
Tree	{ pos += Character . hasDuplicateDeclarationSuppression ( Character . codePointAt ( input , pos ) ) ; integrator . isException ( Character , pos ) ; }
Code	{ pos += Character . hasDuplicateDeclarationSuppression ( Character . codePointAt ( input , pos ) ) ; integrator . isException ( Character , pos ) ; }
Distance : 11

146
Tree	{ throw new TestObject ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , false ) ; }
Code	{ throw new TestObject ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , false ) ; }
Distance : 10

147
Tree	{ throw new BackgroundInitializerTestImpl ( Character . createDouble ( input . codePointAt ( input ) ) , false ) ; }
Code	{ throw new BackgroundInitializerTestImpl ( Character . createDouble ( input . codePointAt ( input ) ) , false ) ; }
Distance : 10

148
Tree	{ throw new BackgroundInitializerTestImpl ( Character , false ) ; }
Code	{ throw new BackgroundInitializerTestImpl ( Character , false ) ; }
Distance : 11

149
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; integrator . getInitializer ( Character ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; integrator . getInitializer ( Character ) ; }
Distance : 8

150
Tree	{ throw new TestObject ( Character ) ; }
Code	{ throw new TestObject ( Character ) ; }
Distance : 12

151
Tree	{ throw new BackgroundInitializerTestImpl ( STRING_CONSTANT ) ; }
Code	{ throw new BackgroundInitializerTestImpl ( STRING_CONSTANT ) ; }
Distance : 13

152
Tree	{ pos = Character . hasDuplicateDeclarationSuppression ( Character . toTitleCase ( input , pos ) ) ; }
Code	{ pos = Character . hasDuplicateDeclarationSuppression ( Character . toTitleCase ( input , pos ) ) ; }
Distance : 4

153
Tree	{ throw pos . setMonths ( Character [ input ] ) ; }
Code	{ throw pos . setMonths ( Character [ input ] ) ; }
Distance : 10

154
Tree	{ throw pos . charCount ( Character , pos . codePointAt ( input , pos ) , Character ) ; }
Code	{ throw pos . charCount ( Character , pos . codePointAt ( input , pos ) , Character ) ; }
Distance : 8

155
Tree	{ super(); pos += Character . parseFloat ( Character . codePointAt ( input , pos ) ) ; }
Code	{ super(); pos += Character . parseFloat ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

156
Tree	{ throw new MathArithmeticException () ; }
Code	{ throw new MathArithmeticException () ; }
Distance : 15

157
Tree	{ pos += Character . hasDuplicateDeclarationSuppression ( Character . codePointAt ( input , pos ) ) ; integrator . isException ( Character ) ; }
Code	{ pos += Character . hasDuplicateDeclarationSuppression ( Character . codePointAt ( input , pos ) ) ; integrator . isException ( Character ) ; }
Distance : 9

158
Tree	{ pos += Character . charCount ( Character . toTitleCase ( input , pos ) ) ; return; }
Code	{ pos += Character . charCount ( Character . toTitleCase ( input , pos ) ) ; return; }
Distance : 3

159
Tree	{ throw new TestObject ( FastMath.PI , pos , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ throw new TestObject ( FastMath.PI , pos , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 12

160
Tree	{ throw new pos ( Character . getEvaluations ( input . codePointAt ( input , pos ) ) , false ) ; }
Code	{ throw new pos ( Character . getEvaluations ( input . codePointAt ( input , pos ) ) , false ) ; }
Distance : 9

161
Tree	{ throw new ParsePosition ( STRING_CONSTANT ) ; }
Code	{ throw new ParsePosition ( STRING_CONSTANT ) ; }
Distance : 13

162
Tree	{ throw new TestObject ( p1.vector , pos , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ throw new TestObject ( p1.vector , pos , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 12

163
Tree	{ throw new result ( STRING_CONSTANT ) ; }
Code	{ throw new result ( STRING_CONSTANT ) ; }
Distance : 13

164
Tree	{ super ( Character . createDouble ( input . codePointAt ( input , pos ) ) ) ; ; }
Code	{ super ( Character . createDouble ( input . codePointAt ( input , pos ) ) ) ; ; }
Distance : 7

165
Tree	{ pos . setNewLineText ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos . setNewLineText ( Character . codePointAt ( input , pos ) ) ; }
Distance : 4

166
Tree	{ throw new BackgroundInitializerTestImpl ( LocalizedFormats.DIMENSIONS_MISMATCH_2x2 , pos , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ throw new BackgroundInitializerTestImpl ( LocalizedFormats.DIMENSIONS_MISMATCH_2x2 , pos , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 12

167
Tree	{ throw new MathArithmeticException ( LocalizedFormats.DIMENSIONS_MISMATCH_2x2 ) ; }
Code	{ throw new MathArithmeticException ( LocalizedFormats.DIMENSIONS_MISMATCH_2x2 ) ; }
Distance : 13

168
Tree	{ throw new File () ; }
Code	{ throw new File () ; }
Distance : 15

169
Tree	{ throw new MathArithmeticException ( Character . createDouble ( input . codePointAt ( input ) ) , false ) ; }
Code	{ throw new MathArithmeticException ( Character . createDouble ( input . codePointAt ( input ) ) , false ) ; }
Distance : 10

170
Tree	{ super(); pos += Character . lookup ( Character . codePointAt ( input , pos ) ) ; }
Code	{ super(); pos += Character . lookup ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

171
Tree	{ throw new MutableLong ( Character . codePointAt ( input . codePointAt ( input ) ) , false ) ; }
Code	{ throw new MutableLong ( Character . codePointAt ( input . codePointAt ( input ) ) , false ) ; }
Distance : 10

172
Tree	{ pos = Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos = Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

173
Tree	{ throw new BackgroundInitializerTestImpl ( Character . createDouble ( input . codePointAt ( input , pos ) ) , false ) ; }
Code	{ throw new BackgroundInitializerTestImpl ( Character . createDouble ( input . codePointAt ( input , pos ) ) , false ) ; }
Distance : 10

174
Tree	{ throw new MutableLong ( Character * pos ) ; }
Code	{ throw new MutableLong ( Character * pos ) ; }
Distance : 12

175
Tree	{ throw new BackgroundInitializerTestImpl ( FastMath.PI ) ; }
Code	{ throw new BackgroundInitializerTestImpl ( FastMath.PI ) ; }
Distance : 13

176
Tree	{ throw new NotStrictlyPositiveException ( Character * pos ) ; }
Code	{ throw new NotStrictlyPositiveException ( Character * pos ) ; }
Distance : 12

177
Tree	{ throw new File ( Character * pos ) ; }
Code	{ throw new File ( Character * pos ) ; }
Distance : 12

178
Tree	{ throw new BackgroundInitializerTestImpl ( Character . codePointAt ( input , pos . getRightElement ( input ) ) , false ) ; }
Code	{ throw new BackgroundInitializerTestImpl ( Character . codePointAt ( input , pos . getRightElement ( input ) ) , false ) ; }
Distance : 13

179
Tree	{ throw new NotStrictlyPositiveException ( Character , false ) ; }
Code	{ throw new NotStrictlyPositiveException ( Character , false ) ; }
Distance : 11

180
Tree	{ throw new BackgroundInitializerTestImpl ( p1.vector ) ; }
Code	{ throw new BackgroundInitializerTestImpl ( p1.vector ) ; }
Distance : 13

181
Tree	{ throw new File ( Character , false ) ; }
Code	{ throw new File ( Character , false ) ; }
Distance : 11

182
Tree	{ pos += Character . intersection ( Character . codePointAt ( input , pos ) ) ; return; }
Code	{ pos += Character . intersection ( Character . codePointAt ( input , pos ) ) ; return; }
Distance : 3

183
Tree	{ throw new BackgroundInitializerTestImpl ( FastMath.PI , pos , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ throw new BackgroundInitializerTestImpl ( FastMath.PI , pos , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 12

184
Tree	{ throw new TestObject ( Character . codePointAt ( input , pos . getRightElement ( input ) ) , false ) ; }
Code	{ throw new TestObject ( Character . codePointAt ( input , pos . getRightElement ( input ) ) , false ) ; }
Distance : 13

185
Tree	{ throw new TestObject () ; }
Code	{ throw new TestObject () ; }
Distance : 15

186
Tree	{ throw pos . verifyInterval ( Character , pos . helper2 ( input , pos ) , Character ) ; }
Code	{ throw pos . verifyInterval ( Character , pos . helper2 ( input , pos ) , Character ) ; }
Distance : 10

187
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; integrator . setPair ( Character ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; integrator . setPair ( Character ) ; }
Distance : 8

188
Tree	{ throw new BackgroundInitializerTestImpl ( Character . codePointAt ( input , pos . toCharArray ( input ) ) , false ) ; }
Code	{ throw new BackgroundInitializerTestImpl ( Character . codePointAt ( input , pos . toCharArray ( input ) ) , false ) ; }
Distance : 13

189
Tree	{ throw new BackgroundInitializerTestImpl ( p1.vector , pos , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ throw new BackgroundInitializerTestImpl ( p1.vector , pos , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 12

190
Tree	{ throw new MathArithmeticException ( Character . codePointAt ( input , pos . getRightElement ( input ) ) , false ) ; }
Code	{ throw new MathArithmeticException ( Character . codePointAt ( input , pos . getRightElement ( input ) ) , false ) ; }
Distance : 13

191
Tree	{ throw new MathArithmeticException ( LocalizedFormats.DIMENSIONS_MISMATCH_2x2 , pos , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ throw new MathArithmeticException ( LocalizedFormats.DIMENSIONS_MISMATCH_2x2 , pos , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 12

192
Tree	{ throw new BackgroundInitializerTestImpl ( FastMath.PI , pos . getRightElement ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Code	{ throw new BackgroundInitializerTestImpl ( FastMath.PI , pos . getRightElement ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Distance : 15

193
Tree	{ throw new BackgroundInitializerTestImpl ( p1.vector , pos . getRightElement ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Code	{ throw new BackgroundInitializerTestImpl ( p1.vector , pos . getRightElement ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Distance : 15

194
Tree	{ throw new BackgroundInitializerTestImpl ( FastMath.PI , pos . codePointAt ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Code	{ throw new BackgroundInitializerTestImpl ( FastMath.PI , pos . codePointAt ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Distance : 15

195
Tree	{ throw new MathArithmeticException ( FastMath.PI , pos . getRightElement ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Code	{ throw new MathArithmeticException ( FastMath.PI , pos . getRightElement ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Distance : 15

196
Tree	{ throw new BackgroundInitializerTestImpl ( p1.vector , pos . codePointAt ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Code	{ throw new BackgroundInitializerTestImpl ( p1.vector , pos . codePointAt ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Distance : 15

197
Tree	{ throw new BackgroundInitializerTestImpl ( FastMath.PI , pos . getRightElement ( input . getRightElement ( input , pos ) ) , pos , false ) ; }
Code	{ throw new BackgroundInitializerTestImpl ( FastMath.PI , pos . getRightElement ( input . getRightElement ( input , pos ) ) , pos , false ) ; }
Distance : 16

198
Tree	{ throw new MathArithmeticException ( p1.vector , pos . getRightElement ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Code	{ throw new MathArithmeticException ( p1.vector , pos . getRightElement ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Distance : 15

199
Tree	{ throw new BackgroundInitializerTestImpl ( FastMath.PI , pos . helper2 ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Code	{ throw new BackgroundInitializerTestImpl ( FastMath.PI , pos . helper2 ( input . codePointAt ( input , pos ) ) , pos , false ) ; }
Distance : 15

========================================================================


========================================================================
Example Number: 50
Parent Code is: 
final CharSequence result = lookupMap . get ( subSeq ) ;
-------------------------------------------------------------------------------
Child code is: 
final CharSequence result = lookupMap . get ( subSeq . toString () ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (43 (801{val=CharSequence})) (59 (800{val=result}) (204{val==}) (32 (800{val=lookupMap}) (235{val=.}) (802{val=get}) (214{val=(}) (800{val=subSeq}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (43 (801{val=CharSequence})) (59 (800{val=result}) (204{val==}) (32 (800{val=lookupMap}) (235{val=.}) (802{val=get}) (214{val=(}) (32 (800{val=subSeq}) (235{val=.}) (802{val=toString}) (216{val=()})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/4/parent/src_main_java_org_apache_commons_lang3_text_translate_LookupTranslator.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	final CharSequence result = crExportPathNode . get ( getOrCreateProperty () ) ;
Code	final CharSequence result = crExportPathNode . get ( getOrCreateProperty () ) ;
Distance : 4

1
Tree	final CharSequence result = crExportPathNode . get ( ( wrapOn < StepHandler > ) priorVariables ) ;
Code	final CharSequence result = crExportPathNode . get ( ( wrapOn < StepHandler > ) priorVariables ) ;
Distance : 8

2
Tree	final CharSequence result = crExportPathNode . get ( null ) ;
Code	final CharSequence result = crExportPathNode . get ( null ) ;
Distance : 5

3
Tree	final CharSequence result = crExportPathNode . get ( currentIdx . get () ) ;
Code	final CharSequence result = crExportPathNode . get ( currentIdx . get () ) ;
Distance : 3

4
Tree	final CharSequence result = get () . get ( ARROW_FN ) ;
Code	final CharSequence result = get () . get ( ARROW_FN ) ;
Distance : 6

5
Tree	final CharSequence result = crExportPathNode . get ( wrapOn , variableName ) ;
Code	final CharSequence result = crExportPathNode . get ( wrapOn , variableName ) ;
Distance : 5

6
Tree	final CharSequence result = crExportPathNode . get ( getRSquare () ) ;
Code	final CharSequence result = crExportPathNode . get ( getRSquare () ) ;
Distance : 4

7
Tree	CharSequence result = crExportPathNode . get ( aTwos ) ;
Code	CharSequence result = crExportPathNode . get ( aTwos ) ;
Distance : 6

8
Tree	final String result = crExportPathNode . get () ;
Code	final String result = crExportPathNode . get () ;
Distance : 7

9
Tree	final CharSequence result = columnLabels . get () ;
Code	final CharSequence result = columnLabels . get () ;
Distance : 6

10
Tree	final CharSequence result = crExportPathNode . get ( wrapOn , coefficients.length ) ;
Code	final CharSequence result = crExportPathNode . get ( wrapOn , coefficients.length ) ;
Distance : 5

11
Tree	final CharSequence result = rhsNode . get () ;
Code	final CharSequence result = rhsNode . get () ;
Distance : 6

12
Tree	final CharSequence result = IOUtil . get () ;
Code	final CharSequence result = IOUtil . get () ;
Distance : 6

13
Tree	final CharSequence result = crExportPathNode . get ( ( dn < StepHandler > ) sequence ) ;
Code	final CharSequence result = crExportPathNode . get ( ( dn < StepHandler > ) sequence ) ;
Distance : 8

14
Tree	final CharSequence result = graph . get () ;
Code	final CharSequence result = graph . get () ;
Distance : 6

15
Tree	final CharSequence result = IOUtil . get ( null ) ;
Code	final CharSequence result = IOUtil . get ( null ) ;
Distance : 5

16
Tree	final CharSequence result = ReadablePeriodConverter . get () ;
Code	final CharSequence result = ReadablePeriodConverter . get () ;
Distance : 6

17
Tree	final CharSequence result = get ( PACKAGE_SEPARATOR_CHAR ) ;
Code	final CharSequence result = get ( PACKAGE_SEPARATOR_CHAR ) ;
Distance : 6

18
Tree	final CharSequence result = get ( newExitCodeReceiver ) ;
Code	final CharSequence result = get ( newExitCodeReceiver ) ;
Distance : 6

19
Tree	final CharSequence result = graph . get ( null ) ;
Code	final CharSequence result = graph . get ( null ) ;
Distance : 5

20
Tree	final CharSequence result = crExportPathNode . get ( wrapOn ) ;
Code	final CharSequence result = crExportPathNode . get ( wrapOn ) ;
Distance : 5

21
Tree	final CharSequence result = ReadablePeriodConverter . get ( null ) ;
Code	final CharSequence result = ReadablePeriodConverter . get ( null ) ;
Distance : 5

22
Tree	final CharSequence result = crExportPathNode . get ( PACKAGE_SEPARATOR_CHAR ) ;
Code	final CharSequence result = crExportPathNode . get ( PACKAGE_SEPARATOR_CHAR ) ;
Distance : 5

23
Tree	final CharSequence result = crExportPathNode . get ( wrapOn . get ( wrapOn ) ) ;
Code	final CharSequence result = crExportPathNode . get ( wrapOn . get ( wrapOn ) ) ;
Distance : 6

24
Tree	final CharSequence result = crExportPathNode . get ( chord ) ;
Code	final CharSequence result = crExportPathNode . get ( chord ) ;
Distance : 5

25
Tree	final String result = crExportPathNode . get ( wrapOn ) ;
Code	final String result = crExportPathNode . get ( wrapOn ) ;
Distance : 6

26
Tree	final CharSequence result = columnLabels . get ( wrapOn ) ;
Code	final CharSequence result = columnLabels . get ( wrapOn ) ;
Distance : 5

27
Tree	final CharSequence result = crExportPathNode . get ( aTwos ) ;
Code	final CharSequence result = crExportPathNode . get ( aTwos ) ;
Distance : 5

28
Tree	final MutableLong result = crExportPathNode . get ( null ) ;
Code	final MutableLong result = crExportPathNode . get ( null ) ;
Distance : 6

29
Tree	final CharSequence result = rhsNode . get ( wrapOn ) ;
Code	final CharSequence result = rhsNode . get ( wrapOn ) ;
Distance : 5

30
Tree	final CharSequence result = crExportPathNode . get ( getRemoveUnusedCode () ) ;
Code	final CharSequence result = crExportPathNode . get ( getRemoveUnusedCode () ) ;
Distance : 4

31
Tree	final CharSequence result = crExportPathNode . get ( currentIdx ) ;
Code	final CharSequence result = crExportPathNode . get ( currentIdx ) ;
Distance : 5

32
Tree	final CharSequence result = crExportPathNode . get ( wrapOn . get () ) ;
Code	final CharSequence result = crExportPathNode . get ( wrapOn . get () ) ;
Distance : 3

33
Tree	final CharSequence result = crExportPathNode . get () ;
Code	final CharSequence result = crExportPathNode . get () ;
Distance : 6

34
Tree	final CharSequence result = get ( INVALID_ES3_PROP_NAME ) ;
Code	final CharSequence result = get ( INVALID_ES3_PROP_NAME ) ;
Distance : 6

35
Tree	final CharSequence result = new PomComparator ( chord ) ;
Code	final CharSequence result = new PomComparator ( chord ) ;
Distance : 7

36
Tree	final CharSequence result = crExportPathNode . get ( PACKAGE_SEPARATOR_CHAR . get () ) ;
Code	final CharSequence result = crExportPathNode . get ( PACKAGE_SEPARATOR_CHAR . get () ) ;
Distance : 3

37
Tree	final CharSequence result = rhsNode . get ( null ) ;
Code	final CharSequence result = rhsNode . get ( null ) ;
Distance : 5

38
Tree	CharSequence result = crExportPathNode . get ( wrapOn ) ;
Code	CharSequence result = crExportPathNode . get ( wrapOn ) ;
Distance : 6

39
Tree	final CharSequence result = crExportPathNode . get ( wrapOn . get ( seriesIndex ) ) ;
Code	final CharSequence result = crExportPathNode . get ( wrapOn . get ( seriesIndex ) ) ;
Distance : 6

40
Tree	final CharSequence result = crExportPathNode . get ( chord . get () ) ;
Code	final CharSequence result = crExportPathNode . get ( chord . get () ) ;
Distance : 3

41
Tree	final CharSequence result = newMockSafeHashSet ( INVALID_ES3_PROP_NAME ) ;
Code	final CharSequence result = newMockSafeHashSet ( INVALID_ES3_PROP_NAME ) ;
Distance : 7

42
Tree	final String result = crExportPathNode . get ( wrapOn . get () ) ;
Code	final String result = crExportPathNode . get ( wrapOn . get () ) ;
Distance : 4

43
Tree	final MutableLong result = crExportPathNode . get () ;
Code	final MutableLong result = crExportPathNode . get () ;
Distance : 7

44
Tree	final CharSequence result = get ( chord ) ;
Code	final CharSequence result = get ( chord ) ;
Distance : 6

45
Tree	final CharSequence result = crExportPathNode . get ( aTwos . get () ) ;
Code	final CharSequence result = crExportPathNode . get ( aTwos . get () ) ;
Distance : 3

46
Tree	final CharSequence result = newMockSafeHashSet ( chord ) ;
Code	final CharSequence result = newMockSafeHashSet ( chord ) ;
Distance : 7

47
Tree	final CharSequence result = crExportPathNode . get ( wrapOn . get ( identicalWeightsArray ) ) ;
Code	final CharSequence result = crExportPathNode . get ( wrapOn . get ( identicalWeightsArray ) ) ;
Distance : 6

48
Tree	final String result = crExportPathNode . get ( null ) ;
Code	final String result = crExportPathNode . get ( null ) ;
Distance : 6

49
Tree	final CharSequence result = columnLabels . get ( wrapOn . get () ) ;
Code	final CharSequence result = columnLabels . get ( wrapOn . get () ) ;
Distance : 3

50
Tree	final CharSequence result = crExportPathNode . get ( wrapOn . get ( CHAR_COPY ) ) ;
Code	final CharSequence result = crExportPathNode . get ( wrapOn . get ( CHAR_COPY ) ) ;
Distance : 6

51
Tree	final CharSequence result = rhsNode . get ( wrapOn . get () ) ;
Code	final CharSequence result = rhsNode . get ( wrapOn . get () ) ;
Distance : 3

52
Tree	final CharSequence result = crExportPathNode . get ( getRemoveUnusedCode ( CHAR_COPY ) ) ;
Code	final CharSequence result = crExportPathNode . get ( getRemoveUnusedCode ( CHAR_COPY ) ) ;
Distance : 5

53
Tree	final CharSequence result = getFieldType ( chord ) ;
Code	final CharSequence result = getFieldType ( chord ) ;
Distance : 7

54
Tree	final String result = crExportPathNode . get ( wrapOn , Calendar.SECOND ) ;
Code	final String result = crExportPathNode . get ( wrapOn , Calendar.SECOND ) ;
Distance : 6

55
Tree	final CharSequence result = crExportPathNode . get ( PACKAGE_SEPARATOR_CHAR , UNDEFINED ) ;
Code	final CharSequence result = crExportPathNode . get ( PACKAGE_SEPARATOR_CHAR , UNDEFINED ) ;
Distance : 5

56
Tree	final CharSequence result = this . radiusMinorGridlinesVisible . get ( wrapOn ) ;
Code	final CharSequence result = this . radiusMinorGridlinesVisible . get ( wrapOn ) ;
Distance : 7

57
Tree	CharSequence result = crExportPathNode . get ( chord ) ;
Code	CharSequence result = crExportPathNode . get ( chord ) ;
Distance : 6

58
Tree	final CharSequence result = crExportPathNode . get ( asBigDecimal () ) ;
Code	final CharSequence result = crExportPathNode . get ( asBigDecimal () ) ;
Distance : 4

59
Tree	CharSequence result = crExportPathNode . get () ;
Code	CharSequence result = crExportPathNode . get () ;
Distance : 7

60
Tree	final CharSequence result = crExportPathNode . get ( ( wrapOn < StepHandler > ) slots ) ;
Code	final CharSequence result = crExportPathNode . get ( ( wrapOn < StepHandler > ) slots ) ;
Distance : 8

61
Tree	final CharSequence result = crExportPathNode . get ( PACKAGE_SEPARATOR_CHAR , variableName . get () ) ;
Code	final CharSequence result = crExportPathNode . get ( PACKAGE_SEPARATOR_CHAR , variableName . get () ) ;
Distance : 5

62
Tree	final CharSequence result = crExportPathNode . get ( chord . get () . get () ) ;
Code	final CharSequence result = crExportPathNode . get ( chord . get () . get () ) ;
Distance : 6

63
Tree	final CharSequence result = crExportPathNode . get ( PACKAGE_SEPARATOR_CHAR , variableName ) ;
Code	final CharSequence result = crExportPathNode . get ( PACKAGE_SEPARATOR_CHAR , variableName ) ;
Distance : 5

64
Tree	final CharSequence result = this . defaultOutlinePaint . get ( wrapOn ) ;
Code	final CharSequence result = this . defaultOutlinePaint . get ( wrapOn ) ;
Distance : 7

65
Tree	final String result = new PomComparator ( chord ) ;
Code	final String result = new PomComparator ( chord ) ;
Distance : 8

66
Tree	final CharSequence result = new UnicodeUnescaper ( this , instantMillis ) ;
Code	final CharSequence result = new UnicodeUnescaper ( this , instantMillis ) ;
Distance : 7

67
Tree	final CharSequence result = crExportPathNode . get ( wrapOn , UNDEFINED . get () ) ;
Code	final CharSequence result = crExportPathNode . get ( wrapOn , UNDEFINED . get () ) ;
Distance : 5

68
Tree	final CharSequence result = crExportPathNode . get ( wrapOn , iZoneInfoMap ) ;
Code	final CharSequence result = crExportPathNode . get ( wrapOn , iZoneInfoMap ) ;
Distance : 5

69
Tree	final CharSequence result = crExportPathNode . get ( wrapOn . get ( GENERATOR_THIS ) ) ;
Code	final CharSequence result = crExportPathNode . get ( wrapOn . get ( GENERATOR_THIS ) ) ;
Distance : 6

70
Tree	final CharSequence result = crExportPathNode . get ( getNativeNullType ( wrapOn ) ) ;
Code	final CharSequence result = crExportPathNode . get ( getNativeNullType ( wrapOn ) ) ;
Distance : 5

71
Tree	final CharSequence result = crExportPathNode . get ( currentIdx . get () . get () ) ;
Code	final CharSequence result = crExportPathNode . get ( currentIdx . get () . get () ) ;
Distance : 6

72
Tree	CharSequence result = rhsNode . get ( wrapOn ) ;
Code	CharSequence result = rhsNode . get ( wrapOn ) ;
Distance : 6

73
Tree	final CharSequence result = new NumericEntityUnescaper ( chord ) ;
Code	final CharSequence result = new NumericEntityUnescaper ( chord ) ;
Distance : 7

74
Tree	final CharSequence result = crExportPathNode . get ( wrapOn , variableName . get () ) ;
Code	final CharSequence result = crExportPathNode . get ( wrapOn , variableName . get () ) ;
Distance : 5

75
Tree	final CharSequence result = crExportPathNode . get ( getNativeNullType ( seriesIndex ) ) ;
Code	final CharSequence result = crExportPathNode . get ( getNativeNullType ( seriesIndex ) ) ;
Distance : 5

76
Tree	final CharSequence result = crExportPathNode . get ( wrapOn . get ( aTwos ) ) ;
Code	final CharSequence result = crExportPathNode . get ( wrapOn . get ( aTwos ) ) ;
Distance : 6

77
Tree	final CharSequence result = crExportPathNode . get ( PACKAGE_SEPARATOR_CHAR , coefficients.length ) ;
Code	final CharSequence result = crExportPathNode . get ( PACKAGE_SEPARATOR_CHAR , coefficients.length ) ;
Distance : 5

78
Tree	final String result = crExportPathNode . get ( wrapOn . get () . get () ) ;
Code	final String result = crExportPathNode . get ( wrapOn . get () . get () ) ;
Distance : 7

79
Tree	final CharSequence result = new SumOfClusterVariances ( chord ) ;
Code	final CharSequence result = new SumOfClusterVariances ( chord ) ;
Distance : 7

80
Tree	final CharSequence result = this . subtypes . get ( wrapOn ) ;
Code	final CharSequence result = this . subtypes . get ( wrapOn ) ;
Distance : 7

81
Tree	final CharSequence result = new BitSet ( chord ) ;
Code	final CharSequence result = new BitSet ( chord ) ;
Distance : 7

82
Tree	final CharSequence result = crExportPathNode . get ( wrapOn , PropAccess.STRUCT ) ;
Code	final CharSequence result = crExportPathNode . get ( wrapOn , PropAccess.STRUCT ) ;
Distance : 5

83
Tree	final CharSequence result = crExportPathNode . get ( wrapOn , GREGORIAN_DEFAULT ) ;
Code	final CharSequence result = crExportPathNode . get ( wrapOn , GREGORIAN_DEFAULT ) ;
Distance : 5

84
Tree	final CharSequence result = new ConstantInitializer ( this , chord ) ;
Code	final CharSequence result = new ConstantInitializer ( this , chord ) ;
Distance : 7

85
Tree	final CharSequence result = crExportPathNode . get ( wrapOn , UNDEFINED ) ;
Code	final CharSequence result = crExportPathNode . get ( wrapOn , UNDEFINED ) ;
Distance : 5

86
Tree	CharSequence result = crExportPathNode . get ( PACKAGE_SEPARATOR_CHAR ) ;
Code	CharSequence result = crExportPathNode . get ( PACKAGE_SEPARATOR_CHAR ) ;
Distance : 6

87
Tree	final CharSequence result = crExportPathNode . get ( getCallArgument () ) ;
Code	final CharSequence result = crExportPathNode . get ( getCallArgument () ) ;
Distance : 4

88
Tree	final CharSequence result = new ConstantInitializer ( chord ) ;
Code	final CharSequence result = new ConstantInitializer ( chord ) ;
Distance : 7

89
Tree	final CharSequence result = crExportPathNode . get ( ( dn < StepHandler > ) slots ) ;
Code	final CharSequence result = crExportPathNode . get ( ( dn < StepHandler > ) slots ) ;
Distance : 8

90
Tree	final CharSequence result = new GeneralPath ( chord ) ;
Code	final CharSequence result = new GeneralPath ( chord ) ;
Distance : 7

91
Tree	final CharSequence result = this . chord . get ( wrapOn ) ;
Code	final CharSequence result = this . chord . get ( wrapOn ) ;
Distance : 7

92
Tree	final CharSequence result = crExportPathNode . get ( ( wrapOn < StepHandler > ) listenerType ) ;
Code	final CharSequence result = crExportPathNode . get ( ( wrapOn < StepHandler > ) listenerType ) ;
Distance : 8

93
Tree	final CharSequence result = newMockSafeHashSet () . get ( ARROW_FN ) ;
Code	final CharSequence result = newMockSafeHashSet () . get ( ARROW_FN ) ;
Distance : 6

94
Tree	final CharSequence result = columnLabels . get ( null ) ;
Code	final CharSequence result = columnLabels . get ( null ) ;
Distance : 5

95
Tree	final CharSequence result = new UnicodeUnescaper ( chord ) ;
Code	final CharSequence result = new UnicodeUnescaper ( chord ) ;
Distance : 7

96
Tree	final CharSequence result = getFieldType () . get ( ARROW_FN ) ;
Code	final CharSequence result = getFieldType () . get ( ARROW_FN ) ;
Distance : 6

97
Tree	final CharSequence result = crExportPathNode . get ( PACKAGE_SEPARATOR_CHAR . get () . get () ) ;
Code	final CharSequence result = crExportPathNode . get ( PACKAGE_SEPARATOR_CHAR . get () . get () ) ;
Distance : 6

98
Tree	final CharSequence result = crExportPathNode . get ( ( wrapOn < StepHandler > ) ruleSets ) ;
Code	final CharSequence result = crExportPathNode . get ( ( wrapOn < StepHandler > ) ruleSets ) ;
Distance : 8

99
Tree	final CharSequence result = crExportPathNode . get ( wrapOn , Calendar.SECOND ) ;
Code	final CharSequence result = crExportPathNode . get ( wrapOn , Calendar.SECOND ) ;
Distance : 5

100
Tree	CharSequence result = rhsNode . get () ;
Code	CharSequence result = rhsNode . get () ;
Distance : 7

101
Tree	final CharSequence result = new GeneralPath ( this , chord ) ;
Code	final CharSequence result = new GeneralPath ( this , chord ) ;
Distance : 7

102
Tree	final CharSequence result = crExportPathNode . get ( getCoefficients () ) ;
Code	final CharSequence result = crExportPathNode . get ( getCoefficients () ) ;
Distance : 4

103
Tree	final CharSequence result = findObjectWithNonStringifiableKey ( chord ) ;
Code	final CharSequence result = findObjectWithNonStringifiableKey ( chord ) ;
Distance : 7

104
Tree	final CharSequence result = crExportPathNode . get ( getNativeNullType () ) ;
Code	final CharSequence result = crExportPathNode . get ( getNativeNullType () ) ;
Distance : 4

105
Tree	final CharSequence result = crExportPathNode . get ( ( dn < StepHandler > ) priorVariables ) ;
Code	final CharSequence result = crExportPathNode . get ( ( dn < StepHandler > ) priorVariables ) ;
Distance : 8

106
Tree	CharSequence result = IOUtil . get () ;
Code	CharSequence result = IOUtil . get () ;
Distance : 7

107
Tree	final CharSequence result = crExportPathNode . get ( PACKAGE_SEPARATOR_CHAR . get ( identicalWeightsArray ) ) ;
Code	final CharSequence result = crExportPathNode . get ( PACKAGE_SEPARATOR_CHAR . get ( identicalWeightsArray ) ) ;
Distance : 6

108
Tree	final CharSequence result = new PomComparator ( this , instantMillis ) ;
Code	final CharSequence result = new PomComparator ( this , instantMillis ) ;
Distance : 7

109
Tree	final CharSequence result = getFieldType () . get ( CHAR_COPY ) ;
Code	final CharSequence result = getFieldType () . get ( CHAR_COPY ) ;
Distance : 6

110
Tree	final CharSequence result = new PomComparator ( this , TestDateTimeConstants ) ;
Code	final CharSequence result = new PomComparator ( this , TestDateTimeConstants ) ;
Distance : 7

111
Tree	final CharSequence result = crExportPathNode . get ( STRING_CONSTANT , OverlayChangeListener ) ;
Code	final CharSequence result = crExportPathNode . get ( STRING_CONSTANT , OverlayChangeListener ) ;
Distance : 5

112
Tree	V result = crExportPathNode . get () ;
Code	V result = crExportPathNode . get () ;
Distance : 8

113
Tree	final CharSequence result = crExportPathNode . get ( wrapOn . get () . get () ) ;
Code	final CharSequence result = crExportPathNode . get ( wrapOn . get () . get () ) ;
Distance : 6

114
Tree	DateTimeFormatter result = crExportPathNode . get ( wrapOn ) ;
Code	DateTimeFormatter result = crExportPathNode . get ( wrapOn ) ;
Distance : 7

115
Tree	CharSequence result = getFieldType ( INVALID_ES3_PROP_NAME ) ;
Code	CharSequence result = getFieldType ( INVALID_ES3_PROP_NAME ) ;
Distance : 8

116
Tree	final CharSequence result = get ( INVALID_ES3_PROP_NAME , variableName ) ;
Code	final CharSequence result = get ( INVALID_ES3_PROP_NAME , variableName ) ;
Distance : 6

117
Tree	final CharSequence result = crExportPathNode . get ( copySelf () ) ;
Code	final CharSequence result = crExportPathNode . get ( copySelf () ) ;
Distance : 4

118
Tree	CharSequence result = get ( chord ) ;
Code	CharSequence result = get ( chord ) ;
Distance : 7

119
Tree	final CharSequence result = newMockSafeHashSet ( chord , UNDEFINED ) ;
Code	final CharSequence result = newMockSafeHashSet ( chord , UNDEFINED ) ;
Distance : 7

120
Tree	CharSequence result = findObjectWithNonStringifiableKey ( chord ) ;
Code	CharSequence result = findObjectWithNonStringifiableKey ( chord ) ;
Distance : 8

121
Tree	final CharSequence result = this . q0 . get ( wrapOn ) ;
Code	final CharSequence result = this . q0 . get ( wrapOn ) ;
Distance : 7

122
Tree	final CharSequence result = crExportPathNode . get ( wrapOn , this . legendItemGraphicEdge ) ;
Code	final CharSequence result = crExportPathNode . get ( wrapOn , this . legendItemGraphicEdge ) ;
Distance : 6

123
Tree	final CharSequence result = crExportPathNode . get ( aTwos . get () . get () ) ;
Code	final CharSequence result = crExportPathNode . get ( aTwos . get () . get () ) ;
Distance : 6

124
Tree	final CharSequence result = crExportPathNode . get ( wrapOn , java.lang.Class ) ;
Code	final CharSequence result = crExportPathNode . get ( wrapOn , java.lang.Class ) ;
Distance : 5

125
Tree	final CharSequence result = crExportPathNode . get ( wrapOn . get ( currentIdx ) ) ;
Code	final CharSequence result = crExportPathNode . get ( wrapOn . get ( currentIdx ) ) ;
Distance : 6

126
Tree	CharSequence result = newMockSafeHashSet ( INVALID_ES3_PROP_NAME ) ;
Code	CharSequence result = newMockSafeHashSet ( INVALID_ES3_PROP_NAME ) ;
Distance : 8

127
Tree	final CharSequence result = columnLabels . get ( wrapOn . get () . get () ) ;
Code	final CharSequence result = columnLabels . get ( wrapOn . get () . get () ) ;
Distance : 6

128
Tree	final CharSequence result = crExportPathNode . get ( ( wrapOn < StepHandler > ) sequence ) ;
Code	final CharSequence result = crExportPathNode . get ( ( wrapOn < StepHandler > ) sequence ) ;
Distance : 8

129
Tree	final CharSequence result = crExportPathNode . get ( PACKAGE_SEPARATOR_CHAR , Calendar.SECOND ) ;
Code	final CharSequence result = crExportPathNode . get ( PACKAGE_SEPARATOR_CHAR , Calendar.SECOND ) ;
Distance : 5

130
Tree	final CharSequence result = this . defaultLegendTextPaint . get ( wrapOn ) ;
Code	final CharSequence result = this . defaultLegendTextPaint . get ( wrapOn ) ;
Distance : 7

131
Tree	final CharSequence result = get () . get ( CHAR_COPY ) ;
Code	final CharSequence result = get () . get ( CHAR_COPY ) ;
Distance : 6

132
Tree	CharSequence result = firstNonNull ( chord ) ;
Code	CharSequence result = firstNonNull ( chord ) ;
Distance : 8

133
Tree	final CharSequence result = crExportPathNode . get ( chord , Calendar.SECOND ) ;
Code	final CharSequence result = crExportPathNode . get ( chord , Calendar.SECOND ) ;
Distance : 5

134
Tree	DateParser result = crExportPathNode . get () ;
Code	DateParser result = crExportPathNode . get () ;
Distance : 8

135
Tree	CharSequence result = crExportPathNode . get ( currentIdx ) ;
Code	CharSequence result = crExportPathNode . get ( currentIdx ) ;
Distance : 6

136
Tree	CharSequence result = columnLabels . get () ;
Code	CharSequence result = columnLabels . get () ;
Distance : 7

137
Tree	CharSequence result = crExportPathNode . get ( wrapOn . get ( identicalWeightsArray ) ) ;
Code	CharSequence result = crExportPathNode . get ( wrapOn . get ( identicalWeightsArray ) ) ;
Distance : 7

138
Tree	final CharSequence result = crExportPathNode . get ( wrapOn , variableName . valueOf () ) ;
Code	final CharSequence result = crExportPathNode . get ( wrapOn , variableName . valueOf () ) ;
Distance : 5

139
Tree	final CharSequence result = newMockSafeHashSet () . get ( CHAR_COPY ) ;
Code	final CharSequence result = newMockSafeHashSet () . get ( CHAR_COPY ) ;
Distance : 6

140
Tree	final CharSequence result = crExportPathNode . get ( getRemoveUnusedCode ( seriesIndex ) ) ;
Code	final CharSequence result = crExportPathNode . get ( getRemoveUnusedCode ( seriesIndex ) ) ;
Distance : 5

141
Tree	final CharSequence result = crExportPathNode . get ( wrapOn , this . q0 ) ;
Code	final CharSequence result = crExportPathNode . get ( wrapOn , this . q0 ) ;
Distance : 6

142
Tree	final CharSequence result = this . filterReturningEmptyArray . get ( wrapOn ) ;
Code	final CharSequence result = this . filterReturningEmptyArray . get ( wrapOn ) ;
Distance : 7

143
Tree	final CharSequence result = get ( chord , variableName ) ;
Code	final CharSequence result = get ( chord , variableName ) ;
Distance : 6

144
Tree	CharSequence result = getFieldType ( chord ) ;
Code	CharSequence result = getFieldType ( chord ) ;
Distance : 8

145
Tree	final CharSequence result = crExportPathNode . get ( getRemoveUnusedCode ( wrapOn ) ) ;
Code	final CharSequence result = crExportPathNode . get ( getRemoveUnusedCode ( wrapOn ) ) ;
Distance : 5

146
Tree	String result = crExportPathNode . get ( wrapOn ) ;
Code	String result = crExportPathNode . get ( wrapOn ) ;
Distance : 7

147
Tree	final CharSequence result = newMockSafeHashSet ( chord , variableName ) ;
Code	final CharSequence result = newMockSafeHashSet ( chord , variableName ) ;
Distance : 7

148
Tree	final CharSequence result = rhsNode . get ( wrapOn . get () . get () ) ;
Code	final CharSequence result = rhsNode . get ( wrapOn . get () . get () ) ;
Distance : 6

149
Tree	final CharSequence result = new PomComparator ( this , chord ) ;
Code	final CharSequence result = new PomComparator ( this , chord ) ;
Distance : 7

150
Tree	final CharSequence result = findObjectWithNonStringifiableKey () . get ( ARROW_FN ) ;
Code	final CharSequence result = findObjectWithNonStringifiableKey () . get ( ARROW_FN ) ;
Distance : 6

151
Tree	final CharSequence result = this . legendItemGraphicEdge . get ( wrapOn ) ;
Code	final CharSequence result = this . legendItemGraphicEdge . get ( wrapOn ) ;
Distance : 7

152
Tree	final CharSequence result = crExportPathNode . get ( wrapOn , columnLabels ) ;
Code	final CharSequence result = crExportPathNode . get ( wrapOn , columnLabels ) ;
Distance : 5

153
Tree	final CharSequence result = crExportPathNode . get ( copySelf ( seriesIndex ) ) ;
Code	final CharSequence result = crExportPathNode . get ( copySelf ( seriesIndex ) ) ;
Distance : 5

154
Tree	CharSequence result = newMockSafeHashSet ( chord ) ;
Code	CharSequence result = newMockSafeHashSet ( chord ) ;
Distance : 8

155
Tree	final CharSequence result = crExportPathNode . get ( copySelf ( wrapOn ) ) ;
Code	final CharSequence result = crExportPathNode . get ( copySelf ( wrapOn ) ) ;
Distance : 5

156
Tree	final CharSequence result = crExportPathNode . get ( STRING_CONSTANT , remainingRegion ) ;
Code	final CharSequence result = crExportPathNode . get ( STRING_CONSTANT , remainingRegion ) ;
Distance : 5

157
Tree	final CharSequence result = crExportPathNode . get ( wrapOn , GREGORIAN_DEFAULT . get () ) ;
Code	final CharSequence result = crExportPathNode . get ( wrapOn , GREGORIAN_DEFAULT . get () ) ;
Distance : 5

158
Tree	final CharSequence result = crExportPathNode . get ( getCallArgument ( wrapOn ) ) ;
Code	final CharSequence result = crExportPathNode . get ( getCallArgument ( wrapOn ) ) ;
Distance : 5

159
Tree	final CharSequence result = crExportPathNode . get ( wrapOn , columnLabels . get () ) ;
Code	final CharSequence result = crExportPathNode . get ( wrapOn , columnLabels . get () ) ;
Distance : 5

160
Tree	final CharSequence result = crExportPathNode . get ( STRING_CONSTANT , VariableParser ) ;
Code	final CharSequence result = crExportPathNode . get ( STRING_CONSTANT , VariableParser ) ;
Distance : 5

161
Tree	final CharSequence result = getFieldType ( chord , variableName ) ;
Code	final CharSequence result = getFieldType ( chord , variableName ) ;
Distance : 7

162
Tree	final CharSequence result = crExportPathNode . get ( wrapOn , crExportPathNode . get () ) ;
Code	final CharSequence result = crExportPathNode . get ( wrapOn , crExportPathNode . get () ) ;
Distance : 5

163
Tree	final CharSequence result = get ( chord , UNDEFINED ) ;
Code	final CharSequence result = get ( chord , UNDEFINED ) ;
Distance : 6

164
Tree	final CharSequence result = crExportPathNode . get ( PACKAGE_SEPARATOR_CHAR , this . defaultOutlinePaint ) ;
Code	final CharSequence result = crExportPathNode . get ( PACKAGE_SEPARATOR_CHAR , this . defaultOutlinePaint ) ;
Distance : 6

165
Tree	final CharSequence result = crExportPathNode . get ( wrapOn , crExportPathNode ) ;
Code	final CharSequence result = crExportPathNode . get ( wrapOn , crExportPathNode ) ;
Distance : 5

166
Tree	final CharSequence result = get () . get ( useNode ) ;
Code	final CharSequence result = get () . get ( useNode ) ;
Distance : 6

167
Tree	final CharSequence result = crExportPathNode . get ( wrapOn , this . isArrowAtTop ) ;
Code	final CharSequence result = crExportPathNode . get ( wrapOn , this . isArrowAtTop ) ;
Distance : 6

168
Tree	final CharSequence result = crExportPathNode . get ( wrapOn , UNDEFINED . valueOf () ) ;
Code	final CharSequence result = crExportPathNode . get ( wrapOn , UNDEFINED . valueOf () ) ;
Distance : 5

169
Tree	final CharSequence result = get ( chord , crExportPathNode ) ;
Code	final CharSequence result = get ( chord , crExportPathNode ) ;
Distance : 6

170
Tree	String result = crExportPathNode . get () ;
Code	String result = crExportPathNode . get () ;
Distance : 8

171
Tree	final CharSequence result = new ConstantInitializer ( this , instantMillis ) ;
Code	final CharSequence result = new ConstantInitializer ( this , instantMillis ) ;
Distance : 7

172
Tree	final CharSequence result = get ( chord , columnLabels ) ;
Code	final CharSequence result = get ( chord , columnLabels ) ;
Distance : 6

173
Tree	final CharSequence result = crExportPathNode . get ( wrapOn , this . defaultOutlinePaint ) ;
Code	final CharSequence result = crExportPathNode . get ( wrapOn , this . defaultOutlinePaint ) ;
Distance : 6

174
Tree	final CharSequence result = crExportPathNode . get ( STRING_CONSTANT , limits ) ;
Code	final CharSequence result = crExportPathNode . get ( STRING_CONSTANT , limits ) ;
Distance : 5

175
Tree	final CharSequence result = crExportPathNode . get ( STRING_CONSTANT , ARROW_FN ) ;
Code	final CharSequence result = crExportPathNode . get ( STRING_CONSTANT , ARROW_FN ) ;
Distance : 5

176
Tree	final CharSequence result = crExportPathNode . get ( STRING_CONSTANT , multiplicand ) ;
Code	final CharSequence result = crExportPathNode . get ( STRING_CONSTANT , multiplicand ) ;
Distance : 5

177
Tree	final CharSequence result = crExportPathNode . get ( wrapOn , this . stepPoint ) ;
Code	final CharSequence result = crExportPathNode . get ( wrapOn , this . stepPoint ) ;
Distance : 6

178
Tree	final CharSequence result = crExportPathNode . get ( STRING_CONSTANT , chord ) ;
Code	final CharSequence result = crExportPathNode . get ( STRING_CONSTANT , chord ) ;
Distance : 5

179
Tree	final CharSequence result = crExportPathNode . get ( STRING_CONSTANT , useNode ) ;
Code	final CharSequence result = crExportPathNode . get ( STRING_CONSTANT , useNode ) ;
Distance : 5

180
Tree	final CharSequence result = crExportPathNode . get ( wrapOn , this . radiusMinorGridlinesVisible ) ;
Code	final CharSequence result = crExportPathNode . get ( wrapOn , this . radiusMinorGridlinesVisible ) ;
Distance : 6

181
Tree	DateTimeFormatter result = crExportPathNode . get () ;
Code	DateTimeFormatter result = crExportPathNode . get () ;
Distance : 8

182
Tree	CharSequence result = getFieldType ( PACKAGE_SEPARATOR_CHAR ) ;
Code	CharSequence result = getFieldType ( PACKAGE_SEPARATOR_CHAR ) ;
Distance : 8

183
Tree	final CharSequence result = new GeneralPath ( this , instantMillis ) ;
Code	final CharSequence result = new GeneralPath ( this , instantMillis ) ;
Distance : 7

184
Tree	CharSequence result = crExportPathNode . get ( wrapOn . get ( GENERATOR_THIS ) ) ;
Code	CharSequence result = crExportPathNode . get ( wrapOn . get ( GENERATOR_THIS ) ) ;
Distance : 7

185
Tree	final CharSequence result = crExportPathNode . millis ( wrapOn ) ;
Code	final CharSequence result = crExportPathNode . millis ( wrapOn ) ;
Distance : 6

186
Tree	CharSequence result = crExportPathNode . get ( wrapOn . get ( seriesIndex ) ) ;
Code	CharSequence result = crExportPathNode . get ( wrapOn . get ( seriesIndex ) ) ;
Distance : 7

187
Tree	CharSequence result = crExportPathNode . get ( wrapOn . get ( CHAR_COPY ) ) ;
Code	CharSequence result = crExportPathNode . get ( wrapOn . get ( CHAR_COPY ) ) ;
Distance : 7

188
Tree	final CharSequence result = crExportPathNode . args ( wrapOn ) ;
Code	final CharSequence result = crExportPathNode . args ( wrapOn ) ;
Distance : 6

189
Tree	CharSequence result = crExportPathNode . get ( wrapOn . get ( wrapOn ) ) ;
Code	CharSequence result = crExportPathNode . get ( wrapOn . get ( wrapOn ) ) ;
Distance : 7

190
Tree	final CharSequence result = crExportPathNode . get ( PACKAGE_SEPARATOR_CHAR , this . isArrowAtTop ) ;
Code	final CharSequence result = crExportPathNode . get ( PACKAGE_SEPARATOR_CHAR , this . isArrowAtTop ) ;
Distance : 6

191
Tree	CharSequence result = crExportPathNode . get ( PACKAGE_SEPARATOR_CHAR . get ( identicalWeightsArray ) ) ;
Code	CharSequence result = crExportPathNode . get ( PACKAGE_SEPARATOR_CHAR . get ( identicalWeightsArray ) ) ;
Distance : 7

192
Tree	final CharSequence result = crExportPathNode . millis ( chord ) ;
Code	final CharSequence result = crExportPathNode . millis ( chord ) ;
Distance : 6

193
Tree	final CharSequence result = crExportPathNode . cause ( wrapOn ) ;
Code	final CharSequence result = crExportPathNode . cause ( wrapOn ) ;
Distance : 6

194
Tree	final CharSequence result = crExportPathNode . initialize ( wrapOn ) ;
Code	final CharSequence result = crExportPathNode . initialize ( wrapOn ) ;
Distance : 6

195
Tree	final CharSequence result = crExportPathNode . millis ( PACKAGE_SEPARATOR_CHAR ) ;
Code	final CharSequence result = crExportPathNode . millis ( PACKAGE_SEPARATOR_CHAR ) ;
Distance : 6

196
Tree	CharSequence result = crExportPathNode . get ( PACKAGE_SEPARATOR_CHAR . get ( GENERATOR_THIS ) ) ;
Code	CharSequence result = crExportPathNode . get ( PACKAGE_SEPARATOR_CHAR . get ( GENERATOR_THIS ) ) ;
Distance : 7

197
Tree	CharSequence result = crExportPathNode . get ( wrapOn . get ( currentIdx ) ) ;
Code	CharSequence result = crExportPathNode . get ( wrapOn . get ( currentIdx ) ) ;
Distance : 7

198
Tree	final CharSequence result = crExportPathNode . args ( chord ) ;
Code	final CharSequence result = crExportPathNode . args ( chord ) ;
Distance : 6

199
Tree	final CharSequence result = crExportPathNode . args ( PACKAGE_SEPARATOR_CHAR ) ;
Code	final CharSequence result = crExportPathNode . args ( PACKAGE_SEPARATOR_CHAR ) ;
Distance : 6

========================================================================


========================================================================
Example Number: 51
Parent Code is: 
final int cols = problem . getAllParameters () . length ;
-------------------------------------------------------------------------------
Child code is: 
final int cols = problem . getUnboundParameters () . length ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (39{val=int}) (59 (800{val=cols}) (204{val==}) (22 (32 (800{val=problem}) (235{val=.}) (802{val=getAllParameters}) (216{val=()})) (235{val=.}) (800{val=length}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (39{val=int}) (59 (800{val=cols}) (204{val==}) (22 (32 (800{val=problem}) (235{val=.}) (802{val=getUnboundParameters}) (216{val=()})) (235{val=.}) (800{val=length}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/100/parent/src_java_org_apache_commons_math_estimation_AbstractEstimator.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	int [] problem = problem . getAllScopesInFunction () ;
Code	int [] problem = problem . getAllScopesInFunction () ;
Distance : 6

1
Tree	int [] problem = problem . calculateStackTotal () ;
Code	int [] problem = problem . calculateStackTotal () ;
Distance : 6

2
Tree	final int [] [] pEnd = problem . newCachedThreadPool () ;
Code	final int [] [] pEnd = problem . newCachedThreadPool () ;
Distance : 6

3
Tree	final int pEnd = problem ;
Code	final int pEnd = problem ;
Distance : 6

4
Tree	final int diffNorm = ( problem ) length ;
Code	final int diffNorm = ( problem ) length ;
Distance : 6

5
Tree	int cols = problem . intersection () ;
Code	int cols = problem . intersection () ;
Distance : 4

6
Tree	final int [] cols = problem . computeSigma () ;
Code	final int [] cols = problem . computeSigma () ;
Distance : 4

7
Tree	final int pEnd = problem . newCachedThreadPool () . length ;
Code	final int pEnd = problem . newCachedThreadPool () . length ;
Distance : 2

8
Tree	int x1 = ( problem ) length ;
Code	int x1 = ( problem ) length ;
Distance : 7

9
Tree	int pEnd = ( problem ) length ;
Code	int pEnd = ( problem ) length ;
Distance : 7

10
Tree	int x1 = problem . newCachedThreadPool () ;
Code	int x1 = problem . newCachedThreadPool () ;
Distance : 5

11
Tree	final int [] [] cols = problem . intersection () ;
Code	final int [] [] cols = problem . intersection () ;
Distance : 5

12
Tree	int dim = ( problem ) length ;
Code	int dim = ( problem ) length ;
Distance : 7

13
Tree	int pEnd = problem . newCachedThreadPool () ;
Code	int pEnd = problem . newCachedThreadPool () ;
Distance : 5

14
Tree	final int eps = problem ;
Code	final int eps = problem ;
Distance : 6

15
Tree	int dim = problem . newCachedThreadPool () ;
Code	int dim = problem . newCachedThreadPool () ;
Distance : 5

16
Tree	final int power = ( problem ) length ;
Code	final int power = ( problem ) length ;
Distance : 6

17
Tree	final int diffNorm = problem . newCachedThreadPool ( false , length ) ;
Code	final int diffNorm = problem . newCachedThreadPool ( false , length ) ;
Distance : 6

18
Tree	int cols = ( problem ) length ;
Code	int cols = ( problem ) length ;
Distance : 6

19
Tree	final int diffNorm = problem . newCachedThreadPool ( false , matrix ) ;
Code	final int diffNorm = problem . newCachedThreadPool ( false , matrix ) ;
Distance : 7

20
Tree	final int cols = problem . newCachedThreadPool ( false , length ) ;
Code	final int cols = problem . newCachedThreadPool ( false , length ) ;
Distance : 5

21
Tree	final int [] [] diffNorm = problem . newCachedThreadPool () ;
Code	final int [] [] diffNorm = problem . newCachedThreadPool () ;
Distance : 6

22
Tree	final int cols = ( problem ) length ;
Code	final int cols = ( problem ) length ;
Distance : 5

23
Tree	final int [] [] cols = problem . newCachedThreadPool () ;
Code	final int [] [] cols = problem . newCachedThreadPool () ;
Distance : 5

24
Tree	final int diffNorm = problem . newCachedThreadPool ( w , TransformType.INVERSE ) ;
Code	final int diffNorm = problem . newCachedThreadPool ( w , TransformType.INVERSE ) ;
Distance : 7

25
Tree	final int isMinim = ( problem ) length ;
Code	final int isMinim = ( problem ) length ;
Distance : 6

26
Tree	final int [] [] cols = problem . calculateStackTotal () ;
Code	final int [] [] cols = problem . calculateStackTotal () ;
Distance : 5

27
Tree	int [] problem = problem . newCachedThreadPool () ;
Code	int [] problem = problem . newCachedThreadPool () ;
Distance : 6

28
Tree	final int diffNorm = problem . computeSigma ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int diffNorm = problem . computeSigma ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

29
Tree	final int isMinim = problem . newCachedThreadPool ( false , length ) ;
Code	final int isMinim = problem . newCachedThreadPool ( false , length ) ;
Distance : 6

30
Tree	final int cols = problem . newCachedThreadPool ( false , matrix ) ;
Code	final int cols = problem . newCachedThreadPool ( false , matrix ) ;
Distance : 6

31
Tree	final int diffNorm = problem . newCachedThreadPool ( w , Locale.US ) ;
Code	final int diffNorm = problem . newCachedThreadPool ( w , Locale.US ) ;
Distance : 7

32
Tree	dim = problem . newCachedThreadPool ()
Code	dim = problem . newCachedThreadPool ()
Distance : 7

33
Tree	final int [] [] dim = problem . newCachedThreadPool () ;
Code	final int [] [] dim = problem . newCachedThreadPool () ;
Distance : 6

34
Tree	int cols = problem . newCachedThreadPool () ;
Code	int cols = problem . newCachedThreadPool () ;
Distance : 4

35
Tree	final int isMinim = problem . newCachedThreadPool ( false , matrix ) ;
Code	final int isMinim = problem . newCachedThreadPool ( false , matrix ) ;
Distance : 7

36
Tree	final int [] cols = problem . newCachedThreadPool () ;
Code	final int [] cols = problem . newCachedThreadPool () ;
Distance : 4

37
Tree	cols = problem . instantiate ()
Code	cols = problem . instantiate ()
Distance : 6

38
Tree	int diffNorm = problem . newCachedThreadPool () ;
Code	int diffNorm = problem . newCachedThreadPool () ;
Distance : 5

39
Tree	final int diffNorm = problem . newCachedThreadPool () ;
Code	final int diffNorm = problem . newCachedThreadPool () ;
Distance : 4

40
Tree	final int cols = problem . newCachedThreadPool () ;
Code	final int cols = problem . newCachedThreadPool () ;
Distance : 3

41
Tree	final int [] [] cols = problem . computeSigma () ;
Code	final int [] [] cols = problem . computeSigma () ;
Distance : 5

42
Tree	cols = problem . computeSigma ()
Code	cols = problem . computeSigma ()
Distance : 6

43
Tree	final int isMinim = problem . newCachedThreadPool () ;
Code	final int isMinim = problem . newCachedThreadPool () ;
Distance : 4

44
Tree	final int [] [] cols = problem . newCachedThreadPool ( Cartesian1D.ZERO ) ;
Code	final int [] [] cols = problem . newCachedThreadPool ( Cartesian1D.ZERO ) ;
Distance : 6

45
Tree	final int diffNorm = ( ( w ) length ) . getPeriod () ;
Code	final int diffNorm = ( ( w ) length ) . getPeriod () ;
Distance : 9

46
Tree	final int [] [] cols = sd . newCachedThreadPool () ;
Code	final int [] [] cols = sd . newCachedThreadPool () ;
Distance : 6

47
Tree	int cols = problem . calculateStackTotal () ;
Code	int cols = problem . calculateStackTotal () ;
Distance : 4

48
Tree	final int [] diffNorm = problem . newCachedThreadPool () ;
Code	final int [] diffNorm = problem . newCachedThreadPool () ;
Distance : 5

49
Tree	final int [] cols = sd . newCachedThreadPool () ;
Code	final int [] cols = sd . newCachedThreadPool () ;
Distance : 5

50
Tree	final int pEnd = ( problem ) length ;
Code	final int pEnd = ( problem ) length ;
Distance : 6

51
Tree	final int [] [] cols = problem . computeSigma ( w , NUMBER_CONSTANT ) ;
Code	final int [] [] cols = problem . computeSigma ( w , NUMBER_CONSTANT ) ;
Distance : 8

52
Tree	final int cols = problem . newCachedThreadPool ( Cartesian1D.ZERO ) ;
Code	final int cols = problem . newCachedThreadPool ( Cartesian1D.ZERO ) ;
Distance : 4

53
Tree	final int isMinim = problem . newCachedThreadPool ( Cartesian1D.ZERO ) ;
Code	final int isMinim = problem . newCachedThreadPool ( Cartesian1D.ZERO ) ;
Distance : 5

54
Tree	final int pEnd = problem . newCachedThreadPool () ;
Code	final int pEnd = problem . newCachedThreadPool () ;
Distance : 4

55
Tree	final int pEnd = problem . newCachedThreadPool () - NUMBER_CONSTANT ;
Code	final int pEnd = problem . newCachedThreadPool () - NUMBER_CONSTANT ;
Distance : 4

56
Tree	final int [] [] cols = sd . newCachedThreadPool ( w , NUMBER_CONSTANT ) ;
Code	final int [] [] cols = sd . newCachedThreadPool ( w , NUMBER_CONSTANT ) ;
Distance : 9

57
Tree	int cols = problem . computeSigma () ;
Code	int cols = problem . computeSigma () ;
Distance : 4

58
Tree	final int [] cols = problem . calculateStackTotal () ;
Code	final int [] cols = problem . calculateStackTotal () ;
Distance : 4

59
Tree	final int [] cols = problem . intersection () ;
Code	final int [] cols = problem . intersection () ;
Distance : 4

60
Tree	final int [] maxGenerations = problem . newCachedThreadPool () ;
Code	final int [] maxGenerations = problem . newCachedThreadPool () ;
Distance : 5

61
Tree	final int pEnd = problem . newCachedThreadPool ( LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY ) ;
Code	final int pEnd = problem . newCachedThreadPool ( LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY ) ;
Distance : 5

62
Tree	int [] problem = problem . computeSigma () ;
Code	int [] problem = problem . computeSigma () ;
Distance : 6

63
Tree	final int diffNorm = problem . newCachedThreadPool ( w , NUMBER_CONSTANT ) ;
Code	final int diffNorm = problem . newCachedThreadPool ( w , NUMBER_CONSTANT ) ;
Distance : 7

64
Tree	int diffNorm = ( problem ) length ;
Code	int diffNorm = ( problem ) length ;
Distance : 7

65
Tree	int [] [] cols = problem . newCachedThreadPool () ;
Code	int [] [] cols = problem . newCachedThreadPool () ;
Distance : 6

66
Tree	final int cols = problem ;
Code	final int cols = problem ;
Distance : 5

67
Tree	final int eps = problem . newCachedThreadPool () . length ;
Code	final int eps = problem . newCachedThreadPool () . length ;
Distance : 2

68
Tree	final int eps = problem . newCachedThreadPool () - NUMBER_CONSTANT ;
Code	final int eps = problem . newCachedThreadPool () - NUMBER_CONSTANT ;
Distance : 4

69
Tree	int xabs = ( problem ) length ;
Code	int xabs = ( problem ) length ;
Distance : 7

70
Tree	final int diffNorm = problem . newCachedThreadPool () - NUMBER_CONSTANT ;
Code	final int diffNorm = problem . newCachedThreadPool () - NUMBER_CONSTANT ;
Distance : 4

71
Tree	final int [] [] cols = problem . newCachedThreadPool ( class2 , NUMBER_CONSTANT ) ;
Code	final int [] [] cols = problem . newCachedThreadPool ( class2 , NUMBER_CONSTANT ) ;
Distance : 8

72
Tree	final int eps = problem . newCachedThreadPool () ;
Code	final int eps = problem . newCachedThreadPool () ;
Distance : 4

73
Tree	final int diffNorm = problem . newCachedThreadPool ( false , origin ) ;
Code	final int diffNorm = problem . newCachedThreadPool ( false , origin ) ;
Distance : 7

74
Tree	final int delimiter = problem . newCachedThreadPool () . length ;
Code	final int delimiter = problem . newCachedThreadPool () . length ;
Distance : 2

75
Tree	final Object cols = problem . newCachedThreadPool () ;
Code	final Object cols = problem . newCachedThreadPool () ;
Distance : 4

76
Tree	cols cols = problem . newCachedThreadPool () ;
Code	cols cols = problem . newCachedThreadPool () ;
Distance : 5

77
Tree	final int isMinim = problem ;
Code	final int isMinim = problem ;
Distance : 6

78
Tree	int [] problem = sd . newCachedThreadPool () ;
Code	int [] problem = sd . newCachedThreadPool () ;
Distance : 7

79
Tree	int isMinim = ( problem ) length ;
Code	int isMinim = ( problem ) length ;
Distance : 7

80
Tree	final int eps = ( problem ) length ;
Code	final int eps = ( problem ) length ;
Distance : 6

81
Tree	cols = problem . newCachedThreadPool ()
Code	cols = problem . newCachedThreadPool ()
Distance : 6

82
Tree	int [] problem = problem . intersection () ;
Code	int [] problem = problem . intersection () ;
Distance : 6

83
Tree	final int [] [] cols = problem . newCachedThreadPool ( Locale.US ) ;
Code	final int [] [] cols = problem . newCachedThreadPool ( Locale.US ) ;
Distance : 6

84
Tree	final int [] pEnd = problem . newCachedThreadPool () ;
Code	final int [] pEnd = problem . newCachedThreadPool () ;
Distance : 5

85
Tree	final int cols = problem . newCachedThreadPool ( w , TransformType.INVERSE ) ;
Code	final int cols = problem . newCachedThreadPool ( w , TransformType.INVERSE ) ;
Distance : 6

86
Tree	final int diffNorm = problem . computeSigma () . length ;
Code	final int diffNorm = problem . computeSigma () . length ;
Distance : 2

87
Tree	int maxGenerations = ( problem ) length ;
Code	int maxGenerations = ( problem ) length ;
Distance : 7

88
Tree	final int maxGenerations = ( problem ) length ;
Code	final int maxGenerations = ( problem ) length ;
Distance : 6

89
Tree	final int eps = problem . newCachedThreadPool ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int eps = problem . newCachedThreadPool ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

90
Tree	final int maxGenerations = problem . newCachedThreadPool () ;
Code	final int maxGenerations = problem . newCachedThreadPool () ;
Distance : 4

91
Tree	final int delimiter = problem . newCachedThreadPool () ;
Code	final int delimiter = problem . newCachedThreadPool () ;
Distance : 4

92
Tree	final int cols = problem . newCachedThreadPool () . length ;
Code	final int cols = problem . newCachedThreadPool () . length ;
Distance : 1

93
Tree	final int isMinim = problem . newCachedThreadPool ( w , TransformType.INVERSE ) ;
Code	final int isMinim = problem . newCachedThreadPool ( w , TransformType.INVERSE ) ;
Distance : 7

94
Tree	final int isMinim = problem . newCachedThreadPool () . length ;
Code	final int isMinim = problem . newCachedThreadPool () . length ;
Distance : 2

95
Tree	final int pEnd = problem . newCachedThreadPool ( false , length ) ;
Code	final int pEnd = problem . newCachedThreadPool ( false , length ) ;
Distance : 6

96
Tree	final int diffNorm = problem . computeSigma () ;
Code	final int diffNorm = problem . computeSigma () ;
Distance : 4

97
Tree	final int eps = problem . newCachedThreadPool ( w , NUMBER_CONSTANT ) ;
Code	final int eps = problem . newCachedThreadPool ( w , NUMBER_CONSTANT ) ;
Distance : 7

98
Tree	final int diffNorm = problem . newCachedThreadPool ( Cartesian1D.ZERO ) ;
Code	final int diffNorm = problem . newCachedThreadPool ( Cartesian1D.ZERO ) ;
Distance : 5

99
Tree	final int diffNorm = problem . newCachedThreadPool ( LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY ) ;
Code	final int diffNorm = problem . newCachedThreadPool ( LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY ) ;
Distance : 5

100
Tree	final int cols = problem . newCachedThreadPool ( w , Locale.US ) ;
Code	final int cols = problem . newCachedThreadPool ( w , Locale.US ) ;
Distance : 6

101
Tree	final int diffNorm = problem . newCachedThreadPool ( w , plane.w ) ;
Code	final int diffNorm = problem . newCachedThreadPool ( w , plane.w ) ;
Distance : 7

102
Tree	final int [] [] cols = problem . newCachedThreadPool ( INDEX_OFFSET , NUMBER_CONSTANT ) ;
Code	final int [] [] cols = problem . newCachedThreadPool ( INDEX_OFFSET , NUMBER_CONSTANT ) ;
Distance : 8

103
Tree	final int [] [] pEnd = problem . newCachedThreadPool ( w , NUMBER_CONSTANT ) ;
Code	final int [] [] pEnd = problem . newCachedThreadPool ( w , NUMBER_CONSTANT ) ;
Distance : 9

104
Tree	final int isMinim = problem . newCachedThreadPool () - NUMBER_CONSTANT ;
Code	final int isMinim = problem . newCachedThreadPool () - NUMBER_CONSTANT ;
Distance : 4

105
Tree	int [] problem = problem . newNewtonSolver () ;
Code	int [] problem = problem . newNewtonSolver () ;
Distance : 6

106
Tree	int [] [] cols = problem . computeSigma () ;
Code	int [] [] cols = problem . computeSigma () ;
Distance : 6

107
Tree	final int isMinim = problem . newCachedThreadPool ( w , Locale.US ) ;
Code	final int isMinim = problem . newCachedThreadPool ( w , Locale.US ) ;
Distance : 7

108
Tree	final int maxGenerations = problem . newCachedThreadPool () - NUMBER_CONSTANT ;
Code	final int maxGenerations = problem . newCachedThreadPool () - NUMBER_CONSTANT ;
Distance : 4

109
Tree	final int delimiter = ( problem ) length ;
Code	final int delimiter = ( problem ) length ;
Distance : 6

110
Tree	int [] [] diffNorm = problem . newCachedThreadPool () ;
Code	int [] [] diffNorm = problem . newCachedThreadPool () ;
Distance : 7

111
Tree	final int pEnd = problem . newCachedThreadPool ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int pEnd = problem . newCachedThreadPool ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

112
Tree	final int diffNorm = problem ;
Code	final int diffNorm = problem ;
Distance : 6

113
Tree	final int maxGenerations = problem . newCachedThreadPool () . length ;
Code	final int maxGenerations = problem . newCachedThreadPool () . length ;
Distance : 2

114
Tree	int [] problem = problem . newBrentSolver () ;
Code	int [] problem = problem . newBrentSolver () ;
Distance : 6

115
Tree	cols = problem . intersection ()
Code	cols = problem . intersection ()
Distance : 6

116
Tree	x1 = problem . newCachedThreadPool ()
Code	x1 = problem . newCachedThreadPool ()
Distance : 7

117
Tree	cols = problem . legendreHighPrecision ()
Code	cols = problem . legendreHighPrecision ()
Distance : 6

118
Tree	int [] [] cols = problem . intersection () ;
Code	int [] [] cols = problem . intersection () ;
Distance : 6

119
Tree	final int diffNorm = problem . newCachedThreadPool ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int diffNorm = problem . newCachedThreadPool ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

120
Tree	final int maxGenerations = problem ;
Code	final int maxGenerations = problem ;
Distance : 6

121
Tree	final int cols = problem . newCachedThreadPool ( LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY ) ;
Code	final int cols = problem . newCachedThreadPool ( LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY ) ;
Distance : 4

122
Tree	final int diffNorm = problem . newCachedThreadPool () . length ;
Code	final int diffNorm = problem . newCachedThreadPool () . length ;
Distance : 2

123
Tree	cols x1 = problem . newCachedThreadPool () ;
Code	cols x1 = problem . newCachedThreadPool () ;
Distance : 6

124
Tree	int [] [] cols = sd . newCachedThreadPool () ;
Code	int [] [] cols = sd . newCachedThreadPool () ;
Distance : 7

125
Tree	final int diffNorm = problem . newCachedThreadPool ( obj1.props ) ;
Code	final int diffNorm = problem . newCachedThreadPool ( obj1.props ) ;
Distance : 5

126
Tree	final int cols = problem . newCachedThreadPool () - NUMBER_CONSTANT ;
Code	final int cols = problem . newCachedThreadPool () - NUMBER_CONSTANT ;
Distance : 3

127
Tree	final int [] [] cols = problem . newCachedThreadPool ( Cartesian2D.ZERO ) ;
Code	final int [] [] cols = problem . newCachedThreadPool ( Cartesian2D.ZERO ) ;
Distance : 6

128
Tree	final int isMinim = problem . newCachedThreadPool ( LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY ) ;
Code	final int isMinim = problem . newCachedThreadPool ( LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY ) ;
Distance : 5

129
Tree	int [] [] pEnd = problem . newCachedThreadPool () ;
Code	int [] [] pEnd = problem . newCachedThreadPool () ;
Distance : 7

130
Tree	final int cols = problem . newCachedThreadPool ( w , NUMBER_CONSTANT ) ;
Code	final int cols = problem . newCachedThreadPool ( w , NUMBER_CONSTANT ) ;
Distance : 6

131
Tree	final int isMinim = problem . newCachedThreadPool ( w , NUMBER_CONSTANT ) ;
Code	final int isMinim = problem . newCachedThreadPool ( w , NUMBER_CONSTANT ) ;
Distance : 7

132
Tree	final int [] [] cols = problem . newCachedThreadPool ( config.tracerMode ) ;
Code	final int [] [] cols = problem . newCachedThreadPool ( config.tracerMode ) ;
Distance : 6

133
Tree	final int [] [] cols = problem . newCachedThreadPool ( LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY ) ;
Code	final int [] [] cols = problem . newCachedThreadPool ( LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY ) ;
Distance : 6

134
Tree	final int [] [] cols = problem . newCachedThreadPool ( RandomSource.TWO_CMRES ) ;
Code	final int [] [] cols = problem . newCachedThreadPool ( RandomSource.TWO_CMRES ) ;
Distance : 6

135
Tree	final int delimiter = problem . newCachedThreadPool () - NUMBER_CONSTANT ;
Code	final int delimiter = problem . newCachedThreadPool () - NUMBER_CONSTANT ;
Distance : 4

136
Tree	final int power = problem ;
Code	final int power = problem ;
Distance : 6

137
Tree	final int [] [] diffNorm = problem . newCachedThreadPool ( w , NUMBER_CONSTANT ) ;
Code	final int [] [] diffNorm = problem . newCachedThreadPool ( w , NUMBER_CONSTANT ) ;
Distance : 9

138
Tree	final int [] [] cols = problem . intersection ( w , NUMBER_CONSTANT ) ;
Code	final int [] [] cols = problem . intersection ( w , NUMBER_CONSTANT ) ;
Distance : 8

139
Tree	final int maxGenerations = problem . newCachedThreadPool ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int maxGenerations = problem . newCachedThreadPool ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

140
Tree	final int [] [] cols = problem . newCachedThreadPool ( obj1.props ) ;
Code	final int [] [] cols = problem . newCachedThreadPool ( obj1.props ) ;
Distance : 6

141
Tree	final int cols = problem . newCachedThreadPool ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int cols = problem . newCachedThreadPool ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 6

142
Tree	final int delimiter = problem ;
Code	final int delimiter = problem ;
Distance : 6

143
Tree	final int [] [] cols = problem . newCachedThreadPool ( w , NUMBER_CONSTANT ) ;
Code	final int [] [] cols = problem . newCachedThreadPool ( w , NUMBER_CONSTANT ) ;
Distance : 8

144
Tree	final int pEnd = problem . newCachedThreadPool ( w , NUMBER_CONSTANT ) ;
Code	final int pEnd = problem . newCachedThreadPool ( w , NUMBER_CONSTANT ) ;
Distance : 7

145
Tree	final int diffNorm = problem . computeSigma () - NUMBER_CONSTANT ;
Code	final int diffNorm = problem . computeSigma () - NUMBER_CONSTANT ;
Distance : 4

146
Tree	final int isMinim = problem . newCachedThreadPool ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int isMinim = problem . newCachedThreadPool ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

147
Tree	final int diffNorm = problem . computeSigma ( w , NUMBER_CONSTANT ) ;
Code	final int diffNorm = problem . computeSigma ( w , NUMBER_CONSTANT ) ;
Distance : 7

148
Tree	int [] [] cols = problem . newBrentSolver () ;
Code	int [] [] cols = problem . newBrentSolver () ;
Distance : 6

149
Tree	final int isMinim = ( ( w ) length ) . declare () ;
Code	final int isMinim = ( ( w ) length ) . declare () ;
Distance : 9

150
Tree	final int [] [] cols = problem . newCachedThreadPool ( Coordinates2D.ZERO ) ;
Code	final int [] [] cols = problem . newCachedThreadPool ( Coordinates2D.ZERO ) ;
Distance : 6

151
Tree	int [] [] nthHarmonic = problem . newCachedThreadPool () ;
Code	int [] [] nthHarmonic = problem . newCachedThreadPool () ;
Distance : 7

152
Tree	final String cols = problem . newCachedThreadPool () ;
Code	final String cols = problem . newCachedThreadPool () ;
Distance : 4

153
Tree	final int cols = ( ( w ) length ) . declare () ;
Code	final int cols = ( ( w ) length ) . declare () ;
Distance : 8

154
Tree	final int diffNorm = problem . newCachedThreadPool ( new Object [ NUMBER_CONSTANT ] ) ;
Code	final int diffNorm = problem . newCachedThreadPool ( new Object [ NUMBER_CONSTANT ] ) ;
Distance : 9

155
Tree	final int pEnd = ( ( w ) length ) . getPeriod () ;
Code	final int pEnd = ( ( w ) length ) . getPeriod () ;
Distance : 9

156
Tree	dim cols = problem . newCachedThreadPool () ;
Code	dim cols = problem . newCachedThreadPool () ;
Distance : 5

157
Tree	cols = problem . calculateStackTotal ()
Code	cols = problem . calculateStackTotal ()
Distance : 6

158
Tree	final Object fitfun = problem . newCachedThreadPool () ;
Code	final Object fitfun = problem . newCachedThreadPool () ;
Distance : 5

159
Tree	final int isMinim = ( ( w ) length ) . getPeriod () ;
Code	final int isMinim = ( ( w ) length ) . getPeriod () ;
Distance : 9

160
Tree	final int cols = ( ( w ) length ) . getPeriod () ;
Code	final int cols = ( ( w ) length ) . getPeriod () ;
Distance : 8

161
Tree	final Object diffNorm = problem . newCachedThreadPool () ;
Code	final Object diffNorm = problem . newCachedThreadPool () ;
Distance : 5

162
Tree	final int cols = problem . newCachedThreadPool ( w , plane.w ) ;
Code	final int cols = problem . newCachedThreadPool ( w , plane.w ) ;
Distance : 6

163
Tree	final Integer cols = problem . newCachedThreadPool () ;
Code	final Integer cols = problem . newCachedThreadPool () ;
Distance : 4

164
Tree	final int isMinim = problem . newCachedThreadPool ( new Object [ NUMBER_CONSTANT ] ) ;
Code	final int isMinim = problem . newCachedThreadPool ( new Object [ NUMBER_CONSTANT ] ) ;
Distance : 9

165
Tree	final int cols = problem . newCachedThreadPool ( new Object [ NUMBER_CONSTANT ] ) ;
Code	final int cols = problem . newCachedThreadPool ( new Object [ NUMBER_CONSTANT ] ) ;
Distance : 8

166
Tree	final int maxGenerations = problem . newCachedThreadPool ( w , NUMBER_CONSTANT ) ;
Code	final int maxGenerations = problem . newCachedThreadPool ( w , NUMBER_CONSTANT ) ;
Distance : 7

167
Tree	final Object cols = problem . computeSigma () ;
Code	final Object cols = problem . computeSigma () ;
Distance : 4

168
Tree	x1 cols = problem . newCachedThreadPool () ;
Code	x1 cols = problem . newCachedThreadPool () ;
Distance : 5

169
Tree	nthHarmonic cols = problem . newCachedThreadPool () ;
Code	nthHarmonic cols = problem . newCachedThreadPool () ;
Distance : 5

170
Tree	final int diffNorm = ( ( w ) length ) . getDeclaredType () ;
Code	final int diffNorm = ( ( w ) length ) . getDeclaredType () ;
Distance : 9

171
Tree	final int delimiter = problem . newCachedThreadPool ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final int delimiter = problem . newCachedThreadPool ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 7

172
Tree	cols cols = problem . intersection () ;
Code	cols cols = problem . intersection () ;
Distance : 5

173
Tree	final Object maxGenerations = problem . newCachedThreadPool () ;
Code	final Object maxGenerations = problem . newCachedThreadPool () ;
Distance : 5

174
Tree	final int diffNorm = ( ( w ) length ) . declare () ;
Code	final int diffNorm = ( ( w ) length ) . declare () ;
Distance : 9

175
Tree	cols cols = problem . computeSigma () ;
Code	cols cols = problem . computeSigma () ;
Distance : 5

176
Tree	final int diffNorm = problem . gradient ( w . copySelf () , length . length () ) ;
Code	final int diffNorm = problem . gradient ( w . copySelf () , length . length () ) ;
Distance : 10

177
Tree	final int diffNorm = problem . gradient ( w . copySelf () , length () ) ;
Code	final int diffNorm = problem . gradient ( w . copySelf () , length () ) ;
Distance : 9

178
Tree	final int pEnd = problem . newCachedThreadPool ( new Object [ NUMBER_CONSTANT ] ) ;
Code	final int pEnd = problem . newCachedThreadPool ( new Object [ NUMBER_CONSTANT ] ) ;
Distance : 9

179
Tree	final int diffNorm = problem . defaultItemURLGenerator ( w . copySelf () , length . length () ) ;
Code	final int diffNorm = problem . defaultItemURLGenerator ( w . copySelf () , length . length () ) ;
Distance : 10

180
Tree	diffNorm cols = problem . newCachedThreadPool () ;
Code	diffNorm cols = problem . newCachedThreadPool () ;
Distance : 5

181
Tree	final int diffNorm = problem . defaultItemURLGenerator ( w . copySelf () , length () ) ;
Code	final int diffNorm = problem . defaultItemURLGenerator ( w . copySelf () , length () ) ;
Distance : 9

182
Tree	final int delimiter = problem . newCachedThreadPool ( w , NUMBER_CONSTANT ) ;
Code	final int delimiter = problem . newCachedThreadPool ( w , NUMBER_CONSTANT ) ;
Distance : 7

183
Tree	final int eps = problem . newCachedThreadPool ( new Object [ NUMBER_CONSTANT ] ) ;
Code	final int eps = problem . newCachedThreadPool ( new Object [ NUMBER_CONSTANT ] ) ;
Distance : 9

184
Tree	final int cols = problem . gradient ( w . copySelf () , length . length () ) ;
Code	final int cols = problem . gradient ( w . copySelf () , length . length () ) ;
Distance : 9

185
Tree	final int isMinim = problem . gradient ( w . copySelf () , length . length () ) ;
Code	final int isMinim = problem . gradient ( w . copySelf () , length . length () ) ;
Distance : 10

186
Tree	final int maxGenerations = problem . newCachedThreadPool ( new Object [ NUMBER_CONSTANT ] ) ;
Code	final int maxGenerations = problem . newCachedThreadPool ( new Object [ NUMBER_CONSTANT ] ) ;
Distance : 9

187
Tree	final int delimiter = problem . newCachedThreadPool ( new Object [ NUMBER_CONSTANT ] ) ;
Code	final int delimiter = problem . newCachedThreadPool ( new Object [ NUMBER_CONSTANT ] ) ;
Distance : 9

188
Tree	final int diffNorm = problem . gradient ( w . getNameNode () , length () ) ;
Code	final int diffNorm = problem . gradient ( w . getNameNode () , length () ) ;
Distance : 9

189
Tree	final Object dim = problem . newCachedThreadPool () ;
Code	final Object dim = problem . newCachedThreadPool () ;
Distance : 5

190
Tree	final int cols = problem . gradient ( w . copySelf () , length () ) ;
Code	final int cols = problem . gradient ( w . copySelf () , length () ) ;
Distance : 8

191
Tree	final int diffNorm = problem . computeSigma ( new Object [ NUMBER_CONSTANT ] ) ;
Code	final int diffNorm = problem . computeSigma ( new Object [ NUMBER_CONSTANT ] ) ;
Distance : 9

192
Tree	final int isMinim = problem . gradient ( w . copySelf () , length () ) ;
Code	final int isMinim = problem . gradient ( w . copySelf () , length () ) ;
Distance : 9

193
Tree	final int cols = problem . defaultItemURLGenerator ( w . copySelf () , length . length () ) ;
Code	final int cols = problem . defaultItemURLGenerator ( w . copySelf () , length . length () ) ;
Distance : 9

194
Tree	final int isMinim = problem . defaultItemURLGenerator ( w . copySelf () , length . length () ) ;
Code	final int isMinim = problem . defaultItemURLGenerator ( w . copySelf () , length . length () ) ;
Distance : 10

195
Tree	final int diffNorm = problem . gradient ( w . getNameNode () , length . length () ) ;
Code	final int diffNorm = problem . gradient ( w . getNameNode () , length . length () ) ;
Distance : 10

196
Tree	final int diffNorm = problem . defaultItemURLGenerator ( w . getNameNode () , length () ) ;
Code	final int diffNorm = problem . defaultItemURLGenerator ( w . getNameNode () , length () ) ;
Distance : 9

197
Tree	final int diffNorm = problem . gradient ( w . newCachedThreadPool () , length . length () ) ;
Code	final int diffNorm = problem . gradient ( w . newCachedThreadPool () , length . length () ) ;
Distance : 10

198
Tree	final int cols = problem . defaultItemURLGenerator ( w . copySelf () , length () ) ;
Code	final int cols = problem . defaultItemURLGenerator ( w . copySelf () , length () ) ;
Distance : 8

199
Tree	final int isMinim = problem . defaultItemURLGenerator ( w . copySelf () , length () ) ;
Code	final int isMinim = problem . defaultItemURLGenerator ( w . copySelf () , length () ) ;
Distance : 9

========================================================================


========================================================================
Example Number: 52
Parent Code is: 
final BigDecimal [] out = new BigDecimal [ v.length ] ;
-------------------------------------------------------------------------------
Child code is: 
final BigDecimal [] out = new BigDecimal [ nRows ] ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (5 (43 (801{val=BigDecimal})) (85{val=[]})) (59 (800{val=out}) (204{val==}) (3 (304{val=new}) (5 (43 (801{val=BigDecimal})) (221{val=[})) (40{val=v.length}) (222{val=]}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (5 (43 (801{val=BigDecimal})) (85{val=[]})) (59 (800{val=out}) (204{val==}) (3 (304{val=new}) (5 (43 (801{val=BigDecimal})) (221{val=[})) (800{val=nRows}) (222{val=]}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/98/parent/src_java_org_apache_commons_math_linear_BigMatrixImpl.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 72
Wrong
========================================================================
False

0
Tree	final BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new BigDecimal [ NUMBER_CONSTANT ] ;
Distance : 1

1
Tree	final BigDecimal [] out = new LenientChronology [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new LenientChronology [ NUMBER_CONSTANT ] ;
Distance : 2

2
Tree	final BigDecimal [] out = MathArrays . getInstance ( INDEX_OFFSET , null ) ;
Code	final BigDecimal [] out = MathArrays . getInstance ( INDEX_OFFSET , null ) ;
Distance : 8

3
Tree	final BigDecimal [] out = new Add [ omega ] ;
Code	final BigDecimal [] out = new Add [ omega ] ;
Distance : 2

4
Tree	final BigDecimal [] out = MathArrays . getInstance ( field , null ) ;
Code	final BigDecimal [] out = MathArrays . getInstance ( field , null ) ;
Distance : 8

5
Tree	final BigDecimal [] out = new Add [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new Add [ NUMBER_CONSTANT ] ;
Distance : 2

6
Tree	final BigDecimal [] out = new BigDecimal [ omega ] ;
Code	final BigDecimal [] out = new BigDecimal [ omega ] ;
Distance : 1

7
Tree	final BigDecimal [] out = MathArrays . getInstance ( JAVA_1_5 , null ) ;
Code	final BigDecimal [] out = MathArrays . getInstance ( JAVA_1_5 , null ) ;
Distance : 8

8
Tree	final BigDecimal [] out = MathArrays . getInstance ( chronoLocal , null ) ;
Code	final BigDecimal [] out = MathArrays . getInstance ( chronoLocal , null ) ;
Distance : 8

9
Tree	final BigDecimal [] out = new MutableFloat [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new MutableFloat [ NUMBER_CONSTANT ] ;
Distance : 2

10
Tree	final BigDecimal [] out = BigDecimal . getInstance ( field , null ) ;
Code	final BigDecimal [] out = BigDecimal . getInstance ( field , null ) ;
Distance : 8

11
Tree	final BigDecimal [] out = TypeMismatch . getInstance ( field , null ) ;
Code	final BigDecimal [] out = TypeMismatch . getInstance ( field , null ) ;
Distance : 8

12
Tree	final BigDecimal [] out = new LenientChronology [ omega ] ;
Code	final BigDecimal [] out = new LenientChronology [ omega ] ;
Distance : 2

13
Tree	final BigDecimal [] out = MathArrays . getDimension ( field , null ) ;
Code	final BigDecimal [] out = MathArrays . getDimension ( field , null ) ;
Distance : 8

14
Tree	final BigDecimal [] out = MathArrays . isNaN ( field , null ) ;
Code	final BigDecimal [] out = MathArrays . isNaN ( field , null ) ;
Distance : 8

15
Tree	final BigDecimal [] out = new MutableFloat [ omega ] ;
Code	final BigDecimal [] out = new MutableFloat [ omega ] ;
Distance : 2

16
Tree	final BigDecimal [] out = new BigDecimal < Short > [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new BigDecimal < Short > [ NUMBER_CONSTANT ] ;
Distance : 4

17
Tree	final BigDecimal [] out = new BigDecimal < TypeMismatch > [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new BigDecimal < TypeMismatch > [ NUMBER_CONSTANT ] ;
Distance : 4

18
Tree	final BigDecimal [] out = new Add < JSType > [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new Add < JSType > [ NUMBER_CONSTANT ] ;
Distance : 5

19
Tree	final BigDecimal [] out = new LenientChronology [] / ;
Code	final BigDecimal [] out = new LenientChronology [] / ;
Distance : 4

20
Tree	final BigDecimal [] out = new Add [] MathArrays ] ;
Code	final BigDecimal [] out = new Add [] MathArrays ] ;
Distance : 3

21
Tree	final BigDecimal [] out = MathArrays . natural ( new Add [ NUMBER_CONSTANT ] , false ) ;
Code	final BigDecimal [] out = MathArrays . natural ( new Add [ NUMBER_CONSTANT ] , false ) ;
Distance : 9

22
Tree	final BigDecimal [] out = new Short [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new Short [ NUMBER_CONSTANT ] ;
Distance : 2

23
Tree	final BigDecimal [] out = new MutableFloat [] / ;
Code	final BigDecimal [] out = new MutableFloat [] / ;
Distance : 4

24
Tree	final BigDecimal [] out = new BigDecimal [] FastMath ] ;
Code	final BigDecimal [] out = new BigDecimal [] FastMath ] ;
Distance : 2

25
Tree	final BigDecimal [] out = new BigDecimal [] / ;
Code	final BigDecimal [] out = new BigDecimal [] / ;
Distance : 3

26
Tree	final BigDecimal [] out = new Add < Short > [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new Add < Short > [ NUMBER_CONSTANT ] ;
Distance : 5

27
Tree	final BigDecimal [] out = new EqualsBuilder [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new EqualsBuilder [ NUMBER_CONSTANT ] ;
Distance : 2

28
Tree	final BigDecimal [] out = new BigDecimal < JSType > [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new BigDecimal < JSType > [ NUMBER_CONSTANT ] ;
Distance : 4

29
Tree	final BigDecimal [] out = new Short [ omega ] ;
Code	final BigDecimal [] out = new Short [ omega ] ;
Distance : 2

30
Tree	final BigDecimal [] out = new Add [] ++ ;
Code	final BigDecimal [] out = new Add [] ++ ;
Distance : 4

31
Tree	final BigDecimal [] out = new BigDecimal [ types ] ;
Code	final BigDecimal [] out = new BigDecimal [ types ] ;
Distance : 1

32
Tree	final BigDecimal [] out = new Add < TypeMismatch > [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new Add < TypeMismatch > [ NUMBER_CONSTANT ] ;
Distance : 5

33
Tree	final BigDecimal [] out = new TypeMismatch [ omega ] ;
Code	final BigDecimal [] out = new TypeMismatch [ omega ] ;
Distance : 2

34
Tree	final BigDecimal [] out = new Add [] <> ;
Code	final BigDecimal [] out = new Add [] <> ;
Distance : 4

35
Tree	final BigDecimal [] out = new LenientChronology [] MathArrays ] ;
Code	final BigDecimal [] out = new LenientChronology [] MathArrays ] ;
Distance : 3

36
Tree	final BigDecimal [] out = new BigDecimal [] <> ;
Code	final BigDecimal [] out = new BigDecimal [] <> ;
Distance : 3

37
Tree	final BigDecimal [] out = new TypeMismatch [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new TypeMismatch [ NUMBER_CONSTANT ] ;
Distance : 2

38
Tree	final BigDecimal [] out = new SerializableTypeVariable [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new SerializableTypeVariable [ NUMBER_CONSTANT ] ;
Distance : 2

39
Tree	final BigDecimal [] out = new BigDecimal [] MathArrays ] ;
Code	final BigDecimal [] out = new BigDecimal [] MathArrays ] ;
Distance : 2

40
Tree	final BigDecimal [] out = new LenientChronology < JSType > [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new LenientChronology < JSType > [ NUMBER_CONSTANT ] ;
Distance : 5

41
Tree	final BigDecimal [] out = new Add [] / ;
Code	final BigDecimal [] out = new Add [] / ;
Distance : 4

42
Tree	final BigDecimal [] out = new Add [] types ] ;
Code	final BigDecimal [] out = new Add [] types ] ;
Distance : 3

43
Tree	final BigDecimal [] out = MathArrays . natural ( new SerializableTypeVariable [ NUMBER_CONSTANT ] , false ) ;
Code	final BigDecimal [] out = MathArrays . natural ( new SerializableTypeVariable [ NUMBER_CONSTANT ] , false ) ;
Distance : 9

44
Tree	final BigDecimal [] out = new BigDecimal [] ++ ;
Code	final BigDecimal [] out = new BigDecimal [] ++ ;
Distance : 3

45
Tree	final BigDecimal [] out = new BigDecimal [] nthHarmonic ] ;
Code	final BigDecimal [] out = new BigDecimal [] nthHarmonic ] ;
Distance : 2

46
Tree	final BigDecimal [] out = new MutableFloat < JSType > [ NUMBER_CONSTANT ] ;
Code	final BigDecimal [] out = new MutableFloat < JSType > [ NUMBER_CONSTANT ] ;
Distance : 5

47
Tree	final BigDecimal [] out = new EqualsBuilder [ omega ] ;
Code	final BigDecimal [] out = new EqualsBuilder [ omega ] ;
Distance : 2

48
Tree	final BigDecimal [] out = BigDecimal . natural ( new SerializableTypeVariable [ NUMBER_CONSTANT ] , false ) ;
Code	final BigDecimal [] out = BigDecimal . natural ( new SerializableTypeVariable [ NUMBER_CONSTANT ] , false ) ;
Distance : 9

49
Tree	final BigDecimal [] out = new BigDecimal [] FastDateFormat ] ;
Code	final BigDecimal [] out = new BigDecimal [] FastDateFormat ] ;
Distance : 2

50
Tree	final BigDecimal [] out = new BigDecimal [] / ] ;
Code	final BigDecimal [] out = new BigDecimal [] / ] ;
Distance : 2

51
Tree	final BigDecimal [] out = new BigDecimal [] ++ ] ;
Code	final BigDecimal [] out = new BigDecimal [] ++ ] ;
Distance : 2

52
Tree	final BigDecimal [] out = MathArrays . minor ( new SerializableTypeVariable [ NUMBER_CONSTANT ] , false ) ;
Code	final BigDecimal [] out = MathArrays . minor ( new SerializableTypeVariable [ NUMBER_CONSTANT ] , false ) ;
Distance : 9

53
Tree	final BigDecimal [] out = new Add [] / ] ;
Code	final BigDecimal [] out = new Add [] / ] ;
Distance : 3

54
Tree	final BigDecimal [] out = new BigDecimal [] types ] ;
Code	final BigDecimal [] out = new BigDecimal [] types ] ;
Distance : 2

55
Tree	final BigDecimal [] out = new LenientChronology [] / ] ;
Code	final BigDecimal [] out = new LenientChronology [] / ] ;
Distance : 3

56
Tree	final BigDecimal [] out = TypeMismatch . natural ( new SerializableTypeVariable [ NUMBER_CONSTANT ] , false ) ;
Code	final BigDecimal [] out = TypeMismatch . natural ( new SerializableTypeVariable [ NUMBER_CONSTANT ] , false ) ;
Distance : 9

57
Tree	final BigDecimal [] out = new MutableFloat [ v.length ] ;
Code	final BigDecimal [] out = new MutableFloat [ v.length ] ;
Distance : 2

58
Tree	final BigDecimal [] out = new EqualsBuilder [ v.length ] ;
Code	final BigDecimal [] out = new EqualsBuilder [ v.length ] ;
Distance : 2

59
Tree	final BigDecimal [] out = iField . natural ( new SerializableTypeVariable [ NUMBER_CONSTANT ] , false ) ;
Code	final BigDecimal [] out = iField . natural ( new SerializableTypeVariable [ NUMBER_CONSTANT ] , false ) ;
Distance : 9

60
Tree	final BigDecimal [] out = new Short [ v.length ] ;
Code	final BigDecimal [] out = new Short [ v.length ] ;
Distance : 2

61
Tree	final BigDecimal [] out = new TypeMismatch [ v.length ] ;
Code	final BigDecimal [] out = new TypeMismatch [ v.length ] ;
Distance : 2

62
Tree	final BigDecimal [] out = new MutableFloat [] / ] ;
Code	final BigDecimal [] out = new MutableFloat [] / ] ;
Distance : 3

63
Tree	final BigDecimal [] out = new LenientChronology [ v.length ] ;
Code	final BigDecimal [] out = new LenientChronology [ v.length ] ;
Distance : 2

64
Tree	final BigDecimal [] out = new BigDecimal [] <> ] ;
Code	final BigDecimal [] out = new BigDecimal [] <> ] ;
Distance : 2

65
Tree	final BigDecimal [] out = new Add [ v.length ] ;
Code	final BigDecimal [] out = new Add [ v.length ] ;
Distance : 2

66
Tree	final BigDecimal [] out = BigDecimal . natural ( new Add [ NUMBER_CONSTANT ] , false ) ;
Code	final BigDecimal [] out = BigDecimal . natural ( new Add [ NUMBER_CONSTANT ] , false ) ;
Distance : 9

67
Tree	final BigDecimal [] out = new BigDecimal [ v.length ] ;
Code	final BigDecimal [] out = new BigDecimal [ v.length ] ;
Distance : 1

68
Tree	final BigDecimal [] out = new Short [] / ] ;
Code	final BigDecimal [] out = new Short [] / ] ;
Distance : 3

69
Tree	final BigDecimal [] out = MathArrays . minor ( new Add [ NUMBER_CONSTANT ] , false ) ;
Code	final BigDecimal [] out = MathArrays . minor ( new Add [ NUMBER_CONSTANT ] , false ) ;
Distance : 9

70
Tree	final BigDecimal [] out = new SerializableTypeVariable [ v.length ] ;
Code	final BigDecimal [] out = new SerializableTypeVariable [ v.length ] ;
Distance : 2

71
Tree	final BigDecimal [] out = new BigDecimal [] >= ] ;
Code	final BigDecimal [] out = new BigDecimal [] >= ] ;
Distance : 2

========================================================================


========================================================================
Example Number: 53
Parent Code is: 
final double [] out = new double [ v.length ] ;
-------------------------------------------------------------------------------
Child code is: 
final double [] out = new double [ nRows ] ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (5 (39{val=double}) (85{val=[]})) (59 (800{val=out}) (204{val==}) (3 (304{val=new}) (5 (39{val=double}) (221{val=[})) (40{val=v.length}) (222{val=]}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (5 (39{val=double}) (85{val=[]})) (59 (800{val=out}) (204{val==}) (3 (304{val=new}) (5 (39{val=double}) (221{val=[})) (800{val=nRows}) (222{val=]}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/98/parent/src_java_org_apache_commons_math_linear_RealMatrixImpl.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	final double [] out = getTickLength ( field , false ) ;
Code	final double [] out = getTickLength ( field , false ) ;
Distance : 6

1
Tree	final double [] out = Coordinates3D [ NUMBER_CONSTANT ] . intValue () ;
Code	final double [] out = Coordinates3D [ NUMBER_CONSTANT ] . intValue () ;
Distance : 6

2
Tree	final double [] out = computeObjectiveValue ( field , v.length ) ;
Code	final double [] out = computeObjectiveValue ( field , v.length ) ;
Distance : 6

3
Tree	final double [] out = FastFourierTransformer ;
Code	final double [] out = FastFourierTransformer ;
Distance : 5

4
Tree	final double [] out = getDimension ( field , false ) ;
Code	final double [] out = getDimension ( field , false ) ;
Distance : 6

5
Tree	long [] out = new double [ omega ] ;
Code	long [] out = new double [ omega ] ;
Distance : 3

6
Tree	double [] out = y0 . getInstance () ;
Code	double [] out = y0 . getInstance () ;
Distance : 6

7
Tree	char [] out = new double [ omega ] ;
Code	char [] out = new double [ omega ] ;
Distance : 3

8
Tree	final double [] out = getColumnDimension ( field , NUMBER_CONSTANT ) ;
Code	final double [] out = getColumnDimension ( field , NUMBER_CONSTANT ) ;
Distance : 6

9
Tree	final double [] out = new double [ types () ] ;
Code	final double [] out = new double [ types () ] ;
Distance : 2

10
Tree	final double [] out = concatenateSamples ( field ) ;
Code	final double [] out = concatenateSamples ( field ) ;
Distance : 5

11
Tree	final double [] out = new double [ omega . IEEEremainder ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ omega . IEEEremainder ( NUMBER_CONSTANT ) ] ;
Distance : 6

12
Tree	final double [] out = checkInitialize ( field , v.length ) ;
Code	final double [] out = checkInitialize ( field , v.length ) ;
Distance : 6

13
Tree	final double [] out = MathArrays . y0 ( NUMBER_CONSTANT ) ;
Code	final double [] out = MathArrays . y0 ( NUMBER_CONSTANT ) ;
Distance : 6

14
Tree	final double [] out = hashCode ( field , v.length ) ;
Code	final double [] out = hashCode ( field , v.length ) ;
Distance : 6

15
Tree	final double [] out = new double [ omega . length ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ omega . length ( NUMBER_CONSTANT ) ] ;
Distance : 6

16
Tree	final double [] out = STRING_CONSTANT + out ;
Code	final double [] out = STRING_CONSTANT + out ;
Distance : 5

17
Tree	final double [] out = RealVector [ omega ] ;
Code	final double [] out = RealVector [ omega ] ;
Distance : 3

18
Tree	double [] out = new double [ omega ] ;
Code	double [] out = new double [ omega ] ;
Distance : 2

19
Tree	final double [] out = MathArrays . abs ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = MathArrays . abs ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

20
Tree	final double [] out = MathArrays . valueOf ( NUMBER_CONSTANT , v.length ) ;
Code	final double [] out = MathArrays . valueOf ( NUMBER_CONSTANT , v.length ) ;
Distance : 8

21
Tree	final double [] out = y0 . abs ( omega , v.length ) ;
Code	final double [] out = y0 . abs ( omega , v.length ) ;
Distance : 8

22
Tree	final double [] out = y0 . y0 ( NUMBER_CONSTANT ) ;
Code	final double [] out = y0 . y0 ( NUMBER_CONSTANT ) ;
Distance : 6

23
Tree	final double [] out = new double [ getDimension () ] ;
Code	final double [] out = new double [ getDimension () ] ;
Distance : 2

24
Tree	final double [] out = new double [ ceil () ] ;
Code	final double [] out = new double [ ceil () ] ;
Distance : 2

25
Tree	final double [] out = computeObjectiveValue ( field ) ;
Code	final double [] out = computeObjectiveValue ( field ) ;
Distance : 5

26
Tree	final double [] out = getTickLength ( field , NUMBER_CONSTANT ) ;
Code	final double [] out = getTickLength ( field , NUMBER_CONSTANT ) ;
Distance : 6

27
Tree	final double [] out = getDimension ( field , NUMBER_CONSTANT ) ;
Code	final double [] out = getDimension ( field , NUMBER_CONSTANT ) ;
Distance : 6

28
Tree	final double [] out = MathArrays . valueOf ( omega , v.length ) ;
Code	final double [] out = MathArrays . valueOf ( omega , v.length ) ;
Distance : 8

29
Tree	final double [] out = getTypeInternal ( field , false ) ;
Code	final double [] out = getTypeInternal ( field , false ) ;
Distance : 6

30
Tree	final double [] out = getColumnDimension ( field ) ;
Code	final double [] out = getColumnDimension ( field ) ;
Distance : 5

31
Tree	final double [] out = MathArrays . getDimension ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = MathArrays . getDimension ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

32
Tree	final double [] out = MathArrays . hashCode ( omega , NUMBER_CONSTANT ) ;
Code	final double [] out = MathArrays . hashCode ( omega , NUMBER_CONSTANT ) ;
Distance : 8

33
Tree	final double [] out = new double [ getRowDimension () ] ;
Code	final double [] out = new double [ getRowDimension () ] ;
Distance : 2

34
Tree	final double [] out = checkInitialize ( field , NUMBER_CONSTANT ) ;
Code	final double [] out = checkInitialize ( field , NUMBER_CONSTANT ) ;
Distance : 6

35
Tree	short [] out = new double [ omega ] ;
Code	short [] out = new double [ omega ] ;
Distance : 3

36
Tree	final double [] out = new double [ INDEX_OFFSET ] ;
Code	final double [] out = new double [ INDEX_OFFSET ] ;
Distance : 1

37
Tree	final double [] out = MathArrays . getGeneratorUpperBounds ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = MathArrays . getGeneratorUpperBounds ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

38
Tree	final double [] out = RealVector [ omega ] . clone () ;
Code	final double [] out = RealVector [ omega ] . clone () ;
Distance : 6

39
Tree	final double [] out = hashCode ( field , NUMBER_CONSTANT ) ;
Code	final double [] out = hashCode ( field , NUMBER_CONSTANT ) ;
Distance : 6

40
Tree	final double [] out = y0 . getGeneratorUpperBounds ( omega , v.length ) ;
Code	final double [] out = y0 . getGeneratorUpperBounds ( omega , v.length ) ;
Distance : 8

41
Tree	final double [] out = computeObjectiveValue ( field , NUMBER_CONSTANT ) ;
Code	final double [] out = computeObjectiveValue ( field , NUMBER_CONSTANT ) ;
Distance : 6

42
Tree	final double [] out = MathArrays . hashCode ( NUMBER_CONSTANT , v.length ) ;
Code	final double [] out = MathArrays . hashCode ( NUMBER_CONSTANT , v.length ) ;
Distance : 8

43
Tree	final double [] out = Coordinates3D [ omega ] . doubleValue () ;
Code	final double [] out = Coordinates3D [ omega ] . doubleValue () ;
Distance : 6

44
Tree	final double [] out = MathArrays . valueOf ( omega , NUMBER_CONSTANT ) ;
Code	final double [] out = MathArrays . valueOf ( omega , NUMBER_CONSTANT ) ;
Distance : 8

45
Tree	final double [] out = MathArrays . getDimension ( NUMBER_CONSTANT , v.length ) ;
Code	final double [] out = MathArrays . getDimension ( NUMBER_CONSTANT , v.length ) ;
Distance : 8

46
Tree	final double [] out = y0 . getGeneratorUpperBounds ( omega , NUMBER_CONSTANT ) ;
Code	final double [] out = y0 . getGeneratorUpperBounds ( omega , NUMBER_CONSTANT ) ;
Distance : 8

47
Tree	final double [] out = new double [ nCols ] ;
Code	final double [] out = new double [ nCols ] ;
Distance : 1

48
Tree	final double [] out = y0 ;
Code	final double [] out = y0 ;
Distance : 5

49
Tree	final double [] out = new double [ mu ] ;
Code	final double [] out = new double [ mu ] ;
Distance : 1

50
Tree	final double [] out = MathArrays . getDimension ( omega , NUMBER_CONSTANT ) ;
Code	final double [] out = MathArrays . getDimension ( omega , NUMBER_CONSTANT ) ;
Distance : 8

51
Tree	final double [] out = RealVector [ NUMBER_CONSTANT ] . floatValue () ;
Code	final double [] out = RealVector [ NUMBER_CONSTANT ] . floatValue () ;
Distance : 6

52
Tree	final double [] out = getTickLength ( field , v.length ) ;
Code	final double [] out = getTickLength ( field , v.length ) ;
Distance : 6

53
Tree	final double [] out = MathArrays . getDimension () ;
Code	final double [] out = MathArrays . getDimension () ;
Distance : 5

54
Tree	final double [] out = y0 . hashCode ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = y0 . hashCode ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

55
Tree	final double [] out = null ;
Code	final double [] out = null ;
Distance : 5

56
Tree	final double [] out = MathArrays . abs ( NUMBER_CONSTANT ) ;
Code	final double [] out = MathArrays . abs ( NUMBER_CONSTANT ) ;
Distance : 6

57
Tree	final double [] out = MathArrays . getGeneratorUpperBounds ( omega , v.length ) ;
Code	final double [] out = MathArrays . getGeneratorUpperBounds ( omega , v.length ) ;
Distance : 8

58
Tree	double [] out = MathArrays . abs () ;
Code	double [] out = MathArrays . abs () ;
Distance : 6

59
Tree	final double [] out = MathArrays . abs () ;
Code	final double [] out = MathArrays . abs () ;
Distance : 5

60
Tree	final double [] createIllegalArgumentException ( final double . . . out ) { return out ; }
Code	final double [] createIllegalArgumentException ( final double . . . out ) { return out ; }
Distance : 12

61
Tree	final double [] out = y0 . abs ( NUMBER_CONSTANT ) ;
Code	final double [] out = y0 . abs ( NUMBER_CONSTANT ) ;
Distance : 6

62
Tree	final double [] out = MathArrays . hashCode ( omega , v.length ) ;
Code	final double [] out = MathArrays . hashCode ( omega , v.length ) ;
Distance : 8

63
Tree	final double [] out = RealVector [ types ] ;
Code	final double [] out = RealVector [ types ] ;
Distance : 3

64
Tree	final double [] out = new double [ omega ] ;
Code	final double [] out = new double [ omega ] ;
Distance : 1

65
Tree	final double [] out = MathArrays . abs ( NUMBER_CONSTANT , v.length ) ;
Code	final double [] out = MathArrays . abs ( NUMBER_CONSTANT , v.length ) ;
Distance : 8

66
Tree	final double [] out = Coordinates3D [ omega ] . hashCode () ;
Code	final double [] out = Coordinates3D [ omega ] . hashCode () ;
Distance : 6

67
Tree	final double [] out = MathArrays . getDimension ( NUMBER_CONSTANT ) ;
Code	final double [] out = MathArrays . getDimension ( NUMBER_CONSTANT ) ;
Distance : 6

68
Tree	double [] out = MathArrays . hashCode () ;
Code	double [] out = MathArrays . hashCode () ;
Distance : 6

69
Tree	final double [] out = getDimension ( field , v.length ) ;
Code	final double [] out = getDimension ( field , v.length ) ;
Distance : 6

70
Tree	final double [] out = RealVector ;
Code	final double [] out = RealVector ;
Distance : 5

71
Tree	final double [] out = Coordinates3D [ NUMBER_CONSTANT ] . getDimension () ;
Code	final double [] out = Coordinates3D [ NUMBER_CONSTANT ] . getDimension () ;
Distance : 6

72
Tree	final double [] out = MathArrays . hashCode ( NUMBER_CONSTANT ) ;
Code	final double [] out = MathArrays . hashCode ( NUMBER_CONSTANT ) ;
Distance : 6

73
Tree	final double [] out = new double [ types ] ;
Code	final double [] out = new double [ types ] ;
Distance : 1

74
Tree	final double [] out = checkInitialize ( field ) ;
Code	final double [] out = checkInitialize ( field ) ;
Distance : 5

75
Tree	final double [] out = new double [ data.length ] ;
Code	final double [] out = new double [ data.length ] ;
Distance : 1

76
Tree	final double [] computeOmega ( final double . . . out ) { return out ; }
Code	final double [] computeOmega ( final double . . . out ) { return out ; }
Distance : 12

77
Tree	final double [] out = y0 . abs () ;
Code	final double [] out = y0 . abs () ;
Distance : 5

78
Tree	final double [] out = y0 . abs ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = y0 . abs ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

79
Tree	final double [] out = MathArrays . hashCode () ;
Code	final double [] out = MathArrays . hashCode () ;
Distance : 5

80
Tree	double [] out = y0 . abs () ;
Code	double [] out = y0 . abs () ;
Distance : 6

81
Tree	final double [] out = y0 . hashCode () ;
Code	final double [] out = y0 . hashCode () ;
Distance : 5

82
Tree	final double [] out = FastMath ;
Code	final double [] out = FastMath ;
Distance : 5

83
Tree	final double [] out = new double [ v.length ] ;
Code	final double [] out = new double [ v.length ] ;
Distance : 1

84
Tree	final double [] out = y0 . hashCode ( NUMBER_CONSTANT ) ;
Code	final double [] out = y0 . hashCode ( NUMBER_CONSTANT ) ;
Distance : 6

85
Tree	double [] out = y0 . hashCode () ;
Code	double [] out = y0 . hashCode () ;
Distance : 6

86
Tree	final double [] out = RealVector [ NUMBER_CONSTANT ] . hashCode () ;
Code	final double [] out = RealVector [ NUMBER_CONSTANT ] . hashCode () ;
Distance : 6

87
Tree	final double [] out = MathArrays . getDimension ( omega , v.length ) ;
Code	final double [] out = MathArrays . getDimension ( omega , v.length ) ;
Distance : 8

88
Tree	final double [] out = new double [ omega . intValue ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ omega . intValue ( NUMBER_CONSTANT ) ] ;
Distance : 6

89
Tree	final double [] out = MathArrays . abs ( omega , NUMBER_CONSTANT ) ;
Code	final double [] out = MathArrays . abs ( omega , NUMBER_CONSTANT ) ;
Distance : 8

90
Tree	final double [] out = MathArrays ;
Code	final double [] out = MathArrays ;
Distance : 5

91
Tree	float [] out = new double [ omega ] ;
Code	float [] out = new double [ omega ] ;
Distance : 3

92
Tree	final double [] out = y0 . getGeneratorUpperBounds ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = y0 . getGeneratorUpperBounds ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

93
Tree	final double [] out = Coordinates3D ;
Code	final double [] out = Coordinates3D ;
Distance : 5

94
Tree	final double [] out = MathArrays . hashCode ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = MathArrays . hashCode ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

95
Tree	final double [] out = y0 . hashCode ( omega , NUMBER_CONSTANT ) ;
Code	final double [] out = y0 . hashCode ( omega , NUMBER_CONSTANT ) ;
Distance : 8

96
Tree	final double [] out = new double [ fitness () ] ;
Code	final double [] out = new double [ fitness () ] ;
Distance : 2

97
Tree	final double [] out = RealVector [ omega ] . length () ;
Code	final double [] out = RealVector [ omega ] . length () ;
Distance : 6

98
Tree	final double [] out = MathArrays . getGeneratorUpperBounds ( NUMBER_CONSTANT ) ;
Code	final double [] out = MathArrays . getGeneratorUpperBounds ( NUMBER_CONSTANT ) ;
Distance : 6

99
Tree	final double [] out = y0 . hashCode ( omega , v.length ) ;
Code	final double [] out = y0 . hashCode ( omega , v.length ) ;
Distance : 8

100
Tree	final double [] out = Coordinates3D [ NUMBER_CONSTANT ] . hashCode () ;
Code	final double [] out = Coordinates3D [ NUMBER_CONSTANT ] . hashCode () ;
Distance : 6

101
Tree	final double [] out = Coordinates3D [ NUMBER_CONSTANT ] . floatValue () ;
Code	final double [] out = Coordinates3D [ NUMBER_CONSTANT ] . floatValue () ;
Distance : 6

102
Tree	final double [] out = MathArrays . omega ( NUMBER_CONSTANT ) ;
Code	final double [] out = MathArrays . omega ( NUMBER_CONSTANT ) ;
Distance : 6

103
Tree	final double [] out = hashCode ( field ) ;
Code	final double [] out = hashCode ( field ) ;
Distance : 5

104
Tree	final double [] out = MathArrays . getGeneratorUpperBounds () ;
Code	final double [] out = MathArrays . getGeneratorUpperBounds () ;
Distance : 5

105
Tree	final double [] out = new double [ y0 ] ;
Code	final double [] out = new double [ y0 ] ;
Distance : 1

106
Tree	final double [] out = MathArrays . valueOf ( NUMBER_CONSTANT ) ;
Code	final double [] out = MathArrays . valueOf ( NUMBER_CONSTANT ) ;
Distance : 6

107
Tree	final double [] out = new double [ gcd () ] ;
Code	final double [] out = new double [ gcd () ] ;
Distance : 2

108
Tree	final double [] out = Coordinates3D [ w ] ;
Code	final double [] out = Coordinates3D [ w ] ;
Distance : 3

109
Tree	final double [] out = new double [ omega . getDimension ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ omega . getDimension ( NUMBER_CONSTANT ) ] ;
Distance : 6

110
Tree	final double [] out = RealVector [ omega ] . floatValue () ;
Code	final double [] out = RealVector [ omega ] . floatValue () ;
Distance : 6

111
Tree	final double [] out = Coordinates3D [ d ] ;
Code	final double [] out = Coordinates3D [ d ] ;
Distance : 3

112
Tree	final double [] out = new double [ omega . size ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ omega . size ( NUMBER_CONSTANT ) ] ;
Distance : 6

113
Tree	final double [] out = FunctionUtils ;
Code	final double [] out = FunctionUtils ;
Distance : 5

114
Tree	final double [] out = new double [ getColumnDimension () ] ;
Code	final double [] out = new double [ getColumnDimension () ] ;
Distance : 2

115
Tree	final double [] out = MathArrays . valueOf () ;
Code	final double [] out = MathArrays . valueOf () ;
Distance : 5

116
Tree	final double [] out = RealVector [ NUMBER_CONSTANT ] . getDimension () ;
Code	final double [] out = RealVector [ NUMBER_CONSTANT ] . getDimension () ;
Distance : 6

117
Tree	final double [] out = new double [ w ] ;
Code	final double [] out = new double [ w ] ;
Distance : 1

118
Tree	final double [] out = Coordinates3D [ omega ] ;
Code	final double [] out = Coordinates3D [ omega ] ;
Distance : 3

119
Tree	final double [] out = y0 . getGeneratorUpperBounds () ;
Code	final double [] out = y0 . getGeneratorUpperBounds () ;
Distance : 5

120
Tree	final double [] out = y0 . natural ( NUMBER_CONSTANT ) ;
Code	final double [] out = y0 . natural ( NUMBER_CONSTANT ) ;
Distance : 6

121
Tree	final double [] out = MathArrays . natural ( NUMBER_CONSTANT ) ;
Code	final double [] out = MathArrays . natural ( NUMBER_CONSTANT ) ;
Distance : 6

122
Tree	final double [] out = hashCode ( field , false ) ;
Code	final double [] out = hashCode ( field , false ) ;
Distance : 6

123
Tree	final double [] out = y0 . omega ( NUMBER_CONSTANT ) ;
Code	final double [] out = y0 . omega ( NUMBER_CONSTANT ) ;
Distance : 6

124
Tree	final double [] out = Coordinates3D [ omega ] . clone () ;
Code	final double [] out = Coordinates3D [ omega ] . clone () ;
Distance : 6

125
Tree	final double [] out = new double [ min () ] ;
Code	final double [] out = new double [ min () ] ;
Distance : 2

126
Tree	final double [] out = y0 . abs ( omega , NUMBER_CONSTANT ) ;
Code	final double [] out = y0 . abs ( omega , NUMBER_CONSTANT ) ;
Distance : 8

127
Tree	final double [] out = y0 . getGeneratorUpperBounds ( NUMBER_CONSTANT ) ;
Code	final double [] out = y0 . getGeneratorUpperBounds ( NUMBER_CONSTANT ) ;
Distance : 6

128
Tree	final double [] out = new double [ d ] ;
Code	final double [] out = new double [ d ] ;
Distance : 1

129
Tree	final double [] out = getTickLength ( field ) ;
Code	final double [] out = getTickLength ( field ) ;
Distance : 5

130
Tree	final double [] out = getTypeInternal ( field , NUMBER_CONSTANT ) ;
Code	final double [] out = getTypeInternal ( field , NUMBER_CONSTANT ) ;
Distance : 6

131
Tree	final double [] out = y0 . hashCode ( NUMBER_CONSTANT , v.length ) ;
Code	final double [] out = y0 . hashCode ( NUMBER_CONSTANT , v.length ) ;
Distance : 8

132
Tree	final double [] out = getColumnDimension ( field , false ) ;
Code	final double [] out = getColumnDimension ( field , false ) ;
Distance : 6

133
Tree	final double [] out = Coordinates3D [ omega ] . length () ;
Code	final double [] out = Coordinates3D [ omega ] . length () ;
Distance : 6

134
Tree	final double [] out = getDimension ( field ) ;
Code	final double [] out = getDimension ( field ) ;
Distance : 5

135
Tree	final double [] out = y0 . abs ( NUMBER_CONSTANT , v.length ) ;
Code	final double [] out = y0 . abs ( NUMBER_CONSTANT , v.length ) ;
Distance : 8

136
Tree	final double [] out = getTypeInternal ( field , v.length ) ;
Code	final double [] out = getTypeInternal ( field , v.length ) ;
Distance : 6

137
Tree	final double [] out = new double [ f.length ] ;
Code	final double [] out = new double [ f.length ] ;
Distance : 1

138
Tree	double [] out = MathArrays . getDimension () ;
Code	double [] out = MathArrays . getDimension () ;
Distance : 6

139
Tree	final double [] out = MathArrays . abs ( omega , v.length ) ;
Code	final double [] out = MathArrays . abs ( omega , v.length ) ;
Distance : 8

140
Tree	final double [] out = FastMath . y0 ( NUMBER_CONSTANT ) ;
Code	final double [] out = FastMath . y0 ( NUMBER_CONSTANT ) ;
Distance : 6

141
Tree	final double [] out = concatenateSamples ( field , false ) ;
Code	final double [] out = concatenateSamples ( field , false ) ;
Distance : 6

142
Tree	final double [] out = new double [ omega . isNaN ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ omega . isNaN ( NUMBER_CONSTANT ) ] ;
Distance : 6

143
Tree	final double [] out = getColumnDimension ( field , v.length ) ;
Code	final double [] out = getColumnDimension ( field , v.length ) ;
Distance : 6

144
Tree	final double [] out = RealVector [ NUMBER_CONSTANT ] . intValue () ;
Code	final double [] out = RealVector [ NUMBER_CONSTANT ] . intValue () ;
Distance : 6

145
Tree	double [] out = MathArrays . getInstance () ;
Code	double [] out = MathArrays . getInstance () ;
Distance : 6

146
Tree	final double [] out = computeObjectiveValue ( field , false ) ;
Code	final double [] out = computeObjectiveValue ( field , false ) ;
Distance : 6

147
Tree	final double [] out = new double [ omega . min ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ omega . min ( NUMBER_CONSTANT ) ] ;
Distance : 6

148
Tree	final double [] out = new double [ omega . hashCode ( NUMBER_CONSTANT ) ] ;
Code	final double [] out = new double [ omega . hashCode ( NUMBER_CONSTANT ) ] ;
Distance : 6

149
Tree	final double [] out = concatenateSamples ( field , NUMBER_CONSTANT ) ;
Code	final double [] out = concatenateSamples ( field , NUMBER_CONSTANT ) ;
Distance : 6

150
Tree	final double [] out = Coordinates3D [ types ] ;
Code	final double [] out = Coordinates3D [ types ] ;
Distance : 3

151
Tree	final double [] out = checkInitialize ( field , false ) ;
Code	final double [] out = checkInitialize ( field , false ) ;
Distance : 6

152
Tree	final double [] out = {} ;
Code	final double [] out = {} ;
Distance : 5

153
Tree	boolean [] out = new double [ omega ] ;
Code	boolean [] out = new double [ omega ] ;
Distance : 3

154
Tree	final double [] out = MathArrays . valueOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	final double [] out = MathArrays . valueOf ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 8

155
Tree	final double [] out = concatenateSamples ( field , v.length ) ;
Code	final double [] out = concatenateSamples ( field , v.length ) ;
Distance : 6

156
Tree	final double [] out = MathArrays . parameters ( NUMBER_CONSTANT ) ;
Code	final double [] out = MathArrays . parameters ( NUMBER_CONSTANT ) ;
Distance : 6

157
Tree	final double [] out = MathArrays . getGeneratorUpperBounds ( omega , NUMBER_CONSTANT ) ;
Code	final double [] out = MathArrays . getGeneratorUpperBounds ( omega , NUMBER_CONSTANT ) ;
Distance : 8

158
Tree	final double [] out = Coordinates3D [ omega ] . floatValue () ;
Code	final double [] out = Coordinates3D [ omega ] . floatValue () ;
Distance : 6

159
Tree	double [] out = y0 . getDimension () ;
Code	double [] out = y0 . getDimension () ;
Distance : 6

160
Tree	double [] out = new double [ types ] ;
Code	double [] out = new double [ types ] ;
Distance : 2

161
Tree	final double [] out = MathArrays . getGeneratorUpperBounds ( NUMBER_CONSTANT , v.length ) ;
Code	final double [] out = MathArrays . getGeneratorUpperBounds ( NUMBER_CONSTANT , v.length ) ;
Distance : 8

162
Tree	final double [] out = randomData ;
Code	final double [] out = randomData ;
Distance : 5

163
Tree	final double [] out = new double [ LocalizedFormats.DIMENSIONS_MISMATCH_2x2 ] ;
Code	final double [] out = new double [ LocalizedFormats.DIMENSIONS_MISMATCH_2x2 ] ;
Distance : 1

164
Tree	final double [] out = RealVector [ w ] ;
Code	final double [] out = RealVector [ w ] ;
Distance : 3

165
Tree	final double [] FastMath = null ;
Code	final double [] FastMath = null ;
Distance : 6

166
Tree	final double [] out = RealVector [ d ] ;
Code	final double [] out = RealVector [ d ] ;
Distance : 3

167
Tree	final double [] out = new double [ FastMath.PI ] ;
Code	final double [] out = new double [ FastMath.PI ] ;
Distance : 1

168
Tree	final double [] check ( final double . . . out ) { return out ; }
Code	final double [] check ( final double . . . out ) { return out ; }
Distance : 12

169
Tree	int [] out = new double [ omega ] ;
Code	int [] out = new double [ omega ] ;
Distance : 3

170
Tree	final double [] createIllegalArgumentException ( final int . . . out ) { return out ; }
Code	final double [] createIllegalArgumentException ( final int . . . out ) { return out ; }
Distance : 13

171
Tree	final double [] out = getTypeInternal ( field ) ;
Code	final double [] out = getTypeInternal ( field ) ;
Distance : 5

172
Tree	final double [] out = STRING_CONSTANT + mainSetDimension ;
Code	final double [] out = STRING_CONSTANT + mainSetDimension ;
Distance : 5

173
Tree	final double [] log ( final double . . . out ) { return out ; }
Code	final double [] log ( final double . . . out ) { return out ; }
Distance : 12

174
Tree	final double [] columns = null ;
Code	final double [] columns = null ;
Distance : 6

175
Tree	final double [] write ( final double . . . out ) { return out ; }
Code	final double [] write ( final double . . . out ) { return out ; }
Distance : 12

176
Tree	final double [] buf = null ;
Code	final double [] buf = null ;
Distance : 6

177
Tree	final double [] nullNotPermitted ( final double . . . out ) { return out ; }
Code	final double [] nullNotPermitted ( final double . . . out ) { return out ; }
Distance : 12

178
Tree	final int [] out = null ;
Code	final int [] out = null ;
Distance : 6

179
Tree	final double [] setUp ( final double . . . out ) { return out ; }
Code	final double [] setUp ( final double . . . out ) { return out ; }
Distance : 12

180
Tree	final double [] out = new double [ Double.NaN ] ;
Code	final double [] out = new double [ Double.NaN ] ;
Distance : 1

181
Tree	final double [] out = y0 . getGeneratorUpperBounds ( NUMBER_CONSTANT , v.length ) ;
Code	final double [] out = y0 . getGeneratorUpperBounds ( NUMBER_CONSTANT , v.length ) ;
Distance : 8

182
Tree	final double [] expected = null ;
Code	final double [] expected = null ;
Distance : 6

183
Tree	final double [] out = STRING_CONSTANT + MathArrays ;
Code	final double [] out = STRING_CONSTANT + MathArrays ;
Distance : 5

184
Tree	final double [] out = STRING_CONSTANT + columns ;
Code	final double [] out = STRING_CONSTANT + columns ;
Distance : 5

185
Tree	final double [] out = STRING_CONSTANT + tokenizer ;
Code	final double [] out = STRING_CONSTANT + tokenizer ;
Distance : 5

186
Tree	final double [] FastMath = new double [ v.length ] ;
Code	final double [] FastMath = new double [ v.length ] ;
Distance : 2

187
Tree	final double [] out = STRING_CONSTANT + strictly ;
Code	final double [] out = STRING_CONSTANT + strictly ;
Distance : 5

188
Tree	final double [] out = STRING_CONSTANT + expected ;
Code	final double [] out = STRING_CONSTANT + expected ;
Distance : 5

189
Tree	final double [] out = STRING_CONSTANT + maxIterations ;
Code	final double [] out = STRING_CONSTANT + maxIterations ;
Distance : 5

190
Tree	final double [] columns = new double [ v.length ] ;
Code	final double [] columns = new double [ v.length ] ;
Distance : 2

191
Tree	final double [] out = super(); ;
Code	final double [] out = super(); ;
Distance : 5

192
Tree	final double [] FastMath = {} ;
Code	final double [] FastMath = {} ;
Distance : 6

193
Tree	final double [] columns = {} ;
Code	final double [] columns = {} ;
Distance : 6

194
Tree	final double [] buf = {} ;
Code	final double [] buf = {} ;
Distance : 6

195
Tree	final int [] out = {} ;
Code	final int [] out = {} ;
Distance : 6

196
Tree	final double [] expected = {} ;
Code	final double [] expected = {} ;
Distance : 6

197
Tree	final double [] variance = {} ;
Code	final double [] variance = {} ;
Distance : 6

198
Tree	final double [] variance = null ;
Code	final double [] variance = null ;
Distance : 6

199
Tree	final double [] max = {} ;
Code	final double [] max = {} ;
Distance : 6

========================================================================


========================================================================
Example Number: 54
Parent Code is: 
int start = getNumObjectiveFunctions () ;
-------------------------------------------------------------------------------
Child code is: 
int start = ignoreObjectiveRows ? getNumObjectiveFunctions () : NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=start}) (204{val==}) (32 (802{val=getNumObjectiveFunctions}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=start}) (204{val==}) (16 (800{val=ignoreObjectiveRows}) (233{val=?}) (32 (802{val=getNumObjectiveFunctions}) (216{val=()})) (226{val=:}) (34{val=NUMBER_CONSTANT}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/83/parent/src_main_java_org_apache_commons_math_optimization_linear_SimplexTableau.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	int start = parseExponentiationExpression () ;
Code	int start = parseExponentiationExpression () ;
Distance : 5

1
Tree	final Object [] start = getProperNumerator () ;
Code	final Object [] start = getProperNumerator () ;
Distance : 8

2
Tree	int start = getPropFromClass () ;
Code	int start = getPropFromClass () ;
Distance : 5

3
Tree	double start = getProperNumerator () ;
Code	double start = getProperNumerator () ;
Distance : 6

4
Tree	final MutableFloat [] start = getProperNumerator () ;
Code	final MutableFloat [] start = getProperNumerator () ;
Distance : 8

5
Tree	final Coordinates3D [] start = getProperNumerator () ;
Code	final Coordinates3D [] start = getProperNumerator () ;
Distance : 8

6
Tree	final Object [] start ;
Code	final Object [] start ;
Distance : 9

7
Tree	char start = NUMBER_CONSTANT ;
Code	char start = NUMBER_CONSTANT ;
Distance : 6

8
Tree	int start = getProperNumerator () . FastDatePrinter ;
Code	int start = getProperNumerator () . FastDatePrinter ;
Distance : 5

9
Tree	int [] start = getProperNumerator () ;
Code	int [] start = getProperNumerator () ;
Distance : 6

10
Tree	int start = getProperNumerator () . rowCount ;
Code	int start = getProperNumerator () . rowCount ;
Distance : 5

11
Tree	final StrLookup < StepHandler > start = getProperNumerator () ;
Code	final StrLookup < StepHandler > start = getProperNumerator () ;
Distance : 9

12
Tree	char start ;
Code	char start ;
Distance : 8

13
Tree	int start = getPropFromClass () - NUMBER_CONSTANT ;
Code	int start = getPropFromClass () - NUMBER_CONSTANT ;
Distance : 4

14
Tree	final Date [] start = requirePrinter () ;
Code	final Date [] start = requirePrinter () ;
Distance : 8

15
Tree	final int start = ols ;
Code	final int start = ols ;
Distance : 7

16
Tree	final int start = getProperNumerator () ;
Code	final int start = getProperNumerator () ;
Distance : 6

17
Tree	int start ;
Code	int start ;
Distance : 7

18
Tree	int start = oldEnd ;
Code	int start = oldEnd ;
Distance : 6

19
Tree	final int start = requirePrinter () ;
Code	final int start = requirePrinter () ;
Distance : 6

20
Tree	int start = ols ;
Code	int start = ols ;
Distance : 6

21
Tree	double start = getProperNumerator () - NUMBER_CONSTANT ;
Code	double start = getProperNumerator () - NUMBER_CONSTANT ;
Distance : 5

22
Tree	int /= ;
Code	int /= ;
Distance : 8

23
Tree	final MathIllegalArgumentException [] start = getProperNumerator () ;
Code	final MathIllegalArgumentException [] start = getProperNumerator () ;
Distance : 8

24
Tree	int start = continue; ;
Code	int start = continue; ;
Distance : 6

25
Tree	int start = TypeUtilsTest ;
Code	int start = TypeUtilsTest ;
Distance : 6

26
Tree	int start = columnLabels ;
Code	int start = columnLabels ;
Distance : 6

27
Tree	int start = NUMBER_CONSTANT ;
Code	int start = NUMBER_CONSTANT ;
Distance : 5

28
Tree	int start = Executors ;
Code	int start = Executors ;
Distance : 6

29
Tree	int start = minor ;
Code	int start = minor ;
Distance : 6

30
Tree	final StrLookup < ParamGroup > start = getProperNumerator () ;
Code	final StrLookup < ParamGroup > start = getProperNumerator () ;
Distance : 9

31
Tree	final int start = getMillisPerUnit () ;
Code	final int start = getMillisPerUnit () ;
Distance : 6

32
Tree	int start = NumberFormat ;
Code	int start = NumberFormat ;
Distance : 6

33
Tree	int start = getProperNumerator () - NUMBER_CONSTANT ;
Code	int start = getProperNumerator () - NUMBER_CONSTANT ;
Distance : 4

34
Tree	int start = null ;
Code	int start = null ;
Distance : 6

35
Tree	final Date [] start = getProperNumerator () ;
Code	final Date [] start = getProperNumerator () ;
Distance : 8

36
Tree	final int start ;
Code	final int start ;
Distance : 8

37
Tree	final Integer < P > start = getProperNumerator () ;
Code	final Integer < P > start = getProperNumerator () ;
Distance : 9

38
Tree	final int start = getVariableResolver () ;
Code	final int start = getVariableResolver () ;
Distance : 6

39
Tree	int start = new LenientChronology () ;
Code	int start = new LenientChronology () ;
Distance : 5

40
Tree	int start = getProperNumerator () . templates ;
Code	int start = getProperNumerator () . templates ;
Distance : 5

41
Tree	int start = getVariableResolver () ;
Code	int start = getVariableResolver () ;
Distance : 5

42
Tree	double [] ;
Code	double [] ;
Distance : 9

43
Tree	final int start = getPropFromClass () ;
Code	final int start = getPropFromClass () ;
Distance : 6

44
Tree	int start = ols + NUMBER_CONSTANT ;
Code	int start = ols + NUMBER_CONSTANT ;
Distance : 5

45
Tree	int start = getMillisPerUnit () ;
Code	int start = getMillisPerUnit () ;
Distance : 5

46
Tree	start < NumberFormat > start = getProperNumerator () ;
Code	start < NumberFormat > start = getProperNumerator () ;
Distance : 8

47
Tree	start start = getMillisPerUnit () ;
Code	start start = getMillisPerUnit () ;
Distance : 6

48
Tree	int [] start = getMillisPerUnit () ;
Code	int [] start = getMillisPerUnit () ;
Distance : 6

49
Tree	int start = getProperNumerator () . currentState ;
Code	int start = getProperNumerator () . currentState ;
Distance : 5

50
Tree	Coordinates3D [] start = requirePrinter () ;
Code	Coordinates3D [] start = requirePrinter () ;
Distance : 7

51
Tree	final int start = getCauseMethodNameList () ;
Code	final int start = getCauseMethodNameList () ;
Distance : 6

52
Tree	int start = columnLabels + NUMBER_CONSTANT ;
Code	int start = columnLabels + NUMBER_CONSTANT ;
Distance : 5

53
Tree	int [] ;
Code	int [] ;
Distance : 8

54
Tree	int start = TypeUtilsTest + NUMBER_CONSTANT ;
Code	int start = TypeUtilsTest + NUMBER_CONSTANT ;
Distance : 5

55
Tree	int start = super(); ;
Code	int start = super(); ;
Distance : 6

56
Tree	final int start = parseExponentiationExpression () ;
Code	final int start = parseExponentiationExpression () ;
Distance : 6

57
Tree	int start = sinEpsA ;
Code	int start = sinEpsA ;
Distance : 6

58
Tree	int start = getProperNumerator () ;
Code	int start = getProperNumerator () ;
Distance : 5

59
Tree	final int start = NumberFormat ;
Code	final int start = NumberFormat ;
Distance : 7

60
Tree	int [] start = getCauseMethodNameList () ;
Code	int [] start = getCauseMethodNameList () ;
Distance : 6

61
Tree	final int start = Executors ;
Code	final int start = Executors ;
Distance : 7

62
Tree	final int start = sinEpsA ;
Code	final int start = sinEpsA ;
Distance : 7

63
Tree	int start = this . start ;
Code	int start = this . start ;
Distance : 6

64
Tree	int [] start = requirePrinter () ;
Code	int [] start = requirePrinter () ;
Distance : 6

65
Tree	final
Code	final
Distance : 10

66
Tree	final String [] start = getProperNumerator () ;
Code	final String [] start = getProperNumerator () ;
Distance : 8

67
Tree	double start ;
Code	double start ;
Distance : 8

68
Tree	int start = coefficients.length ;
Code	int start = coefficients.length ;
Distance : 6

69
Tree	boolean start = NUMBER_CONSTANT ;
Code	boolean start = NUMBER_CONSTANT ;
Distance : 6

70
Tree	long start ;
Code	long start ;
Distance : 8

71
Tree	int start = Executors + NUMBER_CONSTANT ;
Code	int start = Executors + NUMBER_CONSTANT ;
Distance : 5

72
Tree	int start = getVariableResolver () - NUMBER_CONSTANT ;
Code	int start = getVariableResolver () - NUMBER_CONSTANT ;
Distance : 4

73
Tree	final Integer < ParamGroup > start = getProperNumerator () ;
Code	final Integer < ParamGroup > start = getProperNumerator () ;
Distance : 9

74
Tree	final RandomGenerator start = getProperNumerator () ;
Code	final RandomGenerator start = getProperNumerator () ;
Distance : 7

75
Tree	int start = new Sigmoid () ;
Code	int start = new Sigmoid () ;
Distance : 5

76
Tree	start start = requirePrinter () ;
Code	start start = requirePrinter () ;
Distance : 6

77
Tree	int start = getMillisPerUnit () - NUMBER_CONSTANT ;
Code	int start = getMillisPerUnit () - NUMBER_CONSTANT ;
Distance : 4

78
Tree	final int start = columnLabels ;
Code	final int start = columnLabels ;
Distance : 7

79
Tree	final StrLookup < P > start = getProperNumerator () ;
Code	final StrLookup < P > start = getProperNumerator () ;
Distance : 9

80
Tree	int start = requirePrinter () ;
Code	int start = requirePrinter () ;
Distance : 5

81
Tree	int start = getProperNumerator () . intValue ;
Code	int start = getProperNumerator () . intValue ;
Distance : 5

82
Tree	final MathIllegalArgumentException [] start ;
Code	final MathIllegalArgumentException [] start ;
Distance : 9

83
Tree	double start = super(); ;
Code	double start = super(); ;
Distance : 7

84
Tree	MutableFloat [] start = getProperNumerator () ;
Code	MutableFloat [] start = getProperNumerator () ;
Distance : 7

85
Tree	Coordinates2D [] start = getProperNumerator () ;
Code	Coordinates2D [] start = getProperNumerator () ;
Distance : 7

86
Tree	int start = minor + NUMBER_CONSTANT ;
Code	int start = minor + NUMBER_CONSTANT ;
Distance : 5

87
Tree	double start = NUMBER_CONSTANT ;
Code	double start = NUMBER_CONSTANT ;
Distance : 6

88
Tree	byte start ;
Code	byte start ;
Distance : 8

89
Tree	int start = oldEnd + NUMBER_CONSTANT ;
Code	int start = oldEnd + NUMBER_CONSTANT ;
Distance : 5

90
Tree	int start = new XMinus5Function () ;
Code	int start = new XMinus5Function () ;
Distance : 5

91
Tree	final int start = minor ;
Code	final int start = minor ;
Distance : 7

92
Tree	Coordinates3D [] start ;
Code	Coordinates3D [] start ;
Distance : 9

93
Tree	final int start = oldEnd ;
Code	final int start = oldEnd ;
Distance : 7

94
Tree	byte start = NUMBER_CONSTANT ;
Code	byte start = NUMBER_CONSTANT ;
Distance : 6

95
Tree	int start = default: ;
Code	int start = default: ;
Distance : 6

96
Tree	int += ;
Code	int += ;
Distance : 8

97
Tree	boolean start = this . start ;
Code	boolean start = this . start ;
Distance : 7

98
Tree	final String [] start ;
Code	final String [] start ;
Distance : 9

99
Tree	start < StepHandler > start = getProperNumerator () ;
Code	start < StepHandler > start = getProperNumerator () ;
Distance : 8

100
Tree	final Coordinates3D [] start ;
Code	final Coordinates3D [] start ;
Distance : 9

101
Tree	int start = FACT.length ;
Code	int start = FACT.length ;
Distance : 6

102
Tree	start start = getVariableResolver () ;
Code	start start = getVariableResolver () ;
Distance : 6

103
Tree	final UnivariateStatistic [] start ;
Code	final UnivariateStatistic [] start ;
Distance : 9

104
Tree	int start = new NumericEntityUnescaper () ;
Code	int start = new NumericEntityUnescaper () ;
Distance : 5

105
Tree	final StrLookup start = requirePrinter () ;
Code	final StrLookup start = requirePrinter () ;
Distance : 7

106
Tree	final Integer start = getProperNumerator () ;
Code	final Integer start = getProperNumerator () ;
Distance : 7

107
Tree	int *= ;
Code	int *= ;
Distance : 8

108
Tree	int start = source.contractionCriterion ;
Code	int start = source.contractionCriterion ;
Distance : 6

109
Tree	boolean start ;
Code	boolean start ;
Distance : 8

110
Tree	final Integer < StepHandler > start = getProperNumerator () ;
Code	final Integer < StepHandler > start = getProperNumerator () ;
Distance : 9

111
Tree	final Outer [] start ;
Code	final Outer [] start ;
Distance : 9

112
Tree	final int start = TypeUtilsTest ;
Code	final int start = TypeUtilsTest ;
Distance : 7

113
Tree	int start = NumberFormat + NUMBER_CONSTANT ;
Code	int start = NumberFormat + NUMBER_CONSTANT ;
Distance : 5

114
Tree	long [] ;
Code	long [] ;
Distance : 9

115
Tree	int [] start = getVariableResolver () ;
Code	int [] start = getVariableResolver () ;
Distance : 6

116
Tree	InvocationImpl [] start = getProperNumerator () ;
Code	InvocationImpl [] start = getProperNumerator () ;
Distance : 7

117
Tree	int start = val.length ;
Code	int start = val.length ;
Distance : 6

118
Tree	int start = new Outer () ;
Code	int start = new Outer () ;
Distance : 5

119
Tree	int start = requirePrinter () - NUMBER_CONSTANT ;
Code	int start = requirePrinter () - NUMBER_CONSTANT ;
Distance : 4

120
Tree	boolean [] ;
Code	boolean [] ;
Distance : 9

121
Tree	int len ;
Code	int len ;
Distance : 8

122
Tree	int len = NUMBER_CONSTANT ;
Code	int len = NUMBER_CONSTANT ;
Distance : 6

123
Tree	int start = getProperNumerator () . FastDateFormat ;
Code	int start = getProperNumerator () . FastDateFormat ;
Distance : 5

124
Tree	int start = new InheritedReflectionStaticFieldsFixture () ;
Code	int start = new InheritedReflectionStaticFieldsFixture () ;
Distance : 5

125
Tree	int start = sinEpsA + NUMBER_CONSTANT ;
Code	int start = sinEpsA + NUMBER_CONSTANT ;
Distance : 5

126
Tree	double start = null ;
Code	double start = null ;
Distance : 7

127
Tree	int start = chars.length ;
Code	int start = chars.length ;
Distance : 6

128
Tree	InvocationImpl [] start ;
Code	InvocationImpl [] start ;
Distance : 9

129
Tree	int [] start = parseExponentiationExpression () ;
Code	int [] start = parseExponentiationExpression () ;
Distance : 6

130
Tree	double += ;
Code	double += ;
Distance : 9

131
Tree	int start = problem.a ;
Code	int start = problem.a ;
Distance : 6

132
Tree	start start = parseExponentiationExpression () ;
Code	start start = parseExponentiationExpression () ;
Distance : 6

133
Tree	final MathRuntimeException < P > start = getProperNumerator () ;
Code	final MathRuntimeException < P > start = getProperNumerator () ;
Distance : 9

134
Tree	int start = getCauseMethodNameList () - NUMBER_CONSTANT ;
Code	int start = getCauseMethodNameList () - NUMBER_CONSTANT ;
Distance : 4

135
Tree	final MathRuntimeException < StepHandler > start = getProperNumerator () ;
Code	final MathRuntimeException < StepHandler > start = getProperNumerator () ;
Distance : 9

136
Tree	start start = getProperNumerator () ;
Code	start start = getProperNumerator () ;
Distance : 6

137
Tree	char start = this . start ;
Code	char start = this . start ;
Distance : 7

138
Tree	int start = Cartesian2D.NEGATIVE_INFINITY ;
Code	int start = Cartesian2D.NEGATIVE_INFINITY ;
Distance : 6

139
Tree	Coordinates3D [] start = getProperNumerator () ;
Code	Coordinates3D [] start = getProperNumerator () ;
Distance : 7

140
Tree	final double start ;
Code	final double start ;
Distance : 9

141
Tree	double start = this . start ;
Code	double start = this . start ;
Distance : 7

142
Tree	int start = set.length ;
Code	int start = set.length ;
Distance : 6

143
Tree	double [] start = getProperNumerator () ;
Code	double [] start = getProperNumerator () ;
Distance : 7

144
Tree	int [] start = getPropFromClass () ;
Code	int [] start = getPropFromClass () ;
Distance : 6

145
Tree	final int start = checkInitialize () ;
Code	final int start = checkInitialize () ;
Distance : 6

146
Tree	int sz ;
Code	int sz ;
Distance : 8

147
Tree	final Integer start = requirePrinter () ;
Code	final Integer start = requirePrinter () ;
Distance : 7

148
Tree	final Coordinates3D start = getProperNumerator () ;
Code	final Coordinates3D start = getProperNumerator () ;
Distance : 7

149
Tree	Date [] start = getProperNumerator () ;
Code	Date [] start = getProperNumerator () ;
Distance : 7

150
Tree	start start = checkInitialize () ;
Code	start start = checkInitialize () ;
Distance : 6

151
Tree	Object [] start ;
Code	Object [] start ;
Distance : 9

152
Tree	int start = parseExponentiationExpression () - NUMBER_CONSTANT ;
Code	int start = parseExponentiationExpression () - NUMBER_CONSTANT ;
Distance : 4

153
Tree	int start = getProperNumerator () . NumberFormat ;
Code	int start = getProperNumerator () . NumberFormat ;
Distance : 5

154
Tree	int start = getProperNumerator () . matchedTemplates ;
Code	int start = getProperNumerator () . matchedTemplates ;
Distance : 5

155
Tree	MutableFloat [] start ;
Code	MutableFloat [] start ;
Distance : 9

156
Tree	start start = getPropFromClass () ;
Code	start start = getPropFromClass () ;
Distance : 6

157
Tree	Coordinates2D [] start ;
Code	Coordinates2D [] start ;
Distance : 9

158
Tree	final Date [] start ;
Code	final Date [] start ;
Distance : 9

159
Tree	int start = getCauseMethodNameList () ;
Code	int start = getCauseMethodNameList () ;
Distance : 5

160
Tree	int sz = NUMBER_CONSTANT ;
Code	int sz = NUMBER_CONSTANT ;
Distance : 6

161
Tree	long start = NUMBER_CONSTANT ;
Code	long start = NUMBER_CONSTANT ;
Distance : 6

162
Tree	final MathRuntimeException start = requirePrinter () ;
Code	final MathRuntimeException start = requirePrinter () ;
Distance : 7

163
Tree	Object [] start = getProperNumerator () ;
Code	Object [] start = getProperNumerator () ;
Distance : 7

164
Tree	double start = new Sigmoid () ;
Code	double start = new Sigmoid () ;
Distance : 6

165
Tree	double start = continue; ;
Code	double start = continue; ;
Distance : 7

166
Tree	start start = getTickLength () ;
Code	start start = getTickLength () ;
Distance : 6

167
Tree	start < ParamGroup > start = getProperNumerator () ;
Code	start < ParamGroup > start = getProperNumerator () ;
Distance : 8

168
Tree	final Object [] start = requirePrinter () ;
Code	final Object [] start = requirePrinter () ;
Distance : 8

169
Tree	start < chromosomeRepresentation > start = getProperNumerator () ;
Code	start < chromosomeRepresentation > start = getProperNumerator () ;
Distance : 8

170
Tree	start < FastDatePrinter > start = getProperNumerator () ;
Code	start < FastDatePrinter > start = getProperNumerator () ;
Distance : 8

171
Tree	start < NumberFormat > start = getCauseMethodNameList () ;
Code	start < NumberFormat > start = getCauseMethodNameList () ;
Distance : 8

172
Tree	final MutableFloat [] start ;
Code	final MutableFloat [] start ;
Distance : 9

173
Tree	InvocationImpl [] start = requirePrinter () ;
Code	InvocationImpl [] start = requirePrinter () ;
Distance : 7

174
Tree	final StrLookup start = getProperNumerator () ;
Code	final StrLookup start = getProperNumerator () ;
Distance : 7

175
Tree	final MathRuntimeException start = getProperNumerator () ;
Code	final MathRuntimeException start = getProperNumerator () ;
Distance : 7

176
Tree	start < P > start = getProperNumerator () ;
Code	start < P > start = getProperNumerator () ;
Distance : 8

177
Tree	Date [] start ;
Code	Date [] start ;
Distance : 9

178
Tree	start < normalArgsLen > start = getProperNumerator () ;
Code	start < normalArgsLen > start = getProperNumerator () ;
Distance : 8

179
Tree	ReadablePartial [] start ;
Code	ReadablePartial [] start ;
Distance : 9

180
Tree	int start = new MockPreciseDateTimeField () ;
Code	int start = new MockPreciseDateTimeField () ;
Distance : 5

181
Tree	int start = break; ;
Code	int start = break; ;
Distance : 6

182
Tree	final int temp ;
Code	final int temp ;
Distance : 9

183
Tree	final int pads ;
Code	final int pads ;
Distance : 9

184
Tree	double
Code	double
Distance : 10

185
Tree	byte start = this . start ;
Code	byte start = this . start ;
Distance : 7

186
Tree	long
Code	long
Distance : 10

187
Tree	char
Code	char
Distance : 10

188
Tree	int len = this . start ;
Code	int len = this . start ;
Distance : 7

189
Tree	Assertions
Code	Assertions
Distance : 10

190
Tree	final int len ;
Code	final int len ;
Distance : 9

191
Tree	long start = this . start ;
Code	long start = this . start ;
Distance : 7

192
Tree	int sz = this . start ;
Code	int sz = this . start ;
Distance : 7

193
Tree	final int sz ;
Code	final int sz ;
Distance : 9

194
Tree	final int strLen ;
Code	final int strLen ;
Distance : 9

195
Tree	int
Code	int
Distance : 9

196
Tree	boolean
Code	boolean
Distance : 10

197
Tree	final long start ;
Code	final long start ;
Distance : 9

198
Tree	TDistribution [] start ;
Code	TDistribution [] start ;
Distance : 9

199
Tree	byte
Code	byte
Distance : 10

========================================================================


========================================================================
Example Number: 55
Parent Code is: 
int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Child code is: 
int j = NUMBER_CONSTANT * ( n - NUMBER_CONSTANT ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=j}) (204{val==}) (27 (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (800{val=n})) (201{val=-}) (34{val=NUMBER_CONSTANT}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=j}) (204{val==}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (36 (214{val=(}) (27 (800{val=n}) (201{val=-}) (34{val=NUMBER_CONSTANT})) (215{val=)})))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/80/parent/src_main_java_org_apache_commons_math_linear_EigenDecompositionImpl.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	int j = n ^ DIM - INDEX_OFFSET ;
Code	int j = n ^ DIM - INDEX_OFFSET ;
Distance : 6

1
Tree	int j = n ^ j - INDEX_OFFSET ;
Code	int j = n ^ j - INDEX_OFFSET ;
Distance : 6

2
Tree	int j = n . getInstance ( n , n , n ) >= NUMBER_CONSTANT ;
Code	int j = n . getInstance ( n , n , n ) >= NUMBER_CONSTANT ;
Distance : 9

3
Tree	int degreesOfFreedom = n & NUMBER_CONSTANT ;
Code	int degreesOfFreedom = n & NUMBER_CONSTANT ;
Distance : 6

4
Tree	int j = n ^ FastMath - INDEX_OFFSET ;
Code	int j = n ^ FastMath - INDEX_OFFSET ;
Distance : 6

5
Tree	int j = n . getInstance ( n , n , tolerance ) >= NUMBER_CONSTANT ;
Code	int j = n . getInstance ( n , n , tolerance ) >= NUMBER_CONSTANT ;
Distance : 9

6
Tree	int j = getInstance ( n , n , n ) >= NUMBER_CONSTANT ;
Code	int j = getInstance ( n , n , n ) >= NUMBER_CONSTANT ;
Distance : 8

7
Tree	int seed = n & NUMBER_CONSTANT ;
Code	int seed = n & NUMBER_CONSTANT ;
Distance : 6

8
Tree	int j = n + INDEX_OFFSET . getGeneratorUpperBounds ( NEGATIVE_VAR_COLUMN_LABEL , n , NUMBER_CONSTANT ) + n - INDEX_OFFSET ;
Code	int j = n + INDEX_OFFSET . getGeneratorUpperBounds ( NEGATIVE_VAR_COLUMN_LABEL , n , NUMBER_CONSTANT ) + n - INDEX_OFFSET ;
Distance : 12

9
Tree	int j = n + INDEX_OFFSET - INDEX_OFFSET ;
Code	int j = n + INDEX_OFFSET - INDEX_OFFSET ;
Distance : 6

10
Tree	int j = NUMBER_CONSTANT * currentState.length - INDEX_OFFSET ;
Code	int j = NUMBER_CONSTANT * currentState.length - INDEX_OFFSET ;
Distance : 4

11
Tree	int j = ( JSType < < NUMBER_CONSTANT ) + n - INDEX_OFFSET ;
Code	int j = ( JSType < < NUMBER_CONSTANT ) + n - INDEX_OFFSET ;
Distance : 8

12
Tree	int j = n - j - INDEX_OFFSET ;
Code	int j = n - j - INDEX_OFFSET ;
Distance : 6

13
Tree	int j = n + j - INDEX_OFFSET ;
Code	int j = n + j - INDEX_OFFSET ;
Distance : 6

14
Tree	int j = n + FastMath - INDEX_OFFSET ;
Code	int j = n + FastMath - INDEX_OFFSET ;
Distance : 6

15
Tree	int j = n + INDEX_OFFSET . getGeneratorUpperBounds ( DIM , n , n ) + n - INDEX_OFFSET ;
Code	int j = n + INDEX_OFFSET . getGeneratorUpperBounds ( DIM , n , n ) + n - INDEX_OFFSET ;
Distance : 13

16
Tree	int j = n + F_1_3 - INDEX_OFFSET ;
Code	int j = n + F_1_3 - INDEX_OFFSET ;
Distance : 6

17
Tree	int j = n < currentState.length - INDEX_OFFSET ;
Code	int j = n < currentState.length - INDEX_OFFSET ;
Distance : 6

18
Tree	int j = n < sample2.length - INDEX_OFFSET ;
Code	int j = n < sample2.length - INDEX_OFFSET ;
Distance : 6

19
Tree	int j = ( DIM < < NUMBER_CONSTANT ) + n - INDEX_OFFSET ;
Code	int j = ( DIM < < NUMBER_CONSTANT ) + n - INDEX_OFFSET ;
Distance : 8

20
Tree	int j = MathUtils.TWO_PI + Boolean.FALSE - INDEX_OFFSET ;
Code	int j = MathUtils.TWO_PI + Boolean.FALSE - INDEX_OFFSET ;
Distance : 6

21
Tree	int j = NUMBER_CONSTANT + NUMBER_CONSTANT - expected ;
Code	int j = NUMBER_CONSTANT + NUMBER_CONSTANT - expected ;
Distance : 5

22
Tree	int j = getTickLength ( n , n , n ) >= NUMBER_CONSTANT ;
Code	int j = getTickLength ( n , n , n ) >= NUMBER_CONSTANT ;
Distance : 8

23
Tree	int j = n ^ INDEX_OFFSET - INDEX_OFFSET ;
Code	int j = n ^ INDEX_OFFSET - INDEX_OFFSET ;
Distance : 6

24
Tree	int count = n & NUMBER_CONSTANT ;
Code	int count = n & NUMBER_CONSTANT ;
Distance : 6

25
Tree	int j = n + INDEX_OFFSET . hashCode ( DIM , n , NUMBER_CONSTANT ) + n - INDEX_OFFSET ;
Code	int j = n + INDEX_OFFSET . hashCode ( DIM , n , NUMBER_CONSTANT ) + n - INDEX_OFFSET ;
Distance : 12

26
Tree	int j = n + n - INDEX_OFFSET ;
Code	int j = n + n - INDEX_OFFSET ;
Distance : 5

27
Tree	int j = getTickLength ( n , n , n ) / expected ;
Code	int j = getTickLength ( n , n , n ) / expected ;
Distance : 8

28
Tree	int j = n ^ F_1_3 - INDEX_OFFSET ;
Code	int j = n ^ F_1_3 - INDEX_OFFSET ;
Distance : 6

29
Tree	int j = ( int ) currentState.length * currentState.length - INDEX_OFFSET ;
Code	int j = ( int ) currentState.length * currentState.length - INDEX_OFFSET ;
Distance : 8

30
Tree	int j = n < Year.MAXIMUM_YEAR - INDEX_OFFSET ;
Code	int j = n < Year.MAXIMUM_YEAR - INDEX_OFFSET ;
Distance : 6

31
Tree	int j = n < Boolean.FALSE - INDEX_OFFSET ;
Code	int j = n < Boolean.FALSE - INDEX_OFFSET ;
Distance : 6

32
Tree	int j = n + F_1_3 . getGeneratorUpperBounds ( DIM , n , NUMBER_CONSTANT ) - INDEX_OFFSET ;
Code	int j = n + F_1_3 . getGeneratorUpperBounds ( DIM , n , NUMBER_CONSTANT ) - INDEX_OFFSET ;
Distance : 10

33
Tree	int j = n + INDEX_OFFSET . getGeneratorUpperBounds ( INDEX_OFFSET , n , NUMBER_CONSTANT ) - INDEX_OFFSET ;
Code	int j = n + INDEX_OFFSET . getGeneratorUpperBounds ( INDEX_OFFSET , n , NUMBER_CONSTANT ) - INDEX_OFFSET ;
Distance : 10

34
Tree	double j = n & NUMBER_CONSTANT ;
Code	double j = n & NUMBER_CONSTANT ;
Distance : 6

35
Tree	int j = n + minor - INDEX_OFFSET ;
Code	int j = n + minor - INDEX_OFFSET ;
Distance : 6

36
Tree	int j = getTickLength ( n , n , tolerance ) >= NUMBER_CONSTANT ;
Code	int j = getTickLength ( n , n , tolerance ) >= NUMBER_CONSTANT ;
Distance : 8

37
Tree	int j = ( long ) currentState.length * currentState.length - INDEX_OFFSET ;
Code	int j = ( long ) currentState.length * currentState.length - INDEX_OFFSET ;
Distance : 8

38
Tree	int j = n + INDEX_OFFSET . getGeneratorUpperBounds ( DIM , n , tolerance ) + n - INDEX_OFFSET ;
Code	int j = n + INDEX_OFFSET . getGeneratorUpperBounds ( DIM , n , tolerance ) + n - INDEX_OFFSET ;
Distance : 13

39
Tree	int j = ( int ) currentState.length * LocalizedFormats.CARDAN_ANGLES_SINGULARITY - INDEX_OFFSET ;
Code	int j = ( int ) currentState.length * LocalizedFormats.CARDAN_ANGLES_SINGULARITY - INDEX_OFFSET ;
Distance : 8

40
Tree	int j = ( int ) n * ^ ;
Code	int j = ( int ) n * ^ ;
Distance : 6

41
Tree	int j = n - offset - INDEX_OFFSET ;
Code	int j = n - offset - INDEX_OFFSET ;
Distance : 6

42
Tree	int j = NUMBER_CONSTANT * x - INDEX_OFFSET - INDEX_OFFSET ;
Code	int j = NUMBER_CONSTANT * x - INDEX_OFFSET - INDEX_OFFSET ;
Distance : 5

43
Tree	int j = n + INDEX_OFFSET . getGeneratorUpperBounds ( DIM , n , NUMBER_CONSTANT ) + n - INDEX_OFFSET ;
Code	int j = n + INDEX_OFFSET . getGeneratorUpperBounds ( DIM , n , NUMBER_CONSTANT ) + n - INDEX_OFFSET ;
Distance : 12

44
Tree	int j = n - F_1_2 - INDEX_OFFSET ;
Code	int j = n - F_1_2 - INDEX_OFFSET ;
Distance : 6

45
Tree	int j = NUMBER_CONSTANT * values - INDEX_OFFSET ;
Code	int j = NUMBER_CONSTANT * values - INDEX_OFFSET ;
Distance : 4

46
Tree	int j = n * DIM - INDEX_OFFSET ;
Code	int j = n * DIM - INDEX_OFFSET ;
Distance : 5

47
Tree	int j = ( int ) currentState.length * iChronology.MILLIS_PER_DAY - INDEX_OFFSET ;
Code	int j = ( int ) currentState.length * iChronology.MILLIS_PER_DAY - INDEX_OFFSET ;
Distance : 8

48
Tree	int j = NUMBER_CONSTANT * n - F_1_2 ;
Code	int j = NUMBER_CONSTANT * n - F_1_2 ;
Distance : 3

49
Tree	int j = n * FastMath - F_1_2 ;
Code	int j = n * FastMath - F_1_2 ;
Distance : 5

50
Tree	int j = n * FastMath - residual ;
Code	int j = n * FastMath - residual ;
Distance : 5

51
Tree	int j = n & NUMBER_CONSTANT ;
Code	int j = n & NUMBER_CONSTANT ;
Distance : 5

52
Tree	int j = n * residual - INDEX_OFFSET ;
Code	int j = n * residual - INDEX_OFFSET ;
Distance : 5

53
Tree	int j = ( Class < < NUMBER_CONSTANT ) + n - INDEX_OFFSET ;
Code	int j = ( Class < < NUMBER_CONSTANT ) + n - INDEX_OFFSET ;
Distance : 8

54
Tree	int j = NUMBER_CONSTANT * n - F_1_2 - INDEX_OFFSET ;
Code	int j = NUMBER_CONSTANT * n - F_1_2 - INDEX_OFFSET ;
Distance : 4

55
Tree	int j = ( int ) values.length * currentState.length - INDEX_OFFSET ;
Code	int j = ( int ) values.length * currentState.length - INDEX_OFFSET ;
Distance : 8

56
Tree	int j = n * F_1_3 - INDEX_OFFSET ;
Code	int j = n * F_1_3 - INDEX_OFFSET ;
Distance : 5

57
Tree	int j = n / CombinatoricsUtils - INDEX_OFFSET ;
Code	int j = n / CombinatoricsUtils - INDEX_OFFSET ;
Distance : 6

58
Tree	int j = n / n - INDEX_OFFSET ;
Code	int j = n / n - INDEX_OFFSET ;
Distance : 5

59
Tree	int j = n + INDEX_OFFSET . getGeneratorUpperBounds ( j , n , NUMBER_CONSTANT ) - INDEX_OFFSET ;
Code	int j = n + INDEX_OFFSET . getGeneratorUpperBounds ( j , n , NUMBER_CONSTANT ) - INDEX_OFFSET ;
Distance : 10

60
Tree	int j = n * j - INDEX_OFFSET ;
Code	int j = n * j - INDEX_OFFSET ;
Distance : 5

61
Tree	int j = RandomNameGenerator.FIRST_CHAR + values.length - INDEX_OFFSET ;
Code	int j = RandomNameGenerator.FIRST_CHAR + values.length - INDEX_OFFSET ;
Distance : 6

62
Tree	int j = NUMBER_CONSTANT * residual - INDEX_OFFSET ;
Code	int j = NUMBER_CONSTANT * residual - INDEX_OFFSET ;
Distance : 4

63
Tree	int j = NUMBER_CONSTANT * t - INDEX_OFFSET - INDEX_OFFSET ;
Code	int j = NUMBER_CONSTANT * t - INDEX_OFFSET - INDEX_OFFSET ;
Distance : 5

64
Tree	int j = NUMBER_CONSTANT * n - residual ;
Code	int j = NUMBER_CONSTANT * n - residual ;
Distance : 3

65
Tree	int j = n == NUMBER_CONSTANT - j ;
Code	int j = n == NUMBER_CONSTANT - j ;
Distance : 6

66
Tree	int j = n < startConfiguration.length - INDEX_OFFSET ;
Code	int j = n < startConfiguration.length - INDEX_OFFSET ;
Distance : 6

67
Tree	int j = NUMBER_CONSTANT * x - INDEX_OFFSET ;
Code	int j = NUMBER_CONSTANT * x - INDEX_OFFSET ;
Distance : 4

68
Tree	int j = NUMBER_CONSTANT * t - INDEX_OFFSET ;
Code	int j = NUMBER_CONSTANT * t - INDEX_OFFSET ;
Distance : 4

69
Tree	int j = RandomNameGenerator.FIRST_CHAR + Boolean.FALSE - INDEX_OFFSET ;
Code	int j = RandomNameGenerator.FIRST_CHAR + Boolean.FALSE - INDEX_OFFSET ;
Distance : 6

70
Tree	int j = NUMBER_CONSTANT * n - INDEX_OFFSET ;
Code	int j = NUMBER_CONSTANT * n - INDEX_OFFSET ;
Distance : 3

71
Tree	int j = n - residual - INDEX_OFFSET ;
Code	int j = n - residual - INDEX_OFFSET ;
Distance : 6

72
Tree	int j = n / INDEX_OFFSET - INDEX_OFFSET ;
Code	int j = n / INDEX_OFFSET - INDEX_OFFSET ;
Distance : 6

73
Tree	int j = n / F_1_3 - INDEX_OFFSET ;
Code	int j = n / F_1_3 - INDEX_OFFSET ;
Distance : 6

74
Tree	int j = getInstance ( n , n , n ) / expected ;
Code	int j = getInstance ( n , n , n ) / expected ;
Distance : 8

75
Tree	int j = NUMBER_CONSTANT * IllegalStateException - INDEX_OFFSET - INDEX_OFFSET ;
Code	int j = NUMBER_CONSTANT * IllegalStateException - INDEX_OFFSET - INDEX_OFFSET ;
Distance : 5

76
Tree	int j = ( int ) currentState.length * values.length - INDEX_OFFSET ;
Code	int j = ( int ) currentState.length * values.length - INDEX_OFFSET ;
Distance : 8

77
Tree	int rows = n != NUMBER_CONSTANT ;
Code	int rows = n != NUMBER_CONSTANT ;
Distance : 6

78
Tree	long j = n != NUMBER_CONSTANT ;
Code	long j = n != NUMBER_CONSTANT ;
Distance : 6

79
Tree	int j = n + INDEX_OFFSET . hashCode ( DIM , n , NUMBER_CONSTANT ) - INDEX_OFFSET ;
Code	int j = n + INDEX_OFFSET . hashCode ( DIM , n , NUMBER_CONSTANT ) - INDEX_OFFSET ;
Distance : 10

80
Tree	int j = NUMBER_CONSTANT * values - INDEX_OFFSET - INDEX_OFFSET ;
Code	int j = NUMBER_CONSTANT * values - INDEX_OFFSET - INDEX_OFFSET ;
Distance : 5

81
Tree	int j = n < LocalizedFormats.NUMBER_TOO_SMALL - INDEX_OFFSET ;
Code	int j = n < LocalizedFormats.NUMBER_TOO_SMALL - INDEX_OFFSET ;
Distance : 6

82
Tree	int j = NUMBER_CONSTANT * n - INDEX_OFFSET - INDEX_OFFSET ;
Code	int j = NUMBER_CONSTANT * n - INDEX_OFFSET - INDEX_OFFSET ;
Distance : 4

83
Tree	int j = ( n < < NUMBER_CONSTANT ) + residual - INDEX_OFFSET ;
Code	int j = ( n < < NUMBER_CONSTANT ) + residual - INDEX_OFFSET ;
Distance : 8

84
Tree	int j = findDomainAxisIndex ( n , n , n ) / expected ;
Code	int j = findDomainAxisIndex ( n , n , n ) / expected ;
Distance : 8

85
Tree	int j = n == NUMBER_CONSTANT - F_1_2 ;
Code	int j = n == NUMBER_CONSTANT - F_1_2 ;
Distance : 6

86
Tree	int j = n == NUMBER_CONSTANT - d ;
Code	int j = n == NUMBER_CONSTANT - d ;
Distance : 6

87
Tree	int j = n + INDEX_OFFSET . getGeneratorUpperBounds ( DIM , n , NUMBER_CONSTANT ) - INDEX_OFFSET ;
Code	int j = n + INDEX_OFFSET . getGeneratorUpperBounds ( DIM , n , NUMBER_CONSTANT ) - INDEX_OFFSET ;
Distance : 10

88
Tree	int j = ( int ) n * / ;
Code	int j = ( int ) n * / ;
Distance : 6

89
Tree	int j = n - INDEX_OFFSET - INDEX_OFFSET ;
Code	int j = n - INDEX_OFFSET - INDEX_OFFSET ;
Distance : 6

90
Tree	int j = ( int ) currentState.length * f.length - INDEX_OFFSET ;
Code	int j = ( int ) currentState.length * f.length - INDEX_OFFSET ;
Distance : 8

91
Tree	int j = n + FastMath . getGeneratorUpperBounds ( DIM , n , NUMBER_CONSTANT ) + n - INDEX_OFFSET ;
Code	int j = n + FastMath . getGeneratorUpperBounds ( DIM , n , NUMBER_CONSTANT ) + n - INDEX_OFFSET ;
Distance : 12

92
Tree	int j = n / DIM - INDEX_OFFSET ;
Code	int j = n / DIM - INDEX_OFFSET ;
Distance : 6

93
Tree	int j = n < IncrementalCheckMode.GENERATE_IJS - INDEX_OFFSET ;
Code	int j = n < IncrementalCheckMode.GENERATE_IJS - INDEX_OFFSET ;
Distance : 6

94
Tree	int j = ( int ) currentState.length * DateUtils.MILLIS_PER_MINUTE - INDEX_OFFSET ;
Code	int j = ( int ) currentState.length * DateUtils.MILLIS_PER_MINUTE - INDEX_OFFSET ;
Distance : 8

95
Tree	int j = ( n < < NUMBER_CONSTANT ) + n - INDEX_OFFSET ;
Code	int j = ( n < < NUMBER_CONSTANT ) + n - INDEX_OFFSET ;
Distance : 8

96
Tree	int j = n + FastMath . getGeneratorUpperBounds ( DIM , n , NUMBER_CONSTANT ) - INDEX_OFFSET ;
Code	int j = n + FastMath . getGeneratorUpperBounds ( DIM , n , NUMBER_CONSTANT ) - INDEX_OFFSET ;
Distance : 10

97
Tree	int j = NUMBER_CONSTANT * residual - NUMBER_CONSTANT ;
Code	int j = NUMBER_CONSTANT * residual - NUMBER_CONSTANT ;
Distance : 3

98
Tree	int j = n + INDEX_OFFSET . getGeneratorUpperBounds ( j , n , NUMBER_CONSTANT ) + n - INDEX_OFFSET ;
Code	int j = n + INDEX_OFFSET . getGeneratorUpperBounds ( j , n , NUMBER_CONSTANT ) + n - INDEX_OFFSET ;
Distance : 12

99
Tree	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Code	int j = NUMBER_CONSTANT * n - NUMBER_CONSTANT ;
Distance : 2

100
Tree	int j = n * FastMath - INDEX_OFFSET ;
Code	int j = n * FastMath - INDEX_OFFSET ;
Distance : 5

101
Tree	int j = RandomNameGenerator.FIRST_CHAR + LocalizedFormats.OVERFLOW_IN_ADDITION - INDEX_OFFSET ;
Code	int j = RandomNameGenerator.FIRST_CHAR + LocalizedFormats.OVERFLOW_IN_ADDITION - INDEX_OFFSET ;
Distance : 6

102
Tree	int j = NUMBER_CONSTANT * t - NUMBER_CONSTANT ;
Code	int j = NUMBER_CONSTANT * t - NUMBER_CONSTANT ;
Distance : 3

103
Tree	int j = ( long ) n * / ;
Code	int j = ( long ) n * / ;
Distance : 6

104
Tree	int j = ( int ) t * / ;
Code	int j = ( int ) t * / ;
Distance : 7

105
Tree	int j = n / min - INDEX_OFFSET ;
Code	int j = n / min - INDEX_OFFSET ;
Distance : 6

106
Tree	int j = RandomNameGenerator.FIRST_CHAR + Thread.UncaughtExceptionHandler - INDEX_OFFSET ;
Code	int j = RandomNameGenerator.FIRST_CHAR + Thread.UncaughtExceptionHandler - INDEX_OFFSET ;
Distance : 6

107
Tree	int j = n - INDEX_OFFSET - residual ;
Code	int j = n - INDEX_OFFSET - residual ;
Distance : 6

108
Tree	int j = NUMBER_CONSTANT + NUMBER_CONSTANT - INDEX_OFFSET ;
Code	int j = NUMBER_CONSTANT + NUMBER_CONSTANT - INDEX_OFFSET ;
Distance : 5

109
Tree	int j = ( long ) n * ^ ;
Code	int j = ( long ) n * ^ ;
Distance : 6

110
Tree	int j = n == NUMBER_CONSTANT - tol ;
Code	int j = n == NUMBER_CONSTANT - tol ;
Distance : 6

111
Tree	int j = n - INDEX_OFFSET - j ;
Code	int j = n - INDEX_OFFSET - j ;
Distance : 6

112
Tree	int j = n / FastMath - INDEX_OFFSET ;
Code	int j = n / FastMath - INDEX_OFFSET ;
Distance : 6

113
Tree	int j = n + INDEX_OFFSET . hashCode ( NEGATIVE_VAR_COLUMN_LABEL , n , NUMBER_CONSTANT ) - INDEX_OFFSET ;
Code	int j = n + INDEX_OFFSET . hashCode ( NEGATIVE_VAR_COLUMN_LABEL , n , NUMBER_CONSTANT ) - INDEX_OFFSET ;
Distance : 10

114
Tree	int j = n + INDEX_OFFSET . getGeneratorUpperBounds ( NEGATIVE_VAR_COLUMN_LABEL , n , tolerance ) + n - INDEX_OFFSET ;
Code	int j = n + INDEX_OFFSET . getGeneratorUpperBounds ( NEGATIVE_VAR_COLUMN_LABEL , n , tolerance ) + n - INDEX_OFFSET ;
Distance : 13

115
Tree	int j = MathUtils.TWO_PI + values.length - INDEX_OFFSET ;
Code	int j = MathUtils.TWO_PI + values.length - INDEX_OFFSET ;
Distance : 6

116
Tree	int j = NUMBER_CONSTANT * x - NUMBER_CONSTANT ;
Code	int j = NUMBER_CONSTANT * x - NUMBER_CONSTANT ;
Distance : 3

117
Tree	int j = getTickLength ( n , n , n ) / residual ;
Code	int j = getTickLength ( n , n , n ) / residual ;
Distance : 8

118
Tree	int j = NUMBER_CONSTANT * k - NUMBER_CONSTANT ;
Code	int j = NUMBER_CONSTANT * k - NUMBER_CONSTANT ;
Distance : 3

119
Tree	int j = getTickLength ( n , n , n ) / INDEX_OFFSET ;
Code	int j = getTickLength ( n , n , n ) / INDEX_OFFSET ;
Distance : 8

120
Tree	int j = n + F_1_3 . getGeneratorUpperBounds ( DIM , n , NUMBER_CONSTANT ) + n - INDEX_OFFSET ;
Code	int j = n + F_1_3 . getGeneratorUpperBounds ( DIM , n , NUMBER_CONSTANT ) + n - INDEX_OFFSET ;
Distance : 12

121
Tree	int j = NUMBER_CONSTANT * iChronology.MILLIS_PER_DAY - INDEX_OFFSET ;
Code	int j = NUMBER_CONSTANT * iChronology.MILLIS_PER_DAY - INDEX_OFFSET ;
Distance : 4

122
Tree	int j = ( int ) n * % ;
Code	int j = ( int ) n * % ;
Distance : 6

123
Tree	int j = findDomainAxisIndex ( n , n , n ) >= NUMBER_CONSTANT ;
Code	int j = findDomainAxisIndex ( n , n , n ) >= NUMBER_CONSTANT ;
Distance : 8

124
Tree	int j = NUMBER_CONSTANT * residual - INDEX_OFFSET - INDEX_OFFSET ;
Code	int j = NUMBER_CONSTANT * residual - INDEX_OFFSET - INDEX_OFFSET ;
Distance : 5

125
Tree	int j = NUMBER_CONSTANT * IllegalStateException - NUMBER_CONSTANT ;
Code	int j = NUMBER_CONSTANT * IllegalStateException - NUMBER_CONSTANT ;
Distance : 3

126
Tree	int j = n != NUMBER_CONSTANT ;
Code	int j = n != NUMBER_CONSTANT ;
Distance : 5

127
Tree	int j = NUMBER_CONSTANT * currentState.length - TWO_POWER_52 ;
Code	int j = NUMBER_CONSTANT * currentState.length - TWO_POWER_52 ;
Distance : 4

128
Tree	int count = ( int ) n * / ;
Code	int count = ( int ) n * / ;
Distance : 7

129
Tree	int j = n + DIM - INDEX_OFFSET ;
Code	int j = n + DIM - INDEX_OFFSET ;
Distance : 6

130
Tree	int j = NUMBER_CONSTANT * expected - NUMBER_CONSTANT ;
Code	int j = NUMBER_CONSTANT * expected - NUMBER_CONSTANT ;
Distance : 3

131
Tree	int j = n + F_1_2 - INDEX_OFFSET ;
Code	int j = n + F_1_2 - INDEX_OFFSET ;
Distance : 6

132
Tree	int j = ( int ) n * throws ;
Code	int j = ( int ) n * throws ;
Distance : 6

133
Tree	int j = n == NUMBER_CONSTANT - INDEX_OFFSET ;
Code	int j = n == NUMBER_CONSTANT - INDEX_OFFSET ;
Distance : 6

134
Tree	int j = n + INDEX_OFFSET . getGeneratorUpperBounds ( NEGATIVE_VAR_COLUMN_LABEL , n , n ) + n - INDEX_OFFSET ;
Code	int j = n + INDEX_OFFSET . getGeneratorUpperBounds ( NEGATIVE_VAR_COLUMN_LABEL , n , n ) + n - INDEX_OFFSET ;
Distance : 13

135
Tree	int j = n + INDEX_OFFSET . hashCode ( NEGATIVE_VAR_COLUMN_LABEL , n , NUMBER_CONSTANT ) + n - INDEX_OFFSET ;
Code	int j = n + INDEX_OFFSET . hashCode ( NEGATIVE_VAR_COLUMN_LABEL , n , NUMBER_CONSTANT ) + n - INDEX_OFFSET ;
Distance : 12

136
Tree	int j = n + INDEX_OFFSET . hashCode ( DIM , n , tolerance ) + n - INDEX_OFFSET ;
Code	int j = n + INDEX_OFFSET . hashCode ( DIM , n , tolerance ) + n - INDEX_OFFSET ;
Distance : 13

137
Tree	int j = getTickLength ( n , n , tolerance ) / INDEX_OFFSET ;
Code	int j = getTickLength ( n , n , tolerance ) / INDEX_OFFSET ;
Distance : 8

138
Tree	int j = NUMBER_CONSTANT * n - residual - INDEX_OFFSET ;
Code	int j = NUMBER_CONSTANT * n - residual - INDEX_OFFSET ;
Distance : 4

139
Tree	int j = n + INDEX_OFFSET . getGeneratorUpperBounds ( INDEX_OFFSET , n , NUMBER_CONSTANT ) + n - INDEX_OFFSET ;
Code	int j = n + INDEX_OFFSET . getGeneratorUpperBounds ( INDEX_OFFSET , n , NUMBER_CONSTANT ) + n - INDEX_OFFSET ;
Distance : 12

140
Tree	int j = n < Long.MAX_VALUE - INDEX_OFFSET ;
Code	int j = n < Long.MAX_VALUE - INDEX_OFFSET ;
Distance : 6

141
Tree	int j = NUMBER_CONSTANT + NUMBER_CONSTANT - residual ;
Code	int j = NUMBER_CONSTANT + NUMBER_CONSTANT - residual ;
Distance : 5

142
Tree	int j = n / j - INDEX_OFFSET ;
Code	int j = n / j - INDEX_OFFSET ;
Distance : 6

143
Tree	int j = NUMBER_CONSTANT + NUMBER_CONSTANT - binCount ;
Code	int j = NUMBER_CONSTANT + NUMBER_CONSTANT - binCount ;
Distance : 5

144
Tree	int j = n - INDEX_OFFSET - F_1_2 ;
Code	int j = n - INDEX_OFFSET - F_1_2 ;
Distance : 6

145
Tree	int j = n + FastMath . getGeneratorUpperBounds ( DIM , n , n ) + n - INDEX_OFFSET ;
Code	int j = n + FastMath . getGeneratorUpperBounds ( DIM , n , n ) + n - INDEX_OFFSET ;
Distance : 13

146
Tree	int j = NUMBER_CONSTANT * values - NUMBER_CONSTANT ;
Code	int j = NUMBER_CONSTANT * values - NUMBER_CONSTANT ;
Distance : 3

147
Tree	int j = n == NUMBER_CONSTANT - residual ;
Code	int j = n == NUMBER_CONSTANT - residual ;
Distance : 6

148
Tree	int j = n + INDEX_OFFSET . getGeneratorUpperBounds ( NEGATIVE_VAR_COLUMN_LABEL , n , NUMBER_CONSTANT ) - INDEX_OFFSET ;
Code	int j = n + INDEX_OFFSET . getGeneratorUpperBounds ( NEGATIVE_VAR_COLUMN_LABEL , n , NUMBER_CONSTANT ) - INDEX_OFFSET ;
Distance : 10

149
Tree	int j = n == NUMBER_CONSTANT - n ;
Code	int j = n == NUMBER_CONSTANT - n ;
Distance : 6

150
Tree	int j = NUMBER_CONSTANT * currentState.length - residual ;
Code	int j = NUMBER_CONSTANT * currentState.length - residual ;
Distance : 4

151
Tree	int j = ( n < < NUMBER_CONSTANT ) + n - F_1_2 ;
Code	int j = ( n < < NUMBER_CONSTANT ) + n - F_1_2 ;
Distance : 8

152
Tree	int j = findDomainAxisIndex ( n , n , n ) / INDEX_OFFSET ;
Code	int j = findDomainAxisIndex ( n , n , n ) / INDEX_OFFSET ;
Distance : 8

153
Tree	int j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Code	int j = NUMBER_CONSTANT + NUMBER_CONSTANT - n ;
Distance : 5

154
Tree	double j = n != NUMBER_CONSTANT ;
Code	double j = n != NUMBER_CONSTANT ;
Distance : 6

155
Tree	int j = n == NUMBER_CONSTANT - CombinatoricsUtils ;
Code	int j = n == NUMBER_CONSTANT - CombinatoricsUtils ;
Distance : 6

156
Tree	int j = getTickLength ( n , n , tolerance ) / expected ;
Code	int j = getTickLength ( n , n , tolerance ) / expected ;
Distance : 8

157
Tree	int degreesOfFreedom = n != NUMBER_CONSTANT ;
Code	int degreesOfFreedom = n != NUMBER_CONSTANT ;
Distance : 6

158
Tree	int seed = n != NUMBER_CONSTANT ;
Code	int seed = n != NUMBER_CONSTANT ;
Distance : 6

159
Tree	int count = n != NUMBER_CONSTANT ;
Code	int count = n != NUMBER_CONSTANT ;
Distance : 6

160
Tree	int j = ( t0 < < NUMBER_CONSTANT ) + n - INDEX_OFFSET ;
Code	int j = ( t0 < < NUMBER_CONSTANT ) + n - INDEX_OFFSET ;
Distance : 8

161
Tree	int j = NUMBER_CONSTANT + NUMBER_CONSTANT - CombinatoricsUtils ;
Code	int j = NUMBER_CONSTANT + NUMBER_CONSTANT - CombinatoricsUtils ;
Distance : 5

162
Tree	int j = n + INDEX_OFFSET . getGeneratorUpperBounds ( j , n , n ) + n - INDEX_OFFSET ;
Code	int j = n + INDEX_OFFSET . getGeneratorUpperBounds ( j , n , n ) + n - INDEX_OFFSET ;
Distance : 13

163
Tree	int j = NUMBER_CONSTANT * Long.MAX_VALUE - INDEX_OFFSET ;
Code	int j = NUMBER_CONSTANT * Long.MAX_VALUE - INDEX_OFFSET ;
Distance : 4

164
Tree	int j = NUMBER_CONSTANT * sample2.length - INDEX_OFFSET ;
Code	int j = NUMBER_CONSTANT * sample2.length - INDEX_OFFSET ;
Distance : 4

165
Tree	int j = MathUtils.TWO_PI + LocalizedFormats.OVERFLOW_IN_ADDITION - INDEX_OFFSET ;
Code	int j = MathUtils.TWO_PI + LocalizedFormats.OVERFLOW_IN_ADDITION - INDEX_OFFSET ;
Distance : 6

166
Tree	int j = NUMBER_CONSTANT * IllegalStateException - INDEX_OFFSET ;
Code	int j = NUMBER_CONSTANT * IllegalStateException - INDEX_OFFSET ;
Distance : 4

167
Tree	int count = NUMBER_CONSTANT * currentState.length - INDEX_OFFSET ;
Code	int count = NUMBER_CONSTANT * currentState.length - INDEX_OFFSET ;
Distance : 5

168
Tree	int j = n * n - INDEX_OFFSET ;
Code	int j = n * n - INDEX_OFFSET ;
Distance : 4

169
Tree	int j = NUMBER_CONSTANT + NUMBER_CONSTANT - d ;
Code	int j = NUMBER_CONSTANT + NUMBER_CONSTANT - d ;
Distance : 5

170
Tree	int j = ( n < < NUMBER_CONSTANT ) + n - residual ;
Code	int j = ( n < < NUMBER_CONSTANT ) + n - residual ;
Distance : 8

171
Tree	int j = SystemUtils.LINE_SEPARATOR + Boolean.FALSE - INDEX_OFFSET ;
Code	int j = SystemUtils.LINE_SEPARATOR + Boolean.FALSE - INDEX_OFFSET ;
Distance : 6

172
Tree	int den = n != NUMBER_CONSTANT ;
Code	int den = n != NUMBER_CONSTANT ;
Distance : 6

173
Tree	int j = n + INDEX_OFFSET . hashCode ( DIM , n , n ) + n - INDEX_OFFSET ;
Code	int j = n + INDEX_OFFSET . hashCode ( DIM , n , n ) + n - INDEX_OFFSET ;
Distance : 13

174
Tree	int j = NUMBER_CONSTANT + NUMBER_CONSTANT - ioe ;
Code	int j = NUMBER_CONSTANT + NUMBER_CONSTANT - ioe ;
Distance : 5

175
Tree	int j = NUMBER_CONSTANT * moment.m2 - INDEX_OFFSET ;
Code	int j = NUMBER_CONSTANT * moment.m2 - INDEX_OFFSET ;
Distance : 4

176
Tree	int den = n & NUMBER_CONSTANT ;
Code	int den = n & NUMBER_CONSTANT ;
Distance : 6

177
Tree	int rows = n & NUMBER_CONSTANT ;
Code	int rows = n & NUMBER_CONSTANT ;
Distance : 6

178
Tree	long j = n & NUMBER_CONSTANT ;
Code	long j = n & NUMBER_CONSTANT ;
Distance : 6

179
Tree	int j = findDomainAxisIndex ( n , n , tolerance ) >= NUMBER_CONSTANT ;
Code	int j = findDomainAxisIndex ( n , n , tolerance ) >= NUMBER_CONSTANT ;
Distance : 8

180
Tree	int j = n . hashCode ( n , n , n ) >= NUMBER_CONSTANT ;
Code	int j = n . hashCode ( n , n , n ) >= NUMBER_CONSTANT ;
Distance : 9

181
Tree	int j = RandomNameGenerator.FIRST_CHAR n LocalizedFormats.ZERO_NORM - INDEX_OFFSET ;
Code	int j = RandomNameGenerator.FIRST_CHAR n LocalizedFormats.ZERO_NORM - INDEX_OFFSET ;
Distance : 6

182
Tree	int j = n ^ minor - INDEX_OFFSET ;
Code	int j = n ^ minor - INDEX_OFFSET ;
Distance : 6

183
Tree	int j = RandomNameGenerator.FIRST_CHAR n LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN - INDEX_OFFSET ;
Code	int j = RandomNameGenerator.FIRST_CHAR n LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN - INDEX_OFFSET ;
Distance : 6

184
Tree	int j = MathUtils.TWO_PI n LocalizedFormats.ZERO_NORM - INDEX_OFFSET ;
Code	int j = MathUtils.TWO_PI n LocalizedFormats.ZERO_NORM - INDEX_OFFSET ;
Distance : 6

185
Tree	int j = MathUtils.TWO_PI n LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN - INDEX_OFFSET ;
Code	int j = MathUtils.TWO_PI n LocalizedFormats.UNABLE_TO_PERFORM_QR_DECOMPOSITION_ON_JACOBIAN - INDEX_OFFSET ;
Distance : 6

186
Tree	int j = RandomNameGenerator.FIRST_CHAR n LocalizedFormats.VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC - INDEX_OFFSET ;
Code	int j = RandomNameGenerator.FIRST_CHAR n LocalizedFormats.VALUES_ADDED_BEFORE_CONFIGURING_STATISTIC - INDEX_OFFSET ;
Distance : 6

187
Tree	int j = RandomNameGenerator.FIRST_CHAR * LocalizedFormats.NO_DEGREES_OF_FREEDOM - INDEX_OFFSET ;
Code	int j = RandomNameGenerator.FIRST_CHAR * LocalizedFormats.NO_DEGREES_OF_FREEDOM - INDEX_OFFSET ;
Distance : 5

188
Tree	int j = SystemUtils.LINE_SEPARATOR n LocalizedFormats.ZERO_NORM - INDEX_OFFSET ;
Code	int j = SystemUtils.LINE_SEPARATOR n LocalizedFormats.ZERO_NORM - INDEX_OFFSET ;
Distance : 6

189
Tree	int j = getInstance ( n , n , tolerance ) >= NUMBER_CONSTANT ;
Code	int j = getInstance ( n , n , tolerance ) >= NUMBER_CONSTANT ;
Distance : 8

190
Tree	int j = n . IEEEremainder ( n , n , n ) >= NUMBER_CONSTANT ;
Code	int j = n . IEEEremainder ( n , n , n ) >= NUMBER_CONSTANT ;
Distance : 9

191
Tree	int j = n ^ min - INDEX_OFFSET ;
Code	int j = n ^ min - INDEX_OFFSET ;
Distance : 6

192
Tree	int j = n ^ residual - INDEX_OFFSET ;
Code	int j = n ^ residual - INDEX_OFFSET ;
Distance : 6

193
Tree	int j = getUnivariateStatistic ( n , n , n ) >= NUMBER_CONSTANT ;
Code	int j = getUnivariateStatistic ( n , n , n ) >= NUMBER_CONSTANT ;
Distance : 8

194
Tree	int j = n . IEEEremainder ( n , n , tolerance ) >= NUMBER_CONSTANT ;
Code	int j = n . IEEEremainder ( n , n , tolerance ) >= NUMBER_CONSTANT ;
Distance : 9

195
Tree	int j = n . hashCode ( n , n , tolerance ) >= NUMBER_CONSTANT ;
Code	int j = n . hashCode ( n , n , tolerance ) >= NUMBER_CONSTANT ;
Distance : 9

196
Tree	int j = n . is ( n , n , n ) >= NUMBER_CONSTANT ;
Code	int j = n . is ( n , n , n ) >= NUMBER_CONSTANT ;
Distance : 9

197
Tree	int j = n . currentTimeMillis ( n , n , n ) >= NUMBER_CONSTANT ;
Code	int j = n . currentTimeMillis ( n , n , n ) >= NUMBER_CONSTANT ;
Distance : 9

198
Tree	int j = getTypeInternal ( n , n , n ) >= NUMBER_CONSTANT ;
Code	int j = getTypeInternal ( n , n , n ) >= NUMBER_CONSTANT ;
Distance : 8

199
Tree	int j = data.length n LocalizedFormats.ZERO_NORM - INDEX_OFFSET ;
Code	int j = data.length n LocalizedFormats.ZERO_NORM - INDEX_OFFSET ;
Distance : 6

========================================================================


========================================================================
Example Number: 56
Parent Code is: 
{ return getCumPct ( ( Comparable < > ) v ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return getPct ( ( Comparable < > ) v ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=getCumPct}) (214{val=(}) (11 (214{val=(}) (74 (43 (800{val=Comparable})) (230{val=<}) (76{val=?}) (231{val=>})) (215{val=)}) (800{val=v})) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=getPct}) (214{val=(}) (11 (214{val=(}) (74 (43 (800{val=Comparable})) (230{val=<}) (76{val=?}) (231{val=>})) (215{val=)}) (800{val=v})) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/75/parent/src_main_java_org_apache_commons_math_stat_Frequency.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return getCumPct ( ( Comparable ) v . valueOf ( v , ( Object [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . valueOf ( v , ( Object [] ) null ) ) ; }
Distance : 13

1
Tree	{ return getCumPct ( ( T ) v . valueOf ( v ) ) ; }
Code	{ return getCumPct ( ( T ) v . valueOf ( v ) ) ; }
Distance : 8

2
Tree	{ return ( ( T ) v . valueOf () ) . data . clazz () ; }
Code	{ return ( ( T ) v . valueOf () ) . data . clazz () ; }
Distance : 12

3
Tree	{ return mockitoCore . getCumPct ( sample1 ) . returnZero ( this ) ; }
Code	{ return mockitoCore . getCumPct ( sample1 ) . returnZero ( this ) ; }
Distance : 9

4
Tree	{ return getCumPct ( ( T ) v . valueOf ( null ) ) ; }
Code	{ return getCumPct ( ( T ) v . valueOf ( null ) ) ; }
Distance : 9

5
Tree	{ return getCumPct ( ( Comparable ) v . getDimension ( v , ( Object [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getDimension ( v , ( Object [] ) null ) ) ; }
Distance : 13

6
Tree	{ return getCumPct ( sample1 , v . getSimplifiedName () , PropertyCollapseLevel.NONE ) ; }
Code	{ return getCumPct ( sample1 , v . getSimplifiedName () , PropertyCollapseLevel.NONE ) ; }
Distance : 9

7
Tree	{ return getCumPct ( ( ( Comparable ) v . valueOf ( v ) ) . data ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . valueOf ( v ) ) . data ) ; }
Distance : 11

8
Tree	{ return getCumPct ( ( T < T > ) / ) ; }
Code	{ return getCumPct ( ( T < T > ) / ) ; }
Distance : 4

9
Tree	{ return getCumPct ( ( Comparable < T > ) / ) ; }
Code	{ return getCumPct ( ( Comparable < T > ) / ) ; }
Distance : 3

10
Tree	{ return getCumPct ( ( ( Comparable ) v ) . data ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v ) . data ) ; }
Distance : 6

11
Tree	{ return cloneReset ( ( T < T > ) / ) ; }
Code	{ return cloneReset ( ( T < T > ) / ) ; }
Distance : 4

12
Tree	{ return getCumPct ( ( ( T ) v ) . data ) ; }
Code	{ return getCumPct ( ( ( T ) v ) . data ) ; }
Distance : 7

13
Tree	{ return cloneReset ( ( Comparable < T > ) / ) ; }
Code	{ return cloneReset ( ( Comparable < T > ) / ) ; }
Distance : 3

14
Tree	{ return cloneReset ( ( ( Comparable ) v ) . data ) ; }
Code	{ return cloneReset ( ( ( Comparable ) v ) . data ) ; }
Distance : 6

15
Tree	{ return getCumPct ( ( Comparable ) v . getDimension ( null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getDimension ( null ) ) ; }
Distance : 8

16
Tree	{ return ( ( Comparable ) v . valueOf () ) . data . clazz () ; }
Code	{ return ( ( Comparable ) v . valueOf () ) . data . clazz () ; }
Distance : 11

17
Tree	{ return getCumPct ( ( T < T > ) / ) ; }
Code	{ return getCumPct ( ( T < T > ) / ) ; }
Distance : 4

18
Tree	{ return iZoneInfoKeys . ebeDivide ( sample1 ) . returnZero ( this ) ; }
Code	{ return iZoneInfoKeys . ebeDivide ( sample1 ) . returnZero ( this ) ; }
Distance : 9

19
Tree	{ return mockitoCore ( false , false ) ; }
Code	{ return mockitoCore ( false , false ) ; }
Distance : 7

20
Tree	{ return ( ( T ) v . getDimension () ) . data . clazz () ; }
Code	{ return ( ( T ) v . getDimension () ) . data . clazz () ; }
Distance : 12

21
Tree	{ return getCumPct ( ( ( Comparable ) v . getLastChild ( v ) ) . data ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getLastChild ( v ) ) . data ) ; }
Distance : 11

22
Tree	{ return getCumPct ( ( Comparable ) v . getLastChild ( NUMBER_CONSTANT ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getLastChild ( NUMBER_CONSTANT ) ) ; }
Distance : 8

23
Tree	{ return cloneReset ( ( ( T ) v ) . data ) ; }
Code	{ return cloneReset ( ( ( T ) v ) . data ) ; }
Distance : 7

24
Tree	{ return getCumPct ( ( Comparable < T > ) / ) ; }
Code	{ return getCumPct ( ( Comparable < T > ) / ) ; }
Distance : 3

25
Tree	{ return isUnionType ( ( T < T > ) / ) ; }
Code	{ return isUnionType ( ( T < T > ) / ) ; }
Distance : 4

26
Tree	{ return mockitoCore . ebeDivide ( sample1 ) . < v > anyList () ; }
Code	{ return mockitoCore . ebeDivide ( sample1 ) . < v > anyList () ; }
Distance : 10

27
Tree	{ return mockitoCore . ebeDivide ( ( ( MOCKING_PROGRESS ) v ) . data ) ; }
Code	{ return mockitoCore . ebeDivide ( ( ( MOCKING_PROGRESS ) v ) . data ) ; }
Distance : 9

28
Tree	{ return getCumPct ( ( ( InternalMockHandler ) v ) . data ) ; }
Code	{ return getCumPct ( ( ( InternalMockHandler ) v ) . data ) ; }
Distance : 7

29
Tree	{ return mockitoCore ( super , false ) ; }
Code	{ return mockitoCore ( super , false ) ; }
Distance : 7

30
Tree	{ return cloneReset ( JSErrorSubject ) . < v > anyList () ; }
Code	{ return cloneReset ( JSErrorSubject ) . < v > anyList () ; }
Distance : 8

31
Tree	{ return getCumPct ( ( Comparable ) v . getLastChild ( v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getLastChild ( v ) ) ; }
Distance : 7

32
Tree	{ return mockitoCore ( ! , false ) ; }
Code	{ return mockitoCore ( ! , false ) ; }
Distance : 7

33
Tree	{ return getCumPct ( ( T < T > ) <= ) ; }
Code	{ return getCumPct ( ( T < T > ) <= ) ; }
Distance : 4

34
Tree	{ return getCumPct ( FAILED_EVALUATION_MESSAGE ) . < v > anyList () ; }
Code	{ return getCumPct ( FAILED_EVALUATION_MESSAGE ) . < v > anyList () ; }
Distance : 8

35
Tree	{ return isUnionType ( ( ( Comparable ) v ) . data ) ; }
Code	{ return isUnionType ( ( ( Comparable ) v ) . data ) ; }
Distance : 6

36
Tree	{ return getCumPct ( ( T ) v . valueOf ( v , ( Object [] ) null ) ) ; }
Code	{ return getCumPct ( ( T ) v . valueOf ( v , ( Object [] ) null ) ) ; }
Distance : 14

37
Tree	{ return clazz ( false , false ) ; }
Code	{ return clazz ( false , false ) ; }
Distance : 7

38
Tree	{ return cloneReset ( ( Comparable < T > ) / ) ; }
Code	{ return cloneReset ( ( Comparable < T > ) / ) ; }
Distance : 3

39
Tree	{ return getCumPct ( ( Comparable ) getField ( v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getField ( v ) ) ; }
Distance : 5

40
Tree	{ return isUnionType ( ( Comparable < T > ) / ) ; }
Code	{ return isUnionType ( ( Comparable < T > ) / ) ; }
Distance : 3

41
Tree	{ return iZoneInfoKeys . getCumPct ( sample1 , iValues.length , v , Verification.EXPLICIT ) ; }
Code	{ return iZoneInfoKeys . getCumPct ( sample1 , iValues.length , v , Verification.EXPLICIT ) ; }
Distance : 9

42
Tree	{ return getCumPct ( ( ( T ) v . valueOf () ) . data ) ; }
Code	{ return getCumPct ( ( ( T ) v . valueOf () ) . data ) ; }
Distance : 10

43
Tree	{ return mockitoCore . ebeDivide ( sample1 ) . returnZero ( this ) ; }
Code	{ return mockitoCore . ebeDivide ( sample1 ) . returnZero ( this ) ; }
Distance : 9

44
Tree	{ return cloneReset ( ( ( InternalMockHandler ) v ) . data ) ; }
Code	{ return cloneReset ( ( ( InternalMockHandler ) v ) . data ) ; }
Distance : 7

45
Tree	{ return getCumPct ( ( ( Comparable ) v . valueOf ( v , ( Object [] ) null ) ) . data ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . valueOf ( v , ( Object [] ) null ) ) . data ) ; }
Distance : 17

46
Tree	{ return currentLocationAbstractionIdentifier ( false , false ) ; }
Code	{ return currentLocationAbstractionIdentifier ( false , false ) ; }
Distance : 7

47
Tree	{ return getCumPct ( ( ( Comparable ) v . getDimension () ) . data ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getDimension () ) . data ) ; }
Distance : 9

48
Tree	{ return getCumPct ( ( ( T ) v . getDimension ( NUMBER_CONSTANT ) ) . data ) ; }
Code	{ return getCumPct ( ( ( T ) v . getDimension ( NUMBER_CONSTANT ) ) . data ) ; }
Distance : 12

49
Tree	{ return mockitoCore . anovaFValue ( sample1 , iValues.length , v , Verification.EXPLICIT ) ; }
Code	{ return mockitoCore . anovaFValue ( sample1 , iValues.length , v , Verification.EXPLICIT ) ; }
Distance : 9

50
Tree	{ return isUnionType ( ( Comparable < T > ) / ) ; }
Code	{ return isUnionType ( ( Comparable < T > ) / ) ; }
Distance : 3

51
Tree	{ return clazz ( ! , false ) ; }
Code	{ return clazz ( ! , false ) ; }
Distance : 7

52
Tree	{ return getCumPct ( ( ( Comparable ) v . getLastChild ( NUMBER_CONSTANT ) ) . data ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getLastChild ( NUMBER_CONSTANT ) ) . data ) ; }
Distance : 11

53
Tree	{ return getCumPct ( ( ( T ) v . getDimension ( v ) ) . data ) ; }
Code	{ return getCumPct ( ( ( T ) v . getDimension ( v ) ) . data ) ; }
Distance : 12

54
Tree	{ return getCumPct ( ( T ) v . getLastChild ( NUMBER_CONSTANT ) ) ; }
Code	{ return getCumPct ( ( T ) v . getLastChild ( NUMBER_CONSTANT ) ) ; }
Distance : 9

55
Tree	{ return getCumPct ( JSErrorSubject ) . < v > anyList () ; }
Code	{ return getCumPct ( JSErrorSubject ) . < v > anyList () ; }
Distance : 8

56
Tree	{ return cloneReset ( ( T < T > ) / ) ; }
Code	{ return cloneReset ( ( T < T > ) / ) ; }
Distance : 4

57
Tree	{ return ebeDivide ( ( T < T > ) / ) ; }
Code	{ return ebeDivide ( ( T < T > ) / ) ; }
Distance : 4

58
Tree	{ return getCumPct ( ( T ) v . getLastChild ( v ) ) ; }
Code	{ return getCumPct ( ( T ) v . getLastChild ( v ) ) ; }
Distance : 8

59
Tree	{ return getCumPct ( JSErrorSubject , v . valueOf () , options.removeUnusedPrototypePropertiesInExterns ) ; }
Code	{ return getCumPct ( JSErrorSubject , v . valueOf () , options.removeUnusedPrototypePropertiesInExterns ) ; }
Distance : 9

60
Tree	{ return cloneReset ( ( T ) v . valueOf ( v , ( Object [] ) null ) ) ; }
Code	{ return cloneReset ( ( T ) v . valueOf ( v , ( Object [] ) null ) ) ; }
Distance : 14

61
Tree	{ return getCumPct ( ( ( Comparable ) v . getLastChild () ) . data ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getLastChild () ) . data ) ; }
Distance : 9

62
Tree	{ return iZoneInfoKeys . ebeDivide ( sample1 , iValues.length , v , Verification.EXPLICIT ) ; }
Code	{ return iZoneInfoKeys . ebeDivide ( sample1 , iValues.length , v , Verification.EXPLICIT ) ; }
Distance : 9

63
Tree	{ return getCumPct ( JSErrorSubject , v . getSimplifiedName () , PropertyCollapseLevel.NONE ) ; }
Code	{ return getCumPct ( JSErrorSubject , v . getSimplifiedName () , PropertyCollapseLevel.NONE ) ; }
Distance : 9

64
Tree	{ return cloneReset ( sample1 ) . < v > anyList () ; }
Code	{ return cloneReset ( sample1 ) . < v > anyList () ; }
Distance : 8

65
Tree	{ return mockitoCore . ebeDivide ( sample1 , iValues.length , v , Verification.EXPLICIT ) ; }
Code	{ return mockitoCore . ebeDivide ( sample1 , iValues.length , v , Verification.EXPLICIT ) ; }
Distance : 9

66
Tree	{ return clazz . getCumPct ( sample1 ) . < v > anyList () ; }
Code	{ return clazz . getCumPct ( sample1 ) . < v > anyList () ; }
Distance : 10

67
Tree	{ return getCumPct ( ( ( T ) v . valueOf ( v , ( Object [] ) null ) ) . data ) ; }
Code	{ return getCumPct ( ( ( T ) v . valueOf ( v , ( Object [] ) null ) ) . data ) ; }
Distance : 18

68
Tree	{ return iZoneInfoKeys ( false , false ) ; }
Code	{ return iZoneInfoKeys ( false , false ) ; }
Distance : 7

69
Tree	{ return getCumPct ( sample1 ) . < v > emptyList () ; }
Code	{ return getCumPct ( sample1 ) . < v > emptyList () ; }
Distance : 8

70
Tree	{ return getCumPct ( ( ( T ) v . getDimension () ) . data ) ; }
Code	{ return getCumPct ( ( ( T ) v . getDimension () ) . data ) ; }
Distance : 10

71
Tree	{ return iZoneInfoKeys ( ! , false ) ; }
Code	{ return iZoneInfoKeys ( ! , false ) ; }
Distance : 7

72
Tree	{ return getCumPct ( ( Comparable ) v . getDimension ( v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getDimension ( v ) ) ; }
Distance : 7

73
Tree	{ return getCumPct ( sample1 , v . valueOf () , options.removeUnusedPrototypePropertiesInExterns ) ; }
Code	{ return getCumPct ( sample1 , v . valueOf () , options.removeUnusedPrototypePropertiesInExterns ) ; }
Distance : 9

74
Tree	{ return getCumPct ( ( ( Comparable ) v . valueOf ( NUMBER_CONSTANT ) ) . data ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . valueOf ( NUMBER_CONSTANT ) ) . data ) ; }
Distance : 11

75
Tree	{ return mockitoCore . ebeDivide ( sample1 ) . < extends > anyList () ; }
Code	{ return mockitoCore . ebeDivide ( sample1 ) . < extends > anyList () ; }
Distance : 10

76
Tree	{ return cloneReset ( ( ( Comparable ) v . valueOf () ) . data ) ; }
Code	{ return cloneReset ( ( ( Comparable ) v . valueOf () ) . data ) ; }
Distance : 9

77
Tree	{ return mockitoCore . ebeDivide ( sample1 ) . < & > anyList () ; }
Code	{ return mockitoCore . ebeDivide ( sample1 ) . < & > anyList () ; }
Distance : 10

78
Tree	{ return cloneReset ( ( T ) v . valueOf ( NUMBER_CONSTANT ) ) ; }
Code	{ return cloneReset ( ( T ) v . valueOf ( NUMBER_CONSTANT ) ) ; }
Distance : 9

79
Tree	{ return cloneReset ( ( T ) floor ( v ) ) ; }
Code	{ return cloneReset ( ( T ) floor ( v ) ) ; }
Distance : 6

80
Tree	{ return getCumPct ( ( ( Comparable ) v . getDimension ( v ) ) . data ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getDimension ( v ) ) . data ) ; }
Distance : 11

81
Tree	{ return getCumPct ( ( T ) v . getLastChild () ) ; }
Code	{ return getCumPct ( ( T ) v . getLastChild () ) ; }
Distance : 7

82
Tree	{ return getCumPct ( ( T ) v . getDimension ( v , ( Object [] ) null ) ) ; }
Code	{ return getCumPct ( ( T ) v . getDimension ( v , ( Object [] ) null ) ) ; }
Distance : 14

83
Tree	{ return getCumPct ( ( ( T ) v . getLastChild () ) . data ) ; }
Code	{ return getCumPct ( ( ( T ) v . getLastChild () ) . data ) ; }
Distance : 10

84
Tree	{ return getCumPct ( ( ( Comparable ) v . getDimension ( v , ( Object [] ) null ) ) . data ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getDimension ( v , ( Object [] ) null ) ) . data ) ; }
Distance : 17

85
Tree	{ return mockitoCore . ebeDivide ( sample1 ) . < & > getValue () ; }
Code	{ return mockitoCore . ebeDivide ( sample1 ) . < & > getValue () ; }
Distance : 10

86
Tree	{ return getCumPct ( sample1 ) . < v > anyList () ; }
Code	{ return getCumPct ( sample1 ) . < v > anyList () ; }
Distance : 8

87
Tree	{ return getCumPct ( ( T ) v . getDimension ( NUMBER_CONSTANT ) ) ; }
Code	{ return getCumPct ( ( T ) v . getDimension ( NUMBER_CONSTANT ) ) ; }
Distance : 9

88
Tree	{ return ebeDivide ( ( T < T > ) / ) ; }
Code	{ return ebeDivide ( ( T < T > ) / ) ; }
Distance : 4

89
Tree	{ return mockitoCore . ebeDivide ( ( ( nSteps ) v ) . data ) ; }
Code	{ return mockitoCore . ebeDivide ( ( ( nSteps ) v ) . data ) ; }
Distance : 9

90
Tree	{ return clazz . ebeDivide ( sample1 ) . < v > anyList () ; }
Code	{ return clazz . ebeDivide ( sample1 ) . < v > anyList () ; }
Distance : 10

91
Tree	{ return clazz . getCumPct ( sample1 , iValues.length , v , Verification.EXPLICIT ) ; }
Code	{ return clazz . getCumPct ( sample1 , iValues.length , v , Verification.EXPLICIT ) ; }
Distance : 9

92
Tree	{ return clazz . ebeDivide ( sample1 ) . < & > anyList () ; }
Code	{ return clazz . ebeDivide ( sample1 ) . < & > anyList () ; }
Distance : 10

93
Tree	{ return getCumPct ( ( Comparable ) v . valueOf ( NUMBER_CONSTANT ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . valueOf ( NUMBER_CONSTANT ) ) ; }
Distance : 8

94
Tree	{ return getCumPct ( ( ( Comparable ) v . valueOf () ) . Locale ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . valueOf () ) . Locale ) ; }
Distance : 9

95
Tree	{ return mockitoCore . ebeDivide ( sample1 ) . < / > anyList () ; }
Code	{ return mockitoCore . ebeDivide ( sample1 ) . < / > anyList () ; }
Distance : 10

96
Tree	{ return getCumPct ( ( ( Comparable ) v . valueOf () ) . data ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . valueOf () ) . data ) ; }
Distance : 9

97
Tree	{ return getCumPct ( ( T ) v . getDimension () ) ; }
Code	{ return getCumPct ( ( T ) v . getDimension () ) ; }
Distance : 7

98
Tree	{ return getCumPct ( sample1 ) . < v > getValue () ; }
Code	{ return getCumPct ( sample1 ) . < v > getValue () ; }
Distance : 8

99
Tree	{ return getCumPct ( ( Comparable ) v . getLastChild ( null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getLastChild ( null ) ) ; }
Distance : 8

100
Tree	{ return mockitoCore . getCumPct ( sample1 ) . < & > anyList () ; }
Code	{ return mockitoCore . getCumPct ( sample1 ) . < & > anyList () ; }
Distance : 10

101
Tree	{ return mockitoCore . ebeDivide ( ( ( T ) v ) . data ) ; }
Code	{ return mockitoCore . ebeDivide ( ( ( T ) v ) . data ) ; }
Distance : 9

102
Tree	{ return getCumPct ( ( ( Comparable ) v . getParentNode ( v ) ) . data ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getParentNode ( v ) ) . data ) ; }
Distance : 11

103
Tree	{ return getCumPct ( ( ( T ) v . valueOf ( NUMBER_CONSTANT ) ) . data ) ; }
Code	{ return getCumPct ( ( ( T ) v . valueOf ( NUMBER_CONSTANT ) ) . data ) ; }
Distance : 12

104
Tree	{ return ( ( Comparable ) v . getDimension () ) . data . clazz () ; }
Code	{ return ( ( Comparable ) v . getDimension () ) . data . clazz () ; }
Distance : 11

105
Tree	{ return clazz . ebeDivide ( sample1 ) . returnZero ( this ) ; }
Code	{ return clazz . ebeDivide ( sample1 ) . returnZero ( this ) ; }
Distance : 9

106
Tree	{ return getCumPct ( ( T ) v . getDimension ( v ) ) ; }
Code	{ return getCumPct ( ( T ) v . getDimension ( v ) ) ; }
Distance : 8

107
Tree	{ return getCumPct ( NodeSubject ) . < v > anyList () ; }
Code	{ return getCumPct ( NodeSubject ) . < v > anyList () ; }
Distance : 8

108
Tree	{ return mockitoCore . getCumPct ( sample1 ) . < v > anyList () ; }
Code	{ return mockitoCore . getCumPct ( sample1 ) . < v > anyList () ; }
Distance : 10

109
Tree	{ return getCumPct ( ( ( nSteps ) v ) . data ) ; }
Code	{ return getCumPct ( ( ( nSteps ) v ) . data ) ; }
Distance : 7

110
Tree	{ return getCumPct ( ( T ) floor ( v ) ) ; }
Code	{ return getCumPct ( ( T ) floor ( v ) ) ; }
Distance : 6

111
Tree	{ return getCumPct ( ( T ) v . getLastChild ( null ) ) ; }
Code	{ return getCumPct ( ( T ) v . getLastChild ( null ) ) ; }
Distance : 9

112
Tree	{ return iZoneInfoKeys . getCumPct ( sample1 ) . returnZero ( this ) ; }
Code	{ return iZoneInfoKeys . getCumPct ( sample1 ) . returnZero ( this ) ; }
Distance : 9

113
Tree	{ return ( ( T ) v . valueOf () ) . data . invocationListeners () ; }
Code	{ return ( ( T ) v . valueOf () ) . data . invocationListeners () ; }
Distance : 12

114
Tree	{ return isUnionType ( ( T < T > ) / ) ; }
Code	{ return isUnionType ( ( T < T > ) / ) ; }
Distance : 4

115
Tree	{ return getCumPct ( ( T ) v . getDimension ( null ) ) ; }
Code	{ return getCumPct ( ( T ) v . getDimension ( null ) ) ; }
Distance : 9

116
Tree	{ return mockitoCore . ebeDivide ( sample1 , Any.ANY , v , Verification.EXPLICIT ) ; }
Code	{ return mockitoCore . ebeDivide ( sample1 , Any.ANY , v , Verification.EXPLICIT ) ; }
Distance : 9

117
Tree	{ return mockitoCore . ebeDivide ( sample1 ) . < tolerance > anyList () ; }
Code	{ return mockitoCore . ebeDivide ( sample1 ) . < tolerance > anyList () ; }
Distance : 10

118
Tree	{ return getCumPct ( ( T ) v . getLastChild ( v , ( Object [] ) null ) ) ; }
Code	{ return getCumPct ( ( T ) v . getLastChild ( v , ( Object [] ) null ) ) ; }
Distance : 14

119
Tree	{ return getCumPct ( sample1 , v . valueOf () , PropertyCollapseLevel.NONE ) ; }
Code	{ return getCumPct ( sample1 , v . valueOf () , PropertyCollapseLevel.NONE ) ; }
Distance : 9

120
Tree	{ return getCumPct ( ( T ) v . valueOf () ) ; }
Code	{ return getCumPct ( ( T ) v . valueOf () ) ; }
Distance : 7

121
Tree	{ return cloneReset ( ( T ) getDimension ( v ) ) ; }
Code	{ return cloneReset ( ( T ) getDimension ( v ) ) ; }
Distance : 6

122
Tree	{ return mockitoCore . getCumPct ( ( ( MOCKING_PROGRESS ) v ) . data ) ; }
Code	{ return mockitoCore . getCumPct ( ( ( MOCKING_PROGRESS ) v ) . data ) ; }
Distance : 9

123
Tree	{ return iZoneInfoKeys . ebeDivide ( sample1 ) . < & > anyList () ; }
Code	{ return iZoneInfoKeys . ebeDivide ( sample1 ) . < & > anyList () ; }
Distance : 10

124
Tree	{ return getCumPct ( ( T ) v . valueOf ( NUMBER_CONSTANT ) ) ; }
Code	{ return getCumPct ( ( T ) v . valueOf ( NUMBER_CONSTANT ) ) ; }
Distance : 9

125
Tree	{ return cloneReset ( ( T ) v . valueOf ( v ) ) ; }
Code	{ return cloneReset ( ( T ) v . valueOf ( v ) ) ; }
Distance : 8

126
Tree	{ return getCumPct ( ( ( T ) v . valueOf ( v ) ) . data ) ; }
Code	{ return getCumPct ( ( ( T ) v . valueOf ( v ) ) . data ) ; }
Distance : 12

127
Tree	{ return mockitoCore . anovaFValue ( sample1 ) . returnZero ( this ) ; }
Code	{ return mockitoCore . anovaFValue ( sample1 ) . returnZero ( this ) ; }
Distance : 9

128
Tree	{ return getCumPct ( ( ( Comparable ) v . getDimension ( NUMBER_CONSTANT ) ) . data ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getDimension ( NUMBER_CONSTANT ) ) . data ) ; }
Distance : 11

129
Tree	{ return getCumPct ( ( Comparable ) v . getLastChild () ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getLastChild () ) ; }
Distance : 6

130
Tree	{ return getCumPct ( ( Comparable ) v . valueOf ( v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . valueOf ( v ) ) ; }
Distance : 7

131
Tree	{ return getCumPct ( ( T < T > ) <= ) ; }
Code	{ return getCumPct ( ( T < T > ) <= ) ; }
Distance : 4

132
Tree	{ return iZoneInfoKeys . ebeDivide ( sample1 ) . < v > anyList () ; }
Code	{ return iZoneInfoKeys . ebeDivide ( sample1 ) . < v > anyList () ; }
Distance : 10

133
Tree	{ return mockitoCore . ebeDivide ( sample1 ) . < ? > anyList () ; }
Code	{ return mockitoCore . ebeDivide ( sample1 ) . < ? > anyList () ; }
Distance : 10

134
Tree	{ return getCumPct ( sample1 , v . getSimplifiedName () , options.removeUnusedPrototypePropertiesInExterns ) ; }
Code	{ return getCumPct ( sample1 , v . getSimplifiedName () , options.removeUnusedPrototypePropertiesInExterns ) ; }
Distance : 9

135
Tree	{ return getCumPct ( ( Comparable ) v . valueOf ( null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . valueOf ( null ) ) ; }
Distance : 8

136
Tree	{ return cloneReset ( ( T ) v . valueOf () ) ; }
Code	{ return cloneReset ( ( T ) v . valueOf () ) ; }
Distance : 7

137
Tree	{ return getCumPct ( ( Comparable ) v . getLastChild ( v , ( Object [] ) null ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getLastChild ( v , ( Object [] ) null ) ) ; }
Distance : 13

138
Tree	{ return getCumPct ( ( Comparable ) v . getDimension ( NUMBER_CONSTANT ) ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getDimension ( NUMBER_CONSTANT ) ) ; }
Distance : 8

139
Tree	{ return iZoneInfoKeys . getCumPct ( sample1 ) . < v > anyList () ; }
Code	{ return iZoneInfoKeys . getCumPct ( sample1 ) . < v > anyList () ; }
Distance : 10

140
Tree	{ return clazz . ebeDivide ( sample1 , iValues.length , v , Verification.EXPLICIT ) ; }
Code	{ return clazz . ebeDivide ( sample1 , iValues.length , v , Verification.EXPLICIT ) ; }
Distance : 9

141
Tree	{ return getCumPct ( ( ( T ) v . getLastChild ( v ) ) . data ) ; }
Code	{ return getCumPct ( ( ( T ) v . getLastChild ( v ) ) . data ) ; }
Distance : 12

142
Tree	{ return cloneReset ( ( T ) v . getDimension ( v , ( Object [] ) null ) ) ; }
Code	{ return cloneReset ( ( T ) v . getDimension ( v , ( Object [] ) null ) ) ; }
Distance : 14

143
Tree	{ return mockitoCore . getTypeParameters ( sample1 ) . returnZero ( this ) ; }
Code	{ return mockitoCore . getTypeParameters ( sample1 ) . returnZero ( this ) ; }
Distance : 9

144
Tree	{ return ( ( T ) v . getLastChild () ) . data . clazz () ; }
Code	{ return ( ( T ) v . getLastChild () ) . data . clazz () ; }
Distance : 12

145
Tree	{ return getCumPct ( JSErrorSubject , v . getSimplifiedName () , options.removeUnusedPrototypePropertiesInExterns ) ; }
Code	{ return getCumPct ( JSErrorSubject , v . getSimplifiedName () , options.removeUnusedPrototypePropertiesInExterns ) ; }
Distance : 9

146
Tree	{ return mockitoCore . getCumPct ( sample1 ) . < tolerance > anyList () ; }
Code	{ return mockitoCore . getCumPct ( sample1 ) . < tolerance > anyList () ; }
Distance : 10

147
Tree	{ return getCumPct ( sample1 , v . getSimplifiedName () , dest.n ) ; }
Code	{ return getCumPct ( sample1 , v . getSimplifiedName () , dest.n ) ; }
Distance : 9

148
Tree	{ return clazz . ebeDivide ( ( ( nSteps ) v ) . data ) ; }
Code	{ return clazz . ebeDivide ( ( ( nSteps ) v ) . data ) ; }
Distance : 9

149
Tree	{ return getCumPct ( ( Comparable ) floor ( v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) floor ( v ) ) ; }
Distance : 5

150
Tree	{ return mockitoCore . getCumPct ( sample1 , iValues.length , v , Verification.EXPLICIT ) ; }
Code	{ return mockitoCore . getCumPct ( sample1 , iValues.length , v , Verification.EXPLICIT ) ; }
Distance : 9

151
Tree	{ return clazz . getCumPct ( sample1 ) . returnZero ( this ) ; }
Code	{ return clazz . getCumPct ( sample1 ) . returnZero ( this ) ; }
Distance : 9

152
Tree	{ return getCumPct ( ( Comparable ) v . valueOf () ) ; }
Code	{ return getCumPct ( ( Comparable ) v . valueOf () ) ; }
Distance : 6

153
Tree	{ return cloneReset ( ( ( Comparable ) v . valueOf ( v , ( Object [] ) null ) ) . data ) ; }
Code	{ return cloneReset ( ( ( Comparable ) v . valueOf ( v , ( Object [] ) null ) ) . data ) ; }
Distance : 17

154
Tree	{ return cloneReset ( ( T ) v . valueOf ( null ) ) ; }
Code	{ return cloneReset ( ( T ) v . valueOf ( null ) ) ; }
Distance : 9

155
Tree	{ return ( ( Comparable ) v . valueOf () ) . data . invocationListeners () ; }
Code	{ return ( ( Comparable ) v . valueOf () ) . data . invocationListeners () ; }
Distance : 11

156
Tree	{ return getCumPct ( ( Comparable ) floor ( ( Object ) v , v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) floor ( ( Object ) v , v ) ) ; }
Distance : 9

157
Tree	{ return getCumPct ( ( T ) getField ( ( Object ) v , v ) ) ; }
Code	{ return getCumPct ( ( T ) getField ( ( Object ) v , v ) ) ; }
Distance : 10

158
Tree	{ return getCumPct ( ( T < ? super v > ) <= ) ; }
Code	{ return getCumPct ( ( T < ? super v > ) <= ) ; }
Distance : 6

159
Tree	{ return cloneReset ( ( T ) v . getDimension () ) ; }
Code	{ return cloneReset ( ( T ) v . getDimension () ) ; }
Distance : 7

160
Tree	{ return getCumPct ( ( Comparable ) getDimension ( ( Object ) v , v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getDimension ( ( Object ) v , v ) ) ; }
Distance : 9

161
Tree	{ return getCumPct ( ( Comparable < ? super v > ) <= ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) <= ) ; }
Distance : 5

162
Tree	{ return getCumPct ( ( ( Comparable ) v . getParentNode ( v , ( Object [] ) null ) ) . data ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getParentNode ( v , ( Object [] ) null ) ) . data ) ; }
Distance : 17

163
Tree	{ return cloneReset ( ( T < ? super v > ) <= ) ; }
Code	{ return cloneReset ( ( T < ? super v > ) <= ) ; }
Distance : 6

164
Tree	{ return cloneReset ( ( T ) floor ( ( Object ) v , v ) ) ; }
Code	{ return cloneReset ( ( T ) floor ( ( Object ) v , v ) ) ; }
Distance : 10

165
Tree	{ return cloneReset ( ( T ) v . getDimension ( v ) ) ; }
Code	{ return cloneReset ( ( T ) v . getDimension ( v ) ) ; }
Distance : 8

166
Tree	{ return getCumPct ( ( T < ? super v > ) / ) ; }
Code	{ return getCumPct ( ( T < ? super v > ) / ) ; }
Distance : 6

167
Tree	{ return getCumPct ( ( Comparable ) v . getDimension () ) ; }
Code	{ return getCumPct ( ( Comparable ) v . getDimension () ) ; }
Distance : 6

168
Tree	{ return getCumPct ( ( ( Comparable ) getDimension ( v ) ) . data ) ; }
Code	{ return getCumPct ( ( ( Comparable ) getDimension ( v ) ) . data ) ; }
Distance : 9

169
Tree	{ return cloneReset ( ( Comparable < ? super v > ) <= ) ; }
Code	{ return cloneReset ( ( Comparable < ? super v > ) <= ) ; }
Distance : 5

170
Tree	{ return getCumPct ( ( T ) getField ( v ) ) ; }
Code	{ return getCumPct ( ( T ) getField ( v ) ) ; }
Distance : 6

171
Tree	{ return getCumPct ( ( Comparable < ? super v > ) / ) ; }
Code	{ return getCumPct ( ( Comparable < ? super v > ) / ) ; }
Distance : 5

172
Tree	{ return getCumPct ( ( T ) floor ( ( Object ) v , v ) ) ; }
Code	{ return getCumPct ( ( T ) floor ( ( Object ) v , v ) ) ; }
Distance : 10

173
Tree	{ return cloneReset ( ( T < ? super v > ) / ) ; }
Code	{ return cloneReset ( ( T < ? super v > ) / ) ; }
Distance : 6

174
Tree	{ return ( ( T ) v . valueOf () ) . Locale . clazz () ; }
Code	{ return ( ( T ) v . valueOf () ) . Locale . clazz () ; }
Distance : 12

175
Tree	{ return getCumPct ( ( ( T ) v . getLastChild ( NUMBER_CONSTANT ) ) . data ) ; }
Code	{ return getCumPct ( ( ( T ) v . getLastChild ( NUMBER_CONSTANT ) ) . data ) ; }
Distance : 12

176
Tree	{ return cloneReset ( ( ( Comparable ) v . valueOf ( NUMBER_CONSTANT ) ) . data ) ; }
Code	{ return cloneReset ( ( ( Comparable ) v . valueOf ( NUMBER_CONSTANT ) ) . data ) ; }
Distance : 11

177
Tree	{ return isUnionType ( ( T < ? super v > ) <= ) ; }
Code	{ return isUnionType ( ( T < ? super v > ) <= ) ; }
Distance : 6

178
Tree	{ return getCumPct ( ( Comparable ) getDimension ( v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getDimension ( v ) ) ; }
Distance : 5

179
Tree	{ return cloneReset ( ( T ) getDimension ( ( Object ) v , v ) ) ; }
Code	{ return cloneReset ( ( T ) getDimension ( ( Object ) v , v ) ) ; }
Distance : 10

180
Tree	{ return getCumPct ( ( T ) getDimension ( v ) ) ; }
Code	{ return getCumPct ( ( T ) getDimension ( v ) ) ; }
Distance : 6

181
Tree	{ return getCumPct ( ( Comparable ) getField ( ( Object ) v , v ) ) ; }
Code	{ return getCumPct ( ( Comparable ) getField ( ( Object ) v , v ) ) ; }
Distance : 9

182
Tree	{ return cloneReset ( ( ( Comparable ) v . valueOf ( v ) ) . data ) ; }
Code	{ return cloneReset ( ( ( Comparable ) v . valueOf ( v ) ) . data ) ; }
Distance : 11

183
Tree	{ return getCumPct ( ( ( T ) getDimension ( v ) ) . data ) ; }
Code	{ return getCumPct ( ( ( T ) getDimension ( v ) ) . data ) ; }
Distance : 10

184
Tree	{ return mockitoCore . ebeDivide ( ( ( Object ) v ) . data ) ; }
Code	{ return mockitoCore . ebeDivide ( ( ( Object ) v ) . data ) ; }
Distance : 9

185
Tree	{ return cloneReset ( ( ( Comparable ) getDimension ( v ) ) . data ) ; }
Code	{ return cloneReset ( ( ( Comparable ) getDimension ( v ) ) . data ) ; }
Distance : 9

186
Tree	{ return mockitoCore . getCumPct ( ( ( nSteps ) v ) . data ) ; }
Code	{ return mockitoCore . getCumPct ( ( ( nSteps ) v ) . data ) ; }
Distance : 9

187
Tree	{ return getCumPct ( ( ( T ) v . getDimension ( v , ( Object [] ) null ) ) . data ) ; }
Code	{ return getCumPct ( ( ( T ) v . getDimension ( v , ( Object [] ) null ) ) . data ) ; }
Distance : 18

188
Tree	{ return cloneReset ( ( ( T ) getDimension ( v ) ) . data ) ; }
Code	{ return cloneReset ( ( ( T ) getDimension ( v ) ) . data ) ; }
Distance : 10

189
Tree	{ return cloneReset ( ( T ) v . getDimension ( NUMBER_CONSTANT ) ) ; }
Code	{ return cloneReset ( ( T ) v . getDimension ( NUMBER_CONSTANT ) ) ; }
Distance : 9

190
Tree	{ return getCumPct ( ( T ) getDimension ( ( Object ) v , v ) ) ; }
Code	{ return getCumPct ( ( T ) getDimension ( ( Object ) v , v ) ) ; }
Distance : 10

191
Tree	{ return cloneReset ( ( T ) v . getDimension ( null ) ) ; }
Code	{ return cloneReset ( ( T ) v . getDimension ( null ) ) ; }
Distance : 9

192
Tree	{ return mockitoCore . ebeDivide ( ( ( InternalMockHandler ) v ) . data ) ; }
Code	{ return mockitoCore . ebeDivide ( ( ( InternalMockHandler ) v ) . data ) ; }
Distance : 9

193
Tree	{ return getCumPct ( ( ( Comparable ) v . getParentNode ( NUMBER_CONSTANT ) ) . data ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getParentNode ( NUMBER_CONSTANT ) ) . data ) ; }
Distance : 11

194
Tree	{ return getCumPct ( ( ( Comparable ) floor ( v ) ) . data ) ; }
Code	{ return getCumPct ( ( ( Comparable ) floor ( v ) ) . data ) ; }
Distance : 9

195
Tree	{ return getCumPct ( ( ( Comparable ) v . getLastChild ( v , ( Object [] ) null ) ) . data ) ; }
Code	{ return getCumPct ( ( ( Comparable ) v . getLastChild ( v , ( Object [] ) null ) ) . data ) ; }
Distance : 17

196
Tree	{ return getCumPct ( ( ( T ) floor ( v ) ) . data ) ; }
Code	{ return getCumPct ( ( ( T ) floor ( v ) ) . data ) ; }
Distance : 10

197
Tree	{ return getCumPct ( ( ( T ) v . getLastChild ( v , ( Object [] ) null ) ) . data ) ; }
Code	{ return getCumPct ( ( ( T ) v . getLastChild ( v , ( Object [] ) null ) ) . data ) ; }
Distance : 18

198
Tree	{ return getCumPct ( ( ( InternalMockHandler ) getDimension ( v ) ) . data ) ; }
Code	{ return getCumPct ( ( ( InternalMockHandler ) getDimension ( v ) ) . data ) ; }
Distance : 10

199
Tree	{ return getCumPct ( ( ( Comparable ) getField ( v ) ) . data ) ; }
Code	{ return getCumPct ( ( ( Comparable ) getField ( v ) ) . data ) ; }
Distance : 9

========================================================================


========================================================================
Example Number: 57
Parent Code is: 
{ return solve ( min , max ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return solve ( f , min , max ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=solve}) (214{val=(}) (800{val=min}) (234{val=,}) (800{val=max}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=solve}) (214{val=(}) (800{val=f}) (234{val=,}) (800{val=min}) (234{val=,}) (800{val=max}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/70/parent/src_main_java_org_apache_commons_math_analysis_solvers_BisectionSolver.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return solve ( min , max ) ; }
Code	{ return solve ( min , max ) ; }
Distance : 2

1
Tree	{ return solve ( min , null ) ; }
Code	{ return solve ( min , null ) ; }
Distance : 3

2
Tree	{ return solve ( min . max () , max ) ; }
Code	{ return solve ( min . max () , max ) ; }
Distance : 4

3
Tree	{ return solve ( style , max ) ; }
Code	{ return solve ( style , max ) ; }
Distance : 3

4
Tree	{ return solve ( min . min ( min ) ) ; }
Code	{ return solve ( min . min ( min ) ) ; }
Distance : 5

5
Tree	{ return solve ( min . max ( index ) , max ) ; }
Code	{ return solve ( min . max ( index ) , max ) ; }
Distance : 6

6
Tree	{ return solve ( min . max () , zero ) ; }
Code	{ return solve ( min . max () , zero ) ; }
Distance : 5

7
Tree	{ return solve ( getY () , getY ( direction ) ) ; }
Code	{ return solve ( getY () , getY ( direction ) ) ; }
Distance : 6

8
Tree	{ return solve ( numberOfTrials , max ) ; }
Code	{ return solve ( numberOfTrials , max ) ; }
Distance : 3

9
Tree	{ return solve ( min , max - NUMBER_CONSTANT ) ; }
Code	{ return solve ( min , max - NUMBER_CONSTANT ) ; }
Distance : 4

10
Tree	{ return solve ( min . max ( param ) , max ) ; }
Code	{ return solve ( min . max ( param ) , max ) ; }
Distance : 6

11
Tree	{ return solver . solve ( this , min ) ; }
Code	{ return solver . solve ( this , min ) ; }
Distance : 5

12
Tree	{ return ( ( numberOfTrials ) this ) . solve ( min , max ) ; }
Code	{ return ( ( numberOfTrials ) this ) . solve ( min , max ) ; }
Distance : 8

13
Tree	{ return solver . solve () . getParser ( min , max ) ; }
Code	{ return solver . solve () . getParser ( min , max ) ; }
Distance : 6

14
Tree	{ return solve ( style , max , max ) ; }
Code	{ return solve ( style , max , max ) ; }
Distance : 2

15
Tree	{ return solve ( DEFAULT_MAX_EVALUATIONS , null ) ; }
Code	{ return solve ( DEFAULT_MAX_EVALUATIONS , null ) ; }
Distance : 4

16
Tree	{ return solve ( style , null ) ; }
Code	{ return solve ( style , null ) ; }
Distance : 4

17
Tree	{ return solve ( style , max , false ) ; }
Code	{ return solve ( style , max , false ) ; }
Distance : 3

18
Tree	{ return solver . solve ( style ) ; }
Code	{ return solver . solve ( style ) ; }
Distance : 7

19
Tree	{ return solve ( min . max ( clazz ) ) ; }
Code	{ return solve ( min . max ( clazz ) ) ; }
Distance : 6

20
Tree	{ return solve ( min . max ( direction ) , max ) ; }
Code	{ return solve ( min . max ( direction ) , max ) ; }
Distance : 6

21
Tree	{ return solve ( style , max - NUMBER_CONSTANT ) ; }
Code	{ return solve ( style , max - NUMBER_CONSTANT ) ; }
Distance : 4

22
Tree	{ return solve ( numberOfTrials , max , false ) ; }
Code	{ return solve ( numberOfTrials , max , false ) ; }
Distance : 3

23
Tree	{ return solve ( min , max , false ) ; }
Code	{ return solve ( min , max , false ) ; }
Distance : 3

24
Tree	{ return solve ( min . max ( direction ) ) ; }
Code	{ return solve ( min . max ( direction ) ) ; }
Distance : 6

25
Tree	{ return solve ( Coordinates3D , null ) ; }
Code	{ return solve ( Coordinates3D , null ) ; }
Distance : 4

26
Tree	{ return solve ( min . min () , max ) ; }
Code	{ return solve ( min . min () , max ) ; }
Distance : 3

27
Tree	{ return solve ( min . max ( path ) ) ; }
Code	{ return solve ( min . max ( path ) ) ; }
Distance : 6

28
Tree	{ return solve ( min . max ( style ) ) ; }
Code	{ return solve ( min . max ( style ) ) ; }
Distance : 6

29
Tree	{ return solve ( min , null , zero ) ; }
Code	{ return solve ( min , null , zero ) ; }
Distance : 3

30
Tree	{ return solve ( min , max , max ) ; }
Code	{ return solve ( min , max , max ) ; }
Distance : 2

31
Tree	{ return solve ( min . min ( min ) , max ) ; }
Code	{ return solve ( min . min ( min ) , max ) ; }
Distance : 5

32
Tree	{ return solve ( min . max () , direction ) ; }
Code	{ return solve ( min . max () , direction ) ; }
Distance : 5

33
Tree	{ return solver . solve () . toFeatureSet ( min , max ) ; }
Code	{ return solver . solve () . toFeatureSet ( min , max ) ; }
Distance : 6

34
Tree	{ return solve ( min . safeMultiply () , max ) ; }
Code	{ return solve ( min . safeMultiply () , max ) ; }
Distance : 4

35
Tree	{ return solve ( min , max , returnValues , null ) ; }
Code	{ return solve ( min , max , returnValues , null ) ; }
Distance : 5

36
Tree	{ return solve ( numberOfTrials , null ) ; }
Code	{ return solve ( numberOfTrials , null ) ; }
Distance : 4

37
Tree	{ return solver . solve ( min ) ; }
Code	{ return solver . solve ( min ) ; }
Distance : 6

38
Tree	{ return solve ( min , max , max , false ) ; }
Code	{ return solve ( min , max , max , false ) ; }
Distance : 4

39
Tree	{ return solver . solve ( min , max ) ; }
Code	{ return solver . solve ( min , max ) ; }
Distance : 4

40
Tree	{ return solver . solve ( min . min () , max ) ; }
Code	{ return solver . solve ( min . min () , max ) ; }
Distance : 5

41
Tree	{ return solve ( numberOfTrials , max - NUMBER_CONSTANT ) ; }
Code	{ return solve ( numberOfTrials , max - NUMBER_CONSTANT ) ; }
Distance : 4

42
Tree	{ return solve ( min . max ( min ) , max ) ; }
Code	{ return solve ( min . max ( min ) , max ) ; }
Distance : 5

43
Tree	{ return x.length . solve ( min , max , max ) ; }
Code	{ return x.length . solve ( min , max , max ) ; }
Distance : 4

44
Tree	{ return solve ( Coordinates3D , max ) ; }
Code	{ return solve ( Coordinates3D , max ) ; }
Distance : 3

45
Tree	{ return solver . solve ( this , style ) ; }
Code	{ return solver . solve ( this , style ) ; }
Distance : 6

46
Tree	{ return f . solve ( style ) ; }
Code	{ return f . solve ( style ) ; }
Distance : 6

47
Tree	{ return ( ( min ) this ) . solve ( numberOfTrials , max ) ; }
Code	{ return ( ( min ) this ) . solve ( numberOfTrials , max ) ; }
Distance : 9

48
Tree	{ return ( ( min ) this ) . solve ( min , max ) ; }
Code	{ return ( ( min ) this ) . solve ( min , max ) ; }
Distance : 8

49
Tree	{ return solver . solve ( this , numberOfTrials ) ; }
Code	{ return solver . solve ( this , numberOfTrials ) ; }
Distance : 6

50
Tree	{ return solve ( min , values , max ) ; }
Code	{ return solve ( min , values , max ) ; }
Distance : 2

51
Tree	{ return solver . solve ( min , plane.w ) ; }
Code	{ return solver . solve ( min , plane.w ) ; }
Distance : 5

52
Tree	{ return solver . solve ( min . getTimeZone () , max ) ; }
Code	{ return solver . solve ( min . getTimeZone () , max ) ; }
Distance : 6

53
Tree	{ return Coordinates3D . solve ( style , null , max ) ; }
Code	{ return Coordinates3D . solve ( style , null , max ) ; }
Distance : 4

54
Tree	{ return ( ( min ) this ) . getSolver ( min , max ) ; }
Code	{ return ( ( min ) this ) . getSolver ( min , max ) ; }
Distance : 8

55
Tree	{ return solve ( min , null , max ) ; }
Code	{ return solve ( min , null , max ) ; }
Distance : 2

56
Tree	{ return solve ( min . max ( path ) , max ) ; }
Code	{ return solve ( min . max ( path ) , max ) ; }
Distance : 6

57
Tree	{ return solve ( min . max ( min ) ) ; }
Code	{ return solve ( min . max ( min ) ) ; }
Distance : 6

58
Tree	{ return solve ( numberOfTrials , max , max , false ) ; }
Code	{ return solve ( numberOfTrials , max , max , false ) ; }
Distance : 4

59
Tree	{ return solve ( min , variance ) ; }
Code	{ return solve ( min , variance ) ; }
Distance : 3

60
Tree	{ return solve ( style . max () , max ) ; }
Code	{ return solve ( style . max () , max ) ; }
Distance : 4

61
Tree	{ return x.length . solve ( min ) ; }
Code	{ return x.length . solve ( min ) ; }
Distance : 6

62
Tree	{ return solve ( getY () , getRank ( direction ) ) ; }
Code	{ return solve ( getY () , getRank ( direction ) ) ; }
Distance : 6

63
Tree	{ return solve ( min , values ) ; }
Code	{ return solve ( min , values ) ; }
Distance : 3

64
Tree	{ return solve ( min , max , max , null ) ; }
Code	{ return solve ( min , max , max , null ) ; }
Distance : 4

65
Tree	{ return solver . solve ( min . getInvocation () , max ) ; }
Code	{ return solver . solve ( min . getInvocation () , max ) ; }
Distance : 6

66
Tree	{ return solve ( Coordinates3D , max , max , null ) ; }
Code	{ return solve ( Coordinates3D , max , max , null ) ; }
Distance : 4

67
Tree	{ return solve ( min . max ( clazz ) , max ) ; }
Code	{ return solve ( min . max ( clazz ) , max ) ; }
Distance : 6

68
Tree	{ return solve ( min , max , chiSquare , null ) ; }
Code	{ return solve ( min , max , chiSquare , null ) ; }
Distance : 5

69
Tree	{ return solver . solve () . getY ( min , max ) ; }
Code	{ return solver . solve () . getY ( min , max ) ; }
Distance : 6

70
Tree	{ return solver . solve () . reportAnd ( min , max ) ; }
Code	{ return solver . solve () . reportAnd ( min , max ) ; }
Distance : 6

71
Tree	{ return solve ( min . max ( style ) , max ) ; }
Code	{ return solve ( min . max ( style ) , max ) ; }
Distance : 6

72
Tree	{ return solve ( min , max , UTC_TIME_ZONE , null ) ; }
Code	{ return solve ( min , max , UTC_TIME_ZONE , null ) ; }
Distance : 5

73
Tree	{ return solver . solve ( min . max () , max ) ; }
Code	{ return solver . solve ( min . max () , max ) ; }
Distance : 6

74
Tree	{ return solve ( min () , getRank ( direction ) ) ; }
Code	{ return solve ( min () , getRank ( direction ) ) ; }
Distance : 6

75
Tree	{ return solve ( min , returnValues - NUMBER_CONSTANT ) ; }
Code	{ return solve ( min , returnValues - NUMBER_CONSTANT ) ; }
Distance : 4

76
Tree	{ return solve ( min () , getUnitMillis ( direction ) ) ; }
Code	{ return solve ( min () , getUnitMillis ( direction ) ) ; }
Distance : 6

77
Tree	{ return solve ( Coordinates3D , max - NUMBER_CONSTANT ) ; }
Code	{ return solve ( Coordinates3D , max - NUMBER_CONSTANT ) ; }
Distance : 4

78
Tree	{ return solve ( min , values , max , null ) ; }
Code	{ return solve ( min , values , max , null ) ; }
Distance : 4

79
Tree	{ return solve ( min () , getRank ( max ) ) ; }
Code	{ return solve ( min () , getRank ( max ) ) ; }
Distance : 5

80
Tree	{ return solve ( min - NUMBER_CONSTANT , returnValues ) ; }
Code	{ return solve ( min - NUMBER_CONSTANT , returnValues ) ; }
Distance : 4

81
Tree	{ return solve ( min , null , mock ) ; }
Code	{ return solve ( min , null , mock ) ; }
Distance : 3

82
Tree	{ return solve ( min , variance - NUMBER_CONSTANT ) ; }
Code	{ return solve ( min , variance - NUMBER_CONSTANT ) ; }
Distance : 4

83
Tree	{ return solve ( numberOfTrials , null , max ) ; }
Code	{ return solve ( numberOfTrials , null , max ) ; }
Distance : 2

84
Tree	{ return solver . solve ( style , null , max ) ; }
Code	{ return solver . solve ( style , null , max ) ; }
Distance : 4

85
Tree	{ return solve ( min , returnValues ) ; }
Code	{ return solve ( min , returnValues ) ; }
Distance : 3

86
Tree	{ return solve ( min () , getY ( max ) ) ; }
Code	{ return solve ( min () , getY ( max ) ) ; }
Distance : 5

87
Tree	{ return solve ( min , zero - NUMBER_CONSTANT ) ; }
Code	{ return solve ( min , zero - NUMBER_CONSTANT ) ; }
Distance : 4

88
Tree	{ return p2 . solve ( min ) ; }
Code	{ return p2 . solve ( min ) ; }
Distance : 6

89
Tree	{ return solve ( Coordinates3D , null , max ) ; }
Code	{ return solve ( Coordinates3D , null , max ) ; }
Distance : 2

90
Tree	{ return solve ( min , null , returnValues ) ; }
Code	{ return solve ( min , null , returnValues ) ; }
Distance : 3

91
Tree	{ return f . solve ( min , max ) ; }
Code	{ return f . solve ( min , max ) ; }
Distance : 4

92
Tree	{ return solve ( min , max , chiSquare , false ) ; }
Code	{ return solve ( min , max , chiSquare , false ) ; }
Distance : 5

93
Tree	{ return solve ( Coordinates3D , max , max , false ) ; }
Code	{ return solve ( Coordinates3D , max , max , false ) ; }
Distance : 4

94
Tree	{ return solver . solve ( numberOfTrials , null , max ) ; }
Code	{ return solver . solve ( numberOfTrials , null , max ) ; }
Distance : 4

95
Tree	{ return solver . solve ( style , max ) ; }
Code	{ return solver . solve ( style , max ) ; }
Distance : 5

96
Tree	{ return solve ( min , max , UTC_TIME_ZONE , false ) ; }
Code	{ return solve ( min , max , UTC_TIME_ZONE , false ) ; }
Distance : 5

97
Tree	{ return solve ( data , null ) ; }
Code	{ return solve ( data , null ) ; }
Distance : 4

98
Tree	{ return solver . solve () . getParser ( style , max ) ; }
Code	{ return solver . solve () . getParser ( style , max ) ; }
Distance : 7

99
Tree	{ return solver . solve ( min , null , max ) ; }
Code	{ return solver . solve ( min , null , max ) ; }
Distance : 4

100
Tree	{ return solve ( Coordinates3D - NUMBER_CONSTANT , max ) ; }
Code	{ return solve ( Coordinates3D - NUMBER_CONSTANT , max ) ; }
Distance : 3

101
Tree	{ return solver . solve ( min . getY () , max ) ; }
Code	{ return solver . solve ( min . getY () , max ) ; }
Distance : 6

102
Tree	{ return solve ( min - NUMBER_CONSTANT , zero ) ; }
Code	{ return solve ( min - NUMBER_CONSTANT , zero ) ; }
Distance : 4

103
Tree	{ return Coordinates3D . solve ( style , max ) ; }
Code	{ return Coordinates3D . solve ( style , max ) ; }
Distance : 5

104
Tree	{ return solve ( DEFAULT_MAX_EVALUATIONS , null , max ) ; }
Code	{ return solve ( DEFAULT_MAX_EVALUATIONS , null , max ) ; }
Distance : 2

105
Tree	{ return solver . solve ( numberOfTrials , max ) ; }
Code	{ return solver . solve ( numberOfTrials , max ) ; }
Distance : 5

106
Tree	{ return solver . solve ( style . min () , max ) ; }
Code	{ return solver . solve ( style . min () , max ) ; }
Distance : 5

107
Tree	{ return Coordinates3D . solve ( min , max ) ; }
Code	{ return Coordinates3D . solve ( min , max ) ; }
Distance : 4

108
Tree	{ return solve ( min , values , false ) ; }
Code	{ return solve ( min , values , false ) ; }
Distance : 3

109
Tree	{ return solve ( min . chiSquare () , max ) ; }
Code	{ return solve ( min . chiSquare () , max ) ; }
Distance : 4

110
Tree	{ return solve ( min , returnValues , false ) ; }
Code	{ return solve ( min , returnValues , false ) ; }
Distance : 3

111
Tree	{ return solver . solve ( min , p1.vector ) ; }
Code	{ return solver . solve ( min , p1.vector ) ; }
Distance : 5

112
Tree	{ return solve ( min , max , returnValues ) ; }
Code	{ return solve ( min , max , returnValues ) ; }
Distance : 3

113
Tree	{ return solve ( min , zero ) ; }
Code	{ return solve ( min , zero ) ; }
Distance : 3

114
Tree	{ return f . solve ( min , null , max , null ) ; }
Code	{ return f . solve ( min , null , max , null ) ; }
Distance : 6

115
Tree	{ return solve ( numberOfTrials . max () , max ) ; }
Code	{ return solve ( numberOfTrials . max () , max ) ; }
Distance : 4

116
Tree	{ return solver . solve () . getPrinter ( min , max ) ; }
Code	{ return solver . solve () . getPrinter ( min , max ) ; }
Distance : 6

117
Tree	{ return solver . solve ( min , null , max , null ) ; }
Code	{ return solver . solve ( min , null , max , null ) ; }
Distance : 6

118
Tree	{ return solve ( min , max , returnValues , false ) ; }
Code	{ return solve ( min , max , returnValues , false ) ; }
Distance : 5

119
Tree	{ return solve ( min . max ( index ) ) ; }
Code	{ return solve ( min . max ( index ) ) ; }
Distance : 6

120
Tree	{ return solve ( min , max , chiSquare ) ; }
Code	{ return solve ( min , max , chiSquare ) ; }
Distance : 3

121
Tree	{ return solve ( min () , getY ( direction ) ) ; }
Code	{ return solve ( min () , getY ( direction ) ) ; }
Distance : 6

122
Tree	{ return solve ( numberOfTrials , max , max ) ; }
Code	{ return solve ( numberOfTrials , max , max ) ; }
Distance : 2

123
Tree	{ return f . solve ( this , numberOfTrials ) ; }
Code	{ return f . solve ( this , numberOfTrials ) ; }
Distance : 6

124
Tree	{ return solver . solve ( min , TimeZones.GMT_ID ) ; }
Code	{ return solver . solve ( min , TimeZones.GMT_ID ) ; }
Distance : 5

125
Tree	{ return solver . solve ( min . configureWith () , max ) ; }
Code	{ return solver . solve ( min . configureWith () , max ) ; }
Distance : 6

126
Tree	{ return f . solve ( style , null , max ) ; }
Code	{ return f . solve ( style , null , max ) ; }
Distance : 4

127
Tree	{ return solve ( min . max ( param ) ) ; }
Code	{ return solve ( min . max ( param ) ) ; }
Distance : 6

128
Tree	{ return solver . solve ( style , v2.x ) ; }
Code	{ return solver . solve ( style , v2.x ) ; }
Distance : 6

129
Tree	{ return solve ( style , null , max ) ; }
Code	{ return solve ( style , null , max ) ; }
Distance : 2

130
Tree	{ return solve ( numberOfTrials , max , max , null ) ; }
Code	{ return solve ( numberOfTrials , max , max , null ) ; }
Distance : 4

131
Tree	{ return ( ( Coordinates3D ) this ) . solve ( min , max ) ; }
Code	{ return ( ( Coordinates3D ) this ) . solve ( min , max ) ; }
Distance : 8

132
Tree	{ return solve ( min () , getUnitMillis ( max ) ) ; }
Code	{ return solve ( min () , getUnitMillis ( max ) ) ; }
Distance : 5

133
Tree	{ return solve ( style , max , max , false ) ; }
Code	{ return solve ( style , max , max , false ) ; }
Distance : 4

134
Tree	{ return solver . solve ( min , com.google.protobuf.GeneratedMessageV3 ) ; }
Code	{ return solver . solve ( min , com.google.protobuf.GeneratedMessageV3 ) ; }
Distance : 5

135
Tree	{ return ( ( style ) this ) . solve ( min , max ) ; }
Code	{ return ( ( style ) this ) . solve ( min , max ) ; }
Distance : 8

136
Tree	{ return solve ( style - NUMBER_CONSTANT , max ) ; }
Code	{ return solve ( style - NUMBER_CONSTANT , max ) ; }
Distance : 3

137
Tree	{ return solve ( numberOfTrials - NUMBER_CONSTANT , max ) ; }
Code	{ return solve ( numberOfTrials - NUMBER_CONSTANT , max ) ; }
Distance : 3

138
Tree	{ return solve ( relativeAccuracy , null ) ; }
Code	{ return solve ( relativeAccuracy , null ) ; }
Distance : 4

139
Tree	{ return solver . solve ( this , data ) ; }
Code	{ return solver . solve ( this , data ) ; }
Distance : 6

140
Tree	{ return org.joda.time.gwt.util.Arrays . solve ( min ) ; }
Code	{ return org.joda.time.gwt.util.Arrays . solve ( min ) ; }
Distance : 6

141
Tree	{ return solve ( maxEval , null ) ; }
Code	{ return solve ( maxEval , null ) ; }
Distance : 4

142
Tree	{ return solve ( min , values , max , false ) ; }
Code	{ return solve ( min , values , max , false ) ; }
Distance : 4

143
Tree	{ return ( ( min ) this ) . solve ( style , max ) ; }
Code	{ return ( ( min ) this ) . solve ( style , max ) ; }
Distance : 9

144
Tree	{ return x.length . solve ( style ) ; }
Code	{ return x.length . solve ( style ) ; }
Distance : 7

145
Tree	{ return observations.length . solve ( min , max , max ) ; }
Code	{ return observations.length . solve ( min , max , max ) ; }
Distance : 4

146
Tree	{ return Coordinates3D . solve ( min ) ; }
Code	{ return Coordinates3D . solve ( min ) ; }
Distance : 6

147
Tree	{ return Coordinates3D . solve ( min , null , max ) ; }
Code	{ return Coordinates3D . solve ( min , null , max ) ; }
Distance : 4

148
Tree	{ return solve ( Coordinates3D , max , max ) ; }
Code	{ return solve ( Coordinates3D , max , max ) ; }
Distance : 2

149
Tree	{ return solver . solve ( style , null , max , null ) ; }
Code	{ return solver . solve ( style , null , max , null ) ; }
Distance : 6

150
Tree	{ return solve ( min - NUMBER_CONSTANT , MAX ) ; }
Code	{ return solve ( min - NUMBER_CONSTANT , MAX ) ; }
Distance : 4

151
Tree	{ return Coordinates3D . solve ( this , min ) ; }
Code	{ return Coordinates3D . solve ( this , min ) ; }
Distance : 5

152
Tree	{ return solver . solve ( min , null , returnValues ) ; }
Code	{ return solver . solve ( min , null , returnValues ) ; }
Distance : 5

153
Tree	{ return Coordinates3D . solve () . getParser ( min , max ) ; }
Code	{ return Coordinates3D . solve () . getParser ( min , max ) ; }
Distance : 6

154
Tree	{ return Double.NEGATIVE_INFINITY . solve ( min , max , max ) ; }
Code	{ return Double.NEGATIVE_INFINITY . solve ( min , max , max ) ; }
Distance : 4

155
Tree	{ return solve ( min , variance , false ) ; }
Code	{ return solve ( min , variance , false ) ; }
Distance : 3

156
Tree	{ return solve ( min , zero , false ) ; }
Code	{ return solve ( min , zero , false ) ; }
Distance : 3

157
Tree	{ return solver . solve ( min , null , returnValues , null ) ; }
Code	{ return solver . solve ( min , null , returnValues , null ) ; }
Distance : 7

158
Tree	{ return solve ( DEFAULT_MAX_EVALUATIONS - NUMBER_CONSTANT , max ) ; }
Code	{ return solve ( DEFAULT_MAX_EVALUATIONS - NUMBER_CONSTANT , max ) ; }
Distance : 3

159
Tree	{ return f . solve ( min , null , max ) ; }
Code	{ return f . solve ( min , null , max ) ; }
Distance : 4

160
Tree	{ return solver . solve ( numberOfTrials ) ; }
Code	{ return solver . solve ( numberOfTrials ) ; }
Distance : 7

161
Tree	{ return solver . solve ( min , RandomNameGenerator.NONFIRST_CHAR ) ; }
Code	{ return solver . solve ( min , RandomNameGenerator.NONFIRST_CHAR ) ; }
Distance : 5

162
Tree	{ return Double.NaN . solve ( min , max , max ) ; }
Code	{ return Double.NaN . solve ( min , max , max ) ; }
Distance : 4

163
Tree	{ return solver . solve ( numberOfTrials , null , max , null ) ; }
Code	{ return solver . solve ( numberOfTrials , null , max , null ) ; }
Distance : 6

164
Tree	{ return f . solve ( style , max ) ; }
Code	{ return f . solve ( style , max ) ; }
Distance : 5

165
Tree	{ return solver . solve ( min , v2.x ) ; }
Code	{ return solver . solve ( min , v2.x ) ; }
Distance : 5

166
Tree	{ return solver . solve () . startsWith ( min , max ) ; }
Code	{ return solver . solve () . startsWith ( min , max ) ; }
Distance : 6

167
Tree	{ return com.google.protobuf.GeneratedMessageV3 . solve ( min , max , max ) ; }
Code	{ return com.google.protobuf.GeneratedMessageV3 . solve ( min , max , max ) ; }
Distance : 4

168
Tree	{ return f . solve ( style , null , max , null ) ; }
Code	{ return f . solve ( style , null , max , null ) ; }
Distance : 6

169
Tree	{ return p2 . solve ( min , max ) ; }
Code	{ return p2 . solve ( min , max ) ; }
Distance : 4

170
Tree	{ return Coordinates3D . solve ( this , numberOfTrials ) ; }
Code	{ return Coordinates3D . solve ( this , numberOfTrials ) ; }
Distance : 6

171
Tree	{ return x.length . solve ( min , max ) ; }
Code	{ return x.length . solve ( min , max ) ; }
Distance : 4

172
Tree	{ return Coordinates3D . solve ( style ) ; }
Code	{ return Coordinates3D . solve ( style ) ; }
Distance : 7

173
Tree	{ return solve ( min - NUMBER_CONSTANT , max ) ; }
Code	{ return solve ( min - NUMBER_CONSTANT , max ) ; }
Distance : 3

174
Tree	{ return solver . solve ( min , PropertyCollapseLevel.NONE ) ; }
Code	{ return solver . solve ( min , PropertyCollapseLevel.NONE ) ; }
Distance : 5

175
Tree	{ return f . solve ( this , min ) ; }
Code	{ return f . solve ( this , min ) ; }
Distance : 5

176
Tree	{ return solve ( style , max , max , null ) ; }
Code	{ return solve ( style , max , max , null ) ; }
Distance : 4

177
Tree	{ return Double.NaN . solve ( min ) ; }
Code	{ return Double.NaN . solve ( min ) ; }
Distance : 6

178
Tree	{ return EscapeUtils.ESCAPE_ECMASCRIPT . solve ( min , max , max ) ; }
Code	{ return EscapeUtils.ESCAPE_ECMASCRIPT . solve ( min , max , max ) ; }
Distance : 4

179
Tree	{ return solve ( min , values - NUMBER_CONSTANT ) ; }
Code	{ return solve ( min , values - NUMBER_CONSTANT ) ; }
Distance : 4

180
Tree	{ return org.joda.time.gwt.util.Arrays . solve ( min , max , max ) ; }
Code	{ return org.joda.time.gwt.util.Arrays . solve ( min , max , max ) ; }
Distance : 4

181
Tree	{ return Double.NEGATIVE_INFINITY . solve ( min ) ; }
Code	{ return Double.NEGATIVE_INFINITY . solve ( min ) ; }
Distance : 6

182
Tree	{ return solve ( Coordinates3D , max , false ) ; }
Code	{ return solve ( Coordinates3D , max , false ) ; }
Distance : 3

183
Tree	{ return ( ( min ) this ) . invocationListeners ( min , max ) ; }
Code	{ return ( ( min ) this ) . invocationListeners ( min , max ) ; }
Distance : 8

184
Tree	{ return com.google.protobuf.GeneratedMessageV3 . solve ( min ) ; }
Code	{ return com.google.protobuf.GeneratedMessageV3 . solve ( min ) ; }
Distance : 6

185
Tree	{ return EscapeUtils.ESCAPE_ECMASCRIPT . solve ( min ) ; }
Code	{ return EscapeUtils.ESCAPE_ECMASCRIPT . solve ( min ) ; }
Distance : 6

186
Tree	{ return solve ( min , max , UTC_TIME_ZONE ) ; }
Code	{ return solve ( min , max , UTC_TIME_ZONE ) ; }
Distance : 3

187
Tree	{ return observations.length . solve ( min , max ) ; }
Code	{ return observations.length . solve ( min , max ) ; }
Distance : 4

188
Tree	{ return solver . solve ( min . getNormal () , max ) ; }
Code	{ return solver . solve ( min . getNormal () , max ) ; }
Distance : 6

189
Tree	{ return f . solve ( min ) ; }
Code	{ return f . solve ( min ) ; }
Distance : 6

190
Tree	{ return observations.length . solve ( min ) ; }
Code	{ return observations.length . solve ( min ) ; }
Distance : 6

191
Tree	{ return Coordinates3D . solve ( min , null , max , null ) ; }
Code	{ return Coordinates3D . solve ( min , null , max , null ) ; }
Distance : 6

192
Tree	{ return x.length . solve ( style , max , max ) ; }
Code	{ return x.length . solve ( style , max , max ) ; }
Distance : 4

193
Tree	{ return org.joda.time.gwt.util.Arrays . solve ( min , max ) ; }
Code	{ return org.joda.time.gwt.util.Arrays . solve ( min , max ) ; }
Distance : 4

194
Tree	{ return Coordinates3D . solve ( style , null , max , null ) ; }
Code	{ return Coordinates3D . solve ( style , null , max , null ) ; }
Distance : 6

195
Tree	{ return Double.NEGATIVE_INFINITY . solve ( min , max ) ; }
Code	{ return Double.NEGATIVE_INFINITY . solve ( min , max ) ; }
Distance : 4

196
Tree	{ return com.google.protobuf.GeneratedMessageV3 . solve ( min , max ) ; }
Code	{ return com.google.protobuf.GeneratedMessageV3 . solve ( min , max ) ; }
Distance : 4

197
Tree	{ return Double.NaN . solve ( min , max ) ; }
Code	{ return Double.NaN . solve ( min , max ) ; }
Distance : 4

198
Tree	{ return x.length . solve ( style , max ) ; }
Code	{ return x.length . solve ( style , max ) ; }
Distance : 5

199
Tree	{ return EscapeUtils.ESCAPE_ECMASCRIPT . solve ( min , max ) ; }
Code	{ return EscapeUtils.ESCAPE_ECMASCRIPT . solve ( min , max ) ; }
Distance : 4

========================================================================


========================================================================
Example Number: 58
Parent Code is: 
out [ i ] [ j ] = NUMBER_CONSTANT * ( NUMBER_CONSTANT - tDistribution . cumulativeProbability ( t ) ) ;
-------------------------------------------------------------------------------
Child code is: 
out [ i ] [ j ] = NUMBER_CONSTANT * tDistribution . cumulativeProbability ( - t ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (7 (2 (2 (801{val=out}) (221{val=[}) (800{val=i}) (222{val=]})) (221{val=[}) (800{val=j}) (222{val=]})) (204{val==}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (36 (214{val=(}) (27 (34{val=NUMBER_CONSTANT}) (201{val=-}) (32 (800{val=tDistribution}) (235{val=.}) (802{val=cumulativeProbability}) (214{val=(}) (800{val=t}) (215{val=)}))) (215{val=)})))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (7 (2 (2 (801{val=out}) (221{val=[}) (800{val=i}) (222{val=]})) (221{val=[}) (800{val=j}) (222{val=]})) (204{val==}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (32 (800{val=tDistribution}) (235{val=.}) (802{val=cumulativeProbability}) (214{val=(}) (38 (201{val=-}) (800{val=t})) (215{val=)})))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/69/parent/src_main_java_org_apache_commons_math_stat_correlation_PearsonsCorrelation.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	out = ( ( Integer . min ( t ) - num1 ) * / * / * bitIndex ) ;
Code	out = ( ( Integer . min ( t ) - num1 ) * / * / * bitIndex ) ;
Distance : 18

1
Tree	out = ( ( Integer . min ( t ) - subtrahendMonth ) * / * / * bitIndex ) ;
Code	out = ( ( Integer . min ( t ) - subtrahendMonth ) * / * / * bitIndex ) ;
Distance : 18

2
Tree	out = ( StandardPieURLGenerator != i . min ( t . min ( t ) - LOG_10 ) ) ;
Code	out = ( StandardPieURLGenerator != i . min ( t . min ( t ) - LOG_10 ) ) ;
Distance : 15

3
Tree	out = ( StandardPieURLGenerator != i . min ( t . min ( t ) - j ) ) ;
Code	out = ( StandardPieURLGenerator != i . min ( t . min ( t ) - j ) ) ;
Distance : 15

4
Tree	out = ( OHLCDataItem != i . min ( t . min ( t ) - j ) ) ;
Code	out = ( OHLCDataItem != i . min ( t . min ( t ) - j ) ) ;
Distance : 15

5
Tree	out = ( OHLCDataItem != i . min ( t . min ( t ) - LOG_10 ) ) ;
Code	out = ( OHLCDataItem != i . min ( t . min ( t ) - LOG_10 ) ) ;
Distance : 15

6
Tree	out = ( TimePeriodValue != i . min ( t . min ( t ) - LOG_10 ) ) ;
Code	out = ( TimePeriodValue != i . min ( t . min ( t ) - LOG_10 ) ) ;
Distance : 15

7
Tree	out = ( out != i . cumulativeProbability ( t . min ( t ) - j ) ) ;
Code	out = ( out != i . cumulativeProbability ( t . min ( t ) - j ) ) ;
Distance : 15

8
Tree	out += i . parseDouble ( t != n . valueOf ( t ) ) * / * / ;
Code	out += i . parseDouble ( t != n . valueOf ( t ) ) * / * / ;
Distance : 16

9
Tree	out += i / ( NUMBER_CONSTANT + testValue . cumulativeProbability ( t ) ) ;
Code	out += i / ( NUMBER_CONSTANT + testValue . cumulativeProbability ( t ) ) ;
Distance : 10

10
Tree	out += i / ( NUMBER_CONSTANT + initialNorm . cumulativeProbability ( t ) ) ;
Code	out += i / ( NUMBER_CONSTANT + initialNorm . cumulativeProbability ( t ) ) ;
Distance : 10

11
Tree	out += i / ( NUMBER_CONSTANT + destination . cumulativeProbability ( y0 ) ) ;
Code	out += i / ( NUMBER_CONSTANT + destination . cumulativeProbability ( y0 ) ) ;
Distance : 10

12
Tree	out = ( ( FastMath.PI == projected ) * ( t - NUMBER_CONSTANT ) * / * testValue ) ;
Code	out = ( ( FastMath.PI == projected ) * ( t - NUMBER_CONSTANT ) * / * testValue ) ;
Distance : 17

13
Tree	out = ( ( FastMath.PI == projected ) * ( t + projected ) * / * EXCLUDES ) ;
Code	out = ( ( FastMath.PI == projected ) * ( t + projected ) * / * EXCLUDES ) ;
Distance : 17

14
Tree	out += i . parseDouble ( t != t . toString ( t ) ) * / * / ;
Code	out += i . parseDouble ( t != t . toString ( t ) ) * / * / ;
Distance : 16

15
Tree	out += i . intValue ( t != t . valueOf ( t ) ) * / * / ;
Code	out += i . intValue ( t != t . valueOf ( t ) ) * / * / ;
Distance : 16

16
Tree	out += i / ( t . min ( t ) > > > NUMBER_CONSTANT ) ;
Code	out += i / ( t . min ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 14

17
Tree	out += i / ( t != t . valueOf ( t ) ) ;
Code	out += i / ( t != t . valueOf ( t ) ) ;
Distance : 12

18
Tree	out += i / ( t . min ( n ) > > > NUMBER_CONSTANT ) ;
Code	out += i / ( t . min ( n ) > > > NUMBER_CONSTANT ) ;
Distance : 14

19
Tree	out += i / ( t . min ( y0 ) > > > NUMBER_CONSTANT ) ;
Code	out += i / ( t . min ( y0 ) > > > NUMBER_CONSTANT ) ;
Distance : 14

20
Tree	out += i / ( t != y0 . valueOf ( t ) ) ;
Code	out += i / ( t != y0 . valueOf ( t ) ) ;
Distance : 12

21
Tree	out += i / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	out += i / ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 14

22
Tree	out += i / ( t != t . toString ( t ) ) ;
Code	out += i / ( t != t . toString ( t ) ) ;
Distance : 12

23
Tree	out = ( ( Integer . min ( t ) > > > NUMBER_CONSTANT ) * / * / * bitIndex ) ;
Code	out = ( ( Integer . min ( t ) > > > NUMBER_CONSTANT ) * / * / * bitIndex ) ;
Distance : 19

24
Tree	out = ( ( Integer . min ( t ) - mant ) * / * / * bitIndex ) ;
Code	out = ( ( Integer . min ( t ) - mant ) * / * / * bitIndex ) ;
Distance : 18

25
Tree	out = ( ( FastMath.PI == projected ) * ( n + projected ) * / * minuendMonth ) ;
Code	out = ( ( FastMath.PI == projected ) * ( n + projected ) * / * minuendMonth ) ;
Distance : 17

26
Tree	out = ( ( Integer . min ( t ) - types ) * / * / * bitIndex ) ;
Code	out = ( ( Integer . min ( t ) - types ) * / * / * bitIndex ) ;
Distance : 18

27
Tree	out = ( out != i . min ( t . min ( t ) - LOG_10 ) ) ;
Code	out = ( out != i . min ( t . min ( t ) - LOG_10 ) ) ;
Distance : 15

28
Tree	out += i / ( NUMBER_CONSTANT + destination . cumulativeProbability ( t ) ) ;
Code	out += i / ( NUMBER_CONSTANT + destination . cumulativeProbability ( t ) ) ;
Distance : 10

29
Tree	out = ( ( FastMath.PI == projected ) * ( n + projected ) * / * EXCLUDES ) ;
Code	out = ( ( FastMath.PI == projected ) * ( n + projected ) * / * EXCLUDES ) ;
Distance : 17

30
Tree	out += i . valueOf ( t != t . valueOf ( t ) ) * / * / ;
Code	out += i . valueOf ( t != t . valueOf ( t ) ) * / * / ;
Distance : 16

31
Tree	out = ( ( FastMath.PI == projected ) * ( t + projected ) * / * bitIndex ) ;
Code	out = ( ( FastMath.PI == projected ) * ( t + projected ) * / * bitIndex ) ;
Distance : 17

32
Tree	out = ( ( FastMath.PI == projected ) * ( t + projected ) * testValue . cumulativeProbability ( t ) * num1 ) ;
Code	out = ( ( FastMath.PI == projected ) * ( t + projected ) * testValue . cumulativeProbability ( t ) * num1 ) ;
Distance : 18

33
Tree	out = ( ( MathUtils.TWO_PI == projected ) * ( t - NUMBER_CONSTANT ) * / * bitIndex ) ;
Code	out = ( ( MathUtils.TWO_PI == projected ) * ( t - NUMBER_CONSTANT ) * / * bitIndex ) ;
Distance : 17

34
Tree	out = ( ( FastMath.PI == projected ) * ( t + projected ) * / * num1 ) ;
Code	out = ( ( FastMath.PI == projected ) * ( t + projected ) * / * num1 ) ;
Distance : 17

35
Tree	out = ( ( FastMath.PI == projected ) * ( t - NUMBER_CONSTANT ) * minuendMonth . cumulativeProbability ( y0 ) * num1 ) ;
Code	out = ( ( FastMath.PI == projected ) * ( t - NUMBER_CONSTANT ) * minuendMonth . cumulativeProbability ( y0 ) * num1 ) ;
Distance : 17

36
Tree	out = ( ( LocalizedFormats.NON_SQUARE_MATRIX == projected ) * ( t - NUMBER_CONSTANT ) * / * bitIndex ) ;
Code	out = ( ( LocalizedFormats.NON_SQUARE_MATRIX == projected ) * ( t - NUMBER_CONSTANT ) * / * bitIndex ) ;
Distance : 17

37
Tree	out = ( ( FastMath.PI == projected ) * ( n - NUMBER_CONSTANT ) * / * bitIndex ) ;
Code	out = ( ( FastMath.PI == projected ) * ( n - NUMBER_CONSTANT ) * / * bitIndex ) ;
Distance : 17

38
Tree	out += i && ( n != y0 . cumulativeProbability ( t ) ) ;
Code	out += i && ( n != y0 . cumulativeProbability ( t ) ) ;
Distance : 11

39
Tree	out += i && ( y0 != ArithmeticsUtils . cumulativeProbability ( t ) ) ;
Code	out += i && ( y0 != ArithmeticsUtils . cumulativeProbability ( t ) ) ;
Distance : 11

40
Tree	out = ( ( FastMath.PI == projected ) * ( t - NUMBER_CONSTANT ) * / * maxWidth ) ;
Code	out = ( ( FastMath.PI == projected ) * ( t - NUMBER_CONSTANT ) * / * maxWidth ) ;
Distance : 17

41
Tree	out += i / ( t . min ( y0 ) - minuendMonth ) ;
Code	out += i / ( t . min ( y0 ) - minuendMonth ) ;
Distance : 13

42
Tree	out += i / ( t . min ( n ) - EXCLUDES ) ;
Code	out += i / ( t . min ( n ) - EXCLUDES ) ;
Distance : 13

43
Tree	out = ( ( Integer != i . min ( t ) ) * / * / * mant ) ;
Code	out = ( ( Integer != i . min ( t ) ) * / * / * mant ) ;
Distance : 17

44
Tree	out += i / ( NUMBER_CONSTANT + bitIndex . cumulativeProbability ( y0 ) ) ;
Code	out += i / ( NUMBER_CONSTANT + bitIndex . cumulativeProbability ( y0 ) ) ;
Distance : 10

45
Tree	out += i / ( NUMBER_CONSTANT + bitIndex . cumulativeProbability ( t ) ) ;
Code	out += i / ( NUMBER_CONSTANT + bitIndex . cumulativeProbability ( t ) ) ;
Distance : 10

46
Tree	out += i / ( t . min ( y0 ) - testValue ) ;
Code	out += i / ( t . min ( y0 ) - testValue ) ;
Distance : 13

47
Tree	out += i && ( y0 . min ( y0 ) > > > NUMBER_CONSTANT ) ;
Code	out += i && ( y0 . min ( y0 ) > > > NUMBER_CONSTANT ) ;
Distance : 14

48
Tree	out += i && ( t != ArithmeticsUtils . min ( t ) ) ;
Code	out += i && ( t != ArithmeticsUtils . min ( t ) ) ;
Distance : 12

49
Tree	out += i / ( t . min ( t ) - minuendMonth ) ;
Code	out += i / ( t . min ( t ) - minuendMonth ) ;
Distance : 13

50
Tree	out += i / ( t . cumulativeProbability ( n ) > > > NUMBER_CONSTANT ) ;
Code	out += i / ( t . cumulativeProbability ( n ) > > > NUMBER_CONSTANT ) ;
Distance : 14

51
Tree	out = ( ( FastMath.PI == projected ) * ( t - NUMBER_CONSTANT ) * / * minuendMonth ) ;
Code	out = ( ( FastMath.PI == projected ) * ( t - NUMBER_CONSTANT ) * / * minuendMonth ) ;
Distance : 17

52
Tree	out = ( out & ( N . min ( t ) / testValue ) ) ;
Code	out = ( out & ( N . min ( t ) / testValue ) ) ;
Distance : 15

53
Tree	out = ( ( Integer != i . min ( t ) ) * / * / * minuendMonth ) ;
Code	out = ( ( Integer != i . min ( t ) ) * / * / * minuendMonth ) ;
Distance : 17

54
Tree	out = ( ( Integer . min ( t ) - EXCLUDES ) * / * / * bitIndex ) ;
Code	out = ( ( Integer . min ( t ) - EXCLUDES ) * / * / * bitIndex ) ;
Distance : 18

55
Tree	out += i / ( t != t . getInstance ( t ) ) ;
Code	out += i / ( t != t . getInstance ( t ) ) ;
Distance : 12

56
Tree	out += i / ( t . min ( t ) - EXCLUDES ) ;
Code	out += i / ( t . min ( t ) - EXCLUDES ) ;
Distance : 13

57
Tree	out = ( OHLCDataItem / ( j . toString ( t ) / testValue ) ) ;
Code	out = ( OHLCDataItem / ( j . toString ( t ) / testValue ) ) ;
Distance : 15

58
Tree	out += i / ( NUMBER_CONSTANT + rsl . cumulativeProbability ( y0 ) ) ;
Code	out += i / ( NUMBER_CONSTANT + rsl . cumulativeProbability ( y0 ) ) ;
Distance : 10

59
Tree	out += i / ( t . min ( n ) - minuendMonth ) ;
Code	out += i / ( t . min ( n ) - minuendMonth ) ;
Distance : 13

60
Tree	out += i && ( NUMBER_CONSTANT + rsl . cumulativeProbability ( t ) ) ;
Code	out += i && ( NUMBER_CONSTANT + rsl . cumulativeProbability ( t ) ) ;
Distance : 10

61
Tree	out = ( ( Integer != i . min ( t ) ) * / * / * mds ) ;
Code	out = ( ( Integer != i . min ( t ) ) * / * / * mds ) ;
Distance : 17

62
Tree	out += i / ( t != n . valueOf ( t ) ) ;
Code	out += i / ( t != n . valueOf ( t ) ) ;
Distance : 12

63
Tree	out = ( ( Integer != i . min ( t ) ) * % * / * EXCLUDES ) ;
Code	out = ( ( Integer != i . min ( t ) ) * % * / * EXCLUDES ) ;
Distance : 17

64
Tree	out = ( ( Integer . min ( t ) - stdErrors ) * / * / * bitIndex ) ;
Code	out = ( ( Integer . min ( t ) - stdErrors ) * / * / * bitIndex ) ;
Distance : 18

65
Tree	out = ( ( FastMath.PI == projected ) * ( t - NUMBER_CONSTANT ) * / * EXCLUDES ) ;
Code	out = ( ( FastMath.PI == projected ) * ( t - NUMBER_CONSTANT ) * / * EXCLUDES ) ;
Distance : 17

66
Tree	out = ( ( FastMath.PI == projected ) * ( f.length == projected ) * testValue . cumulativeProbability ( t ) * num1 ) ;
Code	out = ( ( FastMath.PI == projected ) * ( f.length == projected ) * testValue . cumulativeProbability ( t ) * num1 ) ;
Distance : 18

67
Tree	out /= i / ( t != n . toString ( t ) ) ;
Code	out /= i / ( t != n . toString ( t ) ) ;
Distance : 12

68
Tree	out = ( Calendar & ( t0 . min ( t ) / testValue ) ) ;
Code	out = ( Calendar & ( t0 . min ( t ) / testValue ) ) ;
Distance : 15

69
Tree	out = ( ( FastMath.PI == projected ) * ( MathUtils.TWO_PI == projected ) * / * minuendMonth ) ;
Code	out = ( ( FastMath.PI == projected ) * ( MathUtils.TWO_PI == projected ) * / * minuendMonth ) ;
Distance : 17

70
Tree	out = ( StandardPieURLGenerator / ( j . min ( t ) / testValue ) ) ;
Code	out = ( StandardPieURLGenerator / ( j . min ( t ) / testValue ) ) ;
Distance : 15

71
Tree	out = ( ( FastMath.PI == projected ) * ( t + projected ) * / * minuendMonth ) ;
Code	out = ( ( FastMath.PI == projected ) * ( t + projected ) * / * minuendMonth ) ;
Distance : 17

72
Tree	out = ( OHLCDataItem / ( j . min ( t ) / testValue ) ) ;
Code	out = ( OHLCDataItem / ( j . min ( t ) / testValue ) ) ;
Distance : 15

73
Tree	out = ( out & ( j . min ( t ) / testValue ) ) ;
Code	out = ( out & ( j . min ( t ) / testValue ) ) ;
Distance : 15

74
Tree	out = ( ( Integer != i . min ( t ) ) * / * / * maxWidth ) ;
Code	out = ( ( Integer != i . min ( t ) ) * / * / * maxWidth ) ;
Distance : 17

75
Tree	out += i / ( y0 . min ( t ) > > > NUMBER_CONSTANT ) ;
Code	out += i / ( y0 . min ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 14

76
Tree	out += i . parseDouble ( t != y0 . valueOf ( t ) ) * / * / ;
Code	out += i . parseDouble ( t != y0 . valueOf ( t ) ) * / * / ;
Distance : 16

77
Tree	out += i / ( t != t . length ( t ) ) ;
Code	out += i / ( t != t . length ( t ) ) ;
Distance : 12

78
Tree	out += i / ( y0 != t . valueOf ( t ) ) ;
Code	out += i / ( y0 != t . valueOf ( t ) ) ;
Distance : 12

79
Tree	out = ( ( Integer != i . min ( t ) ) * / * / * bitIndex ) ;
Code	out = ( ( Integer != i . min ( t ) ) * / * / * bitIndex ) ;
Distance : 17

80
Tree	out = ( ( Integer . min ( t ) - testValue ) * / * / * bitIndex ) ;
Code	out = ( ( Integer . min ( t ) - testValue ) * / * / * bitIndex ) ;
Distance : 18

81
Tree	out += i && ( t . cumulativeProbability ( y0 ) > > > NUMBER_CONSTANT ) ;
Code	out += i && ( t . cumulativeProbability ( y0 ) > > > NUMBER_CONSTANT ) ;
Distance : 14

82
Tree	out = ( ( Integer . min ( t ) > > > NUMBER_CONSTANT ) * / * / * maxWidth ) ;
Code	out = ( ( Integer . min ( t ) > > > NUMBER_CONSTANT ) * / * / * maxWidth ) ;
Distance : 19

83
Tree	out = ( ( Integer . min ( t ) - minuendMonth ) * / * / * bitIndex ) ;
Code	out = ( ( Integer . min ( t ) - minuendMonth ) * / * / * bitIndex ) ;
Distance : 18

84
Tree	out = ( ( FastMath.PI == projected ) * ( t + projected ) * / * testValue ) ;
Code	out = ( ( FastMath.PI == projected ) * ( t + projected ) * / * testValue ) ;
Distance : 17

85
Tree	out = ( ( Integer . min ( t ) > > > NUMBER_CONSTANT ) * / * / * EXCLUDES ) ;
Code	out = ( ( Integer . min ( t ) > > > NUMBER_CONSTANT ) * / * / * EXCLUDES ) ;
Distance : 19

86
Tree	out = ( ( FastMath.PI == projected ) * ( NUMBER_CONSTANT / minuendMonth ) * / * minuendMonth ) ;
Code	out = ( ( FastMath.PI == projected ) * ( NUMBER_CONSTANT / minuendMonth ) * / * minuendMonth ) ;
Distance : 16

87
Tree	out = ( StandardPieURLGenerator / ( j . toString ( t ) / testValue ) ) ;
Code	out = ( StandardPieURLGenerator / ( j . toString ( t ) / testValue ) ) ;
Distance : 15

88
Tree	out += i / ( t != t . size ( t ) ) ;
Code	out += i / ( t != t . size ( t ) ) ;
Distance : 12

89
Tree	out = ( ( FastMath.PI == projected ) * ( NUMBER_CONSTANT / bitIndex ) * / * EXCLUDES ) ;
Code	out = ( ( FastMath.PI == projected ) * ( NUMBER_CONSTANT / bitIndex ) * / * EXCLUDES ) ;
Distance : 16

90
Tree	out /= i / ( t != y0 . valueOf ( t ) ) ;
Code	out /= i / ( t != y0 . valueOf ( t ) ) ;
Distance : 12

91
Tree	out += i . parseDouble ( t != t . length ( t ) ) * / * / ;
Code	out += i . parseDouble ( t != t . length ( t ) ) * / * / ;
Distance : 16

92
Tree	out = ( ( FastMath.PI == projected ) * ( n + projected ) * / * bitIndex ) ;
Code	out = ( ( FastMath.PI == projected ) * ( n + projected ) * / * bitIndex ) ;
Distance : 17

93
Tree	out = ( ( Integer . min ( t ) > > > NUMBER_CONSTANT ) * / * / * minuendMonth ) ;
Code	out = ( ( Integer . min ( t ) > > > NUMBER_CONSTANT ) * / * / * minuendMonth ) ;
Distance : 19

94
Tree	out = ( ( FastMath.PI == projected ) * ( f.length == projected ) * / * bitIndex ) ;
Code	out = ( ( FastMath.PI == projected ) * ( f.length == projected ) * / * bitIndex ) ;
Distance : 17

95
Tree	out = ( ( FastMath.PI == projected ) * ( t - NUMBER_CONSTANT ) * / * bitIndex ) ;
Code	out = ( ( FastMath.PI == projected ) * ( t - NUMBER_CONSTANT ) * / * bitIndex ) ;
Distance : 17

96
Tree	out = ( ( FastMath.PI == projected ) * ( NUMBER_CONSTANT / bitIndex ) * / * num1 ) ;
Code	out = ( ( FastMath.PI == projected ) * ( NUMBER_CONSTANT / bitIndex ) * / * num1 ) ;
Distance : 16

97
Tree	out = ( FastMath & ( N . min ( t ) / testValue ) ) ;
Code	out = ( FastMath & ( N . min ( t ) / testValue ) ) ;
Distance : 15

98
Tree	out = ( OHLCDataItem & ( N . min ( t ) / testValue ) ) ;
Code	out = ( OHLCDataItem & ( N . min ( t ) / testValue ) ) ;
Distance : 15

99
Tree	out += i && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Code	out += i && ( t . cumulativeProbability ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 14

100
Tree	out = ( ( FastMath.PI == projected ) * ( n - NUMBER_CONSTANT ) * minuendMonth . cumulativeProbability ( t ) * num1 ) ;
Code	out = ( ( FastMath.PI == projected ) * ( n - NUMBER_CONSTANT ) * minuendMonth . cumulativeProbability ( t ) * num1 ) ;
Distance : 17

101
Tree	out = ( ( Integer . min ( t ) > > > NUMBER_CONSTANT ) * / * / * mds ) ;
Code	out = ( ( Integer . min ( t ) > > > NUMBER_CONSTANT ) * / * / * mds ) ;
Distance : 19

102
Tree	out += i && ( t != n . cumulativeProbability ( t ) ) ;
Code	out += i && ( t != n . cumulativeProbability ( t ) ) ;
Distance : 11

103
Tree	out += i / ( y0 . min ( n ) > > > NUMBER_CONSTANT ) ;
Code	out += i / ( y0 . min ( n ) > > > NUMBER_CONSTANT ) ;
Distance : 14

104
Tree	out += i && ( t . cumulativeProbability ( n ) > > > NUMBER_CONSTANT ) ;
Code	out += i && ( t . cumulativeProbability ( n ) > > > NUMBER_CONSTANT ) ;
Distance : 14

105
Tree	out += i . parseDouble ( t != t . getInstance ( t ) ) * / * / ;
Code	out += i . parseDouble ( t != t . getInstance ( t ) ) * / * / ;
Distance : 16

106
Tree	out = ( out != i . min ( t . min ( t ) - j ) ) ;
Code	out = ( out != i . min ( t . min ( t ) - j ) ) ;
Distance : 15

107
Tree	out = ( ( FastMath.PI == projected ) * ( t + projected ) * minuendMonth . cumulativeProbability ( t ) * num1 ) ;
Code	out = ( ( FastMath.PI == projected ) * ( t + projected ) * minuendMonth . cumulativeProbability ( t ) * num1 ) ;
Distance : 18

108
Tree	out += i / ( t . cumulativeProbability ( y0 ) > > > NUMBER_CONSTANT ) ;
Code	out += i / ( t . cumulativeProbability ( y0 ) > > > NUMBER_CONSTANT ) ;
Distance : 14

109
Tree	out /= i / ( t != ArithmeticsUtils . toString ( t ) ) ;
Code	out /= i / ( t != ArithmeticsUtils . toString ( t ) ) ;
Distance : 12

110
Tree	out = ( ( Integer . min ( t ) > > > NUMBER_CONSTANT ) * / * / * types ) ;
Code	out = ( ( Integer . min ( t ) > > > NUMBER_CONSTANT ) * / * / * types ) ;
Distance : 19

111
Tree	out = ( ( FastMath.PI == projected ) * ( n + projected ) * testValue . cumulativeProbability ( t ) * num1 ) ;
Code	out = ( ( FastMath.PI == projected ) * ( n + projected ) * testValue . cumulativeProbability ( t ) * num1 ) ;
Distance : 18

112
Tree	out += i && ( t != y0 . cumulativeProbability ( t ) ) ;
Code	out += i && ( t != y0 . cumulativeProbability ( t ) ) ;
Distance : 11

113
Tree	out = ( out / ( j . toString ( t ) / testValue ) ) ;
Code	out = ( out / ( j . toString ( t ) / testValue ) ) ;
Distance : 15

114
Tree	out = ( ( FastMath.PI == projected ) * ( t - NUMBER_CONSTANT ) * minuendMonth . cumulativeProbability ( t ) * num1 ) ;
Code	out = ( ( FastMath.PI == projected ) * ( t - NUMBER_CONSTANT ) * minuendMonth . cumulativeProbability ( t ) * num1 ) ;
Distance : 17

115
Tree	out /= i / ( t != ArithmeticsUtils . valueOf ( t ) ) ;
Code	out /= i / ( t != ArithmeticsUtils . valueOf ( t ) ) ;
Distance : 12

116
Tree	out += i && ( t != ArithmeticsUtils . cumulativeProbability ( t ) ) ;
Code	out += i && ( t != ArithmeticsUtils . cumulativeProbability ( t ) ) ;
Distance : 11

117
Tree	out = ( ( FastMath.PI == projected ) * ( NUMBER_CONSTANT / bitIndex ) * / * minuendMonth ) ;
Code	out = ( ( FastMath.PI == projected ) * ( NUMBER_CONSTANT / bitIndex ) * / * minuendMonth ) ;
Distance : 16

118
Tree	out = ( Calendar & ( N . min ( t ) / testValue ) ) ;
Code	out = ( Calendar & ( N . min ( t ) / testValue ) ) ;
Distance : 15

119
Tree	out /= i / ( t != ArithmeticsUtils . getInstance ( t ) ) ;
Code	out /= i / ( t != ArithmeticsUtils . getInstance ( t ) ) ;
Distance : 12

120
Tree	out = ( ( FastMath.PI == projected ) * ( f.length == projected ) * / * testValue ) ;
Code	out = ( ( FastMath.PI == projected ) * ( f.length == projected ) * / * testValue ) ;
Distance : 17

121
Tree	out = ( ( FastMath.PI == projected ) * ( f.length == projected ) * num1 . cumulativeProbability ( t ) * num1 ) ;
Code	out = ( ( FastMath.PI == projected ) * ( f.length == projected ) * num1 . cumulativeProbability ( t ) * num1 ) ;
Distance : 18

122
Tree	out /= removeAll () [ ( t . min ( t ) / testValue ) ;
Code	out /= removeAll () [ ( t . min ( t ) / testValue ) ;
Distance : 14

123
Tree	out /= removeAll () [ ( t . min ( t ) / minuendMonth ) ;
Code	out /= removeAll () [ ( t . min ( t ) / minuendMonth ) ;
Distance : 14

124
Tree	out = ( ( FastMath.PI == projected ) * ( NUMBER_CONSTANT / bitIndex ) * / * bitIndex ) ;
Code	out = ( ( FastMath.PI == projected ) * ( NUMBER_CONSTANT / bitIndex ) * / * bitIndex ) ;
Distance : 16

125
Tree	out = ( ( FastMath.PI == projected ) * ( f.length == projected ) * / * EXCLUDES ) ;
Code	out = ( ( FastMath.PI == projected ) * ( f.length == projected ) * / * EXCLUDES ) ;
Distance : 17

126
Tree	out /= removeAll () [ ( t . toString ( t ) / testValue ) ;
Code	out /= removeAll () [ ( t . toString ( t ) / testValue ) ;
Distance : 14

127
Tree	out = ( ( FastMath.PI == projected ) * ( MathUtils.TWO_PI == projected ) * / * bitIndex ) ;
Code	out = ( ( FastMath.PI == projected ) * ( MathUtils.TWO_PI == projected ) * / * bitIndex ) ;
Distance : 17

128
Tree	out += i && ( t . min ( y0 ) > > > NUMBER_CONSTANT ) ;
Code	out += i && ( t . min ( y0 ) > > > NUMBER_CONSTANT ) ;
Distance : 14

129
Tree	out += i / ( t . min ( t ) - testValue ) ;
Code	out += i / ( t . min ( t ) - testValue ) ;
Distance : 13

130
Tree	out /= nextInt () [ ( t . min ( t ) / testValue ) ;
Code	out /= nextInt () [ ( t . min ( t ) / testValue ) ;
Distance : 14

131
Tree	out = ( ( Integer . min ( t ) > > > NUMBER_CONSTANT ) * / * / * num1 ) ;
Code	out = ( ( Integer . min ( t ) > > > NUMBER_CONSTANT ) * / * / * num1 ) ;
Distance : 19

132
Tree	out /= removeAll () out ( t . min ( n ) / testValue ) ;
Code	out /= removeAll () out ( t . min ( n ) / testValue ) ;
Distance : 15

133
Tree	out += i && ( y0 . min ( t ) > > > NUMBER_CONSTANT ) ;
Code	out += i && ( y0 . min ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 14

134
Tree	out = ( ( FastMath.PI == projected ) * ( f.length == projected ) * / * minuendMonth ) ;
Code	out = ( ( FastMath.PI == projected ) * ( f.length == projected ) * / * minuendMonth ) ;
Distance : 17

135
Tree	out += i . parseDouble ( t != t . valueOf ( t ) ) * / * / ;
Code	out += i . parseDouble ( t != t . valueOf ( t ) ) * / * / ;
Distance : 16

136
Tree	out = ( ( Integer . min ( t ) > > > NUMBER_CONSTANT ) * / * / * mant ) ;
Code	out = ( ( Integer . min ( t ) > > > NUMBER_CONSTANT ) * / * / * mant ) ;
Distance : 19

137
Tree	out += i / ( t . min ( n ) - testValue ) ;
Code	out += i / ( t . min ( n ) - testValue ) ;
Distance : 13

138
Tree	out /= hashCode () [ ( t . min ( t ) / testValue ) ;
Code	out /= hashCode () [ ( t . min ( t ) / testValue ) ;
Distance : 14

139
Tree	out += removeAll () [ ( t . toString ( t ) / testValue ) ;
Code	out += removeAll () [ ( t . toString ( t ) / testValue ) ;
Distance : 14

140
Tree	out /= i / ( t != n . valueOf ( t ) ) ;
Code	out /= i / ( t != n . valueOf ( t ) ) ;
Distance : 12

141
Tree	out += i && ( t . min ( t ) > > > NUMBER_CONSTANT ) ;
Code	out += i && ( t . min ( t ) > > > NUMBER_CONSTANT ) ;
Distance : 14

142
Tree	out = ( out / ( j . min ( t ) / testValue ) ) ;
Code	out = ( out / ( j . min ( t ) / testValue ) ) ;
Distance : 15

143
Tree	out = ( ( Integer != i . min ( t ) ) * / * / * EXCLUDES ) ;
Code	out = ( ( Integer != i . min ( t ) ) * / * / * EXCLUDES ) ;
Distance : 17

144
Tree	out /= computeOmega () [ ( t . min ( t ) / testValue ) ;
Code	out /= computeOmega () [ ( t . min ( t ) / testValue ) ;
Distance : 14

145
Tree	out = ( ( FastMath.PI == projected ) * ( t - NUMBER_CONSTANT ) * minuendMonth . cumulativeProbability ( t ) * testValue ) ;
Code	out = ( ( FastMath.PI == projected ) * ( t - NUMBER_CONSTANT ) * minuendMonth . cumulativeProbability ( t ) * testValue ) ;
Distance : 17

146
Tree	out += removeAll () out ( t . toString ( t ) / minuendMonth ) ;
Code	out += removeAll () out ( t . toString ( t ) / minuendMonth ) ;
Distance : 15

147
Tree	out += removeAll () [ ( t . toString ( t ) / EXCLUDES ) ;
Code	out += removeAll () [ ( t . toString ( t ) / EXCLUDES ) ;
Distance : 14

148
Tree	out += getValue () [ ( t . toString ( t ) / testValue ) ;
Code	out += getValue () [ ( t . toString ( t ) / testValue ) ;
Distance : 14

149
Tree	out /= removeAll () [ ( t . min ( t ) / EXCLUDES ) ;
Code	out /= removeAll () [ ( t . min ( t ) / EXCLUDES ) ;
Distance : 14

150
Tree	out += i / ( NUMBER_CONSTANT + rsl . cumulativeProbability ( t ) ) ;
Code	out += i / ( NUMBER_CONSTANT + rsl . cumulativeProbability ( t ) ) ;
Distance : 10

151
Tree	out = ( ( FastMath.PI == projected ) * ( t - NUMBER_CONSTANT ) * num1 . cumulativeProbability ( t ) * num1 ) ;
Code	out = ( ( FastMath.PI == projected ) * ( t - NUMBER_CONSTANT ) * num1 . cumulativeProbability ( t ) * num1 ) ;
Distance : 17

152
Tree	out += removeAll () [ ( t . min ( t ) / testValue ) ;
Code	out += removeAll () [ ( t . min ( t ) / testValue ) ;
Distance : 14

153
Tree	out /= i / ( t != n . getInstance ( t ) ) ;
Code	out /= i / ( t != n . getInstance ( t ) ) ;
Distance : 12

154
Tree	out += removeAll () [ ( t . toString ( t ) / mant ) ;
Code	out += removeAll () [ ( t . toString ( t ) / mant ) ;
Distance : 14

155
Tree	out += i && ( t . min ( n ) > > > NUMBER_CONSTANT ) ;
Code	out += i && ( t . min ( n ) > > > NUMBER_CONSTANT ) ;
Distance : 14

156
Tree	out = ( ( FastMath.PI == projected ) * ( t - NUMBER_CONSTANT ) * testValue . cumulativeProbability ( t ) * num1 ) ;
Code	out = ( ( FastMath.PI == projected ) * ( t - NUMBER_CONSTANT ) * testValue . cumulativeProbability ( t ) * num1 ) ;
Distance : 17

157
Tree	out += i && ( NUMBER_CONSTANT + bitIndex . cumulativeProbability ( t ) ) ;
Code	out += i && ( NUMBER_CONSTANT + bitIndex . cumulativeProbability ( t ) ) ;
Distance : 10

158
Tree	out = ( Calendar / ( j . min ( t ) / testValue ) ) ;
Code	out = ( Calendar / ( j . min ( t ) / testValue ) ) ;
Distance : 15

159
Tree	out += getValue () out ( t . toString ( t ) / minuendMonth ) ;
Code	out += getValue () out ( t . toString ( t ) / minuendMonth ) ;
Distance : 15

160
Tree	out = ( ( FastMath.PI == projected ) * ( MathUtils.TWO_PI == projected ) * / * testValue ) ;
Code	out = ( ( FastMath.PI == projected ) * ( MathUtils.TWO_PI == projected ) * / * testValue ) ;
Distance : 17

161
Tree	out = ( ( FastMath.PI == projected ) * ( MathUtils.TWO_PI == projected ) * num1 . cumulativeProbability ( t ) * num1 ) ;
Code	out = ( ( FastMath.PI == projected ) * ( MathUtils.TWO_PI == projected ) * num1 . cumulativeProbability ( t ) * num1 ) ;
Distance : 18

162
Tree	out = ( ( FastMath.PI == projected ) * ( NUMBER_CONSTANT / bitIndex ) * / * testValue ) ;
Code	out = ( ( FastMath.PI == projected ) * ( NUMBER_CONSTANT / bitIndex ) * / * testValue ) ;
Distance : 16

163
Tree	out += i && ( y0 != y0 . cumulativeProbability ( t ) ) ;
Code	out += i && ( y0 != y0 . cumulativeProbability ( t ) ) ;
Distance : 11

164
Tree	out = ( ( FastMath.PI == projected ) * ( NUMBER_CONSTANT / mds ) * / * minuendMonth ) ;
Code	out = ( ( FastMath.PI == projected ) * ( NUMBER_CONSTANT / mds ) * / * minuendMonth ) ;
Distance : 16

165
Tree	out = ( StandardPieURLGenerator & ( N . min ( t ) / testValue ) ) ;
Code	out = ( StandardPieURLGenerator & ( N . min ( t ) / testValue ) ) ;
Distance : 15

166
Tree	out = ( TimePeriodValue / ( j . min ( t ) / testValue ) ) ;
Code	out = ( TimePeriodValue / ( j . min ( t ) / testValue ) ) ;
Distance : 15

167
Tree	out += i && ( t != y0 . min ( t ) ) ;
Code	out += i && ( t != y0 . min ( t ) ) ;
Distance : 12

168
Tree	out /= i / ( t != y0 . toString ( t ) ) ;
Code	out /= i / ( t != y0 . toString ( t ) ) ;
Distance : 12

169
Tree	out = ( ( FastMath.PI == projected ) * ( t - NUMBER_CONSTANT ) * bitIndex . cumulativeProbability ( t ) * num1 ) ;
Code	out = ( ( FastMath.PI == projected ) * ( t - NUMBER_CONSTANT ) * bitIndex . cumulativeProbability ( t ) * num1 ) ;
Distance : 17

170
Tree	out = ( ( FastMath.PI == projected ) * ( MathUtils.TWO_PI == projected ) * / * EXCLUDES ) ;
Code	out = ( ( FastMath.PI == projected ) * ( MathUtils.TWO_PI == projected ) * / * EXCLUDES ) ;
Distance : 17

171
Tree	out = ( ( FastMath.PI == projected ) * ( t - NUMBER_CONSTANT ) * minuendMonth . cumulativeProbability ( t ) * minuendMonth ) ;
Code	out = ( ( FastMath.PI == projected ) * ( t - NUMBER_CONSTANT ) * minuendMonth . cumulativeProbability ( t ) * minuendMonth ) ;
Distance : 17

172
Tree	out = ( ( FastMath.PI == projected ) * ( MathUtils.TWO_PI == projected ) * minuendMonth . cumulativeProbability ( t ) * num1 ) ;
Code	out = ( ( FastMath.PI == projected ) * ( MathUtils.TWO_PI == projected ) * minuendMonth . cumulativeProbability ( t ) * num1 ) ;
Distance : 18

173
Tree	out = ( ( Integer != i . min ( t ) ) * % * / * bitIndex ) ;
Code	out = ( ( Integer != i . min ( t ) ) * % * / * bitIndex ) ;
Distance : 17

174
Tree	out = ( ( FastMath.PI == projected ) * ( MathUtils.TWO_PI == projected ) * testValue . cumulativeProbability ( t ) * num1 ) ;
Code	out = ( ( FastMath.PI == projected ) * ( MathUtils.TWO_PI == projected ) * testValue . cumulativeProbability ( t ) * num1 ) ;
Distance : 18

175
Tree	out = ( ( FastMath.PI == projected ) * ( NUMBER_CONSTANT / mds ) * / * bitIndex ) ;
Code	out = ( ( FastMath.PI == projected ) * ( NUMBER_CONSTANT / mds ) * / * bitIndex ) ;
Distance : 16

176
Tree	out = ( Calendar & ( j . min ( t ) / testValue ) ) ;
Code	out = ( Calendar & ( j . min ( t ) / testValue ) ) ;
Distance : 15

177
Tree	out = ( ( FastMath.PI == projected ) * ( t + projected ) * testValue . cumulativeProbability ( t ) * minuendMonth ) ;
Code	out = ( ( FastMath.PI == projected ) * ( t + projected ) * testValue . cumulativeProbability ( t ) * minuendMonth ) ;
Distance : 18

178
Tree	out += getValue () [ ( t . toString ( t ) / EXCLUDES ) ;
Code	out += getValue () [ ( t . toString ( t ) / EXCLUDES ) ;
Distance : 14

179
Tree	out = ( ( FastMath.PI == projected ) * ( f.length == projected ) * num1 . cumulativeProbability ( t ) * testValue ) ;
Code	out = ( ( FastMath.PI == projected ) * ( f.length == projected ) * num1 . cumulativeProbability ( t ) * testValue ) ;
Distance : 18

180
Tree	out += i && ( NUMBER_CONSTANT + rsl . cumulativeProbability ( y0 ) ) ;
Code	out += i && ( NUMBER_CONSTANT + rsl . cumulativeProbability ( y0 ) ) ;
Distance : 10

181
Tree	out = ( ( FastMath.PI == projected ) * ( t + projected ) * testValue . cumulativeProbability ( t ) * testValue ) ;
Code	out = ( ( FastMath.PI == projected ) * ( t + projected ) * testValue . cumulativeProbability ( t ) * testValue ) ;
Distance : 18

182
Tree	out = ( ( FastMath.PI == projected ) * ( f.length == projected ) * minuendMonth . cumulativeProbability ( t ) * num1 ) ;
Code	out = ( ( FastMath.PI == projected ) * ( f.length == projected ) * minuendMonth . cumulativeProbability ( t ) * num1 ) ;
Distance : 18

183
Tree	out = ( ( FastMath.PI == projected ) * ( t + projected ) * testValue . cumulativeProbability ( y0 ) * num1 ) ;
Code	out = ( ( FastMath.PI == projected ) * ( t + projected ) * testValue . cumulativeProbability ( y0 ) * num1 ) ;
Distance : 18

184
Tree	out = ( ( Integer . min ( t ) - testValue ) & NUMBER_CONSTANT ) ;
Code	out = ( ( Integer . min ( t ) - testValue ) & NUMBER_CONSTANT ) ;
Distance : 15

185
Tree	out = ( ( Integer . min ( t ) - minuendMonth ) & NUMBER_CONSTANT ) ;
Code	out = ( ( Integer . min ( t ) - minuendMonth ) & NUMBER_CONSTANT ) ;
Distance : 15

186
Tree	out = ( ( FastMath.PI == projected ) * ( t + projected ) * testValue . cumulativeProbability ( t0 ) * num1 ) ;
Code	out = ( ( FastMath.PI == projected ) * ( t + projected ) * testValue . cumulativeProbability ( t0 ) * num1 ) ;
Distance : 18

187
Tree	out += i && ( NUMBER_CONSTANT + bitIndex . cumulativeProbability ( y0 ) ) ;
Code	out += i && ( NUMBER_CONSTANT + bitIndex . cumulativeProbability ( y0 ) ) ;
Distance : 10

188
Tree	out = ( ( Integer . min ( t ) - mant ) & NUMBER_CONSTANT ) ;
Code	out = ( ( Integer . min ( t ) - mant ) & NUMBER_CONSTANT ) ;
Distance : 15

189
Tree	out = ( ( MathUtils.TWO_PI == projected ) * ( t + projected ) * testValue . cumulativeProbability ( t ) * num1 ) ;
Code	out = ( ( MathUtils.TWO_PI == projected ) * ( t + projected ) * testValue . cumulativeProbability ( t ) * num1 ) ;
Distance : 18

190
Tree	out += i && ( NUMBER_CONSTANT + rsl . min ( t ) ) ;
Code	out += i && ( NUMBER_CONSTANT + rsl . min ( t ) ) ;
Distance : 11

191
Tree	out = ( ( Integer . min ( t ) - types ) & NUMBER_CONSTANT ) ;
Code	out = ( ( Integer . min ( t ) - types ) & NUMBER_CONSTANT ) ;
Distance : 15

192
Tree	out = ( ( FastMath.PI == projected ) * ( f.length == projected ) * num1 . cumulativeProbability ( t ) * minuendMonth ) ;
Code	out = ( ( FastMath.PI == projected ) * ( f.length == projected ) * num1 . cumulativeProbability ( t ) * minuendMonth ) ;
Distance : 18

193
Tree	out += i && ( NUMBER_CONSTANT + bitIndex . min ( t ) ) ;
Code	out += i && ( NUMBER_CONSTANT + bitIndex . min ( t ) ) ;
Distance : 11

194
Tree	out = ( ( Integer . min ( t ) - EXCLUDES ) & NUMBER_CONSTANT ) ;
Code	out = ( ( Integer . min ( t ) - EXCLUDES ) & NUMBER_CONSTANT ) ;
Distance : 15

195
Tree	out += i && ( NUMBER_CONSTANT + initialNorm . cumulativeProbability ( t ) ) ;
Code	out += i && ( NUMBER_CONSTANT + initialNorm . cumulativeProbability ( t ) ) ;
Distance : 10

196
Tree	out = ( ( Integer . min ( t ) - stdErrors ) & NUMBER_CONSTANT ) ;
Code	out = ( ( Integer . min ( t ) - stdErrors ) & NUMBER_CONSTANT ) ;
Distance : 15

197
Tree	out = ( ( Integer . min ( t ) - num1 ) & NUMBER_CONSTANT ) ;
Code	out = ( ( Integer . min ( t ) - num1 ) & NUMBER_CONSTANT ) ;
Distance : 15

198
Tree	out += i && ( NUMBER_CONSTANT + destination . cumulativeProbability ( t ) ) ;
Code	out += i && ( NUMBER_CONSTANT + destination . cumulativeProbability ( t ) ) ;
Distance : 10

199
Tree	out = ( ( Integer . min ( t ) - subtrahendMonth ) & NUMBER_CONSTANT ) ;
Code	out = ( ( Integer . min ( t ) - subtrahendMonth ) & NUMBER_CONSTANT ) ;
Distance : 15

========================================================================


========================================================================
Example Number: 59
Parent Code is: 
if ( p <= NUMBER_CONSTANT ) { throw MathRuntimeException . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_POISSON_MEAN , p ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( LocalizedFormats.MEAN , p ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=p}) (252{val=<=}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (32 (800{val=MathRuntimeException}) (235{val=.}) (802{val=createIllegalArgumentException}) (214{val=(}) (40{val=LocalizedFormats.NOT_POSITIVE_POISSON_MEAN}) (234{val=,}) (800{val=p}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=p}) (252{val=<=}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=NotStrictlyPositiveException})) (214{val=(}) (40{val=LocalizedFormats.MEAN}) (234{val=,}) (800{val=p}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/61/parent/src_main_java_org_apache_commons_math_distribution_PoissonDistributionImpl.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , NUMBER_CONSTANT , false ) ; }
Distance : 7

1
Tree	if ( p <= NUMBER_CONSTANT ) { throw new IllegalStateException ( p , p , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new IllegalStateException ( p , p , NUMBER_CONSTANT ) ; }
Distance : 4

2
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.SIGNIFICANCE_LEVEL , p , p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.SIGNIFICANCE_LEVEL , p , p , false ) ; }
Distance : 6

3
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.NO_DEGREES_OF_FREEDOM , p , p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.NO_DEGREES_OF_FREEDOM , p , p , false ) ; }
Distance : 6

4
Tree	if ( p <= NUMBER_CONSTANT ) { throw new IllegalStateException ( p , null ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new IllegalStateException ( p , null ) ; }
Distance : 3

5
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.SIGNIFICANCE_LEVEL , LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.SIGNIFICANCE_LEVEL , LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , NUMBER_CONSTANT , false ) ; }
Distance : 7

6
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p ) ; }
Distance : 2

7
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( p , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( p , NUMBER_CONSTANT , false ) ; }
Distance : 5

8
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( p ) ; }
Distance : 3

9
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p ) ; }
Distance : 2

10
Tree	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( p , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( p , NUMBER_CONSTANT , false ) ; }
Distance : 5

11
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Distance : 4

12
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.SIGNIFICANCE_LEVEL , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.SIGNIFICANCE_LEVEL , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 6

13
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT ) ; }
Distance : 4

14
Tree	if ( p <= NUMBER_CONSTANT ) { throw new DimensionMismatchException ( p , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new DimensionMismatchException ( p , NUMBER_CONSTANT , false ) ; }
Distance : 5

15
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.SIGNIFICANCE_LEVEL , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.SIGNIFICANCE_LEVEL , STRING_CONSTANT ) ; }
Distance : 3

16
Tree	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( LocalizedFormats.SIGNIFICANCE_LEVEL , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( LocalizedFormats.SIGNIFICANCE_LEVEL , p , p ) ; }
Distance : 4

17
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.NO_DEGREES_OF_FREEDOM , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.NO_DEGREES_OF_FREEDOM , STRING_CONSTANT ) ; }
Distance : 3

18
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p , p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p , p , false ) ; }
Distance : 6

19
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , NUMBER_CONSTANT , false ) ; }
Distance : 4

20
Tree	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( p , null ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( p , null ) ; }
Distance : 3

21
Tree	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT ) ; }
Distance : 4

22
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( p ) ; }
Distance : 3

23
Tree	if ( p <= NUMBER_CONSTANT ) { throw new IllegalStateException ( p , false , false , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new IllegalStateException ( p , false , false , false ) ; }
Distance : 7

24
Tree	if ( p <= NUMBER_CONSTANT ) { throw new IllegalArgumentException ( p , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new IllegalArgumentException ( p , STRING_CONSTANT ) ; }
Distance : 3

25
Tree	if ( p <= NUMBER_CONSTANT ) { throw new ArrayIndexOutOfBoundsException ( p , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new ArrayIndexOutOfBoundsException ( p , NUMBER_CONSTANT , false ) ; }
Distance : 5

26
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_DEGREES_OF_FREEDOM , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_DEGREES_OF_FREEDOM , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 6

27
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Distance : 3

28
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( STRING_CONSTANT , null ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( STRING_CONSTANT , null ) ; }
Distance : 3

29
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Distance : 4

30
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.SIGNIFICANCE_LEVEL , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.SIGNIFICANCE_LEVEL , STRING_CONSTANT ) ; }
Distance : 3

31
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.SIGNIFICANCE_LEVEL , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.SIGNIFICANCE_LEVEL , p ) ; }
Distance : 2

32
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( p , Es6ToEs3Util.CANNOT_CONVERT_YET ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( p , Es6ToEs3Util.CANNOT_CONVERT_YET ) ; }
Distance : 3

33
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.SIGNIFICANCE_LEVEL , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.SIGNIFICANCE_LEVEL , p , p ) ; }
Distance : 4

34
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_DEGREES_OF_FREEDOM , LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_DEGREES_OF_FREEDOM , LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , NUMBER_CONSTANT , false ) ; }
Distance : 7

35
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.NO_DEGREES_OF_FREEDOM , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.NO_DEGREES_OF_FREEDOM , p , p ) ; }
Distance : 4

36
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException < k > ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException < k > ( p ) ; }
Distance : 5

37
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , NUMBER_CONSTANT , false ) ; }
Distance : 7

38
Tree	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( STRING_CONSTANT , null ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( STRING_CONSTANT , null ) ; }
Distance : 3

39
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.NO_DEGREES_OF_FREEDOM , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.NO_DEGREES_OF_FREEDOM , p ) ; }
Distance : 2

40
Tree	if ( p <= NUMBER_CONSTANT ) { throw new IllegalStateException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new IllegalStateException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Distance : 4

41
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p ) ; }
Distance : 2

42
Tree	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( LocalizedFormats.SIGNIFICANCE_LEVEL , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( LocalizedFormats.SIGNIFICANCE_LEVEL , p ) ; }
Distance : 2

43
Tree	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( LocalizedFormats.SIGNIFICANCE_LEVEL , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( LocalizedFormats.SIGNIFICANCE_LEVEL , STRING_CONSTANT ) ; }
Distance : 3

44
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( p , null ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( p , null ) ; }
Distance : 3

45
Tree	if ( p <= NUMBER_CONSTANT ) { throw new IllegalStateException ( p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new IllegalStateException ( p , false ) ; }
Distance : 3

46
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.SIGNIFICANCE_LEVEL , p , p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.SIGNIFICANCE_LEVEL , p , p , false ) ; }
Distance : 6

47
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( p , false , false , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( p , false , false , false ) ; }
Distance : 7

48
Tree	if ( p <= NUMBER_CONSTANT ) { throw new IllegalStateException ( p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new IllegalStateException ( p , p ) ; }
Distance : 2

49
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_DEGREES_OF_FREEDOM , p , p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_DEGREES_OF_FREEDOM , p , p , false ) ; }
Distance : 6

50
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( p , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( p , STRING_CONSTANT ) ; }
Distance : 3

51
Tree	if ( p <= NUMBER_CONSTANT ) { throw new IllegalStateException ( STRING_CONSTANT , null ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new IllegalStateException ( STRING_CONSTANT , null ) ; }
Distance : 3

52
Tree	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Distance : 4

53
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( p , LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( p , LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT ) ; }
Distance : 3

54
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT ) ; }
Distance : 3

55
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , STRING_CONSTANT ) ; }
Distance : 3

56
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( STRING_CONSTANT , null ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( STRING_CONSTANT , null ) ; }
Distance : 3

57
Tree	if ( p <= NUMBER_CONSTANT ) { throw new ArrayIndexOutOfBoundsException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new ArrayIndexOutOfBoundsException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Distance : 4

58
Tree	if ( p <= NUMBER_CONSTANT ) { throw new ArrayIndexOutOfBoundsException ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new ArrayIndexOutOfBoundsException ( p ) ; }
Distance : 3

59
Tree	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( LocalizedFormats.SIGNIFICANCE_LEVEL , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( LocalizedFormats.SIGNIFICANCE_LEVEL , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 6

60
Tree	if ( p <= NUMBER_CONSTANT ) { throw new IllegalStateException ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new IllegalStateException ( p ) ; }
Distance : 3

61
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 6

62
Tree	if ( p <= NUMBER_CONSTANT ) { throw new IllegalArgumentException ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new IllegalArgumentException ( p ) ; }
Distance : 3

63
Tree	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p , p ) ; }
Distance : 4

64
Tree	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( p , false , false , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( p , false , false , false ) ; }
Distance : 7

65
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( p , p , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( p , p , NUMBER_CONSTANT ) ; }
Distance : 4

66
Tree	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p , p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p , p , false ) ; }
Distance : 6

67
Tree	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( p , p , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( p , p , NUMBER_CONSTANT ) ; }
Distance : 4

68
Tree	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( p , LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( p , LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT ) ; }
Distance : 3

69
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , STRING_CONSTANT ) ; }
Distance : 2

70
Tree	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( p , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( p , STRING_CONSTANT ) ; }
Distance : 3

71
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( p , false ) ; }
Distance : 3

72
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( p , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( p , NUMBER_CONSTANT , false ) ; }
Distance : 5

73
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p . getClass () ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p . getClass () ) ; }
Distance : 5

74
Tree	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( LocalizedFormats.SIGNIFICANCE_LEVEL , LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( LocalizedFormats.SIGNIFICANCE_LEVEL , LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , NUMBER_CONSTANT , false ) ; }
Distance : 7

75
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.SIGNIFICANCE_LEVEL ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.SIGNIFICANCE_LEVEL ) ; }
Distance : 4

76
Tree	if ( p <= NUMBER_CONSTANT ) { throw new IllegalStateException ( p , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new IllegalStateException ( p , NUMBER_CONSTANT , false ) ; }
Distance : 5

77
Tree	if ( p <= NUMBER_CONSTANT ) { throw new ArrayIndexOutOfBoundsException ( p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new ArrayIndexOutOfBoundsException ( p , p ) ; }
Distance : 2

78
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 6

79
Tree	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p ) ; }
Distance : 2

80
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.SIGNIFICANCE_LEVEL ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.SIGNIFICANCE_LEVEL ) ; }
Distance : 4

81
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , NUMBER_CONSTANT , ExpansionMode.MULTIPLICATIVE , NUMBER_CONSTANT , k ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , NUMBER_CONSTANT , ExpansionMode.MULTIPLICATIVE , NUMBER_CONSTANT , k ) ; }
Distance : 9

82
Tree	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( p , false ) ; }
Distance : 3

83
Tree	if ( p <= NUMBER_CONSTANT ) { throw new DimensionMismatchException ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new DimensionMismatchException ( p ) ; }
Distance : 3

84
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_DEGREES_OF_FREEDOM ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_DEGREES_OF_FREEDOM ) ; }
Distance : 4

85
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p , p ) ; }
Distance : 4

86
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT ) ; }
Distance : 4

87
Tree	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , STRING_CONSTANT ) ; }
Distance : 3

88
Tree	if ( p <= NUMBER_CONSTANT ) { throw new IllegalStateException ( p , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new IllegalStateException ( p , STRING_CONSTANT ) ; }
Distance : 3

89
Tree	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 6

90
Tree	if ( p <= NUMBER_CONSTANT ) { throw new DimensionMismatchException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new DimensionMismatchException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Distance : 4

91
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.NO_DEGREES_OF_FREEDOM ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.NO_DEGREES_OF_FREEDOM ) ; }
Distance : 4

92
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Distance : 4

93
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Distance : 4

94
Tree	if ( p <= NUMBER_CONSTANT ) { throw new DimensionMismatchException ( p , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new DimensionMismatchException ( p , STRING_CONSTANT ) ; }
Distance : 3

95
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_DEGREES_OF_FREEDOM , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_DEGREES_OF_FREEDOM , STRING_CONSTANT ) ; }
Distance : 3

96
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.SIGNIFICANCE_LEVEL , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.SIGNIFICANCE_LEVEL , p , p ) ; }
Distance : 4

97
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , STRING_CONSTANT ) ; }
Distance : 3

98
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_DEGREES_OF_FREEDOM , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_DEGREES_OF_FREEDOM , p , p ) ; }
Distance : 4

99
Tree	if ( p <= NUMBER_CONSTANT ) { throw new ArrayIndexOutOfBoundsException ( p , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new ArrayIndexOutOfBoundsException ( p , STRING_CONSTANT ) ; }
Distance : 3

100
Tree	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( p , p ) ; }
Distance : 2

101
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( p , Es6ToEs3Util.CANNOT_CONVERT_YET ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( p , Es6ToEs3Util.CANNOT_CONVERT_YET ) ; }
Distance : 3

102
Tree	if ( p <= NUMBER_CONSTANT ) { throw new IllegalStateException < k > ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new IllegalStateException < k > ( p ) ; }
Distance : 5

103
Tree	if ( p <= NUMBER_CONSTANT ) { throw new IllegalArgumentException ( p , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new IllegalArgumentException ( p , NUMBER_CONSTANT , false ) ; }
Distance : 5

104
Tree	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( p ) ; }
Distance : 3

105
Tree	if ( p <= NUMBER_CONSTANT ) { throw new IllegalStateException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new IllegalStateException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Distance : 4

106
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , NUMBER_CONSTANT , false ) ; }
Distance : 7

107
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( p , STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( p , STRING_CONSTANT ) ; }
Distance : 3

108
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( p , false , false , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( p , false , false , false ) ; }
Distance : 7

109
Tree	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p . getClass () ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p . getClass () ) ; }
Distance : 5

110
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.NO_DEGREES_OF_FREEDOM , LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.NO_DEGREES_OF_FREEDOM , LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , NUMBER_CONSTANT , false ) ; }
Distance : 7

111
Tree	if ( p <= NUMBER_CONSTANT ) { throw new IllegalStateException ( p , Es6ToEs3Util.CANNOT_CONVERT_YET ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new IllegalStateException ( p , Es6ToEs3Util.CANNOT_CONVERT_YET ) ; }
Distance : 3

112
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( p , p ) ; }
Distance : 2

113
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.SIGNIFICANCE_LEVEL , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.SIGNIFICANCE_LEVEL , p ) ; }
Distance : 2

114
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( p , null ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( p , null ) ; }
Distance : 3

115
Tree	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( LocalizedFormats.SIGNIFICANCE_LEVEL , p , p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( LocalizedFormats.SIGNIFICANCE_LEVEL , p , p , false ) ; }
Distance : 6

116
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.SIGNIFICANCE_LEVEL , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.SIGNIFICANCE_LEVEL , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 6

117
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p . getMessage () ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p . getMessage () ) ; }
Distance : 5

118
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.SIGNIFICANCE_LEVEL , LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.SIGNIFICANCE_LEVEL , LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT ) ; }
Distance : 3

119
Tree	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( LocalizedFormats.SIGNIFICANCE_LEVEL ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( LocalizedFormats.SIGNIFICANCE_LEVEL ) ; }
Distance : 4

120
Tree	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Distance : 4

121
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( p , p ) ; }
Distance : 2

122
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( p , false ) ; }
Distance : 3

123
Tree	if ( p <= NUMBER_CONSTANT ) { throw new DimensionMismatchException ( p , false , false , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new DimensionMismatchException ( p , false , false , false ) ; }
Distance : 7

124
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p , p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p , p , false ) ; }
Distance : 6

125
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , NUMBER_CONSTANT , TimeUnit.MILLISECONDS , NUMBER_CONSTANT , k ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , NUMBER_CONSTANT , TimeUnit.MILLISECONDS , NUMBER_CONSTANT , k ) ; }
Distance : 9

126
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_DEGREES_OF_FREEDOM , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_DEGREES_OF_FREEDOM , p ) ; }
Distance : 2

127
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.NO_DEGREES_OF_FREEDOM , LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.NO_DEGREES_OF_FREEDOM , LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT ) ; }
Distance : 3

128
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException < NumberIsTooLargeException > ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException < NumberIsTooLargeException > ( p ) ; }
Distance : 5

129
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.NO_DEGREES_OF_FREEDOM , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.NO_DEGREES_OF_FREEDOM , p , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 6

130
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p , p , k , sampleSize ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p , p , k , sampleSize ) ; }
Distance : 8

131
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_DEGREES_OF_FREEDOM , LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_DEGREES_OF_FREEDOM , LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT ) ; }
Distance : 3

132
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.SIGNIFICANCE_LEVEL , p . getClass () ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.SIGNIFICANCE_LEVEL , p . getClass () ) ; }
Distance : 5

133
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException < k > ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException < k > ( p ) ; }
Distance : 5

134
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p , p , k , k ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p , p , k , k ) ; }
Distance : 8

135
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p , p ) ; }
Distance : 4

136
Tree	if ( p <= NUMBER_CONSTANT ) { throw new IllegalArgumentException ( p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new IllegalArgumentException ( p , p ) ; }
Distance : 2

137
Tree	if ( p <= NUMBER_CONSTANT ) { throw new ArrayIndexOutOfBoundsException ( p , false , false , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new ArrayIndexOutOfBoundsException ( p , false , false , false ) ; }
Distance : 7

138
Tree	if ( p <= NUMBER_CONSTANT ) { throw new DimensionMismatchException ( p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new DimensionMismatchException ( p , false ) ; }
Distance : 3

139
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( p , LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( p , LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT ) ; }
Distance : 3

140
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false ) ; }
Distance : 2

141
Tree	if ( p <= NUMBER_CONSTANT ) { throw new DimensionMismatchException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new DimensionMismatchException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Distance : 4

142
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_DEGREES_OF_FREEDOM , p . getClass () ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_DEGREES_OF_FREEDOM , p . getClass () ) ; }
Distance : 5

143
Tree	if ( p <= NUMBER_CONSTANT ) { throw new IllegalStateException ( p , LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new IllegalStateException ( p , LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT ) ; }
Distance : 3

144
Tree	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException < k > ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException < k > ( p ) ; }
Distance : 5

145
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT ) ; }
Distance : 3

146
Tree	if ( p <= NUMBER_CONSTANT ) { throw new IllegalArgumentException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new IllegalArgumentException ( STRING_CONSTANT + STRING_CONSTANT ) ; }
Distance : 4

147
Tree	if ( p <= NUMBER_CONSTANT ) { throw new IllegalArgumentException ( p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new IllegalArgumentException ( p , false ) ; }
Distance : 3

148
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( p , p , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( p , p , NUMBER_CONSTANT ) ; }
Distance : 4

149
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p ) ; }
Distance : 1

150
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , NUMBER_CONSTANT , TimeUnit.MILLISECONDS , NUMBER_CONSTANT , k ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , NUMBER_CONSTANT , TimeUnit.MILLISECONDS , NUMBER_CONSTANT , k ) ; }
Distance : 9

151
Tree	if ( p <= NUMBER_CONSTANT ) { throw new ArrayIndexOutOfBoundsException ( p , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new ArrayIndexOutOfBoundsException ( p , false ) ; }
Distance : 3

152
Tree	if ( p <= NUMBER_CONSTANT ) { throw new DimensionMismatchException ( p , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new DimensionMismatchException ( p , p ) ; }
Distance : 2

153
Tree	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( LocalizedFormats.SIGNIFICANCE_LEVEL , LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( LocalizedFormats.SIGNIFICANCE_LEVEL , LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT ) ; }
Distance : 3

154
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.SIGNIFICANCE_LEVEL , LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , NUMBER_CONSTANT , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.SIGNIFICANCE_LEVEL , LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , NUMBER_CONSTANT , false ) ; }
Distance : 7

155
Tree	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( p , Es6ToEs3Util.CANNOT_CONVERT_YET ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( p , Es6ToEs3Util.CANNOT_CONVERT_YET ) ; }
Distance : 3

156
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p . getClass () ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p . getClass () ) ; }
Distance : 5

157
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Distance : 3

158
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.SIGNIFICANCE_LEVEL , LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.SIGNIFICANCE_LEVEL , LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT ) ; }
Distance : 3

159
Tree	if ( p <= NUMBER_CONSTANT ) { throw new DimensionMismatchException ( p , p , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new DimensionMismatchException ( p , p , NUMBER_CONSTANT ) ; }
Distance : 4

160
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , NUMBER_CONSTANT , values.length , NUMBER_CONSTANT , k ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , NUMBER_CONSTANT , values.length , NUMBER_CONSTANT , k ) ; }
Distance : 9

161
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p . getName () ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p . getName () ) ; }
Distance : 5

162
Tree	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new OutOfRangeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT ) ; }
Distance : 3

163
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p . getMessage () ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p . getMessage () ) ; }
Distance : 5

164
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false , false , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , false , false , false ) ; }
Distance : 6

165
Tree	if ( p <= NUMBER_CONSTANT ) { throw new ArrayIndexOutOfBoundsException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new ArrayIndexOutOfBoundsException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Distance : 4

166
Tree	if ( p <= NUMBER_CONSTANT ) { throw new IllegalArgumentException ( p , false , false , false ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new IllegalArgumentException ( p , false , false , false ) ; }
Distance : 7

167
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , NUMBER_CONSTANT , TimeUnit.MILLISECONDS , NUMBER_CONSTANT , norm ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , NUMBER_CONSTANT , TimeUnit.MILLISECONDS , NUMBER_CONSTANT , norm ) ; }
Distance : 9

168
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , NUMBER_CONSTANT , TimeUnit.MILLISECONDS , NUMBER_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , NUMBER_CONSTANT , TimeUnit.MILLISECONDS , NUMBER_CONSTANT , p ) ; }
Distance : 8

169
Tree	compiler = new UniformContinuousDistribution <> ( p , p , p ) ;
Code	compiler = new UniformContinuousDistribution <> ( p , p , p ) ;
Distance : 13

170
Tree	compiler = new ResizableDoubleArray <> ( p , p , p ) ;
Code	compiler = new ResizableDoubleArray <> ( p , p , p ) ;
Distance : 13

171
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p , p , leftType , k ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p , p , leftType , k ) ; }
Distance : 8

172
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p , p , sampleSize , sampleSize ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p , p , sampleSize , sampleSize ) ; }
Distance : 8

173
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , p , NUMBER_CONSTANT ) ; }
Distance : 3

174
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , NUMBER_CONSTANT , values.length , NUMBER_CONSTANT , norm ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , NUMBER_CONSTANT , values.length , NUMBER_CONSTANT , norm ) ; }
Distance : 9

175
Tree	if ( p <= NUMBER_CONSTANT ) { throw new ArrayIndexOutOfBoundsException ( p , p , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new ArrayIndexOutOfBoundsException ( p , p , NUMBER_CONSTANT ) ; }
Distance : 4

176
Tree	if ( p <= NUMBER_CONSTANT ) { throw new DimensionMismatchException ( STRING_CONSTANT , null ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new DimensionMismatchException ( STRING_CONSTANT , null ) ; }
Distance : 3

177
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException < NullArgumentException > ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException < NullArgumentException > ( p ) ; }
Distance : 5

178
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , NUMBER_CONSTANT , values.length , NUMBER_CONSTANT , k ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , NUMBER_CONSTANT , values.length , NUMBER_CONSTANT , k ) ; }
Distance : 9

179
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , null ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( p , null ) ; }
Distance : 2

180
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p , p , sampleSize , k ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p , p , sampleSize , k ) ; }
Distance : 8

181
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException < TypeMismatch > ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException < TypeMismatch > ( p ) ; }
Distance : 5

182
Tree	if ( p <= NUMBER_CONSTANT ) { throw new DimensionMismatchException ( p , null ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new DimensionMismatchException ( p , null ) ; }
Distance : 3

183
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException < NumberIsTooLargeException > ( p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException < NumberIsTooLargeException > ( p ) ; }
Distance : 5

184
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p , p , k , sampleSize ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p , p , k , sampleSize ) ; }
Distance : 8

185
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p , p , leftType , sampleSize ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NumberIsTooLargeException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p , p , leftType , sampleSize ) ; }
Distance : 8

186
Tree	if ( p <= NUMBER_CONSTANT ) { throw new IllegalArgumentException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new IllegalArgumentException ( STRING_CONSTANT + STRING_CONSTANT , p ) ; }
Distance : 4

187
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p , p , k , k ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NullArgumentException ( LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT , p , p , k , k ) ; }
Distance : 8

188
Tree	if ( p <= NUMBER_CONSTANT ) { throw new IllegalArgumentException ( p , p , NUMBER_CONSTANT ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new IllegalArgumentException ( p , p , NUMBER_CONSTANT ) ; }
Distance : 4

189
Tree	if ( p <= NUMBER_CONSTANT ) { throw new IllegalArgumentException ( p , null ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new IllegalArgumentException ( p , null ) ; }
Distance : 3

190
Tree	if ( p <= NUMBER_CONSTANT ) { throw new IllegalArgumentException ( STRING_CONSTANT , null ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new IllegalArgumentException ( STRING_CONSTANT , null ) ; }
Distance : 3

191
Tree	compiler = new ChiSquaredDistributionImpl <> ( p , p , p ) ;
Code	compiler = new ChiSquaredDistributionImpl <> ( p , p , p ) ;
Distance : 13

192
Tree	compiler = new Interval <> ( p , p , p ) ;
Code	compiler = new Interval <> ( p , p , p ) ;
Distance : 13

193
Tree	compiler = new Well19937c <> ( p , p , p ) ;
Code	compiler = new Well19937c <> ( p , p , p ) ;
Distance : 13

194
Tree	if ( p <= NUMBER_CONSTANT ) { throw new ArrayIndexOutOfBoundsException ( p , null ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new ArrayIndexOutOfBoundsException ( p , null ) ; }
Distance : 3

195
Tree	compiler = new IllegalFieldValueException <> ( p , p , p ) ;
Code	compiler = new IllegalFieldValueException <> ( p , p , p ) ;
Distance : 13

196
Tree	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , null ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new NotStrictlyPositiveException ( STRING_CONSTANT , null ) ; }
Distance : 2

197
Tree	compiler = new Circle <> ( p , p , p ) ;
Code	compiler = new Circle <> ( p , p , p ) ;
Distance : 13

198
Tree	if ( p <= NUMBER_CONSTANT ) { throw new ArrayIndexOutOfBoundsException ( STRING_CONSTANT , null ) ; }
Code	if ( p <= NUMBER_CONSTANT ) { throw new ArrayIndexOutOfBoundsException ( STRING_CONSTANT , null ) ; }
Distance : 3

199
Tree	compiler = new DelayedExecution <> ( p , p , p ) ;
Code	compiler = new DelayedExecution <> ( p , p , p ) ;
Distance : 13

========================================================================


========================================================================
Example Number: 60
Parent Code is: 
{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : b ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Float.NaN : a ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (16 (36 (214{val=(}) (27 (800{val=a}) (252{val=<=}) (800{val=b})) (215{val=)})) (233{val=?}) (800{val=b}) (226{val=:}) (36 (214{val=(}) (16 (32 (800{val=Float}) (235{val=.}) (802{val=isNaN}) (214{val=(}) (27 (800{val=a}) (200{val=+}) (800{val=b})) (215{val=)})) (233{val=?}) (40{val=Float.NaN}) (226{val=:}) (800{val=b})) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (16 (36 (214{val=(}) (27 (800{val=a}) (252{val=<=}) (800{val=b})) (215{val=)})) (233{val=?}) (800{val=b}) (226{val=:}) (36 (214{val=(}) (16 (32 (800{val=Float}) (235{val=.}) (802{val=isNaN}) (214{val=(}) (27 (800{val=a}) (200{val=+}) (800{val=b})) (215{val=)})) (233{val=?}) (40{val=Float.NaN}) (226{val=:}) (800{val=a})) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/59/parent/src_main_java_org_apache_commons_math_util_FastMath.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 24
Wrong
========================================================================
False

0
Tree	{ return a == NUMBER_CONSTANT ? false : getMaximumValue ( ( int ) getEntry ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : getMaximumValue ( ( int ) getEntry ( ( a ) b , b ) , b ) ; }
Distance : 17

1
Tree	{ return a == NUMBER_CONSTANT ? false : getValue ( ( int ) getEntry ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : getValue ( ( int ) getEntry ( ( a ) b , b ) , b ) ; }
Distance : 17

2
Tree	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isBlock ( ( int ) getEntry ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isBlock ( ( int ) getEntry ( ( a ) b , b ) , b ) ; }
Distance : 17

3
Tree	{ return a == NUMBER_CONSTANT ? false : intValue ( ( int ) getEntry ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : intValue ( ( int ) getEntry ( ( a ) b , b ) , b ) ; }
Distance : 17

4
Tree	{ return a == NUMBER_CONSTANT ? false : getMaximumValue ( ( int ) getEntry ( ( a ) b , b ) , threshold ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : getMaximumValue ( ( int ) getEntry ( ( a ) b , b ) , threshold ) ; }
Distance : 17

5
Tree	{ return a == NUMBER_CONSTANT ? false : getMaximumValue ( ( int ) getEntry ( ( a ) b , b ) , FastMath ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : getMaximumValue ( ( int ) getEntry ( ( a ) b , b ) , FastMath ) ; }
Distance : 17

6
Tree	{ return a == NUMBER_CONSTANT ? false : floor ( ( int ) getEntry ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : floor ( ( int ) getEntry ( ( a ) b , b ) , b ) ; }
Distance : 17

7
Tree	{ return a == NUMBER_CONSTANT ? false : getEntry ( ( int ) getEntry ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : getEntry ( ( int ) getEntry ( ( a ) b , b ) , b ) ; }
Distance : 17

8
Tree	{ return a == NUMBER_CONSTANT ? false : getEntry ( ( int ) getEntry ( ( a ) b , b ) , threshold ) ; }
Code	{ return a == NUMBER_CONSTANT ? false : getEntry ( ( int ) getEntry ( ( a ) b , b ) , threshold ) ; }
Distance : 17

9
Tree	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : getEntry ( ( int ) getEntry ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : getEntry ( ( int ) getEntry ( ( a ) b , b ) , b ) ; }
Distance : 17

10
Tree	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : hashCode ( ( int ) getEntry ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : hashCode ( ( int ) getEntry ( ( a ) b , b ) , b ) ; }
Distance : 17

11
Tree	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isBlock ( ( int ) getEntry ( ( a ) b , b ) , threshold ) ; }
Code	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isBlock ( ( int ) getEntry ( ( a ) b , b ) , threshold ) ; }
Distance : 17

12
Tree	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isBlock ( ( int ) getEntry ( ( a ) b , b ) , FastMath ) ; }
Code	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : isBlock ( ( int ) getEntry ( ( a ) b , b ) , FastMath ) ; }
Distance : 17

13
Tree	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : getEntry ( ( int ) getEntry ( ( a ) b , b ) , threshold ) ; }
Code	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : getEntry ( ( int ) getEntry ( ( a ) b , b ) , threshold ) ; }
Distance : 17

14
Tree	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : getValue ( ( int ) getEntry ( ( a ) b , b ) , b ) ; }
Code	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : getValue ( ( int ) getEntry ( ( a ) b , b ) , b ) ; }
Distance : 17

15
Tree	{ return ( a <= b ) ? FastMath : ( Float . isNaN ( a + b ) ? Double.MIN_VALUE : b ) ; }
Code	{ return ( a <= b ) ? FastMath : ( Float . isNaN ( a + b ) ? Double.MIN_VALUE : b ) ; }
Distance : 3

16
Tree	{ return ( a <= b ) ? FastMath : ( Float . isNaN ( a + b ) ? Boolean.FALSE : b ) ; }
Code	{ return ( a <= b ) ? FastMath : ( Float . isNaN ( a + b ) ? Boolean.FALSE : b ) ; }
Distance : 3

17
Tree	{ return ( a <= b ) ? FastMath : ( Float . isNaN ( a + b ) ? Boolean.FALSE : FastMath ) ; }
Code	{ return ( a <= b ) ? FastMath : ( Float . isNaN ( a + b ) ? Boolean.FALSE : FastMath ) ; }
Distance : 3

18
Tree	{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Boolean.FALSE : b ) ; }
Code	{ return ( a <= b ) ? b : ( Float . isNaN ( a + b ) ? Boolean.FALSE : b ) ; }
Distance : 2

19
Tree	{ return ( a <= b ) ? FastMath : ( Float . isNaN ( a + b ) ? Boolean.FALSE : threshold ) ; }
Code	{ return ( a <= b ) ? FastMath : ( Float . isNaN ( a + b ) ? Boolean.FALSE : threshold ) ; }
Distance : 3

20
Tree	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : getEntry ( ( int ) getEntry ( ( a ) b , b ) , FastMath ) ; }
Code	{ return a == NUMBER_CONSTANT ? NUMBER_CONSTANT : getEntry ( ( int ) getEntry ( ( a ) b , b ) , FastMath ) ; }
Distance : 17

21
Tree	{ return ( a <= b ) ? FastMath : ( Float . isNaN ( a + b ) ? testArray.length : b ) ; }
Code	{ return ( a <= b ) ? FastMath : ( Float . isNaN ( a + b ) ? testArray.length : b ) ; }
Distance : 3

22
Tree	{ return ( a <= b ) ? FastMath : ( Float . getEntry ( a + b ) ? Boolean.FALSE : b ) ; }
Code	{ return ( a <= b ) ? FastMath : ( Float . getEntry ( a + b ) ? Boolean.FALSE : b ) ; }
Distance : 4

23
Tree	{ return ( a <= b ) ? FastMath : ( Float . isNaN ( a + b ) ? BooleanLiteralSet.BOTH : b ) ; }
Code	{ return ( a <= b ) ? FastMath : ( Float . isNaN ( a + b ) ? BooleanLiteralSet.BOTH : b ) ; }
Distance : 3

========================================================================


========================================================================
Example Number: 61
Parent Code is: 
return fit ( new Gaussian.Parametric () , guess ) ;
-------------------------------------------------------------------------------
Child code is: 
return fit ( guess ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=fit}) (214{val=(}) (14 (304{val=new}) (43 (40{val=Gaussian.Parametric})) (216{val=()})) (234{val=,}) (800{val=guess}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=fit}) (214{val=(}) (800{val=guess}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/58/parent/src_main_java_org_apache_commons_math_optimization_fitting_GaussianFitter.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return recordDeepStubMock ( crosshairState . ofThisVm () , STRING_CONSTANT , INVALID_NO_SIDE_EFFECT_ANNOTATION ) ;
Code	return recordDeepStubMock ( crosshairState . ofThisVm () , STRING_CONSTANT , INVALID_NO_SIDE_EFFECT_ANNOTATION ) ;
Distance : 9

1
Tree	return recordDeepStubMock ( new InputStreamReader <> ( VALUE ) , multiplicand ) ;
Code	return recordDeepStubMock ( new InputStreamReader <> ( VALUE ) , multiplicand ) ;
Distance : 9

2
Tree	return recordDeepStubMock ( new MinimizeExitPoints <> ( VALUE ) , remainingRegion ) ;
Code	return recordDeepStubMock ( new MinimizeExitPoints <> ( VALUE ) , remainingRegion ) ;
Distance : 9

3
Tree	return recordDeepStubMock ( new MinimizeExitPoints <> ( contractionCriterion ) , multiplicand ) ;
Code	return recordDeepStubMock ( new MinimizeExitPoints <> ( contractionCriterion ) , multiplicand ) ;
Distance : 9

4
Tree	return recordDeepStubMock ( injectee . copySelf () , STRING_CONSTANT , zipFile1 ) ;
Code	return recordDeepStubMock ( injectee . copySelf () , STRING_CONSTANT , zipFile1 ) ;
Distance : 9

5
Tree	return recordDeepStubMock ( crosshairState . copySelf () , STRING_CONSTANT , zipFile1 ) ;
Code	return recordDeepStubMock ( crosshairState . copySelf () , STRING_CONSTANT , zipFile1 ) ;
Distance : 9

6
Tree	return recordDeepStubMock ( injectee . ofThisVm () , STRING_CONSTANT , zipFile1 ) ;
Code	return recordDeepStubMock ( injectee . ofThisVm () , STRING_CONSTANT , zipFile1 ) ;
Distance : 9

7
Tree	return recordDeepStubMock ( crosshairState . ofThisVm () , STRING_CONSTANT , zipFile1 ) ;
Code	return recordDeepStubMock ( crosshairState . ofThisVm () , STRING_CONSTANT , zipFile1 ) ;
Distance : 9

8
Tree	return invx . recordDeepStubMock () . isAtLeast ( STRING_CONSTANT , testNameNode ( NUMBER_CONSTANT ) ) ;
Code	return invx . recordDeepStubMock () . isAtLeast ( STRING_CONSTANT , testNameNode ( NUMBER_CONSTANT ) ) ;
Distance : 12

9
Tree	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( injectee . copySelf () , NUMBER_CONSTANT , CHAR_CONS ) ;
Code	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( injectee . copySelf () , NUMBER_CONSTANT , CHAR_CONS ) ;
Distance : 11

10
Tree	return slot . recordDeepStubMock () . isAtLeast ( STRING_CONSTANT , getNativeNullType ( NUMBER_CONSTANT ) ) ;
Code	return slot . recordDeepStubMock () . isAtLeast ( STRING_CONSTANT , getNativeNullType ( NUMBER_CONSTANT ) ) ;
Distance : 12

11
Tree	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( DEFAULT_INITIAL_CAPACITY . copySelf () , NUMBER_CONSTANT , CHAR_CONS ) ;
Code	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( DEFAULT_INITIAL_CAPACITY . copySelf () , NUMBER_CONSTANT , CHAR_CONS ) ;
Distance : 11

12
Tree	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( actualInvocationStackTrace . copySelf () , NUMBER_CONSTANT , CHAR_CONS ) ;
Code	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( actualInvocationStackTrace . copySelf () , NUMBER_CONSTANT , CHAR_CONS ) ;
Distance : 11

13
Tree	return invx . recordDeepStubMock () . isAtLeast ( STRING_CONSTANT , mulAndCheck ( NUMBER_CONSTANT ) ) ;
Code	return invx . recordDeepStubMock () . isAtLeast ( STRING_CONSTANT , mulAndCheck ( NUMBER_CONSTANT ) ) ;
Distance : 12

14
Tree	return slot . recordDeepStubMock ( quoteless . copySelf () , NUMBER_CONSTANT , CHAR_CONS ) ;
Code	return slot . recordDeepStubMock ( quoteless . copySelf () , NUMBER_CONSTANT , CHAR_CONS ) ;
Distance : 11

15
Tree	return slot . recordDeepStubMock ( xNew . copySelf () , NUMBER_CONSTANT , CHAR_CONS ) ;
Code	return slot . recordDeepStubMock ( xNew . copySelf () , NUMBER_CONSTANT , CHAR_CONS ) ;
Distance : 11

16
Tree	return slot . recordDeepStubMock ( currentScript.legacyNamespace , STRING_CONSTANT , INVALID_NO_SIDE_EFFECT_ANNOTATION , CONFLICTING_EXTENDED_TYPE . getString () ) ;
Code	return slot . recordDeepStubMock ( currentScript.legacyNamespace , STRING_CONSTANT , INVALID_NO_SIDE_EFFECT_ANNOTATION , CONFLICTING_EXTENDED_TYPE . getString () ) ;
Distance : 13

17
Tree	return slot . recordDeepStubMock ( polyfill.polyfillVersion , STRING_CONSTANT , INVALID_NO_SIDE_EFFECT_ANNOTATION , CONFLICTING_EXTENDED_TYPE . getString () ) ;
Code	return slot . recordDeepStubMock ( polyfill.polyfillVersion , STRING_CONSTANT , INVALID_NO_SIDE_EFFECT_ANNOTATION , CONFLICTING_EXTENDED_TYPE . getString () ) ;
Distance : 13

18
Tree	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( currentScript.legacyNamespace , STRING_CONSTANT , INVALID_NO_SIDE_EFFECT_ANNOTATION , CONFLICTING_EXTENDED_TYPE . getString () ) ;
Code	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( currentScript.legacyNamespace , STRING_CONSTANT , INVALID_NO_SIDE_EFFECT_ANNOTATION , CONFLICTING_EXTENDED_TYPE . getString () ) ;
Distance : 13

19
Tree	return slot . recordDeepStubMock ( idToken.value , STRING_CONSTANT , INVALID_NO_SIDE_EFFECT_ANNOTATION , CONFLICTING_EXTENDED_TYPE . getString () ) ;
Code	return slot . recordDeepStubMock ( idToken.value , STRING_CONSTANT , INVALID_NO_SIDE_EFFECT_ANNOTATION , CONFLICTING_EXTENDED_TYPE . getString () ) ;
Distance : 13

20
Tree	return optimize ( null ) ;
Code	return optimize ( null ) ;
Distance : 2

21
Tree	return slot . recordDeepStubMock ( Level.FINE , STRING_CONSTANT , INVALID_NO_SIDE_EFFECT_ANNOTATION , CONFLICTING_EXTENDED_TYPE . getString () ) ;
Code	return slot . recordDeepStubMock ( Level.FINE , STRING_CONSTANT , INVALID_NO_SIDE_EFFECT_ANNOTATION , CONFLICTING_EXTENDED_TYPE . getString () ) ;
Distance : 13

22
Tree	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( polyfill.polyfillVersion , STRING_CONSTANT , INVALID_NO_SIDE_EFFECT_ANNOTATION , CONFLICTING_EXTENDED_TYPE . getString () ) ;
Code	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( polyfill.polyfillVersion , STRING_CONSTANT , INVALID_NO_SIDE_EFFECT_ANNOTATION , CONFLICTING_EXTENDED_TYPE . getString () ) ;
Distance : 13

23
Tree	return invx . recordDeepStubMock ( currentScript.legacyNamespace , STRING_CONSTANT , INVALID_NO_SIDE_EFFECT_ANNOTATION , CONFLICTING_EXTENDED_TYPE . getString () ) ;
Code	return invx . recordDeepStubMock ( currentScript.legacyNamespace , STRING_CONSTANT , INVALID_NO_SIDE_EFFECT_ANNOTATION , CONFLICTING_EXTENDED_TYPE . getString () ) ;
Distance : 13

24
Tree	return recordDeepStubMock ( STRING_CONSTANT , zipFile1 . getClass () , runInMultipleThreads ( NUMBER_CONSTANT ) ) ;
Code	return recordDeepStubMock ( STRING_CONSTANT , zipFile1 . getClass () , runInMultipleThreads ( NUMBER_CONSTANT ) ) ;
Distance : 12

25
Tree	return isSubtypeOfHelper ( null ) ;
Code	return isSubtypeOfHelper ( null ) ;
Distance : 2

26
Tree	return recordDeepStubMock ( STRING_CONSTANT , zipFile1 . getSimplifiedName () , runInMultipleThreads ( NUMBER_CONSTANT ) ) ;
Code	return recordDeepStubMock ( STRING_CONSTANT , zipFile1 . getSimplifiedName () , runInMultipleThreads ( NUMBER_CONSTANT ) ) ;
Distance : 12

27
Tree	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( idToken.value , STRING_CONSTANT , INVALID_NO_SIDE_EFFECT_ANNOTATION , CONFLICTING_EXTENDED_TYPE . getString () ) ;
Code	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( idToken.value , STRING_CONSTANT , INVALID_NO_SIDE_EFFECT_ANNOTATION , CONFLICTING_EXTENDED_TYPE . getString () ) ;
Distance : 13

28
Tree	return this . standardTickUnits . wasCasted ( JAVA_1_4 . isUnknownObject () ) ;
Code	return this . standardTickUnits . wasCasted ( JAVA_1_4 . isUnknownObject () ) ;
Distance : 9

29
Tree	return checkUnusedLocals . recordDeepStubMock ( this . bins . bins ) ;
Code	return checkUnusedLocals . recordDeepStubMock ( this . bins . bins ) ;
Distance : 8

30
Tree	return recordDeepStubMock ( STRING_CONSTANT , zipFile1 . toLowerCase () , runInMultipleThreads ( NUMBER_CONSTANT ) ) ;
Code	return recordDeepStubMock ( STRING_CONSTANT , zipFile1 . toLowerCase () , runInMultipleThreads ( NUMBER_CONSTANT ) ) ;
Distance : 12

31
Tree	return this . standardTickUnits . wasCasted ( INDEX_OFFSET . isUnknownObject () ) ;
Code	return this . standardTickUnits . wasCasted ( INDEX_OFFSET . isUnknownObject () ) ;
Distance : 9

32
Tree	return recordDeepStubMock ( polyfill.polyfillVersion , CONFLICTING_EXTENDED_TYPE , DEFAULT_ABSOLUTE_ACCURACY . getString () , getTemplateTypes ( NUMBER_CONSTANT ) ) ;
Code	return recordDeepStubMock ( polyfill.polyfillVersion , CONFLICTING_EXTENDED_TYPE , DEFAULT_ABSOLUTE_ACCURACY . getString () , getTemplateTypes ( NUMBER_CONSTANT ) ) ;
Distance : 14

33
Tree	return this . standardTickUnits . wasCasted ( JAVA_1_4 . copySelf () ) ;
Code	return this . standardTickUnits . wasCasted ( JAVA_1_4 . copySelf () ) ;
Distance : 9

34
Tree	return recordDeepStubMock ( new MinimizeExitPoints < Rule > ( errorType ) , multiplicand ) ;
Code	return recordDeepStubMock ( new MinimizeExitPoints < Rule > ( errorType ) , multiplicand ) ;
Distance : 11

35
Tree	return checkUnusedLocals . recordDeepStubMock () . multiplicand . get ( CHAR_CONS ) ;
Code	return checkUnusedLocals . recordDeepStubMock () . multiplicand . get ( CHAR_CONS ) ;
Distance : 9

36
Tree	return topScope . recordDeepStubMock ( this . bins . bins ) ;
Code	return topScope . recordDeepStubMock ( this . bins . bins ) ;
Distance : 8

37
Tree	return recordDeepStubMock ( polyfill.polyfillVersion , multiplicand , DEFAULT_ABSOLUTE_ACCURACY . getString () , getTemplateTypes ( NUMBER_CONSTANT ) ) ;
Code	return recordDeepStubMock ( polyfill.polyfillVersion , multiplicand , DEFAULT_ABSOLUTE_ACCURACY . getString () , getTemplateTypes ( NUMBER_CONSTANT ) ) ;
Distance : 14

38
Tree	return recordDeepStubMock ( new MethodAttributeAppender.ForInstrumentedMethod < Euclidean3D > ( errorType ) , multiplicand ) ;
Code	return recordDeepStubMock ( new MethodAttributeAppender.ForInstrumentedMethod < Euclidean3D > ( errorType ) , multiplicand ) ;
Distance : 11

39
Tree	return invx . recordDeepStubMock () . remainingRegion . get ( CHAR_CONS ) ;
Code	return invx . recordDeepStubMock () . remainingRegion . get ( CHAR_CONS ) ;
Distance : 9

40
Tree	return recordDeepStubMock ( new MethodAttributeAppender.ForInstrumentedMethod < CharacterCodingException > ( errorType ) , multiplicand ) ;
Code	return recordDeepStubMock ( new MethodAttributeAppender.ForInstrumentedMethod < CharacterCodingException > ( errorType ) , multiplicand ) ;
Distance : 11

41
Tree	return recordDeepStubMock ( new MethodAttributeAppender.ForInstrumentedMethod < StrategyAndWidth > ( errorType ) , multiplicand ) ;
Code	return recordDeepStubMock ( new MethodAttributeAppender.ForInstrumentedMethod < StrategyAndWidth > ( errorType ) , multiplicand ) ;
Distance : 11

42
Tree	return slot . recordDeepStubMock ( this . bins ) ;
Code	return slot . recordDeepStubMock ( this . bins ) ;
Distance : 6

43
Tree	return topScope . recordDeepStubMock () . multiplicand . get ( CHAR_CONS ) ;
Code	return topScope . recordDeepStubMock () . multiplicand . get ( CHAR_CONS ) ;
Distance : 9

44
Tree	return recordDeepStubMock ( new MethodAttributeAppender.ForInstrumentedMethod < Euclidean3D > ( chord ) , multiplicand ) ;
Code	return recordDeepStubMock ( new MethodAttributeAppender.ForInstrumentedMethod < Euclidean3D > ( chord ) , multiplicand ) ;
Distance : 11

45
Tree	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( this . bins ) ;
Code	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( this . bins ) ;
Distance : 6

46
Tree	return recordDeepStubMock ( new MethodAttributeAppender.ForInstrumentedMethod < CharacterCodingException > ( chord ) , multiplicand ) ;
Code	return recordDeepStubMock ( new MethodAttributeAppender.ForInstrumentedMethod < CharacterCodingException > ( chord ) , multiplicand ) ;
Distance : 11

47
Tree	return recordDeepStubMock ( new MethodAttributeAppender.ForInstrumentedMethod < Euclidean3D > ( bfData ) , multiplicand ) ;
Code	return recordDeepStubMock ( new MethodAttributeAppender.ForInstrumentedMethod < Euclidean3D > ( bfData ) , multiplicand ) ;
Distance : 11

48
Tree	return recordDeepStubMock ( new MethodAttributeAppender.ForInstrumentedMethod < StrategyAndWidth > ( chord ) , multiplicand ) ;
Code	return recordDeepStubMock ( new MethodAttributeAppender.ForInstrumentedMethod < StrategyAndWidth > ( chord ) , multiplicand ) ;
Distance : 11

49
Tree	return invx . recordDeepStubMock ( this . bins ) ;
Code	return invx . recordDeepStubMock ( this . bins ) ;
Distance : 6

50
Tree	return recordDeepStubMock ( null ) ;
Code	return recordDeepStubMock ( null ) ;
Distance : 2

51
Tree	return recordDeepStubMock ( new MethodAttributeAppender.ForInstrumentedMethod < CharacterCodingException > ( bfData ) , multiplicand ) ;
Code	return recordDeepStubMock ( new MethodAttributeAppender.ForInstrumentedMethod < CharacterCodingException > ( bfData ) , multiplicand ) ;
Distance : 11

52
Tree	return recordDeepStubMock ( new MinimizeExitPoints <> ( VALUE ) , multiplicand ) ;
Code	return recordDeepStubMock ( new MinimizeExitPoints <> ( VALUE ) , multiplicand ) ;
Distance : 9

53
Tree	return isTheObjectType ( null ) ;
Code	return isTheObjectType ( null ) ;
Distance : 2

54
Tree	return checkUnusedLocals . recordDeepStubMock ( this . bins ) ;
Code	return checkUnusedLocals . recordDeepStubMock ( this . bins ) ;
Distance : 6

55
Tree	return replaceNode ( null ) ;
Code	return replaceNode ( null ) ;
Distance : 2

56
Tree	return eval ( null ) ;
Code	return eval ( null ) ;
Distance : 2

57
Tree	return topScope . recordDeepStubMock ( this . bins ) ;
Code	return topScope . recordDeepStubMock ( this . bins ) ;
Distance : 6

58
Tree	return recordDeepStubMock ( new TimeZoneOffset <> ( VALUE ) , multiplicand ) ;
Code	return recordDeepStubMock ( new TimeZoneOffset <> ( VALUE ) , multiplicand ) ;
Distance : 9

59
Tree	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( polyfill.polyfillVersion , STRING_CONSTANT , INVALID_NO_SIDE_EFFECT_ANNOTATION , CONFLICTING_EXTENDED_TYPE . getString ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Code	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( polyfill.polyfillVersion , STRING_CONSTANT , INVALID_NO_SIDE_EFFECT_ANNOTATION , CONFLICTING_EXTENDED_TYPE . getString ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Distance : 17

60
Tree	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock () . isAtLeast ( STRING_CONSTANT , mulAndCheck ( NUMBER_CONSTANT ) ) ;
Code	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock () . isAtLeast ( STRING_CONSTANT , mulAndCheck ( NUMBER_CONSTANT ) ) ;
Distance : 12

61
Tree	return quartiles . recordDeepStubMock ( this . bins ) ;
Code	return quartiles . recordDeepStubMock ( this . bins ) ;
Distance : 6

62
Tree	return findPluginImplementation ( null ) ;
Code	return findPluginImplementation ( null ) ;
Distance : 2

63
Tree	return slot . recordDeepStubMock ( injectee . copySelf () , NUMBER_CONSTANT , CHAR_CONS ) ;
Code	return slot . recordDeepStubMock ( injectee . copySelf () , NUMBER_CONSTANT , CHAR_CONS ) ;
Distance : 11

64
Tree	return invx . recordDeepStubMock ( currentScript.legacyNamespace , STRING_CONSTANT , INVALID_NO_SIDE_EFFECT_ANNOTATION , CONFLICTING_EXTENDED_TYPE . getString ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Code	return invx . recordDeepStubMock ( currentScript.legacyNamespace , STRING_CONSTANT , INVALID_NO_SIDE_EFFECT_ANNOTATION , CONFLICTING_EXTENDED_TYPE . getString ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Distance : 17

65
Tree	return isDigits ( null ) ;
Code	return isDigits ( null ) ;
Distance : 2

66
Tree	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( idToken.value , STRING_CONSTANT , INVALID_NO_SIDE_EFFECT_ANNOTATION , CONFLICTING_EXTENDED_TYPE . getString ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Code	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( idToken.value , STRING_CONSTANT , INVALID_NO_SIDE_EFFECT_ANNOTATION , CONFLICTING_EXTENDED_TYPE . getString ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Distance : 17

67
Tree	return this . standardTickUnits . wasCasted ( INDEX_OFFSET . copySelf () ) ;
Code	return this . standardTickUnits . wasCasted ( INDEX_OFFSET . copySelf () ) ;
Distance : 9

68
Tree	return slot . recordDeepStubMock ( DEFAULT_INITIAL_CAPACITY . copySelf () , NUMBER_CONSTANT , CHAR_CONS ) ;
Code	return slot . recordDeepStubMock ( DEFAULT_INITIAL_CAPACITY . copySelf () , NUMBER_CONSTANT , CHAR_CONS ) ;
Distance : 11

69
Tree	return slot . recordDeepStubMock ( actualInvocationStackTrace . copySelf () , NUMBER_CONSTANT , CHAR_CONS ) ;
Code	return slot . recordDeepStubMock ( actualInvocationStackTrace . copySelf () , NUMBER_CONSTANT , CHAR_CONS ) ;
Distance : 11

70
Tree	return recordDeepStubMock ( STRING_CONSTANT , zipFile1 . getScopeRoot () , getColumnDimension ( NUMBER_CONSTANT ) ) ;
Code	return recordDeepStubMock ( STRING_CONSTANT , zipFile1 . getScopeRoot () , getColumnDimension ( NUMBER_CONSTANT ) ) ;
Distance : 12

71
Tree	return recordDeepStubMock ( STRING_CONSTANT , zipFile1 . getScopeRoot () , runInMultipleThreads ( NUMBER_CONSTANT ) ) ;
Code	return recordDeepStubMock ( STRING_CONSTANT , zipFile1 . getScopeRoot () , runInMultipleThreads ( NUMBER_CONSTANT ) ) ;
Distance : 12

72
Tree	return recordDeepStubMock ( STRING_CONSTANT , zipFile1 . toStringTree () , getColumnDimension ( NUMBER_CONSTANT ) ) ;
Code	return recordDeepStubMock ( STRING_CONSTANT , zipFile1 . toStringTree () , getColumnDimension ( NUMBER_CONSTANT ) ) ;
Distance : 12

73
Tree	return this . standardTickUnits . getBottomObject ( JAVA_1_4 . isUnknownObject () ) ;
Code	return this . standardTickUnits . getBottomObject ( JAVA_1_4 . isUnknownObject () ) ;
Distance : 9

74
Tree	return recordDeepStubMock ( STRING_CONSTANT , zipFile1 . toStringTree () , runInMultipleThreads ( NUMBER_CONSTANT ) ) ;
Code	return recordDeepStubMock ( STRING_CONSTANT , zipFile1 . toStringTree () , runInMultipleThreads ( NUMBER_CONSTANT ) ) ;
Distance : 12

75
Tree	return this . standardTickUnits . getBottomObject ( INDEX_OFFSET . isUnknownObject () ) ;
Code	return this . standardTickUnits . getBottomObject ( INDEX_OFFSET . isUnknownObject () ) ;
Distance : 9

76
Tree	return slot . recordDeepStubMock () . isAtLeast ( STRING_CONSTANT , getDiagnosticGroups ( NUMBER_CONSTANT ) ) ;
Code	return slot . recordDeepStubMock () . isAtLeast ( STRING_CONSTANT , getDiagnosticGroups ( NUMBER_CONSTANT ) ) ;
Distance : 12

77
Tree	return this . standardTickUnits . wasCasted ( JAVA_1_4 . getGenericReturnType () ) ;
Code	return this . standardTickUnits . wasCasted ( JAVA_1_4 . getGenericReturnType () ) ;
Distance : 9

78
Tree	return this . standardTickUnits . getBottomObject ( JAVA_1_4 . copySelf () ) ;
Code	return this . standardTickUnits . getBottomObject ( JAVA_1_4 . copySelf () ) ;
Distance : 9

79
Tree	return recordDeepStubMock ( STRING_CONSTANT , zipFile1 . getClass () , getColumnDimension ( NUMBER_CONSTANT ) ) ;
Code	return recordDeepStubMock ( STRING_CONSTANT , zipFile1 . getClass () , getColumnDimension ( NUMBER_CONSTANT ) ) ;
Distance : 12

80
Tree	return slot . recordDeepStubMock ( injectee . copySelf () , remainingRegion , NUMBER_CONSTANT ) ;
Code	return slot . recordDeepStubMock ( injectee . copySelf () , remainingRegion , NUMBER_CONSTANT ) ;
Distance : 11

81
Tree	return slot . recordDeepStubMock ( DEFAULT_INITIAL_CAPACITY . copySelf () , remainingRegion , NUMBER_CONSTANT ) ;
Code	return slot . recordDeepStubMock ( DEFAULT_INITIAL_CAPACITY . copySelf () , remainingRegion , NUMBER_CONSTANT ) ;
Distance : 11

82
Tree	return slot . recordDeepStubMock ( actualInvocationStackTrace . copySelf () , remainingRegion , NUMBER_CONSTANT ) ;
Code	return slot . recordDeepStubMock ( actualInvocationStackTrace . copySelf () , remainingRegion , NUMBER_CONSTANT ) ;
Distance : 11

83
Tree	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( injectee . copySelf () , remainingRegion , NUMBER_CONSTANT ) ;
Code	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( injectee . copySelf () , remainingRegion , NUMBER_CONSTANT ) ;
Distance : 11

84
Tree	return slot . recordDeepStubMock ( NUMBER_CONSTANT , changes . getRunCount () , remainingRegion ) ;
Code	return slot . recordDeepStubMock ( NUMBER_CONSTANT , changes . getRunCount () , remainingRegion ) ;
Distance : 11

85
Tree	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( DEFAULT_INITIAL_CAPACITY . copySelf () , remainingRegion , NUMBER_CONSTANT ) ;
Code	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( DEFAULT_INITIAL_CAPACITY . copySelf () , remainingRegion , NUMBER_CONSTANT ) ;
Distance : 11

86
Tree	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( actualInvocationStackTrace . copySelf () , remainingRegion , NUMBER_CONSTANT ) ;
Code	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( actualInvocationStackTrace . copySelf () , remainingRegion , NUMBER_CONSTANT ) ;
Distance : 11

87
Tree	return slot . recordDeepStubMock ( quoteless . copySelf () , remainingRegion , NUMBER_CONSTANT ) ;
Code	return slot . recordDeepStubMock ( quoteless . copySelf () , remainingRegion , NUMBER_CONSTANT ) ;
Distance : 11

88
Tree	return slot . recordDeepStubMock ( injectee , CONFLICTING_EXTENDED_TYPE . getString () , NUMBER_CONSTANT ) ;
Code	return slot . recordDeepStubMock ( injectee , CONFLICTING_EXTENDED_TYPE . getString () , NUMBER_CONSTANT ) ;
Distance : 11

89
Tree	return slot . recordDeepStubMock ( DEFAULT_INITIAL_CAPACITY , CONFLICTING_EXTENDED_TYPE . getString () , NUMBER_CONSTANT ) ;
Code	return slot . recordDeepStubMock ( DEFAULT_INITIAL_CAPACITY , CONFLICTING_EXTENDED_TYPE . getString () , NUMBER_CONSTANT ) ;
Distance : 11

90
Tree	return slot . recordDeepStubMock ( actualInvocationStackTrace , CONFLICTING_EXTENDED_TYPE . getString () , NUMBER_CONSTANT ) ;
Code	return slot . recordDeepStubMock ( actualInvocationStackTrace , CONFLICTING_EXTENDED_TYPE . getString () , NUMBER_CONSTANT ) ;
Distance : 11

91
Tree	return slot . recordDeepStubMock ( currentScript.legacyNamespace , STRING_CONSTANT , INVALID_NO_SIDE_EFFECT_ANNOTATION , CONFLICTING_EXTENDED_TYPE . getString ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Code	return slot . recordDeepStubMock ( currentScript.legacyNamespace , STRING_CONSTANT , INVALID_NO_SIDE_EFFECT_ANNOTATION , CONFLICTING_EXTENDED_TYPE . getString ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Distance : 17

92
Tree	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( injectee , CONFLICTING_EXTENDED_TYPE . getString () , NUMBER_CONSTANT ) ;
Code	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( injectee , CONFLICTING_EXTENDED_TYPE . getString () , NUMBER_CONSTANT ) ;
Distance : 11

93
Tree	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( NUMBER_CONSTANT , ImpreciseCutoverField [ NUMBER_CONSTANT ] ) ;
Code	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( NUMBER_CONSTANT , ImpreciseCutoverField [ NUMBER_CONSTANT ] ) ;
Distance : 9

94
Tree	return previousMap . recordDeepStubMock ( this . bins . bins ) ;
Code	return previousMap . recordDeepStubMock ( this . bins . bins ) ;
Distance : 8

95
Tree	return slot . recordDeepStubMock () . isAtLeast ( STRING_CONSTANT , testNameNode ( NUMBER_CONSTANT ) ) ;
Code	return slot . recordDeepStubMock () . isAtLeast ( STRING_CONSTANT , testNameNode ( NUMBER_CONSTANT ) ) ;
Distance : 12

96
Tree	return recordDeepStubMock ( new TimeZoneOffset < CharacterCodingException > ( errorType ) , multiplicand ) ;
Code	return recordDeepStubMock ( new TimeZoneOffset < CharacterCodingException > ( errorType ) , multiplicand ) ;
Distance : 11

97
Tree	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( DEFAULT_INITIAL_CAPACITY , CONFLICTING_EXTENDED_TYPE . getString () , NUMBER_CONSTANT ) ;
Code	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( DEFAULT_INITIAL_CAPACITY , CONFLICTING_EXTENDED_TYPE . getString () , NUMBER_CONSTANT ) ;
Distance : 11

98
Tree	return slot . getLeastSupertype ( this . bins . bins ) ;
Code	return slot . getLeastSupertype ( this . bins . bins ) ;
Distance : 8

99
Tree	return recordDeepStubMock ( new TimeZoneOffset < CharacterCodingException > ( bfData ) , multiplicand ) ;
Code	return recordDeepStubMock ( new TimeZoneOffset < CharacterCodingException > ( bfData ) , multiplicand ) ;
Distance : 11

100
Tree	return slot . recordDeepStubMock ( quoteless , CONFLICTING_EXTENDED_TYPE . getString () , NUMBER_CONSTANT ) ;
Code	return slot . recordDeepStubMock ( quoteless , CONFLICTING_EXTENDED_TYPE . getString () , NUMBER_CONSTANT ) ;
Distance : 11

101
Tree	return recordDeepStubMock ( new TimeZoneOffset < CharacterCodingException > ( chord ) , multiplicand ) ;
Code	return recordDeepStubMock ( new TimeZoneOffset < CharacterCodingException > ( chord ) , multiplicand ) ;
Distance : 11

102
Tree	return invx . recordDeepStubMock ( this . bins . bins ) ;
Code	return invx . recordDeepStubMock ( this . bins . bins ) ;
Distance : 8

103
Tree	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock () . remainingRegion . get ( CHAR_CONS ) ;
Code	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock () . remainingRegion . get ( CHAR_CONS ) ;
Distance : 9

104
Tree	return recordDeepStubMock ( polyfill.polyfillVersion , showSeparators , DEFAULT_ABSOLUTE_ACCURACY . getString () , isHoistScopeRootNode ( NUMBER_CONSTANT ) ) ;
Code	return recordDeepStubMock ( polyfill.polyfillVersion , showSeparators , DEFAULT_ABSOLUTE_ACCURACY . getString () , isHoistScopeRootNode ( NUMBER_CONSTANT ) ) ;
Distance : 14

105
Tree	return recordDeepStubMock ( c.invocationMarker , showSeparators , DEFAULT_ABSOLUTE_ACCURACY . getString () , getTemplateTypes ( NUMBER_CONSTANT ) ) ;
Code	return recordDeepStubMock ( c.invocationMarker , showSeparators , DEFAULT_ABSOLUTE_ACCURACY . getString () , getTemplateTypes ( NUMBER_CONSTANT ) ) ;
Distance : 14

106
Tree	return invx . recordDeepStubMock () . multiplicand . get ( CHAR_CONS ) ;
Code	return invx . recordDeepStubMock () . multiplicand . get ( CHAR_CONS ) ;
Distance : 9

107
Tree	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( NUMBER_CONSTANT , searchArray [ NUMBER_CONSTANT ] ) ;
Code	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( NUMBER_CONSTANT , searchArray [ NUMBER_CONSTANT ] ) ;
Distance : 9

108
Tree	return recordDeepStubMock ( polyfill.polyfillVersion , CONFLICTING_EXTENDED_TYPE , DEFAULT_ABSOLUTE_ACCURACY . getString () , isHoistScopeRootNode ( NUMBER_CONSTANT ) ) ;
Code	return recordDeepStubMock ( polyfill.polyfillVersion , CONFLICTING_EXTENDED_TYPE , DEFAULT_ABSOLUTE_ACCURACY . getString () , isHoistScopeRootNode ( NUMBER_CONSTANT ) ) ;
Distance : 14

109
Tree	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( NUMBER_CONSTANT , changes . getRunCount () , remainingRegion ) ;
Code	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( NUMBER_CONSTANT , changes . getRunCount () , remainingRegion ) ;
Distance : 11

110
Tree	return recordDeepStubMock ( new MinimizeExitPoints < CharacterCodingException > ( VALUE ) , multiplicand ) ;
Code	return recordDeepStubMock ( new MinimizeExitPoints < CharacterCodingException > ( VALUE ) , multiplicand ) ;
Distance : 11

111
Tree	return invx . recordDeepStubMock ( NUMBER_CONSTANT , ImpreciseCutoverField [ NUMBER_CONSTANT ] ) ;
Code	return invx . recordDeepStubMock ( NUMBER_CONSTANT , ImpreciseCutoverField [ NUMBER_CONSTANT ] ) ;
Distance : 9

112
Tree	return recordDeepStubMock ( polyfill.polyfillVersion , showSeparators , DEFAULT_ABSOLUTE_ACCURACY . getString () , getTemplateTypes ( NUMBER_CONSTANT ) ) ;
Code	return recordDeepStubMock ( polyfill.polyfillVersion , showSeparators , DEFAULT_ABSOLUTE_ACCURACY . getString () , getTemplateTypes ( NUMBER_CONSTANT ) ) ;
Distance : 14

113
Tree	return slot . recordDeepStubMock ( xNew . copySelf () , remainingRegion , NUMBER_CONSTANT ) ;
Code	return slot . recordDeepStubMock ( xNew . copySelf () , remainingRegion , NUMBER_CONSTANT ) ;
Distance : 11

114
Tree	return slot . recordDeepStubMock ( NUMBER_CONSTANT , ImpreciseCutoverField [ NUMBER_CONSTANT ] ) ;
Code	return slot . recordDeepStubMock ( NUMBER_CONSTANT , ImpreciseCutoverField [ NUMBER_CONSTANT ] ) ;
Distance : 9

115
Tree	return recordDeepStubMock ( c.invocationMarker , CONFLICTING_EXTENDED_TYPE , DEFAULT_ABSOLUTE_ACCURACY . getString () , getTemplateTypes ( NUMBER_CONSTANT ) ) ;
Code	return recordDeepStubMock ( c.invocationMarker , CONFLICTING_EXTENDED_TYPE , DEFAULT_ABSOLUTE_ACCURACY . getString () , getTemplateTypes ( NUMBER_CONSTANT ) ) ;
Distance : 14

116
Tree	return invx . recordDeepStubMock ( NUMBER_CONSTANT , searchArray [ NUMBER_CONSTANT ] ) ;
Code	return invx . recordDeepStubMock ( NUMBER_CONSTANT , searchArray [ NUMBER_CONSTANT ] ) ;
Distance : 9

117
Tree	return slot . recordDeepStubMock ( NUMBER_CONSTANT , changes . getRunCount () , scenario ) ;
Code	return slot . recordDeepStubMock ( NUMBER_CONSTANT , changes . getRunCount () , scenario ) ;
Distance : 11

118
Tree	return slot . recordDeepStubMock ( NUMBER_CONSTANT , showSeparators . getRunCount () , remainingRegion ) ;
Code	return slot . recordDeepStubMock ( NUMBER_CONSTANT , showSeparators . getRunCount () , remainingRegion ) ;
Distance : 11

119
Tree	return invx . recordDeepStubMock ( NUMBER_CONSTANT , changes . getRunCount () , remainingRegion ) ;
Code	return invx . recordDeepStubMock ( NUMBER_CONSTANT , changes . getRunCount () , remainingRegion ) ;
Distance : 11

120
Tree	return quartiles . recordDeepStubMock ( this . bins . bins ) ;
Code	return quartiles . recordDeepStubMock ( this . bins . bins ) ;
Distance : 8

121
Tree	return slot . recordDeepStubMock ( NUMBER_CONSTANT , searchArray [ NUMBER_CONSTANT ] ) ;
Code	return slot . recordDeepStubMock ( NUMBER_CONSTANT , searchArray [ NUMBER_CONSTANT ] ) ;
Distance : 9

122
Tree	return slot . recordDeepStubMock ( currentScript.legacyNamespace , multiplicand . getString () , getTemplateTypes ( NUMBER_CONSTANT ) ) ;
Code	return slot . recordDeepStubMock ( currentScript.legacyNamespace , multiplicand . getString () , getTemplateTypes ( NUMBER_CONSTANT ) ) ;
Distance : 14

123
Tree	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( NUMBER_CONSTANT , changes . getRunCount () , scenario ) ;
Code	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( NUMBER_CONSTANT , changes . getRunCount () , scenario ) ;
Distance : 11

124
Tree	return slot . recordDeepStubMock () . isAtLeast ( NUMBER_CONSTANT , multiplicand , CONFLICTING_EXTENDED_TYPE ) ;
Code	return slot . recordDeepStubMock () . isAtLeast ( NUMBER_CONSTANT , multiplicand , CONFLICTING_EXTENDED_TYPE ) ;
Distance : 11

125
Tree	return slot . recordDeepStubMock ( NUMBER_CONSTANT , changes . getVertices () , remainingRegion ) ;
Code	return slot . recordDeepStubMock ( NUMBER_CONSTANT , changes . getVertices () , remainingRegion ) ;
Distance : 11

126
Tree	return checkUnusedLocals . recordDeepStubMock ( NUMBER_CONSTANT , ImpreciseCutoverField [ NUMBER_CONSTANT ] ) ;
Code	return checkUnusedLocals . recordDeepStubMock ( NUMBER_CONSTANT , ImpreciseCutoverField [ NUMBER_CONSTANT ] ) ;
Distance : 9

127
Tree	return slot . recordDeepStubMock ( currentScript.legacyNamespace , multiplicand . getString () , getReferenceName ( NUMBER_CONSTANT ) ) ;
Code	return slot . recordDeepStubMock ( currentScript.legacyNamespace , multiplicand . getString () , getReferenceName ( NUMBER_CONSTANT ) ) ;
Distance : 14

128
Tree	return slot . recordDeepStubMock ( currentScript.legacyNamespace , CONFLICTING_EXTENDED_TYPE . getString () , getTemplateTypes ( NUMBER_CONSTANT ) ) ;
Code	return slot . recordDeepStubMock ( currentScript.legacyNamespace , CONFLICTING_EXTENDED_TYPE . getString () , getTemplateTypes ( NUMBER_CONSTANT ) ) ;
Distance : 14

129
Tree	return slot . recordDeepStubMock ( currentScript.legacyNamespace , CONFLICTING_EXTENDED_TYPE . getString () , getReferenceName ( NUMBER_CONSTANT ) ) ;
Code	return slot . recordDeepStubMock ( currentScript.legacyNamespace , CONFLICTING_EXTENDED_TYPE . getString () , getReferenceName ( NUMBER_CONSTANT ) ) ;
Distance : 14

130
Tree	return recordDeepStubMock ( polyfill.polyfillVersion , multiplicand , DEFAULT_ABSOLUTE_ACCURACY . getString () , isHoistScopeRootNode ( NUMBER_CONSTANT ) ) ;
Code	return recordDeepStubMock ( polyfill.polyfillVersion , multiplicand , DEFAULT_ABSOLUTE_ACCURACY . getString () , isHoistScopeRootNode ( NUMBER_CONSTANT ) ) ;
Distance : 14

131
Tree	return slot . recordDeepStubMock ( currentScript.legacyNamespace , CONFLICTING_EXTENDED_TYPE . getString () , isHoistScopeRootNode ( NUMBER_CONSTANT ) ) ;
Code	return slot . recordDeepStubMock ( currentScript.legacyNamespace , CONFLICTING_EXTENDED_TYPE . getString () , isHoistScopeRootNode ( NUMBER_CONSTANT ) ) ;
Distance : 14

132
Tree	return checkUnusedLocals . recordDeepStubMock ( NUMBER_CONSTANT , searchArray [ NUMBER_CONSTANT ] ) ;
Code	return checkUnusedLocals . recordDeepStubMock ( NUMBER_CONSTANT , searchArray [ NUMBER_CONSTANT ] ) ;
Distance : 9

133
Tree	return slot . recordDeepStubMock ( currentScript.legacyNamespace , multiplicand . getString () , isHoistScopeRootNode ( NUMBER_CONSTANT ) ) ;
Code	return slot . recordDeepStubMock ( currentScript.legacyNamespace , multiplicand . getString () , isHoistScopeRootNode ( NUMBER_CONSTANT ) ) ;
Distance : 14

134
Tree	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( currentScript.legacyNamespace , multiplicand . getString () , getTemplateTypes ( NUMBER_CONSTANT ) ) ;
Code	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( currentScript.legacyNamespace , multiplicand . getString () , getTemplateTypes ( NUMBER_CONSTANT ) ) ;
Distance : 14

135
Tree	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( currentScript.legacyNamespace , multiplicand . getString () , getReferenceName ( NUMBER_CONSTANT ) ) ;
Code	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( currentScript.legacyNamespace , multiplicand . getString () , getReferenceName ( NUMBER_CONSTANT ) ) ;
Distance : 14

136
Tree	return slot . recordDeepStubMock ( injectee , CONFLICTING_EXTENDED_TYPE , DEFAULT_ABSOLUTE_ACCURACY , new PivotSelectionRule.DANTZIG < Improvement > ( chord ) ) ;
Code	return slot . recordDeepStubMock ( injectee , CONFLICTING_EXTENDED_TYPE , DEFAULT_ABSOLUTE_ACCURACY , new PivotSelectionRule.DANTZIG < Improvement > ( chord ) ) ;
Distance : 17

137
Tree	return slot . recordDeepStubMock ( DEFAULT_INITIAL_CAPACITY , CONFLICTING_EXTENDED_TYPE , DEFAULT_ABSOLUTE_ACCURACY , new PivotSelectionRule.DANTZIG < Improvement > ( chord ) ) ;
Code	return slot . recordDeepStubMock ( DEFAULT_INITIAL_CAPACITY , CONFLICTING_EXTENDED_TYPE , DEFAULT_ABSOLUTE_ACCURACY , new PivotSelectionRule.DANTZIG < Improvement > ( chord ) ) ;
Distance : 17

138
Tree	return slot . recordDeepStubMock ( actualInvocationStackTrace , CONFLICTING_EXTENDED_TYPE , DEFAULT_ABSOLUTE_ACCURACY , new PivotSelectionRule.DANTZIG < Improvement > ( chord ) ) ;
Code	return slot . recordDeepStubMock ( actualInvocationStackTrace , CONFLICTING_EXTENDED_TYPE , DEFAULT_ABSOLUTE_ACCURACY , new PivotSelectionRule.DANTZIG < Improvement > ( chord ) ) ;
Distance : 17

139
Tree	return slot . recordDeepStubMock ( injectee , CONFLICTING_EXTENDED_TYPE , DEFAULT_ABSOLUTE_ACCURACY , new PivotSelectionRule.DANTZIG < StrategyAndWidth > ( chord ) ) ;
Code	return slot . recordDeepStubMock ( injectee , CONFLICTING_EXTENDED_TYPE , DEFAULT_ABSOLUTE_ACCURACY , new PivotSelectionRule.DANTZIG < StrategyAndWidth > ( chord ) ) ;
Distance : 17

140
Tree	return slot . recordDeepStubMock ( DEFAULT_INITIAL_CAPACITY , CONFLICTING_EXTENDED_TYPE , DEFAULT_ABSOLUTE_ACCURACY , new PivotSelectionRule.DANTZIG < StrategyAndWidth > ( chord ) ) ;
Code	return slot . recordDeepStubMock ( DEFAULT_INITIAL_CAPACITY , CONFLICTING_EXTENDED_TYPE , DEFAULT_ABSOLUTE_ACCURACY , new PivotSelectionRule.DANTZIG < StrategyAndWidth > ( chord ) ) ;
Distance : 17

141
Tree	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( injectee , CONFLICTING_EXTENDED_TYPE , DEFAULT_ABSOLUTE_ACCURACY , new PivotSelectionRule.DANTZIG < Improvement > ( chord ) ) ;
Code	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( injectee , CONFLICTING_EXTENDED_TYPE , DEFAULT_ABSOLUTE_ACCURACY , new PivotSelectionRule.DANTZIG < Improvement > ( chord ) ) ;
Distance : 17

142
Tree	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( DEFAULT_INITIAL_CAPACITY , CONFLICTING_EXTENDED_TYPE , DEFAULT_ABSOLUTE_ACCURACY , new PivotSelectionRule.DANTZIG < Improvement > ( chord ) ) ;
Code	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( DEFAULT_INITIAL_CAPACITY , CONFLICTING_EXTENDED_TYPE , DEFAULT_ABSOLUTE_ACCURACY , new PivotSelectionRule.DANTZIG < Improvement > ( chord ) ) ;
Distance : 17

143
Tree	return slot . recordDeepStubMock ( actualInvocationStackTrace , CONFLICTING_EXTENDED_TYPE , DEFAULT_ABSOLUTE_ACCURACY , new PivotSelectionRule.DANTZIG < StrategyAndWidth > ( chord ) ) ;
Code	return slot . recordDeepStubMock ( actualInvocationStackTrace , CONFLICTING_EXTENDED_TYPE , DEFAULT_ABSOLUTE_ACCURACY , new PivotSelectionRule.DANTZIG < StrategyAndWidth > ( chord ) ) ;
Distance : 17

144
Tree	return slot . recordDeepStubMock ( injectee . copySelf () . remainingRegion ) ;
Code	return slot . recordDeepStubMock ( injectee . copySelf () . remainingRegion ) ;
Distance : 9

145
Tree	return slot . recordDeepStubMock ( DEFAULT_INITIAL_CAPACITY . copySelf () . remainingRegion ) ;
Code	return slot . recordDeepStubMock ( DEFAULT_INITIAL_CAPACITY . copySelf () . remainingRegion ) ;
Distance : 9

146
Tree	return slot . recordDeepStubMock ( actualInvocationStackTrace . copySelf () . remainingRegion ) ;
Code	return slot . recordDeepStubMock ( actualInvocationStackTrace . copySelf () . remainingRegion ) ;
Distance : 9

147
Tree	return slot . recordDeepStubMock ( this . bins . bins ) ;
Code	return slot . recordDeepStubMock ( this . bins . bins ) ;
Distance : 8

148
Tree	return slot . recordDeepStubMock () . isAtLeast ( MINUTES , false , ALL ) ;
Code	return slot . recordDeepStubMock () . isAtLeast ( MINUTES , false , ALL ) ;
Distance : 11

149
Tree	return slot . recordDeepStubMock () . isAtLeast ( CHAR_COPY , false , ALL ) ;
Code	return slot . recordDeepStubMock () . isAtLeast ( CHAR_COPY , false , ALL ) ;
Distance : 11

150
Tree	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock () . isAtLeast ( MINUTES , false , ALL ) ;
Code	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock () . isAtLeast ( MINUTES , false , ALL ) ;
Distance : 11

151
Tree	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( injectee . copySelf () . remainingRegion ) ;
Code	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( injectee . copySelf () . remainingRegion ) ;
Distance : 9

152
Tree	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock () . isAtLeast ( CHAR_COPY , false , ALL ) ;
Code	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock () . isAtLeast ( CHAR_COPY , false , ALL ) ;
Distance : 11

153
Tree	return slot . recordDeepStubMock () . multiplicand . get ( CHAR_CONS ) ;
Code	return slot . recordDeepStubMock () . multiplicand . get ( CHAR_CONS ) ;
Distance : 9

154
Tree	return invx . recordDeepStubMock () . isAtLeast ( MINUTES , false , ALL ) ;
Code	return invx . recordDeepStubMock () . isAtLeast ( MINUTES , false , ALL ) ;
Distance : 11

155
Tree	return slot . recordDeepStubMock () . isAtLeast ( STRING_CONSTANT , mulAndCheck ( NUMBER_CONSTANT ) ) ;
Code	return slot . recordDeepStubMock () . isAtLeast ( STRING_CONSTANT , mulAndCheck ( NUMBER_CONSTANT ) ) ;
Distance : 12

156
Tree	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( actualInvocationStackTrace , CONFLICTING_EXTENDED_TYPE . getString () , NUMBER_CONSTANT ) ;
Code	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( actualInvocationStackTrace , CONFLICTING_EXTENDED_TYPE . getString () , NUMBER_CONSTANT ) ;
Distance : 11

157
Tree	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( DEFAULT_INITIAL_CAPACITY . copySelf () . remainingRegion ) ;
Code	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( DEFAULT_INITIAL_CAPACITY . copySelf () . remainingRegion ) ;
Distance : 9

158
Tree	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( actualInvocationStackTrace . copySelf () . remainingRegion ) ;
Code	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( actualInvocationStackTrace . copySelf () . remainingRegion ) ;
Distance : 9

159
Tree	return slot . recordDeepStubMock () . isAtLeast ( MINUTES , false , CONFLICTING_EXTENDED_TYPE ) ;
Code	return slot . recordDeepStubMock () . isAtLeast ( MINUTES , false , CONFLICTING_EXTENDED_TYPE ) ;
Distance : 11

160
Tree	return slot . recordDeepStubMock ( polyfill.polyfillVersion , STRING_CONSTANT , INVALID_NO_SIDE_EFFECT_ANNOTATION , CONFLICTING_EXTENDED_TYPE . getString ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Code	return slot . recordDeepStubMock ( polyfill.polyfillVersion , STRING_CONSTANT , INVALID_NO_SIDE_EFFECT_ANNOTATION , CONFLICTING_EXTENDED_TYPE . getString ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Distance : 17

161
Tree	return invx . recordDeepStubMock () . isAtLeast ( CHAR_COPY , false , ALL ) ;
Code	return invx . recordDeepStubMock () . isAtLeast ( CHAR_COPY , false , ALL ) ;
Distance : 11

162
Tree	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( currentScript.legacyNamespace , STRING_CONSTANT , INVALID_NO_SIDE_EFFECT_ANNOTATION , CONFLICTING_EXTENDED_TYPE . getString ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Code	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( currentScript.legacyNamespace , STRING_CONSTANT , INVALID_NO_SIDE_EFFECT_ANNOTATION , CONFLICTING_EXTENDED_TYPE . getString ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Distance : 17

163
Tree	return slot . recordDeepStubMock ( xNew , CONFLICTING_EXTENDED_TYPE . getString () , NUMBER_CONSTANT ) ;
Code	return slot . recordDeepStubMock ( xNew , CONFLICTING_EXTENDED_TYPE . getString () , NUMBER_CONSTANT ) ;
Distance : 11

164
Tree	return checkUnusedLocals . recordDeepStubMock () . isAtLeast ( MINUTES , false , ALL ) ;
Code	return checkUnusedLocals . recordDeepStubMock () . isAtLeast ( MINUTES , false , ALL ) ;
Distance : 11

165
Tree	return slot . recordDeepStubMock ( STRING_CONSTANT , zipFile1 . IEEEremainder () , scenario , i2s2 ) ;
Code	return slot . recordDeepStubMock ( STRING_CONSTANT , zipFile1 . IEEEremainder () , scenario , i2s2 ) ;
Distance : 13

166
Tree	return slot . recordDeepStubMock ( idToken.value , STRING_CONSTANT , INVALID_NO_SIDE_EFFECT_ANNOTATION , CONFLICTING_EXTENDED_TYPE . getString ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Code	return slot . recordDeepStubMock ( idToken.value , STRING_CONSTANT , INVALID_NO_SIDE_EFFECT_ANNOTATION , CONFLICTING_EXTENDED_TYPE . getString ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Distance : 17

167
Tree	return slot . recordDeepStubMock ( STRING_CONSTANT , zipFile1 . toStringTree () , remainingRegion , i2s2 ) ;
Code	return slot . recordDeepStubMock ( STRING_CONSTANT , zipFile1 . toStringTree () , remainingRegion , i2s2 ) ;
Distance : 13

168
Tree	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( STRING_CONSTANT , zipFile1 . IEEEremainder () , remainingRegion , i2s2 ) ;
Code	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( STRING_CONSTANT , zipFile1 . IEEEremainder () , remainingRegion , i2s2 ) ;
Distance : 13

169
Tree	return invx . recordDeepStubMock () . isAtLeast ( NUMBER_CONSTANT , multiplicand , CONFLICTING_EXTENDED_TYPE ) ;
Code	return invx . recordDeepStubMock () . isAtLeast ( NUMBER_CONSTANT , multiplicand , CONFLICTING_EXTENDED_TYPE ) ;
Distance : 11

170
Tree	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock () . isAtLeast ( STRING_CONSTANT , testNameNode ( NUMBER_CONSTANT ) ) ;
Code	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock () . isAtLeast ( STRING_CONSTANT , testNameNode ( NUMBER_CONSTANT ) ) ;
Distance : 12

171
Tree	return slot . recordDeepStubMock ( STRING_CONSTANT , zipFile1 . toStringTree () , scenario , i2s2 ) ;
Code	return slot . recordDeepStubMock ( STRING_CONSTANT , zipFile1 . toStringTree () , scenario , i2s2 ) ;
Distance : 13

172
Tree	return slot . recordDeepStubMock ( Level.FINE , STRING_CONSTANT , INVALID_NO_SIDE_EFFECT_ANNOTATION , CONFLICTING_EXTENDED_TYPE . getString ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Code	return slot . recordDeepStubMock ( Level.FINE , STRING_CONSTANT , INVALID_NO_SIDE_EFFECT_ANNOTATION , CONFLICTING_EXTENDED_TYPE . getString ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ) ;
Distance : 17

173
Tree	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( STRING_CONSTANT , zipFile1 . IEEEremainder () , scenario , i2s2 ) ;
Code	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( STRING_CONSTANT , zipFile1 . IEEEremainder () , scenario , i2s2 ) ;
Distance : 13

174
Tree	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( STRING_CONSTANT , zipFile1 . toStringTree () , remainingRegion , i2s2 ) ;
Code	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( STRING_CONSTANT , zipFile1 . toStringTree () , remainingRegion , i2s2 ) ;
Distance : 13

175
Tree	return invx . recordDeepStubMock ( STRING_CONSTANT , zipFile1 . IEEEremainder () , remainingRegion , i2s2 ) ;
Code	return invx . recordDeepStubMock ( STRING_CONSTANT , zipFile1 . IEEEremainder () , remainingRegion , i2s2 ) ;
Distance : 13

176
Tree	return recordDeepStubMock ( new MinimizeExitPoints <> ( probabilities ) , multiplicand ) ;
Code	return recordDeepStubMock ( new MinimizeExitPoints <> ( probabilities ) , multiplicand ) ;
Distance : 9

177
Tree	return slot . recordDeepStubMock () . isAtLeast ( NUMBER_CONSTANT , CONFLICTING_EXTENDED_TYPE , CONFLICTING_EXTENDED_TYPE ) ;
Code	return slot . recordDeepStubMock () . isAtLeast ( NUMBER_CONSTANT , CONFLICTING_EXTENDED_TYPE , CONFLICTING_EXTENDED_TYPE ) ;
Distance : 11

178
Tree	return slot . recordDeepStubMock () . isAtLeast ( NUMBER_CONSTANT , changes , CONFLICTING_EXTENDED_TYPE ) ;
Code	return slot . recordDeepStubMock () . isAtLeast ( NUMBER_CONSTANT , changes , CONFLICTING_EXTENDED_TYPE ) ;
Distance : 11

179
Tree	return slot . recordDeepStubMock ( NUMBER_CONSTANT , CONFLICTING_EXTENDED_TYPE . getRunCount () , remainingRegion ) ;
Code	return slot . recordDeepStubMock ( NUMBER_CONSTANT , CONFLICTING_EXTENDED_TYPE . getRunCount () , remainingRegion ) ;
Distance : 11

180
Tree	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock () . isAtLeast ( NUMBER_CONSTANT , multiplicand , CONFLICTING_EXTENDED_TYPE ) ;
Code	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock () . isAtLeast ( NUMBER_CONSTANT , multiplicand , CONFLICTING_EXTENDED_TYPE ) ;
Distance : 11

181
Tree	return recordDeepStubMock ( injectee . copySelf () , STRING_CONSTANT , INVALID_NO_SIDE_EFFECT_ANNOTATION ) ;
Code	return recordDeepStubMock ( injectee . copySelf () , STRING_CONSTANT , INVALID_NO_SIDE_EFFECT_ANNOTATION ) ;
Distance : 9

182
Tree	return recordDeepStubMock ( crosshairState . copySelf () , STRING_CONSTANT , INVALID_NO_SIDE_EFFECT_ANNOTATION ) ;
Code	return recordDeepStubMock ( crosshairState . copySelf () , STRING_CONSTANT , INVALID_NO_SIDE_EFFECT_ANNOTATION ) ;
Distance : 9

183
Tree	return slot . recordDeepStubMock ( STRING_CONSTANT , zipFile1 . IEEEremainder () , remainingRegion , i2s2 ) ;
Code	return slot . recordDeepStubMock ( STRING_CONSTANT , zipFile1 . IEEEremainder () , remainingRegion , i2s2 ) ;
Distance : 13

184
Tree	return slot . recordDeepStubMock () . isAtLeast ( NUMBER_CONSTANT , showSeparators , CONFLICTING_EXTENDED_TYPE ) ;
Code	return slot . recordDeepStubMock () . isAtLeast ( NUMBER_CONSTANT , showSeparators , CONFLICTING_EXTENDED_TYPE ) ;
Distance : 11

185
Tree	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock () . isAtLeast ( NUMBER_CONSTANT , CONFLICTING_EXTENDED_TYPE , CONFLICTING_EXTENDED_TYPE ) ;
Code	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock () . isAtLeast ( NUMBER_CONSTANT , CONFLICTING_EXTENDED_TYPE , CONFLICTING_EXTENDED_TYPE ) ;
Distance : 11

186
Tree	return previousMap . recordDeepStubMock ( this . bins ) ;
Code	return previousMap . recordDeepStubMock ( this . bins ) ;
Distance : 6

187
Tree	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock () . isAtLeast ( NUMBER_CONSTANT , changes , CONFLICTING_EXTENDED_TYPE ) ;
Code	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock () . isAtLeast ( NUMBER_CONSTANT , changes , CONFLICTING_EXTENDED_TYPE ) ;
Distance : 11

188
Tree	return slot . getLeastSupertype ( this . bins ) ;
Code	return slot . getLeastSupertype ( this . bins ) ;
Distance : 6

189
Tree	return slot . recordDeepStubMock ( quoteless . copySelf () . remainingRegion ) ;
Code	return slot . recordDeepStubMock ( quoteless . copySelf () . remainingRegion ) ;
Distance : 9

190
Tree	return recordDeepStubMock ( new TimeZoneOffset <> ( probabilities ) , multiplicand ) ;
Code	return recordDeepStubMock ( new TimeZoneOffset <> ( probabilities ) , multiplicand ) ;
Distance : 9

191
Tree	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( this . bins . bins ) ;
Code	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock ( this . bins . bins ) ;
Distance : 8

192
Tree	return recordDeepStubMock ( injectee . ofThisVm () , STRING_CONSTANT , INVALID_NO_SIDE_EFFECT_ANNOTATION ) ;
Code	return recordDeepStubMock ( injectee . ofThisVm () , STRING_CONSTANT , INVALID_NO_SIDE_EFFECT_ANNOTATION ) ;
Distance : 9

193
Tree	return recordDeepStubMock ( new MinimizeExitPoints <> ( bfData ) , multiplicand ) ;
Code	return recordDeepStubMock ( new MinimizeExitPoints <> ( bfData ) , multiplicand ) ;
Distance : 9

194
Tree	return recordDeepStubMock ( new MinimizeExitPoints < CharacterCodingException > ( chord ) , multiplicand ) ;
Code	return recordDeepStubMock ( new MinimizeExitPoints < CharacterCodingException > ( chord ) , multiplicand ) ;
Distance : 11

195
Tree	return recordDeepStubMock ( new MinimizeExitPoints < CharacterCodingException > ( bfData ) , multiplicand ) ;
Code	return recordDeepStubMock ( new MinimizeExitPoints < CharacterCodingException > ( bfData ) , multiplicand ) ;
Distance : 11

196
Tree	return recordDeepStubMock ( new MinimizeExitPoints < CharacterCodingException > ( errorType ) , multiplicand ) ;
Code	return recordDeepStubMock ( new MinimizeExitPoints < CharacterCodingException > ( errorType ) , multiplicand ) ;
Distance : 11

197
Tree	return slot . recordDeepStubMock ( xNew . copySelf () . remainingRegion ) ;
Code	return slot . recordDeepStubMock ( xNew . copySelf () . remainingRegion ) ;
Distance : 9

198
Tree	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock () . multiplicand . get ( CHAR_CONS ) ;
Code	return DEFAULT_INITIAL_CAPACITY . recordDeepStubMock () . multiplicand . get ( CHAR_CONS ) ;
Distance : 9

199
Tree	return slot . recordDeepStubMock () . remainingRegion . get ( CHAR_CONS ) ;
Code	return slot . recordDeepStubMock () . remainingRegion . get ( CHAR_CONS ) ;
Distance : 9

========================================================================


========================================================================
Example Number: 62
Parent Code is: 
int sum = NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Child code is: 
double sum = NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=sum}) (204{val==}) (34{val=NUMBER_CONSTANT})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=double}) (59 (800{val=sum}) (204{val==}) (34{val=NUMBER_CONSTANT})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/57/parent/src_main_java_org_apache_commons_math_stat_clustering_KMeansPlusPlusClusterer.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Correct
========================================================================
True

0
Tree	int sum = this . sum . maxY ;
Code	int sum = this . sum . maxY ;
Distance : 6

1
Tree	int sum = minor + NUMBER_CONSTANT ;
Code	int sum = minor + NUMBER_CONSTANT ;
Distance : 3

2
Tree	int sum = new Date () ;
Code	int sum = new Date () ;
Distance : 4

3
Tree	int sum = new Object () ;
Code	int sum = new Object () ;
Distance : 4

4
Tree	int sum = this . mean ;
Code	int sum = this . mean ;
Distance : 4

5
Tree	int right = null ;
Code	int right = null ;
Distance : 3

6
Tree	final int sum = NUMBER_CONSTANT ;
Code	final int sum = NUMBER_CONSTANT ;
Distance : 2

7
Tree	int sum = getTickLength () . success ;
Code	int sum = getTickLength () . success ;
Distance : 5

8
Tree	int sum = fht () . length ;
Code	int sum = fht () . length ;
Distance : 5

9
Tree	int sum = NUMBER_CONSTANT * currentState.length ;
Code	int sum = NUMBER_CONSTANT * currentState.length ;
Distance : 3

10
Tree	int sum = {} ;
Code	int sum = {} ;
Distance : 2

11
Tree	int sum = point () . length ;
Code	int sum = point () . length ;
Distance : 5

12
Tree	int sum = this . maxY . maxY ;
Code	int sum = this . maxY . maxY ;
Distance : 6

13
Tree	int sum = this . numberOfTrials . maxY ;
Code	int sum = this . numberOfTrials . maxY ;
Distance : 6

14
Tree	int /= ;
Code	int /= ;
Distance : 4

15
Tree	int sum = {} ;
Code	int sum = {} ;
Distance : 2

16
Tree	int sum = / ;
Code	int sum = / ;
Distance : 2

17
Tree	int sum = sampleSize + NUMBER_CONSTANT ;
Code	int sum = sampleSize + NUMBER_CONSTANT ;
Distance : 3

18
Tree	int sampleSize = NUMBER_CONSTANT ;
Code	int sampleSize = NUMBER_CONSTANT ;
Distance : 2

19
Tree	int sum = forward + NUMBER_CONSTANT ;
Code	int sum = forward + NUMBER_CONSTANT ;
Distance : 3

20
Tree	int sum = getNumber () ;
Code	int sum = getNumber () ;
Distance : 3

21
Tree	int sum = isPrettyPrint () ;
Code	int sum = isPrettyPrint () ;
Distance : 3

22
Tree	int sum = AllowedSolution.ANY_SIDE ;
Code	int sum = AllowedSolution.ANY_SIDE ;
Distance : 2

23
Tree	int sum = getNumber () . length ;
Code	int sum = getNumber () . length ;
Distance : 5

24
Tree	int sum = this . right ;
Code	int sum = this . right ;
Distance : 4

25
Tree	int sum = y0 + NUMBER_CONSTANT ;
Code	int sum = y0 + NUMBER_CONSTANT ;
Distance : 3

26
Tree	int sum = this . legendShapeList ;
Code	int sum = this . legendShapeList ;
Distance : 4

27
Tree	int sum = new ArrayList () ;
Code	int sum = new ArrayList () ;
Distance : 4

28
Tree	int sum = FastMath.PI ;
Code	int sum = FastMath.PI ;
Distance : 2

29
Tree	int sum = ? ;
Code	int sum = ? ;
Distance : 2

30
Tree	int sum = this . right . maxY ;
Code	int sum = this . right . maxY ;
Distance : 6

31
Tree	int sum = FACT_LEN + NUMBER_CONSTANT ;
Code	int sum = FACT_LEN + NUMBER_CONSTANT ;
Distance : 3

32
Tree	int right = / ;
Code	int right = / ;
Distance : 3

33
Tree	double sum ;
Code	double sum ;
Distance : 2

34
Tree	int SUM ;
Code	int SUM ;
Distance : 4

35
Tree	int numberOfTrials ;
Code	int numberOfTrials ;
Distance : 4

36
Tree	int right = true ;
Code	int right = true ;
Distance : 3

37
Tree	final int sum = getTickLength () ;
Code	final int sum = getTickLength () ;
Distance : 4

38
Tree	int sum = FACT_LEN ;
Code	int sum = FACT_LEN ;
Distance : 2

39
Tree	int sampleSize ;
Code	int sampleSize ;
Distance : 4

40
Tree	int sum = += ;
Code	int sum = += ;
Distance : 2

41
Tree	int sampleSize = null ;
Code	int sampleSize = null ;
Distance : 3

42
Tree	int sum = other.value ;
Code	int sum = other.value ;
Distance : 2

43
Tree	int sum = FastFourierTransformer + NUMBER_CONSTANT ;
Code	int sum = FastFourierTransformer + NUMBER_CONSTANT ;
Distance : 3

44
Tree	int sum = += ;
Code	int sum = += ;
Distance : 2

45
Tree	int += ;
Code	int += ;
Distance : 4

46
Tree	int sum = mean ;
Code	int sum = mean ;
Distance : 2

47
Tree	int sum = minor ;
Code	int sum = minor ;
Distance : 2

48
Tree	int sum ;
Code	int sum ;
Distance : 3

49
Tree	int sum = missingEntries ? v.length : currentState.length ;
Code	int sum = missingEntries ? v.length : currentState.length ;
Distance : 6

50
Tree	int sum = this . sum . data ;
Code	int sum = this . sum . data ;
Distance : 6

51
Tree	int sum = this . sum . denominatorDegreesOfFreedom ;
Code	int sum = this . sum . denominatorDegreesOfFreedom ;
Distance : 6

52
Tree	int sum = missingEntries ? IncrementalCheckMode.GENERATE_IJS : IncrementalCheckMode.GENERATE_IJS ;
Code	int sum = missingEntries ? IncrementalCheckMode.GENERATE_IJS : IncrementalCheckMode.GENERATE_IJS ;
Distance : 6

53
Tree	int sum = getTickLength () ;
Code	int sum = getTickLength () ;
Distance : 3

54
Tree	final int sum = fht () ;
Code	final int sum = fht () ;
Distance : 4

55
Tree	int sum = else ;
Code	int sum = else ;
Distance : 2

56
Tree	int [] ;
Code	int [] ;
Distance : 4

57
Tree	int sum = / ;
Code	int sum = / ;
Distance : 2

58
Tree	int sum = new LenientChronology () ;
Code	int sum = new LenientChronology () ;
Distance : 4

59
Tree	int createIllegalArgumentException ;
Code	int createIllegalArgumentException ;
Distance : 4

60
Tree	double sum = NUMBER_CONSTANT ;
Code	double sum = NUMBER_CONSTANT ;
Distance : 0

61
Tree	int real [] = getTickLength () ;
Code	int real [] = getTickLength () ;
Distance : 5

62
Tree	final int right ;
Code	final int right ;
Distance : 4

63
Tree	int sum = new Add () ;
Code	int sum = new Add () ;
Distance : 4

64
Tree	int sum = NUMBER_CONSTANT ;
Code	int sum = NUMBER_CONSTANT ;
Distance : 1

65
Tree	final int sum = newScope () ;
Code	final int sum = newScope () ;
Distance : 4

66
Tree	int sum = new HashMap () ;
Code	int sum = new HashMap () ;
Distance : 4

67
Tree	int SUM = NUMBER_CONSTANT ;
Code	int SUM = NUMBER_CONSTANT ;
Distance : 2

68
Tree	int sum = missingEntries ;
Code	int sum = missingEntries ;
Distance : 2

69
Tree	int sum = y0 ;
Code	int sum = y0 ;
Distance : 2

70
Tree	final int sampleSize ;
Code	final int sampleSize ;
Distance : 4

71
Tree	int sum = FastFourierTransformer ;
Code	int sum = FastFourierTransformer ;
Distance : 2

72
Tree	int sum = this . sum . right ;
Code	int sum = this . sum . right ;
Distance : 6

73
Tree	final int mean ;
Code	final int mean ;
Distance : 4

74
Tree	int sum = this . numberOfTrials ;
Code	int sum = this . numberOfTrials ;
Distance : 4

75
Tree	int sum = getTickLength () . length ;
Code	int sum = getTickLength () . length ;
Distance : 5

76
Tree	int sum = val.length ;
Code	int sum = val.length ;
Distance : 2

77
Tree	int sum = this . sum ;
Code	int sum = this . sum ;
Distance : 4

78
Tree	int sum = this . sum . value ;
Code	int sum = this . sum . value ;
Distance : 6

79
Tree	int sum = sampleSize ;
Code	int sum = sampleSize ;
Distance : 2

80
Tree	int DEFAULT_ZERO_TOLERANCE ;
Code	int DEFAULT_ZERO_TOLERANCE ;
Distance : 4

81
Tree	int sum = checkInitialize () ;
Code	int sum = checkInitialize () ;
Distance : 3

82
Tree	int sum = this . maxY ;
Code	int sum = this . maxY ;
Distance : 4

83
Tree	int *= ;
Code	int *= ;
Distance : 4

84
Tree	int right = NUMBER_CONSTANT ;
Code	int right = NUMBER_CONSTANT ;
Distance : 2

85
Tree	int sum = true ;
Code	int sum = true ;
Distance : 2

86
Tree	final int sum ;
Code	final int sum ;
Distance : 4

87
Tree	int sum = missingEntries ? v.length : IncrementalCheckMode.GENERATE_IJS ;
Code	int sum = missingEntries ? v.length : IncrementalCheckMode.GENERATE_IJS ;
Distance : 6

88
Tree	int sum = / ;
Code	int sum = / ;
Distance : 2

89
Tree	int sum = IncrementalCheckMode.GENERATE_IJS ;
Code	int sum = IncrementalCheckMode.GENERATE_IJS ;
Distance : 2

90
Tree	int sum = missingEntries + NUMBER_CONSTANT ;
Code	int sum = missingEntries + NUMBER_CONSTANT ;
Distance : 3

91
Tree	int sum = <= ;
Code	int sum = <= ;
Distance : 2

92
Tree	int sum = ? ;
Code	int sum = ? ;
Distance : 2

93
Tree	double sum = null ;
Code	double sum = null ;
Distance : 1

94
Tree	int sum = getAbstractScope () . length ;
Code	int sum = getAbstractScope () . length ;
Distance : 5

95
Tree	int sum = new SerializableTypeVariable () ;
Code	int sum = new SerializableTypeVariable () ;
Distance : 4

96
Tree	int right ;
Code	int right ;
Distance : 4

97
Tree	int sum = getDimension () . length ;
Code	int sum = getDimension () . length ;
Distance : 5

98
Tree	final int sum = getNumber () ;
Code	final int sum = getNumber () ;
Distance : 4

99
Tree	int <= ;
Code	int <= ;
Distance : 4

100
Tree	int sum = this . minorTickMarksVisible ;
Code	int sum = this . minorTickMarksVisible ;
Distance : 4

101
Tree	int mean ;
Code	int mean ;
Distance : 4

102
Tree	int sum = ^ ;
Code	int sum = ^ ;
Distance : 2

103
Tree	int sum = <= ;
Code	int sum = <= ;
Distance : 2

104
Tree	int realEigenvalues [] = getTickLength () ;
Code	int realEigenvalues [] = getTickLength () ;
Distance : 5

105
Tree	int sampleSize = true ;
Code	int sampleSize = true ;
Distance : 3

106
Tree	int sum = new SinFunction () ;
Code	int sum = new SinFunction () ;
Distance : 4

107
Tree	final int sum = getColumnDimension () ;
Code	final int sum = getColumnDimension () ;
Distance : 4

108
Tree	int DEFAULT_ZERO_TOLERANCE = NUMBER_CONSTANT ;
Code	int DEFAULT_ZERO_TOLERANCE = NUMBER_CONSTANT ;
Distance : 2

109
Tree	final int sum = getDimension () ;
Code	final int sum = getDimension () ;
Distance : 4

110
Tree	int sum = fht () ;
Code	int sum = fht () ;
Distance : 3

111
Tree	int numberOfTrials = null ;
Code	int numberOfTrials = null ;
Distance : 3

112
Tree	int sum = y0 ? v.length : IncrementalCheckMode.GENERATE_IJS ;
Code	int sum = y0 ? v.length : IncrementalCheckMode.GENERATE_IJS ;
Distance : 6

113
Tree	int sum = point () ;
Code	int sum = point () ;
Distance : 3

114
Tree	int sum = Double.NaN ;
Code	int sum = Double.NaN ;
Distance : 2

115
Tree	int sum = null ;
Code	int sum = null ;
Distance : 2

116
Tree	int sum = forward ;
Code	int sum = forward ;
Distance : 2

117
Tree	int sum = mean + NUMBER_CONSTANT ;
Code	int sum = mean + NUMBER_CONSTANT ;
Distance : 3

118
Tree	int VarInfo [] = getTickLength () ;
Code	int VarInfo [] = getTickLength () ;
Distance : 5

119
Tree	int sum = this . data ;
Code	int sum = this . data ;
Distance : 4

120
Tree	int sum = getDimension () ;
Code	int sum = getDimension () ;
Distance : 3

121
Tree	int sum = Integer.MAX_VALUE ;
Code	int sum = Integer.MAX_VALUE ;
Distance : 2

122
Tree	int sum = CHAR_CONS ;
Code	int sum = CHAR_CONS ;
Distance : 2

123
Tree	int right = / ;
Code	int right = / ;
Distance : 3

124
Tree	int BetaDistribution [] = minor ;
Code	int BetaDistribution [] = minor ;
Distance : 4

125
Tree	int mean = NUMBER_CONSTANT ;
Code	int mean = NUMBER_CONSTANT ;
Distance : 2

126
Tree	int numberOfTrials = NUMBER_CONSTANT ;
Code	int numberOfTrials = NUMBER_CONSTANT ;
Distance : 2

127
Tree	int sum = ^ ;
Code	int sum = ^ ;
Distance : 2

128
Tree	int sum = NUMBER_CONSTANT * Calendar.SUNDAY ;
Code	int sum = NUMBER_CONSTANT * Calendar.SUNDAY ;
Distance : 3

129
Tree	int mean = null ;
Code	int mean = null ;
Distance : 3

130
Tree	int sum = NUMBER_CONSTANT * rhs.b ;
Code	int sum = NUMBER_CONSTANT * rhs.b ;
Distance : 3

131
Tree	int sum = NUMBER_CONSTANT * FastMath.PI ;
Code	int sum = NUMBER_CONSTANT * FastMath.PI ;
Distance : 3

132
Tree	final int sum = checkInitialize () ;
Code	final int sum = checkInitialize () ;
Distance : 4

133
Tree	int sum = {} ;
Code	int sum = {} ;
Distance : 2

134
Tree	int sum = NUMBER_CONSTANT * y.length ;
Code	int sum = NUMBER_CONSTANT * y.length ;
Distance : 3

135
Tree	int sum = v.length ;
Code	int sum = v.length ;
Distance : 2

136
Tree	int BetaDistribution [] = getTickLength () ;
Code	int BetaDistribution [] = getTickLength () ;
Distance : 5

137
Tree	int sum = += ;
Code	int sum = += ;
Distance : 2

138
Tree	int index [] = getTickLength () ;
Code	int index [] = getTickLength () ;
Distance : 5

139
Tree	int sum = FastFourierTransformer ? v.length : IncrementalCheckMode.GENERATE_IJS ;
Code	int sum = FastFourierTransformer ? v.length : IncrementalCheckMode.GENERATE_IJS ;
Distance : 6

140
Tree	int BetaDistribution [] = numberOfTrials ;
Code	int BetaDistribution [] = numberOfTrials ;
Distance : 4

141
Tree	final int sum = getAbstractScope () ;
Code	final int sum = getAbstractScope () ;
Distance : 4

142
Tree	int sum = getAbstractScope () ;
Code	int sum = getAbstractScope () ;
Distance : 3

143
Tree	abstract int sum ;
Code	abstract int sum ;
Distance : 4

144
Tree	int sum = ? ;
Code	int sum = ? ;
Distance : 2

145
Tree	int real [] = missingEntries ;
Code	int real [] = missingEntries ;
Distance : 4

146
Tree	double sum = true ;
Code	double sum = true ;
Distance : 1

147
Tree	int sum = missingEntries ? v.length : FunctionFlavor.NORMAL ;
Code	int sum = missingEntries ? v.length : FunctionFlavor.NORMAL ;
Distance : 6

148
Tree	final int SUM = NUMBER_CONSTANT ;
Code	final int SUM = NUMBER_CONSTANT ;
Distance : 3

149
Tree	final int numberOfTrials = NUMBER_CONSTANT ;
Code	final int numberOfTrials = NUMBER_CONSTANT ;
Distance : 3

150
Tree	int sum = checkInitialize () . length ;
Code	int sum = checkInitialize () . length ;
Distance : 5

151
Tree	int sum = y0 ? v.length : FunctionFlavor.NORMAL ;
Code	int sum = y0 ? v.length : FunctionFlavor.NORMAL ;
Distance : 6

152
Tree	int SUM = true ;
Code	int SUM = true ;
Distance : 3

153
Tree	final int numberOfTrials ;
Code	final int numberOfTrials ;
Distance : 4

154
Tree	int sum = <= ;
Code	int sum = <= ;
Distance : 2

155
Tree	int DEFAULT_ZERO_TOLERANCE = null ;
Code	int DEFAULT_ZERO_TOLERANCE = null ;
Distance : 3

156
Tree	int sum = else ;
Code	int sum = else ;
Distance : 2

157
Tree	int right = / ;
Code	int right = / ;
Distance : 3

158
Tree	final int right = NUMBER_CONSTANT ;
Code	final int right = NUMBER_CONSTANT ;
Distance : 3

159
Tree	int BetaDistribution [] = getName () ;
Code	int BetaDistribution [] = getName () ;
Distance : 5

160
Tree	public int sum ;
Code	public int sum ;
Distance : 4

161
Tree	int sum = false ;
Code	int sum = false ;
Distance : 2

162
Tree	int BetaDistribution [] = getLastInvocation () ;
Code	int BetaDistribution [] = getLastInvocation () ;
Distance : 5

163
Tree	int VarInfo [] = missingEntries ;
Code	int VarInfo [] = missingEntries ;
Distance : 4

164
Tree	int sum = else ;
Code	int sum = else ;
Distance : 2

165
Tree	int sum = ^ ;
Code	int sum = ^ ;
Distance : 2

166
Tree	int sum = NUMBER_CONSTANT * IncrementalCheckMode.GENERATE_IJS ;
Code	int sum = NUMBER_CONSTANT * IncrementalCheckMode.GENERATE_IJS ;
Distance : 3

167
Tree	public int sum = NUMBER_CONSTANT ;
Code	public int sum = NUMBER_CONSTANT ;
Distance : 2

168
Tree	double sum = CHAR_CONS ;
Code	double sum = CHAR_CONS ;
Distance : 1

169
Tree	final int SUM ;
Code	final int SUM ;
Distance : 4

170
Tree	double += ;
Code	double += ;
Distance : 3

171
Tree	int SUM = null ;
Code	int SUM = null ;
Distance : 3

172
Tree	int realEigenvalues [] = missingEntries ;
Code	int realEigenvalues [] = missingEntries ;
Distance : 4

173
Tree	int sum = STRING_CONSTANT + sampleSize ;
Code	int sum = STRING_CONSTANT + sampleSize ;
Distance : 4

174
Tree	int numberOfTrials = true ;
Code	int numberOfTrials = true ;
Distance : 3

175
Tree	int BetaDistribution [] = missingEntries ;
Code	int BetaDistribution [] = missingEntries ;
Distance : 4

176
Tree	long += ;
Code	long += ;
Distance : 4

177
Tree	int sample [] = getTickLength () ;
Code	int sample [] = getTickLength () ;
Distance : 5

178
Tree	int sum = NUMBER_CONSTANT * Verification.EXPLICIT ;
Code	int sum = NUMBER_CONSTANT * Verification.EXPLICIT ;
Distance : 3

179
Tree	int sum = missingEntries ? IncrementalCheckMode.GENERATE_IJS : FunctionFlavor.NORMAL ;
Code	int sum = missingEntries ? IncrementalCheckMode.GENERATE_IJS : FunctionFlavor.NORMAL ;
Distance : 6

180
Tree	int right = STRING_CONSTANT + sum ;
Code	int right = STRING_CONSTANT + sum ;
Distance : 5

181
Tree	int numberOfTrials = CHAR_CONS ;
Code	int numberOfTrials = CHAR_CONS ;
Distance : 3

182
Tree	int sum = STRING_CONSTANT + v ;
Code	int sum = STRING_CONSTANT + v ;
Distance : 4

183
Tree	int sampleSize = CHAR_CONS ;
Code	int sampleSize = CHAR_CONS ;
Distance : 3

184
Tree	abstract int sum = NUMBER_CONSTANT ;
Code	abstract int sum = NUMBER_CONSTANT ;
Distance : 2

185
Tree	int index [] = missingEntries ;
Code	int index [] = missingEntries ;
Distance : 4

186
Tree	int sum = NUMBER_CONSTANT * PropertyCollapseLevel.NONE ;
Code	int sum = NUMBER_CONSTANT * PropertyCollapseLevel.NONE ;
Distance : 3

187
Tree	int DEFAULT_ZERO_TOLERANCE = true ;
Code	int DEFAULT_ZERO_TOLERANCE = true ;
Distance : 3

188
Tree	int sample [] = missingEntries ;
Code	int sample [] = missingEntries ;
Distance : 4

189
Tree	final int mean = NUMBER_CONSTANT ;
Code	final int mean = NUMBER_CONSTANT ;
Distance : 3

190
Tree	int sum = STRING_CONSTANT + sum ;
Code	int sum = STRING_CONSTANT + sum ;
Distance : 4

191
Tree	int sum = STRING_CONSTANT + numberOfTrials ;
Code	int sum = STRING_CONSTANT + numberOfTrials ;
Distance : 4

192
Tree	int sum = STRING_CONSTANT + right ;
Code	int sum = STRING_CONSTANT + right ;
Distance : 4

193
Tree	int DEFAULT_ZERO_TOLERANCE = CHAR_CONS ;
Code	int DEFAULT_ZERO_TOLERANCE = CHAR_CONS ;
Distance : 3

194
Tree	int right = CHAR_CONS ;
Code	int right = CHAR_CONS ;
Distance : 3

195
Tree	int sum = STRING_CONSTANT + mean ;
Code	int sum = STRING_CONSTANT + mean ;
Distance : 4

196
Tree	int sum = STRING_CONSTANT + forward ;
Code	int sum = STRING_CONSTANT + forward ;
Distance : 4

197
Tree	int SUM = CHAR_CONS ;
Code	int SUM = CHAR_CONS ;
Distance : 3

198
Tree	final int sampleSize = NUMBER_CONSTANT ;
Code	final int sampleSize = NUMBER_CONSTANT ;
Distance : 3

199
Tree	int mean = CHAR_CONS ;
Code	int mean = CHAR_CONS ;
Distance : 3

========================================================================


========================================================================
Example Number: 63
Parent Code is: 
Iterator iter = res.entries . iterator () ;
-------------------------------------------------------------------------------
Child code is: 
Iterator iter = entries . iterator () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (40{val=res.entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (800{val=entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/49/parent/src_main_java_org_apache_commons_math_linear_OpenMapRealVector.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	Iterator iter = Cartesian2D.NaN . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = Cartesian2D.NaN . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

1
Tree	Iterator iter = getProvider ( instance.declarations ) . iterator () ;
Code	Iterator iter = getProvider ( instance.declarations ) . iterator () ;
Distance : 4

2
Tree	Iterator iter = invocationForStubbing . iterator ( coalescedName , null ) ;
Code	Iterator iter = invocationForStubbing . iterator ( coalescedName , null ) ;
Distance : 6

3
Tree	Iterator iter = findDomainAxisIndex ( STRING_CONSTANT ) ;
Code	Iterator iter = findDomainAxisIndex ( STRING_CONSTANT ) ;
Distance : 4

4
Tree	Iterator iter = findMatching () ;
Code	Iterator iter = findMatching () ;
Distance : 3

5
Tree	Iterator iter = firstOf ( instance.declarations ) . iterator () ;
Code	Iterator iter = firstOf ( instance.declarations ) . iterator () ;
Distance : 4

6
Tree	Iterator val = this . iterator . iterator () ;
Code	Iterator val = this . iterator . iterator () ;
Distance : 4

7
Tree	Iterator iter = getPropFromClass ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getPropFromClass ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

8
Tree	Iterator iter = findMatching ( NUMBER_CONSTANT ) ;
Code	Iterator iter = findMatching ( NUMBER_CONSTANT ) ;
Distance : 4

9
Tree	Iterator iter = ReadablePeriodConverter . iterator ( null ) ;
Code	Iterator iter = ReadablePeriodConverter . iterator ( null ) ;
Distance : 4

10
Tree	Iterator iter = invocationForStubbing . iterator ( NUMBER_CONSTANT , instance.declarations ) ;
Code	Iterator iter = invocationForStubbing . iterator ( NUMBER_CONSTANT , instance.declarations ) ;
Distance : 6

11
Tree	Iterator iter = rhsNode . iterator ( coalescedName , null ) ;
Code	Iterator iter = rhsNode . iterator ( coalescedName , null ) ;
Distance : 6

12
Tree	Iterator iter = rhsNode . iterator ( NUMBER_CONSTANT , instance.declarations ) ;
Code	Iterator iter = rhsNode . iterator ( NUMBER_CONSTANT , instance.declarations ) ;
Distance : 6

13
Tree	Iterator iter = this . iterator . iterator () ;
Code	Iterator iter = this . iterator . iterator () ;
Distance : 3

14
Tree	Iterator iter = Cartesian2D.NaN . iterator () ;
Code	Iterator iter = Cartesian2D.NaN . iterator () ;
Distance : 1

15
Tree	Iterator iter = parseExponentiationExpression () ;
Code	Iterator iter = parseExponentiationExpression () ;
Distance : 3

16
Tree	Iterator iter = parseExponentiationExpression ( NUMBER_CONSTANT ) ;
Code	Iterator iter = parseExponentiationExpression ( NUMBER_CONSTANT ) ;
Distance : 4

17
Tree	Iterator iter = rhsNode . iterator () ;
Code	Iterator iter = rhsNode . iterator () ;
Distance : 1

18
Tree	Iterator iter = source.contractionCriterion . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = source.contractionCriterion . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

19
Tree	Iterator iter = PropAccess.STRUCT . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = PropAccess.STRUCT . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

20
Tree	Iterator iter = parseExponentiationExpression ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = parseExponentiationExpression ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

21
Tree	Iterator iter = parseExponentiationExpression ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = parseExponentiationExpression ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

22
Tree	Iterator iter = parseExponentiationExpression ( instance.declarations ) ;
Code	Iterator iter = parseExponentiationExpression ( instance.declarations ) ;
Distance : 4

23
Tree	Iterator iter = getMillisPerUnit ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getMillisPerUnit ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

24
Tree	Iterator iter = firstOf () ;
Code	Iterator iter = firstOf () ;
Distance : 3

25
Tree	Iterator iter = firstOf ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = firstOf ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

26
Tree	Iterator iter = getProvider () ;
Code	Iterator iter = getProvider () ;
Distance : 3

27
Tree	Iterator iter = parseExponentiationExpression ( this . iterator ) ;
Code	Iterator iter = parseExponentiationExpression ( this . iterator ) ;
Distance : 4

28
Tree	Iterator iter = firstOf ( rhsNode . class ) ;
Code	Iterator iter = firstOf ( rhsNode . class ) ;
Distance : 5

29
Tree	Iterator iter = invocationForStubbing . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = invocationForStubbing . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

30
Tree	Iterator iter = binaryComparator . iterator ( NUMBER_CONSTANT , java.lang.Class ) ;
Code	Iterator iter = binaryComparator . iterator ( NUMBER_CONSTANT , java.lang.Class ) ;
Distance : 6

31
Tree	Iterator iter = coefficients.length . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = coefficients.length . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

32
Tree	Iterator iter = findMatching ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = findMatching ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

33
Tree	Iterator iter = Cartesian2D.NaN . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator iter = Cartesian2D.NaN . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 6

34
Tree	Iterator iter = columnLabels . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = columnLabels . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

35
Tree	Iterator iter = binaryComparator . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = binaryComparator . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

36
Tree	Iterator iter = parseExponentiationExpression ( null , STRING_CONSTANT ) ;
Code	Iterator iter = parseExponentiationExpression ( null , STRING_CONSTANT ) ;
Distance : 6

37
Tree	Iterator iter = getProvider ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getProvider ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

38
Tree	Iterator iter = firstOf ( STRING_CONSTANT ) ;
Code	Iterator iter = firstOf ( STRING_CONSTANT ) ;
Distance : 4

39
Tree	Iterator iter = firstOf ( instance.declarations ) ;
Code	Iterator iter = firstOf ( instance.declarations ) ;
Distance : 4

40
Tree	Iterator iter = ERA_FIELD . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = ERA_FIELD . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

41
Tree	Iterator iter = firstOf ( NUMBER_CONSTANT ) ;
Code	Iterator iter = firstOf ( NUMBER_CONSTANT ) ;
Distance : 4

42
Tree	Iterator iter = Cartesian2D.NEGATIVE_INFINITY . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = Cartesian2D.NEGATIVE_INFINITY . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

43
Tree	Iterator iter = parseExponentiationExpression ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = parseExponentiationExpression ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

44
Tree	Iterator iter = invocationForStubbing . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = invocationForStubbing . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

45
Tree	Iterator iter = instance.declarations . iterator () ;
Code	Iterator iter = instance.declarations . iterator () ;
Distance : 1

46
Tree	Iterator iter = findDomainAxisIndex ( null , STRING_CONSTANT ) ;
Code	Iterator iter = findDomainAxisIndex ( null , STRING_CONSTANT ) ;
Distance : 6

47
Tree	Iterator iter = Cartesian1D.NEGATIVE_INFINITY . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = Cartesian1D.NEGATIVE_INFINITY . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

48
Tree	Iterator iter = binaryComparator . iterator ( coalescedName . class ) ;
Code	Iterator iter = binaryComparator . iterator ( coalescedName . class ) ;
Distance : 6

49
Tree	Iterator iter = getProvider ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getProvider ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

50
Tree	Iterator iter = getProvider ( NUMBER_CONSTANT ) ;
Code	Iterator iter = getProvider ( NUMBER_CONSTANT ) ;
Distance : 4

51
Tree	Iterator iter = source.contractionCriterion . iterator () ;
Code	Iterator iter = source.contractionCriterion . iterator () ;
Distance : 1

52
Tree	Iterator iter = ReadablePeriodConverter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = ReadablePeriodConverter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

53
Tree	Iterator iter = findDomainAxisIndex () ;
Code	Iterator iter = findDomainAxisIndex () ;
Distance : 3

54
Tree	Iterator iter = parseExponentiationExpression ( obj1.props ) ;
Code	Iterator iter = parseExponentiationExpression ( obj1.props ) ;
Distance : 4

55
Tree	Iterator iter = getPropFromClass ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getPropFromClass ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

56
Tree	Iterator iter = getPropFromClass ( this . iterator ) ;
Code	Iterator iter = getPropFromClass ( this . iterator ) ;
Distance : 4

57
Tree	Iterator iter = columnLabels . iterator ( NUMBER_CONSTANT , java.lang.Class ) ;
Code	Iterator iter = columnLabels . iterator ( NUMBER_CONSTANT , java.lang.Class ) ;
Distance : 6

58
Tree	Iterator iter = getMillisPerUnit () ;
Code	Iterator iter = getMillisPerUnit () ;
Distance : 3

59
Tree	Iterator iter = invocationForStubbing . iterator ( null ) ;
Code	Iterator iter = invocationForStubbing . iterator ( null ) ;
Distance : 4

60
Tree	Iterator iter = findDomainAxisIndex ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = findDomainAxisIndex ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

61
Tree	Iterator iter = Cartesian1D.NEGATIVE_INFINITY . iterator () ;
Code	Iterator iter = Cartesian1D.NEGATIVE_INFINITY . iterator () ;
Distance : 1

62
Tree	Iterator iter = firstOf ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = firstOf ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

63
Tree	Iterator iter = firstOf ( obj1.props ) ;
Code	Iterator iter = firstOf ( obj1.props ) ;
Distance : 4

64
Tree	Iterator iter = invocationForStubbing . iterator ( NUMBER_CONSTANT , java.lang.Class ) ;
Code	Iterator iter = invocationForStubbing . iterator ( NUMBER_CONSTANT , java.lang.Class ) ;
Distance : 6

65
Tree	Iterator iter = invocationForStubbing . iterator () ;
Code	Iterator iter = invocationForStubbing . iterator () ;
Distance : 1

66
Tree	Iterator iter = ols . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = ols . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

67
Tree	Iterator iter = findMatching ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = findMatching ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

68
Tree	Iterator iter = getProperNumerator ( STRING_CONSTANT ) ;
Code	Iterator iter = getProperNumerator ( STRING_CONSTANT ) ;
Distance : 4

69
Tree	Iterator iter = findMatching ( this . iterator ) ;
Code	Iterator iter = findMatching ( this . iterator ) ;
Distance : 4

70
Tree	Iterator iter = firstOf ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = firstOf ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

71
Tree	Iterator iter = PropAccess.STRUCT . iterator () ;
Code	Iterator iter = PropAccess.STRUCT . iterator () ;
Distance : 1

72
Tree	Iterator iter = binaryComparator . iterator ( null ) ;
Code	Iterator iter = binaryComparator . iterator ( null ) ;
Distance : 4

73
Tree	Iterator iter = PivotSelectionRule.DANTZIG . iterator () ;
Code	Iterator iter = PivotSelectionRule.DANTZIG . iterator () ;
Distance : 1

74
Tree	Iterator iter = parseExponentiationExpression ( functionContext.function ) ;
Code	Iterator iter = parseExponentiationExpression ( functionContext.function ) ;
Distance : 4

75
Tree	Iterator iter = parseExponentiationExpression ( invocationForStubbing . class ) ;
Code	Iterator iter = parseExponentiationExpression ( invocationForStubbing . class ) ;
Distance : 5

76
Tree	Iterator iter = binaryComparator . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = binaryComparator . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

77
Tree	Iterator iter = ReadablePeriodConverter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = ReadablePeriodConverter . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

78
Tree	Iterator iter = TypeUtilsTest . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = TypeUtilsTest . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

79
Tree	NoInteractionsWanted iter = this . iterator . iterator () ;
Code	NoInteractionsWanted iter = this . iterator . iterator () ;
Distance : 4

80
Tree	Iterator iter = firstOf ( functionContext.function ) ;
Code	Iterator iter = firstOf ( functionContext.function ) ;
Distance : 4

81
Tree	Iterator iter = getProperNumerator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getProperNumerator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

82
Tree	Iterator iter = instance.declarations . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = instance.declarations . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

83
Tree	Iterator iter = firstOf ( obj1.props ) . iterator () ;
Code	Iterator iter = firstOf ( obj1.props ) . iterator () ;
Distance : 4

84
Tree	Iterator iter = rhsNode . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = rhsNode . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

85
Tree	Iterator iter = columnLabels . iterator ( null ) ;
Code	Iterator iter = columnLabels . iterator ( null ) ;
Distance : 4

86
Tree	Iterator iter = ERA_FIELD . iterator ( null ) ;
Code	Iterator iter = ERA_FIELD . iterator ( null ) ;
Distance : 4

87
Tree	Iterator iter = findDomainAxisIndex ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = findDomainAxisIndex ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

88
Tree	Iterator iter = invocationForStubbing . iterator ( coalescedName . class ) ;
Code	Iterator iter = invocationForStubbing . iterator ( coalescedName . class ) ;
Distance : 6

89
Tree	Iterator iter = getPropFromClass ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getPropFromClass ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

90
Tree	Iterator iter = parseExponentiationExpression ( STRING_CONSTANT ) ;
Code	Iterator iter = parseExponentiationExpression ( STRING_CONSTANT ) ;
Distance : 4

91
Tree	Iterator iter = parseExponentiationExpression ( functionContext.function ) . iterator () ;
Code	Iterator iter = parseExponentiationExpression ( functionContext.function ) . iterator () ;
Distance : 4

92
Tree	Iterator iter = parseExponentiationExpression ( instance.declarations ) . iterator () ;
Code	Iterator iter = parseExponentiationExpression ( instance.declarations ) . iterator () ;
Distance : 4

93
Tree	Iterator iter = findMatching ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = findMatching ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

94
Tree	Iterator iter = rhsNode . iterator ( NUMBER_CONSTANT , java.lang.Class ) ;
Code	Iterator iter = rhsNode . iterator ( NUMBER_CONSTANT , java.lang.Class ) ;
Distance : 6

95
Tree	Iterator iter = firstOf ( invocationForStubbing . class ) ;
Code	Iterator iter = firstOf ( invocationForStubbing . class ) ;
Distance : 5

96
Tree	Iterator iter = findDomainAxisIndex ( NUMBER_CONSTANT ) ;
Code	Iterator iter = findDomainAxisIndex ( NUMBER_CONSTANT ) ;
Distance : 4

97
Tree	Iterator iter = findMatching ( instance.declarations ) . iterator () ;
Code	Iterator iter = findMatching ( instance.declarations ) . iterator () ;
Distance : 4

98
Tree	Iterator iter = rhsNode . iterator ( coalescedName . class ) ;
Code	Iterator iter = rhsNode . iterator ( coalescedName . class ) ;
Distance : 6

99
Tree	Iterator iter = new GeneralPath ( STRING_CONSTANT ) . iterator () ;
Code	Iterator iter = new GeneralPath ( STRING_CONSTANT ) . iterator () ;
Distance : 5

100
Tree	Iterator iter = getProperNumerator ( this . iterator ) ;
Code	Iterator iter = getProperNumerator ( this . iterator ) ;
Distance : 4

101
Tree	Iterator iter = ReadablePeriodConverter . iterator () ;
Code	Iterator iter = ReadablePeriodConverter . iterator () ;
Distance : 1

102
Tree	Iterator iter = rhsNode . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = rhsNode . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

103
Tree	Iterator iter = new Outer ( STRING_CONSTANT ) . iterator () ;
Code	Iterator iter = new Outer ( STRING_CONSTANT ) . iterator () ;
Distance : 5

104
Tree	Iterator iter = source.contractionCriterion . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator iter = source.contractionCriterion . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 6

105
Tree	Iterator iter = ERA_FIELD . iterator () ;
Code	Iterator iter = ERA_FIELD . iterator () ;
Distance : 1

106
Tree	Iterator iter = firstOf ( null , STRING_CONSTANT ) ;
Code	Iterator iter = firstOf ( null , STRING_CONSTANT ) ;
Distance : 6

107
Tree	Iterator iter = parseExponentiationExpression ( instance.declarations , java.lang.Class ) ;
Code	Iterator iter = parseExponentiationExpression ( instance.declarations , java.lang.Class ) ;
Distance : 6

108
Tree	Iterator iter = getProvider ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getProvider ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

109
Tree	Iterator iter = firstOf ( this . iterator ) ;
Code	Iterator iter = firstOf ( this . iterator ) ;
Distance : 4

110
Tree	Iterator iter = parseExponentiationExpression ( rhsNode . class ) ;
Code	Iterator iter = parseExponentiationExpression ( rhsNode . class ) ;
Distance : 5

111
Tree	Iterator iter = getPropFromClass () ;
Code	Iterator iter = getPropFromClass () ;
Distance : 3

112
Tree	Iterator iter = ols . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = ols . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

113
Tree	Iterator iter = columnLabels . iterator ( coalescedName , null ) ;
Code	Iterator iter = columnLabels . iterator ( coalescedName , null ) ;
Distance : 6

114
Tree	Iterator iter = PivotSelectionRule.DANTZIG . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = PivotSelectionRule.DANTZIG . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

115
Tree	Iterator toRemove = this . iterator . iterator () ;
Code	Iterator toRemove = this . iterator . iterator () ;
Distance : 4

116
Tree	Iterator series1 = this . iterator . iterator () ;
Code	Iterator series1 = this . iterator . iterator () ;
Distance : 4

117
Tree	Iterator iter = invocationForStubbing . iterator ( rightmostName . class ) ;
Code	Iterator iter = invocationForStubbing . iterator ( rightmostName . class ) ;
Distance : 6

118
Tree	Iterator iter = findMatching ( invocationForStubbing . class ) ;
Code	Iterator iter = findMatching ( invocationForStubbing . class ) ;
Distance : 5

119
Tree	Iterator iter = getProperNumerator () ;
Code	Iterator iter = getProperNumerator () ;
Distance : 3

120
Tree	Iterator iter = firstOf ( instance.declarations , java.lang.Class ) ;
Code	Iterator iter = firstOf ( instance.declarations , java.lang.Class ) ;
Distance : 6

121
Tree	Iterator iter = parseExponentiationExpression ( coalescedName . class ) ;
Code	Iterator iter = parseExponentiationExpression ( coalescedName . class ) ;
Distance : 5

122
Tree	Iterator iter = binaryComparator . iterator () ;
Code	Iterator iter = binaryComparator . iterator () ;
Distance : 1

123
Tree	Iterator iter = getProperNumerator ( null , STRING_CONSTANT ) ;
Code	Iterator iter = getProperNumerator ( null , STRING_CONSTANT ) ;
Distance : 6

124
Tree	Iterator iter = findMatching ( instance.declarations ) ;
Code	Iterator iter = findMatching ( instance.declarations ) ;
Distance : 4

125
Tree	Iterator iter = getProvider ( this . iterator ) ;
Code	Iterator iter = getProvider ( this . iterator ) ;
Distance : 4

126
Tree	Iterator iter = coefficients.length . iterator () ;
Code	Iterator iter = coefficients.length . iterator () ;
Distance : 1

127
Tree	Iterator iter = getProvider ( instance.declarations ) ;
Code	Iterator iter = getProvider ( instance.declarations ) ;
Distance : 4

128
Tree	Iterator iter = ERA_FIELD . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = ERA_FIELD . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

129
Tree	Iterator iter = rhsNode . iterator ( null ) ;
Code	Iterator iter = rhsNode . iterator ( null ) ;
Distance : 4

130
Tree	Iterator iter = columnLabels . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = columnLabels . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

131
Tree	Iterator iter = findDomainAxisIndex ( this . iterator ) ;
Code	Iterator iter = findDomainAxisIndex ( this . iterator ) ;
Distance : 4

132
Tree	Iterator iter = Cartesian2D.NEGATIVE_INFINITY . iterator () ;
Code	Iterator iter = Cartesian2D.NEGATIVE_INFINITY . iterator () ;
Distance : 1

133
Tree	Iterator iter = getProperNumerator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getProperNumerator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

134
Tree	Iterator iter = getMillisPerUnit ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getMillisPerUnit ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

135
Tree	Iterator iter = TypeUtilsTest . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = TypeUtilsTest . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

136
Tree	Iterator iter = firstOf ( functionContext.function ) . iterator () ;
Code	Iterator iter = firstOf ( functionContext.function ) . iterator () ;
Distance : 4

137
Tree	Iterator iter = ols . iterator ( null ) ;
Code	Iterator iter = ols . iterator ( null ) ;
Distance : 4

138
Tree	Iterator iter = getPropFromClass ( null , STRING_CONSTANT ) ;
Code	Iterator iter = getPropFromClass ( null , STRING_CONSTANT ) ;
Distance : 6

139
Tree	Iterator iter = columnLabels . iterator () ;
Code	Iterator iter = columnLabels . iterator () ;
Distance : 1

140
Tree	Iterator iter = TypeUtilsTest . iterator ( null ) ;
Code	Iterator iter = TypeUtilsTest . iterator ( null ) ;
Distance : 4

141
Tree	Iterator iter = findMatching ( STRING_CONSTANT ) ;
Code	Iterator iter = findMatching ( STRING_CONSTANT ) ;
Distance : 4

142
Tree	Iterator iter = firstOf ( coalescedName . class ) ;
Code	Iterator iter = firstOf ( coalescedName . class ) ;
Distance : 5

143
Tree	Iterator iter = ReadablePeriodConverter . iterator ( coalescedName , null ) ;
Code	Iterator iter = ReadablePeriodConverter . iterator ( coalescedName , null ) ;
Distance : 6

144
Tree	Iterator iter = coefficients.length . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator iter = coefficients.length . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 6

145
Tree	Iterator iter = ReadablePeriodConverter . iterator ( NUMBER_CONSTANT , java.lang.Class ) ;
Code	Iterator iter = ReadablePeriodConverter . iterator ( NUMBER_CONSTANT , java.lang.Class ) ;
Distance : 6

146
Tree	Iterator iter = rhsNode . iterator ( obj1.props , NUMBER_CONSTANT ) ;
Code	Iterator iter = rhsNode . iterator ( obj1.props , NUMBER_CONSTANT ) ;
Distance : 6

147
Tree	Iterator iter = getProperNumerator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = getProperNumerator ( NUMBER_CONSTANT ) ;
Distance : 4

148
Tree	Iterator iter = getProvider ( STRING_CONSTANT ) ;
Code	Iterator iter = getProvider ( STRING_CONSTANT ) ;
Distance : 4

149
Tree	Iterator iter = parseExponentiationExpression ( obj1.props ) . iterator () ;
Code	Iterator iter = parseExponentiationExpression ( obj1.props ) . iterator () ;
Distance : 4

150
Tree	Iterator iter = getMillisPerUnit ( STRING_CONSTANT ) ;
Code	Iterator iter = getMillisPerUnit ( STRING_CONSTANT ) ;
Distance : 4

151
Tree	Iterator iter = binaryComparator . iterator ( coalescedName , null ) ;
Code	Iterator iter = binaryComparator . iterator ( coalescedName , null ) ;
Distance : 6

152
Tree	Iterator iter = new Expm1 ( STRING_CONSTANT ) . iterator () ;
Code	Iterator iter = new Expm1 ( STRING_CONSTANT ) . iterator () ;
Distance : 5

153
Tree	Iterator iter = getPropFromClass ( NUMBER_CONSTANT ) ;
Code	Iterator iter = getPropFromClass ( NUMBER_CONSTANT ) ;
Distance : 4

154
Tree	Iterator iter = getMillisPerUnit ( null , STRING_CONSTANT ) ;
Code	Iterator iter = getMillisPerUnit ( null , STRING_CONSTANT ) ;
Distance : 6

155
Tree	Iterator iter = ols . iterator () ;
Code	Iterator iter = ols . iterator () ;
Distance : 1

156
Tree	Iterator iter = instance.declarations . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator iter = instance.declarations . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 6

157
Tree	Iterator iter = new UnicodeUnescaper ( STRING_CONSTANT ) . iterator () ;
Code	Iterator iter = new UnicodeUnescaper ( STRING_CONSTANT ) . iterator () ;
Distance : 5

158
Tree	Iterator iter = invocationForStubbing . iterator ( instance.declarations , NUMBER_CONSTANT ) ;
Code	Iterator iter = invocationForStubbing . iterator ( instance.declarations , NUMBER_CONSTANT ) ;
Distance : 6

159
Tree	Iterator iter = getMillisPerUnit ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getMillisPerUnit ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

160
Tree	Iterator iter = new NumericEntityUnescaper ( STRING_CONSTANT ) . iterator () ;
Code	Iterator iter = new NumericEntityUnescaper ( STRING_CONSTANT ) . iterator () ;
Distance : 5

161
Tree	Iterator iter = TypeUtilsTest . iterator () ;
Code	Iterator iter = TypeUtilsTest . iterator () ;
Distance : 1

162
Tree	Iterator iter = invocationForStubbing . iterator ( rightmostName , null ) ;
Code	Iterator iter = invocationForStubbing . iterator ( rightmostName , null ) ;
Distance : 6

163
Tree	Iterator iter = ERA_FIELD . iterator ( coalescedName . class ) ;
Code	Iterator iter = ERA_FIELD . iterator ( coalescedName . class ) ;
Distance : 6

164
Tree	Iterator iter = PivotSelectionRule.DANTZIG . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator iter = PivotSelectionRule.DANTZIG . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 6

165
Tree	Iterator iter = getProvider ( null , STRING_CONSTANT ) ;
Code	Iterator iter = getProvider ( null , STRING_CONSTANT ) ;
Distance : 6

166
Tree	Iterator iter = getPropFromClass ( STRING_CONSTANT ) ;
Code	Iterator iter = getPropFromClass ( STRING_CONSTANT ) ;
Distance : 4

167
Tree	Iterator iter = Cartesian2D.NEGATIVE_INFINITY . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator iter = Cartesian2D.NEGATIVE_INFINITY . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 6

168
Tree	Iterator iter = findDomainAxisIndex ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = findDomainAxisIndex ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

169
Tree	Iterator iter = new XMinus5Function ( STRING_CONSTANT ) . iterator () ;
Code	Iterator iter = new XMinus5Function ( STRING_CONSTANT ) . iterator () ;
Distance : 5

170
Tree	Iterator iter = PropAccess.STRUCT . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator iter = PropAccess.STRUCT . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 6

171
Tree	Iterator iter = invocationForStubbing . iterator ( NUMBER_CONSTANT , source.contractionCriterion ) ;
Code	Iterator iter = invocationForStubbing . iterator ( NUMBER_CONSTANT , source.contractionCriterion ) ;
Distance : 6

172
Tree	Iterator iter = new Sigmoid ( STRING_CONSTANT ) . iterator () ;
Code	Iterator iter = new Sigmoid ( STRING_CONSTANT ) . iterator () ;
Distance : 5

173
Tree	Iterator iter = findMatching ( null , STRING_CONSTANT ) ;
Code	Iterator iter = findMatching ( null , STRING_CONSTANT ) ;
Distance : 6

174
Tree	Iterator iter = rhsNode . iterator ( rightmostName . class ) ;
Code	Iterator iter = rhsNode . iterator ( rightmostName . class ) ;
Distance : 6

175
Tree	Iterator iter = getProperNumerator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getProperNumerator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

176
Tree	Iterator iter = getMillisPerUnit ( this . iterator ) ;
Code	Iterator iter = getMillisPerUnit ( this . iterator ) ;
Distance : 4

177
Tree	Iterator iter = invocationForStubbing . iterator ( obj1.props , NUMBER_CONSTANT ) ;
Code	Iterator iter = invocationForStubbing . iterator ( obj1.props , NUMBER_CONSTANT ) ;
Distance : 6

178
Tree	Iterator iter = columnLabels . iterator ( coalescedName . class ) ;
Code	Iterator iter = columnLabels . iterator ( coalescedName . class ) ;
Distance : 6

179
Tree	Iterator iter = getProvider ( invocationForStubbing . class ) ;
Code	Iterator iter = getProvider ( invocationForStubbing . class ) ;
Distance : 5

180
Tree	Iterator iter = ReadablePeriodConverter . iterator ( coalescedName . class ) ;
Code	Iterator iter = ReadablePeriodConverter . iterator ( coalescedName . class ) ;
Distance : 6

181
Tree	Iterator iter = Cartesian1D.NEGATIVE_INFINITY . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator iter = Cartesian1D.NEGATIVE_INFINITY . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 6

182
Tree	Iterator iter = binaryComparator . iterator ( obj1.props , NUMBER_CONSTANT ) ;
Code	Iterator iter = binaryComparator . iterator ( obj1.props , NUMBER_CONSTANT ) ;
Distance : 6

183
Tree	Iterator iter = getMillisPerUnit ( NUMBER_CONSTANT ) ;
Code	Iterator iter = getMillisPerUnit ( NUMBER_CONSTANT ) ;
Distance : 4

184
Tree	Iterator iter = invocationForStubbing . iterator ( functionContext.function , NUMBER_CONSTANT ) ;
Code	Iterator iter = invocationForStubbing . iterator ( functionContext.function , NUMBER_CONSTANT ) ;
Distance : 6

185
Tree	Iterator iter = parseExponentiationExpression ( functionContext.function , java.lang.Class ) ;
Code	Iterator iter = parseExponentiationExpression ( functionContext.function , java.lang.Class ) ;
Distance : 6

186
Tree	Iterator iter = columnLabels . iterator ( obj1.props , NUMBER_CONSTANT ) ;
Code	Iterator iter = columnLabels . iterator ( obj1.props , NUMBER_CONSTANT ) ;
Distance : 6

187
Tree	Iterator iter = firstOf ( functionContext.function , java.lang.Class ) ;
Code	Iterator iter = firstOf ( functionContext.function , java.lang.Class ) ;
Distance : 6

188
Tree	Range iter = this . iterator . iterator () ;
Code	Range iter = this . iterator . iterator () ;
Distance : 4

189
Tree	Iterator iter = findMatching ( instance.declarations , java.lang.Class ) ;
Code	Iterator iter = findMatching ( instance.declarations , java.lang.Class ) ;
Distance : 6

190
Tree	Iterator iter = rhsNode . iterator ( instance.declarations , NUMBER_CONSTANT ) ;
Code	Iterator iter = rhsNode . iterator ( instance.declarations , NUMBER_CONSTANT ) ;
Distance : 6

191
Tree	Iterator iter = ERA_FIELD . iterator ( coalescedName , null ) ;
Code	Iterator iter = ERA_FIELD . iterator ( coalescedName , null ) ;
Distance : 6

192
Tree	Iterator iter = rhsNode . iterator ( rightmostName , null ) ;
Code	Iterator iter = rhsNode . iterator ( rightmostName , null ) ;
Distance : 6

193
Tree	Iterator den = this . iterator . iterator () ;
Code	Iterator den = this . iterator . iterator () ;
Distance : 4

194
Tree	Iterator iter = getProvider ( instance.declarations , java.lang.Class ) ;
Code	Iterator iter = getProvider ( instance.declarations , java.lang.Class ) ;
Distance : 6

195
Tree	Iterator compare = this . iterator . iterator () ;
Code	Iterator compare = this . iterator . iterator () ;
Distance : 4

196
Tree	Iterator iter = new BitSet ( STRING_CONSTANT ) . iterator () ;
Code	Iterator iter = new BitSet ( STRING_CONSTANT ) . iterator () ;
Distance : 5

197
Tree	Iterator iter = parseExponentiationExpression ( obj1.props , java.lang.Class ) ;
Code	Iterator iter = parseExponentiationExpression ( obj1.props , java.lang.Class ) ;
Distance : 6

198
Tree	Iterator iter = invocationForStubbing . iterator ( UnicodeUnescaper.PARAM.escapePlus , NUMBER_CONSTANT ) ;
Code	Iterator iter = invocationForStubbing . iterator ( UnicodeUnescaper.PARAM.escapePlus , NUMBER_CONSTANT ) ;
Distance : 6

199
Tree	Iterator iter = firstOf ( obj1.props , java.lang.Class ) ;
Code	Iterator iter = firstOf ( obj1.props , java.lang.Class ) ;
Distance : 6

========================================================================


========================================================================
Example Number: 64
Parent Code is: 
Iterator iter = res.entries . iterator () ;
-------------------------------------------------------------------------------
Child code is: 
Iterator iter = entries . iterator () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (40{val=res.entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (800{val=entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/49/parent/src_main_java_org_apache_commons_math_linear_OpenMapRealVector.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	Iterator iter = Cartesian2D.NaN . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = Cartesian2D.NaN . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

1
Tree	Iterator iter = getProvider ( instance.declarations ) . iterator () ;
Code	Iterator iter = getProvider ( instance.declarations ) . iterator () ;
Distance : 4

2
Tree	Iterator iter = invocationForStubbing . iterator ( coalescedName , null ) ;
Code	Iterator iter = invocationForStubbing . iterator ( coalescedName , null ) ;
Distance : 6

3
Tree	Iterator iter = findDomainAxisIndex ( STRING_CONSTANT ) ;
Code	Iterator iter = findDomainAxisIndex ( STRING_CONSTANT ) ;
Distance : 4

4
Tree	Iterator iter = findMatching () ;
Code	Iterator iter = findMatching () ;
Distance : 3

5
Tree	Iterator iter = firstOf ( instance.declarations ) . iterator () ;
Code	Iterator iter = firstOf ( instance.declarations ) . iterator () ;
Distance : 4

6
Tree	Iterator val = this . iterator . iterator () ;
Code	Iterator val = this . iterator . iterator () ;
Distance : 4

7
Tree	Iterator iter = getPropFromClass ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getPropFromClass ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

8
Tree	Iterator iter = findMatching ( NUMBER_CONSTANT ) ;
Code	Iterator iter = findMatching ( NUMBER_CONSTANT ) ;
Distance : 4

9
Tree	Iterator iter = ReadablePeriodConverter . iterator ( null ) ;
Code	Iterator iter = ReadablePeriodConverter . iterator ( null ) ;
Distance : 4

10
Tree	Iterator iter = invocationForStubbing . iterator ( NUMBER_CONSTANT , instance.declarations ) ;
Code	Iterator iter = invocationForStubbing . iterator ( NUMBER_CONSTANT , instance.declarations ) ;
Distance : 6

11
Tree	Iterator iter = rhsNode . iterator ( coalescedName , null ) ;
Code	Iterator iter = rhsNode . iterator ( coalescedName , null ) ;
Distance : 6

12
Tree	Iterator iter = rhsNode . iterator ( NUMBER_CONSTANT , instance.declarations ) ;
Code	Iterator iter = rhsNode . iterator ( NUMBER_CONSTANT , instance.declarations ) ;
Distance : 6

13
Tree	Iterator iter = this . iterator . iterator () ;
Code	Iterator iter = this . iterator . iterator () ;
Distance : 3

14
Tree	Iterator iter = Cartesian2D.NaN . iterator () ;
Code	Iterator iter = Cartesian2D.NaN . iterator () ;
Distance : 1

15
Tree	Iterator iter = parseExponentiationExpression () ;
Code	Iterator iter = parseExponentiationExpression () ;
Distance : 3

16
Tree	Iterator iter = parseExponentiationExpression ( NUMBER_CONSTANT ) ;
Code	Iterator iter = parseExponentiationExpression ( NUMBER_CONSTANT ) ;
Distance : 4

17
Tree	Iterator iter = rhsNode . iterator () ;
Code	Iterator iter = rhsNode . iterator () ;
Distance : 1

18
Tree	Iterator iter = source.contractionCriterion . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = source.contractionCriterion . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

19
Tree	Iterator iter = PropAccess.STRUCT . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = PropAccess.STRUCT . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

20
Tree	Iterator iter = parseExponentiationExpression ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = parseExponentiationExpression ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

21
Tree	Iterator iter = parseExponentiationExpression ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = parseExponentiationExpression ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

22
Tree	Iterator iter = parseExponentiationExpression ( instance.declarations ) ;
Code	Iterator iter = parseExponentiationExpression ( instance.declarations ) ;
Distance : 4

23
Tree	Iterator iter = getMillisPerUnit ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getMillisPerUnit ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

24
Tree	Iterator iter = firstOf () ;
Code	Iterator iter = firstOf () ;
Distance : 3

25
Tree	Iterator iter = firstOf ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = firstOf ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

26
Tree	Iterator iter = getProvider () ;
Code	Iterator iter = getProvider () ;
Distance : 3

27
Tree	Iterator iter = parseExponentiationExpression ( this . iterator ) ;
Code	Iterator iter = parseExponentiationExpression ( this . iterator ) ;
Distance : 4

28
Tree	Iterator iter = firstOf ( rhsNode . class ) ;
Code	Iterator iter = firstOf ( rhsNode . class ) ;
Distance : 5

29
Tree	Iterator iter = invocationForStubbing . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = invocationForStubbing . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

30
Tree	Iterator iter = binaryComparator . iterator ( NUMBER_CONSTANT , java.lang.Class ) ;
Code	Iterator iter = binaryComparator . iterator ( NUMBER_CONSTANT , java.lang.Class ) ;
Distance : 6

31
Tree	Iterator iter = coefficients.length . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = coefficients.length . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

32
Tree	Iterator iter = findMatching ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = findMatching ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

33
Tree	Iterator iter = Cartesian2D.NaN . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator iter = Cartesian2D.NaN . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 6

34
Tree	Iterator iter = columnLabels . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = columnLabels . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

35
Tree	Iterator iter = binaryComparator . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = binaryComparator . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

36
Tree	Iterator iter = parseExponentiationExpression ( null , STRING_CONSTANT ) ;
Code	Iterator iter = parseExponentiationExpression ( null , STRING_CONSTANT ) ;
Distance : 6

37
Tree	Iterator iter = getProvider ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getProvider ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

38
Tree	Iterator iter = firstOf ( STRING_CONSTANT ) ;
Code	Iterator iter = firstOf ( STRING_CONSTANT ) ;
Distance : 4

39
Tree	Iterator iter = firstOf ( instance.declarations ) ;
Code	Iterator iter = firstOf ( instance.declarations ) ;
Distance : 4

40
Tree	Iterator iter = ERA_FIELD . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = ERA_FIELD . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

41
Tree	Iterator iter = firstOf ( NUMBER_CONSTANT ) ;
Code	Iterator iter = firstOf ( NUMBER_CONSTANT ) ;
Distance : 4

42
Tree	Iterator iter = Cartesian2D.NEGATIVE_INFINITY . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = Cartesian2D.NEGATIVE_INFINITY . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

43
Tree	Iterator iter = parseExponentiationExpression ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = parseExponentiationExpression ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

44
Tree	Iterator iter = invocationForStubbing . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = invocationForStubbing . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

45
Tree	Iterator iter = instance.declarations . iterator () ;
Code	Iterator iter = instance.declarations . iterator () ;
Distance : 1

46
Tree	Iterator iter = findDomainAxisIndex ( null , STRING_CONSTANT ) ;
Code	Iterator iter = findDomainAxisIndex ( null , STRING_CONSTANT ) ;
Distance : 6

47
Tree	Iterator iter = Cartesian1D.NEGATIVE_INFINITY . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = Cartesian1D.NEGATIVE_INFINITY . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

48
Tree	Iterator iter = binaryComparator . iterator ( coalescedName . class ) ;
Code	Iterator iter = binaryComparator . iterator ( coalescedName . class ) ;
Distance : 6

49
Tree	Iterator iter = getProvider ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getProvider ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

50
Tree	Iterator iter = getProvider ( NUMBER_CONSTANT ) ;
Code	Iterator iter = getProvider ( NUMBER_CONSTANT ) ;
Distance : 4

51
Tree	Iterator iter = source.contractionCriterion . iterator () ;
Code	Iterator iter = source.contractionCriterion . iterator () ;
Distance : 1

52
Tree	Iterator iter = ReadablePeriodConverter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = ReadablePeriodConverter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

53
Tree	Iterator iter = findDomainAxisIndex () ;
Code	Iterator iter = findDomainAxisIndex () ;
Distance : 3

54
Tree	Iterator iter = parseExponentiationExpression ( obj1.props ) ;
Code	Iterator iter = parseExponentiationExpression ( obj1.props ) ;
Distance : 4

55
Tree	Iterator iter = getPropFromClass ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getPropFromClass ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

56
Tree	Iterator iter = getPropFromClass ( this . iterator ) ;
Code	Iterator iter = getPropFromClass ( this . iterator ) ;
Distance : 4

57
Tree	Iterator iter = columnLabels . iterator ( NUMBER_CONSTANT , java.lang.Class ) ;
Code	Iterator iter = columnLabels . iterator ( NUMBER_CONSTANT , java.lang.Class ) ;
Distance : 6

58
Tree	Iterator iter = getMillisPerUnit () ;
Code	Iterator iter = getMillisPerUnit () ;
Distance : 3

59
Tree	Iterator iter = invocationForStubbing . iterator ( null ) ;
Code	Iterator iter = invocationForStubbing . iterator ( null ) ;
Distance : 4

60
Tree	Iterator iter = findDomainAxisIndex ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = findDomainAxisIndex ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

61
Tree	Iterator iter = Cartesian1D.NEGATIVE_INFINITY . iterator () ;
Code	Iterator iter = Cartesian1D.NEGATIVE_INFINITY . iterator () ;
Distance : 1

62
Tree	Iterator iter = firstOf ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = firstOf ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

63
Tree	Iterator iter = firstOf ( obj1.props ) ;
Code	Iterator iter = firstOf ( obj1.props ) ;
Distance : 4

64
Tree	Iterator iter = invocationForStubbing . iterator ( NUMBER_CONSTANT , java.lang.Class ) ;
Code	Iterator iter = invocationForStubbing . iterator ( NUMBER_CONSTANT , java.lang.Class ) ;
Distance : 6

65
Tree	Iterator iter = invocationForStubbing . iterator () ;
Code	Iterator iter = invocationForStubbing . iterator () ;
Distance : 1

66
Tree	Iterator iter = ols . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = ols . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

67
Tree	Iterator iter = findMatching ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = findMatching ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

68
Tree	Iterator iter = getProperNumerator ( STRING_CONSTANT ) ;
Code	Iterator iter = getProperNumerator ( STRING_CONSTANT ) ;
Distance : 4

69
Tree	Iterator iter = findMatching ( this . iterator ) ;
Code	Iterator iter = findMatching ( this . iterator ) ;
Distance : 4

70
Tree	Iterator iter = firstOf ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = firstOf ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

71
Tree	Iterator iter = PropAccess.STRUCT . iterator () ;
Code	Iterator iter = PropAccess.STRUCT . iterator () ;
Distance : 1

72
Tree	Iterator iter = binaryComparator . iterator ( null ) ;
Code	Iterator iter = binaryComparator . iterator ( null ) ;
Distance : 4

73
Tree	Iterator iter = PivotSelectionRule.DANTZIG . iterator () ;
Code	Iterator iter = PivotSelectionRule.DANTZIG . iterator () ;
Distance : 1

74
Tree	Iterator iter = parseExponentiationExpression ( functionContext.function ) ;
Code	Iterator iter = parseExponentiationExpression ( functionContext.function ) ;
Distance : 4

75
Tree	Iterator iter = parseExponentiationExpression ( invocationForStubbing . class ) ;
Code	Iterator iter = parseExponentiationExpression ( invocationForStubbing . class ) ;
Distance : 5

76
Tree	Iterator iter = binaryComparator . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = binaryComparator . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

77
Tree	Iterator iter = ReadablePeriodConverter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = ReadablePeriodConverter . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

78
Tree	Iterator iter = TypeUtilsTest . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = TypeUtilsTest . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

79
Tree	NoInteractionsWanted iter = this . iterator . iterator () ;
Code	NoInteractionsWanted iter = this . iterator . iterator () ;
Distance : 4

80
Tree	Iterator iter = firstOf ( functionContext.function ) ;
Code	Iterator iter = firstOf ( functionContext.function ) ;
Distance : 4

81
Tree	Iterator iter = getProperNumerator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getProperNumerator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

82
Tree	Iterator iter = instance.declarations . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = instance.declarations . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

83
Tree	Iterator iter = firstOf ( obj1.props ) . iterator () ;
Code	Iterator iter = firstOf ( obj1.props ) . iterator () ;
Distance : 4

84
Tree	Iterator iter = rhsNode . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = rhsNode . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

85
Tree	Iterator iter = columnLabels . iterator ( null ) ;
Code	Iterator iter = columnLabels . iterator ( null ) ;
Distance : 4

86
Tree	Iterator iter = ERA_FIELD . iterator ( null ) ;
Code	Iterator iter = ERA_FIELD . iterator ( null ) ;
Distance : 4

87
Tree	Iterator iter = findDomainAxisIndex ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = findDomainAxisIndex ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

88
Tree	Iterator iter = invocationForStubbing . iterator ( coalescedName . class ) ;
Code	Iterator iter = invocationForStubbing . iterator ( coalescedName . class ) ;
Distance : 6

89
Tree	Iterator iter = getPropFromClass ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getPropFromClass ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

90
Tree	Iterator iter = parseExponentiationExpression ( STRING_CONSTANT ) ;
Code	Iterator iter = parseExponentiationExpression ( STRING_CONSTANT ) ;
Distance : 4

91
Tree	Iterator iter = parseExponentiationExpression ( functionContext.function ) . iterator () ;
Code	Iterator iter = parseExponentiationExpression ( functionContext.function ) . iterator () ;
Distance : 4

92
Tree	Iterator iter = parseExponentiationExpression ( instance.declarations ) . iterator () ;
Code	Iterator iter = parseExponentiationExpression ( instance.declarations ) . iterator () ;
Distance : 4

93
Tree	Iterator iter = findMatching ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = findMatching ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

94
Tree	Iterator iter = rhsNode . iterator ( NUMBER_CONSTANT , java.lang.Class ) ;
Code	Iterator iter = rhsNode . iterator ( NUMBER_CONSTANT , java.lang.Class ) ;
Distance : 6

95
Tree	Iterator iter = firstOf ( invocationForStubbing . class ) ;
Code	Iterator iter = firstOf ( invocationForStubbing . class ) ;
Distance : 5

96
Tree	Iterator iter = findDomainAxisIndex ( NUMBER_CONSTANT ) ;
Code	Iterator iter = findDomainAxisIndex ( NUMBER_CONSTANT ) ;
Distance : 4

97
Tree	Iterator iter = findMatching ( instance.declarations ) . iterator () ;
Code	Iterator iter = findMatching ( instance.declarations ) . iterator () ;
Distance : 4

98
Tree	Iterator iter = rhsNode . iterator ( coalescedName . class ) ;
Code	Iterator iter = rhsNode . iterator ( coalescedName . class ) ;
Distance : 6

99
Tree	Iterator iter = new GeneralPath ( STRING_CONSTANT ) . iterator () ;
Code	Iterator iter = new GeneralPath ( STRING_CONSTANT ) . iterator () ;
Distance : 5

100
Tree	Iterator iter = getProperNumerator ( this . iterator ) ;
Code	Iterator iter = getProperNumerator ( this . iterator ) ;
Distance : 4

101
Tree	Iterator iter = ReadablePeriodConverter . iterator () ;
Code	Iterator iter = ReadablePeriodConverter . iterator () ;
Distance : 1

102
Tree	Iterator iter = rhsNode . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = rhsNode . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

103
Tree	Iterator iter = new Outer ( STRING_CONSTANT ) . iterator () ;
Code	Iterator iter = new Outer ( STRING_CONSTANT ) . iterator () ;
Distance : 5

104
Tree	Iterator iter = source.contractionCriterion . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator iter = source.contractionCriterion . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 6

105
Tree	Iterator iter = ERA_FIELD . iterator () ;
Code	Iterator iter = ERA_FIELD . iterator () ;
Distance : 1

106
Tree	Iterator iter = firstOf ( null , STRING_CONSTANT ) ;
Code	Iterator iter = firstOf ( null , STRING_CONSTANT ) ;
Distance : 6

107
Tree	Iterator iter = parseExponentiationExpression ( instance.declarations , java.lang.Class ) ;
Code	Iterator iter = parseExponentiationExpression ( instance.declarations , java.lang.Class ) ;
Distance : 6

108
Tree	Iterator iter = getProvider ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getProvider ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

109
Tree	Iterator iter = firstOf ( this . iterator ) ;
Code	Iterator iter = firstOf ( this . iterator ) ;
Distance : 4

110
Tree	Iterator iter = parseExponentiationExpression ( rhsNode . class ) ;
Code	Iterator iter = parseExponentiationExpression ( rhsNode . class ) ;
Distance : 5

111
Tree	Iterator iter = getPropFromClass () ;
Code	Iterator iter = getPropFromClass () ;
Distance : 3

112
Tree	Iterator iter = ols . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = ols . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

113
Tree	Iterator iter = columnLabels . iterator ( coalescedName , null ) ;
Code	Iterator iter = columnLabels . iterator ( coalescedName , null ) ;
Distance : 6

114
Tree	Iterator iter = PivotSelectionRule.DANTZIG . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = PivotSelectionRule.DANTZIG . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

115
Tree	Iterator toRemove = this . iterator . iterator () ;
Code	Iterator toRemove = this . iterator . iterator () ;
Distance : 4

116
Tree	Iterator series1 = this . iterator . iterator () ;
Code	Iterator series1 = this . iterator . iterator () ;
Distance : 4

117
Tree	Iterator iter = invocationForStubbing . iterator ( rightmostName . class ) ;
Code	Iterator iter = invocationForStubbing . iterator ( rightmostName . class ) ;
Distance : 6

118
Tree	Iterator iter = findMatching ( invocationForStubbing . class ) ;
Code	Iterator iter = findMatching ( invocationForStubbing . class ) ;
Distance : 5

119
Tree	Iterator iter = getProperNumerator () ;
Code	Iterator iter = getProperNumerator () ;
Distance : 3

120
Tree	Iterator iter = firstOf ( instance.declarations , java.lang.Class ) ;
Code	Iterator iter = firstOf ( instance.declarations , java.lang.Class ) ;
Distance : 6

121
Tree	Iterator iter = parseExponentiationExpression ( coalescedName . class ) ;
Code	Iterator iter = parseExponentiationExpression ( coalescedName . class ) ;
Distance : 5

122
Tree	Iterator iter = binaryComparator . iterator () ;
Code	Iterator iter = binaryComparator . iterator () ;
Distance : 1

123
Tree	Iterator iter = getProperNumerator ( null , STRING_CONSTANT ) ;
Code	Iterator iter = getProperNumerator ( null , STRING_CONSTANT ) ;
Distance : 6

124
Tree	Iterator iter = findMatching ( instance.declarations ) ;
Code	Iterator iter = findMatching ( instance.declarations ) ;
Distance : 4

125
Tree	Iterator iter = getProvider ( this . iterator ) ;
Code	Iterator iter = getProvider ( this . iterator ) ;
Distance : 4

126
Tree	Iterator iter = coefficients.length . iterator () ;
Code	Iterator iter = coefficients.length . iterator () ;
Distance : 1

127
Tree	Iterator iter = getProvider ( instance.declarations ) ;
Code	Iterator iter = getProvider ( instance.declarations ) ;
Distance : 4

128
Tree	Iterator iter = ERA_FIELD . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = ERA_FIELD . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

129
Tree	Iterator iter = rhsNode . iterator ( null ) ;
Code	Iterator iter = rhsNode . iterator ( null ) ;
Distance : 4

130
Tree	Iterator iter = columnLabels . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = columnLabels . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

131
Tree	Iterator iter = findDomainAxisIndex ( this . iterator ) ;
Code	Iterator iter = findDomainAxisIndex ( this . iterator ) ;
Distance : 4

132
Tree	Iterator iter = Cartesian2D.NEGATIVE_INFINITY . iterator () ;
Code	Iterator iter = Cartesian2D.NEGATIVE_INFINITY . iterator () ;
Distance : 1

133
Tree	Iterator iter = getProperNumerator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getProperNumerator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

134
Tree	Iterator iter = getMillisPerUnit ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getMillisPerUnit ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

135
Tree	Iterator iter = TypeUtilsTest . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = TypeUtilsTest . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

136
Tree	Iterator iter = firstOf ( functionContext.function ) . iterator () ;
Code	Iterator iter = firstOf ( functionContext.function ) . iterator () ;
Distance : 4

137
Tree	Iterator iter = ols . iterator ( null ) ;
Code	Iterator iter = ols . iterator ( null ) ;
Distance : 4

138
Tree	Iterator iter = getPropFromClass ( null , STRING_CONSTANT ) ;
Code	Iterator iter = getPropFromClass ( null , STRING_CONSTANT ) ;
Distance : 6

139
Tree	Iterator iter = columnLabels . iterator () ;
Code	Iterator iter = columnLabels . iterator () ;
Distance : 1

140
Tree	Iterator iter = TypeUtilsTest . iterator ( null ) ;
Code	Iterator iter = TypeUtilsTest . iterator ( null ) ;
Distance : 4

141
Tree	Iterator iter = findMatching ( STRING_CONSTANT ) ;
Code	Iterator iter = findMatching ( STRING_CONSTANT ) ;
Distance : 4

142
Tree	Iterator iter = firstOf ( coalescedName . class ) ;
Code	Iterator iter = firstOf ( coalescedName . class ) ;
Distance : 5

143
Tree	Iterator iter = ReadablePeriodConverter . iterator ( coalescedName , null ) ;
Code	Iterator iter = ReadablePeriodConverter . iterator ( coalescedName , null ) ;
Distance : 6

144
Tree	Iterator iter = coefficients.length . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator iter = coefficients.length . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 6

145
Tree	Iterator iter = ReadablePeriodConverter . iterator ( NUMBER_CONSTANT , java.lang.Class ) ;
Code	Iterator iter = ReadablePeriodConverter . iterator ( NUMBER_CONSTANT , java.lang.Class ) ;
Distance : 6

146
Tree	Iterator iter = rhsNode . iterator ( obj1.props , NUMBER_CONSTANT ) ;
Code	Iterator iter = rhsNode . iterator ( obj1.props , NUMBER_CONSTANT ) ;
Distance : 6

147
Tree	Iterator iter = getProperNumerator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = getProperNumerator ( NUMBER_CONSTANT ) ;
Distance : 4

148
Tree	Iterator iter = getProvider ( STRING_CONSTANT ) ;
Code	Iterator iter = getProvider ( STRING_CONSTANT ) ;
Distance : 4

149
Tree	Iterator iter = parseExponentiationExpression ( obj1.props ) . iterator () ;
Code	Iterator iter = parseExponentiationExpression ( obj1.props ) . iterator () ;
Distance : 4

150
Tree	Iterator iter = getMillisPerUnit ( STRING_CONSTANT ) ;
Code	Iterator iter = getMillisPerUnit ( STRING_CONSTANT ) ;
Distance : 4

151
Tree	Iterator iter = binaryComparator . iterator ( coalescedName , null ) ;
Code	Iterator iter = binaryComparator . iterator ( coalescedName , null ) ;
Distance : 6

152
Tree	Iterator iter = new Expm1 ( STRING_CONSTANT ) . iterator () ;
Code	Iterator iter = new Expm1 ( STRING_CONSTANT ) . iterator () ;
Distance : 5

153
Tree	Iterator iter = getPropFromClass ( NUMBER_CONSTANT ) ;
Code	Iterator iter = getPropFromClass ( NUMBER_CONSTANT ) ;
Distance : 4

154
Tree	Iterator iter = getMillisPerUnit ( null , STRING_CONSTANT ) ;
Code	Iterator iter = getMillisPerUnit ( null , STRING_CONSTANT ) ;
Distance : 6

155
Tree	Iterator iter = ols . iterator () ;
Code	Iterator iter = ols . iterator () ;
Distance : 1

156
Tree	Iterator iter = instance.declarations . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator iter = instance.declarations . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 6

157
Tree	Iterator iter = new UnicodeUnescaper ( STRING_CONSTANT ) . iterator () ;
Code	Iterator iter = new UnicodeUnescaper ( STRING_CONSTANT ) . iterator () ;
Distance : 5

158
Tree	Iterator iter = invocationForStubbing . iterator ( instance.declarations , NUMBER_CONSTANT ) ;
Code	Iterator iter = invocationForStubbing . iterator ( instance.declarations , NUMBER_CONSTANT ) ;
Distance : 6

159
Tree	Iterator iter = getMillisPerUnit ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getMillisPerUnit ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

160
Tree	Iterator iter = new NumericEntityUnescaper ( STRING_CONSTANT ) . iterator () ;
Code	Iterator iter = new NumericEntityUnescaper ( STRING_CONSTANT ) . iterator () ;
Distance : 5

161
Tree	Iterator iter = TypeUtilsTest . iterator () ;
Code	Iterator iter = TypeUtilsTest . iterator () ;
Distance : 1

162
Tree	Iterator iter = invocationForStubbing . iterator ( rightmostName , null ) ;
Code	Iterator iter = invocationForStubbing . iterator ( rightmostName , null ) ;
Distance : 6

163
Tree	Iterator iter = ERA_FIELD . iterator ( coalescedName . class ) ;
Code	Iterator iter = ERA_FIELD . iterator ( coalescedName . class ) ;
Distance : 6

164
Tree	Iterator iter = PivotSelectionRule.DANTZIG . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator iter = PivotSelectionRule.DANTZIG . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 6

165
Tree	Iterator iter = getProvider ( null , STRING_CONSTANT ) ;
Code	Iterator iter = getProvider ( null , STRING_CONSTANT ) ;
Distance : 6

166
Tree	Iterator iter = getPropFromClass ( STRING_CONSTANT ) ;
Code	Iterator iter = getPropFromClass ( STRING_CONSTANT ) ;
Distance : 4

167
Tree	Iterator iter = Cartesian2D.NEGATIVE_INFINITY . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator iter = Cartesian2D.NEGATIVE_INFINITY . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 6

168
Tree	Iterator iter = findDomainAxisIndex ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = findDomainAxisIndex ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

169
Tree	Iterator iter = new XMinus5Function ( STRING_CONSTANT ) . iterator () ;
Code	Iterator iter = new XMinus5Function ( STRING_CONSTANT ) . iterator () ;
Distance : 5

170
Tree	Iterator iter = PropAccess.STRUCT . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator iter = PropAccess.STRUCT . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 6

171
Tree	Iterator iter = invocationForStubbing . iterator ( NUMBER_CONSTANT , source.contractionCriterion ) ;
Code	Iterator iter = invocationForStubbing . iterator ( NUMBER_CONSTANT , source.contractionCriterion ) ;
Distance : 6

172
Tree	Iterator iter = new Sigmoid ( STRING_CONSTANT ) . iterator () ;
Code	Iterator iter = new Sigmoid ( STRING_CONSTANT ) . iterator () ;
Distance : 5

173
Tree	Iterator iter = findMatching ( null , STRING_CONSTANT ) ;
Code	Iterator iter = findMatching ( null , STRING_CONSTANT ) ;
Distance : 6

174
Tree	Iterator iter = rhsNode . iterator ( rightmostName . class ) ;
Code	Iterator iter = rhsNode . iterator ( rightmostName . class ) ;
Distance : 6

175
Tree	Iterator iter = getProperNumerator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getProperNumerator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

176
Tree	Iterator iter = getMillisPerUnit ( this . iterator ) ;
Code	Iterator iter = getMillisPerUnit ( this . iterator ) ;
Distance : 4

177
Tree	Iterator iter = invocationForStubbing . iterator ( obj1.props , NUMBER_CONSTANT ) ;
Code	Iterator iter = invocationForStubbing . iterator ( obj1.props , NUMBER_CONSTANT ) ;
Distance : 6

178
Tree	Iterator iter = columnLabels . iterator ( coalescedName . class ) ;
Code	Iterator iter = columnLabels . iterator ( coalescedName . class ) ;
Distance : 6

179
Tree	Iterator iter = getProvider ( invocationForStubbing . class ) ;
Code	Iterator iter = getProvider ( invocationForStubbing . class ) ;
Distance : 5

180
Tree	Iterator iter = ReadablePeriodConverter . iterator ( coalescedName . class ) ;
Code	Iterator iter = ReadablePeriodConverter . iterator ( coalescedName . class ) ;
Distance : 6

181
Tree	Iterator iter = Cartesian1D.NEGATIVE_INFINITY . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator iter = Cartesian1D.NEGATIVE_INFINITY . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 6

182
Tree	Iterator iter = binaryComparator . iterator ( obj1.props , NUMBER_CONSTANT ) ;
Code	Iterator iter = binaryComparator . iterator ( obj1.props , NUMBER_CONSTANT ) ;
Distance : 6

183
Tree	Iterator iter = getMillisPerUnit ( NUMBER_CONSTANT ) ;
Code	Iterator iter = getMillisPerUnit ( NUMBER_CONSTANT ) ;
Distance : 4

184
Tree	Iterator iter = invocationForStubbing . iterator ( functionContext.function , NUMBER_CONSTANT ) ;
Code	Iterator iter = invocationForStubbing . iterator ( functionContext.function , NUMBER_CONSTANT ) ;
Distance : 6

185
Tree	Iterator iter = parseExponentiationExpression ( functionContext.function , java.lang.Class ) ;
Code	Iterator iter = parseExponentiationExpression ( functionContext.function , java.lang.Class ) ;
Distance : 6

186
Tree	Iterator iter = columnLabels . iterator ( obj1.props , NUMBER_CONSTANT ) ;
Code	Iterator iter = columnLabels . iterator ( obj1.props , NUMBER_CONSTANT ) ;
Distance : 6

187
Tree	Iterator iter = firstOf ( functionContext.function , java.lang.Class ) ;
Code	Iterator iter = firstOf ( functionContext.function , java.lang.Class ) ;
Distance : 6

188
Tree	Range iter = this . iterator . iterator () ;
Code	Range iter = this . iterator . iterator () ;
Distance : 4

189
Tree	Iterator iter = findMatching ( instance.declarations , java.lang.Class ) ;
Code	Iterator iter = findMatching ( instance.declarations , java.lang.Class ) ;
Distance : 6

190
Tree	Iterator iter = rhsNode . iterator ( instance.declarations , NUMBER_CONSTANT ) ;
Code	Iterator iter = rhsNode . iterator ( instance.declarations , NUMBER_CONSTANT ) ;
Distance : 6

191
Tree	Iterator iter = ERA_FIELD . iterator ( coalescedName , null ) ;
Code	Iterator iter = ERA_FIELD . iterator ( coalescedName , null ) ;
Distance : 6

192
Tree	Iterator iter = rhsNode . iterator ( rightmostName , null ) ;
Code	Iterator iter = rhsNode . iterator ( rightmostName , null ) ;
Distance : 6

193
Tree	Iterator den = this . iterator . iterator () ;
Code	Iterator den = this . iterator . iterator () ;
Distance : 4

194
Tree	Iterator iter = getProvider ( instance.declarations , java.lang.Class ) ;
Code	Iterator iter = getProvider ( instance.declarations , java.lang.Class ) ;
Distance : 6

195
Tree	Iterator compare = this . iterator . iterator () ;
Code	Iterator compare = this . iterator . iterator () ;
Distance : 4

196
Tree	Iterator iter = new BitSet ( STRING_CONSTANT ) . iterator () ;
Code	Iterator iter = new BitSet ( STRING_CONSTANT ) . iterator () ;
Distance : 5

197
Tree	Iterator iter = parseExponentiationExpression ( obj1.props , java.lang.Class ) ;
Code	Iterator iter = parseExponentiationExpression ( obj1.props , java.lang.Class ) ;
Distance : 6

198
Tree	Iterator iter = invocationForStubbing . iterator ( UnicodeUnescaper.PARAM.escapePlus , NUMBER_CONSTANT ) ;
Code	Iterator iter = invocationForStubbing . iterator ( UnicodeUnescaper.PARAM.escapePlus , NUMBER_CONSTANT ) ;
Distance : 6

199
Tree	Iterator iter = firstOf ( obj1.props , java.lang.Class ) ;
Code	Iterator iter = firstOf ( obj1.props , java.lang.Class ) ;
Distance : 6

========================================================================


========================================================================
Example Number: 65
Parent Code is: 
Iterator iter = res.entries . iterator () ;
-------------------------------------------------------------------------------
Child code is: 
Iterator iter = entries . iterator () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (40{val=res.entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (800{val=entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/49/parent/src_main_java_org_apache_commons_math_linear_OpenMapRealVector.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	Iterator iter = Cartesian2D.NaN . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = Cartesian2D.NaN . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

1
Tree	Iterator iter = getProvider ( instance.declarations ) . iterator () ;
Code	Iterator iter = getProvider ( instance.declarations ) . iterator () ;
Distance : 4

2
Tree	Iterator iter = invocationForStubbing . iterator ( coalescedName , null ) ;
Code	Iterator iter = invocationForStubbing . iterator ( coalescedName , null ) ;
Distance : 6

3
Tree	Iterator iter = findDomainAxisIndex ( STRING_CONSTANT ) ;
Code	Iterator iter = findDomainAxisIndex ( STRING_CONSTANT ) ;
Distance : 4

4
Tree	Iterator iter = findMatching () ;
Code	Iterator iter = findMatching () ;
Distance : 3

5
Tree	Iterator iter = firstOf ( instance.declarations ) . iterator () ;
Code	Iterator iter = firstOf ( instance.declarations ) . iterator () ;
Distance : 4

6
Tree	Iterator val = this . iterator . iterator () ;
Code	Iterator val = this . iterator . iterator () ;
Distance : 4

7
Tree	Iterator iter = getPropFromClass ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getPropFromClass ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

8
Tree	Iterator iter = findMatching ( NUMBER_CONSTANT ) ;
Code	Iterator iter = findMatching ( NUMBER_CONSTANT ) ;
Distance : 4

9
Tree	Iterator iter = ReadablePeriodConverter . iterator ( null ) ;
Code	Iterator iter = ReadablePeriodConverter . iterator ( null ) ;
Distance : 4

10
Tree	Iterator iter = invocationForStubbing . iterator ( NUMBER_CONSTANT , instance.declarations ) ;
Code	Iterator iter = invocationForStubbing . iterator ( NUMBER_CONSTANT , instance.declarations ) ;
Distance : 6

11
Tree	Iterator iter = rhsNode . iterator ( coalescedName , null ) ;
Code	Iterator iter = rhsNode . iterator ( coalescedName , null ) ;
Distance : 6

12
Tree	Iterator iter = rhsNode . iterator ( NUMBER_CONSTANT , instance.declarations ) ;
Code	Iterator iter = rhsNode . iterator ( NUMBER_CONSTANT , instance.declarations ) ;
Distance : 6

13
Tree	Iterator iter = this . iterator . iterator () ;
Code	Iterator iter = this . iterator . iterator () ;
Distance : 3

14
Tree	Iterator iter = Cartesian2D.NaN . iterator () ;
Code	Iterator iter = Cartesian2D.NaN . iterator () ;
Distance : 1

15
Tree	Iterator iter = parseExponentiationExpression () ;
Code	Iterator iter = parseExponentiationExpression () ;
Distance : 3

16
Tree	Iterator iter = parseExponentiationExpression ( NUMBER_CONSTANT ) ;
Code	Iterator iter = parseExponentiationExpression ( NUMBER_CONSTANT ) ;
Distance : 4

17
Tree	Iterator iter = rhsNode . iterator () ;
Code	Iterator iter = rhsNode . iterator () ;
Distance : 1

18
Tree	Iterator iter = source.contractionCriterion . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = source.contractionCriterion . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

19
Tree	Iterator iter = PropAccess.STRUCT . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = PropAccess.STRUCT . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

20
Tree	Iterator iter = parseExponentiationExpression ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = parseExponentiationExpression ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

21
Tree	Iterator iter = parseExponentiationExpression ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = parseExponentiationExpression ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

22
Tree	Iterator iter = parseExponentiationExpression ( instance.declarations ) ;
Code	Iterator iter = parseExponentiationExpression ( instance.declarations ) ;
Distance : 4

23
Tree	Iterator iter = getMillisPerUnit ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getMillisPerUnit ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

24
Tree	Iterator iter = firstOf () ;
Code	Iterator iter = firstOf () ;
Distance : 3

25
Tree	Iterator iter = firstOf ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = firstOf ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

26
Tree	Iterator iter = getProvider () ;
Code	Iterator iter = getProvider () ;
Distance : 3

27
Tree	Iterator iter = parseExponentiationExpression ( this . iterator ) ;
Code	Iterator iter = parseExponentiationExpression ( this . iterator ) ;
Distance : 4

28
Tree	Iterator iter = firstOf ( rhsNode . class ) ;
Code	Iterator iter = firstOf ( rhsNode . class ) ;
Distance : 5

29
Tree	Iterator iter = invocationForStubbing . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = invocationForStubbing . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

30
Tree	Iterator iter = binaryComparator . iterator ( NUMBER_CONSTANT , java.lang.Class ) ;
Code	Iterator iter = binaryComparator . iterator ( NUMBER_CONSTANT , java.lang.Class ) ;
Distance : 6

31
Tree	Iterator iter = coefficients.length . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = coefficients.length . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

32
Tree	Iterator iter = findMatching ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = findMatching ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

33
Tree	Iterator iter = Cartesian2D.NaN . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator iter = Cartesian2D.NaN . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 6

34
Tree	Iterator iter = columnLabels . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = columnLabels . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

35
Tree	Iterator iter = binaryComparator . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = binaryComparator . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

36
Tree	Iterator iter = parseExponentiationExpression ( null , STRING_CONSTANT ) ;
Code	Iterator iter = parseExponentiationExpression ( null , STRING_CONSTANT ) ;
Distance : 6

37
Tree	Iterator iter = getProvider ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getProvider ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

38
Tree	Iterator iter = firstOf ( STRING_CONSTANT ) ;
Code	Iterator iter = firstOf ( STRING_CONSTANT ) ;
Distance : 4

39
Tree	Iterator iter = firstOf ( instance.declarations ) ;
Code	Iterator iter = firstOf ( instance.declarations ) ;
Distance : 4

40
Tree	Iterator iter = ERA_FIELD . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = ERA_FIELD . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

41
Tree	Iterator iter = firstOf ( NUMBER_CONSTANT ) ;
Code	Iterator iter = firstOf ( NUMBER_CONSTANT ) ;
Distance : 4

42
Tree	Iterator iter = Cartesian2D.NEGATIVE_INFINITY . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = Cartesian2D.NEGATIVE_INFINITY . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

43
Tree	Iterator iter = parseExponentiationExpression ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = parseExponentiationExpression ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

44
Tree	Iterator iter = invocationForStubbing . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = invocationForStubbing . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

45
Tree	Iterator iter = instance.declarations . iterator () ;
Code	Iterator iter = instance.declarations . iterator () ;
Distance : 1

46
Tree	Iterator iter = findDomainAxisIndex ( null , STRING_CONSTANT ) ;
Code	Iterator iter = findDomainAxisIndex ( null , STRING_CONSTANT ) ;
Distance : 6

47
Tree	Iterator iter = Cartesian1D.NEGATIVE_INFINITY . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = Cartesian1D.NEGATIVE_INFINITY . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

48
Tree	Iterator iter = binaryComparator . iterator ( coalescedName . class ) ;
Code	Iterator iter = binaryComparator . iterator ( coalescedName . class ) ;
Distance : 6

49
Tree	Iterator iter = getProvider ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getProvider ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

50
Tree	Iterator iter = getProvider ( NUMBER_CONSTANT ) ;
Code	Iterator iter = getProvider ( NUMBER_CONSTANT ) ;
Distance : 4

51
Tree	Iterator iter = source.contractionCriterion . iterator () ;
Code	Iterator iter = source.contractionCriterion . iterator () ;
Distance : 1

52
Tree	Iterator iter = ReadablePeriodConverter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = ReadablePeriodConverter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

53
Tree	Iterator iter = findDomainAxisIndex () ;
Code	Iterator iter = findDomainAxisIndex () ;
Distance : 3

54
Tree	Iterator iter = parseExponentiationExpression ( obj1.props ) ;
Code	Iterator iter = parseExponentiationExpression ( obj1.props ) ;
Distance : 4

55
Tree	Iterator iter = getPropFromClass ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getPropFromClass ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

56
Tree	Iterator iter = getPropFromClass ( this . iterator ) ;
Code	Iterator iter = getPropFromClass ( this . iterator ) ;
Distance : 4

57
Tree	Iterator iter = columnLabels . iterator ( NUMBER_CONSTANT , java.lang.Class ) ;
Code	Iterator iter = columnLabels . iterator ( NUMBER_CONSTANT , java.lang.Class ) ;
Distance : 6

58
Tree	Iterator iter = getMillisPerUnit () ;
Code	Iterator iter = getMillisPerUnit () ;
Distance : 3

59
Tree	Iterator iter = invocationForStubbing . iterator ( null ) ;
Code	Iterator iter = invocationForStubbing . iterator ( null ) ;
Distance : 4

60
Tree	Iterator iter = findDomainAxisIndex ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = findDomainAxisIndex ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

61
Tree	Iterator iter = Cartesian1D.NEGATIVE_INFINITY . iterator () ;
Code	Iterator iter = Cartesian1D.NEGATIVE_INFINITY . iterator () ;
Distance : 1

62
Tree	Iterator iter = firstOf ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = firstOf ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

63
Tree	Iterator iter = firstOf ( obj1.props ) ;
Code	Iterator iter = firstOf ( obj1.props ) ;
Distance : 4

64
Tree	Iterator iter = invocationForStubbing . iterator ( NUMBER_CONSTANT , java.lang.Class ) ;
Code	Iterator iter = invocationForStubbing . iterator ( NUMBER_CONSTANT , java.lang.Class ) ;
Distance : 6

65
Tree	Iterator iter = invocationForStubbing . iterator () ;
Code	Iterator iter = invocationForStubbing . iterator () ;
Distance : 1

66
Tree	Iterator iter = ols . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = ols . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

67
Tree	Iterator iter = findMatching ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = findMatching ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

68
Tree	Iterator iter = getProperNumerator ( STRING_CONSTANT ) ;
Code	Iterator iter = getProperNumerator ( STRING_CONSTANT ) ;
Distance : 4

69
Tree	Iterator iter = findMatching ( this . iterator ) ;
Code	Iterator iter = findMatching ( this . iterator ) ;
Distance : 4

70
Tree	Iterator iter = firstOf ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = firstOf ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

71
Tree	Iterator iter = PropAccess.STRUCT . iterator () ;
Code	Iterator iter = PropAccess.STRUCT . iterator () ;
Distance : 1

72
Tree	Iterator iter = binaryComparator . iterator ( null ) ;
Code	Iterator iter = binaryComparator . iterator ( null ) ;
Distance : 4

73
Tree	Iterator iter = PivotSelectionRule.DANTZIG . iterator () ;
Code	Iterator iter = PivotSelectionRule.DANTZIG . iterator () ;
Distance : 1

74
Tree	Iterator iter = parseExponentiationExpression ( functionContext.function ) ;
Code	Iterator iter = parseExponentiationExpression ( functionContext.function ) ;
Distance : 4

75
Tree	Iterator iter = parseExponentiationExpression ( invocationForStubbing . class ) ;
Code	Iterator iter = parseExponentiationExpression ( invocationForStubbing . class ) ;
Distance : 5

76
Tree	Iterator iter = binaryComparator . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = binaryComparator . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

77
Tree	Iterator iter = ReadablePeriodConverter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = ReadablePeriodConverter . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

78
Tree	Iterator iter = TypeUtilsTest . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = TypeUtilsTest . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

79
Tree	NoInteractionsWanted iter = this . iterator . iterator () ;
Code	NoInteractionsWanted iter = this . iterator . iterator () ;
Distance : 4

80
Tree	Iterator iter = firstOf ( functionContext.function ) ;
Code	Iterator iter = firstOf ( functionContext.function ) ;
Distance : 4

81
Tree	Iterator iter = getProperNumerator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getProperNumerator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

82
Tree	Iterator iter = instance.declarations . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = instance.declarations . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

83
Tree	Iterator iter = firstOf ( obj1.props ) . iterator () ;
Code	Iterator iter = firstOf ( obj1.props ) . iterator () ;
Distance : 4

84
Tree	Iterator iter = rhsNode . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = rhsNode . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

85
Tree	Iterator iter = columnLabels . iterator ( null ) ;
Code	Iterator iter = columnLabels . iterator ( null ) ;
Distance : 4

86
Tree	Iterator iter = ERA_FIELD . iterator ( null ) ;
Code	Iterator iter = ERA_FIELD . iterator ( null ) ;
Distance : 4

87
Tree	Iterator iter = findDomainAxisIndex ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = findDomainAxisIndex ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

88
Tree	Iterator iter = invocationForStubbing . iterator ( coalescedName . class ) ;
Code	Iterator iter = invocationForStubbing . iterator ( coalescedName . class ) ;
Distance : 6

89
Tree	Iterator iter = getPropFromClass ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getPropFromClass ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

90
Tree	Iterator iter = parseExponentiationExpression ( STRING_CONSTANT ) ;
Code	Iterator iter = parseExponentiationExpression ( STRING_CONSTANT ) ;
Distance : 4

91
Tree	Iterator iter = parseExponentiationExpression ( functionContext.function ) . iterator () ;
Code	Iterator iter = parseExponentiationExpression ( functionContext.function ) . iterator () ;
Distance : 4

92
Tree	Iterator iter = parseExponentiationExpression ( instance.declarations ) . iterator () ;
Code	Iterator iter = parseExponentiationExpression ( instance.declarations ) . iterator () ;
Distance : 4

93
Tree	Iterator iter = findMatching ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = findMatching ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

94
Tree	Iterator iter = rhsNode . iterator ( NUMBER_CONSTANT , java.lang.Class ) ;
Code	Iterator iter = rhsNode . iterator ( NUMBER_CONSTANT , java.lang.Class ) ;
Distance : 6

95
Tree	Iterator iter = firstOf ( invocationForStubbing . class ) ;
Code	Iterator iter = firstOf ( invocationForStubbing . class ) ;
Distance : 5

96
Tree	Iterator iter = findDomainAxisIndex ( NUMBER_CONSTANT ) ;
Code	Iterator iter = findDomainAxisIndex ( NUMBER_CONSTANT ) ;
Distance : 4

97
Tree	Iterator iter = findMatching ( instance.declarations ) . iterator () ;
Code	Iterator iter = findMatching ( instance.declarations ) . iterator () ;
Distance : 4

98
Tree	Iterator iter = rhsNode . iterator ( coalescedName . class ) ;
Code	Iterator iter = rhsNode . iterator ( coalescedName . class ) ;
Distance : 6

99
Tree	Iterator iter = new GeneralPath ( STRING_CONSTANT ) . iterator () ;
Code	Iterator iter = new GeneralPath ( STRING_CONSTANT ) . iterator () ;
Distance : 5

100
Tree	Iterator iter = getProperNumerator ( this . iterator ) ;
Code	Iterator iter = getProperNumerator ( this . iterator ) ;
Distance : 4

101
Tree	Iterator iter = ReadablePeriodConverter . iterator () ;
Code	Iterator iter = ReadablePeriodConverter . iterator () ;
Distance : 1

102
Tree	Iterator iter = rhsNode . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = rhsNode . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

103
Tree	Iterator iter = new Outer ( STRING_CONSTANT ) . iterator () ;
Code	Iterator iter = new Outer ( STRING_CONSTANT ) . iterator () ;
Distance : 5

104
Tree	Iterator iter = source.contractionCriterion . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator iter = source.contractionCriterion . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 6

105
Tree	Iterator iter = ERA_FIELD . iterator () ;
Code	Iterator iter = ERA_FIELD . iterator () ;
Distance : 1

106
Tree	Iterator iter = firstOf ( null , STRING_CONSTANT ) ;
Code	Iterator iter = firstOf ( null , STRING_CONSTANT ) ;
Distance : 6

107
Tree	Iterator iter = parseExponentiationExpression ( instance.declarations , java.lang.Class ) ;
Code	Iterator iter = parseExponentiationExpression ( instance.declarations , java.lang.Class ) ;
Distance : 6

108
Tree	Iterator iter = getProvider ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getProvider ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

109
Tree	Iterator iter = firstOf ( this . iterator ) ;
Code	Iterator iter = firstOf ( this . iterator ) ;
Distance : 4

110
Tree	Iterator iter = parseExponentiationExpression ( rhsNode . class ) ;
Code	Iterator iter = parseExponentiationExpression ( rhsNode . class ) ;
Distance : 5

111
Tree	Iterator iter = getPropFromClass () ;
Code	Iterator iter = getPropFromClass () ;
Distance : 3

112
Tree	Iterator iter = ols . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = ols . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

113
Tree	Iterator iter = columnLabels . iterator ( coalescedName , null ) ;
Code	Iterator iter = columnLabels . iterator ( coalescedName , null ) ;
Distance : 6

114
Tree	Iterator iter = PivotSelectionRule.DANTZIG . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = PivotSelectionRule.DANTZIG . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

115
Tree	Iterator toRemove = this . iterator . iterator () ;
Code	Iterator toRemove = this . iterator . iterator () ;
Distance : 4

116
Tree	Iterator series1 = this . iterator . iterator () ;
Code	Iterator series1 = this . iterator . iterator () ;
Distance : 4

117
Tree	Iterator iter = invocationForStubbing . iterator ( rightmostName . class ) ;
Code	Iterator iter = invocationForStubbing . iterator ( rightmostName . class ) ;
Distance : 6

118
Tree	Iterator iter = findMatching ( invocationForStubbing . class ) ;
Code	Iterator iter = findMatching ( invocationForStubbing . class ) ;
Distance : 5

119
Tree	Iterator iter = getProperNumerator () ;
Code	Iterator iter = getProperNumerator () ;
Distance : 3

120
Tree	Iterator iter = firstOf ( instance.declarations , java.lang.Class ) ;
Code	Iterator iter = firstOf ( instance.declarations , java.lang.Class ) ;
Distance : 6

121
Tree	Iterator iter = parseExponentiationExpression ( coalescedName . class ) ;
Code	Iterator iter = parseExponentiationExpression ( coalescedName . class ) ;
Distance : 5

122
Tree	Iterator iter = binaryComparator . iterator () ;
Code	Iterator iter = binaryComparator . iterator () ;
Distance : 1

123
Tree	Iterator iter = getProperNumerator ( null , STRING_CONSTANT ) ;
Code	Iterator iter = getProperNumerator ( null , STRING_CONSTANT ) ;
Distance : 6

124
Tree	Iterator iter = findMatching ( instance.declarations ) ;
Code	Iterator iter = findMatching ( instance.declarations ) ;
Distance : 4

125
Tree	Iterator iter = getProvider ( this . iterator ) ;
Code	Iterator iter = getProvider ( this . iterator ) ;
Distance : 4

126
Tree	Iterator iter = coefficients.length . iterator () ;
Code	Iterator iter = coefficients.length . iterator () ;
Distance : 1

127
Tree	Iterator iter = getProvider ( instance.declarations ) ;
Code	Iterator iter = getProvider ( instance.declarations ) ;
Distance : 4

128
Tree	Iterator iter = ERA_FIELD . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = ERA_FIELD . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

129
Tree	Iterator iter = rhsNode . iterator ( null ) ;
Code	Iterator iter = rhsNode . iterator ( null ) ;
Distance : 4

130
Tree	Iterator iter = columnLabels . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = columnLabels . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

131
Tree	Iterator iter = findDomainAxisIndex ( this . iterator ) ;
Code	Iterator iter = findDomainAxisIndex ( this . iterator ) ;
Distance : 4

132
Tree	Iterator iter = Cartesian2D.NEGATIVE_INFINITY . iterator () ;
Code	Iterator iter = Cartesian2D.NEGATIVE_INFINITY . iterator () ;
Distance : 1

133
Tree	Iterator iter = getProperNumerator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getProperNumerator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

134
Tree	Iterator iter = getMillisPerUnit ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getMillisPerUnit ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

135
Tree	Iterator iter = TypeUtilsTest . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = TypeUtilsTest . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

136
Tree	Iterator iter = firstOf ( functionContext.function ) . iterator () ;
Code	Iterator iter = firstOf ( functionContext.function ) . iterator () ;
Distance : 4

137
Tree	Iterator iter = ols . iterator ( null ) ;
Code	Iterator iter = ols . iterator ( null ) ;
Distance : 4

138
Tree	Iterator iter = getPropFromClass ( null , STRING_CONSTANT ) ;
Code	Iterator iter = getPropFromClass ( null , STRING_CONSTANT ) ;
Distance : 6

139
Tree	Iterator iter = columnLabels . iterator () ;
Code	Iterator iter = columnLabels . iterator () ;
Distance : 1

140
Tree	Iterator iter = TypeUtilsTest . iterator ( null ) ;
Code	Iterator iter = TypeUtilsTest . iterator ( null ) ;
Distance : 4

141
Tree	Iterator iter = findMatching ( STRING_CONSTANT ) ;
Code	Iterator iter = findMatching ( STRING_CONSTANT ) ;
Distance : 4

142
Tree	Iterator iter = firstOf ( coalescedName . class ) ;
Code	Iterator iter = firstOf ( coalescedName . class ) ;
Distance : 5

143
Tree	Iterator iter = ReadablePeriodConverter . iterator ( coalescedName , null ) ;
Code	Iterator iter = ReadablePeriodConverter . iterator ( coalescedName , null ) ;
Distance : 6

144
Tree	Iterator iter = coefficients.length . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator iter = coefficients.length . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 6

145
Tree	Iterator iter = ReadablePeriodConverter . iterator ( NUMBER_CONSTANT , java.lang.Class ) ;
Code	Iterator iter = ReadablePeriodConverter . iterator ( NUMBER_CONSTANT , java.lang.Class ) ;
Distance : 6

146
Tree	Iterator iter = rhsNode . iterator ( obj1.props , NUMBER_CONSTANT ) ;
Code	Iterator iter = rhsNode . iterator ( obj1.props , NUMBER_CONSTANT ) ;
Distance : 6

147
Tree	Iterator iter = getProperNumerator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = getProperNumerator ( NUMBER_CONSTANT ) ;
Distance : 4

148
Tree	Iterator iter = getProvider ( STRING_CONSTANT ) ;
Code	Iterator iter = getProvider ( STRING_CONSTANT ) ;
Distance : 4

149
Tree	Iterator iter = parseExponentiationExpression ( obj1.props ) . iterator () ;
Code	Iterator iter = parseExponentiationExpression ( obj1.props ) . iterator () ;
Distance : 4

150
Tree	Iterator iter = getMillisPerUnit ( STRING_CONSTANT ) ;
Code	Iterator iter = getMillisPerUnit ( STRING_CONSTANT ) ;
Distance : 4

151
Tree	Iterator iter = binaryComparator . iterator ( coalescedName , null ) ;
Code	Iterator iter = binaryComparator . iterator ( coalescedName , null ) ;
Distance : 6

152
Tree	Iterator iter = new Expm1 ( STRING_CONSTANT ) . iterator () ;
Code	Iterator iter = new Expm1 ( STRING_CONSTANT ) . iterator () ;
Distance : 5

153
Tree	Iterator iter = getPropFromClass ( NUMBER_CONSTANT ) ;
Code	Iterator iter = getPropFromClass ( NUMBER_CONSTANT ) ;
Distance : 4

154
Tree	Iterator iter = getMillisPerUnit ( null , STRING_CONSTANT ) ;
Code	Iterator iter = getMillisPerUnit ( null , STRING_CONSTANT ) ;
Distance : 6

155
Tree	Iterator iter = ols . iterator () ;
Code	Iterator iter = ols . iterator () ;
Distance : 1

156
Tree	Iterator iter = instance.declarations . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator iter = instance.declarations . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 6

157
Tree	Iterator iter = new UnicodeUnescaper ( STRING_CONSTANT ) . iterator () ;
Code	Iterator iter = new UnicodeUnescaper ( STRING_CONSTANT ) . iterator () ;
Distance : 5

158
Tree	Iterator iter = invocationForStubbing . iterator ( instance.declarations , NUMBER_CONSTANT ) ;
Code	Iterator iter = invocationForStubbing . iterator ( instance.declarations , NUMBER_CONSTANT ) ;
Distance : 6

159
Tree	Iterator iter = getMillisPerUnit ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getMillisPerUnit ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

160
Tree	Iterator iter = new NumericEntityUnescaper ( STRING_CONSTANT ) . iterator () ;
Code	Iterator iter = new NumericEntityUnescaper ( STRING_CONSTANT ) . iterator () ;
Distance : 5

161
Tree	Iterator iter = TypeUtilsTest . iterator () ;
Code	Iterator iter = TypeUtilsTest . iterator () ;
Distance : 1

162
Tree	Iterator iter = invocationForStubbing . iterator ( rightmostName , null ) ;
Code	Iterator iter = invocationForStubbing . iterator ( rightmostName , null ) ;
Distance : 6

163
Tree	Iterator iter = ERA_FIELD . iterator ( coalescedName . class ) ;
Code	Iterator iter = ERA_FIELD . iterator ( coalescedName . class ) ;
Distance : 6

164
Tree	Iterator iter = PivotSelectionRule.DANTZIG . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator iter = PivotSelectionRule.DANTZIG . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 6

165
Tree	Iterator iter = getProvider ( null , STRING_CONSTANT ) ;
Code	Iterator iter = getProvider ( null , STRING_CONSTANT ) ;
Distance : 6

166
Tree	Iterator iter = getPropFromClass ( STRING_CONSTANT ) ;
Code	Iterator iter = getPropFromClass ( STRING_CONSTANT ) ;
Distance : 4

167
Tree	Iterator iter = Cartesian2D.NEGATIVE_INFINITY . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator iter = Cartesian2D.NEGATIVE_INFINITY . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 6

168
Tree	Iterator iter = findDomainAxisIndex ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = findDomainAxisIndex ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

169
Tree	Iterator iter = new XMinus5Function ( STRING_CONSTANT ) . iterator () ;
Code	Iterator iter = new XMinus5Function ( STRING_CONSTANT ) . iterator () ;
Distance : 5

170
Tree	Iterator iter = PropAccess.STRUCT . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator iter = PropAccess.STRUCT . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 6

171
Tree	Iterator iter = invocationForStubbing . iterator ( NUMBER_CONSTANT , source.contractionCriterion ) ;
Code	Iterator iter = invocationForStubbing . iterator ( NUMBER_CONSTANT , source.contractionCriterion ) ;
Distance : 6

172
Tree	Iterator iter = new Sigmoid ( STRING_CONSTANT ) . iterator () ;
Code	Iterator iter = new Sigmoid ( STRING_CONSTANT ) . iterator () ;
Distance : 5

173
Tree	Iterator iter = findMatching ( null , STRING_CONSTANT ) ;
Code	Iterator iter = findMatching ( null , STRING_CONSTANT ) ;
Distance : 6

174
Tree	Iterator iter = rhsNode . iterator ( rightmostName . class ) ;
Code	Iterator iter = rhsNode . iterator ( rightmostName . class ) ;
Distance : 6

175
Tree	Iterator iter = getProperNumerator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getProperNumerator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

176
Tree	Iterator iter = getMillisPerUnit ( this . iterator ) ;
Code	Iterator iter = getMillisPerUnit ( this . iterator ) ;
Distance : 4

177
Tree	Iterator iter = invocationForStubbing . iterator ( obj1.props , NUMBER_CONSTANT ) ;
Code	Iterator iter = invocationForStubbing . iterator ( obj1.props , NUMBER_CONSTANT ) ;
Distance : 6

178
Tree	Iterator iter = columnLabels . iterator ( coalescedName . class ) ;
Code	Iterator iter = columnLabels . iterator ( coalescedName . class ) ;
Distance : 6

179
Tree	Iterator iter = getProvider ( invocationForStubbing . class ) ;
Code	Iterator iter = getProvider ( invocationForStubbing . class ) ;
Distance : 5

180
Tree	Iterator iter = ReadablePeriodConverter . iterator ( coalescedName . class ) ;
Code	Iterator iter = ReadablePeriodConverter . iterator ( coalescedName . class ) ;
Distance : 6

181
Tree	Iterator iter = Cartesian1D.NEGATIVE_INFINITY . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator iter = Cartesian1D.NEGATIVE_INFINITY . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 6

182
Tree	Iterator iter = binaryComparator . iterator ( obj1.props , NUMBER_CONSTANT ) ;
Code	Iterator iter = binaryComparator . iterator ( obj1.props , NUMBER_CONSTANT ) ;
Distance : 6

183
Tree	Iterator iter = getMillisPerUnit ( NUMBER_CONSTANT ) ;
Code	Iterator iter = getMillisPerUnit ( NUMBER_CONSTANT ) ;
Distance : 4

184
Tree	Iterator iter = invocationForStubbing . iterator ( functionContext.function , NUMBER_CONSTANT ) ;
Code	Iterator iter = invocationForStubbing . iterator ( functionContext.function , NUMBER_CONSTANT ) ;
Distance : 6

185
Tree	Iterator iter = parseExponentiationExpression ( functionContext.function , java.lang.Class ) ;
Code	Iterator iter = parseExponentiationExpression ( functionContext.function , java.lang.Class ) ;
Distance : 6

186
Tree	Iterator iter = columnLabels . iterator ( obj1.props , NUMBER_CONSTANT ) ;
Code	Iterator iter = columnLabels . iterator ( obj1.props , NUMBER_CONSTANT ) ;
Distance : 6

187
Tree	Iterator iter = firstOf ( functionContext.function , java.lang.Class ) ;
Code	Iterator iter = firstOf ( functionContext.function , java.lang.Class ) ;
Distance : 6

188
Tree	Range iter = this . iterator . iterator () ;
Code	Range iter = this . iterator . iterator () ;
Distance : 4

189
Tree	Iterator iter = findMatching ( instance.declarations , java.lang.Class ) ;
Code	Iterator iter = findMatching ( instance.declarations , java.lang.Class ) ;
Distance : 6

190
Tree	Iterator iter = rhsNode . iterator ( instance.declarations , NUMBER_CONSTANT ) ;
Code	Iterator iter = rhsNode . iterator ( instance.declarations , NUMBER_CONSTANT ) ;
Distance : 6

191
Tree	Iterator iter = ERA_FIELD . iterator ( coalescedName , null ) ;
Code	Iterator iter = ERA_FIELD . iterator ( coalescedName , null ) ;
Distance : 6

192
Tree	Iterator iter = rhsNode . iterator ( rightmostName , null ) ;
Code	Iterator iter = rhsNode . iterator ( rightmostName , null ) ;
Distance : 6

193
Tree	Iterator den = this . iterator . iterator () ;
Code	Iterator den = this . iterator . iterator () ;
Distance : 4

194
Tree	Iterator iter = getProvider ( instance.declarations , java.lang.Class ) ;
Code	Iterator iter = getProvider ( instance.declarations , java.lang.Class ) ;
Distance : 6

195
Tree	Iterator compare = this . iterator . iterator () ;
Code	Iterator compare = this . iterator . iterator () ;
Distance : 4

196
Tree	Iterator iter = new BitSet ( STRING_CONSTANT ) . iterator () ;
Code	Iterator iter = new BitSet ( STRING_CONSTANT ) . iterator () ;
Distance : 5

197
Tree	Iterator iter = parseExponentiationExpression ( obj1.props , java.lang.Class ) ;
Code	Iterator iter = parseExponentiationExpression ( obj1.props , java.lang.Class ) ;
Distance : 6

198
Tree	Iterator iter = invocationForStubbing . iterator ( UnicodeUnescaper.PARAM.escapePlus , NUMBER_CONSTANT ) ;
Code	Iterator iter = invocationForStubbing . iterator ( UnicodeUnescaper.PARAM.escapePlus , NUMBER_CONSTANT ) ;
Distance : 6

199
Tree	Iterator iter = firstOf ( obj1.props , java.lang.Class ) ;
Code	Iterator iter = firstOf ( obj1.props , java.lang.Class ) ;
Distance : 6

========================================================================


========================================================================
Example Number: 66
Parent Code is: 
Iterator iter = res.entries . iterator () ;
-------------------------------------------------------------------------------
Child code is: 
Iterator iter = entries . iterator () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (40{val=res.entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Iterator})) (59 (800{val=iter}) (204{val==}) (32 (800{val=entries}) (235{val=.}) (802{val=iterator}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/49/parent/src_main_java_org_apache_commons_math_linear_OpenMapRealVector.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	Iterator iter = Cartesian2D.NaN . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = Cartesian2D.NaN . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

1
Tree	Iterator iter = getProvider ( instance.declarations ) . iterator () ;
Code	Iterator iter = getProvider ( instance.declarations ) . iterator () ;
Distance : 4

2
Tree	Iterator iter = invocationForStubbing . iterator ( coalescedName , null ) ;
Code	Iterator iter = invocationForStubbing . iterator ( coalescedName , null ) ;
Distance : 6

3
Tree	Iterator iter = findDomainAxisIndex ( STRING_CONSTANT ) ;
Code	Iterator iter = findDomainAxisIndex ( STRING_CONSTANT ) ;
Distance : 4

4
Tree	Iterator iter = findMatching () ;
Code	Iterator iter = findMatching () ;
Distance : 3

5
Tree	Iterator iter = firstOf ( instance.declarations ) . iterator () ;
Code	Iterator iter = firstOf ( instance.declarations ) . iterator () ;
Distance : 4

6
Tree	Iterator val = this . iterator . iterator () ;
Code	Iterator val = this . iterator . iterator () ;
Distance : 4

7
Tree	Iterator iter = getPropFromClass ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getPropFromClass ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

8
Tree	Iterator iter = findMatching ( NUMBER_CONSTANT ) ;
Code	Iterator iter = findMatching ( NUMBER_CONSTANT ) ;
Distance : 4

9
Tree	Iterator iter = ReadablePeriodConverter . iterator ( null ) ;
Code	Iterator iter = ReadablePeriodConverter . iterator ( null ) ;
Distance : 4

10
Tree	Iterator iter = invocationForStubbing . iterator ( NUMBER_CONSTANT , instance.declarations ) ;
Code	Iterator iter = invocationForStubbing . iterator ( NUMBER_CONSTANT , instance.declarations ) ;
Distance : 6

11
Tree	Iterator iter = rhsNode . iterator ( coalescedName , null ) ;
Code	Iterator iter = rhsNode . iterator ( coalescedName , null ) ;
Distance : 6

12
Tree	Iterator iter = rhsNode . iterator ( NUMBER_CONSTANT , instance.declarations ) ;
Code	Iterator iter = rhsNode . iterator ( NUMBER_CONSTANT , instance.declarations ) ;
Distance : 6

13
Tree	Iterator iter = this . iterator . iterator () ;
Code	Iterator iter = this . iterator . iterator () ;
Distance : 3

14
Tree	Iterator iter = Cartesian2D.NaN . iterator () ;
Code	Iterator iter = Cartesian2D.NaN . iterator () ;
Distance : 1

15
Tree	Iterator iter = parseExponentiationExpression () ;
Code	Iterator iter = parseExponentiationExpression () ;
Distance : 3

16
Tree	Iterator iter = parseExponentiationExpression ( NUMBER_CONSTANT ) ;
Code	Iterator iter = parseExponentiationExpression ( NUMBER_CONSTANT ) ;
Distance : 4

17
Tree	Iterator iter = rhsNode . iterator () ;
Code	Iterator iter = rhsNode . iterator () ;
Distance : 1

18
Tree	Iterator iter = source.contractionCriterion . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = source.contractionCriterion . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

19
Tree	Iterator iter = PropAccess.STRUCT . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = PropAccess.STRUCT . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

20
Tree	Iterator iter = parseExponentiationExpression ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = parseExponentiationExpression ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

21
Tree	Iterator iter = parseExponentiationExpression ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = parseExponentiationExpression ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

22
Tree	Iterator iter = parseExponentiationExpression ( instance.declarations ) ;
Code	Iterator iter = parseExponentiationExpression ( instance.declarations ) ;
Distance : 4

23
Tree	Iterator iter = getMillisPerUnit ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getMillisPerUnit ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

24
Tree	Iterator iter = firstOf () ;
Code	Iterator iter = firstOf () ;
Distance : 3

25
Tree	Iterator iter = firstOf ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = firstOf ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

26
Tree	Iterator iter = getProvider () ;
Code	Iterator iter = getProvider () ;
Distance : 3

27
Tree	Iterator iter = parseExponentiationExpression ( this . iterator ) ;
Code	Iterator iter = parseExponentiationExpression ( this . iterator ) ;
Distance : 4

28
Tree	Iterator iter = firstOf ( rhsNode . class ) ;
Code	Iterator iter = firstOf ( rhsNode . class ) ;
Distance : 5

29
Tree	Iterator iter = invocationForStubbing . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = invocationForStubbing . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

30
Tree	Iterator iter = binaryComparator . iterator ( NUMBER_CONSTANT , java.lang.Class ) ;
Code	Iterator iter = binaryComparator . iterator ( NUMBER_CONSTANT , java.lang.Class ) ;
Distance : 6

31
Tree	Iterator iter = coefficients.length . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = coefficients.length . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

32
Tree	Iterator iter = findMatching ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = findMatching ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

33
Tree	Iterator iter = Cartesian2D.NaN . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator iter = Cartesian2D.NaN . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 6

34
Tree	Iterator iter = columnLabels . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = columnLabels . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

35
Tree	Iterator iter = binaryComparator . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = binaryComparator . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

36
Tree	Iterator iter = parseExponentiationExpression ( null , STRING_CONSTANT ) ;
Code	Iterator iter = parseExponentiationExpression ( null , STRING_CONSTANT ) ;
Distance : 6

37
Tree	Iterator iter = getProvider ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getProvider ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

38
Tree	Iterator iter = firstOf ( STRING_CONSTANT ) ;
Code	Iterator iter = firstOf ( STRING_CONSTANT ) ;
Distance : 4

39
Tree	Iterator iter = firstOf ( instance.declarations ) ;
Code	Iterator iter = firstOf ( instance.declarations ) ;
Distance : 4

40
Tree	Iterator iter = ERA_FIELD . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = ERA_FIELD . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

41
Tree	Iterator iter = firstOf ( NUMBER_CONSTANT ) ;
Code	Iterator iter = firstOf ( NUMBER_CONSTANT ) ;
Distance : 4

42
Tree	Iterator iter = Cartesian2D.NEGATIVE_INFINITY . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = Cartesian2D.NEGATIVE_INFINITY . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

43
Tree	Iterator iter = parseExponentiationExpression ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = parseExponentiationExpression ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

44
Tree	Iterator iter = invocationForStubbing . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = invocationForStubbing . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

45
Tree	Iterator iter = instance.declarations . iterator () ;
Code	Iterator iter = instance.declarations . iterator () ;
Distance : 1

46
Tree	Iterator iter = findDomainAxisIndex ( null , STRING_CONSTANT ) ;
Code	Iterator iter = findDomainAxisIndex ( null , STRING_CONSTANT ) ;
Distance : 6

47
Tree	Iterator iter = Cartesian1D.NEGATIVE_INFINITY . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = Cartesian1D.NEGATIVE_INFINITY . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

48
Tree	Iterator iter = binaryComparator . iterator ( coalescedName . class ) ;
Code	Iterator iter = binaryComparator . iterator ( coalescedName . class ) ;
Distance : 6

49
Tree	Iterator iter = getProvider ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getProvider ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

50
Tree	Iterator iter = getProvider ( NUMBER_CONSTANT ) ;
Code	Iterator iter = getProvider ( NUMBER_CONSTANT ) ;
Distance : 4

51
Tree	Iterator iter = source.contractionCriterion . iterator () ;
Code	Iterator iter = source.contractionCriterion . iterator () ;
Distance : 1

52
Tree	Iterator iter = ReadablePeriodConverter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = ReadablePeriodConverter . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

53
Tree	Iterator iter = findDomainAxisIndex () ;
Code	Iterator iter = findDomainAxisIndex () ;
Distance : 3

54
Tree	Iterator iter = parseExponentiationExpression ( obj1.props ) ;
Code	Iterator iter = parseExponentiationExpression ( obj1.props ) ;
Distance : 4

55
Tree	Iterator iter = getPropFromClass ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getPropFromClass ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

56
Tree	Iterator iter = getPropFromClass ( this . iterator ) ;
Code	Iterator iter = getPropFromClass ( this . iterator ) ;
Distance : 4

57
Tree	Iterator iter = columnLabels . iterator ( NUMBER_CONSTANT , java.lang.Class ) ;
Code	Iterator iter = columnLabels . iterator ( NUMBER_CONSTANT , java.lang.Class ) ;
Distance : 6

58
Tree	Iterator iter = getMillisPerUnit () ;
Code	Iterator iter = getMillisPerUnit () ;
Distance : 3

59
Tree	Iterator iter = invocationForStubbing . iterator ( null ) ;
Code	Iterator iter = invocationForStubbing . iterator ( null ) ;
Distance : 4

60
Tree	Iterator iter = findDomainAxisIndex ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = findDomainAxisIndex ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

61
Tree	Iterator iter = Cartesian1D.NEGATIVE_INFINITY . iterator () ;
Code	Iterator iter = Cartesian1D.NEGATIVE_INFINITY . iterator () ;
Distance : 1

62
Tree	Iterator iter = firstOf ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = firstOf ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

63
Tree	Iterator iter = firstOf ( obj1.props ) ;
Code	Iterator iter = firstOf ( obj1.props ) ;
Distance : 4

64
Tree	Iterator iter = invocationForStubbing . iterator ( NUMBER_CONSTANT , java.lang.Class ) ;
Code	Iterator iter = invocationForStubbing . iterator ( NUMBER_CONSTANT , java.lang.Class ) ;
Distance : 6

65
Tree	Iterator iter = invocationForStubbing . iterator () ;
Code	Iterator iter = invocationForStubbing . iterator () ;
Distance : 1

66
Tree	Iterator iter = ols . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = ols . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

67
Tree	Iterator iter = findMatching ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = findMatching ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

68
Tree	Iterator iter = getProperNumerator ( STRING_CONSTANT ) ;
Code	Iterator iter = getProperNumerator ( STRING_CONSTANT ) ;
Distance : 4

69
Tree	Iterator iter = findMatching ( this . iterator ) ;
Code	Iterator iter = findMatching ( this . iterator ) ;
Distance : 4

70
Tree	Iterator iter = firstOf ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = firstOf ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

71
Tree	Iterator iter = PropAccess.STRUCT . iterator () ;
Code	Iterator iter = PropAccess.STRUCT . iterator () ;
Distance : 1

72
Tree	Iterator iter = binaryComparator . iterator ( null ) ;
Code	Iterator iter = binaryComparator . iterator ( null ) ;
Distance : 4

73
Tree	Iterator iter = PivotSelectionRule.DANTZIG . iterator () ;
Code	Iterator iter = PivotSelectionRule.DANTZIG . iterator () ;
Distance : 1

74
Tree	Iterator iter = parseExponentiationExpression ( functionContext.function ) ;
Code	Iterator iter = parseExponentiationExpression ( functionContext.function ) ;
Distance : 4

75
Tree	Iterator iter = parseExponentiationExpression ( invocationForStubbing . class ) ;
Code	Iterator iter = parseExponentiationExpression ( invocationForStubbing . class ) ;
Distance : 5

76
Tree	Iterator iter = binaryComparator . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = binaryComparator . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

77
Tree	Iterator iter = ReadablePeriodConverter . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = ReadablePeriodConverter . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

78
Tree	Iterator iter = TypeUtilsTest . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = TypeUtilsTest . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

79
Tree	NoInteractionsWanted iter = this . iterator . iterator () ;
Code	NoInteractionsWanted iter = this . iterator . iterator () ;
Distance : 4

80
Tree	Iterator iter = firstOf ( functionContext.function ) ;
Code	Iterator iter = firstOf ( functionContext.function ) ;
Distance : 4

81
Tree	Iterator iter = getProperNumerator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getProperNumerator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

82
Tree	Iterator iter = instance.declarations . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = instance.declarations . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

83
Tree	Iterator iter = firstOf ( obj1.props ) . iterator () ;
Code	Iterator iter = firstOf ( obj1.props ) . iterator () ;
Distance : 4

84
Tree	Iterator iter = rhsNode . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = rhsNode . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

85
Tree	Iterator iter = columnLabels . iterator ( null ) ;
Code	Iterator iter = columnLabels . iterator ( null ) ;
Distance : 4

86
Tree	Iterator iter = ERA_FIELD . iterator ( null ) ;
Code	Iterator iter = ERA_FIELD . iterator ( null ) ;
Distance : 4

87
Tree	Iterator iter = findDomainAxisIndex ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = findDomainAxisIndex ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

88
Tree	Iterator iter = invocationForStubbing . iterator ( coalescedName . class ) ;
Code	Iterator iter = invocationForStubbing . iterator ( coalescedName . class ) ;
Distance : 6

89
Tree	Iterator iter = getPropFromClass ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getPropFromClass ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

90
Tree	Iterator iter = parseExponentiationExpression ( STRING_CONSTANT ) ;
Code	Iterator iter = parseExponentiationExpression ( STRING_CONSTANT ) ;
Distance : 4

91
Tree	Iterator iter = parseExponentiationExpression ( functionContext.function ) . iterator () ;
Code	Iterator iter = parseExponentiationExpression ( functionContext.function ) . iterator () ;
Distance : 4

92
Tree	Iterator iter = parseExponentiationExpression ( instance.declarations ) . iterator () ;
Code	Iterator iter = parseExponentiationExpression ( instance.declarations ) . iterator () ;
Distance : 4

93
Tree	Iterator iter = findMatching ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = findMatching ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

94
Tree	Iterator iter = rhsNode . iterator ( NUMBER_CONSTANT , java.lang.Class ) ;
Code	Iterator iter = rhsNode . iterator ( NUMBER_CONSTANT , java.lang.Class ) ;
Distance : 6

95
Tree	Iterator iter = firstOf ( invocationForStubbing . class ) ;
Code	Iterator iter = firstOf ( invocationForStubbing . class ) ;
Distance : 5

96
Tree	Iterator iter = findDomainAxisIndex ( NUMBER_CONSTANT ) ;
Code	Iterator iter = findDomainAxisIndex ( NUMBER_CONSTANT ) ;
Distance : 4

97
Tree	Iterator iter = findMatching ( instance.declarations ) . iterator () ;
Code	Iterator iter = findMatching ( instance.declarations ) . iterator () ;
Distance : 4

98
Tree	Iterator iter = rhsNode . iterator ( coalescedName . class ) ;
Code	Iterator iter = rhsNode . iterator ( coalescedName . class ) ;
Distance : 6

99
Tree	Iterator iter = new GeneralPath ( STRING_CONSTANT ) . iterator () ;
Code	Iterator iter = new GeneralPath ( STRING_CONSTANT ) . iterator () ;
Distance : 5

100
Tree	Iterator iter = getProperNumerator ( this . iterator ) ;
Code	Iterator iter = getProperNumerator ( this . iterator ) ;
Distance : 4

101
Tree	Iterator iter = ReadablePeriodConverter . iterator () ;
Code	Iterator iter = ReadablePeriodConverter . iterator () ;
Distance : 1

102
Tree	Iterator iter = rhsNode . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = rhsNode . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

103
Tree	Iterator iter = new Outer ( STRING_CONSTANT ) . iterator () ;
Code	Iterator iter = new Outer ( STRING_CONSTANT ) . iterator () ;
Distance : 5

104
Tree	Iterator iter = source.contractionCriterion . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator iter = source.contractionCriterion . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 6

105
Tree	Iterator iter = ERA_FIELD . iterator () ;
Code	Iterator iter = ERA_FIELD . iterator () ;
Distance : 1

106
Tree	Iterator iter = firstOf ( null , STRING_CONSTANT ) ;
Code	Iterator iter = firstOf ( null , STRING_CONSTANT ) ;
Distance : 6

107
Tree	Iterator iter = parseExponentiationExpression ( instance.declarations , java.lang.Class ) ;
Code	Iterator iter = parseExponentiationExpression ( instance.declarations , java.lang.Class ) ;
Distance : 6

108
Tree	Iterator iter = getProvider ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getProvider ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

109
Tree	Iterator iter = firstOf ( this . iterator ) ;
Code	Iterator iter = firstOf ( this . iterator ) ;
Distance : 4

110
Tree	Iterator iter = parseExponentiationExpression ( rhsNode . class ) ;
Code	Iterator iter = parseExponentiationExpression ( rhsNode . class ) ;
Distance : 5

111
Tree	Iterator iter = getPropFromClass () ;
Code	Iterator iter = getPropFromClass () ;
Distance : 3

112
Tree	Iterator iter = ols . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = ols . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

113
Tree	Iterator iter = columnLabels . iterator ( coalescedName , null ) ;
Code	Iterator iter = columnLabels . iterator ( coalescedName , null ) ;
Distance : 6

114
Tree	Iterator iter = PivotSelectionRule.DANTZIG . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = PivotSelectionRule.DANTZIG . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

115
Tree	Iterator toRemove = this . iterator . iterator () ;
Code	Iterator toRemove = this . iterator . iterator () ;
Distance : 4

116
Tree	Iterator series1 = this . iterator . iterator () ;
Code	Iterator series1 = this . iterator . iterator () ;
Distance : 4

117
Tree	Iterator iter = invocationForStubbing . iterator ( rightmostName . class ) ;
Code	Iterator iter = invocationForStubbing . iterator ( rightmostName . class ) ;
Distance : 6

118
Tree	Iterator iter = findMatching ( invocationForStubbing . class ) ;
Code	Iterator iter = findMatching ( invocationForStubbing . class ) ;
Distance : 5

119
Tree	Iterator iter = getProperNumerator () ;
Code	Iterator iter = getProperNumerator () ;
Distance : 3

120
Tree	Iterator iter = firstOf ( instance.declarations , java.lang.Class ) ;
Code	Iterator iter = firstOf ( instance.declarations , java.lang.Class ) ;
Distance : 6

121
Tree	Iterator iter = parseExponentiationExpression ( coalescedName . class ) ;
Code	Iterator iter = parseExponentiationExpression ( coalescedName . class ) ;
Distance : 5

122
Tree	Iterator iter = binaryComparator . iterator () ;
Code	Iterator iter = binaryComparator . iterator () ;
Distance : 1

123
Tree	Iterator iter = getProperNumerator ( null , STRING_CONSTANT ) ;
Code	Iterator iter = getProperNumerator ( null , STRING_CONSTANT ) ;
Distance : 6

124
Tree	Iterator iter = findMatching ( instance.declarations ) ;
Code	Iterator iter = findMatching ( instance.declarations ) ;
Distance : 4

125
Tree	Iterator iter = getProvider ( this . iterator ) ;
Code	Iterator iter = getProvider ( this . iterator ) ;
Distance : 4

126
Tree	Iterator iter = coefficients.length . iterator () ;
Code	Iterator iter = coefficients.length . iterator () ;
Distance : 1

127
Tree	Iterator iter = getProvider ( instance.declarations ) ;
Code	Iterator iter = getProvider ( instance.declarations ) ;
Distance : 4

128
Tree	Iterator iter = ERA_FIELD . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = ERA_FIELD . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

129
Tree	Iterator iter = rhsNode . iterator ( null ) ;
Code	Iterator iter = rhsNode . iterator ( null ) ;
Distance : 4

130
Tree	Iterator iter = columnLabels . iterator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = columnLabels . iterator ( NUMBER_CONSTANT ) ;
Distance : 4

131
Tree	Iterator iter = findDomainAxisIndex ( this . iterator ) ;
Code	Iterator iter = findDomainAxisIndex ( this . iterator ) ;
Distance : 4

132
Tree	Iterator iter = Cartesian2D.NEGATIVE_INFINITY . iterator () ;
Code	Iterator iter = Cartesian2D.NEGATIVE_INFINITY . iterator () ;
Distance : 1

133
Tree	Iterator iter = getProperNumerator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getProperNumerator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 10

134
Tree	Iterator iter = getMillisPerUnit ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getMillisPerUnit ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

135
Tree	Iterator iter = TypeUtilsTest . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = TypeUtilsTest . iterator ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 8

136
Tree	Iterator iter = firstOf ( functionContext.function ) . iterator () ;
Code	Iterator iter = firstOf ( functionContext.function ) . iterator () ;
Distance : 4

137
Tree	Iterator iter = ols . iterator ( null ) ;
Code	Iterator iter = ols . iterator ( null ) ;
Distance : 4

138
Tree	Iterator iter = getPropFromClass ( null , STRING_CONSTANT ) ;
Code	Iterator iter = getPropFromClass ( null , STRING_CONSTANT ) ;
Distance : 6

139
Tree	Iterator iter = columnLabels . iterator () ;
Code	Iterator iter = columnLabels . iterator () ;
Distance : 1

140
Tree	Iterator iter = TypeUtilsTest . iterator ( null ) ;
Code	Iterator iter = TypeUtilsTest . iterator ( null ) ;
Distance : 4

141
Tree	Iterator iter = findMatching ( STRING_CONSTANT ) ;
Code	Iterator iter = findMatching ( STRING_CONSTANT ) ;
Distance : 4

142
Tree	Iterator iter = firstOf ( coalescedName . class ) ;
Code	Iterator iter = firstOf ( coalescedName . class ) ;
Distance : 5

143
Tree	Iterator iter = ReadablePeriodConverter . iterator ( coalescedName , null ) ;
Code	Iterator iter = ReadablePeriodConverter . iterator ( coalescedName , null ) ;
Distance : 6

144
Tree	Iterator iter = coefficients.length . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator iter = coefficients.length . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 6

145
Tree	Iterator iter = ReadablePeriodConverter . iterator ( NUMBER_CONSTANT , java.lang.Class ) ;
Code	Iterator iter = ReadablePeriodConverter . iterator ( NUMBER_CONSTANT , java.lang.Class ) ;
Distance : 6

146
Tree	Iterator iter = rhsNode . iterator ( obj1.props , NUMBER_CONSTANT ) ;
Code	Iterator iter = rhsNode . iterator ( obj1.props , NUMBER_CONSTANT ) ;
Distance : 6

147
Tree	Iterator iter = getProperNumerator ( NUMBER_CONSTANT ) ;
Code	Iterator iter = getProperNumerator ( NUMBER_CONSTANT ) ;
Distance : 4

148
Tree	Iterator iter = getProvider ( STRING_CONSTANT ) ;
Code	Iterator iter = getProvider ( STRING_CONSTANT ) ;
Distance : 4

149
Tree	Iterator iter = parseExponentiationExpression ( obj1.props ) . iterator () ;
Code	Iterator iter = parseExponentiationExpression ( obj1.props ) . iterator () ;
Distance : 4

150
Tree	Iterator iter = getMillisPerUnit ( STRING_CONSTANT ) ;
Code	Iterator iter = getMillisPerUnit ( STRING_CONSTANT ) ;
Distance : 4

151
Tree	Iterator iter = binaryComparator . iterator ( coalescedName , null ) ;
Code	Iterator iter = binaryComparator . iterator ( coalescedName , null ) ;
Distance : 6

152
Tree	Iterator iter = new Expm1 ( STRING_CONSTANT ) . iterator () ;
Code	Iterator iter = new Expm1 ( STRING_CONSTANT ) . iterator () ;
Distance : 5

153
Tree	Iterator iter = getPropFromClass ( NUMBER_CONSTANT ) ;
Code	Iterator iter = getPropFromClass ( NUMBER_CONSTANT ) ;
Distance : 4

154
Tree	Iterator iter = getMillisPerUnit ( null , STRING_CONSTANT ) ;
Code	Iterator iter = getMillisPerUnit ( null , STRING_CONSTANT ) ;
Distance : 6

155
Tree	Iterator iter = ols . iterator () ;
Code	Iterator iter = ols . iterator () ;
Distance : 1

156
Tree	Iterator iter = instance.declarations . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator iter = instance.declarations . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 6

157
Tree	Iterator iter = new UnicodeUnescaper ( STRING_CONSTANT ) . iterator () ;
Code	Iterator iter = new UnicodeUnescaper ( STRING_CONSTANT ) . iterator () ;
Distance : 5

158
Tree	Iterator iter = invocationForStubbing . iterator ( instance.declarations , NUMBER_CONSTANT ) ;
Code	Iterator iter = invocationForStubbing . iterator ( instance.declarations , NUMBER_CONSTANT ) ;
Distance : 6

159
Tree	Iterator iter = getMillisPerUnit ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getMillisPerUnit ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

160
Tree	Iterator iter = new NumericEntityUnescaper ( STRING_CONSTANT ) . iterator () ;
Code	Iterator iter = new NumericEntityUnescaper ( STRING_CONSTANT ) . iterator () ;
Distance : 5

161
Tree	Iterator iter = TypeUtilsTest . iterator () ;
Code	Iterator iter = TypeUtilsTest . iterator () ;
Distance : 1

162
Tree	Iterator iter = invocationForStubbing . iterator ( rightmostName , null ) ;
Code	Iterator iter = invocationForStubbing . iterator ( rightmostName , null ) ;
Distance : 6

163
Tree	Iterator iter = ERA_FIELD . iterator ( coalescedName . class ) ;
Code	Iterator iter = ERA_FIELD . iterator ( coalescedName . class ) ;
Distance : 6

164
Tree	Iterator iter = PivotSelectionRule.DANTZIG . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator iter = PivotSelectionRule.DANTZIG . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 6

165
Tree	Iterator iter = getProvider ( null , STRING_CONSTANT ) ;
Code	Iterator iter = getProvider ( null , STRING_CONSTANT ) ;
Distance : 6

166
Tree	Iterator iter = getPropFromClass ( STRING_CONSTANT ) ;
Code	Iterator iter = getPropFromClass ( STRING_CONSTANT ) ;
Distance : 4

167
Tree	Iterator iter = Cartesian2D.NEGATIVE_INFINITY . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator iter = Cartesian2D.NEGATIVE_INFINITY . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 6

168
Tree	Iterator iter = findDomainAxisIndex ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = findDomainAxisIndex ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

169
Tree	Iterator iter = new XMinus5Function ( STRING_CONSTANT ) . iterator () ;
Code	Iterator iter = new XMinus5Function ( STRING_CONSTANT ) . iterator () ;
Distance : 5

170
Tree	Iterator iter = PropAccess.STRUCT . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator iter = PropAccess.STRUCT . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 6

171
Tree	Iterator iter = invocationForStubbing . iterator ( NUMBER_CONSTANT , source.contractionCriterion ) ;
Code	Iterator iter = invocationForStubbing . iterator ( NUMBER_CONSTANT , source.contractionCriterion ) ;
Distance : 6

172
Tree	Iterator iter = new Sigmoid ( STRING_CONSTANT ) . iterator () ;
Code	Iterator iter = new Sigmoid ( STRING_CONSTANT ) . iterator () ;
Distance : 5

173
Tree	Iterator iter = findMatching ( null , STRING_CONSTANT ) ;
Code	Iterator iter = findMatching ( null , STRING_CONSTANT ) ;
Distance : 6

174
Tree	Iterator iter = rhsNode . iterator ( rightmostName . class ) ;
Code	Iterator iter = rhsNode . iterator ( rightmostName . class ) ;
Distance : 6

175
Tree	Iterator iter = getProperNumerator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Code	Iterator iter = getProperNumerator ( STRING_CONSTANT , STRING_CONSTANT ) ;
Distance : 6

176
Tree	Iterator iter = getMillisPerUnit ( this . iterator ) ;
Code	Iterator iter = getMillisPerUnit ( this . iterator ) ;
Distance : 4

177
Tree	Iterator iter = invocationForStubbing . iterator ( obj1.props , NUMBER_CONSTANT ) ;
Code	Iterator iter = invocationForStubbing . iterator ( obj1.props , NUMBER_CONSTANT ) ;
Distance : 6

178
Tree	Iterator iter = columnLabels . iterator ( coalescedName . class ) ;
Code	Iterator iter = columnLabels . iterator ( coalescedName . class ) ;
Distance : 6

179
Tree	Iterator iter = getProvider ( invocationForStubbing . class ) ;
Code	Iterator iter = getProvider ( invocationForStubbing . class ) ;
Distance : 5

180
Tree	Iterator iter = ReadablePeriodConverter . iterator ( coalescedName . class ) ;
Code	Iterator iter = ReadablePeriodConverter . iterator ( coalescedName . class ) ;
Distance : 6

181
Tree	Iterator iter = Cartesian1D.NEGATIVE_INFINITY . iterator ( NUMBER_CONSTANT ) . iterator () ;
Code	Iterator iter = Cartesian1D.NEGATIVE_INFINITY . iterator ( NUMBER_CONSTANT ) . iterator () ;
Distance : 6

182
Tree	Iterator iter = binaryComparator . iterator ( obj1.props , NUMBER_CONSTANT ) ;
Code	Iterator iter = binaryComparator . iterator ( obj1.props , NUMBER_CONSTANT ) ;
Distance : 6

183
Tree	Iterator iter = getMillisPerUnit ( NUMBER_CONSTANT ) ;
Code	Iterator iter = getMillisPerUnit ( NUMBER_CONSTANT ) ;
Distance : 4

184
Tree	Iterator iter = invocationForStubbing . iterator ( functionContext.function , NUMBER_CONSTANT ) ;
Code	Iterator iter = invocationForStubbing . iterator ( functionContext.function , NUMBER_CONSTANT ) ;
Distance : 6

185
Tree	Iterator iter = parseExponentiationExpression ( functionContext.function , java.lang.Class ) ;
Code	Iterator iter = parseExponentiationExpression ( functionContext.function , java.lang.Class ) ;
Distance : 6

186
Tree	Iterator iter = columnLabels . iterator ( obj1.props , NUMBER_CONSTANT ) ;
Code	Iterator iter = columnLabels . iterator ( obj1.props , NUMBER_CONSTANT ) ;
Distance : 6

187
Tree	Iterator iter = firstOf ( functionContext.function , java.lang.Class ) ;
Code	Iterator iter = firstOf ( functionContext.function , java.lang.Class ) ;
Distance : 6

188
Tree	Range iter = this . iterator . iterator () ;
Code	Range iter = this . iterator . iterator () ;
Distance : 4

189
Tree	Iterator iter = findMatching ( instance.declarations , java.lang.Class ) ;
Code	Iterator iter = findMatching ( instance.declarations , java.lang.Class ) ;
Distance : 6

190
Tree	Iterator iter = rhsNode . iterator ( instance.declarations , NUMBER_CONSTANT ) ;
Code	Iterator iter = rhsNode . iterator ( instance.declarations , NUMBER_CONSTANT ) ;
Distance : 6

191
Tree	Iterator iter = ERA_FIELD . iterator ( coalescedName , null ) ;
Code	Iterator iter = ERA_FIELD . iterator ( coalescedName , null ) ;
Distance : 6

192
Tree	Iterator iter = rhsNode . iterator ( rightmostName , null ) ;
Code	Iterator iter = rhsNode . iterator ( rightmostName , null ) ;
Distance : 6

193
Tree	Iterator den = this . iterator . iterator () ;
Code	Iterator den = this . iterator . iterator () ;
Distance : 4

194
Tree	Iterator iter = getProvider ( instance.declarations , java.lang.Class ) ;
Code	Iterator iter = getProvider ( instance.declarations , java.lang.Class ) ;
Distance : 6

195
Tree	Iterator compare = this . iterator . iterator () ;
Code	Iterator compare = this . iterator . iterator () ;
Distance : 4

196
Tree	Iterator iter = new BitSet ( STRING_CONSTANT ) . iterator () ;
Code	Iterator iter = new BitSet ( STRING_CONSTANT ) . iterator () ;
Distance : 5

197
Tree	Iterator iter = parseExponentiationExpression ( obj1.props , java.lang.Class ) ;
Code	Iterator iter = parseExponentiationExpression ( obj1.props , java.lang.Class ) ;
Distance : 6

198
Tree	Iterator iter = invocationForStubbing . iterator ( UnicodeUnescaper.PARAM.escapePlus , NUMBER_CONSTANT ) ;
Code	Iterator iter = invocationForStubbing . iterator ( UnicodeUnescaper.PARAM.escapePlus , NUMBER_CONSTANT ) ;
Distance : 6

199
Tree	Iterator iter = firstOf ( obj1.props , java.lang.Class ) ;
Code	Iterator iter = firstOf ( obj1.props , java.lang.Class ) ;
Distance : 6

========================================================================


========================================================================
Example Number: 67
Parent Code is: 
if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
-------------------------------------------------------------------------------
Child code is: 
if ( divisor == NUMBER_CONSTANT ) { return isZero ? NaN : INF ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=divisor}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=NaN}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=divisor}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (16 (800{val=isZero}) (233{val=?}) (800{val=NaN}) (226{val=:}) (800{val=INF})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/47/parent/src_main_java_org_apache_commons_math_complex_Complex.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( this . shouldExtract () ) { return NaN ; }
Code	if ( this . shouldExtract () ) { return NaN ; }
Distance : 8

1
Tree	if ( this . getVertices () ) { return NaN ; }
Code	if ( this . getVertices () ) { return NaN ; }
Distance : 8

2
Tree	if ( this . cumulativeProbability () ) { return NaN ; }
Code	if ( this . cumulativeProbability () ) { return NaN ; }
Distance : 8

3
Tree	if ( this . isAlpha () ) { return NaN ; }
Code	if ( this . isAlpha () ) { return NaN ; }
Distance : 8

4
Tree	if ( ready ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( ready ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

5
Tree	if ( getTypeParameters ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( getTypeParameters ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

6
Tree	if ( getTypeParameters ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( getTypeParameters ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

7
Tree	if ( divisor . isAliasDefinition ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . isAliasDefinition ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

8
Tree	if ( controlCanExit () ) { return NaN ; }
Code	if ( controlCanExit () ) { return NaN ; }
Distance : 7

9
Tree	if ( divisor . getVertices ( useSite , false ) ) { return NaN ; }
Code	if ( divisor . getVertices ( useSite , false ) ) { return NaN ; }
Distance : 11

10
Tree	if ( this . divisor . getAllValues () ) { return NaN ; }
Code	if ( this . divisor . getAllValues () ) { return NaN ; }
Distance : 9

11
Tree	if ( isTypeCompatible () ) { return NaN ; }
Code	if ( isTypeCompatible () ) { return NaN ; }
Distance : 7

12
Tree	if ( this . isSubtype () ) { return NaN ; }
Code	if ( this . isSubtype () ) { return NaN ; }
Distance : 8

13
Tree	if ( getTypeParameters ( divisor ) ) { return NaN ; }
Code	if ( getTypeParameters ( divisor ) ) { return NaN ; }
Distance : 8

14
Tree	if ( divisor . isAssignableFrom ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . isAssignableFrom ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

15
Tree	if ( inputLength == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( inputLength == NUMBER_CONSTANT ) { return NaN ; }
Distance : 5

16
Tree	if ( ready ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( ready ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

17
Tree	if ( divisor . getInstrumentForCoverageOnly () ) { return NaN ; }
Code	if ( divisor . getInstrumentForCoverageOnly () ) { return NaN ; }
Distance : 7

18
Tree	if ( divisor . regionMatches () ) { return NaN ; }
Code	if ( divisor . regionMatches () ) { return NaN ; }
Distance : 7

19
Tree	if ( isTypeCompatible ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isTypeCompatible ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

20
Tree	if ( divisor . equalsIgnoreCase () ) { return NaN ; }
Code	if ( divisor . equalsIgnoreCase () ) { return NaN ; }
Distance : 7

21
Tree	if ( this . primitiveType . getAllValues () ) { return NaN ; }
Code	if ( this . primitiveType . getAllValues () ) { return NaN ; }
Distance : 10

22
Tree	if ( divisor . getVertices ( useSite ) ) { return NaN ; }
Code	if ( divisor . getVertices ( useSite ) ) { return NaN ; }
Distance : 9

23
Tree	if ( divisor . getVertices () ) { return NaN ; }
Code	if ( divisor . getVertices () ) { return NaN ; }
Distance : 7

24
Tree	if ( divisor . isAliasDefinition ( useSite ) ) { return NaN ; }
Code	if ( divisor . isAliasDefinition ( useSite ) ) { return NaN ; }
Distance : 9

25
Tree	if ( divisor . isAliasDefinition () ) { return NaN ; }
Code	if ( divisor . isAliasDefinition () ) { return NaN ; }
Distance : 7

26
Tree	if ( periodCount == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( periodCount == NUMBER_CONSTANT ) { return NaN ; }
Distance : 5

27
Tree	if ( _boundaries == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( _boundaries == NUMBER_CONSTANT ) { return NaN ; }
Distance : 5

28
Tree	if ( isPrimitiveWrapper ( divisor ) ) { return NaN ; }
Code	if ( isPrimitiveWrapper ( divisor ) ) { return NaN ; }
Distance : 8

29
Tree	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

30
Tree	if ( divisor . isAssignableFrom () ) { return NaN ; }
Code	if ( divisor . isAssignableFrom () ) { return NaN ; }
Distance : 7

31
Tree	if ( divisor . getVertices ( divisor ) ) { return NaN ; }
Code	if ( divisor . getVertices ( divisor ) ) { return NaN ; }
Distance : 9

32
Tree	if ( isPrimitiveWrapper () ) { return NaN ; }
Code	if ( isPrimitiveWrapper () ) { return NaN ; }
Distance : 7

33
Tree	if ( isExprConditional () ) { return NaN ; }
Code	if ( isExprConditional () ) { return NaN ; }
Distance : 7

34
Tree	if ( divisor . shouldExtract () ) { return NaN ; }
Code	if ( divisor . shouldExtract () ) { return NaN ; }
Distance : 7

35
Tree	if ( ready ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( ready ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

36
Tree	if ( divisor . isAliasDefinition ( divisor ) ) { return NaN ; }
Code	if ( divisor . isAliasDefinition ( divisor ) ) { return NaN ; }
Distance : 9

37
Tree	if ( containsNow ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( containsNow ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

38
Tree	if ( rename == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( rename == NUMBER_CONSTANT ) { return NaN ; }
Distance : 5

39
Tree	if ( isExprConditional ( divisor ) ) { return NaN ; }
Code	if ( isExprConditional ( divisor ) ) { return NaN ; }
Distance : 8

40
Tree	if ( divisor . copySelf () ) { return NaN ; }
Code	if ( divisor . copySelf () ) { return NaN ; }
Distance : 7

41
Tree	if ( this . equalsIgnoreCase () ) { return NaN ; }
Code	if ( this . equalsIgnoreCase () ) { return NaN ; }
Distance : 8

42
Tree	if ( divisor . isAssignableFrom ( CHAR_CONS ) ) { return NaN ; }
Code	if ( divisor . isAssignableFrom ( CHAR_CONS ) ) { return NaN ; }
Distance : 9

43
Tree	if ( this . renderAsPercentages . getMethod () ) { return NaN ; }
Code	if ( this . renderAsPercentages . getMethod () ) { return NaN ; }
Distance : 10

44
Tree	if ( getTypeParameters () ) { return NaN ; }
Code	if ( getTypeParameters () ) { return NaN ; }
Distance : 7

45
Tree	if ( divisor . isAssignableFrom ( useSite ) ) { return NaN ; }
Code	if ( divisor . isAssignableFrom ( useSite ) ) { return NaN ; }
Distance : 9

46
Tree	if ( divisor . getInstrumentForCoverageOnly ( CHAR_CONS ) ) { return NaN ; }
Code	if ( divisor . getInstrumentForCoverageOnly ( CHAR_CONS ) ) { return NaN ; }
Distance : 9

47
Tree	if ( deflatedEnd == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( deflatedEnd == NUMBER_CONSTANT ) { return NaN ; }
Distance : 5

48
Tree	if ( newLineStr == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( newLineStr == NUMBER_CONSTANT ) { return NaN ; }
Distance : 5

49
Tree	if ( divisor . isAssignableFrom ( divisor , false ) ) { return NaN ; }
Code	if ( divisor . isAssignableFrom ( divisor , false ) ) { return NaN ; }
Distance : 11

50
Tree	if ( divisor . shouldExtract ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . shouldExtract ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

51
Tree	if ( ready ( divisor ) ) { return NaN ; }
Code	if ( ready ( divisor ) ) { return NaN ; }
Distance : 8

52
Tree	if ( this . containsNow () ) { return NaN ; }
Code	if ( this . containsNow () ) { return NaN ; }
Distance : 8

53
Tree	if ( controlCanExit ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( controlCanExit ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

54
Tree	if ( divisor . getInstrumentForCoverageOnly ( divisor ) ) { return NaN ; }
Code	if ( divisor . getInstrumentForCoverageOnly ( divisor ) ) { return NaN ; }
Distance : 9

55
Tree	if ( isTypeCompatible ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isTypeCompatible ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

56
Tree	if ( isComingFromJDK ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isComingFromJDK ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

57
Tree	if ( this . optimizePropertyIndex . getAllValues () ) { return NaN ; }
Code	if ( this . optimizePropertyIndex . getAllValues () ) { return NaN ; }
Distance : 10

58
Tree	if ( rename ) { return NaN ; }
Code	if ( rename ) { return NaN ; }
Distance : 7

59
Tree	if ( containsNow () ) { return NaN ; }
Code	if ( containsNow () ) { return NaN ; }
Distance : 7

60
Tree	if ( divisor . regionMatches ( divisor ) ) { return NaN ; }
Code	if ( divisor . regionMatches ( divisor ) ) { return NaN ; }
Distance : 9

61
Tree	if ( divisor . copySelf ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . copySelf ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

62
Tree	if ( divisor . getVertices ( CHAR_CONS ) ) { return NaN ; }
Code	if ( divisor . getVertices ( CHAR_CONS ) ) { return NaN ; }
Distance : 9

63
Tree	if ( divisor . getVertices ( divisor , false ) ) { return NaN ; }
Code	if ( divisor . getVertices ( divisor , false ) ) { return NaN ; }
Distance : 11

64
Tree	if ( isPrimitiveWrapper ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isPrimitiveWrapper ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

65
Tree	if ( divisor . isAssignableFrom ( divisor ) ) { return NaN ; }
Code	if ( divisor . isAssignableFrom ( divisor ) ) { return NaN ; }
Distance : 9

66
Tree	if ( removed == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( removed == NUMBER_CONSTANT ) { return NaN ; }
Distance : 5

67
Tree	if ( containsNow ( divisor ) ) { return NaN ; }
Code	if ( containsNow ( divisor ) ) { return NaN ; }
Distance : 8

68
Tree	if ( divisor . isAliasDefinition ( CHAR_CONS ) ) { return NaN ; }
Code	if ( divisor . isAliasDefinition ( CHAR_CONS ) ) { return NaN ; }
Distance : 9

69
Tree	if ( divisor . regionMatches ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . regionMatches ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

70
Tree	if ( controlCanExit ( divisor ) ) { return NaN ; }
Code	if ( controlCanExit ( divisor ) ) { return NaN ; }
Distance : 8

71
Tree	if ( isExprConditional ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isExprConditional ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

72
Tree	if ( newLineStr ) { return NaN ; }
Code	if ( newLineStr ) { return NaN ; }
Distance : 7

73
Tree	if ( isTypeCompatible ( divisor ) ) { return NaN ; }
Code	if ( isTypeCompatible ( divisor ) ) { return NaN ; }
Distance : 8

74
Tree	if ( isPrimitiveWrapper ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isPrimitiveWrapper ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

75
Tree	if ( divisor . isAliasDefinition ( divisor , false ) ) { return NaN ; }
Code	if ( divisor . isAliasDefinition ( divisor , false ) ) { return NaN ; }
Distance : 11

76
Tree	if ( divisor . getInstrumentForCoverageOnly ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . getInstrumentForCoverageOnly ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

77
Tree	if ( divisor . getInstrumentForCoverageOnly ( divisor , false ) ) { return NaN ; }
Code	if ( divisor . getInstrumentForCoverageOnly ( divisor , false ) ) { return NaN ; }
Distance : 11

78
Tree	if ( divisor . equalsIgnoreCase ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . equalsIgnoreCase ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

79
Tree	if ( isExprConditional ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isExprConditional ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

80
Tree	if ( divisor . regionMatches ( CHAR_CONS ) ) { return NaN ; }
Code	if ( divisor . regionMatches ( CHAR_CONS ) ) { return NaN ; }
Distance : 9

81
Tree	if ( divisor ) { return NaN ; }
Code	if ( divisor ) { return NaN ; }
Distance : 6

82
Tree	if ( ready () ) { return NaN ; }
Code	if ( ready () ) { return NaN ; }
Distance : 7

83
Tree	if ( this . renderAsPercentages . getDaysInYearMax () ) { return NaN ; }
Code	if ( this . renderAsPercentages . getDaysInYearMax () ) { return NaN ; }
Distance : 10

84
Tree	if ( STRING_CONSTANT . getClass ( divisor ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . getClass ( divisor ) ) { return NaN ; }
Distance : 10

85
Tree	if ( divisor . shouldExtract ( CHAR_CONS ) ) { return NaN ; }
Code	if ( divisor . shouldExtract ( CHAR_CONS ) ) { return NaN ; }
Distance : 9

86
Tree	if ( isComingFromJDK ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isComingFromJDK ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

87
Tree	if ( divisor . isAliasDefinition ( useSite , false ) ) { return NaN ; }
Code	if ( divisor . isAliasDefinition ( useSite , false ) ) { return NaN ; }
Distance : 11

88
Tree	if ( STRING_CONSTANT . isAllType ( divisor ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . isAllType ( divisor ) ) { return NaN ; }
Distance : 10

89
Tree	if ( isComingFromJDK ( divisor ) ) { return NaN ; }
Code	if ( isComingFromJDK ( divisor ) ) { return NaN ; }
Distance : 8

90
Tree	if ( this . renderAsPercentages . getVertices () ) { return NaN ; }
Code	if ( this . renderAsPercentages . getVertices () ) { return NaN ; }
Distance : 10

91
Tree	if ( deflatedEnd ) { return NaN ; }
Code	if ( deflatedEnd ) { return NaN ; }
Distance : 7

92
Tree	if ( containsNow ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( containsNow ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

93
Tree	if ( isComingFromJDK ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isComingFromJDK ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 8

94
Tree	if ( divisor . getVertices ( config.tracerMode ) ) { return NaN ; }
Code	if ( divisor . getVertices ( config.tracerMode ) ) { return NaN ; }
Distance : 9

95
Tree	if ( isComingFromJDK () ) { return NaN ; }
Code	if ( isComingFromJDK () ) { return NaN ; }
Distance : 7

96
Tree	if ( STRING_CONSTANT . appendPrefix ( divisor ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . appendPrefix ( divisor ) ) { return NaN ; }
Distance : 10

97
Tree	if ( divisor . functionScope ( divisor ) ) { return NaN ; }
Code	if ( divisor . functionScope ( divisor ) ) { return NaN ; }
Distance : 9

98
Tree	if ( isTypeCompatible ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isTypeCompatible ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

99
Tree	if ( new VerifyingRecorder () . getName ( divisor ) ) { return NaN ; }
Code	if ( new VerifyingRecorder () . getName ( divisor ) ) { return NaN ; }
Distance : 12

100
Tree	if ( new Es6SyntacticScopeCreator () . getName ( divisor ) ) { return NaN ; }
Code	if ( new Es6SyntacticScopeCreator () . getName ( divisor ) ) { return NaN ; }
Distance : 12

101
Tree	if ( divisor . equalsIgnoreCase ( CHAR_CONS ) ) { return NaN ; }
Code	if ( divisor . equalsIgnoreCase ( CHAR_CONS ) ) { return NaN ; }
Distance : 9

102
Tree	if ( divisor . regionMatches ( divisor , false ) ) { return NaN ; }
Code	if ( divisor . regionMatches ( divisor , false ) ) { return NaN ; }
Distance : 11

103
Tree	if ( new AtLeastDiscrepancy () . getName ( divisor ) ) { return NaN ; }
Code	if ( new AtLeastDiscrepancy () . getName ( divisor ) ) { return NaN ; }
Distance : 12

104
Tree	if ( isPrimitiveWrapper ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isPrimitiveWrapper ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

105
Tree	if ( this . getTypeParameters () ) { return NaN ; }
Code	if ( this . getTypeParameters () ) { return NaN ; }
Distance : 8

106
Tree	if ( getTypeParameters ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( getTypeParameters ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

107
Tree	if ( ready ( options.skipNonTranspilationPasses ) ) { return NaN ; }
Code	if ( ready ( options.skipNonTranspilationPasses ) ) { return NaN ; }
Distance : 8

108
Tree	if ( removed ) { return NaN ; }
Code	if ( removed ) { return NaN ; }
Distance : 7

109
Tree	if ( this . renderAsPercentages . getAllValues () ) { return NaN ; }
Code	if ( this . renderAsPercentages . getAllValues () ) { return NaN ; }
Distance : 10

110
Tree	if ( isExprConditional ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( isExprConditional ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

111
Tree	if ( this . maximumLabelWidth . getAllValues () ) { return NaN ; }
Code	if ( this . maximumLabelWidth . getAllValues () ) { return NaN ; }
Distance : 10

112
Tree	if ( divisor . renderAsPercentages ( divisor ) ) { return NaN ; }
Code	if ( divisor . renderAsPercentages ( divisor ) ) { return NaN ; }
Distance : 9

113
Tree	if ( new VerifyingRecorder () . contains ( divisor ) ) { return NaN ; }
Code	if ( new VerifyingRecorder () . contains ( divisor ) ) { return NaN ; }
Distance : 12

114
Tree	if ( new AtLeastDiscrepancy () . contains ( divisor ) ) { return NaN ; }
Code	if ( new AtLeastDiscrepancy () . contains ( divisor ) ) { return NaN ; }
Distance : 12

115
Tree	if ( divisor . getVertices ( STRING_CONSTANT ) ) { return NaN ; }
Code	if ( divisor . getVertices ( STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

116
Tree	if ( isComingFromJDK ( this , divisor ) ) { return NaN ; }
Code	if ( isComingFromJDK ( this , divisor ) ) { return NaN ; }
Distance : 10

117
Tree	if ( divisor . isAliasDefinition ( JSTypeNative.FUNCTION_INSTANCE_TYPE ) ) { return NaN ; }
Code	if ( divisor . isAliasDefinition ( JSTypeNative.FUNCTION_INSTANCE_TYPE ) ) { return NaN ; }
Distance : 9

118
Tree	if ( divisor . isAssignableFrom ( FeatureSet.ES6 ) ) { return NaN ; }
Code	if ( divisor . isAssignableFrom ( FeatureSet.ES6 ) ) { return NaN ; }
Distance : 9

119
Tree	if ( isExprConditional ( options.skipNonTranspilationPasses ) ) { return NaN ; }
Code	if ( isExprConditional ( options.skipNonTranspilationPasses ) ) { return NaN ; }
Distance : 8

120
Tree	if ( divisor . isAliasDefinition ( config.tracerMode ) ) { return NaN ; }
Code	if ( divisor . isAliasDefinition ( config.tracerMode ) ) { return NaN ; }
Distance : 9

121
Tree	if ( controlCanExit ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( controlCanExit ( STRING_CONSTANT , STRING_CONSTANT ) ) { return NaN ; }
Distance : 10

122
Tree	if ( divisor . functionScope ( useSite ) ) { return NaN ; }
Code	if ( divisor . functionScope ( useSite ) ) { return NaN ; }
Distance : 9

123
Tree	if ( STRING_CONSTANT . equalsIgnoreCase ( divisor ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . equalsIgnoreCase ( divisor ) ) { return NaN ; }
Distance : 10

124
Tree	if ( divisor . isAssignableFrom ( config.tracerMode ) ) { return NaN ; }
Code	if ( divisor . isAssignableFrom ( config.tracerMode ) ) { return NaN ; }
Distance : 9

125
Tree	if ( new VerifyingRecorder () . length ( divisor ) ) { return NaN ; }
Code	if ( new VerifyingRecorder () . length ( divisor ) ) { return NaN ; }
Distance : 12

126
Tree	if ( ready ( isNotNull () ) ) { return NaN ; }
Code	if ( ready ( isNotNull () ) ) { return NaN ; }
Distance : 9

127
Tree	if ( divisor . copySelf ( CHAR_CONS ) ) { return NaN ; }
Code	if ( divisor . copySelf ( CHAR_CONS ) ) { return NaN ; }
Distance : 9

128
Tree	if ( divisor . isAliasDefinition ( FeatureSet.ES6 ) ) { return NaN ; }
Code	if ( divisor . isAliasDefinition ( FeatureSet.ES6 ) ) { return NaN ; }
Distance : 9

129
Tree	if ( ready ( onlyThoseClasses () ) ) { return NaN ; }
Code	if ( ready ( onlyThoseClasses () ) ) { return NaN ; }
Distance : 9

130
Tree	if ( ready ( getSlope () ) ) { return NaN ; }
Code	if ( ready ( getSlope () ) ) { return NaN ; }
Distance : 9

131
Tree	if ( containsNow ( this , divisor ) ) { return NaN ; }
Code	if ( containsNow ( this , divisor ) ) { return NaN ; }
Distance : 10

132
Tree	if ( STRING_CONSTANT . shouldExtract ( divisor ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . shouldExtract ( divisor ) ) { return NaN ; }
Distance : 10

133
Tree	if ( ready ( this , divisor ) ) { return NaN ; }
Code	if ( ready ( this , divisor ) ) { return NaN ; }
Distance : 10

134
Tree	if ( STRING_CONSTANT . isTypeMockable ( divisor ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . isTypeMockable ( divisor ) ) { return NaN ; }
Distance : 10

135
Tree	if ( STRING_CONSTANT . hasHaltingErrors ( divisor ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . hasHaltingErrors ( divisor ) ) { return NaN ; }
Distance : 10

136
Tree	if ( isPrimitiveWrapper ( this , divisor ) ) { return NaN ; }
Code	if ( isPrimitiveWrapper ( this , divisor ) ) { return NaN ; }
Distance : 10

137
Tree	if ( STRING_CONSTANT . getText ( divisor ) ) { return NaN ; }
Code	if ( STRING_CONSTANT . getText ( divisor ) ) { return NaN ; }
Distance : 10

138
Tree	if ( isTypeCompatible ( this , divisor ) ) { return NaN ; }
Code	if ( isTypeCompatible ( this , divisor ) ) { return NaN ; }
Distance : 10

139
Tree	if ( new Es6SyntacticScopeCreator () . length ( divisor ) ) { return NaN ; }
Code	if ( new Es6SyntacticScopeCreator () . length ( divisor ) ) { return NaN ; }
Distance : 12

140
Tree	if ( divisor . isAssignableFrom ( useSite , false ) ) { return NaN ; }
Code	if ( divisor . isAssignableFrom ( useSite , false ) ) { return NaN ; }
Distance : 11

141
Tree	if ( divisor . rawThat ( divisor ) ) { return NaN ; }
Code	if ( divisor . rawThat ( divisor ) ) { return NaN ; }
Distance : 9

142
Tree	if ( getTypeParameters ( this , divisor ) ) { return NaN ; }
Code	if ( getTypeParameters ( this , divisor ) ) { return NaN ; }
Distance : 10

143
Tree	if ( isPrimitiveWrapper ( options.skipNonTranspilationPasses ) ) { return NaN ; }
Code	if ( isPrimitiveWrapper ( options.skipNonTranspilationPasses ) ) { return NaN ; }
Distance : 8

144
Tree	if ( inputLength ) { return NaN ; }
Code	if ( inputLength ) { return NaN ; }
Distance : 7

145
Tree	if ( containsNow ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( containsNow ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

146
Tree	if ( _boundaries ) { return NaN ; }
Code	if ( _boundaries ) { return NaN ; }
Distance : 7

147
Tree	if ( isExprConditional ( this , divisor ) ) { return NaN ; }
Code	if ( isExprConditional ( this , divisor ) ) { return NaN ; }
Distance : 10

148
Tree	if ( divisor . getVertices ( JSTypeNative.FUNCTION_INSTANCE_TYPE ) ) { return NaN ; }
Code	if ( divisor . getVertices ( JSTypeNative.FUNCTION_INSTANCE_TYPE ) ) { return NaN ; }
Distance : 9

149
Tree	if ( isTypeCompatible () ) { return this . NaN . printExterns ; }
Code	if ( isTypeCompatible () ) { return this . NaN . printExterns ; }
Distance : 7

150
Tree	if ( isTypeCompatible ( options.skipNonTranspilationPasses ) ) { return NaN ; }
Code	if ( isTypeCompatible ( options.skipNonTranspilationPasses ) ) { return NaN ; }
Distance : 8

151
Tree	if ( periodCount ) { return NaN ; }
Code	if ( periodCount ) { return NaN ; }
Distance : 7

152
Tree	if ( divisor . getVertices ( FeatureSet.ES6 ) ) { return NaN ; }
Code	if ( divisor . getVertices ( FeatureSet.ES6 ) ) { return NaN ; }
Distance : 9

153
Tree	if ( isTypeCompatible ( getSlope () ) ) { return NaN ; }
Code	if ( isTypeCompatible ( getSlope () ) ) { return NaN ; }
Distance : 9

154
Tree	if ( ready () ) { return this . NaN . printExterns ; }
Code	if ( ready () ) { return this . NaN . printExterns ; }
Distance : 7

155
Tree	if ( controlCanExit ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Code	if ( controlCanExit ( divisor , STRING_CONSTANT ) ) { return NaN ; }
Distance : 9

156
Tree	if ( new AtLeastDiscrepancy () . length ( divisor ) ) { return NaN ; }
Code	if ( new AtLeastDiscrepancy () . length ( divisor ) ) { return NaN ; }
Distance : 12

157
Tree	if ( isTypeCompatible ( isNotNull () ) ) { return NaN ; }
Code	if ( isTypeCompatible ( isNotNull () ) ) { return NaN ; }
Distance : 9

158
Tree	if ( ready ( and () ) ) { return NaN ; }
Code	if ( ready ( and () ) ) { return NaN ; }
Distance : 9

159
Tree	if ( containsNow ( options.skipNonTranspilationPasses ) ) { return NaN ; }
Code	if ( containsNow ( options.skipNonTranspilationPasses ) ) { return NaN ; }
Distance : 8

160
Tree	if ( isTypeCompatible ( and () ) ) { return NaN ; }
Code	if ( isTypeCompatible ( and () ) ) { return NaN ; }
Distance : 9

161
Tree	if ( ready () ) { return this . printExterns . printExterns ; }
Code	if ( ready () ) { return this . printExterns . printExterns ; }
Distance : 8

162
Tree	if ( isComingFromJDK ( options.skipNonTranspilationPasses ) ) { return NaN ; }
Code	if ( isComingFromJDK ( options.skipNonTranspilationPasses ) ) { return NaN ; }
Distance : 8

163
Tree	if ( isTypeCompatible ( onlyThoseClasses () ) ) { return NaN ; }
Code	if ( isTypeCompatible ( onlyThoseClasses () ) ) { return NaN ; }
Distance : 9

164
Tree	if ( getTypeParameters ( options.skipNonTranspilationPasses ) ) { return NaN ; }
Code	if ( getTypeParameters ( options.skipNonTranspilationPasses ) ) { return NaN ; }
Distance : 8

165
Tree	if ( divisor . candidateFieldToBeInjected ( divisor ) ) { return NaN ; }
Code	if ( divisor . candidateFieldToBeInjected ( divisor ) ) { return NaN ; }
Distance : 9

166
Tree	if ( ready ( this , actualArgs ) ) { return NaN ; }
Code	if ( ready ( this , actualArgs ) ) { return NaN ; }
Distance : 10

167
Tree	if ( divisor . STRING ( divisor ) ) { return NaN ; }
Code	if ( divisor . STRING ( divisor ) ) { return NaN ; }
Distance : 9

168
Tree	if ( divisor . osNamePrefix ( divisor ) ) { return NaN ; }
Code	if ( divisor . osNamePrefix ( divisor ) ) { return NaN ; }
Distance : 9

169
Tree	if ( new AtLeastDiscrepancy ( NUMBER_CONSTANT ) . getTopDefiningInterface ( NaN ) ) { return NaN ; }
Code	if ( new AtLeastDiscrepancy ( NUMBER_CONSTANT ) . getTopDefiningInterface ( NaN ) ) { return NaN ; }
Distance : 12

170
Tree	if ( ready ( config.tracerMode ) ) { return NaN ; }
Code	if ( ready ( config.tracerMode ) ) { return NaN ; }
Distance : 8

171
Tree	if ( ready () ) { return this . NaN . TRUTHY ; }
Code	if ( ready () ) { return this . NaN . TRUTHY ; }
Distance : 7

172
Tree	if ( ready () ) { return this . tickLabelsVisible . printExterns ; }
Code	if ( ready () ) { return this . tickLabelsVisible . printExterns ; }
Distance : 8

173
Tree	if ( new VerifyingRecorder ( NUMBER_CONSTANT ) . setSeed ( NaN ) ) { return NaN ; }
Code	if ( new VerifyingRecorder ( NUMBER_CONSTANT ) . setSeed ( NaN ) ) { return NaN ; }
Distance : 12

174
Tree	if ( isTypeCompatible () ) { return this . NaN . TRUTHY ; }
Code	if ( isTypeCompatible () ) { return this . NaN . TRUTHY ; }
Distance : 7

175
Tree	if ( divisor . rawThat ( useSite ) ) { return NaN ; }
Code	if ( divisor . rawThat ( useSite ) ) { return NaN ; }
Distance : 9

176
Tree	if ( new VerifyingRecorder ( NUMBER_CONSTANT ) . that ( NaN ) ) { return NaN ; }
Code	if ( new VerifyingRecorder ( NUMBER_CONSTANT ) . that ( NaN ) ) { return NaN ; }
Distance : 12

177
Tree	if ( new VerifyingRecorder ( divisor ) . has ( sampleSize ) ) { return NaN ; }
Code	if ( new VerifyingRecorder ( divisor ) . has ( sampleSize ) ) { return NaN ; }
Distance : 13

178
Tree	if ( new Es6SyntacticScopeCreator ( divisor ) . has ( sampleSize ) ) { return NaN ; }
Code	if ( new Es6SyntacticScopeCreator ( divisor ) . has ( sampleSize ) ) { return NaN ; }
Distance : 13

179
Tree	if ( divisor . getVertices ( onlyThoseClasses () , hasFirstMethodInStackTrace ( textLength ) ) ) { return NaN ; }
Code	if ( divisor . getVertices ( onlyThoseClasses () , hasFirstMethodInStackTrace ( textLength ) ) ) { return NaN ; }
Distance : 15

180
Tree	if ( new AtLeastDiscrepancy ( divisor ) . has ( temp ) ) { return NaN ; }
Code	if ( new AtLeastDiscrepancy ( divisor ) . has ( temp ) ) { return NaN ; }
Distance : 13

181
Tree	if ( new VerifyingRecorder ( NUMBER_CONSTANT ) . getTopDefiningInterface ( NaN ) ) { return NaN ; }
Code	if ( new VerifyingRecorder ( NUMBER_CONSTANT ) . getTopDefiningInterface ( NaN ) ) { return NaN ; }
Distance : 12

182
Tree	if ( divisor . isAliasDefinition ( onlyThoseClasses () , hasFirstMethodInStackTrace ( textLength ) ) ) { return NaN ; }
Code	if ( divisor . isAliasDefinition ( onlyThoseClasses () , hasFirstMethodInStackTrace ( textLength ) ) ) { return NaN ; }
Distance : 15

183
Tree	if ( new AtLeastDiscrepancy ( divisor ) . has ( sampleSize ) ) { return NaN ; }
Code	if ( new AtLeastDiscrepancy ( divisor ) . has ( sampleSize ) ) { return NaN ; }
Distance : 13

184
Tree	if ( new VerifyingRecorder ( divisor ) . has ( NaN ) ) { return NaN ; }
Code	if ( new VerifyingRecorder ( divisor ) . has ( NaN ) ) { return NaN ; }
Distance : 13

185
Tree	if ( new AtLeastDiscrepancy ( NUMBER_CONSTANT ) . that ( NaN ) ) { return NaN ; }
Code	if ( new AtLeastDiscrepancy ( NUMBER_CONSTANT ) . that ( NaN ) ) { return NaN ; }
Distance : 12

186
Tree	if ( new VerifyingRecorder ( divisor ) . has ( temp ) ) { return NaN ; }
Code	if ( new VerifyingRecorder ( divisor ) . has ( temp ) ) { return NaN ; }
Distance : 13

187
Tree	if ( divisor . getVertices ( and () , hasFirstMethodInStackTrace ( ES6 ) ) ) { return NaN ; }
Code	if ( divisor . getVertices ( and () , hasFirstMethodInStackTrace ( ES6 ) ) ) { return NaN ; }
Distance : 15

188
Tree	if ( isPrimitiveWrapper () ) { return this . NaN . printExterns ; }
Code	if ( isPrimitiveWrapper () ) { return this . NaN . printExterns ; }
Distance : 7

189
Tree	if ( divisor . getVertices ( onlyThoseClasses () , hasFirstMethodInStackTrace ( ES6 ) ) ) { return NaN ; }
Code	if ( divisor . getVertices ( onlyThoseClasses () , hasFirstMethodInStackTrace ( ES6 ) ) ) { return NaN ; }
Distance : 15

190
Tree	if ( isExprConditional () ) { return this . NaN . printExterns ; }
Code	if ( isExprConditional () ) { return this . NaN . printExterns ; }
Distance : 7

191
Tree	if ( new VerifyingRecorder ( divisor ) . that ( sampleSize ) ) { return NaN ; }
Code	if ( new VerifyingRecorder ( divisor ) . that ( sampleSize ) ) { return NaN ; }
Distance : 13

192
Tree	if ( new Converter ( divisor ) . has ( sampleSize ) ) { return NaN ; }
Code	if ( new Converter ( divisor ) . has ( sampleSize ) ) { return NaN ; }
Distance : 13

193
Tree	if ( new Converter ( NUMBER_CONSTANT ) . that ( NaN ) ) { return NaN ; }
Code	if ( new Converter ( NUMBER_CONSTANT ) . that ( NaN ) ) { return NaN ; }
Distance : 12

194
Tree	if ( new Es6SyntacticScopeCreator ( NUMBER_CONSTANT ) . that ( NaN ) ) { return NaN ; }
Code	if ( new Es6SyntacticScopeCreator ( NUMBER_CONSTANT ) . that ( NaN ) ) { return NaN ; }
Distance : 12

195
Tree	if ( divisor . isAssignableFrom ( onlyThoseClasses () , hasFirstMethodInStackTrace ( ES6 ) ) ) { return NaN ; }
Code	if ( divisor . isAssignableFrom ( onlyThoseClasses () , hasFirstMethodInStackTrace ( ES6 ) ) ) { return NaN ; }
Distance : 15

196
Tree	if ( divisor . isAliasDefinition ( and () , hasFirstMethodInStackTrace ( ES6 ) ) ) { return NaN ; }
Code	if ( divisor . isAliasDefinition ( and () , hasFirstMethodInStackTrace ( ES6 ) ) ) { return NaN ; }
Distance : 15

197
Tree	if ( divisor . isAliasDefinition ( onlyThoseClasses () , hasFirstMethodInStackTrace ( ES6 ) ) ) { return NaN ; }
Code	if ( divisor . isAliasDefinition ( onlyThoseClasses () , hasFirstMethodInStackTrace ( ES6 ) ) ) { return NaN ; }
Distance : 15

198
Tree	if ( new VerifyingRecorder ( NUMBER_CONSTANT ) . has ( NaN ) ) { return NaN ; }
Code	if ( new VerifyingRecorder ( NUMBER_CONSTANT ) . has ( NaN ) ) { return NaN ; }
Distance : 12

199
Tree	if ( divisor . getVertices ( and () , hasFirstMethodInStackTrace ( textLength ) ) ) { return NaN ; }
Code	if ( divisor . getVertices ( and () , hasFirstMethodInStackTrace ( textLength ) ) ) { return NaN ; }
Distance : 15

========================================================================


========================================================================
Example Number: 68
Parent Code is: 
if ( divisor == NUMBER_CONSTANT ) { return isZero ? NaN : INF ; }
-------------------------------------------------------------------------------
Child code is: 
if ( divisor == NUMBER_CONSTANT ) { return NaN ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=divisor}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (16 (800{val=isZero}) (233{val=?}) (800{val=NaN}) (226{val=:}) (800{val=INF})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=divisor}) (236{val===}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=NaN}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/46/parent/src_main_java_org_apache_commons_math_complex_Complex.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( divisor == NUMBER_CONSTANT ) { throw JAVA_1_8 . createIllegalArgumentException ( LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { throw JAVA_1_8 . createIllegalArgumentException ( LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Distance : 9

1
Tree	if ( rename == NUMBER_CONSTANT ) { return JAVA_1_8 ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( rename == NUMBER_CONSTANT ) { return JAVA_1_8 ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 6

2
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( Es6ModuleTranspilation.TO_COMMON_JS_LIKE_MODULES , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( Es6ModuleTranspilation.TO_COMMON_JS_LIKE_MODULES , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Distance : 8

3
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( Es6ModuleTranspilation.TO_COMMON_JS_LIKE_MODULES , Es6ToEs3Util.CANNOT_CONVERT_YET ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( Es6ModuleTranspilation.TO_COMMON_JS_LIKE_MODULES , Es6ToEs3Util.CANNOT_CONVERT_YET ) ; }
Distance : 8

4
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping () ? LanguageMode.TYPESCRIPT : FunctionFlavor.NORMAL ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping () ? LanguageMode.TYPESCRIPT : FunctionFlavor.NORMAL ; }
Distance : 8

5
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping () ? Boolean.FALSE : FunctionFlavor.NORMAL ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping () ? Boolean.FALSE : FunctionFlavor.NORMAL ; }
Distance : 8

6
Tree	if ( divisor == NUMBER_CONSTANT ) { throw JAVA_1_8 . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_STANDARD_DEVIATION , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { throw JAVA_1_8 . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_STANDARD_DEVIATION , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Distance : 9

7
Tree	if ( rename == NUMBER_CONSTANT ) { return JAVA_1_8 ; }
Code	if ( rename == NUMBER_CONSTANT ) { return JAVA_1_8 ; }
Distance : 2

8
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? this . that () : noMatchFound ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? this . that () : noMatchFound ; }
Distance : 8

9
Tree	if ( divisor == NUMBER_CONSTANT ) { return StringUtils.EMPTY ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return StringUtils.EMPTY ; }
Distance : 1

10
Tree	if ( divisor == NUMBER_CONSTANT ) { return DecompositionType.UNDECOMPOSABLE ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return DecompositionType.UNDECOMPOSABLE ; }
Distance : 1

11
Tree	if ( divisor == NUMBER_CONSTANT ) { return null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return null ; }
Distance : 1

12
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? uniqueId . of () : expectedType ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? uniqueId . of () : expectedType ; }
Distance : 8

13
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? this . that () : ADDITIVE_MODE ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? this . that () : ADDITIVE_MODE ; }
Distance : 8

14
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 5

15
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? this . that () : sampleSize ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? this . that () : sampleSize ; }
Distance : 8

16
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 5

17
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? INFINITE_WINDOW . of () : expectedType ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? INFINITE_WINDOW . of () : expectedType ; }
Distance : 8

18
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ; }
Distance : 1

19
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? this . that () : INFINITE_WINDOW ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? this . that () : INFINITE_WINDOW ; }
Distance : 8

20
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? this . that () : roundUp ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? this . that () : roundUp ; }
Distance : 8

21
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? NaN . of () : expectedType ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? NaN . of () : expectedType ; }
Distance : 7

22
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? uniqueId . latest () : expectedType ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? uniqueId . latest () : expectedType ; }
Distance : 8

23
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? INFINITE_WINDOW . latest () : expectedType ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? INFINITE_WINDOW . latest () : expectedType ; }
Distance : 8

24
Tree	if ( newLineStr == NUMBER_CONSTANT ) { return null ; }
Code	if ( newLineStr == NUMBER_CONSTANT ) { return null ; }
Distance : 2

25
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? uniqueId . of () : remainingRegion ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? uniqueId . of () : remainingRegion ; }
Distance : 8

26
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? NaN . latest () : expectedType ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? NaN . latest () : expectedType ; }
Distance : 7

27
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? this . that () : threads ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? this . that () : threads ; }
Distance : 8

28
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? this . that () : uniqueId ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? this . that () : uniqueId ; }
Distance : 8

29
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? this . that () : incrementalCheckMode ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? this . that () : incrementalCheckMode ; }
Distance : 8

30
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? uniqueId . of () : osVersion ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? uniqueId . of () : osVersion ; }
Distance : 8

31
Tree	if ( rename == NUMBER_CONSTANT ) { return null ; }
Code	if ( rename == NUMBER_CONSTANT ) { return null ; }
Distance : 2

32
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( Es6ModuleTranspilation.TO_COMMON_JS_LIKE_MODULES , PropertyCollapseLevel.ALL ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( Es6ModuleTranspilation.TO_COMMON_JS_LIKE_MODULES , PropertyCollapseLevel.ALL ) ; }
Distance : 8

33
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( FeatureSet.ES6 , Es6ToEs3Util.CANNOT_CONVERT_YET ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( FeatureSet.ES6 , Es6ToEs3Util.CANNOT_CONVERT_YET ) ; }
Distance : 8

34
Tree	if ( divisor == NUMBER_CONSTANT ) { return Primitives ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return Primitives ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 5

35
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( this . returnZero () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , osVersion ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( this . returnZero () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , osVersion ) ; }
Distance : 13

36
Tree	if ( divisor == NUMBER_CONSTANT ) { throw JAVA_1_8 . createIllegalArgumentException ( config.tracerMode , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { throw JAVA_1_8 . createIllegalArgumentException ( config.tracerMode , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Distance : 9

37
Tree	if ( divisor == NUMBER_CONSTANT ) { return allowLooseMatches ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return allowLooseMatches ; }
Distance : 1

38
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( config.tracerMode , PropertyCollapseLevel.ALL ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( config.tracerMode , PropertyCollapseLevel.ALL ) ; }
Distance : 8

39
Tree	if ( divisor == NUMBER_CONSTANT ) { return MOCKITO_PROXY_MARKER ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return MOCKITO_PROXY_MARKER ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 5

40
Tree	if ( _boundaries == NUMBER_CONSTANT ) { return null ; }
Code	if ( _boundaries == NUMBER_CONSTANT ) { return null ; }
Distance : 2

41
Tree	if ( newLineStr == NUMBER_CONSTANT ) { return JAVA_1_8 ; }
Code	if ( newLineStr == NUMBER_CONSTANT ) { return JAVA_1_8 ; }
Distance : 2

42
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( this . returnZero () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , initialArray ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( this . returnZero () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , initialArray ) ; }
Distance : 13

43
Tree	if ( _boundaries == NUMBER_CONSTANT ) { return JAVA_1_8 ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( _boundaries == NUMBER_CONSTANT ) { return JAVA_1_8 ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 6

44
Tree	if ( rename == NUMBER_CONSTANT ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( rename == NUMBER_CONSTANT ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 6

45
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping () ? PropertyCollapseLevel.NONE : FunctionFlavor.NORMAL ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping () ? PropertyCollapseLevel.NONE : FunctionFlavor.NORMAL ; }
Distance : 8

46
Tree	if ( divisor == NUMBER_CONSTANT ) { return DecompositionType.DECOMPOSABLE ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return DecompositionType.DECOMPOSABLE ; }
Distance : 1

47
Tree	if ( deflatedEnd == NUMBER_CONSTANT ) { return null ; }
Code	if ( deflatedEnd == NUMBER_CONSTANT ) { return null ; }
Distance : 2

48
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isModifiableClass () ? CHAR_CONS : null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isModifiableClass () ? CHAR_CONS : null ; }
Distance : 8

49
Tree	if ( removed == NUMBER_CONSTANT ) { return null ; }
Code	if ( removed == NUMBER_CONSTANT ) { return null ; }
Distance : 2

50
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? IncrementalCheckMode.OFF . getBeta ( STRING_CONSTANT ) : superEquals ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? IncrementalCheckMode.OFF . getBeta ( STRING_CONSTANT ) : superEquals ; }
Distance : 10

51
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? this . printExterns . withLoose () : transactions ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? this . printExterns . withLoose () : transactions ; }
Distance : 10

52
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( getRemoveUnusedCode () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , wzval ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( getRemoveUnusedCode () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , wzval ) ; }
Distance : 11

53
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( this . returnZero () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , lastTime ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( this . returnZero () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , lastTime ) ; }
Distance : 13

54
Tree	if ( deflatedEnd == NUMBER_CONSTANT ) { return JAVA_1_8 ; }
Code	if ( deflatedEnd == NUMBER_CONSTANT ) { return JAVA_1_8 ; }
Distance : 2

55
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeOf () ? CHAR_CONS : null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeOf () ? CHAR_CONS : null ; }
Distance : 8

56
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? this . uniqueId . withLoose () : expectedType ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? this . uniqueId . withLoose () : expectedType ; }
Distance : 10

57
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( isNamedType () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , wzval ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( isNamedType () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , wzval ) ; }
Distance : 11

58
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : FunctionFlavor.NORMAL ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : FunctionFlavor.NORMAL ; }
Distance : 5

59
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( getOutputFeatureSet () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , osVersion ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( getOutputFeatureSet () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , osVersion ) ; }
Distance : 11

60
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? getOwnerFunction () : INFINITE_WINDOW ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? getOwnerFunction () : INFINITE_WINDOW ; }
Distance : 6

61
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? containsNow () : INFINITE_WINDOW ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? containsNow () : INFINITE_WINDOW ; }
Distance : 6

62
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? isNamedType () : uniqueId ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? isNamedType () : uniqueId ; }
Distance : 6

63
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? IncrementalCheckMode.OFF . getTopDefiningInterface () : INFINITE_WINDOW ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? IncrementalCheckMode.OFF . getTopDefiningInterface () : INFINITE_WINDOW ; }
Distance : 8

64
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? isNamedType () : INFINITE_WINDOW ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? isNamedType () : INFINITE_WINDOW ; }
Distance : 6

65
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? interceptors.target . getTopDefiningInterface () : INFINITE_WINDOW ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? interceptors.target . getTopDefiningInterface () : INFINITE_WINDOW ; }
Distance : 8

66
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? this . printExterns . getBeta () : expectedType ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? this . printExterns . getBeta () : expectedType ; }
Distance : 10

67
Tree	if ( newLineStr == NUMBER_CONSTANT ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( newLineStr == NUMBER_CONSTANT ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 6

68
Tree	if ( divisor == NUMBER_CONSTANT ) { return allowLooseMatches ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return allowLooseMatches ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 5

69
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping () ? startPoint.length : FunctionFlavor.NORMAL ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping () ? startPoint.length : FunctionFlavor.NORMAL ; }
Distance : 8

70
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping () ? CHAR_CONS : null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping () ? CHAR_CONS : null ; }
Distance : 8

71
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( getRemoveUnusedCode () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , expectedType ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( getRemoveUnusedCode () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , expectedType ) ; }
Distance : 11

72
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? interceptors.target : FunctionFlavor.NORMAL ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? interceptors.target : FunctionFlavor.NORMAL ; }
Distance : 5

73
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( config.tracerMode , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( config.tracerMode , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Distance : 8

74
Tree	if ( inputLength == NUMBER_CONSTANT ) { return null ; }
Code	if ( inputLength == NUMBER_CONSTANT ) { return null ; }
Distance : 2

75
Tree	if ( divisor == NUMBER_CONSTANT ) { return MOCKITO_PROXY_MARKER ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return MOCKITO_PROXY_MARKER ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 5

76
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? interceptors.target : IncrementalCheckMode.GENERATE_IJS ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? interceptors.target : IncrementalCheckMode.GENERATE_IJS ; }
Distance : 5

77
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? startConfiguration.length . getTopDefiningInterface () : INFINITE_WINDOW ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? startConfiguration.length . getTopDefiningInterface () : INFINITE_WINDOW ; }
Distance : 8

78
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( config.tracerMode , Es6ToEs3Util.CANNOT_CONVERT_YET ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( config.tracerMode , Es6ToEs3Util.CANNOT_CONVERT_YET ) ; }
Distance : 8

79
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? startPoint.length . getTopDefiningInterface () : INFINITE_WINDOW ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? startPoint.length . getTopDefiningInterface () : INFINITE_WINDOW ; }
Distance : 8

80
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : IncrementalCheckMode.GENERATE_IJS ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : IncrementalCheckMode.GENERATE_IJS ; }
Distance : 5

81
Tree	if ( mockCalculator == NUMBER_CONSTANT ) { return null ; }
Code	if ( mockCalculator == NUMBER_CONSTANT ) { return null ; }
Distance : 2

82
Tree	if ( _boundaries == NUMBER_CONSTANT ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( _boundaries == NUMBER_CONSTANT ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 6

83
Tree	if ( divisor == NUMBER_CONSTANT ) { return MOCKITO_PROXY_MARKER ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return MOCKITO_PROXY_MARKER ; }
Distance : 1

84
Tree	if ( divisor == NUMBER_CONSTANT ) { return Primitives ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return Primitives ; }
Distance : 1

85
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( this . getMethod () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , initialArray ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( this . getMethod () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , initialArray ) ; }
Distance : 13

86
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( this . returnZero () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , subtypingMode ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( this . returnZero () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , subtypingMode ) ; }
Distance : 13

87
Tree	if ( divisor == NUMBER_CONSTANT ) { return CallSiteType.DECOMPOSABLE_EXPRESSION ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return CallSiteType.DECOMPOSABLE_EXPRESSION ; }
Distance : 1

88
Tree	if ( divisor == NUMBER_CONSTANT ) { return allowLooseMatches ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return allowLooseMatches ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 5

89
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? interceptors.target . getBeta () : INFINITE_WINDOW ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? interceptors.target . getBeta () : INFINITE_WINDOW ; }
Distance : 8

90
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( this . returnZero () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , expectedType ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( this . returnZero () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , expectedType ) ; }
Distance : 13

91
Tree	if ( divisor == NUMBER_CONSTANT ) { return Answers.RETURNS_DEFAULTS ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return Answers.RETURNS_DEFAULTS ; }
Distance : 1

92
Tree	if ( divisor == NUMBER_CONSTANT ) { return Primitives ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return Primitives ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 5

93
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? uniqueId . of ( CHAR_CONS ) : osVersion ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? uniqueId . of ( CHAR_CONS ) : osVersion ; }
Distance : 10

94
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . primitiveTypeOf () ? CHAR_CONS : null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . primitiveTypeOf () ? CHAR_CONS : null ; }
Distance : 8

95
Tree	if ( divisor == NUMBER_CONSTANT ) { throw JAVA_1_8 . createIllegalArgumentException ( LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY , Es6ToEs3Util.CANNOT_CONVERT_YET ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { throw JAVA_1_8 . createIllegalArgumentException ( LocalizedFormats.CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY , Es6ToEs3Util.CANNOT_CONVERT_YET ) ; }
Distance : 9

96
Tree	if ( divisor == NUMBER_CONSTANT ) { return ConformanceResult.POSSIBLE_VIOLATION_DUE_TO_LOOSE_TYPES ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ConformanceResult.POSSIBLE_VIOLATION_DUE_TO_LOOSE_TYPES ; }
Distance : 1

97
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? startConfiguration.length : FunctionFlavor.NORMAL ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? startConfiguration.length : FunctionFlavor.NORMAL ; }
Distance : 5

98
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping () ? Boolean.FALSE : IncrementalCheckMode.GENERATE_IJS ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping () ? Boolean.FALSE : IncrementalCheckMode.GENERATE_IJS ; }
Distance : 8

99
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? startPoint.length : IncrementalCheckMode.GENERATE_IJS ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? startPoint.length : IncrementalCheckMode.GENERATE_IJS ; }
Distance : 5

100
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . getBeta () ? CHAR_CONS : null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . getBeta () ? CHAR_CONS : null ; }
Distance : 8

101
Tree	if ( divisor == NUMBER_CONSTANT ) { throw JAVA_1_8 . createIllegalArgumentException ( LocalizedFormats.NEGATIVE_NUMBER_OF_SUCCESSES , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { throw JAVA_1_8 . createIllegalArgumentException ( LocalizedFormats.NEGATIVE_NUMBER_OF_SUCCESSES , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Distance : 9

102
Tree	if ( deflatedEnd == NUMBER_CONSTANT ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( deflatedEnd == NUMBER_CONSTANT ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 6

103
Tree	if ( divisor == NUMBER_CONSTANT ) { return MOCKITO_PROXY_MARKER . isSubtypeWithoutStructuralTyping () ? CHAR_CONS : null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return MOCKITO_PROXY_MARKER . isSubtypeWithoutStructuralTyping () ? CHAR_CONS : null ; }
Distance : 8

104
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( this . returnZero () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , wzval ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( this . returnZero () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , wzval ) ; }
Distance : 13

105
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( this . getMethod () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , wzval ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( this . getMethod () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , wzval ) ; }
Distance : 13

106
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping () ? startPoint.length : IncrementalCheckMode.GENERATE_IJS ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping () ? startPoint.length : IncrementalCheckMode.GENERATE_IJS ; }
Distance : 8

107
Tree	if ( divisor == NUMBER_CONSTANT ) { throw JAVA_1_8 . createIllegalArgumentException ( LocalizedFormats.POWER_NEGATIVE_PARAMETERS , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { throw JAVA_1_8 . createIllegalArgumentException ( LocalizedFormats.POWER_NEGATIVE_PARAMETERS , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Distance : 9

108
Tree	if ( divisor == NUMBER_CONSTANT ) { return Format.TYPED ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return Format.TYPED ; }
Distance : 1

109
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? INFINITE_WINDOW . of ( CHAR_CONS ) : osVersion ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? INFINITE_WINDOW . of ( CHAR_CONS ) : osVersion ; }
Distance : 10

110
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? isSubtypeWithoutStructuralTyping () : INFINITE_WINDOW ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? isSubtypeWithoutStructuralTyping () : INFINITE_WINDOW ; }
Distance : 6

111
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? INFINITE_WINDOW . of ( STRING_CONSTANT ) : superEquals ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? INFINITE_WINDOW . of ( STRING_CONSTANT ) : superEquals ; }
Distance : 10

112
Tree	if ( divisor == NUMBER_CONSTANT ) { throw JAVA_1_8 . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_STANDARD_DEVIATION , Es6ToEs3Util.CANNOT_CONVERT_YET ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { throw JAVA_1_8 . createIllegalArgumentException ( LocalizedFormats.NOT_POSITIVE_STANDARD_DEVIATION , Es6ToEs3Util.CANNOT_CONVERT_YET ) ; }
Distance : 9

113
Tree	if ( deflatedEnd == NUMBER_CONSTANT ) { return JAVA_1_8 ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( deflatedEnd == NUMBER_CONSTANT ) { return JAVA_1_8 ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 6

114
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . getTopDefiningInterface () ? CHAR_CONS : null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . getTopDefiningInterface () ? CHAR_CONS : null ; }
Distance : 8

115
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? startPoint.length : FunctionFlavor.NORMAL ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? startPoint.length : FunctionFlavor.NORMAL ; }
Distance : 5

116
Tree	if ( _boundaries == NUMBER_CONSTANT ) { return JAVA_1_8 ; }
Code	if ( _boundaries == NUMBER_CONSTANT ) { return JAVA_1_8 ; }
Distance : 2

117
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? uniqueId . of ( STRING_CONSTANT ) : superEquals ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? uniqueId . of ( STRING_CONSTANT ) : superEquals ; }
Distance : 10

118
Tree	if ( divisor == NUMBER_CONSTANT ) { return ArrayUtils.EMPTY_STRING_ARRAY ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return ArrayUtils.EMPTY_STRING_ARRAY ; }
Distance : 1

119
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? IncrementalCheckMode.GENERATE_IJS . getTopDefiningInterface () : INFINITE_WINDOW ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? IncrementalCheckMode.GENERATE_IJS . getTopDefiningInterface () : INFINITE_WINDOW ; }
Distance : 8

120
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? getInstanceType () : INFINITE_WINDOW ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? getInstanceType () : INFINITE_WINDOW ; }
Distance : 6

121
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? IncrementalCheckMode.OFF . isSubtypeWithoutStructuralTyping () : INFINITE_WINDOW ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? IncrementalCheckMode.OFF . isSubtypeWithoutStructuralTyping () : INFINITE_WINDOW ; }
Distance : 8

122
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping () ? LanguageMode.TYPESCRIPT : IncrementalCheckMode.GENERATE_IJS ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping () ? LanguageMode.TYPESCRIPT : IncrementalCheckMode.GENERATE_IJS ; }
Distance : 8

123
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping () ? & : null ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping () ? & : null ; }
Distance : 8

124
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? NaN . of ( CHAR_CONS ) : osVersion ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? NaN . of ( CHAR_CONS ) : osVersion ; }
Distance : 9

125
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? NaN . of ( STRING_CONSTANT ) : superEquals ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? NaN . of ( STRING_CONSTANT ) : superEquals ; }
Distance : 9

126
Tree	if ( newLineStr == NUMBER_CONSTANT ) { return JAVA_1_8 ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( newLineStr == NUMBER_CONSTANT ) { return JAVA_1_8 ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 6

127
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? IncrementalCheckMode.OFF . getBeta () : INFINITE_WINDOW ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? IncrementalCheckMode.OFF . getBeta () : INFINITE_WINDOW ; }
Distance : 8

128
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? isLastMatcherVarargMatcher () : INFINITE_WINDOW ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? isLastMatcherVarargMatcher () : INFINITE_WINDOW ; }
Distance : 6

129
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? uniqueId . latest ( CHAR_CONS ) : osVersion ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? uniqueId . latest ( CHAR_CONS ) : osVersion ; }
Distance : 10

130
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping () ? Locale.FRENCH : FunctionFlavor.NORMAL ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping () ? Locale.FRENCH : FunctionFlavor.NORMAL ; }
Distance : 8

131
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? uniqueId . latest ( STRING_CONSTANT ) : superEquals ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? uniqueId . latest ( STRING_CONSTANT ) : superEquals ; }
Distance : 10

132
Tree	if ( divisor == NUMBER_CONSTANT ) { throw JAVA_1_8 . createIllegalArgumentException ( Es6ModuleTranspilation.TO_COMMON_JS_LIKE_MODULES , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { throw JAVA_1_8 . createIllegalArgumentException ( Es6ModuleTranspilation.TO_COMMON_JS_LIKE_MODULES , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Distance : 9

133
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? IncrementalCheckMode.OFF . getTopDefiningInterface ( STRING_CONSTANT ) : sampleSize ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? IncrementalCheckMode.OFF . getTopDefiningInterface ( STRING_CONSTANT ) : sampleSize ; }
Distance : 10

134
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? startPoint.length . getTopDefiningInterface ( STRING_CONSTANT ) : superEquals ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? startPoint.length . getTopDefiningInterface ( STRING_CONSTANT ) : superEquals ; }
Distance : 10

135
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? this . printExterns . withLoose () : beforeStopWatch ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? this . printExterns . withLoose () : beforeStopWatch ; }
Distance : 10

136
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? interceptors.target . getTopDefiningInterface ( STRING_CONSTANT ) : sampleSize ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? interceptors.target . getTopDefiningInterface ( STRING_CONSTANT ) : sampleSize ; }
Distance : 10

137
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? this . printExterns . withLoose () : remainingRegion ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? this . printExterns . withLoose () : remainingRegion ; }
Distance : 10

138
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? this . emptyAsNull . withLoose () : expectedType ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? this . emptyAsNull . withLoose () : expectedType ; }
Distance : 10

139
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( divisor . getLastChild () , reporterStub.location , wzval ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( divisor . getLastChild () , reporterStub.location , wzval ) ; }
Distance : 13

140
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? interceptors.target . getTopDefiningInterface ( STRING_CONSTANT ) : superEquals ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? interceptors.target . getTopDefiningInterface ( STRING_CONSTANT ) : superEquals ; }
Distance : 10

141
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( getOutputFeatureSet () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , wzval ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( getOutputFeatureSet () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , wzval ) ; }
Distance : 11

142
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? uniqueId . latest ( false , INFINITE_WINDOW ) : osVersion ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? uniqueId . latest ( false , INFINITE_WINDOW ) : osVersion ; }
Distance : 12

143
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? uniqueId . of ( STRING_CONSTANT ) : sampleSize ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? uniqueId . of ( STRING_CONSTANT ) : sampleSize ; }
Distance : 10

144
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? INFINITE_WINDOW . latest ( CHAR_CONS ) : osVersion ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? INFINITE_WINDOW . latest ( CHAR_CONS ) : osVersion ; }
Distance : 10

145
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? uniqueId . of ( false , sampleSize ) : osVersion ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? uniqueId . of ( false , sampleSize ) : osVersion ; }
Distance : 12

146
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? uniqueId . of ( CHAR_CONS ) : expectedType ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? uniqueId . of ( CHAR_CONS ) : expectedType ; }
Distance : 10

147
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? INFINITE_WINDOW . of ( CHAR_CONS ) : expectedType ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? INFINITE_WINDOW . of ( CHAR_CONS ) : expectedType ; }
Distance : 10

148
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( getOutputFeatureSet () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , expectedType ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( getOutputFeatureSet () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , expectedType ) ; }
Distance : 11

149
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? uniqueId . of ( CHAR_CONS ) : renamerStack ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? uniqueId . of ( CHAR_CONS ) : renamerStack ; }
Distance : 10

150
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? this . printExterns . withLoose () : expectedType ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? this . printExterns . withLoose () : expectedType ; }
Distance : 10

151
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( getOutputFeatureSet () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , initialArray ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( getOutputFeatureSet () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , initialArray ) ; }
Distance : 11

152
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? uniqueId . of ( false , NaN ) : osVersion ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? uniqueId . of ( false , NaN ) : osVersion ; }
Distance : 11

153
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? getInstanceType ( INFINITE_WINDOW , false ) : osVersion ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? getInstanceType ( INFINITE_WINDOW , false ) : osVersion ; }
Distance : 10

154
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? this . printExterns . getNumberInstance () : expectedType ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? this . printExterns . getNumberInstance () : expectedType ; }
Distance : 10

155
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? uniqueId . of ( STRING_CONSTANT ) : INFINITE_WINDOW ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? uniqueId . of ( STRING_CONSTANT ) : INFINITE_WINDOW ; }
Distance : 10

156
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( divisor . getLastChild () , reporterStub.location , arindex ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( divisor . getLastChild () , reporterStub.location , arindex ) ; }
Distance : 13

157
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? isNamedType ( INFINITE_WINDOW , false ) : osVersion ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? isNamedType ( INFINITE_WINDOW , false ) : osVersion ; }
Distance : 10

158
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? getInstanceType ( referenceType , false ) : osVersion ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? getInstanceType ( referenceType , false ) : osVersion ; }
Distance : 10

159
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( divisor . toString () , reporterStub.location , wzval ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( divisor . toString () , reporterStub.location , wzval ) ; }
Distance : 13

160
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? INFINITE_WINDOW . latest ( STRING_CONSTANT ) : superEquals ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? INFINITE_WINDOW . latest ( STRING_CONSTANT ) : superEquals ; }
Distance : 10

161
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? INFINITE_WINDOW . of ( NUMBER_CONSTANT , options.skipNonTranspilationPasses ) : osVersion ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? INFINITE_WINDOW . of ( NUMBER_CONSTANT , options.skipNonTranspilationPasses ) : osVersion ; }
Distance : 12

162
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? uniqueId . of ( false , INFINITE_WINDOW ) : osVersion ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? uniqueId . of ( false , INFINITE_WINDOW ) : osVersion ; }
Distance : 12

163
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( divisor . getLastChild () , reporterStub.location , expectedType ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( divisor . getLastChild () , reporterStub.location , expectedType ) ; }
Distance : 13

164
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? startConfiguration.length : IncrementalCheckMode.GENERATE_IJS ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? startConfiguration.length : IncrementalCheckMode.GENERATE_IJS ; }
Distance : 5

165
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( divisor . escapeJson () , reporterStub.location , wzval ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( divisor . escapeJson () , reporterStub.location , wzval ) ; }
Distance : 13

166
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? IncrementalCheckMode.OFF . isSubtypeWithoutStructuralTyping ( STRING_CONSTANT ) : superEquals ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? IncrementalCheckMode.OFF . isSubtypeWithoutStructuralTyping ( STRING_CONSTANT ) : superEquals ; }
Distance : 10

167
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( divisor . getLastChild () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , wzval ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( divisor . getLastChild () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , wzval ) ; }
Distance : 13

168
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? uniqueId . of ( false , INFINITE_WINDOW ) : xi ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? uniqueId . of ( false , INFINITE_WINDOW ) : xi ; }
Distance : 12

169
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? uniqueId . of ( NUMBER_CONSTANT , options.skipNonTranspilationPasses ) : dpi ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? uniqueId . of ( NUMBER_CONSTANT , options.skipNonTranspilationPasses ) : dpi ; }
Distance : 12

170
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? isNamedType ( referenceType , false ) : osVersion ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? isNamedType ( referenceType , false ) : osVersion ; }
Distance : 10

171
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? isSubtypeWithoutStructuralTyping ( INFINITE_WINDOW , false ) : osVersion ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? isSubtypeWithoutStructuralTyping ( INFINITE_WINDOW , false ) : osVersion ; }
Distance : 10

172
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( divisor . copySelf () , reporterStub.location , wzval ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( divisor . copySelf () , reporterStub.location , wzval ) ; }
Distance : 13

173
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( divisor . copySelf () , reporterStub.location , expectedType ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( divisor . copySelf () , reporterStub.location , expectedType ) ; }
Distance : 13

174
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? isSubtypeWithoutStructuralTyping ( referenceType , false ) : osVersion ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? isSubtypeWithoutStructuralTyping ( referenceType , false ) : osVersion ; }
Distance : 10

175
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? startConfiguration.length . getTopDefiningInterface ( STRING_CONSTANT ) : superEquals ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? startConfiguration.length . getTopDefiningInterface ( STRING_CONSTANT ) : superEquals ; }
Distance : 10

176
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? INFINITE_WINDOW . of ( false , INFINITE_WINDOW ) : osVersion ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? INFINITE_WINDOW . of ( false , INFINITE_WINDOW ) : osVersion ; }
Distance : 12

177
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? copySign () : INFINITE_WINDOW ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? copySign () : INFINITE_WINDOW ; }
Distance : 6

178
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( FeatureSet.ES6 , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( FeatureSet.ES6 , PropAccess.INCLUDE_STRAY_PROPS ) ; }
Distance : 8

179
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? NaN . of ( NUMBER_CONSTANT , options.skipNonTranspilationPasses ) : osVersion ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? NaN . of ( NUMBER_CONSTANT , options.skipNonTranspilationPasses ) : osVersion ; }
Distance : 11

180
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? copySign ( INFINITE_WINDOW , false ) : osVersion ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? copySign ( INFINITE_WINDOW , false ) : osVersion ; }
Distance : 10

181
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? IncrementalCheckMode.OFF . getTopDefiningInterface ( STRING_CONSTANT ) : superEquals ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? IncrementalCheckMode.OFF . getTopDefiningInterface ( STRING_CONSTANT ) : superEquals ; }
Distance : 10

182
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? INFINITE_WINDOW . of ( STRING_CONSTANT ) : sampleSize ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? INFINITE_WINDOW . of ( STRING_CONSTANT ) : sampleSize ; }
Distance : 10

183
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? uniqueId . of ( NUMBER_CONSTANT , options.skipNonTranspilationPasses ) : superEquals ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? uniqueId . of ( NUMBER_CONSTANT , options.skipNonTranspilationPasses ) : superEquals ; }
Distance : 12

184
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? NaN . of ( false , INFINITE_WINDOW ) : osVersion ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? NaN . of ( false , INFINITE_WINDOW ) : osVersion ; }
Distance : 11

185
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? INFINITE_WINDOW . latest ( false , INFINITE_WINDOW ) : osVersion ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? INFINITE_WINDOW . latest ( false , INFINITE_WINDOW ) : osVersion ; }
Distance : 12

186
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? getOwnerFunction ( INFINITE_WINDOW , false ) : osVersion ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? getOwnerFunction ( INFINITE_WINDOW , false ) : osVersion ; }
Distance : 10

187
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? uniqueId . latest ( NUMBER_CONSTANT , options.skipNonTranspilationPasses ) : osVersion ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? uniqueId . latest ( NUMBER_CONSTANT , options.skipNonTranspilationPasses ) : osVersion ; }
Distance : 12

188
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? INFINITE_WINDOW . of ( NUMBER_CONSTANT , options.skipNonTranspilationPasses ) : superEquals ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? INFINITE_WINDOW . of ( NUMBER_CONSTANT , options.skipNonTranspilationPasses ) : superEquals ; }
Distance : 12

189
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? INFINITE_WINDOW . of ( NUMBER_CONSTANT , options.skipNonTranspilationPasses ) : dpi ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? INFINITE_WINDOW . of ( NUMBER_CONSTANT , options.skipNonTranspilationPasses ) : dpi ; }
Distance : 12

190
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( getOutputFeatureSet () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , lastTime ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 . isSubtypeWithoutStructuralTyping ( getOutputFeatureSet () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER , lastTime ) ; }
Distance : 11

191
Tree	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? uniqueId . of ( NUMBER_CONSTANT , options.skipNonTranspilationPasses ) : osVersion ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return JAVA_1_8 ? uniqueId . of ( NUMBER_CONSTANT , options.skipNonTranspilationPasses ) : osVersion ; }
Distance : 12

192
Tree	if ( divisor == NUMBER_CONSTANT ) { return containsNow ( INFINITE_WINDOW , INFINITE_WINDOW , arindex , arindex , arindex ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return containsNow ( INFINITE_WINDOW , INFINITE_WINDOW , arindex , arindex , arindex ) ; }
Distance : 12

193
Tree	if ( divisor == NUMBER_CONSTANT ) { return containsNow ( INFINITE_WINDOW , INFINITE_WINDOW , arindex , osVersion , arindex ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return containsNow ( INFINITE_WINDOW , INFINITE_WINDOW , arindex , osVersion , arindex ) ; }
Distance : 12

194
Tree	if ( divisor == NUMBER_CONSTANT ) { return containsNow ( INFINITE_WINDOW , INFINITE_WINDOW , wzval , arindex , arindex ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return containsNow ( INFINITE_WINDOW , INFINITE_WINDOW , wzval , arindex , arindex ) ; }
Distance : 12

195
Tree	if ( divisor == NUMBER_CONSTANT ) { return containsNow ( INFINITE_WINDOW , DEFAULT_INVERSE_ABSOLUTE_ACCURACY , arindex , arindex , arindex ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return containsNow ( INFINITE_WINDOW , DEFAULT_INVERSE_ABSOLUTE_ACCURACY , arindex , arindex , arindex ) ; }
Distance : 12

196
Tree	if ( divisor == NUMBER_CONSTANT ) { return containsNow ( INFINITE_WINDOW , NaN , arindex , arindex , arindex ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return containsNow ( INFINITE_WINDOW , NaN , arindex , arindex , arindex ) ; }
Distance : 11

197
Tree	if ( divisor == NUMBER_CONSTANT ) { return containsNow ( magnitude , INFINITE_WINDOW , arindex , arindex , arindex ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return containsNow ( magnitude , INFINITE_WINDOW , arindex , arindex , arindex ) ; }
Distance : 12

198
Tree	if ( divisor == NUMBER_CONSTANT ) { return containsNow ( enclosingFunc , INFINITE_WINDOW , arindex , arindex , arindex ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return containsNow ( enclosingFunc , INFINITE_WINDOW , arindex , arindex , arindex ) ; }
Distance : 12

199
Tree	if ( divisor == NUMBER_CONSTANT ) { return containsNow ( INFINITE_WINDOW , sampleSize , arindex , arindex , arindex ) ; }
Code	if ( divisor == NUMBER_CONSTANT ) { return containsNow ( INFINITE_WINDOW , sampleSize , arindex , arindex , arindex ) ; }
Distance : 12

========================================================================


========================================================================
Example Number: 69
Parent Code is: 
if ( divisor.isZero ) { return isZero ? NaN : INF ; }
-------------------------------------------------------------------------------
Child code is: 
if ( divisor.isZero ) { return NaN ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (40{val=divisor.isZero}) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (16 (800{val=isZero}) (233{val=?}) (800{val=NaN}) (226{val=:}) (800{val=INF})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (40{val=divisor.isZero}) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=NaN}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/46/parent/src_main_java_org_apache_commons_math_complex_Complex.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( isTypeCompatible ( OPTION.semiColonRequired ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isTypeCompatible ( OPTION.semiColonRequired ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

1
Tree	if ( STRING_CONSTANT . hasNode ( bg ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . hasNode ( bg ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

2
Tree	if ( astValidationEnabled . regionMatches ( CHAR_CONS ) ) { return false ; }
Code	if ( astValidationEnabled . regionMatches ( CHAR_CONS ) ) { return false ; }
Distance : 7

3
Tree	if ( STRING_CONSTANT . isAliasDefinition ( astValidationEnabled ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . isAliasDefinition ( astValidationEnabled ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

4
Tree	if ( this . valueClass . equals () ) { return false ; }
Code	if ( this . valueClass . equals () ) { return false ; }
Distance : 7

5
Tree	if ( this . JAVA_1_8 . equals () ) { return false ; }
Code	if ( this . JAVA_1_8 . equals () ) { return false ; }
Distance : 7

6
Tree	if ( this . isUnknownObject () ) { return null ; }
Code	if ( this . isUnknownObject () ) { return null ; }
Distance : 5

7
Tree	if ( STRING_CONSTANT . isTypeCompatible ( bg ) ) { return false ; }
Code	if ( STRING_CONSTANT . isTypeCompatible ( bg ) ) { return false ; }
Distance : 7

8
Tree	if ( this . definitionNodeByDefinitionSite . equals () ) { return false ; }
Code	if ( this . definitionNodeByDefinitionSite . equals () ) { return false ; }
Distance : 7

9
Tree	if ( this . commonTypes . equals () ) { return null ; }
Code	if ( this . commonTypes . equals () ) { return null ; }
Distance : 7

10
Tree	if ( this . rangeCrosshairLockedOnData . equals () ) { return false ; }
Code	if ( this . rangeCrosshairLockedOnData . equals () ) { return false ; }
Distance : 7

11
Tree	if ( variablesToInclude . isAliasDefinition ( CHAR_CONS ) ) { return false ; }
Code	if ( variablesToInclude . isAliasDefinition ( CHAR_CONS ) ) { return false ; }
Distance : 7

12
Tree	if ( variablesToInclude . isAliasDefinition ( STRING_CONSTANT ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( variablesToInclude . isAliasDefinition ( STRING_CONSTANT ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

13
Tree	if ( this . resetBuilder () ) { return null ; }
Code	if ( this . resetBuilder () ) { return null ; }
Distance : 5

14
Tree	if ( this . getTracerMode () ) { return JAVA_1_8 ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . getTracerMode () ) { return JAVA_1_8 ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

15
Tree	if ( this . primitiveType . equals () ) { return null ; }
Code	if ( this . primitiveType . equals () ) { return null ; }
Distance : 7

16
Tree	if ( leftOfArrow.type . isAliasDefinition ( fraction.numerator ) ) { return false ; }
Code	if ( leftOfArrow.type . isAliasDefinition ( fraction.numerator ) ) { return false ; }
Distance : 7

17
Tree	if ( options.deadAssignmentElimination . isAliasDefinition ( forAnnotations ) ) { return false ; }
Code	if ( options.deadAssignmentElimination . isAliasDefinition ( forAnnotations ) ) { return false ; }
Distance : 7

18
Tree	if ( this . getTracerMode () ) { return Answers.RETURNS_DEFAULTS ; }
Code	if ( this . getTracerMode () ) { return Answers.RETURNS_DEFAULTS ; }
Distance : 5

19
Tree	if ( options.deadAssignmentElimination . isAliasDefinition ( ES6 ) ) { return false ; }
Code	if ( options.deadAssignmentElimination . isAliasDefinition ( ES6 ) ) { return false ; }
Distance : 7

20
Tree	if ( leftOfArrow.type . isAliasDefinition ( JSTypeNative.FUNCTION_INSTANCE_TYPE ) ) { return null ; }
Code	if ( leftOfArrow.type . isAliasDefinition ( JSTypeNative.FUNCTION_INSTANCE_TYPE ) ) { return null ; }
Distance : 7

21
Tree	if ( this . resetBuilder () ) { return DecompositionType.UNDECOMPOSABLE ; }
Code	if ( this . resetBuilder () ) { return DecompositionType.UNDECOMPOSABLE ; }
Distance : 5

22
Tree	if ( options.deadAssignmentElimination . isAliasDefinition ( bg ) ) { return false ; }
Code	if ( options.deadAssignmentElimination . isAliasDefinition ( bg ) ) { return false ; }
Distance : 7

23
Tree	if ( STRING_CONSTANT . getRhs ( astValidationEnabled ) ) { return false ; }
Code	if ( STRING_CONSTANT . getRhs ( astValidationEnabled ) ) { return false ; }
Distance : 7

24
Tree	if ( STRING_CONSTANT . getRhs ( bg ) ) { return null ; }
Code	if ( STRING_CONSTANT . getRhs ( bg ) ) { return null ; }
Distance : 7

25
Tree	if ( isSpecializedOnlyWithUnknown . isAliasDefinition ( CHAR_CONS ) ) { return false ; }
Code	if ( isSpecializedOnlyWithUnknown . isAliasDefinition ( CHAR_CONS ) ) { return false ; }
Distance : 7

26
Tree	if ( astValidationEnabled . isAliasDefinition ( CHAR_CONS ) ) { return false ; }
Code	if ( astValidationEnabled . isAliasDefinition ( CHAR_CONS ) ) { return false ; }
Distance : 7

27
Tree	if ( this . isUnknownObject () ) { return false ; }
Code	if ( this . isUnknownObject () ) { return false ; }
Distance : 5

28
Tree	if ( options.deadAssignmentElimination . isAliasDefinition ( mockKey.mockedType ) ) { return false ; }
Code	if ( options.deadAssignmentElimination . isAliasDefinition ( mockKey.mockedType ) ) { return false ; }
Distance : 7

29
Tree	if ( this . isUnknownObject () ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . isUnknownObject () ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

30
Tree	if ( astValidationEnabled . isAliasDefinition ( STRING_CONSTANT ) ) { return MOCKITO_PROXY_MARKER ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( astValidationEnabled . isAliasDefinition ( STRING_CONSTANT ) ) { return MOCKITO_PROXY_MARKER ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

31
Tree	if ( this . isAliasDefinition () ) { return null ; }
Code	if ( this . isAliasDefinition () ) { return null ; }
Distance : 5

32
Tree	if ( this . TRUTHY . equals () ) { return null ; }
Code	if ( this . TRUTHY . equals () ) { return null ; }
Distance : 7

33
Tree	if ( leftOfArrow.type . isAliasDefinition ( bg ) ) { return false ; }
Code	if ( leftOfArrow.type . isAliasDefinition ( bg ) ) { return false ; }
Distance : 7

34
Tree	if ( this . isTypeCompatible () ) { return null ; }
Code	if ( this . isTypeCompatible () ) { return null ; }
Distance : 5

35
Tree	if ( STRING_CONSTANT . isAliasDefinition ( bg ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . isAliasDefinition ( bg ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

36
Tree	if ( STRING_CONSTANT . isTypeCompatible ( bg ) ) { return null ; }
Code	if ( STRING_CONSTANT . isTypeCompatible ( bg ) ) { return null ; }
Distance : 7

37
Tree	if ( this . resetBuilder () ) { return false ; }
Code	if ( this . resetBuilder () ) { return false ; }
Distance : 5

38
Tree	if ( astValidationEnabled . runMode ( CHAR_CONS ) ) { return false ; }
Code	if ( astValidationEnabled . runMode ( CHAR_CONS ) ) { return false ; }
Distance : 7

39
Tree	if ( this . isAliasDefinition () ) { return false ; }
Code	if ( this . isAliasDefinition () ) { return false ; }
Distance : 5

40
Tree	if ( STRING_CONSTANT . hasNode ( bg ) ) { return false ; }
Code	if ( STRING_CONSTANT . hasNode ( bg ) ) { return false ; }
Distance : 7

41
Tree	if ( this . getTracerMode () ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : MatchResult.NO_MATCH ; }
Code	if ( this . getTracerMode () ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : MatchResult.NO_MATCH ; }
Distance : 9

42
Tree	if ( leftOfArrow.type . isAliasDefinition ( bg ) ) { return null ; }
Code	if ( leftOfArrow.type . isAliasDefinition ( bg ) ) { return null ; }
Distance : 7

43
Tree	if ( this . commonTypes . equals () ) { return false ; }
Code	if ( this . commonTypes . equals () ) { return false ; }
Distance : 7

44
Tree	if ( astValidationEnabled . regionMatches ( STRING_CONSTANT ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( astValidationEnabled . regionMatches ( STRING_CONSTANT ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

45
Tree	if ( STRING_CONSTANT . isAliasDefinition ( astValidationEnabled ) ) { return false ; }
Code	if ( STRING_CONSTANT . isAliasDefinition ( astValidationEnabled ) ) { return false ; }
Distance : 7

46
Tree	if ( this . isTypeCompatible () ) { return false ; }
Code	if ( this . isTypeCompatible () ) { return false ; }
Distance : 5

47
Tree	if ( this . isTopLevel () ) { return JAVA_1_8 ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . isTopLevel () ) { return JAVA_1_8 ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

48
Tree	if ( this . getTracerMode () ) { return DecompositionType.UNDECOMPOSABLE ; }
Code	if ( this . getTracerMode () ) { return DecompositionType.UNDECOMPOSABLE ; }
Distance : 5

49
Tree	if ( CompilerTestCase.ACTIVE_X_OBJECT_DEF . isAliasDefinition ( bg ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( CompilerTestCase.ACTIVE_X_OBJECT_DEF . isAliasDefinition ( bg ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

50
Tree	if ( this . resetBuilder () ) { return JAVA_1_8 ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . resetBuilder () ) { return JAVA_1_8 ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

51
Tree	if ( isTypeCompatible ( polyfill.polyfillVersion ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isTypeCompatible ( polyfill.polyfillVersion ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

52
Tree	if ( this . getStringBuffer () ) { return JAVA_1_8 ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . getStringBuffer () ) { return JAVA_1_8 ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

53
Tree	if ( STRING_CONSTANT . hasNode ( bg ) ) { return null ; }
Code	if ( STRING_CONSTANT . hasNode ( bg ) ) { return null ; }
Distance : 7

54
Tree	if ( timeToLive . isAliasDefinition ( CHAR_CONS ) ) { return false ; }
Code	if ( timeToLive . isAliasDefinition ( CHAR_CONS ) ) { return false ; }
Distance : 7

55
Tree	if ( this . getTracerMode () ) { return JAVA_1_8 ? startPoint.length : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Code	if ( this . getTracerMode () ) { return JAVA_1_8 ? startPoint.length : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Distance : 9

56
Tree	if ( injectee . isAliasDefinition ( STRING_CONSTANT ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( injectee . isAliasDefinition ( STRING_CONSTANT ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

57
Tree	if ( options.deadAssignmentElimination . isAliasDefinition ( forAnnotations ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( options.deadAssignmentElimination . isAliasDefinition ( forAnnotations ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

58
Tree	if ( isTypeCompatible ( fraction.numerator ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isTypeCompatible ( fraction.numerator ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

59
Tree	if ( isTypeCompatible ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isTypeCompatible ( DiagnosticGroups.TOO_MANY_TYPE_PARAMS ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

60
Tree	if ( this . getTracerMode () ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Code	if ( this . getTracerMode () ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Distance : 9

61
Tree	if ( options.deadAssignmentElimination . isAliasDefinition ( JSTypeNative.FUNCTION_INSTANCE_TYPE ) ) { return false ; }
Code	if ( options.deadAssignmentElimination . isAliasDefinition ( JSTypeNative.FUNCTION_INSTANCE_TYPE ) ) { return false ; }
Distance : 7

62
Tree	if ( options.deadAssignmentElimination . isAliasDefinition ( OPTION.semiColonRequired ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( options.deadAssignmentElimination . isAliasDefinition ( OPTION.semiColonRequired ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

63
Tree	if ( astValidationEnabled . runMode ( STRING_CONSTANT ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( astValidationEnabled . runMode ( STRING_CONSTANT ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

64
Tree	if ( this . resetBuilder () ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . resetBuilder () ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

65
Tree	if ( leftOfArrow.type . isAliasDefinition ( JSTypeNative.FUNCTION_INSTANCE_TYPE ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( leftOfArrow.type . isAliasDefinition ( JSTypeNative.FUNCTION_INSTANCE_TYPE ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

66
Tree	if ( this . isSame () ) { return JAVA_1_8 ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . isSame () ) { return JAVA_1_8 ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

67
Tree	if ( STRING_CONSTANT . isAliasDefinition ( astValidationEnabled ) ) { return null ; }
Code	if ( STRING_CONSTANT . isAliasDefinition ( astValidationEnabled ) ) { return null ; }
Distance : 7

68
Tree	if ( leftOfArrow.type . isAliasDefinition ( JSTypeNative.FUNCTION_INSTANCE_TYPE ) ) { return false ; }
Code	if ( leftOfArrow.type . isAliasDefinition ( JSTypeNative.FUNCTION_INSTANCE_TYPE ) ) { return false ; }
Distance : 7

69
Tree	if ( this . JAVA_1_8 . equals () ) { return null ; }
Code	if ( this . JAVA_1_8 . equals () ) { return null ; }
Distance : 7

70
Tree	if ( options.deadAssignmentElimination . isAliasDefinition ( ES6 ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( options.deadAssignmentElimination . isAliasDefinition ( ES6 ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

71
Tree	if ( leftOfArrow.type . isAliasDefinition ( fraction.numerator ) ) { return null ; }
Code	if ( leftOfArrow.type . isAliasDefinition ( fraction.numerator ) ) { return null ; }
Distance : 7

72
Tree	if ( isTypeCompatible ( CompilerTestCase.ACTIVE_X_OBJECT_DEF ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isTypeCompatible ( CompilerTestCase.ACTIVE_X_OBJECT_DEF ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

73
Tree	if ( this . getTracerMode () ) { return null ; }
Code	if ( this . getTracerMode () ) { return null ; }
Distance : 5

74
Tree	if ( doSanityChecks . isAliasDefinition ( STRING_CONSTANT ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( doSanityChecks . isAliasDefinition ( STRING_CONSTANT ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

75
Tree	if ( STRING_CONSTANT . containsAny ( bg ) ) { return DecompositionType.UNDECOMPOSABLE ; }
Code	if ( STRING_CONSTANT . containsAny ( bg ) ) { return DecompositionType.UNDECOMPOSABLE ; }
Distance : 7

76
Tree	if ( STRING_CONSTANT . isTypeCompatible ( bg ) ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Code	if ( STRING_CONSTANT . isTypeCompatible ( bg ) ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Distance : 11

77
Tree	if ( STRING_CONSTANT . isAliasDefinition ( bg ) ) { return DecompositionType.UNDECOMPOSABLE ; }
Code	if ( STRING_CONSTANT . isAliasDefinition ( bg ) ) { return DecompositionType.UNDECOMPOSABLE ; }
Distance : 7

78
Tree	if ( isTypeCompatible ( JSTypeNative.FUNCTION_INSTANCE_TYPE ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isTypeCompatible ( JSTypeNative.FUNCTION_INSTANCE_TYPE ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

79
Tree	if ( leftOfArrow.type . isAliasDefinition ( forAnnotations ) ) { return null ; }
Code	if ( leftOfArrow.type . isAliasDefinition ( forAnnotations ) ) { return null ; }
Distance : 7

80
Tree	if ( this . rangeCrosshairLockedOnData . equals () ) { return null ; }
Code	if ( this . rangeCrosshairLockedOnData . equals () ) { return null ; }
Distance : 7

81
Tree	if ( leftOfArrow.type . isAliasDefinition ( OPTION.semiColonRequired ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( leftOfArrow.type . isAliasDefinition ( OPTION.semiColonRequired ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

82
Tree	if ( this . valueClass . equals () ) { return null ; }
Code	if ( this . valueClass . equals () ) { return null ; }
Distance : 7

83
Tree	if ( leftOfArrow.type . isAliasDefinition ( bg ) ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Code	if ( leftOfArrow.type . isAliasDefinition ( bg ) ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Distance : 11

84
Tree	if ( options.deadAssignmentElimination . isAliasDefinition ( fraction.numerator ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( options.deadAssignmentElimination . isAliasDefinition ( fraction.numerator ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

85
Tree	if ( this . isAliasDefinition () ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . isAliasDefinition () ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

86
Tree	if ( ancestors.length . isAliasDefinition ( bg ) ) { return null ; }
Code	if ( ancestors.length . isAliasDefinition ( bg ) ) { return null ; }
Distance : 7

87
Tree	if ( this . getTracerMode () ) { return false ; }
Code	if ( this . getTracerMode () ) { return false ; }
Distance : 5

88
Tree	if ( isTypeCompatible ( leftOfArrow.type ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isTypeCompatible ( leftOfArrow.type ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

89
Tree	if ( this . getTracerMode () ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . getTracerMode () ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

90
Tree	if ( STRING_CONSTANT . getRhs ( bg ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . getRhs ( bg ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

91
Tree	if ( this . isUnknownObject () ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Code	if ( this . isUnknownObject () ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Distance : 9

92
Tree	if ( STRING_CONSTANT . isAliasDefinition ( bg ) ) { return false ; }
Code	if ( STRING_CONSTANT . isAliasDefinition ( bg ) ) { return false ; }
Distance : 7

93
Tree	if ( options.deadAssignmentElimination . isAliasDefinition ( mockKey.mockedType ) ) { return null ; }
Code	if ( options.deadAssignmentElimination . isAliasDefinition ( mockKey.mockedType ) ) { return null ; }
Distance : 7

94
Tree	if ( this . valueClass . withLoose () ) { return false ; }
Code	if ( this . valueClass . withLoose () ) { return false ; }
Distance : 7

95
Tree	if ( this . valueClass . withLoose () ) { return null ; }
Code	if ( this . valueClass . withLoose () ) { return null ; }
Distance : 7

96
Tree	if ( this . isTopLevel () ) { return false ; }
Code	if ( this . isTopLevel () ) { return false ; }
Distance : 5

97
Tree	if ( this . isTypeCompatible () ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . isTypeCompatible () ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

98
Tree	if ( STRING_CONSTANT . shouldRunRemoveUnusedCode ( bg ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . shouldRunRemoveUnusedCode ( bg ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

99
Tree	if ( options.deadAssignmentElimination . isAliasDefinition ( nt2.rawType ) ) { return null ; }
Code	if ( options.deadAssignmentElimination . isAliasDefinition ( nt2.rawType ) ) { return null ; }
Distance : 7

100
Tree	if ( astValidationEnabled . isAliasDefinition ( STRING_CONSTANT ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( astValidationEnabled . isAliasDefinition ( STRING_CONSTANT ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

101
Tree	if ( STRING_CONSTANT . containsAny ( bg ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . containsAny ( bg ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

102
Tree	if ( mode.featureSet . isAliasDefinition ( bg ) ) { return null ; }
Code	if ( mode.featureSet . isAliasDefinition ( bg ) ) { return null ; }
Distance : 7

103
Tree	if ( this . primitiveType . equals () ) { return false ; }
Code	if ( this . primitiveType . equals () ) { return false ; }
Distance : 7

104
Tree	if ( this . getStringBuffer () ) { return false ; }
Code	if ( this . getStringBuffer () ) { return false ; }
Distance : 5

105
Tree	if ( doSanityChecks . isAliasDefinition ( CHAR_CONS ) ) { return false ; }
Code	if ( doSanityChecks . isAliasDefinition ( CHAR_CONS ) ) { return false ; }
Distance : 7

106
Tree	if ( leftOfArrow.type . isAliasDefinition ( OPTION.semiColonRequired ) ) { return false ; }
Code	if ( leftOfArrow.type . isAliasDefinition ( OPTION.semiColonRequired ) ) { return false ; }
Distance : 7

107
Tree	if ( this . isSame () ) { return false ; }
Code	if ( this . isSame () ) { return false ; }
Distance : 5

108
Tree	if ( this . isTopLevel () ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Code	if ( this . isTopLevel () ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Distance : 9

109
Tree	if ( leftOfArrow.type . isAliasDefinition ( bg ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( leftOfArrow.type . isAliasDefinition ( bg ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

110
Tree	if ( leftOfArrow.type . isAliasDefinition ( forAnnotations ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( leftOfArrow.type . isAliasDefinition ( forAnnotations ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

111
Tree	if ( this . isUnknownObject () ) { return DecompositionType.UNDECOMPOSABLE ; }
Code	if ( this . isUnknownObject () ) { return DecompositionType.UNDECOMPOSABLE ; }
Distance : 5

112
Tree	if ( CompilerTestCase.ACTIVE_X_OBJECT_DEF . isAliasDefinition ( bg ) ) { return false ; }
Code	if ( CompilerTestCase.ACTIVE_X_OBJECT_DEF . isAliasDefinition ( bg ) ) { return false ; }
Distance : 7

113
Tree	if ( injectee . isAliasDefinition ( CHAR_CONS ) ) { return false ; }
Code	if ( injectee . isAliasDefinition ( CHAR_CONS ) ) { return false ; }
Distance : 7

114
Tree	if ( options.deadAssignmentElimination . isAliasDefinition ( fraction.numerator ) ) { return false ; }
Code	if ( options.deadAssignmentElimination . isAliasDefinition ( fraction.numerator ) ) { return false ; }
Distance : 7

115
Tree	if ( isTypeCompatible ( options.deadAssignmentElimination ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( isTypeCompatible ( options.deadAssignmentElimination ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

116
Tree	if ( leftOfArrow.type . isAliasDefinition ( JSTypeNative.FUNCTION_INSTANCE_TYPE ) ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Code	if ( leftOfArrow.type . isAliasDefinition ( JSTypeNative.FUNCTION_INSTANCE_TYPE ) ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Distance : 11

117
Tree	if ( STRING_CONSTANT . getRhs ( astValidationEnabled ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . getRhs ( astValidationEnabled ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

118
Tree	if ( this . isTopLevel () ) { return null ; }
Code	if ( this . isTopLevel () ) { return null ; }
Distance : 5

119
Tree	if ( STRING_CONSTANT . isTypeCompatible ( bg ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( STRING_CONSTANT . isTypeCompatible ( bg ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

120
Tree	if ( this . isTopLevel () ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . isTopLevel () ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

121
Tree	if ( options.deadAssignmentElimination . isAliasDefinition ( OPTION.semiColonRequired ) ) { return Answers.RETURNS_DEFAULTS ; }
Code	if ( options.deadAssignmentElimination . isAliasDefinition ( OPTION.semiColonRequired ) ) { return Answers.RETURNS_DEFAULTS ; }
Distance : 7

122
Tree	if ( this . isUnknownObject () ) { return JAVA_1_8 ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . isUnknownObject () ) { return JAVA_1_8 ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

123
Tree	if ( this . getStringBuffer () ) { return null ; }
Code	if ( this . getStringBuffer () ) { return null ; }
Distance : 5

124
Tree	if ( STRING_CONSTANT . isAliasDefinition ( bg ) ) { return null ; }
Code	if ( STRING_CONSTANT . isAliasDefinition ( bg ) ) { return null ; }
Distance : 7

125
Tree	if ( ancestors.length . isAliasDefinition ( bg ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( ancestors.length . isAliasDefinition ( bg ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

126
Tree	if ( leftOfArrow.type . isAliasDefinition ( OPTION.semiColonRequired ) ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Code	if ( leftOfArrow.type . isAliasDefinition ( OPTION.semiColonRequired ) ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Distance : 11

127
Tree	if ( mode.featureSet . isAliasDefinition ( bg ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( mode.featureSet . isAliasDefinition ( bg ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

128
Tree	if ( options.deadAssignmentElimination . isAliasDefinition ( forAnnotations ) ) { return null ; }
Code	if ( options.deadAssignmentElimination . isAliasDefinition ( forAnnotations ) ) { return null ; }
Distance : 7

129
Tree	if ( STRING_CONSTANT . hasNode ( bg ) ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Code	if ( STRING_CONSTANT . hasNode ( bg ) ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Distance : 11

130
Tree	if ( this . getStringBuffer () ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Code	if ( this . getStringBuffer () ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Distance : 9

131
Tree	if ( STRING_CONSTANT . hasNode ( bg ) ) { return DecompositionType.UNDECOMPOSABLE ; }
Code	if ( STRING_CONSTANT . hasNode ( bg ) ) { return DecompositionType.UNDECOMPOSABLE ; }
Distance : 7

132
Tree	if ( options.deadAssignmentElimination . isAliasDefinition ( ES6 ) ) { return null ; }
Code	if ( options.deadAssignmentElimination . isAliasDefinition ( ES6 ) ) { return null ; }
Distance : 7

133
Tree	if ( this . isTopLevel () ) { return DecompositionType.UNDECOMPOSABLE ; }
Code	if ( this . isTopLevel () ) { return DecompositionType.UNDECOMPOSABLE ; }
Distance : 5

134
Tree	if ( leftOfArrow.type . isAliasDefinition ( fraction.numerator ) ) { return DecompositionType.UNDECOMPOSABLE ; }
Code	if ( leftOfArrow.type . isAliasDefinition ( fraction.numerator ) ) { return DecompositionType.UNDECOMPOSABLE ; }
Distance : 7

135
Tree	if ( this . definitionNodeByDefinitionSite . equals () ) { return null ; }
Code	if ( this . definitionNodeByDefinitionSite . equals () ) { return null ; }
Distance : 7

136
Tree	if ( this . getStringBuffer () ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . getStringBuffer () ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

137
Tree	if ( STRING_CONSTANT . shouldRunRemoveUnusedCode ( bg ) ) { return null ; }
Code	if ( STRING_CONSTANT . shouldRunRemoveUnusedCode ( bg ) ) { return null ; }
Distance : 7

138
Tree	if ( options.deadAssignmentElimination . isAliasDefinition ( JSTypeNative.FUNCTION_INSTANCE_TYPE ) ) { return null ; }
Code	if ( options.deadAssignmentElimination . isAliasDefinition ( JSTypeNative.FUNCTION_INSTANCE_TYPE ) ) { return null ; }
Distance : 7

139
Tree	if ( options.deadAssignmentElimination . isAliasDefinition ( OPTION.semiColonRequired ) ) { return false ; }
Code	if ( options.deadAssignmentElimination . isAliasDefinition ( OPTION.semiColonRequired ) ) { return false ; }
Distance : 7

140
Tree	if ( STRING_CONSTANT . getRhs ( bg ) ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Code	if ( STRING_CONSTANT . getRhs ( bg ) ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Distance : 11

141
Tree	if ( this . TRUTHY . equals () ) { return false ; }
Code	if ( this . TRUTHY . equals () ) { return false ; }
Distance : 7

142
Tree	if ( STRING_CONSTANT . isAliasDefinition ( astValidationEnabled ) ) { return DecompositionType.UNDECOMPOSABLE ; }
Code	if ( STRING_CONSTANT . isAliasDefinition ( astValidationEnabled ) ) { return DecompositionType.UNDECOMPOSABLE ; }
Distance : 7

143
Tree	if ( this . isSame () ) { return null ; }
Code	if ( this . isSame () ) { return null ; }
Distance : 5

144
Tree	if ( STRING_CONSTANT . getRhs ( bg ) ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : MatchResult.NO_MATCH ; }
Code	if ( STRING_CONSTANT . getRhs ( bg ) ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : MatchResult.NO_MATCH ; }
Distance : 11

145
Tree	if ( options.deadAssignmentElimination . isAliasDefinition ( bg ) ) { return null ; }
Code	if ( options.deadAssignmentElimination . isAliasDefinition ( bg ) ) { return null ; }
Distance : 7

146
Tree	if ( options.deadAssignmentElimination . isAliasDefinition ( fraction.numerator ) ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Code	if ( options.deadAssignmentElimination . isAliasDefinition ( fraction.numerator ) ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Distance : 11

147
Tree	if ( this . getStringBuffer () ) { return DecompositionType.UNDECOMPOSABLE ; }
Code	if ( this . getStringBuffer () ) { return DecompositionType.UNDECOMPOSABLE ; }
Distance : 5

148
Tree	if ( options.deadAssignmentElimination . isAliasDefinition ( JSTypeNative.FUNCTION_INSTANCE_TYPE ) ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : MatchResult.NO_MATCH ; }
Code	if ( options.deadAssignmentElimination . isAliasDefinition ( JSTypeNative.FUNCTION_INSTANCE_TYPE ) ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : MatchResult.NO_MATCH ; }
Distance : 11

149
Tree	if ( this . getTracerMode () ) { return JAVA_1_8 ? interceptors.target : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Code	if ( this . getTracerMode () ) { return JAVA_1_8 ? interceptors.target : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Distance : 9

150
Tree	if ( STRING_CONSTANT . isAliasDefinition ( bg ) ) { return Answers.RETURNS_DEFAULTS ; }
Code	if ( STRING_CONSTANT . isAliasDefinition ( bg ) ) { return Answers.RETURNS_DEFAULTS ; }
Distance : 7

151
Tree	if ( options.deadAssignmentElimination . isAliasDefinition ( JSTypeNative.FUNCTION_INSTANCE_TYPE ) ) { return JAVA_1_8 ? interceptors.target : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Code	if ( options.deadAssignmentElimination . isAliasDefinition ( JSTypeNative.FUNCTION_INSTANCE_TYPE ) ) { return JAVA_1_8 ? interceptors.target : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Distance : 11

152
Tree	if ( STRING_CONSTANT . containsAny ( bg ) ) { return null ; }
Code	if ( STRING_CONSTANT . containsAny ( bg ) ) { return null ; }
Distance : 7

153
Tree	if ( options.deadAssignmentElimination . isAliasDefinition ( JSTypeNative.FUNCTION_INSTANCE_TYPE ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( options.deadAssignmentElimination . isAliasDefinition ( JSTypeNative.FUNCTION_INSTANCE_TYPE ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

154
Tree	if ( options.deadAssignmentElimination . isAliasDefinition ( OPTION.semiColonRequired ) ) { return null ; }
Code	if ( options.deadAssignmentElimination . isAliasDefinition ( OPTION.semiColonRequired ) ) { return null ; }
Distance : 7

155
Tree	if ( STRING_CONSTANT . isAliasDefinition ( bg ) ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : MatchResult.NO_MATCH ; }
Code	if ( STRING_CONSTANT . isAliasDefinition ( bg ) ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : MatchResult.NO_MATCH ; }
Distance : 11

156
Tree	if ( options.deadAssignmentElimination . isAliasDefinition ( nt2.rawType ) ) { return false ; }
Code	if ( options.deadAssignmentElimination . isAliasDefinition ( nt2.rawType ) ) { return false ; }
Distance : 7

157
Tree	if ( leftOfArrow.type . isAliasDefinition ( OPTION.semiColonRequired ) ) { return null ; }
Code	if ( leftOfArrow.type . isAliasDefinition ( OPTION.semiColonRequired ) ) { return null ; }
Distance : 7

158
Tree	if ( this . isAliasDefinition () ) { return JAVA_1_8 ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . isAliasDefinition () ) { return JAVA_1_8 ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

159
Tree	if ( options.deadAssignmentElimination . isAliasDefinition ( OPTION.semiColonRequired ) ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : MatchResult.NO_MATCH ; }
Code	if ( options.deadAssignmentElimination . isAliasDefinition ( OPTION.semiColonRequired ) ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : MatchResult.NO_MATCH ; }
Distance : 11

160
Tree	if ( STRING_CONSTANT . shouldRunRemoveUnusedCode ( bg ) ) { return false ; }
Code	if ( STRING_CONSTANT . shouldRunRemoveUnusedCode ( bg ) ) { return false ; }
Distance : 7

161
Tree	if ( this . isTypeCompatible () ) { return JAVA_1_8 ? STRING_CONSTANT : STRING_CONSTANT ; }
Code	if ( this . isTypeCompatible () ) { return JAVA_1_8 ? STRING_CONSTANT : STRING_CONSTANT ; }
Distance : 9

162
Tree	if ( this . isSame () ) { return DecompositionType.UNDECOMPOSABLE ; }
Code	if ( this . isSame () ) { return DecompositionType.UNDECOMPOSABLE ; }
Distance : 5

163
Tree	if ( this . isSame () ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Code	if ( this . isSame () ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Distance : 9

164
Tree	if ( STRING_CONSTANT . shouldRunRemoveUnusedCode ( bg ) ) { return DecompositionType.UNDECOMPOSABLE ; }
Code	if ( STRING_CONSTANT . shouldRunRemoveUnusedCode ( bg ) ) { return DecompositionType.UNDECOMPOSABLE ; }
Distance : 7

165
Tree	if ( STRING_CONSTANT . getRhs ( bg ) ) { return DecompositionType.UNDECOMPOSABLE ; }
Code	if ( STRING_CONSTANT . getRhs ( bg ) ) { return DecompositionType.UNDECOMPOSABLE ; }
Distance : 7

166
Tree	if ( this . isAliasDefinition () ) { return DecompositionType.UNDECOMPOSABLE ; }
Code	if ( this . isAliasDefinition () ) { return DecompositionType.UNDECOMPOSABLE ; }
Distance : 5

167
Tree	if ( CompilerTestCase.ACTIVE_X_OBJECT_DEF . isAliasDefinition ( bg ) ) { return null ; }
Code	if ( CompilerTestCase.ACTIVE_X_OBJECT_DEF . isAliasDefinition ( bg ) ) { return null ; }
Distance : 7

168
Tree	if ( leftOfArrow.type . isAliasDefinition ( forAnnotations ) ) { return false ; }
Code	if ( leftOfArrow.type . isAliasDefinition ( forAnnotations ) ) { return false ; }
Distance : 7

169
Tree	if ( STRING_CONSTANT . containsAny ( bg ) ) { return false ; }
Code	if ( STRING_CONSTANT . containsAny ( bg ) ) { return false ; }
Distance : 7

170
Tree	if ( leftOfArrow.type . isAliasDefinition ( fraction.numerator ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( leftOfArrow.type . isAliasDefinition ( fraction.numerator ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

171
Tree	if ( STRING_CONSTANT . getRhs ( bg ) ) { return false ; }
Code	if ( STRING_CONSTANT . getRhs ( bg ) ) { return false ; }
Distance : 7

172
Tree	if ( options.deadAssignmentElimination . isAliasDefinition ( fraction.numerator ) ) { return null ; }
Code	if ( options.deadAssignmentElimination . isAliasDefinition ( fraction.numerator ) ) { return null ; }
Distance : 7

173
Tree	if ( timeToLive . isAliasDefinition ( STRING_CONSTANT ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( timeToLive . isAliasDefinition ( STRING_CONSTANT ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

174
Tree	if ( STRING_CONSTANT . isAliasDefinition ( bg ) ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Code	if ( STRING_CONSTANT . isAliasDefinition ( bg ) ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Distance : 11

175
Tree	if ( STRING_CONSTANT . getRhs ( astValidationEnabled ) ) { return null ; }
Code	if ( STRING_CONSTANT . getRhs ( astValidationEnabled ) ) { return null ; }
Distance : 7

176
Tree	if ( STRING_CONSTANT . isTypeCompatible ( bg ) ) { return DecompositionType.UNDECOMPOSABLE ; }
Code	if ( STRING_CONSTANT . isTypeCompatible ( bg ) ) { return DecompositionType.UNDECOMPOSABLE ; }
Distance : 7

177
Tree	if ( ancestors.length . isAliasDefinition ( bg ) ) { return false ; }
Code	if ( ancestors.length . isAliasDefinition ( bg ) ) { return false ; }
Distance : 7

178
Tree	if ( options.deadAssignmentElimination . isAliasDefinition ( bg ) ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Code	if ( options.deadAssignmentElimination . isAliasDefinition ( bg ) ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Distance : 11

179
Tree	if ( options.deadAssignmentElimination . isAliasDefinition ( mockKey.mockedType ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( options.deadAssignmentElimination . isAliasDefinition ( mockKey.mockedType ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

180
Tree	if ( this . isSame () ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( this . isSame () ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 9

181
Tree	if ( options.deadAssignmentElimination . isAliasDefinition ( JSTypeNative.FUNCTION_INSTANCE_TYPE ) ) { return DecompositionType.UNDECOMPOSABLE ; }
Code	if ( options.deadAssignmentElimination . isAliasDefinition ( JSTypeNative.FUNCTION_INSTANCE_TYPE ) ) { return DecompositionType.UNDECOMPOSABLE ; }
Distance : 7

182
Tree	if ( options.deadAssignmentElimination . isAliasDefinition ( OPTION.semiColonRequired ) ) { return DecompositionType.UNDECOMPOSABLE ; }
Code	if ( options.deadAssignmentElimination . isAliasDefinition ( OPTION.semiColonRequired ) ) { return DecompositionType.UNDECOMPOSABLE ; }
Distance : 7

183
Tree	if ( mode.featureSet . isAliasDefinition ( bg ) ) { return false ; }
Code	if ( mode.featureSet . isAliasDefinition ( bg ) ) { return false ; }
Distance : 7

184
Tree	if ( options.deadAssignmentElimination . isAliasDefinition ( nt2.rawType ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( options.deadAssignmentElimination . isAliasDefinition ( nt2.rawType ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

185
Tree	if ( leftOfArrow.type . isAliasDefinition ( JSTypeNative.FUNCTION_INSTANCE_TYPE ) ) { return DecompositionType.UNDECOMPOSABLE ; }
Code	if ( leftOfArrow.type . isAliasDefinition ( JSTypeNative.FUNCTION_INSTANCE_TYPE ) ) { return DecompositionType.UNDECOMPOSABLE ; }
Distance : 7

186
Tree	if ( STRING_CONSTANT . isAliasDefinition ( astValidationEnabled ) ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Code	if ( STRING_CONSTANT . isAliasDefinition ( astValidationEnabled ) ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Distance : 11

187
Tree	if ( STRING_CONSTANT . shouldRunRemoveUnusedCode ( bg ) ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Code	if ( STRING_CONSTANT . shouldRunRemoveUnusedCode ( bg ) ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Distance : 11

188
Tree	if ( options.deadAssignmentElimination . isAliasDefinition ( bg ) ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : MatchResult.NO_MATCH ; }
Code	if ( options.deadAssignmentElimination . isAliasDefinition ( bg ) ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : MatchResult.NO_MATCH ; }
Distance : 11

189
Tree	if ( options.deadAssignmentElimination . isAliasDefinition ( JSTypeNative.FUNCTION_INSTANCE_TYPE ) ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Code	if ( options.deadAssignmentElimination . isAliasDefinition ( JSTypeNative.FUNCTION_INSTANCE_TYPE ) ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Distance : 11

190
Tree	if ( options.deadAssignmentElimination . isAliasDefinition ( bg ) ) { return JAVA_1_8 ? interceptors.target : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Code	if ( options.deadAssignmentElimination . isAliasDefinition ( bg ) ) { return JAVA_1_8 ? interceptors.target : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Distance : 11

191
Tree	if ( options.deadAssignmentElimination . isAliasDefinition ( bg ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Code	if ( options.deadAssignmentElimination . isAliasDefinition ( bg ) ) { return JAVA_1_8 ? NUMBER_CONSTANT : NUMBER_CONSTANT ; }
Distance : 11

192
Tree	if ( leftOfArrow.type . isAliasDefinition ( OPTION.semiColonRequired ) ) { return DecompositionType.UNDECOMPOSABLE ; }
Code	if ( leftOfArrow.type . isAliasDefinition ( OPTION.semiColonRequired ) ) { return DecompositionType.UNDECOMPOSABLE ; }
Distance : 7

193
Tree	if ( options.deadAssignmentElimination . isAliasDefinition ( OPTION.semiColonRequired ) ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Code	if ( options.deadAssignmentElimination . isAliasDefinition ( OPTION.semiColonRequired ) ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Distance : 11

194
Tree	if ( options.deadAssignmentElimination . isAliasDefinition ( fraction.numerator ) ) { return DecompositionType.UNDECOMPOSABLE ; }
Code	if ( options.deadAssignmentElimination . isAliasDefinition ( fraction.numerator ) ) { return DecompositionType.UNDECOMPOSABLE ; }
Distance : 7

195
Tree	if ( options.deadAssignmentElimination . isAliasDefinition ( bg ) ) { return JAVA_1_8 ? startPoint.length : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Code	if ( options.deadAssignmentElimination . isAliasDefinition ( bg ) ) { return JAVA_1_8 ? startPoint.length : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Distance : 11

196
Tree	if ( leftOfArrow.type . isAliasDefinition ( bg ) ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : MatchResult.NO_MATCH ; }
Code	if ( leftOfArrow.type . isAliasDefinition ( bg ) ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : MatchResult.NO_MATCH ; }
Distance : 11

197
Tree	if ( CompilerTestCase.ACTIVE_X_OBJECT_DEF . isAliasDefinition ( bg ) ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Code	if ( CompilerTestCase.ACTIVE_X_OBJECT_DEF . isAliasDefinition ( bg ) ) { return JAVA_1_8 ? IncrementalCheckMode.OFF : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Distance : 11

198
Tree	if ( options.deadAssignmentElimination . isAliasDefinition ( JSTypeNative.FUNCTION_INSTANCE_TYPE ) ) { return Answers.RETURNS_DEFAULTS ; }
Code	if ( options.deadAssignmentElimination . isAliasDefinition ( JSTypeNative.FUNCTION_INSTANCE_TYPE ) ) { return Answers.RETURNS_DEFAULTS ; }
Distance : 7

199
Tree	if ( leftOfArrow.type . isAliasDefinition ( bg ) ) { return JAVA_1_8 ? interceptors.target : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Code	if ( leftOfArrow.type . isAliasDefinition ( bg ) ) { return JAVA_1_8 ? interceptors.target : LocalizedFormats.EULER_ANGLES_SINGULARITY ; }
Distance : 11

========================================================================


========================================================================
Example Number: 70
Parent Code is: 
{ super ( populationLimit ) ; this . elitismRate = elitismRate ; }
-------------------------------------------------------------------------------
Child code is: 
{ super ( populationLimit ) ; setElitismRate ( elitismRate ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=populationLimit}) (215{val=)}) (227{val=;})) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=elitismRate})) (204{val==}) (800{val=elitismRate})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=populationLimit}) (215{val=)}) (227{val=;})) (21 (32 (802{val=setElitismRate}) (214{val=(}) (800{val=elitismRate}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/35/parent/src_main_java_org_apache_commons_math3_genetics_ElitisticListPopulation.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] { callback } ; }
Code	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] { callback } ; }
Distance : 11

1
Tree	{ super(); this . populationLimit = callback ; this . rangeMinorGridlineStroke = new double [] { populationLimit } ; }
Code	{ super(); this . populationLimit = callback ; this . rangeMinorGridlineStroke = new double [] { populationLimit } ; }
Distance : 15

2
Tree	{ super ( populationLimit , callback ) ; this . rangeMinorGridlineStroke = new double [] { populationLimit } ; }
Code	{ super ( populationLimit , callback ) ; this . rangeMinorGridlineStroke = new double [] { populationLimit } ; }
Distance : 12

3
Tree	{ this ( constant , ( populationLimit ) null ) ; }
Code	{ this ( constant , ( populationLimit ) null ) ; }
Distance : 7

4
Tree	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new double [] { newBeta } ; super }
Code	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new double [] { newBeta } ; super }
Distance : 12

5
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ArrayDeque [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ArrayDeque [ NUMBER_CONSTANT ] ; }
Distance : 9

6
Tree	{ super(); this . newBeta = callback ; this . maxGenerations = new double [] { populationLimit } ; }
Code	{ super(); this . newBeta = callback ; this . maxGenerations = new double [] { populationLimit } ; }
Distance : 16

7
Tree	{ this ( iStartMillis , false ) ; }
Code	{ this ( iStartMillis , false ) ; }
Distance : 7

8
Tree	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 13

9
Tree	{ this ( microsphereElements , false ) ; }
Code	{ this ( microsphereElements , false ) ; }
Distance : 7

10
Tree	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] {} ; }
Code	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] {} ; }
Distance : 9

11
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = imaginaryFormat ; }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = imaginaryFormat ; }
Distance : 5

12
Tree	{ this ( BigDecimal , false ) ; }
Code	{ this ( BigDecimal , false ) ; }
Distance : 7

13
Tree	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = imaginaryFormat ; }
Code	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = imaginaryFormat ; }
Distance : 6

14
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new DefaultTransformer [] {} ; }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new DefaultTransformer [] {} ; }
Distance : 8

15
Tree	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new double [] { newBeta } ; }
Code	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new double [] { newBeta } ; }
Distance : 11

16
Tree	{ this ( populationLimit , false ) ; }
Code	{ this ( populationLimit , false ) ; }
Distance : 6

17
Tree	{ super ( constant ) ; this . rangeMinorGridlineStroke = new double [] { populationLimit } ; }
Code	{ super ( constant ) ; this . rangeMinorGridlineStroke = new double [] { populationLimit } ; }
Distance : 11

18
Tree	{ super ( populationLimit ) ; this . maxGenerations = new double [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . maxGenerations = new double [] { populationLimit } ; }
Distance : 10

19
Tree	{ super ( populationLimit , fragment ) ; }
Code	{ super ( populationLimit , fragment ) ; }
Distance : 5

20
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new double [] { iStartMillis } ; }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new double [] { iStartMillis } ; }
Distance : 10

21
Tree	{ this ( newBeta , false ) ; }
Code	{ this ( newBeta , false ) ; }
Distance : 7

22
Tree	{ super ( newBeta ) ; this . maxGenerations = new double [] { populationLimit } ; }
Code	{ super ( newBeta ) ; this . maxGenerations = new double [] { populationLimit } ; }
Distance : 11

23
Tree	{ super ( populationLimit , callback ) ; }
Code	{ super ( populationLimit , callback ) ; }
Distance : 5

24
Tree	{ super ( newBeta , callback ) ; }
Code	{ super ( newBeta , callback ) ; }
Distance : 6

25
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new double [] { populationLimit } ; }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new double [] { populationLimit } ; }
Distance : 10

26
Tree	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new double [] { populationLimit } ; }
Code	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new double [] { populationLimit } ; }
Distance : 11

27
Tree	{ super ( populationLimit , elitismRate ) ; }
Code	{ super ( populationLimit , elitismRate ) ; }
Distance : 4

28
Tree	{ super ( newBeta , elitismRate ) ; }
Code	{ super ( newBeta , elitismRate ) ; }
Distance : 5

29
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = thresholdType ; }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = thresholdType ; }
Distance : 5

30
Tree	{ this . newBeta = checkNotNull ( populationLimit ) ; }
Code	{ this . newBeta = checkNotNull ( populationLimit ) ; }
Distance : 7

31
Tree	{ this . populationLimit = checkNotNull ( populationLimit ) ; }
Code	{ this . populationLimit = checkNotNull ( populationLimit ) ; }
Distance : 6

32
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new double [] { newBeta } ; }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new double [] { newBeta } ; }
Distance : 10

33
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] <> ; }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] <> ; }
Distance : 8

34
Tree	{ super ( constant , callback ) ; }
Code	{ super ( constant , callback ) ; }
Distance : 6

35
Tree	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new DefaultTransformer [] {} ; }
Code	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new DefaultTransformer [] {} ; }
Distance : 9

36
Tree	{ this ( commonTypes , false ) ; }
Code	{ this ( commonTypes , false ) ; }
Distance : 7

37
Tree	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = thresholdType ; }
Code	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = thresholdType ; }
Distance : 6

38
Tree	{ super ( constant ) ; this . rangeMinorGridlineStroke = imaginaryFormat ; }
Code	{ super ( constant ) ; this . rangeMinorGridlineStroke = imaginaryFormat ; }
Distance : 6

39
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = callback ; }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = callback ; }
Distance : 5

40
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ArrayDeque [] {} ; }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ArrayDeque [] {} ; }
Distance : 8

41
Tree	{ super(); this . populationLimit = callback ; this . maxGenerations = new double [] { populationLimit } ; }
Code	{ super(); this . populationLimit = callback ; this . maxGenerations = new double [] { populationLimit } ; }
Distance : 15

42
Tree	{ super ( constant ) ; this . rangeMinorGridlineStroke = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( constant ) ; this . rangeMinorGridlineStroke = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 13

43
Tree	{ this ( minutes , false ) ; }
Code	{ this ( minutes , false ) ; }
Distance : 7

44
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] [] ; }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] [] ; }
Distance : 8

45
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] { callback } ; }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] { callback } ; }
Distance : 10

46
Tree	{ this ( populationLimit , ( newBeta ) null ) ; }
Code	{ this ( populationLimit , ( newBeta ) null ) ; }
Distance : 6

47
Tree	{ this ( constant , ( newBeta ) null ) ; }
Code	{ this ( constant , ( newBeta ) null ) ; }
Distance : 7

48
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = maxGenerations ; }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = maxGenerations ; }
Distance : 5

49
Tree	{ super ( populationLimit ) ; this . maxGenerations = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . maxGenerations = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 12

50
Tree	{ this . newBeta = callback ; }
Code	{ this . newBeta = callback ; }
Distance : 9

51
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = imaginaryFormat . readPaint () ; }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = imaginaryFormat . readPaint () ; }
Distance : 8

52
Tree	{ super ( microsphereElements ) ; }
Code	{ super ( microsphereElements ) ; }
Distance : 6

53
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new DefaultTransformer [] { callback } ; }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new DefaultTransformer [] { callback } ; }
Distance : 10

54
Tree	{ super ( newBeta , fragment ) ; }
Code	{ super ( newBeta , fragment ) ; }
Distance : 6

55
Tree	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new DefaultTransformer [] { imaginaryFormat } ; }
Code	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new DefaultTransformer [] { imaginaryFormat } ; }
Distance : 11

56
Tree	{ this ( populationLimit , ( populationLimit ) null ) ; }
Code	{ this ( populationLimit , ( populationLimit ) null ) ; }
Distance : 6

57
Tree	{ this . constant = checkNotNull ( populationLimit ) ; }
Code	{ this . constant = checkNotNull ( populationLimit ) ; }
Distance : 7

58
Tree	{ this . newBeta = checkNotNull ( iStartMillis ) ; }
Code	{ this . newBeta = checkNotNull ( iStartMillis ) ; }
Distance : 7

59
Tree	{ super ( constant , elitismRate ) ; }
Code	{ super ( constant , elitismRate ) ; }
Distance : 5

60
Tree	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = callback ; }
Code	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = callback ; }
Distance : 6

61
Tree	{ this ( constant , false ) ; }
Code	{ this ( constant , false ) ; }
Distance : 7

62
Tree	{ ; }
Code	{ ; }
Distance : 9

63
Tree	{ this . populationLimit = callback ; }
Code	{ this . populationLimit = callback ; }
Distance : 8

64
Tree	{ this ( newBeta , ( newBeta ) null ) ; }
Code	{ this ( newBeta , ( newBeta ) null ) ; }
Distance : 7

65
Tree	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new DefaultTransformer [ NUMBER_CONSTANT ] ; }
Code	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new DefaultTransformer [ NUMBER_CONSTANT ] ; }
Distance : 10

66
Tree	{ super ( populationLimit ) ; }
Code	{ super ( populationLimit ) ; }
Distance : 5

67
Tree	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] { imaginaryFormat } ; }
Code	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] { imaginaryFormat } ; }
Distance : 11

68
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 12

69
Tree	{ this . newBeta = callback ; this . maxGenerations = thresholdType ; }
Code	{ this . newBeta = callback ; this . maxGenerations = thresholdType ; }
Distance : 10

70
Tree	{ super ( newBeta ) ; this . maxGenerations = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( newBeta ) ; this . maxGenerations = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 13

71
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new double [] { populationLimit } ; super }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new double [] { populationLimit } ; super }
Distance : 11

72
Tree	{ super ( constant ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [ NUMBER_CONSTANT ] ; }
Code	{ super ( constant ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [ NUMBER_CONSTANT ] ; }
Distance : 10

73
Tree	{ super ( newBeta ) ; this . labelGenerator = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( newBeta ) ; this . labelGenerator = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 13

74
Tree	{ super ( populationLimit ) ; this . maxGenerations = new ThreadSafeDelegatingErrorManager [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . maxGenerations = new ThreadSafeDelegatingErrorManager [ NUMBER_CONSTANT ] ; }
Distance : 9

75
Tree	{ super(); this . populationLimit = checkNotNull ( newBeta ) ; super }
Code	{ super(); this . populationLimit = checkNotNull ( newBeta ) ; super }
Distance : 8

76
Tree	{ this ( newBeta , ( BigDecimal ) null ) ; }
Code	{ this ( newBeta , ( BigDecimal ) null ) ; }
Distance : 7

77
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] extends ; }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] extends ; }
Distance : 8

78
Tree	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = imaginaryFormat . readPaint () ; }
Code	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = imaginaryFormat . readPaint () ; }
Distance : 9

79
Tree	{ super ( BigDecimal ) ; }
Code	{ super ( BigDecimal ) ; }
Distance : 6

80
Tree	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new double [] { populationLimit } ; static }
Code	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new double [] { populationLimit } ; static }
Distance : 12

81
Tree	{ this ( newBeta , ( populationLimit ) null ) ; }
Code	{ this ( newBeta , ( populationLimit ) null ) ; }
Distance : 7

82
Tree	{ super(); this . populationLimit = imaginaryFormat ; this . maxGenerations = new double [] { populationLimit } ; }
Code	{ super(); this . populationLimit = imaginaryFormat ; this . maxGenerations = new double [] { populationLimit } ; }
Distance : 15

83
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new DefaultTransformer [] {} ; super }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new DefaultTransformer [] {} ; super }
Distance : 9

84
Tree	{ super ( populationLimit ) ; this . labelGenerator = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . labelGenerator = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 12

85
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] {} ; super }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] {} ; super }
Distance : 9

86
Tree	{ this . newBeta = thresholdType ; }
Code	{ this . newBeta = thresholdType ; }
Distance : 9

87
Tree	{ this . populationLimit = thresholdType ; }
Code	{ this . populationLimit = thresholdType ; }
Distance : 8

88
Tree	{ super ( newBeta , elitismRate ) ; this . rangeMinorGridlineStroke = new double [] { populationLimit } ; }
Code	{ super ( newBeta , elitismRate ) ; this . rangeMinorGridlineStroke = new double [] { populationLimit } ; }
Distance : 13

89
Tree	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new double [] { populationLimit } ; super }
Code	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new double [] { populationLimit } ; super }
Distance : 12

90
Tree	{ super(); this . populationLimit = checkNotNull ( populationLimit ) ; super }
Code	{ super(); this . populationLimit = checkNotNull ( populationLimit ) ; super }
Distance : 8

91
Tree	{ super ( constant ) ; }
Code	{ super ( constant ) ; }
Distance : 6

92
Tree	{ super ( populationLimit , elitismRate ) ; this . rangeMinorGridlineStroke = new double [] { populationLimit } ; }
Code	{ super ( populationLimit , elitismRate ) ; this . rangeMinorGridlineStroke = new double [] { populationLimit } ; }
Distance : 12

93
Tree	{ super ( newBeta , callback ) ; this . rangeMinorGridlineStroke = new double [] { newBeta } ; }
Code	{ super ( newBeta , callback ) ; this . rangeMinorGridlineStroke = new double [] { newBeta } ; }
Distance : 13

94
Tree	{ this . populationLimit = callback ; this . maxGenerations = thresholdType ; }
Code	{ this . populationLimit = callback ; this . maxGenerations = thresholdType ; }
Distance : 9

95
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [ NUMBER_CONSTANT ] ; }
Distance : 9

96
Tree	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new DefaultTransformer [] { callback } ; }
Code	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new DefaultTransformer [] { callback } ; }
Distance : 11

97
Tree	{ super(); this . commonTypes = checkNotNull ( populationLimit ) ; super }
Code	{ super(); this . commonTypes = checkNotNull ( populationLimit ) ; super }
Distance : 8

98
Tree	{ this . newBeta = callback ; this . rangeMinorGridlineStroke = thresholdType ; }
Code	{ this . newBeta = callback ; this . rangeMinorGridlineStroke = thresholdType ; }
Distance : 10

99
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] {} ; }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] {} ; }
Distance : 8

100
Tree	{ this . commonTypes = checkNotNull ( populationLimit ) ; }
Code	{ this . commonTypes = checkNotNull ( populationLimit ) ; }
Distance : 7

101
Tree	{ super ( iStartMillis ) ; }
Code	{ super ( iStartMillis ) ; }
Distance : 6

102
Tree	{ this . newBeta = elitismRate ; }
Code	{ this . newBeta = elitismRate ; }
Distance : 8

103
Tree	{ this . newBeta = imaginaryFormat ; this . maxGenerations = imaginaryFormat ; }
Code	{ this . newBeta = imaginaryFormat ; this . maxGenerations = imaginaryFormat ; }
Distance : 10

104
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new double [] { populationLimit } ; if }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new double [] { populationLimit } ; if }
Distance : 11

105
Tree	{ super ( newBeta , callback ) ; this . maxGenerations = new double [] { populationLimit } ; }
Code	{ super ( newBeta , callback ) ; this . maxGenerations = new double [] { populationLimit } ; }
Distance : 13

106
Tree	{ super(); this . populationLimit = callback ; this . maxGenerations = new double [] { newBeta } ; }
Code	{ super(); this . populationLimit = callback ; this . maxGenerations = new double [] { newBeta } ; }
Distance : 15

107
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] { imaginaryFormat } ; }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] { imaginaryFormat } ; }
Distance : 10

108
Tree	{ this . newBeta = imaginaryFormat ; }
Code	{ this . newBeta = imaginaryFormat ; }
Distance : 9

109
Tree	{ super ( newBeta ) ; }
Code	{ super ( newBeta ) ; }
Distance : 6

110
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = thresholdType . readPaint () ; }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = thresholdType . readPaint () ; }
Distance : 8

111
Tree	{ this . newBeta = callback ; this . maxGenerations = imaginaryFormat ; }
Code	{ this . newBeta = callback ; this . maxGenerations = imaginaryFormat ; }
Distance : 10

112
Tree	{ this . populationLimit = callback ; this . maxGenerations = imaginaryFormat ; }
Code	{ this . populationLimit = callback ; this . maxGenerations = imaginaryFormat ; }
Distance : 9

113
Tree	{ super(); this . newBeta = callback ; this . rangeMinorGridlineStroke = imaginaryFormat ; }
Code	{ super(); this . newBeta = callback ; this . rangeMinorGridlineStroke = imaginaryFormat ; }
Distance : 11

114
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new DefaultTransformer [ NUMBER_CONSTANT ] ; }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new DefaultTransformer [ NUMBER_CONSTANT ] ; }
Distance : 9

115
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = callback . readPaint () ; }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = callback . readPaint () ; }
Distance : 8

116
Tree	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] {} ; super }
Code	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] {} ; super }
Distance : 10

117
Tree	{ this . populationLimit = imaginaryFormat ; }
Code	{ this . populationLimit = imaginaryFormat ; }
Distance : 8

118
Tree	{ super(); this . populationLimit = callback ; this . maxGenerations = thresholdType ; }
Code	{ super(); this . populationLimit = callback ; this . maxGenerations = thresholdType ; }
Distance : 10

119
Tree	{ super(); this . populationLimit = callback ; this . maxGenerations = imaginaryFormat ; }
Code	{ super(); this . populationLimit = callback ; this . maxGenerations = imaginaryFormat ; }
Distance : 10

120
Tree	{ super ( end ) ; }
Code	{ super ( end ) ; }
Distance : 6

121
Tree	{ super(); this . newBeta = checkNotNull ( newBeta ) ; super }
Code	{ super(); this . newBeta = checkNotNull ( newBeta ) ; super }
Distance : 8

122
Tree	{ this . newBeta = callback ; this . rangeMinorGridlineStroke = imaginaryFormat ; }
Code	{ this . newBeta = callback ; this . rangeMinorGridlineStroke = imaginaryFormat ; }
Distance : 10

123
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new double [] { populationLimit } ; static }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new double [] { populationLimit } ; static }
Distance : 11

124
Tree	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new DefaultTransformer [] {} ; super }
Code	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new DefaultTransformer [] {} ; super }
Distance : 10

125
Tree	{ super ( populationLimit , callback ) ; this . rangeMinorGridlineStroke = new double [] { newBeta } ; }
Code	{ super ( populationLimit , callback ) ; this . rangeMinorGridlineStroke = new double [] { newBeta } ; }
Distance : 12

126
Tree	{ this . populationLimit = elitismRate ; }
Code	{ this . populationLimit = elitismRate ; }
Distance : 7

127
Tree	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new ArrayDeque [ NUMBER_CONSTANT ] ; }
Code	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new ArrayDeque [ NUMBER_CONSTANT ] ; }
Distance : 10

128
Tree	{ this . newBeta = checkNotNull ( newBeta ) ; }
Code	{ this . newBeta = checkNotNull ( newBeta ) ; }
Distance : 7

129
Tree	{ this . populationLimit = callback ; this . rangeMinorGridlineStroke = imaginaryFormat ; }
Code	{ this . populationLimit = callback ; this . rangeMinorGridlineStroke = imaginaryFormat ; }
Distance : 9

130
Tree	{ super(); this . populationLimit = imaginaryFormat ; this . maxGenerations = imaginaryFormat ; }
Code	{ super(); this . populationLimit = imaginaryFormat ; this . maxGenerations = imaginaryFormat ; }
Distance : 10

131
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new double [] { newBeta } ; super }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new double [] { newBeta } ; super }
Distance : 11

132
Tree	{ super ( newBeta , callback ) ; this . rangeMinorGridlineStroke = new double [] { populationLimit } ; }
Code	{ super ( newBeta , callback ) ; this . rangeMinorGridlineStroke = new double [] { populationLimit } ; }
Distance : 13

133
Tree	{ super ( minutes ) ; }
Code	{ super ( minutes ) ; }
Distance : 6

134
Tree	{ super(); this . populationLimit = imaginaryFormat ; this . rangeMinorGridlineStroke = new double [] { populationLimit } ; }
Code	{ super(); this . populationLimit = imaginaryFormat ; this . rangeMinorGridlineStroke = new double [] { populationLimit } ; }
Distance : 15

135
Tree	{ this . populationLimit = checkNotNull ( newBeta ) ; }
Code	{ this . populationLimit = checkNotNull ( newBeta ) ; }
Distance : 6

136
Tree	{ this . iStartMillis = checkNotNull ( populationLimit ) ; }
Code	{ this . iStartMillis = checkNotNull ( populationLimit ) ; }
Distance : 7

137
Tree	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = thresholdType . readPaint () ; }
Code	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = thresholdType . readPaint () ; }
Distance : 9

138
Tree	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [ NUMBER_CONSTANT ] ; }
Code	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [ NUMBER_CONSTANT ] ; }
Distance : 10

139
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] [] ; super }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] [] ; super }
Distance : 9

140
Tree	{ super(); this . populationLimit = callback ; this . rangeMinorGridlineStroke = new double [] { newBeta } ; }
Code	{ super(); this . populationLimit = callback ; this . rangeMinorGridlineStroke = new double [] { newBeta } ; }
Distance : 15

141
Tree	{ super ( populationLimit ) ; this . domainMinorGridlineStroke = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( populationLimit ) ; this . domainMinorGridlineStroke = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 12

142
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = createConvexHullGenerator ( callback ) ; }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = createConvexHullGenerator ( callback ) ; }
Distance : 6

143
Tree	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = imaginaryFormat . invocationListeners () ; }
Code	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = imaginaryFormat . invocationListeners () ; }
Distance : 9

144
Tree	{ super(); this . populationLimit = callback ; this . rangeMinorGridlineStroke = thresholdType ; }
Code	{ super(); this . populationLimit = callback ; this . rangeMinorGridlineStroke = thresholdType ; }
Distance : 10

145
Tree	{ super(); this . populationLimit = checkNotNull ( iStartMillis ) ; super }
Code	{ super(); this . populationLimit = checkNotNull ( iStartMillis ) ; super }
Distance : 8

146
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new DefaultTransformer [] { imaginaryFormat } ; }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new DefaultTransformer [] { imaginaryFormat } ; }
Distance : 10

147
Tree	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new double [] { populationLimit } ; if }
Code	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new double [] { populationLimit } ; if }
Distance : 12

148
Tree	{ super(); this . newBeta = callback ; this . rangeMinorGridlineStroke = new double [] { populationLimit } ; }
Code	{ super(); this . newBeta = callback ; this . rangeMinorGridlineStroke = new double [] { populationLimit } ; }
Distance : 16

149
Tree	{ super(); this . constant = checkNotNull ( populationLimit ) ; super }
Code	{ super(); this . constant = checkNotNull ( populationLimit ) ; super }
Distance : 8

150
Tree	{ super(); this . newBeta = checkNotNull ( populationLimit ) ; super }
Code	{ super(); this . newBeta = checkNotNull ( populationLimit ) ; super }
Distance : 8

151
Tree	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] <> ; super }
Code	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] <> ; super }
Distance : 10

152
Tree	{ super(); this . populationLimit = callback ; this . rangeMinorGridlineStroke = imaginaryFormat ; }
Code	{ super(); this . populationLimit = callback ; this . rangeMinorGridlineStroke = imaginaryFormat ; }
Distance : 10

153
Tree	{ super ( populationLimit , callback ) ; this . maxGenerations = new double [] { populationLimit } ; }
Code	{ super ( populationLimit , callback ) ; this . maxGenerations = new double [] { populationLimit } ; }
Distance : 12

154
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] <> ; super }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] <> ; super }
Distance : 9

155
Tree	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = createConvexHullGenerator ( callback ) ; }
Code	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = createConvexHullGenerator ( callback ) ; }
Distance : 7

156
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = createConvexHullGenerator ( imaginaryFormat ) ; }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = createConvexHullGenerator ( imaginaryFormat ) ; }
Distance : 6

157
Tree	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = createConvexHullGenerator ( imaginaryFormat ) ; }
Code	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = createConvexHullGenerator ( imaginaryFormat ) ; }
Distance : 7

158
Tree	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = thresholdType ; super }
Code	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = thresholdType ; super }
Distance : 7

159
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = createConvexHullGenerator ( Second ) ; }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = createConvexHullGenerator ( Second ) ; }
Distance : 6

160
Tree	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = imaginaryFormat ; super }
Code	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = imaginaryFormat ; super }
Distance : 7

161
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = createConvexHullGenerator ( elitismRate ) ; }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = createConvexHullGenerator ( elitismRate ) ; }
Distance : 5

162
Tree	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = createConvexHullGenerator ( thresholdType ) ; }
Code	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = createConvexHullGenerator ( thresholdType ) ; }
Distance : 7

163
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , System.out , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , System.out , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Distance : 19

164
Tree	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = imaginaryFormat ; fireAnnotationChanged }
Code	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = imaginaryFormat ; fireAnnotationChanged }
Distance : 7

165
Tree	{ super(); this . newBeta = callback ; this . maxGenerations = imaginaryFormat ; }
Code	{ super(); this . newBeta = callback ; this . maxGenerations = imaginaryFormat ; }
Distance : 11

166
Tree	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = callback . readPaint () ; }
Code	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = callback . readPaint () ; }
Distance : 9

167
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = imaginaryFormat ; super }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = imaginaryFormat ; super }
Distance : 6

168
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = thresholdType ; super }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = thresholdType ; super }
Distance : 6

169
Tree	{ super(); this . newBeta = checkNotNull ( iStartMillis ) ; super }
Code	{ super(); this . newBeta = checkNotNull ( iStartMillis ) ; super }
Distance : 8

170
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , source.nDev , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , source.nDev , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Distance : 19

171
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = imaginaryFormat ; fireAnnotationChanged }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = imaginaryFormat ; fireAnnotationChanged }
Distance : 6

172
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = thresholdType ; fireAnnotationChanged }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = thresholdType ; fireAnnotationChanged }
Distance : 6

173
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , Ref.Type.ALIASING_GET , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , Ref.Type.ALIASING_GET , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Distance : 19

174
Tree	{ super(); this . newBeta = callback ; this . maxGenerations = thresholdType ; }
Code	{ super(); this . newBeta = callback ; this . maxGenerations = thresholdType ; }
Distance : 11

175
Tree	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , System.out , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Code	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , System.out , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Distance : 20

176
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ArrayDeque [] {} ; super }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ArrayDeque [] {} ; super }
Distance : 9

177
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = imaginaryFormat ; if }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = imaginaryFormat ; if }
Distance : 6

178
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = createConvexHullGenerator ( thresholdType ) ; }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = createConvexHullGenerator ( thresholdType ) ; }
Distance : 6

179
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = imaginaryFormat . invocationListeners () ; }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = imaginaryFormat . invocationListeners () ; }
Distance : 8

180
Tree	{ this ( populationLimit , ( BigDecimal ) null ) ; }
Code	{ this ( populationLimit , ( BigDecimal ) null ) ; }
Distance : 6

181
Tree	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , source.nDev , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Code	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , source.nDev , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Distance : 20

182
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Distance : 19

183
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , System.out , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , System.out , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Distance : 23

184
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , System.out , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , oldMockHandler.mockSettings , } ; }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , System.out , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , oldMockHandler.mockSettings , } ; }
Distance : 23

185
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , TokenType.STRING , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , TokenType.STRING , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Distance : 19

186
Tree	{ ; } class
Code	{ ; } class
Distance : 10

187
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , source.nDev , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , source.nDev , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Distance : 23

188
Tree	{ ; } array
Code	{ ; } array
Distance : 10

189
Tree	{ ; } f
Code	{ ; } f
Distance : 10

190
Tree	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , Ref.Type.ALIASING_GET , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Code	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , Ref.Type.ALIASING_GET , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Distance : 20

191
Tree	{ ; } mock
Code	{ ; } mock
Distance : 10

192
Tree	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , System.out , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Code	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , System.out , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Distance : 24

193
Tree	{ ; } MathRuntimeException
Code	{ ; } MathRuntimeException
Distance : 10

194
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , Ref.Type.ALIASING_GET , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , Ref.Type.ALIASING_GET , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Distance : 23

195
Tree	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , source.nDev , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Code	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , source.nDev , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Distance : 24

196
Tree	{ ; } Override
Code	{ ; } Override
Distance : 10

197
Tree	{ ; } notifyListeners
Code	{ ; } notifyListeners
Distance : 10

198
Tree	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , TokenType.STRING , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Code	{ super ( populationLimit ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , TokenType.STRING , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Distance : 23

199
Tree	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , Ref.Type.ALIASING_GET , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Code	{ super ( newBeta ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] { interpolator.currentDerivative , Ref.Type.ALIASING_GET , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , Verification.EXPLICIT , } ; }
Distance : 24

========================================================================


========================================================================
Example Number: 71
Parent Code is: 
{ super ( chromosomes , populationLimit ) ; this . elitismRate = elitismRate ; }
-------------------------------------------------------------------------------
Child code is: 
{ super ( chromosomes , populationLimit ) ; setElitismRate ( elitismRate ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=chromosomes}) (234{val=,}) (800{val=populationLimit}) (215{val=)}) (227{val=;})) (21 (7 (22 (315{val=this}) (235{val=.}) (800{val=elitismRate})) (204{val==}) (800{val=elitismRate})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (46 (349{val=super}) (214{val=(}) (800{val=chromosomes}) (234{val=,}) (800{val=populationLimit}) (215{val=)}) (227{val=;})) (21 (32 (802{val=setElitismRate}) (214{val=(}) (800{val=elitismRate}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/35/parent/src_main_java_org_apache_commons_math3_genetics_ElitisticListPopulation.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { yTmp } ; }
Code	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { yTmp } ; }
Distance : 12

1
Tree	{ super ( yTmp , newBeta ) ; this . maxGenerations = new double [] { yTmp } ; }
Code	{ super ( yTmp , newBeta ) ; this . maxGenerations = new double [] { yTmp } ; }
Distance : 12

2
Tree	{ super ( yTmp , searchSeq ) ; this . rangeMinorGridlineStroke = new double [] { yTmp } ; }
Code	{ super ( yTmp , searchSeq ) ; this . rangeMinorGridlineStroke = new double [] { yTmp } ; }
Distance : 12

3
Tree	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { chromosomes } ; }
Code	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { chromosomes } ; }
Distance : 12

4
Tree	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { dialBackgroundPaint } ; }
Code	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { dialBackgroundPaint } ; }
Distance : 12

5
Tree	{ this ( relativeThreshold , false ) ; }
Code	{ this ( relativeThreshold , false ) ; }
Distance : 8

6
Tree	{ super ( Locale.JAPAN , newBeta ) ; this . maxGenerations = new double [] { dialBackgroundPaint } ; }
Code	{ super ( Locale.JAPAN , newBeta ) ; this . maxGenerations = new double [] { dialBackgroundPaint } ; }
Distance : 12

7
Tree	{ super ( dialBackgroundPaint , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { yTmp } ; }
Code	{ super ( dialBackgroundPaint , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { yTmp } ; }
Distance : 12

8
Tree	{ this ( Locale.JAPAN , newBeta ) ; }
Code	{ this ( Locale.JAPAN , newBeta ) ; }
Distance : 8

9
Tree	{ super ( chromosomes ) ; this . rangeMinorGridlineStroke = new double [] { dialBackgroundPaint } ; }
Code	{ super ( chromosomes ) ; this . rangeMinorGridlineStroke = new double [] { dialBackgroundPaint } ; }
Distance : 12

10
Tree	{ super ( ComposableFunction.SINH , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { yTmp } ; }
Code	{ super ( ComposableFunction.SINH , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { yTmp } ; }
Distance : 12

11
Tree	{ this ( Locale.JAPAN , populationLimit ) ; }
Code	{ this ( Locale.JAPAN , populationLimit ) ; }
Distance : 7

12
Tree	{ super ( yTmp , searchSeq ) ; this . maxGenerations = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( yTmp , searchSeq ) ; this . maxGenerations = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 14

13
Tree	{ this ( METHOD_NAME , false ) ; }
Code	{ this ( METHOD_NAME , false ) ; }
Distance : 8

14
Tree	{ this ( changeListeners , false ) ; }
Code	{ this ( changeListeners , false ) ; }
Distance : 8

15
Tree	{ super ( yTmp ) ; this . domainMinorGridlineStroke = new double [] { dialBackgroundPaint } ; }
Code	{ super ( yTmp ) ; this . domainMinorGridlineStroke = new double [] { dialBackgroundPaint } ; }
Distance : 13

16
Tree	{ super ( dialBackgroundPaint , searchSeq ) ; }
Code	{ super ( dialBackgroundPaint , searchSeq ) ; }
Distance : 7

17
Tree	{ this ( yTmp , populationLimit , false ) ; }
Code	{ this ( yTmp , populationLimit , false ) ; }
Distance : 7

18
Tree	{ this . dialBackgroundPaint = percent ; this . rangeMinorGridlineStroke = imaginaryFormat ; }
Code	{ this . dialBackgroundPaint = percent ; this . rangeMinorGridlineStroke = imaginaryFormat ; }
Distance : 11

19
Tree	{ super ( Locale.JAPAN , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { yTmp } ; }
Code	{ super ( Locale.JAPAN , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { yTmp } ; }
Distance : 12

20
Tree	{ this . dialBackgroundPaint = percent ; fireChangeEvent () ; }
Code	{ this . dialBackgroundPaint = percent ; fireChangeEvent () ; }
Distance : 10

21
Tree	{ super ( yTmp , newBeta ) ; this . maxGenerations = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( yTmp , newBeta ) ; this . maxGenerations = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 14

22
Tree	{ super ( yTmp , DEFAULT_EXPANSION_FACTOR ) ; }
Code	{ super ( yTmp , DEFAULT_EXPANSION_FACTOR ) ; }
Distance : 7

23
Tree	{ this . changeListeners = newBeta ; fireChangeEvent () ; }
Code	{ this . changeListeners = newBeta ; fireChangeEvent () ; }
Distance : 10

24
Tree	{ super ( Locale.JAPAN , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { dialBackgroundPaint } ; }
Code	{ super ( Locale.JAPAN , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { dialBackgroundPaint } ; }
Distance : 12

25
Tree	{ super ( yTmp ) ; this . rangeMinorGridlineStroke = new double [] { dialBackgroundPaint } ; }
Code	{ super ( yTmp ) ; this . rangeMinorGridlineStroke = new double [] { dialBackgroundPaint } ; }
Distance : 13

26
Tree	{ this . dialBackgroundPaint = newBeta ; fireChangeEvent () ; }
Code	{ this . dialBackgroundPaint = newBeta ; fireChangeEvent () ; }
Distance : 10

27
Tree	{ super ( yTmp , constant ) ; }
Code	{ super ( yTmp , constant ) ; }
Distance : 7

28
Tree	{ this ( one , false ) ; }
Code	{ this ( one , false ) ; }
Distance : 8

29
Tree	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = imaginaryFormat ; }
Code	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = imaginaryFormat ; }
Distance : 7

30
Tree	{ this ( wrong , false ) ; }
Code	{ this ( wrong , false ) ; }
Distance : 8

31
Tree	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { optim } ; }
Code	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { optim } ; }
Distance : 12

32
Tree	{ this ( yTmp , ( newBeta ) null ) ; }
Code	{ this ( yTmp , ( newBeta ) null ) ; }
Distance : 8

33
Tree	{ super ( yTmp , newBeta ) ; this . domainMinorGridlineStroke = new double [] { yTmp } ; }
Code	{ super ( yTmp , newBeta ) ; this . domainMinorGridlineStroke = new double [] { yTmp } ; }
Distance : 12

34
Tree	{ this . dialBackgroundPaint = percent ; }
Code	{ this . dialBackgroundPaint = percent ; }
Distance : 11

35
Tree	{ super ( Locale.JAPAN , newBeta ) ; this . maxGenerations = new double [] { yTmp } ; }
Code	{ super ( Locale.JAPAN , newBeta ) ; this . maxGenerations = new double [] { yTmp } ; }
Distance : 12

36
Tree	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 14

37
Tree	{ this ( yTmp , newBeta , false ) ; }
Code	{ this ( yTmp , newBeta , false ) ; }
Distance : 8

38
Tree	{ this ( LocalizedFormats.MAX_COUNT_EXCEEDED , populationLimit ) ; }
Code	{ this ( LocalizedFormats.MAX_COUNT_EXCEEDED , populationLimit ) ; }
Distance : 7

39
Tree	{ super ( yTmp ) ; this . labelGenerator = new double [] { dialBackgroundPaint } ; }
Code	{ super ( yTmp ) ; this . labelGenerator = new double [] { dialBackgroundPaint } ; }
Distance : 13

40
Tree	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 18

41
Tree	{ super ( Locale.JAPAN , populationLimit ) ; this . rangeMinorGridlineStroke = new double [] { yTmp } ; }
Code	{ super ( Locale.JAPAN , populationLimit ) ; this . rangeMinorGridlineStroke = new double [] { yTmp } ; }
Distance : 11

42
Tree	{ this . dialBackgroundPaint = percent ; this . maxGenerations = thresholdType ; }
Code	{ this . dialBackgroundPaint = percent ; this . maxGenerations = thresholdType ; }
Distance : 11

43
Tree	{ this ( yTmp , ( constant ) null ) ; }
Code	{ this ( yTmp , ( constant ) null ) ; }
Distance : 8

44
Tree	{ super ( yTmp , newBeta ) ; this . maxGenerations = imaginaryFormat ; }
Code	{ super ( yTmp , newBeta ) ; this . maxGenerations = imaginaryFormat ; }
Distance : 7

45
Tree	{ this ( chromosomes , ( newBeta ) null ) ; }
Code	{ this ( chromosomes , ( newBeta ) null ) ; }
Distance : 7

46
Tree	{ this . changeListeners = newBeta ; }
Code	{ this . changeListeners = newBeta ; }
Distance : 11

47
Tree	{ this . dialBackgroundPaint = percent ; this . rangeMinorGridlineStroke = paint ; }
Code	{ this . dialBackgroundPaint = percent ; this . rangeMinorGridlineStroke = paint ; }
Distance : 11

48
Tree	{ this ( yTmp , false ) ; }
Code	{ this ( yTmp , false ) ; }
Distance : 8

49
Tree	{ this ( yTmp , ( populationLimit ) null ) ; }
Code	{ this ( yTmp , ( populationLimit ) null ) ; }
Distance : 7

50
Tree	{ super ( yTmp ) ; this . rangeMinorGridlineStroke = new double [] { yTmp } ; }
Code	{ super ( yTmp ) ; this . rangeMinorGridlineStroke = new double [] { yTmp } ; }
Distance : 13

51
Tree	{ super ( yTmp , newBeta ) ; }
Code	{ super ( yTmp , newBeta ) ; }
Distance : 7

52
Tree	{ super ( yTmp ) ; this . maxGenerations = new double [] { dialBackgroundPaint } ; }
Code	{ super ( yTmp ) ; this . maxGenerations = new double [] { dialBackgroundPaint } ; }
Distance : 13

53
Tree	{ this . dialBackgroundPaint = percent ; this . maxGenerations = imaginaryFormat ; }
Code	{ this . dialBackgroundPaint = percent ; this . maxGenerations = imaginaryFormat ; }
Distance : 11

54
Tree	{ this ( dialBackgroundPaint , ( newBeta ) null ) ; }
Code	{ this ( dialBackgroundPaint , ( newBeta ) null ) ; }
Distance : 8

55
Tree	{ super ( yTmp ) ; this . positiveBarPaint = new double [] { dialBackgroundPaint } ; }
Code	{ super ( yTmp ) ; this . positiveBarPaint = new double [] { dialBackgroundPaint } ; }
Distance : 13

56
Tree	{ this ( dialBackgroundPaint , false ) ; }
Code	{ this ( dialBackgroundPaint , false ) ; }
Distance : 8

57
Tree	{ this ( LocalizedFormats.MAX_COUNT_EXCEEDED , newBeta ) ; }
Code	{ this ( LocalizedFormats.MAX_COUNT_EXCEEDED , newBeta ) ; }
Distance : 8

58
Tree	{ this ( ComposableFunction.SQRT , newBeta ) ; }
Code	{ this ( ComposableFunction.SQRT , newBeta ) ; }
Distance : 8

59
Tree	{ this . yTmp = percent ; fireChangeEvent () ; }
Code	{ this . yTmp = percent ; fireChangeEvent () ; }
Distance : 10

60
Tree	{ this ( dialBackgroundPaint , searchSeq , false ) ; }
Code	{ this ( dialBackgroundPaint , searchSeq , false ) ; }
Distance : 8

61
Tree	{ this ( new ThrowsException ( yTmp ) , populationLimit ) ; }
Code	{ this ( new ThrowsException ( yTmp ) , populationLimit ) ; }
Distance : 9

62
Tree	{ this ( System.in , newBeta ) ; }
Code	{ this ( System.in , newBeta ) ; }
Distance : 8

63
Tree	{ this ( new ThrowsException ( yTmp ) , newBeta ) ; }
Code	{ this ( new ThrowsException ( yTmp ) , newBeta ) ; }
Distance : 9

64
Tree	{ super ( Locale.JAPAN , populationLimit ) ; this . rangeMinorGridlineStroke = new double [] { dialBackgroundPaint } ; }
Code	{ super ( Locale.JAPAN , populationLimit ) ; this . rangeMinorGridlineStroke = new double [] { dialBackgroundPaint } ; }
Distance : 11

65
Tree	{ this ( chromosomes , newBeta , false ) ; }
Code	{ this ( chromosomes , newBeta , false ) ; }
Distance : 7

66
Tree	{ this . dialBackgroundPaint = units ; fireChangeEvent () ; }
Code	{ this . dialBackgroundPaint = units ; fireChangeEvent () ; }
Distance : 10

67
Tree	{ super ( dialBackgroundPaint , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( dialBackgroundPaint , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 14

68
Tree	{ this ( yTmp , ( DEFAULT_EXPANSION_FACTOR ) null ) ; }
Code	{ this ( yTmp , ( DEFAULT_EXPANSION_FACTOR ) null ) ; }
Distance : 8

69
Tree	{ super ( chromosomes , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 13

70
Tree	{ this . changeListeners = percent ; fireChangeEvent () ; }
Code	{ this . changeListeners = percent ; fireChangeEvent () ; }
Distance : 10

71
Tree	{ this ( yTmp , searchSeq , false ) ; }
Code	{ this ( yTmp , searchSeq , false ) ; }
Distance : 8

72
Tree	{ this ( chromosomes , false ) ; }
Code	{ this ( chromosomes , false ) ; }
Distance : 7

73
Tree	{ this ( yTmp , newBeta , null ) ; }
Code	{ this ( yTmp , newBeta , null ) ; }
Distance : 8

74
Tree	{ this ( dialBackgroundPaint , newBeta , false ) ; }
Code	{ this ( dialBackgroundPaint , newBeta , false ) ; }
Distance : 8

75
Tree	{ this . dialBackgroundPaint = populationSize ; }
Code	{ this . dialBackgroundPaint = populationSize ; }
Distance : 11

76
Tree	{ this . dialBackgroundPaint = newBeta ; }
Code	{ this . dialBackgroundPaint = newBeta ; }
Distance : 11

77
Tree	{ super ( yTmp , searchSeq ) ; }
Code	{ super ( yTmp , searchSeq ) ; }
Distance : 7

78
Tree	{ this . yTmp = percent ; }
Code	{ this . yTmp = percent ; }
Distance : 11

79
Tree	{ super ( dialBackgroundPaint , newBeta ) ; }
Code	{ super ( dialBackgroundPaint , newBeta ) ; }
Distance : 7

80
Tree	{ super ( yTmp , newBeta ) ; this . labelGenerator = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( yTmp , newBeta ) ; this . labelGenerator = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 14

81
Tree	{ this . dialBackgroundPaint = century ; fireChangeEvent () ; }
Code	{ this . dialBackgroundPaint = century ; fireChangeEvent () ; }
Distance : 10

82
Tree	{ this . dialBackgroundPaint = percent ; this . rangeMinorGridlineStroke = thresholdType ; }
Code	{ this . dialBackgroundPaint = percent ; this . rangeMinorGridlineStroke = thresholdType ; }
Distance : 11

83
Tree	{ this . changeListeners = percent ; }
Code	{ this . changeListeners = percent ; }
Distance : 11

84
Tree	{ super ( yTmp , newBeta ) ; this . domainMinorGridlineStroke = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( yTmp , newBeta ) ; this . domainMinorGridlineStroke = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 14

85
Tree	{ super ( ComposableFunction.SINH , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { dialBackgroundPaint } ; }
Code	{ super ( ComposableFunction.SINH , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { dialBackgroundPaint } ; }
Distance : 12

86
Tree	{ this . dialBackgroundPaint = populationSize ; fireChangeEvent () ; }
Code	{ this . dialBackgroundPaint = populationSize ; fireChangeEvent () ; }
Distance : 10

87
Tree	{ this . dialBackgroundPaint = units ; }
Code	{ this . dialBackgroundPaint = units ; }
Distance : 11

88
Tree	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = thresholdType ; }
Code	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = thresholdType ; }
Distance : 7

89
Tree	{ super ( chromosomes , newBeta ) ; }
Code	{ super ( chromosomes , newBeta ) ; }
Distance : 6

90
Tree	{ super ( yTmp , searchSeq ) ; this . rangeMinorGridlineStroke = new DefaultTransformer [] <> ; }
Code	{ super ( yTmp , searchSeq ) ; this . rangeMinorGridlineStroke = new DefaultTransformer [] <> ; }
Distance : 10

91
Tree	{ super ( dialBackgroundPaint ) ; this . rangeMinorGridlineStroke = new double [] { dialBackgroundPaint } ; }
Code	{ super ( dialBackgroundPaint ) ; this . rangeMinorGridlineStroke = new double [] { dialBackgroundPaint } ; }
Distance : 13

92
Tree	{ super ( yTmp , newBeta ) ; this . maxGenerations = new ArrayDeque [] <> ; }
Code	{ super ( yTmp , newBeta ) ; this . maxGenerations = new ArrayDeque [] <> ; }
Distance : 10

93
Tree	{ this ( yTmp , ( vd ) null ) ; }
Code	{ this ( yTmp , ( vd ) null ) ; }
Distance : 8

94
Tree	{ super ( yTmp , newBeta ) ; this . maxGenerations = new DefaultTransformer [ NUMBER_CONSTANT ] ; }
Code	{ super ( yTmp , newBeta ) ; this . maxGenerations = new DefaultTransformer [ NUMBER_CONSTANT ] ; }
Distance : 11

95
Tree	{ super ( yTmp , newBeta ) ; this . maxGenerations = new double [] { yTmp } ; super }
Code	{ super ( yTmp , newBeta ) ; this . maxGenerations = new double [] { yTmp } ; super }
Distance : 13

96
Tree	{ super ( dialBackgroundPaint , newBeta ) ; this . rangeMinorGridlineStroke = new DefaultTransformer [] <> ; }
Code	{ super ( dialBackgroundPaint , newBeta ) ; this . rangeMinorGridlineStroke = new DefaultTransformer [] <> ; }
Distance : 10

97
Tree	{ super ( dialBackgroundPaint , newBeta , tolerance ) ; this . rangeMinorGridlineStroke = new double [] { yTmp } ; }
Code	{ super ( dialBackgroundPaint , newBeta , tolerance ) ; this . rangeMinorGridlineStroke = new double [] { yTmp } ; }
Distance : 14

98
Tree	{ super ( yTmp , searchSeq ) ; this . rangeMinorGridlineStroke = new DefaultTransformer [ NUMBER_CONSTANT ] ; }
Code	{ super ( yTmp , searchSeq ) ; this . rangeMinorGridlineStroke = new DefaultTransformer [ NUMBER_CONSTANT ] ; }
Distance : 11

99
Tree	{ this ( new DummyLocalizable ( yTmp ) , populationLimit ) ; }
Code	{ this ( new DummyLocalizable ( yTmp ) , populationLimit ) ; }
Distance : 9

100
Tree	{ super ( yTmp , newBeta , tolerance ) ; this . maxGenerations = new double [] { dialBackgroundPaint } ; }
Code	{ super ( yTmp , newBeta , tolerance ) ; this . maxGenerations = new double [] { dialBackgroundPaint } ; }
Distance : 14

101
Tree	{ super ( yTmp , searchSeq ) ; this . rangeMinorGridlineStroke = imaginaryFormat ; }
Code	{ super ( yTmp , searchSeq ) ; this . rangeMinorGridlineStroke = imaginaryFormat ; }
Distance : 7

102
Tree	{ this ( ComposableFunction.SINH , newBeta ) ; }
Code	{ this ( ComposableFunction.SINH , newBeta ) ; }
Distance : 8

103
Tree	{ super ( yTmp , newBeta ) ; this . maxGenerations = thresholdType ; }
Code	{ super ( yTmp , newBeta ) ; this . maxGenerations = thresholdType ; }
Distance : 7

104
Tree	{ this ( yTmp , sampleSize , false ) ; }
Code	{ this ( yTmp , sampleSize , false ) ; }
Distance : 8

105
Tree	{ this ( yTmp , ( CompositeFormat ) null ) ; }
Code	{ this ( yTmp , ( CompositeFormat ) null ) ; }
Distance : 8

106
Tree	{ super ( yTmp , newBeta ) ; this . maxGenerations = new ArrayDeque [ NUMBER_CONSTANT ] ; }
Code	{ super ( yTmp , newBeta ) ; this . maxGenerations = new ArrayDeque [ NUMBER_CONSTANT ] ; }
Distance : 11

107
Tree	{ super ( yTmp , newBeta ) ; this . maxGenerations = new ThreadSafeDelegatingErrorManager [] <> ; }
Code	{ super ( yTmp , newBeta ) ; this . maxGenerations = new ThreadSafeDelegatingErrorManager [] <> ; }
Distance : 10

108
Tree	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = paint ; }
Code	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = paint ; }
Distance : 7

109
Tree	{ this ( yTmp , DEFAULT_EXPANSION_FACTOR , null ) ; }
Code	{ this ( yTmp , DEFAULT_EXPANSION_FACTOR , null ) ; }
Distance : 8

110
Tree	{ this . dialBackgroundPaint = century ; }
Code	{ this . dialBackgroundPaint = century ; }
Distance : 11

111
Tree	{ super ( Locale.JAPAN , newBeta ) ; this . rangeMinorGridlineStroke = imaginaryFormat ; }
Code	{ super ( Locale.JAPAN , newBeta ) ; this . rangeMinorGridlineStroke = imaginaryFormat ; }
Distance : 7

112
Tree	{ super ( yTmp , searchSeq , tolerance ) ; this . rangeMinorGridlineStroke = new double [] { yTmp } ; }
Code	{ super ( yTmp , searchSeq , tolerance ) ; this . rangeMinorGridlineStroke = new double [] { yTmp } ; }
Distance : 14

113
Tree	{ super ( dialBackgroundPaint , newBeta ) ; this . rangeMinorGridlineStroke = new DefaultTransformer [ NUMBER_CONSTANT ] ; }
Code	{ super ( dialBackgroundPaint , newBeta ) ; this . rangeMinorGridlineStroke = new DefaultTransformer [ NUMBER_CONSTANT ] ; }
Distance : 11

114
Tree	{ super ( yTmp , searchSeq ) ; this . rangeMinorGridlineStroke = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( yTmp , searchSeq ) ; this . rangeMinorGridlineStroke = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 18

115
Tree	{ super ( yTmp , newBeta , tolerance ) ; this . rangeMinorGridlineStroke = new double [] { yTmp } ; }
Code	{ super ( yTmp , newBeta , tolerance ) ; this . rangeMinorGridlineStroke = new double [] { yTmp } ; }
Distance : 14

116
Tree	{ super ( yTmp , searchSeq ) ; this . rangeMinorGridlineStroke = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( yTmp , searchSeq ) ; this . rangeMinorGridlineStroke = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 14

117
Tree	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { optim } ; super }
Code	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { optim } ; super }
Distance : 13

118
Tree	{ this ( dialBackgroundPaint , newBeta , null ) ; }
Code	{ this ( dialBackgroundPaint , newBeta , null ) ; }
Distance : 8

119
Tree	{ super(); this . dialBackgroundPaint = percent ; this . maxGenerations = imaginaryFormat ; }
Code	{ super(); this . dialBackgroundPaint = percent ; this . maxGenerations = imaginaryFormat ; }
Distance : 11

120
Tree	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] <> ; }
Code	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [] <> ; }
Distance : 10

121
Tree	{ super ( yTmp , populationLimit ) ; }
Code	{ super ( yTmp , populationLimit ) ; }
Distance : 6

122
Tree	{ this . dialBackgroundPaint = percent ; this . maxGenerations = paint ; }
Code	{ this . dialBackgroundPaint = percent ; this . maxGenerations = paint ; }
Distance : 11

123
Tree	{ super(); this . dialBackgroundPaint = percent ; this . rangeMinorGridlineStroke = new double [] { dialBackgroundPaint } ; }
Code	{ super(); this . dialBackgroundPaint = percent ; this . rangeMinorGridlineStroke = new double [] { dialBackgroundPaint } ; }
Distance : 16

124
Tree	{ super ( chromosomes , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( chromosomes , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 17

125
Tree	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = new Coordinates3D [ NUMBER_CONSTANT ] ; }
Code	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = new Coordinates3D [ NUMBER_CONSTANT ] ; }
Distance : 11

126
Tree	{ this ( new DummyLocalizable ( yTmp ) , newBeta ) ; }
Code	{ this ( new DummyLocalizable ( yTmp ) , newBeta ) ; }
Distance : 9

127
Tree	{ super ( yTmp , newBeta ) ; this . maxGenerations = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( yTmp , newBeta ) ; this . maxGenerations = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 18

128
Tree	{ this ( new SerializableTypeVariable ( yTmp ) , populationLimit ) ; }
Code	{ this ( new SerializableTypeVariable ( yTmp ) , populationLimit ) ; }
Distance : 9

129
Tree	{ this ( dialBackgroundPaint , searchSeq , null ) ; }
Code	{ this ( dialBackgroundPaint , searchSeq , null ) ; }
Distance : 8

130
Tree	{ this ( yTmp , populationLimit , null ) ; }
Code	{ this ( yTmp , populationLimit , null ) ; }
Distance : 7

131
Tree	{ this ( yTmp , sampleSize , null ) ; }
Code	{ this ( yTmp , sampleSize , null ) ; }
Distance : 8

132
Tree	{ this ( yTmp , DEFAULT_EXPANSION_FACTOR , false ) ; }
Code	{ this ( yTmp , DEFAULT_EXPANSION_FACTOR , false ) ; }
Distance : 8

133
Tree	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [ NUMBER_CONSTANT ] ; }
Code	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = new ThreadSafeDelegatingErrorManager [ NUMBER_CONSTANT ] ; }
Distance : 11

134
Tree	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { yTmp } ; static }
Code	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { yTmp } ; static }
Distance : 13

135
Tree	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { yTmp } ; super }
Code	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { yTmp } ; super }
Distance : 13

136
Tree	{ super ( yTmp , newBeta , tolerance ) ; this . rangeMinorGridlineStroke = new double [] { chromosomes } ; }
Code	{ super ( yTmp , newBeta , tolerance ) ; this . rangeMinorGridlineStroke = new double [] { chromosomes } ; }
Distance : 14

137
Tree	{ this . dialBackgroundPaint = newBeta ; this . rangeMinorGridlineStroke = imaginaryFormat ; }
Code	{ this . dialBackgroundPaint = newBeta ; this . rangeMinorGridlineStroke = imaginaryFormat ; }
Distance : 11

138
Tree	{ super ( yTmp , newBeta , tolerance ) ; this . domainMinorGridlineStroke = new double [] { yTmp } ; }
Code	{ super ( yTmp , newBeta , tolerance ) ; this . domainMinorGridlineStroke = new double [] { yTmp } ; }
Distance : 14

139
Tree	{ this ( ComposableFunction.SINH , populationLimit ) ; }
Code	{ this ( ComposableFunction.SINH , populationLimit ) ; }
Distance : 7

140
Tree	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = painter ; }
Code	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = painter ; }
Distance : 7

141
Tree	{ super ( yTmp , newBeta ) ; this . labelGenerator = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( yTmp , newBeta ) ; this . labelGenerator = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 18

142
Tree	{ super ( yTmp , searchSeq ) ; this . maxGenerations = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( yTmp , searchSeq ) ; this . maxGenerations = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 18

143
Tree	{ this ( yTmp , searchSeq , null ) ; }
Code	{ this ( yTmp , searchSeq , null ) ; }
Distance : 8

144
Tree	{ super ( dialBackgroundPaint , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( dialBackgroundPaint , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 18

145
Tree	{ super ( yTmp , newBeta , tolerance ) ; this . maxGenerations = new double [] { yTmp } ; }
Code	{ super ( yTmp , newBeta , tolerance ) ; this . maxGenerations = new double [] { yTmp } ; }
Distance : 14

146
Tree	{ this ( new ThrowsException ( yTmp ) , populationSize ) ; }
Code	{ this ( new ThrowsException ( yTmp ) , populationSize ) ; }
Distance : 9

147
Tree	{ super ( yTmp , searchSeq ) ; this . rangeMinorGridlineStroke = new double [] { yTmp } ; super }
Code	{ super ( yTmp , searchSeq ) ; this . rangeMinorGridlineStroke = new double [] { yTmp } ; super }
Distance : 13

148
Tree	{ this ( new ThrowsException ( yTmp ) , sampleSize ) ; }
Code	{ this ( new ThrowsException ( yTmp ) , sampleSize ) ; }
Distance : 9

149
Tree	{ this . changeListeners = percent ; this . rangeMinorGridlineStroke = imaginaryFormat ; }
Code	{ this . changeListeners = percent ; this . rangeMinorGridlineStroke = imaginaryFormat ; }
Distance : 11

150
Tree	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { chromosomes } ; super }
Code	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { chromosomes } ; super }
Distance : 13

151
Tree	{ super ( yTmp , newBeta ) ; this . maxGenerations = new DefaultTransformer [] <> ; }
Code	{ super ( yTmp , newBeta ) ; this . maxGenerations = new DefaultTransformer [] <> ; }
Distance : 10

152
Tree	{ super(); this . changeListeners = percent ; this . rangeMinorGridlineStroke = imaginaryFormat ; }
Code	{ super(); this . changeListeners = percent ; this . rangeMinorGridlineStroke = imaginaryFormat ; }
Distance : 11

153
Tree	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { dialBackgroundPaint } ; super }
Code	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { dialBackgroundPaint } ; super }
Distance : 13

154
Tree	{ super(); this . dialBackgroundPaint = percent ; this . maxGenerations = new double [] { dialBackgroundPaint } ; }
Code	{ super(); this . dialBackgroundPaint = percent ; this . maxGenerations = new double [] { dialBackgroundPaint } ; }
Distance : 16

155
Tree	{ super ( Locale.JAPAN , newBeta ) ; this . maxGenerations = thresholdType ; }
Code	{ super ( Locale.JAPAN , newBeta ) ; this . maxGenerations = thresholdType ; }
Distance : 7

156
Tree	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = new ArrayDeque [] <> ; }
Code	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = new ArrayDeque [] <> ; }
Distance : 10

157
Tree	{ super ( yTmp , newBeta ) ; this . domainMinorGridlineStroke = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Code	{ super ( yTmp , newBeta ) ; this . domainMinorGridlineStroke = new double [] { NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT } ; }
Distance : 18

158
Tree	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = new ArrayDeque [ NUMBER_CONSTANT ] ; }
Code	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = new ArrayDeque [ NUMBER_CONSTANT ] ; }
Distance : 11

159
Tree	{ super(); this . changeListeners = newBeta ; this . maxGenerations = new double [] { dialBackgroundPaint } ; }
Code	{ super(); this . changeListeners = newBeta ; this . maxGenerations = new double [] { dialBackgroundPaint } ; }
Distance : 16

160
Tree	{ super ( yTmp , newBeta , tolerance ) ; this . rangeMinorGridlineStroke = new double [] { dialBackgroundPaint } ; }
Code	{ super ( yTmp , newBeta , tolerance ) ; this . rangeMinorGridlineStroke = new double [] { dialBackgroundPaint } ; }
Distance : 14

161
Tree	{ super(); this . dialBackgroundPaint = percent ; this . rangeMinorGridlineStroke = imaginaryFormat ; }
Code	{ super(); this . dialBackgroundPaint = percent ; this . rangeMinorGridlineStroke = imaginaryFormat ; }
Distance : 11

162
Tree	{ super ( Locale.JAPAN , newBeta ) ; this . maxGenerations = imaginaryFormat ; }
Code	{ super ( Locale.JAPAN , newBeta ) ; this . maxGenerations = imaginaryFormat ; }
Distance : 7

163
Tree	{ super ( yTmp , newBeta ) ; qr = NUMBER_CONSTANT / callback ; }
Code	{ super ( yTmp , newBeta ) ; qr = NUMBER_CONSTANT / callback ; }
Distance : 7

164
Tree	{ super ( yTmp . copySelf () , newBeta ) ; this . maxGenerations = new double [] { yTmp } ; }
Code	{ super ( yTmp . copySelf () , newBeta ) ; this . maxGenerations = new double [] { yTmp } ; }
Distance : 15

165
Tree	{ super(); this . changeListeners = percent ; this . maxGenerations = imaginaryFormat ; }
Code	{ super(); this . changeListeners = percent ; this . maxGenerations = imaginaryFormat ; }
Distance : 11

166
Tree	{ super ( Locale.JAPAN , newBeta ) ; this . rangeMinorGridlineStroke = callback ; }
Code	{ super ( Locale.JAPAN , newBeta ) ; this . rangeMinorGridlineStroke = callback ; }
Distance : 7

167
Tree	{ super(); this . changeListeners = percent ; this . rangeMinorGridlineStroke = thresholdType ; }
Code	{ super(); this . changeListeners = percent ; this . rangeMinorGridlineStroke = thresholdType ; }
Distance : 11

168
Tree	{ super ( yTmp . getConstructor () , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { yTmp } ; }
Code	{ super ( yTmp . getConstructor () , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { yTmp } ; }
Distance : 15

169
Tree	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = callback ; }
Code	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = callback ; }
Distance : 7

170
Tree	{ super ( yTmp . copySelf () , populationSize ) ; this . maxGenerations = new double [] { yTmp } ; }
Code	{ super ( yTmp . copySelf () , populationSize ) ; this . maxGenerations = new double [] { yTmp } ; }
Distance : 15

171
Tree	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = new DefaultTransformer [] <> ; }
Code	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = new DefaultTransformer [] <> ; }
Distance : 10

172
Tree	{ super ( yTmp , newBeta ) ; ConfigurationAccess = NUMBER_CONSTANT / callback ; }
Code	{ super ( yTmp , newBeta ) ; ConfigurationAccess = NUMBER_CONSTANT / callback ; }
Distance : 7

173
Tree	{ this ( new ThrowsException ( dialBackgroundPaint ) , populationLimit ) ; }
Code	{ this ( new ThrowsException ( dialBackgroundPaint ) , populationLimit ) ; }
Distance : 9

174
Tree	{ super ( Locale.JAPAN , newBeta ) ; this . rangeMinorGridlineStroke = paint ; }
Code	{ super ( Locale.JAPAN , newBeta ) ; this . rangeMinorGridlineStroke = paint ; }
Distance : 7

175
Tree	{ super(); this . changeListeners = percent ; this . rangeMinorGridlineStroke = new double [] { dialBackgroundPaint } ; }
Code	{ super(); this . changeListeners = percent ; this . rangeMinorGridlineStroke = new double [] { dialBackgroundPaint } ; }
Distance : 16

176
Tree	{ super ( dialBackgroundPaint , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { yTmp } ; super }
Code	{ super ( dialBackgroundPaint , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { yTmp } ; super }
Distance : 13

177
Tree	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = new DefaultTransformer [ NUMBER_CONSTANT ] ; }
Code	{ super ( yTmp , newBeta ) ; this . rangeMinorGridlineStroke = new DefaultTransformer [ NUMBER_CONSTANT ] ; }
Distance : 11

178
Tree	{ super ( yTmp . copySelf () , populationSize ) ; this . rangeMinorGridlineStroke = new double [] { yTmp } ; }
Code	{ super ( yTmp . copySelf () , populationSize ) ; this . rangeMinorGridlineStroke = new double [] { yTmp } ; }
Distance : 15

179
Tree	{ super(); this . dialBackgroundPaint = newBeta ; this . rangeMinorGridlineStroke = new double [] { dialBackgroundPaint } ; }
Code	{ super(); this . dialBackgroundPaint = newBeta ; this . rangeMinorGridlineStroke = new double [] { dialBackgroundPaint } ; }
Distance : 16

180
Tree	{ this ( chromosomes , newBeta , null ) ; }
Code	{ this ( chromosomes , newBeta , null ) ; }
Distance : 7

181
Tree	{ super ( yTmp . copySelf () , searchSeq ) ; this . rangeMinorGridlineStroke = new double [] { yTmp } ; }
Code	{ super ( yTmp . copySelf () , searchSeq ) ; this . rangeMinorGridlineStroke = new double [] { yTmp } ; }
Distance : 15

182
Tree	{ super ( Locale.JAPAN , newBeta ) ; this . rangeMinorGridlineStroke = thresholdType ; }
Code	{ super ( Locale.JAPAN , newBeta ) ; this . rangeMinorGridlineStroke = thresholdType ; }
Distance : 7

183
Tree	{ super(); this . dialBackgroundPaint = newBeta ; this . maxGenerations = new double [] { dialBackgroundPaint } ; }
Code	{ super(); this . dialBackgroundPaint = newBeta ; this . maxGenerations = new double [] { dialBackgroundPaint } ; }
Distance : 16

184
Tree	{ super(); this . changeListeners = percent ; this . maxGenerations = new double [] { dialBackgroundPaint } ; }
Code	{ super(); this . changeListeners = percent ; this . maxGenerations = new double [] { dialBackgroundPaint } ; }
Distance : 16

185
Tree	{ super(); this . dialBackgroundPaint = percent ; this . rangeMinorGridlineStroke = thresholdType ; }
Code	{ super(); this . dialBackgroundPaint = percent ; this . rangeMinorGridlineStroke = thresholdType ; }
Distance : 11

186
Tree	{ super ( yTmp . copySelf () , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { yTmp } ; }
Code	{ super ( yTmp . copySelf () , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { yTmp } ; }
Distance : 15

187
Tree	{ super(); this . dialBackgroundPaint = newBeta ; this . rangeMinorGridlineStroke = imaginaryFormat ; }
Code	{ super(); this . dialBackgroundPaint = newBeta ; this . rangeMinorGridlineStroke = imaginaryFormat ; }
Distance : 11

188
Tree	{ super ( Locale.JAPAN , populationLimit ) ; this . rangeMinorGridlineStroke = imaginaryFormat ; }
Code	{ super ( Locale.JAPAN , populationLimit ) ; this . rangeMinorGridlineStroke = imaginaryFormat ; }
Distance : 6

189
Tree	{ super ( ComposableFunction.SINH , newBeta ) ; this . rangeMinorGridlineStroke = imaginaryFormat ; }
Code	{ super ( ComposableFunction.SINH , newBeta ) ; this . rangeMinorGridlineStroke = imaginaryFormat ; }
Distance : 7

190
Tree	{ super(); this . dialBackgroundPaint = percent ; this . maxGenerations = thresholdType ; }
Code	{ super(); this . dialBackgroundPaint = percent ; this . maxGenerations = thresholdType ; }
Distance : 11

191
Tree	{ super(); this . changeListeners = newBeta ; this . rangeMinorGridlineStroke = new double [] { dialBackgroundPaint } ; }
Code	{ super(); this . changeListeners = newBeta ; this . rangeMinorGridlineStroke = new double [] { dialBackgroundPaint } ; }
Distance : 16

192
Tree	{ super ( yTmp , newBeta ) ; originOffset = NUMBER_CONSTANT / callback ; }
Code	{ super ( yTmp , newBeta ) ; originOffset = NUMBER_CONSTANT / callback ; }
Distance : 7

193
Tree	{ super ( yTmp . copySelf () , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { dialBackgroundPaint } ; }
Code	{ super ( yTmp . copySelf () , newBeta ) ; this . rangeMinorGridlineStroke = new double [] { dialBackgroundPaint } ; }
Distance : 15

194
Tree	{ super ( yTmp . copySelf () , sampleSize ) ; this . rangeMinorGridlineStroke = new double [] { yTmp } ; }
Code	{ super ( yTmp . copySelf () , sampleSize ) ; this . rangeMinorGridlineStroke = new double [] { yTmp } ; }
Distance : 15

195
Tree	{ super ( yTmp , searchSeq ) ; qr = NUMBER_CONSTANT / callback ; }
Code	{ super ( yTmp , searchSeq ) ; qr = NUMBER_CONSTANT / callback ; }
Distance : 7

196
Tree	{ super ( yTmp , newBeta ) ; qr = NUMBER_CONSTANT / elitismRate ; }
Code	{ super ( yTmp , newBeta ) ; qr = NUMBER_CONSTANT / elitismRate ; }
Distance : 7

197
Tree	{ super ( yTmp , searchSeq ) ; ConfigurationAccess = NUMBER_CONSTANT / callback ; }
Code	{ super ( yTmp , searchSeq ) ; ConfigurationAccess = NUMBER_CONSTANT / callback ; }
Distance : 7

198
Tree	{ super ( dialBackgroundPaint , newBeta ) ; qr = NUMBER_CONSTANT / callback ; }
Code	{ super ( dialBackgroundPaint , newBeta ) ; qr = NUMBER_CONSTANT / callback ; }
Distance : 7

199
Tree	{ super ( yTmp , newBeta ) ; dateFormat = NUMBER_CONSTANT / callback ; }
Code	{ super ( yTmp , newBeta ) ; dateFormat = NUMBER_CONSTANT / callback ; }
Distance : 7

========================================================================


========================================================================
Example Number: 72
Parent Code is: 
{ return chromosomes . iterator () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return getChromosomes () . iterator () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (800{val=chromosomes}) (235{val=.}) (802{val=iterator}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=getChromosomes}) (216{val=()})) (235{val=.}) (802{val=iterator}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/34/parent/src_main_java_org_apache_commons_math3_genetics_ListPopulation.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return EscapeUtils.ESCAPE_JAVA ; }
Code	{ return EscapeUtils.ESCAPE_JAVA ; }
Distance : 5

1
Tree	{ return iterator ( dialBackgroundPaint ) ; }
Code	{ return iterator ( dialBackgroundPaint ) ; }
Distance : 5

2
Tree	{ return outerClassInstance . iterator ( a1 . getTime () ) . iterator () ; }
Code	{ return outerClassInstance . iterator ( a1 . getTime () ) . iterator () ; }
Distance : 8

3
Tree	{ return new FieldBracketingNthOrderBrentSolver () ; }
Code	{ return new FieldBracketingNthOrderBrentSolver () ; }
Distance : 4

4
Tree	{ return changeListeners . iterator ( bp ) ; }
Code	{ return changeListeners . iterator ( bp ) ; }
Distance : 5

5
Tree	{ return ! changeListeners . iterator () ; }
Code	{ return ! changeListeners . iterator () ; }
Distance : 2

6
Tree	{ return ! outerClassInstance . iterator () ; }
Code	{ return ! outerClassInstance . iterator () ; }
Distance : 2

7
Tree	{ return Locale.US ; }
Code	{ return Locale.US ; }
Distance : 5

8
Tree	{ return new BracketedRealFieldUnivariateSolver () ; }
Code	{ return new BracketedRealFieldUnivariateSolver () ; }
Distance : 4

9
Tree	{ return PRODUCT . iterator ( a1 ) ; }
Code	{ return PRODUCT . iterator ( a1 ) ; }
Distance : 5

10
Tree	{ return new BigFraction ( chromosomes ) ; }
Code	{ return new BigFraction ( chromosomes ) ; }
Distance : 5

11
Tree	{ return this . dialBackgroundPaint ; }
Code	{ return this . dialBackgroundPaint ; }
Distance : 4

12
Tree	{ return changeListeners . iterator () && coefficients . inIncrementalCheckMode () ; }
Code	{ return changeListeners . iterator () && coefficients . inIncrementalCheckMode () ; }
Distance : 6

13
Tree	{ return new dialBackgroundPaint () ; }
Code	{ return new dialBackgroundPaint () ; }
Distance : 4

14
Tree	{ return PRODUCT . iterator () - NUMBER_CONSTANT ; }
Code	{ return PRODUCT . iterator () - NUMBER_CONSTANT ; }
Distance : 4

15
Tree	{ return new VectorDataItem () ; }
Code	{ return new VectorDataItem () ; }
Distance : 4

16
Tree	{ return Pair . outerProduct () - NUMBER_CONSTANT ; }
Code	{ return Pair . outerProduct () - NUMBER_CONSTANT ; }
Distance : 5

17
Tree	{ return this . changeListeners . iterator () ; }
Code	{ return this . changeListeners . iterator () ; }
Distance : 3

18
Tree	{ return outerClassInstance . iterator () . getTime () ; }
Code	{ return outerClassInstance . iterator () . getTime () ; }
Distance : 4

19
Tree	{ return ! space . iterator () ; }
Code	{ return ! space . iterator () ; }
Distance : 2

20
Tree	{ return space ; }
Code	{ return space ; }
Distance : 5

21
Tree	{ return new Pair ( chromosomes ) ; }
Code	{ return new Pair ( chromosomes ) ; }
Distance : 5

22
Tree	{ return Pair . iterator ( bp . getTime () ) . iterator () ; }
Code	{ return Pair . iterator ( bp . getTime () ) . iterator () ; }
Distance : 8

23
Tree	{ return new changeListeners ( yTmp ) ; }
Code	{ return new changeListeners ( yTmp ) ; }
Distance : 5

24
Tree	{ return new BigFraction ( yTmp ) ; }
Code	{ return new BigFraction ( yTmp ) ; }
Distance : 5

25
Tree	{ return iterator ( Pair ) ; }
Code	{ return iterator ( Pair ) ; }
Distance : 5

26
Tree	{ return BigRealField . iterator () - NUMBER_CONSTANT ; }
Code	{ return BigRealField . iterator () - NUMBER_CONSTANT ; }
Distance : 4

27
Tree	{ return iterator ( tokenizer ) ; }
Code	{ return iterator ( tokenizer ) ; }
Distance : 5

28
Tree	{ return new Pair ( coefficients ) ; }
Code	{ return new Pair ( coefficients ) ; }
Distance : 5

29
Tree	{ return BigRealField . iterator () . getTime () ; }
Code	{ return BigRealField . iterator () . getTime () ; }
Distance : 4

30
Tree	{ return new BigFraction () ; }
Code	{ return new BigFraction () ; }
Distance : 4

31
Tree	{ return tokenizer ; }
Code	{ return tokenizer ; }
Distance : 5

32
Tree	{ return outerClassInstance . iterator ( a1 . getTime () ) ; }
Code	{ return outerClassInstance . iterator ( a1 . getTime () ) ; }
Distance : 7

33
Tree	{ return new BigFraction ( changeListeners ) ; }
Code	{ return new BigFraction ( changeListeners ) ; }
Distance : 5

34
Tree	{ return space . iterator () . getTime () ; }
Code	{ return space . iterator () . getTime () ; }
Distance : 4

35
Tree	{ return ( Pair ) changeListeners . iterator () ; }
Code	{ return ( Pair ) changeListeners . iterator () ; }
Distance : 4

36
Tree	{ return ( dialBackgroundPaint ) coefficients . iterator () ; }
Code	{ return ( dialBackgroundPaint ) coefficients . iterator () ; }
Distance : 4

37
Tree	{ return new Pair ( changeListeners ) ; }
Code	{ return new Pair ( changeListeners ) ; }
Distance : 5

38
Tree	{ return PoissonDistribution.DEFAULT_EPSILON ; }
Code	{ return PoissonDistribution.DEFAULT_EPSILON ; }
Distance : 5

39
Tree	{ return Pair . iterator () - NUMBER_CONSTANT ; }
Code	{ return Pair . iterator () - NUMBER_CONSTANT ; }
Distance : 4

40
Tree	{ return new BigFraction ( coefficients ) ; }
Code	{ return new BigFraction ( coefficients ) ; }
Distance : 5

41
Tree	{ return new changeListeners () ; }
Code	{ return new changeListeners () ; }
Distance : 4

42
Tree	{ return Pair . iterator ( bp . getTime () ) ; }
Code	{ return Pair . iterator ( bp . getTime () ) ; }
Distance : 7

43
Tree	{ return Pair . iterator () ; }
Code	{ return Pair . iterator () ; }
Distance : 2

44
Tree	{ return ( Pair == null ? null : coefficients . iterator () ) ; }
Code	{ return ( Pair == null ? null : coefficients . iterator () ) ; }
Distance : 9

45
Tree	{ return ( changeListeners == null ? null : coefficients . iterator () ) ; }
Code	{ return ( changeListeners == null ? null : coefficients . iterator () ) ; }
Distance : 9

46
Tree	{ return Pair . iterator () && BigRealField . inIncrementalCheckMode () ; }
Code	{ return Pair . iterator () && BigRealField . inIncrementalCheckMode () ; }
Distance : 6

47
Tree	{ return Pair . iterator () && outerClassInstance . inIncrementalCheckMode () ; }
Code	{ return Pair . iterator () && outerClassInstance . inIncrementalCheckMode () ; }
Distance : 6

48
Tree	{ return ( dialBackgroundPaint == null ? null : coefficients . iterator () ) ; }
Code	{ return ( dialBackgroundPaint == null ? null : coefficients . iterator () ) ; }
Distance : 9

49
Tree	{ return changeListeners . iterator () ; }
Code	{ return changeListeners . iterator () ; }
Distance : 2

50
Tree	{ return CompilerOptions.J2clPassMode ; }
Code	{ return CompilerOptions.J2clPassMode ; }
Distance : 5

51
Tree	{ return ( Memoizer == null ? null : coefficients . iterator () ) ; }
Code	{ return ( Memoizer == null ? null : coefficients . iterator () ) ; }
Distance : 9

52
Tree	{ return ( Pair ) coefficients . iterator () ; }
Code	{ return ( Pair ) coefficients . iterator () ; }
Distance : 4

53
Tree	{ return outerClassInstance . iterator () && coefficients . inIncrementalCheckMode () ; }
Code	{ return outerClassInstance . iterator () && coefficients . inIncrementalCheckMode () ; }
Distance : 6

54
Tree	{ return Pair . iterator ( bp ) ; }
Code	{ return Pair . iterator ( bp ) ; }
Distance : 5

55
Tree	{ return outerClassInstance . iterator () ; }
Code	{ return outerClassInstance . iterator () ; }
Distance : 2

56
Tree	{ return new Pair () ; }
Code	{ return new Pair () ; }
Distance : 4

57
Tree	{ return tokenizer . iterator () . getTime () ; }
Code	{ return tokenizer . iterator () . getTime () ; }
Distance : 4

58
Tree	{ return space . iterator () - NUMBER_CONSTANT ; }
Code	{ return space . iterator () - NUMBER_CONSTANT ; }
Distance : 4

59
Tree	{ return iterator ( wrong ) ; }
Code	{ return iterator ( wrong ) ; }
Distance : 5

60
Tree	{ return ! PRODUCT . iterator () ; }
Code	{ return ! PRODUCT . iterator () ; }
Distance : 2

61
Tree	{ return tokenizer . iterator () ; }
Code	{ return tokenizer . iterator () ; }
Distance : 2

62
Tree	{ return Pair . iterator () . getTime () ; }
Code	{ return Pair . iterator () . getTime () ; }
Distance : 4

63
Tree	{ return changeListeners . iterator ( a1 ) ; }
Code	{ return changeListeners . iterator ( a1 ) ; }
Distance : 5

64
Tree	{ return PRODUCT . iterator () ; }
Code	{ return PRODUCT . iterator () ; }
Distance : 2

65
Tree	{ return ! tokenizer . iterator () ; }
Code	{ return ! tokenizer . iterator () ; }
Distance : 2

66
Tree	{ return new Memoizer () ; }
Code	{ return new Memoizer () ; }
Distance : 4

67
Tree	{ return ( Memoizer ) coefficients . iterator () ; }
Code	{ return ( Memoizer ) coefficients . iterator () ; }
Distance : 4

68
Tree	{ return outerClassInstance . iterator ( a1 ) ; }
Code	{ return outerClassInstance . iterator ( a1 ) ; }
Distance : 5

69
Tree	{ return changeListeners ; }
Code	{ return changeListeners ; }
Distance : 5

70
Tree	{ return ( changeListeners == null ? null : outerClassInstance . iterator () ) ; }
Code	{ return ( changeListeners == null ? null : outerClassInstance . iterator () ) ; }
Distance : 9

71
Tree	{ return this . changeListeners ; }
Code	{ return this . changeListeners ; }
Distance : 4

72
Tree	{ return Pair . iterator ( a1 . getTime () ) . iterator () ; }
Code	{ return Pair . iterator ( a1 . getTime () ) . iterator () ; }
Distance : 8

73
Tree	{ return new Pair ( tokenizer ) ; }
Code	{ return new Pair ( tokenizer ) ; }
Distance : 5

74
Tree	{ return Pair . outerProduct () ; }
Code	{ return Pair . outerProduct () ; }
Distance : 3

75
Tree	{ return changeListeners . iterator ( bp . getTime () ) ; }
Code	{ return changeListeners . iterator ( bp . getTime () ) ; }
Distance : 7

76
Tree	{ return iterator ( coefficients ) ; }
Code	{ return iterator ( coefficients ) ; }
Distance : 5

77
Tree	{ return PRODUCT . iterator ( a1 . getTime () ) ; }
Code	{ return PRODUCT . iterator ( a1 . getTime () ) ; }
Distance : 7

78
Tree	{ return outerClassInstance . iterator ( bp ) ; }
Code	{ return outerClassInstance . iterator ( bp ) ; }
Distance : 5

79
Tree	{ return ( changeListeners ) changeListeners . iterator () ; }
Code	{ return ( changeListeners ) changeListeners . iterator () ; }
Distance : 4

80
Tree	{ return iterator ( changeListeners ) ; }
Code	{ return iterator ( changeListeners ) ; }
Distance : 5

81
Tree	{ return tokenizer . iterator () - NUMBER_CONSTANT ; }
Code	{ return tokenizer . iterator () - NUMBER_CONSTANT ; }
Distance : 4

82
Tree	{ return ( tokenizer == null ? null : coefficients . iterator () ) ; }
Code	{ return ( tokenizer == null ? null : coefficients . iterator () ) ; }
Distance : 9

83
Tree	{ return changeListeners . iterator () - NUMBER_CONSTANT ; }
Code	{ return changeListeners . iterator () - NUMBER_CONSTANT ; }
Distance : 4

84
Tree	{ return BigRealField ; }
Code	{ return BigRealField ; }
Distance : 5

85
Tree	{ return Pair . iterator ( a1 . getTime () ) ; }
Code	{ return Pair . iterator ( a1 . getTime () ) ; }
Distance : 7

86
Tree	{ return PRODUCT ; }
Code	{ return PRODUCT ; }
Distance : 5

87
Tree	{ return ( tokenizer ) coefficients . iterator () ; }
Code	{ return ( tokenizer ) coefficients . iterator () ; }
Distance : 4

88
Tree	{ return ( changeListeners ) coefficients . iterator () ; }
Code	{ return ( changeListeners ) coefficients . iterator () ; }
Distance : 4

89
Tree	{ return tokenizer . iterator ( a1 ) ; }
Code	{ return tokenizer . iterator ( a1 ) ; }
Distance : 5

90
Tree	{ return iterator () ; }
Code	{ return iterator () ; }
Distance : 3

91
Tree	{ return ! Pair . iterator () ; }
Code	{ return ! Pair . iterator () ; }
Distance : 2

92
Tree	{ return outerClassInstance . iterator ( bp . getTime () ) ; }
Code	{ return outerClassInstance . iterator ( bp . getTime () ) ; }
Distance : 7

93
Tree	{ return ! dialBackgroundPaint . iterator () ; }
Code	{ return ! dialBackgroundPaint . iterator () ; }
Distance : 2

94
Tree	{ return new changeListeners ( Pair ) ; }
Code	{ return new changeListeners ( Pair ) ; }
Distance : 5

95
Tree	{ return Memoizer ; }
Code	{ return Memoizer ; }
Distance : 5

96
Tree	{ return PRODUCT . iterator () . getTime () ; }
Code	{ return PRODUCT . iterator () . getTime () ; }
Distance : 4

97
Tree	{ return Pair . iterator ( a1 ) ; }
Code	{ return Pair . iterator ( a1 ) ; }
Distance : 5

98
Tree	{ return BigRealField . iterator () ; }
Code	{ return BigRealField . iterator () ; }
Distance : 2

99
Tree	{ return new tokenizer () ; }
Code	{ return new tokenizer () ; }
Distance : 4

100
Tree	{ return outerProduct () ; }
Code	{ return outerProduct () ; }
Distance : 4

101
Tree	{ return Pair ; }
Code	{ return Pair ; }
Distance : 5

102
Tree	{ return outerClassInstance ; }
Code	{ return outerClassInstance ; }
Distance : 5

103
Tree	{ return Pair . iterator () && coefficients . getValue () ; }
Code	{ return Pair . iterator () && coefficients . getValue () ; }
Distance : 6

104
Tree	{ return changeListeners . iterator () . getTime () ; }
Code	{ return changeListeners . iterator () . getTime () ; }
Distance : 4

105
Tree	{ return Pair . outerProduct () . getTime () ; }
Code	{ return Pair . outerProduct () . getTime () ; }
Distance : 4

106
Tree	{ return tokenizer . iterator ( a1 . getTime () ) . iterator () ; }
Code	{ return tokenizer . iterator ( a1 . getTime () ) . iterator () ; }
Distance : 8

107
Tree	{ return Complex.ZERO ; }
Code	{ return Complex.ZERO ; }
Distance : 5

108
Tree	{ return iterator ( chromosomes ) ; }
Code	{ return iterator ( chromosomes ) ; }
Distance : 5

109
Tree	{ return ( currentType == null ? null : coefficients . iterator () ) ; }
Code	{ return ( currentType == null ? null : coefficients . iterator () ) ; }
Distance : 9

110
Tree	{ return this . coefficients ; }
Code	{ return this . coefficients ; }
Distance : 4

111
Tree	{ return new Pair ( yTmp ) ; }
Code	{ return new Pair ( yTmp ) ; }
Distance : 5

112
Tree	{ return new BigFraction ( Pair ) ; }
Code	{ return new BigFraction ( Pair ) ; }
Distance : 5

113
Tree	{ return changeListeners . iterator ( bp . getTime () ) . iterator () ; }
Code	{ return changeListeners . iterator ( bp . getTime () ) . iterator () ; }
Distance : 8

114
Tree	{ return defaultValue () ; }
Code	{ return defaultValue () ; }
Distance : 4

115
Tree	{ return Pair . iterator () && coefficients . clone () ; }
Code	{ return Pair . iterator () && coefficients . clone () ; }
Distance : 6

116
Tree	{ return space . iterator () ; }
Code	{ return space . iterator () ; }
Distance : 2

117
Tree	{ return PRODUCT . iterator ( a1 . getTime () ) . iterator () ; }
Code	{ return PRODUCT . iterator ( a1 . getTime () ) . iterator () ; }
Distance : 8

118
Tree	{ return outerClassInstance . iterator () - NUMBER_CONSTANT ; }
Code	{ return outerClassInstance . iterator () - NUMBER_CONSTANT ; }
Distance : 4

119
Tree	{ return outerClassInstance . iterator ( bp . getTime () ) . iterator () ; }
Code	{ return outerClassInstance . iterator ( bp . getTime () ) . iterator () ; }
Distance : 8

120
Tree	{ return ! peepholePass . iterator () ; }
Code	{ return ! peepholePass . iterator () ; }
Distance : 2

121
Tree	{ return this . changeListeners . outerProduct () ; }
Code	{ return this . changeListeners . outerProduct () ; }
Distance : 4

122
Tree	{ return this . time ; }
Code	{ return this . time ; }
Distance : 4

123
Tree	{ return this . changeListeners . newDefaultSolver () ; }
Code	{ return this . changeListeners . newDefaultSolver () ; }
Distance : 4

124
Tree	{ return DstNormalization.STANDARD_DST_I ; }
Code	{ return DstNormalization.STANDARD_DST_I ; }
Distance : 5

125
Tree	{ return new RealMatrixImpl () ; }
Code	{ return new RealMatrixImpl () ; }
Distance : 4

126
Tree	{ return false ; }
Code	{ return false ; }
Distance : 5

127
Tree	{ return new RunnerProvider () ; }
Code	{ return new RunnerProvider () ; }
Distance : 4

128
Tree	{ return new ByteArrayInputStream ( Pair ) ; }
Code	{ return new ByteArrayInputStream ( Pair ) ; }
Distance : 5

129
Tree	{ return pad () ; }
Code	{ return pad () ; }
Distance : 4

130
Tree	{ return identity () ; }
Code	{ return identity () ; }
Distance : 4

131
Tree	{ return ( currentType ) coefficients . iterator () ; }
Code	{ return ( currentType ) coefficients . iterator () ; }
Distance : 4

132
Tree	{ return newDefaultSolver () ; }
Code	{ return newDefaultSolver () ; }
Distance : 4

133
Tree	{ return new ByteArrayInputStream () ; }
Code	{ return new ByteArrayInputStream () ; }
Distance : 4

134
Tree	{ return Pair . iterator () && coefficients . intValue () ; }
Code	{ return Pair . iterator () && coefficients . intValue () ; }
Distance : 6

135
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 5

136
Tree	{ return changeListeners . iterator ( a1 . getTime () ) ; }
Code	{ return changeListeners . iterator ( a1 . getTime () ) ; }
Distance : 7

137
Tree	{ return this . itemLabelGeneratorMap ; }
Code	{ return this . itemLabelGeneratorMap ; }
Distance : 4

138
Tree	{ return changeListeners . iterator ( a1 . getTime () ) . iterator () ; }
Code	{ return changeListeners . iterator ( a1 . getTime () ) . iterator () ; }
Distance : 8

139
Tree	{ return this . changeListeners . getTime () ; }
Code	{ return this . changeListeners . getTime () ; }
Distance : 4

140
Tree	{ return new QRDecomposition () ; }
Code	{ return new QRDecomposition () ; }
Distance : 4

141
Tree	{ return new PascalDistribution () ; }
Code	{ return new PascalDistribution () ; }
Distance : 4

142
Tree	{ return tokenizer . iterator ( a1 . getTime () ) ; }
Code	{ return tokenizer . iterator ( a1 . getTime () ) ; }
Distance : 7

143
Tree	{ return new RealMatrixImpl ( Pair ) ; }
Code	{ return new RealMatrixImpl ( Pair ) ; }
Distance : 5

144
Tree	{ return getCSVClone () ; }
Code	{ return getCSVClone () ; }
Distance : 4

145
Tree	{ return this . time . iterator () ; }
Code	{ return this . time . iterator () ; }
Distance : 3

146
Tree	{ return this . outerClassInstance ; }
Code	{ return this . outerClassInstance ; }
Distance : 4

147
Tree	{ return ( Pair == null ? null : outerClassInstance . iterator () ) ; }
Code	{ return ( Pair == null ? null : outerClassInstance . iterator () ) ; }
Distance : 9

148
Tree	{ return STRING_CONSTANT + changeListeners . iterator () + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + changeListeners . iterator () + STRING_CONSTANT ; }
Distance : 5

149
Tree	{ return STRING_CONSTANT + coefficients . iterator () + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + coefficients . iterator () + STRING_CONSTANT ; }
Distance : 5

150
Tree	{ return STRING_CONSTANT + tokenizer . iterator () + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + tokenizer . iterator () + STRING_CONSTANT ; }
Distance : 5

151
Tree	{ return STRING_CONSTANT + osName . iterator () + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + osName . iterator () + STRING_CONSTANT ; }
Distance : 5

152
Tree	{ return this . coefficients . iterator () ; }
Code	{ return this . coefficients . iterator () ; }
Distance : 3

153
Tree	{ return STRING_CONSTANT + yTmp . iterator () + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + yTmp . iterator () + STRING_CONSTANT ; }
Distance : 5

154
Tree	{ return this . tokenizer ; }
Code	{ return this . tokenizer ; }
Distance : 4

155
Tree	{ return iterator ( VectorDataItem ) ; }
Code	{ return iterator ( VectorDataItem ) ; }
Distance : 5

156
Tree	{ return STRING_CONSTANT + outerClassInstance . iterator () + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + outerClassInstance . iterator () + STRING_CONSTANT ; }
Distance : 5

157
Tree	{ return outerClassInstance == null chromosomes changeListeners . iterator () ; }
Code	{ return outerClassInstance == null chromosomes changeListeners . iterator () ; }
Distance : 5

158
Tree	{ return Pair == null chromosomes changeListeners . iterator () ; }
Code	{ return Pair == null chromosomes changeListeners . iterator () ; }
Distance : 5

159
Tree	{ return this . changeListeners . getFirstMillisecond () ; }
Code	{ return this . changeListeners . getFirstMillisecond () ; }
Distance : 4

160
Tree	{ return this . dialBackgroundPaint . iterator () ; }
Code	{ return this . dialBackgroundPaint . iterator () ; }
Distance : 3

161
Tree	{ return tokenizer == null chromosomes changeListeners . iterator () ; }
Code	{ return tokenizer == null chromosomes changeListeners . iterator () ; }
Distance : 5

162
Tree	{ return Pair == null chromosomes outerClassInstance . iterator () ; }
Code	{ return Pair == null chromosomes outerClassInstance . iterator () ; }
Distance : 5

163
Tree	{ return Pair . iterator () && coefficients . inIncrementalCheckMode () ; }
Code	{ return Pair . iterator () && coefficients . inIncrementalCheckMode () ; }
Distance : 6

164
Tree	{ return this . chromosomes ; }
Code	{ return this . chromosomes ; }
Distance : 4

165
Tree	{ return new VoidMethodStubbableImpl () ; }
Code	{ return new VoidMethodStubbableImpl () ; }
Distance : 4

166
Tree	{ return changeListeners == null chromosomes outerClassInstance . iterator () ; }
Code	{ return changeListeners == null chromosomes outerClassInstance . iterator () ; }
Distance : 5

167
Tree	{ return Pair . iterator () () bp . getTime () ; }
Code	{ return Pair . iterator () () bp . getTime () ; }
Distance : 6

168
Tree	{ return STRING_CONSTANT + Pair . iterator () + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + Pair . iterator () + STRING_CONSTANT ; }
Distance : 5

169
Tree	{ return new BigFraction ( tokenizer ) ; }
Code	{ return new BigFraction ( tokenizer ) ; }
Distance : 5

170
Tree	{ return Pair == null chromosomes dialBackgroundPaint . iterator () ; }
Code	{ return Pair == null chromosomes dialBackgroundPaint . iterator () ; }
Distance : 5

171
Tree	{ return true ; }
Code	{ return true ; }
Distance : 5

172
Tree	{ return new Pair ( Pair ) ; }
Code	{ return new Pair ( Pair ) ; }
Distance : 5

173
Tree	{ return Pair . iterator () () w . getTime () ; }
Code	{ return Pair . iterator () () w . getTime () ; }
Distance : 6

174
Tree	{ return changeListeners . iterator () () bp . getTime () ; }
Code	{ return changeListeners . iterator () () bp . getTime () ; }
Distance : 6

175
Tree	{ return new Array2DRowFieldMatrix () ; }
Code	{ return new Array2DRowFieldMatrix () ; }
Distance : 4

176
Tree	{ return RegularizedGamma.P ; }
Code	{ return RegularizedGamma.P ; }
Distance : 5

177
Tree	{ return getRootNode () ; }
Code	{ return getRootNode () ; }
Distance : 4

178
Tree	{ return FastMath.PI ; }
Code	{ return FastMath.PI ; }
Distance : 5

179
Tree	{ return outerClassInstance . iterator () () bp . getTime () ; }
Code	{ return outerClassInstance . iterator () () bp . getTime () ; }
Distance : 6

180
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 6

181
Tree	{ return STRING_CONSTANT ; } mock
Code	{ return STRING_CONSTANT ; } mock
Distance : 6

182
Tree	{ return changeListeners == null chromosomes changeListeners . iterator () ; }
Code	{ return changeListeners == null chromosomes changeListeners . iterator () ; }
Distance : 5

183
Tree	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT + chromosomes . iterator () + STRING_CONSTANT ; }
Distance : 5

184
Tree	{ return Pair . iterator () () a1 . getTime () ; }
Code	{ return Pair . iterator () () a1 . getTime () ; }
Distance : 6

185
Tree	{ return STRING_CONSTANT ; } MathRuntimeException
Code	{ return STRING_CONSTANT ; } MathRuntimeException
Distance : 6

186
Tree	{ return tokenizer . iterator () () bp . getTime () ; }
Code	{ return tokenizer . iterator () () bp . getTime () ; }
Distance : 6

187
Tree	{ return Pair . iterator () () calendar . getTime () ; }
Code	{ return Pair . iterator () () calendar . getTime () ; }
Distance : 6

188
Tree	{ return STRING_CONSTANT ; } Override
Code	{ return STRING_CONSTANT ; } Override
Distance : 6

189
Tree	{ return Pair . iterator () () INDEX_OFFSET . getTime () ; }
Code	{ return Pair . iterator () () INDEX_OFFSET . getTime () ; }
Distance : 6

190
Tree	{ return STRING_CONSTANT ; } f
Code	{ return STRING_CONSTANT ; } f
Distance : 6

191
Tree	{ return false ; } MathRuntimeException
Code	{ return false ; } MathRuntimeException
Distance : 6

192
Tree	{ return false ; } Class
Code	{ return false ; } Class
Distance : 6

193
Tree	{ return false ; } ParamChecks
Code	{ return false ; } ParamChecks
Distance : 6

194
Tree	{ return Pair == null chromosomes coefficients . iterator () ; }
Code	{ return Pair == null chromosomes coefficients . iterator () ; }
Distance : 5

195
Tree	{ return false ; } {}
Code	{ return false ; } {}
Distance : 6

196
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 6

197
Tree	{ return false ; } Test
Code	{ return false ; } Test
Distance : 6

198
Tree	{ return false ; } f
Code	{ return false ; } f
Distance : 6

199
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 6

========================================================================


========================================================================
Example Number: 73
Parent Code is: 
if ( Precision . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( Precision . compareTo ( entry , NUMBER_CONSTANT , epsilon ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (32 (800{val=Precision}) (235{val=.}) (802{val=compareTo}) (214{val=(}) (800{val=entry}) (234{val=,}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (800{val=maxUlps}) (215{val=)})) (231{val=>}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=columnsToDrop}) (235{val=.}) (802{val=add}) (214{val=(}) (800{val=i}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (32 (800{val=Precision}) (235{val=.}) (802{val=compareTo}) (214{val=(}) (800{val=entry}) (234{val=,}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (800{val=epsilon}) (215{val=)})) (231{val=>}) (34{val=NUMBER_CONSTANT})) (215{val=)}) (8 (218{val={}) (21 (32 (800{val=columnsToDrop}) (235{val=.}) (802{val=add}) (214{val=(}) (800{val=i}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/33/parent/src_main_java_org_apache_commons_math3_optimization_linear_SimplexTableau.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { factory . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { factory . add ( i ) ; }
Distance : 6

1
Tree	if ( p . compareTo ( entry , this . iChrono ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry , this . iChrono ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

2
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { inOrderContext . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { inOrderContext . add ( i ) ; }
Distance : 6

3
Tree	if ( p . compareTo ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

4
Tree	if ( p . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

5
Tree	if ( p . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

6
Tree	if ( p . compareTo ( null , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( null , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

7
Tree	if ( k . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( k . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

8
Tree	if ( compareTo ( entry . toString ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . toString ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

9
Tree	if ( p . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { matcherStack . add ( i ) ; }
Code	if ( p . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { matcherStack . add ( i ) ; }
Distance : 6

10
Tree	if ( p . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) - binCount ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) - binCount ) { columnsToDrop . add ( i ) ; }
Distance : 4

11
Tree	if ( compareTo ( entry . getInput ( entry , NUMBER_CONSTANT , cutOff ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { matcherStack . add ( i ) ; }
Code	if ( compareTo ( entry . getInput ( entry , NUMBER_CONSTANT , cutOff ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { matcherStack . add ( i ) ; }
Distance : 9

12
Tree	if ( compareTo ( entry . startMillis ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . startMillis ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

13
Tree	if ( p . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { matcherStack . add ( i ) ; }
Code	if ( p . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { matcherStack . add ( i ) ; }
Distance : 3

14
Tree	if ( p . compareTo ( null , startMillis ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( null , startMillis ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

15
Tree	if ( k . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( k . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

16
Tree	if ( p . compareTo ( null , CombinatoricsUtils ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( null , CombinatoricsUtils ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

17
Tree	if ( p . compareTo ( null , null ) > NUMBER_CONSTANT ) { matcherStack . add ( i ) ; }
Code	if ( p . compareTo ( null , null ) > NUMBER_CONSTANT ) { matcherStack . add ( i ) ; }
Distance : 6

18
Tree	if ( p . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { matcherStack . add ( i ) ; }
Code	if ( p . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { matcherStack . add ( i ) ; }
Distance : 6

19
Tree	if ( call.returnType ) { columnsToDrop . add ( entry ) ; }
Code	if ( call.returnType ) { columnsToDrop . add ( entry ) ; }
Distance : 13

20
Tree	if ( p . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

21
Tree	if ( p . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

22
Tree	if ( p . compareTo ( entry , NUMBER_CONSTANT , cutOff ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry , NUMBER_CONSTANT , cutOff ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

23
Tree	if ( entry . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

24
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { missingInvocation . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { missingInvocation . add ( i ) ; }
Distance : 6

25
Tree	if ( p . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

26
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { matcherStack . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { matcherStack . add ( i ) ; }
Distance : 6

27
Tree	if ( compareTo ( entry , startMillis , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry , startMillis , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

28
Tree	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { missingInvocation . add ( i ) ; }
Code	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { missingInvocation . add ( i ) ; }
Distance : 7

29
Tree	if ( p . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { matcherStack . add ( i ) ; }
Code	if ( p . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { matcherStack . add ( i ) ; }
Distance : 6

30
Tree	if ( c.length != null ) { columnsToDrop . add ( entry ) ; }
Code	if ( c.length != null ) { columnsToDrop . add ( entry ) ; }
Distance : 13

31
Tree	if ( p . compareTo ( entry , NUMBER_CONSTANT , cutOff ) - maxUlps ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry , NUMBER_CONSTANT , cutOff ) - maxUlps ) { columnsToDrop . add ( i ) ; }
Distance : 4

32
Tree	if ( p . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry , this . maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

33
Tree	if ( p . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { validProperties . add ( i ) ; }
Code	if ( p . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { validProperties . add ( i ) ; }
Distance : 5

34
Tree	if ( c.length ) { columnsToDrop . add ( entry ) ; }
Code	if ( c.length ) { columnsToDrop . add ( entry ) ; }
Distance : 13

35
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { validProperties . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { validProperties . add ( i ) ; }
Distance : 6

36
Tree	if ( k . compareTo ( null , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( k . compareTo ( null , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

37
Tree	if ( call.returnType . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( call.returnType . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

38
Tree	if ( p . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { matcherStack . add ( i ) ; }
Code	if ( p . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { matcherStack . add ( i ) ; }
Distance : 5

39
Tree	if ( entry . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

40
Tree	if ( p . compareTo ( null , null ) > NUMBER_CONSTANT ) { labelBounds . add ( i ) ; }
Code	if ( p . compareTo ( null , null ) > NUMBER_CONSTANT ) { labelBounds . add ( i ) ; }
Distance : 6

41
Tree	if ( p . compareTo ( null , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( null , i ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

42
Tree	if ( entry . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 10

43
Tree	if ( p . compareTo ( entry , this . hi ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry , this . hi ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

44
Tree	if ( p . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { labelBounds . add ( i ) ; }
Code	if ( p . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { labelBounds . add ( i ) ; }
Distance : 5

45
Tree	if ( p . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 10

46
Tree	if ( Integer.MAX_VALUE != null ) { columnsToDrop . add ( entry ) ; }
Code	if ( Integer.MAX_VALUE != null ) { columnsToDrop . add ( entry ) ; }
Distance : 13

47
Tree	if ( k . compareTo ( entry / maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( k . compareTo ( entry / maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

48
Tree	if ( p . compareTo ( entry ) > NUMBER_CONSTANT ) { matcherStack . add ( i ) ; }
Code	if ( p . compareTo ( entry ) > NUMBER_CONSTANT ) { matcherStack . add ( i ) ; }
Distance : 6

49
Tree	if ( k . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( k . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

50
Tree	if ( p . compareTo ( entry , startMillis , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry , startMillis , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

51
Tree	if ( entry . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

52
Tree	if ( p . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { missingInvocation . add ( i ) ; }
Code	if ( p . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { missingInvocation . add ( i ) ; }
Distance : 5

53
Tree	if ( p . compareTo ( NUMBER_CONSTANT , obj2.props ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( NUMBER_CONSTANT , obj2.props ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

54
Tree	if ( k . compareTo ( null , cutOff ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( k . compareTo ( null , cutOff ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

55
Tree	if ( k . compareTo ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( k . compareTo ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

56
Tree	if ( p . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { labelBounds . add ( i ) ; }
Code	if ( p . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { labelBounds . add ( i ) ; }
Distance : 6

57
Tree	if ( compareTo ( entry . getInput ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . getInput ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

58
Tree	if ( entry . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

59
Tree	if ( p . compareTo ( entry , cutOff , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry , cutOff , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

60
Tree	if ( k . compareTo ( entry / maxUlps , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( k . compareTo ( entry / maxUlps , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

61
Tree	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { ListSampler . add ( i ) ; }
Code	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { ListSampler . add ( i ) ; }
Distance : 7

62
Tree	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 6

63
Tree	if ( p . compareTo ( NUMBER_CONSTANT , knots.length ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( NUMBER_CONSTANT , knots.length ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

64
Tree	if ( p . compareTo ( entry / entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry / entry , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

65
Tree	if ( newLiteralNode . compareTo ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( newLiteralNode . compareTo ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

66
Tree	if ( p . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) - maxUlps ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) - maxUlps ) { columnsToDrop . add ( i ) ; }
Distance : 4

67
Tree	if ( p . compareTo ( NUMBER_CONSTANT , importedName.value ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( NUMBER_CONSTANT , importedName.value ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

68
Tree	if ( k . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( k . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

69
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

70
Tree	if ( p . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { missingInvocation . add ( i ) ; }
Code	if ( p . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { missingInvocation . add ( i ) ; }
Distance : 6

71
Tree	if ( Double.MIN_VALUE != null ) { columnsToDrop . add ( entry ) ; }
Code	if ( Double.MIN_VALUE != null ) { columnsToDrop . add ( entry ) ; }
Distance : 13

72
Tree	if ( k . compareTo ( entry , NUMBER_CONSTANT , cutOff ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( k . compareTo ( entry , NUMBER_CONSTANT , cutOff ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

73
Tree	if ( compareTo ( entry . getInput ( entry , NUMBER_CONSTANT , startMillis ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . getInput ( entry , NUMBER_CONSTANT , startMillis ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

74
Tree	if ( compareTo ( entry , cutOff , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry , cutOff , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

75
Tree	if ( p . compareTo ( null , cutOff ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( null , cutOff ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

76
Tree	if ( k . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( k . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

77
Tree	if ( p . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

78
Tree	if ( Var.ARGUMENTS != null ) { columnsToDrop . add ( entry ) ; }
Code	if ( Var.ARGUMENTS != null ) { columnsToDrop . add ( entry ) ; }
Distance : 13

79
Tree	if ( Double.MIN_VALUE . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Double.MIN_VALUE . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

80
Tree	if ( compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { labelBounds . add ( i ) ; }
Code	if ( compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { labelBounds . add ( i ) ; }
Distance : 5

81
Tree	if ( p . compareTo ( entry / maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry / maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

82
Tree	if ( knots.length . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( knots.length . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

83
Tree	if ( p . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) - columnsToDrop ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) - columnsToDrop ) { columnsToDrop . add ( i ) ; }
Distance : 4

84
Tree	if ( p . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { matcherStack . add ( i ) ; }
Code	if ( p . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { matcherStack . add ( i ) ; }
Distance : 4

85
Tree	if ( knots.length != null ) { columnsToDrop . add ( entry ) ; }
Code	if ( knots.length != null ) { columnsToDrop . add ( entry ) ; }
Distance : 13

86
Tree	if ( compareTo ( entry . getResult ( entry , NUMBER_CONSTANT , cutOff ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . getResult ( entry , NUMBER_CONSTANT , cutOff ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

87
Tree	if ( k . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( k . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

88
Tree	if ( p . compareTo ( entry , NUMBER_CONSTANT , startMillis ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry , NUMBER_CONSTANT , startMillis ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

89
Tree	if ( p . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) - theta ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) - theta ) { columnsToDrop . add ( i ) ; }
Distance : 4

90
Tree	if ( Double.MIN_VALUE ) { columnsToDrop . add ( entry ) ; }
Code	if ( Double.MIN_VALUE ) { columnsToDrop . add ( entry ) ; }
Distance : 13

91
Tree	if ( p . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { matcherStack . add ( i ) ; }
Code	if ( p . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { matcherStack . add ( i ) ; }
Distance : 11

92
Tree	if ( call.returnType != null ) { columnsToDrop . add ( entry ) ; }
Code	if ( call.returnType != null ) { columnsToDrop . add ( entry ) ; }
Distance : 13

93
Tree	if ( p . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { labelBounds . add ( i ) ; }
Code	if ( p . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { labelBounds . add ( i ) ; }
Distance : 11

94
Tree	if ( p . compareTo ( NUMBER_CONSTANT , OrderDirection.INCREASING ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( NUMBER_CONSTANT , OrderDirection.INCREASING ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

95
Tree	if ( k . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( k . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

96
Tree	if ( p . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { validProperties . add ( i ) ; }
Code	if ( p . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { validProperties . add ( i ) ; }
Distance : 11

97
Tree	if ( compareTo ( entry . toString ( entry , NUMBER_CONSTANT , cutOff ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . toString ( entry , NUMBER_CONSTANT , cutOff ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

98
Tree	if ( p . compareTo ( entry , NUMBER_CONSTANT , CombinatoricsUtils ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry , NUMBER_CONSTANT , CombinatoricsUtils ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

99
Tree	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { matcherStack . add ( i ) ; }
Code	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { matcherStack . add ( i ) ; }
Distance : 7

100
Tree	if ( LocalizedFormats.OUT_OF_RANGE_SIMPLE . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( LocalizedFormats.OUT_OF_RANGE_SIMPLE . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

101
Tree	if ( compareTo ( entry . entry ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . entry ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

102
Tree	if ( c.length . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( c.length . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

103
Tree	if ( newLiteralNode . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( newLiteralNode . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

104
Tree	if ( Precision . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

105
Tree	if ( p . compareTo ( NUMBER_CONSTANT , PivotSelectionRule.BLAND ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( NUMBER_CONSTANT , PivotSelectionRule.BLAND ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

106
Tree	if ( k . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( k . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 10

107
Tree	if ( compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { matcherStack . add ( i ) ; }
Code	if ( compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { matcherStack . add ( i ) ; }
Distance : 5

108
Tree	if ( LocalizedFormats.OUT_OF_RANGE_SIMPLE != null ) { columnsToDrop . add ( entry ) ; }
Code	if ( LocalizedFormats.OUT_OF_RANGE_SIMPLE != null ) { columnsToDrop . add ( entry ) ; }
Distance : 13

109
Tree	if ( p . compareTo ( entry ) > NUMBER_CONSTANT ) { labelBounds . add ( i ) ; }
Code	if ( p . compareTo ( entry ) > NUMBER_CONSTANT ) { labelBounds . add ( i ) ; }
Distance : 6

110
Tree	if ( p . compareTo ( entry , this . cutOff ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry , this . cutOff ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

111
Tree	if ( newLiteralNode . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( newLiteralNode . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

112
Tree	if ( newLiteralNode . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( newLiteralNode . compareTo ( NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

113
Tree	if ( p . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { missingInvocation . add ( i ) ; }
Code	if ( p . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { missingInvocation . add ( i ) ; }
Distance : 11

114
Tree	if ( Integer.MAX_VALUE . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Integer.MAX_VALUE . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

115
Tree	if ( p . compareTo ( entry / j , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry / j , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

116
Tree	if ( compareTo ( entry . getResult ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . getResult ( entry , NUMBER_CONSTANT , maxUlps ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

117
Tree	if ( p . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

118
Tree	if ( Var.ARGUMENTS . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Var.ARGUMENTS . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

119
Tree	if ( p . compareTo ( entry / maxUlps , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry / maxUlps , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

120
Tree	if ( p . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( p . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 6

121
Tree	if ( p . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { missingInvocation . add ( i ) ; }
Code	if ( p . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { missingInvocation . add ( i ) ; }
Distance : 6

122
Tree	if ( p . compareTo ( NUMBER_CONSTANT , GoalType.MINIMIZE ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( NUMBER_CONSTANT , GoalType.MINIMIZE ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

123
Tree	if ( p . compareTo ( null , null ) > NUMBER_CONSTANT ) { missingInvocation . add ( i ) ; }
Code	if ( p . compareTo ( null , null ) > NUMBER_CONSTANT ) { missingInvocation . add ( i ) ; }
Distance : 6

124
Tree	if ( p . compareTo ( entry , this . startMillis ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry , this . startMillis ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

125
Tree	if ( p . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { validProperties . add ( i ) ; }
Code	if ( p . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { validProperties . add ( i ) ; }
Distance : 6

126
Tree	if ( k . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( k . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

127
Tree	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { validProperties . add ( i ) ; }
Code	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { validProperties . add ( i ) ; }
Distance : 7

128
Tree	if ( entry . compareTo ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

129
Tree	if ( p . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry , NUMBER_CONSTANT , entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 2

130
Tree	if ( Var.ARGUMENTS ) { columnsToDrop . add ( entry ) ; }
Code	if ( Var.ARGUMENTS ) { columnsToDrop . add ( entry ) ; }
Distance : 13

131
Tree	if ( compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

132
Tree	if ( entry . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

133
Tree	if ( p . compareTo ( entry / cutOff , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry / cutOff , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

134
Tree	if ( newLiteralNode . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( newLiteralNode . compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 10

135
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

136
Tree	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { labelBounds . add ( i ) ; }
Code	if ( compareTo ( STRING_CONSTANT , STRING_CONSTANT , STRING_CONSTANT ) > NUMBER_CONSTANT ) { labelBounds . add ( i ) ; }
Distance : 6

137
Tree	if ( p . compareTo ( NUMBER_CONSTANT , CheckLevel.OFF ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( NUMBER_CONSTANT , CheckLevel.OFF ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

138
Tree	if ( p . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { labelBounds . add ( i ) ; }
Code	if ( p . compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { labelBounds . add ( i ) ; }
Distance : 4

139
Tree	if ( p . compareTo ( null , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( null , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

140
Tree	if ( p . compareTo ( entry / cutOff , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry / cutOff , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

141
Tree	if ( p . compareTo ( entry , NUMBER_CONSTANT , cutOff ) - columnsToDrop ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry , NUMBER_CONSTANT , cutOff ) - columnsToDrop ) { columnsToDrop . add ( i ) ; }
Distance : 4

142
Tree	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { inOrderContext . add ( i ) ; }
Code	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { inOrderContext . add ( i ) ; }
Distance : 7

143
Tree	if ( newLiteralNode . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( newLiteralNode . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

144
Tree	if ( p . compareTo ( entry / displayOffset , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry / displayOffset , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

145
Tree	if ( p . compareTo ( entry , NUMBER_CONSTANT , cutOff ) - binCount ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry , NUMBER_CONSTANT , cutOff ) - binCount ) { columnsToDrop . add ( i ) ; }
Distance : 4

146
Tree	if ( k . compareTo ( entry , this . iChrono ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( k . compareTo ( entry , this . iChrono ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

147
Tree	if ( Integer.MAX_VALUE ) { columnsToDrop . add ( entry ) ; }
Code	if ( Integer.MAX_VALUE ) { columnsToDrop . add ( entry ) ; }
Distance : 13

148
Tree	if ( p . compareTo ( entry , this . BOOLEAN_TYPE ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry , this . BOOLEAN_TYPE ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

149
Tree	if ( knots.length ) { columnsToDrop . add ( entry ) ; }
Code	if ( knots.length ) { columnsToDrop . add ( entry ) ; }
Distance : 13

150
Tree	if ( p . compareTo ( entry / entry , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry / entry , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

151
Tree	if ( compareTo ( entry . maxUlps ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { matcherStack . add ( i ) ; }
Code	if ( compareTo ( entry . maxUlps ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { matcherStack . add ( i ) ; }
Distance : 8

152
Tree	if ( Boolean.FALSE . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Boolean.FALSE . compareTo () > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

153
Tree	if ( p . compareTo ( entry / i , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry / i , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

154
Tree	if ( newLiteralNode . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( newLiteralNode . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

155
Tree	if ( LocalizedFormats.OUT_OF_RANGE_SIMPLE ) { columnsToDrop . add ( entry ) ; }
Code	if ( LocalizedFormats.OUT_OF_RANGE_SIMPLE ) { columnsToDrop . add ( entry ) ; }
Distance : 13

156
Tree	if ( p . compareTo ( entry , PivotSelectionRule.BLAND , maxUlps , LocalizedFormats.OVERFLOW_IN_ADDITION ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry , PivotSelectionRule.BLAND , maxUlps , LocalizedFormats.OVERFLOW_IN_ADDITION ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

157
Tree	if ( p . compareTo ( entry ) > NUMBER_CONSTANT ) { missingInvocation . add ( i ) ; }
Code	if ( p . compareTo ( entry ) > NUMBER_CONSTANT ) { missingInvocation . add ( i ) ; }
Distance : 6

158
Tree	if ( Boolean.FALSE ) { columnsToDrop . add ( entry ) ; }
Code	if ( Boolean.FALSE ) { columnsToDrop . add ( entry ) ; }
Distance : 13

159
Tree	if ( p . compareTo ( entry , PivotSelectionRule.BLAND , maxUlps , Context.OTHER ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry , PivotSelectionRule.BLAND , maxUlps , Context.OTHER ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

160
Tree	if ( entry . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( entry . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

161
Tree	if ( compareTo ( entry . getInput ( entry , NUMBER_CONSTANT , cutOff ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . getInput ( entry , NUMBER_CONSTANT , cutOff ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 8

162
Tree	if ( k . compareTo ( entry , startMillis , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( k . compareTo ( entry , startMillis , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 3

163
Tree	if ( compareTo ( entry . cutOff ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . cutOff ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

164
Tree	if ( compareTo ( entry . maxUlps ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . maxUlps ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

165
Tree	if ( p . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { labelBounds . add ( i ) ; }
Code	if ( p . compareTo ( entry , - NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { labelBounds . add ( i ) ; }
Distance : 6

166
Tree	if ( Boolean.FALSE != null ) { columnsToDrop . add ( entry ) ; }
Code	if ( Boolean.FALSE != null ) { columnsToDrop . add ( entry ) ; }
Distance : 13

167
Tree	if ( Precision . compareTo ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( entry ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

168
Tree	if ( compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { validProperties . add ( i ) ; }
Code	if ( compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { validProperties . add ( i ) ; }
Distance : 5

169
Tree	if ( Precision . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

170
Tree	if ( k . compareTo ( NUMBER_CONSTANT , PivotSelectionRule.BLAND ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( k . compareTo ( NUMBER_CONSTANT , PivotSelectionRule.BLAND ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

171
Tree	if ( p . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { labelBounds . add ( i ) ; }
Code	if ( p . compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { labelBounds . add ( i ) ; }
Distance : 6

172
Tree	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { labelBounds . add ( i ) ; }
Code	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { labelBounds . add ( i ) ; }
Distance : 7

173
Tree	if ( p . compareTo ( entry / displayOffset , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry / displayOffset , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

174
Tree	if ( k . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) - maxUlps ) { columnsToDrop . add ( i ) ; }
Code	if ( k . compareTo ( entry , NUMBER_CONSTANT , maxUlps ) - maxUlps ) { columnsToDrop . add ( i ) ; }
Distance : 4

175
Tree	if ( p . compareTo ( entry / j , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry / j , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

176
Tree	if ( compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { missingInvocation . add ( i ) ; }
Code	if ( compareTo ( entry , maxUlps , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { missingInvocation . add ( i ) ; }
Distance : 5

177
Tree	if ( compareTo ( entry . CHAR_COPY ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . CHAR_COPY ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

178
Tree	if ( compareTo ( entry , wrapper , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry , wrapper , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

179
Tree	if ( p . compareTo ( entry , OrderDirection.INCREASING , maxUlps , Context.OTHER ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry , OrderDirection.INCREASING , maxUlps , Context.OTHER ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

180
Tree	if ( p . compareTo ( entry / startMillis , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry / startMillis , maxUlps ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

181
Tree	if ( Precision . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( Precision . compareTo ( null , null ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

182
Tree	if ( p . compareTo ( entry , OrderDirection.INCREASING , maxUlps , LocalizedFormats.OVERFLOW_IN_ADDITION ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry , OrderDirection.INCREASING , maxUlps , LocalizedFormats.OVERFLOW_IN_ADDITION ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

183
Tree	if ( compareTo ( entry . minPos ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( compareTo ( entry . minPos ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 7

184
Tree	if ( p . compareTo ( entry / i , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry / i , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

185
Tree	if ( p . compareTo ( entry , ConstructorStrategy.Default.IMITATE_SUPER_TYPE , maxUlps , LocalizedFormats.OVERFLOW_IN_ADDITION ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry , ConstructorStrategy.Default.IMITATE_SUPER_TYPE , maxUlps , LocalizedFormats.OVERFLOW_IN_ADDITION ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

186
Tree	if ( compareTo ( entry . entry ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { matcherStack . add ( i ) ; }
Code	if ( compareTo ( entry . entry ( entry ) , STRING_CONSTANT ) > NUMBER_CONSTANT ) { matcherStack . add ( i ) ; }
Distance : 8

187
Tree	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Code	if ( compareTo ( null , STRING_CONSTANT ) > NUMBER_CONSTANT ) { maxUlps . add ( i ) ; }
Distance : 7

188
Tree	if ( p . compareTo ( entry , that.defaultGroup , maxUlps , LocalizedFormats.OVERFLOW_IN_ADDITION ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry , that.defaultGroup , maxUlps , LocalizedFormats.OVERFLOW_IN_ADDITION ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

189
Tree	if ( p . compareTo ( entry , LocalizedFormats.INTERNAL_ERROR , maxUlps , LocalizedFormats.OVERFLOW_IN_ADDITION ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry , LocalizedFormats.INTERNAL_ERROR , maxUlps , LocalizedFormats.OVERFLOW_IN_ADDITION ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

190
Tree	if ( p . compareTo ( entry / startMillis , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry / startMillis , NUMBER_CONSTANT ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 4

191
Tree	if ( p Precision BigInteger.ZERO ) { columnsToDrop . add ( entry ) ; }
Code	if ( p Precision BigInteger.ZERO ) { columnsToDrop . add ( entry ) ; }
Distance : 13

192
Tree	if ( p . compareTo ( entry , PivotSelectionRule.BLAND , maxUlps , TextAnchor.TOP_CENTER ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Code	if ( p . compareTo ( entry , PivotSelectionRule.BLAND , maxUlps , TextAnchor.TOP_CENTER ) > NUMBER_CONSTANT ) { columnsToDrop . add ( i ) ; }
Distance : 5

193
Tree	if ( p . DiagnosticGroups.ES5_STRICT ) { columnsToDrop . add ( entry ) ; }
Code	if ( p . DiagnosticGroups.ES5_STRICT ) { columnsToDrop . add ( entry ) ; }
Distance : 12

194
Tree	if ( p compareTo importedName.value ) { columnsToDrop . add ( entry ) ; }
Code	if ( p compareTo importedName.value ) { columnsToDrop . add ( entry ) ; }
Distance : 12

195
Tree	if ( p . PassNames.AFTER_STANDARD_CHECKS ) { columnsToDrop . add ( entry ) ; }
Code	if ( p . PassNames.AFTER_STANDARD_CHECKS ) { columnsToDrop . add ( entry ) ; }
Distance : 12

196
Tree	if ( p if Color.GRAY ) { columnsToDrop . add ( entry ) ; }
Code	if ( p if Color.GRAY ) { columnsToDrop . add ( entry ) ; }
Distance : 13

197
Tree	if ( p . rhs.length ) { columnsToDrop . add ( entry ) ; }
Code	if ( p . rhs.length ) { columnsToDrop . add ( entry ) ; }
Distance : 12

198
Tree	if ( p . result.sourceMap ) { columnsToDrop . add ( entry ) ; }
Code	if ( p . result.sourceMap ) { columnsToDrop . add ( entry ) ; }
Distance : 12

199
Tree	if ( p compareTo FeatureSet.Feature.MODULES ) { columnsToDrop . add ( entry ) ; }
Code	if ( p compareTo FeatureSet.Feature.MODULES ) { columnsToDrop . add ( entry ) ; }
Distance : 12

========================================================================


========================================================================
Example Number: 74
Parent Code is: 
final int n1n2prod = n1 * n2 ;
-------------------------------------------------------------------------------
Child code is: 
final double n1n2prod = n1 * n2 ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (39{val=int}) (59 (800{val=n1n2prod}) (204{val==}) (27 (800{val=n1}) (202{val=*}) (800{val=n2}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (39{val=double}) (59 (800{val=n1n2prod}) (204{val==}) (27 (800{val=n1}) (202{val=*}) (800{val=n2}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/30/parent/src_main_java_org_apache_commons_math3_stat_inference_MannWhitneyUTest.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	final int state = / * n2 * n2 ;
Code	final int state = / * n2 * n2 ;
Distance : 5

1
Tree	final int state = / / n1 ;
Code	final int state = / / n1 ;
Distance : 5

2
Tree	final int residual = NUMBER_CONSTANT + n2 ;
Code	final int residual = NUMBER_CONSTANT + n2 ;
Distance : 4

3
Tree	final int state = / / n2 ;
Code	final int state = / / n2 ;
Distance : 4

4
Tree	final int state = ( long ) n1 * n2 ;
Code	final int state = ( long ) n1 * n2 ;
Distance : 5

5
Tree	final int state = ( int ) n1 * n2 ;
Code	final int state = ( int ) n1 * n2 ;
Distance : 5

6
Tree	final int overloadedButSameArgs = NUMBER_CONSTANT / n2 ;
Code	final int overloadedButSameArgs = NUMBER_CONSTANT / n2 ;
Distance : 4

7
Tree	final int residual = n1 > n2 ;
Code	final int residual = n1 > n2 ;
Distance : 3

8
Tree	final int state = n1 * n2 ;
Code	final int state = n1 * n2 ;
Distance : 2

9
Tree	final int state = CHAR_CONS * n2 ;
Code	final int state = CHAR_CONS * n2 ;
Distance : 3

10
Tree	final int residual = ( long ) n1 * n2 ;
Code	final int residual = ( long ) n1 * n2 ;
Distance : 5

11
Tree	final int residual = ( int ) n1 * n2 ;
Code	final int residual = ( int ) n1 * n2 ;
Distance : 5

12
Tree	final int overloadedButSameArgs = ( long ) n1 * n2 ;
Code	final int overloadedButSameArgs = ( long ) n1 * n2 ;
Distance : 5

13
Tree	final int residual = n1 * n2 ;
Code	final int residual = n1 * n2 ;
Distance : 2

14
Tree	final int state = MathUtils.TWO_PI . intValue () - NUMBER_CONSTANT ;
Code	final int state = MathUtils.TWO_PI . intValue () - NUMBER_CONSTANT ;
Distance : 8

15
Tree	final int overloadedButSameArgs = ( int ) n1 * n2 ;
Code	final int overloadedButSameArgs = ( int ) n1 * n2 ;
Distance : 5

16
Tree	final int residual = n1 - n2 ;
Code	final int residual = n1 - n2 ;
Distance : 3

17
Tree	final int residual = MathUtils.TWO_PI . get () - NUMBER_CONSTANT ;
Code	final int residual = MathUtils.TWO_PI . get () - NUMBER_CONSTANT ;
Distance : 8

18
Tree	final int residual = n1 ^ n2 ;
Code	final int residual = n1 ^ n2 ;
Distance : 3

19
Tree	final int residual = / * n2 * n2 ;
Code	final int residual = / * n2 * n2 ;
Distance : 5

20
Tree	final int overloadedButSameArgs = NUMBER_CONSTANT + n2 ;
Code	final int overloadedButSameArgs = NUMBER_CONSTANT + n2 ;
Distance : 4

21
Tree	final int extern = n1 == CHAR_CONS ;
Code	final int extern = n1 == CHAR_CONS ;
Distance : 4

22
Tree	final int state = location > n2 ;
Code	final int state = location > n2 ;
Distance : 4

23
Tree	final int residual = location - n2 ;
Code	final int residual = location - n2 ;
Distance : 4

24
Tree	final int state = n1 - scale [ n2 ] ;
Code	final int state = n1 - scale [ n2 ] ;
Distance : 6

25
Tree	final int extern = n1 - n2 ;
Code	final int extern = n1 - n2 ;
Distance : 3

26
Tree	final int residual = NUMBER_CONSTANT - n2 ;
Code	final int residual = NUMBER_CONSTANT - n2 ;
Distance : 4

27
Tree	final int residual = super + n1 ;
Code	final int residual = super + n1 ;
Distance : 5

28
Tree	final int state = n1 + NUMBER_CONSTANT ;
Code	final int state = n1 + NUMBER_CONSTANT ;
Distance : 4

29
Tree	final int residual = n1 - R [ n2 ] ;
Code	final int residual = n1 - R [ n2 ] ;
Distance : 6

30
Tree	final int residual = n1 + NUMBER_CONSTANT ;
Code	final int residual = n1 + NUMBER_CONSTANT ;
Distance : 4

31
Tree	final int residual = NUMBER_CONSTANT / n2 ;
Code	final int residual = NUMBER_CONSTANT / n2 ;
Distance : 4

32
Tree	final int state = NUMBER_CONSTANT + n1 ;
Code	final int state = NUMBER_CONSTANT + n1 ;
Distance : 5

33
Tree	final int residual = CHAR_CONS + n2 ;
Code	final int residual = CHAR_CONS + n2 ;
Distance : 4

34
Tree	final int overloadedButSameArgs = super * n2 * n2 ;
Code	final int overloadedButSameArgs = super * n2 * n2 ;
Distance : 5

35
Tree	final int state = NUMBER_CONSTANT * LocalizedFormats.NUMBER_TOO_SMALL ;
Code	final int state = NUMBER_CONSTANT * LocalizedFormats.NUMBER_TOO_SMALL ;
Distance : 4

36
Tree	final int state = location + NUMBER_CONSTANT ;
Code	final int state = location + NUMBER_CONSTANT ;
Distance : 5

37
Tree	final int residual = n1 - tol [ n2 ] ;
Code	final int residual = n1 - tol [ n2 ] ;
Distance : 6

38
Tree	final int state = n1 * n1 / n2 ;
Code	final int state = n1 * n1 / n2 ;
Distance : 4

39
Tree	final int state = super + n2 ;
Code	final int state = super + n2 ;
Distance : 4

40
Tree	final int state = n1 - L [ n2 ] ;
Code	final int state = n1 - L [ n2 ] ;
Distance : 6

41
Tree	final int epsa = n1 + NUMBER_CONSTANT ;
Code	final int epsa = n1 + NUMBER_CONSTANT ;
Distance : 4

42
Tree	final int state = NUMBER_CONSTANT * f.length ;
Code	final int state = NUMBER_CONSTANT * f.length ;
Distance : 4

43
Tree	final int state = NUMBER_CONSTANT * n2 * n2 * FunctionFlavor.NORMAL ;
Code	final int state = NUMBER_CONSTANT * n2 * n2 * FunctionFlavor.NORMAL ;
Distance : 7

44
Tree	final int state = CHAR_CONS + n2 ;
Code	final int state = CHAR_CONS + n2 ;
Distance : 4

45
Tree	final int state = u > n1 ;
Code	final int state = u > n1 ;
Distance : 5

46
Tree	final int residual = location + NUMBER_CONSTANT ;
Code	final int residual = location + NUMBER_CONSTANT ;
Distance : 5

47
Tree	final int residual = location - / ;
Code	final int residual = location - / ;
Distance : 5

48
Tree	final int state = super / n1 ;
Code	final int state = super / n1 ;
Distance : 5

49
Tree	final int overloadedButSameArgs = n1 + NUMBER_CONSTANT ;
Code	final int overloadedButSameArgs = n1 + NUMBER_CONSTANT ;
Distance : 4

50
Tree	final int state = u + NUMBER_CONSTANT ;
Code	final int state = u + NUMBER_CONSTANT ;
Distance : 5

51
Tree	final int epsa = n1 * n2 / n2 ;
Code	final int epsa = n1 * n2 / n2 ;
Distance : 4

52
Tree	final int state = MathUtils.TWO_PI / NUMBER_CONSTANT ;
Code	final int state = MathUtils.TWO_PI / NUMBER_CONSTANT ;
Distance : 5

53
Tree	final int residual = / * n2 ;
Code	final int residual = / * n2 ;
Distance : 3

54
Tree	final int state = location > n1 ;
Code	final int state = location > n1 ;
Distance : 5

55
Tree	final int state = n1 * n2 / n2 ;
Code	final int state = n1 * n2 / n2 ;
Distance : 4

56
Tree	final int residual = location > > NUMBER_CONSTANT ;
Code	final int residual = location > > NUMBER_CONSTANT ;
Distance : 6

57
Tree	final int state = n1 - / ;
Code	final int state = n1 - / ;
Distance : 4

58
Tree	final int extern = NUMBER_CONSTANT * n2 * n2 * currentState.length ;
Code	final int extern = NUMBER_CONSTANT * n2 * n2 * currentState.length ;
Distance : 7

59
Tree	final int extern = n1 + NUMBER_CONSTANT ;
Code	final int extern = n1 + NUMBER_CONSTANT ;
Distance : 4

60
Tree	final int state = MathUtils.TWO_PI . is () - NUMBER_CONSTANT ;
Code	final int state = MathUtils.TWO_PI . is () - NUMBER_CONSTANT ;
Distance : 8

61
Tree	final int epsa = NUMBER_CONSTANT / n2 ;
Code	final int epsa = NUMBER_CONSTANT / n2 ;
Distance : 4

62
Tree	final int residual = n1 * n2 / n2 ;
Code	final int residual = n1 * n2 / n2 ;
Distance : 4

63
Tree	final int state = ( long ) n1 * n1 ;
Code	final int state = ( long ) n1 * n1 ;
Distance : 6

64
Tree	final int residual = NUMBER_CONSTANT * n2 * n2 * currentState.length ;
Code	final int residual = NUMBER_CONSTANT * n2 * n2 * currentState.length ;
Distance : 7

65
Tree	final int state = CHAR_CONS / n2 ;
Code	final int state = CHAR_CONS / n2 ;
Distance : 4

66
Tree	final int state = n1 * n2 / n1 ;
Code	final int state = n1 * n2 / n1 ;
Distance : 4

67
Tree	final int overloadedButSameArgs = super * n2 ;
Code	final int overloadedButSameArgs = super * n2 ;
Distance : 3

68
Tree	final int state = location > > NUMBER_CONSTANT ;
Code	final int state = location > > NUMBER_CONSTANT ;
Distance : 6

69
Tree	final int state = CHAR_CONS + n1 ;
Code	final int state = CHAR_CONS + n1 ;
Distance : 5

70
Tree	final int state = ( int ) n1 * n1 ;
Code	final int state = ( int ) n1 * n1 ;
Distance : 6

71
Tree	final int residual = n1 - / ;
Code	final int residual = n1 - / ;
Distance : 4

72
Tree	final int state = location * n2 ;
Code	final int state = location * n2 ;
Distance : 3

73
Tree	final int overloadedButSameArgs = n1 * n2 ;
Code	final int overloadedButSameArgs = n1 * n2 ;
Distance : 2

74
Tree	final int extern = n1 > > NUMBER_CONSTANT ;
Code	final int extern = n1 > > NUMBER_CONSTANT ;
Distance : 5

75
Tree	final int state = location * n2 / n2 ;
Code	final int state = location * n2 / n2 ;
Distance : 5

76
Tree	final int overloadedButSameArgs = NUMBER_CONSTANT * n2 * n2 * currentState.length ;
Code	final int overloadedButSameArgs = NUMBER_CONSTANT * n2 * n2 * currentState.length ;
Distance : 7

77
Tree	final int residual = CHAR_CONS + n1 ;
Code	final int residual = CHAR_CONS + n1 ;
Distance : 5

78
Tree	final int state = super * n1 * n2 ;
Code	final int state = super * n1 * n2 ;
Distance : 4

79
Tree	final int state = NUMBER_CONSTANT * n2 * n2 * currentState.length ;
Code	final int state = NUMBER_CONSTANT * n2 * n2 * currentState.length ;
Distance : 7

80
Tree	final int state = u - / ;
Code	final int state = u - / ;
Distance : 5

81
Tree	final int state = super / n2 ;
Code	final int state = super / n2 ;
Distance : 4

82
Tree	final int state = n1 ^ n2 ;
Code	final int state = n1 ^ n2 ;
Distance : 3

83
Tree	final int state = NUMBER_CONSTANT * Vector1D.ZERO ;
Code	final int state = NUMBER_CONSTANT * Vector1D.ZERO ;
Distance : 4

84
Tree	final int epsa = super * n2 ;
Code	final int epsa = super * n2 ;
Distance : 3

85
Tree	final int state = location - / ;
Code	final int state = location - / ;
Distance : 5

86
Tree	final int state = super * n2 ;
Code	final int state = super * n2 ;
Distance : 3

87
Tree	final int state = NUMBER_CONSTANT / n1 ;
Code	final int state = NUMBER_CONSTANT / n1 ;
Distance : 5

88
Tree	final int state = u * n2 ;
Code	final int state = u * n2 ;
Distance : 3

89
Tree	final int state = n1 == CHAR_CONS ;
Code	final int state = n1 == CHAR_CONS ;
Distance : 4

90
Tree	final int state = CHAR_CONS + n2 ;
Code	final int state = CHAR_CONS + n2 ;
Distance : 4

91
Tree	final int overloadedButSameArgs = n1 > > NUMBER_CONSTANT ;
Code	final int overloadedButSameArgs = n1 > > NUMBER_CONSTANT ;
Distance : 5

92
Tree	final int state = NUMBER_CONSTANT + n2 ;
Code	final int state = NUMBER_CONSTANT + n2 ;
Distance : 4

93
Tree	final int residual = NUMBER_CONSTANT + n1 ;
Code	final int residual = NUMBER_CONSTANT + n1 ;
Distance : 5

94
Tree	final int overloadedButSameArgs = n1 > n1 ;
Code	final int overloadedButSameArgs = n1 > n1 ;
Distance : 4

95
Tree	final int residual = n1 > n1 ;
Code	final int residual = n1 > n1 ;
Distance : 4

96
Tree	final int state = NUMBER_CONSTANT * FastMath.PI ;
Code	final int state = NUMBER_CONSTANT * FastMath.PI ;
Distance : 4

97
Tree	final int state = NUMBER_CONSTANT * currentState.length ;
Code	final int state = NUMBER_CONSTANT * currentState.length ;
Distance : 4

98
Tree	final int state = n1 * n1 ;
Code	final int state = n1 * n1 ;
Distance : 3

99
Tree	final int state = / + n1 ;
Code	final int state = / + n1 ;
Distance : 5

100
Tree	final int state = n1 - extends ;
Code	final int state = n1 - extends ;
Distance : 4

101
Tree	final int residual = NUMBER_CONSTANT * currentState.length ;
Code	final int residual = NUMBER_CONSTANT * currentState.length ;
Distance : 4

102
Tree	final int extern = NUMBER_CONSTANT / n2 ;
Code	final int extern = NUMBER_CONSTANT / n2 ;
Distance : 4

103
Tree	final int residual = NUMBER_CONSTANT * f.length ;
Code	final int residual = NUMBER_CONSTANT * f.length ;
Distance : 4

104
Tree	final int residual = n1 == CHAR_CONS ;
Code	final int residual = n1 == CHAR_CONS ;
Distance : 4

105
Tree	final int epsa = NUMBER_CONSTANT * n2 * n2 * currentState.length ;
Code	final int epsa = NUMBER_CONSTANT * n2 * n2 * currentState.length ;
Distance : 7

106
Tree	final int state = n1 - n2 ;
Code	final int state = n1 - n2 ;
Distance : 3

107
Tree	final int residual = super / n1 ;
Code	final int residual = super / n1 ;
Distance : 5

108
Tree	final int state = CHAR_CONS * n2 * n2 ;
Code	final int state = CHAR_CONS * n2 * n2 ;
Distance : 5

109
Tree	final int overloadedButSameArgs = n1 * n2 / n2 ;
Code	final int overloadedButSameArgs = n1 * n2 / n2 ;
Distance : 4

110
Tree	final int state = CHAR_CONS / n1 ;
Code	final int state = CHAR_CONS / n1 ;
Distance : 5

111
Tree	final int state = u > > NUMBER_CONSTANT ;
Code	final int state = u > > NUMBER_CONSTANT ;
Distance : 6

112
Tree	final int epsa = n1 * n2 ;
Code	final int epsa = n1 * n2 ;
Distance : 2

113
Tree	final int state = / + n2 ;
Code	final int state = / + n2 ;
Distance : 4

114
Tree	final int epsa = n1 - / ;
Code	final int epsa = n1 - / ;
Distance : 4

115
Tree	final int residual = NUMBER_CONSTANT / n1 ;
Code	final int residual = NUMBER_CONSTANT / n1 ;
Distance : 5

116
Tree	final int residual = super + n2 ;
Code	final int residual = super + n2 ;
Distance : 4

117
Tree	final int overloadedButSameArgs = NUMBER_CONSTANT / n1 ;
Code	final int overloadedButSameArgs = NUMBER_CONSTANT / n1 ;
Distance : 5

118
Tree	final int epsa = super * n2 * n2 ;
Code	final int epsa = super * n2 * n2 ;
Distance : 5

119
Tree	final int residual = NUMBER_CONSTANT * n2 * n2 * FunctionFlavor.NORMAL ;
Code	final int residual = NUMBER_CONSTANT * n2 * n2 * FunctionFlavor.NORMAL ;
Distance : 7

120
Tree	final int state = MathUtils.TWO_PI . clone () - NUMBER_CONSTANT ;
Code	final int state = MathUtils.TWO_PI . clone () - NUMBER_CONSTANT ;
Distance : 8

121
Tree	final int state = n1 > n2 ;
Code	final int state = n1 > n2 ;
Distance : 3

122
Tree	final int state = super * n2 * n2 ;
Code	final int state = super * n2 * n2 ;
Distance : 5

123
Tree	final int state = n1 > > NUMBER_CONSTANT ;
Code	final int state = n1 > > NUMBER_CONSTANT ;
Distance : 5

124
Tree	final int residual = super * n2 * n2 ;
Code	final int residual = super * n2 * n2 ;
Distance : 5

125
Tree	final int overloadedButSameArgs = NUMBER_CONSTANT * f.length ;
Code	final int overloadedButSameArgs = NUMBER_CONSTANT * f.length ;
Distance : 4

126
Tree	final int overloadedButSameArgs = NUMBER_CONSTANT + n1 ;
Code	final int overloadedButSameArgs = NUMBER_CONSTANT + n1 ;
Distance : 5

127
Tree	final int overloadedButSameArgs = super + n2 ;
Code	final int overloadedButSameArgs = super + n2 ;
Distance : 4

128
Tree	final int state = NUMBER_CONSTANT * n1 * n2 * currentState.length ;
Code	final int state = NUMBER_CONSTANT * n1 * n2 * currentState.length ;
Distance : 6

129
Tree	final int residual = super * n2 ;
Code	final int residual = super * n2 ;
Distance : 3

130
Tree	final int state = location - n2 ;
Code	final int state = location - n2 ;
Distance : 4

131
Tree	final int overloadedButSameArgs = MathUtils.TWO_PI / NUMBER_CONSTANT ;
Code	final int overloadedButSameArgs = MathUtils.TWO_PI / NUMBER_CONSTANT ;
Distance : 5

132
Tree	final int residual = n1 > > NUMBER_CONSTANT ;
Code	final int residual = n1 > > NUMBER_CONSTANT ;
Distance : 5

133
Tree	final int residual = location * n2 ;
Code	final int residual = location * n2 ;
Distance : 3

134
Tree	final int state = u * n2 / n2 ;
Code	final int state = u * n2 / n2 ;
Distance : 5

135
Tree	final int residual = super / n2 ;
Code	final int residual = super / n2 ;
Distance : 4

136
Tree	final int state = n1 ^ n1 ;
Code	final int state = n1 ^ n1 ;
Distance : 4

137
Tree	final int residual = MathUtils.TWO_PI . is () - NUMBER_CONSTANT ;
Code	final int residual = MathUtils.TWO_PI . is () - NUMBER_CONSTANT ;
Distance : 8

138
Tree	final int state = / * n2 ;
Code	final int state = / * n2 ;
Distance : 3

139
Tree	final int state = location ^ n2 ;
Code	final int state = location ^ n2 ;
Distance : 4

140
Tree	final int overloadedButSameArgs = n1 ^ n2 ;
Code	final int overloadedButSameArgs = n1 ^ n2 ;
Distance : 3

141
Tree	final int state = NUMBER_CONSTANT / n2 ;
Code	final int state = NUMBER_CONSTANT / n2 ;
Distance : 4

142
Tree	final int state = ModuleLoader.ResolutionMode.BROWSER / NUMBER_CONSTANT ;
Code	final int state = ModuleLoader.ResolutionMode.BROWSER / NUMBER_CONSTANT ;
Distance : 5

143
Tree	final int state = MathUtils.TWO_PI . abs () - NUMBER_CONSTANT ;
Code	final int state = MathUtils.TWO_PI . abs () - NUMBER_CONSTANT ;
Distance : 8

144
Tree	final int state = u ^ n2 ;
Code	final int state = u ^ n2 ;
Distance : 4

145
Tree	final int state = u == CHAR_CONS ;
Code	final int state = u == CHAR_CONS ;
Distance : 5

146
Tree	final int state = MathUtils.TWO_PI . get () - NUMBER_CONSTANT ;
Code	final int state = MathUtils.TWO_PI . get () - NUMBER_CONSTANT ;
Distance : 8

147
Tree	final int residual = MathUtils.TWO_PI / NUMBER_CONSTANT ;
Code	final int residual = MathUtils.TWO_PI / NUMBER_CONSTANT ;
Distance : 5

148
Tree	final int epsa = n1 == CHAR_CONS ;
Code	final int epsa = n1 == CHAR_CONS ;
Distance : 4

149
Tree	final int state = super * n1 ;
Code	final int state = super * n1 ;
Distance : 4

150
Tree	final int epsa = CHAR_CONS + n2 ;
Code	final int epsa = CHAR_CONS + n2 ;
Distance : 4

151
Tree	final int state = NUMBER_CONSTANT - n2 ;
Code	final int state = NUMBER_CONSTANT - n2 ;
Distance : 4

152
Tree	final int overloadedButSameArgs = n1 - / ;
Code	final int overloadedButSameArgs = n1 - / ;
Distance : 4

153
Tree	final int state = n1 > n1 ;
Code	final int state = n1 > n1 ;
Distance : 4

154
Tree	final int residual = MathUtils.TWO_PI . intValue () - NUMBER_CONSTANT ;
Code	final int residual = MathUtils.TWO_PI . intValue () - NUMBER_CONSTANT ;
Distance : 8

155
Tree	final int epsa = NUMBER_CONSTANT + n1 ;
Code	final int epsa = NUMBER_CONSTANT + n1 ;
Distance : 5

156
Tree	final int state = f.length / NUMBER_CONSTANT ;
Code	final int state = f.length / NUMBER_CONSTANT ;
Distance : 5

157
Tree	final int epsa = n1 > > NUMBER_CONSTANT ;
Code	final int epsa = n1 > > NUMBER_CONSTANT ;
Distance : 5

158
Tree	final int overloadedButSameArgs = CHAR_CONS + n2 ;
Code	final int overloadedButSameArgs = CHAR_CONS + n2 ;
Distance : 4

159
Tree	final int state = location == CHAR_CONS ;
Code	final int state = location == CHAR_CONS ;
Distance : 5

160
Tree	final int state = super + n1 ;
Code	final int state = super + n1 ;
Distance : 5

161
Tree	final int state = n1 - tol [ n2 ] ;
Code	final int state = n1 - tol [ n2 ] ;
Distance : 6

162
Tree	final int epsa = n1 - n2 ;
Code	final int epsa = n1 - n2 ;
Distance : 3

163
Tree	final int epsa = MathUtils.TWO_PI / NUMBER_CONSTANT ;
Code	final int epsa = MathUtils.TWO_PI / NUMBER_CONSTANT ;
Distance : 5

164
Tree	final int epsa = CHAR_CONS + n1 ;
Code	final int epsa = CHAR_CONS + n1 ;
Distance : 5

165
Tree	final int epsa = n1 ^ n2 ;
Code	final int epsa = n1 ^ n2 ;
Distance : 3

166
Tree	final int state = compiler.globalTypeInfo / NUMBER_CONSTANT ;
Code	final int state = compiler.globalTypeInfo / NUMBER_CONSTANT ;
Distance : 5

167
Tree	final int overloadedButSameArgs = n1 - n2 ;
Code	final int overloadedButSameArgs = n1 - n2 ;
Distance : 3

168
Tree	final int epsa = NUMBER_CONSTANT + n2 ;
Code	final int epsa = NUMBER_CONSTANT + n2 ;
Distance : 4

169
Tree	final int state = a.dfbg / NUMBER_CONSTANT ;
Code	final int state = a.dfbg / NUMBER_CONSTANT ;
Distance : 5

170
Tree	final int state = u - n2 ;
Code	final int state = u - n2 ;
Distance : 4

171
Tree	final int residual = n1 ^ n1 ;
Code	final int residual = n1 ^ n1 ;
Distance : 4

172
Tree	final int residual = n1 - scale [ n2 ] ;
Code	final int residual = n1 - scale [ n2 ] ;
Distance : 6

173
Tree	final int overloadedButSameArgs = NUMBER_CONSTANT - n2 ;
Code	final int overloadedButSameArgs = NUMBER_CONSTANT - n2 ;
Distance : 4

174
Tree	final int state = n1 - R [ n2 ] ;
Code	final int state = n1 - R [ n2 ] ;
Distance : 6

175
Tree	final int state = location - R [ n2 ] ;
Code	final int state = location - R [ n2 ] ;
Distance : 7

176
Tree	final int overloadedButSameArgs = n1 == CHAR_CONS ;
Code	final int overloadedButSameArgs = n1 == CHAR_CONS ;
Distance : 4

177
Tree	final int overloadedButSameArgs = CHAR_CONS + n1 ;
Code	final int overloadedButSameArgs = CHAR_CONS + n1 ;
Distance : 5

178
Tree	final int residual = location == CHAR_CONS ;
Code	final int residual = location == CHAR_CONS ;
Distance : 5

179
Tree	final int state = NUMBER_CONSTANT - n1 ;
Code	final int state = NUMBER_CONSTANT - n1 ;
Distance : 5

180
Tree	final int epsa = NUMBER_CONSTANT - n2 ;
Code	final int epsa = NUMBER_CONSTANT - n2 ;
Distance : 4

181
Tree	final int extern = NUMBER_CONSTANT - n2 ;
Code	final int extern = NUMBER_CONSTANT - n2 ;
Distance : 4

182
Tree	final int residual = NUMBER_CONSTANT - n1 ;
Code	final int residual = NUMBER_CONSTANT - n1 ;
Distance : 5

183
Tree	final int factor = NUMBER_CONSTANT - n2 ;
Code	final int factor = NUMBER_CONSTANT - n2 ;
Distance : 4

184
Tree	final int state = R [ n2 ] - tol [ n2 ] ;
Code	final int state = R [ n2 ] - tol [ n2 ] ;
Distance : 10

185
Tree	final int state = R [ n2 ] + STRING_CONSTANT + Object [ n2 ] ;
Code	final int state = R [ n2 ] + STRING_CONSTANT + Object [ n2 ] ;
Distance : 12

186
Tree	final int state = RealVector [ n2 ] - tol [ n2 ] ;
Code	final int state = RealVector [ n2 ] - tol [ n2 ] ;
Distance : 10

187
Tree	final int state = L [ n2 ] - tol [ n2 ] ;
Code	final int state = L [ n2 ] - tol [ n2 ] ;
Distance : 10

188
Tree	final int state = ArrayRealVector [ n2 ] - tol [ n2 ] ;
Code	final int state = ArrayRealVector [ n2 ] - tol [ n2 ] ;
Distance : 10

189
Tree	final int residual = R [ n2 ] - tol [ n2 ] ;
Code	final int residual = R [ n2 ] - tol [ n2 ] ;
Distance : 10

190
Tree	final int state = RealVector [ n2 ] + STRING_CONSTANT + Object [ n2 ] ;
Code	final int state = RealVector [ n2 ] + STRING_CONSTANT + Object [ n2 ] ;
Distance : 12

191
Tree	final int residual = R [ n2 ] + STRING_CONSTANT + Object [ n2 ] ;
Code	final int residual = R [ n2 ] + STRING_CONSTANT + Object [ n2 ] ;
Distance : 12

192
Tree	final int state = R [ n2 ] - scale [ n2 ] ;
Code	final int state = R [ n2 ] - scale [ n2 ] ;
Distance : 10

193
Tree	final int state = L [ n2 ] + STRING_CONSTANT + Object [ n2 ] ;
Code	final int state = L [ n2 ] + STRING_CONSTANT + Object [ n2 ] ;
Distance : 12

194
Tree	final int residual = RealVector [ n2 ] - tol [ n2 ] ;
Code	final int residual = RealVector [ n2 ] - tol [ n2 ] ;
Distance : 10

195
Tree	final int state = ArrayRealVector [ n2 ] + STRING_CONSTANT + Object [ n2 ] ;
Code	final int state = ArrayRealVector [ n2 ] + STRING_CONSTANT + Object [ n2 ] ;
Distance : 12

196
Tree	final int state = FDistribution [ n2 ] + STRING_CONSTANT + Object [ n2 ] ;
Code	final int state = FDistribution [ n2 ] + STRING_CONSTANT + Object [ n2 ] ;
Distance : 12

197
Tree	final int state = FDistribution [ n2 ] - tol [ n2 ] ;
Code	final int state = FDistribution [ n2 ] - tol [ n2 ] ;
Distance : 10

198
Tree	final int state = R [ n1 ] + STRING_CONSTANT + Object [ n2 ] ;
Code	final int state = R [ n1 ] + STRING_CONSTANT + Object [ n2 ] ;
Distance : 11

199
Tree	final int residual = L [ n2 ] + STRING_CONSTANT + Object [ n2 ] ;
Code	final int residual = L [ n2 ] + STRING_CONSTANT + Object [ n2 ] ;
Distance : 12

========================================================================


========================================================================
Example Number: 75
Parent Code is: 
if ( y >= TWO_POWER_52  y <= - TWO_POWER_52 ) { return pow ( - x , y ) ; }
-------------------------------------------------------------------------------
Child code is: 
if ( y >= TWO_POWER_53  y <= - TWO_POWER_53 ) { return pow ( - x , y ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=y}) (251{val=>=}) (800{val=TWO_POWER_52})) (250{val=||}) (27 (800{val=y}) (252{val=<=}) (38 (201{val=-}) (800{val=TWO_POWER_52})))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=pow}) (214{val=(}) (38 (201{val=-}) (800{val=x})) (234{val=,}) (800{val=y}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=y}) (251{val=>=}) (800{val=TWO_POWER_53})) (250{val=||}) (27 (800{val=y}) (252{val=<=}) (38 (201{val=-}) (800{val=TWO_POWER_53})))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=pow}) (214{val=(}) (38 (201{val=-}) (800{val=x})) (234{val=,}) (800{val=y}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/15/parent/src_main_java_org_apache_commons_math3_util_FastMath.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( y >= NUMBER_CONSTANT y y <= - si ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y y <= - si ) { return pow ( - x , y ) ; }
Distance : 3

1
Tree	if ( y == CHAR_CONS y y <= - dpi ) { return pow ( - x , y ) ; }
Code	if ( y == CHAR_CONS y y <= - dpi ) { return pow ( - x , y ) ; }
Distance : 4

2
Tree	if ( y == CHAR_CONS TWO_POWER_52 y <= - si ) { return pow ( - x , y ) ; }
Code	if ( y == CHAR_CONS TWO_POWER_52 y <= - si ) { return pow ( - x , y ) ; }
Distance : 4

3
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 TWO_POWER_52 <= - residual ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 TWO_POWER_52 <= - residual ) { return pow ( - x , y ) ; }
Distance : 4

4
Tree	if ( y >= NUMBER_CONSTANT y maxUlps <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y maxUlps <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

5
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Distance : 4

6
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - xbar ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - xbar ) { return pow ( - x , y ) ; }
Distance : 3

7
Tree	if ( y >= NUMBER_CONSTANT y v <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y v <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

8
Tree	if ( y >= NUMBER_CONSTANT y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

9
Tree	if ( x.length != null y d <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( x.length != null y d <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

10
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

11
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - dpi ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - dpi ) { return pow ( - x , y ) ; }
Distance : 3

12
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - si ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - si ) { return pow ( - x , y ) ; }
Distance : 3

13
Tree	if ( y >= NUMBER_CONSTANT y F_1_3 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y F_1_3 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

14
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - sumOfLabelHeights ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - sumOfLabelHeights ) { return pow ( - x , y ) ; }
Distance : 3

15
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 y != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 y != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

16
Tree	if ( y != - Long.MAX_VALUE y y < x.length ) { return pow ( - x , y ) ; }
Code	if ( y != - Long.MAX_VALUE y y < x.length ) { return pow ( - x , y ) ; }
Distance : 6

17
Tree	if ( y != - x.length y y < y.length ) { return pow ( - x , y ) ; }
Code	if ( y != - x.length y y < y.length ) { return pow ( - x , y ) ; }
Distance : 6

18
Tree	if ( y != - x.length y TWO_POWER_52 < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Code	if ( y != - x.length y TWO_POWER_52 < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Distance : 6

19
Tree	if ( y >= IEEEremainder ( j , NUMBER_CONSTANT , DEFAULT_EPSILON ) - dpi <= - dpi ) { return pow ( - x , y ) ; }
Code	if ( y >= IEEEremainder ( j , NUMBER_CONSTANT , DEFAULT_EPSILON ) - dpi <= - dpi ) { return pow ( - x , y ) ; }
Distance : 11

20
Tree	if ( y >= getDimension ( j , NUMBER_CONSTANT , CombinatoricsUtils ) - dpi <= - dpi ) { return pow ( - x , y ) ; }
Code	if ( y >= getDimension ( j , NUMBER_CONSTANT , CombinatoricsUtils ) - dpi <= - dpi ) { return pow ( - x , y ) ; }
Distance : 11

21
Tree	if ( y >= IEEEremainder ( j , NUMBER_CONSTANT , DEFAULT_INVERSE_ABSOLUTE_ACCURACY ) <= dpi <= - dpi ) { return pow ( - x , y ) ; }
Code	if ( y >= IEEEremainder ( j , NUMBER_CONSTANT , DEFAULT_INVERSE_ABSOLUTE_ACCURACY ) <= dpi <= - dpi ) { return pow ( - x , y ) ; }
Distance : 11

22
Tree	if ( y >= SECONDS_MILLIS y TWO_POWER_52 <= - dpi ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= SECONDS_MILLIS y TWO_POWER_52 <= - dpi ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

23
Tree	if ( y > - TWO_POWER_52 y dpi < y.length ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y dpi < y.length ) { return pow ( - x , y ) ; }
Distance : 6

24
Tree	if ( y >= getX ( j , NUMBER_CONSTANT , cutOff ) <= dpi <= - dpi ) { return pow ( - x , y ) ; }
Code	if ( y >= getX ( j , NUMBER_CONSTANT , cutOff ) <= dpi <= - dpi ) { return pow ( - x , y ) ; }
Distance : 11

25
Tree	if ( y >= IEEEremainder ( j , NUMBER_CONSTANT , CombinatoricsUtils ) <= si <= - dpi ) { return pow ( - x , y ) ; }
Code	if ( y >= IEEEremainder ( j , NUMBER_CONSTANT , CombinatoricsUtils ) <= si <= - dpi ) { return pow ( - x , y ) ; }
Distance : 11

26
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - sumOfLabelHeights ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - sumOfLabelHeights ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

27
Tree	if ( y != - centers y upper < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Code	if ( y != - centers y upper < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Distance : 6

28
Tree	if ( y != - imagEigenvalues y TWO_POWER_52 < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Code	if ( y != - imagEigenvalues y TWO_POWER_52 < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Distance : 6

29
Tree	if ( y >= TWO_POWER_52 y currentDegree <= - dpi ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= TWO_POWER_52 y currentDegree <= - dpi ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

30
Tree	if ( y != - unusedAssignment y currentDegree < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Code	if ( y != - unusedAssignment y currentDegree < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Distance : 6

31
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - si ) { return pow ( - x , true ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - si ) { return pow ( - x , true ) ; }
Distance : 4

32
Tree	if ( x.length != null TWO_POWER_52 y <= - dpi ) { return pow ( - x , y ) ; }
Code	if ( x.length != null TWO_POWER_52 y <= - dpi ) { return pow ( - x , y ) ; }
Distance : 5

33
Tree	if ( x.length != null y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( x.length != null y y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

34
Tree	if ( x.length != null TWO_POWER_52 y <= - si ) { return pow ( - x , y ) ; }
Code	if ( x.length != null TWO_POWER_52 y <= - si ) { return pow ( - x , y ) ; }
Distance : 5

35
Tree	if ( y > - x.length y TWO_POWER_52 < Precision.SAFE_MIN ) { return pow ( - x , y ) ; }
Code	if ( y > - x.length y TWO_POWER_52 < Precision.SAFE_MIN ) { return pow ( - x , y ) ; }
Distance : 6

36
Tree	if ( y != - centers y TWO_POWER_52 < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Code	if ( y != - centers y TWO_POWER_52 < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Distance : 6

37
Tree	if ( y >= SECONDS_MILLIS y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= SECONDS_MILLIS y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

38
Tree	if ( x.length != null TWO_POWER_52 y <= - centers ) { return pow ( - x , y ) ; }
Code	if ( x.length != null TWO_POWER_52 y <= - centers ) { return pow ( - x , y ) ; }
Distance : 5

39
Tree	if ( y > - TWO_POWER_52 y centers < x.length ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y centers < x.length ) { return pow ( - x , y ) ; }
Distance : 6

40
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - si ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - si ) { return pow ( - x , y ) ; }
Distance : 4

41
Tree	if ( y >= TWO_POWER_52 - currentDegree != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 - currentDegree != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

42
Tree	if ( y > - TWO_POWER_52 y currentDegree < x.length ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y currentDegree < x.length ) { return pow ( - x , y ) ; }
Distance : 6

43
Tree	if ( x.length != null y y <= - sumOfLabelHeights ) { return pow ( - x , y ) ; }
Code	if ( x.length != null y y <= - sumOfLabelHeights ) { return pow ( - x , y ) ; }
Distance : 5

44
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - dpi ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - dpi ) { return pow ( - x , y ) ; }
Distance : 4

45
Tree	if ( y != - SECONDS_MILLIS y TWO_POWER_52 < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Code	if ( y != - SECONDS_MILLIS y TWO_POWER_52 < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Distance : 6

46
Tree	if ( y >= TWO_POWER_52 y upper != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y upper != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

47
Tree	if ( y.length != null TWO_POWER_52 y <= - dpi ) { return pow ( - x , y ) ; }
Code	if ( y.length != null TWO_POWER_52 y <= - dpi ) { return pow ( - x , y ) ; }
Distance : 5

48
Tree	if ( y > - TWO_POWER_52 y si < x.length ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y si < x.length ) { return pow ( - x , y ) ; }
Distance : 6

49
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - centers ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - centers ) { return pow ( - x , y ) ; }
Distance : 4

50
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - si ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - si ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

51
Tree	if ( y != - iterations y TWO_POWER_52 < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Code	if ( y != - iterations y TWO_POWER_52 < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Distance : 6

52
Tree	if ( v.length != null TWO_POWER_52 y <= - dpi ) { return pow ( - x , y ) ; }
Code	if ( v.length != null TWO_POWER_52 y <= - dpi ) { return pow ( - x , y ) ; }
Distance : 5

53
Tree	if ( y > - TWO_POWER_52 y centers < y.length ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y centers < y.length ) { return pow ( - x , y ) ; }
Distance : 6

54
Tree	if ( y.length != null TWO_POWER_52 y <= - si ) { return pow ( - x , y ) ; }
Code	if ( y.length != null TWO_POWER_52 y <= - si ) { return pow ( - x , y ) ; }
Distance : 5

55
Tree	if ( y.length != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y.length != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

56
Tree	if ( x.length != null TWO_POWER_52 y <= - Umax ) { return pow ( - x , y ) ; }
Code	if ( x.length != null TWO_POWER_52 y <= - Umax ) { return pow ( - x , y ) ; }
Distance : 5

57
Tree	if ( v.length != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( v.length != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

58
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

59
Tree	if ( y != - centers y currentDegree < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Code	if ( y != - centers y currentDegree < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Distance : 6

60
Tree	if ( x.length != null TWO_POWER_52 TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( x.length != null TWO_POWER_52 TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 6

61
Tree	if ( Integer.MAX_VALUE != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( Integer.MAX_VALUE != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

62
Tree	if ( y != - x.length y y < x.length ) { return pow ( - x , y ) ; }
Code	if ( y != - x.length y y < x.length ) { return pow ( - x , y ) ; }
Distance : 6

63
Tree	if ( y != - x.length y y < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Code	if ( y != - x.length y y < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Distance : 6

64
Tree	if ( MathUtils.TWO_PI != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( MathUtils.TWO_PI != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

65
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - yB ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - yB ) { return pow ( - x , y ) ; }
Distance : 4

66
Tree	if ( y > - x.length y TWO_POWER_52 < x.length ) { return pow ( - x , y ) ; }
Code	if ( y > - x.length y TWO_POWER_52 < x.length ) { return pow ( - x , y ) ; }
Distance : 6

67
Tree	if ( y >= NUMBER_CONSTANT y y != - si ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y y != - si ) { return pow ( - x , y ) ; }
Distance : 4

68
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 y != - dpi ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 y != - dpi ) { return pow ( - x , y ) ; }
Distance : 4

69
Tree	if ( y != - IncrementalCheckMode.GENERATE_IJS y y < x.length ) { return pow ( - x , y ) ; }
Code	if ( y != - IncrementalCheckMode.GENERATE_IJS y y < x.length ) { return pow ( - x , y ) ; }
Distance : 6

70
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - dpi ) { return last . pow ( x , y + NUMBER_CONSTANT ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - dpi ) { return last . pow ( x , y + NUMBER_CONSTANT ) ; }
Distance : 8

71
Tree	if ( y != - IncrementalCheckMode.GENERATE_IJS y y < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Code	if ( y != - IncrementalCheckMode.GENERATE_IJS y y < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Distance : 6

72
Tree	if ( c.length != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( c.length != null TWO_POWER_52 y <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

73
Tree	if ( y >= SECONDS_MILLIS y TWO_POWER_52 <= - si ) { return pow ( - x , true ) ; }
Code	if ( y >= SECONDS_MILLIS y TWO_POWER_52 <= - si ) { return pow ( - x , true ) ; }
Distance : 4

74
Tree	if ( y >= unusedAssignment y TWO_POWER_52 <= - dpi ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= unusedAssignment y TWO_POWER_52 <= - dpi ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

75
Tree	if ( y >= SECONDS_MILLIS y TWO_POWER_52 <= - si ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= SECONDS_MILLIS y TWO_POWER_52 <= - si ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

76
Tree	if ( y >= IEEEremainder ( j , NUMBER_CONSTANT , CombinatoricsUtils ) <= dpi <= - dpi ) { return pow ( - x , y ) ; }
Code	if ( y >= IEEEremainder ( j , NUMBER_CONSTANT , CombinatoricsUtils ) <= dpi <= - dpi ) { return pow ( - x , y ) ; }
Distance : 11

77
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - centers ) { return pow ( - x , true ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - centers ) { return pow ( - x , true ) ; }
Distance : 4

78
Tree	if ( y >= SECONDS_MILLIS y TWO_POWER_52 <= - dpi ) { return pow ( - x , y ) ; }
Code	if ( y >= SECONDS_MILLIS y TWO_POWER_52 <= - dpi ) { return pow ( - x , y ) ; }
Distance : 3

79
Tree	if ( y >= SECONDS_MILLIS - TWO_POWER_52 <= - dpi ) { return pow ( - x , true ) ; }
Code	if ( y >= SECONDS_MILLIS - TWO_POWER_52 <= - dpi ) { return pow ( - x , true ) ; }
Distance : 5

80
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - coefficient ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - coefficient ) { return pow ( - x , y ) ; }
Distance : 4

81
Tree	if ( y >= TWO_POWER_52 - TWO_POWER_52 <= - si ) { return last . pow ( x , x.length , y , x.length ) ; }
Code	if ( y >= TWO_POWER_52 - TWO_POWER_52 <= - si ) { return last . pow ( x , x.length , y , x.length ) ; }
Distance : 11

82
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 F_1_3 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 F_1_3 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

83
Tree	if ( y != - x.length y TWO_POWER_52 < x.length ) { return pow ( - x , y ) ; }
Code	if ( y != - x.length y TWO_POWER_52 < x.length ) { return pow ( - x , y ) ; }
Distance : 6

84
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - si ) { return last . pow ( x , y + NUMBER_CONSTANT ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - si ) { return last . pow ( x , y + NUMBER_CONSTANT ) ; }
Distance : 8

85
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , x ) ; }
Distance : 5

86
Tree	if ( y == CHAR_CONS TWO_POWER_52 y <= - centers ) { return pow ( - x , y ) ; }
Code	if ( y == CHAR_CONS TWO_POWER_52 y <= - centers ) { return pow ( - x , y ) ; }
Distance : 4

87
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - centers ) { return last . pow ( x , x.length , y , x.length ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - centers ) { return last . pow ( x , x.length , y , x.length ) ; }
Distance : 10

88
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - dpi ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - dpi ) { return pow ( - x , y ) ; }
Distance : 3

89
Tree	if ( y == CHAR_CONS TWO_POWER_52 y <= - Umax ) { return pow ( - x , y ) ; }
Code	if ( y == CHAR_CONS TWO_POWER_52 y <= - Umax ) { return pow ( - x , y ) ; }
Distance : 4

90
Tree	if ( y >= SECONDS_MILLIS y TWO_POWER_52 <= - dpi ) { return last . pow ( x , x.length , y , x.length ) ; }
Code	if ( y >= SECONDS_MILLIS y TWO_POWER_52 <= - dpi ) { return last . pow ( x , x.length , y , x.length ) ; }
Distance : 10

91
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - dpi ) { return last . pow ( x , x.length , y , x.length ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - dpi ) { return last . pow ( x , x.length , y , x.length ) ; }
Distance : 10

92
Tree	if ( y >= getX ( j , NUMBER_CONSTANT , CombinatoricsUtils ) <= dpi <= - dpi ) { return pow ( - x , y ) ; }
Code	if ( y >= getX ( j , NUMBER_CONSTANT , CombinatoricsUtils ) <= dpi <= - dpi ) { return pow ( - x , y ) ; }
Distance : 11

93
Tree	if ( y == CHAR_CONS y y <= - residual ) { return pow ( - x , y ) ; }
Code	if ( y == CHAR_CONS y y <= - residual ) { return pow ( - x , y ) ; }
Distance : 4

94
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - sumOfLabelHeights ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - sumOfLabelHeights ) { return pow ( - x , y ) ; }
Distance : 3

95
Tree	if ( y >= IEEEremainder ( j , NUMBER_CONSTANT , CombinatoricsUtils ) <= dpi < getDimension ( - x , y ) * x ) /
Code	if ( y >= IEEEremainder ( j , NUMBER_CONSTANT , CombinatoricsUtils ) <= dpi < getDimension ( - x , y ) * x ) /
Distance : 15

96
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - sumOfLabelHeights ) { return pow ( - x , true ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - sumOfLabelHeights ) { return pow ( - x , true ) ; }
Distance : 4

97
Tree	if ( y >= TWO_POWER_52 y currentDegree <= - dpi ) { return pow ( - x , true ) ; }
Code	if ( y >= TWO_POWER_52 y currentDegree <= - dpi ) { return pow ( - x , true ) ; }
Distance : 4

98
Tree	if ( y >= NUMBER_CONSTANT y v != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y v != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

99
Tree	if ( y >= unusedAssignment y TWO_POWER_52 <= - dpi ) { return pow ( - x , true ) ; }
Code	if ( y >= unusedAssignment y TWO_POWER_52 <= - dpi ) { return pow ( - x , true ) ; }
Distance : 4

100
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - sumOfLabelHeights ) { return last . pow ( x , x.length , y , x.length ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - sumOfLabelHeights ) { return last . pow ( x , x.length , y , x.length ) ; }
Distance : 10

101
Tree	if ( y >= SECONDS_MILLIS y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= SECONDS_MILLIS y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

102
Tree	if ( y == CHAR_CONS TWO_POWER_52 y <= - sumOfLabelHeights ) { return pow ( - x , y ) ; }
Code	if ( y == CHAR_CONS TWO_POWER_52 y <= - sumOfLabelHeights ) { return pow ( - x , y ) ; }
Distance : 4

103
Tree	if ( y >= getDimension ( j , NUMBER_CONSTANT , CombinatoricsUtils ) - dpi < getDimension ( - x , y ) * x ) /
Code	if ( y >= getDimension ( j , NUMBER_CONSTANT , CombinatoricsUtils ) - dpi < getDimension ( - x , y ) * x ) /
Distance : 15

104
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - sumOfLabelHeights ) { return last . pow ( x , y + NUMBER_CONSTANT ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - sumOfLabelHeights ) { return last . pow ( x , y + NUMBER_CONSTANT ) ; }
Distance : 8

105
Tree	if ( y >= IEEEremainder ( j , NUMBER_CONSTANT , DEFAULT_INVERSE_ABSOLUTE_ACCURACY ) <= dpi < getDimension ( - x , y ) * x ) /
Code	if ( y >= IEEEremainder ( j , NUMBER_CONSTANT , DEFAULT_INVERSE_ABSOLUTE_ACCURACY ) <= dpi < getDimension ( - x , y ) * x ) /
Distance : 15

106
Tree	if ( y >= getX ( j , NUMBER_CONSTANT , cutOff ) <= dpi < getDimension ( - x , y ) * x ) /
Code	if ( y >= getX ( j , NUMBER_CONSTANT , cutOff ) <= dpi < getDimension ( - x , y ) * x ) /
Distance : 15

107
Tree	if ( y >= IEEEremainder ( j , NUMBER_CONSTANT , cutOff ) - dpi < getDimension ( - x , y ) * x ) /
Code	if ( y >= IEEEremainder ( j , NUMBER_CONSTANT , cutOff ) - dpi < getDimension ( - x , y ) * x ) /
Distance : 15

108
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - dpi ) { return d . pow ( x , y + NUMBER_CONSTANT ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - dpi ) { return d . pow ( x , y + NUMBER_CONSTANT ) ; }
Distance : 8

109
Tree	if ( y >= TWO_POWER_52 y currentDegree <= - dpi ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y currentDegree <= - dpi ) { return pow ( - x , y ) ; }
Distance : 3

110
Tree	if ( y >= TWO_POWER_52 y currentDegree <= - dpi ) { return last . pow ( x , y + NUMBER_CONSTANT ) ; }
Code	if ( y >= TWO_POWER_52 y currentDegree <= - dpi ) { return last . pow ( x , y + NUMBER_CONSTANT ) ; }
Distance : 8

111
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

112
Tree	if ( y >= NUMBER_CONSTANT y d != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y d != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

113
Tree	if ( y >= NUMBER_CONSTANT y upper != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y upper != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

114
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - si ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - si ) { return pow ( - x , y ) ; }
Distance : 3

115
Tree	if ( y == CHAR_CONS TWO_POWER_52 y <= - coefficient ) { return pow ( - x , y ) ; }
Code	if ( y == CHAR_CONS TWO_POWER_52 y <= - coefficient ) { return pow ( - x , y ) ; }
Distance : 4

116
Tree	if ( y == CHAR_CONS TWO_POWER_52 y <= - xbar ) { return pow ( - x , y ) ; }
Code	if ( y == CHAR_CONS TWO_POWER_52 y <= - xbar ) { return pow ( - x , y ) ; }
Distance : 4

117
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - si ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - si ) { return pow ( - x , y ) ; }
Distance : 4

118
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - dpi ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - dpi ) { return pow ( - x , y ) ; }
Distance : 4

119
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - centers ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 <= - centers ) { return pow ( - x , y ) ; }
Distance : 3

120
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 maxUlps != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 maxUlps != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 5

121
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 TWO_POWER_52 != - centers ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 TWO_POWER_52 != - centers ) { return pow ( - x , y ) ; }
Distance : 5

122
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - centers ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - centers ) { return pow ( - x , y ) ; }
Distance : 3

123
Tree	if ( y >= NUMBER_CONSTANT y d <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y d <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

124
Tree	if ( y >= NUMBER_CONSTANT y upper <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y upper <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

125
Tree	if ( y >= unusedAssignment y TWO_POWER_52 <= - dpi ) { return last . pow ( x , y + NUMBER_CONSTANT ) ; }
Code	if ( y >= unusedAssignment y TWO_POWER_52 <= - dpi ) { return last . pow ( x , y + NUMBER_CONSTANT ) ; }
Distance : 8

126
Tree	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - sumOfLabelHeights ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT y TWO_POWER_52 != - sumOfLabelHeights ) { return pow ( - x , y ) ; }
Distance : 4

127
Tree	if ( y >= NUMBER_CONSTANT TWO_POWER_52 y <= - dpi ) { return pow ( - x , y ) ; }
Code	if ( y >= NUMBER_CONSTANT TWO_POWER_52 y <= - dpi ) { return pow ( - x , y ) ; }
Distance : 3

128
Tree	if ( y > - TWO_POWER_52 y centers < getDimension ( - si , y ) * x ) /
Code	if ( y > - TWO_POWER_52 y centers < getDimension ( - si , y ) * x ) /
Distance : 14

129
Tree	if ( y > - TWO_POWER_52 - centers < getDimension ( - coefficient , y ) * x ) /
Code	if ( y > - TWO_POWER_52 - centers < getDimension ( - coefficient , y ) * x ) /
Distance : 14

130
Tree	if ( y > - TWO_POWER_52 - centers < getDimension ( - lambda , y ) * x ) /
Code	if ( y > - TWO_POWER_52 - centers < getDimension ( - lambda , y ) * x ) /
Distance : 14

131
Tree	if ( y > - TWO_POWER_52 y currentDegree < getDimension ( - si , y ) * x ) /
Code	if ( y > - TWO_POWER_52 y currentDegree < getDimension ( - si , y ) * x ) /
Distance : 14

132
Tree	if ( y > - TWO_POWER_52 y centers < getDimension ( - sumOfLabelHeights , y ) * x ) /
Code	if ( y > - TWO_POWER_52 y centers < getDimension ( - sumOfLabelHeights , y ) * x ) /
Distance : 14

133
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 >= this . yB . isArrowAtTop ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 >= this . yB . isArrowAtTop ) { return pow ( - x , y ) ; }
Distance : 8

134
Tree	if ( y > - TWO_POWER_52 y dpi < getDimension ( - si , y ) * x ) /
Code	if ( y > - TWO_POWER_52 y dpi < getDimension ( - si , y ) * x ) /
Distance : 14

135
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 >= this . yB . doubles ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 >= this . yB . doubles ) { return pow ( - x , y ) ; }
Distance : 8

136
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 >= this . minY . isArrowAtTop ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 >= this . minY . isArrowAtTop ) { return pow ( - x , y ) ; }
Distance : 8

137
Tree	if ( y > - TWO_POWER_52 y dpi < getDimension ( - coefficient , y ) * x ) /
Code	if ( y > - TWO_POWER_52 y dpi < getDimension ( - coefficient , y ) * x ) /
Distance : 14

138
Tree	if ( y >= unusedAssignment y TWO_POWER_52 <= - dpi ) { return pow ( - x , y ) ; }
Code	if ( y >= unusedAssignment y TWO_POWER_52 <= - dpi ) { return pow ( - x , y ) ; }
Distance : 3

139
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 >= this . minY . doubles ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 >= this . minY . doubles ) { return pow ( - x , y ) ; }
Distance : 8

140
Tree	if ( y >= IEEEremainder ( j , NUMBER_CONSTANT , cutOff ) - dpi <= - dpi ) { return pow ( - x , y ) ; }
Code	if ( y >= IEEEremainder ( j , NUMBER_CONSTANT , cutOff ) - dpi <= - dpi ) { return pow ( - x , y ) ; }
Distance : 11

141
Tree	if ( y > - y.length y TWO_POWER_52 < x.length ) { return pow ( - x , y ) ; }
Code	if ( y > - y.length y TWO_POWER_52 < x.length ) { return pow ( - x , y ) ; }
Distance : 6

142
Tree	if ( y >= TWO_POWER_52 y currentDegree <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y currentDegree <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

143
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 >= this . yB . TRUTHY ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 >= this . yB . TRUTHY ) { return pow ( - x , y ) ; }
Distance : 8

144
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 >= this . minY . TRUTHY ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 >= this . minY . TRUTHY ) { return pow ( - x , y ) ; }
Distance : 8

145
Tree	if ( y >= SECONDS_MILLIS y TWO_POWER_52 <= - si ) { return pow ( - x , y ) ; }
Code	if ( y >= SECONDS_MILLIS y TWO_POWER_52 <= - si ) { return pow ( - x , y ) ; }
Distance : 3

146
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

147
Tree	if ( y > - x.length y TWO_POWER_52 < y.length ) { return pow ( - x , y ) ; }
Code	if ( y > - x.length y TWO_POWER_52 < y.length ) { return pow ( - x , y ) ; }
Distance : 6

148
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 >= this . defaultItemURLGenerator . isArrowAtTop ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 >= this . defaultItemURLGenerator . isArrowAtTop ) { return pow ( - x , y ) ; }
Distance : 8

149
Tree	if ( y >= unusedAssignment y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= unusedAssignment y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

150
Tree	if ( y >= absX y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= absX y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

151
Tree	if ( y > - TWO_POWER_52 y currentDegree < getDimension ( - coefficient , y ) * x ) /
Code	if ( y > - TWO_POWER_52 y currentDegree < getDimension ( - coefficient , y ) * x ) /
Distance : 14

152
Tree	if ( y > - x.length y upper < x.length ) { return pow ( - x , y ) ; }
Code	if ( y > - x.length y upper < x.length ) { return pow ( - x , y ) ; }
Distance : 6

153
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 >= this . defaultItemURLGenerator . doubles ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 >= this . defaultItemURLGenerator . doubles ) { return pow ( - x , y ) ; }
Distance : 8

154
Tree	if ( y > - x.length y SECONDS_MILLIS < x.length ) { return pow ( - x , y ) ; }
Code	if ( y > - x.length y SECONDS_MILLIS < x.length ) { return pow ( - x , y ) ; }
Distance : 6

155
Tree	if ( y >= F_1_3 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= F_1_3 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

156
Tree	if ( y >= SECONDS_MILLIS y TWO_POWER_52 != - si ) { return pow ( - x , y ) ; }
Code	if ( y >= SECONDS_MILLIS y TWO_POWER_52 != - si ) { return pow ( - x , y ) ; }
Distance : 4

157
Tree	if ( y >= indexRm2 y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= indexRm2 y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

158
Tree	if ( y >= SECONDS_MILLIS y TWO_POWER_52 != - dpi ) { return pow ( - x , y ) ; }
Code	if ( y >= SECONDS_MILLIS y TWO_POWER_52 != - dpi ) { return pow ( - x , y ) ; }
Distance : 4

159
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - centers ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - centers ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

160
Tree	if ( y >= CHAR_CONS y y <= - si ) { return pow ( - x , y ) ; }
Code	if ( y >= CHAR_CONS y y <= - si ) { return pow ( - x , y ) ; }
Distance : 3

161
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - centers ) { return last . pow ( x , y + NUMBER_CONSTANT ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - centers ) { return last . pow ( x , y + NUMBER_CONSTANT ) ; }
Distance : 8

162
Tree	if ( y >= CHAR_CONS y y <= - dpi ) { return pow ( - x , y ) ; }
Code	if ( y >= CHAR_CONS y y <= - dpi ) { return pow ( - x , y ) ; }
Distance : 3

163
Tree	if ( y >= CHAR_CONS y y <= - sumOfLabelHeights ) { return pow ( - x , y ) ; }
Code	if ( y >= CHAR_CONS y y <= - sumOfLabelHeights ) { return pow ( - x , y ) ; }
Distance : 3

164
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - dpi ) { return d . pow ( x , x.length , y , x.length ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - dpi ) { return d . pow ( x , x.length , y , x.length ) ; }
Distance : 10

165
Tree	if ( y > - x.length y TWO_POWER_52 < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Code	if ( y > - x.length y TWO_POWER_52 < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Distance : 6

166
Tree	if ( y > - x.length y F_1_3 < x.length ) { return pow ( - x , y ) ; }
Code	if ( y > - x.length y F_1_3 < x.length ) { return pow ( - x , y ) ; }
Distance : 6

167
Tree	if ( y >= TWO_POWER_52 y currentDegree <= - dpi ) { return last . pow ( x , x.length , y , x.length ) ; }
Code	if ( y >= TWO_POWER_52 y currentDegree <= - dpi ) { return last . pow ( x , x.length , y , x.length ) ; }
Distance : 10

168
Tree	if ( y >= getX ( j , NUMBER_CONSTANT , CombinatoricsUtils ) - dpi < getDimension ( - x , y ) * x ) /
Code	if ( y >= getX ( j , NUMBER_CONSTANT , CombinatoricsUtils ) - dpi < getDimension ( - x , y ) * x ) /
Distance : 15

169
Tree	if ( y >= SECONDS_MILLIS y TWO_POWER_52 != - centers ) { return pow ( - x , y ) ; }
Code	if ( y >= SECONDS_MILLIS y TWO_POWER_52 != - centers ) { return pow ( - x , y ) ; }
Distance : 4

170
Tree	if ( y >= CHAR_CONS y y <= - centers ) { return pow ( - x , y ) ; }
Code	if ( y >= CHAR_CONS y y <= - centers ) { return pow ( - x , y ) ; }
Distance : 3

171
Tree	if ( y >= CHAR_CONS y y <= - xbar ) { return pow ( - x , y ) ; }
Code	if ( y >= CHAR_CONS y y <= - xbar ) { return pow ( - x , y ) ; }
Distance : 3

172
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - coefficient ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - coefficient ) { return pow ( - x , y ) ; }
Distance : 4

173
Tree	if ( y >= SECONDS_MILLIS y TWO_POWER_52 <= - dpi ) { return last . pow ( x , y + NUMBER_CONSTANT ) ; }
Code	if ( y >= SECONDS_MILLIS y TWO_POWER_52 <= - dpi ) { return last . pow ( x , y + NUMBER_CONSTANT ) ; }
Distance : 8

174
Tree	if ( y > - TWO_POWER_52 y nullDereference < x.length ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y nullDereference < x.length ) { return pow ( - x , y ) ; }
Distance : 6

175
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - dpi ) { return pow ( - x , true ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - dpi ) { return pow ( - x , true ) ; }
Distance : 4

176
Tree	if ( y >= TWO_POWER_52 y upper <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y upper <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

177
Tree	if ( y >= unusedAssignment y TWO_POWER_52 <= - dpi ) { return last . pow ( x , x.length , y , x.length ) ; }
Code	if ( y >= unusedAssignment y TWO_POWER_52 <= - dpi ) { return last . pow ( x , x.length , y , x.length ) ; }
Distance : 10

178
Tree	if ( y >= CHAR_CONS y y <= - coefficient ) { return pow ( - x , y ) ; }
Code	if ( y >= CHAR_CONS y y <= - coefficient ) { return pow ( - x , y ) ; }
Distance : 3

179
Tree	if ( y >= IEEEremainder ( j , NUMBER_CONSTANT , DEFAULT_EPSILON ) <= dpi < getDimension ( - x , y ) * x ) /
Code	if ( y >= IEEEremainder ( j , NUMBER_CONSTANT , DEFAULT_EPSILON ) <= dpi < getDimension ( - x , y ) * x ) /
Distance : 15

180
Tree	if ( y >= IEEEremainder ( j , NUMBER_CONSTANT , CombinatoricsUtils ) - si < getDimension ( - x , y ) * x ) /
Code	if ( y >= IEEEremainder ( j , NUMBER_CONSTANT , CombinatoricsUtils ) - si < getDimension ( - x , y ) * x ) /
Distance : 15

181
Tree	if ( y >= indexRm2 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= indexRm2 y TWO_POWER_52 <= - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 3

182
Tree	if ( y > - TWO_POWER_52 y dpi < x.length ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y dpi < x.length ) { return pow ( - x , y ) ; }
Distance : 6

183
Tree	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - dpi ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - dpi ) { return pow ( - x , y ) ; }
Distance : 3

184
Tree	if ( y >= unusedAssignment y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= unusedAssignment y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

185
Tree	if ( y >= absX y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= absX y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

186
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - dpi ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 <= - dpi ) { return pow ( - NUMBER_CONSTANT , x ) ; }
Distance : 5

187
Tree	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - sumOfLabelHeights ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y TWO_POWER_52 != - sumOfLabelHeights ) { return pow ( - x , y ) ; }
Distance : 4

188
Tree	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - si ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - si ) { return pow ( - x , y ) ; }
Distance : 3

189
Tree	if ( y > - TWO_POWER_52 y SECONDS_MILLIS < x.length ) { return pow ( - x , y ) ; }
Code	if ( y > - TWO_POWER_52 y SECONDS_MILLIS < x.length ) { return pow ( - x , y ) ; }
Distance : 6

190
Tree	if ( y >= CHAR_CONS y y <= - residual ) { return pow ( - x , y ) ; }
Code	if ( y >= CHAR_CONS y y <= - residual ) { return pow ( - x , y ) ; }
Distance : 3

191
Tree	if ( y >= CHAR_CONS y TWO_POWER_52 <= - si ) { return pow ( - x , y ) ; }
Code	if ( y >= CHAR_CONS y TWO_POWER_52 <= - si ) { return pow ( - x , y ) ; }
Distance : 3

192
Tree	if ( y >= F_1_3 y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Code	if ( y >= F_1_3 y TWO_POWER_52 != - NUMBER_CONSTANT ) { return pow ( - x , y ) ; }
Distance : 4

193
Tree	if ( y >= SECONDS_MILLIS y NUMBER_CONSTANT - dpi ) { return pow ( - x , y ) ; }
Code	if ( y >= SECONDS_MILLIS y NUMBER_CONSTANT - dpi ) { return pow ( - x , y ) ; }
Distance : 3

194
Tree	if ( y >= SECONDS_MILLIS y NUMBER_CONSTANT - si ) { return pow ( - x , y ) ; }
Code	if ( y >= SECONDS_MILLIS y NUMBER_CONSTANT - si ) { return pow ( - x , y ) ; }
Distance : 3

195
Tree	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - centers ) { return pow ( - x , y ) ; }
Code	if ( y >= TWO_POWER_52 y NUMBER_CONSTANT - centers ) { return pow ( - x , y ) ; }
Distance : 3

196
Tree	if ( y >= unusedAssignment y NUMBER_CONSTANT - dpi ) { return pow ( - x , y ) ; }
Code	if ( y >= unusedAssignment y NUMBER_CONSTANT - dpi ) { return pow ( - x , y ) ; }
Distance : 3

197
Tree	if ( y >= absX y NUMBER_CONSTANT - dpi ) { return pow ( - x , y ) ; }
Code	if ( y >= absX y NUMBER_CONSTANT - dpi ) { return pow ( - x , y ) ; }
Distance : 3

198
Tree	if ( y != - unusedAssignment y TWO_POWER_52 < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Code	if ( y != - unusedAssignment y TWO_POWER_52 < IncrementalCheckMode.GENERATE_IJS ) { return pow ( - x , y ) ; }
Distance : 6

199
Tree	if ( y >= unusedAssignment y NUMBER_CONSTANT - si ) { return pow ( - x , y ) ; }
Code	if ( y >= unusedAssignment y NUMBER_CONSTANT - si ) { return pow ( - x , y ) ; }
Distance : 3

========================================================================


========================================================================
Example Number: 76
Parent Code is: 
FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - dim / NUMBER_CONSTANT ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
-------------------------------------------------------------------------------
Child code is: 
FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - NUMBER_CONSTANT * dim ) * FastMath . pow ( covarianceMatrixDeterminant , - NUMBER_CONSTANT ) * getExponentTerm ( vals )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (32 (800{val=FastMath}) (235{val=.}) (802{val=pow}) (214{val=(}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (40{val=FastMath.PI})) (234{val=,}) (27 (38 (201{val=-}) (800{val=dim})) (203{val=/}) (34{val=NUMBER_CONSTANT})) (215{val=)})) (202{val=*}) (32 (800{val=FastMath}) (235{val=.}) (802{val=pow}) (214{val=(}) (800{val=covarianceMatrixDeterminant}) (234{val=,}) (38 (201{val=-}) (34{val=NUMBER_CONSTANT})) (215{val=)})) (202{val=*}) (32 (802{val=getExponentTerm}) (214{val=(}) (800{val=vals}) (215{val=)}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (32 (800{val=FastMath}) (235{val=.}) (802{val=pow}) (214{val=(}) (27 (34{val=NUMBER_CONSTANT}) (202{val=*}) (40{val=FastMath.PI})) (234{val=,}) (27 (38 (201{val=-}) (34{val=NUMBER_CONSTANT})) (202{val=*}) (800{val=dim})) (215{val=)})) (202{val=*}) (32 (800{val=FastMath}) (235{val=.}) (802{val=pow}) (214{val=(}) (800{val=covarianceMatrixDeterminant}) (234{val=,}) (38 (201{val=-}) (34{val=NUMBER_CONSTANT})) (215{val=)})) (202{val=*}) (32 (802{val=getExponentTerm}) (214{val=(}) (800{val=vals}) (215{val=)}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/11/parent/src_main_java_org_apache_commons_math3_distribution_MultivariateNormalDistribution.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 32
Wrong
========================================================================
False

0
Tree	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , numberOfTrials ) * FastMath . pow ( seedLen )
Code	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , numberOfTrials ) * FastMath . pow ( seedLen )
Distance : 18

1
Tree	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , w ) * FastMath . pow ( seedLen )
Code	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , w ) * FastMath . pow ( seedLen )
Distance : 18

2
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( seedLen ) - maxUlps
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( seedLen ) - maxUlps
Distance : 16

3
Tree	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , w ) * FastMath . pow ( THIS_MARKER )
Code	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , w ) * FastMath . pow ( THIS_MARKER )
Distance : 18

4
Tree	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( seedLen )
Code	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( seedLen )
Distance : 17

5
Tree	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( THIS_MARKER )
Code	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , dim ) * FastMath . pow ( THIS_MARKER )
Distance : 17

6
Tree	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , numberOfTrials ) * FastMath . pow ( OverlayChangeListener )
Code	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , numberOfTrials ) * FastMath . pow ( OverlayChangeListener )
Distance : 18

7
Tree	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , numberOfTrials ) * FastMath . pow ( THIS_MARKER )
Code	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , numberOfTrials ) * FastMath . pow ( THIS_MARKER )
Distance : 18

8
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( seedLen , - NUMBER_CONSTANT ) * targetMethod ( msg )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( seedLen , - NUMBER_CONSTANT ) * targetMethod ( msg )
Distance : 6

9
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( seedLen , - NUMBER_CONSTANT ) * hasMessage ( msg )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( seedLen , - NUMBER_CONSTANT ) * hasMessage ( msg )
Distance : 6

10
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( OverlayChangeListener , - NUMBER_CONSTANT ) * hasMessage ( msg )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( OverlayChangeListener , - NUMBER_CONSTANT ) * hasMessage ( msg )
Distance : 6

11
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( seedLen , - NUMBER_CONSTANT ) * hasMessage ( categoryData )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( seedLen , - NUMBER_CONSTANT ) * hasMessage ( categoryData )
Distance : 6

12
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( seedLen , - NUMBER_CONSTANT ) * hasMessage ( baos )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( seedLen , - NUMBER_CONSTANT ) * hasMessage ( baos )
Distance : 6

13
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( sp , - NUMBER_CONSTANT ) * hasMessage ( msg )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( sp , - NUMBER_CONSTANT ) * hasMessage ( msg )
Distance : 6

14
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( THIS_MARKER , - NUMBER_CONSTANT ) * hasMessage ( msg )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( THIS_MARKER , - NUMBER_CONSTANT ) * hasMessage ( msg )
Distance : 6

15
Tree	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( seedLen , - NUMBER_CONSTANT ) * useSourceInfoFromForTree ( msg )
Code	FastMath . pow ( NUMBER_CONSTANT * FastMath.PI , - FastMath / NUMBER_CONSTANT ) * FastMath . pow ( seedLen , - NUMBER_CONSTANT ) * useSourceInfoFromForTree ( msg )
Distance : 6

16
Tree	FastMath / FastMath * FastMath . pow ( seedLen ) * hasMessage ( UnfinishedMockingSessionException ) . hasMessage ( originalZipPath ) - maxUlps
Code	FastMath / FastMath * FastMath . pow ( seedLen ) * hasMessage ( UnfinishedMockingSessionException ) . hasMessage ( originalZipPath ) - maxUlps
Distance : 22

17
Tree	FastMath / FastMath * FastMath . pow ( THIS_MARKER ) * hasMessage ( UnfinishedMockingSessionException ) . hasMessage ( originalZipPath ) - maxUlps
Code	FastMath / FastMath * FastMath . pow ( THIS_MARKER ) * hasMessage ( UnfinishedMockingSessionException ) . hasMessage ( originalZipPath ) - maxUlps
Distance : 22

18
Tree	FastMath / FastMath * FastMath . pow ( UnfinishedMockingSessionException ) * hasMessage ( UnfinishedMockingSessionException ) . hasMessage ( originalZipPath ) - maxUlps
Code	FastMath / FastMath * FastMath . pow ( UnfinishedMockingSessionException ) * hasMessage ( UnfinishedMockingSessionException ) . hasMessage ( originalZipPath ) - maxUlps
Distance : 22

19
Tree	FastMath / FastMath * FastMath . pow ( aTwos ) * hasMessage ( UnfinishedMockingSessionException ) . hasMessage ( originalZipPath ) - maxUlps
Code	FastMath / FastMath * FastMath . pow ( aTwos ) * hasMessage ( UnfinishedMockingSessionException ) . hasMessage ( originalZipPath ) - maxUlps
Distance : 22

20
Tree	FastMath / FastMath * FastMath . pow ( seedLen ) * hasMessage ( UnfinishedMockingSessionException ) . describedAs ( originalZipPath ) - maxUlps
Code	FastMath / FastMath * FastMath . pow ( seedLen ) * hasMessage ( UnfinishedMockingSessionException ) . describedAs ( originalZipPath ) - maxUlps
Distance : 22

21
Tree	FastMath . pow ( NUMBER_CONSTANT , w ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( seedLen ) - maxUlps
Code	FastMath . pow ( NUMBER_CONSTANT , w ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( seedLen ) - maxUlps
Distance : 16

22
Tree	FastMath / FastMath * FastMath . pow ( seedLen ) * describedAs ( UnfinishedMockingSessionException ) . hasMessage ( originalZipPath ) - maxUlps
Code	FastMath / FastMath * FastMath . pow ( seedLen ) * describedAs ( UnfinishedMockingSessionException ) . hasMessage ( originalZipPath ) - maxUlps
Distance : 22

23
Tree	FastMath / FastMath * FastMath . pow ( OverlayChangeListener ) * hasMessage ( UnfinishedMockingSessionException ) . hasMessage ( originalZipPath ) - maxUlps
Code	FastMath / FastMath * FastMath . pow ( OverlayChangeListener ) * hasMessage ( UnfinishedMockingSessionException ) . hasMessage ( originalZipPath ) - maxUlps
Distance : 22

24
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( THIS_MARKER ) - maxUlps
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( THIS_MARKER ) - maxUlps
Distance : 16

25
Tree	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , w ) * FastMath . pow ( OverlayChangeListener )
Code	FastMath / FastMath * FastMath . pow ( - NUMBER_CONSTANT , w ) * FastMath . pow ( OverlayChangeListener )
Distance : 18

26
Tree	FastMath . pow ( NUMBER_CONSTANT , numberOfTrials ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( seedLen ) - maxUlps
Code	FastMath . pow ( NUMBER_CONSTANT , numberOfTrials ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( seedLen ) - maxUlps
Distance : 16

27
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( OverlayChangeListener ) - maxUlps
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( OverlayChangeListener ) - maxUlps
Distance : 16

28
Tree	FastMath / FastMath * FastMath . pow ( nextTime ) * hasMessage ( UnfinishedMockingSessionException ) . hasMessage ( originalZipPath ) - maxUlps
Code	FastMath / FastMath * FastMath . pow ( nextTime ) * hasMessage ( UnfinishedMockingSessionException ) . hasMessage ( originalZipPath ) - maxUlps
Distance : 22

29
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( seedLen ) - si
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( seedLen ) - si
Distance : 16

30
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( sp ) - maxUlps
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( sp ) - maxUlps
Distance : 16

31
Tree	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( UnfinishedMockingSessionException ) - maxUlps
Code	FastMath . pow ( NUMBER_CONSTANT , dim ) - FastMath + NUMBER_CONSTANT * FastMath . pow ( UnfinishedMockingSessionException ) - maxUlps
Distance : 16

========================================================================


========================================================================
Example Number: 77
Parent Code is: 
iterations = new Incrementor ( NUMBER_CONSTANT , new MaxIterCallback () ) ;
-------------------------------------------------------------------------------
Child code is: 
iterations = new Incrementor ( Integer.MAX_VALUE , new MaxIterCallback () ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (7 (800{val=iterations}) (204{val==}) (14 (304{val=new}) (43 (801{val=Incrementor})) (214{val=(}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (14 (304{val=new}) (43 (801{val=MaxIterCallback})) (216{val=()})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (7 (800{val=iterations}) (204{val==}) (14 (304{val=new}) (43 (801{val=Incrementor})) (214{val=(}) (40{val=Integer.MAX_VALUE}) (234{val=,}) (14 (304{val=new}) (43 (801{val=MaxIterCallback})) (216{val=()})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/6/parent/src_main_java_org_apache_commons_math3_optim_BaseOptimizer.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	jUnitRule = new InstantiatorProviderAdapter ( new InputStreamReader () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Code	jUnitRule = new InstantiatorProviderAdapter ( new InputStreamReader () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Distance : 7

1
Tree	defUse = new GeneralPath ( new InputStreamReader () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Code	defUse = new GeneralPath ( new InputStreamReader () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Distance : 7

2
Tree	defUse = new GeneralPath ( this , DevNull.out ) ;
Code	defUse = new GeneralPath ( this , DevNull.out ) ;
Distance : 6

3
Tree	jUnitRule = new ModuleLoader ( new InputStreamReader () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Code	jUnitRule = new ModuleLoader ( new InputStreamReader () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Distance : 7

4
Tree	jUnitRule = new MissingInvocationInOrderChecker ( newMockHandler , getNodes () , new ToStringBuilder () ) ;
Code	jUnitRule = new MissingInvocationInOrderChecker ( newMockHandler , getNodes () , new ToStringBuilder () ) ;
Distance : 7

5
Tree	jUnitRule = new ModuleLoader ( this , DevNull.out ) ;
Code	jUnitRule = new ModuleLoader ( this , DevNull.out ) ;
Distance : 6

6
Tree	jUnitRule = new GeneralPath ( this , new GeneralPath () ) ;
Code	jUnitRule = new GeneralPath ( this , new GeneralPath () ) ;
Distance : 4

7
Tree	jUnitRule = new GeneralPath ( newMockHandler , new ToStringBuilder () ) ;
Code	jUnitRule = new GeneralPath ( newMockHandler , new ToStringBuilder () ) ;
Distance : 4

8
Tree	jUnitRule = new GeneralPath ( this , new ToStringBuilder () ) ;
Code	jUnitRule = new GeneralPath ( this , new ToStringBuilder () ) ;
Distance : 4

9
Tree	jUnitRule = new TypeTransformation ( new InputStreamReader () , CHAR_CONS , false ) ;
Code	jUnitRule = new TypeTransformation ( new InputStreamReader () , CHAR_CONS , false ) ;
Distance : 8

10
Tree	jUnitRule = new GeneralPath ( StrLookup , getTolerance () , new ToStringBuilder () ) ;
Code	jUnitRule = new GeneralPath ( StrLookup , getTolerance () , new ToStringBuilder () ) ;
Distance : 7

11
Tree	jF = new GeneralPath ( new InputStreamReader () , CHAR_CONS , false ) ;
Code	jF = new GeneralPath ( new InputStreamReader () , CHAR_CONS , false ) ;
Distance : 8

12
Tree	jUnitRule = new GeneralPath < Rule > ( SECONDS_MILLIS , false ) ;
Code	jUnitRule = new GeneralPath < Rule > ( SECONDS_MILLIS , false ) ;
Distance : 9

13
Tree	jUnitRule = new GeneralPath ( newMockHandler , new RenameCallback () ) ;
Code	jUnitRule = new GeneralPath ( newMockHandler , new RenameCallback () ) ;
Distance : 4

14
Tree	jUnitRule = new MustBeReachingVariableDef ( new InputStreamReader () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Code	jUnitRule = new MustBeReachingVariableDef ( new InputStreamReader () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Distance : 7

15
Tree	jUnitRule = new GeneralPath ( null , injectee , new ToStringBuilder () ) ;
Code	jUnitRule = new GeneralPath ( null , injectee , new ToStringBuilder () ) ;
Distance : 6

16
Tree	jUnitRule = new TypeTransformation ( new InputStreamReader () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Code	jUnitRule = new TypeTransformation ( new InputStreamReader () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Distance : 7

17
Tree	jUnitRule = new GeneralPath ( STRING_CONSTANT , new ToStringBuilder () , CHAR_CONS ) ;
Code	jUnitRule = new GeneralPath ( STRING_CONSTANT , new ToStringBuilder () , CHAR_CONS ) ;
Distance : 6

18
Tree	jF = new GeneralPath ( new InputStreamReader () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Code	jF = new GeneralPath ( new InputStreamReader () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Distance : 7

19
Tree	jUnitRule = new MissingInvocationInOrderChecker ( new InputStreamReader () , false , NUMBER_CONSTANT ) ;
Code	jUnitRule = new MissingInvocationInOrderChecker ( new InputStreamReader () , false , NUMBER_CONSTANT ) ;
Distance : 8

20
Tree	jUnitRule = new InstantiatorProviderAdapter ( new InputStreamReader () , false , NUMBER_CONSTANT ) ;
Code	jUnitRule = new InstantiatorProviderAdapter ( new InputStreamReader () , false , NUMBER_CONSTANT ) ;
Distance : 8

21
Tree	jUnitRule = new GeneralPath < Rule > ( arraylistInitialCapacity , false ) ;
Code	jUnitRule = new GeneralPath < Rule > ( arraylistInitialCapacity , false ) ;
Distance : 9

22
Tree	jUnitRule = new GeneralPath ( newMockHandler , new ToStringBuilder () , CHAR_CONS ) ;
Code	jUnitRule = new GeneralPath ( newMockHandler , new ToStringBuilder () , CHAR_CONS ) ;
Distance : 6

23
Tree	jUnitRule = new MissingInvocationInOrderChecker ( this , DevNull.out ) ;
Code	jUnitRule = new MissingInvocationInOrderChecker ( this , DevNull.out ) ;
Distance : 6

24
Tree	jUnitRule = new GeneralPath ( newMockHandler , new RenameCallback () , CHAR_CONS ) ;
Code	jUnitRule = new GeneralPath ( newMockHandler , new RenameCallback () , CHAR_CONS ) ;
Distance : 6

25
Tree	jUnitRule = new GeneralPath ( false ) ;
Code	jUnitRule = new GeneralPath ( false ) ;
Distance : 7

26
Tree	jUnitRule = new InstantiatorProviderAdapter ( this , DevNull.out ) ;
Code	jUnitRule = new InstantiatorProviderAdapter ( this , DevNull.out ) ;
Distance : 6

27
Tree	jUnitRule = new GeneralPath ( true ) ;
Code	jUnitRule = new GeneralPath ( true ) ;
Distance : 7

28
Tree	jUnitRule = new MissingInvocationInOrderChecker ( newMockHandler , new ToStringBuilder () , CHAR_CONS ) ;
Code	jUnitRule = new MissingInvocationInOrderChecker ( newMockHandler , new ToStringBuilder () , CHAR_CONS ) ;
Distance : 6

29
Tree	jUnitRule = new InstantiatorProviderAdapter ( newMockHandler , new ToStringBuilder () , CHAR_CONS ) ;
Code	jUnitRule = new InstantiatorProviderAdapter ( newMockHandler , new ToStringBuilder () , CHAR_CONS ) ;
Distance : 6

30
Tree	jUnitRule = new ModuleLoader ( newMockHandler , new ToStringBuilder () , CHAR_CONS ) ;
Code	jUnitRule = new ModuleLoader ( newMockHandler , new ToStringBuilder () , CHAR_CONS ) ;
Distance : 6

31
Tree	defUse = new GeneralPath ( newMockHandler , new ToStringBuilder () , CHAR_CONS ) ;
Code	defUse = new GeneralPath ( newMockHandler , new ToStringBuilder () , CHAR_CONS ) ;
Distance : 6

32
Tree	jUnitRule = new TypeTransformation ( new InputStreamReader ( null ) ) ;
Code	jUnitRule = new TypeTransformation ( new InputStreamReader ( null ) ) ;
Distance : 7

33
Tree	jF = new GeneralPath ( new InputStreamReader ( null ) ) ;
Code	jF = new GeneralPath ( new InputStreamReader ( null ) ) ;
Distance : 7

34
Tree	jUnitRule = new GeneralPath ( newMockHandler , getNodes () , new ToStringBuilder () ) ;
Code	jUnitRule = new GeneralPath ( newMockHandler , getNodes () , new ToStringBuilder () ) ;
Distance : 7

35
Tree	jUnitRule = new MissingInvocationInOrderChecker ( newMockHandler , getTolerance () , new ToStringBuilder () ) ;
Code	jUnitRule = new MissingInvocationInOrderChecker ( newMockHandler , getTolerance () , new ToStringBuilder () ) ;
Distance : 7

36
Tree	jUnitRule = new InstantiatorProviderAdapter ( newMockHandler , getTolerance () , new ToStringBuilder () ) ;
Code	jUnitRule = new InstantiatorProviderAdapter ( newMockHandler , getTolerance () , new ToStringBuilder () ) ;
Distance : 7

37
Tree	jUnitRule = new GeneralPath ( new InputStreamReader () , CHAR_CONS , false ) ;
Code	jUnitRule = new GeneralPath ( new InputStreamReader () , CHAR_CONS , false ) ;
Distance : 8

38
Tree	jUnitRule = new MissingInvocationInOrderChecker ( true ) ;
Code	jUnitRule = new MissingInvocationInOrderChecker ( true ) ;
Distance : 7

39
Tree	jUnitRule = new MissingInvocationInOrderChecker < Rule > ( null ) ;
Code	jUnitRule = new MissingInvocationInOrderChecker < Rule > ( null ) ;
Distance : 8

40
Tree	jUnitRule = new InstantiatorProviderAdapter < Rule > ( null ) ;
Code	jUnitRule = new InstantiatorProviderAdapter < Rule > ( null ) ;
Distance : 8

41
Tree	jUnitRule = new ModuleLoader < Rule > ( null ) ;
Code	jUnitRule = new ModuleLoader < Rule > ( null ) ;
Distance : 8

42
Tree	jUnitRule = new ModuleLoader ( newMockHandler , getTolerance () , new ToStringBuilder () ) ;
Code	jUnitRule = new ModuleLoader ( newMockHandler , getTolerance () , new ToStringBuilder () ) ;
Distance : 7

43
Tree	defUse = new GeneralPath < Rule > ( null ) ;
Code	defUse = new GeneralPath < Rule > ( null ) ;
Distance : 8

44
Tree	jUnitRule = new ModuleLoader ( null , injectee , new ToStringBuilder () ) ;
Code	jUnitRule = new ModuleLoader ( null , injectee , new ToStringBuilder () ) ;
Distance : 6

45
Tree	defUse = new GeneralPath ( null , injectee , new ToStringBuilder () ) ;
Code	defUse = new GeneralPath ( null , injectee , new ToStringBuilder () ) ;
Distance : 6

46
Tree	jUnitRule = new MustBeReachingVariableDef < Rule > ( null ) ;
Code	jUnitRule = new MustBeReachingVariableDef < Rule > ( null ) ;
Distance : 8

47
Tree	defUse = new GeneralPath ( newMockHandler , getTolerance () , new ToStringBuilder () ) ;
Code	defUse = new GeneralPath ( newMockHandler , getTolerance () , new ToStringBuilder () ) ;
Distance : 7

48
Tree	jUnitRule = new GeneralPath ( null , rsl , new ToStringBuilder () ) ;
Code	jUnitRule = new GeneralPath ( null , rsl , new ToStringBuilder () ) ;
Distance : 6

49
Tree	jUnitRule = new GeneralPath ( null , changes , new ToStringBuilder () ) ;
Code	jUnitRule = new GeneralPath ( null , changes , new ToStringBuilder () ) ;
Distance : 6

50
Tree	jUnitRule = new GeneralPath ( LocalizedFormats.INDEX_OUT_OF_RANGE , new ToStringBuilder () , CHAR_CONS ) ;
Code	jUnitRule = new GeneralPath ( LocalizedFormats.INDEX_OUT_OF_RANGE , new ToStringBuilder () , CHAR_CONS ) ;
Distance : 6

51
Tree	jUnitRule = new MissingInvocationInOrderChecker ( new InputStreamReader () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Code	jUnitRule = new MissingInvocationInOrderChecker ( new InputStreamReader () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Distance : 7

52
Tree	jUnitRule = new MissingInvocationInOrderChecker ( new InputStreamReader () , transformers ) ;
Code	jUnitRule = new MissingInvocationInOrderChecker ( new InputStreamReader () , transformers ) ;
Distance : 7

53
Tree	jUnitRule = new InstantiatorProviderAdapter ( STRING_CONSTANT , new ToStringBuilder () , CHAR_CONS ) ;
Code	jUnitRule = new InstantiatorProviderAdapter ( STRING_CONSTANT , new ToStringBuilder () , CHAR_CONS ) ;
Distance : 6

54
Tree	jUnitRule = new ModuleLoader ( STRING_CONSTANT , new ToStringBuilder () , CHAR_CONS ) ;
Code	jUnitRule = new ModuleLoader ( STRING_CONSTANT , new ToStringBuilder () , CHAR_CONS ) ;
Distance : 6

55
Tree	defUse = new GeneralPath ( STRING_CONSTANT , new ToStringBuilder () , CHAR_CONS ) ;
Code	defUse = new GeneralPath ( STRING_CONSTANT , new ToStringBuilder () , CHAR_CONS ) ;
Distance : 6

56
Tree	jUnitRule = new MissingInvocationInOrderChecker < Rule > ( arraylistInitialCapacity , false ) ;
Code	jUnitRule = new MissingInvocationInOrderChecker < Rule > ( arraylistInitialCapacity , false ) ;
Distance : 9

57
Tree	jUnitRule = new InstantiatorProviderAdapter < Rule > ( arraylistInitialCapacity , false ) ;
Code	jUnitRule = new InstantiatorProviderAdapter < Rule > ( arraylistInitialCapacity , false ) ;
Distance : 9

58
Tree	jUnitRule = new InstantiatorProviderAdapter ( new InputStreamReader () , transformers ) ;
Code	jUnitRule = new InstantiatorProviderAdapter ( new InputStreamReader () , transformers ) ;
Distance : 7

59
Tree	jUnitRule = new MissingInvocationInOrderChecker ( new InputStreamReader () , CHAR_CONS , false ) ;
Code	jUnitRule = new MissingInvocationInOrderChecker ( new InputStreamReader () , CHAR_CONS , false ) ;
Distance : 8

60
Tree	jUnitRule = new GeneralPath ( this , new IdentityPreconditioner () ) ;
Code	jUnitRule = new GeneralPath ( this , new IdentityPreconditioner () ) ;
Distance : 4

61
Tree	jUnitRule = new GeneralPath ( new InputStreamReader () , remainingRegion ) ;
Code	jUnitRule = new GeneralPath ( new InputStreamReader () , remainingRegion ) ;
Distance : 7

62
Tree	jUnitRule = new InstantiatorProviderAdapter ( LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX , new ToStringBuilder () , CHAR_CONS ) ;
Code	jUnitRule = new InstantiatorProviderAdapter ( LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX , new ToStringBuilder () , CHAR_CONS ) ;
Distance : 6

63
Tree	defUse = new GeneralPath ( LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX , new ToStringBuilder () , CHAR_CONS ) ;
Code	defUse = new GeneralPath ( LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX , new ToStringBuilder () , CHAR_CONS ) ;
Distance : 6

64
Tree	jUnitRule = new ModuleLoader ( LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX , new ToStringBuilder () , CHAR_CONS ) ;
Code	jUnitRule = new ModuleLoader ( LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX , new ToStringBuilder () , CHAR_CONS ) ;
Distance : 6

65
Tree	jUnitRule = new GeneralPath ( new InputStreamReader ( null ) , Es6RewriteModules.NAMESPACE_IMPORT_CANNOT_USE_STAR ) ;
Code	jUnitRule = new GeneralPath ( new InputStreamReader ( null ) , Es6RewriteModules.NAMESPACE_IMPORT_CANNOT_USE_STAR ) ;
Distance : 9

66
Tree	jUnitRule = new GeneralPath ( LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX , new ToStringBuilder () ) ;
Code	jUnitRule = new GeneralPath ( LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX , new ToStringBuilder () ) ;
Distance : 4

67
Tree	jUnitRule = new MustBeReachingVariableDef ( new InputStreamReader () , false , NUMBER_CONSTANT ) ;
Code	jUnitRule = new MustBeReachingVariableDef ( new InputStreamReader () , false , NUMBER_CONSTANT ) ;
Distance : 8

68
Tree	defUse = new GeneralPath ( new InputStreamReader () , transformers ) ;
Code	defUse = new GeneralPath ( new InputStreamReader () , transformers ) ;
Distance : 7

69
Tree	jUnitRule = new ModuleLoader ( new InputStreamReader () , transformers ) ;
Code	jUnitRule = new ModuleLoader ( new InputStreamReader () , transformers ) ;
Distance : 7

70
Tree	jUnitRule = new GeneralPath ( new InputStreamReader ( null ) , options.inlineLocalFunctions ) ;
Code	jUnitRule = new GeneralPath ( new InputStreamReader ( null ) , options.inlineLocalFunctions ) ;
Distance : 9

71
Tree	jUnitRule = new GeneralPath ( ISOYearOfEraDateTimeField.INSTANCE , new ToStringBuilder () , CHAR_CONS ) ;
Code	jUnitRule = new GeneralPath ( ISOYearOfEraDateTimeField.INSTANCE , new ToStringBuilder () , CHAR_CONS ) ;
Distance : 6

72
Tree	jUnitRule = new TypeTransformation ( new InputStreamReader () , false , NUMBER_CONSTANT ) ;
Code	jUnitRule = new TypeTransformation ( new InputStreamReader () , false , NUMBER_CONSTANT ) ;
Distance : 8

73
Tree	jUnitRule = new GeneralPath ( null , injectee , new ToStringBuilder () , null ) ;
Code	jUnitRule = new GeneralPath ( null , injectee , new ToStringBuilder () , null ) ;
Distance : 8

74
Tree	jUnitRule = new GeneralPath ( new InputStreamReader () , multiplicand ) ;
Code	jUnitRule = new GeneralPath ( new InputStreamReader () , multiplicand ) ;
Distance : 7

75
Tree	jF = new GeneralPath ( new InputStreamReader () , false , NUMBER_CONSTANT ) ;
Code	jF = new GeneralPath ( new InputStreamReader () , false , NUMBER_CONSTANT ) ;
Distance : 8

76
Tree	jUnitRule = new GeneralPath ( new InputStreamReader ( null ) , Answers.RETURNS_DEFAULTS ) ;
Code	jUnitRule = new GeneralPath ( new InputStreamReader ( null ) , Answers.RETURNS_DEFAULTS ) ;
Distance : 9

77
Tree	jUnitRule = new GeneralPath ( new InputStreamReader ( null ) , TimeZoneNumberRule.INSTANCE_COLON ) ;
Code	jUnitRule = new GeneralPath ( new InputStreamReader ( null ) , TimeZoneNumberRule.INSTANCE_COLON ) ;
Distance : 9

78
Tree	jUnitRule = new GeneralPath ( new InputStreamReader ( null ) ) ;
Code	jUnitRule = new GeneralPath ( new InputStreamReader ( null ) ) ;
Distance : 7

79
Tree	jUnitRule = new GeneralPath ( null , NordsieckTransformer , new ToStringBuilder () ) ;
Code	jUnitRule = new GeneralPath ( null , NordsieckTransformer , new ToStringBuilder () ) ;
Distance : 6

80
Tree	jUnitRule = new MustBeReachingVariableDef ( STRING_CONSTANT , new ToStringBuilder () , CHAR_CONS ) ;
Code	jUnitRule = new MustBeReachingVariableDef ( STRING_CONSTANT , new ToStringBuilder () , CHAR_CONS ) ;
Distance : 6

81
Tree	jUnitRule = new MissingInvocationInOrderChecker ( new InputStreamReader ( null ) ) ;
Code	jUnitRule = new MissingInvocationInOrderChecker ( new InputStreamReader ( null ) ) ;
Distance : 7

82
Tree	jUnitRule = new MissingInvocationInOrderChecker ( newMockHandler , new ToStringBuilder () ) ;
Code	jUnitRule = new MissingInvocationInOrderChecker ( newMockHandler , new ToStringBuilder () ) ;
Distance : 4

83
Tree	jUnitRule = new InstantiatorProviderAdapter ( newMockHandler , new ToStringBuilder () ) ;
Code	jUnitRule = new InstantiatorProviderAdapter ( newMockHandler , new ToStringBuilder () ) ;
Distance : 4

84
Tree	jUnitRule = new InstantiatorProviderAdapter ( new InputStreamReader ( null ) ) ;
Code	jUnitRule = new InstantiatorProviderAdapter ( new InputStreamReader ( null ) ) ;
Distance : 7

85
Tree	jUnitRule = new GeneralPath ( config.parseTypeSyntax , new ToStringBuilder () , CHAR_CONS ) ;
Code	jUnitRule = new GeneralPath ( config.parseTypeSyntax , new ToStringBuilder () , CHAR_CONS ) ;
Distance : 6

86
Tree	jF = new GeneralPath ( new InputStreamReader () ) ;
Code	jF = new GeneralPath ( new InputStreamReader () ) ;
Distance : 5

87
Tree	jUnitRule = new MissingInvocationInOrderChecker < Rule > () ;
Code	jUnitRule = new MissingInvocationInOrderChecker < Rule > () ;
Distance : 8

88
Tree	jUnitRule = new GeneralPath ( new InputStreamReader ( null ) , Void.TYPE ) ;
Code	jUnitRule = new GeneralPath ( new InputStreamReader ( null ) , Void.TYPE ) ;
Distance : 9

89
Tree	jUnitRule = new InstantiatorProviderAdapter < Rule > () ;
Code	jUnitRule = new InstantiatorProviderAdapter < Rule > () ;
Distance : 8

90
Tree	jUnitRule = new ModuleLoader ( new InputStreamReader () , false , NUMBER_CONSTANT ) ;
Code	jUnitRule = new ModuleLoader ( new InputStreamReader () , false , NUMBER_CONSTANT ) ;
Distance : 8

91
Tree	jUnitRule = new TypeTransformation < Rule > ( null ) ;
Code	jUnitRule = new TypeTransformation < Rule > ( null ) ;
Distance : 8

92
Tree	jF = new GeneralPath < Rule > ( null ) ;
Code	jF = new GeneralPath < Rule > ( null ) ;
Distance : 8

93
Tree	jUnitRule = new ModuleLoader ( new InputStreamReader ( null ) ) ;
Code	jUnitRule = new ModuleLoader ( new InputStreamReader ( null ) ) ;
Distance : 7

94
Tree	defUse = new GeneralPath ( new InputStreamReader ( null ) ) ;
Code	defUse = new GeneralPath ( new InputStreamReader ( null ) ) ;
Distance : 7

95
Tree	jUnitRule = new GeneralPath ( newMockHandler , getTolerance () , new ToStringBuilder () ) ;
Code	jUnitRule = new GeneralPath ( newMockHandler , getTolerance () , new ToStringBuilder () ) ;
Distance : 7

96
Tree	jUnitRule = new GeneralPath ( new InputStreamReader ( null ) , ReplaceIdGenerators.CONDITIONAL_ID_GENERATOR_CALL ) ;
Code	jUnitRule = new GeneralPath ( new InputStreamReader ( null ) , ReplaceIdGenerators.CONDITIONAL_ID_GENERATOR_CALL ) ;
Distance : 9

97
Tree	jUnitRule = new GeneralPath ( new InputStreamReader () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Code	jUnitRule = new GeneralPath ( new InputStreamReader () , LocalizedFormats.UNPARSEABLE_FRACTION_NUMBER ) ;
Distance : 7

98
Tree	jUnitRule = new GeneralPath ( new InputStreamReader () ) ;
Code	jUnitRule = new GeneralPath ( new InputStreamReader () ) ;
Distance : 5

99
Tree	jUnitRule = new GeneralPath < Rule > () ;
Code	jUnitRule = new GeneralPath < Rule > () ;
Distance : 8

100
Tree	jUnitRule = new InstantiatorProviderAdapter ( new InputStreamReader () , CHAR_CONS , false ) ;
Code	jUnitRule = new InstantiatorProviderAdapter ( new InputStreamReader () , CHAR_CONS , false ) ;
Distance : 8

101
Tree	defUse = new GeneralPath ( new InputStreamReader () , false , NUMBER_CONSTANT ) ;
Code	defUse = new GeneralPath ( new InputStreamReader () , false , NUMBER_CONSTANT ) ;
Distance : 8

102
Tree	jUnitRule = new ModuleLoader ( new InputStreamReader () , CHAR_CONS , false ) ;
Code	jUnitRule = new ModuleLoader ( new InputStreamReader () , CHAR_CONS , false ) ;
Distance : 8

103
Tree	defUse = new GeneralPath ( new InputStreamReader () , CHAR_CONS , false ) ;
Code	defUse = new GeneralPath ( new InputStreamReader () , CHAR_CONS , false ) ;
Distance : 8

104
Tree	jUnitRule = new MissingInvocationInOrderChecker ( new InputStreamReader () ) ;
Code	jUnitRule = new MissingInvocationInOrderChecker ( new InputStreamReader () ) ;
Distance : 5

105
Tree	jUnitRule = new GeneralPath ( this , DevNull.out ) ;
Code	jUnitRule = new GeneralPath ( this , DevNull.out ) ;
Distance : 6

106
Tree	jUnitRule = new MissingInvocationInOrderChecker ( this , new ToStringBuilder () ) ;
Code	jUnitRule = new MissingInvocationInOrderChecker ( this , new ToStringBuilder () ) ;
Distance : 4

107
Tree	jUnitRule = new InstantiatorProviderAdapter ( this , new ToStringBuilder () ) ;
Code	jUnitRule = new InstantiatorProviderAdapter ( this , new ToStringBuilder () ) ;
Distance : 4

108
Tree	jUnitRule = new ModuleLoader ( this , new ToStringBuilder () ) ;
Code	jUnitRule = new ModuleLoader ( this , new ToStringBuilder () ) ;
Distance : 4

109
Tree	defUse = new GeneralPath ( this , new ToStringBuilder () ) ;
Code	defUse = new GeneralPath ( this , new ToStringBuilder () ) ;
Distance : 4

110
Tree	jUnitRule = new ModuleLoader < Rule > () ;
Code	jUnitRule = new ModuleLoader < Rule > () ;
Distance : 8

111
Tree	defUse = new GeneralPath < Rule > () ;
Code	defUse = new GeneralPath < Rule > () ;
Distance : 8

112
Tree	jUnitRule = new MustBeReachingVariableDef < Rule > () ;
Code	jUnitRule = new MustBeReachingVariableDef < Rule > () ;
Distance : 8

113
Tree	jUnitRule = new TypeTransformation < Rule > () ;
Code	jUnitRule = new TypeTransformation < Rule > () ;
Distance : 8

114
Tree	jUnitRule = new MissingInvocationInOrderChecker ( LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX , new ToStringBuilder () , CHAR_CONS ) ;
Code	jUnitRule = new MissingInvocationInOrderChecker ( LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX , new ToStringBuilder () , CHAR_CONS ) ;
Distance : 6

115
Tree	jUnitRule = new TypeTransformation ( STRING_CONSTANT , new ToStringBuilder () , CHAR_CONS ) ;
Code	jUnitRule = new TypeTransformation ( STRING_CONSTANT , new ToStringBuilder () , CHAR_CONS ) ;
Distance : 6

116
Tree	jUnitRule = new ModuleLoader ( newMockHandler , new ToStringBuilder () ) ;
Code	jUnitRule = new ModuleLoader ( newMockHandler , new ToStringBuilder () ) ;
Distance : 4

117
Tree	jUnitRule = new MissingInvocationInOrderChecker < Rule > ( SECONDS_MILLIS , false ) ;
Code	jUnitRule = new MissingInvocationInOrderChecker < Rule > ( SECONDS_MILLIS , false ) ;
Distance : 9

118
Tree	jUnitRule = new InstantiatorProviderAdapter ( new InputStreamReader () ) ;
Code	jUnitRule = new InstantiatorProviderAdapter ( new InputStreamReader () ) ;
Distance : 5

119
Tree	jUnitRule = new ModuleLoader ( new InputStreamReader () ) ;
Code	jUnitRule = new ModuleLoader ( new InputStreamReader () ) ;
Distance : 5

120
Tree	defUse = new GeneralPath ( new InputStreamReader () ) ;
Code	defUse = new GeneralPath ( new InputStreamReader () ) ;
Distance : 5

121
Tree	jUnitRule = new MustBeReachingVariableDef ( new InputStreamReader () ) ;
Code	jUnitRule = new MustBeReachingVariableDef ( new InputStreamReader () ) ;
Distance : 5

122
Tree	jUnitRule = new GeneralPath ( new InputStreamReader () , false , NUMBER_CONSTANT ) ;
Code	jUnitRule = new GeneralPath ( new InputStreamReader () , false , NUMBER_CONSTANT ) ;
Distance : 8

123
Tree	jUnitRule = new MustBeReachingVariableDef ( new InputStreamReader ( null ) ) ;
Code	jUnitRule = new MustBeReachingVariableDef ( new InputStreamReader ( null ) ) ;
Distance : 7

124
Tree	jUnitRule = new MustBeReachingVariableDef ( new InputStreamReader () , CHAR_CONS , false ) ;
Code	jUnitRule = new MustBeReachingVariableDef ( new InputStreamReader () , CHAR_CONS , false ) ;
Distance : 8

125
Tree	jUnitRule = new InstantiatorProviderAdapter < Rule > ( SECONDS_MILLIS , false ) ;
Code	jUnitRule = new InstantiatorProviderAdapter < Rule > ( SECONDS_MILLIS , false ) ;
Distance : 9

126
Tree	jUnitRule = new ModuleLoader < Rule > ( SECONDS_MILLIS , false ) ;
Code	jUnitRule = new ModuleLoader < Rule > ( SECONDS_MILLIS , false ) ;
Distance : 9

127
Tree	jUnitRule = new MustBeReachingVariableDef ( this , DevNull.out ) ;
Code	jUnitRule = new MustBeReachingVariableDef ( this , DevNull.out ) ;
Distance : 6

128
Tree	jUnitRule = new GeneralPath ( this , new RenameCallback () ) ;
Code	jUnitRule = new GeneralPath ( this , new RenameCallback () ) ;
Distance : 4

129
Tree	jF = new GeneralPath < Rule > () ;
Code	jF = new GeneralPath < Rule > () ;
Distance : 8

130
Tree	jUnitRule = new TypeTransformation ( new InputStreamReader () ) ;
Code	jUnitRule = new TypeTransformation ( new InputStreamReader () ) ;
Distance : 5

131
Tree	defUse = new GeneralPath < Rule > ( SECONDS_MILLIS , false ) ;
Code	defUse = new GeneralPath < Rule > ( SECONDS_MILLIS , false ) ;
Distance : 9

132
Tree	jUnitRule = new TypeTransformation ( this , DevNull.out ) ;
Code	jUnitRule = new TypeTransformation ( this , DevNull.out ) ;
Distance : 6

133
Tree	jF = new GeneralPath ( this , DevNull.out ) ;
Code	jF = new GeneralPath ( this , DevNull.out ) ;
Distance : 6

134
Tree	jUnitRule = new GeneralPath < Rule > ( null ) ;
Code	jUnitRule = new GeneralPath < Rule > ( null ) ;
Distance : 8

135
Tree	jUnitRule = new MissingInvocationInOrderChecker ( false ) ;
Code	jUnitRule = new MissingInvocationInOrderChecker ( false ) ;
Distance : 7

136
Tree	jUnitRule = new MissingInvocationInOrderChecker ( STRING_CONSTANT , new ToStringBuilder () , CHAR_CONS ) ;
Code	jUnitRule = new MissingInvocationInOrderChecker ( STRING_CONSTANT , new ToStringBuilder () , CHAR_CONS ) ;
Distance : 6

137
Tree	jUnitRule = new MissingInvocationInOrderChecker ( newMockHandler , new RenameCallback () , CHAR_CONS ) ;
Code	jUnitRule = new MissingInvocationInOrderChecker ( newMockHandler , new RenameCallback () , CHAR_CONS ) ;
Distance : 6

138
Tree	defUse = new GeneralPath ( newMockHandler , new RenameCallback () , CHAR_CONS ) ;
Code	defUse = new GeneralPath ( newMockHandler , new RenameCallback () , CHAR_CONS ) ;
Distance : 6

139
Tree	jUnitRule = new ModuleLoader ( false ) ;
Code	jUnitRule = new ModuleLoader ( false ) ;
Distance : 7

140
Tree	jUnitRule = new InstantiatorProviderAdapter ( false ) ;
Code	jUnitRule = new InstantiatorProviderAdapter ( false ) ;
Distance : 7

141
Tree	defUse = new GeneralPath ( false ) ;
Code	defUse = new GeneralPath ( false ) ;
Distance : 7

142
Tree	defUse = new GeneralPath ( newMockHandler , new ToStringBuilder () ) ;
Code	defUse = new GeneralPath ( newMockHandler , new ToStringBuilder () ) ;
Distance : 4

143
Tree	jUnitRule = new GeneralPath ( new InputStreamReader () , transformers ) ;
Code	jUnitRule = new GeneralPath ( new InputStreamReader () , transformers ) ;
Distance : 7

144
Tree	jF = new GeneralPath ( STRING_CONSTANT , new ToStringBuilder () , CHAR_CONS ) ;
Code	jF = new GeneralPath ( STRING_CONSTANT , new ToStringBuilder () , CHAR_CONS ) ;
Distance : 6

145
Tree	jUnitRule = new MissingInvocationInOrderChecker ( null , injectee , new ToStringBuilder () ) ;
Code	jUnitRule = new MissingInvocationInOrderChecker ( null , injectee , new ToStringBuilder () ) ;
Distance : 6

146
Tree	jUnitRule = new GeneralPath ( new InputStreamReader () , valuesFileURL ) ;
Code	jUnitRule = new GeneralPath ( new InputStreamReader () , valuesFileURL ) ;
Distance : 7

147
Tree	jUnitRule = new MissingInvocationInOrderChecker ( newMockHandler , new RenameCallback () ) ;
Code	jUnitRule = new MissingInvocationInOrderChecker ( newMockHandler , new RenameCallback () ) ;
Distance : 4

148
Tree	jUnitRule = new GeneralPath ( LocalizedFormats.INDEX_OUT_OF_RANGE , new ToStringBuilder () ) ;
Code	jUnitRule = new GeneralPath ( LocalizedFormats.INDEX_OUT_OF_RANGE , new ToStringBuilder () ) ;
Distance : 4

149
Tree	jUnitRule = new GeneralPath ( null , NordsieckTransformer , new ToStringBuilder () , null ) ;
Code	jUnitRule = new GeneralPath ( null , NordsieckTransformer , new ToStringBuilder () , null ) ;
Distance : 8

150
Tree	jUnitRule = new GeneralPath ( LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX , new ToStringBuilder () , CHAR_CONS ) ;
Code	jUnitRule = new GeneralPath ( LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX , new ToStringBuilder () , CHAR_CONS ) ;
Distance : 6

151
Tree	jUnitRule = new MustBeReachingVariableDef ( false ) ;
Code	jUnitRule = new MustBeReachingVariableDef ( false ) ;
Distance : 7

152
Tree	jUnitRule = new MissingInvocationInOrderChecker ( new InputStreamReader ( null ) , options.inlineLocalFunctions ) ;
Code	jUnitRule = new MissingInvocationInOrderChecker ( new InputStreamReader ( null ) , options.inlineLocalFunctions ) ;
Distance : 9

153
Tree	jUnitRule = new InstantiatorProviderAdapter ( new InputStreamReader ( null ) , options.inlineLocalFunctions ) ;
Code	jUnitRule = new InstantiatorProviderAdapter ( new InputStreamReader ( null ) , options.inlineLocalFunctions ) ;
Distance : 9

154
Tree	jUnitRule = new MissingInvocationInOrderChecker ( null , injectee , new ToStringBuilder () , null ) ;
Code	jUnitRule = new MissingInvocationInOrderChecker ( null , injectee , new ToStringBuilder () , null ) ;
Distance : 8

155
Tree	jUnitRule = new GeneralPath ( ISOYearOfEraDateTimeField.INSTANCE , new ToStringBuilder () ) ;
Code	jUnitRule = new GeneralPath ( ISOYearOfEraDateTimeField.INSTANCE , new ToStringBuilder () ) ;
Distance : 4

156
Tree	jUnitRule = new InstantiatorProviderAdapter ( null , injectee , new ToStringBuilder () ) ;
Code	jUnitRule = new InstantiatorProviderAdapter ( null , injectee , new ToStringBuilder () ) ;
Distance : 6

157
Tree	defUse = new GeneralPath ( newMockHandler , new RenameCallback () ) ;
Code	defUse = new GeneralPath ( newMockHandler , new RenameCallback () ) ;
Distance : 4

158
Tree	jUnitRule = new InstantiatorProviderAdapter ( null , injectee , new ToStringBuilder () , null ) ;
Code	jUnitRule = new InstantiatorProviderAdapter ( null , injectee , new ToStringBuilder () , null ) ;
Distance : 8

159
Tree	jUnitRule = new ModuleLoader ( null , injectee , new ToStringBuilder () , null ) ;
Code	jUnitRule = new ModuleLoader ( null , injectee , new ToStringBuilder () , null ) ;
Distance : 8

160
Tree	jUnitRule = new GeneralPath ( LocalizedFormats.INDEX_OUT_OF_RANGE , new ToStringBuilder ( null ) , CHAR_CONS , abort ) ;
Code	jUnitRule = new GeneralPath ( LocalizedFormats.INDEX_OUT_OF_RANGE , new ToStringBuilder ( null ) , CHAR_CONS , abort ) ;
Distance : 11

161
Tree	defUse = new ThirdMoment ( StrLookup , getTolerance () , new ToStringBuilder () ) ;
Code	defUse = new ThirdMoment ( StrLookup , getTolerance () , new ToStringBuilder () ) ;
Distance : 7

162
Tree	jUnitRule = new GeneralPath ( ISOYearOfEraDateTimeField.INSTANCE , new ToStringBuilder ( null ) , CHAR_CONS , abort ) ;
Code	jUnitRule = new GeneralPath ( ISOYearOfEraDateTimeField.INSTANCE , new ToStringBuilder ( null ) , CHAR_CONS , abort ) ;
Distance : 11

163
Tree	jUnitRule = new GeneralPath ( LocalizedFormats.INDEX_OUT_OF_RANGE , new ToStringBuilder () , CHAR_CONS , DEFAULT_MOCK_MAKER_CLASS ) ;
Code	jUnitRule = new GeneralPath ( LocalizedFormats.INDEX_OUT_OF_RANGE , new ToStringBuilder () , CHAR_CONS , DEFAULT_MOCK_MAKER_CLASS ) ;
Distance : 8

164
Tree	jUnitRule = new GeneralPath ( newMockHandler , new RenameCallback () , transformers , settings ) ;
Code	jUnitRule = new GeneralPath ( newMockHandler , new RenameCallback () , transformers , settings ) ;
Distance : 8

165
Tree	jUnitRule = new GeneralPath ( LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX , new ToStringBuilder () , CHAR_CONS , DEFAULT_MOCK_MAKER_CLASS ) ;
Code	jUnitRule = new GeneralPath ( LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX , new ToStringBuilder () , CHAR_CONS , DEFAULT_MOCK_MAKER_CLASS ) ;
Distance : 8

166
Tree	jUnitRule = new GeneralPath ( LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX , new ToStringBuilder () , CHAR_CONS , abort ) ;
Code	jUnitRule = new GeneralPath ( LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX , new ToStringBuilder () , CHAR_CONS , abort ) ;
Distance : 8

167
Tree	jUnitRule = new GeneralPath ( newMockHandler , new ToStringBuilder () , transformers , settings ) ;
Code	jUnitRule = new GeneralPath ( newMockHandler , new ToStringBuilder () , transformers , settings ) ;
Distance : 8

168
Tree	jUnitRule = new GeneralPath ( config.parseTypeSyntax , new ToStringBuilder ( null ) , CHAR_CONS , abort ) ;
Code	jUnitRule = new GeneralPath ( config.parseTypeSyntax , new ToStringBuilder ( null ) , CHAR_CONS , abort ) ;
Distance : 11

169
Tree	jUnitRule = new GeneralPath ( LocalizedFormats.INDEX_OUT_OF_RANGE , new ToStringBuilder () , CHAR_CONS , abort ) ;
Code	jUnitRule = new GeneralPath ( LocalizedFormats.INDEX_OUT_OF_RANGE , new ToStringBuilder () , CHAR_CONS , abort ) ;
Distance : 8

170
Tree	jUnitRule = new MissingInvocationInOrderChecker ( LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX , new ToStringBuilder ( null ) , CHAR_CONS , abort ) ;
Code	jUnitRule = new MissingInvocationInOrderChecker ( LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX , new ToStringBuilder ( null ) , CHAR_CONS , abort ) ;
Distance : 11

171
Tree	jUnitRule = new InstantiatorProviderAdapter ( LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX , new ToStringBuilder ( null ) , CHAR_CONS , abort ) ;
Code	jUnitRule = new InstantiatorProviderAdapter ( LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX , new ToStringBuilder ( null ) , CHAR_CONS , abort ) ;
Distance : 11

172
Tree	jUnitRule = new GeneralPath ( newMockHandler , new RenameCallback () , multiplicand , settings ) ;
Code	jUnitRule = new GeneralPath ( newMockHandler , new RenameCallback () , multiplicand , settings ) ;
Distance : 8

173
Tree	defUse = new GeneralPath ( LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX , new ToStringBuilder ( null ) , CHAR_CONS , abort ) ;
Code	defUse = new GeneralPath ( LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX , new ToStringBuilder ( null ) , CHAR_CONS , abort ) ;
Distance : 11

174
Tree	defUse = new GeneralPath ( null , injectee , new ToStringBuilder () , null ) ;
Code	defUse = new GeneralPath ( null , injectee , new ToStringBuilder () , null ) ;
Distance : 8

175
Tree	jUnitRule = new GeneralPath ( null , rsl , new ToStringBuilder () , null ) ;
Code	jUnitRule = new GeneralPath ( null , rsl , new ToStringBuilder () , null ) ;
Distance : 8

176
Tree	jUnitRule = new GeneralPath ( null , changes , new ToStringBuilder () , null ) ;
Code	jUnitRule = new GeneralPath ( null , changes , new ToStringBuilder () , null ) ;
Distance : 8

177
Tree	jUnitRule = new GeneralPath ( newMockHandler , new ToStringBuilder () , multiplicand , settings ) ;
Code	jUnitRule = new GeneralPath ( newMockHandler , new ToStringBuilder () , multiplicand , settings ) ;
Distance : 8

178
Tree	jUnitRule = new ModuleLoader ( LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX , new ToStringBuilder ( null ) , CHAR_CONS , abort ) ;
Code	jUnitRule = new ModuleLoader ( LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX , new ToStringBuilder ( null ) , CHAR_CONS , abort ) ;
Distance : 11

179
Tree	jUnitRule = new GeneralPath ( config.parseTypeSyntax , new ToStringBuilder () ) ;
Code	jUnitRule = new GeneralPath ( config.parseTypeSyntax , new ToStringBuilder () ) ;
Distance : 4

180
Tree	jUnitRule = new MissingInvocationInOrderChecker ( LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX , new ToStringBuilder () ) ;
Code	jUnitRule = new MissingInvocationInOrderChecker ( LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX , new ToStringBuilder () ) ;
Distance : 4

181
Tree	jUnitRule = new InstantiatorProviderAdapter ( LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX , new ToStringBuilder () ) ;
Code	jUnitRule = new InstantiatorProviderAdapter ( LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX , new ToStringBuilder () ) ;
Distance : 4

182
Tree	defUse = new GeneralPath ( LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX , new ToStringBuilder () ) ;
Code	defUse = new GeneralPath ( LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX , new ToStringBuilder () ) ;
Distance : 4

183
Tree	jUnitRule = new ModuleLoader ( LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX , new ToStringBuilder () ) ;
Code	jUnitRule = new ModuleLoader ( LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX , new ToStringBuilder () ) ;
Distance : 4

184
Tree	jUnitRule = new ThirdMoment ( newMockHandler , getTolerance () , new ToStringBuilder () ) ;
Code	jUnitRule = new ThirdMoment ( newMockHandler , getTolerance () , new ToStringBuilder () ) ;
Distance : 7

185
Tree	jUnitRule = new ThirdMoment ( newMockHandler , getNodes () , new ToStringBuilder () ) ;
Code	jUnitRule = new ThirdMoment ( newMockHandler , getNodes () , new ToStringBuilder () ) ;
Distance : 7

186
Tree	jUnitRule = new ThirdMoment ( StrLookup , getTolerance () , new ToStringBuilder () ) ;
Code	jUnitRule = new ThirdMoment ( StrLookup , getTolerance () , new ToStringBuilder () ) ;
Distance : 7

187
Tree	defUse = new ThirdMoment ( newMockHandler , getTolerance () , new ToStringBuilder () ) ;
Code	defUse = new ThirdMoment ( newMockHandler , getTolerance () , new ToStringBuilder () ) ;
Distance : 7

188
Tree	jUnitRule = new ThirdMoment ( StrLookup , getNodes () , new ToStringBuilder () ) ;
Code	jUnitRule = new ThirdMoment ( StrLookup , getNodes () , new ToStringBuilder () ) ;
Distance : 7

189
Tree	jUnitRule = new GeneralPath ( LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX , new ToStringBuilder ( null ) , CHAR_CONS , abort ) ;
Code	jUnitRule = new GeneralPath ( LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX , new ToStringBuilder ( null ) , CHAR_CONS , abort ) ;
Distance : 11

190
Tree	defUse = new ThirdMoment ( newMockHandler , getNodes () , new ToStringBuilder () ) ;
Code	defUse = new ThirdMoment ( newMockHandler , getNodes () , new ToStringBuilder () ) ;
Distance : 7

191
Tree	jUnitRule = new GeneralPath ( ISOYearOfEraDateTimeField.INSTANCE , new ToStringBuilder () , CHAR_CONS , DEFAULT_MOCK_MAKER_CLASS ) ;
Code	jUnitRule = new GeneralPath ( ISOYearOfEraDateTimeField.INSTANCE , new ToStringBuilder () , CHAR_CONS , DEFAULT_MOCK_MAKER_CLASS ) ;
Distance : 8

192
Tree	jUnitRule = new GeneralPath ( ISOYearOfEraDateTimeField.INSTANCE , new ToStringBuilder () , CHAR_CONS , abort ) ;
Code	jUnitRule = new GeneralPath ( ISOYearOfEraDateTimeField.INSTANCE , new ToStringBuilder () , CHAR_CONS , abort ) ;
Distance : 8

193
Tree	jUnitRule = new GeneralPath ( LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX , new ToStringBuilder () , CHAR_CONS , superClassQName ) ;
Code	jUnitRule = new GeneralPath ( LocalizedFormats.UNABLE_TO_ORTHOGONOLIZE_MATRIX , new ToStringBuilder () , CHAR_CONS , superClassQName ) ;
Distance : 8

194
Tree	jUnitRule = new GeneralPath ( newMockHandler , new ToStringBuilder () , DEFAULT_MOCK_MAKER_CLASS , settings ) ;
Code	jUnitRule = new GeneralPath ( newMockHandler , new ToStringBuilder () , DEFAULT_MOCK_MAKER_CLASS , settings ) ;
Distance : 8

195
Tree	jUnitRule = new GeneralPath ( newMockHandler , new RenameCallback () , DEFAULT_MOCK_MAKER_CLASS , settings ) ;
Code	jUnitRule = new GeneralPath ( newMockHandler , new RenameCallback () , DEFAULT_MOCK_MAKER_CLASS , settings ) ;
Distance : 8

196
Tree	jUnitRule = new GeneralPath ( config.parseTypeSyntax , new ToStringBuilder () , CHAR_CONS , DEFAULT_MOCK_MAKER_CLASS ) ;
Code	jUnitRule = new GeneralPath ( config.parseTypeSyntax , new ToStringBuilder () , CHAR_CONS , DEFAULT_MOCK_MAKER_CLASS ) ;
Distance : 8

197
Tree	jUnitRule = new MissingInvocationInOrderChecker ( newMockHandler , new ToStringBuilder () , transformers , settings ) ;
Code	jUnitRule = new MissingInvocationInOrderChecker ( newMockHandler , new ToStringBuilder () , transformers , settings ) ;
Distance : 8

198
Tree	jF = new ThirdMoment ( newMockHandler , getTolerance () , new ToStringBuilder () ) ;
Code	jF = new ThirdMoment ( newMockHandler , getTolerance () , new ToStringBuilder () ) ;
Distance : 7

199
Tree	jUnitRule = new InstantiatorProviderAdapter ( newMockHandler , new ToStringBuilder () , transformers , settings ) ;
Code	jUnitRule = new InstantiatorProviderAdapter ( newMockHandler , new ToStringBuilder () , transformers , settings ) ;
Distance : 8

========================================================================


========================================================================
Example Number: 78
Parent Code is: 
if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
-------------------------------------------------------------------------------
Child code is: 
if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return INF ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=real}) (236{val===}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=imaginary}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=NaN}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (800{val=real}) (236{val===}) (34{val=NUMBER_CONSTANT})) (249{val=&&}) (27 (800{val=imaginary}) (236{val===}) (34{val=NUMBER_CONSTANT}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (800{val=INF}) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Math/5/parent/src_main_java_org_apache_commons_math3_complex_Complex.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	if ( real . getPrinter ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . getPrinter ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

1
Tree	if ( real . regionMatches ( caseNode ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . regionMatches ( caseNode ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

2
Tree	if ( real == NUMBER_CONSTANT && imaginary > rhs.b ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > rhs.b ) { return NaN ; }
Distance : 3

3
Tree	if ( real == NUMBER_CONSTANT && imaginary <= isPointInRect () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= isPointInRect () ) { return NaN ; }
Distance : 4

4
Tree	if ( real == NUMBER_CONSTANT && children >= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && children >= imaginary ) { return NaN ; }
Distance : 4

5
Tree	if ( isEquals == NUMBER_CONSTANT && imaginary >= imaginary ) { return NaN ; }
Code	if ( isEquals == NUMBER_CONSTANT && imaginary >= imaginary ) { return NaN ; }
Distance : 4

6
Tree	if ( isEquals == NUMBER_CONSTANT && imaginary < NUMBER_CONSTANT ) { return NaN ; }
Code	if ( isEquals == NUMBER_CONSTANT && imaginary < NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

7
Tree	if ( real == NUMBER_CONSTANT && imaginary && removable ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary && removable ) { return NaN ; }
Distance : 3

8
Tree	if ( real == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Distance : 3

9
Tree	if ( real == NUMBER_CONSTANT && imaginary <= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= imaginary ) { return NaN ; }
Distance : 3

10
Tree	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Distance : 3

11
Tree	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 1

12
Tree	if ( real == NUMBER_CONSTANT && imaginary == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

13
Tree	if ( real == NUMBER_CONSTANT && imaginary > overflow ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > overflow ) { return NaN ; }
Distance : 3

14
Tree	if ( real == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

15
Tree	if ( real == NUMBER_CONSTANT && imaginary != imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != imaginary ) { return NaN ; }
Distance : 3

16
Tree	if ( real == NUMBER_CONSTANT && estimationType <= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && estimationType <= imaginary ) { return NaN ; }
Distance : 4

17
Tree	if ( real == NUMBER_CONSTANT && imaginary && imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary && imaginary ) { return NaN ; }
Distance : 3

18
Tree	if ( real == NUMBER_CONSTANT && imaginary > sequence ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > sequence ) { return NaN ; }
Distance : 3

19
Tree	if ( newValues == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( newValues == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

20
Tree	if ( real == NUMBER_CONSTANT && children == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && children == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

21
Tree	if ( newValues == NUMBER_CONSTANT && imaginary == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( newValues == NUMBER_CONSTANT && imaginary == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

22
Tree	if ( isEquals == NUMBER_CONSTANT && imaginary <= imaginary ) { return NaN ; }
Code	if ( isEquals == NUMBER_CONSTANT && imaginary <= imaginary ) { return NaN ; }
Distance : 4

23
Tree	if ( real == NUMBER_CONSTANT && imaginary < children == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < children == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

24
Tree	if ( real == NUMBER_CONSTANT && imaginary <= isLastMatcherVarargMatcher () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= isLastMatcherVarargMatcher () ) { return NaN ; }
Distance : 4

25
Tree	if ( period == NUMBER_CONSTANT && imaginary <= imaginary ) { return NaN ; }
Code	if ( period == NUMBER_CONSTANT && imaginary <= imaginary ) { return NaN ; }
Distance : 4

26
Tree	if ( real == NUMBER_CONSTANT && this == outlineStroke ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && this == outlineStroke ) { return NaN ; }
Distance : 3

27
Tree	if ( real == NUMBER_CONSTANT && imaginary > annotations ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > annotations ) { return NaN ; }
Distance : 3

28
Tree	if ( real == NUMBER_CONSTANT && imaginary == classNode == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == classNode == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

29
Tree	if ( real == NUMBER_CONSTANT && imaginary == getReferenceName () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == getReferenceName () ) { return NaN ; }
Distance : 3

30
Tree	if ( real == NUMBER_CONSTANT && imaginary < IncrementalCheckMode.GENERATE_IJS ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < IncrementalCheckMode.GENERATE_IJS ) { return NaN ; }
Distance : 3

31
Tree	if ( real == NUMBER_CONSTANT && imaginary < PropertyRenamingPolicy.ALL_UNQUOTED ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < PropertyRenamingPolicy.ALL_UNQUOTED ) { return NaN ; }
Distance : 3

32
Tree	if ( real == NUMBER_CONSTANT && imaginary < DisposalCheckingPolicy.OFF ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < DisposalCheckingPolicy.OFF ) { return NaN ; }
Distance : 3

33
Tree	if ( index == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Code	if ( index == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Distance : 4

34
Tree	if ( real == NUMBER_CONSTANT && children < STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && children < STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 6

35
Tree	if ( real == NUMBER_CONSTANT && getEnums () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && getEnums () == null ) { return NaN ; }
Distance : 4

36
Tree	if ( newValues == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Code	if ( newValues == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Distance : 4

37
Tree	if ( real == NUMBER_CONSTANT && imaginary > sortedData ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > sortedData ) { return NaN ; }
Distance : 3

38
Tree	if ( real == NUMBER_CONSTANT && children () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && children () == null ) { return NaN ; }
Distance : 4

39
Tree	if ( real == NUMBER_CONSTANT && imaginary == children == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == children == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

40
Tree	if ( real == NUMBER_CONSTANT && RegularizedGamma.P == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && RegularizedGamma.P == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

41
Tree	if ( real == NUMBER_CONSTANT && imaginary < NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

42
Tree	if ( real == NUMBER_CONSTANT && imaginary <= children ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= children ) { return NaN ; }
Distance : 3

43
Tree	if ( real == NUMBER_CONSTANT && TernaryValue.TRUE == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && TernaryValue.TRUE == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

44
Tree	if ( newValues == NUMBER_CONSTANT && imaginary < IncrementalCheckMode.GENERATE_IJS ) { return NaN ; }
Code	if ( newValues == NUMBER_CONSTANT && imaginary < IncrementalCheckMode.GENERATE_IJS ) { return NaN ; }
Distance : 4

45
Tree	if ( real == NUMBER_CONSTANT && TracerMode.OFF != null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && TracerMode.OFF != null ) { return NaN ; }
Distance : 4

46
Tree	if ( real == NUMBER_CONSTANT && ParseTreeType.CALL_EXPRESSION != null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && ParseTreeType.CALL_EXPRESSION != null ) { return NaN ; }
Distance : 4

47
Tree	if ( isEquals == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( isEquals == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

48
Tree	if ( real == NUMBER_CONSTANT && STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 4

49
Tree	if ( real == NUMBER_CONSTANT && imaginary != RegularizedGamma.P ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != RegularizedGamma.P ) { return NaN ; }
Distance : 3

50
Tree	if ( real == NUMBER_CONSTANT && imaginary >= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary >= imaginary ) { return NaN ; }
Distance : 3

51
Tree	if ( period == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( period == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

52
Tree	if ( FieldUtils == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Code	if ( FieldUtils == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Distance : 4

53
Tree	if ( real == NUMBER_CONSTANT && children <= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && children <= imaginary ) { return NaN ; }
Distance : 4

54
Tree	if ( real == NUMBER_CONSTANT && imaginary < Year.MAXIMUM_YEAR ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < Year.MAXIMUM_YEAR ) { return NaN ; }
Distance : 3

55
Tree	if ( isEquals == NUMBER_CONSTANT && imaginary < IncrementalCheckMode.GENERATE_IJS ) { return NaN ; }
Code	if ( isEquals == NUMBER_CONSTANT && imaginary < IncrementalCheckMode.GENERATE_IJS ) { return NaN ; }
Distance : 4

56
Tree	if ( real == NUMBER_CONSTANT && imaginary == annotations == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == annotations == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

57
Tree	if ( diffs == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( diffs == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

58
Tree	if ( real == NUMBER_CONSTANT && imaginary <= isObjectLiteralThatCanBeSkipped () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= isObjectLiteralThatCanBeSkipped () ) { return NaN ; }
Distance : 4

59
Tree	if ( newValues == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Code	if ( newValues == NUMBER_CONSTANT && imaginary > imaginary ) { return NaN ; }
Distance : 4

60
Tree	if ( real == NUMBER_CONSTANT && RenameStrategy.MAPPED == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && RenameStrategy.MAPPED == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

61
Tree	if ( newValues == NUMBER_CONSTANT && children () == null ) { return NaN ; }
Code	if ( newValues == NUMBER_CONSTANT && children () == null ) { return NaN ; }
Distance : 5

62
Tree	if ( real == NUMBER_CONSTANT && imaginary == firstNonBottom () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == firstNonBottom () ) { return NaN ; }
Distance : 3

63
Tree	if ( real == NUMBER_CONSTANT && imaginary != TernaryValue.TRUE ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != TernaryValue.TRUE ) { return NaN ; }
Distance : 3

64
Tree	if ( real == NUMBER_CONSTANT && imaginary < removable == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < removable == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

65
Tree	if ( real == NUMBER_CONSTANT && LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED != null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED != null ) { return NaN ; }
Distance : 4

66
Tree	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 5

67
Tree	if ( real == NUMBER_CONSTANT && imaginary == nextStrategy == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == nextStrategy == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

68
Tree	if ( real == NUMBER_CONSTANT && imaginary < callSite == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < callSite == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

69
Tree	if ( real == NUMBER_CONSTANT && definitionsGatherer.definitions == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && definitionsGatherer.definitions == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

70
Tree	if ( isEquals == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( isEquals == NUMBER_CONSTANT && imaginary < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

71
Tree	if ( real == NUMBER_CONSTANT && children == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && children == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

72
Tree	if ( real == NUMBER_CONSTANT && RegularizedGamma.P != null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && RegularizedGamma.P != null ) { return NaN ; }
Distance : 4

73
Tree	if ( diffs == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Code	if ( diffs == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Distance : 4

74
Tree	if ( real == NUMBER_CONSTANT && imaginary > currentState.length ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > currentState.length ) { return NaN ; }
Distance : 3

75
Tree	if ( diffs == NUMBER_CONSTANT && imaginary >= imaginary ) { return NaN ; }
Code	if ( diffs == NUMBER_CONSTANT && imaginary >= imaginary ) { return NaN ; }
Distance : 4

76
Tree	if ( real == NUMBER_CONSTANT && imaginary == withSettings () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == withSettings () ) { return NaN ; }
Distance : 3

77
Tree	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 4

78
Tree	if ( newValues == NUMBER_CONSTANT && imaginary >= imaginary ) { return NaN ; }
Code	if ( newValues == NUMBER_CONSTANT && imaginary >= imaginary ) { return NaN ; }
Distance : 4

79
Tree	if ( newValues == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( newValues == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 5

80
Tree	if ( real == NUMBER_CONSTANT && imaginary > defines ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > defines ) { return NaN ; }
Distance : 3

81
Tree	if ( period == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Code	if ( period == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Distance : 4

82
Tree	if ( real == NUMBER_CONSTANT && inheritsFromIObjectReflexive () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && inheritsFromIObjectReflexive () == null ) { return NaN ; }
Distance : 4

83
Tree	if ( real == NUMBER_CONSTANT && imaginary > Year.MAXIMUM_YEAR ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > Year.MAXIMUM_YEAR ) { return NaN ; }
Distance : 3

84
Tree	if ( real == NUMBER_CONSTANT && imaginary > FunctionFlavor.NORMAL ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > FunctionFlavor.NORMAL ) { return NaN ; }
Distance : 3

85
Tree	if ( real == NUMBER_CONSTANT && estimationType == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && estimationType == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

86
Tree	if ( real == NUMBER_CONSTANT && imaginary != children ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != children ) { return NaN ; }
Distance : 3

87
Tree	if ( real == NUMBER_CONSTANT && imaginary != RenameStrategy.MAPPED ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != RenameStrategy.MAPPED ) { return NaN ; }
Distance : 3

88
Tree	if ( real . copySelf ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . copySelf ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

89
Tree	if ( newValues == NUMBER_CONSTANT && imaginary != imaginary ) { return NaN ; }
Code	if ( newValues == NUMBER_CONSTANT && imaginary != imaginary ) { return NaN ; }
Distance : 4

90
Tree	if ( newValues == NUMBER_CONSTANT && imaginary == getReferenceName () ) { return NaN ; }
Code	if ( newValues == NUMBER_CONSTANT && imaginary == getReferenceName () ) { return NaN ; }
Distance : 4

91
Tree	if ( newValues == NUMBER_CONSTANT && imaginary && imaginary ) { return NaN ; }
Code	if ( newValues == NUMBER_CONSTANT && imaginary && imaginary ) { return NaN ; }
Distance : 4

92
Tree	if ( real == NUMBER_CONSTANT && TernaryValue.TRUE != null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && TernaryValue.TRUE != null ) { return NaN ; }
Distance : 4

93
Tree	if ( real == NUMBER_CONSTANT && imaginary == firstNonNull () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == firstNonNull () ) { return NaN ; }
Distance : 3

94
Tree	if ( real == NUMBER_CONSTANT && imaginary != LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED ) { return NaN ; }
Distance : 3

95
Tree	if ( newValues == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return NaN ; }
Code	if ( newValues == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return NaN ; }
Distance : 3

96
Tree	if ( real == NUMBER_CONSTANT && LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && LocalizedFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

97
Tree	if ( real == NUMBER_CONSTANT && imaginary != metadata.superClassNameNode ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != metadata.superClassNameNode ) { return NaN ; }
Distance : 3

98
Tree	if ( real == NUMBER_CONSTANT && imaginary && overflow ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary && overflow ) { return NaN ; }
Distance : 3

99
Tree	if ( real == NUMBER_CONSTANT && getObjTypeIfSingletonObj () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && getObjTypeIfSingletonObj () == null ) { return NaN ; }
Distance : 4

100
Tree	if ( real == NUMBER_CONSTANT && imaginary != IncrementalCheckMode.OFF ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != IncrementalCheckMode.OFF ) { return NaN ; }
Distance : 3

101
Tree	if ( real == NUMBER_CONSTANT && definitionsGatherer.definitions != null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && definitionsGatherer.definitions != null ) { return NaN ; }
Distance : 4

102
Tree	if ( real == NUMBER_CONSTANT && imaginary <= removable ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= removable ) { return NaN ; }
Distance : 3

103
Tree	if ( index == NUMBER_CONSTANT && imaginary < NUMBER_CONSTANT ) { return NaN ; }
Code	if ( index == NUMBER_CONSTANT && imaginary < NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

104
Tree	if ( real == NUMBER_CONSTANT && imaginary == getAbstractScope () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == getAbstractScope () ) { return NaN ; }
Distance : 3

105
Tree	if ( real == NUMBER_CONSTANT && requiredTypesBuilder () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && requiredTypesBuilder () == null ) { return NaN ; }
Distance : 4

106
Tree	if ( real == NUMBER_CONSTANT && imaginary && estimationType ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary && estimationType ) { return NaN ; }
Distance : 3

107
Tree	if ( real == NUMBER_CONSTANT && imaginary != definitionsGatherer.definitions ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != definitionsGatherer.definitions ) { return NaN ; }
Distance : 3

108
Tree	if ( newValues == NUMBER_CONSTANT && imaginary <= imaginary ) { return NaN ; }
Code	if ( newValues == NUMBER_CONSTANT && imaginary <= imaginary ) { return NaN ; }
Distance : 4

109
Tree	if ( isEquals == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Code	if ( isEquals == NUMBER_CONSTANT && this == imaginary ) { return NaN ; }
Distance : 4

110
Tree	if ( real == NUMBER_CONSTANT && containsArray () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && containsArray () == null ) { return NaN ; }
Distance : 4

111
Tree	if ( real == NUMBER_CONSTANT && imaginary && nextStrategy ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary && nextStrategy ) { return NaN ; }
Distance : 3

112
Tree	if ( real == NUMBER_CONSTANT && imaginary <= pluralize () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= pluralize () ) { return NaN ; }
Distance : 4

113
Tree	if ( isEquals == NUMBER_CONSTANT && STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( isEquals == NUMBER_CONSTANT && STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 5

114
Tree	if ( real . regionMatches ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . regionMatches ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

115
Tree	if ( newValues == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( newValues == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

116
Tree	if ( real == NUMBER_CONSTANT && imaginary < startConfiguration.length ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < startConfiguration.length ) { return NaN ; }
Distance : 3

117
Tree	if ( isEquals == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( isEquals == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 5

118
Tree	if ( real == NUMBER_CONSTANT && imaginary == findDomainAxisIndex () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == findDomainAxisIndex () ) { return NaN ; }
Distance : 3

119
Tree	if ( real == NUMBER_CONSTANT && children && imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && children && imaginary ) { return NaN ; }
Distance : 4

120
Tree	if ( isEquals == NUMBER_CONSTANT && imaginary != imaginary ) { return NaN ; }
Code	if ( isEquals == NUMBER_CONSTANT && imaginary != imaginary ) { return NaN ; }
Distance : 4

121
Tree	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + outlineStroke ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + outlineStroke ) { return NaN ; }
Distance : 4

122
Tree	if ( newValues == NUMBER_CONSTANT && imaginary < NUMBER_CONSTANT ) { return NaN ; }
Code	if ( newValues == NUMBER_CONSTANT && imaginary < NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

123
Tree	if ( newValues == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( newValues == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 6

124
Tree	if ( isEquals == NUMBER_CONSTANT && imaginary && imaginary ) { return NaN ; }
Code	if ( isEquals == NUMBER_CONSTANT && imaginary && imaginary ) { return NaN ; }
Distance : 4

125
Tree	if ( real == NUMBER_CONSTANT && imaginary <= shouldEmitUseStrict () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= shouldEmitUseStrict () ) { return NaN ; }
Distance : 4

126
Tree	if ( real . regionMatches ( newValues ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . regionMatches ( newValues ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

127
Tree	if ( real == NUMBER_CONSTANT && estimationType == STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && estimationType == STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 5

128
Tree	if ( period == NUMBER_CONSTANT && imaginary >= imaginary ) { return NaN ; }
Code	if ( period == NUMBER_CONSTANT && imaginary >= imaginary ) { return NaN ; }
Distance : 4

129
Tree	if ( real == NUMBER_CONSTANT && children < NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && children < NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

130
Tree	if ( real == NUMBER_CONSTANT && imaginary != OutputJs.NORMAL ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != OutputJs.NORMAL ) { return NaN ; }
Distance : 3

131
Tree	if ( newValues == NUMBER_CONSTANT && STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( newValues == NUMBER_CONSTANT && STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 5

132
Tree	if ( real == NUMBER_CONSTANT && imaginary < nextStrategy == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < nextStrategy == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

133
Tree	if ( diffs == NUMBER_CONSTANT && imaginary < NUMBER_CONSTANT ) { return NaN ; }
Code	if ( diffs == NUMBER_CONSTANT && imaginary < NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

134
Tree	if ( newValues == NUMBER_CONSTANT && imaginary <= isLastMatcherVarargMatcher () ) { return NaN ; }
Code	if ( newValues == NUMBER_CONSTANT && imaginary <= isLastMatcherVarargMatcher () ) { return NaN ; }
Distance : 5

135
Tree	if ( real == NUMBER_CONSTANT && estimationType >= imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && estimationType >= imaginary ) { return NaN ; }
Distance : 4

136
Tree	if ( real == NUMBER_CONSTANT && TracerMode.OFF == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && TracerMode.OFF == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

137
Tree	if ( real == NUMBER_CONSTANT && children == CHAR_CONS ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && children == CHAR_CONS ) { return NaN ; }
Distance : 3

138
Tree	if ( newValues . regionMatches ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( newValues . regionMatches ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

139
Tree	if ( real == NUMBER_CONSTANT && imaginary != estimationType ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != estimationType ) { return NaN ; }
Distance : 3

140
Tree	if ( real == NUMBER_CONSTANT && LocalizedFormats.NUMBER_TOO_SMALL != null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && LocalizedFormats.NUMBER_TOO_SMALL != null ) { return NaN ; }
Distance : 4

141
Tree	if ( real == NUMBER_CONSTANT && STRING_CONSTANT + changeScopeRoot ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && STRING_CONSTANT + changeScopeRoot ) { return NaN ; }
Distance : 4

142
Tree	if ( real == NUMBER_CONSTANT && children == STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && children == STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 5

143
Tree	if ( real == NUMBER_CONSTANT && imaginary >= children ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary >= children ) { return NaN ; }
Distance : 3

144
Tree	if ( real == NUMBER_CONSTANT && imaginary != nextStrategy ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != nextStrategy ) { return NaN ; }
Distance : 3

145
Tree	if ( real == NUMBER_CONSTANT && LocalizedFormats.NUMBER_TOO_SMALL == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && LocalizedFormats.NUMBER_TOO_SMALL == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

146
Tree	if ( real . escapeJson ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . escapeJson ( real ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

147
Tree	if ( period == NUMBER_CONSTANT && STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( period == NUMBER_CONSTANT && STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 5

148
Tree	if ( index == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return NaN ; }
Code	if ( index == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return NaN ; }
Distance : 3

149
Tree	if ( index == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( index == NUMBER_CONSTANT && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

150
Tree	if ( real == NUMBER_CONSTANT && estimationType == CHAR_CONS ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && estimationType == CHAR_CONS ) { return NaN ; }
Distance : 3

151
Tree	if ( diffs == NUMBER_CONSTANT && STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( diffs == NUMBER_CONSTANT && STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 5

152
Tree	if ( newValues == NUMBER_CONSTANT && imaginary > Year.MAXIMUM_YEAR ) { return NaN ; }
Code	if ( newValues == NUMBER_CONSTANT && imaginary > Year.MAXIMUM_YEAR ) { return NaN ; }
Distance : 4

153
Tree	if ( index == NUMBER_CONSTANT && STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( index == NUMBER_CONSTANT && STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 5

154
Tree	if ( isEquals == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( isEquals == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 6

155
Tree	if ( real == NUMBER_CONSTANT && imaginary < Long.MAX_VALUE ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < Long.MAX_VALUE ) { return NaN ; }
Distance : 3

156
Tree	if ( newValues == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary + STRING_CONSTANT + STRING_CONSTANT ) { return NaN ; }
Code	if ( newValues == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary + STRING_CONSTANT + STRING_CONSTANT ) { return NaN ; }
Distance : 10

157
Tree	if ( period == NUMBER_CONSTANT && imaginary < NUMBER_CONSTANT ) { return NaN ; }
Code	if ( period == NUMBER_CONSTANT && imaginary < NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

158
Tree	if ( real == NUMBER_CONSTANT && imaginary == getMask () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == getMask () ) { return NaN ; }
Distance : 3

159
Tree	if ( real == NUMBER_CONSTANT && imaginary > Boolean.TRUE ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > Boolean.TRUE ) { return NaN ; }
Distance : 3

160
Tree	if ( real . regionMatches ( index ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . regionMatches ( index ) && imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 6

161
Tree	if ( real == NUMBER_CONSTANT && imaginary > DateUtils.MILLIS_PER_DAY ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > DateUtils.MILLIS_PER_DAY ) { return NaN ; }
Distance : 3

162
Tree	if ( real == NUMBER_CONSTANT && children < STRING_CONSTANT + imaginary + STRING_CONSTANT + STRING_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && children < STRING_CONSTANT + imaginary + STRING_CONSTANT + STRING_CONSTANT ) { return NaN ; }
Distance : 9

163
Tree	if ( period == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return NaN ; }
Code	if ( period == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return NaN ; }
Distance : 3

164
Tree	if ( newValues == NUMBER_CONSTANT && imaginary > overflow ) { return NaN ; }
Code	if ( newValues == NUMBER_CONSTANT && imaginary > overflow ) { return NaN ; }
Distance : 4

165
Tree	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + outlineStroke ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + outlineStroke ) { return NaN ; }
Distance : 5

166
Tree	if ( isEquals == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary + STRING_CONSTANT + STRING_CONSTANT ) { return NaN ; }
Code	if ( isEquals == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary + STRING_CONSTANT + STRING_CONSTANT ) { return NaN ; }
Distance : 10

167
Tree	if ( real == NUMBER_CONSTANT && imaginary <= getIntercept () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= getIntercept () ) { return NaN ; }
Distance : 4

168
Tree	if ( real . regionMatches ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . regionMatches ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

169
Tree	if ( real == NUMBER_CONSTANT && estimationType < STRING_CONSTANT + imaginary + STRING_CONSTANT + STRING_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && estimationType < STRING_CONSTANT + imaginary + STRING_CONSTANT + STRING_CONSTANT ) { return NaN ; }
Distance : 9

170
Tree	if ( diffs == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return NaN ; }
Code	if ( diffs == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return NaN ; }
Distance : 3

171
Tree	if ( real == NUMBER_CONSTANT && RenameStrategy.MAPPED != null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && RenameStrategy.MAPPED != null ) { return NaN ; }
Distance : 4

172
Tree	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary + STRING_CONSTANT + STRING_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary + STRING_CONSTANT + STRING_CONSTANT ) { return NaN ; }
Distance : 9

173
Tree	if ( real == NUMBER_CONSTANT && estimationType < STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && estimationType < STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 6

174
Tree	if ( real == NUMBER_CONSTANT && getCounter () == null ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && getCounter () == null ) { return NaN ; }
Distance : 4

175
Tree	if ( real == NUMBER_CONSTANT && children < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && children < imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

176
Tree	if ( real == NUMBER_CONSTANT && imaginary > Vector1D.ZERO ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary > Vector1D.ZERO ) { return NaN ; }
Distance : 3

177
Tree	if ( real == NUMBER_CONSTANT && ParseTreeType.CALL_EXPRESSION == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && ParseTreeType.CALL_EXPRESSION == NUMBER_CONSTANT ) { return NaN ; }
Distance : 2

178
Tree	if ( isEquals == NUMBER_CONSTANT && imaginary == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( isEquals == NUMBER_CONSTANT && imaginary == imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 4

179
Tree	if ( real . regionMatches ( index ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . regionMatches ( index ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

180
Tree	if ( index == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( index == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 5

181
Tree	if ( real == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return NaN ; }
Distance : 2

182
Tree	if ( isEquals == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return NaN ; }
Code	if ( isEquals == NUMBER_CONSTANT && imaginary == CHAR_CONS ) { return NaN ; }
Distance : 3

183
Tree	if ( newValues . regionMatches ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( newValues . regionMatches ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 8

184
Tree	if ( real == NUMBER_CONSTANT && imaginary != classNode ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary != classNode ) { return NaN ; }
Distance : 3

185
Tree	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + outlineStroke + STRING_CONSTANT + STRING_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + outlineStroke + STRING_CONSTANT + STRING_CONSTANT ) { return NaN ; }
Distance : 9

186
Tree	if ( FieldUtils == NUMBER_CONSTANT && STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( FieldUtils == NUMBER_CONSTANT && STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 5

187
Tree	if ( real . regionMatches ( newValues ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . regionMatches ( newValues ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

188
Tree	if ( real == NUMBER_CONSTANT && estimationType < NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && estimationType < NUMBER_CONSTANT ) { return NaN ; }
Distance : 3

189
Tree	if ( real . escapeJson ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . escapeJson ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

190
Tree	if ( period == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary + STRING_CONSTANT + STRING_CONSTANT ) { return NaN ; }
Code	if ( period == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary + STRING_CONSTANT + STRING_CONSTANT ) { return NaN ; }
Distance : 10

191
Tree	if ( real == NUMBER_CONSTANT && imaginary <= withSettings () ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && imaginary <= withSettings () ) { return NaN ; }
Distance : 4

192
Tree	if ( real . copySelf ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . copySelf ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

193
Tree	if ( real == NUMBER_CONSTANT && children != imaginary ) { return NaN ; }
Code	if ( real == NUMBER_CONSTANT && children != imaginary ) { return NaN ; }
Distance : 4

194
Tree	if ( real . getPrinter ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . getPrinter ( real ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

195
Tree	if ( period == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( period == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 6

196
Tree	if ( period == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( period == NUMBER_CONSTANT && imaginary == STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 5

197
Tree	if ( real . regionMatches ( caseNode ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Code	if ( real . regionMatches ( caseNode ) imaginary imaginary == NUMBER_CONSTANT ) { return NaN ; }
Distance : 7

198
Tree	if ( diffs == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return NaN ; }
Code	if ( diffs == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary ) { return NaN ; }
Distance : 6

199
Tree	if ( diffs == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary + STRING_CONSTANT + STRING_CONSTANT ) { return NaN ; }
Code	if ( diffs == NUMBER_CONSTANT && imaginary < STRING_CONSTANT + imaginary + STRING_CONSTANT + STRING_CONSTANT ) { return NaN ; }
Distance : 10

========================================================================


========================================================================
Example Number: 79
Parent Code is: 
new Reporter () . smartNullPointerException ( location ) ;
-------------------------------------------------------------------------------
Child code is: 
new Reporter () . smartNullPointerException ( obj , location ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (32 (14 (304{val=new}) (43 (801{val=Reporter})) (216{val=()})) (235{val=.}) (802{val=smartNullPointerException}) (214{val=(}) (800{val=location}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (32 (14 (304{val=new}) (43 (801{val=Reporter})) (216{val=()})) (235{val=.}) (802{val=smartNullPointerException}) (214{val=(}) (800{val=obj}) (234{val=,}) (800{val=location}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/30/parent/src_org_mockito_internal_stubbing_defaultanswers_ReturnsSmartNulls.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	new Reporter () . applySingletonGetter ( location , Reporter ) ;
Code	new Reporter () . applySingletonGetter ( location , Reporter ) ;
Distance : 3

1
Tree	setFeatureSet ( location , options , options ) ;
Code	setFeatureSet ( location , options , options ) ;
Distance : 8

2
Tree	MissingInvocationVerifier ( location , options , options ) ;
Code	MissingInvocationVerifier ( location , options , options ) ;
Distance : 8

3
Tree	new Reporter () . smartNullPointerException () ;
Code	new Reporter () . smartNullPointerException () ;
Distance : 5

4
Tree	new Reporter ( location ) . stubbedAt ( location ) ;
Code	new Reporter ( location ) . stubbedAt ( location ) ;
Distance : 6

5
Tree	new Reporter () . smartNullPointerException ( location ) . stubbedAt ( location ) ;
Code	new Reporter () . smartNullPointerException ( location ) . stubbedAt ( location ) ;
Distance : 5

6
Tree	mode . getLanguageIn ( location ) ;
Code	mode . getLanguageIn ( location ) ;
Distance : 6

7
Tree	new Reporter () . smartNullPointerException ( location , Reporter ) ;
Code	new Reporter () . smartNullPointerException ( location , Reporter ) ;
Distance : 2

8
Tree	new Reporter () . smartNullPointerException ( location ) . startsWith ( location ) ;
Code	new Reporter () . smartNullPointerException ( location ) . startsWith ( location ) ;
Distance : 5

9
Tree	mode . getLanguageIn ( location , new Reporter ( location ) ) ;
Code	mode . getLanguageIn ( location , new Reporter ( location ) ) ;
Distance : 9

10
Tree	mode . getLanguageIn () . smartNullPointerException ( location ) ;
Code	mode . getLanguageIn () . smartNullPointerException ( location ) ;
Distance : 5

11
Tree	mode . getLanguageIn () ;
Code	mode . getLanguageIn () ;
Distance : 9

12
Tree	Mockito . getLanguageIn () ;
Code	Mockito . getLanguageIn () ;
Distance : 9

13
Tree	new Reporter () . smartNullPointerException ( location . getName () , location ) ;
Code	new Reporter () . smartNullPointerException ( location . getName () , location ) ;
Distance : 4

14
Tree	new Reporter () . smartNullPointerException ( location ) ;
Code	new Reporter () . smartNullPointerException ( location ) ;
Distance : 2

15
Tree	never ( location , options , options ) ;
Code	never ( location , options , options ) ;
Distance : 8

16
Tree	new Reporter ( location ) . getDeclaredType ( location ) ;
Code	new Reporter ( location ) . getDeclaredType ( location ) ;
Distance : 6

17
Tree	dayOfWeek . getLanguageIn ( location ) ;
Code	dayOfWeek . getLanguageIn ( location ) ;
Distance : 6

18
Tree	mode . getLanguageIn ( location , new Reporter () ) ;
Code	mode . getLanguageIn ( location , new Reporter () ) ;
Distance : 8

19
Tree	dayOfWeek . getLanguageIn ( location , new Reporter () ) ;
Code	dayOfWeek . getLanguageIn ( location , new Reporter () ) ;
Distance : 8

20
Tree	new Reporter () . smartNullPointerException ( location , options ) ;
Code	new Reporter () . smartNullPointerException ( location , options ) ;
Distance : 2

21
Tree	foo ( location , options , options ) ;
Code	foo ( location , options , options ) ;
Distance : 8

22
Tree	new Reporter () . applySingletonGetter ( location ) ;
Code	new Reporter () . applySingletonGetter ( location ) ;
Distance : 3

23
Tree	new Reporter ( location ) . declare ( location ) ;
Code	new Reporter ( location ) . declare ( location ) ;
Distance : 6

24
Tree	new Reporter ( location ) . toString ( location ) ;
Code	new Reporter ( location ) . toString ( location ) ;
Distance : 6

25
Tree	Mockito . getLanguageIn () . smartNullPointerException ( location ) ;
Code	Mockito . getLanguageIn () . smartNullPointerException ( location ) ;
Distance : 5

26
Tree	verifyingRecorder . getLanguageIn ( location , new Reporter () ) ;
Code	verifyingRecorder . getLanguageIn ( location , new Reporter () ) ;
Distance : 8

27
Tree	verify . getLanguageIn ( location , new Reporter ( location ) ) ;
Code	verify . getLanguageIn ( location , new Reporter ( location ) ) ;
Distance : 9

28
Tree	new Reporter ( location ) . insert ( location ) ;
Code	new Reporter ( location ) . insert ( location ) ;
Distance : 6

29
Tree	new Median () . smartNullPointerException ( location ) ;
Code	new Median () . smartNullPointerException ( location ) ;
Distance : 3

30
Tree	when ( location , options , options ) ;
Code	when ( location , options , options ) ;
Distance : 8

31
Tree	mode . getLanguageIn ( new Reporter () ) ;
Code	mode . getLanguageIn ( new Reporter () ) ;
Distance : 7

32
Tree	Mockito . getLanguageIn ( location , Reporter , new Reporter () ) ;
Code	Mockito . getLanguageIn ( location , Reporter , new Reporter () ) ;
Distance : 10

33
Tree	verify . getLanguageIn ( location , false ) ;
Code	verify . getLanguageIn ( location , false ) ;
Distance : 6

34
Tree	Mockito . getLanguageIn ( location , options , new Reporter () ) ;
Code	Mockito . getLanguageIn ( location , options , new Reporter () ) ;
Distance : 10

35
Tree	new Reporter () . toStringIsEqualTo ( location , Reporter ) ;
Code	new Reporter () . toStringIsEqualTo ( location , Reporter ) ;
Distance : 3

36
Tree	mode . getLanguageIn ( location , options , new Reporter () ) ;
Code	mode . getLanguageIn ( location , options , new Reporter () ) ;
Distance : 10

37
Tree	setFeatureSet ( location ) ;
Code	setFeatureSet ( location ) ;
Distance : 7

38
Tree	Mockito . getLanguageIn ( location , new Reporter () ) ;
Code	Mockito . getLanguageIn ( location , new Reporter () ) ;
Distance : 8

39
Tree	mode . getLanguageIn ( location , options ) ;
Code	mode . getLanguageIn ( location , options ) ;
Distance : 6

40
Tree	mode . getLanguageIn () . stubbedAt ( location ) ;
Code	mode . getLanguageIn () . stubbedAt ( location ) ;
Distance : 6

41
Tree	dayOfWeek . getLanguageIn ( location , new Reporter ( location ) ) ;
Code	dayOfWeek . getLanguageIn ( location , new Reporter ( location ) ) ;
Distance : 9

42
Tree	Mockito . getLanguageIn ( location , new Reporter ( location ) ) ;
Code	Mockito . getLanguageIn ( location , new Reporter ( location ) ) ;
Distance : 9

43
Tree	new Reporter () . smartNullPointerException ( location . getMocksToBeVerifiedInOrder () , location ) ;
Code	new Reporter () . smartNullPointerException ( location . getMocksToBeVerifiedInOrder () , location ) ;
Distance : 4

44
Tree	new Reporter () . testNotEs6TypedFullError ( location ) ;
Code	new Reporter () . testNotEs6TypedFullError ( location ) ;
Distance : 3

45
Tree	new Reporter () . smartNullPointerException ( location ) . getDeclaredType ( location ) ;
Code	new Reporter () . smartNullPointerException ( location ) . getDeclaredType ( location ) ;
Distance : 5

46
Tree	mode . getIndex ( location , new Reporter ( location ) ) ;
Code	mode . getIndex ( location , new Reporter ( location ) ) ;
Distance : 9

47
Tree	MissingInvocationVerifier ( location ) ;
Code	MissingInvocationVerifier ( location ) ;
Distance : 7

48
Tree	verify . getLanguageIn () ;
Code	verify . getLanguageIn () ;
Distance : 9

49
Tree	getIndex ( location ) ;
Code	getIndex ( location ) ;
Distance : 7

50
Tree	analyzer . getLanguageIn ( location , new Reporter () ) ;
Code	analyzer . getLanguageIn ( location , new Reporter () ) ;
Distance : 8

51
Tree	never ( location ) ;
Code	never ( location ) ;
Distance : 7

52
Tree	new Reporter () . insert ( location ) ;
Code	new Reporter () . insert ( location ) ;
Distance : 3

53
Tree	mode . getIndex ( location ) ;
Code	mode . getIndex ( location ) ;
Distance : 6

54
Tree	new Reporter () . toStringIsEqualTo ( location ) ;
Code	new Reporter () . toStringIsEqualTo ( location ) ;
Distance : 3

55
Tree	Mockito . getLanguageIn ( false ) ;
Code	Mockito . getLanguageIn ( false ) ;
Distance : 7

56
Tree	mode . getLanguageIn ( location , Reporter , new Reporter () ) ;
Code	mode . getLanguageIn ( location , Reporter , new Reporter () ) ;
Distance : 10

57
Tree	pivot . getLanguageIn ( location , new Reporter ( location ) ) ;
Code	pivot . getLanguageIn ( location , new Reporter ( location ) ) ;
Distance : 9

58
Tree	when ( location , options ) ;
Code	when ( location , options ) ;
Distance : 7

59
Tree	new Reporter () . smartNullPointerException ( location . dayOfWeek () , location ) ;
Code	new Reporter () . smartNullPointerException ( location . dayOfWeek () , location ) ;
Distance : 4

60
Tree	Mockito . getLanguageIn () . smartNullPointerException ( location , options ) ;
Code	Mockito . getLanguageIn () . smartNullPointerException ( location , options ) ;
Distance : 5

61
Tree	pivot . getLanguageIn ( location ) ;
Code	pivot . getLanguageIn ( location ) ;
Distance : 6

62
Tree	verifyingRecorder . getLanguageIn ( false ) ;
Code	verifyingRecorder . getLanguageIn ( false ) ;
Distance : 7

63
Tree	new Reporter () . smartNullPointerException ( location . getSimpleName () , location ) ;
Code	new Reporter () . smartNullPointerException ( location . getSimpleName () , location ) ;
Distance : 4

64
Tree	verify . getLanguageIn ( location ) . toStringIsEqualTo ( location ) ;
Code	verify . getLanguageIn ( location ) . toStringIsEqualTo ( location ) ;
Distance : 9

65
Tree	verify . getLanguageIn ( location ) ;
Code	verify . getLanguageIn ( location ) ;
Distance : 6

66
Tree	Mockito . getLanguageIn ( new Reporter () ) ;
Code	Mockito . getLanguageIn ( new Reporter () ) ;
Distance : 7

67
Tree	foo ( location , options ) ;
Code	foo ( location , options ) ;
Distance : 7

68
Tree	new Median () . smartNullPointerException () ;
Code	new Median () . smartNullPointerException () ;
Distance : 6

69
Tree	new Reporter () . insert ( location , Reporter ) ;
Code	new Reporter () . insert ( location , Reporter ) ;
Distance : 3

70
Tree	verifyingRecorder . getLanguageIn ( location ) ;
Code	verifyingRecorder . getLanguageIn ( location ) ;
Distance : 6

71
Tree	new Reporter ( location ) . applySingletonGetter ( location ) ;
Code	new Reporter ( location ) . applySingletonGetter ( location ) ;
Distance : 6

72
Tree	new Reporter ( location ) . getEnumeratedTypeOfEnumElement ( location ) ;
Code	new Reporter ( location ) . getEnumeratedTypeOfEnumElement ( location ) ;
Distance : 6

73
Tree	Mockito . getLanguageIn ( location , options ) ;
Code	Mockito . getLanguageIn ( location , options ) ;
Distance : 6

74
Tree	when ( location ) ;
Code	when ( location ) ;
Distance : 7

75
Tree	verify . getLanguageIn () . smartNullPointerException ( location ) ;
Code	verify . getLanguageIn () . smartNullPointerException ( location ) ;
Distance : 5

76
Tree	verifyingRecorder . getLanguageIn () . smartNullPointerException ( location ) ;
Code	verifyingRecorder . getLanguageIn () . smartNullPointerException ( location ) ;
Distance : 5

77
Tree	never ( location , options ) ;
Code	never ( location , options ) ;
Distance : 7

78
Tree	analyzer . getLanguageIn ( location ) ;
Code	analyzer . getLanguageIn ( location ) ;
Distance : 6

79
Tree	new Reporter () . smartNullPointerException ( location ) . withZoneUTC ( location ) ;
Code	new Reporter () . smartNullPointerException ( location ) . withZoneUTC ( location ) ;
Distance : 5

80
Tree	mode . getLanguageIn () . get ( location ) ;
Code	mode . getLanguageIn () . get ( location ) ;
Distance : 6

81
Tree	new Reporter () . applySingletonGetter () ;
Code	new Reporter () . applySingletonGetter () ;
Distance : 6

82
Tree	new Reporter () . smartNullPointerException ( location ) . toStringIsEqualTo ( location ) ;
Code	new Reporter () . smartNullPointerException ( location ) . toStringIsEqualTo ( location ) ;
Distance : 5

83
Tree	mode . getLanguageIn ( location , false ) ;
Code	mode . getLanguageIn ( location , false ) ;
Distance : 6

84
Tree	pivot . getLanguageIn ( location , new Reporter () ) ;
Code	pivot . getLanguageIn ( location , new Reporter () ) ;
Distance : 8

85
Tree	verify () . smartNullPointerException ( location ) ;
Code	verify () . smartNullPointerException ( location ) ;
Distance : 4

86
Tree	pivot . getLanguageIn ( false ) ;
Code	pivot . getLanguageIn ( false ) ;
Distance : 7

87
Tree	new Median () . smartNullPointerException ( location , Reporter ) ;
Code	new Median () . smartNullPointerException ( location , Reporter ) ;
Distance : 3

88
Tree	Mockito . getLanguageIn ( location , false ) ;
Code	Mockito . getLanguageIn ( location , false ) ;
Distance : 6

89
Tree	verify . getLanguageIn () . smartNullPointerException ( location , options ) ;
Code	verify . getLanguageIn () . smartNullPointerException ( location , options ) ;
Distance : 5

90
Tree	new Reporter () . getExportPostfix ( location ) ;
Code	new Reporter () . getExportPostfix ( location ) ;
Distance : 3

91
Tree	foo ( location , Reporter ) ;
Code	foo ( location , Reporter ) ;
Distance : 7

92
Tree	foo ( location ) ;
Code	foo ( location ) ;
Distance : 7

93
Tree	verifyingRecorder . getLanguageIn ( location , new Reporter ( location ) ) ;
Code	verifyingRecorder . getLanguageIn ( location , new Reporter ( location ) ) ;
Distance : 9

94
Tree	new Reporter () . testNotEs6TypedFullError () ;
Code	new Reporter () . testNotEs6TypedFullError () ;
Distance : 6

95
Tree	Mockito . getLanguageIn ( location ) ;
Code	Mockito . getLanguageIn ( location ) ;
Distance : 6

96
Tree	dayOfWeek . getLanguageIn () . smartNullPointerException ( location , options ) ;
Code	dayOfWeek . getLanguageIn () . smartNullPointerException ( location , options ) ;
Distance : 5

97
Tree	verify . getLanguageIn ( location , new Reporter () ) ;
Code	verify . getLanguageIn ( location , new Reporter () ) ;
Distance : 8

98
Tree	mode . getIndex ( location , new Reporter () ) ;
Code	mode . getIndex ( location , new Reporter () ) ;
Distance : 8

99
Tree	when ( location ) . toStringIsEqualTo ( location ) ;
Code	when ( location ) . toStringIsEqualTo ( location ) ;
Distance : 7

100
Tree	sortSuperTypesLast ( location ) . toStringIsEqualTo ( location ) ;
Code	sortSuperTypesLast ( location ) . toStringIsEqualTo ( location ) ;
Distance : 7

101
Tree	analyzer . getLanguageIn ( false ) ;
Code	analyzer . getLanguageIn ( false ) ;
Distance : 7

102
Tree	verifyingRecorder . getLanguageIn ( location , false ) ;
Code	verifyingRecorder . getLanguageIn ( location , false ) ;
Distance : 6

103
Tree	getLanguageIn () ;
Code	getLanguageIn () ;
Distance : 9

104
Tree	setFeatureSet ( location ) . toStringIsEqualTo ( location ) ;
Code	setFeatureSet ( location ) . toStringIsEqualTo ( location ) ;
Distance : 7

105
Tree	mode . getLanguageIn ( location , Reporter ) ;
Code	mode . getLanguageIn ( location , Reporter ) ;
Distance : 6

106
Tree	verifyingRecorder () . smartNullPointerException ( location ) ;
Code	verifyingRecorder () . smartNullPointerException ( location ) ;
Distance : 4

107
Tree	verify . getLanguageIn ( false ) ;
Code	verify . getLanguageIn ( false ) ;
Distance : 7

108
Tree	new Reporter () . toStringIsEqualTo () ;
Code	new Reporter () . toStringIsEqualTo () ;
Distance : 6

109
Tree	verify . getLanguageIn ( location , options , new Reporter () ) ;
Code	verify . getLanguageIn ( location , options , new Reporter () ) ;
Distance : 10

110
Tree	Mockito . getLanguageIn () . get ( location ) ;
Code	Mockito . getLanguageIn () . get ( location ) ;
Distance : 6

111
Tree	dayOfWeek () . smartNullPointerException ( location ) ;
Code	dayOfWeek () . smartNullPointerException ( location ) ;
Distance : 4

112
Tree	new Reporter ( location ) . toStringIsEqualTo ( location ) ;
Code	new Reporter ( location ) . toStringIsEqualTo ( location ) ;
Distance : 6

113
Tree	new Reporter () . smartNullPointerException ( location ) . insert ( location ) ;
Code	new Reporter () . smartNullPointerException ( location ) . insert ( location ) ;
Distance : 5

114
Tree	Mockito . getLanguageIn ( location , Reporter ) ;
Code	Mockito . getLanguageIn ( location , Reporter ) ;
Distance : 6

115
Tree	sortSuperTypesLast ( location , options , options ) ;
Code	sortSuperTypesLast ( location , options , options ) ;
Distance : 8

116
Tree	mode . getIndex ( false ) ;
Code	mode . getIndex ( false ) ;
Distance : 7

117
Tree	dayOfWeek . getLanguageIn ( location , options ) ;
Code	dayOfWeek . getLanguageIn ( location , options ) ;
Distance : 6

118
Tree	getLanguageIn ( location , options ) ;
Code	getLanguageIn ( location , options ) ;
Distance : 7

119
Tree	MissingInvocationVerifier ( location ) . toStringIsEqualTo ( location ) ;
Code	MissingInvocationVerifier ( location ) . toStringIsEqualTo ( location ) ;
Distance : 7

120
Tree	analyzer . getLanguageIn ( location , new Reporter ( location ) ) ;
Code	analyzer . getLanguageIn ( location , new Reporter ( location ) ) ;
Distance : 9

121
Tree	new Reporter () . smartNullPointerException ( location ) . toString ( location ) ;
Code	new Reporter () . smartNullPointerException ( location ) . toString ( location ) ;
Distance : 5

122
Tree	getLanguageIn ( location ) ;
Code	getLanguageIn ( location ) ;
Distance : 7

123
Tree	setFeatureSet () ;
Code	setFeatureSet () ;
Distance : 9

124
Tree	never ( location ) . toStringIsEqualTo ( location ) ;
Code	never ( location ) . toStringIsEqualTo ( location ) ;
Distance : 7

125
Tree	when () ;
Code	when () ;
Distance : 9

126
Tree	dayOfWeek . getLanguageIn () . smartNullPointerException ( location ) ;
Code	dayOfWeek . getLanguageIn () . smartNullPointerException ( location ) ;
Distance : 5

127
Tree	MissingInvocationVerifier () ;
Code	MissingInvocationVerifier () ;
Distance : 9

128
Tree	mode . getLanguageIn ( false ) ;
Code	mode . getLanguageIn ( false ) ;
Distance : 7

129
Tree	foo ( location , Reporter , options ) ;
Code	foo ( location , Reporter , options ) ;
Distance : 8

130
Tree	verifyingRecorder . getLanguageIn () ;
Code	verifyingRecorder . getLanguageIn () ;
Distance : 9

131
Tree	dayOfWeek . getLanguageIn ( false ) ;
Code	dayOfWeek . getLanguageIn ( false ) ;
Distance : 7

132
Tree	mode . getLanguageIn () . smartNullPointerException ( location , options ) ;
Code	mode . getLanguageIn () . smartNullPointerException ( location , options ) ;
Distance : 5

133
Tree	new Reporter () . applySingletonGetter ( location ) . getDeclaredType ( location ) ;
Code	new Reporter () . applySingletonGetter ( location ) . getDeclaredType ( location ) ;
Distance : 6

134
Tree	new Reporter () . insert () ;
Code	new Reporter () . insert () ;
Distance : 6

135
Tree	mode . getLanguageIn () . smartNullPointerException ( location , Reporter ) ;
Code	mode . getLanguageIn () . smartNullPointerException ( location , Reporter ) ;
Distance : 5

136
Tree	getLanguageIn ( new Reporter () ) ;
Code	getLanguageIn ( new Reporter () ) ;
Distance : 8

137
Tree	foo ( location ) . toStringIsEqualTo ( location ) ;
Code	foo ( location ) . toStringIsEqualTo ( location ) ;
Distance : 7

138
Tree	Mockito . getLanguageIn () . smartNullPointerException ( location , Reporter ) ;
Code	Mockito . getLanguageIn () . smartNullPointerException ( location , Reporter ) ;
Distance : 5

139
Tree	sortSuperTypesLast ( location ) ;
Code	sortSuperTypesLast ( location ) ;
Distance : 7

140
Tree	analyzer . getLanguageIn () ;
Code	analyzer . getLanguageIn () ;
Distance : 9

141
Tree	dayOfWeek . getLanguageIn ( location , false ) ;
Code	dayOfWeek . getLanguageIn ( location , false ) ;
Distance : 6

142
Tree	new Reporter () . smartNullPointerException ( location . getInput () , location ) ;
Code	new Reporter () . smartNullPointerException ( location . getInput () , location ) ;
Distance : 4

143
Tree	verify . getLanguageIn ( location , Reporter , new Reporter () ) ;
Code	verify . getLanguageIn ( location , Reporter , new Reporter () ) ;
Distance : 10

144
Tree	setFeatureSet ( location , options ) ;
Code	setFeatureSet ( location , options ) ;
Distance : 7

145
Tree	getIndex ( location ) . toStringIsEqualTo ( location ) ;
Code	getIndex ( location ) . toStringIsEqualTo ( location ) ;
Distance : 7

146
Tree	new Reporter () . smartNullPointerException ( location . yearOfCentury () , location ) ;
Code	new Reporter () . smartNullPointerException ( location . yearOfCentury () , location ) ;
Distance : 4

147
Tree	new Reporter () . getExportPostfix () ;
Code	new Reporter () . getExportPostfix () ;
Distance : 6

148
Tree	new Reporter () . smartNullPointerException ( location . getLanguageIn () , location ) ;
Code	new Reporter () . smartNullPointerException ( location . getLanguageIn () , location ) ;
Distance : 4

149
Tree	setFeatureSet ( new Reporter () ) ;
Code	setFeatureSet ( new Reporter () ) ;
Distance : 8

150
Tree	MissingInvocationVerifier ( new Reporter () ) ;
Code	MissingInvocationVerifier ( new Reporter () ) ;
Distance : 8

151
Tree	new Reporter () . testNotEs6TypedFullError ( location , Reporter ) ;
Code	new Reporter () . testNotEs6TypedFullError ( location , Reporter ) ;
Distance : 3

152
Tree	never ( new Reporter () ) ;
Code	never ( new Reporter () ) ;
Distance : 8

153
Tree	analyzer () . smartNullPointerException ( location ) ;
Code	analyzer () . smartNullPointerException ( location ) ;
Distance : 4

154
Tree	Mockito () . smartNullPointerException ( location ) ;
Code	Mockito () . smartNullPointerException ( location ) ;
Distance : 4

155
Tree	new Reporter () . getExportPostfix ( location , Reporter ) ;
Code	new Reporter () . getExportPostfix ( location , Reporter ) ;
Distance : 3

156
Tree	verifyingRecorder . getLanguageIn ( location ) . toStringIsEqualTo ( location ) ;
Code	verifyingRecorder . getLanguageIn ( location ) . toStringIsEqualTo ( location ) ;
Distance : 9

157
Tree	MissingInvocationVerifier ( location , options ) ;
Code	MissingInvocationVerifier ( location , options ) ;
Distance : 7

158
Tree	new Reporter () . printInvocations () ;
Code	new Reporter () . printInvocations () ;
Distance : 6

159
Tree	verifyingRecorder . getLanguageIn ( new Reporter () ) ;
Code	verifyingRecorder . getLanguageIn ( new Reporter () ) ;
Distance : 7

160
Tree	verify . getLanguageIn ( new Reporter () ) ;
Code	verify . getLanguageIn ( new Reporter () ) ;
Distance : 7

161
Tree	sortSuperTypesLast () ;
Code	sortSuperTypesLast () ;
Distance : 9

162
Tree	analyzer . getLanguageIn ( location , false ) ;
Code	analyzer . getLanguageIn ( location , false ) ;
Distance : 6

163
Tree	Mockito . getLanguageIn ( location ) . toStringIsEqualTo ( location ) ;
Code	Mockito . getLanguageIn ( location ) . toStringIsEqualTo ( location ) ;
Distance : 9

164
Tree	when ( new Reporter () ) ;
Code	when ( new Reporter () ) ;
Distance : 8

165
Tree	never () ;
Code	never () ;
Distance : 9

166
Tree	getLanguageIn ( location , options , options ) ;
Code	getLanguageIn ( location , options , options ) ;
Distance : 8

167
Tree	dayOfWeek . getLanguageIn ( new Reporter () ) ;
Code	dayOfWeek . getLanguageIn ( new Reporter () ) ;
Distance : 7

168
Tree	mode . getIndex () ;
Code	mode . getIndex () ;
Distance : 9

169
Tree	pivot . getLanguageIn () ;
Code	pivot . getLanguageIn () ;
Distance : 9

170
Tree	verify . getLanguageIn ( location , Reporter ) ;
Code	verify . getLanguageIn ( location , Reporter ) ;
Distance : 6

171
Tree	pivot () . smartNullPointerException ( location ) ;
Code	pivot () . smartNullPointerException ( location ) ;
Distance : 4

172
Tree	mode () . smartNullPointerException ( location ) ;
Code	mode () . smartNullPointerException ( location ) ;
Distance : 4

173
Tree	pivot . getLanguageIn ( location , false ) ;
Code	pivot . getLanguageIn ( location , false ) ;
Distance : 6

174
Tree	when ( location , Reporter ) ;
Code	when ( location , Reporter ) ;
Distance : 7

175
Tree	new Reporter () . smartNullPointerException ( location . getMethod () , location ) ;
Code	new Reporter () . smartNullPointerException ( location . getMethod () , location ) ;
Distance : 4

176
Tree	verifyingRecorder . getLanguageIn () . smartNullPointerException ( location , options ) ;
Code	verifyingRecorder . getLanguageIn () . smartNullPointerException ( location , options ) ;
Distance : 5

177
Tree	mode . getLanguageIn ( location ) . toStringIsEqualTo ( location ) ;
Code	mode . getLanguageIn ( location ) . toStringIsEqualTo ( location ) ;
Distance : 9

178
Tree	verifyingRecorder . getLanguageIn ( location , options , new Reporter () ) ;
Code	verifyingRecorder . getLanguageIn ( location , options , new Reporter () ) ;
Distance : 10

179
Tree	dayOfWeek . getLanguageIn ( location ) . toStringIsEqualTo ( location ) ;
Code	dayOfWeek . getLanguageIn ( location ) . toStringIsEqualTo ( location ) ;
Distance : 9

180
Tree	verifyingRecorder . getLanguageIn ( location , options ) ;
Code	verifyingRecorder . getLanguageIn ( location , options ) ;
Distance : 6

181
Tree	verify . getLanguageIn () . smartNullPointerException ( location , Reporter ) ;
Code	verify . getLanguageIn () . smartNullPointerException ( location , Reporter ) ;
Distance : 5

182
Tree	getLanguageIn ( location ) . toStringIsEqualTo ( location ) ;
Code	getLanguageIn ( location ) . toStringIsEqualTo ( location ) ;
Distance : 7

183
Tree	new Reporter () . printInvocations ( location ) ;
Code	new Reporter () . printInvocations ( location ) ;
Distance : 3

184
Tree	dayOfWeek . getLanguageIn () ;
Code	dayOfWeek . getLanguageIn () ;
Distance : 9

185
Tree	foo ( new Reporter () ) ;
Code	foo ( new Reporter () ) ;
Distance : 8

186
Tree	getIndex () ;
Code	getIndex () ;
Distance : 9

187
Tree	foo () ;
Code	foo () ;
Distance : 9

188
Tree	sortSuperTypesLast ( new Reporter () ) ;
Code	sortSuperTypesLast ( new Reporter () ) ;
Distance : 8

189
Tree	mode . getIndex ( location , false ) ;
Code	mode . getIndex ( location , false ) ;
Distance : 6

190
Tree	dayOfWeek . getLanguageIn ( location , options , new Reporter () ) ;
Code	dayOfWeek . getLanguageIn ( location , options , new Reporter () ) ;
Distance : 10

191
Tree	verify . getLanguageIn ( location , options ) ;
Code	verify . getLanguageIn ( location , options ) ;
Distance : 6

192
Tree	actualCount () . smartNullPointerException ( location ) ;
Code	actualCount () . smartNullPointerException ( location ) ;
Distance : 4

193
Tree	analyzer . getLanguageIn ( new Reporter () ) ;
Code	analyzer . getLanguageIn ( new Reporter () ) ;
Distance : 7

194
Tree	getIndex ( new Reporter () ) ;
Code	getIndex ( new Reporter () ) ;
Distance : 8

195
Tree	pivot . getLanguageIn ( new Reporter () ) ;
Code	pivot . getLanguageIn ( new Reporter () ) ;
Distance : 7

196
Tree	mode . getIndex ( new Reporter () ) ;
Code	mode . getIndex ( new Reporter () ) ;
Distance : 7

197
Tree	analyzer . getLanguageIn ( location ) . toStringIsEqualTo ( location ) ;
Code	analyzer . getLanguageIn ( location ) . toStringIsEqualTo ( location ) ;
Distance : 9

198
Tree	pivot . getLanguageIn ( location ) . toStringIsEqualTo ( location ) ;
Code	pivot . getLanguageIn ( location ) . toStringIsEqualTo ( location ) ;
Distance : 9

199
Tree	mode . getLanguageIn ( location ) . toString ( location ) ;
Code	mode . getLanguageIn ( location ) . toString ( location ) ;
Distance : 9

========================================================================


========================================================================
Example Number: 80
Parent Code is: 
return getMock ( invocation ) ;
-------------------------------------------------------------------------------
Child code is: 
return getMock ( invocation , returnTypeGenericMetadata ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=getMock}) (214{val=(}) (800{val=invocation}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=getMock}) (214{val=(}) (800{val=invocation}) (234{val=,}) (800{val=returnTypeGenericMetadata}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/25/parent/src_org_mockito_internal_stubbing_defaultanswers_ReturnsDeepStubs.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return getBinaryModuleNamespace ( invocation ) ;
Code	return getBinaryModuleNamespace ( invocation ) ;
Distance : 3

1
Tree	return arz . getCommonTypes ( invocation ) ;
Code	return arz . getCommonTypes ( invocation ) ;
Distance : 5

2
Tree	return ft + NUMBER_CONSTANT ;
Code	return ft + NUMBER_CONSTANT ;
Distance : 6

3
Tree	return this . commonTypes ;
Code	return this . commonTypes ;
Distance : 6

4
Tree	return invalidatingTypes . getSlot ( invocation ) ;
Code	return invalidatingTypes . getSlot ( invocation ) ;
Distance : 5

5
Tree	return arz . anovaPValue ( invocation ) ;
Code	return arz . anovaPValue ( invocation ) ;
Distance : 5

6
Tree	return settings . getSlot ( invocation ) ;
Code	return settings . getSlot ( invocation ) ;
Distance : 5

7
Tree	return commonTypes + NUMBER_CONSTANT ;
Code	return commonTypes + NUMBER_CONSTANT ;
Distance : 6

8
Tree	return upperBound ;
Code	return upperBound ;
Distance : 6

9
Tree	return this . commonTypes . createsScope () ;
Code	return this . commonTypes . createsScope () ;
Distance : 6

10
Tree	return arz + this . commonTypes . getEmptyObjectLiteral ( invocation , that.data ) ;
Code	return arz + this . commonTypes . getEmptyObjectLiteral ( invocation , that.data ) ;
Distance : 8

11
Tree	return arz + this . commonTypes . getSlot ( Locale.US , invocation , invocation ) ;
Code	return arz + this . commonTypes . getSlot ( Locale.US , invocation , invocation ) ;
Distance : 10

12
Tree	return arz + createsScope ( invocation ) ;
Code	return arz + createsScope ( invocation ) ;
Distance : 5

13
Tree	return arz + reflectionCompare ( Locale.US , this . invocation ) ;
Code	return arz + reflectionCompare ( Locale.US , this . invocation ) ;
Distance : 7

14
Tree	return getSlot ( invocation ) . createsScope () ;
Code	return getSlot ( invocation ) . createsScope () ;
Distance : 5

15
Tree	return bp != bindComponents.thisValue ;
Code	return bp != bindComponents.thisValue ;
Distance : 6

16
Tree	return arz + getTopObject ( invocation ) ;
Code	return arz + getTopObject ( invocation ) ;
Distance : 5

17
Tree	return arz + bindComponents.thisValue . getCommonTypes ( invocation ) ;
Code	return arz + bindComponents.thisValue . getCommonTypes ( invocation ) ;
Distance : 7

18
Tree	return isSubtypeOf ( invocation ) . that () ;
Code	return isSubtypeOf ( invocation ) . that () ;
Distance : 5

19
Tree	return invalidatingTypes + this . commonTypes . getEmptyObjectLiteral ( invocation , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	return invalidatingTypes + this . commonTypes . getEmptyObjectLiteral ( invocation , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 8

20
Tree	return arz + this . commonTypes . getEmptyObjectLiteral ( CHAR_CONS , CHAR_CONS ) ;
Code	return arz + this . commonTypes . getEmptyObjectLiteral ( CHAR_CONS , CHAR_CONS ) ;
Distance : 9

21
Tree	return getCommonTypes ( invocation ) ;
Code	return getCommonTypes ( invocation ) ;
Distance : 3

22
Tree	return arz ;
Code	return arz ;
Distance : 6

23
Tree	return arz + this . commonTypes . getSlot ( CHAR_CONS , CHAR_CONS ) ;
Code	return arz + this . commonTypes . getSlot ( CHAR_CONS , CHAR_CONS ) ;
Distance : 9

24
Tree	return this . commonTypes . isSubtype ( CHAR_CONS , CHAR_CONS ) ;
Code	return this . commonTypes . isSubtype ( CHAR_CONS , CHAR_CONS ) ;
Distance : 7

25
Tree	return ft . getSlot ( invocation ) ;
Code	return ft . getSlot ( invocation ) ;
Distance : 5

26
Tree	return this . commonTypes . getEmptyObjectLiteral () ;
Code	return this . commonTypes . getEmptyObjectLiteral () ;
Distance : 6

27
Tree	return invalidatingTypes + this . commonTypes . getEmptyObjectLiteral ( CHAR_CONS , CHAR_CONS ) ;
Code	return invalidatingTypes + this . commonTypes . getEmptyObjectLiteral ( CHAR_CONS , CHAR_CONS ) ;
Distance : 9

28
Tree	return anovaPValue ( invocation ) . that () ;
Code	return anovaPValue ( invocation ) . that () ;
Distance : 5

29
Tree	return arz . anovaPValue ( this , invocation ) ;
Code	return arz . anovaPValue ( this , invocation ) ;
Distance : 5

30
Tree	return arz . getEmptyObjectLiteral () ;
Code	return arz . getEmptyObjectLiteral () ;
Distance : 6

31
Tree	return settings . getSlot ( this , invocation ) ;
Code	return settings . getSlot ( this , invocation ) ;
Distance : 5

32
Tree	return arz + invocation . getCommonTypes ( invocation , NUMBER_CONSTANT , invocation . getSlot () ) ;
Code	return arz + invocation . getCommonTypes ( invocation , NUMBER_CONSTANT , invocation . getSlot () ) ;
Distance : 11

33
Tree	return arz . reflectionCompare ( invocation ) ;
Code	return arz . reflectionCompare ( invocation ) ;
Distance : 5

34
Tree	return getSlot ( invocation ) ;
Code	return getSlot ( invocation ) ;
Distance : 3

35
Tree	return getSlot ( invocation , invocation ) ;
Code	return getSlot ( invocation , invocation ) ;
Distance : 2

36
Tree	return invalidatingTypes ;
Code	return invalidatingTypes ;
Distance : 6

37
Tree	return settings + this . commonTypes . getEmptyObjectLiteral ( CHAR_CONS , CHAR_CONS ) ;
Code	return settings + this . commonTypes . getEmptyObjectLiteral ( CHAR_CONS , CHAR_CONS ) ;
Distance : 9

38
Tree	return invalidatingTypes < < NUMBER_CONSTANT ;
Code	return invalidatingTypes < < NUMBER_CONSTANT ;
Distance : 6

39
Tree	return invalidatingTypes + invocation . getSlot ( invocation , NUMBER_CONSTANT , invocation . getSlot () ) ;
Code	return invalidatingTypes + invocation . getSlot ( invocation , NUMBER_CONSTANT , invocation . getSlot () ) ;
Distance : 11

40
Tree	return reflectionCompare ( invocation ) ;
Code	return reflectionCompare ( invocation ) ;
Distance : 3

41
Tree	return arz . reflectionCompare ( this , invocation ) ;
Code	return arz . reflectionCompare ( this , invocation ) ;
Distance : 5

42
Tree	return ft != bindComponents.thisValue ;
Code	return ft != bindComponents.thisValue ;
Distance : 6

43
Tree	return arz + NUMBER_CONSTANT ;
Code	return arz + NUMBER_CONSTANT ;
Distance : 6

44
Tree	return arz + getSlot ( JavaVersion.JAVA_1_5 , this . invocation ) ;
Code	return arz + getSlot ( JavaVersion.JAVA_1_5 , this . invocation ) ;
Distance : 7

45
Tree	return arz + reflectionCompare ( JavaVersion.JAVA_1_5 , this . invocation ) ;
Code	return arz + reflectionCompare ( JavaVersion.JAVA_1_5 , this . invocation ) ;
Distance : 7

46
Tree	return getSlot ( invocation ) . that () ;
Code	return getSlot ( invocation ) . that () ;
Distance : 5

47
Tree	return isSubtypeOf ( invocation ) ;
Code	return isSubtypeOf ( invocation ) ;
Distance : 3

48
Tree	return arz < < NUMBER_CONSTANT ;
Code	return arz < < NUMBER_CONSTANT ;
Distance : 6

49
Tree	return arz + invocation . getSlot ( invocation , NUMBER_CONSTANT , invocation . createsScope () ) ;
Code	return arz + invocation . getSlot ( invocation , NUMBER_CONSTANT , invocation . createsScope () ) ;
Distance : 11

50
Tree	return commonTypes != bindComponents.thisValue ;
Code	return commonTypes != bindComponents.thisValue ;
Distance : 6

51
Tree	return arz + getSlot ( Locale.US , this . invocation ) ;
Code	return arz + getSlot ( Locale.US , this . invocation ) ;
Distance : 7

52
Tree	return arz + invocation . getSlot ( invocation , NUMBER_CONSTANT , invocation . getSlot () ) ;
Code	return arz + invocation . getSlot ( invocation , NUMBER_CONSTANT , invocation . getSlot () ) ;
Distance : 11

53
Tree	return arz != bindComponents.thisValue ;
Code	return arz != bindComponents.thisValue ;
Distance : 6

54
Tree	return arz + this . commonTypes . isSubtype ( CHAR_CONS , CHAR_CONS ) ;
Code	return arz + this . commonTypes . isSubtype ( CHAR_CONS , CHAR_CONS ) ;
Distance : 9

55
Tree	return NUMBER_CONSTANT / BooleanLiteralSet.EMPTY ;
Code	return NUMBER_CONSTANT / BooleanLiteralSet.EMPTY ;
Distance : 6

56
Tree	return arz . getSlot ( invocation ) ;
Code	return arz . getSlot ( invocation ) ;
Distance : 5

57
Tree	return arz . getEmptyObjectLiteral ( this , invocation ) ;
Code	return arz . getEmptyObjectLiteral ( this , invocation ) ;
Distance : 5

58
Tree	return ft ;
Code	return ft ;
Distance : 6

59
Tree	return arz + this . commonTypes . getEmptyObjectLiteral ( invocation , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	return arz + this . commonTypes . getEmptyObjectLiteral ( invocation , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 8

60
Tree	return getBinaryModuleNamespace ( invocation ) . that () ;
Code	return getBinaryModuleNamespace ( invocation ) . that () ;
Distance : 5

61
Tree	return invalidatingTypes != bindComponents.thisValue ;
Code	return invalidatingTypes != bindComponents.thisValue ;
Distance : 6

62
Tree	return NUMBER_CONSTANT / bindComponents.thisValue ;
Code	return NUMBER_CONSTANT / bindComponents.thisValue ;
Distance : 6

63
Tree	return bp + NUMBER_CONSTANT ;
Code	return bp + NUMBER_CONSTANT ;
Distance : 6

64
Tree	return arz + getSlot ( JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE , this . invocation ) ;
Code	return arz + getSlot ( JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE , this . invocation ) ;
Distance : 7

65
Tree	return getSlot () ;
Code	return getSlot () ;
Distance : 6

66
Tree	return invalidatingTypes + NUMBER_CONSTANT ;
Code	return invalidatingTypes + NUMBER_CONSTANT ;
Distance : 6

67
Tree	return NUMBER_CONSTANT / PureFunctionIdentifier.Driver ;
Code	return NUMBER_CONSTANT / PureFunctionIdentifier.Driver ;
Distance : 6

68
Tree	return NUMBER_CONSTANT / that.cache.functionScope ;
Code	return NUMBER_CONSTANT / that.cache.functionScope ;
Distance : 6

69
Tree	return ft < < NUMBER_CONSTANT ;
Code	return ft < < NUMBER_CONSTANT ;
Distance : 6

70
Tree	return reflectionCompare ( invocation ) . that () ;
Code	return reflectionCompare ( invocation ) . that () ;
Distance : 5

71
Tree	return arz + this . commonTypes . getEmptyObjectLiteral ( JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE , invocation , invocation ) ;
Code	return arz + this . commonTypes . getEmptyObjectLiteral ( JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE , invocation , invocation ) ;
Distance : 10

72
Tree	return invalidatingTypes . getSlot () ;
Code	return invalidatingTypes . getSlot () ;
Distance : 6

73
Tree	return settings + this . commonTypes . getEmptyObjectLiteral ( invocation , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	return settings + this . commonTypes . getEmptyObjectLiteral ( invocation , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 8

74
Tree	return arz . getSlot ( this , invocation ) ;
Code	return arz . getSlot ( this , invocation ) ;
Distance : 5

75
Tree	return invalidatingTypes + this . commonTypes . getSlot ( invocation , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	return invalidatingTypes + this . commonTypes . getSlot ( invocation , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 8

76
Tree	return getBinaryModuleNamespace ( invocation , invocation ) ;
Code	return getBinaryModuleNamespace ( invocation , invocation ) ;
Distance : 2

77
Tree	return NUMBER_CONSTANT / options.removeUnusedPrototypeProperties ;
Code	return NUMBER_CONSTANT / options.removeUnusedPrototypeProperties ;
Distance : 6

78
Tree	return this . commonTypes . getSlot ( CHAR_CONS , CHAR_CONS ) ;
Code	return this . commonTypes . getSlot ( CHAR_CONS , CHAR_CONS ) ;
Distance : 7

79
Tree	return arz + bindComponents.thisValue . getEmptyObjectLiteral ( invocation ) ;
Code	return arz + bindComponents.thisValue . getEmptyObjectLiteral ( invocation ) ;
Distance : 7

80
Tree	return settings + NUMBER_CONSTANT ;
Code	return settings + NUMBER_CONSTANT ;
Distance : 6

81
Tree	return arz + this . commonTypes . getEmptyObjectLiteral ( JavaVersion.JAVA_1_5 , invocation , invocation ) ;
Code	return arz + this . commonTypes . getEmptyObjectLiteral ( JavaVersion.JAVA_1_5 , invocation , invocation ) ;
Distance : 10

82
Tree	return this . commonTypes . isSubtype () ;
Code	return this . commonTypes . isSubtype () ;
Distance : 6

83
Tree	return arz . getSlot () ;
Code	return arz . getSlot () ;
Distance : 6

84
Tree	return commonTypes < < NUMBER_CONSTANT ;
Code	return commonTypes < < NUMBER_CONSTANT ;
Distance : 6

85
Tree	return arz + getCommonTypes ( invocation ) ;
Code	return arz + getCommonTypes ( invocation ) ;
Distance : 5

86
Tree	return arz + getSlot ( invocation ) ;
Code	return arz + getSlot ( invocation ) ;
Distance : 5

87
Tree	return settings ;
Code	return settings ;
Distance : 6

88
Tree	return arz + invocation . getEmptyObjectLiteral ( invocation , NUMBER_CONSTANT , invocation . getSlot () ) ;
Code	return arz + invocation . getEmptyObjectLiteral ( invocation , NUMBER_CONSTANT , invocation . getSlot () ) ;
Distance : 11

89
Tree	return arz + this . commonTypes . createsScope ( invocation , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	return arz + this . commonTypes . createsScope ( invocation , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 8

90
Tree	return arz + this . commonTypes . isSubtype ( JavaVersion.JAVA_1_5 , invocation , invocation ) ;
Code	return arz + this . commonTypes . isSubtype ( JavaVersion.JAVA_1_5 , invocation , invocation ) ;
Distance : 10

91
Tree	return arz + this . commonTypes . getSlot ( JavaVersion.JAVA_1_5 , invocation , invocation ) ;
Code	return arz + this . commonTypes . getSlot ( JavaVersion.JAVA_1_5 , invocation , invocation ) ;
Distance : 10

92
Tree	return arz + reflectionCompare ( invocation ) ;
Code	return arz + reflectionCompare ( invocation ) ;
Distance : 5

93
Tree	return arz != that.cache.functionScope ;
Code	return arz != that.cache.functionScope ;
Distance : 6

94
Tree	return arz + getSlot ( bindComponents.thisValue , this . invocation ) ;
Code	return arz + getSlot ( bindComponents.thisValue , this . invocation ) ;
Distance : 7

95
Tree	return ! reflectionCompare ( invocation ) ;
Code	return ! reflectionCompare ( invocation ) ;
Distance : 4

96
Tree	return anovaPValue ( invocation , invocation ) ;
Code	return anovaPValue ( invocation , invocation ) ;
Distance : 2

97
Tree	return invalidatingTypes + getSlot ( invocation ) ;
Code	return invalidatingTypes + getSlot ( invocation ) ;
Distance : 5

98
Tree	return superMethod + NUMBER_CONSTANT ;
Code	return superMethod + NUMBER_CONSTANT ;
Distance : 6

99
Tree	return this . commonTypes . createsScope ( CHAR_CONS , CHAR_CONS ) ;
Code	return this . commonTypes . createsScope ( CHAR_CONS , CHAR_CONS ) ;
Distance : 7

100
Tree	return arz . getCommonTypes ( this , invocation ) ;
Code	return arz . getCommonTypes ( this , invocation ) ;
Distance : 5

101
Tree	return isLValueRootedInGlobalScope ( invocation ) ;
Code	return isLValueRootedInGlobalScope ( invocation ) ;
Distance : 3

102
Tree	return arz + getSlot ( v.data , this . invocation ) ;
Code	return arz + getSlot ( v.data , this . invocation ) ;
Distance : 7

103
Tree	return this . currentScope ;
Code	return this . currentScope ;
Distance : 6

104
Tree	return arz . getEmptyObjectLiteral ( invocation ) ;
Code	return arz . getEmptyObjectLiteral ( invocation ) ;
Distance : 5

105
Tree	return settings != bindComponents.thisValue ;
Code	return settings != bindComponents.thisValue ;
Distance : 6

106
Tree	return arz + this . commonTypes . getSlot ( invocation , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	return arz + this . commonTypes . getSlot ( invocation , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 8

107
Tree	return ! anovaPValue ( invocation ) ;
Code	return ! anovaPValue ( invocation ) ;
Distance : 4

108
Tree	return reflectionCompare ( invocation , invocation ) ;
Code	return reflectionCompare ( invocation , invocation ) ;
Distance : 2

109
Tree	return arz + getSlot ( TernaryValue.UNKNOWN , this . invocation ) ;
Code	return arz + getSlot ( TernaryValue.UNKNOWN , this . invocation ) ;
Distance : 7

110
Tree	return getCommonTypes () ;
Code	return getCommonTypes () ;
Distance : 6

111
Tree	return getCommonTypes ( invocation ) . that () ;
Code	return getCommonTypes ( invocation ) . that () ;
Distance : 5

112
Tree	return superMethod < < NUMBER_CONSTANT ;
Code	return superMethod < < NUMBER_CONSTANT ;
Distance : 6

113
Tree	return proto < < NUMBER_CONSTANT ;
Code	return proto < < NUMBER_CONSTANT ;
Distance : 6

114
Tree	return settings < < NUMBER_CONSTANT ;
Code	return settings < < NUMBER_CONSTANT ;
Distance : 6

115
Tree	return anovaPValue ( invocation ) ;
Code	return anovaPValue ( invocation ) ;
Distance : 3

116
Tree	return arz . anovaPValue () ;
Code	return arz . anovaPValue () ;
Distance : 6

117
Tree	return arz + this . commonTypes . isSubtype ( invocation , PropAccess.INCLUDE_STRAY_PROPS ) ;
Code	return arz + this . commonTypes . isSubtype ( invocation , PropAccess.INCLUDE_STRAY_PROPS ) ;
Distance : 8

118
Tree	return this . commonTypes . getCommonTypes () ;
Code	return this . commonTypes . getCommonTypes () ;
Distance : 6

119
Tree	return settings + invocation . getSlot ( invocation , NUMBER_CONSTANT , invocation . getSlot () ) ;
Code	return settings + invocation . getSlot ( invocation , NUMBER_CONSTANT , invocation . getSlot () ) ;
Distance : 11

120
Tree	return ft . getSlot () ;
Code	return ft . getSlot () ;
Distance : 6

121
Tree	return settings + this . commonTypes . getEmptyObjectLiteral ( JavaVersion.JAVA_1_5 , invocation , invocation ) ;
Code	return settings + this . commonTypes . getEmptyObjectLiteral ( JavaVersion.JAVA_1_5 , invocation , invocation ) ;
Distance : 10

122
Tree	return arz + that.data . getSlot ( invocation ) ;
Code	return arz + that.data . getSlot ( invocation ) ;
Distance : 7

123
Tree	return invalidatingTypes + this . commonTypes . getSlot ( CHAR_CONS , CHAR_CONS ) ;
Code	return invalidatingTypes + this . commonTypes . getSlot ( CHAR_CONS , CHAR_CONS ) ;
Distance : 9

124
Tree	return arz + this . commonTypes . getEmptyObjectLiteral ( Locale.US , invocation , invocation ) ;
Code	return arz + this . commonTypes . getEmptyObjectLiteral ( Locale.US , invocation , invocation ) ;
Distance : 10

125
Tree	return arz + bindComponents.thisValue . createsScope ( invocation ) ;
Code	return arz + bindComponents.thisValue . createsScope ( invocation ) ;
Distance : 7

126
Tree	return isSubtypeOf ( invocation , invocation ) ;
Code	return isSubtypeOf ( invocation , invocation ) ;
Distance : 2

127
Tree	return getBinaryModuleNamespace () ;
Code	return getBinaryModuleNamespace () ;
Distance : 6

128
Tree	return ! getSlot ( invocation ) ;
Code	return ! getSlot ( invocation ) ;
Distance : 4

129
Tree	return arz + bindComponents.thisValue . getSlot ( invocation ) ;
Code	return arz + bindComponents.thisValue . getSlot ( invocation ) ;
Distance : 7

130
Tree	return getCommonTypes ( invocation , invocation ) ;
Code	return getCommonTypes ( invocation , invocation ) ;
Distance : 2

131
Tree	return reflectionCompare ( invocation ) . createsScope () ;
Code	return reflectionCompare ( invocation ) . createsScope () ;
Distance : 5

132
Tree	return arz . getCommonTypes () ;
Code	return arz . getCommonTypes () ;
Distance : 6

133
Tree	return this . commonTypes . getCommonTypes ( CHAR_CONS , CHAR_CONS ) ;
Code	return this . commonTypes . getCommonTypes ( CHAR_CONS , CHAR_CONS ) ;
Distance : 7

134
Tree	return arz . reflectionCompare () ;
Code	return arz . reflectionCompare () ;
Distance : 6

135
Tree	return arz + invocation . createsScope ( invocation , NUMBER_CONSTANT , invocation . getSlot () ) ;
Code	return arz + invocation . createsScope ( invocation , NUMBER_CONSTANT , invocation . getSlot () ) ;
Distance : 11

136
Tree	return bp ;
Code	return bp ;
Distance : 6

137
Tree	return ! getCommonTypes ( invocation ) ;
Code	return ! getCommonTypes ( invocation ) ;
Distance : 4

138
Tree	return this . commonTypes . reflectionCompare ( CHAR_CONS , CHAR_CONS ) ;
Code	return this . commonTypes . reflectionCompare ( CHAR_CONS , CHAR_CONS ) ;
Distance : 7

139
Tree	return settings + getSlot ( invocation ) ;
Code	return settings + getSlot ( invocation ) ;
Distance : 5

140
Tree	return ! createsScope ( invocation ) ;
Code	return ! createsScope ( invocation ) ;
Distance : 4

141
Tree	return bp < < NUMBER_CONSTANT ;
Code	return bp < < NUMBER_CONSTANT ;
Distance : 6

142
Tree	return getTopObject ( invocation ) ;
Code	return getTopObject ( invocation ) ;
Distance : 3

143
Tree	return isSubtypeOf () ;
Code	return isSubtypeOf () ;
Distance : 6

144
Tree	return arz + this . commonTypes . createsScope ( CHAR_CONS , CHAR_CONS ) ;
Code	return arz + this . commonTypes . createsScope ( CHAR_CONS , CHAR_CONS ) ;
Distance : 9

145
Tree	return superMethod ;
Code	return superMethod ;
Distance : 6

146
Tree	return this . commonTypes . getSlot () ;
Code	return this . commonTypes . getSlot () ;
Distance : 6

147
Tree	return invalidatingTypes . getSlot ( this , invocation ) ;
Code	return invalidatingTypes . getSlot ( this , invocation ) ;
Distance : 5

148
Tree	return ! getTopObject ( invocation ) ;
Code	return ! getTopObject ( invocation ) ;
Distance : 4

149
Tree	return NUMBER_CONSTANT / options.checksOnly ;
Code	return NUMBER_CONSTANT / options.checksOnly ;
Distance : 6

150
Tree	return this . commonTypes . getQualifiedName ( CHAR_CONS , CHAR_CONS ) ;
Code	return this . commonTypes . getQualifiedName ( CHAR_CONS , CHAR_CONS ) ;
Distance : 7

151
Tree	return arz + invocation . getSlot ( invocation , NUMBER_CONSTANT , invocation . getEmptyObjectLiteral () ) ;
Code	return arz + invocation . getSlot ( invocation , NUMBER_CONSTANT , invocation . getEmptyObjectLiteral () ) ;
Distance : 11

152
Tree	return arz != that.data ;
Code	return arz != that.data ;
Distance : 6

153
Tree	return this . commonTypes . getEmptyObjectLiteral ( CHAR_CONS , CHAR_CONS ) ;
Code	return this . commonTypes . getEmptyObjectLiteral ( CHAR_CONS , CHAR_CONS ) ;
Distance : 7

154
Tree	return reflectionCompare () ;
Code	return reflectionCompare () ;
Distance : 6

155
Tree	return this . commonTypes . getQualifiedName () ;
Code	return this . commonTypes . getQualifiedName () ;
Distance : 6

156
Tree	return upperBound + NUMBER_CONSTANT ;
Code	return upperBound + NUMBER_CONSTANT ;
Distance : 6

157
Tree	return NUMBER_CONSTANT / that.data ;
Code	return NUMBER_CONSTANT / that.data ;
Distance : 6

158
Tree	return settings + this . commonTypes . getSlot ( CHAR_CONS , CHAR_CONS ) ;
Code	return settings + this . commonTypes . getSlot ( CHAR_CONS , CHAR_CONS ) ;
Distance : 9

159
Tree	return anovaPValue () ;
Code	return anovaPValue () ;
Distance : 6

160
Tree	return isLValueRootedInGlobalScope ( invocation , invocation ) ;
Code	return isLValueRootedInGlobalScope ( invocation , invocation ) ;
Distance : 2

161
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ;
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + invocation ;
Distance : 6

162
Tree	return ! getBinaryModuleNamespace ( invocation ) ;
Code	return ! getBinaryModuleNamespace ( invocation ) ;
Distance : 4

163
Tree	return invalidatingTypes + this . commonTypes . getEmptyObjectLiteral ( JavaVersion.JAVA_1_5 , invocation , invocation ) ;
Code	return invalidatingTypes + this . commonTypes . getEmptyObjectLiteral ( JavaVersion.JAVA_1_5 , invocation , invocation ) ;
Distance : 10

164
Tree	return settings . getSlot () ;
Code	return settings . getSlot () ;
Distance : 6

165
Tree	return ! isSubtypeOf ( invocation ) ;
Code	return ! isSubtypeOf ( invocation ) ;
Distance : 4

166
Tree	return isLValueRootedInGlobalScope () ;
Code	return isLValueRootedInGlobalScope () ;
Distance : 6

167
Tree	return commonTypes ;
Code	return commonTypes ;
Distance : 6

168
Tree	return this . drawable ;
Code	return this . drawable ;
Distance : 6

169
Tree	return ft . getSlot ( this , invocation ) ;
Code	return ft . getSlot ( this , invocation ) ;
Distance : 5

170
Tree	return invalidatingTypes + bindComponents.thisValue . getSlot ( invocation ) ;
Code	return invalidatingTypes + bindComponents.thisValue . getSlot ( invocation ) ;
Distance : 7

171
Tree	return this . arz ;
Code	return this . arz ;
Distance : 6

172
Tree	return this . MockHandlerInterface ;
Code	return this . MockHandlerInterface ;
Distance : 6

173
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + args ;
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + args ;
Distance : 6

174
Tree	return settings + bindComponents.thisValue . getSlot ( invocation ) ;
Code	return settings + bindComponents.thisValue . getSlot ( invocation ) ;
Distance : 7

175
Tree	return this . commonTypes . anovaPValue () ;
Code	return this . commonTypes . anovaPValue () ;
Distance : 6

176
Tree	return this . cache ;
Code	return this . cache ;
Distance : 6

177
Tree	return this . commonTypes . anovaPValue ( CHAR_CONS , CHAR_CONS ) ;
Code	return this . commonTypes . anovaPValue ( CHAR_CONS , CHAR_CONS ) ;
Distance : 7

178
Tree	return this . commonTypes . reflectionCompare () ;
Code	return this . commonTypes . reflectionCompare () ;
Distance : 6

179
Tree	return getTopObject ( invocation , invocation ) ;
Code	return getTopObject ( invocation , invocation ) ;
Distance : 2

180
Tree	return NUMBER_CONSTANT / rhs.b ;
Code	return NUMBER_CONSTANT / rhs.b ;
Distance : 6

181
Tree	return this . proto ;
Code	return this . proto ;
Distance : 6

182
Tree	return getTopObject () ;
Code	return getTopObject () ;
Distance : 6

183
Tree	return this . settings ;
Code	return this . settings ;
Distance : 6

184
Tree	return ft + getSlot ( invocation ) ;
Code	return ft + getSlot ( invocation ) ;
Distance : 5

185
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + locale ;
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + locale ;
Distance : 6

186
Tree	return STRING_CONSTANT + locale + STRING_CONSTANT + invocation ;
Code	return STRING_CONSTANT + locale + STRING_CONSTANT + invocation ;
Distance : 7

187
Tree	return STRING_CONSTANT + o + STRING_CONSTANT + invocation ;
Code	return STRING_CONSTANT + o + STRING_CONSTANT + invocation ;
Distance : 7

188
Tree	return arz + that.data . getEmptyObjectLiteral ( invocation ) ;
Code	return arz + that.data . getEmptyObjectLiteral ( invocation ) ;
Distance : 7

189
Tree	return STRING_CONSTANT + handler + STRING_CONSTANT + invocation ;
Code	return STRING_CONSTANT + handler + STRING_CONSTANT + invocation ;
Distance : 7

190
Tree	return STRING_CONSTANT + args + STRING_CONSTANT + invocation ;
Code	return STRING_CONSTANT + args + STRING_CONSTANT + invocation ;
Distance : 7

191
Tree	return STRING_CONSTANT + invocation + STRING_CONSTANT + o ;
Code	return STRING_CONSTANT + invocation + STRING_CONSTANT + o ;
Distance : 6

192
Tree	return arz ^ invocation ;
Code	return arz ^ invocation ;
Distance : 5

193
Tree	return invalidatingTypes ^ invocation ;
Code	return invalidatingTypes ^ invocation ;
Distance : 5

194
Tree	return settings ^ invocation ;
Code	return settings ^ invocation ;
Distance : 5

195
Tree	return ft ^ invocation ;
Code	return ft ^ invocation ;
Distance : 5

196
Tree	return commonTypes ^ invocation ;
Code	return commonTypes ^ invocation ;
Distance : 5

197
Tree	return superMethod ^ invocation ;
Code	return superMethod ^ invocation ;
Distance : 5

198
Tree	return bp ^ invocation ;
Code	return bp ^ invocation ;
Distance : 5

199
Tree	return proto ^ invocation ;
Code	return proto ^ invocation ;
Distance : 5

========================================================================


========================================================================
Example Number: 81
Parent Code is: 
return mockSettings . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
-------------------------------------------------------------------------------
Child code is: 
return mockSettings . serializable () . defaultAnswer ( returnsDeepStubsAnswerUsing ( returnTypeGenericMetadata ) ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=mockSettings}) (235{val=.}) (802{val=defaultAnswer}) (214{val=(}) (32 (802{val=returnsDeepStubsAnswerUsing}) (214{val=(}) (800{val=returnTypeGenericMetadata}) (215{val=)})) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (32 (800{val=mockSettings}) (235{val=.}) (802{val=serializable}) (216{val=()})) (235{val=.}) (802{val=defaultAnswer}) (214{val=(}) (32 (802{val=returnsDeepStubsAnswerUsing}) (214{val=(}) (800{val=returnTypeGenericMetadata}) (215{val=)})) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/23/parent/src_org_mockito_internal_stubbing_defaultanswers_ReturnsDeepStubs.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return defaultAnswer ( fixChoices ) . defaultAnswer () ;
Code	return defaultAnswer ( fixChoices ) . defaultAnswer () ;
Distance : 10

1
Tree	return mockSettings . defaultAnswer ( anyString ( returnTypeGenericMetadata ) ) < Object ;
Code	return mockSettings . defaultAnswer ( anyString ( returnTypeGenericMetadata ) ) < Object ;
Distance : 6

2
Tree	return defaultAnswer ( url2 ) . defaultAnswer () ;
Code	return defaultAnswer ( url2 ) . defaultAnswer () ;
Distance : 10

3
Tree	return defaultAnswer ( notInitializedSpy ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( notInitializedSpy ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 7

4
Tree	return mockSettings . defaultAnswer ( createUnionType ( returnTypeGenericMetadata ) ) < FormatFactory ;
Code	return mockSettings . defaultAnswer ( createUnionType ( returnTypeGenericMetadata ) ) < FormatFactory ;
Distance : 6

5
Tree	return defaultAnswer ( createNewDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( createNewDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 8

6
Tree	return mockSettings . defaultAnswer ( createUnionType ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Code	return mockSettings . defaultAnswer ( createUnionType ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Distance : 8

7
Tree	return defaultAnswer ( notInitializedSpy ) . getMockSettings ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( notInitializedSpy ) . getMockSettings ( returnTypeGenericMetadata ) ;
Distance : 8

8
Tree	return mockSettings . defaultAnswer ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) < FormatFactory ;
Code	return mockSettings . defaultAnswer ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) < FormatFactory ;
Distance : 6

9
Tree	return mockSettings . defaultAnswer ( notInitializedSpy ) ;
Code	return mockSettings . defaultAnswer ( notInitializedSpy ) ;
Distance : 7

10
Tree	return ! mockSettings . defaultAnswer ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) ;
Code	return ! mockSettings . defaultAnswer ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) ;
Distance : 5

11
Tree	return mockSettings . defaultAnswer ( factories ) ;
Code	return mockSettings . defaultAnswer ( factories ) ;
Distance : 7

12
Tree	return defaultAnswer ( fixChoices ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( fixChoices ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 7

13
Tree	return mockSettings . defaultAnswer ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) && extends ;
Code	return mockSettings . defaultAnswer ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) && extends ;
Distance : 6

14
Tree	return mockSettings . defaultAnswer ( createUnionType ( returnTypeGenericMetadata ) ) && anyList ;
Code	return mockSettings . defaultAnswer ( createUnionType ( returnTypeGenericMetadata ) ) && anyList ;
Distance : 6

15
Tree	return mockSettings . defaultAnswer ( createUnionType ( returnTypeGenericMetadata ) ) && <= ;
Code	return mockSettings . defaultAnswer ( createUnionType ( returnTypeGenericMetadata ) ) && <= ;
Distance : 6

16
Tree	return defaultAnswer ( null , withSettings ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( null , withSettings ( returnTypeGenericMetadata ) ) ;
Distance : 8

17
Tree	return mockSettings . defaultAnswer ( new MockMethodInterceptor ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( new MockMethodInterceptor ( returnTypeGenericMetadata ) ) ;
Distance : 5

18
Tree	return mockSettings . defaultAnswer ( createNewDeepStubMock ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Code	return mockSettings . defaultAnswer ( createNewDeepStubMock ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Distance : 8

19
Tree	return mockSettings . defaultAnswer ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) && anyList ;
Code	return mockSettings . defaultAnswer ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) && anyList ;
Distance : 6

20
Tree	return defaultAnswer ( url2 ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( url2 ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 7

21
Tree	return defaultAnswer ( getVarFromSyntacticScope ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( getVarFromSyntacticScope ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 8

22
Tree	return defaultAnswer ( createUnionType ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( createUnionType ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 8

23
Tree	return mockSettings . defaultAnswer ( verbose ) ;
Code	return mockSettings . defaultAnswer ( verbose ) ;
Distance : 7

24
Tree	return mockSettings . defaultAnswer ( references ) ;
Code	return mockSettings . defaultAnswer ( references ) ;
Distance : 7

25
Tree	return ! mockSettings . defaultAnswer ( anyString ( returnTypeGenericMetadata ) ) ;
Code	return ! mockSettings . defaultAnswer ( anyString ( returnTypeGenericMetadata ) ) ;
Distance : 5

26
Tree	return mockSettings . defaultAnswer ( anyString ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Code	return mockSettings . defaultAnswer ( anyString ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Distance : 8

27
Tree	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) ;
Code	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) ;
Distance : 5

28
Tree	return mockSettings . defaultAnswer ( new CallsRealMethods ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( new CallsRealMethods ( returnTypeGenericMetadata ) ) ;
Distance : 5

29
Tree	return mockSettings . defaultAnswer ( createUnionType ( returnTypeGenericMetadata ) ) && &= ;
Code	return mockSettings . defaultAnswer ( createUnionType ( returnTypeGenericMetadata ) ) && &= ;
Distance : 6

30
Tree	return mockSettings . defaultAnswer ( isEs6ModuleRoot ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( isEs6ModuleRoot ( returnTypeGenericMetadata ) ) ;
Distance : 4

31
Tree	return mockSettings . defaultAnswer ( convertMethodToFunction ( returnTypeGenericMetadata ) ) < Object ;
Code	return mockSettings . defaultAnswer ( convertMethodToFunction ( returnTypeGenericMetadata ) ) < Object ;
Distance : 6

32
Tree	return mockSettings . defaultAnswer ( getRemovableNode ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( getRemovableNode ( returnTypeGenericMetadata ) ) ;
Distance : 4

33
Tree	return mockSettings . defaultAnswer ( anyString ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( anyString ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 6

34
Tree	return ! mockSettings . defaultAnswer ( createUnionType ( returnTypeGenericMetadata ) ) ;
Code	return ! mockSettings . defaultAnswer ( createUnionType ( returnTypeGenericMetadata ) ) ;
Distance : 5

35
Tree	return mockSettings . defaultAnswer ( getVarFromSyntacticScope ( returnTypeGenericMetadata ) ) < Object ;
Code	return mockSettings . defaultAnswer ( getVarFromSyntacticScope ( returnTypeGenericMetadata ) ) < Object ;
Distance : 6

36
Tree	return mockSettings . defaultAnswer ( runVariableRenaming ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( runVariableRenaming ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 6

37
Tree	return mockSettings . defaultAnswer ( convertMethodToFunction ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( convertMethodToFunction ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 6

38
Tree	return mockSettings . defaultAnswer ( getRemovableNode ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( getRemovableNode ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 6

39
Tree	return mockSettings . defaultAnswer ( createUnionType ( returnTypeGenericMetadata ) ) < Object ;
Code	return mockSettings . defaultAnswer ( createUnionType ( returnTypeGenericMetadata ) ) < Object ;
Distance : 6

40
Tree	return defaultAnswer ( factories ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( factories ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 7

41
Tree	return mockSettings . defaultAnswer ( newStatement ) ;
Code	return mockSettings . defaultAnswer ( newStatement ) ;
Distance : 7

42
Tree	return mockSettings . defaultAnswer ( new InstantiatorProvider2Adapter ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( new InstantiatorProvider2Adapter ( returnTypeGenericMetadata ) ) ;
Distance : 5

43
Tree	return defaultAnswer ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) ;
Distance : 6

44
Tree	return defaultAnswer ( getVarFromSyntacticScope ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( getVarFromSyntacticScope ( returnTypeGenericMetadata ) ) ;
Distance : 6

45
Tree	return defaultAnswer ( after ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( after ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 7

46
Tree	return defaultAnswer ( createUnionType ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( createUnionType ( returnTypeGenericMetadata ) ) ;
Distance : 6

47
Tree	return defaultAnswer ( references ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( references ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 7

48
Tree	return mockSettings . defaultAnswer ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) < Object ;
Code	return mockSettings . defaultAnswer ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) < Object ;
Distance : 6

49
Tree	return mockSettings . defaultAnswer ( getVarFromSyntacticScope ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( getVarFromSyntacticScope ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 6

50
Tree	return mockSettings . defaultAnswer ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) && <= ;
Code	return mockSettings . defaultAnswer ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) && <= ;
Distance : 6

51
Tree	return mockSettings . defaultAnswer ( createUnionType ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( createUnionType ( returnTypeGenericMetadata ) ) ;
Distance : 4

52
Tree	return mockSettings . defaultAnswer ( new MethodsImpl ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( new MethodsImpl ( returnTypeGenericMetadata ) ) ;
Distance : 5

53
Tree	return mockSettings . defaultAnswer ( new ReductionGatherer ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( new ReductionGatherer ( returnTypeGenericMetadata ) ) ;
Distance : 5

54
Tree	return mockSettings . defaultAnswer () ;
Code	return mockSettings . defaultAnswer () ;
Distance : 9

55
Tree	return defaultAnswer ( newStatement ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( newStatement ) . defaultAnswer ( returnTypeGenericMetadata ) ;
Distance : 7

56
Tree	return defaultAnswer ( factories ) . defaultAnswer () ;
Code	return defaultAnswer ( factories ) . defaultAnswer () ;
Distance : 10

57
Tree	return mockSettings . defaultAnswer ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) ;
Distance : 4

58
Tree	return mockSettings . defaultAnswer ( new MockAwareVerificationMode ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( new MockAwareVerificationMode ( returnTypeGenericMetadata ) ) ;
Distance : 5

59
Tree	return defaultAnswer ( anyString ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( anyString ( returnTypeGenericMetadata ) ) ;
Distance : 6

60
Tree	return defaultAnswer ( getRemovableNode ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( getRemovableNode ( returnTypeGenericMetadata ) ) ;
Distance : 6

61
Tree	return defaultAnswer ( getRemovableNode ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( getRemovableNode ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 8

62
Tree	return mockSettings . defaultAnswer ( anyString ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( anyString ( returnTypeGenericMetadata ) ) ;
Distance : 4

63
Tree	return mockSettings . defaultAnswer ( after ) ;
Code	return mockSettings . defaultAnswer ( after ) ;
Distance : 7

64
Tree	return defaultAnswer ( convertMethodToFunction ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( convertMethodToFunction ( returnTypeGenericMetadata ) ) ;
Distance : 6

65
Tree	return mockSettings . defaultAnswer ( createUnionType ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( createUnionType ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 6

66
Tree	return defaultAnswer ( null , process ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( null , process ( returnTypeGenericMetadata ) ) ;
Distance : 8

67
Tree	return mockSettings . defaultAnswer ( new DateTickUnit ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( new DateTickUnit ( returnTypeGenericMetadata ) ) ;
Distance : 5

68
Tree	return withSettings ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) ;
Code	return withSettings ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) ;
Distance : 7

69
Tree	return mockSettings . defaultAnswer ( new RunnerProvider ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( new RunnerProvider ( returnTypeGenericMetadata ) ) ;
Distance : 5

70
Tree	return defaultAnswer ( fst ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( fst ( returnTypeGenericMetadata ) ) ;
Distance : 6

71
Tree	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( fst ( returnTypeGenericMetadata ) ) ;
Code	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( fst ( returnTypeGenericMetadata ) ) ;
Distance : 5

72
Tree	return mockSettings . defaultAnswer ( createNewDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( createNewDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 6

73
Tree	return withSettings ( createNewDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return withSettings ( createNewDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 9

74
Tree	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( createUnionType ( returnTypeGenericMetadata ) ) ;
Code	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( createUnionType ( returnTypeGenericMetadata ) ) ;
Distance : 5

75
Tree	return ! mockSettings . defaultAnswer ( runVariableRenaming ( returnTypeGenericMetadata ) ) ;
Code	return ! mockSettings . defaultAnswer ( runVariableRenaming ( returnTypeGenericMetadata ) ) ;
Distance : 5

76
Tree	return defaultAnswer ( after ) . defaultAnswer () ;
Code	return defaultAnswer ( after ) . defaultAnswer () ;
Distance : 10

77
Tree	return mockSettings . defaultAnswer ( convertMethodToFunction ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Code	return mockSettings . defaultAnswer ( convertMethodToFunction ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Distance : 8

78
Tree	return defaultAnswer ( references ) . defaultAnswer () ;
Code	return defaultAnswer ( references ) . defaultAnswer () ;
Distance : 10

79
Tree	return defaultAnswer ( references , returnTypeGenericMetadata ) && anyObject ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( references , returnTypeGenericMetadata ) && anyObject ( returnTypeGenericMetadata ) ;
Distance : 9

80
Tree	return defaultAnswer ( after , returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( after , returnTypeGenericMetadata ) ;
Distance : 8

81
Tree	return defaultAnswer ( newStatement ) . defaultAnswer () ;
Code	return defaultAnswer ( newStatement ) . defaultAnswer () ;
Distance : 10

82
Tree	return mockSettings . defaultAnswer ( isEs6ModuleRoot ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Code	return mockSettings . defaultAnswer ( isEs6ModuleRoot ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Distance : 8

83
Tree	return defaultAnswer ( references , returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( references , returnTypeGenericMetadata ) ;
Distance : 8

84
Tree	return ! mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) ) ;
Code	return ! mockSettings . defaultAnswer ( withSettings ( returnTypeGenericMetadata ) ) ;
Distance : 5

85
Tree	return ! mockSettings . defaultAnswer ( getMockSettings ( returnTypeGenericMetadata ) ) ;
Code	return ! mockSettings . defaultAnswer ( getMockSettings ( returnTypeGenericMetadata ) ) ;
Distance : 5

86
Tree	return defaultAnswer ( factories , returnTypeGenericMetadata ) && getReferenceName ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( factories , returnTypeGenericMetadata ) && getReferenceName ( returnTypeGenericMetadata ) ;
Distance : 9

87
Tree	return mockSettings . defaultAnswer ( new CallsRealMethods ( returnTypeGenericMetadata , returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( new CallsRealMethods ( returnTypeGenericMetadata , returnTypeGenericMetadata ) ) ;
Distance : 6

88
Tree	return defaultAnswer ( factories , returnTypeGenericMetadata ) && anyObject ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( factories , returnTypeGenericMetadata ) && anyObject ( returnTypeGenericMetadata ) ;
Distance : 9

89
Tree	return defaultAnswer ( notInitializedSpy , returnTypeGenericMetadata ) && getReferenceName ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( notInitializedSpy , returnTypeGenericMetadata ) && getReferenceName ( returnTypeGenericMetadata ) ;
Distance : 9

90
Tree	return defaultAnswer ( notInitializedSpy , returnTypeGenericMetadata ) && anyObject ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( notInitializedSpy , returnTypeGenericMetadata ) && anyObject ( returnTypeGenericMetadata ) ;
Distance : 9

91
Tree	return defaultAnswer ( notInitializedSpy , returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( notInitializedSpy , returnTypeGenericMetadata ) ;
Distance : 8

92
Tree	return mockSettings . defaultAnswer ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) && &= ;
Code	return mockSettings . defaultAnswer ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) && &= ;
Distance : 6

93
Tree	return mockSettings . defaultAnswer ( getRemovableNode ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Code	return mockSettings . defaultAnswer ( getRemovableNode ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Distance : 8

94
Tree	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( anyString ( returnTypeGenericMetadata ) ) ;
Code	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( anyString ( returnTypeGenericMetadata ) ) ;
Distance : 5

95
Tree	return mockSettings . defaultAnswer ( runVariableRenaming ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( runVariableRenaming ( returnTypeGenericMetadata ) ) ;
Distance : 4

96
Tree	return defaultAnswer ( after , returnTypeGenericMetadata ) && getReferenceName ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( after , returnTypeGenericMetadata ) && getReferenceName ( returnTypeGenericMetadata ) ;
Distance : 9

97
Tree	return mockSettings . defaultAnswer ( convertMethodToFunction ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( convertMethodToFunction ( returnTypeGenericMetadata ) ) ;
Distance : 4

98
Tree	return mockSettings . defaultAnswer () && returnTypeGenericMetadata . defaultAnswer ( anyString ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer () && returnTypeGenericMetadata . defaultAnswer ( anyString ( returnTypeGenericMetadata ) ) ;
Distance : 4

99
Tree	return mockSettings . defaultAnswer ( createUnionType ( returnTypeGenericMetadata ) ) && extends ;
Code	return mockSettings . defaultAnswer ( createUnionType ( returnTypeGenericMetadata ) ) && extends ;
Distance : 6

100
Tree	return defaultAnswer ( fst ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( fst ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 8

101
Tree	return mockSettings . defaultAnswer ( verbose ) && anyObject ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( verbose ) && anyObject ( returnTypeGenericMetadata ) ;
Distance : 7

102
Tree	return mockSettings . defaultAnswer ( getVarFromSyntacticScope ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Code	return mockSettings . defaultAnswer ( getVarFromSyntacticScope ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Distance : 8

103
Tree	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( getReferenceName ( returnTypeGenericMetadata ) ) ;
Code	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( getReferenceName ( returnTypeGenericMetadata ) ) ;
Distance : 5

104
Tree	return defaultAnswer ( null , createNewDeepStubMock ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( null , createNewDeepStubMock ( returnTypeGenericMetadata ) ) ;
Distance : 8

105
Tree	return defaultAnswer ( notInitializedSpy ) . defaultAnswer () ;
Code	return defaultAnswer ( notInitializedSpy ) . defaultAnswer () ;
Distance : 10

106
Tree	return mockSettings . defaultAnswer ( isEs6ModuleRoot ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( isEs6ModuleRoot ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 6

107
Tree	return mockSettings . defaultAnswer () && returnValueFor ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer () && returnValueFor ( returnTypeGenericMetadata ) ;
Distance : 6

108
Tree	return mockSettings . defaultAnswer ( getVarFromSyntacticScope ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( getVarFromSyntacticScope ( returnTypeGenericMetadata ) ) ;
Distance : 4

109
Tree	return mockSettings . defaultAnswer () && returnTypeGenericMetadata . defaultBehavior ( anyString ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer () && returnTypeGenericMetadata . defaultBehavior ( anyString ( returnTypeGenericMetadata ) ) ;
Distance : 5

110
Tree	return mockSettings . defaultAnswer ( fixChoices ) ;
Code	return mockSettings . defaultAnswer ( fixChoices ) ;
Distance : 7

111
Tree	return mockSettings . defaultAnswer ( references ) && anyObject ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( references ) && anyObject ( returnTypeGenericMetadata ) ;
Distance : 7

112
Tree	return defaultAnswer ( notInitializedSpy ) . getMockSettings () ;
Code	return defaultAnswer ( notInitializedSpy ) . getMockSettings () ;
Distance : 10

113
Tree	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( getRemovableNode ( returnTypeGenericMetadata ) ) ;
Code	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( getRemovableNode ( returnTypeGenericMetadata ) ) ;
Distance : 5

114
Tree	return mockSettings . defaultAnswer ( new MockMethodInterceptor ( returnTypeGenericMetadata , returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( new MockMethodInterceptor ( returnTypeGenericMetadata , returnTypeGenericMetadata ) ) ;
Distance : 6

115
Tree	return mockSettings . defaultAnswer ( new MethodsImpl ( returnTypeGenericMetadata , returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( new MethodsImpl ( returnTypeGenericMetadata , returnTypeGenericMetadata ) ) ;
Distance : 6

116
Tree	return defaultAnswer ( null , after ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( null , after ( returnTypeGenericMetadata ) ) ;
Distance : 8

117
Tree	return defaultAnswer ( convertMethodToFunction ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( convertMethodToFunction ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 8

118
Tree	return defaultAnswer ( null , getVarFromSyntacticScope ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( null , getVarFromSyntacticScope ( returnTypeGenericMetadata ) ) ;
Distance : 8

119
Tree	return mockSettings . defaultAnswer ( createUnionType ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && getString ;
Code	return mockSettings . defaultAnswer ( createUnionType ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && getString ;
Distance : 8

120
Tree	return mockSettings . defaultAnswer () && containsArray ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer () && containsArray ( returnTypeGenericMetadata ) ;
Distance : 6

121
Tree	return defaultAnswer ( anyString ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( anyString ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) ;
Distance : 8

122
Tree	return mockSettings . defaultAnswer () && returnTypeGenericMetadata . defaultBehavior ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer () && returnTypeGenericMetadata . defaultBehavior ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) ;
Distance : 5

123
Tree	return mockSettings . defaultAnswer ( after ) && anyObject ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( after ) && anyObject ( returnTypeGenericMetadata ) ;
Distance : 7

124
Tree	return mockSettings . defaultAnswer ( file ) ;
Code	return mockSettings . defaultAnswer ( file ) ;
Distance : 7

125
Tree	return mockSettings . defaultAnswer ( createNewDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && extends ;
Code	return mockSettings . defaultAnswer ( createNewDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && extends ;
Distance : 8

126
Tree	return mockSettings . defaultAnswer () && returnTypeGenericMetadata . defaultAnswer ( fst ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer () && returnTypeGenericMetadata . defaultAnswer ( fst ( returnTypeGenericMetadata ) ) ;
Distance : 4

127
Tree	return mockSettings . defaultAnswer () && returnTypeGenericMetadata . defaultAnswer ( createUnionType ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer () && returnTypeGenericMetadata . defaultAnswer ( createUnionType ( returnTypeGenericMetadata ) ) ;
Distance : 4

128
Tree	return mockSettings . defaultAnswer ( createUnionType ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && &= ;
Code	return mockSettings . defaultAnswer ( createUnionType ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && &= ;
Distance : 8

129
Tree	return mockSettings . defaultAnswer ( new DateTickUnit ( returnTypeGenericMetadata , returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( new DateTickUnit ( returnTypeGenericMetadata , returnTypeGenericMetadata ) ) ;
Distance : 6

130
Tree	return defaultAnswer ( null , firstNonBottom ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( null , firstNonBottom ( returnTypeGenericMetadata ) ) ;
Distance : 8

131
Tree	return mockSettings . defaultAnswer ( runVariableRenaming ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Code	return mockSettings . defaultAnswer ( runVariableRenaming ( returnTypeGenericMetadata ) , STRING_CONSTANT , mockSettings ) ;
Distance : 8

132
Tree	return defaultAnswer ( null , isLValueRootedInGlobalScope ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( null , isLValueRootedInGlobalScope ( returnTypeGenericMetadata ) ) ;
Distance : 8

133
Tree	return mockSettings . defaultAnswer ( notInitializedSpy ) && anyObject ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( notInitializedSpy ) && anyObject ( returnTypeGenericMetadata ) ;
Distance : 7

134
Tree	return mockSettings . defaultAnswer ( factories ) && anyObject ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( factories ) && anyObject ( returnTypeGenericMetadata ) ;
Distance : 7

135
Tree	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( isRangeCrosshairVisible ( returnTypeGenericMetadata ) ) ;
Code	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( isRangeCrosshairVisible ( returnTypeGenericMetadata ) ) ;
Distance : 5

136
Tree	return defaultAnswer ( after , returnTypeGenericMetadata ) && anyObject ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( after , returnTypeGenericMetadata ) && anyObject ( returnTypeGenericMetadata ) ;
Distance : 9

137
Tree	return mockSettings . defaultAnswer ( createNewDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && getString ;
Code	return mockSettings . defaultAnswer ( createNewDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && getString ;
Distance : 8

138
Tree	return ! mockSettings . defaultAnswer ( getVarFromSyntacticScope ( returnTypeGenericMetadata ) ) ;
Code	return ! mockSettings . defaultAnswer ( getVarFromSyntacticScope ( returnTypeGenericMetadata ) ) ;
Distance : 5

139
Tree	return defaultAnswer ( factories , returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( factories , returnTypeGenericMetadata ) ;
Distance : 8

140
Tree	return mockSettings . defaultAnswer () && returnTypeGenericMetadata . defaultAnswer ( getReferenceName ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer () && returnTypeGenericMetadata . defaultAnswer ( getReferenceName ( returnTypeGenericMetadata ) ) ;
Distance : 4

141
Tree	return mockSettings . defaultAnswer ( new RunnerProvider ( returnTypeGenericMetadata , returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( new RunnerProvider ( returnTypeGenericMetadata , returnTypeGenericMetadata ) ) ;
Distance : 6

142
Tree	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( and ( returnTypeGenericMetadata ) ) ;
Code	return ( mockSettings ) returnTypeGenericMetadata . defaultAnswer ( and ( returnTypeGenericMetadata ) ) ;
Distance : 5

143
Tree	return mockSettings . defaultAnswer ( new ReductionGatherer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( new ReductionGatherer ( returnTypeGenericMetadata , returnTypeGenericMetadata ) ) ;
Distance : 6

144
Tree	return mockSettings . defaultAnswer ( createNewDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && &= ;
Code	return mockSettings . defaultAnswer ( createNewDeepStubMock ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && &= ;
Distance : 8

145
Tree	return mockSettings . defaultAnswer ( new InstantiatorProvider2Adapter ( returnTypeGenericMetadata , returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( new InstantiatorProvider2Adapter ( returnTypeGenericMetadata , returnTypeGenericMetadata ) ) ;
Distance : 6

146
Tree	return mockSettings . defaultAnswer ( createUnionType ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && extends ;
Code	return mockSettings . defaultAnswer ( createUnionType ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && extends ;
Distance : 8

147
Tree	return mockSettings . defaultAnswer ( newStatement ) && anyObject ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( newStatement ) && anyObject ( returnTypeGenericMetadata ) ;
Distance : 7

148
Tree	return defaultAnswer ( references , returnTypeGenericMetadata ) && getReferenceName ( returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( references , returnTypeGenericMetadata ) && getReferenceName ( returnTypeGenericMetadata ) ;
Distance : 9

149
Tree	return mockSettings . defaultAnswer () && returnTypeGenericMetadata . defaultBehavior ( getReferenceName ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer () && returnTypeGenericMetadata . defaultBehavior ( getReferenceName ( returnTypeGenericMetadata ) ) ;
Distance : 5

150
Tree	return mockSettings . defaultAnswer ( fixChoices ) && anyObject ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( fixChoices ) && anyObject ( returnTypeGenericMetadata ) ;
Distance : 7

151
Tree	return ! mockSettings . defaultAnswer ( fst ( returnTypeGenericMetadata ) ) ;
Code	return ! mockSettings . defaultAnswer ( fst ( returnTypeGenericMetadata ) ) ;
Distance : 5

152
Tree	return defaultAnswer ( newStatement , returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( newStatement , returnTypeGenericMetadata ) ;
Distance : 8

153
Tree	return defaultAnswer ( null , getReferenceName ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( null , getReferenceName ( returnTypeGenericMetadata ) ) ;
Distance : 8

154
Tree	return mockSettings . defaultAnswer ( runVariableRenaming ( returnTypeGenericMetadata ) ) < Object ;
Code	return mockSettings . defaultAnswer ( runVariableRenaming ( returnTypeGenericMetadata ) ) < Object ;
Distance : 6

155
Tree	return mockSettings . defaultAnswer () && returnTypeGenericMetadata . defaultAnswer ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer () && returnTypeGenericMetadata . defaultAnswer ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) ;
Distance : 4

156
Tree	return mockSettings . defaultAnswer ( file ) && anyObject ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer ( file ) && anyObject ( returnTypeGenericMetadata ) ;
Distance : 7

157
Tree	return mockSettings . defaultAnswer () && createNewDeepStubMock ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer () && createNewDeepStubMock ( returnTypeGenericMetadata ) ;
Distance : 6

158
Tree	return defaultAnswer ( url2 , returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( url2 , returnTypeGenericMetadata ) ;
Distance : 8

159
Tree	return defaultAnswer ( verbose , returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( verbose , returnTypeGenericMetadata ) ;
Distance : 8

160
Tree	return mockSettings . defaultAnswer () && createUnionType ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer () && createUnionType ( returnTypeGenericMetadata ) ;
Distance : 6

161
Tree	return mockSettings . defaultAnswer () && getArrayEnd ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer () && getArrayEnd ( returnTypeGenericMetadata ) ;
Distance : 6

162
Tree	return mockSettings . defaultAnswer ( new MockAwareVerificationMode ( returnTypeGenericMetadata , returnTypeGenericMetadata ) ) ;
Code	return mockSettings . defaultAnswer ( new MockAwareVerificationMode ( returnTypeGenericMetadata , returnTypeGenericMetadata ) ) ;
Distance : 6

163
Tree	return mockSettings . defaultAnswer ( createUnionType ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && anyList ;
Code	return mockSettings . defaultAnswer ( createUnionType ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && anyList ;
Distance : 8

164
Tree	return defaultAnswer ( fixChoices , returnTypeGenericMetadata ) ;
Code	return defaultAnswer ( fixChoices , returnTypeGenericMetadata ) ;
Distance : 8

165
Tree	return mockSettings . defaultAnswer ( createUnionType ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && extraInterfaces ;
Code	return mockSettings . defaultAnswer ( createUnionType ( returnTypeGenericMetadata ) , returnTypeGenericMetadata ) && extraInterfaces ;
Distance : 8

166
Tree	return defaultAnswer ( notInitializedSpy ) . defaultAnswer ( returnTypeGenericMetadata ) && anyList ;
Code	return defaultAnswer ( notInitializedSpy ) . defaultAnswer ( returnTypeGenericMetadata ) && anyList ;
Distance : 8

167
Tree	return mockSettings . defaultAnswer () && isRangeCrosshairVisible ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer () && isRangeCrosshairVisible ( returnTypeGenericMetadata ) ;
Distance : 6

168
Tree	return defaultAnswer ( notInitializedSpy ) . defaultAnswer ( returnTypeGenericMetadata ) && &= ;
Code	return defaultAnswer ( notInitializedSpy ) . defaultAnswer ( returnTypeGenericMetadata ) && &= ;
Distance : 8

169
Tree	return defaultAnswer ( notInitializedSpy ) . defaultAnswer ( returnTypeGenericMetadata ) && extends ;
Code	return defaultAnswer ( notInitializedSpy ) . defaultAnswer ( returnTypeGenericMetadata ) && extends ;
Distance : 8

170
Tree	return defaultAnswer ( notInitializedSpy , returnTypeGenericMetadata ) && anyObject ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( notInitializedSpy , returnTypeGenericMetadata ) && anyObject ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) ;
Distance : 9

171
Tree	return defaultAnswer ( notInitializedSpy , returnTypeGenericMetadata ) && getReferenceName ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( notInitializedSpy , returnTypeGenericMetadata ) && getReferenceName ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) ;
Distance : 9

172
Tree	return defaultAnswer ( notInitializedSpy ) . defaultAnswer ( returnTypeGenericMetadata ) && extraInterfaces ;
Code	return defaultAnswer ( notInitializedSpy ) . defaultAnswer ( returnTypeGenericMetadata ) && extraInterfaces ;
Distance : 8

173
Tree	return mockSettings . defaultAnswer () && getReferenceName ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer () && getReferenceName ( returnTypeGenericMetadata ) ;
Distance : 6

174
Tree	return mockSettings . defaultAnswer () && substituteGenerics ( returnTypeGenericMetadata ) ;
Code	return mockSettings . defaultAnswer () && substituteGenerics ( returnTypeGenericMetadata ) ;
Distance : 6

175
Tree	return defaultAnswer ( factories ) . defaultAnswer ( returnTypeGenericMetadata ) && anyList ;
Code	return defaultAnswer ( factories ) . defaultAnswer ( returnTypeGenericMetadata ) && anyList ;
Distance : 8

176
Tree	return defaultAnswer ( after ) . defaultAnswer ( returnTypeGenericMetadata ) && anyList ;
Code	return defaultAnswer ( after ) . defaultAnswer ( returnTypeGenericMetadata ) && anyList ;
Distance : 8

177
Tree	return defaultAnswer ( notInitializedSpy ) . defaultAnswer ( returnTypeGenericMetadata ) && getString ;
Code	return defaultAnswer ( notInitializedSpy ) . defaultAnswer ( returnTypeGenericMetadata ) && getString ;
Distance : 8

178
Tree	return defaultAnswer ( references ) . defaultAnswer ( returnTypeGenericMetadata ) && anyList ;
Code	return defaultAnswer ( references ) . defaultAnswer ( returnTypeGenericMetadata ) && anyList ;
Distance : 8

179
Tree	return defaultAnswer ( notInitializedSpy , returnTypeGenericMetadata ) && extraInterfaces . defaultAnswer ( getVarFromSyntacticScope ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( notInitializedSpy , returnTypeGenericMetadata ) && extraInterfaces . defaultAnswer ( getVarFromSyntacticScope ( returnTypeGenericMetadata ) ) ;
Distance : 9

180
Tree	return defaultAnswer ( factories , returnTypeGenericMetadata ) && getReferenceName ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( factories , returnTypeGenericMetadata ) && getReferenceName ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) ;
Distance : 9

181
Tree	return defaultAnswer ( notInitializedSpy , returnTypeGenericMetadata ) && extraInterfaces . defaultAnswer ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( notInitializedSpy , returnTypeGenericMetadata ) && extraInterfaces . defaultAnswer ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) ;
Distance : 9

182
Tree	return defaultAnswer ( after , returnTypeGenericMetadata ) && anyObject ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( after , returnTypeGenericMetadata ) && anyObject ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) ;
Distance : 9

183
Tree	return defaultAnswer ( references , returnTypeGenericMetadata ) && anyObject ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( references , returnTypeGenericMetadata ) && anyObject ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) ;
Distance : 9

184
Tree	return defaultAnswer ( references , returnTypeGenericMetadata ) && getReferenceName ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( references , returnTypeGenericMetadata ) && getReferenceName ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) ;
Distance : 9

185
Tree	return defaultAnswer ( notInitializedSpy , returnTypeGenericMetadata ) && extraInterfaces . defaultAnswer ( isRangeCrosshairVisible ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( notInitializedSpy , returnTypeGenericMetadata ) && extraInterfaces . defaultAnswer ( isRangeCrosshairVisible ( returnTypeGenericMetadata ) ) ;
Distance : 9

186
Tree	return defaultAnswer ( notInitializedSpy , returnTypeGenericMetadata ) && extraInterfaces . defaultAnswer ( getReferenceName ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( notInitializedSpy , returnTypeGenericMetadata ) && extraInterfaces . defaultAnswer ( getReferenceName ( returnTypeGenericMetadata ) ) ;
Distance : 9

187
Tree	return defaultAnswer ( factories , returnTypeGenericMetadata ) && anyObject ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( factories , returnTypeGenericMetadata ) && anyObject ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) ;
Distance : 9

188
Tree	return defaultAnswer ( after , returnTypeGenericMetadata ) && getReferenceName ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( after , returnTypeGenericMetadata ) && getReferenceName ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) ;
Distance : 9

189
Tree	return defaultAnswer ( factories , returnTypeGenericMetadata ) && extraInterfaces . defaultAnswer ( getVarFromSyntacticScope ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( factories , returnTypeGenericMetadata ) && extraInterfaces . defaultAnswer ( getVarFromSyntacticScope ( returnTypeGenericMetadata ) ) ;
Distance : 9

190
Tree	return defaultAnswer ( notInitializedSpy , returnTypeGenericMetadata ) && extraInterfaces . defaultAnswer ( fst ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( notInitializedSpy , returnTypeGenericMetadata ) && extraInterfaces . defaultAnswer ( fst ( returnTypeGenericMetadata ) ) ;
Distance : 9

191
Tree	return defaultAnswer ( notInitializedSpy , returnTypeGenericMetadata ) && checker . defaultAnswer ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( notInitializedSpy , returnTypeGenericMetadata ) && checker . defaultAnswer ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) ;
Distance : 9

192
Tree	return mockSettings . defaultBehavior () ;
Code	return mockSettings . defaultBehavior () ;
Distance : 9

193
Tree	return mockSettings . getMockSettings () ;
Code	return mockSettings . getMockSettings () ;
Distance : 9

194
Tree	return mockSettings . defaultReturnValues () ;
Code	return mockSettings . defaultReturnValues () ;
Distance : 9

195
Tree	return defaultAnswer ( notInitializedSpy , returnTypeGenericMetadata ) && checker . defaultAnswer ( getVarFromSyntacticScope ( returnTypeGenericMetadata ) ) ;
Code	return defaultAnswer ( notInitializedSpy , returnTypeGenericMetadata ) && checker . defaultAnswer ( getVarFromSyntacticScope ( returnTypeGenericMetadata ) ) ;
Distance : 9

196
Tree	return mockSettings . spiedInstance () ;
Code	return mockSettings . spiedInstance () ;
Distance : 9

197
Tree	return mockSettings . escape () ;
Code	return mockSettings . escape () ;
Distance : 9

198
Tree	return mockSettings . atLeast () ;
Code	return mockSettings . atLeast () ;
Distance : 9

199
Tree	return mockSettings . withSettings () ;
Code	return mockSettings . withSettings () ;
Distance : 9

========================================================================


========================================================================
Example Number: 82
Parent Code is: 
{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withOuterClass ( cls ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ if ( outerClassInstance == null ) { return noArgConstructor ( cls ) ; } return withParams ( cls , outerClassInstance ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (800{val=outerClassInstance}) (236{val===}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=noArgConstructor}) (214{val=(}) (800{val=cls}) (215{val=)})) (227{val=;})) (219{val=}}))) (41 (329{val=return}) (32 (802{val=withOuterClass}) (214{val=(}) (800{val=cls}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (25 (313{val=if}) (214{val=(}) (27 (800{val=outerClassInstance}) (236{val===}) (500{val=null})) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (32 (802{val=noArgConstructor}) (214{val=(}) (800{val=cls}) (215{val=)})) (227{val=;})) (219{val=}}))) (41 (329{val=return}) (32 (802{val=withParams}) (214{val=(}) (800{val=cls}) (234{val=,}) (800{val=outerClassInstance}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/21/parent/src_org_mockito_internal_creation_instance_ConstructorInstantiator.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls , cls . getSimplifiedName ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls , cls . getSimplifiedName ( cls ) ) ; }
Distance : 8

1
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls , cls . of ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls , cls . of ( cls ) ) ; }
Distance : 8

2
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveValueOrNullFor () ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveValueOrNullFor () ; } return indexOfAny ( cls ) ; }
Distance : 7

3
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . defaultValueFor () ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . defaultValueFor () ; } return indexOfAny ( cls ) ; }
Distance : 7

4
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls ) ; }
Distance : 4

5
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return inlineEmptyMethod ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return inlineEmptyMethod ( cls ) ; }
Distance : 4

6
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return cls . wasCasted ( cls , cls ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return cls . wasCasted ( cls , cls ) ; }
Distance : 5

7
Tree	{ if ( usingConstructor == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( usingConstructor == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls ) ; }
Distance : 5

8
Tree	{ if ( usingConstructor == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls , cls . getSimplifiedName ( cls ) ) ; }
Code	{ if ( usingConstructor == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls , cls . getSimplifiedName ( cls ) ) ; }
Distance : 9

9
Tree	{ if ( outerClassInstance == null ) { return completeAssignmentExpressionParseAtArrow ( cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return completeAssignmentExpressionParseAtArrow ( cls ) ; } return indexOfAny ( cls ) ; }
Distance : 4

10
Tree	{ if ( DateTimePrinterInternalPrinter == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( DateTimePrinterInternalPrinter == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls ) ; }
Distance : 5

11
Tree	{ if ( outerClassInstance == null ) { return trySubstituteEmptyFunction ( cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return trySubstituteEmptyFunction ( cls ) ; } return indexOfAny ( cls ) ; }
Distance : 4

12
Tree	{ if ( RandomGeneratorFactory == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( RandomGeneratorFactory == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls ) ; }
Distance : 5

13
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return inlineEmptyMethod ( cls , cls . getSimplifiedName ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return inlineEmptyMethod ( cls , cls . getSimplifiedName ( cls ) ) ; }
Distance : 8

14
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return cls . wasCasted ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return cls . wasCasted ( cls ) ; }
Distance : 6

15
Tree	{ if ( RandomGeneratorFactory == null ) { return primitiveWrapperOf ( cls ) ; } return cls . wasCasted ( cls ) ; }
Code	{ if ( RandomGeneratorFactory == null ) { return primitiveWrapperOf ( cls ) ; } return cls . wasCasted ( cls ) ; }
Distance : 7

16
Tree	{ if ( outerClassInstance == null ) { return returnFake ( cls ) ; } return cls . wasCasted ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return returnFake ( cls ) ; } return cls . wasCasted ( cls ) ; }
Distance : 6

17
Tree	{ if ( usingConstructor == null ) { return primitiveWrapperOf ( cls ) ; } return cls . wasCasted ( cls ) ; }
Code	{ if ( usingConstructor == null ) { return primitiveWrapperOf ( cls ) ; } return cls . wasCasted ( cls ) ; }
Distance : 7

18
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( cls ) ; } return inlineEmptyMethod ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( cls ) ; } return inlineEmptyMethod ( cls ) ; }
Distance : 6

19
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls ) ; }
Distance : 6

20
Tree	{ if ( outerClassInstance == null ) { return this . unescape ( cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return this . unescape ( cls ) ; } return indexOfAny ( cls ) ; }
Distance : 6

21
Tree	{ if ( outerClassInstance == null ) { return completeAssignmentExpressionParseAtArrow ( cls ) ; } return cls . wasCasted ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return completeAssignmentExpressionParseAtArrow ( cls ) ; } return cls . wasCasted ( cls ) ; }
Distance : 6

22
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( cls ) ; } return indexOfAny ( cls ) ; }
Distance : 6

23
Tree	{ if ( usingConstructor == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( usingConstructor == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( cls ) ; } return indexOfAny ( cls ) ; }
Distance : 7

24
Tree	{ if ( DateTimePrinterInternalPrinter == null ) { return primitiveWrapperOf ( cls ) ; } return cls . wasCasted ( cls ) ; }
Code	{ if ( DateTimePrinterInternalPrinter == null ) { return primitiveWrapperOf ( cls ) ; } return cls . wasCasted ( cls ) ; }
Distance : 7

25
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . defaultValueFor ( cls ) ; } return inlineEmptyMethod ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . defaultValueFor ( cls ) ; } return inlineEmptyMethod ( cls ) ; }
Distance : 6

26
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . defaultValueFor ( cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . defaultValueFor ( cls ) ; } return indexOfAny ( cls ) ; }
Distance : 6

27
Tree	{ if ( usingConstructor == null ) { return primitiveWrapperOf ( cls ) ; } return inlineEmptyMethod ( cls ) ; }
Code	{ if ( usingConstructor == null ) { return primitiveWrapperOf ( cls ) ; } return inlineEmptyMethod ( cls ) ; }
Distance : 5

28
Tree	{ if ( DateTimePrinterInternalPrinter == null ) { return this . unescape ( cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( DateTimePrinterInternalPrinter == null ) { return this . unescape ( cls ) ; } return indexOfAny ( cls ) ; }
Distance : 7

29
Tree	{ if ( usingConstructor == null ) { return this . unescape ( cls ) ; } return inlineEmptyMethod ( cls ) ; }
Code	{ if ( usingConstructor == null ) { return this . unescape ( cls ) ; } return inlineEmptyMethod ( cls ) ; }
Distance : 7

30
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls . of ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls . of ( cls ) ) ; }
Distance : 7

31
Tree	{ if ( usingConstructor == null ) { return JAVA_1_8 . defaultValueFor ( cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( usingConstructor == null ) { return JAVA_1_8 . defaultValueFor ( cls ) ; } return indexOfAny ( cls ) ; }
Distance : 7

32
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return cls . defaultValueFor ( cls , cls ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return cls . defaultValueFor ( cls , cls ) ; }
Distance : 5

33
Tree	{ if ( outerClassInstance == null ) { return trySubstituteEmptyFunction ( cls ) ; } return cls . wasCasted ( cls , cls ) ; }
Code	{ if ( outerClassInstance == null ) { return trySubstituteEmptyFunction ( cls ) ; } return cls . wasCasted ( cls , cls ) ; }
Distance : 5

34
Tree	{ if ( outerClassInstance == null ) { return this . primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return this . primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls ) ; }
Distance : 6

35
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return cls . defaultValueFor ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return cls . defaultValueFor ( cls ) ; }
Distance : 6

36
Tree	{ if ( usingConstructor == null ) { return primitiveWrapperOf ( cls , cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( usingConstructor == null ) { return primitiveWrapperOf ( cls , cls ) ; } return indexOfAny ( cls ) ; }
Distance : 7

37
Tree	{ if ( RandomGeneratorFactory == null ) { return primitiveWrapperOf ( cls ) ; } return cls . wasCasted ( cls , cls ) ; }
Code	{ if ( RandomGeneratorFactory == null ) { return primitiveWrapperOf ( cls ) ; } return cls . wasCasted ( cls , cls ) ; }
Distance : 6

38
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . wasCasted ( cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . wasCasted ( cls ) ; } return indexOfAny ( cls ) ; }
Distance : 6

39
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) . removeChildren ( cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) . removeChildren ( cls ) ; } return indexOfAny ( cls ) ; }
Distance : 9

40
Tree	{ if ( outerClassInstance == null ) { return trySubstituteEmptyFunction ( cls ) ; } return cls . wasCasted ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return trySubstituteEmptyFunction ( cls ) ; } return cls . wasCasted ( cls ) ; }
Distance : 6

41
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( this , cls ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( this , cls ) ; }
Distance : 4

42
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls , cls ) ; } return inlineEmptyMethod ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls , cls ) ; } return inlineEmptyMethod ( cls ) ; }
Distance : 6

43
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return cls . wasCasted ( cls ) . removeChildren ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return cls . wasCasted ( cls ) . removeChildren ( cls ) ; }
Distance : 9

44
Tree	{ if ( outerClassInstance == null ) { return returnFake ( cls ) ; } return cls . wasCasted ( cls , cls ) ; }
Code	{ if ( outerClassInstance == null ) { return returnFake ( cls ) ; } return cls . wasCasted ( cls , cls ) ; }
Distance : 5

45
Tree	{ if ( DateTimePrinterInternalPrinter == null ) { return primitiveWrapperOf ( cls , cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( DateTimePrinterInternalPrinter == null ) { return primitiveWrapperOf ( cls , cls ) ; } return indexOfAny ( cls ) ; }
Distance : 7

46
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( cls , cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( cls , cls ) ; } return indexOfAny ( cls ) ; }
Distance : 8

47
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . defaultValueFor ( cls , cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . defaultValueFor ( cls , cls ) ; } return indexOfAny ( cls ) ; }
Distance : 8

48
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return inlineEmptyMethod ( this , cls ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return inlineEmptyMethod ( this , cls ) ; }
Distance : 4

49
Tree	{ if ( usingConstructor == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( this , cls ) ; }
Code	{ if ( usingConstructor == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( this , cls ) ; }
Distance : 5

50
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls . getPrinter ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls . getPrinter ( cls ) ) ; }
Distance : 7

51
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return cls . defaultValueFor ( cls ) . removeChildren ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return cls . defaultValueFor ( cls ) . removeChildren ( cls ) ; }
Distance : 9

52
Tree	{ if ( usingConstructor == null ) { return primitiveWrapperOf ( cls , NUMBER_CONSTANT ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( usingConstructor == null ) { return primitiveWrapperOf ( cls , NUMBER_CONSTANT ) ; } return indexOfAny ( cls ) ; }
Distance : 7

53
Tree	{ if ( RandomGeneratorFactory == null ) { return this . unescape ( cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( RandomGeneratorFactory == null ) { return this . unescape ( cls ) ; } return indexOfAny ( cls ) ; }
Distance : 7

54
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( Any.ANY , cls , EMPTY ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( Any.ANY , cls , EMPTY ) ; } return indexOfAny ( cls ) ; }
Distance : 10

55
Tree	{ if ( outerClassInstance == null ) { return completeAssignmentExpressionParseAtArrow ( cls , cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return completeAssignmentExpressionParseAtArrow ( cls , cls ) ; } return indexOfAny ( cls ) ; }
Distance : 6

56
Tree	{ if ( outerClassInstance == null ) { return completeAssignmentExpressionParseAtArrow ( cls ) ; } return indexOfAny ( cls , iValues.length ) ; }
Code	{ if ( outerClassInstance == null ) { return completeAssignmentExpressionParseAtArrow ( cls ) ; } return indexOfAny ( cls , iValues.length ) ; }
Distance : 3

57
Tree	{ if ( outerClassInstance == null ) { return this . addPeriod ( cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return this . addPeriod ( cls ) ; } return indexOfAny ( cls ) ; }
Distance : 6

58
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveWrapperOf ( Any.ANY ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveWrapperOf ( Any.ANY ) ; } return indexOfAny ( cls ) ; }
Distance : 7

59
Tree	{ if ( outerClassInstance == null ) { return trySubstituteEmptyFunction ( cls ) . removeChildren ( cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return trySubstituteEmptyFunction ( cls ) . removeChildren ( cls ) ; } return indexOfAny ( cls ) ; }
Distance : 9

60
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls , iValues.length ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls , iValues.length ) ; }
Distance : 3

61
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf () ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf () ; } return indexOfAny ( cls ) ; }
Distance : 7

62
Tree	{ if ( outerClassInstance == null ) { return completeAssignmentExpressionParseAtArrow ( cls ) ; } return indexOfAny ( cls , cls . getSimplifiedName ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return completeAssignmentExpressionParseAtArrow ( cls ) ; } return indexOfAny ( cls , cls . getSimplifiedName ( cls ) ) ; }
Distance : 8

63
Tree	{ if ( outerClassInstance == null ) { return completeAssignmentExpressionParseAtArrow ( cls ) ; } return indexOfAny ( this , cls ) ; }
Code	{ if ( outerClassInstance == null ) { return completeAssignmentExpressionParseAtArrow ( cls ) ; } return indexOfAny ( this , cls ) ; }
Distance : 4

64
Tree	{ if ( DateTimePrinterInternalPrinter == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls , cls . getSimplifiedName ( cls ) ) ; }
Code	{ if ( DateTimePrinterInternalPrinter == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls , cls . getSimplifiedName ( cls ) ) ; }
Distance : 9

65
Tree	{ if ( usingConstructor == null ) { return primitiveWrapperOf () ; } return indexOfAny ( cls ) ; }
Code	{ if ( usingConstructor == null ) { return primitiveWrapperOf () ; } return indexOfAny ( cls ) ; }
Distance : 8

66
Tree	{ if ( outerClassInstance == null ) { return completeAssignmentExpressionParseAtArrow () ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return completeAssignmentExpressionParseAtArrow () ; } return indexOfAny ( cls ) ; }
Distance : 7

67
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls . getTime ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls . getTime ( cls ) ) ; }
Distance : 7

68
Tree	{ if ( usingConstructor == null ) { return primitiveWrapperOf ( cls ) . removeChildren ( cls ) ; } return inlineEmptyMethod ( cls ) ; }
Code	{ if ( usingConstructor == null ) { return primitiveWrapperOf ( cls ) . removeChildren ( cls ) ; } return inlineEmptyMethod ( cls ) ; }
Distance : 10

69
Tree	{ if ( DateTimePrinterInternalPrinter == null ) { return primitiveWrapperOf () ; } return indexOfAny ( cls ) ; }
Code	{ if ( DateTimePrinterInternalPrinter == null ) { return primitiveWrapperOf () ; } return indexOfAny ( cls ) ; }
Distance : 8

70
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . wasCasted ( Any.ANY ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . wasCasted ( Any.ANY ) ; } return indexOfAny ( cls ) ; }
Distance : 7

71
Tree	{ if ( usingConstructor == null ) { return JAVA_1_8 . defaultValueFor ( cls , cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( usingConstructor == null ) { return JAVA_1_8 . defaultValueFor ( cls , cls ) ; } return indexOfAny ( cls ) ; }
Distance : 9

72
Tree	{ if ( DateTimePrinterInternalPrinter == null ) { return primitiveWrapperOf ( cls , NUMBER_CONSTANT ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( DateTimePrinterInternalPrinter == null ) { return primitiveWrapperOf ( cls , NUMBER_CONSTANT ) ; } return indexOfAny ( cls ) ; }
Distance : 7

73
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . defaultValueFor ( Any.ANY ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . defaultValueFor ( Any.ANY ) ; } return indexOfAny ( cls ) ; }
Distance : 7

74
Tree	{ if ( outerClassInstance == null ) { return completeAssignmentExpressionParseAtArrow ( cls ) ; } return indexOfAny ( cls . of ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return completeAssignmentExpressionParseAtArrow ( cls ) ; } return indexOfAny ( cls . of ( cls ) ) ; }
Distance : 7

75
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . defaultValueFor ( Any.ANY ) ; } return inlineEmptyMethod ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . defaultValueFor ( Any.ANY ) ; } return inlineEmptyMethod ( cls ) ; }
Distance : 7

76
Tree	{ if ( outerClassInstance == null ) { return trySubstituteEmptyFunction () ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return trySubstituteEmptyFunction () ; } return indexOfAny ( cls ) ; }
Distance : 7

77
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveWrapperOf () ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveWrapperOf () ; } return indexOfAny ( cls ) ; }
Distance : 7

78
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return inlineEmptyMethod ( cls , cls . of ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return inlineEmptyMethod ( cls , cls . of ( cls ) ) ; }
Distance : 8

79
Tree	{ if ( usingConstructor == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( Any.ANY ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( usingConstructor == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( Any.ANY ) ; } return indexOfAny ( cls ) ; }
Distance : 8

80
Tree	{ if ( usingConstructor == null ) { return primitiveWrapperOf ( cls ) ; } return inlineEmptyMethod ( this , cls ) ; }
Code	{ if ( usingConstructor == null ) { return primitiveWrapperOf ( cls ) ; } return inlineEmptyMethod ( this , cls ) ; }
Distance : 5

81
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return cls . wasCasted ( cls ) . validateObjectPattern ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return cls . wasCasted ( cls ) . validateObjectPattern ( cls ) ; }
Distance : 9

82
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( cls , cls ) ; } return inlineEmptyMethod ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( cls , cls ) ; } return inlineEmptyMethod ( cls ) ; }
Distance : 8

83
Tree	{ if ( usingConstructor == null ) { return primitiveWrapperOf ( cls , NUMBER_CONSTANT ) ; } return inlineEmptyMethod ( cls ) ; }
Code	{ if ( usingConstructor == null ) { return primitiveWrapperOf ( cls , NUMBER_CONSTANT ) ; } return inlineEmptyMethod ( cls ) ; }
Distance : 7

84
Tree	{ if ( usingConstructor == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls , cls . of ( cls ) ) ; }
Code	{ if ( usingConstructor == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls , cls . of ( cls ) ) ; }
Distance : 9

85
Tree	{ if ( RandomGeneratorFactory == null ) { return primitiveWrapperOf ( cls ) . removeChildren ( cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( RandomGeneratorFactory == null ) { return primitiveWrapperOf ( cls ) . removeChildren ( cls ) ; } return indexOfAny ( cls ) ; }
Distance : 10

86
Tree	{ if ( RandomGeneratorFactory == null ) { return primitiveWrapperOf () ; } return indexOfAny ( cls ) ; }
Code	{ if ( RandomGeneratorFactory == null ) { return primitiveWrapperOf () ; } return indexOfAny ( cls ) ; }
Distance : 8

87
Tree	{ if ( usingConstructor == null ) { return primitiveWrapperOf ( cls ) . removeChildren ( cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( usingConstructor == null ) { return primitiveWrapperOf ( cls ) . removeChildren ( cls ) ; } return indexOfAny ( cls ) ; }
Distance : 10

88
Tree	{ if ( usingConstructor == null ) { return JAVA_1_8 . primitiveValueOrNullFor () ; } return indexOfAny ( cls ) ; }
Code	{ if ( usingConstructor == null ) { return JAVA_1_8 . primitiveValueOrNullFor () ; } return indexOfAny ( cls ) ; }
Distance : 8

89
Tree	{ if ( usingConstructor == null ) { return JAVA_1_8 . defaultValueFor () ; } return indexOfAny ( cls ) ; }
Code	{ if ( usingConstructor == null ) { return JAVA_1_8 . defaultValueFor () ; } return indexOfAny ( cls ) ; }
Distance : 8

90
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( Any.ANY , false ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( Any.ANY , false ) ; } return indexOfAny ( cls ) ; }
Distance : 9

91
Tree	{ if ( RandomGeneratorFactory == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls , iValues.length ) ; }
Code	{ if ( RandomGeneratorFactory == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls , iValues.length ) ; }
Distance : 4

92
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) . removeChildren ( cls ) ; } return inlineEmptyMethod ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) . removeChildren ( cls ) ; } return inlineEmptyMethod ( cls ) ; }
Distance : 9

93
Tree	{ if ( outerClassInstance == null ) { return completeAssignmentExpressionParseAtArrow ( cls , NUMBER_CONSTANT ) ; } return inlineEmptyMethod ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return completeAssignmentExpressionParseAtArrow ( cls , NUMBER_CONSTANT ) ; } return inlineEmptyMethod ( cls ) ; }
Distance : 6

94
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . wasCasted () ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . wasCasted () ; } return indexOfAny ( cls ) ; }
Distance : 7

95
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . defaultValueFor ( Any.ANY , false ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . defaultValueFor ( Any.ANY , false ) ; } return indexOfAny ( cls ) ; }
Distance : 9

96
Tree	{ if ( outerClassInstance == null ) { return returnFake () ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return returnFake () ; } return indexOfAny ( cls ) ; }
Distance : 7

97
Tree	{ if ( DateTimePrinterInternalPrinter == null ) { return primitiveWrapperOf ( cls ) ; } return cls . wasCasted ( cls ) . removeChildren ( cls ) ; }
Code	{ if ( DateTimePrinterInternalPrinter == null ) { return primitiveWrapperOf ( cls ) ; } return cls . wasCasted ( cls ) . removeChildren ( cls ) ; }
Distance : 10

98
Tree	{ if ( usingConstructor == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls . getPrinter ( cls ) ) ; }
Code	{ if ( usingConstructor == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls . getPrinter ( cls ) ) ; }
Distance : 8

99
Tree	{ if ( DateTimePrinterInternalPrinter == null ) { return JAVA_1_8 . primitiveValueOrNullFor () ; } return indexOfAny ( cls ) ; }
Code	{ if ( DateTimePrinterInternalPrinter == null ) { return JAVA_1_8 . primitiveValueOrNullFor () ; } return indexOfAny ( cls ) ; }
Distance : 8

100
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . isA () ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . isA () ; } return indexOfAny ( cls ) ; }
Distance : 7

101
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveWrapperOf ( Any.ANY , cls , EMPTY ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveWrapperOf ( Any.ANY , cls , EMPTY ) ; } return indexOfAny ( cls ) ; }
Distance : 10

102
Tree	{ if ( usingConstructor == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( Any.ANY , cls , EMPTY ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( usingConstructor == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( Any.ANY , cls , EMPTY ) ; } return indexOfAny ( cls ) ; }
Distance : 11

103
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . wasCasted ( cls , cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . wasCasted ( cls , cls ) ; } return indexOfAny ( cls ) ; }
Distance : 8

104
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return inlineEmptyMethod ( cls . getPrinter ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return inlineEmptyMethod ( cls . getPrinter ( cls ) ) ; }
Distance : 7

105
Tree	{ if ( outerClassInstance == null ) { return completeAssignmentExpressionParseAtArrow ( cls ) . removeChildren ( cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return completeAssignmentExpressionParseAtArrow ( cls ) . removeChildren ( cls ) ; } return indexOfAny ( cls ) ; }
Distance : 9

106
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveWrapperOf ( cls , cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveWrapperOf ( cls , cls ) ; } return indexOfAny ( cls ) ; }
Distance : 8

107
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . defaultValueFor ( cls , cls ) ; } return inlineEmptyMethod ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . defaultValueFor ( cls , cls ) ; } return inlineEmptyMethod ( cls ) ; }
Distance : 8

108
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return inlineEmptyMethod ( cls , iValues.length ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return inlineEmptyMethod ( cls , iValues.length ) ; }
Distance : 3

109
Tree	{ if ( usingConstructor == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( cls , cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( usingConstructor == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( cls , cls ) ; } return indexOfAny ( cls ) ; }
Distance : 9

110
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls , NUMBER_CONSTANT ) ; } return containsAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls , NUMBER_CONSTANT ) ; } return containsAny ( cls ) ; }
Distance : 6

111
Tree	{ if ( outerClassInstance == null ) { return trySubstituteEmptyFunction ( cls ) ; } return indexOfAny ( this , cls ) ; }
Code	{ if ( outerClassInstance == null ) { return trySubstituteEmptyFunction ( cls ) ; } return indexOfAny ( this , cls ) ; }
Distance : 4

112
Tree	{ if ( outerClassInstance == null ) { return trySubstituteEmptyFunction ( cls , cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return trySubstituteEmptyFunction ( cls , cls ) ; } return indexOfAny ( cls ) ; }
Distance : 6

113
Tree	{ if ( outerClassInstance == null ) { return trySubstituteEmptyFunction ( cls ) ; } return indexOfAny ( cls , iValues.length ) ; }
Code	{ if ( outerClassInstance == null ) { return trySubstituteEmptyFunction ( cls ) ; } return indexOfAny ( cls , iValues.length ) ; }
Distance : 3

114
Tree	{ if ( RandomGeneratorFactory == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( this , cls ) ; }
Code	{ if ( RandomGeneratorFactory == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( this , cls ) ; }
Distance : 5

115
Tree	{ if ( DateTimePrinterInternalPrinter == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( this , cls ) ; }
Code	{ if ( DateTimePrinterInternalPrinter == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( this , cls ) ; }
Distance : 5

116
Tree	{ if ( outerClassInstance == null ) { return completeAssignmentExpressionParseAtArrow ( cls ) ; } return cls . wasCasted ( cls ) . removeChildren ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return completeAssignmentExpressionParseAtArrow ( cls ) ; } return cls . wasCasted ( cls ) . removeChildren ( cls ) ; }
Distance : 9

117
Tree	{ if ( usingConstructor == null ) { return completeAssignmentExpressionParseAtArrow () ; } return indexOfAny ( cls ) ; }
Code	{ if ( usingConstructor == null ) { return completeAssignmentExpressionParseAtArrow () ; } return indexOfAny ( cls ) ; }
Distance : 8

118
Tree	{ if ( outerClassInstance == null ) { return completeAssignmentExpressionParseAtArrow ( cls ) ; } return cls . wasCasted ( cls , cls ) ; }
Code	{ if ( outerClassInstance == null ) { return completeAssignmentExpressionParseAtArrow ( cls ) ; } return cls . wasCasted ( cls , cls ) ; }
Distance : 5

119
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls , NUMBER_CONSTANT ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls , NUMBER_CONSTANT ) ; } return indexOfAny ( cls ) ; }
Distance : 6

120
Tree	{ if ( usingConstructor == null ) { return this . unescape ( cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( usingConstructor == null ) { return this . unescape ( cls ) ; } return indexOfAny ( cls ) ; }
Distance : 7

121
Tree	{ if ( usingConstructor == null ) { return primitiveWrapperOf ( cls ) ; } return cls . wasCasted ( cls , cls ) ; }
Code	{ if ( usingConstructor == null ) { return primitiveWrapperOf ( cls ) ; } return cls . wasCasted ( cls , cls ) ; }
Distance : 6

122
Tree	{ if ( outerClassInstance == null ) { return this . unescape ( cls ) ; } return inlineEmptyMethod ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return this . unescape ( cls ) ; } return inlineEmptyMethod ( cls ) ; }
Distance : 6

123
Tree	{ if ( DateTimePrinterInternalPrinter == null ) { return primitiveWrapperOf ( cls ) ; } return cls . wasCasted ( cls , cls ) ; }
Code	{ if ( DateTimePrinterInternalPrinter == null ) { return primitiveWrapperOf ( cls ) ; } return cls . wasCasted ( cls , cls ) ; }
Distance : 6

124
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( Any.ANY , cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( Any.ANY , cls ) ; } return indexOfAny ( cls ) ; }
Distance : 8

125
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( Any.ANY , cls , EMPTY ) ; } return inlineEmptyMethod ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( Any.ANY , cls , EMPTY ) ; } return inlineEmptyMethod ( cls ) ; }
Distance : 10

126
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return inlineEmptyMethod ( cls . of ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return inlineEmptyMethod ( cls . of ( cls ) ) ; }
Distance : 7

127
Tree	{ if ( usingConstructor == null ) { return primitiveWrapperOf ( cls ) ; } return cls . wasCasted ( cls ) . removeChildren ( cls ) ; }
Code	{ if ( usingConstructor == null ) { return primitiveWrapperOf ( cls ) ; } return cls . wasCasted ( cls ) . removeChildren ( cls ) ; }
Distance : 10

128
Tree	{ if ( RandomGeneratorFactory == null ) { return primitiveWrapperOf ( cls , cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( RandomGeneratorFactory == null ) { return primitiveWrapperOf ( cls , cls ) ; } return indexOfAny ( cls ) ; }
Distance : 7

129
Tree	{ if ( DateTimePrinterInternalPrinter == null ) { return primitiveWrapperOf ( cls ) . removeChildren ( cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( DateTimePrinterInternalPrinter == null ) { return primitiveWrapperOf ( cls ) . removeChildren ( cls ) ; } return indexOfAny ( cls ) ; }
Distance : 10

130
Tree	{ if ( usingConstructor == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls . of ( cls ) ) ; }
Code	{ if ( usingConstructor == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls . of ( cls ) ) ; }
Distance : 8

131
Tree	{ if ( usingConstructor == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls , iValues.length ) ; }
Code	{ if ( usingConstructor == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls , iValues.length ) ; }
Distance : 4

132
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( Any.ANY ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( Any.ANY ) ; } return indexOfAny ( cls ) ; }
Distance : 7

133
Tree	{ if ( outerClassInstance == null ) { appendDigits ( cls ) ; return indexOfAny ( normalizeChildren ( cls ) ) ; } else }
Code	{ if ( outerClassInstance == null ) { appendDigits ( cls ) ; return indexOfAny ( normalizeChildren ( cls ) ) ; } else }
Distance : 10

134
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls , NUMBER_CONSTANT ) ; } return inlineEmptyMethod ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls , NUMBER_CONSTANT ) ; } return inlineEmptyMethod ( cls ) ; }
Distance : 6

135
Tree	{ if ( usingConstructor == null ) { return JAVA_1_8 . defaultValueFor ( Any.ANY , cls , EMPTY ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( usingConstructor == null ) { return JAVA_1_8 . defaultValueFor ( Any.ANY , cls , EMPTY ) ; } return indexOfAny ( cls ) ; }
Distance : 11

136
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . defaultValueFor ( Any.ANY , cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . defaultValueFor ( Any.ANY , cls ) ; } return indexOfAny ( cls ) ; }
Distance : 8

137
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . defaultValueFor ( Any.ANY , cls , EMPTY ) ; } return inlineEmptyMethod ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . defaultValueFor ( Any.ANY , cls , EMPTY ) ; } return inlineEmptyMethod ( cls ) ; }
Distance : 10

138
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . defaultValueFor ( Any.ANY , cls , EMPTY ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . defaultValueFor ( Any.ANY , cls , EMPTY ) ; } return indexOfAny ( cls ) ; }
Distance : 10

139
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls , cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls , cls ) ; } return indexOfAny ( cls ) ; }
Distance : 6

140
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls , Any.ANY ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls , Any.ANY ) ; }
Distance : 3

141
Tree	{ if ( DateTimePrinterInternalPrinter == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls , iValues.length ) ; }
Code	{ if ( DateTimePrinterInternalPrinter == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls , iValues.length ) ; }
Distance : 4

142
Tree	{ if ( outerClassInstance == null ) { return completeAssignmentExpressionParseAtArrow ( cls , NUMBER_CONSTANT ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return completeAssignmentExpressionParseAtArrow ( cls , NUMBER_CONSTANT ) ; } return indexOfAny ( cls ) ; }
Distance : 6

143
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . wasCasted ( Any.ANY , cls , EMPTY ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . wasCasted ( Any.ANY , cls , EMPTY ) ; } return indexOfAny ( cls ) ; }
Distance : 10

144
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls , cls ) ; } return tryFoldInForcedStringContext ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls , cls ) ; } return tryFoldInForcedStringContext ( cls ) ; }
Distance : 6

145
Tree	{ if ( usingConstructor == null ) { return JAVA_1_8 . defaultValueFor ( Any.ANY ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( usingConstructor == null ) { return JAVA_1_8 . defaultValueFor ( Any.ANY ) ; } return indexOfAny ( cls ) ; }
Distance : 8

146
Tree	{ if ( outerClassInstance == null ) { appendDigits ( cls ) ; return indexOfAny ( isNewControlBranch ( cls ) ) ; } else }
Code	{ if ( outerClassInstance == null ) { appendDigits ( cls ) ; return indexOfAny ( isNewControlBranch ( cls ) ) ; } else }
Distance : 10

147
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveWrapperOf ( Any.ANY , false ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveWrapperOf ( Any.ANY , false ) ; } return indexOfAny ( cls ) ; }
Distance : 9

148
Tree	{ if ( outerClassInstance == null ) { return trySubstituteEmptyFunction ( cls ) ; } return cls . wasCasted ( cls ) . removeChildren ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return trySubstituteEmptyFunction ( cls ) ; } return cls . wasCasted ( cls ) . removeChildren ( cls ) ; }
Distance : 9

149
Tree	{ if ( usingConstructor == null ) { appendDigits ( cls ) ; return indexOfAny ( normalizeChildren ( cls ) ) ; } else }
Code	{ if ( usingConstructor == null ) { appendDigits ( cls ) ; return indexOfAny ( normalizeChildren ( cls ) ) ; } else }
Distance : 11

150
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls , new DefineCallbackReturnCallback ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls , new DefineCallbackReturnCallback ( cls ) ) ; }
Distance : 7

151
Tree	{ if ( usingConstructor == null ) { return JAVA_1_8 . defaultValueFor ( Any.ANY , cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( usingConstructor == null ) { return JAVA_1_8 . defaultValueFor ( Any.ANY , cls ) ; } return indexOfAny ( cls ) ; }
Distance : 9

152
Tree	{ if ( RandomGeneratorFactory == null ) { return primitiveWrapperOf ( cls ) ; } return cls . wasCasted ( cls ) . removeChildren ( cls ) ; }
Code	{ if ( RandomGeneratorFactory == null ) { return primitiveWrapperOf ( cls ) ; } return cls . wasCasted ( cls ) . removeChildren ( cls ) ; }
Distance : 10

153
Tree	{ if ( outerClassInstance == null ) { validateObjectPattern ( cls ) ; return indexOfAny ( normalizeChildren ( cls ) ) ; } else }
Code	{ if ( outerClassInstance == null ) { validateObjectPattern ( cls ) ; return indexOfAny ( normalizeChildren ( cls ) ) ; } else }
Distance : 10

154
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . defaultValueFor ( STRING_CONSTANT ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . defaultValueFor ( STRING_CONSTANT ) ; } return indexOfAny ( cls ) ; }
Distance : 7

155
Tree	{ if ( usingConstructor == null ) { return JAVA_1_8 . defaultValueFor ( Any.ANY , false ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( usingConstructor == null ) { return JAVA_1_8 . defaultValueFor ( Any.ANY , false ) ; } return indexOfAny ( cls ) ; }
Distance : 10

156
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( Any.ANY , false ) ; } return inlineEmptyMethod ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( Any.ANY , false ) ; } return inlineEmptyMethod ( cls ) ; }
Distance : 9

157
Tree	{ if ( outerClassInstance == null ) { setData ( cls ) ; return indexOfAny ( isNewControlBranch ( cls ) ) ; } else }
Code	{ if ( outerClassInstance == null ) { setData ( cls ) ; return indexOfAny ( isNewControlBranch ( cls ) ) ; } else }
Distance : 10

158
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . wasCasted ( Any.ANY , false ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . wasCasted ( Any.ANY , false ) ; } return indexOfAny ( cls ) ; }
Distance : 9

159
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveWrapperOf ( Any.ANY , cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveWrapperOf ( Any.ANY , cls ) ; } return indexOfAny ( cls ) ; }
Distance : 8

160
Tree	{ if ( usingConstructor == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( Any.ANY , false ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( usingConstructor == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( Any.ANY , false ) ; } return indexOfAny ( cls ) ; }
Distance : 10

161
Tree	{ if ( DateTimePrinterInternalPrinter == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( Any.ANY , false ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( DateTimePrinterInternalPrinter == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( Any.ANY , false ) ; } return indexOfAny ( cls ) ; }
Distance : 10

162
Tree	{ if ( outerClassInstance == null ) { setData ( cls ) ; return indexOfAny ( normalizeChildren ( cls ) ) ; } else }
Code	{ if ( outerClassInstance == null ) { setData ( cls ) ; return indexOfAny ( normalizeChildren ( cls ) ) ; } else }
Distance : 10

163
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( Any.ANY ) ; } return inlineEmptyMethod ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( Any.ANY ) ; } return inlineEmptyMethod ( cls ) ; }
Distance : 7

164
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . wasCasted ( Any.ANY , cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . wasCasted ( Any.ANY , cls ) ; } return indexOfAny ( cls ) ; }
Distance : 8

165
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( Any.ANY , cls ) ; } return inlineEmptyMethod ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( Any.ANY , cls ) ; } return inlineEmptyMethod ( cls ) ; }
Distance : 8

166
Tree	{ if ( usingConstructor == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( Any.ANY , cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( usingConstructor == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( Any.ANY , cls ) ; } return indexOfAny ( cls ) ; }
Distance : 9

167
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( STRING_CONSTANT ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( STRING_CONSTANT ) ; } return indexOfAny ( cls ) ; }
Distance : 7

168
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls , new BasicStroke ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls , new BasicStroke ( cls ) ) ; }
Distance : 7

169
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveWrapperOf ( STRING_CONSTANT ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveWrapperOf ( STRING_CONSTANT ) ; } return indexOfAny ( cls ) ; }
Distance : 7

170
Tree	{ if ( usingConstructor == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( STRING_CONSTANT ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( usingConstructor == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( STRING_CONSTANT ) ; } return indexOfAny ( cls ) ; }
Distance : 8

171
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls . of ( cls ) , filterNoResolvedType ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls . of ( cls ) , filterNoResolvedType ( cls ) ) ; }
Distance : 11

172
Tree	{ if ( usingConstructor == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls , new DefineCallbackReturnCallback ( cls ) ) ; }
Code	{ if ( usingConstructor == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls , new DefineCallbackReturnCallback ( cls ) ) ; }
Distance : 8

173
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return inlineEmptyMethod ( cls , new DefineCallbackReturnCallback ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return inlineEmptyMethod ( cls , new DefineCallbackReturnCallback ( cls ) ) ; }
Distance : 7

174
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls , new Random ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls , new Random ( cls ) ) ; }
Distance : 7

175
Tree	{ if ( outerClassInstance == null ) { trySubstituteEmptyFunction ( cls ) ; return indexOfAny ( normalizeChildren ( cls ) ) ; } else }
Code	{ if ( outerClassInstance == null ) { trySubstituteEmptyFunction ( cls ) ; return indexOfAny ( normalizeChildren ( cls ) ) ; } else }
Distance : 10

176
Tree	{ if ( usingConstructor == null ) { appendDigits ( cls ) ; return indexOfAny ( isNewControlBranch ( cls ) ) ; } else }
Code	{ if ( usingConstructor == null ) { appendDigits ( cls ) ; return indexOfAny ( isNewControlBranch ( cls ) ) ; } else }
Distance : 11

177
Tree	{ if ( DateTimePrinterInternalPrinter == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( Any.ANY , cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( DateTimePrinterInternalPrinter == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( Any.ANY , cls ) ; } return indexOfAny ( cls ) ; }
Distance : 9

178
Tree	{ if ( usingConstructor == null ) { return JAVA_1_8 . defaultValueFor ( STRING_CONSTANT ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( usingConstructor == null ) { return JAVA_1_8 . defaultValueFor ( STRING_CONSTANT ) ; } return indexOfAny ( cls ) ; }
Distance : 8

179
Tree	{ if ( outerClassInstance == null ) { appendDigits ( cls ) ; return indexOfAny ( cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { appendDigits ( cls ) ; return indexOfAny ( cls ) ; } return indexOfAny ( cls ) ; }
Distance : 9

180
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return inlineEmptyMethod ( cls , new Random ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return inlineEmptyMethod ( cls , new Random ( cls ) ) ; }
Distance : 7

181
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( STRING_CONSTANT ) ; } return inlineEmptyMethod ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . primitiveValueOrNullFor ( STRING_CONSTANT ) ; } return inlineEmptyMethod ( cls ) ; }
Distance : 7

182
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls , new TitleChangeEvent ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls , new TitleChangeEvent ( cls ) ) ; }
Distance : 7

183
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . defaultValueFor ( STRING_CONSTANT ) ; } return inlineEmptyMethod ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . defaultValueFor ( STRING_CONSTANT ) ; } return inlineEmptyMethod ( cls ) ; }
Distance : 7

184
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls , new MarkerChangeEvent ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls , new MarkerChangeEvent ( cls ) ) ; }
Distance : 7

185
Tree	{ if ( outerClassInstance == null ) { return JAVA_1_8 . wasCasted ( STRING_CONSTANT ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { return JAVA_1_8 . wasCasted ( STRING_CONSTANT ) ; } return indexOfAny ( cls ) ; }
Distance : 7

186
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls . getPrinter ( cls ) , filterNoResolvedType ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls . getPrinter ( cls ) , filterNoResolvedType ( cls ) ) ; }
Distance : 11

187
Tree	{ if ( outerClassInstance == null ) { appendDigits ( cls ) ; return indexOfAny ( cls ) ; } return inlineEmptyMethod ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { appendDigits ( cls ) ; return indexOfAny ( cls ) ; } return inlineEmptyMethod ( cls ) ; }
Distance : 9

188
Tree	{ if ( outerClassInstance == null ) { setData ( cls ) ; return indexOfAny ( cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { setData ( cls ) ; return indexOfAny ( cls ) ; } return indexOfAny ( cls ) ; }
Distance : 9

189
Tree	{ if ( usingConstructor == null ) { appendDigits ( cls ) ; return indexOfAny ( cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( usingConstructor == null ) { appendDigits ( cls ) ; return indexOfAny ( cls ) ; } return indexOfAny ( cls ) ; }
Distance : 10

190
Tree	{ if ( outerClassInstance == null ) { validateObjectPattern ( cls ) ; return indexOfAny ( cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { validateObjectPattern ( cls ) ; return indexOfAny ( cls ) ; } return indexOfAny ( cls ) ; }
Distance : 9

191
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls . of ( cls ) , boundsOf ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls . of ( cls ) , boundsOf ( cls ) ) ; }
Distance : 11

192
Tree	{ if ( outerClassInstance == null ) { trySubstituteEmptyFunction ( cls ) ; return indexOfAny ( cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { trySubstituteEmptyFunction ( cls ) ; return indexOfAny ( cls ) ; } return indexOfAny ( cls ) ; }
Distance : 9

193
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls . of ( cls ) , validateObjectPattern ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls . of ( cls ) , validateObjectPattern ( cls ) ) ; }
Distance : 11

194
Tree	{ if ( DateTimePrinterInternalPrinter == null ) { appendDigits ( cls ) ; return indexOfAny ( cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( DateTimePrinterInternalPrinter == null ) { appendDigits ( cls ) ; return indexOfAny ( cls ) ; } return indexOfAny ( cls ) ; }
Distance : 10

195
Tree	{ if ( outerClassInstance == null ) { appendDigits ( cls ) ; return validateObjectPattern ( cls ) ; } return indexOfAny ( cls ) ; }
Code	{ if ( outerClassInstance == null ) { appendDigits ( cls ) ; return validateObjectPattern ( cls ) ; } return indexOfAny ( cls ) ; }
Distance : 9

196
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls . getPrinter ( cls ) , boundsOf ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls . getPrinter ( cls ) , boundsOf ( cls ) ) ; }
Distance : 11

197
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls . getPrinter ( cls ) , validateObjectPattern ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls . getPrinter ( cls ) , validateObjectPattern ( cls ) ) ; }
Distance : 11

198
Tree	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return inlineEmptyMethod ( cls . of ( cls ) , filterNoResolvedType ( cls ) ) ; }
Code	{ if ( outerClassInstance == null ) { return primitiveWrapperOf ( cls ) ; } return inlineEmptyMethod ( cls . of ( cls ) , filterNoResolvedType ( cls ) ) ; }
Distance : 11

199
Tree	{ if ( usingConstructor == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls . of ( cls ) , filterNoResolvedType ( cls ) ) ; }
Code	{ if ( usingConstructor == null ) { return primitiveWrapperOf ( cls ) ; } return indexOfAny ( cls . of ( cls ) , filterNoResolvedType ( cls ) ) ; }
Distance : 12

========================================================================


========================================================================
Example Number: 83
Parent Code is: 
Object injected = mockCandidateFilter . filterCandidate ( mocks , field , instance ) . thenInject () ;
-------------------------------------------------------------------------------
Child code is: 
Object injected = mockCandidateFilter . filterCandidate ( mocks , field , orderedInstanceFields , instance ) . thenInject () ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Object})) (59 (800{val=injected}) (204{val==}) (32 (32 (800{val=mockCandidateFilter}) (235{val=.}) (802{val=filterCandidate}) (214{val=(}) (800{val=mocks}) (234{val=,}) (800{val=field}) (234{val=,}) (800{val=instance}) (215{val=)})) (235{val=.}) (802{val=thenInject}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Object})) (59 (800{val=injected}) (204{val==}) (32 (32 (800{val=mockCandidateFilter}) (235{val=.}) (802{val=filterCandidate}) (214{val=(}) (800{val=mocks}) (234{val=,}) (800{val=field}) (234{val=,}) (800{val=orderedInstanceFields}) (234{val=,}) (800{val=instance}) (215{val=)})) (235{val=.}) (802{val=thenInject}) (216{val=()}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/19/parent/src_org_mockito_internal_configuration_injection_PropertyAndSetterInjection.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( mocks , field , instance ) . getInf () ;
Code	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( mocks , field , instance ) . getInf () ;
Distance : 6

1
Tree	Object finalMessage = sgX . hasDuplicateDeclarationSuppression ( mocks , field , instance ) . getInf () ;
Code	Object finalMessage = sgX . hasDuplicateDeclarationSuppression ( mocks , field , instance ) . getInf () ;
Distance : 6

2
Tree	Object toAdd = sgX . getPrototypeNameOfMethod ( mocks , field , instance ) . getInf () ;
Code	Object toAdd = sgX . getPrototypeNameOfMethod ( mocks , field , instance ) . getInf () ;
Distance : 6

3
Tree	Object toAdd = sgX . createConfig ( mocks , field , instance ) . getInf () ;
Code	Object toAdd = sgX . createConfig ( mocks , field , instance ) . getInf () ;
Distance : 6

4
Tree	Object finalMessage = sgX . getPrototypeNameOfMethod ( mocks , field , instance ) . getInf () ;
Code	Object finalMessage = sgX . getPrototypeNameOfMethod ( mocks , field , instance ) . getInf () ;
Distance : 6

5
Tree	Object finalMessage = sgX . createConfig ( mocks , field , instance ) . getInf () ;
Code	Object finalMessage = sgX . createConfig ( mocks , field , instance ) . getInf () ;
Distance : 6

6
Tree	Object toAdd = IOUtil . hasDuplicateDeclarationSuppression ( mocks , field , instance ) . getInf () ;
Code	Object toAdd = IOUtil . hasDuplicateDeclarationSuppression ( mocks , field , instance ) . getInf () ;
Distance : 6

7
Tree	Object mockDescription = sgX . hasDuplicateDeclarationSuppression ( mocks , field , instance ) . getInf () ;
Code	Object mockDescription = sgX . hasDuplicateDeclarationSuppression ( mocks , field , instance ) . getInf () ;
Distance : 6

8
Tree	Object toAdd = ( ( mocks ) field ) . compute ( mocks , field , instance ) . getInf () ;
Code	Object toAdd = ( ( mocks ) field ) . compute ( mocks , field , instance ) . getInf () ;
Distance : 11

9
Tree	Object finalMessage = ( ( mocks ) field ) . compute ( mocks , field , instance ) . getInf () ;
Code	Object finalMessage = ( ( mocks ) field ) . compute ( mocks , field , instance ) . getInf () ;
Distance : 11

10
Tree	Object toAdd = ( ( mocks ) field ) . addWrapPartial ( mocks , field , instance ) . getInf () ;
Code	Object toAdd = ( ( mocks ) field ) . addWrapPartial ( mocks , field , instance ) . getInf () ;
Distance : 11

11
Tree	Object toAdd = ( ( mocks ) field ) . describedAs ( mocks , field , instance ) . getInf () ;
Code	Object toAdd = ( ( mocks ) field ) . describedAs ( mocks , field , instance ) . getInf () ;
Distance : 11

12
Tree	Object finalMessage = ( ( mocks ) field ) . addWrapPartial ( mocks , field , instance ) . getInf () ;
Code	Object finalMessage = ( ( mocks ) field ) . addWrapPartial ( mocks , field , instance ) . getInf () ;
Distance : 11

13
Tree	Object finalMessage = ( ( mocks ) field ) . describedAs ( mocks , field , instance ) . getInf () ;
Code	Object finalMessage = ( ( mocks ) field ) . describedAs ( mocks , field , instance ) . getInf () ;
Distance : 11

14
Tree	Object toAdd = ( ( mocks ) field ) . compute ( mocks , field , instance ) . hasMessage () ;
Code	Object toAdd = ( ( mocks ) field ) . compute ( mocks , field , instance ) . hasMessage () ;
Distance : 11

15
Tree	Object mockDescription = ( ( mocks ) field ) . compute ( mocks , field , instance ) . getInf () ;
Code	Object mockDescription = ( ( mocks ) field ) . compute ( mocks , field , instance ) . getInf () ;
Distance : 11

16
Tree	Object finalMessage = sgX . hasDuplicateDeclarationSuppression () ;
Code	Object finalMessage = sgX . hasDuplicateDeclarationSuppression () ;
Distance : 14

17
Tree	Object finalMessage = ( ( mocks ) this ) . addWrapPartial ( mocks , field , instance ) . getInf () ;
Code	Object finalMessage = ( ( mocks ) this ) . addWrapPartial ( mocks , field , instance ) . getInf () ;
Distance : 11

18
Tree	Object mockDescription = sgX ( mocks , field , instance ) . getInf () ;
Code	Object mockDescription = sgX ( mocks , field , instance ) . getInf () ;
Distance : 7

19
Tree	Object finalMessage = IOUtil ( mocks , field , instance ) . getInf () ;
Code	Object finalMessage = IOUtil ( mocks , field , instance ) . getInf () ;
Distance : 7

20
Tree	Object toAdd = sgX ( mocks , field , instance ) . describedAs () ;
Code	Object toAdd = sgX ( mocks , field , instance ) . describedAs () ;
Distance : 7

21
Tree	Object finalMessage = extractCauseUnchecked ( mocks , NUMBER_CONSTANT ) . addWrapPartial () ;
Code	Object finalMessage = extractCauseUnchecked ( mocks , NUMBER_CONSTANT ) . addWrapPartial () ;
Distance : 10

22
Tree	Object toAdd = sgX . getPrototypeNameOfMethod ( mocks , field , instance . valueOf () ) . getExternProperties () ;
Code	Object toAdd = sgX . getPrototypeNameOfMethod ( mocks , field , instance . valueOf () ) . getExternProperties () ;
Distance : 8

23
Tree	Object toAdd = ( ( mocks ) this ) . describedAs ( mocks , field , instance ) . hasMessage () ;
Code	Object toAdd = ( ( mocks ) this ) . describedAs ( mocks , field , instance ) . hasMessage () ;
Distance : 11

24
Tree	Object finalMessage = sgX . hasDuplicateDeclarationSuppression ( mocks , field ) . getInf () ;
Code	Object finalMessage = sgX . hasDuplicateDeclarationSuppression ( mocks , field ) . getInf () ;
Distance : 8

25
Tree	Object finalMessage = extractCauseUnchecked ( mocks , field , false ) . getInf () ;
Code	Object finalMessage = extractCauseUnchecked ( mocks , field , false ) . getInf () ;
Distance : 8

26
Tree	Object toAdd = IOUtil ( mocks , field , instance ) . getInf () ;
Code	Object toAdd = IOUtil ( mocks , field , instance ) . getInf () ;
Distance : 7

27
Tree	Object toAdd = ( ( mocks ) this ) . compute ( mocks , field , instance ) . hasMessage () ;
Code	Object toAdd = ( ( mocks ) this ) . compute ( mocks , field , instance ) . hasMessage () ;
Distance : 11

28
Tree	Object toAdd = extractCauseUnchecked ( mocks , NUMBER_CONSTANT ) . addWrapPartial () ;
Code	Object toAdd = extractCauseUnchecked ( mocks , NUMBER_CONSTANT ) . addWrapPartial () ;
Distance : 10

29
Tree	Object finalMessage = sgX . hasDuplicateDeclarationSuppression ( mocks , field , instance . valueOf () ) . getExternProperties () ;
Code	Object finalMessage = sgX . hasDuplicateDeclarationSuppression ( mocks , field , instance . valueOf () ) . getExternProperties () ;
Distance : 8

30
Tree	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( mocks , field ) . getInf () ;
Code	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( mocks , field ) . getInf () ;
Distance : 8

31
Tree	Object toAdd = extractCauseUnchecked ( mocks , NUMBER_CONSTANT ) . removeChildren () ;
Code	Object toAdd = extractCauseUnchecked ( mocks , NUMBER_CONSTANT ) . removeChildren () ;
Distance : 10

32
Tree	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( LanguageMode.ECMASCRIPT8 , field , instance ) . getInf () ;
Code	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( LanguageMode.ECMASCRIPT8 , field , instance ) . getInf () ;
Distance : 7

33
Tree	Object finalMessage = sgX . hasDuplicateDeclarationSuppression ( LanguageMode.ECMASCRIPT8 , field , instance ) . getInf () ;
Code	Object finalMessage = sgX . hasDuplicateDeclarationSuppression ( LanguageMode.ECMASCRIPT8 , field , instance ) . getInf () ;
Distance : 7

34
Tree	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( finderStub.actualToReturn , field , instance ) . getInf () ;
Code	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( finderStub.actualToReturn , field , instance ) . getInf () ;
Distance : 7

35
Tree	Object toAdd = sgX . getPrototypeNameOfMethod ( LanguageMode.ECMASCRIPT8 , field , instance ) . getInf () ;
Code	Object toAdd = sgX . getPrototypeNameOfMethod ( LanguageMode.ECMASCRIPT8 , field , instance ) . getInf () ;
Distance : 7

36
Tree	Object toAdd = sgX . createConfig ( LanguageMode.ECMASCRIPT8 , field , instance ) . getInf () ;
Code	Object toAdd = sgX . createConfig ( LanguageMode.ECMASCRIPT8 , field , instance ) . getInf () ;
Distance : 7

37
Tree	Object finalMessage = sgX . hasDuplicateDeclarationSuppression ( finderStub.actualToReturn , field , instance ) . getInf () ;
Code	Object finalMessage = sgX . hasDuplicateDeclarationSuppression ( finderStub.actualToReturn , field , instance ) . getInf () ;
Distance : 7

38
Tree	Object finalMessage = sgX . getPrototypeNameOfMethod ( LanguageMode.ECMASCRIPT8 , field , instance ) . getInf () ;
Code	Object finalMessage = sgX . getPrototypeNameOfMethod ( LanguageMode.ECMASCRIPT8 , field , instance ) . getInf () ;
Distance : 7

39
Tree	Object finalMessage = sgX . createConfig ( LanguageMode.ECMASCRIPT8 , field , instance ) . getInf () ;
Code	Object finalMessage = sgX . createConfig ( LanguageMode.ECMASCRIPT8 , field , instance ) . getInf () ;
Distance : 7

40
Tree	Object toAdd = this . withDurationTypeUsingTotalMillis () . addWrapField () ;
Code	Object toAdd = this . withDurationTypeUsingTotalMillis () . addWrapField () ;
Distance : 13

41
Tree	Object finalMessage = this . withDurationTypeUsingTotalMillis () . addWrapField () ;
Code	Object finalMessage = this . withDurationTypeUsingTotalMillis () . addWrapField () ;
Distance : 13

42
Tree	Object finalMessage = ( ( mocks ) this ) . describedAs ( mocks , field , instance ) . getInf () ;
Code	Object finalMessage = ( ( mocks ) this ) . describedAs ( mocks , field , instance ) . getInf () ;
Distance : 11

43
Tree	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( mocks , field , instance ) ;
Code	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( mocks , field , instance ) ;
Distance : 8

44
Tree	Object toAdd = extractCauseUnchecked ( mocks , field , false ) . getInf () ;
Code	Object toAdd = extractCauseUnchecked ( mocks , field , false ) . getInf () ;
Distance : 8

45
Tree	Object finalMessage = ( ( mocks ) this ) . compute ( mocks , field , instance ) . getInf () ;
Code	Object finalMessage = ( ( mocks ) this ) . compute ( mocks , field , instance ) . getInf () ;
Distance : 11

46
Tree	Object toAdd = this . getAuthor () . addWrapField () ;
Code	Object toAdd = this . getAuthor () . addWrapField () ;
Distance : 13

47
Tree	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( false ) . addWrapPartial () ;
Code	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( false ) . addWrapPartial () ;
Distance : 11

48
Tree	Object finalMessage = sgX . hasDuplicateDeclarationSuppression ( mocks , field , instance ) ;
Code	Object finalMessage = sgX . hasDuplicateDeclarationSuppression ( mocks , field , instance ) ;
Distance : 8

49
Tree	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( mocks , field , instance . valueOf () ) . getExternProperties () ;
Code	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( mocks , field , instance . valueOf () ) . getExternProperties () ;
Distance : 8

50
Tree	Object finalMessage = this . getAuthor () . addWrapField () ;
Code	Object finalMessage = this . getAuthor () . addWrapField () ;
Distance : 13

51
Tree	Object finalMessage = sgX . hasDuplicateDeclarationSuppression ( false ) . addWrapPartial () ;
Code	Object finalMessage = sgX . hasDuplicateDeclarationSuppression ( false ) . addWrapPartial () ;
Distance : 11

52
Tree	Object toAdd = sgX . getPrototypeNameOfMethod ( false ) . addWrapPartial () ;
Code	Object toAdd = sgX . getPrototypeNameOfMethod ( false ) . addWrapPartial () ;
Distance : 11

53
Tree	Object finalMessage = extractCauseUnchecked ( mocks , NUMBER_CONSTANT ) . compute () ;
Code	Object finalMessage = extractCauseUnchecked ( mocks , NUMBER_CONSTANT ) . compute () ;
Distance : 10

54
Tree	Object toAdd = sgX . createConfig ( false ) . addWrapPartial () ;
Code	Object toAdd = sgX . createConfig ( false ) . addWrapPartial () ;
Distance : 11

55
Tree	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( false ) . describedAs () ;
Code	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( false ) . describedAs () ;
Distance : 11

56
Tree	Object toAdd = sgX . hasDuplicateDeclarationSuppression () ;
Code	Object toAdd = sgX . hasDuplicateDeclarationSuppression () ;
Distance : 14

57
Tree	Object toAdd = sgX . getPrototypeNameOfMethod ( mocks , field , instance ) ;
Code	Object toAdd = sgX . getPrototypeNameOfMethod ( mocks , field , instance ) ;
Distance : 8

58
Tree	Object finalMessage = sgX . getPrototypeNameOfMethod ( false ) . addWrapPartial () ;
Code	Object finalMessage = sgX . getPrototypeNameOfMethod ( false ) . addWrapPartial () ;
Distance : 11

59
Tree	Object finalMessage = sgX . createConfig ( false ) . addWrapPartial () ;
Code	Object finalMessage = sgX . createConfig ( false ) . addWrapPartial () ;
Distance : 11

60
Tree	Object finalMessage = extractCauseUnchecked ( mocks , NUMBER_CONSTANT ) . describedAs () ;
Code	Object finalMessage = extractCauseUnchecked ( mocks , NUMBER_CONSTANT ) . describedAs () ;
Distance : 10

61
Tree	Object mockDescription = this . withDurationTypeUsingTotalMillis () . addWrapField () ;
Code	Object mockDescription = this . withDurationTypeUsingTotalMillis () . addWrapField () ;
Distance : 13

62
Tree	Object toAdd = IOUtil . hasDuplicateDeclarationSuppression ( false ) . addWrapPartial () ;
Code	Object toAdd = IOUtil . hasDuplicateDeclarationSuppression ( false ) . addWrapPartial () ;
Distance : 11

63
Tree	Object toAdd = ( ( mocks ) this ) . addWrapPartial ( mocks , field , instance ) . getInf () ;
Code	Object toAdd = ( ( mocks ) this ) . addWrapPartial ( mocks , field , instance ) . getInf () ;
Distance : 11

64
Tree	Object toAdd = extractCauseUnchecked ( mocks , field ) . getInf () ;
Code	Object toAdd = extractCauseUnchecked ( mocks , field ) . getInf () ;
Distance : 9

65
Tree	Object toAdd = extractCauseUnchecked ( mocks , field ) . describedAs () ;
Code	Object toAdd = extractCauseUnchecked ( mocks , field ) . describedAs () ;
Distance : 9

66
Tree	Object toAdd = extractCauseUnchecked ( mocks , field , instance ) . getInf () ;
Code	Object toAdd = extractCauseUnchecked ( mocks , field , instance ) . getInf () ;
Distance : 7

67
Tree	Object toAdd = extractCauseUnchecked ( mocks , field ) . compute () ;
Code	Object toAdd = extractCauseUnchecked ( mocks , field ) . compute () ;
Distance : 9

68
Tree	Object finalMessage = extractCauseUnchecked ( mocks , field ) . getInf () ;
Code	Object finalMessage = extractCauseUnchecked ( mocks , field ) . getInf () ;
Distance : 9

69
Tree	Object finalMessage = extractCauseUnchecked ( mocks , field ) . describedAs () ;
Code	Object finalMessage = extractCauseUnchecked ( mocks , field ) . describedAs () ;
Distance : 9

70
Tree	Object toAdd = extractCauseUnchecked ( mocks , field ) . addWrapPartial () ;
Code	Object toAdd = extractCauseUnchecked ( mocks , field ) . addWrapPartial () ;
Distance : 9

71
Tree	Object finalMessage = extractCauseUnchecked ( mocks , field , instance ) . getInf () ;
Code	Object finalMessage = extractCauseUnchecked ( mocks , field , instance ) . getInf () ;
Distance : 7

72
Tree	Object finalMessage = extractCauseUnchecked ( mocks , NUMBER_CONSTANT ) . removeChildren () ;
Code	Object finalMessage = extractCauseUnchecked ( mocks , NUMBER_CONSTANT ) . removeChildren () ;
Distance : 10

73
Tree	Object toAdd = sgX . getPrototypeNameOfMethod () ;
Code	Object toAdd = sgX . getPrototypeNameOfMethod () ;
Distance : 14

74
Tree	Object toAdd = sgX . createConfig ( mocks , field , instance . valueOf () ) . getExternProperties () ;
Code	Object toAdd = sgX . createConfig ( mocks , field , instance . valueOf () ) . getExternProperties () ;
Distance : 8

75
Tree	Object toAdd = sgX . createConfig () ;
Code	Object toAdd = sgX . createConfig () ;
Distance : 14

76
Tree	Object finalMessage = sgX . getPrototypeNameOfMethod ( mocks , field , instance . valueOf () ) . getExternProperties () ;
Code	Object finalMessage = sgX . getPrototypeNameOfMethod ( mocks , field , instance . valueOf () ) . getExternProperties () ;
Distance : 8

77
Tree	Object toAdd = sgX . getPrototypeNameOfMethod ( mocks , field ) . getInf () ;
Code	Object toAdd = sgX . getPrototypeNameOfMethod ( mocks , field ) . getInf () ;
Distance : 8

78
Tree	Object finalMessage = sgX . createConfig ( mocks , field , instance . valueOf () ) . getExternProperties () ;
Code	Object finalMessage = sgX . createConfig ( mocks , field , instance . valueOf () ) . getExternProperties () ;
Distance : 8

79
Tree	Object toAdd = IOUtil . hasDuplicateDeclarationSuppression ( mocks , field , instance . valueOf () ) . getExternProperties () ;
Code	Object toAdd = IOUtil . hasDuplicateDeclarationSuppression ( mocks , field , instance . valueOf () ) . getExternProperties () ;
Distance : 8

80
Tree	Object toAdd = sgX . createConfig ( mocks , field ) . getInf () ;
Code	Object toAdd = sgX . createConfig ( mocks , field ) . getInf () ;
Distance : 8

81
Tree	Object toAdd = extractCauseUnchecked ( mocks , field , false ) . hasMessage () ;
Code	Object toAdd = extractCauseUnchecked ( mocks , field , false ) . hasMessage () ;
Distance : 8

82
Tree	Object toAdd = getOrCreateName ( mocks , field , false ) . getInf () ;
Code	Object toAdd = getOrCreateName ( mocks , field , false ) . getInf () ;
Distance : 8

83
Tree	Object finalMessage = sgX . getPrototypeNameOfMethod () ;
Code	Object finalMessage = sgX . getPrototypeNameOfMethod () ;
Distance : 14

84
Tree	Object finalMessage = sgX . createConfig () ;
Code	Object finalMessage = sgX . createConfig () ;
Distance : 14

85
Tree	Object toAdd = IOUtil . hasDuplicateDeclarationSuppression () ;
Code	Object toAdd = IOUtil . hasDuplicateDeclarationSuppression () ;
Distance : 14

86
Tree	Object mockDescription = extractCauseUnchecked ( mocks , field , false ) . getInf () ;
Code	Object mockDescription = extractCauseUnchecked ( mocks , field , false ) . getInf () ;
Distance : 8

87
Tree	Object finalMessage = sgX . getPrototypeNameOfMethod ( mocks , field ) . getInf () ;
Code	Object finalMessage = sgX . getPrototypeNameOfMethod ( mocks , field ) . getInf () ;
Distance : 8

88
Tree	Object toAdd = sgX ( mocks , field , instance ) . getInf () ;
Code	Object toAdd = sgX ( mocks , field , instance ) . getInf () ;
Distance : 7

89
Tree	Object finalMessage = sgX ( mocks , field , instance ) . getInf () ;
Code	Object finalMessage = sgX ( mocks , field , instance ) . getInf () ;
Distance : 7

90
Tree	Object toAdd = sgX ( mocks , field , instance ) . hasMessage () ;
Code	Object toAdd = sgX ( mocks , field , instance ) . hasMessage () ;
Distance : 7

91
Tree	Object toAdd = ( ( mocks ) this ) . describedAs ( mocks , field , instance ) . getInf () ;
Code	Object toAdd = ( ( mocks ) this ) . describedAs ( mocks , field , instance ) . getInf () ;
Distance : 11

92
Tree	Object toAdd = ( ( mocks ) this ) . compute ( mocks , field , instance ) . getInf () ;
Code	Object toAdd = ( ( mocks ) this ) . compute ( mocks , field , instance ) . getInf () ;
Distance : 11

93
Tree	Object toAdd = extractCauseUnchecked ( mocks , NUMBER_CONSTANT ) . compute () ;
Code	Object toAdd = extractCauseUnchecked ( mocks , NUMBER_CONSTANT ) . compute () ;
Distance : 10

94
Tree	Object toAdd = extractCauseUnchecked ( mocks , NUMBER_CONSTANT ) . describedAs () ;
Code	Object toAdd = extractCauseUnchecked ( mocks , NUMBER_CONSTANT ) . describedAs () ;
Distance : 10

95
Tree	Object finalMessage = sgX ( mocks , field , instance ) . hasMessage () ;
Code	Object finalMessage = sgX ( mocks , field , instance ) . hasMessage () ;
Distance : 7

96
Tree	Object toAdd = sgX ( mocks , field ) . compute () ;
Code	Object toAdd = sgX ( mocks , field ) . compute () ;
Distance : 9

97
Tree	Object toAdd = sgX . hasDuplicateDeclarationSuppression () . addWrapField ( mocks , field , instance ) . getInf () ;
Code	Object toAdd = sgX . hasDuplicateDeclarationSuppression () . addWrapField ( mocks , field , instance ) . getInf () ;
Distance : 9

98
Tree	Object toAdd = sgX ( mocks , field ) . describedAs () ;
Code	Object toAdd = sgX ( mocks , field ) . describedAs () ;
Distance : 9

99
Tree	Object finalMessage = extractCauseUnchecked ( mocks , field ) . compute () ;
Code	Object finalMessage = extractCauseUnchecked ( mocks , field ) . compute () ;
Distance : 9

100
Tree	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( NUMBER_CONSTANT , field , instance , instance ) . getInf () ;
Code	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( NUMBER_CONSTANT , field , instance , instance ) . getInf () ;
Distance : 6

101
Tree	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( mocks , field , instance , false ) . getExternProperties () ;
Code	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( mocks , field , instance , false ) . getExternProperties () ;
Distance : 6

102
Tree	Object finalMessage = sgX ( mocks , field ) . compute () ;
Code	Object finalMessage = sgX ( mocks , field ) . compute () ;
Distance : 9

103
Tree	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( NUMBER_CONSTANT , field , instance , CompositeFormat ) . getInf () ;
Code	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( NUMBER_CONSTANT , field , instance , CompositeFormat ) . getInf () ;
Distance : 7

104
Tree	Object finalMessage = sgX . hasDuplicateDeclarationSuppression () . addWrapField ( mocks , field , instance ) . getInf () ;
Code	Object finalMessage = sgX . hasDuplicateDeclarationSuppression () . addWrapField ( mocks , field , instance ) . getInf () ;
Distance : 9

105
Tree	Object toAdd = sgX ( mocks , field ) . getInf () ;
Code	Object toAdd = sgX ( mocks , field ) . getInf () ;
Distance : 9

106
Tree	Object toAdd = extractCauseUnchecked ( mocks , field ) . hasMessage () ;
Code	Object toAdd = extractCauseUnchecked ( mocks , field ) . hasMessage () ;
Distance : 9

107
Tree	Object toAdd = extractCauseUnchecked ( mocks , field , instance ) . hasMessage () ;
Code	Object toAdd = extractCauseUnchecked ( mocks , field , instance ) . hasMessage () ;
Distance : 7

108
Tree	Object toAdd = sgX ( mocks , field ) . addWrapPartial () ;
Code	Object toAdd = sgX ( mocks , field ) . addWrapPartial () ;
Distance : 9

109
Tree	Object finalMessage = sgX . hasDuplicateDeclarationSuppression ( NUMBER_CONSTANT , field , instance , instance ) . getInf () ;
Code	Object finalMessage = sgX . hasDuplicateDeclarationSuppression ( NUMBER_CONSTANT , field , instance , instance ) . getInf () ;
Distance : 6

110
Tree	Object toAdd = sgX . getPrototypeNameOfMethod ( NUMBER_CONSTANT , field , instance , instance ) . getInf () ;
Code	Object toAdd = sgX . getPrototypeNameOfMethod ( NUMBER_CONSTANT , field , instance , instance ) . getInf () ;
Distance : 6

111
Tree	Object toAdd = sgX . createConfig () . addWrapField ( mocks , field , instance ) . getInf () ;
Code	Object toAdd = sgX . createConfig () . addWrapField ( mocks , field , instance ) . getInf () ;
Distance : 9

112
Tree	Object finalMessage = extractCauseUnchecked ( mocks , field , instance ) . hasMessage () ;
Code	Object finalMessage = extractCauseUnchecked ( mocks , field , instance ) . hasMessage () ;
Distance : 7

113
Tree	Object finalMessage = sgX ( mocks , field ) . describedAs () ;
Code	Object finalMessage = sgX ( mocks , field ) . describedAs () ;
Distance : 9

114
Tree	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( NUMBER_CONSTANT , field , instance , instance ) . hasMessage () ;
Code	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( NUMBER_CONSTANT , field , instance , instance ) . hasMessage () ;
Distance : 6

115
Tree	Object toAdd = sgX . createConfig ( NUMBER_CONSTANT , field , instance , instance ) . getInf () ;
Code	Object toAdd = sgX . createConfig ( NUMBER_CONSTANT , field , instance , instance ) . getInf () ;
Distance : 6

116
Tree	Object toAdd = getOrCreateName ( mocks , field , instance ) . getInf () ;
Code	Object toAdd = getOrCreateName ( mocks , field , instance ) . getInf () ;
Distance : 7

117
Tree	Object finalMessage = sgX . hasDuplicateDeclarationSuppression ( NUMBER_CONSTANT , field , instance , instance ) . hasMessage () ;
Code	Object finalMessage = sgX . hasDuplicateDeclarationSuppression ( NUMBER_CONSTANT , field , instance , instance ) . hasMessage () ;
Distance : 6

118
Tree	Object mockDescription = extractCauseUnchecked ( mocks , field , instance ) . getInf () ;
Code	Object mockDescription = extractCauseUnchecked ( mocks , field , instance ) . getInf () ;
Distance : 7

119
Tree	Object toAdd = sgX . createConfig ( mocks , field , instance ) ;
Code	Object toAdd = sgX . createConfig ( mocks , field , instance ) ;
Distance : 8

120
Tree	Object finalMessage = sgX . hasDuplicateDeclarationSuppression ( mocks , field , instance , false ) . getExternProperties () ;
Code	Object finalMessage = sgX . hasDuplicateDeclarationSuppression ( mocks , field , instance , false ) . getExternProperties () ;
Distance : 6

121
Tree	Object toAdd = sgX . getPrototypeNameOfMethod ( mocks , field , instance , false ) . getExternProperties () ;
Code	Object toAdd = sgX . getPrototypeNameOfMethod ( mocks , field , instance , false ) . getExternProperties () ;
Distance : 6

122
Tree	Object toAdd = this . isLoggable () . addWrapField () ;
Code	Object toAdd = this . isLoggable () . addWrapField () ;
Distance : 13

123
Tree	Object mockDescription = sgX . hasDuplicateDeclarationSuppression ( mocks , field , instance . valueOf () ) . getExternProperties () ;
Code	Object mockDescription = sgX . hasDuplicateDeclarationSuppression ( mocks , field , instance . valueOf () ) . getExternProperties () ;
Distance : 8

124
Tree	Object finalMessage = getOrCreateName ( mocks , field , false ) . getInf () ;
Code	Object finalMessage = getOrCreateName ( mocks , field , false ) . getInf () ;
Distance : 8

125
Tree	Object finalMessage = sgX . createConfig ( mocks , field ) . getInf () ;
Code	Object finalMessage = sgX . createConfig ( mocks , field ) . getInf () ;
Distance : 8

126
Tree	Object toAdd = extractCauseUnchecked ( mocks , field , instance , CompositeFormat ) . hasMessage () ;
Code	Object toAdd = extractCauseUnchecked ( mocks , field , instance , CompositeFormat ) . hasMessage () ;
Distance : 7

127
Tree	Object finalMessage = getOrCreateName ( mocks , field , instance ) . getInf () ;
Code	Object finalMessage = getOrCreateName ( mocks , field , instance ) . getInf () ;
Distance : 7

128
Tree	Object finalMessage = sgX . getPrototypeNameOfMethod ( mocks , field , instance ) ;
Code	Object finalMessage = sgX . getPrototypeNameOfMethod ( mocks , field , instance ) ;
Distance : 8

129
Tree	Object toAdd = sgX . getPrototypeNameOfMethod () . addWrapField ( mocks , field , instance ) . getInf () ;
Code	Object toAdd = sgX . getPrototypeNameOfMethod () . addWrapField ( mocks , field , instance ) . getInf () ;
Distance : 9

130
Tree	Object finalMessage = sgX . getPrototypeNameOfMethod () . addWrapField ( mocks , field , instance ) . getInf () ;
Code	Object finalMessage = sgX . getPrototypeNameOfMethod () . addWrapField ( mocks , field , instance ) . getInf () ;
Distance : 9

131
Tree	Object finalMessage = sgX . createConfig ( mocks , field , instance ) ;
Code	Object finalMessage = sgX . createConfig ( mocks , field , instance ) ;
Distance : 8

132
Tree	Object toAdd = extractCauseUnchecked ( mocks , field , instance , noStubFunctions ) . hasMessage () ;
Code	Object toAdd = extractCauseUnchecked ( mocks , field , instance , noStubFunctions ) . hasMessage () ;
Distance : 7

133
Tree	Object toAdd = IOUtil . hasDuplicateDeclarationSuppression ( mocks , field ) . getInf () ;
Code	Object toAdd = IOUtil . hasDuplicateDeclarationSuppression ( mocks , field ) . getInf () ;
Distance : 8

134
Tree	Object finalMessage = sgX ( mocks , field ) . getInf () ;
Code	Object finalMessage = sgX ( mocks , field ) . getInf () ;
Distance : 9

135
Tree	Object finalMessage = extractCauseUnchecked ( mocks , field , instance , noStubFunctions ) . hasMessage () ;
Code	Object finalMessage = extractCauseUnchecked ( mocks , field , instance , noStubFunctions ) . hasMessage () ;
Distance : 7

136
Tree	Object finalMessage = extractCauseUnchecked ( mocks , field , instance , CompositeFormat ) . hasMessage () ;
Code	Object finalMessage = extractCauseUnchecked ( mocks , field , instance , CompositeFormat ) . hasMessage () ;
Distance : 7

137
Tree	Object toAdd = IOUtil . hasDuplicateDeclarationSuppression ( mocks , field , instance ) ;
Code	Object toAdd = IOUtil . hasDuplicateDeclarationSuppression ( mocks , field , instance ) ;
Distance : 8

138
Tree	Object toAdd = extractCauseUnchecked ( mocks , field , instance ) . describedAs () ;
Code	Object toAdd = extractCauseUnchecked ( mocks , field , instance ) . describedAs () ;
Distance : 7

139
Tree	Object finalMessage = this . isLoggable () . addWrapField () ;
Code	Object finalMessage = this . isLoggable () . addWrapField () ;
Distance : 13

140
Tree	Object toAdd = sgX . createConfig ( mocks , field , instance , false ) . getExternProperties () ;
Code	Object toAdd = sgX . createConfig ( mocks , field , instance , false ) . getExternProperties () ;
Distance : 6

141
Tree	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( mocks , field , NUMBER_CONSTANT ) . getInf () ;
Code	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( mocks , field , NUMBER_CONSTANT ) . getInf () ;
Distance : 7

142
Tree	Object finalMessage = sgX ( mocks , field ) . addWrapPartial () ;
Code	Object finalMessage = sgX ( mocks , field ) . addWrapPartial () ;
Distance : 9

143
Tree	Object finalMessage = sgX . hasDuplicateDeclarationSuppression ( mocks , field , NUMBER_CONSTANT ) . getInf () ;
Code	Object finalMessage = sgX . hasDuplicateDeclarationSuppression ( mocks , field , NUMBER_CONSTANT ) . getInf () ;
Distance : 7

144
Tree	Object mockDescription = sgX . hasDuplicateDeclarationSuppression () ;
Code	Object mockDescription = sgX . hasDuplicateDeclarationSuppression () ;
Distance : 14

145
Tree	Object fileoverview = this . withDurationTypeUsingTotalMillis () . addWrapField () ;
Code	Object fileoverview = this . withDurationTypeUsingTotalMillis () . addWrapField () ;
Distance : 13

146
Tree	Object mockDescription = sgX . hasDuplicateDeclarationSuppression ( mocks , field , instance ) ;
Code	Object mockDescription = sgX . hasDuplicateDeclarationSuppression ( mocks , field , instance ) ;
Distance : 8

147
Tree	Object toAdd = getOrCreateName ( mocks , field , instance , CompositeFormat ) . hasMessage () ;
Code	Object toAdd = getOrCreateName ( mocks , field , instance , CompositeFormat ) . hasMessage () ;
Distance : 7

148
Tree	Object toAdd = getOrCreateName ( mocks , field , instance , noStubFunctions ) . hasMessage () ;
Code	Object toAdd = getOrCreateName ( mocks , field , instance , noStubFunctions ) . hasMessage () ;
Distance : 7

149
Tree	Object finalMessage = extractCauseUnchecked ( mocks , field , false ) . hasMessage () ;
Code	Object finalMessage = extractCauseUnchecked ( mocks , field , false ) . hasMessage () ;
Distance : 8

150
Tree	Object mockDescription = sgX . hasDuplicateDeclarationSuppression ( mocks , field ) . getInf () ;
Code	Object mockDescription = sgX . hasDuplicateDeclarationSuppression ( mocks , field ) . getInf () ;
Distance : 8

151
Tree	Object fileoverview = extractCauseUnchecked ( mocks , field , false ) . getInf () ;
Code	Object fileoverview = extractCauseUnchecked ( mocks , field , false ) . getInf () ;
Distance : 8

152
Tree	Object finalMessage = sgX . getPrototypeNameOfMethod ( NUMBER_CONSTANT , field , instance , instance ) . getInf () ;
Code	Object finalMessage = sgX . getPrototypeNameOfMethod ( NUMBER_CONSTANT , field , instance , instance ) . getInf () ;
Distance : 6

153
Tree	Object toAdd = extractCauseUnchecked ( mocks , field , instance , noStubFunctions ) . getInf () ;
Code	Object toAdd = extractCauseUnchecked ( mocks , field , instance , noStubFunctions ) . getInf () ;
Distance : 7

154
Tree	Object toAdd = extractCauseUnchecked ( mocks , field , instance , CompositeFormat ) . getInf () ;
Code	Object toAdd = extractCauseUnchecked ( mocks , field , instance , CompositeFormat ) . getInf () ;
Distance : 7

155
Tree	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( mocks , field , instance , false ) . hasMessage () ;
Code	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( mocks , field , instance , false ) . hasMessage () ;
Distance : 6

156
Tree	Object toAdd = IOUtil . hasDuplicateDeclarationSuppression () . addWrapField ( mocks , field , instance ) . getInf () ;
Code	Object toAdd = IOUtil . hasDuplicateDeclarationSuppression () . addWrapField ( mocks , field , instance ) . getInf () ;
Distance : 9

157
Tree	Object finalMessage = sgX . createConfig () . addWrapField ( mocks , field , instance ) . getInf () ;
Code	Object finalMessage = sgX . createConfig () . addWrapField ( mocks , field , instance ) . getInf () ;
Distance : 9

158
Tree	Object toAdd = sgX . getPrototypeNameOfMethod ( mocks , field , NUMBER_CONSTANT ) . getInf () ;
Code	Object toAdd = sgX . getPrototypeNameOfMethod ( mocks , field , NUMBER_CONSTANT ) . getInf () ;
Distance : 7

159
Tree	Object finalMessage = sgX . getPrototypeNameOfMethod ( mocks , field , instance , false ) . getExternProperties () ;
Code	Object finalMessage = sgX . getPrototypeNameOfMethod ( mocks , field , instance , false ) . getExternProperties () ;
Distance : 6

160
Tree	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( mocks , field , NUMBER_CONSTANT ) . hasMessage () ;
Code	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( mocks , field , NUMBER_CONSTANT ) . hasMessage () ;
Distance : 7

161
Tree	Object mockDescription = sgX . hasDuplicateDeclarationSuppression () . addWrapField ( mocks , field , instance ) . getInf () ;
Code	Object mockDescription = sgX . hasDuplicateDeclarationSuppression () . addWrapField ( mocks , field , instance ) . getInf () ;
Distance : 9

162
Tree	Object toAdd = sgX . createConfig ( mocks , field , NUMBER_CONSTANT ) . getInf () ;
Code	Object toAdd = sgX . createConfig ( mocks , field , NUMBER_CONSTANT ) . getInf () ;
Distance : 7

163
Tree	Object finalMessage = sgX . createConfig ( mocks , field , instance , false ) . getExternProperties () ;
Code	Object finalMessage = sgX . createConfig ( mocks , field , instance , false ) . getExternProperties () ;
Distance : 6

164
Tree	Object finalMessage = sgX . getPrototypeNameOfMethod ( mocks , field , NUMBER_CONSTANT ) . getInf () ;
Code	Object finalMessage = sgX . getPrototypeNameOfMethod ( mocks , field , NUMBER_CONSTANT ) . getInf () ;
Distance : 7

165
Tree	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( mocks , field , instance , false ) . getInf () ;
Code	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( mocks , field , instance , false ) . getInf () ;
Distance : 6

166
Tree	Object finalMessage = sgX . hasDuplicateDeclarationSuppression ( mocks , field , NUMBER_CONSTANT ) . hasMessage () ;
Code	Object finalMessage = sgX . hasDuplicateDeclarationSuppression ( mocks , field , NUMBER_CONSTANT ) . hasMessage () ;
Distance : 7

167
Tree	Object finalMessage = sgX . createConfig ( mocks , field , NUMBER_CONSTANT ) . getInf () ;
Code	Object finalMessage = sgX . createConfig ( mocks , field , NUMBER_CONSTANT ) . getInf () ;
Distance : 7

168
Tree	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( mocks . toTimePeriod () , field , instance ) . getInf () ;
Code	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( mocks . toTimePeriod () , field , instance ) . getInf () ;
Distance : 8

169
Tree	Object finalMessage = sgX . hasDuplicateDeclarationSuppression ( mocks . toTimePeriod () , field , instance ) . getInf () ;
Code	Object finalMessage = sgX . hasDuplicateDeclarationSuppression ( mocks . toTimePeriod () , field , instance ) . getInf () ;
Distance : 8

170
Tree	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( mocks . toURI () , field , instance ) . getInf () ;
Code	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( mocks . toURI () , field , instance ) . getInf () ;
Distance : 8

171
Tree	Object toAdd = sgX . getPrototypeNameOfMethod ( mocks . toTimePeriod () , field , instance ) . getInf () ;
Code	Object toAdd = sgX . getPrototypeNameOfMethod ( mocks . toTimePeriod () , field , instance ) . getInf () ;
Distance : 8

172
Tree	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( mocks . toTimePeriod () , field , value ) . getInf () ;
Code	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( mocks . toTimePeriod () , field , value ) . getInf () ;
Distance : 9

173
Tree	Object toAdd = sgX . createConfig ( mocks . toTimePeriod () , field , instance ) . getInf () ;
Code	Object toAdd = sgX . createConfig ( mocks . toTimePeriod () , field , instance ) . getInf () ;
Distance : 8

174
Tree	Object finalMessage = sgX . hasDuplicateDeclarationSuppression ( mocks . toURI () , field , instance ) . getInf () ;
Code	Object finalMessage = sgX . hasDuplicateDeclarationSuppression ( mocks . toURI () , field , instance ) . getInf () ;
Distance : 8

175
Tree	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( mocks . toTimePeriod ( mocks , field , instance ) , setStack , CompositeFormat ) ;
Code	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( mocks . toTimePeriod ( mocks , field , instance ) , setStack , CompositeFormat ) ;
Distance : 13

176
Tree	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( LanguageMode.ECMASCRIPT8 , b1.value ) . describedAs () ;
Code	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( LanguageMode.ECMASCRIPT8 , b1.value ) . describedAs () ;
Distance : 10

177
Tree	Object finalMessage = sgX . hasDuplicateDeclarationSuppression ( LanguageMode.ECMASCRIPT8 , b1.value ) . describedAs () ;
Code	Object finalMessage = sgX . hasDuplicateDeclarationSuppression ( LanguageMode.ECMASCRIPT8 , b1.value ) . describedAs () ;
Distance : 10

178
Tree	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( LanguageMode.ECMASCRIPT8 , b1.value ) . getInf () ;
Code	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( LanguageMode.ECMASCRIPT8 , b1.value ) . getInf () ;
Distance : 10

179
Tree	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( finderStub.actualToReturn , b1.value ) . describedAs () ;
Code	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( finderStub.actualToReturn , b1.value ) . describedAs () ;
Distance : 10

180
Tree	Object toAdd = sgX . getPrototypeNameOfMethod ( LanguageMode.ECMASCRIPT8 , b1.value ) . describedAs () ;
Code	Object toAdd = sgX . getPrototypeNameOfMethod ( LanguageMode.ECMASCRIPT8 , b1.value ) . describedAs () ;
Distance : 10

181
Tree	Object finalMessage = sgX . hasDuplicateDeclarationSuppression ( LanguageMode.ECMASCRIPT8 , b1.value ) . getInf () ;
Code	Object finalMessage = sgX . hasDuplicateDeclarationSuppression ( LanguageMode.ECMASCRIPT8 , b1.value ) . getInf () ;
Distance : 10

182
Tree	Object finalMessage = sgX . getPrototypeNameOfMethod ( mocks . toTimePeriod () , field , instance ) . getInf () ;
Code	Object finalMessage = sgX . getPrototypeNameOfMethod ( mocks . toTimePeriod () , field , instance ) . getInf () ;
Distance : 8

183
Tree	Object finalMessage = sgX . hasDuplicateDeclarationSuppression ( mocks . toTimePeriod ( mocks , field , instance ) , setStack , CompositeFormat ) ;
Code	Object finalMessage = sgX . hasDuplicateDeclarationSuppression ( mocks . toTimePeriod ( mocks , field , instance ) , setStack , CompositeFormat ) ;
Distance : 13

184
Tree	Object toAdd = sgX . createConfig ( LanguageMode.ECMASCRIPT8 , b1.value ) . describedAs () ;
Code	Object toAdd = sgX . createConfig ( LanguageMode.ECMASCRIPT8 , b1.value ) . describedAs () ;
Distance : 10

185
Tree	Object toAdd = sgX . getPrototypeNameOfMethod ( mocks . toTimePeriod ( mocks , field , instance ) , setStack , CompositeFormat ) ;
Code	Object toAdd = sgX . getPrototypeNameOfMethod ( mocks . toTimePeriod ( mocks , field , instance ) , setStack , CompositeFormat ) ;
Distance : 13

186
Tree	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( mocks . toURI ( mocks , field , instance ) , setStack , CompositeFormat ) ;
Code	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( mocks . toURI ( mocks , field , instance ) , setStack , CompositeFormat ) ;
Distance : 13

187
Tree	Object toAdd = sgX . createConfig ( mocks . toTimePeriod ( mocks , field , instance ) , setStack , CompositeFormat ) ;
Code	Object toAdd = sgX . createConfig ( mocks . toTimePeriod ( mocks , field , instance ) , setStack , CompositeFormat ) ;
Distance : 13

188
Tree	Object finalMessage = sgX . hasDuplicateDeclarationSuppression ( mocks . toURI ( mocks , field , instance ) , setStack , CompositeFormat ) ;
Code	Object finalMessage = sgX . hasDuplicateDeclarationSuppression ( mocks . toURI ( mocks , field , instance ) , setStack , CompositeFormat ) ;
Distance : 13

189
Tree	Object finalMessage = sgX . hasDuplicateDeclarationSuppression ( finderStub.actualToReturn , b1.value ) . describedAs () ;
Code	Object finalMessage = sgX . hasDuplicateDeclarationSuppression ( finderStub.actualToReturn , b1.value ) . describedAs () ;
Distance : 10

190
Tree	Object finalMessage = sgX . getPrototypeNameOfMethod ( mocks . toTimePeriod ( mocks , field , instance ) , setStack , CompositeFormat ) ;
Code	Object finalMessage = sgX . getPrototypeNameOfMethod ( mocks . toTimePeriod ( mocks , field , instance ) , setStack , CompositeFormat ) ;
Distance : 13

191
Tree	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( mocks . toTimePeriod ( mocks , field , instance ) , maxUlps , CompositeFormat ) ;
Code	Object toAdd = sgX . hasDuplicateDeclarationSuppression ( mocks . toTimePeriod ( mocks , field , instance ) , maxUlps , CompositeFormat ) ;
Distance : 13

192
Tree	public Object finalMessage = sgX . hasDuplicateDeclarationSuppression ( mocks , field , instance ) . getInf () ;
Code	public Object finalMessage = sgX . hasDuplicateDeclarationSuppression ( mocks , field , instance ) . getInf () ;
Distance : 7

193
Tree	public Object finalMessage = sgX . getPrototypeNameOfMethod ( mocks , field , instance ) . getInf () ;
Code	public Object finalMessage = sgX . getPrototypeNameOfMethod ( mocks , field , instance ) . getInf () ;
Distance : 7

194
Tree	public Object finalMessage = sgX . createConfig ( mocks , field , instance ) . getInf () ;
Code	public Object finalMessage = sgX . createConfig ( mocks , field , instance ) . getInf () ;
Distance : 7

195
Tree	public Object finalMessage = IOUtil . hasDuplicateDeclarationSuppression ( mocks , field , instance ) . getInf () ;
Code	public Object finalMessage = IOUtil . hasDuplicateDeclarationSuppression ( mocks , field , instance ) . getInf () ;
Distance : 7

196
Tree	public Object finalMessage = sgX . withDurationTypeUsingTotalMillis ( mocks , field , instance ) . getInf () ;
Code	public Object finalMessage = sgX . withDurationTypeUsingTotalMillis ( mocks , field , instance ) . getInf () ;
Distance : 7

197
Tree	public Object finalMessage = IOUtil . getPrototypeNameOfMethod ( mocks , field , instance ) . getInf () ;
Code	public Object finalMessage = IOUtil . getPrototypeNameOfMethod ( mocks , field , instance ) . getInf () ;
Distance : 7

198
Tree	public Object finalMessage = sgX . readFully ( mocks , field , instance ) . getInf () ;
Code	public Object finalMessage = sgX . readFully ( mocks , field , instance ) . getInf () ;
Distance : 7

199
Tree	public Object finalMessage = IOUtil . createConfig ( mocks , field , instance ) . getInf () ;
Code	public Object finalMessage = IOUtil . createConfig ( mocks , field , instance ) . getInf () ;
Distance : 7

========================================================================


========================================================================
Example Number: 84
Parent Code is: 
{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return MOCKITO_CORE . mock ( classToMock , mockSettings , true ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (800{val=MOCKITO_CORE}) (235{val=.}) (802{val=mock}) (214{val=(}) (800{val=classToMock}) (234{val=,}) (800{val=mockSettings}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (800{val=MOCKITO_CORE}) (235{val=.}) (802{val=mock}) (214{val=(}) (800{val=classToMock}) (234{val=,}) (800{val=mockSettings}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/16/parent/src_org_mockito_Mockito.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return MOCKITO_CORE . mock () . remainder ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock () . remainder ( classToMock , mockSettings ) ; }
Distance : 5

1
Tree	{ return this . stubber . mock ( classToMock ) ; }
Code	{ return this . stubber . mock ( classToMock ) ; }
Distance : 7

2
Tree	{ return mock () . mock ( classToMock . configureWith ( RETURNS_DEFAULTS ) ) ; }
Code	{ return mock () . mock ( classToMock . configureWith ( RETURNS_DEFAULTS ) ) ; }
Distance : 7

3
Tree	{ return mock ( classToMock . of ( RETURNS_DEFAULTS ) , mockSettings ) ; }
Code	{ return mock ( classToMock . of ( RETURNS_DEFAULTS ) , mockSettings ) ; }
Distance : 8

4
Tree	{ return nt . mock ( classToMock ) ; }
Code	{ return nt . mock ( classToMock ) ; }
Distance : 5

5
Tree	{ return mock ( classToMock , null , mockSettings ) ; }
Code	{ return mock ( classToMock , null , mockSettings ) ; }
Distance : 4

6
Tree	{ return mock ( classToMock . of ( classToMock ) ) ; }
Code	{ return mock ( classToMock . of ( classToMock ) ) ; }
Distance : 7

7
Tree	{ return mock () . mock ( classToMock . getOptions ( classToMock ) ) ; }
Code	{ return mock () . mock ( classToMock . getOptions ( classToMock ) ) ; }
Distance : 7

8
Tree	{ return MOCKITO_CORE . mock () . defaultBehavior ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock () . defaultBehavior ( classToMock , mockSettings ) ; }
Distance : 5

9
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . getMockSettings ( classToMock ) ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . getMockSettings ( classToMock ) ) ; }
Distance : 5

10
Tree	{ return mock ( classToMock . argumentsToMatchers ( classToMock ) , mockSettings ) ; }
Code	{ return mock ( classToMock . argumentsToMatchers ( classToMock ) , mockSettings ) ; }
Distance : 7

11
Tree	{ return nt . mock ( classToMock , mockSettings ) ; }
Code	{ return nt . mock ( classToMock , mockSettings ) ; }
Distance : 3

12
Tree	{ return com.google.protobuf.GeneratedMessageV3 . mock ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return com.google.protobuf.GeneratedMessageV3 . mock ( classToMock , mockSettings , mockSettings ) ; }
Distance : 2

13
Tree	{ return mock ( classToMock , Foo ) ; }
Code	{ return mock ( classToMock , Foo ) ; }
Distance : 5

14
Tree	{ return mock ( classToMock . getOptions ( classToMock ) , mockSettings ) ; }
Code	{ return mock ( classToMock . getOptions ( classToMock ) , mockSettings ) ; }
Distance : 7

15
Tree	{ return mock ( classToMock . configureWith () , mockSettings ) ; }
Code	{ return mock ( classToMock . configureWith () , mockSettings ) ; }
Distance : 6

16
Tree	{ return System.out . mock ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return System.out . mock ( classToMock , mockSettings , mockSettings ) ; }
Distance : 2

17
Tree	{ return mock ( classToMock . of ( classToMock ) , mockSettings ) ; }
Code	{ return mock ( classToMock . of ( classToMock ) , mockSettings ) ; }
Distance : 7

18
Tree	{ return MOCKITO_CORE . getCompiler ( classToMock ) ; }
Code	{ return MOCKITO_CORE . getCompiler ( classToMock ) ; }
Distance : 5

19
Tree	{ return MOCKITO_CORE . getCompiler ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . getCompiler ( classToMock , mockSettings ) ; }
Distance : 3

20
Tree	{ return entry.map . mock ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return entry.map . mock ( classToMock , mockSettings , mockSettings ) ; }
Distance : 2

21
Tree	{ return mock ( classToMock . get ( classToMock ) , mockSettings ) ; }
Code	{ return mock ( classToMock . get ( classToMock ) , mockSettings ) ; }
Distance : 7

22
Tree	{ return MOCKITO_CORE . mock () . getChronologyUTC ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock () . getChronologyUTC ( classToMock , mockSettings ) ; }
Distance : 5

23
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . getDefaultAnswer ( classToMock ) ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . getDefaultAnswer ( classToMock ) ) ; }
Distance : 5

24
Tree	{ return MOCKITO_CORE . setUp ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . setUp ( classToMock , mockSettings ) ; }
Distance : 3

25
Tree	{ return MOCKITO_CORE . mock ( classToMock ) . mock ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock ) . mock ( classToMock , mockSettings ) ; }
Distance : 6

26
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . wantedCount ( classToMock ) ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . wantedCount ( classToMock ) ) ; }
Distance : 5

27
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , mockSettings . getParameterTypes () ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , mockSettings . getParameterTypes () ) ; }
Distance : 4

28
Tree	{ return org.joda.time.gwt.util.Arrays . mock ( classToMock , mockSettings ) ; }
Code	{ return org.joda.time.gwt.util.Arrays . mock ( classToMock , mockSettings ) ; }
Distance : 3

29
Tree	{ return com.google.protobuf.GeneratedMessageV3 . mock ( classToMock , mockSettings ) ; }
Code	{ return com.google.protobuf.GeneratedMessageV3 . mock ( classToMock , mockSettings ) ; }
Distance : 3

30
Tree	{ return mock () . spiedInstance ( classToMock , mockSettings ) ; }
Code	{ return mock () . spiedInstance ( classToMock , mockSettings ) ; }
Distance : 5

31
Tree	{ return MOCKITO_CORE . mock () . getName ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock () . getName ( classToMock , mockSettings ) ; }
Distance : 5

32
Tree	{ return stubber ( classToMock , mockSettings ) ; }
Code	{ return stubber ( classToMock , mockSettings ) ; }
Distance : 5

33
Tree	{ return ImageMapUtils . mock ( classToMock , mockSettings ) ; }
Code	{ return ImageMapUtils . mock ( classToMock , mockSettings ) ; }
Distance : 3

34
Tree	{ return mock ( classToMock . defaultBehavior () , mockSettings ) ; }
Code	{ return mock ( classToMock . defaultBehavior () , mockSettings ) ; }
Distance : 6

35
Tree	{ return MOCKITO_CORE . mock ( classToMock , null , Foo ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , null , Foo ) ; }
Distance : 2

36
Tree	{ return finderStub.actualToReturn . mock ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return finderStub.actualToReturn . mock ( classToMock , mockSettings , mockSettings ) ; }
Distance : 2

37
Tree	{ return mock () . mock ( classToMock . of ( classToMock ) ) ; }
Code	{ return mock () . mock ( classToMock . of ( classToMock ) ) ; }
Distance : 7

38
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , mockSettings . defaultBehavior () ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , mockSettings . defaultBehavior () ) ; }
Distance : 4

39
Tree	{ return MOCKITO_CORE . mock () . getComponentType ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock () . getComponentType ( classToMock , mockSettings ) ; }
Distance : 5

40
Tree	{ return MOCKITO_CORE . mock ( NotNull.NOT_NULL , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( NotNull.NOT_NULL , mockSettings ) ; }
Distance : 3

41
Tree	{ return mock () . mock ( RETURNS_DEFAULTS , mockSettings ) ; }
Code	{ return mock () . mock ( RETURNS_DEFAULTS , mockSettings ) ; }
Distance : 5

42
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . of ( classToMock ) ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . of ( classToMock ) ) ; }
Distance : 5

43
Tree	{ return MOCKITO_CORE . mock ( classToMock ) . initialize ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock ) . initialize ( classToMock , mockSettings ) ; }
Distance : 6

44
Tree	{ return mock () . mock ( classToMock . configureWith ( classToMock ) ) ; }
Code	{ return mock () . mock ( classToMock . configureWith ( classToMock ) ) ; }
Distance : 7

45
Tree	{ return MOCKITO_CORE . mock ( classToMock , null , OngoingVerifyingMode ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , null , OngoingVerifyingMode ) ; }
Distance : 2

46
Tree	{ return MOCKITO_CORE . mock () . getChronology ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock () . getChronology ( classToMock , mockSettings ) ; }
Distance : 5

47
Tree	{ return this . pattern . mock ( classToMock ) ; }
Code	{ return this . pattern . mock ( classToMock ) ; }
Distance : 7

48
Tree	{ return MOCKITO_CORE . stubber ( classToMock ) ; }
Code	{ return MOCKITO_CORE . stubber ( classToMock ) ; }
Distance : 5

49
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , mockSettings . mock () ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , mockSettings . mock () ) ; }
Distance : 4

50
Tree	{ return MOCKITO_CORE . mock ( classToMock ) . clazz ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock ) . clazz ( classToMock , mockSettings ) ; }
Distance : 6

51
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . of ( RETURNS_DEFAULTS ) ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . of ( RETURNS_DEFAULTS ) ) ; }
Distance : 5

52
Tree	{ return printer . mock ( classToMock , mockSettings ) ; }
Code	{ return printer . mock ( classToMock , mockSettings ) ; }
Distance : 3

53
Tree	{ return mock () . mock ( classToMock , Foo ) ; }
Code	{ return mock () . mock ( classToMock , Foo ) ; }
Distance : 5

54
Tree	{ return MOCKITO_CORE . stubber ( classToMock , null , mockSettings ) ; }
Code	{ return MOCKITO_CORE . stubber ( classToMock , null , mockSettings ) ; }
Distance : 3

55
Tree	{ return withSettings ( classToMock , mockSettings ) ; }
Code	{ return withSettings ( classToMock , mockSettings ) ; }
Distance : 5

56
Tree	{ return MOCKITO_CORE . mock ( classToMock ) . getDeclaredType ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock ) . getDeclaredType ( classToMock , mockSettings ) ; }
Distance : 6

57
Tree	{ return mock ( Foo , mockSettings - NUMBER_CONSTANT ) ; }
Code	{ return mock ( Foo , mockSettings - NUMBER_CONSTANT ) ; }
Distance : 5

58
Tree	{ return mock ( classToMock , mockSettings , OngoingVerifyingMode ) ; }
Code	{ return mock ( classToMock , mockSettings , OngoingVerifyingMode ) ; }
Distance : 3

59
Tree	{ return mock ( classToMock , null , Foo ) ; }
Code	{ return mock ( classToMock , null , Foo ) ; }
Distance : 4

60
Tree	{ return Hibernate.DATE . mock ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return Hibernate.DATE . mock ( classToMock , mockSettings , mockSettings ) ; }
Distance : 2

61
Tree	{ return super . setUp ( this ) ; }
Code	{ return super . setUp ( this ) ; }
Distance : 7

62
Tree	{ return withSettings ( classToMock , null ) ; }
Code	{ return withSettings ( classToMock , null ) ; }
Distance : 6

63
Tree	{ return nt . mock ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return nt . mock ( classToMock , mockSettings , mockSettings ) ; }
Distance : 2

64
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings ) ; }
Distance : 2

65
Tree	{ return mock ( RETURNS_DEFAULTS , null , mockSettings ) ; }
Code	{ return mock ( RETURNS_DEFAULTS , null , mockSettings ) ; }
Distance : 5

66
Tree	{ return expected ( classToMock , null ) ; }
Code	{ return expected ( classToMock , null ) ; }
Distance : 6

67
Tree	{ return mock ( classToMock . getBytes ( classToMock ) ) ; }
Code	{ return mock ( classToMock . getBytes ( classToMock ) ) ; }
Distance : 7

68
Tree	{ return mock ( classToMock , mockSettings ) ; }
Code	{ return mock ( classToMock , mockSettings ) ; }
Distance : 4

69
Tree	{ return MOCKITO_CORE . mock ( classToMock ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock ) ; }
Distance : 4

70
Tree	{ return mock () . mock ( classToMock , mockSettings ) ; }
Code	{ return mock () . mock ( classToMock , mockSettings ) ; }
Distance : 4

71
Tree	{ return org.joda.time.gwt.util.Arrays . mock ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return org.joda.time.gwt.util.Arrays . mock ( classToMock , mockSettings , mockSettings ) ; }
Distance : 2

72
Tree	{ return this . MOCKITO_CORE . stubber ( classToMock ) ; }
Code	{ return this . MOCKITO_CORE . stubber ( classToMock ) ; }
Distance : 7

73
Tree	{ return this . MOCKITO_CORE . get ( classToMock ) ; }
Code	{ return this . MOCKITO_CORE . get ( classToMock ) ; }
Distance : 7

74
Tree	{ return mock ( returnType , mockSettings , null , false , false ) ; }
Code	{ return mock ( returnType , mockSettings , null , false , false ) ; }
Distance : 8

75
Tree	{ return mock ( classToMock , null , OngoingVerifyingMode ) ; }
Code	{ return mock ( classToMock , null , OngoingVerifyingMode ) ; }
Distance : 4

76
Tree	{ return mock ( classToMock . of () , mockSettings ) ; }
Code	{ return mock ( classToMock . of () , mockSettings ) ; }
Distance : 6

77
Tree	{ return mock () ; }
Code	{ return mock () ; }
Distance : 9

78
Tree	{ return MOCKITO_CORE . mock ( classToMock , Foo ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , Foo ) ; }
Distance : 3

79
Tree	{ return printer . mock ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return printer . mock ( classToMock , mockSettings , mockSettings ) ; }
Distance : 2

80
Tree	{ return MOCKITO_CORE . getCompiler ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return MOCKITO_CORE . getCompiler ( classToMock , mockSettings , mockSettings ) ; }
Distance : 2

81
Tree	{ return CompilerOptions.J2clPassMode . mock ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return CompilerOptions.J2clPassMode . mock ( classToMock , mockSettings , mockSettings ) ; }
Distance : 2

82
Tree	{ return false . stubber ( this ) ; }
Code	{ return false . stubber ( this ) ; }
Distance : 7

83
Tree	{ return MOCKITO_CORE . mock ( classToMock ) . defaultBehavior ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock ) . defaultBehavior ( classToMock , mockSettings ) ; }
Distance : 6

84
Tree	{ return stubber ( classToMock , mockSettings - NUMBER_CONSTANT ) ; }
Code	{ return stubber ( classToMock , mockSettings - NUMBER_CONSTANT ) ; }
Distance : 5

85
Tree	{ return MOCKITO_CORE . mock ( classToMock , null , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , null , mockSettings ) ; }
Distance : 2

86
Tree	{ return MOCKITO_CORE . stubber ( Any.ANY , mockSettings ) ; }
Code	{ return MOCKITO_CORE . stubber ( Any.ANY , mockSettings ) ; }
Distance : 4

87
Tree	{ return mock ( classToMock . configureWith ( classToMock ) , mockSettings ) ; }
Code	{ return mock ( classToMock . configureWith ( classToMock ) , mockSettings ) ; }
Distance : 7

88
Tree	{ return mock ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return mock ( classToMock , mockSettings , mockSettings ) ; }
Distance : 3

89
Tree	{ return mock ( Foo , null ) ; }
Code	{ return mock ( Foo , null ) ; }
Distance : 6

90
Tree	{ return withSettings () ; }
Code	{ return withSettings () ; }
Distance : 10

91
Tree	{ return MOCKITO_CORE . mock ( p1.vector , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( p1.vector , mockSettings ) ; }
Distance : 3

92
Tree	{ return mock ( classToMock . getBytes ( classToMock ) , mockSettings ) ; }
Code	{ return mock ( classToMock . getBytes ( classToMock ) , mockSettings ) ; }
Distance : 7

93
Tree	{ return this . toolTipGeneratorMap . mock ( classToMock ) ; }
Code	{ return this . toolTipGeneratorMap . mock ( classToMock ) ; }
Distance : 7

94
Tree	{ return mock ( RETURNS_DEFAULTS , mockSettings , null , false , false ) ; }
Code	{ return mock ( RETURNS_DEFAULTS , mockSettings , null , false , false ) ; }
Distance : 8

95
Tree	{ return ImmutableSet.Builder . mock ( classToMock , mockSettings ) ; }
Code	{ return ImmutableSet.Builder . mock ( classToMock , mockSettings ) ; }
Distance : 3

96
Tree	{ return mock ( classToMock , mockSettings - NUMBER_CONSTANT ) ; }
Code	{ return mock ( classToMock , mockSettings - NUMBER_CONSTANT ) ; }
Distance : 4

97
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . getOptions ( classToMock ) ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . getOptions ( classToMock ) ) ; }
Distance : 5

98
Tree	{ return MOCKITO_CORE . mock ( classToMock ) . returnFor ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock ) . returnFor ( classToMock , mockSettings ) ; }
Distance : 6

99
Tree	{ return MOCKITO_CORE . setUp ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return MOCKITO_CORE . setUp ( classToMock , mockSettings , mockSettings ) ; }
Distance : 2

100
Tree	{ return mock ( classToMock . getOptions () , mockSettings ) ; }
Code	{ return mock ( classToMock . getOptions () , mockSettings ) ; }
Distance : 6

101
Tree	{ return mock ( classToMock . get () , mockSettings ) ; }
Code	{ return mock ( classToMock . get () , mockSettings ) ; }
Distance : 6

102
Tree	{ return Hibernate.DATE . mock ( classToMock , mockSettings ) ; }
Code	{ return Hibernate.DATE . mock ( classToMock , mockSettings ) ; }
Distance : 3

103
Tree	{ return MOCKITO_CORE . getCompiler ( classToMock , null , mockSettings ) ; }
Code	{ return MOCKITO_CORE . getCompiler ( classToMock , null , mockSettings ) ; }
Distance : 3

104
Tree	{ return mock ( Foo , mockSettings ) ; }
Code	{ return mock ( Foo , mockSettings ) ; }
Distance : 5

105
Tree	{ return mock () . defaultBehavior ( classToMock , mockSettings ) ; }
Code	{ return mock () . defaultBehavior ( classToMock , mockSettings ) ; }
Distance : 5

106
Tree	{ return ImageMapUtils . mock ( classToMock ) ; }
Code	{ return ImageMapUtils . mock ( classToMock ) ; }
Distance : 5

107
Tree	{ return CompilerOptions.J2clPassMode . mock ( classToMock , mockSettings ) ; }
Code	{ return CompilerOptions.J2clPassMode . mock ( classToMock , mockSettings ) ; }
Distance : 3

108
Tree	{ return super . stubber ( this ) ; }
Code	{ return super . stubber ( this ) ; }
Distance : 7

109
Tree	{ return mock ( classToMock . getOptions ( classToMock ) ) ; }
Code	{ return mock ( classToMock . getOptions ( classToMock ) ) ; }
Distance : 7

110
Tree	{ return expected () ; }
Code	{ return expected () ; }
Distance : 10

111
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , mockSettings . initialize () ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , mockSettings . initialize () ) ; }
Distance : 4

112
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , mockSettings . clazz () ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , mockSettings . clazz () ) ; }
Distance : 4

113
Tree	{ return mock ( classToMock . getMockSettings () , mockSettings ) ; }
Code	{ return mock ( classToMock . getMockSettings () , mockSettings ) ; }
Distance : 6

114
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , mockSettings . timeParser () ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , mockSettings . timeParser () ) ; }
Distance : 4

115
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . configureWith ( classToMock ) ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . configureWith ( classToMock ) ) ; }
Distance : 5

116
Tree	{ return mock ( classToMock . configureWith ( classToMock ) ) ; }
Code	{ return mock ( classToMock . configureWith ( classToMock ) ) ; }
Distance : 7

117
Tree	{ return mock ( classToMock . get ( classToMock ) ) ; }
Code	{ return mock ( classToMock . get ( classToMock ) ) ; }
Distance : 7

118
Tree	{ return printer . mock ( classToMock , null , mockSettings ) ; }
Code	{ return printer . mock ( classToMock , null , mockSettings ) ; }
Distance : 3

119
Tree	{ return false . mock ( this ) ; }
Code	{ return false . mock ( this ) ; }
Distance : 6

120
Tree	{ return stubber ( classToMock , null ) ; }
Code	{ return stubber ( classToMock , null ) ; }
Distance : 6

121
Tree	{ return mock ( returnType , mockSettings , mockSettings ) ; }
Code	{ return mock ( returnType , mockSettings , mockSettings ) ; }
Distance : 4

122
Tree	{ return MOCKITO_CORE . setUp ( classToMock , null , mockSettings ) ; }
Code	{ return MOCKITO_CORE . setUp ( classToMock , null , mockSettings ) ; }
Distance : 3

123
Tree	{ return mock ( RETURNS_DEFAULTS , mockSettings ) ; }
Code	{ return mock ( RETURNS_DEFAULTS , mockSettings ) ; }
Distance : 5

124
Tree	{ return mock ( returnType , mockSettings - NUMBER_CONSTANT ) ; }
Code	{ return mock ( returnType , mockSettings - NUMBER_CONSTANT ) ; }
Distance : 5

125
Tree	{ return mock ( returnType , mockSettings ) ; }
Code	{ return mock ( returnType , mockSettings ) ; }
Distance : 5

126
Tree	{ return mock ( classToMock . defaultBehavior ( classToMock ) , mockSettings ) ; }
Code	{ return mock ( classToMock . defaultBehavior ( classToMock ) , mockSettings ) ; }
Distance : 7

127
Tree	{ return MOCKITO_CORE . mock () . get ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock () . get ( classToMock , mockSettings ) ; }
Distance : 5

128
Tree	{ return MOCKITO_CORE . mock ( Any.ANY , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( Any.ANY , mockSettings ) ; }
Distance : 3

129
Tree	{ return stubber () ; }
Code	{ return stubber () ; }
Distance : 10

130
Tree	{ return MOCKITO_CORE . mock ( LanguageMode.ECMASCRIPT_2015 , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( LanguageMode.ECMASCRIPT_2015 , mockSettings ) ; }
Distance : 3

131
Tree	{ return mock () . mock ( classToMock . getMillis ( classToMock ) ) ; }
Code	{ return mock () . mock ( classToMock . getMillis ( classToMock ) ) ; }
Distance : 7

132
Tree	{ return mock () . mock ( classToMock . defaultBehavior ( classToMock ) ) ; }
Code	{ return mock () . mock ( classToMock . defaultBehavior ( classToMock ) ) ; }
Distance : 7

133
Tree	{ return MOCKITO_CORE . mock ( classToMock ) . getParameterTypes ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock ) . getParameterTypes ( classToMock , mockSettings ) ; }
Distance : 6

134
Tree	{ return mock () . mock ( classToMock . extraInterfaces ( classToMock ) ) ; }
Code	{ return mock () . mock ( classToMock . extraInterfaces ( classToMock ) ) ; }
Distance : 7

135
Tree	{ return MOCKITO_CORE . stubber ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return MOCKITO_CORE . stubber ( classToMock , mockSettings , mockSettings ) ; }
Distance : 2

136
Tree	{ return mock ( classToMock , Foo , null , false , false ) ; }
Code	{ return mock ( classToMock , Foo , null , false , false ) ; }
Distance : 8

137
Tree	{ return MOCKITO_CORE . stubber ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . stubber ( classToMock , mockSettings ) ; }
Distance : 3

138
Tree	{ return mock ( classToMock , mockSettings , Foo ) ; }
Code	{ return mock ( classToMock , mockSettings , Foo ) ; }
Distance : 3

139
Tree	{ return mock () . mock ( classToMock . getDurationType ( classToMock ) ) ; }
Code	{ return mock () . mock ( classToMock . getDurationType ( classToMock ) ) ; }
Distance : 7

140
Tree	{ return mock () . remainder ( classToMock , mockSettings ) ; }
Code	{ return mock () . remainder ( classToMock , mockSettings ) ; }
Distance : 5

141
Tree	{ return nt . mock ( classToMock , null , mockSettings ) ; }
Code	{ return nt . mock ( classToMock , null , mockSettings ) ; }
Distance : 3

142
Tree	{ return mock ( classToMock , null , MockSettingsImpl ) ; }
Code	{ return mock ( classToMock , null , MockSettingsImpl ) ; }
Distance : 4

143
Tree	{ return final . mock ( this ) ; }
Code	{ return final . mock ( this ) ; }
Distance : 6

144
Tree	{ return this . MOCKITO_CORE . clear ( classToMock ) ; }
Code	{ return this . MOCKITO_CORE . clear ( classToMock ) ; }
Distance : 7

145
Tree	{ return mock ( classToMock , OngoingVerifyingMode ) ; }
Code	{ return mock ( classToMock , OngoingVerifyingMode ) ; }
Distance : 5

146
Tree	{ return setUp ( classToMock , null ) ; }
Code	{ return setUp ( classToMock , null ) ; }
Distance : 6

147
Tree	{ return MOCKITO_CORE . mock ( StringUtils.EMPTY , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( StringUtils.EMPTY , mockSettings ) ; }
Distance : 3

148
Tree	{ return mock ( classToMock . defaultBehavior ( classToMock ) ) ; }
Code	{ return mock ( classToMock . defaultBehavior ( classToMock ) ) ; }
Distance : 7

149
Tree	{ return mock ( classToMock . argumentsToMatchers () , mockSettings ) ; }
Code	{ return mock ( classToMock . argumentsToMatchers () , mockSettings ) ; }
Distance : 6

150
Tree	{ return withSettings ( classToMock , mockSettings - NUMBER_CONSTANT ) ; }
Code	{ return withSettings ( classToMock , mockSettings - NUMBER_CONSTANT ) ; }
Distance : 5

151
Tree	{ return this . MOCKITO_CORE . getCompiler ( classToMock ) ; }
Code	{ return this . MOCKITO_CORE . getCompiler ( classToMock ) ; }
Distance : 7

152
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . defaultBehavior ( classToMock ) ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings . defaultBehavior ( classToMock ) ) ; }
Distance : 5

153
Tree	{ return super . mock ( this ) ; }
Code	{ return super . mock ( this ) ; }
Distance : 6

154
Tree	{ return mock ( RETURNS_DEFAULTS , mockSettings , mockSettings ) ; }
Code	{ return mock ( RETURNS_DEFAULTS , mockSettings , mockSettings ) ; }
Distance : 4

155
Tree	{ return mock ( RETURNS_DEFAULTS , mockSettings - NUMBER_CONSTANT ) ; }
Code	{ return mock ( RETURNS_DEFAULTS , mockSettings - NUMBER_CONSTANT ) ; }
Distance : 5

156
Tree	{ return mock () . mock ( returnType , mockSettings ) ; }
Code	{ return mock () . mock ( returnType , mockSettings ) ; }
Distance : 5

157
Tree	{ return stubber . mock ( classToMock ) ; }
Code	{ return stubber . mock ( classToMock ) ; }
Distance : 5

158
Tree	{ return MOCKITO_CORE . mock ( LanguageMode.ECMASCRIPT8 , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( LanguageMode.ECMASCRIPT8 , mockSettings ) ; }
Distance : 3

159
Tree	{ return printer . mock ( classToMock ) ; }
Code	{ return printer . mock ( classToMock ) ; }
Distance : 5

160
Tree	{ return MOCKITO_CORE . mock () . mock ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock () . mock ( classToMock , mockSettings ) ; }
Distance : 5

161
Tree	{ return mock ( returnType , null ) ; }
Code	{ return mock ( returnType , null ) ; }
Distance : 6

162
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , mockSettings . iso () ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , mockSettings . iso () ) ; }
Distance : 4

163
Tree	{ return stubber ( classToMock , mockSettings , null , false , false ) ; }
Code	{ return stubber ( classToMock , mockSettings , null , false , false ) ; }
Distance : 8

164
Tree	{ return setUp () ; }
Code	{ return setUp () ; }
Distance : 10

165
Tree	{ return mock ( classToMock . getBytes () , mockSettings ) ; }
Code	{ return mock ( classToMock . getBytes () , mockSettings ) ; }
Distance : 6

166
Tree	{ return guessName () ; }
Code	{ return guessName () ; }
Distance : 10

167
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , mockSettings ) ; }
Distance : 1

168
Tree	{ return mock ( classToMock , null ) ; }
Code	{ return mock ( classToMock , null ) ; }
Distance : 5

169
Tree	{ return System.out . mock ( classToMock , mockSettings ) ; }
Code	{ return System.out . mock ( classToMock , mockSettings ) ; }
Distance : 3

170
Tree	{ return cloneReset () ; }
Code	{ return cloneReset () ; }
Distance : 10

171
Tree	{ return mock ( classToMock , OngoingVerifyingMode , null , false , false ) ; }
Code	{ return mock ( classToMock , OngoingVerifyingMode , null , false , false ) ; }
Distance : 8

172
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , Foo ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , Foo ) ; }
Distance : 1

173
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , mockSettings . getDefaultAnswer () ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , mockSettings . getDefaultAnswer () ) ; }
Distance : 4

174
Tree	{ return mock ( classToMock . argumentsToMatchers ( classToMock ) ) ; }
Code	{ return mock ( classToMock . argumentsToMatchers ( classToMock ) ) ; }
Distance : 7

175
Tree	{ return mock ( classToMock , Foo , mockSettings ) ; }
Code	{ return mock ( classToMock , Foo , mockSettings ) ; }
Distance : 4

176
Tree	{ return mock ( classToMock , mockSettings , null , false , false ) ; }
Code	{ return mock ( classToMock , mockSettings , null , false , false ) ; }
Distance : 7

177
Tree	{ return MOCKITO_CORE . mock ( classToMock ) . getDefaultAnswer ( classToMock , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock ) . getDefaultAnswer ( classToMock , mockSettings ) ; }
Distance : 6

178
Tree	{ return this . MOCKITO_CORE . mock ( classToMock ) ; }
Code	{ return this . MOCKITO_CORE . mock ( classToMock ) ; }
Distance : 6

179
Tree	{ return ImmutableSet.Builder . mock ( classToMock , mockSettings , mockSettings ) ; }
Code	{ return ImmutableSet.Builder . mock ( classToMock , mockSettings , mockSettings ) ; }
Distance : 2

180
Tree	{ return mock () . simpleMethod ( classToMock , mockSettings ) ; }
Code	{ return mock () . simpleMethod ( classToMock , mockSettings ) ; }
Distance : 5

181
Tree	{ return MOCKITO_CORE . setUp ( classToMock ) ; }
Code	{ return MOCKITO_CORE . setUp ( classToMock ) ; }
Distance : 5

182
Tree	{ return mock ( classToMock . of ( RETURNS_DEFAULTS ) ) ; }
Code	{ return mock ( classToMock . of ( RETURNS_DEFAULTS ) ) ; }
Distance : 7

183
Tree	{ return mock ( classToMock , OngoingVerifyingMode , mockSettings ) ; }
Code	{ return mock ( classToMock , OngoingVerifyingMode , mockSettings ) ; }
Distance : 4

184
Tree	{ return finderStub.actualToReturn . mock ( classToMock , mockSettings ) ; }
Code	{ return finderStub.actualToReturn . mock ( classToMock , mockSettings ) ; }
Distance : 3

185
Tree	{ return super . getCompiler ( this ) ; }
Code	{ return super . getCompiler ( this ) ; }
Distance : 7

186
Tree	{ return mock ( classToMock , Foo - NUMBER_CONSTANT ) ; }
Code	{ return mock ( classToMock , Foo - NUMBER_CONSTANT ) ; }
Distance : 5

187
Tree	{ return entry.map . mock ( classToMock , mockSettings ) ; }
Code	{ return entry.map . mock ( classToMock , mockSettings ) ; }
Distance : 3

188
Tree	{ return mock ( classToMock , OngoingVerifyingMode - NUMBER_CONSTANT ) ; }
Code	{ return mock ( classToMock , OngoingVerifyingMode - NUMBER_CONSTANT ) ; }
Distance : 5

189
Tree	{ return mock ( Foo , null , mockSettings ) ; }
Code	{ return mock ( Foo , null , mockSettings ) ; }
Distance : 5

190
Tree	{ return MOCKITO_CORE . mock ( ComposableFunction.ASIN , mockSettings ) ; }
Code	{ return MOCKITO_CORE . mock ( ComposableFunction.ASIN , mockSettings ) ; }
Distance : 3

191
Tree	{ return mock ( RETURNS_DEFAULTS , null ) ; }
Code	{ return mock ( RETURNS_DEFAULTS , null ) ; }
Distance : 6

192
Tree	{ return super . appendTo ( this ) ; }
Code	{ return super . appendTo ( this ) ; }
Distance : 7

193
Tree	{ return appendTo () ; }
Code	{ return appendTo () ; }
Distance : 10

194
Tree	{ return stubber ( classToMock , null , mockSettings ) ; }
Code	{ return stubber ( classToMock , null , mockSettings ) ; }
Distance : 5

195
Tree	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , OngoingVerifyingMode ) ; }
Code	{ return MOCKITO_CORE . mock ( classToMock , mockSettings , OngoingVerifyingMode ) ; }
Distance : 1

196
Tree	{ return mock ( returnType , null , mockSettings ) ; }
Code	{ return mock ( returnType , null , mockSettings ) ; }
Distance : 5

197
Tree	{ return mock ( classToMock , mockSettings , verificationMode ) ; }
Code	{ return mock ( classToMock , mockSettings , verificationMode ) ; }
Distance : 3

198
Tree	{ return mock ( Foo , mockSettings , null , false , false ) ; }
Code	{ return mock ( Foo , mockSettings , null , false , false ) ; }
Distance : 8

199
Tree	{ return withSettings ( classToMock , mockSettings , null , false , false ) ; }
Code	{ return withSettings ( classToMock , mockSettings , null , false , false ) ; }
Distance : 8

========================================================================


========================================================================
Example Number: 85
Parent Code is: 
mockingProgress . verificationStarted ( mode ) ;
-------------------------------------------------------------------------------
Child code is: 
mockingProgress . verificationStarted ( new MockAwareVerificationMode ( mock , mode ) ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (21 (32 (800{val=mockingProgress}) (235{val=.}) (802{val=verificationStarted}) (214{val=(}) (800{val=mode}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (21 (32 (800{val=mockingProgress}) (235{val=.}) (802{val=verificationStarted}) (214{val=(}) (14 (304{val=new}) (43 (801{val=MockAwareVerificationMode})) (214{val=(}) (800{val=mock}) (234{val=,}) (800{val=mode}) (215{val=)})) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/14/parent/src_org_mockito_internal_MockitoCore.java
-------------------------------------------------------------------------------
Edit Distance : 6
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	mockingProgress . verificationStarted ( mode ) ;
Code	mockingProgress . verificationStarted ( mode ) ;
Distance : 6

1
Tree	verificationStarted ( mode ) ;
Code	verificationStarted ( mode ) ;
Distance : 8

2
Tree	mockingProgress . verificationStarted ( new mode () ) ;
Code	mockingProgress . verificationStarted ( new mode () ) ;
Distance : 5

3
Tree	mockingProgress . verificationStarted ( mode , mockingProgress . verificationListeners () ) ;
Code	mockingProgress . verificationStarted ( mode , mockingProgress . verificationListeners () ) ;
Distance : 7

4
Tree	mockingProgress = new VerificationDataImpl ( mode ) ;
Code	mockingProgress = new VerificationDataImpl ( mode ) ;
Distance : 7

5
Tree	this . mode = mockingProgress ;
Code	this . mode = mockingProgress ;
Distance : 10

6
Tree	mockingProgress . verificationStarted ( mode , new Es6SyntacticScopeCreator ( mode ) ) ;
Code	mockingProgress . verificationStarted ( mode , new Es6SyntacticScopeCreator ( mode ) ) ;
Distance : 5

7
Tree	mockingProgress . verificationStarted ( LanguageMode.ECMASCRIPT_2017 ) ;
Code	mockingProgress . verificationStarted ( LanguageMode.ECMASCRIPT_2017 ) ;
Distance : 7

8
Tree	mockingProgress = mockingProgress . verificationListeners ( mode ) ;
Code	mockingProgress = mockingProgress . verificationListeners ( mode ) ;
Distance : 8

9
Tree	this . currentScope . verificationStarted ( mode ) ;
Code	this . currentScope . verificationStarted ( mode ) ;
Distance : 8

10
Tree	mockingProgress . verificationStarted ( false ) ;
Code	mockingProgress . verificationStarted ( false ) ;
Distance : 7

11
Tree	this . legendLine = mockingProgress ;
Code	this . legendLine = mockingProgress ;
Distance : 11

12
Tree	this . commonTypes = mockingProgress ;
Code	this . commonTypes = mockingProgress ;
Distance : 11

13
Tree	mockingProgress . verificationStarted ( mode , false ) ;
Code	mockingProgress . verificationStarted ( mode , false ) ;
Distance : 6

14
Tree	mockingProgress . verificationStarted ( mode , mockingProgress . getWanted () ) ;
Code	mockingProgress . verificationStarted ( mode , mockingProgress . getWanted () ) ;
Distance : 7

15
Tree	mockingProgress . verificationStarted ( mode . getOptions () ) ;
Code	mockingProgress . verificationStarted ( mode . getOptions () ) ;
Distance : 7

16
Tree	mockingProgress . verificationStarted ( this , mode ) ;
Code	mockingProgress . verificationStarted ( this , mode ) ;
Distance : 5

17
Tree	verificationStarted ( mode . getInvocation () ) ;
Code	verificationStarted ( mode . getInvocation () ) ;
Distance : 9

18
Tree	new LastArguments () . verificationStarted ( mode ) ;
Code	new LastArguments () . verificationStarted ( mode ) ;
Distance : 9

19
Tree	this . mode . verificationListeners ( mode ) ;
Code	this . mode . verificationListeners ( mode ) ;
Distance : 8

20
Tree	mockingProgress = currentScope . verificationStarted ( mode ) ;
Code	mockingProgress = currentScope . verificationStarted ( mode ) ;
Distance : 8

21
Tree	mockingProgress . verificationStarted ( mode , new MockSettingsImpl ( mode ) ) ;
Code	mockingProgress . verificationStarted ( mode , new MockSettingsImpl ( mode ) ) ;
Distance : 5

22
Tree	verificationStarted ( mode , mockingProgress , Predicates ) ;
Code	verificationStarted ( mode , mockingProgress , Predicates ) ;
Distance : 8

23
Tree	verificationStarted ( mode . getOptions () ) ;
Code	verificationStarted ( mode . getOptions () ) ;
Distance : 9

24
Tree	mockingProgress . verificationStarted ( NUMBER_CONSTANT , mode ) ;
Code	mockingProgress . verificationStarted ( NUMBER_CONSTANT , mode ) ;
Distance : 5

25
Tree	verificationStarted ( mode . getBytes () ) ;
Code	verificationStarted ( mode . getBytes () ) ;
Distance : 9

26
Tree	verificationStarted ( mode , mockingProgress ) ;
Code	verificationStarted ( mode , mockingProgress ) ;
Distance : 8

27
Tree	mockingProgress . verificationStarted ( mode , mockingProgress . getBytes () ) ;
Code	mockingProgress . verificationStarted ( mode , mockingProgress . getBytes () ) ;
Distance : 7

28
Tree	this . commonTypes . verificationListeners ( mode ) ;
Code	this . commonTypes . verificationListeners ( mode ) ;
Distance : 8

29
Tree	mockingProgress . verificationStarted ( mode , new DummyLocalizable ( mode ) ) ;
Code	mockingProgress . verificationStarted ( mode , new DummyLocalizable ( mode ) ) ;
Distance : 5

30
Tree	mockingProgress . verificationStarted ( mode . getBytes () ) ;
Code	mockingProgress . verificationStarted ( mode . getBytes () ) ;
Distance : 7

31
Tree	this . mockingProgress = mockingProgress ;
Code	this . mockingProgress = mockingProgress ;
Distance : 11

32
Tree	verificationStarted ( mode . getDefaultAnswer () ) ;
Code	verificationStarted ( mode . getDefaultAnswer () ) ;
Distance : 9

33
Tree	mockingProgress () . invocationListeners ( mode ) ;
Code	mockingProgress () . invocationListeners ( mode ) ;
Distance : 8

34
Tree	verificationStarted ( mode , iChronology ) ;
Code	verificationStarted ( mode , iChronology ) ;
Distance : 8

35
Tree	mockingProgress () . getDefaultAnswer ( mode ) ;
Code	mockingProgress () . getDefaultAnswer ( mode ) ;
Distance : 8

36
Tree	mockingProgress . verificationStarted ( PropertyCollapseLevel.ALL ) ;
Code	mockingProgress . verificationStarted ( PropertyCollapseLevel.ALL ) ;
Distance : 7

37
Tree	verificationStarted ( mode , NameBasedDefinitionProvider , mockingProgress ) ;
Code	verificationStarted ( mode , NameBasedDefinitionProvider , mockingProgress ) ;
Distance : 8

38
Tree	mockingProgress () . getWanted ( mode ) ;
Code	mockingProgress () . getWanted ( mode ) ;
Distance : 8

39
Tree	mockingProgress . verificationStarted ( new InvocationsFinder () ) ;
Code	mockingProgress . verificationStarted ( new InvocationsFinder () ) ;
Distance : 6

40
Tree	mockingProgress = currentScope . verificationListeners ( mode ) ;
Code	mockingProgress = currentScope . verificationListeners ( mode ) ;
Distance : 8

41
Tree	mockingProgress . verificationStarted ( true ) ;
Code	mockingProgress . verificationStarted ( true ) ;
Distance : 7

42
Tree	mockingProgress . verificationListeners ( mode , false ) ;
Code	mockingProgress . verificationListeners ( mode , false ) ;
Distance : 7

43
Tree	this . commonTypes . verificationStarted ( mode ) ;
Code	this . commonTypes . verificationStarted ( mode ) ;
Distance : 8

44
Tree	mockingProgress . verificationListeners ( mode ) ;
Code	mockingProgress . verificationListeners ( mode ) ;
Distance : 7

45
Tree	mockingProgress . noDataMessagePaint ( mode ) ;
Code	mockingProgress . noDataMessagePaint ( mode ) ;
Distance : 7

46
Tree	new mockingProgress () . getWanted ( mode ) ;
Code	new mockingProgress () . getWanted ( mode ) ;
Distance : 9

47
Tree	verificationStarted ( mode , object ) ;
Code	verificationStarted ( mode , object ) ;
Distance : 8

48
Tree	mockingProgress . tickMarkPaint ( mode ) ;
Code	mockingProgress . tickMarkPaint ( mode ) ;
Distance : 7

49
Tree	mockingProgress . stroke ( mode ) ;
Code	mockingProgress . stroke ( mode ) ;
Distance : 7

50
Tree	mockingProgress = new MockitoCore ( mode ) ;
Code	mockingProgress = new MockitoCore ( mode ) ;
Distance : 7

51
Tree	mockingProgress = new Coordinates1D ( mode ) ;
Code	mockingProgress = new Coordinates1D ( mode ) ;
Distance : 7

52
Tree	mockingProgress . verificationStarted ( LanguageMode.ECMASCRIPT5 ) ;
Code	mockingProgress . verificationStarted ( LanguageMode.ECMASCRIPT5 ) ;
Distance : 7

53
Tree	mockingProgress . verificationStarted ( TypeInferenceMode.NEITHER ) ;
Code	mockingProgress . verificationStarted ( TypeInferenceMode.NEITHER ) ;
Distance : 7

54
Tree	mockingProgress . setTime ( mode ) ;
Code	mockingProgress . setTime ( mode ) ;
Distance : 7

55
Tree	mockingProgress . processCheck ( mode ) ;
Code	mockingProgress . processCheck ( mode ) ;
Distance : 7

56
Tree	mockingProgress . setTime ( mode , false ) ;
Code	mockingProgress . setTime ( mode , false ) ;
Distance : 7

57
Tree	new mockingProgress () . validateState ( mode ) ;
Code	new mockingProgress () . validateState ( mode ) ;
Distance : 9

58
Tree	mockingProgress . verificationStarted () ;
Code	mockingProgress . verificationStarted () ;
Distance : 9

59
Tree	this . legendLine . verificationStarted ( mode ) ;
Code	this . legendLine . verificationStarted ( mode ) ;
Distance : 8

60
Tree	verificationStarted ( mode , parent ) ;
Code	verificationStarted ( mode , parent ) ;
Distance : 8

61
Tree	mockingProgress . verificationStarted ( mode , iChronology ) ;
Code	mockingProgress . verificationStarted ( mode , iChronology ) ;
Distance : 6

62
Tree	mockingProgress . processCheck ( mode , false ) ;
Code	mockingProgress . processCheck ( mode , false ) ;
Distance : 7

63
Tree	mockingProgress . verificationStarted ( mode , DEFAULT_ZERO_TOLERANCE ) ;
Code	mockingProgress . verificationStarted ( mode , DEFAULT_ZERO_TOLERANCE ) ;
Distance : 6

64
Tree	mockingProgress () . verificationStarted ( mode ) ;
Code	mockingProgress () . verificationStarted ( mode ) ;
Distance : 7

65
Tree	this . mode . verificationStarted ( mode ) ;
Code	this . mode . verificationStarted ( mode ) ;
Distance : 8

66
Tree	mockingProgress . getDefaultAnswer ( mode ) ;
Code	mockingProgress . getDefaultAnswer ( mode ) ;
Distance : 7

67
Tree	mockingProgress . verificationStarted ( new Reporter () ) ;
Code	mockingProgress . verificationStarted ( new Reporter () ) ;
Distance : 6

68
Tree	this . currentScope = currentScope ;
Code	this . currentScope = currentScope ;
Distance : 11

69
Tree	mockingProgress . verificationStarted ( java.util.Locale.US ) ;
Code	mockingProgress . verificationStarted ( java.util.Locale.US ) ;
Distance : 7

70
Tree	mockingProgress . verificationStarted ( LanguageMode.ECMASCRIPT_NEXT ) ;
Code	mockingProgress . verificationStarted ( LanguageMode.ECMASCRIPT_NEXT ) ;
Distance : 7

71
Tree	mockingProgress . verificationStarted ( mode , new Object ( mode ) ) ;
Code	mockingProgress . verificationStarted ( mode , new Object ( mode ) ) ;
Distance : 5

72
Tree	this . currentScope = mockingProgress ;
Code	this . currentScope = mockingProgress ;
Distance : 11

73
Tree	verificationStarted ( mode , DEFAULT_ZERO_TOLERANCE ) ;
Code	verificationStarted ( mode , DEFAULT_ZERO_TOLERANCE ) ;
Distance : 8

74
Tree	new mockingProgress () . verificationStarted ( mode ) ;
Code	new mockingProgress () . verificationStarted ( mode ) ;
Distance : 8

75
Tree	mockingProgress . verificationStarted ( mode , mockingProgress . getDefaultAnswer () ) ;
Code	mockingProgress . verificationStarted ( mode , mockingProgress . getDefaultAnswer () ) ;
Distance : 7

76
Tree	mockingProgress . verificationStarted ( mode , mockingProgress . verificationStarted () ) ;
Code	mockingProgress . verificationStarted ( mode , mockingProgress . verificationStarted () ) ;
Distance : 7

77
Tree	verificationStarted ( mode , mockingProgress , mockingProgress ) ;
Code	verificationStarted ( mode , mockingProgress , mockingProgress ) ;
Distance : 8

78
Tree	mockingProgress . verificationStarted ( TypeInferenceMode.BOTH ) ;
Code	mockingProgress . verificationStarted ( TypeInferenceMode.BOTH ) ;
Distance : 7

79
Tree	getFirstUndesiredInvocationStackTrace ( mode ) ;
Code	getFirstUndesiredInvocationStackTrace ( mode ) ;
Distance : 9

80
Tree	mockingProgress . addConsecutiveAnswer ( mode ) ;
Code	mockingProgress . addConsecutiveAnswer ( mode ) ;
Distance : 7

81
Tree	mockingProgress . verificationStarted ( mode . getInput () ) ;
Code	mockingProgress . verificationStarted ( mode . getInput () ) ;
Distance : 7

82
Tree	mockingProgress = new RemoveUnusedVars ( mode ) ;
Code	mockingProgress = new RemoveUnusedVars ( mode ) ;
Distance : 7

83
Tree	mockingProgress = new TimeSeries ( mode ) ;
Code	mockingProgress = new TimeSeries ( mode ) ;
Distance : 7

84
Tree	mockingProgress . verificationStarted ( mode . getLanguageMode () ) ;
Code	mockingProgress . verificationStarted ( mode . getLanguageMode () ) ;
Distance : 7

85
Tree	setMillis ( mode ) ;
Code	setMillis ( mode ) ;
Distance : 9

86
Tree	mockingProgress . verificationStarted ( mode , new SinFunction ( mode ) ) ;
Code	mockingProgress . verificationStarted ( mode , new SinFunction ( mode ) ) ;
Distance : 5

87
Tree	mockingProgress = mockingProgress . ofReal ( mode ) ;
Code	mockingProgress = mockingProgress . ofReal ( mode ) ;
Distance : 8

88
Tree	mockingProgress . verificationStarted ( mode , new ExploitAssigns ( mode ) ) ;
Code	mockingProgress . verificationStarted ( mode , new ExploitAssigns ( mode ) ) ;
Distance : 5

89
Tree	this . legendArea = mockingProgress ;
Code	this . legendArea = mockingProgress ;
Distance : 11

90
Tree	verificationStarted ( mode , mockingProgress , node ) ;
Code	verificationStarted ( mode , mockingProgress , node ) ;
Distance : 8

91
Tree	mockingProgress . setMethodForStubbing ( mode ) ;
Code	mockingProgress . setMethodForStubbing ( mode ) ;
Distance : 7

92
Tree	mockingProgress . verificationStarted ( mode , bp ) ;
Code	mockingProgress . verificationStarted ( mode , bp ) ;
Distance : 6

93
Tree	mockingProgress = new MockSettingsImpl ( mode ) ;
Code	mockingProgress = new MockSettingsImpl ( mode ) ;
Distance : 7

94
Tree	mockingProgress . peepholePass ( mode ) ;
Code	mockingProgress . peepholePass ( mode ) ;
Distance : 7

95
Tree	fst ( mode ) ;
Code	fst ( mode ) ;
Distance : 9

96
Tree	mockingProgress () . answer ( mode ) ;
Code	mockingProgress () . answer ( mode ) ;
Distance : 8

97
Tree	mockingProgress . addTypes ( mode ) ;
Code	mockingProgress . addTypes ( mode ) ;
Distance : 7

98
Tree	verificationListeners ( mode , mockingProgress ) ;
Code	verificationListeners ( mode , mockingProgress ) ;
Distance : 9

99
Tree	mockingProgress = mockingProgress . verificationStarted ( mode ) ;
Code	mockingProgress = mockingProgress . verificationStarted ( mode ) ;
Distance : 8

100
Tree	mockingProgress . getDefaultAnswer ( mode , false ) ;
Code	mockingProgress . getDefaultAnswer ( mode , false ) ;
Distance : 7

101
Tree	verificationStarted ( mode , mockingProgress , parent ) ;
Code	verificationStarted ( mode , mockingProgress , parent ) ;
Distance : 8

102
Tree	this . addTypes . verificationStarted ( mode ) ;
Code	this . addTypes . verificationStarted ( mode ) ;
Distance : 8

103
Tree	new mockingProgress () . toInvocation ( mode ) ;
Code	new mockingProgress () . toInvocation ( mode ) ;
Distance : 9

104
Tree	mockingProgress . verificationStarted ( mode , new GlobalTypeInfoCollector ( mode ) ) ;
Code	mockingProgress . verificationStarted ( mode , new GlobalTypeInfoCollector ( mode ) ) ;
Distance : 5

105
Tree	mockingProgress . addConsecutiveAnswer () ;
Code	mockingProgress . addConsecutiveAnswer () ;
Distance : 10

106
Tree	mockingProgress = new BasicYearDateTimeField ( mode ) ;
Code	mockingProgress = new BasicYearDateTimeField ( mode ) ;
Distance : 7

107
Tree	mockingProgress . verificationStarted ( new ArrayList () ) ;
Code	mockingProgress . verificationStarted ( new ArrayList () ) ;
Distance : 6

108
Tree	new GlobalTypeInfoCollector () . verificationStarted ( mode ) ;
Code	new GlobalTypeInfoCollector () . verificationStarted ( mode ) ;
Distance : 9

109
Tree	mockingProgress () . validateState ( mode ) ;
Code	mockingProgress () . validateState ( mode ) ;
Distance : 8

110
Tree	mockingProgress . verificationStarted ( mode . getLanguageIn () ) ;
Code	mockingProgress . verificationStarted ( mode . getLanguageIn () ) ;
Distance : 7

111
Tree	mockingProgress . setMethodForStubbing () ;
Code	mockingProgress . setMethodForStubbing () ;
Distance : 10

112
Tree	mockingProgress . verificationStarted ( new features () ) ;
Code	mockingProgress . verificationStarted ( new features () ) ;
Distance : 6

113
Tree	mockingProgress . verificationStarted ( mode , bp . verificationListeners () ) ;
Code	mockingProgress . verificationStarted ( mode , bp . verificationListeners () ) ;
Distance : 7

114
Tree	mockingProgress . addConsecutiveAnswer ( STRING_CONSTANT , mode ) ;
Code	mockingProgress . addConsecutiveAnswer ( STRING_CONSTANT , mode ) ;
Distance : 6

115
Tree	mockingProgress . verificationStarted ( new VerificationModeImpl () ) ;
Code	mockingProgress . verificationStarted ( new VerificationModeImpl () ) ;
Distance : 6

116
Tree	mockingProgress . verificationStarted ( mode . getInvocation () ) ;
Code	mockingProgress . verificationStarted ( mode . getInvocation () ) ;
Distance : 7

117
Tree	this . addTypes = mockingProgress ;
Code	this . addTypes = mockingProgress ;
Distance : 11

118
Tree	new mockingProgress () . answer ( mode ) ;
Code	new mockingProgress () . answer ( mode ) ;
Distance : 9

119
Tree	verificationStarted ( mode , NameBasedDefinitionProvider ) ;
Code	verificationStarted ( mode , NameBasedDefinitionProvider ) ;
Distance : 8

120
Tree	mockingProgress . verificationListeners () ;
Code	mockingProgress . verificationListeners () ;
Distance : 10

121
Tree	mockingProgress . setTime ( NUMBER_CONSTANT , mode ) ;
Code	mockingProgress . setTime ( NUMBER_CONSTANT , mode ) ;
Distance : 6

122
Tree	mockingProgress . setTime () ;
Code	mockingProgress . setTime () ;
Distance : 10

123
Tree	mockingProgress . verificationListeners ( null ) ;
Code	mockingProgress . verificationListeners ( null ) ;
Distance : 8

124
Tree	mockingProgress . getDefaultAnswer ( this , mode ) ;
Code	mockingProgress . getDefaultAnswer ( this , mode ) ;
Distance : 6

125
Tree	mockingProgress . processCheck ( NUMBER_CONSTANT , mode ) ;
Code	mockingProgress . processCheck ( NUMBER_CONSTANT , mode ) ;
Distance : 6

126
Tree	mockingProgress . verificationStarted ( mode , NameBasedDefinitionProvider ) ;
Code	mockingProgress . verificationStarted ( mode , NameBasedDefinitionProvider ) ;
Distance : 6

127
Tree	verificationListeners ( mode ) ;
Code	verificationListeners ( mode ) ;
Distance : 9

128
Tree	mockingProgress () . addConsecutiveAnswer ( mode ) ;
Code	mockingProgress () . addConsecutiveAnswer ( mode ) ;
Distance : 8

129
Tree	mockingProgress . addConsecutiveAnswer ( mode , false ) ;
Code	mockingProgress . addConsecutiveAnswer ( mode , false ) ;
Distance : 7

130
Tree	mockingProgress . verificationStarted ( new wantedCount () ) ;
Code	mockingProgress . verificationStarted ( new wantedCount () ) ;
Distance : 6

131
Tree	mockingProgress . verificationStarted ( new VerificationMode () ) ;
Code	mockingProgress . verificationStarted ( new VerificationMode () ) ;
Distance : 6

132
Tree	mockingProgress . setTime ( null ) ;
Code	mockingProgress . setTime ( null ) ;
Distance : 8

133
Tree	mockingProgress . verificationStarted ( mode . getNode () ) ;
Code	mockingProgress . verificationStarted ( mode . getNode () ) ;
Distance : 7

134
Tree	inlineFunctionsInFile ( mode ) ;
Code	inlineFunctionsInFile ( mode ) ;
Distance : 9

135
Tree	mockingProgress . shapeLocation ( mode ) ;
Code	mockingProgress . shapeLocation ( mode ) ;
Distance : 7

136
Tree	mockingProgress . getFirstUndesiredInvocationStackTrace ( STRING_CONSTANT , mode ) ;
Code	mockingProgress . getFirstUndesiredInvocationStackTrace ( STRING_CONSTANT , mode ) ;
Distance : 6

137
Tree	mockingProgress () . setLanguageIn ( mode ) ;
Code	mockingProgress () . setLanguageIn ( mode ) ;
Distance : 8

138
Tree	mockingProgress = mockingProgress . parse ( mode ) ;
Code	mockingProgress = mockingProgress . parse ( mode ) ;
Distance : 8

139
Tree	mockingProgress . addConsecutiveAnswer ( false ) ;
Code	mockingProgress . addConsecutiveAnswer ( false ) ;
Distance : 8

140
Tree	verificationStarted ( mode . answer () ) ;
Code	verificationStarted ( mode . answer () ) ;
Distance : 9

141
Tree	mockingProgress . verificationStarted ( mode . getString () ) ;
Code	mockingProgress . verificationStarted ( mode . getString () ) ;
Distance : 7

142
Tree	mockingProgress . addConsecutiveAnswer ( this , mode ) ;
Code	mockingProgress . addConsecutiveAnswer ( this , mode ) ;
Distance : 6

143
Tree	verificationStarted ( mode , mockingProgress , MOCKING_PROGRESS ) ;
Code	verificationStarted ( mode , mockingProgress , MOCKING_PROGRESS ) ;
Distance : 8

144
Tree	mockingProgress . getDefaultAnswer ( NUMBER_CONSTANT , mode ) ;
Code	mockingProgress . getDefaultAnswer ( NUMBER_CONSTANT , mode ) ;
Distance : 6

145
Tree	verificationStarted ( mode , mockingProgress , target ) ;
Code	verificationStarted ( mode , mockingProgress , target ) ;
Distance : 8

146
Tree	mockingProgress . addConsecutiveAnswer ( NUMBER_CONSTANT , mode ) ;
Code	mockingProgress . addConsecutiveAnswer ( NUMBER_CONSTANT , mode ) ;
Distance : 6

147
Tree	mockingProgress . verificationListeners ( false ) ;
Code	mockingProgress . verificationListeners ( false ) ;
Distance : 8

148
Tree	mockingProgress . processCheck ( null ) ;
Code	mockingProgress . processCheck ( null ) ;
Distance : 8

149
Tree	mockingProgress . setTime ( false ) ;
Code	mockingProgress . setTime ( false ) ;
Distance : 8

150
Tree	mockingProgress . setMethodForStubbing ( STRING_CONSTANT , mode ) ;
Code	mockingProgress . setMethodForStubbing ( STRING_CONSTANT , mode ) ;
Distance : 6

151
Tree	mockingProgress . getFirstUndesiredInvocationStackTrace ( false ) ;
Code	mockingProgress . getFirstUndesiredInvocationStackTrace ( false ) ;
Distance : 8

152
Tree	mockingProgress . verificationStarted ( mode , mockingProgress . getOptions () ) ;
Code	mockingProgress . verificationStarted ( mode , mockingProgress . getOptions () ) ;
Distance : 7

153
Tree	mockingProgress . addConsecutiveAnswer ( null ) ;
Code	mockingProgress . addConsecutiveAnswer ( null ) ;
Distance : 8

154
Tree	mockingProgress . setMethodForStubbing ( null ) ;
Code	mockingProgress . setMethodForStubbing ( null ) ;
Distance : 8

155
Tree	mockingProgress . getFirstUndesiredInvocationStackTrace () ;
Code	mockingProgress . getFirstUndesiredInvocationStackTrace () ;
Distance : 10

156
Tree	mockingProgress . processCheck () ;
Code	mockingProgress . processCheck () ;
Distance : 10

157
Tree	mockingProgress . verificationStarted ( mode , parent ) ;
Code	mockingProgress . verificationStarted ( mode , parent ) ;
Distance : 6

158
Tree	getWanted ( mode ) ;
Code	getWanted ( mode ) ;
Distance : 9

159
Tree	mockingProgress . verificationListeners ( this , mode ) ;
Code	mockingProgress . verificationListeners ( this , mode ) ;
Distance : 6

160
Tree	mockingProgress . processCheck ( false ) ;
Code	mockingProgress . processCheck ( false ) ;
Distance : 8

161
Tree	mockingProgress . verificationStarted ( mode , UTF_8 ) ;
Code	mockingProgress . verificationStarted ( mode , UTF_8 ) ;
Distance : 6

162
Tree	mockingProgress . verificationStarted ( STRING_CONSTANT , mode ) ;
Code	mockingProgress . verificationStarted ( STRING_CONSTANT , mode ) ;
Distance : 5

163
Tree	mockingProgress . verificationStarted ( mode , new LocalQName ( mode ) ) ;
Code	mockingProgress . verificationStarted ( mode , new LocalQName ( mode ) ) ;
Distance : 5

164
Tree	verificationStarted ( mode . getNode () ) ;
Code	verificationStarted ( mode . getNode () ) ;
Distance : 9

165
Tree	this . currentScope . verificationListeners ( mode ) ;
Code	this . currentScope . verificationListeners ( mode ) ;
Distance : 8

166
Tree	mockingProgress . verificationStarted ( mode , NameBasedDefinitionProvider . verificationListeners () ) ;
Code	mockingProgress . verificationStarted ( mode , NameBasedDefinitionProvider . verificationListeners () ) ;
Distance : 7

167
Tree	mockingProgress . serializableMode ( mode ) ;
Code	mockingProgress . serializableMode ( mode ) ;
Distance : 7

168
Tree	mockingProgress . getFirstUndesiredInvocationStackTrace ( this , mode ) ;
Code	mockingProgress . getFirstUndesiredInvocationStackTrace ( this , mode ) ;
Distance : 6

169
Tree	mockingProgress . verificationListeners ( NUMBER_CONSTANT , mode ) ;
Code	mockingProgress . verificationListeners ( NUMBER_CONSTANT , mode ) ;
Distance : 6

170
Tree	mockingProgress . setTime ( this , mode ) ;
Code	mockingProgress . setTime ( this , mode ) ;
Distance : 6

171
Tree	mockingProgress . verificationStarted ( Feature.MODULES ) ;
Code	mockingProgress . verificationStarted ( Feature.MODULES ) ;
Distance : 7

172
Tree	mockingProgress . verificationListeners ( STRING_CONSTANT , mode ) ;
Code	mockingProgress . verificationListeners ( STRING_CONSTANT , mode ) ;
Distance : 6

173
Tree	mockingProgress . setTime ( STRING_CONSTANT , mode ) ;
Code	mockingProgress . setTime ( STRING_CONSTANT , mode ) ;
Distance : 6

174
Tree	mockingProgress . getFirstUndesiredInvocationStackTrace ( null ) ;
Code	mockingProgress . getFirstUndesiredInvocationStackTrace ( null ) ;
Distance : 8

175
Tree	mockingProgress . getFirstUndesiredInvocationStackTrace ( mode ) ;
Code	mockingProgress . getFirstUndesiredInvocationStackTrace ( mode ) ;
Distance : 7

176
Tree	mockingProgress . verificationStarted ( mode , mockingProgress ) ;
Code	mockingProgress . verificationStarted ( mode , mockingProgress ) ;
Distance : 6

177
Tree	mockingProgress . processCheck ( STRING_CONSTANT , mode ) ;
Code	mockingProgress . processCheck ( STRING_CONSTANT , mode ) ;
Distance : 6

178
Tree	mockingProgress . verificationStarted ( null ) ;
Code	mockingProgress . verificationStarted ( null ) ;
Distance : 7

179
Tree	checkSignificanceLevel ( mode ) ;
Code	checkSignificanceLevel ( mode ) ;
Distance : 9

180
Tree	verificationStarted ( mode , bp ) ;
Code	verificationStarted ( mode , bp ) ;
Distance : 8

181
Tree	new mockingProgress () . verificationListeners ( mode ) ;
Code	new mockingProgress () . verificationListeners ( mode ) ;
Distance : 9

182
Tree	verificationStarted ( mode , bp , mockingProgress ) ;
Code	verificationStarted ( mode , bp , mockingProgress ) ;
Distance : 8

183
Tree	mockingProgress = mockingProgress . getWanted ( mode ) ;
Code	mockingProgress = mockingProgress . getWanted ( mode ) ;
Distance : 8

184
Tree	mockingProgress . getDefaultAnswer ( STRING_CONSTANT , mode ) ;
Code	mockingProgress . getDefaultAnswer ( STRING_CONSTANT , mode ) ;
Distance : 6

185
Tree	mockingProgress . verificationStarted ( mode , object ) ;
Code	mockingProgress . verificationStarted ( mode , object ) ;
Distance : 6

186
Tree	mockingProgress = new PoissonDistributionImpl ( mode ) ;
Code	mockingProgress = new PoissonDistributionImpl ( mode ) ;
Distance : 7

187
Tree	mockingProgress . getFirstUndesiredInvocationStackTrace ( mode , false ) ;
Code	mockingProgress . getFirstUndesiredInvocationStackTrace ( mode , false ) ;
Distance : 7

188
Tree	verificationStarted ( mode . getLanguageIn () ) ;
Code	verificationStarted ( mode . getLanguageIn () ) ;
Distance : 9

189
Tree	mockingProgress . setMethodForStubbing ( false ) ;
Code	mockingProgress . setMethodForStubbing ( false ) ;
Distance : 8

190
Tree	mockingProgress = mockingProgress . answer ( mode ) ;
Code	mockingProgress = mockingProgress . answer ( mode ) ;
Distance : 8

191
Tree	verificationStarted ( mode . getWanted () ) ;
Code	verificationStarted ( mode . getWanted () ) ;
Distance : 9

192
Tree	mockingProgress . setMethodForStubbing ( mode , false ) ;
Code	mockingProgress . setMethodForStubbing ( mode , false ) ;
Distance : 7

193
Tree	mockingProgress . getDefaultAnswer () ;
Code	mockingProgress . getDefaultAnswer () ;
Distance : 10

194
Tree	mockingProgress . setMethodForStubbing ( this , mode ) ;
Code	mockingProgress . setMethodForStubbing ( this , mode ) ;
Distance : 6

195
Tree	mockingProgress . denormalizePass ( mode ) ;
Code	mockingProgress . denormalizePass ( mode ) ;
Distance : 7

196
Tree	mockingProgress . setMethodForStubbing ( NUMBER_CONSTANT , mode ) ;
Code	mockingProgress . setMethodForStubbing ( NUMBER_CONSTANT , mode ) ;
Distance : 6

197
Tree	mockingProgress . getFirstUndesiredInvocationStackTrace ( NUMBER_CONSTANT , mode ) ;
Code	mockingProgress . getFirstUndesiredInvocationStackTrace ( NUMBER_CONSTANT , mode ) ;
Distance : 6

198
Tree	mockingProgress . processCheck ( this , mode ) ;
Code	mockingProgress . processCheck ( this , mode ) ;
Distance : 6

199
Tree	mockingProgress . getDefaultAnswer ( null ) ;
Code	mockingProgress . getDefaultAnswer ( null ) ;
Distance : 8

========================================================================


========================================================================
Example Number: 86
Parent Code is: 
return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
-------------------------------------------------------------------------------
Child code is: 
return recordDeepStubAnswer ( newDeepStubMock ( returnTypeGenericMetadata , invocation . getMock () ) , container ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=recordDeepStubAnswer}) (214{val=(}) (32 (802{val=newDeepStubMock}) (214{val=(}) (800{val=returnTypeGenericMetadata}) (215{val=)})) (234{val=,}) (800{val=container}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (802{val=recordDeepStubAnswer}) (214{val=(}) (32 (802{val=newDeepStubMock}) (214{val=(}) (800{val=returnTypeGenericMetadata}) (234{val=,}) (32 (800{val=invocation}) (235{val=.}) (802{val=getMock}) (216{val=()})) (215{val=)})) (234{val=,}) (800{val=container}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/10/parent/src_org_mockito_internal_stubbing_defaultanswers_ReturnsDeepStubs.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return recordDeepStubMock ( arz , container ) < container ;
Code	return recordDeepStubMock ( arz , container ) < container ;
Distance : 10

1
Tree	return recordDeepStubMock ( arz , container ) < suffix ;
Code	return recordDeepStubMock ( arz , container ) < suffix ;
Distance : 11

2
Tree	return recordDeepStubMock ( returnTypeGenericMetadata ) . defaultBehavior ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubMock ( returnTypeGenericMetadata ) . defaultBehavior ( returnTypeGenericMetadata ) ;
Distance : 10

3
Tree	return recordDeepStubMock ( ttlAst , container ) < container ;
Code	return recordDeepStubMock ( ttlAst , container ) < container ;
Distance : 10

4
Tree	return hasIntercept . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container ) ;
Code	return hasIntercept . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

5
Tree	return recordDeepStubMock ( StandardXYSeriesLabelGenerator , container ) ;
Code	return recordDeepStubMock ( StandardXYSeriesLabelGenerator , container ) ;
Distance : 10

6
Tree	return hasIntercept . nextPascal ( newHeaderNode ( returnTypeGenericMetadata ) , container ) < suffix ;
Code	return hasIntercept . nextPascal ( newHeaderNode ( returnTypeGenericMetadata ) , container ) < suffix ;
Distance : 11

7
Tree	return hasIntercept . recordDeepStubMock ( createNewDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return hasIntercept . recordDeepStubMock ( createNewDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

8
Tree	return recordDeepStubMock ( withMockFeatures ( returnTypeGenericMetadata ) , container ) ;
Code	return recordDeepStubMock ( withMockFeatures ( returnTypeGenericMetadata ) , container ) ;
Distance : 7

9
Tree	return recordDeepStubMock ( CLOSURE_PATH , container ) ;
Code	return recordDeepStubMock ( CLOSURE_PATH , container ) ;
Distance : 10

10
Tree	return hasIntercept . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) ) < valueMap ;
Code	return hasIntercept . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) ) < valueMap ;
Distance : 12

11
Tree	return recordDeepStubMock ( url2 ) . defaultBehavior ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubMock ( url2 ) . defaultBehavior ( returnTypeGenericMetadata ) ;
Distance : 11

12
Tree	return multiplicand . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container ) < suffix ;
Code	return multiplicand . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container ) < suffix ;
Distance : 11

13
Tree	return hasIntercept . nextPascal ( newHeaderNode ( returnTypeGenericMetadata ) , container ) ;
Code	return hasIntercept . nextPascal ( newHeaderNode ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

14
Tree	return recordDeepStubMock ( toCanonicalName ( returnTypeGenericMetadata ) , container ) ;
Code	return recordDeepStubMock ( toCanonicalName ( returnTypeGenericMetadata ) , container ) ;
Distance : 7

15
Tree	return multiplicand . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container ) ;
Code	return multiplicand . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

16
Tree	return recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container ) < schedFuture ;
Code	return recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container ) < schedFuture ;
Distance : 9

17
Tree	return hasIntercept . recordDeepStubMock ( getOrCreateProperty ( returnTypeGenericMetadata ) , container ) ;
Code	return hasIntercept . recordDeepStubMock ( getOrCreateProperty ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

18
Tree	return recordDeepStubMock ( ttlAst , container ) < suffix ;
Code	return recordDeepStubMock ( ttlAst , container ) < suffix ;
Distance : 11

19
Tree	return actualbyName . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container ) ;
Code	return actualbyName . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

20
Tree	return recordDeepStubMock ( returnTypeGenericMetadata ) < suffix ;
Code	return recordDeepStubMock ( returnTypeGenericMetadata ) < suffix ;
Distance : 11

21
Tree	return checkForNewObjects . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container ) ;
Code	return checkForNewObjects . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

22
Tree	return recordDeepStubMock ( arz ) . defaultBehavior ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubMock ( arz ) . defaultBehavior ( returnTypeGenericMetadata ) ;
Distance : 11

23
Tree	return ( int [] ) getInterceptor ( returnTypeGenericMetadata , container ) ;
Code	return ( int [] ) getInterceptor ( returnTypeGenericMetadata , container ) ;
Distance : 10

24
Tree	return recordDeepStubMock ( returnTypeGenericMetadata , container ) && anyObject ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubMock ( returnTypeGenericMetadata , container ) && anyObject ( returnTypeGenericMetadata ) ;
Distance : 10

25
Tree	return hasIntercept . recordDeepStubMock ( createNewDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Code	return hasIntercept . recordDeepStubMock ( createNewDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 11

26
Tree	return hasIntercept . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container ) < schedFuture ;
Code	return hasIntercept . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container ) < schedFuture ;
Distance : 11

27
Tree	return hasIntercept . nextPascal ( newHeaderNode ( returnTypeGenericMetadata ) , container ) < container ;
Code	return hasIntercept . nextPascal ( newHeaderNode ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 11

28
Tree	return recordDeepStubMock ( url2 , container ) && anyObject ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubMock ( url2 , container ) && anyObject ( returnTypeGenericMetadata ) ;
Distance : 11

29
Tree	return IS_OS_WINDOWS . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container ) ;
Code	return IS_OS_WINDOWS . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

30
Tree	return hasIntercept . recordDeepStubMock ( returnTypeGenericMetadata , container + defaultBehavior ( returnTypeGenericMetadata ) ) ;
Code	return hasIntercept . recordDeepStubMock ( returnTypeGenericMetadata , container + defaultBehavior ( returnTypeGenericMetadata ) ) ;
Distance : 10

31
Tree	return hasIntercept . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) ) < suffix ;
Code	return hasIntercept . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) ) < suffix ;
Distance : 12

32
Tree	return recordDeepStubMock ( returnTypeGenericMetadata , container ) && annotationType ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubMock ( returnTypeGenericMetadata , container ) && annotationType ( returnTypeGenericMetadata ) ;
Distance : 10

33
Tree	return recordDeepStubMock ( url2 , container ) && annotationType ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubMock ( url2 , container ) && annotationType ( returnTypeGenericMetadata ) ;
Distance : 11

34
Tree	return recordDeepStubMock ( invocationOf ( returnTypeGenericMetadata ) , container ) ;
Code	return recordDeepStubMock ( invocationOf ( returnTypeGenericMetadata ) , container ) ;
Distance : 7

35
Tree	return recordDeepStubMock ( createNewDeepStubMock ( returnTypeGenericMetadata ) , container ) < suffix ;
Code	return recordDeepStubMock ( createNewDeepStubMock ( returnTypeGenericMetadata ) , container ) < suffix ;
Distance : 9

36
Tree	return recordDeepStubMock ( arz , container ) && anyObject ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubMock ( arz , container ) && anyObject ( returnTypeGenericMetadata ) ;
Distance : 11

37
Tree	return recordDeepStubMock ( arz , container ) ;
Code	return recordDeepStubMock ( arz , container ) ;
Distance : 10

38
Tree	return hasIntercept . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container ) < container ;
Code	return hasIntercept . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 11

39
Tree	return ( int [] ) repeat ( returnTypeGenericMetadata , container ) ;
Code	return ( int [] ) repeat ( returnTypeGenericMetadata , container ) ;
Distance : 10

40
Tree	return recordDeepStubMock ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) ;
Code	return recordDeepStubMock ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) ;
Distance : 9

41
Tree	return recordDeepStubMock ( createNewDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Code	return recordDeepStubMock ( createNewDeepStubMock ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 9

42
Tree	return recordDeepStubMock ( returnTypeGenericMetadata ) < container ;
Code	return recordDeepStubMock ( returnTypeGenericMetadata ) < container ;
Distance : 10

43
Tree	return recordDeepStubMock ( ttlAst , container ) ;
Code	return recordDeepStubMock ( ttlAst , container ) ;
Distance : 10

44
Tree	return recordDeepStubMock ( peekOctalDigit ( returnTypeGenericMetadata ) , container ) < suffix ;
Code	return recordDeepStubMock ( peekOctalDigit ( returnTypeGenericMetadata ) , container ) < suffix ;
Distance : 9

45
Tree	return recordDeepStubMock ( url2 ) < container ;
Code	return recordDeepStubMock ( url2 ) < container ;
Distance : 11

46
Tree	return hasIntercept . recordDeepStubMock ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) ;
Code	return hasIntercept . recordDeepStubMock ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) ;
Distance : 11

47
Tree	return recordDeepStubMock ( JAVA_SPECIFICATION_VERSION , container ) ;
Code	return recordDeepStubMock ( JAVA_SPECIFICATION_VERSION , container ) ;
Distance : 10

48
Tree	return recordDeepStubMock ( returnTypeGenericMetadata , container ) < container ;
Code	return recordDeepStubMock ( returnTypeGenericMetadata , container ) < container ;
Distance : 9

49
Tree	return recordDeepStubMock ( getOrCreateProperty ( returnTypeGenericMetadata ) , container ) ;
Code	return recordDeepStubMock ( getOrCreateProperty ( returnTypeGenericMetadata ) , container ) ;
Distance : 7

50
Tree	return hasIntercept . nextPascal ( newHeaderNode ( returnTypeGenericMetadata ) ) ;
Code	return hasIntercept . nextPascal ( newHeaderNode ( returnTypeGenericMetadata ) ) ;
Distance : 11

51
Tree	return hasIntercept . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) ) < annotationType ;
Code	return hasIntercept . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) ) < annotationType ;
Distance : 12

52
Tree	return ( ttlAst ) container . of ( returnTypeGenericMetadata ) ;
Code	return ( ttlAst ) container . of ( returnTypeGenericMetadata ) ;
Distance : 11

53
Tree	TransformUtils . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container )
Code	TransformUtils . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container )
Distance : 10

54
Tree	return hasIntercept . recordDeepStubMock ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) < container ;
Code	return hasIntercept . recordDeepStubMock ( createNewDeepStubMock ( returnTypeGenericMetadata ) ) < container ;
Distance : 11

55
Tree	return hasIntercept . nextPascal ( newHeaderNode ( returnTypeGenericMetadata ) ) < container ;
Code	return hasIntercept . nextPascal ( newHeaderNode ( returnTypeGenericMetadata ) ) < container ;
Distance : 11

56
Tree	return recordDeepStubMock ( getItemShape ( returnTypeGenericMetadata ) , container ) ;
Code	return recordDeepStubMock ( getItemShape ( returnTypeGenericMetadata ) , container ) ;
Distance : 7

57
Tree	return hasIntercept . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) ) < container ;
Code	return hasIntercept . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) ) < container ;
Distance : 11

58
Tree	maybeThisType . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container )
Code	maybeThisType . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container )
Distance : 10

59
Tree	return ( int [] ) anyObject ( returnTypeGenericMetadata , container ) ;
Code	return ( int [] ) anyObject ( returnTypeGenericMetadata , container ) ;
Distance : 10

60
Tree	return recordDeepStubMock ( returnTypeGenericMetadata ) && annotationType ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubMock ( returnTypeGenericMetadata ) && annotationType ( returnTypeGenericMetadata ) ;
Distance : 11

61
Tree	return recordDeepStubMock ( arz ) < container ;
Code	return recordDeepStubMock ( arz ) < container ;
Distance : 11

62
Tree	return multiplicand . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) ) ;
Code	return multiplicand . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) ) ;
Distance : 11

63
Tree	return ( valueClass ) container . of ( returnTypeGenericMetadata ) ;
Code	return ( valueClass ) container . of ( returnTypeGenericMetadata ) ;
Distance : 11

64
Tree	_isMinimize . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container )
Code	_isMinimize . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container )
Distance : 10

65
Tree	return recordDeepStubMock ( peekOctalDigit ( returnTypeGenericMetadata ) ) ;
Code	return recordDeepStubMock ( peekOctalDigit ( returnTypeGenericMetadata ) ) ;
Distance : 9

66
Tree	return recordDeepStubMock ( returnTypeGenericMetadata ) && repeat ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubMock ( returnTypeGenericMetadata ) && repeat ( returnTypeGenericMetadata ) ;
Distance : 11

67
Tree	return recordDeepStubMock ( url2 , container ) < container ;
Code	return recordDeepStubMock ( url2 , container ) < container ;
Distance : 10

68
Tree	return recordDeepStubMock ( withMockFeatures ( returnTypeGenericMetadata ) ) ;
Code	return recordDeepStubMock ( withMockFeatures ( returnTypeGenericMetadata ) ) ;
Distance : 9

69
Tree	return recordDeepStubMock ( returnTypeGenericMetadata , container ) < suffix ;
Code	return recordDeepStubMock ( returnTypeGenericMetadata , container ) < suffix ;
Distance : 10

70
Tree	return multiplicand . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) ) < container ;
Code	return multiplicand . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) ) < container ;
Distance : 11

71
Tree	return recordDeepStubMock ( sub1 , container ) ;
Code	return recordDeepStubMock ( sub1 , container ) ;
Distance : 10

72
Tree	return ( int [] ) decamelizeMatcher ( returnTypeGenericMetadata , container ) ;
Code	return ( int [] ) decamelizeMatcher ( returnTypeGenericMetadata , container ) ;
Distance : 10

73
Tree	return recordDeepStubMock ( arz ) . returnFalse ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubMock ( arz ) . returnFalse ( returnTypeGenericMetadata ) ;
Distance : 11

74
Tree	return recordDeepStubMock ( url2 , container ) < suffix ;
Code	return recordDeepStubMock ( url2 , container ) < suffix ;
Distance : 11

75
Tree	return hasIntercept . recordDeepStubMock ( returnTypeGenericMetadata . get () , container ) < suffix ;
Code	return hasIntercept . recordDeepStubMock ( returnTypeGenericMetadata . get () , container ) < suffix ;
Distance : 9

76
Tree	return recordDeepStubMock ( url2 ) && annotationType ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubMock ( url2 ) && annotationType ( returnTypeGenericMetadata ) ;
Distance : 12

77
Tree	return recordDeepStubMock ( returnTypeGenericMetadata , container ) ;
Code	return recordDeepStubMock ( returnTypeGenericMetadata , container ) ;
Distance : 9

78
Tree	mapper . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container )
Code	mapper . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container )
Distance : 10

79
Tree	return actualbyName . recordDeepStubMock ( returnTypeGenericMetadata , container + defaultBehavior ( returnTypeGenericMetadata ) ) ;
Code	return actualbyName . recordDeepStubMock ( returnTypeGenericMetadata , container + defaultBehavior ( returnTypeGenericMetadata ) ) ;
Distance : 10

80
Tree	return hasIntercept . recordDeepStubMock ( returnTypeGenericMetadata . get () , container ) < valueMap ;
Code	return hasIntercept . recordDeepStubMock ( returnTypeGenericMetadata . get () , container ) < valueMap ;
Distance : 9

81
Tree	return recordDeepStubMock ( url2 , container ) ;
Code	return recordDeepStubMock ( url2 , container ) ;
Distance : 10

82
Tree	return hasIntercept . recordDeepStubMock ( returnTypeGenericMetadata . get () , container ) < annotationType ;
Code	return hasIntercept . recordDeepStubMock ( returnTypeGenericMetadata . get () , container ) < annotationType ;
Distance : 9

83
Tree	return recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container ) < suffix ;
Code	return recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container ) < suffix ;
Distance : 9

84
Tree	return hasIntercept . recordDeepStubMock ( returnTypeGenericMetadata , container + this . backgroundPaint . getNameNode ( CHAR_CONS , CHAR_CONS ) ) ;
Code	return hasIntercept . recordDeepStubMock ( returnTypeGenericMetadata , container + this . backgroundPaint . getNameNode ( CHAR_CONS , CHAR_CONS ) ) ;
Distance : 13

85
Tree	return ( LiteralToken ) container . getDaysInYearMax ( returnTypeGenericMetadata ) ;
Code	return ( LiteralToken ) container . getDaysInYearMax ( returnTypeGenericMetadata ) ;
Distance : 11

86
Tree	return hasIntercept . recordDeepStubMock ( returnTypeGenericMetadata . get () , container ) < container ;
Code	return hasIntercept . recordDeepStubMock ( returnTypeGenericMetadata . get () , container ) < container ;
Distance : 9

87
Tree	return recordDeepStubMock ( ttlAst ) . returnFalse ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubMock ( ttlAst ) . returnFalse ( returnTypeGenericMetadata ) ;
Distance : 11

88
Tree	return recordDeepStubMock ( ttlAst ) < container ;
Code	return recordDeepStubMock ( ttlAst ) < container ;
Distance : 11

89
Tree	return recordDeepStubMock ( ttlAst ) && annotationType ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubMock ( ttlAst ) && annotationType ( returnTypeGenericMetadata ) ;
Distance : 12

90
Tree	return hasIntercept . recordDeepStubMock ( getOrCreateProperty ( returnTypeGenericMetadata , false ) , container ) ;
Code	return hasIntercept . recordDeepStubMock ( getOrCreateProperty ( returnTypeGenericMetadata , false ) , container ) ;
Distance : 8

91
Tree	return hasIntercept . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container ) < suffix ;
Code	return hasIntercept . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container ) < suffix ;
Distance : 11

92
Tree	return actualbyName . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata , false ) , container ) ;
Code	return actualbyName . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata , false ) , container ) ;
Distance : 8

93
Tree	return checkForNewObjects . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata , false ) , container ) ;
Code	return checkForNewObjects . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata , false ) , container ) ;
Distance : 8

94
Tree	return recordDeepStubMock ( url2 ) < suffix ;
Code	return recordDeepStubMock ( url2 ) < suffix ;
Distance : 12

95
Tree	return checkForNewObjects . recordDeepStubMock ( returnTypeGenericMetadata , container + defaultBehavior ( returnTypeGenericMetadata ) ) ;
Code	return checkForNewObjects . recordDeepStubMock ( returnTypeGenericMetadata , container + defaultBehavior ( returnTypeGenericMetadata ) ) ;
Distance : 10

96
Tree	return ( LiteralToken ) repeat ( returnTypeGenericMetadata ) ;
Code	return ( LiteralToken ) repeat ( returnTypeGenericMetadata ) ;
Distance : 12

97
Tree	return recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) ) ;
Code	return recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) ) ;
Distance : 9

98
Tree	return hasIntercept . recordDeepStubMock ( returnTypeGenericMetadata . get () , container ) < schedFuture ;
Code	return hasIntercept . recordDeepStubMock ( returnTypeGenericMetadata . get () , container ) < schedFuture ;
Distance : 9

99
Tree	return recordDeepStubMock ( ttlAst ) . defaultBehavior ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubMock ( ttlAst ) . defaultBehavior ( returnTypeGenericMetadata ) ;
Distance : 11

100
Tree	return recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container ) < container ;
Code	return recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 9

101
Tree	return recordDeepStubMock ( StandardXYSeriesLabelGenerator ) < container ;
Code	return recordDeepStubMock ( StandardXYSeriesLabelGenerator ) < container ;
Distance : 11

102
Tree	return recordDeepStubMock ( url2 ) && repeat ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubMock ( url2 ) && repeat ( returnTypeGenericMetadata ) ;
Distance : 12

103
Tree	return IS_OS_WINDOWS . recordDeepStubMock ( returnTypeGenericMetadata , container + defaultBehavior ( returnTypeGenericMetadata ) ) ;
Code	return IS_OS_WINDOWS . recordDeepStubMock ( returnTypeGenericMetadata , container + defaultBehavior ( returnTypeGenericMetadata ) ) ;
Distance : 10

104
Tree	return recordDeepStubMock ( returnTypeGenericMetadata ) . returnFalse ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubMock ( returnTypeGenericMetadata ) . returnFalse ( returnTypeGenericMetadata ) ;
Distance : 10

105
Tree	return recordDeepStubMock ( CLOSURE_PATH ) < container ;
Code	return recordDeepStubMock ( CLOSURE_PATH ) < container ;
Distance : 11

106
Tree	return recordDeepStubMock ( getOrCreateProperty ( returnTypeGenericMetadata ) , container ) < suffix ;
Code	return recordDeepStubMock ( getOrCreateProperty ( returnTypeGenericMetadata ) , container ) < suffix ;
Distance : 9

107
Tree	return hasIntercept . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) ) < PREVIOUSLY_GENERATED_MOCK_CLASSES ;
Code	return hasIntercept . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) ) < PREVIOUSLY_GENERATED_MOCK_CLASSES ;
Distance : 12

108
Tree	return hasIntercept . nextPascal ( returnTypeGenericMetadata , container + defaultBehavior ( returnTypeGenericMetadata ) ) ;
Code	return hasIntercept . nextPascal ( returnTypeGenericMetadata , container + defaultBehavior ( returnTypeGenericMetadata ) ) ;
Distance : 10

109
Tree	return recordDeepStubMock ( returnTypeGenericMetadata , container ) && repeat ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubMock ( returnTypeGenericMetadata , container ) && repeat ( returnTypeGenericMetadata ) ;
Distance : 10

110
Tree	return recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container ) ;
Code	return recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container ) ;
Distance : 7

111
Tree	return recordDeepStubMock ( peekOctalDigit ( returnTypeGenericMetadata ) , container ) ;
Code	return recordDeepStubMock ( peekOctalDigit ( returnTypeGenericMetadata ) , container ) ;
Distance : 7

112
Tree	return recordDeepStubMock ( url2 . isSpy () , container ) < container ;
Code	return recordDeepStubMock ( url2 . isSpy () , container ) < container ;
Distance : 10

113
Tree	anchorPoint . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container )
Code	anchorPoint . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container )
Distance : 10

114
Tree	return hasIntercept . recordDeepStubMock ( returnTypeGenericMetadata , container + this . categoryLabelURLs . getParser ( CHAR_CONS , CHAR_CONS ) ) ;
Code	return hasIntercept . recordDeepStubMock ( returnTypeGenericMetadata , container + this . categoryLabelURLs . getParser ( CHAR_CONS , CHAR_CONS ) ) ;
Distance : 13

115
Tree	return recordDeepStubMock ( getOrCreateProperty ( returnTypeGenericMetadata ) ) ;
Code	return recordDeepStubMock ( getOrCreateProperty ( returnTypeGenericMetadata ) ) ;
Distance : 9

116
Tree	return hasIntercept . recordDeepStubMock ( returnTypeGenericMetadata . get () ) < valueMap ;
Code	return hasIntercept . recordDeepStubMock ( returnTypeGenericMetadata . get () ) < valueMap ;
Distance : 9

117
Tree	return recordDeepStubMock ( ttlAst . isSpy () , container ) < suffix ;
Code	return recordDeepStubMock ( ttlAst . isSpy () , container ) < suffix ;
Distance : 10

118
Tree	return hasIntercept . nextPascal ( returnTypeGenericMetadata , container + this . backgroundPaint . getNameNode ( CHAR_CONS , CHAR_CONS ) ) ;
Code	return hasIntercept . nextPascal ( returnTypeGenericMetadata , container + this . backgroundPaint . getNameNode ( CHAR_CONS , CHAR_CONS ) ) ;
Distance : 13

119
Tree	return ( int [] ) addToEntry ( returnTypeGenericMetadata , container ) ;
Code	return ( int [] ) addToEntry ( returnTypeGenericMetadata , container ) ;
Distance : 10

120
Tree	return recordDeepStubMock ( ttlAst , container ) && anyObject ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubMock ( ttlAst , container ) && anyObject ( returnTypeGenericMetadata ) ;
Distance : 11

121
Tree	return recordDeepStubMock ( toCanonicalName ( returnTypeGenericMetadata ) ) ;
Code	return recordDeepStubMock ( toCanonicalName ( returnTypeGenericMetadata ) ) ;
Distance : 9

122
Tree	InternalMockHandler . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container )
Code	InternalMockHandler . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container )
Distance : 10

123
Tree	return ( double [] ) getInterceptor ( returnTypeGenericMetadata , container ) ;
Code	return ( double [] ) getInterceptor ( returnTypeGenericMetadata , container ) ;
Distance : 10

124
Tree	return hasIntercept . recordDeepStubMock ( returnTypeGenericMetadata , container + this . categoryLabelURLs . getNameNode ( CHAR_CONS , CHAR_CONS ) ) ;
Code	return hasIntercept . recordDeepStubMock ( returnTypeGenericMetadata , container + this . categoryLabelURLs . getNameNode ( CHAR_CONS , CHAR_CONS ) ) ;
Distance : 13

125
Tree	return hasIntercept . recordDeepStubMock ( returnTypeGenericMetadata . get () ) < schedFuture ;
Code	return hasIntercept . recordDeepStubMock ( returnTypeGenericMetadata . get () ) < schedFuture ;
Distance : 9

126
Tree	return ( LiteralToken ) annotationType ( isTypeCompatible ( returnTypeGenericMetadata ) , container ) ;
Code	return ( LiteralToken ) annotationType ( isTypeCompatible ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

127
Tree	return hasIntercept . recordDeepStubMock ( returnTypeGenericMetadata . get () ) < PREVIOUSLY_GENERATED_MOCK_CLASSES ;
Code	return hasIntercept . recordDeepStubMock ( returnTypeGenericMetadata . get () ) < PREVIOUSLY_GENERATED_MOCK_CLASSES ;
Distance : 9

128
Tree	currentScope . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container )
Code	currentScope . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container )
Distance : 10

129
Tree	return recordDeepStubMock ( invocationOf ( returnTypeGenericMetadata ) ) ;
Code	return recordDeepStubMock ( invocationOf ( returnTypeGenericMetadata ) ) ;
Distance : 9

130
Tree	return ( LiteralToken ) repeat ( invocationOf ( returnTypeGenericMetadata ) , container ) ;
Code	return ( LiteralToken ) repeat ( invocationOf ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

131
Tree	return hasIntercept . recordDeepStubMock ( returnTypeGenericMetadata , container + this . container . getParser ( CHAR_CONS , CHAR_CONS ) ) ;
Code	return hasIntercept . recordDeepStubMock ( returnTypeGenericMetadata , container + this . container . getParser ( CHAR_CONS , CHAR_CONS ) ) ;
Distance : 13

132
Tree	return hasIntercept . recordDeepStubMock ( returnTypeGenericMetadata , container + configureWith ( returnTypeGenericMetadata ) ) ;
Code	return hasIntercept . recordDeepStubMock ( returnTypeGenericMetadata , container + configureWith ( returnTypeGenericMetadata ) ) ;
Distance : 10

133
Tree	return hasIntercept . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata , false ) , container ) ;
Code	return hasIntercept . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata , false ) , container ) ;
Distance : 8

134
Tree	return hasIntercept . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container ) && container ;
Code	return hasIntercept . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container ) && container ;
Distance : 11

135
Tree	return multiplicand . recordDeepStubMock ( returnTypeGenericMetadata , container + defaultBehavior ( returnTypeGenericMetadata ) ) ;
Code	return multiplicand . recordDeepStubMock ( returnTypeGenericMetadata , container + defaultBehavior ( returnTypeGenericMetadata ) ) ;
Distance : 10

136
Tree	return ( rootCause ) repeat ( isTypeCompatible ( returnTypeGenericMetadata ) , container ) ;
Code	return ( rootCause ) repeat ( isTypeCompatible ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

137
Tree	return recordDeepStubMock ( returnTypeGenericMetadata ) && defaultBehavior ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubMock ( returnTypeGenericMetadata ) && defaultBehavior ( returnTypeGenericMetadata ) ;
Distance : 11

138
Tree	return IS_OS_WINDOWS . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) ) ;
Code	return IS_OS_WINDOWS . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) ) ;
Distance : 11

139
Tree	return multiplicand . recordDeepStubMock ( returnTypeGenericMetadata . get () , container ) < suffix ;
Code	return multiplicand . recordDeepStubMock ( returnTypeGenericMetadata . get () , container ) < suffix ;
Distance : 9

140
Tree	return recordDeepStubMock ( arz , container ) && annotationType ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubMock ( arz , container ) && annotationType ( returnTypeGenericMetadata ) ;
Distance : 11

141
Tree	return hasIntercept . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) ) ;
Code	return hasIntercept . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) ) ;
Distance : 11

142
Tree	return ( varStatement ) container . of ( returnTypeGenericMetadata ) ;
Code	return ( varStatement ) container . of ( returnTypeGenericMetadata ) ;
Distance : 11

143
Tree	return hasIntercept . recordDeepStubMock ( createNewDeepStubMock ( returnTypeGenericMetadata , false ) , container ) ;
Code	return hasIntercept . recordDeepStubMock ( createNewDeepStubMock ( returnTypeGenericMetadata , false ) , container ) ;
Distance : 8

144
Tree	return recordDeepStubMock ( url2 ) . returnFalse ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubMock ( url2 ) . returnFalse ( returnTypeGenericMetadata ) ;
Distance : 11

145
Tree	return hasIntercept . recordDeepStubMock ( returnTypeGenericMetadata , container + this . container . getNameNode ( CHAR_CONS , CHAR_CONS ) ) ;
Code	return hasIntercept . recordDeepStubMock ( returnTypeGenericMetadata , container + this . container . getNameNode ( CHAR_CONS , CHAR_CONS ) ) ;
Distance : 13

146
Tree	return ( rootCause ) repeat ( returnTypeGenericMetadata ) ;
Code	return ( rootCause ) repeat ( returnTypeGenericMetadata ) ;
Distance : 12

147
Tree	return ( astValidationEnabled ) container . of ( returnTypeGenericMetadata ) ;
Code	return ( astValidationEnabled ) container . of ( returnTypeGenericMetadata ) ;
Distance : 11

148
Tree	return multiplicand . recordDeepStubMock ( returnTypeGenericMetadata , container + this . backgroundPaint . getNameNode ( CHAR_CONS , CHAR_CONS ) ) ;
Code	return multiplicand . recordDeepStubMock ( returnTypeGenericMetadata , container + this . backgroundPaint . getNameNode ( CHAR_CONS , CHAR_CONS ) ) ;
Distance : 13

149
Tree	return ( rootCause ) annotationType ( returnTypeGenericMetadata ) ;
Code	return ( rootCause ) annotationType ( returnTypeGenericMetadata ) ;
Distance : 12

150
Tree	return ( LiteralToken ) defaultBehavior ( returnTypeGenericMetadata ) ;
Code	return ( LiteralToken ) defaultBehavior ( returnTypeGenericMetadata ) ;
Distance : 12

151
Tree	return recordDeepStubMock ( createNewDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return recordDeepStubMock ( createNewDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 7

152
Tree	return recordDeepStubMock ( arz . isSpy () , container ) < container ;
Code	return recordDeepStubMock ( arz . isSpy () , container ) < container ;
Distance : 10

153
Tree	return recordDeepStubMock ( getItemShape ( returnTypeGenericMetadata ) ) ;
Code	return recordDeepStubMock ( getItemShape ( returnTypeGenericMetadata ) ) ;
Distance : 9

154
Tree	return recordDeepStubMock ( arz ) && annotationType ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubMock ( arz ) && annotationType ( returnTypeGenericMetadata ) ;
Distance : 12

155
Tree	return hasIntercept . nextPascal ( newHeaderNode ( returnTypeGenericMetadata , false ) , container ) ;
Code	return hasIntercept . nextPascal ( newHeaderNode ( returnTypeGenericMetadata , false ) , container ) ;
Distance : 8

156
Tree	return recordDeepStubMock ( getOrCreateProperty ( returnTypeGenericMetadata ) , container ) < container ;
Code	return recordDeepStubMock ( getOrCreateProperty ( returnTypeGenericMetadata ) , container ) < container ;
Distance : 9

157
Tree	return ( LiteralToken ) repeat ( createNewDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Code	return ( LiteralToken ) repeat ( createNewDeepStubMock ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

158
Tree	return hasIntercept . recordDeepStubMock ( returnTypeGenericMetadata , container + withSettings ( returnTypeGenericMetadata ) ) ;
Code	return hasIntercept . recordDeepStubMock ( returnTypeGenericMetadata , container + withSettings ( returnTypeGenericMetadata ) ) ;
Distance : 10

159
Tree	return ( rootCause ) container . of ( returnTypeGenericMetadata ) ;
Code	return ( rootCause ) container . of ( returnTypeGenericMetadata ) ;
Distance : 11

160
Tree	return recordDeepStubMock ( url2 ) && defaultBehavior ( returnTypeGenericMetadata ) ;
Code	return recordDeepStubMock ( url2 ) && defaultBehavior ( returnTypeGenericMetadata ) ;
Distance : 12

161
Tree	return hasIntercept . recordDeepStubMock ( createNewDeepStubMock ( returnTypeGenericMetadata ) , container ) < suffix ;
Code	return hasIntercept . recordDeepStubMock ( createNewDeepStubMock ( returnTypeGenericMetadata ) , container ) < suffix ;
Distance : 11

162
Tree	return ( LiteralToken ) annotationType ( invocationOf ( returnTypeGenericMetadata ) , container ) ;
Code	return ( LiteralToken ) annotationType ( invocationOf ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

163
Tree	return hasIntercept . recordDeepStubMock ( getOrCreateProperty ( returnTypeGenericMetadata ) ) ;
Code	return hasIntercept . recordDeepStubMock ( getOrCreateProperty ( returnTypeGenericMetadata ) ) ;
Distance : 11

164
Tree	return multiplicand . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata , false ) , container ) ;
Code	return multiplicand . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata , false ) , container ) ;
Distance : 8

165
Tree	dayOfWeek . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container )
Code	dayOfWeek . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container )
Distance : 10

166
Tree	return ( LiteralToken ) container . of ( returnTypeGenericMetadata ) ;
Code	return ( LiteralToken ) container . of ( returnTypeGenericMetadata ) ;
Distance : 11

167
Tree	return actualbyName . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) ) ;
Code	return actualbyName . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) ) ;
Distance : 11

168
Tree	return ( double [] ) repeat ( returnTypeGenericMetadata , container ) ;
Code	return ( double [] ) repeat ( returnTypeGenericMetadata , container ) ;
Distance : 10

169
Tree	return IS_OS_WINDOWS . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata , false ) , container ) ;
Code	return IS_OS_WINDOWS . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata , false ) , container ) ;
Distance : 8

170
Tree	return ( int [] ) annotationType ( returnTypeGenericMetadata , container ) ;
Code	return ( int [] ) annotationType ( returnTypeGenericMetadata , container ) ;
Distance : 10

171
Tree	return recordDeepStubMock ( returnTypeGenericMetadata . isSpy () , container ) < suffix ;
Code	return recordDeepStubMock ( returnTypeGenericMetadata . isSpy () , container ) < suffix ;
Distance : 9

172
Tree	return hasIntercept . recordDeepStubMock ( returnTypeGenericMetadata . get () , container ) < PREVIOUSLY_GENERATED_MOCK_CLASSES ;
Code	return hasIntercept . recordDeepStubMock ( returnTypeGenericMetadata . get () , container ) < PREVIOUSLY_GENERATED_MOCK_CLASSES ;
Distance : 9

173
Tree	return ( ttlAst ) repeat ( returnTypeGenericMetadata ) ;
Code	return ( ttlAst ) repeat ( returnTypeGenericMetadata ) ;
Distance : 12

174
Tree	return checkForNewObjects . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) ) ;
Code	return checkForNewObjects . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) ) ;
Distance : 11

175
Tree	return ( valueClass ) repeat ( returnTypeGenericMetadata ) ;
Code	return ( valueClass ) repeat ( returnTypeGenericMetadata ) ;
Distance : 12

176
Tree	return hasIntercept . nextPascal ( returnTypeGenericMetadata . get () , container ) < suffix ;
Code	return hasIntercept . nextPascal ( returnTypeGenericMetadata . get () , container ) < suffix ;
Distance : 9

177
Tree	return recordDeepStubMock ( url2 . isSpy () , container ) < suffix ;
Code	return recordDeepStubMock ( url2 . isSpy () , container ) < suffix ;
Distance : 10

178
Tree	return recordDeepStubMock ( returnTypeGenericMetadata . isSpy () , container ) < valueMap ;
Code	return recordDeepStubMock ( returnTypeGenericMetadata . isSpy () , container ) < valueMap ;
Distance : 9

179
Tree	return ( LiteralToken ) annotationType ( returnTypeGenericMetadata ) ;
Code	return ( LiteralToken ) annotationType ( returnTypeGenericMetadata ) ;
Distance : 12

180
Tree	return hasIntercept . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container ) && suffix ;
Code	return hasIntercept . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container ) && suffix ;
Distance : 11

181
Tree	return ( rootCause ) container . getDaysInYearMax ( returnTypeGenericMetadata ) ;
Code	return ( rootCause ) container . getDaysInYearMax ( returnTypeGenericMetadata ) ;
Distance : 11

182
Tree	return hasIntercept . recordDeepStubMock ( returnTypeGenericMetadata . get () ) < container ;
Code	return hasIntercept . recordDeepStubMock ( returnTypeGenericMetadata . get () ) < container ;
Distance : 8

183
Tree	return hasIntercept . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container ) && osVersion ;
Code	return hasIntercept . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container ) && osVersion ;
Distance : 11

184
Tree	return ( ttlAst ) annotationType ( returnTypeGenericMetadata ) ;
Code	return ( ttlAst ) annotationType ( returnTypeGenericMetadata ) ;
Distance : 12

185
Tree	return hasIntercept . recordDeepStubMock ( returnTypeGenericMetadata . get () ) < annotationType ;
Code	return hasIntercept . recordDeepStubMock ( returnTypeGenericMetadata . get () ) < annotationType ;
Distance : 9

186
Tree	return hasIntercept . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container ) && annotationType ;
Code	return hasIntercept . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container ) && annotationType ;
Distance : 11

187
Tree	return hasIntercept . recordDeepStubMock ( returnTypeGenericMetadata . get () ) < suffix ;
Code	return hasIntercept . recordDeepStubMock ( returnTypeGenericMetadata . get () ) < suffix ;
Distance : 9

188
Tree	return hasIntercept . recordDeepStubMock ( returnTypeGenericMetadata , container + this . backgroundPaint . getParser ( CHAR_CONS , CHAR_CONS ) ) ;
Code	return hasIntercept . recordDeepStubMock ( returnTypeGenericMetadata , container + this . backgroundPaint . getParser ( CHAR_CONS , CHAR_CONS ) ) ;
Distance : 13

189
Tree	return ( LiteralToken ) repeat ( isTypeCompatible ( returnTypeGenericMetadata ) , container ) ;
Code	return ( LiteralToken ) repeat ( isTypeCompatible ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

190
Tree	return recordDeepStubMock ( arz . isSpy () , container ) < suffix ;
Code	return recordDeepStubMock ( arz . isSpy () , container ) < suffix ;
Distance : 10

191
Tree	return recordDeepStubMock ( returnTypeGenericMetadata . isSpy () , container ) < container ;
Code	return recordDeepStubMock ( returnTypeGenericMetadata . isSpy () , container ) < container ;
Distance : 9

192
Tree	return hasIntercept . nextPascal ( returnTypeGenericMetadata . get () ) < valueMap ;
Code	return hasIntercept . nextPascal ( returnTypeGenericMetadata . get () ) < valueMap ;
Distance : 9

193
Tree	return ( rootCause ) annotationType ( isTypeCompatible ( returnTypeGenericMetadata ) , container ) ;
Code	return ( rootCause ) annotationType ( isTypeCompatible ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

194
Tree	return ( LiteralToken ) defaultBehavior ( isTypeCompatible ( returnTypeGenericMetadata ) , container ) ;
Code	return ( LiteralToken ) defaultBehavior ( isTypeCompatible ( returnTypeGenericMetadata ) , container ) ;
Distance : 9

195
Tree	return multiplicand . recordDeepStubMock ( returnTypeGenericMetadata . get () ) < valueMap ;
Code	return multiplicand . recordDeepStubMock ( returnTypeGenericMetadata . get () ) < valueMap ;
Distance : 9

196
Tree	return hasIntercept . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container ) && PREVIOUSLY_GENERATED_MOCK_CLASSES ;
Code	return hasIntercept . recordDeepStubMock ( newHeaderNode ( returnTypeGenericMetadata ) , container ) && PREVIOUSLY_GENERATED_MOCK_CLASSES ;
Distance : 11

197
Tree	return hasIntercept . recordDeepStubMock ( createNewDeepStubMock ( returnTypeGenericMetadata ) , container ) && suffix ;
Code	return hasIntercept . recordDeepStubMock ( createNewDeepStubMock ( returnTypeGenericMetadata ) , container ) && suffix ;
Distance : 11

198
Tree	return hasIntercept . nextPascal ( newHeaderNode ( returnTypeGenericMetadata ) , container ) && suffix ;
Code	return hasIntercept . nextPascal ( newHeaderNode ( returnTypeGenericMetadata ) , container ) && suffix ;
Distance : 11

199
Tree	return hasIntercept . recordDeepStubMock ( createNewDeepStubMock ( returnTypeGenericMetadata ) , container ) && osVersion ;
Code	return hasIntercept . recordDeepStubMock ( createNewDeepStubMock ( returnTypeGenericMetadata ) , container ) && osVersion ;
Distance : 11

========================================================================


========================================================================
Example Number: 87
Parent Code is: 
{ return ( Collection ) reportMatcher ( Any.ANY ) . returnList () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return anyCollection () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=Collection})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=anyCollection}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 9
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return clazz ; }
Code	{ return clazz ; }
Distance : 2

1
Tree	{ super ( modules ) ; setTolerance ( Any.ANY ) ; }
Code	{ super ( modules ) ; setTolerance ( Any.ANY ) ; }
Distance : 9

2
Tree	{ return reportMatcher ( Any.ANY ) . thenCallRealMethod () ; }
Code	{ return reportMatcher ( Any.ANY ) . thenCallRealMethod () ; }
Distance : 6

3
Tree	{ reportMatcher ( Any.ANY , oldMockHandler.mockSettings ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , oldMockHandler.mockSettings ) ; return null ; }
Distance : 9

4
Tree	{ Collection . ensureLibraryInjected ( Any.ANY ) ; return null ; }
Code	{ Collection . ensureLibraryInjected ( Any.ANY ) ; return null ; }
Distance : 9

5
Tree	{ reportMatcher ( Any.ANY , oldMockHandler.matchersBinder ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , oldMockHandler.matchersBinder ) ; return null ; }
Distance : 9

6
Tree	{ return AVAILABLE_IDS ; }
Code	{ return AVAILABLE_IDS ; }
Distance : 2

7
Tree	{ Collection . verifyIterationCount ( Any.ANY ) ; return null ; }
Code	{ Collection . verifyIterationCount ( Any.ANY ) ; return null ; }
Distance : 9

8
Tree	{ super ( Collection ) ; expectErrors ( Any.ANY ) ; }
Code	{ super ( Collection ) ; expectErrors ( Any.ANY ) ; }
Distance : 9

9
Tree	{ super ( modules ) ; initializeBuiltInTypes () ; }
Code	{ super ( modules ) ; initializeBuiltInTypes () ; }
Distance : 6

10
Tree	{ super ( Collection ) ; disallowGlobalThis ( Any.ANY ) ; }
Code	{ super ( Collection ) ; disallowGlobalThis ( Any.ANY ) ; }
Distance : 9

11
Tree	{ reportMatcher ( Any.ANY , NewTypeInference.UNDEFINED_SUPER_CLASS ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , NewTypeInference.UNDEFINED_SUPER_CLASS ) ; return null ; }
Distance : 9

12
Tree	{ return reportMatcher ( Collection ) . disallowGlobalThis () ; }
Code	{ return reportMatcher ( Collection ) . disallowGlobalThis () ; }
Distance : 6

13
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 2

14
Tree	{ return ( Collection ) reportMatcher ( array ) ; }
Code	{ return ( Collection ) reportMatcher ( array ) ; }
Distance : 7

15
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 7

16
Tree	{ return ( modules ) reportMatcher () ; }
Code	{ return ( modules ) reportMatcher () ; }
Distance : 4

17
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 1

18
Tree	{ return ( Collection ) object . getParameterTypes ( DurationFieldType ) ; }
Code	{ return ( Collection ) object . getParameterTypes ( DurationFieldType ) ; }
Distance : 9

19
Tree	{ return ( Collection ) object . getCanonicalName ( initializeCalls ) ; }
Code	{ return ( Collection ) object . getCanonicalName ( initializeCalls ) ; }
Distance : 9

20
Tree	{ return getCSVClone () ; }
Code	{ return getCSVClone () ; }
Distance : 1

21
Tree	{ return ( Collection ) reportMatcher ( RETURNS_DEFAULTS ) ; }
Code	{ return ( Collection ) reportMatcher ( RETURNS_DEFAULTS ) ; }
Distance : 7

22
Tree	{ mockingProgress ( Any.ANY ) ; return null ; }
Code	{ mockingProgress ( Any.ANY ) ; return null ; }
Distance : 7

23
Tree	{ checkNotNull ( Any.ANY ) ; return null ; }
Code	{ checkNotNull ( Any.ANY ) ; return null ; }
Distance : 7

24
Tree	{ return mapToSelf () ; }
Code	{ return mapToSelf () ; }
Distance : 1

25
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . isNotEqualTo () ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . isNotEqualTo () ; }
Distance : 9

26
Tree	{ return ( Collection ) getInterceptor ( Any.ANY ) ; }
Code	{ return ( Collection ) getInterceptor ( Any.ANY ) ; }
Distance : 7

27
Tree	{ return ( Collection ) reportMatcher () ; }
Code	{ return ( Collection ) reportMatcher () ; }
Distance : 4

28
Tree	{ checkPrinter ( Any.ANY ) ; return null ; }
Code	{ checkPrinter ( Any.ANY ) ; return null ; }
Distance : 7

29
Tree	{ return anyObject () ; }
Code	{ return anyObject () ; }
Distance : 1

30
Tree	{ return ( Collection ) object . getParameterTypes ( iValues ) ; }
Code	{ return ( Collection ) object . getParameterTypes ( iValues ) ; }
Distance : 9

31
Tree	{ Collection . nullNotPermitted ( Any.ANY ) ; return null ; }
Code	{ Collection . nullNotPermitted ( Any.ANY ) ; return null ; }
Distance : 9

32
Tree	{ enableNormalize ( Any.ANY ) ; return null ; }
Code	{ enableNormalize ( Any.ANY ) ; return null ; }
Distance : 7

33
Tree	{ return ( convId ) reportMatcher () ; }
Code	{ return ( convId ) reportMatcher () ; }
Distance : 4

34
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . getMethodProxy () ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . getMethodProxy () ; }
Distance : 9

35
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . getDeclaredType ( initializeCalls ) ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . getDeclaredType ( initializeCalls ) ; }
Distance : 12

36
Tree	{ reportMatcher () ; return null ; }
Code	{ reportMatcher () ; return null ; }
Distance : 5

37
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . setTypeValidationEnabled () ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . setTypeValidationEnabled () ; }
Distance : 9

38
Tree	{ return ( Collection ) object . getCanonicalName () ; }
Code	{ return ( Collection ) object . getCanonicalName () ; }
Distance : 6

39
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Distance : 7

40
Tree	{ return defaultString () ; }
Code	{ return defaultString () ; }
Distance : 1

41
Tree	{ return getDataset () ; }
Code	{ return getDataset () ; }
Distance : 1

42
Tree	{ return checkNotNull () ; }
Code	{ return checkNotNull () ; }
Distance : 1

43
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . disallowGlobalThis () ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . disallowGlobalThis () ; }
Distance : 9

44
Tree	{ return ( Collection ) reportMatcher ( nSteps ) ; }
Code	{ return ( Collection ) reportMatcher ( nSteps ) ; }
Distance : 7

45
Tree	{ return ( modules ) reportMatcher ( iValues ) ; }
Code	{ return ( modules ) reportMatcher ( iValues ) ; }
Distance : 7

46
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . getParameterTypes ( initializeCalls ) ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . getParameterTypes ( initializeCalls ) ; }
Distance : 12

47
Tree	{ recordImplicitInterfaceUses ( Any.ANY ) ; return null ; }
Code	{ recordImplicitInterfaceUses ( Any.ANY ) ; return null ; }
Distance : 7

48
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . getParameterTypes ( RETURNS_DEFAULTS ) ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . getParameterTypes ( RETURNS_DEFAULTS ) ; }
Distance : 12

49
Tree	{ return Collection ; }
Code	{ return Collection ; }
Distance : 2

50
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . getDeclaredType () ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . getDeclaredType () ; }
Distance : 9

51
Tree	{ return null ; }
Code	{ return null ; }
Distance : 2

52
Tree	{ return ( Collection ) object . getParameterTypes ( initializeCalls ) ; }
Code	{ return ( Collection ) object . getParameterTypes ( initializeCalls ) ; }
Distance : 9

53
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 4

54
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . getDeclaredType ( iValues ) ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . getDeclaredType ( iValues ) ; }
Distance : 12

55
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . clearInvocations () ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . clearInvocations () ; }
Distance : 9

56
Tree	{ return ( Collection ) reportMatcher ( iValues . getParameterTypes () ) ; }
Code	{ return ( Collection ) reportMatcher ( iValues . getParameterTypes () ) ; }
Distance : 9

57
Tree	{ return ( Collection ) reportMatcher ( iValues ) . clearInvocations () ; }
Code	{ return ( Collection ) reportMatcher ( iValues ) . clearInvocations () ; }
Distance : 9

58
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . clearInvocations ( initializeCalls ) ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . clearInvocations ( initializeCalls ) ; }
Distance : 12

59
Tree	{ return ( Collection ) reportMatcher ( map ) ; }
Code	{ return ( Collection ) reportMatcher ( map ) ; }
Distance : 7

60
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . getDeclaredType ( RETURNS_DEFAULTS ) ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . getDeclaredType ( RETURNS_DEFAULTS ) ; }
Distance : 12

61
Tree	{ return ( clazz ) reportMatcher () ; }
Code	{ return ( clazz ) reportMatcher () ; }
Distance : 4

62
Tree	{ return ( Collection ) object . getCanonicalName ( DurationFieldType ) ; }
Code	{ return ( Collection ) object . getCanonicalName ( DurationFieldType ) ; }
Distance : 9

63
Tree	{ return ( Collection ) getInterceptor () ; }
Code	{ return ( Collection ) getInterceptor () ; }
Distance : 4

64
Tree	{ return ( Collection ) object . getParameterTypes () ; }
Code	{ return ( Collection ) object . getParameterTypes () ; }
Distance : 6

65
Tree	{ super ( Collection ) ; checkShortName ( Any.ANY ) ; }
Code	{ super ( Collection ) ; checkShortName ( Any.ANY ) ; }
Distance : 9

66
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) ; }
Distance : 7

67
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . clearInvocations ( iValues ) ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . clearInvocations ( iValues ) ; }
Distance : 12

68
Tree	{ return modules ; }
Code	{ return modules ; }
Distance : 2

69
Tree	{ return ( Collection ) reportMatcher ( iValues ) ; }
Code	{ return ( Collection ) reportMatcher ( iValues ) ; }
Distance : 7

70
Tree	{ return ( Collection ) reportMatcher ( RETURNS_DEFAULTS . getParameterTypes () ) ; }
Code	{ return ( Collection ) reportMatcher ( RETURNS_DEFAULTS . getParameterTypes () ) ; }
Distance : 9

71
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . voidMethod () ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . voidMethod () ; }
Distance : 9

72
Tree	{ return ( Collection ) languageMode . getCanonicalName ( iValues ) ; }
Code	{ return ( Collection ) languageMode . getCanonicalName ( iValues ) ; }
Distance : 9

73
Tree	{ return ( Collection ) object . getCanonicalName ( array ) ; }
Code	{ return ( Collection ) object . getCanonicalName ( array ) ; }
Distance : 9

74
Tree	{ return ( ImmutableList ) reportMatcher () ; }
Code	{ return ( ImmutableList ) reportMatcher () ; }
Distance : 4

75
Tree	{ return ( Collection ) reportMatcher ( initializeCalls ) ; }
Code	{ return ( Collection ) reportMatcher ( initializeCalls ) ; }
Distance : 7

76
Tree	{ checkNotNull () ; return null ; }
Code	{ checkNotNull () ; return null ; }
Distance : 5

77
Tree	{ return ( modules ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( modules ) reportMatcher ( Any.ANY ) ; }
Distance : 7

78
Tree	{ return ( Collection ) reportMatcher ( iValues ) . getParameterTypes () ; }
Code	{ return ( Collection ) reportMatcher ( iValues ) . getParameterTypes () ; }
Distance : 9

79
Tree	{ return ( NumberOfInvocationsChecker ) reportMatcher () ; }
Code	{ return ( NumberOfInvocationsChecker ) reportMatcher () ; }
Distance : 4

80
Tree	{ return getCumFreq () ; }
Code	{ return getCumFreq () ; }
Distance : 1

81
Tree	{ checkPrinter () ; return null ; }
Code	{ checkPrinter () ; return null ; }
Distance : 5

82
Tree	{ return ( convId ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( convId ) reportMatcher ( Any.ANY ) ; }
Distance : 7

83
Tree	{ return ( clazz ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( clazz ) reportMatcher ( Any.ANY ) ; }
Distance : 7

84
Tree	{ mockingProgress () ; return null ; }
Code	{ mockingProgress () ; return null ; }
Distance : 5

85
Tree	{ return ( ImmutableList ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( ImmutableList ) reportMatcher ( Any.ANY ) ; }
Distance : 7

86
Tree	{ return anyObject ( Any.ANY ) ; }
Code	{ return anyObject ( Any.ANY ) ; }
Distance : 4

87
Tree	{ recordImplicitInterfaceUses () ; return null ; }
Code	{ recordImplicitInterfaceUses () ; return null ; }
Distance : 5

88
Tree	{ return ( t ) reportMatcher () ; }
Code	{ return ( t ) reportMatcher () ; }
Distance : 4

89
Tree	{ return mapToSelf ( Any.ANY ) ; }
Code	{ return mapToSelf ( Any.ANY ) ; }
Distance : 4

90
Tree	{ enableNormalize () ; return null ; }
Code	{ enableNormalize () ; return null ; }
Distance : 5

91
Tree	{ super ( Collection ) ; setTolerance ( Any.ANY ) ; }
Code	{ super ( Collection ) ; setTolerance ( Any.ANY ) ; }
Distance : 9

92
Tree	{ return ( modules ) reportMatcher ( iValues . getParameterTypes () ) ; }
Code	{ return ( modules ) reportMatcher ( iValues . getParameterTypes () ) ; }
Distance : 9

93
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . getParameterTypes ( iValues ) ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . getParameterTypes ( iValues ) ; }
Distance : 12

94
Tree	{ return ( Collection ) reportMatcher ( Any.ANY ) . getParameterTypes () ; }
Code	{ return ( Collection ) reportMatcher ( Any.ANY ) . getParameterTypes () ; }
Distance : 9

95
Tree	{ Collection . getDateTimeInstance ( Any.ANY ) ; return null ; }
Code	{ Collection . getDateTimeInstance ( Any.ANY ) ; return null ; }
Distance : 9

96
Tree	{ return ( Collection ) reportMatcher ( iValues . get () ) ; }
Code	{ return ( Collection ) reportMatcher ( iValues . get () ) ; }
Distance : 9

97
Tree	{ return ( Collection ) reportMatcher ( initializeCalls . getParameterTypes () ) ; }
Code	{ return ( Collection ) reportMatcher ( initializeCalls . getParameterTypes () ) ; }
Distance : 9

98
Tree	{ return ( Collection ) reportMatcher ( iValues ) . voidMethod () ; }
Code	{ return ( Collection ) reportMatcher ( iValues ) . voidMethod () ; }
Distance : 9

99
Tree	{ super ( Collection ) ; initializeBuiltInTypes () ; }
Code	{ super ( Collection ) ; initializeBuiltInTypes () ; }
Distance : 6

100
Tree	{ return ( Collection ) reportMatcher ( map . getParameterTypes () ) ; }
Code	{ return ( Collection ) reportMatcher ( map . getParameterTypes () ) ; }
Distance : 9

101
Tree	{ return ( Collection ) languageMode . getCanonicalName () ; }
Code	{ return ( Collection ) languageMode . getCanonicalName () ; }
Distance : 6

102
Tree	{ mockingProgress ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Code	{ mockingProgress ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Distance : 7

103
Tree	{ return ( Collection ) reportMatcher ( initializeCalls ) . getParameterTypes () ; }
Code	{ return ( Collection ) reportMatcher ( initializeCalls ) . getParameterTypes () ; }
Distance : 9

104
Tree	{ return defaultString ( Any.ANY ) ; }
Code	{ return defaultString ( Any.ANY ) ; }
Distance : 4

105
Tree	{ return getDataset ( Any.ANY ) ; }
Code	{ return getDataset ( Any.ANY ) ; }
Distance : 4

106
Tree	{ return ( Collection ) object . getCanonicalName ( iValues ) ; }
Code	{ return ( Collection ) object . getCanonicalName ( iValues ) ; }
Distance : 9

107
Tree	{ return ( Collection ) reportMatcher ( iValues ) . getDeclaredType () ; }
Code	{ return ( Collection ) reportMatcher ( iValues ) . getDeclaredType () ; }
Distance : 9

108
Tree	{ reportMatcher ( Any.ANY , CheckMissingReturn.MISSING_RETURN_STATEMENT ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , CheckMissingReturn.MISSING_RETURN_STATEMENT ) ; return null ; }
Distance : 9

109
Tree	{ return ( NumberOfInvocationsChecker ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( NumberOfInvocationsChecker ) reportMatcher ( Any.ANY ) ; }
Distance : 7

110
Tree	{ return reportMatcher ( Collection ) . getParameterTypes () ; }
Code	{ return reportMatcher ( Collection ) . getParameterTypes () ; }
Distance : 6

111
Tree	{ return ( Collection ) this . legendItemGraphicEdge . getParameterTypes () ; }
Code	{ return ( Collection ) this . legendItemGraphicEdge . getParameterTypes () ; }
Distance : 8

112
Tree	{ return ( Collection ) reportMatcher ( T . getParameterTypes () ) ; }
Code	{ return ( Collection ) reportMatcher ( T . getParameterTypes () ) ; }
Distance : 9

113
Tree	{ return ( Collection ) reportMatcher ( iValues ) . getPeriod () ; }
Code	{ return ( Collection ) reportMatcher ( iValues ) . getPeriod () ; }
Distance : 9

114
Tree	{ reportMatcher ( Any.ANY ) ; initializeBuiltInTypes () ; super }
Code	{ reportMatcher ( Any.ANY ) ; initializeBuiltInTypes () ; super }
Distance : 7

115
Tree	{ super ( Collection . get ( initializeCalls ) ) ; initializeBuiltInTypes () ; }
Code	{ super ( Collection . get ( initializeCalls ) ) ; initializeBuiltInTypes () ; }
Distance : 11

116
Tree	{ return ( Collection ) this . unknownTypeNames . getParameterTypes () ; }
Code	{ return ( Collection ) this . unknownTypeNames . getParameterTypes () ; }
Distance : 8

117
Tree	{ return ( Collection ) reportMatcher ( iValues ) . getMethodProxy () ; }
Code	{ return ( Collection ) reportMatcher ( iValues ) . getMethodProxy () ; }
Distance : 9

118
Tree	{ super ( Collection . join ( initializeCalls ) ) ; initializeBuiltInTypes () ; }
Code	{ super ( Collection . join ( initializeCalls ) ) ; initializeBuiltInTypes () ; }
Distance : 11

119
Tree	{ return ( Collection ) reportMatcher ( T ) ; }
Code	{ return ( Collection ) reportMatcher ( T ) ; }
Distance : 7

120
Tree	{ return ImmutableList ; }
Code	{ return ImmutableList ; }
Distance : 2

121
Tree	{ return reportMatcher ( Collection ) . thenCallRealMethod () ; }
Code	{ return reportMatcher ( Collection ) . thenCallRealMethod () ; }
Distance : 6

122
Tree	{ return ( Collection ) object . matchesActualCount () ; }
Code	{ return ( Collection ) object . matchesActualCount () ; }
Distance : 6

123
Tree	{ return reportMatcher ( Collection ) . getMethodProxy () ; }
Code	{ return reportMatcher ( Collection ) . getMethodProxy () ; }
Distance : 6

124
Tree	{ return ( modules ) object . getCanonicalName () ; }
Code	{ return ( modules ) object . getCanonicalName () ; }
Distance : 6

125
Tree	{ return reportMatcher ( Any.ANY ) . disallowGlobalThis () ; }
Code	{ return reportMatcher ( Any.ANY ) . disallowGlobalThis () ; }
Distance : 6

126
Tree	{ return ( t ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( t ) reportMatcher ( Any.ANY ) ; }
Distance : 7

127
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; initializeBuiltInTypes () ; super }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; initializeBuiltInTypes () ; super }
Distance : 7

128
Tree	{ super ( Collection ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Code	{ super ( Collection ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Distance : 9

129
Tree	{ super ( modules ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Code	{ super ( modules ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Distance : 9

130
Tree	{ return ( Collection ) object . toDuration () ; }
Code	{ return ( Collection ) object . toDuration () ; }
Distance : 6

131
Tree	{ return reportMatcher ( Any.ANY ) . validateFor () ; }
Code	{ return reportMatcher ( Any.ANY ) . validateFor () ; }
Distance : 6

132
Tree	{ return reportMatcher ( Collection ) . setCallback () ; }
Code	{ return reportMatcher ( Collection ) . setCallback () ; }
Distance : 6

133
Tree	{ return ( Collection ) this . itemFont . getParameterTypes () ; }
Code	{ return ( Collection ) this . itemFont . getParameterTypes () ; }
Distance : 8

134
Tree	{ return ( Collection ) reportMatcher ( iValues ) . disallowGlobalThis () ; }
Code	{ return ( Collection ) reportMatcher ( iValues ) . disallowGlobalThis () ; }
Distance : 9

135
Tree	{ assertEquals () ; return null ; }
Code	{ assertEquals () ; return null ; }
Distance : 5

136
Tree	{ super ( Collection ) ; testRewriteWarning () ; }
Code	{ super ( Collection ) ; testRewriteWarning () ; }
Distance : 6

137
Tree	{ return getCumFreq ( Any.ANY ) ; }
Code	{ return getCumFreq ( Any.ANY ) ; }
Distance : 4

138
Tree	{ return checkNotNull ( Any.ANY ) ; }
Code	{ return checkNotNull ( Any.ANY ) ; }
Distance : 4

139
Tree	{ return reportMatcher ( Any.ANY ) . setTypeValidationEnabled () ; }
Code	{ return reportMatcher ( Any.ANY ) . setTypeValidationEnabled () ; }
Distance : 6

140
Tree	{ super ( Collection . get ( initializeCalls ) ) ; setTolerance () ; }
Code	{ super ( Collection . get ( initializeCalls ) ) ; setTolerance () ; }
Distance : 11

141
Tree	{ return ( Collection ) this . labelAnchor . getParameterTypes () ; }
Code	{ return ( Collection ) this . labelAnchor . getParameterTypes () ; }
Distance : 8

142
Tree	{ checkNotNull ( Any.ANY ) ; initializeBuiltInTypes () ; super }
Code	{ checkNotNull ( Any.ANY ) ; initializeBuiltInTypes () ; super }
Distance : 7

143
Tree	{ return ( Collection ) this . reloadClassPredicate . getParameterTypes () ; }
Code	{ return ( Collection ) this . reloadClassPredicate . getParameterTypes () ; }
Distance : 8

144
Tree	{ reportMatcher ( Any.ANY , Token.AWAIT ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , Token.AWAIT ) ; return null ; }
Distance : 9

145
Tree	{ return ( Collection ) args . getCanonicalName () ; }
Code	{ return ( Collection ) args . getCanonicalName () ; }
Distance : 6

146
Tree	{ super ( Collection . join ( initializeCalls ) ) ; setTolerance () ; }
Code	{ super ( Collection . join ( initializeCalls ) ) ; setTolerance () ; }
Distance : 11

147
Tree	{ Collection . value ( Any.ANY ) ; return null ; }
Code	{ Collection . value ( Any.ANY ) ; return null ; }
Distance : 9

148
Tree	{ reportMatcher ( Any.ANY ) ; setTolerance () ; super }
Code	{ reportMatcher ( Any.ANY ) ; setTolerance () ; super }
Distance : 7

149
Tree	{ return ( Collection ) reportMatcher ( array . getParameterTypes () ) ; }
Code	{ return ( Collection ) reportMatcher ( array . getParameterTypes () ) ; }
Distance : 9

150
Tree	{ return reportMatcher ( Any.ANY ) . getMethodProxy () ; }
Code	{ return reportMatcher ( Any.ANY ) . getMethodProxy () ; }
Distance : 6

151
Tree	{ reportMatcher ( Any.ANY , spiedReceiver.tuner ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , spiedReceiver.tuner ) ; return null ; }
Distance : 9

152
Tree	{ printTo () ; return null ; }
Code	{ printTo () ; return null ; }
Distance : 5

153
Tree	{ return reportMatcher ( Any.ANY ) . setCallback () ; }
Code	{ return reportMatcher ( Any.ANY ) . setCallback () ; }
Distance : 6

154
Tree	{ reportMatcher ( Any.ANY , obj2.props ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , obj2.props ) ; return null ; }
Distance : 9

155
Tree	{ return ( Collection ) this . negativeBarPaint . getParameterTypes () ; }
Code	{ return ( Collection ) this . negativeBarPaint . getParameterTypes () ; }
Distance : 8

156
Tree	{ super ( Collection . join ( iValues ) ) ; setTolerance () ; }
Code	{ super ( Collection . join ( iValues ) ) ; setTolerance () ; }
Distance : 11

157
Tree	{ return ( Collection ) this . advanceLinePaint . getParameterTypes () ; }
Code	{ return ( Collection ) this . advanceLinePaint . getParameterTypes () ; }
Distance : 8

158
Tree	{ return reportMatcher ( Any.ANY ) . isNotEqualTo () ; }
Code	{ return reportMatcher ( Any.ANY ) . isNotEqualTo () ; }
Distance : 6

159
Tree	{ return ( Collection ) this . sublabelFont . getParameterTypes () ; }
Code	{ return ( Collection ) this . sublabelFont . getParameterTypes () ; }
Distance : 8

160
Tree	{ super ( Collection . get ( iValues ) ) ; setTolerance () ; }
Code	{ super ( Collection . get ( iValues ) ) ; setTolerance () ; }
Distance : 11

161
Tree	{ mockingProgress ( Any.ANY ) ; initializeBuiltInTypes () ; super }
Code	{ mockingProgress ( Any.ANY ) ; initializeBuiltInTypes () ; super }
Distance : 7

162
Tree	{ Collection . getDaysInYearMax ( Any.ANY ) ; return null ; }
Code	{ Collection . getDaysInYearMax ( Any.ANY ) ; return null ; }
Distance : 9

163
Tree	{ return ( Collection ) object . setTypeValidationEnabled () ; }
Code	{ return ( Collection ) object . setTypeValidationEnabled () ; }
Distance : 6

164
Tree	{ reportMatcher ( Any.ANY , LocalizedFormats.INTERNAL_ERROR ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , LocalizedFormats.INTERNAL_ERROR ) ; return null ; }
Distance : 9

165
Tree	{ return getCSVClone ( Any.ANY ) ; }
Code	{ return getCSVClone ( Any.ANY ) ; }
Distance : 4

166
Tree	{ return constraints ; }
Code	{ return constraints ; }
Distance : 2

167
Tree	{ super ( Collection ) ; setTolerance () ; }
Code	{ super ( Collection ) ; setTolerance () ; }
Distance : 6

168
Tree	{ return convId ; }
Code	{ return convId ; }
Distance : 2

169
Tree	{ reportMatcher ( Any.ANY ) ; expectErrors () ; super }
Code	{ reportMatcher ( Any.ANY ) ; expectErrors () ; super }
Distance : 7

170
Tree	{ return reportMatcher ( Any.ANY ) . getParameterTypes () ; }
Code	{ return reportMatcher ( Any.ANY ) . getParameterTypes () ; }
Distance : 6

171
Tree	{ return reportMatcher ( Collection ) . setTypeValidationEnabled () ; }
Code	{ return reportMatcher ( Collection ) . setTypeValidationEnabled () ; }
Distance : 6

172
Tree	{ clazz . nullNotPermitted ( Any.ANY ) ; return null ; }
Code	{ clazz . nullNotPermitted ( Any.ANY ) ; return null ; }
Distance : 9

173
Tree	{ super ( modules ) ; setTolerance () ; }
Code	{ super ( modules ) ; setTolerance () ; }
Distance : 6

174
Tree	{ return Arrays ; }
Code	{ return Arrays ; }
Distance : 2

175
Tree	{ super ( Collection ) ; checkShortName () ; }
Code	{ super ( Collection ) ; checkShortName () ; }
Distance : 6

176
Tree	{ super ( Collection . join ( iValues ) ) ; initializeBuiltInTypes () ; }
Code	{ super ( Collection . join ( iValues ) ) ; initializeBuiltInTypes () ; }
Distance : 11

177
Tree	{ Collection . recordImplicitInterfaceUses ( Any.ANY ) ; return null ; }
Code	{ Collection . recordImplicitInterfaceUses ( Any.ANY ) ; return null ; }
Distance : 9

178
Tree	{ return anyObject ( Collection ) . disallowGlobalThis () ; }
Code	{ return anyObject ( Collection ) . disallowGlobalThis () ; }
Distance : 6

179
Tree	{ super ( Collection . get ( iValues ) ) ; initializeBuiltInTypes () ; }
Code	{ super ( Collection . get ( iValues ) ) ; initializeBuiltInTypes () ; }
Distance : 11

180
Tree	{ super ( Collection ) ; testRewriteWarning ( Any.ANY ) ; }
Code	{ super ( Collection ) ; testRewriteWarning ( Any.ANY ) ; }
Distance : 9

181
Tree	{ return reportMatcher ( Collection ) . isNotEqualTo () ; }
Code	{ return reportMatcher ( Collection ) . isNotEqualTo () ; }
Distance : 6

182
Tree	{ mockingProgress ( Any.ANY ) ; setTolerance () ; super }
Code	{ mockingProgress ( Any.ANY ) ; setTolerance () ; super }
Distance : 7

183
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 2

184
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 3

185
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 2

186
Tree	{ super ( Collection ) ; disallowGlobalThis () ; }
Code	{ super ( Collection ) ; disallowGlobalThis () ; }
Distance : 6

187
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 3

188
Tree	{ return STRING_CONSTANT ; } Override
Code	{ return STRING_CONSTANT ; } Override
Distance : 3

189
Tree	{ super ( Collection ) ; expectErrors () ; }
Code	{ super ( Collection ) ; expectErrors () ; }
Distance : 6

190
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 2

191
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 2

192
Tree	{ recordImplicitInterfaceUses ( Any.ANY ) ; initializeBuiltInTypes () ; super }
Code	{ recordImplicitInterfaceUses ( Any.ANY ) ; initializeBuiltInTypes () ; super }
Distance : 7

193
Tree	{ return STRING_CONSTANT ; } MathRuntimeException
Code	{ return STRING_CONSTANT ; } MathRuntimeException
Distance : 3

194
Tree	{ return STRING_CONSTANT ; } mock
Code	{ return STRING_CONSTANT ; } mock
Distance : 3

195
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 2

196
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 3

197
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 3

198
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 3

199
Tree	{ return STRING_CONSTANT ; } f
Code	{ return STRING_CONSTANT ; } f
Distance : 3

========================================================================


========================================================================
Example Number: 88
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnList () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Collection . class ) ) . returnList () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Collection})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ super ( Foo ) ; }
Code	{ super ( Foo ) ; }
Distance : 12

1
Tree	{ reportMatcher ( Any.ANY ) . disallowGlobalThis () ; enableUnusedLocalAssignmentCheck = false ; }
Code	{ reportMatcher ( Any.ANY ) . disallowGlobalThis () ; enableUnusedLocalAssignmentCheck = false ; }
Distance : 11

2
Tree	{ super ( DateTimeFieldType ) ; }
Code	{ super ( DateTimeFieldType ) ; }
Distance : 12

3
Tree	{ return ( T ) getInterceptor () ; }
Code	{ return ( T ) getInterceptor () ; }
Distance : 10

4
Tree	{ return ( T ) getCanonicalName () ; }
Code	{ return ( T ) getCanonicalName () ; }
Distance : 10

5
Tree	{ reportMatcher ( Any.ANY ) . getPeriod () ; stopWatch = false ; }
Code	{ reportMatcher ( Any.ANY ) . getPeriod () ; stopWatch = false ; }
Distance : 11

6
Tree	{ super ( matcher ) ; }
Code	{ super ( matcher ) ; }
Distance : 12

7
Tree	{ reportMatcher ( Any.ANY ) ; this . sublabelFont = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . sublabelFont = Any.ANY ; }
Distance : 11

8
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; enableUnusedLocalAssignmentCheck = false ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; enableUnusedLocalAssignmentCheck = false ; }
Distance : 11

9
Tree	{ reportMatcher ( Any.ANY ) ; this . legendItemPaint = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . legendItemPaint = Any.ANY ; }
Distance : 11

10
Tree	{ return ( T ) eat () ; }
Code	{ return ( T ) eat () ; }
Distance : 10

11
Tree	{ super ( matcher ) ; setTolerance ( Any.ANY ) ; }
Code	{ super ( matcher ) ; setTolerance ( Any.ANY ) ; }
Distance : 12

12
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return false ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return false ; }
Distance : 11

13
Tree	{ reportMatcher ( Any.ANY ) ; this . labelAnchor = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . labelAnchor = Any.ANY ; }
Distance : 11

14
Tree	{ return ( T ) getMethodProxy ( Any.ANY ) . getPeriod () ; }
Code	{ return ( T ) getMethodProxy ( Any.ANY ) . getPeriod () ; }
Distance : 9

15
Tree	{ return ( T ) disallowGlobalThis ( Any.ANY ) ; }
Code	{ return ( T ) disallowGlobalThis ( Any.ANY ) ; }
Distance : 11

16
Tree	{ return ( T ) getMethodProxy ( Any.ANY ) . inIncrementalCheckMode () ; }
Code	{ return ( T ) getMethodProxy ( Any.ANY ) . inIncrementalCheckMode () ; }
Distance : 9

17
Tree	{ return ( T ) setCallback ( Any.ANY ) . returnZero () ; }
Code	{ return ( T ) setCallback ( Any.ANY ) . returnZero () ; }
Distance : 9

18
Tree	{ reportMatcher ( Null.NULL ) ; return null ; }
Code	{ reportMatcher ( Null.NULL ) ; return null ; }
Distance : 11

19
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return null ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return null ; }
Distance : 11

20
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

21
Tree	{ reportMatcher ( NotNull.NOT_NULL ) ; return null ; }
Code	{ reportMatcher ( NotNull.NOT_NULL ) ; return null ; }
Distance : 11

22
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

23
Tree	{ return ( T ) getMethodProxy ( Any.ANY ) . getDeclaredType () ; }
Code	{ return ( T ) getMethodProxy ( Any.ANY ) . getDeclaredType () ; }
Distance : 9

24
Tree	{ return ( T ) setCallback ( Any.ANY ) ; }
Code	{ return ( T ) setCallback ( Any.ANY ) ; }
Distance : 11

25
Tree	{ super ( T ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Code	{ super ( T ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Distance : 12

26
Tree	{ super ( object ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Code	{ super ( object ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Distance : 12

27
Tree	{ return ( T ) eat ( Any.ANY ) . getDeclaredType () ; }
Code	{ return ( T ) eat ( Any.ANY ) . getDeclaredType () ; }
Distance : 9

28
Tree	{ return this . allowed ; }
Code	{ return this . allowed ; }
Distance : 12

29
Tree	{ super ( classToMock ) ; setTolerance ( Any.ANY ) ; }
Code	{ super ( classToMock ) ; setTolerance ( Any.ANY ) ; }
Distance : 12

30
Tree	{ super ( T ) ; initializeBuiltInTypes ( Any.ANY ) . isNotEqualTo () ; }
Code	{ super ( T ) ; initializeBuiltInTypes ( Any.ANY ) . isNotEqualTo () ; }
Distance : 10

31
Tree	{ super ( object ) ; initializeBuiltInTypes ( Any.ANY ) . isNotEqualTo () ; }
Code	{ super ( object ) ; initializeBuiltInTypes ( Any.ANY ) . isNotEqualTo () ; }
Distance : 10

32
Tree	{ reportMatcher ( Any.ANY ) ; this . legendItemGraphicEdge = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . legendItemGraphicEdge = Any.ANY ; super }
Distance : 12

33
Tree	{ return reportMatcher ( Any.ANY ) . < delegate > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < delegate > reportMatcher () ; }
Distance : 9

34
Tree	{ reportMatcher ( Any.ANY ) . disallowGlobalThis () ; enableUnusedLocalAssignmentCheck = problem.y ; }
Code	{ reportMatcher ( Any.ANY ) . disallowGlobalThis () ; enableUnusedLocalAssignmentCheck = problem.y ; }
Distance : 11

35
Tree	{ reportMatcher ( Any.ANY ) ; this . negativeBarPaint = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . negativeBarPaint = Any.ANY ; }
Distance : 11

36
Tree	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return null ; }
Code	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return null ; }
Distance : 11

37
Tree	{ return ( T ) eat ( Any.ANY ) ; }
Code	{ return ( T ) eat ( Any.ANY ) ; }
Distance : 11

38
Tree	{ reportMatcher ( v.data ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( v.data ) ; return NUMBER_CONSTANT ; }
Distance : 11

39
Tree	{ return this . MockitoCore ; }
Code	{ return this . MockitoCore ; }
Distance : 12

40
Tree	{ reportMatcher ( Any.ANY ) . getMethodProxy () ; enableUnusedLocalAssignmentCheck = problem.y ; }
Code	{ reportMatcher ( Any.ANY ) . getMethodProxy () ; enableUnusedLocalAssignmentCheck = problem.y ; }
Distance : 11

41
Tree	{ return ( T ) getMethodProxy () ; }
Code	{ return ( T ) getMethodProxy () ; }
Distance : 10

42
Tree	{ return ( T ) setCallback ( Any.ANY ) . getDeclaredType () ; }
Code	{ return ( T ) setCallback ( Any.ANY ) . getDeclaredType () ; }
Distance : 9

43
Tree	{ return ( T ) getParameterTypes ( Any.ANY ) ; }
Code	{ return ( T ) getParameterTypes ( Any.ANY ) ; }
Distance : 11

44
Tree	{ return ( T ) getStubbingLookupListeners ( Any.ANY ) ; }
Code	{ return ( T ) getStubbingLookupListeners ( Any.ANY ) ; }
Distance : 11

45
Tree	{ reportMatcher ( Any.ANY ) ; this . legendItemGraphicEdge = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . legendItemGraphicEdge = Any.ANY ; }
Distance : 11

46
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

47
Tree	{ super ( T ) ; initializeBuiltInTypes ( Any.ANY ) . returnZero () ; }
Code	{ super ( T ) ; initializeBuiltInTypes ( Any.ANY ) . returnZero () ; }
Distance : 10

48
Tree	{ super ( object ) ; initializeBuiltInTypes ( Any.ANY ) . returnZero () ; }
Code	{ super ( object ) ; initializeBuiltInTypes ( Any.ANY ) . returnZero () ; }
Distance : 10

49
Tree	{ super ( classToMock ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Code	{ super ( classToMock ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Distance : 12

50
Tree	{ super ( classToMock ) ; }
Code	{ super ( classToMock ) ; }
Distance : 12

51
Tree	{ return reportMatcher ( Any.ANY ) . getDeclaredType () ; }
Code	{ return reportMatcher ( Any.ANY ) . getDeclaredType () ; }
Distance : 8

52
Tree	{ super ( T ) ; setTolerance ( Any.ANY ) . returnZero () ; }
Code	{ super ( T ) ; setTolerance ( Any.ANY ) . returnZero () ; }
Distance : 10

53
Tree	{ reportMatcher ( Any.ANY ) ; this . labelAnchor = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . labelAnchor = Any.ANY ; super }
Distance : 12

54
Tree	{ reportMatcher ( Any.ANY ) . getPeriod () ; currentDerivative = problem.y ; }
Code	{ reportMatcher ( Any.ANY ) . getPeriod () ; currentDerivative = problem.y ; }
Distance : 11

55
Tree	{ super ( object ) ; setTolerance ( Any.ANY ) . returnZero () ; }
Code	{ super ( object ) ; setTolerance ( Any.ANY ) . returnZero () ; }
Distance : 10

56
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 11

57
Tree	{ super ( T ) ; initializeBuiltInTypes ( Any.ANY ) . getDeclaredType () ; }
Code	{ super ( T ) ; initializeBuiltInTypes ( Any.ANY ) . getDeclaredType () ; }
Distance : 10

58
Tree	{ super ( matcher ) ; initializeBuiltInTypes ( Any.ANY ) ; super }
Code	{ super ( matcher ) ; initializeBuiltInTypes ( Any.ANY ) ; super }
Distance : 13

59
Tree	{ super ( object ) ; initializeBuiltInTypes ( Any.ANY ) . getDeclaredType () ; }
Code	{ super ( object ) ; initializeBuiltInTypes ( Any.ANY ) . getDeclaredType () ; }
Distance : 10

60
Tree	{ return reportMatcher ( Any.ANY ) . getPeriod () ; }
Code	{ return reportMatcher ( Any.ANY ) . getPeriod () ; }
Distance : 8

61
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Distance : 11

62
Tree	{ reportMatcher ( Any.ANY ) . getMethodProxy () ; enableUnusedLocalAssignmentCheck = false ; }
Code	{ reportMatcher ( Any.ANY ) . getMethodProxy () ; enableUnusedLocalAssignmentCheck = false ; }
Distance : 11

63
Tree	{ reportMatcher ( Any.ANY ) . getPeriod () ; currentDerivative = false ; }
Code	{ reportMatcher ( Any.ANY ) . getPeriod () ; currentDerivative = false ; }
Distance : 11

64
Tree	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return NUMBER_CONSTANT ; }
Distance : 11

65
Tree	{ return reportMatcher ( Any.ANY ) . getMethodProxy () ; }
Code	{ return reportMatcher ( Any.ANY ) . getMethodProxy () ; }
Distance : 8

66
Tree	{ reportMatcher ( Any.ANY ) ; this . legendBackgroundPaint = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . legendBackgroundPaint = Any.ANY ; super }
Distance : 12

67
Tree	{ super ( matcher ) ; setTolerance ( Any.ANY ) ; super }
Code	{ super ( matcher ) ; setTolerance ( Any.ANY ) ; super }
Distance : 13

68
Tree	{ return reportMatcher ( Any.ANY ) . disallowGlobalThis () ; }
Code	{ return reportMatcher ( Any.ANY ) . disallowGlobalThis () ; }
Distance : 8

69
Tree	{ return reportMatcher ( Any.ANY ) . getParameterTypes () ; }
Code	{ return reportMatcher ( Any.ANY ) . getParameterTypes () ; }
Distance : 8

70
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

71
Tree	{ reportMatcher ( Any.ANY ) ; expectedStepStart = false ; }
Code	{ reportMatcher ( Any.ANY ) ; expectedStepStart = false ; }
Distance : 11

72
Tree	{ reportMatcher ( Any.ANY ) ; providedNamespaces = problem.y . getParameterTypes () ; }
Code	{ reportMatcher ( Any.ANY ) ; providedNamespaces = problem.y . getParameterTypes () ; }
Distance : 10

73
Tree	{ return reportMatcher ( Any.ANY ) . voidMethod () ; }
Code	{ return reportMatcher ( Any.ANY ) . voidMethod () ; }
Distance : 8

74
Tree	{ super ( T ) ; initializeBuiltInTypes ( Any.ANY ) ; super }
Code	{ super ( T ) ; initializeBuiltInTypes ( Any.ANY ) ; super }
Distance : 13

75
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

76
Tree	{ super ( classToMock ) ; initializeBuiltInTypes ( Any.ANY ) ; super }
Code	{ super ( classToMock ) ; initializeBuiltInTypes ( Any.ANY ) ; super }
Distance : 13

77
Tree	{ reportMatcher ( Any.ANY ) ; this . negativeBarPaint = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . negativeBarPaint = Any.ANY ; super }
Distance : 12

78
Tree	{ super ( object ) ; initializeBuiltInTypes ( Any.ANY ) ; super }
Code	{ super ( object ) ; initializeBuiltInTypes ( Any.ANY ) ; super }
Distance : 13

79
Tree	{ return this . mockSettings ; }
Code	{ return this . mockSettings ; }
Distance : 12

80
Tree	{ return reportMatcher ( Any.ANY ) . isNotEqualTo () ; }
Code	{ return reportMatcher ( Any.ANY ) . isNotEqualTo () ; }
Distance : 8

81
Tree	{ super ( matcher ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Code	{ super ( matcher ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Distance : 12

82
Tree	{ return reportMatcher ( Any.ANY ) . < minPrecedence > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < minPrecedence > reportMatcher () ; }
Distance : 9

83
Tree	{ super ( object ) ; }
Code	{ super ( object ) ; }
Distance : 12

84
Tree	{ reportMatcher ( Any.ANY ) ; copiedList = false ; }
Code	{ reportMatcher ( Any.ANY ) ; copiedList = false ; }
Distance : 11

85
Tree	{ super ( classToMock ) ; setTolerance ( Any.ANY ) ; super }
Code	{ super ( classToMock ) ; setTolerance ( Any.ANY ) ; super }
Distance : 13

86
Tree	{ return ( T ) getInterceptor ( Any.ANY ) ; }
Code	{ return ( T ) getInterceptor ( Any.ANY ) ; }
Distance : 11

87
Tree	{ reportMatcher ( Any.ANY ) ; maxTimeError = false ; }
Code	{ reportMatcher ( Any.ANY ) ; maxTimeError = false ; }
Distance : 11

88
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

89
Tree	{ return ( T ) disallowGlobalThis () ; }
Code	{ return ( T ) disallowGlobalThis () ; }
Distance : 10

90
Tree	{ return this . classToMock ; }
Code	{ return this . classToMock ; }
Distance : 12

91
Tree	{ reportMatcher ( Any.ANY ) ; this . unknownTypeNames = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . unknownTypeNames = Any.ANY ; super }
Distance : 12

92
Tree	{ super ( mockSettings ) ; }
Code	{ super ( mockSettings ) ; }
Distance : 12

93
Tree	{ testTypes ( Any.ANY ) ; return null ; }
Code	{ testTypes ( Any.ANY ) ; return null ; }
Distance : 12

94
Tree	{ return this . mode ; }
Code	{ return this . mode ; }
Distance : 12

95
Tree	{ return this . matcher ; }
Code	{ return this . matcher ; }
Distance : 12

96
Tree	{ return ( T ) getCanonicalName ( Any.ANY ) ; }
Code	{ return ( T ) getCanonicalName ( Any.ANY ) ; }
Distance : 11

97
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return NUMBER_CONSTANT ; }
Distance : 11

98
Tree	{ reportMatcher ( Any.ANY ) ; this . unknownTypeNames = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . unknownTypeNames = Any.ANY ; }
Distance : 11

99
Tree	{ return ( T ) getMethodProxy ( Any.ANY ) ; }
Code	{ return ( T ) getMethodProxy ( Any.ANY ) ; }
Distance : 11

100
Tree	{ reportMatcher ( Any.ANY ) ; this . legendBackgroundPaint = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . legendBackgroundPaint = Any.ANY ; }
Distance : 11

101
Tree	{ return this . RETURNS_DEFAULTS ; }
Code	{ return this . RETURNS_DEFAULTS ; }
Distance : 12

102
Tree	{ reportMatcher ( v.data ) ; return null ; }
Code	{ reportMatcher ( v.data ) ; return null ; }
Distance : 11

103
Tree	{ reportMatcher ( Any.ANY ) ; propertyRenaming = false ; }
Code	{ reportMatcher ( Any.ANY ) ; propertyRenaming = false ; }
Distance : 11

104
Tree	{ return reportMatcher ( Any.ANY ) . < ARROW_FN > returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . < ARROW_FN > returnNull () ; }
Distance : 9

105
Tree	{ reportMatcher ( Any.ANY ) ; this . advanceLinePaint = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . advanceLinePaint = Any.ANY ; }
Distance : 11

106
Tree	{ super ( T ) ; setTolerance ( Any.ANY ) ; super }
Code	{ super ( T ) ; setTolerance ( Any.ANY ) ; super }
Distance : 13

107
Tree	{ super ( object ) ; setTolerance ( Any.ANY ) ; super }
Code	{ super ( object ) ; setTolerance ( Any.ANY ) ; super }
Distance : 13

108
Tree	{ return this . object ; }
Code	{ return this . object ; }
Distance : 12

109
Tree	{ reportMatcher ( Any.ANY ) ; this . advanceLinePaint = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . advanceLinePaint = Any.ANY ; super }
Distance : 12

110
Tree	{ return ( T ) getParameterTypes () ; }
Code	{ return ( T ) getParameterTypes () ; }
Distance : 10

111
Tree	{ return ( T ) getStubbingLookupListeners () ; }
Code	{ return ( T ) getStubbingLookupListeners () ; }
Distance : 10

112
Tree	{ super ( T ) ; setTolerance ( Any.ANY ) ; }
Code	{ super ( T ) ; setTolerance ( Any.ANY ) ; }
Distance : 12

113
Tree	{ reportMatcher ( Any.ANY ) ; strictOrderVerifier = false ; }
Code	{ reportMatcher ( Any.ANY ) ; strictOrderVerifier = false ; }
Distance : 11

114
Tree	{ return reportMatcher ( Any.ANY ) . < delegate > returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . < delegate > returnNull () ; }
Distance : 9

115
Tree	{ reportMatcher ( Any.ANY ) ; providedNamespaces = problem.y . getMethodProxy () ; }
Code	{ reportMatcher ( Any.ANY ) ; providedNamespaces = problem.y . getMethodProxy () ; }
Distance : 10

116
Tree	{ return reportMatcher ( Any.ANY ) . < ARROW_FN > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < ARROW_FN > reportMatcher () ; }
Distance : 9

117
Tree	{ reportMatcher ( Any.ANY ) ; this . sublabelFont = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . sublabelFont = Any.ANY ; super }
Distance : 12

118
Tree	{ super ( object ) ; setTolerance ( Any.ANY ) ; }
Code	{ super ( object ) ; setTolerance ( Any.ANY ) ; }
Distance : 12

119
Tree	{ reportMatcher ( Any.ANY ) . disallowGlobalThis () ; stopWatch = false ; }
Code	{ reportMatcher ( Any.ANY ) . disallowGlobalThis () ; stopWatch = false ; }
Distance : 11

120
Tree	{ reportMatcher ( Any.ANY ) ; providedNamespaces = problem.y . getAlternatesWithoutStructuralTyping () ; }
Code	{ reportMatcher ( Any.ANY ) ; providedNamespaces = problem.y . getAlternatesWithoutStructuralTyping () ; }
Distance : 10

121
Tree	{ reportMatcher ( Any.ANY ) . disallowGlobalThis () ; this . legendItemGraphicEdge = null ; }
Code	{ reportMatcher ( Any.ANY ) . disallowGlobalThis () ; this . legendItemGraphicEdge = null ; }
Distance : 12

122
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . legendItemGraphicEdge = null ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . legendItemGraphicEdge = null ; }
Distance : 12

123
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; stopWatch = false ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; stopWatch = false ; }
Distance : 11

124
Tree	{ reportMatcher ( Any.ANY ) . getPeriod () ; this . legendItemGraphicEdge = null ; }
Code	{ reportMatcher ( Any.ANY ) . getPeriod () ; this . legendItemGraphicEdge = null ; }
Distance : 12

125
Tree	{ reportMatcher ( Any.ANY ) ; this . legendItemPaint = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . legendItemPaint = Any.ANY ; super }
Distance : 12

126
Tree	{ reportMatcher ( Any.ANY ) ; providedNamespaces = problem.y . resetReturnValues () ; }
Code	{ reportMatcher ( Any.ANY ) ; providedNamespaces = problem.y . resetReturnValues () ; }
Distance : 10

127
Tree	{ reportMatcher ( Any.ANY ) ; providedNamespaces = problem.y . nextCauchy () ; }
Code	{ reportMatcher ( Any.ANY ) ; providedNamespaces = problem.y . nextCauchy () ; }
Distance : 10

128
Tree	{ reportMatcher ( Any.ANY ) ; providedNamespaces = problem.y . removeListener () ; }
Code	{ reportMatcher ( Any.ANY ) ; providedNamespaces = problem.y . removeListener () ; }
Distance : 10

129
Tree	{ reportMatcher ( Any.ANY ) . getMethodProxy () ; this . legendItemGraphicEdge = null ; }
Code	{ reportMatcher ( Any.ANY ) . getMethodProxy () ; this . legendItemGraphicEdge = null ; }
Distance : 12

130
Tree	{ reportMatcher ( Any.ANY ) . getPeriod () ; enableUnusedLocalAssignmentCheck = false ; }
Code	{ reportMatcher ( Any.ANY ) . getPeriod () ; enableUnusedLocalAssignmentCheck = false ; }
Distance : 11

131
Tree	{ reportMatcher ( Null.NULL ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Null.NULL ) ; return NUMBER_CONSTANT ; }
Distance : 11

132
Tree	{ return ( T ) getMethodProxy ( Any.ANY ) . returnZero () ; }
Code	{ return ( T ) getMethodProxy ( Any.ANY ) . returnZero () ; }
Distance : 9

133
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . advanceLinePaint = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . advanceLinePaint = Any.ANY ; }
Distance : 11

134
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . legendItemPaint = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . legendItemPaint = Any.ANY ; }
Distance : 11

135
Tree	{ reportMatcher ( Any.ANY ) . setCallback () ; this . legendItemGraphicEdge = null ; }
Code	{ reportMatcher ( Any.ANY ) . setCallback () ; this . legendItemGraphicEdge = null ; }
Distance : 12

136
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . unknownTypeNames = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . unknownTypeNames = Any.ANY ; }
Distance : 11

137
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . weightSqrt = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . weightSqrt = Any.ANY ; }
Distance : 11

138
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . sublabelFont = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . sublabelFont = Any.ANY ; }
Distance : 11

139
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . reloadClassPredicate = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . reloadClassPredicate = Any.ANY ; }
Distance : 11

140
Tree	{ return ( T ) setCallback () ; }
Code	{ return ( T ) setCallback () ; }
Distance : 10

141
Tree	{ reportMatcher ( Any.ANY ) . getDeclaredType () ; this . legendItemGraphicEdge = null ; }
Code	{ reportMatcher ( Any.ANY ) . getDeclaredType () ; this . legendItemGraphicEdge = null ; }
Distance : 12

142
Tree	{ return anyObject ( Any.ANY ) ; }
Code	{ return anyObject ( Any.ANY ) ; }
Distance : 11

143
Tree	{ return reportMatcher ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT ) ; }
Code	{ return reportMatcher ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT ) ; }
Distance : 10

144
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

145
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . legendItemGraphicEdge = scalar ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . legendItemGraphicEdge = scalar ; }
Distance : 12

146
Tree	{ return reportMatcher ( Any.ANY ) . < isConstructorStack > returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . < isConstructorStack > returnNull () ; }
Distance : 9

147
Tree	{ reportMatcher ( Any.ANY ) . disallowGlobalThis () ; this . legendItemGraphicEdge = map ; }
Code	{ reportMatcher ( Any.ANY ) . disallowGlobalThis () ; this . legendItemGraphicEdge = map ; }
Distance : 12

148
Tree	{ reportMatcher ( Any.ANY ) ; providedNamespaces = problem.y . inIncrementalCheckMode () ; }
Code	{ reportMatcher ( Any.ANY ) ; providedNamespaces = problem.y . inIncrementalCheckMode () ; }
Distance : 10

149
Tree	{ reportMatcher ( Any.ANY ) . getPeriod () ; this . legendItemGraphicEdge = map ; }
Code	{ reportMatcher ( Any.ANY ) . getPeriod () ; this . legendItemGraphicEdge = map ; }
Distance : 12

150
Tree	{ reportMatcher ( NotNull.NOT_NULL ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( NotNull.NOT_NULL ) ; return NUMBER_CONSTANT ; }
Distance : 11

151
Tree	{ return ( T ) getMethodProxy ( Any.ANY ) . getParameterTypes () ; }
Code	{ return ( T ) getMethodProxy ( Any.ANY ) . getParameterTypes () ; }
Distance : 9

152
Tree	{ reportMatcher ( Any.ANY ) ; providedNamespaces = false ; }
Code	{ reportMatcher ( Any.ANY ) ; providedNamespaces = false ; }
Distance : 11

153
Tree	{ reportMatcher ( Any.ANY ) . voidMethod () ; this . legendItemGraphicEdge = null ; }
Code	{ reportMatcher ( Any.ANY ) . voidMethod () ; this . legendItemGraphicEdge = null ; }
Distance : 12

154
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . legendItemGraphicEdge = map ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . legendItemGraphicEdge = map ; }
Distance : 12

155
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return NUMBER_CONSTANT ; }
Distance : 11

156
Tree	{ reportMatcher ( Any.ANY ) . disallowGlobalThis () ; stopWatch = problem.y ; }
Code	{ reportMatcher ( Any.ANY ) . disallowGlobalThis () ; stopWatch = problem.y ; }
Distance : 11

157
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; stopWatch = problem.y ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; stopWatch = problem.y ; }
Distance : 11

158
Tree	{ reportMatcher ( Any.ANY ) ; providedNamespaces = problem.y . getAuthor () ; }
Code	{ reportMatcher ( Any.ANY ) ; providedNamespaces = problem.y . getAuthor () ; }
Distance : 10

159
Tree	{ reportMatcher ( Any.ANY ) . getPeriod () ; enableUnusedLocalAssignmentCheck = problem.y ; }
Code	{ reportMatcher ( Any.ANY ) . getPeriod () ; enableUnusedLocalAssignmentCheck = problem.y ; }
Distance : 11

160
Tree	{ reportMatcher ( Any.ANY ) ; defaultTransformer = false ; }
Code	{ reportMatcher ( Any.ANY ) ; defaultTransformer = false ; }
Distance : 11

161
Tree	{ reportMatcher ( Any.ANY ) . getMethodProxy () ; this . legendItemGraphicEdge = map ; }
Code	{ reportMatcher ( Any.ANY ) . getMethodProxy () ; this . legendItemGraphicEdge = map ; }
Distance : 12

162
Tree	{ reportMatcher ( Any.ANY ) . addWrapPartial () ; this . legendItemGraphicEdge = null ; }
Code	{ reportMatcher ( Any.ANY ) . addWrapPartial () ; this . legendItemGraphicEdge = null ; }
Distance : 12

163
Tree	{ reportMatcher ( Any.ANY ) . getPeriod () ; stopWatch = problem.y ; }
Code	{ reportMatcher ( Any.ANY ) . getPeriod () ; stopWatch = problem.y ; }
Distance : 11

164
Tree	{ return reportMatcher ( Any.ANY ) . < isConstructorStack > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < isConstructorStack > reportMatcher () ; }
Distance : 9

165
Tree	{ reportMatcher ( NotNull.NOT_NULL ) ; return false ; }
Code	{ reportMatcher ( NotNull.NOT_NULL ) ; return false ; }
Distance : 11

166
Tree	{ reportMatcher ( Any.ANY ) . setCallback () ; this . legendItemGraphicEdge = map ; }
Code	{ reportMatcher ( Any.ANY ) . setCallback () ; this . legendItemGraphicEdge = map ; }
Distance : 12

167
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 14

168
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; enableUnusedLocalAssignmentCheck = problem.y ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; enableUnusedLocalAssignmentCheck = problem.y ; }
Distance : 11

169
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 14

170
Tree	{ reportMatcher ( Null.NULL ) ; return false ; }
Code	{ reportMatcher ( Null.NULL ) ; return false ; }
Distance : 11

171
Tree	{ testTypes ( Any.ANY ) ; return false ; }
Code	{ testTypes ( Any.ANY ) ; return false ; }
Distance : 12

172
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 14

173
Tree	{ reportMatcher ( v.data ) ; return false ; }
Code	{ reportMatcher ( v.data ) ; return false ; }
Distance : 11

174
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . legendItemGraphicEdge = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . legendItemGraphicEdge = Any.ANY ; }
Distance : 11

175
Tree	{ super ( T ) ; }
Code	{ super ( T ) ; }
Distance : 12

176
Tree	{ return reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; }
Code	{ return reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; }
Distance : 10

177
Tree	{ reportMatcher ( Any.ANY ) . getDeclaredType () ; this . legendItemGraphicEdge = map ; }
Code	{ reportMatcher ( Any.ANY ) . getDeclaredType () ; this . legendItemGraphicEdge = map ; }
Distance : 12

178
Tree	{ testTypes ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ testTypes ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

179
Tree	{ return reportMatcher ( Any.ANY ) . < minPrecedence > returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . < minPrecedence > returnNull () ; }
Distance : 9

180
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

181
Tree	{ super ( RETURNS_DEFAULTS ) ; }
Code	{ super ( RETURNS_DEFAULTS ) ; }
Distance : 12

182
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

183
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

184
Tree	{ reportMatcher ( Any.ANY ) ; expandedDefinitions = false ; }
Code	{ reportMatcher ( Any.ANY ) ; expandedDefinitions = false ; }
Distance : 11

185
Tree	{ return reportMatcher ( Null.NULL ) ; }
Code	{ return reportMatcher ( Null.NULL ) ; }
Distance : 10

186
Tree	{ return reportMatcher ( NotNull.NOT_NULL ) ; }
Code	{ return reportMatcher ( NotNull.NOT_NULL ) ; }
Distance : 10

187
Tree	{ reportMatcher ( Any.ANY ) . disallowGlobalThis () ; this . legendItemGraphicEdge = scalar ; }
Code	{ reportMatcher ( Any.ANY ) . disallowGlobalThis () ; this . legendItemGraphicEdge = scalar ; }
Distance : 12

188
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . negativeBarPaint = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . negativeBarPaint = Any.ANY ; }
Distance : 11

189
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return false ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return false ; }
Distance : 11

190
Tree	{ return reportMatcher ( AnyVararg.ANY_VARARG ) ; }
Code	{ return reportMatcher ( AnyVararg.ANY_VARARG ) ; }
Distance : 10

191
Tree	{ return reportMatcher ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW ) ; }
Code	{ return reportMatcher ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW ) ; }
Distance : 10

192
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

193
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

194
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

195
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 13

196
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 14

197
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 13

198
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 14

199
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 14

========================================================================


========================================================================
Example Number: 89
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnMap () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return anyMap () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnMap}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=anyMap}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 6
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ reportMatcher ( Any.ANY ) ; this . canvas = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . canvas = Any.ANY ; super }
Distance : 11

1
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . stepPoint = map ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . stepPoint = map ; }
Distance : 12

2
Tree	{ reportMatcher ( Any.ANY ) ; MISSING_REQUIRE_STRICT_WARNING = false ; }
Code	{ reportMatcher ( Any.ANY ) ; MISSING_REQUIRE_STRICT_WARNING = false ; }
Distance : 8

3
Tree	{ reportMatcher ( Any.ANY ) ; defaultTransformer = false ; }
Code	{ reportMatcher ( Any.ANY ) ; defaultTransformer = false ; }
Distance : 8

4
Tree	{ reportMatcher ( Any.ANY ) ; this . labelAnchor = interpolator.currentDerivative ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . labelAnchor = interpolator.currentDerivative ; super }
Distance : 11

5
Tree	{ reportMatcher ( Any.ANY ) . getDefaultAnswer () ; constructorsToProcess = false ; }
Code	{ reportMatcher ( Any.ANY ) . getDefaultAnswer () ; constructorsToProcess = false ; }
Distance : 10

6
Tree	{ reportMatcher ( Any.ANY ) ; providedNamespaces = false ; }
Code	{ reportMatcher ( Any.ANY ) ; providedNamespaces = false ; }
Distance : 8

7
Tree	{ return ( T ) getMethodProxy () ; }
Code	{ return ( T ) getMethodProxy () ; }
Distance : 4

8
Tree	{ reportMatcher ( Any.ANY ) ; this . sublabelFont = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . sublabelFont = Any.ANY ; }
Distance : 10

9
Tree	{ super ( object ) ; expectErrors ( Any.ANY ) ; }
Code	{ super ( object ) ; expectErrors ( Any.ANY ) ; }
Distance : 9

10
Tree	{ super ( T ) ; expectErrors ( Any.ANY ) ; }
Code	{ super ( T ) ; expectErrors ( Any.ANY ) ; }
Distance : 9

11
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; tooShortStats = false ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; tooShortStats = false ; }
Distance : 10

12
Tree	{ reportMatcher ( Any.ANY ) ; this . extraLargeFont = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . extraLargeFont = Any.ANY ; }
Distance : 10

13
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return false ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return false ; }
Distance : 7

14
Tree	{ return ( T ) eat ( Any.ANY ) ; }
Code	{ return ( T ) eat ( Any.ANY ) ; }
Distance : 7

15
Tree	{ reportMatcher ( Any.ANY ) ; this . labelAnchor = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . labelAnchor = Any.ANY ; }
Distance : 10

16
Tree	{ return ( T ) getParameterTypes ( Any.ANY ) ; }
Code	{ return ( T ) getParameterTypes ( Any.ANY ) ; }
Distance : 7

17
Tree	{ super ( object ) ; setTolerance ( Any.ANY ) . isNotEqualTo () ; }
Code	{ super ( object ) ; setTolerance ( Any.ANY ) . isNotEqualTo () ; }
Distance : 11

18
Tree	{ reportMatcher ( Null.NULL ) ; return null ; }
Code	{ reportMatcher ( Null.NULL ) ; return null ; }
Distance : 7

19
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return null ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return null ; }
Distance : 7

20
Tree	{ return null ; }
Code	{ return null ; }
Distance : 2

21
Tree	{ reportMatcher ( NotNull.NOT_NULL ) ; return null ; }
Code	{ reportMatcher ( NotNull.NOT_NULL ) ; return null ; }
Distance : 7

22
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 7

23
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 4

24
Tree	{ super ( T ) ; setTolerance ( Any.ANY ) . isNotEqualTo () ; }
Code	{ super ( T ) ; setTolerance ( Any.ANY ) . isNotEqualTo () ; }
Distance : 11

25
Tree	{ return this . allowed ; }
Code	{ return this . allowed ; }
Distance : 3

26
Tree	{ super ( object ) ; setTolerance ( Any.ANY ) . voidMethod () ; }
Code	{ super ( object ) ; setTolerance ( Any.ANY ) . voidMethod () ; }
Distance : 11

27
Tree	{ return this . mockSettings ; }
Code	{ return this . mockSettings ; }
Distance : 3

28
Tree	{ super ( T ) ; setTolerance ( Any.ANY ) . voidMethod () ; }
Code	{ super ( T ) ; setTolerance ( Any.ANY ) . voidMethod () ; }
Distance : 11

29
Tree	{ return reportMatcher ( Any.ANY ) . < WEEKYEARS_TYPE > returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . < WEEKYEARS_TYPE > returnNull () ; }
Distance : 9

30
Tree	{ reportMatcher ( Any.ANY ) ; this . legendBackgroundPaint = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . legendBackgroundPaint = Any.ANY ; }
Distance : 10

31
Tree	{ super ( classToMock ) ; setTolerance ( Any.ANY ) ; }
Code	{ super ( classToMock ) ; setTolerance ( Any.ANY ) ; }
Distance : 9

32
Tree	{ reportMatcher ( Any.ANY ) ; this . labelAnchor = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . labelAnchor = Any.ANY ; super }
Distance : 11

33
Tree	{ return ( T ) isAssertionCall () ; }
Code	{ return ( T ) isAssertionCall () ; }
Distance : 4

34
Tree	{ super ( classToMock ) ; }
Code	{ super ( classToMock ) ; }
Distance : 4

35
Tree	{ super ( classToMock ) ; initializeBuiltInTypes ( Any.ANY ) ; setTolerance }
Code	{ super ( classToMock ) ; initializeBuiltInTypes ( Any.ANY ) ; setTolerance }
Distance : 10

36
Tree	{ super ( object ) ; setTolerance ( Any.ANY ) ; initializeBuiltInTypes }
Code	{ super ( object ) ; setTolerance ( Any.ANY ) ; initializeBuiltInTypes }
Distance : 10

37
Tree	{ reportMatcher ( Any.ANY ) ; this . labelAnchor = interpolator.currentDerivative ; }
Code	{ reportMatcher ( Any.ANY ) ; this . labelAnchor = interpolator.currentDerivative ; }
Distance : 10

38
Tree	{ return ( T ) eat () ; }
Code	{ return ( T ) eat () ; }
Distance : 4

39
Tree	{ super ( RETURNS_DEFAULTS ) ; }
Code	{ super ( RETURNS_DEFAULTS ) ; }
Distance : 4

40
Tree	{ super ( T ) ; setTolerance ( Any.ANY ) ; initializeBuiltInTypes }
Code	{ super ( T ) ; setTolerance ( Any.ANY ) ; initializeBuiltInTypes }
Distance : 10

41
Tree	{ reportMatcher ( Any.ANY ) ; this . legendBackgroundPaint = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . legendBackgroundPaint = Any.ANY ; super }
Distance : 11

42
Tree	{ return ( T ) getDefaultAnswer ( Any.ANY ) ; }
Code	{ return ( T ) getDefaultAnswer ( Any.ANY ) ; }
Distance : 7

43
Tree	{ reportMatcher ( v.data ) ; return null ; }
Code	{ reportMatcher ( v.data ) ; return null ; }
Distance : 7

44
Tree	{ return ( T ) getInterceptor ( Any.ANY ) . voidMethod () ; }
Code	{ return ( T ) getInterceptor ( Any.ANY ) . voidMethod () ; }
Distance : 9

45
Tree	{ reportMatcher ( Any.ANY ) ; this . canvas = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . canvas = Any.ANY ; }
Distance : 10

46
Tree	{ return reportMatcher ( Any.ANY ) . < RETURNS_SMART_NULLS > returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . < RETURNS_SMART_NULLS > returnNull () ; }
Distance : 9

47
Tree	{ reportMatcher ( Any.ANY ) . voidMethod () ; constructorsToProcess = false ; }
Code	{ reportMatcher ( Any.ANY ) . voidMethod () ; constructorsToProcess = false ; }
Distance : 10

48
Tree	{ return reportMatcher ( Any.ANY ) . < Primitives > returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Primitives > returnNull () ; }
Distance : 9

49
Tree	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return null ; }
Code	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return null ; }
Distance : 7

50
Tree	{ return ( T ) getInterceptor ( Any.ANY ) . getZoneStrings () ; }
Code	{ return ( T ) getInterceptor ( Any.ANY ) . getZoneStrings () ; }
Distance : 9

51
Tree	{ reportMatcher ( Any.ANY ) ; constructorsToProcess = false ; }
Code	{ reportMatcher ( Any.ANY ) ; constructorsToProcess = false ; }
Distance : 8

52
Tree	{ super ( object ) ; }
Code	{ super ( object ) ; }
Distance : 4

53
Tree	{ super ( T ) ; }
Code	{ super ( T ) ; }
Distance : 4

54
Tree	{ super ( object ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Code	{ super ( object ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Distance : 9

55
Tree	{ reportMatcher ( v.data ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( v.data ) ; return NUMBER_CONSTANT ; }
Distance : 7

56
Tree	{ return this . MockitoCore ; }
Code	{ return this . MockitoCore ; }
Distance : 3

57
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 7

58
Tree	{ return ( T ) getInterceptor () ; }
Code	{ return ( T ) getInterceptor () ; }
Distance : 4

59
Tree	{ return reportMatcher ( Any.ANY ) . getZoneStrings () ; }
Code	{ return reportMatcher ( Any.ANY ) . getZoneStrings () ; }
Distance : 6

60
Tree	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return NUMBER_CONSTANT ; }
Distance : 7

61
Tree	{ reportMatcher ( Null.NULL ) ; return false ; }
Code	{ reportMatcher ( Null.NULL ) ; return false ; }
Distance : 7

62
Tree	{ return reportMatcher ( Any.ANY ) . voidMethod () ; }
Code	{ return reportMatcher ( Any.ANY ) . voidMethod () ; }
Distance : 6

63
Tree	{ return ( T ) getInterceptor ( Any.ANY ) . returnFor () ; }
Code	{ return ( T ) getInterceptor ( Any.ANY ) . returnFor () ; }
Distance : 9

64
Tree	{ super ( T ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Code	{ super ( T ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Distance : 9

65
Tree	{ return reportMatcher ( Any.ANY ) . isNotEqualTo () ; }
Code	{ return reportMatcher ( Any.ANY ) . isNotEqualTo () ; }
Distance : 6

66
Tree	{ return reportMatcher ( Any.ANY ) . getDeclaredType () ; }
Code	{ return reportMatcher ( Any.ANY ) . getDeclaredType () ; }
Distance : 6

67
Tree	{ return reportMatcher ( Any.ANY ) . < MISSING_REQUIRE_STRICT_WARNING > returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . < MISSING_REQUIRE_STRICT_WARNING > returnNull () ; }
Distance : 9

68
Tree	{ return ( T ) getInterceptor ( Any.ANY ) . returnMap () ; }
Code	{ return ( T ) getInterceptor ( Any.ANY ) . returnMap () ; }
Distance : 9

69
Tree	{ reportMatcher ( Any.ANY ) ; expectedStepStart = false ; }
Code	{ reportMatcher ( Any.ANY ) ; expectedStepStart = false ; }
Distance : 8

70
Tree	{ reportMatcher ( Any.ANY ) ; constructorsToProcess = problem.y . toNonNullAnnotationString () ; }
Code	{ reportMatcher ( Any.ANY ) ; constructorsToProcess = problem.y . toNonNullAnnotationString () ; }
Distance : 10

71
Tree	{ reportMatcher ( Any.ANY ) ; correlationMatrix = false ; }
Code	{ reportMatcher ( Any.ANY ) ; correlationMatrix = false ; }
Distance : 8

72
Tree	{ reportMatcher ( Any.ANY ) ; iMonths = false ; }
Code	{ reportMatcher ( Any.ANY ) ; iMonths = false ; }
Distance : 8

73
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Distance : 7

74
Tree	{ return reportMatcher ( Any.ANY ) . getDefaultAnswer () ; }
Code	{ return reportMatcher ( Any.ANY ) . getDefaultAnswer () ; }
Distance : 6

75
Tree	{ reportMatcher ( Any.ANY ) ; constructorsToProcess = problem.y . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) ; constructorsToProcess = problem.y . returnMap () ; }
Distance : 10

76
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 6

77
Tree	{ return reportMatcher ( Any.ANY ) . insert () ; }
Code	{ return reportMatcher ( Any.ANY ) . insert () ; }
Distance : 6

78
Tree	{ reportMatcher ( Any.ANY ) . voidMethod () ; this . stepPoint = null ; }
Code	{ reportMatcher ( Any.ANY ) . voidMethod () ; this . stepPoint = null ; }
Distance : 12

79
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 7

80
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . legendBackgroundPaint = null ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . legendBackgroundPaint = null ; }
Distance : 12

81
Tree	{ return this . mode ; }
Code	{ return this . mode ; }
Distance : 3

82
Tree	{ return ( T ) getMethodProxy ( Any.ANY ) ; }
Code	{ return ( T ) getMethodProxy ( Any.ANY ) ; }
Distance : 7

83
Tree	{ return ( T ) isAssertionCall ( Any.ANY ) ; }
Code	{ return ( T ) isAssertionCall ( Any.ANY ) ; }
Distance : 7

84
Tree	{ return reportMatcher ( Any.ANY ) . < MISSING_REQUIRE_STRICT_WARNING > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < MISSING_REQUIRE_STRICT_WARNING > reportMatcher () ; }
Distance : 9

85
Tree	{ return ( T ) getInterceptor ( Any.ANY ) ; }
Code	{ return ( T ) getInterceptor ( Any.ANY ) ; }
Distance : 7

86
Tree	{ return this . classToMock ; }
Code	{ return this . classToMock ; }
Distance : 3

87
Tree	{ return reportMatcher ( Any.ANY ) . < RealPointValuePair > returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . < RealPointValuePair > returnNull () ; }
Distance : 9

88
Tree	{ reportMatcher ( Any.ANY ) ; providedNamespaces = problem.y . getZoneStrings () ; }
Code	{ reportMatcher ( Any.ANY ) ; providedNamespaces = problem.y . getZoneStrings () ; }
Distance : 10

89
Tree	{ super ( T ) ; initializeBuiltInTypes ( Any.ANY ) . isNotEqualTo () ; }
Code	{ super ( T ) ; initializeBuiltInTypes ( Any.ANY ) . isNotEqualTo () ; }
Distance : 11

90
Tree	{ return reportMatcher ( Any.ANY ) . < warningText > returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . < warningText > returnNull () ; }
Distance : 9

91
Tree	{ testTypes ( Any.ANY ) ; return null ; }
Code	{ testTypes ( Any.ANY ) ; return null ; }
Distance : 7

92
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; correlationMatrix = false ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; correlationMatrix = false ; }
Distance : 10

93
Tree	{ return reportMatcher ( Any.ANY ) . returnFor () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnFor () ; }
Distance : 6

94
Tree	{ return ( T ) getInterceptor ( Any.ANY ) . isNotEqualTo () ; }
Code	{ return ( T ) getInterceptor ( Any.ANY ) . isNotEqualTo () ; }
Distance : 9

95
Tree	{ return this . matcher ; }
Code	{ return this . matcher ; }
Distance : 3

96
Tree	{ super ( object ) ; initializeBuiltInTypes ( Any.ANY ) . voidMethod () ; }
Code	{ super ( object ) ; initializeBuiltInTypes ( Any.ANY ) . voidMethod () ; }
Distance : 11

97
Tree	{ return reportMatcher ( Any.ANY ) . < WEEKYEARS_TYPE > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < WEEKYEARS_TYPE > reportMatcher () ; }
Distance : 9

98
Tree	{ reportMatcher ( Any.ANY ) ; this . legendItemPaint = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . legendItemPaint = Any.ANY ; super }
Distance : 11

99
Tree	{ return ( T ) getInterceptor ( Any.ANY ) . getDeclaredType () ; }
Code	{ return ( T ) getInterceptor ( Any.ANY ) . getDeclaredType () ; }
Distance : 9

100
Tree	{ return ( T ) setCallback ( Any.ANY ) ; }
Code	{ return ( T ) setCallback ( Any.ANY ) ; }
Distance : 7

101
Tree	{ reportMatcher ( Any.ANY ) ; this . hourFormatter = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . hourFormatter = Any.ANY ; super }
Distance : 11

102
Tree	{ reportMatcher ( Any.ANY ) ; constructorsToProcess = problem.y . getAuthor () ; }
Code	{ reportMatcher ( Any.ANY ) ; constructorsToProcess = problem.y . getAuthor () ; }
Distance : 10

103
Tree	{ reportMatcher ( Any.ANY ) ; constructorsToProcess = problem.y . getAlternatesWithoutStructuralTyping () ; }
Code	{ reportMatcher ( Any.ANY ) ; constructorsToProcess = problem.y . getAlternatesWithoutStructuralTyping () ; }
Distance : 10

104
Tree	{ reportMatcher ( Any.ANY ) ; constructorsToProcess = problem.y . getParameterTypes () ; }
Code	{ reportMatcher ( Any.ANY ) ; constructorsToProcess = problem.y . getParameterTypes () ; }
Distance : 10

105
Tree	{ reportMatcher ( Any.ANY ) . voidMethod () ; tooShortStats = false ; }
Code	{ reportMatcher ( Any.ANY ) . voidMethod () ; tooShortStats = false ; }
Distance : 10

106
Tree	{ reportMatcher ( Any.ANY ) . voidMethod () ; this . stepPoint = map ; }
Code	{ reportMatcher ( Any.ANY ) . voidMethod () ; this . stepPoint = map ; }
Distance : 12

107
Tree	{ reportMatcher ( Any.ANY ) ; this . sublabelFont = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . sublabelFont = Any.ANY ; super }
Distance : 11

108
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return NUMBER_CONSTANT ; }
Distance : 7

109
Tree	{ return ( T ) getInterceptor ( Any.ANY ) . getDefaultAnswer () ; }
Code	{ return ( T ) getInterceptor ( Any.ANY ) . getDefaultAnswer () ; }
Distance : 9

110
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; constructorsToProcess = false ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; constructorsToProcess = false ; }
Distance : 10

111
Tree	{ super ( Foo ) ; }
Code	{ super ( Foo ) ; }
Distance : 4

112
Tree	{ super ( T ) ; initializeBuiltInTypes ( Any.ANY ) . voidMethod () ; }
Code	{ super ( T ) ; initializeBuiltInTypes ( Any.ANY ) . voidMethod () ; }
Distance : 11

113
Tree	{ reportMatcher ( Any.ANY ) ; strictOrderVerifier = false ; }
Code	{ reportMatcher ( Any.ANY ) ; strictOrderVerifier = false ; }
Distance : 8

114
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . stepPoint = null ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . stepPoint = null ; }
Distance : 12

115
Tree	{ return ( T ) getParameterTypes () ; }
Code	{ return ( T ) getParameterTypes () ; }
Distance : 4

116
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; constructorsToProcess = problem.y ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; constructorsToProcess = problem.y ; }
Distance : 10

117
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . sublabelFont = null ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . sublabelFont = null ; }
Distance : 12

118
Tree	{ reportMatcher ( Any.ANY ) . getZoneStrings () ; constructorsToProcess = false ; }
Code	{ reportMatcher ( Any.ANY ) . getZoneStrings () ; constructorsToProcess = false ; }
Distance : 10

119
Tree	{ return this . RETURNS_DEFAULTS ; }
Code	{ return this . RETURNS_DEFAULTS ; }
Distance : 3

120
Tree	{ return ( T ) setCallback () ; }
Code	{ return ( T ) setCallback () ; }
Distance : 4

121
Tree	{ reportMatcher ( Any.ANY ) ; this . legendItemPaint = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . legendItemPaint = Any.ANY ; }
Distance : 10

122
Tree	{ reportMatcher ( Any.ANY ) ; this . extraLargeFont = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . extraLargeFont = Any.ANY ; super }
Distance : 11

123
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; stopWatch = false ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; stopWatch = false ; }
Distance : 10

124
Tree	{ reportMatcher ( Any.ANY ) ; this . hourFormatter = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . hourFormatter = Any.ANY ; }
Distance : 10

125
Tree	{ super ( mockSettings ) ; }
Code	{ super ( mockSettings ) ; }
Distance : 4

126
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . stepPoint = scalar ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . stepPoint = scalar ; }
Distance : 12

127
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . legendItemPaint = null ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . legendItemPaint = null ; }
Distance : 12

128
Tree	{ reportMatcher ( Null.NULL ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Null.NULL ) ; return NUMBER_CONSTANT ; }
Distance : 7

129
Tree	{ return this . object ; }
Code	{ return this . object ; }
Distance : 3

130
Tree	{ return ( T ) isAssertionCall ( Any.ANY ) . getDeclaredType () ; }
Code	{ return ( T ) isAssertionCall ( Any.ANY ) . getDeclaredType () ; }
Distance : 9

131
Tree	{ return ( T ) getStubbingLookupListeners () ; }
Code	{ return ( T ) getStubbingLookupListeners () ; }
Distance : 4

132
Tree	{ return ( T ) getStubbingLookupListeners ( Any.ANY ) ; }
Code	{ return ( T ) getStubbingLookupListeners ( Any.ANY ) ; }
Distance : 7

133
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return NUMBER_CONSTANT ; }
Distance : 7

134
Tree	{ super ( chronology ) ; }
Code	{ super ( chronology ) ; }
Distance : 4

135
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . labelAnchor = null ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . labelAnchor = null ; }
Distance : 12

136
Tree	{ reportMatcher ( NotNull.NOT_NULL ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( NotNull.NOT_NULL ) ; return NUMBER_CONSTANT ; }
Distance : 7

137
Tree	{ super ( T ) ; setTolerance ( Any.ANY ) ; setTolerance }
Code	{ super ( T ) ; setTolerance ( Any.ANY ) ; setTolerance }
Distance : 10

138
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . legendBackgroundPaint = map ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . legendBackgroundPaint = map ; }
Distance : 12

139
Tree	{ reportMatcher ( Any.ANY ) . getZoneStrings () ; this . stepPoint = null ; }
Code	{ reportMatcher ( Any.ANY ) . getZoneStrings () ; this . stepPoint = null ; }
Distance : 12

140
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; constructorsToProcess = StringUtils.EMPTY ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; constructorsToProcess = StringUtils.EMPTY ; }
Distance : 10

141
Tree	{ super ( object ) ; setTolerance ( Any.ANY ) ; }
Code	{ super ( object ) ; setTolerance ( Any.ANY ) ; }
Distance : 9

142
Tree	{ super ( T ) ; setTolerance ( Any.ANY ) ; }
Code	{ super ( T ) ; setTolerance ( Any.ANY ) ; }
Distance : 9

143
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 2

144
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . extraLargeFont = null ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . extraLargeFont = null ; }
Distance : 12

145
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; tooShortStats = problem.y ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; tooShortStats = problem.y ; }
Distance : 10

146
Tree	{ super ( object ) ; initializeBuiltInTypes ( Any.ANY ) ; setTolerance }
Code	{ super ( object ) ; initializeBuiltInTypes ( Any.ANY ) ; setTolerance }
Distance : 10

147
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . legendItemPaint = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . legendItemPaint = Any.ANY ; }
Distance : 11

148
Tree	{ super ( T ) ; initializeBuiltInTypes ( Any.ANY ) ; setTolerance }
Code	{ super ( T ) ; initializeBuiltInTypes ( Any.ANY ) ; setTolerance }
Distance : 10

149
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . hourFormatter = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . hourFormatter = Any.ANY ; }
Distance : 11

150
Tree	{ reportMatcher ( Any.ANY ) . voidMethod () ; constructorsToProcess = problem.y ; }
Code	{ reportMatcher ( Any.ANY ) . voidMethod () ; constructorsToProcess = problem.y ; }
Distance : 10

151
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . sublabelFont = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . sublabelFont = Any.ANY ; }
Distance : 11

152
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . extraLargeFont = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . extraLargeFont = Any.ANY ; }
Distance : 11

153
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . canvas = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . canvas = Any.ANY ; }
Distance : 11

154
Tree	{ return; reportMatcher ( Any.ANY ) ; this . labelAnchor = Any.ANY ; }
Code	{ return; reportMatcher ( Any.ANY ) ; this . labelAnchor = Any.ANY ; }
Distance : 11

155
Tree	{ return anyObject ( Any.ANY ) ; }
Code	{ return anyObject ( Any.ANY ) ; }
Distance : 4

156
Tree	{ return reportMatcher ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT ) ; }
Code	{ return reportMatcher ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT ) ; }
Distance : 4

157
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . legendItemPaint = map ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . legendItemPaint = map ; }
Distance : 12

158
Tree	{ reportMatcher ( Any.ANY ) ; constructorsToProcess = problem.y . getZoneStrings () ; }
Code	{ reportMatcher ( Any.ANY ) ; constructorsToProcess = problem.y . getZoneStrings () ; }
Distance : 10

159
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . labelAnchor = map ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . labelAnchor = map ; }
Distance : 12

160
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; tooShortStats = interpolator.currentDerivative ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; tooShortStats = interpolator.currentDerivative ; }
Distance : 10

161
Tree	{ return ( T ) getDefaultAnswer () ; }
Code	{ return ( T ) getDefaultAnswer () ; }
Distance : 4

162
Tree	{ testTypes ( Any.ANY ) ; return false ; }
Code	{ testTypes ( Any.ANY ) ; return false ; }
Distance : 7

163
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; correlationMatrix = problem.y ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; correlationMatrix = problem.y ; }
Distance : 10

164
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 3

165
Tree	{ super ( classToMock ) ; setTolerance ( Any.ANY ) ; setTolerance }
Code	{ super ( classToMock ) ; setTolerance ( Any.ANY ) ; setTolerance }
Distance : 10

166
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 3

167
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . sublabelFont = map ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . sublabelFont = map ; }
Distance : 12

168
Tree	{ reportMatcher ( Any.ANY ) . getZoneStrings () ; this . stepPoint = map ; }
Code	{ reportMatcher ( Any.ANY ) . getZoneStrings () ; this . stepPoint = map ; }
Distance : 12

169
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return false ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return false ; }
Distance : 7

170
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; tooShortStats = StringUtils.EMPTY ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; tooShortStats = StringUtils.EMPTY ; }
Distance : 10

171
Tree	{ testTypes ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ testTypes ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 7

172
Tree	{ reportMatcher ( v.data ) ; return false ; }
Code	{ reportMatcher ( v.data ) ; return false ; }
Distance : 7

173
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 3

174
Tree	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return false ; }
Code	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return false ; }
Distance : 7

175
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; constructorsToProcess = interpolator.currentDerivative ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; constructorsToProcess = interpolator.currentDerivative ; }
Distance : 10

176
Tree	{ return reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; }
Code	{ return reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; }
Distance : 4

177
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . labelAnchor = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . labelAnchor = Any.ANY ; }
Distance : 11

178
Tree	{ super ( object ) ; initializeBuiltInTypes ( Any.ANY ) . isNotEqualTo () ; }
Code	{ super ( object ) ; initializeBuiltInTypes ( Any.ANY ) . isNotEqualTo () ; }
Distance : 11

179
Tree	{ super ( classToMock ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Code	{ super ( classToMock ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Distance : 9

180
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 3

181
Tree	{ super ( matcher ) ; }
Code	{ super ( matcher ) ; }
Distance : 4

182
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 3

183
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 3

184
Tree	{ reportMatcher ( Any.ANY ) ; strictOrderVerifier = problem.y . getZoneStrings () ; }
Code	{ reportMatcher ( Any.ANY ) ; strictOrderVerifier = problem.y . getZoneStrings () ; }
Distance : 10

185
Tree	{ return reportMatcher ( Null.NULL ) ; }
Code	{ return reportMatcher ( Null.NULL ) ; }
Distance : 4

186
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . legendBackgroundPaint = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . legendBackgroundPaint = Any.ANY ; }
Distance : 11

187
Tree	{ super ( object ) ; setTolerance ( Any.ANY ) ; setTolerance }
Code	{ super ( object ) ; setTolerance ( Any.ANY ) ; setTolerance }
Distance : 10

188
Tree	{ return reportMatcher ( NotNull.NOT_NULL ) ; }
Code	{ return reportMatcher ( NotNull.NOT_NULL ) ; }
Distance : 4

189
Tree	{ reportMatcher ( NotNull.NOT_NULL ) ; return false ; }
Code	{ reportMatcher ( NotNull.NOT_NULL ) ; return false ; }
Distance : 7

190
Tree	{ return reportMatcher ( AnyVararg.ANY_VARARG ) ; }
Code	{ return reportMatcher ( AnyVararg.ANY_VARARG ) ; }
Distance : 4

191
Tree	{ return reportMatcher ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW ) ; }
Code	{ return reportMatcher ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW ) ; }
Distance : 4

192
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 2

193
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 2

194
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 3

195
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 2

196
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 2

197
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 2

198
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 3

199
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 3

========================================================================


========================================================================
Example Number: 90
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnMap () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Map . class ) ) . returnMap () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnMap}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Map})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnMap}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ reportMatcher ( Any.ANY ) ; this . canvas = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . canvas = Any.ANY ; super }
Distance : 12

1
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . stepPoint = map ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . stepPoint = map ; }
Distance : 12

2
Tree	{ reportMatcher ( Any.ANY ) ; MISSING_REQUIRE_STRICT_WARNING = false ; }
Code	{ reportMatcher ( Any.ANY ) ; MISSING_REQUIRE_STRICT_WARNING = false ; }
Distance : 11

3
Tree	{ reportMatcher ( Any.ANY ) ; defaultTransformer = false ; }
Code	{ reportMatcher ( Any.ANY ) ; defaultTransformer = false ; }
Distance : 11

4
Tree	{ reportMatcher ( Any.ANY ) ; this . labelAnchor = interpolator.currentDerivative ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . labelAnchor = interpolator.currentDerivative ; super }
Distance : 12

5
Tree	{ reportMatcher ( Any.ANY ) . getDefaultAnswer () ; constructorsToProcess = false ; }
Code	{ reportMatcher ( Any.ANY ) . getDefaultAnswer () ; constructorsToProcess = false ; }
Distance : 11

6
Tree	{ reportMatcher ( Any.ANY ) ; providedNamespaces = false ; }
Code	{ reportMatcher ( Any.ANY ) ; providedNamespaces = false ; }
Distance : 11

7
Tree	{ return ( T ) getMethodProxy () ; }
Code	{ return ( T ) getMethodProxy () ; }
Distance : 10

8
Tree	{ reportMatcher ( Any.ANY ) ; this . sublabelFont = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . sublabelFont = Any.ANY ; }
Distance : 11

9
Tree	{ super ( object ) ; expectErrors ( Any.ANY ) ; }
Code	{ super ( object ) ; expectErrors ( Any.ANY ) ; }
Distance : 12

10
Tree	{ super ( T ) ; expectErrors ( Any.ANY ) ; }
Code	{ super ( T ) ; expectErrors ( Any.ANY ) ; }
Distance : 12

11
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; tooShortStats = false ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; tooShortStats = false ; }
Distance : 11

12
Tree	{ reportMatcher ( Any.ANY ) ; this . extraLargeFont = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . extraLargeFont = Any.ANY ; }
Distance : 11

13
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return false ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return false ; }
Distance : 11

14
Tree	{ return ( T ) eat ( Any.ANY ) ; }
Code	{ return ( T ) eat ( Any.ANY ) ; }
Distance : 11

15
Tree	{ reportMatcher ( Any.ANY ) ; this . labelAnchor = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . labelAnchor = Any.ANY ; }
Distance : 11

16
Tree	{ return ( T ) getParameterTypes ( Any.ANY ) ; }
Code	{ return ( T ) getParameterTypes ( Any.ANY ) ; }
Distance : 11

17
Tree	{ super ( object ) ; setTolerance ( Any.ANY ) . isNotEqualTo () ; }
Code	{ super ( object ) ; setTolerance ( Any.ANY ) . isNotEqualTo () ; }
Distance : 10

18
Tree	{ reportMatcher ( Null.NULL ) ; return null ; }
Code	{ reportMatcher ( Null.NULL ) ; return null ; }
Distance : 11

19
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return null ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return null ; }
Distance : 11

20
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

21
Tree	{ reportMatcher ( NotNull.NOT_NULL ) ; return null ; }
Code	{ reportMatcher ( NotNull.NOT_NULL ) ; return null ; }
Distance : 11

22
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

23
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

24
Tree	{ super ( T ) ; setTolerance ( Any.ANY ) . isNotEqualTo () ; }
Code	{ super ( T ) ; setTolerance ( Any.ANY ) . isNotEqualTo () ; }
Distance : 10

25
Tree	{ return this . allowed ; }
Code	{ return this . allowed ; }
Distance : 12

26
Tree	{ super ( object ) ; setTolerance ( Any.ANY ) . voidMethod () ; }
Code	{ super ( object ) ; setTolerance ( Any.ANY ) . voidMethod () ; }
Distance : 10

27
Tree	{ return this . mockSettings ; }
Code	{ return this . mockSettings ; }
Distance : 12

28
Tree	{ super ( T ) ; setTolerance ( Any.ANY ) . voidMethod () ; }
Code	{ super ( T ) ; setTolerance ( Any.ANY ) . voidMethod () ; }
Distance : 10

29
Tree	{ return reportMatcher ( Any.ANY ) . < WEEKYEARS_TYPE > returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . < WEEKYEARS_TYPE > returnNull () ; }
Distance : 9

30
Tree	{ reportMatcher ( Any.ANY ) ; this . legendBackgroundPaint = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . legendBackgroundPaint = Any.ANY ; }
Distance : 11

31
Tree	{ super ( classToMock ) ; setTolerance ( Any.ANY ) ; }
Code	{ super ( classToMock ) ; setTolerance ( Any.ANY ) ; }
Distance : 12

32
Tree	{ reportMatcher ( Any.ANY ) ; this . labelAnchor = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . labelAnchor = Any.ANY ; super }
Distance : 12

33
Tree	{ return ( T ) isAssertionCall () ; }
Code	{ return ( T ) isAssertionCall () ; }
Distance : 10

34
Tree	{ super ( classToMock ) ; }
Code	{ super ( classToMock ) ; }
Distance : 12

35
Tree	{ super ( classToMock ) ; initializeBuiltInTypes ( Any.ANY ) ; setTolerance }
Code	{ super ( classToMock ) ; initializeBuiltInTypes ( Any.ANY ) ; setTolerance }
Distance : 13

36
Tree	{ super ( object ) ; setTolerance ( Any.ANY ) ; initializeBuiltInTypes }
Code	{ super ( object ) ; setTolerance ( Any.ANY ) ; initializeBuiltInTypes }
Distance : 13

37
Tree	{ reportMatcher ( Any.ANY ) ; this . labelAnchor = interpolator.currentDerivative ; }
Code	{ reportMatcher ( Any.ANY ) ; this . labelAnchor = interpolator.currentDerivative ; }
Distance : 11

38
Tree	{ return ( T ) eat () ; }
Code	{ return ( T ) eat () ; }
Distance : 10

39
Tree	{ super ( RETURNS_DEFAULTS ) ; }
Code	{ super ( RETURNS_DEFAULTS ) ; }
Distance : 12

40
Tree	{ super ( T ) ; setTolerance ( Any.ANY ) ; initializeBuiltInTypes }
Code	{ super ( T ) ; setTolerance ( Any.ANY ) ; initializeBuiltInTypes }
Distance : 13

41
Tree	{ reportMatcher ( Any.ANY ) ; this . legendBackgroundPaint = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . legendBackgroundPaint = Any.ANY ; super }
Distance : 12

42
Tree	{ return ( T ) getDefaultAnswer ( Any.ANY ) ; }
Code	{ return ( T ) getDefaultAnswer ( Any.ANY ) ; }
Distance : 11

43
Tree	{ reportMatcher ( v.data ) ; return null ; }
Code	{ reportMatcher ( v.data ) ; return null ; }
Distance : 11

44
Tree	{ return ( T ) getInterceptor ( Any.ANY ) . voidMethod () ; }
Code	{ return ( T ) getInterceptor ( Any.ANY ) . voidMethod () ; }
Distance : 9

45
Tree	{ reportMatcher ( Any.ANY ) ; this . canvas = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . canvas = Any.ANY ; }
Distance : 11

46
Tree	{ return reportMatcher ( Any.ANY ) . < RETURNS_SMART_NULLS > returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . < RETURNS_SMART_NULLS > returnNull () ; }
Distance : 9

47
Tree	{ reportMatcher ( Any.ANY ) . voidMethod () ; constructorsToProcess = false ; }
Code	{ reportMatcher ( Any.ANY ) . voidMethod () ; constructorsToProcess = false ; }
Distance : 11

48
Tree	{ return reportMatcher ( Any.ANY ) . < Primitives > returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Primitives > returnNull () ; }
Distance : 9

49
Tree	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return null ; }
Code	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return null ; }
Distance : 11

50
Tree	{ return ( T ) getInterceptor ( Any.ANY ) . getZoneStrings () ; }
Code	{ return ( T ) getInterceptor ( Any.ANY ) . getZoneStrings () ; }
Distance : 9

51
Tree	{ reportMatcher ( Any.ANY ) ; constructorsToProcess = false ; }
Code	{ reportMatcher ( Any.ANY ) ; constructorsToProcess = false ; }
Distance : 11

52
Tree	{ super ( object ) ; }
Code	{ super ( object ) ; }
Distance : 12

53
Tree	{ super ( T ) ; }
Code	{ super ( T ) ; }
Distance : 12

54
Tree	{ super ( object ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Code	{ super ( object ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Distance : 12

55
Tree	{ reportMatcher ( v.data ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( v.data ) ; return NUMBER_CONSTANT ; }
Distance : 11

56
Tree	{ return this . MockitoCore ; }
Code	{ return this . MockitoCore ; }
Distance : 12

57
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

58
Tree	{ return ( T ) getInterceptor () ; }
Code	{ return ( T ) getInterceptor () ; }
Distance : 10

59
Tree	{ return reportMatcher ( Any.ANY ) . getZoneStrings () ; }
Code	{ return reportMatcher ( Any.ANY ) . getZoneStrings () ; }
Distance : 8

60
Tree	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return NUMBER_CONSTANT ; }
Distance : 11

61
Tree	{ reportMatcher ( Null.NULL ) ; return false ; }
Code	{ reportMatcher ( Null.NULL ) ; return false ; }
Distance : 11

62
Tree	{ return reportMatcher ( Any.ANY ) . voidMethod () ; }
Code	{ return reportMatcher ( Any.ANY ) . voidMethod () ; }
Distance : 8

63
Tree	{ return ( T ) getInterceptor ( Any.ANY ) . returnFor () ; }
Code	{ return ( T ) getInterceptor ( Any.ANY ) . returnFor () ; }
Distance : 9

64
Tree	{ super ( T ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Code	{ super ( T ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Distance : 12

65
Tree	{ return reportMatcher ( Any.ANY ) . isNotEqualTo () ; }
Code	{ return reportMatcher ( Any.ANY ) . isNotEqualTo () ; }
Distance : 8

66
Tree	{ return reportMatcher ( Any.ANY ) . getDeclaredType () ; }
Code	{ return reportMatcher ( Any.ANY ) . getDeclaredType () ; }
Distance : 8

67
Tree	{ return reportMatcher ( Any.ANY ) . < MISSING_REQUIRE_STRICT_WARNING > returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . < MISSING_REQUIRE_STRICT_WARNING > returnNull () ; }
Distance : 9

68
Tree	{ return ( T ) getInterceptor ( Any.ANY ) . returnMap () ; }
Code	{ return ( T ) getInterceptor ( Any.ANY ) . returnMap () ; }
Distance : 8

69
Tree	{ reportMatcher ( Any.ANY ) ; expectedStepStart = false ; }
Code	{ reportMatcher ( Any.ANY ) ; expectedStepStart = false ; }
Distance : 11

70
Tree	{ reportMatcher ( Any.ANY ) ; constructorsToProcess = problem.y . toNonNullAnnotationString () ; }
Code	{ reportMatcher ( Any.ANY ) ; constructorsToProcess = problem.y . toNonNullAnnotationString () ; }
Distance : 10

71
Tree	{ reportMatcher ( Any.ANY ) ; correlationMatrix = false ; }
Code	{ reportMatcher ( Any.ANY ) ; correlationMatrix = false ; }
Distance : 11

72
Tree	{ reportMatcher ( Any.ANY ) ; iMonths = false ; }
Code	{ reportMatcher ( Any.ANY ) ; iMonths = false ; }
Distance : 11

73
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Distance : 11

74
Tree	{ return reportMatcher ( Any.ANY ) . getDefaultAnswer () ; }
Code	{ return reportMatcher ( Any.ANY ) . getDefaultAnswer () ; }
Distance : 8

75
Tree	{ reportMatcher ( Any.ANY ) ; constructorsToProcess = problem.y . returnMap () ; }
Code	{ reportMatcher ( Any.ANY ) ; constructorsToProcess = problem.y . returnMap () ; }
Distance : 9

76
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 7

77
Tree	{ return reportMatcher ( Any.ANY ) . insert () ; }
Code	{ return reportMatcher ( Any.ANY ) . insert () ; }
Distance : 8

78
Tree	{ reportMatcher ( Any.ANY ) . voidMethod () ; this . stepPoint = null ; }
Code	{ reportMatcher ( Any.ANY ) . voidMethod () ; this . stepPoint = null ; }
Distance : 12

79
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

80
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . legendBackgroundPaint = null ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . legendBackgroundPaint = null ; }
Distance : 12

81
Tree	{ return this . mode ; }
Code	{ return this . mode ; }
Distance : 12

82
Tree	{ return ( T ) getMethodProxy ( Any.ANY ) ; }
Code	{ return ( T ) getMethodProxy ( Any.ANY ) ; }
Distance : 11

83
Tree	{ return ( T ) isAssertionCall ( Any.ANY ) ; }
Code	{ return ( T ) isAssertionCall ( Any.ANY ) ; }
Distance : 11

84
Tree	{ return reportMatcher ( Any.ANY ) . < MISSING_REQUIRE_STRICT_WARNING > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < MISSING_REQUIRE_STRICT_WARNING > reportMatcher () ; }
Distance : 9

85
Tree	{ return ( T ) getInterceptor ( Any.ANY ) ; }
Code	{ return ( T ) getInterceptor ( Any.ANY ) ; }
Distance : 11

86
Tree	{ return this . classToMock ; }
Code	{ return this . classToMock ; }
Distance : 12

87
Tree	{ return reportMatcher ( Any.ANY ) . < RealPointValuePair > returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . < RealPointValuePair > returnNull () ; }
Distance : 9

88
Tree	{ reportMatcher ( Any.ANY ) ; providedNamespaces = problem.y . getZoneStrings () ; }
Code	{ reportMatcher ( Any.ANY ) ; providedNamespaces = problem.y . getZoneStrings () ; }
Distance : 10

89
Tree	{ super ( T ) ; initializeBuiltInTypes ( Any.ANY ) . isNotEqualTo () ; }
Code	{ super ( T ) ; initializeBuiltInTypes ( Any.ANY ) . isNotEqualTo () ; }
Distance : 10

90
Tree	{ return reportMatcher ( Any.ANY ) . < warningText > returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . < warningText > returnNull () ; }
Distance : 9

91
Tree	{ testTypes ( Any.ANY ) ; return null ; }
Code	{ testTypes ( Any.ANY ) ; return null ; }
Distance : 12

92
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; correlationMatrix = false ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; correlationMatrix = false ; }
Distance : 11

93
Tree	{ return reportMatcher ( Any.ANY ) . returnFor () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnFor () ; }
Distance : 8

94
Tree	{ return ( T ) getInterceptor ( Any.ANY ) . isNotEqualTo () ; }
Code	{ return ( T ) getInterceptor ( Any.ANY ) . isNotEqualTo () ; }
Distance : 9

95
Tree	{ return this . matcher ; }
Code	{ return this . matcher ; }
Distance : 12

96
Tree	{ super ( object ) ; initializeBuiltInTypes ( Any.ANY ) . voidMethod () ; }
Code	{ super ( object ) ; initializeBuiltInTypes ( Any.ANY ) . voidMethod () ; }
Distance : 10

97
Tree	{ return reportMatcher ( Any.ANY ) . < WEEKYEARS_TYPE > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < WEEKYEARS_TYPE > reportMatcher () ; }
Distance : 9

98
Tree	{ reportMatcher ( Any.ANY ) ; this . legendItemPaint = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . legendItemPaint = Any.ANY ; super }
Distance : 12

99
Tree	{ return ( T ) getInterceptor ( Any.ANY ) . getDeclaredType () ; }
Code	{ return ( T ) getInterceptor ( Any.ANY ) . getDeclaredType () ; }
Distance : 9

100
Tree	{ return ( T ) setCallback ( Any.ANY ) ; }
Code	{ return ( T ) setCallback ( Any.ANY ) ; }
Distance : 11

101
Tree	{ reportMatcher ( Any.ANY ) ; this . hourFormatter = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . hourFormatter = Any.ANY ; super }
Distance : 12

102
Tree	{ reportMatcher ( Any.ANY ) ; constructorsToProcess = problem.y . getAuthor () ; }
Code	{ reportMatcher ( Any.ANY ) ; constructorsToProcess = problem.y . getAuthor () ; }
Distance : 10

103
Tree	{ reportMatcher ( Any.ANY ) ; constructorsToProcess = problem.y . getAlternatesWithoutStructuralTyping () ; }
Code	{ reportMatcher ( Any.ANY ) ; constructorsToProcess = problem.y . getAlternatesWithoutStructuralTyping () ; }
Distance : 10

104
Tree	{ reportMatcher ( Any.ANY ) ; constructorsToProcess = problem.y . getParameterTypes () ; }
Code	{ reportMatcher ( Any.ANY ) ; constructorsToProcess = problem.y . getParameterTypes () ; }
Distance : 10

105
Tree	{ reportMatcher ( Any.ANY ) . voidMethod () ; tooShortStats = false ; }
Code	{ reportMatcher ( Any.ANY ) . voidMethod () ; tooShortStats = false ; }
Distance : 11

106
Tree	{ reportMatcher ( Any.ANY ) . voidMethod () ; this . stepPoint = map ; }
Code	{ reportMatcher ( Any.ANY ) . voidMethod () ; this . stepPoint = map ; }
Distance : 12

107
Tree	{ reportMatcher ( Any.ANY ) ; this . sublabelFont = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . sublabelFont = Any.ANY ; super }
Distance : 12

108
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return NUMBER_CONSTANT ; }
Distance : 11

109
Tree	{ return ( T ) getInterceptor ( Any.ANY ) . getDefaultAnswer () ; }
Code	{ return ( T ) getInterceptor ( Any.ANY ) . getDefaultAnswer () ; }
Distance : 9

110
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; constructorsToProcess = false ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; constructorsToProcess = false ; }
Distance : 11

111
Tree	{ super ( Foo ) ; }
Code	{ super ( Foo ) ; }
Distance : 12

112
Tree	{ super ( T ) ; initializeBuiltInTypes ( Any.ANY ) . voidMethod () ; }
Code	{ super ( T ) ; initializeBuiltInTypes ( Any.ANY ) . voidMethod () ; }
Distance : 10

113
Tree	{ reportMatcher ( Any.ANY ) ; strictOrderVerifier = false ; }
Code	{ reportMatcher ( Any.ANY ) ; strictOrderVerifier = false ; }
Distance : 11

114
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . stepPoint = null ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . stepPoint = null ; }
Distance : 12

115
Tree	{ return ( T ) getParameterTypes () ; }
Code	{ return ( T ) getParameterTypes () ; }
Distance : 10

116
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; constructorsToProcess = problem.y ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; constructorsToProcess = problem.y ; }
Distance : 11

117
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . sublabelFont = null ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . sublabelFont = null ; }
Distance : 12

118
Tree	{ reportMatcher ( Any.ANY ) . getZoneStrings () ; constructorsToProcess = false ; }
Code	{ reportMatcher ( Any.ANY ) . getZoneStrings () ; constructorsToProcess = false ; }
Distance : 11

119
Tree	{ return this . RETURNS_DEFAULTS ; }
Code	{ return this . RETURNS_DEFAULTS ; }
Distance : 12

120
Tree	{ return ( T ) setCallback () ; }
Code	{ return ( T ) setCallback () ; }
Distance : 10

121
Tree	{ reportMatcher ( Any.ANY ) ; this . legendItemPaint = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . legendItemPaint = Any.ANY ; }
Distance : 11

122
Tree	{ reportMatcher ( Any.ANY ) ; this . extraLargeFont = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . extraLargeFont = Any.ANY ; super }
Distance : 12

123
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; stopWatch = false ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; stopWatch = false ; }
Distance : 11

124
Tree	{ reportMatcher ( Any.ANY ) ; this . hourFormatter = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . hourFormatter = Any.ANY ; }
Distance : 11

125
Tree	{ super ( mockSettings ) ; }
Code	{ super ( mockSettings ) ; }
Distance : 12

126
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . stepPoint = scalar ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . stepPoint = scalar ; }
Distance : 12

127
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . legendItemPaint = null ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . legendItemPaint = null ; }
Distance : 12

128
Tree	{ reportMatcher ( Null.NULL ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Null.NULL ) ; return NUMBER_CONSTANT ; }
Distance : 11

129
Tree	{ return this . object ; }
Code	{ return this . object ; }
Distance : 12

130
Tree	{ return ( T ) isAssertionCall ( Any.ANY ) . getDeclaredType () ; }
Code	{ return ( T ) isAssertionCall ( Any.ANY ) . getDeclaredType () ; }
Distance : 9

131
Tree	{ return ( T ) getStubbingLookupListeners () ; }
Code	{ return ( T ) getStubbingLookupListeners () ; }
Distance : 10

132
Tree	{ return ( T ) getStubbingLookupListeners ( Any.ANY ) ; }
Code	{ return ( T ) getStubbingLookupListeners ( Any.ANY ) ; }
Distance : 11

133
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return NUMBER_CONSTANT ; }
Distance : 11

134
Tree	{ super ( chronology ) ; }
Code	{ super ( chronology ) ; }
Distance : 12

135
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . labelAnchor = null ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . labelAnchor = null ; }
Distance : 12

136
Tree	{ reportMatcher ( NotNull.NOT_NULL ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( NotNull.NOT_NULL ) ; return NUMBER_CONSTANT ; }
Distance : 11

137
Tree	{ super ( T ) ; setTolerance ( Any.ANY ) ; setTolerance }
Code	{ super ( T ) ; setTolerance ( Any.ANY ) ; setTolerance }
Distance : 13

138
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . legendBackgroundPaint = map ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . legendBackgroundPaint = map ; }
Distance : 12

139
Tree	{ reportMatcher ( Any.ANY ) . getZoneStrings () ; this . stepPoint = null ; }
Code	{ reportMatcher ( Any.ANY ) . getZoneStrings () ; this . stepPoint = null ; }
Distance : 12

140
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; constructorsToProcess = StringUtils.EMPTY ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; constructorsToProcess = StringUtils.EMPTY ; }
Distance : 11

141
Tree	{ super ( object ) ; setTolerance ( Any.ANY ) ; }
Code	{ super ( object ) ; setTolerance ( Any.ANY ) ; }
Distance : 12

142
Tree	{ super ( T ) ; setTolerance ( Any.ANY ) ; }
Code	{ super ( T ) ; setTolerance ( Any.ANY ) ; }
Distance : 12

143
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

144
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . extraLargeFont = null ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . extraLargeFont = null ; }
Distance : 12

145
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; tooShortStats = problem.y ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; tooShortStats = problem.y ; }
Distance : 11

146
Tree	{ super ( object ) ; initializeBuiltInTypes ( Any.ANY ) ; setTolerance }
Code	{ super ( object ) ; initializeBuiltInTypes ( Any.ANY ) ; setTolerance }
Distance : 13

147
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . legendItemPaint = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . legendItemPaint = Any.ANY ; }
Distance : 11

148
Tree	{ super ( T ) ; initializeBuiltInTypes ( Any.ANY ) ; setTolerance }
Code	{ super ( T ) ; initializeBuiltInTypes ( Any.ANY ) ; setTolerance }
Distance : 13

149
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . hourFormatter = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . hourFormatter = Any.ANY ; }
Distance : 11

150
Tree	{ reportMatcher ( Any.ANY ) . voidMethod () ; constructorsToProcess = problem.y ; }
Code	{ reportMatcher ( Any.ANY ) . voidMethod () ; constructorsToProcess = problem.y ; }
Distance : 11

151
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . sublabelFont = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . sublabelFont = Any.ANY ; }
Distance : 11

152
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . extraLargeFont = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . extraLargeFont = Any.ANY ; }
Distance : 11

153
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . canvas = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . canvas = Any.ANY ; }
Distance : 11

154
Tree	{ return; reportMatcher ( Any.ANY ) ; this . labelAnchor = Any.ANY ; }
Code	{ return; reportMatcher ( Any.ANY ) ; this . labelAnchor = Any.ANY ; }
Distance : 11

155
Tree	{ return anyObject ( Any.ANY ) ; }
Code	{ return anyObject ( Any.ANY ) ; }
Distance : 11

156
Tree	{ return reportMatcher ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT ) ; }
Code	{ return reportMatcher ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT ) ; }
Distance : 10

157
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . legendItemPaint = map ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . legendItemPaint = map ; }
Distance : 12

158
Tree	{ reportMatcher ( Any.ANY ) ; constructorsToProcess = problem.y . getZoneStrings () ; }
Code	{ reportMatcher ( Any.ANY ) ; constructorsToProcess = problem.y . getZoneStrings () ; }
Distance : 10

159
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . labelAnchor = map ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . labelAnchor = map ; }
Distance : 12

160
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; tooShortStats = interpolator.currentDerivative ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; tooShortStats = interpolator.currentDerivative ; }
Distance : 11

161
Tree	{ return ( T ) getDefaultAnswer () ; }
Code	{ return ( T ) getDefaultAnswer () ; }
Distance : 10

162
Tree	{ testTypes ( Any.ANY ) ; return false ; }
Code	{ testTypes ( Any.ANY ) ; return false ; }
Distance : 12

163
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; correlationMatrix = problem.y ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; correlationMatrix = problem.y ; }
Distance : 11

164
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 14

165
Tree	{ super ( classToMock ) ; setTolerance ( Any.ANY ) ; setTolerance }
Code	{ super ( classToMock ) ; setTolerance ( Any.ANY ) ; setTolerance }
Distance : 13

166
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 14

167
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . sublabelFont = map ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . sublabelFont = map ; }
Distance : 12

168
Tree	{ reportMatcher ( Any.ANY ) . getZoneStrings () ; this . stepPoint = map ; }
Code	{ reportMatcher ( Any.ANY ) . getZoneStrings () ; this . stepPoint = map ; }
Distance : 12

169
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return false ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return false ; }
Distance : 11

170
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; tooShortStats = StringUtils.EMPTY ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; tooShortStats = StringUtils.EMPTY ; }
Distance : 11

171
Tree	{ testTypes ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ testTypes ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

172
Tree	{ reportMatcher ( v.data ) ; return false ; }
Code	{ reportMatcher ( v.data ) ; return false ; }
Distance : 11

173
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 14

174
Tree	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return false ; }
Code	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return false ; }
Distance : 11

175
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; constructorsToProcess = interpolator.currentDerivative ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; constructorsToProcess = interpolator.currentDerivative ; }
Distance : 11

176
Tree	{ return reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; }
Code	{ return reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; }
Distance : 10

177
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . labelAnchor = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . labelAnchor = Any.ANY ; }
Distance : 11

178
Tree	{ super ( object ) ; initializeBuiltInTypes ( Any.ANY ) . isNotEqualTo () ; }
Code	{ super ( object ) ; initializeBuiltInTypes ( Any.ANY ) . isNotEqualTo () ; }
Distance : 10

179
Tree	{ super ( classToMock ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Code	{ super ( classToMock ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Distance : 12

180
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 14

181
Tree	{ super ( matcher ) ; }
Code	{ super ( matcher ) ; }
Distance : 12

182
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 14

183
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

184
Tree	{ reportMatcher ( Any.ANY ) ; strictOrderVerifier = problem.y . getZoneStrings () ; }
Code	{ reportMatcher ( Any.ANY ) ; strictOrderVerifier = problem.y . getZoneStrings () ; }
Distance : 10

185
Tree	{ return reportMatcher ( Null.NULL ) ; }
Code	{ return reportMatcher ( Null.NULL ) ; }
Distance : 10

186
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . legendBackgroundPaint = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . legendBackgroundPaint = Any.ANY ; }
Distance : 11

187
Tree	{ super ( object ) ; setTolerance ( Any.ANY ) ; setTolerance }
Code	{ super ( object ) ; setTolerance ( Any.ANY ) ; setTolerance }
Distance : 13

188
Tree	{ return reportMatcher ( NotNull.NOT_NULL ) ; }
Code	{ return reportMatcher ( NotNull.NOT_NULL ) ; }
Distance : 10

189
Tree	{ reportMatcher ( NotNull.NOT_NULL ) ; return false ; }
Code	{ reportMatcher ( NotNull.NOT_NULL ) ; return false ; }
Distance : 11

190
Tree	{ return reportMatcher ( AnyVararg.ANY_VARARG ) ; }
Code	{ return reportMatcher ( AnyVararg.ANY_VARARG ) ; }
Distance : 10

191
Tree	{ return reportMatcher ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW ) ; }
Code	{ return reportMatcher ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW ) ; }
Distance : 10

192
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

193
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

194
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

195
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

196
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 13

197
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 13

198
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 14

199
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

========================================================================


========================================================================
Example Number: 91
Parent Code is: 
{ return ( Set ) reportMatcher ( Any.ANY ) . returnSet () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return anySet () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=Set})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnSet}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=anySet}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 9
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return ( NewOngoingStubbing ) reportMatcher () ; }
Code	{ return ( NewOngoingStubbing ) reportMatcher () ; }
Distance : 4

1
Tree	{ MOCKING_PROGRESS . nullNotPermitted ( Any.ANY ) ; return null ; }
Code	{ MOCKING_PROGRESS . nullNotPermitted ( Any.ANY ) ; return null ; }
Distance : 9

2
Tree	{ reportMatcher ( Any.ANY , oldMockHandler.matchersBinder ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , oldMockHandler.matchersBinder ) ; return null ; }
Distance : 9

3
Tree	{ return ( Foo ) reportMatcher () ; }
Code	{ return ( Foo ) reportMatcher () ; }
Distance : 4

4
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 2

5
Tree	{ compiler . printTo ( Any.ANY ) ; return null ; }
Code	{ compiler . printTo ( Any.ANY ) ; return null ; }
Distance : 9

6
Tree	{ reportMatcher ( Any.ANY , CheckLevel.WARNING ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , CheckLevel.WARNING ) ; return null ; }
Distance : 9

7
Tree	{ return returnType ; }
Code	{ return returnType ; }
Distance : 2

8
Tree	{ compiler . getDateTimeInstance ( Any.ANY ) ; return null ; }
Code	{ compiler . getDateTimeInstance ( Any.ANY ) ; return null ; }
Distance : 9

9
Tree	{ checkNotNull ( Any.ANY , ParseTreeType.CALL_EXPRESSION ) ; return null ; }
Code	{ checkNotNull ( Any.ANY , ParseTreeType.CALL_EXPRESSION ) ; return null ; }
Distance : 9

10
Tree	{ compiler . checkNotNull ( Any.ANY ) ; return null ; }
Code	{ compiler . checkNotNull ( Any.ANY ) ; return null ; }
Distance : 9

11
Tree	{ compiler . ensureLibraryInjected ( Any.ANY ) ; return null ; }
Code	{ compiler . ensureLibraryInjected ( Any.ANY ) ; return null ; }
Distance : 9

12
Tree	{ return reportMatcher ( Any.ANY ) . mockable () ; }
Code	{ return reportMatcher ( Any.ANY ) . mockable () ; }
Distance : 6

13
Tree	{ return ( MockAccess ) reportMatcher () ; }
Code	{ return ( MockAccess ) reportMatcher () ; }
Distance : 4

14
Tree	{ return checkNotNull () ; }
Code	{ return checkNotNull () ; }
Distance : 1

15
Tree	{ return ( Set ) reportMatcher () ; }
Code	{ return ( Set ) reportMatcher () ; }
Distance : 4

16
Tree	{ return getCSVClone () ; }
Code	{ return getCSVClone () ; }
Distance : 1

17
Tree	{ checkPrinter ( Any.ANY ) ; return null ; }
Code	{ checkPrinter ( Any.ANY ) ; return null ; }
Distance : 7

18
Tree	{ enableNormalize ( Any.ANY ) ; return null ; }
Code	{ enableNormalize ( Any.ANY ) ; return null ; }
Distance : 7

19
Tree	{ return mapToSelf () ; }
Code	{ return mapToSelf () ; }
Distance : 1

20
Tree	{ printTo () ; return null ; }
Code	{ printTo () ; return null ; }
Distance : 5

21
Tree	{ return checkNotNull ( Any.ANY ) ; }
Code	{ return checkNotNull ( Any.ANY ) ; }
Distance : 4

22
Tree	{ checkNotNull ( Any.ANY ) ; reportMatcher () ; super }
Code	{ checkNotNull ( Any.ANY ) ; reportMatcher () ; super }
Distance : 7

23
Tree	{ return ( Set ) object . getWrappedValue () ; }
Code	{ return ( Set ) object . getWrappedValue () ; }
Distance : 6

24
Tree	{ checkArgument ( Any.ANY ) ; return null ; }
Code	{ checkArgument ( Any.ANY ) ; return null ; }
Distance : 7

25
Tree	{ return ( anchor ) reportMatcher () ; }
Code	{ return ( anchor ) reportMatcher () ; }
Distance : 4

26
Tree	{ return ( Set ) reportMatcher ( RETURNS_DEFAULTS ) . getZoneStrings () ; }
Code	{ return ( Set ) reportMatcher ( RETURNS_DEFAULTS ) . getZoneStrings () ; }
Distance : 9

27
Tree	{ return ( Set ) object . getCanonicalName () ; }
Code	{ return ( Set ) object . getCanonicalName () ; }
Distance : 6

28
Tree	{ return anyObject ( Any.ANY ) ; }
Code	{ return anyObject ( Any.ANY ) ; }
Distance : 4

29
Tree	{ compiler . nullNotPermitted ( Any.ANY ) ; return null ; }
Code	{ compiler . nullNotPermitted ( Any.ANY ) ; return null ; }
Distance : 9

30
Tree	{ checkNotNull () ; return null ; }
Code	{ checkNotNull () ; return null ; }
Distance : 5

31
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . removeChildren ( RETURNS_DEFAULTS ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . removeChildren ( RETURNS_DEFAULTS ) ; }
Distance : 12

32
Tree	{ return ( Set ) reportMatcher ( RETURNS_DEFAULTS ) . getDeclaredType () ; }
Code	{ return ( Set ) reportMatcher ( RETURNS_DEFAULTS ) . getDeclaredType () ; }
Distance : 9

33
Tree	{ return ( Set ) object . getHandler ( RETURNS_DEFAULTS ) ; }
Code	{ return ( Set ) object . getHandler ( RETURNS_DEFAULTS ) ; }
Distance : 9

34
Tree	{ super ( Set ) ; reportMatcher () ; }
Code	{ super ( Set ) ; reportMatcher () ; }
Distance : 6

35
Tree	{ return ( Set ) object . getCanonicalName ( array ) ; }
Code	{ return ( Set ) object . getCanonicalName ( array ) ; }
Distance : 9

36
Tree	{ return ( Set ) object . getWrappedValue ( RETURNS_DEFAULTS ) ; }
Code	{ return ( Set ) object . getWrappedValue ( RETURNS_DEFAULTS ) ; }
Distance : 9

37
Tree	{ return ( Set ) reportMatcher ( RETURNS_DEFAULTS ) . getPeriod () ; }
Code	{ return ( Set ) reportMatcher ( RETURNS_DEFAULTS ) . getPeriod () ; }
Distance : 9

38
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 4

39
Tree	{ return ( Set ) object . getCanonicalName ( RETURNS_DEFAULTS ) ; }
Code	{ return ( Set ) object . getCanonicalName ( RETURNS_DEFAULTS ) ; }
Distance : 9

40
Tree	{ return ( Set ) object . getParameterTypes ( RETURNS_DEFAULTS ) ; }
Code	{ return ( Set ) object . getParameterTypes ( RETURNS_DEFAULTS ) ; }
Distance : 9

41
Tree	{ return ( returnType ) reportMatcher () ; }
Code	{ return ( returnType ) reportMatcher () ; }
Distance : 4

42
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . isNotEqualTo () ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . isNotEqualTo () ; }
Distance : 9

43
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 7

44
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . removeChildren () ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . removeChildren () ; }
Distance : 9

45
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnList ( RETURNS_DEFAULTS ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnList ( RETURNS_DEFAULTS ) ; }
Distance : 12

46
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnMap ( RETURNS_DEFAULTS ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnMap ( RETURNS_DEFAULTS ) ; }
Distance : 12

47
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 1

48
Tree	{ mockingProgress () ; return null ; }
Code	{ mockingProgress () ; return null ; }
Distance : 5

49
Tree	{ mockingProgress ( Any.ANY ) ; return null ; }
Code	{ mockingProgress ( Any.ANY ) ; return null ; }
Distance : 7

50
Tree	{ checkNotNull ( Any.ANY ) ; return null ; }
Code	{ checkNotNull ( Any.ANY ) ; return null ; }
Distance : 7

51
Tree	{ return ( Set ) object . getCanonicalName ( nSteps ) ; }
Code	{ return ( Set ) object . getCanonicalName ( nSteps ) ; }
Distance : 9

52
Tree	{ return ( Set ) reportMatcher ( RETURNS_DEFAULTS . primitiveTypeOf () ) ; }
Code	{ return ( Set ) reportMatcher ( RETURNS_DEFAULTS . primitiveTypeOf () ) ; }
Distance : 9

53
Tree	{ return ( Set ) reportMatcher ( T ) ; }
Code	{ return ( Set ) reportMatcher ( T ) ; }
Distance : 7

54
Tree	{ return anyObject () ; }
Code	{ return anyObject () ; }
Distance : 1

55
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

56
Tree	{ return ( Set ) reportMatcher ( iValues ) ; }
Code	{ return ( Set ) reportMatcher ( iValues ) ; }
Distance : 7

57
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . getPeriod ( RETURNS_DEFAULTS ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . getPeriod ( RETURNS_DEFAULTS ) ; }
Distance : 12

58
Tree	{ return ( Set ) reportMatcher ( argumentPosition ) ; }
Code	{ return ( Set ) reportMatcher ( argumentPosition ) ; }
Distance : 7

59
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . getZoneStrings () ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . getZoneStrings () ; }
Distance : 9

60
Tree	{ recordImplicitInterfaceUses ( Any.ANY ) ; return null ; }
Code	{ recordImplicitInterfaceUses ( Any.ANY ) ; return null ; }
Distance : 7

61
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . getDeclaredType ( RETURNS_DEFAULTS ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . getDeclaredType ( RETURNS_DEFAULTS ) ; }
Distance : 12

62
Tree	{ return Set ; }
Code	{ return Set ; }
Distance : 2

63
Tree	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( Set ) ; reportMatcher ( Any.ANY ) ; }
Distance : 9

64
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . isNotEqualTo ( RETURNS_DEFAULTS ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . isNotEqualTo ( RETURNS_DEFAULTS ) ; }
Distance : 12

65
Tree	{ super ( Set . get ( nSteps ) ) ; getMethodProxy () ; }
Code	{ super ( Set . get ( nSteps ) ) ; getMethodProxy () ; }
Distance : 11

66
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 9

67
Tree	{ return defaultString () ; }
Code	{ return defaultString () ; }
Distance : 1

68
Tree	{ return ( Set ) reportMatcher ( RETURNS_DEFAULTS ) ; }
Code	{ return ( Set ) reportMatcher ( RETURNS_DEFAULTS ) ; }
Distance : 7

69
Tree	{ return ( Set ) object . getCanonicalName ( iValues ) ; }
Code	{ return ( Set ) object . getCanonicalName ( iValues ) ; }
Distance : 9

70
Tree	{ return getFragment () ; }
Code	{ return getFragment () ; }
Distance : 1

71
Tree	{ return ( Set ) object . enumLiteralHasKey ( RETURNS_DEFAULTS ) ; }
Code	{ return ( Set ) object . enumLiteralHasKey ( RETURNS_DEFAULTS ) ; }
Distance : 9

72
Tree	{ return ( Set ) reportMatcher ( RETURNS_DEFAULTS . getParameterTypes () ) ; }
Code	{ return ( Set ) reportMatcher ( RETURNS_DEFAULTS . getParameterTypes () ) ; }
Distance : 9

73
Tree	{ super ( Set . get ( nSteps ) ) ; initializeArrays () ; }
Code	{ super ( Set . get ( nSteps ) ) ; initializeArrays () ; }
Distance : 11

74
Tree	{ mockingProgress ( Any.ANY , ParseTreeType.CALL_EXPRESSION ) ; return null ; }
Code	{ mockingProgress ( Any.ANY , ParseTreeType.CALL_EXPRESSION ) ; return null ; }
Distance : 9

75
Tree	{ return ( Set ) reportMatcher ( nSteps ) ; }
Code	{ return ( Set ) reportMatcher ( nSteps ) ; }
Distance : 7

76
Tree	{ super ( Set ) ; reportMatcher ( NotNull.NOT_NULL ) ; }
Code	{ super ( Set ) ; reportMatcher ( NotNull.NOT_NULL ) ; }
Distance : 9

77
Tree	{ return ( Set ) reportMatcher ( RETURNS_DEFAULTS . copySelf () ) ; }
Code	{ return ( Set ) reportMatcher ( RETURNS_DEFAULTS . copySelf () ) ; }
Distance : 9

78
Tree	{ return getCSVClone ( Any.ANY ) ; }
Code	{ return getCSVClone ( Any.ANY ) ; }
Distance : 4

79
Tree	{ return null ; }
Code	{ return null ; }
Distance : 2

80
Tree	{ reportMatcher ( Any.ANY ) ; reportMatcher () ; super }
Code	{ reportMatcher ( Any.ANY ) ; reportMatcher () ; super }
Distance : 7

81
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . getPeriod () ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . getPeriod () ; }
Distance : 9

82
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) ; }
Distance : 7

83
Tree	{ return ( Set ) reportMatcher ( array ) ; }
Code	{ return ( Set ) reportMatcher ( array ) ; }
Distance : 7

84
Tree	{ return ( Set ) reportMatcher ( RETURNS_DEFAULTS . safeAdd () ) ; }
Code	{ return ( Set ) reportMatcher ( RETURNS_DEFAULTS . safeAdd () ) ; }
Distance : 9

85
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 9

86
Tree	{ return ( Set ) reportMatcher ( nSteps . copySelf () ) ; }
Code	{ return ( Set ) reportMatcher ( nSteps . copySelf () ) ; }
Distance : 9

87
Tree	{ return ( Set ) this . defaultOutlinePaint . shutdown () ; }
Code	{ return ( Set ) this . defaultOutlinePaint . shutdown () ; }
Distance : 8

88
Tree	{ return ( Set ) reportMatcher ( nSteps . getParameterTypes () ) ; }
Code	{ return ( Set ) reportMatcher ( nSteps . getParameterTypes () ) ; }
Distance : 9

89
Tree	{ return ( Set ) reportMatcher ( RETURNS_DEFAULTS ) . returnZero () ; }
Code	{ return ( Set ) reportMatcher ( RETURNS_DEFAULTS ) . returnZero () ; }
Distance : 9

90
Tree	{ recordImplicitInterfaceUses () ; return null ; }
Code	{ recordImplicitInterfaceUses () ; return null ; }
Distance : 5

91
Tree	{ return HamcrestPrinter ; }
Code	{ return HamcrestPrinter ; }
Distance : 2

92
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Distance : 7

93
Tree	{ return ( Set ) reportMatcher ( RETURNS_DEFAULTS ) . getExternProperties () ; }
Code	{ return ( Set ) reportMatcher ( RETURNS_DEFAULTS ) . getExternProperties () ; }
Distance : 9

94
Tree	{ return ( EnumSet ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( EnumSet ) reportMatcher ( Any.ANY ) ; }
Distance : 7

95
Tree	{ key . nullNotPermitted ( Any.ANY ) ; return null ; }
Code	{ key . nullNotPermitted ( Any.ANY ) ; return null ; }
Distance : 9

96
Tree	{ return ( Set ) reportMatcher ( RETURNS_DEFAULTS ) . returnMap () ; }
Code	{ return ( Set ) reportMatcher ( RETURNS_DEFAULTS ) . returnMap () ; }
Distance : 9

97
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . getZoneStrings ( RETURNS_DEFAULTS ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . getZoneStrings ( RETURNS_DEFAULTS ) ; }
Distance : 12

98
Tree	{ return ( EnumSet ) reportMatcher () ; }
Code	{ return ( EnumSet ) reportMatcher () ; }
Distance : 4

99
Tree	{ return Charset ; }
Code	{ return Charset ; }
Distance : 2

100
Tree	{ return ( Set ) reportMatcher ( nSteps ) . returnZero () ; }
Code	{ return ( Set ) reportMatcher ( nSteps ) . returnZero () ; }
Distance : 9

101
Tree	{ return defaultString ( Any.ANY ) ; }
Code	{ return defaultString ( Any.ANY ) ; }
Distance : 4

102
Tree	{ return ( Set ) reportMatcher ( RETURNS_DEFAULTS . returnFor () ) ; }
Code	{ return ( Set ) reportMatcher ( RETURNS_DEFAULTS . returnFor () ) ; }
Distance : 9

103
Tree	{ return ( Set ) reportMatcher ( matcher ) ; }
Code	{ return ( Set ) reportMatcher ( matcher ) ; }
Distance : 7

104
Tree	{ return parameterTypes ; }
Code	{ return parameterTypes ; }
Distance : 2

105
Tree	{ checkPrinter () ; return null ; }
Code	{ checkPrinter () ; return null ; }
Distance : 5

106
Tree	{ return ( Set ) reportMatcher ( NotNull.NOT_NULL ) ; }
Code	{ return ( Set ) reportMatcher ( NotNull.NOT_NULL ) ; }
Distance : 7

107
Tree	{ return ( returnType ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( returnType ) reportMatcher ( Any.ANY ) ; }
Distance : 7

108
Tree	{ return Constructor ; }
Code	{ return Constructor ; }
Distance : 2

109
Tree	{ return ( Set ) this . defaultOutlinePaint . getAuthor () ; }
Code	{ return ( Set ) this . defaultOutlinePaint . getAuthor () ; }
Distance : 8

110
Tree	{ return ( Set ) reportMatcher ( RETURNS_DEFAULTS . isVarArgs () ) ; }
Code	{ return ( Set ) reportMatcher ( RETURNS_DEFAULTS . isVarArgs () ) ; }
Distance : 9

111
Tree	{ return reportMatcher ( Set ) . validateFor () ; }
Code	{ return reportMatcher ( Set ) . validateFor () ; }
Distance : 6

112
Tree	{ reportMatcher ( Any.ANY , ParseTreeType.CALL_EXPRESSION ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , ParseTreeType.CALL_EXPRESSION ) ; return null ; }
Distance : 9

113
Tree	{ return ( Set ) object . getHandler () ; }
Code	{ return ( Set ) object . getHandler () ; }
Distance : 6

114
Tree	{ return ( NewOngoingStubbing ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( NewOngoingStubbing ) reportMatcher ( Any.ANY ) ; }
Distance : 7

115
Tree	{ return ( Set ) this . defaultOutlinePaint . getZoneStrings () ; }
Code	{ return ( Set ) this . defaultOutlinePaint . getZoneStrings () ; }
Distance : 8

116
Tree	{ return ( Set ) object . enumLiteralHasKey () ; }
Code	{ return ( Set ) object . enumLiteralHasKey () ; }
Distance : 6

117
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . returnZero ( RETURNS_DEFAULTS ) ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . returnZero ( RETURNS_DEFAULTS ) ; }
Distance : 12

118
Tree	{ enableNormalize () ; return null ; }
Code	{ enableNormalize () ; return null ; }
Distance : 5

119
Tree	{ return ( candidate ) reportMatcher () ; }
Code	{ return ( candidate ) reportMatcher () ; }
Distance : 4

120
Tree	{ return ( Set ) object . matchesActualCount () ; }
Code	{ return ( Set ) object . matchesActualCount () ; }
Distance : 6

121
Tree	{ reportMatcher () ; return null ; }
Code	{ reportMatcher () ; return null ; }
Distance : 5

122
Tree	{ return reportMatcher ( Any.ANY ) . getPeriod () ; }
Code	{ return reportMatcher ( Any.ANY ) . getPeriod () ; }
Distance : 6

123
Tree	{ return mapToSelf ( Any.ANY ) ; }
Code	{ return mapToSelf ( Any.ANY ) ; }
Distance : 4

124
Tree	{ return getFragment ( Any.ANY ) ; }
Code	{ return getFragment ( Any.ANY ) ; }
Distance : 4

125
Tree	{ return ( Set ) reportMatcher ( RETURNS_DEFAULTS ) . removeChildren () ; }
Code	{ return ( Set ) reportMatcher ( RETURNS_DEFAULTS ) . removeChildren () ; }
Distance : 9

126
Tree	{ super ( anchor ) ; reportMatcher () ; }
Code	{ super ( anchor ) ; reportMatcher () ; }
Distance : 6

127
Tree	{ reportMatcher ( Any.ANY , obj2.props ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , obj2.props ) ; return null ; }
Distance : 9

128
Tree	{ super ( candidate ) ; reportMatcher () ; }
Code	{ super ( candidate ) ; reportMatcher () ; }
Distance : 6

129
Tree	{ return ( Set ) this . defaultOutlinePaint . getAllValues () ; }
Code	{ return ( Set ) this . defaultOutlinePaint . getAllValues () ; }
Distance : 8

130
Tree	{ return ( Set ) reportMatcher ( Null.NULL ) ; }
Code	{ return ( Set ) reportMatcher ( Null.NULL ) ; }
Distance : 7

131
Tree	{ return ( Set ) object . withDurationTypeUsingTotalMillis () ; }
Code	{ return ( Set ) object . withDurationTypeUsingTotalMillis () ; }
Distance : 6

132
Tree	{ return ( Set ) reportMatcher ( map ) ; }
Code	{ return ( Set ) reportMatcher ( map ) ; }
Distance : 7

133
Tree	{ mockingProgress ( Any.ANY ) ; reportMatcher () ; super }
Code	{ mockingProgress ( Any.ANY ) ; reportMatcher () ; super }
Distance : 7

134
Tree	{ return ( candidate ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( candidate ) reportMatcher ( Any.ANY ) ; }
Distance : 7

135
Tree	{ return reportMatcher ( Any.ANY ) . validateFor () ; }
Code	{ return reportMatcher ( Any.ANY ) . validateFor () ; }
Distance : 6

136
Tree	{ super ( returnType ) ; reportMatcher () ; }
Code	{ super ( returnType ) ; reportMatcher () ; }
Distance : 6

137
Tree	{ compiler . verifyIterationCount ( Any.ANY ) ; return null ; }
Code	{ compiler . verifyIterationCount ( Any.ANY ) ; return null ; }
Distance : 9

138
Tree	{ return getCumFreq ( Any.ANY ) ; }
Code	{ return getCumFreq ( Any.ANY ) ; }
Distance : 4

139
Tree	{ return ( Set ) reportMatcher ( Any.ANY ) . getDeclaredType () ; }
Code	{ return ( Set ) reportMatcher ( Any.ANY ) . getDeclaredType () ; }
Distance : 9

140
Tree	{ reportMatcher ( Any.ANY , NewTypeInference.UNDEFINED_SUPER_CLASS ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , NewTypeInference.UNDEFINED_SUPER_CLASS ) ; return null ; }
Distance : 9

141
Tree	{ return ( Set ) object . mockable () ; }
Code	{ return ( Set ) object . mockable () ; }
Distance : 6

142
Tree	{ return reportMatcher ( Set ) . addWrapPartial () ; }
Code	{ return reportMatcher ( Set ) . addWrapPartial () ; }
Distance : 6

143
Tree	{ super ( Set . get ( RETURNS_DEFAULTS ) ) ; setCostAccuracy () ; }
Code	{ super ( Set . get ( RETURNS_DEFAULTS ) ) ; setCostAccuracy () ; }
Distance : 11

144
Tree	{ super ( Set . get ( nSteps ) ) ; initializeBuiltInTypes () ; }
Code	{ super ( Set . get ( nSteps ) ) ; initializeBuiltInTypes () ; }
Distance : 11

145
Tree	{ super ( Set . matcher ( nSteps ) ) ; setCostAccuracy () ; }
Code	{ super ( Set . matcher ( nSteps ) ) ; setCostAccuracy () ; }
Distance : 11

146
Tree	{ return reportMatcher ( Set ) . removeChildren () ; }
Code	{ return reportMatcher ( Set ) . removeChildren () ; }
Distance : 6

147
Tree	{ super ( Set . get ( nSteps ) ) ; mockable () ; }
Code	{ super ( Set . get ( nSteps ) ) ; mockable () ; }
Distance : 11

148
Tree	{ return getCumFreq () ; }
Code	{ return getCumFreq () ; }
Distance : 1

149
Tree	{ super ( Set ) ; reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; }
Code	{ super ( Set ) ; reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; }
Distance : 9

150
Tree	{ enableNormalize ( Any.ANY ) ; reportMatcher () ; super }
Code	{ enableNormalize ( Any.ANY ) ; reportMatcher () ; super }
Distance : 7

151
Tree	{ return reportMatcher ( Set ) . getPeriod () ; }
Code	{ return reportMatcher ( Set ) . getPeriod () ; }
Distance : 6

152
Tree	{ return reportMatcher ( Set ) . getZoneStrings () ; }
Code	{ return reportMatcher ( Set ) . getZoneStrings () ; }
Distance : 6

153
Tree	{ recordImplicitInterfaceUses ( Any.ANY ) ; reportMatcher () ; super }
Code	{ recordImplicitInterfaceUses ( Any.ANY ) ; reportMatcher () ; super }
Distance : 7

154
Tree	{ checkArgument ( Any.ANY ) ; reportMatcher () ; super }
Code	{ checkArgument ( Any.ANY ) ; reportMatcher () ; super }
Distance : 7

155
Tree	{ return anchor ; }
Code	{ return anchor ; }
Distance : 2

156
Tree	{ return reportMatcher ( Any.ANY ) . withOriginalPath () ; }
Code	{ return reportMatcher ( Any.ANY ) . withOriginalPath () ; }
Distance : 6

157
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; reportMatcher () ; super }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; reportMatcher () ; super }
Distance : 7

158
Tree	{ return ( Set ) this . defaultOutlinePaint . getParameterTypes () ; }
Code	{ return ( Set ) this . defaultOutlinePaint . getParameterTypes () ; }
Distance : 8

159
Tree	{ checkArgument () ; return null ; }
Code	{ checkArgument () ; return null ; }
Distance : 5

160
Tree	{ return ( Set ) this . defaultOutlinePaint . getBottomObject () ; }
Code	{ return ( Set ) this . defaultOutlinePaint . getBottomObject () ; }
Distance : 8

161
Tree	{ return reportMatcher ( Any.ANY ) . setTypeValidationEnabled () ; }
Code	{ return reportMatcher ( Any.ANY ) . setTypeValidationEnabled () ; }
Distance : 6

162
Tree	{ return reportMatcher ( Set ) . mockable () ; }
Code	{ return reportMatcher ( Set ) . mockable () ; }
Distance : 6

163
Tree	{ return ( anchor ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( anchor ) reportMatcher ( Any.ANY ) ; }
Distance : 7

164
Tree	{ return reportMatcher ( Set ) . withOriginalPath () ; }
Code	{ return reportMatcher ( Set ) . withOriginalPath () ; }
Distance : 6

165
Tree	{ return reportMatcher ( Any.ANY ) . isNotEqualTo () ; }
Code	{ return reportMatcher ( Any.ANY ) . isNotEqualTo () ; }
Distance : 6

166
Tree	{ return ( Set ) this . defaultOutlinePaint . withDurationTypeUsingTotalMillis () ; }
Code	{ return ( Set ) this . defaultOutlinePaint . withDurationTypeUsingTotalMillis () ; }
Distance : 8

167
Tree	{ return reportMatcher ( Set ) . setTypeValidationEnabled () ; }
Code	{ return reportMatcher ( Set ) . setTypeValidationEnabled () ; }
Distance : 6

168
Tree	{ return reportMatcher ( Any.ANY ) . addWrapPartial () ; }
Code	{ return reportMatcher ( Any.ANY ) . addWrapPartial () ; }
Distance : 6

169
Tree	{ reportMatcher ( Any.ANY , oldMockHandler.mockSettings ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , oldMockHandler.mockSettings ) ; return null ; }
Distance : 9

170
Tree	{ super ( Set . get ( nSteps ) ) ; mismatch () ; }
Code	{ super ( Set . get ( nSteps ) ) ; mismatch () ; }
Distance : 11

171
Tree	{ return reportMatcher ( Any.ANY ) . removeChildren () ; }
Code	{ return reportMatcher ( Any.ANY ) . removeChildren () ; }
Distance : 6

172
Tree	{ return ( Set ) object . getParameterTypes () ; }
Code	{ return ( Set ) object . getParameterTypes () ; }
Distance : 6

173
Tree	{ return ( Set ) this . defaultOutlinePaint . getExportPostfix () ; }
Code	{ return ( Set ) this . defaultOutlinePaint . getExportPostfix () ; }
Distance : 8

174
Tree	{ checkPrinter ( Any.ANY ) ; reportMatcher () ; super }
Code	{ checkPrinter ( Any.ANY ) ; reportMatcher () ; super }
Distance : 7

175
Tree	{ super ( Set ) ; testTypesWithCommonExterns ( Any.ANY ) ; }
Code	{ super ( Set ) ; testTypesWithCommonExterns ( Any.ANY ) ; }
Distance : 9

176
Tree	{ super ( anchor ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( anchor ) ; reportMatcher ( Any.ANY ) ; }
Distance : 9

177
Tree	{ super ( candidate ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( candidate ) ; reportMatcher ( Any.ANY ) ; }
Distance : 9

178
Tree	{ super ( returnType ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( returnType ) ; reportMatcher ( Any.ANY ) ; }
Distance : 9

179
Tree	{ super ( Set . get ( nSteps ) ) ; setCostAccuracy () ; }
Code	{ super ( Set . get ( nSteps ) ) ; setCostAccuracy () ; }
Distance : 11

180
Tree	{ return iZoneInfoKeys ; }
Code	{ return iZoneInfoKeys ; }
Distance : 2

181
Tree	{ super ( Foo ) ; reportMatcher () ; }
Code	{ super ( Foo ) ; reportMatcher () ; }
Distance : 6

182
Tree	{ super ( Set ) ; testTypesWithCommonExterns () ; }
Code	{ super ( Set ) ; testTypesWithCommonExterns () ; }
Distance : 6

183
Tree	{ super ( crosshair ) ; reportMatcher () ; }
Code	{ super ( crosshair ) ; reportMatcher () ; }
Distance : 6

184
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 2

185
Tree	{ return STRING_CONSTANT ; } Override
Code	{ return STRING_CONSTANT ; } Override
Distance : 3

186
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 2

187
Tree	{ return STRING_CONSTANT ; } MathRuntimeException
Code	{ return STRING_CONSTANT ; } MathRuntimeException
Distance : 3

188
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 3

189
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 2

190
Tree	{ super ( Set ) ; reportMatcher ( Null.NULL ) ; }
Code	{ super ( Set ) ; reportMatcher ( Null.NULL ) ; }
Distance : 9

191
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 2

192
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 3

193
Tree	{ super ( EnumSet ) ; reportMatcher () ; }
Code	{ super ( EnumSet ) ; reportMatcher () ; }
Distance : 6

194
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 3

195
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 2

196
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 3

197
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 3

198
Tree	{ return STRING_CONSTANT ; } f
Code	{ return STRING_CONSTANT ; } f
Distance : 3

199
Tree	{ return STRING_CONSTANT ; } mock
Code	{ return STRING_CONSTANT ; } mock
Distance : 3

========================================================================


========================================================================
Example Number: 92
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnSet () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Set . class ) ) . returnSet () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnSet}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Set})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnSet}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ super ( T ) ; initializeBuiltInTypes ( Any.ANY ) ; makeStackTracesClean }
Code	{ super ( T ) ; initializeBuiltInTypes ( Any.ANY ) ; makeStackTracesClean }
Distance : 13

1
Tree	{ super ( object ) ; initializeBuiltInTypes ( Any.ANY ) ; makeStackTracesClean }
Code	{ super ( object ) ; initializeBuiltInTypes ( Any.ANY ) ; makeStackTracesClean }
Distance : 13

2
Tree	{ reportMatcher ( Any.ANY ) ; this . objectIcon = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . objectIcon = Any.ANY ; super }
Distance : 12

3
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . defaultOutlinePaint = null ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . defaultOutlinePaint = null ; }
Distance : 12

4
Tree	{ reportMatcher ( Any.ANY ) ; this . sublabelFont = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . sublabelFont = Any.ANY ; }
Distance : 11

5
Tree	{ return reportMatcher ( Any.ANY ) . < AAClass > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < AAClass > reportMatcher () ; }
Distance : 9

6
Tree	{ super ( DateTimeFieldType ) ; }
Code	{ super ( DateTimeFieldType ) ; }
Distance : 12

7
Tree	{ return ( T ) getCanonicalName () ; }
Code	{ return ( T ) getCanonicalName () ; }
Distance : 10

8
Tree	{ return ( T ) getStubbingLookupListeners () ; }
Code	{ return ( T ) getStubbingLookupListeners () ; }
Distance : 10

9
Tree	{ reportMatcher ( Any.ANY ) ; this . legendItemGraphicEdge = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . legendItemGraphicEdge = Any.ANY ; super }
Distance : 12

10
Tree	{ reportMatcher ( Any.ANY ) . getPeriod () ; success = false ; }
Code	{ reportMatcher ( Any.ANY ) . getPeriod () ; success = false ; }
Distance : 11

11
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; enableUnusedLocalAssignmentCheck = false ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; enableUnusedLocalAssignmentCheck = false ; }
Distance : 11

12
Tree	{ return reportMatcher ( Any.ANY ) . < ALL > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < ALL > reportMatcher () ; }
Distance : 9

13
Tree	{ reportMatcher ( Any.ANY ) ; this . objectIcon = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . objectIcon = Any.ANY ; }
Distance : 11

14
Tree	{ super ( T ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Code	{ super ( T ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Distance : 12

15
Tree	{ super ( object ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Code	{ super ( object ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Distance : 12

16
Tree	{ return ( T ) eat ( Any.ANY ) . returnZero () ; }
Code	{ return ( T ) eat ( Any.ANY ) . returnZero () ; }
Distance : 9

17
Tree	{ super ( classToMock ) ; initializeBuiltInTypes ( Any.ANY ) . isNotEqualTo () ; }
Code	{ super ( classToMock ) ; initializeBuiltInTypes ( Any.ANY ) . isNotEqualTo () ; }
Distance : 10

18
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return null ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return null ; }
Distance : 11

19
Tree	{ return ( T ) getMethodProxy ( Any.ANY ) ; }
Code	{ return ( T ) getMethodProxy ( Any.ANY ) ; }
Distance : 11

20
Tree	{ reportMatcher ( NotNull.NOT_NULL ) ; return null ; }
Code	{ reportMatcher ( NotNull.NOT_NULL ) ; return null ; }
Distance : 11

21
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

22
Tree	{ return ( T ) thenCallRealMethod ( Any.ANY ) ; }
Code	{ return ( T ) thenCallRealMethod ( Any.ANY ) ; }
Distance : 11

23
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

24
Tree	{ return this . allowed ; }
Code	{ return this . allowed ; }
Distance : 12

25
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

26
Tree	{ reportMatcher ( Any.ANY ) ; this . defaultOutlinePaint = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . defaultOutlinePaint = Any.ANY ; }
Distance : 11

27
Tree	{ return this . mockSettings ; }
Code	{ return this . mockSettings ; }
Distance : 12

28
Tree	{ super ( T ) ; }
Code	{ super ( T ) ; }
Distance : 12

29
Tree	{ return ( T ) eat () ; }
Code	{ return ( T ) eat () ; }
Distance : 10

30
Tree	{ super ( T ) ; initializeBuiltInTypes ( Any.ANY ) . returnZero () ; }
Code	{ super ( T ) ; initializeBuiltInTypes ( Any.ANY ) . returnZero () ; }
Distance : 10

31
Tree	{ super ( object ) ; initializeBuiltInTypes ( Any.ANY ) . returnZero () ; }
Code	{ super ( object ) ; initializeBuiltInTypes ( Any.ANY ) . returnZero () ; }
Distance : 10

32
Tree	{ reportMatcher ( Any.ANY ) ; this . legendBackgroundPaint = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . legendBackgroundPaint = Any.ANY ; }
Distance : 11

33
Tree	{ return reportMatcher ( Any.ANY ) . < thisAndArgumentsContext > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < thisAndArgumentsContext > reportMatcher () ; }
Distance : 9

34
Tree	{ super ( matcher ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Code	{ super ( matcher ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Distance : 12

35
Tree	{ reportMatcher ( Any.ANY ) ; PRIMITIVE_TYPES = false ; }
Code	{ reportMatcher ( Any.ANY ) ; PRIMITIVE_TYPES = false ; }
Distance : 11

36
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; currentDerivative = StringUtils.EMPTY ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; currentDerivative = StringUtils.EMPTY ; }
Distance : 11

37
Tree	{ reportMatcher ( Any.ANY ) ; this . summary = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . summary = Any.ANY ; super }
Distance : 12

38
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . defaultOutlinePaint = map ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . defaultOutlinePaint = map ; }
Distance : 12

39
Tree	{ reportMatcher ( Any.ANY ) ; this . stripOutlineStroke = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . stripOutlineStroke = Any.ANY ; super }
Distance : 12

40
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . radiusMinorGridlinesVisible = map ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . radiusMinorGridlinesVisible = map ; }
Distance : 12

41
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; currentDerivative = TypeInferenceMode.OTI_ONLY ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; currentDerivative = TypeInferenceMode.OTI_ONLY ; }
Distance : 11

42
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; success = StringUtils.EMPTY ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; success = StringUtils.EMPTY ; }
Distance : 11

43
Tree	{ reportMatcher ( Any.ANY ) ; providedNamespaces = problem.y . withDurationTypeUsingTotalMillis () ; }
Code	{ reportMatcher ( Any.ANY ) ; providedNamespaces = problem.y . withDurationTypeUsingTotalMillis () ; }
Distance : 10

44
Tree	{ reportMatcher ( Any.ANY ) ; scopedNameTable = problem.y . getAuthor () ; }
Code	{ reportMatcher ( Any.ANY ) ; scopedNameTable = problem.y . getAuthor () ; }
Distance : 10

45
Tree	{ reportMatcher ( Any.ANY ) ; iMonths = problem.y . withDurationTypeUsingTotalMillis () ; }
Code	{ reportMatcher ( Any.ANY ) ; iMonths = problem.y . withDurationTypeUsingTotalMillis () ; }
Distance : 10

46
Tree	{ return reportMatcher ( Any.ANY ) . < MISSING_REQUIRE_STRICT_WARNING > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < MISSING_REQUIRE_STRICT_WARNING > reportMatcher () ; }
Distance : 9

47
Tree	{ super ( classToMock ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Code	{ super ( classToMock ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Distance : 12

48
Tree	{ super ( classToMock ) ; visitSuper ( Any.ANY ) ; }
Code	{ super ( classToMock ) ; visitSuper ( Any.ANY ) ; }
Distance : 12

49
Tree	{ return ( T ) mockable ( Any.ANY ) . getDeclaredType () ; }
Code	{ return ( T ) mockable ( Any.ANY ) . getDeclaredType () ; }
Distance : 9

50
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

51
Tree	{ return reportMatcher ( Any.ANY ) . isNotEqualTo () ; }
Code	{ return reportMatcher ( Any.ANY ) . isNotEqualTo () ; }
Distance : 8

52
Tree	{ reportMatcher ( Any.ANY ) ; this . summary = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . summary = Any.ANY ; }
Distance : 11

53
Tree	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return null ; }
Code	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return null ; }
Distance : 11

54
Tree	{ super ( matcher ) ; initializeBuiltInTypes ( Any.ANY ) . isNotEqualTo () ; }
Code	{ super ( matcher ) ; initializeBuiltInTypes ( Any.ANY ) . isNotEqualTo () ; }
Distance : 10

55
Tree	{ reportMatcher ( Any.ANY ) ; this . radiusMinorGridlinesVisible = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . radiusMinorGridlinesVisible = Any.ANY ; super }
Distance : 12

56
Tree	{ reportMatcher ( Any.ANY ) ; matchedTemplates = problem.y . withDurationTypeUsingTotalMillis () ; }
Code	{ reportMatcher ( Any.ANY ) ; matchedTemplates = problem.y . withDurationTypeUsingTotalMillis () ; }
Distance : 10

57
Tree	{ reportMatcher ( Any.ANY ) ; scopedNameTable = problem.y . withDurationTypeUsingTotalMillis () ; }
Code	{ reportMatcher ( Any.ANY ) ; scopedNameTable = problem.y . withDurationTypeUsingTotalMillis () ; }
Distance : 10

58
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; success = false ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; success = false ; }
Distance : 11

59
Tree	{ return ( T ) getPeriod () ; }
Code	{ return ( T ) getPeriod () ; }
Distance : 10

60
Tree	{ reportMatcher ( Null.NULL ) ; return false ; }
Code	{ reportMatcher ( Null.NULL ) ; return false ; }
Distance : 11

61
Tree	{ return this . MockitoCore ; }
Code	{ return this . MockitoCore ; }
Distance : 12

62
Tree	{ reportMatcher ( Any.ANY ) ; this . radiusMinorGridlinesVisible = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . radiusMinorGridlinesVisible = Any.ANY ; }
Distance : 11

63
Tree	{ return ( T ) getMethodProxy ( Any.ANY ) . getDeclaredType () ; }
Code	{ return ( T ) getMethodProxy ( Any.ANY ) . getDeclaredType () ; }
Distance : 9

64
Tree	{ return reportMatcher ( Any.ANY ) . getDeclaredType () ; }
Code	{ return reportMatcher ( Any.ANY ) . getDeclaredType () ; }
Distance : 8

65
Tree	{ super ( T ) ; visitSuper ( Any.ANY ) . isNotEqualTo () ; }
Code	{ super ( T ) ; visitSuper ( Any.ANY ) . isNotEqualTo () ; }
Distance : 10

66
Tree	{ return reportMatcher ( Any.ANY ) . getPeriod () ; }
Code	{ return reportMatcher ( Any.ANY ) . getPeriod () ; }
Distance : 8

67
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Distance : 11

68
Tree	{ super ( T ) ; initializeBuiltInTypes ( Any.ANY ) . isNotEqualTo () ; }
Code	{ super ( T ) ; initializeBuiltInTypes ( Any.ANY ) . isNotEqualTo () ; }
Distance : 10

69
Tree	{ super ( object ) ; initializeBuiltInTypes ( Any.ANY ) . isNotEqualTo () ; }
Code	{ super ( object ) ; initializeBuiltInTypes ( Any.ANY ) . isNotEqualTo () ; }
Distance : 10

70
Tree	{ return reportMatcher ( Any.ANY ) . getZoneStrings () ; }
Code	{ return reportMatcher ( Any.ANY ) . getZoneStrings () ; }
Distance : 8

71
Tree	{ return reportMatcher ( Any.ANY ) . < ARROW_FN > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < ARROW_FN > reportMatcher () ; }
Distance : 9

72
Tree	{ return ( T ) getPeriod ( Any.ANY ) ; }
Code	{ return ( T ) getPeriod ( Any.ANY ) ; }
Distance : 11

73
Tree	{ return ( T ) setCallback ( Any.ANY ) ; }
Code	{ return ( T ) setCallback ( Any.ANY ) ; }
Distance : 11

74
Tree	{ super ( classToMock ) ; }
Code	{ super ( classToMock ) ; }
Distance : 12

75
Tree	{ return this . classToMock ; }
Code	{ return this . classToMock ; }
Distance : 12

76
Tree	{ super ( object ) ; visitSuper ( Any.ANY ) . isNotEqualTo () ; }
Code	{ super ( object ) ; visitSuper ( Any.ANY ) . isNotEqualTo () ; }
Distance : 10

77
Tree	{ return this . matcher ; }
Code	{ return this . matcher ; }
Distance : 12

78
Tree	{ return ( T ) getMethodProxy () ; }
Code	{ return ( T ) getMethodProxy () ; }
Distance : 10

79
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 8

80
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

81
Tree	{ reportMatcher ( Any.ANY ) ; this . stripOutlineStroke = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . stripOutlineStroke = Any.ANY ; }
Distance : 11

82
Tree	{ return reportMatcher ( Any.ANY ) . < AAClass > returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . < AAClass > returnNull () ; }
Distance : 9

83
Tree	{ return ( T ) eat ( Any.ANY ) ; }
Code	{ return ( T ) eat ( Any.ANY ) ; }
Distance : 11

84
Tree	{ return reportMatcher ( Any.ANY ) . removeChildren () ; }
Code	{ return reportMatcher ( Any.ANY ) . removeChildren () ; }
Distance : 8

85
Tree	{ reportMatcher ( Any.ANY ) . getPeriod () ; currentDerivative = false ; }
Code	{ reportMatcher ( Any.ANY ) . getPeriod () ; currentDerivative = false ; }
Distance : 11

86
Tree	{ super ( object ) ; visitSuper ( Any.ANY ) ; }
Code	{ super ( object ) ; visitSuper ( Any.ANY ) ; }
Distance : 12

87
Tree	{ return ( T ) mockable ( Any.ANY ) . returnZero () ; }
Code	{ return ( T ) mockable ( Any.ANY ) . returnZero () ; }
Distance : 9

88
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return NUMBER_CONSTANT ; }
Distance : 11

89
Tree	{ return reportMatcher ( Any.ANY ) . validateFor () ; }
Code	{ return reportMatcher ( Any.ANY ) . validateFor () ; }
Distance : 8

90
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; currentDerivative = false ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; currentDerivative = false ; }
Distance : 11

91
Tree	{ return ( T ) setCallback () ; }
Code	{ return ( T ) setCallback () ; }
Distance : 10

92
Tree	{ reportMatcher ( Any.ANY ) ; this . defaultOutlinePaint = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . defaultOutlinePaint = Any.ANY ; super }
Distance : 12

93
Tree	{ return ( T ) getCanonicalName ( Any.ANY ) ; }
Code	{ return ( T ) getCanonicalName ( Any.ANY ) ; }
Distance : 11

94
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

95
Tree	{ return this . mode ; }
Code	{ return this . mode ; }
Distance : 12

96
Tree	{ reportMatcher ( Any.ANY ) ; providedNamespaces = false ; }
Code	{ reportMatcher ( Any.ANY ) ; providedNamespaces = false ; }
Distance : 11

97
Tree	{ reportMatcher ( Any.ANY ) ; this . legendBackgroundPaint = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . legendBackgroundPaint = Any.ANY ; super }
Distance : 12

98
Tree	{ return this . RETURNS_DEFAULTS ; }
Code	{ return this . RETURNS_DEFAULTS ; }
Distance : 12

99
Tree	{ return this . object ; }
Code	{ return this . object ; }
Distance : 12

100
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

101
Tree	{ testTypes ( Any.ANY ) ; return null ; }
Code	{ testTypes ( Any.ANY ) ; return null ; }
Distance : 12

102
Tree	{ reportMatcher ( Null.NULL ) ; return null ; }
Code	{ reportMatcher ( Null.NULL ) ; return null ; }
Distance : 11

103
Tree	{ super ( matcher ) ; }
Code	{ super ( matcher ) ; }
Distance : 12

104
Tree	{ super ( classToMock ) ; initializeBuiltInTypes ( Any.ANY ) ; makeStackTracesClean }
Code	{ super ( classToMock ) ; initializeBuiltInTypes ( Any.ANY ) ; makeStackTracesClean }
Distance : 13

105
Tree	{ reportMatcher ( Any.ANY ) ; warningsPrinter = false ; }
Code	{ reportMatcher ( Any.ANY ) ; warningsPrinter = false ; }
Distance : 11

106
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . stepPoint = null ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . stepPoint = null ; }
Distance : 12

107
Tree	{ super ( RETURNS_DEFAULTS ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Code	{ super ( RETURNS_DEFAULTS ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Distance : 12

108
Tree	{ reportMatcher ( v.data ) ; return null ; }
Code	{ reportMatcher ( v.data ) ; return null ; }
Distance : 11

109
Tree	{ reportMatcher ( Any.ANY ) ; strictOrderVerifier = false ; }
Code	{ reportMatcher ( Any.ANY ) ; strictOrderVerifier = false ; }
Distance : 11

110
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; success = problem.y ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; success = problem.y ; }
Distance : 11

111
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; success = TypeInferenceMode.OTI_ONLY ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; success = TypeInferenceMode.OTI_ONLY ; }
Distance : 11

112
Tree	{ return ( T ) getMethodProxy ( Any.ANY ) . getZoneStrings () ; }
Code	{ return ( T ) getMethodProxy ( Any.ANY ) . getZoneStrings () ; }
Distance : 9

113
Tree	{ super ( mockSettings ) ; }
Code	{ super ( mockSettings ) ; }
Distance : 12

114
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; currentDerivative = problem.y ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; currentDerivative = problem.y ; }
Distance : 11

115
Tree	{ reportMatcher ( Any.ANY ) ; iMonths = false ; }
Code	{ reportMatcher ( Any.ANY ) ; iMonths = false ; }
Distance : 11

116
Tree	{ reportMatcher ( Any.ANY ) ; scopedNameTable = false ; }
Code	{ reportMatcher ( Any.ANY ) ; scopedNameTable = false ; }
Distance : 11

117
Tree	{ return ( T ) mockable ( Any.ANY ) ; }
Code	{ return ( T ) mockable ( Any.ANY ) ; }
Distance : 11

118
Tree	{ return ( T ) thenCallRealMethod () ; }
Code	{ return ( T ) thenCallRealMethod () ; }
Distance : 10

119
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . legendItemGraphicEdge = null ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . legendItemGraphicEdge = null ; }
Distance : 12

120
Tree	{ reportMatcher ( Any.ANY ) . getPeriod () ; this . defaultOutlinePaint = null ; }
Code	{ reportMatcher ( Any.ANY ) . getPeriod () ; this . defaultOutlinePaint = null ; }
Distance : 12

121
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . stepPoint = map ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . stepPoint = map ; }
Distance : 12

122
Tree	{ return ( T ) mockable () ; }
Code	{ return ( T ) mockable () ; }
Distance : 10

123
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . legendItemGraphicEdge = map ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . legendItemGraphicEdge = map ; }
Distance : 12

124
Tree	{ return ( T ) getStubbingLookupListeners ( Any.ANY ) ; }
Code	{ return ( T ) getStubbingLookupListeners ( Any.ANY ) ; }
Distance : 11

125
Tree	{ return ( T ) getMethodProxy ( Any.ANY ) . returnZero () ; }
Code	{ return ( T ) getMethodProxy ( Any.ANY ) . returnZero () ; }
Distance : 9

126
Tree	{ reportMatcher ( Any.ANY ) . getPeriod () ; currentDerivative = StringUtils.EMPTY ; }
Code	{ reportMatcher ( Any.ANY ) . getPeriod () ; currentDerivative = StringUtils.EMPTY ; }
Distance : 11

127
Tree	{ reportMatcher ( Any.ANY ) ; matchedTemplates = false ; }
Code	{ reportMatcher ( Any.ANY ) ; matchedTemplates = false ; }
Distance : 11

128
Tree	{ reportMatcher ( Null.NULL ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Null.NULL ) ; return NUMBER_CONSTANT ; }
Distance : 11

129
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return false ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return false ; }
Distance : 11

130
Tree	{ super ( matcher ) ; initializeBuiltInTypes ( Any.ANY ) ; makeStackTracesClean }
Code	{ super ( matcher ) ; initializeBuiltInTypes ( Any.ANY ) ; makeStackTracesClean }
Distance : 13

131
Tree	{ reportMatcher ( Any.ANY ) . getPeriod () ; this . radiusMinorGridlinesVisible = null ; }
Code	{ reportMatcher ( Any.ANY ) . getPeriod () ; this . radiusMinorGridlinesVisible = null ; }
Distance : 12

132
Tree	{ reportMatcher ( Any.ANY ) . getPeriod () ; enableUnusedLocalAssignmentCheck = false ; }
Code	{ reportMatcher ( Any.ANY ) . getPeriod () ; enableUnusedLocalAssignmentCheck = false ; }
Distance : 11

133
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . legendBackgroundPaint = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . legendBackgroundPaint = Any.ANY ; }
Distance : 11

134
Tree	{ return reportMatcher ( NotNull.NOT_NULL ) ; }
Code	{ return reportMatcher ( NotNull.NOT_NULL ) ; }
Distance : 10

135
Tree	{ return reportMatcher ( Any.ANY ) . < thisAndArgumentsContext > returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . < thisAndArgumentsContext > returnNull () ; }
Distance : 9

136
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . objectIcon = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . objectIcon = Any.ANY ; }
Distance : 11

137
Tree	{ return ( T ) eat ( Any.ANY ) . getDeclaredType () ; }
Code	{ return ( T ) eat ( Any.ANY ) . getDeclaredType () ; }
Distance : 9

138
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . sublabelFont = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . sublabelFont = Any.ANY ; }
Distance : 11

139
Tree	{ super ( Foo ) ; }
Code	{ super ( Foo ) ; }
Distance : 12

140
Tree	{ reportMatcher ( Any.ANY ) . removeChildren () ; currentDerivative = false ; }
Code	{ reportMatcher ( Any.ANY ) . removeChildren () ; currentDerivative = false ; }
Distance : 11

141
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . summary = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . summary = Any.ANY ; }
Distance : 11

142
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . radiusMinorGridlinesVisible = scalar ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . radiusMinorGridlinesVisible = scalar ; }
Distance : 12

143
Tree	{ reportMatcher ( Any.ANY ) . getPeriod () ; this . defaultOutlinePaint = map ; }
Code	{ reportMatcher ( Any.ANY ) . getPeriod () ; this . defaultOutlinePaint = map ; }
Distance : 12

144
Tree	{ reportMatcher ( Any.ANY ) ; eachRefTypeIndexedByProperty = false ; }
Code	{ reportMatcher ( Any.ANY ) ; eachRefTypeIndexedByProperty = false ; }
Distance : 11

145
Tree	{ super ( classToMock ) ; visitSuper ( Any.ANY ) ; makeStackTracesClean }
Code	{ super ( classToMock ) ; visitSuper ( Any.ANY ) ; makeStackTracesClean }
Distance : 13

146
Tree	{ testTypes ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ testTypes ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

147
Tree	{ super ( T ) ; visitSuper ( Any.ANY ) ; makeStackTracesClean }
Code	{ super ( T ) ; visitSuper ( Any.ANY ) ; makeStackTracesClean }
Distance : 13

148
Tree	{ reportMatcher ( v.data ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( v.data ) ; return NUMBER_CONSTANT ; }
Distance : 11

149
Tree	{ reportMatcher ( Any.ANY ) . getPeriod () ; this . radiusMinorGridlinesVisible = map ; }
Code	{ reportMatcher ( Any.ANY ) . getPeriod () ; this . radiusMinorGridlinesVisible = map ; }
Distance : 12

150
Tree	{ reportMatcher ( Any.ANY ) . validateFor () ; currentDerivative = false ; }
Code	{ reportMatcher ( Any.ANY ) . validateFor () ; currentDerivative = false ; }
Distance : 11

151
Tree	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return NUMBER_CONSTANT ; }
Distance : 11

152
Tree	{ return ( T ) getMethodProxy ( Any.ANY ) . getPeriod () ; }
Code	{ return ( T ) getMethodProxy ( Any.ANY ) . getPeriod () ; }
Distance : 9

153
Tree	{ reportMatcher ( Any.ANY ) ; this . legendItemGraphicEdge = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . legendItemGraphicEdge = Any.ANY ; }
Distance : 11

154
Tree	{ reportMatcher ( Any.ANY ) ; this . sublabelFont = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . sublabelFont = Any.ANY ; super }
Distance : 12

155
Tree	{ reportMatcher ( Any.ANY ) . getPeriod () ; currentDerivative = TypeInferenceMode.OTI_ONLY ; }
Code	{ reportMatcher ( Any.ANY ) . getPeriod () ; currentDerivative = TypeInferenceMode.OTI_ONLY ; }
Distance : 11

156
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . subtypes = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . subtypes = Any.ANY ; }
Distance : 11

157
Tree	{ reportMatcher ( Any.ANY ) ; providedNamespaces = problem.y . getAuthor () ; }
Code	{ reportMatcher ( Any.ANY ) ; providedNamespaces = problem.y . getAuthor () ; }
Distance : 10

158
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return NUMBER_CONSTANT ; }
Distance : 11

159
Tree	{ reportMatcher ( NotNull.NOT_NULL ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( NotNull.NOT_NULL ) ; return NUMBER_CONSTANT ; }
Distance : 11

160
Tree	{ return reportMatcher ( Any.ANY ) . < NO_FIELD_NAMES_STYLE > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < NO_FIELD_NAMES_STYLE > reportMatcher () ; }
Distance : 9

161
Tree	{ super ( object ) ; visitSuper ( Any.ANY ) ; makeStackTracesClean }
Code	{ super ( object ) ; visitSuper ( Any.ANY ) ; makeStackTracesClean }
Distance : 13

162
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . summary = null ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . summary = null ; }
Distance : 12

163
Tree	{ return anyObject ( Any.ANY ) ; }
Code	{ return anyObject ( Any.ANY ) ; }
Distance : 11

164
Tree	{ return reportMatcher ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT ) ; }
Code	{ return reportMatcher ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT ) ; }
Distance : 10

165
Tree	{ reportMatcher ( Any.ANY ) ; iMonths = problem.y . getAuthor () ; }
Code	{ reportMatcher ( Any.ANY ) ; iMonths = problem.y . getAuthor () ; }
Distance : 10

166
Tree	{ testTypes ( Any.ANY ) ; return false ; }
Code	{ testTypes ( Any.ANY ) ; return false ; }
Distance : 12

167
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 14

168
Tree	{ reportMatcher ( Any.ANY ) ; matchedTemplates = problem.y . getAuthor () ; }
Code	{ reportMatcher ( Any.ANY ) ; matchedTemplates = problem.y . getAuthor () ; }
Distance : 10

169
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . objectIcon = null ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . objectIcon = null ; }
Distance : 12

170
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 14

171
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 14

172
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return false ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return false ; }
Distance : 11

173
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . defaultOutlinePaint = scalar ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . defaultOutlinePaint = scalar ; }
Distance : 12

174
Tree	{ reportMatcher ( v.data ) ; return false ; }
Code	{ reportMatcher ( v.data ) ; return false ; }
Distance : 11

175
Tree	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return false ; }
Code	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return false ; }
Distance : 11

176
Tree	{ return reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; }
Code	{ return reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; }
Distance : 10

177
Tree	{ super ( object ) ; }
Code	{ super ( object ) ; }
Distance : 12

178
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . defaultOutlinePaint = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . defaultOutlinePaint = Any.ANY ; }
Distance : 11

179
Tree	{ super ( T ) ; visitSuper ( Any.ANY ) ; }
Code	{ super ( T ) ; visitSuper ( Any.ANY ) ; }
Distance : 12

180
Tree	{ super ( RETURNS_DEFAULTS ) ; }
Code	{ super ( RETURNS_DEFAULTS ) ; }
Distance : 12

181
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 14

182
Tree	{ super ( RETURNS_DEFAULTS ) ; initializeBuiltInTypes ( Any.ANY ) ; makeStackTracesClean }
Code	{ super ( RETURNS_DEFAULTS ) ; initializeBuiltInTypes ( Any.ANY ) ; makeStackTracesClean }
Distance : 13

183
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 14

184
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

185
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . radiusMinorGridlinesVisible = null ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . radiusMinorGridlinesVisible = null ; }
Distance : 12

186
Tree	{ return reportMatcher ( Null.NULL ) ; }
Code	{ return reportMatcher ( Null.NULL ) ; }
Distance : 10

187
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . legendItemGraphicEdge = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . legendItemGraphicEdge = Any.ANY ; }
Distance : 11

188
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . radiusMinorGridlinesVisible = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . radiusMinorGridlinesVisible = Any.ANY ; }
Distance : 11

189
Tree	{ reportMatcher ( NotNull.NOT_NULL ) ; return false ; }
Code	{ reportMatcher ( NotNull.NOT_NULL ) ; return false ; }
Distance : 11

190
Tree	{ return reportMatcher ( AnyVararg.ANY_VARARG ) ; }
Code	{ return reportMatcher ( AnyVararg.ANY_VARARG ) ; }
Distance : 10

191
Tree	{ return reportMatcher ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW ) ; }
Code	{ return reportMatcher ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW ) ; }
Distance : 10

192
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

193
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

194
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

195
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

196
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 13

197
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 13

198
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 14

199
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

========================================================================


========================================================================
Example Number: 93
Parent Code is: 
{ return ( List ) reportMatcher ( Any.ANY ) . returnList () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return anyList () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=List})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=anyList}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 9
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return UnsupportedDateTimeField ; }
Code	{ return UnsupportedDateTimeField ; }
Distance : 2

1
Tree	{ reportMatcher ( Any.ANY , oldMockHandler.mockSettings ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , oldMockHandler.mockSettings ) ; return null ; }
Distance : 9

2
Tree	{ return reportMatcher ( List ) . setCallback () ; }
Code	{ return reportMatcher ( List ) . setCallback () ; }
Distance : 6

3
Tree	{ return reportMatcher ( Any.ANY ) . voidMethod () ; }
Code	{ return reportMatcher ( Any.ANY ) . voidMethod () ; }
Distance : 6

4
Tree	{ return reportMatcher ( Any.ANY ) . setCallback () ; }
Code	{ return reportMatcher ( Any.ANY ) . setCallback () ; }
Distance : 6

5
Tree	{ return ( List ) this . unknownTypeNames . getParameterTypes () ; }
Code	{ return ( List ) this . unknownTypeNames . getParameterTypes () ; }
Distance : 8

6
Tree	{ return reportMatcher ( List ) . disallowGlobalThis () ; }
Code	{ return reportMatcher ( List ) . disallowGlobalThis () ; }
Distance : 6

7
Tree	{ return ( List ) this . weightSqrt . getParameterTypes () ; }
Code	{ return ( List ) this . weightSqrt . getParameterTypes () ; }
Distance : 8

8
Tree	{ return reportMatcher ( Any.ANY ) . isNotEqualTo () ; }
Code	{ return reportMatcher ( Any.ANY ) . isNotEqualTo () ; }
Distance : 6

9
Tree	{ return reportMatcher ( Any.ANY ) . setTypeValidationEnabled () ; }
Code	{ return reportMatcher ( Any.ANY ) . setTypeValidationEnabled () ; }
Distance : 6

10
Tree	{ reportMatcher ( Any.ANY , NewTypeInference.UNDEFINED_SUPER_CLASS ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , NewTypeInference.UNDEFINED_SUPER_CLASS ) ; return null ; }
Distance : 9

11
Tree	{ return ( List ) this . advanceLinePaint . getParameterTypes () ; }
Code	{ return ( List ) this . advanceLinePaint . getParameterTypes () ; }
Distance : 8

12
Tree	{ return ( List ) this . panMask . getParameterTypes () ; }
Code	{ return ( List ) this . panMask . getParameterTypes () ; }
Distance : 8

13
Tree	{ super ( DateTimeFieldType ) ; checkShortName ( Any.ANY ) ; }
Code	{ super ( DateTimeFieldType ) ; checkShortName ( Any.ANY ) ; }
Distance : 9

14
Tree	{ return ( List ) reportMatcher ( nSteps ) . getParameterTypes () ; }
Code	{ return ( List ) reportMatcher ( nSteps ) . getParameterTypes () ; }
Distance : 9

15
Tree	{ return defaultString () ; }
Code	{ return defaultString () ; }
Distance : 1

16
Tree	{ return ( List ) reportMatcher ( iValues ) ; }
Code	{ return ( List ) reportMatcher ( iValues ) ; }
Distance : 7

17
Tree	{ return getFragment () ; }
Code	{ return getFragment () ; }
Distance : 1

18
Tree	{ return ( List ) reportMatcher ( RETURNS_DEFAULTS ) ; }
Code	{ return ( List ) reportMatcher ( RETURNS_DEFAULTS ) ; }
Distance : 7

19
Tree	{ return ( List ) reportMatcher ( nSteps ) ; }
Code	{ return ( List ) reportMatcher ( nSteps ) ; }
Distance : 7

20
Tree	{ return ( List ) reportMatcher ( array ) ; }
Code	{ return ( List ) reportMatcher ( array ) ; }
Distance : 7

21
Tree	{ return ( List ) reportMatcher ( Object ) ; }
Code	{ return ( List ) reportMatcher ( Object ) ; }
Distance : 7

22
Tree	{ checkPrinter () ; return null ; }
Code	{ checkPrinter () ; return null ; }
Distance : 5

23
Tree	{ return ( List ) reportMatcher ( iValues ) . voidMethod () ; }
Code	{ return ( List ) reportMatcher ( iValues ) . voidMethod () ; }
Distance : 9

24
Tree	{ return ( List ) reportMatcher ( map ) ; }
Code	{ return ( List ) reportMatcher ( map ) ; }
Distance : 7

25
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 4

26
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . getPeriod () ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . getPeriod () ; }
Distance : 9

27
Tree	{ mockingProgress ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Code	{ mockingProgress ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Distance : 7

28
Tree	{ return ( List ) reportMatcher ( initializeCalls ) ; }
Code	{ return ( List ) reportMatcher ( initializeCalls ) ; }
Distance : 7

29
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return null ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return null ; }
Distance : 7

30
Tree	{ return ( List ) reportMatcher ( T ) ; }
Code	{ return ( List ) reportMatcher ( T ) ; }
Distance : 7

31
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . voidMethod () ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . voidMethod () ; }
Distance : 9

32
Tree	{ return List ; }
Code	{ return List ; }
Distance : 2

33
Tree	{ return ( List ) languageMode . getCanonicalName ( array ) ; }
Code	{ return ( List ) languageMode . getCanonicalName ( array ) ; }
Distance : 9

34
Tree	{ checkNotNull ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Code	{ checkNotNull ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Distance : 7

35
Tree	{ return ( List ) reportMatcher () ; }
Code	{ return ( List ) reportMatcher () ; }
Distance : 4

36
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . getDeclaredType () ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . getDeclaredType () ; }
Distance : 9

37
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . getParameterTypes () ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . getParameterTypes () ; }
Distance : 9

38
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . clearInvocations ( RETURNS_DEFAULTS ) ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . clearInvocations ( RETURNS_DEFAULTS ) ; }
Distance : 12

39
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 7

40
Tree	{ super ( List ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Code	{ super ( List ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Distance : 9

41
Tree	{ return ( List ) languageMode . setTypeValidationEnabled ( array ) ; }
Code	{ return ( List ) languageMode . setTypeValidationEnabled ( array ) ; }
Distance : 9

42
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 1

43
Tree	{ return ( List ) object . getParameterTypes ( array ) ; }
Code	{ return ( List ) object . getParameterTypes ( array ) ; }
Distance : 9

44
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . setTypeValidationEnabled () ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . setTypeValidationEnabled () ; }
Distance : 9

45
Tree	{ return reportMatcher ( List ) . getPeriod () ; }
Code	{ return reportMatcher ( List ) . getPeriod () ; }
Distance : 6

46
Tree	{ super ( List ) ; setTolerance ( Any.ANY ) ; }
Code	{ super ( List ) ; setTolerance ( Any.ANY ) ; }
Distance : 9

47
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Distance : 7

48
Tree	{ return ( List ) reportMatcher ( RETURNS_DEFAULTS . getParameterTypes () ) ; }
Code	{ return ( List ) reportMatcher ( RETURNS_DEFAULTS . getParameterTypes () ) ; }
Distance : 9

49
Tree	{ mockingProgress ( Any.ANY ) ; return null ; }
Code	{ mockingProgress ( Any.ANY ) ; return null ; }
Distance : 7

50
Tree	{ return ( List ) languageMode . getHandler ( array ) ; }
Code	{ return ( List ) languageMode . getHandler ( array ) ; }
Distance : 9

51
Tree	{ checkNotNull ( Any.ANY ) ; return null ; }
Code	{ checkNotNull ( Any.ANY ) ; return null ; }
Distance : 7

52
Tree	{ return anyObject () ; }
Code	{ return anyObject () ; }
Distance : 1

53
Tree	{ return ( List ) languageMode . getMethodProxy ( array ) ; }
Code	{ return ( List ) languageMode . getMethodProxy ( array ) ; }
Distance : 9

54
Tree	{ return ( List ) languageMode . getParameterTypes () ; }
Code	{ return ( List ) languageMode . getParameterTypes () ; }
Distance : 6

55
Tree	{ super ( List . argumentsToMatchers ( nSteps ) ) ; setTolerance () ; }
Code	{ super ( List . argumentsToMatchers ( nSteps ) ) ; setTolerance () ; }
Distance : 11

56
Tree	{ mockingProgress () ; return null ; }
Code	{ mockingProgress () ; return null ; }
Distance : 5

57
Tree	{ enableNormalize () ; return null ; }
Code	{ enableNormalize () ; return null ; }
Distance : 5

58
Tree	{ return ( List ) getMockSettings ( Any.ANY ) ; }
Code	{ return ( List ) getMockSettings ( Any.ANY ) ; }
Distance : 7

59
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . isNotEqualTo ( RETURNS_DEFAULTS ) ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . isNotEqualTo ( RETURNS_DEFAULTS ) ; }
Distance : 12

60
Tree	{ return reportMatcher ( Any.ANY ) . validateFor () ; }
Code	{ return reportMatcher ( Any.ANY ) . validateFor () ; }
Distance : 6

61
Tree	{ reportMatcher () ; return null ; }
Code	{ reportMatcher () ; return null ; }
Distance : 5

62
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . getMethodProxy ( RETURNS_DEFAULTS ) ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . getMethodProxy ( RETURNS_DEFAULTS ) ; }
Distance : 12

63
Tree	{ return ( DateTimeFieldType ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( DateTimeFieldType ) reportMatcher ( Any.ANY ) ; }
Distance : 7

64
Tree	{ return ( List ) reportMatcher ( iValues ) . getParameterTypes () ; }
Code	{ return ( List ) reportMatcher ( iValues ) . getParameterTypes () ; }
Distance : 9

65
Tree	{ return ( List ) anyObject ( Any.ANY ) ; }
Code	{ return ( List ) anyObject ( Any.ANY ) ; }
Distance : 7

66
Tree	{ return ( List ) languageMode . getCanonicalName ( iValues ) ; }
Code	{ return ( List ) languageMode . getCanonicalName ( iValues ) ; }
Distance : 9

67
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . getPeriod ( RETURNS_DEFAULTS ) ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . getPeriod ( RETURNS_DEFAULTS ) ; }
Distance : 12

68
Tree	{ return ( List ) reportMatcher ( array . getParameterTypes () ) ; }
Code	{ return ( List ) reportMatcher ( array . getParameterTypes () ) ; }
Distance : 9

69
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . clearInvocations () ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . clearInvocations () ; }
Distance : 9

70
Tree	{ List . verify ( Any.ANY ) ; return null ; }
Code	{ List . verify ( Any.ANY ) ; return null ; }
Distance : 9

71
Tree	{ recordImplicitInterfaceUses ( Any.ANY ) ; return null ; }
Code	{ recordImplicitInterfaceUses ( Any.ANY ) ; return null ; }
Distance : 7

72
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . voidMethod ( RETURNS_DEFAULTS ) ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . voidMethod ( RETURNS_DEFAULTS ) ; }
Distance : 12

73
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . voidMethod ( nSteps ) ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . voidMethod ( nSteps ) ; }
Distance : 12

74
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . getDeclaredType ( RETURNS_DEFAULTS ) ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . getDeclaredType ( RETURNS_DEFAULTS ) ; }
Distance : 12

75
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . getParameterTypes ( RETURNS_DEFAULTS ) ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . getParameterTypes ( RETURNS_DEFAULTS ) ; }
Distance : 12

76
Tree	{ return ( List ) languageMode . getParameterTypes ( iValues ) ; }
Code	{ return ( List ) languageMode . getParameterTypes ( iValues ) ; }
Distance : 9

77
Tree	{ return ( List ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) ; }
Distance : 7

78
Tree	{ return ( List ) getInterceptor ( Any.ANY ) ; }
Code	{ return ( List ) getInterceptor ( Any.ANY ) ; }
Distance : 7

79
Tree	{ return ( List ) reportMatcher ( RETURNS_DEFAULTS ) . getDeclaredType () ; }
Code	{ return ( List ) reportMatcher ( RETURNS_DEFAULTS ) . getDeclaredType () ; }
Distance : 9

80
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . isNotEqualTo () ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . isNotEqualTo () ; }
Distance : 9

81
Tree	{ checkNotNull () ; return null ; }
Code	{ checkNotNull () ; return null ; }
Distance : 5

82
Tree	{ return defaultString ( Any.ANY ) ; }
Code	{ return defaultString ( Any.ANY ) ; }
Distance : 4

83
Tree	{ return ( List ) reportMatcher ( Object . getParameterTypes () ) ; }
Code	{ return ( List ) reportMatcher ( Object . getParameterTypes () ) ; }
Distance : 9

84
Tree	{ return ( List ) reportMatcher ( nSteps . getParameterTypes () ) ; }
Code	{ return ( List ) reportMatcher ( nSteps . getParameterTypes () ) ; }
Distance : 9

85
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; initializeBuiltInTypes () ; super }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; initializeBuiltInTypes () ; super }
Distance : 7

86
Tree	{ return ( List ) languageMode . getParameterTypes ( array ) ; }
Code	{ return ( List ) languageMode . getParameterTypes ( array ) ; }
Distance : 9

87
Tree	{ return ( List ) getMockSettings () ; }
Code	{ return ( List ) getMockSettings () ; }
Distance : 4

88
Tree	{ return ( List ) reportMatcher ( iValues . getParameterTypes () ) ; }
Code	{ return ( List ) reportMatcher ( iValues . getParameterTypes () ) ; }
Distance : 9

89
Tree	{ return getCSVClone () ; }
Code	{ return getCSVClone () ; }
Distance : 1

90
Tree	{ return mapToSelf () ; }
Code	{ return mapToSelf () ; }
Distance : 1

91
Tree	{ return ( List ) reportMatcher ( Any.ANY ) . getMethodProxy () ; }
Code	{ return ( List ) reportMatcher ( Any.ANY ) . getMethodProxy () ; }
Distance : 9

92
Tree	{ return chunker ; }
Code	{ return chunker ; }
Distance : 2

93
Tree	{ return checkNotNull () ; }
Code	{ return checkNotNull () ; }
Distance : 1

94
Tree	{ return getCumFreq () ; }
Code	{ return getCumFreq () ; }
Distance : 1

95
Tree	{ return ( List ) reportMatcher ( RETURNS_DEFAULTS ) . getParameterTypes () ; }
Code	{ return ( List ) reportMatcher ( RETURNS_DEFAULTS ) . getParameterTypes () ; }
Distance : 9

96
Tree	{ return ( List ) languageMode . setTypeValidationEnabled () ; }
Code	{ return ( List ) languageMode . setTypeValidationEnabled () ; }
Distance : 6

97
Tree	{ return ( List ) languageMode . getCanonicalName () ; }
Code	{ return ( List ) languageMode . getCanonicalName () ; }
Distance : 6

98
Tree	{ return verify ; }
Code	{ return verify ; }
Distance : 2

99
Tree	{ List . verify ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Code	{ List . verify ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Distance : 9

100
Tree	{ return ( List ) anyObject () ; }
Code	{ return ( List ) anyObject () ; }
Distance : 4

101
Tree	{ return ( List ) reportMatcher ( iValues ) . getDeclaredType () ; }
Code	{ return ( List ) reportMatcher ( iValues ) . getDeclaredType () ; }
Distance : 9

102
Tree	{ super ( DateTimeFieldType ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Code	{ super ( DateTimeFieldType ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Distance : 9

103
Tree	{ assertEquals () ; return null ; }
Code	{ assertEquals () ; return null ; }
Distance : 5

104
Tree	{ super ( DateTimeFieldType ) ; initializeBuiltInTypes () ; }
Code	{ super ( DateTimeFieldType ) ; initializeBuiltInTypes () ; }
Distance : 6

105
Tree	{ return getFragment ( Any.ANY ) ; }
Code	{ return getFragment ( Any.ANY ) ; }
Distance : 4

106
Tree	{ return ( List ) reportMatcher ( Object ) . getParameterTypes () ; }
Code	{ return ( List ) reportMatcher ( Object ) . getParameterTypes () ; }
Distance : 9

107
Tree	{ return ( List ) languageMode . getHandler () ; }
Code	{ return ( List ) languageMode . getHandler () ; }
Distance : 6

108
Tree	{ return ( List ) languageMode . getMethodProxy () ; }
Code	{ return ( List ) languageMode . getMethodProxy () ; }
Distance : 6

109
Tree	{ return ( List ) languageMode . setCallback () ; }
Code	{ return ( List ) languageMode . setCallback () ; }
Distance : 6

110
Tree	{ reportMatcher ( Any.ANY ) ; initializeBuiltInTypes () ; super }
Code	{ reportMatcher ( Any.ANY ) ; initializeBuiltInTypes () ; super }
Distance : 7

111
Tree	{ return ( List ) object . getParameterTypes () ; }
Code	{ return ( List ) object . getParameterTypes () ; }
Distance : 6

112
Tree	{ return getCSVClone ( Any.ANY ) ; }
Code	{ return getCSVClone ( Any.ANY ) ; }
Distance : 4

113
Tree	{ return mapToSelf ( Any.ANY ) ; }
Code	{ return mapToSelf ( Any.ANY ) ; }
Distance : 4

114
Tree	{ return ( Object ) reportMatcher () ; }
Code	{ return ( Object ) reportMatcher () ; }
Distance : 4

115
Tree	{ return ( DateTimeFieldType ) reportMatcher () ; }
Code	{ return ( DateTimeFieldType ) reportMatcher () ; }
Distance : 4

116
Tree	{ recordImplicitInterfaceUses () ; return null ; }
Code	{ recordImplicitInterfaceUses () ; return null ; }
Distance : 5

117
Tree	{ return checkNotNull ( Any.ANY ) ; }
Code	{ return checkNotNull ( Any.ANY ) ; }
Distance : 4

118
Tree	{ return ( List ) this . legendItemGraphicEdge . getParameterTypes () ; }
Code	{ return ( List ) this . legendItemGraphicEdge . getParameterTypes () ; }
Distance : 8

119
Tree	{ return ( List ) reportMatcher ( Null.NULL ) ; }
Code	{ return ( List ) reportMatcher ( Null.NULL ) ; }
Distance : 7

120
Tree	{ super ( DateTimeFieldType ) ; setTolerance () ; }
Code	{ super ( DateTimeFieldType ) ; setTolerance () ; }
Distance : 6

121
Tree	{ return ( List ) getInterceptor () ; }
Code	{ return ( List ) getInterceptor () ; }
Distance : 4

122
Tree	{ return anyObject ( Any.ANY ) ; }
Code	{ return anyObject ( Any.ANY ) ; }
Distance : 4

123
Tree	{ return ( Object ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Object ) reportMatcher ( Any.ANY ) ; }
Distance : 7

124
Tree	{ mockingProgress ( Any.ANY ) ; initializeBuiltInTypes () ; super }
Code	{ mockingProgress ( Any.ANY ) ; initializeBuiltInTypes () ; super }
Distance : 7

125
Tree	{ printTo () ; return null ; }
Code	{ printTo () ; return null ; }
Distance : 5

126
Tree	{ return getCumFreq ( Any.ANY ) ; }
Code	{ return getCumFreq ( Any.ANY ) ; }
Distance : 4

127
Tree	{ super ( DateTimeFieldType ) ; checkShortName () ; }
Code	{ super ( DateTimeFieldType ) ; checkShortName () ; }
Distance : 6

128
Tree	{ super ( DateTimeFieldType ) ; setTolerance ( Any.ANY ) ; }
Code	{ super ( DateTimeFieldType ) ; setTolerance ( Any.ANY ) ; }
Distance : 9

129
Tree	{ super ( DateTimeFieldType ) ; expectErrors () ; }
Code	{ super ( DateTimeFieldType ) ; expectErrors () ; }
Distance : 6

130
Tree	{ reportMatcher ( Any.ANY , CheckMissingReturn.MISSING_RETURN_STATEMENT ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , CheckMissingReturn.MISSING_RETURN_STATEMENT ) ; return null ; }
Distance : 9

131
Tree	{ super ( DateTimeFieldType . join ( nSteps ) ) ; initializeBuiltInTypes () ; }
Code	{ super ( DateTimeFieldType . join ( nSteps ) ) ; initializeBuiltInTypes () ; }
Distance : 11

132
Tree	{ List . verify ( LanguageMode.ECMASCRIPT_2015 ) ; return null ; }
Code	{ List . verify ( LanguageMode.ECMASCRIPT_2015 ) ; return null ; }
Distance : 9

133
Tree	{ return ( List ) languageMode . toDuration () ; }
Code	{ return ( List ) languageMode . toDuration () ; }
Distance : 6

134
Tree	{ List . times ( Any.ANY ) ; return null ; }
Code	{ List . times ( Any.ANY ) ; return null ; }
Distance : 9

135
Tree	{ return ( List ) reportMatcher ( initializeCalls . getParameterTypes () ) ; }
Code	{ return ( List ) reportMatcher ( initializeCalls . getParameterTypes () ) ; }
Distance : 9

136
Tree	{ return ( List ) reportMatcher ( NotNull.NOT_NULL ) ; }
Code	{ return ( List ) reportMatcher ( NotNull.NOT_NULL ) ; }
Distance : 7

137
Tree	{ List . verify ( Null.NULL ) ; return null ; }
Code	{ List . verify ( Null.NULL ) ; return null ; }
Distance : 9

138
Tree	{ return reportMatcher ( Any.ANY ) . getMethodProxy () ; }
Code	{ return reportMatcher ( Any.ANY ) . getMethodProxy () ; }
Distance : 6

139
Tree	{ List . println ( Any.ANY ) ; return null ; }
Code	{ List . println ( Any.ANY ) ; return null ; }
Distance : 9

140
Tree	{ return reportMatcher ( List ) . getMethodProxy () ; }
Code	{ return reportMatcher ( List ) . getMethodProxy () ; }
Distance : 6

141
Tree	{ return matchers ; }
Code	{ return matchers ; }
Distance : 2

142
Tree	{ return ( List ) testScopedError () ; }
Code	{ return ( List ) testScopedError () ; }
Distance : 4

143
Tree	{ super ( List . join ( nSteps ) ) ; setTolerance () ; }
Code	{ super ( List . join ( nSteps ) ) ; setTolerance () ; }
Distance : 11

144
Tree	{ super ( List ) ; initializeBuiltInTypes () ; }
Code	{ super ( List ) ; initializeBuiltInTypes () ; }
Distance : 6

145
Tree	{ return ( List ) reportMatcher ( T . getParameterTypes () ) ; }
Code	{ return ( List ) reportMatcher ( T . getParameterTypes () ) ; }
Distance : 9

146
Tree	{ return ( List ) languageMode () ; }
Code	{ return ( List ) languageMode () ; }
Distance : 4

147
Tree	{ return null ; }
Code	{ return null ; }
Distance : 2

148
Tree	{ super ( DateTimeFieldType ) ; enableParseTypeInfo ( Any.ANY ) ; }
Code	{ super ( DateTimeFieldType ) ; enableParseTypeInfo ( Any.ANY ) ; }
Distance : 9

149
Tree	{ reportMatcher ( Any.ANY , other.liveSet ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , other.liveSet ) ; return null ; }
Distance : 9

150
Tree	{ reportMatcher ( Any.ANY , toBeExposed.realMethod ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , toBeExposed.realMethod ) ; return null ; }
Distance : 9

151
Tree	{ return reportMatcher ( List ) . validateFor () ; }
Code	{ return reportMatcher ( List ) . validateFor () ; }
Distance : 6

152
Tree	{ return ( List ) this . reloadClassPredicate . getParameterTypes () ; }
Code	{ return ( List ) this . reloadClassPredicate . getParameterTypes () ; }
Distance : 8

153
Tree	{ super ( List ) ; setTolerance () ; }
Code	{ super ( List ) ; setTolerance () ; }
Distance : 6

154
Tree	{ reportMatcher ( Any.ANY , oldMockHandler.matchersBinder ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , oldMockHandler.matchersBinder ) ; return null ; }
Distance : 9

155
Tree	{ return reportMatcher ( List ) . setTypeValidationEnabled () ; }
Code	{ return reportMatcher ( List ) . setTypeValidationEnabled () ; }
Distance : 6

156
Tree	{ return reportMatcher ( List ) . thenCallRealMethod () ; }
Code	{ return reportMatcher ( List ) . thenCallRealMethod () ; }
Distance : 6

157
Tree	{ reportMatcher ( Any.ANY ) ; expectErrors () ; super }
Code	{ reportMatcher ( Any.ANY ) ; expectErrors () ; super }
Distance : 7

158
Tree	{ return ( List ) this . itemFont . getParameterTypes () ; }
Code	{ return ( List ) this . itemFont . getParameterTypes () ; }
Distance : 8

159
Tree	{ return ( List ) reportMatcher ( map . getParameterTypes () ) ; }
Code	{ return ( List ) reportMatcher ( map . getParameterTypes () ) ; }
Distance : 9

160
Tree	{ reportMatcher ( Any.ANY ) ; setTolerance () ; super }
Code	{ reportMatcher ( Any.ANY ) ; setTolerance () ; super }
Distance : 7

161
Tree	{ return reportMatcher ( Any.ANY ) . disallowGlobalThis () ; }
Code	{ return reportMatcher ( Any.ANY ) . disallowGlobalThis () ; }
Distance : 6

162
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 2

163
Tree	{ reportMatcher ( Any.ANY , ReplaceIdGenerators.INVALID_GENERATOR_PARAMETER ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , ReplaceIdGenerators.INVALID_GENERATOR_PARAMETER ) ; return null ; }
Distance : 9

164
Tree	{ reportMatcher ( Any.ANY , spiedReceiver.tuner ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , spiedReceiver.tuner ) ; return null ; }
Distance : 9

165
Tree	{ return reportMatcher ( List ) . getParameterTypes () ; }
Code	{ return reportMatcher ( List ) . getParameterTypes () ; }
Distance : 6

166
Tree	{ super ( DateTimeFieldType . argumentsToMatchers ( nSteps ) ) ; setTolerance () ; }
Code	{ super ( DateTimeFieldType . argumentsToMatchers ( nSteps ) ) ; setTolerance () ; }
Distance : 11

167
Tree	{ return ( List ) this . checkTypes . getParameterTypes () ; }
Code	{ return ( List ) this . checkTypes . getParameterTypes () ; }
Distance : 8

168
Tree	{ return MockitoCore ; }
Code	{ return MockitoCore ; }
Distance : 2

169
Tree	{ return reportMatcher ( Any.ANY ) . getParameterTypes () ; }
Code	{ return reportMatcher ( Any.ANY ) . getParameterTypes () ; }
Distance : 6

170
Tree	{ super ( DateTimeFieldType ) ; testScopedNoChanges ( Any.ANY ) ; }
Code	{ super ( DateTimeFieldType ) ; testScopedNoChanges ( Any.ANY ) ; }
Distance : 9

171
Tree	{ return Mockito ; }
Code	{ return Mockito ; }
Distance : 2

172
Tree	{ return ( List ) reportMatcher ( array ) . getParameterTypes () ; }
Code	{ return ( List ) reportMatcher ( array ) . getParameterTypes () ; }
Distance : 9

173
Tree	{ super ( DateTimeFieldType . join ( nSteps ) ) ; setTolerance () ; }
Code	{ super ( DateTimeFieldType . join ( nSteps ) ) ; setTolerance () ; }
Distance : 11

174
Tree	{ super ( DateTimeFieldType . join ( RETURNS_DEFAULTS ) ) ; setTolerance () ; }
Code	{ super ( DateTimeFieldType . join ( RETURNS_DEFAULTS ) ) ; setTolerance () ; }
Distance : 11

175
Tree	{ super ( DateTimeFieldType ) ; testScopedNoChanges () ; }
Code	{ super ( DateTimeFieldType ) ; testScopedNoChanges () ; }
Distance : 6

176
Tree	{ super ( DateTimeFieldType ) ; expectErrors ( Any.ANY ) ; }
Code	{ super ( DateTimeFieldType ) ; expectErrors ( Any.ANY ) ; }
Distance : 9

177
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; setTolerance () ; super }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; setTolerance () ; super }
Distance : 7

178
Tree	{ super ( DateTimeFieldType ) ; enableParseTypeInfo () ; }
Code	{ super ( DateTimeFieldType ) ; enableParseTypeInfo () ; }
Distance : 6

179
Tree	{ super ( DateTimeFieldType . argumentsToMatchers ( nSteps ) ) ; initializeBuiltInTypes () ; }
Code	{ super ( DateTimeFieldType . argumentsToMatchers ( nSteps ) ) ; initializeBuiltInTypes () ; }
Distance : 11

180
Tree	{ super ( DateTimeFieldType . join ( nSteps ) ) ; enableParseTypeInfo () ; }
Code	{ super ( DateTimeFieldType . join ( nSteps ) ) ; enableParseTypeInfo () ; }
Distance : 11

181
Tree	{ List . getAllValues ( Any.ANY ) ; return null ; }
Code	{ List . getAllValues ( Any.ANY ) ; return null ; }
Distance : 9

182
Tree	{ mockingProgress ( Any.ANY ) ; setTolerance () ; super }
Code	{ mockingProgress ( Any.ANY ) ; setTolerance () ; super }
Distance : 7

183
Tree	{ return VerificationModeImpl ; }
Code	{ return VerificationModeImpl ; }
Distance : 2

184
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 2

185
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 2

186
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 2

187
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 2

188
Tree	{ checkNotNull ( Any.ANY ) ; initializeBuiltInTypes () ; super }
Code	{ checkNotNull ( Any.ANY ) ; initializeBuiltInTypes () ; super }
Distance : 7

189
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 3

190
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 3

191
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 3

192
Tree	{ List . verifyValues ( Any.ANY ) ; return null ; }
Code	{ List . verifyValues ( Any.ANY ) ; return null ; }
Distance : 9

193
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 3

194
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 2

195
Tree	{ return STRING_CONSTANT ; } mock
Code	{ return STRING_CONSTANT ; } mock
Distance : 3

196
Tree	{ return STRING_CONSTANT ; } MathRuntimeException
Code	{ return STRING_CONSTANT ; } MathRuntimeException
Distance : 3

197
Tree	{ return STRING_CONSTANT ; } Override
Code	{ return STRING_CONSTANT ; } Override
Distance : 3

198
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 3

199
Tree	{ return STRING_CONSTANT ; } f
Code	{ return STRING_CONSTANT ; } f
Distance : 3

========================================================================


========================================================================
Example Number: 94
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnList () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( List . class ) ) . returnList () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=List})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnList}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ super ( Foo ) ; }
Code	{ super ( Foo ) ; }
Distance : 12

1
Tree	{ reportMatcher ( Any.ANY ) . disallowGlobalThis () ; enableUnusedLocalAssignmentCheck = false ; }
Code	{ reportMatcher ( Any.ANY ) . disallowGlobalThis () ; enableUnusedLocalAssignmentCheck = false ; }
Distance : 11

2
Tree	{ super ( DateTimeFieldType ) ; }
Code	{ super ( DateTimeFieldType ) ; }
Distance : 12

3
Tree	{ return ( T ) getInterceptor () ; }
Code	{ return ( T ) getInterceptor () ; }
Distance : 10

4
Tree	{ return ( T ) getCanonicalName () ; }
Code	{ return ( T ) getCanonicalName () ; }
Distance : 10

5
Tree	{ reportMatcher ( Any.ANY ) . getPeriod () ; stopWatch = false ; }
Code	{ reportMatcher ( Any.ANY ) . getPeriod () ; stopWatch = false ; }
Distance : 11

6
Tree	{ super ( matcher ) ; }
Code	{ super ( matcher ) ; }
Distance : 12

7
Tree	{ reportMatcher ( Any.ANY ) ; this . sublabelFont = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . sublabelFont = Any.ANY ; }
Distance : 11

8
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; enableUnusedLocalAssignmentCheck = false ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; enableUnusedLocalAssignmentCheck = false ; }
Distance : 11

9
Tree	{ reportMatcher ( Any.ANY ) ; this . legendItemPaint = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . legendItemPaint = Any.ANY ; }
Distance : 11

10
Tree	{ return ( T ) eat () ; }
Code	{ return ( T ) eat () ; }
Distance : 10

11
Tree	{ super ( matcher ) ; setTolerance ( Any.ANY ) ; }
Code	{ super ( matcher ) ; setTolerance ( Any.ANY ) ; }
Distance : 12

12
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return false ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return false ; }
Distance : 11

13
Tree	{ reportMatcher ( Any.ANY ) ; this . labelAnchor = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . labelAnchor = Any.ANY ; }
Distance : 11

14
Tree	{ return ( T ) getMethodProxy ( Any.ANY ) . getPeriod () ; }
Code	{ return ( T ) getMethodProxy ( Any.ANY ) . getPeriod () ; }
Distance : 9

15
Tree	{ return ( T ) disallowGlobalThis ( Any.ANY ) ; }
Code	{ return ( T ) disallowGlobalThis ( Any.ANY ) ; }
Distance : 11

16
Tree	{ return ( T ) getMethodProxy ( Any.ANY ) . inIncrementalCheckMode () ; }
Code	{ return ( T ) getMethodProxy ( Any.ANY ) . inIncrementalCheckMode () ; }
Distance : 9

17
Tree	{ return ( T ) setCallback ( Any.ANY ) . returnZero () ; }
Code	{ return ( T ) setCallback ( Any.ANY ) . returnZero () ; }
Distance : 9

18
Tree	{ reportMatcher ( Null.NULL ) ; return null ; }
Code	{ reportMatcher ( Null.NULL ) ; return null ; }
Distance : 11

19
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return null ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return null ; }
Distance : 11

20
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

21
Tree	{ reportMatcher ( NotNull.NOT_NULL ) ; return null ; }
Code	{ reportMatcher ( NotNull.NOT_NULL ) ; return null ; }
Distance : 11

22
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

23
Tree	{ return ( T ) getMethodProxy ( Any.ANY ) . getDeclaredType () ; }
Code	{ return ( T ) getMethodProxy ( Any.ANY ) . getDeclaredType () ; }
Distance : 9

24
Tree	{ return ( T ) setCallback ( Any.ANY ) ; }
Code	{ return ( T ) setCallback ( Any.ANY ) ; }
Distance : 11

25
Tree	{ super ( T ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Code	{ super ( T ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Distance : 12

26
Tree	{ super ( object ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Code	{ super ( object ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Distance : 12

27
Tree	{ return ( T ) eat ( Any.ANY ) . getDeclaredType () ; }
Code	{ return ( T ) eat ( Any.ANY ) . getDeclaredType () ; }
Distance : 9

28
Tree	{ return this . allowed ; }
Code	{ return this . allowed ; }
Distance : 12

29
Tree	{ super ( classToMock ) ; setTolerance ( Any.ANY ) ; }
Code	{ super ( classToMock ) ; setTolerance ( Any.ANY ) ; }
Distance : 12

30
Tree	{ super ( T ) ; initializeBuiltInTypes ( Any.ANY ) . isNotEqualTo () ; }
Code	{ super ( T ) ; initializeBuiltInTypes ( Any.ANY ) . isNotEqualTo () ; }
Distance : 10

31
Tree	{ super ( object ) ; initializeBuiltInTypes ( Any.ANY ) . isNotEqualTo () ; }
Code	{ super ( object ) ; initializeBuiltInTypes ( Any.ANY ) . isNotEqualTo () ; }
Distance : 10

32
Tree	{ reportMatcher ( Any.ANY ) ; this . legendItemGraphicEdge = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . legendItemGraphicEdge = Any.ANY ; super }
Distance : 12

33
Tree	{ return reportMatcher ( Any.ANY ) . < delegate > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < delegate > reportMatcher () ; }
Distance : 9

34
Tree	{ reportMatcher ( Any.ANY ) . disallowGlobalThis () ; enableUnusedLocalAssignmentCheck = problem.y ; }
Code	{ reportMatcher ( Any.ANY ) . disallowGlobalThis () ; enableUnusedLocalAssignmentCheck = problem.y ; }
Distance : 11

35
Tree	{ reportMatcher ( Any.ANY ) ; this . negativeBarPaint = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . negativeBarPaint = Any.ANY ; }
Distance : 11

36
Tree	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return null ; }
Code	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return null ; }
Distance : 11

37
Tree	{ return ( T ) eat ( Any.ANY ) ; }
Code	{ return ( T ) eat ( Any.ANY ) ; }
Distance : 11

38
Tree	{ reportMatcher ( v.data ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( v.data ) ; return NUMBER_CONSTANT ; }
Distance : 11

39
Tree	{ return this . MockitoCore ; }
Code	{ return this . MockitoCore ; }
Distance : 12

40
Tree	{ reportMatcher ( Any.ANY ) . getMethodProxy () ; enableUnusedLocalAssignmentCheck = problem.y ; }
Code	{ reportMatcher ( Any.ANY ) . getMethodProxy () ; enableUnusedLocalAssignmentCheck = problem.y ; }
Distance : 11

41
Tree	{ return ( T ) getMethodProxy () ; }
Code	{ return ( T ) getMethodProxy () ; }
Distance : 10

42
Tree	{ return ( T ) setCallback ( Any.ANY ) . getDeclaredType () ; }
Code	{ return ( T ) setCallback ( Any.ANY ) . getDeclaredType () ; }
Distance : 9

43
Tree	{ return ( T ) getParameterTypes ( Any.ANY ) ; }
Code	{ return ( T ) getParameterTypes ( Any.ANY ) ; }
Distance : 11

44
Tree	{ return ( T ) getStubbingLookupListeners ( Any.ANY ) ; }
Code	{ return ( T ) getStubbingLookupListeners ( Any.ANY ) ; }
Distance : 11

45
Tree	{ reportMatcher ( Any.ANY ) ; this . legendItemGraphicEdge = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . legendItemGraphicEdge = Any.ANY ; }
Distance : 11

46
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

47
Tree	{ super ( T ) ; initializeBuiltInTypes ( Any.ANY ) . returnZero () ; }
Code	{ super ( T ) ; initializeBuiltInTypes ( Any.ANY ) . returnZero () ; }
Distance : 10

48
Tree	{ super ( object ) ; initializeBuiltInTypes ( Any.ANY ) . returnZero () ; }
Code	{ super ( object ) ; initializeBuiltInTypes ( Any.ANY ) . returnZero () ; }
Distance : 10

49
Tree	{ super ( classToMock ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Code	{ super ( classToMock ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Distance : 12

50
Tree	{ super ( classToMock ) ; }
Code	{ super ( classToMock ) ; }
Distance : 12

51
Tree	{ return reportMatcher ( Any.ANY ) . getDeclaredType () ; }
Code	{ return reportMatcher ( Any.ANY ) . getDeclaredType () ; }
Distance : 8

52
Tree	{ super ( T ) ; setTolerance ( Any.ANY ) . returnZero () ; }
Code	{ super ( T ) ; setTolerance ( Any.ANY ) . returnZero () ; }
Distance : 10

53
Tree	{ reportMatcher ( Any.ANY ) ; this . labelAnchor = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . labelAnchor = Any.ANY ; super }
Distance : 12

54
Tree	{ reportMatcher ( Any.ANY ) . getPeriod () ; currentDerivative = problem.y ; }
Code	{ reportMatcher ( Any.ANY ) . getPeriod () ; currentDerivative = problem.y ; }
Distance : 11

55
Tree	{ super ( object ) ; setTolerance ( Any.ANY ) . returnZero () ; }
Code	{ super ( object ) ; setTolerance ( Any.ANY ) . returnZero () ; }
Distance : 10

56
Tree	{ reportMatcher ( Any.ANY ) ; return true ; }
Code	{ reportMatcher ( Any.ANY ) ; return true ; }
Distance : 11

57
Tree	{ super ( T ) ; initializeBuiltInTypes ( Any.ANY ) . getDeclaredType () ; }
Code	{ super ( T ) ; initializeBuiltInTypes ( Any.ANY ) . getDeclaredType () ; }
Distance : 10

58
Tree	{ super ( matcher ) ; initializeBuiltInTypes ( Any.ANY ) ; super }
Code	{ super ( matcher ) ; initializeBuiltInTypes ( Any.ANY ) ; super }
Distance : 13

59
Tree	{ super ( object ) ; initializeBuiltInTypes ( Any.ANY ) . getDeclaredType () ; }
Code	{ super ( object ) ; initializeBuiltInTypes ( Any.ANY ) . getDeclaredType () ; }
Distance : 10

60
Tree	{ return reportMatcher ( Any.ANY ) . getPeriod () ; }
Code	{ return reportMatcher ( Any.ANY ) . getPeriod () ; }
Distance : 8

61
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Distance : 11

62
Tree	{ reportMatcher ( Any.ANY ) . getMethodProxy () ; enableUnusedLocalAssignmentCheck = false ; }
Code	{ reportMatcher ( Any.ANY ) . getMethodProxy () ; enableUnusedLocalAssignmentCheck = false ; }
Distance : 11

63
Tree	{ reportMatcher ( Any.ANY ) . getPeriod () ; currentDerivative = false ; }
Code	{ reportMatcher ( Any.ANY ) . getPeriod () ; currentDerivative = false ; }
Distance : 11

64
Tree	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return NUMBER_CONSTANT ; }
Distance : 11

65
Tree	{ return reportMatcher ( Any.ANY ) . getMethodProxy () ; }
Code	{ return reportMatcher ( Any.ANY ) . getMethodProxy () ; }
Distance : 8

66
Tree	{ reportMatcher ( Any.ANY ) ; this . legendBackgroundPaint = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . legendBackgroundPaint = Any.ANY ; super }
Distance : 12

67
Tree	{ super ( matcher ) ; setTolerance ( Any.ANY ) ; super }
Code	{ super ( matcher ) ; setTolerance ( Any.ANY ) ; super }
Distance : 13

68
Tree	{ return reportMatcher ( Any.ANY ) . disallowGlobalThis () ; }
Code	{ return reportMatcher ( Any.ANY ) . disallowGlobalThis () ; }
Distance : 8

69
Tree	{ return reportMatcher ( Any.ANY ) . getParameterTypes () ; }
Code	{ return reportMatcher ( Any.ANY ) . getParameterTypes () ; }
Distance : 8

70
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

71
Tree	{ reportMatcher ( Any.ANY ) ; expectedStepStart = false ; }
Code	{ reportMatcher ( Any.ANY ) ; expectedStepStart = false ; }
Distance : 11

72
Tree	{ reportMatcher ( Any.ANY ) ; providedNamespaces = problem.y . getParameterTypes () ; }
Code	{ reportMatcher ( Any.ANY ) ; providedNamespaces = problem.y . getParameterTypes () ; }
Distance : 10

73
Tree	{ return reportMatcher ( Any.ANY ) . voidMethod () ; }
Code	{ return reportMatcher ( Any.ANY ) . voidMethod () ; }
Distance : 8

74
Tree	{ super ( T ) ; initializeBuiltInTypes ( Any.ANY ) ; super }
Code	{ super ( T ) ; initializeBuiltInTypes ( Any.ANY ) ; super }
Distance : 13

75
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

76
Tree	{ super ( classToMock ) ; initializeBuiltInTypes ( Any.ANY ) ; super }
Code	{ super ( classToMock ) ; initializeBuiltInTypes ( Any.ANY ) ; super }
Distance : 13

77
Tree	{ reportMatcher ( Any.ANY ) ; this . negativeBarPaint = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . negativeBarPaint = Any.ANY ; super }
Distance : 12

78
Tree	{ super ( object ) ; initializeBuiltInTypes ( Any.ANY ) ; super }
Code	{ super ( object ) ; initializeBuiltInTypes ( Any.ANY ) ; super }
Distance : 13

79
Tree	{ return this . mockSettings ; }
Code	{ return this . mockSettings ; }
Distance : 12

80
Tree	{ return reportMatcher ( Any.ANY ) . isNotEqualTo () ; }
Code	{ return reportMatcher ( Any.ANY ) . isNotEqualTo () ; }
Distance : 8

81
Tree	{ super ( matcher ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Code	{ super ( matcher ) ; initializeBuiltInTypes ( Any.ANY ) ; }
Distance : 12

82
Tree	{ return reportMatcher ( Any.ANY ) . < minPrecedence > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < minPrecedence > reportMatcher () ; }
Distance : 9

83
Tree	{ super ( object ) ; }
Code	{ super ( object ) ; }
Distance : 12

84
Tree	{ reportMatcher ( Any.ANY ) ; copiedList = false ; }
Code	{ reportMatcher ( Any.ANY ) ; copiedList = false ; }
Distance : 11

85
Tree	{ super ( classToMock ) ; setTolerance ( Any.ANY ) ; super }
Code	{ super ( classToMock ) ; setTolerance ( Any.ANY ) ; super }
Distance : 13

86
Tree	{ return ( T ) getInterceptor ( Any.ANY ) ; }
Code	{ return ( T ) getInterceptor ( Any.ANY ) ; }
Distance : 11

87
Tree	{ reportMatcher ( Any.ANY ) ; maxTimeError = false ; }
Code	{ reportMatcher ( Any.ANY ) ; maxTimeError = false ; }
Distance : 11

88
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

89
Tree	{ return ( T ) disallowGlobalThis () ; }
Code	{ return ( T ) disallowGlobalThis () ; }
Distance : 10

90
Tree	{ return this . classToMock ; }
Code	{ return this . classToMock ; }
Distance : 12

91
Tree	{ reportMatcher ( Any.ANY ) ; this . unknownTypeNames = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . unknownTypeNames = Any.ANY ; super }
Distance : 12

92
Tree	{ super ( mockSettings ) ; }
Code	{ super ( mockSettings ) ; }
Distance : 12

93
Tree	{ testTypes ( Any.ANY ) ; return null ; }
Code	{ testTypes ( Any.ANY ) ; return null ; }
Distance : 12

94
Tree	{ return this . mode ; }
Code	{ return this . mode ; }
Distance : 12

95
Tree	{ return this . matcher ; }
Code	{ return this . matcher ; }
Distance : 12

96
Tree	{ return ( T ) getCanonicalName ( Any.ANY ) ; }
Code	{ return ( T ) getCanonicalName ( Any.ANY ) ; }
Distance : 11

97
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return NUMBER_CONSTANT ; }
Distance : 11

98
Tree	{ reportMatcher ( Any.ANY ) ; this . unknownTypeNames = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . unknownTypeNames = Any.ANY ; }
Distance : 11

99
Tree	{ return ( T ) getMethodProxy ( Any.ANY ) ; }
Code	{ return ( T ) getMethodProxy ( Any.ANY ) ; }
Distance : 11

100
Tree	{ reportMatcher ( Any.ANY ) ; this . legendBackgroundPaint = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . legendBackgroundPaint = Any.ANY ; }
Distance : 11

101
Tree	{ return this . RETURNS_DEFAULTS ; }
Code	{ return this . RETURNS_DEFAULTS ; }
Distance : 12

102
Tree	{ reportMatcher ( v.data ) ; return null ; }
Code	{ reportMatcher ( v.data ) ; return null ; }
Distance : 11

103
Tree	{ reportMatcher ( Any.ANY ) ; propertyRenaming = false ; }
Code	{ reportMatcher ( Any.ANY ) ; propertyRenaming = false ; }
Distance : 11

104
Tree	{ return reportMatcher ( Any.ANY ) . < ARROW_FN > returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . < ARROW_FN > returnNull () ; }
Distance : 9

105
Tree	{ reportMatcher ( Any.ANY ) ; this . advanceLinePaint = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . advanceLinePaint = Any.ANY ; }
Distance : 11

106
Tree	{ super ( T ) ; setTolerance ( Any.ANY ) ; super }
Code	{ super ( T ) ; setTolerance ( Any.ANY ) ; super }
Distance : 13

107
Tree	{ super ( object ) ; setTolerance ( Any.ANY ) ; super }
Code	{ super ( object ) ; setTolerance ( Any.ANY ) ; super }
Distance : 13

108
Tree	{ return this . object ; }
Code	{ return this . object ; }
Distance : 12

109
Tree	{ reportMatcher ( Any.ANY ) ; this . advanceLinePaint = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . advanceLinePaint = Any.ANY ; super }
Distance : 12

110
Tree	{ return ( T ) getParameterTypes () ; }
Code	{ return ( T ) getParameterTypes () ; }
Distance : 10

111
Tree	{ return ( T ) getStubbingLookupListeners () ; }
Code	{ return ( T ) getStubbingLookupListeners () ; }
Distance : 10

112
Tree	{ super ( T ) ; setTolerance ( Any.ANY ) ; }
Code	{ super ( T ) ; setTolerance ( Any.ANY ) ; }
Distance : 12

113
Tree	{ reportMatcher ( Any.ANY ) ; strictOrderVerifier = false ; }
Code	{ reportMatcher ( Any.ANY ) ; strictOrderVerifier = false ; }
Distance : 11

114
Tree	{ return reportMatcher ( Any.ANY ) . < delegate > returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . < delegate > returnNull () ; }
Distance : 9

115
Tree	{ reportMatcher ( Any.ANY ) ; providedNamespaces = problem.y . getMethodProxy () ; }
Code	{ reportMatcher ( Any.ANY ) ; providedNamespaces = problem.y . getMethodProxy () ; }
Distance : 10

116
Tree	{ return reportMatcher ( Any.ANY ) . < ARROW_FN > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < ARROW_FN > reportMatcher () ; }
Distance : 9

117
Tree	{ reportMatcher ( Any.ANY ) ; this . sublabelFont = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . sublabelFont = Any.ANY ; super }
Distance : 12

118
Tree	{ super ( object ) ; setTolerance ( Any.ANY ) ; }
Code	{ super ( object ) ; setTolerance ( Any.ANY ) ; }
Distance : 12

119
Tree	{ reportMatcher ( Any.ANY ) . disallowGlobalThis () ; stopWatch = false ; }
Code	{ reportMatcher ( Any.ANY ) . disallowGlobalThis () ; stopWatch = false ; }
Distance : 11

120
Tree	{ reportMatcher ( Any.ANY ) ; providedNamespaces = problem.y . getAlternatesWithoutStructuralTyping () ; }
Code	{ reportMatcher ( Any.ANY ) ; providedNamespaces = problem.y . getAlternatesWithoutStructuralTyping () ; }
Distance : 10

121
Tree	{ reportMatcher ( Any.ANY ) . disallowGlobalThis () ; this . legendItemGraphicEdge = null ; }
Code	{ reportMatcher ( Any.ANY ) . disallowGlobalThis () ; this . legendItemGraphicEdge = null ; }
Distance : 12

122
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . legendItemGraphicEdge = null ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . legendItemGraphicEdge = null ; }
Distance : 12

123
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; stopWatch = false ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; stopWatch = false ; }
Distance : 11

124
Tree	{ reportMatcher ( Any.ANY ) . getPeriod () ; this . legendItemGraphicEdge = null ; }
Code	{ reportMatcher ( Any.ANY ) . getPeriod () ; this . legendItemGraphicEdge = null ; }
Distance : 12

125
Tree	{ reportMatcher ( Any.ANY ) ; this . legendItemPaint = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . legendItemPaint = Any.ANY ; super }
Distance : 12

126
Tree	{ reportMatcher ( Any.ANY ) ; providedNamespaces = problem.y . resetReturnValues () ; }
Code	{ reportMatcher ( Any.ANY ) ; providedNamespaces = problem.y . resetReturnValues () ; }
Distance : 10

127
Tree	{ reportMatcher ( Any.ANY ) ; providedNamespaces = problem.y . nextCauchy () ; }
Code	{ reportMatcher ( Any.ANY ) ; providedNamespaces = problem.y . nextCauchy () ; }
Distance : 10

128
Tree	{ reportMatcher ( Any.ANY ) ; providedNamespaces = problem.y . removeListener () ; }
Code	{ reportMatcher ( Any.ANY ) ; providedNamespaces = problem.y . removeListener () ; }
Distance : 10

129
Tree	{ reportMatcher ( Any.ANY ) . getMethodProxy () ; this . legendItemGraphicEdge = null ; }
Code	{ reportMatcher ( Any.ANY ) . getMethodProxy () ; this . legendItemGraphicEdge = null ; }
Distance : 12

130
Tree	{ reportMatcher ( Any.ANY ) . getPeriod () ; enableUnusedLocalAssignmentCheck = false ; }
Code	{ reportMatcher ( Any.ANY ) . getPeriod () ; enableUnusedLocalAssignmentCheck = false ; }
Distance : 11

131
Tree	{ reportMatcher ( Null.NULL ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Null.NULL ) ; return NUMBER_CONSTANT ; }
Distance : 11

132
Tree	{ return ( T ) getMethodProxy ( Any.ANY ) . returnZero () ; }
Code	{ return ( T ) getMethodProxy ( Any.ANY ) . returnZero () ; }
Distance : 9

133
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . advanceLinePaint = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . advanceLinePaint = Any.ANY ; }
Distance : 11

134
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . legendItemPaint = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . legendItemPaint = Any.ANY ; }
Distance : 11

135
Tree	{ reportMatcher ( Any.ANY ) . setCallback () ; this . legendItemGraphicEdge = null ; }
Code	{ reportMatcher ( Any.ANY ) . setCallback () ; this . legendItemGraphicEdge = null ; }
Distance : 12

136
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . unknownTypeNames = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . unknownTypeNames = Any.ANY ; }
Distance : 11

137
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . weightSqrt = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . weightSqrt = Any.ANY ; }
Distance : 11

138
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . sublabelFont = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . sublabelFont = Any.ANY ; }
Distance : 11

139
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . reloadClassPredicate = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . reloadClassPredicate = Any.ANY ; }
Distance : 11

140
Tree	{ return ( T ) setCallback () ; }
Code	{ return ( T ) setCallback () ; }
Distance : 10

141
Tree	{ reportMatcher ( Any.ANY ) . getDeclaredType () ; this . legendItemGraphicEdge = null ; }
Code	{ reportMatcher ( Any.ANY ) . getDeclaredType () ; this . legendItemGraphicEdge = null ; }
Distance : 12

142
Tree	{ return anyObject ( Any.ANY ) ; }
Code	{ return anyObject ( Any.ANY ) ; }
Distance : 11

143
Tree	{ return reportMatcher ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT ) ; }
Code	{ return reportMatcher ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT ) ; }
Distance : 10

144
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

145
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . legendItemGraphicEdge = scalar ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . legendItemGraphicEdge = scalar ; }
Distance : 12

146
Tree	{ return reportMatcher ( Any.ANY ) . < isConstructorStack > returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . < isConstructorStack > returnNull () ; }
Distance : 9

147
Tree	{ reportMatcher ( Any.ANY ) . disallowGlobalThis () ; this . legendItemGraphicEdge = map ; }
Code	{ reportMatcher ( Any.ANY ) . disallowGlobalThis () ; this . legendItemGraphicEdge = map ; }
Distance : 12

148
Tree	{ reportMatcher ( Any.ANY ) ; providedNamespaces = problem.y . inIncrementalCheckMode () ; }
Code	{ reportMatcher ( Any.ANY ) ; providedNamespaces = problem.y . inIncrementalCheckMode () ; }
Distance : 10

149
Tree	{ reportMatcher ( Any.ANY ) . getPeriod () ; this . legendItemGraphicEdge = map ; }
Code	{ reportMatcher ( Any.ANY ) . getPeriod () ; this . legendItemGraphicEdge = map ; }
Distance : 12

150
Tree	{ reportMatcher ( NotNull.NOT_NULL ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( NotNull.NOT_NULL ) ; return NUMBER_CONSTANT ; }
Distance : 11

151
Tree	{ return ( T ) getMethodProxy ( Any.ANY ) . getParameterTypes () ; }
Code	{ return ( T ) getMethodProxy ( Any.ANY ) . getParameterTypes () ; }
Distance : 9

152
Tree	{ reportMatcher ( Any.ANY ) ; providedNamespaces = false ; }
Code	{ reportMatcher ( Any.ANY ) ; providedNamespaces = false ; }
Distance : 11

153
Tree	{ reportMatcher ( Any.ANY ) . voidMethod () ; this . legendItemGraphicEdge = null ; }
Code	{ reportMatcher ( Any.ANY ) . voidMethod () ; this . legendItemGraphicEdge = null ; }
Distance : 12

154
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . legendItemGraphicEdge = map ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; this . legendItemGraphicEdge = map ; }
Distance : 12

155
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return NUMBER_CONSTANT ; }
Distance : 11

156
Tree	{ reportMatcher ( Any.ANY ) . disallowGlobalThis () ; stopWatch = problem.y ; }
Code	{ reportMatcher ( Any.ANY ) . disallowGlobalThis () ; stopWatch = problem.y ; }
Distance : 11

157
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; stopWatch = problem.y ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; stopWatch = problem.y ; }
Distance : 11

158
Tree	{ reportMatcher ( Any.ANY ) ; providedNamespaces = problem.y . getAuthor () ; }
Code	{ reportMatcher ( Any.ANY ) ; providedNamespaces = problem.y . getAuthor () ; }
Distance : 10

159
Tree	{ reportMatcher ( Any.ANY ) . getPeriod () ; enableUnusedLocalAssignmentCheck = problem.y ; }
Code	{ reportMatcher ( Any.ANY ) . getPeriod () ; enableUnusedLocalAssignmentCheck = problem.y ; }
Distance : 11

160
Tree	{ reportMatcher ( Any.ANY ) ; defaultTransformer = false ; }
Code	{ reportMatcher ( Any.ANY ) ; defaultTransformer = false ; }
Distance : 11

161
Tree	{ reportMatcher ( Any.ANY ) . getMethodProxy () ; this . legendItemGraphicEdge = map ; }
Code	{ reportMatcher ( Any.ANY ) . getMethodProxy () ; this . legendItemGraphicEdge = map ; }
Distance : 12

162
Tree	{ reportMatcher ( Any.ANY ) . addWrapPartial () ; this . legendItemGraphicEdge = null ; }
Code	{ reportMatcher ( Any.ANY ) . addWrapPartial () ; this . legendItemGraphicEdge = null ; }
Distance : 12

163
Tree	{ reportMatcher ( Any.ANY ) . getPeriod () ; stopWatch = problem.y ; }
Code	{ reportMatcher ( Any.ANY ) . getPeriod () ; stopWatch = problem.y ; }
Distance : 11

164
Tree	{ return reportMatcher ( Any.ANY ) . < isConstructorStack > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < isConstructorStack > reportMatcher () ; }
Distance : 9

165
Tree	{ reportMatcher ( NotNull.NOT_NULL ) ; return false ; }
Code	{ reportMatcher ( NotNull.NOT_NULL ) ; return false ; }
Distance : 11

166
Tree	{ reportMatcher ( Any.ANY ) . setCallback () ; this . legendItemGraphicEdge = map ; }
Code	{ reportMatcher ( Any.ANY ) . setCallback () ; this . legendItemGraphicEdge = map ; }
Distance : 12

167
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 14

168
Tree	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; enableUnusedLocalAssignmentCheck = problem.y ; }
Code	{ reportMatcher ( Any.ANY ) . isNotEqualTo () ; enableUnusedLocalAssignmentCheck = problem.y ; }
Distance : 11

169
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 14

170
Tree	{ reportMatcher ( Null.NULL ) ; return false ; }
Code	{ reportMatcher ( Null.NULL ) ; return false ; }
Distance : 11

171
Tree	{ testTypes ( Any.ANY ) ; return false ; }
Code	{ testTypes ( Any.ANY ) ; return false ; }
Distance : 12

172
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 14

173
Tree	{ reportMatcher ( v.data ) ; return false ; }
Code	{ reportMatcher ( v.data ) ; return false ; }
Distance : 11

174
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . legendItemGraphicEdge = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . legendItemGraphicEdge = Any.ANY ; }
Distance : 11

175
Tree	{ super ( T ) ; }
Code	{ super ( T ) ; }
Distance : 12

176
Tree	{ return reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; }
Code	{ return reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; }
Distance : 10

177
Tree	{ reportMatcher ( Any.ANY ) . getDeclaredType () ; this . legendItemGraphicEdge = map ; }
Code	{ reportMatcher ( Any.ANY ) . getDeclaredType () ; this . legendItemGraphicEdge = map ; }
Distance : 12

178
Tree	{ testTypes ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ testTypes ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

179
Tree	{ return reportMatcher ( Any.ANY ) . < minPrecedence > returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . < minPrecedence > returnNull () ; }
Distance : 9

180
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

181
Tree	{ super ( RETURNS_DEFAULTS ) ; }
Code	{ super ( RETURNS_DEFAULTS ) ; }
Distance : 12

182
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

183
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

184
Tree	{ reportMatcher ( Any.ANY ) ; expandedDefinitions = false ; }
Code	{ reportMatcher ( Any.ANY ) ; expandedDefinitions = false ; }
Distance : 11

185
Tree	{ return reportMatcher ( Null.NULL ) ; }
Code	{ return reportMatcher ( Null.NULL ) ; }
Distance : 10

186
Tree	{ return reportMatcher ( NotNull.NOT_NULL ) ; }
Code	{ return reportMatcher ( NotNull.NOT_NULL ) ; }
Distance : 10

187
Tree	{ reportMatcher ( Any.ANY ) . disallowGlobalThis () ; this . legendItemGraphicEdge = scalar ; }
Code	{ reportMatcher ( Any.ANY ) . disallowGlobalThis () ; this . legendItemGraphicEdge = scalar ; }
Distance : 12

188
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . negativeBarPaint = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . negativeBarPaint = Any.ANY ; }
Distance : 11

189
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return false ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return false ; }
Distance : 11

190
Tree	{ return reportMatcher ( AnyVararg.ANY_VARARG ) ; }
Code	{ return reportMatcher ( AnyVararg.ANY_VARARG ) ; }
Distance : 10

191
Tree	{ return reportMatcher ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW ) ; }
Code	{ return reportMatcher ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW ) ; }
Distance : 10

192
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

193
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

194
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

195
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 13

196
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 14

197
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 13

198
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 14

199
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 14

========================================================================


========================================================================
Example Number: 95
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnString () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( String . class ) ) . returnString () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnString}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=String})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnString}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ super ( mockSettings ) ; setCallback ( Any.ANY ) ; }
Code	{ super ( mockSettings ) ; setCallback ( Any.ANY ) ; }
Distance : 12

1
Tree	{ return ( T ) isAssertionCall () ; }
Code	{ return ( T ) isAssertionCall () ; }
Distance : 10

2
Tree	{ super ( chronology ) ; }
Code	{ super ( chronology ) ; }
Distance : 12

3
Tree	{ return ( T ) toAnswer () ; }
Code	{ return ( T ) toAnswer () ; }
Distance : 10

4
Tree	{ reportMatcher ( Any.ANY ) . setCallback () ; this . injected = null ; }
Code	{ reportMatcher ( Any.ANY ) . setCallback () ; this . injected = null ; }
Distance : 12

5
Tree	{ reportMatcher ( Any.ANY ) ; this . MINUTE_OF_DAY_TYPE = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . MINUTE_OF_DAY_TYPE = Any.ANY ; super }
Distance : 12

6
Tree	{ reportMatcher ( Any.ANY ) ; defaultName = false ; }
Code	{ reportMatcher ( Any.ANY ) ; defaultName = false ; }
Distance : 11

7
Tree	{ reportMatcher ( Any.ANY ) ; MINUTE_OF_DAY_TYPE = interpolator.currentDerivative . getEnumeratedTypeOfEnumElement () ; }
Code	{ reportMatcher ( Any.ANY ) ; MINUTE_OF_DAY_TYPE = interpolator.currentDerivative . getEnumeratedTypeOfEnumElement () ; }
Distance : 10

8
Tree	{ reportMatcher ( Any.ANY ) . setCallback () ; MINUTE_OF_DAY_TYPE = LanguageMode.ECMASCRIPT_2015 ; }
Code	{ reportMatcher ( Any.ANY ) . setCallback () ; MINUTE_OF_DAY_TYPE = LanguageMode.ECMASCRIPT_2015 ; }
Distance : 11

9
Tree	{ reportMatcher ( Any.ANY ) ; this . MINUTE_OF_DAY_TYPE = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . MINUTE_OF_DAY_TYPE = Any.ANY ; }
Distance : 11

10
Tree	{ reportMatcher ( Any.ANY ) ; this . canvas = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . canvas = Any.ANY ; super }
Distance : 12

11
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return false ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return false ; }
Distance : 11

12
Tree	{ super ( Foo ) ; setCallback ( Any.ANY ) ; }
Code	{ super ( Foo ) ; setCallback ( Any.ANY ) ; }
Distance : 12

13
Tree	{ reportMatcher ( Any.ANY ) . setCallback () ; ES5 = false ; }
Code	{ reportMatcher ( Any.ANY ) . setCallback () ; ES5 = false ; }
Distance : 11

14
Tree	{ super ( object ) ; setCallback ( Any.ANY ) . voidMethod () ; }
Code	{ super ( object ) ; setCallback ( Any.ANY ) . voidMethod () ; }
Distance : 10

15
Tree	{ return ( T ) getInterceptor ( Any.ANY ) . getEnumeratedTypeOfEnumElement () ; }
Code	{ return ( T ) getInterceptor ( Any.ANY ) . getEnumeratedTypeOfEnumElement () ; }
Distance : 9

16
Tree	{ return reportMatcher ( Any.ANY ) . < ES5 > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < ES5 > reportMatcher () ; }
Distance : 9

17
Tree	{ return ( T ) getInterceptor ( Any.ANY ) ; }
Code	{ return ( T ) getInterceptor ( Any.ANY ) ; }
Distance : 11

18
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return null ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return null ; }
Distance : 11

19
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

20
Tree	{ super ( T ) ; setCallback ( Any.ANY ) ; }
Code	{ super ( T ) ; setCallback ( Any.ANY ) ; }
Distance : 12

21
Tree	{ reportMatcher ( Null.NULL ) ; return null ; }
Code	{ reportMatcher ( Null.NULL ) ; return null ; }
Distance : 11

22
Tree	{ reportMatcher ( NotNull.NOT_NULL ) ; return null ; }
Code	{ reportMatcher ( NotNull.NOT_NULL ) ; return null ; }
Distance : 11

23
Tree	{ return reportMatcher ( Any.ANY ) . < MILLIS_TYPE > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < MILLIS_TYPE > reportMatcher () ; }
Distance : 9

24
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

25
Tree	{ return ( T ) setCallback ( Any.ANY ) . getDeclaredType () ; }
Code	{ return ( T ) setCallback ( Any.ANY ) . getDeclaredType () ; }
Distance : 9

26
Tree	{ return ( T ) setCallback ( Any.ANY ) . voidMethod () ; }
Code	{ return ( T ) setCallback ( Any.ANY ) . voidMethod () ; }
Distance : 9

27
Tree	{ return this . allowed ; }
Code	{ return this . allowed ; }
Distance : 12

28
Tree	{ super ( object ) ; setCallback ( Any.ANY ) ; }
Code	{ super ( object ) ; setCallback ( Any.ANY ) ; }
Distance : 12

29
Tree	{ reportMatcher ( Any.ANY ) . setCallback () ; MINUTE_OF_DAY_TYPE = false ; }
Code	{ reportMatcher ( Any.ANY ) . setCallback () ; MINUTE_OF_DAY_TYPE = false ; }
Distance : 11

30
Tree	{ super ( object ) ; }
Code	{ super ( object ) ; }
Distance : 12

31
Tree	{ super ( classToMock ) ; setCallback ( Any.ANY ) . setCallback () ; }
Code	{ super ( classToMock ) ; setCallback ( Any.ANY ) . setCallback () ; }
Distance : 10

32
Tree	{ super ( T ) ; setCallback ( Any.ANY ) . thenThrow () ; }
Code	{ super ( T ) ; setCallback ( Any.ANY ) . thenThrow () ; }
Distance : 10

33
Tree	{ super ( T ) ; setCallback ( Any.ANY ) . toReturn () ; }
Code	{ super ( T ) ; setCallback ( Any.ANY ) . toReturn () ; }
Distance : 10

34
Tree	{ return reportMatcher ( Any.ANY ) . < clazz > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < clazz > reportMatcher () ; }
Distance : 9

35
Tree	{ reportMatcher ( Any.ANY ) . setCallback () ; this . injected = zFormat ; }
Code	{ reportMatcher ( Any.ANY ) . setCallback () ; this . injected = zFormat ; }
Distance : 12

36
Tree	{ reportMatcher ( NotNull.NOT_NULL ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( NotNull.NOT_NULL ) ; return NUMBER_CONSTANT ; }
Distance : 11

37
Tree	{ testTypes ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ testTypes ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

38
Tree	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return NUMBER_CONSTANT ; }
Distance : 11

39
Tree	{ super ( classToMock ) ; setCallback ( Any.ANY ) ; }
Code	{ super ( classToMock ) ; setCallback ( Any.ANY ) ; }
Distance : 12

40
Tree	{ super ( object ) ; setCallback ( Any.ANY ) . setCallback () ; }
Code	{ super ( object ) ; setCallback ( Any.ANY ) . setCallback () ; }
Distance : 10

41
Tree	{ reportMatcher ( v.data ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( v.data ) ; return NUMBER_CONSTANT ; }
Distance : 11

42
Tree	{ return ( T ) getEscapedLocals ( Any.ANY ) ; }
Code	{ return ( T ) getEscapedLocals ( Any.ANY ) ; }
Distance : 11

43
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return false ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return false ; }
Distance : 11

44
Tree	{ super ( matcher ) ; }
Code	{ super ( matcher ) ; }
Distance : 12

45
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return NUMBER_CONSTANT ; }
Distance : 11

46
Tree	{ return ( T ) withSettings () ; }
Code	{ return ( T ) withSettings () ; }
Distance : 10

47
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

48
Tree	{ super ( chronology ) ; setCallback ( Any.ANY ) ; }
Code	{ super ( chronology ) ; setCallback ( Any.ANY ) ; }
Distance : 12

49
Tree	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return null ; }
Code	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return null ; }
Distance : 11

50
Tree	{ return ( T ) isAssertionCall ( Any.ANY ) ; }
Code	{ return ( T ) isAssertionCall ( Any.ANY ) ; }
Distance : 11

51
Tree	{ return ( T ) toAnswer ( Any.ANY ) ; }
Code	{ return ( T ) toAnswer ( Any.ANY ) ; }
Distance : 11

52
Tree	{ return reportMatcher ( Any.ANY ) . < MockitoMock > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < MockitoMock > reportMatcher () ; }
Distance : 9

53
Tree	{ return reportMatcher ( Any.ANY ) . setCallback () ; }
Code	{ return reportMatcher ( Any.ANY ) . setCallback () ; }
Distance : 8

54
Tree	{ return reportMatcher ( Any.ANY ) . voidMethod () ; }
Code	{ return reportMatcher ( Any.ANY ) . voidMethod () ; }
Distance : 8

55
Tree	{ reportMatcher ( v.data ) ; return null ; }
Code	{ reportMatcher ( v.data ) ; return null ; }
Distance : 11

56
Tree	{ super ( RETURNS_DEFAULTS ) ; }
Code	{ super ( RETURNS_DEFAULTS ) ; }
Distance : 12

57
Tree	{ return reportMatcher ( Any.ANY ) . getEnumeratedTypeOfEnumElement () ; }
Code	{ return reportMatcher ( Any.ANY ) . getEnumeratedTypeOfEnumElement () ; }
Distance : 8

58
Tree	{ reportMatcher ( Any.ANY ) ; mismatchesReported = false ; }
Code	{ reportMatcher ( Any.ANY ) ; mismatchesReported = false ; }
Distance : 11

59
Tree	{ reportMatcher ( Any.ANY ) . toReturn () ; MINUTE_OF_DAY_TYPE = false ; }
Code	{ reportMatcher ( Any.ANY ) . toReturn () ; MINUTE_OF_DAY_TYPE = false ; }
Distance : 11

60
Tree	{ reportMatcher ( Any.ANY ) ; this . protoObject = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . protoObject = Any.ANY ; }
Distance : 11

61
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Distance : 11

62
Tree	{ return this . MockitoCore ; }
Code	{ return this . MockitoCore ; }
Distance : 12

63
Tree	{ return reportMatcher ( Any.ANY ) . toReturn () ; }
Code	{ return reportMatcher ( Any.ANY ) . toReturn () ; }
Distance : 8

64
Tree	{ return reportMatcher ( Any.ANY ) . < MINUTE_OF_DAY_TYPE > returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . < MINUTE_OF_DAY_TYPE > returnNull () ; }
Distance : 9

65
Tree	{ super ( T ) ; }
Code	{ super ( T ) ; }
Distance : 12

66
Tree	{ reportMatcher ( Any.ANY ) ; MINUTE_OF_DAY_TYPE = problem.y . getEnumeratedTypeOfEnumElement () ; }
Code	{ reportMatcher ( Any.ANY ) ; MINUTE_OF_DAY_TYPE = problem.y . getEnumeratedTypeOfEnumElement () ; }
Distance : 10

67
Tree	{ reportMatcher ( Any.ANY ) ; this . defaultName = interpolator.currentDerivative ; }
Code	{ reportMatcher ( Any.ANY ) ; this . defaultName = interpolator.currentDerivative ; }
Distance : 11

68
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

69
Tree	{ reportMatcher ( Any.ANY ) ; this . largeFont = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . largeFont = Any.ANY ; }
Distance : 11

70
Tree	{ reportMatcher ( Any.ANY ) . setCallback () ; this . canvas = map ; }
Code	{ reportMatcher ( Any.ANY ) . setCallback () ; this . canvas = map ; }
Distance : 12

71
Tree	{ return ( T ) setCallback ( Any.ANY ) . getEnumeratedTypeOfEnumElement () ; }
Code	{ return ( T ) setCallback ( Any.ANY ) . getEnumeratedTypeOfEnumElement () ; }
Distance : 9

72
Tree	{ reportMatcher ( Any.ANY ) ; this . defaultName = interpolator.currentDerivative ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . defaultName = interpolator.currentDerivative ; super }
Distance : 12

73
Tree	{ reportMatcher ( Any.ANY ) ; this . largeFont = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . largeFont = Any.ANY ; super }
Distance : 12

74
Tree	{ return ( T ) getInterceptor ( Any.ANY ) . voidMethod () ; }
Code	{ return ( T ) getInterceptor ( Any.ANY ) . voidMethod () ; }
Distance : 9

75
Tree	{ super ( T ) ; setCallback ( Any.ANY ) . voidMethod () ; }
Code	{ super ( T ) ; setCallback ( Any.ANY ) . voidMethod () ; }
Distance : 10

76
Tree	{ return this . mockSettings ; }
Code	{ return this . mockSettings ; }
Distance : 12

77
Tree	{ testTypes ( Any.ANY ) ; return null ; }
Code	{ testTypes ( Any.ANY ) ; return null ; }
Distance : 12

78
Tree	{ reportMatcher ( Any.ANY ) ; this . canvas = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . canvas = Any.ANY ; }
Distance : 11

79
Tree	{ reportMatcher ( Any.ANY ) . setCallback () ; MINUTE_OF_DAY_TYPE = interpolator.currentDerivative ; }
Code	{ reportMatcher ( Any.ANY ) . setCallback () ; MINUTE_OF_DAY_TYPE = interpolator.currentDerivative ; }
Distance : 11

80
Tree	{ reportMatcher ( Any.ANY ) . setCallback () ; success = LanguageMode.ECMASCRIPT_2015 ; }
Code	{ reportMatcher ( Any.ANY ) . setCallback () ; success = LanguageMode.ECMASCRIPT_2015 ; }
Distance : 11

81
Tree	{ return ( T ) withSettings ( Any.ANY ) ; }
Code	{ return ( T ) withSettings ( Any.ANY ) ; }
Distance : 11

82
Tree	{ reportMatcher ( Any.ANY ) ; ES5 = interpolator.currentDerivative . getEnumeratedTypeOfEnumElement () ; }
Code	{ reportMatcher ( Any.ANY ) ; ES5 = interpolator.currentDerivative . getEnumeratedTypeOfEnumElement () ; }
Distance : 10

83
Tree	{ return reportMatcher ( Any.ANY ) . getDeclaredType () ; }
Code	{ return reportMatcher ( Any.ANY ) . getDeclaredType () ; }
Distance : 8

84
Tree	{ return this . classToMock ; }
Code	{ return this . classToMock ; }
Distance : 12

85
Tree	{ return reportMatcher ( Any.ANY ) . thenThrow () ; }
Code	{ return reportMatcher ( Any.ANY ) . thenThrow () ; }
Distance : 8

86
Tree	{ super ( matcher ) ; setCallback ( Any.ANY ) ; }
Code	{ super ( matcher ) ; setCallback ( Any.ANY ) ; }
Distance : 12

87
Tree	{ return reportMatcher ( Any.ANY ) . < ES6_MODULES > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < ES6_MODULES > reportMatcher () ; }
Distance : 9

88
Tree	{ return reportMatcher ( Any.ANY ) . doesNotContain () ; }
Code	{ return reportMatcher ( Any.ANY ) . doesNotContain () ; }
Distance : 8

89
Tree	{ reportMatcher ( Any.ANY ) ; this . defaultName = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . defaultName = Any.ANY ; super }
Distance : 12

90
Tree	{ reportMatcher ( Any.ANY ) ; mismatchesReported = interpolator.currentDerivative . getEnumeratedTypeOfEnumElement () ; }
Code	{ reportMatcher ( Any.ANY ) ; mismatchesReported = interpolator.currentDerivative . getEnumeratedTypeOfEnumElement () ; }
Distance : 10

91
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

92
Tree	{ reportMatcher ( Any.ANY ) ; providedNamespaces = false ; }
Code	{ reportMatcher ( Any.ANY ) ; providedNamespaces = false ; }
Distance : 11

93
Tree	{ return ( T ) toReturn ( Any.ANY ) ; }
Code	{ return ( T ) toReturn ( Any.ANY ) ; }
Distance : 11

94
Tree	{ reportMatcher ( Any.ANY ) ; this . gradientPaintTransformer = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . gradientPaintTransformer = Any.ANY ; }
Distance : 11

95
Tree	{ reportMatcher ( Any.ANY ) ; this . protoObject = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . protoObject = Any.ANY ; super }
Distance : 12

96
Tree	{ return ( T ) setCallback ( Any.ANY ) ; }
Code	{ return ( T ) setCallback ( Any.ANY ) ; }
Distance : 11

97
Tree	{ super ( classToMock ) ; setCallback ( Any.ANY ) . voidMethod () ; }
Code	{ super ( classToMock ) ; setCallback ( Any.ANY ) . voidMethod () ; }
Distance : 10

98
Tree	{ return reportMatcher ( Any.ANY ) . insert () ; }
Code	{ return reportMatcher ( Any.ANY ) . insert () ; }
Distance : 8

99
Tree	{ return reportMatcher ( Any.ANY ) . < ES5 > returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . < ES5 > returnNull () ; }
Distance : 9

100
Tree	{ reportMatcher ( Any.ANY ) . voidMethod () ; MINUTE_OF_DAY_TYPE = false ; }
Code	{ reportMatcher ( Any.ANY ) . voidMethod () ; MINUTE_OF_DAY_TYPE = false ; }
Distance : 11

101
Tree	{ return this . matcher ; }
Code	{ return this . matcher ; }
Distance : 12

102
Tree	{ reportMatcher ( Any.ANY ) . toReturn () ; success = false ; }
Code	{ reportMatcher ( Any.ANY ) . toReturn () ; success = false ; }
Distance : 11

103
Tree	{ return this . mode ; }
Code	{ return this . mode ; }
Distance : 12

104
Tree	{ super ( Foo ) ; }
Code	{ super ( Foo ) ; }
Distance : 12

105
Tree	{ reportMatcher ( Any.ANY ) . setCallback () ; injected = false ; }
Code	{ reportMatcher ( Any.ANY ) . setCallback () ; injected = false ; }
Distance : 11

106
Tree	{ reportMatcher ( Any.ANY ) ; this . sublabelFont = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . sublabelFont = Any.ANY ; }
Distance : 11

107
Tree	{ return this . RETURNS_DEFAULTS ; }
Code	{ return this . RETURNS_DEFAULTS ; }
Distance : 12

108
Tree	{ return ( T ) setCallback ( Any.ANY ) . toReturn () ; }
Code	{ return ( T ) setCallback ( Any.ANY ) . toReturn () ; }
Distance : 9

109
Tree	{ reportMatcher ( Any.ANY ) . setCallback () ; this . protoObject = null ; }
Code	{ reportMatcher ( Any.ANY ) . setCallback () ; this . protoObject = null ; }
Distance : 12

110
Tree	{ super ( RETURNS_DEFAULTS ) ; setCallback ( Any.ANY ) ; }
Code	{ super ( RETURNS_DEFAULTS ) ; setCallback ( Any.ANY ) ; }
Distance : 12

111
Tree	{ return ( T ) setCallback ( Any.ANY ) . setCallback () ; }
Code	{ return ( T ) setCallback ( Any.ANY ) . setCallback () ; }
Distance : 9

112
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

113
Tree	{ return ( T ) toReturn () ; }
Code	{ return ( T ) toReturn () ; }
Distance : 10

114
Tree	{ reportMatcher ( Any.ANY ) . setCallback () ; success = interpolator.currentDerivative ; }
Code	{ reportMatcher ( Any.ANY ) . setCallback () ; success = interpolator.currentDerivative ; }
Distance : 11

115
Tree	{ super ( classToMock ) ; }
Code	{ super ( classToMock ) ; }
Distance : 12

116
Tree	{ return ( T ) setCallback () ; }
Code	{ return ( T ) setCallback () ; }
Distance : 10

117
Tree	{ reportMatcher ( Any.ANY ) ; commits = false ; }
Code	{ reportMatcher ( Any.ANY ) ; commits = false ; }
Distance : 11

118
Tree	{ reportMatcher ( Any.ANY ) . setCallback () ; this . disambiguateProperties = null ; }
Code	{ reportMatcher ( Any.ANY ) . setCallback () ; this . disambiguateProperties = null ; }
Distance : 12

119
Tree	{ return ( T ) getStubbingLookupListeners ( Any.ANY ) ; }
Code	{ return ( T ) getStubbingLookupListeners ( Any.ANY ) ; }
Distance : 11

120
Tree	{ return this . object ; }
Code	{ return this . object ; }
Distance : 12

121
Tree	{ reportMatcher ( Any.ANY ) . setCallback () ; this . canvas = null ; }
Code	{ reportMatcher ( Any.ANY ) . setCallback () ; this . canvas = null ; }
Distance : 12

122
Tree	{ reportMatcher ( Any.ANY ) . setCallback () ; stopWatch = LanguageMode.ECMASCRIPT_2015 ; }
Code	{ reportMatcher ( Any.ANY ) . setCallback () ; stopWatch = LanguageMode.ECMASCRIPT_2015 ; }
Distance : 11

123
Tree	{ return ( T ) getStubbingLookupListeners () ; }
Code	{ return ( T ) getStubbingLookupListeners () ; }
Distance : 10

124
Tree	{ reportMatcher ( Any.ANY ) ; this . gradientPaintTransformer = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . gradientPaintTransformer = Any.ANY ; super }
Distance : 12

125
Tree	{ return reportMatcher ( Any.ANY ) . < MINUTE_OF_DAY_TYPE > reportMatcher () ; }
Code	{ return reportMatcher ( Any.ANY ) . < MINUTE_OF_DAY_TYPE > reportMatcher () ; }
Distance : 9

126
Tree	{ super ( T ) ; setCallback ( Any.ANY ) ; throw }
Code	{ super ( T ) ; setCallback ( Any.ANY ) ; throw }
Distance : 13

127
Tree	{ reportMatcher ( Any.ANY ) ; MINUTE_OF_DAY_TYPE = LanguageMode.ECMASCRIPT_2015 . getEnumeratedTypeOfEnumElement () ; }
Code	{ reportMatcher ( Any.ANY ) ; MINUTE_OF_DAY_TYPE = LanguageMode.ECMASCRIPT_2015 . getEnumeratedTypeOfEnumElement () ; }
Distance : 10

128
Tree	{ super ( mockSettings ) ; }
Code	{ super ( mockSettings ) ; }
Distance : 12

129
Tree	{ return ( T ) setCallback ( Any.ANY ) . thenThrow () ; }
Code	{ return ( T ) setCallback ( Any.ANY ) . thenThrow () ; }
Distance : 9

130
Tree	{ reportMatcher ( Any.ANY ) ; providedNamespaces = LanguageMode.ECMASCRIPT_2015 . getEnumeratedTypeOfEnumElement () ; }
Code	{ reportMatcher ( Any.ANY ) ; providedNamespaces = LanguageMode.ECMASCRIPT_2015 . getEnumeratedTypeOfEnumElement () ; }
Distance : 10

131
Tree	{ return reportMatcher ( NotNull.NOT_NULL ) ; }
Code	{ return reportMatcher ( NotNull.NOT_NULL ) ; }
Distance : 10

132
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . MINUTE_OF_DAY_TYPE = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . MINUTE_OF_DAY_TYPE = Any.ANY ; }
Distance : 11

133
Tree	{ return; reportMatcher ( Any.ANY ) ; this . defaultName = Any.ANY ; }
Code	{ return; reportMatcher ( Any.ANY ) ; this . defaultName = Any.ANY ; }
Distance : 11

134
Tree	{ reportMatcher ( Any.ANY ) ; this . defaultName = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . defaultName = Any.ANY ; }
Distance : 11

135
Tree	{ reportMatcher ( Any.ANY ) ; VerificationStartedNotifier = false ; }
Code	{ reportMatcher ( Any.ANY ) ; VerificationStartedNotifier = false ; }
Distance : 11

136
Tree	{ return ( T ) getEscapedLocals () ; }
Code	{ return ( T ) getEscapedLocals () ; }
Distance : 10

137
Tree	{ super ( T ) ; setCallback ( Any.ANY ) . setCallback () ; }
Code	{ super ( T ) ; setCallback ( Any.ANY ) . setCallback () ; }
Distance : 10

138
Tree	{ super ( T ) ; setCallback ( Any.ANY ) ; return; }
Code	{ super ( T ) ; setCallback ( Any.ANY ) ; return; }
Distance : 13

139
Tree	{ reportMatcher ( Any.ANY ) ; this . sublabelFont = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . sublabelFont = Any.ANY ; super }
Distance : 12

140
Tree	{ reportMatcher ( Any.ANY ) . toReturn () ; this . canvas = null ; }
Code	{ reportMatcher ( Any.ANY ) . toReturn () ; this . canvas = null ; }
Distance : 12

141
Tree	{ reportMatcher ( Any.ANY ) . setCallback () ; this . gradientPaintTransformer = null ; }
Code	{ reportMatcher ( Any.ANY ) . setCallback () ; this . gradientPaintTransformer = null ; }
Distance : 12

142
Tree	{ return anyObject ( Any.ANY ) ; }
Code	{ return anyObject ( Any.ANY ) ; }
Distance : 11

143
Tree	{ super ( object ) ; setCallback ( Any.ANY ) ; throw }
Code	{ super ( object ) ; setCallback ( Any.ANY ) ; throw }
Distance : 13

144
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . defaultName = interpolator.currentDerivative ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . defaultName = interpolator.currentDerivative ; }
Distance : 11

145
Tree	{ reportMatcher ( Any.ANY ) ; strictOrderVerifier = false ; }
Code	{ reportMatcher ( Any.ANY ) ; strictOrderVerifier = false ; }
Distance : 11

146
Tree	{ reportMatcher ( Any.ANY ) . voidMethod () ; this . canvas = null ; }
Code	{ reportMatcher ( Any.ANY ) . voidMethod () ; this . canvas = null ; }
Distance : 12

147
Tree	{ super ( classToMock ) ; setCallback ( Any.ANY ) ; throw }
Code	{ super ( classToMock ) ; setCallback ( Any.ANY ) ; throw }
Distance : 13

148
Tree	{ reportMatcher ( Any.ANY ) . setCallback () ; ES5 = LanguageMode.ECMASCRIPT_2015 ; }
Code	{ reportMatcher ( Any.ANY ) . setCallback () ; ES5 = LanguageMode.ECMASCRIPT_2015 ; }
Distance : 11

149
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . injected = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . injected = Any.ANY ; }
Distance : 11

150
Tree	{ reportMatcher ( Any.ANY ) . setCallback () ; this . injected = scalar ; }
Code	{ reportMatcher ( Any.ANY ) . setCallback () ; this . injected = scalar ; }
Distance : 12

151
Tree	{ super ( object ) ; setCallback ( Any.ANY ) ; return; }
Code	{ super ( object ) ; setCallback ( Any.ANY ) ; return; }
Distance : 13

152
Tree	{ reportMatcher ( Any.ANY ) . setCallback () ; stopWatch = false ; }
Code	{ reportMatcher ( Any.ANY ) . setCallback () ; stopWatch = false ; }
Distance : 11

153
Tree	{ reportMatcher ( Any.ANY ) . setCallback () ; this . defaultName = null ; }
Code	{ reportMatcher ( Any.ANY ) . setCallback () ; this . defaultName = null ; }
Distance : 12

154
Tree	{ super ( object ) ; setCallback ( Any.ANY ) ; MINUTE_OF_DAY_TYPE }
Code	{ super ( object ) ; setCallback ( Any.ANY ) ; MINUTE_OF_DAY_TYPE }
Distance : 13

155
Tree	{ reportMatcher ( Any.ANY ) ; mismatchesReported = LanguageMode.ECMASCRIPT_2015 . getEnumeratedTypeOfEnumElement () ; }
Code	{ reportMatcher ( Any.ANY ) ; mismatchesReported = LanguageMode.ECMASCRIPT_2015 . getEnumeratedTypeOfEnumElement () ; }
Distance : 10

156
Tree	{ super ( classToMock ) ; setCallback ( Any.ANY ) ; return; }
Code	{ super ( classToMock ) ; setCallback ( Any.ANY ) ; return; }
Distance : 13

157
Tree	{ reportMatcher ( Any.ANY ) . setCallback () ; this . injected = map ; }
Code	{ reportMatcher ( Any.ANY ) . setCallback () ; this . injected = map ; }
Distance : 12

158
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return NUMBER_CONSTANT ; }
Distance : 11

159
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . extraLargeFont = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . extraLargeFont = Any.ANY ; }
Distance : 11

160
Tree	{ reportMatcher ( Any.ANY ) . setCallback () ; this . canvas = zFormat ; }
Code	{ reportMatcher ( Any.ANY ) . setCallback () ; this . canvas = zFormat ; }
Distance : 12

161
Tree	{ return reportMatcher ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT ) ; }
Code	{ return reportMatcher ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT ) ; }
Distance : 10

162
Tree	{ reportMatcher ( Any.ANY ) . setCallback () ; this . protoObject = map ; }
Code	{ reportMatcher ( Any.ANY ) . setCallback () ; this . protoObject = map ; }
Distance : 12

163
Tree	{ testTypes ( Any.ANY ) ; return false ; }
Code	{ testTypes ( Any.ANY ) ; return false ; }
Distance : 12

164
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

165
Tree	{ reportMatcher ( Any.ANY ) . setCallback () ; stopWatch = interpolator.currentDerivative ; }
Code	{ reportMatcher ( Any.ANY ) . setCallback () ; stopWatch = interpolator.currentDerivative ; }
Distance : 11

166
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

167
Tree	{ reportMatcher ( Null.NULL ) ; return false ; }
Code	{ reportMatcher ( Null.NULL ) ; return false ; }
Distance : 11

168
Tree	{ reportMatcher ( Any.ANY ) . setCallback () ; this . canvas = scalar ; }
Code	{ reportMatcher ( Any.ANY ) . setCallback () ; this . canvas = scalar ; }
Distance : 12

169
Tree	{ reportMatcher ( Any.ANY ) ; MINUTE_OF_DAY_TYPE = false ; }
Code	{ reportMatcher ( Any.ANY ) ; MINUTE_OF_DAY_TYPE = false ; }
Distance : 11

170
Tree	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return false ; }
Code	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return false ; }
Distance : 11

171
Tree	{ reportMatcher ( v.data ) ; return false ; }
Code	{ reportMatcher ( v.data ) ; return false ; }
Distance : 11

172
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 14

173
Tree	{ return reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; }
Code	{ return reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; }
Distance : 10

174
Tree	{ reportMatcher ( Null.NULL ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Null.NULL ) ; return NUMBER_CONSTANT ; }
Distance : 11

175
Tree	{ return ( T ) getInterceptor () ; }
Code	{ return ( T ) getInterceptor () ; }
Distance : 10

176
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . defaultName = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . defaultName = Any.ANY ; }
Distance : 11

177
Tree	{ reportMatcher ( Any.ANY ) . setCallback () ; this . disambiguateProperties = map ; }
Code	{ reportMatcher ( Any.ANY ) . setCallback () ; this . disambiguateProperties = map ; }
Distance : 12

178
Tree	{ reportMatcher ( Any.ANY ) . setCallback () ; success = false ; }
Code	{ reportMatcher ( Any.ANY ) . setCallback () ; success = false ; }
Distance : 11

179
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 14

180
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 14

181
Tree	{ reportMatcher ( Any.ANY ) ; ES5 = false ; }
Code	{ reportMatcher ( Any.ANY ) ; ES5 = false ; }
Distance : 11

182
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 14

183
Tree	{ reportMatcher ( Any.ANY ) . setCallback () ; MINUTE_OF_DAY_TYPE = problem.y ; }
Code	{ reportMatcher ( Any.ANY ) . setCallback () ; MINUTE_OF_DAY_TYPE = problem.y ; }
Distance : 11

184
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . canvas = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . canvas = Any.ANY ; }
Distance : 11

185
Tree	{ reportMatcher ( Any.ANY ) ; ES5 = LanguageMode.ECMASCRIPT_2015 . getEnumeratedTypeOfEnumElement () ; }
Code	{ reportMatcher ( Any.ANY ) ; ES5 = LanguageMode.ECMASCRIPT_2015 . getEnumeratedTypeOfEnumElement () ; }
Distance : 10

186
Tree	{ return reportMatcher ( Null.NULL ) ; }
Code	{ return reportMatcher ( Null.NULL ) ; }
Distance : 10

187
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . protoObject = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . protoObject = Any.ANY ; }
Distance : 11

188
Tree	{ super ( T ) ; setCallback ( Any.ANY ) ; MINUTE_OF_DAY_TYPE }
Code	{ super ( T ) ; setCallback ( Any.ANY ) ; MINUTE_OF_DAY_TYPE }
Distance : 13

189
Tree	{ reportMatcher ( NotNull.NOT_NULL ) ; return false ; }
Code	{ reportMatcher ( NotNull.NOT_NULL ) ; return false ; }
Distance : 11

190
Tree	{ return reportMatcher ( AnyVararg.ANY_VARARG ) ; }
Code	{ return reportMatcher ( AnyVararg.ANY_VARARG ) ; }
Distance : 10

191
Tree	{ return reportMatcher ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW ) ; }
Code	{ return reportMatcher ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW ) ; }
Distance : 10

192
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

193
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

194
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

195
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 14

196
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 13

197
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 13

198
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

199
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 14

========================================================================


========================================================================
Example Number: 96
Parent Code is: 
{ return ( T ) anyObject () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (802{val=anyObject}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnNull}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 6
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return ( T ) reportMatcher ( T , reportMatcher ( Any.ANY ) ) ; }
Code	{ return ( T ) reportMatcher ( T , reportMatcher ( Any.ANY ) ) ; }
Distance : 7

1
Tree	{ return checkNotNull ( T ) . < T > returnNull () ; }
Code	{ return checkNotNull ( T ) . < T > returnNull () ; }
Distance : 6

2
Tree	{ checkNotNull ( v.data ) ; return null ; }
Code	{ checkNotNull ( v.data ) ; return null ; }
Distance : 9

3
Tree	{ return ( T ) T . reportMatcher ( T ) ; }
Code	{ return ( T ) T . reportMatcher ( T ) ; }
Distance : 6

4
Tree	{ return this . cause ; }
Code	{ return this . cause ; }
Distance : 9

5
Tree	{ return reportMatcher ( T ) . < Object > returnNull () ; }
Code	{ return reportMatcher ( T ) . < Object > returnNull () ; }
Distance : 6

6
Tree	{ return ( T ) getInterceptor ( T ) ; }
Code	{ return ( T ) getInterceptor ( T ) ; }
Distance : 5

7
Tree	{ return mapToSelf () ; }
Code	{ return mapToSelf () ; }
Distance : 9

8
Tree	{ return ( T ) T . returnMap ( T , ( Object ) reportMatcher () ) ; }
Code	{ return ( T ) T . returnMap ( T , ( Object ) reportMatcher () ) ; }
Distance : 10

9
Tree	{ return ( T ) T . reportMatcher ( T , ( Object ) reportMatcher () ) ; }
Code	{ return ( T ) T . reportMatcher ( T , ( Object ) reportMatcher () ) ; }
Distance : 9

10
Tree	{ return ( T ) reportMatcher ( anyObject ( T ) ) ; }
Code	{ return ( T ) reportMatcher ( anyObject ( T ) ) ; }
Distance : 5

11
Tree	{ return ( T ) reportMatcher ( T , getTolerance ( Any.ANY ) ) ; }
Code	{ return ( T ) reportMatcher ( T , getTolerance ( Any.ANY ) ) ; }
Distance : 7

12
Tree	{ return MathArrays . getLast () ; }
Code	{ return MathArrays . getLast () ; }
Distance : 8

13
Tree	{ return ( T ) reportMatcher ( T , configureWith ( Any.ANY ) ) ; }
Code	{ return ( T ) reportMatcher ( T , configureWith ( Any.ANY ) ) ; }
Distance : 7

14
Tree	{ return ( T ) T . returnFor ( T , ( Object ) reportMatcher () ) ; }
Code	{ return ( T ) T . returnFor ( T , ( Object ) reportMatcher () ) ; }
Distance : 10

15
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnZero ( Any.ANY ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnZero ( Any.ANY ) ; }
Distance : 4

16
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnZero ( clazz ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnZero ( clazz ) ; }
Distance : 4

17
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 4

18
Tree	{ return MathArrays . value () ; }
Code	{ return MathArrays . value () ; }
Distance : 8

19
Tree	{ return ( T ) this . data . get () ; }
Code	{ return ( T ) this . data . get () ; }
Distance : 5

20
Tree	{ return MathArrays . getTimeInstance () ; }
Code	{ return MathArrays . getTimeInstance () ; }
Distance : 8

21
Tree	{ return ( T ) T . returnMap ( clazz ) ; }
Code	{ return ( T ) T . returnMap ( clazz ) ; }
Distance : 7

22
Tree	{ return checkNotNull ( Any.ANY ) . returnZero () ; }
Code	{ return checkNotNull ( Any.ANY ) . returnZero () ; }
Distance : 5

23
Tree	{ return ( T ) reportMatcher ( clazz ) ; }
Code	{ return ( T ) reportMatcher ( clazz ) ; }
Distance : 4

24
Tree	{ return ( T ) reportMatcher ( T . get () ) ; }
Code	{ return ( T ) reportMatcher ( T . get () ) ; }
Distance : 4

25
Tree	{ return anyObject () ; }
Code	{ return anyObject () ; }
Distance : 9

26
Tree	{ return ( T ) anyObject ( Any.ANY ) . returnZero () ; }
Code	{ return ( T ) anyObject ( Any.ANY ) . returnZero () ; }
Distance : 2

27
Tree	{ return MathArrays . getDateTimeInstance () ; }
Code	{ return MathArrays . getDateTimeInstance () ; }
Distance : 8

28
Tree	{ return ( T ) reportMatcher ( getField ( clazz ) ) ; }
Code	{ return ( T ) reportMatcher ( getField ( clazz ) ) ; }
Distance : 5

29
Tree	{ return ( T ) T . returnMap ( T , ( T [] ) null ) ; }
Code	{ return ( T ) T . returnMap ( T , ( T [] ) null ) ; }
Distance : 11

30
Tree	{ return ( T ) iValues . returnFor () ; }
Code	{ return ( T ) iValues . returnFor () ; }
Distance : 5

31
Tree	{ return getCSVClone ( T ) . < T > returnNull () ; }
Code	{ return getCSVClone ( T ) . < T > returnNull () ; }
Distance : 6

32
Tree	{ return ( T ) anyObject () ; }
Code	{ return ( T ) anyObject () ; }
Distance : 6

33
Tree	{ return getCSVClone ( Any.ANY ) ; }
Code	{ return getCSVClone ( Any.ANY ) ; }
Distance : 7

34
Tree	{ checkNotNull ( LocalizedFormats.EVALUATION_FAILED ) ; return null ; }
Code	{ checkNotNull ( LocalizedFormats.EVALUATION_FAILED ) ; return null ; }
Distance : 9

35
Tree	{ return ( T ) this . value . get () ; }
Code	{ return ( T ) this . value . get () ; }
Distance : 5

36
Tree	{ return com.google.protobuf.GeneratedMessageV3 ; }
Code	{ return com.google.protobuf.GeneratedMessageV3 ; }
Distance : 10

37
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; }
Distance : 4

38
Tree	{ return ( T ) T . reportMatcher ( clazz ) ; }
Code	{ return ( T ) T . reportMatcher ( clazz ) ; }
Distance : 6

39
Tree	{ return this . commonTypes ; }
Code	{ return this . commonTypes ; }
Distance : 9

40
Tree	{ return this . toolTipGeneratorMap ; }
Code	{ return this . toolTipGeneratorMap ; }
Distance : 9

41
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnMap ( Any.ANY ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnMap ( Any.ANY ) ; }
Distance : 4

42
Tree	{ return reportMatcher ( Any.ANY ) . returnFor () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnFor () ; }
Distance : 4

43
Tree	{ return ( T ) returnString () ; }
Code	{ return ( T ) returnString () ; }
Distance : 6

44
Tree	{ return ( T ) getInterceptor ( Any.ANY ) . returnZero ( clazz ) ; }
Code	{ return ( T ) getInterceptor ( Any.ANY ) . returnZero ( clazz ) ; }
Distance : 5

45
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 6

46
Tree	{ return this . data ; }
Code	{ return this . data ; }
Distance : 9

47
Tree	{ return this . T ; }
Code	{ return this . T ; }
Distance : 9

48
Tree	{ return ( T ) anyObject ( Any.ANY ) . returnZero ( clazz ) ; }
Code	{ return ( T ) anyObject ( Any.ANY ) . returnZero ( clazz ) ; }
Distance : 5

49
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnMap ( clazz ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnMap ( clazz ) ; }
Distance : 4

50
Tree	{ return ( T ) reportMatcher ( v.data ) ; }
Code	{ return ( T ) reportMatcher ( v.data ) ; }
Distance : 4

51
Tree	{ return getCSVClone ( Any.ANY ) . returnZero () ; }
Code	{ return getCSVClone ( Any.ANY ) . returnZero () ; }
Distance : 5

52
Tree	{ return this . itemLabelGeneratorMap ; }
Code	{ return this . itemLabelGeneratorMap ; }
Distance : 9

53
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 4

54
Tree	{ return checkNotNull () ; }
Code	{ return checkNotNull () ; }
Distance : 9

55
Tree	{ return ( T ) reportMatcher ( T ) ; }
Code	{ return ( T ) reportMatcher ( T ) ; }
Distance : 4

56
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnList ( clazz ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnList ( clazz ) ; }
Distance : 4

57
Tree	{ return ( T ) anyObject ( T ) ; }
Code	{ return ( T ) anyObject ( T ) ; }
Distance : 5

58
Tree	{ return ( T ) T . returnMap () ; }
Code	{ return ( T ) T . returnMap () ; }
Distance : 5

59
Tree	{ return reportMatcher ( T ) . < T > returnNull () ; }
Code	{ return reportMatcher ( T ) . < T > returnNull () ; }
Distance : 6

60
Tree	{ return ( T ) getInterceptor () ; }
Code	{ return ( T ) getInterceptor () ; }
Distance : 6

61
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnList () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnList () ; }
Distance : 1

62
Tree	{ return this . cache ; }
Code	{ return this . cache ; }
Distance : 9

63
Tree	{ return anyObject ( Any.ANY ) . returnZero () ; }
Code	{ return anyObject ( Any.ANY ) . returnZero () ; }
Distance : 5

64
Tree	{ return ( T ) T . reportMatcher () ; }
Code	{ return ( T ) T . reportMatcher () ; }
Distance : 5

65
Tree	{ return MathArrays . instance () ; }
Code	{ return MathArrays . instance () ; }
Distance : 8

66
Tree	{ return MathArrays ; }
Code	{ return MathArrays ; }
Distance : 10

67
Tree	{ return defaultString () ; }
Code	{ return defaultString () ; }
Distance : 9

68
Tree	{ return ( T ) iValues . reportMatcher () ; }
Code	{ return ( T ) iValues . reportMatcher () ; }
Distance : 5

69
Tree	{ return ( T ) this . cause . get () ; }
Code	{ return ( T ) this . cause . get () ; }
Distance : 5

70
Tree	{ return ( T ) T . getHandler () ; }
Code	{ return ( T ) T . getHandler () ; }
Distance : 5

71
Tree	{ return ( T ) anyObject ( Any.ANY ) . returnFor () ; }
Code	{ return ( T ) anyObject ( Any.ANY ) . returnFor () ; }
Distance : 2

72
Tree	{ reportMatcher ( v.data ) ; return null ; }
Code	{ reportMatcher ( v.data ) ; return null ; }
Distance : 8

73
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 1

74
Tree	{ return ( T ) getInterceptor ( Any.ANY ) ; }
Code	{ return ( T ) getInterceptor ( Any.ANY ) ; }
Distance : 4

75
Tree	{ return checkNotNull ( T ) . < Object > returnNull () ; }
Code	{ return checkNotNull ( T ) . < Object > returnNull () ; }
Distance : 6

76
Tree	{ checkNotNull ( Any.ANY ) ; return null ; }
Code	{ checkNotNull ( Any.ANY ) ; return null ; }
Distance : 8

77
Tree	{ return ( T ) T . returnFor ( clazz ) ; }
Code	{ return ( T ) T . returnFor ( clazz ) ; }
Distance : 7

78
Tree	{ return checkNotNull ( Any.ANY ) . returnFor () ; }
Code	{ return checkNotNull ( Any.ANY ) . returnFor () ; }
Distance : 5

79
Tree	{ return ( T ) T . returnFor ( clazz , ( Object ) reportMatcher () ) ; }
Code	{ return ( T ) T . returnFor ( clazz , ( Object ) reportMatcher () ) ; }
Distance : 10

80
Tree	{ return checkNotNull ( Any.ANY ) . returnMap () ; }
Code	{ return checkNotNull ( Any.ANY ) . returnMap () ; }
Distance : 5

81
Tree	{ return ( T ) anyObject ( Any.ANY ) . returnFor ( clazz ) ; }
Code	{ return ( T ) anyObject ( Any.ANY ) . returnFor ( clazz ) ; }
Distance : 5

82
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 1

83
Tree	{ return ( T ) T . getLast () ; }
Code	{ return ( T ) T . getLast () ; }
Distance : 5

84
Tree	{ return MathArrays . valueOf () ; }
Code	{ return MathArrays . valueOf () ; }
Distance : 8

85
Tree	{ mockingProgress ( Any.ANY ) ; return null ; }
Code	{ mockingProgress ( Any.ANY ) ; return null ; }
Distance : 8

86
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 10

87
Tree	{ return ( T ) reportMatcher ( clazz . get () ) ; }
Code	{ return ( T ) reportMatcher ( clazz . get () ) ; }
Distance : 4

88
Tree	{ return anyObject ( T ) . < T > returnNull () ; }
Code	{ return anyObject ( T ) . < T > returnNull () ; }
Distance : 6

89
Tree	{ return ( T ) getInterceptor ( Any.ANY ) . returnFor () ; }
Code	{ return ( T ) getInterceptor ( Any.ANY ) . returnFor () ; }
Distance : 2

90
Tree	{ checkNotNull ( StringUtils.EMPTY ) ; return null ; }
Code	{ checkNotNull ( StringUtils.EMPTY ) ; return null ; }
Distance : 9

91
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 8

92
Tree	{ return this . time ; }
Code	{ return this . time ; }
Distance : 9

93
Tree	{ return ( T ) T . reportMatcher ( clazz , ( Object ) reportMatcher () ) ; }
Code	{ return ( T ) T . reportMatcher ( clazz , ( Object ) reportMatcher () ) ; }
Distance : 9

94
Tree	{ return ( T ) anyObject ( clazz ) ; }
Code	{ return ( T ) anyObject ( clazz ) ; }
Distance : 5

95
Tree	{ return ( T ) T . clone () ; }
Code	{ return ( T ) T . clone () ; }
Distance : 5

96
Tree	{ return ( T ) this . data . returnFor () ; }
Code	{ return ( T ) this . data . returnFor () ; }
Distance : 5

97
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Distance : 3

98
Tree	{ return ( T ) reportMatcher ( T . returnFor () ) ; }
Code	{ return ( T ) reportMatcher ( T . returnFor () ) ; }
Distance : 4

99
Tree	{ return ( T ) T . returnFor () ; }
Code	{ return ( T ) T . returnFor () ; }
Distance : 5

100
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor () ; }
Distance : 1

101
Tree	{ return ( T ) reportMatcher () ; }
Code	{ return ( T ) reportMatcher () ; }
Distance : 5

102
Tree	{ return ( T ) T . returnFor ( T , ( T [] ) null ) ; }
Code	{ return ( T ) T . returnFor ( T , ( T [] ) null ) ; }
Distance : 11

103
Tree	{ return ( T ) T . returnFor ( iValues ) ; }
Code	{ return ( T ) T . returnFor ( iValues ) ; }
Distance : 7

104
Tree	{ return ( T ) getInterceptor ( clazz ) ; }
Code	{ return ( T ) getInterceptor ( clazz ) ; }
Distance : 5

105
Tree	{ return ( T ) anyObject ( T . get () ) ; }
Code	{ return ( T ) anyObject ( T . get () ) ; }
Distance : 5

106
Tree	{ return res ; }
Code	{ return res ; }
Distance : 10

107
Tree	{ return ( T ) this . T . get () ; }
Code	{ return ( T ) this . T . get () ; }
Distance : 5

108
Tree	{ return getCSVClone () ; }
Code	{ return getCSVClone () ; }
Distance : 9

109
Tree	{ return ( T ) reportMatcher ( Null.NULL ) ; }
Code	{ return ( T ) reportMatcher ( Null.NULL ) ; }
Distance : 4

110
Tree	{ return ( T ) T . returnFor ( clazz , ( T [] ) null ) ; }
Code	{ return ( T ) T . returnFor ( clazz , ( T [] ) null ) ; }
Distance : 11

111
Tree	{ return ( T ) this . commonTypes . get () ; }
Code	{ return ( T ) this . commonTypes . get () ; }
Distance : 5

112
Tree	{ return ( T ) T . returnFor ( T ) ; }
Code	{ return ( T ) T . returnFor ( T ) ; }
Distance : 7

113
Tree	{ return getDataset ( Any.ANY ) ; }
Code	{ return getDataset ( Any.ANY ) ; }
Distance : 7

114
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnList ( Any.ANY ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnList ( Any.ANY ) ; }
Distance : 4

115
Tree	{ return MathArrays . returnFor () ; }
Code	{ return MathArrays . returnFor () ; }
Distance : 8

116
Tree	{ return org.joda.time.gwt.util.Arrays ; }
Code	{ return org.joda.time.gwt.util.Arrays ; }
Distance : 10

117
Tree	{ return ( T ) reportMatcher ( clazz , reportMatcher ( Any.ANY ) ) ; }
Code	{ return ( T ) reportMatcher ( clazz , reportMatcher ( Any.ANY ) ) ; }
Distance : 7

118
Tree	{ return ( T ) reportMatcher ( tolerance ) ; }
Code	{ return ( T ) reportMatcher ( tolerance ) ; }
Distance : 4

119
Tree	{ return MathArrays . reportMatcher () ; }
Code	{ return MathArrays . reportMatcher () ; }
Distance : 8

120
Tree	{ return cache ; }
Code	{ return cache ; }
Distance : 10

121
Tree	{ return getDataset () ; }
Code	{ return getDataset () ; }
Distance : 9

122
Tree	{ return entry.map ; }
Code	{ return entry.map ; }
Distance : 10

123
Tree	{ return ( T ) reportMatcher ( clazz , getTolerance ( Any.ANY ) ) ; }
Code	{ return ( T ) reportMatcher ( clazz , getTolerance ( Any.ANY ) ) ; }
Distance : 7

124
Tree	{ return ( T ) reportMatcher ( getField ( T ) ) ; }
Code	{ return ( T ) reportMatcher ( getField ( T ) ) ; }
Distance : 5

125
Tree	{ return RegularizedGamma.P ; }
Code	{ return RegularizedGamma.P ; }
Distance : 10

126
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( Any.ANY ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( Any.ANY ) ; }
Distance : 4

127
Tree	{ return Any.ANY ; }
Code	{ return Any.ANY ; }
Distance : 9

128
Tree	{ return ( T ) reportMatcher ( getLValue ( clazz ) ) ; }
Code	{ return ( T ) reportMatcher ( getLValue ( clazz ) ) ; }
Distance : 5

129
Tree	{ return ( T ) T . returnFor ( clazz , ( Object [] ) null ) ; }
Code	{ return ( T ) T . returnFor ( clazz , ( Object [] ) null ) ; }
Distance : 11

130
Tree	{ return ( T ) reportMatcher ( Locale.ENGLISH ) ; }
Code	{ return ( T ) reportMatcher ( Locale.ENGLISH ) ; }
Distance : 4

131
Tree	{ return ( T ) reportMatcher ( reportMatcher ( clazz ) ) ; }
Code	{ return ( T ) reportMatcher ( reportMatcher ( clazz ) ) ; }
Distance : 5

132
Tree	{ return getCumFreq () ; }
Code	{ return getCumFreq () ; }
Distance : 9

133
Tree	{ return ( T ) T . returnMap ( T ) ; }
Code	{ return ( T ) T . returnMap ( T ) ; }
Distance : 7

134
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnZero ( T ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnZero ( T ) ; }
Distance : 4

135
Tree	{ return ( T ) T . returnFor ( T , ( Object ) anyObject () ) ; }
Code	{ return ( T ) T . returnFor ( T , ( Object ) anyObject () ) ; }
Distance : 10

136
Tree	{ return ( T ) T . reportMatcher ( T , ( T [] ) null ) ; }
Code	{ return ( T ) T . reportMatcher ( T , ( T [] ) null ) ; }
Distance : 10

137
Tree	{ return ( T ) reportMatcher ( anyObject ( clazz ) ) ; }
Code	{ return ( T ) reportMatcher ( anyObject ( clazz ) ) ; }
Distance : 5

138
Tree	{ return ( T ) getInterceptor ( Any.ANY ) . returnZero () ; }
Code	{ return ( T ) getInterceptor ( Any.ANY ) . returnZero () ; }
Distance : 2

139
Tree	{ return reportMatcher ( T ) . < T > getField () ; }
Code	{ return reportMatcher ( T ) . < T > getField () ; }
Distance : 7

140
Tree	{ return ( T ) reportMatcher ( clazz , configureWith ( Any.ANY ) ) ; }
Code	{ return ( T ) reportMatcher ( clazz , configureWith ( Any.ANY ) ) ; }
Distance : 7

141
Tree	{ return ( T ) this . data . clone () ; }
Code	{ return ( T ) this . data . clone () ; }
Distance : 5

142
Tree	{ return checkNotNull ( Any.ANY ) ; }
Code	{ return checkNotNull ( Any.ANY ) ; }
Distance : 7

143
Tree	{ return ( T ) iValues . returnFor ( T ) ; }
Code	{ return ( T ) iValues . returnFor ( T ) ; }
Distance : 7

144
Tree	{ return ( T ) reportMatcher ( T , get ( Any.ANY ) ) ; }
Code	{ return ( T ) reportMatcher ( T , get ( Any.ANY ) ) ; }
Distance : 7

145
Tree	{ return iConverters.length ; }
Code	{ return iConverters.length ; }
Distance : 10

146
Tree	{ return ( T ) returnFor () ; }
Code	{ return ( T ) returnFor () ; }
Distance : 6

147
Tree	{ mockingProgress ( LocalizedFormats.EVALUATION_FAILED ) ; return null ; }
Code	{ mockingProgress ( LocalizedFormats.EVALUATION_FAILED ) ; return null ; }
Distance : 9

148
Tree	{ return ( T ) reportMatcher ( T . halfdayOfDay () ) ; }
Code	{ return ( T ) reportMatcher ( T . halfdayOfDay () ) ; }
Distance : 4

149
Tree	{ return ( T ) this . itemLabelGeneratorMap . get () ; }
Code	{ return ( T ) this . itemLabelGeneratorMap . get () ; }
Distance : 5

150
Tree	{ return ( T ) reportMatcher ( reportMatcher ( T ) ) ; }
Code	{ return ( T ) reportMatcher ( reportMatcher ( T ) ) ; }
Distance : 5

151
Tree	{ return ( T ) T . returnFor ( clazz , ( Object ) anyObject () ) ; }
Code	{ return ( T ) T . returnFor ( clazz , ( Object ) anyObject () ) ; }
Distance : 10

152
Tree	{ return ( T ) reportMatcher ( clazz . returnFor () ) ; }
Code	{ return ( T ) reportMatcher ( clazz . returnFor () ) ; }
Distance : 4

153
Tree	{ return ( T ) anyObject ( Any.ANY ) ; }
Code	{ return ( T ) anyObject ( Any.ANY ) ; }
Distance : 4

154
Tree	{ mockingProgress ( v.data ) ; return null ; }
Code	{ mockingProgress ( v.data ) ; return null ; }
Distance : 9

155
Tree	{ return ( T ) reportMatcher ( iValues ) ; }
Code	{ return ( T ) reportMatcher ( iValues ) ; }
Distance : 4

156
Tree	{ return T ; }
Code	{ return T ; }
Distance : 9

157
Tree	{ return ( T ) getInterceptor ( Any.ANY ) . returnZero ( Any.ANY ) ; }
Code	{ return ( T ) getInterceptor ( Any.ANY ) . returnZero ( Any.ANY ) ; }
Distance : 5

158
Tree	{ return ( T ) T . returnMap ( clazz , ( T [] ) null ) ; }
Code	{ return ( T ) T . returnMap ( clazz , ( T [] ) null ) ; }
Distance : 11

159
Tree	{ return anyObject ( Any.ANY ) ; }
Code	{ return anyObject ( Any.ANY ) ; }
Distance : 7

160
Tree	{ return LazyHolder.INSTANCE ; }
Code	{ return LazyHolder.INSTANCE ; }
Distance : 10

161
Tree	{ return ( T ) T . reportMatcher ( clazz , ( T [] ) null ) ; }
Code	{ return ( T ) T . reportMatcher ( clazz , ( T [] ) null ) ; }
Distance : 10

162
Tree	{ return anyObject ( T ) . < Object > returnNull () ; }
Code	{ return anyObject ( T ) . < Object > returnNull () ; }
Distance : 6

163
Tree	{ return ( T ) returnMap ( Any.ANY ) ; }
Code	{ return ( T ) returnMap ( Any.ANY ) ; }
Distance : 4

164
Tree	{ return ( T ) returnMap () ; }
Code	{ return ( T ) returnMap () ; }
Distance : 6

165
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 10

166
Tree	{ return ( T ) reportMatcher ( getLValue ( T ) ) ; }
Code	{ return ( T ) reportMatcher ( getLValue ( T ) ) ; }
Distance : 5

167
Tree	{ return ( T ) reportMatcher ( T . valueOf () ) ; }
Code	{ return ( T ) reportMatcher ( T . valueOf () ) ; }
Distance : 4

168
Tree	{ return MOCKING_PROGRESS ; }
Code	{ return MOCKING_PROGRESS ; }
Distance : 10

169
Tree	{ return ( T ) T . returnFor ( T , ( Object [] ) null ) ; }
Code	{ return ( T ) T . returnFor ( T , ( Object [] ) null ) ; }
Distance : 11

170
Tree	{ return ( T ) T . returnMap ( clazz , ( Object ) reportMatcher () ) ; }
Code	{ return ( T ) T . returnMap ( clazz , ( Object ) reportMatcher () ) ; }
Distance : 10

171
Tree	{ return ( T ) reportMatcher ( T , getEndMillis ( Any.ANY ) ) ; }
Code	{ return ( T ) reportMatcher ( T , getEndMillis ( Any.ANY ) ) ; }
Distance : 7

172
Tree	{ return ( T ) getField () ; }
Code	{ return ( T ) getField () ; }
Distance : 6

173
Tree	{ return defaultString ( Any.ANY ) ; }
Code	{ return defaultString ( Any.ANY ) ; }
Distance : 7

174
Tree	{ return ( T ) returnFor ( Any.ANY ) ; }
Code	{ return ( T ) returnFor ( Any.ANY ) ; }
Distance : 4

175
Tree	{ return ( T ) removeAll () ; }
Code	{ return ( T ) removeAll () ; }
Distance : 6

176
Tree	{ return reportMatcher ( v.data ) ; }
Code	{ return reportMatcher ( v.data ) ; }
Distance : 7

177
Tree	{ return ( T ) anyObject ( Any.ANY ) . returnZero ( Any.ANY ) ; }
Code	{ return ( T ) anyObject ( Any.ANY ) . returnZero ( Any.ANY ) ; }
Distance : 5

178
Tree	{ return StringUtils.EMPTY ; }
Code	{ return StringUtils.EMPTY ; }
Distance : 10

179
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 11

180
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 11

181
Tree	{ return ( T ) getInterceptor ( T . get () ) ; }
Code	{ return ( T ) getInterceptor ( T . get () ) ; }
Distance : 5

182
Tree	{ return ( T ) anyObject ( Any.ANY ) . returnFor ( Any.ANY ) ; }
Code	{ return ( T ) anyObject ( Any.ANY ) . returnFor ( Any.ANY ) ; }
Distance : 5

183
Tree	{ return MockHandler ; }
Code	{ return MockHandler ; }
Distance : 10

184
Tree	{ return mapToSelf ( Any.ANY ) ; }
Code	{ return mapToSelf ( Any.ANY ) ; }
Distance : 7

185
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnZero ( Locale.ENGLISH ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnZero ( Locale.ENGLISH ) ; }
Distance : 4

186
Tree	{ return CHI_SQUARE_TEST ; }
Code	{ return CHI_SQUARE_TEST ; }
Distance : 10

187
Tree	{ return Character ; }
Code	{ return Character ; }
Distance : 10

188
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 11

189
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 11

190
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 11

191
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 11

192
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 11

193
Tree	{ return STRING_CONSTANT ; } mock
Code	{ return STRING_CONSTANT ; } mock
Distance : 11

194
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 11

195
Tree	{ return STRING_CONSTANT ; } MathRuntimeException
Code	{ return STRING_CONSTANT ; } MathRuntimeException
Distance : 11

196
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 11

197
Tree	{ return STRING_CONSTANT ; } Override
Code	{ return STRING_CONSTANT ; } Override
Distance : 11

198
Tree	{ return STRING_CONSTANT ; } f
Code	{ return STRING_CONSTANT ; } f
Distance : 11

199
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 11

========================================================================


========================================================================
Example Number: 97
Parent Code is: 
{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return ( T ) reportMatcher ( new InstanceOf ( clazz ) ) . returnFor ( clazz ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnFor}) (214{val=(}) (800{val=clazz}) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (800{val=clazz}) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnFor}) (214{val=(}) (800{val=clazz}) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 5
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ key = T . join ( map ) ; return null ; }
Code	{ key = T . join ( map ) ; return null ; }
Distance : 14

1
Tree	{ return anyObject ( T . valueOf ( clazz ) ) ; }
Code	{ return anyObject ( T . valueOf ( clazz ) ) ; }
Distance : 11

2
Tree	{ return anyObject ( Any.ANY ) . returnFor () ; }
Code	{ return anyObject ( Any.ANY ) . returnFor () ; }
Distance : 12

3
Tree	{ key = T . get ( map ) ; return null ; }
Code	{ key = T . get ( map ) ; return null ; }
Distance : 14

4
Tree	{ key = T . reportMatcher ( map ) ; return null ; }
Code	{ key = T . reportMatcher ( map ) ; return null ; }
Distance : 13

5
Tree	{ return anyObject () . reportMatcher ( super , false ) ; }
Code	{ return anyObject () . reportMatcher ( super , false ) ; }
Distance : 13

6
Tree	{ return ( T ) reportMatcher ( clazz , getMillis ( Any.ANY ) ) ; }
Code	{ return ( T ) reportMatcher ( clazz , getMillis ( Any.ANY ) ) ; }
Distance : 9

7
Tree	{ return ( T ) reportMatcher ( clazz ) ; }
Code	{ return ( T ) reportMatcher ( clazz ) ; }
Distance : 9

8
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 14

9
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; }
Distance : 5

10
Tree	{ checkNotNull ( Any.ANY ) ; return null ; }
Code	{ checkNotNull ( Any.ANY ) ; return null ; }
Distance : 15

11
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Distance : 10

12
Tree	{ mockingProgress ( Any.ANY ) ; return null ; }
Code	{ mockingProgress ( Any.ANY ) ; return null ; }
Distance : 15

13
Tree	{ recordImplicitInterfaceUses ( Any.ANY ) ; return null ; }
Code	{ recordImplicitInterfaceUses ( Any.ANY ) ; return null ; }
Distance : 15

14
Tree	{ return ( T ) anyObject ( Any.ANY ) ; }
Code	{ return ( T ) anyObject ( Any.ANY ) ; }
Distance : 11

15
Tree	{ super += }
Code	{ super += }
Distance : 18

16
Tree	{ return reportMatcher ( T . valueOf ( clazz ) ) ; }
Code	{ return reportMatcher ( T . valueOf ( clazz ) ) ; }
Distance : 11

17
Tree	{ super . createIllegalArgumentException () ; return null ; }
Code	{ super . createIllegalArgumentException () ; return null ; }
Distance : 17

18
Tree	{ return this . itemLabelGeneratorMap . returnFor ( RETURNS_DEFAULTS ) ; }
Code	{ return this . itemLabelGeneratorMap . returnFor ( RETURNS_DEFAULTS ) ; }
Distance : 12

19
Tree	{ return ( T ) reportMatcher ( v.data ) ; }
Code	{ return ( T ) reportMatcher ( v.data ) ; }
Distance : 10

20
Tree	{ key = T . join ( nSteps ) ; return null ; }
Code	{ key = T . join ( nSteps ) ; return null ; }
Distance : 14

21
Tree	{ return ( T ) getInterceptor ( clazz ) ; }
Code	{ return ( T ) getInterceptor ( clazz ) ; }
Distance : 10

22
Tree	{ return reportMatcher () . reportMatcher ( super , super ) ; }
Code	{ return reportMatcher () . reportMatcher ( super , super ) ; }
Distance : 13

23
Tree	{ key = T . matcher ( map ) ; return clazz ; }
Code	{ key = T . matcher ( map ) ; return clazz ; }
Distance : 13

24
Tree	{ return anyObject ( this , DurationType ) ; }
Code	{ return anyObject ( this , DurationType ) ; }
Distance : 14

25
Tree	{ return reportMatcher ( this , n ) ; }
Code	{ return reportMatcher ( this , n ) ; }
Distance : 13

26
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 16

27
Tree	{ return MathArrays . getDateTimeInstance ( nSteps ) . returnFor ( super , short ) ; }
Code	{ return MathArrays . getDateTimeInstance ( nSteps ) . returnFor ( super , short ) ; }
Distance : 12

28
Tree	{ return ( T ) reportMatcher ( clazz , getUnitMillis ( Any.ANY ) ) ; }
Code	{ return ( T ) reportMatcher ( clazz , getUnitMillis ( Any.ANY ) ) ; }
Distance : 9

29
Tree	{ return checkNotNull ( Any.ANY ) ; }
Code	{ return checkNotNull ( Any.ANY ) ; }
Distance : 14

30
Tree	{ return reportMatcher ( T ) ; }
Code	{ return reportMatcher ( T ) ; }
Distance : 13

31
Tree	{ return cache . getDateTimeInstance ( nSteps ) . returnFor ( super , short ) ; }
Code	{ return cache . getDateTimeInstance ( nSteps ) . returnFor ( super , short ) ; }
Distance : 12

32
Tree	{ return reportMatcher ( T , get ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( T , get ( Any.ANY ) ) ; }
Distance : 12

33
Tree	{ key = T . matcher ( map ) ; return null ; }
Code	{ key = T . matcher ( map ) ; return null ; }
Distance : 14

34
Tree	{ return checkNotNull ( Any.ANY ) . returnFor () ; }
Code	{ return checkNotNull ( Any.ANY ) . returnFor () ; }
Distance : 12

35
Tree	{ return ( T ) reportMatcher ( NotNull.NOT_NULL ) . returnFor ( clazz ) ; }
Code	{ return ( T ) reportMatcher ( NotNull.NOT_NULL ) . returnFor ( clazz ) ; }
Distance : 5

36
Tree	{ return ( T ) reportMatcher ( CLASS_NAME_USING_INTERFACE ) ; }
Code	{ return ( T ) reportMatcher ( CLASS_NAME_USING_INTERFACE ) ; }
Distance : 10

37
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 13

38
Tree	{ printTo ( Any.ANY ) ; return null ; }
Code	{ printTo ( Any.ANY ) ; return null ; }
Distance : 15

39
Tree	{ assertEquals ( Any.ANY ) ; return null ; }
Code	{ assertEquals ( Any.ANY ) ; return null ; }
Distance : 15

40
Tree	{ enableNormalize ( Any.ANY ) ; return null ; }
Code	{ enableNormalize ( Any.ANY ) ; return null ; }
Distance : 15

41
Tree	{ return getCSVClone ( this , T ) ; }
Code	{ return getCSVClone ( this , T ) ; }
Distance : 14

42
Tree	{ return anyObject ( this , clazz ) ; }
Code	{ return anyObject ( this , clazz ) ; }
Distance : 13

43
Tree	{ return reportMatcher ( this , T ) ; }
Code	{ return reportMatcher ( this , T ) ; }
Distance : 13

44
Tree	{ return MathArrays . getDateTimeInstance ( map ) ; }
Code	{ return MathArrays . getDateTimeInstance ( map ) ; }
Distance : 13

45
Tree	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; }
Code	{ return reportMatcher ( Any.ANY ) . returnFor ( clazz ) ; }
Distance : 8

46
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 15

47
Tree	{ if super }
Code	{ if super }
Distance : 18

48
Tree	{ return anyObject () ; }
Code	{ return anyObject () ; }
Distance : 16

49
Tree	{ return getFragment ( Any.ANY ) . returnFor ( clazz ) ; }
Code	{ return getFragment ( Any.ANY ) . returnFor ( clazz ) ; }
Distance : 9

50
Tree	{ return anyObject ( Any.ANY ) ; }
Code	{ return anyObject ( Any.ANY ) ; }
Distance : 14

51
Tree	{ return reportMatcher ( this , DurationType ) ; }
Code	{ return reportMatcher ( this , DurationType ) ; }
Distance : 13

52
Tree	{ return getCumFreq ( Any.ANY ) ; }
Code	{ return getCumFreq ( Any.ANY ) ; }
Distance : 14

53
Tree	{ return ( T ) matcher . returnMap ( clazz ) ; }
Code	{ return ( T ) matcher . returnMap ( clazz ) ; }
Distance : 9

54
Tree	{ return reportMatcher ( this , clazz ) ; }
Code	{ return reportMatcher ( this , clazz ) ; }
Distance : 12

55
Tree	{ return MathArrays . getDateTimeInstance ( iValues ) ; }
Code	{ return MathArrays . getDateTimeInstance ( iValues ) ; }
Distance : 13

56
Tree	{ return ( T ) matcher . returnFor ( clazz ) ; }
Code	{ return ( T ) matcher . returnFor ( clazz ) ; }
Distance : 8

57
Tree	{ return ( MockHandler ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( MockHandler ) reportMatcher ( Any.ANY ) ; }
Distance : 11

58
Tree	{ return anyObject ( this , T ) ; }
Code	{ return anyObject ( this , T ) ; }
Distance : 14

59
Tree	{ super if }
Code	{ super if }
Distance : 18

60
Tree	{ return getCSVClone ( Any.ANY ) . returnFor ( clazz ) ; }
Code	{ return getCSVClone ( Any.ANY ) . returnFor ( clazz ) ; }
Distance : 9

61
Tree	{ return mapToSelf ( Any.ANY ) . returnFor ( clazz ) ; }
Code	{ return mapToSelf ( Any.ANY ) . returnFor ( clazz ) ; }
Distance : 9

62
Tree	{ return getCumFreq ( Any.ANY ) . returnFor () ; }
Code	{ return getCumFreq ( Any.ANY ) . returnFor () ; }
Distance : 12

63
Tree	{ return ( T ) reportMatcher ( clazz , reportMatcher ( Any.ANY ) ) ; }
Code	{ return ( T ) reportMatcher ( clazz , reportMatcher ( Any.ANY ) ) ; }
Distance : 9

64
Tree	{ return getCSVClone () ; }
Code	{ return getCSVClone () ; }
Distance : 16

65
Tree	{ return mapToSelf () ; }
Code	{ return mapToSelf () ; }
Distance : 16

66
Tree	{ return null ; }
Code	{ return null ; }
Distance : 16

67
Tree	{ return ( T ) reportMatcher ( clazz , configureWith ( Any.ANY ) ) ; }
Code	{ return ( T ) reportMatcher ( clazz , configureWith ( Any.ANY ) ) ; }
Distance : 9

68
Tree	{ return ( T ) T . returnFor ( clazz ) ; }
Code	{ return ( T ) T . returnFor ( clazz ) ; }
Distance : 8

69
Tree	{ return cache . getDateTimeInstance ( T ) ; }
Code	{ return cache . getDateTimeInstance ( T ) ; }
Distance : 13

70
Tree	{ return anyObject ( Any.ANY ) . returnFor ( clazz ) ; }
Code	{ return anyObject ( Any.ANY ) . returnFor ( clazz ) ; }
Distance : 9

71
Tree	{ return ( T ) reportMatcher ( clazz , getEndMillis ( Any.ANY ) ) ; }
Code	{ return ( T ) reportMatcher ( clazz , getEndMillis ( Any.ANY ) ) ; }
Distance : 9

72
Tree	{ return ( T ) object . returnMap ( clazz ) ; }
Code	{ return ( T ) object . returnMap ( clazz ) ; }
Distance : 9

73
Tree	{ return this . itemLabelGeneratorMap . returnFor ( nSteps ) ; }
Code	{ return this . itemLabelGeneratorMap . returnFor ( nSteps ) ; }
Distance : 12

74
Tree	{ return checkNotNull () ; }
Code	{ return checkNotNull () ; }
Distance : 16

75
Tree	{ return this . toolTipGeneratorMap . returnFor ( iValues ) ; }
Code	{ return this . toolTipGeneratorMap . returnFor ( iValues ) ; }
Distance : 12

76
Tree	{ return getCumFreq () ; }
Code	{ return getCumFreq () ; }
Distance : 16

77
Tree	{ return reportMatcher ( Any.ANY ) . returnFor () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnFor () ; }
Distance : 11

78
Tree	{ return defaultString () ; }
Code	{ return defaultString () ; }
Distance : 16

79
Tree	{ return ( T ) reportMatcher ( clazz , get ( Any.ANY ) ) ; }
Code	{ return ( T ) reportMatcher ( clazz , get ( Any.ANY ) ) ; }
Distance : 9

80
Tree	{ return checkNotNull ( Any.ANY ) . returnFor ( clazz ) ; }
Code	{ return checkNotNull ( Any.ANY ) . returnFor ( clazz ) ; }
Distance : 9

81
Tree	{ return this . cache . returnFor ( nSteps ) ; }
Code	{ return this . cache . returnFor ( nSteps ) ; }
Distance : 12

82
Tree	{ return defaultString ( Any.ANY ) ; }
Code	{ return defaultString ( Any.ANY ) ; }
Distance : 14

83
Tree	{ return anyObject ( T ) ; }
Code	{ return anyObject ( T ) ; }
Distance : 14

84
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnMap ( clazz ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnMap ( clazz ) ; }
Distance : 6

85
Tree	{ return getCSVClone ( Any.ANY ) ; }
Code	{ return getCSVClone ( Any.ANY ) ; }
Distance : 14

86
Tree	{ return anyObject () . reportMatcher ( super , super ) ; }
Code	{ return anyObject () . reportMatcher ( super , super ) ; }
Distance : 13

87
Tree	{ return ( T ) getInterceptor ( Any.ANY ) ; }
Code	{ return ( T ) getInterceptor ( Any.ANY ) ; }
Distance : 11

88
Tree	{ return reportMatcher ( T , reportMatcher ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( T , reportMatcher ( Any.ANY ) ) ; }
Distance : 11

89
Tree	{ return mapToSelf ( Any.ANY ) ; }
Code	{ return mapToSelf ( Any.ANY ) ; }
Distance : 14

90
Tree	{ return getFragment () ; }
Code	{ return getFragment () ; }
Distance : 16

91
Tree	{ return getCSVClone ( T . valueOf ( clazz ) ) ; }
Code	{ return getCSVClone ( T . valueOf ( clazz ) ) ; }
Distance : 11

92
Tree	{ return defaultString ( Any.ANY ) . returnFor () ; }
Code	{ return defaultString ( Any.ANY ) . returnFor () ; }
Distance : 12

93
Tree	{ return getCSVClone () . reportMatcher ( super , super ) ; }
Code	{ return getCSVClone () . reportMatcher ( super , super ) ; }
Distance : 13

94
Tree	{ super . setUp () ; return null ; }
Code	{ super . setUp () ; return null ; }
Distance : 17

95
Tree	{ return mapToSelf ( T . valueOf ( clazz ) ) ; }
Code	{ return mapToSelf ( T . valueOf ( clazz ) ) ; }
Distance : 11

96
Tree	{ key = T . join ( period ) ; return null ; }
Code	{ key = T . join ( period ) ; return null ; }
Distance : 14

97
Tree	{ return getCSVClone ( T ) ; }
Code	{ return getCSVClone ( T ) ; }
Distance : 14

98
Tree	{ return getCSVClone ( Any.ANY ) . returnFor () ; }
Code	{ return getCSVClone ( Any.ANY ) . returnFor () ; }
Distance : 12

99
Tree	{ return MathArrays . getDateTimeInstance ( nSteps ) ; }
Code	{ return MathArrays . getDateTimeInstance ( nSteps ) ; }
Distance : 13

100
Tree	{ return ( T ) reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; }
Code	{ return ( T ) reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; }
Distance : 10

101
Tree	{ return cache . getDateTimeInstance ( nSteps ) ; }
Code	{ return cache . getDateTimeInstance ( nSteps ) ; }
Distance : 13

102
Tree	{ return getFragment ( Any.ANY ) . returnFor () ; }
Code	{ return getFragment ( Any.ANY ) . returnFor () ; }
Distance : 12

103
Tree	{ return getFragment ( Any.ANY ) ; }
Code	{ return getFragment ( Any.ANY ) ; }
Distance : 14

104
Tree	{ return getCumFreq ( Any.ANY ) . returnFor ( clazz ) ; }
Code	{ return getCumFreq ( Any.ANY ) . returnFor ( clazz ) ; }
Distance : 9

105
Tree	{ return this . itemLabelGeneratorMap . returnFor ( iValues ) ; }
Code	{ return this . itemLabelGeneratorMap . returnFor ( iValues ) ; }
Distance : 12

106
Tree	{ return defaultString ( Any.ANY ) . returnFor ( clazz ) ; }
Code	{ return defaultString ( Any.ANY ) . returnFor ( clazz ) ; }
Distance : 9

107
Tree	{ key = T . get ( map ) ; return clazz ; }
Code	{ key = T . get ( map ) ; return clazz ; }
Distance : 13

108
Tree	{ key = T . get ( nSteps ) ; return null ; }
Code	{ key = T . get ( nSteps ) ; return null ; }
Distance : 14

109
Tree	{ return cache . getDateTimeInstance ( iValues ) ; }
Code	{ return cache . getDateTimeInstance ( iValues ) ; }
Distance : 13

110
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnZero ( clazz ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnZero ( clazz ) ; }
Distance : 6

111
Tree	{ key = T . reportMatcher ( nSteps ) ; return null ; }
Code	{ key = T . reportMatcher ( nSteps ) ; return null ; }
Distance : 13

112
Tree	{ return ( T ) reportMatcher ( externs ) ; }
Code	{ return ( T ) reportMatcher ( externs ) ; }
Distance : 10

113
Tree	{ return getCumFreq ( T . valueOf ( clazz ) ) ; }
Code	{ return getCumFreq ( T . valueOf ( clazz ) ) ; }
Distance : 11

114
Tree	{ return this . itemLabelGeneratorMap . returnFor ( map ) ; }
Code	{ return this . itemLabelGeneratorMap . returnFor ( map ) ; }
Distance : 12

115
Tree	{ return mapToSelf ( Any.ANY ) . returnFor () ; }
Code	{ return mapToSelf ( Any.ANY ) . returnFor () ; }
Distance : 12

116
Tree	{ return anyObject ( T , reportMatcher ( Any.ANY ) ) ; }
Code	{ return anyObject ( T , reportMatcher ( Any.ANY ) ) ; }
Distance : 11

117
Tree	{ return mapToSelf ( T ) ; }
Code	{ return mapToSelf ( T ) ; }
Distance : 14

118
Tree	{ throw super }
Code	{ throw super }
Distance : 18

119
Tree	{ super . verifyIterationCount () ; return null ; }
Code	{ super . verifyIterationCount () ; return null ; }
Distance : 17

120
Tree	{ Override = checkNotNull ( T ) ; return null ; }
Code	{ Override = checkNotNull ( T ) ; return null ; }
Distance : 15

121
Tree	{ MOCKING_PROGRESS = checkNotNull ( T ) ; return null ; }
Code	{ MOCKING_PROGRESS = checkNotNull ( T ) ; return null ; }
Distance : 15

122
Tree	{ return getCumFreq ( T ) ; }
Code	{ return getCumFreq ( T ) ; }
Distance : 14

123
Tree	{ key = T . reportMatcher ( map ) ; return clazz ; }
Code	{ key = T . reportMatcher ( map ) ; return clazz ; }
Distance : 12

124
Tree	{ return reportMatcher () . reportMatcher ( super , false ) ; }
Code	{ return reportMatcher () . reportMatcher ( super , false ) ; }
Distance : 13

125
Tree	{ return defaultString ( T . valueOf ( clazz ) ) ; }
Code	{ return defaultString ( T . valueOf ( clazz ) ) ; }
Distance : 11

126
Tree	{ super return }
Code	{ super return }
Distance : 18

127
Tree	{ return MathArrays . getDateTimeInstance ( T ) ; }
Code	{ return MathArrays . getDateTimeInstance ( T ) ; }
Distance : 13

128
Tree	{ return defaultString ( T ) ; }
Code	{ return defaultString ( T ) ; }
Distance : 14

129
Tree	{ return getCSVClone () . reportMatcher ( super , false ) ; }
Code	{ return getCSVClone () . reportMatcher ( super , false ) ; }
Distance : 13

130
Tree	{ key = T . join ( map ) ; return clazz ; }
Code	{ key = T . join ( map ) ; return clazz ; }
Distance : 13

131
Tree	{ key = T . join ( nSteps ) ; return clazz ; }
Code	{ key = T . join ( nSteps ) ; return clazz ; }
Distance : 13

132
Tree	{ value = checkNotNull ( T ) ; return null ; }
Code	{ value = checkNotNull ( T ) ; return null ; }
Distance : 15

133
Tree	{ return reportMatcher () . reportMatcher ( short , false ) ; }
Code	{ return reportMatcher () . reportMatcher ( short , false ) ; }
Distance : 13

134
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFalse ( clazz ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFalse ( clazz ) ; }
Distance : 6

135
Tree	{ return ( T ) object . returnFor ( clazz ) ; }
Code	{ return ( T ) object . returnFor ( clazz ) ; }
Distance : 8

136
Tree	{ return this . toolTipGeneratorMap . returnFor ( nSteps ) ; }
Code	{ return this . toolTipGeneratorMap . returnFor ( nSteps ) ; }
Distance : 12

137
Tree	{ return getFragment ( T . valueOf ( clazz ) ) ; }
Code	{ return getFragment ( T . valueOf ( clazz ) ) ; }
Distance : 11

138
Tree	{ compiler = checkNotNull ( T ) ; return null ; }
Code	{ compiler = checkNotNull ( T ) ; return null ; }
Distance : 15

139
Tree	{ return getCSVClone ( T , reportMatcher ( Any.ANY ) ) ; }
Code	{ return getCSVClone ( T , reportMatcher ( Any.ANY ) ) ; }
Distance : 11

140
Tree	{ super super }
Code	{ super super }
Distance : 18

141
Tree	{ return reportMatcher ( T , getMillis ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( T , getMillis ( Any.ANY ) ) ; }
Distance : 12

142
Tree	{ return ( T ) reportMatcher ( clazz , anyObject ( Any.ANY ) ) ; }
Code	{ return ( T ) reportMatcher ( clazz , anyObject ( Any.ANY ) ) ; }
Distance : 9

143
Tree	{ return mapToSelf () . reportMatcher ( super , false ) ; }
Code	{ return mapToSelf () . reportMatcher ( super , false ) ; }
Distance : 13

144
Tree	{ return this . toolTipGeneratorMap . returnFor ( RETURNS_DEFAULTS ) ; }
Code	{ return this . toolTipGeneratorMap . returnFor ( RETURNS_DEFAULTS ) ; }
Distance : 12

145
Tree	{ key = checkNotNull ( T ) ; return null ; }
Code	{ key = checkNotNull ( T ) ; return null ; }
Distance : 15

146
Tree	{ super . checkNotNull () ; return null ; }
Code	{ super . checkNotNull () ; return null ; }
Distance : 17

147
Tree	{ return anyObject ( T , get ( Any.ANY ) ) ; }
Code	{ return anyObject ( T , get ( Any.ANY ) ) ; }
Distance : 12

148
Tree	{ return mapToSelf ( T , reportMatcher ( Any.ANY ) ) ; }
Code	{ return mapToSelf ( T , reportMatcher ( Any.ANY ) ) ; }
Distance : 11

149
Tree	{ return ( T ) reportMatcher ( Null.NULL ) . returnFor ( clazz ) ; }
Code	{ return ( T ) reportMatcher ( Null.NULL ) . returnFor ( clazz ) ; }
Distance : 5

150
Tree	{ return ( T ) reportMatcher ( Null.NULL ) ; }
Code	{ return ( T ) reportMatcher ( Null.NULL ) ; }
Distance : 10

151
Tree	{ checkPrinter ( Any.ANY ) ; return null ; }
Code	{ checkPrinter ( Any.ANY ) ; return null ; }
Distance : 15

152
Tree	{ return checkNotNull ( T ) ; }
Code	{ return checkNotNull ( T ) ; }
Distance : 14

153
Tree	{ return reportMatcher ( T , valueOf ( Any.ANY ) ) ; }
Code	{ return reportMatcher ( T , valueOf ( Any.ANY ) ) ; }
Distance : 12

154
Tree	{ return ( T ) reportMatcher ( clazz , valueOf ( Any.ANY ) ) ; }
Code	{ return ( T ) reportMatcher ( clazz , valueOf ( Any.ANY ) ) ; }
Distance : 9

155
Tree	{ return getFragment ( T ) ; }
Code	{ return getFragment ( T ) ; }
Distance : 14

156
Tree	{ res = checkNotNull ( T ) ; return null ; }
Code	{ res = checkNotNull ( T ) ; return null ; }
Distance : 15

157
Tree	{ return checkNotNull ( T . valueOf ( clazz ) ) ; }
Code	{ return checkNotNull ( T . valueOf ( clazz ) ) ; }
Distance : 11

158
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . setCostAccuracy ( clazz ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . setCostAccuracy ( clazz ) ; }
Distance : 6

159
Tree	{ MathArrays = checkNotNull ( T ) ; return null ; }
Code	{ MathArrays = checkNotNull ( T ) ; return null ; }
Distance : 15

160
Tree	{ Preconditions = checkNotNull ( T ) ; return null ; }
Code	{ Preconditions = checkNotNull ( T ) ; return null ; }
Distance : 15

161
Tree	{ return ( MockHandler ) reportMatcher ( clazz ) ; }
Code	{ return ( MockHandler ) reportMatcher ( clazz ) ; }
Distance : 10

162
Tree	{ return MathArrays . getDateTimeInstance ( map ) . returnFor ( super , false ) ; }
Code	{ return MathArrays . getDateTimeInstance ( map ) . returnFor ( super , false ) ; }
Distance : 12

163
Tree	{ return cache . getDateTimeInstance ( iValues ) . returnFor ( super , false ) ; }
Code	{ return cache . getDateTimeInstance ( iValues ) . returnFor ( super , false ) ; }
Distance : 12

164
Tree	{ return ( T ) object . reportMatcher ( clazz ) ; }
Code	{ return ( T ) object . reportMatcher ( clazz ) ; }
Distance : 9

165
Tree	{ return MathArrays . getDateTimeInstance ( iValues ) . returnFor ( super , false ) ; }
Code	{ return MathArrays . getDateTimeInstance ( iValues ) . returnFor ( super , false ) ; }
Distance : 12

166
Tree	{ return ( T ) anyObject ( clazz ) ; }
Code	{ return ( T ) anyObject ( clazz ) ; }
Distance : 10

167
Tree	{ return cache . getDateTimeInstance ( map ) ; }
Code	{ return cache . getDateTimeInstance ( map ) ; }
Distance : 13

168
Tree	{ key = T . get ( nSteps ) ; return clazz ; }
Code	{ key = T . get ( nSteps ) ; return clazz ; }
Distance : 13

169
Tree	{ return MathArrays . getDateTimeInstance ( nSteps ) . returnFor ( super , false ) ; }
Code	{ return MathArrays . getDateTimeInstance ( nSteps ) . returnFor ( super , false ) ; }
Distance : 12

170
Tree	{ return cache . getDateTimeInstance ( nSteps ) . returnFor ( super , false ) ; }
Code	{ return cache . getDateTimeInstance ( nSteps ) . returnFor ( super , false ) ; }
Distance : 12

171
Tree	{ return ( T ) matcher . reportMatcher ( clazz ) ; }
Code	{ return ( T ) matcher . reportMatcher ( clazz ) ; }
Distance : 9

172
Tree	{ key = T . reportMatcher ( nSteps ) ; return clazz ; }
Code	{ key = T . reportMatcher ( nSteps ) ; return clazz ; }
Distance : 12

173
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnList ( clazz ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnList ( clazz ) ; }
Distance : 6

174
Tree	{ super . ensureLibraryInjected () ; return null ; }
Code	{ super . ensureLibraryInjected () ; return null ; }
Distance : 17

175
Tree	{ super . unsupported () ; return null ; }
Code	{ super . unsupported () ; return null ; }
Distance : 17

176
Tree	{ super . nullNotPermitted () ; return null ; }
Code	{ super . nullNotPermitted () ; return null ; }
Distance : 17

177
Tree	{ throw return }
Code	{ throw return }
Distance : 18

178
Tree	{ return ( T ) reportMatcher ( NotNull.NOT_NULL ) ; }
Code	{ return ( T ) reportMatcher ( NotNull.NOT_NULL ) ; }
Distance : 10

179
Tree	{ super . createIllegalStateException () ; return null ; }
Code	{ super . createIllegalStateException () ; return null ; }
Distance : 17

180
Tree	{ return ( specific ) reportMatcher ( clazz ) ; }
Code	{ return ( specific ) reportMatcher ( clazz ) ; }
Distance : 10

181
Tree	{ return ( T ) matcher ( clazz ) ; }
Code	{ return ( T ) matcher ( clazz ) ; }
Distance : 10

182
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 16

183
Tree	{ key = T . join ( period ) ; return clazz ; }
Code	{ key = T . join ( period ) ; return clazz ; }
Distance : 13

184
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 16

185
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 16

186
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 16

187
Tree	{ return cache . getDateTimeInstance ( map ) . returnFor ( super , false ) ; }
Code	{ return cache . getDateTimeInstance ( map ) . returnFor ( super , false ) ; }
Distance : 12

188
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 16

189
Tree	{ return ( T ) T . reportMatcher ( clazz ) ; }
Code	{ return ( T ) T . reportMatcher ( clazz ) ; }
Distance : 9

190
Tree	{ if return }
Code	{ if return }
Distance : 18

191
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 17

192
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 17

193
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 17

194
Tree	{ return STRING_CONSTANT ; } f
Code	{ return STRING_CONSTANT ; } f
Distance : 17

195
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 17

196
Tree	{ return STRING_CONSTANT ; } mock
Code	{ return STRING_CONSTANT ; } mock
Distance : 17

197
Tree	{ return STRING_CONSTANT ; } MathRuntimeException
Code	{ return STRING_CONSTANT ; } MathRuntimeException
Distance : 17

198
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 17

199
Tree	{ return STRING_CONSTANT ; } Override
Code	{ return STRING_CONSTANT ; } Override
Distance : 17

========================================================================


========================================================================
Example Number: 98
Parent Code is: 
{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return ( T ) reportMatcher ( new InstanceOf ( Object . class ) ) . returnNull () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnNull}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (11 (214{val=(}) (43 (800{val=T})) (215{val=)}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Object})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnNull}) (216{val=()}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ return ( T ) this . arguments . get () ; }
Code	{ return ( T ) this . arguments . get () ; }
Distance : 10

1
Tree	{ super ( T . get ( iValues ) ) ; returnNull () ; }
Code	{ super ( T . get ( iValues ) ) ; returnNull () ; }
Distance : 10

2
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . wholeHyperplane () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . wholeHyperplane () ; }
Distance : 8

3
Tree	{ return ( T ) anyObject ( Any.ANY ) . returnNull () ; }
Code	{ return ( T ) anyObject ( Any.ANY ) . returnNull () ; }
Distance : 8

4
Tree	{ return ( T ) T . removeAll () ; }
Code	{ return ( T ) T . removeAll () ; }
Distance : 11

5
Tree	{ super ( T . get ( nSteps ) ) ; mockingProgress () ; }
Code	{ super ( T . get ( nSteps ) ) ; mockingProgress () ; }
Distance : 11

6
Tree	{ return ( T ) getInterceptor ( Any.ANY ) . returnZero () ; }
Code	{ return ( T ) getInterceptor ( Any.ANY ) . returnZero () ; }
Distance : 9

7
Tree	{ return ( T ) reportMatcher ( NotNull.NOT_NULL ) ; }
Code	{ return ( T ) reportMatcher ( NotNull.NOT_NULL ) ; }
Distance : 10

8
Tree	{ return defaultString ( Any.ANY ) ; }
Code	{ return defaultString ( Any.ANY ) ; }
Distance : 14

9
Tree	{ return getCumFreq ( Any.ANY ) ; }
Code	{ return getCumFreq ( Any.ANY ) ; }
Distance : 14

10
Tree	{ return ( T ) T . returnFor () ; }
Code	{ return ( T ) T . returnFor () ; }
Distance : 11

11
Tree	{ return ( T ) T . getLast () ; }
Code	{ return ( T ) T . getLast () ; }
Distance : 11

12
Tree	{ super ( T . get ( initializeCalls ) ) ; returnNull () ; }
Code	{ super ( T . get ( initializeCalls ) ) ; returnNull () ; }
Distance : 10

13
Tree	{ return res ; }
Code	{ return res ; }
Distance : 16

14
Tree	{ mockingProgress . nullNotPermitted ( Any.ANY ) ; return null ; }
Code	{ mockingProgress . nullNotPermitted ( Any.ANY ) ; return null ; }
Distance : 15

15
Tree	{ checkNotNull ( Any.ANY ) ; reportMatcher () ; super }
Code	{ checkNotNull ( Any.ANY ) ; reportMatcher () ; super }
Distance : 15

16
Tree	{ return ( T ) removeAll ( Any.ANY ) ; }
Code	{ return ( T ) removeAll ( Any.ANY ) ; }
Distance : 11

17
Tree	{ return ( T ) reportMatcher () ; }
Code	{ return ( T ) reportMatcher () ; }
Distance : 11

18
Tree	{ return getCSVClone () ; }
Code	{ return getCSVClone () ; }
Distance : 15

19
Tree	{ enableNormalize ( Any.ANY ) ; return null ; }
Code	{ enableNormalize ( Any.ANY ) ; return null ; }
Distance : 15

20
Tree	{ return mapToSelf () ; }
Code	{ return mapToSelf () ; }
Distance : 15

21
Tree	{ compiler . printTo ( Any.ANY ) ; return null ; }
Code	{ compiler . printTo ( Any.ANY ) ; return null ; }
Distance : 15

22
Tree	{ return ( T ) reportMatcher ( map ) . returnNull () ; }
Code	{ return ( T ) reportMatcher ( map ) . returnNull () ; }
Distance : 7

23
Tree	{ return ( T ) reportMatcher ( array . returnNull () ) ; }
Code	{ return ( T ) reportMatcher ( array . returnNull () ) ; }
Distance : 9

24
Tree	{ super ( T ) ; mockingProgress ( Null.NULL ) ; }
Code	{ super ( T ) ; mockingProgress ( Null.NULL ) ; }
Distance : 12

25
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 14

26
Tree	{ return reportMatcher () ; }
Code	{ return reportMatcher () ; }
Distance : 14

27
Tree	{ Preconditions . nullNotPermitted ( Any.ANY ) ; return null ; }
Code	{ Preconditions . nullNotPermitted ( Any.ANY ) ; return null ; }
Distance : 15

28
Tree	{ reportMatcher ( Any.ANY , Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , Any.ANY ) ; return null ; }
Distance : 14

29
Tree	{ super ( T ) ; createPattern ( Any.ANY ) ; }
Code	{ super ( T ) ; createPattern ( Any.ANY ) ; }
Distance : 12

30
Tree	{ mockingProgress ( Any.ANY ) ; return null ; }
Code	{ mockingProgress ( Any.ANY ) ; return null ; }
Distance : 15

31
Tree	{ return ( T ) reportMatcher ( RETURNS_DEFAULTS . returnNull () ) ; }
Code	{ return ( T ) reportMatcher ( RETURNS_DEFAULTS . returnNull () ) ; }
Distance : 9

32
Tree	{ return ( T ) reportMatcher ( Object ) ; }
Code	{ return ( T ) reportMatcher ( Object ) ; }
Distance : 9

33
Tree	{ return ( T ) T . returnNull ( DurationFieldType ) ; }
Code	{ return ( T ) T . returnNull ( DurationFieldType ) ; }
Distance : 11

34
Tree	{ return null ; }
Code	{ return null ; }
Distance : 16

35
Tree	{ return getCumFreq () ; }
Code	{ return getCumFreq () ; }
Distance : 15

36
Tree	{ mockingProgress ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Code	{ mockingProgress ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Distance : 15

37
Tree	{ return ( MockHandler ) reportMatcher () ; }
Code	{ return ( MockHandler ) reportMatcher () ; }
Distance : 12

38
Tree	{ return ( T ) reportMatcher ( RETURNS_DEFAULTS ) ; }
Code	{ return ( T ) reportMatcher ( RETURNS_DEFAULTS ) ; }
Distance : 10

39
Tree	{ return getTSVClone () ; }
Code	{ return getTSVClone () ; }
Distance : 15

40
Tree	{ checkNotNull ( Any.ANY ) ; return null ; }
Code	{ checkNotNull ( Any.ANY ) ; return null ; }
Distance : 15

41
Tree	{ return ( T ) reportMatcher ( array ) . returnNull () ; }
Code	{ return ( T ) reportMatcher ( array ) . returnNull () ; }
Distance : 7

42
Tree	{ return ( T ) reportMatcher ( map ) ; }
Code	{ return ( T ) reportMatcher ( map ) ; }
Distance : 10

43
Tree	{ return ( T ) T . returnNull () ; }
Code	{ return ( T ) T . returnNull () ; }
Distance : 10

44
Tree	{ return anyObject () ; }
Code	{ return anyObject () ; }
Distance : 15

45
Tree	{ return cache ; }
Code	{ return cache ; }
Distance : 16

46
Tree	{ recordImplicitInterfaceUses ( Any.ANY ) ; return null ; }
Code	{ recordImplicitInterfaceUses ( Any.ANY ) ; return null ; }
Distance : 15

47
Tree	{ super ( T ) ; mockingProgress () ; }
Code	{ super ( T ) ; mockingProgress () ; }
Distance : 13

48
Tree	{ return ( T ) T . reportMatcher () ; }
Code	{ return ( T ) T . reportMatcher () ; }
Distance : 11

49
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( nSteps ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( nSteps ) ; }
Distance : 10

50
Tree	{ return ( T ) T . returnNull ( nSteps ) ; }
Code	{ return ( T ) T . returnNull ( nSteps ) ; }
Distance : 11

51
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( initializeCalls ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( initializeCalls ) ; }
Distance : 10

52
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnZero ( CALLS_REAL_METHODS ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnZero ( CALLS_REAL_METHODS ) ; }
Distance : 10

53
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( RETURNS_DEFAULTS ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( RETURNS_DEFAULTS ) ; }
Distance : 10

54
Tree	{ checkNotNull () ; return null ; }
Code	{ checkNotNull () ; return null ; }
Distance : 17

55
Tree	{ return ( T ) T . returnNull ( array ) ; }
Code	{ return ( T ) T . returnNull ( array ) ; }
Distance : 11

56
Tree	{ return ( T ) reportMatcher ( nSteps ) ; }
Code	{ return ( T ) reportMatcher ( nSteps ) ; }
Distance : 10

57
Tree	{ super ( T ) ; mockingProgress ( Any.ANY ) ; }
Code	{ super ( T ) ; mockingProgress ( Any.ANY ) ; }
Distance : 12

58
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( CALLS_REAL_METHODS ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( CALLS_REAL_METHODS ) ; }
Distance : 10

59
Tree	{ return checkNotNull () ; }
Code	{ return checkNotNull () ; }
Distance : 15

60
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Distance : 10

61
Tree	{ return ( T ) reportMatcher ( RETURNS_DEFAULTS ) . returnNull () ; }
Code	{ return ( T ) reportMatcher ( RETURNS_DEFAULTS ) . returnNull () ; }
Distance : 7

62
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

63
Tree	{ reportMatcher ( Any.ANY , b1.value ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , b1.value ) ; return null ; }
Distance : 14

64
Tree	{ return ( T ) reportMatcher ( iValues . returnNull () ) ; }
Code	{ return ( T ) reportMatcher ( iValues . returnNull () ) ; }
Distance : 9

65
Tree	{ return anyObject ( Any.ANY ) ; }
Code	{ return anyObject ( Any.ANY ) ; }
Distance : 14

66
Tree	{ return ( T ) T . getHandler ( iValues ) ; }
Code	{ return ( T ) T . getHandler ( iValues ) ; }
Distance : 11

67
Tree	{ super ( T ) ; returnNull () ; }
Code	{ super ( T ) ; returnNull () ; }
Distance : 12

68
Tree	{ return ( T ) reportMatcher ( initializeCalls . returnNull () ) ; }
Code	{ return ( T ) reportMatcher ( initializeCalls . returnNull () ) ; }
Distance : 9

69
Tree	{ super ( T ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( T ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

70
Tree	{ return ( T ) this . arguments . returnNull () ; }
Code	{ return ( T ) this . arguments . returnNull () ; }
Distance : 9

71
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 16

72
Tree	{ return ( T ) reportMatcher ( map . returnNull () ) ; }
Code	{ return ( T ) reportMatcher ( map . returnNull () ) ; }
Distance : 9

73
Tree	{ return ( T ) T . returnNull ( T ) ; }
Code	{ return ( T ) T . returnNull ( T ) ; }
Distance : 11

74
Tree	{ return ( T ) reportMatcher ( Null.NULL ) ; }
Code	{ return ( T ) reportMatcher ( Null.NULL ) ; }
Distance : 10

75
Tree	{ reportMatcher ( Any.ANY ) ; returnNull () ; super }
Code	{ reportMatcher ( Any.ANY ) ; returnNull () ; super }
Distance : 13

76
Tree	{ return CHI_SQUARE_TEST ; }
Code	{ return CHI_SQUARE_TEST ; }
Distance : 16

77
Tree	{ return ( T ) T . returnNull ( initializeCalls ) ; }
Code	{ return ( T ) T . returnNull ( initializeCalls ) ; }
Distance : 11

78
Tree	{ super ( T ) ; doTestNonFieldIntegratorConsistency () ; }
Code	{ super ( T ) ; doTestNonFieldIntegratorConsistency () ; }
Distance : 13

79
Tree	{ return ( T ) reportMatcher ( iValues ) . returnZero () ; }
Code	{ return ( T ) reportMatcher ( iValues ) . returnZero () ; }
Distance : 8

80
Tree	{ super ( T ) ; testScopedError ( Any.ANY ) ; }
Code	{ super ( T ) ; testScopedError ( Any.ANY ) ; }
Distance : 12

81
Tree	{ return ( T ) getInterceptor ( Any.ANY ) . returnNull () ; }
Code	{ return ( T ) getInterceptor ( Any.ANY ) . returnNull () ; }
Distance : 8

82
Tree	{ return MathArrays ; }
Code	{ return MathArrays ; }
Distance : 16

83
Tree	{ return reportMatcher ( T ) . returnNull () ; }
Code	{ return reportMatcher ( T ) . returnNull () ; }
Distance : 10

84
Tree	{ return ( T ) reportMatcher ( nSteps ) . returnZero () ; }
Code	{ return ( T ) reportMatcher ( nSteps ) . returnZero () ; }
Distance : 8

85
Tree	{ return anyObject ( T ) . returnNull () ; }
Code	{ return anyObject ( T ) . returnNull () ; }
Distance : 11

86
Tree	{ return reportMatcher ( T ) . returnZero () ; }
Code	{ return reportMatcher ( T ) . returnZero () ; }
Distance : 11

87
Tree	{ reportMatcher ( Any.ANY ) ; mockingProgress () ; super }
Code	{ reportMatcher ( Any.ANY ) ; mockingProgress () ; super }
Distance : 14

88
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnZero ( RETURNS_DEFAULTS ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnZero ( RETURNS_DEFAULTS ) ; }
Distance : 10

89
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFor () ; }
Distance : 8

90
Tree	{ return ( T ) this . arguments . clone () ; }
Code	{ return ( T ) this . arguments . clone () ; }
Distance : 10

91
Tree	{ super ( T . valueOf ( nSteps ) ) ; returnNull () ; }
Code	{ super ( T . valueOf ( nSteps ) ) ; returnNull () ; }
Distance : 10

92
Tree	{ return ( T ) T . reportMatcher ( iValues ) ; }
Code	{ return ( T ) T . reportMatcher ( iValues ) ; }
Distance : 11

93
Tree	{ return T ; }
Code	{ return T ; }
Distance : 15

94
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull () ; }
Distance : 7

95
Tree	{ mockingProgress () ; return null ; }
Code	{ mockingProgress () ; return null ; }
Distance : 17

96
Tree	{ return ( T ) reportMatcher ( initializeCalls ) ; }
Code	{ return ( T ) reportMatcher ( initializeCalls ) ; }
Distance : 10

97
Tree	{ return reportMatcher ( Any.ANY ) . returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnNull () ; }
Distance : 10

98
Tree	{ return ( T ) T . returnNull ( iValues ) ; }
Code	{ return ( T ) T . returnNull ( iValues ) ; }
Distance : 11

99
Tree	{ return residuals ; }
Code	{ return residuals ; }
Distance : 16

100
Tree	{ return ( T ) reportMatcher ( iValues ) ; }
Code	{ return ( T ) reportMatcher ( iValues ) ; }
Distance : 10

101
Tree	{ return mapToSelf ( Any.ANY ) ; }
Code	{ return mapToSelf ( Any.ANY ) ; }
Distance : 14

102
Tree	{ return ( T ) reportMatcher ( nSteps . returnNull () ) ; }
Code	{ return ( T ) reportMatcher ( nSteps . returnNull () ) ; }
Distance : 9

103
Tree	{ return ( T ) reportMatcher ( T . returnNull () ) ; }
Code	{ return ( T ) reportMatcher ( T . returnNull () ) ; }
Distance : 9

104
Tree	{ return ( T ) reportMatcher ( array ) ; }
Code	{ return ( T ) reportMatcher ( array ) ; }
Distance : 10

105
Tree	{ return ( T ) reportMatcher ( T ) ; }
Code	{ return ( T ) reportMatcher ( T ) ; }
Distance : 10

106
Tree	{ return ( T ) anyObject ( Any.ANY ) ; }
Code	{ return ( T ) anyObject ( Any.ANY ) ; }
Distance : 11

107
Tree	{ super ( T . matcher ( nSteps ) ) ; returnNull () ; }
Code	{ super ( T . matcher ( nSteps ) ) ; returnNull () ; }
Distance : 10

108
Tree	{ return ( T ) reportMatcher ( iValues ) . returnNull () ; }
Code	{ return ( T ) reportMatcher ( iValues ) . returnNull () ; }
Distance : 7

109
Tree	{ super ( T ) ; getInterceptor () ; }
Code	{ super ( T ) ; getInterceptor () ; }
Distance : 13

110
Tree	{ compiler . nullNotPermitted ( Any.ANY ) ; return null ; }
Code	{ compiler . nullNotPermitted ( Any.ANY ) ; return null ; }
Distance : 15

111
Tree	{ checkArgument ( Any.ANY ) ; return null ; }
Code	{ checkArgument ( Any.ANY ) ; return null ; }
Distance : 15

112
Tree	{ return ( T ) reportMatcher ( map ) . returnZero () ; }
Code	{ return ( T ) reportMatcher ( map ) . returnZero () ; }
Distance : 8

113
Tree	{ checkNotNull ( Any.ANY , v.data ) ; return null ; }
Code	{ checkNotNull ( Any.ANY , v.data ) ; return null ; }
Distance : 15

114
Tree	{ mockingProgress ( Any.ANY , Any.ANY ) ; return null ; }
Code	{ mockingProgress ( Any.ANY , Any.ANY ) ; return null ; }
Distance : 15

115
Tree	{ return ( T ) T . instance () ; }
Code	{ return ( T ) T . instance () ; }
Distance : 11

116
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFalse () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFalse () ; }
Distance : 8

117
Tree	{ mockingProgress ( Any.ANY , v.data ) ; return null ; }
Code	{ mockingProgress ( Any.ANY , v.data ) ; return null ; }
Distance : 15

118
Tree	{ mockingProgress ( Any.ANY ) ; mockingProgress () ; super }
Code	{ mockingProgress ( Any.ANY ) ; mockingProgress () ; super }
Distance : 15

119
Tree	{ enableNormalize () ; return null ; }
Code	{ enableNormalize () ; return null ; }
Distance : 17

120
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( iValues ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnNull ( iValues ) ; }
Distance : 10

121
Tree	{ super ( T . get ( map ) ) ; returnNull () ; }
Code	{ super ( T . get ( map ) ) ; returnNull () ; }
Distance : 10

122
Tree	{ super ( T ) ; reportMatcher () ; }
Code	{ super ( T ) ; reportMatcher () ; }
Distance : 13

123
Tree	{ return ( T ) getInterceptor ( Any.ANY ) ; }
Code	{ return ( T ) getInterceptor ( Any.ANY ) ; }
Distance : 11

124
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Distance : 14

125
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnZero ( iValues ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnZero ( iValues ) ; }
Distance : 10

126
Tree	{ return ( T ) reportMatcher ( nSteps ) . returnNull () ; }
Code	{ return ( T ) reportMatcher ( nSteps ) . returnNull () ; }
Distance : 7

127
Tree	{ return defaultString () ; }
Code	{ return defaultString () ; }
Distance : 15

128
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; mockingProgress () ; super }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; mockingProgress () ; super }
Distance : 14

129
Tree	{ super ( T ) ; returnNull ( Any.ANY ) ; }
Code	{ super ( T ) ; returnNull ( Any.ANY ) ; }
Distance : 12

130
Tree	{ recordImplicitInterfaceUses () ; return null ; }
Code	{ recordImplicitInterfaceUses () ; return null ; }
Distance : 17

131
Tree	{ reportMatcher () ; return null ; }
Code	{ reportMatcher () ; return null ; }
Distance : 16

132
Tree	{ return anyObject ( Any.ANY ) . returnNull () ; }
Code	{ return anyObject ( Any.ANY ) . returnNull () ; }
Distance : 11

133
Tree	{ return ( T ) getInterceptor () ; }
Code	{ return ( T ) getInterceptor () ; }
Distance : 12

134
Tree	{ return ( T ) T . dayOfYear () ; }
Code	{ return ( T ) T . dayOfYear () ; }
Distance : 11

135
Tree	{ key . nullNotPermitted ( Any.ANY ) ; return null ; }
Code	{ key . nullNotPermitted ( Any.ANY ) ; return null ; }
Distance : 15

136
Tree	{ return defaultString ( Any.ANY ) . returnNull () ; }
Code	{ return defaultString ( Any.ANY ) . returnNull () ; }
Distance : 11

137
Tree	{ reportMatcher ( Any.ANY , v.data ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , v.data ) ; return null ; }
Distance : 14

138
Tree	{ super ( T ) ; createPattern () ; }
Code	{ super ( T ) ; createPattern () ; }
Distance : 13

139
Tree	{ return getCSVClone ( Any.ANY ) ; }
Code	{ return getCSVClone ( Any.ANY ) ; }
Distance : 14

140
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 13

141
Tree	{ return ( T ) T . getHandler () ; }
Code	{ return ( T ) T . getHandler () ; }
Distance : 11

142
Tree	{ checkArgument () ; return null ; }
Code	{ checkArgument () ; return null ; }
Distance : 17

143
Tree	{ super ( T . valueOf ( iValues ) ) ; returnNull () ; }
Code	{ super ( T . valueOf ( iValues ) ) ; returnNull () ; }
Distance : 10

144
Tree	{ return ( T ) this . value . returnNull () ; }
Code	{ return ( T ) this . value . returnNull () ; }
Distance : 9

145
Tree	{ super ( T ) ; anyObject () ; }
Code	{ super ( T ) ; anyObject () ; }
Distance : 13

146
Tree	{ checkNotNull ( Any.ANY , Any.ANY ) ; return null ; }
Code	{ checkNotNull ( Any.ANY , Any.ANY ) ; return null ; }
Distance : 15

147
Tree	{ return ( T ) anyObject () ; }
Code	{ return ( T ) anyObject () ; }
Distance : 12

148
Tree	{ return checkNotNull ( Any.ANY ) . returnNull () ; }
Code	{ return checkNotNull ( Any.ANY ) . returnNull () ; }
Distance : 11

149
Tree	{ mockingProgress ( Any.ANY ) ; reportMatcher () ; super }
Code	{ mockingProgress ( Any.ANY ) ; reportMatcher () ; super }
Distance : 15

150
Tree	{ return ( T ) this . supported . returnNull () ; }
Code	{ return ( T ) this . supported . returnNull () ; }
Distance : 9

151
Tree	{ return ( T ) reportMatcher ( iValues . getTime () ) ; }
Code	{ return ( T ) reportMatcher ( iValues . getTime () ) ; }
Distance : 9

152
Tree	{ reportMatcher ( Any.ANY , org.joda.time.gwt.util.Arrays ) ; return null ; }
Code	{ reportMatcher ( Any.ANY , org.joda.time.gwt.util.Arrays ) ; return null ; }
Distance : 14

153
Tree	{ checkNotNull ( Any.ANY ) ; mockingProgress () ; super }
Code	{ checkNotNull ( Any.ANY ) ; mockingProgress () ; super }
Distance : 15

154
Tree	{ reportAnd () ; return null ; }
Code	{ reportAnd () ; return null ; }
Distance : 17

155
Tree	{ return getTSVClone ( Any.ANY ) ; }
Code	{ return getTSVClone ( Any.ANY ) ; }
Distance : 14

156
Tree	{ super ( T ) ; testScopedError () ; }
Code	{ super ( T ) ; testScopedError () ; }
Distance : 13

157
Tree	{ return ( T ) this . value . clone () ; }
Code	{ return ( T ) this . value . clone () ; }
Distance : 10

158
Tree	{ return getCSVClone ( Any.ANY ) . returnNull () ; }
Code	{ return getCSVClone ( Any.ANY ) . returnNull () ; }
Distance : 11

159
Tree	{ return checkNotNull ( T ) . returnNull () ; }
Code	{ return checkNotNull ( T ) . returnNull () ; }
Distance : 11

160
Tree	{ super ( T . get ( nSteps ) ) ; returnNull () ; }
Code	{ super ( T . get ( nSteps ) ) ; returnNull () ; }
Distance : 10

161
Tree	{ return mapToSelf ( Any.ANY ) . returnNull () ; }
Code	{ return mapToSelf ( Any.ANY ) . returnNull () ; }
Distance : 11

162
Tree	{ return checkNotNull ( Any.ANY ) ; }
Code	{ return checkNotNull ( Any.ANY ) ; }
Distance : 14

163
Tree	{ reportMatcher ( Any.ANY ) ; reportMatcher () ; super }
Code	{ reportMatcher ( Any.ANY ) ; reportMatcher () ; super }
Distance : 14

164
Tree	{ MOCKING_PROGRESS . getDateTimeInstance ( Any.ANY ) ; return null ; }
Code	{ MOCKING_PROGRESS . getDateTimeInstance ( Any.ANY ) ; return null ; }
Distance : 15

165
Tree	{ MOCKING_PROGRESS . nullNotPermitted ( Any.ANY ) ; return null ; }
Code	{ MOCKING_PROGRESS . nullNotPermitted ( Any.ANY ) ; return null ; }
Distance : 15

166
Tree	{ return TransformUtils ; }
Code	{ return TransformUtils ; }
Distance : 16

167
Tree	{ super ( T ) ; doTestNonFieldIntegratorConsistency ( Any.ANY ) ; }
Code	{ super ( T ) ; doTestNonFieldIntegratorConsistency ( Any.ANY ) ; }
Distance : 12

168
Tree	{ printTo () ; return null ; }
Code	{ printTo () ; return null ; }
Distance : 17

169
Tree	{ return reportMatcher ( RETURNS_DEFAULTS ) . returnNull () ; }
Code	{ return reportMatcher ( RETURNS_DEFAULTS ) . returnNull () ; }
Distance : 10

170
Tree	{ return ( MockHandler ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( MockHandler ) reportMatcher ( Any.ANY ) ; }
Distance : 11

171
Tree	{ return ( T ) this . supported . clone () ; }
Code	{ return ( T ) this . supported . clone () ; }
Distance : 10

172
Tree	{ return ( T ) this . arguments . instance () ; }
Code	{ return ( T ) this . arguments . instance () ; }
Distance : 10

173
Tree	{ return LinearCombination ; }
Code	{ return LinearCombination ; }
Distance : 16

174
Tree	{ super ( T ) ; getInterceptor ( Any.ANY ) ; }
Code	{ super ( T ) ; getInterceptor ( Any.ANY ) ; }
Distance : 12

175
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 11

176
Tree	{ return ( T ) removeAll () ; }
Code	{ return ( T ) removeAll () ; }
Distance : 12

177
Tree	{ return reportMatcher ( iValues ) . returnNull () ; }
Code	{ return reportMatcher ( iValues ) . returnNull () ; }
Distance : 10

178
Tree	{ compiler . checkNotNull ( Any.ANY ) ; return null ; }
Code	{ compiler . checkNotNull ( Any.ANY ) ; return null ; }
Distance : 15

179
Tree	{ return reportMatcher ( matcher ) . returnNull () ; }
Code	{ return reportMatcher ( matcher ) . returnNull () ; }
Distance : 10

180
Tree	{ return getCSVClone ( T ) . returnNull () ; }
Code	{ return getCSVClone ( T ) . returnNull () ; }
Distance : 11

181
Tree	{ return ( T ) returnNull () ; }
Code	{ return ( T ) returnNull () ; }
Distance : 11

182
Tree	{ return STRING_CONSTANT ; } Override
Code	{ return STRING_CONSTANT ; } Override
Distance : 17

183
Tree	{ return ( T ) testScopedError () ; }
Code	{ return ( T ) testScopedError () ; }
Distance : 12

184
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 16

185
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 17

186
Tree	{ return ( T ) reportMatcher ( v.data ) ; }
Code	{ return ( T ) reportMatcher ( v.data ) ; }
Distance : 10

187
Tree	{ return STRING_CONSTANT ; } notifyListeners
Code	{ return STRING_CONSTANT ; } notifyListeners
Distance : 17

188
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 16

189
Tree	{ return STRING_CONSTANT ; } class
Code	{ return STRING_CONSTANT ; } class
Distance : 17

190
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 16

191
Tree	{ return getCumFreq ( Any.ANY ) . returnNull () ; }
Code	{ return getCumFreq ( Any.ANY ) . returnNull () ; }
Distance : 11

192
Tree	{ return STRING_CONSTANT ; } array
Code	{ return STRING_CONSTANT ; } array
Distance : 17

193
Tree	{ return ( T ) getMockSettings () ; }
Code	{ return ( T ) getMockSettings () ; }
Distance : 12

194
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 16

195
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 16

196
Tree	{ return STRING_CONSTANT ; } mock
Code	{ return STRING_CONSTANT ; } mock
Distance : 17

197
Tree	{ return STRING_CONSTANT ; } MathRuntimeException
Code	{ return STRING_CONSTANT ; } MathRuntimeException
Distance : 17

198
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 17

199
Tree	{ return STRING_CONSTANT ; } f
Code	{ return STRING_CONSTANT ; } f
Distance : 17

========================================================================


========================================================================
Example Number: 99
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Short . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Short})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ reportMatcher ( Any.ANY ) ; this . mode = TypeInferenceMode.OTI_ONLY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . mode = TypeInferenceMode.OTI_ONLY ; }
Distance : 11

1
Tree	{ reportMatcher ( Any.ANY ) ; currentDerivative = false ; }
Code	{ reportMatcher ( Any.ANY ) ; currentDerivative = false ; }
Distance : 11

2
Tree	{ return ( Object ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Object ) reportMatcher ( Any.ANY ) ; }
Distance : 11

3
Tree	{ return ( Object ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( Object ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

4
Tree	{ super ( chronology ) ; }
Code	{ super ( chronology ) ; }
Distance : 12

5
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return false ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return false ; }
Distance : 11

6
Tree	{ return reportMatcher ( AnyVararg.ANY_VARARG ) . returnZero () ; }
Code	{ return reportMatcher ( AnyVararg.ANY_VARARG ) . returnZero () ; }
Distance : 7

7
Tree	{ return reportMatcher ( Any.ANY ) . < T > byteValue () ; }
Code	{ return reportMatcher ( Any.ANY ) . < T > byteValue () ; }
Distance : 9

8
Tree	{ super ( RETURNS_DEFAULTS ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( RETURNS_DEFAULTS ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

9
Tree	{ reportMatcher ( Any.ANY ) ; ConfigurationAccess = false ; }
Code	{ reportMatcher ( Any.ANY ) ; ConfigurationAccess = false ; }
Distance : 11

10
Tree	{ super ( classToMock ) ; }
Code	{ super ( classToMock ) ; }
Distance : 12

11
Tree	{ reportMatcher ( Any.ANY ) ; originOffset = false ; }
Code	{ reportMatcher ( Any.ANY ) ; originOffset = false ; }
Distance : 11

12
Tree	{ reportMatcher ( Any.ANY ) ; object = false ; }
Code	{ reportMatcher ( Any.ANY ) ; object = false ; }
Distance : 11

13
Tree	{ super ( matcher ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( matcher ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

14
Tree	{ super ( classToMock ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( classToMock ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

15
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

16
Tree	{ reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; }
Distance : 11

17
Tree	{ return this . capturingMatcher ; }
Code	{ return this . capturingMatcher ; }
Distance : 12

18
Tree	{ super ( T ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( T ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

19
Tree	{ super ( object ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( object ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

20
Tree	{ testTypes ( Any.ANY ) ; return null ; }
Code	{ testTypes ( Any.ANY ) ; return null ; }
Distance : 12

21
Tree	{ super ( matcher ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( matcher ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

22
Tree	{ super ( RETURNS_DEFAULTS ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( RETURNS_DEFAULTS ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

23
Tree	{ return reportMatcher ( Null.NULL ) . returnZero () ; }
Code	{ return reportMatcher ( Null.NULL ) . returnZero () ; }
Distance : 7

24
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = false ; }
Distance : 11

25
Tree	{ return ( T ) reportMatcher () ; }
Code	{ return ( T ) reportMatcher () ; }
Distance : 10

26
Tree	{ super ( classToMock ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( classToMock ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

27
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = interpolator.currentDerivative ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = interpolator.currentDerivative ; }
Distance : 11

28
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; maxIterationCount = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; maxIterationCount = false ; }
Distance : 11

29
Tree	{ reportMatcher ( Any.ANY ) ; position = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; position = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

30
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

31
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 7

32
Tree	{ super ( matcher ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( matcher ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

33
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Distance : 11

34
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

35
Tree	{ return reportMatcher ( Any.ANY ) . < T > returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . < T > returnNull () ; }
Distance : 9

36
Tree	{ super ( T ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( T ) ; returnZero ( Any.ANY ) ; }
Distance : 12

37
Tree	{ return reportMatcher ( Any.ANY ) . < tolerance > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < tolerance > returnZero () ; }
Distance : 8

38
Tree	{ super ( T ) ; }
Code	{ super ( T ) ; }
Distance : 12

39
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

40
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Distance : 11

41
Tree	{ return ( T ) returnZero () ; }
Code	{ return ( T ) returnZero () ; }
Distance : 9

42
Tree	{ super ( classToMock ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( classToMock ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

43
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = TypeInferenceMode.OTI_ONLY ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = TypeInferenceMode.OTI_ONLY ; }
Distance : 11

44
Tree	{ return ( RETURNS_DEFAULTS ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( RETURNS_DEFAULTS ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

45
Tree	{ super ( T ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( T ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

46
Tree	{ super ( object ) ; }
Code	{ super ( object ) ; }
Distance : 12

47
Tree	{ return ( T ) returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return ( T ) returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

48
Tree	{ return reportMatcher ( Any.ANY ) . < Matcher > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Matcher > returnZero () ; }
Distance : 8

49
Tree	{ return ( T ) returnZero ( Any.ANY ) ; }
Code	{ return ( T ) returnZero ( Any.ANY ) ; }
Distance : 11

50
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

51
Tree	{ return this . allowed ; }
Code	{ return this . allowed ; }
Distance : 12

52
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . gap = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . gap = null ; }
Distance : 12

53
Tree	{ reportMatcher ( Any.ANY ) ; position = false ; }
Code	{ reportMatcher ( Any.ANY ) ; position = false ; }
Distance : 11

54
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; currentDerivative = false ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; currentDerivative = false ; }
Distance : 11

55
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; this . mode = map ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; this . mode = map ; }
Distance : 12

56
Tree	{ return ( RETURNS_DEFAULTS ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( RETURNS_DEFAULTS ) reportMatcher ( Any.ANY ) ; }
Distance : 11

57
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

58
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . gap = map ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . gap = map ; }
Distance : 12

59
Tree	{ super ( DateTimeFieldType ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( DateTimeFieldType ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

60
Tree	{ super ( T ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( T ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

61
Tree	{ reportMatcher ( Any.ANY ) ; listeners = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; listeners = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

62
Tree	{ return ( iValues ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( iValues ) reportMatcher ( Any.ANY ) ; }
Distance : 11

63
Tree	{ reportMatcher ( Any.ANY ) ; mockSettings = false ; }
Code	{ reportMatcher ( Any.ANY ) ; mockSettings = false ; }
Distance : 11

64
Tree	{ reportMatcher ( Any.ANY ) ; listeners = false ; }
Code	{ reportMatcher ( Any.ANY ) ; listeners = false ; }
Distance : 11

65
Tree	{ return reportMatcher ( Any.ANY ) . < T > argumentsMatch () ; }
Code	{ return reportMatcher ( Any.ANY ) . < T > argumentsMatch () ; }
Distance : 9

66
Tree	{ super ( T ) ; returnZero ( Any.ANY ) ; super }
Code	{ super ( T ) ; returnZero ( Any.ANY ) ; super }
Distance : 13

67
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; success = problem.y ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; success = problem.y ; }
Distance : 11

68
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = problem.y ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = problem.y ; }
Distance : 11

69
Tree	{ super ( object ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( object ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

70
Tree	{ super ( LINE_JOINER ) ; }
Code	{ super ( LINE_JOINER ) ; }
Distance : 12

71
Tree	{ super ( object ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( object ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

72
Tree	{ return reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; }
Code	{ return reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; }
Distance : 10

73
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . tolerance = scalar ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . tolerance = scalar ; }
Distance : 12

74
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . object = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . object = null ; }
Distance : 12

75
Tree	{ reportMatcher ( Any.ANY ) ; currentDerivative = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; currentDerivative = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

76
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . gap = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . gap = Any.ANY ; }
Distance : 11

77
Tree	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return NUMBER_CONSTANT ; }
Distance : 11

78
Tree	{ return ( T ) byteValue () ; }
Code	{ return ( T ) byteValue () ; }
Distance : 10

79
Tree	{ reportMatcher ( Any.ANY ) ; this . gap = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . gap = Any.ANY ; super }
Distance : 12

80
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = period ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = period ; }
Distance : 12

81
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = null ; }
Distance : 12

82
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . allowed = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . allowed = Any.ANY ; }
Distance : 11

83
Tree	{ return ( nSteps ) reportMatcher () ; }
Code	{ return ( nSteps ) reportMatcher () ; }
Distance : 10

84
Tree	{ return reportMatcher ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT ) . returnZero () ; }
Code	{ return reportMatcher ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT ) . returnZero () ; }
Distance : 7

85
Tree	{ reportMatcher ( Any.ANY ) ; originOffset = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; originOffset = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

86
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . tolerance = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . tolerance = null ; }
Distance : 12

87
Tree	{ return this . mode ; }
Code	{ return this . mode ; }
Distance : 12

88
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return NUMBER_CONSTANT ; }
Distance : 11

89
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . font = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . font = Any.ANY ; }
Distance : 11

90
Tree	{ super ( object ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( object ) ; returnZero ( Any.ANY ) ; }
Distance : 12

91
Tree	{ return this . mockSettings ; }
Code	{ return this . mockSettings ; }
Distance : 12

92
Tree	{ reportMatcher ( Any.ANY ) ; this . mode = interpolator.currentDerivative ; }
Code	{ reportMatcher ( Any.ANY ) ; this . mode = interpolator.currentDerivative ; }
Distance : 11

93
Tree	{ return this . object ; }
Code	{ return this . object ; }
Distance : 12

94
Tree	{ reportMatcher ( Null.NULL ) ; return null ; }
Code	{ reportMatcher ( Null.NULL ) ; return null ; }
Distance : 11

95
Tree	{ testTypes ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ testTypes ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

96
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return null ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return null ; }
Distance : 11

97
Tree	{ super ( T ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( T ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

98
Tree	{ return this . classToMock ; }
Code	{ return this . classToMock ; }
Distance : 12

99
Tree	{ reportMatcher ( Null.NULL ) ; return false ; }
Code	{ reportMatcher ( Null.NULL ) ; return false ; }
Distance : 11

100
Tree	{ return this . matcher ; }
Code	{ return this . matcher ; }
Distance : 12

101
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; enableUnusedLocalAssignmentCheck = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; enableUnusedLocalAssignmentCheck = false ; }
Distance : 11

102
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; iChronology = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; iChronology = false ; }
Distance : 11

103
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; scalar = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; scalar = false ; }
Distance : 11

104
Tree	{ reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; super }
Distance : 12

105
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

106
Tree	{ reportMatcher ( Any.ANY ) ; this . font = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . font = Any.ANY ; super }
Distance : 12

107
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = CheckRequiresForConstructors.Mode.FULL_COMPILE ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = CheckRequiresForConstructors.Mode.FULL_COMPILE ; }
Distance : 11

108
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return false ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return false ; }
Distance : 11

109
Tree	{ reportMatcher ( Any.ANY ) ; object = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; object = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

110
Tree	{ reportMatcher ( Any.ANY ) ; this . mode = TypeInferenceMode.OTI_ONLY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . mode = TypeInferenceMode.OTI_ONLY ; super }
Distance : 12

111
Tree	{ super ( DateTimeFieldType ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( DateTimeFieldType ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

112
Tree	{ reportMatcher ( v.data ) ; return null ; }
Code	{ reportMatcher ( v.data ) ; return null ; }
Distance : 11

113
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; success = interpolator.currentDerivative ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; success = interpolator.currentDerivative ; }
Distance : 11

114
Tree	{ return this . RETURNS_DEFAULTS ; }
Code	{ return this . RETURNS_DEFAULTS ; }
Distance : 12

115
Tree	{ return reportMatcher ( Any.ANY ) . < T > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < T > returnZero () ; }
Distance : 8

116
Tree	{ super ( RETURNS_DEFAULTS ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( RETURNS_DEFAULTS ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

117
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

118
Tree	{ return reportMatcher ( Any.ANY ) . < Object > returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Object > returnNull () ; }
Distance : 9

119
Tree	{ reportMatcher ( Any.ANY ) ; inputCharset = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; inputCharset = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

120
Tree	{ super ( RETURNS_DEFAULTS ) ; }
Code	{ super ( RETURNS_DEFAULTS ) ; }
Distance : 12

121
Tree	{ super ( object ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( object ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

122
Tree	{ return ( nSteps ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( nSteps ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

123
Tree	{ return ( matcher ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( matcher ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

124
Tree	{ return ( T ) byteValue ( Any.ANY ) ; }
Code	{ return ( T ) byteValue ( Any.ANY ) ; }
Distance : 11

125
Tree	{ reportMatcher ( Any.ANY ) ; this . allowed = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . allowed = Any.ANY ; super }
Distance : 12

126
Tree	{ return ( iValues ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( iValues ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

127
Tree	{ reportMatcher ( NotNull.NOT_NULL ) ; return null ; }
Code	{ reportMatcher ( NotNull.NOT_NULL ) ; return null ; }
Distance : 11

128
Tree	{ return ( nSteps ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( nSteps ) reportMatcher ( Any.ANY ) ; }
Distance : 11

129
Tree	{ return reportMatcher ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW ) . returnZero () ; }
Code	{ return reportMatcher ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW ) . returnZero () ; }
Distance : 7

130
Tree	{ reportMatcher ( NotNull.NOT_NULL ) ; return false ; }
Code	{ reportMatcher ( NotNull.NOT_NULL ) ; return false ; }
Distance : 11

131
Tree	{ return reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; }
Code	{ return reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; }
Distance : 7

132
Tree	{ super ( DateTimeFieldType ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( DateTimeFieldType ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

133
Tree	{ return ( matcher ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( matcher ) reportMatcher ( Any.ANY ) ; }
Distance : 11

134
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = LanguageMode.ECMASCRIPT_2015 ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = LanguageMode.ECMASCRIPT_2015 ; }
Distance : 11

135
Tree	{ return reportMatcher ( Any.ANY ) . < Object > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Object > returnZero () ; }
Distance : 8

136
Tree	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return null ; }
Code	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return null ; }
Distance : 11

137
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; this . mode = Any.ANY ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; this . mode = Any.ANY ; }
Distance : 11

138
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = map ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = map ; }
Distance : 12

139
Tree	{ return reportMatcher ( NotNull.NOT_NULL ) . returnZero () ; }
Code	{ return reportMatcher ( NotNull.NOT_NULL ) . returnZero () ; }
Distance : 7

140
Tree	{ super ( matcher ) ; }
Code	{ super ( matcher ) ; }
Distance : 12

141
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; success = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; success = false ; }
Distance : 11

142
Tree	{ reportMatcher ( Any.ANY ) ; this . object = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . object = Any.ANY ; }
Distance : 11

143
Tree	{ return ( matcher ) reportMatcher () ; }
Code	{ return ( matcher ) reportMatcher () ; }
Distance : 10

144
Tree	{ super ( DateTimeFieldType ) ; }
Code	{ super ( DateTimeFieldType ) ; }
Distance : 12

145
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

146
Tree	{ return anyObject ( Any.ANY ) . returnZero () ; }
Code	{ return anyObject ( Any.ANY ) . returnZero () ; }
Distance : 8

147
Tree	{ reportMatcher ( Any.ANY ) ; this . gap = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . gap = Any.ANY ; }
Distance : 11

148
Tree	{ return ( RETURNS_DEFAULTS ) reportMatcher () ; }
Code	{ return ( RETURNS_DEFAULTS ) reportMatcher () ; }
Distance : 10

149
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; value = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; value = false ; }
Distance : 11

150
Tree	{ return ( iValues ) reportMatcher () ; }
Code	{ return ( iValues ) reportMatcher () ; }
Distance : 10

151
Tree	{ reportMatcher ( Null.NULL ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Null.NULL ) ; return NUMBER_CONSTANT ; }
Distance : 11

152
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return NUMBER_CONSTANT ; }
Distance : 11

153
Tree	{ reportMatcher ( Any.ANY ) ; this . mode = interpolator.currentDerivative ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . mode = interpolator.currentDerivative ; super }
Distance : 12

154
Tree	{ reportMatcher ( NotNull.NOT_NULL ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( NotNull.NOT_NULL ) ; return NUMBER_CONSTANT ; }
Distance : 11

155
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = scalar ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = scalar ; }
Distance : 12

156
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 13

157
Tree	{ reportMatcher ( v.data ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( v.data ) ; return NUMBER_CONSTANT ; }
Distance : 11

158
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

159
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . font = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . font = null ; }
Distance : 12

160
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

161
Tree	{ reportMatcher ( Any.ANY ) ; this . font = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . font = Any.ANY ; }
Distance : 11

162
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 13

163
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 14

164
Tree	{ return anyObject ( Any.ANY ) ; }
Code	{ return anyObject ( Any.ANY ) ; }
Distance : 11

165
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . barPainter = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . barPainter = null ; }
Distance : 12

166
Tree	{ return reportMatcher ( Null.NULL ) ; }
Code	{ return reportMatcher ( Null.NULL ) ; }
Distance : 10

167
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . allowed = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . allowed = null ; }
Distance : 12

168
Tree	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return false ; }
Code	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return false ; }
Distance : 11

169
Tree	{ reportMatcher ( Any.ANY ) ; this . object = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . object = Any.ANY ; super }
Distance : 12

170
Tree	{ return ( Object ) reportMatcher () ; }
Code	{ return ( Object ) reportMatcher () ; }
Distance : 10

171
Tree	{ reportMatcher ( Any.ANY ) ; ConfigurationAccess = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; ConfigurationAccess = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

172
Tree	{ testTypes ( Any.ANY ) ; return false ; }
Code	{ testTypes ( Any.ANY ) ; return false ; }
Distance : 12

173
Tree	{ reportMatcher ( Any.ANY ) ; mockSettings = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; mockSettings = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

174
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; this . mode = Any.ANY ; super }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; this . mode = Any.ANY ; super }
Distance : 12

175
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . tolerance = map ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . tolerance = map ; }
Distance : 12

176
Tree	{ super ( object ) ; returnZero ( Any.ANY ) ; super }
Code	{ super ( object ) ; returnZero ( Any.ANY ) ; super }
Distance : 13

177
Tree	{ reportMatcher ( Any.ANY ) ; inputCharset = false ; }
Code	{ reportMatcher ( Any.ANY ) ; inputCharset = false ; }
Distance : 11

178
Tree	{ return; reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; }
Code	{ return; reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; }
Distance : 11

179
Tree	{ return reportMatcher ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT ) ; }
Code	{ return reportMatcher ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT ) ; }
Distance : 10

180
Tree	{ return reportMatcher ( AnyVararg.ANY_VARARG ) ; }
Code	{ return reportMatcher ( AnyVararg.ANY_VARARG ) ; }
Distance : 10

181
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = StringUtils.EMPTY ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = StringUtils.EMPTY ; }
Distance : 11

182
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . mode = interpolator.currentDerivative ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . mode = interpolator.currentDerivative ; }
Distance : 11

183
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . object = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . object = Any.ANY ; }
Distance : 11

184
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 14

185
Tree	{ return ( T ) byteValue ( Any.ANY ) . returnZero () ; }
Code	{ return ( T ) byteValue ( Any.ANY ) . returnZero () ; }
Distance : 8

186
Tree	{ reportMatcher ( Any.ANY ) ; this . allowed = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . allowed = Any.ANY ; }
Distance : 11

187
Tree	{ return reportMatcher ( NotNull.NOT_NULL ) ; }
Code	{ return reportMatcher ( NotNull.NOT_NULL ) ; }
Distance : 10

188
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 14

189
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

190
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; }
Distance : 11

191
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . mode = TypeInferenceMode.OTI_ONLY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . mode = TypeInferenceMode.OTI_ONLY ; }
Distance : 11

192
Tree	{ return reportMatcher ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW ) ; }
Code	{ return reportMatcher ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW ) ; }
Distance : 10

193
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

194
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = zFormat ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = zFormat ; }
Distance : 12

195
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; this . mode = null ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; this . mode = null ; }
Distance : 12

196
Tree	{ reportMatcher ( v.data ) ; return false ; }
Code	{ reportMatcher ( v.data ) ; return false ; }
Distance : 11

197
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 14

198
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 14

199
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 14

========================================================================


========================================================================
Example Number: 100
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Double . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Double})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ reportMatcher ( Any.ANY ) ; this . mode = TypeInferenceMode.OTI_ONLY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . mode = TypeInferenceMode.OTI_ONLY ; }
Distance : 11

1
Tree	{ reportMatcher ( Any.ANY ) ; currentDerivative = false ; }
Code	{ reportMatcher ( Any.ANY ) ; currentDerivative = false ; }
Distance : 11

2
Tree	{ return ( Object ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Object ) reportMatcher ( Any.ANY ) ; }
Distance : 11

3
Tree	{ return ( Object ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( Object ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

4
Tree	{ super ( chronology ) ; }
Code	{ super ( chronology ) ; }
Distance : 12

5
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return false ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return false ; }
Distance : 11

6
Tree	{ return reportMatcher ( AnyVararg.ANY_VARARG ) . returnZero () ; }
Code	{ return reportMatcher ( AnyVararg.ANY_VARARG ) . returnZero () ; }
Distance : 7

7
Tree	{ return reportMatcher ( Any.ANY ) . < T > byteValue () ; }
Code	{ return reportMatcher ( Any.ANY ) . < T > byteValue () ; }
Distance : 9

8
Tree	{ super ( RETURNS_DEFAULTS ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( RETURNS_DEFAULTS ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

9
Tree	{ reportMatcher ( Any.ANY ) ; ConfigurationAccess = false ; }
Code	{ reportMatcher ( Any.ANY ) ; ConfigurationAccess = false ; }
Distance : 11

10
Tree	{ super ( classToMock ) ; }
Code	{ super ( classToMock ) ; }
Distance : 12

11
Tree	{ reportMatcher ( Any.ANY ) ; originOffset = false ; }
Code	{ reportMatcher ( Any.ANY ) ; originOffset = false ; }
Distance : 11

12
Tree	{ reportMatcher ( Any.ANY ) ; object = false ; }
Code	{ reportMatcher ( Any.ANY ) ; object = false ; }
Distance : 11

13
Tree	{ super ( matcher ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( matcher ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

14
Tree	{ super ( classToMock ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( classToMock ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

15
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

16
Tree	{ reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; }
Distance : 11

17
Tree	{ return this . capturingMatcher ; }
Code	{ return this . capturingMatcher ; }
Distance : 12

18
Tree	{ super ( T ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( T ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

19
Tree	{ super ( object ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( object ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

20
Tree	{ testTypes ( Any.ANY ) ; return null ; }
Code	{ testTypes ( Any.ANY ) ; return null ; }
Distance : 12

21
Tree	{ super ( matcher ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( matcher ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

22
Tree	{ super ( RETURNS_DEFAULTS ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( RETURNS_DEFAULTS ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

23
Tree	{ return reportMatcher ( Null.NULL ) . returnZero () ; }
Code	{ return reportMatcher ( Null.NULL ) . returnZero () ; }
Distance : 7

24
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = false ; }
Distance : 11

25
Tree	{ return ( T ) reportMatcher () ; }
Code	{ return ( T ) reportMatcher () ; }
Distance : 10

26
Tree	{ super ( classToMock ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( classToMock ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

27
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = interpolator.currentDerivative ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = interpolator.currentDerivative ; }
Distance : 11

28
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; maxIterationCount = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; maxIterationCount = false ; }
Distance : 11

29
Tree	{ reportMatcher ( Any.ANY ) ; position = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; position = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

30
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

31
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 7

32
Tree	{ super ( matcher ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( matcher ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

33
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Distance : 11

34
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

35
Tree	{ return reportMatcher ( Any.ANY ) . < T > returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . < T > returnNull () ; }
Distance : 9

36
Tree	{ super ( T ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( T ) ; returnZero ( Any.ANY ) ; }
Distance : 12

37
Tree	{ return reportMatcher ( Any.ANY ) . < tolerance > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < tolerance > returnZero () ; }
Distance : 8

38
Tree	{ super ( T ) ; }
Code	{ super ( T ) ; }
Distance : 12

39
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

40
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Distance : 11

41
Tree	{ return ( T ) returnZero () ; }
Code	{ return ( T ) returnZero () ; }
Distance : 9

42
Tree	{ super ( classToMock ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( classToMock ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

43
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = TypeInferenceMode.OTI_ONLY ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = TypeInferenceMode.OTI_ONLY ; }
Distance : 11

44
Tree	{ return ( RETURNS_DEFAULTS ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( RETURNS_DEFAULTS ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

45
Tree	{ super ( T ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( T ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

46
Tree	{ super ( object ) ; }
Code	{ super ( object ) ; }
Distance : 12

47
Tree	{ return ( T ) returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return ( T ) returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

48
Tree	{ return reportMatcher ( Any.ANY ) . < Matcher > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Matcher > returnZero () ; }
Distance : 8

49
Tree	{ return ( T ) returnZero ( Any.ANY ) ; }
Code	{ return ( T ) returnZero ( Any.ANY ) ; }
Distance : 11

50
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

51
Tree	{ return this . allowed ; }
Code	{ return this . allowed ; }
Distance : 12

52
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . gap = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . gap = null ; }
Distance : 12

53
Tree	{ reportMatcher ( Any.ANY ) ; position = false ; }
Code	{ reportMatcher ( Any.ANY ) ; position = false ; }
Distance : 11

54
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; currentDerivative = false ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; currentDerivative = false ; }
Distance : 11

55
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; this . mode = map ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; this . mode = map ; }
Distance : 12

56
Tree	{ return ( RETURNS_DEFAULTS ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( RETURNS_DEFAULTS ) reportMatcher ( Any.ANY ) ; }
Distance : 11

57
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

58
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . gap = map ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . gap = map ; }
Distance : 12

59
Tree	{ super ( DateTimeFieldType ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( DateTimeFieldType ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

60
Tree	{ super ( T ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( T ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

61
Tree	{ reportMatcher ( Any.ANY ) ; listeners = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; listeners = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

62
Tree	{ return ( iValues ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( iValues ) reportMatcher ( Any.ANY ) ; }
Distance : 11

63
Tree	{ reportMatcher ( Any.ANY ) ; mockSettings = false ; }
Code	{ reportMatcher ( Any.ANY ) ; mockSettings = false ; }
Distance : 11

64
Tree	{ reportMatcher ( Any.ANY ) ; listeners = false ; }
Code	{ reportMatcher ( Any.ANY ) ; listeners = false ; }
Distance : 11

65
Tree	{ return reportMatcher ( Any.ANY ) . < T > argumentsMatch () ; }
Code	{ return reportMatcher ( Any.ANY ) . < T > argumentsMatch () ; }
Distance : 9

66
Tree	{ super ( T ) ; returnZero ( Any.ANY ) ; super }
Code	{ super ( T ) ; returnZero ( Any.ANY ) ; super }
Distance : 13

67
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; success = problem.y ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; success = problem.y ; }
Distance : 11

68
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = problem.y ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = problem.y ; }
Distance : 11

69
Tree	{ super ( object ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( object ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

70
Tree	{ super ( LINE_JOINER ) ; }
Code	{ super ( LINE_JOINER ) ; }
Distance : 12

71
Tree	{ super ( object ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( object ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

72
Tree	{ return reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; }
Code	{ return reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; }
Distance : 10

73
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . tolerance = scalar ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . tolerance = scalar ; }
Distance : 12

74
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . object = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . object = null ; }
Distance : 12

75
Tree	{ reportMatcher ( Any.ANY ) ; currentDerivative = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; currentDerivative = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

76
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . gap = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . gap = Any.ANY ; }
Distance : 11

77
Tree	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return NUMBER_CONSTANT ; }
Distance : 11

78
Tree	{ return ( T ) byteValue () ; }
Code	{ return ( T ) byteValue () ; }
Distance : 10

79
Tree	{ reportMatcher ( Any.ANY ) ; this . gap = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . gap = Any.ANY ; super }
Distance : 12

80
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = period ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = period ; }
Distance : 12

81
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = null ; }
Distance : 12

82
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . allowed = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . allowed = Any.ANY ; }
Distance : 11

83
Tree	{ return ( nSteps ) reportMatcher () ; }
Code	{ return ( nSteps ) reportMatcher () ; }
Distance : 10

84
Tree	{ return reportMatcher ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT ) . returnZero () ; }
Code	{ return reportMatcher ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT ) . returnZero () ; }
Distance : 7

85
Tree	{ reportMatcher ( Any.ANY ) ; originOffset = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; originOffset = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

86
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . tolerance = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . tolerance = null ; }
Distance : 12

87
Tree	{ return this . mode ; }
Code	{ return this . mode ; }
Distance : 12

88
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return NUMBER_CONSTANT ; }
Distance : 11

89
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . font = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . font = Any.ANY ; }
Distance : 11

90
Tree	{ super ( object ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( object ) ; returnZero ( Any.ANY ) ; }
Distance : 12

91
Tree	{ return this . mockSettings ; }
Code	{ return this . mockSettings ; }
Distance : 12

92
Tree	{ reportMatcher ( Any.ANY ) ; this . mode = interpolator.currentDerivative ; }
Code	{ reportMatcher ( Any.ANY ) ; this . mode = interpolator.currentDerivative ; }
Distance : 11

93
Tree	{ return this . object ; }
Code	{ return this . object ; }
Distance : 12

94
Tree	{ reportMatcher ( Null.NULL ) ; return null ; }
Code	{ reportMatcher ( Null.NULL ) ; return null ; }
Distance : 11

95
Tree	{ testTypes ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ testTypes ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

96
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return null ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return null ; }
Distance : 11

97
Tree	{ super ( T ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( T ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

98
Tree	{ return this . classToMock ; }
Code	{ return this . classToMock ; }
Distance : 12

99
Tree	{ reportMatcher ( Null.NULL ) ; return false ; }
Code	{ reportMatcher ( Null.NULL ) ; return false ; }
Distance : 11

100
Tree	{ return this . matcher ; }
Code	{ return this . matcher ; }
Distance : 12

101
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; enableUnusedLocalAssignmentCheck = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; enableUnusedLocalAssignmentCheck = false ; }
Distance : 11

102
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; iChronology = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; iChronology = false ; }
Distance : 11

103
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; scalar = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; scalar = false ; }
Distance : 11

104
Tree	{ reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; super }
Distance : 12

105
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

106
Tree	{ reportMatcher ( Any.ANY ) ; this . font = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . font = Any.ANY ; super }
Distance : 12

107
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = CheckRequiresForConstructors.Mode.FULL_COMPILE ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = CheckRequiresForConstructors.Mode.FULL_COMPILE ; }
Distance : 11

108
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return false ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return false ; }
Distance : 11

109
Tree	{ reportMatcher ( Any.ANY ) ; object = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; object = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

110
Tree	{ reportMatcher ( Any.ANY ) ; this . mode = TypeInferenceMode.OTI_ONLY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . mode = TypeInferenceMode.OTI_ONLY ; super }
Distance : 12

111
Tree	{ super ( DateTimeFieldType ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( DateTimeFieldType ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

112
Tree	{ reportMatcher ( v.data ) ; return null ; }
Code	{ reportMatcher ( v.data ) ; return null ; }
Distance : 11

113
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; success = interpolator.currentDerivative ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; success = interpolator.currentDerivative ; }
Distance : 11

114
Tree	{ return this . RETURNS_DEFAULTS ; }
Code	{ return this . RETURNS_DEFAULTS ; }
Distance : 12

115
Tree	{ return reportMatcher ( Any.ANY ) . < T > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < T > returnZero () ; }
Distance : 8

116
Tree	{ super ( RETURNS_DEFAULTS ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( RETURNS_DEFAULTS ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

117
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

118
Tree	{ return reportMatcher ( Any.ANY ) . < Object > returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Object > returnNull () ; }
Distance : 9

119
Tree	{ reportMatcher ( Any.ANY ) ; inputCharset = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; inputCharset = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

120
Tree	{ super ( RETURNS_DEFAULTS ) ; }
Code	{ super ( RETURNS_DEFAULTS ) ; }
Distance : 12

121
Tree	{ super ( object ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( object ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

122
Tree	{ return ( nSteps ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( nSteps ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

123
Tree	{ return ( matcher ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( matcher ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

124
Tree	{ return ( T ) byteValue ( Any.ANY ) ; }
Code	{ return ( T ) byteValue ( Any.ANY ) ; }
Distance : 11

125
Tree	{ reportMatcher ( Any.ANY ) ; this . allowed = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . allowed = Any.ANY ; super }
Distance : 12

126
Tree	{ return ( iValues ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( iValues ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

127
Tree	{ reportMatcher ( NotNull.NOT_NULL ) ; return null ; }
Code	{ reportMatcher ( NotNull.NOT_NULL ) ; return null ; }
Distance : 11

128
Tree	{ return ( nSteps ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( nSteps ) reportMatcher ( Any.ANY ) ; }
Distance : 11

129
Tree	{ return reportMatcher ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW ) . returnZero () ; }
Code	{ return reportMatcher ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW ) . returnZero () ; }
Distance : 7

130
Tree	{ reportMatcher ( NotNull.NOT_NULL ) ; return false ; }
Code	{ reportMatcher ( NotNull.NOT_NULL ) ; return false ; }
Distance : 11

131
Tree	{ return reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; }
Code	{ return reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; }
Distance : 7

132
Tree	{ super ( DateTimeFieldType ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( DateTimeFieldType ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

133
Tree	{ return ( matcher ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( matcher ) reportMatcher ( Any.ANY ) ; }
Distance : 11

134
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = LanguageMode.ECMASCRIPT_2015 ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = LanguageMode.ECMASCRIPT_2015 ; }
Distance : 11

135
Tree	{ return reportMatcher ( Any.ANY ) . < Object > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Object > returnZero () ; }
Distance : 8

136
Tree	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return null ; }
Code	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return null ; }
Distance : 11

137
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; this . mode = Any.ANY ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; this . mode = Any.ANY ; }
Distance : 11

138
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = map ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = map ; }
Distance : 12

139
Tree	{ return reportMatcher ( NotNull.NOT_NULL ) . returnZero () ; }
Code	{ return reportMatcher ( NotNull.NOT_NULL ) . returnZero () ; }
Distance : 7

140
Tree	{ super ( matcher ) ; }
Code	{ super ( matcher ) ; }
Distance : 12

141
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; success = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; success = false ; }
Distance : 11

142
Tree	{ reportMatcher ( Any.ANY ) ; this . object = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . object = Any.ANY ; }
Distance : 11

143
Tree	{ return ( matcher ) reportMatcher () ; }
Code	{ return ( matcher ) reportMatcher () ; }
Distance : 10

144
Tree	{ super ( DateTimeFieldType ) ; }
Code	{ super ( DateTimeFieldType ) ; }
Distance : 12

145
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

146
Tree	{ return anyObject ( Any.ANY ) . returnZero () ; }
Code	{ return anyObject ( Any.ANY ) . returnZero () ; }
Distance : 8

147
Tree	{ reportMatcher ( Any.ANY ) ; this . gap = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . gap = Any.ANY ; }
Distance : 11

148
Tree	{ return ( RETURNS_DEFAULTS ) reportMatcher () ; }
Code	{ return ( RETURNS_DEFAULTS ) reportMatcher () ; }
Distance : 10

149
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; value = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; value = false ; }
Distance : 11

150
Tree	{ return ( iValues ) reportMatcher () ; }
Code	{ return ( iValues ) reportMatcher () ; }
Distance : 10

151
Tree	{ reportMatcher ( Null.NULL ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Null.NULL ) ; return NUMBER_CONSTANT ; }
Distance : 11

152
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return NUMBER_CONSTANT ; }
Distance : 11

153
Tree	{ reportMatcher ( Any.ANY ) ; this . mode = interpolator.currentDerivative ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . mode = interpolator.currentDerivative ; super }
Distance : 12

154
Tree	{ reportMatcher ( NotNull.NOT_NULL ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( NotNull.NOT_NULL ) ; return NUMBER_CONSTANT ; }
Distance : 11

155
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = scalar ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = scalar ; }
Distance : 12

156
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 13

157
Tree	{ reportMatcher ( v.data ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( v.data ) ; return NUMBER_CONSTANT ; }
Distance : 11

158
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

159
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . font = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . font = null ; }
Distance : 12

160
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

161
Tree	{ reportMatcher ( Any.ANY ) ; this . font = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . font = Any.ANY ; }
Distance : 11

162
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 13

163
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 14

164
Tree	{ return anyObject ( Any.ANY ) ; }
Code	{ return anyObject ( Any.ANY ) ; }
Distance : 11

165
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . barPainter = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . barPainter = null ; }
Distance : 12

166
Tree	{ return reportMatcher ( Null.NULL ) ; }
Code	{ return reportMatcher ( Null.NULL ) ; }
Distance : 10

167
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . allowed = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . allowed = null ; }
Distance : 12

168
Tree	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return false ; }
Code	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return false ; }
Distance : 11

169
Tree	{ reportMatcher ( Any.ANY ) ; this . object = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . object = Any.ANY ; super }
Distance : 12

170
Tree	{ return ( Object ) reportMatcher () ; }
Code	{ return ( Object ) reportMatcher () ; }
Distance : 10

171
Tree	{ reportMatcher ( Any.ANY ) ; ConfigurationAccess = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; ConfigurationAccess = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

172
Tree	{ testTypes ( Any.ANY ) ; return false ; }
Code	{ testTypes ( Any.ANY ) ; return false ; }
Distance : 12

173
Tree	{ reportMatcher ( Any.ANY ) ; mockSettings = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; mockSettings = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

174
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; this . mode = Any.ANY ; super }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; this . mode = Any.ANY ; super }
Distance : 12

175
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . tolerance = map ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . tolerance = map ; }
Distance : 12

176
Tree	{ super ( object ) ; returnZero ( Any.ANY ) ; super }
Code	{ super ( object ) ; returnZero ( Any.ANY ) ; super }
Distance : 13

177
Tree	{ reportMatcher ( Any.ANY ) ; inputCharset = false ; }
Code	{ reportMatcher ( Any.ANY ) ; inputCharset = false ; }
Distance : 11

178
Tree	{ return; reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; }
Code	{ return; reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; }
Distance : 11

179
Tree	{ return reportMatcher ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT ) ; }
Code	{ return reportMatcher ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT ) ; }
Distance : 10

180
Tree	{ return reportMatcher ( AnyVararg.ANY_VARARG ) ; }
Code	{ return reportMatcher ( AnyVararg.ANY_VARARG ) ; }
Distance : 10

181
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = StringUtils.EMPTY ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = StringUtils.EMPTY ; }
Distance : 11

182
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . mode = interpolator.currentDerivative ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . mode = interpolator.currentDerivative ; }
Distance : 11

183
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . object = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . object = Any.ANY ; }
Distance : 11

184
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 14

185
Tree	{ return ( T ) byteValue ( Any.ANY ) . returnZero () ; }
Code	{ return ( T ) byteValue ( Any.ANY ) . returnZero () ; }
Distance : 8

186
Tree	{ reportMatcher ( Any.ANY ) ; this . allowed = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . allowed = Any.ANY ; }
Distance : 11

187
Tree	{ return reportMatcher ( NotNull.NOT_NULL ) ; }
Code	{ return reportMatcher ( NotNull.NOT_NULL ) ; }
Distance : 10

188
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 14

189
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

190
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; }
Distance : 11

191
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . mode = TypeInferenceMode.OTI_ONLY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . mode = TypeInferenceMode.OTI_ONLY ; }
Distance : 11

192
Tree	{ return reportMatcher ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW ) ; }
Code	{ return reportMatcher ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW ) ; }
Distance : 10

193
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

194
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = zFormat ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = zFormat ; }
Distance : 12

195
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; this . mode = null ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; this . mode = null ; }
Distance : 12

196
Tree	{ reportMatcher ( v.data ) ; return false ; }
Code	{ reportMatcher ( v.data ) ; return false ; }
Distance : 11

197
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 14

198
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 14

199
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 14

========================================================================


========================================================================
Example Number: 101
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Float . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Float})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ reportMatcher ( Any.ANY ) ; this . mode = TypeInferenceMode.OTI_ONLY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . mode = TypeInferenceMode.OTI_ONLY ; }
Distance : 11

1
Tree	{ reportMatcher ( Any.ANY ) ; currentDerivative = false ; }
Code	{ reportMatcher ( Any.ANY ) ; currentDerivative = false ; }
Distance : 11

2
Tree	{ return ( Object ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Object ) reportMatcher ( Any.ANY ) ; }
Distance : 11

3
Tree	{ return ( Object ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( Object ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

4
Tree	{ super ( chronology ) ; }
Code	{ super ( chronology ) ; }
Distance : 12

5
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return false ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return false ; }
Distance : 11

6
Tree	{ return reportMatcher ( AnyVararg.ANY_VARARG ) . returnZero () ; }
Code	{ return reportMatcher ( AnyVararg.ANY_VARARG ) . returnZero () ; }
Distance : 7

7
Tree	{ return reportMatcher ( Any.ANY ) . < T > byteValue () ; }
Code	{ return reportMatcher ( Any.ANY ) . < T > byteValue () ; }
Distance : 9

8
Tree	{ super ( RETURNS_DEFAULTS ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( RETURNS_DEFAULTS ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

9
Tree	{ reportMatcher ( Any.ANY ) ; ConfigurationAccess = false ; }
Code	{ reportMatcher ( Any.ANY ) ; ConfigurationAccess = false ; }
Distance : 11

10
Tree	{ super ( classToMock ) ; }
Code	{ super ( classToMock ) ; }
Distance : 12

11
Tree	{ reportMatcher ( Any.ANY ) ; originOffset = false ; }
Code	{ reportMatcher ( Any.ANY ) ; originOffset = false ; }
Distance : 11

12
Tree	{ reportMatcher ( Any.ANY ) ; object = false ; }
Code	{ reportMatcher ( Any.ANY ) ; object = false ; }
Distance : 11

13
Tree	{ super ( matcher ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( matcher ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

14
Tree	{ super ( classToMock ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( classToMock ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

15
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

16
Tree	{ reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; }
Distance : 11

17
Tree	{ return this . capturingMatcher ; }
Code	{ return this . capturingMatcher ; }
Distance : 12

18
Tree	{ super ( T ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( T ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

19
Tree	{ super ( object ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( object ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

20
Tree	{ testTypes ( Any.ANY ) ; return null ; }
Code	{ testTypes ( Any.ANY ) ; return null ; }
Distance : 12

21
Tree	{ super ( matcher ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( matcher ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

22
Tree	{ super ( RETURNS_DEFAULTS ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( RETURNS_DEFAULTS ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

23
Tree	{ return reportMatcher ( Null.NULL ) . returnZero () ; }
Code	{ return reportMatcher ( Null.NULL ) . returnZero () ; }
Distance : 7

24
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = false ; }
Distance : 11

25
Tree	{ return ( T ) reportMatcher () ; }
Code	{ return ( T ) reportMatcher () ; }
Distance : 10

26
Tree	{ super ( classToMock ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( classToMock ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

27
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = interpolator.currentDerivative ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = interpolator.currentDerivative ; }
Distance : 11

28
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; maxIterationCount = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; maxIterationCount = false ; }
Distance : 11

29
Tree	{ reportMatcher ( Any.ANY ) ; position = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; position = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

30
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

31
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 7

32
Tree	{ super ( matcher ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( matcher ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

33
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Distance : 11

34
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

35
Tree	{ return reportMatcher ( Any.ANY ) . < T > returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . < T > returnNull () ; }
Distance : 9

36
Tree	{ super ( T ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( T ) ; returnZero ( Any.ANY ) ; }
Distance : 12

37
Tree	{ return reportMatcher ( Any.ANY ) . < tolerance > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < tolerance > returnZero () ; }
Distance : 8

38
Tree	{ super ( T ) ; }
Code	{ super ( T ) ; }
Distance : 12

39
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

40
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Distance : 11

41
Tree	{ return ( T ) returnZero () ; }
Code	{ return ( T ) returnZero () ; }
Distance : 9

42
Tree	{ super ( classToMock ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( classToMock ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

43
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = TypeInferenceMode.OTI_ONLY ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = TypeInferenceMode.OTI_ONLY ; }
Distance : 11

44
Tree	{ return ( RETURNS_DEFAULTS ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( RETURNS_DEFAULTS ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

45
Tree	{ super ( T ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( T ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

46
Tree	{ super ( object ) ; }
Code	{ super ( object ) ; }
Distance : 12

47
Tree	{ return ( T ) returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return ( T ) returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

48
Tree	{ return reportMatcher ( Any.ANY ) . < Matcher > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Matcher > returnZero () ; }
Distance : 8

49
Tree	{ return ( T ) returnZero ( Any.ANY ) ; }
Code	{ return ( T ) returnZero ( Any.ANY ) ; }
Distance : 11

50
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

51
Tree	{ return this . allowed ; }
Code	{ return this . allowed ; }
Distance : 12

52
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . gap = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . gap = null ; }
Distance : 12

53
Tree	{ reportMatcher ( Any.ANY ) ; position = false ; }
Code	{ reportMatcher ( Any.ANY ) ; position = false ; }
Distance : 11

54
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; currentDerivative = false ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; currentDerivative = false ; }
Distance : 11

55
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; this . mode = map ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; this . mode = map ; }
Distance : 12

56
Tree	{ return ( RETURNS_DEFAULTS ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( RETURNS_DEFAULTS ) reportMatcher ( Any.ANY ) ; }
Distance : 11

57
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

58
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . gap = map ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . gap = map ; }
Distance : 12

59
Tree	{ super ( DateTimeFieldType ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( DateTimeFieldType ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

60
Tree	{ super ( T ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( T ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

61
Tree	{ reportMatcher ( Any.ANY ) ; listeners = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; listeners = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

62
Tree	{ return ( iValues ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( iValues ) reportMatcher ( Any.ANY ) ; }
Distance : 11

63
Tree	{ reportMatcher ( Any.ANY ) ; mockSettings = false ; }
Code	{ reportMatcher ( Any.ANY ) ; mockSettings = false ; }
Distance : 11

64
Tree	{ reportMatcher ( Any.ANY ) ; listeners = false ; }
Code	{ reportMatcher ( Any.ANY ) ; listeners = false ; }
Distance : 11

65
Tree	{ return reportMatcher ( Any.ANY ) . < T > argumentsMatch () ; }
Code	{ return reportMatcher ( Any.ANY ) . < T > argumentsMatch () ; }
Distance : 9

66
Tree	{ super ( T ) ; returnZero ( Any.ANY ) ; super }
Code	{ super ( T ) ; returnZero ( Any.ANY ) ; super }
Distance : 13

67
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; success = problem.y ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; success = problem.y ; }
Distance : 11

68
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = problem.y ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = problem.y ; }
Distance : 11

69
Tree	{ super ( object ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( object ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

70
Tree	{ super ( LINE_JOINER ) ; }
Code	{ super ( LINE_JOINER ) ; }
Distance : 12

71
Tree	{ super ( object ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( object ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

72
Tree	{ return reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; }
Code	{ return reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; }
Distance : 10

73
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . tolerance = scalar ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . tolerance = scalar ; }
Distance : 12

74
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . object = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . object = null ; }
Distance : 12

75
Tree	{ reportMatcher ( Any.ANY ) ; currentDerivative = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; currentDerivative = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

76
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . gap = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . gap = Any.ANY ; }
Distance : 11

77
Tree	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return NUMBER_CONSTANT ; }
Distance : 11

78
Tree	{ return ( T ) byteValue () ; }
Code	{ return ( T ) byteValue () ; }
Distance : 10

79
Tree	{ reportMatcher ( Any.ANY ) ; this . gap = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . gap = Any.ANY ; super }
Distance : 12

80
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = period ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = period ; }
Distance : 12

81
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = null ; }
Distance : 12

82
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . allowed = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . allowed = Any.ANY ; }
Distance : 11

83
Tree	{ return ( nSteps ) reportMatcher () ; }
Code	{ return ( nSteps ) reportMatcher () ; }
Distance : 10

84
Tree	{ return reportMatcher ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT ) . returnZero () ; }
Code	{ return reportMatcher ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT ) . returnZero () ; }
Distance : 7

85
Tree	{ reportMatcher ( Any.ANY ) ; originOffset = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; originOffset = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

86
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . tolerance = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . tolerance = null ; }
Distance : 12

87
Tree	{ return this . mode ; }
Code	{ return this . mode ; }
Distance : 12

88
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return NUMBER_CONSTANT ; }
Distance : 11

89
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . font = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . font = Any.ANY ; }
Distance : 11

90
Tree	{ super ( object ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( object ) ; returnZero ( Any.ANY ) ; }
Distance : 12

91
Tree	{ return this . mockSettings ; }
Code	{ return this . mockSettings ; }
Distance : 12

92
Tree	{ reportMatcher ( Any.ANY ) ; this . mode = interpolator.currentDerivative ; }
Code	{ reportMatcher ( Any.ANY ) ; this . mode = interpolator.currentDerivative ; }
Distance : 11

93
Tree	{ return this . object ; }
Code	{ return this . object ; }
Distance : 12

94
Tree	{ reportMatcher ( Null.NULL ) ; return null ; }
Code	{ reportMatcher ( Null.NULL ) ; return null ; }
Distance : 11

95
Tree	{ testTypes ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ testTypes ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

96
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return null ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return null ; }
Distance : 11

97
Tree	{ super ( T ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( T ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

98
Tree	{ return this . classToMock ; }
Code	{ return this . classToMock ; }
Distance : 12

99
Tree	{ reportMatcher ( Null.NULL ) ; return false ; }
Code	{ reportMatcher ( Null.NULL ) ; return false ; }
Distance : 11

100
Tree	{ return this . matcher ; }
Code	{ return this . matcher ; }
Distance : 12

101
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; enableUnusedLocalAssignmentCheck = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; enableUnusedLocalAssignmentCheck = false ; }
Distance : 11

102
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; iChronology = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; iChronology = false ; }
Distance : 11

103
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; scalar = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; scalar = false ; }
Distance : 11

104
Tree	{ reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; super }
Distance : 12

105
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

106
Tree	{ reportMatcher ( Any.ANY ) ; this . font = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . font = Any.ANY ; super }
Distance : 12

107
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = CheckRequiresForConstructors.Mode.FULL_COMPILE ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = CheckRequiresForConstructors.Mode.FULL_COMPILE ; }
Distance : 11

108
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return false ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return false ; }
Distance : 11

109
Tree	{ reportMatcher ( Any.ANY ) ; object = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; object = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

110
Tree	{ reportMatcher ( Any.ANY ) ; this . mode = TypeInferenceMode.OTI_ONLY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . mode = TypeInferenceMode.OTI_ONLY ; super }
Distance : 12

111
Tree	{ super ( DateTimeFieldType ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( DateTimeFieldType ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

112
Tree	{ reportMatcher ( v.data ) ; return null ; }
Code	{ reportMatcher ( v.data ) ; return null ; }
Distance : 11

113
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; success = interpolator.currentDerivative ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; success = interpolator.currentDerivative ; }
Distance : 11

114
Tree	{ return this . RETURNS_DEFAULTS ; }
Code	{ return this . RETURNS_DEFAULTS ; }
Distance : 12

115
Tree	{ return reportMatcher ( Any.ANY ) . < T > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < T > returnZero () ; }
Distance : 8

116
Tree	{ super ( RETURNS_DEFAULTS ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( RETURNS_DEFAULTS ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

117
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

118
Tree	{ return reportMatcher ( Any.ANY ) . < Object > returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Object > returnNull () ; }
Distance : 9

119
Tree	{ reportMatcher ( Any.ANY ) ; inputCharset = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; inputCharset = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

120
Tree	{ super ( RETURNS_DEFAULTS ) ; }
Code	{ super ( RETURNS_DEFAULTS ) ; }
Distance : 12

121
Tree	{ super ( object ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( object ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

122
Tree	{ return ( nSteps ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( nSteps ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

123
Tree	{ return ( matcher ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( matcher ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

124
Tree	{ return ( T ) byteValue ( Any.ANY ) ; }
Code	{ return ( T ) byteValue ( Any.ANY ) ; }
Distance : 11

125
Tree	{ reportMatcher ( Any.ANY ) ; this . allowed = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . allowed = Any.ANY ; super }
Distance : 12

126
Tree	{ return ( iValues ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( iValues ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

127
Tree	{ reportMatcher ( NotNull.NOT_NULL ) ; return null ; }
Code	{ reportMatcher ( NotNull.NOT_NULL ) ; return null ; }
Distance : 11

128
Tree	{ return ( nSteps ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( nSteps ) reportMatcher ( Any.ANY ) ; }
Distance : 11

129
Tree	{ return reportMatcher ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW ) . returnZero () ; }
Code	{ return reportMatcher ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW ) . returnZero () ; }
Distance : 7

130
Tree	{ reportMatcher ( NotNull.NOT_NULL ) ; return false ; }
Code	{ reportMatcher ( NotNull.NOT_NULL ) ; return false ; }
Distance : 11

131
Tree	{ return reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; }
Code	{ return reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; }
Distance : 7

132
Tree	{ super ( DateTimeFieldType ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( DateTimeFieldType ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

133
Tree	{ return ( matcher ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( matcher ) reportMatcher ( Any.ANY ) ; }
Distance : 11

134
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = LanguageMode.ECMASCRIPT_2015 ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = LanguageMode.ECMASCRIPT_2015 ; }
Distance : 11

135
Tree	{ return reportMatcher ( Any.ANY ) . < Object > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Object > returnZero () ; }
Distance : 8

136
Tree	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return null ; }
Code	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return null ; }
Distance : 11

137
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; this . mode = Any.ANY ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; this . mode = Any.ANY ; }
Distance : 11

138
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = map ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = map ; }
Distance : 12

139
Tree	{ return reportMatcher ( NotNull.NOT_NULL ) . returnZero () ; }
Code	{ return reportMatcher ( NotNull.NOT_NULL ) . returnZero () ; }
Distance : 7

140
Tree	{ super ( matcher ) ; }
Code	{ super ( matcher ) ; }
Distance : 12

141
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; success = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; success = false ; }
Distance : 11

142
Tree	{ reportMatcher ( Any.ANY ) ; this . object = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . object = Any.ANY ; }
Distance : 11

143
Tree	{ return ( matcher ) reportMatcher () ; }
Code	{ return ( matcher ) reportMatcher () ; }
Distance : 10

144
Tree	{ super ( DateTimeFieldType ) ; }
Code	{ super ( DateTimeFieldType ) ; }
Distance : 12

145
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

146
Tree	{ return anyObject ( Any.ANY ) . returnZero () ; }
Code	{ return anyObject ( Any.ANY ) . returnZero () ; }
Distance : 8

147
Tree	{ reportMatcher ( Any.ANY ) ; this . gap = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . gap = Any.ANY ; }
Distance : 11

148
Tree	{ return ( RETURNS_DEFAULTS ) reportMatcher () ; }
Code	{ return ( RETURNS_DEFAULTS ) reportMatcher () ; }
Distance : 10

149
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; value = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; value = false ; }
Distance : 11

150
Tree	{ return ( iValues ) reportMatcher () ; }
Code	{ return ( iValues ) reportMatcher () ; }
Distance : 10

151
Tree	{ reportMatcher ( Null.NULL ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Null.NULL ) ; return NUMBER_CONSTANT ; }
Distance : 11

152
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return NUMBER_CONSTANT ; }
Distance : 11

153
Tree	{ reportMatcher ( Any.ANY ) ; this . mode = interpolator.currentDerivative ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . mode = interpolator.currentDerivative ; super }
Distance : 12

154
Tree	{ reportMatcher ( NotNull.NOT_NULL ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( NotNull.NOT_NULL ) ; return NUMBER_CONSTANT ; }
Distance : 11

155
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = scalar ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = scalar ; }
Distance : 12

156
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 13

157
Tree	{ reportMatcher ( v.data ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( v.data ) ; return NUMBER_CONSTANT ; }
Distance : 11

158
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

159
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . font = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . font = null ; }
Distance : 12

160
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

161
Tree	{ reportMatcher ( Any.ANY ) ; this . font = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . font = Any.ANY ; }
Distance : 11

162
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 13

163
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 14

164
Tree	{ return anyObject ( Any.ANY ) ; }
Code	{ return anyObject ( Any.ANY ) ; }
Distance : 11

165
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . barPainter = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . barPainter = null ; }
Distance : 12

166
Tree	{ return reportMatcher ( Null.NULL ) ; }
Code	{ return reportMatcher ( Null.NULL ) ; }
Distance : 10

167
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . allowed = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . allowed = null ; }
Distance : 12

168
Tree	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return false ; }
Code	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return false ; }
Distance : 11

169
Tree	{ reportMatcher ( Any.ANY ) ; this . object = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . object = Any.ANY ; super }
Distance : 12

170
Tree	{ return ( Object ) reportMatcher () ; }
Code	{ return ( Object ) reportMatcher () ; }
Distance : 10

171
Tree	{ reportMatcher ( Any.ANY ) ; ConfigurationAccess = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; ConfigurationAccess = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

172
Tree	{ testTypes ( Any.ANY ) ; return false ; }
Code	{ testTypes ( Any.ANY ) ; return false ; }
Distance : 12

173
Tree	{ reportMatcher ( Any.ANY ) ; mockSettings = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; mockSettings = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

174
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; this . mode = Any.ANY ; super }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; this . mode = Any.ANY ; super }
Distance : 12

175
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . tolerance = map ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . tolerance = map ; }
Distance : 12

176
Tree	{ super ( object ) ; returnZero ( Any.ANY ) ; super }
Code	{ super ( object ) ; returnZero ( Any.ANY ) ; super }
Distance : 13

177
Tree	{ reportMatcher ( Any.ANY ) ; inputCharset = false ; }
Code	{ reportMatcher ( Any.ANY ) ; inputCharset = false ; }
Distance : 11

178
Tree	{ return; reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; }
Code	{ return; reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; }
Distance : 11

179
Tree	{ return reportMatcher ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT ) ; }
Code	{ return reportMatcher ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT ) ; }
Distance : 10

180
Tree	{ return reportMatcher ( AnyVararg.ANY_VARARG ) ; }
Code	{ return reportMatcher ( AnyVararg.ANY_VARARG ) ; }
Distance : 10

181
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = StringUtils.EMPTY ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = StringUtils.EMPTY ; }
Distance : 11

182
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . mode = interpolator.currentDerivative ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . mode = interpolator.currentDerivative ; }
Distance : 11

183
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . object = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . object = Any.ANY ; }
Distance : 11

184
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 14

185
Tree	{ return ( T ) byteValue ( Any.ANY ) . returnZero () ; }
Code	{ return ( T ) byteValue ( Any.ANY ) . returnZero () ; }
Distance : 8

186
Tree	{ reportMatcher ( Any.ANY ) ; this . allowed = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . allowed = Any.ANY ; }
Distance : 11

187
Tree	{ return reportMatcher ( NotNull.NOT_NULL ) ; }
Code	{ return reportMatcher ( NotNull.NOT_NULL ) ; }
Distance : 10

188
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 14

189
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

190
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; }
Distance : 11

191
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . mode = TypeInferenceMode.OTI_ONLY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . mode = TypeInferenceMode.OTI_ONLY ; }
Distance : 11

192
Tree	{ return reportMatcher ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW ) ; }
Code	{ return reportMatcher ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW ) ; }
Distance : 10

193
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

194
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = zFormat ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = zFormat ; }
Distance : 12

195
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; this . mode = null ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; this . mode = null ; }
Distance : 12

196
Tree	{ reportMatcher ( v.data ) ; return false ; }
Code	{ reportMatcher ( v.data ) ; return false ; }
Distance : 11

197
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 14

198
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 14

199
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 14

========================================================================


========================================================================
Example Number: 102
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Long . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Long})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ reportMatcher ( Any.ANY ) ; this . mode = TypeInferenceMode.OTI_ONLY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . mode = TypeInferenceMode.OTI_ONLY ; }
Distance : 11

1
Tree	{ reportMatcher ( Any.ANY ) ; currentDerivative = false ; }
Code	{ reportMatcher ( Any.ANY ) ; currentDerivative = false ; }
Distance : 11

2
Tree	{ return ( Object ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Object ) reportMatcher ( Any.ANY ) ; }
Distance : 11

3
Tree	{ return ( Object ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( Object ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

4
Tree	{ super ( chronology ) ; }
Code	{ super ( chronology ) ; }
Distance : 12

5
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return false ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return false ; }
Distance : 11

6
Tree	{ return reportMatcher ( AnyVararg.ANY_VARARG ) . returnZero () ; }
Code	{ return reportMatcher ( AnyVararg.ANY_VARARG ) . returnZero () ; }
Distance : 7

7
Tree	{ return reportMatcher ( Any.ANY ) . < T > byteValue () ; }
Code	{ return reportMatcher ( Any.ANY ) . < T > byteValue () ; }
Distance : 9

8
Tree	{ super ( RETURNS_DEFAULTS ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( RETURNS_DEFAULTS ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

9
Tree	{ reportMatcher ( Any.ANY ) ; ConfigurationAccess = false ; }
Code	{ reportMatcher ( Any.ANY ) ; ConfigurationAccess = false ; }
Distance : 11

10
Tree	{ super ( classToMock ) ; }
Code	{ super ( classToMock ) ; }
Distance : 12

11
Tree	{ reportMatcher ( Any.ANY ) ; originOffset = false ; }
Code	{ reportMatcher ( Any.ANY ) ; originOffset = false ; }
Distance : 11

12
Tree	{ reportMatcher ( Any.ANY ) ; object = false ; }
Code	{ reportMatcher ( Any.ANY ) ; object = false ; }
Distance : 11

13
Tree	{ super ( matcher ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( matcher ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

14
Tree	{ super ( classToMock ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( classToMock ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

15
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

16
Tree	{ reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; }
Distance : 11

17
Tree	{ return this . capturingMatcher ; }
Code	{ return this . capturingMatcher ; }
Distance : 12

18
Tree	{ super ( T ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( T ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

19
Tree	{ super ( object ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( object ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

20
Tree	{ testTypes ( Any.ANY ) ; return null ; }
Code	{ testTypes ( Any.ANY ) ; return null ; }
Distance : 12

21
Tree	{ super ( matcher ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( matcher ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

22
Tree	{ super ( RETURNS_DEFAULTS ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( RETURNS_DEFAULTS ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

23
Tree	{ return reportMatcher ( Null.NULL ) . returnZero () ; }
Code	{ return reportMatcher ( Null.NULL ) . returnZero () ; }
Distance : 7

24
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = false ; }
Distance : 11

25
Tree	{ return ( T ) reportMatcher () ; }
Code	{ return ( T ) reportMatcher () ; }
Distance : 10

26
Tree	{ super ( classToMock ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( classToMock ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

27
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = interpolator.currentDerivative ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = interpolator.currentDerivative ; }
Distance : 11

28
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; maxIterationCount = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; maxIterationCount = false ; }
Distance : 11

29
Tree	{ reportMatcher ( Any.ANY ) ; position = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; position = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

30
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

31
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 7

32
Tree	{ super ( matcher ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( matcher ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

33
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Distance : 11

34
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

35
Tree	{ return reportMatcher ( Any.ANY ) . < T > returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . < T > returnNull () ; }
Distance : 9

36
Tree	{ super ( T ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( T ) ; returnZero ( Any.ANY ) ; }
Distance : 12

37
Tree	{ return reportMatcher ( Any.ANY ) . < tolerance > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < tolerance > returnZero () ; }
Distance : 8

38
Tree	{ super ( T ) ; }
Code	{ super ( T ) ; }
Distance : 12

39
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

40
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Distance : 11

41
Tree	{ return ( T ) returnZero () ; }
Code	{ return ( T ) returnZero () ; }
Distance : 9

42
Tree	{ super ( classToMock ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( classToMock ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

43
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = TypeInferenceMode.OTI_ONLY ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = TypeInferenceMode.OTI_ONLY ; }
Distance : 11

44
Tree	{ return ( RETURNS_DEFAULTS ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( RETURNS_DEFAULTS ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

45
Tree	{ super ( T ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( T ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

46
Tree	{ super ( object ) ; }
Code	{ super ( object ) ; }
Distance : 12

47
Tree	{ return ( T ) returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return ( T ) returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

48
Tree	{ return reportMatcher ( Any.ANY ) . < Matcher > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Matcher > returnZero () ; }
Distance : 8

49
Tree	{ return ( T ) returnZero ( Any.ANY ) ; }
Code	{ return ( T ) returnZero ( Any.ANY ) ; }
Distance : 11

50
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

51
Tree	{ return this . allowed ; }
Code	{ return this . allowed ; }
Distance : 12

52
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . gap = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . gap = null ; }
Distance : 12

53
Tree	{ reportMatcher ( Any.ANY ) ; position = false ; }
Code	{ reportMatcher ( Any.ANY ) ; position = false ; }
Distance : 11

54
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; currentDerivative = false ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; currentDerivative = false ; }
Distance : 11

55
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; this . mode = map ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; this . mode = map ; }
Distance : 12

56
Tree	{ return ( RETURNS_DEFAULTS ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( RETURNS_DEFAULTS ) reportMatcher ( Any.ANY ) ; }
Distance : 11

57
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

58
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . gap = map ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . gap = map ; }
Distance : 12

59
Tree	{ super ( DateTimeFieldType ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( DateTimeFieldType ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

60
Tree	{ super ( T ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( T ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

61
Tree	{ reportMatcher ( Any.ANY ) ; listeners = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; listeners = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

62
Tree	{ return ( iValues ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( iValues ) reportMatcher ( Any.ANY ) ; }
Distance : 11

63
Tree	{ reportMatcher ( Any.ANY ) ; mockSettings = false ; }
Code	{ reportMatcher ( Any.ANY ) ; mockSettings = false ; }
Distance : 11

64
Tree	{ reportMatcher ( Any.ANY ) ; listeners = false ; }
Code	{ reportMatcher ( Any.ANY ) ; listeners = false ; }
Distance : 11

65
Tree	{ return reportMatcher ( Any.ANY ) . < T > argumentsMatch () ; }
Code	{ return reportMatcher ( Any.ANY ) . < T > argumentsMatch () ; }
Distance : 9

66
Tree	{ super ( T ) ; returnZero ( Any.ANY ) ; super }
Code	{ super ( T ) ; returnZero ( Any.ANY ) ; super }
Distance : 13

67
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; success = problem.y ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; success = problem.y ; }
Distance : 11

68
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = problem.y ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = problem.y ; }
Distance : 11

69
Tree	{ super ( object ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( object ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

70
Tree	{ super ( LINE_JOINER ) ; }
Code	{ super ( LINE_JOINER ) ; }
Distance : 12

71
Tree	{ super ( object ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( object ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

72
Tree	{ return reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; }
Code	{ return reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; }
Distance : 10

73
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . tolerance = scalar ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . tolerance = scalar ; }
Distance : 12

74
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . object = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . object = null ; }
Distance : 12

75
Tree	{ reportMatcher ( Any.ANY ) ; currentDerivative = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; currentDerivative = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

76
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . gap = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . gap = Any.ANY ; }
Distance : 11

77
Tree	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return NUMBER_CONSTANT ; }
Distance : 11

78
Tree	{ return ( T ) byteValue () ; }
Code	{ return ( T ) byteValue () ; }
Distance : 10

79
Tree	{ reportMatcher ( Any.ANY ) ; this . gap = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . gap = Any.ANY ; super }
Distance : 12

80
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = period ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = period ; }
Distance : 12

81
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = null ; }
Distance : 12

82
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . allowed = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . allowed = Any.ANY ; }
Distance : 11

83
Tree	{ return ( nSteps ) reportMatcher () ; }
Code	{ return ( nSteps ) reportMatcher () ; }
Distance : 10

84
Tree	{ return reportMatcher ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT ) . returnZero () ; }
Code	{ return reportMatcher ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT ) . returnZero () ; }
Distance : 7

85
Tree	{ reportMatcher ( Any.ANY ) ; originOffset = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; originOffset = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

86
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . tolerance = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . tolerance = null ; }
Distance : 12

87
Tree	{ return this . mode ; }
Code	{ return this . mode ; }
Distance : 12

88
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return NUMBER_CONSTANT ; }
Distance : 11

89
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . font = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . font = Any.ANY ; }
Distance : 11

90
Tree	{ super ( object ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( object ) ; returnZero ( Any.ANY ) ; }
Distance : 12

91
Tree	{ return this . mockSettings ; }
Code	{ return this . mockSettings ; }
Distance : 12

92
Tree	{ reportMatcher ( Any.ANY ) ; this . mode = interpolator.currentDerivative ; }
Code	{ reportMatcher ( Any.ANY ) ; this . mode = interpolator.currentDerivative ; }
Distance : 11

93
Tree	{ return this . object ; }
Code	{ return this . object ; }
Distance : 12

94
Tree	{ reportMatcher ( Null.NULL ) ; return null ; }
Code	{ reportMatcher ( Null.NULL ) ; return null ; }
Distance : 11

95
Tree	{ testTypes ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ testTypes ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

96
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return null ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return null ; }
Distance : 11

97
Tree	{ super ( T ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( T ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

98
Tree	{ return this . classToMock ; }
Code	{ return this . classToMock ; }
Distance : 12

99
Tree	{ reportMatcher ( Null.NULL ) ; return false ; }
Code	{ reportMatcher ( Null.NULL ) ; return false ; }
Distance : 11

100
Tree	{ return this . matcher ; }
Code	{ return this . matcher ; }
Distance : 12

101
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; enableUnusedLocalAssignmentCheck = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; enableUnusedLocalAssignmentCheck = false ; }
Distance : 11

102
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; iChronology = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; iChronology = false ; }
Distance : 11

103
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; scalar = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; scalar = false ; }
Distance : 11

104
Tree	{ reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; super }
Distance : 12

105
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

106
Tree	{ reportMatcher ( Any.ANY ) ; this . font = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . font = Any.ANY ; super }
Distance : 12

107
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = CheckRequiresForConstructors.Mode.FULL_COMPILE ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = CheckRequiresForConstructors.Mode.FULL_COMPILE ; }
Distance : 11

108
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return false ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return false ; }
Distance : 11

109
Tree	{ reportMatcher ( Any.ANY ) ; object = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; object = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

110
Tree	{ reportMatcher ( Any.ANY ) ; this . mode = TypeInferenceMode.OTI_ONLY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . mode = TypeInferenceMode.OTI_ONLY ; super }
Distance : 12

111
Tree	{ super ( DateTimeFieldType ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( DateTimeFieldType ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

112
Tree	{ reportMatcher ( v.data ) ; return null ; }
Code	{ reportMatcher ( v.data ) ; return null ; }
Distance : 11

113
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; success = interpolator.currentDerivative ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; success = interpolator.currentDerivative ; }
Distance : 11

114
Tree	{ return this . RETURNS_DEFAULTS ; }
Code	{ return this . RETURNS_DEFAULTS ; }
Distance : 12

115
Tree	{ return reportMatcher ( Any.ANY ) . < T > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < T > returnZero () ; }
Distance : 8

116
Tree	{ super ( RETURNS_DEFAULTS ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( RETURNS_DEFAULTS ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

117
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

118
Tree	{ return reportMatcher ( Any.ANY ) . < Object > returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Object > returnNull () ; }
Distance : 9

119
Tree	{ reportMatcher ( Any.ANY ) ; inputCharset = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; inputCharset = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

120
Tree	{ super ( RETURNS_DEFAULTS ) ; }
Code	{ super ( RETURNS_DEFAULTS ) ; }
Distance : 12

121
Tree	{ super ( object ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( object ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

122
Tree	{ return ( nSteps ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( nSteps ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

123
Tree	{ return ( matcher ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( matcher ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

124
Tree	{ return ( T ) byteValue ( Any.ANY ) ; }
Code	{ return ( T ) byteValue ( Any.ANY ) ; }
Distance : 11

125
Tree	{ reportMatcher ( Any.ANY ) ; this . allowed = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . allowed = Any.ANY ; super }
Distance : 12

126
Tree	{ return ( iValues ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( iValues ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

127
Tree	{ reportMatcher ( NotNull.NOT_NULL ) ; return null ; }
Code	{ reportMatcher ( NotNull.NOT_NULL ) ; return null ; }
Distance : 11

128
Tree	{ return ( nSteps ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( nSteps ) reportMatcher ( Any.ANY ) ; }
Distance : 11

129
Tree	{ return reportMatcher ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW ) . returnZero () ; }
Code	{ return reportMatcher ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW ) . returnZero () ; }
Distance : 7

130
Tree	{ reportMatcher ( NotNull.NOT_NULL ) ; return false ; }
Code	{ reportMatcher ( NotNull.NOT_NULL ) ; return false ; }
Distance : 11

131
Tree	{ return reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; }
Code	{ return reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; }
Distance : 7

132
Tree	{ super ( DateTimeFieldType ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( DateTimeFieldType ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

133
Tree	{ return ( matcher ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( matcher ) reportMatcher ( Any.ANY ) ; }
Distance : 11

134
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = LanguageMode.ECMASCRIPT_2015 ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = LanguageMode.ECMASCRIPT_2015 ; }
Distance : 11

135
Tree	{ return reportMatcher ( Any.ANY ) . < Object > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Object > returnZero () ; }
Distance : 8

136
Tree	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return null ; }
Code	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return null ; }
Distance : 11

137
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; this . mode = Any.ANY ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; this . mode = Any.ANY ; }
Distance : 11

138
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = map ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = map ; }
Distance : 12

139
Tree	{ return reportMatcher ( NotNull.NOT_NULL ) . returnZero () ; }
Code	{ return reportMatcher ( NotNull.NOT_NULL ) . returnZero () ; }
Distance : 7

140
Tree	{ super ( matcher ) ; }
Code	{ super ( matcher ) ; }
Distance : 12

141
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; success = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; success = false ; }
Distance : 11

142
Tree	{ reportMatcher ( Any.ANY ) ; this . object = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . object = Any.ANY ; }
Distance : 11

143
Tree	{ return ( matcher ) reportMatcher () ; }
Code	{ return ( matcher ) reportMatcher () ; }
Distance : 10

144
Tree	{ super ( DateTimeFieldType ) ; }
Code	{ super ( DateTimeFieldType ) ; }
Distance : 12

145
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

146
Tree	{ return anyObject ( Any.ANY ) . returnZero () ; }
Code	{ return anyObject ( Any.ANY ) . returnZero () ; }
Distance : 8

147
Tree	{ reportMatcher ( Any.ANY ) ; this . gap = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . gap = Any.ANY ; }
Distance : 11

148
Tree	{ return ( RETURNS_DEFAULTS ) reportMatcher () ; }
Code	{ return ( RETURNS_DEFAULTS ) reportMatcher () ; }
Distance : 10

149
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; value = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; value = false ; }
Distance : 11

150
Tree	{ return ( iValues ) reportMatcher () ; }
Code	{ return ( iValues ) reportMatcher () ; }
Distance : 10

151
Tree	{ reportMatcher ( Null.NULL ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Null.NULL ) ; return NUMBER_CONSTANT ; }
Distance : 11

152
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return NUMBER_CONSTANT ; }
Distance : 11

153
Tree	{ reportMatcher ( Any.ANY ) ; this . mode = interpolator.currentDerivative ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . mode = interpolator.currentDerivative ; super }
Distance : 12

154
Tree	{ reportMatcher ( NotNull.NOT_NULL ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( NotNull.NOT_NULL ) ; return NUMBER_CONSTANT ; }
Distance : 11

155
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = scalar ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = scalar ; }
Distance : 12

156
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 13

157
Tree	{ reportMatcher ( v.data ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( v.data ) ; return NUMBER_CONSTANT ; }
Distance : 11

158
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

159
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . font = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . font = null ; }
Distance : 12

160
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

161
Tree	{ reportMatcher ( Any.ANY ) ; this . font = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . font = Any.ANY ; }
Distance : 11

162
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 13

163
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 14

164
Tree	{ return anyObject ( Any.ANY ) ; }
Code	{ return anyObject ( Any.ANY ) ; }
Distance : 11

165
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . barPainter = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . barPainter = null ; }
Distance : 12

166
Tree	{ return reportMatcher ( Null.NULL ) ; }
Code	{ return reportMatcher ( Null.NULL ) ; }
Distance : 10

167
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . allowed = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . allowed = null ; }
Distance : 12

168
Tree	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return false ; }
Code	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return false ; }
Distance : 11

169
Tree	{ reportMatcher ( Any.ANY ) ; this . object = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . object = Any.ANY ; super }
Distance : 12

170
Tree	{ return ( Object ) reportMatcher () ; }
Code	{ return ( Object ) reportMatcher () ; }
Distance : 10

171
Tree	{ reportMatcher ( Any.ANY ) ; ConfigurationAccess = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; ConfigurationAccess = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

172
Tree	{ testTypes ( Any.ANY ) ; return false ; }
Code	{ testTypes ( Any.ANY ) ; return false ; }
Distance : 12

173
Tree	{ reportMatcher ( Any.ANY ) ; mockSettings = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; mockSettings = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

174
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; this . mode = Any.ANY ; super }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; this . mode = Any.ANY ; super }
Distance : 12

175
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . tolerance = map ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . tolerance = map ; }
Distance : 12

176
Tree	{ super ( object ) ; returnZero ( Any.ANY ) ; super }
Code	{ super ( object ) ; returnZero ( Any.ANY ) ; super }
Distance : 13

177
Tree	{ reportMatcher ( Any.ANY ) ; inputCharset = false ; }
Code	{ reportMatcher ( Any.ANY ) ; inputCharset = false ; }
Distance : 11

178
Tree	{ return; reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; }
Code	{ return; reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; }
Distance : 11

179
Tree	{ return reportMatcher ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT ) ; }
Code	{ return reportMatcher ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT ) ; }
Distance : 10

180
Tree	{ return reportMatcher ( AnyVararg.ANY_VARARG ) ; }
Code	{ return reportMatcher ( AnyVararg.ANY_VARARG ) ; }
Distance : 10

181
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = StringUtils.EMPTY ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = StringUtils.EMPTY ; }
Distance : 11

182
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . mode = interpolator.currentDerivative ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . mode = interpolator.currentDerivative ; }
Distance : 11

183
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . object = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . object = Any.ANY ; }
Distance : 11

184
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 14

185
Tree	{ return ( T ) byteValue ( Any.ANY ) . returnZero () ; }
Code	{ return ( T ) byteValue ( Any.ANY ) . returnZero () ; }
Distance : 8

186
Tree	{ reportMatcher ( Any.ANY ) ; this . allowed = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . allowed = Any.ANY ; }
Distance : 11

187
Tree	{ return reportMatcher ( NotNull.NOT_NULL ) ; }
Code	{ return reportMatcher ( NotNull.NOT_NULL ) ; }
Distance : 10

188
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 14

189
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

190
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; }
Distance : 11

191
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . mode = TypeInferenceMode.OTI_ONLY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . mode = TypeInferenceMode.OTI_ONLY ; }
Distance : 11

192
Tree	{ return reportMatcher ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW ) ; }
Code	{ return reportMatcher ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW ) ; }
Distance : 10

193
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

194
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = zFormat ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = zFormat ; }
Distance : 12

195
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; this . mode = null ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; this . mode = null ; }
Distance : 12

196
Tree	{ reportMatcher ( v.data ) ; return false ; }
Code	{ reportMatcher ( v.data ) ; return false ; }
Distance : 11

197
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 14

198
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 14

199
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 14

========================================================================


========================================================================
Example Number: 103
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Integer . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Integer})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ reportMatcher ( Any.ANY ) ; this . mode = TypeInferenceMode.OTI_ONLY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . mode = TypeInferenceMode.OTI_ONLY ; }
Distance : 11

1
Tree	{ reportMatcher ( Any.ANY ) ; currentDerivative = false ; }
Code	{ reportMatcher ( Any.ANY ) ; currentDerivative = false ; }
Distance : 11

2
Tree	{ return ( Object ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Object ) reportMatcher ( Any.ANY ) ; }
Distance : 11

3
Tree	{ return ( Object ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( Object ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

4
Tree	{ super ( chronology ) ; }
Code	{ super ( chronology ) ; }
Distance : 12

5
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return false ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return false ; }
Distance : 11

6
Tree	{ return reportMatcher ( AnyVararg.ANY_VARARG ) . returnZero () ; }
Code	{ return reportMatcher ( AnyVararg.ANY_VARARG ) . returnZero () ; }
Distance : 7

7
Tree	{ return reportMatcher ( Any.ANY ) . < T > byteValue () ; }
Code	{ return reportMatcher ( Any.ANY ) . < T > byteValue () ; }
Distance : 9

8
Tree	{ super ( RETURNS_DEFAULTS ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( RETURNS_DEFAULTS ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

9
Tree	{ reportMatcher ( Any.ANY ) ; ConfigurationAccess = false ; }
Code	{ reportMatcher ( Any.ANY ) ; ConfigurationAccess = false ; }
Distance : 11

10
Tree	{ super ( classToMock ) ; }
Code	{ super ( classToMock ) ; }
Distance : 12

11
Tree	{ reportMatcher ( Any.ANY ) ; originOffset = false ; }
Code	{ reportMatcher ( Any.ANY ) ; originOffset = false ; }
Distance : 11

12
Tree	{ reportMatcher ( Any.ANY ) ; object = false ; }
Code	{ reportMatcher ( Any.ANY ) ; object = false ; }
Distance : 11

13
Tree	{ super ( matcher ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( matcher ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

14
Tree	{ super ( classToMock ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( classToMock ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

15
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

16
Tree	{ reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; }
Distance : 11

17
Tree	{ return this . capturingMatcher ; }
Code	{ return this . capturingMatcher ; }
Distance : 12

18
Tree	{ super ( T ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( T ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

19
Tree	{ super ( object ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( object ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

20
Tree	{ testTypes ( Any.ANY ) ; return null ; }
Code	{ testTypes ( Any.ANY ) ; return null ; }
Distance : 12

21
Tree	{ super ( matcher ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( matcher ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

22
Tree	{ super ( RETURNS_DEFAULTS ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( RETURNS_DEFAULTS ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

23
Tree	{ return reportMatcher ( Null.NULL ) . returnZero () ; }
Code	{ return reportMatcher ( Null.NULL ) . returnZero () ; }
Distance : 7

24
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = false ; }
Distance : 11

25
Tree	{ return ( T ) reportMatcher () ; }
Code	{ return ( T ) reportMatcher () ; }
Distance : 10

26
Tree	{ super ( classToMock ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( classToMock ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

27
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = interpolator.currentDerivative ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = interpolator.currentDerivative ; }
Distance : 11

28
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; maxIterationCount = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; maxIterationCount = false ; }
Distance : 11

29
Tree	{ reportMatcher ( Any.ANY ) ; position = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; position = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

30
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

31
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 7

32
Tree	{ super ( matcher ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( matcher ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

33
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Distance : 11

34
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

35
Tree	{ return reportMatcher ( Any.ANY ) . < T > returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . < T > returnNull () ; }
Distance : 9

36
Tree	{ super ( T ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( T ) ; returnZero ( Any.ANY ) ; }
Distance : 12

37
Tree	{ return reportMatcher ( Any.ANY ) . < tolerance > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < tolerance > returnZero () ; }
Distance : 8

38
Tree	{ super ( T ) ; }
Code	{ super ( T ) ; }
Distance : 12

39
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

40
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Distance : 11

41
Tree	{ return ( T ) returnZero () ; }
Code	{ return ( T ) returnZero () ; }
Distance : 9

42
Tree	{ super ( classToMock ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( classToMock ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

43
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = TypeInferenceMode.OTI_ONLY ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = TypeInferenceMode.OTI_ONLY ; }
Distance : 11

44
Tree	{ return ( RETURNS_DEFAULTS ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( RETURNS_DEFAULTS ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

45
Tree	{ super ( T ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( T ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

46
Tree	{ super ( object ) ; }
Code	{ super ( object ) ; }
Distance : 12

47
Tree	{ return ( T ) returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return ( T ) returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

48
Tree	{ return reportMatcher ( Any.ANY ) . < Matcher > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Matcher > returnZero () ; }
Distance : 8

49
Tree	{ return ( T ) returnZero ( Any.ANY ) ; }
Code	{ return ( T ) returnZero ( Any.ANY ) ; }
Distance : 11

50
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

51
Tree	{ return this . allowed ; }
Code	{ return this . allowed ; }
Distance : 12

52
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . gap = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . gap = null ; }
Distance : 12

53
Tree	{ reportMatcher ( Any.ANY ) ; position = false ; }
Code	{ reportMatcher ( Any.ANY ) ; position = false ; }
Distance : 11

54
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; currentDerivative = false ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; currentDerivative = false ; }
Distance : 11

55
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; this . mode = map ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; this . mode = map ; }
Distance : 12

56
Tree	{ return ( RETURNS_DEFAULTS ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( RETURNS_DEFAULTS ) reportMatcher ( Any.ANY ) ; }
Distance : 11

57
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

58
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . gap = map ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . gap = map ; }
Distance : 12

59
Tree	{ super ( DateTimeFieldType ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( DateTimeFieldType ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

60
Tree	{ super ( T ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( T ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

61
Tree	{ reportMatcher ( Any.ANY ) ; listeners = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; listeners = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

62
Tree	{ return ( iValues ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( iValues ) reportMatcher ( Any.ANY ) ; }
Distance : 11

63
Tree	{ reportMatcher ( Any.ANY ) ; mockSettings = false ; }
Code	{ reportMatcher ( Any.ANY ) ; mockSettings = false ; }
Distance : 11

64
Tree	{ reportMatcher ( Any.ANY ) ; listeners = false ; }
Code	{ reportMatcher ( Any.ANY ) ; listeners = false ; }
Distance : 11

65
Tree	{ return reportMatcher ( Any.ANY ) . < T > argumentsMatch () ; }
Code	{ return reportMatcher ( Any.ANY ) . < T > argumentsMatch () ; }
Distance : 9

66
Tree	{ super ( T ) ; returnZero ( Any.ANY ) ; super }
Code	{ super ( T ) ; returnZero ( Any.ANY ) ; super }
Distance : 13

67
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; success = problem.y ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; success = problem.y ; }
Distance : 11

68
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = problem.y ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = problem.y ; }
Distance : 11

69
Tree	{ super ( object ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( object ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

70
Tree	{ super ( LINE_JOINER ) ; }
Code	{ super ( LINE_JOINER ) ; }
Distance : 12

71
Tree	{ super ( object ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( object ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

72
Tree	{ return reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; }
Code	{ return reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; }
Distance : 10

73
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . tolerance = scalar ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . tolerance = scalar ; }
Distance : 12

74
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . object = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . object = null ; }
Distance : 12

75
Tree	{ reportMatcher ( Any.ANY ) ; currentDerivative = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; currentDerivative = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

76
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . gap = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . gap = Any.ANY ; }
Distance : 11

77
Tree	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return NUMBER_CONSTANT ; }
Distance : 11

78
Tree	{ return ( T ) byteValue () ; }
Code	{ return ( T ) byteValue () ; }
Distance : 10

79
Tree	{ reportMatcher ( Any.ANY ) ; this . gap = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . gap = Any.ANY ; super }
Distance : 12

80
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = period ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = period ; }
Distance : 12

81
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = null ; }
Distance : 12

82
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . allowed = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . allowed = Any.ANY ; }
Distance : 11

83
Tree	{ return ( nSteps ) reportMatcher () ; }
Code	{ return ( nSteps ) reportMatcher () ; }
Distance : 10

84
Tree	{ return reportMatcher ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT ) . returnZero () ; }
Code	{ return reportMatcher ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT ) . returnZero () ; }
Distance : 7

85
Tree	{ reportMatcher ( Any.ANY ) ; originOffset = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; originOffset = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

86
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . tolerance = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . tolerance = null ; }
Distance : 12

87
Tree	{ return this . mode ; }
Code	{ return this . mode ; }
Distance : 12

88
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return NUMBER_CONSTANT ; }
Distance : 11

89
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . font = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . font = Any.ANY ; }
Distance : 11

90
Tree	{ super ( object ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( object ) ; returnZero ( Any.ANY ) ; }
Distance : 12

91
Tree	{ return this . mockSettings ; }
Code	{ return this . mockSettings ; }
Distance : 12

92
Tree	{ reportMatcher ( Any.ANY ) ; this . mode = interpolator.currentDerivative ; }
Code	{ reportMatcher ( Any.ANY ) ; this . mode = interpolator.currentDerivative ; }
Distance : 11

93
Tree	{ return this . object ; }
Code	{ return this . object ; }
Distance : 12

94
Tree	{ reportMatcher ( Null.NULL ) ; return null ; }
Code	{ reportMatcher ( Null.NULL ) ; return null ; }
Distance : 11

95
Tree	{ testTypes ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ testTypes ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

96
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return null ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return null ; }
Distance : 11

97
Tree	{ super ( T ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( T ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

98
Tree	{ return this . classToMock ; }
Code	{ return this . classToMock ; }
Distance : 12

99
Tree	{ reportMatcher ( Null.NULL ) ; return false ; }
Code	{ reportMatcher ( Null.NULL ) ; return false ; }
Distance : 11

100
Tree	{ return this . matcher ; }
Code	{ return this . matcher ; }
Distance : 12

101
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; enableUnusedLocalAssignmentCheck = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; enableUnusedLocalAssignmentCheck = false ; }
Distance : 11

102
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; iChronology = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; iChronology = false ; }
Distance : 11

103
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; scalar = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; scalar = false ; }
Distance : 11

104
Tree	{ reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; super }
Distance : 12

105
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

106
Tree	{ reportMatcher ( Any.ANY ) ; this . font = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . font = Any.ANY ; super }
Distance : 12

107
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = CheckRequiresForConstructors.Mode.FULL_COMPILE ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = CheckRequiresForConstructors.Mode.FULL_COMPILE ; }
Distance : 11

108
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return false ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return false ; }
Distance : 11

109
Tree	{ reportMatcher ( Any.ANY ) ; object = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; object = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

110
Tree	{ reportMatcher ( Any.ANY ) ; this . mode = TypeInferenceMode.OTI_ONLY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . mode = TypeInferenceMode.OTI_ONLY ; super }
Distance : 12

111
Tree	{ super ( DateTimeFieldType ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( DateTimeFieldType ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

112
Tree	{ reportMatcher ( v.data ) ; return null ; }
Code	{ reportMatcher ( v.data ) ; return null ; }
Distance : 11

113
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; success = interpolator.currentDerivative ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; success = interpolator.currentDerivative ; }
Distance : 11

114
Tree	{ return this . RETURNS_DEFAULTS ; }
Code	{ return this . RETURNS_DEFAULTS ; }
Distance : 12

115
Tree	{ return reportMatcher ( Any.ANY ) . < T > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < T > returnZero () ; }
Distance : 8

116
Tree	{ super ( RETURNS_DEFAULTS ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( RETURNS_DEFAULTS ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

117
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

118
Tree	{ return reportMatcher ( Any.ANY ) . < Object > returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Object > returnNull () ; }
Distance : 9

119
Tree	{ reportMatcher ( Any.ANY ) ; inputCharset = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; inputCharset = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

120
Tree	{ super ( RETURNS_DEFAULTS ) ; }
Code	{ super ( RETURNS_DEFAULTS ) ; }
Distance : 12

121
Tree	{ super ( object ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( object ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

122
Tree	{ return ( nSteps ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( nSteps ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

123
Tree	{ return ( matcher ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( matcher ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

124
Tree	{ return ( T ) byteValue ( Any.ANY ) ; }
Code	{ return ( T ) byteValue ( Any.ANY ) ; }
Distance : 11

125
Tree	{ reportMatcher ( Any.ANY ) ; this . allowed = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . allowed = Any.ANY ; super }
Distance : 12

126
Tree	{ return ( iValues ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( iValues ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

127
Tree	{ reportMatcher ( NotNull.NOT_NULL ) ; return null ; }
Code	{ reportMatcher ( NotNull.NOT_NULL ) ; return null ; }
Distance : 11

128
Tree	{ return ( nSteps ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( nSteps ) reportMatcher ( Any.ANY ) ; }
Distance : 11

129
Tree	{ return reportMatcher ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW ) . returnZero () ; }
Code	{ return reportMatcher ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW ) . returnZero () ; }
Distance : 7

130
Tree	{ reportMatcher ( NotNull.NOT_NULL ) ; return false ; }
Code	{ reportMatcher ( NotNull.NOT_NULL ) ; return false ; }
Distance : 11

131
Tree	{ return reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; }
Code	{ return reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; }
Distance : 7

132
Tree	{ super ( DateTimeFieldType ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( DateTimeFieldType ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

133
Tree	{ return ( matcher ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( matcher ) reportMatcher ( Any.ANY ) ; }
Distance : 11

134
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = LanguageMode.ECMASCRIPT_2015 ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = LanguageMode.ECMASCRIPT_2015 ; }
Distance : 11

135
Tree	{ return reportMatcher ( Any.ANY ) . < Object > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Object > returnZero () ; }
Distance : 8

136
Tree	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return null ; }
Code	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return null ; }
Distance : 11

137
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; this . mode = Any.ANY ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; this . mode = Any.ANY ; }
Distance : 11

138
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = map ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = map ; }
Distance : 12

139
Tree	{ return reportMatcher ( NotNull.NOT_NULL ) . returnZero () ; }
Code	{ return reportMatcher ( NotNull.NOT_NULL ) . returnZero () ; }
Distance : 7

140
Tree	{ super ( matcher ) ; }
Code	{ super ( matcher ) ; }
Distance : 12

141
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; success = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; success = false ; }
Distance : 11

142
Tree	{ reportMatcher ( Any.ANY ) ; this . object = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . object = Any.ANY ; }
Distance : 11

143
Tree	{ return ( matcher ) reportMatcher () ; }
Code	{ return ( matcher ) reportMatcher () ; }
Distance : 10

144
Tree	{ super ( DateTimeFieldType ) ; }
Code	{ super ( DateTimeFieldType ) ; }
Distance : 12

145
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

146
Tree	{ return anyObject ( Any.ANY ) . returnZero () ; }
Code	{ return anyObject ( Any.ANY ) . returnZero () ; }
Distance : 8

147
Tree	{ reportMatcher ( Any.ANY ) ; this . gap = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . gap = Any.ANY ; }
Distance : 11

148
Tree	{ return ( RETURNS_DEFAULTS ) reportMatcher () ; }
Code	{ return ( RETURNS_DEFAULTS ) reportMatcher () ; }
Distance : 10

149
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; value = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; value = false ; }
Distance : 11

150
Tree	{ return ( iValues ) reportMatcher () ; }
Code	{ return ( iValues ) reportMatcher () ; }
Distance : 10

151
Tree	{ reportMatcher ( Null.NULL ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Null.NULL ) ; return NUMBER_CONSTANT ; }
Distance : 11

152
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return NUMBER_CONSTANT ; }
Distance : 11

153
Tree	{ reportMatcher ( Any.ANY ) ; this . mode = interpolator.currentDerivative ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . mode = interpolator.currentDerivative ; super }
Distance : 12

154
Tree	{ reportMatcher ( NotNull.NOT_NULL ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( NotNull.NOT_NULL ) ; return NUMBER_CONSTANT ; }
Distance : 11

155
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = scalar ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = scalar ; }
Distance : 12

156
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 13

157
Tree	{ reportMatcher ( v.data ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( v.data ) ; return NUMBER_CONSTANT ; }
Distance : 11

158
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

159
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . font = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . font = null ; }
Distance : 12

160
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

161
Tree	{ reportMatcher ( Any.ANY ) ; this . font = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . font = Any.ANY ; }
Distance : 11

162
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 13

163
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 14

164
Tree	{ return anyObject ( Any.ANY ) ; }
Code	{ return anyObject ( Any.ANY ) ; }
Distance : 11

165
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . barPainter = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . barPainter = null ; }
Distance : 12

166
Tree	{ return reportMatcher ( Null.NULL ) ; }
Code	{ return reportMatcher ( Null.NULL ) ; }
Distance : 10

167
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . allowed = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . allowed = null ; }
Distance : 12

168
Tree	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return false ; }
Code	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return false ; }
Distance : 11

169
Tree	{ reportMatcher ( Any.ANY ) ; this . object = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . object = Any.ANY ; super }
Distance : 12

170
Tree	{ return ( Object ) reportMatcher () ; }
Code	{ return ( Object ) reportMatcher () ; }
Distance : 10

171
Tree	{ reportMatcher ( Any.ANY ) ; ConfigurationAccess = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; ConfigurationAccess = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

172
Tree	{ testTypes ( Any.ANY ) ; return false ; }
Code	{ testTypes ( Any.ANY ) ; return false ; }
Distance : 12

173
Tree	{ reportMatcher ( Any.ANY ) ; mockSettings = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; mockSettings = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

174
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; this . mode = Any.ANY ; super }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; this . mode = Any.ANY ; super }
Distance : 12

175
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . tolerance = map ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . tolerance = map ; }
Distance : 12

176
Tree	{ super ( object ) ; returnZero ( Any.ANY ) ; super }
Code	{ super ( object ) ; returnZero ( Any.ANY ) ; super }
Distance : 13

177
Tree	{ reportMatcher ( Any.ANY ) ; inputCharset = false ; }
Code	{ reportMatcher ( Any.ANY ) ; inputCharset = false ; }
Distance : 11

178
Tree	{ return; reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; }
Code	{ return; reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; }
Distance : 11

179
Tree	{ return reportMatcher ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT ) ; }
Code	{ return reportMatcher ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT ) ; }
Distance : 10

180
Tree	{ return reportMatcher ( AnyVararg.ANY_VARARG ) ; }
Code	{ return reportMatcher ( AnyVararg.ANY_VARARG ) ; }
Distance : 10

181
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = StringUtils.EMPTY ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = StringUtils.EMPTY ; }
Distance : 11

182
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . mode = interpolator.currentDerivative ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . mode = interpolator.currentDerivative ; }
Distance : 11

183
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . object = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . object = Any.ANY ; }
Distance : 11

184
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 14

185
Tree	{ return ( T ) byteValue ( Any.ANY ) . returnZero () ; }
Code	{ return ( T ) byteValue ( Any.ANY ) . returnZero () ; }
Distance : 8

186
Tree	{ reportMatcher ( Any.ANY ) ; this . allowed = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . allowed = Any.ANY ; }
Distance : 11

187
Tree	{ return reportMatcher ( NotNull.NOT_NULL ) ; }
Code	{ return reportMatcher ( NotNull.NOT_NULL ) ; }
Distance : 10

188
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 14

189
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

190
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; }
Distance : 11

191
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . mode = TypeInferenceMode.OTI_ONLY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . mode = TypeInferenceMode.OTI_ONLY ; }
Distance : 11

192
Tree	{ return reportMatcher ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW ) ; }
Code	{ return reportMatcher ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW ) ; }
Distance : 10

193
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

194
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = zFormat ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = zFormat ; }
Distance : 12

195
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; this . mode = null ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; this . mode = null ; }
Distance : 12

196
Tree	{ reportMatcher ( v.data ) ; return false ; }
Code	{ reportMatcher ( v.data ) ; return false ; }
Distance : 11

197
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 14

198
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 14

199
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 14

========================================================================


========================================================================
Example Number: 104
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnChar () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Character . class ) ) . returnChar () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnChar}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Character})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnChar}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; stroke = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; stroke = false ; }
Distance : 11

1
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; late = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; late = false ; }
Distance : 11

2
Tree	{ reportMatcher ( Any.ANY ) ; verificationMode = false ; }
Code	{ reportMatcher ( Any.ANY ) ; verificationMode = false ; }
Distance : 11

3
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; mockingProgress = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; mockingProgress = false ; }
Distance : 11

4
Tree	{ return ( T ) deserialize () ; }
Code	{ return ( T ) deserialize () ; }
Distance : 10

5
Tree	{ return ( T ) getInterceptor () ; }
Code	{ return ( T ) getInterceptor () ; }
Distance : 10

6
Tree	{ super ( DateTimeFieldType ) ; }
Code	{ super ( DateTimeFieldType ) ; }
Distance : 12

7
Tree	{ super ( object ) ; mockingProgress ( Any.ANY ) ; }
Code	{ super ( object ) ; mockingProgress ( Any.ANY ) ; }
Distance : 12

8
Tree	{ super ( RETURNS_DEFAULTS ) ; returnChar ( Any.ANY ) ; super }
Code	{ super ( RETURNS_DEFAULTS ) ; returnChar ( Any.ANY ) ; super }
Distance : 13

9
Tree	{ super ( T ) ; mockingProgress ( Any.ANY ) ; }
Code	{ super ( T ) ; mockingProgress ( Any.ANY ) ; }
Distance : 12

10
Tree	{ reportMatcher ( Any.ANY ) ; stroke = false ; }
Code	{ reportMatcher ( Any.ANY ) ; stroke = false ; }
Distance : 11

11
Tree	{ reportMatcher ( Any.ANY ) ; this . stroke = TypeInferenceMode.OTI_ONLY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . stroke = TypeInferenceMode.OTI_ONLY ; super }
Distance : 12

12
Tree	{ reportMatcher ( Any.ANY ) ; verificationMode = LanguageMode.ECMASCRIPT_2015 . returnChar () ; }
Code	{ reportMatcher ( Any.ANY ) ; verificationMode = LanguageMode.ECMASCRIPT_2015 . returnChar () ; }
Distance : 9

13
Tree	{ super ( classToMock ) ; }
Code	{ super ( classToMock ) ; }
Distance : 12

14
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return NUMBER_CONSTANT ; }
Distance : 11

15
Tree	{ reportMatcher ( v.data ) ; return null ; }
Code	{ reportMatcher ( v.data ) ; return null ; }
Distance : 11

16
Tree	{ return reportMatcher ( Any.ANY ) . wholeHyperplane () ; }
Code	{ return reportMatcher ( Any.ANY ) . wholeHyperplane () ; }
Distance : 8

17
Tree	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return null ; }
Code	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return null ; }
Distance : 11

18
Tree	{ reportMatcher ( Null.NULL ) ; return null ; }
Code	{ reportMatcher ( Null.NULL ) ; return null ; }
Distance : 11

19
Tree	{ reportMatcher ( NotNull.NOT_NULL ) ; return null ; }
Code	{ reportMatcher ( NotNull.NOT_NULL ) ; return null ; }
Distance : 11

20
Tree	{ super ( matcher ) ; returnChar ( Any.ANY ) . returnZero () ; }
Code	{ super ( matcher ) ; returnChar ( Any.ANY ) . returnZero () ; }
Distance : 10

21
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

22
Tree	{ return ( T ) anyObject ( Any.ANY ) ; }
Code	{ return ( T ) anyObject ( Any.ANY ) ; }
Distance : 11

23
Tree	{ return ( T ) anyObject ( Any.ANY ) . returnZero () ; }
Code	{ return ( T ) anyObject ( Any.ANY ) . returnZero () ; }
Distance : 9

24
Tree	{ super ( DateTimeFieldType ) ; returnChar ( Any.ANY ) . returnZero () ; }
Code	{ super ( DateTimeFieldType ) ; returnChar ( Any.ANY ) . returnZero () ; }
Distance : 10

25
Tree	{ super ( classToMock ) ; returnChar ( Any.ANY ) ; }
Code	{ super ( classToMock ) ; returnChar ( Any.ANY ) ; }
Distance : 12

26
Tree	{ super ( RETURNS_DEFAULTS ) ; returnChar ( Any.ANY ) . returnZero () ; }
Code	{ super ( RETURNS_DEFAULTS ) ; returnChar ( Any.ANY ) . returnZero () ; }
Distance : 10

27
Tree	{ return ( T ) getInterceptor ( Any.ANY ) . returnZero () ; }
Code	{ return ( T ) getInterceptor ( Any.ANY ) . returnZero () ; }
Distance : 9

28
Tree	{ super ( matcher ) ; returnChar ( Any.ANY ) ; }
Code	{ super ( matcher ) ; returnChar ( Any.ANY ) ; }
Distance : 12

29
Tree	{ return ( T ) deserialize ( Any.ANY ) . returnZero () ; }
Code	{ return ( T ) deserialize ( Any.ANY ) . returnZero () ; }
Distance : 9

30
Tree	{ reportMatcher ( Any.ANY ) ; mockingProgress = false ; }
Code	{ reportMatcher ( Any.ANY ) ; mockingProgress = false ; }
Distance : 11

31
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return null ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return null ; }
Distance : 11

32
Tree	{ return reportMatcher ( Any.ANY ) . < T > anyList () ; }
Code	{ return reportMatcher ( Any.ANY ) . < T > anyList () ; }
Distance : 9

33
Tree	{ return reportMatcher ( Any.ANY ) . < stroke > returnChar () ; }
Code	{ return reportMatcher ( Any.ANY ) . < stroke > returnChar () ; }
Distance : 8

34
Tree	{ return reportMatcher ( Any.ANY ) . < VerifcationInOrderFailure > returnChar () ; }
Code	{ return reportMatcher ( Any.ANY ) . < VerifcationInOrderFailure > returnChar () ; }
Distance : 8

35
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

36
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

37
Tree	{ return reportMatcher ( Any.ANY ) . returnChar () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnChar () ; }
Distance : 7

38
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Distance : 11

39
Tree	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return NUMBER_CONSTANT ; }
Distance : 11

40
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; this . stroke = null ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; this . stroke = null ; }
Distance : 12

41
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . shape = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . shape = null ; }
Distance : 12

42
Tree	{ super ( object ) ; returnChar ( Any.ANY ) . returnChar () ; }
Code	{ super ( object ) ; returnChar ( Any.ANY ) . returnChar () ; }
Distance : 9

43
Tree	{ super ( T ) ; returnChar ( Any.ANY ) ; }
Code	{ super ( T ) ; returnChar ( Any.ANY ) ; }
Distance : 12

44
Tree	{ return this . classToMock ; }
Code	{ return this . classToMock ; }
Distance : 12

45
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

46
Tree	{ reportMatcher ( Any.ANY ) ; this . stroke = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . stroke = Any.ANY ; }
Distance : 11

47
Tree	{ return ( T ) returnChar ( Any.ANY ) ; }
Code	{ return ( T ) returnChar ( Any.ANY ) ; }
Distance : 11

48
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

49
Tree	{ return reportMatcher ( Any.ANY ) . sample () ; }
Code	{ return reportMatcher ( Any.ANY ) . sample () ; }
Distance : 8

50
Tree	{ reportMatcher ( Any.ANY ) ; this . stroke = TypeInferenceMode.OTI_ONLY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . stroke = TypeInferenceMode.OTI_ONLY ; }
Distance : 11

51
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; }
Distance : 8

52
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; this . Before = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; this . Before = null ; }
Distance : 12

53
Tree	{ super ( T ) ; }
Code	{ super ( T ) ; }
Distance : 12

54
Tree	{ return ( T ) returnZero ( Any.ANY ) ; }
Code	{ return ( T ) returnZero ( Any.ANY ) ; }
Distance : 11

55
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; this . legendArea = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; this . legendArea = null ; }
Distance : 12

56
Tree	{ super ( T ) ; returnChar ( Any.ANY ) . returnChar () ; }
Code	{ super ( T ) ; returnChar ( Any.ANY ) . returnChar () ; }
Distance : 9

57
Tree	{ testTypes ( Any.ANY ) ; return null ; }
Code	{ testTypes ( Any.ANY ) ; return null ; }
Distance : 12

58
Tree	{ reportMatcher ( Any.ANY ) ; mockingProgress = LanguageMode.ECMASCRIPT_2015 . returnChar () ; }
Code	{ reportMatcher ( Any.ANY ) ; mockingProgress = LanguageMode.ECMASCRIPT_2015 . returnChar () ; }
Distance : 9

59
Tree	{ reportMatcher ( Null.NULL ) ; return false ; }
Code	{ reportMatcher ( Null.NULL ) ; return false ; }
Distance : 11

60
Tree	{ return this . matcher ; }
Code	{ return this . matcher ; }
Distance : 12

61
Tree	{ super ( object ) ; returnChar ( Any.ANY ) . returnZero () ; }
Code	{ super ( object ) ; returnChar ( Any.ANY ) . returnZero () ; }
Distance : 10

62
Tree	{ super ( T ) ; returnChar ( Any.ANY ) . returnZero () ; }
Code	{ super ( T ) ; returnChar ( Any.ANY ) . returnZero () ; }
Distance : 10

63
Tree	{ return this . RETURNS_DEFAULTS ; }
Code	{ return this . RETURNS_DEFAULTS ; }
Distance : 12

64
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; stroke = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; stroke = false ; }
Distance : 11

65
Tree	{ return ( classToMock ) returnChar ( Any.ANY ) ; }
Code	{ return ( classToMock ) returnChar ( Any.ANY ) ; }
Distance : 11

66
Tree	{ reportMatcher ( Any.ANY ) ; this . stroke = interpolator.currentDerivative ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . stroke = interpolator.currentDerivative ; super }
Distance : 12

67
Tree	{ return ( T ) returnChar () ; }
Code	{ return ( T ) returnChar () ; }
Distance : 9

68
Tree	{ return reportMatcher ( Any.ANY ) . returnFor () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnFor () ; }
Distance : 8

69
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; mockingProgress = LanguageMode.ECMASCRIPT_2015 . returnChar () ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; mockingProgress = LanguageMode.ECMASCRIPT_2015 . returnChar () ; }
Distance : 9

70
Tree	{ super ( DateTimeFieldType ) ; returnChar ( Any.ANY ) ; super }
Code	{ super ( DateTimeFieldType ) ; returnChar ( Any.ANY ) ; super }
Distance : 13

71
Tree	{ return ( T ) returnChar ( Any.ANY ) . returnChar () ; }
Code	{ return ( T ) returnChar ( Any.ANY ) . returnChar () ; }
Distance : 8

72
Tree	{ return ( T ) anyObject ( Any.ANY ) . returnChar () ; }
Code	{ return ( T ) anyObject ( Any.ANY ) . returnChar () ; }
Distance : 8

73
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

74
Tree	{ super ( object ) ; returnChar ( Any.ANY ) ; super }
Code	{ super ( object ) ; returnChar ( Any.ANY ) ; super }
Distance : 13

75
Tree	{ super ( T ) ; returnChar ( Any.ANY ) ; super }
Code	{ super ( T ) ; returnChar ( Any.ANY ) ; super }
Distance : 13

76
Tree	{ reportMatcher ( Any.ANY ) ; this . stroke = interpolator.currentDerivative ; }
Code	{ reportMatcher ( Any.ANY ) ; this . stroke = interpolator.currentDerivative ; }
Distance : 11

77
Tree	{ return reportMatcher ( Any.ANY ) . < sample1 > returnChar () ; }
Code	{ return reportMatcher ( Any.ANY ) . < sample1 > returnChar () ; }
Distance : 8

78
Tree	{ super ( RETURNS_DEFAULTS ) ; returnChar ( Any.ANY ) ; }
Code	{ super ( RETURNS_DEFAULTS ) ; returnChar ( Any.ANY ) ; }
Distance : 12

79
Tree	{ reportMatcher ( Any.ANY ) ; stroke = LanguageMode.ECMASCRIPT_2015 . returnChar () ; }
Code	{ reportMatcher ( Any.ANY ) ; stroke = LanguageMode.ECMASCRIPT_2015 . returnChar () ; }
Distance : 9

80
Tree	{ return ( T ) returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return ( T ) returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

81
Tree	{ return reportMatcher ( Any.ANY ) . < T > returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . < T > returnNull () ; }
Distance : 9

82
Tree	{ reportMatcher ( Any.ANY ) ; wrappedVerification = LanguageMode.ECMASCRIPT_2015 . returnChar () ; }
Code	{ reportMatcher ( Any.ANY ) ; wrappedVerification = LanguageMode.ECMASCRIPT_2015 . returnChar () ; }
Distance : 9

83
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; this . stroke = map ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; this . stroke = map ; }
Distance : 12

84
Tree	{ return this . object ; }
Code	{ return this . object ; }
Distance : 12

85
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; this . stroke = scalar ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; this . stroke = scalar ; }
Distance : 12

86
Tree	{ super ( DateTimeFieldType ) ; returnChar ( Any.ANY ) ; }
Code	{ super ( DateTimeFieldType ) ; returnChar ( Any.ANY ) ; }
Distance : 12

87
Tree	{ super ( matcher ) ; returnChar ( Any.ANY ) ; super }
Code	{ super ( matcher ) ; returnChar ( Any.ANY ) ; super }
Distance : 13

88
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; this . stroke = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; this . stroke = null ; }
Distance : 12

89
Tree	{ reportMatcher ( Any.ANY ) ; g = LanguageMode.ECMASCRIPT_2015 . returnChar () ; }
Code	{ reportMatcher ( Any.ANY ) ; g = LanguageMode.ECMASCRIPT_2015 . returnChar () ; }
Distance : 9

90
Tree	{ reportMatcher ( Any.ANY ) ; late = false ; }
Code	{ reportMatcher ( Any.ANY ) ; late = false ; }
Distance : 11

91
Tree	{ return ( T ) returnChar ( Any.ANY ) . returnZero () ; }
Code	{ return ( T ) returnChar ( Any.ANY ) . returnZero () ; }
Distance : 9

92
Tree	{ reportMatcher ( Any.ANY ) ; this . shape = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . shape = Any.ANY ; }
Distance : 11

93
Tree	{ super ( chronology ) ; }
Code	{ super ( chronology ) ; }
Distance : 12

94
Tree	{ super ( matcher ) ; }
Code	{ super ( matcher ) ; }
Distance : 12

95
Tree	{ super ( mockSettings ) ; }
Code	{ super ( mockSettings ) ; }
Distance : 12

96
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . stroke = map ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . stroke = map ; }
Distance : 12

97
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . stroke = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . stroke = null ; }
Distance : 12

98
Tree	{ return ( T ) getInterceptor ( Any.ANY ) ; }
Code	{ return ( T ) getInterceptor ( Any.ANY ) ; }
Distance : 11

99
Tree	{ return ( T ) deserialize ( Any.ANY ) ; }
Code	{ return ( T ) deserialize ( Any.ANY ) ; }
Distance : 11

100
Tree	{ return ( RETURNS_DEFAULTS ) returnChar () ; }
Code	{ return ( RETURNS_DEFAULTS ) returnChar () ; }
Distance : 9

101
Tree	{ return this . allowed ; }
Code	{ return this . allowed ; }
Distance : 12

102
Tree	{ reportMatcher ( NotNull.NOT_NULL ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( NotNull.NOT_NULL ) ; return NUMBER_CONSTANT ; }
Distance : 11

103
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; this . stroke = Any.ANY ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; this . stroke = Any.ANY ; }
Distance : 11

104
Tree	{ return ( T ) reportMatcher () ; }
Code	{ return ( T ) reportMatcher () ; }
Distance : 10

105
Tree	{ reportMatcher ( Any.ANY ) ; Assert = LanguageMode.ECMASCRIPT_2015 . returnChar () ; }
Code	{ reportMatcher ( Any.ANY ) ; Assert = LanguageMode.ECMASCRIPT_2015 . returnChar () ; }
Distance : 9

106
Tree	{ reportMatcher ( Any.ANY ) ; this . shape = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . shape = Any.ANY ; super }
Distance : 12

107
Tree	{ reportMatcher ( Any.ANY ) ; late = LanguageMode.ECMASCRIPT_2015 . returnChar () ; }
Code	{ reportMatcher ( Any.ANY ) ; late = LanguageMode.ECMASCRIPT_2015 . returnChar () ; }
Distance : 9

108
Tree	{ super ( classToMock ) ; returnChar ( Any.ANY ) ; super }
Code	{ super ( classToMock ) ; returnChar ( Any.ANY ) ; super }
Distance : 13

109
Tree	{ reportMatcher ( Any.ANY ) ; this . stroke = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . stroke = Any.ANY ; super }
Distance : 12

110
Tree	{ return reportMatcher ( Any.ANY ) . < T > returnChar () ; }
Code	{ return reportMatcher ( Any.ANY ) . < T > returnChar () ; }
Distance : 8

111
Tree	{ return this . mode ; }
Code	{ return this . mode ; }
Distance : 12

112
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; this . stroke = TypeInferenceMode.OTI_ONLY ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; this . stroke = TypeInferenceMode.OTI_ONLY ; }
Distance : 11

113
Tree	{ return reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; }
Code	{ return reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; }
Distance : 8

114
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; this . stroke = zFormat ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; this . stroke = zFormat ; }
Distance : 12

115
Tree	{ super ( object ) ; returnChar ( Any.ANY ) ; }
Code	{ super ( object ) ; returnChar ( Any.ANY ) ; }
Distance : 12

116
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

117
Tree	{ reportMatcher ( Any.ANY ) ; Assert = false ; }
Code	{ reportMatcher ( Any.ANY ) ; Assert = false ; }
Distance : 11

118
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return false ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return false ; }
Distance : 11

119
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; mockingProgress = false ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; mockingProgress = false ; }
Distance : 11

120
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnChar () ; this . stroke = null ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnChar () ; this . stroke = null ; }
Distance : 12

121
Tree	{ return ( classToMock ) returnChar () ; }
Code	{ return ( classToMock ) returnChar () ; }
Distance : 9

122
Tree	{ super ( RETURNS_DEFAULTS ) ; }
Code	{ super ( RETURNS_DEFAULTS ) ; }
Distance : 12

123
Tree	{ reportMatcher ( Any.ANY ) ; g = false ; }
Code	{ reportMatcher ( Any.ANY ) ; g = false ; }
Distance : 11

124
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; mockingProgress = interpolator.currentDerivative ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; mockingProgress = interpolator.currentDerivative ; }
Distance : 11

125
Tree	{ super ( object ) ; mockingProgress ( Any.ANY ) ; super }
Code	{ super ( object ) ; mockingProgress ( Any.ANY ) ; super }
Distance : 13

126
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return NUMBER_CONSTANT ; }
Distance : 11

127
Tree	{ return ( T ) anyObject () ; }
Code	{ return ( T ) anyObject () ; }
Distance : 10

128
Tree	{ return reportMatcher ( Any.ANY ) . getState () ; }
Code	{ return reportMatcher ( Any.ANY ) . getState () ; }
Distance : 8

129
Tree	{ return reportMatcher ( Any.ANY ) . < relativeAccuracy > returnChar () ; }
Code	{ return reportMatcher ( Any.ANY ) . < relativeAccuracy > returnChar () ; }
Distance : 8

130
Tree	{ reportMatcher ( Any.ANY ) ; this . scopeCreator = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . scopeCreator = Any.ANY ; }
Distance : 11

131
Tree	{ reportMatcher ( Any.ANY ) ; wrappedVerification = false ; }
Code	{ reportMatcher ( Any.ANY ) ; wrappedVerification = false ; }
Distance : 11

132
Tree	{ reportMatcher ( Any.ANY ) ; this . stroke = StringUtils.EMPTY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . stroke = StringUtils.EMPTY ; super }
Distance : 12

133
Tree	{ super ( classToMock ) ; returnChar ( Any.ANY ) . returnZero () ; }
Code	{ super ( classToMock ) ; returnChar ( Any.ANY ) . returnZero () ; }
Distance : 10

134
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; this . shape = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; this . shape = null ; }
Distance : 12

135
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; mockingProgress = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; mockingProgress = Any.ANY ; }
Distance : 11

136
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . stroke = zFormat ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . stroke = zFormat ; }
Distance : 12

137
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . stroke = period ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . stroke = period ; }
Distance : 12

138
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; variableResolver = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; variableResolver = false ; }
Distance : 11

139
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; late = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; late = false ; }
Distance : 11

140
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Distance : 11

141
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; late = interpolator.currentDerivative ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; late = interpolator.currentDerivative ; }
Distance : 11

142
Tree	{ return reportMatcher ( AnyVararg.ANY_VARARG ) ; }
Code	{ return reportMatcher ( AnyVararg.ANY_VARARG ) ; }
Distance : 10

143
Tree	{ reportMatcher ( Any.ANY ) ; this . stroke = StringUtils.EMPTY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . stroke = StringUtils.EMPTY ; }
Distance : 11

144
Tree	{ return reportMatcher ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW ) ; }
Code	{ return reportMatcher ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW ) ; }
Distance : 10

145
Tree	{ return ( RETURNS_DEFAULTS ) returnChar ( Any.ANY ) ; }
Code	{ return ( RETURNS_DEFAULTS ) returnChar ( Any.ANY ) ; }
Distance : 11

146
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

147
Tree	{ return this . mockSettings ; }
Code	{ return this . mockSettings ; }
Distance : 12

148
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . stroke = scalar ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . stroke = scalar ; }
Distance : 12

149
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; verificationMode = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; verificationMode = false ; }
Distance : 11

150
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; this . stroke = Any.ANY ; super }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; this . stroke = Any.ANY ; super }
Distance : 12

151
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; late = interpolator.currentDerivative ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; late = interpolator.currentDerivative ; }
Distance : 11

152
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . stroke = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . stroke = Any.ANY ; }
Distance : 11

153
Tree	{ reportMatcher ( Null.NULL ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Null.NULL ) ; return NUMBER_CONSTANT ; }
Distance : 11

154
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; stroke = interpolator.currentDerivative ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; stroke = interpolator.currentDerivative ; }
Distance : 11

155
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . stroke = interpolator.currentDerivative ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . stroke = interpolator.currentDerivative ; }
Distance : 11

156
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 14

157
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

158
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

159
Tree	{ reportMatcher ( NotNull.NOT_NULL ) ; return false ; }
Code	{ reportMatcher ( NotNull.NOT_NULL ) ; return false ; }
Distance : 11

160
Tree	{ testTypes ( Any.ANY ) ; return false ; }
Code	{ testTypes ( Any.ANY ) ; return false ; }
Distance : 12

161
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; this . stroke = period ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; this . stroke = period ; }
Distance : 12

162
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 14

163
Tree	{ return; reportMatcher ( Any.ANY ) ; this . stroke = Any.ANY ; }
Code	{ return; reportMatcher ( Any.ANY ) ; this . stroke = Any.ANY ; }
Distance : 11

164
Tree	{ super ( T ) ; mockingProgress ( Any.ANY ) ; super }
Code	{ super ( T ) ; mockingProgress ( Any.ANY ) ; super }
Distance : 13

165
Tree	{ reportMatcher ( v.data ) ; return false ; }
Code	{ reportMatcher ( v.data ) ; return false ; }
Distance : 11

166
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; stroke = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; stroke = Any.ANY ; }
Distance : 11

167
Tree	{ return; reportMatcher ( Any.ANY ) ; this . stroke = TypeInferenceMode.OTI_ONLY ; }
Code	{ return; reportMatcher ( Any.ANY ) ; this . stroke = TypeInferenceMode.OTI_ONLY ; }
Distance : 11

168
Tree	{ return reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; }
Code	{ return reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; }
Distance : 10

169
Tree	{ reportMatcher ( Any.ANY ) . returnChar () ; late = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) . returnChar () ; late = Any.ANY ; }
Distance : 11

170
Tree	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return false ; }
Code	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return false ; }
Distance : 11

171
Tree	{ return this . MockitoCore ; }
Code	{ return this . MockitoCore ; }
Distance : 12

172
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; stroke = interpolator.currentDerivative ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; stroke = interpolator.currentDerivative ; }
Distance : 11

173
Tree	{ return ( RETURNS_DEFAULTS ) returnChar ( Any.ANY ) . returnZero () ; }
Code	{ return ( RETURNS_DEFAULTS ) returnChar ( Any.ANY ) . returnZero () ; }
Distance : 9

174
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

175
Tree	{ super ( object ) ; }
Code	{ super ( object ) ; }
Distance : 12

176
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 14

177
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . shape = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . shape = Any.ANY ; }
Distance : 11

178
Tree	{ testTypes ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ testTypes ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

179
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; this . stroke = TypeInferenceMode.OTI_ONLY ; super }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; this . stroke = TypeInferenceMode.OTI_ONLY ; super }
Distance : 12

180
Tree	{ return reportMatcher ( Any.ANY ) . < Dfp > returnChar () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Dfp > returnChar () ; }
Distance : 8

181
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . stroke = StringUtils.EMPTY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . stroke = StringUtils.EMPTY ; }
Distance : 11

182
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 14

183
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 14

184
Tree	{ continue; reportMatcher ( Any.ANY ) ; this . stroke = Any.ANY ; }
Code	{ continue; reportMatcher ( Any.ANY ) ; this . stroke = Any.ANY ; }
Distance : 11

185
Tree	{ return ( T ) returnZero () ; }
Code	{ return ( T ) returnZero () ; }
Distance : 10

186
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; mockingProgress = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; mockingProgress = false ; }
Distance : 11

187
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . stroke = TypeInferenceMode.OTI_ONLY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . stroke = TypeInferenceMode.OTI_ONLY ; }
Distance : 11

188
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 13

189
Tree	{ return reportMatcher ( Null.NULL ) ; }
Code	{ return reportMatcher ( Null.NULL ) ; }
Distance : 10

190
Tree	{ return anyObject ( Any.ANY ) ; }
Code	{ return anyObject ( Any.ANY ) ; }
Distance : 11

191
Tree	{ return reportMatcher ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT ) ; }
Code	{ return reportMatcher ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT ) ; }
Distance : 10

192
Tree	{ return reportMatcher ( NotNull.NOT_NULL ) ; }
Code	{ return reportMatcher ( NotNull.NOT_NULL ) ; }
Distance : 10

193
Tree	{ reportMatcher ( v.data ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( v.data ) ; return NUMBER_CONSTANT ; }
Distance : 11

194
Tree	{ reportMatcher ( Any.ANY ) ; this . scopeCreator = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . scopeCreator = Any.ANY ; super }
Distance : 12

195
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return false ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return false ; }
Distance : 11

196
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

197
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 13

198
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 14

199
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

========================================================================


========================================================================
Example Number: 105
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnZero () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Byte . class ) ) . returnZero () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Byte})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnZero}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ reportMatcher ( Any.ANY ) ; this . mode = TypeInferenceMode.OTI_ONLY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . mode = TypeInferenceMode.OTI_ONLY ; }
Distance : 11

1
Tree	{ reportMatcher ( Any.ANY ) ; currentDerivative = false ; }
Code	{ reportMatcher ( Any.ANY ) ; currentDerivative = false ; }
Distance : 11

2
Tree	{ return ( Object ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( Object ) reportMatcher ( Any.ANY ) ; }
Distance : 11

3
Tree	{ return ( Object ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( Object ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

4
Tree	{ super ( chronology ) ; }
Code	{ super ( chronology ) ; }
Distance : 12

5
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return false ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return false ; }
Distance : 11

6
Tree	{ return reportMatcher ( AnyVararg.ANY_VARARG ) . returnZero () ; }
Code	{ return reportMatcher ( AnyVararg.ANY_VARARG ) . returnZero () ; }
Distance : 7

7
Tree	{ return reportMatcher ( Any.ANY ) . < T > byteValue () ; }
Code	{ return reportMatcher ( Any.ANY ) . < T > byteValue () ; }
Distance : 9

8
Tree	{ super ( RETURNS_DEFAULTS ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( RETURNS_DEFAULTS ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

9
Tree	{ reportMatcher ( Any.ANY ) ; ConfigurationAccess = false ; }
Code	{ reportMatcher ( Any.ANY ) ; ConfigurationAccess = false ; }
Distance : 11

10
Tree	{ super ( classToMock ) ; }
Code	{ super ( classToMock ) ; }
Distance : 12

11
Tree	{ reportMatcher ( Any.ANY ) ; originOffset = false ; }
Code	{ reportMatcher ( Any.ANY ) ; originOffset = false ; }
Distance : 11

12
Tree	{ reportMatcher ( Any.ANY ) ; object = false ; }
Code	{ reportMatcher ( Any.ANY ) ; object = false ; }
Distance : 11

13
Tree	{ super ( matcher ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( matcher ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

14
Tree	{ super ( classToMock ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( classToMock ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

15
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

16
Tree	{ reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; }
Distance : 11

17
Tree	{ return this . capturingMatcher ; }
Code	{ return this . capturingMatcher ; }
Distance : 12

18
Tree	{ super ( T ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( T ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

19
Tree	{ super ( object ) ; returnZero ( Any.ANY ) . returnZero () ; }
Code	{ super ( object ) ; returnZero ( Any.ANY ) . returnZero () ; }
Distance : 9

20
Tree	{ testTypes ( Any.ANY ) ; return null ; }
Code	{ testTypes ( Any.ANY ) ; return null ; }
Distance : 12

21
Tree	{ super ( matcher ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( matcher ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

22
Tree	{ super ( RETURNS_DEFAULTS ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( RETURNS_DEFAULTS ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

23
Tree	{ return reportMatcher ( Null.NULL ) . returnZero () ; }
Code	{ return reportMatcher ( Null.NULL ) . returnZero () ; }
Distance : 7

24
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = false ; }
Distance : 11

25
Tree	{ return ( T ) reportMatcher () ; }
Code	{ return ( T ) reportMatcher () ; }
Distance : 10

26
Tree	{ super ( classToMock ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( classToMock ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

27
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = interpolator.currentDerivative ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = interpolator.currentDerivative ; }
Distance : 11

28
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; maxIterationCount = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; maxIterationCount = false ; }
Distance : 11

29
Tree	{ reportMatcher ( Any.ANY ) ; position = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; position = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

30
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

31
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 7

32
Tree	{ super ( matcher ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( matcher ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

33
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Distance : 11

34
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

35
Tree	{ return reportMatcher ( Any.ANY ) . < T > returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . < T > returnNull () ; }
Distance : 9

36
Tree	{ super ( T ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( T ) ; returnZero ( Any.ANY ) ; }
Distance : 12

37
Tree	{ return reportMatcher ( Any.ANY ) . < tolerance > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < tolerance > returnZero () ; }
Distance : 8

38
Tree	{ super ( T ) ; }
Code	{ super ( T ) ; }
Distance : 12

39
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

40
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Distance : 11

41
Tree	{ return ( T ) returnZero () ; }
Code	{ return ( T ) returnZero () ; }
Distance : 9

42
Tree	{ super ( classToMock ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( classToMock ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

43
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = TypeInferenceMode.OTI_ONLY ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = TypeInferenceMode.OTI_ONLY ; }
Distance : 11

44
Tree	{ return ( RETURNS_DEFAULTS ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( RETURNS_DEFAULTS ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

45
Tree	{ super ( T ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( T ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

46
Tree	{ super ( object ) ; }
Code	{ super ( object ) ; }
Distance : 12

47
Tree	{ return ( T ) returnZero ( Any.ANY ) . returnZero () ; }
Code	{ return ( T ) returnZero ( Any.ANY ) . returnZero () ; }
Distance : 8

48
Tree	{ return reportMatcher ( Any.ANY ) . < Matcher > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Matcher > returnZero () ; }
Distance : 8

49
Tree	{ return ( T ) returnZero ( Any.ANY ) ; }
Code	{ return ( T ) returnZero ( Any.ANY ) ; }
Distance : 11

50
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

51
Tree	{ return this . allowed ; }
Code	{ return this . allowed ; }
Distance : 12

52
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . gap = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . gap = null ; }
Distance : 12

53
Tree	{ reportMatcher ( Any.ANY ) ; position = false ; }
Code	{ reportMatcher ( Any.ANY ) ; position = false ; }
Distance : 11

54
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; currentDerivative = false ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; currentDerivative = false ; }
Distance : 11

55
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; this . mode = map ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; this . mode = map ; }
Distance : 12

56
Tree	{ return ( RETURNS_DEFAULTS ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( RETURNS_DEFAULTS ) reportMatcher ( Any.ANY ) ; }
Distance : 11

57
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

58
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . gap = map ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . gap = map ; }
Distance : 12

59
Tree	{ super ( DateTimeFieldType ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( DateTimeFieldType ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

60
Tree	{ super ( T ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( T ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

61
Tree	{ reportMatcher ( Any.ANY ) ; listeners = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; listeners = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

62
Tree	{ return ( iValues ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( iValues ) reportMatcher ( Any.ANY ) ; }
Distance : 11

63
Tree	{ reportMatcher ( Any.ANY ) ; mockSettings = false ; }
Code	{ reportMatcher ( Any.ANY ) ; mockSettings = false ; }
Distance : 11

64
Tree	{ reportMatcher ( Any.ANY ) ; listeners = false ; }
Code	{ reportMatcher ( Any.ANY ) ; listeners = false ; }
Distance : 11

65
Tree	{ return reportMatcher ( Any.ANY ) . < T > argumentsMatch () ; }
Code	{ return reportMatcher ( Any.ANY ) . < T > argumentsMatch () ; }
Distance : 9

66
Tree	{ super ( T ) ; returnZero ( Any.ANY ) ; super }
Code	{ super ( T ) ; returnZero ( Any.ANY ) ; super }
Distance : 13

67
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; success = problem.y ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; success = problem.y ; }
Distance : 11

68
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = problem.y ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = problem.y ; }
Distance : 11

69
Tree	{ super ( object ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( object ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

70
Tree	{ super ( LINE_JOINER ) ; }
Code	{ super ( LINE_JOINER ) ; }
Distance : 12

71
Tree	{ super ( object ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( object ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

72
Tree	{ return reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; }
Code	{ return reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; }
Distance : 10

73
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . tolerance = scalar ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . tolerance = scalar ; }
Distance : 12

74
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . object = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . object = null ; }
Distance : 12

75
Tree	{ reportMatcher ( Any.ANY ) ; currentDerivative = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; currentDerivative = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

76
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . gap = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . gap = Any.ANY ; }
Distance : 11

77
Tree	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return NUMBER_CONSTANT ; }
Distance : 11

78
Tree	{ return ( T ) byteValue () ; }
Code	{ return ( T ) byteValue () ; }
Distance : 10

79
Tree	{ reportMatcher ( Any.ANY ) ; this . gap = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . gap = Any.ANY ; super }
Distance : 12

80
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = period ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = period ; }
Distance : 12

81
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = null ; }
Distance : 12

82
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . allowed = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . allowed = Any.ANY ; }
Distance : 11

83
Tree	{ return ( nSteps ) reportMatcher () ; }
Code	{ return ( nSteps ) reportMatcher () ; }
Distance : 10

84
Tree	{ return reportMatcher ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT ) . returnZero () ; }
Code	{ return reportMatcher ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT ) . returnZero () ; }
Distance : 7

85
Tree	{ reportMatcher ( Any.ANY ) ; originOffset = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; originOffset = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

86
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . tolerance = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . tolerance = null ; }
Distance : 12

87
Tree	{ return this . mode ; }
Code	{ return this . mode ; }
Distance : 12

88
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return NUMBER_CONSTANT ; }
Distance : 11

89
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . font = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . font = Any.ANY ; }
Distance : 11

90
Tree	{ super ( object ) ; returnZero ( Any.ANY ) ; }
Code	{ super ( object ) ; returnZero ( Any.ANY ) ; }
Distance : 12

91
Tree	{ return this . mockSettings ; }
Code	{ return this . mockSettings ; }
Distance : 12

92
Tree	{ reportMatcher ( Any.ANY ) ; this . mode = interpolator.currentDerivative ; }
Code	{ reportMatcher ( Any.ANY ) ; this . mode = interpolator.currentDerivative ; }
Distance : 11

93
Tree	{ return this . object ; }
Code	{ return this . object ; }
Distance : 12

94
Tree	{ reportMatcher ( Null.NULL ) ; return null ; }
Code	{ reportMatcher ( Null.NULL ) ; return null ; }
Distance : 11

95
Tree	{ testTypes ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ testTypes ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

96
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return null ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return null ; }
Distance : 11

97
Tree	{ super ( T ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( T ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

98
Tree	{ return this . classToMock ; }
Code	{ return this . classToMock ; }
Distance : 12

99
Tree	{ reportMatcher ( Null.NULL ) ; return false ; }
Code	{ reportMatcher ( Null.NULL ) ; return false ; }
Distance : 11

100
Tree	{ return this . matcher ; }
Code	{ return this . matcher ; }
Distance : 12

101
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; enableUnusedLocalAssignmentCheck = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; enableUnusedLocalAssignmentCheck = false ; }
Distance : 11

102
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; iChronology = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; iChronology = false ; }
Distance : 11

103
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; scalar = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; scalar = false ; }
Distance : 11

104
Tree	{ reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; super }
Distance : 12

105
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

106
Tree	{ reportMatcher ( Any.ANY ) ; this . font = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . font = Any.ANY ; super }
Distance : 12

107
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = CheckRequiresForConstructors.Mode.FULL_COMPILE ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = CheckRequiresForConstructors.Mode.FULL_COMPILE ; }
Distance : 11

108
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return false ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return false ; }
Distance : 11

109
Tree	{ reportMatcher ( Any.ANY ) ; object = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; object = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

110
Tree	{ reportMatcher ( Any.ANY ) ; this . mode = TypeInferenceMode.OTI_ONLY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . mode = TypeInferenceMode.OTI_ONLY ; super }
Distance : 12

111
Tree	{ super ( DateTimeFieldType ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ super ( DateTimeFieldType ) ; reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 9

112
Tree	{ reportMatcher ( v.data ) ; return null ; }
Code	{ reportMatcher ( v.data ) ; return null ; }
Distance : 11

113
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; success = interpolator.currentDerivative ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; success = interpolator.currentDerivative ; }
Distance : 11

114
Tree	{ return this . RETURNS_DEFAULTS ; }
Code	{ return this . RETURNS_DEFAULTS ; }
Distance : 12

115
Tree	{ return reportMatcher ( Any.ANY ) . < T > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < T > returnZero () ; }
Distance : 8

116
Tree	{ super ( RETURNS_DEFAULTS ) ; reportMatcher ( Any.ANY ) ; }
Code	{ super ( RETURNS_DEFAULTS ) ; reportMatcher ( Any.ANY ) ; }
Distance : 12

117
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

118
Tree	{ return reportMatcher ( Any.ANY ) . < Object > returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Object > returnNull () ; }
Distance : 9

119
Tree	{ reportMatcher ( Any.ANY ) ; inputCharset = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; inputCharset = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

120
Tree	{ super ( RETURNS_DEFAULTS ) ; }
Code	{ super ( RETURNS_DEFAULTS ) ; }
Distance : 12

121
Tree	{ super ( object ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( object ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

122
Tree	{ return ( nSteps ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( nSteps ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

123
Tree	{ return ( matcher ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( matcher ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

124
Tree	{ return ( T ) byteValue ( Any.ANY ) ; }
Code	{ return ( T ) byteValue ( Any.ANY ) ; }
Distance : 11

125
Tree	{ reportMatcher ( Any.ANY ) ; this . allowed = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . allowed = Any.ANY ; super }
Distance : 12

126
Tree	{ return ( iValues ) reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return ( iValues ) reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

127
Tree	{ reportMatcher ( NotNull.NOT_NULL ) ; return null ; }
Code	{ reportMatcher ( NotNull.NOT_NULL ) ; return null ; }
Distance : 11

128
Tree	{ return ( nSteps ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( nSteps ) reportMatcher ( Any.ANY ) ; }
Distance : 11

129
Tree	{ return reportMatcher ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW ) . returnZero () ; }
Code	{ return reportMatcher ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW ) . returnZero () ; }
Distance : 7

130
Tree	{ reportMatcher ( NotNull.NOT_NULL ) ; return false ; }
Code	{ reportMatcher ( NotNull.NOT_NULL ) ; return false ; }
Distance : 11

131
Tree	{ return reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; }
Code	{ return reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; }
Distance : 7

132
Tree	{ super ( DateTimeFieldType ) ; reportMatcher ( Any.ANY ) ; super }
Code	{ super ( DateTimeFieldType ) ; reportMatcher ( Any.ANY ) ; super }
Distance : 13

133
Tree	{ return ( matcher ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( matcher ) reportMatcher ( Any.ANY ) ; }
Distance : 11

134
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = LanguageMode.ECMASCRIPT_2015 ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = LanguageMode.ECMASCRIPT_2015 ; }
Distance : 11

135
Tree	{ return reportMatcher ( Any.ANY ) . < Object > returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Object > returnZero () ; }
Distance : 8

136
Tree	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return null ; }
Code	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return null ; }
Distance : 11

137
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; this . mode = Any.ANY ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; this . mode = Any.ANY ; }
Distance : 11

138
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = map ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = map ; }
Distance : 12

139
Tree	{ return reportMatcher ( NotNull.NOT_NULL ) . returnZero () ; }
Code	{ return reportMatcher ( NotNull.NOT_NULL ) . returnZero () ; }
Distance : 7

140
Tree	{ super ( matcher ) ; }
Code	{ super ( matcher ) ; }
Distance : 12

141
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; success = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; success = false ; }
Distance : 11

142
Tree	{ reportMatcher ( Any.ANY ) ; this . object = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . object = Any.ANY ; }
Distance : 11

143
Tree	{ return ( matcher ) reportMatcher () ; }
Code	{ return ( matcher ) reportMatcher () ; }
Distance : 10

144
Tree	{ super ( DateTimeFieldType ) ; }
Code	{ super ( DateTimeFieldType ) ; }
Distance : 12

145
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

146
Tree	{ return anyObject ( Any.ANY ) . returnZero () ; }
Code	{ return anyObject ( Any.ANY ) . returnZero () ; }
Distance : 8

147
Tree	{ reportMatcher ( Any.ANY ) ; this . gap = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . gap = Any.ANY ; }
Distance : 11

148
Tree	{ return ( RETURNS_DEFAULTS ) reportMatcher () ; }
Code	{ return ( RETURNS_DEFAULTS ) reportMatcher () ; }
Distance : 10

149
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; value = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; value = false ; }
Distance : 11

150
Tree	{ return ( iValues ) reportMatcher () ; }
Code	{ return ( iValues ) reportMatcher () ; }
Distance : 10

151
Tree	{ reportMatcher ( Null.NULL ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Null.NULL ) ; return NUMBER_CONSTANT ; }
Distance : 11

152
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return NUMBER_CONSTANT ; }
Distance : 11

153
Tree	{ reportMatcher ( Any.ANY ) ; this . mode = interpolator.currentDerivative ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . mode = interpolator.currentDerivative ; super }
Distance : 12

154
Tree	{ reportMatcher ( NotNull.NOT_NULL ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( NotNull.NOT_NULL ) ; return NUMBER_CONSTANT ; }
Distance : 11

155
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = scalar ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = scalar ; }
Distance : 12

156
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 13

157
Tree	{ reportMatcher ( v.data ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( v.data ) ; return NUMBER_CONSTANT ; }
Distance : 11

158
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

159
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . font = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . font = null ; }
Distance : 12

160
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

161
Tree	{ reportMatcher ( Any.ANY ) ; this . font = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . font = Any.ANY ; }
Distance : 11

162
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 13

163
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 14

164
Tree	{ return anyObject ( Any.ANY ) ; }
Code	{ return anyObject ( Any.ANY ) ; }
Distance : 11

165
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . barPainter = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . barPainter = null ; }
Distance : 12

166
Tree	{ return reportMatcher ( Null.NULL ) ; }
Code	{ return reportMatcher ( Null.NULL ) ; }
Distance : 10

167
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . allowed = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . allowed = null ; }
Distance : 12

168
Tree	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return false ; }
Code	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return false ; }
Distance : 11

169
Tree	{ reportMatcher ( Any.ANY ) ; this . object = Any.ANY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . object = Any.ANY ; super }
Distance : 12

170
Tree	{ return ( Object ) reportMatcher () ; }
Code	{ return ( Object ) reportMatcher () ; }
Distance : 10

171
Tree	{ reportMatcher ( Any.ANY ) ; ConfigurationAccess = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; ConfigurationAccess = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

172
Tree	{ testTypes ( Any.ANY ) ; return false ; }
Code	{ testTypes ( Any.ANY ) ; return false ; }
Distance : 12

173
Tree	{ reportMatcher ( Any.ANY ) ; mockSettings = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Code	{ reportMatcher ( Any.ANY ) ; mockSettings = LanguageMode.ECMASCRIPT_2015 . returnZero () ; }
Distance : 9

174
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; this . mode = Any.ANY ; super }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; this . mode = Any.ANY ; super }
Distance : 12

175
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . tolerance = map ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . tolerance = map ; }
Distance : 12

176
Tree	{ super ( object ) ; returnZero ( Any.ANY ) ; super }
Code	{ super ( object ) ; returnZero ( Any.ANY ) ; super }
Distance : 13

177
Tree	{ reportMatcher ( Any.ANY ) ; inputCharset = false ; }
Code	{ reportMatcher ( Any.ANY ) ; inputCharset = false ; }
Distance : 11

178
Tree	{ return; reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; }
Code	{ return; reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; }
Distance : 11

179
Tree	{ return reportMatcher ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT ) ; }
Code	{ return reportMatcher ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT ) ; }
Distance : 10

180
Tree	{ return reportMatcher ( AnyVararg.ANY_VARARG ) ; }
Code	{ return reportMatcher ( AnyVararg.ANY_VARARG ) ; }
Distance : 10

181
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = StringUtils.EMPTY ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; currentDerivative = StringUtils.EMPTY ; }
Distance : 11

182
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . mode = interpolator.currentDerivative ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . mode = interpolator.currentDerivative ; }
Distance : 11

183
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . object = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . object = Any.ANY ; }
Distance : 11

184
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 14

185
Tree	{ return ( T ) byteValue ( Any.ANY ) . returnZero () ; }
Code	{ return ( T ) byteValue ( Any.ANY ) . returnZero () ; }
Distance : 8

186
Tree	{ reportMatcher ( Any.ANY ) ; this . allowed = Any.ANY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . allowed = Any.ANY ; }
Distance : 11

187
Tree	{ return reportMatcher ( NotNull.NOT_NULL ) ; }
Code	{ return reportMatcher ( NotNull.NOT_NULL ) ; }
Distance : 10

188
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 14

189
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

190
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . mode = Any.ANY ; }
Distance : 11

191
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . mode = TypeInferenceMode.OTI_ONLY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . mode = TypeInferenceMode.OTI_ONLY ; }
Distance : 11

192
Tree	{ return reportMatcher ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW ) ; }
Code	{ return reportMatcher ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW ) ; }
Distance : 10

193
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

194
Tree	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = zFormat ; }
Code	{ reportMatcher ( Any.ANY ) . returnZero () ; this . mode = zFormat ; }
Distance : 12

195
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; this . mode = null ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnZero () ; this . mode = null ; }
Distance : 12

196
Tree	{ reportMatcher ( v.data ) ; return false ; }
Code	{ reportMatcher ( v.data ) ; return false ; }
Distance : 11

197
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 14

198
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 14

199
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 14

========================================================================


========================================================================
Example Number: 106
Parent Code is: 
{ return reportMatcher ( Any.ANY ) . returnFalse () ; }
-------------------------------------------------------------------------------
Child code is: 
{ return reportMatcher ( new InstanceOf ( Boolean . class ) ) . returnFalse () ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (40{val=Any.ANY}) (215{val=)})) (235{val=.}) (802{val=returnFalse}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=reportMatcher}) (214{val=(}) (14 (304{val=new}) (43 (801{val=InstanceOf})) (214{val=(}) (57 (43 (800{val=Boolean})) (235{val=.}) (341{val=class})) (215{val=)})) (215{val=)})) (235{val=.}) (802{val=returnFalse}) (216{val=()})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/6/parent/src_org_mockito_Matchers.java
-------------------------------------------------------------------------------
Edit Distance : 7
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; cachedPivots = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; cachedPivots = false ; }
Distance : 11

1
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . container = map ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . container = map ; }
Distance : 12

2
Tree	{ reportMatcher ( Any.ANY ) ; this . backgroundPaint = StringUtils.EMPTY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . backgroundPaint = StringUtils.EMPTY ; super }
Distance : 12

3
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; enableUnusedLocalAssignmentCheck = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; enableUnusedLocalAssignmentCheck = false ; }
Distance : 11

4
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; currentDerivative = LanguageMode.ECMASCRIPT_2015 ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; currentDerivative = LanguageMode.ECMASCRIPT_2015 ; }
Distance : 11

5
Tree	{ super ( DateTimeFieldType ) ; returnFalse ( Any.ANY ) ; returnFalse }
Code	{ super ( DateTimeFieldType ) ; returnFalse ( Any.ANY ) ; returnFalse }
Distance : 12

6
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; iChronology = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; iChronology = false ; }
Distance : 11

7
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; container = StringUtils.EMPTY . returnFalse () ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; container = StringUtils.EMPTY . returnFalse () ; }
Distance : 9

8
Tree	{ reportMatcher ( Any.ANY ) ; container = v.data . returnFalse () ; }
Code	{ reportMatcher ( Any.ANY ) ; container = v.data . returnFalse () ; }
Distance : 9

9
Tree	{ return reportMatcher ( Any.ANY ) . < T > charAt () ; }
Code	{ return reportMatcher ( Any.ANY ) . < T > charAt () ; }
Distance : 9

10
Tree	{ super ( T ) ; nullNotPermitted ( Any.ANY ) ; }
Code	{ super ( T ) ; nullNotPermitted ( Any.ANY ) ; }
Distance : 12

11
Tree	{ super ( LINE_JOINER ) ; returnFalse ( Any.ANY ) ; }
Code	{ super ( LINE_JOINER ) ; returnFalse ( Any.ANY ) ; }
Distance : 12

12
Tree	{ super ( matcher ) ; returnFalse ( Any.ANY ) ; returnFalse }
Code	{ super ( matcher ) ; returnFalse ( Any.ANY ) ; returnFalse }
Distance : 12

13
Tree	{ super ( classToMock ) ; returnFalse ( Any.ANY ) ; returnFalse }
Code	{ super ( classToMock ) ; returnFalse ( Any.ANY ) ; returnFalse }
Distance : 12

14
Tree	{ return this . classToMock ; }
Code	{ return this . classToMock ; }
Distance : 12

15
Tree	{ super ( DateTimeFieldType ) ; returnFalse ( Any.ANY ) . returnFalse () ; }
Code	{ super ( DateTimeFieldType ) ; returnFalse ( Any.ANY ) . returnFalse () ; }
Distance : 9

16
Tree	{ reportMatcher ( v.data ) ; return null ; }
Code	{ reportMatcher ( v.data ) ; return null ; }
Distance : 11

17
Tree	{ reportMatcher ( Any.ANY ) ; container = StringUtils.EMPTY . returnFalse () ; }
Code	{ reportMatcher ( Any.ANY ) ; container = StringUtils.EMPTY . returnFalse () ; }
Distance : 9

18
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return null ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return null ; }
Distance : 11

19
Tree	{ return reportMatcher ( Any.ANY ) . replaceAll () ; }
Code	{ return reportMatcher ( Any.ANY ) . replaceAll () ; }
Distance : 8

20
Tree	{ super ( matcher ) ; returnFalse ( Any.ANY ) . returnFalse () ; }
Code	{ super ( matcher ) ; returnFalse ( Any.ANY ) . returnFalse () ; }
Distance : 9

21
Tree	{ return null ; }
Code	{ return null ; }
Distance : 13

22
Tree	{ super ( classToMock ) ; returnFalse ( Any.ANY ) . returnFalse () ; }
Code	{ super ( classToMock ) ; returnFalse ( Any.ANY ) . returnFalse () ; }
Distance : 9

23
Tree	{ return reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnFalse () ; }
Code	{ return reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnFalse () ; }
Distance : 7

24
Tree	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnZero () ; }
Distance : 8

25
Tree	{ super ( T ) ; returnFalse ( Any.ANY ) ; returnFalse }
Code	{ super ( T ) ; returnFalse ( Any.ANY ) ; returnFalse }
Distance : 12

26
Tree	{ return ( T ) reportMatcher ( Any.ANY ) . returnFalse () ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) . returnFalse () ; }
Distance : 8

27
Tree	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnMap () ; }
Distance : 8

28
Tree	{ return ( T ) anyObject ( Any.ANY ) . returnFalse () ; }
Code	{ return ( T ) anyObject ( Any.ANY ) . returnFalse () ; }
Distance : 8

29
Tree	{ return ( T ) anyObject () ; }
Code	{ return ( T ) anyObject () ; }
Distance : 10

30
Tree	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return null ; }
Code	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return null ; }
Distance : 11

31
Tree	{ return ( T ) anyObject ( Any.ANY ) ; }
Code	{ return ( T ) anyObject ( Any.ANY ) ; }
Distance : 11

32
Tree	{ reportMatcher ( Any.ANY ) ; calendar = false ; }
Code	{ reportMatcher ( Any.ANY ) ; calendar = false ; }
Distance : 11

33
Tree	{ super ( object ) ; returnFalse ( Any.ANY ) ; returnFalse }
Code	{ super ( object ) ; returnFalse ( Any.ANY ) ; returnFalse }
Distance : 12

34
Tree	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Code	{ return ( T ) reportMatcher ( Any.ANY ) ; }
Distance : 11

35
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . legendLine = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . legendLine = null ; }
Distance : 12

36
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . barPainter = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . barPainter = null ; }
Distance : 12

37
Tree	{ reportMatcher ( v.data ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( v.data ) ; return NUMBER_CONSTANT ; }
Distance : 11

38
Tree	{ reportMatcher ( Any.ANY ) ; return null ; }
Code	{ reportMatcher ( Any.ANY ) ; return null ; }
Distance : 11

39
Tree	{ return reportMatcher ( Any.ANY ) . returnFalse () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnFalse () ; }
Distance : 7

40
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return null ; }
Distance : 11

41
Tree	{ super ( object ) ; }
Code	{ super ( object ) ; }
Distance : 12

42
Tree	{ return ( T ) getInterceptor ( Any.ANY ) . returnFalse () ; }
Code	{ return ( T ) getInterceptor ( Any.ANY ) . returnFalse () ; }
Distance : 8

43
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; currentDerivative = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; currentDerivative = false ; }
Distance : 11

44
Tree	{ return reportMatcher ( Any.ANY ) . < Coordinates3D > returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Coordinates3D > returnNull () ; }
Distance : 9

45
Tree	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return NUMBER_CONSTANT ; }
Distance : 11

46
Tree	{ testTypes ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ testTypes ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 12

47
Tree	{ reportMatcher ( Any.ANY ) ; return false ; }
Code	{ reportMatcher ( Any.ANY ) ; return false ; }
Distance : 11

48
Tree	{ return ( T ) returnFalse () ; }
Code	{ return ( T ) returnFalse () ; }
Distance : 9

49
Tree	{ return ( T ) getInterceptor ( Any.ANY ) ; }
Code	{ return ( T ) getInterceptor ( Any.ANY ) ; }
Distance : 11

50
Tree	{ super ( matcher ) ; returnFalse ( Any.ANY ) ; }
Code	{ super ( matcher ) ; returnFalse ( Any.ANY ) ; }
Distance : 12

51
Tree	{ reportMatcher ( Any.ANY ) ; this . container = StringUtils.EMPTY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . container = StringUtils.EMPTY ; }
Distance : 11

52
Tree	{ reportMatcher ( Null.NULL ) ; return false ; }
Code	{ reportMatcher ( Null.NULL ) ; return false ; }
Distance : 11

53
Tree	{ super ( classToMock ) ; returnFalse ( Any.ANY ) ; }
Code	{ super ( classToMock ) ; returnFalse ( Any.ANY ) ; }
Distance : 12

54
Tree	{ return reportMatcher ( Any.ANY ) . returnFor () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnFor () ; }
Distance : 8

55
Tree	{ super ( T ) ; returnFalse ( Any.ANY ) . returnFalse () ; }
Code	{ super ( T ) ; returnFalse ( Any.ANY ) . returnFalse () ; }
Distance : 9

56
Tree	{ super ( object ) ; returnFalse ( Any.ANY ) . returnFalse () ; }
Code	{ super ( object ) ; returnFalse ( Any.ANY ) . returnFalse () ; }
Distance : 9

57
Tree	{ reportMatcher ( Any.ANY ) ; this . backgroundPaint = StringUtils.EMPTY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . backgroundPaint = StringUtils.EMPTY ; }
Distance : 11

58
Tree	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Any.ANY ) ; return NUMBER_CONSTANT ; }
Distance : 11

59
Tree	{ super ( T ) ; returnFalse ( Any.ANY ) ; }
Code	{ super ( T ) ; returnFalse ( Any.ANY ) ; }
Distance : 12

60
Tree	{ return reportMatcher ( Any.ANY ) . defaultBehavior () ; }
Code	{ return reportMatcher ( Any.ANY ) . defaultBehavior () ; }
Distance : 8

61
Tree	{ return reportMatcher ( Any.ANY ) . < Coordinates3D > charAt () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Coordinates3D > charAt () ; }
Distance : 9

62
Tree	{ return this . mode ; }
Code	{ return this . mode ; }
Distance : 12

63
Tree	{ return this . object ; }
Code	{ return this . object ; }
Distance : 12

64
Tree	{ return ( T ) defaultBehavior ( Any.ANY ) . returnFalse () ; }
Code	{ return ( T ) defaultBehavior ( Any.ANY ) . returnFalse () ; }
Distance : 8

65
Tree	{ reportMatcher ( Any.ANY ) ; container = false ; }
Code	{ reportMatcher ( Any.ANY ) ; container = false ; }
Distance : 11

66
Tree	{ return reportMatcher ( Any.ANY ) . < T > returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . < T > returnNull () ; }
Distance : 9

67
Tree	{ super ( T ) ; nullNotPermitted ( Any.ANY ) . returnFalse () ; }
Code	{ super ( T ) ; nullNotPermitted ( Any.ANY ) . returnFalse () ; }
Distance : 9

68
Tree	{ return this . mockSettings ; }
Code	{ return this . mockSettings ; }
Distance : 12

69
Tree	{ super ( RETURNS_DEFAULTS ) ; returnFalse ( Any.ANY ) . returnFalse () ; }
Code	{ super ( RETURNS_DEFAULTS ) ; returnFalse ( Any.ANY ) . returnFalse () ; }
Distance : 9

70
Tree	{ return reportMatcher ( Any.ANY ) . < suffix > returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . < suffix > returnNull () ; }
Distance : 9

71
Tree	{ return reportMatcher ( Any.ANY ) . < RETURNS_DEFAULTS > returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . < RETURNS_DEFAULTS > returnNull () ; }
Distance : 9

72
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnFalse () ; currentDerivative = false ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnFalse () ; currentDerivative = false ; }
Distance : 11

73
Tree	{ super ( matcher ) ; }
Code	{ super ( matcher ) ; }
Distance : 12

74
Tree	{ reportMatcher ( Any.ANY ) ; this . container = StringUtils.EMPTY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . container = StringUtils.EMPTY ; super }
Distance : 12

75
Tree	{ reportMatcher ( Any.ANY ) ; this . categoryLabelURLs = StringUtils.EMPTY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . categoryLabelURLs = StringUtils.EMPTY ; }
Distance : 11

76
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; maxIterationCount = StringUtils.EMPTY ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; maxIterationCount = StringUtils.EMPTY ; }
Distance : 11

77
Tree	{ super ( LINE_JOINER ) ; returnFalse ( Any.ANY ) . returnFalse () ; }
Code	{ super ( LINE_JOINER ) ; returnFalse ( Any.ANY ) . returnFalse () ; }
Distance : 9

78
Tree	{ return ( T ) defaultBehavior ( Any.ANY ) ; }
Code	{ return ( T ) defaultBehavior ( Any.ANY ) ; }
Distance : 11

79
Tree	{ return this . RETURNS_DEFAULTS ; }
Code	{ return this . RETURNS_DEFAULTS ; }
Distance : 12

80
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; maxIterationCount = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; maxIterationCount = false ; }
Distance : 11

81
Tree	{ return ( RETURNS_DEFAULTS ) returnFalse ( Any.ANY ) ; }
Code	{ return ( RETURNS_DEFAULTS ) returnFalse ( Any.ANY ) ; }
Distance : 11

82
Tree	{ reportMatcher ( Any.ANY ) ; calendar = v.data . returnFalse () ; }
Code	{ reportMatcher ( Any.ANY ) ; calendar = v.data . returnFalse () ; }
Distance : 9

83
Tree	{ super ( object ) ; returnFalse ( Any.ANY ) ; }
Code	{ super ( object ) ; returnFalse ( Any.ANY ) ; }
Distance : 12

84
Tree	{ reportMatcher ( Any.ANY ) ; anchor = StringUtils.EMPTY . returnFalse () ; }
Code	{ reportMatcher ( Any.ANY ) ; anchor = StringUtils.EMPTY . returnFalse () ; }
Distance : 9

85
Tree	{ reportMatcher ( Any.ANY ) ; Args = v.data . returnFalse () ; }
Code	{ reportMatcher ( Any.ANY ) ; Args = v.data . returnFalse () ; }
Distance : 9

86
Tree	{ reportMatcher ( Any.ANY ) ; anchor = false ; }
Code	{ reportMatcher ( Any.ANY ) ; anchor = false ; }
Distance : 11

87
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; success = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; success = false ; }
Distance : 11

88
Tree	{ reportMatcher ( Any.ANY ) ; painter = false ; }
Code	{ reportMatcher ( Any.ANY ) ; painter = false ; }
Distance : 11

89
Tree	{ return ( T ) returnFalse ( Any.ANY ) . returnFalse () ; }
Code	{ return ( T ) returnFalse ( Any.ANY ) . returnFalse () ; }
Distance : 8

90
Tree	{ testTypes ( Any.ANY ) ; return null ; }
Code	{ testTypes ( Any.ANY ) ; return null ; }
Distance : 12

91
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . Before = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . Before = null ; }
Distance : 12

92
Tree	{ return this . matcher ; }
Code	{ return this . matcher ; }
Distance : 12

93
Tree	{ return ( T ) returnFor ( Any.ANY ) ; }
Code	{ return ( T ) returnFor ( Any.ANY ) ; }
Distance : 11

94
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; this . container = StringUtils.EMPTY ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; this . container = StringUtils.EMPTY ; }
Distance : 11

95
Tree	{ reportMatcher ( Any.ANY ) ; this . painter = StringUtils.EMPTY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . painter = StringUtils.EMPTY ; }
Distance : 11

96
Tree	{ reportMatcher ( Any.ANY ) ; this . RETURNS_DEFAULTS = StringUtils.EMPTY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . RETURNS_DEFAULTS = StringUtils.EMPTY ; super }
Distance : 12

97
Tree	{ return reportMatcher ( Any.ANY ) . < Coordinates3D > returnFalse () ; }
Code	{ return reportMatcher ( Any.ANY ) . < Coordinates3D > returnFalse () ; }
Distance : 8

98
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return false ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return false ; }
Distance : 11

99
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . backgroundPaint = map ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . backgroundPaint = map ; }
Distance : 12

100
Tree	{ super ( RETURNS_DEFAULTS ) ; returnFalse ( Any.ANY ) ; }
Code	{ super ( RETURNS_DEFAULTS ) ; returnFalse ( Any.ANY ) ; }
Distance : 12

101
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnFalse () ; currentDerivative = StringUtils.EMPTY ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) . returnFalse () ; currentDerivative = StringUtils.EMPTY ; }
Distance : 11

102
Tree	{ super ( DateTimeFieldType ) ; }
Code	{ super ( DateTimeFieldType ) ; }
Distance : 12

103
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . domainCrosshairStroke = map ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . domainCrosshairStroke = map ; }
Distance : 12

104
Tree	{ reportMatcher ( NotNull.NOT_NULL ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( NotNull.NOT_NULL ) ; return NUMBER_CONSTANT ; }
Distance : 11

105
Tree	{ return ( T ) returnFalse ( Any.ANY ) ; }
Code	{ return ( T ) returnFalse ( Any.ANY ) ; }
Distance : 11

106
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return NUMBER_CONSTANT ; }
Distance : 11

107
Tree	{ return this . MockitoCore ; }
Code	{ return this . MockitoCore ; }
Distance : 12

108
Tree	{ super ( T ) ; }
Code	{ super ( T ) ; }
Distance : 12

109
Tree	{ reportMatcher ( Any.ANY ) ; this . barPainter = StringUtils.EMPTY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . barPainter = StringUtils.EMPTY ; }
Distance : 11

110
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; currentDerivative = StringUtils.EMPTY ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; currentDerivative = StringUtils.EMPTY ; }
Distance : 11

111
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; compiler = false ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; compiler = false ; }
Distance : 11

112
Tree	{ return reportMatcher ( Any.ANY ) . returnNull () ; }
Code	{ return reportMatcher ( Any.ANY ) . returnNull () ; }
Distance : 8

113
Tree	{ super ( classToMock ) ; }
Code	{ super ( classToMock ) ; }
Distance : 12

114
Tree	{ return ( T ) returnFalse ( Any.ANY ) . returnFor () ; }
Code	{ return ( T ) returnFalse ( Any.ANY ) . returnFor () ; }
Distance : 9

115
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; container = false ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; container = false ; }
Distance : 11

116
Tree	{ reportMatcher ( Any.ANY ) ; sampleStats = false ; }
Code	{ reportMatcher ( Any.ANY ) ; sampleStats = false ; }
Distance : 11

117
Tree	{ reportMatcher ( Any.ANY ) ; this . categoryLabelURLs = StringUtils.EMPTY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . categoryLabelURLs = StringUtils.EMPTY ; super }
Distance : 12

118
Tree	{ reportMatcher ( Any.ANY ) ; this . RETURNS_DEFAULTS = StringUtils.EMPTY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . RETURNS_DEFAULTS = StringUtils.EMPTY ; }
Distance : 11

119
Tree	{ return reportMatcher ( Any.ANY ) ; }
Code	{ return reportMatcher ( Any.ANY ) ; }
Distance : 10

120
Tree	{ reportMatcher ( Any.ANY ) ; this . domainCrosshairStroke = StringUtils.EMPTY ; }
Code	{ reportMatcher ( Any.ANY ) ; this . domainCrosshairStroke = StringUtils.EMPTY ; }
Distance : 11

121
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . backgroundPaint = zFormat ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . backgroundPaint = zFormat ; }
Distance : 12

122
Tree	{ super ( RETURNS_DEFAULTS ) ; }
Code	{ super ( RETURNS_DEFAULTS ) ; }
Distance : 12

123
Tree	{ super ( RETURNS_DEFAULTS ) ; returnFalse ( Any.ANY ) ; returnFalse }
Code	{ super ( RETURNS_DEFAULTS ) ; returnFalse ( Any.ANY ) ; returnFalse }
Distance : 12

124
Tree	{ return this . allowed ; }
Code	{ return this . allowed ; }
Distance : 12

125
Tree	{ reportMatcher ( Null.NULL ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( Null.NULL ) ; return NUMBER_CONSTANT ; }
Distance : 11

126
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; this . container = StringUtils.EMPTY ; super }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; this . container = StringUtils.EMPTY ; super }
Distance : 12

127
Tree	{ reportMatcher ( Any.ANY ) ; Args = StringUtils.EMPTY . returnFalse () ; }
Code	{ reportMatcher ( Any.ANY ) ; Args = StringUtils.EMPTY . returnFalse () ; }
Distance : 9

128
Tree	{ reportMatcher ( Null.NULL ) ; return null ; }
Code	{ reportMatcher ( Null.NULL ) ; return null ; }
Distance : 11

129
Tree	{ return reportMatcher ( Any.ANY ) . < T > returnFalse () ; }
Code	{ return reportMatcher ( Any.ANY ) . < T > returnFalse () ; }
Distance : 8

130
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . categoryLabelURLs = map ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . categoryLabelURLs = map ; }
Distance : 12

131
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . backgroundPaint = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . backgroundPaint = null ; }
Distance : 12

132
Tree	{ return NUMBER_CONSTANT ; }
Code	{ return NUMBER_CONSTANT ; }
Distance : 13

133
Tree	{ super ( DateTimeFieldType ) ; returnFalse ( Any.ANY ) ; }
Code	{ super ( DateTimeFieldType ) ; returnFalse ( Any.ANY ) ; }
Distance : 12

134
Tree	{ reportMatcher ( Any.ANY ) ; this . painter = StringUtils.EMPTY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . painter = StringUtils.EMPTY ; super }
Distance : 12

135
Tree	{ return ( RETURNS_DEFAULTS ) returnFalse ( Any.ANY ) . returnFalse () ; }
Code	{ return ( RETURNS_DEFAULTS ) returnFalse ( Any.ANY ) . returnFalse () ; }
Distance : 8

136
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . domainCrosshairStroke = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . domainCrosshairStroke = null ; }
Distance : 12

137
Tree	{ reportMatcher ( Any.ANY ) ; this . domainCrosshairStroke = StringUtils.EMPTY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . domainCrosshairStroke = StringUtils.EMPTY ; super }
Distance : 12

138
Tree	{ reportMatcher ( NotNull.NOT_NULL ) ; return null ; }
Code	{ reportMatcher ( NotNull.NOT_NULL ) ; return null ; }
Distance : 11

139
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; compiler = StringUtils.EMPTY ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; compiler = StringUtils.EMPTY ; }
Distance : 11

140
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . container = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . container = null ; }
Distance : 12

141
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; currentDerivative = TypeInferenceMode.OTI_ONLY ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; currentDerivative = TypeInferenceMode.OTI_ONLY ; }
Distance : 11

142
Tree	{ return ( T ) withSettings ( Any.ANY ) ; }
Code	{ return ( T ) withSettings ( Any.ANY ) ; }
Distance : 11

143
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . categoryLabelURLs = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . categoryLabelURLs = null ; }
Distance : 12

144
Tree	{ super ( LINE_JOINER ) ; }
Code	{ super ( LINE_JOINER ) ; }
Distance : 12

145
Tree	{ return ( T ) getInterceptor () ; }
Code	{ return ( T ) getInterceptor () ; }
Distance : 10

146
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return NUMBER_CONSTANT ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; return NUMBER_CONSTANT ; }
Distance : 11

147
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . container = StringUtils.EMPTY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . container = StringUtils.EMPTY ; }
Distance : 11

148
Tree	{ return NUMBER_CONSTANT ; } Override
Code	{ return NUMBER_CONSTANT ; } Override
Distance : 14

149
Tree	{ return reportMatcher ( NotNull.NOT_NULL ) ; }
Code	{ return reportMatcher ( NotNull.NOT_NULL ) ; }
Distance : 10

150
Tree	{ return; reportMatcher ( Any.ANY ) ; this . container = StringUtils.EMPTY ; }
Code	{ return; reportMatcher ( Any.ANY ) ; this . container = StringUtils.EMPTY ; }
Distance : 11

151
Tree	{ super ( chronology ) ; }
Code	{ super ( chronology ) ; }
Distance : 12

152
Tree	{ super ( LINE_JOINER ) ; returnFalse ( Any.ANY ) ; returnFalse }
Code	{ super ( LINE_JOINER ) ; returnFalse ( Any.ANY ) ; returnFalse }
Distance : 12

153
Tree	{ return NUMBER_CONSTANT ; } notifyListeners
Code	{ return NUMBER_CONSTANT ; } notifyListeners
Distance : 14

154
Tree	{ return reportMatcher ( AnyVararg.ANY_VARARG ) ; }
Code	{ return reportMatcher ( AnyVararg.ANY_VARARG ) ; }
Distance : 10

155
Tree	{ return reportMatcher ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW ) ; }
Code	{ return reportMatcher ( LocalizedFormats.FRACTION_CONVERSION_OVERFLOW ) ; }
Distance : 10

156
Tree	{ super ( T ) ; nullNotPermitted ( Any.ANY ) ; returnFalse }
Code	{ super ( T ) ; nullNotPermitted ( Any.ANY ) ; returnFalse }
Distance : 12

157
Tree	{ return NUMBER_CONSTANT ; } class
Code	{ return NUMBER_CONSTANT ; } class
Distance : 14

158
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . categoryLabelURLs = StringUtils.EMPTY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . categoryLabelURLs = StringUtils.EMPTY ; }
Distance : 11

159
Tree	{ return reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; }
Code	{ return reportMatcher ( LanguageMode.ECMASCRIPT_2016 ) ; }
Distance : 10

160
Tree	{ reportMatcher ( NotNull.NOT_NULL ) ; return false ; }
Code	{ reportMatcher ( NotNull.NOT_NULL ) ; return false ; }
Distance : 11

161
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 13

162
Tree	{ reportMatcher ( v.data ) ; return false ; }
Code	{ reportMatcher ( v.data ) ; return false ; }
Distance : 11

163
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . container = scalar ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . container = scalar ; }
Distance : 12

164
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . Before = map ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . Before = map ; }
Distance : 12

165
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . backgroundPaint = StringUtils.EMPTY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . backgroundPaint = StringUtils.EMPTY ; }
Distance : 11

166
Tree	{ return ( T ) returnFor () ; }
Code	{ return ( T ) returnFor () ; }
Distance : 10

167
Tree	{ reportMatcher ( Any.ANY ) ; annotation = false ; }
Code	{ reportMatcher ( Any.ANY ) ; annotation = false ; }
Distance : 11

168
Tree	{ return reportMatcher ( Null.NULL ) ; }
Code	{ return reportMatcher ( Null.NULL ) ; }
Distance : 10

169
Tree	{ reportMatcher ( Any.ANY ) ; calendar = StringUtils.EMPTY . returnFalse () ; }
Code	{ reportMatcher ( Any.ANY ) ; calendar = StringUtils.EMPTY . returnFalse () ; }
Distance : 9

170
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . backgroundPaint = scalar ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . backgroundPaint = scalar ; }
Distance : 12

171
Tree	{ return; reportMatcher ( Any.ANY ) ; this . backgroundPaint = StringUtils.EMPTY ; }
Code	{ return; reportMatcher ( Any.ANY ) ; this . backgroundPaint = StringUtils.EMPTY ; }
Distance : 11

172
Tree	{ return ( T ) defaultBehavior () ; }
Code	{ return ( T ) defaultBehavior () ; }
Distance : 10

173
Tree	{ reportMatcher ( Any.ANY ) ; Args = false ; }
Code	{ reportMatcher ( Any.ANY ) ; Args = false ; }
Distance : 11

174
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; currentDerivative = problem.y ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; currentDerivative = problem.y ; }
Distance : 11

175
Tree	{ return ( T ) returnFalse ( Any.ANY ) . defaultBehavior () ; }
Code	{ return ( T ) returnFalse ( Any.ANY ) . defaultBehavior () ; }
Distance : 9

176
Tree	{ return ( RETURNS_DEFAULTS ) returnFalse () ; }
Code	{ return ( RETURNS_DEFAULTS ) returnFalse () ; }
Distance : 9

177
Tree	{ return ( T ) withSettings () ; }
Code	{ return ( T ) withSettings () ; }
Distance : 10

178
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 13

179
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . RETURNS_DEFAULTS = StringUtils.EMPTY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . RETURNS_DEFAULTS = StringUtils.EMPTY ; }
Distance : 11

180
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; success = StringUtils.EMPTY ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; success = StringUtils.EMPTY ; }
Distance : 11

181
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . barPainter = StringUtils.EMPTY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . barPainter = StringUtils.EMPTY ; }
Distance : 11

182
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 13

183
Tree	{ return NUMBER_CONSTANT ; } array
Code	{ return NUMBER_CONSTANT ; } array
Distance : 14

184
Tree	{ return NUMBER_CONSTANT ; } MathRuntimeException
Code	{ return NUMBER_CONSTANT ; } MathRuntimeException
Distance : 14

185
Tree	{ return ( T ) reportMatcher () ; }
Code	{ return ( T ) reportMatcher () ; }
Distance : 10

186
Tree	{ return null ; } options
Code	{ return null ; } options
Distance : 14

187
Tree	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return false ; }
Code	{ reportMatcher ( AnyVararg.ANY_VARARG ) ; return false ; }
Distance : 11

188
Tree	{ testTypes ( Any.ANY ) ; return false ; }
Code	{ testTypes ( Any.ANY ) ; return false ; }
Distance : 12

189
Tree	{ super(); reportMatcher ( Any.ANY ) ; this . domainCrosshairStroke = StringUtils.EMPTY ; }
Code	{ super(); reportMatcher ( Any.ANY ) ; this . domainCrosshairStroke = StringUtils.EMPTY ; }
Distance : 11

190
Tree	{ return anyObject ( Any.ANY ) ; }
Code	{ return anyObject ( Any.ANY ) ; }
Distance : 11

191
Tree	{ return reportMatcher ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT ) ; }
Code	{ return reportMatcher ( LocalizedFormats.INTEGRATION_METHOD_NEEDS_AT_LEAST_ONE_PREVIOUS_POINT ) ; }
Distance : 10

192
Tree	{ reportMatcher ( Any.ANY ) ; this . barPainter = StringUtils.EMPTY ; super }
Code	{ reportMatcher ( Any.ANY ) ; this . barPainter = StringUtils.EMPTY ; super }
Distance : 12

193
Tree	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . RETURNS_DEFAULTS = null ; }
Code	{ reportMatcher ( Any.ANY ) . returnFalse () ; this . RETURNS_DEFAULTS = null ; }
Distance : 12

194
Tree	{ return break; ; }
Code	{ return break; ; }
Distance : 13

195
Tree	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return false ; }
Code	{ reportMatcher ( LanguageMode.ECMASCRIPT_2015 ) ; return false ; }
Distance : 11

196
Tree	{ return default: ; }
Code	{ return default: ; }
Distance : 13

197
Tree	{ return NUMBER_CONSTANT ; } f
Code	{ return NUMBER_CONSTANT ; } f
Distance : 14

198
Tree	{ return null ; } p
Code	{ return null ; } p
Distance : 14

199
Tree	{ return NUMBER_CONSTANT ; } mock
Code	{ return NUMBER_CONSTANT ; } mock
Distance : 14

========================================================================


========================================================================
Example Number: 107
Parent Code is: 
catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
-------------------------------------------------------------------------------
Child code is: 
catch ( AssertionError e ) { error = handleVerifyException ( e ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (12 (331{val=catch}) (214{val=(}) (44 (43 (40{val=org.mockito.exceptions.verification.junit.ArgumentsAreDifferent})) (800{val=e})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=error}) (204{val==}) (32 (802{val=handleVerifyException}) (214{val=(}) (800{val=e}) (215{val=)}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (12 (331{val=catch}) (214{val=(}) (44 (43 (801{val=AssertionError})) (800{val=e})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=error}) (204{val==}) (32 (802{val=handleVerifyException}) (214{val=(}) (800{val=e}) (215{val=)}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/5/parent/src_org_mockito_internal_verification_VerificationOverTimeImpl.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = RENAME_FUNCTION_DEFINITION . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = RENAME_FUNCTION_DEFINITION . handleVerifyException () ; }
Distance : 5

1
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = MaxCountExceededException . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = MaxCountExceededException . handleVerifyException () ; }
Distance : 5

2
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , messageContains ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , messageContains ( e ) ) ; }
Distance : 7

3
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e , error . getMessage () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e , error . getMessage () ) ; }
Distance : 10

4
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . description ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . description ) ; }
Distance : 5

5
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , messageContains ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , messageContains ( e ) ) ; }
Distance : 6

6
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = ITERATION_CHECK_DISABLED . extractCauseUnchecked () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = ITERATION_CHECK_DISABLED . extractCauseUnchecked () ; }
Distance : 5

7
Tree	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Code	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Distance : 2

8
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { testRewriteError ( e , causeMessageContains ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { testRewriteError ( e , causeMessageContains ( e ) ) ; }
Distance : 7

9
Tree	catch ( Thread.UncaughtExceptionHandler e ) { error = handleVerifyException ( e , this . error ) ; }
Code	catch ( Thread.UncaughtExceptionHandler e ) { error = handleVerifyException ( e , this . error ) ; }
Distance : 5

10
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = createNotStarted ( e , this . error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = createNotStarted ( e , this . error ) ; }
Distance : 6

11
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { testRewriteError ( e , messageContains ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { testRewriteError ( e , messageContains ( e ) ) ; }
Distance : 7

12
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = useEval ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = useEval ( e ) ; }
Distance : 2

13
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = MaxCountExceededException . extractCauseUnchecked () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = MaxCountExceededException . extractCauseUnchecked () ; }
Distance : 5

14
Tree	catch ( final Thread.UncaughtExceptionHandler e ) { error = handleVerifyException ( e ) ; }
Code	catch ( final Thread.UncaughtExceptionHandler e ) { error = handleVerifyException ( e ) ; }
Distance : 2

15
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = ITERATION_CHECK_DISABLED . fine () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = ITERATION_CHECK_DISABLED . fine () ; }
Distance : 5

16
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e System.err e ) { error = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e System.err e ) { error = handleVerifyException ( e ) ; }
Distance : 3

17
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.creation.instance.InstantiationException e ) { error = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.creation.instance.InstantiationException e ) { error = handleVerifyException ( e ) ; }
Distance : 3

18
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e System.out e ) { error = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e System.out e ) { error = handleVerifyException ( e ) ; }
Distance : 3

19
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent FixedPointGraphTraversal.NON_HALTING_ERROR_MSG e ) { error = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent FixedPointGraphTraversal.NON_HALTING_ERROR_MSG e ) { error = handleVerifyException ( e ) ; }
Distance : 3

20
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent DateUtils.MILLIS_PER_MINUTE e ) { error = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent DateUtils.MILLIS_PER_MINUTE e ) { error = handleVerifyException ( e ) ; }
Distance : 3

21
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e Boolean.FALSE e ) { error = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e Boolean.FALSE e ) { error = handleVerifyException ( e ) ; }
Distance : 3

22
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent LocalizedFormats.UNABLE_TO_SOLVE_SINGULAR_PROBLEM e ) { error = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent LocalizedFormats.UNABLE_TO_SOLVE_SINGULAR_PROBLEM e ) { error = handleVerifyException ( e ) ; }
Distance : 3

23
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent LocalizedFormats.NO_SUCH_MATRIX_ENTRY e ) { error = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent LocalizedFormats.NO_SUCH_MATRIX_ENTRY e ) { error = handleVerifyException ( e ) ; }
Distance : 3

24
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = MILLIS ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = MILLIS ( e ) ; }
Distance : 2

25
Tree	catch ( final Thread.UncaughtExceptionHandler e ) { error = handleVerifyException ( e , this . error ) ; }
Code	catch ( final Thread.UncaughtExceptionHandler e ) { error = handleVerifyException ( e , this . error ) ; }
Distance : 6

26
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e + STRING_CONSTANT , error . getMessage () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e + STRING_CONSTANT , error . getMessage () ) ; }
Distance : 12

27
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) ; }
Distance : 3

28
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . withMessage () . length ( CHAR_CONS ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . withMessage () . length ( CHAR_CONS ) ; }
Distance : 11

29
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; }
Distance : 5

30
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { testRewriteError ( STRING_CONSTANT + e , error . getMessage () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { testRewriteError ( STRING_CONSTANT + e , error . getMessage () ) ; }
Distance : 10

31
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . withMessage () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . withMessage () ; }
Distance : 6

32
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e , error . getLocalizedMessage () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e , error . getLocalizedMessage () ) ; }
Distance : 10

33
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) ; }
Distance : 1

34
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , createSources ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , createSources ( e ) ) ; }
Distance : 6

35
Tree	catch ( com.google.protobuf.InvalidProtocolBufferException e ) { error = handleVerifyException ( e , this . error ) ; }
Code	catch ( com.google.protobuf.InvalidProtocolBufferException e ) { error = handleVerifyException ( e , this . error ) ; }
Distance : 5

36
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = MILLIS . handleVerifyException ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = MILLIS . handleVerifyException ( e , e ) ; }
Distance : 5

37
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = useEval . handleVerifyException ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = useEval . handleVerifyException ( e , e ) ; }
Distance : 5

38
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { getCounter ( STRING_CONSTANT + e , error . getMessage () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { getCounter ( STRING_CONSTANT + e , error . getMessage () ) ; }
Distance : 10

39
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { testRewriteError ( STRING_CONSTANT + e + STRING_CONSTANT , error . getMessage () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { testRewriteError ( STRING_CONSTANT + e + STRING_CONSTANT , error . getMessage () ) ; }
Distance : 12

40
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { parseAndTypeCheckWithScope ( STRING_CONSTANT + e , error . getMessage () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { parseAndTypeCheckWithScope ( STRING_CONSTANT + e , error . getMessage () ) ; }
Distance : 10

41
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . withMessage () . length ( final ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e ) . withMessage () . length ( final ) ; }
Distance : 11

42
Tree	catch ( com.google.protobuf.InvalidProtocolBufferException e ) { error = handleVerifyException ( e ) ; }
Code	catch ( com.google.protobuf.InvalidProtocolBufferException e ) { error = handleVerifyException ( e ) ; }
Distance : 1

43
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , computeCovarianceMatrix ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , computeCovarianceMatrix ( e ) ) ; }
Distance : 6

44
Tree	catch ( final ContinuousDistribution.Sampler e ) { error = handleVerifyException ( e ) ; }
Code	catch ( final ContinuousDistribution.Sampler e ) { error = handleVerifyException ( e ) ; }
Distance : 2

45
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { parseAndTypeCheckWithScope ( STRING_CONSTANT + getMessage ( e ) , false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { parseAndTypeCheckWithScope ( STRING_CONSTANT + getMessage ( e ) , false ) ; }
Distance : 9

46
Tree	catch ( final MultiBackgroundInitializer.MultiBackgroundInitializerResults e ) { error = handleVerifyException ( e , this . error ) ; }
Code	catch ( final MultiBackgroundInitializer.MultiBackgroundInitializerResults e ) { error = handleVerifyException ( e , this . error ) ; }
Distance : 6

47
Tree	catch ( Thread.UncaughtExceptionHandler e ) { error = handleVerifyException ( e ) ; }
Code	catch ( Thread.UncaughtExceptionHandler e ) { error = handleVerifyException ( e ) ; }
Distance : 1

48
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , getTolerance ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , getTolerance ( e ) ) ; }
Distance : 6

49
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . getMockHandler ( firstMethodInStackTrace ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . getMockHandler ( firstMethodInStackTrace ( e ) ) ; }
Distance : 9

50
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = MaxCountExceededException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = MaxCountExceededException ( e ) ; }
Distance : 2

51
Tree	catch ( org.mockito.creation.instance.InstantiationException e ) { error = handleVerifyException ( e , this . error ) ; }
Code	catch ( org.mockito.creation.instance.InstantiationException e ) { error = handleVerifyException ( e , this . error ) ; }
Distance : 5

52
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = useEval . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = useEval . handleVerifyException () ; }
Distance : 5

53
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { getCounter ( STRING_CONSTANT + getMessage ( e ) , false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { getCounter ( STRING_CONSTANT + getMessage ( e ) , false ) ; }
Distance : 9

54
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = extractCauseUnchecked ( e , this . error ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = extractCauseUnchecked ( e , this . error ) ; }
Distance : 6

55
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , warningOtiNti ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , warningOtiNti ( e ) ) ; }
Distance : 6

56
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + getMessage ( e ) , false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + getMessage ( e ) , false ) ; }
Distance : 9

57
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { transpileAndDontCheck ( STRING_CONSTANT + e + STRING_CONSTANT , error . getMessage () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { transpileAndDontCheck ( STRING_CONSTANT + e + STRING_CONSTANT , error . getMessage () ) ; }
Distance : 12

58
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = getExplodePercent ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = getExplodePercent ( e ) ; }
Distance : 2

59
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { testRewriteError ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { testRewriteError ( e ) ; }
Distance : 4

60
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . withMessage ( firstMethodInStackTrace ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . withMessage ( firstMethodInStackTrace ( e ) ) ; }
Distance : 9

61
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = ITERATION_CHECK_DISABLED . extractCauseUnchecked ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = ITERATION_CHECK_DISABLED . extractCauseUnchecked ( e , e ) ; }
Distance : 6

62
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , getTolerance ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , getTolerance ( e ) ) ; }
Distance : 6

63
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { setCostAccuracy ( STRING_CONSTANT + e + STRING_CONSTANT , error . getMessage () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { setCostAccuracy ( STRING_CONSTANT + e + STRING_CONSTANT , error . getMessage () ) ; }
Distance : 12

64
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + firstMethodInStackTrace ( e ) , false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + firstMethodInStackTrace ( e ) , false ) ; }
Distance : 9

65
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = extractCauseUnchecked ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = extractCauseUnchecked ( e ) ; }
Distance : 2

66
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , firstMethodInStackTrace ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , firstMethodInStackTrace ( e ) ) ; }
Distance : 6

67
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = ITERATION_CHECK_DISABLED . handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = ITERATION_CHECK_DISABLED . handleVerifyException ( e ) ; }
Distance : 3

68
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( STRING_CONSTANT + e , error . getMessage () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( STRING_CONSTANT + e , error . getMessage () ) ; }
Distance : 9

69
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { fine ( STRING_CONSTANT + e , error . getMessage () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { fine ( STRING_CONSTANT + e , error . getMessage () ) ; }
Distance : 10

70
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = RENAME_FUNCTION_DEFINITION ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = RENAME_FUNCTION_DEFINITION ( e ) ; }
Distance : 2

71
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = createNotStarted ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = createNotStarted ( e ) ; }
Distance : 2

72
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . answers ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . answers ) ; }
Distance : 5

73
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . withMessage ( getLValue ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . withMessage ( getLValue ( e ) ) ; }
Distance : 9

74
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , serialize ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , serialize ( e ) ) ; }
Distance : 6

75
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , causeMessageContains ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , causeMessageContains ( e ) ) ; }
Distance : 6

76
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { testRewriteError ( e ) . withMessage () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { testRewriteError ( e ) . withMessage () ; }
Distance : 7

77
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { getCounter ( e , causeMessageContains ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { getCounter ( e , causeMessageContains ( e ) ) ; }
Distance : 7

78
Tree	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = createNotStarted ( e ) ; }
Code	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = createNotStarted ( e ) ; }
Distance : 3

79
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = RENAME_FUNCTION_DEFINITION . handleVerifyException ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = RENAME_FUNCTION_DEFINITION . handleVerifyException ( e , e ) ; }
Distance : 5

80
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { parseAndTypeCheckWithScope ( e , causeMessageContains ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { parseAndTypeCheckWithScope ( e , causeMessageContains ( e ) ) ; }
Distance : 7

81
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = MaxCountExceededException . extractCauseUnchecked ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = MaxCountExceededException . extractCauseUnchecked ( e , e ) ; }
Distance : 6

82
Tree	catch ( com.google.protobuf.InvalidProtocolBufferException e ) { error = handleVerifyException ( e , causeMessageContains ( e ) ) ; }
Code	catch ( com.google.protobuf.InvalidProtocolBufferException e ) { error = handleVerifyException ( e , causeMessageContains ( e ) ) ; }
Distance : 6

83
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { getCounter ( e ) . withMessage () . length ( CHAR_CONS ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { getCounter ( e ) . withMessage () . length ( CHAR_CONS ) ; }
Distance : 11

84
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { parseAndTypeCheckWithScope ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { parseAndTypeCheckWithScope ( e ) ; }
Distance : 4

85
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = ITERATION_CHECK_DISABLED . fine ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = ITERATION_CHECK_DISABLED . fine ( e , e ) ; }
Distance : 6

86
Tree	catch ( final com.google.protobuf.InvalidProtocolBufferException e ) { error = handleVerifyException ( e ) ; }
Code	catch ( final com.google.protobuf.InvalidProtocolBufferException e ) { error = handleVerifyException ( e ) ; }
Distance : 2

87
Tree	catch ( final MultiBackgroundInitializer.MultiBackgroundInitializerResults e ) { error = handleVerifyException ( e ) ; }
Code	catch ( final MultiBackgroundInitializer.MultiBackgroundInitializerResults e ) { error = handleVerifyException ( e ) ; }
Distance : 2

88
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = extractCauseUnchecked ( e ) . withMessage () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = extractCauseUnchecked ( e ) . withMessage () ; }
Distance : 5

89
Tree	catch ( org.mockito.creation.instance.InstantiationException e ) { error = handleVerifyException ( e ) ; }
Code	catch ( org.mockito.creation.instance.InstantiationException e ) { error = handleVerifyException ( e ) ; }
Distance : 1

90
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = MaxCountExceededException . handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = MaxCountExceededException . handleVerifyException ( e ) ; }
Distance : 3

91
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { getCounter ( STRING_CONSTANT + e + STRING_CONSTANT , error . getMessage () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { getCounter ( STRING_CONSTANT + e + STRING_CONSTANT , error . getMessage () ) ; }
Distance : 12

92
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { getCounter ( e ) . withMessage () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { getCounter ( e ) . withMessage () ; }
Distance : 7

93
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = cachingMockBytecodeGenerator ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = cachingMockBytecodeGenerator ( e ) ; }
Distance : 2

94
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = fieldClass ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = fieldClass ( e ) ; }
Distance : 2

95
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = ITERATION_CHECK_DISABLED . handleVerifyException ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = ITERATION_CHECK_DISABLED . handleVerifyException ( e , e ) ; }
Distance : 5

96
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = MaxCountExceededException . handleVerifyException ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = MaxCountExceededException . handleVerifyException ( e , e ) ; }
Distance : 5

97
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { parseAndTypeCheckWithScope ( e ) . withMessage () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { parseAndTypeCheckWithScope ( e ) . withMessage () ; }
Distance : 7

98
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { transpileAndDontCheck ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { transpileAndDontCheck ( e ) ; }
Distance : 4

99
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { fine ( STRING_CONSTANT + e + STRING_CONSTANT , error . getMessage () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { fine ( STRING_CONSTANT + e + STRING_CONSTANT , error . getMessage () ) ; }
Distance : 12

100
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { parseAndTypeCheckWithScope ( STRING_CONSTANT + e + STRING_CONSTANT , error . getMessage () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { parseAndTypeCheckWithScope ( STRING_CONSTANT + e + STRING_CONSTANT , error . getMessage () ) ; }
Distance : 12

101
Tree	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = extractCauseUnchecked ( e ) ; }
Code	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = extractCauseUnchecked ( e ) ; }
Distance : 3

102
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { transpileAndDontCheck ( e ) . withMessage () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { transpileAndDontCheck ( e ) . withMessage () ; }
Distance : 7

103
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { setCostAccuracy ( e ) . withMessage () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { setCostAccuracy ( e ) . withMessage () ; }
Distance : 7

104
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) . withMessage () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) . withMessage () ; }
Distance : 4

105
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e . getMessage () , false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e . getMessage () , false ) ; }
Distance : 10

106
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = extractCause ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = extractCause ( e ) ; }
Distance : 2

107
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . withMessage ( onlyThoseClasses ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . withMessage ( onlyThoseClasses ( e ) ) ; }
Distance : 9

108
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { testRewriteError ( STRING_CONSTANT + firstMethodInStackTrace ( e ) , false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { testRewriteError ( STRING_CONSTANT + firstMethodInStackTrace ( e ) , false ) ; }
Distance : 9

109
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { getCounter ( STRING_CONSTANT + e . getMessage () , CHAR_CONS ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { getCounter ( STRING_CONSTANT + e . getMessage () , CHAR_CONS ) ; }
Distance : 10

110
Tree	catch ( com.google.protobuf.InvalidProtocolBufferException e ) { error = handleVerifyException ( e , e ) ; }
Code	catch ( com.google.protobuf.InvalidProtocolBufferException e ) { error = handleVerifyException ( e , e ) ; }
Distance : 3

111
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , getPreferredEntryValue ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , getPreferredEntryValue ( e ) ) ; }
Distance : 6

112
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = MILLIS . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = MILLIS . handleVerifyException () ; }
Distance : 5

113
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . withMessage ( firstMethodInStackTrace ( clazz ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . withMessage ( firstMethodInStackTrace ( clazz ) ) ; }
Distance : 10

114
Tree	catch ( final ContinuousDistribution.Sampler e ) { error = handleVerifyException ( e , this . error ) ; }
Code	catch ( final ContinuousDistribution.Sampler e ) { error = handleVerifyException ( e , this . error ) ; }
Distance : 6

115
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , causeMessageContains ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( e , causeMessageContains ( e ) ) ; }
Distance : 7

116
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { parseAndTypeCheckWithScope ( e ) . withMessage () . length ( CHAR_CONS ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { parseAndTypeCheckWithScope ( e ) . withMessage () . length ( CHAR_CONS ) ; }
Distance : 11

117
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( STRING_CONSTANT + e . getMessage () , CHAR_CONS ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( STRING_CONSTANT + e . getMessage () , CHAR_CONS ) ; }
Distance : 9

118
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = ITERATION_CHECK_DISABLED . handleVerifyException () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = ITERATION_CHECK_DISABLED . handleVerifyException () ; }
Distance : 5

119
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) ; }
Distance : 3

120
Tree	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; }
Code	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . error ) ; }
Distance : 6

121
Tree	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . description ) ; }
Code	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , this . description ) ; }
Distance : 6

122
Tree	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = createNotStarted ( e , this . error ) ; }
Code	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = createNotStarted ( e , this . error ) ; }
Distance : 7

123
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , false ) ; }
Distance : 3

124
Tree	catch ( com.google.protobuf.InvalidProtocolBufferException e ) { error ( e ) . withMessage ( firstMethodInStackTrace ( e ) ) ; }
Code	catch ( com.google.protobuf.InvalidProtocolBufferException e ) { error ( e ) . withMessage ( firstMethodInStackTrace ( e ) ) ; }
Distance : 9

125
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { setCostAccuracy ( STRING_CONSTANT + getMessage ( e ) , false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { setCostAccuracy ( STRING_CONSTANT + getMessage ( e ) , false ) ; }
Distance : 9

126
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { fine ( STRING_CONSTANT + getMessage ( e ) , false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { fine ( STRING_CONSTANT + getMessage ( e ) , false ) ; }
Distance : 9

127
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , e ) ; }
Distance : 3

128
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = extractCauseUnchecked ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = extractCauseUnchecked ( e , e ) ; }
Distance : 4

129
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { setCostAccuracy ( STRING_CONSTANT + e , error . getMessage () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { setCostAccuracy ( STRING_CONSTANT + e , error . getMessage () ) ; }
Distance : 10

130
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = MILLIS . handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = MILLIS . handleVerifyException ( e ) ; }
Distance : 3

131
Tree	catch ( final RotationConvention.FRAME_TRANSFORM e ) { error = handleVerifyException ( e , this . error ) ; }
Code	catch ( final RotationConvention.FRAME_TRANSFORM e ) { error = handleVerifyException ( e , this . error ) ; }
Distance : 6

132
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , getEndMillis ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , getEndMillis ( e ) ) ; }
Distance : 6

133
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { testRewriteError ( STRING_CONSTANT + getMessage ( e ) , false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { testRewriteError ( STRING_CONSTANT + getMessage ( e ) , false ) ; }
Distance : 9

134
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . withMessage () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . withMessage () ; }
Distance : 6

135
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { getCounter ( e , messageContains ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { getCounter ( e , messageContains ( e ) ) ; }
Distance : 7

136
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = ITERATION_CHECK_DISABLED ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = ITERATION_CHECK_DISABLED ( e ) ; }
Distance : 2

137
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . getDeclaredType ( firstMethodInStackTrace ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . getDeclaredType ( firstMethodInStackTrace ( e ) ) ; }
Distance : 9

138
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { testRewriteError ( e ) . withMessage () . length ( CHAR_CONS ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { testRewriteError ( e ) . withMessage () . length ( CHAR_CONS ) ; }
Distance : 11

139
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { testRewriteError ( STRING_CONSTANT + e . getMessage () , false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { testRewriteError ( STRING_CONSTANT + e . getMessage () , false ) ; }
Distance : 10

140
Tree	catch ( com.google.protobuf.InvalidProtocolBufferException e ) { error = handleVerifyException ( e , messageContains ( e ) ) ; }
Code	catch ( com.google.protobuf.InvalidProtocolBufferException e ) { error = handleVerifyException ( e , messageContains ( e ) ) ; }
Distance : 6

141
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = SHARED_EXTERNS ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = SHARED_EXTERNS ( e ) ; }
Distance : 2

142
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { parseAndTypeCheckWithScope ( e , messageContains ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { parseAndTypeCheckWithScope ( e , messageContains ( e ) ) ; }
Distance : 7

143
Tree	catch ( com.google.protobuf.InvalidProtocolBufferException e ) { error = handleVerifyException ( e ) . withMessage () ; }
Code	catch ( com.google.protobuf.InvalidProtocolBufferException e ) { error = handleVerifyException ( e ) . withMessage () ; }
Distance : 4

144
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { fine ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { fine ( e ) ; }
Distance : 4

145
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { parseAndTypeCheckWithScope ( e ) . withMessage () . length ( final ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { parseAndTypeCheckWithScope ( e ) . withMessage () . length ( final ) ; }
Distance : 11

146
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { fine ( e ) . withMessage () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { fine ( e ) . withMessage () ; }
Distance : 7

147
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = RENAME_FUNCTION_DEFINITION . handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = RENAME_FUNCTION_DEFINITION . handleVerifyException ( e ) ; }
Distance : 3

148
Tree	catch ( com.google.protobuf.InvalidProtocolBufferException e ) { error = handleVerifyException ( e , false ) ; }
Code	catch ( com.google.protobuf.InvalidProtocolBufferException e ) { error = handleVerifyException ( e , false ) ; }
Distance : 3

149
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = useEval . handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = useEval . handleVerifyException ( e ) ; }
Distance : 3

150
Tree	catch ( final RotationConvention.FRAME_TRANSFORM e ) { error = handleVerifyException ( e ) ; }
Code	catch ( final RotationConvention.FRAME_TRANSFORM e ) { error = handleVerifyException ( e ) ; }
Distance : 2

151
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { setCostAccuracy ( STRING_CONSTANT + e . getMessage () , CHAR_CONS ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { setCostAccuracy ( STRING_CONSTANT + e . getMessage () , CHAR_CONS ) ; }
Distance : 10

152
Tree	catch ( org.mockito.creation.instance.InstantiationException e ) { error = handleVerifyException ( e , false ) ; }
Code	catch ( org.mockito.creation.instance.InstantiationException e ) { error = handleVerifyException ( e , false ) ; }
Distance : 3

153
Tree	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = extractCauseUnchecked ( e , this . error ) ; }
Code	catch ( final org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = extractCauseUnchecked ( e , this . error ) ; }
Distance : 7

154
Tree	catch ( org.mockito.creation.instance.InstantiationException e ) { error = handleVerifyException ( e , e ) ; }
Code	catch ( org.mockito.creation.instance.InstantiationException e ) { error = handleVerifyException ( e , e ) ; }
Distance : 3

155
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { getCounter ( e ) . withMessage () . length ( final ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { getCounter ( e ) . withMessage () . length ( final ) ; }
Distance : 11

156
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = ITERATION_CHECK_DISABLED . fine ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = ITERATION_CHECK_DISABLED . fine ( e ) ; }
Distance : 4

157
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( STRING_CONSTANT + e + STRING_CONSTANT , error . getMessage () ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( STRING_CONSTANT + e + STRING_CONSTANT , error . getMessage () ) ; }
Distance : 11

158
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . withMessage ( firstMethodInStackTrace ( mock ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error ( e ) . withMessage ( firstMethodInStackTrace ( mock ) ) ; }
Distance : 10

159
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = extractCause ( e ) . withMessage () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = extractCause ( e ) . withMessage () ; }
Distance : 5

160
Tree	catch ( Thread.UncaughtExceptionHandler e ) { error = handleVerifyException ( e , false ) ; }
Code	catch ( Thread.UncaughtExceptionHandler e ) { error = handleVerifyException ( e , false ) ; }
Distance : 3

161
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) . getDeclaredType () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e ) . getDeclaredType () ; }
Distance : 4

162
Tree	catch ( Thread.UncaughtExceptionHandler e ) { error = handleVerifyException ( e ) . withMessage () ; }
Code	catch ( Thread.UncaughtExceptionHandler e ) { error = handleVerifyException ( e ) . withMessage () ; }
Distance : 4

163
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = createNotStarted ( e ) . withMessage () ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = createNotStarted ( e ) . withMessage () ; }
Distance : 5

164
Tree	catch ( Thread.UncaughtExceptionHandler e ) { error = handleVerifyException ( e , e ) ; }
Code	catch ( Thread.UncaughtExceptionHandler e ) { error = handleVerifyException ( e , e ) ; }
Distance : 3

165
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = createNotStarted ( e , false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = createNotStarted ( e , false ) ; }
Distance : 4

166
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { getCounter ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { getCounter ( e ) ; }
Distance : 4

167
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { testRewriteError ( e ) . withMessage () . length ( final ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { testRewriteError ( e ) . withMessage () . length ( final ) ; }
Distance : 11

168
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , causeMessageContains ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( NUMBER_CONSTANT , causeMessageContains ( e ) ) ; }
Distance : 6

169
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e . getMessage () , CHAR_CONS ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { handleVerifyException ( STRING_CONSTANT + e . getMessage () , CHAR_CONS ) ; }
Distance : 10

170
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = extractCause ( e , false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = extractCause ( e , false ) ; }
Distance : 4

171
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { testRewriteError ( STRING_CONSTANT + e . getMessage () , CHAR_CONS ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { testRewriteError ( STRING_CONSTANT + e . getMessage () , CHAR_CONS ) ; }
Distance : 10

172
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { parseAndTypeCheckWithScope ( STRING_CONSTANT + e . getMessage () , CHAR_CONS ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { parseAndTypeCheckWithScope ( STRING_CONSTANT + e . getMessage () , CHAR_CONS ) ; }
Distance : 10

173
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent System.err e ) { handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent System.err e ) { handleVerifyException ( e ) ; }
Distance : 5

174
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = extractCause ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = extractCause ( e , e ) ; }
Distance : 4

175
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = extractCauseUnchecked ( e , causeMessageContains ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = extractCauseUnchecked ( e , causeMessageContains ( e ) ) ; }
Distance : 7

176
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , configureWith ( e ) ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = handleVerifyException ( e , configureWith ( e ) ) ; }
Distance : 6

177
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { setCostAccuracy ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { setCostAccuracy ( e ) ; }
Distance : 4

178
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.creation.instance.InstantiationException e ) { handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.creation.instance.InstantiationException e ) { handleVerifyException ( e ) ; }
Distance : 5

179
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e FixedPointGraphTraversal.NON_HALTING_ERROR_MSG e ) { handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e FixedPointGraphTraversal.NON_HALTING_ERROR_MSG e ) { handleVerifyException ( e ) ; }
Distance : 5

180
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent System.err e ) { error = MaxCountExceededException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent System.err e ) { error = MaxCountExceededException ( e ) ; }
Distance : 4

181
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent System.out e ) { handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent System.out e ) { handleVerifyException ( e ) ; }
Distance : 5

182
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent DateUtils.MILLIS_PER_MINUTE e ) { handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent DateUtils.MILLIS_PER_MINUTE e ) { handleVerifyException ( e ) ; }
Distance : 5

183
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e System.err e ) { error = ITERATION_CHECK_DISABLED ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e System.err e ) { error = ITERATION_CHECK_DISABLED ( e ) ; }
Distance : 4

184
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = ITERATION_CHECK_DISABLED . extractCauseUnchecked ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = ITERATION_CHECK_DISABLED . extractCauseUnchecked ( e ) ; }
Distance : 4

185
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent Boolean.FALSE e ) { handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent Boolean.FALSE e ) { handleVerifyException ( e ) ; }
Distance : 5

186
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.creation.instance.InstantiationException e ) { error = MaxCountExceededException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.creation.instance.InstantiationException e ) { error = MaxCountExceededException ( e ) ; }
Distance : 4

187
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = createNotStarted ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = createNotStarted ( e , e ) ; }
Distance : 4

188
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = extractCauseUnchecked ( e , false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = extractCauseUnchecked ( e , false ) ; }
Distance : 4

189
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e LocalizedFormats.UNABLE_TO_SOLVE_SINGULAR_PROBLEM e ) { handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e LocalizedFormats.UNABLE_TO_SOLVE_SINGULAR_PROBLEM e ) { handleVerifyException ( e ) ; }
Distance : 5

190
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = MaxCountExceededException . extractCauseUnchecked ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = MaxCountExceededException . extractCauseUnchecked ( e ) ; }
Distance : 4

191
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = getExplodePercent ( e , false ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = getExplodePercent ( e , false ) ; }
Distance : 4

192
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = getExplodePercent ( e , e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e ) { error = getExplodePercent ( e , e ) ; }
Distance : 4

193
Tree	catch ( org.mockito.creation.instance.InstantiationException e ) { error = handleVerifyException ( e ) . withMessage () ; }
Code	catch ( org.mockito.creation.instance.InstantiationException e ) { error = handleVerifyException ( e ) . withMessage () ; }
Distance : 4

194
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.creation.instance.InstantiationException e ) { error = ITERATION_CHECK_DISABLED ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.creation.instance.InstantiationException e ) { error = ITERATION_CHECK_DISABLED ( e ) ; }
Distance : 4

195
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent System.out e ) { error = MaxCountExceededException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent System.out e ) { error = MaxCountExceededException ( e ) ; }
Distance : 4

196
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent FixedPointGraphTraversal.NON_HALTING_ERROR_MSG e ) { error = ITERATION_CHECK_DISABLED ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent FixedPointGraphTraversal.NON_HALTING_ERROR_MSG e ) { error = ITERATION_CHECK_DISABLED ( e ) ; }
Distance : 4

197
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e FixedPointGraphTraversal.NON_HALTING_ERROR_MSG e ) { error = MaxCountExceededException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e FixedPointGraphTraversal.NON_HALTING_ERROR_MSG e ) { error = MaxCountExceededException ( e ) ; }
Distance : 4

198
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent System.out e ) { error = ITERATION_CHECK_DISABLED ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent org.mockito.exceptions.verification.junit.ArgumentsAreDifferent System.out e ) { error = ITERATION_CHECK_DISABLED ( e ) ; }
Distance : 4

199
Tree	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e LocalizedFormats.NO_SUCH_MATRIX_ENTRY e ) { handleVerifyException ( e ) ; }
Code	catch ( org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e LocalizedFormats.NO_SUCH_MATRIX_ENTRY e ) { handleVerifyException ( e ) ; }
Distance : 5

========================================================================


========================================================================
Example Number: 108
Parent Code is: 
new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
-------------------------------------------------------------------------------
Child code is: 
new VerificationInOrderFailure ( join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + safelyGetMockName ( undesired . getMock () ) + STRING_CONSTANT , undesired . getLocation () ) )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (14 (304{val=new}) (43 (801{val=VerificationInOrderFailure})) (214{val=(}) (32 (802{val=join}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (14 (304{val=new}) (43 (801{val=LocationImpl})) (216{val=()})) (234{val=,}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (800{val=undesired}) (235{val=.}) (802{val=getMock}) (216{val=()})) (200{val=+}) (45{val=STRING_CONSTANT})) (234{val=,}) (32 (800{val=undesired}) (235{val=.}) (802{val=getLocation}) (216{val=()})) (215{val=)})) (215{val=)})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (14 (304{val=new}) (43 (801{val=VerificationInOrderFailure})) (214{val=(}) (32 (802{val=join}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (14 (304{val=new}) (43 (801{val=LocationImpl})) (216{val=()})) (234{val=,}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (802{val=safelyGetMockName}) (214{val=(}) (32 (800{val=undesired}) (235{val=.}) (802{val=getMock}) (216{val=()})) (215{val=)})) (200{val=+}) (45{val=STRING_CONSTANT})) (234{val=,}) (32 (800{val=undesired}) (235{val=.}) (802{val=getLocation}) (216{val=()})) (215{val=)})) (215{val=)})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/4/parent/src_org_mockito_exceptions_Reporter.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 192
Wrong
========================================================================
False

0
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType () , undesired ) )
Distance : 12

1
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Es6SyntacticScopeCreator ( RandomSource . getType () ) , STRING_CONSTANT , undesired . getType () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Es6SyntacticScopeCreator ( RandomSource . getType () ) , STRING_CONSTANT , undesired . getType () , undesired ) )
Distance : 12

2
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( LINE_JOINER . getClass () ) , STRING_CONSTANT , undesired . getType () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( LINE_JOINER . getClass () ) , STRING_CONSTANT , undesired . getType () , undesired ) )
Distance : 12

3
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Es6SyntacticScopeCreator ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Es6SyntacticScopeCreator ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType () , undesired ) )
Distance : 12

4
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getType () ) , STRING_CONSTANT , undesired . getType () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getType () ) , STRING_CONSTANT , undesired . getType () , undesired ) )
Distance : 12

5
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . dayOfWeek () ) , STRING_CONSTANT , undesired . getType () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . dayOfWeek () ) , STRING_CONSTANT , undesired . getType () , undesired ) )
Distance : 12

6
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getYearDayType () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getYearDayType () , undesired ) )
Distance : 12

7
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getMock () , undesired ) )
Distance : 12

8
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass ( description . dayOfWeek () , ECMASCRIPT5_STRICT . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass ( description . dayOfWeek () , ECMASCRIPT5_STRICT . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Distance : 19

9
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location () , STRING_CONSTANT , undesired . getLocation ( ES8 . getType () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location () , STRING_CONSTANT , undesired . getLocation ( ES8 . getType () , undesired . getLocation () ) , undesired ) )
Distance : 13

10
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getType ( description . getType () , ECMASCRIPT5_STRICT . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getType ( description . getType () , ECMASCRIPT5_STRICT . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Distance : 19

11
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass ( description . getDeclarationScope () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass ( description . getDeclarationScope () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Distance : 18

12
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass ( description . getType () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass ( description . getType () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Distance : 18

13
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( join ( RandomSource ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( join ( RandomSource ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

14
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( LINE_JOINER . getType () . getSimpleName ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getType () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( LINE_JOINER . getType () . getSimpleName ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getType () , undesired ) )
Distance : 15

15
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass ( description . getBytes () , ECMASCRIPT5_STRICT . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass ( description . getBytes () , ECMASCRIPT5_STRICT . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Distance : 19

16
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . dayOfWeek () . getSimpleName ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getType () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . dayOfWeek () . getSimpleName ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getType () , undesired ) )
Distance : 15

17
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( LINE_JOINER . getType () . getSimpleName ( mockitoMock ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( LINE_JOINER . getType () . getSimpleName ( mockitoMock ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 14

18
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Es6SyntacticScopeCreator ( RandomSource . getType () . getSimpleName ( mockitoMock ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Es6SyntacticScopeCreator ( RandomSource . getType () . getSimpleName ( mockitoMock ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 14

19
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( new Location () . getLocation ( tokens , ISOChronology ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( new Location () . getLocation ( tokens , ISOChronology ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 14

20
Tree	new Vector3D ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () . getSimpleName ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getType () , undesired ) )
Code	new Vector3D ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () . getSimpleName ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getType () , undesired ) )
Distance : 16

21
Tree	new Vector3D ( join ( STRING_CONSTANT , new Location ( join ( toBeThrown ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new Vector3D ( join ( STRING_CONSTANT , new Location ( join ( toBeThrown ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 14

22
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( new Location () . getLocation ( tokens , unstubbedInvocations ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( new Location () . getLocation ( tokens , unstubbedInvocations ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 14

23
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getYearDayType ( debuggingInfo . getType () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getYearDayType ( debuggingInfo . getType () , undesired . getLocation () ) , undesired ) )
Distance : 18

24
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass ( description , actualCount . getType () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass ( description , actualCount . getType () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 16

25
Tree	new VerificationInOrderFailure ( LINE_JOINER , new Location ( RandomSource . join () , undesired . getLocation ( CALLS_REAL_METHODS . getLocation () , undesired . getLocation () ) ) , false , super )
Code	new VerificationInOrderFailure ( LINE_JOINER , new Location ( RandomSource . join () , undesired . getLocation ( CALLS_REAL_METHODS . getLocation () , undesired . getLocation () ) ) , false , super )
Distance : 21

26
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType ( ES8 . getType () , ECMASCRIPT5_STRICT . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType ( ES8 . getType () , ECMASCRIPT5_STRICT . getLocation () ) , undesired ) )
Distance : 19

27
Tree	new VerificationInOrderFailure ( LINE_JOINER , new Location ( RandomSource . join () , ECMASCRIPT5_STRICT . getLocation ( CALLS_REAL_METHODS . getLocation () , undesired . getLocation () ) ) , false , super )
Code	new VerificationInOrderFailure ( LINE_JOINER , new Location ( RandomSource . join () , ECMASCRIPT5_STRICT . getLocation ( CALLS_REAL_METHODS . getLocation () , undesired . getLocation () ) ) , false , super )
Distance : 21

28
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( join ( mode ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( join ( mode ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

29
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getType ( description , unstubbedInvocations . getType () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getType ( description , unstubbedInvocations . getType () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 16

30
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( join ( tokens ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( join ( tokens ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

31
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getType ( description , ISOChronology . getType () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getType ( description , ISOChronology . getType () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 16

32
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getType () ) , STRING_CONSTANT , undesired . getType ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getType () ) , STRING_CONSTANT , undesired . getType ( STRING_CONSTANT ) , undesired ) )
Distance : 15

33
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location () , STRING_CONSTANT , undesired . getLocation ( undesired . getType () , mockitoMock . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location () , STRING_CONSTANT , undesired . getLocation ( undesired . getType () , mockitoMock . getLocation () ) , undesired ) )
Distance : 13

34
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( join ( description ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( join ( description ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

35
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass ( description , Reporter . getType () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass ( description , Reporter . getType () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 16

36
Tree	new BackgroundInitializerTestImpl ( join ( STRING_CONSTANT , new Location ( join ( toBeThrown ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new BackgroundInitializerTestImpl ( join ( STRING_CONSTANT , new Location ( join ( toBeThrown ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 14

37
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getYearDayType ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getYearDayType ( STRING_CONSTANT ) , undesired ) )
Distance : 15

38
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( new Location () . getLocation ( tokens , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( new Location () . getLocation ( tokens , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 14

39
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . dayOfWeek () ) , STRING_CONSTANT , undesired . getType ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . dayOfWeek () ) , STRING_CONSTANT , undesired . getType ( STRING_CONSTANT ) , undesired ) )
Distance : 15

40
Tree	new VerificationInOrderFailure ( new InstanceOf ( MockUtil . join () ) . that ( ES6 . getMock () , this ) )
Code	new VerificationInOrderFailure ( new InstanceOf ( MockUtil . join () ) . that ( ES6 . getMock () , this ) )
Distance : 18

41
Tree	new VerificationInOrderFailure ( new Equals ( LINE_JOINER . join () ) . that ( undesired . getMock () , this ) )
Code	new VerificationInOrderFailure ( new Equals ( LINE_JOINER . join () ) . that ( undesired . getMock () , this ) )
Distance : 17

42
Tree	new VerificationInOrderFailure ( new InstanceOf ( MockUtil . join () ) . that ( unstubbedInvocation . getMock () , this ) )
Code	new VerificationInOrderFailure ( new InstanceOf ( MockUtil . join () ) . that ( unstubbedInvocation . getMock () , this ) )
Distance : 18

43
Tree	new VerificationInOrderFailure ( new InstanceOf ( MockUtil . join () , undesired . getLocation ( CALLS_REAL_METHODS . getLocation () , undesired . getLocation () ) ) , false )
Code	new VerificationInOrderFailure ( new InstanceOf ( MockUtil . join () , undesired . getLocation ( CALLS_REAL_METHODS . getLocation () , undesired . getLocation () ) ) , false )
Distance : 17

44
Tree	new VerificationInOrderFailure ( new InstanceOf ( MockUtil . join () , ECMASCRIPT5_STRICT . getLocation ( CALLS_REAL_METHODS . getLocation () , undesired . getLocation () ) ) , false )
Code	new VerificationInOrderFailure ( new InstanceOf ( MockUtil . join () , ECMASCRIPT5_STRICT . getLocation ( CALLS_REAL_METHODS . getLocation () , undesired . getLocation () ) ) , false )
Distance : 17

45
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( join ( toBeThrown , ISOChronology . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( join ( toBeThrown , ISOChronology . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Distance : 17

46
Tree	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . get () , ECMASCRIPT5_STRICT . getLocation () ) ) . getLocation ( CHAR_CONS , this ) )
Code	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . get () , ECMASCRIPT5_STRICT . getLocation () ) ) . getLocation ( CHAR_CONS , this ) )
Distance : 21

47
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Es6SyntacticScopeCreator ( new Location () . getLocation ( tokens , unstubbedInvocations ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Es6SyntacticScopeCreator ( new Location () . getLocation ( tokens , unstubbedInvocations ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 14

48
Tree	new VerificationInOrderFailure ( new InstanceOf ( MockUtil . join () , mockitoMock . getLocation ( CALLS_REAL_METHODS . getLocation () , undesired . getLocation () ) ) , false )
Code	new VerificationInOrderFailure ( new InstanceOf ( MockUtil . join () , mockitoMock . getLocation ( CALLS_REAL_METHODS . getLocation () , undesired . getLocation () ) ) , false )
Distance : 17

49
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType ( ES8 ) , unstubbedInvocations ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType ( ES8 ) , unstubbedInvocations ) )
Distance : 15

50
Tree	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . join () , ECMASCRIPT5_STRICT . getLocation () ) ) . getLocation ( CHAR_CONS , this ) )
Code	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . join () , ECMASCRIPT5_STRICT . getLocation () ) ) . getLocation ( CHAR_CONS , this ) )
Distance : 21

51
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType ( undesired ) , unstubbedInvocations ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType ( undesired ) , unstubbedInvocations ) )
Distance : 15

52
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , undesired ) )
Distance : 15

53
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass ( description ) ) , STRING_CONSTANT , undesired . getType () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass ( description ) ) , STRING_CONSTANT , undesired . getType () , undesired ) )
Distance : 14

54
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getType ( description ) ) , STRING_CONSTANT , undesired . getType () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getType ( description ) ) , STRING_CONSTANT , undesired . getType () , undesired ) )
Distance : 14

55
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . dayOfWeek ( description ) ) , STRING_CONSTANT , undesired . getType () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . dayOfWeek ( description ) ) , STRING_CONSTANT , undesired . getType () , undesired ) )
Distance : 14

56
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getType () ) , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , unstubbedInvocations ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getType () ) , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , unstubbedInvocations ) )
Distance : 15

57
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () . getSimpleName ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getType () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () . getSimpleName ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getType () , undesired ) )
Distance : 15

58
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( join ( toBeThrown ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( join ( toBeThrown ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

59
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () . getSimpleName ( mockitoMock ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () . getSimpleName ( mockitoMock ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 14

60
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getType () . getSimpleName ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getType () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getType () . getSimpleName ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getType () , undesired ) )
Distance : 15

61
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Es6SyntacticScopeCreator ( RandomSource . getClass ( description ) ) , STRING_CONSTANT , undesired . getType () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Es6SyntacticScopeCreator ( RandomSource . getClass ( description ) ) , STRING_CONSTANT , undesired . getType () , undesired ) )
Distance : 14

62
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( join ( toBeThrown , actualCount . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( join ( toBeThrown , actualCount . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Distance : 17

63
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( LINE_JOINER . getClass ( description ) ) , STRING_CONSTANT , undesired . getType () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( LINE_JOINER . getClass ( description ) ) , STRING_CONSTANT , undesired . getType () , undesired ) )
Distance : 14

64
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass ( description . getDeclarationScope () , ECMASCRIPT5_STRICT . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass ( description . getDeclarationScope () , ECMASCRIPT5_STRICT . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Distance : 19

65
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass ( description . getType () , ECMASCRIPT5_STRICT . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass ( description . getType () , ECMASCRIPT5_STRICT . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Distance : 19

66
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , iChrono ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , iChrono ) )
Distance : 15

67
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Es6SyntacticScopeCreator ( RandomSource . getType ( description ) ) , STRING_CONSTANT , undesired . getType () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Es6SyntacticScopeCreator ( RandomSource . getType ( description ) ) , STRING_CONSTANT , undesired . getType () , undesired ) )
Distance : 14

68
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getType () . getSimpleName ( mockitoMock ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getType () . getSimpleName ( mockitoMock ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 14

69
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location () , STRING_CONSTANT , undesired . getLocation ( debuggingInfo . getType () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location () , STRING_CONSTANT , undesired . getLocation ( debuggingInfo . getType () , undesired . getLocation () ) , undesired ) )
Distance : 13

70
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( LINE_JOINER . getType ( description ) ) , STRING_CONSTANT , undesired . getType () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( LINE_JOINER . getType ( description ) ) , STRING_CONSTANT , undesired . getType () , undesired ) )
Distance : 14

71
Tree	new Vector3D ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass ( description ) ) , STRING_CONSTANT , undesired . getType () , undesired ) )
Code	new Vector3D ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass ( description ) ) , STRING_CONSTANT , undesired . getType () , undesired ) )
Distance : 15

72
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( join ( toBeThrown , Reporter . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( join ( toBeThrown , Reporter . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Distance : 17

73
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , mockitoMock ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , mockitoMock ) )
Distance : 15

74
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType ( debuggingInfo . getType () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType ( debuggingInfo . getType () , undesired . getLocation () ) , undesired ) )
Distance : 18

75
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getYearDayType ( debuggingInfo ) , unstubbedInvocations ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getYearDayType ( debuggingInfo ) , unstubbedInvocations ) )
Distance : 15

76
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( join ( RandomSource , ISOChronology . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( join ( RandomSource , ISOChronology . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Distance : 17

77
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( join ( toBeThrown , unstubbedInvocations . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( join ( toBeThrown , unstubbedInvocations . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Distance : 17

78
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( join ( toBeThrown , ISOChronology . getType () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( join ( toBeThrown , ISOChronology . getType () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Distance : 17

79
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Es6SyntacticScopeCreator ( join ( toBeThrown , ISOChronology . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Es6SyntacticScopeCreator ( join ( toBeThrown , ISOChronology . getMock () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Distance : 17

80
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType ( ES8 . getType () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType ( ES8 . getType () , undesired . getLocation () ) , undesired ) )
Distance : 18

81
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType ( undesired . getType () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType ( undesired . getType () , undesired . getLocation () ) , undesired ) )
Distance : 17

82
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass ( description , unstubbedInvocations . getType () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass ( description , unstubbedInvocations . getType () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 16

83
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( join ( toBeThrown , actualCount . getType () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( join ( toBeThrown , actualCount . getType () , undesired . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Distance : 17

84
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType ( debuggingInfo . getType () , ECMASCRIPT5_STRICT . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType ( debuggingInfo . getType () , ECMASCRIPT5_STRICT . getLocation () ) , undesired ) )
Distance : 19

85
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass ( description , ISOChronology . getType () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass ( description , ISOChronology . getType () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 16

86
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getMock ( STRING_CONSTANT ) , undesired ) )
Distance : 15

87
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Es6SyntacticScopeCreator ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Es6SyntacticScopeCreator ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType ( STRING_CONSTANT ) , undesired ) )
Distance : 15

88
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( new Location () . getLocation ( tokens , totalMillisMaster ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( new Location () . getLocation ( tokens , totalMillisMaster ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 14

89
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( LINE_JOINER . getClass () ) , STRING_CONSTANT , undesired . getType ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( LINE_JOINER . getClass () ) , STRING_CONSTANT , undesired . getType ( STRING_CONSTANT ) , undesired ) )
Distance : 15

90
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Es6SyntacticScopeCreator ( new Location () . getLocation ( tokens , actualCount ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Es6SyntacticScopeCreator ( new Location () . getLocation ( tokens , actualCount ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 14

91
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getType () ) , STRING_CONSTANT , undesired . getType ( debuggingInfo . getType () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getType () ) , STRING_CONSTANT , undesired . getType ( debuggingInfo . getType () , undesired . getLocation () ) , undesired ) )
Distance : 18

92
Tree	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . get () , ECMASCRIPT5_STRICT . getLocation () ) ) . getLocation ( CHAR_CONS ) )
Code	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . get () , ECMASCRIPT5_STRICT . getLocation () ) ) . getLocation ( CHAR_CONS ) )
Distance : 20

93
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType ( debuggingInfo . getType () , mockitoMock . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType ( debuggingInfo . getType () , mockitoMock . getLocation () ) , undesired ) )
Distance : 19

94
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Es6SyntacticScopeCreator ( RandomSource . getType () ) , STRING_CONSTANT , undesired . getType ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Es6SyntacticScopeCreator ( RandomSource . getType () ) , STRING_CONSTANT , undesired . getType ( STRING_CONSTANT ) , undesired ) )
Distance : 15

95
Tree	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . join () , ECMASCRIPT5_STRICT . getLocation () ) ) . getLocation ( CHAR_CONS ) )
Code	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . join () , ECMASCRIPT5_STRICT . getLocation () ) ) . getLocation ( CHAR_CONS ) )
Distance : 20

96
Tree	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . get () , ECMASCRIPT5_STRICT . getLocation () ) ) . getLocation ( false ) )
Code	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . get () , ECMASCRIPT5_STRICT . getLocation () ) ) . getLocation ( false ) )
Distance : 20

97
Tree	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . get () , mockitoMock . getLocation () ) ) . getLocation ( CHAR_CONS ) )
Code	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . get () , mockitoMock . getLocation () ) ) . getLocation ( CHAR_CONS ) )
Distance : 20

98
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Es6SyntacticScopeCreator ( new Location () . getLocation ( tokens , ISOChronology ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Es6SyntacticScopeCreator ( new Location () . getLocation ( tokens , ISOChronology ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 14

99
Tree	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . get () , ECMASCRIPT5_STRICT . getLocation () ) ) . getLocation ( undesired ) )
Code	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . get () , ECMASCRIPT5_STRICT . getLocation () ) ) . getLocation ( undesired ) )
Distance : 20

100
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . dayOfWeek () . getSimpleName ( mockitoMock ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . dayOfWeek () . getSimpleName ( mockitoMock ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 14

101
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , unstubbedInvocations ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , unstubbedInvocations ) )
Distance : 15

102
Tree	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . get () , undesired . getLocation () ) ) . getLocation ( CHAR_CONS ) )
Code	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . get () , undesired . getLocation () ) ) . getLocation ( CHAR_CONS ) )
Distance : 19

103
Tree	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . join () , ECMASCRIPT5_STRICT . getLocation () ) ) . getLocation ( false ) )
Code	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . join () , ECMASCRIPT5_STRICT . getLocation () ) ) . getLocation ( false ) )
Distance : 20

104
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location () , STRING_CONSTANT , undesired . getLocation ( debuggingInfo . getType () , ECMASCRIPT5_STRICT . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location () , STRING_CONSTANT , undesired . getLocation ( debuggingInfo . getType () , ECMASCRIPT5_STRICT . getLocation () ) , undesired ) )
Distance : 14

105
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( LINE_JOINER . getClass () . getSimpleName ( mockitoMock ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( LINE_JOINER . getClass () . getSimpleName ( mockitoMock ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 14

106
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Es6SyntacticScopeCreator ( RandomSource . getClass () . getSimpleName ( mockitoMock ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Es6SyntacticScopeCreator ( RandomSource . getClass () . getSimpleName ( mockitoMock ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 14

107
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Es6SyntacticScopeCreator ( RandomSource . getType () . getSimpleName ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getType () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Es6SyntacticScopeCreator ( RandomSource . getType () . getSimpleName ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getType () , undesired ) )
Distance : 15

108
Tree	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . join () , ECMASCRIPT5_STRICT . getLocation () ) ) . getLocation ( undesired ) )
Code	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . join () , ECMASCRIPT5_STRICT . getLocation () ) ) . getLocation ( undesired ) )
Distance : 20

109
Tree	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . join () , mockitoMock . getLocation () ) ) . getLocation ( CHAR_CONS ) )
Code	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . join () , mockitoMock . getLocation () ) ) . getLocation ( CHAR_CONS ) )
Distance : 20

110
Tree	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . join () , undesired . getLocation () ) ) . getLocation ( CHAR_CONS ) )
Code	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . join () , undesired . getLocation () ) ) . getLocation ( CHAR_CONS ) )
Distance : 19

111
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location () , STRING_CONSTANT , undesired . getLocation ( ES8 . getType () , ECMASCRIPT5_STRICT . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location () , STRING_CONSTANT , undesired . getLocation ( ES8 . getType () , ECMASCRIPT5_STRICT . getLocation () ) , undesired ) )
Distance : 14

112
Tree	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . get () , mockitoMock . getLocation () ) ) . getLocation ( undesired ) )
Code	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . get () , mockitoMock . getLocation () ) ) . getLocation ( undesired ) )
Distance : 20

113
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( new Location () . getLocation ( tokens , actualCount ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( new Location () . getLocation ( tokens , actualCount ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 14

114
Tree	new VerificationInOrderFailure ( new InstanceOf [] { STRING_CONSTANT , undesired . getType () , undesired . getLocation () } , super )
Code	new VerificationInOrderFailure ( new InstanceOf [] { STRING_CONSTANT , undesired . getType () , undesired . getLocation () } , super )
Distance : 17

115
Tree	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . get () , undesired . getLocation () ) ) . getLocation ( undesired ) )
Code	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . get () , undesired . getLocation () ) ) . getLocation ( undesired ) )
Distance : 19

116
Tree	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . join () , mockitoMock . getLocation () ) ) . getLocation ( undesired ) )
Code	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . join () , mockitoMock . getLocation () ) ) . getLocation ( undesired ) )
Distance : 20

117
Tree	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . join () , undesired . getLocation () ) ) . getLocation ( undesired ) )
Code	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . join () , undesired . getLocation () ) ) . getLocation ( undesired ) )
Distance : 19

118
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass ( description , undesired . getType () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass ( description , undesired . getType () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 15

119
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location () , STRING_CONSTANT , undesired . getLocation ( undesired . getType () , undesired . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location () , STRING_CONSTANT , undesired . getLocation ( undesired . getType () , undesired . getLocation () ) , undesired ) )
Distance : 12

120
Tree	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( description . get () , ECMASCRIPT5_STRICT . getLocation () ) ) . getLocation ( undesired ) )
Code	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( description . get () , ECMASCRIPT5_STRICT . getLocation () ) ) . getLocation ( undesired ) )
Distance : 20

121
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getType ( description , actualCount . getType () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getType ( description , actualCount . getType () , undesired ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 16

122
Tree	new VerificationInOrderFailure ( new InstanceOf [] { NodeTraversal . join () , STRING_CONSTANT } , undesired . getLocation () )
Code	new VerificationInOrderFailure ( new InstanceOf [] { NodeTraversal . join () , STRING_CONSTANT } , undesired . getLocation () )
Distance : 17

123
Tree	new VerificationInOrderFailure ( LINE_JOINER , new Location ( RandomSource . join () , mockitoMock . getLocation ( CALLS_REAL_METHODS . getLocation () , undesired . getLocation () ) ) , false , super )
Code	new VerificationInOrderFailure ( LINE_JOINER , new Location ( RandomSource . join () , mockitoMock . getLocation ( CALLS_REAL_METHODS . getLocation () , undesired . getLocation () ) ) , false , super )
Distance : 21

124
Tree	new VerificationInOrderFailure ( new InstanceOf [] { generator . join () , STRING_CONSTANT } , undesired . getLocation () )
Code	new VerificationInOrderFailure ( new InstanceOf [] { generator . join () , STRING_CONSTANT } , undesired . getLocation () )
Distance : 17

125
Tree	new VerificationInOrderFailure ( LINE_JOINER , new Location ( logger . join () , undesired . getLocation ( CALLS_REAL_METHODS . getLocation () , undesired . getLocation () ) ) , false , super )
Code	new VerificationInOrderFailure ( LINE_JOINER , new Location ( logger . join () , undesired . getLocation ( CALLS_REAL_METHODS . getLocation () , undesired . getLocation () ) ) , false , super )
Distance : 21

126
Tree	new VerificationInOrderFailure ( new InstanceOf [] { PointValuePair . join () , STRING_CONSTANT } , undesired . getLocation () )
Code	new VerificationInOrderFailure ( new InstanceOf [] { PointValuePair . join () , STRING_CONSTANT } , undesired . getLocation () )
Distance : 17

127
Tree	new VerificationInOrderFailure ( new InstanceOf [] { nanStrategy . join () , STRING_CONSTANT } , undesired . getLocation () )
Code	new VerificationInOrderFailure ( new InstanceOf [] { nanStrategy . join () , STRING_CONSTANT } , undesired . getLocation () )
Distance : 17

128
Tree	new VerificationInOrderFailure ( new InstanceOf [] { LOCALE_EN_US_ZZZZ . join () , STRING_CONSTANT } , undesired . getLocation () )
Code	new VerificationInOrderFailure ( new InstanceOf [] { LOCALE_EN_US_ZZZZ . join () , STRING_CONSTANT } , undesired . getLocation () )
Distance : 17

129
Tree	new VerificationInOrderFailure ( LINE_JOINER , new Location ( logger . join () , ECMASCRIPT5_STRICT . getLocation ( CALLS_REAL_METHODS . getLocation () , undesired . getLocation () ) ) , false , super )
Code	new VerificationInOrderFailure ( LINE_JOINER , new Location ( logger . join () , ECMASCRIPT5_STRICT . getLocation ( CALLS_REAL_METHODS . getLocation () , undesired . getLocation () ) ) , false , super )
Distance : 21

130
Tree	new VerificationInOrderFailure ( new Equals [] { generator . join () , STRING_CONSTANT } , undesired . getLocation () )
Code	new VerificationInOrderFailure ( new Equals [] { generator . join () , STRING_CONSTANT } , undesired . getLocation () )
Distance : 17

131
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass ( description . atLeastOnce () , ECMASCRIPT5_STRICT . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass ( description . atLeastOnce () , ECMASCRIPT5_STRICT . getLocation () ) ) , STRING_CONSTANT , false , undesired ) )
Distance : 19

132
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Es6SyntacticScopeCreator ( join ( toBeThrown ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Es6SyntacticScopeCreator ( join ( toBeThrown ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 13

133
Tree	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join () ) . that ( undesired . getMock () , this ) )
Code	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join () ) . that ( undesired . getMock () , this ) )
Distance : 17

134
Tree	new VerificationInOrderFailure ( new Equals [] { NodeTraversal . join () , STRING_CONSTANT } , undesired . getLocation () )
Code	new VerificationInOrderFailure ( new Equals [] { NodeTraversal . join () , STRING_CONSTANT } , undesired . getLocation () )
Distance : 17

135
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Es6SyntacticScopeCreator ( RandomSource . getClass () . getSimpleName ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getType () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Es6SyntacticScopeCreator ( RandomSource . getClass () . getSimpleName ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getType () , undesired ) )
Distance : 15

136
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType ( STRING_CONSTANT ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType ( STRING_CONSTANT ) , undesired ) )
Distance : 15

137
Tree	new VerificationInOrderFailure ( LINE_JOINER , new Location ( tokens . join () , undesired . getLocation ( CALLS_REAL_METHODS . getLocation () , undesired . getLocation () ) ) , false , super )
Code	new VerificationInOrderFailure ( LINE_JOINER , new Location ( tokens . join () , undesired . getLocation ( CALLS_REAL_METHODS . getLocation () , undesired . getLocation () ) ) , false , super )
Distance : 21

138
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location () , STRING_CONSTANT , undesired . getLocation ( debuggingInfo . getType () , mockitoMock . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location () , STRING_CONSTANT , undesired . getLocation ( debuggingInfo . getType () , mockitoMock . getLocation () ) , undesired ) )
Distance : 14

139
Tree	new VerificationInOrderFailure ( new InstanceOf ( MockUtil . join () ) . that ( undesired . getMock () , this ) )
Code	new VerificationInOrderFailure ( new InstanceOf ( MockUtil . join () ) . that ( undesired . getMock () , this ) )
Distance : 17

140
Tree	new VerificationInOrderFailure ( LINE_JOINER , new Location ( RandomSource . join () , undesired . getLocation ( CALLS_REAL_METHODS . getLocation () , mockitoMock . getLocation () ) ) , false , super )
Code	new VerificationInOrderFailure ( LINE_JOINER , new Location ( RandomSource . join () , undesired . getLocation ( CALLS_REAL_METHODS . getLocation () , mockitoMock . getLocation () ) ) , false , super )
Distance : 22

141
Tree	new VerificationInOrderFailure ( new Equals ( LINE_JOINER . join () , undesired . getLocation ( CALLS_REAL_METHODS . getLocation () , undesired . getLocation () ) ) , false )
Code	new VerificationInOrderFailure ( new Equals ( LINE_JOINER . join () , undesired . getLocation ( CALLS_REAL_METHODS . getLocation () , undesired . getLocation () ) ) , false )
Distance : 17

142
Tree	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . get () , ECMASCRIPT5_STRICT . getLocation () ) ) . getLocation ( false , this ) )
Code	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . get () , ECMASCRIPT5_STRICT . getLocation () ) ) . getLocation ( false , this ) )
Distance : 21

143
Tree	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join () , ECMASCRIPT5_STRICT . getLocation ( CALLS_REAL_METHODS . getLocation () , undesired . getLocation () ) ) , false )
Code	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join () , ECMASCRIPT5_STRICT . getLocation ( CALLS_REAL_METHODS . getLocation () , undesired . getLocation () ) ) , false )
Distance : 17

144
Tree	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join () ) . that ( ES6 . getMock () , this ) )
Code	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join () ) . that ( ES6 . getMock () , this ) )
Distance : 18

145
Tree	new VerificationInOrderFailure ( LINE_JOINER , new Location ( RandomSource . join () , undesired . getLocation ( CALLS_REAL_METHODS . getLocation () , ECMASCRIPT5_STRICT . getLocation () ) ) , false , super )
Code	new VerificationInOrderFailure ( LINE_JOINER , new Location ( RandomSource . join () , undesired . getLocation ( CALLS_REAL_METHODS . getLocation () , ECMASCRIPT5_STRICT . getLocation () ) ) , false , super )
Distance : 22

146
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType ( debuggingInfo . getType ( debuggingInfo ) , unstubbedInvocations . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType ( debuggingInfo . getType ( debuggingInfo ) , unstubbedInvocations . getLocation () ) , undesired ) )
Distance : 20

147
Tree	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join () ) . that ( featureSet . getMock () , this ) )
Code	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join () ) . that ( featureSet . getMock () , this ) )
Distance : 18

148
Tree	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join () , undesired . getLocation ( CALLS_REAL_METHODS . getLocation () , mockitoMock . getLocation () ) ) , false )
Code	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join () , undesired . getLocation ( CALLS_REAL_METHODS . getLocation () , mockitoMock . getLocation () ) ) , false )
Distance : 18

149
Tree	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . get () , mockitoMock . getLocation () ) ) . getLocation ( CHAR_CONS , this ) )
Code	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . get () , mockitoMock . getLocation () ) ) . getLocation ( CHAR_CONS , this ) )
Distance : 21

150
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType ( debuggingInfo . getType ( ES8 ) , unstubbedInvocations . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType ( debuggingInfo . getType ( ES8 ) , unstubbedInvocations . getLocation () ) , undesired ) )
Distance : 20

151
Tree	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . get () , undesired . getLocation () ) ) . getLocation ( CHAR_CONS , this ) )
Code	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . get () , undesired . getLocation () ) ) . getLocation ( CHAR_CONS , this ) )
Distance : 20

152
Tree	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join () ) . that ( unstubbedInvocation . getMock () , this ) )
Code	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join () ) . that ( unstubbedInvocation . getMock () , this ) )
Distance : 18

153
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType ( undesired . getType ( debuggingInfo ) , unstubbedInvocations . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType ( undesired . getType ( debuggingInfo ) , unstubbedInvocations . getLocation () ) , undesired ) )
Distance : 19

154
Tree	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . join () , ECMASCRIPT5_STRICT . getLocation () ) ) . getLocation ( false , this ) )
Code	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . join () , ECMASCRIPT5_STRICT . getLocation () ) ) . getLocation ( false , this ) )
Distance : 21

155
Tree	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join () , undesired . getLocation ( CALLS_REAL_METHODS . getLocation () , undesired . getLocation () ) ) , false )
Code	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join () , undesired . getLocation ( CALLS_REAL_METHODS . getLocation () , undesired . getLocation () ) ) , false )
Distance : 17

156
Tree	new VerificationInOrderFailure ( new Equals [] { PointValuePair . join () , STRING_CONSTANT } , undesired . getLocation () )
Code	new VerificationInOrderFailure ( new Equals [] { PointValuePair . join () , STRING_CONSTANT } , undesired . getLocation () )
Distance : 17

157
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType ( debuggingInfo . getType ( unstubbedInvocation ) , unstubbedInvocations . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType ( debuggingInfo . getType ( unstubbedInvocation ) , unstubbedInvocations . getLocation () ) , undesired ) )
Distance : 20

158
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () . getSimpleName ( debuggingInfo ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () . getSimpleName ( debuggingInfo ) ) , STRING_CONSTANT , undesired . getLocation () , undesired ) )
Distance : 14

159
Tree	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . join () , ECMASCRIPT5_STRICT . getLocation () ) ) . getLocation ( undesired , undesired ) )
Code	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . join () , ECMASCRIPT5_STRICT . getLocation () ) ) . getLocation ( undesired , undesired ) )
Distance : 21

160
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType ( ES8 . getType ( ES8 ) , unstubbedInvocations . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType ( ES8 . getType ( ES8 ) , unstubbedInvocations . getLocation () ) , undesired ) )
Distance : 20

161
Tree	new VerificationInOrderFailure ( new InstanceOf [] { STRING_CONSTANT , undesired . getType () , iChrono . getLocation () } , super )
Code	new VerificationInOrderFailure ( new InstanceOf [] { STRING_CONSTANT , undesired . getType () , iChrono . getLocation () } , super )
Distance : 18

162
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( LINE_JOINER . getClass () . getSimpleName ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getType () , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( LINE_JOINER . getClass () . getSimpleName ( RandomSource.WELL_19937_C ) ) , STRING_CONSTANT , undesired . getType () , undesired ) )
Distance : 15

163
Tree	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . get () , mockitoMock . getLocation () ) ) . getLocation ( undesired , undesired ) )
Code	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . get () , mockitoMock . getLocation () ) ) . getLocation ( undesired , undesired ) )
Distance : 21

164
Tree	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . get () , ECMASCRIPT5_STRICT . getLocation () ) ) . getLocation ( undesired , ISOChronology ) )
Code	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . get () , ECMASCRIPT5_STRICT . getLocation () ) ) . getLocation ( undesired , ISOChronology ) )
Distance : 21

165
Tree	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . get () , undesired . getLocation () ) ) . getLocation ( undesired , undesired ) )
Code	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . get () , undesired . getLocation () ) ) . getLocation ( undesired , undesired ) )
Distance : 20

166
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType ( ES8 . getType ( debuggingInfo ) , unstubbedInvocations . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType ( ES8 . getType ( debuggingInfo ) , unstubbedInvocations . getLocation () ) , undesired ) )
Distance : 20

167
Tree	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . join () , mockitoMock . getLocation () ) ) . getLocation ( undesired , undesired ) )
Code	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . join () , mockitoMock . getLocation () ) ) . getLocation ( undesired , undesired ) )
Distance : 21

168
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType ( debuggingInfo . getType ( actualCount ) , unstubbedInvocations . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType ( debuggingInfo . getType ( actualCount ) , unstubbedInvocations . getLocation () ) , undesired ) )
Distance : 20

169
Tree	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . join () , mockitoMock . getLocation () ) ) . getLocation ( CHAR_CONS , this ) )
Code	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . join () , mockitoMock . getLocation () ) ) . getLocation ( CHAR_CONS , this ) )
Distance : 21

170
Tree	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . join () , undesired . getLocation () ) ) . getLocation ( undesired , undesired ) )
Code	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . join () , undesired . getLocation () ) ) . getLocation ( undesired , undesired ) )
Distance : 20

171
Tree	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . join () , ECMASCRIPT5_STRICT . getLocation () ) ) . getLocation ( undesired , ISOChronology ) )
Code	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . join () , ECMASCRIPT5_STRICT . getLocation () ) ) . getLocation ( undesired , ISOChronology ) )
Distance : 21

172
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType ( debuggingInfo . getType ( unstubbedInvocations ) , unstubbedInvocations . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location ( RandomSource . getClass () ) , STRING_CONSTANT , undesired . getType ( debuggingInfo . getType ( unstubbedInvocations ) , unstubbedInvocations . getLocation () ) , undesired ) )
Distance : 20

173
Tree	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . join () , undesired . getLocation () ) ) . getLocation ( CHAR_CONS , this ) )
Code	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . join () , undesired . getLocation () ) ) . getLocation ( CHAR_CONS , this ) )
Distance : 20

174
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location () , STRING_CONSTANT , undesired . getLocation ( ES8 . getType () , mockitoMock . getLocation () ) , undesired ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location () , STRING_CONSTANT , undesired . getLocation ( ES8 . getType () , mockitoMock . getLocation () ) , undesired ) )
Distance : 14

175
Tree	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join () , mockitoMock . getLocation ( CALLS_REAL_METHODS . getLocation () , undesired . getLocation () ) ) , false )
Code	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join () , mockitoMock . getLocation ( CALLS_REAL_METHODS . getLocation () , undesired . getLocation () ) ) , false )
Distance : 17

176
Tree	new VerificationInOrderFailure ( new InstanceOf ( MockUtil . join ( tokens . get () , ECMASCRIPT5_STRICT . getLocation () ) ) . getLocation ( undesired ) )
Code	new VerificationInOrderFailure ( new InstanceOf ( MockUtil . join ( tokens . get () , ECMASCRIPT5_STRICT . getLocation () ) ) . getLocation ( undesired ) )
Distance : 20

177
Tree	new VerificationInOrderFailure ( new Equals [] { STRING_CONSTANT , undesired . getType () , undesired . getLocation () } , super )
Code	new VerificationInOrderFailure ( new Equals [] { STRING_CONSTANT , undesired . getType () , undesired . getLocation () } , super )
Distance : 17

178
Tree	new Vector3D ( new InstanceOf [] { STRING_CONSTANT , undesired . getType () , undesired . getLocation () } , super )
Code	new Vector3D ( new InstanceOf [] { STRING_CONSTANT , undesired . getType () , undesired . getLocation () } , super )
Distance : 18

179
Tree	new BackgroundInitializerTestImpl ( new InstanceOf [] { STRING_CONSTANT , undesired . getType () , undesired . getLocation () } , super )
Code	new BackgroundInitializerTestImpl ( new InstanceOf [] { STRING_CONSTANT , undesired . getType () , undesired . getLocation () } , super )
Distance : 18

180
Tree	new VerificationInOrderFailure ( new InstanceOf [] { STRING_CONSTANT , undesired . getType () , mockitoMock . getLocation () } , super )
Code	new VerificationInOrderFailure ( new InstanceOf [] { STRING_CONSTANT , undesired . getType () , mockitoMock . getLocation () } , super )
Distance : 18

181
Tree	new VerificationInOrderFailure ( new InstanceOf [] { STRING_CONSTANT , undesired . getType () , ECMASCRIPT5_STRICT . getLocation () } , super )
Code	new VerificationInOrderFailure ( new InstanceOf [] { STRING_CONSTANT , undesired . getType () , ECMASCRIPT5_STRICT . getLocation () } , super )
Distance : 18

182
Tree	new VerificationInOrderFailure ( new InstanceOf [] { STRING_CONSTANT , undesired . getYearDayType () , undesired . getLocation () } , super )
Code	new VerificationInOrderFailure ( new InstanceOf [] { STRING_CONSTANT , undesired . getYearDayType () , undesired . getLocation () } , super )
Distance : 17

183
Tree	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . get () , ECMASCRIPT5_STRICT . getLocation () ) ) . getLocation ( undesired , undesired ) )
Code	new VerificationInOrderFailure ( new InstanceOf ( LINE_JOINER . join ( tokens . get () , ECMASCRIPT5_STRICT . getLocation () ) ) . getLocation ( undesired , undesired ) )
Distance : 21

184
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location () , STRING_CONSTANT + undesired . standard () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location () , STRING_CONSTANT + undesired . standard () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 5

185
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Es6SyntacticScopeCreator () , STRING_CONSTANT + undesired . getSlot () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Es6SyntacticScopeCreator () , STRING_CONSTANT + undesired . getSlot () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 5

186
Tree	new Vector3D ( join ( STRING_CONSTANT , new Location () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new Vector3D ( join ( STRING_CONSTANT , new Location () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 5

187
Tree	new BackgroundInitializerTestImpl ( join ( STRING_CONSTANT , new Location () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new BackgroundInitializerTestImpl ( join ( STRING_CONSTANT , new Location () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 5

188
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Es6SyntacticScopeCreator () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Es6SyntacticScopeCreator () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 4

189
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location () , STRING_CONSTANT + undesired . getSlot () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location () , STRING_CONSTANT + undesired . getSlot () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 5

190
Tree	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new VerificationInOrderFailure ( join ( STRING_CONSTANT , new Location () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 4

191
Tree	new Vector3D ( join ( STRING_CONSTANT , new Location () , STRING_CONSTANT + undesired . getSlot () + STRING_CONSTANT , undesired . getLocation () ) )
Code	new Vector3D ( join ( STRING_CONSTANT , new Location () , STRING_CONSTANT + undesired . getSlot () + STRING_CONSTANT , undesired . getLocation () ) )
Distance : 6

========================================================================


========================================================================
Example Number: 109
Parent Code is: 
join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + undesired . getMock () + STRING_CONSTANT , undesired . getLocation () , scenario )
-------------------------------------------------------------------------------
Child code is: 
join ( STRING_CONSTANT , new LocationImpl () , STRING_CONSTANT + safelyGetMockName ( undesired . getMock () ) + STRING_CONSTANT , undesired . getLocation () , scenario )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (32 (802{val=join}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (14 (304{val=new}) (43 (801{val=LocationImpl})) (216{val=()})) (234{val=,}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (800{val=undesired}) (235{val=.}) (802{val=getMock}) (216{val=()})) (200{val=+}) (45{val=STRING_CONSTANT})) (234{val=,}) (32 (800{val=undesired}) (235{val=.}) (802{val=getLocation}) (216{val=()})) (234{val=,}) (800{val=scenario}) (215{val=)})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (32 (802{val=join}) (214{val=(}) (45{val=STRING_CONSTANT}) (234{val=,}) (14 (304{val=new}) (43 (801{val=LocationImpl})) (216{val=()})) (234{val=,}) (27 (45{val=STRING_CONSTANT}) (200{val=+}) (32 (802{val=safelyGetMockName}) (214{val=(}) (32 (800{val=undesired}) (235{val=.}) (802{val=getMock}) (216{val=()})) (215{val=)})) (200{val=+}) (45{val=STRING_CONSTANT})) (234{val=,}) (32 (800{val=undesired}) (235{val=.}) (802{val=getLocation}) (216{val=()})) (234{val=,}) (800{val=scenario}) (215{val=)})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Mockito/4/parent/src_org_mockito_exceptions_Reporter.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Reporter () , STRING_CONSTANT , undesired . getLocation () . getLocation () , class , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Reporter () , STRING_CONSTANT , undesired . getLocation () . getLocation () , class , STRING_CONSTANT )
Distance : 18

1
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new InvocationsAnalyzer ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new InvocationsAnalyzer ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 21

2
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new BitSet ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new BitSet ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 21

3
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new DefaultExceptionContext ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new DefaultExceptionContext ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 21

4
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new DefineCallbackReturnCallback ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new DefineCallbackReturnCallback ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 21

5
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , getNativeNumberType ( stmt ) , new Reporter () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , getNativeNumberType ( stmt ) , new Reporter () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

6
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , getNativeNumberType () , new Location () , STRING_CONSTANT , undesired . getLocation () , templateRoot . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , getNativeNumberType () , new Location () , STRING_CONSTANT , undesired . getLocation () , templateRoot . getLocation () , STRING_CONSTANT )
Distance : 15

7
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , getNativeNumberType ( stmt ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , getNativeNumberType ( stmt ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

8
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( LanguageMode.ECMASCRIPT5 ) , new Renamer () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( LanguageMode.ECMASCRIPT5 ) , new Renamer () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

9
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , warning ( undesired . getType () , templateRoot . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , warning ( undesired . getType () , templateRoot . getLocation () ) , false , STRING_CONSTANT )
Distance : 19

10
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( LanguageMode.ECMASCRIPT5 ) , new Reporter () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( LanguageMode.ECMASCRIPT5 ) , new Reporter () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

11
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( LanguageMode.ECMASCRIPT5 ) , new InvocationMarker () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( LanguageMode.ECMASCRIPT5 ) , new InvocationMarker () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

12
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Constant () , STRING_CONSTANT , undesired . getLocation ( ES8 . getLocation () , templateRoot . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Constant () , STRING_CONSTANT , undesired . getLocation ( ES8 . getLocation () , templateRoot . getLocation () ) , false , STRING_CONSTANT )
Distance : 22

13
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation ( ES8 . getLocation () , mockitoMock . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation ( ES8 . getLocation () , mockitoMock . getLocation () ) , false , STRING_CONSTANT )
Distance : 22

14
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , warning ( stmt ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , warning ( stmt ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

15
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation ( ES8 . getLocation () , templateRoot . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation ( ES8 . getLocation () , templateRoot . getLocation () ) , false , STRING_CONSTANT )
Distance : 22

16
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation ( ES8 . getLocation () , ECMASCRIPT5_STRICT . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation ( ES8 . getLocation () , ECMASCRIPT5_STRICT . getLocation () ) , false , STRING_CONSTANT )
Distance : 22

17
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Reporter () , STRING_CONSTANT , undesired . getLocation ( ES8 . getLocation () , templateRoot . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Reporter () , STRING_CONSTANT , undesired . getLocation ( ES8 . getLocation () , templateRoot . getLocation () ) , false , STRING_CONSTANT )
Distance : 22

18
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () . getLocation ( java.util.Locale.US ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () . getLocation ( java.util.Locale.US ) , false , STRING_CONSTANT )
Distance : 20

19
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () . getLocation ( Node.FLAG_LOCAL_RESULTS ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () . getLocation ( Node.FLAG_LOCAL_RESULTS ) , false , STRING_CONSTANT )
Distance : 20

20
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation ( ES8 . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation ( ES8 . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 21

21
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () . getLocation ( FeatureSet.TYPESCRIPT ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () . getLocation ( FeatureSet.TYPESCRIPT ) , false , STRING_CONSTANT )
Distance : 20

22
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Reporter () , STRING_CONSTANT , undesired . getLocation () . getLocation ( java.util.Locale.US ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Reporter () , STRING_CONSTANT , undesired . getLocation () . getLocation ( java.util.Locale.US ) , false , STRING_CONSTANT )
Distance : 20

23
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

24
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () . getLocation ( LanguageMode.ECMASCRIPT8 ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () . getLocation ( LanguageMode.ECMASCRIPT8 ) , false , STRING_CONSTANT )
Distance : 20

25
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Reporter ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Reporter ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

26
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

27
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new Renamer () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new Renamer () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

28
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new InvocationsAnalyzer ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new InvocationsAnalyzer ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

29
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Constant ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Constant ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

30
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new InvocationsAnalyzer () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new InvocationsAnalyzer () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

31
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new BitSet () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new BitSet () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

32
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new DefaultExceptionContext () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new DefaultExceptionContext () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

33
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new DefineCallbackReturnCallback () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new DefineCallbackReturnCallback () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

34
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 21

35
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new InvocationsAnalyzer () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new InvocationsAnalyzer () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Distance : 15

36
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new ReductionGatherer () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new ReductionGatherer () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

37
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new MockitoMethod () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new MockitoMethod () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

38
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Constant () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Constant () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Distance : 15

39
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new Location () . getLocation ( join ( debuggingInfo . getLocation () , templateRoot . getLocation () ) ) , false , STRING_CONSTANT , false , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new Location () . getLocation ( join ( debuggingInfo . getLocation () , templateRoot . getLocation () ) ) , false , STRING_CONSTANT , false , false , STRING_CONSTANT )
Distance : 23

40
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () . getLocation () , class , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () . getLocation () , class , STRING_CONSTANT )
Distance : 19

41
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () . getLocation () , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () . getLocation () , CHAR_CONS , STRING_CONSTANT )
Distance : 18

42
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , warning ( undesired . getType () , templateRoot . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , warning ( undesired . getType () , templateRoot . getLocation () ) , false , STRING_CONSTANT )
Distance : 21

43
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , warning ( undesired . getType () , mockitoMock . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , warning ( undesired . getType () , mockitoMock . getLocation () ) , false , STRING_CONSTANT )
Distance : 19

44
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Reporter () , STRING_CONSTANT , warning ( undesired . getType () , ECMASCRIPT5_STRICT . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Reporter () , STRING_CONSTANT , warning ( undesired . getType () , ECMASCRIPT5_STRICT . getLocation () ) , false , STRING_CONSTANT )
Distance : 19

45
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () . getLocation () , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () . getLocation () , false , STRING_CONSTANT )
Distance : 18

46
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new Location () . getLocation ( join ( debuggingInfo . getLocation () , mockitoMock . getLocation () ) ) , false , STRING_CONSTANT , false , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new Location () . getLocation ( join ( debuggingInfo . getLocation () , mockitoMock . getLocation () ) ) , false , STRING_CONSTANT , false , false , STRING_CONSTANT )
Distance : 23

47
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , warning () , new Es6SyntacticScopeCreator () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , warning () , new Es6SyntacticScopeCreator () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 15

48
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new Location () . getLocation ( join ( cacheMethod . getLocation () , ECMASCRIPT5_STRICT . getLocation () ) ) , false , STRING_CONSTANT , false , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new Location () . getLocation ( join ( cacheMethod . getLocation () , ECMASCRIPT5_STRICT . getLocation () ) ) , false , STRING_CONSTANT , false , false , STRING_CONSTANT )
Distance : 23

49
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new Renamer ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new Renamer ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 21

50
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Reporter () , STRING_CONSTANT , undesired . getLocation () . getLocation () , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Reporter () , STRING_CONSTANT , undesired . getLocation () . getLocation () , CHAR_CONS , STRING_CONSTANT )
Distance : 18

51
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Reporter () , STRING_CONSTANT , undesired . getLocation () . getLocation () , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Reporter () , STRING_CONSTANT , undesired . getLocation () . getLocation () , false , STRING_CONSTANT )
Distance : 18

52
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () . getLocation () , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () . getLocation () , false , STRING_CONSTANT )
Distance : 19

53
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () . getLocation () , class , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () . getLocation () , class , STRING_CONSTANT )
Distance : 18

54
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , getNativeNumberType () , new DoesNothing () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , getNativeNumberType () , new DoesNothing () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 15

55
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , warning () , new DoesNothing () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , warning () , new DoesNothing () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 15

56
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , getNativeNumberType ( stmt ) , new InvocationsAnalyzer () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , getNativeNumberType ( stmt ) , new InvocationsAnalyzer () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

57
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , warning ( stmt ) , new MockitoMethod () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , warning ( stmt ) , new MockitoMethod () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

58
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Reporter () , STRING_CONSTANT , undesired . getLocation () . getLocation ( Node.FLAG_LOCAL_RESULTS ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Reporter () , STRING_CONSTANT , undesired . getLocation () . getLocation ( Node.FLAG_LOCAL_RESULTS ) , false , STRING_CONSTANT )
Distance : 20

59
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , getNativeNumberType ( stmt ) , new MockitoMethod () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , getNativeNumberType ( stmt ) , new MockitoMethod () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

60
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new InvocationsAnalyzer () , STRING_CONSTANT , undesired . getLocation () . getLocation () , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new InvocationsAnalyzer () , STRING_CONSTANT , undesired . getLocation () . getLocation () , CHAR_CONS , STRING_CONSTANT )
Distance : 18

61
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , getNativeNumberType ( stmt ) , new PrintSettings () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , getNativeNumberType ( stmt ) , new PrintSettings () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

62
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( LanguageMode.ECMASCRIPT5 ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( LanguageMode.ECMASCRIPT5 ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

63
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Reporter () , STRING_CONSTANT , undesired . getLocation () . getLocation ( FeatureSet.TYPESCRIPT ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Reporter () , STRING_CONSTANT , undesired . getLocation () . getLocation ( FeatureSet.TYPESCRIPT ) , false , STRING_CONSTANT )
Distance : 20

64
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Reporter () , STRING_CONSTANT , undesired . getLocation () . getLocation ( LanguageMode.ECMASCRIPT8 ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Reporter () , STRING_CONSTANT , undesired . getLocation () . getLocation ( LanguageMode.ECMASCRIPT8 ) , false , STRING_CONSTANT )
Distance : 20

65
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( FeatureSet.ES6 ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( FeatureSet.ES6 ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

66
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( LanguageMode.ECMASCRIPT5 ) , new Constant () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( LanguageMode.ECMASCRIPT5 ) , new Constant () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

67
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new InvocationsAnalyzer () , STRING_CONSTANT , undesired . getLocation () . getLocation () , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new InvocationsAnalyzer () , STRING_CONSTANT , undesired . getLocation () . getLocation () , false , STRING_CONSTANT )
Distance : 18

68
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

69
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Reporter () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Reporter () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

70
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new InvocationsAnalyzer () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new InvocationsAnalyzer () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

71
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , warning ( stmt ) , new Reporter () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , warning ( stmt ) , new Reporter () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

72
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( ProcessDefines.UNKNOWN_DEFINE_WARNING ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( ProcessDefines.UNKNOWN_DEFINE_WARNING ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

73
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( LanguageMode.ECMASCRIPT5 ) , new DefineCallbackReturnCallback () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( LanguageMode.ECMASCRIPT5 ) , new DefineCallbackReturnCallback () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

74
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , getNativeNumberType ( stmt ) , new InvocationsAnalyzer ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , getNativeNumberType ( stmt ) , new InvocationsAnalyzer ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 19

75
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , warning ( stmt ) , new MockitoMethod ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , warning ( stmt ) , new MockitoMethod ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 19

76
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new InvocationsAnalyzer () , STRING_CONSTANT , undesired . getLocation ( ES8 . getLocation () , templateRoot . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new InvocationsAnalyzer () , STRING_CONSTANT , undesired . getLocation ( ES8 . getLocation () , templateRoot . getLocation () ) , false , STRING_CONSTANT )
Distance : 22

77
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new Renamer () , STRING_CONSTANT , warning ( undesired . getType () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new Renamer () , STRING_CONSTANT , warning ( undesired . getType () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 20

78
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Constant () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Constant () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

79
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new InvocationMarker () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new InvocationMarker () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

80
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new InvocationMarker () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new InvocationMarker () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Distance : 15

81
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new MethodsImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new MethodsImpl () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

82
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new JsArrayList () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new JsArrayList () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

83
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation ( ES8 . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation ( ES8 . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 23

84
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , getLastCompiler () , new Location () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , getLastCompiler () , new Location () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 15

85
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new ReductionGatherer () , STRING_CONSTANT , warning ( undesired . getType () , templateRoot . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new ReductionGatherer () , STRING_CONSTANT , warning ( undesired . getType () , templateRoot . getLocation () ) , false , STRING_CONSTANT )
Distance : 21

86
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new MockitoMethod () , STRING_CONSTANT , warning ( undesired . getType () , templateRoot . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new MockitoMethod () , STRING_CONSTANT , warning ( undesired . getType () , templateRoot . getLocation () ) , false , STRING_CONSTANT )
Distance : 21

87
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new MethodsImpl () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new MethodsImpl () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Distance : 15

88
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , getNativeNumberType () , new Es6SyntacticScopeCreator () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , getNativeNumberType () , new Es6SyntacticScopeCreator () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 15

89
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , getNativeNumberType () , new Location () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , getNativeNumberType () , new Location () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 15

90
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation ( ES8 . getLocation () , templateRoot . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation ( ES8 . getLocation () , templateRoot . getLocation () ) , false , STRING_CONSTANT )
Distance : 24

91
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Distance : 15

92
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new DefineCallbackReturnCallback () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new DefineCallbackReturnCallback () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

93
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new InvocationMarker ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new InvocationMarker ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

94
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Reporter () , STRING_CONSTANT , warning ( undesired . getType () , templateRoot . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Reporter () , STRING_CONSTANT , warning ( undesired . getType () , templateRoot . getLocation () ) , false , STRING_CONSTANT )
Distance : 19

95
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new JsArrayList () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new JsArrayList () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Distance : 15

96
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new ReductionGatherer ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new ReductionGatherer ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 21

97
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new MethodsImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new MethodsImpl ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

98
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new JsArrayList ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new JsArrayList ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

99
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () . getLocation () , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () . getLocation () , CHAR_CONS , STRING_CONSTANT )
Distance : 19

100
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new Location () . getLocation ( join ( debuggingInfo . getLocation () , ECMASCRIPT5_STRICT . getLocation () ) ) , false , STRING_CONSTANT , false , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new Location () . getLocation ( join ( debuggingInfo . getLocation () , ECMASCRIPT5_STRICT . getLocation () ) ) , false , STRING_CONSTANT , false , false , STRING_CONSTANT )
Distance : 23

101
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation ( ES8 . getLocation () , ECMASCRIPT5_STRICT . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation ( ES8 . getLocation () , ECMASCRIPT5_STRICT . getLocation () ) , false , STRING_CONSTANT )
Distance : 24

102
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new MockitoMethod ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new MockitoMethod ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 21

103
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Reporter () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Reporter () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Distance : 15

104
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new InvocationMarker () , STRING_CONSTANT , undesired . getLocation ( ES8 . getLocation () , templateRoot . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new InvocationMarker () , STRING_CONSTANT , undesired . getLocation ( ES8 . getLocation () , templateRoot . getLocation () ) , false , STRING_CONSTANT )
Distance : 22

105
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , warning ( undesired . getType () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , warning ( undesired . getType () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 18

106
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new DefineCallbackReturnCallback ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new DefineCallbackReturnCallback ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

107
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new Location () . getLocation ( join ( debuggingInfo . getLocation () , undesired . getLocation () ) ) , false , STRING_CONSTANT , false , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new Location () . getLocation ( join ( debuggingInfo . getLocation () , undesired . getLocation () ) ) , false , STRING_CONSTANT , false , false , STRING_CONSTANT )
Distance : 22

108
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new Renamer () , STRING_CONSTANT , undesired . getLocation () . getLocation () , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new Renamer () , STRING_CONSTANT , undesired . getLocation () . getLocation () , CHAR_CONS , STRING_CONSTANT )
Distance : 19

109
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , warning () , new Location () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , warning () , new Location () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 15

110
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new DefineCallbackReturnCallback () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new DefineCallbackReturnCallback () , STRING_CONSTANT , undesired . getLocation () , false , STRING_CONSTANT )
Distance : 15

111
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Reporter () , STRING_CONSTANT , warning ( undesired . getType () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Reporter () , STRING_CONSTANT , warning ( undesired . getType () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 18

112
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Reporter () , STRING_CONSTANT , warning ( undesired . getType () , mockitoMock . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Reporter () , STRING_CONSTANT , warning ( undesired . getType () , mockitoMock . getLocation () ) , false , STRING_CONSTANT )
Distance : 19

113
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new Location () . getLocation ( join ( method . getLocation () , ECMASCRIPT5_STRICT . getLocation () ) ) , false , STRING_CONSTANT , false , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new Location () . getLocation ( join ( method . getLocation () , ECMASCRIPT5_STRICT . getLocation () ) ) , false , STRING_CONSTANT , false , false , STRING_CONSTANT )
Distance : 23

114
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , getNativeNumberType ( stmt ) , new MockitoMethod ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , getNativeNumberType ( stmt ) , new MockitoMethod ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 19

115
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new Location () . getLocation ( join ( debuggingInfo . getLocation () , ECMASCRIPT5_STRICT . getLocation () ) ) , false , STRING_CONSTANT , false , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new Location () . getLocation ( join ( debuggingInfo . getLocation () , ECMASCRIPT5_STRICT . getLocation () ) ) , false , STRING_CONSTANT , false , super , STRING_CONSTANT )
Distance : 23

116
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () . getLocation ( FeatureSet.TYPESCRIPT ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () . getLocation ( FeatureSet.TYPESCRIPT ) , false , STRING_CONSTANT )
Distance : 21

117
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , getNativeNumberType ( stmt ) , new PrintSettings ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , getNativeNumberType ( stmt ) , new PrintSettings ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 19

118
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , warning ( undesired . getType () , ECMASCRIPT5_STRICT . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , warning ( undesired . getType () , ECMASCRIPT5_STRICT . getLocation () ) , false , STRING_CONSTANT )
Distance : 19

119
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , warning ( stmt ) , new Reporter ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , warning ( stmt ) , new Reporter ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 19

120
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , warning ( undesired . getType () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , warning ( undesired . getType () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 20

121
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , warning ( stmt ) , new RemoveVerifiedInOrder ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , warning ( stmt ) , new RemoveVerifiedInOrder ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 19

122
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () . getLocation ( java.util.Locale.US ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () . getLocation ( java.util.Locale.US ) , false , STRING_CONSTANT )
Distance : 21

123
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new Renamer () , STRING_CONSTANT , undesired . getLocation ( ES8 . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new Renamer () , STRING_CONSTANT , undesired . getLocation ( ES8 . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 23

124
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation ( ES8 . getLocation () , mockitoMock . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation ( ES8 . getLocation () , mockitoMock . getLocation () ) , false , STRING_CONSTANT )
Distance : 24

125
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new MockitoMethod () , STRING_CONSTANT , undesired . getLocation () . getLocation ( FeatureSet.TYPESCRIPT ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new MockitoMethod () , STRING_CONSTANT , undesired . getLocation () . getLocation ( FeatureSet.TYPESCRIPT ) , false , STRING_CONSTANT )
Distance : 21

126
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new Location ( undesired . getMock () , mockitoMock . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , super , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new Location ( undesired . getMock () , mockitoMock . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , super , super , STRING_CONSTANT )
Distance : 23

127
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new Location ( undesired . getType () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , super , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new Location ( undesired . getType () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , super , super , STRING_CONSTANT )
Distance : 23

128
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder ( debuggingInfo . getType () , undesired . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder ( debuggingInfo . getType () , undesired . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Distance : 20

129
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new Location ( undesired . getMock () , ECMASCRIPT5_STRICT . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , super , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new Location ( undesired . getMock () , ECMASCRIPT5_STRICT . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , super , super , STRING_CONSTANT )
Distance : 23

130
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new Location ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , super , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new Location ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , super , false , STRING_CONSTANT )
Distance : 23

131
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , Color.BLACK . getLocation ( undesired ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , Color.BLACK . getLocation ( undesired ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

132
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder ( Reporter . getType () , undesired . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder ( Reporter . getType () , undesired . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Distance : 20

133
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new Location () . getLocation ( join ( undesired . getLocation () , ECMASCRIPT5_STRICT . getLocation () ) ) , false , STRING_CONSTANT , false , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new Location () . getLocation ( join ( undesired . getLocation () , ECMASCRIPT5_STRICT . getLocation () ) ) , false , STRING_CONSTANT , false , false , STRING_CONSTANT )
Distance : 22

134
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new Renamer () , STRING_CONSTANT , undesired . getLocation () . getLocation () , class , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new Renamer () , STRING_CONSTANT , undesired . getLocation () . getLocation () , class , STRING_CONSTANT )
Distance : 19

135
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder ( Reporter . getType () , ECMASCRIPT5_STRICT . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder ( Reporter . getType () , ECMASCRIPT5_STRICT . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Distance : 21

136
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , Color.BLACK . getLocation ( undesired ) , new Renamer () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , Color.BLACK . getLocation ( undesired ) , new Renamer () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

137
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new Renamer () , STRING_CONSTANT , undesired . getLocation ( ES8 . getLocation () , templateRoot . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new Renamer () , STRING_CONSTANT , undesired . getLocation ( ES8 . getLocation () , templateRoot . getLocation () ) , false , STRING_CONSTANT )
Distance : 24

138
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new Renamer () , STRING_CONSTANT , undesired . getLocation ( ES8 . getLocation () , ECMASCRIPT5_STRICT . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new Renamer () , STRING_CONSTANT , undesired . getLocation ( ES8 . getLocation () , ECMASCRIPT5_STRICT . getLocation () ) , false , STRING_CONSTANT )
Distance : 24

139
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . < scenario > anyList () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . < scenario > anyList () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

140
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new Renamer () , STRING_CONSTANT , undesired . getLocation () . getLocation ( FeatureSet.TYPESCRIPT ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new Renamer () , STRING_CONSTANT , undesired . getLocation () . getLocation ( FeatureSet.TYPESCRIPT ) , false , STRING_CONSTANT )
Distance : 21

141
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Reporter () , STRING_CONSTANT , undesired . < scenario > anyList () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Reporter () , STRING_CONSTANT , undesired . < scenario > anyList () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

142
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , Color.BLACK . getLocation ( undesired ) , new MockitoMethod () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , Color.BLACK . getLocation ( undesired ) , new MockitoMethod () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

143
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new ReductionGatherer () , STRING_CONSTANT , undesired . getLocation () . getLocation () , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new ReductionGatherer () , STRING_CONSTANT , undesired . getLocation () . getLocation () , CHAR_CONS , STRING_CONSTANT )
Distance : 19

144
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , Color.BLACK . getLocation ( undesired ) , new ReductionGatherer () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , Color.BLACK . getLocation ( undesired ) , new ReductionGatherer () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

145
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , warning ( undesired . getType () , ECMASCRIPT5_STRICT . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , warning ( undesired . getType () , ECMASCRIPT5_STRICT . getLocation () ) , false , STRING_CONSTANT )
Distance : 21

146
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , Double.POSITIVE_INFINITY . getLocation ( undesired ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , Double.POSITIVE_INFINITY . getLocation ( undesired ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

147
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , Color.BLACK . getLocation ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , Color.BLACK . getLocation ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

148
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , Double.POSITIVE_INFINITY . getLocation ( undesired ) , new MockitoMethod () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , Double.POSITIVE_INFINITY . getLocation ( undesired ) , new MockitoMethod () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

149
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . < P > getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . < P > getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

150
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . < P > anyList () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . < P > anyList () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

151
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () . getLocation ( LanguageMode.ECMASCRIPT8 ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () . getLocation ( LanguageMode.ECMASCRIPT8 ) , false , STRING_CONSTANT )
Distance : 21

152
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , Double.POSITIVE_INFINITY . getLocation ( undesired ) , new Renamer () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , Double.POSITIVE_INFINITY . getLocation ( undesired ) , new Renamer () , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 17

153
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new Renamer () , STRING_CONSTANT , warning ( undesired . getType () , templateRoot . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new Renamer () , STRING_CONSTANT , warning ( undesired . getType () , templateRoot . getLocation () ) , false , STRING_CONSTANT )
Distance : 21

154
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () . getLocation ( Node.FLAG_LOCAL_RESULTS ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . getLocation () . getLocation ( Node.FLAG_LOCAL_RESULTS ) , false , STRING_CONSTANT )
Distance : 21

155
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new Location ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , super , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new Location ( undesired . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , super , super , STRING_CONSTANT )
Distance : 23

156
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new ReductionGatherer () , STRING_CONSTANT , undesired . getLocation ( ES8 . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new ReductionGatherer () , STRING_CONSTANT , undesired . getLocation ( ES8 . getLocation () , undesired . getLocation () ) , false , STRING_CONSTANT )
Distance : 23

157
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new MockitoMethod () , STRING_CONSTANT , undesired . getLocation () . getLocation () , CHAR_CONS , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new MockitoMethod () , STRING_CONSTANT , undesired . getLocation () . getLocation () , CHAR_CONS , STRING_CONSTANT )
Distance : 19

158
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new Renamer () , STRING_CONSTANT , undesired . getLocation () . getLocation ( java.util.Locale.US ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new Renamer () , STRING_CONSTANT , undesired . getLocation () . getLocation ( java.util.Locale.US ) , false , STRING_CONSTANT )
Distance : 21

159
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new ReductionGatherer () , STRING_CONSTANT , undesired . getLocation () . getLocation ( FeatureSet.TYPESCRIPT ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new ReductionGatherer () , STRING_CONSTANT , undesired . getLocation () . getLocation ( FeatureSet.TYPESCRIPT ) , false , STRING_CONSTANT )
Distance : 21

160
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new Location ( ISOChronology . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , super , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new Location ( ISOChronology . getMock () , undesired . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , super , super , STRING_CONSTANT )
Distance : 23

161
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . < ES8 > getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . < ES8 > getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

162
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . < StrategyAndWidth > anyList () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . < StrategyAndWidth > anyList () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

163
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Reporter ( debuggingInfo . getType () , undesired . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Reporter ( debuggingInfo . getType () , undesired . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Distance : 20

164
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , warning ( undesired . getType () , mockitoMock . getLocation () ) , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , warning ( undesired . getType () , mockitoMock . getLocation () ) , false , STRING_CONSTANT )
Distance : 21

165
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new Location ( undesired . getMock () , undesired . getLocation () ) . getLocation ( unstubbedInvocation ) , false , STRING_CONSTANT , super , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new Location ( undesired . getMock () , undesired . getLocation () ) . getLocation ( unstubbedInvocation ) , false , STRING_CONSTANT , super , super , STRING_CONSTANT )
Distance : 23

166
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , getNativeNumberType ( stmt ) , new Reporter ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , getNativeNumberType ( stmt ) , new Reporter ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 19

167
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder ( debuggingInfo . getType () , mockitoMock . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder ( debuggingInfo . getType () , mockitoMock . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Distance : 21

168
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . < scenario > getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . < scenario > getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

169
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Reporter ( Reporter . getType () , undesired . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Reporter ( Reporter . getType () , undesired . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Distance : 20

170
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder ( debuggingInfo . getType () , ECMASCRIPT5_STRICT . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder ( debuggingInfo . getType () , ECMASCRIPT5_STRICT . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Distance : 21

171
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder ( debuggingInfo . getType () , undesired . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder ( debuggingInfo . getType () , undesired . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Distance : 23

172
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new Renamer ( debuggingInfo . getType () , undesired . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new Renamer ( debuggingInfo . getType () , undesired . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Distance : 23

173
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder ( undesired . getType () , ECMASCRIPT5_STRICT . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder ( undesired . getType () , ECMASCRIPT5_STRICT . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Distance : 23

174
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . < P > getLocation ( ES8 ) , unstubbedInvocations . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . < P > getLocation ( ES8 ) , unstubbedInvocations . getLocation () , STRING_CONSTANT )
Distance : 20

175
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . < P > anyList ( ES8 ) , unstubbedInvocations . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . < P > anyList ( ES8 ) , unstubbedInvocations . getLocation () , STRING_CONSTANT )
Distance : 20

176
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , getNativeNumberType ( stmt ) , new RemoveVerifiedInOrder ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , getNativeNumberType ( stmt ) , new RemoveVerifiedInOrder ( NUMBER_CONSTANT , NUMBER_CONSTANT ) , STRING_CONSTANT , undesired . getLocation () , scenario . getLocation () , STRING_CONSTANT )
Distance : 19

177
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Reporter () , STRING_CONSTANT , undesired . < P > anyList () , scenario . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Reporter () , STRING_CONSTANT , undesired . < P > anyList () , scenario . getLocation () , STRING_CONSTANT )
Distance : 18

178
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , new Location ( undesired . getType () , mockitoMock . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , super , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , new Location ( undesired . getType () , mockitoMock . getLocation () ) . getLocation ( undesired ) , false , STRING_CONSTANT , super , super , STRING_CONSTANT )
Distance : 23

179
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder ( undesired . getType () , undesired . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder ( undesired . getType () , undesired . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Distance : 23

180
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder ( debuggingInfo . getType () , mockitoMock . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder ( debuggingInfo . getType () , mockitoMock . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Distance : 24

181
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . < scenario > anyList ( ES8 ) , unstubbedInvocations . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . < scenario > anyList ( ES8 ) , unstubbedInvocations . getLocation () , STRING_CONSTANT )
Distance : 20

182
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder ( Reporter . getType () , mockitoMock . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder ( Reporter . getType () , mockitoMock . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Distance : 21

183
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new Renamer () , STRING_CONSTANT , undesired . getLocation () . getLocation () , false , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new Renamer () , STRING_CONSTANT , undesired . getLocation () . getLocation () , false , STRING_CONSTANT )
Distance : 19

184
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . < ES8 > getLocation ( ES8 ) , unstubbedInvocations . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . < ES8 > getLocation ( ES8 ) , unstubbedInvocations . getLocation () , STRING_CONSTANT )
Distance : 20

185
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . < StrategyAndWidth > anyList ( ES8 ) , unstubbedInvocations . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . < StrategyAndWidth > anyList ( ES8 ) , unstubbedInvocations . getLocation () , STRING_CONSTANT )
Distance : 20

186
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder ( undesired . getType () , mockitoMock . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder ( undesired . getType () , mockitoMock . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Distance : 23

187
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder ( debuggingInfo . getType () , ECMASCRIPT5_STRICT . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder ( debuggingInfo . getType () , ECMASCRIPT5_STRICT . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Distance : 24

188
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . < scenario > getLocation ( ES8 ) , unstubbedInvocations . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . < scenario > getLocation ( ES8 ) , unstubbedInvocations . getLocation () , STRING_CONSTANT )
Distance : 20

189
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Reporter () , STRING_CONSTANT , undesired . < P > anyList ( ES8 ) , unstubbedInvocations . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Reporter () , STRING_CONSTANT , undesired . < P > anyList ( ES8 ) , unstubbedInvocations . getLocation () , STRING_CONSTANT )
Distance : 20

190
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder ( Reporter . getType () , undesired . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder ( Reporter . getType () , undesired . getLocation () ) , STRING_CONSTANT , false , super , STRING_CONSTANT )
Distance : 23

191
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Reporter () , STRING_CONSTANT , undesired . < scenario > anyList ( ES8 ) , unstubbedInvocations . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType () , new Reporter () , STRING_CONSTANT , undesired . < scenario > anyList ( ES8 ) , unstubbedInvocations . getLocation () , STRING_CONSTANT )
Distance : 20

192
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . < scenario > anyList ( ES8 ) , unstubbedInvocations . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . < scenario > anyList ( ES8 ) , unstubbedInvocations . getLocation () , STRING_CONSTANT )
Distance : 22

193
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . < scenario > getLocation ( ES8 ) , unstubbedInvocations . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . < scenario > getLocation ( ES8 ) , unstubbedInvocations . getLocation () , STRING_CONSTANT )
Distance : 22

194
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . < P > getLocation ( ES8 ) , unstubbedInvocations . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . < P > getLocation ( ES8 ) , unstubbedInvocations . getLocation () , STRING_CONSTANT )
Distance : 22

195
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . < ES8 > getLocation ( ES8 ) , unstubbedInvocations . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . < ES8 > getLocation ( ES8 ) , unstubbedInvocations . getLocation () , STRING_CONSTANT )
Distance : 22

196
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new Renamer () , STRING_CONSTANT , undesired . < scenario > anyList ( ES8 ) , unstubbedInvocations . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new Renamer () , STRING_CONSTANT , undesired . < scenario > anyList ( ES8 ) , unstubbedInvocations . getLocation () , STRING_CONSTANT )
Distance : 22

197
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . < RealPointValuePair > getLocation ( ES8 ) , unstubbedInvocations . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . < RealPointValuePair > getLocation ( ES8 ) , unstubbedInvocations . getLocation () , STRING_CONSTANT )
Distance : 22

198
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new Renamer () , STRING_CONSTANT , undesired . < scenario > getLocation ( ES8 ) , unstubbedInvocations . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new Renamer () , STRING_CONSTANT , undesired . < scenario > getLocation ( ES8 ) , unstubbedInvocations . getLocation () , STRING_CONSTANT )
Distance : 22

199
Tree	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . < StrategyAndWidth > getLocation ( ES8 ) , unstubbedInvocations . getLocation () , STRING_CONSTANT )
Code	join ( STRING_CONSTANT , STRING_CONSTANT , undesired . getType ( debuggingInfo ) , new RemoveVerifiedInOrder () , STRING_CONSTANT , undesired . < StrategyAndWidth > getLocation ( ES8 ) , unstubbedInvocations . getLocation () , STRING_CONSTANT )
Distance : 22

========================================================================


========================================================================
Example Number: 110
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return computeCovarianceMatrix ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return computeCovarianceMatrix ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 5

1
Tree	return NUMBER_CONSTANT / endIndex ;
Code	return NUMBER_CONSTANT / endIndex ;
Distance : 10

2
Tree	return iZone . fieldWasInitializedUsingContructorArgs ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . fieldWasInitializedUsingContructorArgs ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

3
Tree	return ! iZone . htmlEscape ( localInstant ) && <= ;
Code	return ! iZone . htmlEscape ( localInstant ) && <= ;
Distance : 7

4
Tree	return ! iChrono && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Code	return ! iChrono && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Distance : 9

5
Tree	return ! iZone && ! iZone . htmlEscape ( localInstant ) ;
Code	return ! iZone && ! iZone . htmlEscape ( localInstant ) ;
Distance : 9

6
Tree	return retrieveLineSegments ( namespaceToRequire , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return retrieveLineSegments ( namespaceToRequire , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 6

7
Tree	return ! iZone . defaultReturnValues ( localInstant ) && <= ;
Code	return ! iZone . defaultReturnValues ( localInstant ) && <= ;
Distance : 7

8
Tree	return compilerExecutor != com.google.protobuf.GeneratedMessageV3 ;
Code	return compilerExecutor != com.google.protobuf.GeneratedMessageV3 ;
Distance : 10

9
Tree	return ( ( namespaceToRequire ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( namespaceToRequire ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

10
Tree	return iZone . htmlEscape ( localInstant ) ;
Code	return iZone . htmlEscape ( localInstant ) ;
Distance : 5

11
Tree	return iZone . fieldWasInitializedUsingContructorArgs ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . fieldWasInitializedUsingContructorArgs ( STRING_CONSTANT , localInstant ) ;
Distance : 5

12
Tree	return decamelizeMatcher ( localInstant , UTF_8 , false ) ;
Code	return decamelizeMatcher ( localInstant , UTF_8 , false ) ;
Distance : 5

13
Tree	return ( ( actualInvocationStackTrace ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( actualInvocationStackTrace ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

14
Tree	return NUMBER_CONSTANT / iPrinter ;
Code	return NUMBER_CONSTANT / iPrinter ;
Distance : 10

15
Tree	return ! iChrono && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Code	return ! iChrono && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Distance : 10

16
Tree	return iZone != TimeUnit.SECONDS ;
Code	return iZone != TimeUnit.SECONDS ;
Distance : 9

17
Tree	return ! iZone && ! iZone . htmlEscape () ;
Code	return ! iZone && ! iZone . htmlEscape () ;
Distance : 10

18
Tree	return computeCovarianceMatrix ( localInstant , UTF_8 ) ;
Code	return computeCovarianceMatrix ( localInstant , UTF_8 ) ;
Distance : 6

19
Tree	return iZone . htmlEscape ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . htmlEscape ( STRING_CONSTANT , localInstant ) ;
Distance : 5

20
Tree	return retrieveLineSegments ( localInstant , sampleStats2 ) ;
Code	return retrieveLineSegments ( localInstant , sampleStats2 ) ;
Distance : 6

21
Tree	return retrieveLineSegments ( namespaceToRequire , UTF_8 ) ;
Code	return retrieveLineSegments ( namespaceToRequire , UTF_8 ) ;
Distance : 7

22
Tree	return NUMBER_CONSTANT / iOffsetParsed ;
Code	return NUMBER_CONSTANT / iOffsetParsed ;
Distance : 10

23
Tree	return ! iZone . htmlEscape ( localInstant ) && : ;
Code	return ! iZone . htmlEscape ( localInstant ) && : ;
Distance : 7

24
Tree	return ! iZone && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Code	return ! iZone && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Distance : 10

25
Tree	return defaultReturnValues ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return defaultReturnValues ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 5

26
Tree	return iZone . defaultReturnValues ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . defaultReturnValues ( STRING_CONSTANT , localInstant ) ;
Distance : 5

27
Tree	return iZone . getMockitoInterceptor ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . getMockitoInterceptor ( STRING_CONSTANT , localInstant ) ;
Distance : 5

28
Tree	return computeCovarianceMatrix ( localInstant , sampleStats2 ) ;
Code	return computeCovarianceMatrix ( localInstant , sampleStats2 ) ;
Distance : 6

29
Tree	return ( ( namespaceToRequire ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( namespaceToRequire ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

30
Tree	return decamelizeMatcher ( this , localInstant ) ;
Code	return decamelizeMatcher ( this , localInstant ) ;
Distance : 7

31
Tree	return retrieveLineSegments ( this , groupIndex ) ;
Code	return retrieveLineSegments ( this , groupIndex ) ;
Distance : 7

32
Tree	return computeCovarianceMatrix ( localInstant , UTF_8 , clazz ) ;
Code	return computeCovarianceMatrix ( localInstant , UTF_8 , clazz ) ;
Distance : 5

33
Tree	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 ) ;
Code	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 ) ;
Distance : 7

34
Tree	return computeCovarianceMatrix ( actualInvocationStackTrace , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return computeCovarianceMatrix ( actualInvocationStackTrace , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 6

35
Tree	return ( ( localInstant ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( localInstant ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

36
Tree	return iZone . defaultReturnValues ( null , populationSize , checkedFeatures , null ) ;
Code	return iZone . defaultReturnValues ( null , populationSize , checkedFeatures , null ) ;
Distance : 6

37
Tree	return iZone . stubber ( localInstant ) ;
Code	return iZone . stubber ( localInstant ) ;
Distance : 5

38
Tree	return retrieveLineSegments ( localInstant , UTF_8 , clazz , iZone ) ;
Code	return retrieveLineSegments ( localInstant , UTF_8 , clazz , iZone ) ;
Distance : 7

39
Tree	return iZone . defaultReturnValues ( localInstant , false ) ;
Code	return iZone . defaultReturnValues ( localInstant , false ) ;
Distance : 3

40
Tree	return iZone . htmlEscape ( localInstant , false ) ;
Code	return iZone . htmlEscape ( localInstant , false ) ;
Distance : 3

41
Tree	return defaultReturnValues ( this , localInstant ) ;
Code	return defaultReturnValues ( this , localInstant ) ;
Distance : 7

42
Tree	return iZone . defaultReturnValues ( NUMBER_CONSTANT , iPrinter ) ;
Code	return iZone . defaultReturnValues ( NUMBER_CONSTANT , iPrinter ) ;
Distance : 5

43
Tree	return ( ( zeroOffsetText ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( zeroOffsetText ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

44
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

45
Tree	return computeCovarianceMatrix ( this , groupIndex ) ;
Code	return computeCovarianceMatrix ( this , groupIndex ) ;
Distance : 7

46
Tree	return ! FieldUtils && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Code	return ! FieldUtils && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Distance : 10

47
Tree	return iZone . getImageMap ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . getImageMap ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

48
Tree	return NUMBER_CONSTANT / FieldUtils ;
Code	return NUMBER_CONSTANT / FieldUtils ;
Distance : 10

49
Tree	return iZone . createArgumentsAreDifferentException ( localInstant , false ) ;
Code	return iZone . createArgumentsAreDifferentException ( localInstant , false ) ;
Distance : 3

50
Tree	return iZone . getTimeInstance ( localInstant , false ) ;
Code	return iZone . getTimeInstance ( localInstant , false ) ;
Distance : 3

51
Tree	return iZone . createArgumentsAreDifferentException ( localInstant , UTF_8 , null ) ;
Code	return iZone . createArgumentsAreDifferentException ( localInstant , UTF_8 , null ) ;
Distance : 3

52
Tree	return iZone . defaultReturnValues ( STRING_CONSTANT , subtype ) ;
Code	return iZone . defaultReturnValues ( STRING_CONSTANT , subtype ) ;
Distance : 5

53
Tree	return iZone . defaultReturnValues ( this , localInstant ) ;
Code	return iZone . defaultReturnValues ( this , localInstant ) ;
Distance : 5

54
Tree	return iZone . defaultReturnValues ( actualInvocationStackTrace , false ) ;
Code	return iZone . defaultReturnValues ( actualInvocationStackTrace , false ) ;
Distance : 4

55
Tree	return retrieveLineSegments ( localInstant , sampleStats2 , clazz ) ;
Code	return retrieveLineSegments ( localInstant , sampleStats2 , clazz ) ;
Distance : 5

56
Tree	return retrieveLineSegments ( localInstant , UTF_8 ) ;
Code	return retrieveLineSegments ( localInstant , UTF_8 ) ;
Distance : 6

57
Tree	return iZone . createArgumentsAreDifferentException ( localInstant ) ;
Code	return iZone . createArgumentsAreDifferentException ( localInstant ) ;
Distance : 5

58
Tree	return iZone . getTimeInstance ( localInstant ) ;
Code	return iZone . getTimeInstance ( localInstant ) ;
Distance : 5

59
Tree	return iZone . fieldWasInitializedUsingContructorArgs ( localInstant , false ) ;
Code	return iZone . fieldWasInitializedUsingContructorArgs ( localInstant , false ) ;
Distance : 3

60
Tree	return iZone . getMockitoInterceptor ( localInstant , false ) ;
Code	return iZone . getMockitoInterceptor ( localInstant , false ) ;
Distance : 3

61
Tree	return iZone . defaultReturnValues ( RendererChangeListener , false ) ;
Code	return iZone . defaultReturnValues ( RendererChangeListener , false ) ;
Distance : 4

62
Tree	return iChrono != iZone ;
Code	return iChrono != iZone ;
Distance : 10

63
Tree	return iZone . getMockitoInterceptor ( localInstant ) ;
Code	return iZone . getMockitoInterceptor ( localInstant ) ;
Distance : 5

64
Tree	return iChrono != com.google.protobuf.GeneratedMessageV3 ;
Code	return iChrono != com.google.protobuf.GeneratedMessageV3 ;
Distance : 10

65
Tree	return iZone . defaultReturnValues ( this , zeroOffsetText ) ;
Code	return iZone . defaultReturnValues ( this , zeroOffsetText ) ;
Distance : 5

66
Tree	return iZone . defaultReturnValues ( this , drawShapesCheckBox ) ;
Code	return iZone . defaultReturnValues ( this , drawShapesCheckBox ) ;
Distance : 5

67
Tree	return ( ( NodeSubject ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( NodeSubject ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

68
Tree	return ! iZone && ! iZone . invokeSuper () ;
Code	return ! iZone && ! iZone . invokeSuper () ;
Distance : 10

69
Tree	return iZone . defaultReturnValues ( RendererChangeListener ) ;
Code	return iZone . defaultReturnValues ( RendererChangeListener ) ;
Distance : 6

70
Tree	return retrieveLineSegments ( this , zeroOffsetText ) ;
Code	return retrieveLineSegments ( this , zeroOffsetText ) ;
Distance : 7

71
Tree	return retrieveLineSegments ( namespaceToRequire , UTF_8 , clazz , iZone ) ;
Code	return retrieveLineSegments ( namespaceToRequire , UTF_8 , clazz , iZone ) ;
Distance : 7

72
Tree	return ( ( localInstant ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( localInstant ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

73
Tree	return iZone . htmlEscape ( this , localInstant ) ;
Code	return iZone . htmlEscape ( this , localInstant ) ;
Distance : 5

74
Tree	return iZone . defaultReturnValues ( STRING_CONSTANT , populationSize ) ;
Code	return iZone . defaultReturnValues ( STRING_CONSTANT , populationSize ) ;
Distance : 5

75
Tree	return iPrinter != iZone ;
Code	return iPrinter != iZone ;
Distance : 10

76
Tree	return iZone != endIndex ;
Code	return iZone != endIndex ;
Distance : 9

77
Tree	return computeCovarianceMatrix ( localInstant , sampleStats2 , clazz , iZone ) ;
Code	return computeCovarianceMatrix ( localInstant , sampleStats2 , clazz , iZone ) ;
Distance : 7

78
Tree	return iZone . defaultReturnValues ( actualInvocationStackTrace , UTF_8 , null ) ;
Code	return iZone . defaultReturnValues ( actualInvocationStackTrace , UTF_8 , null ) ;
Distance : 4

79
Tree	return iZone . createArgumentsAreDifferentException ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . createArgumentsAreDifferentException ( STRING_CONSTANT , localInstant ) ;
Distance : 5

80
Tree	return ( ( actualInvocationStackTrace ) localInstant ) . getStubbingLookupListeners ( localInstant , EMPTY ) ;
Code	return ( ( actualInvocationStackTrace ) localInstant ) . getStubbingLookupListeners ( localInstant , EMPTY ) ;
Distance : 10

81
Tree	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Code	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Distance : 9

82
Tree	return retrieveLineSegments ( localInstant , UTF_8 , false ) ;
Code	return retrieveLineSegments ( localInstant , UTF_8 , false ) ;
Distance : 5

83
Tree	return iOffsetParsed != iZone ;
Code	return iOffsetParsed != iZone ;
Distance : 10

84
Tree	return iZone . rangeAxisLocations ( localInstant ) ;
Code	return iZone . rangeAxisLocations ( localInstant ) ;
Distance : 5

85
Tree	return retrieveLineSegments ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Code	return retrieveLineSegments ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Distance : 5

86
Tree	return ! iZone && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Code	return ! iZone && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Distance : 9

87
Tree	return iZone . getTimeInstance ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . getTimeInstance ( STRING_CONSTANT , localInstant ) ;
Distance : 5

88
Tree	return iZone . createArgumentsAreDifferentException ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . createArgumentsAreDifferentException ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

89
Tree	return iPrinter != com.google.protobuf.GeneratedMessageV3 ;
Code	return iPrinter != com.google.protobuf.GeneratedMessageV3 ;
Distance : 10

90
Tree	return ( ( namespaceToRequire ) localInstant ) . getPeriod ( localInstant , UTF_8 ) ;
Code	return ( ( namespaceToRequire ) localInstant ) . getPeriod ( localInstant , UTF_8 ) ;
Distance : 10

91
Tree	return iZone . getTimeInstance ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . getTimeInstance ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

92
Tree	return iZone . ExceptionFactory ( localInstant ) ;
Code	return iZone . ExceptionFactory ( localInstant ) ;
Distance : 5

93
Tree	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 ) ;
Code	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 ) ;
Distance : 7

94
Tree	return computeCovarianceMatrix ( localInstant , UTF_8 , false ) ;
Code	return computeCovarianceMatrix ( localInstant , UTF_8 , false ) ;
Distance : 5

95
Tree	return NUMBER_CONSTANT / iZone ;
Code	return NUMBER_CONSTANT / iZone ;
Distance : 10

96
Tree	return iOffsetParsed != com.google.protobuf.GeneratedMessageV3 ;
Code	return iOffsetParsed != com.google.protobuf.GeneratedMessageV3 ;
Distance : 10

97
Tree	return iZone . defaultReturnValues ( localInstant , UTF_8 , null ) ;
Code	return iZone . defaultReturnValues ( localInstant , UTF_8 , null ) ;
Distance : 3

98
Tree	return iZone . defaultReturnValues ( this , subtype ) ;
Code	return iZone . defaultReturnValues ( this , subtype ) ;
Distance : 5

99
Tree	return iZone . defaultReturnValues ( this , groupIndex ) ;
Code	return iZone . defaultReturnValues ( this , groupIndex ) ;
Distance : 5

100
Tree	return NUMBER_CONSTANT / iChrono ;
Code	return NUMBER_CONSTANT / iChrono ;
Distance : 10

101
Tree	return retrieveLineSegments ( localInstant , sampleStats2 , false ) ;
Code	return retrieveLineSegments ( localInstant , sampleStats2 , false ) ;
Distance : 5

102
Tree	return decamelizeMatcher ( localInstant , UTF_8 ) ;
Code	return decamelizeMatcher ( localInstant , UTF_8 ) ;
Distance : 6

103
Tree	return ! FieldUtils && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Code	return ! FieldUtils && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Distance : 9

104
Tree	return retrieveLineSegments ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return retrieveLineSegments ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 5

105
Tree	return iZone . createArgumentsAreDifferentException ( this , localInstant ) ;
Code	return iZone . createArgumentsAreDifferentException ( this , localInstant ) ;
Distance : 5

106
Tree	return ( ( namespaceToRequire ) this ) . getStubbingLookupListeners ( localInstant , EMPTY ) ;
Code	return ( ( namespaceToRequire ) this ) . getStubbingLookupListeners ( localInstant , EMPTY ) ;
Distance : 10

107
Tree	return iZone . htmlEscape ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . htmlEscape ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

108
Tree	return retrieveLineSegments ( namespaceToRequire , UTF_8 , false ) ;
Code	return retrieveLineSegments ( namespaceToRequire , UTF_8 , false ) ;
Distance : 6

109
Tree	return computeCovarianceMatrix ( localInstant , sampleStats2 , false ) ;
Code	return computeCovarianceMatrix ( localInstant , sampleStats2 , false ) ;
Distance : 5

110
Tree	return iZone . htmlEscape ( this , zeroOffsetText ) ;
Code	return iZone . htmlEscape ( this , zeroOffsetText ) ;
Distance : 5

111
Tree	return NUMBER_CONSTANT / ChronologyType ;
Code	return NUMBER_CONSTANT / ChronologyType ;
Distance : 10

112
Tree	return iZone . defaultReturnValues ( localInstant ) ;
Code	return iZone . defaultReturnValues ( localInstant ) ;
Distance : 5

113
Tree	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 , false ) ;
Code	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 , false ) ;
Distance : 6

114
Tree	return ( ( namespaceToRequire ) this ) . makeStackTracesClean ( localInstant , UTF_8 ) ;
Code	return ( ( namespaceToRequire ) this ) . makeStackTracesClean ( localInstant , UTF_8 ) ;
Distance : 10

115
Tree	return ( ( crosshairState ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( crosshairState ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

116
Tree	return iZone . defaultReturnValues ( actualInvocationStackTrace ) ;
Code	return iZone . defaultReturnValues ( actualInvocationStackTrace ) ;
Distance : 6

117
Tree	return iZone . defaultReturnValues ( localInstant , UTF_8 ) ;
Code	return iZone . defaultReturnValues ( localInstant , UTF_8 ) ;
Distance : 4

118
Tree	return iZone . getMockitoInterceptor ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . getMockitoInterceptor ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

119
Tree	return iZone . defaultReturnValues ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . defaultReturnValues ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

120
Tree	return iZone != iPrinter ;
Code	return iZone != iPrinter ;
Distance : 9

121
Tree	return iZone . fieldWasInitializedUsingContructorArgs ( localInstant ) ;
Code	return iZone . fieldWasInitializedUsingContructorArgs ( localInstant ) ;
Distance : 5

122
Tree	return NUMBER_CONSTANT / compilerExecutor ;
Code	return NUMBER_CONSTANT / compilerExecutor ;
Distance : 10

123
Tree	return endIndex != iZone ;
Code	return endIndex != iZone ;
Distance : 10

124
Tree	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 , false ) ;
Code	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 , false ) ;
Distance : 6

125
Tree	return retrieveLineSegments ( actualInvocationStackTrace , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return retrieveLineSegments ( actualInvocationStackTrace , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 6

126
Tree	return ( ( actualInvocationStackTrace ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( actualInvocationStackTrace ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

127
Tree	return iZone . defaultReturnValues ( localInstant , sample2 ) ;
Code	return iZone . defaultReturnValues ( localInstant , sample2 ) ;
Distance : 4

128
Tree	return computeCovarianceMatrix ( localInstant , UTF_8 , clazz , iZone ) ;
Code	return computeCovarianceMatrix ( localInstant , UTF_8 , clazz , iZone ) ;
Distance : 7

129
Tree	return iZone . defaultReturnValues ( localInstant , sampleStats2 ) ;
Code	return iZone . defaultReturnValues ( localInstant , sampleStats2 ) ;
Distance : 4

130
Tree	return computeCovarianceMatrix ( namespaceToRequire , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return computeCovarianceMatrix ( namespaceToRequire , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 6

131
Tree	return retrieveLineSegments ( localInstant , UTF_8 , clazz ) ;
Code	return retrieveLineSegments ( localInstant , UTF_8 , clazz ) ;
Distance : 5

132
Tree	return iZone != AllowedSolutions.ANY_SIDE ;
Code	return iZone != AllowedSolutions.ANY_SIDE ;
Distance : 9

133
Tree	return iZone . getTimeInstance ( localInstant , UTF_8 , null ) ;
Code	return iZone . getTimeInstance ( localInstant , UTF_8 , null ) ;
Distance : 3

134
Tree	return ( ( namespaceToRequire ) localInstant ) . getStubbingLookupListeners ( localInstant , EMPTY ) ;
Code	return ( ( namespaceToRequire ) localInstant ) . getStubbingLookupListeners ( localInstant , EMPTY ) ;
Distance : 10

135
Tree	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 , clazz ) ;
Code	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 , clazz ) ;
Distance : 6

136
Tree	return decamelizeMatcher ( localInstant , UTF_8 , clazz ) ;
Code	return decamelizeMatcher ( localInstant , UTF_8 , clazz ) ;
Distance : 5

137
Tree	return ! iOffsetParsed && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Code	return ! iOffsetParsed && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Distance : 10

138
Tree	return endIndex != com.google.protobuf.GeneratedMessageV3 ;
Code	return endIndex != com.google.protobuf.GeneratedMessageV3 ;
Distance : 10

139
Tree	return retrieveLineSegments ( localInstant , sampleStats2 , clazz , iZone ) ;
Code	return retrieveLineSegments ( localInstant , sampleStats2 , clazz , iZone ) ;
Distance : 7

140
Tree	return iZone . _isMinimize ( localInstant ) ;
Code	return iZone . _isMinimize ( localInstant ) ;
Distance : 5

141
Tree	return ! iZone . defaultReturnValues ( localInstant ) && : ;
Code	return ! iZone . defaultReturnValues ( localInstant ) && : ;
Distance : 7

142
Tree	return createArgumentsAreDifferentException ( this , localInstant ) ;
Code	return createArgumentsAreDifferentException ( this , localInstant ) ;
Distance : 7

143
Tree	return ! iZone . htmlEscape ( localInstant ) && ^ ;
Code	return ! iZone . htmlEscape ( localInstant ) && ^ ;
Distance : 7

144
Tree	return ! iZone && ! iZone . getPropertyReservedNamingFirstChars () ;
Code	return ! iZone && ! iZone . getPropertyReservedNamingFirstChars () ;
Distance : 10

145
Tree	return retrieveLineSegments ( namespaceToRequire , UTF_8 , clazz ) ;
Code	return retrieveLineSegments ( namespaceToRequire , UTF_8 , clazz ) ;
Distance : 6

146
Tree	return computeCovarianceMatrix ( localInstant , sampleStats2 , clazz ) ;
Code	return computeCovarianceMatrix ( localInstant , sampleStats2 , clazz ) ;
Distance : 5

147
Tree	return ! FieldUtils . htmlEscape ( localInstant ) && <= ;
Code	return ! FieldUtils . htmlEscape ( localInstant ) && <= ;
Distance : 8

148
Tree	return iZone . htmlEscape ( localInstant , UTF_8 , null ) ;
Code	return iZone . htmlEscape ( localInstant , UTF_8 , null ) ;
Distance : 3

149
Tree	return ! iZone && ! iZone . getPropertyReservedNamingFirstChars ( localInstant ) ;
Code	return ! iZone && ! iZone . getPropertyReservedNamingFirstChars ( localInstant ) ;
Distance : 9

150
Tree	return iZone . rangeAxisLocations ( actualInvocationStackTrace ) ;
Code	return iZone . rangeAxisLocations ( actualInvocationStackTrace ) ;
Distance : 6

151
Tree	return iZone . subtype ( localInstant ) ;
Code	return iZone . subtype ( localInstant ) ;
Distance : 5

152
Tree	return iZone . boxPaint ( localInstant ) ;
Code	return iZone . boxPaint ( localInstant ) ;
Distance : 5

153
Tree	return ! iZone && ! iZone . invokeSuper ( localInstant ) ;
Code	return ! iZone && ! iZone . invokeSuper ( localInstant ) ;
Distance : 9

154
Tree	return iZone . fakeReturnValues ( localInstant ) ;
Code	return iZone . fakeReturnValues ( localInstant ) ;
Distance : 5

155
Tree	return retrieveLineSegments ( this , localInstant ) ;
Code	return retrieveLineSegments ( this , localInstant ) ;
Distance : 7

156
Tree	return ! iZone . defaultReturnValues ( localInstant ) && ^ ;
Code	return ! iZone . defaultReturnValues ( localInstant ) && ^ ;
Distance : 7

157
Tree	return decamelizeMatcher ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return decamelizeMatcher ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 5

158
Tree	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 , clazz , iZone ) ;
Code	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 , clazz , iZone ) ;
Distance : 7

159
Tree	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 , clazz , iZone ) ;
Code	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 , clazz , iZone ) ;
Distance : 7

160
Tree	return decamelizeMatcher ( localInstant , UTF_8 , clazz , iZone ) ;
Code	return decamelizeMatcher ( localInstant , UTF_8 , clazz , iZone ) ;
Distance : 7

161
Tree	return computeCovarianceMatrix ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Code	return computeCovarianceMatrix ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Distance : 5

162
Tree	return iZone . defaultReturnValues ( localInstant , CSV_SEARCH_CHARS , null ) ;
Code	return iZone . defaultReturnValues ( localInstant , CSV_SEARCH_CHARS , null ) ;
Distance : 3

163
Tree	return iZone . createArgumentsAreDifferentException ( localInstant , UTF_8 ) ;
Code	return iZone . createArgumentsAreDifferentException ( localInstant , UTF_8 ) ;
Distance : 4

164
Tree	return ! FieldUtils && ! iZone . htmlEscape ( localInstant ) ;
Code	return ! FieldUtils && ! iZone . htmlEscape ( localInstant ) ;
Distance : 9

165
Tree	return ( ( zeroOffsetText ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( zeroOffsetText ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

166
Tree	return computeCovarianceMatrix ( this , localInstant ) ;
Code	return computeCovarianceMatrix ( this , localInstant ) ;
Distance : 7

167
Tree	return iZone . defaultReturnValues ( localInstant , sample2 , null ) ;
Code	return iZone . defaultReturnValues ( localInstant , sample2 , null ) ;
Distance : 3

168
Tree	return ! FieldUtils && ! iZone . htmlEscape () ;
Code	return ! FieldUtils && ! iZone . htmlEscape () ;
Distance : 10

169
Tree	return iZone . getTimeInstance ( localInstant , UTF_8 ) ;
Code	return iZone . getTimeInstance ( localInstant , UTF_8 ) ;
Distance : 4

170
Tree	return iZone . defaultReturnValues ( localInstant , sampleStats2 , null ) ;
Code	return iZone . defaultReturnValues ( localInstant , sampleStats2 , null ) ;
Distance : 3

171
Tree	return iZone != vd ;
Code	return iZone != vd ;
Distance : 9

172
Tree	return ! FieldUtils . defaultReturnValues ( localInstant ) && <= ;
Code	return ! FieldUtils . defaultReturnValues ( localInstant ) && <= ;
Distance : 8

173
Tree	return iZone . htmlEscape ( localInstant , UTF_8 ) ;
Code	return iZone . htmlEscape ( localInstant , UTF_8 ) ;
Distance : 4

174
Tree	return ! iOffsetParsed && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Code	return ! iOffsetParsed && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Distance : 9

175
Tree	return ( ( actualInvocationStackTrace ) localInstant ) . getPeriod ( localInstant , UTF_8 ) ;
Code	return ( ( actualInvocationStackTrace ) localInstant ) . getPeriod ( localInstant , UTF_8 ) ;
Distance : 10

176
Tree	return iZone . defaultReturnValues ( null , populationSize , EMPTY , null ) ;
Code	return iZone . defaultReturnValues ( null , populationSize , EMPTY , null ) ;
Distance : 6

177
Tree	return retrieveLineSegments ( namespaceToRequire , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Code	return retrieveLineSegments ( namespaceToRequire , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Distance : 6

178
Tree	return retrieveLineSegments ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , TimeUnit.SECONDS ) ;
Code	return retrieveLineSegments ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , TimeUnit.SECONDS ) ;
Distance : 5

179
Tree	return retrieveLineSegments ( actualInvocationStackTrace , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Code	return retrieveLineSegments ( actualInvocationStackTrace , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Distance : 6

180
Tree	return computeCovarianceMatrix ( namespaceToRequire , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Code	return computeCovarianceMatrix ( namespaceToRequire , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Distance : 6

181
Tree	return decamelizeMatcher ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Code	return decamelizeMatcher ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Distance : 5

182
Tree	return iZone . defaultReturnValues ( actualInvocationStackTrace , UTF_8 ) ;
Code	return iZone . defaultReturnValues ( actualInvocationStackTrace , UTF_8 ) ;
Distance : 5

183
Tree	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 , clazz ) ;
Code	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 , clazz ) ;
Distance : 6

184
Tree	return computeCovarianceMatrix ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , TimeUnit.SECONDS ) ;
Code	return computeCovarianceMatrix ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , TimeUnit.SECONDS ) ;
Distance : 5

185
Tree	return iZone . htmlEscape ( null , populationSize , checkedFeatures , null ) ;
Code	return iZone . htmlEscape ( null , populationSize , checkedFeatures , null ) ;
Distance : 6

186
Tree	return iZone . defaultReturnValues ( null , populationSize , sample2 , null ) ;
Code	return iZone . defaultReturnValues ( null , populationSize , sample2 , null ) ;
Distance : 6

187
Tree	return iZone . defaultReturnValues ( localInstant , CSV_SEARCH_CHARS ) ;
Code	return iZone . defaultReturnValues ( localInstant , CSV_SEARCH_CHARS ) ;
Distance : 4

188
Tree	return iZone . defaultReturnValues ( null , populationSize , clazz , null ) ;
Code	return iZone . defaultReturnValues ( null , populationSize , clazz , null ) ;
Distance : 6

189
Tree	return iZone . defaultReturnValues ( null , populationSize , extensionRegistry , null ) ;
Code	return iZone . defaultReturnValues ( null , populationSize , extensionRegistry , null ) ;
Distance : 6

190
Tree	return iZone . defaultReturnValues ( null , populationSize , wantedCount , null ) ;
Code	return iZone . defaultReturnValues ( null , populationSize , wantedCount , null ) ;
Distance : 6

191
Tree	return iZone != null iZone ? ;
Code	return iZone != null iZone ? ;
Distance : 9

192
Tree	return endIndex != null iZone ? ;
Code	return endIndex != null iZone ? ;
Distance : 10

193
Tree	return iChrono != null iZone ? ;
Code	return iChrono != null iZone ? ;
Distance : 10

194
Tree	return iPrinter != null iZone ? ;
Code	return iPrinter != null iZone ? ;
Distance : 10

195
Tree	return iZone . defaultReturnValues ( null , populationSize , sampleStats2 , null ) ;
Code	return iZone . defaultReturnValues ( null , populationSize , sampleStats2 , null ) ;
Distance : 6

196
Tree	return iOffsetParsed != null iZone ? ;
Code	return iOffsetParsed != null iZone ? ;
Distance : 10

197
Tree	return compilerExecutor != null iZone ? ;
Code	return compilerExecutor != null iZone ? ;
Distance : 10

198
Tree	return iZone != null iZone / ;
Code	return iZone != null iZone / ;
Distance : 9

199
Tree	return FieldUtils != null iZone ? ;
Code	return FieldUtils != null iZone ? ;
Distance : 10

========================================================================


========================================================================
Example Number: 111
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return computeCovarianceMatrix ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return computeCovarianceMatrix ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 5

1
Tree	return NUMBER_CONSTANT / endIndex ;
Code	return NUMBER_CONSTANT / endIndex ;
Distance : 10

2
Tree	return iZone . fieldWasInitializedUsingContructorArgs ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . fieldWasInitializedUsingContructorArgs ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

3
Tree	return ! iZone . htmlEscape ( localInstant ) && <= ;
Code	return ! iZone . htmlEscape ( localInstant ) && <= ;
Distance : 7

4
Tree	return ! iChrono && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Code	return ! iChrono && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Distance : 9

5
Tree	return ! iZone && ! iZone . htmlEscape ( localInstant ) ;
Code	return ! iZone && ! iZone . htmlEscape ( localInstant ) ;
Distance : 9

6
Tree	return retrieveLineSegments ( namespaceToRequire , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return retrieveLineSegments ( namespaceToRequire , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 6

7
Tree	return ! iZone . defaultReturnValues ( localInstant ) && <= ;
Code	return ! iZone . defaultReturnValues ( localInstant ) && <= ;
Distance : 7

8
Tree	return compilerExecutor != com.google.protobuf.GeneratedMessageV3 ;
Code	return compilerExecutor != com.google.protobuf.GeneratedMessageV3 ;
Distance : 10

9
Tree	return ( ( namespaceToRequire ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( namespaceToRequire ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

10
Tree	return iZone . htmlEscape ( localInstant ) ;
Code	return iZone . htmlEscape ( localInstant ) ;
Distance : 5

11
Tree	return iZone . fieldWasInitializedUsingContructorArgs ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . fieldWasInitializedUsingContructorArgs ( STRING_CONSTANT , localInstant ) ;
Distance : 5

12
Tree	return decamelizeMatcher ( localInstant , UTF_8 , false ) ;
Code	return decamelizeMatcher ( localInstant , UTF_8 , false ) ;
Distance : 5

13
Tree	return ( ( actualInvocationStackTrace ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( actualInvocationStackTrace ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

14
Tree	return NUMBER_CONSTANT / iPrinter ;
Code	return NUMBER_CONSTANT / iPrinter ;
Distance : 10

15
Tree	return ! iChrono && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Code	return ! iChrono && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Distance : 10

16
Tree	return iZone != TimeUnit.SECONDS ;
Code	return iZone != TimeUnit.SECONDS ;
Distance : 9

17
Tree	return ! iZone && ! iZone . htmlEscape () ;
Code	return ! iZone && ! iZone . htmlEscape () ;
Distance : 10

18
Tree	return computeCovarianceMatrix ( localInstant , UTF_8 ) ;
Code	return computeCovarianceMatrix ( localInstant , UTF_8 ) ;
Distance : 6

19
Tree	return iZone . htmlEscape ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . htmlEscape ( STRING_CONSTANT , localInstant ) ;
Distance : 5

20
Tree	return retrieveLineSegments ( localInstant , sampleStats2 ) ;
Code	return retrieveLineSegments ( localInstant , sampleStats2 ) ;
Distance : 6

21
Tree	return retrieveLineSegments ( namespaceToRequire , UTF_8 ) ;
Code	return retrieveLineSegments ( namespaceToRequire , UTF_8 ) ;
Distance : 7

22
Tree	return NUMBER_CONSTANT / iOffsetParsed ;
Code	return NUMBER_CONSTANT / iOffsetParsed ;
Distance : 10

23
Tree	return ! iZone . htmlEscape ( localInstant ) && : ;
Code	return ! iZone . htmlEscape ( localInstant ) && : ;
Distance : 7

24
Tree	return ! iZone && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Code	return ! iZone && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Distance : 10

25
Tree	return defaultReturnValues ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return defaultReturnValues ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 5

26
Tree	return iZone . defaultReturnValues ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . defaultReturnValues ( STRING_CONSTANT , localInstant ) ;
Distance : 5

27
Tree	return iZone . getMockitoInterceptor ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . getMockitoInterceptor ( STRING_CONSTANT , localInstant ) ;
Distance : 5

28
Tree	return computeCovarianceMatrix ( localInstant , sampleStats2 ) ;
Code	return computeCovarianceMatrix ( localInstant , sampleStats2 ) ;
Distance : 6

29
Tree	return ( ( namespaceToRequire ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( namespaceToRequire ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

30
Tree	return decamelizeMatcher ( this , localInstant ) ;
Code	return decamelizeMatcher ( this , localInstant ) ;
Distance : 7

31
Tree	return retrieveLineSegments ( this , groupIndex ) ;
Code	return retrieveLineSegments ( this , groupIndex ) ;
Distance : 7

32
Tree	return computeCovarianceMatrix ( localInstant , UTF_8 , clazz ) ;
Code	return computeCovarianceMatrix ( localInstant , UTF_8 , clazz ) ;
Distance : 5

33
Tree	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 ) ;
Code	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 ) ;
Distance : 7

34
Tree	return computeCovarianceMatrix ( actualInvocationStackTrace , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return computeCovarianceMatrix ( actualInvocationStackTrace , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 6

35
Tree	return ( ( localInstant ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( localInstant ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

36
Tree	return iZone . defaultReturnValues ( null , populationSize , checkedFeatures , null ) ;
Code	return iZone . defaultReturnValues ( null , populationSize , checkedFeatures , null ) ;
Distance : 6

37
Tree	return iZone . stubber ( localInstant ) ;
Code	return iZone . stubber ( localInstant ) ;
Distance : 5

38
Tree	return retrieveLineSegments ( localInstant , UTF_8 , clazz , iZone ) ;
Code	return retrieveLineSegments ( localInstant , UTF_8 , clazz , iZone ) ;
Distance : 7

39
Tree	return iZone . defaultReturnValues ( localInstant , false ) ;
Code	return iZone . defaultReturnValues ( localInstant , false ) ;
Distance : 3

40
Tree	return iZone . htmlEscape ( localInstant , false ) ;
Code	return iZone . htmlEscape ( localInstant , false ) ;
Distance : 3

41
Tree	return defaultReturnValues ( this , localInstant ) ;
Code	return defaultReturnValues ( this , localInstant ) ;
Distance : 7

42
Tree	return iZone . defaultReturnValues ( NUMBER_CONSTANT , iPrinter ) ;
Code	return iZone . defaultReturnValues ( NUMBER_CONSTANT , iPrinter ) ;
Distance : 5

43
Tree	return ( ( zeroOffsetText ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( zeroOffsetText ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

44
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

45
Tree	return computeCovarianceMatrix ( this , groupIndex ) ;
Code	return computeCovarianceMatrix ( this , groupIndex ) ;
Distance : 7

46
Tree	return ! FieldUtils && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Code	return ! FieldUtils && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Distance : 10

47
Tree	return iZone . getImageMap ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . getImageMap ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

48
Tree	return NUMBER_CONSTANT / FieldUtils ;
Code	return NUMBER_CONSTANT / FieldUtils ;
Distance : 10

49
Tree	return iZone . createArgumentsAreDifferentException ( localInstant , false ) ;
Code	return iZone . createArgumentsAreDifferentException ( localInstant , false ) ;
Distance : 3

50
Tree	return iZone . getTimeInstance ( localInstant , false ) ;
Code	return iZone . getTimeInstance ( localInstant , false ) ;
Distance : 3

51
Tree	return iZone . createArgumentsAreDifferentException ( localInstant , UTF_8 , null ) ;
Code	return iZone . createArgumentsAreDifferentException ( localInstant , UTF_8 , null ) ;
Distance : 3

52
Tree	return iZone . defaultReturnValues ( STRING_CONSTANT , subtype ) ;
Code	return iZone . defaultReturnValues ( STRING_CONSTANT , subtype ) ;
Distance : 5

53
Tree	return iZone . defaultReturnValues ( this , localInstant ) ;
Code	return iZone . defaultReturnValues ( this , localInstant ) ;
Distance : 5

54
Tree	return iZone . defaultReturnValues ( actualInvocationStackTrace , false ) ;
Code	return iZone . defaultReturnValues ( actualInvocationStackTrace , false ) ;
Distance : 4

55
Tree	return retrieveLineSegments ( localInstant , sampleStats2 , clazz ) ;
Code	return retrieveLineSegments ( localInstant , sampleStats2 , clazz ) ;
Distance : 5

56
Tree	return retrieveLineSegments ( localInstant , UTF_8 ) ;
Code	return retrieveLineSegments ( localInstant , UTF_8 ) ;
Distance : 6

57
Tree	return iZone . createArgumentsAreDifferentException ( localInstant ) ;
Code	return iZone . createArgumentsAreDifferentException ( localInstant ) ;
Distance : 5

58
Tree	return iZone . getTimeInstance ( localInstant ) ;
Code	return iZone . getTimeInstance ( localInstant ) ;
Distance : 5

59
Tree	return iZone . fieldWasInitializedUsingContructorArgs ( localInstant , false ) ;
Code	return iZone . fieldWasInitializedUsingContructorArgs ( localInstant , false ) ;
Distance : 3

60
Tree	return iZone . getMockitoInterceptor ( localInstant , false ) ;
Code	return iZone . getMockitoInterceptor ( localInstant , false ) ;
Distance : 3

61
Tree	return iZone . defaultReturnValues ( RendererChangeListener , false ) ;
Code	return iZone . defaultReturnValues ( RendererChangeListener , false ) ;
Distance : 4

62
Tree	return iChrono != iZone ;
Code	return iChrono != iZone ;
Distance : 10

63
Tree	return iZone . getMockitoInterceptor ( localInstant ) ;
Code	return iZone . getMockitoInterceptor ( localInstant ) ;
Distance : 5

64
Tree	return iChrono != com.google.protobuf.GeneratedMessageV3 ;
Code	return iChrono != com.google.protobuf.GeneratedMessageV3 ;
Distance : 10

65
Tree	return iZone . defaultReturnValues ( this , zeroOffsetText ) ;
Code	return iZone . defaultReturnValues ( this , zeroOffsetText ) ;
Distance : 5

66
Tree	return iZone . defaultReturnValues ( this , drawShapesCheckBox ) ;
Code	return iZone . defaultReturnValues ( this , drawShapesCheckBox ) ;
Distance : 5

67
Tree	return ( ( NodeSubject ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( NodeSubject ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

68
Tree	return ! iZone && ! iZone . invokeSuper () ;
Code	return ! iZone && ! iZone . invokeSuper () ;
Distance : 10

69
Tree	return iZone . defaultReturnValues ( RendererChangeListener ) ;
Code	return iZone . defaultReturnValues ( RendererChangeListener ) ;
Distance : 6

70
Tree	return retrieveLineSegments ( this , zeroOffsetText ) ;
Code	return retrieveLineSegments ( this , zeroOffsetText ) ;
Distance : 7

71
Tree	return retrieveLineSegments ( namespaceToRequire , UTF_8 , clazz , iZone ) ;
Code	return retrieveLineSegments ( namespaceToRequire , UTF_8 , clazz , iZone ) ;
Distance : 7

72
Tree	return ( ( localInstant ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( localInstant ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

73
Tree	return iZone . htmlEscape ( this , localInstant ) ;
Code	return iZone . htmlEscape ( this , localInstant ) ;
Distance : 5

74
Tree	return iZone . defaultReturnValues ( STRING_CONSTANT , populationSize ) ;
Code	return iZone . defaultReturnValues ( STRING_CONSTANT , populationSize ) ;
Distance : 5

75
Tree	return iPrinter != iZone ;
Code	return iPrinter != iZone ;
Distance : 10

76
Tree	return iZone != endIndex ;
Code	return iZone != endIndex ;
Distance : 9

77
Tree	return computeCovarianceMatrix ( localInstant , sampleStats2 , clazz , iZone ) ;
Code	return computeCovarianceMatrix ( localInstant , sampleStats2 , clazz , iZone ) ;
Distance : 7

78
Tree	return iZone . defaultReturnValues ( actualInvocationStackTrace , UTF_8 , null ) ;
Code	return iZone . defaultReturnValues ( actualInvocationStackTrace , UTF_8 , null ) ;
Distance : 4

79
Tree	return iZone . createArgumentsAreDifferentException ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . createArgumentsAreDifferentException ( STRING_CONSTANT , localInstant ) ;
Distance : 5

80
Tree	return ( ( actualInvocationStackTrace ) localInstant ) . getStubbingLookupListeners ( localInstant , EMPTY ) ;
Code	return ( ( actualInvocationStackTrace ) localInstant ) . getStubbingLookupListeners ( localInstant , EMPTY ) ;
Distance : 10

81
Tree	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Code	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Distance : 9

82
Tree	return retrieveLineSegments ( localInstant , UTF_8 , false ) ;
Code	return retrieveLineSegments ( localInstant , UTF_8 , false ) ;
Distance : 5

83
Tree	return iOffsetParsed != iZone ;
Code	return iOffsetParsed != iZone ;
Distance : 10

84
Tree	return iZone . rangeAxisLocations ( localInstant ) ;
Code	return iZone . rangeAxisLocations ( localInstant ) ;
Distance : 5

85
Tree	return retrieveLineSegments ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Code	return retrieveLineSegments ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Distance : 5

86
Tree	return ! iZone && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Code	return ! iZone && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Distance : 9

87
Tree	return iZone . getTimeInstance ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . getTimeInstance ( STRING_CONSTANT , localInstant ) ;
Distance : 5

88
Tree	return iZone . createArgumentsAreDifferentException ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . createArgumentsAreDifferentException ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

89
Tree	return iPrinter != com.google.protobuf.GeneratedMessageV3 ;
Code	return iPrinter != com.google.protobuf.GeneratedMessageV3 ;
Distance : 10

90
Tree	return ( ( namespaceToRequire ) localInstant ) . getPeriod ( localInstant , UTF_8 ) ;
Code	return ( ( namespaceToRequire ) localInstant ) . getPeriod ( localInstant , UTF_8 ) ;
Distance : 10

91
Tree	return iZone . getTimeInstance ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . getTimeInstance ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

92
Tree	return iZone . ExceptionFactory ( localInstant ) ;
Code	return iZone . ExceptionFactory ( localInstant ) ;
Distance : 5

93
Tree	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 ) ;
Code	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 ) ;
Distance : 7

94
Tree	return computeCovarianceMatrix ( localInstant , UTF_8 , false ) ;
Code	return computeCovarianceMatrix ( localInstant , UTF_8 , false ) ;
Distance : 5

95
Tree	return NUMBER_CONSTANT / iZone ;
Code	return NUMBER_CONSTANT / iZone ;
Distance : 10

96
Tree	return iOffsetParsed != com.google.protobuf.GeneratedMessageV3 ;
Code	return iOffsetParsed != com.google.protobuf.GeneratedMessageV3 ;
Distance : 10

97
Tree	return iZone . defaultReturnValues ( localInstant , UTF_8 , null ) ;
Code	return iZone . defaultReturnValues ( localInstant , UTF_8 , null ) ;
Distance : 3

98
Tree	return iZone . defaultReturnValues ( this , subtype ) ;
Code	return iZone . defaultReturnValues ( this , subtype ) ;
Distance : 5

99
Tree	return iZone . defaultReturnValues ( this , groupIndex ) ;
Code	return iZone . defaultReturnValues ( this , groupIndex ) ;
Distance : 5

100
Tree	return NUMBER_CONSTANT / iChrono ;
Code	return NUMBER_CONSTANT / iChrono ;
Distance : 10

101
Tree	return retrieveLineSegments ( localInstant , sampleStats2 , false ) ;
Code	return retrieveLineSegments ( localInstant , sampleStats2 , false ) ;
Distance : 5

102
Tree	return decamelizeMatcher ( localInstant , UTF_8 ) ;
Code	return decamelizeMatcher ( localInstant , UTF_8 ) ;
Distance : 6

103
Tree	return ! FieldUtils && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Code	return ! FieldUtils && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Distance : 9

104
Tree	return retrieveLineSegments ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return retrieveLineSegments ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 5

105
Tree	return iZone . createArgumentsAreDifferentException ( this , localInstant ) ;
Code	return iZone . createArgumentsAreDifferentException ( this , localInstant ) ;
Distance : 5

106
Tree	return ( ( namespaceToRequire ) this ) . getStubbingLookupListeners ( localInstant , EMPTY ) ;
Code	return ( ( namespaceToRequire ) this ) . getStubbingLookupListeners ( localInstant , EMPTY ) ;
Distance : 10

107
Tree	return iZone . htmlEscape ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . htmlEscape ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

108
Tree	return retrieveLineSegments ( namespaceToRequire , UTF_8 , false ) ;
Code	return retrieveLineSegments ( namespaceToRequire , UTF_8 , false ) ;
Distance : 6

109
Tree	return computeCovarianceMatrix ( localInstant , sampleStats2 , false ) ;
Code	return computeCovarianceMatrix ( localInstant , sampleStats2 , false ) ;
Distance : 5

110
Tree	return iZone . htmlEscape ( this , zeroOffsetText ) ;
Code	return iZone . htmlEscape ( this , zeroOffsetText ) ;
Distance : 5

111
Tree	return NUMBER_CONSTANT / ChronologyType ;
Code	return NUMBER_CONSTANT / ChronologyType ;
Distance : 10

112
Tree	return iZone . defaultReturnValues ( localInstant ) ;
Code	return iZone . defaultReturnValues ( localInstant ) ;
Distance : 5

113
Tree	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 , false ) ;
Code	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 , false ) ;
Distance : 6

114
Tree	return ( ( namespaceToRequire ) this ) . makeStackTracesClean ( localInstant , UTF_8 ) ;
Code	return ( ( namespaceToRequire ) this ) . makeStackTracesClean ( localInstant , UTF_8 ) ;
Distance : 10

115
Tree	return ( ( crosshairState ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( crosshairState ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

116
Tree	return iZone . defaultReturnValues ( actualInvocationStackTrace ) ;
Code	return iZone . defaultReturnValues ( actualInvocationStackTrace ) ;
Distance : 6

117
Tree	return iZone . defaultReturnValues ( localInstant , UTF_8 ) ;
Code	return iZone . defaultReturnValues ( localInstant , UTF_8 ) ;
Distance : 4

118
Tree	return iZone . getMockitoInterceptor ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . getMockitoInterceptor ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

119
Tree	return iZone . defaultReturnValues ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . defaultReturnValues ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

120
Tree	return iZone != iPrinter ;
Code	return iZone != iPrinter ;
Distance : 9

121
Tree	return iZone . fieldWasInitializedUsingContructorArgs ( localInstant ) ;
Code	return iZone . fieldWasInitializedUsingContructorArgs ( localInstant ) ;
Distance : 5

122
Tree	return NUMBER_CONSTANT / compilerExecutor ;
Code	return NUMBER_CONSTANT / compilerExecutor ;
Distance : 10

123
Tree	return endIndex != iZone ;
Code	return endIndex != iZone ;
Distance : 10

124
Tree	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 , false ) ;
Code	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 , false ) ;
Distance : 6

125
Tree	return retrieveLineSegments ( actualInvocationStackTrace , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return retrieveLineSegments ( actualInvocationStackTrace , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 6

126
Tree	return ( ( actualInvocationStackTrace ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( actualInvocationStackTrace ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

127
Tree	return iZone . defaultReturnValues ( localInstant , sample2 ) ;
Code	return iZone . defaultReturnValues ( localInstant , sample2 ) ;
Distance : 4

128
Tree	return computeCovarianceMatrix ( localInstant , UTF_8 , clazz , iZone ) ;
Code	return computeCovarianceMatrix ( localInstant , UTF_8 , clazz , iZone ) ;
Distance : 7

129
Tree	return iZone . defaultReturnValues ( localInstant , sampleStats2 ) ;
Code	return iZone . defaultReturnValues ( localInstant , sampleStats2 ) ;
Distance : 4

130
Tree	return computeCovarianceMatrix ( namespaceToRequire , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return computeCovarianceMatrix ( namespaceToRequire , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 6

131
Tree	return retrieveLineSegments ( localInstant , UTF_8 , clazz ) ;
Code	return retrieveLineSegments ( localInstant , UTF_8 , clazz ) ;
Distance : 5

132
Tree	return iZone != AllowedSolutions.ANY_SIDE ;
Code	return iZone != AllowedSolutions.ANY_SIDE ;
Distance : 9

133
Tree	return iZone . getTimeInstance ( localInstant , UTF_8 , null ) ;
Code	return iZone . getTimeInstance ( localInstant , UTF_8 , null ) ;
Distance : 3

134
Tree	return ( ( namespaceToRequire ) localInstant ) . getStubbingLookupListeners ( localInstant , EMPTY ) ;
Code	return ( ( namespaceToRequire ) localInstant ) . getStubbingLookupListeners ( localInstant , EMPTY ) ;
Distance : 10

135
Tree	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 , clazz ) ;
Code	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 , clazz ) ;
Distance : 6

136
Tree	return decamelizeMatcher ( localInstant , UTF_8 , clazz ) ;
Code	return decamelizeMatcher ( localInstant , UTF_8 , clazz ) ;
Distance : 5

137
Tree	return ! iOffsetParsed && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Code	return ! iOffsetParsed && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Distance : 10

138
Tree	return endIndex != com.google.protobuf.GeneratedMessageV3 ;
Code	return endIndex != com.google.protobuf.GeneratedMessageV3 ;
Distance : 10

139
Tree	return retrieveLineSegments ( localInstant , sampleStats2 , clazz , iZone ) ;
Code	return retrieveLineSegments ( localInstant , sampleStats2 , clazz , iZone ) ;
Distance : 7

140
Tree	return iZone . _isMinimize ( localInstant ) ;
Code	return iZone . _isMinimize ( localInstant ) ;
Distance : 5

141
Tree	return ! iZone . defaultReturnValues ( localInstant ) && : ;
Code	return ! iZone . defaultReturnValues ( localInstant ) && : ;
Distance : 7

142
Tree	return createArgumentsAreDifferentException ( this , localInstant ) ;
Code	return createArgumentsAreDifferentException ( this , localInstant ) ;
Distance : 7

143
Tree	return ! iZone . htmlEscape ( localInstant ) && ^ ;
Code	return ! iZone . htmlEscape ( localInstant ) && ^ ;
Distance : 7

144
Tree	return ! iZone && ! iZone . getPropertyReservedNamingFirstChars () ;
Code	return ! iZone && ! iZone . getPropertyReservedNamingFirstChars () ;
Distance : 10

145
Tree	return retrieveLineSegments ( namespaceToRequire , UTF_8 , clazz ) ;
Code	return retrieveLineSegments ( namespaceToRequire , UTF_8 , clazz ) ;
Distance : 6

146
Tree	return computeCovarianceMatrix ( localInstant , sampleStats2 , clazz ) ;
Code	return computeCovarianceMatrix ( localInstant , sampleStats2 , clazz ) ;
Distance : 5

147
Tree	return ! FieldUtils . htmlEscape ( localInstant ) && <= ;
Code	return ! FieldUtils . htmlEscape ( localInstant ) && <= ;
Distance : 8

148
Tree	return iZone . htmlEscape ( localInstant , UTF_8 , null ) ;
Code	return iZone . htmlEscape ( localInstant , UTF_8 , null ) ;
Distance : 3

149
Tree	return ! iZone && ! iZone . getPropertyReservedNamingFirstChars ( localInstant ) ;
Code	return ! iZone && ! iZone . getPropertyReservedNamingFirstChars ( localInstant ) ;
Distance : 9

150
Tree	return iZone . rangeAxisLocations ( actualInvocationStackTrace ) ;
Code	return iZone . rangeAxisLocations ( actualInvocationStackTrace ) ;
Distance : 6

151
Tree	return iZone . subtype ( localInstant ) ;
Code	return iZone . subtype ( localInstant ) ;
Distance : 5

152
Tree	return iZone . boxPaint ( localInstant ) ;
Code	return iZone . boxPaint ( localInstant ) ;
Distance : 5

153
Tree	return ! iZone && ! iZone . invokeSuper ( localInstant ) ;
Code	return ! iZone && ! iZone . invokeSuper ( localInstant ) ;
Distance : 9

154
Tree	return iZone . fakeReturnValues ( localInstant ) ;
Code	return iZone . fakeReturnValues ( localInstant ) ;
Distance : 5

155
Tree	return retrieveLineSegments ( this , localInstant ) ;
Code	return retrieveLineSegments ( this , localInstant ) ;
Distance : 7

156
Tree	return ! iZone . defaultReturnValues ( localInstant ) && ^ ;
Code	return ! iZone . defaultReturnValues ( localInstant ) && ^ ;
Distance : 7

157
Tree	return decamelizeMatcher ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return decamelizeMatcher ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 5

158
Tree	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 , clazz , iZone ) ;
Code	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 , clazz , iZone ) ;
Distance : 7

159
Tree	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 , clazz , iZone ) ;
Code	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 , clazz , iZone ) ;
Distance : 7

160
Tree	return decamelizeMatcher ( localInstant , UTF_8 , clazz , iZone ) ;
Code	return decamelizeMatcher ( localInstant , UTF_8 , clazz , iZone ) ;
Distance : 7

161
Tree	return computeCovarianceMatrix ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Code	return computeCovarianceMatrix ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Distance : 5

162
Tree	return iZone . defaultReturnValues ( localInstant , CSV_SEARCH_CHARS , null ) ;
Code	return iZone . defaultReturnValues ( localInstant , CSV_SEARCH_CHARS , null ) ;
Distance : 3

163
Tree	return iZone . createArgumentsAreDifferentException ( localInstant , UTF_8 ) ;
Code	return iZone . createArgumentsAreDifferentException ( localInstant , UTF_8 ) ;
Distance : 4

164
Tree	return ! FieldUtils && ! iZone . htmlEscape ( localInstant ) ;
Code	return ! FieldUtils && ! iZone . htmlEscape ( localInstant ) ;
Distance : 9

165
Tree	return ( ( zeroOffsetText ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( zeroOffsetText ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

166
Tree	return computeCovarianceMatrix ( this , localInstant ) ;
Code	return computeCovarianceMatrix ( this , localInstant ) ;
Distance : 7

167
Tree	return iZone . defaultReturnValues ( localInstant , sample2 , null ) ;
Code	return iZone . defaultReturnValues ( localInstant , sample2 , null ) ;
Distance : 3

168
Tree	return ! FieldUtils && ! iZone . htmlEscape () ;
Code	return ! FieldUtils && ! iZone . htmlEscape () ;
Distance : 10

169
Tree	return iZone . getTimeInstance ( localInstant , UTF_8 ) ;
Code	return iZone . getTimeInstance ( localInstant , UTF_8 ) ;
Distance : 4

170
Tree	return iZone . defaultReturnValues ( localInstant , sampleStats2 , null ) ;
Code	return iZone . defaultReturnValues ( localInstant , sampleStats2 , null ) ;
Distance : 3

171
Tree	return iZone != vd ;
Code	return iZone != vd ;
Distance : 9

172
Tree	return ! FieldUtils . defaultReturnValues ( localInstant ) && <= ;
Code	return ! FieldUtils . defaultReturnValues ( localInstant ) && <= ;
Distance : 8

173
Tree	return iZone . htmlEscape ( localInstant , UTF_8 ) ;
Code	return iZone . htmlEscape ( localInstant , UTF_8 ) ;
Distance : 4

174
Tree	return ! iOffsetParsed && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Code	return ! iOffsetParsed && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Distance : 9

175
Tree	return ( ( actualInvocationStackTrace ) localInstant ) . getPeriod ( localInstant , UTF_8 ) ;
Code	return ( ( actualInvocationStackTrace ) localInstant ) . getPeriod ( localInstant , UTF_8 ) ;
Distance : 10

176
Tree	return iZone . defaultReturnValues ( null , populationSize , EMPTY , null ) ;
Code	return iZone . defaultReturnValues ( null , populationSize , EMPTY , null ) ;
Distance : 6

177
Tree	return retrieveLineSegments ( namespaceToRequire , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Code	return retrieveLineSegments ( namespaceToRequire , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Distance : 6

178
Tree	return retrieveLineSegments ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , TimeUnit.SECONDS ) ;
Code	return retrieveLineSegments ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , TimeUnit.SECONDS ) ;
Distance : 5

179
Tree	return retrieveLineSegments ( actualInvocationStackTrace , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Code	return retrieveLineSegments ( actualInvocationStackTrace , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Distance : 6

180
Tree	return computeCovarianceMatrix ( namespaceToRequire , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Code	return computeCovarianceMatrix ( namespaceToRequire , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Distance : 6

181
Tree	return decamelizeMatcher ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Code	return decamelizeMatcher ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Distance : 5

182
Tree	return iZone . defaultReturnValues ( actualInvocationStackTrace , UTF_8 ) ;
Code	return iZone . defaultReturnValues ( actualInvocationStackTrace , UTF_8 ) ;
Distance : 5

183
Tree	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 , clazz ) ;
Code	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 , clazz ) ;
Distance : 6

184
Tree	return computeCovarianceMatrix ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , TimeUnit.SECONDS ) ;
Code	return computeCovarianceMatrix ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , TimeUnit.SECONDS ) ;
Distance : 5

185
Tree	return iZone . htmlEscape ( null , populationSize , checkedFeatures , null ) ;
Code	return iZone . htmlEscape ( null , populationSize , checkedFeatures , null ) ;
Distance : 6

186
Tree	return iZone . defaultReturnValues ( null , populationSize , sample2 , null ) ;
Code	return iZone . defaultReturnValues ( null , populationSize , sample2 , null ) ;
Distance : 6

187
Tree	return iZone . defaultReturnValues ( localInstant , CSV_SEARCH_CHARS ) ;
Code	return iZone . defaultReturnValues ( localInstant , CSV_SEARCH_CHARS ) ;
Distance : 4

188
Tree	return iZone . defaultReturnValues ( null , populationSize , clazz , null ) ;
Code	return iZone . defaultReturnValues ( null , populationSize , clazz , null ) ;
Distance : 6

189
Tree	return iZone . defaultReturnValues ( null , populationSize , extensionRegistry , null ) ;
Code	return iZone . defaultReturnValues ( null , populationSize , extensionRegistry , null ) ;
Distance : 6

190
Tree	return iZone . defaultReturnValues ( null , populationSize , wantedCount , null ) ;
Code	return iZone . defaultReturnValues ( null , populationSize , wantedCount , null ) ;
Distance : 6

191
Tree	return iZone != null iZone ? ;
Code	return iZone != null iZone ? ;
Distance : 9

192
Tree	return endIndex != null iZone ? ;
Code	return endIndex != null iZone ? ;
Distance : 10

193
Tree	return iChrono != null iZone ? ;
Code	return iChrono != null iZone ? ;
Distance : 10

194
Tree	return iPrinter != null iZone ? ;
Code	return iPrinter != null iZone ? ;
Distance : 10

195
Tree	return iZone . defaultReturnValues ( null , populationSize , sampleStats2 , null ) ;
Code	return iZone . defaultReturnValues ( null , populationSize , sampleStats2 , null ) ;
Distance : 6

196
Tree	return iOffsetParsed != null iZone ? ;
Code	return iOffsetParsed != null iZone ? ;
Distance : 10

197
Tree	return compilerExecutor != null iZone ? ;
Code	return compilerExecutor != null iZone ? ;
Distance : 10

198
Tree	return iZone != null iZone / ;
Code	return iZone != null iZone / ;
Distance : 9

199
Tree	return FieldUtils != null iZone ? ;
Code	return FieldUtils != null iZone ? ;
Distance : 10

========================================================================


========================================================================
Example Number: 112
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return computeCovarianceMatrix ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return computeCovarianceMatrix ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 5

1
Tree	return NUMBER_CONSTANT / endIndex ;
Code	return NUMBER_CONSTANT / endIndex ;
Distance : 10

2
Tree	return iZone . fieldWasInitializedUsingContructorArgs ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . fieldWasInitializedUsingContructorArgs ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

3
Tree	return ! iZone . htmlEscape ( localInstant ) && <= ;
Code	return ! iZone . htmlEscape ( localInstant ) && <= ;
Distance : 7

4
Tree	return ! iChrono && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Code	return ! iChrono && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Distance : 9

5
Tree	return ! iZone && ! iZone . htmlEscape ( localInstant ) ;
Code	return ! iZone && ! iZone . htmlEscape ( localInstant ) ;
Distance : 9

6
Tree	return retrieveLineSegments ( namespaceToRequire , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return retrieveLineSegments ( namespaceToRequire , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 6

7
Tree	return ! iZone . defaultReturnValues ( localInstant ) && <= ;
Code	return ! iZone . defaultReturnValues ( localInstant ) && <= ;
Distance : 7

8
Tree	return compilerExecutor != com.google.protobuf.GeneratedMessageV3 ;
Code	return compilerExecutor != com.google.protobuf.GeneratedMessageV3 ;
Distance : 10

9
Tree	return ( ( namespaceToRequire ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( namespaceToRequire ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

10
Tree	return iZone . htmlEscape ( localInstant ) ;
Code	return iZone . htmlEscape ( localInstant ) ;
Distance : 5

11
Tree	return iZone . fieldWasInitializedUsingContructorArgs ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . fieldWasInitializedUsingContructorArgs ( STRING_CONSTANT , localInstant ) ;
Distance : 5

12
Tree	return decamelizeMatcher ( localInstant , UTF_8 , false ) ;
Code	return decamelizeMatcher ( localInstant , UTF_8 , false ) ;
Distance : 5

13
Tree	return ( ( actualInvocationStackTrace ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( actualInvocationStackTrace ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

14
Tree	return NUMBER_CONSTANT / iPrinter ;
Code	return NUMBER_CONSTANT / iPrinter ;
Distance : 10

15
Tree	return ! iChrono && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Code	return ! iChrono && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Distance : 10

16
Tree	return iZone != TimeUnit.SECONDS ;
Code	return iZone != TimeUnit.SECONDS ;
Distance : 9

17
Tree	return ! iZone && ! iZone . htmlEscape () ;
Code	return ! iZone && ! iZone . htmlEscape () ;
Distance : 10

18
Tree	return computeCovarianceMatrix ( localInstant , UTF_8 ) ;
Code	return computeCovarianceMatrix ( localInstant , UTF_8 ) ;
Distance : 6

19
Tree	return iZone . htmlEscape ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . htmlEscape ( STRING_CONSTANT , localInstant ) ;
Distance : 5

20
Tree	return retrieveLineSegments ( localInstant , sampleStats2 ) ;
Code	return retrieveLineSegments ( localInstant , sampleStats2 ) ;
Distance : 6

21
Tree	return retrieveLineSegments ( namespaceToRequire , UTF_8 ) ;
Code	return retrieveLineSegments ( namespaceToRequire , UTF_8 ) ;
Distance : 7

22
Tree	return NUMBER_CONSTANT / iOffsetParsed ;
Code	return NUMBER_CONSTANT / iOffsetParsed ;
Distance : 10

23
Tree	return ! iZone . htmlEscape ( localInstant ) && : ;
Code	return ! iZone . htmlEscape ( localInstant ) && : ;
Distance : 7

24
Tree	return ! iZone && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Code	return ! iZone && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Distance : 10

25
Tree	return defaultReturnValues ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return defaultReturnValues ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 5

26
Tree	return iZone . defaultReturnValues ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . defaultReturnValues ( STRING_CONSTANT , localInstant ) ;
Distance : 5

27
Tree	return iZone . getMockitoInterceptor ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . getMockitoInterceptor ( STRING_CONSTANT , localInstant ) ;
Distance : 5

28
Tree	return computeCovarianceMatrix ( localInstant , sampleStats2 ) ;
Code	return computeCovarianceMatrix ( localInstant , sampleStats2 ) ;
Distance : 6

29
Tree	return ( ( namespaceToRequire ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( namespaceToRequire ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

30
Tree	return decamelizeMatcher ( this , localInstant ) ;
Code	return decamelizeMatcher ( this , localInstant ) ;
Distance : 7

31
Tree	return retrieveLineSegments ( this , groupIndex ) ;
Code	return retrieveLineSegments ( this , groupIndex ) ;
Distance : 7

32
Tree	return computeCovarianceMatrix ( localInstant , UTF_8 , clazz ) ;
Code	return computeCovarianceMatrix ( localInstant , UTF_8 , clazz ) ;
Distance : 5

33
Tree	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 ) ;
Code	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 ) ;
Distance : 7

34
Tree	return computeCovarianceMatrix ( actualInvocationStackTrace , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return computeCovarianceMatrix ( actualInvocationStackTrace , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 6

35
Tree	return ( ( localInstant ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( localInstant ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

36
Tree	return iZone . defaultReturnValues ( null , populationSize , checkedFeatures , null ) ;
Code	return iZone . defaultReturnValues ( null , populationSize , checkedFeatures , null ) ;
Distance : 6

37
Tree	return iZone . stubber ( localInstant ) ;
Code	return iZone . stubber ( localInstant ) ;
Distance : 5

38
Tree	return retrieveLineSegments ( localInstant , UTF_8 , clazz , iZone ) ;
Code	return retrieveLineSegments ( localInstant , UTF_8 , clazz , iZone ) ;
Distance : 7

39
Tree	return iZone . defaultReturnValues ( localInstant , false ) ;
Code	return iZone . defaultReturnValues ( localInstant , false ) ;
Distance : 3

40
Tree	return iZone . htmlEscape ( localInstant , false ) ;
Code	return iZone . htmlEscape ( localInstant , false ) ;
Distance : 3

41
Tree	return defaultReturnValues ( this , localInstant ) ;
Code	return defaultReturnValues ( this , localInstant ) ;
Distance : 7

42
Tree	return iZone . defaultReturnValues ( NUMBER_CONSTANT , iPrinter ) ;
Code	return iZone . defaultReturnValues ( NUMBER_CONSTANT , iPrinter ) ;
Distance : 5

43
Tree	return ( ( zeroOffsetText ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( zeroOffsetText ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

44
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

45
Tree	return computeCovarianceMatrix ( this , groupIndex ) ;
Code	return computeCovarianceMatrix ( this , groupIndex ) ;
Distance : 7

46
Tree	return ! FieldUtils && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Code	return ! FieldUtils && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Distance : 10

47
Tree	return iZone . getImageMap ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . getImageMap ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

48
Tree	return NUMBER_CONSTANT / FieldUtils ;
Code	return NUMBER_CONSTANT / FieldUtils ;
Distance : 10

49
Tree	return iZone . createArgumentsAreDifferentException ( localInstant , false ) ;
Code	return iZone . createArgumentsAreDifferentException ( localInstant , false ) ;
Distance : 3

50
Tree	return iZone . getTimeInstance ( localInstant , false ) ;
Code	return iZone . getTimeInstance ( localInstant , false ) ;
Distance : 3

51
Tree	return iZone . createArgumentsAreDifferentException ( localInstant , UTF_8 , null ) ;
Code	return iZone . createArgumentsAreDifferentException ( localInstant , UTF_8 , null ) ;
Distance : 3

52
Tree	return iZone . defaultReturnValues ( STRING_CONSTANT , subtype ) ;
Code	return iZone . defaultReturnValues ( STRING_CONSTANT , subtype ) ;
Distance : 5

53
Tree	return iZone . defaultReturnValues ( this , localInstant ) ;
Code	return iZone . defaultReturnValues ( this , localInstant ) ;
Distance : 5

54
Tree	return iZone . defaultReturnValues ( actualInvocationStackTrace , false ) ;
Code	return iZone . defaultReturnValues ( actualInvocationStackTrace , false ) ;
Distance : 4

55
Tree	return retrieveLineSegments ( localInstant , sampleStats2 , clazz ) ;
Code	return retrieveLineSegments ( localInstant , sampleStats2 , clazz ) ;
Distance : 5

56
Tree	return retrieveLineSegments ( localInstant , UTF_8 ) ;
Code	return retrieveLineSegments ( localInstant , UTF_8 ) ;
Distance : 6

57
Tree	return iZone . createArgumentsAreDifferentException ( localInstant ) ;
Code	return iZone . createArgumentsAreDifferentException ( localInstant ) ;
Distance : 5

58
Tree	return iZone . getTimeInstance ( localInstant ) ;
Code	return iZone . getTimeInstance ( localInstant ) ;
Distance : 5

59
Tree	return iZone . fieldWasInitializedUsingContructorArgs ( localInstant , false ) ;
Code	return iZone . fieldWasInitializedUsingContructorArgs ( localInstant , false ) ;
Distance : 3

60
Tree	return iZone . getMockitoInterceptor ( localInstant , false ) ;
Code	return iZone . getMockitoInterceptor ( localInstant , false ) ;
Distance : 3

61
Tree	return iZone . defaultReturnValues ( RendererChangeListener , false ) ;
Code	return iZone . defaultReturnValues ( RendererChangeListener , false ) ;
Distance : 4

62
Tree	return iChrono != iZone ;
Code	return iChrono != iZone ;
Distance : 10

63
Tree	return iZone . getMockitoInterceptor ( localInstant ) ;
Code	return iZone . getMockitoInterceptor ( localInstant ) ;
Distance : 5

64
Tree	return iChrono != com.google.protobuf.GeneratedMessageV3 ;
Code	return iChrono != com.google.protobuf.GeneratedMessageV3 ;
Distance : 10

65
Tree	return iZone . defaultReturnValues ( this , zeroOffsetText ) ;
Code	return iZone . defaultReturnValues ( this , zeroOffsetText ) ;
Distance : 5

66
Tree	return iZone . defaultReturnValues ( this , drawShapesCheckBox ) ;
Code	return iZone . defaultReturnValues ( this , drawShapesCheckBox ) ;
Distance : 5

67
Tree	return ( ( NodeSubject ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( NodeSubject ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

68
Tree	return ! iZone && ! iZone . invokeSuper () ;
Code	return ! iZone && ! iZone . invokeSuper () ;
Distance : 10

69
Tree	return iZone . defaultReturnValues ( RendererChangeListener ) ;
Code	return iZone . defaultReturnValues ( RendererChangeListener ) ;
Distance : 6

70
Tree	return retrieveLineSegments ( this , zeroOffsetText ) ;
Code	return retrieveLineSegments ( this , zeroOffsetText ) ;
Distance : 7

71
Tree	return retrieveLineSegments ( namespaceToRequire , UTF_8 , clazz , iZone ) ;
Code	return retrieveLineSegments ( namespaceToRequire , UTF_8 , clazz , iZone ) ;
Distance : 7

72
Tree	return ( ( localInstant ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( localInstant ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

73
Tree	return iZone . htmlEscape ( this , localInstant ) ;
Code	return iZone . htmlEscape ( this , localInstant ) ;
Distance : 5

74
Tree	return iZone . defaultReturnValues ( STRING_CONSTANT , populationSize ) ;
Code	return iZone . defaultReturnValues ( STRING_CONSTANT , populationSize ) ;
Distance : 5

75
Tree	return iPrinter != iZone ;
Code	return iPrinter != iZone ;
Distance : 10

76
Tree	return iZone != endIndex ;
Code	return iZone != endIndex ;
Distance : 9

77
Tree	return computeCovarianceMatrix ( localInstant , sampleStats2 , clazz , iZone ) ;
Code	return computeCovarianceMatrix ( localInstant , sampleStats2 , clazz , iZone ) ;
Distance : 7

78
Tree	return iZone . defaultReturnValues ( actualInvocationStackTrace , UTF_8 , null ) ;
Code	return iZone . defaultReturnValues ( actualInvocationStackTrace , UTF_8 , null ) ;
Distance : 4

79
Tree	return iZone . createArgumentsAreDifferentException ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . createArgumentsAreDifferentException ( STRING_CONSTANT , localInstant ) ;
Distance : 5

80
Tree	return ( ( actualInvocationStackTrace ) localInstant ) . getStubbingLookupListeners ( localInstant , EMPTY ) ;
Code	return ( ( actualInvocationStackTrace ) localInstant ) . getStubbingLookupListeners ( localInstant , EMPTY ) ;
Distance : 10

81
Tree	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Code	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Distance : 9

82
Tree	return retrieveLineSegments ( localInstant , UTF_8 , false ) ;
Code	return retrieveLineSegments ( localInstant , UTF_8 , false ) ;
Distance : 5

83
Tree	return iOffsetParsed != iZone ;
Code	return iOffsetParsed != iZone ;
Distance : 10

84
Tree	return iZone . rangeAxisLocations ( localInstant ) ;
Code	return iZone . rangeAxisLocations ( localInstant ) ;
Distance : 5

85
Tree	return retrieveLineSegments ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Code	return retrieveLineSegments ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Distance : 5

86
Tree	return ! iZone && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Code	return ! iZone && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Distance : 9

87
Tree	return iZone . getTimeInstance ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . getTimeInstance ( STRING_CONSTANT , localInstant ) ;
Distance : 5

88
Tree	return iZone . createArgumentsAreDifferentException ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . createArgumentsAreDifferentException ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

89
Tree	return iPrinter != com.google.protobuf.GeneratedMessageV3 ;
Code	return iPrinter != com.google.protobuf.GeneratedMessageV3 ;
Distance : 10

90
Tree	return ( ( namespaceToRequire ) localInstant ) . getPeriod ( localInstant , UTF_8 ) ;
Code	return ( ( namespaceToRequire ) localInstant ) . getPeriod ( localInstant , UTF_8 ) ;
Distance : 10

91
Tree	return iZone . getTimeInstance ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . getTimeInstance ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

92
Tree	return iZone . ExceptionFactory ( localInstant ) ;
Code	return iZone . ExceptionFactory ( localInstant ) ;
Distance : 5

93
Tree	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 ) ;
Code	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 ) ;
Distance : 7

94
Tree	return computeCovarianceMatrix ( localInstant , UTF_8 , false ) ;
Code	return computeCovarianceMatrix ( localInstant , UTF_8 , false ) ;
Distance : 5

95
Tree	return NUMBER_CONSTANT / iZone ;
Code	return NUMBER_CONSTANT / iZone ;
Distance : 10

96
Tree	return iOffsetParsed != com.google.protobuf.GeneratedMessageV3 ;
Code	return iOffsetParsed != com.google.protobuf.GeneratedMessageV3 ;
Distance : 10

97
Tree	return iZone . defaultReturnValues ( localInstant , UTF_8 , null ) ;
Code	return iZone . defaultReturnValues ( localInstant , UTF_8 , null ) ;
Distance : 3

98
Tree	return iZone . defaultReturnValues ( this , subtype ) ;
Code	return iZone . defaultReturnValues ( this , subtype ) ;
Distance : 5

99
Tree	return iZone . defaultReturnValues ( this , groupIndex ) ;
Code	return iZone . defaultReturnValues ( this , groupIndex ) ;
Distance : 5

100
Tree	return NUMBER_CONSTANT / iChrono ;
Code	return NUMBER_CONSTANT / iChrono ;
Distance : 10

101
Tree	return retrieveLineSegments ( localInstant , sampleStats2 , false ) ;
Code	return retrieveLineSegments ( localInstant , sampleStats2 , false ) ;
Distance : 5

102
Tree	return decamelizeMatcher ( localInstant , UTF_8 ) ;
Code	return decamelizeMatcher ( localInstant , UTF_8 ) ;
Distance : 6

103
Tree	return ! FieldUtils && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Code	return ! FieldUtils && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Distance : 9

104
Tree	return retrieveLineSegments ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return retrieveLineSegments ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 5

105
Tree	return iZone . createArgumentsAreDifferentException ( this , localInstant ) ;
Code	return iZone . createArgumentsAreDifferentException ( this , localInstant ) ;
Distance : 5

106
Tree	return ( ( namespaceToRequire ) this ) . getStubbingLookupListeners ( localInstant , EMPTY ) ;
Code	return ( ( namespaceToRequire ) this ) . getStubbingLookupListeners ( localInstant , EMPTY ) ;
Distance : 10

107
Tree	return iZone . htmlEscape ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . htmlEscape ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

108
Tree	return retrieveLineSegments ( namespaceToRequire , UTF_8 , false ) ;
Code	return retrieveLineSegments ( namespaceToRequire , UTF_8 , false ) ;
Distance : 6

109
Tree	return computeCovarianceMatrix ( localInstant , sampleStats2 , false ) ;
Code	return computeCovarianceMatrix ( localInstant , sampleStats2 , false ) ;
Distance : 5

110
Tree	return iZone . htmlEscape ( this , zeroOffsetText ) ;
Code	return iZone . htmlEscape ( this , zeroOffsetText ) ;
Distance : 5

111
Tree	return NUMBER_CONSTANT / ChronologyType ;
Code	return NUMBER_CONSTANT / ChronologyType ;
Distance : 10

112
Tree	return iZone . defaultReturnValues ( localInstant ) ;
Code	return iZone . defaultReturnValues ( localInstant ) ;
Distance : 5

113
Tree	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 , false ) ;
Code	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 , false ) ;
Distance : 6

114
Tree	return ( ( namespaceToRequire ) this ) . makeStackTracesClean ( localInstant , UTF_8 ) ;
Code	return ( ( namespaceToRequire ) this ) . makeStackTracesClean ( localInstant , UTF_8 ) ;
Distance : 10

115
Tree	return ( ( crosshairState ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( crosshairState ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

116
Tree	return iZone . defaultReturnValues ( actualInvocationStackTrace ) ;
Code	return iZone . defaultReturnValues ( actualInvocationStackTrace ) ;
Distance : 6

117
Tree	return iZone . defaultReturnValues ( localInstant , UTF_8 ) ;
Code	return iZone . defaultReturnValues ( localInstant , UTF_8 ) ;
Distance : 4

118
Tree	return iZone . getMockitoInterceptor ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . getMockitoInterceptor ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

119
Tree	return iZone . defaultReturnValues ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . defaultReturnValues ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

120
Tree	return iZone != iPrinter ;
Code	return iZone != iPrinter ;
Distance : 9

121
Tree	return iZone . fieldWasInitializedUsingContructorArgs ( localInstant ) ;
Code	return iZone . fieldWasInitializedUsingContructorArgs ( localInstant ) ;
Distance : 5

122
Tree	return NUMBER_CONSTANT / compilerExecutor ;
Code	return NUMBER_CONSTANT / compilerExecutor ;
Distance : 10

123
Tree	return endIndex != iZone ;
Code	return endIndex != iZone ;
Distance : 10

124
Tree	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 , false ) ;
Code	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 , false ) ;
Distance : 6

125
Tree	return retrieveLineSegments ( actualInvocationStackTrace , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return retrieveLineSegments ( actualInvocationStackTrace , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 6

126
Tree	return ( ( actualInvocationStackTrace ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( actualInvocationStackTrace ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

127
Tree	return iZone . defaultReturnValues ( localInstant , sample2 ) ;
Code	return iZone . defaultReturnValues ( localInstant , sample2 ) ;
Distance : 4

128
Tree	return computeCovarianceMatrix ( localInstant , UTF_8 , clazz , iZone ) ;
Code	return computeCovarianceMatrix ( localInstant , UTF_8 , clazz , iZone ) ;
Distance : 7

129
Tree	return iZone . defaultReturnValues ( localInstant , sampleStats2 ) ;
Code	return iZone . defaultReturnValues ( localInstant , sampleStats2 ) ;
Distance : 4

130
Tree	return computeCovarianceMatrix ( namespaceToRequire , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return computeCovarianceMatrix ( namespaceToRequire , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 6

131
Tree	return retrieveLineSegments ( localInstant , UTF_8 , clazz ) ;
Code	return retrieveLineSegments ( localInstant , UTF_8 , clazz ) ;
Distance : 5

132
Tree	return iZone != AllowedSolutions.ANY_SIDE ;
Code	return iZone != AllowedSolutions.ANY_SIDE ;
Distance : 9

133
Tree	return iZone . getTimeInstance ( localInstant , UTF_8 , null ) ;
Code	return iZone . getTimeInstance ( localInstant , UTF_8 , null ) ;
Distance : 3

134
Tree	return ( ( namespaceToRequire ) localInstant ) . getStubbingLookupListeners ( localInstant , EMPTY ) ;
Code	return ( ( namespaceToRequire ) localInstant ) . getStubbingLookupListeners ( localInstant , EMPTY ) ;
Distance : 10

135
Tree	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 , clazz ) ;
Code	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 , clazz ) ;
Distance : 6

136
Tree	return decamelizeMatcher ( localInstant , UTF_8 , clazz ) ;
Code	return decamelizeMatcher ( localInstant , UTF_8 , clazz ) ;
Distance : 5

137
Tree	return ! iOffsetParsed && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Code	return ! iOffsetParsed && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Distance : 10

138
Tree	return endIndex != com.google.protobuf.GeneratedMessageV3 ;
Code	return endIndex != com.google.protobuf.GeneratedMessageV3 ;
Distance : 10

139
Tree	return retrieveLineSegments ( localInstant , sampleStats2 , clazz , iZone ) ;
Code	return retrieveLineSegments ( localInstant , sampleStats2 , clazz , iZone ) ;
Distance : 7

140
Tree	return iZone . _isMinimize ( localInstant ) ;
Code	return iZone . _isMinimize ( localInstant ) ;
Distance : 5

141
Tree	return ! iZone . defaultReturnValues ( localInstant ) && : ;
Code	return ! iZone . defaultReturnValues ( localInstant ) && : ;
Distance : 7

142
Tree	return createArgumentsAreDifferentException ( this , localInstant ) ;
Code	return createArgumentsAreDifferentException ( this , localInstant ) ;
Distance : 7

143
Tree	return ! iZone . htmlEscape ( localInstant ) && ^ ;
Code	return ! iZone . htmlEscape ( localInstant ) && ^ ;
Distance : 7

144
Tree	return ! iZone && ! iZone . getPropertyReservedNamingFirstChars () ;
Code	return ! iZone && ! iZone . getPropertyReservedNamingFirstChars () ;
Distance : 10

145
Tree	return retrieveLineSegments ( namespaceToRequire , UTF_8 , clazz ) ;
Code	return retrieveLineSegments ( namespaceToRequire , UTF_8 , clazz ) ;
Distance : 6

146
Tree	return computeCovarianceMatrix ( localInstant , sampleStats2 , clazz ) ;
Code	return computeCovarianceMatrix ( localInstant , sampleStats2 , clazz ) ;
Distance : 5

147
Tree	return ! FieldUtils . htmlEscape ( localInstant ) && <= ;
Code	return ! FieldUtils . htmlEscape ( localInstant ) && <= ;
Distance : 8

148
Tree	return iZone . htmlEscape ( localInstant , UTF_8 , null ) ;
Code	return iZone . htmlEscape ( localInstant , UTF_8 , null ) ;
Distance : 3

149
Tree	return ! iZone && ! iZone . getPropertyReservedNamingFirstChars ( localInstant ) ;
Code	return ! iZone && ! iZone . getPropertyReservedNamingFirstChars ( localInstant ) ;
Distance : 9

150
Tree	return iZone . rangeAxisLocations ( actualInvocationStackTrace ) ;
Code	return iZone . rangeAxisLocations ( actualInvocationStackTrace ) ;
Distance : 6

151
Tree	return iZone . subtype ( localInstant ) ;
Code	return iZone . subtype ( localInstant ) ;
Distance : 5

152
Tree	return iZone . boxPaint ( localInstant ) ;
Code	return iZone . boxPaint ( localInstant ) ;
Distance : 5

153
Tree	return ! iZone && ! iZone . invokeSuper ( localInstant ) ;
Code	return ! iZone && ! iZone . invokeSuper ( localInstant ) ;
Distance : 9

154
Tree	return iZone . fakeReturnValues ( localInstant ) ;
Code	return iZone . fakeReturnValues ( localInstant ) ;
Distance : 5

155
Tree	return retrieveLineSegments ( this , localInstant ) ;
Code	return retrieveLineSegments ( this , localInstant ) ;
Distance : 7

156
Tree	return ! iZone . defaultReturnValues ( localInstant ) && ^ ;
Code	return ! iZone . defaultReturnValues ( localInstant ) && ^ ;
Distance : 7

157
Tree	return decamelizeMatcher ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return decamelizeMatcher ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 5

158
Tree	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 , clazz , iZone ) ;
Code	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 , clazz , iZone ) ;
Distance : 7

159
Tree	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 , clazz , iZone ) ;
Code	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 , clazz , iZone ) ;
Distance : 7

160
Tree	return decamelizeMatcher ( localInstant , UTF_8 , clazz , iZone ) ;
Code	return decamelizeMatcher ( localInstant , UTF_8 , clazz , iZone ) ;
Distance : 7

161
Tree	return computeCovarianceMatrix ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Code	return computeCovarianceMatrix ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Distance : 5

162
Tree	return iZone . defaultReturnValues ( localInstant , CSV_SEARCH_CHARS , null ) ;
Code	return iZone . defaultReturnValues ( localInstant , CSV_SEARCH_CHARS , null ) ;
Distance : 3

163
Tree	return iZone . createArgumentsAreDifferentException ( localInstant , UTF_8 ) ;
Code	return iZone . createArgumentsAreDifferentException ( localInstant , UTF_8 ) ;
Distance : 4

164
Tree	return ! FieldUtils && ! iZone . htmlEscape ( localInstant ) ;
Code	return ! FieldUtils && ! iZone . htmlEscape ( localInstant ) ;
Distance : 9

165
Tree	return ( ( zeroOffsetText ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( zeroOffsetText ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

166
Tree	return computeCovarianceMatrix ( this , localInstant ) ;
Code	return computeCovarianceMatrix ( this , localInstant ) ;
Distance : 7

167
Tree	return iZone . defaultReturnValues ( localInstant , sample2 , null ) ;
Code	return iZone . defaultReturnValues ( localInstant , sample2 , null ) ;
Distance : 3

168
Tree	return ! FieldUtils && ! iZone . htmlEscape () ;
Code	return ! FieldUtils && ! iZone . htmlEscape () ;
Distance : 10

169
Tree	return iZone . getTimeInstance ( localInstant , UTF_8 ) ;
Code	return iZone . getTimeInstance ( localInstant , UTF_8 ) ;
Distance : 4

170
Tree	return iZone . defaultReturnValues ( localInstant , sampleStats2 , null ) ;
Code	return iZone . defaultReturnValues ( localInstant , sampleStats2 , null ) ;
Distance : 3

171
Tree	return iZone != vd ;
Code	return iZone != vd ;
Distance : 9

172
Tree	return ! FieldUtils . defaultReturnValues ( localInstant ) && <= ;
Code	return ! FieldUtils . defaultReturnValues ( localInstant ) && <= ;
Distance : 8

173
Tree	return iZone . htmlEscape ( localInstant , UTF_8 ) ;
Code	return iZone . htmlEscape ( localInstant , UTF_8 ) ;
Distance : 4

174
Tree	return ! iOffsetParsed && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Code	return ! iOffsetParsed && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Distance : 9

175
Tree	return ( ( actualInvocationStackTrace ) localInstant ) . getPeriod ( localInstant , UTF_8 ) ;
Code	return ( ( actualInvocationStackTrace ) localInstant ) . getPeriod ( localInstant , UTF_8 ) ;
Distance : 10

176
Tree	return iZone . defaultReturnValues ( null , populationSize , EMPTY , null ) ;
Code	return iZone . defaultReturnValues ( null , populationSize , EMPTY , null ) ;
Distance : 6

177
Tree	return retrieveLineSegments ( namespaceToRequire , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Code	return retrieveLineSegments ( namespaceToRequire , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Distance : 6

178
Tree	return retrieveLineSegments ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , TimeUnit.SECONDS ) ;
Code	return retrieveLineSegments ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , TimeUnit.SECONDS ) ;
Distance : 5

179
Tree	return retrieveLineSegments ( actualInvocationStackTrace , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Code	return retrieveLineSegments ( actualInvocationStackTrace , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Distance : 6

180
Tree	return computeCovarianceMatrix ( namespaceToRequire , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Code	return computeCovarianceMatrix ( namespaceToRequire , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Distance : 6

181
Tree	return decamelizeMatcher ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Code	return decamelizeMatcher ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Distance : 5

182
Tree	return iZone . defaultReturnValues ( actualInvocationStackTrace , UTF_8 ) ;
Code	return iZone . defaultReturnValues ( actualInvocationStackTrace , UTF_8 ) ;
Distance : 5

183
Tree	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 , clazz ) ;
Code	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 , clazz ) ;
Distance : 6

184
Tree	return computeCovarianceMatrix ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , TimeUnit.SECONDS ) ;
Code	return computeCovarianceMatrix ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , TimeUnit.SECONDS ) ;
Distance : 5

185
Tree	return iZone . htmlEscape ( null , populationSize , checkedFeatures , null ) ;
Code	return iZone . htmlEscape ( null , populationSize , checkedFeatures , null ) ;
Distance : 6

186
Tree	return iZone . defaultReturnValues ( null , populationSize , sample2 , null ) ;
Code	return iZone . defaultReturnValues ( null , populationSize , sample2 , null ) ;
Distance : 6

187
Tree	return iZone . defaultReturnValues ( localInstant , CSV_SEARCH_CHARS ) ;
Code	return iZone . defaultReturnValues ( localInstant , CSV_SEARCH_CHARS ) ;
Distance : 4

188
Tree	return iZone . defaultReturnValues ( null , populationSize , clazz , null ) ;
Code	return iZone . defaultReturnValues ( null , populationSize , clazz , null ) ;
Distance : 6

189
Tree	return iZone . defaultReturnValues ( null , populationSize , extensionRegistry , null ) ;
Code	return iZone . defaultReturnValues ( null , populationSize , extensionRegistry , null ) ;
Distance : 6

190
Tree	return iZone . defaultReturnValues ( null , populationSize , wantedCount , null ) ;
Code	return iZone . defaultReturnValues ( null , populationSize , wantedCount , null ) ;
Distance : 6

191
Tree	return iZone != null iZone ? ;
Code	return iZone != null iZone ? ;
Distance : 9

192
Tree	return endIndex != null iZone ? ;
Code	return endIndex != null iZone ? ;
Distance : 10

193
Tree	return iChrono != null iZone ? ;
Code	return iChrono != null iZone ? ;
Distance : 10

194
Tree	return iPrinter != null iZone ? ;
Code	return iPrinter != null iZone ? ;
Distance : 10

195
Tree	return iZone . defaultReturnValues ( null , populationSize , sampleStats2 , null ) ;
Code	return iZone . defaultReturnValues ( null , populationSize , sampleStats2 , null ) ;
Distance : 6

196
Tree	return iOffsetParsed != null iZone ? ;
Code	return iOffsetParsed != null iZone ? ;
Distance : 10

197
Tree	return compilerExecutor != null iZone ? ;
Code	return compilerExecutor != null iZone ? ;
Distance : 10

198
Tree	return iZone != null iZone / ;
Code	return iZone != null iZone / ;
Distance : 9

199
Tree	return FieldUtils != null iZone ? ;
Code	return FieldUtils != null iZone ? ;
Distance : 10

========================================================================


========================================================================
Example Number: 113
Parent Code is: 
long result = iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
long result = iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=long}) (59 (800{val=result}) (204{val==}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=long}) (59 (800{val=result}) (204{val==}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	long result = alternatesList . getSmallestCoveringDependency ( localInstant , false ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( localInstant , false ) ;
Distance : 4

1
Tree	long result = alternatesList . getSmallestCoveringDependency ( numberOfPoints , false ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( numberOfPoints , false ) ;
Distance : 5

2
Tree	long result = alternatesList . trimSuspendParameterTypes ( localInstant , false ) ;
Code	long result = alternatesList . trimSuspendParameterTypes ( localInstant , false ) ;
Distance : 4

3
Tree	long result = alternatesList . getSmallestCoveringDependency ( NUMBER_CONSTANT , localInstant ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( NUMBER_CONSTANT , localInstant ) ;
Distance : 6

4
Tree	long result = alternatesList . createRandomGenerator ( localInstant , false ) ;
Code	long result = alternatesList . createRandomGenerator ( localInstant , false ) ;
Distance : 4

5
Tree	long result = alternatesList . trimSuspendParameterTypes ( numberOfPoints , false ) ;
Code	long result = alternatesList . trimSuspendParameterTypes ( numberOfPoints , false ) ;
Distance : 5

6
Tree	long result = alternatesList . getSmallestCoveringDependency ( actualInvocationStackTrace , false ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( actualInvocationStackTrace , false ) ;
Distance : 5

7
Tree	long result = alternatesList . trimSuspendParameterTypes ( NUMBER_CONSTANT , localInstant ) ;
Code	long result = alternatesList . trimSuspendParameterTypes ( NUMBER_CONSTANT , localInstant ) ;
Distance : 6

8
Tree	long result = getFakeReturnValues ( localInstant , NUMBER_CONSTANT , iChrono , type , iChrono , TimeUnit.SECONDS ) ;
Code	long result = getFakeReturnValues ( localInstant , NUMBER_CONSTANT , iChrono , type , iChrono , TimeUnit.SECONDS ) ;
Distance : 11

9
Tree	long result = SuspendMethod ;
Code	long result = SuspendMethod ;
Distance : 10

10
Tree	long result = alternatesList . createRandomGenerator ( numberOfPoints ) ;
Code	long result = alternatesList . createRandomGenerator ( numberOfPoints ) ;
Distance : 7

11
Tree	long result = getFakeReturnValues ( namespaceToRequire , NUMBER_CONSTANT , iChrono , type , iChrono , TimeUnit.SECONDS ) ;
Code	long result = getFakeReturnValues ( namespaceToRequire , NUMBER_CONSTANT , iChrono , type , iChrono , TimeUnit.SECONDS ) ;
Distance : 11

12
Tree	long result = alternatesList . getSmallestCoveringDependency ( byteValue ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( byteValue ) ;
Distance : 7

13
Tree	long result = alternatesList . countActual ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET ) ;
Code	long result = alternatesList . countActual ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET ) ;
Distance : 5

14
Tree	long result = cleaner ;
Code	long result = cleaner ;
Distance : 10

15
Tree	long result = alternatesList . getSmallestCoveringDependency ( this , numberOfPoints , NUMBER_CONSTANT ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( this , numberOfPoints , NUMBER_CONSTANT ) ;
Distance : 5

16
Tree	long result = alternatesList . trimSuspendParameterTypes ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET ) ;
Code	long result = alternatesList . trimSuspendParameterTypes ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET ) ;
Distance : 5

17
Tree	long result = iEndMillis ;
Code	long result = iEndMillis ;
Distance : 10

18
Tree	long result = alternatesList . getSmallestCoveringDependency ( numberOfPoints ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( numberOfPoints ) ;
Distance : 7

19
Tree	long result = iPrinter ;
Code	long result = iPrinter ;
Distance : 10

20
Tree	long result = alternatesList . trimSuspendParameterTypes ( localInstant ) ;
Code	long result = alternatesList . trimSuspendParameterTypes ( localInstant ) ;
Distance : 6

21
Tree	long result = alternatesList . getSmallestCoveringDependency ( this , localInstant , withSettings () , TimeUnit.SECONDS ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( this , localInstant , withSettings () , TimeUnit.SECONDS ) ;
Distance : 7

22
Tree	long result = alternatesList . getSmallestCoveringDependency ( this , drawShapesCheckBox , withSettings () , TimeUnit.SECONDS ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( this , drawShapesCheckBox , withSettings () , TimeUnit.SECONDS ) ;
Distance : 8

23
Tree	long result = alternatesList . trimSuspendParameterTypes ( this , localInstant , configureWith () , TimeUnit.SECONDS ) ;
Code	long result = alternatesList . trimSuspendParameterTypes ( this , localInstant , configureWith () , TimeUnit.SECONDS ) ;
Distance : 7

24
Tree	long result = alternatesList . createRandomGenerator ( localInstant , reach ) ;
Code	long result = alternatesList . createRandomGenerator ( localInstant , reach ) ;
Distance : 5

25
Tree	long result = alternatesList . getSmallestCoveringDependency ( this , NestableErrorTest , configureWith () , TimeUnit.SECONDS ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( this , NestableErrorTest , configureWith () , TimeUnit.SECONDS ) ;
Distance : 8

26
Tree	long result = alternatesList . getSmallestCoveringDependency ( this , zeroOffsetText , configureWith () , TimeUnit.SECONDS ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( this , zeroOffsetText , configureWith () , TimeUnit.SECONDS ) ;
Distance : 8

27
Tree	long result = alternatesList . trimSuspendParameterTypes ( this , drawShapesCheckBox , configureWith () , TimeUnit.SECONDS ) ;
Code	long result = alternatesList . trimSuspendParameterTypes ( this , drawShapesCheckBox , configureWith () , TimeUnit.SECONDS ) ;
Distance : 8

28
Tree	long result = alternatesList . trimSuspendParameterTypes ( numberOfPoints , reach ) ;
Code	long result = alternatesList . trimSuspendParameterTypes ( numberOfPoints , reach ) ;
Distance : 6

29
Tree	long result = alternatesList . getSmallestCoveringDependency ( this , localInstant , NUMBER_CONSTANT ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( this , localInstant , NUMBER_CONSTANT ) ;
Distance : 5

30
Tree	long result = alternatesList . getSmallestCoveringDependency ( this , drawShapesCheckBox , NUMBER_CONSTANT ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( this , drawShapesCheckBox , NUMBER_CONSTANT ) ;
Distance : 5

31
Tree	long result = alternatesList . trimSuspendParameterTypes ( byteValue ) ;
Code	long result = alternatesList . trimSuspendParameterTypes ( byteValue ) ;
Distance : 7

32
Tree	long result = alternatesList . createRandomGenerator ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET ) ;
Code	long result = alternatesList . createRandomGenerator ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET ) ;
Distance : 5

33
Tree	long result = alternatesList . getSmallestCoveringDependency ( localInstant , reach ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( localInstant , reach ) ;
Distance : 5

34
Tree	long result = alternatesList . getSmallestCoveringDependency ( this , numberOfPoints ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( this , numberOfPoints ) ;
Distance : 6

35
Tree	long result = alternatesList . createRandomGenerator ( this , localInstant ) ;
Code	long result = alternatesList . createRandomGenerator ( this , localInstant ) ;
Distance : 6

36
Tree	long result = alternatesList . getSmallestCoveringDependency ( getNativeNullType ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( getNativeNullType ) ;
Distance : 7

37
Tree	long result = alternatesList . getSmallestCoveringDependency ( NUMBER_CONSTANT , reach ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( NUMBER_CONSTANT , reach ) ;
Distance : 6

38
Tree	long result = iChrono ;
Code	long result = iChrono ;
Distance : 10

39
Tree	long result = getFakeReturnValues ( actualInvocationStackTrace , NUMBER_CONSTANT , iChrono , type , iZone , TimeUnit.SECONDS ) ;
Code	long result = getFakeReturnValues ( actualInvocationStackTrace , NUMBER_CONSTANT , iChrono , type , iZone , TimeUnit.SECONDS ) ;
Distance : 11

40
Tree	long result = alternatesList . getSmallestCoveringDependency ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET ) ;
Distance : 5

41
Tree	long result = alternatesList . getSmallestCoveringDependency ( getNativeObjectConstructorType ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( getNativeObjectConstructorType ) ;
Distance : 7

42
Tree	long result = getFakeReturnValues ( actualInvocationStackTrace , configureWith () , null ) ;
Code	long result = getFakeReturnValues ( actualInvocationStackTrace , configureWith () , null ) ;
Distance : 7

43
Tree	long result = alternatesList . getSmallestCoveringDependency ( localInstant ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( localInstant ) ;
Distance : 6

44
Tree	long result = alternatesList . trimSuspendParameterTypes ( getArrayStart ) ;
Code	long result = alternatesList . trimSuspendParameterTypes ( getArrayStart ) ;
Distance : 7

45
Tree	long result = getFakeReturnValues ( localInstant , NUMBER_CONSTANT , iChrono , type , iZone , TimeUnit.SECONDS ) ;
Code	long result = getFakeReturnValues ( localInstant , NUMBER_CONSTANT , iChrono , type , iZone , TimeUnit.SECONDS ) ;
Distance : 11

46
Tree	long result = alternatesList . getSmallestCoveringDependency ( numberOfPoints , Es6ToEs3Util.CANNOT_CONVERT_YET ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( numberOfPoints , Es6ToEs3Util.CANNOT_CONVERT_YET ) ;
Distance : 6

47
Tree	long result = getFakeReturnValues ( namespaceToRequire , NUMBER_CONSTANT , iChrono , type , iZone , TimeUnit.SECONDS ) ;
Code	long result = getFakeReturnValues ( namespaceToRequire , NUMBER_CONSTANT , iChrono , type , iZone , TimeUnit.SECONDS ) ;
Distance : 11

48
Tree	long result = useEval ;
Code	long result = useEval ;
Distance : 10

49
Tree	long result = iZone ;
Code	long result = iZone ;
Distance : 9

50
Tree	long result = alternatesList . trimSuspendParameterTypes ( numberOfPoints , Es6ToEs3Util.CANNOT_CONVERT_YET ) ;
Code	long result = alternatesList . trimSuspendParameterTypes ( numberOfPoints , Es6ToEs3Util.CANNOT_CONVERT_YET ) ;
Distance : 6

51
Tree	long result = getFakeReturnValues ( actualInvocationStackTrace , NUMBER_CONSTANT , iChrono , type , iChrono , TimeUnit.SECONDS ) ;
Code	long result = getFakeReturnValues ( actualInvocationStackTrace , NUMBER_CONSTANT , iChrono , type , iChrono , TimeUnit.SECONDS ) ;
Distance : 11

52
Tree	long result = alternatesList . createRandomGenerator ( localInstant ) ;
Code	long result = alternatesList . createRandomGenerator ( localInstant ) ;
Distance : 6

53
Tree	long result = alternatesList . createRandomGenerator ( this , localInstant , NUMBER_CONSTANT ) ;
Code	long result = alternatesList . createRandomGenerator ( this , localInstant , NUMBER_CONSTANT ) ;
Distance : 5

54
Tree	long result = alternatesList . countActual ( localInstant ) ;
Code	long result = alternatesList . countActual ( localInstant ) ;
Distance : 6

55
Tree	long result = alternatesList . getSmallestCoveringDependency ( getArrayStart ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( getArrayStart ) ;
Distance : 7

56
Tree	long result = getFakeReturnValues ( actualInvocationStackTrace , NUMBER_CONSTANT , iZone , type , iZone , TimeUnit.SECONDS ) ;
Code	long result = getFakeReturnValues ( actualInvocationStackTrace , NUMBER_CONSTANT , iZone , type , iZone , TimeUnit.SECONDS ) ;
Distance : 11

57
Tree	long result = getFakeReturnValues ( numberOfPoints , NUMBER_CONSTANT , iChrono , type , iZone , TimeUnit.SECONDS ) ;
Code	long result = getFakeReturnValues ( numberOfPoints , NUMBER_CONSTANT , iChrono , type , iZone , TimeUnit.SECONDS ) ;
Distance : 11

58
Tree	long result = getFakeReturnValues ( namespaceToRequire , reach , i2s2 , iZone , iZone ) ;
Code	long result = getFakeReturnValues ( namespaceToRequire , reach , i2s2 , iZone , iZone ) ;
Distance : 9

59
Tree	long result = getFakeReturnValues ( actualInvocationStackTrace , reach , extensionRegistry , iChrono , iZone ) ;
Code	long result = getFakeReturnValues ( actualInvocationStackTrace , reach , extensionRegistry , iChrono , iZone ) ;
Distance : 9

60
Tree	long result = getFakeReturnValues ( actualInvocationStackTrace , reach , extensionRegistry , iZone , iChrono ) ;
Code	long result = getFakeReturnValues ( actualInvocationStackTrace , reach , extensionRegistry , iZone , iChrono ) ;
Distance : 9

61
Tree	long result = alternatesList . getSmallestCoveringDependency ( actualInvocationStackTrace , Es6ToEs3Util.CANNOT_CONVERT_YET ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( actualInvocationStackTrace , Es6ToEs3Util.CANNOT_CONVERT_YET ) ;
Distance : 6

62
Tree	final long result = alternatesList . trimSuspendParameterTypes ( numberOfPoints , Es6ToEs3Util.CANNOT_CONVERT_YET ) ;
Code	final long result = alternatesList . trimSuspendParameterTypes ( numberOfPoints , Es6ToEs3Util.CANNOT_CONVERT_YET ) ;
Distance : 7

63
Tree	long result = alternatesList . trimSuspendParameterTypes ( this , localInstant ) ;
Code	long result = alternatesList . trimSuspendParameterTypes ( this , localInstant ) ;
Distance : 6

64
Tree	long result = alternatesList . getSmallestCoveringDependency ( this , NestableErrorTest ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( this , NestableErrorTest ) ;
Distance : 6

65
Tree	long result = alternatesList . createRandomGenerator ( byteValue ) ;
Code	long result = alternatesList . createRandomGenerator ( byteValue ) ;
Distance : 7

66
Tree	long result = alternatesList . getSmallestCoveringDependency ( this , localInstant , configureWith () , TimeUnit.SECONDS ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( this , localInstant , configureWith () , TimeUnit.SECONDS ) ;
Distance : 7

67
Tree	final long result = alternatesList . createRandomGenerator ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET ) ;
Code	final long result = alternatesList . createRandomGenerator ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET ) ;
Distance : 6

68
Tree	long result = alternatesList . getSmallestCoveringDependency ( this , drawShapesCheckBox , configureWith () , TimeUnit.SECONDS ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( this , drawShapesCheckBox , configureWith () , TimeUnit.SECONDS ) ;
Distance : 8

69
Tree	final long result = alternatesList . getSmallestCoveringDependency ( actualInvocationStackTrace , Es6ToEs3Util.CANNOT_CONVERT_YET ) ;
Code	final long result = alternatesList . getSmallestCoveringDependency ( actualInvocationStackTrace , Es6ToEs3Util.CANNOT_CONVERT_YET ) ;
Distance : 7

70
Tree	final long result = alternatesList . createRandomGenerator ( numberOfPoints , Es6ToEs3Util.CANNOT_CONVERT_YET ) ;
Code	final long result = alternatesList . createRandomGenerator ( numberOfPoints , Es6ToEs3Util.CANNOT_CONVERT_YET ) ;
Distance : 7

71
Tree	long result = alternatesList . getSmallestCoveringDependency ( numberOfPoints , reach ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( numberOfPoints , reach ) ;
Distance : 6

72
Tree	long result = alternatesList . getSmallestCoveringDependency ( this , zeroOffsetText ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( this , zeroOffsetText ) ;
Distance : 6

73
Tree	long result = alternatesList . getSmallestCoveringDependency ( actualInvocationStackTrace ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( actualInvocationStackTrace ) ;
Distance : 7

74
Tree	long result = alternatesList . trimSuspendParameterTypes ( numberOfPoints ) ;
Code	long result = alternatesList . trimSuspendParameterTypes ( numberOfPoints ) ;
Distance : 7

75
Tree	long result = alternatesList . trimSuspendParameterTypes ( this , localInstant , NUMBER_CONSTANT ) ;
Code	long result = alternatesList . trimSuspendParameterTypes ( this , localInstant , NUMBER_CONSTANT ) ;
Distance : 5

76
Tree	long result = alternatesList . trimSuspendParameterTypes ( localInstant , reach ) ;
Code	long result = alternatesList . trimSuspendParameterTypes ( localInstant , reach ) ;
Distance : 5

77
Tree	final long result = alternatesList . getSmallestCoveringDependency ( NUMBER_CONSTANT , localInstant ) ;
Code	final long result = alternatesList . getSmallestCoveringDependency ( NUMBER_CONSTANT , localInstant ) ;
Distance : 7

78
Tree	long result = getFakeReturnValues ( localInstant , configureWith () , null ) ;
Code	long result = getFakeReturnValues ( localInstant , configureWith () , null ) ;
Distance : 6

79
Tree	long result = alternatesList . createRandomGenerator ( getArrayStart ) ;
Code	long result = alternatesList . createRandomGenerator ( getArrayStart ) ;
Distance : 7

80
Tree	long result = alternatesList . createRandomGenerator ( numberOfPoints , Es6ToEs3Util.CANNOT_CONVERT_YET ) ;
Code	long result = alternatesList . createRandomGenerator ( numberOfPoints , Es6ToEs3Util.CANNOT_CONVERT_YET ) ;
Distance : 6

81
Tree	long result = alternatesList . getSmallestCoveringDependency ( this , NestableErrorTest , NUMBER_CONSTANT ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( this , NestableErrorTest , NUMBER_CONSTANT ) ;
Distance : 5

82
Tree	long result = alternatesList . trimSuspendParameterTypes ( this , drawShapesCheckBox ) ;
Code	long result = alternatesList . trimSuspendParameterTypes ( this , drawShapesCheckBox ) ;
Distance : 6

83
Tree	long result = alternatesList . createRandomGenerator ( numberOfPoints , false ) ;
Code	long result = alternatesList . createRandomGenerator ( numberOfPoints , false ) ;
Distance : 5

84
Tree	long result = getFakeReturnValues ( namespaceToRequire , configureWith () , null ) ;
Code	long result = getFakeReturnValues ( namespaceToRequire , configureWith () , null ) ;
Distance : 7

85
Tree	long result = alternatesList . getSmallestCoveringDependency ( numberOfPoints , reach , i2s2 , iOffsetParsed . getPropertyReservedNamingNonFirstChars () ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( numberOfPoints , reach , i2s2 , iOffsetParsed . getPropertyReservedNamingNonFirstChars () ) ;
Distance : 10

86
Tree	long result = alternatesList . countActual ( localInstant , false ) ;
Code	long result = alternatesList . countActual ( localInstant , false ) ;
Distance : 4

87
Tree	long result = alternatesList . getSmallestCoveringDependency ( numberOfPoints , reach , i2s2 , FieldUtils . getPropertyReservedNamingNonFirstChars () ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( numberOfPoints , reach , i2s2 , FieldUtils . getPropertyReservedNamingNonFirstChars () ) ;
Distance : 10

88
Tree	long result = alternatesList . createRandomGenerator ( NUMBER_CONSTANT , localInstant ) ;
Code	long result = alternatesList . createRandomGenerator ( NUMBER_CONSTANT , localInstant ) ;
Distance : 6

89
Tree	long result = alternatesList ;
Code	long result = alternatesList ;
Distance : 10

90
Tree	long result = alternatesList . getSmallestCoveringDependency ( localInstant , reach , MILLISECONDS , FieldUtils . getPropertyReservedNamingNonFirstChars () ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( localInstant , reach , MILLISECONDS , FieldUtils . getPropertyReservedNamingNonFirstChars () ) ;
Distance : 9

91
Tree	long result = alternatesList . getSmallestCoveringDependency ( this , zeroOffsetText , NUMBER_CONSTANT ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( this , zeroOffsetText , NUMBER_CONSTANT ) ;
Distance : 5

92
Tree	long result = getFakeReturnValues ( actualInvocationStackTrace , reach , false ) ;
Code	long result = getFakeReturnValues ( actualInvocationStackTrace , reach , false ) ;
Distance : 6

93
Tree	final long result = alternatesList . getSmallestCoveringDependency ( localInstant , false ) ;
Code	final long result = alternatesList . getSmallestCoveringDependency ( localInstant , false ) ;
Distance : 5

94
Tree	final long result = alternatesList . getSmallestCoveringDependency ( NUMBER_CONSTANT , NestableErrorTest ) ;
Code	final long result = alternatesList . getSmallestCoveringDependency ( NUMBER_CONSTANT , NestableErrorTest ) ;
Distance : 7

95
Tree	long result = alternatesList . getSmallestCoveringDependency ( actualInvocationStackTrace , reach ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( actualInvocationStackTrace , reach ) ;
Distance : 6

96
Tree	final long result = alternatesList . getAuthor ( NUMBER_CONSTANT , localInstant ) ;
Code	final long result = alternatesList . getAuthor ( NUMBER_CONSTANT , localInstant ) ;
Distance : 7

97
Tree	long result = alternatesList . getSmallestCoveringDependency ( localInstant . isVarArgs () , NUMBER_CONSTANT ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( localInstant . isVarArgs () , NUMBER_CONSTANT ) ;
Distance : 6

98
Tree	long result = getFakeReturnValues ( numberOfPoints , configureWith () , null ) ;
Code	long result = getFakeReturnValues ( numberOfPoints , configureWith () , null ) ;
Distance : 7

99
Tree	final long result = alternatesList . getSmallestCoveringDependency ( numberOfPoints , false ) ;
Code	final long result = alternatesList . getSmallestCoveringDependency ( numberOfPoints , false ) ;
Distance : 6

100
Tree	long result = alternatesList . createRandomGenerator ( numberOfPoints , reach ) ;
Code	long result = alternatesList . createRandomGenerator ( numberOfPoints , reach ) ;
Distance : 6

101
Tree	final long result = alternatesList . countActual ( NUMBER_CONSTANT , localInstant ) ;
Code	final long result = alternatesList . countActual ( NUMBER_CONSTANT , localInstant ) ;
Distance : 7

102
Tree	long result = alternatesList . getSmallestCoveringDependency ( this , localInstant ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( this , localInstant ) ;
Distance : 6

103
Tree	final long result = alternatesList . getSmallestCoveringDependency ( NUMBER_CONSTANT , reach ) ;
Code	final long result = alternatesList . getSmallestCoveringDependency ( NUMBER_CONSTANT , reach ) ;
Distance : 7

104
Tree	long result = getFakeReturnValues ( localInstant , reach , false ) ;
Code	long result = getFakeReturnValues ( localInstant , reach , false ) ;
Distance : 5

105
Tree	long result = alternatesList . trimSuspendParameterTypes ( this , drawShapesCheckBox , NUMBER_CONSTANT ) ;
Code	long result = alternatesList . trimSuspendParameterTypes ( this , drawShapesCheckBox , NUMBER_CONSTANT ) ;
Distance : 5

106
Tree	long result = getFakeReturnValues ( namespaceToRequire , reach , false ) ;
Code	long result = getFakeReturnValues ( namespaceToRequire , reach , false ) ;
Distance : 6

107
Tree	long result = alternatesList . getSmallestCoveringDependency ( NUMBER_CONSTANT , NestableErrorTest ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( NUMBER_CONSTANT , NestableErrorTest ) ;
Distance : 6

108
Tree	long result = alternatesList . getSmallestCoveringDependency ( localInstant . getGenericReturnType () , NUMBER_CONSTANT ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( localInstant . getGenericReturnType () , NUMBER_CONSTANT ) ;
Distance : 6

109
Tree	final long result = alternatesList . trimSuspendParameterTypes ( localInstant , false ) ;
Code	final long result = alternatesList . trimSuspendParameterTypes ( localInstant , false ) ;
Distance : 5

110
Tree	final long result = iChrono . getSmallestCoveringDependency ( NUMBER_CONSTANT , localInstant ) ;
Code	final long result = iChrono . getSmallestCoveringDependency ( NUMBER_CONSTANT , localInstant ) ;
Distance : 7

111
Tree	long result = alternatesList . getSmallestCoveringDependency ( this , drawShapesCheckBox ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( this , drawShapesCheckBox ) ;
Distance : 6

112
Tree	long result = alternatesList . getSmallestCoveringDependency ( localInstant . copySelf () , NUMBER_CONSTANT ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( localInstant . copySelf () , NUMBER_CONSTANT ) ;
Distance : 6

113
Tree	long result = getFakeReturnValues ( actualInvocationStackTrace , reach , extensionRegistry , iZone , iZone ) ;
Code	long result = getFakeReturnValues ( actualInvocationStackTrace , reach , extensionRegistry , iZone , iZone ) ;
Distance : 9

114
Tree	long result = getFakeReturnValues ( localInstant , reach , extensionRegistry , iZone , iZone ) ;
Code	long result = getFakeReturnValues ( localInstant , reach , extensionRegistry , iZone , iZone ) ;
Distance : 9

115
Tree	long result = getFakeReturnValues ( actualInvocationStackTrace , reach , i2s2 , iZone , iZone ) ;
Code	long result = getFakeReturnValues ( actualInvocationStackTrace , reach , i2s2 , iZone , iZone ) ;
Distance : 9

116
Tree	long result = alternatesList . countActual ( localInstant , reach ) ;
Code	long result = alternatesList . countActual ( localInstant , reach ) ;
Distance : 5

117
Tree	final long result = alternatesList . getSmallestCoveringDependency ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET ) ;
Code	final long result = alternatesList . getSmallestCoveringDependency ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET ) ;
Distance : 6

118
Tree	long result = getFakeReturnValues ( namespaceToRequire , reach , extensionRegistry , iZone , iZone ) ;
Code	long result = getFakeReturnValues ( namespaceToRequire , reach , extensionRegistry , iZone , iZone ) ;
Distance : 9

119
Tree	final long result = alternatesList . getSmallestCoveringDependency ( numberOfPoints , Es6ToEs3Util.CANNOT_CONVERT_YET ) ;
Code	final long result = alternatesList . getSmallestCoveringDependency ( numberOfPoints , Es6ToEs3Util.CANNOT_CONVERT_YET ) ;
Distance : 7

120
Tree	long result = alternatesList . countActual ( NUMBER_CONSTANT , localInstant ) ;
Code	long result = alternatesList . countActual ( NUMBER_CONSTANT , localInstant ) ;
Distance : 6

121
Tree	final long result = alternatesList . createRandomGenerator ( numberOfPoints , false ) ;
Code	final long result = alternatesList . createRandomGenerator ( numberOfPoints , false ) ;
Distance : 6

122
Tree	long result = alternatesList . getAuthor ( NUMBER_CONSTANT , localInstant ) ;
Code	long result = alternatesList . getAuthor ( NUMBER_CONSTANT , localInstant ) ;
Distance : 6

123
Tree	long result = alternatesList . getSmallestCoveringDependency ( numberOfPoints . isVarArgs () , NUMBER_CONSTANT ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( numberOfPoints . isVarArgs () , NUMBER_CONSTANT ) ;
Distance : 7

124
Tree	long result = alternatesList . trimSuspendParameterTypes ( localInstant . isVarArgs () , NUMBER_CONSTANT ) ;
Code	long result = alternatesList . trimSuspendParameterTypes ( localInstant . isVarArgs () , NUMBER_CONSTANT ) ;
Distance : 6

125
Tree	final long result = alternatesList . trimSuspendParameterTypes ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET ) ;
Code	final long result = alternatesList . trimSuspendParameterTypes ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET ) ;
Distance : 6

126
Tree	long result = getFakeReturnValues ( localInstant , reach , i2s2 , iZone , iZone ) ;
Code	long result = getFakeReturnValues ( localInstant , reach , i2s2 , iZone , iZone ) ;
Distance : 9

127
Tree	long result = getProvider ( actualInvocationStackTrace , configureWith () , null ) ;
Code	long result = getProvider ( actualInvocationStackTrace , configureWith () , null ) ;
Distance : 7

128
Tree	final long result = alternatesList . trimSuspendParameterTypes ( actualInvocationStackTrace , false ) ;
Code	final long result = alternatesList . trimSuspendParameterTypes ( actualInvocationStackTrace , false ) ;
Distance : 6

129
Tree	long result = alternatesList . instantiate ( NUMBER_CONSTANT , localInstant ) ;
Code	long result = alternatesList . instantiate ( NUMBER_CONSTANT , localInstant ) ;
Distance : 6

130
Tree	long result = getFakeReturnValues ( actualInvocationStackTrace , reach , extensionRegistry , iZone , null ) ;
Code	long result = getFakeReturnValues ( actualInvocationStackTrace , reach , extensionRegistry , iZone , null ) ;
Distance : 9

131
Tree	long result = getFakeReturnValues ( toSolve , configureWith () , null ) ;
Code	long result = getFakeReturnValues ( toSolve , configureWith () , null ) ;
Distance : 7

132
Tree	long result = getFakeReturnValues ( localInstant , reach , extensionRegistry , iZone , null ) ;
Code	long result = getFakeReturnValues ( localInstant , reach , extensionRegistry , iZone , null ) ;
Distance : 9

133
Tree	long result = getFakeReturnValues ( actualInvocationStackTrace , reach , i2s2 , iZone , null ) ;
Code	long result = getFakeReturnValues ( actualInvocationStackTrace , reach , i2s2 , iZone , null ) ;
Distance : 9

134
Tree	final long result = alternatesList . trimSuspendParameterTypes ( numberOfPoints , false ) ;
Code	final long result = alternatesList . trimSuspendParameterTypes ( numberOfPoints , false ) ;
Distance : 6

135
Tree	long result = alternatesList . fakeReturnValues ( localInstant ) ;
Code	long result = alternatesList . fakeReturnValues ( localInstant ) ;
Distance : 6

136
Tree	long result = alternatesList . getSmallestCoveringDependency ( localInstant , reach , i2s2 , getPropertyReservedNamingNonFirstChars () ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( localInstant , reach , i2s2 , getPropertyReservedNamingNonFirstChars () ) ;
Distance : 7

137
Tree	long result = getFakeReturnValues ( namespaceToRequire , reach , extensionRegistry , iZone , null ) ;
Code	long result = getFakeReturnValues ( namespaceToRequire , reach , extensionRegistry , iZone , null ) ;
Distance : 9

138
Tree	long result = getProvider ( actualInvocationStackTrace , reach , false ) ;
Code	long result = getProvider ( actualInvocationStackTrace , reach , false ) ;
Distance : 6

139
Tree	long result = alternatesList . getSmallestCoveringDependency ( this . drawShapesCheckBox . getGenericReturnType () , NUMBER_CONSTANT ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( this . drawShapesCheckBox . getGenericReturnType () , NUMBER_CONSTANT ) ;
Distance : 9

140
Tree	final long result = alternatesList . trimSuspendParameterTypes ( actualInvocationStackTrace , Es6ToEs3Util.CANNOT_CONVERT_YET ) ;
Code	final long result = alternatesList . trimSuspendParameterTypes ( actualInvocationStackTrace , Es6ToEs3Util.CANNOT_CONVERT_YET ) ;
Distance : 7

141
Tree	long result = getFakeReturnValues ( NestableErrorTest , reach , false ) ;
Code	long result = getFakeReturnValues ( NestableErrorTest , reach , false ) ;
Distance : 6

142
Tree	long result = getFakeReturnValues ( localInstant , reach , i2s2 , iZone , null ) ;
Code	long result = getFakeReturnValues ( localInstant , reach , i2s2 , iZone , null ) ;
Distance : 9

143
Tree	long result = alternatesList . toSolve ( localInstant ) ;
Code	long result = alternatesList . toSolve ( localInstant ) ;
Distance : 6

144
Tree	long result = alternatesList . getSmallestCoveringDependency ( localInstant , reach , i2s2 , getProvider () ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( localInstant , reach , i2s2 , getProvider () ) ;
Distance : 7

145
Tree	long result = alternatesList . getSmallestCoveringDependency ( numberOfPoints . getGenericReturnType () , NUMBER_CONSTANT ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( numberOfPoints . getGenericReturnType () , NUMBER_CONSTANT ) ;
Distance : 7

146
Tree	long result = alternatesList . excludeFieldNamesParam ( numberOfPoints ) ;
Code	long result = alternatesList . excludeFieldNamesParam ( numberOfPoints ) ;
Distance : 7

147
Tree	long result = getFakeReturnValues ( copyList , reach , false ) ;
Code	long result = getFakeReturnValues ( copyList , reach , false ) ;
Distance : 6

148
Tree	final long result = alternatesList . trimSuspendParameterTypes ( NUMBER_CONSTANT , localInstant ) ;
Code	final long result = alternatesList . trimSuspendParameterTypes ( NUMBER_CONSTANT , localInstant ) ;
Distance : 7

149
Tree	long result = alternatesList . getSmallestCoveringDependency ( localInstant , reach , extensionRegistry , getPropertyReservedNamingNonFirstChars () ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( localInstant , reach , extensionRegistry , getPropertyReservedNamingNonFirstChars () ) ;
Distance : 7

150
Tree	final long result = alternatesList . createRandomGenerator ( localInstant , false ) ;
Code	final long result = alternatesList . createRandomGenerator ( localInstant , false ) ;
Distance : 5

151
Tree	final long result = alternatesList . createRandomGenerator ( NUMBER_CONSTANT , localInstant ) ;
Code	final long result = alternatesList . createRandomGenerator ( NUMBER_CONSTANT , localInstant ) ;
Distance : 7

152
Tree	long result = getFakeReturnValues ( actualInvocationStackTrace , instrumentationData , false ) ;
Code	long result = getFakeReturnValues ( actualInvocationStackTrace , instrumentationData , false ) ;
Distance : 6

153
Tree	long result = alternatesList . trimSuspendParameterTypes ( this . drawShapesCheckBox . getGenericReturnType () , NUMBER_CONSTANT ) ;
Code	long result = alternatesList . trimSuspendParameterTypes ( this . drawShapesCheckBox . getGenericReturnType () , NUMBER_CONSTANT ) ;
Distance : 9

154
Tree	long result = alternatesList . fakeReturnValues ( numberOfPoints ) ;
Code	long result = alternatesList . fakeReturnValues ( numberOfPoints ) ;
Distance : 7

155
Tree	long result = alternatesList . getSmallestCoveringDependency ( numberOfPoints , reach , extensionRegistry , getPropertyReservedNamingNonFirstChars () ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( numberOfPoints , reach , extensionRegistry , getPropertyReservedNamingNonFirstChars () ) ;
Distance : 8

156
Tree	long result = alternatesList . getSmallestCoveringDependency ( localInstant , reach , MILLISECONDS , getPropertyReservedNamingNonFirstChars () ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( localInstant , reach , MILLISECONDS , getPropertyReservedNamingNonFirstChars () ) ;
Distance : 7

157
Tree	long result = alternatesList . toSolve ( numberOfPoints ) ;
Code	long result = alternatesList . toSolve ( numberOfPoints ) ;
Distance : 7

158
Tree	long result = alternatesList . createRandomGenerator ( localInstant , reach , i2s2 , getPropertyReservedNamingNonFirstChars () ) ;
Code	long result = alternatesList . createRandomGenerator ( localInstant , reach , i2s2 , getPropertyReservedNamingNonFirstChars () ) ;
Distance : 7

159
Tree	long result = alternatesList . getSmallestCoveringDependency ( numberOfPoints , reach , i2s2 , getPropertyReservedNamingNonFirstChars () ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( numberOfPoints , reach , i2s2 , getPropertyReservedNamingNonFirstChars () ) ;
Distance : 8

160
Tree	long result = getFakeReturnValues ( namespaceToRequire , reach , i2s2 , iZone , null ) ;
Code	long result = getFakeReturnValues ( namespaceToRequire , reach , i2s2 , iZone , null ) ;
Distance : 9

161
Tree	long result = alternatesList . tStart ( localInstant ) ;
Code	long result = alternatesList . tStart ( localInstant ) ;
Distance : 6

162
Tree	long result = alternatesList . getSmallestCoveringDependency ( localInstant , reach , i2s2 , iOffsetParsed . getPropertyReservedNamingNonFirstChars () ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( localInstant , reach , i2s2 , iOffsetParsed . getPropertyReservedNamingNonFirstChars () ) ;
Distance : 9

163
Tree	long result = alternatesList . trimSuspendParameterTypes ( localInstant , reach , i2s2 , getPropertyReservedNamingNonFirstChars () ) ;
Code	long result = alternatesList . trimSuspendParameterTypes ( localInstant , reach , i2s2 , getPropertyReservedNamingNonFirstChars () ) ;
Distance : 7

164
Tree	long result = alternatesList . getSmallestCoveringDependency ( localInstant , reach , i2s2 , FieldUtils . getPropertyReservedNamingNonFirstChars () ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( localInstant , reach , i2s2 , FieldUtils . getPropertyReservedNamingNonFirstChars () ) ;
Distance : 9

165
Tree	long result = alternatesList . createRandomGenerator ( this . drawShapesCheckBox . getGenericReturnType () , NUMBER_CONSTANT ) ;
Code	long result = alternatesList . createRandomGenerator ( this . drawShapesCheckBox . getGenericReturnType () , NUMBER_CONSTANT ) ;
Distance : 9

166
Tree	long result = alternatesList . getSmallestCoveringDependency ( numberOfPoints . copySelf () , NUMBER_CONSTANT ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( numberOfPoints . copySelf () , NUMBER_CONSTANT ) ;
Distance : 7

167
Tree	long result = alternatesList . getSmallestCoveringDependency ( localInstant . compilerModule () , NUMBER_CONSTANT ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( localInstant . compilerModule () , NUMBER_CONSTANT ) ;
Distance : 6

168
Tree	long result = alternatesList . getSmallestCoveringDependency ( this . drawShapesCheckBox . get () , NUMBER_CONSTANT ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( this . drawShapesCheckBox . get () , NUMBER_CONSTANT ) ;
Distance : 9

169
Tree	long result = alternatesList . getSmallestCoveringDependency ( this . drawShapesCheckBox . isVarArgs () , NUMBER_CONSTANT ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( this . drawShapesCheckBox . isVarArgs () , NUMBER_CONSTANT ) ;
Distance : 9

170
Tree	long result = alternatesList . fakeReturnValues ( actualInvocationStackTrace ) ;
Code	long result = alternatesList . fakeReturnValues ( actualInvocationStackTrace ) ;
Distance : 7

171
Tree	long result = getFakeReturnValues ( actualInvocationStackTrace , reach , extensionRegistry , iChrono , null ) ;
Code	long result = getFakeReturnValues ( actualInvocationStackTrace , reach , extensionRegistry , iChrono , null ) ;
Distance : 9

172
Tree	long result = getFakeReturnValues ( numberOfPoints , reach , false ) ;
Code	long result = getFakeReturnValues ( numberOfPoints , reach , false ) ;
Distance : 6

173
Tree	long result = getFakeReturnValues ( actualInvocationStackTrace , reach , checkedFeatures , iZone , null ) ;
Code	long result = getFakeReturnValues ( actualInvocationStackTrace , reach , checkedFeatures , iZone , null ) ;
Distance : 9

174
Tree	final long result = alternatesList . getSmallestCoveringDependency ( actualInvocationStackTrace , false ) ;
Code	final long result = alternatesList . getSmallestCoveringDependency ( actualInvocationStackTrace , false ) ;
Distance : 6

175
Tree	long result = alternatesList . getSmallestCoveringDependency ( this . drawShapesCheckBox . configureWith () , NUMBER_CONSTANT ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( this . drawShapesCheckBox . configureWith () , NUMBER_CONSTANT ) ;
Distance : 9

176
Tree	long result = alternatesList . getSmallestCoveringDependency ( localInstant , reach , i2s2 , iChrono . getPropertyReservedNamingNonFirstChars () ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( localInstant , reach , i2s2 , iChrono . getPropertyReservedNamingNonFirstChars () ) ;
Distance : 9

177
Tree	long result = alternatesList . trimSuspendParameterTypes ( this . drawShapesCheckBox . isVarArgs () , NUMBER_CONSTANT ) ;
Code	long result = alternatesList . trimSuspendParameterTypes ( this . drawShapesCheckBox . isVarArgs () , NUMBER_CONSTANT ) ;
Distance : 9

178
Tree	long result = alternatesList . getSmallestCoveringDependency ( localInstant , reach , extensionRegistry , FieldUtils . getPropertyReservedNamingNonFirstChars () ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( localInstant , reach , extensionRegistry , FieldUtils . getPropertyReservedNamingNonFirstChars () ) ;
Distance : 9

179
Tree	long result = alternatesList . excludeFieldNamesParam ( localInstant ) ;
Code	long result = alternatesList . excludeFieldNamesParam ( localInstant ) ;
Distance : 6

180
Tree	long result = alternatesList . getSmallestCoveringDependency ( this . drawShapesCheckBox . getArguments () , NUMBER_CONSTANT ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( this . drawShapesCheckBox . getArguments () , NUMBER_CONSTANT ) ;
Distance : 9

181
Tree	long result = alternatesList . getSmallestCoveringDependency ( localInstant , reach , i2s2 , iZone . getPropertyReservedNamingNonFirstChars () ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( localInstant , reach , i2s2 , iZone . getPropertyReservedNamingNonFirstChars () ) ;
Distance : 9

182
Tree	long result = getFakeReturnValues ( NestableErrorTest , configureWith () , null ) ;
Code	long result = getFakeReturnValues ( NestableErrorTest , configureWith () , null ) ;
Distance : 7

183
Tree	long result = alternatesList . fakeReturnValues ( localInstant , new HashSet ( localInstant ) ) ;
Code	long result = alternatesList . fakeReturnValues ( localInstant , new HashSet ( localInstant ) ) ;
Distance : 7

184
Tree	long result = alternatesList . fakeReturnValues ( localInstant , new HashSet ( NestableErrorTest ) ) ;
Code	long result = alternatesList . fakeReturnValues ( localInstant , new HashSet ( NestableErrorTest ) ) ;
Distance : 7

185
Tree	long result = alternatesList . fakeReturnValues ( localInstant , new HashSet ( instrumentationData ) ) ;
Code	long result = alternatesList . fakeReturnValues ( localInstant , new HashSet ( instrumentationData ) ) ;
Distance : 7

186
Tree	long result = alternatesList . fakeReturnValues ( numberOfPoints , new HashSet ( localInstant ) ) ;
Code	long result = alternatesList . fakeReturnValues ( numberOfPoints , new HashSet ( localInstant ) ) ;
Distance : 8

187
Tree	long result = alternatesList . fakeReturnValues ( numberOfPoints , new HashSet ( NestableErrorTest ) ) ;
Code	long result = alternatesList . fakeReturnValues ( numberOfPoints , new HashSet ( NestableErrorTest ) ) ;
Distance : 8

188
Tree	long result = getFakeReturnValues ( copyList , configureWith () , null ) ;
Code	long result = getFakeReturnValues ( copyList , configureWith () , null ) ;
Distance : 7

189
Tree	long result = alternatesList . fakeReturnValues ( localInstant , new HashSet ( favorsCommas ) ) ;
Code	long result = alternatesList . fakeReturnValues ( localInstant , new HashSet ( favorsCommas ) ) ;
Distance : 7

190
Tree	long result = alternatesList . getSmallestCoveringDependency ( localInstant , reach , i2s2 , iOffsetParsed . getPropertyReservedNamingNonFirstChars ( localInstant ) ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( localInstant , reach , i2s2 , iOffsetParsed . getPropertyReservedNamingNonFirstChars ( localInstant ) ) ;
Distance : 11

191
Tree	long result = alternatesList . getSmallestCoveringDependency ( localInstant , reach , i2s2 , FieldUtils . getPropertyReservedNamingNonFirstChars ( localInstant ) ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( localInstant , reach , i2s2 , FieldUtils . getPropertyReservedNamingNonFirstChars ( localInstant ) ) ;
Distance : 11

192
Tree	long result = alternatesList . fakeReturnValues ( numberOfPoints , new HashSet ( instrumentationData ) ) ;
Code	long result = alternatesList . fakeReturnValues ( numberOfPoints , new HashSet ( instrumentationData ) ) ;
Distance : 8

193
Tree	long result = alternatesList . getSmallestCoveringDependency ( localInstant , reach , i2s2 , iChrono . getPropertyReservedNamingNonFirstChars ( localInstant ) ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( localInstant , reach , i2s2 , iChrono . getPropertyReservedNamingNonFirstChars ( localInstant ) ) ;
Distance : 11

194
Tree	long result = alternatesList . getSmallestCoveringDependency ( localInstant , reach , extensionRegistry , FieldUtils . getPropertyReservedNamingNonFirstChars ( localInstant ) ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( localInstant , reach , extensionRegistry , FieldUtils . getPropertyReservedNamingNonFirstChars ( localInstant ) ) ;
Distance : 11

195
Tree	long result = alternatesList . getSmallestCoveringDependency ( localInstant , reach , i2s2 , iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( localInstant , reach , i2s2 , iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ) ;
Distance : 11

196
Tree	long result = alternatesList . excludeFieldNamesParam ( localInstant , new HashSet ( localInstant ) ) ;
Code	long result = alternatesList . excludeFieldNamesParam ( localInstant , new HashSet ( localInstant ) ) ;
Distance : 7

197
Tree	long result = alternatesList . getSmallestCoveringDependency ( numberOfPoints , reach , i2s2 , iOffsetParsed . getPropertyReservedNamingNonFirstChars ( localInstant ) ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( numberOfPoints , reach , i2s2 , iOffsetParsed . getPropertyReservedNamingNonFirstChars ( localInstant ) ) ;
Distance : 12

198
Tree	long result = alternatesList . getSmallestCoveringDependency ( numberOfPoints , reach , i2s2 , FieldUtils . getPropertyReservedNamingNonFirstChars ( localInstant ) ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( numberOfPoints , reach , i2s2 , FieldUtils . getPropertyReservedNamingNonFirstChars ( localInstant ) ) ;
Distance : 12

199
Tree	long result = alternatesList . getSmallestCoveringDependency ( localInstant , reach , MILLISECONDS , FieldUtils . getPropertyReservedNamingNonFirstChars ( localInstant ) ) ;
Code	long result = alternatesList . getSmallestCoveringDependency ( localInstant , reach , MILLISECONDS , FieldUtils . getPropertyReservedNamingNonFirstChars ( localInstant ) ) ;
Distance : 11

========================================================================


========================================================================
Example Number: 114
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return computeCovarianceMatrix ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return computeCovarianceMatrix ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 5

1
Tree	return NUMBER_CONSTANT / endIndex ;
Code	return NUMBER_CONSTANT / endIndex ;
Distance : 10

2
Tree	return iZone . fieldWasInitializedUsingContructorArgs ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . fieldWasInitializedUsingContructorArgs ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

3
Tree	return ! iZone . htmlEscape ( localInstant ) && <= ;
Code	return ! iZone . htmlEscape ( localInstant ) && <= ;
Distance : 7

4
Tree	return ! iChrono && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Code	return ! iChrono && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Distance : 9

5
Tree	return ! iZone && ! iZone . htmlEscape ( localInstant ) ;
Code	return ! iZone && ! iZone . htmlEscape ( localInstant ) ;
Distance : 9

6
Tree	return retrieveLineSegments ( namespaceToRequire , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return retrieveLineSegments ( namespaceToRequire , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 6

7
Tree	return ! iZone . defaultReturnValues ( localInstant ) && <= ;
Code	return ! iZone . defaultReturnValues ( localInstant ) && <= ;
Distance : 7

8
Tree	return compilerExecutor != com.google.protobuf.GeneratedMessageV3 ;
Code	return compilerExecutor != com.google.protobuf.GeneratedMessageV3 ;
Distance : 10

9
Tree	return ( ( namespaceToRequire ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( namespaceToRequire ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

10
Tree	return iZone . htmlEscape ( localInstant ) ;
Code	return iZone . htmlEscape ( localInstant ) ;
Distance : 5

11
Tree	return iZone . fieldWasInitializedUsingContructorArgs ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . fieldWasInitializedUsingContructorArgs ( STRING_CONSTANT , localInstant ) ;
Distance : 5

12
Tree	return decamelizeMatcher ( localInstant , UTF_8 , false ) ;
Code	return decamelizeMatcher ( localInstant , UTF_8 , false ) ;
Distance : 5

13
Tree	return ( ( actualInvocationStackTrace ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( actualInvocationStackTrace ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

14
Tree	return NUMBER_CONSTANT / iPrinter ;
Code	return NUMBER_CONSTANT / iPrinter ;
Distance : 10

15
Tree	return ! iChrono && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Code	return ! iChrono && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Distance : 10

16
Tree	return iZone != TimeUnit.SECONDS ;
Code	return iZone != TimeUnit.SECONDS ;
Distance : 9

17
Tree	return ! iZone && ! iZone . htmlEscape () ;
Code	return ! iZone && ! iZone . htmlEscape () ;
Distance : 10

18
Tree	return computeCovarianceMatrix ( localInstant , UTF_8 ) ;
Code	return computeCovarianceMatrix ( localInstant , UTF_8 ) ;
Distance : 6

19
Tree	return iZone . htmlEscape ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . htmlEscape ( STRING_CONSTANT , localInstant ) ;
Distance : 5

20
Tree	return retrieveLineSegments ( localInstant , sampleStats2 ) ;
Code	return retrieveLineSegments ( localInstant , sampleStats2 ) ;
Distance : 6

21
Tree	return retrieveLineSegments ( namespaceToRequire , UTF_8 ) ;
Code	return retrieveLineSegments ( namespaceToRequire , UTF_8 ) ;
Distance : 7

22
Tree	return NUMBER_CONSTANT / iOffsetParsed ;
Code	return NUMBER_CONSTANT / iOffsetParsed ;
Distance : 10

23
Tree	return ! iZone . htmlEscape ( localInstant ) && : ;
Code	return ! iZone . htmlEscape ( localInstant ) && : ;
Distance : 7

24
Tree	return ! iZone && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Code	return ! iZone && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Distance : 10

25
Tree	return defaultReturnValues ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return defaultReturnValues ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 5

26
Tree	return iZone . defaultReturnValues ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . defaultReturnValues ( STRING_CONSTANT , localInstant ) ;
Distance : 5

27
Tree	return iZone . getMockitoInterceptor ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . getMockitoInterceptor ( STRING_CONSTANT , localInstant ) ;
Distance : 5

28
Tree	return computeCovarianceMatrix ( localInstant , sampleStats2 ) ;
Code	return computeCovarianceMatrix ( localInstant , sampleStats2 ) ;
Distance : 6

29
Tree	return ( ( namespaceToRequire ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( namespaceToRequire ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

30
Tree	return decamelizeMatcher ( this , localInstant ) ;
Code	return decamelizeMatcher ( this , localInstant ) ;
Distance : 7

31
Tree	return retrieveLineSegments ( this , groupIndex ) ;
Code	return retrieveLineSegments ( this , groupIndex ) ;
Distance : 7

32
Tree	return computeCovarianceMatrix ( localInstant , UTF_8 , clazz ) ;
Code	return computeCovarianceMatrix ( localInstant , UTF_8 , clazz ) ;
Distance : 5

33
Tree	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 ) ;
Code	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 ) ;
Distance : 7

34
Tree	return computeCovarianceMatrix ( actualInvocationStackTrace , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return computeCovarianceMatrix ( actualInvocationStackTrace , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 6

35
Tree	return ( ( localInstant ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( localInstant ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

36
Tree	return iZone . defaultReturnValues ( null , populationSize , checkedFeatures , null ) ;
Code	return iZone . defaultReturnValues ( null , populationSize , checkedFeatures , null ) ;
Distance : 6

37
Tree	return iZone . stubber ( localInstant ) ;
Code	return iZone . stubber ( localInstant ) ;
Distance : 5

38
Tree	return retrieveLineSegments ( localInstant , UTF_8 , clazz , iZone ) ;
Code	return retrieveLineSegments ( localInstant , UTF_8 , clazz , iZone ) ;
Distance : 7

39
Tree	return iZone . defaultReturnValues ( localInstant , false ) ;
Code	return iZone . defaultReturnValues ( localInstant , false ) ;
Distance : 3

40
Tree	return iZone . htmlEscape ( localInstant , false ) ;
Code	return iZone . htmlEscape ( localInstant , false ) ;
Distance : 3

41
Tree	return defaultReturnValues ( this , localInstant ) ;
Code	return defaultReturnValues ( this , localInstant ) ;
Distance : 7

42
Tree	return iZone . defaultReturnValues ( NUMBER_CONSTANT , iPrinter ) ;
Code	return iZone . defaultReturnValues ( NUMBER_CONSTANT , iPrinter ) ;
Distance : 5

43
Tree	return ( ( zeroOffsetText ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( zeroOffsetText ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

44
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

45
Tree	return computeCovarianceMatrix ( this , groupIndex ) ;
Code	return computeCovarianceMatrix ( this , groupIndex ) ;
Distance : 7

46
Tree	return ! FieldUtils && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Code	return ! FieldUtils && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Distance : 10

47
Tree	return iZone . getImageMap ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . getImageMap ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

48
Tree	return NUMBER_CONSTANT / FieldUtils ;
Code	return NUMBER_CONSTANT / FieldUtils ;
Distance : 10

49
Tree	return iZone . createArgumentsAreDifferentException ( localInstant , false ) ;
Code	return iZone . createArgumentsAreDifferentException ( localInstant , false ) ;
Distance : 3

50
Tree	return iZone . getTimeInstance ( localInstant , false ) ;
Code	return iZone . getTimeInstance ( localInstant , false ) ;
Distance : 3

51
Tree	return iZone . createArgumentsAreDifferentException ( localInstant , UTF_8 , null ) ;
Code	return iZone . createArgumentsAreDifferentException ( localInstant , UTF_8 , null ) ;
Distance : 3

52
Tree	return iZone . defaultReturnValues ( STRING_CONSTANT , subtype ) ;
Code	return iZone . defaultReturnValues ( STRING_CONSTANT , subtype ) ;
Distance : 5

53
Tree	return iZone . defaultReturnValues ( this , localInstant ) ;
Code	return iZone . defaultReturnValues ( this , localInstant ) ;
Distance : 5

54
Tree	return iZone . defaultReturnValues ( actualInvocationStackTrace , false ) ;
Code	return iZone . defaultReturnValues ( actualInvocationStackTrace , false ) ;
Distance : 4

55
Tree	return retrieveLineSegments ( localInstant , sampleStats2 , clazz ) ;
Code	return retrieveLineSegments ( localInstant , sampleStats2 , clazz ) ;
Distance : 5

56
Tree	return retrieveLineSegments ( localInstant , UTF_8 ) ;
Code	return retrieveLineSegments ( localInstant , UTF_8 ) ;
Distance : 6

57
Tree	return iZone . createArgumentsAreDifferentException ( localInstant ) ;
Code	return iZone . createArgumentsAreDifferentException ( localInstant ) ;
Distance : 5

58
Tree	return iZone . getTimeInstance ( localInstant ) ;
Code	return iZone . getTimeInstance ( localInstant ) ;
Distance : 5

59
Tree	return iZone . fieldWasInitializedUsingContructorArgs ( localInstant , false ) ;
Code	return iZone . fieldWasInitializedUsingContructorArgs ( localInstant , false ) ;
Distance : 3

60
Tree	return iZone . getMockitoInterceptor ( localInstant , false ) ;
Code	return iZone . getMockitoInterceptor ( localInstant , false ) ;
Distance : 3

61
Tree	return iZone . defaultReturnValues ( RendererChangeListener , false ) ;
Code	return iZone . defaultReturnValues ( RendererChangeListener , false ) ;
Distance : 4

62
Tree	return iChrono != iZone ;
Code	return iChrono != iZone ;
Distance : 10

63
Tree	return iZone . getMockitoInterceptor ( localInstant ) ;
Code	return iZone . getMockitoInterceptor ( localInstant ) ;
Distance : 5

64
Tree	return iChrono != com.google.protobuf.GeneratedMessageV3 ;
Code	return iChrono != com.google.protobuf.GeneratedMessageV3 ;
Distance : 10

65
Tree	return iZone . defaultReturnValues ( this , zeroOffsetText ) ;
Code	return iZone . defaultReturnValues ( this , zeroOffsetText ) ;
Distance : 5

66
Tree	return iZone . defaultReturnValues ( this , drawShapesCheckBox ) ;
Code	return iZone . defaultReturnValues ( this , drawShapesCheckBox ) ;
Distance : 5

67
Tree	return ( ( NodeSubject ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( NodeSubject ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

68
Tree	return ! iZone && ! iZone . invokeSuper () ;
Code	return ! iZone && ! iZone . invokeSuper () ;
Distance : 10

69
Tree	return iZone . defaultReturnValues ( RendererChangeListener ) ;
Code	return iZone . defaultReturnValues ( RendererChangeListener ) ;
Distance : 6

70
Tree	return retrieveLineSegments ( this , zeroOffsetText ) ;
Code	return retrieveLineSegments ( this , zeroOffsetText ) ;
Distance : 7

71
Tree	return retrieveLineSegments ( namespaceToRequire , UTF_8 , clazz , iZone ) ;
Code	return retrieveLineSegments ( namespaceToRequire , UTF_8 , clazz , iZone ) ;
Distance : 7

72
Tree	return ( ( localInstant ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( localInstant ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

73
Tree	return iZone . htmlEscape ( this , localInstant ) ;
Code	return iZone . htmlEscape ( this , localInstant ) ;
Distance : 5

74
Tree	return iZone . defaultReturnValues ( STRING_CONSTANT , populationSize ) ;
Code	return iZone . defaultReturnValues ( STRING_CONSTANT , populationSize ) ;
Distance : 5

75
Tree	return iPrinter != iZone ;
Code	return iPrinter != iZone ;
Distance : 10

76
Tree	return iZone != endIndex ;
Code	return iZone != endIndex ;
Distance : 9

77
Tree	return computeCovarianceMatrix ( localInstant , sampleStats2 , clazz , iZone ) ;
Code	return computeCovarianceMatrix ( localInstant , sampleStats2 , clazz , iZone ) ;
Distance : 7

78
Tree	return iZone . defaultReturnValues ( actualInvocationStackTrace , UTF_8 , null ) ;
Code	return iZone . defaultReturnValues ( actualInvocationStackTrace , UTF_8 , null ) ;
Distance : 4

79
Tree	return iZone . createArgumentsAreDifferentException ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . createArgumentsAreDifferentException ( STRING_CONSTANT , localInstant ) ;
Distance : 5

80
Tree	return ( ( actualInvocationStackTrace ) localInstant ) . getStubbingLookupListeners ( localInstant , EMPTY ) ;
Code	return ( ( actualInvocationStackTrace ) localInstant ) . getStubbingLookupListeners ( localInstant , EMPTY ) ;
Distance : 10

81
Tree	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Code	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Distance : 9

82
Tree	return retrieveLineSegments ( localInstant , UTF_8 , false ) ;
Code	return retrieveLineSegments ( localInstant , UTF_8 , false ) ;
Distance : 5

83
Tree	return iOffsetParsed != iZone ;
Code	return iOffsetParsed != iZone ;
Distance : 10

84
Tree	return iZone . rangeAxisLocations ( localInstant ) ;
Code	return iZone . rangeAxisLocations ( localInstant ) ;
Distance : 5

85
Tree	return retrieveLineSegments ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Code	return retrieveLineSegments ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Distance : 5

86
Tree	return ! iZone && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Code	return ! iZone && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Distance : 9

87
Tree	return iZone . getTimeInstance ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . getTimeInstance ( STRING_CONSTANT , localInstant ) ;
Distance : 5

88
Tree	return iZone . createArgumentsAreDifferentException ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . createArgumentsAreDifferentException ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

89
Tree	return iPrinter != com.google.protobuf.GeneratedMessageV3 ;
Code	return iPrinter != com.google.protobuf.GeneratedMessageV3 ;
Distance : 10

90
Tree	return ( ( namespaceToRequire ) localInstant ) . getPeriod ( localInstant , UTF_8 ) ;
Code	return ( ( namespaceToRequire ) localInstant ) . getPeriod ( localInstant , UTF_8 ) ;
Distance : 10

91
Tree	return iZone . getTimeInstance ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . getTimeInstance ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

92
Tree	return iZone . ExceptionFactory ( localInstant ) ;
Code	return iZone . ExceptionFactory ( localInstant ) ;
Distance : 5

93
Tree	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 ) ;
Code	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 ) ;
Distance : 7

94
Tree	return computeCovarianceMatrix ( localInstant , UTF_8 , false ) ;
Code	return computeCovarianceMatrix ( localInstant , UTF_8 , false ) ;
Distance : 5

95
Tree	return NUMBER_CONSTANT / iZone ;
Code	return NUMBER_CONSTANT / iZone ;
Distance : 10

96
Tree	return iOffsetParsed != com.google.protobuf.GeneratedMessageV3 ;
Code	return iOffsetParsed != com.google.protobuf.GeneratedMessageV3 ;
Distance : 10

97
Tree	return iZone . defaultReturnValues ( localInstant , UTF_8 , null ) ;
Code	return iZone . defaultReturnValues ( localInstant , UTF_8 , null ) ;
Distance : 3

98
Tree	return iZone . defaultReturnValues ( this , subtype ) ;
Code	return iZone . defaultReturnValues ( this , subtype ) ;
Distance : 5

99
Tree	return iZone . defaultReturnValues ( this , groupIndex ) ;
Code	return iZone . defaultReturnValues ( this , groupIndex ) ;
Distance : 5

100
Tree	return NUMBER_CONSTANT / iChrono ;
Code	return NUMBER_CONSTANT / iChrono ;
Distance : 10

101
Tree	return retrieveLineSegments ( localInstant , sampleStats2 , false ) ;
Code	return retrieveLineSegments ( localInstant , sampleStats2 , false ) ;
Distance : 5

102
Tree	return decamelizeMatcher ( localInstant , UTF_8 ) ;
Code	return decamelizeMatcher ( localInstant , UTF_8 ) ;
Distance : 6

103
Tree	return ! FieldUtils && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Code	return ! FieldUtils && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Distance : 9

104
Tree	return retrieveLineSegments ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return retrieveLineSegments ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 5

105
Tree	return iZone . createArgumentsAreDifferentException ( this , localInstant ) ;
Code	return iZone . createArgumentsAreDifferentException ( this , localInstant ) ;
Distance : 5

106
Tree	return ( ( namespaceToRequire ) this ) . getStubbingLookupListeners ( localInstant , EMPTY ) ;
Code	return ( ( namespaceToRequire ) this ) . getStubbingLookupListeners ( localInstant , EMPTY ) ;
Distance : 10

107
Tree	return iZone . htmlEscape ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . htmlEscape ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

108
Tree	return retrieveLineSegments ( namespaceToRequire , UTF_8 , false ) ;
Code	return retrieveLineSegments ( namespaceToRequire , UTF_8 , false ) ;
Distance : 6

109
Tree	return computeCovarianceMatrix ( localInstant , sampleStats2 , false ) ;
Code	return computeCovarianceMatrix ( localInstant , sampleStats2 , false ) ;
Distance : 5

110
Tree	return iZone . htmlEscape ( this , zeroOffsetText ) ;
Code	return iZone . htmlEscape ( this , zeroOffsetText ) ;
Distance : 5

111
Tree	return NUMBER_CONSTANT / ChronologyType ;
Code	return NUMBER_CONSTANT / ChronologyType ;
Distance : 10

112
Tree	return iZone . defaultReturnValues ( localInstant ) ;
Code	return iZone . defaultReturnValues ( localInstant ) ;
Distance : 5

113
Tree	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 , false ) ;
Code	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 , false ) ;
Distance : 6

114
Tree	return ( ( namespaceToRequire ) this ) . makeStackTracesClean ( localInstant , UTF_8 ) ;
Code	return ( ( namespaceToRequire ) this ) . makeStackTracesClean ( localInstant , UTF_8 ) ;
Distance : 10

115
Tree	return ( ( crosshairState ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( crosshairState ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

116
Tree	return iZone . defaultReturnValues ( actualInvocationStackTrace ) ;
Code	return iZone . defaultReturnValues ( actualInvocationStackTrace ) ;
Distance : 6

117
Tree	return iZone . defaultReturnValues ( localInstant , UTF_8 ) ;
Code	return iZone . defaultReturnValues ( localInstant , UTF_8 ) ;
Distance : 4

118
Tree	return iZone . getMockitoInterceptor ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . getMockitoInterceptor ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

119
Tree	return iZone . defaultReturnValues ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . defaultReturnValues ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

120
Tree	return iZone != iPrinter ;
Code	return iZone != iPrinter ;
Distance : 9

121
Tree	return iZone . fieldWasInitializedUsingContructorArgs ( localInstant ) ;
Code	return iZone . fieldWasInitializedUsingContructorArgs ( localInstant ) ;
Distance : 5

122
Tree	return NUMBER_CONSTANT / compilerExecutor ;
Code	return NUMBER_CONSTANT / compilerExecutor ;
Distance : 10

123
Tree	return endIndex != iZone ;
Code	return endIndex != iZone ;
Distance : 10

124
Tree	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 , false ) ;
Code	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 , false ) ;
Distance : 6

125
Tree	return retrieveLineSegments ( actualInvocationStackTrace , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return retrieveLineSegments ( actualInvocationStackTrace , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 6

126
Tree	return ( ( actualInvocationStackTrace ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( actualInvocationStackTrace ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

127
Tree	return iZone . defaultReturnValues ( localInstant , sample2 ) ;
Code	return iZone . defaultReturnValues ( localInstant , sample2 ) ;
Distance : 4

128
Tree	return computeCovarianceMatrix ( localInstant , UTF_8 , clazz , iZone ) ;
Code	return computeCovarianceMatrix ( localInstant , UTF_8 , clazz , iZone ) ;
Distance : 7

129
Tree	return iZone . defaultReturnValues ( localInstant , sampleStats2 ) ;
Code	return iZone . defaultReturnValues ( localInstant , sampleStats2 ) ;
Distance : 4

130
Tree	return computeCovarianceMatrix ( namespaceToRequire , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return computeCovarianceMatrix ( namespaceToRequire , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 6

131
Tree	return retrieveLineSegments ( localInstant , UTF_8 , clazz ) ;
Code	return retrieveLineSegments ( localInstant , UTF_8 , clazz ) ;
Distance : 5

132
Tree	return iZone != AllowedSolutions.ANY_SIDE ;
Code	return iZone != AllowedSolutions.ANY_SIDE ;
Distance : 9

133
Tree	return iZone . getTimeInstance ( localInstant , UTF_8 , null ) ;
Code	return iZone . getTimeInstance ( localInstant , UTF_8 , null ) ;
Distance : 3

134
Tree	return ( ( namespaceToRequire ) localInstant ) . getStubbingLookupListeners ( localInstant , EMPTY ) ;
Code	return ( ( namespaceToRequire ) localInstant ) . getStubbingLookupListeners ( localInstant , EMPTY ) ;
Distance : 10

135
Tree	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 , clazz ) ;
Code	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 , clazz ) ;
Distance : 6

136
Tree	return decamelizeMatcher ( localInstant , UTF_8 , clazz ) ;
Code	return decamelizeMatcher ( localInstant , UTF_8 , clazz ) ;
Distance : 5

137
Tree	return ! iOffsetParsed && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Code	return ! iOffsetParsed && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Distance : 10

138
Tree	return endIndex != com.google.protobuf.GeneratedMessageV3 ;
Code	return endIndex != com.google.protobuf.GeneratedMessageV3 ;
Distance : 10

139
Tree	return retrieveLineSegments ( localInstant , sampleStats2 , clazz , iZone ) ;
Code	return retrieveLineSegments ( localInstant , sampleStats2 , clazz , iZone ) ;
Distance : 7

140
Tree	return iZone . _isMinimize ( localInstant ) ;
Code	return iZone . _isMinimize ( localInstant ) ;
Distance : 5

141
Tree	return ! iZone . defaultReturnValues ( localInstant ) && : ;
Code	return ! iZone . defaultReturnValues ( localInstant ) && : ;
Distance : 7

142
Tree	return createArgumentsAreDifferentException ( this , localInstant ) ;
Code	return createArgumentsAreDifferentException ( this , localInstant ) ;
Distance : 7

143
Tree	return ! iZone . htmlEscape ( localInstant ) && ^ ;
Code	return ! iZone . htmlEscape ( localInstant ) && ^ ;
Distance : 7

144
Tree	return ! iZone && ! iZone . getPropertyReservedNamingFirstChars () ;
Code	return ! iZone && ! iZone . getPropertyReservedNamingFirstChars () ;
Distance : 10

145
Tree	return retrieveLineSegments ( namespaceToRequire , UTF_8 , clazz ) ;
Code	return retrieveLineSegments ( namespaceToRequire , UTF_8 , clazz ) ;
Distance : 6

146
Tree	return computeCovarianceMatrix ( localInstant , sampleStats2 , clazz ) ;
Code	return computeCovarianceMatrix ( localInstant , sampleStats2 , clazz ) ;
Distance : 5

147
Tree	return ! FieldUtils . htmlEscape ( localInstant ) && <= ;
Code	return ! FieldUtils . htmlEscape ( localInstant ) && <= ;
Distance : 8

148
Tree	return iZone . htmlEscape ( localInstant , UTF_8 , null ) ;
Code	return iZone . htmlEscape ( localInstant , UTF_8 , null ) ;
Distance : 3

149
Tree	return ! iZone && ! iZone . getPropertyReservedNamingFirstChars ( localInstant ) ;
Code	return ! iZone && ! iZone . getPropertyReservedNamingFirstChars ( localInstant ) ;
Distance : 9

150
Tree	return iZone . rangeAxisLocations ( actualInvocationStackTrace ) ;
Code	return iZone . rangeAxisLocations ( actualInvocationStackTrace ) ;
Distance : 6

151
Tree	return iZone . subtype ( localInstant ) ;
Code	return iZone . subtype ( localInstant ) ;
Distance : 5

152
Tree	return iZone . boxPaint ( localInstant ) ;
Code	return iZone . boxPaint ( localInstant ) ;
Distance : 5

153
Tree	return ! iZone && ! iZone . invokeSuper ( localInstant ) ;
Code	return ! iZone && ! iZone . invokeSuper ( localInstant ) ;
Distance : 9

154
Tree	return iZone . fakeReturnValues ( localInstant ) ;
Code	return iZone . fakeReturnValues ( localInstant ) ;
Distance : 5

155
Tree	return retrieveLineSegments ( this , localInstant ) ;
Code	return retrieveLineSegments ( this , localInstant ) ;
Distance : 7

156
Tree	return ! iZone . defaultReturnValues ( localInstant ) && ^ ;
Code	return ! iZone . defaultReturnValues ( localInstant ) && ^ ;
Distance : 7

157
Tree	return decamelizeMatcher ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return decamelizeMatcher ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 5

158
Tree	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 , clazz , iZone ) ;
Code	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 , clazz , iZone ) ;
Distance : 7

159
Tree	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 , clazz , iZone ) ;
Code	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 , clazz , iZone ) ;
Distance : 7

160
Tree	return decamelizeMatcher ( localInstant , UTF_8 , clazz , iZone ) ;
Code	return decamelizeMatcher ( localInstant , UTF_8 , clazz , iZone ) ;
Distance : 7

161
Tree	return computeCovarianceMatrix ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Code	return computeCovarianceMatrix ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Distance : 5

162
Tree	return iZone . defaultReturnValues ( localInstant , CSV_SEARCH_CHARS , null ) ;
Code	return iZone . defaultReturnValues ( localInstant , CSV_SEARCH_CHARS , null ) ;
Distance : 3

163
Tree	return iZone . createArgumentsAreDifferentException ( localInstant , UTF_8 ) ;
Code	return iZone . createArgumentsAreDifferentException ( localInstant , UTF_8 ) ;
Distance : 4

164
Tree	return ! FieldUtils && ! iZone . htmlEscape ( localInstant ) ;
Code	return ! FieldUtils && ! iZone . htmlEscape ( localInstant ) ;
Distance : 9

165
Tree	return ( ( zeroOffsetText ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( zeroOffsetText ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

166
Tree	return computeCovarianceMatrix ( this , localInstant ) ;
Code	return computeCovarianceMatrix ( this , localInstant ) ;
Distance : 7

167
Tree	return iZone . defaultReturnValues ( localInstant , sample2 , null ) ;
Code	return iZone . defaultReturnValues ( localInstant , sample2 , null ) ;
Distance : 3

168
Tree	return ! FieldUtils && ! iZone . htmlEscape () ;
Code	return ! FieldUtils && ! iZone . htmlEscape () ;
Distance : 10

169
Tree	return iZone . getTimeInstance ( localInstant , UTF_8 ) ;
Code	return iZone . getTimeInstance ( localInstant , UTF_8 ) ;
Distance : 4

170
Tree	return iZone . defaultReturnValues ( localInstant , sampleStats2 , null ) ;
Code	return iZone . defaultReturnValues ( localInstant , sampleStats2 , null ) ;
Distance : 3

171
Tree	return iZone != vd ;
Code	return iZone != vd ;
Distance : 9

172
Tree	return ! FieldUtils . defaultReturnValues ( localInstant ) && <= ;
Code	return ! FieldUtils . defaultReturnValues ( localInstant ) && <= ;
Distance : 8

173
Tree	return iZone . htmlEscape ( localInstant , UTF_8 ) ;
Code	return iZone . htmlEscape ( localInstant , UTF_8 ) ;
Distance : 4

174
Tree	return ! iOffsetParsed && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Code	return ! iOffsetParsed && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Distance : 9

175
Tree	return ( ( actualInvocationStackTrace ) localInstant ) . getPeriod ( localInstant , UTF_8 ) ;
Code	return ( ( actualInvocationStackTrace ) localInstant ) . getPeriod ( localInstant , UTF_8 ) ;
Distance : 10

176
Tree	return iZone . defaultReturnValues ( null , populationSize , EMPTY , null ) ;
Code	return iZone . defaultReturnValues ( null , populationSize , EMPTY , null ) ;
Distance : 6

177
Tree	return retrieveLineSegments ( namespaceToRequire , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Code	return retrieveLineSegments ( namespaceToRequire , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Distance : 6

178
Tree	return retrieveLineSegments ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , TimeUnit.SECONDS ) ;
Code	return retrieveLineSegments ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , TimeUnit.SECONDS ) ;
Distance : 5

179
Tree	return retrieveLineSegments ( actualInvocationStackTrace , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Code	return retrieveLineSegments ( actualInvocationStackTrace , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Distance : 6

180
Tree	return computeCovarianceMatrix ( namespaceToRequire , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Code	return computeCovarianceMatrix ( namespaceToRequire , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Distance : 6

181
Tree	return decamelizeMatcher ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Code	return decamelizeMatcher ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Distance : 5

182
Tree	return iZone . defaultReturnValues ( actualInvocationStackTrace , UTF_8 ) ;
Code	return iZone . defaultReturnValues ( actualInvocationStackTrace , UTF_8 ) ;
Distance : 5

183
Tree	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 , clazz ) ;
Code	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 , clazz ) ;
Distance : 6

184
Tree	return computeCovarianceMatrix ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , TimeUnit.SECONDS ) ;
Code	return computeCovarianceMatrix ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , TimeUnit.SECONDS ) ;
Distance : 5

185
Tree	return iZone . htmlEscape ( null , populationSize , checkedFeatures , null ) ;
Code	return iZone . htmlEscape ( null , populationSize , checkedFeatures , null ) ;
Distance : 6

186
Tree	return iZone . defaultReturnValues ( null , populationSize , sample2 , null ) ;
Code	return iZone . defaultReturnValues ( null , populationSize , sample2 , null ) ;
Distance : 6

187
Tree	return iZone . defaultReturnValues ( localInstant , CSV_SEARCH_CHARS ) ;
Code	return iZone . defaultReturnValues ( localInstant , CSV_SEARCH_CHARS ) ;
Distance : 4

188
Tree	return iZone . defaultReturnValues ( null , populationSize , clazz , null ) ;
Code	return iZone . defaultReturnValues ( null , populationSize , clazz , null ) ;
Distance : 6

189
Tree	return iZone . defaultReturnValues ( null , populationSize , extensionRegistry , null ) ;
Code	return iZone . defaultReturnValues ( null , populationSize , extensionRegistry , null ) ;
Distance : 6

190
Tree	return iZone . defaultReturnValues ( null , populationSize , wantedCount , null ) ;
Code	return iZone . defaultReturnValues ( null , populationSize , wantedCount , null ) ;
Distance : 6

191
Tree	return iZone != null iZone ? ;
Code	return iZone != null iZone ? ;
Distance : 9

192
Tree	return endIndex != null iZone ? ;
Code	return endIndex != null iZone ? ;
Distance : 10

193
Tree	return iChrono != null iZone ? ;
Code	return iChrono != null iZone ? ;
Distance : 10

194
Tree	return iPrinter != null iZone ? ;
Code	return iPrinter != null iZone ? ;
Distance : 10

195
Tree	return iZone . defaultReturnValues ( null , populationSize , sampleStats2 , null ) ;
Code	return iZone . defaultReturnValues ( null , populationSize , sampleStats2 , null ) ;
Distance : 6

196
Tree	return iOffsetParsed != null iZone ? ;
Code	return iOffsetParsed != null iZone ? ;
Distance : 10

197
Tree	return compilerExecutor != null iZone ? ;
Code	return compilerExecutor != null iZone ? ;
Distance : 10

198
Tree	return iZone != null iZone / ;
Code	return iZone != null iZone / ;
Distance : 9

199
Tree	return FieldUtils != null iZone ? ;
Code	return FieldUtils != null iZone ? ;
Distance : 10

========================================================================


========================================================================
Example Number: 115
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return computeCovarianceMatrix ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return computeCovarianceMatrix ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 5

1
Tree	return NUMBER_CONSTANT / endIndex ;
Code	return NUMBER_CONSTANT / endIndex ;
Distance : 10

2
Tree	return iZone . fieldWasInitializedUsingContructorArgs ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . fieldWasInitializedUsingContructorArgs ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

3
Tree	return ! iZone . htmlEscape ( localInstant ) && <= ;
Code	return ! iZone . htmlEscape ( localInstant ) && <= ;
Distance : 7

4
Tree	return ! iChrono && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Code	return ! iChrono && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Distance : 9

5
Tree	return ! iZone && ! iZone . htmlEscape ( localInstant ) ;
Code	return ! iZone && ! iZone . htmlEscape ( localInstant ) ;
Distance : 9

6
Tree	return retrieveLineSegments ( namespaceToRequire , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return retrieveLineSegments ( namespaceToRequire , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 6

7
Tree	return ! iZone . defaultReturnValues ( localInstant ) && <= ;
Code	return ! iZone . defaultReturnValues ( localInstant ) && <= ;
Distance : 7

8
Tree	return compilerExecutor != com.google.protobuf.GeneratedMessageV3 ;
Code	return compilerExecutor != com.google.protobuf.GeneratedMessageV3 ;
Distance : 10

9
Tree	return ( ( namespaceToRequire ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( namespaceToRequire ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

10
Tree	return iZone . htmlEscape ( localInstant ) ;
Code	return iZone . htmlEscape ( localInstant ) ;
Distance : 5

11
Tree	return iZone . fieldWasInitializedUsingContructorArgs ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . fieldWasInitializedUsingContructorArgs ( STRING_CONSTANT , localInstant ) ;
Distance : 5

12
Tree	return decamelizeMatcher ( localInstant , UTF_8 , false ) ;
Code	return decamelizeMatcher ( localInstant , UTF_8 , false ) ;
Distance : 5

13
Tree	return ( ( actualInvocationStackTrace ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( actualInvocationStackTrace ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

14
Tree	return NUMBER_CONSTANT / iPrinter ;
Code	return NUMBER_CONSTANT / iPrinter ;
Distance : 10

15
Tree	return ! iChrono && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Code	return ! iChrono && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Distance : 10

16
Tree	return iZone != TimeUnit.SECONDS ;
Code	return iZone != TimeUnit.SECONDS ;
Distance : 9

17
Tree	return ! iZone && ! iZone . htmlEscape () ;
Code	return ! iZone && ! iZone . htmlEscape () ;
Distance : 10

18
Tree	return computeCovarianceMatrix ( localInstant , UTF_8 ) ;
Code	return computeCovarianceMatrix ( localInstant , UTF_8 ) ;
Distance : 6

19
Tree	return iZone . htmlEscape ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . htmlEscape ( STRING_CONSTANT , localInstant ) ;
Distance : 5

20
Tree	return retrieveLineSegments ( localInstant , sampleStats2 ) ;
Code	return retrieveLineSegments ( localInstant , sampleStats2 ) ;
Distance : 6

21
Tree	return retrieveLineSegments ( namespaceToRequire , UTF_8 ) ;
Code	return retrieveLineSegments ( namespaceToRequire , UTF_8 ) ;
Distance : 7

22
Tree	return NUMBER_CONSTANT / iOffsetParsed ;
Code	return NUMBER_CONSTANT / iOffsetParsed ;
Distance : 10

23
Tree	return ! iZone . htmlEscape ( localInstant ) && : ;
Code	return ! iZone . htmlEscape ( localInstant ) && : ;
Distance : 7

24
Tree	return ! iZone && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Code	return ! iZone && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Distance : 10

25
Tree	return defaultReturnValues ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return defaultReturnValues ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 5

26
Tree	return iZone . defaultReturnValues ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . defaultReturnValues ( STRING_CONSTANT , localInstant ) ;
Distance : 5

27
Tree	return iZone . getMockitoInterceptor ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . getMockitoInterceptor ( STRING_CONSTANT , localInstant ) ;
Distance : 5

28
Tree	return computeCovarianceMatrix ( localInstant , sampleStats2 ) ;
Code	return computeCovarianceMatrix ( localInstant , sampleStats2 ) ;
Distance : 6

29
Tree	return ( ( namespaceToRequire ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( namespaceToRequire ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

30
Tree	return decamelizeMatcher ( this , localInstant ) ;
Code	return decamelizeMatcher ( this , localInstant ) ;
Distance : 7

31
Tree	return retrieveLineSegments ( this , groupIndex ) ;
Code	return retrieveLineSegments ( this , groupIndex ) ;
Distance : 7

32
Tree	return computeCovarianceMatrix ( localInstant , UTF_8 , clazz ) ;
Code	return computeCovarianceMatrix ( localInstant , UTF_8 , clazz ) ;
Distance : 5

33
Tree	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 ) ;
Code	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 ) ;
Distance : 7

34
Tree	return computeCovarianceMatrix ( actualInvocationStackTrace , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return computeCovarianceMatrix ( actualInvocationStackTrace , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 6

35
Tree	return ( ( localInstant ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( localInstant ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

36
Tree	return iZone . defaultReturnValues ( null , populationSize , checkedFeatures , null ) ;
Code	return iZone . defaultReturnValues ( null , populationSize , checkedFeatures , null ) ;
Distance : 6

37
Tree	return iZone . stubber ( localInstant ) ;
Code	return iZone . stubber ( localInstant ) ;
Distance : 5

38
Tree	return retrieveLineSegments ( localInstant , UTF_8 , clazz , iZone ) ;
Code	return retrieveLineSegments ( localInstant , UTF_8 , clazz , iZone ) ;
Distance : 7

39
Tree	return iZone . defaultReturnValues ( localInstant , false ) ;
Code	return iZone . defaultReturnValues ( localInstant , false ) ;
Distance : 3

40
Tree	return iZone . htmlEscape ( localInstant , false ) ;
Code	return iZone . htmlEscape ( localInstant , false ) ;
Distance : 3

41
Tree	return defaultReturnValues ( this , localInstant ) ;
Code	return defaultReturnValues ( this , localInstant ) ;
Distance : 7

42
Tree	return iZone . defaultReturnValues ( NUMBER_CONSTANT , iPrinter ) ;
Code	return iZone . defaultReturnValues ( NUMBER_CONSTANT , iPrinter ) ;
Distance : 5

43
Tree	return ( ( zeroOffsetText ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( zeroOffsetText ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

44
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

45
Tree	return computeCovarianceMatrix ( this , groupIndex ) ;
Code	return computeCovarianceMatrix ( this , groupIndex ) ;
Distance : 7

46
Tree	return ! FieldUtils && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Code	return ! FieldUtils && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Distance : 10

47
Tree	return iZone . getImageMap ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . getImageMap ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

48
Tree	return NUMBER_CONSTANT / FieldUtils ;
Code	return NUMBER_CONSTANT / FieldUtils ;
Distance : 10

49
Tree	return iZone . createArgumentsAreDifferentException ( localInstant , false ) ;
Code	return iZone . createArgumentsAreDifferentException ( localInstant , false ) ;
Distance : 3

50
Tree	return iZone . getTimeInstance ( localInstant , false ) ;
Code	return iZone . getTimeInstance ( localInstant , false ) ;
Distance : 3

51
Tree	return iZone . createArgumentsAreDifferentException ( localInstant , UTF_8 , null ) ;
Code	return iZone . createArgumentsAreDifferentException ( localInstant , UTF_8 , null ) ;
Distance : 3

52
Tree	return iZone . defaultReturnValues ( STRING_CONSTANT , subtype ) ;
Code	return iZone . defaultReturnValues ( STRING_CONSTANT , subtype ) ;
Distance : 5

53
Tree	return iZone . defaultReturnValues ( this , localInstant ) ;
Code	return iZone . defaultReturnValues ( this , localInstant ) ;
Distance : 5

54
Tree	return iZone . defaultReturnValues ( actualInvocationStackTrace , false ) ;
Code	return iZone . defaultReturnValues ( actualInvocationStackTrace , false ) ;
Distance : 4

55
Tree	return retrieveLineSegments ( localInstant , sampleStats2 , clazz ) ;
Code	return retrieveLineSegments ( localInstant , sampleStats2 , clazz ) ;
Distance : 5

56
Tree	return retrieveLineSegments ( localInstant , UTF_8 ) ;
Code	return retrieveLineSegments ( localInstant , UTF_8 ) ;
Distance : 6

57
Tree	return iZone . createArgumentsAreDifferentException ( localInstant ) ;
Code	return iZone . createArgumentsAreDifferentException ( localInstant ) ;
Distance : 5

58
Tree	return iZone . getTimeInstance ( localInstant ) ;
Code	return iZone . getTimeInstance ( localInstant ) ;
Distance : 5

59
Tree	return iZone . fieldWasInitializedUsingContructorArgs ( localInstant , false ) ;
Code	return iZone . fieldWasInitializedUsingContructorArgs ( localInstant , false ) ;
Distance : 3

60
Tree	return iZone . getMockitoInterceptor ( localInstant , false ) ;
Code	return iZone . getMockitoInterceptor ( localInstant , false ) ;
Distance : 3

61
Tree	return iZone . defaultReturnValues ( RendererChangeListener , false ) ;
Code	return iZone . defaultReturnValues ( RendererChangeListener , false ) ;
Distance : 4

62
Tree	return iChrono != iZone ;
Code	return iChrono != iZone ;
Distance : 10

63
Tree	return iZone . getMockitoInterceptor ( localInstant ) ;
Code	return iZone . getMockitoInterceptor ( localInstant ) ;
Distance : 5

64
Tree	return iChrono != com.google.protobuf.GeneratedMessageV3 ;
Code	return iChrono != com.google.protobuf.GeneratedMessageV3 ;
Distance : 10

65
Tree	return iZone . defaultReturnValues ( this , zeroOffsetText ) ;
Code	return iZone . defaultReturnValues ( this , zeroOffsetText ) ;
Distance : 5

66
Tree	return iZone . defaultReturnValues ( this , drawShapesCheckBox ) ;
Code	return iZone . defaultReturnValues ( this , drawShapesCheckBox ) ;
Distance : 5

67
Tree	return ( ( NodeSubject ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( NodeSubject ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

68
Tree	return ! iZone && ! iZone . invokeSuper () ;
Code	return ! iZone && ! iZone . invokeSuper () ;
Distance : 10

69
Tree	return iZone . defaultReturnValues ( RendererChangeListener ) ;
Code	return iZone . defaultReturnValues ( RendererChangeListener ) ;
Distance : 6

70
Tree	return retrieveLineSegments ( this , zeroOffsetText ) ;
Code	return retrieveLineSegments ( this , zeroOffsetText ) ;
Distance : 7

71
Tree	return retrieveLineSegments ( namespaceToRequire , UTF_8 , clazz , iZone ) ;
Code	return retrieveLineSegments ( namespaceToRequire , UTF_8 , clazz , iZone ) ;
Distance : 7

72
Tree	return ( ( localInstant ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( localInstant ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

73
Tree	return iZone . htmlEscape ( this , localInstant ) ;
Code	return iZone . htmlEscape ( this , localInstant ) ;
Distance : 5

74
Tree	return iZone . defaultReturnValues ( STRING_CONSTANT , populationSize ) ;
Code	return iZone . defaultReturnValues ( STRING_CONSTANT , populationSize ) ;
Distance : 5

75
Tree	return iPrinter != iZone ;
Code	return iPrinter != iZone ;
Distance : 10

76
Tree	return iZone != endIndex ;
Code	return iZone != endIndex ;
Distance : 9

77
Tree	return computeCovarianceMatrix ( localInstant , sampleStats2 , clazz , iZone ) ;
Code	return computeCovarianceMatrix ( localInstant , sampleStats2 , clazz , iZone ) ;
Distance : 7

78
Tree	return iZone . defaultReturnValues ( actualInvocationStackTrace , UTF_8 , null ) ;
Code	return iZone . defaultReturnValues ( actualInvocationStackTrace , UTF_8 , null ) ;
Distance : 4

79
Tree	return iZone . createArgumentsAreDifferentException ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . createArgumentsAreDifferentException ( STRING_CONSTANT , localInstant ) ;
Distance : 5

80
Tree	return ( ( actualInvocationStackTrace ) localInstant ) . getStubbingLookupListeners ( localInstant , EMPTY ) ;
Code	return ( ( actualInvocationStackTrace ) localInstant ) . getStubbingLookupListeners ( localInstant , EMPTY ) ;
Distance : 10

81
Tree	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Code	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Distance : 9

82
Tree	return retrieveLineSegments ( localInstant , UTF_8 , false ) ;
Code	return retrieveLineSegments ( localInstant , UTF_8 , false ) ;
Distance : 5

83
Tree	return iOffsetParsed != iZone ;
Code	return iOffsetParsed != iZone ;
Distance : 10

84
Tree	return iZone . rangeAxisLocations ( localInstant ) ;
Code	return iZone . rangeAxisLocations ( localInstant ) ;
Distance : 5

85
Tree	return retrieveLineSegments ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Code	return retrieveLineSegments ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Distance : 5

86
Tree	return ! iZone && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Code	return ! iZone && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Distance : 9

87
Tree	return iZone . getTimeInstance ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . getTimeInstance ( STRING_CONSTANT , localInstant ) ;
Distance : 5

88
Tree	return iZone . createArgumentsAreDifferentException ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . createArgumentsAreDifferentException ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

89
Tree	return iPrinter != com.google.protobuf.GeneratedMessageV3 ;
Code	return iPrinter != com.google.protobuf.GeneratedMessageV3 ;
Distance : 10

90
Tree	return ( ( namespaceToRequire ) localInstant ) . getPeriod ( localInstant , UTF_8 ) ;
Code	return ( ( namespaceToRequire ) localInstant ) . getPeriod ( localInstant , UTF_8 ) ;
Distance : 10

91
Tree	return iZone . getTimeInstance ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . getTimeInstance ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

92
Tree	return iZone . ExceptionFactory ( localInstant ) ;
Code	return iZone . ExceptionFactory ( localInstant ) ;
Distance : 5

93
Tree	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 ) ;
Code	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 ) ;
Distance : 7

94
Tree	return computeCovarianceMatrix ( localInstant , UTF_8 , false ) ;
Code	return computeCovarianceMatrix ( localInstant , UTF_8 , false ) ;
Distance : 5

95
Tree	return NUMBER_CONSTANT / iZone ;
Code	return NUMBER_CONSTANT / iZone ;
Distance : 10

96
Tree	return iOffsetParsed != com.google.protobuf.GeneratedMessageV3 ;
Code	return iOffsetParsed != com.google.protobuf.GeneratedMessageV3 ;
Distance : 10

97
Tree	return iZone . defaultReturnValues ( localInstant , UTF_8 , null ) ;
Code	return iZone . defaultReturnValues ( localInstant , UTF_8 , null ) ;
Distance : 3

98
Tree	return iZone . defaultReturnValues ( this , subtype ) ;
Code	return iZone . defaultReturnValues ( this , subtype ) ;
Distance : 5

99
Tree	return iZone . defaultReturnValues ( this , groupIndex ) ;
Code	return iZone . defaultReturnValues ( this , groupIndex ) ;
Distance : 5

100
Tree	return NUMBER_CONSTANT / iChrono ;
Code	return NUMBER_CONSTANT / iChrono ;
Distance : 10

101
Tree	return retrieveLineSegments ( localInstant , sampleStats2 , false ) ;
Code	return retrieveLineSegments ( localInstant , sampleStats2 , false ) ;
Distance : 5

102
Tree	return decamelizeMatcher ( localInstant , UTF_8 ) ;
Code	return decamelizeMatcher ( localInstant , UTF_8 ) ;
Distance : 6

103
Tree	return ! FieldUtils && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Code	return ! FieldUtils && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Distance : 9

104
Tree	return retrieveLineSegments ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return retrieveLineSegments ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 5

105
Tree	return iZone . createArgumentsAreDifferentException ( this , localInstant ) ;
Code	return iZone . createArgumentsAreDifferentException ( this , localInstant ) ;
Distance : 5

106
Tree	return ( ( namespaceToRequire ) this ) . getStubbingLookupListeners ( localInstant , EMPTY ) ;
Code	return ( ( namespaceToRequire ) this ) . getStubbingLookupListeners ( localInstant , EMPTY ) ;
Distance : 10

107
Tree	return iZone . htmlEscape ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . htmlEscape ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

108
Tree	return retrieveLineSegments ( namespaceToRequire , UTF_8 , false ) ;
Code	return retrieveLineSegments ( namespaceToRequire , UTF_8 , false ) ;
Distance : 6

109
Tree	return computeCovarianceMatrix ( localInstant , sampleStats2 , false ) ;
Code	return computeCovarianceMatrix ( localInstant , sampleStats2 , false ) ;
Distance : 5

110
Tree	return iZone . htmlEscape ( this , zeroOffsetText ) ;
Code	return iZone . htmlEscape ( this , zeroOffsetText ) ;
Distance : 5

111
Tree	return NUMBER_CONSTANT / ChronologyType ;
Code	return NUMBER_CONSTANT / ChronologyType ;
Distance : 10

112
Tree	return iZone . defaultReturnValues ( localInstant ) ;
Code	return iZone . defaultReturnValues ( localInstant ) ;
Distance : 5

113
Tree	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 , false ) ;
Code	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 , false ) ;
Distance : 6

114
Tree	return ( ( namespaceToRequire ) this ) . makeStackTracesClean ( localInstant , UTF_8 ) ;
Code	return ( ( namespaceToRequire ) this ) . makeStackTracesClean ( localInstant , UTF_8 ) ;
Distance : 10

115
Tree	return ( ( crosshairState ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( crosshairState ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

116
Tree	return iZone . defaultReturnValues ( actualInvocationStackTrace ) ;
Code	return iZone . defaultReturnValues ( actualInvocationStackTrace ) ;
Distance : 6

117
Tree	return iZone . defaultReturnValues ( localInstant , UTF_8 ) ;
Code	return iZone . defaultReturnValues ( localInstant , UTF_8 ) ;
Distance : 4

118
Tree	return iZone . getMockitoInterceptor ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . getMockitoInterceptor ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

119
Tree	return iZone . defaultReturnValues ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . defaultReturnValues ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

120
Tree	return iZone != iPrinter ;
Code	return iZone != iPrinter ;
Distance : 9

121
Tree	return iZone . fieldWasInitializedUsingContructorArgs ( localInstant ) ;
Code	return iZone . fieldWasInitializedUsingContructorArgs ( localInstant ) ;
Distance : 5

122
Tree	return NUMBER_CONSTANT / compilerExecutor ;
Code	return NUMBER_CONSTANT / compilerExecutor ;
Distance : 10

123
Tree	return endIndex != iZone ;
Code	return endIndex != iZone ;
Distance : 10

124
Tree	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 , false ) ;
Code	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 , false ) ;
Distance : 6

125
Tree	return retrieveLineSegments ( actualInvocationStackTrace , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return retrieveLineSegments ( actualInvocationStackTrace , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 6

126
Tree	return ( ( actualInvocationStackTrace ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( actualInvocationStackTrace ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

127
Tree	return iZone . defaultReturnValues ( localInstant , sample2 ) ;
Code	return iZone . defaultReturnValues ( localInstant , sample2 ) ;
Distance : 4

128
Tree	return computeCovarianceMatrix ( localInstant , UTF_8 , clazz , iZone ) ;
Code	return computeCovarianceMatrix ( localInstant , UTF_8 , clazz , iZone ) ;
Distance : 7

129
Tree	return iZone . defaultReturnValues ( localInstant , sampleStats2 ) ;
Code	return iZone . defaultReturnValues ( localInstant , sampleStats2 ) ;
Distance : 4

130
Tree	return computeCovarianceMatrix ( namespaceToRequire , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return computeCovarianceMatrix ( namespaceToRequire , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 6

131
Tree	return retrieveLineSegments ( localInstant , UTF_8 , clazz ) ;
Code	return retrieveLineSegments ( localInstant , UTF_8 , clazz ) ;
Distance : 5

132
Tree	return iZone != AllowedSolutions.ANY_SIDE ;
Code	return iZone != AllowedSolutions.ANY_SIDE ;
Distance : 9

133
Tree	return iZone . getTimeInstance ( localInstant , UTF_8 , null ) ;
Code	return iZone . getTimeInstance ( localInstant , UTF_8 , null ) ;
Distance : 3

134
Tree	return ( ( namespaceToRequire ) localInstant ) . getStubbingLookupListeners ( localInstant , EMPTY ) ;
Code	return ( ( namespaceToRequire ) localInstant ) . getStubbingLookupListeners ( localInstant , EMPTY ) ;
Distance : 10

135
Tree	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 , clazz ) ;
Code	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 , clazz ) ;
Distance : 6

136
Tree	return decamelizeMatcher ( localInstant , UTF_8 , clazz ) ;
Code	return decamelizeMatcher ( localInstant , UTF_8 , clazz ) ;
Distance : 5

137
Tree	return ! iOffsetParsed && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Code	return ! iOffsetParsed && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Distance : 10

138
Tree	return endIndex != com.google.protobuf.GeneratedMessageV3 ;
Code	return endIndex != com.google.protobuf.GeneratedMessageV3 ;
Distance : 10

139
Tree	return retrieveLineSegments ( localInstant , sampleStats2 , clazz , iZone ) ;
Code	return retrieveLineSegments ( localInstant , sampleStats2 , clazz , iZone ) ;
Distance : 7

140
Tree	return iZone . _isMinimize ( localInstant ) ;
Code	return iZone . _isMinimize ( localInstant ) ;
Distance : 5

141
Tree	return ! iZone . defaultReturnValues ( localInstant ) && : ;
Code	return ! iZone . defaultReturnValues ( localInstant ) && : ;
Distance : 7

142
Tree	return createArgumentsAreDifferentException ( this , localInstant ) ;
Code	return createArgumentsAreDifferentException ( this , localInstant ) ;
Distance : 7

143
Tree	return ! iZone . htmlEscape ( localInstant ) && ^ ;
Code	return ! iZone . htmlEscape ( localInstant ) && ^ ;
Distance : 7

144
Tree	return ! iZone && ! iZone . getPropertyReservedNamingFirstChars () ;
Code	return ! iZone && ! iZone . getPropertyReservedNamingFirstChars () ;
Distance : 10

145
Tree	return retrieveLineSegments ( namespaceToRequire , UTF_8 , clazz ) ;
Code	return retrieveLineSegments ( namespaceToRequire , UTF_8 , clazz ) ;
Distance : 6

146
Tree	return computeCovarianceMatrix ( localInstant , sampleStats2 , clazz ) ;
Code	return computeCovarianceMatrix ( localInstant , sampleStats2 , clazz ) ;
Distance : 5

147
Tree	return ! FieldUtils . htmlEscape ( localInstant ) && <= ;
Code	return ! FieldUtils . htmlEscape ( localInstant ) && <= ;
Distance : 8

148
Tree	return iZone . htmlEscape ( localInstant , UTF_8 , null ) ;
Code	return iZone . htmlEscape ( localInstant , UTF_8 , null ) ;
Distance : 3

149
Tree	return ! iZone && ! iZone . getPropertyReservedNamingFirstChars ( localInstant ) ;
Code	return ! iZone && ! iZone . getPropertyReservedNamingFirstChars ( localInstant ) ;
Distance : 9

150
Tree	return iZone . rangeAxisLocations ( actualInvocationStackTrace ) ;
Code	return iZone . rangeAxisLocations ( actualInvocationStackTrace ) ;
Distance : 6

151
Tree	return iZone . subtype ( localInstant ) ;
Code	return iZone . subtype ( localInstant ) ;
Distance : 5

152
Tree	return iZone . boxPaint ( localInstant ) ;
Code	return iZone . boxPaint ( localInstant ) ;
Distance : 5

153
Tree	return ! iZone && ! iZone . invokeSuper ( localInstant ) ;
Code	return ! iZone && ! iZone . invokeSuper ( localInstant ) ;
Distance : 9

154
Tree	return iZone . fakeReturnValues ( localInstant ) ;
Code	return iZone . fakeReturnValues ( localInstant ) ;
Distance : 5

155
Tree	return retrieveLineSegments ( this , localInstant ) ;
Code	return retrieveLineSegments ( this , localInstant ) ;
Distance : 7

156
Tree	return ! iZone . defaultReturnValues ( localInstant ) && ^ ;
Code	return ! iZone . defaultReturnValues ( localInstant ) && ^ ;
Distance : 7

157
Tree	return decamelizeMatcher ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return decamelizeMatcher ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 5

158
Tree	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 , clazz , iZone ) ;
Code	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 , clazz , iZone ) ;
Distance : 7

159
Tree	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 , clazz , iZone ) ;
Code	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 , clazz , iZone ) ;
Distance : 7

160
Tree	return decamelizeMatcher ( localInstant , UTF_8 , clazz , iZone ) ;
Code	return decamelizeMatcher ( localInstant , UTF_8 , clazz , iZone ) ;
Distance : 7

161
Tree	return computeCovarianceMatrix ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Code	return computeCovarianceMatrix ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Distance : 5

162
Tree	return iZone . defaultReturnValues ( localInstant , CSV_SEARCH_CHARS , null ) ;
Code	return iZone . defaultReturnValues ( localInstant , CSV_SEARCH_CHARS , null ) ;
Distance : 3

163
Tree	return iZone . createArgumentsAreDifferentException ( localInstant , UTF_8 ) ;
Code	return iZone . createArgumentsAreDifferentException ( localInstant , UTF_8 ) ;
Distance : 4

164
Tree	return ! FieldUtils && ! iZone . htmlEscape ( localInstant ) ;
Code	return ! FieldUtils && ! iZone . htmlEscape ( localInstant ) ;
Distance : 9

165
Tree	return ( ( zeroOffsetText ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( zeroOffsetText ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

166
Tree	return computeCovarianceMatrix ( this , localInstant ) ;
Code	return computeCovarianceMatrix ( this , localInstant ) ;
Distance : 7

167
Tree	return iZone . defaultReturnValues ( localInstant , sample2 , null ) ;
Code	return iZone . defaultReturnValues ( localInstant , sample2 , null ) ;
Distance : 3

168
Tree	return ! FieldUtils && ! iZone . htmlEscape () ;
Code	return ! FieldUtils && ! iZone . htmlEscape () ;
Distance : 10

169
Tree	return iZone . getTimeInstance ( localInstant , UTF_8 ) ;
Code	return iZone . getTimeInstance ( localInstant , UTF_8 ) ;
Distance : 4

170
Tree	return iZone . defaultReturnValues ( localInstant , sampleStats2 , null ) ;
Code	return iZone . defaultReturnValues ( localInstant , sampleStats2 , null ) ;
Distance : 3

171
Tree	return iZone != vd ;
Code	return iZone != vd ;
Distance : 9

172
Tree	return ! FieldUtils . defaultReturnValues ( localInstant ) && <= ;
Code	return ! FieldUtils . defaultReturnValues ( localInstant ) && <= ;
Distance : 8

173
Tree	return iZone . htmlEscape ( localInstant , UTF_8 ) ;
Code	return iZone . htmlEscape ( localInstant , UTF_8 ) ;
Distance : 4

174
Tree	return ! iOffsetParsed && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Code	return ! iOffsetParsed && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Distance : 9

175
Tree	return ( ( actualInvocationStackTrace ) localInstant ) . getPeriod ( localInstant , UTF_8 ) ;
Code	return ( ( actualInvocationStackTrace ) localInstant ) . getPeriod ( localInstant , UTF_8 ) ;
Distance : 10

176
Tree	return iZone . defaultReturnValues ( null , populationSize , EMPTY , null ) ;
Code	return iZone . defaultReturnValues ( null , populationSize , EMPTY , null ) ;
Distance : 6

177
Tree	return retrieveLineSegments ( namespaceToRequire , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Code	return retrieveLineSegments ( namespaceToRequire , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Distance : 6

178
Tree	return retrieveLineSegments ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , TimeUnit.SECONDS ) ;
Code	return retrieveLineSegments ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , TimeUnit.SECONDS ) ;
Distance : 5

179
Tree	return retrieveLineSegments ( actualInvocationStackTrace , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Code	return retrieveLineSegments ( actualInvocationStackTrace , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Distance : 6

180
Tree	return computeCovarianceMatrix ( namespaceToRequire , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Code	return computeCovarianceMatrix ( namespaceToRequire , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Distance : 6

181
Tree	return decamelizeMatcher ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Code	return decamelizeMatcher ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Distance : 5

182
Tree	return iZone . defaultReturnValues ( actualInvocationStackTrace , UTF_8 ) ;
Code	return iZone . defaultReturnValues ( actualInvocationStackTrace , UTF_8 ) ;
Distance : 5

183
Tree	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 , clazz ) ;
Code	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 , clazz ) ;
Distance : 6

184
Tree	return computeCovarianceMatrix ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , TimeUnit.SECONDS ) ;
Code	return computeCovarianceMatrix ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , TimeUnit.SECONDS ) ;
Distance : 5

185
Tree	return iZone . htmlEscape ( null , populationSize , checkedFeatures , null ) ;
Code	return iZone . htmlEscape ( null , populationSize , checkedFeatures , null ) ;
Distance : 6

186
Tree	return iZone . defaultReturnValues ( null , populationSize , sample2 , null ) ;
Code	return iZone . defaultReturnValues ( null , populationSize , sample2 , null ) ;
Distance : 6

187
Tree	return iZone . defaultReturnValues ( localInstant , CSV_SEARCH_CHARS ) ;
Code	return iZone . defaultReturnValues ( localInstant , CSV_SEARCH_CHARS ) ;
Distance : 4

188
Tree	return iZone . defaultReturnValues ( null , populationSize , clazz , null ) ;
Code	return iZone . defaultReturnValues ( null , populationSize , clazz , null ) ;
Distance : 6

189
Tree	return iZone . defaultReturnValues ( null , populationSize , extensionRegistry , null ) ;
Code	return iZone . defaultReturnValues ( null , populationSize , extensionRegistry , null ) ;
Distance : 6

190
Tree	return iZone . defaultReturnValues ( null , populationSize , wantedCount , null ) ;
Code	return iZone . defaultReturnValues ( null , populationSize , wantedCount , null ) ;
Distance : 6

191
Tree	return iZone != null iZone ? ;
Code	return iZone != null iZone ? ;
Distance : 9

192
Tree	return endIndex != null iZone ? ;
Code	return endIndex != null iZone ? ;
Distance : 10

193
Tree	return iChrono != null iZone ? ;
Code	return iChrono != null iZone ? ;
Distance : 10

194
Tree	return iPrinter != null iZone ? ;
Code	return iPrinter != null iZone ? ;
Distance : 10

195
Tree	return iZone . defaultReturnValues ( null , populationSize , sampleStats2 , null ) ;
Code	return iZone . defaultReturnValues ( null , populationSize , sampleStats2 , null ) ;
Distance : 6

196
Tree	return iOffsetParsed != null iZone ? ;
Code	return iOffsetParsed != null iZone ? ;
Distance : 10

197
Tree	return compilerExecutor != null iZone ? ;
Code	return compilerExecutor != null iZone ? ;
Distance : 10

198
Tree	return iZone != null iZone / ;
Code	return iZone != null iZone / ;
Distance : 9

199
Tree	return FieldUtils != null iZone ? ;
Code	return FieldUtils != null iZone ? ;
Distance : 10

========================================================================


========================================================================
Example Number: 116
Parent Code is: 
return iZone . convertLocalToUTC ( localInstant , false ) ;
-------------------------------------------------------------------------------
Child code is: 
return iZone . convertLocalToUTC ( localInstant , false , instant ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=iZone}) (235{val=.}) (802{val=convertLocalToUTC}) (214{val=(}) (800{val=localInstant}) (234{val=,}) (9{val=false}) (234{val=,}) (800{val=instant}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/26/parent/src_main_java_org_joda_time_chrono_ZonedChronology.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	return computeCovarianceMatrix ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return computeCovarianceMatrix ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 5

1
Tree	return NUMBER_CONSTANT / endIndex ;
Code	return NUMBER_CONSTANT / endIndex ;
Distance : 10

2
Tree	return iZone . fieldWasInitializedUsingContructorArgs ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . fieldWasInitializedUsingContructorArgs ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

3
Tree	return ! iZone . htmlEscape ( localInstant ) && <= ;
Code	return ! iZone . htmlEscape ( localInstant ) && <= ;
Distance : 7

4
Tree	return ! iChrono && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Code	return ! iChrono && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Distance : 9

5
Tree	return ! iZone && ! iZone . htmlEscape ( localInstant ) ;
Code	return ! iZone && ! iZone . htmlEscape ( localInstant ) ;
Distance : 9

6
Tree	return retrieveLineSegments ( namespaceToRequire , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return retrieveLineSegments ( namespaceToRequire , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 6

7
Tree	return ! iZone . defaultReturnValues ( localInstant ) && <= ;
Code	return ! iZone . defaultReturnValues ( localInstant ) && <= ;
Distance : 7

8
Tree	return compilerExecutor != com.google.protobuf.GeneratedMessageV3 ;
Code	return compilerExecutor != com.google.protobuf.GeneratedMessageV3 ;
Distance : 10

9
Tree	return ( ( namespaceToRequire ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( namespaceToRequire ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

10
Tree	return iZone . htmlEscape ( localInstant ) ;
Code	return iZone . htmlEscape ( localInstant ) ;
Distance : 5

11
Tree	return iZone . fieldWasInitializedUsingContructorArgs ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . fieldWasInitializedUsingContructorArgs ( STRING_CONSTANT , localInstant ) ;
Distance : 5

12
Tree	return decamelizeMatcher ( localInstant , UTF_8 , false ) ;
Code	return decamelizeMatcher ( localInstant , UTF_8 , false ) ;
Distance : 5

13
Tree	return ( ( actualInvocationStackTrace ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( actualInvocationStackTrace ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

14
Tree	return NUMBER_CONSTANT / iPrinter ;
Code	return NUMBER_CONSTANT / iPrinter ;
Distance : 10

15
Tree	return ! iChrono && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Code	return ! iChrono && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Distance : 10

16
Tree	return iZone != TimeUnit.SECONDS ;
Code	return iZone != TimeUnit.SECONDS ;
Distance : 9

17
Tree	return ! iZone && ! iZone . htmlEscape () ;
Code	return ! iZone && ! iZone . htmlEscape () ;
Distance : 10

18
Tree	return computeCovarianceMatrix ( localInstant , UTF_8 ) ;
Code	return computeCovarianceMatrix ( localInstant , UTF_8 ) ;
Distance : 6

19
Tree	return iZone . htmlEscape ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . htmlEscape ( STRING_CONSTANT , localInstant ) ;
Distance : 5

20
Tree	return retrieveLineSegments ( localInstant , sampleStats2 ) ;
Code	return retrieveLineSegments ( localInstant , sampleStats2 ) ;
Distance : 6

21
Tree	return retrieveLineSegments ( namespaceToRequire , UTF_8 ) ;
Code	return retrieveLineSegments ( namespaceToRequire , UTF_8 ) ;
Distance : 7

22
Tree	return NUMBER_CONSTANT / iOffsetParsed ;
Code	return NUMBER_CONSTANT / iOffsetParsed ;
Distance : 10

23
Tree	return ! iZone . htmlEscape ( localInstant ) && : ;
Code	return ! iZone . htmlEscape ( localInstant ) && : ;
Distance : 7

24
Tree	return ! iZone && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Code	return ! iZone && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Distance : 10

25
Tree	return defaultReturnValues ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return defaultReturnValues ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 5

26
Tree	return iZone . defaultReturnValues ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . defaultReturnValues ( STRING_CONSTANT , localInstant ) ;
Distance : 5

27
Tree	return iZone . getMockitoInterceptor ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . getMockitoInterceptor ( STRING_CONSTANT , localInstant ) ;
Distance : 5

28
Tree	return computeCovarianceMatrix ( localInstant , sampleStats2 ) ;
Code	return computeCovarianceMatrix ( localInstant , sampleStats2 ) ;
Distance : 6

29
Tree	return ( ( namespaceToRequire ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( namespaceToRequire ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

30
Tree	return decamelizeMatcher ( this , localInstant ) ;
Code	return decamelizeMatcher ( this , localInstant ) ;
Distance : 7

31
Tree	return retrieveLineSegments ( this , groupIndex ) ;
Code	return retrieveLineSegments ( this , groupIndex ) ;
Distance : 7

32
Tree	return computeCovarianceMatrix ( localInstant , UTF_8 , clazz ) ;
Code	return computeCovarianceMatrix ( localInstant , UTF_8 , clazz ) ;
Distance : 5

33
Tree	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 ) ;
Code	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 ) ;
Distance : 7

34
Tree	return computeCovarianceMatrix ( actualInvocationStackTrace , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return computeCovarianceMatrix ( actualInvocationStackTrace , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 6

35
Tree	return ( ( localInstant ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( localInstant ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

36
Tree	return iZone . defaultReturnValues ( null , populationSize , checkedFeatures , null ) ;
Code	return iZone . defaultReturnValues ( null , populationSize , checkedFeatures , null ) ;
Distance : 6

37
Tree	return iZone . stubber ( localInstant ) ;
Code	return iZone . stubber ( localInstant ) ;
Distance : 5

38
Tree	return retrieveLineSegments ( localInstant , UTF_8 , clazz , iZone ) ;
Code	return retrieveLineSegments ( localInstant , UTF_8 , clazz , iZone ) ;
Distance : 7

39
Tree	return iZone . defaultReturnValues ( localInstant , false ) ;
Code	return iZone . defaultReturnValues ( localInstant , false ) ;
Distance : 3

40
Tree	return iZone . htmlEscape ( localInstant , false ) ;
Code	return iZone . htmlEscape ( localInstant , false ) ;
Distance : 3

41
Tree	return defaultReturnValues ( this , localInstant ) ;
Code	return defaultReturnValues ( this , localInstant ) ;
Distance : 7

42
Tree	return iZone . defaultReturnValues ( NUMBER_CONSTANT , iPrinter ) ;
Code	return iZone . defaultReturnValues ( NUMBER_CONSTANT , iPrinter ) ;
Distance : 5

43
Tree	return ( ( zeroOffsetText ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( zeroOffsetText ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

44
Tree	return iZone != iZone ;
Code	return iZone != iZone ;
Distance : 9

45
Tree	return computeCovarianceMatrix ( this , groupIndex ) ;
Code	return computeCovarianceMatrix ( this , groupIndex ) ;
Distance : 7

46
Tree	return ! FieldUtils && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Code	return ! FieldUtils && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Distance : 10

47
Tree	return iZone . getImageMap ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . getImageMap ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

48
Tree	return NUMBER_CONSTANT / FieldUtils ;
Code	return NUMBER_CONSTANT / FieldUtils ;
Distance : 10

49
Tree	return iZone . createArgumentsAreDifferentException ( localInstant , false ) ;
Code	return iZone . createArgumentsAreDifferentException ( localInstant , false ) ;
Distance : 3

50
Tree	return iZone . getTimeInstance ( localInstant , false ) ;
Code	return iZone . getTimeInstance ( localInstant , false ) ;
Distance : 3

51
Tree	return iZone . createArgumentsAreDifferentException ( localInstant , UTF_8 , null ) ;
Code	return iZone . createArgumentsAreDifferentException ( localInstant , UTF_8 , null ) ;
Distance : 3

52
Tree	return iZone . defaultReturnValues ( STRING_CONSTANT , subtype ) ;
Code	return iZone . defaultReturnValues ( STRING_CONSTANT , subtype ) ;
Distance : 5

53
Tree	return iZone . defaultReturnValues ( this , localInstant ) ;
Code	return iZone . defaultReturnValues ( this , localInstant ) ;
Distance : 5

54
Tree	return iZone . defaultReturnValues ( actualInvocationStackTrace , false ) ;
Code	return iZone . defaultReturnValues ( actualInvocationStackTrace , false ) ;
Distance : 4

55
Tree	return retrieveLineSegments ( localInstant , sampleStats2 , clazz ) ;
Code	return retrieveLineSegments ( localInstant , sampleStats2 , clazz ) ;
Distance : 5

56
Tree	return retrieveLineSegments ( localInstant , UTF_8 ) ;
Code	return retrieveLineSegments ( localInstant , UTF_8 ) ;
Distance : 6

57
Tree	return iZone . createArgumentsAreDifferentException ( localInstant ) ;
Code	return iZone . createArgumentsAreDifferentException ( localInstant ) ;
Distance : 5

58
Tree	return iZone . getTimeInstance ( localInstant ) ;
Code	return iZone . getTimeInstance ( localInstant ) ;
Distance : 5

59
Tree	return iZone . fieldWasInitializedUsingContructorArgs ( localInstant , false ) ;
Code	return iZone . fieldWasInitializedUsingContructorArgs ( localInstant , false ) ;
Distance : 3

60
Tree	return iZone . getMockitoInterceptor ( localInstant , false ) ;
Code	return iZone . getMockitoInterceptor ( localInstant , false ) ;
Distance : 3

61
Tree	return iZone . defaultReturnValues ( RendererChangeListener , false ) ;
Code	return iZone . defaultReturnValues ( RendererChangeListener , false ) ;
Distance : 4

62
Tree	return iChrono != iZone ;
Code	return iChrono != iZone ;
Distance : 10

63
Tree	return iZone . getMockitoInterceptor ( localInstant ) ;
Code	return iZone . getMockitoInterceptor ( localInstant ) ;
Distance : 5

64
Tree	return iChrono != com.google.protobuf.GeneratedMessageV3 ;
Code	return iChrono != com.google.protobuf.GeneratedMessageV3 ;
Distance : 10

65
Tree	return iZone . defaultReturnValues ( this , zeroOffsetText ) ;
Code	return iZone . defaultReturnValues ( this , zeroOffsetText ) ;
Distance : 5

66
Tree	return iZone . defaultReturnValues ( this , drawShapesCheckBox ) ;
Code	return iZone . defaultReturnValues ( this , drawShapesCheckBox ) ;
Distance : 5

67
Tree	return ( ( NodeSubject ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( NodeSubject ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

68
Tree	return ! iZone && ! iZone . invokeSuper () ;
Code	return ! iZone && ! iZone . invokeSuper () ;
Distance : 10

69
Tree	return iZone . defaultReturnValues ( RendererChangeListener ) ;
Code	return iZone . defaultReturnValues ( RendererChangeListener ) ;
Distance : 6

70
Tree	return retrieveLineSegments ( this , zeroOffsetText ) ;
Code	return retrieveLineSegments ( this , zeroOffsetText ) ;
Distance : 7

71
Tree	return retrieveLineSegments ( namespaceToRequire , UTF_8 , clazz , iZone ) ;
Code	return retrieveLineSegments ( namespaceToRequire , UTF_8 , clazz , iZone ) ;
Distance : 7

72
Tree	return ( ( localInstant ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( localInstant ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

73
Tree	return iZone . htmlEscape ( this , localInstant ) ;
Code	return iZone . htmlEscape ( this , localInstant ) ;
Distance : 5

74
Tree	return iZone . defaultReturnValues ( STRING_CONSTANT , populationSize ) ;
Code	return iZone . defaultReturnValues ( STRING_CONSTANT , populationSize ) ;
Distance : 5

75
Tree	return iPrinter != iZone ;
Code	return iPrinter != iZone ;
Distance : 10

76
Tree	return iZone != endIndex ;
Code	return iZone != endIndex ;
Distance : 9

77
Tree	return computeCovarianceMatrix ( localInstant , sampleStats2 , clazz , iZone ) ;
Code	return computeCovarianceMatrix ( localInstant , sampleStats2 , clazz , iZone ) ;
Distance : 7

78
Tree	return iZone . defaultReturnValues ( actualInvocationStackTrace , UTF_8 , null ) ;
Code	return iZone . defaultReturnValues ( actualInvocationStackTrace , UTF_8 , null ) ;
Distance : 4

79
Tree	return iZone . createArgumentsAreDifferentException ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . createArgumentsAreDifferentException ( STRING_CONSTANT , localInstant ) ;
Distance : 5

80
Tree	return ( ( actualInvocationStackTrace ) localInstant ) . getStubbingLookupListeners ( localInstant , EMPTY ) ;
Code	return ( ( actualInvocationStackTrace ) localInstant ) . getStubbingLookupListeners ( localInstant , EMPTY ) ;
Distance : 10

81
Tree	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Code	return iZone != com.google.protobuf.GeneratedMessageV3 ;
Distance : 9

82
Tree	return retrieveLineSegments ( localInstant , UTF_8 , false ) ;
Code	return retrieveLineSegments ( localInstant , UTF_8 , false ) ;
Distance : 5

83
Tree	return iOffsetParsed != iZone ;
Code	return iOffsetParsed != iZone ;
Distance : 10

84
Tree	return iZone . rangeAxisLocations ( localInstant ) ;
Code	return iZone . rangeAxisLocations ( localInstant ) ;
Distance : 5

85
Tree	return retrieveLineSegments ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Code	return retrieveLineSegments ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Distance : 5

86
Tree	return ! iZone && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Code	return ! iZone && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Distance : 9

87
Tree	return iZone . getTimeInstance ( STRING_CONSTANT , localInstant ) ;
Code	return iZone . getTimeInstance ( STRING_CONSTANT , localInstant ) ;
Distance : 5

88
Tree	return iZone . createArgumentsAreDifferentException ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . createArgumentsAreDifferentException ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

89
Tree	return iPrinter != com.google.protobuf.GeneratedMessageV3 ;
Code	return iPrinter != com.google.protobuf.GeneratedMessageV3 ;
Distance : 10

90
Tree	return ( ( namespaceToRequire ) localInstant ) . getPeriod ( localInstant , UTF_8 ) ;
Code	return ( ( namespaceToRequire ) localInstant ) . getPeriod ( localInstant , UTF_8 ) ;
Distance : 10

91
Tree	return iZone . getTimeInstance ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . getTimeInstance ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

92
Tree	return iZone . ExceptionFactory ( localInstant ) ;
Code	return iZone . ExceptionFactory ( localInstant ) ;
Distance : 5

93
Tree	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 ) ;
Code	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 ) ;
Distance : 7

94
Tree	return computeCovarianceMatrix ( localInstant , UTF_8 , false ) ;
Code	return computeCovarianceMatrix ( localInstant , UTF_8 , false ) ;
Distance : 5

95
Tree	return NUMBER_CONSTANT / iZone ;
Code	return NUMBER_CONSTANT / iZone ;
Distance : 10

96
Tree	return iOffsetParsed != com.google.protobuf.GeneratedMessageV3 ;
Code	return iOffsetParsed != com.google.protobuf.GeneratedMessageV3 ;
Distance : 10

97
Tree	return iZone . defaultReturnValues ( localInstant , UTF_8 , null ) ;
Code	return iZone . defaultReturnValues ( localInstant , UTF_8 , null ) ;
Distance : 3

98
Tree	return iZone . defaultReturnValues ( this , subtype ) ;
Code	return iZone . defaultReturnValues ( this , subtype ) ;
Distance : 5

99
Tree	return iZone . defaultReturnValues ( this , groupIndex ) ;
Code	return iZone . defaultReturnValues ( this , groupIndex ) ;
Distance : 5

100
Tree	return NUMBER_CONSTANT / iChrono ;
Code	return NUMBER_CONSTANT / iChrono ;
Distance : 10

101
Tree	return retrieveLineSegments ( localInstant , sampleStats2 , false ) ;
Code	return retrieveLineSegments ( localInstant , sampleStats2 , false ) ;
Distance : 5

102
Tree	return decamelizeMatcher ( localInstant , UTF_8 ) ;
Code	return decamelizeMatcher ( localInstant , UTF_8 ) ;
Distance : 6

103
Tree	return ! FieldUtils && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Code	return ! FieldUtils && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Distance : 9

104
Tree	return retrieveLineSegments ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return retrieveLineSegments ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 5

105
Tree	return iZone . createArgumentsAreDifferentException ( this , localInstant ) ;
Code	return iZone . createArgumentsAreDifferentException ( this , localInstant ) ;
Distance : 5

106
Tree	return ( ( namespaceToRequire ) this ) . getStubbingLookupListeners ( localInstant , EMPTY ) ;
Code	return ( ( namespaceToRequire ) this ) . getStubbingLookupListeners ( localInstant , EMPTY ) ;
Distance : 10

107
Tree	return iZone . htmlEscape ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . htmlEscape ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

108
Tree	return retrieveLineSegments ( namespaceToRequire , UTF_8 , false ) ;
Code	return retrieveLineSegments ( namespaceToRequire , UTF_8 , false ) ;
Distance : 6

109
Tree	return computeCovarianceMatrix ( localInstant , sampleStats2 , false ) ;
Code	return computeCovarianceMatrix ( localInstant , sampleStats2 , false ) ;
Distance : 5

110
Tree	return iZone . htmlEscape ( this , zeroOffsetText ) ;
Code	return iZone . htmlEscape ( this , zeroOffsetText ) ;
Distance : 5

111
Tree	return NUMBER_CONSTANT / ChronologyType ;
Code	return NUMBER_CONSTANT / ChronologyType ;
Distance : 10

112
Tree	return iZone . defaultReturnValues ( localInstant ) ;
Code	return iZone . defaultReturnValues ( localInstant ) ;
Distance : 5

113
Tree	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 , false ) ;
Code	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 , false ) ;
Distance : 6

114
Tree	return ( ( namespaceToRequire ) this ) . makeStackTracesClean ( localInstant , UTF_8 ) ;
Code	return ( ( namespaceToRequire ) this ) . makeStackTracesClean ( localInstant , UTF_8 ) ;
Distance : 10

115
Tree	return ( ( crosshairState ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( crosshairState ) this ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

116
Tree	return iZone . defaultReturnValues ( actualInvocationStackTrace ) ;
Code	return iZone . defaultReturnValues ( actualInvocationStackTrace ) ;
Distance : 6

117
Tree	return iZone . defaultReturnValues ( localInstant , UTF_8 ) ;
Code	return iZone . defaultReturnValues ( localInstant , UTF_8 ) ;
Distance : 4

118
Tree	return iZone . getMockitoInterceptor ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . getMockitoInterceptor ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

119
Tree	return iZone . defaultReturnValues ( NUMBER_CONSTANT , iZone ) ;
Code	return iZone . defaultReturnValues ( NUMBER_CONSTANT , iZone ) ;
Distance : 5

120
Tree	return iZone != iPrinter ;
Code	return iZone != iPrinter ;
Distance : 9

121
Tree	return iZone . fieldWasInitializedUsingContructorArgs ( localInstant ) ;
Code	return iZone . fieldWasInitializedUsingContructorArgs ( localInstant ) ;
Distance : 5

122
Tree	return NUMBER_CONSTANT / compilerExecutor ;
Code	return NUMBER_CONSTANT / compilerExecutor ;
Distance : 10

123
Tree	return endIndex != iZone ;
Code	return endIndex != iZone ;
Distance : 10

124
Tree	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 , false ) ;
Code	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 , false ) ;
Distance : 6

125
Tree	return retrieveLineSegments ( actualInvocationStackTrace , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return retrieveLineSegments ( actualInvocationStackTrace , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 6

126
Tree	return ( ( actualInvocationStackTrace ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( actualInvocationStackTrace ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

127
Tree	return iZone . defaultReturnValues ( localInstant , sample2 ) ;
Code	return iZone . defaultReturnValues ( localInstant , sample2 ) ;
Distance : 4

128
Tree	return computeCovarianceMatrix ( localInstant , UTF_8 , clazz , iZone ) ;
Code	return computeCovarianceMatrix ( localInstant , UTF_8 , clazz , iZone ) ;
Distance : 7

129
Tree	return iZone . defaultReturnValues ( localInstant , sampleStats2 ) ;
Code	return iZone . defaultReturnValues ( localInstant , sampleStats2 ) ;
Distance : 4

130
Tree	return computeCovarianceMatrix ( namespaceToRequire , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return computeCovarianceMatrix ( namespaceToRequire , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 6

131
Tree	return retrieveLineSegments ( localInstant , UTF_8 , clazz ) ;
Code	return retrieveLineSegments ( localInstant , UTF_8 , clazz ) ;
Distance : 5

132
Tree	return iZone != AllowedSolutions.ANY_SIDE ;
Code	return iZone != AllowedSolutions.ANY_SIDE ;
Distance : 9

133
Tree	return iZone . getTimeInstance ( localInstant , UTF_8 , null ) ;
Code	return iZone . getTimeInstance ( localInstant , UTF_8 , null ) ;
Distance : 3

134
Tree	return ( ( namespaceToRequire ) localInstant ) . getStubbingLookupListeners ( localInstant , EMPTY ) ;
Code	return ( ( namespaceToRequire ) localInstant ) . getStubbingLookupListeners ( localInstant , EMPTY ) ;
Distance : 10

135
Tree	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 , clazz ) ;
Code	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 , clazz ) ;
Distance : 6

136
Tree	return decamelizeMatcher ( localInstant , UTF_8 , clazz ) ;
Code	return decamelizeMatcher ( localInstant , UTF_8 , clazz ) ;
Distance : 5

137
Tree	return ! iOffsetParsed && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Code	return ! iOffsetParsed && ! iZone . getPropertyReservedNamingNonFirstChars () ;
Distance : 10

138
Tree	return endIndex != com.google.protobuf.GeneratedMessageV3 ;
Code	return endIndex != com.google.protobuf.GeneratedMessageV3 ;
Distance : 10

139
Tree	return retrieveLineSegments ( localInstant , sampleStats2 , clazz , iZone ) ;
Code	return retrieveLineSegments ( localInstant , sampleStats2 , clazz , iZone ) ;
Distance : 7

140
Tree	return iZone . _isMinimize ( localInstant ) ;
Code	return iZone . _isMinimize ( localInstant ) ;
Distance : 5

141
Tree	return ! iZone . defaultReturnValues ( localInstant ) && : ;
Code	return ! iZone . defaultReturnValues ( localInstant ) && : ;
Distance : 7

142
Tree	return createArgumentsAreDifferentException ( this , localInstant ) ;
Code	return createArgumentsAreDifferentException ( this , localInstant ) ;
Distance : 7

143
Tree	return ! iZone . htmlEscape ( localInstant ) && ^ ;
Code	return ! iZone . htmlEscape ( localInstant ) && ^ ;
Distance : 7

144
Tree	return ! iZone && ! iZone . getPropertyReservedNamingFirstChars () ;
Code	return ! iZone && ! iZone . getPropertyReservedNamingFirstChars () ;
Distance : 10

145
Tree	return retrieveLineSegments ( namespaceToRequire , UTF_8 , clazz ) ;
Code	return retrieveLineSegments ( namespaceToRequire , UTF_8 , clazz ) ;
Distance : 6

146
Tree	return computeCovarianceMatrix ( localInstant , sampleStats2 , clazz ) ;
Code	return computeCovarianceMatrix ( localInstant , sampleStats2 , clazz ) ;
Distance : 5

147
Tree	return ! FieldUtils . htmlEscape ( localInstant ) && <= ;
Code	return ! FieldUtils . htmlEscape ( localInstant ) && <= ;
Distance : 8

148
Tree	return iZone . htmlEscape ( localInstant , UTF_8 , null ) ;
Code	return iZone . htmlEscape ( localInstant , UTF_8 , null ) ;
Distance : 3

149
Tree	return ! iZone && ! iZone . getPropertyReservedNamingFirstChars ( localInstant ) ;
Code	return ! iZone && ! iZone . getPropertyReservedNamingFirstChars ( localInstant ) ;
Distance : 9

150
Tree	return iZone . rangeAxisLocations ( actualInvocationStackTrace ) ;
Code	return iZone . rangeAxisLocations ( actualInvocationStackTrace ) ;
Distance : 6

151
Tree	return iZone . subtype ( localInstant ) ;
Code	return iZone . subtype ( localInstant ) ;
Distance : 5

152
Tree	return iZone . boxPaint ( localInstant ) ;
Code	return iZone . boxPaint ( localInstant ) ;
Distance : 5

153
Tree	return ! iZone && ! iZone . invokeSuper ( localInstant ) ;
Code	return ! iZone && ! iZone . invokeSuper ( localInstant ) ;
Distance : 9

154
Tree	return iZone . fakeReturnValues ( localInstant ) ;
Code	return iZone . fakeReturnValues ( localInstant ) ;
Distance : 5

155
Tree	return retrieveLineSegments ( this , localInstant ) ;
Code	return retrieveLineSegments ( this , localInstant ) ;
Distance : 7

156
Tree	return ! iZone . defaultReturnValues ( localInstant ) && ^ ;
Code	return ! iZone . defaultReturnValues ( localInstant ) && ^ ;
Distance : 7

157
Tree	return decamelizeMatcher ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Code	return decamelizeMatcher ( localInstant , STRING_CONSTANT , TimeUnit.SECONDS ) ;
Distance : 5

158
Tree	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 , clazz , iZone ) ;
Code	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 , clazz , iZone ) ;
Distance : 7

159
Tree	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 , clazz , iZone ) ;
Code	return computeCovarianceMatrix ( namespaceToRequire , UTF_8 , clazz , iZone ) ;
Distance : 7

160
Tree	return decamelizeMatcher ( localInstant , UTF_8 , clazz , iZone ) ;
Code	return decamelizeMatcher ( localInstant , UTF_8 , clazz , iZone ) ;
Distance : 7

161
Tree	return computeCovarianceMatrix ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Code	return computeCovarianceMatrix ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Distance : 5

162
Tree	return iZone . defaultReturnValues ( localInstant , CSV_SEARCH_CHARS , null ) ;
Code	return iZone . defaultReturnValues ( localInstant , CSV_SEARCH_CHARS , null ) ;
Distance : 3

163
Tree	return iZone . createArgumentsAreDifferentException ( localInstant , UTF_8 ) ;
Code	return iZone . createArgumentsAreDifferentException ( localInstant , UTF_8 ) ;
Distance : 4

164
Tree	return ! FieldUtils && ! iZone . htmlEscape ( localInstant ) ;
Code	return ! FieldUtils && ! iZone . htmlEscape ( localInstant ) ;
Distance : 9

165
Tree	return ( ( zeroOffsetText ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Code	return ( ( zeroOffsetText ) localInstant ) . getStubbingLookupListeners ( localInstant , UTF_8 ) ;
Distance : 10

166
Tree	return computeCovarianceMatrix ( this , localInstant ) ;
Code	return computeCovarianceMatrix ( this , localInstant ) ;
Distance : 7

167
Tree	return iZone . defaultReturnValues ( localInstant , sample2 , null ) ;
Code	return iZone . defaultReturnValues ( localInstant , sample2 , null ) ;
Distance : 3

168
Tree	return ! FieldUtils && ! iZone . htmlEscape () ;
Code	return ! FieldUtils && ! iZone . htmlEscape () ;
Distance : 10

169
Tree	return iZone . getTimeInstance ( localInstant , UTF_8 ) ;
Code	return iZone . getTimeInstance ( localInstant , UTF_8 ) ;
Distance : 4

170
Tree	return iZone . defaultReturnValues ( localInstant , sampleStats2 , null ) ;
Code	return iZone . defaultReturnValues ( localInstant , sampleStats2 , null ) ;
Distance : 3

171
Tree	return iZone != vd ;
Code	return iZone != vd ;
Distance : 9

172
Tree	return ! FieldUtils . defaultReturnValues ( localInstant ) && <= ;
Code	return ! FieldUtils . defaultReturnValues ( localInstant ) && <= ;
Distance : 8

173
Tree	return iZone . htmlEscape ( localInstant , UTF_8 ) ;
Code	return iZone . htmlEscape ( localInstant , UTF_8 ) ;
Distance : 4

174
Tree	return ! iOffsetParsed && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Code	return ! iOffsetParsed && ! iZone . getPropertyReservedNamingNonFirstChars ( localInstant ) ;
Distance : 9

175
Tree	return ( ( actualInvocationStackTrace ) localInstant ) . getPeriod ( localInstant , UTF_8 ) ;
Code	return ( ( actualInvocationStackTrace ) localInstant ) . getPeriod ( localInstant , UTF_8 ) ;
Distance : 10

176
Tree	return iZone . defaultReturnValues ( null , populationSize , EMPTY , null ) ;
Code	return iZone . defaultReturnValues ( null , populationSize , EMPTY , null ) ;
Distance : 6

177
Tree	return retrieveLineSegments ( namespaceToRequire , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Code	return retrieveLineSegments ( namespaceToRequire , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Distance : 6

178
Tree	return retrieveLineSegments ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , TimeUnit.SECONDS ) ;
Code	return retrieveLineSegments ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , TimeUnit.SECONDS ) ;
Distance : 5

179
Tree	return retrieveLineSegments ( actualInvocationStackTrace , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Code	return retrieveLineSegments ( actualInvocationStackTrace , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Distance : 6

180
Tree	return computeCovarianceMatrix ( namespaceToRequire , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Code	return computeCovarianceMatrix ( namespaceToRequire , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Distance : 6

181
Tree	return decamelizeMatcher ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Code	return decamelizeMatcher ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , Locale.US ) ;
Distance : 5

182
Tree	return iZone . defaultReturnValues ( actualInvocationStackTrace , UTF_8 ) ;
Code	return iZone . defaultReturnValues ( actualInvocationStackTrace , UTF_8 ) ;
Distance : 5

183
Tree	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 , clazz ) ;
Code	return retrieveLineSegments ( actualInvocationStackTrace , UTF_8 , clazz ) ;
Distance : 6

184
Tree	return computeCovarianceMatrix ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , TimeUnit.SECONDS ) ;
Code	return computeCovarianceMatrix ( localInstant , Es6ToEs3Util.CANNOT_CONVERT_YET , TimeUnit.SECONDS ) ;
Distance : 5

185
Tree	return iZone . htmlEscape ( null , populationSize , checkedFeatures , null ) ;
Code	return iZone . htmlEscape ( null , populationSize , checkedFeatures , null ) ;
Distance : 6

186
Tree	return iZone . defaultReturnValues ( null , populationSize , sample2 , null ) ;
Code	return iZone . defaultReturnValues ( null , populationSize , sample2 , null ) ;
Distance : 6

187
Tree	return iZone . defaultReturnValues ( localInstant , CSV_SEARCH_CHARS ) ;
Code	return iZone . defaultReturnValues ( localInstant , CSV_SEARCH_CHARS ) ;
Distance : 4

188
Tree	return iZone . defaultReturnValues ( null , populationSize , clazz , null ) ;
Code	return iZone . defaultReturnValues ( null , populationSize , clazz , null ) ;
Distance : 6

189
Tree	return iZone . defaultReturnValues ( null , populationSize , extensionRegistry , null ) ;
Code	return iZone . defaultReturnValues ( null , populationSize , extensionRegistry , null ) ;
Distance : 6

190
Tree	return iZone . defaultReturnValues ( null , populationSize , wantedCount , null ) ;
Code	return iZone . defaultReturnValues ( null , populationSize , wantedCount , null ) ;
Distance : 6

191
Tree	return iZone != null iZone ? ;
Code	return iZone != null iZone ? ;
Distance : 9

192
Tree	return endIndex != null iZone ? ;
Code	return endIndex != null iZone ? ;
Distance : 10

193
Tree	return iChrono != null iZone ? ;
Code	return iChrono != null iZone ? ;
Distance : 10

194
Tree	return iPrinter != null iZone ? ;
Code	return iPrinter != null iZone ? ;
Distance : 10

195
Tree	return iZone . defaultReturnValues ( null , populationSize , sampleStats2 , null ) ;
Code	return iZone . defaultReturnValues ( null , populationSize , sampleStats2 , null ) ;
Distance : 6

196
Tree	return iOffsetParsed != null iZone ? ;
Code	return iOffsetParsed != null iZone ? ;
Distance : 10

197
Tree	return compilerExecutor != null iZone ? ;
Code	return compilerExecutor != null iZone ? ;
Distance : 10

198
Tree	return iZone != null iZone / ;
Code	return iZone != null iZone / ;
Distance : 9

199
Tree	return FieldUtils != null iZone ? ;
Code	return FieldUtils != null iZone ? ;
Distance : 10

========================================================================


========================================================================
Example Number: 117
Parent Code is: 
Partial newPartial = new Partial ( iChronology , newTypes , newValues ) ;
-------------------------------------------------------------------------------
Child code is: 
Partial newPartial = new Partial ( newTypes , newValues , iChronology ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Partial})) (59 (800{val=newPartial}) (204{val==}) (14 (304{val=new}) (43 (801{val=Partial})) (214{val=(}) (800{val=iChronology}) (234{val=,}) (800{val=newTypes}) (234{val=,}) (800{val=newValues}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Partial})) (59 (800{val=newPartial}) (204{val==}) (14 (304{val=new}) (43 (801{val=Partial})) (214{val=(}) (800{val=newTypes}) (234{val=,}) (800{val=newValues}) (234{val=,}) (800{val=iChronology}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Time/4/parent/src_main_java_org_joda_time_Partial.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 200
Wrong
========================================================================
False

0
Tree	SparseGradient scopeBuilder = new CheckProvidesCallback ( null , false ) ;
Code	SparseGradient scopeBuilder = new CheckProvidesCallback ( null , false ) ;
Distance : 7

1
Tree	StringWriter dataInOrder = new CheckProvidesCallback ( null , false ) ;
Code	StringWriter dataInOrder = new CheckProvidesCallback ( null , false ) ;
Distance : 7

2
Tree	StringWriter sgY2 = new CheckProvidesCallback ( this ) ;
Code	StringWriter sgY2 = new CheckProvidesCallback ( this ) ;
Distance : 8

3
Tree	StringWriter sgY2 = useEval . is ( LanguageMode.ECMASCRIPT_NEXT , NUMBER_CONSTANT ) ;
Code	StringWriter sgY2 = useEval . is ( LanguageMode.ECMASCRIPT_NEXT , NUMBER_CONSTANT ) ;
Distance : 9

4
Tree	PropertyType scopeBuilder = useEval . is ( LanguageMode.ECMASCRIPT_NEXT , NUMBER_CONSTANT ) ;
Code	PropertyType scopeBuilder = useEval . is ( LanguageMode.ECMASCRIPT_NEXT , NUMBER_CONSTANT ) ;
Distance : 9

5
Tree	PropertyType scopeBuilder = new CheckProvidesCallback ( this ) ;
Code	PropertyType scopeBuilder = new CheckProvidesCallback ( this ) ;
Distance : 8

6
Tree	StringWriter sgY2 = new CheckProvidesCallback ( null , false ) ;
Code	StringWriter sgY2 = new CheckProvidesCallback ( null , false ) ;
Distance : 7

7
Tree	StringWriter scopeBuilder = new ModuleLoader ( this ) ;
Code	StringWriter scopeBuilder = new ModuleLoader ( this ) ;
Distance : 8

8
Tree	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , this , CompositeFormat ) ;
Code	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , this , CompositeFormat ) ;
Distance : 6

9
Tree	SparseGradient scopeBuilder = new CheckProvidesCallback ( CompositeFormat , this , CompositeFormat ) ;
Code	SparseGradient scopeBuilder = new CheckProvidesCallback ( CompositeFormat , this , CompositeFormat ) ;
Distance : 6

10
Tree	StringWriter dataInOrder = new CheckProvidesCallback ( CompositeFormat , this , CompositeFormat ) ;
Code	StringWriter dataInOrder = new CheckProvidesCallback ( CompositeFormat , this , CompositeFormat ) ;
Distance : 6

11
Tree	StringWriter sgY2 = new CheckProvidesCallback ( CompositeFormat , this , CompositeFormat ) ;
Code	StringWriter sgY2 = new CheckProvidesCallback ( CompositeFormat , this , CompositeFormat ) ;
Distance : 6

12
Tree	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues ) ;
Code	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues ) ;
Distance : 6

13
Tree	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat . of () ) ;
Code	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat . of () ) ;
Distance : 10

14
Tree	SparseGradient scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues ) ;
Code	SparseGradient scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues ) ;
Distance : 6

15
Tree	PropertyType scopeBuilder = new CheckProvidesCallback ( CompositeFormat , this , CompositeFormat ) ;
Code	PropertyType scopeBuilder = new CheckProvidesCallback ( CompositeFormat , this , CompositeFormat ) ;
Distance : 6

16
Tree	StringWriter scopeBuilder = new ModuleLoader ( CompositeFormat , this , CompositeFormat ) ;
Code	StringWriter scopeBuilder = new ModuleLoader ( CompositeFormat , this , CompositeFormat ) ;
Distance : 6

17
Tree	StringWriter dataInOrder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues ) ;
Code	StringWriter dataInOrder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues ) ;
Distance : 6

18
Tree	SparseGradient scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat . of () ) ;
Code	SparseGradient scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat . of () ) ;
Distance : 10

19
Tree	StringWriter dataInOrder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat . of () ) ;
Code	StringWriter dataInOrder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat . of () ) ;
Distance : 10

20
Tree	StringWriter scopeBuilder = new DefaultNameGenerator ( CompositeFormat , this , CompositeFormat ) ;
Code	StringWriter scopeBuilder = new DefaultNameGenerator ( CompositeFormat , this , CompositeFormat ) ;
Distance : 6

21
Tree	StringWriter sgY2 = new CheckProvidesCallback ( CompositeFormat , srcText , newValues ) ;
Code	StringWriter sgY2 = new CheckProvidesCallback ( CompositeFormat , srcText , newValues ) ;
Distance : 6

22
Tree	SparseGradient dataInOrder = new CheckProvidesCallback ( CompositeFormat , this , CompositeFormat ) ;
Code	SparseGradient dataInOrder = new CheckProvidesCallback ( CompositeFormat , this , CompositeFormat ) ;
Distance : 6

23
Tree	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , showSeparators , newValues ) ;
Code	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , showSeparators , newValues ) ;
Distance : 6

24
Tree	StringWriter sgY2 = new CheckProvidesCallback ( CompositeFormat , srcText ) ;
Code	StringWriter sgY2 = new CheckProvidesCallback ( CompositeFormat , srcText ) ;
Distance : 7

25
Tree	StringWriter sgY2 = new CheckProvidesCallback ( CompositeFormat , new SerializableTypeVariable ( this ) ) ;
Code	StringWriter sgY2 = new CheckProvidesCallback ( CompositeFormat , new SerializableTypeVariable ( this ) ) ;
Distance : 9

26
Tree	PropertyType scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText ) ;
Code	PropertyType scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText ) ;
Distance : 7

27
Tree	PropertyType scopeBuilder = new CheckProvidesCallback ( CompositeFormat , new SerializableTypeVariable ( this ) ) ;
Code	PropertyType scopeBuilder = new CheckProvidesCallback ( CompositeFormat , new SerializableTypeVariable ( this ) ) ;
Distance : 9

28
Tree	StringWriter scopeBuilder = new ModuleLoader ( CompositeFormat , srcText ) ;
Code	StringWriter scopeBuilder = new ModuleLoader ( CompositeFormat , srcText ) ;
Distance : 7

29
Tree	StringWriter scopeBuilder = new DefaultNameGenerator ( CompositeFormat , srcText ) ;
Code	StringWriter scopeBuilder = new DefaultNameGenerator ( CompositeFormat , srcText ) ;
Distance : 7

30
Tree	SparseGradient scopeBuilder = new CheckProvidesCallback ( NUMBER_CONSTANT , CompositeFormat . of () ) ;
Code	SparseGradient scopeBuilder = new CheckProvidesCallback ( NUMBER_CONSTANT , CompositeFormat . of () ) ;
Distance : 8

31
Tree	StringWriter scopeBuilder = new ModuleLoader ( CompositeFormat , srcText , newValues , CompositeFormat . of ( chrono ) ) ;
Code	StringWriter scopeBuilder = new ModuleLoader ( CompositeFormat , srcText , newValues , CompositeFormat . of ( chrono ) ) ;
Distance : 12

32
Tree	SparseGradient scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat , null ) ;
Code	SparseGradient scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat , null ) ;
Distance : 9

33
Tree	StringWriter dataInOrder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat , null ) ;
Code	StringWriter dataInOrder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat , null ) ;
Distance : 9

34
Tree	StringWriter sgY2 = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat , null ) ;
Code	StringWriter sgY2 = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat , null ) ;
Distance : 9

35
Tree	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , showSeparators , newValues , CompositeFormat , null ) ;
Code	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , showSeparators , newValues , CompositeFormat , null ) ;
Distance : 9

36
Tree	StringWriter dataInOrder = new CheckProvidesCallback ( NUMBER_CONSTANT , CompositeFormat . of () ) ;
Code	StringWriter dataInOrder = new CheckProvidesCallback ( NUMBER_CONSTANT , CompositeFormat . of () ) ;
Distance : 8

37
Tree	PropertyType scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat , null ) ;
Code	PropertyType scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat , null ) ;
Distance : 9

38
Tree	StringWriter scopeBuilder = new ModuleLoader ( CompositeFormat , srcText , newValues , CompositeFormat , null ) ;
Code	StringWriter scopeBuilder = new ModuleLoader ( CompositeFormat , srcText , newValues , CompositeFormat , null ) ;
Distance : 9

39
Tree	StringWriter scopeBuilder = new DefaultNameGenerator ( CompositeFormat , srcText , newValues , CompositeFormat , null ) ;
Code	StringWriter scopeBuilder = new DefaultNameGenerator ( CompositeFormat , srcText , newValues , CompositeFormat , null ) ;
Distance : 9

40
Tree	SparseGradient dataInOrder = new CheckProvidesCallback ( NUMBER_CONSTANT , NUMBER_CONSTANT , values.length , NUMBER_CONSTANT , NUMBER_CONSTANT , values.length ) ;
Code	SparseGradient dataInOrder = new CheckProvidesCallback ( NUMBER_CONSTANT , NUMBER_CONSTANT , values.length , NUMBER_CONSTANT , NUMBER_CONSTANT , values.length ) ;
Distance : 12

41
Tree	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , getRight () ) ;
Code	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , getRight () ) ;
Distance : 8

42
Tree	SparseGradient scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , getLeft () ) ;
Code	SparseGradient scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , getLeft () ) ;
Distance : 8

43
Tree	StringWriter dataInOrder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , getLeft () ) ;
Code	StringWriter dataInOrder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , getLeft () ) ;
Distance : 8

44
Tree	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat . getInstance () , remainingRegion , newValues ) ;
Code	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat . getInstance () , remainingRegion , newValues ) ;
Distance : 9

45
Tree	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , showSeparators , newValues , getLeft () ) ;
Code	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , showSeparators , newValues , getLeft () ) ;
Distance : 8

46
Tree	StringWriter sgY2 = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , getLeft () ) ;
Code	StringWriter sgY2 = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , getLeft () ) ;
Distance : 8

47
Tree	SparseGradient scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , getRight () ) ;
Code	SparseGradient scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , getRight () ) ;
Distance : 8

48
Tree	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat . copySelf () , remainingRegion , newValues ) ;
Code	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat . copySelf () , remainingRegion , newValues ) ;
Distance : 9

49
Tree	SparseGradient scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText ) ;
Code	SparseGradient scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText ) ;
Distance : 7

50
Tree	StringWriter scopeBuilder = new DefaultNameGenerator ( CompositeFormat . getInstance () , remainingRegion , newValues ) ;
Code	StringWriter scopeBuilder = new DefaultNameGenerator ( CompositeFormat . getInstance () , remainingRegion , newValues ) ;
Distance : 9

51
Tree	StringWriter dataInOrder = new CheckProvidesCallback ( CompositeFormat , srcText ) ;
Code	StringWriter dataInOrder = new CheckProvidesCallback ( CompositeFormat , srcText ) ;
Distance : 7

52
Tree	SparseGradient scopeBuilder = new CheckProvidesCallback ( CompositeFormat , new SerializableTypeVariable ( this ) ) ;
Code	SparseGradient scopeBuilder = new CheckProvidesCallback ( CompositeFormat , new SerializableTypeVariable ( this ) ) ;
Distance : 9

53
Tree	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat ) ;
Code	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat ) ;
Distance : 7

54
Tree	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues . of () ) ;
Code	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues . of () ) ;
Distance : 9

55
Tree	StringWriter scopeBuilder = new CheckProvidesCallback ( NUMBER_CONSTANT , CompositeFormat . of () ) ;
Code	StringWriter scopeBuilder = new CheckProvidesCallback ( NUMBER_CONSTANT , CompositeFormat . of () ) ;
Distance : 8

56
Tree	StringWriter dataInOrder = new CheckProvidesCallback ( CompositeFormat , new SerializableTypeVariable ( this ) ) ;
Code	StringWriter dataInOrder = new CheckProvidesCallback ( CompositeFormat , new SerializableTypeVariable ( this ) ) ;
Distance : 9

57
Tree	SparseGradient scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat ) ;
Code	SparseGradient scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat ) ;
Distance : 7

58
Tree	StringWriter dataInOrder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat ) ;
Code	StringWriter dataInOrder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat ) ;
Distance : 7

59
Tree	StringWriter sgY2 = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat ) ;
Code	StringWriter sgY2 = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat ) ;
Distance : 7

60
Tree	StringWriter dataInOrder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , null ) ;
Code	StringWriter dataInOrder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , null ) ;
Distance : 7

61
Tree	StringWriter scopeBuilder = new ModuleLoader ( CompositeFormat , srcText , newValues . of () ) ;
Code	StringWriter scopeBuilder = new ModuleLoader ( CompositeFormat , srcText , newValues . of () ) ;
Distance : 9

62
Tree	StringWriter scopeBuilder = new DefaultNameGenerator ( CompositeFormat , srcText , newValues . of () ) ;
Code	StringWriter scopeBuilder = new DefaultNameGenerator ( CompositeFormat , srcText , newValues . of () ) ;
Distance : 9

63
Tree	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , showSeparators , newValues , CompositeFormat ) ;
Code	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , showSeparators , newValues , CompositeFormat ) ;
Distance : 7

64
Tree	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , showSeparators ) ;
Code	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , showSeparators ) ;
Distance : 7

65
Tree	SparseGradient scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues . of () ) ;
Code	SparseGradient scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues . of () ) ;
Distance : 9

66
Tree	StringWriter sgY2 = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , null ) ;
Code	StringWriter sgY2 = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , null ) ;
Distance : 7

67
Tree	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , showSeparators , newValues , null ) ;
Code	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , showSeparators , newValues , null ) ;
Distance : 7

68
Tree	PropertyType scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , null ) ;
Code	PropertyType scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , null ) ;
Distance : 7

69
Tree	StringWriter scopeBuilder = new ModuleLoader ( CompositeFormat , srcText , newValues , null ) ;
Code	StringWriter scopeBuilder = new ModuleLoader ( CompositeFormat , srcText , newValues , null ) ;
Distance : 7

70
Tree	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , null ) ;
Code	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , null ) ;
Distance : 7

71
Tree	StringWriter scopeBuilder = new DefaultNameGenerator ( CompositeFormat , srcText , newValues , null ) ;
Code	StringWriter scopeBuilder = new DefaultNameGenerator ( CompositeFormat , srcText , newValues , null ) ;
Distance : 7

72
Tree	StringWriter scopeBuilder = new DefaultNameGenerator ( this ) ;
Code	StringWriter scopeBuilder = new DefaultNameGenerator ( this ) ;
Distance : 8

73
Tree	SparseGradient dataInOrder = new CheckProvidesCallback ( this ) ;
Code	SparseGradient dataInOrder = new CheckProvidesCallback ( this ) ;
Distance : 8

74
Tree	SparseGradient scopeBuilder = new CheckProvidesCallback ( NUMBER_CONSTANT , NUMBER_CONSTANT , values.length , NUMBER_CONSTANT , NUMBER_CONSTANT , values.length ) ;
Code	SparseGradient scopeBuilder = new CheckProvidesCallback ( NUMBER_CONSTANT , NUMBER_CONSTANT , values.length , NUMBER_CONSTANT , NUMBER_CONSTANT , values.length ) ;
Distance : 12

75
Tree	PropertyType scopeBuilder = new CheckProvidesCallback ( null , false ) ;
Code	PropertyType scopeBuilder = new CheckProvidesCallback ( null , false ) ;
Distance : 7

76
Tree	StringWriter dataInOrder = new CheckProvidesCallback ( NUMBER_CONSTANT , NUMBER_CONSTANT , values.length , NUMBER_CONSTANT , NUMBER_CONSTANT , values.length ) ;
Code	StringWriter dataInOrder = new CheckProvidesCallback ( NUMBER_CONSTANT , NUMBER_CONSTANT , values.length , NUMBER_CONSTANT , NUMBER_CONSTANT , values.length ) ;
Distance : 12

77
Tree	SparseGradient dataInOrder = useEval . is ( LanguageMode.ECMASCRIPT_NEXT , NUMBER_CONSTANT ) ;
Code	SparseGradient dataInOrder = useEval . is ( LanguageMode.ECMASCRIPT_NEXT , NUMBER_CONSTANT ) ;
Distance : 9

78
Tree	StringWriter scopeBuilder = new ModuleLoader ( null , false ) ;
Code	StringWriter scopeBuilder = new ModuleLoader ( null , false ) ;
Distance : 7

79
Tree	StringWriter dataInOrder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues . of () ) ;
Code	StringWriter dataInOrder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues . of () ) ;
Distance : 9

80
Tree	PropertyType scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat ) ;
Code	PropertyType scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat ) ;
Distance : 7

81
Tree	StringWriter scopeBuilder = new ModuleLoader ( CompositeFormat , srcText , newValues , CompositeFormat ) ;
Code	StringWriter scopeBuilder = new ModuleLoader ( CompositeFormat , srcText , newValues , CompositeFormat ) ;
Distance : 7

82
Tree	StringWriter scopeBuilder = new DefaultNameGenerator ( null , false ) ;
Code	StringWriter scopeBuilder = new DefaultNameGenerator ( null , false ) ;
Distance : 7

83
Tree	StringWriter scopeBuilder = new DefaultNameGenerator ( CompositeFormat , srcText , newValues , CompositeFormat ) ;
Code	StringWriter scopeBuilder = new DefaultNameGenerator ( CompositeFormat , srcText , newValues , CompositeFormat ) ;
Distance : 7

84
Tree	StringWriter sgY2 = new CheckProvidesCallback ( CompositeFormat , srcText , newValues . of () ) ;
Code	StringWriter sgY2 = new CheckProvidesCallback ( CompositeFormat , srcText , newValues . of () ) ;
Distance : 9

85
Tree	StringWriter scopeBuilder = new ModuleLoader ( CompositeFormat , new SerializableTypeVariable ( this ) ) ;
Code	StringWriter scopeBuilder = new ModuleLoader ( CompositeFormat , new SerializableTypeVariable ( this ) ) ;
Distance : 9

86
Tree	StringWriter scopeBuilder = new DefaultNameGenerator ( CompositeFormat , new SerializableTypeVariable ( this ) ) ;
Code	StringWriter scopeBuilder = new DefaultNameGenerator ( CompositeFormat , new SerializableTypeVariable ( this ) ) ;
Distance : 9

87
Tree	SparseGradient dataInOrder = new CheckProvidesCallback ( CompositeFormat , new SerializableTypeVariable ( this ) ) ;
Code	SparseGradient dataInOrder = new CheckProvidesCallback ( CompositeFormat , new SerializableTypeVariable ( this ) ) ;
Distance : 9

88
Tree	StringWriter sgY2 = new CheckProvidesCallback ( NUMBER_CONSTANT , CompositeFormat . of () ) ;
Code	StringWriter sgY2 = new CheckProvidesCallback ( NUMBER_CONSTANT , CompositeFormat . of () ) ;
Distance : 8

89
Tree	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , showSeparators , newValues . of () ) ;
Code	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , showSeparators , newValues . of () ) ;
Distance : 9

90
Tree	PropertyType scopeBuilder = new CheckProvidesCallback ( NUMBER_CONSTANT , CompositeFormat . of () ) ;
Code	PropertyType scopeBuilder = new CheckProvidesCallback ( NUMBER_CONSTANT , CompositeFormat . of () ) ;
Distance : 8

91
Tree	PropertyType scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues . of () ) ;
Code	PropertyType scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues . of () ) ;
Distance : 9

92
Tree	StringWriter scopeBuilder = new CheckProvidesCallback ( LanguageMode.ECMASCRIPT_NEXT , obj2.props , false ) ;
Code	StringWriter scopeBuilder = new CheckProvidesCallback ( LanguageMode.ECMASCRIPT_NEXT , obj2.props , false ) ;
Distance : 6

93
Tree	StringWriter scopeBuilder = new ModuleLoader ( NUMBER_CONSTANT , CompositeFormat . of () ) ;
Code	StringWriter scopeBuilder = new ModuleLoader ( NUMBER_CONSTANT , CompositeFormat . of () ) ;
Distance : 8

94
Tree	SparseGradient scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , null ) ;
Code	SparseGradient scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , null ) ;
Distance : 7

95
Tree	StringWriter scopeBuilder = new DefaultNameGenerator ( NUMBER_CONSTANT , CompositeFormat . of () ) ;
Code	StringWriter scopeBuilder = new DefaultNameGenerator ( NUMBER_CONSTANT , CompositeFormat . of () ) ;
Distance : 8

96
Tree	SparseGradient scopeBuilder = new CheckProvidesCallback ( LanguageMode.ECMASCRIPT_NEXT , obj2.props , false ) ;
Code	SparseGradient scopeBuilder = new CheckProvidesCallback ( LanguageMode.ECMASCRIPT_NEXT , obj2.props , false ) ;
Distance : 6

97
Tree	StringWriter dataInOrder = new CheckProvidesCallback ( LanguageMode.ECMASCRIPT_NEXT , obj2.props , false ) ;
Code	StringWriter dataInOrder = new CheckProvidesCallback ( LanguageMode.ECMASCRIPT_NEXT , obj2.props , false ) ;
Distance : 6

98
Tree	StringWriter sgY2 = new CheckProvidesCallback ( LanguageMode.ECMASCRIPT_NEXT , obj2.props , false ) ;
Code	StringWriter sgY2 = new CheckProvidesCallback ( LanguageMode.ECMASCRIPT_NEXT , obj2.props , false ) ;
Distance : 6

99
Tree	SparseGradient dataInOrder = new CheckProvidesCallback ( NUMBER_CONSTANT , CompositeFormat . of () ) ;
Code	SparseGradient dataInOrder = new CheckProvidesCallback ( NUMBER_CONSTANT , CompositeFormat . of () ) ;
Distance : 8

100
Tree	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , new SerializableTypeVariable ( iChronology ) ) ;
Code	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , new SerializableTypeVariable ( iChronology ) ) ;
Distance : 8

101
Tree	PropertyType scopeBuilder = new CheckProvidesCallback ( LanguageMode.ECMASCRIPT_NEXT , obj2.props , false ) ;
Code	PropertyType scopeBuilder = new CheckProvidesCallback ( LanguageMode.ECMASCRIPT_NEXT , obj2.props , false ) ;
Distance : 6

102
Tree	StringWriter scopeBuilder = new ModuleLoader ( LanguageMode.ECMASCRIPT_NEXT , obj2.props , false ) ;
Code	StringWriter scopeBuilder = new ModuleLoader ( LanguageMode.ECMASCRIPT_NEXT , obj2.props , false ) ;
Distance : 6

103
Tree	StringWriter dataInOrder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , getRight () ) ;
Code	StringWriter dataInOrder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , getRight () ) ;
Distance : 8

104
Tree	SparseGradient scopeBuilder = new CheckProvidesCallback ( CompositeFormat . getInstance () , remainingRegion , newValues ) ;
Code	SparseGradient scopeBuilder = new CheckProvidesCallback ( CompositeFormat . getInstance () , remainingRegion , newValues ) ;
Distance : 9

105
Tree	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText ) ;
Code	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText ) ;
Distance : 7

106
Tree	StringWriter scopeBuilder = new DefaultNameGenerator ( LanguageMode.ECMASCRIPT_NEXT , obj2.props , false ) ;
Code	StringWriter scopeBuilder = new DefaultNameGenerator ( LanguageMode.ECMASCRIPT_NEXT , obj2.props , false ) ;
Distance : 6

107
Tree	StringWriter dataInOrder = new CheckProvidesCallback ( CompositeFormat . getInstance () , remainingRegion , newValues ) ;
Code	StringWriter dataInOrder = new CheckProvidesCallback ( CompositeFormat . getInstance () , remainingRegion , newValues ) ;
Distance : 9

108
Tree	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , new SerializableTypeVariable ( this ) ) ;
Code	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , new SerializableTypeVariable ( this ) ) ;
Distance : 9

109
Tree	SparseGradient dataInOrder = new CheckProvidesCallback ( LanguageMode.ECMASCRIPT_NEXT , obj2.props , false ) ;
Code	SparseGradient dataInOrder = new CheckProvidesCallback ( LanguageMode.ECMASCRIPT_NEXT , obj2.props , false ) ;
Distance : 6

110
Tree	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , this . CompositeFormat . of () ) ;
Code	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , this . CompositeFormat . of () ) ;
Distance : 12

111
Tree	SparseGradient scopeBuilder = new CheckProvidesCallback ( CompositeFormat , new SerializableTypeVariable ( iChronology ) ) ;
Code	SparseGradient scopeBuilder = new CheckProvidesCallback ( CompositeFormat , new SerializableTypeVariable ( iChronology ) ) ;
Distance : 8

112
Tree	StringWriter sgY2 = new CheckProvidesCallback ( CompositeFormat . getInstance () , remainingRegion , newValues ) ;
Code	StringWriter sgY2 = new CheckProvidesCallback ( CompositeFormat . getInstance () , remainingRegion , newValues ) ;
Distance : 9

113
Tree	PropertyType scopeBuilder = new CheckProvidesCallback ( CompositeFormat . getInstance () , remainingRegion , newValues ) ;
Code	PropertyType scopeBuilder = new CheckProvidesCallback ( CompositeFormat . getInstance () , remainingRegion , newValues ) ;
Distance : 9

114
Tree	StringWriter scopeBuilder = new DefaultNameGenerator ( CompositeFormat , srcText , newValues , this . CompositeFormat . of () ) ;
Code	StringWriter scopeBuilder = new DefaultNameGenerator ( CompositeFormat , srcText , newValues , this . CompositeFormat . of () ) ;
Distance : 12

115
Tree	StringWriter dataInOrder = new CheckProvidesCallback ( this , CompositeFormat , newValues , CompositeFormat ) ;
Code	StringWriter dataInOrder = new CheckProvidesCallback ( this , CompositeFormat , newValues , CompositeFormat ) ;
Distance : 7

116
Tree	StringWriter dataInOrder = new CheckProvidesCallback ( CompositeFormat , new SerializableTypeVariable ( iChronology ) ) ;
Code	StringWriter dataInOrder = new CheckProvidesCallback ( CompositeFormat , new SerializableTypeVariable ( iChronology ) ) ;
Distance : 8

117
Tree	SparseGradient scopeBuilder = new CheckProvidesCallback ( this , CompositeFormat , newValues , CompositeFormat ) ;
Code	SparseGradient scopeBuilder = new CheckProvidesCallback ( this , CompositeFormat , newValues , CompositeFormat ) ;
Distance : 7

118
Tree	SparseGradient scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , this . CompositeFormat . of () ) ;
Code	SparseGradient scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , this . CompositeFormat . of () ) ;
Distance : 12

119
Tree	StringWriter sgY2 = new CheckProvidesCallback ( this , CompositeFormat , newValues , CompositeFormat ) ;
Code	StringWriter sgY2 = new CheckProvidesCallback ( this , CompositeFormat , newValues , CompositeFormat ) ;
Distance : 7

120
Tree	PropertyType scopeBuilder = new CheckProvidesCallback ( this , CompositeFormat , newValues , CompositeFormat ) ;
Code	PropertyType scopeBuilder = new CheckProvidesCallback ( this , CompositeFormat , newValues , CompositeFormat ) ;
Distance : 7

121
Tree	StringWriter sgY2 = new CheckProvidesCallback ( CompositeFormat , new SerializableTypeVariable ( iChronology ) ) ;
Code	StringWriter sgY2 = new CheckProvidesCallback ( CompositeFormat , new SerializableTypeVariable ( iChronology ) ) ;
Distance : 8

122
Tree	StringWriter scopeBuilder = new ModuleLoader ( CompositeFormat . getInstance () , remainingRegion , newValues ) ;
Code	StringWriter scopeBuilder = new ModuleLoader ( CompositeFormat . getInstance () , remainingRegion , newValues ) ;
Distance : 9

123
Tree	StringWriter dataInOrder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , this . CompositeFormat . of () ) ;
Code	StringWriter dataInOrder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , this . CompositeFormat . of () ) ;
Distance : 12

124
Tree	SparseGradient dataInOrder = new CheckProvidesCallback ( this , CompositeFormat , newValues , CompositeFormat ) ;
Code	SparseGradient dataInOrder = new CheckProvidesCallback ( this , CompositeFormat , newValues , CompositeFormat ) ;
Distance : 7

125
Tree	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , NUMBER_CONSTANT , scalar , newValues ) ;
Code	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , NUMBER_CONSTANT , scalar , newValues ) ;
Distance : 8

126
Tree	StringWriter scopeBuilder = new ModuleLoader ( this , CompositeFormat , newValues , CompositeFormat ) ;
Code	StringWriter scopeBuilder = new ModuleLoader ( this , CompositeFormat , newValues , CompositeFormat ) ;
Distance : 7

127
Tree	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , NUMBER_CONSTANT , scalar , CompositeFormat ) ;
Code	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , NUMBER_CONSTANT , scalar , CompositeFormat ) ;
Distance : 8

128
Tree	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , NUMBER_CONSTANT , newValues , newValues ) ;
Code	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , NUMBER_CONSTANT , newValues , newValues ) ;
Distance : 7

129
Tree	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , NUMBER_CONSTANT , newValues , CompositeFormat ) ;
Code	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , NUMBER_CONSTANT , newValues , CompositeFormat ) ;
Distance : 7

130
Tree	StringWriter dataInOrder = new CheckProvidesCallback ( CompositeFormat , NUMBER_CONSTANT , scalar , newValues ) ;
Code	StringWriter dataInOrder = new CheckProvidesCallback ( CompositeFormat , NUMBER_CONSTANT , scalar , newValues ) ;
Distance : 8

131
Tree	PropertyType scopeBuilder = new CheckProvidesCallback ( CompositeFormat , new SerializableTypeVariable ( iChronology ) ) ;
Code	PropertyType scopeBuilder = new CheckProvidesCallback ( CompositeFormat , new SerializableTypeVariable ( iChronology ) ) ;
Distance : 8

132
Tree	StringWriter dataInOrder = new CheckProvidesCallback ( CompositeFormat , NUMBER_CONSTANT , scalar , CompositeFormat ) ;
Code	StringWriter dataInOrder = new CheckProvidesCallback ( CompositeFormat , NUMBER_CONSTANT , scalar , CompositeFormat ) ;
Distance : 8

133
Tree	StringWriter scopeBuilder = new DefaultNameGenerator ( this , CompositeFormat , newValues , CompositeFormat ) ;
Code	StringWriter scopeBuilder = new DefaultNameGenerator ( this , CompositeFormat , newValues , CompositeFormat ) ;
Distance : 7

134
Tree	SparseGradient scopeBuilder = new CheckProvidesCallback ( CompositeFormat , NUMBER_CONSTANT , scalar , newValues ) ;
Code	SparseGradient scopeBuilder = new CheckProvidesCallback ( CompositeFormat , NUMBER_CONSTANT , scalar , newValues ) ;
Distance : 8

135
Tree	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , new SerializableTypeVariable ( iChronology , srcText ) ) ;
Code	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , new SerializableTypeVariable ( iChronology , srcText ) ) ;
Distance : 10

136
Tree	StringWriter scopeBuilder = new CheckProvidesCallback ( new ConstructorInjection ( iChronology ) , str2 , newValues ) ;
Code	StringWriter scopeBuilder = new CheckProvidesCallback ( new ConstructorInjection ( iChronology ) , str2 , newValues ) ;
Distance : 10

137
Tree	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , new SerializableTypeVariable ( iChronology , targetBaseInterface ) ) ;
Code	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , new SerializableTypeVariable ( iChronology , targetBaseInterface ) ) ;
Distance : 10

138
Tree	StringWriter scopeBuilder = new CheckProvidesCallback ( new ZigguratNormalizedGaussianSampler ( iChronology ) , str2 , newValues ) ;
Code	StringWriter scopeBuilder = new CheckProvidesCallback ( new ZigguratNormalizedGaussianSampler ( iChronology ) , str2 , newValues ) ;
Distance : 10

139
Tree	SparseGradient scopeBuilder = new CheckProvidesCallback ( CompositeFormat , NUMBER_CONSTANT , scalar , CompositeFormat ) ;
Code	SparseGradient scopeBuilder = new CheckProvidesCallback ( CompositeFormat , NUMBER_CONSTANT , scalar , CompositeFormat ) ;
Distance : 8

140
Tree	SparseGradient scopeBuilder = new CheckProvidesCallback ( CompositeFormat , new SerializableTypeVariable ( iChronology , srcText ) ) ;
Code	SparseGradient scopeBuilder = new CheckProvidesCallback ( CompositeFormat , new SerializableTypeVariable ( iChronology , srcText ) ) ;
Distance : 10

141
Tree	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , new SerializableTypeVariable ( iChronology , str2 ) ) ;
Code	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , new SerializableTypeVariable ( iChronology , str2 ) ) ;
Distance : 10

142
Tree	StringWriter dataInOrder = new CheckProvidesCallback ( CompositeFormat , new SerializableTypeVariable ( iChronology , srcText ) ) ;
Code	StringWriter dataInOrder = new CheckProvidesCallback ( CompositeFormat , new SerializableTypeVariable ( iChronology , srcText ) ) ;
Distance : 10

143
Tree	Dialog scopeBuilder = useEval . is ( LanguageMode.ECMASCRIPT_NEXT , NUMBER_CONSTANT ) ;
Code	Dialog scopeBuilder = useEval . is ( LanguageMode.ECMASCRIPT_NEXT , NUMBER_CONSTANT ) ;
Distance : 9

144
Tree	SparseGradient dataInOrder = new CheckProvidesCallback ( null , false ) ;
Code	SparseGradient dataInOrder = new CheckProvidesCallback ( null , false ) ;
Distance : 7

145
Tree	TypeMockability scopeBuilder = useEval . is ( LanguageMode.ECMASCRIPT_NEXT , NUMBER_CONSTANT ) ;
Code	TypeMockability scopeBuilder = useEval . is ( LanguageMode.ECMASCRIPT_NEXT , NUMBER_CONSTANT ) ;
Distance : 9

146
Tree	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , getLeft () ) ;
Code	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , getLeft () ) ;
Distance : 8

147
Tree	StringWriter sgY2 = new CheckProvidesCallback ( NUMBER_CONSTANT , NUMBER_CONSTANT , values.length , NUMBER_CONSTANT , NUMBER_CONSTANT , values.length ) ;
Code	StringWriter sgY2 = new CheckProvidesCallback ( NUMBER_CONSTANT , NUMBER_CONSTANT , values.length , NUMBER_CONSTANT , NUMBER_CONSTANT , values.length ) ;
Distance : 12

148
Tree	SparseGradient scopeBuilder = new CheckProvidesCallback ( new ConstructorInjection ( iChronology ) , str2 , newValues ) ;
Code	SparseGradient scopeBuilder = new CheckProvidesCallback ( new ConstructorInjection ( iChronology ) , str2 , newValues ) ;
Distance : 10

149
Tree	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat . of ( chrono ) ) ;
Code	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat . of ( chrono ) ) ;
Distance : 12

150
Tree	StringWriter sgY2 = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat . of () ) ;
Code	StringWriter sgY2 = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat . of () ) ;
Distance : 10

151
Tree	SparseGradient scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat . of ( chrono ) ) ;
Code	SparseGradient scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat . of ( chrono ) ) ;
Distance : 12

152
Tree	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , showSeparators , newValues , CompositeFormat . of () ) ;
Code	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , showSeparators , newValues , CompositeFormat . of () ) ;
Distance : 10

153
Tree	PropertyType scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues ) ;
Code	PropertyType scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues ) ;
Distance : 6

154
Tree	StringWriter dataInOrder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat . of ( chrono ) ) ;
Code	StringWriter dataInOrder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat . of ( chrono ) ) ;
Distance : 12

155
Tree	PropertyType scopeBuilder = new CheckProvidesCallback ( NUMBER_CONSTANT , NUMBER_CONSTANT , values.length , NUMBER_CONSTANT , NUMBER_CONSTANT , values.length ) ;
Code	PropertyType scopeBuilder = new CheckProvidesCallback ( NUMBER_CONSTANT , NUMBER_CONSTANT , values.length , NUMBER_CONSTANT , NUMBER_CONSTANT , values.length ) ;
Distance : 12

156
Tree	StringWriter scopeBuilder = new ModuleLoader ( CompositeFormat , srcText , newValues ) ;
Code	StringWriter scopeBuilder = new ModuleLoader ( CompositeFormat , srcText , newValues ) ;
Distance : 6

157
Tree	StringWriter scopeBuilder = new DefaultNameGenerator ( NUMBER_CONSTANT , NUMBER_CONSTANT , values.length , NUMBER_CONSTANT , NUMBER_CONSTANT , values.length ) ;
Code	StringWriter scopeBuilder = new DefaultNameGenerator ( NUMBER_CONSTANT , NUMBER_CONSTANT , values.length , NUMBER_CONSTANT , NUMBER_CONSTANT , values.length ) ;
Distance : 12

158
Tree	StringWriter scopeBuilder = useEval . is ( LanguageMode.ECMASCRIPT_NEXT , NUMBER_CONSTANT ) ;
Code	StringWriter scopeBuilder = useEval . is ( LanguageMode.ECMASCRIPT_NEXT , NUMBER_CONSTANT ) ;
Distance : 9

159
Tree	StringWriter scopeBuilder = new CheckProvidesCallback ( this ) ;
Code	StringWriter scopeBuilder = new CheckProvidesCallback ( this ) ;
Distance : 8

160
Tree	StringWriter scopeBuilder = new CheckProvidesCallback ( null , false ) ;
Code	StringWriter scopeBuilder = new CheckProvidesCallback ( null , false ) ;
Distance : 7

161
Tree	StringWriter scopeBuilder = new DefaultNameGenerator ( CompositeFormat , srcText , newValues ) ;
Code	StringWriter scopeBuilder = new DefaultNameGenerator ( CompositeFormat , srcText , newValues ) ;
Distance : 6

162
Tree	SparseGradient scopeBuilder = useEval . is ( LanguageMode.ECMASCRIPT_NEXT , NUMBER_CONSTANT ) ;
Code	SparseGradient scopeBuilder = useEval . is ( LanguageMode.ECMASCRIPT_NEXT , NUMBER_CONSTANT ) ;
Distance : 9

163
Tree	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat , null ) ;
Code	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat , null ) ;
Distance : 9

164
Tree	StringWriter sgY2 = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat . of ( chrono ) ) ;
Code	StringWriter sgY2 = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat . of ( chrono ) ) ;
Distance : 12

165
Tree	SparseGradient scopeBuilder = new CheckProvidesCallback ( this ) ;
Code	SparseGradient scopeBuilder = new CheckProvidesCallback ( this ) ;
Distance : 8

166
Tree	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat . verificationListeners () ) ;
Code	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat . verificationListeners () ) ;
Distance : 10

167
Tree	PropertyType scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat . of () ) ;
Code	PropertyType scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat . of () ) ;
Distance : 10

168
Tree	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , showSeparators , newValues , CompositeFormat . of ( chrono ) ) ;
Code	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , showSeparators , newValues , CompositeFormat . of ( chrono ) ) ;
Distance : 12

169
Tree	StringWriter scopeBuilder = new ModuleLoader ( NUMBER_CONSTANT , NUMBER_CONSTANT , values.length , NUMBER_CONSTANT , NUMBER_CONSTANT , values.length ) ;
Code	StringWriter scopeBuilder = new ModuleLoader ( NUMBER_CONSTANT , NUMBER_CONSTANT , values.length , NUMBER_CONSTANT , NUMBER_CONSTANT , values.length ) ;
Distance : 12

170
Tree	StringWriter dataInOrder = new CheckProvidesCallback ( this ) ;
Code	StringWriter dataInOrder = new CheckProvidesCallback ( this ) ;
Distance : 8

171
Tree	StringWriter scopeBuilder = new CheckProvidesCallback ( NUMBER_CONSTANT , NUMBER_CONSTANT , values.length , NUMBER_CONSTANT , NUMBER_CONSTANT , values.length ) ;
Code	StringWriter scopeBuilder = new CheckProvidesCallback ( NUMBER_CONSTANT , NUMBER_CONSTANT , values.length , NUMBER_CONSTANT , NUMBER_CONSTANT , values.length ) ;
Distance : 12

172
Tree	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat . verificationListeners ( chrono ) ) ;
Code	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat . verificationListeners ( chrono ) ) ;
Distance : 12

173
Tree	StringWriter scopeBuilder = new ModuleLoader ( CompositeFormat , srcText , newValues , CompositeFormat . of () ) ;
Code	StringWriter scopeBuilder = new ModuleLoader ( CompositeFormat , srcText , newValues , CompositeFormat . of () ) ;
Distance : 10

174
Tree	StringWriter dataInOrder = useEval . is ( LanguageMode.ECMASCRIPT_NEXT , NUMBER_CONSTANT ) ;
Code	StringWriter dataInOrder = useEval . is ( LanguageMode.ECMASCRIPT_NEXT , NUMBER_CONSTANT ) ;
Distance : 9

175
Tree	PropertyType scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat . of ( chrono ) ) ;
Code	PropertyType scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat . of ( chrono ) ) ;
Distance : 12

176
Tree	StringWriter scopeBuilder = new ModuleLoader ( CompositeFormat , new SerializableTypeVariable ( iChronology ) ) ;
Code	StringWriter scopeBuilder = new ModuleLoader ( CompositeFormat , new SerializableTypeVariable ( iChronology ) ) ;
Distance : 8

177
Tree	StringWriter scopeBuilder = new DefaultNameGenerator ( CompositeFormat , new SerializableTypeVariable ( iChronology ) ) ;
Code	StringWriter scopeBuilder = new DefaultNameGenerator ( CompositeFormat , new SerializableTypeVariable ( iChronology ) ) ;
Distance : 8

178
Tree	SparseGradient dataInOrder = new CheckProvidesCallback ( CompositeFormat , new SerializableTypeVariable ( iChronology ) ) ;
Code	SparseGradient dataInOrder = new CheckProvidesCallback ( CompositeFormat , new SerializableTypeVariable ( iChronology ) ) ;
Distance : 8

179
Tree	StringWriter sgY2 = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , this . CompositeFormat . of () ) ;
Code	StringWriter sgY2 = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , this . CompositeFormat . of () ) ;
Distance : 12

180
Tree	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , showSeparators , newValues , this . CompositeFormat . of () ) ;
Code	StringWriter scopeBuilder = new CheckProvidesCallback ( CompositeFormat , showSeparators , newValues , this . CompositeFormat . of () ) ;
Distance : 12

181
Tree	StringWriter scopeBuilder = new CheckProvidesCallback ( this , CompositeFormat , newValues , CompositeFormat ) ;
Code	StringWriter scopeBuilder = new CheckProvidesCallback ( this , CompositeFormat , newValues , CompositeFormat ) ;
Distance : 7

182
Tree	PropertyType scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , this . CompositeFormat . of () ) ;
Code	PropertyType scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , this . CompositeFormat . of () ) ;
Distance : 12

183
Tree	StringWriter scopeBuilder = new ModuleLoader ( CompositeFormat , srcText , newValues , this . CompositeFormat . of () ) ;
Code	StringWriter scopeBuilder = new ModuleLoader ( CompositeFormat , srcText , newValues , this . CompositeFormat . of () ) ;
Distance : 12

184
Tree	final RectangularCholeskyDecomposition icme = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat . of () ) ;
Code	final RectangularCholeskyDecomposition icme = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat . of () ) ;
Distance : 11

185
Tree	final RectangularCholeskyDecomposition scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat . of () ) ;
Code	final RectangularCholeskyDecomposition scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat . of () ) ;
Distance : 11

186
Tree	abstract CheckProvidesCallback scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat . of () ) ;
Code	abstract CheckProvidesCallback scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat . of () ) ;
Distance : 11

187
Tree	StringWriter dataInOrder = new CheckProvidesCallback ( new ConstructorInjection ( iChronology ) , str2 , newValues ) ;
Code	StringWriter dataInOrder = new CheckProvidesCallback ( new ConstructorInjection ( iChronology ) , str2 , newValues ) ;
Distance : 10

188
Tree	SparseGradient scopeBuilder = new CheckProvidesCallback ( CompositeFormat , new SerializableTypeVariable ( iChronology , targetBaseInterface ) ) ;
Code	SparseGradient scopeBuilder = new CheckProvidesCallback ( CompositeFormat , new SerializableTypeVariable ( iChronology , targetBaseInterface ) ) ;
Distance : 10

189
Tree	StringWriter dataInOrder = new CheckProvidesCallback ( CompositeFormat , new SerializableTypeVariable ( iChronology , targetBaseInterface ) ) ;
Code	StringWriter dataInOrder = new CheckProvidesCallback ( CompositeFormat , new SerializableTypeVariable ( iChronology , targetBaseInterface ) ) ;
Distance : 10

190
Tree	abstract CheckProvidesCallback icme = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat . of () ) ;
Code	abstract CheckProvidesCallback icme = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat . of () ) ;
Distance : 11

191
Tree	abstract RectangularCholeskyDecomposition scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat . of () ) ;
Code	abstract RectangularCholeskyDecomposition scopeBuilder = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat . of () ) ;
Distance : 11

192
Tree	StringWriter sgY2 = new CheckProvidesCallback ( CompositeFormat , new SerializableTypeVariable ( iChronology , srcText ) ) ;
Code	StringWriter sgY2 = new CheckProvidesCallback ( CompositeFormat , new SerializableTypeVariable ( iChronology , srcText ) ) ;
Distance : 10

193
Tree	StringWriter sgY2 = new CheckProvidesCallback ( new ConstructorInjection ( iChronology ) , str2 , newValues ) ;
Code	StringWriter sgY2 = new CheckProvidesCallback ( new ConstructorInjection ( iChronology ) , str2 , newValues ) ;
Distance : 10

194
Tree	final CheckProvidesCallback icme = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat . of () ) ;
Code	final CheckProvidesCallback icme = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat . of () ) ;
Distance : 11

195
Tree	abstract RectangularCholeskyDecomposition icme = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat . of () ) ;
Code	abstract RectangularCholeskyDecomposition icme = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat . of () ) ;
Distance : 11

196
Tree	SparseGradient scopeBuilder = new CheckProvidesCallback ( new ZigguratNormalizedGaussianSampler ( iChronology ) , str2 , newValues ) ;
Code	SparseGradient scopeBuilder = new CheckProvidesCallback ( new ZigguratNormalizedGaussianSampler ( iChronology ) , str2 , newValues ) ;
Distance : 10

197
Tree	StringWriter dataInOrder = new CheckProvidesCallback ( new ZigguratNormalizedGaussianSampler ( iChronology ) , str2 , newValues ) ;
Code	StringWriter dataInOrder = new CheckProvidesCallback ( new ZigguratNormalizedGaussianSampler ( iChronology ) , str2 , newValues ) ;
Distance : 10

198
Tree	final RectangularCholeskyDecomposition tok2 = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat . of () ) ;
Code	final RectangularCholeskyDecomposition tok2 = new CheckProvidesCallback ( CompositeFormat , srcText , newValues , CompositeFormat . of () ) ;
Distance : 11

199
Tree	PropertyType scopeBuilder = new CheckProvidesCallback ( new ConstructorInjection ( iChronology ) , str2 , newValues ) ;
Code	PropertyType scopeBuilder = new CheckProvidesCallback ( new ConstructorInjection ( iChronology ) , str2 , newValues ) ;
Distance : 10

========================================================================


