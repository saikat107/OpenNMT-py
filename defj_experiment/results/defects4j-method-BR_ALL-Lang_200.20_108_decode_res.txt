========================================================================
Example Number: 1
Parent Code is: 
int len = thisBuf.length - strLen ;
-------------------------------------------------------------------------------
Child code is: 
int len = size - strLen + NUMBER_CONSTANT ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=len}) (204{val==}) (27 (40{val=thisBuf.length}) (201{val=-}) (800{val=strLen}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (39{val=int}) (59 (800{val=len}) (204{val==}) (27 (27 (800{val=size}) (201{val=-}) (800{val=strLen})) (200{val=+}) (34{val=NUMBER_CONSTANT}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/61/parent/src_java_org_apache_commons_lang_text_StrBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 108
Wrong
========================================================================
False

0
Tree	int len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 12

1
Tree	int len = STRING_CONSTANT + len ;
Code	int len = STRING_CONSTANT + len ;
Distance : 4

2
Tree	int len = NUMBER_CONSTANT - strLen ;
Code	int len = NUMBER_CONSTANT - strLen ;
Distance : 3

3
Tree	int len = STRING_CONSTANT + STRING_CONSTANT - strLen ;
Code	int len = STRING_CONSTANT + STRING_CONSTANT - strLen ;
Distance : 5

4
Tree	int len = NUMBER_CONSTANT * int ;
Code	int len = NUMBER_CONSTANT * int ;
Distance : 5

5
Tree	int len = len - size ;
Code	int len = len - size ;
Distance : 4

6
Tree	int len = len / size ;
Code	int len = len / size ;
Distance : 5

7
Tree	int len = size + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = size + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 11

8
Tree	int len = size > > NUMBER_CONSTANT ;
Code	int len = size > > NUMBER_CONSTANT ;
Distance : 3

9
Tree	char len = NUMBER_CONSTANT * int ;
Code	char len = NUMBER_CONSTANT * int ;
Distance : 6

10
Tree	char len = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Code	char len = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Distance : 4

11
Tree	double len = NUMBER_CONSTANT * = ;
Code	double len = NUMBER_CONSTANT * = ;
Distance : 6

12
Tree	int len = ( char ) len * len ;
Code	int len = ( char ) len * len ;
Distance : 6

13
Tree	int len = NUMBER_CONSTANT * strLen * size * - ;
Code	int len = NUMBER_CONSTANT * strLen * size * - ;
Distance : 6

14
Tree	int len = thisBuf.length - size ;
Code	int len = thisBuf.length - size ;
Distance : 4

15
Tree	int len = thisBuf.length - strLen ;
Code	int len = thisBuf.length - strLen ;
Distance : 3

16
Tree	int len = len + STRING_CONSTANT + = ;
Code	int len = len + STRING_CONSTANT + = ;
Distance : 4

17
Tree	boolean len = thisBuf.length - strLen ;
Code	boolean len = thisBuf.length - strLen ;
Distance : 4

18
Tree	int len = size / strLen ;
Code	int len = size / strLen ;
Distance : 3

19
Tree	int len = len % NUMBER_CONSTANT ;
Code	int len = len % NUMBER_CONSTANT ;
Distance : 4

20
Tree	int len = len + strLen + len + strLen ;
Code	int len = len + strLen + len + strLen ;
Distance : 5

21
Tree	int len = throws > > > NUMBER_CONSTANT ;
Code	int len = throws > > > NUMBER_CONSTANT ;
Distance : 4

22
Tree	int len = STRING_CONSTANT + STRING_CONSTANT - len ;
Code	int len = STRING_CONSTANT + STRING_CONSTANT - len ;
Distance : 5

23
Tree	boolean len = STRING_CONSTANT + len ;
Code	boolean len = STRING_CONSTANT + len ;
Distance : 5

24
Tree	int len = CHAR_CONS > > > NUMBER_CONSTANT ;
Code	int len = CHAR_CONS > > > NUMBER_CONSTANT ;
Distance : 4

25
Tree	int len = len && chars.length ;
Code	int len = len && chars.length ;
Distance : 5

26
Tree	int len = chars.length > > > NUMBER_CONSTANT ;
Code	int len = chars.length > > > NUMBER_CONSTANT ;
Distance : 4

27
Tree	int len = size / strLen - strLen ;
Code	int len = size / strLen - strLen ;
Distance : 3

28
Tree	double len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	double len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

29
Tree	int len = len && extends ;
Code	int len = len && extends ;
Distance : 5

30
Tree	int len = greatestCommonDivisor () - strLen ;
Code	int len = greatestCommonDivisor () - strLen ;
Distance : 4

31
Tree	int len = len * NUMBER_CONSTANT ;
Code	int len = len * NUMBER_CONSTANT ;
Distance : 4

32
Tree	int len = len / strLen + strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = len / strLen + strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 9

33
Tree	int len = strLen % NUMBER_CONSTANT ;
Code	int len = strLen % NUMBER_CONSTANT ;
Distance : 3

34
Tree	int len = STRING_CONSTANT + strLen ;
Code	int len = STRING_CONSTANT + strLen ;
Distance : 4

35
Tree	int len = ( int ) len * size ;
Code	int len = ( int ) len * size ;
Distance : 6

36
Tree	int len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 14

37
Tree	int len = len / len ;
Code	int len = len / len ;
Distance : 5

38
Tree	int len = mValues () - strLen ;
Code	int len = mValues () - strLen ;
Distance : 4

39
Tree	int len = NUMBER_CONSTANT - size ;
Code	int len = NUMBER_CONSTANT - size ;
Distance : 4

40
Tree	int len = len / strLen ;
Code	int len = len / strLen ;
Distance : 4

41
Tree	int len = NUMBER_CONSTANT * strLen * len * thisBuf.length ;
Code	int len = NUMBER_CONSTANT * strLen * len * thisBuf.length ;
Distance : 6

42
Tree	int len = strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 12

43
Tree	int len = getProperNumerator () - strLen ;
Code	int len = getProperNumerator () - strLen ;
Distance : 4

44
Tree	int len = STRING_CONSTANT + size ;
Code	int len = STRING_CONSTANT + size ;
Distance : 4

45
Tree	int len = len <> NUMBER_CONSTANT ;
Code	int len = len <> NUMBER_CONSTANT ;
Distance : 4

46
Tree	boolean len = thisBuf.length + NUMBER_CONSTANT ;
Code	boolean len = thisBuf.length + NUMBER_CONSTANT ;
Distance : 4

47
Tree	char len = thisBuf.length - strLen ;
Code	char len = thisBuf.length - strLen ;
Distance : 4

48
Tree	int len = thisBuf.length + NUMBER_CONSTANT ;
Code	int len = thisBuf.length + NUMBER_CONSTANT ;
Distance : 3

49
Tree	int len = len ;
Code	int len = len ;
Distance : 5

50
Tree	int len = len && length ;
Code	int len = len && length ;
Distance : 5

51
Tree	boolean len = NUMBER_CONSTANT * int ;
Code	boolean len = NUMBER_CONSTANT * int ;
Distance : 6

52
Tree	boolean len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	boolean len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

53
Tree	int len = size ;
Code	int len = size ;
Distance : 4

54
Tree	int len = len - strLen ;
Code	int len = len - strLen ;
Distance : 3

55
Tree	int len = len / len - strLen ;
Code	int len = len / len - strLen ;
Distance : 5

56
Tree	boolean len = NUMBER_CONSTANT - strLen ;
Code	boolean len = NUMBER_CONSTANT - strLen ;
Distance : 4

57
Tree	int len = STRING_CONSTANT + STRING_CONSTANT - size ;
Code	int len = STRING_CONSTANT + STRING_CONSTANT - size ;
Distance : 5

58
Tree	boolean len = len > > NUMBER_CONSTANT ;
Code	boolean len = len > > NUMBER_CONSTANT ;
Distance : 5

59
Tree	int len = NUMBER_CONSTANT - len ;
Code	int len = NUMBER_CONSTANT - len ;
Distance : 4

60
Tree	int len = strLen > > NUMBER_CONSTANT ;
Code	int len = strLen > > NUMBER_CONSTANT ;
Distance : 4

61
Tree	int len = len + len + STRING_CONSTANT ;
Code	int len = len + len + STRING_CONSTANT ;
Distance : 4

62
Tree	int len = size + strLen + STRING_CONSTANT ;
Code	int len = size + strLen + STRING_CONSTANT ;
Distance : 2

63
Tree	int len = len - NUMBER_CONSTANT ;
Code	int len = len - NUMBER_CONSTANT ;
Distance : 3

64
Tree	int len = len + strLen + size + strLen ;
Code	int len = len + strLen + size + strLen ;
Distance : 5

65
Tree	int len = ( int ) len * len ;
Code	int len = ( int ) len * len ;
Distance : 6

66
Tree	int len = len > > NUMBER_CONSTANT ;
Code	int len = len > > NUMBER_CONSTANT ;
Distance : 4

67
Tree	boolean len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	boolean len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 15

68
Tree	int len = size % NUMBER_CONSTANT ;
Code	int len = size % NUMBER_CONSTANT ;
Distance : 3

69
Tree	int len = len >= NUMBER_CONSTANT ;
Code	int len = len >= NUMBER_CONSTANT ;
Distance : 4

70
Tree	int len = Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES > > > NUMBER_CONSTANT ;
Code	int len = Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES > > > NUMBER_CONSTANT ;
Distance : 4

71
Tree	int len = len / size + strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = len / size + strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 8

72
Tree	boolean len = len - strLen ;
Code	boolean len = len - strLen ;
Distance : 4

73
Tree	int len = NUMBER_CONSTANT * size * strLen * int ;
Code	int len = NUMBER_CONSTANT * size * strLen * int ;
Distance : 5

74
Tree	boolean len = len % NUMBER_CONSTANT ;
Code	boolean len = len % NUMBER_CONSTANT ;
Distance : 5

75
Tree	double len = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Code	double len = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Distance : 4

76
Tree	int len = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Code	int len = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Distance : 3

77
Tree	int len = len + length () + strLen ;
Code	int len = len + length () + strLen ;
Distance : 5

78
Tree	boolean len = len + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	boolean len = len + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

79
Tree	int len = NUMBER_CONSTANT * strLen * strLen * = ;
Code	int len = NUMBER_CONSTANT * strLen * strLen * = ;
Distance : 6

80
Tree	int len = len / strLen - strLen ;
Code	int len = len / strLen - strLen ;
Distance : 4

81
Tree	int len = chars.length () - strLen ;
Code	int len = chars.length () - strLen ;
Distance : 4

82
Tree	char len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	char len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 15

83
Tree	boolean len = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Code	boolean len = NUMBER_CONSTANT + NUMBER_CONSTANT ;
Distance : 4

84
Tree	double len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	double len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 15

85
Tree	char len = thisBuf.length + NUMBER_CONSTANT ;
Code	char len = thisBuf.length + NUMBER_CONSTANT ;
Distance : 4

86
Tree	int len = ( int ) size * len ;
Code	int len = ( int ) size * len ;
Distance : 6

87
Tree	boolean len = STRING_CONSTANT + STRING_CONSTANT - strLen ;
Code	boolean len = STRING_CONSTANT + STRING_CONSTANT - strLen ;
Distance : 6

88
Tree	int len = len + strLen + strLen + strLen ;
Code	int len = len + strLen + strLen + strLen ;
Distance : 5

89
Tree	double len = thisBuf.length + NUMBER_CONSTANT ;
Code	double len = thisBuf.length + NUMBER_CONSTANT ;
Distance : 4

90
Tree	int len = strLen + STRING_CONSTANT + thisBuf.length ;
Code	int len = strLen + STRING_CONSTANT + thisBuf.length ;
Distance : 4

91
Tree	int len = size + STRING_CONSTANT + len ;
Code	int len = size + STRING_CONSTANT + len ;
Distance : 3

92
Tree	int len = len / size - strLen ;
Code	int len = len / size - strLen ;
Distance : 4

93
Tree	boolean len = len + STRING_CONSTANT + thisBuf.length ;
Code	boolean len = len + STRING_CONSTANT + thisBuf.length ;
Distance : 5

94
Tree	int len = len && final ;
Code	int len = len && final ;
Distance : 5

95
Tree	int len = size - strLen ;
Code	int len = size - strLen ;
Distance : 2

96
Tree	int len = len + getProperNumerator () + strLen ;
Code	int len = len + getProperNumerator () + strLen ;
Distance : 5

97
Tree	int len = size / strLen + strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = size / strLen + strLen + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 8

98
Tree	char len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	char len = STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 13

99
Tree	boolean len = len ;
Code	boolean len = len ;
Distance : 6

100
Tree	int len = len + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = len + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 12

101
Tree	int len = len + strLen + strLen + len ;
Code	int len = len + strLen + strLen + len ;
Distance : 5

102
Tree	int len = len + strLen + STRING_CONSTANT ;
Code	int len = len + strLen + STRING_CONSTANT ;
Distance : 3

103
Tree	int len = len + final () + strLen ;
Code	int len = len + final () + strLen ;
Distance : 5

104
Tree	int len = len + stub () + strLen ;
Code	int len = len + stub () + strLen ;
Distance : 5

105
Tree	int len = len + size + STRING_CONSTANT ;
Code	int len = len + size + STRING_CONSTANT ;
Distance : 4

106
Tree	int len = strLen ;
Code	int len = strLen ;
Distance : 4

107
Tree	int len = len / strLen + len + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Code	int len = len / strLen + len + STRING_CONSTANT + STRING_CONSTANT + STRING_CONSTANT ;
Distance : 9

========================================================================


========================================================================
Example Number: 2
Parent Code is: 
i < thisBuf.length
-------------------------------------------------------------------------------
Child code is: 
i < size
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (800{val=i}) (230{val=<}) (40{val=thisBuf.length})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (800{val=i}) (230{val=<}) (800{val=size})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/60/parent/src_java_org_apache_commons_lang_text_StrBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 140
Wrong
========================================================================
False

0
Tree	i > NUMBER_CONSTANT
Code	i > NUMBER_CONSTANT
Distance : 2

1
Tree	i < getPos ()
Code	i < getPos ()
Distance : 2

2
Tree	final ( i ) == size
Code	final ( i ) == size
Distance : 4

3
Tree	size + NUMBER_CONSTANT
Code	size + NUMBER_CONSTANT
Distance : 3

4
Tree	i == continue;
Code	i == continue;
Distance : 2

5
Tree	i . codePointAt () i getVariableResolver ( i )
Code	i . codePointAt () i getVariableResolver ( i )
Distance : 8

6
Tree	this . charAt () != i
Code	this . charAt () != i
Distance : 6

7
Tree	i / i
Code	i / i
Distance : 2

8
Tree	< == continue;
Code	< == continue;
Distance : 3

9
Tree	size == thisBuf.length && size
Code	size == thisBuf.length && size
Distance : 4

10
Tree	i < < NUMBER_CONSTANT CharSequence
Code	i < < NUMBER_CONSTANT CharSequence
Distance : 3

11
Tree	DiffResult ( i ) == size
Code	DiffResult ( i ) == size
Distance : 4

12
Tree	i + NUMBER_CONSTANT pattern
Code	i + NUMBER_CONSTANT pattern
Distance : 3

13
Tree	< i < [
Code	< i < [
Distance : 2

14
Tree	< i < Date
Code	< i < Date
Distance : 2

15
Tree	i == < pattern
Code	i == < pattern
Distance : 2

16
Tree	i + NUMBER_CONSTANT CharSequence
Code	i + NUMBER_CONSTANT CharSequence
Distance : 3

17
Tree	i < Rule ()
Code	i < Rule ()
Distance : 2

18
Tree	i != null
Code	i != null
Distance : 2

19
Tree	this . i . emptyMap () != i
Code	this . i . emptyMap () != i
Distance : 7

20
Tree	i == null i >=
Code	i == null i >=
Distance : 4

21
Tree	i . codePointAt () != <
Code	i . codePointAt () != <
Distance : 5

22
Tree	DiffResult () != <
Code	DiffResult () != <
Distance : 4

23
Tree	final () == i
Code	final () == i
Distance : 4

24
Tree	i != super();
Code	i != super();
Distance : 2

25
Tree	SuppressWarnings ( i ) != <
Code	SuppressWarnings ( i ) != <
Distance : 5

26
Tree	this . i . destroy () != <
Code	this . i . destroy () != <
Distance : 7

27
Tree	i < vetoableChange ()
Code	i < vetoableChange ()
Distance : 2

28
Tree	size == < && i
Code	size == < && i
Distance : 4

29
Tree	STRING_CONSTANT + i . numberOfTrailingZeros ()
Code	STRING_CONSTANT + i . numberOfTrailingZeros ()
Distance : 5

30
Tree	i == null
Code	i == null
Distance : 2

31
Tree	i < < NUMBER_CONSTANT
Code	i < < NUMBER_CONSTANT
Distance : 2

32
Tree	size == i
Code	size == i
Distance : 3

33
Tree	i + NUMBER_CONSTANT
Code	i + NUMBER_CONSTANT
Distance : 2

34
Tree	i < rhs.length ()
Code	i < rhs.length ()
Distance : 2

35
Tree	this . i . invoke () != i
Code	this . i . invoke () != i
Distance : 7

36
Tree	i != null i :
Code	i != null i :
Distance : 4

37
Tree	i != continue;
Code	i != continue;
Distance : 2

38
Tree	this . size == i
Code	this . size == i
Distance : 4

39
Tree	i == null
Code	i == null
Distance : 2

40
Tree	i . emptyMap () . getSimpleName () != <
Code	i . emptyMap () . getSimpleName () != <
Distance : 8

41
Tree	i . getIndex () != <
Code	i . getIndex () != <
Distance : 5

42
Tree	i && i == thisBuf.length
Code	i && i == thisBuf.length
Distance : 4

43
Tree	i == null i :
Code	i == null i :
Distance : 4

44
Tree	i . ordinal () != i
Code	i . ordinal () != i
Distance : 5

45
Tree	i . emptyMap () . ordinal () != <
Code	i . emptyMap () . ordinal () != <
Distance : 8

46
Tree	final () i emptyMap ( i )
Code	final () i emptyMap ( i )
Distance : 6

47
Tree	i . codePointAt ( i ) != i
Code	i . codePointAt ( i ) != i
Distance : 7

48
Tree	i . emptyMap () i getLeftElement ( i )
Code	i . emptyMap () i getLeftElement ( i )
Distance : 8

49
Tree	this . valueOf () != i
Code	this . valueOf () != i
Distance : 6

50
Tree	this . i == i
Code	this . i == i
Distance : 4

51
Tree	size > NUMBER_CONSTANT
Code	size > NUMBER_CONSTANT
Distance : 3

52
Tree	i . emptyMap () != i
Code	i . emptyMap () != i
Distance : 5

53
Tree	i == < && i
Code	i == < && i
Distance : 3

54
Tree	final () i getDaemonFlag ( i )
Code	final () i getDaemonFlag ( i )
Distance : 6

55
Tree	size == <
Code	size == <
Distance : 3

56
Tree	i i <
Code	i i <
Distance : 2

57
Tree	size < <
Code	size < <
Distance : 2

58
Tree	SuppressWarnings () == i
Code	SuppressWarnings () == i
Distance : 4

59
Tree	i == null i [
Code	i == null i [
Distance : 4

60
Tree	DiffResult ( i ) != <
Code	DiffResult ( i ) != <
Distance : 5

61
Tree	final ( i ) i createMessageFormat ( i )
Code	final ( i ) i createMessageFormat ( i )
Distance : 8

62
Tree	i == i
Code	i == i
Distance : 2

63
Tree	this . equals () != i
Code	this . equals () != i
Distance : 6

64
Tree	i / createMessageFormat ()
Code	i / createMessageFormat ()
Distance : 3

65
Tree	i && size == <
Code	i && size == <
Distance : 3

66
Tree	i / PAD_LIMIT ()
Code	i / PAD_LIMIT ()
Distance : 3

67
Tree	i != null i -
Code	i != null i -
Distance : 4

68
Tree	size == size
Code	size == size
Distance : 2

69
Tree	i . codePointAt () . getSimpleName () != i
Code	i . codePointAt () . getSimpleName () != i
Distance : 8

70
Tree	< i < buffer
Code	< i < buffer
Distance : 2

71
Tree	final () < ordinal ( i )
Code	final () < ordinal ( i )
Distance : 6

72
Tree	i == return;
Code	i == return;
Distance : 2

73
Tree	i . codePointAt () . ordinal () != i
Code	i . codePointAt () . ordinal () != i
Distance : 8

74
Tree	i < <
Code	i < <
Distance : 1

75
Tree	i . ordinal ( i ) != <
Code	i . ordinal ( i ) != <
Distance : 7

76
Tree	this == i CharSequence
Code	this == i CharSequence
Distance : 4

77
Tree	i > NUMBER_CONSTANT CharSequence
Code	i > NUMBER_CONSTANT CharSequence
Distance : 3

78
Tree	size < <
Code	size < <
Distance : 2

79
Tree	final ( i ) i getVariableResolver ( i )
Code	final ( i ) i getVariableResolver ( i )
Distance : 8

80
Tree	STRING_CONSTANT + size . numberOfTrailingZeros ()
Code	STRING_CONSTANT + size . numberOfTrailingZeros ()
Distance : 5

81
Tree	i == < thisBuf.length :
Code	i == < thisBuf.length :
Distance : 3

82
Tree	List ( i ) != <
Code	List ( i ) != <
Distance : 5

83
Tree	< == super();
Code	< == super();
Distance : 3

84
Tree	this == size
Code	this == size
Distance : 2

85
Tree	size != null
Code	size != null
Distance : 3

86
Tree	i . getIndex ( i ) != <
Code	i . getIndex ( i ) != <
Distance : 7

87
Tree	size / i
Code	size / i
Distance : 3

88
Tree	i == < CharSequence
Code	i == < CharSequence
Distance : 2

89
Tree	size == null
Code	size == null
Distance : 3

90
Tree	size < < NUMBER_CONSTANT
Code	size < < NUMBER_CONSTANT
Distance : 3

91
Tree	i < < pattern
Code	i < < pattern
Distance : 2

92
Tree	size + i + STRING_CONSTANT
Code	size + i + STRING_CONSTANT
Distance : 4

93
Tree	i . codePointAt () i getLeftElement ( i )
Code	i . codePointAt () i getLeftElement ( i )
Distance : 8

94
Tree	i < < CharSequence
Code	i < < CharSequence
Distance : 2

95
Tree	i . emptyMap () i getVariableResolver ( i )
Code	i . emptyMap () i getVariableResolver ( i )
Distance : 8

96
Tree	final () == size
Code	final () == size
Distance : 3

97
Tree	final () != <
Code	final () != <
Distance : 4

98
Tree	i > NUMBER_CONSTANT pattern
Code	i > NUMBER_CONSTANT pattern
Distance : 3

99
Tree	STRING_CONSTANT + i . getIndex ()
Code	STRING_CONSTANT + i . getIndex ()
Distance : 5

100
Tree	List () != i
Code	List () != i
Distance : 4

101
Tree	this == i
Code	this == i
Distance : 3

102
Tree	i . emptyMap ( i ) != <
Code	i . emptyMap ( i ) != <
Distance : 7

103
Tree	SuppressWarnings () != i
Code	SuppressWarnings () != i
Distance : 4

104
Tree	size == < thisBuf.length :
Code	size == < thisBuf.length :
Distance : 4

105
Tree	DiffResult () == i
Code	DiffResult () == i
Distance : 4

106
Tree	i == size
Code	i == size
Distance : 1

107
Tree	i == < thisBuf.length +=
Code	i == < thisBuf.length +=
Distance : 3

108
Tree	i < < NUMBER_CONSTANT pattern
Code	i < < NUMBER_CONSTANT pattern
Distance : 3

109
Tree	final () i getLeftElement ( i )
Code	final () i getLeftElement ( i )
Distance : 6

110
Tree	this == i pattern
Code	this == i pattern
Distance : 4

111
Tree	i / size
Code	i / size
Distance : 1

112
Tree	STRING_CONSTANT + i . isMatch ()
Code	STRING_CONSTANT + i . isMatch ()
Distance : 5

113
Tree	i == null i !=
Code	i == null i !=
Distance : 4

114
Tree	size + size + STRING_CONSTANT
Code	size + size + STRING_CONSTANT
Distance : 4

115
Tree	i == super();
Code	i == super();
Distance : 2

116
Tree	i / getVariableResolver ()
Code	i / getVariableResolver ()
Distance : 3

117
Tree	final ( i ) i removeAccentsSUN ( i )
Code	final ( i ) i removeAccentsSUN ( i )
Distance : 8

118
Tree	i != null thisBuf.length !=
Code	i != null thisBuf.length !=
Distance : 4

119
Tree	size && i == <
Code	size && i == <
Distance : 4

120
Tree	i == < thisBuf.length >=
Code	i == < thisBuf.length >=
Distance : 3

121
Tree	i / SplitState.SPLIT ()
Code	i / SplitState.SPLIT ()
Distance : 3

122
Tree	size && size == <
Code	size && size == <
Distance : 4

123
Tree	SuppressWarnings ( i ) == size
Code	SuppressWarnings ( i ) == size
Distance : 4

124
Tree	i == <
Code	i == <
Distance : 2

125
Tree	final ( i ) != <
Code	final ( i ) != <
Distance : 5

126
Tree	this . i == size
Code	this . i == size
Distance : 3

127
Tree	i < < CharSequence
Code	i < < CharSequence
Distance : 2

128
Tree	List ( i ) == size
Code	List ( i ) == size
Distance : 4

129
Tree	i < <
Code	i < <
Distance : 1

130
Tree	this . getClass () != i
Code	this . getClass () != i
Distance : 6

131
Tree	i + i + STRING_CONSTANT
Code	i + i + STRING_CONSTANT
Distance : 4

132
Tree	i == < && size
Code	i == < && size
Distance : 2

133
Tree	i + size + STRING_CONSTANT
Code	i + size + STRING_CONSTANT
Distance : 3

134
Tree	this . size == size
Code	this . size == size
Distance : 4

135
Tree	final ( i ) i isOSVersionMatch ( i )
Code	final ( i ) i isOSVersionMatch ( i )
Distance : 8

136
Tree	this . i . isMatch () != i
Code	this . i . isMatch () != i
Distance : 7

137
Tree	i != null thisBuf.length ==
Code	i != null thisBuf.length ==
Distance : 4

138
Tree	size / size
Code	size / size
Distance : 2

139
Tree	i < < pattern
Code	i < < pattern
Distance : 2

========================================================================


========================================================================
Example Number: 3
Parent Code is: 
i < thisBuf.length
-------------------------------------------------------------------------------
Child code is: 
i < this . size
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (800{val=i}) (230{val=<}) (40{val=thisBuf.length})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (800{val=i}) (230{val=<}) (22 (315{val=this}) (235{val=.}) (800{val=size}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/60/parent/src_java_org_apache_commons_lang_text_StrBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 140
Wrong
========================================================================
False

0
Tree	i > NUMBER_CONSTANT
Code	i > NUMBER_CONSTANT
Distance : 4

1
Tree	i < getPos ()
Code	i < getPos ()
Distance : 3

2
Tree	final ( i ) == size
Code	final ( i ) == size
Distance : 5

3
Tree	size + NUMBER_CONSTANT
Code	size + NUMBER_CONSTANT
Distance : 5

4
Tree	i == continue;
Code	i == continue;
Distance : 4

5
Tree	i . codePointAt () i getVariableResolver ( i )
Code	i . codePointAt () i getVariableResolver ( i )
Distance : 8

6
Tree	this . charAt () != i
Code	this . charAt () != i
Distance : 6

7
Tree	i / i
Code	i / i
Distance : 4

8
Tree	< == continue;
Code	< == continue;
Distance : 4

9
Tree	size == < && size
Code	size == < && size
Distance : 4

10
Tree	i < < NUMBER_CONSTANT CharSequence
Code	i < < NUMBER_CONSTANT CharSequence
Distance : 3

11
Tree	DiffResult ( i ) == size
Code	DiffResult ( i ) == size
Distance : 5

12
Tree	i + NUMBER_CONSTANT pattern
Code	i + NUMBER_CONSTANT pattern
Distance : 4

13
Tree	< i < [
Code	< i < [
Distance : 4

14
Tree	i i < Date
Code	i i < Date
Distance : 4

15
Tree	i == < pattern
Code	i == < pattern
Distance : 4

16
Tree	i + NUMBER_CONSTANT CharSequence
Code	i + NUMBER_CONSTANT CharSequence
Distance : 4

17
Tree	i < Rule ()
Code	i < Rule ()
Distance : 3

18
Tree	i != null
Code	i != null
Distance : 4

19
Tree	this . i . emptyMap () != i
Code	this . i . emptyMap () != i
Distance : 7

20
Tree	i == null i >=
Code	i == null i >=
Distance : 4

21
Tree	i . codePointAt () != i
Code	i . codePointAt () != i
Distance : 5

22
Tree	DiffResult () != i
Code	DiffResult () != i
Distance : 5

23
Tree	final () == i
Code	final () == i
Distance : 5

24
Tree	i != super();
Code	i != super();
Distance : 4

25
Tree	SuppressWarnings ( i ) != <
Code	SuppressWarnings ( i ) != <
Distance : 6

26
Tree	this . i . destroy () != i
Code	this . i . destroy () != i
Distance : 7

27
Tree	i < vetoableChange ()
Code	i < vetoableChange ()
Distance : 3

28
Tree	size == < && i
Code	size == < && i
Distance : 5

29
Tree	STRING_CONSTANT + i . numberOfTrailingZeros ()
Code	STRING_CONSTANT + i . numberOfTrailingZeros ()
Distance : 5

30
Tree	i == null
Code	i == null
Distance : 4

31
Tree	i < < NUMBER_CONSTANT
Code	i < < NUMBER_CONSTANT
Distance : 3

32
Tree	size == i
Code	size == i
Distance : 5

33
Tree	i + NUMBER_CONSTANT
Code	i + NUMBER_CONSTANT
Distance : 4

34
Tree	i < rhs.length ()
Code	i < rhs.length ()
Distance : 3

35
Tree	this . i . invoke () != <
Code	this . i . invoke () != <
Distance : 7

36
Tree	i != null thisBuf.length :
Code	i != null thisBuf.length :
Distance : 4

37
Tree	i != continue;
Code	i != continue;
Distance : 4

38
Tree	this . size == i
Code	this . size == i
Distance : 4

39
Tree	i == null
Code	i == null
Distance : 4

40
Tree	i . emptyMap () . getSimpleName () != i
Code	i . emptyMap () . getSimpleName () != i
Distance : 7

41
Tree	i . getIndex () != i
Code	i . getIndex () != i
Distance : 5

42
Tree	i && i == <
Code	i && i == <
Distance : 4

43
Tree	i == null i :
Code	i == null i :
Distance : 4

44
Tree	i . ordinal () != i
Code	i . ordinal () != i
Distance : 5

45
Tree	i . emptyMap () . ordinal () != i
Code	i . emptyMap () . ordinal () != i
Distance : 7

46
Tree	final () i emptyMap ( i )
Code	final () i emptyMap ( i )
Distance : 6

47
Tree	i . codePointAt ( i ) != <
Code	i . codePointAt ( i ) != <
Distance : 7

48
Tree	i . emptyMap () i getLeftElement ( i )
Code	i . emptyMap () i getLeftElement ( i )
Distance : 8

49
Tree	this . valueOf () != <
Code	this . valueOf () != <
Distance : 6

50
Tree	this . i == i
Code	this . i == i
Distance : 5

51
Tree	size > NUMBER_CONSTANT
Code	size > NUMBER_CONSTANT
Distance : 5

52
Tree	i . emptyMap () != <
Code	i . emptyMap () != <
Distance : 5

53
Tree	i == < && i
Code	i == < && i
Distance : 4

54
Tree	final () i getDaemonFlag ( i )
Code	final () i getDaemonFlag ( i )
Distance : 6

55
Tree	size == <
Code	size == <
Distance : 5

56
Tree	< i <
Code	< i <
Distance : 4

57
Tree	size < <
Code	size < <
Distance : 4

58
Tree	SuppressWarnings () == i
Code	SuppressWarnings () == i
Distance : 5

59
Tree	i == null thisBuf.length [
Code	i == null thisBuf.length [
Distance : 4

60
Tree	DiffResult ( i ) != <
Code	DiffResult ( i ) != <
Distance : 6

61
Tree	final ( i ) < createMessageFormat ( i )
Code	final ( i ) < createMessageFormat ( i )
Distance : 7

62
Tree	i == i
Code	i == i
Distance : 4

63
Tree	this . equals () != i
Code	this . equals () != i
Distance : 6

64
Tree	i / createMessageFormat ()
Code	i / createMessageFormat ()
Distance : 4

65
Tree	i && size == <
Code	i && size == <
Distance : 4

66
Tree	i / PAD_LIMIT ()
Code	i / PAD_LIMIT ()
Distance : 4

67
Tree	i != null i -
Code	i != null i -
Distance : 4

68
Tree	size == size
Code	size == size
Distance : 4

69
Tree	i . codePointAt () . getSimpleName () != i
Code	i . codePointAt () . getSimpleName () != i
Distance : 7

70
Tree	i i < buffer
Code	i i < buffer
Distance : 4

71
Tree	final () i ordinal ( i )
Code	final () i ordinal ( i )
Distance : 6

72
Tree	i == return;
Code	i == return;
Distance : 4

73
Tree	i . codePointAt () . ordinal () != i
Code	i . codePointAt () . ordinal () != i
Distance : 7

74
Tree	i < <
Code	i < <
Distance : 3

75
Tree	i . ordinal ( i ) != <
Code	i . ordinal ( i ) != <
Distance : 7

76
Tree	this == i CharSequence
Code	this == i CharSequence
Distance : 5

77
Tree	i > NUMBER_CONSTANT CharSequence
Code	i > NUMBER_CONSTANT CharSequence
Distance : 4

78
Tree	size < <
Code	size < <
Distance : 4

79
Tree	final ( i ) i getVariableResolver ( i )
Code	final ( i ) i getVariableResolver ( i )
Distance : 8

80
Tree	STRING_CONSTANT + size . numberOfTrailingZeros ()
Code	STRING_CONSTANT + size . numberOfTrailingZeros ()
Distance : 5

81
Tree	i == < i :
Code	i == < i :
Distance : 4

82
Tree	List ( i ) != <
Code	List ( i ) != <
Distance : 6

83
Tree	< == super();
Code	< == super();
Distance : 4

84
Tree	this == size
Code	this == size
Distance : 3

85
Tree	size != null
Code	size != null
Distance : 5

86
Tree	i . getIndex ( i ) != <
Code	i . getIndex ( i ) != <
Distance : 7

87
Tree	size / i
Code	size / i
Distance : 5

88
Tree	i == < CharSequence
Code	i == < CharSequence
Distance : 4

89
Tree	size == null
Code	size == null
Distance : 5

90
Tree	size < < NUMBER_CONSTANT
Code	size < < NUMBER_CONSTANT
Distance : 4

91
Tree	i < < pattern
Code	i < < pattern
Distance : 3

92
Tree	size + i + STRING_CONSTANT
Code	size + i + STRING_CONSTANT
Distance : 5

93
Tree	i . codePointAt () i getLeftElement ( i )
Code	i . codePointAt () i getLeftElement ( i )
Distance : 8

94
Tree	i < < CharSequence
Code	i < < CharSequence
Distance : 3

95
Tree	i . emptyMap () i getVariableResolver ( i )
Code	i . emptyMap () i getVariableResolver ( i )
Distance : 8

96
Tree	final () == size
Code	final () == size
Distance : 4

97
Tree	final () != i
Code	final () != i
Distance : 5

98
Tree	i > NUMBER_CONSTANT pattern
Code	i > NUMBER_CONSTANT pattern
Distance : 4

99
Tree	STRING_CONSTANT + i . getIndex ()
Code	STRING_CONSTANT + i . getIndex ()
Distance : 5

100
Tree	List () != i
Code	List () != i
Distance : 5

101
Tree	this == i
Code	this == i
Distance : 4

102
Tree	i . emptyMap ( i ) != <
Code	i . emptyMap ( i ) != <
Distance : 7

103
Tree	SuppressWarnings () != <
Code	SuppressWarnings () != <
Distance : 5

104
Tree	size == < thisBuf.length :
Code	size == < thisBuf.length :
Distance : 5

105
Tree	DiffResult () == i
Code	DiffResult () == i
Distance : 5

106
Tree	i == size
Code	i == size
Distance : 3

107
Tree	i == < i +=
Code	i == < i +=
Distance : 4

108
Tree	i < < NUMBER_CONSTANT pattern
Code	i < < NUMBER_CONSTANT pattern
Distance : 3

109
Tree	final () i getLeftElement ( i )
Code	final () i getLeftElement ( i )
Distance : 6

110
Tree	this == i pattern
Code	this == i pattern
Distance : 5

111
Tree	i / size
Code	i / size
Distance : 3

112
Tree	STRING_CONSTANT + i . isMatch ()
Code	STRING_CONSTANT + i . isMatch ()
Distance : 5

113
Tree	i == null i !=
Code	i == null i !=
Distance : 4

114
Tree	size + size + STRING_CONSTANT
Code	size + size + STRING_CONSTANT
Distance : 5

115
Tree	i == super();
Code	i == super();
Distance : 4

116
Tree	i / getVariableResolver ()
Code	i / getVariableResolver ()
Distance : 4

117
Tree	final ( i ) i removeAccentsSUN ( i )
Code	final ( i ) i removeAccentsSUN ( i )
Distance : 8

118
Tree	i != null i !=
Code	i != null i !=
Distance : 4

119
Tree	size && i == <
Code	size && i == <
Distance : 5

120
Tree	i == < i >=
Code	i == < i >=
Distance : 4

121
Tree	i / SplitState.SPLIT ()
Code	i / SplitState.SPLIT ()
Distance : 4

122
Tree	size && size == <
Code	size && size == <
Distance : 5

123
Tree	SuppressWarnings ( i ) == size
Code	SuppressWarnings ( i ) == size
Distance : 5

124
Tree	i == <
Code	i == <
Distance : 4

125
Tree	final ( i ) != <
Code	final ( i ) != <
Distance : 6

126
Tree	this . i == size
Code	this . i == size
Distance : 4

127
Tree	i < thisBuf.length CharSequence
Code	i < thisBuf.length CharSequence
Distance : 3

128
Tree	List ( i ) == size
Code	List ( i ) == size
Distance : 5

129
Tree	i < <
Code	i < <
Distance : 3

130
Tree	this . getClass () != i
Code	this . getClass () != i
Distance : 6

131
Tree	i + i + STRING_CONSTANT
Code	i + i + STRING_CONSTANT
Distance : 4

132
Tree	i == < && size
Code	i == < && size
Distance : 3

133
Tree	i + size + STRING_CONSTANT
Code	i + size + STRING_CONSTANT
Distance : 4

134
Tree	this . size == size
Code	this . size == size
Distance : 4

135
Tree	final ( i ) i isOSVersionMatch ( i )
Code	final ( i ) i isOSVersionMatch ( i )
Distance : 8

136
Tree	this . i . isMatch () != i
Code	this . i . isMatch () != i
Distance : 7

137
Tree	i != null thisBuf.length ==
Code	i != null thisBuf.length ==
Distance : 4

138
Tree	size / size
Code	size / size
Distance : 4

139
Tree	i < < pattern
Code	i < < pattern
Distance : 3

========================================================================


========================================================================
Example Number: 4
Parent Code is: 
{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ str . getChars ( NUMBER_CONSTANT , width , buffer , size ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=str}) (235{val=.}) (802{val=getChars}) (214{val=(}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (800{val=strLen}) (234{val=,}) (800{val=buffer}) (234{val=,}) (800{val=size}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (800{val=str}) (235{val=.}) (802{val=getChars}) (214{val=(}) (34{val=NUMBER_CONSTANT}) (234{val=,}) (800{val=width}) (234{val=,}) (800{val=buffer}) (234{val=,}) (800{val=size}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/59/parent/src_java_org_apache_commons_lang_text_StrBuilder.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 148
Wrong
========================================================================
False

0
Tree	{ str . getChars ( null , strLen , buffer , strLen ) ; }
Code	{ str . getChars ( null , strLen , buffer , strLen ) ; }
Distance : 3

1
Tree	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , strLen , NUMBER_CONSTANT ) ; }
Distance : 4

2
Tree	{ str . getChars ( null , strLen , size , strLen ) ; }
Code	{ str . getChars ( null , strLen , size , strLen ) ; }
Distance : 4

3
Tree	{ str . getChars ( null , strLen , buffer , size ) ; }
Code	{ str . getChars ( null , strLen , buffer , size ) ; }
Distance : 2

4
Tree	{ str . getChars ( JavaVersion.JAVA_1_5 , NUMBER_CONSTANT , size , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( JavaVersion.JAVA_1_5 , NUMBER_CONSTANT , size , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

5
Tree	{ str . getChars ( true ) ; }
Code	{ str . getChars ( true ) ; }
Distance : 7

6
Tree	{ str . getChars ( TimeZones.GMT_ID , NUMBER_CONSTANT , size , NUMBER_CONSTANT , size + strLen ) ; }
Code	{ str . getChars ( TimeZones.GMT_ID , NUMBER_CONSTANT , size , NUMBER_CONSTANT , size + strLen ) ; }
Distance : 6

7
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
Distance : 1

8
Tree	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , StringUtils.EMPTY , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , StringUtils.EMPTY , NUMBER_CONSTANT ) ; }
Distance : 4

9
Tree	{ str . getChars ( JavaVersion.JAVA_1_5 , NUMBER_CONSTANT , size , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( JavaVersion.JAVA_1_5 , NUMBER_CONSTANT , size , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

10
Tree	{ getChars ( str , buffer , buffer ) ; }
Code	{ getChars ( str , buffer , buffer ) ; }
Distance : 6

11
Tree	{ str . getChars ( this , strLen , buffer , buffer ) ; }
Code	{ str . getChars ( this , strLen , buffer , buffer ) ; }
Distance : 3

12
Tree	{ str . getChars ( strLen , buffer , buffer , this , CHAR_CONS ) ; }
Code	{ str . getChars ( strLen , buffer , buffer , this , CHAR_CONS ) ; }
Distance : 5

13
Tree	{ str . getChars ( strLen , strLen , buffer , this , strLen ) ; }
Code	{ str . getChars ( strLen , strLen , buffer , this , strLen ) ; }
Distance : 5

14
Tree	{ str . getChars ( strLen , getChars () , this ) ; }
Code	{ str . getChars ( strLen , getChars () , this ) ; }
Distance : 5

15
Tree	{ getChars ( str , strLen , buffer , buffer ) ; }
Code	{ getChars ( str , strLen , buffer , buffer ) ; }
Distance : 5

16
Tree	{ str . getChars ( false , strLen ) ; }
Code	{ str . getChars ( false , strLen ) ; }
Distance : 6

17
Tree	getChars ( str , strLen , buffer , tokens.length ) ;
Code	getChars ( str , strLen , buffer , tokens.length ) ;
Distance : 7

18
Tree	{ getChars ( str , size , buffer , strLen , size ) ; }
Code	{ getChars ( str , size , buffer , strLen , size ) ; }
Distance : 6

19
Tree	{ str . getChars ( JavaVersion.JAVA_1_5 , StringUtils.EMPTY ) ; }
Code	{ str . getChars ( JavaVersion.JAVA_1_5 , StringUtils.EMPTY ) ; }
Distance : 6

20
Tree	{ getChars ( str , size , buffer ) ; }
Code	{ getChars ( str , size , buffer ) ; }
Distance : 6

21
Tree	{ str . getChars ( FastDateParser.JAPANESE_IMPERIAL , StringUtils.EMPTY ) ; }
Code	{ str . getChars ( FastDateParser.JAPANESE_IMPERIAL , StringUtils.EMPTY ) ; }
Distance : 6

22
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , buffer ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , buffer ) ; }
Distance : 2

23
Tree	{ str . getChars ( CHAR_CONS , StringUtils.EMPTY , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , StringUtils.EMPTY , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

24
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , strLen ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , strLen ) ; }
Distance : 2

25
Tree	{ getChars ( str , size , buffer , strLen ) ; }
Code	{ getChars ( str , size , buffer , strLen ) ; }
Distance : 5

26
Tree	{ str . getChars ( FastDateParser.JAPANESE_IMPERIAL , NUMBER_CONSTANT , size , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( FastDateParser.JAPANESE_IMPERIAL , NUMBER_CONSTANT , size , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

27
Tree	{ buffer . getChars ( strLen , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ buffer . getChars ( strLen , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 5

28
Tree	{ str . getChars ( TimeZones.GMT_ID , NUMBER_CONSTANT , size , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( TimeZones.GMT_ID , NUMBER_CONSTANT , size , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

29
Tree	{ str . getChars ( strLen , strLen , size , this , CHAR_CONS ) ; }
Code	{ str . getChars ( strLen , strLen , size , this , CHAR_CONS ) ; }
Distance : 6

30
Tree	{ str . getChars ( FastDateParser.JAPANESE_IMPERIAL , NUMBER_CONSTANT , size , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( FastDateParser.JAPANESE_IMPERIAL , NUMBER_CONSTANT , size , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

31
Tree	{ str . getChars ( strLen , buffer , buffer , STRING_CONSTANT ) ; }
Code	{ str . getChars ( strLen , buffer , buffer , STRING_CONSTANT ) ; }
Distance : 3

32
Tree	{ str . getChars ( CHAR_CONS , Calendar.FEBRUARY , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , Calendar.FEBRUARY , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

33
Tree	{ str . getChars ( Locale.ENGLISH , StringUtils.EMPTY ) ; }
Code	{ str . getChars ( Locale.ENGLISH , StringUtils.EMPTY ) ; }
Distance : 6

34
Tree	{ str . getChars ( CHAR_CONS , JavaVersion.JAVA_1_5 , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , JavaVersion.JAVA_1_5 , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

35
Tree	{ str . getChars ( this , strLen , buffer , strLen ) ; }
Code	{ str . getChars ( this , strLen , buffer , strLen ) ; }
Distance : 3

36
Tree	{ str . getChars ( strLen , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( strLen , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

37
Tree	{ System.out . getChars ( strLen , buffer ) ; }
Code	{ System.out . getChars ( strLen , buffer ) ; }
Distance : 6

38
Tree	{ str . getChars ( TimeZones.GMT_ID , StringUtils.EMPTY ) ; }
Code	{ str . getChars ( TimeZones.GMT_ID , StringUtils.EMPTY ) ; }
Distance : 6

39
Tree	{ getChars ( STRING_CONSTANT , strLen , buffer , strLen ) ; }
Code	{ getChars ( STRING_CONSTANT , strLen , buffer , strLen ) ; }
Distance : 5

40
Tree	str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ;
Code	str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ;
Distance : 3

41
Tree	{ str . getChars ( strLen ? StringUtils.EMPTY : Boolean.TRUE ) ; }
Code	{ str . getChars ( strLen ? StringUtils.EMPTY : Boolean.TRUE ) ; }
Distance : 7

42
Tree	{ getChars ( str , ? , false ) ; }
Code	{ getChars ( str , ? , false ) ; }
Distance : 7

43
Tree	getChars ( str , strLen , buffer , strLen ) ;
Code	getChars ( str , strLen , buffer , strLen ) ;
Distance : 7

44
Tree	{ getChars ( str , buffer , getChars () , STRING_CONSTANT ) ; }
Code	{ getChars ( str , buffer , getChars () , STRING_CONSTANT ) ; }
Distance : 7

45
Tree	{ EscapeUtils.ESCAPE_ECMASCRIPT . getChars ( strLen , strLen ) ; }
Code	{ EscapeUtils.ESCAPE_ECMASCRIPT . getChars ( strLen , strLen ) ; }
Distance : 7

46
Tree	{ str . getChars ( JavaVersion.JAVA_1_5 , STRING_CONSTANT ) ; }
Code	{ str . getChars ( JavaVersion.JAVA_1_5 , STRING_CONSTANT ) ; }
Distance : 6

47
Tree	{ str . getChars ( strLen , strLen , buffer , this , CHAR_CONS ) ; }
Code	{ str . getChars ( strLen , strLen , buffer , this , CHAR_CONS ) ; }
Distance : 5

48
Tree	{ str . getChars ( true , strLen ) ; }
Code	{ str . getChars ( true , strLen ) ; }
Distance : 6

49
Tree	{ str . getChars ( strLen ? TimeZones.GMT_ID : Boolean.TRUE ) ; }
Code	{ str . getChars ( strLen ? TimeZones.GMT_ID : Boolean.TRUE ) ; }
Distance : 7

50
Tree	{ getChars ( str , strLen , buffer , strLen ) ; }
Code	{ getChars ( str , strLen , buffer , strLen ) ; }
Distance : 5

51
Tree	{ getChars ( str , strLen , buffer , strLen , size , size ) ; }
Code	{ getChars ( str , strLen , buffer , strLen , size , size ) ; }
Distance : 8

52
Tree	{ getChars ( str , strLen , buffer , size , size , size ) ; }
Code	{ getChars ( str , strLen , buffer , size , size , size ) ; }
Distance : 8

53
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer ) ; }
Distance : 3

54
Tree	{ str . getChars ( strLen ? CharUtils.CR : Boolean.TRUE ) ; }
Code	{ str . getChars ( strLen ? CharUtils.CR : Boolean.TRUE ) ; }
Distance : 7

55
Tree	{ getChars ( str , strLen , buffer , size ) ; }
Code	{ getChars ( str , strLen , buffer , size ) ; }
Distance : 4

56
Tree	{ str . getChars ( false ) ; }
Code	{ str . getChars ( false ) ; }
Distance : 7

57
Tree	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( str , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

58
Tree	{ str . str ( str , buffer ) ; }
Code	{ str . str ( str , buffer ) ; }
Distance : 6

59
Tree	{ str . getChars ( FastDateParser.JAPANESE_IMPERIAL , NUMBER_CONSTANT , size , NUMBER_CONSTANT , size + strLen ) ; }
Code	{ str . getChars ( FastDateParser.JAPANESE_IMPERIAL , NUMBER_CONSTANT , size , NUMBER_CONSTANT , size + strLen ) ; }
Distance : 6

60
Tree	{ buffer . getChars ( strLen , getChars () , this ) ; }
Code	{ buffer . getChars ( strLen , getChars () , this ) ; }
Distance : 6

61
Tree	{ getChars ( str , str , buffer ) ; }
Code	{ getChars ( str , str , buffer ) ; }
Distance : 6

62
Tree	{ str . getChars ( buffer , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( buffer , NUMBER_CONSTANT , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

63
Tree	{ str . getChars ( Locale.ENGLISH , STRING_CONSTANT ) ; }
Code	{ str . getChars ( Locale.ENGLISH , STRING_CONSTANT ) ; }
Distance : 6

64
Tree	{ System.out . getChars ( strLen , strLen ) ; }
Code	{ System.out . getChars ( strLen , strLen ) ; }
Distance : 7

65
Tree	{ str . getChars ( JavaVersion.JAVA_1_5 , NUMBER_CONSTANT , size , NUMBER_CONSTANT , STRING_CONSTANT + getChars () ) ; }
Code	{ str . getChars ( JavaVersion.JAVA_1_5 , NUMBER_CONSTANT , size , NUMBER_CONSTANT , STRING_CONSTANT + getChars () ) ; }
Distance : 8

66
Tree	{ str . getChars ( CHAR_CONS , array.length , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , array.length , NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 4

67
Tree	{ getChars ( Locale.ENGLISH , null ) ; }
Code	{ getChars ( Locale.ENGLISH , null ) ; }
Distance : 8

68
Tree	{ getChars ( str , strLen , buffer , strLen , size ) ; }
Code	{ getChars ( str , strLen , buffer , strLen , size ) ; }
Distance : 6

69
Tree	{ str . getChars ( JavaVersion.JAVA_1_5 , NUMBER_CONSTANT , buffer , NUMBER_CONSTANT , STRING_CONSTANT + getChars () ) ; }
Code	{ str . getChars ( JavaVersion.JAVA_1_5 , NUMBER_CONSTANT , buffer , NUMBER_CONSTANT , STRING_CONSTANT + getChars () ) ; }
Distance : 8

70
Tree	{ getChars ( str , strLen , buffer , size , size ) ; }
Code	{ getChars ( str , strLen , buffer , size , size ) ; }
Distance : 6

71
Tree	{ str . getChars ( str , getChars () , this ) ; }
Code	{ str . getChars ( str , getChars () , this ) ; }
Distance : 5

72
Tree	{ strLen . getChars ( true ) ; }
Code	{ strLen . getChars ( true ) ; }
Distance : 8

73
Tree	buffer . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ;
Code	buffer . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ;
Distance : 4

74
Tree	{ str . getChars ( FastDateParser.JAPANESE_IMPERIAL , NUMBER_CONSTANT , size , NUMBER_CONSTANT , STRING_CONSTANT + getChars () ) ; }
Code	{ str . getChars ( FastDateParser.JAPANESE_IMPERIAL , NUMBER_CONSTANT , size , NUMBER_CONSTANT , STRING_CONSTANT + getChars () ) ; }
Distance : 8

75
Tree	{ getChars ( str , strLen , buffer , buffer , size ) ; }
Code	{ getChars ( str , strLen , buffer , buffer , size ) ; }
Distance : 6

76
Tree	{ str . getChars ( buffer , getChars () , this ) ; }
Code	{ str . getChars ( buffer , getChars () , this ) ; }
Distance : 5

77
Tree	{ getChars ( str , strLen , getChars () , STRING_CONSTANT ) ; }
Code	{ getChars ( str , strLen , getChars () , STRING_CONSTANT ) ; }
Distance : 7

78
Tree	{ str . getChars ( TimeZones.GMT_ID , NUMBER_CONSTANT , size , NUMBER_CONSTANT , STRING_CONSTANT + getChars () ) ; }
Code	{ str . getChars ( TimeZones.GMT_ID , NUMBER_CONSTANT , size , NUMBER_CONSTANT , STRING_CONSTANT + getChars () ) ; }
Distance : 8

79
Tree	{ str . getChars ( NUMBER_CONSTANT , buffer , buffer ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , buffer , buffer ) ; }
Distance : 3

80
Tree	{ str . str ( buffer , buffer ) ; }
Code	{ str . str ( buffer , buffer ) ; }
Distance : 6

81
Tree	{ getChars ( str , TimeUnit.MILLISECONDS , false ) ; }
Code	{ getChars ( str , TimeUnit.MILLISECONDS , false ) ; }
Distance : 7

82
Tree	{ getChars ( str , getChars () , super(); ) ; }
Code	{ getChars ( str , getChars () , super(); ) ; }
Distance : 7

83
Tree	{ getChars ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } buffer
Code	{ getChars ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } buffer
Distance : 8

84
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , strLen ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , strLen ) ; }
Distance : 2

85
Tree	{ str . getChars ( strLen , buffer . getChars () , this ) ; }
Code	{ str . getChars ( strLen , buffer . getChars () , this ) ; }
Distance : 6

86
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , size ) ; }
Distance : 1

87
Tree	{ getChars ( str , strLen , buffer , strLen , size , strLen ) ; }
Code	{ getChars ( str , strLen , buffer , strLen , size , strLen ) ; }
Distance : 8

88
Tree	{ str . getChars ( JavaVersion.JAVA_1_5 , NUMBER_CONSTANT , buffer , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Code	{ str . getChars ( JavaVersion.JAVA_1_5 , NUMBER_CONSTANT , buffer , NUMBER_CONSTANT , STRING_CONSTANT + size ) ; }
Distance : 6

89
Tree	{ str . getChars ( strLen , strLen , buffer , STRING_CONSTANT ) ; }
Code	{ str . getChars ( strLen , strLen , buffer , STRING_CONSTANT ) ; }
Distance : 3

90
Tree	{ str . getChars ( JavaVersion.JAVA_1_5 , NUMBER_CONSTANT , buffer , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( JavaVersion.JAVA_1_5 , NUMBER_CONSTANT , buffer , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

91
Tree	{ getChars ( null , StringUtils.EMPTY ) ; }
Code	{ getChars ( null , StringUtils.EMPTY ) ; }
Distance : 8

92
Tree	{ str . getChars ( TimeZones.GMT_ID , STRING_CONSTANT ) ; }
Code	{ str . getChars ( TimeZones.GMT_ID , STRING_CONSTANT ) ; }
Distance : 6

93
Tree	{ str . getChars ( JavaVersion.JAVA_1_5 , NUMBER_CONSTANT , size , NUMBER_CONSTANT , size + strLen ) ; }
Code	{ str . getChars ( JavaVersion.JAVA_1_5 , NUMBER_CONSTANT , size , NUMBER_CONSTANT , size + strLen ) ; }
Distance : 6

94
Tree	{ getChars ( STRING_CONSTANT , str , buffer , strLen ) ; }
Code	{ getChars ( STRING_CONSTANT , str , buffer , strLen ) ; }
Distance : 5

95
Tree	{ str . getChars ( this , strLen , buffer , size ) ; }
Code	{ str . getChars ( this , strLen , buffer , size ) ; }
Distance : 2

96
Tree	str . getChars ( NUMBER_CONSTANT , strLen , buffer , strLen ) ;
Code	str . getChars ( NUMBER_CONSTANT , strLen , buffer , strLen ) ;
Distance : 4

97
Tree	{ getChars ( str , strLen , buffer , size ) ; }
Code	{ getChars ( str , strLen , buffer , size ) ; }
Distance : 4

98
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , buffer ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , buffer , buffer ) ; }
Distance : 2

99
Tree	{ getChars ( null , str ) ; }
Code	{ getChars ( null , str ) ; }
Distance : 8

100
Tree	{ getChars ( ArrayUtils.INDEX_NOT_FOUND , null ) ; }
Code	{ getChars ( ArrayUtils.INDEX_NOT_FOUND , null ) ; }
Distance : 8

101
Tree	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , tokens.length , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , tokens.length , NUMBER_CONSTANT ) ; }
Distance : 4

102
Tree	{ str . getChars ( FastDateParser.JAPANESE_IMPERIAL , STRING_CONSTANT ) ; }
Code	{ str . getChars ( FastDateParser.JAPANESE_IMPERIAL , STRING_CONSTANT ) ; }
Distance : 6

103
Tree	{ getChars ( str , strLen , buffer ) ; }
Code	{ getChars ( str , strLen , buffer ) ; }
Distance : 6

104
Tree	{ str . getChars ( JavaVersion.JAVA_1_5 , NUMBER_CONSTANT , size , NUMBER_CONSTANT , size + size ) ; }
Code	{ str . getChars ( JavaVersion.JAVA_1_5 , NUMBER_CONSTANT , size , NUMBER_CONSTANT , size + size ) ; }
Distance : 6

105
Tree	{ getChars ( null , JavaVersion.JAVA_1_5 ) ; }
Code	{ getChars ( null , JavaVersion.JAVA_1_5 ) ; }
Distance : 8

106
Tree	{ getChars ( str , strLen , buffer , strLen ) ; }
Code	{ getChars ( str , strLen , buffer , strLen ) ; }
Distance : 5

107
Tree	{ str . getChars ( strLen ? CharUtils.NUL : Boolean.TRUE ) ; }
Code	{ str . getChars ( strLen ? CharUtils.NUL : Boolean.TRUE ) ; }
Distance : 7

108
Tree	{ getChars ( JavaVersion.JAVA_1_5 , null ) ; }
Code	{ getChars ( JavaVersion.JAVA_1_5 , null ) ; }
Distance : 8

109
Tree	{ getChars ( str , strLen , buffer , size , size , strLen ) ; }
Code	{ getChars ( str , strLen , buffer , size , size , strLen ) ; }
Distance : 8

110
Tree	{ str . getChars ( strLen , buffer , size , STRING_CONSTANT ) ; }
Code	{ str . getChars ( strLen , buffer , size , STRING_CONSTANT ) ; }
Distance : 4

111
Tree	{ str . getChars ( strLen , strLen , size , STRING_CONSTANT ) ; }
Code	{ str . getChars ( strLen , strLen , size , STRING_CONSTANT ) ; }
Distance : 4

112
Tree	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , array.length , NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( CHAR_CONS , NUMBER_CONSTANT , array.length , NUMBER_CONSTANT ) ; }
Distance : 4

113
Tree	{ getChars ( str , rhs.a , false ) ; }
Code	{ getChars ( str , rhs.a , false ) ; }
Distance : 7

114
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , size , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , size , size ) ; }
Distance : 2

115
Tree	{ str . str ( strLen , strLen ) ; }
Code	{ str . str ( strLen , strLen ) ; }
Distance : 7

116
Tree	{ getChars ( str , strLen , buffer , tokens.length ) ; }
Code	{ getChars ( str , strLen , buffer , tokens.length ) ; }
Distance : 5

117
Tree	{ getChars ( str , StringUtils.EMPTY , false ) ; }
Code	{ getChars ( str , StringUtils.EMPTY , false ) ; }
Distance : 7

118
Tree	{ str . getChars ( null , strLen , buffer , buffer ) ; }
Code	{ str . getChars ( null , strLen , buffer , buffer ) ; }
Distance : 3

119
Tree	{ EscapeUtils.ESCAPE_ECMASCRIPT . getChars ( strLen , buffer ) ; }
Code	{ EscapeUtils.ESCAPE_ECMASCRIPT . getChars ( strLen , buffer ) ; }
Distance : 6

120
Tree	{ str . getChars ( TimeZones.GMT_ID , NUMBER_CONSTANT , size , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Code	{ str . getChars ( TimeZones.GMT_ID , NUMBER_CONSTANT , size , NUMBER_CONSTANT , size + NUMBER_CONSTANT ) ; }
Distance : 6

121
Tree	{ getChars ( str , strLen , buffer , StringUtils.EMPTY ) ; }
Code	{ getChars ( str , strLen , buffer , StringUtils.EMPTY ) ; }
Distance : 5

122
Tree	{ str . getChars ( this , strLen , size , size ) ; }
Code	{ str . getChars ( this , strLen , size , size ) ; }
Distance : 3

123
Tree	str . getChars ( NUMBER_CONSTANT , strLen , buffer , buffer ) ;
Code	str . getChars ( NUMBER_CONSTANT , strLen , buffer , buffer ) ;
Distance : 4

124
Tree	{ str . str ( strLen , buffer ) ; }
Code	{ str . str ( strLen , buffer ) ; }
Distance : 6

125
Tree	{ str . getChars ( true , buffer ) ; }
Code	{ str . getChars ( true , buffer ) ; }
Distance : 5

126
Tree	{ getChars ( null , array.length ) ; }
Code	{ getChars ( null , array.length ) ; }
Distance : 8

127
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , size ) ; }
Distance : 3

128
Tree	{ getChars ( STRING_CONSTANT , str , buffer , size ) ; }
Code	{ getChars ( STRING_CONSTANT , str , buffer , size ) ; }
Distance : 4

129
Tree	{ buffer . getChars ( true ) ; }
Code	{ buffer . getChars ( true ) ; }
Distance : 8

130
Tree	getChars ( str , strLen , buffer , StringUtils.EMPTY ) ;
Code	getChars ( str , strLen , buffer , StringUtils.EMPTY ) ;
Distance : 7

131
Tree	{ getChars ( STRING_CONSTANT , strLen , buffer , size ) ; }
Code	{ getChars ( STRING_CONSTANT , strLen , buffer , size ) ; }
Distance : 4

132
Tree	{ buffer . getChars ( NUMBER_CONSTANT , strLen , buffer ) ; }
Code	{ buffer . getChars ( NUMBER_CONSTANT , strLen , buffer ) ; }
Distance : 4

133
Tree	{ getChars ( buffer , getChars () , null ) ; }
Code	{ getChars ( buffer , getChars () , null ) ; }
Distance : 7

134
Tree	{ getChars ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Code	{ getChars ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; }
Distance : 7

135
Tree	getChars ( str , strLen , buffer , size ) ;
Code	getChars ( str , strLen , buffer , size ) ;
Distance : 6

136
Tree	{ str . getChars ( strLen , strLen . getChars () , this ) ; }
Code	{ str . getChars ( strLen , strLen . getChars () , this ) ; }
Distance : 6

137
Tree	{ buffer . getChars ( true , strLen ) ; }
Code	{ buffer . getChars ( true , strLen ) ; }
Distance : 7

138
Tree	{ getChars ( trim , null ) ; }
Code	{ getChars ( trim , null ) ; }
Distance : 8

139
Tree	{ getChars ( str , getChars () , null ) ; }
Code	{ getChars ( str , getChars () , null ) ; }
Distance : 7

140
Tree	{ getChars ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } [
Code	{ getChars ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } [
Distance : 8

141
Tree	{ str . getChars ( str , strLen . getChars () , this ) ; }
Code	{ str . getChars ( str , strLen . getChars () , this ) ; }
Distance : 6

142
Tree	{ str . getChars ( buffer , strLen . getChars () , this ) ; }
Code	{ str . getChars ( buffer , strLen . getChars () , this ) ; }
Distance : 6

143
Tree	{ getChars ( str , size , getChars () , STRING_CONSTANT ) ; }
Code	{ getChars ( str , size , getChars () , STRING_CONSTANT ) ; }
Distance : 7

144
Tree	{ getChars ( str , str , getChars () , STRING_CONSTANT ) ; }
Code	{ getChars ( str , str , getChars () , STRING_CONSTANT ) ; }
Distance : 7

145
Tree	{ getChars ( strLen , getChars () , null ) ; }
Code	{ getChars ( strLen , getChars () , null ) ; }
Distance : 7

146
Tree	{ getChars ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } Date
Code	{ getChars ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ; } Date
Distance : 8

147
Tree	{ str . getChars ( NUMBER_CONSTANT , strLen , size , size ) ; }
Code	{ str . getChars ( NUMBER_CONSTANT , strLen , size , size ) ; }
Distance : 2

========================================================================


========================================================================
Example Number: 5
Parent Code is: 
{ return cAvailableLocaleSet . contains ( locale ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return availableLocaleList () . contains ( locale ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (800{val=cAvailableLocaleSet}) (235{val=.}) (802{val=contains}) (214{val=(}) (800{val=locale}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (32 (802{val=availableLocaleList}) (216{val=()})) (235{val=.}) (802{val=contains}) (214{val=(}) (800{val=locale}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/57/parent/src_java_org_apache_commons_lang_LocaleUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 184
Wrong
========================================================================
False

0
Tree	{ return ( char ) contains ( locale + NUMBER_CONSTANT ) ; }
Code	{ return ( char ) contains ( locale + NUMBER_CONSTANT ) ; }
Distance : 5

1
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) ; }
Distance : 2

2
Tree	{ return locale . contains ( locale , StringUtils.EMPTY ) ; }
Code	{ return locale . contains ( locale , StringUtils.EMPTY ) ; }
Distance : 4

3
Tree	{ return locale . contains ( new locale ( locale ) ) ; }
Code	{ return locale . contains ( new locale ( locale ) ) ; }
Distance : 6

4
Tree	{ return contains ( locale . contains ( locale ) ) ; }
Code	{ return contains ( locale . contains ( locale ) ) ; }
Distance : 4

5
Tree	{ return cloneReset . contains ( locale ) ; }
Code	{ return cloneReset . contains ( locale ) ; }
Distance : 2

6
Tree	{ return ( locale ) contains ( locale ) ; }
Code	{ return ( locale ) contains ( locale ) ; }
Distance : 3

7
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains ( locale ) ; }
Distance : 6

8
Tree	{ return ( locale ) locale . contains ( locale ) ; }
Code	{ return ( locale ) locale . contains ( locale ) ; }
Distance : 4

9
Tree	{ return contains ( locale ) ; }
Code	{ return contains ( locale ) ; }
Distance : 3

10
Tree	{ return STRING_CONSTANT ; }
Code	{ return STRING_CONSTANT ; }
Distance : 7

11
Tree	{ return locale . contains ( null ) ; }
Code	{ return locale . contains ( null ) ; }
Distance : 3

12
Tree	{ return ( void ) contains ( locale + NUMBER_CONSTANT ) ; }
Code	{ return ( void ) contains ( locale + NUMBER_CONSTANT ) ; }
Distance : 5

13
Tree	{ return cAvailableLocaleSet . contains () . contains ( FastDateParser.JAPANESE_IMPERIAL ) ; }
Code	{ return cAvailableLocaleSet . contains () . contains ( FastDateParser.JAPANESE_IMPERIAL ) ; }
Distance : 4

14
Tree	{ contains ( locale ) ; return super(); ; }
Code	{ contains ( locale ) ; return super(); ; }
Distance : 7

15
Tree	{ return new INDEX_NOT_FOUND ( locale ) ; }
Code	{ return new INDEX_NOT_FOUND ( locale ) ; }
Distance : 4

16
Tree	{ return cAvailableLocaleSet . contains ( locale , Boolean.TYPE ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , Boolean.TYPE ) ; }
Distance : 4

17
Tree	{ return locale . contains ( locale ) . contains () ; }
Code	{ return locale . contains ( locale ) . contains () ; }
Distance : 5

18
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return super(); ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return super(); ; }
Distance : 6

19
Tree	{ return this . locale . contains ( locale ) ; }
Code	{ return this . locale . contains ( locale ) ; }
Distance : 3

20
Tree	{ return ( locale ) locale . contains () ; }
Code	{ return ( locale ) locale . contains () ; }
Distance : 7

21
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) ; }
Distance : 2

22
Tree	{ return ( boolean ) contains ( locale ) ; }
Code	{ return ( boolean ) contains ( locale ) ; }
Distance : 3

23
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return null ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return null ; }
Distance : 6

24
Tree	{ return ( byte ) contains ( locale + NUMBER_CONSTANT ) ; }
Code	{ return ( byte ) contains ( locale + NUMBER_CONSTANT ) ; }
Distance : 5

25
Tree	{ contains ( locale ) ; return true ; }
Code	{ contains ( locale ) ; return true ; }
Distance : 7

26
Tree	{ return cAvailableLocaleSet . contains () . contains () ; }
Code	{ return cAvailableLocaleSet . contains () . contains () ; }
Distance : 6

27
Tree	{ return STRING_CONSTANT ; } Date
Code	{ return STRING_CONSTANT ; } Date
Distance : 8

28
Tree	{ locale . contains ( locale ) ; return null ; }
Code	{ locale . contains ( locale ) ; return null ; }
Distance : 6

29
Tree	{ return contains ( locale ) ; }
Code	{ return contains ( locale ) ; }
Distance : 3

30
Tree	{ return this . cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return this . cAvailableLocaleSet . contains ( locale ) ; }
Distance : 3

31
Tree	{ return cAvailableLocaleSet ; } pattern
Code	{ return cAvailableLocaleSet ; } pattern
Distance : 8

32
Tree	{ return contains ( locale ) ; }
Code	{ return contains ( locale ) ; }
Distance : 3

33
Tree	{ return ( boolean ) contains ( locale . contains () , locale ) ; }
Code	{ return ( boolean ) contains ( locale . contains () , locale ) ; }
Distance : 8

34
Tree	{ return locale . contains ( locale . contains ( locale ) ) ; }
Code	{ return locale . contains ( locale . contains ( locale ) ) ; }
Distance : 6

35
Tree	{ return locale . contains ( ( locale ) locale ) ; }
Code	{ return locale . contains ( ( locale ) locale ) ; }
Distance : 5

36
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains () ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains () ; }
Distance : 5

37
Tree	{ return ( locale ) ; return null ; }
Code	{ return ( locale ) ; return null ; }
Distance : 7

38
Tree	{ return contains ( locale , locale . contains () ) ; }
Code	{ return contains ( locale , locale . contains () ) ; }
Distance : 7

39
Tree	{ return cAvailableLocaleSet . contains () . contains ( Locale.ROOT ) ; }
Code	{ return cAvailableLocaleSet . contains () . contains ( Locale.ROOT ) ; }
Distance : 4

40
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return null ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return null ; }
Distance : 6

41
Tree	{ return locale . contains ( locale ) . contains ( locale ) ; }
Code	{ return locale . contains ( locale ) . contains ( locale ) ; }
Distance : 6

42
Tree	{ return new StringBuffer ( locale ) ; }
Code	{ return new StringBuffer ( locale ) ; }
Distance : 4

43
Tree	{ return continue; ; }
Code	{ return continue; ; }
Distance : 7

44
Tree	{ return ( char ) contains ( locale ) ; }
Code	{ return ( char ) contains ( locale ) ; }
Distance : 3

45
Tree	{ return cAvailableLocaleSet . contains () ; }
Code	{ return cAvailableLocaleSet . contains () ; }
Distance : 5

46
Tree	{ return ( locale ) ) . contains ( locale ) ; }
Code	{ return ( locale ) ) . contains ( locale ) ; }
Distance : 4

47
Tree	{ return locale . contains ( locale , locale ) ; }
Code	{ return locale . contains ( locale , locale ) ; }
Distance : 4

48
Tree	{ return ( byte ) contains ( locale . contains ( locale ) ) ; }
Code	{ return ( byte ) contains ( locale . contains ( locale ) ) ; }
Distance : 7

49
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains () ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains () ; }
Distance : 5

50
Tree	{ return STRING_CONSTANT ; } [
Code	{ return STRING_CONSTANT ; } [
Distance : 8

51
Tree	{ { ( cAvailableLocaleSet ) ; return NUMBER_CONSTANT ; }
Code	{ { ( cAvailableLocaleSet ) ; return NUMBER_CONSTANT ; }
Distance : 8

52
Tree	{ return contains ( locale , locale . contains ( locale ) ) ; }
Code	{ return contains ( locale , locale . contains ( locale ) ) ; }
Distance : 6

53
Tree	{ return cAvailableLocaleSet . contains () . contains ( StringUtils.EMPTY ) ; }
Code	{ return cAvailableLocaleSet . contains () . contains ( StringUtils.EMPTY ) ; }
Distance : 4

54
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) ; }
Distance : 2

55
Tree	{ return STRING_CONSTANT ; } buffer
Code	{ return STRING_CONSTANT ; } buffer
Distance : 8

56
Tree	{ return ( byte ) contains ( locale ) ; }
Code	{ return ( byte ) contains ( locale ) ; }
Distance : 3

57
Tree	{ return locale . contains () ; }
Code	{ return locale . contains () ; }
Distance : 5

58
Tree	{ return locale . contains ( locale ) . contains ( StringUtils.EMPTY ) ; }
Code	{ return locale . contains ( locale ) . contains ( StringUtils.EMPTY ) ; }
Distance : 7

59
Tree	{ return locale . contains ( locale , Boolean.TYPE ) ; }
Code	{ return locale . contains ( locale , Boolean.TYPE ) ; }
Distance : 4

60
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Distance : 3

61
Tree	{ return ( locale ) ) . contains () ; }
Code	{ return ( locale ) ) . contains () ; }
Distance : 7

62
Tree	{ return cAvailableLocaleSet . contains ( locale . contains ( locale ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale . contains ( locale ) ) ; }
Distance : 6

63
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) ; }
Distance : 2

64
Tree	{ return ( locale ) contains ( locale ) ; }
Code	{ return ( locale ) contains ( locale ) ; }
Distance : 3

65
Tree	{ return ( locale ) locale . contains ( locale ) ; }
Code	{ return ( locale ) locale . contains ( locale ) ; }
Distance : 4

66
Tree	{ return cAvailableLocaleSet . contains ( new locale ( locale , false ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( new locale ( locale , false ) ) ; }
Distance : 8

67
Tree	{ return cAvailableLocaleSet . contains ( ( locale ) super(); ) ; }
Code	{ return cAvailableLocaleSet . contains ( ( locale ) super(); ) ; }
Distance : 5

68
Tree	{ return ( locale ) locale . contains ( locale ) ; }
Code	{ return ( locale ) locale . contains ( locale ) ; }
Distance : 4

69
Tree	{ return locale . contains () . contains () ; }
Code	{ return locale . contains () . contains () ; }
Distance : 6

70
Tree	{ return locale . contains ( new cAvailableLocaleSet ( locale ) ) ; }
Code	{ return locale . contains ( new cAvailableLocaleSet ( locale ) ) ; }
Distance : 6

71
Tree	{ return cAvailableLocaleSet . contains ( locale . contains ( locale ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale . contains ( locale ) ) ; }
Distance : 6

72
Tree	{ return cAvailableLocaleSet . contains ( new locale ( locale , true ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( new locale ( locale , true ) ) ; }
Distance : 8

73
Tree	{ locale . contains ( locale ) ; return true ; }
Code	{ locale . contains ( locale ) ; return true ; }
Distance : 6

74
Tree	{ return contains ( locale , locale . contains ( locale ) ) ; }
Code	{ return contains ( locale , locale . contains ( locale ) ) ; }
Distance : 6

75
Tree	{ contains ( locale ) ; return NUMBER_CONSTANT ; }
Code	{ contains ( locale ) ; return NUMBER_CONSTANT ; }
Distance : 7

76
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Distance : 3

77
Tree	{ return contains ( locale , locale ) ; }
Code	{ return contains ( locale , locale ) ; }
Distance : 5

78
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains ( locale ) ; }
Distance : 6

79
Tree	{ return locale . contains ( STRING_CONSTANT , cAvailableLocaleSet ) ; }
Code	{ return locale . contains ( STRING_CONSTANT , cAvailableLocaleSet ) ; }
Distance : 5

80
Tree	{ return contains () ; }
Code	{ return contains () ; }
Distance : 6

81
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return true ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return true ; }
Distance : 6

82
Tree	{ return cAvailableLocaleSet . contains ( continue; ) ; }
Code	{ return cAvailableLocaleSet . contains ( continue; ) ; }
Distance : 3

83
Tree	{ return cAvailableLocaleSet . contains ( ( locale ) return; ) ; }
Code	{ return cAvailableLocaleSet . contains ( ( locale ) return; ) ; }
Distance : 5

84
Tree	{ return cAvailableLocaleSet . contains ( locale . contains ( locale ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale . contains ( locale ) ) ; }
Distance : 6

85
Tree	{ return contains () ; }
Code	{ return contains () ; }
Distance : 6

86
Tree	{ return contains ( locale . contains ( locale ) ) ; }
Code	{ return contains ( locale . contains ( locale ) ) ; }
Distance : 4

87
Tree	{ return locale . contains ( locale , locale . contains () ) ; }
Code	{ return locale . contains ( locale , locale . contains () ) ; }
Distance : 7

88
Tree	{ return contains ( locale , cAvailableLocaleSet . contains ( locale ) ) ; }
Code	{ return contains ( locale , cAvailableLocaleSet . contains ( locale ) ) ; }
Distance : 6

89
Tree	{ return StringUtils.EMPTY . contains ( locale ) ; }
Code	{ return StringUtils.EMPTY . contains ( locale ) ; }
Distance : 2

90
Tree	{ return cAvailableLocaleSet . contains ( locale , contains ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , contains ) ; }
Distance : 4

91
Tree	{ return new indexOf ( locale ) ; }
Code	{ return new indexOf ( locale ) ; }
Distance : 4

92
Tree	{ return null ; }
Code	{ return null ; }
Distance : 7

93
Tree	{ cAvailableLocaleSet . contains ( locale ) ; return false ; }
Code	{ cAvailableLocaleSet . contains ( locale ) ; return false ; }
Distance : 6

94
Tree	{ contains ( locale ) ; return false ; }
Code	{ contains ( locale ) ; return false ; }
Distance : 7

95
Tree	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , locale ) ; }
Distance : 4

96
Tree	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains () . contains ( locale ) ; }
Distance : 3

97
Tree	{ return contains ( locale , locale ) ; }
Code	{ return contains ( locale , locale ) ; }
Distance : 5

98
Tree	{ { ( locale ) ; return NUMBER_CONSTANT ; }
Code	{ { ( locale ) ; return NUMBER_CONSTANT ; }
Distance : 8

99
Tree	{ return cAvailableLocaleSet . contains ( super(); ) ; }
Code	{ return cAvailableLocaleSet . contains ( super(); ) ; }
Distance : 3

100
Tree	{ return contains ( locale , cAvailableLocaleSet ) ; }
Code	{ return contains ( locale , cAvailableLocaleSet ) ; }
Distance : 5

101
Tree	{ return ( locale ) contains ( locale ) ; }
Code	{ return ( locale ) contains ( locale ) ; }
Distance : 3

102
Tree	{ return cAvailableLocaleSet . contains () . contains () ; }
Code	{ return cAvailableLocaleSet . contains () . contains () ; }
Distance : 6

103
Tree	{ contains ( locale ) ; return NUMBER_CONSTANT ; }
Code	{ contains ( locale ) ; return NUMBER_CONSTANT ; }
Distance : 7

104
Tree	{ return new UnsupportedOperationException ( locale ) ; }
Code	{ return new UnsupportedOperationException ( locale ) ; }
Distance : 4

105
Tree	{ return return; ; }
Code	{ return return; ; }
Distance : 7

106
Tree	{ return contains ( locale ) ; }
Code	{ return contains ( locale ) ; }
Distance : 3

107
Tree	{ return cAvailableLocaleSet ; }
Code	{ return cAvailableLocaleSet ; }
Distance : 7

108
Tree	{ return ArrayUtils.EMPTY_STRING_ARRAY . contains ( locale ) ; }
Code	{ return ArrayUtils.EMPTY_STRING_ARRAY . contains ( locale ) ; }
Distance : 2

109
Tree	{ return ( boolean ) contains ( locale . contains ( locale ) ) ; }
Code	{ return ( boolean ) contains ( locale . contains ( locale ) ) ; }
Distance : 7

110
Tree	{ return ( byte ) contains ( locale . contains () , locale ) ; }
Code	{ return ( byte ) contains ( locale . contains () , locale ) ; }
Distance : 8

111
Tree	{ contains ( locale ) ; return null ; }
Code	{ contains ( locale ) ; return null ; }
Distance : 7

112
Tree	{ return ( char ) contains ( locale . contains ( locale ) ) ; }
Code	{ return ( char ) contains ( locale . contains ( locale ) ) ; }
Distance : 7

113
Tree	{ return cAvailableLocaleSet . contains ( locale , false ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , false ) ; }
Distance : 4

114
Tree	{ return ( locale ) contains ( locale ) ; }
Code	{ return ( locale ) contains ( locale ) ; }
Distance : 3

115
Tree	{ return ( void ) contains ( locale . contains () , locale ) ; }
Code	{ return ( void ) contains ( locale . contains () , locale ) ; }
Distance : 8

116
Tree	{ return cAvailableLocaleSet . contains ( locale , locale . contains () ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , locale . contains () ) ; }
Distance : 7

117
Tree	{ return ( void ) contains ( locale . contains ( locale ) ) ; }
Code	{ return ( void ) contains ( locale . contains ( locale ) ) ; }
Distance : 7

118
Tree	{ return locale . contains ( locale , false ) ; }
Code	{ return locale . contains ( locale , false ) ; }
Distance : 4

119
Tree	{ return locale ; }
Code	{ return locale ; }
Distance : 6

120
Tree	{ return cAvailableLocaleSet . contains ( null ) ; }
Code	{ return cAvailableLocaleSet . contains ( null ) ; }
Distance : 3

121
Tree	{ return ( void ) contains ( locale ) ; }
Code	{ return ( void ) contains ( locale ) ; }
Distance : 3

122
Tree	{ return locale . contains ( ( locale ) ; ) ; }
Code	{ return locale . contains ( ( locale ) ; ) ; }
Distance : 5

123
Tree	{ return cAvailableLocaleSet . contains ( locale , true ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , true ) ; }
Distance : 4

124
Tree	{ return contains ( locale . contains ( locale ) ) ; }
Code	{ return contains ( locale . contains ( locale ) ) ; }
Distance : 4

125
Tree	{ return locale . contains ( STRING_CONSTANT , locale ) ; }
Code	{ return locale . contains ( STRING_CONSTANT , locale ) ; }
Distance : 4

126
Tree	{ return this . locale . contains ( locale ) ; }
Code	{ return this . locale . contains ( locale ) ; }
Distance : 3

127
Tree	{ return cAvailableLocaleSet . contains ( STRING_CONSTANT , cAvailableLocaleSet ) ; }
Code	{ return cAvailableLocaleSet . contains ( STRING_CONSTANT , cAvailableLocaleSet ) ; }
Distance : 5

128
Tree	{ return locale . contains ( new locale ( locale , true ) ) ; }
Code	{ return locale . contains ( new locale ( locale , true ) ) ; }
Distance : 8

129
Tree	{ return cAvailableLocaleSet . contains ( ( locale ) ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( ( locale ) ) ) ; }
Distance : 5

130
Tree	{ return locale . contains ( locale ) . contains ( locale ) ; }
Code	{ return locale . contains ( locale ) . contains ( locale ) ; }
Distance : 6

131
Tree	{ return cAvailableLocaleSet . contains ( locale , . . contains () ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , . . contains () ) ; }
Distance : 7

132
Tree	{ return contains ( locale , locale ) ; }
Code	{ return contains ( locale , locale ) ; }
Distance : 5

133
Tree	{ return ( void ) cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return ( void ) cAvailableLocaleSet . contains ( locale ) ; }
Distance : 4

134
Tree	{ return cAvailableLocaleSet . contains ( new locale ( locale ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( new locale ( locale ) ) ; }
Distance : 6

135
Tree	{ return locale . contains ( locale , { . contains () ) ; }
Code	{ return locale . contains ( locale , { . contains () ) ; }
Distance : 7

136
Tree	{ return EscapeUtils.ESCAPE_ECMASCRIPT . contains ( locale ) ; }
Code	{ return EscapeUtils.ESCAPE_ECMASCRIPT . contains ( locale ) ; }
Distance : 2

137
Tree	{ return ( char ) contains ( locale . contains () , locale ) ; }
Code	{ return ( char ) contains ( locale . contains () , locale ) ; }
Distance : 8

138
Tree	{ return contains ( locale , locale . contains () ) ; }
Code	{ return contains ( locale , locale . contains () ) ; }
Distance : 7

139
Tree	{ return cAvailableLocaleSet . locale ( locale ) ; }
Code	{ return cAvailableLocaleSet . locale ( locale ) ; }
Distance : 3

140
Tree	{ return cAvailableLocaleSet . contains ( STRING_CONSTANT , locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( STRING_CONSTANT , locale ) ; }
Distance : 4

141
Tree	{ return locale . contains ( locale , contains ) ; }
Code	{ return locale . contains ( locale , contains ) ; }
Distance : 4

142
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains () ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains () ; }
Distance : 5

143
Tree	{ return locale . contains ( locale , true ) ; }
Code	{ return locale . contains ( locale , true ) ; }
Distance : 4

144
Tree	{ return cAvailableLocaleSet ; } CharSequence
Code	{ return cAvailableLocaleSet ; } CharSequence
Distance : 8

145
Tree	{ return ( char ) cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return ( char ) cAvailableLocaleSet . contains ( locale ) ; }
Distance : 4

146
Tree	{ return contains ( locale , contains . contains () ) ; }
Code	{ return contains ( locale , contains . contains () ) ; }
Distance : 7

147
Tree	{ return locale . contains () . contains () ; }
Code	{ return locale . contains () . contains () ; }
Distance : 6

148
Tree	{ return locale . contains ( locale ) ; }
Code	{ return locale . contains ( locale ) ; }
Distance : 2

149
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) ; }
Distance : 2

150
Tree	{ return ( locale ) locale . contains () ; }
Code	{ return ( locale ) locale . contains () ; }
Distance : 7

151
Tree	{ return ( locale ) locale . contains () ; }
Code	{ return ( locale ) locale . contains () ; }
Distance : 7

152
Tree	{ return cAvailableLocaleSet . contains () ; }
Code	{ return cAvailableLocaleSet . contains () ; }
Distance : 5

153
Tree	{ return ( boolean ) contains ( locale + NUMBER_CONSTANT ) ; }
Code	{ return ( boolean ) contains ( locale + NUMBER_CONSTANT ) ; }
Distance : 5

154
Tree	{ return contains () ; } pattern
Code	{ return contains () ; } pattern
Distance : 7

155
Tree	{ return this . locale . contains ( locale ) ; }
Code	{ return this . locale . contains ( locale ) ; }
Distance : 3

156
Tree	{ return contains ( locale , locale . contains ( locale ) ) ; }
Code	{ return contains ( locale , locale . contains ( locale ) ) ; }
Distance : 6

157
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) ; }
Distance : 2

158
Tree	{ return cAvailableLocaleSet . contains ( ( locale ) null ) ; }
Code	{ return cAvailableLocaleSet . contains ( ( locale ) null ) ; }
Distance : 5

159
Tree	{ locale . contains ( locale ) ; return false ; }
Code	{ locale . contains ( locale ) ; return false ; }
Distance : 6

160
Tree	{ return cAvailableLocaleSet . contains ( locale , StringUtils.EMPTY ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale , StringUtils.EMPTY ) ; }
Distance : 4

161
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains ( Locale.ENGLISH ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains ( Locale.ENGLISH ) ; }
Distance : 7

162
Tree	{ return locale . locale ( locale ) ; }
Code	{ return locale . locale ( locale ) ; }
Distance : 3

163
Tree	{ return cAvailableLocaleSet . contains ( new locale ( locale ) ) ; }
Code	{ return cAvailableLocaleSet . contains ( new locale ( locale ) ) ; }
Distance : 6

164
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains ( FastDateParser.JAPANESE_IMPERIAL ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains ( FastDateParser.JAPANESE_IMPERIAL ) ; }
Distance : 7

165
Tree	{ { ( locale ) ; return true ; }
Code	{ { ( locale ) ; return true ; }
Distance : 8

166
Tree	{ return locale . contains () ; }
Code	{ return locale . contains () ; }
Distance : 5

167
Tree	{ return cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) ; }
Distance : 2

168
Tree	{ return cAvailableLocaleSet . contains ( ( locale ) locale ) ; }
Code	{ return cAvailableLocaleSet . contains ( ( locale ) locale ) ; }
Distance : 5

169
Tree	{ return locale . contains ( new locale ( locale , false ) ) ; }
Code	{ return locale . contains ( new locale ( locale , false ) ) ; }
Distance : 8

170
Tree	{ return super(); ; }
Code	{ return super(); ; }
Distance : 7

171
Tree	{ return locale . contains () . contains ( StringUtils.EMPTY ) ; }
Code	{ return locale . contains () . contains ( StringUtils.EMPTY ) ; }
Distance : 4

172
Tree	{ return locale . contains ( locale ) ; }
Code	{ return locale . contains ( locale ) ; }
Distance : 2

173
Tree	{ { ( locale ) ; return false ; }
Code	{ { ( locale ) ; return false ; }
Distance : 8

174
Tree	{ return ( char ) locale . contains ( locale ) ; }
Code	{ return ( char ) locale . contains ( locale ) ; }
Distance : 4

175
Tree	{ return cAvailableLocaleSet . contains ( locale ) . contains ( StringUtils.EMPTY ) ; }
Code	{ return cAvailableLocaleSet . contains ( locale ) . contains ( StringUtils.EMPTY ) ; }
Distance : 7

176
Tree	{ return locale . contains ( ( locale ) null ) ; }
Code	{ return locale . contains ( ( locale ) null ) ; }
Distance : 5

177
Tree	{ return contains ( locale . contains ( locale ) ) ; }
Code	{ return contains ( locale . contains ( locale ) ) ; }
Distance : 4

178
Tree	{ return locale . contains () . contains ( locale ) ; }
Code	{ return locale . contains () . contains ( locale ) ; }
Distance : 3

179
Tree	{ return contains ( locale , locale . contains () ) ; }
Code	{ return contains ( locale , locale . contains () ) ; }
Distance : 7

180
Tree	{ return ( boolean ) cAvailableLocaleSet . contains ( locale ) ; }
Code	{ return ( boolean ) cAvailableLocaleSet . contains ( locale ) ; }
Distance : 4

181
Tree	{ contains ( locale ) ; return null ; }
Code	{ contains ( locale ) ; return null ; }
Distance : 7

182
Tree	{ return locale . contains ( locale ) ; }
Code	{ return locale . contains ( locale ) ; }
Distance : 2

183
Tree	{ return contains () ; } CharSequence
Code	{ return contains () ; } CharSequence
Distance : 7

========================================================================


========================================================================
Example Number: 6
Parent Code is: 
{ escapeJavaStyleString ( out , str , true ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ escapeJavaStyleString ( out , str , true , true ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=out}) (234{val=,}) (800{val=str}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=out}) (234{val=,}) (800{val=str}) (234{val=,}) (9{val=true}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/46/parent/src_java_org_apache_commons_lang_StringEscapeUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 184
Wrong
========================================================================
False

0
Tree	{ out . out ( str , out ) ; }
Code	{ out . out ( str , out ) ; }
Distance : 6

1
Tree	{ out . out ( str , new startPos ( str ) ) ; }
Code	{ out . out ( str , new startPos ( str ) ) ; }
Distance : 8

2
Tree	{ out . out ( str , new Date ( str ) ) ; }
Code	{ out . out ( str , new Date ( str ) ) ; }
Distance : 8

3
Tree	{ out () . escapeJavaStyleString ( str , out ) ; }
Code	{ out () . escapeJavaStyleString ( str , out ) ; }
Distance : 8

4
Tree	{ out . out ( str , new MutableFloat ( str ) ) ; }
Code	{ out . out ( str , new MutableFloat ( str ) ) ; }
Distance : 8

5
Tree	{ EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString ( str , out ) ; }
Code	{ EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString ( str , out ) ; }
Distance : 7

6
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; }
Distance : 6

7
Tree	{ escapeJavaStyleString ( out , out , TimeUnit.DAYS ) ; }
Code	{ escapeJavaStyleString ( out , out , TimeUnit.DAYS ) ; }
Distance : 4

8
Tree	{ out . this . escapeJavaStyleString ( out , out , out ) ; }
Code	{ out . this . escapeJavaStyleString ( out , out , out ) ; }
Distance : 8

9
Tree	{ out . escapeJavaStyleString ( str . escapeJavaStyleString ( str ) ) ; }
Code	{ out . escapeJavaStyleString ( str . escapeJavaStyleString ( str ) ) ; }
Distance : 9

10
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , str ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , str ) ; }
Distance : 5

11
Tree	{ escapeJavaStyleString ( str , out , false ) ; }
Code	{ escapeJavaStyleString ( str , out , false ) ; }
Distance : 4

12
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Distance : 9

13
Tree	{ out . escapeJavaStyleString ( out . escapeJavaStyleString ( str ) ) ; }
Code	{ out . escapeJavaStyleString ( out . escapeJavaStyleString ( str ) ) ; }
Distance : 8

14
Tree	{ out . escapeJavaStyleString ( this . out , out , out , str ) ; }
Code	{ out . escapeJavaStyleString ( this . out , out , out , str ) ; }
Distance : 7

15
Tree	{ out . escapeJavaStyleString ( null , out , str , out ) ; }
Code	{ out . escapeJavaStyleString ( null , out , str , out ) ; }
Distance : 6

16
Tree	{ out . escapeJavaStyleString ( this , str , str ) ; }
Code	{ out . escapeJavaStyleString ( this , str , str ) ; }
Distance : 6

17
Tree	{ out . escapeJavaStyleString ( null , str , out , out ) ; }
Code	{ out . escapeJavaStyleString ( null , str , out , out ) ; }
Distance : 5

18
Tree	{ out . escapeJavaStyleString ( str , null , out ) ; }
Code	{ out . escapeJavaStyleString ( str , null , out ) ; }
Distance : 6

19
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , str , out ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , str , out ) ; }
Distance : 4

20
Tree	{ escapeJavaStyleString ( out , out , out ) ; }
Code	{ escapeJavaStyleString ( out , out , out ) ; }
Distance : 4

21
Tree	{ out . escapeJavaStyleString ( out , true ) ; }
Code	{ out . escapeJavaStyleString ( out , true ) ; }
Distance : 6

22
Tree	{ out . out ( str , new offset ( str ) ) ; }
Code	{ out . out ( str , new offset ( str ) ) ; }
Distance : 8

23
Tree	{ str . escapeJavaStyleString ( out ) ; }
Code	{ str . escapeJavaStyleString ( out ) ; }
Distance : 8

24
Tree	{ out . escapeJavaStyleString ( str , STRING_CONSTANT ) ; }
Code	{ out . escapeJavaStyleString ( str , STRING_CONSTANT ) ; }
Distance : 7

25
Tree	{ out . escapeJavaStyleString ( null , out , out , str ) ; }
Code	{ out . escapeJavaStyleString ( null , out , out , str ) ; }
Distance : 6

26
Tree	{ escapeJavaStyleString ( escapeJavaStyleString ( out ) , escapeJavaStyleString ( out ) ) ; }
Code	{ escapeJavaStyleString ( escapeJavaStyleString ( out ) , escapeJavaStyleString ( out ) ) ; }
Distance : 8

27
Tree	{ escapeJavaStyleString ( out , out , Byte.TYPE ) ; }
Code	{ escapeJavaStyleString ( out , out , Byte.TYPE ) ; }
Distance : 4

28
Tree	{ this . escapeJavaStyleString ( str ? ExceptionUtils.WRAPPED_MARKER : Boolean.TRUE ) ; }
Code	{ this . escapeJavaStyleString ( str ? ExceptionUtils.WRAPPED_MARKER : Boolean.TRUE ) ; }
Distance : 8

29
Tree	{ out . escapeJavaStyleString ( trim , out ? DateUtils.MILLIS_PER_HOUR : Boolean.TRUE ) ; }
Code	{ out . escapeJavaStyleString ( trim , out ? DateUtils.MILLIS_PER_HOUR : Boolean.TRUE ) ; }
Distance : 8

30
Tree	{ out . out ( out , out ) ; }
Code	{ out . out ( out , out ) ; }
Distance : 7

31
Tree	{ escapeJavaStyleString ( str , out , out . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( str , out , out . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Distance : 9

32
Tree	{ str . escapeJavaStyleString ( str ) ; }
Code	{ str . escapeJavaStyleString ( str ) ; }
Distance : 8

33
Tree	{ escapeJavaStyleString ( out , str ) ; }
Code	{ escapeJavaStyleString ( out , str ) ; }
Distance : 4

34
Tree	{ escapeJavaStyleString ( out , out , str , true ) ; }
Code	{ escapeJavaStyleString ( out , out , str , true ) ; }
Distance : 2

35
Tree	{ escapeJavaStyleString ( out , return; , out ) ; }
Code	{ escapeJavaStyleString ( out , return; , out ) ; }
Distance : 4

36
Tree	{ out . escapeJavaStyleString ( ( str ) super(); ) ; }
Code	{ out . escapeJavaStyleString ( ( str ) super(); ) ; }
Distance : 8

37
Tree	{ escapeJavaStyleString ( out , null ) ; }
Code	{ escapeJavaStyleString ( out , null ) ; }
Distance : 5

38
Tree	{ this . escapeJavaStyleString ( str ? Integer.MAX_VALUE : DateUtils.MILLIS_PER_HOUR ) ; }
Code	{ this . escapeJavaStyleString ( str ? Integer.MAX_VALUE : DateUtils.MILLIS_PER_HOUR ) ; }
Distance : 8

39
Tree	{ out . escapeJavaStyleString ( str , out ) ; }
Code	{ out . escapeJavaStyleString ( str , out ) ; }
Distance : 7

40
Tree	{ out . escapeJavaStyleString ( ( str ) return; ) ; }
Code	{ out . escapeJavaStyleString ( ( str ) return; ) ; }
Distance : 8

41
Tree	{ escapeJavaStyleString ( out , out ) ; }
Code	{ escapeJavaStyleString ( out , out ) ; }
Distance : 5

42
Tree	{ out . escapeJavaStyleString ( str , str ) ; }
Code	{ out . escapeJavaStyleString ( str , str ) ; }
Distance : 7

43
Tree	{ escapeJavaStyleString ( str , out , out , out ) ; }
Code	{ escapeJavaStyleString ( str , out , out , out ) ; }
Distance : 4

44
Tree	{ out . escapeJavaStyleString ( this , out , str ) ; }
Code	{ out . escapeJavaStyleString ( this , out , str ) ; }
Distance : 7

45
Tree	{ out . escapeJavaStyleString ( this . out , str , out , out ) ; }
Code	{ out . escapeJavaStyleString ( this . out , str , out , out ) ; }
Distance : 6

46
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } pattern
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } pattern
Distance : 7

47
Tree	{ out . escapeJavaStyleString ( out . escapeJavaStyleString ( out ) ) ; }
Code	{ out . escapeJavaStyleString ( out . escapeJavaStyleString ( out ) ) ; }
Distance : 8

48
Tree	{ out . escapeJavaStyleString ( str , return; , out ) ; }
Code	{ out . escapeJavaStyleString ( str , return; , out ) ; }
Distance : 6

49
Tree	{ out . escapeJavaStyleString ( FastDateParser.JAPANESE_IMPERIAL , out ? DateUtils.MILLIS_PER_HOUR : Boolean.TRUE ) ; }
Code	{ out . escapeJavaStyleString ( FastDateParser.JAPANESE_IMPERIAL , out ? DateUtils.MILLIS_PER_HOUR : Boolean.TRUE ) ; }
Distance : 8

50
Tree	{ escapeJavaStyleString ( out , out , out . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( out , out , out . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Distance : 8

51
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } CharSequence
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } CharSequence
Distance : 7

52
Tree	{ this . out . escapeJavaStyleString ( str ) ; }
Code	{ this . out . escapeJavaStyleString ( str ) ; }
Distance : 8

53
Tree	{ out . escapeJavaStyleString ( str ? ExceptionUtils.WRAPPED_MARKER : Boolean.TRUE ) ; }
Code	{ out . escapeJavaStyleString ( str ? ExceptionUtils.WRAPPED_MARKER : Boolean.TRUE ) ; }
Distance : 8

54
Tree	{ out . escapeJavaStyleString ( FastDateParser.JAPANESE_IMPERIAL , out ? DateUtils.MILLIS_PER_HOUR : DateUtils.MILLIS_PER_HOUR ) ; }
Code	{ out . escapeJavaStyleString ( FastDateParser.JAPANESE_IMPERIAL , out ? DateUtils.MILLIS_PER_HOUR : DateUtils.MILLIS_PER_HOUR ) ; }
Distance : 8

55
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , out ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , out ) ; }
Distance : 4

56
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 9

57
Tree	{ out . escapeJavaStyleString ( ( str ) null ) ; }
Code	{ out . escapeJavaStyleString ( ( str ) null ) ; }
Distance : 8

58
Tree	{ out . escapeJavaStyleString ( out , out , out , this ) ; }
Code	{ out . escapeJavaStyleString ( out , out , out , this ) ; }
Distance : 5

59
Tree	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; }
Code	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; }
Distance : 9

60
Tree	{ out . escapeJavaStyleString ( str ? ExceptionUtils.WRAPPED_MARKER : DateUtils.MILLIS_PER_HOUR ) ; }
Code	{ out . escapeJavaStyleString ( str ? ExceptionUtils.WRAPPED_MARKER : DateUtils.MILLIS_PER_HOUR ) ; }
Distance : 8

61
Tree	{ this . str . escapeJavaStyleString ( str ) ; }
Code	{ this . str . escapeJavaStyleString ( str ) ; }
Distance : 8

62
Tree	{ escapeJavaStyleString ( str , out , out ) ; }
Code	{ escapeJavaStyleString ( str , out , out ) ; }
Distance : 4

63
Tree	{ escapeJavaStyleString ( out , null , out ) ; }
Code	{ escapeJavaStyleString ( out , null , out ) ; }
Distance : 4

64
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 7

65
Tree	{ out . escapeJavaStyleString ( str , new startPos ( str ) ) ; }
Code	{ out . escapeJavaStyleString ( str , new startPos ( str ) ) ; }
Distance : 8

66
Tree	{ escapeJavaStyleString ( out , out , true ) ; }
Code	{ escapeJavaStyleString ( out , out , true ) ; }
Distance : 3

67
Tree	{ out . escapeJavaStyleString ( str , null , str ) ; }
Code	{ out . escapeJavaStyleString ( str , null , str ) ; }
Distance : 6

68
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } CharSequence
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } CharSequence
Distance : 6

69
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , str , out , out ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , str , out , out ) ; }
Distance : 3

70
Tree	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( out ) , null ) ; }
Code	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( out ) , null ) ; }
Distance : 7

71
Tree	{ out . escapeJavaStyleString ( this , str ) ; }
Code	{ out . escapeJavaStyleString ( this , str ) ; }
Distance : 7

72
Tree	{ str . escapeJavaStyleString ( this , str ) ; }
Code	{ str . escapeJavaStyleString ( this , str ) ; }
Distance : 7

73
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Distance : 7

74
Tree	{ escapeJavaStyleString ( ( out ) str , out ) ; }
Code	{ escapeJavaStyleString ( ( out ) str , out ) ; }
Distance : 5

75
Tree	{ escapeJavaStyleString ( out , out , Integer.MAX_VALUE ) ; }
Code	{ escapeJavaStyleString ( out , out , Integer.MAX_VALUE ) ; }
Distance : 4

76
Tree	{ escapeJavaStyleString ( ( str ) out , out ) ; }
Code	{ escapeJavaStyleString ( ( str ) out , out ) ; }
Distance : 5

77
Tree	{ out . escapeJavaStyleString ( str , new MutableFloat ( str ) ) ; }
Code	{ out . escapeJavaStyleString ( str , new MutableFloat ( str ) ) ; }
Distance : 8

78
Tree	{ UnescapeUtils.UNESCAPE_ECMASCRIPT . escapeJavaStyleString ( str , out ) ; }
Code	{ UnescapeUtils.UNESCAPE_ECMASCRIPT . escapeJavaStyleString ( str , out ) ; }
Distance : 7

79
Tree	{ out . escapeJavaStyleString ( trim , out ? DateUtils.MILLIS_PER_HOUR : DateUtils.MILLIS_PER_HOUR ) ; }
Code	{ out . escapeJavaStyleString ( trim , out ? DateUtils.MILLIS_PER_HOUR : DateUtils.MILLIS_PER_HOUR ) ; }
Distance : 8

80
Tree	{ out . escapeJavaStyleString ( this . str , out , out , out ) ; }
Code	{ out . escapeJavaStyleString ( this . str , out , out , out ) ; }
Distance : 8

81
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT , out ) ; }
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT , out ) ; }
Distance : 4

82
Tree	{ str . out ( str , out ) ; }
Code	{ str . out ( str , out ) ; }
Distance : 6

83
Tree	{ out . escapeJavaStyleString ( out , false ) ; }
Code	{ out . escapeJavaStyleString ( out , false ) ; }
Distance : 7

84
Tree	{ out . escapeJavaStyleString ( ( out ) null ) ; }
Code	{ out . escapeJavaStyleString ( ( out ) null ) ; }
Distance : 9

85
Tree	{ out . escapeJavaStyleString ( out , STRING_CONSTANT ) ; }
Code	{ out . escapeJavaStyleString ( out , STRING_CONSTANT ) ; }
Distance : 7

86
Tree	{ str . escapeJavaStyleString ( false ) ; }
Code	{ str . escapeJavaStyleString ( false ) ; }
Distance : 8

87
Tree	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , str ) ; }
Code	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , str ) ; }
Distance : 9

88
Tree	{ this . out . escapeJavaStyleString ( out ) ; }
Code	{ this . out . escapeJavaStyleString ( out ) ; }
Distance : 8

89
Tree	{ out . escapeJavaStyleString ( new StringIndexOutOfBoundsException ( str , out ) ) ; }
Code	{ out . escapeJavaStyleString ( new StringIndexOutOfBoundsException ( str , out ) ) ; }
Distance : 8

90
Tree	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( out , out ) ; }
Code	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( out , out ) ; }
Distance : 9

91
Tree	{ str . escapeJavaStyleString ( str , out , this ) ; }
Code	{ str . escapeJavaStyleString ( str , out , this ) ; }
Distance : 6

92
Tree	{ str . escapeJavaStyleString ( str , out ) ; }
Code	{ str . escapeJavaStyleString ( str , out ) ; }
Distance : 7

93
Tree	{ out . escapeJavaStyleString ( false ) ; }
Code	{ out . escapeJavaStyleString ( false ) ; }
Distance : 8

94
Tree	{ out . escapeJavaStyleString ( out , out , str , this ) ; }
Code	{ out . escapeJavaStyleString ( out , out , str , this ) ; }
Distance : 5

95
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT , str ) ; }
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT , str ) ; }
Distance : 4

96
Tree	{ escapeJavaStyleString ( escapeJavaStyleString ( out ) , escapeJavaStyleString ( str ) ) ; }
Code	{ escapeJavaStyleString ( escapeJavaStyleString ( out ) , escapeJavaStyleString ( str ) ) ; }
Distance : 8

97
Tree	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( out ) ) ; }
Code	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( out ) ) ; }
Distance : 7

98
Tree	{ escapeJavaStyleString ( str , out ) ; }
Code	{ escapeJavaStyleString ( str , out ) ; }
Distance : 5

99
Tree	{ str . escapeJavaStyleString ( this , out ) ; }
Code	{ str . escapeJavaStyleString ( this , out ) ; }
Distance : 8

100
Tree	{ out . escapeJavaStyleString ( str , out , this ) ; }
Code	{ out . escapeJavaStyleString ( str , out , this ) ; }
Distance : 6

101
Tree	{ escapeJavaStyleString ( out , out , str ) ; }
Code	{ escapeJavaStyleString ( out , out , str ) ; }
Distance : 4

102
Tree	{ escapeJavaStyleString ( out , out , out , false ) ; }
Code	{ escapeJavaStyleString ( out , out , out , false ) ; }
Distance : 3

103
Tree	{ escapeJavaStyleString ( out , out , false ) ; }
Code	{ escapeJavaStyleString ( out , out , false ) ; }
Distance : 4

104
Tree	{ out . this . escapeJavaStyleString ( out , out , str ) ; }
Code	{ out . this . escapeJavaStyleString ( out , out , str ) ; }
Distance : 8

105
Tree	{ escapeJavaStyleString ( str , str ) ; }
Code	{ escapeJavaStyleString ( str , str ) ; }
Distance : 5

106
Tree	{ out . escapeJavaStyleString ( null , out , out , out ) ; }
Code	{ out . escapeJavaStyleString ( null , out , out , out ) ; }
Distance : 6

107
Tree	{ escapeJavaStyleString ( out , out , str . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( out , out , str . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Distance : 8

108
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } pattern
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } pattern
Distance : 6

109
Tree	{ out . escapeJavaStyleString ( this , str , out ) ; }
Code	{ out . escapeJavaStyleString ( this , str , out ) ; }
Distance : 6

110
Tree	{ out . escapeJavaStyleString ( this , out ) ; }
Code	{ out . escapeJavaStyleString ( this , out ) ; }
Distance : 7

111
Tree	{ out . str ( str , out ) ; }
Code	{ out . str ( str , out ) ; }
Distance : 6

112
Tree	{ str . escapeJavaStyleString ( str , STRING_CONSTANT ) ; }
Code	{ str . escapeJavaStyleString ( str , STRING_CONSTANT ) ; }
Distance : 7

113
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 11

114
Tree	{ out . this . escapeJavaStyleString ( str , out , out ) ; }
Code	{ out . this . escapeJavaStyleString ( str , out , out ) ; }
Distance : 8

115
Tree	{ escapeJavaStyleString ( str , out , true ) ; }
Code	{ escapeJavaStyleString ( str , out , true ) ; }
Distance : 3

116
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Distance : 7

117
Tree	{ out . escapeJavaStyleString ( str . escapeJavaStyleString ( out ) ) ; }
Code	{ out . escapeJavaStyleString ( str . escapeJavaStyleString ( out ) ) ; }
Distance : 9

118
Tree	{ out . escapeJavaStyleString ( out , null , out ) ; }
Code	{ out . escapeJavaStyleString ( out , null , out ) ; }
Distance : 6

119
Tree	{ escapeJavaStyleString ( str , out , str ) ; }
Code	{ escapeJavaStyleString ( str , out , str ) ; }
Distance : 4

120
Tree	{ escapeJavaStyleString ( str , STRING_CONSTANT , out ) ; }
Code	{ escapeJavaStyleString ( str , STRING_CONSTANT , out ) ; }
Distance : 4

121
Tree	{ escapeJavaStyleString ( out , out , out , out ) ; }
Code	{ escapeJavaStyleString ( out , out , out , out ) ; }
Distance : 3

122
Tree	{ this . str . escapeJavaStyleString ( out ) ; }
Code	{ this . str . escapeJavaStyleString ( out ) ; }
Distance : 8

123
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Distance : 11

124
Tree	{ out . escapeJavaStyleString ( str ? Integer.MAX_VALUE : DateUtils.MILLIS_PER_HOUR ) ; }
Code	{ out . escapeJavaStyleString ( str ? Integer.MAX_VALUE : DateUtils.MILLIS_PER_HOUR ) ; }
Distance : 8

125
Tree	{ out . escapeJavaStyleString ( str , true ) ; }
Code	{ out . escapeJavaStyleString ( str , true ) ; }
Distance : 6

126
Tree	{ out . escapeJavaStyleString ( str , new Date ( str ) ) ; }
Code	{ out . escapeJavaStyleString ( str , new Date ( str ) ) ; }
Distance : 8

127
Tree	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; }
Code	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; }
Distance : 9

128
Tree	{ EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str , out ) ; }
Code	{ EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str , out ) ; }
Distance : 7

129
Tree	{ out . escapeJavaStyleString ( new ExceptionWithoutCause ( str , out ) ) ; }
Code	{ out . escapeJavaStyleString ( new ExceptionWithoutCause ( str , out ) ) ; }
Distance : 8

130
Tree	{ out . escapeJavaStyleString ( new IllegalArgumentException ( str , out ) ) ; }
Code	{ out . escapeJavaStyleString ( new IllegalArgumentException ( str , out ) ) ; }
Distance : 8

131
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , str ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , str ) ; }
Distance : 4

132
Tree	{ out . escapeJavaStyleString ( str ? Integer.MAX_VALUE : Boolean.TRUE ) ; }
Code	{ out . escapeJavaStyleString ( str ? Integer.MAX_VALUE : Boolean.TRUE ) ; }
Distance : 8

133
Tree	{ this . escapeJavaStyleString ( str ? Integer.MAX_VALUE : Boolean.TRUE ) ; }
Code	{ this . escapeJavaStyleString ( str ? Integer.MAX_VALUE : Boolean.TRUE ) ; }
Distance : 8

134
Tree	{ out . escapeJavaStyleString ( out ) ; }
Code	{ out . escapeJavaStyleString ( out ) ; }
Distance : 8

135
Tree	{ escapeJavaStyleString ( out , out , out , str ) ; }
Code	{ escapeJavaStyleString ( out , out , out , str ) ; }
Distance : 3

136
Tree	{ out . escapeJavaStyleString ( out , out , this ) ; }
Code	{ out . escapeJavaStyleString ( out , out , this ) ; }
Distance : 6

137
Tree	{ out . escapeJavaStyleString ( str , new IllegalArgumentException ( str ) ) ; }
Code	{ out . escapeJavaStyleString ( str , new IllegalArgumentException ( str ) ) ; }
Distance : 8

138
Tree	{ escapeJavaStyleString ( str , null , out ) ; }
Code	{ escapeJavaStyleString ( str , null , out ) ; }
Distance : 4

139
Tree	{ out . this . escapeJavaStyleString ( str , out , str ) ; }
Code	{ out . this . escapeJavaStyleString ( str , out , str ) ; }
Distance : 8

140
Tree	{ out . escapeJavaStyleString ( this . out , out , out , out ) ; }
Code	{ out . escapeJavaStyleString ( this . out , out , out , out ) ; }
Distance : 7

141
Tree	{ out . escapeJavaStyleString ( new Date ( str , out ) ) ; }
Code	{ out . escapeJavaStyleString ( new Date ( str , out ) ) ; }
Distance : 8

142
Tree	{ escapeJavaStyleString ( out , out , str , out ) ; }
Code	{ escapeJavaStyleString ( out , out , str , out ) ; }
Distance : 3

143
Tree	{ escapeJavaStyleString ( out , out , TimeUnit.MILLISECONDS ) ; }
Code	{ escapeJavaStyleString ( out , out , TimeUnit.MILLISECONDS ) ; }
Distance : 4

144
Tree	{ this . escapeJavaStyleString ( str ? DateUtils.MILLIS_PER_HOUR : Boolean.TRUE ) ; }
Code	{ this . escapeJavaStyleString ( str ? DateUtils.MILLIS_PER_HOUR : Boolean.TRUE ) ; }
Distance : 8

145
Tree	{ escapeJavaStyleString ( out , out , false ) ; }
Code	{ escapeJavaStyleString ( out , out , false ) ; }
Distance : 4

146
Tree	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( str ) ) ; }
Code	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( str ) ) ; }
Distance : 7

147
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; }
Distance : 5

148
Tree	{ str . escapeJavaStyleString ( true ) ; }
Code	{ str . escapeJavaStyleString ( true ) ; }
Distance : 7

149
Tree	{ out . escapeJavaStyleString ( str , out , out , this ) ; }
Code	{ out . escapeJavaStyleString ( str , out , out , this ) ; }
Distance : 6

150
Tree	{ out . escapeJavaStyleString ( str ) ; }
Code	{ out . escapeJavaStyleString ( str ) ; }
Distance : 8

151
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Distance : 7

152
Tree	{ out . escapeJavaStyleString ( str , str , this ) ; }
Code	{ out . escapeJavaStyleString ( str , str , this ) ; }
Distance : 6

153
Tree	{ escapeJavaStyleString ( out , null , str ) ; }
Code	{ escapeJavaStyleString ( out , null , str ) ; }
Distance : 4

154
Tree	{ escapeJavaStyleString ( str , out , out , true ) ; }
Code	{ escapeJavaStyleString ( str , out , out , true ) ; }
Distance : 3

155
Tree	{ out . escapeJavaStyleString ( str , false ) ; }
Code	{ out . escapeJavaStyleString ( str , false ) ; }
Distance : 7

156
Tree	{ escapeJavaStyleString ( str , out , true ) ; }
Code	{ escapeJavaStyleString ( str , out , true ) ; }
Distance : 3

157
Tree	{ str () . escapeJavaStyleString ( str , out ) ; }
Code	{ str () . escapeJavaStyleString ( str , out ) ; }
Distance : 8

158
Tree	{ escapeJavaStyleString ( out , out , out . escapeJavaStyleString ( out ) , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( out , out , out . escapeJavaStyleString ( out ) , STRING_CONSTANT ) ; }
Distance : 8

159
Tree	{ escapeJavaStyleString ( str , STRING_CONSTANT , str ) ; }
Code	{ escapeJavaStyleString ( str , STRING_CONSTANT , str ) ; }
Distance : 4

160
Tree	{ str . escapeJavaStyleString ( out , STRING_CONSTANT ) ; }
Code	{ str . escapeJavaStyleString ( out , STRING_CONSTANT ) ; }
Distance : 7

161
Tree	{ escapeJavaStyleString ( str , out . escapeJavaStyleString ( str ) , null ) ; }
Code	{ escapeJavaStyleString ( str , out . escapeJavaStyleString ( str ) , null ) ; }
Distance : 8

162
Tree	{ escapeJavaStyleString ( out , out , true ) ; }
Code	{ escapeJavaStyleString ( out , out , true ) ; }
Distance : 3

163
Tree	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( str ) , null ) ; }
Code	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( str ) , null ) ; }
Distance : 7

164
Tree	{ out () . escapeJavaStyleString ( out , out ) ; }
Code	{ out () . escapeJavaStyleString ( out , out ) ; }
Distance : 8

165
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 9

166
Tree	{ escapeJavaStyleString ( str , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( str , STRING_CONSTANT ) ; }
Distance : 5

167
Tree	{ out () . escapeJavaStyleString ( str , str ) ; }
Code	{ out () . escapeJavaStyleString ( str , str ) ; }
Distance : 8

168
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Distance : 11

169
Tree	{ out . escapeJavaStyleString ( str , out , str , this ) ; }
Code	{ out . escapeJavaStyleString ( str , out , str , this ) ; }
Distance : 6

170
Tree	{ escapeJavaStyleString ( out , out , out , true ) ; }
Code	{ escapeJavaStyleString ( out , out , out , true ) ; }
Distance : 2

171
Tree	{ escapeJavaStyleString ( out , super(); ) ; }
Code	{ escapeJavaStyleString ( out , super(); ) ; }
Distance : 5

172
Tree	{ escapeJavaStyleString ( ( str ) str , out ) ; }
Code	{ escapeJavaStyleString ( ( str ) str , out ) ; }
Distance : 5

173
Tree	{ out . escapeJavaStyleString ( true ) ; }
Code	{ out . escapeJavaStyleString ( true ) ; }
Distance : 7

174
Tree	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( str ) , return; ) ; }
Code	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( str ) , return; ) ; }
Distance : 7

175
Tree	{ escapeJavaStyleString ( str , out , false ) ; }
Code	{ escapeJavaStyleString ( str , out , false ) ; }
Distance : 4

176
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Distance : 9

177
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 11

178
Tree	{ out . escapeJavaStyleString ( this , out , out ) ; }
Code	{ out . escapeJavaStyleString ( this , out , out ) ; }
Distance : 7

179
Tree	{ escapeJavaStyleString ( str , null ) ; }
Code	{ escapeJavaStyleString ( str , null ) ; }
Distance : 5

180
Tree	{ escapeJavaStyleString ( ( out ) out , out ) ; }
Code	{ escapeJavaStyleString ( ( out ) out , out ) ; }
Distance : 6

181
Tree	{ EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString ( out , out ) ; }
Code	{ EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString ( out , out ) ; }
Distance : 7

182
Tree	{ escapeJavaStyleString ( out , return; ) ; }
Code	{ escapeJavaStyleString ( out , return; ) ; }
Distance : 5

183
Tree	{ out . escapeJavaStyleString ( out , out ) ; }
Code	{ out . escapeJavaStyleString ( out , out ) ; }
Distance : 7

========================================================================


========================================================================
Example Number: 7
Parent Code is: 
{ return escapeJavaStyleString ( str , true ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return escapeJavaStyleString ( str , true , true ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=str}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=str}) (234{val=,}) (9{val=true}) (234{val=,}) (9{val=true}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/46/parent/src_java_org_apache_commons_lang_StringEscapeUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 84
Wrong
========================================================================
False

0
Tree	{ this . str = str ; for }
Code	{ this . str = str ; for }
Distance : 9

1
Tree	{ this . str = str ; if }
Code	{ this . str = str ; if }
Distance : 9

2
Tree	{ this ( str , str , str , super(); ) ; }
Code	{ this ( str , str , str , super(); ) ; }
Distance : 6

3
Tree	{ return escapeJavaStyleString ( str , continue; ) ; }
Code	{ return escapeJavaStyleString ( str , continue; ) ; }
Distance : 3

4
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; }
Code	{ super . escapeJavaStyleString ( str ) ; return str ; }
Distance : 7

5
Tree	{ return str . escapeJavaStyleString ( str , null , null ) ; }
Code	{ return str . escapeJavaStyleString ( str , null , null ) ; }
Distance : 4

6
Tree	{ return getFragment . escapeJavaStyleString ( str ) ; }
Code	{ return getFragment . escapeJavaStyleString ( str ) ; }
Distance : 6

7
Tree	{ super . escapeJavaStyleString ( str ) ; return true ; }
Code	{ super . escapeJavaStyleString ( str ) ; return true ; }
Distance : 6

8
Tree	{ escapeJavaStyleString ( str ) ; {} }
Code	{ escapeJavaStyleString ( str ) ; {} }
Distance : 6

9
Tree	{ return EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString ( str ) ; }
Code	{ return EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString ( str ) ; }
Distance : 6

10
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; }
Code	{ super . escapeJavaStyleString ( str ) ; return false ; }
Distance : 7

11
Tree	{ this ( str , str , str , null ) ; }
Code	{ this ( str , str , str , null ) ; }
Distance : 6

12
Tree	{ return escapeJavaStyleString ( str , EscapeUtils.ESCAPE_ECMASCRIPT ) ; }
Code	{ return escapeJavaStyleString ( str , EscapeUtils.ESCAPE_ECMASCRIPT ) ; }
Distance : 3

13
Tree	{ return escapeJavaStyleString ( str , Float.MIN_VALUE ) ; }
Code	{ return escapeJavaStyleString ( str , Float.MIN_VALUE ) ; }
Distance : 3

14
Tree	{ this . str = str ; catch }
Code	{ this . str = str ; catch }
Distance : 9

15
Tree	{ this . str = str ; {} }
Code	{ this . str = str ; {} }
Distance : 9

16
Tree	{ super . escapeJavaStyleString ( str ) ; return null ; }
Code	{ super . escapeJavaStyleString ( str ) ; return null ; }
Distance : 7

17
Tree	{ return escapeJavaStyleString ( str , true ) ; } CharSequence
Code	{ return escapeJavaStyleString ( str , true ) ; } CharSequence
Distance : 3

18
Tree	{ this ( str , str , str , continue; ) ; }
Code	{ this ( str , str , str , continue; ) ; }
Distance : 6

19
Tree	{ return this . escapeJavaStyleString ( str ) ; } [
Code	{ return this . escapeJavaStyleString ( str ) ; } [
Distance : 7

20
Tree	{ return this . escapeJavaStyleString ( str ) ; } Date
Code	{ return this . escapeJavaStyleString ( str ) ; } Date
Distance : 7

21
Tree	{ return this . escapeJavaStyleString ( str ) ; } buffer
Code	{ return this . escapeJavaStyleString ( str ) ; } buffer
Distance : 7

22
Tree	{ return escapeJavaStyleString ( this , str ) ; } Date
Code	{ return escapeJavaStyleString ( this , str ) ; } Date
Distance : 5

23
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } buffer
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } buffer
Distance : 5

24
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } [
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } [
Distance : 5

25
Tree	{ return escapeJavaStyleString ( str , null ) ; }
Code	{ return escapeJavaStyleString ( str , null ) ; }
Distance : 3

26
Tree	{ escapeJavaStyleString ( str ) ; return true ; }
Code	{ escapeJavaStyleString ( str ) ; return true ; }
Distance : 5

27
Tree	{ return escapeJavaStyleString ( trim , null ) ; }
Code	{ return escapeJavaStyleString ( trim , null ) ; }
Distance : 4

28
Tree	{ return escapeJavaStyleString ( <= , null ) ; }
Code	{ return escapeJavaStyleString ( <= , null ) ; }
Distance : 4

29
Tree	{ return escapeJavaStyleString ( str , super(); ) ; }
Code	{ return escapeJavaStyleString ( str , super(); ) ; }
Distance : 3

30
Tree	{ return sb.buffer.length . escapeJavaStyleString ( str ) ; }
Code	{ return sb.buffer.length . escapeJavaStyleString ( str ) ; }
Distance : 6

31
Tree	{ return escapeJavaStyleString ( str , str , TimeUnit.DAYS ) ; }
Code	{ return escapeJavaStyleString ( str , str , TimeUnit.DAYS ) ; }
Distance : 2

32
Tree	{ return UnescapeUtils.UNESCAPE_ECMASCRIPT . escapeJavaStyleString ( str ) ; }
Code	{ return UnescapeUtils.UNESCAPE_ECMASCRIPT . escapeJavaStyleString ( str ) ; }
Distance : 6

33
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } Date
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } Date
Distance : 5

34
Tree	{ return escapeJavaStyleString ( str , str , TimeUnit.MILLISECONDS ) ; }
Code	{ return escapeJavaStyleString ( str , str , TimeUnit.MILLISECONDS ) ; }
Distance : 2

35
Tree	{ return escapeJavaStyleString ( str , null , null , str ) ; }
Code	{ return escapeJavaStyleString ( str , null , null , str ) ; }
Distance : 4

36
Tree	{ return escapeJavaStyleString ( str , str , str , str , return; ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , return; ) ; }
Distance : 6

37
Tree	{ return escapeJavaStyleString ( str , str , str , str , continue; ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , continue; ) ; }
Distance : 6

38
Tree	{ return escapeJavaStyleString ( str , str , Integer.MAX_VALUE ) ; }
Code	{ return escapeJavaStyleString ( str , str , Integer.MAX_VALUE ) ; }
Distance : 2

39
Tree	{ return escapeJavaStyleString ( str , true ) ; }
Code	{ return escapeJavaStyleString ( str , true ) ; }
Distance : 2

40
Tree	{ return escapeJavaStyleString ( str , true ) ; } pattern
Code	{ return escapeJavaStyleString ( str , true ) ; } pattern
Distance : 3

41
Tree	{ return escapeJavaStyleString ( str , Integer.MAX_VALUE ) ; }
Code	{ return escapeJavaStyleString ( str , Integer.MAX_VALUE ) ; }
Distance : 3

42
Tree	{ return escapeJavaStyleString ( str , sb.buffer.length ) ; }
Code	{ return escapeJavaStyleString ( str , sb.buffer.length ) ; }
Distance : 3

43
Tree	{ return str . escapeJavaStyleString ( str , return; , null ) ; }
Code	{ return str . escapeJavaStyleString ( str , return; , null ) ; }
Distance : 4

44
Tree	{ return escapeJavaStyleString ( str , super(); , null , str ) ; }
Code	{ return escapeJavaStyleString ( str , super(); , null , str ) ; }
Distance : 4

45
Tree	{ escapeJavaStyleString ( str ) ; return false ; }
Code	{ escapeJavaStyleString ( str ) ; return false ; }
Distance : 6

46
Tree	{ return escapeJavaStyleString ( str , return; ) ; }
Code	{ return escapeJavaStyleString ( str , return; ) ; }
Distance : 3

47
Tree	{ this ( str , str , str , return; ) ; }
Code	{ this ( str , str , str , return; ) ; }
Distance : 6

48
Tree	{ return escapeJavaStyleString ( str , str , str , str , null ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , null ) ; }
Distance : 6

49
Tree	{ return escapeJavaStyleString ( str , str , StringUtils.EMPTY ) ; }
Code	{ return escapeJavaStyleString ( str , str , StringUtils.EMPTY ) ; }
Distance : 2

50
Tree	{ return escapeJavaStyleString ( str , return; , null , str ) ; }
Code	{ return escapeJavaStyleString ( str , return; , null , str ) ; }
Distance : 4

51
Tree	{ super . escapeJavaStyleString ( str ) ; return return; ; }
Code	{ super . escapeJavaStyleString ( str ) ; return return; ; }
Distance : 7

52
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } buffer
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } buffer
Distance : 8

53
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } [
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } [
Distance : 8

54
Tree	{ return escapeJavaStyleString ( this , str ) ; } buffer
Code	{ return escapeJavaStyleString ( this , str ) ; } buffer
Distance : 5

55
Tree	{ return escapeJavaStyleString ( this , str ) ; } [
Code	{ return escapeJavaStyleString ( this , str ) ; } [
Distance : 5

56
Tree	{ super . escapeJavaStyleString ( str ) ; return super(); ; }
Code	{ super . escapeJavaStyleString ( str ) ; return super(); ; }
Distance : 7

57
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } pattern
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } pattern
Distance : 8

58
Tree	{ return escapeJavaStyleString ( str , null , super(); , str ) ; }
Code	{ return escapeJavaStyleString ( str , null , super(); , str ) ; }
Distance : 4

59
Tree	{ super . escapeJavaStyleString ( str ) ; return continue; ; }
Code	{ super . escapeJavaStyleString ( str ) ; return continue; ; }
Distance : 7

60
Tree	{ return escapeJavaStyleString ( this , str ) ; }
Code	{ return escapeJavaStyleString ( this , str ) ; }
Distance : 4

61
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } CharSequence
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } CharSequence
Distance : 8

62
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } Date
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } Date
Distance : 8

63
Tree	{ return escapeJavaStyleString ( str , null ) ; }
Code	{ return escapeJavaStyleString ( str , null ) ; }
Distance : 3

64
Tree	{ return str . escapeJavaStyleString ( str , continue; , null ) ; }
Code	{ return str . escapeJavaStyleString ( str , continue; , null ) ; }
Distance : 4

65
Tree	{ return escapeJavaStyleString ( str , true ) ; } CharSequence
Code	{ return escapeJavaStyleString ( str , true ) ; } CharSequence
Distance : 3

66
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; }
Distance : 4

67
Tree	{ return escapeJavaStyleString ( StringUtils.EMPTY , null ) ; }
Code	{ return escapeJavaStyleString ( StringUtils.EMPTY , null ) ; }
Distance : 4

68
Tree	{ escapeJavaStyleString ( str ) ; if }
Code	{ escapeJavaStyleString ( str ) ; if }
Distance : 6

69
Tree	{ return escapeJavaStyleString ( str , false ) ; }
Code	{ return escapeJavaStyleString ( str , false ) ; }
Distance : 3

70
Tree	{ escapeJavaStyleString ( str ) ; for }
Code	{ escapeJavaStyleString ( str ) ; for }
Distance : 6

71
Tree	{ escapeJavaStyleString ( str ) ; assertArrayEquals }
Code	{ escapeJavaStyleString ( str ) ; assertArrayEquals }
Distance : 6

72
Tree	{ return super . escapeJavaStyleString ( str , str , str , new endPos ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new endPos ( str ) ) ; }
Distance : 10

73
Tree	{ return this . escapeJavaStyleString ( str ) ; }
Code	{ return this . escapeJavaStyleString ( str ) ; }
Distance : 6

74
Tree	{ return escapeJavaStyleString ( str , false ) ; }
Code	{ return escapeJavaStyleString ( str , false ) ; }
Distance : 3

75
Tree	{ return escapeJavaStyleString ( str , true ) ; }
Code	{ return escapeJavaStyleString ( str , true ) ; }
Distance : 2

76
Tree	{ return str . escapeJavaStyleString ( str , super(); , null ) ; }
Code	{ return str . escapeJavaStyleString ( str , super(); , null ) ; }
Distance : 4

77
Tree	{ escapeJavaStyleString ( str ) ; return true ; } pattern
Code	{ escapeJavaStyleString ( str ) ; return true ; } pattern
Distance : 6

78
Tree	{ escapeJavaStyleString ( str ) ; return true ; } CharSequence
Code	{ escapeJavaStyleString ( str ) ; return true ; } CharSequence
Distance : 6

79
Tree	{ return escapeJavaStyleString ( str , true ) ; } pattern
Code	{ return escapeJavaStyleString ( str , true ) ; } pattern
Distance : 3

80
Tree	{ return super . escapeJavaStyleString ( str , str , str , new Type ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new Type ( str ) ) ; }
Distance : 10

81
Tree	{ return super . escapeJavaStyleString ( str , str , str , new Date ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new Date ( str ) ) ; }
Distance : 10

82
Tree	{ return super . escapeJavaStyleString ( str , str , str , new offset ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new offset ( str ) ) ; }
Distance : 10

83
Tree	{ return escapeJavaStyleString ( str , str , str , str , super(); ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , super(); ) ; }
Distance : 6

========================================================================


========================================================================
Example Number: 8
Parent Code is: 
{ escapeJavaStyleString ( out , str , false ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ escapeJavaStyleString ( out , str , false , false ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=out}) (234{val=,}) (800{val=str}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=out}) (234{val=,}) (800{val=str}) (234{val=,}) (9{val=false}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/46/parent/src_java_org_apache_commons_lang_StringEscapeUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 184
Wrong
========================================================================
False

0
Tree	{ out . out ( str , out ) ; }
Code	{ out . out ( str , out ) ; }
Distance : 6

1
Tree	{ out . out ( str , new Object ( str ) ) ; }
Code	{ out . out ( str , new Object ( str ) ) ; }
Distance : 8

2
Tree	{ escapeJavaStyleString ( out , out , CharUtils.NUL ) ; }
Code	{ escapeJavaStyleString ( out , out , CharUtils.NUL ) ; }
Distance : 4

3
Tree	{ out . out ( str , new Double ( str ) ) ; }
Code	{ out . out ( str , new Double ( str ) ) ; }
Distance : 8

4
Tree	{ out . out ( str , new Class ( str ) ) ; }
Code	{ out . out ( str , new Class ( str ) ) ; }
Distance : 8

5
Tree	{ out . escapeJavaStyleString ( str ) ; }
Code	{ out . escapeJavaStyleString ( str ) ; }
Distance : 8

6
Tree	{ EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str , out ) ; }
Code	{ EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str , out ) ; }
Distance : 7

7
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; }
Distance : 6

8
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 7

9
Tree	{ escapeJavaStyleString ( out , str , false ) ; }
Code	{ escapeJavaStyleString ( out , str , false ) ; }
Distance : 2

10
Tree	{ out . escapeJavaStyleString ( out , STRING_CONSTANT ) ; }
Code	{ out . escapeJavaStyleString ( out , STRING_CONSTANT ) ; }
Distance : 7

11
Tree	{ out . escapeJavaStyleString ( out ) ; }
Code	{ out . escapeJavaStyleString ( out ) ; }
Distance : 8

12
Tree	{ out () . escapeJavaStyleString ( str , str ) ; }
Code	{ out () . escapeJavaStyleString ( str , str ) ; }
Distance : 8

13
Tree	{ out . this . escapeJavaStyleString ( out , out , out ) ; }
Code	{ out . this . escapeJavaStyleString ( out , out , out ) ; }
Distance : 8

14
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , str ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , str ) ; }
Distance : 5

15
Tree	{ escapeJavaStyleString ( str , STRING_CONSTANT , str ) ; }
Code	{ escapeJavaStyleString ( str , STRING_CONSTANT , str ) ; }
Distance : 4

16
Tree	{ escapeJavaStyleString ( out , out , str . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( out , out , str . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Distance : 8

17
Tree	{ this . escapeJavaStyleString ( str ? trim : Boolean.TRUE ) ; }
Code	{ this . escapeJavaStyleString ( str ? trim : Boolean.TRUE ) ; }
Distance : 8

18
Tree	{ out . escapeJavaStyleString ( this , out , str ) ; }
Code	{ out . escapeJavaStyleString ( this , out , str ) ; }
Distance : 7

19
Tree	{ out . escapeJavaStyleString ( this , str , str ) ; }
Code	{ out . escapeJavaStyleString ( this , str , str ) ; }
Distance : 6

20
Tree	{ out . out ( str , new false ( str ) ) ; }
Code	{ out . out ( str , new false ( str ) ) ; }
Distance : 7

21
Tree	{ escapeJavaStyleString ( out , out , out ) ; }
Code	{ escapeJavaStyleString ( out , out , out ) ; }
Distance : 4

22
Tree	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( out ) ) ; }
Code	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( out ) ) ; }
Distance : 7

23
Tree	{ escapeJavaStyleString ( str , out , out , out ) ; }
Code	{ escapeJavaStyleString ( str , out , out , out ) ; }
Distance : 4

24
Tree	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; }
Code	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; }
Distance : 9

25
Tree	{ out . escapeJavaStyleString ( str , out ) ; }
Code	{ out . escapeJavaStyleString ( str , out ) ; }
Distance : 7

26
Tree	{ out . escapeJavaStyleString ( FastDateParser.JAPANESE_IMPERIAL , out ? Boolean.FALSE : Boolean.TRUE ) ; }
Code	{ out . escapeJavaStyleString ( FastDateParser.JAPANESE_IMPERIAL , out ? Boolean.FALSE : Boolean.TRUE ) ; }
Distance : 8

27
Tree	{ out . out ( out , out ) ; }
Code	{ out . out ( out , out ) ; }
Distance : 7

28
Tree	{ out . escapeJavaStyleString ( this , str , out ) ; }
Code	{ out . escapeJavaStyleString ( this , str , out ) ; }
Distance : 6

29
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Distance : 9

30
Tree	{ out . escapeJavaStyleString ( false ) ; }
Code	{ out . escapeJavaStyleString ( false ) ; }
Distance : 7

31
Tree	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( out ) , null ) ; }
Code	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( out ) , null ) ; }
Distance : 7

32
Tree	{ out . escapeJavaStyleString ( str , super(); , out ) ; }
Code	{ out . escapeJavaStyleString ( str , super(); , out ) ; }
Distance : 6

33
Tree	{ escapeJavaStyleString ( out , super(); , out ) ; }
Code	{ escapeJavaStyleString ( out , super(); , out ) ; }
Distance : 4

34
Tree	{ escapeJavaStyleString ( escapeJavaStyleString ( out ) , escapeJavaStyleString ( out ) ) ; }
Code	{ escapeJavaStyleString ( escapeJavaStyleString ( out ) , escapeJavaStyleString ( out ) ) ; }
Distance : 8

35
Tree	{ escapeJavaStyleString ( out , out ) ; }
Code	{ escapeJavaStyleString ( out , out ) ; }
Distance : 5

36
Tree	{ escapeJavaStyleString ( out , null ) ; }
Code	{ escapeJavaStyleString ( out , null ) ; }
Distance : 5

37
Tree	{ escapeJavaStyleString ( out , out , out , out ) ; }
Code	{ escapeJavaStyleString ( out , out , out , out ) ; }
Distance : 3

38
Tree	{ escapeJavaStyleString ( out , out , str , out ) ; }
Code	{ escapeJavaStyleString ( out , out , str , out ) ; }
Distance : 3

39
Tree	{ this . escapeJavaStyleString ( str ? CharUtils.NUL : Boolean.TRUE ) ; }
Code	{ this . escapeJavaStyleString ( str ? CharUtils.NUL : Boolean.TRUE ) ; }
Distance : 8

40
Tree	{ out . escapeJavaStyleString ( null , out , str , str ) ; }
Code	{ out . escapeJavaStyleString ( null , out , str , str ) ; }
Distance : 6

41
Tree	{ out . escapeJavaStyleString ( str , null , str ) ; }
Code	{ out . escapeJavaStyleString ( str , null , str ) ; }
Distance : 6

42
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } pattern
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } pattern
Distance : 7

43
Tree	{ str . escapeJavaStyleString ( str ) ; }
Code	{ str . escapeJavaStyleString ( str ) ; }
Distance : 8

44
Tree	{ out . escapeJavaStyleString ( out , out , str , this ) ; }
Code	{ out . escapeJavaStyleString ( out , out , str , this ) ; }
Distance : 5

45
Tree	{ out . escapeJavaStyleString ( str . escapeJavaStyleString ( str ) ) ; }
Code	{ out . escapeJavaStyleString ( str . escapeJavaStyleString ( str ) ) ; }
Distance : 9

46
Tree	{ str . escapeJavaStyleString ( out ) ; }
Code	{ str . escapeJavaStyleString ( out ) ; }
Distance : 8

47
Tree	{ escapeJavaStyleString ( str , STRING_CONSTANT , out ) ; }
Code	{ escapeJavaStyleString ( str , STRING_CONSTANT , out ) ; }
Distance : 4

48
Tree	{ this . out . escapeJavaStyleString ( str ) ; }
Code	{ this . out . escapeJavaStyleString ( str ) ; }
Distance : 8

49
Tree	{ out . escapeJavaStyleString ( out , out , out , this ) ; }
Code	{ out . escapeJavaStyleString ( out , out , out , this ) ; }
Distance : 5

50
Tree	{ out . escapeJavaStyleString ( this . str , out , out , out ) ; }
Code	{ out . escapeJavaStyleString ( this . str , out , out , out ) ; }
Distance : 8

51
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } CharSequence
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } CharSequence
Distance : 6

52
Tree	{ escapeJavaStyleString ( out , out , Void.TYPE ) ; }
Code	{ escapeJavaStyleString ( out , out , Void.TYPE ) ; }
Distance : 4

53
Tree	{ out () . escapeJavaStyleString ( out , out ) ; }
Code	{ out () . escapeJavaStyleString ( out , out ) ; }
Distance : 8

54
Tree	{ out . escapeJavaStyleString ( str ? trim : Boolean.TRUE ) ; }
Code	{ out . escapeJavaStyleString ( str ? trim : Boolean.TRUE ) ; }
Distance : 8

55
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 9

56
Tree	{ escapeJavaStyleString ( out , out , out , false ) ; }
Code	{ escapeJavaStyleString ( out , out , out , false ) ; }
Distance : 2

57
Tree	{ escapeJavaStyleString ( out , str ) ; }
Code	{ escapeJavaStyleString ( out , str ) ; }
Distance : 4

58
Tree	{ out . str ( str , out ) ; }
Code	{ out . str ( str , out ) ; }
Distance : 6

59
Tree	{ out . escapeJavaStyleString ( out , false ) ; }
Code	{ out . escapeJavaStyleString ( out , false ) ; }
Distance : 6

60
Tree	{ escapeJavaStyleString ( str , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( str , STRING_CONSTANT ) ; }
Distance : 5

61
Tree	{ str . escapeJavaStyleString ( true ) ; }
Code	{ str . escapeJavaStyleString ( true ) ; }
Distance : 8

62
Tree	{ escapeJavaStyleString ( str , out ) ; }
Code	{ escapeJavaStyleString ( str , out ) ; }
Distance : 5

63
Tree	{ escapeJavaStyleString ( out , out , false ) ; }
Code	{ escapeJavaStyleString ( out , out , false ) ; }
Distance : 3

64
Tree	{ out . escapeJavaStyleString ( ( str ) return; ) ; }
Code	{ out . escapeJavaStyleString ( ( str ) return; ) ; }
Distance : 8

65
Tree	{ escapeJavaStyleString ( str , out , false ) ; }
Code	{ escapeJavaStyleString ( str , out , false ) ; }
Distance : 3

66
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 9

67
Tree	{ escapeJavaStyleString ( out , out , out . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( out , out , out . escapeJavaStyleString ( str ) , STRING_CONSTANT ) ; }
Distance : 8

68
Tree	{ out . escapeJavaStyleString ( str ? CharUtils.NUL : Boolean.TRUE ) ; }
Code	{ out . escapeJavaStyleString ( str ? CharUtils.NUL : Boolean.TRUE ) ; }
Distance : 8

69
Tree	{ out . escapeJavaStyleString ( str , STRING_CONSTANT ) ; }
Code	{ out . escapeJavaStyleString ( str , STRING_CONSTANT ) ; }
Distance : 7

70
Tree	{ out . escapeJavaStyleString ( str , new Class ( str ) ) ; }
Code	{ out . escapeJavaStyleString ( str , new Class ( str ) ) ; }
Distance : 8

71
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( out , str ) ; }
Distance : 7

72
Tree	{ out . escapeJavaStyleString ( str , new Object ( str ) ) ; }
Code	{ out . escapeJavaStyleString ( str , new Object ( str ) ) ; }
Distance : 8

73
Tree	{ out . escapeJavaStyleString ( this , out ) ; }
Code	{ out . escapeJavaStyleString ( this , out ) ; }
Distance : 7

74
Tree	{ escapeJavaStyleString ( out , out , TimeUnit.DAYS ) ; }
Code	{ escapeJavaStyleString ( out , out , TimeUnit.DAYS ) ; }
Distance : 4

75
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT , out ) ; }
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT , out ) ; }
Distance : 4

76
Tree	{ this . out . escapeJavaStyleString ( out ) ; }
Code	{ this . out . escapeJavaStyleString ( out ) ; }
Distance : 8

77
Tree	{ str . escapeJavaStyleString ( false ) ; }
Code	{ str . escapeJavaStyleString ( false ) ; }
Distance : 7

78
Tree	{ out . escapeJavaStyleString ( null , out , str , out ) ; }
Code	{ out . escapeJavaStyleString ( null , out , str , out ) ; }
Distance : 6

79
Tree	{ escapeJavaStyleString ( out , null , str ) ; }
Code	{ escapeJavaStyleString ( out , null , str ) ; }
Distance : 4

80
Tree	{ out . escapeJavaStyleString ( str ? CharUtils.CR : Boolean.TRUE ) ; }
Code	{ out . escapeJavaStyleString ( str ? CharUtils.CR : Boolean.TRUE ) ; }
Distance : 8

81
Tree	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( str ) , super(); ) ; }
Code	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( str ) , super(); ) ; }
Distance : 7

82
Tree	{ out . escapeJavaStyleString ( this . out , str , out , out ) ; }
Code	{ out . escapeJavaStyleString ( this . out , str , out , out ) ; }
Distance : 6

83
Tree	{ out . escapeJavaStyleString ( out , true ) ; }
Code	{ out . escapeJavaStyleString ( out , true ) ; }
Distance : 7

84
Tree	{ out . escapeJavaStyleString ( new NullPointerException ( str , out ) ) ; }
Code	{ out . escapeJavaStyleString ( new NullPointerException ( str , out ) ) ; }
Distance : 8

85
Tree	{ str . escapeJavaStyleString ( str , out , this ) ; }
Code	{ str . escapeJavaStyleString ( str , out , this ) ; }
Distance : 6

86
Tree	{ out . escapeJavaStyleString ( trim , out ? Boolean.FALSE : Boolean.TRUE ) ; }
Code	{ out . escapeJavaStyleString ( trim , out ? Boolean.FALSE : Boolean.TRUE ) ; }
Distance : 8

87
Tree	{ str . escapeJavaStyleString ( out , STRING_CONSTANT ) ; }
Code	{ str . escapeJavaStyleString ( out , STRING_CONSTANT ) ; }
Distance : 7

88
Tree	{ escapeJavaStyleString ( out , out , str ) ; }
Code	{ escapeJavaStyleString ( out , out , str ) ; }
Distance : 4

89
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , str , str ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , str , str ) ; }
Distance : 4

90
Tree	{ str . escapeJavaStyleString ( str , out ) ; }
Code	{ str . escapeJavaStyleString ( str , out ) ; }
Distance : 7

91
Tree	{ out . escapeJavaStyleString ( trim , out ? DateUtils.MILLIS_PER_HOUR : Boolean.TRUE ) ; }
Code	{ out . escapeJavaStyleString ( trim , out ? DateUtils.MILLIS_PER_HOUR : Boolean.TRUE ) ; }
Distance : 8

92
Tree	{ escapeJavaStyleString ( out , out , out , str ) ; }
Code	{ escapeJavaStyleString ( out , out , out , str ) ; }
Distance : 3

93
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , str , out ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , str , out ) ; }
Distance : 4

94
Tree	{ out . escapeJavaStyleString ( out , out , this ) ; }
Code	{ out . escapeJavaStyleString ( out , out , this ) ; }
Distance : 6

95
Tree	{ out . escapeJavaStyleString ( str , new Double ( str ) ) ; }
Code	{ out . escapeJavaStyleString ( str , new Double ( str ) ) ; }
Distance : 8

96
Tree	{ out . escapeJavaStyleString ( ( str ) null ) ; }
Code	{ out . escapeJavaStyleString ( ( str ) null ) ; }
Distance : 8

97
Tree	{ out . escapeJavaStyleString ( out , null , out ) ; }
Code	{ out . escapeJavaStyleString ( out , null , out ) ; }
Distance : 6

98
Tree	{ out . this . escapeJavaStyleString ( out , out , str ) ; }
Code	{ out . this . escapeJavaStyleString ( out , out , str ) ; }
Distance : 8

99
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } pattern
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; } pattern
Distance : 6

100
Tree	{ escapeJavaStyleString ( out , out , true ) ; }
Code	{ escapeJavaStyleString ( out , out , true ) ; }
Distance : 4

101
Tree	{ escapeJavaStyleString ( escapeJavaStyleString ( out ) , escapeJavaStyleString ( str ) ) ; }
Code	{ escapeJavaStyleString ( escapeJavaStyleString ( out ) , escapeJavaStyleString ( str ) ) ; }
Distance : 8

102
Tree	{ out . escapeJavaStyleString ( str , str ) ; }
Code	{ out . escapeJavaStyleString ( str , str ) ; }
Distance : 7

103
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , out ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , out ) ; }
Distance : 4

104
Tree	{ out . escapeJavaStyleString ( null , out , out , str ) ; }
Code	{ out . escapeJavaStyleString ( null , out , out , str ) ; }
Distance : 6

105
Tree	{ escapeJavaStyleString ( out , out , str . escapeJavaStyleString ( out ) , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( out , out , str . escapeJavaStyleString ( out ) , STRING_CONSTANT ) ; }
Distance : 8

106
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT , str ) ; }
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT , str ) ; }
Distance : 4

107
Tree	{ out . escapeJavaStyleString ( true ) ; }
Code	{ out . escapeJavaStyleString ( true ) ; }
Distance : 8

108
Tree	{ escapeJavaStyleString ( str , null ) ; }
Code	{ escapeJavaStyleString ( str , null ) ; }
Distance : 5

109
Tree	{ this . escapeJavaStyleString ( str ? StringUtils.EMPTY : Boolean.TRUE ) ; }
Code	{ this . escapeJavaStyleString ( str ? StringUtils.EMPTY : Boolean.TRUE ) ; }
Distance : 8

110
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Distance : 7

111
Tree	{ out . escapeJavaStyleString ( str , out , out , this ) ; }
Code	{ out . escapeJavaStyleString ( str , out , out , this ) ; }
Distance : 6

112
Tree	{ out . escapeJavaStyleString ( new IllegalArgumentException ( str , out ) ) ; }
Code	{ out . escapeJavaStyleString ( new IllegalArgumentException ( str , out ) ) ; }
Distance : 8

113
Tree	{ escapeJavaStyleString ( str , out , out ) ; }
Code	{ escapeJavaStyleString ( str , out , out ) ; }
Distance : 4

114
Tree	{ escapeJavaStyleString ( ( str ) str , out ) ; }
Code	{ escapeJavaStyleString ( ( str ) str , out ) ; }
Distance : 5

115
Tree	{ out . escapeJavaStyleString ( str ? Integer.MAX_VALUE : Boolean.TRUE ) ; }
Code	{ out . escapeJavaStyleString ( str ? Integer.MAX_VALUE : Boolean.TRUE ) ; }
Distance : 8

116
Tree	{ out . escapeJavaStyleString ( out . escapeJavaStyleString ( str ) ) ; }
Code	{ out . escapeJavaStyleString ( out . escapeJavaStyleString ( str ) ) ; }
Distance : 8

117
Tree	{ this . str . escapeJavaStyleString ( str ) ; }
Code	{ this . str . escapeJavaStyleString ( str ) ; }
Distance : 8

118
Tree	{ escapeJavaStyleString ( out , out , out , true ) ; }
Code	{ escapeJavaStyleString ( out , out , out , true ) ; }
Distance : 3

119
Tree	{ str . escapeJavaStyleString ( this , str ) ; }
Code	{ str . escapeJavaStyleString ( this , str ) ; }
Distance : 7

120
Tree	{ out . escapeJavaStyleString ( str , out , this ) ; }
Code	{ out . escapeJavaStyleString ( str , out , this ) ; }
Distance : 6

121
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } CharSequence
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out ) ; } CharSequence
Distance : 7

122
Tree	{ str . out ( str , out ) ; }
Code	{ str . out ( str , out ) ; }
Distance : 6

123
Tree	{ escapeJavaStyleString ( str , out . escapeJavaStyleString ( str ) , null ) ; }
Code	{ escapeJavaStyleString ( str , out . escapeJavaStyleString ( str ) , null ) ; }
Distance : 8

124
Tree	{ UnescapeUtils.UNESCAPE_ECMASCRIPT . escapeJavaStyleString ( str , out ) ; }
Code	{ UnescapeUtils.UNESCAPE_ECMASCRIPT . escapeJavaStyleString ( str , out ) ; }
Distance : 7

125
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Distance : 11

126
Tree	{ EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString ( str , out ) ; }
Code	{ EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString ( str , out ) ; }
Distance : 7

127
Tree	{ out . escapeJavaStyleString ( trim , out ? DateUtils.MILLIS_PER_DAY : Boolean.TRUE ) ; }
Code	{ out . escapeJavaStyleString ( trim , out ? DateUtils.MILLIS_PER_DAY : Boolean.TRUE ) ; }
Distance : 8

128
Tree	{ out . escapeJavaStyleString ( out , out ) ; }
Code	{ out . escapeJavaStyleString ( out , out ) ; }
Distance : 7

129
Tree	{ escapeJavaStyleString ( out , super(); ) ; }
Code	{ escapeJavaStyleString ( out , super(); ) ; }
Distance : 5

130
Tree	{ out . escapeJavaStyleString ( this , out , out ) ; }
Code	{ out . escapeJavaStyleString ( this , out , out ) ; }
Distance : 7

131
Tree	{ out . escapeJavaStyleString ( str , false ) ; }
Code	{ out . escapeJavaStyleString ( str , false ) ; }
Distance : 6

132
Tree	{ escapeJavaStyleString ( out , return; ) ; }
Code	{ escapeJavaStyleString ( out , return; ) ; }
Distance : 5

133
Tree	{ out . this . escapeJavaStyleString ( str , out , str ) ; }
Code	{ out . this . escapeJavaStyleString ( str , out , str ) ; }
Distance : 8

134
Tree	{ out . escapeJavaStyleString ( ( out ) null ) ; }
Code	{ out . escapeJavaStyleString ( ( out ) null ) ; }
Distance : 9

135
Tree	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , str ) ; }
Code	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , str ) ; }
Distance : 9

136
Tree	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( str ) , null ) ; }
Code	{ escapeJavaStyleString ( out , out . escapeJavaStyleString ( str ) , null ) ; }
Distance : 7

137
Tree	{ out . escapeJavaStyleString ( str , null , out ) ; }
Code	{ out . escapeJavaStyleString ( str , null , out ) ; }
Distance : 6

138
Tree	{ out . escapeJavaStyleString ( str , new false ( str ) ) ; }
Code	{ out . escapeJavaStyleString ( str , new false ( str ) ) ; }
Distance : 8

139
Tree	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( str ) ) ; }
Code	{ escapeJavaStyleString ( escapeJavaStyleString ( str ) , escapeJavaStyleString ( str ) ) ; }
Distance : 7

140
Tree	{ escapeJavaStyleString ( out , null , out ) ; }
Code	{ escapeJavaStyleString ( out , null , out ) ; }
Distance : 4

141
Tree	{ out . escapeJavaStyleString ( str . escapeJavaStyleString ( out ) ) ; }
Code	{ out . escapeJavaStyleString ( str . escapeJavaStyleString ( out ) ) ; }
Distance : 9

142
Tree	{ escapeJavaStyleString ( str , out , out , false ) ; }
Code	{ escapeJavaStyleString ( str , out , out , false ) ; }
Distance : 3

143
Tree	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( out , STRING_CONSTANT ) ; }
Distance : 5

144
Tree	{ escapeJavaStyleString ( out , out , str , false ) ; }
Code	{ escapeJavaStyleString ( out , out , str , false ) ; }
Distance : 2

145
Tree	{ escapeJavaStyleString ( str , str ) ; }
Code	{ escapeJavaStyleString ( str , str ) ; }
Distance : 5

146
Tree	{ escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Code	{ escapeJavaStyleString () . escapeJavaStyleString ( out , out ) ; }
Distance : 7

147
Tree	{ escapeJavaStyleString ( ( out ) str , out ) ; }
Code	{ escapeJavaStyleString ( ( out ) str , out ) ; }
Distance : 5

148
Tree	{ this . escapeJavaStyleString ( str ? Integer.MAX_VALUE : Boolean.TRUE ) ; }
Code	{ this . escapeJavaStyleString ( str ? Integer.MAX_VALUE : Boolean.TRUE ) ; }
Distance : 8

149
Tree	{ out . escapeJavaStyleString ( this . out , out , out , out ) ; }
Code	{ out . escapeJavaStyleString ( this . out , out , out , out ) ; }
Distance : 7

150
Tree	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ str . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 11

151
Tree	{ out . escapeJavaStyleString ( str , str , this ) ; }
Code	{ out . escapeJavaStyleString ( str , str , this ) ; }
Distance : 6

152
Tree	{ out . escapeJavaStyleString ( this . out , out , out , str ) ; }
Code	{ out . escapeJavaStyleString ( this . out , out , out , str ) ; }
Distance : 7

153
Tree	{ str . escapeJavaStyleString ( this , out ) ; }
Code	{ str . escapeJavaStyleString ( this , out ) ; }
Distance : 8

154
Tree	{ escapeJavaStyleString ( out , out , true ) ; }
Code	{ escapeJavaStyleString ( out , out , true ) ; }
Distance : 4

155
Tree	{ str () . escapeJavaStyleString ( str , out ) ; }
Code	{ str () . escapeJavaStyleString ( str , out ) ; }
Distance : 8

156
Tree	{ out . escapeJavaStyleString ( ( str ) super(); ) ; }
Code	{ out . escapeJavaStyleString ( ( str ) super(); ) ; }
Distance : 8

157
Tree	{ delimiters.length . escapeJavaStyleString ( str , out ) ; }
Code	{ delimiters.length . escapeJavaStyleString ( str , out ) ; }
Distance : 7

158
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , out ) ; }
Distance : 11

159
Tree	{ out . escapeJavaStyleString ( out . escapeJavaStyleString ( out ) ) ; }
Code	{ out . escapeJavaStyleString ( out . escapeJavaStyleString ( out ) ) ; }
Distance : 8

160
Tree	{ this . str . escapeJavaStyleString ( out ) ; }
Code	{ this . str . escapeJavaStyleString ( out ) ; }
Distance : 8

161
Tree	{ str . escapeJavaStyleString ( str , STRING_CONSTANT ) ; }
Code	{ str . escapeJavaStyleString ( str , STRING_CONSTANT ) ; }
Distance : 7

162
Tree	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( out , out ) ; }
Code	{ out . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( out , out ) ; }
Distance : 9

163
Tree	{ escapeJavaStyleString ( out , out , false ) ; }
Code	{ escapeJavaStyleString ( out , out , false ) ; }
Distance : 3

164
Tree	{ escapeJavaStyleString ( str , out , str ) ; }
Code	{ escapeJavaStyleString ( str , out , str ) ; }
Distance : 4

165
Tree	{ escapeJavaStyleString ( str , out , false ) ; }
Code	{ escapeJavaStyleString ( str , out , false ) ; }
Distance : 3

166
Tree	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; }
Code	{ str . escapeJavaStyleString ( NUMBER_CONSTANT ) . escapeJavaStyleString ( str , out ) ; }
Distance : 9

167
Tree	{ out . escapeJavaStyleString ( str , out , str , this ) ; }
Code	{ out . escapeJavaStyleString ( str , out , str , this ) ; }
Distance : 6

168
Tree	{ out . escapeJavaStyleString ( str , true ) ; }
Code	{ out . escapeJavaStyleString ( str , true ) ; }
Distance : 7

169
Tree	{ escapeJavaStyleString ( ( str ) str , str ) ; }
Code	{ escapeJavaStyleString ( ( str ) str , str ) ; }
Distance : 5

170
Tree	{ escapeJavaStyleString ( str , null , out ) ; }
Code	{ escapeJavaStyleString ( str , null , out ) ; }
Distance : 4

171
Tree	{ escapeJavaStyleString ( out , out , TimeUnit.MILLISECONDS ) ; }
Code	{ escapeJavaStyleString ( out , out , TimeUnit.MILLISECONDS ) ; }
Distance : 4

172
Tree	{ out () . escapeJavaStyleString ( str , out ) ; }
Code	{ out () . escapeJavaStyleString ( str , out ) ; }
Distance : 8

173
Tree	{ out . escapeJavaStyleString ( this , str ) ; }
Code	{ out . escapeJavaStyleString ( this , str ) ; }
Distance : 7

174
Tree	{ escapeJavaStyleString ( out , out , out . escapeJavaStyleString ( out ) , STRING_CONSTANT ) ; }
Code	{ escapeJavaStyleString ( out , out , out . escapeJavaStyleString ( out ) , STRING_CONSTANT ) ; }
Distance : 8

175
Tree	{ escapeJavaStyleString ( out , str , false ) ; }
Code	{ escapeJavaStyleString ( out , str , false ) ; }
Distance : 2

176
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Distance : 9

177
Tree	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Code	{ out . escapeJavaStyleString () . escapeJavaStyleString () . escapeJavaStyleString ( str , str ) ; }
Distance : 11

178
Tree	{ out . escapeJavaStyleString ( new IllegalStateException ( str , out ) ) ; }
Code	{ out . escapeJavaStyleString ( new IllegalStateException ( str , out ) ) ; }
Distance : 8

179
Tree	{ escapeJavaStyleString ( ( str ) out , out ) ; }
Code	{ escapeJavaStyleString ( ( str ) out , out ) ; }
Distance : 5

180
Tree	{ out . escapeJavaStyleString ( null , out , out , out ) ; }
Code	{ out . escapeJavaStyleString ( null , out , out , out ) ; }
Distance : 6

181
Tree	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , str ) ; }
Code	{ escapeJavaStyleString ( STRING_CONSTANT , out , out , str ) ; }
Distance : 4

182
Tree	{ out . this . escapeJavaStyleString ( str , out , out ) ; }
Code	{ out . this . escapeJavaStyleString ( str , out , out ) ; }
Distance : 8

183
Tree	{ out . escapeJavaStyleString ( new Locale ( str , out ) ) ; }
Code	{ out . escapeJavaStyleString ( new Locale ( str , out ) ) ; }
Distance : 8

========================================================================


========================================================================
Example Number: 9
Parent Code is: 
{ return escapeJavaStyleString ( str , false ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ return escapeJavaStyleString ( str , false , false ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=str}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (41 (329{val=return}) (32 (802{val=escapeJavaStyleString}) (214{val=(}) (800{val=str}) (234{val=,}) (9{val=false}) (234{val=,}) (9{val=false}) (215{val=)})) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/46/parent/src_java_org_apache_commons_lang_StringEscapeUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 84
Wrong
========================================================================
False

0
Tree	{ this . str = str ; for }
Code	{ this . str = str ; for }
Distance : 9

1
Tree	{ this . str = str ; if }
Code	{ this . str = str ; if }
Distance : 9

2
Tree	{ return escapeJavaStyleString ( str , super(); ) ; }
Code	{ return escapeJavaStyleString ( str , super(); ) ; }
Distance : 3

3
Tree	{ this ( str , str , str , return; ) ; }
Code	{ this ( str , str , str , return; ) ; }
Distance : 6

4
Tree	{ this ( str , str , str , continue; ) ; }
Code	{ this ( str , str , str , continue; ) ; }
Distance : 6

5
Tree	{ this ( str , str , str , super(); ) ; }
Code	{ this ( str , str , str , super(); ) ; }
Distance : 6

6
Tree	{ return str . escapeJavaStyleString ( str , null , null ) ; }
Code	{ return str . escapeJavaStyleString ( str , null , null ) ; }
Distance : 4

7
Tree	{ return escapeJavaStyleString ( str , true ) ; }
Code	{ return escapeJavaStyleString ( str , true ) ; }
Distance : 3

8
Tree	{ return escapeJavaStyleString ( str , str , hashCode ) ; }
Code	{ return escapeJavaStyleString ( str , str , hashCode ) ; }
Distance : 2

9
Tree	{ return escapeJavaStyleString ( str , str , TimeUnit.MILLISECONDS ) ; }
Code	{ return escapeJavaStyleString ( str , str , TimeUnit.MILLISECONDS ) ; }
Distance : 2

10
Tree	{ return escapeJavaStyleString ( PARAM.escapePlus , null ) ; }
Code	{ return escapeJavaStyleString ( PARAM.escapePlus , null ) ; }
Distance : 4

11
Tree	{ return escapeJavaStyleString ( StringUtils.EMPTY , null ) ; }
Code	{ return escapeJavaStyleString ( StringUtils.EMPTY , null ) ; }
Distance : 4

12
Tree	{ escapeJavaStyleString ( str ) ; assertArrayEquals }
Code	{ escapeJavaStyleString ( str ) ; assertArrayEquals }
Distance : 6

13
Tree	{ return escapeJavaStyleString ( str , CharUtils.NUL ) ; }
Code	{ return escapeJavaStyleString ( str , CharUtils.NUL ) ; }
Distance : 3

14
Tree	{ this . str = str ; catch }
Code	{ this . str = str ; catch }
Distance : 9

15
Tree	{ this . str = str ; assertArrayEquals }
Code	{ this . str = str ; assertArrayEquals }
Distance : 9

16
Tree	{ return escapeJavaStyleString ( str , str , TimeUnit.DAYS ) ; }
Code	{ return escapeJavaStyleString ( str , str , TimeUnit.DAYS ) ; }
Distance : 2

17
Tree	{ return escapeJavaStyleString ( str , false ) ; } CharSequence
Code	{ return escapeJavaStyleString ( str , false ) ; } CharSequence
Distance : 3

18
Tree	{ return escapeJavaStyleString ( str , return; ) ; }
Code	{ return escapeJavaStyleString ( str , return; ) ; }
Distance : 3

19
Tree	{ return this . escapeJavaStyleString ( str ) ; } [
Code	{ return this . escapeJavaStyleString ( str ) ; } [
Distance : 7

20
Tree	{ return this . escapeJavaStyleString ( str ) ; } Date
Code	{ return this . escapeJavaStyleString ( str ) ; } Date
Distance : 7

21
Tree	{ return this . escapeJavaStyleString ( str ) ; } buffer
Code	{ return this . escapeJavaStyleString ( str ) ; } buffer
Distance : 7

22
Tree	{ return escapeJavaStyleString ( this , str ) ; } Date
Code	{ return escapeJavaStyleString ( this , str ) ; } Date
Distance : 5

23
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } buffer
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } buffer
Distance : 5

24
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } [
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } [
Distance : 5

25
Tree	{ return escapeJavaStyleString ( str , null ) ; }
Code	{ return escapeJavaStyleString ( str , null ) ; }
Distance : 3

26
Tree	{ return escapeJavaStyleString ( str , Integer.MAX_VALUE ) ; }
Code	{ return escapeJavaStyleString ( str , Integer.MAX_VALUE ) ; }
Distance : 3

27
Tree	{ return escapeJavaStyleString ( this , str ) ; }
Code	{ return escapeJavaStyleString ( this , str ) ; }
Distance : 4

28
Tree	{ return escapeJavaStyleString ( str , Byte.MIN_VALUE ) ; }
Code	{ return escapeJavaStyleString ( str , Byte.MIN_VALUE ) ; }
Distance : 3

29
Tree	{ return EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString ( str ) ; }
Code	{ return EscapeUtils.ESCAPE_ECMASCRIPT . escapeJavaStyleString ( str ) ; }
Distance : 6

30
Tree	{ super . escapeJavaStyleString ( str ) ; return true ; }
Code	{ super . escapeJavaStyleString ( str ) ; return true ; }
Distance : 7

31
Tree	{ return escapeJavaStyleString ( str , str , str , str , continue; ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , continue; ) ; }
Distance : 6

32
Tree	{ return getCause . escapeJavaStyleString ( str ) ; }
Code	{ return getCause . escapeJavaStyleString ( str ) ; }
Distance : 6

33
Tree	{ return escapeJavaStyleString ( str , str , str , str , return; ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , return; ) ; }
Distance : 6

34
Tree	{ super . escapeJavaStyleString ( str ) ; return null ; }
Code	{ super . escapeJavaStyleString ( str ) ; return null ; }
Distance : 7

35
Tree	{ return EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str ) ; }
Code	{ return EscapeUtils.ESCAPE_JAVA . escapeJavaStyleString ( str ) ; }
Distance : 6

36
Tree	{ return this . escapeJavaStyleString ( str ) ; }
Code	{ return this . escapeJavaStyleString ( str ) ; }
Distance : 6

37
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; }
Code	{ super . escapeJavaStyleString ( str ) ; return str ; }
Distance : 7

38
Tree	{ return escapeJavaStyleString ( str , false ) ; } pattern
Code	{ return escapeJavaStyleString ( str , false ) ; } pattern
Distance : 3

39
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; } Date
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; } Date
Distance : 5

40
Tree	{ return escapeJavaStyleString ( str , return; , null , str ) ; }
Code	{ return escapeJavaStyleString ( str , return; , null , str ) ; }
Distance : 4

41
Tree	{ return escapeJavaStyleString ( str , null , super(); , str ) ; }
Code	{ return escapeJavaStyleString ( str , null , super(); , str ) ; }
Distance : 4

42
Tree	{ super . escapeJavaStyleString ( str ) ; return return; ; }
Code	{ super . escapeJavaStyleString ( str ) ; return return; ; }
Distance : 7

43
Tree	{ return escapeJavaStyleString ( str , false ) ; }
Code	{ return escapeJavaStyleString ( str , false ) ; }
Distance : 2

44
Tree	{ return escapeJavaStyleString ( str , str , false ) ; }
Code	{ return escapeJavaStyleString ( str , str , false ) ; }
Distance : 1

45
Tree	{ escapeJavaStyleString ( str ) ; for }
Code	{ escapeJavaStyleString ( str ) ; for }
Distance : 6

46
Tree	{ escapeJavaStyleString ( str ) ; if }
Code	{ escapeJavaStyleString ( str ) ; if }
Distance : 6

47
Tree	{ return StringUtils.EMPTY . escapeJavaStyleString ( str ) ; }
Code	{ return StringUtils.EMPTY . escapeJavaStyleString ( str ) ; }
Distance : 6

48
Tree	{ return escapeJavaStyleString ( str , str , str , str , null ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , null ) ; }
Distance : 6

49
Tree	{ super . escapeJavaStyleString ( str ) ; return super(); ; }
Code	{ super . escapeJavaStyleString ( str ) ; return super(); ; }
Distance : 7

50
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } pattern
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } pattern
Distance : 7

51
Tree	{ return escapeJavaStyleString ( str , str , str , str ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str ) ; }
Distance : 4

52
Tree	{ return escapeJavaStyleString ( str , null , null , str ) ; }
Code	{ return escapeJavaStyleString ( str , null , null , str ) ; }
Distance : 4

53
Tree	{ return escapeJavaStyleString ( str , continue; ) ; }
Code	{ return escapeJavaStyleString ( str , continue; ) ; }
Distance : 3

54
Tree	{ return escapeJavaStyleString ( str , super(); , null , str ) ; }
Code	{ return escapeJavaStyleString ( str , super(); , null , str ) ; }
Distance : 4

55
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; } CharSequence
Code	{ super . escapeJavaStyleString ( str ) ; return false ; } CharSequence
Distance : 7

56
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } Date
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } Date
Distance : 8

57
Tree	{ return escapeJavaStyleString ( str , false ) ; } CharSequence
Code	{ return escapeJavaStyleString ( str , false ) ; } CharSequence
Distance : 3

58
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } buffer
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } buffer
Distance : 8

59
Tree	{ super . escapeJavaStyleString ( str ) ; return str ; } [
Code	{ super . escapeJavaStyleString ( str ) ; return str ; } [
Distance : 8

60
Tree	{ return escapeJavaStyleString ( this , str ) ; } buffer
Code	{ return escapeJavaStyleString ( this , str ) ; } buffer
Distance : 5

61
Tree	{ return escapeJavaStyleString ( this , str ) ; } [
Code	{ return escapeJavaStyleString ( this , str ) ; } [
Distance : 5

62
Tree	{ return escapeJavaStyleString ( str , trim ) ; }
Code	{ return escapeJavaStyleString ( str , trim ) ; }
Distance : 3

63
Tree	{ escapeJavaStyleString ( str ) ; catch }
Code	{ escapeJavaStyleString ( str ) ; catch }
Distance : 6

64
Tree	{ return escapeJavaStyleString ( str , null ) ; }
Code	{ return escapeJavaStyleString ( str , null ) ; }
Distance : 3

65
Tree	{ return escapeJavaStyleString ( trim , null ) ; }
Code	{ return escapeJavaStyleString ( trim , null ) ; }
Distance : 4

66
Tree	{ super . escapeJavaStyleString ( str ) ; return continue; ; }
Code	{ super . escapeJavaStyleString ( str ) ; return continue; ; }
Distance : 7

67
Tree	{ return escapeJavaStyleString ( str , true ) ; }
Code	{ return escapeJavaStyleString ( str , true ) ; }
Distance : 3

68
Tree	{ return escapeJavaStyleString ( str , false ) ; }
Code	{ return escapeJavaStyleString ( str , false ) ; }
Distance : 2

69
Tree	{ super . escapeJavaStyleString ( str ) ; return false ; }
Code	{ super . escapeJavaStyleString ( str ) ; return false ; }
Distance : 6

70
Tree	{ escapeJavaStyleString ( str ) ; return false ; } pattern
Code	{ escapeJavaStyleString ( str ) ; return false ; } pattern
Distance : 6

71
Tree	{ return str . escapeJavaStyleString ( str , super(); , null ) ; }
Code	{ return str . escapeJavaStyleString ( str , super(); , null ) ; }
Distance : 4

72
Tree	{ this ( str , str , str , null ) ; }
Code	{ this ( str , str , str , null ) ; }
Distance : 6

73
Tree	{ escapeJavaStyleString ( str ) ; return false ; }
Code	{ escapeJavaStyleString ( str ) ; return false ; }
Distance : 5

74
Tree	{ return str . escapeJavaStyleString ( str , return; , null ) ; }
Code	{ return str . escapeJavaStyleString ( str , return; , null ) ; }
Distance : 4

75
Tree	{ escapeJavaStyleString ( str ) ; return false ; } CharSequence
Code	{ escapeJavaStyleString ( str ) ; return false ; } CharSequence
Distance : 6

76
Tree	{ escapeJavaStyleString ( str ) ; return true ; }
Code	{ escapeJavaStyleString ( str ) ; return true ; }
Distance : 6

77
Tree	{ return str . escapeJavaStyleString ( str , continue; , null ) ; }
Code	{ return str . escapeJavaStyleString ( str , continue; , null ) ; }
Distance : 4

78
Tree	{ return super . escapeJavaStyleString ( str , str , str , new Boolean ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new Boolean ( str ) ) ; }
Distance : 10

79
Tree	{ return escapeJavaStyleString ( str , false ) ; } pattern
Code	{ return escapeJavaStyleString ( str , false ) ; } pattern
Distance : 3

80
Tree	{ return super . escapeJavaStyleString ( str , str , str , new false ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new false ( str ) ) ; }
Distance : 9

81
Tree	{ return super . escapeJavaStyleString ( str , str , str , new Double ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new Double ( str ) ) ; }
Distance : 10

82
Tree	{ return super . escapeJavaStyleString ( str , str , str , new Type ( str ) ) ; }
Code	{ return super . escapeJavaStyleString ( str , str , str , new Type ( str ) ) ; }
Distance : 10

83
Tree	{ return escapeJavaStyleString ( str , str , str , str , super(); ) ; }
Code	{ return escapeJavaStyleString ( str , str , str , str , super(); ) ; }
Distance : 6

========================================================================


========================================================================
Example Number: 10
Parent Code is: 
if ( element != null ) { type = element . getClass () ; } else { type = Object . class ; }
-------------------------------------------------------------------------------
Child code is: 
if ( element != null ) { type = element . getClass () ; } else { throw new IllegalArgumentException ( STRING_CONSTANT ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=element}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=type}) (204{val==}) (32 (800{val=element}) (235{val=.}) (802{val=getClass}) (216{val=()}))) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (21 (7 (800{val=type}) (204{val==}) (57 (43 (800{val=Object})) (235{val=.}) (341{val=class}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (800{val=element}) (242{val=!=}) (500{val=null})) (215{val=)}) (8 (218{val={}) (21 (7 (800{val=type}) (204{val==}) (32 (800{val=element}) (235{val=.}) (802{val=getClass}) (216{val=()}))) (227{val=;})) (219{val=}})) (322{val=else}) (8 (218{val={}) (53 (320{val=throw}) (14 (304{val=new}) (43 (801{val=IllegalArgumentException})) (214{val=(}) (45{val=STRING_CONSTANT}) (215{val=)})) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/35/parent/src_main_java_org_apache_commons_lang3_ArrayUtils.java
-------------------------------------------------------------------------------
Edit Distance : 6
-------------------------------------------------------------------------------
Cadidate List Length : 176
Wrong
========================================================================
False

0
Tree	if ( element != null ) { type = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = element . getClass () ; }
Distance : 6

1
Tree	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = element . getClass () ; }
Distance : 6

2
Tree	if ( element != null ) { type = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = element . getClass () ; }
Distance : 6

3
Tree	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = element . getClass () ; }
Distance : 6

4
Tree	if ( element != null ) { type = element . getClass () ; } else { type += element ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type += element ; }
Distance : 6

5
Tree	if ( element != null ) { type = false ; } else { Boolean.TRUE = element . getClass () ; }
Code	if ( element != null ) { type = false ; } else { Boolean.TRUE = element . getClass () ; }
Distance : 10

6
Tree	if ( element != null ) { getClass = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != null ) { getClass = element . getClass () ; } else { type = element . getClass () ; }
Distance : 7

7
Tree	if ( element != null ) { type = element . getClass () ; } else { continue = false ; }
Code	if ( element != null ) { type = element . getClass () ; } else { continue = false ; }
Distance : 6

8
Tree	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = getClass () ; }
Distance : 6

9
Tree	if ( element != null ) { type = element . getClass () == type ; } else { type = listenerInterface ; }
Code	if ( element != null ) { type = element . getClass () == type ; } else { type = listenerInterface ; }
Distance : 8

10
Tree	if ( element != null ) { type = element . getClass () ; } else { type = STRING_CONSTANT + STRING_CONSTANT ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = STRING_CONSTANT + STRING_CONSTANT ; }
Distance : 5

11
Tree	if ( element != null ) { type = element . getClass () ; } else { type = this . type ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = this . type ; }
Distance : 6

12
Tree	if ( element != null ) { type = element . getClass () ; } else { type = getClass ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = getClass ; }
Distance : 6

13
Tree	if ( element != null ) { type = CharUtils.NUL ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = CharUtils.NUL ; } else { type = element . getClass () ; }
Distance : 10

14
Tree	if ( element != null ) { type = element . getClass () == StringUtils.EMPTY ; } else { type = bounds.length ; }
Code	if ( element != null ) { type = element . getClass () == StringUtils.EMPTY ; } else { type = bounds.length ; }
Distance : 8

15
Tree	if ( element != null ) { type = STRING_CONSTANT + type . getClass () + STRING_CONSTANT ; } else { type = getClass ; }
Code	if ( element != null ) { type = STRING_CONSTANT + type . getClass () + STRING_CONSTANT ; } else { type = getClass ; }
Distance : 11

16
Tree	if ( element != null ) { type = element * element . getClass () ; } else { type = getClass ; }
Code	if ( element != null ) { type = element * element . getClass () ; } else { type = getClass ; }
Distance : 8

17
Tree	if ( element != null ) { type = STRING_CONSTANT + type . getClass () + STRING_CONSTANT ; } else { type = CharUtils.NUL ; }
Code	if ( element != null ) { type = STRING_CONSTANT + type . getClass () + STRING_CONSTANT ; } else { type = CharUtils.NUL ; }
Distance : 11

18
Tree	if ( element != null ) { type = element . getClass () != null ; } else { type = getClass ; }
Code	if ( element != null ) { type = element . getClass () != null ; } else { type = getClass ; }
Distance : 8

19
Tree	if ( element != null ) { type = ( element ) type ; } else { type = CharUtils.NUL ; }
Code	if ( element != null ) { type = ( element ) type ; } else { type = CharUtils.NUL ; }
Distance : 10

20
Tree	if ( element != null ) { type = type . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type = element . getClass () ; }
Distance : 7

21
Tree	if ( element != null ) { type = element . getClass () ; } else { type -= element ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type -= element ; }
Distance : 6

22
Tree	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = lhs.length . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = lhs.length . getClass () ; }
Distance : 6

23
Tree	if ( element != null ) { element = false ; } else { type = element . getClass () ; }
Code	if ( element != null ) { element = false ; } else { type = element . getClass () ; }
Distance : 11

24
Tree	if ( element != null ) { type = element . getClass () ; } else { type = element + STRING_CONSTANT ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = element + STRING_CONSTANT ; }
Distance : 5

25
Tree	if ( element != null ) { type = element . getClass () == type ; } else { type = getClass ; }
Code	if ( element != null ) { type = element . getClass () == type ; } else { type = getClass ; }
Distance : 8

26
Tree	if ( element != null ) { type = element . getClass () == type ; } else { type = bounds.length ; }
Code	if ( element != null ) { type = element . getClass () == type ; } else { type = bounds.length ; }
Distance : 8

27
Tree	if ( element != null ) { type = element . getClass () ; } else { type = listenerInterface ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = listenerInterface ; }
Distance : 6

28
Tree	if ( element != null ) { type = element . getClass () ; } else { type = getClass != null ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = getClass != null ; }
Distance : 6

29
Tree	if ( element != null ) { type = false ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = element . getClass () ; }
Distance : 10

30
Tree	if ( element != null ) { type = type . getClass () ; } else { type = element . class ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type = element . class ; }
Distance : 7

31
Tree	if ( element != null ) { type = type . getClass () ; } else { type = false ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type = false ; }
Distance : 7

32
Tree	if ( element != null ) { type = element . getClass () ; } else { simpleQuote = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { simpleQuote = element . getClass () ; }
Distance : 6

33
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = true ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = true ; }
Distance : 8

34
Tree	if ( element != null ) { type = element . getClass () ; } else { type = element / type ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = element / type ; }
Distance : 6

35
Tree	if ( element != null ) { type = element . getClass () ; } else { type = element + STRING_CONSTANT ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = element + STRING_CONSTANT ; }
Distance : 5

36
Tree	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = StringUtils.EMPTY . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = StringUtils.EMPTY . getClass () ; }
Distance : 6

37
Tree	if ( element != null ) { type = element . getClass () ; } else { type != element ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type != element ; }
Distance : 6

38
Tree	if ( element != null ) { type = STRING_CONSTANT + type . getClass () + STRING_CONSTANT ; } else { type = bounds.length ; }
Code	if ( element != null ) { type = STRING_CONSTANT + type . getClass () + STRING_CONSTANT ; } else { type = bounds.length ; }
Distance : 11

39
Tree	if ( element != null ) { type = element . getClass () ; } else { simpleQuote = StringUtils.EMPTY . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { simpleQuote = StringUtils.EMPTY . getClass () ; }
Distance : 6

40
Tree	if ( element != null ) { type = element . getClass () == FastDateParser.JAPANESE_IMPERIAL ; } else { type += element ; }
Code	if ( element != null ) { type = element . getClass () == FastDateParser.JAPANESE_IMPERIAL ; } else { type += element ; }
Distance : 8

41
Tree	if ( element != null ) { getClass = false ; } else { Boolean.TRUE = element . getClass () ; }
Code	if ( element != null ) { getClass = false ; } else { Boolean.TRUE = element . getClass () ; }
Distance : 11

42
Tree	if ( element != null ) { type = element . getClass () ; } else { type = bounds.length ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = bounds.length ; }
Distance : 6

43
Tree	if ( element != null ) { fail = element . getClass () ; } else { type = element + STRING_CONSTANT ; }
Code	if ( element != null ) { fail = element . getClass () ; } else { type = element + STRING_CONSTANT ; }
Distance : 6

44
Tree	if ( element != null ) { type = element . getClass () ; } else { type = CharUtils.NUL ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = CharUtils.NUL ; }
Distance : 6

45
Tree	if ( element != null ) { type = element . getClass () == StringUtils.EMPTY ; } else { type = getClass ; }
Code	if ( element != null ) { type = element . getClass () == StringUtils.EMPTY ; } else { type = getClass ; }
Distance : 8

46
Tree	if ( element != null ) { getClass = false ; } else { type = element . getClass () ; }
Code	if ( element != null ) { getClass = false ; } else { type = element . getClass () ; }
Distance : 11

47
Tree	if ( element != null ) { type = element . getClass () ; } else { type = type / element ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = type / element ; }
Distance : 6

48
Tree	if ( element != null ) { type = STRING_CONSTANT + type . getClass () + STRING_CONSTANT ; } else { type = listenerInterface ; }
Code	if ( element != null ) { type = STRING_CONSTANT + type . getClass () + STRING_CONSTANT ; } else { type = listenerInterface ; }
Distance : 11

49
Tree	if ( element != null ) { type = element . getClass () == StringUtils.EMPTY ; } else { type != element ; }
Code	if ( element != null ) { type = element . getClass () == StringUtils.EMPTY ; } else { type != element ; }
Distance : 8

50
Tree	if ( element != null ) { type = false ; } else { simpleQuote = element . getClass () ; }
Code	if ( element != null ) { type = false ; } else { simpleQuote = element . getClass () ; }
Distance : 10

51
Tree	if ( element != null ) { type = element . getClass () ; } else { type = false ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = false ; }
Distance : 6

52
Tree	if ( element != null ) { next = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != null ) { next = element . getClass () ; } else { type = element . getClass () ; }
Distance : 7

53
Tree	if ( element != null ) { type = StringUtils.EMPTY ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = StringUtils.EMPTY ; } else { type = element . getClass () ; }
Distance : 10

54
Tree	if ( element != null ) { element = element . getClass () ; } else { type = false ; }
Code	if ( element != null ) { element = element . getClass () ; } else { type = false ; }
Distance : 7

55
Tree	if ( element != null ) { type = false ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = element . getClass () ; }
Distance : 10

56
Tree	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = StringUtils.EMPTY . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = StringUtils.EMPTY . getClass () ; }
Distance : 6

57
Tree	if ( element != null ) { type = element . getClass () ; } else { continue = getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { continue = getClass () ; }
Distance : 6

58
Tree	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = lhs.length . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = lhs.length . getClass () ; }
Distance : 6

59
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = listenerInterface ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = listenerInterface ; }
Distance : 8

60
Tree	if ( element != null ) { type = element . getClass () ; } else { continue = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { continue = element . getClass () ; }
Distance : 6

61
Tree	if ( element != null ) { type = element . getClass () ; } else { type = bounds.length ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = bounds.length ; }
Distance : 6

62
Tree	if ( element != null ) { type = element . getClass () == StringUtils.EMPTY ; } else { type = CharUtils.NUL ; }
Code	if ( element != null ) { type = element . getClass () == StringUtils.EMPTY ; } else { type = CharUtils.NUL ; }
Distance : 8

63
Tree	if ( element != null ) { type = element . getClass () == StringUtils.EMPTY ; } else { type += element ; }
Code	if ( element != null ) { type = element . getClass () == StringUtils.EMPTY ; } else { type += element ; }
Distance : 8

64
Tree	if ( element != null ) { type = element . getClass () ; } else { type = element * element ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = element * element ; }
Distance : 6

65
Tree	if ( element != null ) { type = element . getClass () ; } else { type = getClass != null ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = getClass != null ; }
Distance : 6

66
Tree	if ( element != null ) { type = StringUtils.EMPTY ; } else { simpleQuote = element . getClass () ; }
Code	if ( element != null ) { type = StringUtils.EMPTY ; } else { simpleQuote = element . getClass () ; }
Distance : 10

67
Tree	if ( element != null ) { type = element . getClass () ; } else { type = getClass ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = getClass ; }
Distance : 6

68
Tree	if ( element != null ) { type = element . getClass () ; } else { type = element / element ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = element / element ; }
Distance : 6

69
Tree	if ( element != null ) { type = ( element ) type ; } else { type = bounds.length ; }
Code	if ( element != null ) { type = ( element ) type ; } else { type = bounds.length ; }
Distance : 10

70
Tree	if ( element != null ) { type = false ; } else { simpleQuote = element . getClass () ; }
Code	if ( element != null ) { type = false ; } else { simpleQuote = element . getClass () ; }
Distance : 10

71
Tree	if ( element != null ) { type = element . getClass () ; } else { checkBuiltInFormat = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { checkBuiltInFormat = element . getClass () ; }
Distance : 6

72
Tree	if ( element != null ) { type = element . getClass () ; } else { type = element * type ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = element * type ; }
Distance : 6

73
Tree	if ( element != null ) { type = element . getClass () ; } else { type = type . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = type . getClass () ; }
Distance : 6

74
Tree	if ( element != null ) { type = element . getClass () ; } else { type = listenerInterface != null ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = listenerInterface != null ; }
Distance : 6

75
Tree	if ( element != null ) { type = element . getClass () ; } else { simpleQuote = StringUtils.EMPTY . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { simpleQuote = StringUtils.EMPTY . getClass () ; }
Distance : 6

76
Tree	if ( element != null ) { type = element * element . getClass () ; } else { type = CharUtils.NUL ; }
Code	if ( element != null ) { type = element * element . getClass () ; } else { type = CharUtils.NUL ; }
Distance : 8

77
Tree	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = getClass () ; }
Distance : 6

78
Tree	if ( element != null ) { type = element . getClass () ; } else { type = bounds.length != null ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = bounds.length != null ; }
Distance : 6

79
Tree	if ( element != null ) { type = element . getClass () == StringUtils.EMPTY ; } else { type = listenerInterface ; }
Code	if ( element != null ) { type = element . getClass () == StringUtils.EMPTY ; } else { type = listenerInterface ; }
Distance : 8

80
Tree	if ( element != null ) { type = element . getClass () ; } else { type += element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type += element . getClass () ; }
Distance : 6

81
Tree	if ( element != null ) { type = element . getClass () ; } else { simpleQuote = getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { simpleQuote = getClass () ; }
Distance : 6

82
Tree	if ( element != null ) { type = ( element ) type ; } else { type = TimeZoneNumberRule.INSTANCE_COLON ; }
Code	if ( element != null ) { type = ( element ) type ; } else { type = TimeZoneNumberRule.INSTANCE_COLON ; }
Distance : 10

83
Tree	if ( element != null ) { type = element . getClass () ; } else { type = CharUtils.NUL ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = CharUtils.NUL ; }
Distance : 6

84
Tree	if ( element != null ) { type = element . getClass () ; } else { type = bounds.length != null ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = bounds.length != null ; }
Distance : 6

85
Tree	if ( element != null ) { type = element . getClass () == StringUtils.EMPTY ; } else { type ++ element ; }
Code	if ( element != null ) { type = element . getClass () == StringUtils.EMPTY ; } else { type ++ element ; }
Distance : 8

86
Tree	if ( element != null ) { type = element . getClass () ; } else { type = element . class ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = element . class ; }
Distance : 6

87
Tree	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = cloned.chars . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = cloned.chars . getClass () ; }
Distance : 6

88
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = false ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = false ; }
Distance : 8

89
Tree	if ( element != null ) { type = element . getClass () ; } else { type != element ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type != element ; }
Distance : 6

90
Tree	if ( element != null ) { type = element . getClass () ; } else { type ++ element ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type ++ element ; }
Distance : 6

91
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = getClass ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = getClass ; }
Distance : 8

92
Tree	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = cloned.chars . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = cloned.chars . getClass () ; }
Distance : 6

93
Tree	if ( element != null ) { type = false ; } else { continue = element . getClass () ; }
Code	if ( element != null ) { type = false ; } else { continue = element . getClass () ; }
Distance : 10

94
Tree	if ( element != null ) { type = element . getClass () ; } else { simpleQuote = getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { simpleQuote = getClass () ; }
Distance : 6

95
Tree	if ( element != null ) { type = element . getClass () ; } else { checkBuiltInFormat = getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { checkBuiltInFormat = getClass () ; }
Distance : 6

96
Tree	if ( element != null ) { type = StringUtils.EMPTY ; } else { Boolean.TRUE = element . getClass () ; }
Code	if ( element != null ) { type = StringUtils.EMPTY ; } else { Boolean.TRUE = element . getClass () ; }
Distance : 10

97
Tree	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = false ; }
Code	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = false ; }
Distance : 6

98
Tree	if ( element != null ) { type = element . getClass () ; } else { simpleQuote = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { simpleQuote = element . getClass () ; }
Distance : 6

99
Tree	if ( element != null ) { type = element . getClass () ; } else { type = type . class ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = type . class ; }
Distance : 6

100
Tree	if ( element != null ) { element = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != null ) { element = element . getClass () ; } else { type = element . getClass () ; }
Distance : 7

101
Tree	if ( element != null ) { type = element . getClass () != null ; } else { type = CharUtils.NUL ; }
Code	if ( element != null ) { type = element . getClass () != null ; } else { type = CharUtils.NUL ; }
Distance : 8

102
Tree	if ( element != null ) { fail = element . getClass () ; } else { type = element . getClass () ; }
Code	if ( element != null ) { fail = element . getClass () ; } else { type = element . getClass () ; }
Distance : 7

103
Tree	if ( element != null ) { getClass = element . getClass () ; } else { type += element ; }
Code	if ( element != null ) { getClass = element . getClass () ; } else { type += element ; }
Distance : 7

104
Tree	if ( element != null ) { type = element * element . getClass () ; } else { type = bounds.length ; }
Code	if ( element != null ) { type = element * element . getClass () ; } else { type = bounds.length ; }
Distance : 8

105
Tree	if ( element != null ) { type = false ; } else { System.out = element . getClass () ; }
Code	if ( element != null ) { type = false ; } else { System.out = element . getClass () ; }
Distance : 10

106
Tree	if ( element != null ) { type = element . getClass () ; } else { type += element ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type += element ; }
Distance : 6

107
Tree	if ( element != null ) { type = false ; } else { type = type . getClass () ; }
Code	if ( element != null ) { type = false ; } else { type = type . getClass () ; }
Distance : 10

108
Tree	if ( element != null ) { type = type . getClass () ; } else { type = STRING_CONSTANT + STRING_CONSTANT ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type = STRING_CONSTANT + STRING_CONSTANT ; }
Distance : 6

109
Tree	if ( element != null ) { type = element * element . getClass () ; } else { type = listenerInterface ; }
Code	if ( element != null ) { type = element * element . getClass () ; } else { type = listenerInterface ; }
Distance : 8

110
Tree	if ( element != null ) { type = CharUtils.NUL ; } else { Boolean.TRUE = element . getClass () ; }
Code	if ( element != null ) { type = CharUtils.NUL ; } else { Boolean.TRUE = element . getClass () ; }
Distance : 10

111
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type += element ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type += element ; }
Distance : 8

112
Tree	if ( element != null ) { this . type = type . getClass () ; } else { type = null ; }
Code	if ( element != null ) { this . type = type . getClass () ; } else { type = null ; }
Distance : 9

113
Tree	if ( element != null ) { element = element . getClass () ; } else { type = STRING_CONSTANT + STRING_CONSTANT ; }
Code	if ( element != null ) { element = element . getClass () ; } else { type = STRING_CONSTANT + STRING_CONSTANT ; }
Distance : 6

114
Tree	if ( element != null ) { type = true ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = true ; } else { type = element . getClass () ; }
Distance : 10

115
Tree	if ( element != null ) { type = type . getClass () ; } else { type += element . getClass () ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type += element . getClass () ; }
Distance : 7

116
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = null ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = null ; }
Distance : 8

117
Tree	if ( element != null ) { type = element . getClass () ; } else { continue = element . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { continue = element . getClass () ; }
Distance : 6

118
Tree	if ( element != null ) { type = false ; } else { Boolean.TRUE = element . getClass () ; }
Code	if ( element != null ) { type = false ; } else { Boolean.TRUE = element . getClass () ; }
Distance : 10

119
Tree	if ( element != null ) { type = element . getClass () ; } else { type = type * element ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = type * element ; }
Distance : 6

120
Tree	if ( element != null ) { type = element . getClass () != null ; } else { type = bounds.length ; }
Code	if ( element != null ) { type = element . getClass () != null ; } else { type = bounds.length ; }
Distance : 8

121
Tree	if ( element != null ) { type = element . getClass () ; } else { type += type ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type += type ; }
Distance : 6

122
Tree	if ( element != null ) { next = element . getClass () ; } else { type = element + STRING_CONSTANT ; }
Code	if ( element != null ) { next = element . getClass () ; } else { type = element + STRING_CONSTANT ; }
Distance : 6

123
Tree	if ( element != null ) { type = null ; } else { type = type . getClass () ; }
Code	if ( element != null ) { type = null ; } else { type = type . getClass () ; }
Distance : 10

124
Tree	if ( element != null ) { type = ( element ) type ; } else { type = getClass ; }
Code	if ( element != null ) { type = ( element ) type ; } else { type = getClass ; }
Distance : 10

125
Tree	if ( element != null ) { getClass = element . getClass () ; } else { Boolean.TRUE = element . getClass () ; }
Code	if ( element != null ) { getClass = element . getClass () ; } else { Boolean.TRUE = element . getClass () ; }
Distance : 7

126
Tree	if ( element != null ) { type = element . getClass () ; } else { continue = getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { continue = getClass () ; }
Distance : 6

127
Tree	if ( element != null ) { next = false ; } else { type = element . getClass () ; }
Code	if ( element != null ) { next = false ; } else { type = element . getClass () ; }
Distance : 11

128
Tree	if ( element != null ) { type = Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES ; } else { type = element . getClass () ; }
Distance : 10

129
Tree	if ( element != null ) { type = lhs.length ; } else { Boolean.TRUE = element . getClass () ; }
Code	if ( element != null ) { type = lhs.length ; } else { Boolean.TRUE = element . getClass () ; }
Distance : 10

130
Tree	if ( element != null ) { type = lhs.length ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = lhs.length ; } else { type = element . getClass () ; }
Distance : 10

131
Tree	if ( element != null ) { getClass = element . getClass () ; } else { Boolean.TRUE = getClass () ; }
Code	if ( element != null ) { getClass = element . getClass () ; } else { Boolean.TRUE = getClass () ; }
Distance : 7

132
Tree	if ( element != null ) { type = element . getClass () ; } else { type = true ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = true ; }
Distance : 6

133
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type ++ element ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type ++ element ; }
Distance : 8

134
Tree	if ( element != null ) { type = element . getClass () ; } else { type ++ element ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type ++ element ; }
Distance : 6

135
Tree	if ( element != null ) { type = null ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = null ; } else { type = element . getClass () ; }
Distance : 10

136
Tree	if ( element != null ) { getClass = element . getClass () ; } else { type = element + STRING_CONSTANT ; }
Code	if ( element != null ) { getClass = element . getClass () ; } else { type = element + STRING_CONSTANT ; }
Distance : 6

137
Tree	if ( element != null ) { type = element . getClass () ; } else { type = type + STRING_CONSTANT ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = type + STRING_CONSTANT ; }
Distance : 5

138
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = bounds.length ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = bounds.length ; }
Distance : 8

139
Tree	if ( element != null ) { type = element . getClass () == type ; } else { type = CharUtils.NUL ; }
Code	if ( element != null ) { type = element . getClass () == type ; } else { type = CharUtils.NUL ; }
Distance : 8

140
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type != element ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type != element ; }
Distance : 8

141
Tree	if ( element != null ) { type = element . getClass () ; } else { simpleQuote = false ; }
Code	if ( element != null ) { type = element . getClass () ; } else { simpleQuote = false ; }
Distance : 6

142
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type -= type ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type -= type ; }
Distance : 8

143
Tree	if ( element != null ) { this . element = element . getClass () ; } else { type = false ; }
Code	if ( element != null ) { this . element = element . getClass () ; } else { type = false ; }
Distance : 9

144
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = CharUtils.NUL ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = CharUtils.NUL ; }
Distance : 8

145
Tree	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = true ; }
Code	if ( element != null ) { type = element . getClass () ; } else { Boolean.TRUE = true ; }
Distance : 6

146
Tree	if ( element != null ) { type = false ; } else { continue = element . getClass () ; }
Code	if ( element != null ) { type = false ; } else { continue = element . getClass () ; }
Distance : 10

147
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type = super(); ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type = super(); ; }
Distance : 8

148
Tree	if ( element != null ) { element = element . getClass () ; } else { type = element + STRING_CONSTANT ; }
Code	if ( element != null ) { element = element . getClass () ; } else { type = element + STRING_CONSTANT ; }
Distance : 6

149
Tree	if ( element != null ) { this . type = type . getClass () ; } else { type = false ; }
Code	if ( element != null ) { this . type = type . getClass () ; } else { type = false ; }
Distance : 9

150
Tree	if ( element != null ) { type = element . getClass () ; } else { type = CharUtils.NUL != null ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = CharUtils.NUL != null ; }
Distance : 6

151
Tree	if ( element != null ) { type = element . getClass () ; } else { type = CharUtils.NUL != null ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = CharUtils.NUL != null ; }
Distance : 6

152
Tree	if ( element != null ) { type = element . getClass () ; } else { type = listenerInterface != null ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = listenerInterface != null ; }
Distance : 6

153
Tree	if ( element != null ) { fail = false ; } else { type = element . getClass () ; }
Code	if ( element != null ) { fail = false ; } else { type = element . getClass () ; }
Distance : 11

154
Tree	if ( element != null ) { type = element . getClass () ; } else { type = listenerInterface ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = listenerInterface ; }
Distance : 6

155
Tree	if ( element != null ) { type = element . getClass () ; } else { type -= type ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type -= type ; }
Distance : 6

156
Tree	if ( element != null ) { this . type = type . getClass () ; } else { type -= element ; }
Code	if ( element != null ) { this . type = type . getClass () ; } else { type -= element ; }
Distance : 9

157
Tree	if ( element != null ) { type = element . getClass () != null ; } else { type = TimeZoneNumberRule.INSTANCE_COLON ; }
Code	if ( element != null ) { type = element . getClass () != null ; } else { type = TimeZoneNumberRule.INSTANCE_COLON ; }
Distance : 8

158
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type += type ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type += type ; }
Distance : 8

159
Tree	if ( element != null ) { element = null ; } else { type = element . getClass () ; }
Code	if ( element != null ) { element = null ; } else { type = element . getClass () ; }
Distance : 11

160
Tree	if ( element != null ) { type = type . getClass () ; } else { type = element + STRING_CONSTANT ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type = element + STRING_CONSTANT ; }
Distance : 6

161
Tree	if ( element != null ) { type = element . getClass () ; } else { type = this . element ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type = this . element ; }
Distance : 6

162
Tree	if ( element != null ) { type = type . getClass () ; } else { type = this . type ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type = this . type ; }
Distance : 7

163
Tree	if ( element != null ) { type = type . getClass () ; } else { type = element * element ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type = element * element ; }
Distance : 7

164
Tree	if ( type != null ) { type = element . getClass () ; } else { type = STRING_CONSTANT + STRING_CONSTANT ; }
Code	if ( type != null ) { type = element . getClass () ; } else { type = STRING_CONSTANT + STRING_CONSTANT ; }
Distance : 6

165
Tree	if ( element != null ) { type = element . getClass () ; } else { type += type . getClass () ; }
Code	if ( element != null ) { type = element . getClass () ; } else { type += type . getClass () ; }
Distance : 6

166
Tree	if ( element != null ) { this . type = element . getClass () ; } else { type -= element ; }
Code	if ( element != null ) { this . type = element . getClass () ; } else { type -= element ; }
Distance : 8

167
Tree	if ( element != null ) { type = type . getClass () ; } else { type = element / element ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type = element / element ; }
Distance : 7

168
Tree	if ( element != null ) { type = super(); ; } else { type = element . getClass () ; }
Code	if ( element != null ) { type = super(); ; } else { type = element . getClass () ; }
Distance : 10

169
Tree	if ( element != null ) { this . type = type . getClass () ; } else { type -= type ; }
Code	if ( element != null ) { this . type = type . getClass () ; } else { type -= type ; }
Distance : 9

170
Tree	if ( element != null ) { this . element = element . getClass () ; } else { type = null ; }
Code	if ( element != null ) { this . element = element . getClass () ; } else { type = null ; }
Distance : 9

171
Tree	if ( element != null ) { element = element . getClass () ; } else { type = this . type ; }
Code	if ( element != null ) { element = element . getClass () ; } else { type = this . type ; }
Distance : 7

172
Tree	if ( element != null ) { type = type . getClass () ; } else { type += type . getClass () ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type += type . getClass () ; }
Distance : 7

173
Tree	if ( element != null ) { type = type . getClass () ; } else { type -= element ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type -= element ; }
Distance : 7

174
Tree	if ( element != null ) { type = type . getClass () ; } else { type -= type ; }
Code	if ( element != null ) { type = type . getClass () ; } else { type -= type ; }
Distance : 7

175
Tree	if ( element != null ) { element = element . getClass () ; } else { type = element . class ; }
Code	if ( element != null ) { element = element . getClass () ; } else { type = element . class ; }
Distance : 7

========================================================================


========================================================================
Example Number: 11
Parent Code is: 
return m . containsKey ( value ) ;
-------------------------------------------------------------------------------
Child code is: 
return m != null && m . containsKey ( value ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (32 (800{val=m}) (235{val=.}) (802{val=containsKey}) (214{val=(}) (800{val=value}) (215{val=)})) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (41 (329{val=return}) (27 (27 (800{val=m}) (242{val=!=}) (500{val=null})) (249{val=&&}) (32 (800{val=m}) (235{val=.}) (802{val=containsKey}) (214{val=(}) (800{val=value}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/34/parent/src_main_java_org_apache_commons_lang3_builder_ToStringStyle.java
-------------------------------------------------------------------------------
Edit Distance : 4
-------------------------------------------------------------------------------
Cadidate List Length : 136
Wrong
========================================================================
False

0
Tree	return new StringBuffer ( value , false ) ;
Code	return new StringBuffer ( value , false ) ;
Distance : 9

1
Tree	return m . containsKey ( value , true ) ;
Code	return m . containsKey ( value , true ) ;
Distance : 6

2
Tree	return value . containsKey ( m ) ;
Code	return value . containsKey ( m ) ;
Distance : 6

3
Tree	return new ImmutablePair ( value , NUMBER_CONSTANT ) ;
Code	return new ImmutablePair ( value , NUMBER_CONSTANT ) ;
Distance : 9

4
Tree	return new StringBuffer ( value , m ) ;
Code	return new StringBuffer ( value , m ) ;
Distance : 9

5
Tree	return m . containsKey () . value () . value ( value ) ;
Code	return m . containsKey () . value () . value ( value ) ;
Distance : 7

6
Tree	return value . containsKey ( m ) . containsKey () ;
Code	return value . containsKey ( m ) . containsKey () ;
Distance : 8

7
Tree	return value . containsKey () . value () . value ( m ) ;
Code	return value . containsKey () . value () . value ( m ) ;
Distance : 9

8
Tree	return m . containsKey ( m ) ;
Code	return m . containsKey ( m ) ;
Distance : 5

9
Tree	return value . m ( value ) ;
Code	return value . m ( value ) ;
Distance : 6

10
Tree	return m . containsKey ( value , value ) ;
Code	return m . containsKey ( value , value ) ;
Distance : 6

11
Tree	return value . containsKey ( value ) ;
Code	return value . containsKey ( value ) ;
Distance : 5

12
Tree	return m + this . m . containsKey ( CHAR_CONS , CHAR_CONS ) ;
Code	return m + this . m . containsKey ( CHAR_CONS , CHAR_CONS ) ;
Distance : 6

13
Tree	return return ( m ) ;
Code	return return ( m ) ;
Distance : 8

14
Tree	return new ImmutablePair ( value , false ) ;
Code	return new ImmutablePair ( value , false ) ;
Distance : 9

15
Tree	return m + NUMBER_CONSTANT ;
Code	return m + NUMBER_CONSTANT ;
Distance : 9

16
Tree	return new StringBuffer ( value ) ;
Code	return new StringBuffer ( value ) ;
Distance : 7

17
Tree	return m . containsKey () . value ( value ) ;
Code	return m . containsKey () . value ( value ) ;
Distance : 5

18
Tree	return new StringBuffer ( value , NUMBER_CONSTANT ) ;
Code	return new StringBuffer ( value , NUMBER_CONSTANT ) ;
Distance : 9

19
Tree	return m ;
Code	return m ;
Distance : 9

20
Tree	return value . containsKey () . value ( value ) ;
Code	return value . containsKey () . value ( value ) ;
Distance : 6

21
Tree	return new ImmutablePair ( value ) ;
Code	return new ImmutablePair ( value ) ;
Distance : 7

22
Tree	return null ;
Code	return null ;
Distance : 9

23
Tree	return this . m . containsKey ( value , toUpperCase ) ;
Code	return this . m . containsKey ( value , toUpperCase ) ;
Distance : 6

24
Tree	return m ( value , value ) ;
Code	return m ( value , value ) ;
Distance : 7

25
Tree	return m ( value , m ) ;
Code	return m ( value , m ) ;
Distance : 7

26
Tree	return m . containsKey ( value , m ) ;
Code	return m . containsKey ( value , m ) ;
Distance : 6

27
Tree	return new ExtendedMessageFormat ( value , false ) ;
Code	return new ExtendedMessageFormat ( value , false ) ;
Distance : 9

28
Tree	return new ImmutablePair ( value , false ) . containsKey ( value ) ;
Code	return new ImmutablePair ( value , false ) . containsKey ( value ) ;
Distance : 7

29
Tree	return m ( m , m , false ) ;
Code	return m ( m , m , false ) ;
Distance : 7

30
Tree	return m () . value ( m ) ;
Code	return m () . value ( m ) ;
Distance : 6

31
Tree	return value . containsKey ( value ) . containsKey ( value ) ;
Code	return value . containsKey ( value ) . containsKey ( value ) ;
Distance : 6

32
Tree	return value . containsKey () ;
Code	return value . containsKey () ;
Distance : 8

33
Tree	return new ExtendedMessageFormat ( value , false ) . containsKey ( value ) ;
Code	return new ExtendedMessageFormat ( value , false ) . containsKey ( value ) ;
Distance : 7

34
Tree	return new UnicodeUnescaper ( value , false ) ;
Code	return new UnicodeUnescaper ( value , false ) ;
Distance : 9

35
Tree	return m ( value , m , true ) ;
Code	return m ( value , m , true ) ;
Distance : 7

36
Tree	return value . containsKey ( m ) - NUMBER_CONSTANT ;
Code	return value . containsKey ( m ) - NUMBER_CONSTANT ;
Distance : 8

37
Tree	return value + this . value . containsKey ( CHAR_CONS , CHAR_CONS ) ;
Code	return value + this . value . containsKey ( CHAR_CONS , CHAR_CONS ) ;
Distance : 8

38
Tree	return m . containsKey () ; CharSequence
Code	return m . containsKey () ; CharSequence
Distance : 8

39
Tree	return this . m ;
Code	return this . m ;
Distance : 9

40
Tree	return m . containsKey ( m ) . containsKey () ;
Code	return m . containsKey ( m ) . containsKey () ;
Distance : 7

41
Tree	return new UnicodeUnescaper ( value , false ) . containsKey ( value ) ;
Code	return new UnicodeUnescaper ( value , false ) . containsKey ( value ) ;
Distance : 7

42
Tree	return value . containsKey ( value ) . containsKey () ;
Code	return value . containsKey ( value ) . containsKey () ;
Distance : 8

43
Tree	return return ( value ) ; CharSequence
Code	return return ( value ) ; CharSequence
Distance : 8

44
Tree	return this . m . containsKey () . value ( m ) ;
Code	return this . m . containsKey () . value ( m ) ;
Distance : 8

45
Tree	return m . containsKey ( value , new Double ( value ) ) ;
Code	return m . containsKey ( value , new Double ( value ) ) ;
Distance : 8

46
Tree	return new ImmutablePair ( value , m ) ;
Code	return new ImmutablePair ( value , m ) ;
Distance : 9

47
Tree	return m . value ( value ) ;
Code	return m . value ( value ) ;
Distance : 5

48
Tree	return value . containsKey ( value ) - NUMBER_CONSTANT ;
Code	return value . containsKey ( value ) - NUMBER_CONSTANT ;
Distance : 7

49
Tree	return m . containsKey ( STRING_CONSTANT , value ) ;
Code	return m . containsKey ( STRING_CONSTANT , value ) ;
Distance : 6

50
Tree	return this . m . containsKey ( value , DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE ) ;
Code	return this . m . containsKey ( value , DEFAULT_NO_NULL_ELEMENTS_COLLECTION_EX_MESSAGE ) ;
Distance : 6

51
Tree	return m ( m , m ) ;
Code	return m ( m , m ) ;
Distance : 7

52
Tree	return this . value . containsKey ( m ) ;
Code	return this . value . containsKey ( m ) ;
Distance : 6

53
Tree	return m ( m , value ) ;
Code	return m ( m , value ) ;
Distance : 6

54
Tree	return m . containsKey () ;
Code	return m . containsKey () ;
Distance : 7

55
Tree	return continue; ;
Code	return continue; ;
Distance : 10

56
Tree	return m . containsKey ( value ) . containsKey ( m ) ;
Code	return m . containsKey ( value ) . containsKey ( m ) ;
Distance : 6

57
Tree	return value ;
Code	return value ;
Distance : 9

58
Tree	return m . containsKey ( new StringBuilder ( value , false ) ) ;
Code	return m . containsKey ( new StringBuilder ( value , false ) ) ;
Distance : 9

59
Tree	return m () . containsKey ( value ) ; pattern
Code	return m () . containsKey ( value ) ; pattern
Distance : 5

60
Tree	return m . m ( value ) ;
Code	return m . m ( value ) ;
Distance : 5

61
Tree	return this . m . containsKey ( value , typeArguments.length ) ;
Code	return this . m . containsKey ( value , typeArguments.length ) ;
Distance : 6

62
Tree	return value . containsKey ( NUMBER_CONSTANT , value ) ;
Code	return value . containsKey ( NUMBER_CONSTANT , value ) ;
Distance : 7

63
Tree	return value + NUMBER_CONSTANT ;
Code	return value + NUMBER_CONSTANT ;
Distance : 10

64
Tree	return m ; CharSequence
Code	return m ; CharSequence
Distance : 10

65
Tree	return value . containsKey ( STRING_CONSTANT , m ) ;
Code	return value . containsKey ( STRING_CONSTANT , m ) ;
Distance : 8

66
Tree	return m . containsKey ( m . value ( value ) ) ;
Code	return m . containsKey ( m . value ( value ) ) ;
Distance : 5

67
Tree	return value . containsKey ( STRING_CONSTANT , value ) ;
Code	return value . containsKey ( STRING_CONSTANT , value ) ;
Distance : 7

68
Tree	return m . containsKey ( value . value ( value ) ) ;
Code	return m . containsKey ( value . value ( value ) ) ;
Distance : 6

69
Tree	return NUMBER_CONSTANT / value ; pattern
Code	return NUMBER_CONSTANT / value ; pattern
Distance : 10

70
Tree	return value . containsKey ( NUMBER_CONSTANT , m ) ;
Code	return value . containsKey ( NUMBER_CONSTANT , m ) ;
Distance : 8

71
Tree	return m ( value , value , false ) ;
Code	return m ( value , value , false ) ;
Distance : 8

72
Tree	return this . m ; CharSequence
Code	return this . m ; CharSequence
Distance : 10

73
Tree	return this . m ; pattern
Code	return this . m ; pattern
Distance : 10

74
Tree	return this . value . value () . value ( value ) ;
Code	return this . value . value () . value ( value ) ;
Distance : 7

75
Tree	return this . m . containsKey () . value ( value ) ;
Code	return this . m . containsKey () . value ( value ) ;
Distance : 7

76
Tree	return m . containsKey ( value ) - NUMBER_CONSTANT ;
Code	return m . containsKey ( value ) - NUMBER_CONSTANT ;
Distance : 6

77
Tree	return m . containsKey ( value . value ( m ) ) ;
Code	return m . containsKey ( value . value ( m ) ) ;
Distance : 7

78
Tree	return m . containsKey ( value , new Random ( value ) ) ;
Code	return m . containsKey ( value , new Random ( value ) ) ;
Distance : 8

79
Tree	return value + this . m . containsKey ( CHAR_CONS , CHAR_CONS ) ;
Code	return value + this . m . containsKey ( CHAR_CONS , CHAR_CONS ) ;
Distance : 7

80
Tree	return NUMBER_CONSTANT / value ; CharSequence
Code	return NUMBER_CONSTANT / value ; CharSequence
Distance : 10

81
Tree	return this . value ;
Code	return this . value ;
Distance : 8

82
Tree	return this . m . containsKey ( value ) ;
Code	return this . m . containsKey ( value ) ;
Distance : 4

83
Tree	return NUMBER_CONSTANT / value ;
Code	return NUMBER_CONSTANT / value ;
Distance : 9

84
Tree	return new UnicodeUnescaper ( value ) ;
Code	return new UnicodeUnescaper ( value ) ;
Distance : 7

85
Tree	return new ExtendedMessageFormat ( value , NUMBER_CONSTANT ) ;
Code	return new ExtendedMessageFormat ( value , NUMBER_CONSTANT ) ;
Distance : 9

86
Tree	return new UnicodeUnescaper ( value , NUMBER_CONSTANT ) ;
Code	return new UnicodeUnescaper ( value , NUMBER_CONSTANT ) ;
Distance : 9

87
Tree	return m . containsKey ( STRING_CONSTANT , m ) ;
Code	return m . containsKey ( STRING_CONSTANT , m ) ;
Distance : 7

88
Tree	return m . containsKey ( NUMBER_CONSTANT , value ) ;
Code	return m . containsKey ( NUMBER_CONSTANT , value ) ;
Distance : 6

89
Tree	return new ExtendedMessageFormat ( value , m ) ;
Code	return new ExtendedMessageFormat ( value , m ) ;
Distance : 9

90
Tree	return m . containsKey ( m , false ) ;
Code	return m . containsKey ( m , false ) ;
Distance : 7

91
Tree	return m . containsKey ( new IDKey ( value , false ) ) ;
Code	return m . containsKey ( new IDKey ( value , false ) ) ;
Distance : 9

92
Tree	return m . containsKey ( value ) . containsKey ( value ) ;
Code	return m . containsKey ( value ) . containsKey ( value ) ;
Distance : 5

93
Tree	return m . containsKey ( m , m ) ;
Code	return m . containsKey ( m , m ) ;
Distance : 7

94
Tree	return return; ;
Code	return return; ;
Distance : 10

95
Tree	return new UnicodeUnescaper ( value , m ) ;
Code	return new UnicodeUnescaper ( value , m ) ;
Distance : 9

96
Tree	return m . containsKey ( value , false ) ;
Code	return m . containsKey ( value , false ) ;
Distance : 6

97
Tree	return super(); ;
Code	return super(); ;
Distance : 10

98
Tree	return m . containsKey ( value ) ;
Code	return m . containsKey ( value ) ;
Distance : 4

99
Tree	return m . containsKey ( m ) - NUMBER_CONSTANT ;
Code	return m . containsKey ( m ) - NUMBER_CONSTANT ;
Distance : 7

100
Tree	return NUMBER_CONSTANT / m ;
Code	return NUMBER_CONSTANT / m ;
Distance : 9

101
Tree	return new ExtendedMessageFormat ( value ) ;
Code	return new ExtendedMessageFormat ( value ) ;
Distance : 7

102
Tree	return m . containsKey ( NUMBER_CONSTANT , m ) ;
Code	return m . containsKey ( NUMBER_CONSTANT , m ) ;
Distance : 7

103
Tree	return value . containsKey ( value , m ) ;
Code	return value . containsKey ( value , m ) ;
Distance : 7

104
Tree	return m () . containsKey ( value ) ; CharSequence
Code	return m () . containsKey ( value ) ; CharSequence
Distance : 5

105
Tree	return this . m . containsKey ( value , Locale.ENGLISH ) ;
Code	return this . m . containsKey ( value , Locale.ENGLISH ) ;
Distance : 6

106
Tree	return value . containsKey ( value ) ;
Code	return value . containsKey ( value ) ;
Distance : 5

107
Tree	return value . containsKey ( value , false ) ;
Code	return value . containsKey ( value , false ) ;
Distance : 7

108
Tree	return m . containsKey ( m ) . containsKey ( value ) ;
Code	return m . containsKey ( m ) . containsKey ( value ) ;
Distance : 4

109
Tree	return value . containsKey ( value . value ( value ) ) ;
Code	return value . containsKey ( value . value ( value ) ) ;
Distance : 7

110
Tree	return m ( value ) ; pattern
Code	return m ( value ) ; pattern
Distance : 7

111
Tree	return this . value . containsKey ( value ) ;
Code	return this . value . containsKey ( value ) ;
Distance : 5

112
Tree	return this . m . containsKey ( m ) ;
Code	return this . m . containsKey ( m ) ;
Distance : 5

113
Tree	return value . containsKey ( m ) ;
Code	return value . containsKey ( m ) ;
Distance : 6

114
Tree	return m . containsKey ( value , new StringBuilder ( value ) ) ;
Code	return m . containsKey ( value , new StringBuilder ( value ) ) ;
Distance : 8

115
Tree	return m . containsKey ( new Object ( value , false ) ) ;
Code	return m . containsKey ( new Object ( value , false ) ) ;
Distance : 9

116
Tree	return m . containsKey ( new ByteArrayInputStream ( value , false ) ) ;
Code	return m . containsKey ( new ByteArrayInputStream ( value , false ) ) ;
Distance : 9

117
Tree	return m ( value , m , false ) ;
Code	return m ( value , m , false ) ;
Distance : 7

118
Tree	return this . value . containsKey () . value ( m ) ;
Code	return this . value . containsKey () . value ( m ) ;
Distance : 8

119
Tree	return m () . containsKey ( value ) ;
Code	return m () . containsKey ( value ) ;
Distance : 4

120
Tree	return m . containsKey () . value () . value ( m ) ;
Code	return m . containsKey () . value () . value ( m ) ;
Distance : 8

121
Tree	return m + this . value . containsKey ( CHAR_CONS , CHAR_CONS ) ;
Code	return m + this . value . containsKey ( CHAR_CONS , CHAR_CONS ) ;
Distance : 7

122
Tree	return m . m ( m ) ;
Code	return m . m ( m ) ;
Distance : 6

123
Tree	return new StringBuffer ( value , false ) . containsKey ( value ) ;
Code	return new StringBuffer ( value , false ) . containsKey ( value ) ;
Distance : 7

124
Tree	return m . containsKey ( m ) ;
Code	return m . containsKey ( m ) ;
Distance : 5

125
Tree	return m ( value ) ;
Code	return m ( value ) ;
Distance : 6

126
Tree	return value . containsKey () . value () . value ( value ) ;
Code	return value . containsKey () . value () . value ( value ) ;
Distance : 8

127
Tree	return m . containsKey ( value , new Boolean ( value ) ) ;
Code	return m . containsKey ( value , new Boolean ( value ) ) ;
Distance : 8

128
Tree	return m . containsKey ( value ) . containsKey () ;
Code	return m . containsKey ( value ) . containsKey () ;
Distance : 7

129
Tree	return m + NUMBER_CONSTANT ; CharSequence
Code	return m + NUMBER_CONSTANT ; CharSequence
Distance : 10

130
Tree	return m + NUMBER_CONSTANT ; pattern
Code	return m + NUMBER_CONSTANT ; pattern
Distance : 10

131
Tree	return m . containsKey () . value ( m ) ;
Code	return m . containsKey () . value ( m ) ;
Distance : 6

132
Tree	return value . containsKey () . value ( m ) ;
Code	return value . containsKey () . value ( m ) ;
Distance : 7

133
Tree	return m . containsKey ( value ) ;
Code	return m . containsKey ( value ) ;
Distance : 4

134
Tree	return m ; pattern
Code	return m ; pattern
Distance : 10

135
Tree	return m . containsKey () ; pattern
Code	return m . containsKey () ; pattern
Distance : 8

========================================================================


========================================================================
Example Number: 12
Parent Code is: 
CharSequence cs
-------------------------------------------------------------------------------
Child code is: 
String cs
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (44 (43 (801{val=CharSequence})) (800{val=cs})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (44 (43 (801{val=String})) (800{val=cs})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/30/parent/src_main_java_org_apache_commons_lang3_StringUtils.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 68
Correct
========================================================================
True

0
Tree	final CharSequence cs
Code	final CharSequence cs
Distance : 2

1
Tree	CharSequence cs
Code	CharSequence cs
Distance : 1

2
Tree	short . . . cs
Code	short . . . cs
Distance : 4

3
Tree	final char . . . cs
Code	final char . . . cs
Distance : 5

4
Tree	int . . . cs
Code	int . . . cs
Distance : 4

5
Tree	final int . . . cs
Code	final int . . . cs
Distance : 5

6
Tree	String [] cs
Code	String [] cs
Distance : 1

7
Tree	double cs
Code	double cs
Distance : 1

8
Tree	short cs
Code	short cs
Distance : 1

9
Tree	int cs
Code	int cs
Distance : 1

10
Tree	sz cs
Code	sz cs
Distance : 1

11
Tree	cs . . . cs
Code	cs . . . cs
Distance : 4

12
Tree	String cs
Code	String cs
Distance : 0

13
Tree	cs . . . cs buffer
Code	cs . . . cs buffer
Distance : 5

14
Tree	CharSequence cs
Code	CharSequence cs
Distance : 1

15
Tree	cs cs
Code	cs cs
Distance : 1

16
Tree	cs < cs , cs > cs Date
Code	cs < cs , cs > cs Date
Distance : 7

17
Tree	cs < cs > cs [
Code	cs < cs > cs [
Distance : 5

18
Tree	final
Code	final
Distance : 2

19
Tree	cs < cs , cs > cs [
Code	cs < cs , cs > cs [
Distance : 7

20
Tree	cs . . . cs [
Code	cs . . . cs [
Distance : 5

21
Tree	cs . . . cs Date
Code	cs . . . cs Date
Distance : 5

22
Tree	cs cs buffer
Code	cs cs buffer
Distance : 2

23
Tree	static CharSequence cs
Code	static CharSequence cs
Distance : 2

24
Tree	cs cs [
Code	cs cs [
Distance : 2

25
Tree	cs cs
Code	cs cs
Distance : 1

26
Tree	private CharSequence cs
Code	private CharSequence cs
Distance : 2

27
Tree	static cs . . . cs
Code	static cs . . . cs
Distance : 5

28
Tree	String cs
Code	String cs
Distance : 0

29
Tree	CharSequence [] cs
Code	CharSequence [] cs
Distance : 2

30
Tree	cs cs Date
Code	cs cs Date
Distance : 2

31
Tree	CharSequence [] cs pattern
Code	CharSequence [] cs pattern
Distance : 3

32
Tree	private cs . . . cs
Code	private cs . . . cs
Distance : 5

33
Tree	; cs
Code	; cs
Distance : 1

34
Tree	<
Code	<
Distance : 2

35
Tree	String
Code	String
Distance : 1

36
Tree	double . . . cs
Code	double . . . cs
Distance : 4

37
Tree	final cs . . . cs
Code	final cs . . . cs
Distance : 5

38
Tree	cs < cs > cs
Code	cs < cs > cs
Distance : 4

39
Tree	cs < cs > cs buffer
Code	cs < cs > cs buffer
Distance : 5

40
Tree	char . . . cs
Code	char . . . cs
Distance : 4

41
Tree	CharSequence
Code	CharSequence
Distance : 2

42
Tree	final long cs
Code	final long cs
Distance : 2

43
Tree	cs < cs , cs > cs
Code	cs < cs , cs > cs
Distance : 6

44
Tree	final int cs
Code	final int cs
Distance : 2

45
Tree	protected cs < cs > cs
Code	protected cs < cs > cs
Distance : 5

46
Tree	final short cs
Code	final short cs
Distance : 2

47
Tree	char cs
Code	char cs
Distance : 1

48
Tree	final char cs
Code	final char cs
Distance : 2

49
Tree	@ String CharSequence cs
Code	@ String CharSequence cs
Distance : 2

50
Tree	@ CharSequence String cs
Code	@ CharSequence String cs
Distance : 2

51
Tree	@ String String cs
Code	@ String String cs
Distance : 2

52
Tree	static cs < cs > cs
Code	static cs < cs > cs
Distance : 5

53
Tree	private cs < cs > cs
Code	private cs < cs > cs
Distance : 5

54
Tree	protected cs . . . cs
Code	protected cs . . . cs
Distance : 5

55
Tree	@ CharSequence CharSequence cs
Code	@ CharSequence CharSequence cs
Distance : 3

56
Tree	CharSequence [] cs CharSequence
Code	CharSequence [] cs CharSequence
Distance : 3

57
Tree	CharSequence cs pattern
Code	CharSequence cs pattern
Distance : 2

58
Tree	final String cs
Code	final String cs
Distance : 1

59
Tree	CharSequence cs
Code	CharSequence cs
Distance : 1

60
Tree	cs < cs > cs Date
Code	cs < cs > cs Date
Distance : 5

61
Tree	final short . . . cs
Code	final short . . . cs
Distance : 5

62
Tree	CharSequence cs CharSequence
Code	CharSequence cs CharSequence
Distance : 2

63
Tree	final long . . . cs
Code	final long . . . cs
Distance : 5

64
Tree	final cs < cs > cs
Code	final cs < cs > cs
Distance : 5

65
Tree	CharSequence cs CharSequence
Code	CharSequence cs CharSequence
Distance : 2

66
Tree	CharSequence cs pattern
Code	CharSequence cs pattern
Distance : 2

67
Tree	cs < cs , cs > cs buffer
Code	cs < cs , cs > cs buffer
Distance : 7

========================================================================


========================================================================
Example Number: 13
Parent Code is: 
Calendar c = new GregorianCalendar ( mTimeZone ) ;
-------------------------------------------------------------------------------
Child code is: 
Calendar c = new GregorianCalendar ( mTimeZone , mLocale ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Calendar})) (59 (800{val=c}) (204{val==}) (14 (304{val=new}) (43 (801{val=GregorianCalendar})) (214{val=(}) (800{val=mTimeZone}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (43 (801{val=Calendar})) (59 (800{val=c}) (204{val==}) (14 (304{val=new}) (43 (801{val=GregorianCalendar})) (214{val=(}) (800{val=mTimeZone}) (234{val=,}) (800{val=mLocale}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/26/parent/src_main_java_org_apache_commons_lang3_time_FastDateFormat.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 160
Wrong
========================================================================
False

0
Tree	Calendar c = new Calendar ( mTimeZone ) ;
Code	Calendar c = new Calendar ( mTimeZone ) ;
Distance : 3

1
Tree	Calendar c = new Calendar ( mTimeZone ) . getInstance () ;
Code	Calendar c = new Calendar ( mTimeZone ) . getInstance () ;
Distance : 5

2
Tree	Calendar c = new Calendar () ;
Code	Calendar c = new Calendar () ;
Distance : 6

3
Tree	Calendar c = new Calendar ( mTimeZone ) . getGmtTimeZone () ;
Code	Calendar c = new Calendar ( mTimeZone ) . getGmtTimeZone () ;
Distance : 5

4
Tree	protected Calendar c = new Calendar ( mTimeZone ) ;
Code	protected Calendar c = new Calendar ( mTimeZone ) ;
Distance : 4

5
Tree	Calendar c ;
Code	Calendar c ;
Distance : 8

6
Tree	Calendar c = new Calendar ( mTimeZone , mLocale ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale ) ;
Distance : 1

7
Tree	GregorianCalendar c = NUMBER_CONSTANT ;
Code	GregorianCalendar c = NUMBER_CONSTANT ;
Distance : 8

8
Tree	Calendar c = new Calendar ( mTimeZone . getInstance ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone . getInstance ( STRING_CONSTANT ) ) ;
Distance : 6

9
Tree	Calendar mLocale = NUMBER_CONSTANT ;
Code	Calendar mLocale = NUMBER_CONSTANT ;
Distance : 8

10
Tree	Calendar c = new Calendar ( Calendar.JANUARY , mLocale ) ;
Code	Calendar c = new Calendar ( Calendar.JANUARY , mLocale ) ;
Distance : 2

11
Tree	Calendar c = new Calendar ( mTimeZone , new char [ Calendar.DAY_OF_WEEK ] ) ;
Code	Calendar c = new Calendar ( mTimeZone , new char [ Calendar.DAY_OF_WEEK ] ) ;
Distance : 6

12
Tree	Calendar c = new Calendar ( this , mLocale ) ;
Code	Calendar c = new Calendar ( this , mLocale ) ;
Distance : 2

13
Tree	Calendar c = new Calendar ( NUMBER_CONSTANT , mTimeZone ) ;
Code	Calendar c = new Calendar ( NUMBER_CONSTANT , mTimeZone ) ;
Distance : 3

14
Tree	Calendar c = new Calendar < mLocale > ( mTimeZone , mLocale ) ;
Code	Calendar c = new Calendar < mLocale > ( mTimeZone , mLocale ) ;
Distance : 4

15
Tree	Calendar c = Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES ;
Code	Calendar c = Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES ;
Distance : 7

16
Tree	Calendar c = newCalendar () ;
Code	Calendar c = newCalendar () ;
Distance : 7

17
Tree	Calendar c = new Calendar < c > ( mTimeZone , mLocale ) ;
Code	Calendar c = new Calendar < c > ( mTimeZone , mLocale ) ;
Distance : 4

18
Tree	Calendar c = new Calendar ( c ) ;
Code	Calendar c = new Calendar ( c ) ;
Distance : 4

19
Tree	Calendar c = new Calendar ( mTimeZone , new int [ Calendar.DAY_OF_WEEK ] ) ;
Code	Calendar c = new Calendar ( mTimeZone , new int [ Calendar.DAY_OF_WEEK ] ) ;
Distance : 6

20
Tree	Calendar c = new Calendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Calendar c = new Calendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 3

21
Tree	Calendar c = new Calendar ( mTimeZone , new Calendar [ NUMBER_CONSTANT ] ) ;
Code	Calendar c = new Calendar ( mTimeZone , new Calendar [ NUMBER_CONSTANT ] ) ;
Distance : 6

22
Tree	Calendar c = STRING_CONSTANT ;
Code	Calendar c = STRING_CONSTANT ;
Distance : 7

23
Tree	final
Code	final
Distance : 11

24
Tree	Calendar c = new Calendar ( this , c ) ;
Code	Calendar c = new Calendar ( this , c ) ;
Distance : 3

25
Tree	Calendar c = new Calendar ( TimeZones.GMT_ID ) ;
Code	Calendar c = new Calendar ( TimeZones.GMT_ID ) ;
Distance : 4

26
Tree	Calendar mTimeZone = new Calendar ( NUMBER_CONSTANT ) ;
Code	Calendar mTimeZone = new Calendar ( NUMBER_CONSTANT ) ;
Distance : 5

27
Tree	GregorianCalendar c = new Calendar () ;
Code	GregorianCalendar c = new Calendar () ;
Distance : 7

28
Tree	GregorianCalendar c = new Calendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	GregorianCalendar c = new Calendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 4

29
Tree	Calendar c = new Calendar ( new GregorianCalendar ( mLocale ) ) ;
Code	Calendar c = new Calendar ( new GregorianCalendar ( mLocale ) ) ;
Distance : 5

30
Tree	Calendar c = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Calendar c = new GregorianCalendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 2

31
Tree	Calendar c = new Calendar ( new Calendar ( mLocale ) ) ;
Code	Calendar c = new Calendar ( new Calendar ( mLocale ) ) ;
Distance : 5

32
Tree	GregorianCalendar c = new Calendar ( mTimeZone , null ) ;
Code	GregorianCalendar c = new Calendar ( mTimeZone , null ) ;
Distance : 3

33
Tree	Calendar mTimeZone = null ;
Code	Calendar mTimeZone = null ;
Distance : 8

34
Tree	Calendar mTimeZone = STRING_CONSTANT ;
Code	Calendar mTimeZone = STRING_CONSTANT ;
Distance : 8

35
Tree	Calendar c ;
Code	Calendar c ;
Distance : 8

36
Tree	Calendar c = new Calendar ( mTimeZone ) . getGmtTimeZone ( mTimeZone ) ;
Code	Calendar c = new Calendar ( mTimeZone ) . getGmtTimeZone ( mTimeZone ) ;
Distance : 6

37
Tree	Calendar c = mTimeZone ;
Code	Calendar c = mTimeZone ;
Distance : 6

38
Tree	Calendar c = new Calendar ( mTimeZone ) ;
Code	Calendar c = new Calendar ( mTimeZone ) ;
Distance : 3

39
Tree	Calendar c = new Calendar ( mTimeZone , false ) ;
Code	Calendar c = new Calendar ( mTimeZone , false ) ;
Distance : 2

40
Tree	Calendar c = new Calendar ( mTimeZone , mLocale . getTimeZone ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale . getTimeZone ( STRING_CONSTANT ) ) ;
Distance : 6

41
Tree	Calendar c = new Calendar ( mTimeZone , mLocale , mLocale . getTimeZone ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale , mLocale . getTimeZone ( STRING_CONSTANT ) ) ;
Distance : 8

42
Tree	Calendar c = new Calendar ( mTimeZone . final ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone . final ( STRING_CONSTANT ) ) ;
Distance : 6

43
Tree	Calendar c = new Calendar ( mTimeZone , true ) ;
Code	Calendar c = new Calendar ( mTimeZone , true ) ;
Distance : 2

44
Tree	Calendar c = newCalendar ;
Code	Calendar c = newCalendar ;
Distance : 7

45
Tree	Calendar c = new Calendar ( mLocale ) ;
Code	Calendar c = new Calendar ( mLocale ) ;
Distance : 3

46
Tree	Calendar c = new Calendar ( mTimeZone ) . unmodifiableSet ( mTimeZone ) ;
Code	Calendar c = new Calendar ( mTimeZone ) . unmodifiableSet ( mTimeZone ) ;
Distance : 6

47
Tree	mLocale
Code	mLocale
Distance : 10

48
Tree	Calendar c = new Calendar ( mLocale , false ) ;
Code	Calendar c = new Calendar ( mLocale , false ) ;
Distance : 3

49
Tree	Calendar [] c = new Calendar ( mLocale ) ;
Code	Calendar [] c = new Calendar ( mLocale ) ;
Distance : 4

50
Tree	Calendar c = Calendar.ZONE_OFFSET ;
Code	Calendar c = Calendar.ZONE_OFFSET ;
Distance : 7

51
Tree	final Calendar c = new Calendar ( mLocale ) ;
Code	final Calendar c = new Calendar ( mLocale ) ;
Distance : 4

52
Tree	GregorianCalendar c = new Calendar ( this , c ) ;
Code	GregorianCalendar c = new Calendar ( this , c ) ;
Distance : 4

53
Tree	Calendar tz ;
Code	Calendar tz ;
Distance : 9

54
Tree	GregorianCalendar [] c = new Calendar ( mTimeZone ) ;
Code	GregorianCalendar [] c = new Calendar ( mTimeZone ) ;
Distance : 5

55
Tree	Calendar c = new Calendar ( mTimeZone , NUMBER_CONSTANT ) ;
Code	Calendar c = new Calendar ( mTimeZone , NUMBER_CONSTANT ) ;
Distance : 2

56
Tree	Calendar newCalendar ;
Code	Calendar newCalendar ;
Distance : 9

57
Tree	GregorianCalendar c = new Calendar ( mTimeZone , false ) ;
Code	GregorianCalendar c = new Calendar ( mTimeZone , false ) ;
Distance : 3

58
Tree	GregorianCalendar c = new Calendar ( mTimeZone , NUMBER_CONSTANT ) ;
Code	GregorianCalendar c = new Calendar ( mTimeZone , NUMBER_CONSTANT ) ;
Distance : 3

59
Tree	Calendar c = new Calendar ( mTimeZone . getGmtTimeZone ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone . getGmtTimeZone ( STRING_CONSTANT ) ) ;
Distance : 6

60
Tree	Calendar c = new Calendar ( mTimeZone ) . unmodifiableSet () ;
Code	Calendar c = new Calendar ( mTimeZone ) . unmodifiableSet () ;
Distance : 5

61
Tree	GregorianCalendar c = new Calendar ( STRING_CONSTANT ) ;
Code	GregorianCalendar c = new Calendar ( STRING_CONSTANT ) ;
Distance : 5

62
Tree	Calendar c = new Calendar ( mTimeZone ) . setTime ( mTimeZone ) ;
Code	Calendar c = new Calendar ( mTimeZone ) . setTime ( mTimeZone ) ;
Distance : 6

63
Tree	Calendar c = new Calendar ( mTimeZone , null ) ;
Code	Calendar c = new Calendar ( mTimeZone , null ) ;
Distance : 2

64
Tree	Calendar c = new Calendar ( mTimeZone , NEW_YORK ) ;
Code	Calendar c = new Calendar ( mTimeZone , NEW_YORK ) ;
Distance : 2

65
Tree	Calendar c = new GregorianCalendar ( STRING_CONSTANT ) ;
Code	Calendar c = new GregorianCalendar ( STRING_CONSTANT ) ;
Distance : 3

66
Tree	final Calendar c = new Calendar ( mTimeZone ) ;
Code	final Calendar c = new Calendar ( mTimeZone ) ;
Distance : 4

67
Tree	Calendar mTimeZone = new Calendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Code	Calendar mTimeZone = new Calendar ( NUMBER_CONSTANT , NUMBER_CONSTANT ) ;
Distance : 4

68
Tree	Calendar c = mLocale . getInstance ( mTimeZone , mTimeZone ) ;
Code	Calendar c = mLocale . getInstance ( mTimeZone , mTimeZone ) ;
Distance : 4

69
Tree	final Calendar c = mTimeZone . getInstance ( mTimeZone ) ;
Code	final Calendar c = mTimeZone . getInstance ( mTimeZone ) ;
Distance : 6

70
Tree	c
Code	c
Distance : 10

71
Tree	Calendar [] c = new Calendar ( mTimeZone ) ;
Code	Calendar [] c = new Calendar ( mTimeZone ) ;
Distance : 4

72
Tree	Calendar c = mValues () ;
Code	Calendar c = mValues () ;
Distance : 7

73
Tree	Calendar c = mTimeZone . getInstance ( mTimeZone ) ;
Code	Calendar c = mTimeZone . getInstance ( mTimeZone ) ;
Distance : 5

74
Tree	Calendar c = new Calendar ( mTimeZone , mLocale , mLocale . mLocale ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale , mLocale . mLocale ( STRING_CONSTANT ) ) ;
Distance : 8

75
Tree	Calendar c = mLocale ;
Code	Calendar c = mLocale ;
Distance : 6

76
Tree	Calendar c = mLocale . getInstance ( mTimeZone , new Calendar ( mTimeZone ) ) ;
Code	Calendar c = mLocale . getInstance ( mTimeZone , new Calendar ( mTimeZone ) ) ;
Distance : 8

77
Tree	Calendar c = new Calendar ( c , NUMBER_CONSTANT ) ;
Code	Calendar c = new Calendar ( c , NUMBER_CONSTANT ) ;
Distance : 3

78
Tree	Calendar c = new Calendar ( TimeZones.GMT_ID , mLocale ) ;
Code	Calendar c = new Calendar ( TimeZones.GMT_ID , mLocale ) ;
Distance : 2

79
Tree	Calendar c = c . getInstance ( mTimeZone , new Calendar ( mTimeZone ) ) ;
Code	Calendar c = c . getInstance ( mTimeZone , new Calendar ( mTimeZone ) ) ;
Distance : 8

80
Tree	Calendar c = new Calendar < mTimeZone > ( c , mLocale ) ;
Code	Calendar c = new Calendar < mTimeZone > ( c , mLocale ) ;
Distance : 5

81
Tree	Calendar mTimeZone = new Calendar ( STRING_CONSTANT ) ;
Code	Calendar mTimeZone = new Calendar ( STRING_CONSTANT ) ;
Distance : 5

82
Tree	Calendar c = new Calendar ( mTimeZone , mLocale ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale ) ;
Distance : 1

83
Tree	Calendar c = c ;
Code	Calendar c = c ;
Distance : 7

84
Tree	Calendar c = new Calendar ( new Calendar ( mTimeZone ) ) ;
Code	Calendar c = new Calendar ( new Calendar ( mTimeZone ) ) ;
Distance : 6

85
Tree	Calendar c = new Calendar ( mTimeZone , mLocale , mLocale . getGmtTimeZone ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale , mLocale . getGmtTimeZone ( STRING_CONSTANT ) ) ;
Distance : 8

86
Tree	Calendar c = new Calendar ( mTimeZone ) . setTime () ;
Code	Calendar c = new Calendar ( mTimeZone ) . setTime () ;
Distance : 5

87
Tree	Calendar c = new Calendar ( mTimeZone , c ) ;
Code	Calendar c = new Calendar ( mTimeZone , c ) ;
Distance : 2

88
Tree	Calendar = ;
Code	Calendar = ;
Distance : 8

89
Tree	Calendar c = new Calendar ( NUMBER_CONSTANT , c ) ;
Code	Calendar c = new Calendar ( NUMBER_CONSTANT , c ) ;
Distance : 3

90
Tree	Calendar c = new Calendar ( mTimeZone , mTimeZone ) ;
Code	Calendar c = new Calendar ( mTimeZone , mTimeZone ) ;
Distance : 2

91
Tree	Calendar c = new Calendar ( mLocale , new Calendar [ NUMBER_CONSTANT ] ) ;
Code	Calendar c = new Calendar ( mLocale , new Calendar [ NUMBER_CONSTANT ] ) ;
Distance : 7

92
Tree	Calendar c = new Calendar ( mTimeZone , super(); ) ;
Code	Calendar c = new Calendar ( mTimeZone , super(); ) ;
Distance : 2

93
Tree	GregorianCalendar c = new Calendar ( mTimeZone ) ;
Code	GregorianCalendar c = new Calendar ( mTimeZone ) ;
Distance : 4

94
Tree	Calendar c = new Calendar ( null ) ;
Code	Calendar c = new Calendar ( null ) ;
Distance : 4

95
Tree	protected Calendar c = c . getInstance ( mTimeZone ) ;
Code	protected Calendar c = c . getInstance ( mTimeZone ) ;
Distance : 6

96
Tree	Calendar c = new Calendar ( mTimeZone ) ;
Code	Calendar c = new Calendar ( mTimeZone ) ;
Distance : 3

97
Tree	Calendar c = new Calendar ( mLocale , mLocale ) ;
Code	Calendar c = new Calendar ( mLocale , mLocale ) ;
Distance : 2

98
Tree	Calendar c = new Calendar ( mTimeZone , mLocale . getRightElement ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale . getRightElement ( STRING_CONSTANT ) ) ;
Distance : 6

99
Tree	Calendar c = new Calendar ( NUMBER_CONSTANT ) ;
Code	Calendar c = new Calendar ( NUMBER_CONSTANT ) ;
Distance : 4

100
Tree	GregorianCalendar c = new Calendar ( NUMBER_CONSTANT ) ;
Code	GregorianCalendar c = new Calendar ( NUMBER_CONSTANT ) ;
Distance : 5

101
Tree	Calendar c = new GregorianCalendar ( NUMBER_CONSTANT ) ;
Code	Calendar c = new GregorianCalendar ( NUMBER_CONSTANT ) ;
Distance : 3

102
Tree	Calendar c = new Calendar ( mTimeZone , new int [ TimeZones.GMT_ID ] ) ;
Code	Calendar c = new Calendar ( mTimeZone , new int [ TimeZones.GMT_ID ] ) ;
Distance : 6

103
Tree	Calendar c = getInstance () ;
Code	Calendar c = getInstance () ;
Distance : 7

104
Tree	Calendar c = new Calendar ( mTimeZone ) . getInstance ( mTimeZone ) ;
Code	Calendar c = new Calendar ( mTimeZone ) . getInstance ( mTimeZone ) ;
Distance : 6

105
Tree	GregorianCalendar c = new Calendar ( mTimeZone ) ;
Code	GregorianCalendar c = new Calendar ( mTimeZone ) ;
Distance : 4

106
Tree	Calendar c = mLocale . getInstance ( mTimeZone , mLocale ) ;
Code	Calendar c = mLocale . getInstance ( mTimeZone , mLocale ) ;
Distance : 3

107
Tree	Calendar c = chars.length ;
Code	Calendar c = chars.length ;
Distance : 7

108
Tree	Calendar c = super(); ;
Code	Calendar c = super(); ;
Distance : 7

109
Tree	Calendar c = null ;
Code	Calendar c = null ;
Distance : 7

110
Tree	Calendar c = new Calendar ( Calendar.JANUARY ) ;
Code	Calendar c = new Calendar ( Calendar.JANUARY ) ;
Distance : 4

111
Tree	Calendar c = new Calendar ( mTimeZone , TimeZones.GMT_ID ) ;
Code	Calendar c = new Calendar ( mTimeZone , TimeZones.GMT_ID ) ;
Distance : 2

112
Tree	Calendar mTimeZone = new Calendar () ;
Code	Calendar mTimeZone = new Calendar () ;
Distance : 7

113
Tree	Calendar c = new Calendar ( mLocale ) ;
Code	Calendar c = new Calendar ( mLocale ) ;
Distance : 3

114
Tree	Calendar c = new Calendar ( java.util.Locale.US , mLocale ) ;
Code	Calendar c = new Calendar ( java.util.Locale.US , mLocale ) ;
Distance : 2

115
Tree	Calendar c = new Calendar < mTimeZone > ( mTimeZone , mLocale ) ;
Code	Calendar c = new Calendar < mTimeZone > ( mTimeZone , mLocale ) ;
Distance : 4

116
Tree	Calendar c = mLocale . getInstance ( mTimeZone ) ;
Code	Calendar c = mLocale . getInstance ( mTimeZone ) ;
Distance : 5

117
Tree	Calendar c = new Calendar ( mTimeZone , mLocale , mLocale . getRightElement ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale , mLocale . getRightElement ( STRING_CONSTANT ) ) ;
Distance : 8

118
Tree	Calendar c = new Calendar ( java.util.Locale.US ) ;
Code	Calendar c = new Calendar ( java.util.Locale.US ) ;
Distance : 4

119
Tree	Calendar c = new Calendar ( mLocale , null ) ;
Code	Calendar c = new Calendar ( mLocale , null ) ;
Distance : 3

120
Tree	Calendar c = Calendar () ;
Code	Calendar c = Calendar () ;
Distance : 7

121
Tree	Calendar c = new Calendar ( NUMBER_CONSTANT , mLocale ) ;
Code	Calendar c = new Calendar ( NUMBER_CONSTANT , mLocale ) ;
Distance : 2

122
Tree	Calendar c = new Calendar ( mTimeZone , new int [ Boolean.FALSE ] ) ;
Code	Calendar c = new Calendar ( mTimeZone , new int [ Boolean.FALSE ] ) ;
Distance : 6

123
Tree	Calendar c = new Calendar ( mTimeZone , mLocale ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale ) ;
Distance : 1

124
Tree	Calendar c = new Calendar ( mTimeZone , Calendar.JANUARY ) ;
Code	Calendar c = new Calendar ( mTimeZone , Calendar.JANUARY ) ;
Distance : 2

125
Tree	Calendar c = mTimeZone . getInstance ( mTimeZone , mLocale ) ;
Code	Calendar c = mTimeZone . getInstance ( mTimeZone , mLocale ) ;
Distance : 3

126
Tree	Calendar c = NUMBER_CONSTANT ;
Code	Calendar c = NUMBER_CONSTANT ;
Distance : 7

127
Tree	Calendar c = new Calendar ( mTimeZone , mLocale . getGmtTimeZone ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale . getGmtTimeZone ( STRING_CONSTANT ) ) ;
Distance : 6

128
Tree	Calendar c = new Calendar ( mTimeZone , mLocale . getLocale ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone , mLocale . getLocale ( STRING_CONSTANT ) ) ;
Distance : 6

129
Tree	Calendar c = new Calendar ( STRING_CONSTANT ) ;
Code	Calendar c = new Calendar ( STRING_CONSTANT ) ;
Distance : 4

130
Tree	Calendar
Code	Calendar
Distance : 10

131
Tree	Calendar c = new Calendar ( new GregorianCalendar ( mTimeZone ) ) ;
Code	Calendar c = new Calendar ( new GregorianCalendar ( mTimeZone ) ) ;
Distance : 5

132
Tree	Calendar c = new Calendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Code	Calendar c = new Calendar ( mTimeZone , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Distance : 6

133
Tree	Calendar c = new Calendar ( mTimeZone . getLeftElement ( STRING_CONSTANT ) ) ;
Code	Calendar c = new Calendar ( mTimeZone . getLeftElement ( STRING_CONSTANT ) ) ;
Distance : 6

134
Tree	GregorianCalendar c = null ;
Code	GregorianCalendar c = null ;
Distance : 8

135
Tree	Calendar c = new GregorianCalendar ( null ) ;
Code	Calendar c = new GregorianCalendar ( null ) ;
Distance : 3

136
Tree	GregorianCalendar c ;
Code	GregorianCalendar c ;
Distance : 9

137
Tree	Calendar c = new Calendar ( this , mTimeZone ) ;
Code	Calendar c = new Calendar ( this , mTimeZone ) ;
Distance : 3

138
Tree	Calendar c = new GregorianCalendar () ;
Code	Calendar c = new GregorianCalendar () ;
Distance : 5

139
Tree	Calendar c = new Calendar ( mLocale , NUMBER_CONSTANT ) ;
Code	Calendar c = new Calendar ( mLocale , NUMBER_CONSTANT ) ;
Distance : 3

140
Tree	private Calendar c = new Calendar ( mTimeZone ) ;
Code	private Calendar c = new Calendar ( mTimeZone ) ;
Distance : 4

141
Tree	GregorianCalendar c = mLocale ;
Code	GregorianCalendar c = mLocale ;
Distance : 7

142
Tree	GregorianCalendar c = new Calendar ( NUMBER_CONSTANT , mLocale ) ;
Code	GregorianCalendar c = new Calendar ( NUMBER_CONSTANT , mLocale ) ;
Distance : 3

143
Tree	Calendar [] mTimeZone = new Calendar ( mTimeZone ) ;
Code	Calendar [] mTimeZone = new Calendar ( mTimeZone ) ;
Distance : 5

144
Tree	Calendar c = c . getInstance ( mTimeZone ) ;
Code	Calendar c = c . getInstance ( mTimeZone ) ;
Distance : 5

145
Tree	Calendar mLocale ;
Code	Calendar mLocale ;
Distance : 8

146
Tree	Calendar mTimeZone = NUMBER_CONSTANT ;
Code	Calendar mTimeZone = NUMBER_CONSTANT ;
Distance : 8

147
Tree	Calendar c = new Calendar ( mLocale , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Code	Calendar c = new Calendar ( mLocale , new GregorianCalendar [ NUMBER_CONSTANT ] ) ;
Distance : 7

148
Tree	Calendar c = c . getInstance ( mTimeZone , mLocale ) ;
Code	Calendar c = c . getInstance ( mTimeZone , mLocale ) ;
Distance : 3

149
Tree	GregorianCalendar c = STRING_CONSTANT ;
Code	GregorianCalendar c = STRING_CONSTANT ;
Distance : 8

150
Tree	Calendar mTimeZone ;
Code	Calendar mTimeZone ;
Distance : 8

151
Tree	GregorianCalendar c = new Calendar ( null ) ;
Code	GregorianCalendar c = new Calendar ( null ) ;
Distance : 5

152
Tree	Calendar mTimeZone = new Calendar ( null ) ;
Code	Calendar mTimeZone = new Calendar ( null ) ;
Distance : 5

153
Tree	Calendar c = c . getInstance ( mTimeZone , new GregorianCalendar ( mTimeZone ) ) ;
Code	Calendar c = c . getInstance ( mTimeZone , new GregorianCalendar ( mTimeZone ) ) ;
Distance : 8

154
Tree	final Calendar c = c . getInstance ( mTimeZone ) ;
Code	final Calendar c = c . getInstance ( mTimeZone ) ;
Distance : 6

155
Tree	Calendar mLocale = STRING_CONSTANT ;
Code	Calendar mLocale = STRING_CONSTANT ;
Distance : 8

156
Tree	Calendar c = mLocale . getInstance ( mTimeZone , new GregorianCalendar ( mTimeZone ) ) ;
Code	Calendar c = mLocale . getInstance ( mTimeZone , new GregorianCalendar ( mTimeZone ) ) ;
Distance : 8

157
Tree	Calendar c = mLocale . getInstance ( mLocale ) ;
Code	Calendar c = mLocale . getInstance ( mLocale ) ;
Distance : 5

158
Tree	final Calendar c = mLocale . getInstance ( mTimeZone ) ;
Code	final Calendar c = mLocale . getInstance ( mTimeZone ) ;
Distance : 6

159
Tree	Calendar c = new Calendar ( c ) ;
Code	Calendar c = new Calendar ( c ) ;
Distance : 4

========================================================================


========================================================================
Example Number: 14
Parent Code is: 
if ( chars [ i ] == CHAR_CONS  chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
-------------------------------------------------------------------------------
Child code is: 
if ( chars [ i ] == CHAR_CONS  chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp && ! hasDecPoint ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (2 (801{val=chars}) (221{val=[}) (800{val=i}) (222{val=]})) (236{val===}) (13{val=CHAR_CONS})) (250{val=||}) (27 (2 (801{val=chars}) (221{val=[}) (800{val=i}) (222{val=]})) (236{val===}) (13{val=CHAR_CONS}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (27 (800{val=foundDigit}) (249{val=&&}) (38 (207{val=!}) (800{val=hasExp}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (25 (313{val=if}) (214{val=(}) (27 (27 (2 (801{val=chars}) (221{val=[}) (800{val=i}) (222{val=]})) (236{val===}) (13{val=CHAR_CONS})) (250{val=||}) (27 (2 (801{val=chars}) (221{val=[}) (800{val=i}) (222{val=]})) (236{val===}) (13{val=CHAR_CONS}))) (215{val=)}) (8 (218{val={}) (41 (329{val=return}) (27 (800{val=foundDigit}) (249{val=&&}) (38 (207{val=!}) (800{val=hasExp})) (249{val=&&}) (38 (207{val=!}) (800{val=hasDecPoint}))) (227{val=;})) (219{val=}}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/24/parent/src_main_java_org_apache_commons_lang3_math_NumberUtils.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 4
Wrong
========================================================================
False

0
Tree	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS chars chars [ i ] == CHAR_CONS ) { return i && ! hasExp ; }
Distance : 5

1
Tree	if ( chars [ i ] == CHAR_CONS ] chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Code	if ( chars [ i ] == CHAR_CONS ] chars [ i ] == CHAR_CONS ) { return foundDigit && ! hasExp ; }
Distance : 4

2
Tree	if ( chars [ i ] == CHAR_CONS CHAR_CONS chars [ i ] == CHAR_CONS ) { return i && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS CHAR_CONS chars [ i ] == CHAR_CONS ) { return i && ! i ; }
Distance : 6

3
Tree	if ( chars [ i ] == CHAR_CONS == chars [ i ] == CHAR_CONS ) { return foundDigit && ! i ; }
Code	if ( chars [ i ] == CHAR_CONS == chars [ i ] == CHAR_CONS ) { return foundDigit && ! i ; }
Distance : 5

========================================================================


========================================================================
Example Number: 15
Parent Code is: 
cal1 . get ( Calendar.HOUR ) == cal2 . get ( Calendar.HOUR )
-------------------------------------------------------------------------------
Child code is: 
cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY )
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (27 (32 (800{val=cal1}) (235{val=.}) (802{val=get}) (214{val=(}) (40{val=Calendar.HOUR}) (215{val=)})) (236{val===}) (32 (800{val=cal2}) (235{val=.}) (802{val=get}) (214{val=(}) (40{val=Calendar.HOUR}) (215{val=)}))))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (27 (32 (800{val=cal1}) (235{val=.}) (802{val=get}) (214{val=(}) (40{val=Calendar.HOUR_OF_DAY}) (215{val=)})) (236{val===}) (32 (800{val=cal2}) (235{val=.}) (802{val=get}) (214{val=(}) (40{val=Calendar.HOUR_OF_DAY}) (215{val=)}))))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/21/parent/src_main_java_org_apache_commons_lang3_time_DateUtils.java
-------------------------------------------------------------------------------
Edit Distance : 2
-------------------------------------------------------------------------------
Cadidate List Length : 68
Correct
========================================================================
True

0
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) < rhs.length
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) < rhs.length
Distance : 7

1
Tree	void cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR ) ;
Code	void cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR ) ;
Distance : 9

2
Tree	cal1 < ( . get ( Calendar.HOUR )
Code	cal1 < ( . get ( Calendar.HOUR )
Distance : 7

3
Tree	cal1 < get . get ( Calendar.HOUR_OF_DAY )
Code	cal1 < get . get ( Calendar.HOUR_OF_DAY )
Distance : 6

4
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < tokens.length
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < tokens.length
Distance : 4

5
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < rhs.length
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) < rhs.length
Distance : 4

6
Tree	cal1 . get ( Calendar.HOUR ) - NUMBER_CONSTANT
Code	cal1 . get ( Calendar.HOUR ) - NUMBER_CONSTANT
Distance : 8

7
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR )
Distance : 4

8
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT
Distance : 7

9
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR ) CharSequence
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR ) CharSequence
Distance : 5

10
Tree	cal1 . get ( Calendar.HOUR ) < tokens.length
Code	cal1 . get ( Calendar.HOUR ) < tokens.length
Distance : 8

11
Tree	cal1 . get ( Calendar.HOUR ) < rhs.length
Code	cal1 . get ( Calendar.HOUR ) < rhs.length
Distance : 8

12
Tree	cal1 < ( . get ( Calendar.HOUR_OF_DAY ) CharSequence
Code	cal1 < ( . get ( Calendar.HOUR_OF_DAY ) CharSequence
Distance : 7

13
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) < tokens.length
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) < tokens.length
Distance : 7

14
Tree	STRING_CONSTANT + cal1 + STRING_CONSTANT + get . get ( Calendar.HOUR_OF_DAY ) pattern
Code	STRING_CONSTANT + cal1 + STRING_CONSTANT + get . get ( Calendar.HOUR_OF_DAY ) pattern
Distance : 9

15
Tree	STRING_CONSTANT + cal1 + STRING_CONSTANT + get . get ( Calendar.HOUR_OF_DAY ) CharSequence
Code	STRING_CONSTANT + cal1 + STRING_CONSTANT + get . get ( Calendar.HOUR_OF_DAY ) CharSequence
Distance : 9

16
Tree	cal1 < get . get ( Calendar.HOUR_OF_DAY ) pattern
Code	cal1 < get . get ( Calendar.HOUR_OF_DAY ) pattern
Distance : 7

17
Tree	cal1 . get ( Calendar.HOUR ) == cal2 . get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR ) == cal2 . get ( Calendar.HOUR )
Distance : 2

18
Tree	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY Calendar.HOUR Calendar.HOUR_OF_DAY + throw
Code	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY Calendar.HOUR Calendar.HOUR_OF_DAY + throw
Distance : 7

19
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY Calendar.HOUR Calendar.HOUR_OF_DAY + [
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY Calendar.HOUR Calendar.HOUR_OF_DAY + [
Distance : 6

20
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY Calendar.HOUR Calendar.HOUR_OF_DAY + throw
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY Calendar.HOUR Calendar.HOUR_OF_DAY + throw
Distance : 6

21
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 . Calendar.HOUR Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 . Calendar.HOUR Calendar.HOUR_OF_DAY
Distance : 4

22
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY Calendar.HOUR Calendar.HOUR
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY Calendar.HOUR Calendar.HOUR
Distance : 6

23
Tree	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY Calendar.HOUR Calendar.HOUR_OF_DAY + [
Code	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY Calendar.HOUR Calendar.HOUR_OF_DAY + [
Distance : 7

24
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY
Distance : 6

25
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY Calendar.HOUR Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY Calendar.HOUR Calendar.HOUR_OF_DAY
Distance : 7

26
Tree	cal1 . get ( Calendar.HOUR ) - cal2 . get ( Calendar.HOUR_OF_DAY )
Code	cal1 . get ( Calendar.HOUR ) - cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 2

27
Tree	STRING_CONSTANT + cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR )
Code	STRING_CONSTANT + cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR )
Distance : 6

28
Tree	void cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Code	void cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Distance : 8

29
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR )
Distance : 2

30
Tree	NUMBER_CONSTANT / cal1 . get ( Calendar.HOUR_OF_DAY )
Code	NUMBER_CONSTANT / cal1 . get ( Calendar.HOUR_OF_DAY )
Distance : 8

31
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR )
Distance : 2

32
Tree	cal1 . get ( Calendar.HOUR ) * cal2 . get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR ) * cal2 . get ( Calendar.HOUR )
Distance : 3

33
Tree	byte cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Code	byte cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Distance : 8

34
Tree	NUMBER_CONSTANT / cal1 . get ( Calendar.HOUR )
Code	NUMBER_CONSTANT / cal1 . get ( Calendar.HOUR )
Distance : 9

35
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY Calendar.HOUR Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY Calendar.HOUR Calendar.HOUR_OF_DAY
Distance : 5

36
Tree	cal1 . get ( Calendar.HOUR ) * get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR ) * get ( Calendar.HOUR )
Distance : 5

37
Tree	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY Calendar.HOUR Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY Calendar.HOUR Calendar.HOUR_OF_DAY
Distance : 6

38
Tree	cal1 && cal1 . get ( Calendar.HOUR_OF_DAY ) && extends
Code	cal1 && cal1 . get ( Calendar.HOUR_OF_DAY ) && extends
Distance : 9

39
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR_OF_DAY )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 1

40
Tree	STRING_CONSTANT + cal1 + STRING_CONSTANT + get . get ( Calendar.HOUR_OF_DAY )
Code	STRING_CONSTANT + cal1 + STRING_CONSTANT + get . get ( Calendar.HOUR_OF_DAY )
Distance : 8

41
Tree	cal1 . get ( Calendar.HOUR ) * cal2 . get ( Calendar.HOUR_OF_DAY )
Code	cal1 . get ( Calendar.HOUR ) * cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 2

42
Tree	cal1 && cal1 . get ( Calendar.HOUR_OF_DAY ) && deserialize
Code	cal1 && cal1 . get ( Calendar.HOUR_OF_DAY ) && deserialize
Distance : 9

43
Tree	cal1 && cal1 . get ( Calendar.HOUR_OF_DAY ) && super
Code	cal1 && cal1 . get ( Calendar.HOUR_OF_DAY ) && super
Distance : 9

44
Tree	cal1 && cal1 . get ( Calendar.HOUR_OF_DAY ) && throws
Code	cal1 && cal1 . get ( Calendar.HOUR_OF_DAY ) && throws
Distance : 9

45
Tree	STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY )
Code	STRING_CONSTANT + cal2 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY )
Distance : 5

46
Tree	cal1 . get ( Calendar.HOUR ) - cal2 . get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR ) - cal2 . get ( Calendar.HOUR )
Distance : 3

47
Tree	long cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Code	long cal1 = NUMBER_CONSTANT / cal2 . get ( Calendar.HOUR_OF_DAY ) ;
Distance : 8

48
Tree	STRING_CONSTANT + cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY )
Code	STRING_CONSTANT + cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY )
Distance : 5

49
Tree	STRING_CONSTANT + cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR )
Code	STRING_CONSTANT + cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR )
Distance : 5

50
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 1

51
Tree	STRING_CONSTANT + cal1 + STRING_CONSTANT + get . get ( Calendar.HOUR )
Code	STRING_CONSTANT + cal1 + STRING_CONSTANT + get . get ( Calendar.HOUR )
Distance : 9

52
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - intValue
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - intValue
Distance : 4

53
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - serialize
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - serialize
Distance : 4

54
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - rethrow
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - rethrow
Distance : 4

55
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - extends
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) - extends
Distance : 4

56
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR ) cal2 Calendar.HOUR_OF_DAY cal2 Calendar.HOUR_OF_DAY
Distance : 7

57
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY Calendar.HOUR Calendar.HOUR
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) . get ( Calendar.HOUR_OF_DAY ) cal2 Calendar.HOUR_OF_DAY Calendar.HOUR Calendar.HOUR
Distance : 6

58
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR )
Distance : 1

59
Tree	NUMBER_CONSTANT / . . get ( Calendar.HOUR_OF_DAY ) pattern
Code	NUMBER_CONSTANT / . . get ( Calendar.HOUR_OF_DAY ) pattern
Distance : 9

60
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT pattern
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT pattern
Distance : 7

61
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT CharSequence
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) - NUMBER_CONSTANT CharSequence
Distance : 7

62
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) < rhs.length
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) < rhs.length
Distance : 5

63
Tree	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) < tokens.length
Code	cal1 . get ( Calendar.HOUR ) . get ( Calendar.HOUR_OF_DAY ) < tokens.length
Distance : 5

64
Tree	cal1 . get ( Calendar.HOUR ) == cal2 . get ( Calendar.HOUR_OF_DAY )
Code	cal1 . get ( Calendar.HOUR ) == cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 1

65
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY )
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) == cal2 . get ( Calendar.HOUR_OF_DAY )
Distance : 0

66
Tree	NUMBER_CONSTANT / . . get ( Calendar.HOUR_OF_DAY ) CharSequence
Code	NUMBER_CONSTANT / . . get ( Calendar.HOUR_OF_DAY ) CharSequence
Distance : 9

67
Tree	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR ) pattern
Code	cal1 . get ( Calendar.HOUR_OF_DAY ) * get ( Calendar.HOUR ) pattern
Distance : 5

========================================================================


========================================================================
Example Number: 16
Parent Code is: 
{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
-------------------------------------------------------------------------------
Child code is: 
{ pos += Character . charCount ( Character . codePointAt ( input , pt ) ) ; }
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (7 (800{val=pos}) (237{val=+=}) (32 (800{val=Character}) (235{val=.}) (802{val=charCount}) (214{val=(}) (32 (800{val=Character}) (235{val=.}) (802{val=codePointAt}) (214{val=(}) (800{val=input}) (234{val=,}) (800{val=pos}) (215{val=)})) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (8 (218{val={}) (21 (7 (800{val=pos}) (237{val=+=}) (32 (800{val=Character}) (235{val=.}) (802{val=charCount}) (214{val=(}) (32 (800{val=Character}) (235{val=.}) (802{val=codePointAt}) (214{val=(}) (800{val=input}) (234{val=,}) (800{val=pt}) (215{val=)})) (215{val=)}))) (227{val=;})) (219{val=}})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/6/parent/src_main_java_org_apache_commons_lang3_text_translate_CharSequenceTranslator.java
-------------------------------------------------------------------------------
Edit Distance : 1
-------------------------------------------------------------------------------
Cadidate List Length : 72
Wrong
========================================================================
False

0
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 1

1
Tree	{ throw new Character ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , CHAR_CONS ) ; }
Code	{ throw new Character ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , CHAR_CONS ) ; }
Distance : 10

2
Tree	{ pos += Character . charCount ( Character . charCount ( input , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . charCount ( input , pos ) ) ; }
Distance : 2

3
Tree	{ throw pos ; }
Code	{ throw pos ; }
Distance : 15

4
Tree	{ pos += Character . charCount ( Character . charCount ( input , pos ) ) ; pos . charCount ( Character , pos ) ; }
Code	{ pos += Character . charCount ( Character . charCount ( input , pos ) ) ; pos . charCount ( Character , pos ) ; }
Distance : 11

5
Tree	{ throw new UnsupportedOperationException ( Character ) ; }
Code	{ throw new UnsupportedOperationException ( Character ) ; }
Distance : 12

6
Tree	{ throw new UnsupportedOperationException () ; }
Code	{ throw new UnsupportedOperationException () ; }
Distance : 15

7
Tree	{ pos = Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos = Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

8
Tree	{ pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; pos . charCount ( Character , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; pos . charCount ( Character , pos ) ; }
Distance : 11

9
Tree	{ throw new StringBuffer ( Character . codePointAt ( input . codePointAt ( input ) ) , CHAR_CONS ) ; }
Code	{ throw new StringBuffer ( Character . codePointAt ( input . codePointAt ( input ) ) , CHAR_CONS ) ; }
Distance : 10

10
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; null }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; null }
Distance : 2

11
Tree	{ pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( Character , pos ) ; }
Code	{ pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( Character , pos ) ; }
Distance : 11

12
Tree	{ throw pos . charCount ( Character , pos . codePointAt ( Character , pos ) , Character ) ; }
Code	{ throw pos . charCount ( Character , pos . codePointAt ( Character , pos ) , Character ) ; }
Distance : 9

13
Tree	{ throw new Character ( Character . charCount ( input . codePointAt ( input ) ) , CHAR_CONS ) ; }
Code	{ throw new Character ( Character . charCount ( input . codePointAt ( input ) ) , CHAR_CONS ) ; }
Distance : 9

14
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; super(); }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; super(); }
Distance : 2

15
Tree	{ pos . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Distance : 4

16
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

17
Tree	{ pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 2

18
Tree	{ throw pos . charCount ( Character , pos . codePointAt ( input , pos ) , input ) ; }
Code	{ throw pos . charCount ( Character , pos . codePointAt ( input , pos ) , input ) ; }
Distance : 8

19
Tree	{ throw new Character ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , CHAR_CONS ) ; }
Code	{ throw new Character ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , CHAR_CONS ) ; }
Distance : 12

20
Tree	{ throw pos . codePointAt ( Character [ pos ] ) ; }
Code	{ throw pos . codePointAt ( Character [ pos ] ) ; }
Distance : 11

21
Tree	{ throw pos . charCount ( Character , pos . charCount ( input , pos ) , Character ) ; }
Code	{ throw pos . charCount ( Character , pos . charCount ( input , pos ) , Character ) ; }
Distance : 9

22
Tree	{ throw pos . charCount ( Character [ pos ] ) ; }
Code	{ throw pos . charCount ( Character [ pos ] ) ; }
Distance : 10

23
Tree	{ pos . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ pos . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 4

24
Tree	{ throw pos . charCount ( Character , pos . codePointAt ( input , pos ) , Character ) ; }
Code	{ throw pos . charCount ( Character , pos . codePointAt ( input , pos ) , Character ) ; }
Distance : 8

25
Tree	{ pos . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

26
Tree	{ throw new ImmutablePair ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , CHAR_CONS ) ; }
Code	{ throw new ImmutablePair ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , CHAR_CONS ) ; }
Distance : 12

27
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; continue; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; continue; }
Distance : 2

28
Tree	{ pos = Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ pos = Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 3

29
Tree	{ super(); pos += Character . charCount ( Character . charCount ( input , pos ) ) ; }
Code	{ super(); pos += Character . charCount ( Character . charCount ( input , pos ) ) ; }
Distance : 3

30
Tree	{ throw new ImmutablePair ( Character . codePointAt ( input . codePointAt ( input ) ) , CHAR_CONS ) ; }
Code	{ throw new ImmutablePair ( Character . codePointAt ( input . codePointAt ( input ) ) , CHAR_CONS ) ; }
Distance : 10

31
Tree	{ throw new ImmutablePair () ; }
Code	{ throw new ImmutablePair () ; }
Distance : 15

32
Tree	{ throw new ImmutablePair ( STRING_CONSTANT ) ; }
Code	{ throw new ImmutablePair ( STRING_CONSTANT ) ; }
Distance : 13

33
Tree	{ pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

34
Tree	{ throw new StringBuffer ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , CHAR_CONS ) ; }
Code	{ throw new StringBuffer ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , CHAR_CONS ) ; }
Distance : 10

35
Tree	{ throw new ImmutablePair ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , CHAR_CONS ) ; }
Code	{ throw new ImmutablePair ( Character . codePointAt ( input . codePointAt ( input , pos ) ) , CHAR_CONS ) ; }
Distance : 10

36
Tree	{ throw new ImmutablePair ( Character , true ) ; }
Code	{ throw new ImmutablePair ( Character , true ) ; }
Distance : 11

37
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; assertArrayEquals }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; assertArrayEquals }
Distance : 3

38
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; for }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; for }
Distance : 3

39
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; else }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; else }
Distance : 3

40
Tree	{ throw new StringBuffer ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , CHAR_CONS ) ; }
Code	{ throw new StringBuffer ( Character . codePointAt ( input , pos . codePointAt ( input ) ) , CHAR_CONS ) ; }
Distance : 12

41
Tree	{ throw new Character ( Character ) ; }
Code	{ throw new Character ( Character ) ; }
Distance : 11

42
Tree	{ throw new Character ( Character . codePointAt ( input . codePointAt ( input ) ) , CHAR_CONS ) ; }
Code	{ throw new Character ( Character . codePointAt ( input . codePointAt ( input ) ) , CHAR_CONS ) ; }
Distance : 10

43
Tree	{ throw new Character ( Character . charCount ( input . codePointAt ( input , pos ) ) , CHAR_CONS ) ; }
Code	{ throw new Character ( Character . charCount ( input . codePointAt ( input , pos ) ) , CHAR_CONS ) ; }
Distance : 9

44
Tree	{ throw new StringBuffer ( STRING_CONSTANT ) ; }
Code	{ throw new StringBuffer ( STRING_CONSTANT ) ; }
Distance : 13

45
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; return; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; return; }
Distance : 2

46
Tree	{ throw new Character ( Character , false ) ; }
Code	{ throw new Character ( Character , false ) ; }
Distance : 10

47
Tree	{ throw new UnsupportedOperationException ( STRING_CONSTANT ) ; }
Code	{ throw new UnsupportedOperationException ( STRING_CONSTANT ) ; }
Distance : 13

48
Tree	{ throw new StringBuffer ( Character , true ) ; }
Code	{ throw new StringBuffer ( Character , true ) ; }
Distance : 11

49
Tree	{ throw Character ; }
Code	{ throw Character ; }
Distance : 14

50
Tree	{ throw pos . charCount ( Type [ pos ] ) ; }
Code	{ throw pos . charCount ( Type [ pos ] ) ; }
Distance : 11

51
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 3

52
Tree	{ throw new Character () ; }
Code	{ throw new Character () ; }
Distance : 14

53
Tree	{ throw new Character ( Character , true ) ; }
Code	{ throw new Character ( Character , true ) ; }
Distance : 10

54
Tree	{ throw new ImmutablePair ( Character ) ; }
Code	{ throw new ImmutablePair ( Character ) ; }
Distance : 12

55
Tree	{ pos = Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos = Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

56
Tree	{ throw new Character ( STRING_CONSTANT ) ; }
Code	{ throw new Character ( STRING_CONSTANT ) ; }
Distance : 12

57
Tree	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; if }
Code	{ super(); pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; if }
Distance : 3

58
Tree	{ throw pos . charCount ( style [ pos ] ) ; }
Code	{ throw pos . charCount ( style [ pos ] ) ; }
Distance : 11

59
Tree	{ throw new StringBuffer () ; }
Code	{ throw new StringBuffer () ; }
Distance : 15

60
Tree	{ throw new StringBuffer ( Character ) ; }
Code	{ throw new StringBuffer ( Character ) ; }
Distance : 12

61
Tree	{ super(); pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Code	{ super(); pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Distance : 3

62
Tree	{ throw new Character ( Character . charCount ( input , pos . codePointAt ( input ) ) , CHAR_CONS ) ; }
Code	{ throw new Character ( Character . charCount ( input , pos . codePointAt ( input ) ) , CHAR_CONS ) ; }
Distance : 11

63
Tree	{ pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( Character , pos ) ) ; }
Distance : 2

64
Tree	{ pos . charCount ( Character . charCount ( input , pos ) ) ; }
Code	{ pos . charCount ( Character . charCount ( input , pos ) ) ; }
Distance : 4

65
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( Character , pos ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; pos . charCount ( Character , pos ) ; }
Distance : 10

66
Tree	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . codePointAt ( input , pos ) ) ; }
Distance : 1

67
Tree	{ pos = Character . charCount ( Character . charCount ( input , pos ) ) ; }
Code	{ pos = Character . charCount ( Character . charCount ( input , pos ) ) ; }
Distance : 3

68
Tree	{ pos += Character . charCount ( Character . charCount ( input , pos ) ) ; }
Code	{ pos += Character . charCount ( Character . charCount ( input , pos ) ) ; }
Distance : 2

69
Tree	{ throw pt ; }
Code	{ throw pt ; }
Distance : 14

70
Tree	{ throw input ; }
Code	{ throw input ; }
Distance : 14

71
Tree	{ pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Code	{ pos += Character . codePointAt ( Character . codePointAt ( input , pos ) ) ; }
Distance : 2

========================================================================


========================================================================
Example Number: 17
Parent Code is: 
final CharSequence result = lookupMap . get ( subSeq ) ;
-------------------------------------------------------------------------------
Child code is: 
final CharSequence result = lookupMap . get ( subSeq . toString () ) ;
-------------------------------------------------------------------------------
Parent Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (43 (801{val=CharSequence})) (59 (800{val=result}) (204{val==}) (32 (800{val=lookupMap}) (235{val=.}) (802{val=get}) (214{val=(}) (800{val=subSeq}) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
Child Tree is : 
(AST_ROOT_SC2NF (60 (83{val=final}) (43 (801{val=CharSequence})) (59 (800{val=result}) (204{val==}) (32 (800{val=lookupMap}) (235{val=.}) (802{val=get}) (214{val=(}) (32 (800{val=subSeq}) (235{val=.}) (802{val=toString}) (216{val=()})) (215{val=)}))) (227{val=;})))
-------------------------------------------------------------------------------
/zf8/sc2nf/CCRecom_exp/Defects4j/Lang/4/parent/src_main_java_org_apache_commons_lang3_text_translate_LookupTranslator.java
-------------------------------------------------------------------------------
Edit Distance : 3
-------------------------------------------------------------------------------
Cadidate List Length : 124
Wrong
========================================================================
False

0
Tree	final CharSequence result = Integer.MAX_VALUE ;
Code	final CharSequence result = Integer.MAX_VALUE ;
Distance : 9

1
Tree	final CharSequence result = set.length ;
Code	final CharSequence result = set.length ;
Distance : 9

2
Tree	final CharSequence result = greatestCommonDivisor ;
Code	final CharSequence result = greatestCommonDivisor ;
Distance : 9

3
Tree	final CharSequence result = EscapeUtils.ESCAPE_ECMASCRIPT ;
Code	final CharSequence result = EscapeUtils.ESCAPE_ECMASCRIPT ;
Distance : 9

4
Tree	final CharSequence result = result . get ( bounds.length ) ;
Code	final CharSequence result = result . get ( bounds.length ) ;
Distance : 5

5
Tree	final CharSequence result = lookupMap . get () ;
Code	final CharSequence result = lookupMap . get () ;
Distance : 5

6
Tree	final CharSequence result = result . get ( STRING_CONSTANT , result ) ;
Code	final CharSequence result = result . get ( STRING_CONSTANT , result ) ;
Distance : 5

7
Tree	final CharSequence result = result . get () ;
Code	final CharSequence result = result . get () ;
Distance : 6

8
Tree	CharSequence result = result . get ( null ) ;
Code	CharSequence result = result . get ( null ) ;
Distance : 6

9
Tree	final CharSequence result = lookupMap . get ( STRING_CONSTANT , result ) ;
Code	final CharSequence result = lookupMap . get ( STRING_CONSTANT , result ) ;
Distance : 4

10
Tree	final CharSequence result = set.length . get ( subSeq ) ;
Code	final CharSequence result = set.length . get ( subSeq ) ;
Distance : 4

11
Tree	final CharSequence result = lookupMap . get ( null ) ;
Code	final CharSequence result = lookupMap . get ( null ) ;
Distance : 4

12
Tree	CharSequence result = result . get ( result ) ;
Code	CharSequence result = result . get ( result ) ;
Distance : 6

13
Tree	final CharSequence result = result . get ( STRING_CONSTANT , result ) ;
Code	final CharSequence result = result . get ( STRING_CONSTANT , result ) ;
Distance : 5

14
Tree	CharSequence result = result . get ( null ) ;
Code	CharSequence result = result . get ( null ) ;
Distance : 6

15
Tree	final CharSequence result = result . get ( null ) ;
Code	final CharSequence result = result . get ( null ) ;
Distance : 5

16
Tree	final CharSequence result = result . get ( subSeq ) ;
Code	final CharSequence result = result . get ( subSeq ) ;
Distance : 4

17
Tree	final CharSequence result = get ( subSeq , lookupMap ) ;
Code	final CharSequence result = get ( subSeq , lookupMap ) ;
Distance : 5

18
Tree	final CharSequence result = result . get ( subSeq , Double.MAX_VALUE ) ;
Code	final CharSequence result = result . get ( subSeq , Double.MAX_VALUE ) ;
Distance : 4

19
Tree	final CharSequence result = result ;
Code	final CharSequence result = result ;
Distance : 9

20
Tree	final CharSequence result = lookupMap . get ( STRING_CONSTANT , result ) ;
Code	final CharSequence result = lookupMap . get ( STRING_CONSTANT , result ) ;
Distance : 4

21
Tree	CharSequence result = toString ( subSeq , result ) ;
Code	CharSequence result = toString ( subSeq , result ) ;
Distance : 7

22
Tree	CharSequence result = get ( result ) ;
Code	CharSequence result = get ( result ) ;
Distance : 7

23
Tree	CharSequence result = lookupMap . get ( subSeq ) ;
Code	CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 4

24
Tree	final CharSequence result = greatestCommonDivisor . get ( subSeq ) ;
Code	final CharSequence result = greatestCommonDivisor . get ( subSeq ) ;
Distance : 4

25
Tree	final CharSequence result = result . get ( subSeq , Long.MAX_VALUE ) ;
Code	final CharSequence result = result . get ( subSeq , Long.MAX_VALUE ) ;
Distance : 4

26
Tree	final CharSequence result = result . get ( Locale.ENGLISH ) ;
Code	final CharSequence result = result . get ( Locale.ENGLISH ) ;
Distance : 5

27
Tree	CharSequence result = get ( subSeq , result ) ;
Code	CharSequence result = get ( subSeq , result ) ;
Distance : 6

28
Tree	CharSequence result = get ( result , result ) ;
Code	CharSequence result = get ( result , result ) ;
Distance : 7

29
Tree	final CharSequence result = result . get ( subSeq , = ) ;
Code	final CharSequence result = result . get ( subSeq , = ) ;
Distance : 4

30
Tree	final CharSequence result = get ( subSeq ) ;
Code	final CharSequence result = get ( subSeq ) ;
Distance : 5

31
Tree	CharSequence result = lookupMap . get ( subSeq ) ;
Code	CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 4

32
Tree	CharSequence result = result . get () ;
Code	CharSequence result = result . get () ;
Distance : 7

33
Tree	final CharSequence result = toString ( subSeq , result ) ;
Code	final CharSequence result = toString ( subSeq , result ) ;
Distance : 6

34
Tree	CharSequence result = get () ;
Code	CharSequence result = get () ;
Distance : 8

35
Tree	CharSequence result = result . get () ;
Code	CharSequence result = result . get () ;
Distance : 7

36
Tree	final CharSequence result = lookupMap . get ( subSeq , true ) ;
Code	final CharSequence result = lookupMap . get ( subSeq , true ) ;
Distance : 3

37
Tree	CharSequence result = get () ;
Code	CharSequence result = get () ;
Distance : 8

38
Tree	CharSequence result = get ( subSeq ) ;
Code	CharSequence result = get ( subSeq ) ;
Distance : 6

39
Tree	final CharSequence result = result . get ( NUMBER_CONSTANT ) ;
Code	final CharSequence result = result . get ( NUMBER_CONSTANT ) ;
Distance : 5

40
Tree	final CharSequence result = toString () ;
Code	final CharSequence result = toString () ;
Distance : 7

41
Tree	final CharSequence result = get () ;
Code	final CharSequence result = get () ;
Distance : 7

42
Tree	final CharSequence result = get ( result ) ;
Code	final CharSequence result = get ( result ) ;
Distance : 6

43
Tree	final CharSequence result = lookupMap . get ( subSeq ) ;
Code	final CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 3

44
Tree	final int result = result . get ( subSeq ) ;
Code	final int result = result . get ( subSeq ) ;
Distance : 5

45
Tree	final short result = result . get ( subSeq ) ;
Code	final short result = result . get ( subSeq ) ;
Distance : 5

46
Tree	final CharSequence result = toString ( subSeq ) ;
Code	final CharSequence result = toString ( subSeq ) ;
Distance : 6

47
Tree	CharSequence result = result . result ( subSeq ) ;
Code	CharSequence result = result . result ( subSeq ) ;
Distance : 6

48
Tree	final char result = result . get ( subSeq ) ;
Code	final char result = result . get ( subSeq ) ;
Distance : 5

49
Tree	final CharSequence result = result . get ( Void.TYPE , result ) ;
Code	final CharSequence result = result . get ( Void.TYPE , result ) ;
Distance : 5

50
Tree	final CharSequence result = result . get ( subSeq , false ) ;
Code	final CharSequence result = result . get ( subSeq , false ) ;
Distance : 4

51
Tree	final CharSequence result = result . get ( result ) ;
Code	final CharSequence result = result . get ( result ) ;
Distance : 5

52
Tree	final CharSequence result = get () ;
Code	final CharSequence result = get () ;
Distance : 7

53
Tree	final CharSequence result = lookupMap ;
Code	final CharSequence result = lookupMap ;
Distance : 8

54
Tree	final CharSequence result = lookupMap . get ( NUMBER_CONSTANT ) ;
Code	final CharSequence result = lookupMap . get ( NUMBER_CONSTANT ) ;
Distance : 4

55
Tree	final CharSequence result = result . get ( result , result ) ;
Code	final CharSequence result = result . get ( result , result ) ;
Distance : 5

56
Tree	CharSequence result = lookupMap . get ( result ) ;
Code	CharSequence result = lookupMap . get ( result ) ;
Distance : 5

57
Tree	static CharSequence result = result ;
Code	static CharSequence result = result ;
Distance : 10

58
Tree	final CharSequence result = result . get () ;
Code	final CharSequence result = result . get () ;
Distance : 6

59
Tree	CharSequence result = lookupMap . get ( STRING_CONSTANT , result ) ;
Code	CharSequence result = lookupMap . get ( STRING_CONSTANT , result ) ;
Distance : 5

60
Tree	static CharSequence result = result . get ( NUMBER_CONSTANT ) ;
Code	static CharSequence result = result . get ( NUMBER_CONSTANT ) ;
Distance : 6

61
Tree	final CharSequence result = Integer.MAX_VALUE . get ( subSeq ) ;
Code	final CharSequence result = Integer.MAX_VALUE . get ( subSeq ) ;
Distance : 4

62
Tree	CharSequence result = result . get ( subSeq , lookupMap ) ;
Code	CharSequence result = result . get ( subSeq , lookupMap ) ;
Distance : 5

63
Tree	final CharSequence result = lookupMap . get ( result ) ;
Code	final CharSequence result = lookupMap . get ( result ) ;
Distance : 4

64
Tree	final CharSequence result = lookupMap . get ( NUMBER_CONSTANT , result ) ;
Code	final CharSequence result = lookupMap . get ( NUMBER_CONSTANT , result ) ;
Distance : 4

65
Tree	final CharSequence result = result . get ( result ) ;
Code	final CharSequence result = result . get ( result ) ;
Distance : 5

66
Tree	final CharSequence result = result ;
Code	final CharSequence result = result ;
Distance : 9

67
Tree	final CharSequence result = result . get ( wrapOn ) ;
Code	final CharSequence result = result . get ( wrapOn ) ;
Distance : 5

68
Tree	CharSequence result = result . get ( result ) ;
Code	CharSequence result = result . get ( result ) ;
Distance : 6

69
Tree	final CharSequence result = get ( result , result ) ;
Code	final CharSequence result = get ( result , result ) ;
Distance : 6

70
Tree	CharSequence result = result . get ( subSeq , Double.MAX_VALUE ) ;
Code	CharSequence result = result . get ( subSeq , Double.MAX_VALUE ) ;
Distance : 5

71
Tree	CharSequence result = result . get ( subSeq ) ;
Code	CharSequence result = result . get ( subSeq ) ;
Distance : 5

72
Tree	CharSequence result = lookupMap . get () ;
Code	CharSequence result = lookupMap . get () ;
Distance : 6

73
Tree	final CharSequence result = result . get ( subSeq , true ) ;
Code	final CharSequence result = result . get ( subSeq , true ) ;
Distance : 4

74
Tree	final CharSequence result = result . get ( subSeq ) ;
Code	final CharSequence result = result . get ( subSeq ) ;
Distance : 4

75
Tree	final CharSequence result = get ( subSeq , lookupMap , final ) ;
Code	final CharSequence result = get ( subSeq , lookupMap , final ) ;
Distance : 6

76
Tree	static CharSequence result = get () ;
Code	static CharSequence result = get () ;
Distance : 8

77
Tree	CharSequence result = result . get ( STRING_CONSTANT , result ) ;
Code	CharSequence result = result . get ( STRING_CONSTANT , result ) ;
Distance : 6

78
Tree	CharSequence result = lookupMap . get ( subSeq , result ) ;
Code	CharSequence result = lookupMap . get ( subSeq , result ) ;
Distance : 4

79
Tree	CharSequence result = result . get ( subSeq , Long.MAX_VALUE ) ;
Code	CharSequence result = result . get ( subSeq , Long.MAX_VALUE ) ;
Distance : 5

80
Tree	final CharSequence result = get ( subSeq , result , result ) ;
Code	final CharSequence result = get ( subSeq , result , result ) ;
Distance : 6

81
Tree	CharSequence result = get ( subSeq , lookupMap ) ;
Code	CharSequence result = get ( subSeq , lookupMap ) ;
Distance : 6

82
Tree	final void result = result . get ( subSeq ) ;
Code	final void result = result . get ( subSeq ) ;
Distance : 5

83
Tree	CharSequence result = toString () ;
Code	CharSequence result = toString () ;
Distance : 8

84
Tree	final CharSequence result = result . get ( subSeq ) ;
Code	final CharSequence result = result . get ( subSeq ) ;
Distance : 4

85
Tree	final CharSequence result = result . get ( Void.TYPE ) ;
Code	final CharSequence result = result . get ( Void.TYPE ) ;
Distance : 5

86
Tree	CharSequence result = result . get ( result , result ) ;
Code	CharSequence result = result . get ( result , result ) ;
Distance : 6

87
Tree	final CharSequence result = get ( subSeq , result , final ) ;
Code	final CharSequence result = get ( subSeq , result , final ) ;
Distance : 6

88
Tree	final CharSequence result = lookupMap . get ( subSeq ) ;
Code	final CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 3

89
Tree	CharSequence result = result . get ( super(); ) ;
Code	CharSequence result = result . get ( super(); ) ;
Distance : 6

90
Tree	final CharSequence result = result . get ( return; ) ;
Code	final CharSequence result = result . get ( return; ) ;
Distance : 5

91
Tree	final CharSequence result = result . get ( result ) ;
Code	final CharSequence result = result . get ( result ) ;
Distance : 5

92
Tree	final CharSequence result = result . get ( Locale.ENGLISH , result ) ;
Code	final CharSequence result = result . get ( Locale.ENGLISH , result ) ;
Distance : 5

93
Tree	CharSequence result = result . get ( STRING_CONSTANT , result ) ;
Code	CharSequence result = result . get ( STRING_CONSTANT , result ) ;
Distance : 6

94
Tree	final CharSequence result = result . get ( NUMBER_CONSTANT , result ) ;
Code	final CharSequence result = result . get ( NUMBER_CONSTANT , result ) ;
Distance : 5

95
Tree	final CharSequence result = EscapeUtils.ESCAPE_ECMASCRIPT . get ( subSeq ) ;
Code	final CharSequence result = EscapeUtils.ESCAPE_ECMASCRIPT . get ( subSeq ) ;
Distance : 4

96
Tree	final CharSequence result = result . get ( wrapOn , result ) ;
Code	final CharSequence result = result . get ( wrapOn , result ) ;
Distance : 5

97
Tree	final CharSequence result = lookupMap . get ( result ) ;
Code	final CharSequence result = lookupMap . get ( result ) ;
Distance : 4

98
Tree	CharSequence result = result . get ( subSeq , Integer.MAX_VALUE ) ;
Code	CharSequence result = result . get ( subSeq , Integer.MAX_VALUE ) ;
Distance : 5

99
Tree	CharSequence result = result . get ( subSeq , Float.MIN_VALUE ) ;
Code	CharSequence result = result . get ( subSeq , Float.MIN_VALUE ) ;
Distance : 5

100
Tree	final CharSequence result = result . get ( bounds.length , result ) ;
Code	final CharSequence result = result . get ( bounds.length , result ) ;
Distance : 5

101
Tree	final CharSequence result = result . get ( NUMBER_CONSTANT , result ) ;
Code	final CharSequence result = result . get ( NUMBER_CONSTANT , result ) ;
Distance : 5

102
Tree	final CharSequence result = result . get ( NUMBER_CONSTANT ) ;
Code	final CharSequence result = result . get ( NUMBER_CONSTANT ) ;
Distance : 5

103
Tree	final CharSequence result = get ( subSeq ) ;
Code	final CharSequence result = get ( subSeq ) ;
Distance : 5

104
Tree	final CharSequence result = lookupMap . get ( NUMBER_CONSTANT , result ) ;
Code	final CharSequence result = lookupMap . get ( NUMBER_CONSTANT , result ) ;
Distance : 4

105
Tree	CharSequence result = lookupMap . get () ;
Code	CharSequence result = lookupMap . get () ;
Distance : 6

106
Tree	final CharSequence result = result . get ( subSeq , result ) ;
Code	final CharSequence result = result . get ( subSeq , result ) ;
Distance : 4

107
Tree	final CharSequence result = lookupMap . get ( subSeq ) ;
Code	final CharSequence result = lookupMap . get ( subSeq ) ;
Distance : 3

108
Tree	CharSequence result = toString ( subSeq ) ;
Code	CharSequence result = toString ( subSeq ) ;
Distance : 7

109
Tree	CharSequence result = result . get ( subSeq , result ) ;
Code	CharSequence result = result . get ( subSeq , result ) ;
Distance : 5

110
Tree	CharSequence result = toString () ;
Code	CharSequence result = toString () ;
Distance : 8

111
Tree	static CharSequence result = result . get () ;
Code	static CharSequence result = result . get () ;
Distance : 7

112
Tree	final CharSequence result = get ( subSeq , result ) ;
Code	final CharSequence result = get ( subSeq , result ) ;
Distance : 5

113
Tree	CharSequence result = get ( subSeq ) ;
Code	CharSequence result = get ( subSeq ) ;
Distance : 6

114
Tree	final CharSequence result = lookupMap . get ( subSeq , result ) ;
Code	final CharSequence result = lookupMap . get ( subSeq , result ) ;
Distance : 3

115
Tree	CharSequence result = result . get ( subSeq ) ;
Code	CharSequence result = result . get ( subSeq ) ;
Distance : 5

116
Tree	final CharSequence result = result . get ( subSeq , Float.MIN_VALUE ) ;
Code	final CharSequence result = result . get ( subSeq , Float.MIN_VALUE ) ;
Distance : 4

117
Tree	final CharSequence result = lookupMap . get ( subSeq , false ) ;
Code	final CharSequence result = lookupMap . get ( subSeq , false ) ;
Distance : 3

118
Tree	final CharSequence result = result . result ( subSeq ) ;
Code	final CharSequence result = result . result ( subSeq ) ;
Distance : 5

119
Tree	final CharSequence result = get ( result , result , final ) ;
Code	final CharSequence result = get ( result , result , final ) ;
Distance : 7

120
Tree	final CharSequence result = result . get ( subSeq , Integer.MAX_VALUE ) ;
Code	final CharSequence result = result . get ( subSeq , Integer.MAX_VALUE ) ;
Distance : 4

121
Tree	final CharSequence result = result . get ( super(); ) ;
Code	final CharSequence result = result . get ( super(); ) ;
Distance : 5

122
Tree	CharSequence result = result . get ( STRING_CONSTANT , result ) ;
Code	CharSequence result = result . get ( STRING_CONSTANT , result ) ;
Distance : 6

123
Tree	CharSequence result = lookupMap . get ( null ) ;
Code	CharSequence result = lookupMap . get ( null ) ;
Distance : 5

========================================================================


